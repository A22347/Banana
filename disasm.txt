
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 cc d7 00 00       	call   c000d7ec <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 53 e9 01 00       	call   c001e978 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 54 f5 01 c0       	mov    ebx,0xc001f554
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 5c f5 01 c0    	cmp    ebx,0xc001f55c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 c8 b3 03 c0       	mov    eax,0xc003b3c8
c0000049:	3d c8 b3 03 c0       	cmp    eax,0xc003b3c8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 c8 b3 03 c0       	push   0xc003b3c8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 c8 b3 03 c0       	mov    eax,0xc003b3c8
c0000075:	2d c8 b3 03 c0       	sub    eax,0xc003b3c8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 c8 b3 03 c0       	push   0xc003b3c8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 68 b5 03 c0 00 	cmp    BYTE PTR ds:0xc003b568,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 64 f5 01 c0       	mov    ebx,0xc001f564
c00000bb:	81 eb 60 f5 01 c0    	sub    ebx,0xc001f560
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 60 f5 01 c0       	mov    esi,0xc001f560
c00000ca:	a1 6c b5 03 c0       	mov    eax,ds:0xc003b56c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 6c b5 03 c0       	mov    ds:0xc003b56c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 6c b5 03 c0       	mov    eax,ds:0xc003b56c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 c8 b3 03 c0       	push   0xc003b3c8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 68 b5 03 c0 01 	mov    BYTE PTR ds:0xc003b568,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 70 b5 03 c0       	push   0xc003b570
c000012c:	68 c8 b3 03 c0       	push   0xc003b3c8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <doTPAUSE>:
c0000150:	fb                   	sti    
c0000151:	31 c0                	xor    eax,eax
c0000153:	31 d2                	xor    edx,edx
c0000155:	66 0f ae f0          	tpause eax
c0000159:	c3                   	ret    

c000015a <hasLegacyFPU>:
c000015a:	0f 20 c2             	mov    edx,cr0
c000015d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000163:	0f 22 c2             	mov    cr0,edx
c0000166:	db e3                	fninit 
c0000168:	dd 3d 7d 01 00 c0    	fnstsw WORD PTR ds:0xc000017d
c000016e:	31 c0                	xor    eax,eax
c0000170:	66 81 3d 7d 01 00 c0 00 00 	cmp    WORD PTR ds:0xc000017d,0x0
c0000179:	75 01                	jne    c000017c <hasLegacyFPU.nofpu>

c000017b <hasLegacyFPU.hasfpu>:
c000017b:	40                   	inc    eax

c000017c <hasLegacyFPU.nofpu>:
c000017c:	c3                   	ret    

c000017d <testword>:
c000017d:	aa                   	stos   BYTE PTR es:[edi],al
c000017e:	55                   	push   ebp

c000017f <is486>:
c000017f:	0f 09                	wbinvd 
c0000181:	31 c0                	xor    eax,eax
c0000183:	40                   	inc    eax
c0000184:	c3                   	ret    
c0000185:	90                   	nop
c0000186:	90                   	nop
c0000187:	90                   	nop
c0000188:	90                   	nop
c0000189:	90                   	nop
c000018a:	90                   	nop
c000018b:	90                   	nop
c000018c:	90                   	nop
c000018d:	90                   	nop
c000018e:	90                   	nop
c000018f:	90                   	nop
c0000190:	90                   	nop
c0000191:	90                   	nop
c0000192:	90                   	nop
c0000193:	90                   	nop
c0000194:	90                   	nop
c0000195:	90                   	nop
c0000196:	90                   	nop
c0000197:	90                   	nop
c0000198:	90                   	nop
c0000199:	90                   	nop
c000019a:	90                   	nop
c000019b:	90                   	nop
c000019c:	90                   	nop
c000019d:	90                   	nop
c000019e:	90                   	nop
c000019f:	90                   	nop
c00001a0:	90                   	nop
c00001a1:	90                   	nop
c00001a2:	90                   	nop
c00001a3:	90                   	nop
c00001a4:	90                   	nop
c00001a5:	90                   	nop
c00001a6:	90                   	nop
c00001a7:	90                   	nop
c00001a8:	90                   	nop
c00001a9:	90                   	nop
c00001aa:	90                   	nop
c00001ab:	90                   	nop
c00001ac:	90                   	nop
c00001ad:	90                   	nop
c00001ae:	90                   	nop
c00001af:	90                   	nop
c00001b0:	90                   	nop
c00001b1:	90                   	nop
c00001b2:	90                   	nop
c00001b3:	90                   	nop
c00001b4:	90                   	nop
c00001b5:	90                   	nop
c00001b6:	90                   	nop
c00001b7:	90                   	nop
c00001b8:	90                   	nop
c00001b9:	90                   	nop
c00001ba:	90                   	nop
c00001bb:	90                   	nop
c00001bc:	90                   	nop
c00001bd:	90                   	nop
c00001be:	90                   	nop
c00001bf:	90                   	nop
c00001c0:	90                   	nop
c00001c1:	90                   	nop
c00001c2:	90                   	nop
c00001c3:	90                   	nop
c00001c4:	90                   	nop
c00001c5:	90                   	nop
c00001c6:	90                   	nop
c00001c7:	90                   	nop
c00001c8:	90                   	nop
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	31 c0                	xor    eax,eax
c00001e1:	c3                   	ret    

c00001e2 <goToVM86>:
c00001e2:	fa                   	cli    
c00001e3:	55                   	push   ebp
c00001e4:	89 e5                	mov    ebp,esp
c00001e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001e9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00001ec:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00001ef:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00001f2:	25 ff ff 00 00       	and    eax,0xffff
c00001f7:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00001fd:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0000203:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000209:	52                   	push   edx
c000020a:	51                   	push   ecx
c000020b:	68 02 02 02 00       	push   0x20202
c0000210:	53                   	push   ebx
c0000211:	50                   	push   eax
c0000212:	cf                   	iret   

c0000213 <goToUsermode>:
c0000213:	fa                   	cli    
c0000214:	55                   	push   ebp
c0000215:	89 e5                	mov    ebp,esp
c0000217:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000021a:	66 b8 23 00          	mov    ax,0x23
c000021e:	66 8e d8             	mov    ds,ax
c0000221:	66 8e c0             	mov    es,ax
c0000224:	66 8e e0             	mov    fs,ax
c0000227:	66 8e e8             	mov    gs,ax
c000022a:	89 e0                	mov    eax,esp
c000022c:	68 23 00 00 00       	push   0x23
c0000231:	50                   	push   eax
c0000232:	68 02 02 00 00       	push   0x202
c0000237:	68 1b 00 00 00       	push   0x1b
c000023c:	53                   	push   ebx
c000023d:	cf                   	iret   

c000023e <switchToThreadASMFirstTime>:
c000023e:	9c                   	pushf  
c000023f:	fa                   	cli    
c0000240:	50                   	push   eax
c0000241:	53                   	push   ebx
c0000242:	51                   	push   ecx
c0000243:	52                   	push   edx
c0000244:	56                   	push   esi
c0000245:	57                   	push   edi
c0000246:	55                   	push   ebp
c0000247:	e9 11 00 00 00       	jmp    c000025d <commonThreadSwitch>

c000024c <switchToThreadASM>:
c000024c:	9c                   	pushf  
c000024d:	50                   	push   eax
c000024e:	53                   	push   ebx
c000024f:	51                   	push   ecx
c0000250:	52                   	push   edx
c0000251:	56                   	push   esi
c0000252:	57                   	push   edi
c0000253:	55                   	push   ebp
c0000254:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000025a:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c000025d <commonThreadSwitch>:
c000025d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000261:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000267:	8b 06                	mov    eax,DWORD PTR [esi]
c0000269:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000026c:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000026f:	0f 20 d9             	mov    ecx,cr3
c0000272:	39 c8                	cmp    eax,ecx
c0000274:	74 03                	je     c0000279 <commonThreadSwitch.doneVAS>
c0000276:	0f 22 d8             	mov    cr3,eax

c0000279 <commonThreadSwitch.doneVAS>:
c0000279:	85 d2                	test   edx,edx
c000027b:	74 4e                	je     c00002cb <commonThreadSwitch.notFirstTime>
c000027d:	fa                   	cli    
c000027e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000281:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000286:	60                   	pusha  
c0000287:	e8 ea 20 01 00       	call   c0012376 <mapVASFirstTime>
c000028c:	61                   	popa   
c000028d:	89 c4                	mov    esp,eax
c000028f:	56                   	push   esi
c0000290:	52                   	push   edx
c0000291:	e8 2e dd 00 00       	call   c000dfc4 <changeTSS>
c0000296:	5a                   	pop    edx
c0000297:	5e                   	pop    esi
c0000298:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000029f:	81 fa 01 00 00 00    	cmp    edx,0x1
c00002a5:	74 39                	je     c00002e0 <commonThreadSwitch.cameOffAFork>
c00002a7:	5d                   	pop    ebp
c00002a8:	5f                   	pop    edi
c00002a9:	5e                   	pop    esi
c00002aa:	59                   	pop    ecx
c00002ab:	59                   	pop    ecx
c00002ac:	5b                   	pop    ebx
c00002ad:	58                   	pop    eax
c00002ae:	81 c4 04 00 00 00    	add    esp,0x4
c00002b4:	6a 02                	push   0x2
c00002b6:	9d                   	popf   
c00002b7:	52                   	push   edx
c00002b8:	e8 1a e1 00 00       	call   c000e3d7 <taskStartupFunction>
c00002bd:	5a                   	pop    edx
c00002be:	50                   	push   eax
c00002bf:	ff d2                	call   edx
c00002c1:	e8 c0 e8 00 00       	call   c000eb86 <taskReturned>
c00002c6:	e9 fb ff ff ff       	jmp    c00002c6 <commonThreadSwitch.doneVAS+0x4d>

c00002cb <commonThreadSwitch.notFirstTime>:
c00002cb:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ce:	56                   	push   esi
c00002cf:	52                   	push   edx
c00002d0:	e8 ef dc 00 00       	call   c000dfc4 <changeTSS>
c00002d5:	5a                   	pop    edx
c00002d6:	5e                   	pop    esi
c00002d7:	5d                   	pop    ebp
c00002d8:	5f                   	pop    edi
c00002d9:	5e                   	pop    esi
c00002da:	5a                   	pop    edx
c00002db:	59                   	pop    ecx
c00002dc:	5b                   	pop    ebx
c00002dd:	58                   	pop    eax
c00002de:	9d                   	popf   
c00002df:	c3                   	ret    

c00002e0 <commonThreadSwitch.cameOffAFork>:
c00002e0:	31 c0                	xor    eax,eax
c00002e2:	31 d2                	xor    edx,edx
c00002e4:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c00002e7:	e9 a2 02 00 00       	jmp    c000058e <offAForkJumpThingy>

c00002ec <detectCPUID>:
c00002ec:	9c                   	pushf  
c00002ed:	9c                   	pushf  
c00002ee:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002f5:	9d                   	popf   
c00002f6:	9c                   	pushf  
c00002f7:	58                   	pop    eax
c00002f8:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002fb:	9d                   	popf   
c00002fc:	25 00 00 20 00       	and    eax,0x200000
c0000301:	c3                   	ret    

c0000302 <asmQuickAcquireLock>:
c0000302:	55                   	push   ebp
c0000303:	89 e5                	mov    ebp,esp
c0000305:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000308 <asmQuickAcquireLock.retry>:
c0000308:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030d:	72 02                	jb     c0000311 <asmQuickAcquireLock.spin_with_pause>
c000030f:	fa                   	cli    
c0000310:	c3                   	ret    

c0000311 <asmQuickAcquireLock.spin_with_pause>:
c0000311:	f3 90                	pause  
c0000313:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000319:	75 f6                	jne    c0000311 <asmQuickAcquireLock.spin_with_pause>
c000031b:	e9 e8 ff ff ff       	jmp    c0000308 <asmQuickAcquireLock.retry>

c0000320 <asmQuickReleaseLock>:
c0000320:	55                   	push   ebp
c0000321:	89 e5                	mov    ebp,esp
c0000323:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000032a:	5d                   	pop    ebp
c000032b:	c3                   	ret    

c000032c <asmAcquireLock>:
c000032c:	55                   	push   ebp
c000032d:	89 e5                	mov    ebp,esp
c000032f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000332 <asmAcquireLock.retry>:
c0000332:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000337:	72 05                	jb     c000033e <asmAcquireLock.spin_with_pause>
c0000339:	9c                   	pushf  
c000033a:	58                   	pop    eax
c000033b:	fa                   	cli    
c000033c:	5d                   	pop    ebp
c000033d:	c3                   	ret    

c000033e <asmAcquireLock.spin_with_pause>:
c000033e:	f3 90                	pause  
c0000340:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000346:	75 f6                	jne    c000033e <asmAcquireLock.spin_with_pause>
c0000348:	e9 e5 ff ff ff       	jmp    c0000332 <asmAcquireLock.retry>

c000034d <asmReleaseLock>:
c000034d:	55                   	push   ebp
c000034e:	89 e5                	mov    ebp,esp
c0000350:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000353:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000356:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000035c:	52                   	push   edx
c000035d:	9d                   	popf   
c000035e:	5d                   	pop    ebp
c000035f:	c3                   	ret    

c0000360 <loadGDT>:
c0000360:	0f 01 15 44 bb 03 c0 	lgdtd  ds:0xc003bb44
c0000367:	66 b8 10 00          	mov    ax,0x10
c000036b:	66 8e d8             	mov    ds,ax
c000036e:	66 8e c0             	mov    es,ax
c0000371:	66 8e e0             	mov    fs,ax
c0000374:	66 8e e8             	mov    gs,ax
c0000377:	66 8e d0             	mov    ss,ax
c000037a:	e9 00 00 00 00       	jmp    c000037f <flush2>

c000037f <flush2>:
c000037f:	c3                   	ret    

c0000380 <isr0>:
c0000380:	fa                   	cli    
c0000381:	68 00 00 00 00       	push   0x0
c0000386:	68 00 00 00 00       	push   0x0
c000038b:	e9 a2 01 00 00       	jmp    c0000532 <int_common_stub>

c0000390 <isr1>:
c0000390:	fa                   	cli    
c0000391:	6a 00                	push   0x0
c0000393:	6a 01                	push   0x1
c0000395:	e9 98 01 00 00       	jmp    c0000532 <int_common_stub>

c000039a <isr2>:
c000039a:	fa                   	cli    
c000039b:	6a 00                	push   0x0
c000039d:	6a 02                	push   0x2
c000039f:	e9 8e 01 00 00       	jmp    c0000532 <int_common_stub>

c00003a4 <isr3>:
c00003a4:	fa                   	cli    
c00003a5:	6a 00                	push   0x0
c00003a7:	6a 03                	push   0x3
c00003a9:	e9 84 01 00 00       	jmp    c0000532 <int_common_stub>

c00003ae <isr4>:
c00003ae:	fa                   	cli    
c00003af:	6a 00                	push   0x0
c00003b1:	6a 04                	push   0x4
c00003b3:	e9 7a 01 00 00       	jmp    c0000532 <int_common_stub>

c00003b8 <isr5>:
c00003b8:	fa                   	cli    
c00003b9:	6a 00                	push   0x0
c00003bb:	6a 05                	push   0x5
c00003bd:	e9 70 01 00 00       	jmp    c0000532 <int_common_stub>

c00003c2 <isr6>:
c00003c2:	fa                   	cli    
c00003c3:	6a 00                	push   0x0
c00003c5:	6a 06                	push   0x6
c00003c7:	e9 66 01 00 00       	jmp    c0000532 <int_common_stub>

c00003cc <isr7>:
c00003cc:	fa                   	cli    
c00003cd:	6a 00                	push   0x0
c00003cf:	6a 07                	push   0x7
c00003d1:	e9 5c 01 00 00       	jmp    c0000532 <int_common_stub>

c00003d6 <isr8>:
c00003d6:	fa                   	cli    
c00003d7:	6a 08                	push   0x8
c00003d9:	e9 54 01 00 00       	jmp    c0000532 <int_common_stub>

c00003de <isr9>:
c00003de:	fa                   	cli    
c00003df:	6a 00                	push   0x0
c00003e1:	6a 09                	push   0x9
c00003e3:	e9 4a 01 00 00       	jmp    c0000532 <int_common_stub>

c00003e8 <isr10>:
c00003e8:	fa                   	cli    
c00003e9:	6a 0a                	push   0xa
c00003eb:	e9 42 01 00 00       	jmp    c0000532 <int_common_stub>

c00003f0 <isr11>:
c00003f0:	fa                   	cli    
c00003f1:	6a 0b                	push   0xb
c00003f3:	e9 3a 01 00 00       	jmp    c0000532 <int_common_stub>

c00003f8 <isr12>:
c00003f8:	fa                   	cli    
c00003f9:	6a 0c                	push   0xc
c00003fb:	e9 32 01 00 00       	jmp    c0000532 <int_common_stub>

c0000400 <isr13>:
c0000400:	fa                   	cli    
c0000401:	6a 0d                	push   0xd
c0000403:	e9 2a 01 00 00       	jmp    c0000532 <int_common_stub>

c0000408 <isr14>:
c0000408:	fa                   	cli    
c0000409:	6a 0e                	push   0xe
c000040b:	e9 22 01 00 00       	jmp    c0000532 <int_common_stub>

c0000410 <isr15>:
c0000410:	fa                   	cli    
c0000411:	6a 00                	push   0x0
c0000413:	6a 0f                	push   0xf
c0000415:	e9 18 01 00 00       	jmp    c0000532 <int_common_stub>

c000041a <isr16>:
c000041a:	fa                   	cli    
c000041b:	6a 00                	push   0x0
c000041d:	6a 10                	push   0x10
c000041f:	e9 0e 01 00 00       	jmp    c0000532 <int_common_stub>

c0000424 <isr17>:
c0000424:	fa                   	cli    
c0000425:	6a 00                	push   0x0
c0000427:	6a 11                	push   0x11
c0000429:	e9 04 01 00 00       	jmp    c0000532 <int_common_stub>

c000042e <isr18>:
c000042e:	fa                   	cli    
c000042f:	6a 00                	push   0x0
c0000431:	6a 12                	push   0x12
c0000433:	e9 fa 00 00 00       	jmp    c0000532 <int_common_stub>

c0000438 <isr96>:
c0000438:	fa                   	cli    
c0000439:	6a 00                	push   0x0
c000043b:	6a 60                	push   0x60
c000043d:	e9 20 01 00 00       	jmp    c0000562 <syscall_common_stub>

c0000442 <irq0>:
c0000442:	fa                   	cli    
c0000443:	6a 00                	push   0x0
c0000445:	6a 20                	push   0x20
c0000447:	e9 e6 00 00 00       	jmp    c0000532 <int_common_stub>

c000044c <irq1>:
c000044c:	fa                   	cli    
c000044d:	6a 00                	push   0x0
c000044f:	6a 21                	push   0x21
c0000451:	e9 dc 00 00 00       	jmp    c0000532 <int_common_stub>

c0000456 <irq2>:
c0000456:	fa                   	cli    
c0000457:	6a 00                	push   0x0
c0000459:	6a 22                	push   0x22
c000045b:	e9 d2 00 00 00       	jmp    c0000532 <int_common_stub>

c0000460 <irq3>:
c0000460:	fa                   	cli    
c0000461:	6a 00                	push   0x0
c0000463:	6a 23                	push   0x23
c0000465:	e9 c8 00 00 00       	jmp    c0000532 <int_common_stub>

c000046a <irq4>:
c000046a:	fa                   	cli    
c000046b:	6a 00                	push   0x0
c000046d:	6a 24                	push   0x24
c000046f:	e9 be 00 00 00       	jmp    c0000532 <int_common_stub>

c0000474 <irq5>:
c0000474:	fa                   	cli    
c0000475:	6a 00                	push   0x0
c0000477:	6a 25                	push   0x25
c0000479:	e9 b4 00 00 00       	jmp    c0000532 <int_common_stub>

c000047e <irq6>:
c000047e:	fa                   	cli    
c000047f:	6a 00                	push   0x0
c0000481:	6a 26                	push   0x26
c0000483:	e9 aa 00 00 00       	jmp    c0000532 <int_common_stub>

c0000488 <irq7>:
c0000488:	fa                   	cli    
c0000489:	6a 00                	push   0x0
c000048b:	6a 27                	push   0x27
c000048d:	e9 a0 00 00 00       	jmp    c0000532 <int_common_stub>

c0000492 <irq8>:
c0000492:	fa                   	cli    
c0000493:	6a 00                	push   0x0
c0000495:	6a 28                	push   0x28
c0000497:	e9 96 00 00 00       	jmp    c0000532 <int_common_stub>

c000049c <irq9>:
c000049c:	fa                   	cli    
c000049d:	6a 00                	push   0x0
c000049f:	6a 29                	push   0x29
c00004a1:	e9 8c 00 00 00       	jmp    c0000532 <int_common_stub>

c00004a6 <irq10>:
c00004a6:	fa                   	cli    
c00004a7:	6a 00                	push   0x0
c00004a9:	6a 2a                	push   0x2a
c00004ab:	e9 82 00 00 00       	jmp    c0000532 <int_common_stub>

c00004b0 <irq11>:
c00004b0:	fa                   	cli    
c00004b1:	6a 00                	push   0x0
c00004b3:	6a 2b                	push   0x2b
c00004b5:	e9 78 00 00 00       	jmp    c0000532 <int_common_stub>

c00004ba <irq12>:
c00004ba:	fa                   	cli    
c00004bb:	6a 00                	push   0x0
c00004bd:	6a 2c                	push   0x2c
c00004bf:	e9 6e 00 00 00       	jmp    c0000532 <int_common_stub>

c00004c4 <irq13>:
c00004c4:	fa                   	cli    
c00004c5:	6a 00                	push   0x0
c00004c7:	6a 2d                	push   0x2d
c00004c9:	e9 64 00 00 00       	jmp    c0000532 <int_common_stub>

c00004ce <irq14>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 2e                	push   0x2e
c00004d3:	e9 5a 00 00 00       	jmp    c0000532 <int_common_stub>

c00004d8 <irq15>:
c00004d8:	fa                   	cli    
c00004d9:	6a 00                	push   0x0
c00004db:	6a 2f                	push   0x2f
c00004dd:	e9 50 00 00 00       	jmp    c0000532 <int_common_stub>

c00004e2 <irq16>:
c00004e2:	fa                   	cli    
c00004e3:	6a 00                	push   0x0
c00004e5:	6a 30                	push   0x30
c00004e7:	e9 46 00 00 00       	jmp    c0000532 <int_common_stub>

c00004ec <irq17>:
c00004ec:	fa                   	cli    
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 31                	push   0x31
c00004f1:	e9 3c 00 00 00       	jmp    c0000532 <int_common_stub>

c00004f6 <irq18>:
c00004f6:	fa                   	cli    
c00004f7:	6a 00                	push   0x0
c00004f9:	6a 32                	push   0x32
c00004fb:	e9 32 00 00 00       	jmp    c0000532 <int_common_stub>

c0000500 <irq19>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 33                	push   0x33
c0000505:	e9 28 00 00 00       	jmp    c0000532 <int_common_stub>

c000050a <irq20>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 34                	push   0x34
c000050f:	e9 1e 00 00 00       	jmp    c0000532 <int_common_stub>

c0000514 <irq21>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 35                	push   0x35
c0000519:	e9 14 00 00 00       	jmp    c0000532 <int_common_stub>

c000051e <irq22>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 36                	push   0x36
c0000523:	e9 0a 00 00 00       	jmp    c0000532 <int_common_stub>

c0000528 <irq23>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 37                	push   0x37
c000052d:	e9 00 00 00 00       	jmp    c0000532 <int_common_stub>

c0000532 <int_common_stub>:
c0000532:	60                   	pusha  
c0000533:	1e                   	push   ds
c0000534:	06                   	push   es
c0000535:	0f a0                	push   fs
c0000537:	0f a8                	push   gs
c0000539:	66 b8 10 00          	mov    ax,0x10
c000053d:	66 8e d8             	mov    ds,ax
c0000540:	66 8e c0             	mov    es,ax
c0000543:	66 8e e0             	mov    fs,ax
c0000546:	66 8e e8             	mov    gs,ax
c0000549:	89 e1                	mov    ecx,esp
c000054b:	51                   	push   ecx
c000054c:	b9 39 40 01 c0       	mov    ecx,0xc0014039
c0000551:	ff d1                	call   ecx
c0000553:	59                   	pop    ecx
c0000554:	0f a9                	pop    gs
c0000556:	0f a1                	pop    fs
c0000558:	07                   	pop    es
c0000559:	1f                   	pop    ds
c000055a:	61                   	popa   
c000055b:	81 c4 08 00 00 00    	add    esp,0x8
c0000561:	cf                   	iret   

c0000562 <syscall_common_stub>:
c0000562:	60                   	pusha  
c0000563:	1e                   	push   ds
c0000564:	06                   	push   es
c0000565:	0f a0                	push   fs
c0000567:	0f a8                	push   gs
c0000569:	66 b8 10 00          	mov    ax,0x10
c000056d:	66 8e d8             	mov    ds,ax
c0000570:	66 8e c0             	mov    es,ax
c0000573:	66 8e e0             	mov    fs,ax
c0000576:	66 8e e8             	mov    gs,ax
c0000579:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000057f:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000582:	89 e1                	mov    ecx,esp
c0000584:	51                   	push   ecx
c0000585:	fb                   	sti    
c0000586:	b9 39 40 01 c0       	mov    ecx,0xc0014039
c000058b:	ff d1                	call   ecx
c000058d:	59                   	pop    ecx

c000058e <offAForkJumpThingy>:
c000058e:	0f a9                	pop    gs
c0000590:	0f a1                	pop    fs
c0000592:	07                   	pop    es
c0000593:	1f                   	pop    ds
c0000594:	61                   	popa   
c0000595:	81 c4 08 00 00 00    	add    esp,0x8
c000059b:	cf                   	iret   

c000059c <memcmp>:
c000059c:	55                   	push   ebp
c000059d:	89 e5                	mov    ebp,esp
c000059f:	83 ec 10             	sub    esp,0x10
c00005a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00005a5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00005a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00005ab:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c00005ae:	eb 06                	jmp    c00005b6 <memcmp+0x1a>
c00005b0:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c00005b3:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
c00005b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00005b9:	8d 50 ff             	lea    edx,[eax-0x1]
c00005bc:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
c00005bf:	85 c0                	test   eax,eax
c00005c1:	74 0e                	je     c00005d1 <memcmp+0x35>
c00005c3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00005c6:	8a 10                	mov    dl,BYTE PTR [eax]
c00005c8:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c00005cb:	8a 00                	mov    al,BYTE PTR [eax]
c00005cd:	38 c2                	cmp    dl,al
c00005cf:	74 df                	je     c00005b0 <memcmp+0x14>
c00005d1:	83 7d 10 ff          	cmp    DWORD PTR [ebp+0x10],0xffffffff
c00005d5:	74 16                	je     c00005ed <memcmp+0x51>
c00005d7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00005da:	8a 00                	mov    al,BYTE PTR [eax]
c00005dc:	0f b6 d0             	movzx  edx,al
c00005df:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c00005e2:	8a 00                	mov    al,BYTE PTR [eax]
c00005e4:	0f b6 c0             	movzx  eax,al
c00005e7:	29 c2                	sub    edx,eax
c00005e9:	89 d0                	mov    eax,edx
c00005eb:	eb 05                	jmp    c00005f2 <memcmp+0x56>
c00005ed:	b8 00 00 00 00       	mov    eax,0x0
c00005f2:	c9                   	leave  
c00005f3:	c3                   	ret    

c00005f4 <memmove>:
c00005f4:	55                   	push   ebp
c00005f5:	89 e5                	mov    ebp,esp
c00005f7:	83 ec 10             	sub    esp,0x10
c00005fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00005fd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000600:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000603:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c0000606:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0000609:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
c000060c:	76 1d                	jbe    c000062b <memmove+0x37>
c000060e:	eb 13                	jmp    c0000623 <memmove+0x2f>
c0000610:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0000613:	8a 10                	mov    dl,BYTE PTR [eax]
c0000615:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000618:	88 10                	mov    BYTE PTR [eax],dl
c000061a:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c000061d:	ff 45 f8             	inc    DWORD PTR [ebp-0x8]
c0000620:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0000623:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0000627:	75 e7                	jne    c0000610 <memmove+0x1c>
c0000629:	eb 31                	jmp    c000065c <memmove+0x68>
c000062b:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c000062e:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
c0000631:	73 29                	jae    c000065c <memmove+0x68>
c0000633:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0000636:	48                   	dec    eax
c0000637:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
c000063a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000063d:	48                   	dec    eax
c000063e:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
c0000641:	eb 13                	jmp    c0000656 <memmove+0x62>
c0000643:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c0000646:	8a 10                	mov    dl,BYTE PTR [eax]
c0000648:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000064b:	88 10                	mov    BYTE PTR [eax],dl
c000064d:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
c0000650:	ff 4d f8             	dec    DWORD PTR [ebp-0x8]
c0000653:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0000656:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000065a:	75 e7                	jne    c0000643 <memmove+0x4f>
c000065c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000065f:	c9                   	leave  
c0000660:	c3                   	ret    

c0000661 <memcpy>:
c0000661:	55                   	push   ebp
c0000662:	89 e5                	mov    ebp,esp
c0000664:	57                   	push   edi
c0000665:	56                   	push   esi
c0000666:	83 ec 20             	sub    esp,0x20
c0000669:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000066c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000066f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000672:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0000675:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0000678:	83 e0 03             	and    eax,0x3
c000067b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c000067e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0000681:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0000684:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0000687:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000068a:	c1 e8 02             	shr    eax,0x2
c000068d:	89 c1                	mov    ecx,eax
c000068f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000692:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0000695:	89 c6                	mov    esi,eax
c0000697:	89 d7                	mov    edi,edx
c0000699:	fc                   	cld    
c000069a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000069c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00006a3:	eb 21                	jmp    c00006c6 <memcpy+0x65>
c00006a5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00006a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00006ab:	01 c2                	add    edx,eax
c00006ad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00006b0:	01 d0                	add    eax,edx
c00006b2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00006b5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00006b8:	01 d1                	add    ecx,edx
c00006ba:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00006bd:	01 ca                	add    edx,ecx
c00006bf:	8a 00                	mov    al,BYTE PTR [eax]
c00006c1:	88 02                	mov    BYTE PTR [edx],al
c00006c3:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00006c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00006c9:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
c00006cc:	72 d7                	jb     c00006a5 <memcpy+0x44>
c00006ce:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00006d1:	83 c4 20             	add    esp,0x20
c00006d4:	5e                   	pop    esi
c00006d5:	5f                   	pop    edi
c00006d6:	5d                   	pop    ebp
c00006d7:	c3                   	ret    

c00006d8 <memset>:
c00006d8:	55                   	push   ebp
c00006d9:	89 e5                	mov    ebp,esp
c00006db:	83 ec 10             	sub    esp,0x10
c00006de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00006e1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00006e4:	eb 10                	jmp    c00006f6 <memset+0x1e>
c00006e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00006e9:	88 c2                	mov    dl,al
c00006eb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00006ee:	88 10                	mov    BYTE PTR [eax],dl
c00006f0:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c00006f3:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00006f6:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00006fa:	75 ea                	jne    c00006e6 <memset+0xe>
c00006fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00006ff:	c9                   	leave  
c0000700:	c3                   	ret    

c0000701 <strlen>:
c0000701:	55                   	push   ebp
c0000702:	89 e5                	mov    ebp,esp
c0000704:	83 ec 10             	sub    esp,0x10
c0000707:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
c000070e:	eb 06                	jmp    c0000716 <strlen+0x15>
c0000710:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c0000713:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000716:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000719:	8a 00                	mov    al,BYTE PTR [eax]
c000071b:	84 c0                	test   al,al
c000071d:	75 f1                	jne    c0000710 <strlen+0xf>
c000071f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000722:	c9                   	leave  
c0000723:	c3                   	ret    

c0000724 <strpbrk>:
c0000724:	55                   	push   ebp
c0000725:	89 e5                	mov    ebp,esp
c0000727:	83 ec 10             	sub    esp,0x10
c000072a:	eb 2a                	jmp    c0000756 <strpbrk+0x32>
c000072c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000072f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000732:	eb 16                	jmp    c000074a <strpbrk+0x26>
c0000734:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000737:	8a 10                	mov    dl,BYTE PTR [eax]
c0000739:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000073c:	8a 00                	mov    al,BYTE PTR [eax]
c000073e:	38 c2                	cmp    dl,al
c0000740:	75 05                	jne    c0000747 <strpbrk+0x23>
c0000742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000745:	eb 1d                	jmp    c0000764 <strpbrk+0x40>
c0000747:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c000074a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000074d:	8a 00                	mov    al,BYTE PTR [eax]
c000074f:	84 c0                	test   al,al
c0000751:	75 e1                	jne    c0000734 <strpbrk+0x10>
c0000753:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000756:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000759:	8a 00                	mov    al,BYTE PTR [eax]
c000075b:	84 c0                	test   al,al
c000075d:	75 cd                	jne    c000072c <strpbrk+0x8>
c000075f:	b8 00 00 00 00       	mov    eax,0x0
c0000764:	c9                   	leave  
c0000765:	c3                   	ret    

c0000766 <strtok>:
c0000766:	55                   	push   ebp
c0000767:	89 e5                	mov    ebp,esp
c0000769:	83 ec 10             	sub    esp,0x10
c000076c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000076f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000772:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
c0000776:	75 18                	jne    c0000790 <strtok+0x2a>
c0000778:	a1 88 b5 03 c0       	mov    eax,ds:0xc003b588
c000077d:	85 c0                	test   eax,eax
c000077f:	75 07                	jne    c0000788 <strtok+0x22>
c0000781:	b8 00 00 00 00       	mov    eax,0x0
c0000786:	eb 6a                	jmp    c00007f2 <strtok+0x8c>
c0000788:	a1 88 b5 03 c0       	mov    eax,ds:0xc003b588
c000078d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000790:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0000793:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0000796:	e8 89 ff ff ff       	call   c0000724 <strpbrk>
c000079b:	83 c4 08             	add    esp,0x8
c000079e:	a3 88 b5 03 c0       	mov    ds:0xc003b588,eax
c00007a3:	eb 1f                	jmp    c00007c4 <strtok+0x5e>
c00007a5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00007a8:	8d 50 01             	lea    edx,[eax+0x1]
c00007ab:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00007ae:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007b1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00007b4:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c00007b7:	e8 68 ff ff ff       	call   c0000724 <strpbrk>
c00007bc:	83 c4 08             	add    esp,0x8
c00007bf:	a3 88 b5 03 c0       	mov    ds:0xc003b588,eax
c00007c4:	a1 88 b5 03 c0       	mov    eax,ds:0xc003b588
c00007c9:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
c00007cc:	74 d7                	je     c00007a5 <strtok+0x3f>
c00007ce:	a1 88 b5 03 c0       	mov    eax,ds:0xc003b588
c00007d3:	85 c0                	test   eax,eax
c00007d5:	74 16                	je     c00007ed <strtok+0x87>
c00007d7:	a1 88 b5 03 c0       	mov    eax,ds:0xc003b588
c00007dc:	8d 50 01             	lea    edx,[eax+0x1]
c00007df:	89 15 88 b5 03 c0    	mov    DWORD PTR ds:0xc003b588,edx
c00007e5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00007e8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00007eb:	eb 05                	jmp    c00007f2 <strtok+0x8c>
c00007ed:	b8 00 00 00 00       	mov    eax,0x0
c00007f2:	c9                   	leave  
c00007f3:	c3                   	ret    

c00007f4 <strcpy>:
c00007f4:	55                   	push   ebp
c00007f5:	89 e5                	mov    ebp,esp
c00007f7:	83 ec 10             	sub    esp,0x10
c00007fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00007fd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000800:	eb 10                	jmp    c0000812 <strcpy+0x1e>
c0000802:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000805:	8a 10                	mov    dl,BYTE PTR [eax]
c0000807:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000080a:	88 10                	mov    BYTE PTR [eax],dl
c000080c:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c000080f:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
c0000812:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000815:	8a 00                	mov    al,BYTE PTR [eax]
c0000817:	84 c0                	test   al,al
c0000819:	75 e7                	jne    c0000802 <strcpy+0xe>
c000081b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000081e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000821:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000824:	c9                   	leave  
c0000825:	c3                   	ret    

c0000826 <strncpy>:
c0000826:	55                   	push   ebp
c0000827:	89 e5                	mov    ebp,esp
c0000829:	83 ec 10             	sub    esp,0x10
c000082c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000082f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000835:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000838:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000083c:	74 2a                	je     c0000868 <strncpy+0x42>
c000083e:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0000841:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000844:	8d 42 01             	lea    eax,[edx+0x1]
c0000847:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000084a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000084d:	8d 48 01             	lea    ecx,[eax+0x1]
c0000850:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
c0000853:	8a 12                	mov    dl,BYTE PTR [edx]
c0000855:	88 10                	mov    BYTE PTR [eax],dl
c0000857:	8a 00                	mov    al,BYTE PTR [eax]
c0000859:	84 c0                	test   al,al
c000085b:	75 db                	jne    c0000838 <strncpy+0x12>
c000085d:	eb 09                	jmp    c0000868 <strncpy+0x42>
c000085f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000862:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000865:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
c0000868:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000086b:	8d 50 ff             	lea    edx,[eax-0x1]
c000086e:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
c0000871:	85 c0                	test   eax,eax
c0000873:	75 ea                	jne    c000085f <strncpy+0x39>
c0000875:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000878:	c9                   	leave  
c0000879:	c3                   	ret    

c000087a <strcmp>:
c000087a:	55                   	push   ebp
c000087b:	89 e5                	mov    ebp,esp
c000087d:	eb 19                	jmp    c0000898 <strcmp+0x1e>
c000087f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000882:	8d 50 01             	lea    edx,[eax+0x1]
c0000885:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
c0000888:	8a 00                	mov    al,BYTE PTR [eax]
c000088a:	84 c0                	test   al,al
c000088c:	75 07                	jne    c0000895 <strcmp+0x1b>
c000088e:	b8 00 00 00 00       	mov    eax,0x0
c0000893:	eb 25                	jmp    c00008ba <strcmp+0x40>
c0000895:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
c0000898:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000089b:	8a 10                	mov    dl,BYTE PTR [eax]
c000089d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00008a0:	8a 00                	mov    al,BYTE PTR [eax]
c00008a2:	38 c2                	cmp    dl,al
c00008a4:	74 d9                	je     c000087f <strcmp+0x5>
c00008a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008a9:	8a 00                	mov    al,BYTE PTR [eax]
c00008ab:	0f b6 d0             	movzx  edx,al
c00008ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00008b1:	8a 00                	mov    al,BYTE PTR [eax]
c00008b3:	0f b6 c0             	movzx  eax,al
c00008b6:	29 c2                	sub    edx,eax
c00008b8:	89 d0                	mov    eax,edx
c00008ba:	5d                   	pop    ebp
c00008bb:	c3                   	ret    

c00008bc <strchr>:
c00008bc:	55                   	push   ebp
c00008bd:	89 e5                	mov    ebp,esp
c00008bf:	eb 14                	jmp    c00008d5 <strchr+0x19>
c00008c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008c4:	8a 00                	mov    al,BYTE PTR [eax]
c00008c6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00008c9:	38 d0                	cmp    al,dl
c00008cb:	75 05                	jne    c00008d2 <strchr+0x16>
c00008cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008d0:	eb 11                	jmp    c00008e3 <strchr+0x27>
c00008d2:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c00008d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008d8:	8a 00                	mov    al,BYTE PTR [eax]
c00008da:	84 c0                	test   al,al
c00008dc:	75 e3                	jne    c00008c1 <strchr+0x5>
c00008de:	b8 00 00 00 00       	mov    eax,0x0
c00008e3:	5d                   	pop    ebp
c00008e4:	c3                   	ret    

c00008e5 <strncmp>:
c00008e5:	55                   	push   ebp
c00008e6:	89 e5                	mov    ebp,esp
c00008e8:	eb 19                	jmp    c0000903 <strncmp+0x1e>
c00008ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00008ed:	8d 50 01             	lea    edx,[eax+0x1]
c00008f0:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
c00008f3:	8a 00                	mov    al,BYTE PTR [eax]
c00008f5:	84 c0                	test   al,al
c00008f7:	75 07                	jne    c0000900 <strncmp+0x1b>
c00008f9:	b8 00 00 00 00       	mov    eax,0x0
c00008fe:	eb 3f                	jmp    c000093f <strncmp+0x5a>
c0000900:	ff 45 0c             	inc    DWORD PTR [ebp+0xc]
c0000903:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0000906:	8d 50 ff             	lea    edx,[eax-0x1]
c0000909:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
c000090c:	85 c0                	test   eax,eax
c000090e:	74 0e                	je     c000091e <strncmp+0x39>
c0000910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000913:	8a 10                	mov    dl,BYTE PTR [eax]
c0000915:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000918:	8a 00                	mov    al,BYTE PTR [eax]
c000091a:	38 c2                	cmp    dl,al
c000091c:	74 cc                	je     c00008ea <strncmp+0x5>
c000091e:	83 7d 10 ff          	cmp    DWORD PTR [ebp+0x10],0xffffffff
c0000922:	74 16                	je     c000093a <strncmp+0x55>
c0000924:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000927:	8a 00                	mov    al,BYTE PTR [eax]
c0000929:	0f b6 d0             	movzx  edx,al
c000092c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000092f:	8a 00                	mov    al,BYTE PTR [eax]
c0000931:	0f b6 c0             	movzx  eax,al
c0000934:	29 c2                	sub    edx,eax
c0000936:	89 d0                	mov    eax,edx
c0000938:	eb 05                	jmp    c000093f <strncmp+0x5a>
c000093a:	b8 00 00 00 00       	mov    eax,0x0
c000093f:	5d                   	pop    ebp
c0000940:	c3                   	ret    

c0000941 <strcat>:
c0000941:	55                   	push   ebp
c0000942:	89 e5                	mov    ebp,esp
c0000944:	83 ec 10             	sub    esp,0x10
c0000947:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000094a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c000094d:	90                   	nop
c000094e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000951:	8d 50 01             	lea    edx,[eax+0x1]
c0000954:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c0000957:	8a 00                	mov    al,BYTE PTR [eax]
c0000959:	84 c0                	test   al,al
c000095b:	75 f1                	jne    c000094e <strcat+0xd>
c000095d:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
c0000960:	90                   	nop
c0000961:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000964:	8d 42 01             	lea    eax,[edx+0x1]
c0000967:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c000096a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c000096d:	8d 48 01             	lea    ecx,[eax+0x1]
c0000970:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
c0000973:	8a 12                	mov    dl,BYTE PTR [edx]
c0000975:	88 10                	mov    BYTE PTR [eax],dl
c0000977:	8a 00                	mov    al,BYTE PTR [eax]
c0000979:	84 c0                	test   al,al
c000097b:	75 e4                	jne    c0000961 <strcat+0x20>
c000097d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000980:	c9                   	leave  
c0000981:	c3                   	ret    

c0000982 <strncat>:
c0000982:	55                   	push   ebp
c0000983:	89 e5                	mov    ebp,esp
c0000985:	83 ec 10             	sub    esp,0x10
c0000988:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000098c:	74 4b                	je     c00009d9 <strncat+0x57>
c000098e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000991:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0000994:	90                   	nop
c0000995:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0000998:	8d 50 01             	lea    edx,[eax+0x1]
c000099b:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000099e:	8a 00                	mov    al,BYTE PTR [eax]
c00009a0:	84 c0                	test   al,al
c00009a2:	75 f1                	jne    c0000995 <strncat+0x13>
c00009a4:	ff 4d fc             	dec    DWORD PTR [ebp-0x4]
c00009a7:	90                   	nop
c00009a8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00009ab:	8d 42 01             	lea    eax,[edx+0x1]
c00009ae:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00009b1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00009b4:	8d 48 01             	lea    ecx,[eax+0x1]
c00009b7:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
c00009ba:	8a 12                	mov    dl,BYTE PTR [edx]
c00009bc:	88 10                	mov    BYTE PTR [eax],dl
c00009be:	8a 00                	mov    al,BYTE PTR [eax]
c00009c0:	84 c0                	test   al,al
c00009c2:	74 09                	je     c00009cd <strncat+0x4b>
c00009c4:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00009c7:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00009cb:	75 db                	jne    c00009a8 <strncat+0x26>
c00009cd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00009d1:	75 06                	jne    c00009d9 <strncat+0x57>
c00009d3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00009d6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00009d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00009dc:	c9                   	leave  
c00009dd:	c3                   	ret    

c00009de <strstr>:
c00009de:	55                   	push   ebp
c00009df:	89 e5                	mov    ebp,esp
c00009e1:	83 ec 10             	sub    esp,0x10
c00009e4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00009e7:	e8 15 fd ff ff       	call   c0000701 <strlen>
c00009ec:	83 c4 04             	add    esp,0x4
c00009ef:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00009f2:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
c00009f6:	75 22                	jne    c0000a1a <strstr+0x3c>
c00009f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00009fb:	eb 32                	jmp    c0000a2f <strstr+0x51>
c00009fd:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0000a00:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0000a03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0000a06:	e8 91 fb ff ff       	call   c000059c <memcmp>
c0000a0b:	83 c4 0c             	add    esp,0xc
c0000a0e:	85 c0                	test   eax,eax
c0000a10:	75 05                	jne    c0000a17 <strstr+0x39>
c0000a12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a15:	eb 18                	jmp    c0000a2f <strstr+0x51>
c0000a17:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000a1a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0000a1d:	e8 df fc ff ff       	call   c0000701 <strlen>
c0000a22:	83 c4 04             	add    esp,0x4
c0000a25:	39 45 fc             	cmp    DWORD PTR [ebp-0x4],eax
c0000a28:	76 d3                	jbe    c00009fd <strstr+0x1f>
c0000a2a:	b8 00 00 00 00       	mov    eax,0x0
c0000a2f:	c9                   	leave  
c0000a30:	c3                   	ret    

c0000a31 <toupper>:
c0000a31:	55                   	push   ebp
c0000a32:	89 e5                	mov    ebp,esp
c0000a34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a37:	0f b6 c0             	movzx  eax,al
c0000a3a:	8a 80 80 f5 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0a80]
c0000a40:	0f b6 c0             	movzx  eax,al
c0000a43:	83 e0 02             	and    eax,0x2
c0000a46:	85 c0                	test   eax,eax
c0000a48:	74 08                	je     c0000a52 <toupper+0x21>
c0000a4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a4d:	83 e8 20             	sub    eax,0x20
c0000a50:	eb 03                	jmp    c0000a55 <toupper+0x24>
c0000a52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a55:	5d                   	pop    ebp
c0000a56:	c3                   	ret    

c0000a57 <tolower>:
c0000a57:	55                   	push   ebp
c0000a58:	89 e5                	mov    ebp,esp
c0000a5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a5d:	0f b6 c0             	movzx  eax,al
c0000a60:	8a 80 80 f5 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0a80]
c0000a66:	0f b6 c0             	movzx  eax,al
c0000a69:	83 e0 01             	and    eax,0x1
c0000a6c:	85 c0                	test   eax,eax
c0000a6e:	74 08                	je     c0000a78 <tolower+0x21>
c0000a70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a73:	83 c0 20             	add    eax,0x20
c0000a76:	eb 03                	jmp    c0000a7b <tolower+0x24>
c0000a78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a7b:	5d                   	pop    ebp
c0000a7c:	c3                   	ret    

c0000a7d <simple_strtoul>:
c0000a7d:	55                   	push   ebp
c0000a7e:	89 e5                	mov    ebp,esp
c0000a80:	83 ec 28             	sub    esp,0x28
c0000a83:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0000a8a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0000a91:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c0000a98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000a9b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0000a9e:	eb 03                	jmp    c0000aa3 <simple_strtoul+0x26>
c0000aa0:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000aa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000aa6:	8a 00                	mov    al,BYTE PTR [eax]
c0000aa8:	0f b6 c0             	movzx  eax,al
c0000aab:	8a 80 80 f5 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0a80]
c0000ab1:	0f b6 c0             	movzx  eax,al
c0000ab4:	83 e0 08             	and    eax,0x8
c0000ab7:	85 c0                	test   eax,eax
c0000ab9:	75 e5                	jne    c0000aa0 <simple_strtoul+0x23>
c0000abb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000abe:	8a 00                	mov    al,BYTE PTR [eax]
c0000ac0:	3c 09                	cmp    al,0x9
c0000ac2:	74 dc                	je     c0000aa0 <simple_strtoul+0x23>
c0000ac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000ac7:	8a 00                	mov    al,BYTE PTR [eax]
c0000ac9:	3c 2d                	cmp    al,0x2d
c0000acb:	75 0c                	jne    c0000ad9 <simple_strtoul+0x5c>
c0000acd:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
c0000ad4:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000ad7:	eb 1c                	jmp    c0000af5 <simple_strtoul+0x78>
c0000ad9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000adc:	8a 00                	mov    al,BYTE PTR [eax]
c0000ade:	3c 2b                	cmp    al,0x2b
c0000ae0:	75 0c                	jne    c0000aee <simple_strtoul+0x71>
c0000ae2:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000ae5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0000aec:	eb 07                	jmp    c0000af5 <simple_strtoul+0x78>
c0000aee:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0000af5:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0000af9:	75 43                	jne    c0000b3e <simple_strtoul+0xc1>
c0000afb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000afe:	8a 00                	mov    al,BYTE PTR [eax]
c0000b00:	3c 30                	cmp    al,0x30
c0000b02:	75 31                	jne    c0000b35 <simple_strtoul+0xb8>
c0000b04:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000b07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000b0a:	8a 00                	mov    al,BYTE PTR [eax]
c0000b0c:	0f be c0             	movsx  eax,al
c0000b0f:	83 ec 0c             	sub    esp,0xc
c0000b12:	50                   	push   eax
c0000b13:	e8 3f ff ff ff       	call   c0000a57 <tolower>
c0000b18:	83 c4 10             	add    esp,0x10
c0000b1b:	83 f8 78             	cmp    eax,0x78
c0000b1e:	75 0c                	jne    c0000b2c <simple_strtoul+0xaf>
c0000b20:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
c0000b27:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000b2a:	eb 26                	jmp    c0000b52 <simple_strtoul+0xd5>
c0000b2c:	c7 45 10 08 00 00 00 	mov    DWORD PTR [ebp+0x10],0x8
c0000b33:	eb 1d                	jmp    c0000b52 <simple_strtoul+0xd5>
c0000b35:	c7 45 10 0a 00 00 00 	mov    DWORD PTR [ebp+0x10],0xa
c0000b3c:	eb 14                	jmp    c0000b52 <simple_strtoul+0xd5>
c0000b3e:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
c0000b42:	0f 86 07 01 00 00    	jbe    c0000c4f <simple_strtoul+0x1d2>
c0000b48:	83 7d 10 24          	cmp    DWORD PTR [ebp+0x10],0x24
c0000b4c:	0f 87 fd 00 00 00    	ja     c0000c4f <simple_strtoul+0x1d2>
c0000b52:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
c0000b56:	75 0c                	jne    c0000b64 <simple_strtoul+0xe7>
c0000b58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000b5b:	8a 00                	mov    al,BYTE PTR [eax]
c0000b5d:	3c 30                	cmp    al,0x30
c0000b5f:	75 03                	jne    c0000b64 <simple_strtoul+0xe7>
c0000b61:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000b64:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
c0000b68:	0f 85 d2 00 00 00    	jne    c0000c40 <simple_strtoul+0x1c3>
c0000b6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000b71:	8a 00                	mov    al,BYTE PTR [eax]
c0000b73:	3c 30                	cmp    al,0x30
c0000b75:	0f 85 c5 00 00 00    	jne    c0000c40 <simple_strtoul+0x1c3>
c0000b7b:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000b7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000b81:	8a 00                	mov    al,BYTE PTR [eax]
c0000b83:	0f be c0             	movsx  eax,al
c0000b86:	83 ec 0c             	sub    esp,0xc
c0000b89:	50                   	push   eax
c0000b8a:	e8 c8 fe ff ff       	call   c0000a57 <tolower>
c0000b8f:	83 c4 10             	add    esp,0x10
c0000b92:	83 f8 78             	cmp    eax,0x78
c0000b95:	0f 85 a5 00 00 00    	jne    c0000c40 <simple_strtoul+0x1c3>
c0000b9b:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000b9e:	e9 9d 00 00 00       	jmp    c0000c40 <simple_strtoul+0x1c3>
c0000ba3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000ba6:	8a 00                	mov    al,BYTE PTR [eax]
c0000ba8:	0f b6 c0             	movzx  eax,al
c0000bab:	8a 80 80 f5 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0a80]
c0000bb1:	0f b6 c0             	movzx  eax,al
c0000bb4:	83 e0 04             	and    eax,0x4
c0000bb7:	85 c0                	test   eax,eax
c0000bb9:	74 10                	je     c0000bcb <simple_strtoul+0x14e>
c0000bbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000bbe:	8a 00                	mov    al,BYTE PTR [eax]
c0000bc0:	0f b6 c0             	movzx  eax,al
c0000bc3:	83 e8 30             	sub    eax,0x30
c0000bc6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0000bc9:	eb 31                	jmp    c0000bfc <simple_strtoul+0x17f>
c0000bcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000bce:	8a 00                	mov    al,BYTE PTR [eax]
c0000bd0:	0f be c0             	movsx  eax,al
c0000bd3:	83 ec 0c             	sub    esp,0xc
c0000bd6:	50                   	push   eax
c0000bd7:	e8 55 fe ff ff       	call   c0000a31 <toupper>
c0000bdc:	83 c4 10             	add    esp,0x10
c0000bdf:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0000be2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0000be5:	0f b6 c0             	movzx  eax,al
c0000be8:	8a 80 80 f5 01 c0    	mov    al,BYTE PTR [eax-0x3ffe0a80]
c0000bee:	0f b6 c0             	movzx  eax,al
c0000bf1:	83 e0 01             	and    eax,0x1
c0000bf4:	85 c0                	test   eax,eax
c0000bf6:	74 5a                	je     c0000c52 <simple_strtoul+0x1d5>
c0000bf8:	83 6d f0 37          	sub    DWORD PTR [ebp-0x10],0x37
c0000bfc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0000bff:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
c0000c02:	73 51                	jae    c0000c55 <simple_strtoul+0x1d8>
c0000c04:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0000c07:	f7 d0                	not    eax
c0000c09:	ba 00 00 00 00       	mov    edx,0x0
c0000c0e:	f7 75 10             	div    DWORD PTR [ebp+0x10]
c0000c11:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0000c14:	76 10                	jbe    c0000c26 <simple_strtoul+0x1a9>
c0000c16:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
c0000c1d:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0000c24:	eb 17                	jmp    c0000c3d <simple_strtoul+0x1c0>
c0000c26:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0000c29:	0f af 45 10          	imul   eax,DWORD PTR [ebp+0x10]
c0000c2d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0000c30:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0000c33:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0000c36:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
c0000c3d:	ff 45 08             	inc    DWORD PTR [ebp+0x8]
c0000c40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000c43:	8a 00                	mov    al,BYTE PTR [eax]
c0000c45:	84 c0                	test   al,al
c0000c47:	0f 85 56 ff ff ff    	jne    c0000ba3 <simple_strtoul+0x126>
c0000c4d:	eb 07                	jmp    c0000c56 <simple_strtoul+0x1d9>
c0000c4f:	90                   	nop
c0000c50:	eb 04                	jmp    c0000c56 <simple_strtoul+0x1d9>
c0000c52:	90                   	nop
c0000c53:	eb 01                	jmp    c0000c56 <simple_strtoul+0x1d9>
c0000c55:	90                   	nop
c0000c56:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
c0000c5a:	74 24                	je     c0000c80 <simple_strtoul+0x203>
c0000c5c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0000c60:	75 16                	jne    c0000c78 <simple_strtoul+0x1fb>
c0000c62:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0000c66:	75 10                	jne    c0000c78 <simple_strtoul+0x1fb>
c0000c68:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0000c6c:	74 0a                	je     c0000c78 <simple_strtoul+0x1fb>
c0000c6e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000c71:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0000c74:	89 10                	mov    DWORD PTR [eax],edx
c0000c76:	eb 08                	jmp    c0000c80 <simple_strtoul+0x203>
c0000c78:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0000c7b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0000c7e:	89 10                	mov    DWORD PTR [eax],edx
c0000c80:	83 7d e4 01          	cmp    DWORD PTR [ebp-0x1c],0x1
c0000c84:	75 07                	jne    c0000c8d <simple_strtoul+0x210>
c0000c86:	c7 45 e8 ff ff ff ff 	mov    DWORD PTR [ebp-0x18],0xffffffff
c0000c8d:	83 7d ec 01          	cmp    DWORD PTR [ebp-0x14],0x1
c0000c91:	75 03                	jne    c0000c96 <simple_strtoul+0x219>
c0000c93:	f7 5d e8             	neg    DWORD PTR [ebp-0x18]
c0000c96:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0000c99:	c9                   	leave  
c0000c9a:	c3                   	ret    

c0000c9b <largebin_index>:
c0000c9b:	89 c2                	mov    edx,eax
c0000c9d:	c1 ea 08             	shr    edx,0x8
c0000ca0:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000ca6:	77 10                	ja     c0000cb8 <largebin_index+0x1d>
c0000ca8:	0f bd d2             	bsr    edx,edx
c0000cab:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000cae:	d3 e8                	shr    eax,cl
c0000cb0:	83 e0 03             	and    eax,0x3
c0000cb3:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000cb7:	c3                   	ret    
c0000cb8:	b8 5f 00 00 00       	mov    eax,0x5f
c0000cbd:	c3                   	ret    

c0000cbe <malloc_init_state>:
c0000cbe:	53                   	push   ebx
c0000cbf:	8d 50 34             	lea    edx,[eax+0x34]
c0000cc2:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000cc8:	89 d1                	mov    ecx,edx
c0000cca:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000ccd:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000cd0:	83 c2 08             	add    edx,0x8
c0000cd3:	39 da                	cmp    edx,ebx
c0000cd5:	75 f3                	jne    c0000cca <malloc_init_state+0xc>
c0000cd7:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd9:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000ce3:	83 e2 03             	and    edx,0x3
c0000ce6:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000cf0:	83 ca 48             	or     edx,0x48
c0000cf3:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cfd:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000d07:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000d0e:	89 10                	mov    DWORD PTR [eax],edx
c0000d10:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000d13:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000d1d:	5b                   	pop    ebx
c0000d1e:	c3                   	ret    

c0000d1f <malloc_consolidate>:
c0000d1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0000d21:	85 d2                	test   edx,edx
c0000d23:	0f 84 d8 00 00 00    	je     c0000e01 <malloc_consolidate+0xe2>
c0000d29:	55                   	push   ebp
c0000d2a:	83 e2 fd             	and    edx,0xfffffffd
c0000d2d:	57                   	push   edi
c0000d2e:	89 c5                	mov    ebp,eax
c0000d30:	56                   	push   esi
c0000d31:	8d 78 34             	lea    edi,[eax+0x34]
c0000d34:	53                   	push   ebx
c0000d35:	83 ec 10             	sub    esp,0x10
c0000d38:	89 10                	mov    DWORD PTR [eax],edx
c0000d3a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000d3e:	c1 ea 03             	shr    edx,0x3
c0000d41:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000d45:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000d49:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d4c:	85 d2                	test   edx,edx
c0000d4e:	0f 84 98 00 00 00    	je     c0000dec <malloc_consolidate+0xcd>
c0000d54:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d5b:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d5e:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d61:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d65:	89 f9                	mov    ecx,edi
c0000d67:	83 e1 fe             	and    ecx,0xfffffffe
c0000d6a:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d6d:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d70:	83 e3 fc             	and    ebx,0xfffffffc
c0000d73:	83 e7 01             	and    edi,0x1
c0000d76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d79:	75 14                	jne    c0000d8f <malloc_consolidate+0x70>
c0000d7b:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d7d:	29 fa                	sub    edx,edi
c0000d7f:	01 f9                	add    ecx,edi
c0000d81:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d84:	89 fb                	mov    ebx,edi
c0000d86:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d89:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d8c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d8f:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d92:	74 40                	je     c0000dd4 <malloc_consolidate+0xb5>
c0000d94:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d97:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d9a:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d9e:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000da1:	83 e7 01             	and    edi,0x1
c0000da4:	75 0e                	jne    c0000db4 <malloc_consolidate+0x95>
c0000da6:	01 d9                	add    ecx,ebx
c0000da8:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000dab:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000dae:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000db1:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000db4:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000db7:	89 ce                	mov    esi,ecx
c0000db9:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000dbc:	83 ce 01             	or     esi,0x1
c0000dbf:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000dc2:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000dc5:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000dc8:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000dcc:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000dcf:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000dd2:	eb 0c                	jmp    c0000de0 <malloc_consolidate+0xc1>
c0000dd4:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000dd7:	83 c9 01             	or     ecx,0x1
c0000dda:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ddd:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000de0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000de4:	85 d2                	test   edx,edx
c0000de6:	0f 85 6f ff ff ff    	jne    c0000d5b <malloc_consolidate+0x3c>
c0000dec:	83 c5 04             	add    ebp,0x4
c0000def:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000df3:	0f 85 50 ff ff ff    	jne    c0000d49 <malloc_consolidate+0x2a>
c0000df9:	83 c4 10             	add    esp,0x10
c0000dfc:	5b                   	pop    ebx
c0000dfd:	5e                   	pop    esi
c0000dfe:	5f                   	pop    edi
c0000dff:	5d                   	pop    ebp
c0000e00:	c3                   	ret    
c0000e01:	e9 b8 fe ff ff       	jmp    c0000cbe <malloc_init_state>

c0000e06 <dlfree>:
c0000e06:	57                   	push   edi
c0000e07:	56                   	push   esi
c0000e08:	53                   	push   ebx
c0000e09:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000e0d:	85 db                	test   ebx,ebx
c0000e0f:	0f 84 e2 00 00 00    	je     c0000ef7 <dlfree+0xf1>
c0000e15:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000e18:	8b 0d a0 b5 03 c0    	mov    ecx,DWORD PTR ds:0xc003b5a0
c0000e1e:	89 f0                	mov    eax,esi
c0000e20:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000e23:	83 e0 fc             	and    eax,0xfffffffc
c0000e26:	39 c1                	cmp    ecx,eax
c0000e28:	72 24                	jb     c0000e4e <dlfree+0x48>
c0000e2a:	83 c9 03             	or     ecx,0x3
c0000e2d:	c1 e8 03             	shr    eax,0x3
c0000e30:	89 0d a0 b5 03 c0    	mov    DWORD PTR ds:0xc003b5a0,ecx
c0000e36:	83 e8 02             	sub    eax,0x2
c0000e39:	8b 0c 85 a4 b5 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc4a5c]
c0000e40:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000e42:	89 14 85 a4 b5 03 c0 	mov    DWORD PTR [eax*4-0x3ffc4a5c],edx
c0000e49:	e9 a9 00 00 00       	jmp    c0000ef7 <dlfree+0xf1>
c0000e4e:	83 e6 02             	and    esi,0x2
c0000e51:	0f 85 a0 00 00 00    	jne    c0000ef7 <dlfree+0xf1>
c0000e57:	83 c9 01             	or     ecx,0x1
c0000e5a:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e5d:	89 0d a0 b5 03 c0    	mov    DWORD PTR ds:0xc003b5a0,ecx
c0000e63:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e66:	83 e1 fc             	and    ecx,0xfffffffc
c0000e69:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e6d:	75 13                	jne    c0000e82 <dlfree+0x7c>
c0000e6f:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e72:	29 da                	sub    edx,ebx
c0000e74:	01 d8                	add    eax,ebx
c0000e76:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e79:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e7c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e7f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e82:	39 35 cc b5 03 c0    	cmp    DWORD PTR ds:0xc003b5cc,esi
c0000e88:	74 40                	je     c0000eca <dlfree+0xc4>
c0000e8a:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e8e:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e91:	80 e3 01             	and    bl,0x1
c0000e94:	75 0e                	jne    c0000ea4 <dlfree+0x9e>
c0000e96:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e99:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e9c:	01 c8                	add    eax,ecx
c0000e9e:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000ea1:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000ea4:	8b 0d dc b5 03 c0    	mov    ecx,DWORD PTR ds:0xc003b5dc
c0000eaa:	c7 42 0c d4 b5 03 c0 	mov    DWORD PTR [edx+0xc],0xc003b5d4
c0000eb1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000eb4:	89 15 dc b5 03 c0    	mov    DWORD PTR ds:0xc003b5dc,edx
c0000eba:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ebd:	89 c1                	mov    ecx,eax
c0000ebf:	83 c9 01             	or     ecx,0x1
c0000ec2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ec5:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000ec8:	eb 10                	jmp    c0000eda <dlfree+0xd4>
c0000eca:	01 c8                	add    eax,ecx
c0000ecc:	89 c1                	mov    ecx,eax
c0000ece:	83 c9 01             	or     ecx,0x1
c0000ed1:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ed4:	89 15 cc b5 03 c0    	mov    DWORD PTR ds:0xc003b5cc,edx
c0000eda:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000edf:	76 16                	jbe    c0000ef7 <dlfree+0xf1>
c0000ee1:	f6 05 a0 b5 03 c0 02 	test   BYTE PTR ds:0xc003b5a0,0x2
c0000ee8:	74 0d                	je     c0000ef7 <dlfree+0xf1>
c0000eea:	5b                   	pop    ebx
c0000eeb:	b8 a0 b5 03 c0       	mov    eax,0xc003b5a0
c0000ef0:	5e                   	pop    esi
c0000ef1:	5f                   	pop    edi
c0000ef2:	e9 28 fe ff ff       	jmp    c0000d1f <malloc_consolidate>
c0000ef7:	5b                   	pop    ebx
c0000ef8:	5e                   	pop    esi
c0000ef9:	5f                   	pop    edi
c0000efa:	c3                   	ret    

c0000efb <sYSMALLOc>:
c0000efb:	55                   	push   ebp
c0000efc:	57                   	push   edi
c0000efd:	56                   	push   esi
c0000efe:	53                   	push   ebx
c0000eff:	89 d3                	mov    ebx,edx
c0000f01:	83 ec 2c             	sub    esp,0x2c
c0000f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f08:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000f0e:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000f11:	8d 42 ff             	lea    eax,[edx-0x1]
c0000f14:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000f18:	74 1f                	je     c0000f39 <sYSMALLOc+0x3e>
c0000f1a:	89 d8                	mov    eax,ebx
c0000f1c:	e8 fe fd ff ff       	call   c0000d1f <malloc_consolidate>
c0000f21:	83 ec 0c             	sub    esp,0xc
c0000f24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000f28:	83 e8 07             	sub    eax,0x7
c0000f2b:	50                   	push   eax
c0000f2c:	e8 30 02 00 00       	call   c0001161 <dlmalloc>
c0000f31:	83 c4 10             	add    esp,0x10
c0000f34:	e9 20 02 00 00       	jmp    c0001159 <sYSMALLOc+0x25e>
c0000f39:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000f3c:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000f42:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000f45:	83 e0 fc             	and    eax,0xfffffffc
c0000f48:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f4c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f50:	83 c0 10             	add    eax,0x10
c0000f53:	01 c1                	add    ecx,eax
c0000f55:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f59:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f60:	74 04                	je     c0000f66 <sYSMALLOc+0x6b>
c0000f62:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f66:	f7 da                	neg    edx
c0000f68:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f6c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f70:	21 d1                	and    ecx,edx
c0000f72:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f76:	7f 07                	jg     c0000f7f <sYSMALLOc+0x84>
c0000f78:	31 c0                	xor    eax,eax
c0000f7a:	e9 da 01 00 00       	jmp    c0001159 <sYSMALLOc+0x25e>
c0000f7f:	83 ec 0c             	sub    esp,0xc
c0000f82:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f86:	e8 bf c3 00 00       	call   c000d34a <sbrk>
c0000f8b:	83 c4 10             	add    esp,0x10
c0000f8e:	89 c6                	mov    esi,eax
c0000f90:	83 f8 ff             	cmp    eax,0xffffffff
c0000f93:	74 e3                	je     c0000f78 <sYSMALLOc+0x7d>
c0000f95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f99:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f9d:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000fa0:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000fa6:	39 f1                	cmp    ecx,esi
c0000fa8:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000fae:	75 13                	jne    c0000fc3 <sYSMALLOc+0xc8>
c0000fb0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fb8:	83 c8 01             	or     eax,0x1
c0000fbb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000fbe:	e9 3e 01 00 00       	jmp    c0001101 <sYSMALLOc+0x206>
c0000fc3:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000fc9:	88 d0                	mov    al,dl
c0000fcb:	83 e0 01             	and    eax,0x1
c0000fce:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000fd3:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000fd7:	0f 95 c0             	setne  al
c0000fda:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000fde:	39 f1                	cmp    ecx,esi
c0000fe0:	76 12                	jbe    c0000ff4 <sYSMALLOc+0xf9>
c0000fe2:	84 c0                	test   al,al
c0000fe4:	74 0e                	je     c0000ff4 <sYSMALLOc+0xf9>
c0000fe6:	83 e2 fe             	and    edx,0xfffffffe
c0000fe9:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fef:	e9 83 00 00 00       	jmp    c0001077 <sYSMALLOc+0x17c>
c0000ff4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000ff9:	74 7c                	je     c0001077 <sYSMALLOc+0x17c>
c0000ffb:	84 c0                	test   al,al
c0000ffd:	74 0c                	je     c000100b <sYSMALLOc+0x110>
c0000fff:	89 f0                	mov    eax,esi
c0001001:	29 c8                	sub    eax,ecx
c0001003:	01 e8                	add    eax,ebp
c0001005:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c000100b:	89 f2                	mov    edx,esi
c000100d:	83 e2 07             	and    edx,0x7
c0001010:	74 0c                	je     c000101e <sYSMALLOc+0x123>
c0001012:	b8 08 00 00 00       	mov    eax,0x8
c0001017:	29 d0                	sub    eax,edx
c0001019:	8d 2c 06             	lea    ebp,[esi+eax*1]
c000101c:	eb 04                	jmp    c0001022 <sYSMALLOc+0x127>
c000101e:	89 f5                	mov    ebp,esi
c0001020:	31 c0                	xor    eax,eax
c0001022:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0001026:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000102a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000102e:	01 c1                	add    ecx,eax
c0001030:	83 ec 0c             	sub    esp,0xc
c0001033:	01 f1                	add    ecx,esi
c0001035:	01 ca                	add    edx,ecx
c0001037:	29 c8                	sub    eax,ecx
c0001039:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c000103d:	01 c2                	add    edx,eax
c000103f:	52                   	push   edx
c0001040:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0001044:	e8 01 c3 00 00       	call   c000d34a <sbrk>
c0001049:	83 c4 10             	add    esp,0x10
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001053:	75 0f                	jne    c0001064 <sYSMALLOc+0x169>
c0001055:	83 ec 0c             	sub    esp,0xc
c0001058:	6a 00                	push   0x0
c000105a:	e8 eb c2 00 00       	call   c000d34a <sbrk>
c000105f:	83 c4 10             	add    esp,0x10
c0001062:	eb 30                	jmp    c0001094 <sYSMALLOc+0x199>
c0001064:	39 c6                	cmp    esi,eax
c0001066:	76 33                	jbe    c000109b <sYSMALLOc+0x1a0>
c0001068:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000106c:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001073:	01 f0                	add    eax,esi
c0001075:	eb 1d                	jmp    c0001094 <sYSMALLOc+0x199>
c0001077:	83 ec 0c             	sub    esp,0xc
c000107a:	89 f5                	mov    ebp,esi
c000107c:	6a 00                	push   0x0
c000107e:	e8 c7 c2 00 00       	call   c000d34a <sbrk>
c0001083:	89 c2                	mov    edx,eax
c0001085:	29 f2                	sub    edx,esi
c0001087:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c000108b:	83 c4 10             	add    esp,0x10
c000108e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001094:	31 d2                	xor    edx,edx
c0001096:	83 f8 ff             	cmp    eax,0xffffffff
c0001099:	74 66                	je     c0001101 <sYSMALLOc+0x206>
c000109b:	29 e8                	sub    eax,ebp
c000109d:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c00010a0:	01 d0                	add    eax,edx
c00010a2:	83 c8 01             	or     eax,0x1
c00010a5:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00010a8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c00010ae:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00010b3:	74 4c                	je     c0001101 <sYSMALLOc+0x206>
c00010b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010b9:	83 e8 0c             	sub    eax,0xc
c00010bc:	83 e0 f8             	and    eax,0xfffffff8
c00010bf:	89 c2                	mov    edx,eax
c00010c1:	83 ca 01             	or     edx,0x1
c00010c4:	83 f8 0f             	cmp    eax,0xf
c00010c7:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c00010ca:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c00010d2:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c00010da:	76 25                	jbe    c0001101 <sYSMALLOc+0x206>
c00010dc:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00010e2:	83 ec 0c             	sub    esp,0xc
c00010e5:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010ef:	83 c7 08             	add    edi,0x8
c00010f2:	57                   	push   edi
c00010f3:	e8 0e fd ff ff       	call   c0000e06 <dlfree>
c00010f8:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010fe:	83 c4 10             	add    esp,0x10
c0001101:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001107:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c000110d:	73 06                	jae    c0001115 <sYSMALLOc+0x21a>
c000110f:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001115:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000111b:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001121:	73 06                	jae    c0001129 <sYSMALLOc+0x22e>
c0001123:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001129:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000112c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000112f:	83 e2 fc             	and    edx,0xfffffffc
c0001132:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0001136:	0f 82 3c fe ff ff    	jb     c0000f78 <sYSMALLOc+0x7d>
c000113c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0001140:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0001143:	29 fa                	sub    edx,edi
c0001145:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001148:	83 ca 01             	or     edx,0x1
c000114b:	89 fb                	mov    ebx,edi
c000114d:	83 c0 08             	add    eax,0x8
c0001150:	83 cb 01             	or     ebx,0x1
c0001153:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001156:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001159:	83 c4 2c             	add    esp,0x2c
c000115c:	5b                   	pop    ebx
c000115d:	5e                   	pop    esi
c000115e:	5f                   	pop    edi
c000115f:	5d                   	pop    ebp
c0001160:	c3                   	ret    

c0001161 <dlmalloc>:
c0001161:	55                   	push   ebp
c0001162:	57                   	push   edi
c0001163:	56                   	push   esi
c0001164:	53                   	push   ebx
c0001165:	83 ec 1c             	sub    esp,0x1c
c0001168:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000116c:	83 f8 df             	cmp    eax,0xffffffdf
c000116f:	0f 87 70 03 00 00    	ja     c00014e5 <dlmalloc+0x384>
c0001175:	83 c0 0b             	add    eax,0xb
c0001178:	be 10 00 00 00       	mov    esi,0x10
c000117d:	83 f8 0f             	cmp    eax,0xf
c0001180:	76 05                	jbe    c0001187 <dlmalloc+0x26>
c0001182:	83 e0 f8             	and    eax,0xfffffff8
c0001185:	89 c6                	mov    esi,eax
c0001187:	8b 3d a0 b5 03 c0    	mov    edi,DWORD PTR ds:0xc003b5a0
c000118d:	f7 c7 01 00 00 00    	test   edi,0x1
c0001193:	75 17                	jne    c00011ac <dlmalloc+0x4b>
c0001195:	85 ff                	test   edi,edi
c0001197:	0f 85 05 03 00 00    	jne    c00014a2 <dlmalloc+0x341>
c000119d:	b8 a0 b5 03 c0       	mov    eax,0xc003b5a0
c00011a2:	e8 78 fb ff ff       	call   c0000d1f <malloc_consolidate>
c00011a7:	e9 f6 02 00 00       	jmp    c00014a2 <dlmalloc+0x341>
c00011ac:	39 f7                	cmp    edi,esi
c00011ae:	72 1f                	jb     c00011cf <dlmalloc+0x6e>
c00011b0:	89 f2                	mov    edx,esi
c00011b2:	c1 ea 03             	shr    edx,0x3
c00011b5:	83 ea 02             	sub    edx,0x2
c00011b8:	8b 04 95 a4 b5 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc4a5c]
c00011bf:	85 c0                	test   eax,eax
c00011c1:	74 0c                	je     c00011cf <dlmalloc+0x6e>
c00011c3:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00011c6:	89 0c 95 a4 b5 03 c0 	mov    DWORD PTR [edx*4-0x3ffc4a5c],ecx
c00011cd:	eb 30                	jmp    c00011ff <dlmalloc+0x9e>
c00011cf:	89 f0                	mov    eax,esi
c00011d1:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011d7:	77 2e                	ja     c0001207 <dlmalloc+0xa6>
c00011d9:	c1 e8 03             	shr    eax,0x3
c00011dc:	8d 14 c5 d4 b5 03 c0 	lea    edx,[eax*8-0x3ffc4a2c]
c00011e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011e7:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011ea:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011ed:	39 c3                	cmp    ebx,eax
c00011ef:	74 2e                	je     c000121f <dlmalloc+0xbe>
c00011f1:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011f4:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011f9:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011fc:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011ff:	83 c0 08             	add    eax,0x8
c0001202:	e9 e0 02 00 00       	jmp    c00014e7 <dlmalloc+0x386>
c0001207:	e8 8f fa ff ff       	call   c0000c9b <largebin_index>
c000120c:	83 e7 02             	and    edi,0x2
c000120f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001213:	74 0a                	je     c000121f <dlmalloc+0xbe>
c0001215:	b8 a0 b5 03 c0       	mov    eax,0xc003b5a0
c000121a:	e8 00 fb ff ff       	call   c0000d1f <malloc_consolidate>
c000121f:	8d 46 10             	lea    eax,[esi+0x10]
c0001222:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001226:	8b 1d e0 b5 03 c0    	mov    ebx,DWORD PTR ds:0xc003b5e0
c000122c:	81 fb d4 b5 03 c0    	cmp    ebx,0xc003b5d4
c0001232:	0f 84 13 01 00 00    	je     c000134b <dlmalloc+0x1ea>
c0001238:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000123b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000123e:	83 e7 fc             	and    edi,0xfffffffc
c0001241:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001247:	77 4c                	ja     c0001295 <dlmalloc+0x134>
c0001249:	3d d4 b5 03 c0       	cmp    eax,0xc003b5d4
c000124e:	75 45                	jne    c0001295 <dlmalloc+0x134>
c0001250:	39 1d d0 b5 03 c0    	cmp    DWORD PTR ds:0xc003b5d0,ebx
c0001256:	75 3d                	jne    c0001295 <dlmalloc+0x134>
c0001258:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000125c:	73 37                	jae    c0001295 <dlmalloc+0x134>
c000125e:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001261:	89 fa                	mov    edx,edi
c0001263:	a3 dc b5 03 c0       	mov    ds:0xc003b5dc,eax
c0001268:	a3 e0 b5 03 c0       	mov    ds:0xc003b5e0,eax
c000126d:	a3 d0 b5 03 c0       	mov    ds:0xc003b5d0,eax
c0001272:	29 f2                	sub    edx,esi
c0001274:	c7 40 08 d4 b5 03 c0 	mov    DWORD PTR [eax+0x8],0xc003b5d4
c000127b:	c7 40 0c d4 b5 03 c0 	mov    DWORD PTR [eax+0xc],0xc003b5d4
c0001282:	83 ce 01             	or     esi,0x1
c0001285:	89 d1                	mov    ecx,edx
c0001287:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000128a:	83 c9 01             	or     ecx,0x1
c000128d:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001290:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001293:	eb 15                	jmp    c00012aa <dlmalloc+0x149>
c0001295:	a3 e0 b5 03 c0       	mov    ds:0xc003b5e0,eax
c000129a:	39 fe                	cmp    esi,edi
c000129c:	c7 40 08 d4 b5 03 c0 	mov    DWORD PTR [eax+0x8],0xc003b5d4
c00012a3:	75 0d                	jne    c00012b2 <dlmalloc+0x151>
c00012a5:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00012aa:	8d 43 08             	lea    eax,[ebx+0x8]
c00012ad:	e9 35 02 00 00       	jmp    c00014e7 <dlmalloc+0x386>
c00012b2:	89 f8                	mov    eax,edi
c00012b4:	81 ff ff 00 00 00    	cmp    edi,0xff
c00012ba:	77 19                	ja     c00012d5 <dlmalloc+0x174>
c00012bc:	c1 e8 03             	shr    eax,0x3
c00012bf:	8d 14 00             	lea    edx,[eax+eax*1]
c00012c2:	83 c2 0d             	add    edx,0xd
c00012c5:	8d 2c 95 98 b5 03 c0 	lea    ebp,[edx*4-0x3ffc4a68]
c00012cc:	8b 14 95 a0 b5 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc4a60]
c00012d3:	eb 46                	jmp    c000131b <dlmalloc+0x1ba>
c00012d5:	e8 c1 f9 ff ff       	call   c0000c9b <largebin_index>
c00012da:	8d 14 00             	lea    edx,[eax+eax*1]
c00012dd:	83 c2 0d             	add    edx,0xd
c00012e0:	8d 0c 95 a0 b5 03 c0 	lea    ecx,[edx*4-0x3ffc4a60]
c00012e7:	8b 14 95 a0 b5 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc4a60]
c00012ee:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012f1:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012f5:	89 d5                	mov    ebp,edx
c00012f7:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012fb:	74 1e                	je     c000131b <dlmalloc+0x1ba>
c00012fd:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001300:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001303:	77 12                	ja     c0001317 <dlmalloc+0x1b6>
c0001305:	83 cf 01             	or     edi,0x1
c0001308:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000130b:	76 05                	jbe    c0001312 <dlmalloc+0x1b1>
c000130d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001310:	eb f6                	jmp    c0001308 <dlmalloc+0x1a7>
c0001312:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0001315:	eb 04                	jmp    c000131b <dlmalloc+0x1ba>
c0001317:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000131b:	89 c7                	mov    edi,eax
c000131d:	88 c1                	mov    cl,al
c000131f:	c1 ff 05             	sar    edi,0x5
c0001322:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001326:	bf 01 00 00 00       	mov    edi,0x1
c000132b:	d3 e7                	shl    edi,cl
c000132d:	89 f8                	mov    eax,edi
c000132f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001333:	09 04 bd d4 b8 03 c0 	or     DWORD PTR [edi*4-0x3ffc472c],eax
c000133a:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c000133d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001340:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001343:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001346:	e9 db fe ff ff       	jmp    c0001226 <dlmalloc+0xc5>
c000134b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001351:	76 78                	jbe    c00013cb <dlmalloc+0x26a>
c0001353:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001357:	8d 04 c5 d4 b5 03 c0 	lea    eax,[eax*8-0x3ffc4a2c]
c000135e:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001361:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001364:	39 ca                	cmp    edx,ecx
c0001366:	74 63                	je     c00013cb <dlmalloc+0x26a>
c0001368:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000136b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000136e:	83 e3 fc             	and    ebx,0xfffffffc
c0001371:	39 de                	cmp    esi,ebx
c0001373:	77 52                	ja     c00013c7 <dlmalloc+0x266>
c0001375:	89 df                	mov    edi,ebx
c0001377:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000137a:	29 f7                	sub    edi,esi
c000137c:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000137f:	01 d3                	add    ebx,edx
c0001381:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001384:	83 ff 0f             	cmp    edi,0xf
c0001387:	8d 42 08             	lea    eax,[edx+0x8]
c000138a:	77 09                	ja     c0001395 <dlmalloc+0x234>
c000138c:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001390:	e9 52 01 00 00       	jmp    c00014e7 <dlmalloc+0x386>
c0001395:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001398:	83 ce 01             	or     esi,0x1
c000139b:	89 0d dc b5 03 c0    	mov    DWORD PTR ds:0xc003b5dc,ecx
c00013a1:	89 0d e0 b5 03 c0    	mov    DWORD PTR ds:0xc003b5e0,ecx
c00013a7:	c7 41 08 d4 b5 03 c0 	mov    DWORD PTR [ecx+0x8],0xc003b5d4
c00013ae:	c7 41 0c d4 b5 03 c0 	mov    DWORD PTR [ecx+0xc],0xc003b5d4
c00013b5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c00013b8:	89 fa                	mov    edx,edi
c00013ba:	83 ca 01             	or     edx,0x1
c00013bd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00013c0:	89 3b                	mov    DWORD PTR [ebx],edi
c00013c2:	e9 20 01 00 00       	jmp    c00014e7 <dlmalloc+0x386>
c00013c7:	89 c2                	mov    edx,eax
c00013c9:	eb 99                	jmp    c0001364 <dlmalloc+0x203>
c00013cb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00013cf:	b8 01 00 00 00       	mov    eax,0x1
c00013d4:	41                   	inc    ecx
c00013d5:	89 cb                	mov    ebx,ecx
c00013d7:	8d 14 cd cc b5 03 c0 	lea    edx,[ecx*8-0x3ffc4a34]
c00013de:	c1 eb 05             	shr    ebx,0x5
c00013e1:	d3 e0                	shl    eax,cl
c00013e3:	8b 3c 9d d4 b8 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc472c]
c00013ea:	39 f8                	cmp    eax,edi
c00013ec:	77 04                	ja     c00013f2 <dlmalloc+0x291>
c00013ee:	85 c0                	test   eax,eax
c00013f0:	75 26                	jne    c0001418 <dlmalloc+0x2b7>
c00013f2:	43                   	inc    ebx
c00013f3:	83 fb 02             	cmp    ebx,0x2
c00013f6:	0f 87 a6 00 00 00    	ja     c00014a2 <dlmalloc+0x341>
c00013fc:	8b 3c 9d d4 b8 03 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffc472c]
c0001403:	85 ff                	test   edi,edi
c0001405:	74 eb                	je     c00013f2 <dlmalloc+0x291>
c0001407:	89 d8                	mov    eax,ebx
c0001409:	c1 e0 06             	shl    eax,0x6
c000140c:	8d 14 85 cc b5 03 c0 	lea    edx,[eax*4-0x3ffc4a34]
c0001413:	b8 01 00 00 00       	mov    eax,0x1
c0001418:	85 f8                	test   eax,edi
c000141a:	75 07                	jne    c0001423 <dlmalloc+0x2c2>
c000141c:	83 c2 08             	add    edx,0x8
c000141f:	01 c0                	add    eax,eax
c0001421:	eb f5                	jmp    c0001418 <dlmalloc+0x2b7>
c0001423:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001426:	39 ca                	cmp    edx,ecx
c0001428:	75 14                	jne    c000143e <dlmalloc+0x2dd>
c000142a:	89 c1                	mov    ecx,eax
c000142c:	83 c2 08             	add    edx,0x8
c000142f:	f7 d1                	not    ecx
c0001431:	01 c0                	add    eax,eax
c0001433:	21 cf                	and    edi,ecx
c0001435:	89 3c 9d d4 b8 03 c0 	mov    DWORD PTR [ebx*4-0x3ffc472c],edi
c000143c:	eb ac                	jmp    c00013ea <dlmalloc+0x289>
c000143e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001441:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001444:	83 e0 fc             	and    eax,0xfffffffc
c0001447:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000144a:	89 c3                	mov    ebx,eax
c000144c:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000144f:	29 f3                	sub    ebx,esi
c0001451:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001454:	83 fb 0f             	cmp    ebx,0xf
c0001457:	8d 41 08             	lea    eax,[ecx+0x8]
c000145a:	77 09                	ja     c0001465 <dlmalloc+0x304>
c000145c:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001460:	e9 82 00 00 00       	jmp    c00014e7 <dlmalloc+0x386>
c0001465:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001468:	81 fe ff 00 00 00    	cmp    esi,0xff
c000146e:	89 3d dc b5 03 c0    	mov    DWORD PTR ds:0xc003b5dc,edi
c0001474:	89 3d e0 b5 03 c0    	mov    DWORD PTR ds:0xc003b5e0,edi
c000147a:	c7 47 08 d4 b5 03 c0 	mov    DWORD PTR [edi+0x8],0xc003b5d4
c0001481:	c7 47 0c d4 b5 03 c0 	mov    DWORD PTR [edi+0xc],0xc003b5d4
c0001488:	77 06                	ja     c0001490 <dlmalloc+0x32f>
c000148a:	89 3d d0 b5 03 c0    	mov    DWORD PTR ds:0xc003b5d0,edi
c0001490:	83 ce 01             	or     esi,0x1
c0001493:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001496:	89 d9                	mov    ecx,ebx
c0001498:	83 c9 01             	or     ecx,0x1
c000149b:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000149e:	89 1a                	mov    DWORD PTR [edx],ebx
c00014a0:	eb 45                	jmp    c00014e7 <dlmalloc+0x386>
c00014a2:	a1 cc b5 03 c0       	mov    eax,ds:0xc003b5cc
c00014a7:	8d 4e 10             	lea    ecx,[esi+0x10]
c00014aa:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00014ad:	83 e2 fc             	and    edx,0xfffffffc
c00014b0:	39 d1                	cmp    ecx,edx
c00014b2:	77 1e                	ja     c00014d2 <dlmalloc+0x371>
c00014b4:	8d 0c 30             	lea    ecx,[eax+esi*1]
c00014b7:	89 f3                	mov    ebx,esi
c00014b9:	89 0d cc b5 03 c0    	mov    DWORD PTR ds:0xc003b5cc,ecx
c00014bf:	83 cb 01             	or     ebx,0x1
c00014c2:	29 f2                	sub    edx,esi
c00014c4:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014c7:	83 ca 01             	or     edx,0x1
c00014ca:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00014cd:	e9 2d fd ff ff       	jmp    c00011ff <dlmalloc+0x9e>
c00014d2:	83 c4 1c             	add    esp,0x1c
c00014d5:	89 f0                	mov    eax,esi
c00014d7:	5b                   	pop    ebx
c00014d8:	ba a0 b5 03 c0       	mov    edx,0xc003b5a0
c00014dd:	5e                   	pop    esi
c00014de:	5f                   	pop    edi
c00014df:	5d                   	pop    ebp
c00014e0:	e9 16 fa ff ff       	jmp    c0000efb <sYSMALLOc>
c00014e5:	31 c0                	xor    eax,eax
c00014e7:	83 c4 1c             	add    esp,0x1c
c00014ea:	5b                   	pop    ebx
c00014eb:	5e                   	pop    esi
c00014ec:	5f                   	pop    edi
c00014ed:	5d                   	pop    ebp
c00014ee:	c3                   	ret    

c00014ef <iALLOc>:
c00014ef:	55                   	push   ebp
c00014f0:	89 c5                	mov    ebp,eax
c00014f2:	57                   	push   edi
c00014f3:	56                   	push   esi
c00014f4:	53                   	push   ebx
c00014f5:	83 ec 2c             	sub    esp,0x2c
c00014f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014fc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001500:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001504:	83 3d a0 b5 03 c0 00 	cmp    DWORD PTR ds:0xc003b5a0,0x0
c000150b:	75 12                	jne    c000151f <iALLOc+0x30>
c000150d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0001511:	b8 a0 b5 03 c0       	mov    eax,0xc003b5a0
c0001516:	e8 04 f8 ff ff       	call   c0000d1f <malloc_consolidate>
c000151b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000151f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001524:	74 12                	je     c0001538 <iALLOc+0x49>
c0001526:	85 ed                	test   ebp,ebp
c0001528:	0f 84 64 01 00 00    	je     c0001692 <iALLOc+0x1a3>
c000152e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001536:	eb 33                	jmp    c000156b <iALLOc+0x7c>
c0001538:	85 ed                	test   ebp,ebp
c000153a:	75 14                	jne    c0001550 <iALLOc+0x61>
c000153c:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001544:	83 c4 2c             	add    esp,0x2c
c0001547:	5b                   	pop    ebx
c0001548:	5e                   	pop    esi
c0001549:	5f                   	pop    edi
c000154a:	5d                   	pop    ebp
c000154b:	e9 11 fc ff ff       	jmp    c0001161 <dlmalloc>
c0001550:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001557:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c000155f:	83 f8 0f             	cmp    eax,0xf
c0001562:	76 07                	jbe    c000156b <iALLOc+0x7c>
c0001564:	83 e0 f8             	and    eax,0xfffffff8
c0001567:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000156b:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001570:	75 09                	jne    c000157b <iALLOc+0x8c>
c0001572:	89 d0                	mov    eax,edx
c0001574:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001577:	31 f6                	xor    esi,esi
c0001579:	eb 3b                	jmp    c00015b6 <iALLOc+0xc7>
c000157b:	8b 02                	mov    eax,DWORD PTR [edx]
c000157d:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001585:	83 c0 0b             	add    eax,0xb
c0001588:	83 f8 0f             	cmp    eax,0xf
c000158b:	76 07                	jbe    c0001594 <iALLOc+0xa5>
c000158d:	83 e0 f8             	and    eax,0xfffffff8
c0001590:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001594:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001598:	0f af f5             	imul   esi,ebp
c000159b:	eb 25                	jmp    c00015c2 <iALLOc+0xd3>
c000159d:	8b 18                	mov    ebx,DWORD PTR [eax]
c000159f:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00015a2:	bb 10 00 00 00       	mov    ebx,0x10
c00015a7:	83 f9 0f             	cmp    ecx,0xf
c00015aa:	76 05                	jbe    c00015b1 <iALLOc+0xc2>
c00015ac:	83 e1 f8             	and    ecx,0xfffffff8
c00015af:	89 cb                	mov    ebx,ecx
c00015b1:	01 de                	add    esi,ebx
c00015b3:	83 c0 04             	add    eax,0x4
c00015b6:	39 c7                	cmp    edi,eax
c00015b8:	75 e3                	jne    c000159d <iALLOc+0xae>
c00015ba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00015c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00015c6:	8b 1d f4 b8 03 c0    	mov    ebx,DWORD PTR ds:0xc003b8f4
c00015cc:	83 ec 0c             	sub    esp,0xc
c00015cf:	c7 05 f4 b8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b8f4,0x0
c00015d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00015dd:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00015e1:	50                   	push   eax
c00015e2:	e8 7a fb ff ff       	call   c0001161 <dlmalloc>
c00015e7:	83 c4 10             	add    esp,0x10
c00015ea:	89 1d f4 b8 03 c0    	mov    DWORD PTR ds:0xc003b8f4,ebx
c00015f0:	85 c0                	test   eax,eax
c00015f2:	0f 84 92 00 00 00    	je     c000168a <iALLOc+0x19b>
c00015f8:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015fb:	8d 78 f8             	lea    edi,[eax-0x8]
c00015fe:	83 e3 fc             	and    ebx,0xfffffffc
c0001601:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001605:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000160a:	74 1e                	je     c000162a <iALLOc+0x13b>
c000160c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0001610:	89 d9                	mov    ecx,ebx
c0001612:	52                   	push   edx
c0001613:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001617:	83 e9 04             	sub    ecx,0x4
c000161a:	51                   	push   ecx
c000161b:	6a 00                	push   0x0
c000161d:	50                   	push   eax
c000161e:	e8 b5 f0 ff ff       	call   c00006d8 <memset>
c0001623:	83 c4 10             	add    esp,0x10
c0001626:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000162a:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000162f:	75 14                	jne    c0001645 <iALLOc+0x156>
c0001631:	8d 04 37             	lea    eax,[edi+esi*1]
c0001634:	29 f3                	sub    ebx,esi
c0001636:	8d 48 08             	lea    ecx,[eax+0x8]
c0001639:	83 cb 01             	or     ebx,0x1
c000163c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001640:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001643:	89 f3                	mov    ebx,esi
c0001645:	31 c0                	xor    eax,eax
c0001647:	4d                   	dec    ebp
c0001648:	8d 4f 08             	lea    ecx,[edi+0x8]
c000164b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000164f:	39 c5                	cmp    ebp,eax
c0001651:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001654:	74 2c                	je     c0001682 <iALLOc+0x193>
c0001656:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000165a:	85 c9                	test   ecx,ecx
c000165c:	75 15                	jne    c0001673 <iALLOc+0x184>
c000165e:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001661:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001664:	b9 10 00 00 00       	mov    ecx,0x10
c0001669:	83 fe 0f             	cmp    esi,0xf
c000166c:	76 05                	jbe    c0001673 <iALLOc+0x184>
c000166e:	83 e6 f8             	and    esi,0xfffffff8
c0001671:	89 f1                	mov    ecx,esi
c0001673:	89 ce                	mov    esi,ecx
c0001675:	29 cb                	sub    ebx,ecx
c0001677:	83 ce 01             	or     esi,0x1
c000167a:	40                   	inc    eax
c000167b:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000167e:	01 cf                	add    edi,ecx
c0001680:	eb c6                	jmp    c0001648 <iALLOc+0x159>
c0001682:	83 cb 01             	or     ebx,0x1
c0001685:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001688:	eb 08                	jmp    c0001692 <iALLOc+0x1a3>
c000168a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001692:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001696:	83 c4 2c             	add    esp,0x2c
c0001699:	5b                   	pop    ebx
c000169a:	5e                   	pop    esi
c000169b:	5f                   	pop    edi
c000169c:	5d                   	pop    ebp
c000169d:	c3                   	ret    

c000169e <dlrealloc>:
c000169e:	55                   	push   ebp
c000169f:	57                   	push   edi
c00016a0:	56                   	push   esi
c00016a1:	53                   	push   ebx
c00016a2:	83 ec 1c             	sub    esp,0x1c
c00016a5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00016a9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00016ad:	85 db                	test   ebx,ebx
c00016af:	75 10                	jne    c00016c1 <dlrealloc+0x23>
c00016b1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00016b5:	83 c4 1c             	add    esp,0x1c
c00016b8:	5b                   	pop    ebx
c00016b9:	5e                   	pop    esi
c00016ba:	5f                   	pop    edi
c00016bb:	5d                   	pop    ebp
c00016bc:	e9 a0 fa ff ff       	jmp    c0001161 <dlmalloc>
c00016c1:	83 f8 df             	cmp    eax,0xffffffdf
c00016c4:	76 07                	jbe    c00016cd <dlrealloc+0x2f>
c00016c6:	31 db                	xor    ebx,ebx
c00016c8:	e9 7c 01 00 00       	jmp    c0001849 <dlrealloc+0x1ab>
c00016cd:	83 c0 0b             	add    eax,0xb
c00016d0:	bf 10 00 00 00       	mov    edi,0x10
c00016d5:	83 f8 0f             	cmp    eax,0xf
c00016d8:	76 05                	jbe    c00016df <dlrealloc+0x41>
c00016da:	83 e0 f8             	and    eax,0xfffffff8
c00016dd:	89 c7                	mov    edi,eax
c00016df:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00016e2:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00016e5:	89 c6                	mov    esi,eax
c00016e7:	83 e6 fc             	and    esi,0xfffffffc
c00016ea:	a8 02                	test   al,0x2
c00016ec:	75 d8                	jne    c00016c6 <dlrealloc+0x28>
c00016ee:	39 f7                	cmp    edi,esi
c00016f0:	0f 86 15 01 00 00    	jbe    c000180b <dlrealloc+0x16d>
c00016f6:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016fa:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016fd:	39 15 cc b5 03 c0    	cmp    DWORD PTR ds:0xc003b5cc,edx
c0001703:	75 33                	jne    c0001738 <dlrealloc+0x9a>
c0001705:	83 e1 fc             	and    ecx,0xfffffffc
c0001708:	01 f1                	add    ecx,esi
c000170a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000170e:	8d 4f 10             	lea    ecx,[edi+0x10]
c0001711:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0001715:	77 49                	ja     c0001760 <dlrealloc+0xc2>
c0001717:	01 fd                	add    ebp,edi
c0001719:	83 e0 01             	and    eax,0x1
c000171c:	09 f8                	or     eax,edi
c000171e:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001721:	89 2d cc b5 03 c0    	mov    DWORD PTR ds:0xc003b5cc,ebp
c0001727:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000172b:	29 f8                	sub    eax,edi
c000172d:	83 c8 01             	or     eax,0x1
c0001730:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001733:	e9 11 01 00 00       	jmp    c0001849 <dlrealloc+0x1ab>
c0001738:	89 c8                	mov    eax,ecx
c000173a:	83 e0 fe             	and    eax,0xfffffffe
c000173d:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001742:	75 1c                	jne    c0001760 <dlrealloc+0xc2>
c0001744:	83 e1 fc             	and    ecx,0xfffffffc
c0001747:	01 f1                	add    ecx,esi
c0001749:	39 cf                	cmp    edi,ecx
c000174b:	77 13                	ja     c0001760 <dlrealloc+0xc2>
c000174d:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001750:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001753:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001756:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001759:	89 ce                	mov    esi,ecx
c000175b:	e9 ab 00 00 00       	jmp    c000180b <dlrealloc+0x16d>
c0001760:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001764:	8d 47 f9             	lea    eax,[edi-0x7]
c0001767:	83 ec 0c             	sub    esp,0xc
c000176a:	50                   	push   eax
c000176b:	e8 f1 f9 ff ff       	call   c0001161 <dlmalloc>
c0001770:	83 c4 10             	add    esp,0x10
c0001773:	89 c1                	mov    ecx,eax
c0001775:	85 c0                	test   eax,eax
c0001777:	0f 84 49 ff ff ff    	je     c00016c6 <dlrealloc+0x28>
c000177d:	8d 40 f8             	lea    eax,[eax-0x8]
c0001780:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001784:	39 c2                	cmp    edx,eax
c0001786:	75 0a                	jne    c0001792 <dlrealloc+0xf4>
c0001788:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000178b:	83 e0 fc             	and    eax,0xfffffffc
c000178e:	01 c6                	add    esi,eax
c0001790:	eb 79                	jmp    c000180b <dlrealloc+0x16d>
c0001792:	83 ee 04             	sub    esi,0x4
c0001795:	83 fe 27             	cmp    esi,0x27
c0001798:	76 16                	jbe    c00017b0 <dlrealloc+0x112>
c000179a:	50                   	push   eax
c000179b:	56                   	push   esi
c000179c:	53                   	push   ebx
c000179d:	51                   	push   ecx
c000179e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00017a2:	e8 ba ee ff ff       	call   c0000661 <memcpy>
c00017a7:	83 c4 10             	add    esp,0x10
c00017aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017ae:	eb 43                	jmp    c00017f3 <dlrealloc+0x155>
c00017b0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00017b2:	83 fe 13             	cmp    esi,0x13
c00017b5:	89 01                	mov    DWORD PTR [ecx],eax
c00017b7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00017ba:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c00017bd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00017c0:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00017c3:	76 2e                	jbe    c00017f3 <dlrealloc+0x155>
c00017c5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00017c8:	83 fe 1b             	cmp    esi,0x1b
c00017cb:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00017ce:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00017d1:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00017d4:	76 1d                	jbe    c00017f3 <dlrealloc+0x155>
c00017d6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00017d9:	83 fe 23             	cmp    esi,0x23
c00017dc:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00017df:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00017e2:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00017e5:	76 0c                	jbe    c00017f3 <dlrealloc+0x155>
c00017e7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017ea:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017ed:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017f0:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017f3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017f7:	83 ec 0c             	sub    esp,0xc
c00017fa:	53                   	push   ebx
c00017fb:	e8 06 f6 ff ff       	call   c0000e06 <dlfree>
c0001800:	83 c4 10             	add    esp,0x10
c0001803:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001807:	89 cb                	mov    ebx,ecx
c0001809:	eb 3e                	jmp    c0001849 <dlrealloc+0x1ab>
c000180b:	89 f2                	mov    edx,esi
c000180d:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001810:	29 fa                	sub    edx,edi
c0001812:	83 e1 01             	and    ecx,0x1
c0001815:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c0001819:	83 fa 0f             	cmp    edx,0xf
c000181c:	77 0b                	ja     c0001829 <dlrealloc+0x18b>
c000181e:	09 ce                	or     esi,ecx
c0001820:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001823:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001827:	eb 20                	jmp    c0001849 <dlrealloc+0x1ab>
c0001829:	01 fd                	add    ebp,edi
c000182b:	83 ec 0c             	sub    esp,0xc
c000182e:	09 cf                	or     edi,ecx
c0001830:	83 ca 01             	or     edx,0x1
c0001833:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c0001836:	83 c5 08             	add    ebp,0x8
c0001839:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000183c:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001840:	55                   	push   ebp
c0001841:	e8 c0 f5 ff ff       	call   c0000e06 <dlfree>
c0001846:	83 c4 10             	add    esp,0x10
c0001849:	83 c4 1c             	add    esp,0x1c
c000184c:	89 d8                	mov    eax,ebx
c000184e:	5b                   	pop    ebx
c000184f:	5e                   	pop    esi
c0001850:	5f                   	pop    edi
c0001851:	5d                   	pop    ebp
c0001852:	c3                   	ret    

c0001853 <dlmemalign>:
c0001853:	55                   	push   ebp
c0001854:	57                   	push   edi
c0001855:	56                   	push   esi
c0001856:	53                   	push   ebx
c0001857:	83 ec 0c             	sub    esp,0xc
c000185a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000185e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001862:	83 fa 08             	cmp    edx,0x8
c0001865:	77 10                	ja     c0001877 <dlmemalign+0x24>
c0001867:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000186b:	83 c4 0c             	add    esp,0xc
c000186e:	5b                   	pop    ebx
c000186f:	5e                   	pop    esi
c0001870:	5f                   	pop    edi
c0001871:	5d                   	pop    ebp
c0001872:	e9 ea f8 ff ff       	jmp    c0001161 <dlmalloc>
c0001877:	bf 10 00 00 00       	mov    edi,0x10
c000187c:	83 fa 0f             	cmp    edx,0xf
c000187f:	76 13                	jbe    c0001894 <dlmemalign+0x41>
c0001881:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001884:	85 d1                	test   ecx,edx
c0001886:	75 04                	jne    c000188c <dlmemalign+0x39>
c0001888:	89 d7                	mov    edi,edx
c000188a:	eb 08                	jmp    c0001894 <dlmemalign+0x41>
c000188c:	39 d7                	cmp    edi,edx
c000188e:	73 04                	jae    c0001894 <dlmemalign+0x41>
c0001890:	01 ff                	add    edi,edi
c0001892:	eb f8                	jmp    c000188c <dlmemalign+0x39>
c0001894:	83 f8 df             	cmp    eax,0xffffffdf
c0001897:	76 07                	jbe    c00018a0 <dlmemalign+0x4d>
c0001899:	31 c0                	xor    eax,eax
c000189b:	e9 ce 00 00 00       	jmp    c000196e <dlmemalign+0x11b>
c00018a0:	83 c0 0b             	add    eax,0xb
c00018a3:	bd 10 00 00 00       	mov    ebp,0x10
c00018a8:	83 f8 0f             	cmp    eax,0xf
c00018ab:	76 05                	jbe    c00018b2 <dlmemalign+0x5f>
c00018ad:	83 e0 f8             	and    eax,0xfffffff8
c00018b0:	89 c5                	mov    ebp,eax
c00018b2:	83 ec 0c             	sub    esp,0xc
c00018b5:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00018b9:	50                   	push   eax
c00018ba:	e8 a2 f8 ff ff       	call   c0001161 <dlmalloc>
c00018bf:	83 c4 10             	add    esp,0x10
c00018c2:	89 c1                	mov    ecx,eax
c00018c4:	85 c0                	test   eax,eax
c00018c6:	74 d1                	je     c0001899 <dlmemalign+0x46>
c00018c8:	31 d2                	xor    edx,edx
c00018ca:	8d 70 f8             	lea    esi,[eax-0x8]
c00018cd:	f7 f7                	div    edi
c00018cf:	85 d2                	test   edx,edx
c00018d1:	74 62                	je     c0001935 <dlmemalign+0xe2>
c00018d3:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00018d7:	89 f8                	mov    eax,edi
c00018d9:	f7 d8                	neg    eax
c00018db:	21 c3                	and    ebx,eax
c00018dd:	83 eb 08             	sub    ebx,0x8
c00018e0:	89 d8                	mov    eax,ebx
c00018e2:	29 f0                	sub    eax,esi
c00018e4:	83 f8 0f             	cmp    eax,0xf
c00018e7:	77 02                	ja     c00018eb <dlmemalign+0x98>
c00018e9:	01 fb                	add    ebx,edi
c00018eb:	89 d8                	mov    eax,ebx
c00018ed:	29 f0                	sub    eax,esi
c00018ef:	89 c6                	mov    esi,eax
c00018f1:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018f4:	89 c2                	mov    edx,eax
c00018f6:	83 e2 fc             	and    edx,0xfffffffc
c00018f9:	29 f2                	sub    edx,esi
c00018fb:	a8 02                	test   al,0x2
c00018fd:	74 10                	je     c000190f <dlmemalign+0xbc>
c00018ff:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001902:	83 ca 02             	or     edx,0x2
c0001905:	8d 43 08             	lea    eax,[ebx+0x8]
c0001908:	89 33                	mov    DWORD PTR [ebx],esi
c000190a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000190d:	eb 5f                	jmp    c000196e <dlmemalign+0x11b>
c000190f:	83 ec 0c             	sub    esp,0xc
c0001912:	89 d0                	mov    eax,edx
c0001914:	83 c8 01             	or     eax,0x1
c0001917:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000191a:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c000191f:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001922:	83 e0 01             	and    eax,0x1
c0001925:	09 f0                	or     eax,esi
c0001927:	89 de                	mov    esi,ebx
c0001929:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000192c:	51                   	push   ecx
c000192d:	e8 d4 f4 ff ff       	call   c0000e06 <dlfree>
c0001932:	83 c4 10             	add    esp,0x10
c0001935:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001938:	a8 02                	test   al,0x2
c000193a:	75 2f                	jne    c000196b <dlmemalign+0x118>
c000193c:	83 e0 fc             	and    eax,0xfffffffc
c000193f:	8d 55 10             	lea    edx,[ebp+0x10]
c0001942:	39 c2                	cmp    edx,eax
c0001944:	73 25                	jae    c000196b <dlmemalign+0x118>
c0001946:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001949:	83 ec 0c             	sub    esp,0xc
c000194c:	29 e8                	sub    eax,ebp
c000194e:	83 c2 08             	add    edx,0x8
c0001951:	83 c8 01             	or     eax,0x1
c0001954:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001957:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000195a:	83 e0 01             	and    eax,0x1
c000195d:	09 c5                	or     ebp,eax
c000195f:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001962:	52                   	push   edx
c0001963:	e8 9e f4 ff ff       	call   c0000e06 <dlfree>
c0001968:	83 c4 10             	add    esp,0x10
c000196b:	8d 46 08             	lea    eax,[esi+0x8]
c000196e:	83 c4 0c             	add    esp,0xc
c0001971:	5b                   	pop    ebx
c0001972:	5e                   	pop    esi
c0001973:	5f                   	pop    edi
c0001974:	5d                   	pop    ebp
c0001975:	c3                   	ret    

c0001976 <dlcalloc>:
c0001976:	53                   	push   ebx
c0001977:	83 ec 14             	sub    esp,0x14
c000197a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000197e:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001983:	50                   	push   eax
c0001984:	e8 d8 f7 ff ff       	call   c0001161 <dlmalloc>
c0001989:	83 c4 10             	add    esp,0x10
c000198c:	89 c3                	mov    ebx,eax
c000198e:	85 c0                	test   eax,eax
c0001990:	74 77                	je     c0001a09 <dlcalloc+0x93>
c0001992:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001995:	89 d0                	mov    eax,edx
c0001997:	83 e0 fc             	and    eax,0xfffffffc
c000199a:	80 e2 02             	and    dl,0x2
c000199d:	75 5a                	jne    c00019f9 <dlcalloc+0x83>
c000199f:	83 e8 04             	sub    eax,0x4
c00019a2:	83 f8 27             	cmp    eax,0x27
c00019a5:	76 03                	jbe    c00019aa <dlcalloc+0x34>
c00019a7:	51                   	push   ecx
c00019a8:	eb 53                	jmp    c00019fd <dlcalloc+0x87>
c00019aa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00019b0:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00019b7:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00019be:	83 f8 13             	cmp    eax,0x13
c00019c1:	76 46                	jbe    c0001a09 <dlcalloc+0x93>
c00019c3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00019ca:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00019d1:	83 f8 1b             	cmp    eax,0x1b
c00019d4:	76 33                	jbe    c0001a09 <dlcalloc+0x93>
c00019d6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00019dd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00019e4:	83 f8 23             	cmp    eax,0x23
c00019e7:	76 20                	jbe    c0001a09 <dlcalloc+0x93>
c00019e9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019f0:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019f7:	eb 10                	jmp    c0001a09 <dlcalloc+0x93>
c00019f9:	83 e8 08             	sub    eax,0x8
c00019fc:	52                   	push   edx
c00019fd:	50                   	push   eax
c00019fe:	6a 00                	push   0x0
c0001a00:	53                   	push   ebx
c0001a01:	e8 d2 ec ff ff       	call   c00006d8 <memset>
c0001a06:	83 c4 10             	add    esp,0x10
c0001a09:	89 d8                	mov    eax,ebx
c0001a0b:	83 c4 08             	add    esp,0x8
c0001a0e:	5b                   	pop    ebx
c0001a0f:	c3                   	ret    

c0001a10 <dlcfree>:
c0001a10:	e9 f1 f3 ff ff       	jmp    c0000e06 <dlfree>

c0001a15 <dlindependent_calloc>:
c0001a15:	83 ec 28             	sub    esp,0x28
c0001a18:	b9 03 00 00 00       	mov    ecx,0x3
c0001a1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a21:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001a25:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001a29:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001a2d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001a31:	e8 b9 fa ff ff       	call   c00014ef <iALLOc>
c0001a36:	83 c4 2c             	add    esp,0x2c
c0001a39:	c3                   	ret    

c0001a3a <dlindependent_comalloc>:
c0001a3a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001a3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a42:	31 c9                	xor    ecx,ecx
c0001a44:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001a48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a4c:	e9 9e fa ff ff       	jmp    c00014ef <iALLOc>

c0001a51 <dlvalloc>:
c0001a51:	83 ec 0c             	sub    esp,0xc
c0001a54:	83 3d a0 b5 03 c0 00 	cmp    DWORD PTR ds:0xc003b5a0,0x0
c0001a5b:	75 0a                	jne    c0001a67 <dlvalloc+0x16>
c0001a5d:	b8 a0 b5 03 c0       	mov    eax,0xc003b5a0
c0001a62:	e8 b8 f2 ff ff       	call   c0000d1f <malloc_consolidate>
c0001a67:	50                   	push   eax
c0001a68:	50                   	push   eax
c0001a69:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a6d:	ff 35 fc b8 03 c0    	push   DWORD PTR ds:0xc003b8fc
c0001a73:	e8 db fd ff ff       	call   c0001853 <dlmemalign>
c0001a78:	83 c4 1c             	add    esp,0x1c
c0001a7b:	c3                   	ret    

c0001a7c <dlpvalloc>:
c0001a7c:	83 ec 0c             	sub    esp,0xc
c0001a7f:	83 3d a0 b5 03 c0 00 	cmp    DWORD PTR ds:0xc003b5a0,0x0
c0001a86:	75 0a                	jne    c0001a92 <dlpvalloc+0x16>
c0001a88:	b8 a0 b5 03 c0       	mov    eax,0xc003b5a0
c0001a8d:	e8 8d f2 ff ff       	call   c0000d1f <malloc_consolidate>
c0001a92:	a1 fc b8 03 c0       	mov    eax,ds:0xc003b8fc
c0001a97:	89 c1                	mov    ecx,eax
c0001a99:	52                   	push   edx
c0001a9a:	f7 d9                	neg    ecx
c0001a9c:	52                   	push   edx
c0001a9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001aa1:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001aa5:	21 ca                	and    edx,ecx
c0001aa7:	52                   	push   edx
c0001aa8:	50                   	push   eax
c0001aa9:	e8 a5 fd ff ff       	call   c0001853 <dlmemalign>
c0001aae:	83 c4 1c             	add    esp,0x1c
c0001ab1:	c3                   	ret    

c0001ab2 <dlmalloc_trim>:
c0001ab2:	b8 a0 b5 03 c0       	mov    eax,0xc003b5a0
c0001ab7:	e8 63 f2 ff ff       	call   c0000d1f <malloc_consolidate>
c0001abc:	31 c0                	xor    eax,eax
c0001abe:	c3                   	ret    

c0001abf <dlmalloc_usable_size>:
c0001abf:	53                   	push   ebx
c0001ac0:	31 c0                	xor    eax,eax
c0001ac2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001ac6:	85 c9                	test   ecx,ecx
c0001ac8:	74 24                	je     c0001aee <dlmalloc_usable_size+0x2f>
c0001aca:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001acd:	f6 c2 02             	test   dl,0x2
c0001ad0:	74 08                	je     c0001ada <dlmalloc_usable_size+0x1b>
c0001ad2:	83 e2 fc             	and    edx,0xfffffffc
c0001ad5:	8d 42 f8             	lea    eax,[edx-0x8]
c0001ad8:	eb 14                	jmp    c0001aee <dlmalloc_usable_size+0x2f>
c0001ada:	89 d3                	mov    ebx,edx
c0001adc:	31 c0                	xor    eax,eax
c0001ade:	83 e3 fe             	and    ebx,0xfffffffe
c0001ae1:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001ae6:	74 06                	je     c0001aee <dlmalloc_usable_size+0x2f>
c0001ae8:	83 e2 fc             	and    edx,0xfffffffc
c0001aeb:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aee:	5b                   	pop    ebx
c0001aef:	c3                   	ret    

c0001af0 <dlmallinfo>:
c0001af0:	55                   	push   ebp
c0001af1:	57                   	push   edi
c0001af2:	56                   	push   esi
c0001af3:	53                   	push   ebx
c0001af4:	83 ec 08             	sub    esp,0x8
c0001af7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001afb:	83 3d cc b5 03 c0 00 	cmp    DWORD PTR ds:0xc003b5cc,0x0
c0001b02:	75 0a                	jne    c0001b0e <dlmallinfo+0x1e>
c0001b04:	b8 a0 b5 03 c0       	mov    eax,0xc003b5a0
c0001b09:	e8 11 f2 ff ff       	call   c0000d1f <malloc_consolidate>
c0001b0e:	a1 cc b5 03 c0       	mov    eax,ds:0xc003b5cc
c0001b13:	31 ed                	xor    ebp,ebp
c0001b15:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001b18:	31 c9                	xor    ecx,ecx
c0001b1a:	83 e0 fc             	and    eax,0xfffffffc
c0001b1d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001b21:	31 c0                	xor    eax,eax
c0001b23:	8b 14 85 a4 b5 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc4a5c]
c0001b2a:	85 d2                	test   edx,edx
c0001b2c:	74 0e                	je     c0001b3c <dlmallinfo+0x4c>
c0001b2e:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001b31:	45                   	inc    ebp
c0001b32:	83 e6 fc             	and    esi,0xfffffffc
c0001b35:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001b38:	01 f1                	add    ecx,esi
c0001b3a:	eb ee                	jmp    c0001b2a <dlmallinfo+0x3a>
c0001b3c:	40                   	inc    eax
c0001b3d:	83 f8 0a             	cmp    eax,0xa
c0001b40:	75 e1                	jne    c0001b23 <dlmallinfo+0x33>
c0001b42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b46:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b4d:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b50:	b8 d4 b5 03 c0       	mov    eax,0xc003b5d4
c0001b55:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b58:	39 f0                	cmp    eax,esi
c0001b5a:	74 10                	je     c0001b6c <dlmallinfo+0x7c>
c0001b5c:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b5f:	ff 04 24             	inc    DWORD PTR [esp]
c0001b62:	83 e7 fc             	and    edi,0xfffffffc
c0001b65:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b68:	01 fa                	add    edx,edi
c0001b6a:	eb ec                	jmp    c0001b58 <dlmallinfo+0x68>
c0001b6c:	83 c0 08             	add    eax,0x8
c0001b6f:	3d cc b8 03 c0       	cmp    eax,0xc003b8cc
c0001b74:	75 df                	jne    c0001b55 <dlmallinfo+0x65>
c0001b76:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b79:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b7c:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b7f:	a1 08 b9 03 c0       	mov    eax,ds:0xc003b908
c0001b84:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b87:	89 03                	mov    DWORD PTR [ebx],eax
c0001b89:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b8c:	8b 35 f0 b8 03 c0    	mov    esi,DWORD PTR ds:0xc003b8f0
c0001b92:	29 d0                	sub    eax,edx
c0001b94:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b97:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b9a:	8b 35 04 b9 03 c0    	mov    esi,DWORD PTR ds:0xc003b904
c0001ba0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001ba4:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001ba7:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001baa:	8b 35 14 b9 03 c0    	mov    esi,DWORD PTR ds:0xc003b914
c0001bb0:	89 d8                	mov    eax,ebx
c0001bb2:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001bb5:	83 c4 08             	add    esp,0x8
c0001bb8:	5b                   	pop    ebx
c0001bb9:	5e                   	pop    esi
c0001bba:	5f                   	pop    edi
c0001bbb:	5d                   	pop    ebp
c0001bbc:	c2 04 00             	ret    0x4

c0001bbf <dlmalloc_stats>:
c0001bbf:	83 ec 30             	sub    esp,0x30
c0001bc2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001bc6:	50                   	push   eax
c0001bc7:	e8 24 ff ff ff       	call   c0001af0 <dlmallinfo>
c0001bcc:	83 c4 30             	add    esp,0x30
c0001bcf:	c3                   	ret    

c0001bd0 <dlmallopt>:
c0001bd0:	56                   	push   esi
c0001bd1:	b8 a0 b5 03 c0       	mov    eax,0xc003b5a0
c0001bd6:	53                   	push   ebx
c0001bd7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001bdb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001bdf:	e8 3b f1 ff ff       	call   c0000d1f <malloc_consolidate>
c0001be4:	8d 46 04             	lea    eax,[esi+0x4]
c0001be7:	83 f8 05             	cmp    eax,0x5
c0001bea:	77 67                	ja     c0001c53 <dlmallopt+0x83>
c0001bec:	ff 24 85 84 f6 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe097c]
c0001bf3:	83 fb 50             	cmp    ebx,0x50
c0001bf6:	77 5b                	ja     c0001c53 <dlmallopt+0x83>
c0001bf8:	ba 08 00 00 00       	mov    edx,0x8
c0001bfd:	85 db                	test   ebx,ebx
c0001bff:	74 12                	je     c0001c13 <dlmallopt+0x43>
c0001c01:	83 c3 0b             	add    ebx,0xb
c0001c04:	ba 10 00 00 00       	mov    edx,0x10
c0001c09:	83 fb 0f             	cmp    ebx,0xf
c0001c0c:	76 05                	jbe    c0001c13 <dlmallopt+0x43>
c0001c0e:	89 da                	mov    edx,ebx
c0001c10:	83 e2 f8             	and    edx,0xfffffff8
c0001c13:	a1 a0 b5 03 c0       	mov    eax,ds:0xc003b5a0
c0001c18:	83 e0 03             	and    eax,0x3
c0001c1b:	09 d0                	or     eax,edx
c0001c1d:	a3 a0 b5 03 c0       	mov    ds:0xc003b5a0,eax
c0001c22:	eb 31                	jmp    c0001c55 <dlmallopt+0x85>
c0001c24:	89 1d e4 b8 03 c0    	mov    DWORD PTR ds:0xc003b8e4,ebx
c0001c2a:	eb 06                	jmp    c0001c32 <dlmallopt+0x62>
c0001c2c:	89 1d e8 b8 03 c0    	mov    DWORD PTR ds:0xc003b8e8,ebx
c0001c32:	be 01 00 00 00       	mov    esi,0x1
c0001c37:	eb 1c                	jmp    c0001c55 <dlmallopt+0x85>
c0001c39:	89 1d ec b8 03 c0    	mov    DWORD PTR ds:0xc003b8ec,ebx
c0001c3f:	eb f1                	jmp    c0001c32 <dlmallopt+0x62>
c0001c41:	31 f6                	xor    esi,esi
c0001c43:	85 db                	test   ebx,ebx
c0001c45:	75 0e                	jne    c0001c55 <dlmallopt+0x85>
c0001c47:	c7 05 f4 b8 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003b8f4,0x0
c0001c51:	eb df                	jmp    c0001c32 <dlmallopt+0x62>
c0001c53:	31 f6                	xor    esi,esi
c0001c55:	89 f0                	mov    eax,esi
c0001c57:	5b                   	pop    ebx
c0001c58:	5e                   	pop    esi
c0001c59:	c3                   	ret    

c0001c5a <disk_status>:
c0001c5a:	31 c0                	xor    eax,eax
c0001c5c:	c3                   	ret    

c0001c5d <disk_initialize>:
c0001c5d:	31 c0                	xor    eax,eax
c0001c5f:	c3                   	ret    

c0001c60 <disk_read>:
c0001c60:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c65:	0f b6 04 85 00 c8 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc3800]
c0001c6d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c71:	e9 0a 7a 01 00       	jmp    c0019680 <fatWrapperReadDisk>

c0001c76 <disk_write>:
c0001c76:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c7b:	0f b6 04 85 00 c8 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc3800]
c0001c83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c87:	e9 3b 7a 01 00       	jmp    c00196c7 <fatWrapperWriteDisk>

c0001c8c <disk_ioctl>:
c0001c8c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c91:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c95:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c9a:	0f b6 04 85 00 c8 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffc3800]
c0001ca2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ca6:	e9 63 7a 01 00       	jmp    c001970e <fatWrapperIoctl>

c0001cab <ld_word>:
c0001cab:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001caf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cb2:	c1 e2 08             	shl    edx,0x8
c0001cb5:	09 d0                	or     eax,edx
c0001cb7:	c3                   	ret    

c0001cb8 <ld_dword>:
c0001cb8:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001cbc:	89 d1                	mov    ecx,edx
c0001cbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cc2:	c1 e1 08             	shl    ecx,0x8
c0001cc5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cc8:	09 ca                	or     edx,ecx
c0001cca:	c1 e2 08             	shl    edx,0x8
c0001ccd:	09 d0                	or     eax,edx
c0001ccf:	c3                   	ret    

c0001cd0 <ld_qword>:
c0001cd0:	57                   	push   edi
c0001cd1:	56                   	push   esi
c0001cd2:	53                   	push   ebx
c0001cd3:	31 db                	xor    ebx,ebx
c0001cd5:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001cd8:	89 df                	mov    edi,ebx
c0001cda:	89 ce                	mov    esi,ecx
c0001cdc:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001ce0:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ce4:	c1 e6 08             	shl    esi,0x8
c0001ce7:	09 f2                	or     edx,esi
c0001ce9:	89 d6                	mov    esi,edx
c0001ceb:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001cef:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cf3:	c1 e6 08             	shl    esi,0x8
c0001cf6:	09 f2                	or     edx,esi
c0001cf8:	89 d6                	mov    esi,edx
c0001cfa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cfe:	0f a4 f7 08          	shld   edi,esi,0x8
c0001d02:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d05:	c1 e6 08             	shl    esi,0x8
c0001d08:	89 fb                	mov    ebx,edi
c0001d0a:	09 f2                	or     edx,esi
c0001d0c:	89 d1                	mov    ecx,edx
c0001d0e:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001d12:	c1 e1 08             	shl    ecx,0x8
c0001d15:	89 da                	mov    edx,ebx
c0001d17:	09 c8                	or     eax,ecx
c0001d19:	5b                   	pop    ebx
c0001d1a:	5e                   	pop    esi
c0001d1b:	5f                   	pop    edi
c0001d1c:	c3                   	ret    

c0001d1d <st_word>:
c0001d1d:	66 89 10             	mov    WORD PTR [eax],dx
c0001d20:	c3                   	ret    

c0001d21 <st_dword>:
c0001d21:	89 10                	mov    DWORD PTR [eax],edx
c0001d23:	c3                   	ret    

c0001d24 <st_qword>:
c0001d24:	89 10                	mov    DWORD PTR [eax],edx
c0001d26:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001d29:	c3                   	ret    

c0001d2a <mem_cpy>:
c0001d2a:	85 c9                	test   ecx,ecx
c0001d2c:	74 10                	je     c0001d3e <mem_cpy+0x14>
c0001d2e:	57                   	push   edi
c0001d2f:	01 c1                	add    ecx,eax
c0001d31:	56                   	push   esi
c0001d32:	89 c7                	mov    edi,eax
c0001d34:	89 d6                	mov    esi,edx
c0001d36:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d37:	39 f9                	cmp    ecx,edi
c0001d39:	75 fb                	jne    c0001d36 <mem_cpy+0xc>
c0001d3b:	5e                   	pop    esi
c0001d3c:	5f                   	pop    edi
c0001d3d:	c3                   	ret    
c0001d3e:	c3                   	ret    

c0001d3f <mem_set>:
c0001d3f:	01 c1                	add    ecx,eax
c0001d41:	40                   	inc    eax
c0001d42:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d45:	39 c8                	cmp    eax,ecx
c0001d47:	75 f8                	jne    c0001d41 <mem_set+0x2>
c0001d49:	c3                   	ret    

c0001d4a <mem_cmp>:
c0001d4a:	57                   	push   edi
c0001d4b:	56                   	push   esi
c0001d4c:	89 c6                	mov    esi,eax
c0001d4e:	53                   	push   ebx
c0001d4f:	46                   	inc    esi
c0001d50:	42                   	inc    edx
c0001d51:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d55:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d59:	29 fb                	sub    ebx,edi
c0001d5b:	89 cf                	mov    edi,ecx
c0001d5d:	29 f7                	sub    edi,esi
c0001d5f:	01 c7                	add    edi,eax
c0001d61:	74 04                	je     c0001d67 <mem_cmp+0x1d>
c0001d63:	85 db                	test   ebx,ebx
c0001d65:	74 e8                	je     c0001d4f <mem_cmp+0x5>
c0001d67:	89 d8                	mov    eax,ebx
c0001d69:	5b                   	pop    ebx
c0001d6a:	5e                   	pop    esi
c0001d6b:	5f                   	pop    edi
c0001d6c:	c3                   	ret    

c0001d6d <chk_chr>:
c0001d6d:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d70:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d73:	74 07                	je     c0001d7c <chk_chr+0xf>
c0001d75:	39 d1                	cmp    ecx,edx
c0001d77:	74 03                	je     c0001d7c <chk_chr+0xf>
c0001d79:	40                   	inc    eax
c0001d7a:	eb f1                	jmp    c0001d6d <chk_chr>
c0001d7c:	89 c8                	mov    eax,ecx
c0001d7e:	c3                   	ret    

c0001d7f <dbc_1st>:
c0001d7f:	31 c0                	xor    eax,eax
c0001d81:	c3                   	ret    

c0001d82 <dbc_2nd>:
c0001d82:	31 c0                	xor    eax,eax
c0001d84:	c3                   	ret    

c0001d85 <tchar2uni>:
c0001d85:	57                   	push   edi
c0001d86:	89 c7                	mov    edi,eax
c0001d88:	56                   	push   esi
c0001d89:	53                   	push   ebx
c0001d8a:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d8c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d8e:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d91:	84 c9                	test   cl,cl
c0001d93:	78 0a                	js     c0001d9f <tchar2uni+0x1a>
c0001d95:	0f b6 d1             	movzx  edx,cl
c0001d98:	89 f3                	mov    ebx,esi
c0001d9a:	e9 9f 00 00 00       	jmp    c0001e3e <tchar2uni+0xb9>
c0001d9f:	88 ca                	mov    dl,cl
c0001da1:	83 e2 e0             	and    edx,0xffffffe0
c0001da4:	80 fa c0             	cmp    dl,0xc0
c0001da7:	75 0c                	jne    c0001db5 <tchar2uni+0x30>
c0001da9:	89 ca                	mov    edx,ecx
c0001dab:	b9 01 00 00 00       	mov    ecx,0x1
c0001db0:	83 e2 1f             	and    edx,0x1f
c0001db3:	eb 2e                	jmp    c0001de3 <tchar2uni+0x5e>
c0001db5:	88 ca                	mov    dl,cl
c0001db7:	83 e2 f0             	and    edx,0xfffffff0
c0001dba:	80 fa e0             	cmp    dl,0xe0
c0001dbd:	75 0c                	jne    c0001dcb <tchar2uni+0x46>
c0001dbf:	89 ca                	mov    edx,ecx
c0001dc1:	b9 02 00 00 00       	mov    ecx,0x2
c0001dc6:	83 e2 0f             	and    edx,0xf
c0001dc9:	eb 18                	jmp    c0001de3 <tchar2uni+0x5e>
c0001dcb:	88 ca                	mov    dl,cl
c0001dcd:	83 e2 f8             	and    edx,0xfffffff8
c0001dd0:	88 d0                	mov    al,dl
c0001dd2:	83 ca ff             	or     edx,0xffffffff
c0001dd5:	3c f0                	cmp    al,0xf0
c0001dd7:	75 6c                	jne    c0001e45 <tchar2uni+0xc0>
c0001dd9:	89 ca                	mov    edx,ecx
c0001ddb:	b9 03 00 00 00       	mov    ecx,0x3
c0001de0:	83 e2 07             	and    edx,0x7
c0001de3:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001de7:	46                   	inc    esi
c0001de8:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001deb:	88 c8                	mov    al,cl
c0001ded:	83 e0 c0             	and    eax,0xffffffc0
c0001df0:	3c 80                	cmp    al,0x80
c0001df2:	75 4e                	jne    c0001e42 <tchar2uni+0xbd>
c0001df4:	c1 e2 06             	shl    edx,0x6
c0001df7:	83 e1 3f             	and    ecx,0x3f
c0001dfa:	09 ca                	or     edx,ecx
c0001dfc:	39 de                	cmp    esi,ebx
c0001dfe:	75 e7                	jne    c0001de7 <tchar2uni+0x62>
c0001e00:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e03:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e09:	77 37                	ja     c0001e42 <tchar2uni+0xbd>
c0001e0b:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e11:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e17:	76 29                	jbe    c0001e42 <tchar2uni+0xbd>
c0001e19:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e1f:	76 1d                	jbe    c0001e3e <tchar2uni+0xb9>
c0001e21:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e27:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e2d:	c1 e1 06             	shl    ecx,0x6
c0001e30:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e36:	09 ca                	or     edx,ecx
c0001e38:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e3e:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e40:	eb 03                	jmp    c0001e45 <tchar2uni+0xc0>
c0001e42:	83 ca ff             	or     edx,0xffffffff
c0001e45:	5b                   	pop    ebx
c0001e46:	89 d0                	mov    eax,edx
c0001e48:	5e                   	pop    esi
c0001e49:	5f                   	pop    edi
c0001e4a:	c3                   	ret    

c0001e4b <put_utf>:
c0001e4b:	53                   	push   ebx
c0001e4c:	83 f8 7f             	cmp    eax,0x7f
c0001e4f:	89 c3                	mov    ebx,eax
c0001e51:	b0 00                	mov    al,0x0
c0001e53:	77 11                	ja     c0001e66 <put_utf+0x1b>
c0001e55:	85 c9                	test   ecx,ecx
c0001e57:	0f 84 e5 00 00 00    	je     c0001f42 <put_utf+0xf7>
c0001e5d:	88 1a                	mov    BYTE PTR [edx],bl
c0001e5f:	b0 01                	mov    al,0x1
c0001e61:	e9 dc 00 00 00       	jmp    c0001f42 <put_utf+0xf7>
c0001e66:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e6c:	77 23                	ja     c0001e91 <put_utf+0x46>
c0001e6e:	83 f9 01             	cmp    ecx,0x1
c0001e71:	0f 86 cb 00 00 00    	jbe    c0001f42 <put_utf+0xf7>
c0001e77:	89 d8                	mov    eax,ebx
c0001e79:	83 e3 3f             	and    ebx,0x3f
c0001e7c:	c1 e8 06             	shr    eax,0x6
c0001e7f:	83 cb 80             	or     ebx,0xffffff80
c0001e82:	83 c8 c0             	or     eax,0xffffffc0
c0001e85:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e88:	88 02                	mov    BYTE PTR [edx],al
c0001e8a:	b0 02                	mov    al,0x2
c0001e8c:	e9 b1 00 00 00       	jmp    c0001f42 <put_utf+0xf7>
c0001e91:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e97:	77 40                	ja     c0001ed9 <put_utf+0x8e>
c0001e99:	83 f9 02             	cmp    ecx,0x2
c0001e9c:	0f 86 a0 00 00 00    	jbe    c0001f42 <put_utf+0xf7>
c0001ea2:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ea8:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001eae:	0f 86 8e 00 00 00    	jbe    c0001f42 <put_utf+0xf7>
c0001eb4:	89 d8                	mov    eax,ebx
c0001eb6:	c1 e8 0c             	shr    eax,0xc
c0001eb9:	83 c8 e0             	or     eax,0xffffffe0
c0001ebc:	88 02                	mov    BYTE PTR [edx],al
c0001ebe:	89 d8                	mov    eax,ebx
c0001ec0:	83 e3 3f             	and    ebx,0x3f
c0001ec3:	c1 e8 06             	shr    eax,0x6
c0001ec6:	83 cb 80             	or     ebx,0xffffff80
c0001ec9:	83 e0 3f             	and    eax,0x3f
c0001ecc:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ecf:	83 c8 80             	or     eax,0xffffff80
c0001ed2:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ed5:	b0 03                	mov    al,0x3
c0001ed7:	eb 69                	jmp    c0001f42 <put_utf+0xf7>
c0001ed9:	83 f9 03             	cmp    ecx,0x3
c0001edc:	76 64                	jbe    c0001f42 <put_utf+0xf7>
c0001ede:	89 d9                	mov    ecx,ebx
c0001ee0:	0f b7 c3             	movzx  eax,bx
c0001ee3:	66 31 c9             	xor    cx,cx
c0001ee6:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001eec:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ef2:	c1 e9 06             	shr    ecx,0x6
c0001ef5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001efb:	77 43                	ja     c0001f40 <put_utf+0xf5>
c0001efd:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f03:	77 3b                	ja     c0001f40 <put_utf+0xf5>
c0001f05:	09 cb                	or     ebx,ecx
c0001f07:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f0d:	89 d8                	mov    eax,ebx
c0001f0f:	c1 e8 12             	shr    eax,0x12
c0001f12:	83 c8 f0             	or     eax,0xfffffff0
c0001f15:	88 02                	mov    BYTE PTR [edx],al
c0001f17:	89 d8                	mov    eax,ebx
c0001f19:	c1 e8 0c             	shr    eax,0xc
c0001f1c:	83 e0 3f             	and    eax,0x3f
c0001f1f:	83 c8 80             	or     eax,0xffffff80
c0001f22:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f25:	89 d8                	mov    eax,ebx
c0001f27:	83 e3 3f             	and    ebx,0x3f
c0001f2a:	c1 e8 06             	shr    eax,0x6
c0001f2d:	83 cb 80             	or     ebx,0xffffff80
c0001f30:	83 e0 3f             	and    eax,0x3f
c0001f33:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f36:	83 c8 80             	or     eax,0xffffff80
c0001f39:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f3c:	b0 04                	mov    al,0x4
c0001f3e:	eb 02                	jmp    c0001f42 <put_utf+0xf7>
c0001f40:	31 c0                	xor    eax,eax
c0001f42:	5b                   	pop    ebx
c0001f43:	c3                   	ret    

c0001f44 <clst2sect>:
c0001f44:	89 c1                	mov    ecx,eax
c0001f46:	83 ea 02             	sub    edx,0x2
c0001f49:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f4c:	83 e8 02             	sub    eax,0x2
c0001f4f:	39 d0                	cmp    eax,edx
c0001f51:	76 0d                	jbe    c0001f60 <clst2sect+0x1c>
c0001f53:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f57:	f7 e2                	mul    edx
c0001f59:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f5c:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f5f:	c3                   	ret    
c0001f60:	31 c0                	xor    eax,eax
c0001f62:	31 d2                	xor    edx,edx
c0001f64:	c3                   	ret    

c0001f65 <clmt_clust>:
c0001f65:	57                   	push   edi
c0001f66:	89 cf                	mov    edi,ecx
c0001f68:	56                   	push   esi
c0001f69:	89 d6                	mov    esi,edx
c0001f6b:	53                   	push   ebx
c0001f6c:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f70:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f73:	89 f2                	mov    edx,esi
c0001f75:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f77:	c1 ef 09             	shr    edi,0x9
c0001f7a:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f7e:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f81:	89 f9                	mov    ecx,edi
c0001f83:	31 ff                	xor    edi,edi
c0001f85:	57                   	push   edi
c0001f86:	56                   	push   esi
c0001f87:	51                   	push   ecx
c0001f88:	52                   	push   edx
c0001f89:	e8 8e c7 01 00       	call   c001e71c <__udivdi3>
c0001f8e:	83 c4 10             	add    esp,0x10
c0001f91:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f93:	85 d2                	test   edx,edx
c0001f95:	74 10                	je     c0001fa7 <clmt_clust+0x42>
c0001f97:	39 d0                	cmp    eax,edx
c0001f99:	72 07                	jb     c0001fa2 <clmt_clust+0x3d>
c0001f9b:	29 d0                	sub    eax,edx
c0001f9d:	83 c3 08             	add    ebx,0x8
c0001fa0:	eb ef                	jmp    c0001f91 <clmt_clust+0x2c>
c0001fa2:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001fa5:	89 c2                	mov    edx,eax
c0001fa7:	5b                   	pop    ebx
c0001fa8:	89 d0                	mov    eax,edx
c0001faa:	5e                   	pop    esi
c0001fab:	5f                   	pop    edi
c0001fac:	c3                   	ret    

c0001fad <pick_lfn>:
c0001fad:	55                   	push   ebp
c0001fae:	57                   	push   edi
c0001faf:	56                   	push   esi
c0001fb0:	89 d6                	mov    esi,edx
c0001fb2:	53                   	push   ebx
c0001fb3:	89 c3                	mov    ebx,eax
c0001fb5:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fb8:	e8 ee fc ff ff       	call   c0001cab <ld_word>
c0001fbd:	66 85 c0             	test   ax,ax
c0001fc0:	74 04                	je     c0001fc6 <pick_lfn+0x19>
c0001fc2:	31 c0                	xor    eax,eax
c0001fc4:	eb 5c                	jmp    c0002022 <pick_lfn+0x75>
c0001fc6:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001fc9:	bd 01 00 00 00       	mov    ebp,0x1
c0001fce:	83 e1 bf             	and    ecx,0xffffffbf
c0001fd1:	31 ff                	xor    edi,edi
c0001fd3:	49                   	dec    ecx
c0001fd4:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fd7:	0f b6 87 a0 f7 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe0860]
c0001fde:	01 f0                	add    eax,esi
c0001fe0:	e8 c6 fc ff ff       	call   c0001cab <ld_word>
c0001fe5:	66 85 ed             	test   bp,bp
c0001fe8:	74 11                	je     c0001ffb <pick_lfn+0x4e>
c0001fea:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001ff0:	77 d0                	ja     c0001fc2 <pick_lfn+0x15>
c0001ff2:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001ff6:	89 c5                	mov    ebp,eax
c0001ff8:	41                   	inc    ecx
c0001ff9:	eb 04                	jmp    c0001fff <pick_lfn+0x52>
c0001ffb:	66 40                	inc    ax
c0001ffd:	75 c3                	jne    c0001fc2 <pick_lfn+0x15>
c0001fff:	47                   	inc    edi
c0002000:	83 ff 0d             	cmp    edi,0xd
c0002003:	75 d2                	jne    c0001fd7 <pick_lfn+0x2a>
c0002005:	f6 06 40             	test   BYTE PTR [esi],0x40
c0002008:	74 13                	je     c000201d <pick_lfn+0x70>
c000200a:	66 85 ed             	test   bp,bp
c000200d:	74 0e                	je     c000201d <pick_lfn+0x70>
c000200f:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002015:	77 ab                	ja     c0001fc2 <pick_lfn+0x15>
c0002017:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c000201d:	b8 01 00 00 00       	mov    eax,0x1
c0002022:	5b                   	pop    ebx
c0002023:	5e                   	pop    esi
c0002024:	5f                   	pop    edi
c0002025:	5d                   	pop    ebp
c0002026:	c3                   	ret    

c0002027 <put_lfn>:
c0002027:	55                   	push   ebp
c0002028:	31 ed                	xor    ebp,ebp
c000202a:	57                   	push   edi
c000202b:	89 d7                	mov    edi,edx
c000202d:	56                   	push   esi
c000202e:	31 f6                	xor    esi,esi
c0002030:	53                   	push   ebx
c0002031:	83 ec 08             	sub    esp,0x8
c0002034:	89 04 24             	mov    DWORD PTR [esp],eax
c0002037:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c000203b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000203f:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0002045:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0002048:	8d 42 1a             	lea    eax,[edx+0x1a]
c000204b:	31 d2                	xor    edx,edx
c000204d:	e8 cb fc ff ff       	call   c0001d1d <st_word>
c0002052:	0f b6 d9             	movzx  ebx,cl
c0002055:	4b                   	dec    ebx
c0002056:	6b db 0d             	imul   ebx,ebx,0xd
c0002059:	66 83 fe ff          	cmp    si,0xffff
c000205d:	74 08                	je     c0002067 <put_lfn+0x40>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0002066:	43                   	inc    ebx
c0002067:	0f b6 85 a0 f7 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0860]
c000206e:	0f b7 d6             	movzx  edx,si
c0002071:	01 f8                	add    eax,edi
c0002073:	e8 a5 fc ff ff       	call   c0001d1d <st_word>
c0002078:	66 85 f6             	test   si,si
c000207b:	75 03                	jne    c0002080 <put_lfn+0x59>
c000207d:	83 ce ff             	or     esi,0xffffffff
c0002080:	45                   	inc    ebp
c0002081:	83 fd 0d             	cmp    ebp,0xd
c0002084:	75 d3                	jne    c0002059 <put_lfn+0x32>
c0002086:	66 46                	inc    si
c0002088:	74 0a                	je     c0002094 <put_lfn+0x6d>
c000208a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000208d:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002092:	75 09                	jne    c000209d <put_lfn+0x76>
c0002094:	88 c8                	mov    al,cl
c0002096:	83 c8 40             	or     eax,0x40
c0002099:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000209d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00020a1:	88 07                	mov    BYTE PTR [edi],al
c00020a3:	83 c4 08             	add    esp,0x8
c00020a6:	5b                   	pop    ebx
c00020a7:	5e                   	pop    esi
c00020a8:	5f                   	pop    edi
c00020a9:	5d                   	pop    ebp
c00020aa:	c3                   	ret    

c00020ab <gen_numname>:
c00020ab:	57                   	push   edi
c00020ac:	89 cf                	mov    edi,ecx
c00020ae:	56                   	push   esi
c00020af:	b9 0b 00 00 00       	mov    ecx,0xb
c00020b4:	53                   	push   ebx
c00020b5:	89 c6                	mov    esi,eax
c00020b7:	83 ec 10             	sub    esp,0x10
c00020ba:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00020be:	e8 67 fc ff ff       	call   c0001d2a <mem_cpy>
c00020c3:	83 fb 05             	cmp    ebx,0x5
c00020c6:	76 2d                	jbe    c00020f5 <gen_numname+0x4a>
c00020c8:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020cb:	66 85 c0             	test   ax,ax
c00020ce:	74 25                	je     c00020f5 <gen_numname+0x4a>
c00020d0:	83 c7 02             	add    edi,0x2
c00020d3:	ba 10 00 00 00       	mov    edx,0x10
c00020d8:	01 db                	add    ebx,ebx
c00020da:	89 c1                	mov    ecx,eax
c00020dc:	66 d1 e8             	shr    ax,1
c00020df:	83 e1 01             	and    ecx,0x1
c00020e2:	01 cb                	add    ebx,ecx
c00020e4:	0f ba e3 10          	bt     ebx,0x10
c00020e8:	73 06                	jae    c00020f0 <gen_numname+0x45>
c00020ea:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020f0:	4a                   	dec    edx
c00020f1:	75 e5                	jne    c00020d8 <gen_numname+0x2d>
c00020f3:	eb d3                	jmp    c00020c8 <gen_numname+0x1d>
c00020f5:	b8 07 00 00 00       	mov    eax,0x7
c00020fa:	88 d9                	mov    cl,bl
c00020fc:	83 e1 0f             	and    ecx,0xf
c00020ff:	8d 51 30             	lea    edx,[ecx+0x30]
c0002102:	80 fa 39             	cmp    dl,0x39
c0002105:	76 03                	jbe    c000210a <gen_numname+0x5f>
c0002107:	8d 51 37             	lea    edx,[ecx+0x37]
c000210a:	8d 48 ff             	lea    ecx,[eax-0x1]
c000210d:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002111:	89 da                	mov    edx,ebx
c0002113:	c1 ea 04             	shr    edx,0x4
c0002116:	83 fb 0f             	cmp    ebx,0xf
c0002119:	76 06                	jbe    c0002121 <gen_numname+0x76>
c000211b:	89 c8                	mov    eax,ecx
c000211d:	89 d3                	mov    ebx,edx
c000211f:	eb d9                	jmp    c00020fa <gen_numname+0x4f>
c0002121:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0002126:	31 d2                	xor    edx,edx
c0002128:	8d 58 fe             	lea    ebx,[eax-0x2]
c000212b:	8d 04 16             	lea    eax,[esi+edx*1]
c000212e:	39 ca                	cmp    edx,ecx
c0002130:	73 18                	jae    c000214a <gen_numname+0x9f>
c0002132:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002135:	3c 20                	cmp    al,0x20
c0002137:	74 11                	je     c000214a <gen_numname+0x9f>
c0002139:	e8 41 fc ff ff       	call   c0001d7f <dbc_1st>
c000213e:	85 c0                	test   eax,eax
c0002140:	74 05                	je     c0002147 <gen_numname+0x9c>
c0002142:	39 d3                	cmp    ebx,edx
c0002144:	74 04                	je     c000214a <gen_numname+0x9f>
c0002146:	42                   	inc    edx
c0002147:	42                   	inc    edx
c0002148:	eb e1                	jmp    c000212b <gen_numname+0x80>
c000214a:	b0 20                	mov    al,0x20
c000214c:	83 f9 07             	cmp    ecx,0x7
c000214f:	77 05                	ja     c0002156 <gen_numname+0xab>
c0002151:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002155:	41                   	inc    ecx
c0002156:	42                   	inc    edx
c0002157:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000215b:	83 fa 07             	cmp    edx,0x7
c000215e:	76 ea                	jbe    c000214a <gen_numname+0x9f>
c0002160:	83 c4 10             	add    esp,0x10
c0002163:	5b                   	pop    ebx
c0002164:	5e                   	pop    esi
c0002165:	5f                   	pop    edi
c0002166:	c3                   	ret    

c0002167 <sum_sfn>:
c0002167:	31 c9                	xor    ecx,ecx
c0002169:	31 d2                	xor    edx,edx
c000216b:	d0 ca                	ror    dl,1
c000216d:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002170:	41                   	inc    ecx
c0002171:	83 f9 0b             	cmp    ecx,0xb
c0002174:	75 f5                	jne    c000216b <sum_sfn+0x4>
c0002176:	88 d0                	mov    al,dl
c0002178:	c3                   	ret    

c0002179 <xdir_sum>:
c0002179:	56                   	push   esi
c000217a:	31 c9                	xor    ecx,ecx
c000217c:	53                   	push   ebx
c000217d:	31 d2                	xor    edx,edx
c000217f:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002183:	43                   	inc    ebx
c0002184:	c1 e3 05             	shl    ebx,0x5
c0002187:	83 fa 02             	cmp    edx,0x2
c000218a:	74 0b                	je     c0002197 <xdir_sum+0x1e>
c000218c:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002190:	66 d1 c9             	ror    cx,1
c0002193:	01 f1                	add    ecx,esi
c0002195:	eb 05                	jmp    c000219c <xdir_sum+0x23>
c0002197:	ba 03 00 00 00       	mov    edx,0x3
c000219c:	42                   	inc    edx
c000219d:	39 d3                	cmp    ebx,edx
c000219f:	77 e6                	ja     c0002187 <xdir_sum+0xe>
c00021a1:	89 c8                	mov    eax,ecx
c00021a3:	5b                   	pop    ebx
c00021a4:	5e                   	pop    esi
c00021a5:	c3                   	ret    

c00021a6 <xsum32>:
c00021a6:	d1 ca                	ror    edx,1
c00021a8:	0f b6 c0             	movzx  eax,al
c00021ab:	01 d0                	add    eax,edx
c00021ad:	c3                   	ret    

c00021ae <get_xfileinfo>:
c00021ae:	55                   	push   ebp
c00021af:	31 c9                	xor    ecx,ecx
c00021b1:	57                   	push   edi
c00021b2:	bd 40 00 00 00       	mov    ebp,0x40
c00021b7:	56                   	push   esi
c00021b8:	31 ff                	xor    edi,edi
c00021ba:	53                   	push   ebx
c00021bb:	89 c6                	mov    esi,eax
c00021bd:	83 ec 0c             	sub    esp,0xc
c00021c0:	89 d3                	mov    ebx,edx
c00021c2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00021c9:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c00021cd:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00021d0:	76 6d                	jbe    c000223f <get_xfileinfo+0x91>
c00021d2:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c00021d8:	76 0b                	jbe    c00021e5 <get_xfileinfo+0x37>
c00021da:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c00021de:	bf 01 00 00 00       	mov    edi,0x1
c00021e3:	eb 63                	jmp    c0002248 <get_xfileinfo+0x9a>
c00021e5:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021eb:	75 03                	jne    c00021f0 <get_xfileinfo+0x42>
c00021ed:	83 c5 02             	add    ebp,0x2
c00021f0:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021f3:	83 c5 02             	add    ebp,0x2
c00021f6:	e8 b0 fa ff ff       	call   c0001cab <ld_word>
c00021fb:	ff 04 24             	inc    DWORD PTR [esp]
c00021fe:	66 85 c9             	test   cx,cx
c0002201:	75 0d                	jne    c0002210 <get_xfileinfo+0x62>
c0002203:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0002209:	66 81 fa ff 07       	cmp    dx,0x7ff
c000220e:	76 2b                	jbe    c000223b <get_xfileinfo+0x8d>
c0002210:	c1 e1 10             	shl    ecx,0x10
c0002213:	ba ff 00 00 00       	mov    edx,0xff
c0002218:	0f b7 c0             	movzx  eax,ax
c000221b:	29 fa                	sub    edx,edi
c000221d:	09 c8                	or     eax,ecx
c000221f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0002223:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0002227:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000222b:	e8 1b fc ff ff       	call   c0001e4b <put_utf>
c0002230:	84 c0                	test   al,al
c0002232:	74 a6                	je     c00021da <get_xfileinfo+0x2c>
c0002234:	0f b6 c0             	movzx  eax,al
c0002237:	01 c7                	add    edi,eax
c0002239:	31 c0                	xor    eax,eax
c000223b:	89 c1                	mov    ecx,eax
c000223d:	eb 8a                	jmp    c00021c9 <get_xfileinfo+0x1b>
c000223f:	85 ff                	test   edi,edi
c0002241:	74 97                	je     c00021da <get_xfileinfo+0x2c>
c0002243:	66 85 c9             	test   cx,cx
c0002246:	75 92                	jne    c00021da <get_xfileinfo+0x2c>
c0002248:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000224d:	31 c0                	xor    eax,eax
c000224f:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002253:	31 d2                	xor    edx,edx
c0002255:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0002258:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c000225b:	80 e1 10             	and    cl,0x10
c000225e:	75 08                	jne    c0002268 <get_xfileinfo+0xba>
c0002260:	8d 46 38             	lea    eax,[esi+0x38]
c0002263:	e8 68 fa ff ff       	call   c0001cd0 <ld_qword>
c0002268:	89 03                	mov    DWORD PTR [ebx],eax
c000226a:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000226d:	8d 46 0c             	lea    eax,[esi+0xc]
c0002270:	e8 36 fa ff ff       	call   c0001cab <ld_word>
c0002275:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002279:	8d 46 0e             	lea    eax,[esi+0xe]
c000227c:	e8 2a fa ff ff       	call   c0001cab <ld_word>
c0002281:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002285:	83 c4 0c             	add    esp,0xc
c0002288:	5b                   	pop    ebx
c0002289:	5e                   	pop    esi
c000228a:	5f                   	pop    edi
c000228b:	5d                   	pop    ebp
c000228c:	c3                   	ret    

c000228d <get_ldnumber>:
c000228d:	8b 10                	mov    edx,DWORD PTR [eax]
c000228f:	85 d2                	test   edx,edx
c0002291:	74 14                	je     c00022a7 <get_ldnumber+0x1a>
c0002293:	56                   	push   esi
c0002294:	53                   	push   ebx
c0002295:	89 d3                	mov    ebx,edx
c0002297:	43                   	inc    ebx
c0002298:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000229b:	80 f9 1f             	cmp    cl,0x1f
c000229e:	76 0d                	jbe    c00022ad <get_ldnumber+0x20>
c00022a0:	80 f9 3a             	cmp    cl,0x3a
c00022a3:	75 f2                	jne    c0002297 <get_ldnumber+0xa>
c00022a5:	eb 0a                	jmp    c00022b1 <get_ldnumber+0x24>
c00022a7:	83 c9 ff             	or     ecx,0xffffffff
c00022aa:	89 c8                	mov    eax,ecx
c00022ac:	c3                   	ret    
c00022ad:	31 c9                	xor    ecx,ecx
c00022af:	eb 24                	jmp    c00022d5 <get_ldnumber+0x48>
c00022b1:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c00022b4:	8d 4e d0             	lea    ecx,[esi-0x30]
c00022b7:	80 f9 09             	cmp    cl,0x9
c00022ba:	77 16                	ja     c00022d2 <get_ldnumber+0x45>
c00022bc:	83 c2 02             	add    edx,0x2
c00022bf:	83 c9 ff             	or     ecx,0xffffffff
c00022c2:	39 d3                	cmp    ebx,edx
c00022c4:	75 0f                	jne    c00022d5 <get_ldnumber+0x48>
c00022c6:	89 f2                	mov    edx,esi
c00022c8:	89 18                	mov    DWORD PTR [eax],ebx
c00022ca:	0f be ca             	movsx  ecx,dl
c00022cd:	83 e9 30             	sub    ecx,0x30
c00022d0:	eb 03                	jmp    c00022d5 <get_ldnumber+0x48>
c00022d2:	83 c9 ff             	or     ecx,0xffffffff
c00022d5:	89 c8                	mov    eax,ecx
c00022d7:	5b                   	pop    ebx
c00022d8:	5e                   	pop    esi
c00022d9:	c3                   	ret    

c00022da <crc32>:
c00022da:	56                   	push   esi
c00022db:	89 d6                	mov    esi,edx
c00022dd:	53                   	push   ebx
c00022de:	b2 01                	mov    dl,0x1
c00022e0:	bb 08 00 00 00       	mov    ebx,0x8
c00022e5:	89 f1                	mov    ecx,esi
c00022e7:	84 d1                	test   cl,dl
c00022e9:	0f 95 c1             	setne  cl
c00022ec:	0f b6 c9             	movzx  ecx,cl
c00022ef:	31 c1                	xor    ecx,eax
c00022f1:	89 c8                	mov    eax,ecx
c00022f3:	d1 e8                	shr    eax,1
c00022f5:	80 e1 01             	and    cl,0x1
c00022f8:	74 05                	je     c00022ff <crc32+0x25>
c00022fa:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022ff:	d1 e2                	shl    edx,1
c0002301:	4b                   	dec    ebx
c0002302:	75 e1                	jne    c00022e5 <crc32+0xb>
c0002304:	5b                   	pop    ebx
c0002305:	5e                   	pop    esi
c0002306:	c3                   	ret    

c0002307 <test_gpt_header>:
c0002307:	55                   	push   ebp
c0002308:	b9 10 00 00 00       	mov    ecx,0x10
c000230d:	57                   	push   edi
c000230e:	ba a0 f6 01 c0       	mov    edx,0xc001f6a0
c0002313:	56                   	push   esi
c0002314:	31 ff                	xor    edi,edi
c0002316:	53                   	push   ebx
c0002317:	89 c3                	mov    ebx,eax
c0002319:	e8 2c fa ff ff       	call   c0001d4a <mem_cmp>
c000231e:	85 c0                	test   eax,eax
c0002320:	75 55                	jne    c0002377 <test_gpt_header+0x70>
c0002322:	89 c7                	mov    edi,eax
c0002324:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c0002329:	83 ce ff             	or     esi,0xffffffff
c000232c:	31 d2                	xor    edx,edx
c000232e:	83 fd 03             	cmp    ebp,0x3
c0002331:	76 05                	jbe    c0002338 <test_gpt_header+0x31>
c0002333:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c0002338:	89 f0                	mov    eax,esi
c000233a:	45                   	inc    ebp
c000233b:	e8 9a ff ff ff       	call   c00022da <crc32>
c0002340:	83 fd 4c             	cmp    ebp,0x4c
c0002343:	89 c6                	mov    esi,eax
c0002345:	75 e5                	jne    c000232c <test_gpt_header+0x25>
c0002347:	8d 43 10             	lea    eax,[ebx+0x10]
c000234a:	f7 d6                	not    esi
c000234c:	e8 67 f9 ff ff       	call   c0001cb8 <ld_dword>
c0002351:	39 c6                	cmp    esi,eax
c0002353:	75 22                	jne    c0002377 <test_gpt_header+0x70>
c0002355:	8d 43 54             	lea    eax,[ebx+0x54]
c0002358:	e8 5b f9 ff ff       	call   c0001cb8 <ld_dword>
c000235d:	83 c0 80             	add    eax,0xffffff80
c0002360:	75 15                	jne    c0002377 <test_gpt_header+0x70>
c0002362:	8d 43 50             	lea    eax,[ebx+0x50]
c0002365:	e8 4e f9 ff ff       	call   c0001cb8 <ld_dword>
c000236a:	3d 80 00 00 00       	cmp    eax,0x80
c000236f:	0f 96 c0             	setbe  al
c0002372:	0f b6 c0             	movzx  eax,al
c0002375:	89 c7                	mov    edi,eax
c0002377:	5b                   	pop    ebx
c0002378:	89 f8                	mov    eax,edi
c000237a:	5e                   	pop    esi
c000237b:	5f                   	pop    edi
c000237c:	5d                   	pop    ebp
c000237d:	c3                   	ret    

c000237e <make_rand>:
c000237e:	56                   	push   esi
c000237f:	85 c0                	test   eax,eax
c0002381:	53                   	push   ebx
c0002382:	75 05                	jne    c0002389 <make_rand+0xb>
c0002384:	b8 01 00 00 00       	mov    eax,0x1
c0002389:	01 d1                	add    ecx,edx
c000238b:	bb 08 00 00 00       	mov    ebx,0x8
c0002390:	89 c6                	mov    esi,eax
c0002392:	d1 e8                	shr    eax,1
c0002394:	83 e6 01             	and    esi,0x1
c0002397:	85 f6                	test   esi,esi
c0002399:	74 05                	je     c00023a0 <make_rand+0x22>
c000239b:	35 00 00 00 a3       	xor    eax,0xa3000000
c00023a0:	4b                   	dec    ebx
c00023a1:	75 ed                	jne    c0002390 <make_rand+0x12>
c00023a3:	42                   	inc    edx
c00023a4:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c00023a7:	39 ca                	cmp    edx,ecx
c00023a9:	75 e0                	jne    c000238b <make_rand+0xd>
c00023ab:	5b                   	pop    ebx
c00023ac:	5e                   	pop    esi
c00023ad:	c3                   	ret    

c00023ae <validate>:
c00023ae:	56                   	push   esi
c00023af:	53                   	push   ebx
c00023b0:	89 d6                	mov    esi,edx
c00023b2:	51                   	push   ecx
c00023b3:	85 c0                	test   eax,eax
c00023b5:	75 09                	jne    c00023c0 <validate+0x12>
c00023b7:	b8 09 00 00 00       	mov    eax,0x9
c00023bc:	31 c9                	xor    ecx,ecx
c00023be:	eb 2f                	jmp    c00023ef <validate+0x41>
c00023c0:	89 c3                	mov    ebx,eax
c00023c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00023c4:	85 c0                	test   eax,eax
c00023c6:	74 ef                	je     c00023b7 <validate+0x9>
c00023c8:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00023cb:	74 ea                	je     c00023b7 <validate+0x9>
c00023cd:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00023d1:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00023d5:	75 e0                	jne    c00023b7 <validate+0x9>
c00023d7:	83 ec 0c             	sub    esp,0xc
c00023da:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023de:	50                   	push   eax
c00023df:	e8 76 f8 ff ff       	call   c0001c5a <disk_status>
c00023e4:	83 c4 10             	add    esp,0x10
c00023e7:	a8 01                	test   al,0x1
c00023e9:	75 cc                	jne    c00023b7 <validate+0x9>
c00023eb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023ed:	31 c0                	xor    eax,eax
c00023ef:	89 0e                	mov    DWORD PTR [esi],ecx
c00023f1:	5a                   	pop    edx
c00023f2:	5b                   	pop    ebx
c00023f3:	5e                   	pop    esi
c00023f4:	c3                   	ret    

c00023f5 <sync_window>:
c00023f5:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023f9:	0f 84 85 00 00 00    	je     c0002484 <sync_window+0x8f>
c00023ff:	55                   	push   ebp
c0002400:	8d 68 54             	lea    ebp,[eax+0x54]
c0002403:	57                   	push   edi
c0002404:	56                   	push   esi
c0002405:	53                   	push   ebx
c0002406:	89 c3                	mov    ebx,eax
c0002408:	83 ec 28             	sub    esp,0x28
c000240b:	6a 01                	push   0x1
c000240d:	ff 70 50             	push   DWORD PTR [eax+0x50]
c0002410:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c0002413:	55                   	push   ebp
c0002414:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002418:	50                   	push   eax
c0002419:	e8 58 f8 ff ff       	call   c0001c76 <disk_write>
c000241e:	83 c4 20             	add    esp,0x20
c0002421:	ba 01 00 00 00       	mov    edx,0x1
c0002426:	85 c0                	test   eax,eax
c0002428:	75 50                	jne    c000247a <sync_window+0x85>
c000242a:	31 ff                	xor    edi,edi
c000242c:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c000242f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002433:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0002437:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000243a:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c000243d:	89 c6                	mov    esi,eax
c000243f:	89 d7                	mov    edi,edx
c0002441:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002444:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002448:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000244b:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c000244f:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002453:	73 23                	jae    c0002478 <sync_window+0x83>
c0002455:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002459:	75 1d                	jne    c0002478 <sync_window+0x83>
c000245b:	83 ec 0c             	sub    esp,0xc
c000245e:	6a 01                	push   0x1
c0002460:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002464:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002468:	52                   	push   edx
c0002469:	50                   	push   eax
c000246a:	55                   	push   ebp
c000246b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000246f:	50                   	push   eax
c0002470:	e8 01 f8 ff ff       	call   c0001c76 <disk_write>
c0002475:	83 c4 20             	add    esp,0x20
c0002478:	31 d2                	xor    edx,edx
c000247a:	83 c4 1c             	add    esp,0x1c
c000247d:	89 d0                	mov    eax,edx
c000247f:	5b                   	pop    ebx
c0002480:	5e                   	pop    esi
c0002481:	5f                   	pop    edi
c0002482:	5d                   	pop    ebp
c0002483:	c3                   	ret    
c0002484:	31 d2                	xor    edx,edx
c0002486:	89 d0                	mov    eax,edx
c0002488:	c3                   	ret    

c0002489 <move_window>:
c0002489:	56                   	push   esi
c000248a:	53                   	push   ebx
c000248b:	89 c3                	mov    ebx,eax
c000248d:	83 ec 14             	sub    esp,0x14
c0002490:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002493:	75 07                	jne    c000249c <move_window+0x13>
c0002495:	31 f6                	xor    esi,esi
c0002497:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000249a:	74 59                	je     c00024f5 <move_window+0x6c>
c000249c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024a0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00024a4:	89 d8                	mov    eax,ebx
c00024a6:	e8 4a ff ff ff       	call   c00023f5 <sync_window>
c00024ab:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024af:	89 c6                	mov    esi,eax
c00024b1:	85 c0                	test   eax,eax
c00024b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024b7:	75 3c                	jne    c00024f5 <move_window+0x6c>
c00024b9:	83 ec 0c             	sub    esp,0xc
c00024bc:	8d 43 54             	lea    eax,[ebx+0x54]
c00024bf:	6a 01                	push   0x1
c00024c1:	51                   	push   ecx
c00024c2:	52                   	push   edx
c00024c3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00024c7:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00024cb:	50                   	push   eax
c00024cc:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00024d0:	50                   	push   eax
c00024d1:	e8 8a f7 ff ff       	call   c0001c60 <disk_read>
c00024d6:	83 c4 20             	add    esp,0x20
c00024d9:	85 c0                	test   eax,eax
c00024db:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00024df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00024e3:	74 0a                	je     c00024ef <move_window+0x66>
c00024e5:	83 ca ff             	or     edx,0xffffffff
c00024e8:	be 01 00 00 00       	mov    esi,0x1
c00024ed:	89 d1                	mov    ecx,edx
c00024ef:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024f2:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024f5:	89 f0                	mov    eax,esi
c00024f7:	83 c4 14             	add    esp,0x14
c00024fa:	5b                   	pop    ebx
c00024fb:	5e                   	pop    esi
c00024fc:	c3                   	ret    

c00024fd <check_fs>:
c00024fd:	53                   	push   ebx
c00024fe:	89 c3                	mov    ebx,eax
c0002500:	83 ec 08             	sub    esp,0x8
c0002503:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002507:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c000250e:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c0002515:	e8 6f ff ff ff       	call   c0002489 <move_window>
c000251a:	ba 04 00 00 00       	mov    edx,0x4
c000251f:	85 c0                	test   eax,eax
c0002521:	0f 85 89 00 00 00    	jne    c00025b0 <check_fs+0xb3>
c0002527:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000252d:	e8 79 f7 ff ff       	call   c0001cab <ld_word>
c0002532:	ba 03 00 00 00       	mov    edx,0x3
c0002537:	66 3d 55 aa          	cmp    ax,0xaa55
c000253b:	75 73                	jne    c00025b0 <check_fs+0xb3>
c000253d:	ba c0 f7 01 c0       	mov    edx,0xc001f7c0
c0002542:	8d 43 54             	lea    eax,[ebx+0x54]
c0002545:	b9 0b 00 00 00       	mov    ecx,0xb
c000254a:	e8 fb f7 ff ff       	call   c0001d4a <mem_cmp>
c000254f:	ba 01 00 00 00       	mov    edx,0x1
c0002554:	85 c0                	test   eax,eax
c0002556:	74 58                	je     c00025b0 <check_fs+0xb3>
c0002558:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000255b:	8d 50 18             	lea    edx,[eax+0x18]
c000255e:	80 fa 01             	cmp    dl,0x1
c0002561:	76 09                	jbe    c000256c <check_fs+0x6f>
c0002563:	ba 02 00 00 00       	mov    edx,0x2
c0002568:	3c eb                	cmp    al,0xeb
c000256a:	75 44                	jne    c00025b0 <check_fs+0xb3>
c000256c:	ba 50 a4 03 c0       	mov    edx,0xc003a450
c0002571:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002577:	b9 03 00 00 00       	mov    ecx,0x3
c000257c:	e8 c9 f7 ff ff       	call   c0001d4a <mem_cmp>
c0002581:	31 d2                	xor    edx,edx
c0002583:	85 c0                	test   eax,eax
c0002585:	74 29                	je     c00025b0 <check_fs+0xb3>
c0002587:	ba cc f7 01 c0       	mov    edx,0xc001f7cc
c000258c:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002592:	b9 05 00 00 00       	mov    ecx,0x5
c0002597:	e8 ae f7 ff ff       	call   c0001d4a <mem_cmp>
c000259c:	31 d2                	xor    edx,edx
c000259e:	85 c0                	test   eax,eax
c00025a0:	74 0e                	je     c00025b0 <check_fs+0xb3>
c00025a2:	31 d2                	xor    edx,edx
c00025a4:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c00025ab:	0f 95 c2             	setne  dl
c00025ae:	01 d2                	add    edx,edx
c00025b0:	89 d0                	mov    eax,edx
c00025b2:	83 c4 08             	add    esp,0x8
c00025b5:	5b                   	pop    ebx
c00025b6:	c3                   	ret    

c00025b7 <find_volume>:
c00025b7:	55                   	push   ebp
c00025b8:	31 c9                	xor    ecx,ecx
c00025ba:	57                   	push   edi
c00025bb:	56                   	push   esi
c00025bc:	89 d6                	mov    esi,edx
c00025be:	53                   	push   ebx
c00025bf:	31 d2                	xor    edx,edx
c00025c1:	83 ec 3c             	sub    esp,0x3c
c00025c4:	89 c3                	mov    ebx,eax
c00025c6:	e8 32 ff ff ff       	call   c00024fd <check_fs>
c00025cb:	83 f8 02             	cmp    eax,0x2
c00025ce:	74 0e                	je     c00025de <find_volume+0x27>
c00025d0:	0f 87 5d 01 00 00    	ja     c0002733 <find_volume+0x17c>
c00025d6:	85 f6                	test   esi,esi
c00025d8:	0f 84 55 01 00 00    	je     c0002733 <find_volume+0x17c>
c00025de:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00025e5:	0f 85 dd 00 00 00    	jne    c00026c8 <find_volume+0x111>
c00025eb:	31 c9                	xor    ecx,ecx
c00025ed:	ba 01 00 00 00       	mov    edx,0x1
c00025f2:	89 d8                	mov    eax,ebx
c00025f4:	e8 90 fe ff ff       	call   c0002489 <move_window>
c00025f9:	85 c0                	test   eax,eax
c00025fb:	74 0a                	je     c0002607 <find_volume+0x50>
c00025fd:	b8 04 00 00 00       	mov    eax,0x4
c0002602:	e9 2c 01 00 00       	jmp    c0002733 <find_volume+0x17c>
c0002607:	8d 6b 54             	lea    ebp,[ebx+0x54]
c000260a:	89 e8                	mov    eax,ebp
c000260c:	e8 f6 fc ff ff       	call   c0002307 <test_gpt_header>
c0002611:	85 c0                	test   eax,eax
c0002613:	75 0a                	jne    c000261f <find_volume+0x68>
c0002615:	b8 03 00 00 00       	mov    eax,0x3
c000261a:	e9 14 01 00 00       	jmp    c0002733 <find_volume+0x17c>
c000261f:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c0002625:	e8 8e f6 ff ff       	call   c0001cb8 <ld_dword>
c000262a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000262e:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002634:	e8 97 f6 ff ff       	call   c0001cd0 <ld_qword>
c0002639:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002641:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002645:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002649:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002651:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002655:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0002659:	74 ba                	je     c0002615 <find_volume+0x5e>
c000265b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000265f:	31 c9                	xor    ecx,ecx
c0002661:	c1 e7 07             	shl    edi,0x7
c0002664:	89 d8                	mov    eax,ebx
c0002666:	89 fa                	mov    edx,edi
c0002668:	c1 ea 09             	shr    edx,0x9
c000266b:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c000266f:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002673:	e8 11 fe ff ff       	call   c0002489 <move_window>
c0002678:	85 c0                	test   eax,eax
c000267a:	75 81                	jne    c00025fd <find_volume+0x46>
c000267c:	81 e7 80 01 00 00    	and    edi,0x180
c0002682:	b9 10 00 00 00       	mov    ecx,0x10
c0002687:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000268b:	ba b0 f7 01 c0       	mov    edx,0xc001f7b0
c0002690:	e8 b5 f6 ff ff       	call   c0001d4a <mem_cmp>
c0002695:	85 c0                	test   eax,eax
c0002697:	75 29                	jne    c00026c2 <find_volume+0x10b>
c0002699:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000269d:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c00026a1:	e8 2a f6 ff ff       	call   c0001cd0 <ld_qword>
c00026a6:	89 d1                	mov    ecx,edx
c00026a8:	89 c2                	mov    edx,eax
c00026aa:	89 d8                	mov    eax,ebx
c00026ac:	e8 4c fe ff ff       	call   c00024fd <check_fs>
c00026b1:	85 f6                	test   esi,esi
c00026b3:	75 07                	jne    c00026bc <find_volume+0x105>
c00026b5:	83 f8 01             	cmp    eax,0x1
c00026b8:	77 08                	ja     c00026c2 <find_volume+0x10b>
c00026ba:	eb 77                	jmp    c0002733 <find_volume+0x17c>
c00026bc:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026c0:	74 71                	je     c0002733 <find_volume+0x17c>
c00026c2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00026c6:	eb 89                	jmp    c0002651 <find_volume+0x9a>
c00026c8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00026cc:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00026d2:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00026d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00026dc:	89 cd                	mov    ebp,ecx
c00026de:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00026e2:	89 f8                	mov    eax,edi
c00026e4:	83 c7 10             	add    edi,0x10
c00026e7:	e8 cc f5 ff ff       	call   c0001cb8 <ld_dword>
c00026ec:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026f0:	89 01                	mov    DWORD PTR [ecx],eax
c00026f2:	83 c1 04             	add    ecx,0x4
c00026f5:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026f9:	75 e3                	jne    c00026de <find_volume+0x127>
c00026fb:	31 ff                	xor    edi,edi
c00026fd:	85 f6                	test   esi,esi
c00026ff:	74 03                	je     c0002704 <find_volume+0x14d>
c0002701:	8d 7e ff             	lea    edi,[esi-0x1]
c0002704:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c0002708:	85 d2                	test   edx,edx
c000270a:	74 14                	je     c0002720 <find_volume+0x169>
c000270c:	31 c9                	xor    ecx,ecx
c000270e:	89 d8                	mov    eax,ebx
c0002710:	e8 e8 fd ff ff       	call   c00024fd <check_fs>
c0002715:	83 f8 01             	cmp    eax,0x1
c0002718:	76 19                	jbe    c0002733 <find_volume+0x17c>
c000271a:	85 f6                	test   esi,esi
c000271c:	74 0f                	je     c000272d <find_volume+0x176>
c000271e:	eb 13                	jmp    c0002733 <find_volume+0x17c>
c0002720:	85 f6                	test   esi,esi
c0002722:	0f 85 ed fe ff ff    	jne    c0002615 <find_volume+0x5e>
c0002728:	b8 03 00 00 00       	mov    eax,0x3
c000272d:	47                   	inc    edi
c000272e:	83 ff 03             	cmp    edi,0x3
c0002731:	76 d1                	jbe    c0002704 <find_volume+0x14d>
c0002733:	83 c4 3c             	add    esp,0x3c
c0002736:	5b                   	pop    ebx
c0002737:	5e                   	pop    esi
c0002738:	5f                   	pop    edi
c0002739:	5d                   	pop    ebp
c000273a:	c3                   	ret    

c000273b <mount_volume>:
c000273b:	55                   	push   ebp
c000273c:	57                   	push   edi
c000273d:	89 cf                	mov    edi,ecx
c000273f:	56                   	push   esi
c0002740:	53                   	push   ebx
c0002741:	bb 0b 00 00 00       	mov    ebx,0xb
c0002746:	83 ec 3c             	sub    esp,0x3c
c0002749:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c000274f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002753:	e8 35 fb ff ff       	call   c000228d <get_ldnumber>
c0002758:	85 c0                	test   eax,eax
c000275a:	0f 88 3a 05 00 00    	js     c0002c9a <mount_volume+0x55f>
c0002760:	8b 2c 85 40 b9 03 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffc46c0]
c0002767:	89 c6                	mov    esi,eax
c0002769:	bb 0c 00 00 00       	mov    ebx,0xc
c000276e:	85 ed                	test   ebp,ebp
c0002770:	0f 84 24 05 00 00    	je     c0002c9a <mount_volume+0x55f>
c0002776:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000277a:	83 e7 fe             	and    edi,0xfffffffe
c000277d:	89 2a                	mov    DWORD PTR [edx],ebp
c000277f:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002783:	74 32                	je     c00027b7 <mount_volume+0x7c>
c0002785:	83 ec 0c             	sub    esp,0xc
c0002788:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000278c:	50                   	push   eax
c000278d:	e8 c8 f4 ff ff       	call   c0001c5a <disk_status>
c0002792:	83 c4 10             	add    esp,0x10
c0002795:	a8 01                	test   al,0x1
c0002797:	75 1e                	jne    c00027b7 <mount_volume+0x7c>
c0002799:	31 db                	xor    ebx,ebx
c000279b:	89 f9                	mov    ecx,edi
c000279d:	84 c9                	test   cl,cl
c000279f:	0f 84 f5 04 00 00    	je     c0002c9a <mount_volume+0x55f>
c00027a5:	a8 04                	test   al,0x4
c00027a7:	0f 84 ed 04 00 00    	je     c0002c9a <mount_volume+0x55f>
c00027ad:	bb 0a 00 00 00       	mov    ebx,0xa
c00027b2:	e9 e3 04 00 00       	jmp    c0002c9a <mount_volume+0x55f>
c00027b7:	83 ec 0c             	sub    esp,0xc
c00027ba:	89 f0                	mov    eax,esi
c00027bc:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00027c0:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c00027c3:	0f b6 f0             	movzx  esi,al
c00027c6:	bb 03 00 00 00       	mov    ebx,0x3
c00027cb:	56                   	push   esi
c00027cc:	e8 8c f4 ff ff       	call   c0001c5d <disk_initialize>
c00027d1:	83 c4 10             	add    esp,0x10
c00027d4:	a8 01                	test   al,0x1
c00027d6:	0f 85 be 04 00 00    	jne    c0002c9a <mount_volume+0x55f>
c00027dc:	89 f9                	mov    ecx,edi
c00027de:	84 c9                	test   cl,cl
c00027e0:	74 04                	je     c00027e6 <mount_volume+0xab>
c00027e2:	a8 04                	test   al,0x4
c00027e4:	75 c7                	jne    c00027ad <mount_volume+0x72>
c00027e6:	31 d2                	xor    edx,edx
c00027e8:	89 e8                	mov    eax,ebp
c00027ea:	e8 c8 fd ff ff       	call   c00025b7 <find_volume>
c00027ef:	83 f8 04             	cmp    eax,0x4
c00027f2:	75 0a                	jne    c00027fe <mount_volume+0xc3>
c00027f4:	bb 01 00 00 00       	mov    ebx,0x1
c00027f9:	e9 9c 04 00 00       	jmp    c0002c9a <mount_volume+0x55f>
c00027fe:	83 f8 01             	cmp    eax,0x1
c0002801:	76 0a                	jbe    c000280d <mount_volume+0xd2>
c0002803:	bb 0d 00 00 00       	mov    ebx,0xd
c0002808:	e9 8d 04 00 00       	jmp    c0002c9a <mount_volume+0x55f>
c000280d:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c0002810:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c0002813:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002817:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000281b:	75 17                	jne    c0002834 <mount_volume+0xf9>
c000281d:	b8 0b 00 00 00       	mov    eax,0xb
c0002822:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c0002827:	75 da                	jne    c0002803 <mount_volume+0xc8>
c0002829:	40                   	inc    eax
c000282a:	83 f8 40             	cmp    eax,0x40
c000282d:	75 f3                	jne    c0002822 <mount_volume+0xe7>
c000282f:	e9 5a 02 00 00       	jmp    c0002a8e <mount_volume+0x353>
c0002834:	8d 45 5f             	lea    eax,[ebp+0x5f]
c0002837:	e8 6f f4 ff ff       	call   c0001cab <ld_word>
c000283c:	66 3d 00 02          	cmp    ax,0x200
c0002840:	75 c1                	jne    c0002803 <mount_volume+0xc8>
c0002842:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002845:	e8 61 f4 ff ff       	call   c0001cab <ld_word>
c000284a:	0f b7 c0             	movzx  eax,ax
c000284d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002851:	85 c0                	test   eax,eax
c0002853:	75 0c                	jne    c0002861 <mount_volume+0x126>
c0002855:	8d 45 78             	lea    eax,[ebp+0x78]
c0002858:	e8 5b f4 ff ff       	call   c0001cb8 <ld_dword>
c000285d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002865:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002868:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000286b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c000286f:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002872:	48                   	dec    eax
c0002873:	3c 01                	cmp    al,0x1
c0002875:	77 8c                	ja     c0002803 <mount_volume+0xc8>
c0002877:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000287b:	89 c3                	mov    ebx,eax
c000287d:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002881:	66 85 c0             	test   ax,ax
c0002884:	0f 84 79 ff ff ff    	je     c0002803 <mount_volume+0xc8>
c000288a:	8d 40 ff             	lea    eax,[eax-0x1]
c000288d:	85 d8                	test   eax,ebx
c000288f:	0f 85 6e ff ff ff    	jne    c0002803 <mount_volume+0xc8>
c0002895:	8d 45 65             	lea    eax,[ebp+0x65]
c0002898:	e8 0e f4 ff ff       	call   c0001cab <ld_word>
c000289d:	89 c7                	mov    edi,eax
c000289f:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c00028a3:	a8 0f                	test   al,0xf
c00028a5:	0f 85 58 ff ff ff    	jne    c0002803 <mount_volume+0xc8>
c00028ab:	8d 45 67             	lea    eax,[ebp+0x67]
c00028ae:	e8 f8 f3 ff ff       	call   c0001cab <ld_word>
c00028b3:	0f b7 f0             	movzx  esi,ax
c00028b6:	85 f6                	test   esi,esi
c00028b8:	75 0a                	jne    c00028c4 <mount_volume+0x189>
c00028ba:	8d 45 74             	lea    eax,[ebp+0x74]
c00028bd:	e8 f6 f3 ff ff       	call   c0001cb8 <ld_dword>
c00028c2:	89 c6                	mov    esi,eax
c00028c4:	8d 45 62             	lea    eax,[ebp+0x62]
c00028c7:	e8 df f3 ff ff       	call   c0001cab <ld_word>
c00028cc:	66 85 c0             	test   ax,ax
c00028cf:	0f 84 2e ff ff ff    	je     c0002803 <mount_volume+0xc8>
c00028d5:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00028da:	0f b7 c8             	movzx  ecx,ax
c00028dd:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00028e2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00028e6:	89 fa                	mov    edx,edi
c00028e8:	66 c1 ea 04          	shr    dx,0x4
c00028ec:	0f b7 d2             	movzx  edx,dx
c00028ef:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028f3:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028fa:	39 c6                	cmp    esi,eax
c00028fc:	0f 82 01 ff ff ff    	jb     c0002803 <mount_volume+0xc8>
c0002902:	29 c6                	sub    esi,eax
c0002904:	31 d2                	xor    edx,edx
c0002906:	89 f0                	mov    eax,esi
c0002908:	f7 f3                	div    ebx
c000290a:	39 de                	cmp    esi,ebx
c000290c:	0f 82 f1 fe ff ff    	jb     c0002803 <mount_volume+0xc8>
c0002912:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002917:	0f 87 e6 fe ff ff    	ja     c0002803 <mount_volume+0xc8>
c000291d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002922:	0f 86 63 03 00 00    	jbe    c0002c8b <mount_volume+0x550>
c0002928:	bb 03 00 00 00       	mov    ebx,0x3
c000292d:	8d 70 02             	lea    esi,[eax+0x2]
c0002930:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002934:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002938:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000293b:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000293e:	31 d2                	xor    edx,edx
c0002940:	89 c8                	mov    eax,ecx
c0002942:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002945:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002949:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000294d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002951:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002955:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002958:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000295b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000295f:	31 d2                	xor    edx,edx
c0002961:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002965:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002969:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000296c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000296f:	83 fb 03             	cmp    ebx,0x3
c0002972:	75 2b                	jne    c000299f <mount_volume+0x264>
c0002974:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002977:	e8 2f f3 ff ff       	call   c0001cab <ld_word>
c000297c:	66 09 c7             	or     di,ax
c000297f:	0f 85 7e fe ff ff    	jne    c0002803 <mount_volume+0xc8>
c0002985:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000298b:	c1 e6 02             	shl    esi,0x2
c000298e:	e8 25 f3 ff ff       	call   c0001cb8 <ld_dword>
c0002993:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000299a:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000299d:	eb 30                	jmp    c00029cf <mount_volume+0x294>
c000299f:	66 85 ff             	test   di,di
c00029a2:	0f 84 5b fe ff ff    	je     c0002803 <mount_volume+0xc8>
c00029a8:	31 d2                	xor    edx,edx
c00029aa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00029ae:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00029b2:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00029b6:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c00029b9:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c00029bc:	83 fb 02             	cmp    ebx,0x2
c00029bf:	75 04                	jne    c00029c5 <mount_volume+0x28a>
c00029c1:	01 f6                	add    esi,esi
c00029c3:	eb 0a                	jmp    c00029cf <mount_volume+0x294>
c00029c5:	8d 04 76             	lea    eax,[esi+esi*2]
c00029c8:	83 e6 01             	and    esi,0x1
c00029cb:	d1 e8                	shr    eax,1
c00029cd:	01 c6                	add    esi,eax
c00029cf:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00029d5:	c1 ee 09             	shr    esi,0x9
c00029d8:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00029dc:	0f 87 21 fe ff ff    	ja     c0002803 <mount_volume+0xc8>
c00029e2:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00029e9:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029f0:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029f4:	83 fb 03             	cmp    ebx,0x3
c00029f7:	75 7a                	jne    c0002a73 <mount_volume+0x338>
c00029f9:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029ff:	e8 a7 f2 ff ff       	call   c0001cab <ld_word>
c0002a04:	66 48                	dec    ax
c0002a06:	75 6b                	jne    c0002a73 <mount_volume+0x338>
c0002a08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002a0c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002a10:	83 c2 01             	add    edx,0x1
c0002a13:	89 e8                	mov    eax,ebp
c0002a15:	83 d1 00             	adc    ecx,0x0
c0002a18:	e8 6c fa ff ff       	call   c0002489 <move_window>
c0002a1d:	85 c0                	test   eax,eax
c0002a1f:	75 52                	jne    c0002a73 <mount_volume+0x338>
c0002a21:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c0002a25:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002a2b:	e8 7b f2 ff ff       	call   c0001cab <ld_word>
c0002a30:	66 3d 55 aa          	cmp    ax,0xaa55
c0002a34:	75 3d                	jne    c0002a73 <mount_volume+0x338>
c0002a36:	8d 45 54             	lea    eax,[ebp+0x54]
c0002a39:	e8 7a f2 ff ff       	call   c0001cb8 <ld_dword>
c0002a3e:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002a43:	75 2e                	jne    c0002a73 <mount_volume+0x338>
c0002a45:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a4b:	e8 68 f2 ff ff       	call   c0001cb8 <ld_dword>
c0002a50:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a55:	75 1c                	jne    c0002a73 <mount_volume+0x338>
c0002a57:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a5d:	e8 56 f2 ff ff       	call   c0001cb8 <ld_dword>
c0002a62:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a65:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a6b:	e8 48 f2 ff ff       	call   c0001cb8 <ld_dword>
c0002a70:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a73:	66 a1 20 b9 03 c0    	mov    ax,ds:0xc003b920
c0002a79:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a7c:	40                   	inc    eax
c0002a7d:	31 db                	xor    ebx,ebx
c0002a7f:	66 a3 20 b9 03 c0    	mov    ds:0xc003b920,ax
c0002a85:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a89:	e9 0c 02 00 00       	jmp    c0002c9a <mount_volume+0x55f>
c0002a8e:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a94:	e8 12 f2 ff ff       	call   c0001cab <ld_word>
c0002a99:	66 3d 00 01          	cmp    ax,0x100
c0002a9d:	0f 85 60 fd ff ff    	jne    c0002803 <mount_volume+0xc8>
c0002aa3:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002aaa:	0f 85 53 fd ff ff    	jne    c0002803 <mount_volume+0xc8>
c0002ab0:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002ab6:	e8 15 f2 ff ff       	call   c0001cd0 <ld_qword>
c0002abb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002abf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002ac3:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002ac9:	e8 ea f1 ff ff       	call   c0001cb8 <ld_dword>
c0002ace:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002ad1:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002ad7:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002ada:	fe c8                	dec    al
c0002adc:	0f 85 21 fd ff ff    	jne    c0002803 <mount_volume+0xc8>
c0002ae2:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002ae9:	bb 01 00 00 00       	mov    ebx,0x1
c0002aee:	d3 e3                	shl    ebx,cl
c0002af0:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002af4:	66 85 db             	test   bx,bx
c0002af7:	0f 84 06 fd ff ff    	je     c0002803 <mount_volume+0xc8>
c0002afd:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002b03:	e8 b0 f1 ff ff       	call   c0001cb8 <ld_dword>
c0002b08:	89 c6                	mov    esi,eax
c0002b0a:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002b0f:	0f 87 ee fc ff ff    	ja     c0002803 <mount_volume+0xc8>
c0002b15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b19:	8d 40 02             	lea    eax,[eax+0x2]
c0002b1c:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002b1f:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002b22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b26:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002b29:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002b2f:	e8 84 f1 ff ff       	call   c0001cb8 <ld_dword>
c0002b34:	31 d2                	xor    edx,edx
c0002b36:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b3a:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b3e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002b42:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002b46:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002b49:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b4c:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b52:	e8 61 f1 ff ff       	call   c0001cb8 <ld_dword>
c0002b57:	31 d2                	xor    edx,edx
c0002b59:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b5d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b61:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b65:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b68:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b6b:	0f b7 c3             	movzx  eax,bx
c0002b6e:	31 d2                	xor    edx,edx
c0002b70:	0f af f0             	imul   esi,eax
c0002b73:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b77:	89 f0                	mov    eax,esi
c0002b79:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b7d:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b81:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b85:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b89:	39 c1                	cmp    ecx,eax
c0002b8b:	89 df                	mov    edi,ebx
c0002b8d:	19 d7                	sbb    edi,edx
c0002b8f:	0f 82 6e fc ff ff    	jb     c0002803 <mount_volume+0xc8>
c0002b95:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b9b:	31 db                	xor    ebx,ebx
c0002b9d:	e8 16 f1 ff ff       	call   c0001cb8 <ld_dword>
c0002ba2:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002ba9:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002bac:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002bb4:	85 db                	test   ebx,ebx
c0002bb6:	75 39                	jne    c0002bf1 <mount_volume+0x4b6>
c0002bb8:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002bbc:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002bc0:	0f 86 3d fc ff ff    	jbe    c0002803 <mount_volume+0xc8>
c0002bc6:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002bc9:	31 ff                	xor    edi,edi
c0002bcb:	89 e8                	mov    eax,ebp
c0002bcd:	e8 72 f3 ff ff       	call   c0001f44 <clst2sect>
c0002bd2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002bd6:	01 c6                	add    esi,eax
c0002bd8:	89 e8                	mov    eax,ebp
c0002bda:	11 d7                	adc    edi,edx
c0002bdc:	89 f2                	mov    edx,esi
c0002bde:	89 f9                	mov    ecx,edi
c0002be0:	e8 a4 f8 ff ff       	call   c0002489 <move_window>
c0002be5:	85 c0                	test   eax,eax
c0002be7:	0f 85 07 fc ff ff    	jne    c00027f4 <mount_volume+0xb9>
c0002bed:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002bf1:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bf6:	74 0b                	je     c0002c03 <mount_volume+0x4c8>
c0002bf8:	83 c3 20             	add    ebx,0x20
c0002bfb:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002c01:	eb b1                	jmp    c0002bb4 <mount_volume+0x479>
c0002c03:	8d 75 54             	lea    esi,[ebp+0x54]
c0002c06:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002c0a:	e8 a9 f0 ff ff       	call   c0001cb8 <ld_dword>
c0002c0f:	89 c3                	mov    ebx,eax
c0002c11:	83 f8 01             	cmp    eax,0x1
c0002c14:	0f 86 e9 fb ff ff    	jbe    c0002803 <mount_volume+0xc8>
c0002c1a:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002c1d:	0f 86 e0 fb ff ff    	jbe    c0002803 <mount_volume+0xc8>
c0002c23:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002c26:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002c2a:	0f af c2             	imul   eax,edx
c0002c2d:	31 d2                	xor    edx,edx
c0002c2f:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002c32:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002c35:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002c38:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002c3b:	31 c9                	xor    ecx,ecx
c0002c3d:	89 da                	mov    edx,ebx
c0002c3f:	89 e8                	mov    eax,ebp
c0002c41:	c1 ea 07             	shr    edx,0x7
c0002c44:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002c47:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c4a:	e8 3a f8 ff ff       	call   c0002489 <move_window>
c0002c4f:	85 c0                	test   eax,eax
c0002c51:	0f 85 9d fb ff ff    	jne    c00027f4 <mount_volume+0xb9>
c0002c57:	89 d8                	mov    eax,ebx
c0002c59:	83 e0 7f             	and    eax,0x7f
c0002c5c:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c5f:	e8 54 f0 ff ff       	call   c0001cb8 <ld_dword>
c0002c64:	83 f8 ff             	cmp    eax,0xffffffff
c0002c67:	74 0a                	je     c0002c73 <mount_volume+0x538>
c0002c69:	43                   	inc    ebx
c0002c6a:	39 d8                	cmp    eax,ebx
c0002c6c:	74 cd                	je     c0002c3b <mount_volume+0x500>
c0002c6e:	e9 90 fb ff ff       	jmp    c0002803 <mount_volume+0xc8>
c0002c73:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c7a:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c81:	bb 04 00 00 00       	mov    ebx,0x4
c0002c86:	e9 e8 fd ff ff       	jmp    c0002a73 <mount_volume+0x338>
c0002c8b:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c90:	19 db                	sbb    ebx,ebx
c0002c92:	83 c3 02             	add    ebx,0x2
c0002c95:	e9 93 fc ff ff       	jmp    c000292d <mount_volume+0x1f2>
c0002c9a:	83 c4 3c             	add    esp,0x3c
c0002c9d:	89 d8                	mov    eax,ebx
c0002c9f:	5b                   	pop    ebx
c0002ca0:	5e                   	pop    esi
c0002ca1:	5f                   	pop    edi
c0002ca2:	5d                   	pop    ebp
c0002ca3:	c3                   	ret    

c0002ca4 <find_bitmap>:
c0002ca4:	55                   	push   ebp
c0002ca5:	57                   	push   edi
c0002ca6:	89 c7                	mov    edi,eax
c0002ca8:	56                   	push   esi
c0002ca9:	8d 72 fe             	lea    esi,[edx-0x2]
c0002cac:	53                   	push   ebx
c0002cad:	83 ec 1c             	sub    esp,0x1c
c0002cb0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002cb3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002cb7:	83 e8 02             	sub    eax,0x2
c0002cba:	39 f0                	cmp    eax,esi
c0002cbc:	77 02                	ja     c0002cc0 <find_bitmap+0x1c>
c0002cbe:	31 f6                	xor    esi,esi
c0002cc0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002cc4:	89 f3                	mov    ebx,esi
c0002cc6:	31 ed                	xor    ebp,ebp
c0002cc8:	31 c9                	xor    ecx,ecx
c0002cca:	89 da                	mov    edx,ebx
c0002ccc:	89 f8                	mov    eax,edi
c0002cce:	c1 ea 0c             	shr    edx,0xc
c0002cd1:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002cd4:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002cd7:	e8 ad f7 ff ff       	call   c0002489 <move_window>
c0002cdc:	85 c0                	test   eax,eax
c0002cde:	75 68                	jne    c0002d48 <find_bitmap+0xa4>
c0002ce0:	89 da                	mov    edx,ebx
c0002ce2:	89 d9                	mov    ecx,ebx
c0002ce4:	c1 ea 03             	shr    edx,0x3
c0002ce7:	83 e1 07             	and    ecx,0x7
c0002cea:	b8 01 00 00 00       	mov    eax,0x1
c0002cef:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cf5:	d3 e0                	shl    eax,cl
c0002cf7:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cfa:	83 e9 02             	sub    ecx,0x2
c0002cfd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d01:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002d05:	43                   	inc    ebx
c0002d06:	21 c1                	and    ecx,eax
c0002d08:	d1 e0                	shl    eax,1
c0002d0a:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002d0e:	77 09                	ja     c0002d19 <find_bitmap+0x75>
c0002d10:	31 db                	xor    ebx,ebx
c0002d12:	ba 00 02 00 00       	mov    edx,0x200
c0002d17:	31 c0                	xor    eax,eax
c0002d19:	84 c9                	test   cl,cl
c0002d1b:	75 10                	jne    c0002d2d <find_bitmap+0x89>
c0002d1d:	45                   	inc    ebp
c0002d1e:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002d22:	75 0f                	jne    c0002d33 <find_bitmap+0x8f>
c0002d24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d28:	83 c0 02             	add    eax,0x2
c0002d2b:	eb 22                	jmp    c0002d4f <find_bitmap+0xab>
c0002d2d:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002d31:	31 ed                	xor    ebp,ebp
c0002d33:	39 de                	cmp    esi,ebx
c0002d35:	74 16                	je     c0002d4d <find_bitmap+0xa9>
c0002d37:	84 c0                	test   al,al
c0002d39:	75 c6                	jne    c0002d01 <find_bitmap+0x5d>
c0002d3b:	42                   	inc    edx
c0002d3c:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002d42:	77 84                	ja     c0002cc8 <find_bitmap+0x24>
c0002d44:	b0 01                	mov    al,0x1
c0002d46:	eb b9                	jmp    c0002d01 <find_bitmap+0x5d>
c0002d48:	83 c8 ff             	or     eax,0xffffffff
c0002d4b:	eb 02                	jmp    c0002d4f <find_bitmap+0xab>
c0002d4d:	31 c0                	xor    eax,eax
c0002d4f:	83 c4 1c             	add    esp,0x1c
c0002d52:	5b                   	pop    ebx
c0002d53:	5e                   	pop    esi
c0002d54:	5f                   	pop    edi
c0002d55:	5d                   	pop    ebp
c0002d56:	c3                   	ret    

c0002d57 <change_bitmap>:
c0002d57:	55                   	push   ebp
c0002d58:	89 cd                	mov    ebp,ecx
c0002d5a:	57                   	push   edi
c0002d5b:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d5e:	56                   	push   esi
c0002d5f:	89 c7                	mov    edi,eax
c0002d61:	53                   	push   ebx
c0002d62:	89 c8                	mov    eax,ecx
c0002d64:	83 ec 1c             	sub    esp,0x1c
c0002d67:	31 d2                	xor    edx,edx
c0002d69:	89 ce                	mov    esi,ecx
c0002d6b:	c1 e8 0c             	shr    eax,0xc
c0002d6e:	bb 01 00 00 00       	mov    ebx,0x1
c0002d73:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d76:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d79:	c1 ee 03             	shr    esi,0x3
c0002d7c:	83 e1 07             	and    ecx,0x7
c0002d7f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d85:	d3 e3                	shl    ebx,cl
c0002d87:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d8b:	89 c1                	mov    ecx,eax
c0002d8d:	89 d3                	mov    ebx,edx
c0002d8f:	83 c1 01             	add    ecx,0x1
c0002d92:	83 d3 00             	adc    ebx,0x0
c0002d95:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d99:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d9d:	89 d1                	mov    ecx,edx
c0002d9f:	89 c2                	mov    edx,eax
c0002da1:	89 f8                	mov    eax,edi
c0002da3:	e8 e1 f6 ff ff       	call   c0002489 <move_window>
c0002da8:	89 c1                	mov    ecx,eax
c0002daa:	85 c0                	test   eax,eax
c0002dac:	75 48                	jne    c0002df6 <change_bitmap+0x9f>
c0002dae:	31 d2                	xor    edx,edx
c0002db0:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002db4:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002db8:	0f 95 c2             	setne  dl
c0002dbb:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002dbf:	74 3c                	je     c0002dfd <change_bitmap+0xa6>
c0002dc1:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002dc5:	4d                   	dec    ebp
c0002dc6:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002dca:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002dce:	74 32                	je     c0002e02 <change_bitmap+0xab>
c0002dd0:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002dd4:	75 d8                	jne    c0002dae <change_bitmap+0x57>
c0002dd6:	8d 46 01             	lea    eax,[esi+0x1]
c0002dd9:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002dde:	89 c3                	mov    ebx,eax
c0002de0:	31 f6                	xor    esi,esi
c0002de2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002de6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002dea:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002df0:	74 99                	je     c0002d8b <change_bitmap+0x34>
c0002df2:	89 de                	mov    esi,ebx
c0002df4:	eb b8                	jmp    c0002dae <change_bitmap+0x57>
c0002df6:	b9 01 00 00 00       	mov    ecx,0x1
c0002dfb:	eb 05                	jmp    c0002e02 <change_bitmap+0xab>
c0002dfd:	b9 02 00 00 00       	mov    ecx,0x2
c0002e02:	83 c4 1c             	add    esp,0x1c
c0002e05:	89 c8                	mov    eax,ecx
c0002e07:	5b                   	pop    ebx
c0002e08:	5e                   	pop    esi
c0002e09:	5f                   	pop    edi
c0002e0a:	5d                   	pop    ebp
c0002e0b:	c3                   	ret    

c0002e0c <put_fat>:
c0002e0c:	83 fa 01             	cmp    edx,0x1
c0002e0f:	0f 86 7b 01 00 00    	jbe    c0002f90 <put_fat+0x184>
c0002e15:	55                   	push   ebp
c0002e16:	57                   	push   edi
c0002e17:	89 cf                	mov    edi,ecx
c0002e19:	56                   	push   esi
c0002e1a:	b9 02 00 00 00       	mov    ecx,0x2
c0002e1f:	53                   	push   ebx
c0002e20:	89 c6                	mov    esi,eax
c0002e22:	83 ec 1c             	sub    esp,0x1c
c0002e25:	89 d3                	mov    ebx,edx
c0002e27:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002e2a:	0f 86 68 01 00 00    	jbe    c0002f98 <put_fat+0x18c>
c0002e30:	8a 00                	mov    al,BYTE PTR [eax]
c0002e32:	3c 02                	cmp    al,0x2
c0002e34:	0f 84 c7 00 00 00    	je     c0002f01 <put_fat+0xf5>
c0002e3a:	77 09                	ja     c0002e45 <put_fat+0x39>
c0002e3c:	fe c8                	dec    al
c0002e3e:	74 17                	je     c0002e57 <put_fat+0x4b>
c0002e40:	e9 53 01 00 00       	jmp    c0002f98 <put_fat+0x18c>
c0002e45:	b9 02 00 00 00       	mov    ecx,0x2
c0002e4a:	3c 04                	cmp    al,0x4
c0002e4c:	0f 86 e1 00 00 00    	jbe    c0002f33 <put_fat+0x127>
c0002e52:	e9 41 01 00 00       	jmp    c0002f98 <put_fat+0x18c>
c0002e57:	89 d5                	mov    ebp,edx
c0002e59:	31 c9                	xor    ecx,ecx
c0002e5b:	d1 ed                	shr    ebp,1
c0002e5d:	89 f0                	mov    eax,esi
c0002e5f:	01 d5                	add    ebp,edx
c0002e61:	89 ea                	mov    edx,ebp
c0002e63:	c1 ea 09             	shr    edx,0x9
c0002e66:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e69:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e6c:	e8 18 f6 ff ff       	call   c0002489 <move_window>
c0002e71:	89 c1                	mov    ecx,eax
c0002e73:	85 c0                	test   eax,eax
c0002e75:	0f 85 1d 01 00 00    	jne    c0002f98 <put_fat+0x18c>
c0002e7b:	8d 46 54             	lea    eax,[esi+0x54]
c0002e7e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e82:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e85:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e8f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e93:	89 f8                	mov    eax,edi
c0002e95:	83 e3 01             	and    ebx,0x1
c0002e98:	74 0d                	je     c0002ea7 <put_fat+0x9b>
c0002e9a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e9d:	89 fa                	mov    edx,edi
c0002e9f:	83 e0 0f             	and    eax,0xf
c0002ea2:	c1 e2 04             	shl    edx,0x4
c0002ea5:	09 d0                	or     eax,edx
c0002ea7:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002eaa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002eae:	31 c9                	xor    ecx,ecx
c0002eb0:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb4:	c1 ea 09             	shr    edx,0x9
c0002eb7:	89 f0                	mov    eax,esi
c0002eb9:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ebc:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ebf:	e8 c5 f5 ff ff       	call   c0002489 <move_window>
c0002ec4:	89 c1                	mov    ecx,eax
c0002ec6:	85 c0                	test   eax,eax
c0002ec8:	0f 85 ca 00 00 00    	jne    c0002f98 <put_fat+0x18c>
c0002ece:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002ed2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002ed8:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002edc:	85 db                	test   ebx,ebx
c0002ede:	74 07                	je     c0002ee7 <put_fat+0xdb>
c0002ee0:	c1 ef 04             	shr    edi,0x4
c0002ee3:	89 fa                	mov    edx,edi
c0002ee5:	eb 0e                	jmp    c0002ef5 <put_fat+0xe9>
c0002ee7:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002eea:	c1 ef 08             	shr    edi,0x8
c0002eed:	83 e2 f0             	and    edx,0xfffffff0
c0002ef0:	83 e7 0f             	and    edi,0xf
c0002ef3:	09 fa                	or     edx,edi
c0002ef5:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002ef8:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002efc:	e9 97 00 00 00       	jmp    c0002f98 <put_fat+0x18c>
c0002f01:	31 c9                	xor    ecx,ecx
c0002f03:	c1 ea 08             	shr    edx,0x8
c0002f06:	89 f0                	mov    eax,esi
c0002f08:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002f0b:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002f0e:	e8 76 f5 ff ff       	call   c0002489 <move_window>
c0002f13:	89 c1                	mov    ecx,eax
c0002f15:	85 c0                	test   eax,eax
c0002f17:	75 7f                	jne    c0002f98 <put_fat+0x18c>
c0002f19:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f1d:	01 db                	add    ebx,ebx
c0002f1f:	0f b7 d7             	movzx  edx,di
c0002f22:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002f28:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002f2c:	e8 ec ed ff ff       	call   c0001d1d <st_word>
c0002f31:	eb 53                	jmp    c0002f86 <put_fat+0x17a>
c0002f33:	31 c9                	xor    ecx,ecx
c0002f35:	c1 ea 07             	shr    edx,0x7
c0002f38:	89 f0                	mov    eax,esi
c0002f3a:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002f3d:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002f40:	e8 44 f5 ff ff       	call   c0002489 <move_window>
c0002f45:	89 c1                	mov    ecx,eax
c0002f47:	85 c0                	test   eax,eax
c0002f49:	75 4d                	jne    c0002f98 <put_fat+0x18c>
c0002f4b:	c1 e3 02             	shl    ebx,0x2
c0002f4e:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f54:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f57:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f5b:	74 1c                	je     c0002f79 <put_fat+0x16d>
c0002f5d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f61:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f67:	89 d8                	mov    eax,ebx
c0002f69:	e8 4a ed ff ff       	call   c0001cb8 <ld_dword>
c0002f6e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f72:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f77:	09 c7                	or     edi,eax
c0002f79:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f7d:	89 fa                	mov    edx,edi
c0002f7f:	89 d8                	mov    eax,ebx
c0002f81:	e8 9b ed ff ff       	call   c0001d21 <st_dword>
c0002f86:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f8a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f8e:	eb 08                	jmp    c0002f98 <put_fat+0x18c>
c0002f90:	b9 02 00 00 00       	mov    ecx,0x2
c0002f95:	89 c8                	mov    eax,ecx
c0002f97:	c3                   	ret    
c0002f98:	83 c4 1c             	add    esp,0x1c
c0002f9b:	89 c8                	mov    eax,ecx
c0002f9d:	5b                   	pop    ebx
c0002f9e:	5e                   	pop    esi
c0002f9f:	5f                   	pop    edi
c0002fa0:	5d                   	pop    ebp
c0002fa1:	c3                   	ret    

c0002fa2 <fill_last_frag>:
c0002fa2:	57                   	push   edi
c0002fa3:	89 cf                	mov    edi,ecx
c0002fa5:	56                   	push   esi
c0002fa6:	89 d6                	mov    esi,edx
c0002fa8:	53                   	push   ebx
c0002fa9:	89 c3                	mov    ebx,eax
c0002fab:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002fae:	85 c0                	test   eax,eax
c0002fb0:	74 21                	je     c0002fd3 <fill_last_frag+0x31>
c0002fb2:	89 f9                	mov    ecx,edi
c0002fb4:	83 f8 01             	cmp    eax,0x1
c0002fb7:	76 05                	jbe    c0002fbe <fill_last_frag+0x1c>
c0002fb9:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002fbc:	29 c1                	sub    ecx,eax
c0002fbe:	8d 56 01             	lea    edx,[esi+0x1]
c0002fc1:	29 c2                	sub    edx,eax
c0002fc3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fc5:	e8 42 fe ff ff       	call   c0002e0c <put_fat>
c0002fca:	85 c0                	test   eax,eax
c0002fcc:	75 05                	jne    c0002fd3 <fill_last_frag+0x31>
c0002fce:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002fd1:	eb d8                	jmp    c0002fab <fill_last_frag+0x9>
c0002fd3:	5b                   	pop    ebx
c0002fd4:	5e                   	pop    esi
c0002fd5:	5f                   	pop    edi
c0002fd6:	c3                   	ret    

c0002fd7 <fill_first_frag>:
c0002fd7:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002fdb:	75 2d                	jne    c000300a <fill_first_frag+0x33>
c0002fdd:	57                   	push   edi
c0002fde:	56                   	push   esi
c0002fdf:	53                   	push   ebx
c0002fe0:	89 c3                	mov    ebx,eax
c0002fe2:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002fe5:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002fe8:	01 d7                	add    edi,edx
c0002fea:	39 fa                	cmp    edx,edi
c0002fec:	74 14                	je     c0003002 <fill_first_frag+0x2b>
c0002fee:	8d 72 01             	lea    esi,[edx+0x1]
c0002ff1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ff3:	89 f1                	mov    ecx,esi
c0002ff5:	e8 12 fe ff ff       	call   c0002e0c <put_fat>
c0002ffa:	89 f2                	mov    edx,esi
c0002ffc:	85 c0                	test   eax,eax
c0002ffe:	74 ea                	je     c0002fea <fill_first_frag+0x13>
c0003000:	eb 0b                	jmp    c000300d <fill_first_frag+0x36>
c0003002:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003006:	31 c0                	xor    eax,eax
c0003008:	eb 03                	jmp    c000300d <fill_first_frag+0x36>
c000300a:	31 c0                	xor    eax,eax
c000300c:	c3                   	ret    
c000300d:	5b                   	pop    ebx
c000300e:	5e                   	pop    esi
c000300f:	5f                   	pop    edi
c0003010:	c3                   	ret    

c0003011 <get_fat>:
c0003011:	83 fa 01             	cmp    edx,0x1
c0003014:	0f 86 db 01 00 00    	jbe    c00031f5 <get_fat+0x1e4>
c000301a:	55                   	push   ebp
c000301b:	b9 01 00 00 00       	mov    ecx,0x1
c0003020:	57                   	push   edi
c0003021:	56                   	push   esi
c0003022:	53                   	push   ebx
c0003023:	83 ec 1c             	sub    esp,0x1c
c0003026:	8b 38                	mov    edi,DWORD PTR [eax]
c0003028:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c000302b:	0f 86 cc 01 00 00    	jbe    c00031fd <get_fat+0x1ec>
c0003031:	89 c3                	mov    ebx,eax
c0003033:	89 d6                	mov    esi,edx
c0003035:	8a 07                	mov    al,BYTE PTR [edi]
c0003037:	3c 02                	cmp    al,0x2
c0003039:	0f 84 99 00 00 00    	je     c00030d8 <get_fat+0xc7>
c000303f:	77 09                	ja     c000304a <get_fat+0x39>
c0003041:	fe c8                	dec    al
c0003043:	74 1a                	je     c000305f <get_fat+0x4e>
c0003045:	e9 b3 01 00 00       	jmp    c00031fd <get_fat+0x1ec>
c000304a:	3c 03                	cmp    al,0x3
c000304c:	0f 84 b5 00 00 00    	je     c0003107 <get_fat+0xf6>
c0003052:	3c 04                	cmp    al,0x4
c0003054:	0f 84 e3 00 00 00    	je     c000313d <get_fat+0x12c>
c000305a:	e9 9e 01 00 00       	jmp    c00031fd <get_fat+0x1ec>
c000305f:	89 d3                	mov    ebx,edx
c0003061:	31 c9                	xor    ecx,ecx
c0003063:	d1 eb                	shr    ebx,1
c0003065:	89 f8                	mov    eax,edi
c0003067:	01 d3                	add    ebx,edx
c0003069:	89 da                	mov    edx,ebx
c000306b:	c1 ea 09             	shr    edx,0x9
c000306e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003071:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003074:	e8 10 f4 ff ff       	call   c0002489 <move_window>
c0003079:	85 c0                	test   eax,eax
c000307b:	74 08                	je     c0003085 <get_fat+0x74>
c000307d:	83 c9 ff             	or     ecx,0xffffffff
c0003080:	e9 78 01 00 00       	jmp    c00031fd <get_fat+0x1ec>
c0003085:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003088:	31 c9                	xor    ecx,ecx
c000308a:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003090:	89 ea                	mov    edx,ebp
c0003092:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0003096:	c1 ea 09             	shr    edx,0x9
c0003099:	89 f8                	mov    eax,edi
c000309b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c000309e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030a1:	e8 e3 f3 ff ff       	call   c0002489 <move_window>
c00030a6:	85 c0                	test   eax,eax
c00030a8:	75 d3                	jne    c000307d <get_fat+0x6c>
c00030aa:	0f b6 c3             	movzx  eax,bl
c00030ad:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00030b3:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c00030b8:	c1 e3 08             	shl    ebx,0x8
c00030bb:	09 c3                	or     ebx,eax
c00030bd:	89 d9                	mov    ecx,ebx
c00030bf:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00030c5:	83 e6 01             	and    esi,0x1
c00030c8:	0f 84 2f 01 00 00    	je     c00031fd <get_fat+0x1ec>
c00030ce:	89 d9                	mov    ecx,ebx
c00030d0:	c1 e9 04             	shr    ecx,0x4
c00030d3:	e9 25 01 00 00       	jmp    c00031fd <get_fat+0x1ec>
c00030d8:	31 c9                	xor    ecx,ecx
c00030da:	c1 ea 08             	shr    edx,0x8
c00030dd:	89 f8                	mov    eax,edi
c00030df:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030e2:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030e5:	e8 9f f3 ff ff       	call   c0002489 <move_window>
c00030ea:	85 c0                	test   eax,eax
c00030ec:	75 8f                	jne    c000307d <get_fat+0x6c>
c00030ee:	01 f6                	add    esi,esi
c00030f0:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030f6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030fa:	e8 ac eb ff ff       	call   c0001cab <ld_word>
c00030ff:	0f b7 c8             	movzx  ecx,ax
c0003102:	e9 f6 00 00 00       	jmp    c00031fd <get_fat+0x1ec>
c0003107:	31 c9                	xor    ecx,ecx
c0003109:	c1 ea 07             	shr    edx,0x7
c000310c:	89 f8                	mov    eax,edi
c000310e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003111:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003114:	e8 70 f3 ff ff       	call   c0002489 <move_window>
c0003119:	85 c0                	test   eax,eax
c000311b:	0f 85 5c ff ff ff    	jne    c000307d <get_fat+0x6c>
c0003121:	c1 e6 02             	shl    esi,0x2
c0003124:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000312a:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000312e:	e8 85 eb ff ff       	call   c0001cb8 <ld_dword>
c0003133:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003138:	e9 b4 00 00 00       	jmp    c00031f1 <get_fat+0x1e0>
c000313d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003140:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003143:	89 d1                	mov    ecx,edx
c0003145:	09 c1                	or     ecx,eax
c0003147:	74 06                	je     c000314f <get_fat+0x13e>
c0003149:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000314d:	75 0f                	jne    c000315e <get_fat+0x14d>
c000314f:	b9 01 00 00 00       	mov    ecx,0x1
c0003154:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0003158:	0f 85 9f 00 00 00    	jne    c00031fd <get_fat+0x1ec>
c000315e:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003162:	89 f5                	mov    ebp,esi
c0003164:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003169:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c000316c:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c000316f:	80 f9 02             	cmp    cl,0x2
c0003172:	75 35                	jne    c00031a9 <get_fat+0x198>
c0003174:	83 c0 ff             	add    eax,0xffffffff
c0003177:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c000317c:	83 d2 ff             	adc    edx,0xffffffff
c000317f:	31 db                	xor    ebx,ebx
c0003181:	0f ac d0 09          	shrd   eax,edx,0x9
c0003185:	53                   	push   ebx
c0003186:	c1 ea 09             	shr    edx,0x9
c0003189:	51                   	push   ecx
c000318a:	52                   	push   edx
c000318b:	50                   	push   eax
c000318c:	e8 8b b5 01 00       	call   c001e71c <__udivdi3>
c0003191:	83 c4 10             	add    esp,0x10
c0003194:	b9 01 00 00 00       	mov    ecx,0x1
c0003199:	39 c5                	cmp    ebp,eax
c000319b:	77 60                	ja     c00031fd <get_fat+0x1ec>
c000319d:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c00031a2:	74 59                	je     c00031fd <get_fat+0x1ec>
c00031a4:	8d 4e 01             	lea    ecx,[esi+0x1]
c00031a7:	eb 54                	jmp    c00031fd <get_fat+0x1ec>
c00031a9:	80 f9 03             	cmp    cl,0x3
c00031ac:	75 05                	jne    c00031b3 <get_fat+0x1a2>
c00031ae:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c00031b1:	77 f1                	ja     c00031a4 <get_fat+0x193>
c00031b3:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c00031b8:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c00031bc:	75 3f                	jne    c00031fd <get_fat+0x1ec>
c00031be:	31 c9                	xor    ecx,ecx
c00031c0:	89 f2                	mov    edx,esi
c00031c2:	89 f8                	mov    eax,edi
c00031c4:	c1 ea 07             	shr    edx,0x7
c00031c7:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00031ca:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00031cd:	e8 b7 f2 ff ff       	call   c0002489 <move_window>
c00031d2:	85 c0                	test   eax,eax
c00031d4:	0f 85 a3 fe ff ff    	jne    c000307d <get_fat+0x6c>
c00031da:	c1 e6 02             	shl    esi,0x2
c00031dd:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031e3:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00031e7:	e8 cc ea ff ff       	call   c0001cb8 <ld_dword>
c00031ec:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031f1:	89 c1                	mov    ecx,eax
c00031f3:	eb 08                	jmp    c00031fd <get_fat+0x1ec>
c00031f5:	b9 01 00 00 00       	mov    ecx,0x1
c00031fa:	89 c8                	mov    eax,ecx
c00031fc:	c3                   	ret    
c00031fd:	83 c4 1c             	add    esp,0x1c
c0003200:	89 c8                	mov    eax,ecx
c0003202:	5b                   	pop    ebx
c0003203:	5e                   	pop    esi
c0003204:	5f                   	pop    edi
c0003205:	5d                   	pop    ebp
c0003206:	c3                   	ret    

c0003207 <dir_sdi>:
c0003207:	55                   	push   ebp
c0003208:	57                   	push   edi
c0003209:	56                   	push   esi
c000320a:	53                   	push   ebx
c000320b:	89 c3                	mov    ebx,eax
c000320d:	83 ec 1c             	sub    esp,0x1c
c0003210:	8b 38                	mov    edi,DWORD PTR [eax]
c0003212:	31 c0                	xor    eax,eax
c0003214:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003217:	0f 94 c0             	sete   al
c000321a:	48                   	dec    eax
c000321b:	25 00 00 20 f0       	and    eax,0xf0200000
c0003220:	05 00 00 00 10       	add    eax,0x10000000
c0003225:	39 d0                	cmp    eax,edx
c0003227:	77 0a                	ja     c0003233 <dir_sdi+0x2c>
c0003229:	b8 02 00 00 00       	mov    eax,0x2
c000322e:	e9 c4 00 00 00       	jmp    c00032f7 <dir_sdi+0xf0>
c0003233:	89 d6                	mov    esi,edx
c0003235:	f6 c2 1f             	test   dl,0x1f
c0003238:	75 ef                	jne    c0003229 <dir_sdi+0x22>
c000323a:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000323d:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0003240:	85 c9                	test   ecx,ecx
c0003242:	75 2d                	jne    c0003271 <dir_sdi+0x6a>
c0003244:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003247:	77 1b                	ja     c0003264 <dir_sdi+0x5d>
c0003249:	89 f2                	mov    edx,esi
c000324b:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000324f:	c1 ea 05             	shr    edx,0x5
c0003252:	39 c2                	cmp    edx,eax
c0003254:	73 d3                	jae    c0003229 <dir_sdi+0x22>
c0003256:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003259:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c000325c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000325f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003262:	eb 4b                	jmp    c00032af <dir_sdi+0xa8>
c0003264:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0003267:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c000326b:	85 c0                	test   eax,eax
c000326d:	74 da                	je     c0003249 <dir_sdi+0x42>
c000326f:	89 c1                	mov    ecx,eax
c0003271:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003275:	c1 e5 09             	shl    ebp,0x9
c0003278:	89 ca                	mov    edx,ecx
c000327a:	39 ee                	cmp    esi,ebp
c000327c:	72 1c                	jb     c000329a <dir_sdi+0x93>
c000327e:	89 d8                	mov    eax,ebx
c0003280:	e8 8c fd ff ff       	call   c0003011 <get_fat>
c0003285:	89 c1                	mov    ecx,eax
c0003287:	83 f8 ff             	cmp    eax,0xffffffff
c000328a:	74 66                	je     c00032f2 <dir_sdi+0xeb>
c000328c:	83 f8 01             	cmp    eax,0x1
c000328f:	76 98                	jbe    c0003229 <dir_sdi+0x22>
c0003291:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003294:	76 93                	jbe    c0003229 <dir_sdi+0x22>
c0003296:	29 ee                	sub    esi,ebp
c0003298:	eb de                	jmp    c0003278 <dir_sdi+0x71>
c000329a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000329e:	89 f8                	mov    eax,edi
c00032a0:	e8 9f ec ff ff       	call   c0001f44 <clst2sect>
c00032a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00032a9:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00032ac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00032af:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00032b2:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00032b5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00032b8:	89 d1                	mov    ecx,edx
c00032ba:	09 c1                	or     ecx,eax
c00032bc:	0f 84 67 ff ff ff    	je     c0003229 <dir_sdi+0x22>
c00032c2:	89 f1                	mov    ecx,esi
c00032c4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00032cc:	c1 e9 09             	shr    ecx,0x9
c00032cf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032d3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00032d7:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00032db:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00032de:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00032e4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00032e7:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032eb:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032ee:	31 c0                	xor    eax,eax
c00032f0:	eb 05                	jmp    c00032f7 <dir_sdi+0xf0>
c00032f2:	b8 01 00 00 00       	mov    eax,0x1
c00032f7:	83 c4 1c             	add    esp,0x1c
c00032fa:	5b                   	pop    ebx
c00032fb:	5e                   	pop    esi
c00032fc:	5f                   	pop    edi
c00032fd:	5d                   	pop    ebp
c00032fe:	c3                   	ret    

c00032ff <create_chain>:
c00032ff:	55                   	push   ebp
c0003300:	89 c5                	mov    ebp,eax
c0003302:	57                   	push   edi
c0003303:	56                   	push   esi
c0003304:	53                   	push   ebx
c0003305:	83 ec 1c             	sub    esp,0x1c
c0003308:	85 d2                	test   edx,edx
c000330a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000330e:	8b 30                	mov    esi,DWORD PTR [eax]
c0003310:	75 0e                	jne    c0003320 <create_chain+0x21>
c0003312:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0003315:	85 ff                	test   edi,edi
c0003317:	74 39                	je     c0003352 <create_chain+0x53>
c0003319:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c000331c:	77 39                	ja     c0003357 <create_chain+0x58>
c000331e:	eb 32                	jmp    c0003352 <create_chain+0x53>
c0003320:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003324:	e8 e8 fc ff ff       	call   c0003011 <get_fat>
c0003329:	89 c3                	mov    ebx,eax
c000332b:	83 f8 01             	cmp    eax,0x1
c000332e:	77 0a                	ja     c000333a <create_chain+0x3b>
c0003330:	bb 01 00 00 00       	mov    ebx,0x1
c0003335:	e9 ba 01 00 00       	jmp    c00034f4 <create_chain+0x1f5>
c000333a:	83 f8 ff             	cmp    eax,0xffffffff
c000333d:	0f 84 62 01 00 00    	je     c00034a5 <create_chain+0x1a6>
c0003343:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003346:	0f 87 a8 01 00 00    	ja     c00034f4 <create_chain+0x1f5>
c000334c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003350:	eb 05                	jmp    c0003357 <create_chain+0x58>
c0003352:	bf 01 00 00 00       	mov    edi,0x1
c0003357:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000335b:	75 07                	jne    c0003364 <create_chain+0x65>
c000335d:	31 db                	xor    ebx,ebx
c000335f:	e9 90 01 00 00       	jmp    c00034f4 <create_chain+0x1f5>
c0003364:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003367:	75 74                	jne    c00033dd <create_chain+0xde>
c0003369:	b9 01 00 00 00       	mov    ecx,0x1
c000336e:	89 fa                	mov    edx,edi
c0003370:	89 f0                	mov    eax,esi
c0003372:	e8 2d f9 ff ff       	call   c0002ca4 <find_bitmap>
c0003377:	89 c3                	mov    ebx,eax
c0003379:	8d 40 ff             	lea    eax,[eax-0x1]
c000337c:	83 f8 fd             	cmp    eax,0xfffffffd
c000337f:	0f 87 6f 01 00 00    	ja     c00034f4 <create_chain+0x1f5>
c0003385:	83 ec 0c             	sub    esp,0xc
c0003388:	b9 01 00 00 00       	mov    ecx,0x1
c000338d:	6a 01                	push   0x1
c000338f:	89 da                	mov    edx,ebx
c0003391:	89 f0                	mov    eax,esi
c0003393:	e8 bf f9 ff ff       	call   c0002d57 <change_bitmap>
c0003398:	83 c4 10             	add    esp,0x10
c000339b:	83 f8 02             	cmp    eax,0x2
c000339e:	74 90                	je     c0003330 <create_chain+0x31>
c00033a0:	83 f8 01             	cmp    eax,0x1
c00033a3:	0f 84 fc 00 00 00    	je     c00034a5 <create_chain+0x1a6>
c00033a9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00033ae:	75 09                	jne    c00033b9 <create_chain+0xba>
c00033b0:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c00033b4:	e9 0c 01 00 00       	jmp    c00034c5 <create_chain+0x1c6>
c00033b9:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c00033bd:	0f 85 e7 00 00 00    	jne    c00034aa <create_chain+0x1ab>
c00033c3:	8d 57 01             	lea    edx,[edi+0x1]
c00033c6:	39 da                	cmp    edx,ebx
c00033c8:	0f 84 f7 00 00 00    	je     c00034c5 <create_chain+0x1c6>
c00033ce:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00033d1:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00033d5:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00033d8:	e9 cd 00 00 00       	jmp    c00034aa <create_chain+0x1ab>
c00033dd:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00033e1:	75 41                	jne    c0003424 <create_chain+0x125>
c00033e3:	8d 5f 01             	lea    ebx,[edi+0x1]
c00033e6:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e9:	77 05                	ja     c00033f0 <create_chain+0xf1>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 18 fc ff ff       	call   c0003011 <get_fat>
c00033f9:	83 f8 01             	cmp    eax,0x1
c00033fc:	0f 84 2e ff ff ff    	je     c0003330 <create_chain+0x31>
c0003402:	83 f8 ff             	cmp    eax,0xffffffff
c0003405:	0f 84 9a 00 00 00    	je     c00034a5 <create_chain+0x1a6>
c000340b:	85 c0                	test   eax,eax
c000340d:	74 11                	je     c0003420 <create_chain+0x121>
c000340f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0003412:	83 f8 01             	cmp    eax,0x1
c0003415:	76 0d                	jbe    c0003424 <create_chain+0x125>
c0003417:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c000341a:	76 08                	jbe    c0003424 <create_chain+0x125>
c000341c:	89 c7                	mov    edi,eax
c000341e:	eb 04                	jmp    c0003424 <create_chain+0x125>
c0003420:	85 db                	test   ebx,ebx
c0003422:	75 38                	jne    c000345c <create_chain+0x15d>
c0003424:	89 fb                	mov    ebx,edi
c0003426:	43                   	inc    ebx
c0003427:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000342a:	77 0e                	ja     c000343a <create_chain+0x13b>
c000342c:	83 ff 01             	cmp    edi,0x1
c000342f:	0f 86 28 ff ff ff    	jbe    c000335d <create_chain+0x5e>
c0003435:	bb 02 00 00 00       	mov    ebx,0x2
c000343a:	89 da                	mov    edx,ebx
c000343c:	89 e8                	mov    eax,ebp
c000343e:	e8 ce fb ff ff       	call   c0003011 <get_fat>
c0003443:	85 c0                	test   eax,eax
c0003445:	74 15                	je     c000345c <create_chain+0x15d>
c0003447:	83 f8 01             	cmp    eax,0x1
c000344a:	0f 84 e0 fe ff ff    	je     c0003330 <create_chain+0x31>
c0003450:	40                   	inc    eax
c0003451:	74 52                	je     c00034a5 <create_chain+0x1a6>
c0003453:	39 fb                	cmp    ebx,edi
c0003455:	75 cf                	jne    c0003426 <create_chain+0x127>
c0003457:	e9 01 ff ff ff       	jmp    c000335d <create_chain+0x5e>
c000345c:	83 c9 ff             	or     ecx,0xffffffff
c000345f:	89 da                	mov    edx,ebx
c0003461:	89 f0                	mov    eax,esi
c0003463:	e8 a4 f9 ff ff       	call   c0002e0c <put_fat>
c0003468:	85 c0                	test   eax,eax
c000346a:	75 32                	jne    c000349e <create_chain+0x19f>
c000346c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003471:	74 11                	je     c0003484 <create_chain+0x185>
c0003473:	89 d9                	mov    ecx,ebx
c0003475:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003479:	89 f0                	mov    eax,esi
c000347b:	e8 8c f9 ff ff       	call   c0002e0c <put_fat>
c0003480:	85 c0                	test   eax,eax
c0003482:	75 1a                	jne    c000349e <create_chain+0x19f>
c0003484:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003487:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000348a:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000348d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003490:	39 d0                	cmp    eax,edx
c0003492:	77 04                	ja     c0003498 <create_chain+0x199>
c0003494:	48                   	dec    eax
c0003495:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003498:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000349c:	eb 56                	jmp    c00034f4 <create_chain+0x1f5>
c000349e:	48                   	dec    eax
c000349f:	0f 85 8b fe ff ff    	jne    c0003330 <create_chain+0x31>
c00034a5:	83 cb ff             	or     ebx,0xffffffff
c00034a8:	eb 4a                	jmp    c00034f4 <create_chain+0x1f5>
c00034aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034ae:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00034b1:	41                   	inc    ecx
c00034b2:	39 d9                	cmp    ecx,ebx
c00034b4:	75 19                	jne    c00034cf <create_chain+0x1d0>
c00034b6:	b9 02 00 00 00       	mov    ecx,0x2
c00034bb:	85 d2                	test   edx,edx
c00034bd:	74 03                	je     c00034c2 <create_chain+0x1c3>
c00034bf:	8d 4a 01             	lea    ecx,[edx+0x1]
c00034c2:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00034c5:	85 c0                	test   eax,eax
c00034c7:	0f 85 63 fe ff ff    	jne    c0003330 <create_chain+0x31>
c00034cd:	eb b5                	jmp    c0003484 <create_chain+0x185>
c00034cf:	85 d2                	test   edx,edx
c00034d1:	75 07                	jne    c00034da <create_chain+0x1db>
c00034d3:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034da:	89 d9                	mov    ecx,ebx
c00034dc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00034e0:	89 e8                	mov    eax,ebp
c00034e2:	e8 bb fa ff ff       	call   c0002fa2 <fill_last_frag>
c00034e7:	85 c0                	test   eax,eax
c00034e9:	75 b3                	jne    c000349e <create_chain+0x19f>
c00034eb:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034f2:	eb 90                	jmp    c0003484 <create_chain+0x185>
c00034f4:	83 c4 1c             	add    esp,0x1c
c00034f7:	89 d8                	mov    eax,ebx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    

c00034fe <remove_chain>:
c00034fe:	55                   	push   ebp
c00034ff:	57                   	push   edi
c0003500:	56                   	push   esi
c0003501:	53                   	push   ebx
c0003502:	83 ec 1c             	sub    esp,0x1c
c0003505:	83 fa 01             	cmp    edx,0x1
c0003508:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000350c:	8b 18                	mov    ebx,DWORD PTR [eax]
c000350e:	77 0a                	ja     c000351a <remove_chain+0x1c>
c0003510:	b8 02 00 00 00       	mov    eax,0x2
c0003515:	e9 24 01 00 00       	jmp    c000363e <remove_chain+0x140>
c000351a:	89 d6                	mov    esi,edx
c000351c:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c000351f:	76 ef                	jbe    c0003510 <remove_chain+0x12>
c0003521:	89 c7                	mov    edi,eax
c0003523:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003528:	75 06                	jne    c0003530 <remove_chain+0x32>
c000352a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000352e:	eb 54                	jmp    c0003584 <remove_chain+0x86>
c0003530:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003533:	75 06                	jne    c000353b <remove_chain+0x3d>
c0003535:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c0003539:	74 ef                	je     c000352a <remove_chain+0x2c>
c000353b:	83 c9 ff             	or     ecx,0xffffffff
c000353e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003542:	89 d8                	mov    eax,ebx
c0003544:	e8 c3 f8 ff ff       	call   c0002e0c <put_fat>
c0003549:	85 c0                	test   eax,eax
c000354b:	74 dd                	je     c000352a <remove_chain+0x2c>
c000354d:	e9 ec 00 00 00       	jmp    c000363e <remove_chain+0x140>
c0003552:	83 f8 01             	cmp    eax,0x1
c0003555:	74 b9                	je     c0003510 <remove_chain+0x12>
c0003557:	83 f8 ff             	cmp    eax,0xffffffff
c000355a:	74 6d                	je     c00035c9 <remove_chain+0xcb>
c000355c:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000355f:	75 6f                	jne    c00035d0 <remove_chain+0xd2>
c0003561:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003564:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003567:	8d 51 fe             	lea    edx,[ecx-0x2]
c000356a:	39 d0                	cmp    eax,edx
c000356c:	73 08                	jae    c0003576 <remove_chain+0x78>
c000356e:	40                   	inc    eax
c000356f:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003573:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003576:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003579:	39 e9                	cmp    ecx,ebp
c000357b:	75 64                	jne    c00035e1 <remove_chain+0xe3>
c000357d:	89 ee                	mov    esi,ebp
c000357f:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003582:	76 0f                	jbe    c0003593 <remove_chain+0x95>
c0003584:	89 f2                	mov    edx,esi
c0003586:	89 f8                	mov    eax,edi
c0003588:	e8 84 fa ff ff       	call   c0003011 <get_fat>
c000358d:	89 c5                	mov    ebp,eax
c000358f:	85 c0                	test   eax,eax
c0003591:	75 bf                	jne    c0003552 <remove_chain+0x54>
c0003593:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003596:	0f 85 a0 00 00 00    	jne    c000363c <remove_chain+0x13e>
c000359c:	eb 6c                	jmp    c000360a <remove_chain+0x10c>
c000359e:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c00035a1:	84 c0                	test   al,al
c00035a3:	75 7d                	jne    c0003622 <remove_chain+0x124>
c00035a5:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00035a8:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c00035ac:	0f 84 86 00 00 00    	je     c0003638 <remove_chain+0x13a>
c00035b2:	89 da                	mov    edx,ebx
c00035b4:	89 f8                	mov    eax,edi
c00035b6:	e8 56 fa ff ff       	call   c0003011 <get_fat>
c00035bb:	83 f8 01             	cmp    eax,0x1
c00035be:	0f 86 4c ff ff ff    	jbe    c0003510 <remove_chain+0x12>
c00035c4:	83 f8 ff             	cmp    eax,0xffffffff
c00035c7:	75 4e                	jne    c0003617 <remove_chain+0x119>
c00035c9:	b8 01 00 00 00       	mov    eax,0x1
c00035ce:	eb 6e                	jmp    c000363e <remove_chain+0x140>
c00035d0:	31 c9                	xor    ecx,ecx
c00035d2:	89 f2                	mov    edx,esi
c00035d4:	89 d8                	mov    eax,ebx
c00035d6:	e8 31 f8 ff ff       	call   c0002e0c <put_fat>
c00035db:	85 c0                	test   eax,eax
c00035dd:	74 82                	je     c0003561 <remove_chain+0x63>
c00035df:	eb 5d                	jmp    c000363e <remove_chain+0x140>
c00035e1:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00035e4:	75 1b                	jne    c0003601 <remove_chain+0x103>
c00035e6:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035ea:	89 d8                	mov    eax,ebx
c00035ec:	83 ec 0c             	sub    esp,0xc
c00035ef:	6a 00                	push   0x0
c00035f1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035f5:	e8 5d f7 ff ff       	call   c0002d57 <change_bitmap>
c00035fa:	83 c4 10             	add    esp,0x10
c00035fd:	85 c0                	test   eax,eax
c00035ff:	75 3d                	jne    c000363e <remove_chain+0x140>
c0003601:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003605:	e9 73 ff ff ff       	jmp    c000357d <remove_chain+0x7f>
c000360a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000360f:	75 8d                	jne    c000359e <remove_chain+0xa0>
c0003611:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c0003615:	eb 25                	jmp    c000363c <remove_chain+0x13e>
c0003617:	8d 53 01             	lea    edx,[ebx+0x1]
c000361a:	89 c3                	mov    ebx,eax
c000361c:	39 c2                	cmp    edx,eax
c000361e:	74 88                	je     c00035a8 <remove_chain+0xaa>
c0003620:	eb 1a                	jmp    c000363c <remove_chain+0x13e>
c0003622:	3c 03                	cmp    al,0x3
c0003624:	75 16                	jne    c000363c <remove_chain+0x13e>
c0003626:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0003629:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000362d:	77 0d                	ja     c000363c <remove_chain+0x13e>
c000362f:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003632:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003636:	72 04                	jb     c000363c <remove_chain+0x13e>
c0003638:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c000363c:	31 c0                	xor    eax,eax
c000363e:	83 c4 1c             	add    esp,0x1c
c0003641:	5b                   	pop    ebx
c0003642:	5e                   	pop    esi
c0003643:	5f                   	pop    edi
c0003644:	5d                   	pop    ebp
c0003645:	c3                   	ret    

c0003646 <dir_clear>:
c0003646:	55                   	push   ebp
c0003647:	57                   	push   edi
c0003648:	56                   	push   esi
c0003649:	89 c6                	mov    esi,eax
c000364b:	53                   	push   ebx
c000364c:	83 ec 1c             	sub    esp,0x1c
c000364f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003653:	e8 9d ed ff ff       	call   c00023f5 <sync_window>
c0003658:	85 c0                	test   eax,eax
c000365a:	0f 85 de 00 00 00    	jne    c000373e <dir_clear+0xf8>
c0003660:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003664:	89 f0                	mov    eax,esi
c0003666:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003669:	e8 d6 e8 ff ff       	call   c0001f44 <clst2sect>
c000366e:	b9 00 02 00 00       	mov    ecx,0x200
c0003673:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003677:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000367b:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000367e:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003681:	89 e8                	mov    eax,ebp
c0003683:	31 d2                	xor    edx,edx
c0003685:	e8 b5 e6 ff ff       	call   c0001d3f <mem_set>
c000368a:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000368e:	c1 e3 09             	shl    ebx,0x9
c0003691:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003697:	76 1f                	jbe    c00036b8 <dir_clear+0x72>
c0003699:	bb 00 80 00 00       	mov    ebx,0x8000
c000369e:	eb 18                	jmp    c00036b8 <dir_clear+0x72>
c00036a0:	83 ec 0c             	sub    esp,0xc
c00036a3:	53                   	push   ebx
c00036a4:	e8 35 4e 00 00       	call   c00084de <ff_memalloc>
c00036a9:	83 c4 10             	add    esp,0x10
c00036ac:	89 c7                	mov    edi,eax
c00036ae:	85 c0                	test   eax,eax
c00036b0:	0f 85 8f 00 00 00    	jne    c0003745 <dir_clear+0xff>
c00036b6:	d1 eb                	shr    ebx,1
c00036b8:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00036be:	77 e0                	ja     c00036a0 <dir_clear+0x5a>
c00036c0:	31 db                	xor    ebx,ebx
c00036c2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036c6:	39 d8                	cmp    eax,ebx
c00036c8:	76 66                	jbe    c0003730 <dir_clear+0xea>
c00036ca:	83 ec 0c             	sub    esp,0xc
c00036cd:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036d1:	6a 01                	push   0x1
c00036d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00036d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00036db:	55                   	push   ebp
c00036dc:	50                   	push   eax
c00036dd:	e8 94 e5 ff ff       	call   c0001c76 <disk_write>
c00036e2:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00036e7:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036ec:	83 c4 20             	add    esp,0x20
c00036ef:	85 c0                	test   eax,eax
c00036f1:	75 3d                	jne    c0003730 <dir_clear+0xea>
c00036f3:	43                   	inc    ebx
c00036f4:	eb cc                	jmp    c00036c2 <dir_clear+0x7c>
c00036f6:	83 ec 0c             	sub    esp,0xc
c00036f9:	31 d2                	xor    edx,edx
c00036fb:	55                   	push   ebp
c00036fc:	89 d8                	mov    eax,ebx
c00036fe:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003702:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0003706:	52                   	push   edx
c0003707:	50                   	push   eax
c0003708:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000370c:	57                   	push   edi
c000370d:	50                   	push   eax
c000370e:	e8 63 e5 ff ff       	call   c0001c76 <disk_write>
c0003713:	83 c4 20             	add    esp,0x20
c0003716:	85 c0                	test   eax,eax
c0003718:	75 0a                	jne    c0003724 <dir_clear+0xde>
c000371a:	01 eb                	add    ebx,ebp
c000371c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003720:	39 d8                	cmp    eax,ebx
c0003722:	77 d2                	ja     c00036f6 <dir_clear+0xb0>
c0003724:	83 ec 0c             	sub    esp,0xc
c0003727:	57                   	push   edi
c0003728:	e8 c7 4d 00 00       	call   c00084f4 <ff_memfree>
c000372d:	83 c4 10             	add    esp,0x10
c0003730:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003734:	39 d8                	cmp    eax,ebx
c0003736:	0f 95 c0             	setne  al
c0003739:	0f b6 c0             	movzx  eax,al
c000373c:	eb 19                	jmp    c0003757 <dir_clear+0x111>
c000373e:	b8 01 00 00 00       	mov    eax,0x1
c0003743:	eb 12                	jmp    c0003757 <dir_clear+0x111>
c0003745:	89 d9                	mov    ecx,ebx
c0003747:	31 d2                	xor    edx,edx
c0003749:	c1 eb 09             	shr    ebx,0x9
c000374c:	e8 ee e5 ff ff       	call   c0001d3f <mem_set>
c0003751:	89 dd                	mov    ebp,ebx
c0003753:	31 db                	xor    ebx,ebx
c0003755:	eb c5                	jmp    c000371c <dir_clear+0xd6>
c0003757:	83 c4 1c             	add    esp,0x1c
c000375a:	5b                   	pop    ebx
c000375b:	5e                   	pop    esi
c000375c:	5f                   	pop    edi
c000375d:	5d                   	pop    ebp
c000375e:	c3                   	ret    

c000375f <dir_next>:
c000375f:	55                   	push   ebp
c0003760:	57                   	push   edi
c0003761:	56                   	push   esi
c0003762:	53                   	push   ebx
c0003763:	89 c3                	mov    ebx,eax
c0003765:	83 ec 1c             	sub    esp,0x1c
c0003768:	8b 28                	mov    ebp,DWORD PTR [eax]
c000376a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000376e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003771:	8d 78 20             	lea    edi,[eax+0x20]
c0003774:	31 c0                	xor    eax,eax
c0003776:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000377a:	0f 94 c0             	sete   al
c000377d:	48                   	dec    eax
c000377e:	25 00 00 20 f0       	and    eax,0xf0200000
c0003783:	05 00 00 00 10       	add    eax,0x10000000
c0003788:	39 f8                	cmp    eax,edi
c000378a:	77 0e                	ja     c000379a <dir_next+0x3b>
c000378c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003793:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000379a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000379d:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037a0:	b8 04 00 00 00       	mov    eax,0x4
c00037a5:	89 ce                	mov    esi,ecx
c00037a7:	09 d6                	or     esi,edx
c00037a9:	0f 84 da 00 00 00    	je     c0003889 <dir_next+0x12a>
c00037af:	89 f8                	mov    eax,edi
c00037b1:	25 ff 01 00 00       	and    eax,0x1ff
c00037b6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037ba:	0f 85 b9 00 00 00    	jne    c0003879 <dir_next+0x11a>
c00037c0:	83 c2 01             	add    edx,0x1
c00037c3:	83 d1 00             	adc    ecx,0x0
c00037c6:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00037c9:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00037cc:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037cf:	85 d2                	test   edx,edx
c00037d1:	75 29                	jne    c00037fc <dir_next+0x9d>
c00037d3:	89 fa                	mov    edx,edi
c00037d5:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037d9:	c1 ea 05             	shr    edx,0x5
c00037dc:	39 c2                	cmp    edx,eax
c00037de:	0f 82 95 00 00 00    	jb     c0003879 <dir_next+0x11a>
c00037e4:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037eb:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037f2:	b8 04 00 00 00       	mov    eax,0x4
c00037f7:	e9 8d 00 00 00       	jmp    c0003889 <dir_next+0x12a>
c00037fc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003800:	89 f9                	mov    ecx,edi
c0003802:	48                   	dec    eax
c0003803:	c1 e9 09             	shr    ecx,0x9
c0003806:	85 c8                	test   eax,ecx
c0003808:	75 6f                	jne    c0003879 <dir_next+0x11a>
c000380a:	89 d8                	mov    eax,ebx
c000380c:	e8 00 f8 ff ff       	call   c0003011 <get_fat>
c0003811:	89 c6                	mov    esi,eax
c0003813:	83 f8 01             	cmp    eax,0x1
c0003816:	77 07                	ja     c000381f <dir_next+0xc0>
c0003818:	b8 02 00 00 00       	mov    eax,0x2
c000381d:	eb 6a                	jmp    c0003889 <dir_next+0x12a>
c000381f:	83 f8 ff             	cmp    eax,0xffffffff
c0003822:	75 07                	jne    c000382b <dir_next+0xcc>
c0003824:	b8 01 00 00 00       	mov    eax,0x1
c0003829:	eb 5e                	jmp    c0003889 <dir_next+0x12a>
c000382b:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c000382e:	77 37                	ja     c0003867 <dir_next+0x108>
c0003830:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003835:	74 ad                	je     c00037e4 <dir_next+0x85>
c0003837:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000383a:	89 d8                	mov    eax,ebx
c000383c:	e8 be fa ff ff       	call   c00032ff <create_chain>
c0003841:	89 c6                	mov    esi,eax
c0003843:	b8 07 00 00 00       	mov    eax,0x7
c0003848:	85 f6                	test   esi,esi
c000384a:	74 3d                	je     c0003889 <dir_next+0x12a>
c000384c:	83 fe 01             	cmp    esi,0x1
c000384f:	74 c7                	je     c0003818 <dir_next+0xb9>
c0003851:	83 fe ff             	cmp    esi,0xffffffff
c0003854:	74 ce                	je     c0003824 <dir_next+0xc5>
c0003856:	89 f2                	mov    edx,esi
c0003858:	89 e8                	mov    eax,ebp
c000385a:	e8 e7 fd ff ff       	call   c0003646 <dir_clear>
c000385f:	85 c0                	test   eax,eax
c0003861:	75 c1                	jne    c0003824 <dir_next+0xc5>
c0003863:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003867:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000386a:	89 f2                	mov    edx,esi
c000386c:	89 e8                	mov    eax,ebp
c000386e:	e8 d1 e6 ff ff       	call   c0001f44 <clst2sect>
c0003873:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003876:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003879:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000387d:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003880:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003884:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003887:	31 c0                	xor    eax,eax
c0003889:	83 c4 1c             	add    esp,0x1c
c000388c:	5b                   	pop    ebx
c000388d:	5e                   	pop    esi
c000388e:	5f                   	pop    edi
c000388f:	5d                   	pop    ebp
c0003890:	c3                   	ret    

c0003891 <load_xdir>:
c0003891:	55                   	push   ebp
c0003892:	57                   	push   edi
c0003893:	56                   	push   esi
c0003894:	89 c6                	mov    esi,eax
c0003896:	53                   	push   ebx
c0003897:	83 ec 1c             	sub    esp,0x1c
c000389a:	8b 00                	mov    eax,DWORD PTR [eax]
c000389c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000389f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00038a2:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038a5:	e8 df eb ff ff       	call   c0002489 <move_window>
c00038aa:	89 c3                	mov    ebx,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 0c 01 00 00    	jne    c00039c0 <load_xdir+0x12f>
c00038b4:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038b7:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c00038ba:	0f 85 fb 00 00 00    	jne    c00039bb <load_xdir+0x12a>
c00038c0:	89 f8                	mov    eax,edi
c00038c2:	b9 20 00 00 00       	mov    ecx,0x20
c00038c7:	e8 5e e4 ff ff       	call   c0001d2a <mem_cpy>
c00038cc:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00038d0:	40                   	inc    eax
c00038d1:	c1 e0 05             	shl    eax,0x5
c00038d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038d8:	83 e8 60             	sub    eax,0x60
c00038db:	3d 00 02 00 00       	cmp    eax,0x200
c00038e0:	0f 87 d5 00 00 00    	ja     c00039bb <load_xdir+0x12a>
c00038e6:	31 d2                	xor    edx,edx
c00038e8:	89 f0                	mov    eax,esi
c00038ea:	e8 70 fe ff ff       	call   c000375f <dir_next>
c00038ef:	89 c3                	mov    ebx,eax
c00038f1:	83 f8 04             	cmp    eax,0x4
c00038f4:	0f 84 c1 00 00 00    	je     c00039bb <load_xdir+0x12a>
c00038fa:	85 c0                	test   eax,eax
c00038fc:	0f 85 be 00 00 00    	jne    c00039c0 <load_xdir+0x12f>
c0003902:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003905:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003908:	8b 06                	mov    eax,DWORD PTR [esi]
c000390a:	e8 7a eb ff ff       	call   c0002489 <move_window>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	85 c0                	test   eax,eax
c0003913:	0f 85 a7 00 00 00    	jne    c00039c0 <load_xdir+0x12f>
c0003919:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000391c:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c000391f:	0f 85 96 00 00 00    	jne    c00039bb <load_xdir+0x12a>
c0003925:	8d 47 20             	lea    eax,[edi+0x20]
c0003928:	b9 20 00 00 00       	mov    ecx,0x20
c000392d:	e8 f8 e3 ff ff       	call   c0001d2a <mem_cpy>
c0003932:	31 d2                	xor    edx,edx
c0003934:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c0003938:	b9 0f 00 00 00       	mov    ecx,0xf
c000393d:	83 c0 2c             	add    eax,0x2c
c0003940:	f7 f1                	div    ecx
c0003942:	c1 e0 05             	shl    eax,0x5
c0003945:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003949:	77 70                	ja     c00039bb <load_xdir+0x12a>
c000394b:	bd 40 00 00 00       	mov    ebp,0x40
c0003950:	31 d2                	xor    edx,edx
c0003952:	89 f0                	mov    eax,esi
c0003954:	e8 06 fe ff ff       	call   c000375f <dir_next>
c0003959:	89 c3                	mov    ebx,eax
c000395b:	83 f8 04             	cmp    eax,0x4
c000395e:	74 5b                	je     c00039bb <load_xdir+0x12a>
c0003960:	85 c0                	test   eax,eax
c0003962:	75 5c                	jne    c00039c0 <load_xdir+0x12f>
c0003964:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003967:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000396a:	8b 06                	mov    eax,DWORD PTR [esi]
c000396c:	e8 18 eb ff ff       	call   c0002489 <move_window>
c0003971:	89 c3                	mov    ebx,eax
c0003973:	85 c0                	test   eax,eax
c0003975:	75 49                	jne    c00039c0 <load_xdir+0x12f>
c0003977:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000397a:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000397d:	75 3c                	jne    c00039bb <load_xdir+0x12a>
c000397f:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003985:	77 0d                	ja     c0003994 <load_xdir+0x103>
c0003987:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000398a:	b9 20 00 00 00       	mov    ecx,0x20
c000398f:	e8 96 e3 ff ff       	call   c0001d2a <mem_cpy>
c0003994:	83 c5 20             	add    ebp,0x20
c0003997:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000399b:	77 b3                	ja     c0003950 <load_xdir+0xbf>
c000399d:	81 fd 60 02 00 00    	cmp    ebp,0x260
c00039a3:	77 1b                	ja     c00039c0 <load_xdir+0x12f>
c00039a5:	89 f8                	mov    eax,edi
c00039a7:	e8 cd e7 ff ff       	call   c0002179 <xdir_sum>
c00039ac:	89 c1                	mov    ecx,eax
c00039ae:	8d 47 02             	lea    eax,[edi+0x2]
c00039b1:	e8 f5 e2 ff ff       	call   c0001cab <ld_word>
c00039b6:	66 39 c1             	cmp    cx,ax
c00039b9:	74 05                	je     c00039c0 <load_xdir+0x12f>
c00039bb:	bb 02 00 00 00       	mov    ebx,0x2
c00039c0:	83 c4 1c             	add    esp,0x1c
c00039c3:	89 d8                	mov    eax,ebx
c00039c5:	5b                   	pop    ebx
c00039c6:	5e                   	pop    esi
c00039c7:	5f                   	pop    edi
c00039c8:	5d                   	pop    ebp
c00039c9:	c3                   	ret    

c00039ca <load_obj_xdir>:
c00039ca:	53                   	push   ebx
c00039cb:	89 c3                	mov    ebx,eax
c00039cd:	83 ec 08             	sub    esp,0x8
c00039d0:	8b 02                	mov    eax,DWORD PTR [edx]
c00039d2:	89 03                	mov    DWORD PTR [ebx],eax
c00039d4:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00039d7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00039da:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039dd:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00039e0:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00039e3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039ea:	30 c0                	xor    al,al
c00039ec:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039f3:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039f6:	89 d8                	mov    eax,ebx
c00039f8:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039fb:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039fe:	e8 04 f8 ff ff       	call   c0003207 <dir_sdi>
c0003a03:	85 c0                	test   eax,eax
c0003a05:	75 0b                	jne    c0003a12 <load_obj_xdir+0x48>
c0003a07:	89 d8                	mov    eax,ebx
c0003a09:	83 c4 08             	add    esp,0x8
c0003a0c:	5b                   	pop    ebx
c0003a0d:	e9 7f fe ff ff       	jmp    c0003891 <load_xdir>
c0003a12:	83 c4 08             	add    esp,0x8
c0003a15:	5b                   	pop    ebx
c0003a16:	c3                   	ret    

c0003a17 <dir_read>:
c0003a17:	55                   	push   ebp
c0003a18:	bd 04 00 00 00       	mov    ebp,0x4
c0003a1d:	57                   	push   edi
c0003a1e:	56                   	push   esi
c0003a1f:	be ff ff ff ff       	mov    esi,0xffffffff
c0003a24:	53                   	push   ebx
c0003a25:	89 c3                	mov    ebx,eax
c0003a27:	83 ec 1c             	sub    esp,0x1c
c0003a2a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003a2e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a30:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003a35:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a38:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a3b:	89 c8                	mov    eax,ecx
c0003a3d:	09 d0                	or     eax,edx
c0003a3f:	0f 84 25 01 00 00    	je     c0003b6a <dir_read+0x153>
c0003a45:	89 f8                	mov    eax,edi
c0003a47:	e8 3d ea ff ff       	call   c0002489 <move_window>
c0003a4c:	89 c5                	mov    ebp,eax
c0003a4e:	85 c0                	test   eax,eax
c0003a50:	0f 85 23 01 00 00    	jne    c0003b79 <dir_read+0x162>
c0003a56:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a59:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a5b:	84 c9                	test   cl,cl
c0003a5d:	0f 84 11 01 00 00    	je     c0003b74 <dir_read+0x15d>
c0003a63:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a66:	75 48                	jne    c0003ab0 <dir_read+0x99>
c0003a68:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a6d:	74 10                	je     c0003a7f <dir_read+0x68>
c0003a6f:	80 f9 83             	cmp    cl,0x83
c0003a72:	0f 85 dd 00 00 00    	jne    c0003b55 <dir_read+0x13e>
c0003a78:	31 ed                	xor    ebp,ebp
c0003a7a:	e9 08 01 00 00       	jmp    c0003b87 <dir_read+0x170>
c0003a7f:	80 f9 85             	cmp    cl,0x85
c0003a82:	0f 85 cd 00 00 00    	jne    c0003b55 <dir_read+0x13e>
c0003a88:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a8b:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a8e:	89 d8                	mov    eax,ebx
c0003a90:	e8 fc fd ff ff       	call   c0003891 <load_xdir>
c0003a95:	89 c5                	mov    ebp,eax
c0003a97:	85 c0                	test   eax,eax
c0003a99:	0f 85 da 00 00 00    	jne    c0003b79 <dir_read+0x162>
c0003a9f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003aa2:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003aa5:	83 e0 3f             	and    eax,0x3f
c0003aa8:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003aab:	e9 d7 00 00 00       	jmp    c0003b87 <dir_read+0x170>
c0003ab0:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003ab3:	83 e0 3f             	and    eax,0x3f
c0003ab6:	80 f9 2e             	cmp    cl,0x2e
c0003ab9:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003abd:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ac0:	0f 84 8a 00 00 00    	je     c0003b50 <dir_read+0x139>
c0003ac6:	80 f9 e5             	cmp    cl,0xe5
c0003ac9:	0f 84 81 00 00 00    	je     c0003b50 <dir_read+0x139>
c0003acf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ad3:	83 e0 1f             	and    eax,0x1f
c0003ad6:	83 f8 08             	cmp    eax,0x8
c0003ad9:	0f 94 c0             	sete   al
c0003adc:	0f b6 c0             	movzx  eax,al
c0003adf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003ae3:	75 6b                	jne    c0003b50 <dir_read+0x139>
c0003ae5:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aea:	75 44                	jne    c0003b30 <dir_read+0x119>
c0003aec:	f6 c1 40             	test   cl,0x40
c0003aef:	74 12                	je     c0003b03 <dir_read+0xec>
c0003af1:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003af4:	83 e1 bf             	and    ecx,0xffffffbf
c0003af7:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003afb:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003afe:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003b01:	eb 06                	jmp    c0003b09 <dir_read+0xf2>
c0003b03:	89 f0                	mov    eax,esi
c0003b05:	38 c8                	cmp    al,cl
c0003b07:	75 47                	jne    c0003b50 <dir_read+0x139>
c0003b09:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003b0d:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b12:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003b15:	75 3e                	jne    c0003b55 <dir_read+0x13e>
c0003b17:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003b1b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b1e:	e8 8a e4 ff ff       	call   c0001fad <pick_lfn>
c0003b23:	85 c0                	test   eax,eax
c0003b25:	74 2e                	je     c0003b55 <dir_read+0x13e>
c0003b27:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003b2b:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003b2e:	eb 25                	jmp    c0003b55 <dir_read+0x13e>
c0003b30:	89 f0                	mov    eax,esi
c0003b32:	84 c0                	test   al,al
c0003b34:	75 11                	jne    c0003b47 <dir_read+0x130>
c0003b36:	89 d0                	mov    eax,edx
c0003b38:	e8 2a e6 ff ff       	call   c0002167 <sum_sfn>
c0003b3d:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003b41:	0f 84 31 ff ff ff    	je     c0003a78 <dir_read+0x61>
c0003b47:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b4e:	eb 37                	jmp    c0003b87 <dir_read+0x170>
c0003b50:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b55:	31 d2                	xor    edx,edx
c0003b57:	89 d8                	mov    eax,ebx
c0003b59:	e8 01 fc ff ff       	call   c000375f <dir_next>
c0003b5e:	89 c5                	mov    ebp,eax
c0003b60:	85 c0                	test   eax,eax
c0003b62:	0f 84 cd fe ff ff    	je     c0003a35 <dir_read+0x1e>
c0003b68:	eb 0f                	jmp    c0003b79 <dir_read+0x162>
c0003b6a:	85 ed                	test   ebp,ebp
c0003b6c:	0f 84 06 ff ff ff    	je     c0003a78 <dir_read+0x61>
c0003b72:	eb 05                	jmp    c0003b79 <dir_read+0x162>
c0003b74:	bd 04 00 00 00       	mov    ebp,0x4
c0003b79:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b80:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b87:	83 c4 1c             	add    esp,0x1c
c0003b8a:	89 e8                	mov    eax,ebp
c0003b8c:	5b                   	pop    ebx
c0003b8d:	5e                   	pop    esi
c0003b8e:	5f                   	pop    edi
c0003b8f:	5d                   	pop    ebp
c0003b90:	c3                   	ret    

c0003b91 <dir_alloc>:
c0003b91:	55                   	push   ebp
c0003b92:	89 d5                	mov    ebp,edx
c0003b94:	57                   	push   edi
c0003b95:	31 d2                	xor    edx,edx
c0003b97:	56                   	push   esi
c0003b98:	53                   	push   ebx
c0003b99:	89 c3                	mov    ebx,eax
c0003b9b:	83 ec 0c             	sub    esp,0xc
c0003b9e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003ba0:	e8 62 f6 ff ff       	call   c0003207 <dir_sdi>
c0003ba5:	85 c0                	test   eax,eax
c0003ba7:	75 4e                	jne    c0003bf7 <dir_alloc+0x66>
c0003ba9:	31 f6                	xor    esi,esi
c0003bab:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003bae:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 d1 e8 ff ff       	call   c0002489 <move_window>
c0003bb8:	85 c0                	test   eax,eax
c0003bba:	75 3b                	jne    c0003bf7 <dir_alloc+0x66>
c0003bbc:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003bbf:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003bc2:	8a 12                	mov    dl,BYTE PTR [edx]
c0003bc4:	75 07                	jne    c0003bcd <dir_alloc+0x3c>
c0003bc6:	f7 d2                	not    edx
c0003bc8:	c0 ea 07             	shr    dl,0x7
c0003bcb:	eb 0d                	jmp    c0003bda <dir_alloc+0x49>
c0003bcd:	84 d2                	test   dl,dl
c0003bcf:	0f 94 c1             	sete   cl
c0003bd2:	80 fa e5             	cmp    dl,0xe5
c0003bd5:	0f 94 c2             	sete   dl
c0003bd8:	09 ca                	or     edx,ecx
c0003bda:	84 d2                	test   dl,dl
c0003bdc:	74 07                	je     c0003be5 <dir_alloc+0x54>
c0003bde:	46                   	inc    esi
c0003bdf:	39 ee                	cmp    esi,ebp
c0003be1:	75 04                	jne    c0003be7 <dir_alloc+0x56>
c0003be3:	eb 1c                	jmp    c0003c01 <dir_alloc+0x70>
c0003be5:	31 f6                	xor    esi,esi
c0003be7:	ba 01 00 00 00       	mov    edx,0x1
c0003bec:	89 d8                	mov    eax,ebx
c0003bee:	e8 6c fb ff ff       	call   c000375f <dir_next>
c0003bf3:	85 c0                	test   eax,eax
c0003bf5:	74 b4                	je     c0003bab <dir_alloc+0x1a>
c0003bf7:	83 f8 04             	cmp    eax,0x4
c0003bfa:	75 05                	jne    c0003c01 <dir_alloc+0x70>
c0003bfc:	b8 07 00 00 00       	mov    eax,0x7
c0003c01:	83 c4 0c             	add    esp,0xc
c0003c04:	5b                   	pop    ebx
c0003c05:	5e                   	pop    esi
c0003c06:	5f                   	pop    edi
c0003c07:	5d                   	pop    ebp
c0003c08:	c3                   	ret    

c0003c09 <store_xdir>:
c0003c09:	55                   	push   ebp
c0003c0a:	57                   	push   edi
c0003c0b:	89 c7                	mov    edi,eax
c0003c0d:	56                   	push   esi
c0003c0e:	53                   	push   ebx
c0003c0f:	83 ec 0c             	sub    esp,0xc
c0003c12:	8b 00                	mov    eax,DWORD PTR [eax]
c0003c14:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003c17:	89 e8                	mov    eax,ebp
c0003c19:	e8 5b e5 ff ff       	call   c0002179 <xdir_sum>
c0003c1e:	0f b7 d0             	movzx  edx,ax
c0003c21:	8d 45 02             	lea    eax,[ebp+0x2]
c0003c24:	e8 f4 e0 ff ff       	call   c0001d1d <st_word>
c0003c29:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003c2d:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003c30:	89 f8                	mov    eax,edi
c0003c32:	e8 d0 f5 ff ff       	call   c0003207 <dir_sdi>
c0003c37:	89 c6                	mov    esi,eax
c0003c39:	85 f6                	test   esi,esi
c0003c3b:	75 3d                	jne    c0003c7a <store_xdir+0x71>
c0003c3d:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003c40:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003c43:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c45:	e8 3f e8 ff ff       	call   c0002489 <move_window>
c0003c4a:	89 c6                	mov    esi,eax
c0003c4c:	85 c0                	test   eax,eax
c0003c4e:	75 2a                	jne    c0003c7a <store_xdir+0x71>
c0003c50:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c53:	b9 20 00 00 00       	mov    ecx,0x20
c0003c58:	89 ea                	mov    edx,ebp
c0003c5a:	e8 cb e0 ff ff       	call   c0001d2a <mem_cpy>
c0003c5f:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c61:	85 db                	test   ebx,ebx
c0003c63:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c67:	74 11                	je     c0003c7a <store_xdir+0x71>
c0003c69:	31 d2                	xor    edx,edx
c0003c6b:	89 f8                	mov    eax,edi
c0003c6d:	83 c5 20             	add    ebp,0x20
c0003c70:	e8 ea fa ff ff       	call   c000375f <dir_next>
c0003c75:	4b                   	dec    ebx
c0003c76:	89 c6                	mov    esi,eax
c0003c78:	eb bf                	jmp    c0003c39 <store_xdir+0x30>
c0003c7a:	89 f0                	mov    eax,esi
c0003c7c:	83 fe 02             	cmp    esi,0x2
c0003c7f:	76 05                	jbe    c0003c86 <store_xdir+0x7d>
c0003c81:	b8 02 00 00 00       	mov    eax,0x2
c0003c86:	83 c4 0c             	add    esp,0xc
c0003c89:	5b                   	pop    ebx
c0003c8a:	5e                   	pop    esi
c0003c8b:	5f                   	pop    edi
c0003c8c:	5d                   	pop    ebp
c0003c8d:	c3                   	ret    

c0003c8e <dir_remove>:
c0003c8e:	57                   	push   edi
c0003c8f:	56                   	push   esi
c0003c90:	53                   	push   ebx
c0003c91:	89 c3                	mov    ebx,eax
c0003c93:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c96:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c98:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c9b:	83 fa ff             	cmp    edx,0xffffffff
c0003c9e:	74 09                	je     c0003ca9 <dir_remove+0x1b>
c0003ca0:	e8 62 f5 ff ff       	call   c0003207 <dir_sdi>
c0003ca5:	85 c0                	test   eax,eax
c0003ca7:	75 41                	jne    c0003cea <dir_remove+0x5c>
c0003ca9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003cac:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003caf:	89 f0                	mov    eax,esi
c0003cb1:	e8 d3 e7 ff ff       	call   c0002489 <move_window>
c0003cb6:	85 c0                	test   eax,eax
c0003cb8:	75 26                	jne    c0003ce0 <dir_remove+0x52>
c0003cba:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003cbd:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003cc0:	75 05                	jne    c0003cc7 <dir_remove+0x39>
c0003cc2:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003cc5:	eb 03                	jmp    c0003cca <dir_remove+0x3c>
c0003cc7:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003cca:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003cce:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003cd1:	73 17                	jae    c0003cea <dir_remove+0x5c>
c0003cd3:	31 d2                	xor    edx,edx
c0003cd5:	89 d8                	mov    eax,ebx
c0003cd7:	e8 83 fa ff ff       	call   c000375f <dir_next>
c0003cdc:	85 c0                	test   eax,eax
c0003cde:	74 c9                	je     c0003ca9 <dir_remove+0x1b>
c0003ce0:	83 f8 04             	cmp    eax,0x4
c0003ce3:	75 05                	jne    c0003cea <dir_remove+0x5c>
c0003ce5:	b8 02 00 00 00       	mov    eax,0x2
c0003cea:	5b                   	pop    ebx
c0003ceb:	5e                   	pop    esi
c0003cec:	5f                   	pop    edi
c0003ced:	c3                   	ret    

c0003cee <create_name>:
c0003cee:	55                   	push   ebp
c0003cef:	89 d5                	mov    ebp,edx
c0003cf1:	57                   	push   edi
c0003cf2:	89 c7                	mov    edi,eax
c0003cf4:	56                   	push   esi
c0003cf5:	31 f6                	xor    esi,esi
c0003cf7:	53                   	push   ebx
c0003cf8:	83 ec 3c             	sub    esp,0x3c
c0003cfb:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cfd:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d01:	8b 07                	mov    eax,DWORD PTR [edi]
c0003d03:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003d06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003d0a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003d0e:	e8 72 e0 ff ff       	call   c0001d85 <tchar2uni>
c0003d13:	89 c3                	mov    ebx,eax
c0003d15:	83 f8 ff             	cmp    eax,0xffffffff
c0003d18:	75 0a                	jne    c0003d24 <create_name+0x36>
c0003d1a:	b8 06 00 00 00       	mov    eax,0x6
c0003d1f:	e9 9e 02 00 00       	jmp    c0003fc2 <create_name+0x2d4>
c0003d24:	3d ff ff 00 00       	cmp    eax,0xffff
c0003d29:	76 0c                	jbe    c0003d37 <create_name+0x49>
c0003d2b:	c1 e8 10             	shr    eax,0x10
c0003d2e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003d32:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003d36:	46                   	inc    esi
c0003d37:	66 83 fb 1f          	cmp    bx,0x1f
c0003d3b:	76 4f                	jbe    c0003d8c <create_name+0x9e>
c0003d3d:	66 83 fb 5c          	cmp    bx,0x5c
c0003d41:	74 35                	je     c0003d78 <create_name+0x8a>
c0003d43:	66 83 fb 2f          	cmp    bx,0x2f
c0003d47:	74 2f                	je     c0003d78 <create_name+0x8a>
c0003d49:	66 83 fb 7f          	cmp    bx,0x7f
c0003d4d:	77 11                	ja     c0003d60 <create_name+0x72>
c0003d4f:	0f b7 d3             	movzx  edx,bx
c0003d52:	b8 d2 f7 01 c0       	mov    eax,0xc001f7d2
c0003d57:	e8 11 e0 ff ff       	call   c0001d6d <chk_chr>
c0003d5c:	85 c0                	test   eax,eax
c0003d5e:	75 ba                	jne    c0003d1a <create_name+0x2c>
c0003d60:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d66:	77 b2                	ja     c0003d1a <create_name+0x2c>
c0003d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6c:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d70:	46                   	inc    esi
c0003d71:	eb 97                	jmp    c0003d0a <create_name+0x1c>
c0003d73:	40                   	inc    eax
c0003d74:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d78:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d7c:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d7e:	80 fa 2f             	cmp    dl,0x2f
c0003d81:	74 f0                	je     c0003d73 <create_name+0x85>
c0003d83:	80 fa 5c             	cmp    dl,0x5c
c0003d86:	74 eb                	je     c0003d73 <create_name+0x85>
c0003d88:	31 db                	xor    ebx,ebx
c0003d8a:	eb 02                	jmp    c0003d8e <create_name+0xa0>
c0003d8c:	b3 04                	mov    bl,0x4
c0003d8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d92:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d95:	85 f6                	test   esi,esi
c0003d97:	74 18                	je     c0003db1 <create_name+0xc3>
c0003d99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d9d:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003da2:	66 83 f8 20          	cmp    ax,0x20
c0003da6:	74 06                	je     c0003dae <create_name+0xc0>
c0003da8:	66 83 f8 2e          	cmp    ax,0x2e
c0003dac:	75 03                	jne    c0003db1 <create_name+0xc3>
c0003dae:	4e                   	dec    esi
c0003daf:	eb e4                	jmp    c0003d95 <create_name+0xa7>
c0003db1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003db5:	31 ed                	xor    ebp,ebp
c0003db7:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003dbd:	85 f6                	test   esi,esi
c0003dbf:	0f 84 55 ff ff ff    	je     c0003d1a <create_name+0x2c>
c0003dc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dc9:	8d 55 01             	lea    edx,[ebp+0x1]
c0003dcc:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003dd0:	66 83 f8 20          	cmp    ax,0x20
c0003dd4:	75 04                	jne    c0003dda <create_name+0xec>
c0003dd6:	89 d5                	mov    ebp,edx
c0003dd8:	eb eb                	jmp    c0003dc5 <create_name+0xd7>
c0003dda:	85 ed                	test   ebp,ebp
c0003ddc:	75 06                	jne    c0003de4 <create_name+0xf6>
c0003dde:	66 83 f8 2e          	cmp    ax,0x2e
c0003de2:	75 08                	jne    c0003dec <create_name+0xfe>
c0003de4:	83 cb 03             	or     ebx,0x3
c0003de7:	eb 03                	jmp    c0003dec <create_name+0xfe>
c0003de9:	4e                   	dec    esi
c0003dea:	74 0c                	je     c0003df8 <create_name+0x10a>
c0003dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003df0:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003df6:	75 f1                	jne    c0003de9 <create_name+0xfb>
c0003df8:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dfd:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003e00:	ba 20 00 00 00       	mov    edx,0x20
c0003e05:	e8 35 df ff ff       	call   c0001d3f <mem_set>
c0003e0a:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003e12:	31 c9                	xor    ecx,ecx
c0003e14:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003e19:	8d 45 01             	lea    eax,[ebp+0x1]
c0003e1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003e24:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003e28:	66 85 ed             	test   bp,bp
c0003e2b:	0f 84 30 01 00 00    	je     c0003f61 <create_name+0x273>
c0003e31:	66 83 fd 20          	cmp    bp,0x20
c0003e35:	74 10                	je     c0003e47 <create_name+0x159>
c0003e37:	66 83 fd 2e          	cmp    bp,0x2e
c0003e3b:	75 13                	jne    c0003e50 <create_name+0x162>
c0003e3d:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e41:	0f 84 6b 01 00 00    	je     c0003fb2 <create_name+0x2c4>
c0003e47:	83 cb 03             	or     ebx,0x3
c0003e4a:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e4e:	eb c9                	jmp    c0003e19 <create_name+0x12b>
c0003e50:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e54:	73 0b                	jae    c0003e61 <create_name+0x173>
c0003e56:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e5a:	75 47                	jne    c0003ea3 <create_name+0x1b5>
c0003e5c:	e9 51 01 00 00       	jmp    c0003fb2 <create_name+0x2c4>
c0003e61:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e66:	75 10                	jne    c0003e78 <create_name+0x18a>
c0003e68:	83 cb 03             	or     ebx,0x3
c0003e6b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e73:	e9 e9 00 00 00       	jmp    c0003f61 <create_name+0x273>
c0003e78:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e7c:	74 0d                	je     c0003e8b <create_name+0x19d>
c0003e7e:	83 cb 03             	or     ebx,0x3
c0003e81:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e85:	0f 87 d6 00 00 00    	ja     c0003f61 <create_name+0x273>
c0003e8b:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e90:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e94:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e9c:	b9 08 00 00 00       	mov    ecx,0x8
c0003ea1:	eb a7                	jmp    c0003e4a <create_name+0x15c>
c0003ea3:	66 83 fd 7f          	cmp    bp,0x7f
c0003ea7:	76 68                	jbe    c0003f11 <create_name+0x223>
c0003ea9:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003ead:	88 da                	mov    dl,bl
c0003eaf:	83 ca 02             	or     edx,0x2
c0003eb2:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003eb6:	50                   	push   eax
c0003eb7:	50                   	push   eax
c0003eb8:	68 b5 01 00 00       	push   0x1b5
c0003ebd:	55                   	push   ebp
c0003ebe:	e8 48 46 00 00       	call   c000850b <ff_uni2oem>
c0003ec3:	83 c4 10             	add    esp,0x10
c0003ec6:	89 c5                	mov    ebp,eax
c0003ec8:	a8 80                	test   al,0x80
c0003eca:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003ece:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ed2:	74 0c                	je     c0003ee0 <create_name+0x1f2>
c0003ed4:	83 e5 7f             	and    ebp,0x7f
c0003ed7:	0f b6 ad 20 f7 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe08e0]
c0003ede:	eb 2a                	jmp    c0003f0a <create_name+0x21c>
c0003ee0:	66 3d ff 00          	cmp    ax,0xff
c0003ee4:	76 24                	jbe    c0003f0a <create_name+0x21c>
c0003ee6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003eea:	48                   	dec    eax
c0003eeb:	39 c8                	cmp    eax,ecx
c0003eed:	77 0c                	ja     c0003efb <create_name+0x20d>
c0003eef:	83 cb 03             	or     ebx,0x3
c0003ef2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ef6:	e9 4f ff ff ff       	jmp    c0003e4a <create_name+0x15c>
c0003efb:	89 e8                	mov    eax,ebp
c0003efd:	88 d3                	mov    bl,dl
c0003eff:	66 c1 e8 08          	shr    ax,0x8
c0003f03:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f07:	41                   	inc    ecx
c0003f08:	eb 4b                	jmp    c0003f55 <create_name+0x267>
c0003f0a:	88 d3                	mov    bl,dl
c0003f0c:	66 85 ed             	test   bp,bp
c0003f0f:	74 19                	je     c0003f2a <create_name+0x23c>
c0003f11:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003f15:	0f b7 d5             	movzx  edx,bp
c0003f18:	b8 db f7 01 c0       	mov    eax,0xc001f7db
c0003f1d:	e8 4b de ff ff       	call   c0001d6d <chk_chr>
c0003f22:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003f26:	85 c0                	test   eax,eax
c0003f28:	74 0a                	je     c0003f34 <create_name+0x246>
c0003f2a:	83 cb 03             	or     ebx,0x3
c0003f2d:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003f32:	eb 21                	jmp    c0003f55 <create_name+0x267>
c0003f34:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003f37:	66 83 f8 19          	cmp    ax,0x19
c0003f3b:	77 07                	ja     c0003f44 <create_name+0x256>
c0003f3d:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003f42:	eb 11                	jmp    c0003f55 <create_name+0x267>
c0003f44:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003f47:	66 83 f8 19          	cmp    ax,0x19
c0003f4b:	77 08                	ja     c0003f55 <create_name+0x267>
c0003f4d:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f52:	83 ed 20             	sub    ebp,0x20
c0003f55:	89 e8                	mov    eax,ebp
c0003f57:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f5b:	41                   	inc    ecx
c0003f5c:	e9 e9 fe ff ff       	jmp    c0003e4a <create_name+0x15c>
c0003f61:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f65:	75 04                	jne    c0003f6b <create_name+0x27d>
c0003f67:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f6b:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f70:	75 05                	jne    c0003f77 <create_name+0x289>
c0003f72:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f77:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f7b:	83 e0 0c             	and    eax,0xc
c0003f7e:	3c 0c                	cmp    al,0xc
c0003f80:	74 0b                	je     c0003f8d <create_name+0x29f>
c0003f82:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f86:	83 e0 03             	and    eax,0x3
c0003f89:	3c 03                	cmp    al,0x3
c0003f8b:	75 05                	jne    c0003f92 <create_name+0x2a4>
c0003f8d:	83 cb 02             	or     ebx,0x2
c0003f90:	eb 19                	jmp    c0003fab <create_name+0x2bd>
c0003f92:	f6 c3 02             	test   bl,0x2
c0003f95:	75 14                	jne    c0003fab <create_name+0x2bd>
c0003f97:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f9c:	74 03                	je     c0003fa1 <create_name+0x2b3>
c0003f9e:	83 cb 10             	or     ebx,0x10
c0003fa1:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003fa6:	74 03                	je     c0003fab <create_name+0x2bd>
c0003fa8:	83 cb 08             	or     ebx,0x8
c0003fab:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003fae:	31 c0                	xor    eax,eax
c0003fb0:	eb 10                	jmp    c0003fc2 <create_name+0x2d4>
c0003fb2:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003fb7:	0f 85 ce fe ff ff    	jne    c0003e8b <create_name+0x19d>
c0003fbd:	e9 a6 fe ff ff       	jmp    c0003e68 <create_name+0x17a>
c0003fc2:	83 c4 3c             	add    esp,0x3c
c0003fc5:	5b                   	pop    ebx
c0003fc6:	5e                   	pop    esi
c0003fc7:	5f                   	pop    edi
c0003fc8:	5d                   	pop    ebp
c0003fc9:	c3                   	ret    

c0003fca <xname_sum>:
c0003fca:	56                   	push   esi
c0003fcb:	53                   	push   ebx
c0003fcc:	89 c6                	mov    esi,eax
c0003fce:	51                   	push   ecx
c0003fcf:	31 db                	xor    ebx,ebx
c0003fd1:	83 c6 02             	add    esi,0x2
c0003fd4:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003fd8:	66 85 c0             	test   ax,ax
c0003fdb:	74 1f                	je     c0003ffc <xname_sum+0x32>
c0003fdd:	83 ec 0c             	sub    esp,0xc
c0003fe0:	66 d1 cb             	ror    bx,1
c0003fe3:	50                   	push   eax
c0003fe4:	e8 1e 46 00 00       	call   c0008607 <ff_wtoupper>
c0003fe9:	83 c4 10             	add    esp,0x10
c0003fec:	0f b6 d0             	movzx  edx,al
c0003fef:	66 c1 e8 08          	shr    ax,0x8
c0003ff3:	01 d3                	add    ebx,edx
c0003ff5:	66 d1 cb             	ror    bx,1
c0003ff8:	01 c3                	add    ebx,eax
c0003ffa:	eb d5                	jmp    c0003fd1 <xname_sum+0x7>
c0003ffc:	89 d8                	mov    eax,ebx
c0003ffe:	5a                   	pop    edx
c0003fff:	5b                   	pop    ebx
c0004000:	5e                   	pop    esi
c0004001:	c3                   	ret    

c0004002 <create_xdir>:
c0004002:	55                   	push   ebp
c0004003:	b9 40 00 00 00       	mov    ecx,0x40
c0004008:	57                   	push   edi
c0004009:	bd 01 00 00 00       	mov    ebp,0x1
c000400e:	56                   	push   esi
c000400f:	31 ff                	xor    edi,edi
c0004011:	53                   	push   ebx
c0004012:	be 40 00 00 00       	mov    esi,0x40
c0004017:	89 c3                	mov    ebx,eax
c0004019:	83 ec 1c             	sub    esp,0x1c
c000401c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0004020:	31 d2                	xor    edx,edx
c0004022:	e8 18 dd ff ff       	call   c0001d3f <mem_set>
c0004027:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c000402a:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c000402e:	31 c9                	xor    ecx,ecx
c0004030:	8d 46 01             	lea    eax,[esi+0x1]
c0004033:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0004037:	83 c6 02             	add    esi,0x2
c000403a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000403e:	66 85 ed             	test   bp,bp
c0004041:	74 12                	je     c0004055 <create_xdir+0x53>
c0004043:	0f b6 c1             	movzx  eax,cl
c0004046:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000404a:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c000404e:	66 83 fd 01          	cmp    bp,0x1
c0004052:	80 d9 ff             	sbb    cl,0xff
c0004055:	8d 04 33             	lea    eax,[ebx+esi*1]
c0004058:	0f b7 d5             	movzx  edx,bp
c000405b:	83 c6 02             	add    esi,0x2
c000405e:	e8 ba dc ff ff       	call   c0001d1d <st_word>
c0004063:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0004069:	75 d3                	jne    c000403e <create_xdir+0x3c>
c000406b:	8d 47 01             	lea    eax,[edi+0x1]
c000406e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004072:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0004076:	0f b6 c1             	movzx  eax,cl
c0004079:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c000407e:	74 07                	je     c0004087 <create_xdir+0x85>
c0004080:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0004085:	eb a9                	jmp    c0004030 <create_xdir+0x2e>
c0004087:	8d 47 02             	lea    eax,[edi+0x2]
c000408a:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c000408d:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004090:	89 d0                	mov    eax,edx
c0004092:	e8 33 ff ff ff       	call   c0003fca <xname_sum>
c0004097:	83 c4 1c             	add    esp,0x1c
c000409a:	0f b7 d0             	movzx  edx,ax
c000409d:	8d 43 24             	lea    eax,[ebx+0x24]
c00040a0:	5b                   	pop    ebx
c00040a1:	5e                   	pop    esi
c00040a2:	5f                   	pop    edi
c00040a3:	5d                   	pop    ebp
c00040a4:	e9 74 dc ff ff       	jmp    c0001d1d <st_word>

c00040a9 <cmp_lfn>:
c00040a9:	55                   	push   ebp
c00040aa:	57                   	push   edi
c00040ab:	89 d7                	mov    edi,edx
c00040ad:	56                   	push   esi
c00040ae:	53                   	push   ebx
c00040af:	83 ec 1c             	sub    esp,0x1c
c00040b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00040b6:	8d 42 1a             	lea    eax,[edx+0x1a]
c00040b9:	e8 ed db ff ff       	call   c0001cab <ld_word>
c00040be:	66 85 c0             	test   ax,ax
c00040c1:	74 07                	je     c00040ca <cmp_lfn+0x21>
c00040c3:	31 c0                	xor    eax,eax
c00040c5:	e9 9a 00 00 00       	jmp    c0004164 <cmp_lfn+0xbb>
c00040ca:	8a 1f                	mov    bl,BYTE PTR [edi]
c00040cc:	bd 01 00 00 00       	mov    ebp,0x1
c00040d1:	83 e3 3f             	and    ebx,0x3f
c00040d4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00040dc:	4b                   	dec    ebx
c00040dd:	6b db 0d             	imul   ebx,ebx,0xd
c00040e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00040e4:	0f b6 80 a0 f7 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0860]
c00040eb:	01 f8                	add    eax,edi
c00040ed:	e8 b9 db ff ff       	call   c0001cab <ld_word>
c00040f2:	66 85 ed             	test   bp,bp
c00040f5:	89 c6                	mov    esi,eax
c00040f7:	74 3c                	je     c0004135 <cmp_lfn+0x8c>
c00040f9:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040ff:	77 c2                	ja     c00040c3 <cmp_lfn+0x1a>
c0004101:	83 ec 0c             	sub    esp,0xc
c0004104:	0f b7 c0             	movzx  eax,ax
c0004107:	50                   	push   eax
c0004108:	e8 fa 44 00 00       	call   c0008607 <ff_wtoupper>
c000410d:	89 c5                	mov    ebp,eax
c000410f:	8d 43 01             	lea    eax,[ebx+0x1]
c0004112:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0004116:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000411a:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c000411e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004121:	e8 e1 44 00 00       	call   c0008607 <ff_wtoupper>
c0004126:	83 c4 10             	add    esp,0x10
c0004129:	39 c5                	cmp    ebp,eax
c000412b:	75 96                	jne    c00040c3 <cmp_lfn+0x1a>
c000412d:	89 f5                	mov    ebp,esi
c000412f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0004133:	eb 04                	jmp    c0004139 <cmp_lfn+0x90>
c0004135:	66 46                	inc    si
c0004137:	75 8a                	jne    c00040c3 <cmp_lfn+0x1a>
c0004139:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c000413d:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0004142:	75 9c                	jne    c00040e0 <cmp_lfn+0x37>
c0004144:	f6 07 40             	test   BYTE PTR [edi],0x40
c0004147:	74 16                	je     c000415f <cmp_lfn+0xb6>
c0004149:	66 85 ed             	test   bp,bp
c000414c:	74 11                	je     c000415f <cmp_lfn+0xb6>
c000414e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004152:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0004157:	0f 94 c0             	sete   al
c000415a:	0f b6 c0             	movzx  eax,al
c000415d:	eb 05                	jmp    c0004164 <cmp_lfn+0xbb>
c000415f:	b8 01 00 00 00       	mov    eax,0x1
c0004164:	83 c4 1c             	add    esp,0x1c
c0004167:	5b                   	pop    ebx
c0004168:	5e                   	pop    esi
c0004169:	5f                   	pop    edi
c000416a:	5d                   	pop    ebp
c000416b:	c3                   	ret    

c000416c <dir_find>:
c000416c:	55                   	push   ebp
c000416d:	31 d2                	xor    edx,edx
c000416f:	57                   	push   edi
c0004170:	56                   	push   esi
c0004171:	53                   	push   ebx
c0004172:	89 c3                	mov    ebx,eax
c0004174:	83 ec 1c             	sub    esp,0x1c
c0004177:	8b 30                	mov    esi,DWORD PTR [eax]
c0004179:	e8 89 f0 ff ff       	call   c0003207 <dir_sdi>
c000417e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004181:	85 c0                	test   eax,eax
c0004183:	0f 85 9e 01 00 00    	jne    c0004327 <dir_find+0x1bb>
c0004189:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000418c:	0f 85 8d 00 00 00    	jne    c000421f <dir_find+0xb3>
c0004192:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004195:	e8 30 fe ff ff       	call   c0003fca <xname_sum>
c000419a:	89 c7                	mov    edi,eax
c000419c:	31 d2                	xor    edx,edx
c000419e:	89 d8                	mov    eax,ebx
c00041a0:	e8 72 f8 ff ff       	call   c0003a17 <dir_read>
c00041a5:	85 c0                	test   eax,eax
c00041a7:	0f 85 5e 01 00 00    	jne    c000430b <dir_find+0x19f>
c00041ad:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00041b0:	8d 41 24             	lea    eax,[ecx+0x24]
c00041b3:	e8 f3 da ff ff       	call   c0001cab <ld_word>
c00041b8:	66 39 f8             	cmp    ax,di
c00041bb:	75 df                	jne    c000419c <dir_find+0x30>
c00041bd:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c00041c0:	31 ed                	xor    ebp,ebp
c00041c2:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00041c6:	ba 40 00 00 00       	mov    edx,0x40
c00041cb:	89 e9                	mov    ecx,ebp
c00041cd:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c00041d1:	0f 84 42 01 00 00    	je     c0004319 <dir_find+0x1ad>
c00041d7:	f6 c2 1f             	test   dl,0x1f
c00041da:	75 03                	jne    c00041df <dir_find+0x73>
c00041dc:	83 c2 02             	add    edx,0x2
c00041df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00041e3:	89 d0                	mov    eax,edx
c00041e5:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00041e8:	e8 be da ff ff       	call   c0001cab <ld_word>
c00041ed:	83 ec 0c             	sub    esp,0xc
c00041f0:	0f b7 c0             	movzx  eax,ax
c00041f3:	50                   	push   eax
c00041f4:	e8 0e 44 00 00       	call   c0008607 <ff_wtoupper>
c00041f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041fd:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004200:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0004204:	89 04 24             	mov    DWORD PTR [esp],eax
c0004207:	e8 fb 43 00 00       	call   c0008607 <ff_wtoupper>
c000420c:	83 c4 10             	add    esp,0x10
c000420f:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0004213:	75 87                	jne    c000419c <dir_find+0x30>
c0004215:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004219:	45                   	inc    ebp
c000421a:	83 c2 02             	add    edx,0x2
c000421d:	eb ac                	jmp    c00041cb <dir_find+0x5f>
c000421f:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004226:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c000422b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004230:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004233:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004236:	89 f0                	mov    eax,esi
c0004238:	e8 4c e2 ff ff       	call   c0002489 <move_window>
c000423d:	85 c0                	test   eax,eax
c000423f:	0f 85 c6 00 00 00    	jne    c000430b <dir_find+0x19f>
c0004245:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0004248:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c000424b:	84 c9                	test   cl,cl
c000424d:	0f 84 bd 00 00 00    	je     c0004310 <dir_find+0x1a4>
c0004253:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0004256:	88 d0                	mov    al,dl
c0004258:	83 e0 3f             	and    eax,0x3f
c000425b:	80 f9 e5             	cmp    cl,0xe5
c000425e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004261:	0f 84 87 00 00 00    	je     c00042ee <dir_find+0x182>
c0004267:	80 e2 08             	and    dl,0x8
c000426a:	74 06                	je     c0004272 <dir_find+0x106>
c000426c:	3c 0f                	cmp    al,0xf
c000426e:	75 7e                	jne    c00042ee <dir_find+0x182>
c0004270:	eb 04                	jmp    c0004276 <dir_find+0x10a>
c0004272:	3c 0f                	cmp    al,0xf
c0004274:	75 4c                	jne    c00042c2 <dir_find+0x156>
c0004276:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c000427a:	75 7e                	jne    c00042fa <dir_find+0x18e>
c000427c:	f6 c1 40             	test   cl,0x40
c000427f:	74 12                	je     c0004293 <dir_find+0x127>
c0004281:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004284:	83 e1 bf             	and    ecx,0xffffffbf
c0004287:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000428b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000428e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004291:	eb 06                	jmp    c0004299 <dir_find+0x12d>
c0004293:	89 f8                	mov    eax,edi
c0004295:	38 c8                	cmp    al,cl
c0004297:	75 5c                	jne    c00042f5 <dir_find+0x189>
c0004299:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000429d:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042a2:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c00042a5:	75 53                	jne    c00042fa <dir_find+0x18e>
c00042a7:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c00042ab:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042ae:	89 ea                	mov    edx,ebp
c00042b0:	e8 f4 fd ff ff       	call   c00040a9 <cmp_lfn>
c00042b5:	85 c0                	test   eax,eax
c00042b7:	74 41                	je     c00042fa <dir_find+0x18e>
c00042b9:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c00042bd:	8d 79 ff             	lea    edi,[ecx-0x1]
c00042c0:	eb 38                	jmp    c00042fa <dir_find+0x18e>
c00042c2:	89 f8                	mov    eax,edi
c00042c4:	84 c0                	test   al,al
c00042c6:	75 0d                	jne    c00042d5 <dir_find+0x169>
c00042c8:	89 e8                	mov    eax,ebp
c00042ca:	e8 98 de ff ff       	call   c0002167 <sum_sfn>
c00042cf:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c00042d3:	74 52                	je     c0004327 <dir_find+0x1bb>
c00042d5:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c00042d9:	75 13                	jne    c00042ee <dir_find+0x182>
c00042db:	8d 53 3c             	lea    edx,[ebx+0x3c]
c00042de:	b9 0b 00 00 00       	mov    ecx,0xb
c00042e3:	89 e8                	mov    eax,ebp
c00042e5:	e8 60 da ff ff       	call   c0001d4a <mem_cmp>
c00042ea:	85 c0                	test   eax,eax
c00042ec:	74 39                	je     c0004327 <dir_find+0x1bb>
c00042ee:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042f5:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042fa:	31 d2                	xor    edx,edx
c00042fc:	89 d8                	mov    eax,ebx
c00042fe:	e8 5c f4 ff ff       	call   c000375f <dir_next>
c0004303:	85 c0                	test   eax,eax
c0004305:	0f 84 25 ff ff ff    	je     c0004230 <dir_find+0xc4>
c000430b:	89 04 24             	mov    DWORD PTR [esp],eax
c000430e:	eb 17                	jmp    c0004327 <dir_find+0x1bb>
c0004310:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004317:	eb 0e                	jmp    c0004327 <dir_find+0x1bb>
c0004319:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000431c:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004321:	0f 85 75 fe ff ff    	jne    c000419c <dir_find+0x30>
c0004327:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000432a:	83 c4 1c             	add    esp,0x1c
c000432d:	5b                   	pop    ebx
c000432e:	5e                   	pop    esi
c000432f:	5f                   	pop    edi
c0004330:	5d                   	pop    ebp
c0004331:	c3                   	ret    

c0004332 <dir_register>:
c0004332:	55                   	push   ebp
c0004333:	57                   	push   edi
c0004334:	56                   	push   esi
c0004335:	be 06 00 00 00       	mov    esi,0x6
c000433a:	53                   	push   ebx
c000433b:	83 ec 6c             	sub    esp,0x6c
c000433e:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004342:	0f 85 62 02 00 00    	jne    c00045aa <dir_register+0x278>
c0004348:	8b 28                	mov    ebp,DWORD PTR [eax]
c000434a:	31 ff                	xor    edi,edi
c000434c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000434f:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004354:	74 03                	je     c0004359 <dir_register+0x27>
c0004356:	47                   	inc    edi
c0004357:	eb f6                	jmp    c000434f <dir_register+0x1d>
c0004359:	89 c3                	mov    ebx,eax
c000435b:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000435f:	0f 85 e1 00 00 00    	jne    c0004446 <dir_register+0x114>
c0004365:	83 c7 0e             	add    edi,0xe
c0004368:	b9 0f 00 00 00       	mov    ecx,0xf
c000436d:	89 f8                	mov    eax,edi
c000436f:	31 d2                	xor    edx,edx
c0004371:	f7 f1                	div    ecx
c0004373:	8d 50 02             	lea    edx,[eax+0x2]
c0004376:	89 c7                	mov    edi,eax
c0004378:	89 d8                	mov    eax,ebx
c000437a:	e8 12 f8 ff ff       	call   c0003b91 <dir_alloc>
c000437f:	89 c6                	mov    esi,eax
c0004381:	85 c0                	test   eax,eax
c0004383:	0f 85 21 02 00 00    	jne    c00045aa <dir_register+0x278>
c0004389:	81 c7 01 00 00 08    	add    edi,0x8000001
c000438f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004392:	c1 e7 05             	shl    edi,0x5
c0004395:	29 f8                	sub    eax,edi
c0004397:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000439a:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000439d:	a8 04                	test   al,0x4
c000439f:	0f 84 91 00 00 00    	je     c0004436 <dir_register+0x104>
c00043a5:	83 e0 fb             	and    eax,0xfffffffb
c00043a8:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00043ab:	89 d8                	mov    eax,ebx
c00043ad:	e8 25 ec ff ff       	call   c0002fd7 <fill_first_frag>
c00043b2:	85 c0                	test   eax,eax
c00043b4:	0f 85 ee 01 00 00    	jne    c00045a8 <dir_register+0x276>
c00043ba:	83 c9 ff             	or     ecx,0xffffffff
c00043bd:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00043c0:	89 d8                	mov    eax,ebx
c00043c2:	e8 db eb ff ff       	call   c0002fa2 <fill_last_frag>
c00043c7:	85 c0                	test   eax,eax
c00043c9:	0f 85 d9 01 00 00    	jne    c00045a8 <dir_register+0x276>
c00043cf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00043d3:	74 61                	je     c0004436 <dir_register+0x104>
c00043d5:	89 da                	mov    edx,ebx
c00043d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043db:	e8 ea f5 ff ff       	call   c00039ca <load_obj_xdir>
c00043e0:	85 c0                	test   eax,eax
c00043e2:	0f 85 c0 01 00 00    	jne    c00045a8 <dir_register+0x276>
c00043e8:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043ec:	31 c9                	xor    ecx,ecx
c00043ee:	c1 e2 09             	shl    edx,0x9
c00043f1:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043f4:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043f7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043fa:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043fd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004400:	83 c0 38             	add    eax,0x38
c0004403:	e8 1c d9 ff ff       	call   c0001d24 <st_qword>
c0004408:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000440b:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000440e:	83 c0 28             	add    eax,0x28
c0004411:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004414:	e8 0b d9 ff ff       	call   c0001d24 <st_qword>
c0004419:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c000441c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000441f:	83 c8 01             	or     eax,0x1
c0004422:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c0004425:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004429:	e8 db f7 ff ff       	call   c0003c09 <store_xdir>
c000442e:	85 c0                	test   eax,eax
c0004430:	0f 85 72 01 00 00    	jne    c00045a8 <dir_register+0x276>
c0004436:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004439:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000443c:	e8 c1 fb ff ff       	call   c0004002 <create_xdir>
c0004441:	e9 64 01 00 00       	jmp    c00045aa <dir_register+0x278>
c0004446:	8d 40 3c             	lea    eax,[eax+0x3c]
c0004449:	b9 0c 00 00 00       	mov    ecx,0xc
c000444e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004452:	89 c2                	mov    edx,eax
c0004454:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004458:	e8 cd d8 ff ff       	call   c0001d2a <mem_cpy>
c000445d:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004462:	74 58                	je     c00044bc <dir_register+0x18a>
c0004464:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c0004468:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004470:	83 ec 0c             	sub    esp,0xc
c0004473:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004476:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000447a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000447e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004482:	e8 24 dc ff ff       	call   c00020ab <gen_numname>
c0004487:	89 d8                	mov    eax,ebx
c0004489:	e8 de fc ff ff       	call   c000416c <dir_find>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	89 c6                	mov    esi,eax
c0004493:	85 c0                	test   eax,eax
c0004495:	75 15                	jne    c00044ac <dir_register+0x17a>
c0004497:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000449b:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c00044a0:	75 ce                	jne    c0004470 <dir_register+0x13e>
c00044a2:	be 07 00 00 00       	mov    esi,0x7
c00044a7:	e9 fe 00 00 00       	jmp    c00045aa <dir_register+0x278>
c00044ac:	83 f8 04             	cmp    eax,0x4
c00044af:	0f 85 f5 00 00 00    	jne    c00045aa <dir_register+0x278>
c00044b5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00044b9:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c00044bc:	b9 01 00 00 00       	mov    ecx,0x1
c00044c1:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00044c6:	74 0f                	je     c00044d7 <dir_register+0x1a5>
c00044c8:	b9 0d 00 00 00       	mov    ecx,0xd
c00044cd:	8d 47 0c             	lea    eax,[edi+0xc]
c00044d0:	31 d2                	xor    edx,edx
c00044d2:	f7 f1                	div    ecx
c00044d4:	8d 48 01             	lea    ecx,[eax+0x1]
c00044d7:	89 ca                	mov    edx,ecx
c00044d9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044dd:	89 d8                	mov    eax,ebx
c00044df:	e8 ad f6 ff ff       	call   c0003b91 <dir_alloc>
c00044e4:	89 c6                	mov    esi,eax
c00044e6:	85 c0                	test   eax,eax
c00044e8:	0f 85 bc 00 00 00    	jne    c00045aa <dir_register+0x278>
c00044ee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044f2:	49                   	dec    ecx
c00044f3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044f7:	74 6a                	je     c0004563 <dir_register+0x231>
c00044f9:	89 c8                	mov    eax,ecx
c00044fb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044fe:	c1 e0 05             	shl    eax,0x5
c0004501:	29 c2                	sub    edx,eax
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 fd ec ff ff       	call   c0003207 <dir_sdi>
c000450a:	89 c6                	mov    esi,eax
c000450c:	85 c0                	test   eax,eax
c000450e:	0f 85 96 00 00 00    	jne    c00045aa <dir_register+0x278>
c0004514:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004518:	e8 4a dc ff ff       	call   c0002167 <sum_sfn>
c000451d:	0f b6 f8             	movzx  edi,al
c0004520:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004523:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004526:	89 e8                	mov    eax,ebp
c0004528:	e8 5c df ff ff       	call   c0002489 <move_window>
c000452d:	89 c6                	mov    esi,eax
c000452f:	85 c0                	test   eax,eax
c0004531:	75 77                	jne    c00045aa <dir_register+0x278>
c0004533:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0004538:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000453b:	83 ec 0c             	sub    esp,0xc
c000453e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004541:	57                   	push   edi
c0004542:	e8 e0 da ff ff       	call   c0002027 <put_lfn>
c0004547:	31 d2                	xor    edx,edx
c0004549:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000454d:	89 d8                	mov    eax,ebx
c000454f:	e8 0b f2 ff ff       	call   c000375f <dir_next>
c0004554:	83 c4 10             	add    esp,0x10
c0004557:	89 c6                	mov    esi,eax
c0004559:	85 c0                	test   eax,eax
c000455b:	75 4d                	jne    c00045aa <dir_register+0x278>
c000455d:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004561:	75 bd                	jne    c0004520 <dir_register+0x1ee>
c0004563:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004566:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004569:	89 e8                	mov    eax,ebp
c000456b:	e8 19 df ff ff       	call   c0002489 <move_window>
c0004570:	89 c6                	mov    esi,eax
c0004572:	85 c0                	test   eax,eax
c0004574:	75 34                	jne    c00045aa <dir_register+0x278>
c0004576:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004579:	b9 20 00 00 00       	mov    ecx,0x20
c000457e:	31 d2                	xor    edx,edx
c0004580:	e8 ba d7 ff ff       	call   c0001d3f <mem_set>
c0004585:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004588:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000458c:	b9 0b 00 00 00       	mov    ecx,0xb
c0004591:	e8 94 d7 ff ff       	call   c0001d2a <mem_cpy>
c0004596:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004599:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000459c:	83 e0 18             	and    eax,0x18
c000459f:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c00045a2:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00045a6:	eb 02                	jmp    c00045aa <dir_register+0x278>
c00045a8:	89 c6                	mov    esi,eax
c00045aa:	83 c4 6c             	add    esp,0x6c
c00045ad:	89 f0                	mov    eax,esi
c00045af:	5b                   	pop    ebx
c00045b0:	5e                   	pop    esi
c00045b1:	5f                   	pop    edi
c00045b2:	5d                   	pop    ebp
c00045b3:	c3                   	ret    

c00045b4 <sync_fs>:
c00045b4:	56                   	push   esi
c00045b5:	53                   	push   ebx
c00045b6:	53                   	push   ebx
c00045b7:	89 c3                	mov    ebx,eax
c00045b9:	e8 37 de ff ff       	call   c00023f5 <sync_window>
c00045be:	85 c0                	test   eax,eax
c00045c0:	0f 85 b1 00 00 00    	jne    c0004677 <sync_fs+0xc3>
c00045c6:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00045c9:	0f 85 8e 00 00 00    	jne    c000465d <sync_fs+0xa9>
c00045cf:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00045d3:	0f 85 84 00 00 00    	jne    c000465d <sync_fs+0xa9>
c00045d9:	b9 00 02 00 00       	mov    ecx,0x200
c00045de:	8d 73 54             	lea    esi,[ebx+0x54]
c00045e1:	31 d2                	xor    edx,edx
c00045e3:	89 f0                	mov    eax,esi
c00045e5:	e8 55 d7 ff ff       	call   c0001d3f <mem_set>
c00045ea:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045f0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045f5:	e8 23 d7 ff ff       	call   c0001d1d <st_word>
c00045fa:	ba 52 52 61 41       	mov    edx,0x41615252
c00045ff:	89 f0                	mov    eax,esi
c0004601:	e8 1b d7 ff ff       	call   c0001d21 <st_dword>
c0004606:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c000460c:	ba 72 72 41 61       	mov    edx,0x61417272
c0004611:	e8 0b d7 ff ff       	call   c0001d21 <st_dword>
c0004616:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004619:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000461f:	e8 fd d6 ff ff       	call   c0001d21 <st_dword>
c0004624:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004627:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c000462d:	e8 ef d6 ff ff       	call   c0001d21 <st_dword>
c0004632:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004635:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004638:	83 c0 01             	add    eax,0x1
c000463b:	83 d2 00             	adc    edx,0x0
c000463e:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004641:	83 ec 0c             	sub    esp,0xc
c0004644:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c0004647:	6a 01                	push   0x1
c0004649:	52                   	push   edx
c000464a:	50                   	push   eax
c000464b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000464f:	56                   	push   esi
c0004650:	50                   	push   eax
c0004651:	e8 20 d6 ff ff       	call   c0001c76 <disk_write>
c0004656:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000465a:	83 c4 20             	add    esp,0x20
c000465d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004661:	51                   	push   ecx
c0004662:	6a 00                	push   0x0
c0004664:	6a 00                	push   0x0
c0004666:	50                   	push   eax
c0004667:	e8 20 d6 ff ff       	call   c0001c8c <disk_ioctl>
c000466c:	83 c4 10             	add    esp,0x10
c000466f:	85 c0                	test   eax,eax
c0004671:	0f 95 c0             	setne  al
c0004674:	0f b6 c0             	movzx  eax,al
c0004677:	5a                   	pop    edx
c0004678:	5b                   	pop    ebx
c0004679:	5e                   	pop    esi
c000467a:	c3                   	ret    

c000467b <create_partition>:
c000467b:	55                   	push   ebp
c000467c:	0f b6 c0             	movzx  eax,al
c000467f:	57                   	push   edi
c0004680:	56                   	push   esi
c0004681:	53                   	push   ebx
c0004682:	83 ec 60             	sub    esp,0x60
c0004685:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004689:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000468d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004691:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004695:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004699:	50                   	push   eax
c000469a:	6a 01                	push   0x1
c000469c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00046a0:	e8 e7 d5 ff ff       	call   c0001c8c <disk_ioctl>
c00046a5:	83 c4 10             	add    esp,0x10
c00046a8:	85 c0                	test   eax,eax
c00046aa:	74 0a                	je     c00046b6 <create_partition+0x3b>
c00046ac:	b8 01 00 00 00       	mov    eax,0x1
c00046b1:	e9 67 05 00 00       	jmp    c0004c1d <create_partition+0x5a2>
c00046b6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046ba:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00046be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00046c2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00046c6:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00046cb:	0f 86 ed 03 00 00    	jbe    c0004abe <create_partition+0x443>
c00046d1:	83 c0 df             	add    eax,0xffffffdf
c00046d4:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00046dc:	83 d2 ff             	adc    edx,0xffffffff
c00046df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00046e3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00046e7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046eb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046ef:	83 c0 bd             	add    eax,0xffffffbd
c00046f2:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046f9:	83 d2 ff             	adc    edx,0xffffffff
c00046fc:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004700:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0004704:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000470c:	be 22 00 00 00       	mov    esi,0x22
c0004711:	31 ff                	xor    edi,edi
c0004713:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c000471b:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004723:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000472b:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000472f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004735:	75 0e                	jne    c0004745 <create_partition+0xca>
c0004737:	b9 00 02 00 00       	mov    ecx,0x200
c000473c:	31 d2                	xor    edx,edx
c000473e:	89 d8                	mov    eax,ebx
c0004740:	e8 fa d5 ff ff       	call   c0001d3f <mem_set>
c0004745:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004749:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000474d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004751:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004754:	0f 84 23 01 00 00    	je     c000487d <create_partition+0x202>
c000475a:	89 f0                	mov    eax,esi
c000475c:	89 fa                	mov    edx,edi
c000475e:	05 ff 07 00 00       	add    eax,0x7ff
c0004763:	83 d2 00             	adc    edx,0x0
c0004766:	89 c1                	mov    ecx,eax
c0004768:	89 d7                	mov    edi,edx
c000476a:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004770:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004774:	89 ce                	mov    esi,ecx
c0004776:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000477a:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000477e:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004782:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004785:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004789:	89 04 24             	mov    DWORD PTR [esp],eax
c000478c:	b8 64 00 00 00       	mov    eax,0x64
c0004791:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004794:	b8 00 00 00 00       	mov    eax,0x0
c0004799:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000479d:	72 41                	jb     c00047e0 <create_partition+0x165>
c000479f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00047a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047a7:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c00047ab:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00047b0:	01 c1                	add    ecx,eax
c00047b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00047b6:	f7 24 24             	mul    DWORD PTR [esp]
c00047b9:	6a 00                	push   0x0
c00047bb:	01 ca                	add    edx,ecx
c00047bd:	6a 64                	push   0x64
c00047bf:	52                   	push   edx
c00047c0:	50                   	push   eax
c00047c1:	e8 56 9f 01 00       	call   c001e71c <__udivdi3>
c00047c6:	83 c4 10             	add    esp,0x10
c00047c9:	05 ff 07 00 00       	add    eax,0x7ff
c00047ce:	83 d2 00             	adc    edx,0x0
c00047d1:	89 c1                	mov    ecx,eax
c00047d3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047d7:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00047dd:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00047e0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047e3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00047e7:	01 f0                	add    eax,esi
c00047e9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047ed:	11 fa                	adc    edx,edi
c00047ef:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047f3:	19 d1                	sbb    ecx,edx
c00047f5:	73 2e                	jae    c0004825 <create_partition+0x1aa>
c00047f7:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047fb:	89 f8                	mov    eax,edi
c00047fd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004804:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c0004808:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004810:	73 6b                	jae    c000487d <create_partition+0x202>
c0004812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004816:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000481a:	29 f0                	sub    eax,esi
c000481c:	19 fa                	sbb    edx,edi
c000481e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004821:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004829:	0b 04 24             	or     eax,DWORD PTR [esp]
c000482c:	74 4f                	je     c000487d <create_partition+0x202>
c000482e:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004831:	b9 10 00 00 00       	mov    ecx,0x10
c0004836:	ba b0 f7 01 c0       	mov    edx,0xc001f7b0
c000483b:	e8 ea d4 ff ff       	call   c0001d2a <mem_cpy>
c0004840:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004844:	b9 10 00 00 00       	mov    ecx,0x10
c0004849:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000484d:	e8 2c db ff ff       	call   c000237e <make_rand>
c0004852:	89 f2                	mov    edx,esi
c0004854:	89 f9                	mov    ecx,edi
c0004856:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000485a:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c000485e:	e8 c1 d4 ff ff       	call   c0001d24 <st_qword>
c0004863:	03 34 24             	add    esi,DWORD PTR [esp]
c0004866:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000486a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000486e:	89 f2                	mov    edx,esi
c0004870:	89 f9                	mov    ecx,edi
c0004872:	83 c2 ff             	add    edx,0xffffffff
c0004875:	83 d1 ff             	adc    ecx,0xffffffff
c0004878:	e8 a7 d4 ff ff       	call   c0001d24 <st_qword>
c000487d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004881:	83 e8 80             	sub    eax,0xffffff80
c0004884:	89 c5                	mov    ebp,eax
c0004886:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000488a:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004890:	75 6b                	jne    c00048fd <create_partition+0x282>
c0004892:	45                   	inc    ebp
c0004893:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004897:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000489c:	e8 39 da ff ff       	call   c00022da <crc32>
c00048a1:	81 fd 00 02 00 00    	cmp    ebp,0x200
c00048a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00048ab:	75 e5                	jne    c0004892 <create_partition+0x217>
c00048ad:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00048b1:	31 d2                	xor    edx,edx
c00048b3:	83 ec 0c             	sub    esp,0xc
c00048b6:	c1 ed 09             	shr    ebp,0x9
c00048b9:	6a 01                	push   0x1
c00048bb:	8d 45 02             	lea    eax,[ebp+0x2]
c00048be:	52                   	push   edx
c00048bf:	50                   	push   eax
c00048c0:	53                   	push   ebx
c00048c1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048c5:	e8 ac d3 ff ff       	call   c0001c76 <disk_write>
c00048ca:	83 c4 20             	add    esp,0x20
c00048cd:	85 c0                	test   eax,eax
c00048cf:	0f 85 d7 fd ff ff    	jne    c00046ac <create_partition+0x31>
c00048d5:	83 ec 0c             	sub    esp,0xc
c00048d8:	31 d2                	xor    edx,edx
c00048da:	6a 01                	push   0x1
c00048dc:	89 e8                	mov    eax,ebp
c00048de:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00048e2:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00048e6:	52                   	push   edx
c00048e7:	50                   	push   eax
c00048e8:	53                   	push   ebx
c00048e9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048ed:	e8 84 d3 ff ff       	call   c0001c76 <disk_write>
c00048f2:	83 c4 20             	add    esp,0x20
c00048f5:	85 c0                	test   eax,eax
c00048f7:	0f 85 af fd ff ff    	jne    c00046ac <create_partition+0x31>
c00048fd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004901:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004905:	3d 00 40 00 00       	cmp    eax,0x4000
c000490a:	74 0d                	je     c0004919 <create_partition+0x29e>
c000490c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0004910:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004914:	e9 12 fe ff ff       	jmp    c000472b <create_partition+0xb0>
c0004919:	31 d2                	xor    edx,edx
c000491b:	b9 00 02 00 00       	mov    ecx,0x200
c0004920:	89 d8                	mov    eax,ebx
c0004922:	8d 6b 20             	lea    ebp,[ebx+0x20]
c0004925:	e8 15 d4 ff ff       	call   c0001d3f <mem_set>
c000492a:	8d 7b 48             	lea    edi,[ebx+0x48]
c000492d:	b9 10 00 00 00       	mov    ecx,0x10
c0004932:	ba a0 f6 01 c0       	mov    edx,0xc001f6a0
c0004937:	89 d8                	mov    eax,ebx
c0004939:	e8 ec d3 ff ff       	call   c0001d2a <mem_cpy>
c000493e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004942:	8d 43 58             	lea    eax,[ebx+0x58]
c0004945:	f7 d2                	not    edx
c0004947:	e8 d5 d3 ff ff       	call   c0001d21 <st_dword>
c000494c:	8d 43 18             	lea    eax,[ebx+0x18]
c000494f:	31 c9                	xor    ecx,ecx
c0004951:	89 04 24             	mov    DWORD PTR [esp],eax
c0004954:	ba 01 00 00 00       	mov    edx,0x1
c0004959:	e8 c6 d3 ff ff       	call   c0001d24 <st_qword>
c000495e:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004962:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004966:	83 c2 ff             	add    edx,0xffffffff
c0004969:	89 e8                	mov    eax,ebp
c000496b:	83 d1 ff             	adc    ecx,0xffffffff
c000496e:	e8 b1 d3 ff ff       	call   c0001d24 <st_qword>
c0004973:	31 c9                	xor    ecx,ecx
c0004975:	8d 43 28             	lea    eax,[ebx+0x28]
c0004978:	ba 22 00 00 00       	mov    edx,0x22
c000497d:	e8 a2 d3 ff ff       	call   c0001d24 <st_qword>
c0004982:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004986:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000498a:	83 c2 de             	add    edx,0xffffffde
c000498d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004990:	83 d1 ff             	adc    ecx,0xffffffff
c0004993:	31 f6                	xor    esi,esi
c0004995:	e8 8a d3 ff ff       	call   c0001d24 <st_qword>
c000499a:	8d 43 54             	lea    eax,[ebx+0x54]
c000499d:	ba 80 00 00 00       	mov    edx,0x80
c00049a2:	e8 7a d3 ff ff       	call   c0001d21 <st_dword>
c00049a7:	8d 43 50             	lea    eax,[ebx+0x50]
c00049aa:	ba 80 00 00 00       	mov    edx,0x80
c00049af:	e8 6d d3 ff ff       	call   c0001d21 <st_dword>
c00049b4:	ba 02 00 00 00       	mov    edx,0x2
c00049b9:	89 f8                	mov    eax,edi
c00049bb:	e8 61 d3 ff ff       	call   c0001d21 <st_dword>
c00049c0:	8d 53 38             	lea    edx,[ebx+0x38]
c00049c3:	b9 10 00 00 00       	mov    ecx,0x10
c00049c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00049cc:	e8 ad d9 ff ff       	call   c000237e <make_rand>
c00049d1:	83 c8 ff             	or     eax,0xffffffff
c00049d4:	46                   	inc    esi
c00049d5:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00049da:	e8 fb d8 ff ff       	call   c00022da <crc32>
c00049df:	83 fe 5c             	cmp    esi,0x5c
c00049e2:	75 f0                	jne    c00049d4 <create_partition+0x359>
c00049e4:	f7 d0                	not    eax
c00049e6:	8d 73 10             	lea    esi,[ebx+0x10]
c00049e9:	89 c2                	mov    edx,eax
c00049eb:	89 f0                	mov    eax,esi
c00049ed:	e8 2f d3 ff ff       	call   c0001d21 <st_dword>
c00049f2:	83 ec 0c             	sub    esp,0xc
c00049f5:	6a 01                	push   0x1
c00049f7:	6a 00                	push   0x0
c00049f9:	6a 01                	push   0x1
c00049fb:	53                   	push   ebx
c00049fc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a00:	e8 71 d2 ff ff       	call   c0001c76 <disk_write>
c0004a05:	83 c4 20             	add    esp,0x20
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 9c fc ff ff    	jne    c00046ac <create_partition+0x31>
c0004a10:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004a14:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004a18:	83 c2 ff             	add    edx,0xffffffff
c0004a1b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a1e:	83 d1 ff             	adc    ecx,0xffffffff
c0004a21:	e8 fe d2 ff ff       	call   c0001d24 <st_qword>
c0004a26:	ba 01 00 00 00       	mov    edx,0x1
c0004a2b:	31 c9                	xor    ecx,ecx
c0004a2d:	89 e8                	mov    eax,ebp
c0004a2f:	e8 f0 d2 ff ff       	call   c0001d24 <st_qword>
c0004a34:	89 f8                	mov    eax,edi
c0004a36:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0004a3a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004a3e:	31 ff                	xor    edi,edi
c0004a40:	e8 df d2 ff ff       	call   c0001d24 <st_qword>
c0004a45:	89 f0                	mov    eax,esi
c0004a47:	31 d2                	xor    edx,edx
c0004a49:	e8 d3 d2 ff ff       	call   c0001d21 <st_dword>
c0004a4e:	83 c8 ff             	or     eax,0xffffffff
c0004a51:	47                   	inc    edi
c0004a52:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a57:	e8 7e d8 ff ff       	call   c00022da <crc32>
c0004a5c:	83 ff 5c             	cmp    edi,0x5c
c0004a5f:	75 f0                	jne    c0004a51 <create_partition+0x3d6>
c0004a61:	f7 d0                	not    eax
c0004a63:	89 c2                	mov    edx,eax
c0004a65:	89 f0                	mov    eax,esi
c0004a67:	e8 b5 d2 ff ff       	call   c0001d21 <st_dword>
c0004a6c:	83 ec 0c             	sub    esp,0xc
c0004a6f:	6a 01                	push   0x1
c0004a71:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a75:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a79:	83 c0 ff             	add    eax,0xffffffff
c0004a7c:	83 d2 ff             	adc    edx,0xffffffff
c0004a7f:	52                   	push   edx
c0004a80:	50                   	push   eax
c0004a81:	53                   	push   ebx
c0004a82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a86:	e8 eb d1 ff ff       	call   c0001c76 <disk_write>
c0004a8b:	83 c4 20             	add    esp,0x20
c0004a8e:	85 c0                	test   eax,eax
c0004a90:	0f 85 16 fc ff ff    	jne    c00046ac <create_partition+0x31>
c0004a96:	31 d2                	xor    edx,edx
c0004a98:	89 d8                	mov    eax,ebx
c0004a9a:	b9 00 02 00 00       	mov    ecx,0x200
c0004a9f:	e8 9b d2 ff ff       	call   c0001d3f <mem_set>
c0004aa4:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004aaa:	b9 10 00 00 00       	mov    ecx,0x10
c0004aaf:	ba b0 f6 01 c0       	mov    edx,0xc001f6b0
c0004ab4:	e8 71 d2 ff ff       	call   c0001d2a <mem_cpy>
c0004ab9:	e9 21 01 00 00       	jmp    c0004bdf <create_partition+0x564>
c0004abe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004ac2:	b9 05 00 00 00       	mov    ecx,0x5
c0004ac7:	89 04 24             	mov    DWORD PTR [esp],eax
c0004aca:	bf 08 00 00 00       	mov    edi,0x8
c0004acf:	89 f8                	mov    eax,edi
c0004ad1:	31 d2                	xor    edx,edx
c0004ad3:	0f b6 f0             	movzx  esi,al
c0004ad6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004ad9:	f7 f6                	div    esi
c0004adb:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004ae0:	76 0a                	jbe    c0004aec <create_partition+0x471>
c0004ae2:	d1 e7                	shl    edi,1
c0004ae4:	49                   	dec    ecx
c0004ae5:	75 e8                	jne    c0004acf <create_partition+0x454>
c0004ae7:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aec:	b9 00 02 00 00       	mov    ecx,0x200
c0004af1:	31 d2                	xor    edx,edx
c0004af3:	89 d8                	mov    eax,ebx
c0004af5:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004afb:	e8 3f d2 ff ff       	call   c0001d3f <mem_set>
c0004b00:	b9 64 00 00 00       	mov    ecx,0x64
c0004b05:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004b08:	31 d2                	xor    edx,edx
c0004b0a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004b12:	f7 f1                	div    ecx
c0004b14:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004b19:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004b1d:	89 f8                	mov    eax,edi
c0004b1f:	0f b6 c0             	movzx  eax,al
c0004b22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004b26:	e9 80 00 00 00       	jmp    c0004bab <create_partition+0x530>
c0004b2b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004b2e:	29 cf                	sub    edi,ecx
c0004b30:	89 ca                	mov    edx,ecx
c0004b32:	89 f0                	mov    eax,esi
c0004b34:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b39:	e8 e3 d1 ff ff       	call   c0001d21 <st_dword>
c0004b3e:	8d 46 04             	lea    eax,[esi+0x4]
c0004b41:	89 fa                	mov    edx,edi
c0004b43:	83 c6 10             	add    esi,0x10
c0004b46:	e8 d6 d1 ff ff       	call   c0001d21 <st_dword>
c0004b4b:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b4f:	31 d2                	xor    edx,edx
c0004b51:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b54:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b58:	89 c8                	mov    eax,ecx
c0004b5a:	01 f9                	add    ecx,edi
c0004b5c:	f7 f5                	div    ebp
c0004b5e:	89 d5                	mov    ebp,edx
c0004b60:	31 d2                	xor    edx,edx
c0004b62:	45                   	inc    ebp
c0004b63:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b67:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b6a:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b6d:	89 c2                	mov    edx,eax
c0004b6f:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b72:	c1 ea 02             	shr    edx,0x2
c0004b75:	83 e2 c0             	and    edx,0xffffffc0
c0004b78:	09 ea                	or     edx,ebp
c0004b7a:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b7f:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b82:	31 d2                	xor    edx,edx
c0004b84:	f7 f5                	div    ebp
c0004b86:	89 d7                	mov    edi,edx
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	47                   	inc    edi
c0004b8b:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b8f:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b92:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b95:	89 c5                	mov    ebp,eax
c0004b97:	c1 ed 02             	shr    ebp,0x2
c0004b9a:	83 e5 c0             	and    ebp,0xffffffc0
c0004b9d:	09 ef                	or     edi,ebp
c0004b9f:	89 fa                	mov    edx,edi
c0004ba1:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004ba4:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004ba9:	74 34                	je     c0004bdf <create_partition+0x564>
c0004bab:	85 c9                	test   ecx,ecx
c0004bad:	74 30                	je     c0004bdf <create_partition+0x564>
c0004baf:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004bb2:	76 2b                	jbe    c0004bdf <create_partition+0x564>
c0004bb4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004bb8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004bbc:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004bbf:	83 ff 64             	cmp    edi,0x64
c0004bc2:	76 4b                	jbe    c0004c0f <create_partition+0x594>
c0004bc4:	89 f8                	mov    eax,edi
c0004bc6:	01 c8                	add    eax,ecx
c0004bc8:	0f 82 5d ff ff ff    	jb     c0004b2b <create_partition+0x4b0>
c0004bce:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004bd1:	0f 87 54 ff ff ff    	ja     c0004b2b <create_partition+0x4b0>
c0004bd7:	85 ff                	test   edi,edi
c0004bd9:	0f 85 51 ff ff ff    	jne    c0004b30 <create_partition+0x4b5>
c0004bdf:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004be5:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004bea:	e8 2e d1 ff ff       	call   c0001d1d <st_word>
c0004bef:	83 ec 0c             	sub    esp,0xc
c0004bf2:	6a 01                	push   0x1
c0004bf4:	6a 00                	push   0x0
c0004bf6:	6a 00                	push   0x0
c0004bf8:	53                   	push   ebx
c0004bf9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bfd:	e8 74 d0 ff ff       	call   c0001c76 <disk_write>
c0004c02:	83 c4 20             	add    esp,0x20
c0004c05:	85 c0                	test   eax,eax
c0004c07:	0f 95 c0             	setne  al
c0004c0a:	0f b6 c0             	movzx  eax,al
c0004c0d:	eb 0e                	jmp    c0004c1d <create_partition+0x5a2>
c0004c0f:	74 07                	je     c0004c18 <create_partition+0x59d>
c0004c11:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004c16:	eb ac                	jmp    c0004bc4 <create_partition+0x549>
c0004c18:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004c1b:	eb a7                	jmp    c0004bc4 <create_partition+0x549>
c0004c1d:	83 c4 5c             	add    esp,0x5c
c0004c20:	5b                   	pop    ebx
c0004c21:	5e                   	pop    esi
c0004c22:	5f                   	pop    edi
c0004c23:	5d                   	pop    ebp
c0004c24:	c3                   	ret    

c0004c25 <get_fileinfo>:
c0004c25:	55                   	push   ebp
c0004c26:	57                   	push   edi
c0004c27:	56                   	push   esi
c0004c28:	53                   	push   ebx
c0004c29:	83 ec 1c             	sub    esp,0x1c
c0004c2c:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c2e:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004c32:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004c36:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004c39:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004c3c:	0f 84 dc 01 00 00    	je     c0004e1e <get_fileinfo+0x1f9>
c0004c42:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004c45:	75 0f                	jne    c0004c56 <get_fileinfo+0x31>
c0004c47:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c4a:	83 c4 1c             	add    esp,0x1c
c0004c4d:	5b                   	pop    ebx
c0004c4e:	5e                   	pop    esi
c0004c4f:	5f                   	pop    edi
c0004c50:	5d                   	pop    ebp
c0004c51:	e9 58 d5 ff ff       	jmp    c00021ae <get_xfileinfo>
c0004c56:	89 d3                	mov    ebx,edx
c0004c58:	89 c6                	mov    esi,eax
c0004c5a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c5e:	74 6a                	je     c0004cca <get_fileinfo+0xa5>
c0004c60:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c68:	31 ed                	xor    ebp,ebp
c0004c6a:	31 ff                	xor    edi,edi
c0004c6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c74:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c77:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c7b:	66 85 d2             	test   dx,dx
c0004c7e:	74 3e                	je     c0004cbe <get_fileinfo+0x99>
c0004c80:	66 85 ed             	test   bp,bp
c0004c83:	75 0c                	jne    c0004c91 <get_fileinfo+0x6c>
c0004c85:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c8b:	66 3d ff 07          	cmp    ax,0x7ff
c0004c8f:	76 22                	jbe    c0004cb3 <get_fileinfo+0x8e>
c0004c91:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c96:	89 e8                	mov    eax,ebp
c0004c98:	29 f9                	sub    ecx,edi
c0004c9a:	c1 e0 10             	shl    eax,0x10
c0004c9d:	09 d0                	or     eax,edx
c0004c9f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004ca3:	e8 a3 d1 ff ff       	call   c0001e4b <put_utf>
c0004ca8:	84 c0                	test   al,al
c0004caa:	74 10                	je     c0004cbc <get_fileinfo+0x97>
c0004cac:	0f b6 c0             	movzx  eax,al
c0004caf:	31 d2                	xor    edx,edx
c0004cb1:	01 c7                	add    edi,eax
c0004cb3:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004cb8:	89 d5                	mov    ebp,edx
c0004cba:	eb b0                	jmp    c0004c6c <get_fileinfo+0x47>
c0004cbc:	31 ff                	xor    edi,edi
c0004cbe:	66 85 ed             	test   bp,bp
c0004cc1:	74 02                	je     c0004cc5 <get_fileinfo+0xa0>
c0004cc3:	31 ff                	xor    edi,edi
c0004cc5:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004cca:	31 ff                	xor    edi,edi
c0004ccc:	31 c9                	xor    ecx,ecx
c0004cce:	83 f9 0a             	cmp    ecx,0xa
c0004cd1:	0f 87 ad 00 00 00    	ja     c0004d84 <get_fileinfo+0x15f>
c0004cd7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cda:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004cdd:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004ce1:	66 83 fa 20          	cmp    dx,0x20
c0004ce5:	0f 84 92 00 00 00    	je     c0004d7d <get_fileinfo+0x158>
c0004ceb:	66 83 fa 05          	cmp    dx,0x5
c0004cef:	75 05                	jne    c0004cf6 <get_fileinfo+0xd1>
c0004cf1:	ba e5 00 00 00       	mov    edx,0xe5
c0004cf6:	83 ff 0b             	cmp    edi,0xb
c0004cf9:	77 0b                	ja     c0004d06 <get_fileinfo+0xe1>
c0004cfb:	83 fd 09             	cmp    ebp,0x9
c0004cfe:	75 06                	jne    c0004d06 <get_fileinfo+0xe1>
c0004d00:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004d05:	47                   	inc    edi
c0004d06:	0f b7 c2             	movzx  eax,dx
c0004d09:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d0d:	e8 6d d0 ff ff       	call   c0001d7f <dbc_1st>
c0004d12:	85 c0                	test   eax,eax
c0004d14:	74 2f                	je     c0004d45 <get_fileinfo+0x120>
c0004d16:	83 fd 08             	cmp    ebp,0x8
c0004d19:	74 2a                	je     c0004d45 <get_fileinfo+0x120>
c0004d1b:	83 fd 0b             	cmp    ebp,0xb
c0004d1e:	74 25                	je     c0004d45 <get_fileinfo+0x120>
c0004d20:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d23:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004d27:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004d2b:	e8 52 d0 ff ff       	call   c0001d82 <dbc_2nd>
c0004d30:	85 c0                	test   eax,eax
c0004d32:	74 11                	je     c0004d45 <get_fileinfo+0x120>
c0004d34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004d38:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004d3d:	c1 e2 08             	shl    edx,0x8
c0004d40:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004d43:	09 c2                	or     edx,eax
c0004d45:	0f b7 d2             	movzx  edx,dx
c0004d48:	50                   	push   eax
c0004d49:	50                   	push   eax
c0004d4a:	68 b5 01 00 00       	push   0x1b5
c0004d4f:	52                   	push   edx
c0004d50:	e8 46 38 00 00       	call   c000859b <ff_oem2uni>
c0004d55:	83 c4 10             	add    esp,0x10
c0004d58:	66 85 c0             	test   ax,ax
c0004d5b:	75 04                	jne    c0004d61 <get_fileinfo+0x13c>
c0004d5d:	31 ff                	xor    edi,edi
c0004d5f:	eb 23                	jmp    c0004d84 <get_fileinfo+0x15f>
c0004d61:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d66:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d6a:	29 f9                	sub    ecx,edi
c0004d6c:	0f b7 c0             	movzx  eax,ax
c0004d6f:	e8 d7 d0 ff ff       	call   c0001e4b <put_utf>
c0004d74:	84 c0                	test   al,al
c0004d76:	74 e5                	je     c0004d5d <get_fileinfo+0x138>
c0004d78:	0f b6 c0             	movzx  eax,al
c0004d7b:	01 c7                	add    edi,eax
c0004d7d:	89 e9                	mov    ecx,ebp
c0004d7f:	e9 4a ff ff ff       	jmp    c0004cce <get_fileinfo+0xa9>
c0004d84:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d89:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d8d:	75 54                	jne    c0004de3 <get_fileinfo+0x1be>
c0004d8f:	85 ff                	test   edi,edi
c0004d91:	75 0b                	jne    c0004d9e <get_fileinfo+0x179>
c0004d93:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d97:	ba 01 00 00 00       	mov    edx,0x1
c0004d9c:	eb 33                	jmp    c0004dd1 <get_fileinfo+0x1ac>
c0004d9e:	b1 08                	mov    cl,0x8
c0004da0:	31 d2                	xor    edx,edx
c0004da2:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004da8:	84 c0                	test   al,al
c0004daa:	74 25                	je     c0004dd1 <get_fileinfo+0x1ac>
c0004dac:	66 83 f8 2e          	cmp    ax,0x2e
c0004db0:	74 16                	je     c0004dc8 <get_fileinfo+0x1a3>
c0004db2:	8d 78 bf             	lea    edi,[eax-0x41]
c0004db5:	66 83 ff 19          	cmp    di,0x19
c0004db9:	77 0f                	ja     c0004dca <get_fileinfo+0x1a5>
c0004dbb:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004dbe:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004dc1:	74 07                	je     c0004dca <get_fileinfo+0x1a5>
c0004dc3:	83 c0 20             	add    eax,0x20
c0004dc6:	eb 02                	jmp    c0004dca <get_fileinfo+0x1a5>
c0004dc8:	b1 10                	mov    cl,0x10
c0004dca:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004dce:	42                   	inc    edx
c0004dcf:	eb d1                	jmp    c0004da2 <get_fileinfo+0x17d>
c0004dd1:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004dd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dd9:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004ddd:	75 04                	jne    c0004de3 <get_fileinfo+0x1be>
c0004ddf:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004de3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004de6:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004de9:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004dec:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004def:	83 c0 1c             	add    eax,0x1c
c0004df2:	e8 c1 ce ff ff       	call   c0001cb8 <ld_dword>
c0004df7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004dfe:	89 03                	mov    DWORD PTR [ebx],eax
c0004e00:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004e03:	83 c0 16             	add    eax,0x16
c0004e06:	e8 a0 ce ff ff       	call   c0001cab <ld_word>
c0004e0b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004e0f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004e12:	83 c0 18             	add    eax,0x18
c0004e15:	e8 91 ce ff ff       	call   c0001cab <ld_word>
c0004e1a:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004e1e:	83 c4 1c             	add    esp,0x1c
c0004e21:	5b                   	pop    ebx
c0004e22:	5e                   	pop    esi
c0004e23:	5f                   	pop    edi
c0004e24:	5d                   	pop    ebp
c0004e25:	c3                   	ret    

c0004e26 <ld_clust.isra.0>:
c0004e26:	56                   	push   esi
c0004e27:	89 c6                	mov    esi,eax
c0004e29:	53                   	push   ebx
c0004e2a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004e2d:	89 d3                	mov    ebx,edx
c0004e2f:	e8 77 ce ff ff       	call   c0001cab <ld_word>
c0004e34:	0f b7 c8             	movzx  ecx,ax
c0004e37:	89 f0                	mov    eax,esi
c0004e39:	3c 03                	cmp    al,0x3
c0004e3b:	75 0d                	jne    c0004e4a <ld_clust.isra.0+0x24>
c0004e3d:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e40:	e8 66 ce ff ff       	call   c0001cab <ld_word>
c0004e45:	c1 e0 10             	shl    eax,0x10
c0004e48:	09 c1                	or     ecx,eax
c0004e4a:	89 c8                	mov    eax,ecx
c0004e4c:	5b                   	pop    ebx
c0004e4d:	5e                   	pop    esi
c0004e4e:	c3                   	ret    

c0004e4f <st_clust.isra.1>:
c0004e4f:	56                   	push   esi
c0004e50:	89 c6                	mov    esi,eax
c0004e52:	53                   	push   ebx
c0004e53:	89 d3                	mov    ebx,edx
c0004e55:	0f b7 d1             	movzx  edx,cx
c0004e58:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e5b:	e8 bd ce ff ff       	call   c0001d1d <st_word>
c0004e60:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e63:	75 0f                	jne    c0004e74 <st_clust.isra.1+0x25>
c0004e65:	c1 e9 10             	shr    ecx,0x10
c0004e68:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e6b:	89 ca                	mov    edx,ecx
c0004e6d:	5b                   	pop    ebx
c0004e6e:	5e                   	pop    esi
c0004e6f:	e9 a9 ce ff ff       	jmp    c0001d1d <st_word>
c0004e74:	5b                   	pop    ebx
c0004e75:	5e                   	pop    esi
c0004e76:	c3                   	ret    

c0004e77 <init_alloc_info.isra.2>:
c0004e77:	56                   	push   esi
c0004e78:	53                   	push   ebx
c0004e79:	89 c6                	mov    esi,eax
c0004e7b:	89 d3                	mov    ebx,edx
c0004e7d:	51                   	push   ecx
c0004e7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e80:	83 c0 34             	add    eax,0x34
c0004e83:	e8 30 ce ff ff       	call   c0001cb8 <ld_dword>
c0004e88:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e8b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e8d:	83 c0 38             	add    eax,0x38
c0004e90:	e8 3b ce ff ff       	call   c0001cd0 <ld_qword>
c0004e95:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e98:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e9b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e9d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004ea0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004ea7:	83 e0 02             	and    eax,0x2
c0004eaa:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004ead:	5b                   	pop    ebx
c0004eae:	5b                   	pop    ebx
c0004eaf:	5e                   	pop    esi
c0004eb0:	c3                   	ret    

c0004eb1 <follow_path>:
c0004eb1:	56                   	push   esi
c0004eb2:	53                   	push   ebx
c0004eb3:	89 c3                	mov    ebx,eax
c0004eb5:	83 ec 14             	sub    esp,0x14
c0004eb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ebc:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ebe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ec2:	8a 10                	mov    dl,BYTE PTR [eax]
c0004ec4:	80 fa 5c             	cmp    dl,0x5c
c0004ec7:	75 07                	jne    c0004ed0 <follow_path+0x1f>
c0004ec9:	40                   	inc    eax
c0004eca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ece:	eb ee                	jmp    c0004ebe <follow_path+0xd>
c0004ed0:	80 fa 2f             	cmp    dl,0x2f
c0004ed3:	74 f4                	je     c0004ec9 <follow_path+0x18>
c0004ed5:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004edc:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004ee3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004ee6:	77 52                	ja     c0004f3a <follow_path+0x89>
c0004ee8:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004eec:	31 d2                	xor    edx,edx
c0004eee:	89 d8                	mov    eax,ebx
c0004ef0:	e8 12 e3 ff ff       	call   c0003207 <dir_sdi>
c0004ef5:	eb 7c                	jmp    c0004f73 <follow_path+0xc2>
c0004ef7:	89 d8                	mov    eax,ebx
c0004ef9:	e8 6e f2 ff ff       	call   c000416c <dir_find>
c0004efe:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004f01:	85 c0                	test   eax,eax
c0004f03:	75 46                	jne    c0004f4b <follow_path+0x9a>
c0004f05:	80 e2 04             	and    dl,0x4
c0004f08:	75 69                	jne    c0004f73 <follow_path+0xc2>
c0004f0a:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004f0e:	74 5e                	je     c0004f6e <follow_path+0xbd>
c0004f10:	8a 06                	mov    al,BYTE PTR [esi]
c0004f12:	3c 04                	cmp    al,0x4
c0004f14:	75 41                	jne    c0004f57 <follow_path+0xa6>
c0004f16:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f19:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004f1d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f20:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004f23:	30 c0                	xor    al,al
c0004f25:	09 d0                	or     eax,edx
c0004f27:	89 da                	mov    edx,ebx
c0004f29:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f2c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004f2f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f32:	8d 46 10             	lea    eax,[esi+0x10]
c0004f35:	e8 3d ff ff ff       	call   c0004e77 <init_alloc_info.isra.2>
c0004f3a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004f3e:	89 d8                	mov    eax,ebx
c0004f40:	e8 a9 ed ff ff       	call   c0003cee <create_name>
c0004f45:	85 c0                	test   eax,eax
c0004f47:	74 ae                	je     c0004ef7 <follow_path+0x46>
c0004f49:	eb 28                	jmp    c0004f73 <follow_path+0xc2>
c0004f4b:	83 f8 04             	cmp    eax,0x4
c0004f4e:	75 23                	jne    c0004f73 <follow_path+0xc2>
c0004f50:	80 e2 04             	and    dl,0x4
c0004f53:	74 19                	je     c0004f6e <follow_path+0xbd>
c0004f55:	eb 1c                	jmp    c0004f73 <follow_path+0xc2>
c0004f57:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f5a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f60:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f64:	e8 bd fe ff ff       	call   c0004e26 <ld_clust.isra.0>
c0004f69:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f6c:	eb cc                	jmp    c0004f3a <follow_path+0x89>
c0004f6e:	b8 05 00 00 00       	mov    eax,0x5
c0004f73:	83 c4 14             	add    esp,0x14
c0004f76:	5b                   	pop    ebx
c0004f77:	5e                   	pop    esi
c0004f78:	c3                   	ret    

c0004f79 <f_mount>:
c0004f79:	53                   	push   ebx
c0004f7a:	83 ec 18             	sub    esp,0x18
c0004f7d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f81:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f89:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f8d:	e8 fb d2 ff ff       	call   c000228d <get_ldnumber>
c0004f92:	89 c2                	mov    edx,eax
c0004f94:	b8 0b 00 00 00       	mov    eax,0xb
c0004f99:	85 d2                	test   edx,edx
c0004f9b:	78 39                	js     c0004fd6 <f_mount+0x5d>
c0004f9d:	8b 04 95 40 b9 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc46c0]
c0004fa4:	85 c0                	test   eax,eax
c0004fa6:	74 03                	je     c0004fab <f_mount+0x32>
c0004fa8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004fab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004faf:	85 c0                	test   eax,eax
c0004fb1:	74 03                	je     c0004fb6 <f_mount+0x3d>
c0004fb3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004fb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fba:	89 04 95 40 b9 03 c0 	mov    DWORD PTR [edx*4-0x3ffc46c0],eax
c0004fc1:	31 c0                	xor    eax,eax
c0004fc3:	84 db                	test   bl,bl
c0004fc5:	74 0f                	je     c0004fd6 <f_mount+0x5d>
c0004fc7:	31 c9                	xor    ecx,ecx
c0004fc9:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fcd:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004fd1:	e8 65 d7 ff ff       	call   c000273b <mount_volume>
c0004fd6:	83 c4 18             	add    esp,0x18
c0004fd9:	5b                   	pop    ebx
c0004fda:	c3                   	ret    

c0004fdb <f_open>:
c0004fdb:	55                   	push   ebp
c0004fdc:	bd 09 00 00 00       	mov    ebp,0x9
c0004fe1:	57                   	push   edi
c0004fe2:	56                   	push   esi
c0004fe3:	53                   	push   ebx
c0004fe4:	83 ec 7c             	sub    esp,0x7c
c0004fe7:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fee:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004ff5:	85 db                	test   ebx,ebx
c0004ff7:	0f 84 10 04 00 00    	je     c000540d <f_open+0x432>
c0004ffd:	89 fe                	mov    esi,edi
c0004fff:	8d 54 24 20          	lea    edx,[esp+0x20]
c0005003:	83 e6 3f             	and    esi,0x3f
c0005006:	89 f0                	mov    eax,esi
c0005008:	0f b6 c8             	movzx  ecx,al
c000500b:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0005012:	e8 24 d7 ff ff       	call   c000273b <mount_volume>
c0005017:	89 c5                	mov    ebp,eax
c0005019:	85 c0                	test   eax,eax
c000501b:	0f 85 e6 03 00 00    	jne    c0005407 <f_open+0x42c>
c0005021:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005025:	bd 11 00 00 00       	mov    ebp,0x11
c000502a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000502e:	83 ec 0c             	sub    esp,0xc
c0005031:	68 60 04 00 00       	push   0x460
c0005036:	e8 a3 34 00 00       	call   c00084de <ff_memalloc>
c000503b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000503f:	83 c4 10             	add    esp,0x10
c0005042:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0005047:	0f 84 c0 03 00 00    	je     c000540d <f_open+0x432>
c000504d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005051:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005055:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c000505b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c000505e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005061:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0005068:	8d 44 24 24          	lea    eax,[esp+0x24]
c000506c:	e8 40 fe ff ff       	call   c0004eb1 <follow_path>
c0005071:	89 c5                	mov    ebp,eax
c0005073:	85 c0                	test   eax,eax
c0005075:	75 0c                	jne    c0005083 <f_open+0xa8>
c0005077:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c000507c:	79 05                	jns    c0005083 <f_open+0xa8>
c000507e:	bd 06 00 00 00       	mov    ebp,0x6
c0005083:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005089:	0f 84 84 01 00 00    	je     c0005213 <f_open+0x238>
c000508f:	85 ed                	test   ebp,ebp
c0005091:	74 20                	je     c00050b3 <f_open+0xd8>
c0005093:	83 fd 04             	cmp    ebp,0x4
c0005096:	0f 85 58 03 00 00    	jne    c00053f4 <f_open+0x419>
c000509c:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050a0:	83 ce 08             	or     esi,0x8
c00050a3:	e8 8a f2 ff ff       	call   c0004332 <dir_register>
c00050a8:	89 c5                	mov    ebp,eax
c00050aa:	85 c0                	test   eax,eax
c00050ac:	74 2f                	je     c00050dd <f_open+0x102>
c00050ae:	e9 41 03 00 00       	jmp    c00053f4 <f_open+0x419>
c00050b3:	bd 07 00 00 00       	mov    ebp,0x7
c00050b8:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c00050bd:	0f 85 31 03 00 00    	jne    c00053f4 <f_open+0x419>
c00050c3:	bd 08 00 00 00       	mov    ebp,0x8
c00050c8:	f7 c7 04 00 00 00    	test   edi,0x4
c00050ce:	0f 85 20 03 00 00    	jne    c00053f4 <f_open+0x419>
c00050d4:	83 e7 08             	and    edi,0x8
c00050d7:	0f 84 65 01 00 00    	je     c0005242 <f_open+0x267>
c00050dd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00050e1:	8a 02                	mov    al,BYTE PTR [edx]
c00050e3:	3c 04                	cmp    al,0x4
c00050e5:	0f 85 97 00 00 00    	jne    c0005182 <f_open+0x1a7>
c00050eb:	8d 42 10             	lea    eax,[edx+0x10]
c00050ee:	89 13                	mov    DWORD PTR [ebx],edx
c00050f0:	89 da                	mov    edx,ebx
c00050f2:	e8 80 fd ff ff       	call   c0004e77 <init_alloc_info.isra.2>
c00050f7:	31 d2                	xor    edx,edx
c00050f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050fd:	b9 1e 00 00 00       	mov    ecx,0x1e
c0005102:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005105:	83 c0 02             	add    eax,0x2
c0005108:	e8 32 cc ff ff       	call   c0001d3f <mem_set>
c000510d:	b9 1a 00 00 00       	mov    ecx,0x1a
c0005112:	31 d2                	xor    edx,edx
c0005114:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005118:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000511b:	83 c0 26             	add    eax,0x26
c000511e:	e8 1c cc ff ff       	call   c0001d3f <mem_set>
c0005123:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005127:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000512a:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c000512e:	ba 00 00 21 50       	mov    edx,0x50210000
c0005133:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005136:	83 c0 08             	add    eax,0x8
c0005139:	e8 e3 cb ff ff       	call   c0001d21 <st_dword>
c000513e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005142:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005145:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0005149:	8d 44 24 24          	lea    eax,[esp+0x24]
c000514d:	e8 b7 ea ff ff       	call   c0003c09 <store_xdir>
c0005152:	89 c5                	mov    ebp,eax
c0005154:	85 c0                	test   eax,eax
c0005156:	0f 85 98 02 00 00    	jne    c00053f4 <f_open+0x419>
c000515c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000515f:	85 d2                	test   edx,edx
c0005161:	0f 84 db 00 00 00    	je     c0005242 <f_open+0x267>
c0005167:	31 c9                	xor    ecx,ecx
c0005169:	89 d8                	mov    eax,ebx
c000516b:	e8 8e e3 ff ff       	call   c00034fe <remove_chain>
c0005170:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005174:	89 c5                	mov    ebp,eax
c0005176:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005179:	48                   	dec    eax
c000517a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c000517d:	e9 b8 00 00 00       	jmp    c000523a <f_open+0x25f>
c0005182:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0005186:	89 ea                	mov    edx,ebp
c0005188:	e8 99 fc ff ff       	call   c0004e26 <ld_clust.isra.0>
c000518d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005192:	89 c7                	mov    edi,eax
c0005194:	8d 45 0e             	lea    eax,[ebp+0xe]
c0005197:	e8 85 cb ff ff       	call   c0001d21 <st_dword>
c000519c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00051a0:	31 c9                	xor    ecx,ecx
c00051a2:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c00051a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051aa:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00051ae:	e8 9c fc ff ff       	call   c0004e4f <st_clust.isra.1>
c00051b3:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00051b7:	31 d2                	xor    edx,edx
c00051b9:	83 c0 1c             	add    eax,0x1c
c00051bc:	e8 60 cb ff ff       	call   c0001d21 <st_dword>
c00051c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c5:	85 ff                	test   edi,edi
c00051c7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00051cb:	74 75                	je     c0005242 <f_open+0x267>
c00051cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051d1:	31 c9                	xor    ecx,ecx
c00051d3:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c00051d6:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c00051d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00051dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00051e1:	89 fa                	mov    edx,edi
c00051e3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00051e7:	e8 12 e3 ff ff       	call   c00034fe <remove_chain>
c00051ec:	89 c5                	mov    ebp,eax
c00051ee:	85 c0                	test   eax,eax
c00051f0:	0f 85 fe 01 00 00    	jne    c00053f4 <f_open+0x419>
c00051f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051fa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005202:	4f                   	dec    edi
c0005203:	e8 81 d2 ff ff       	call   c0002489 <move_window>
c0005208:	89 c5                	mov    ebp,eax
c000520a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000520e:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0005211:	eb 27                	jmp    c000523a <f_open+0x25f>
c0005213:	85 ed                	test   ebp,ebp
c0005215:	0f 85 d9 01 00 00    	jne    c00053f4 <f_open+0x419>
c000521b:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c000521f:	bd 04 00 00 00       	mov    ebp,0x4
c0005224:	a8 10                	test   al,0x10
c0005226:	0f 85 c8 01 00 00    	jne    c00053f4 <f_open+0x419>
c000522c:	83 e7 02             	and    edi,0x2
c000522f:	74 11                	je     c0005242 <f_open+0x267>
c0005231:	bd 07 00 00 00       	mov    ebp,0x7
c0005236:	a8 01                	test   al,0x1
c0005238:	eb 02                	jmp    c000523c <f_open+0x261>
c000523a:	85 ed                	test   ebp,ebp
c000523c:	0f 85 b2 01 00 00    	jne    c00053f4 <f_open+0x419>
c0005242:	f7 c6 08 00 00 00    	test   esi,0x8
c0005248:	74 03                	je     c000524d <f_open+0x272>
c000524a:	83 ce 40             	or     esi,0x40
c000524d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005251:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0005254:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0005257:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c000525a:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c000525d:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005261:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0005264:	8a 02                	mov    al,BYTE PTR [edx]
c0005266:	3c 04                	cmp    al,0x4
c0005268:	75 2a                	jne    c0005294 <f_open+0x2b9>
c000526a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000526e:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005273:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005276:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000527a:	30 c0                	xor    al,al
c000527c:	09 c8                	or     eax,ecx
c000527e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005281:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005285:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005288:	8d 42 10             	lea    eax,[edx+0x10]
c000528b:	89 da                	mov    edx,ebx
c000528d:	e8 e5 fb ff ff       	call   c0004e77 <init_alloc_info.isra.2>
c0005292:	eb 1c                	jmp    c00052b0 <f_open+0x2d5>
c0005294:	89 fa                	mov    edx,edi
c0005296:	e8 8b fb ff ff       	call   c0004e26 <ld_clust.isra.0>
c000529b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000529e:	8d 47 1c             	lea    eax,[edi+0x1c]
c00052a1:	e8 12 ca ff ff       	call   c0001cb8 <ld_dword>
c00052a6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00052ad:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00052b0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052b4:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c00052bb:	89 03                	mov    DWORD PTR [ebx],eax
c00052bd:	31 d2                	xor    edx,edx
c00052bf:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00052c3:	b9 00 02 00 00       	mov    ecx,0x200
c00052c8:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00052cc:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c00052d0:	89 f0                	mov    eax,esi
c00052d2:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00052d9:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c00052dc:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c00052e3:	8d 43 50             	lea    eax,[ebx+0x50]
c00052e6:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052ed:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052f8:	e8 42 ca ff ff       	call   c0001d3f <mem_set>
c00052fd:	83 e6 20             	and    esi,0x20
c0005300:	75 07                	jne    c0005309 <f_open+0x32e>
c0005302:	31 ed                	xor    ebp,ebp
c0005304:	e9 eb 00 00 00       	jmp    c00053f4 <f_open+0x419>
c0005309:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000530c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000530f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005313:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005317:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000531b:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000531f:	74 e1                	je     c0005302 <f_open+0x327>
c0005321:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005325:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005329:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000532c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000532f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005333:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005336:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000533a:	31 ff                	xor    edi,edi
c000533c:	c1 e5 09             	shl    ebp,0x9
c000533f:	89 ee                	mov    esi,ebp
c0005341:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005345:	89 f8                	mov    eax,edi
c0005347:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000534b:	73 22                	jae    c000536f <f_open+0x394>
c000534d:	89 d8                	mov    eax,ebx
c000534f:	e8 bd dc ff ff       	call   c0003011 <get_fat>
c0005354:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005358:	89 c2                	mov    edx,eax
c000535a:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000535e:	83 f8 01             	cmp    eax,0x1
c0005361:	76 10                	jbe    c0005373 <f_open+0x398>
c0005363:	83 f8 ff             	cmp    eax,0xffffffff
c0005366:	75 d9                	jne    c0005341 <f_open+0x366>
c0005368:	bd 01 00 00 00       	mov    ebp,0x1
c000536d:	eb 09                	jmp    c0005378 <f_open+0x39d>
c000536f:	31 ed                	xor    ebp,ebp
c0005371:	eb 05                	jmp    c0005378 <f_open+0x39d>
c0005373:	bd 02 00 00 00       	mov    ebp,0x2
c0005378:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000537b:	85 ed                	test   ebp,ebp
c000537d:	75 75                	jne    c00053f4 <f_open+0x419>
c000537f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005383:	25 ff 01 00 00       	and    eax,0x1ff
c0005388:	0f 84 74 ff ff ff    	je     c0005302 <f_open+0x327>
c000538e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005392:	bd 02 00 00 00       	mov    ebp,0x2
c0005397:	89 c8                	mov    eax,ecx
c0005399:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000539d:	e8 a2 cb ff ff       	call   c0001f44 <clst2sect>
c00053a2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00053a6:	89 d7                	mov    edi,edx
c00053a8:	09 c7                	or     edi,eax
c00053aa:	74 48                	je     c00053f4 <f_open+0x419>
c00053ac:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00053b0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00053b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00053bc:	0f ac fe 09          	shrd   esi,edi,0x9
c00053c0:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00053c4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00053c8:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00053cb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00053cf:	83 ec 0c             	sub    esp,0xc
c00053d2:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00053d5:	6a 01                	push   0x1
c00053d7:	52                   	push   edx
c00053d8:	50                   	push   eax
c00053d9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00053dd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053e1:	50                   	push   eax
c00053e2:	e8 79 c8 ff ff       	call   c0001c60 <disk_read>
c00053e7:	83 c4 20             	add    esp,0x20
c00053ea:	85 c0                	test   eax,eax
c00053ec:	0f 95 c0             	setne  al
c00053ef:	0f b6 c0             	movzx  eax,al
c00053f2:	89 c5                	mov    ebp,eax
c00053f4:	83 ec 0c             	sub    esp,0xc
c00053f7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053fb:	e8 f4 30 00 00       	call   c00084f4 <ff_memfree>
c0005400:	83 c4 10             	add    esp,0x10
c0005403:	85 ed                	test   ebp,ebp
c0005405:	74 06                	je     c000540d <f_open+0x432>
c0005407:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000540d:	83 c4 7c             	add    esp,0x7c
c0005410:	89 e8                	mov    eax,ebp
c0005412:	5b                   	pop    ebx
c0005413:	5e                   	pop    esi
c0005414:	5f                   	pop    edi
c0005415:	5d                   	pop    ebp
c0005416:	c3                   	ret    

c0005417 <f_read>:
c0005417:	55                   	push   ebp
c0005418:	57                   	push   edi
c0005419:	56                   	push   esi
c000541a:	53                   	push   ebx
c000541b:	83 ec 2c             	sub    esp,0x2c
c000541e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005422:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005426:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000542c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005430:	89 d8                	mov    eax,ebx
c0005432:	e8 77 cf ff ff       	call   c00023ae <validate>
c0005437:	89 c5                	mov    ebp,eax
c0005439:	85 c0                	test   eax,eax
c000543b:	0f 85 4c 02 00 00    	jne    c000568d <f_read+0x276>
c0005441:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005445:	85 ed                	test   ebp,ebp
c0005447:	0f 85 40 02 00 00    	jne    c000568d <f_read+0x276>
c000544d:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005451:	0f 84 31 02 00 00    	je     c0005688 <f_read+0x271>
c0005457:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000545a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000545d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005460:	bf 00 00 00 00       	mov    edi,0x0
c0005465:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005468:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000546c:	89 d1                	mov    ecx,edx
c000546e:	19 f9                	sbb    ecx,edi
c0005470:	0f 83 cf 00 00 00    	jae    c0005545 <f_read+0x12e>
c0005476:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000547a:	e9 c6 00 00 00       	jmp    c0005545 <f_read+0x12e>
c000547f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005482:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005485:	89 d0                	mov    eax,edx
c0005487:	25 ff 01 00 00       	and    eax,0x1ff
c000548c:	0f 85 c9 01 00 00    	jne    c000565b <f_read+0x244>
c0005492:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005496:	89 d6                	mov    esi,edx
c0005498:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000549c:	89 cf                	mov    edi,ecx
c000549e:	48                   	dec    eax
c000549f:	0f ac fe 09          	shrd   esi,edi,0x9
c00054a3:	21 f0                	and    eax,esi
c00054a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054a9:	0f 84 a6 00 00 00    	je     c0005555 <f_read+0x13e>
c00054af:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054b3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054b6:	89 c8                	mov    eax,ecx
c00054b8:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00054bb:	e8 84 ca ff ff       	call   c0001f44 <clst2sect>
c00054c0:	89 d7                	mov    edi,edx
c00054c2:	09 c7                	or     edi,eax
c00054c4:	0f 84 b4 00 00 00    	je     c000557e <f_read+0x167>
c00054ca:	31 ff                	xor    edi,edi
c00054cc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054d0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00054d3:	01 c6                	add    esi,eax
c00054d5:	11 d7                	adc    edi,edx
c00054d7:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054df:	0f 86 fd 00 00 00    	jbe    c00055e2 <f_read+0x1cb>
c00054e5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054ed:	c1 e8 09             	shr    eax,0x9
c00054f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00054f3:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054f7:	03 14 24             	add    edx,DWORD PTR [esp]
c00054fa:	39 c2                	cmp    edx,eax
c00054fc:	76 07                	jbe    c0005505 <f_read+0xee>
c00054fe:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005502:	89 04 24             	mov    DWORD PTR [esp],eax
c0005505:	83 ec 0c             	sub    esp,0xc
c0005508:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000550c:	57                   	push   edi
c000550d:	56                   	push   esi
c000550e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005512:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005516:	50                   	push   eax
c0005517:	e8 44 c7 ff ff       	call   c0001c60 <disk_read>
c000551c:	83 c4 20             	add    esp,0x20
c000551f:	85 c0                	test   eax,eax
c0005521:	75 6e                	jne    c0005591 <f_read+0x17a>
c0005523:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005527:	78 7e                	js     c00055a7 <f_read+0x190>
c0005529:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000552c:	c1 e6 09             	shl    esi,0x9
c000552f:	31 ff                	xor    edi,edi
c0005531:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005535:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005539:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000553d:	01 30                	add    DWORD PTR [eax],esi
c000553f:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005542:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005545:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000554a:	0f 85 2f ff ff ff    	jne    c000547f <f_read+0x68>
c0005550:	e9 38 01 00 00       	jmp    c000568d <f_read+0x276>
c0005555:	89 c8                	mov    eax,ecx
c0005557:	09 d0                	or     eax,edx
c0005559:	75 05                	jne    c0005560 <f_read+0x149>
c000555b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000555e:	eb 19                	jmp    c0005579 <f_read+0x162>
c0005560:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005564:	74 09                	je     c000556f <f_read+0x158>
c0005566:	89 d8                	mov    eax,ebx
c0005568:	e8 f8 c9 ff ff       	call   c0001f65 <clmt_clust>
c000556d:	eb 0a                	jmp    c0005579 <f_read+0x162>
c000556f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005572:	89 d8                	mov    eax,ebx
c0005574:	e8 98 da ff ff       	call   c0003011 <get_fat>
c0005579:	83 f8 01             	cmp    eax,0x1
c000557c:	77 0e                	ja     c000558c <f_read+0x175>
c000557e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005582:	bd 02 00 00 00       	mov    ebp,0x2
c0005587:	e9 01 01 00 00       	jmp    c000568d <f_read+0x276>
c000558c:	83 f8 ff             	cmp    eax,0xffffffff
c000558f:	75 0e                	jne    c000559f <f_read+0x188>
c0005591:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005595:	bd 01 00 00 00       	mov    ebp,0x1
c000559a:	e9 ee 00 00 00       	jmp    c000568d <f_read+0x276>
c000559f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00055a2:	e9 08 ff ff ff       	jmp    c00054af <f_read+0x98>
c00055a7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00055aa:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00055ad:	29 f0                	sub    eax,esi
c00055af:	19 fa                	sbb    edx,edi
c00055b1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00055b4:	89 d7                	mov    edi,edx
c00055b6:	ba 00 00 00 00       	mov    edx,0x0
c00055bb:	89 f9                	mov    ecx,edi
c00055bd:	19 d1                	sbb    ecx,edx
c00055bf:	0f 83 64 ff ff ff    	jae    c0005529 <f_read+0x112>
c00055c5:	89 c7                	mov    edi,eax
c00055c7:	8d 53 50             	lea    edx,[ebx+0x50]
c00055ca:	c1 e7 09             	shl    edi,0x9
c00055cd:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055d1:	b9 00 02 00 00       	mov    ecx,0x200
c00055d6:	01 f8                	add    eax,edi
c00055d8:	e8 4d c7 ff ff       	call   c0001d2a <mem_cpy>
c00055dd:	e9 47 ff ff ff       	jmp    c0005529 <f_read+0x112>
c00055e2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00055e5:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00055e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00055eb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055ef:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055f3:	75 05                	jne    c00055fa <f_read+0x1e3>
c00055f5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055f8:	74 5b                	je     c0005655 <f_read+0x23e>
c00055fa:	8d 43 50             	lea    eax,[ebx+0x50]
c00055fd:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005601:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005605:	79 2a                	jns    c0005631 <f_read+0x21a>
c0005607:	83 ec 0c             	sub    esp,0xc
c000560a:	6a 01                	push   0x1
c000560c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005610:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005614:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005618:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000561c:	50                   	push   eax
c000561d:	e8 54 c6 ff ff       	call   c0001c76 <disk_write>
c0005622:	83 c4 20             	add    esp,0x20
c0005625:	85 c0                	test   eax,eax
c0005627:	0f 85 64 ff ff ff    	jne    c0005591 <f_read+0x17a>
c000562d:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005631:	83 ec 0c             	sub    esp,0xc
c0005634:	6a 01                	push   0x1
c0005636:	57                   	push   edi
c0005637:	56                   	push   esi
c0005638:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000563c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005640:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005644:	50                   	push   eax
c0005645:	e8 16 c6 ff ff       	call   c0001c60 <disk_read>
c000564a:	83 c4 20             	add    esp,0x20
c000564d:	85 c0                	test   eax,eax
c000564f:	0f 85 3c ff ff ff    	jne    c0005591 <f_read+0x17a>
c0005655:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005658:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000565b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000565e:	ba 00 02 00 00       	mov    edx,0x200
c0005663:	25 ff 01 00 00       	and    eax,0x1ff
c0005668:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000566c:	29 c2                	sub    edx,eax
c000566e:	39 d6                	cmp    esi,edx
c0005670:	76 02                	jbe    c0005674 <f_read+0x25d>
c0005672:	89 d6                	mov    esi,edx
c0005674:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005678:	89 f1                	mov    ecx,esi
c000567a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000567e:	e8 a7 c6 ff ff       	call   c0001d2a <mem_cpy>
c0005683:	e9 a7 fe ff ff       	jmp    c000552f <f_read+0x118>
c0005688:	bd 07 00 00 00       	mov    ebp,0x7
c000568d:	83 c4 2c             	add    esp,0x2c
c0005690:	89 e8                	mov    eax,ebp
c0005692:	5b                   	pop    ebx
c0005693:	5e                   	pop    esi
c0005694:	5f                   	pop    edi
c0005695:	5d                   	pop    ebp
c0005696:	c3                   	ret    

c0005697 <f_write>:
c0005697:	55                   	push   ebp
c0005698:	57                   	push   edi
c0005699:	56                   	push   esi
c000569a:	53                   	push   ebx
c000569b:	83 ec 2c             	sub    esp,0x2c
c000569e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00056a2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00056a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00056ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00056b0:	89 d8                	mov    eax,ebx
c00056b2:	e8 f7 cc ff ff       	call   c00023ae <validate>
c00056b7:	89 c5                	mov    ebp,eax
c00056b9:	85 c0                	test   eax,eax
c00056bb:	0f 85 86 02 00 00    	jne    c0005947 <f_write+0x2b0>
c00056c1:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00056c5:	85 ed                	test   ebp,ebp
c00056c7:	0f 85 7a 02 00 00    	jne    c0005947 <f_write+0x2b0>
c00056cd:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00056d1:	0f 84 6b 02 00 00    	je     c0005942 <f_write+0x2ab>
c00056d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056db:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00056de:	0f 84 43 01 00 00    	je     c0005827 <f_write+0x190>
c00056e4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00056e7:	89 c1                	mov    ecx,eax
c00056e9:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056ed:	0f 83 34 01 00 00    	jae    c0005827 <f_write+0x190>
c00056f3:	f7 d0                	not    eax
c00056f5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056f9:	e9 29 01 00 00       	jmp    c0005827 <f_write+0x190>
c00056fe:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005701:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005704:	89 d0                	mov    eax,edx
c0005706:	25 ff 01 00 00       	and    eax,0x1ff
c000570b:	0f 85 00 02 00 00    	jne    c0005911 <f_write+0x27a>
c0005711:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005715:	89 d6                	mov    esi,edx
c0005717:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000571b:	89 cf                	mov    edi,ecx
c000571d:	48                   	dec    eax
c000571e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005722:	21 f0                	and    eax,esi
c0005724:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005728:	0f 84 06 01 00 00    	je     c0005834 <f_write+0x19d>
c000572e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005732:	0f 88 6e 01 00 00    	js     c00058a6 <f_write+0x20f>
c0005738:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000573c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000573f:	89 c8                	mov    eax,ecx
c0005741:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005745:	e8 fa c7 ff ff       	call   c0001f44 <clst2sect>
c000574a:	89 d1                	mov    ecx,edx
c000574c:	09 c1                	or     ecx,eax
c000574e:	0f 84 1c 01 00 00    	je     c0005870 <f_write+0x1d9>
c0005754:	31 ff                	xor    edi,edi
c0005756:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000575a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000575e:	01 c6                	add    esi,eax
c0005760:	11 d7                	adc    edi,edx
c0005762:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000576a:	0f 86 63 01 00 00    	jbe    c00058d3 <f_write+0x23c>
c0005770:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005774:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005778:	c1 e8 09             	shr    eax,0x9
c000577b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000577f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005783:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005787:	39 c2                	cmp    edx,eax
c0005789:	76 08                	jbe    c0005793 <f_write+0xfc>
c000578b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000578f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005793:	83 ec 0c             	sub    esp,0xc
c0005796:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000579a:	57                   	push   edi
c000579b:	56                   	push   esi
c000579c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00057a0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00057a4:	50                   	push   eax
c00057a5:	e8 cc c4 ff ff       	call   c0001c76 <disk_write>
c00057aa:	83 c4 20             	add    esp,0x20
c00057ad:	85 c0                	test   eax,eax
c00057af:	0f 85 ce 00 00 00    	jne    c0005883 <f_write+0x1ec>
c00057b5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00057b8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00057bb:	29 f0                	sub    eax,esi
c00057bd:	19 fa                	sbb    edx,edi
c00057bf:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00057c3:	89 d7                	mov    edi,edx
c00057c5:	ba 00 00 00 00       	mov    edx,0x0
c00057ca:	89 f9                	mov    ecx,edi
c00057cc:	19 d1                	sbb    ecx,edx
c00057ce:	73 1c                	jae    c00057ec <f_write+0x155>
c00057d0:	89 c7                	mov    edi,eax
c00057d2:	b9 00 02 00 00       	mov    ecx,0x200
c00057d7:	c1 e7 09             	shl    edi,0x9
c00057da:	8d 43 50             	lea    eax,[ebx+0x50]
c00057dd:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00057e1:	89 fa                	mov    edx,edi
c00057e3:	e8 42 c5 ff ff       	call   c0001d2a <mem_cpy>
c00057e8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057ec:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057f0:	c1 e6 09             	shl    esi,0x9
c00057f3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057f7:	31 ff                	xor    edi,edi
c00057f9:	01 30                	add    DWORD PTR [eax],esi
c00057fb:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057ff:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005803:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005806:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005809:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000580c:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c000580f:	89 c1                	mov    ecx,eax
c0005811:	39 f2                	cmp    edx,esi
c0005813:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005816:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005819:	19 f9                	sbb    ecx,edi
c000581b:	73 04                	jae    c0005821 <f_write+0x18a>
c000581d:	89 f2                	mov    edx,esi
c000581f:	89 f8                	mov    eax,edi
c0005821:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0005824:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0005827:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000582c:	0f 85 cc fe ff ff    	jne    c00056fe <f_write+0x67>
c0005832:	eb 2e                	jmp    c0005862 <f_write+0x1cb>
c0005834:	89 c8                	mov    eax,ecx
c0005836:	09 d0                	or     eax,edx
c0005838:	75 0b                	jne    c0005845 <f_write+0x1ae>
c000583a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000583d:	31 d2                	xor    edx,edx
c000583f:	85 c0                	test   eax,eax
c0005841:	75 28                	jne    c000586b <f_write+0x1d4>
c0005843:	eb 12                	jmp    c0005857 <f_write+0x1c0>
c0005845:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005849:	74 09                	je     c0005854 <f_write+0x1bd>
c000584b:	89 d8                	mov    eax,ebx
c000584d:	e8 13 c7 ff ff       	call   c0001f65 <clmt_clust>
c0005852:	eb 0a                	jmp    c000585e <f_write+0x1c7>
c0005854:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005857:	89 d8                	mov    eax,ebx
c0005859:	e8 a1 da ff ff       	call   c00032ff <create_chain>
c000585e:	85 c0                	test   eax,eax
c0005860:	75 09                	jne    c000586b <f_write+0x1d4>
c0005862:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005866:	e9 dc 00 00 00       	jmp    c0005947 <f_write+0x2b0>
c000586b:	83 f8 01             	cmp    eax,0x1
c000586e:	75 0e                	jne    c000587e <f_write+0x1e7>
c0005870:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005874:	bd 02 00 00 00       	mov    ebp,0x2
c0005879:	e9 c9 00 00 00       	jmp    c0005947 <f_write+0x2b0>
c000587e:	83 f8 ff             	cmp    eax,0xffffffff
c0005881:	75 0e                	jne    c0005891 <f_write+0x1fa>
c0005883:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005887:	bd 01 00 00 00       	mov    ebp,0x1
c000588c:	e9 b6 00 00 00       	jmp    c0005947 <f_write+0x2b0>
c0005891:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005894:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005898:	0f 85 90 fe ff ff    	jne    c000572e <f_write+0x97>
c000589e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00058a1:	e9 88 fe ff ff       	jmp    c000572e <f_write+0x97>
c00058a6:	83 ec 0c             	sub    esp,0xc
c00058a9:	8d 43 50             	lea    eax,[ebx+0x50]
c00058ac:	6a 01                	push   0x1
c00058ae:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00058b1:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00058b4:	50                   	push   eax
c00058b5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00058b9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00058bd:	50                   	push   eax
c00058be:	e8 b3 c3 ff ff       	call   c0001c76 <disk_write>
c00058c3:	83 c4 20             	add    esp,0x20
c00058c6:	85 c0                	test   eax,eax
c00058c8:	75 b9                	jne    c0005883 <f_write+0x1ec>
c00058ca:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00058ce:	e9 65 fe ff ff       	jmp    c0005738 <f_write+0xa1>
c00058d3:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00058d6:	75 05                	jne    c00058dd <f_write+0x246>
c00058d8:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00058db:	74 2e                	je     c000590b <f_write+0x274>
c00058dd:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00058e0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00058e3:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00058e6:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00058e9:	73 20                	jae    c000590b <f_write+0x274>
c00058eb:	83 ec 0c             	sub    esp,0xc
c00058ee:	8d 43 50             	lea    eax,[ebx+0x50]
c00058f1:	6a 01                	push   0x1
c00058f3:	57                   	push   edi
c00058f4:	56                   	push   esi
c00058f5:	50                   	push   eax
c00058f6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058fa:	50                   	push   eax
c00058fb:	e8 60 c3 ff ff       	call   c0001c60 <disk_read>
c0005900:	83 c4 20             	add    esp,0x20
c0005903:	85 c0                	test   eax,eax
c0005905:	0f 85 78 ff ff ff    	jne    c0005883 <f_write+0x1ec>
c000590b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000590e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005911:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005914:	ba 00 02 00 00       	mov    edx,0x200
c0005919:	25 ff 01 00 00       	and    eax,0x1ff
c000591e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005922:	29 c2                	sub    edx,eax
c0005924:	39 d6                	cmp    esi,edx
c0005926:	76 02                	jbe    c000592a <f_write+0x293>
c0005928:	89 d6                	mov    esi,edx
c000592a:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c000592e:	89 f1                	mov    ecx,esi
c0005930:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005934:	e8 f1 c3 ff ff       	call   c0001d2a <mem_cpy>
c0005939:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c000593d:	e9 b1 fe ff ff       	jmp    c00057f3 <f_write+0x15c>
c0005942:	bd 07 00 00 00       	mov    ebp,0x7
c0005947:	83 c4 2c             	add    esp,0x2c
c000594a:	89 e8                	mov    eax,ebp
c000594c:	5b                   	pop    ebx
c000594d:	5e                   	pop    esi
c000594e:	5f                   	pop    edi
c000594f:	5d                   	pop    ebp
c0005950:	c3                   	ret    

c0005951 <f_sync>:
c0005951:	56                   	push   esi
c0005952:	53                   	push   ebx
c0005953:	83 ec 64             	sub    esp,0x64
c0005956:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000595a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000595e:	89 d8                	mov    eax,ebx
c0005960:	e8 49 ca ff ff       	call   c00023ae <validate>
c0005965:	85 c0                	test   eax,eax
c0005967:	0f 85 ba 01 00 00    	jne    c0005b27 <f_sync+0x1d6>
c000596d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005970:	f6 c2 40             	test   dl,0x40
c0005973:	0f 84 ae 01 00 00    	je     c0005b27 <f_sync+0x1d6>
c0005979:	84 d2                	test   dl,dl
c000597b:	79 33                	jns    c00059b0 <f_sync+0x5f>
c000597d:	83 ec 0c             	sub    esp,0xc
c0005980:	8d 43 50             	lea    eax,[ebx+0x50]
c0005983:	6a 01                	push   0x1
c0005985:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005988:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000598b:	50                   	push   eax
c000598c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005990:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005994:	50                   	push   eax
c0005995:	e8 dc c2 ff ff       	call   c0001c76 <disk_write>
c000599a:	83 c4 20             	add    esp,0x20
c000599d:	89 c2                	mov    edx,eax
c000599f:	b8 01 00 00 00       	mov    eax,0x1
c00059a4:	85 d2                	test   edx,edx
c00059a6:	0f 85 7b 01 00 00    	jne    c0005b27 <f_sync+0x1d6>
c00059ac:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00059b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059b4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00059b7:	0f 85 11 01 00 00    	jne    c0005ace <f_sync+0x17d>
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 13 d6 ff ff       	call   c0002fd7 <fill_first_frag>
c00059c4:	85 c0                	test   eax,eax
c00059c6:	0f 85 5b 01 00 00    	jne    c0005b27 <f_sync+0x1d6>
c00059cc:	83 c9 ff             	or     ecx,0xffffffff
c00059cf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00059d2:	89 d8                	mov    eax,ebx
c00059d4:	e8 c9 d5 ff ff       	call   c0002fa2 <fill_last_frag>
c00059d9:	85 c0                	test   eax,eax
c00059db:	0f 85 46 01 00 00    	jne    c0005b27 <f_sync+0x1d6>
c00059e1:	83 ec 0c             	sub    esp,0xc
c00059e4:	68 60 04 00 00       	push   0x460
c00059e9:	e8 f0 2a 00 00       	call   c00084de <ff_memalloc>
c00059ee:	83 c4 10             	add    esp,0x10
c00059f1:	89 c6                	mov    esi,eax
c00059f3:	b8 11 00 00 00       	mov    eax,0x11
c00059f8:	85 f6                	test   esi,esi
c00059fa:	0f 84 27 01 00 00    	je     c0005b27 <f_sync+0x1d6>
c0005a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a04:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005a0a:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005a0d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005a10:	89 da                	mov    edx,ebx
c0005a12:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a16:	e8 af df ff ff       	call   c00039ca <load_obj_xdir>
c0005a1b:	85 c0                	test   eax,eax
c0005a1d:	0f 85 95 00 00 00    	jne    c0005ab8 <f_sync+0x167>
c0005a23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a27:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a2a:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005a2e:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005a31:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005a34:	83 ca 01             	or     edx,0x1
c0005a37:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c0005a3a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005a3d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a40:	83 c0 34             	add    eax,0x34
c0005a43:	e8 d9 c2 ff ff       	call   c0001d21 <st_dword>
c0005a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a4c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a4f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a52:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a55:	83 c0 38             	add    eax,0x38
c0005a58:	e8 c7 c2 ff ff       	call   c0001d24 <st_qword>
c0005a5d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a64:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a67:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a6a:	83 c0 28             	add    eax,0x28
c0005a6d:	e8 b2 c2 ff ff       	call   c0001d24 <st_qword>
c0005a72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a76:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a7b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a7e:	83 c0 0c             	add    eax,0xc
c0005a81:	e8 9b c2 ff ff       	call   c0001d21 <st_dword>
c0005a86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a8d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a91:	31 d2                	xor    edx,edx
c0005a93:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a96:	83 c0 10             	add    eax,0x10
c0005a99:	e8 83 c2 ff ff       	call   c0001d21 <st_dword>
c0005a9e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005aa2:	e8 62 e1 ff ff       	call   c0003c09 <store_xdir>
c0005aa7:	85 c0                	test   eax,eax
c0005aa9:	75 0d                	jne    c0005ab8 <f_sync+0x167>
c0005aab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005aaf:	e8 00 eb ff ff       	call   c00045b4 <sync_fs>
c0005ab4:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005ab8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005abc:	83 ec 0c             	sub    esp,0xc
c0005abf:	56                   	push   esi
c0005ac0:	e8 2f 2a 00 00       	call   c00084f4 <ff_memfree>
c0005ac5:	83 c4 10             	add    esp,0x10
c0005ac8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005acc:	eb 59                	jmp    c0005b27 <f_sync+0x1d6>
c0005ace:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005ad1:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005ad4:	e8 b0 c9 ff ff       	call   c0002489 <move_window>
c0005ad9:	85 c0                	test   eax,eax
c0005adb:	75 4a                	jne    c0005b27 <f_sync+0x1d6>
c0005add:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005ae0:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005ae4:	89 f2                	mov    edx,esi
c0005ae6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005ae9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aeb:	e8 5f f3 ff ff       	call   c0004e4f <st_clust.isra.1>
c0005af0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005af3:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005af6:	e8 26 c2 ff ff       	call   c0001d21 <st_dword>
c0005afb:	8d 46 16             	lea    eax,[esi+0x16]
c0005afe:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b03:	e8 19 c2 ff ff       	call   c0001d21 <st_dword>
c0005b08:	8d 46 12             	lea    eax,[esi+0x12]
c0005b0b:	31 d2                	xor    edx,edx
c0005b0d:	e8 0b c2 ff ff       	call   c0001d1d <st_word>
c0005b12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b16:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005b1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b1e:	e8 91 ea ff ff       	call   c00045b4 <sync_fs>
c0005b23:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005b27:	83 c4 64             	add    esp,0x64
c0005b2a:	5b                   	pop    ebx
c0005b2b:	5e                   	pop    esi
c0005b2c:	c3                   	ret    

c0005b2d <f_close>:
c0005b2d:	53                   	push   ebx
c0005b2e:	83 ec 24             	sub    esp,0x24
c0005b31:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005b35:	53                   	push   ebx
c0005b36:	e8 16 fe ff ff       	call   c0005951 <f_sync>
c0005b3b:	83 c4 10             	add    esp,0x10
c0005b3e:	85 c0                	test   eax,eax
c0005b40:	75 15                	jne    c0005b57 <f_close+0x2a>
c0005b42:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005b46:	89 d8                	mov    eax,ebx
c0005b48:	e8 61 c8 ff ff       	call   c00023ae <validate>
c0005b4d:	85 c0                	test   eax,eax
c0005b4f:	75 06                	jne    c0005b57 <f_close+0x2a>
c0005b51:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b57:	83 c4 18             	add    esp,0x18
c0005b5a:	5b                   	pop    ebx
c0005b5b:	c3                   	ret    

c0005b5c <f_lseek>:
c0005b5c:	55                   	push   ebp
c0005b5d:	57                   	push   edi
c0005b5e:	56                   	push   esi
c0005b5f:	53                   	push   ebx
c0005b60:	83 ec 3c             	sub    esp,0x3c
c0005b63:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b67:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b6b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b6f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b72:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b76:	89 d8                	mov    eax,ebx
c0005b78:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b7c:	e8 2d c8 ff ff       	call   c00023ae <validate>
c0005b81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b85:	85 c0                	test   eax,eax
c0005b87:	0f 85 7a 04 00 00    	jne    c0006007 <f_lseek+0x4ab>
c0005b8d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b91:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b95:	85 c0                	test   eax,eax
c0005b97:	0f 85 6a 04 00 00    	jne    c0006007 <f_lseek+0x4ab>
c0005b9d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005ba1:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005ba4:	74 0c                	je     c0005bb2 <f_lseek+0x56>
c0005ba6:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005ba9:	85 c0                	test   eax,eax
c0005bab:	75 1f                	jne    c0005bcc <f_lseek+0x70>
c0005bad:	e9 b5 01 00 00       	jmp    c0005d67 <f_lseek+0x20b>
c0005bb2:	83 c9 ff             	or     ecx,0xffffffff
c0005bb5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005bb8:	89 d8                	mov    eax,ebx
c0005bba:	e8 e3 d3 ff ff       	call   c0002fa2 <fill_last_frag>
c0005bbf:	85 c0                	test   eax,eax
c0005bc1:	74 e3                	je     c0005ba6 <f_lseek+0x4a>
c0005bc3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005bc7:	e9 3b 04 00 00       	jmp    c0006007 <f_lseek+0x4ab>
c0005bcc:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005bd1:	0f 85 ac 00 00 00    	jne    c0005c83 <f_lseek+0x127>
c0005bd7:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005bdb:	0f 85 a2 00 00 00    	jne    c0005c83 <f_lseek+0x127>
c0005be1:	8d 78 04             	lea    edi,[eax+0x4]
c0005be4:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005be7:	8b 00                	mov    eax,DWORD PTR [eax]
c0005be9:	be 02 00 00 00       	mov    esi,0x2
c0005bee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005bf2:	85 ed                	test   ebp,ebp
c0005bf4:	74 73                	je     c0005c69 <f_lseek+0x10d>
c0005bf6:	89 e9                	mov    ecx,ebp
c0005bf8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bff:	ff 04 24             	inc    DWORD PTR [esp]
c0005c02:	89 ca                	mov    edx,ecx
c0005c04:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c08:	89 d8                	mov    eax,ebx
c0005c0a:	e8 02 d4 ff ff       	call   c0003011 <get_fat>
c0005c0f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005c13:	83 f8 01             	cmp    eax,0x1
c0005c16:	77 11                	ja     c0005c29 <f_lseek+0xcd>
c0005c18:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005c1c:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005c24:	e9 de 03 00 00       	jmp    c0006007 <f_lseek+0x4ab>
c0005c29:	83 f8 ff             	cmp    eax,0xffffffff
c0005c2c:	75 11                	jne    c0005c3f <f_lseek+0xe3>
c0005c2e:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005c32:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005c3a:	e9 c8 03 00 00       	jmp    c0006007 <f_lseek+0x4ab>
c0005c3f:	8d 51 01             	lea    edx,[ecx+0x1]
c0005c42:	89 c1                	mov    ecx,eax
c0005c44:	39 c2                	cmp    edx,eax
c0005c46:	74 b7                	je     c0005bff <f_lseek+0xa3>
c0005c48:	83 c6 02             	add    esi,0x2
c0005c4b:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c4f:	72 0b                	jb     c0005c5c <f_lseek+0x100>
c0005c51:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c54:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c57:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c59:	83 c7 08             	add    edi,0x8
c0005c5c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c60:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c63:	76 04                	jbe    c0005c69 <f_lseek+0x10d>
c0005c65:	89 c5                	mov    ebp,eax
c0005c67:	eb 8d                	jmp    c0005bf6 <f_lseek+0x9a>
c0005c69:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c6c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c70:	89 30                	mov    DWORD PTR [eax],esi
c0005c72:	0f 87 87 03 00 00    	ja     c0005fff <f_lseek+0x4a3>
c0005c78:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c7e:	e9 84 03 00 00       	jmp    c0006007 <f_lseek+0x4ab>
c0005c83:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c86:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c89:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c8d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c95:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c9c:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005ca0:	73 0f                	jae    c0005cb1 <f_lseek+0x155>
c0005ca2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ca5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ca9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005cad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005cb1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005cb5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005cb9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005cbc:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005cc7:	0f 84 3a 03 00 00    	je     c0006007 <f_lseek+0x4ab>
c0005ccd:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005cd1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005cd5:	83 c6 ff             	add    esi,0xffffffff
c0005cd8:	89 d8                	mov    eax,ebx
c0005cda:	83 d7 ff             	adc    edi,0xffffffff
c0005cdd:	89 f2                	mov    edx,esi
c0005cdf:	89 f9                	mov    ecx,edi
c0005ce1:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005ce5:	89 34 24             	mov    DWORD PTR [esp],esi
c0005ce8:	e8 78 c2 ff ff       	call   c0001f65 <clmt_clust>
c0005ced:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005cf1:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005cf4:	89 c2                	mov    edx,eax
c0005cf6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cfa:	89 c8                	mov    eax,ecx
c0005cfc:	e8 43 c2 ff ff       	call   c0001f44 <clst2sect>
c0005d01:	89 d7                	mov    edi,edx
c0005d03:	09 c7                	or     edi,eax
c0005d05:	0f 84 0d ff ff ff    	je     c0005c18 <f_lseek+0xbc>
c0005d0b:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005d0f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005d15:	0f 84 ec 02 00 00    	je     c0006007 <f_lseek+0x4ab>
c0005d1b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d1f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005d23:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005d26:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005d2a:	0f ac fe 09          	shrd   esi,edi,0x9
c0005d2e:	4d                   	dec    ebp
c0005d2f:	31 ff                	xor    edi,edi
c0005d31:	21 ee                	and    esi,ebp
c0005d33:	01 c6                	add    esi,eax
c0005d35:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005d38:	11 d7                	adc    edi,edx
c0005d3a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005d3d:	39 fa                	cmp    edx,edi
c0005d3f:	75 08                	jne    c0005d49 <f_lseek+0x1ed>
c0005d41:	39 f0                	cmp    eax,esi
c0005d43:	0f 84 be 02 00 00    	je     c0006007 <f_lseek+0x4ab>
c0005d49:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d4c:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d50:	0f 89 80 02 00 00    	jns    c0005fd6 <f_lseek+0x47a>
c0005d56:	83 ec 0c             	sub    esp,0xc
c0005d59:	6a 01                	push   0x1
c0005d5b:	52                   	push   edx
c0005d5c:	50                   	push   eax
c0005d5d:	55                   	push   ebp
c0005d5e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d62:	e9 5a 02 00 00       	jmp    c0005fc1 <f_lseek+0x465>
c0005d67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d6b:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d6e:	74 16                	je     c0005d86 <f_lseek+0x22a>
c0005d70:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d75:	76 0f                	jbe    c0005d86 <f_lseek+0x22a>
c0005d77:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d7e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d86:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d89:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d8c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d8f:	89 c7                	mov    edi,eax
c0005d91:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d95:	73 0d                	jae    c0005da4 <f_lseek+0x248>
c0005d97:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d9b:	75 07                	jne    c0005da4 <f_lseek+0x248>
c0005d9d:	89 14 24             	mov    DWORD PTR [esp],edx
c0005da0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005da4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005da7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005daa:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005dae:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005db5:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005dbc:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005dbf:	75 09                	jne    c0005dca <f_lseek+0x26e>
c0005dc1:	31 f6                	xor    esi,esi
c0005dc3:	31 ff                	xor    edi,edi
c0005dc5:	e9 af 01 00 00       	jmp    c0005f79 <f_lseek+0x41d>
c0005dca:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005dce:	89 d7                	mov    edi,edx
c0005dd0:	c1 e1 09             	shl    ecx,0x9
c0005dd3:	09 c7                	or     edi,eax
c0005dd5:	89 cd                	mov    ebp,ecx
c0005dd7:	74 6d                	je     c0005e46 <f_lseek+0x2ea>
c0005dd9:	83 c0 ff             	add    eax,0xffffffff
c0005ddc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005de0:	83 d2 ff             	adc    edx,0xffffffff
c0005de3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005de6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005dea:	83 c0 ff             	add    eax,0xffffffff
c0005ded:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005df1:	83 d2 ff             	adc    edx,0xffffffff
c0005df4:	31 ff                	xor    edi,edi
c0005df6:	57                   	push   edi
c0005df7:	51                   	push   ecx
c0005df8:	52                   	push   edx
c0005df9:	50                   	push   eax
c0005dfa:	e8 1d 89 01 00       	call   c001e71c <__udivdi3>
c0005dff:	83 c4 10             	add    esp,0x10
c0005e02:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005e06:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005e0a:	57                   	push   edi
c0005e0b:	55                   	push   ebp
c0005e0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005e10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005e14:	e8 03 89 01 00       	call   c001e71c <__udivdi3>
c0005e19:	83 c4 10             	add    esp,0x10
c0005e1c:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005e20:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005e24:	19 d1                	sbb    ecx,edx
c0005e26:	72 1e                	jb     c0005e46 <f_lseek+0x2ea>
c0005e28:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005e2c:	89 e9                	mov    ecx,ebp
c0005e2e:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005e31:	f7 d9                	neg    ecx
c0005e33:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005e36:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005e3a:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005e3d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005e40:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005e44:	eb 28                	jmp    c0005e6e <f_lseek+0x312>
c0005e46:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005e49:	85 c0                	test   eax,eax
c0005e4b:	75 1e                	jne    c0005e6b <f_lseek+0x30f>
c0005e4d:	31 d2                	xor    edx,edx
c0005e4f:	89 d8                	mov    eax,ebx
c0005e51:	e8 a9 d4 ff ff       	call   c00032ff <create_chain>
c0005e56:	83 f8 01             	cmp    eax,0x1
c0005e59:	0f 84 b9 fd ff ff    	je     c0005c18 <f_lseek+0xbc>
c0005e5f:	83 f8 ff             	cmp    eax,0xffffffff
c0005e62:	0f 84 c6 fd ff ff    	je     c0005c2e <f_lseek+0xd2>
c0005e68:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e6b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e6e:	85 c0                	test   eax,eax
c0005e70:	0f 84 4b ff ff ff    	je     c0005dc1 <f_lseek+0x265>
c0005e76:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e7a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e82:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e85:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e89:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e8c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e8f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e93:	0f 83 9d 00 00 00    	jae    c0005f36 <f_lseek+0x3da>
c0005e99:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e9d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005ea1:	29 34 24             	sub    DWORD PTR [esp],esi
c0005ea4:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005ea8:	01 f2                	add    edx,esi
c0005eaa:	11 f9                	adc    ecx,edi
c0005eac:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005eb0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005eb4:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005eb7:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005eba:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005ebd:	f6 c1 02             	test   cl,0x2
c0005ec0:	74 35                	je     c0005ef7 <f_lseek+0x39b>
c0005ec2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005ec6:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005ec9:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005ecc:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005ed0:	73 16                	jae    c0005ee8 <f_lseek+0x38c>
c0005ed2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005ed6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005eda:	88 ca                	mov    dl,cl
c0005edc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005edf:	83 ca 40             	or     edx,0x40
c0005ee2:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005ee5:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005ee8:	89 c2                	mov    edx,eax
c0005eea:	89 d8                	mov    eax,ebx
c0005eec:	e8 0e d4 ff ff       	call   c00032ff <create_chain>
c0005ef1:	85 c0                	test   eax,eax
c0005ef3:	75 0b                	jne    c0005f00 <f_lseek+0x3a4>
c0005ef5:	eb 30                	jmp    c0005f27 <f_lseek+0x3cb>
c0005ef7:	89 c2                	mov    edx,eax
c0005ef9:	89 d8                	mov    eax,ebx
c0005efb:	e8 11 d1 ff ff       	call   c0003011 <get_fat>
c0005f00:	83 f8 ff             	cmp    eax,0xffffffff
c0005f03:	0f 84 25 fd ff ff    	je     c0005c2e <f_lseek+0xd2>
c0005f09:	83 f8 01             	cmp    eax,0x1
c0005f0c:	0f 86 06 fd ff ff    	jbe    c0005c18 <f_lseek+0xbc>
c0005f12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005f16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005f19:	0f 86 f9 fc ff ff    	jbe    c0005c18 <f_lseek+0xbc>
c0005f1f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005f22:	e9 5b ff ff ff       	jmp    c0005e82 <f_lseek+0x326>
c0005f27:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005f2e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005f36:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005f39:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005f3d:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005f40:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005f43:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005f46:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f4c:	0f 84 6f fe ff ff    	je     c0005dc1 <f_lseek+0x265>
c0005f52:	89 c2                	mov    edx,eax
c0005f54:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f58:	e8 e7 bf ff ff       	call   c0001f44 <clst2sect>
c0005f5d:	89 d7                	mov    edi,edx
c0005f5f:	09 c7                	or     edi,eax
c0005f61:	0f 84 b1 fc ff ff    	je     c0005c18 <f_lseek+0xbc>
c0005f67:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f6b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f6e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f72:	c1 ef 09             	shr    edi,0x9
c0005f75:	01 c6                	add    esi,eax
c0005f77:	11 d7                	adc    edi,edx
c0005f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f7c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f7f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f82:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f85:	19 d1                	sbb    ecx,edx
c0005f87:	73 0a                	jae    c0005f93 <f_lseek+0x437>
c0005f89:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f8c:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f8f:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f93:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f98:	74 6d                	je     c0006007 <f_lseek+0x4ab>
c0005f9a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f9d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005fa0:	39 fa                	cmp    edx,edi
c0005fa2:	75 04                	jne    c0005fa8 <f_lseek+0x44c>
c0005fa4:	39 f0                	cmp    eax,esi
c0005fa6:	74 5f                	je     c0006007 <f_lseek+0x4ab>
c0005fa8:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005fab:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005faf:	79 25                	jns    c0005fd6 <f_lseek+0x47a>
c0005fb1:	83 ec 0c             	sub    esp,0xc
c0005fb4:	6a 01                	push   0x1
c0005fb6:	52                   	push   edx
c0005fb7:	50                   	push   eax
c0005fb8:	55                   	push   ebp
c0005fb9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005fbd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005fc1:	50                   	push   eax
c0005fc2:	e8 af bc ff ff       	call   c0001c76 <disk_write>
c0005fc7:	83 c4 20             	add    esp,0x20
c0005fca:	85 c0                	test   eax,eax
c0005fcc:	0f 85 5c fc ff ff    	jne    c0005c2e <f_lseek+0xd2>
c0005fd2:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005fd6:	83 ec 0c             	sub    esp,0xc
c0005fd9:	6a 01                	push   0x1
c0005fdb:	57                   	push   edi
c0005fdc:	56                   	push   esi
c0005fdd:	55                   	push   ebp
c0005fde:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005fe2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005fe6:	50                   	push   eax
c0005fe7:	e8 74 bc ff ff       	call   c0001c60 <disk_read>
c0005fec:	83 c4 20             	add    esp,0x20
c0005fef:	85 c0                	test   eax,eax
c0005ff1:	0f 85 37 fc ff ff    	jne    c0005c2e <f_lseek+0xd2>
c0005ff7:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005ffa:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ffd:	eb 08                	jmp    c0006007 <f_lseek+0x4ab>
c0005fff:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0006007:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000600b:	83 c4 3c             	add    esp,0x3c
c000600e:	5b                   	pop    ebx
c000600f:	5e                   	pop    esi
c0006010:	5f                   	pop    edi
c0006011:	5d                   	pop    ebp
c0006012:	c3                   	ret    

c0006013 <f_opendir>:
c0006013:	56                   	push   esi
c0006014:	b8 09 00 00 00       	mov    eax,0x9
c0006019:	53                   	push   ebx
c000601a:	83 ec 24             	sub    esp,0x24
c000601d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006021:	85 db                	test   ebx,ebx
c0006023:	0f 84 e6 00 00 00    	je     c000610f <f_opendir+0xfc>
c0006029:	31 c9                	xor    ecx,ecx
c000602b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000602f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006033:	e8 03 c7 ff ff       	call   c000273b <mount_volume>
c0006038:	85 c0                	test   eax,eax
c000603a:	0f 85 c9 00 00 00    	jne    c0006109 <f_opendir+0xf6>
c0006040:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006044:	83 ec 0c             	sub    esp,0xc
c0006047:	89 03                	mov    DWORD PTR [ebx],eax
c0006049:	68 60 04 00 00       	push   0x460
c000604e:	e8 8b 24 00 00       	call   c00084de <ff_memalloc>
c0006053:	83 c4 10             	add    esp,0x10
c0006056:	89 c6                	mov    esi,eax
c0006058:	b8 11 00 00 00       	mov    eax,0x11
c000605d:	85 f6                	test   esi,esi
c000605f:	0f 84 aa 00 00 00    	je     c000610f <f_opendir+0xfc>
c0006065:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006069:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000606f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006072:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006075:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0006079:	89 d8                	mov    eax,ebx
c000607b:	e8 31 ee ff ff       	call   c0004eb1 <follow_path>
c0006080:	85 c0                	test   eax,eax
c0006082:	75 61                	jne    c00060e5 <f_opendir+0xd2>
c0006084:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0006088:	78 46                	js     c00060d0 <f_opendir+0xbd>
c000608a:	b8 05 00 00 00       	mov    eax,0x5
c000608f:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006093:	74 50                	je     c00060e5 <f_opendir+0xd2>
c0006095:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006099:	8a 01                	mov    al,BYTE PTR [ecx]
c000609b:	3c 04                	cmp    al,0x4
c000609d:	75 26                	jne    c00060c5 <f_opendir+0xb2>
c000609f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00060a2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00060a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00060a8:	30 d2                	xor    dl,dl
c00060aa:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c00060ae:	09 c2                	or     edx,eax
c00060b0:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00060b3:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c00060b6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00060b9:	89 da                	mov    edx,ebx
c00060bb:	8d 41 10             	lea    eax,[ecx+0x10]
c00060be:	e8 b4 ed ff ff       	call   c0004e77 <init_alloc_info.isra.2>
c00060c3:	eb 0b                	jmp    c00060d0 <f_opendir+0xbd>
c00060c5:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00060c8:	e8 59 ed ff ff       	call   c0004e26 <ld_clust.isra.0>
c00060cd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00060d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060d4:	31 d2                	xor    edx,edx
c00060d6:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c00060da:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00060de:	89 d8                	mov    eax,ebx
c00060e0:	e8 22 d1 ff ff       	call   c0003207 <dir_sdi>
c00060e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060e9:	83 ec 0c             	sub    esp,0xc
c00060ec:	56                   	push   esi
c00060ed:	e8 02 24 00 00       	call   c00084f4 <ff_memfree>
c00060f2:	83 c4 10             	add    esp,0x10
c00060f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060f9:	83 f8 04             	cmp    eax,0x4
c00060fc:	74 06                	je     c0006104 <f_opendir+0xf1>
c00060fe:	85 c0                	test   eax,eax
c0006100:	74 0d                	je     c000610f <f_opendir+0xfc>
c0006102:	eb 05                	jmp    c0006109 <f_opendir+0xf6>
c0006104:	b8 05 00 00 00       	mov    eax,0x5
c0006109:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000610f:	83 c4 24             	add    esp,0x24
c0006112:	5b                   	pop    ebx
c0006113:	5e                   	pop    esi
c0006114:	c3                   	ret    

c0006115 <f_closedir>:
c0006115:	53                   	push   ebx
c0006116:	83 ec 18             	sub    esp,0x18
c0006119:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000611d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006121:	89 d8                	mov    eax,ebx
c0006123:	e8 86 c2 ff ff       	call   c00023ae <validate>
c0006128:	85 c0                	test   eax,eax
c000612a:	75 06                	jne    c0006132 <f_closedir+0x1d>
c000612c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0006132:	83 c4 18             	add    esp,0x18
c0006135:	5b                   	pop    ebx
c0006136:	c3                   	ret    

c0006137 <f_readdir>:
c0006137:	57                   	push   edi
c0006138:	56                   	push   esi
c0006139:	53                   	push   ebx
c000613a:	83 ec 20             	sub    esp,0x20
c000613d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006141:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006145:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006149:	89 d8                	mov    eax,ebx
c000614b:	e8 5e c2 ff ff       	call   c00023ae <validate>
c0006150:	85 c0                	test   eax,eax
c0006152:	75 77                	jne    c00061cb <f_readdir+0x94>
c0006154:	85 ff                	test   edi,edi
c0006156:	75 0b                	jne    c0006163 <f_readdir+0x2c>
c0006158:	31 d2                	xor    edx,edx
c000615a:	89 d8                	mov    eax,ebx
c000615c:	e8 a6 d0 ff ff       	call   c0003207 <dir_sdi>
c0006161:	eb 68                	jmp    c00061cb <f_readdir+0x94>
c0006163:	83 ec 0c             	sub    esp,0xc
c0006166:	68 60 04 00 00       	push   0x460
c000616b:	e8 6e 23 00 00       	call   c00084de <ff_memalloc>
c0006170:	83 c4 10             	add    esp,0x10
c0006173:	89 c6                	mov    esi,eax
c0006175:	b8 11 00 00 00       	mov    eax,0x11
c000617a:	85 f6                	test   esi,esi
c000617c:	74 4d                	je     c00061cb <f_readdir+0x94>
c000617e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006182:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006188:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000618b:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000618e:	31 d2                	xor    edx,edx
c0006190:	89 d8                	mov    eax,ebx
c0006192:	e8 80 d8 ff ff       	call   c0003a17 <dir_read>
c0006197:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000619c:	75 19                	jne    c00061b7 <f_readdir+0x80>
c000619e:	89 fa                	mov    edx,edi
c00061a0:	89 d8                	mov    eax,ebx
c00061a2:	e8 7e ea ff ff       	call   c0004c25 <get_fileinfo>
c00061a7:	31 d2                	xor    edx,edx
c00061a9:	89 d8                	mov    eax,ebx
c00061ab:	e8 af d5 ff ff       	call   c000375f <dir_next>
c00061b0:	83 f8 04             	cmp    eax,0x4
c00061b3:	75 02                	jne    c00061b7 <f_readdir+0x80>
c00061b5:	31 c0                	xor    eax,eax
c00061b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00061bb:	83 ec 0c             	sub    esp,0xc
c00061be:	56                   	push   esi
c00061bf:	e8 30 23 00 00       	call   c00084f4 <ff_memfree>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00061cb:	83 c4 20             	add    esp,0x20
c00061ce:	5b                   	pop    ebx
c00061cf:	5e                   	pop    esi
c00061d0:	5f                   	pop    edi
c00061d1:	c3                   	ret    

c00061d2 <f_stat>:
c00061d2:	57                   	push   edi
c00061d3:	31 c9                	xor    ecx,ecx
c00061d5:	56                   	push   esi
c00061d6:	53                   	push   ebx
c00061d7:	83 ec 50             	sub    esp,0x50
c00061da:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c00061de:	8d 54 24 04          	lea    edx,[esp+0x4]
c00061e2:	8d 44 24 60          	lea    eax,[esp+0x60]
c00061e6:	e8 50 c5 ff ff       	call   c000273b <mount_volume>
c00061eb:	89 c3                	mov    ebx,eax
c00061ed:	85 c0                	test   eax,eax
c00061ef:	75 67                	jne    c0006258 <f_stat+0x86>
c00061f1:	83 ec 0c             	sub    esp,0xc
c00061f4:	bb 11 00 00 00       	mov    ebx,0x11
c00061f9:	68 60 04 00 00       	push   0x460
c00061fe:	e8 db 22 00 00       	call   c00084de <ff_memalloc>
c0006203:	83 c4 10             	add    esp,0x10
c0006206:	89 c6                	mov    esi,eax
c0006208:	85 c0                	test   eax,eax
c000620a:	74 4c                	je     c0006258 <f_stat+0x86>
c000620c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006210:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006216:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006219:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000621c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0006220:	8d 44 24 04          	lea    eax,[esp+0x4]
c0006224:	e8 88 ec ff ff       	call   c0004eb1 <follow_path>
c0006229:	89 c3                	mov    ebx,eax
c000622b:	85 c0                	test   eax,eax
c000622d:	75 1d                	jne    c000624c <f_stat+0x7a>
c000622f:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0006234:	78 11                	js     c0006247 <f_stat+0x75>
c0006236:	85 ff                	test   edi,edi
c0006238:	74 12                	je     c000624c <f_stat+0x7a>
c000623a:	89 fa                	mov    edx,edi
c000623c:	8d 44 24 04          	lea    eax,[esp+0x4]
c0006240:	e8 e0 e9 ff ff       	call   c0004c25 <get_fileinfo>
c0006245:	eb 05                	jmp    c000624c <f_stat+0x7a>
c0006247:	bb 06 00 00 00       	mov    ebx,0x6
c000624c:	83 ec 0c             	sub    esp,0xc
c000624f:	56                   	push   esi
c0006250:	e8 9f 22 00 00       	call   c00084f4 <ff_memfree>
c0006255:	83 c4 10             	add    esp,0x10
c0006258:	83 c4 50             	add    esp,0x50
c000625b:	89 d8                	mov    eax,ebx
c000625d:	5b                   	pop    ebx
c000625e:	5e                   	pop    esi
c000625f:	5f                   	pop    edi
c0006260:	c3                   	ret    

c0006261 <f_getfree>:
c0006261:	55                   	push   ebp
c0006262:	31 c9                	xor    ecx,ecx
c0006264:	57                   	push   edi
c0006265:	56                   	push   esi
c0006266:	53                   	push   ebx
c0006267:	83 ec 5c             	sub    esp,0x5c
c000626a:	8d 54 24 24          	lea    edx,[esp+0x24]
c000626e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006272:	e8 c4 c4 ff ff       	call   c000273b <mount_volume>
c0006277:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000627b:	85 c0                	test   eax,eax
c000627d:	0f 85 9d 01 00 00    	jne    c0006420 <f_getfree+0x1bf>
c0006283:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006287:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000628b:	89 02                	mov    DWORD PTR [edx],eax
c000628d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006290:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006293:	8d 71 fe             	lea    esi,[ecx-0x2]
c0006296:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000629a:	39 f2                	cmp    edx,esi
c000629c:	77 0b                	ja     c00062a9 <f_getfree+0x48>
c000629e:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00062a2:	89 10                	mov    DWORD PTR [eax],edx
c00062a4:	e9 77 01 00 00       	jmp    c0006420 <f_getfree+0x1bf>
c00062a9:	8a 10                	mov    dl,BYTE PTR [eax]
c00062ab:	80 fa 01             	cmp    dl,0x1
c00062ae:	75 3a                	jne    c00062ea <f_getfree+0x89>
c00062b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00062b4:	be 02 00 00 00       	mov    esi,0x2
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	89 f2                	mov    edx,esi
c00062bd:	8d 44 24 28          	lea    eax,[esp+0x28]
c00062c1:	e8 4b cd ff ff       	call   c0003011 <get_fat>
c00062c6:	83 f8 ff             	cmp    eax,0xffffffff
c00062c9:	0f 84 28 01 00 00    	je     c00063f7 <f_getfree+0x196>
c00062cf:	83 f8 01             	cmp    eax,0x1
c00062d2:	0f 84 29 01 00 00    	je     c0006401 <f_getfree+0x1a0>
c00062d8:	83 d3 00             	adc    ebx,0x0
c00062db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062df:	46                   	inc    esi
c00062e0:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c00062e3:	77 d6                	ja     c00062bb <f_getfree+0x5a>
c00062e5:	e9 25 01 00 00       	jmp    c000640f <f_getfree+0x1ae>
c00062ea:	80 fa 04             	cmp    dl,0x4
c00062ed:	0f 85 88 00 00 00    	jne    c000637b <f_getfree+0x11a>
c00062f3:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062f6:	31 ed                	xor    ebp,ebp
c00062f8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062fb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006303:	31 db                	xor    ebx,ebx
c0006305:	85 ed                	test   ebp,ebp
c0006307:	75 3f                	jne    c0006348 <f_getfree+0xe7>
c0006309:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000630d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006311:	83 c0 01             	add    eax,0x1
c0006314:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006318:	83 d2 00             	adc    edx,0x0
c000631b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000631f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006323:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006327:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000632b:	e8 59 c1 ff ff       	call   c0002489 <move_window>
c0006330:	85 c0                	test   eax,eax
c0006332:	0f 85 d3 00 00 00    	jne    c000640b <f_getfree+0x1aa>
c0006338:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000633c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006340:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006344:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006348:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634c:	8d 4e f8             	lea    ecx,[esi-0x8]
c000634f:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006353:	89 cf                	mov    edi,ecx
c0006355:	85 f6                	test   esi,esi
c0006357:	74 12                	je     c000636b <f_getfree+0x10a>
c0006359:	88 c1                	mov    cl,al
c000635b:	83 e1 01             	and    ecx,0x1
c000635e:	80 f9 01             	cmp    cl,0x1
c0006361:	83 d3 00             	adc    ebx,0x0
c0006364:	d0 e8                	shr    al,1
c0006366:	4e                   	dec    esi
c0006367:	39 fe                	cmp    esi,edi
c0006369:	75 ea                	jne    c0006355 <f_getfree+0xf4>
c000636b:	45                   	inc    ebp
c000636c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006372:	85 f6                	test   esi,esi
c0006374:	75 8f                	jne    c0006305 <f_getfree+0xa4>
c0006376:	e9 94 00 00 00       	jmp    c000640f <f_getfree+0x1ae>
c000637b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000637e:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006381:	31 f6                	xor    esi,esi
c0006383:	31 db                	xor    ebx,ebx
c0006385:	85 f6                	test   esi,esi
c0006387:	75 1b                	jne    c00063a4 <f_getfree+0x143>
c0006389:	89 d7                	mov    edi,edx
c000638b:	89 cd                	mov    ebp,ecx
c000638d:	83 c7 01             	add    edi,0x1
c0006390:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006394:	83 d5 00             	adc    ebp,0x0
c0006397:	e8 ed c0 ff ff       	call   c0002489 <move_window>
c000639c:	85 c0                	test   eax,eax
c000639e:	75 6b                	jne    c000640b <f_getfree+0x1aa>
c00063a0:	89 fa                	mov    edx,edi
c00063a2:	89 e9                	mov    ecx,ebp
c00063a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063a8:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00063ac:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c00063b0:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00063b3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00063b7:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00063bb:	75 11                	jne    c00063ce <f_getfree+0x16d>
c00063bd:	e8 e9 b8 ff ff       	call   c0001cab <ld_word>
c00063c2:	66 83 f8 01          	cmp    ax,0x1
c00063c6:	83 d3 00             	adc    ebx,0x0
c00063c9:	83 c6 02             	add    esi,0x2
c00063cc:	eb 13                	jmp    c00063e1 <f_getfree+0x180>
c00063ce:	e8 e5 b8 ff ff       	call   c0001cb8 <ld_dword>
c00063d3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00063d8:	83 f8 01             	cmp    eax,0x1
c00063db:	83 d3 00             	adc    ebx,0x0
c00063de:	83 c6 04             	add    esi,0x4
c00063e1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00063e7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063eb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063ef:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063f3:	75 90                	jne    c0006385 <f_getfree+0x124>
c00063f5:	eb 18                	jmp    c000640f <f_getfree+0x1ae>
c00063f7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063ff:	eb 0e                	jmp    c000640f <f_getfree+0x1ae>
c0006401:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c0006409:	eb 04                	jmp    c000640f <f_getfree+0x1ae>
c000640b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000640f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006413:	89 18                	mov    DWORD PTR [eax],ebx
c0006415:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006419:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c000641c:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006420:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006424:	83 c4 5c             	add    esp,0x5c
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <f_truncate>:
c000642c:	56                   	push   esi
c000642d:	53                   	push   ebx
c000642e:	83 ec 14             	sub    esp,0x14
c0006431:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006435:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0006439:	89 d8                	mov    eax,ebx
c000643b:	e8 6e bf ff ff       	call   c00023ae <validate>
c0006440:	89 c6                	mov    esi,eax
c0006442:	85 c0                	test   eax,eax
c0006444:	0f 85 d2 00 00 00    	jne    c000651c <f_truncate+0xf0>
c000644a:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c000644e:	85 f6                	test   esi,esi
c0006450:	0f 85 c6 00 00 00    	jne    c000651c <f_truncate+0xf0>
c0006456:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000645a:	0f 84 b7 00 00 00    	je     c0006517 <f_truncate+0xeb>
c0006460:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006463:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006466:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006469:	89 d1                	mov    ecx,edx
c000646b:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c000646e:	0f 83 a8 00 00 00    	jae    c000651c <f_truncate+0xf0>
c0006474:	09 c2                	or     edx,eax
c0006476:	75 15                	jne    c000648d <f_truncate+0x61>
c0006478:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000647b:	31 c9                	xor    ecx,ecx
c000647d:	89 d8                	mov    eax,ebx
c000647f:	e8 7a d0 ff ff       	call   c00034fe <remove_chain>
c0006484:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000648b:	eb 35                	jmp    c00064c2 <f_truncate+0x96>
c000648d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006490:	89 d8                	mov    eax,ebx
c0006492:	e8 7a cb ff ff       	call   c0003011 <get_fat>
c0006497:	89 c2                	mov    edx,eax
c0006499:	b8 01 00 00 00       	mov    eax,0x1
c000649e:	83 fa ff             	cmp    edx,0xffffffff
c00064a1:	74 1f                	je     c00064c2 <f_truncate+0x96>
c00064a3:	b8 02 00 00 00       	mov    eax,0x2
c00064a8:	83 fa 01             	cmp    edx,0x1
c00064ab:	74 15                	je     c00064c2 <f_truncate+0x96>
c00064ad:	31 c0                	xor    eax,eax
c00064af:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00064b3:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c00064b6:	76 0a                	jbe    c00064c2 <f_truncate+0x96>
c00064b8:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00064bb:	89 d8                	mov    eax,ebx
c00064bd:	e8 3c d0 ff ff       	call   c00034fe <remove_chain>
c00064c2:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00064c5:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00064c8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00064cb:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00064ce:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00064d1:	83 ca 40             	or     edx,0x40
c00064d4:	85 c0                	test   eax,eax
c00064d6:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00064d9:	75 35                	jne    c0006510 <f_truncate+0xe4>
c00064db:	84 d2                	test   dl,dl
c00064dd:	79 3d                	jns    c000651c <f_truncate+0xf0>
c00064df:	83 ec 0c             	sub    esp,0xc
c00064e2:	8d 43 50             	lea    eax,[ebx+0x50]
c00064e5:	6a 01                	push   0x1
c00064e7:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064ea:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064ed:	50                   	push   eax
c00064ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064f2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064f6:	50                   	push   eax
c00064f7:	e8 7a b7 ff ff       	call   c0001c76 <disk_write>
c00064fc:	83 c4 20             	add    esp,0x20
c00064ff:	85 c0                	test   eax,eax
c0006501:	75 08                	jne    c000650b <f_truncate+0xdf>
c0006503:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0006507:	31 f6                	xor    esi,esi
c0006509:	eb 11                	jmp    c000651c <f_truncate+0xf0>
c000650b:	b8 01 00 00 00       	mov    eax,0x1
c0006510:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006513:	89 c6                	mov    esi,eax
c0006515:	eb 05                	jmp    c000651c <f_truncate+0xf0>
c0006517:	be 07 00 00 00       	mov    esi,0x7
c000651c:	89 f0                	mov    eax,esi
c000651e:	83 c4 14             	add    esp,0x14
c0006521:	5b                   	pop    ebx
c0006522:	5e                   	pop    esi
c0006523:	c3                   	ret    

c0006524 <f_unlink>:
c0006524:	56                   	push   esi
c0006525:	b9 02 00 00 00       	mov    ecx,0x2
c000652a:	53                   	push   ebx
c000652b:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006531:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006535:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c000653c:	e8 fa c1 ff ff       	call   c000273b <mount_volume>
c0006541:	85 c0                	test   eax,eax
c0006543:	0f 85 55 01 00 00    	jne    c000669e <f_unlink+0x17a>
c0006549:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000654d:	83 ec 0c             	sub    esp,0xc
c0006550:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006554:	68 60 04 00 00       	push   0x460
c0006559:	e8 80 1f 00 00       	call   c00084de <ff_memalloc>
c000655e:	83 c4 10             	add    esp,0x10
c0006561:	89 c3                	mov    ebx,eax
c0006563:	b8 11 00 00 00       	mov    eax,0x11
c0006568:	85 db                	test   ebx,ebx
c000656a:	0f 84 2e 01 00 00    	je     c000669e <f_unlink+0x17a>
c0006570:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006574:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000657a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000657d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006580:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006587:	8d 44 24 48          	lea    eax,[esp+0x48]
c000658b:	e8 21 e9 ff ff       	call   c0004eb1 <follow_path>
c0006590:	85 c0                	test   eax,eax
c0006592:	0f 85 f2 00 00 00    	jne    c000668a <f_unlink+0x166>
c0006598:	b8 06 00 00 00       	mov    eax,0x6
c000659d:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c00065a5:	0f 88 df 00 00 00    	js     c000668a <f_unlink+0x166>
c00065ab:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c00065b0:	74 0a                	je     c00065bc <f_unlink+0x98>
c00065b2:	b8 07 00 00 00       	mov    eax,0x7
c00065b7:	e9 ce 00 00 00       	jmp    c000668a <f_unlink+0x166>
c00065bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00065c0:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00065c4:	8a 02                	mov    al,BYTE PTR [edx]
c00065c6:	3c 04                	cmp    al,0x4
c00065c8:	75 12                	jne    c00065dc <f_unlink+0xb8>
c00065ca:	8d 42 10             	lea    eax,[edx+0x10]
c00065cd:	8d 54 24 20          	lea    edx,[esp+0x20]
c00065d1:	e8 a1 e8 ff ff       	call   c0004e77 <init_alloc_info.isra.2>
c00065d6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00065da:	eb 0e                	jmp    c00065ea <f_unlink+0xc6>
c00065dc:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00065e3:	e8 3e e8 ff ff       	call   c0004e26 <ld_clust.isra.0>
c00065e8:	89 c6                	mov    esi,eax
c00065ea:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065ef:	75 12                	jne    c0006603 <f_unlink+0xdf>
c00065f1:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065f5:	e8 94 d6 ff ff       	call   c0003c8e <dir_remove>
c00065fa:	85 c0                	test   eax,eax
c00065fc:	74 6c                	je     c000666a <f_unlink+0x146>
c00065fe:	e9 87 00 00 00       	jmp    c000668a <f_unlink+0x166>
c0006603:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006607:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c000660e:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006615:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006618:	75 21                	jne    c000663b <f_unlink+0x117>
c000661a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000661e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006622:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c0006629:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006630:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006634:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000663b:	31 d2                	xor    edx,edx
c000663d:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006644:	e8 be cb ff ff       	call   c0003207 <dir_sdi>
c0006649:	85 c0                	test   eax,eax
c000664b:	75 3d                	jne    c000668a <f_unlink+0x166>
c000664d:	31 d2                	xor    edx,edx
c000664f:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006656:	e8 bc d3 ff ff       	call   c0003a17 <dir_read>
c000665b:	85 c0                	test   eax,eax
c000665d:	0f 84 4f ff ff ff    	je     c00065b2 <f_unlink+0x8e>
c0006663:	83 f8 04             	cmp    eax,0x4
c0006666:	75 22                	jne    c000668a <f_unlink+0x166>
c0006668:	eb 87                	jmp    c00065f1 <f_unlink+0xcd>
c000666a:	85 f6                	test   esi,esi
c000666c:	75 0b                	jne    c0006679 <f_unlink+0x155>
c000666e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006672:	e8 3d df ff ff       	call   c00045b4 <sync_fs>
c0006677:	eb 11                	jmp    c000668a <f_unlink+0x166>
c0006679:	31 c9                	xor    ecx,ecx
c000667b:	89 f2                	mov    edx,esi
c000667d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006681:	e8 78 ce ff ff       	call   c00034fe <remove_chain>
c0006686:	85 c0                	test   eax,eax
c0006688:	74 e4                	je     c000666e <f_unlink+0x14a>
c000668a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000668e:	83 ec 0c             	sub    esp,0xc
c0006691:	53                   	push   ebx
c0006692:	e8 5d 1e 00 00       	call   c00084f4 <ff_memfree>
c0006697:	83 c4 10             	add    esp,0x10
c000669a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000669e:	81 c4 e4 00 00 00    	add    esp,0xe4
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	c3                   	ret    

c00066a7 <f_mkdir>:
c00066a7:	57                   	push   edi
c00066a8:	b9 02 00 00 00       	mov    ecx,0x2
c00066ad:	56                   	push   esi
c00066ae:	53                   	push   ebx
c00066af:	83 c4 80             	add    esp,0xffffff80
c00066b2:	8d 54 24 08          	lea    edx,[esp+0x8]
c00066b6:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c00066bd:	e8 79 c0 ff ff       	call   c000273b <mount_volume>
c00066c2:	89 c3                	mov    ebx,eax
c00066c4:	85 c0                	test   eax,eax
c00066c6:	0f 85 fe 01 00 00    	jne    c00068ca <f_mkdir+0x223>
c00066cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d0:	bb 11 00 00 00       	mov    ebx,0x11
c00066d5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00066d9:	83 ec 0c             	sub    esp,0xc
c00066dc:	68 60 04 00 00       	push   0x460
c00066e1:	e8 f8 1d 00 00       	call   c00084de <ff_memalloc>
c00066e6:	83 c4 10             	add    esp,0x10
c00066e9:	89 c7                	mov    edi,eax
c00066eb:	85 c0                	test   eax,eax
c00066ed:	0f 84 d7 01 00 00    	je     c00068ca <f_mkdir+0x223>
c00066f3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066f7:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006700:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006703:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000670a:	8d 44 24 34          	lea    eax,[esp+0x34]
c000670e:	e8 9e e7 ff ff       	call   c0004eb1 <follow_path>
c0006713:	89 c3                	mov    ebx,eax
c0006715:	85 c0                	test   eax,eax
c0006717:	74 3e                	je     c0006757 <f_mkdir+0xb0>
c0006719:	83 f8 04             	cmp    eax,0x4
c000671c:	75 3e                	jne    c000675c <f_mkdir+0xb5>
c000671e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006722:	31 d2                	xor    edx,edx
c0006724:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006728:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000672c:	e8 ce cb ff ff       	call   c00032ff <create_chain>
c0006731:	89 c6                	mov    esi,eax
c0006733:	85 c0                	test   eax,eax
c0006735:	74 0c                	je     c0006743 <f_mkdir+0x9c>
c0006737:	bb 02 00 00 00       	mov    ebx,0x2
c000673c:	83 f8 01             	cmp    eax,0x1
c000673f:	74 07                	je     c0006748 <f_mkdir+0xa1>
c0006741:	eb 2a                	jmp    c000676d <f_mkdir+0xc6>
c0006743:	bb 07 00 00 00       	mov    ebx,0x7
c0006748:	31 c9                	xor    ecx,ecx
c000674a:	89 f2                	mov    edx,esi
c000674c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006750:	e8 a9 cd ff ff       	call   c00034fe <remove_chain>
c0006755:	eb 05                	jmp    c000675c <f_mkdir+0xb5>
c0006757:	bb 08 00 00 00       	mov    ebx,0x8
c000675c:	83 ec 0c             	sub    esp,0xc
c000675f:	57                   	push   edi
c0006760:	e8 8f 1d 00 00       	call   c00084f4 <ff_memfree>
c0006765:	83 c4 10             	add    esp,0x10
c0006768:	e9 5d 01 00 00       	jmp    c00068ca <f_mkdir+0x223>
c000676d:	bb 01 00 00 00       	mov    ebx,0x1
c0006772:	83 f8 ff             	cmp    eax,0xffffffff
c0006775:	74 d1                	je     c0006748 <f_mkdir+0xa1>
c0006777:	89 f2                	mov    edx,esi
c0006779:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000677d:	e8 c4 ce ff ff       	call   c0003646 <dir_clear>
c0006782:	89 c3                	mov    ebx,eax
c0006784:	85 c0                	test   eax,eax
c0006786:	75 c0                	jne    c0006748 <f_mkdir+0xa1>
c0006788:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000678f:	74 69                	je     c00067fa <f_mkdir+0x153>
c0006791:	b9 0b 00 00 00       	mov    ecx,0xb
c0006796:	83 c0 54             	add    eax,0x54
c0006799:	ba 20 00 00 00       	mov    edx,0x20
c000679e:	e8 9c b5 ff ff       	call   c0001d3f <mem_set>
c00067a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a7:	ba 00 00 21 50       	mov    edx,0x50210000
c00067ac:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c00067b0:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c00067b4:	83 c0 6a             	add    eax,0x6a
c00067b7:	e8 65 b5 ff ff       	call   c0001d21 <st_dword>
c00067bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c0:	89 f1                	mov    ecx,esi
c00067c2:	8d 50 54             	lea    edx,[eax+0x54]
c00067c5:	e8 85 e6 ff ff       	call   c0004e4f <st_clust.isra.1>
c00067ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ce:	b9 20 00 00 00       	mov    ecx,0x20
c00067d3:	8d 50 54             	lea    edx,[eax+0x54]
c00067d6:	83 c0 74             	add    eax,0x74
c00067d9:	e8 4c b5 ff ff       	call   c0001d2a <mem_cpy>
c00067de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e2:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00067e6:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067ea:	8d 50 74             	lea    edx,[eax+0x74]
c00067ed:	e8 5d e6 ff ff       	call   c0004e4f <st_clust.isra.1>
c00067f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067fa:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067fe:	e8 2f db ff ff       	call   c0004332 <dir_register>
c0006803:	89 c3                	mov    ebx,eax
c0006805:	85 c0                	test   eax,eax
c0006807:	0f 85 3b ff ff ff    	jne    c0006748 <f_mkdir+0xa1>
c000680d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006811:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006814:	75 74                	jne    c000688a <f_mkdir+0x1e3>
c0006816:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006819:	ba 00 00 21 50       	mov    edx,0x50210000
c000681e:	83 c0 0c             	add    eax,0xc
c0006821:	e8 fb b4 ff ff       	call   c0001d21 <st_dword>
c0006826:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000682a:	89 f2                	mov    edx,esi
c000682c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000682f:	83 c0 34             	add    eax,0x34
c0006832:	e8 ea b4 ff ff       	call   c0001d21 <st_dword>
c0006837:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000683b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000683f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006842:	c1 e2 09             	shl    edx,0x9
c0006845:	83 c0 38             	add    eax,0x38
c0006848:	e8 d4 b4 ff ff       	call   c0001d21 <st_dword>
c000684d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006851:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006855:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006858:	c1 e2 09             	shl    edx,0x9
c000685b:	83 c0 28             	add    eax,0x28
c000685e:	e8 be b4 ff ff       	call   c0001d21 <st_dword>
c0006863:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006867:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000686a:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c000686e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006871:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006875:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006879:	e8 8b d3 ff ff       	call   c0003c09 <store_xdir>
c000687e:	89 c3                	mov    ebx,eax
c0006880:	85 c0                	test   eax,eax
c0006882:	0f 85 d4 fe ff ff    	jne    c000675c <f_mkdir+0xb5>
c0006888:	eb 30                	jmp    c00068ba <f_mkdir+0x213>
c000688a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000688e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006893:	83 c0 16             	add    eax,0x16
c0006896:	e8 86 b4 ff ff       	call   c0001d21 <st_dword>
c000689b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000689f:	89 f1                	mov    ecx,esi
c00068a1:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c00068a5:	e8 a5 e5 ff ff       	call   c0004e4f <st_clust.isra.1>
c00068aa:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00068ae:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c00068b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00068b6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00068be:	e8 f1 dc ff ff       	call   c00045b4 <sync_fs>
c00068c3:	89 c3                	mov    ebx,eax
c00068c5:	e9 92 fe ff ff       	jmp    c000675c <f_mkdir+0xb5>
c00068ca:	83 ec 80             	sub    esp,0xffffff80
c00068cd:	89 d8                	mov    eax,ebx
c00068cf:	5b                   	pop    ebx
c00068d0:	5e                   	pop    esi
c00068d1:	5f                   	pop    edi
c00068d2:	c3                   	ret    

c00068d3 <f_rename>:
c00068d3:	55                   	push   ebp
c00068d4:	57                   	push   edi
c00068d5:	56                   	push   esi
c00068d6:	53                   	push   ebx
c00068d7:	81 ec fc 00 00 00    	sub    esp,0xfc
c00068dd:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00068e4:	e8 a4 b9 ff ff       	call   c000228d <get_ldnumber>
c00068e9:	b9 02 00 00 00       	mov    ecx,0x2
c00068ee:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068f2:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068f9:	e8 3d be ff ff       	call   c000273b <mount_volume>
c00068fe:	85 c0                	test   eax,eax
c0006900:	0f 85 b5 02 00 00    	jne    c0006bbb <f_rename+0x2e8>
c0006906:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000690a:	83 ec 0c             	sub    esp,0xc
c000690d:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006911:	68 60 04 00 00       	push   0x460
c0006916:	e8 c3 1b 00 00       	call   c00084de <ff_memalloc>
c000691b:	83 c4 10             	add    esp,0x10
c000691e:	89 c3                	mov    ebx,eax
c0006920:	b8 11 00 00 00       	mov    eax,0x11
c0006925:	85 db                	test   ebx,ebx
c0006927:	0f 84 8e 02 00 00    	je     c0006bbb <f_rename+0x2e8>
c000692d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006931:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006937:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000693a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000693d:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006944:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006948:	e8 64 e5 ff ff       	call   c0004eb1 <follow_path>
c000694d:	85 c0                	test   eax,eax
c000694f:	0f 85 52 02 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c0006955:	b8 06 00 00 00       	mov    eax,0x6
c000695a:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006962:	0f 85 3f 02 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c0006968:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000696c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000696f:	0f 85 05 01 00 00    	jne    c0006a7a <f_rename+0x1a7>
c0006975:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006978:	b9 40 00 00 00       	mov    ecx,0x40
c000697d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006981:	e8 a4 b3 ff ff       	call   c0001d2a <mem_cpy>
c0006986:	b9 4c 00 00 00       	mov    ecx,0x4c
c000698b:	8d 54 24 58          	lea    edx,[esp+0x58]
c000698f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006996:	e8 8f b3 ff ff       	call   c0001d2a <mem_cpy>
c000699b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00069a2:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a9:	e8 03 e5 ff ff       	call   c0004eb1 <follow_path>
c00069ae:	85 c0                	test   eax,eax
c00069b0:	75 29                	jne    c00069db <f_rename+0x108>
c00069b2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00069b6:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00069bd:	74 0a                	je     c00069c9 <f_rename+0xf6>
c00069bf:	b8 08 00 00 00       	mov    eax,0x8
c00069c4:	e9 de 01 00 00       	jmp    c0006ba7 <f_rename+0x2d4>
c00069c9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00069d0:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00069d7:	75 e6                	jne    c00069bf <f_rename+0xec>
c00069d9:	eb 09                	jmp    c00069e4 <f_rename+0x111>
c00069db:	83 f8 04             	cmp    eax,0x4
c00069de:	0f 85 c3 01 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c00069e4:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069eb:	e8 42 d9 ff ff       	call   c0004332 <dir_register>
c00069f0:	85 c0                	test   eax,eax
c00069f2:	0f 85 af 01 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c00069f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069fc:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069ff:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006a02:	89 c5                	mov    ebp,eax
c0006a04:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006a07:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0006a0b:	8d 46 24             	lea    eax,[esi+0x24]
c0006a0e:	e8 98 b2 ff ff       	call   c0001cab <ld_word>
c0006a13:	b9 40 00 00 00       	mov    ecx,0x40
c0006a18:	89 c7                	mov    edi,eax
c0006a1a:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006a1e:	89 f0                	mov    eax,esi
c0006a20:	e8 05 b3 ff ff       	call   c0001d2a <mem_cpy>
c0006a25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a29:	89 e9                	mov    ecx,ebp
c0006a2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a2e:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006a31:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006a35:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a39:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a3c:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006a3f:	0f b7 d7             	movzx  edx,di
c0006a42:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a45:	83 c0 24             	add    eax,0x24
c0006a48:	e8 d0 b2 ff ff       	call   c0001d1d <st_word>
c0006a4d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a51:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a54:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a57:	a8 10                	test   al,0x10
c0006a59:	75 06                	jne    c0006a61 <f_rename+0x18e>
c0006a5b:	83 c8 20             	or     eax,0x20
c0006a5e:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 9c d1 ff ff       	call   c0003c09 <store_xdir>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	0f 84 1c 01 00 00    	je     c0006b91 <f_rename+0x2be>
c0006a75:	e9 2d 01 00 00       	jmp    c0006ba7 <f_rename+0x2d4>
c0006a7a:	b9 20 00 00 00       	mov    ecx,0x20
c0006a7f:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a86:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a8a:	e8 9b b2 ff ff       	call   c0001d2a <mem_cpy>
c0006a8f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a94:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a98:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a9f:	e8 86 b2 ff ff       	call   c0001d2a <mem_cpy>
c0006aa4:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006aab:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006ab2:	e8 fa e3 ff ff       	call   c0004eb1 <follow_path>
c0006ab7:	85 c0                	test   eax,eax
c0006ab9:	75 27                	jne    c0006ae2 <f_rename+0x20f>
c0006abb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006abf:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006ac6:	0f 85 f3 fe ff ff    	jne    c00069bf <f_rename+0xec>
c0006acc:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006ad3:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006ada:	0f 85 df fe ff ff    	jne    c00069bf <f_rename+0xec>
c0006ae0:	eb 09                	jmp    c0006aeb <f_rename+0x218>
c0006ae2:	83 f8 04             	cmp    eax,0x4
c0006ae5:	0f 85 bc 00 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c0006aeb:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006af2:	e8 3b d8 ff ff       	call   c0004332 <dir_register>
c0006af7:	85 c0                	test   eax,eax
c0006af9:	0f 85 a8 00 00 00    	jne    c0006ba7 <f_rename+0x2d4>
c0006aff:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006b06:	b9 13 00 00 00       	mov    ecx,0x13
c0006b0b:	8d 46 0d             	lea    eax,[esi+0xd]
c0006b0e:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006b12:	e8 13 b2 ff ff       	call   c0001d2a <mem_cpy>
c0006b17:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006b1b:	a8 10                	test   al,0x10
c0006b1d:	75 03                	jne    c0006b22 <f_rename+0x24f>
c0006b1f:	83 c8 20             	or     eax,0x20
c0006b22:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006b25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b29:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b2d:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006b31:	74 5e                	je     c0006b91 <f_rename+0x2be>
c0006b33:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006b3a:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006b3e:	74 51                	je     c0006b91 <f_rename+0x2be>
c0006b40:	89 f2                	mov    edx,esi
c0006b42:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006b46:	8a 07                	mov    al,BYTE PTR [edi]
c0006b48:	e8 d9 e2 ff ff       	call   c0004e26 <ld_clust.isra.0>
c0006b4d:	89 c2                	mov    edx,eax
c0006b4f:	89 f8                	mov    eax,edi
c0006b51:	e8 ee b3 ff ff       	call   c0001f44 <clst2sect>
c0006b56:	89 c6                	mov    esi,eax
c0006b58:	89 d1                	mov    ecx,edx
c0006b5a:	b8 02 00 00 00       	mov    eax,0x2
c0006b5f:	09 f2                	or     edx,esi
c0006b61:	74 44                	je     c0006ba7 <f_rename+0x2d4>
c0006b63:	89 f2                	mov    edx,esi
c0006b65:	89 f8                	mov    eax,edi
c0006b67:	e8 1d b9 ff ff       	call   c0002489 <move_window>
c0006b6c:	85 c0                	test   eax,eax
c0006b6e:	75 37                	jne    c0006ba7 <f_rename+0x2d4>
c0006b70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b74:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b78:	75 17                	jne    c0006b91 <f_rename+0x2be>
c0006b7a:	8d 50 74             	lea    edx,[eax+0x74]
c0006b7d:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b84:	e8 c6 e2 ff ff       	call   c0004e4f <st_clust.isra.1>
c0006b89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b8d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b91:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b95:	e8 f4 d0 ff ff       	call   c0003c8e <dir_remove>
c0006b9a:	85 c0                	test   eax,eax
c0006b9c:	75 09                	jne    c0006ba7 <f_rename+0x2d4>
c0006b9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006ba2:	e8 0d da ff ff       	call   c00045b4 <sync_fs>
c0006ba7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	53                   	push   ebx
c0006baf:	e8 40 19 00 00       	call   c00084f4 <ff_memfree>
c0006bb4:	83 c4 10             	add    esp,0x10
c0006bb7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006bbb:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006bc1:	5b                   	pop    ebx
c0006bc2:	5e                   	pop    esi
c0006bc3:	5f                   	pop    edi
c0006bc4:	5d                   	pop    ebp
c0006bc5:	c3                   	ret    

c0006bc6 <f_chmod>:
c0006bc6:	57                   	push   edi
c0006bc7:	b9 02 00 00 00       	mov    ecx,0x2
c0006bcc:	56                   	push   esi
c0006bcd:	53                   	push   ebx
c0006bce:	83 ec 60             	sub    esp,0x60
c0006bd1:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006bd5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006bd9:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006bdd:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006be1:	e8 55 bb ff ff       	call   c000273b <mount_volume>
c0006be6:	85 c0                	test   eax,eax
c0006be8:	0f 85 af 00 00 00    	jne    c0006c9d <f_chmod+0xd7>
c0006bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bf2:	83 ec 0c             	sub    esp,0xc
c0006bf5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006bf9:	68 60 04 00 00       	push   0x460
c0006bfe:	e8 db 18 00 00       	call   c00084de <ff_memalloc>
c0006c03:	83 c4 10             	add    esp,0x10
c0006c06:	89 c6                	mov    esi,eax
c0006c08:	b8 11 00 00 00       	mov    eax,0x11
c0006c0d:	85 f6                	test   esi,esi
c0006c0f:	0f 84 88 00 00 00    	je     c0006c9d <f_chmod+0xd7>
c0006c15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c19:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006c1f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006c22:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c25:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c29:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c2d:	e8 7f e2 ff ff       	call   c0004eb1 <follow_path>
c0006c32:	85 c0                	test   eax,eax
c0006c34:	75 53                	jne    c0006c89 <f_chmod+0xc3>
c0006c36:	b8 06 00 00 00       	mov    eax,0x6
c0006c3b:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006c40:	75 47                	jne    c0006c89 <f_chmod+0xc3>
c0006c42:	89 f9                	mov    ecx,edi
c0006c44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c48:	83 e1 27             	and    ecx,0x27
c0006c4b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c4e:	75 1d                	jne    c0006c6d <f_chmod+0xa7>
c0006c50:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c53:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c56:	21 cb                	and    ebx,ecx
c0006c58:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c5b:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c5e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c62:	e8 a2 cf ff ff       	call   c0003c09 <store_xdir>
c0006c67:	85 c0                	test   eax,eax
c0006c69:	75 1e                	jne    c0006c89 <f_chmod+0xc3>
c0006c6b:	eb 13                	jmp    c0006c80 <f_chmod+0xba>
c0006c6d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c71:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c74:	21 cb                	and    ebx,ecx
c0006c76:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c79:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c84:	e8 2b d9 ff ff       	call   c00045b4 <sync_fs>
c0006c89:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c8d:	83 ec 0c             	sub    esp,0xc
c0006c90:	56                   	push   esi
c0006c91:	e8 5e 18 00 00       	call   c00084f4 <ff_memfree>
c0006c96:	83 c4 10             	add    esp,0x10
c0006c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c9d:	83 c4 60             	add    esp,0x60
c0006ca0:	5b                   	pop    ebx
c0006ca1:	5e                   	pop    esi
c0006ca2:	5f                   	pop    edi
c0006ca3:	c3                   	ret    

c0006ca4 <f_utime>:
c0006ca4:	56                   	push   esi
c0006ca5:	b9 02 00 00 00       	mov    ecx,0x2
c0006caa:	53                   	push   ebx
c0006cab:	83 ec 64             	sub    esp,0x64
c0006cae:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006cb2:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006cb6:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006cba:	e8 7c ba ff ff       	call   c000273b <mount_volume>
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	0f 85 b5 00 00 00    	jne    c0006d7c <f_utime+0xd8>
c0006cc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ccb:	83 ec 0c             	sub    esp,0xc
c0006cce:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006cd2:	68 60 04 00 00       	push   0x460
c0006cd7:	e8 02 18 00 00       	call   c00084de <ff_memalloc>
c0006cdc:	83 c4 10             	add    esp,0x10
c0006cdf:	89 c3                	mov    ebx,eax
c0006ce1:	b8 11 00 00 00       	mov    eax,0x11
c0006ce6:	85 db                	test   ebx,ebx
c0006ce8:	0f 84 8e 00 00 00    	je     c0006d7c <f_utime+0xd8>
c0006cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cf2:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cf8:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cfb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cfe:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006d02:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d06:	e8 a6 e1 ff ff       	call   c0004eb1 <follow_path>
c0006d0b:	85 c0                	test   eax,eax
c0006d0d:	75 59                	jne    c0006d68 <f_utime+0xc4>
c0006d0f:	b8 06 00 00 00       	mov    eax,0x6
c0006d14:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006d19:	75 4d                	jne    c0006d68 <f_utime+0xc4>
c0006d1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d1f:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006d23:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006d27:	c1 e2 10             	shl    edx,0x10
c0006d2a:	09 ca                	or     edx,ecx
c0006d2c:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d2f:	75 1a                	jne    c0006d4b <f_utime+0xa7>
c0006d31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006d34:	83 c0 0c             	add    eax,0xc
c0006d37:	e8 e5 af ff ff       	call   c0001d21 <st_dword>
c0006d3c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d40:	e8 c4 ce ff ff       	call   c0003c09 <store_xdir>
c0006d45:	85 c0                	test   eax,eax
c0006d47:	75 1f                	jne    c0006d68 <f_utime+0xc4>
c0006d49:	eb 14                	jmp    c0006d5f <f_utime+0xbb>
c0006d4b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d4f:	83 c0 16             	add    eax,0x16
c0006d52:	e8 ca af ff ff       	call   c0001d21 <st_dword>
c0006d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d5b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d63:	e8 4c d8 ff ff       	call   c00045b4 <sync_fs>
c0006d68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d6c:	83 ec 0c             	sub    esp,0xc
c0006d6f:	53                   	push   ebx
c0006d70:	e8 7f 17 00 00       	call   c00084f4 <ff_memfree>
c0006d75:	83 c4 10             	add    esp,0x10
c0006d78:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d7c:	83 c4 64             	add    esp,0x64
c0006d7f:	5b                   	pop    ebx
c0006d80:	5e                   	pop    esi
c0006d81:	c3                   	ret    

c0006d82 <f_getlabel>:
c0006d82:	55                   	push   ebp
c0006d83:	31 c9                	xor    ecx,ecx
c0006d85:	57                   	push   edi
c0006d86:	56                   	push   esi
c0006d87:	53                   	push   ebx
c0006d88:	83 ec 6c             	sub    esp,0x6c
c0006d8b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d8f:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d96:	e8 a0 b9 ff ff       	call   c000273b <mount_volume>
c0006d9b:	89 c6                	mov    esi,eax
c0006d9d:	85 c0                	test   eax,eax
c0006d9f:	0f 85 c1 01 00 00    	jne    c0006f66 <f_getlabel+0x1e4>
c0006da5:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006dad:	0f 84 5f 01 00 00    	je     c0006f12 <f_getlabel+0x190>
c0006db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006db7:	31 d2                	xor    edx,edx
c0006db9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006dbd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006dc5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006dc9:	e8 39 c4 ff ff       	call   c0003207 <dir_sdi>
c0006dce:	85 c0                	test   eax,eax
c0006dd0:	0f 85 2d 01 00 00    	jne    c0006f03 <f_getlabel+0x181>
c0006dd6:	ba 01 00 00 00       	mov    edx,0x1
c0006ddb:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ddf:	e8 33 cc ff ff       	call   c0003a17 <dir_read>
c0006de4:	85 c0                	test   eax,eax
c0006de6:	0f 85 17 01 00 00    	jne    c0006f03 <f_getlabel+0x181>
c0006dec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006df3:	74 09                	je     c0006dfe <f_getlabel+0x7c>
c0006df5:	31 db                	xor    ebx,ebx
c0006df7:	31 c9                	xor    ecx,ecx
c0006df9:	e9 c8 00 00 00       	jmp    c0006ec6 <f_getlabel+0x144>
c0006dfe:	31 ed                	xor    ebp,ebp
c0006e00:	31 db                	xor    ebx,ebx
c0006e02:	31 ff                	xor    edi,edi
c0006e04:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006e08:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006e0c:	39 fa                	cmp    edx,edi
c0006e0e:	76 4b                	jbe    c0006e5b <f_getlabel+0xd9>
c0006e10:	47                   	inc    edi
c0006e11:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006e14:	01 d0                	add    eax,edx
c0006e16:	e8 90 ae ff ff       	call   c0001cab <ld_word>
c0006e1b:	66 85 ed             	test   bp,bp
c0006e1e:	75 0d                	jne    c0006e2d <f_getlabel+0xab>
c0006e20:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006e26:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006e2b:	76 28                	jbe    c0006e55 <f_getlabel+0xd3>
c0006e2d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e34:	89 e9                	mov    ecx,ebp
c0006e36:	01 da                	add    edx,ebx
c0006e38:	c1 e1 10             	shl    ecx,0x10
c0006e3b:	0f b7 c0             	movzx  eax,ax
c0006e3e:	09 c8                	or     eax,ecx
c0006e40:	b9 04 00 00 00       	mov    ecx,0x4
c0006e45:	e8 01 b0 ff ff       	call   c0001e4b <put_utf>
c0006e4a:	84 c0                	test   al,al
c0006e4c:	74 0b                	je     c0006e59 <f_getlabel+0xd7>
c0006e4e:	0f b6 c0             	movzx  eax,al
c0006e51:	01 c3                	add    ebx,eax
c0006e53:	31 c0                	xor    eax,eax
c0006e55:	89 c5                	mov    ebp,eax
c0006e57:	eb ab                	jmp    c0006e04 <f_getlabel+0x82>
c0006e59:	31 db                	xor    ebx,ebx
c0006e5b:	66 85 ed             	test   bp,bp
c0006e5e:	74 02                	je     c0006e62 <f_getlabel+0xe0>
c0006e60:	31 db                	xor    ebx,ebx
c0006e62:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e69:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e6d:	e9 a0 00 00 00       	jmp    c0006f12 <f_getlabel+0x190>
c0006e72:	83 ff 0b             	cmp    edi,0xb
c0006e75:	74 11                	je     c0006e88 <f_getlabel+0x106>
c0006e77:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e80:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e83:	c1 e0 08             	shl    eax,0x8
c0006e86:	09 c2                	or     edx,eax
c0006e88:	0f b7 d2             	movzx  edx,dx
c0006e8b:	50                   	push   eax
c0006e8c:	50                   	push   eax
c0006e8d:	68 b5 01 00 00       	push   0x1b5
c0006e92:	52                   	push   edx
c0006e93:	e8 03 17 00 00       	call   c000859b <ff_oem2uni>
c0006e98:	83 c4 10             	add    esp,0x10
c0006e9b:	66 85 c0             	test   ax,ax
c0006e9e:	74 46                	je     c0006ee6 <f_getlabel+0x164>
c0006ea0:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ea7:	0f b7 c0             	movzx  eax,ax
c0006eaa:	01 da                	add    edx,ebx
c0006eac:	b9 04 00 00 00       	mov    ecx,0x4
c0006eb1:	e8 95 af ff ff       	call   c0001e4b <put_utf>
c0006eb6:	84 c0                	test   al,al
c0006eb8:	74 2c                	je     c0006ee6 <f_getlabel+0x164>
c0006eba:	0f b6 c0             	movzx  eax,al
c0006ebd:	01 c3                	add    ebx,eax
c0006ebf:	83 ff 0b             	cmp    edi,0xb
c0006ec2:	74 24                	je     c0006ee8 <f_getlabel+0x166>
c0006ec4:	89 f9                	mov    ecx,edi
c0006ec6:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006eca:	8d 79 01             	lea    edi,[ecx+0x1]
c0006ecd:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006ed2:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006ed7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006edb:	e8 9f ae ff ff       	call   c0001d7f <dbc_1st>
c0006ee0:	85 c0                	test   eax,eax
c0006ee2:	74 a4                	je     c0006e88 <f_getlabel+0x106>
c0006ee4:	eb 8c                	jmp    c0006e72 <f_getlabel+0xf0>
c0006ee6:	31 db                	xor    ebx,ebx
c0006ee8:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006eef:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ef2:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006ef9:	74 17                	je     c0006f12 <f_getlabel+0x190>
c0006efb:	4b                   	dec    ebx
c0006efc:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eff:	74 ee                	je     c0006eef <f_getlabel+0x16d>
c0006f01:	eb 0f                	jmp    c0006f12 <f_getlabel+0x190>
c0006f03:	83 f8 04             	cmp    eax,0x4
c0006f06:	75 5c                	jne    c0006f64 <f_getlabel+0x1e2>
c0006f08:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006f0f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006f12:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006f1a:	74 4a                	je     c0006f66 <f_getlabel+0x1e4>
c0006f1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006f20:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006f23:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006f26:	e8 5e b5 ff ff       	call   c0002489 <move_window>
c0006f2b:	89 c6                	mov    esi,eax
c0006f2d:	85 c0                	test   eax,eax
c0006f2f:	75 35                	jne    c0006f66 <f_getlabel+0x1e4>
c0006f31:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006f35:	b8 43 00 00 00       	mov    eax,0x43
c0006f3a:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006f3c:	80 f9 03             	cmp    cl,0x3
c0006f3f:	74 0f                	je     c0006f50 <f_getlabel+0x1ce>
c0006f41:	31 c0                	xor    eax,eax
c0006f43:	80 f9 04             	cmp    cl,0x4
c0006f46:	0f 94 c0             	sete   al
c0006f49:	48                   	dec    eax
c0006f4a:	83 e0 c3             	and    eax,0xffffffc3
c0006f4d:	83 c0 64             	add    eax,0x64
c0006f50:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f54:	e8 5f ad ff ff       	call   c0001cb8 <ld_dword>
c0006f59:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f60:	89 07                	mov    DWORD PTR [edi],eax
c0006f62:	eb 02                	jmp    c0006f66 <f_getlabel+0x1e4>
c0006f64:	89 c6                	mov    esi,eax
c0006f66:	83 c4 6c             	add    esp,0x6c
c0006f69:	89 f0                	mov    eax,esi
c0006f6b:	5b                   	pop    ebx
c0006f6c:	5e                   	pop    esi
c0006f6d:	5f                   	pop    edi
c0006f6e:	5d                   	pop    ebp
c0006f6f:	c3                   	ret    

c0006f70 <f_setlabel>:
c0006f70:	56                   	push   esi
c0006f71:	b9 02 00 00 00       	mov    ecx,0x2
c0006f76:	53                   	push   ebx
c0006f77:	83 ec 74             	sub    esp,0x74
c0006f7a:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f7e:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f85:	e8 b1 b7 ff ff       	call   c000273b <mount_volume>
c0006f8a:	89 c6                	mov    esi,eax
c0006f8c:	85 c0                	test   eax,eax
c0006f8e:	0f 85 41 02 00 00    	jne    c00071d5 <f_setlabel+0x265>
c0006f94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f98:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f9b:	0f 85 8e 00 00 00    	jne    c000702f <f_setlabel+0xbf>
c0006fa1:	b9 16 00 00 00       	mov    ecx,0x16
c0006fa6:	31 d2                	xor    edx,edx
c0006fa8:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fac:	31 db                	xor    ebx,ebx
c0006fae:	e8 8c ad ff ff       	call   c0001d3f <mem_set>
c0006fb3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fba:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fbd:	0f 86 0a 01 00 00    	jbe    c00070cd <f_setlabel+0x15d>
c0006fc3:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fca:	e8 b6 ad ff ff       	call   c0001d85 <tchar2uni>
c0006fcf:	89 c6                	mov    esi,eax
c0006fd1:	3d ff ff 00 00       	cmp    eax,0xffff
c0006fd6:	76 2a                	jbe    c0007002 <f_setlabel+0x92>
c0006fd8:	83 f8 ff             	cmp    eax,0xffffffff
c0006fdb:	74 05                	je     c0006fe2 <f_setlabel+0x72>
c0006fdd:	83 fb 09             	cmp    ebx,0x9
c0006fe0:	76 0a                	jbe    c0006fec <f_setlabel+0x7c>
c0006fe2:	be 06 00 00 00       	mov    esi,0x6
c0006fe7:	e9 e9 01 00 00       	jmp    c00071d5 <f_setlabel+0x265>
c0006fec:	89 c2                	mov    edx,eax
c0006fee:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006ff2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006ff5:	c1 ea 10             	shr    edx,0x10
c0006ff8:	01 c8                	add    eax,ecx
c0006ffa:	43                   	inc    ebx
c0006ffb:	e8 1d ad ff ff       	call   c0001d1d <st_word>
c0007000:	eb 04                	jmp    c0007006 <f_setlabel+0x96>
c0007002:	85 c0                	test   eax,eax
c0007004:	74 dc                	je     c0006fe2 <f_setlabel+0x72>
c0007006:	89 f2                	mov    edx,esi
c0007008:	b8 f7 f6 01 c0       	mov    eax,0xc001f6f7
c000700d:	e8 5b ad ff ff       	call   c0001d6d <chk_chr>
c0007012:	85 c0                	test   eax,eax
c0007014:	75 cc                	jne    c0006fe2 <f_setlabel+0x72>
c0007016:	83 fb 0a             	cmp    ebx,0xa
c0007019:	77 c7                	ja     c0006fe2 <f_setlabel+0x72>
c000701b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000701e:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0007022:	0f b7 d6             	movzx  edx,si
c0007025:	01 c8                	add    eax,ecx
c0007027:	43                   	inc    ebx
c0007028:	e8 f0 ac ff ff       	call   c0001d1d <st_word>
c000702d:	eb 84                	jmp    c0006fb3 <f_setlabel+0x43>
c000702f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007034:	ba 20 00 00 00       	mov    edx,0x20
c0007039:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000703d:	31 db                	xor    ebx,ebx
c000703f:	e8 fb ac ff ff       	call   c0001d3f <mem_set>
c0007044:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000704b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000704e:	76 60                	jbe    c00070b0 <f_setlabel+0x140>
c0007050:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0007057:	e8 29 ad ff ff       	call   c0001d85 <tchar2uni>
c000705c:	3d ff ff 00 00       	cmp    eax,0xffff
c0007061:	0f 87 7b ff ff ff    	ja     c0006fe2 <f_setlabel+0x72>
c0007067:	83 ec 0c             	sub    esp,0xc
c000706a:	50                   	push   eax
c000706b:	e8 97 15 00 00       	call   c0008607 <ff_wtoupper>
c0007070:	5a                   	pop    edx
c0007071:	59                   	pop    ecx
c0007072:	68 b5 01 00 00       	push   0x1b5
c0007077:	50                   	push   eax
c0007078:	e8 8e 14 00 00       	call   c000850b <ff_uni2oem>
c000707d:	83 c4 10             	add    esp,0x10
c0007080:	89 c6                	mov    esi,eax
c0007082:	66 85 c0             	test   ax,ax
c0007085:	0f 84 57 ff ff ff    	je     c0006fe2 <f_setlabel+0x72>
c000708b:	0f b7 d0             	movzx  edx,ax
c000708e:	b8 f0 f6 01 c0       	mov    eax,0xc001f6f0
c0007093:	e8 d5 ac ff ff       	call   c0001d6d <chk_chr>
c0007098:	85 c0                	test   eax,eax
c000709a:	0f 85 42 ff ff ff    	jne    c0006fe2 <f_setlabel+0x72>
c00070a0:	66 81 fe ff 00       	cmp    si,0xff
c00070a5:	0f 87 14 01 00 00    	ja     c00071bf <f_setlabel+0x24f>
c00070ab:	e9 fa 00 00 00       	jmp    c00071aa <f_setlabel+0x23a>
c00070b0:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c00070b5:	0f 84 27 ff ff ff    	je     c0006fe2 <f_setlabel+0x72>
c00070bb:	85 db                	test   ebx,ebx
c00070bd:	74 0e                	je     c00070cd <f_setlabel+0x15d>
c00070bf:	8d 43 ff             	lea    eax,[ebx-0x1]
c00070c2:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c00070c7:	75 04                	jne    c00070cd <f_setlabel+0x15d>
c00070c9:	89 c3                	mov    ebx,eax
c00070cb:	eb ee                	jmp    c00070bb <f_setlabel+0x14b>
c00070cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070d1:	31 d2                	xor    edx,edx
c00070d3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00070d7:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00070df:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070e3:	e8 1f c1 ff ff       	call   c0003207 <dir_sdi>
c00070e8:	89 c6                	mov    esi,eax
c00070ea:	85 c0                	test   eax,eax
c00070ec:	0f 85 e3 00 00 00    	jne    c00071d5 <f_setlabel+0x265>
c00070f2:	ba 01 00 00 00       	mov    edx,0x1
c00070f7:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070fb:	e8 17 c9 ff ff       	call   c0003a17 <dir_read>
c0007100:	85 c0                	test   eax,eax
c0007102:	75 21                	jne    c0007125 <f_setlabel+0x1b5>
c0007104:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007108:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000710c:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c000710f:	74 5d                	je     c000716e <f_setlabel+0x1fe>
c0007111:	85 db                	test   ebx,ebx
c0007113:	74 0b                	je     c0007120 <f_setlabel+0x1b0>
c0007115:	b9 0b 00 00 00       	mov    ecx,0xb
c000711a:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000711e:	eb 70                	jmp    c0007190 <f_setlabel+0x220>
c0007120:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0007123:	eb 70                	jmp    c0007195 <f_setlabel+0x225>
c0007125:	83 f8 04             	cmp    eax,0x4
c0007128:	75 7c                	jne    c00071a6 <f_setlabel+0x236>
c000712a:	85 db                	test   ebx,ebx
c000712c:	0f 84 a3 00 00 00    	je     c00071d5 <f_setlabel+0x265>
c0007132:	ba 01 00 00 00       	mov    edx,0x1
c0007137:	8d 44 24 24          	lea    eax,[esp+0x24]
c000713b:	e8 51 ca ff ff       	call   c0003b91 <dir_alloc>
c0007140:	89 c6                	mov    esi,eax
c0007142:	85 c0                	test   eax,eax
c0007144:	0f 85 8b 00 00 00    	jne    c00071d5 <f_setlabel+0x265>
c000714a:	31 d2                	xor    edx,edx
c000714c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007150:	b9 20 00 00 00       	mov    ecx,0x20
c0007155:	e8 e5 ab ff ff       	call   c0001d3f <mem_set>
c000715a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000715e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007161:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007165:	75 18                	jne    c000717f <f_setlabel+0x20f>
c0007167:	c6 00 83             	mov    BYTE PTR [eax],0x83
c000716a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000716e:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007171:	b9 16 00 00 00       	mov    ecx,0x16
c0007176:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000717a:	83 c0 02             	add    eax,0x2
c000717d:	eb 9b                	jmp    c000711a <f_setlabel+0x1aa>
c000717f:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007183:	b9 0b 00 00 00       	mov    ecx,0xb
c0007188:	8d 54 24 0e          	lea    edx,[esp+0xe]
c000718c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007190:	e8 95 ab ff ff       	call   c0001d2a <mem_cpy>
c0007195:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007199:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000719d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00071a1:	e8 0e d4 ff ff       	call   c00045b4 <sync_fs>
c00071a6:	89 c6                	mov    esi,eax
c00071a8:	eb 2b                	jmp    c00071d5 <f_setlabel+0x265>
c00071aa:	83 fb 0a             	cmp    ebx,0xa
c00071ad:	0f 87 2f fe ff ff    	ja     c0006fe2 <f_setlabel+0x72>
c00071b3:	89 f0                	mov    eax,esi
c00071b5:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c00071b9:	43                   	inc    ebx
c00071ba:	e9 85 fe ff ff       	jmp    c0007044 <f_setlabel+0xd4>
c00071bf:	83 fb 09             	cmp    ebx,0x9
c00071c2:	0f 87 1a fe ff ff    	ja     c0006fe2 <f_setlabel+0x72>
c00071c8:	89 f0                	mov    eax,esi
c00071ca:	66 c1 e8 08          	shr    ax,0x8
c00071ce:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c00071d2:	43                   	inc    ebx
c00071d3:	eb de                	jmp    c00071b3 <f_setlabel+0x243>
c00071d5:	89 f0                	mov    eax,esi
c00071d7:	83 c4 74             	add    esp,0x74
c00071da:	5b                   	pop    ebx
c00071db:	5e                   	pop    esi
c00071dc:	c3                   	ret    

c00071dd <f_forward>:
c00071dd:	55                   	push   ebp
c00071de:	57                   	push   edi
c00071df:	56                   	push   esi
c00071e0:	53                   	push   ebx
c00071e1:	83 ec 2c             	sub    esp,0x2c
c00071e4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00071e8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071f2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071f6:	89 d8                	mov    eax,ebx
c00071f8:	e8 b1 b1 ff ff       	call   c00023ae <validate>
c00071fd:	89 c5                	mov    ebp,eax
c00071ff:	85 c0                	test   eax,eax
c0007201:	0f 85 aa 01 00 00    	jne    c00073b1 <f_forward+0x1d4>
c0007207:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000720b:	85 ed                	test   ebp,ebp
c000720d:	0f 85 9e 01 00 00    	jne    c00073b1 <f_forward+0x1d4>
c0007213:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0007217:	0f 84 8f 01 00 00    	je     c00073ac <f_forward+0x1cf>
c000721d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0007220:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0007223:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0007226:	bf 00 00 00 00       	mov    edi,0x0
c000722b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000722e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0007232:	89 d1                	mov    ecx,edx
c0007234:	19 f9                	sbb    ecx,edi
c0007236:	0f 83 cf 00 00 00    	jae    c000730b <f_forward+0x12e>
c000723c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007240:	e9 c6 00 00 00       	jmp    c000730b <f_forward+0x12e>
c0007245:	50                   	push   eax
c0007246:	50                   	push   eax
c0007247:	6a 00                	push   0x0
c0007249:	6a 00                	push   0x0
c000724b:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000724f:	83 c4 10             	add    esp,0x10
c0007252:	85 c0                	test   eax,eax
c0007254:	0f 84 57 01 00 00    	je     c00073b1 <f_forward+0x1d4>
c000725a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000725d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007261:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0007264:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0007268:	89 d7                	mov    edi,edx
c000726a:	8d 4e ff             	lea    ecx,[esi-0x1]
c000726d:	89 c6                	mov    esi,eax
c000726f:	0f ac fe 09          	shrd   esi,edi,0x9
c0007273:	21 ce                	and    esi,ecx
c0007275:	89 c1                	mov    ecx,eax
c0007277:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c000727d:	0f 84 98 00 00 00    	je     c000731b <f_forward+0x13e>
c0007283:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007287:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000728a:	89 c8                	mov    eax,ecx
c000728c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007290:	e8 af ac ff ff       	call   c0001f44 <clst2sect>
c0007295:	89 d7                	mov    edi,edx
c0007297:	09 c7                	or     edi,eax
c0007299:	0f 84 9e 00 00 00    	je     c000733d <f_forward+0x160>
c000729f:	31 ff                	xor    edi,edi
c00072a1:	8d 4b 50             	lea    ecx,[ebx+0x50]
c00072a4:	01 c6                	add    esi,eax
c00072a6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00072aa:	11 d7                	adc    edi,edx
c00072ac:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00072af:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00072b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072b6:	39 fa                	cmp    edx,edi
c00072b8:	0f 85 a2 00 00 00    	jne    c0007360 <f_forward+0x183>
c00072be:	39 f0                	cmp    eax,esi
c00072c0:	0f 85 9a 00 00 00    	jne    c0007360 <f_forward+0x183>
c00072c6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00072c9:	ba 00 02 00 00       	mov    edx,0x200
c00072ce:	25 ff 01 00 00       	and    eax,0x1ff
c00072d3:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c00072d7:	29 c2                	sub    edx,eax
c00072d9:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00072dc:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00072df:	39 d1                	cmp    ecx,edx
c00072e1:	76 02                	jbe    c00072e5 <f_forward+0x108>
c00072e3:	89 d1                	mov    ecx,edx
c00072e5:	8d 73 50             	lea    esi,[ebx+0x50]
c00072e8:	52                   	push   edx
c00072e9:	01 c6                	add    esi,eax
c00072eb:	52                   	push   edx
c00072ec:	51                   	push   ecx
c00072ed:	56                   	push   esi
c00072ee:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	85 c0                	test   eax,eax
c00072f7:	74 44                	je     c000733d <f_forward+0x160>
c00072f9:	31 ff                	xor    edi,edi
c00072fb:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072fe:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007301:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0007305:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007309:	01 07                	add    DWORD PTR [edi],eax
c000730b:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007310:	0f 85 2f ff ff ff    	jne    c0007245 <f_forward+0x68>
c0007316:	e9 96 00 00 00       	jmp    c00073b1 <f_forward+0x1d4>
c000731b:	85 f6                	test   esi,esi
c000731d:	0f 85 60 ff ff ff    	jne    c0007283 <f_forward+0xa6>
c0007323:	89 d7                	mov    edi,edx
c0007325:	09 c7                	or     edi,eax
c0007327:	75 05                	jne    c000732e <f_forward+0x151>
c0007329:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000732c:	eb 0a                	jmp    c0007338 <f_forward+0x15b>
c000732e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007331:	89 d8                	mov    eax,ebx
c0007333:	e8 d9 bc ff ff       	call   c0003011 <get_fat>
c0007338:	83 f8 01             	cmp    eax,0x1
c000733b:	77 0b                	ja     c0007348 <f_forward+0x16b>
c000733d:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007341:	bd 02 00 00 00       	mov    ebp,0x2
c0007346:	eb 69                	jmp    c00073b1 <f_forward+0x1d4>
c0007348:	83 f8 ff             	cmp    eax,0xffffffff
c000734b:	75 0b                	jne    c0007358 <f_forward+0x17b>
c000734d:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007351:	bd 01 00 00 00       	mov    ebp,0x1
c0007356:	eb 59                	jmp    c00073b1 <f_forward+0x1d4>
c0007358:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000735b:	e9 23 ff ff ff       	jmp    c0007283 <f_forward+0xa6>
c0007360:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007364:	79 20                	jns    c0007386 <f_forward+0x1a9>
c0007366:	83 ec 0c             	sub    esp,0xc
c0007369:	6a 01                	push   0x1
c000736b:	52                   	push   edx
c000736c:	50                   	push   eax
c000736d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007371:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007375:	50                   	push   eax
c0007376:	e8 fb a8 ff ff       	call   c0001c76 <disk_write>
c000737b:	83 c4 20             	add    esp,0x20
c000737e:	85 c0                	test   eax,eax
c0007380:	75 cb                	jne    c000734d <f_forward+0x170>
c0007382:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007386:	83 ec 0c             	sub    esp,0xc
c0007389:	6a 01                	push   0x1
c000738b:	57                   	push   edi
c000738c:	56                   	push   esi
c000738d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007391:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007395:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007399:	50                   	push   eax
c000739a:	e8 c1 a8 ff ff       	call   c0001c60 <disk_read>
c000739f:	83 c4 20             	add    esp,0x20
c00073a2:	85 c0                	test   eax,eax
c00073a4:	0f 84 1c ff ff ff    	je     c00072c6 <f_forward+0xe9>
c00073aa:	eb a1                	jmp    c000734d <f_forward+0x170>
c00073ac:	bd 07 00 00 00       	mov    ebp,0x7
c00073b1:	83 c4 2c             	add    esp,0x2c
c00073b4:	89 e8                	mov    eax,ebp
c00073b6:	5b                   	pop    ebx
c00073b7:	5e                   	pop    esi
c00073b8:	5f                   	pop    edi
c00073b9:	5d                   	pop    ebp
c00073ba:	c3                   	ret    

c00073bb <f_mkfs>:
c00073bb:	55                   	push   ebp
c00073bc:	57                   	push   edi
c00073bd:	56                   	push   esi
c00073be:	53                   	push   ebx
c00073bf:	bb 0b 00 00 00       	mov    ebx,0xb
c00073c4:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00073ca:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00073d1:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00073d8:	e8 b0 ae ff ff       	call   c000228d <get_ldnumber>
c00073dd:	85 c0                	test   eax,eax
c00073df:	0f 88 ec 10 00 00    	js     c00084d1 <f_mkfs+0x1116>
c00073e5:	8b 14 85 40 b9 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc46c0]
c00073ec:	85 d2                	test   edx,edx
c00073ee:	74 03                	je     c00073f3 <f_mkfs+0x38>
c00073f0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073f3:	85 f6                	test   esi,esi
c00073f5:	75 05                	jne    c00073fc <f_mkfs+0x41>
c00073f7:	be e0 f6 01 c0       	mov    esi,0xc001f6e0
c00073fc:	83 ec 0c             	sub    esp,0xc
c00073ff:	0f b6 c0             	movzx  eax,al
c0007402:	bb 03 00 00 00       	mov    ebx,0x3
c0007407:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000740b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000740f:	e8 49 a8 ff ff       	call   c0001c5d <disk_initialize>
c0007414:	83 c4 10             	add    esp,0x10
c0007417:	a8 01                	test   al,0x1
c0007419:	0f 85 b2 10 00 00    	jne    c00084d1 <f_mkfs+0x1116>
c000741f:	bb 0a 00 00 00       	mov    ebx,0xa
c0007424:	a8 04                	test   al,0x4
c0007426:	0f 85 a5 10 00 00    	jne    c00084d1 <f_mkfs+0x1116>
c000742c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000742f:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007433:	85 c0                	test   eax,eax
c0007435:	75 20                	jne    c0007457 <f_mkfs+0x9c>
c0007437:	51                   	push   ecx
c0007438:	8d 44 24 78          	lea    eax,[esp+0x78]
c000743c:	50                   	push   eax
c000743d:	6a 03                	push   0x3
c000743f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007443:	e8 44 a8 ff ff       	call   c0001c8c <disk_ioctl>
c0007448:	83 c4 10             	add    esp,0x10
c000744b:	85 c0                	test   eax,eax
c000744d:	74 08                	je     c0007457 <f_mkfs+0x9c>
c000744f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007457:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000745b:	8d 42 ff             	lea    eax,[edx-0x1]
c000745e:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007463:	77 04                	ja     c0007469 <f_mkfs+0xae>
c0007465:	85 c2                	test   edx,eax
c0007467:	74 08                	je     c0007471 <f_mkfs+0xb6>
c0007469:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007471:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007474:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0007478:	48                   	dec    eax
c0007479:	3c 01                	cmp    al,0x1
c000747b:	76 05                	jbe    c0007482 <f_mkfs+0xc7>
c000747d:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007482:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007485:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007489:	48                   	dec    eax
c000748a:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000748f:	77 07                	ja     c0007498 <f_mkfs+0xdd>
c0007491:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007496:	74 08                	je     c00074a0 <f_mkfs+0xe5>
c0007498:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00074a0:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00074a3:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c00074a9:	77 07                	ja     c00074b2 <f_mkfs+0xf7>
c00074ab:	8d 43 ff             	lea    eax,[ebx-0x1]
c00074ae:	85 d8                	test   eax,ebx
c00074b0:	74 02                	je     c00074b4 <f_mkfs+0xf9>
c00074b2:	31 db                	xor    ebx,ebx
c00074b4:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00074bf:	77 0a                	ja     c00074cb <f_mkfs+0x110>
c00074c1:	bb 11 00 00 00       	mov    ebx,0x11
c00074c6:	e9 06 10 00 00       	jmp    c00084d1 <f_mkfs+0x1116>
c00074cb:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00074d2:	8b 36                	mov    esi,DWORD PTR [esi]
c00074d4:	85 ed                	test   ebp,ebp
c00074d6:	75 1e                	jne    c00074f6 <f_mkfs+0x13b>
c00074d8:	83 ec 0c             	sub    esp,0xc
c00074db:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00074e2:	25 00 fe ff ff       	and    eax,0xfffffe00
c00074e7:	50                   	push   eax
c00074e8:	e8 f1 0f 00 00       	call   c00084de <ff_memalloc>
c00074ed:	83 c4 10             	add    esp,0x10
c00074f0:	89 c5                	mov    ebp,eax
c00074f2:	85 c0                	test   eax,eax
c00074f4:	74 cb                	je     c00074c1 <f_mkfs+0x106>
c00074f6:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074fe:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c0007506:	52                   	push   edx
c0007507:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c000750b:	50                   	push   eax
c000750c:	6a 01                	push   0x1
c000750e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007512:	e8 75 a7 ff ff       	call   c0001c8c <disk_ioctl>
c0007517:	83 c4 10             	add    esp,0x10
c000751a:	85 c0                	test   eax,eax
c000751c:	0f 85 4a 0f 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007522:	89 f1                	mov    ecx,esi
c0007524:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000752c:	83 e1 0f             	and    ecx,0xf
c000752f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007537:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000753b:	83 e6 08             	and    esi,0x8
c000753e:	75 56                	jne    c0007596 <f_mkfs+0x1db>
c0007540:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007544:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c0007548:	83 ff 00             	cmp    edi,0x0
c000754b:	76 20                	jbe    c000756d <f_mkfs+0x1b2>
c000754d:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007552:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000755a:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007560:	83 d7 ff             	adc    edi,0xffffffff
c0007563:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007567:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000756b:	eb 21                	jmp    c000758e <f_mkfs+0x1d3>
c000756d:	ba 3f 00 00 00       	mov    edx,0x3f
c0007572:	39 f2                	cmp    edx,esi
c0007574:	19 f8                	sbb    eax,edi
c0007576:	73 1e                	jae    c0007596 <f_mkfs+0x1db>
c0007578:	83 c6 c1             	add    esi,0xffffffc1
c000757b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007583:	83 d7 ff             	adc    edi,0xffffffff
c0007586:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000758a:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000758e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007596:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000759a:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000759e:	89 04 24             	mov    DWORD PTR [esp],eax
c00075a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00075a5:	31 c0                	xor    eax,eax
c00075a7:	ba 7f 00 00 00       	mov    edx,0x7f
c00075ac:	89 c7                	mov    edi,eax
c00075ae:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075b1:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075b5:	0f 83 c5 0a 00 00    	jae    c0008080 <f_mkfs+0xcc5>
c00075bb:	89 df                	mov    edi,ebx
c00075bd:	c1 ef 09             	shr    edi,0x9
c00075c0:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00075c4:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00075cb:	c1 ef 09             	shr    edi,0x9
c00075ce:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00075d3:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00075d7:	74 29                	je     c0007602 <f_mkfs+0x247>
c00075d9:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075df:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00075e4:	0f 97 c2             	seta   dl
c00075e7:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075ea:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075ee:	0f 92 c0             	setb   al
c00075f1:	08 c2                	or     dl,al
c00075f3:	75 5b                	jne    c0007650 <f_mkfs+0x295>
c00075f5:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075f9:	83 e0 07             	and    eax,0x7
c00075fc:	3c 04                	cmp    al,0x4
c00075fe:	74 50                	je     c0007650 <f_mkfs+0x295>
c0007600:	eb 1b                	jmp    c000761d <f_mkfs+0x262>
c0007602:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0007607:	0f 87 73 0a 00 00    	ja     c0008080 <f_mkfs+0xcc5>
c000760d:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007613:	76 08                	jbe    c000761d <f_mkfs+0x262>
c0007615:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c000761d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007621:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007625:	83 e0 01             	and    eax,0x1
c0007628:	80 e1 02             	and    cl,0x2
c000762b:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c000762f:	74 0d                	je     c000763e <f_mkfs+0x283>
c0007631:	84 c0                	test   al,al
c0007633:	0f 84 53 09 00 00    	je     c0007f8c <f_mkfs+0xbd1>
c0007639:	e9 12 08 00 00       	jmp    c0007e50 <f_mkfs+0xa95>
c000763e:	bb 13 00 00 00       	mov    ebx,0x13
c0007643:	84 c0                	test   al,al
c0007645:	0f 85 05 08 00 00    	jne    c0007e50 <f_mkfs+0xa95>
c000764b:	e9 39 0e 00 00       	jmp    c0008489 <f_mkfs+0x10ce>
c0007650:	31 c0                	xor    eax,eax
c0007652:	ba ff 0f 00 00       	mov    edx,0xfff
c0007657:	89 c7                	mov    edi,eax
c0007659:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000765c:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007660:	0f 83 1a 0a 00 00    	jae    c0008080 <f_mkfs+0xcc5>
c0007666:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000766c:	77 39                	ja     c00076a7 <f_mkfs+0x2ec>
c000766e:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007673:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000767b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000767e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007682:	73 08                	jae    c000768c <f_mkfs+0x2d1>
c0007684:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000768c:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007691:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007694:	b8 00 00 00 00       	mov    eax,0x0
c0007699:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000769d:	73 08                	jae    c00076a7 <f_mkfs+0x2ec>
c000769f:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00076a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00076af:	83 c0 20             	add    eax,0x20
c00076b2:	83 d2 00             	adc    edx,0x0
c00076b5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00076b9:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00076bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00076c1:	31 d2                	xor    edx,edx
c00076c3:	31 ff                	xor    edi,edi
c00076c5:	52                   	push   edx
c00076c6:	89 fb                	mov    ebx,edi
c00076c8:	50                   	push   eax
c00076c9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00076cd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00076d1:	e8 46 70 01 00       	call   c001e71c <__udivdi3>
c00076d6:	83 c4 10             	add    esp,0x10
c00076d9:	c1 e0 02             	shl    eax,0x2
c00076dc:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00076e0:	05 07 02 00 00       	add    eax,0x207
c00076e5:	89 f1                	mov    ecx,esi
c00076e7:	c1 e8 09             	shr    eax,0x9
c00076ea:	83 c1 ff             	add    ecx,0xffffffff
c00076ed:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076f1:	83 d3 ff             	adc    ebx,0xffffffff
c00076f4:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076f8:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	01 c8                	add    eax,ecx
c0007700:	11 da                	adc    edx,ebx
c0007702:	89 c1                	mov    ecx,eax
c0007704:	f7 de                	neg    esi
c0007706:	89 d0                	mov    eax,edx
c0007708:	83 d7 00             	adc    edi,0x0
c000770b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000770f:	f7 df                	neg    edi
c0007711:	21 f1                	and    ecx,esi
c0007713:	21 f8                	and    eax,edi
c0007715:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0007719:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000771d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007721:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007725:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007729:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000772c:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007730:	0f ac d0 01          	shrd   eax,edx,0x1
c0007734:	89 df                	mov    edi,ebx
c0007736:	d1 ea                	shr    edx,1
c0007738:	39 c1                	cmp    ecx,eax
c000773a:	19 d7                	sbb    edi,edx
c000773c:	0f 83 3e 09 00 00    	jae    c0008080 <f_mkfs+0xcc5>
c0007742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007746:	31 d2                	xor    edx,edx
c0007748:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000774c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007750:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007754:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007757:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000775b:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c000775f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007763:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007767:	83 f8 0f             	cmp    eax,0xf
c000776a:	0f 86 10 09 00 00    	jbe    c0008080 <f_mkfs+0xcc5>
c0007770:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007778:	0f 87 02 09 00 00    	ja     c0008080 <f_mkfs+0xcc5>
c000777e:	31 d2                	xor    edx,edx
c0007780:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007784:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000778c:	83 c0 07             	add    eax,0x7
c000778f:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007797:	c1 e8 03             	shr    eax,0x3
c000779a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00077a1:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00077a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077a9:	c1 e0 09             	shl    eax,0x9
c00077ac:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00077b0:	48                   	dec    eax
c00077b1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00077b5:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00077b9:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00077bd:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00077c1:	31 d2                	xor    edx,edx
c00077c3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00077c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00077ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077d2:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00077d7:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00077db:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00077df:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077e3:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00077e7:	31 ff                	xor    edi,edi
c00077e9:	31 f6                	xor    esi,esi
c00077eb:	31 db                	xor    ebx,ebx
c00077ed:	85 ff                	test   edi,edi
c00077ef:	74 05                	je     c00077f6 <f_mkfs+0x43b>
c00077f1:	4f                   	dec    edi
c00077f2:	74 44                	je     c0007838 <f_mkfs+0x47d>
c00077f4:	eb 4f                	jmp    c0007845 <f_mkfs+0x48a>
c00077f6:	83 ec 0c             	sub    esp,0xc
c00077f9:	0f b7 c3             	movzx  eax,bx
c00077fc:	50                   	push   eax
c00077fd:	e8 05 0e 00 00       	call   c0008607 <ff_wtoupper>
c0007802:	83 c4 10             	add    esp,0x10
c0007805:	89 c1                	mov    ecx,eax
c0007807:	8d 53 01             	lea    edx,[ebx+0x1]
c000780a:	66 39 c3             	cmp    bx,ax
c000780d:	75 3e                	jne    c000784d <f_mkfs+0x492>
c000780f:	be 01 00 00 00       	mov    esi,0x1
c0007814:	89 df                	mov    edi,ebx
c0007816:	66 01 f7             	add    di,si
c0007819:	75 07                	jne    c0007822 <f_mkfs+0x467>
c000781b:	83 fe 7f             	cmp    esi,0x7f
c000781e:	77 31                	ja     c0007851 <f_mkfs+0x496>
c0007820:	eb 16                	jmp    c0007838 <f_mkfs+0x47d>
c0007822:	83 ec 0c             	sub    esp,0xc
c0007825:	0f b7 ff             	movzx  edi,di
c0007828:	57                   	push   edi
c0007829:	e8 d9 0d 00 00       	call   c0008607 <ff_wtoupper>
c000782e:	83 c4 10             	add    esp,0x10
c0007831:	39 c7                	cmp    edi,eax
c0007833:	75 e6                	jne    c000781b <f_mkfs+0x460>
c0007835:	46                   	inc    esi
c0007836:	eb dc                	jmp    c0007814 <f_mkfs+0x459>
c0007838:	31 c0                	xor    eax,eax
c000783a:	89 d9                	mov    ecx,ebx
c000783c:	4e                   	dec    esi
c000783d:	0f 95 c0             	setne  al
c0007840:	43                   	inc    ebx
c0007841:	89 c7                	mov    edi,eax
c0007843:	eb 14                	jmp    c0007859 <f_mkfs+0x49e>
c0007845:	89 f1                	mov    ecx,esi
c0007847:	01 f3                	add    ebx,esi
c0007849:	31 ff                	xor    edi,edi
c000784b:	eb 0c                	jmp    c0007859 <f_mkfs+0x49e>
c000784d:	89 d3                	mov    ebx,edx
c000784f:	eb 08                	jmp    c0007859 <f_mkfs+0x49e>
c0007851:	bf 02 00 00 00       	mov    edi,0x2
c0007856:	83 c9 ff             	or     ecx,0xffffffff
c0007859:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000785d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007860:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007864:	0f b6 c1             	movzx  eax,cl
c0007867:	e8 3a a9 ff ff       	call   c00021a6 <xsum32>
c000786c:	66 c1 e9 08          	shr    cx,0x8
c0007870:	89 c2                	mov    edx,eax
c0007872:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007875:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007879:	0f b7 c1             	movzx  eax,cx
c000787c:	e8 25 a9 ff ff       	call   c00021a6 <xsum32>
c0007881:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007886:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000788a:	66 85 db             	test   bx,bx
c000788d:	74 1f                	je     c00078ae <f_mkfs+0x4f3>
c000788f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007892:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007899:	83 c0 02             	add    eax,0x2
c000789c:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00078a2:	39 c2                	cmp    edx,eax
c00078a4:	74 08                	je     c00078ae <f_mkfs+0x4f3>
c00078a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00078a9:	e9 3f ff ff ff       	jmp    c00077ed <f_mkfs+0x432>
c00078ae:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00078b1:	83 ec 0c             	sub    esp,0xc
c00078b4:	05 01 02 00 00       	add    eax,0x201
c00078b9:	c1 e8 09             	shr    eax,0x9
c00078bc:	50                   	push   eax
c00078bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00078c1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00078c5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00078c9:	55                   	push   ebp
c00078ca:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00078ce:	e8 a3 a3 ff ff       	call   c0001c76 <disk_write>
c00078d3:	83 c4 20             	add    esp,0x20
c00078d6:	85 c0                	test   eax,eax
c00078d8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00078db:	0f 85 8b 0b 00 00    	jne    c000846c <f_mkfs+0x10b1>
c00078e1:	89 d0                	mov    eax,edx
c00078e3:	31 d2                	xor    edx,edx
c00078e5:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00078e9:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078ed:	66 85 db             	test   bx,bx
c00078f0:	74 04                	je     c00078f6 <f_mkfs+0x53b>
c00078f2:	31 c0                	xor    eax,eax
c00078f4:	eb b0                	jmp    c00078a6 <f_mkfs+0x4eb>
c00078f6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078fa:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078fe:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007902:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c0007908:	31 d2                	xor    edx,edx
c000790a:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007915:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007919:	c1 eb 09             	shr    ebx,0x9
c000791c:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007923:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007927:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000792b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000792f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007933:	8d 70 01             	lea    esi,[eax+0x1]
c0007936:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000793a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000793e:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007945:	31 d2                	xor    edx,edx
c0007947:	25 00 fe ff ff       	and    eax,0xfffffe00
c000794c:	89 04 24             	mov    DWORD PTR [esp],eax
c000794f:	89 c1                	mov    ecx,eax
c0007951:	89 e8                	mov    eax,ebp
c0007953:	e8 e7 a3 ff ff       	call   c0001d3f <mem_set>
c0007958:	31 c0                	xor    eax,eax
c000795a:	39 04 24             	cmp    DWORD PTR [esp],eax
c000795d:	76 10                	jbe    c000796f <f_mkfs+0x5b4>
c000795f:	83 fe 07             	cmp    esi,0x7
c0007962:	76 0b                	jbe    c000796f <f_mkfs+0x5b4>
c0007964:	40                   	inc    eax
c0007965:	83 ee 08             	sub    esi,0x8
c0007968:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c000796d:	eb eb                	jmp    c000795a <f_mkfs+0x59f>
c000796f:	b2 01                	mov    dl,0x1
c0007971:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007975:	85 f6                	test   esi,esi
c0007977:	74 0c                	je     c0007985 <f_mkfs+0x5ca>
c0007979:	39 04 24             	cmp    DWORD PTR [esp],eax
c000797c:	76 07                	jbe    c0007985 <f_mkfs+0x5ca>
c000797e:	08 11                	or     BYTE PTR [ecx],dl
c0007980:	4e                   	dec    esi
c0007981:	d1 e2                	shl    edx,1
c0007983:	eb f0                	jmp    c0007975 <f_mkfs+0x5ba>
c0007985:	89 df                	mov    edi,ebx
c0007987:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000798b:	76 04                	jbe    c0007991 <f_mkfs+0x5d6>
c000798d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007991:	83 ec 0c             	sub    esp,0xc
c0007994:	57                   	push   edi
c0007995:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007999:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000799d:	55                   	push   ebp
c000799e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079a2:	e8 cf a2 ff ff       	call   c0001c76 <disk_write>
c00079a7:	83 c4 20             	add    esp,0x20
c00079aa:	85 c0                	test   eax,eax
c00079ac:	0f 85 ba 0a 00 00    	jne    c000846c <f_mkfs+0x10b1>
c00079b2:	31 d2                	xor    edx,edx
c00079b4:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c00079b8:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c00079bc:	29 fb                	sub    ebx,edi
c00079be:	0f 85 7a ff ff ff    	jne    c000793e <f_mkfs+0x583>
c00079c4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00079c8:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00079d0:	31 f6                	xor    esi,esi
c00079d2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00079d6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00079d9:	31 d2                	xor    edx,edx
c00079db:	89 e8                	mov    eax,ebp
c00079dd:	e8 5d a3 ff ff       	call   c0001d3f <mem_set>
c00079e2:	31 c9                	xor    ecx,ecx
c00079e4:	85 db                	test   ebx,ebx
c00079e6:	75 40                	jne    c0007a28 <f_mkfs+0x66d>
c00079e8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079ed:	89 e8                	mov    eax,ebp
c00079ef:	bb 02 00 00 00       	mov    ebx,0x2
c00079f4:	e8 28 a3 ff ff       	call   c0001d21 <st_dword>
c00079f9:	8d 45 04             	lea    eax,[ebp+0x4]
c00079fc:	83 ca ff             	or     edx,0xffffffff
c00079ff:	e8 1d a3 ff ff       	call   c0001d21 <st_dword>
c0007a04:	b9 08 00 00 00       	mov    ecx,0x8
c0007a09:	eb 1d                	jmp    c0007a28 <f_mkfs+0x66d>
c0007a0b:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007a0e:	76 3b                	jbe    c0007a4b <f_mkfs+0x690>
c0007a10:	43                   	inc    ebx
c0007a11:	83 fe 01             	cmp    esi,0x1
c0007a14:	89 da                	mov    edx,ebx
c0007a16:	77 03                	ja     c0007a1b <f_mkfs+0x660>
c0007a18:	83 ca ff             	or     edx,0xffffffff
c0007a1b:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007a1f:	4e                   	dec    esi
c0007a20:	e8 fc a2 ff ff       	call   c0001d21 <st_dword>
c0007a25:	83 c1 04             	add    ecx,0x4
c0007a28:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a2c:	85 f6                	test   esi,esi
c0007a2e:	75 db                	jne    c0007a0b <f_mkfs+0x650>
c0007a30:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007a35:	77 14                	ja     c0007a4b <f_mkfs+0x690>
c0007a37:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007a3b:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007a42:	85 f6                	test   esi,esi
c0007a44:	74 05                	je     c0007a4b <f_mkfs+0x690>
c0007a46:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007a49:	77 dd                	ja     c0007a28 <f_mkfs+0x66d>
c0007a4b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a4f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a53:	39 cf                	cmp    edi,ecx
c0007a55:	76 02                	jbe    c0007a59 <f_mkfs+0x69e>
c0007a57:	89 cf                	mov    edi,ecx
c0007a59:	83 ec 0c             	sub    esp,0xc
c0007a5c:	57                   	push   edi
c0007a5d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a61:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a65:	55                   	push   ebp
c0007a66:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a6a:	e8 07 a2 ff ff       	call   c0001c76 <disk_write>
c0007a6f:	83 c4 20             	add    esp,0x20
c0007a72:	85 c0                	test   eax,eax
c0007a74:	0f 85 f2 09 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007a7a:	31 d2                	xor    edx,edx
c0007a7c:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a80:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a84:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a88:	0f 85 48 ff ff ff    	jne    c00079d6 <f_mkfs+0x61b>
c0007a8e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a91:	31 d2                	xor    edx,edx
c0007a93:	89 e8                	mov    eax,ebp
c0007a95:	31 ff                	xor    edi,edi
c0007a97:	e8 a3 a2 ff ff       	call   c0001d3f <mem_set>
c0007a9c:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a9f:	ba 02 00 00 00       	mov    edx,0x2
c0007aa4:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007aa8:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007aac:	e8 70 a2 ff ff       	call   c0001d21 <st_dword>
c0007ab1:	8d 45 38             	lea    eax,[ebp+0x38]
c0007ab4:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007ab8:	e8 64 a2 ff ff       	call   c0001d21 <st_dword>
c0007abd:	8d 45 44             	lea    eax,[ebp+0x44]
c0007ac0:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007ac4:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007ac8:	e8 54 a2 ff ff       	call   c0001d21 <st_dword>
c0007acd:	8d 45 54             	lea    eax,[ebp+0x54]
c0007ad0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007ad4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007ad8:	83 c2 02             	add    edx,0x2
c0007adb:	e8 41 a2 ff ff       	call   c0001d21 <st_dword>
c0007ae0:	8d 45 58             	lea    eax,[ebp+0x58]
c0007ae3:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007ae7:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aeb:	e8 31 a2 ff ff       	call   c0001d21 <st_dword>
c0007af0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007af4:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007af9:	89 c6                	mov    esi,eax
c0007afb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aff:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007b03:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b06:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007b0a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007b0d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007b11:	39 cb                	cmp    ebx,ecx
c0007b13:	76 02                	jbe    c0007b17 <f_mkfs+0x75c>
c0007b15:	89 cb                	mov    ebx,ecx
c0007b17:	83 ec 0c             	sub    esp,0xc
c0007b1a:	53                   	push   ebx
c0007b1b:	57                   	push   edi
c0007b1c:	56                   	push   esi
c0007b1d:	55                   	push   ebp
c0007b1e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b22:	e8 4f a1 ff ff       	call   c0001c76 <disk_write>
c0007b27:	83 c4 20             	add    esp,0x20
c0007b2a:	85 c0                	test   eax,eax
c0007b2c:	0f 85 3a 09 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007b32:	31 d2                	xor    edx,edx
c0007b34:	b9 00 02 00 00       	mov    ecx,0x200
c0007b39:	89 e8                	mov    eax,ebp
c0007b3b:	e8 ff a1 ff ff       	call   c0001d3f <mem_set>
c0007b40:	31 d2                	xor    edx,edx
c0007b42:	01 de                	add    esi,ebx
c0007b44:	11 d7                	adc    edi,edx
c0007b46:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007b49:	75 bf                	jne    c0007b0a <f_mkfs+0x74f>
c0007b4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b4f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b53:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b5b:	b9 00 02 00 00       	mov    ecx,0x200
c0007b60:	31 d2                	xor    edx,edx
c0007b62:	89 e8                	mov    eax,ebp
c0007b64:	e8 d6 a1 ff ff       	call   c0001d3f <mem_set>
c0007b69:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b6e:	ba c0 f7 01 c0       	mov    edx,0xc001f7c0
c0007b73:	89 e8                	mov    eax,ebp
c0007b75:	e8 b0 a1 ff ff       	call   c0001d2a <mem_cpy>
c0007b7a:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b7d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b81:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b85:	e8 9a a1 ff ff       	call   c0001d24 <st_qword>
c0007b8a:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b8e:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b91:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b95:	e8 8a a1 ff ff       	call   c0001d24 <st_qword>
c0007b9a:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b9d:	ba 20 00 00 00       	mov    edx,0x20
c0007ba2:	e8 7a a1 ff ff       	call   c0001d21 <st_dword>
c0007ba7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007bab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007baf:	e8 6d a1 ff ff       	call   c0001d21 <st_dword>
c0007bb4:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007bb8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007bbc:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007bc0:	e8 5c a1 ff ff       	call   c0001d21 <st_dword>
c0007bc5:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007bc8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007bcc:	e8 50 a1 ff ff       	call   c0001d21 <st_dword>
c0007bd1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007bd5:	8d 50 02             	lea    edx,[eax+0x2]
c0007bd8:	8d 45 60             	lea    eax,[ebp+0x60]
c0007bdb:	e8 41 a1 ff ff       	call   c0001d21 <st_dword>
c0007be0:	8d 45 64             	lea    eax,[ebp+0x64]
c0007be3:	ba 00 00 21 50       	mov    edx,0x50210000
c0007be8:	e8 34 a1 ff ff       	call   c0001d21 <st_dword>
c0007bed:	8d 45 68             	lea    eax,[ebp+0x68]
c0007bf0:	ba 00 01 00 00       	mov    edx,0x100
c0007bf5:	e8 23 a1 ff ff       	call   c0001d1d <st_word>
c0007bfa:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bfe:	b8 0a 00 00 00       	mov    eax,0xa
c0007c03:	48                   	dec    eax
c0007c04:	74 05                	je     c0007c0b <f_mkfs+0x850>
c0007c06:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007c09:	eb f8                	jmp    c0007c03 <f_mkfs+0x848>
c0007c0b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c0f:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007c13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c17:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007c1b:	74 05                	je     c0007c22 <f_mkfs+0x867>
c0007c1d:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007c20:	eb f5                	jmp    c0007c17 <f_mkfs+0x85c>
c0007c22:	8d 45 78             	lea    eax,[ebp+0x78]
c0007c25:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007c2a:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007c30:	31 db                	xor    ebx,ebx
c0007c32:	e8 e6 a0 ff ff       	call   c0001d1d <st_word>
c0007c37:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007c3d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c42:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c45:	e8 d3 a0 ff ff       	call   c0001d1d <st_word>
c0007c4a:	31 c9                	xor    ecx,ecx
c0007c4c:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c4f:	83 f8 01             	cmp    eax,0x1
c0007c52:	76 13                	jbe    c0007c67 <f_mkfs+0x8ac>
c0007c54:	83 f9 70             	cmp    ecx,0x70
c0007c57:	74 0e                	je     c0007c67 <f_mkfs+0x8ac>
c0007c59:	89 da                	mov    edx,ebx
c0007c5b:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c60:	e8 41 a5 ff ff       	call   c00021a6 <xsum32>
c0007c65:	89 c3                	mov    ebx,eax
c0007c67:	41                   	inc    ecx
c0007c68:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c6e:	75 dc                	jne    c0007c4c <f_mkfs+0x891>
c0007c70:	89 f0                	mov    eax,esi
c0007c72:	89 fa                	mov    edx,edi
c0007c74:	83 c0 01             	add    eax,0x1
c0007c77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c7b:	83 d2 00             	adc    edx,0x0
c0007c7e:	83 ec 0c             	sub    esp,0xc
c0007c81:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c85:	6a 01                	push   0x1
c0007c87:	57                   	push   edi
c0007c88:	56                   	push   esi
c0007c89:	55                   	push   ebp
c0007c8a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c8e:	e8 e3 9f ff ff       	call   c0001c76 <disk_write>
c0007c93:	83 c4 20             	add    esp,0x20
c0007c96:	85 c0                	test   eax,eax
c0007c98:	0f 85 ce 07 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007c9e:	31 d2                	xor    edx,edx
c0007ca0:	b9 00 02 00 00       	mov    ecx,0x200
c0007ca5:	89 e8                	mov    eax,ebp
c0007ca7:	e8 93 a0 ff ff       	call   c0001d3f <mem_set>
c0007cac:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007cb1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cb4:	e8 64 a0 ff ff       	call   c0001d1d <st_word>
c0007cb9:	89 f0                	mov    eax,esi
c0007cbb:	89 fa                	mov    edx,edi
c0007cbd:	83 c0 09             	add    eax,0x9
c0007cc0:	83 d2 00             	adc    edx,0x0
c0007cc3:	89 04 24             	mov    DWORD PTR [esp],eax
c0007cc6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007cca:	31 c9                	xor    ecx,ecx
c0007ccc:	41                   	inc    ecx
c0007ccd:	89 da                	mov    edx,ebx
c0007ccf:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007cd4:	e8 cd a4 ff ff       	call   c00021a6 <xsum32>
c0007cd9:	89 c3                	mov    ebx,eax
c0007cdb:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ce1:	75 e9                	jne    c0007ccc <f_mkfs+0x911>
c0007ce3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007ce7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ceb:	83 c0 01             	add    eax,0x1
c0007cee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007cf2:	83 d2 00             	adc    edx,0x0
c0007cf5:	83 ec 0c             	sub    esp,0xc
c0007cf8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cfc:	6a 01                	push   0x1
c0007cfe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007d02:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007d06:	55                   	push   ebp
c0007d07:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d0b:	e8 66 9f ff ff       	call   c0001c76 <disk_write>
c0007d10:	83 c4 20             	add    esp,0x20
c0007d13:	85 c0                	test   eax,eax
c0007d15:	0f 85 51 07 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007d1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d1f:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007d23:	75 09                	jne    c0007d2e <f_mkfs+0x973>
c0007d25:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007d28:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007d2c:	74 12                	je     c0007d40 <f_mkfs+0x985>
c0007d2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007d32:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007d36:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007d3a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007d3e:	eb 8a                	jmp    c0007cca <f_mkfs+0x90f>
c0007d40:	31 d2                	xor    edx,edx
c0007d42:	b9 00 02 00 00       	mov    ecx,0x200
c0007d47:	89 e8                	mov    eax,ebp
c0007d49:	e8 f1 9f ff ff       	call   c0001d3f <mem_set>
c0007d4e:	83 c6 0b             	add    esi,0xb
c0007d51:	83 d7 00             	adc    edi,0x0
c0007d54:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d58:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d5c:	31 c9                	xor    ecx,ecx
c0007d5e:	41                   	inc    ecx
c0007d5f:	89 da                	mov    edx,ebx
c0007d61:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d66:	e8 3b a4 ff ff       	call   c00021a6 <xsum32>
c0007d6b:	89 c3                	mov    ebx,eax
c0007d6d:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d73:	75 e9                	jne    c0007d5e <f_mkfs+0x9a3>
c0007d75:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d78:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d7c:	83 c6 01             	add    esi,0x1
c0007d7f:	83 d7 00             	adc    edi,0x0
c0007d82:	83 ec 0c             	sub    esp,0xc
c0007d85:	6a 01                	push   0x1
c0007d87:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d8b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d8f:	55                   	push   ebp
c0007d90:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d94:	e8 dd 9e ff ff       	call   c0001c76 <disk_write>
c0007d99:	83 c4 20             	add    esp,0x20
c0007d9c:	85 c0                	test   eax,eax
c0007d9e:	0f 85 c8 06 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007da4:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007da8:	75 06                	jne    c0007db0 <f_mkfs+0x9f5>
c0007daa:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007dae:	74 09                	je     c0007db9 <f_mkfs+0x9fe>
c0007db0:	89 34 24             	mov    DWORD PTR [esp],esi
c0007db3:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007db7:	eb a3                	jmp    c0007d5c <f_mkfs+0x9a1>
c0007db9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007dbd:	89 da                	mov    edx,ebx
c0007dbf:	01 e8                	add    eax,ebp
c0007dc1:	e8 5b 9f ff ff       	call   c0001d21 <st_dword>
c0007dc6:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007dcb:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007dd3:	75 e4                	jne    c0007db9 <f_mkfs+0x9fe>
c0007dd5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007dd8:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ddc:	83 c6 02             	add    esi,0x2
c0007ddf:	83 d7 00             	adc    edi,0x0
c0007de2:	83 ec 0c             	sub    esp,0xc
c0007de5:	6a 01                	push   0x1
c0007de7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007deb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007def:	55                   	push   ebp
c0007df0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007df4:	e8 7d 9e ff ff       	call   c0001c76 <disk_write>
c0007df9:	83 c4 20             	add    esp,0x20
c0007dfc:	85 c0                	test   eax,eax
c0007dfe:	0f 85 68 06 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0007e04:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007e09:	74 0d                	je     c0007e18 <f_mkfs+0xa5d>
c0007e0b:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007e13:	e9 43 fd ff ff       	jmp    c0007b5b <f_mkfs+0x7a0>
c0007e18:	b1 07                	mov    cl,0x7
c0007e1a:	e9 e3 05 00 00       	jmp    c0008402 <f_mkfs+0x1047>
c0007e1f:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007e24:	0f 85 4f 02 00 00    	jne    c0008079 <f_mkfs+0xcbe>
c0007e2a:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007e2f:	0f 86 22 02 00 00    	jbe    c0008057 <f_mkfs+0xc9c>
c0007e35:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007e3a:	0f 85 81 06 00 00    	jne    c00084c1 <f_mkfs+0x1106>
c0007e40:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007e43:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007e47:	83 f8 40             	cmp    eax,0x40
c0007e4a:	0f 87 51 06 00 00    	ja     c00084a1 <f_mkfs+0x10e6>
c0007e50:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e54:	85 ff                	test   edi,edi
c0007e56:	75 1c                	jne    c0007e74 <f_mkfs+0xab9>
c0007e58:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e5b:	ba c0 f6 01 c0       	mov    edx,0xc001f6c0
c0007e60:	c1 e9 0c             	shr    ecx,0xc
c0007e63:	bf 01 00 00 00       	mov    edi,0x1
c0007e68:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e6b:	66 85 c0             	test   ax,ax
c0007e6e:	0f 85 95 01 00 00    	jne    c0008009 <f_mkfs+0xc4e>
c0007e74:	31 d2                	xor    edx,edx
c0007e76:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e79:	f7 f7                	div    edi
c0007e7b:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e80:	0f 86 95 01 00 00    	jbe    c000801b <f_mkfs+0xc60>
c0007e86:	83 c0 02             	add    eax,0x2
c0007e89:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e8e:	01 c0                	add    eax,eax
c0007e90:	05 ff 01 00 00       	add    eax,0x1ff
c0007e95:	be 01 00 00 00       	mov    esi,0x1
c0007e9a:	c1 e8 09             	shr    eax,0x9
c0007e9d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007ea1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007ea5:	c1 e0 05             	shl    eax,0x5
c0007ea8:	c1 e8 09             	shr    eax,0x9
c0007eab:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007eaf:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007eb4:	31 d2                	xor    edx,edx
c0007eb6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007eba:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007ebe:	89 f0                	mov    eax,esi
c0007ec0:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007ec4:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007ec8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007ecc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007ed0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007ed4:	31 d2                	xor    edx,edx
c0007ed6:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007edb:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007edf:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007ee3:	31 db                	xor    ebx,ebx
c0007ee5:	01 c8                	add    eax,ecx
c0007ee7:	11 da                	adc    edx,ebx
c0007ee9:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007eed:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ef1:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007ef5:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007ef9:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007efd:	f7 da                	neg    edx
c0007eff:	21 d1                	and    ecx,edx
c0007f01:	29 d9                	sub    ecx,ebx
c0007f03:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f08:	0f 85 20 01 00 00    	jne    c000802e <f_mkfs+0xc73>
c0007f0e:	31 db                	xor    ebx,ebx
c0007f10:	01 ce                	add    esi,ecx
c0007f12:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007f16:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007f1a:	31 d2                	xor    edx,edx
c0007f1c:	89 f8                	mov    eax,edi
c0007f1e:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007f22:	c1 e0 04             	shl    eax,0x4
c0007f25:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007f29:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007f2d:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007f31:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007f35:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007f38:	19 d3                	sbb    ebx,edx
c0007f3a:	0f 82 40 01 00 00    	jb     c0008080 <f_mkfs+0xcc5>
c0007f40:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f43:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f47:	89 c8                	mov    eax,ecx
c0007f49:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f4e:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f52:	29 f0                	sub    eax,esi
c0007f54:	29 d0                	sub    eax,edx
c0007f56:	31 d2                	xor    edx,edx
c0007f58:	f7 f7                	div    edi
c0007f5a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f5f:	89 c3                	mov    ebx,eax
c0007f61:	0f 85 b8 fe ff ff    	jne    c0007e1f <f_mkfs+0xa64>
c0007f67:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f6c:	0f 87 1d 01 00 00    	ja     c000808f <f_mkfs+0xcd4>
c0007f72:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f77:	0f 85 03 01 00 00    	jne    c0008080 <f_mkfs+0xcc5>
c0007f7d:	83 ff 01             	cmp    edi,0x1
c0007f80:	0f 86 fa 00 00 00    	jbe    c0008080 <f_mkfs+0xcc5>
c0007f86:	d1 ef                	shr    edi,1
c0007f88:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f8c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f90:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f93:	85 db                	test   ebx,ebx
c0007f95:	75 2d                	jne    c0007fc4 <f_mkfs+0xc09>
c0007f97:	89 cb                	mov    ebx,ecx
c0007f99:	ba d0 f6 01 c0       	mov    edx,0xc001f6d0
c0007f9e:	c1 eb 11             	shr    ebx,0x11
c0007fa1:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007fa9:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007fac:	66 85 c0             	test   ax,ax
c0007faf:	74 11                	je     c0007fc2 <f_mkfs+0xc07>
c0007fb1:	83 c2 02             	add    edx,0x2
c0007fb4:	39 d8                	cmp    eax,ebx
c0007fb6:	77 0a                	ja     c0007fc2 <f_mkfs+0xc07>
c0007fb8:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007fbc:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007fc0:	eb e7                	jmp    c0007fa9 <f_mkfs+0xbee>
c0007fc2:	31 db                	xor    ebx,ebx
c0007fc4:	31 d2                	xor    edx,edx
c0007fc6:	89 c8                	mov    eax,ecx
c0007fc8:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007fcc:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007fd3:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007fd8:	c1 ea 09             	shr    edx,0x9
c0007fdb:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007fe0:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007fe4:	0f 87 96 00 00 00    	ja     c0008080 <f_mkfs+0xcc5>
c0007fea:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fee:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007ff6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007ffa:	be 20 00 00 00       	mov    esi,0x20
c0007fff:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0008004:	e9 a6 fe ff ff       	jmp    c0007eaf <f_mkfs+0xaf4>
c0008009:	83 c2 02             	add    edx,0x2
c000800c:	39 c8                	cmp    eax,ecx
c000800e:	0f 87 60 fe ff ff    	ja     c0007e74 <f_mkfs+0xab9>
c0008014:	01 ff                	add    edi,edi
c0008016:	e9 4d fe ff ff       	jmp    c0007e68 <f_mkfs+0xaad>
c000801b:	8d 04 40             	lea    eax,[eax+eax*2]
c000801e:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008023:	40                   	inc    eax
c0008024:	d1 e8                	shr    eax,1
c0008026:	83 c0 03             	add    eax,0x3
c0008029:	e9 62 fe ff ff       	jmp    c0007e90 <f_mkfs+0xad5>
c000802e:	31 d2                	xor    edx,edx
c0008030:	89 c8                	mov    eax,ecx
c0008032:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008036:	85 d2                	test   edx,edx
c0008038:	74 0c                	je     c0008046 <f_mkfs+0xc8b>
c000803a:	49                   	dec    ecx
c000803b:	46                   	inc    esi
c000803c:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0008041:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0008046:	89 c8                	mov    eax,ecx
c0008048:	31 d2                	xor    edx,edx
c000804a:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c000804e:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008052:	e9 c3 fe ff ff       	jmp    c0007f1a <f_mkfs+0xb5f>
c0008057:	3d f5 0f 00 00       	cmp    eax,0xff5
c000805c:	77 31                	ja     c000808f <f_mkfs+0xcd4>
c000805e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008063:	75 1b                	jne    c0008080 <f_mkfs+0xcc5>
c0008065:	8d 04 3f             	lea    eax,[edi+edi*1]
c0008068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000806c:	3d 80 00 00 00       	cmp    eax,0x80
c0008071:	0f 86 d9 fd ff ff    	jbe    c0007e50 <f_mkfs+0xa95>
c0008077:	eb 07                	jmp    c0008080 <f_mkfs+0xcc5>
c0008079:	3d f5 0f 00 00       	cmp    eax,0xff5
c000807e:	76 0a                	jbe    c000808a <f_mkfs+0xccf>
c0008080:	bb 0e 00 00 00       	mov    ebx,0xe
c0008085:	e9 ff 03 00 00       	jmp    c0008489 <f_mkfs+0x10ce>
c000808a:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c000808f:	31 d2                	xor    edx,edx
c0008091:	b9 00 02 00 00       	mov    ecx,0x200
c0008096:	89 e8                	mov    eax,ebp
c0008098:	e8 a2 9c ff ff       	call   c0001d3f <mem_set>
c000809d:	b9 0b 00 00 00       	mov    ecx,0xb
c00080a2:	ba e2 f7 01 c0       	mov    edx,0xc001f7e2
c00080a7:	89 e8                	mov    eax,ebp
c00080a9:	e8 7c 9c ff ff       	call   c0001d2a <mem_cpy>
c00080ae:	8d 45 0b             	lea    eax,[ebp+0xb]
c00080b1:	ba 00 02 00 00       	mov    edx,0x200
c00080b6:	e8 62 9c ff ff       	call   c0001d1d <st_word>
c00080bb:	89 f8                	mov    eax,edi
c00080bd:	0f b7 d6             	movzx  edx,si
c00080c0:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c00080c3:	8d 45 0e             	lea    eax,[ebp+0xe]
c00080c6:	e8 52 9c ff ff       	call   c0001d1d <st_word>
c00080cb:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c00080cf:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080d4:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c00080d7:	75 08                	jne    c00080e1 <f_mkfs+0xd26>
c00080d9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00080e1:	8d 45 11             	lea    eax,[ebp+0x11]
c00080e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00080e8:	e8 30 9c ff ff       	call   c0001d1d <st_word>
c00080ed:	b8 ff ff 00 00       	mov    eax,0xffff
c00080f2:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080f6:	39 d0                	cmp    eax,edx
c00080f8:	b8 00 00 00 00       	mov    eax,0x0
c00080fd:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0008101:	72 0a                	jb     c000810d <f_mkfs+0xd52>
c0008103:	8d 45 13             	lea    eax,[ebp+0x13]
c0008106:	e8 12 9c ff ff       	call   c0001d1d <st_word>
c000810b:	eb 08                	jmp    c0008115 <f_mkfs+0xd5a>
c000810d:	8d 45 20             	lea    eax,[ebp+0x20]
c0008110:	e8 0c 9c ff ff       	call   c0001d21 <st_dword>
c0008115:	8d 45 18             	lea    eax,[ebp+0x18]
c0008118:	ba 3f 00 00 00       	mov    edx,0x3f
c000811d:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0008121:	e8 f7 9b ff ff       	call   c0001d1d <st_word>
c0008126:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0008129:	ba ff 00 00 00       	mov    edx,0xff
c000812e:	e8 ea 9b ff ff       	call   c0001d1d <st_word>
c0008133:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0008136:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000813a:	e8 e2 9b ff ff       	call   c0001d21 <st_dword>
c000813f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008144:	75 57                	jne    c000819d <f_mkfs+0xde2>
c0008146:	8d 45 43             	lea    eax,[ebp+0x43]
c0008149:	ba 00 00 21 50       	mov    edx,0x50210000
c000814e:	e8 ce 9b ff ff       	call   c0001d21 <st_dword>
c0008153:	8d 45 24             	lea    eax,[ebp+0x24]
c0008156:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000815a:	e8 c2 9b ff ff       	call   c0001d21 <st_dword>
c000815f:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008162:	ba 02 00 00 00       	mov    edx,0x2
c0008167:	e8 b5 9b ff ff       	call   c0001d21 <st_dword>
c000816c:	8d 45 30             	lea    eax,[ebp+0x30]
c000816f:	ba 01 00 00 00       	mov    edx,0x1
c0008174:	e8 a4 9b ff ff       	call   c0001d1d <st_word>
c0008179:	8d 45 32             	lea    eax,[ebp+0x32]
c000817c:	ba 06 00 00 00       	mov    edx,0x6
c0008181:	e8 97 9b ff ff       	call   c0001d1d <st_word>
c0008186:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c000818a:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c000818e:	8d 45 47             	lea    eax,[ebp+0x47]
c0008191:	b9 13 00 00 00       	mov    ecx,0x13
c0008196:	ba ee f7 01 c0       	mov    edx,0xc001f7ee
c000819b:	eb 2f                	jmp    c00081cc <f_mkfs+0xe11>
c000819d:	8d 45 27             	lea    eax,[ebp+0x27]
c00081a0:	ba 00 00 21 50       	mov    edx,0x50210000
c00081a5:	e8 77 9b ff ff       	call   c0001d21 <st_dword>
c00081aa:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c00081af:	8d 45 16             	lea    eax,[ebp+0x16]
c00081b2:	e8 66 9b ff ff       	call   c0001d1d <st_word>
c00081b7:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c00081bb:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c00081bf:	8d 45 2b             	lea    eax,[ebp+0x2b]
c00081c2:	b9 13 00 00 00       	mov    ecx,0x13
c00081c7:	ba 02 f8 01 c0       	mov    edx,0xc001f802
c00081cc:	e8 59 9b ff ff       	call   c0001d2a <mem_cpy>
c00081d1:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c00081d7:	ba 55 aa 00 00       	mov    edx,0xaa55
c00081dc:	89 f0                	mov    eax,esi
c00081de:	e8 3a 9b ff ff       	call   c0001d1d <st_word>
c00081e3:	83 ec 0c             	sub    esp,0xc
c00081e6:	6a 01                	push   0x1
c00081e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081ec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081f0:	55                   	push   ebp
c00081f1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081f5:	e8 7c 9a ff ff       	call   c0001c76 <disk_write>
c00081fa:	83 c4 20             	add    esp,0x20
c00081fd:	85 c0                	test   eax,eax
c00081ff:	0f 85 67 02 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0008205:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000820a:	0f 85 b7 00 00 00    	jne    c00082c7 <f_mkfs+0xf0c>
c0008210:	83 ec 0c             	sub    esp,0xc
c0008213:	6a 01                	push   0x1
c0008215:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008219:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000821d:	83 c0 06             	add    eax,0x6
c0008220:	83 d2 00             	adc    edx,0x0
c0008223:	52                   	push   edx
c0008224:	50                   	push   eax
c0008225:	55                   	push   ebp
c0008226:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000822a:	e8 47 9a ff ff       	call   c0001c76 <disk_write>
c000822f:	83 c4 20             	add    esp,0x20
c0008232:	b9 00 02 00 00       	mov    ecx,0x200
c0008237:	31 d2                	xor    edx,edx
c0008239:	89 e8                	mov    eax,ebp
c000823b:	e8 ff 9a ff ff       	call   c0001d3f <mem_set>
c0008240:	ba 52 52 61 41       	mov    edx,0x41615252
c0008245:	89 e8                	mov    eax,ebp
c0008247:	e8 d5 9a ff ff       	call   c0001d21 <st_dword>
c000824c:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008252:	ba 72 72 41 61       	mov    edx,0x61417272
c0008257:	e8 c5 9a ff ff       	call   c0001d21 <st_dword>
c000825c:	8d 53 ff             	lea    edx,[ebx-0x1]
c000825f:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0008265:	e8 b7 9a ff ff       	call   c0001d21 <st_dword>
c000826a:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008270:	ba 02 00 00 00       	mov    edx,0x2
c0008275:	e8 a7 9a ff ff       	call   c0001d21 <st_dword>
c000827a:	ba 55 aa 00 00       	mov    edx,0xaa55
c000827f:	89 f0                	mov    eax,esi
c0008281:	e8 97 9a ff ff       	call   c0001d1d <st_word>
c0008286:	83 ec 0c             	sub    esp,0xc
c0008289:	6a 01                	push   0x1
c000828b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000828f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008293:	83 c0 07             	add    eax,0x7
c0008296:	83 d2 00             	adc    edx,0x0
c0008299:	52                   	push   edx
c000829a:	50                   	push   eax
c000829b:	55                   	push   ebp
c000829c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082a0:	e8 d1 99 ff ff       	call   c0001c76 <disk_write>
c00082a5:	83 c4 14             	add    esp,0x14
c00082a8:	6a 01                	push   0x1
c00082aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00082ae:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00082b2:	83 c0 01             	add    eax,0x1
c00082b5:	83 d2 00             	adc    edx,0x0
c00082b8:	52                   	push   edx
c00082b9:	50                   	push   eax
c00082ba:	55                   	push   ebp
c00082bb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082bf:	e8 b2 99 ff ff       	call   c0001c76 <disk_write>
c00082c4:	83 c4 20             	add    esp,0x20
c00082c7:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c00082ce:	31 d2                	xor    edx,edx
c00082d0:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00082d6:	31 db                	xor    ebx,ebx
c00082d8:	89 e8                	mov    eax,ebp
c00082da:	e8 60 9a ff ff       	call   c0001d3f <mem_set>
c00082df:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c00082e4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082eb:	0f 94 c3             	sete   bl
c00082ee:	4b                   	dec    ebx
c00082ef:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082f5:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082fb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008300:	75 21                	jne    c0008323 <f_mkfs+0xf68>
c0008302:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0008307:	89 e8                	mov    eax,ebp
c0008309:	e8 13 9a ff ff       	call   c0001d21 <st_dword>
c000830e:	8d 45 04             	lea    eax,[ebp+0x4]
c0008311:	83 ca ff             	or     edx,0xffffffff
c0008314:	e8 08 9a ff ff       	call   c0001d21 <st_dword>
c0008319:	8d 45 08             	lea    eax,[ebp+0x8]
c000831c:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008321:	eb 04                	jmp    c0008327 <f_mkfs+0xf6c>
c0008323:	89 da                	mov    edx,ebx
c0008325:	89 e8                	mov    eax,ebp
c0008327:	e8 f5 99 ff ff       	call   c0001d21 <st_dword>
c000832c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008330:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008334:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0008338:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000833c:	39 ce                	cmp    esi,ecx
c000833e:	76 02                	jbe    c0008342 <f_mkfs+0xf87>
c0008340:	89 ce                	mov    esi,ecx
c0008342:	83 ec 0c             	sub    esp,0xc
c0008345:	56                   	push   esi
c0008346:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000834a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000834e:	55                   	push   ebp
c000834f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008353:	e8 1e 99 ff ff       	call   c0001c76 <disk_write>
c0008358:	83 c4 20             	add    esp,0x20
c000835b:	85 c0                	test   eax,eax
c000835d:	0f 85 09 01 00 00    	jne    c000846c <f_mkfs+0x10b1>
c0008363:	31 d2                	xor    edx,edx
c0008365:	b9 00 02 00 00       	mov    ecx,0x200
c000836a:	89 e8                	mov    eax,ebp
c000836c:	e8 ce 99 ff ff       	call   c0001d3f <mem_set>
c0008371:	31 d2                	xor    edx,edx
c0008373:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008377:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000837b:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000837f:	75 b3                	jne    c0008334 <f_mkfs+0xf79>
c0008381:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008384:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000838b:	40                   	inc    eax
c000838c:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008390:	0f 87 65 ff ff ff    	ja     c00082fb <f_mkfs+0xf40>
c0008396:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000839b:	74 04                	je     c00083a1 <f_mkfs+0xfe6>
c000839d:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00083a1:	89 fb                	mov    ebx,edi
c00083a3:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00083a7:	76 04                	jbe    c00083ad <f_mkfs+0xff2>
c00083a9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00083ad:	83 ec 0c             	sub    esp,0xc
c00083b0:	53                   	push   ebx
c00083b1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00083b5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00083b9:	55                   	push   ebp
c00083ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00083be:	e8 b3 98 ff ff       	call   c0001c76 <disk_write>
c00083c3:	83 c4 20             	add    esp,0x20
c00083c6:	85 c0                	test   eax,eax
c00083c8:	0f 85 9e 00 00 00    	jne    c000846c <f_mkfs+0x10b1>
c00083ce:	31 d2                	xor    edx,edx
c00083d0:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00083d4:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00083d8:	29 df                	sub    edi,ebx
c00083da:	75 c5                	jne    c00083a1 <f_mkfs+0xfe6>
c00083dc:	b1 0c                	mov    cl,0xc
c00083de:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00083e3:	74 1d                	je     c0008402 <f_mkfs+0x1047>
c00083e5:	b8 ff ff 00 00       	mov    eax,0xffff
c00083ea:	b1 06                	mov    cl,0x6
c00083ec:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083f0:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083f4:	72 0c                	jb     c0008402 <f_mkfs+0x1047>
c00083f6:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083fb:	0f 94 c1             	sete   cl
c00083fe:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008402:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c0008407:	75 4c                	jne    c0008455 <f_mkfs+0x109a>
c0008409:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000840d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008411:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0008418:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c000841f:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c000842a:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008435:	0f b6 c9             	movzx  ecx,cl
c0008438:	83 ec 0c             	sub    esp,0xc
c000843b:	55                   	push   ebp
c000843c:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008443:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008447:	e8 2f c2 ff ff       	call   c000467b <create_partition>
c000844c:	83 c4 10             	add    esp,0x10
c000844f:	89 c3                	mov    ebx,eax
c0008451:	85 c0                	test   eax,eax
c0008453:	75 34                	jne    c0008489 <f_mkfs+0x10ce>
c0008455:	31 db                	xor    ebx,ebx
c0008457:	50                   	push   eax
c0008458:	6a 00                	push   0x0
c000845a:	6a 00                	push   0x0
c000845c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008460:	e8 27 98 ff ff       	call   c0001c8c <disk_ioctl>
c0008465:	83 c4 10             	add    esp,0x10
c0008468:	85 c0                	test   eax,eax
c000846a:	74 1d                	je     c0008489 <f_mkfs+0x10ce>
c000846c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008474:	75 0c                	jne    c0008482 <f_mkfs+0x10c7>
c0008476:	83 ec 0c             	sub    esp,0xc
c0008479:	55                   	push   ebp
c000847a:	e8 75 00 00 00       	call   c00084f4 <ff_memfree>
c000847f:	83 c4 10             	add    esp,0x10
c0008482:	bb 01 00 00 00       	mov    ebx,0x1
c0008487:	eb 48                	jmp    c00084d1 <f_mkfs+0x1116>
c0008489:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008491:	75 3e                	jne    c00084d1 <f_mkfs+0x1116>
c0008493:	83 ec 0c             	sub    esp,0xc
c0008496:	55                   	push   ebp
c0008497:	e8 58 00 00 00       	call   c00084f4 <ff_memfree>
c000849c:	83 c4 10             	add    esp,0x10
c000849f:	eb 30                	jmp    c00084d1 <f_mkfs+0x1116>
c00084a1:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00084a6:	0f 85 eb fa ff ff    	jne    c0007f97 <f_mkfs+0xbdc>
c00084ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00084b0:	81 ff 80 00 00 00    	cmp    edi,0x80
c00084b6:	0f 86 b8 f9 ff ff    	jbe    c0007e74 <f_mkfs+0xab9>
c00084bc:	e9 bf fb ff ff       	jmp    c0008080 <f_mkfs+0xcc5>
c00084c1:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00084c6:	0f 85 c0 fa ff ff    	jne    c0007f8c <f_mkfs+0xbd1>
c00084cc:	e9 af fb ff ff       	jmp    c0008080 <f_mkfs+0xcc5>
c00084d1:	81 c4 9c 00 00 00    	add    esp,0x9c
c00084d7:	89 d8                	mov    eax,ebx
c00084d9:	5b                   	pop    ebx
c00084da:	5e                   	pop    esi
c00084db:	5f                   	pop    edi
c00084dc:	5d                   	pop    ebp
c00084dd:	c3                   	ret    

c00084de <ff_memalloc>:
c00084de:	83 ec 0c             	sub    esp,0xc
c00084e1:	83 ec 0c             	sub    esp,0xc
c00084e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084e8:	e8 10 50 00 00       	call   c000d4fd <malloc>
c00084ed:	83 c4 10             	add    esp,0x10
c00084f0:	83 c4 0c             	add    esp,0xc
c00084f3:	c3                   	ret    

c00084f4 <ff_memfree>:
c00084f4:	83 ec 0c             	sub    esp,0xc
c00084f7:	83 ec 0c             	sub    esp,0xc
c00084fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084fe:	e8 0a 50 00 00       	call   c000d50d <free>
c0008503:	83 c4 10             	add    esp,0x10
c0008506:	90                   	nop
c0008507:	83 c4 0c             	add    esp,0xc
c000850a:	c3                   	ret    

c000850b <ff_uni2oem>:
c000850b:	83 ec 14             	sub    esp,0x14
c000850e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008512:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008516:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c000851d:	c7 44 24 0c 20 fb 01 c0 	mov    DWORD PTR [esp+0xc],0xc001fb20
c0008525:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000852a:	77 0b                	ja     c0008537 <ff_uni2oem+0x2c>
c000852c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008530:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008535:	eb 5b                	jmp    c0008592 <ff_uni2oem+0x87>
c0008537:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c000853f:	77 51                	ja     c0008592 <ff_uni2oem+0x87>
c0008541:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008547:	75 49                	jne    c0008592 <ff_uni2oem+0x87>
c0008549:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008550:	eb 0b                	jmp    c000855d <ff_uni2oem+0x52>
c0008552:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008557:	40                   	inc    eax
c0008558:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c000855d:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008563:	77 1b                	ja     c0008580 <ff_uni2oem+0x75>
c0008565:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000856a:	01 c0                	add    eax,eax
c000856c:	89 c2                	mov    edx,eax
c000856e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008572:	01 d0                	add    eax,edx
c0008574:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008577:	0f b7 c0             	movzx  eax,ax
c000857a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000857e:	75 d2                	jne    c0008552 <ff_uni2oem+0x47>
c0008580:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008585:	83 e8 80             	sub    eax,0xffffff80
c0008588:	25 ff 00 00 00       	and    eax,0xff
c000858d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008592:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008597:	83 c4 14             	add    esp,0x14
c000859a:	c3                   	ret    

c000859b <ff_oem2uni>:
c000859b:	83 ec 18             	sub    esp,0x18
c000859e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00085a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00085a6:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c00085ab:	66 89 04 24          	mov    WORD PTR [esp],ax
c00085af:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c00085b6:	c7 44 24 10 20 fb 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fb20
c00085be:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00085c4:	77 0b                	ja     c00085d1 <ff_oem2uni+0x36>
c00085c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085ca:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085cf:	eb 2d                	jmp    c00085fe <ff_oem2uni+0x63>
c00085d1:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00085d7:	75 25                	jne    c00085fe <ff_oem2uni+0x63>
c00085d9:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00085e0:	77 1c                	ja     c00085fe <ff_oem2uni+0x63>
c00085e2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00085e7:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085ec:	01 c0                	add    eax,eax
c00085ee:	89 c2                	mov    edx,eax
c00085f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085f4:	01 d0                	add    eax,edx
c00085f6:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085f9:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085fe:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008603:	83 c4 18             	add    esp,0x18
c0008606:	c3                   	ret    

c0008607 <ff_wtoupper>:
c0008607:	83 ec 10             	sub    esp,0x10
c000860a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0008612:	0f 87 3e 01 00 00    	ja     c0008756 <ff_wtoupper+0x14f>
c0008618:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000861c:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008621:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008628:	77 07                	ja     c0008631 <ff_wtoupper+0x2a>
c000862a:	b8 20 f9 01 c0       	mov    eax,0xc001f920
c000862f:	eb 05                	jmp    c0008636 <ff_wtoupper+0x2f>
c0008631:	b8 60 f8 01 c0       	mov    eax,0xc001f860
c0008636:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000863a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000863e:	8d 50 02             	lea    edx,[eax+0x2]
c0008641:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008645:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008648:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000864d:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008653:	0f 84 f4 00 00 00    	je     c000874d <ff_wtoupper+0x146>
c0008659:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000865e:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008663:	0f 82 e4 00 00 00    	jb     c000874d <ff_wtoupper+0x146>
c0008669:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000866d:	8d 50 02             	lea    edx,[eax+0x2]
c0008670:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008674:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008677:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000867c:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008681:	66 c1 e8 08          	shr    ax,0x8
c0008685:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000868a:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008691:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008696:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000869b:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c00086a0:	01 ca                	add    edx,ecx
c00086a2:	39 d0                	cmp    eax,edx
c00086a4:	0f 8d 86 00 00 00    	jge    c0008730 <ff_wtoupper+0x129>
c00086aa:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00086af:	83 f8 08             	cmp    eax,0x8
c00086b2:	0f 87 94 00 00 00    	ja     c000874c <ff_wtoupper+0x145>
c00086b8:	8b 04 85 20 f8 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe07e0]
c00086bf:	ff e0                	jmp    eax
c00086c1:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00086c6:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00086cb:	29 c2                	sub    edx,eax
c00086cd:	89 d0                	mov    eax,edx
c00086cf:	01 c0                	add    eax,eax
c00086d1:	89 c2                	mov    edx,eax
c00086d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00086d7:	01 d0                	add    eax,edx
c00086d9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00086dc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00086e1:	eb 4b                	jmp    c000872e <ff_wtoupper+0x127>
c00086e3:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00086e8:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086ec:	83 e0 01             	and    eax,0x1
c00086ef:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086f4:	eb 38                	jmp    c000872e <ff_wtoupper+0x127>
c00086f6:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086fc:	eb 30                	jmp    c000872e <ff_wtoupper+0x127>
c00086fe:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0008704:	eb 28                	jmp    c000872e <ff_wtoupper+0x127>
c0008706:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c000870c:	eb 20                	jmp    c000872e <ff_wtoupper+0x127>
c000870e:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0008714:	eb 18                	jmp    c000872e <ff_wtoupper+0x127>
c0008716:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c000871c:	eb 10                	jmp    c000872e <ff_wtoupper+0x127>
c000871e:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008724:	eb 08                	jmp    c000872e <ff_wtoupper+0x127>
c0008726:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c000872d:	90                   	nop
c000872e:	eb 1c                	jmp    c000874c <ff_wtoupper+0x145>
c0008730:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008736:	0f 85 fe fe ff ff    	jne    c000863a <ff_wtoupper+0x33>
c000873c:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008741:	01 c0                	add    eax,eax
c0008743:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0008747:	e9 ee fe ff ff       	jmp    c000863a <ff_wtoupper+0x33>
c000874c:	90                   	nop
c000874d:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008752:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008756:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000875a:	83 c4 10             	add    esp,0x10
c000875d:	c3                   	ret    

c000875e <is_bad_src_ratio>:
c000875e:	83 ec 0c             	sub    esp,0xc
c0008761:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008765:	89 04 24             	mov    DWORD PTR [esp],eax
c0008768:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000876c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008770:	dd 04 24             	fld    QWORD PTR [esp]
c0008773:	dd 05 e0 00 02 c0    	fld    QWORD PTR ds:0xc00200e0
c0008779:	de d9                	fcompp 
c000877b:	df e0                	fnstsw ax
c000877d:	f6 c4 45             	test   ah,0x45
c0008780:	74 10                	je     c0008792 <is_bad_src_ratio+0x34>
c0008782:	dd 04 24             	fld    QWORD PTR [esp]
c0008785:	dc 1d e8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200e8
c000878b:	df e0                	fnstsw ax
c000878d:	f6 c4 45             	test   ah,0x45
c0008790:	75 07                	jne    c0008799 <is_bad_src_ratio+0x3b>
c0008792:	b8 01 00 00 00       	mov    eax,0x1
c0008797:	eb 05                	jmp    c000879e <is_bad_src_ratio+0x40>
c0008799:	b8 00 00 00 00       	mov    eax,0x0
c000879e:	83 c4 0c             	add    esp,0xc
c00087a1:	c3                   	ret    

c00087a2 <psrc_set_converter>:
c00087a2:	56                   	push   esi
c00087a3:	89 d6                	mov    esi,edx
c00087a5:	53                   	push   ebx
c00087a6:	89 c3                	mov    ebx,eax
c00087a8:	83 ec 0c             	sub    esp,0xc
c00087ab:	52                   	push   edx
c00087ac:	50                   	push   eax
c00087ad:	e8 33 24 00 00       	call   c000abe5 <sinc_set_converter>
c00087b2:	83 c4 10             	add    esp,0x10
c00087b5:	85 c0                	test   eax,eax
c00087b7:	74 25                	je     c00087de <psrc_set_converter+0x3c>
c00087b9:	50                   	push   eax
c00087ba:	50                   	push   eax
c00087bb:	56                   	push   esi
c00087bc:	53                   	push   ebx
c00087bd:	e8 39 29 00 00       	call   c000b0fb <zoh_set_converter>
c00087c2:	83 c4 10             	add    esp,0x10
c00087c5:	85 c0                	test   eax,eax
c00087c7:	74 15                	je     c00087de <psrc_set_converter+0x3c>
c00087c9:	51                   	push   ecx
c00087ca:	51                   	push   ecx
c00087cb:	56                   	push   esi
c00087cc:	53                   	push   ebx
c00087cd:	e8 10 0a 00 00       	call   c00091e2 <linear_set_converter>
c00087d2:	83 c4 10             	add    esp,0x10
c00087d5:	ba 0a 00 00 00       	mov    edx,0xa
c00087da:	85 c0                	test   eax,eax
c00087dc:	75 02                	jne    c00087e0 <psrc_set_converter+0x3e>
c00087de:	31 d2                	xor    edx,edx
c00087e0:	89 d0                	mov    eax,edx
c00087e2:	5a                   	pop    edx
c00087e3:	5b                   	pop    ebx
c00087e4:	5e                   	pop    esi
c00087e5:	c3                   	ret    

c00087e6 <src_delete>:
c00087e6:	53                   	push   ebx
c00087e7:	83 ec 08             	sub    esp,0x8
c00087ea:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ee:	85 db                	test   ebx,ebx
c00087f0:	74 29                	je     c000881b <src_delete+0x35>
c00087f2:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087f5:	85 c0                	test   eax,eax
c00087f7:	74 0c                	je     c0008805 <src_delete+0x1f>
c00087f9:	83 ec 0c             	sub    esp,0xc
c00087fc:	50                   	push   eax
c00087fd:	e8 0b 4d 00 00       	call   c000d50d <free>
c0008802:	83 c4 10             	add    esp,0x10
c0008805:	50                   	push   eax
c0008806:	6a 3c                	push   0x3c
c0008808:	6a 00                	push   0x0
c000880a:	53                   	push   ebx
c000880b:	e8 c8 7e ff ff       	call   c00006d8 <memset>
c0008810:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008813:	e8 f5 4c 00 00       	call   c000d50d <free>
c0008818:	83 c4 10             	add    esp,0x10
c000881b:	31 c0                	xor    eax,eax
c000881d:	83 c4 08             	add    esp,0x8
c0008820:	5b                   	pop    ebx
c0008821:	c3                   	ret    

c0008822 <src_process>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	53                   	push   ebx
c0008825:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008829:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000882d:	85 f6                	test   esi,esi
c000882f:	0f 84 e2 00 00 00    	je     c0008917 <src_process+0xf5>
c0008835:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0008839:	0f 84 df 00 00 00    	je     c000891e <src_process+0xfc>
c000883f:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008843:	0f 84 d5 00 00 00    	je     c000891e <src_process+0xfc>
c0008849:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008850:	0f 85 cf 00 00 00    	jne    c0008925 <src_process+0x103>
c0008856:	85 db                	test   ebx,ebx
c0008858:	0f 84 ce 00 00 00    	je     c000892c <src_process+0x10a>
c000885e:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008861:	0f 84 cc 00 00 00    	je     c0008933 <src_process+0x111>
c0008867:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000886b:	0f 84 c2 00 00 00    	je     c0008933 <src_process+0x111>
c0008871:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008874:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0008877:	e8 e2 fe ff ff       	call   c000875e <is_bad_src_ratio>
c000887c:	5a                   	pop    edx
c000887d:	85 c0                	test   eax,eax
c000887f:	59                   	pop    ecx
c0008880:	0f 85 b4 00 00 00    	jne    c000893a <src_process+0x118>
c0008886:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000888a:	79 07                	jns    c0008893 <src_process+0x71>
c000888c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008893:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0008897:	79 07                	jns    c00088a0 <src_process+0x7e>
c0008899:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00088a0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00088a2:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00088a5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00088a8:	39 ca                	cmp    edx,ecx
c00088aa:	73 0b                	jae    c00088b7 <src_process+0x95>
c00088ac:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c00088b0:	8d 04 82             	lea    eax,[edx+eax*4]
c00088b3:	39 c1                	cmp    ecx,eax
c00088b5:	eb 09                	jmp    c00088c0 <src_process+0x9e>
c00088b7:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c00088bb:	8d 04 81             	lea    eax,[ecx+eax*4]
c00088be:	39 c2                	cmp    edx,eax
c00088c0:	72 7f                	jb     c0008941 <src_process+0x11f>
c00088c2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00088c9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088d0:	d9 05 00 01 02 c0    	fld    DWORD PTR ds:0xc0020100
c00088d6:	dc 1e                	fcomp  QWORD PTR [esi]
c00088d8:	df e0                	fnstsw ax
c00088da:	9e                   	sahf   
c00088db:	76 05                	jbe    c00088e2 <src_process+0xc0>
c00088dd:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00088e0:	dd 1e                	fstp   QWORD PTR [esi]
c00088e2:	83 ec 10             	sub    esp,0x10
c00088e5:	dd 06                	fld    QWORD PTR [esi]
c00088e7:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00088ea:	dd 1c 24             	fstp   QWORD PTR [esp]
c00088ed:	e8 4e 60 01 00       	call   c001e940 <fabs>
c00088f2:	83 c4 10             	add    esp,0x10
c00088f5:	dd 05 f0 00 02 c0    	fld    QWORD PTR ds:0xc00200f0
c00088fb:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00088ff:	de d9                	fcompp 
c0008901:	df e0                	fnstsw ax
c0008903:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0008907:	9e                   	sahf   
c0008908:	76 05                	jbe    c000890f <src_process+0xed>
c000890a:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000890d:	eb 03                	jmp    c0008912 <src_process+0xf0>
c000890f:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0008912:	59                   	pop    ecx
c0008913:	5b                   	pop    ebx
c0008914:	5e                   	pop    esi
c0008915:	ff e0                	jmp    eax
c0008917:	b8 02 00 00 00       	mov    eax,0x2
c000891c:	eb 28                	jmp    c0008946 <src_process+0x124>
c000891e:	b8 07 00 00 00       	mov    eax,0x7
c0008923:	eb 21                	jmp    c0008946 <src_process+0x124>
c0008925:	b8 12 00 00 00       	mov    eax,0x12
c000892a:	eb 1a                	jmp    c0008946 <src_process+0x124>
c000892c:	b8 03 00 00 00       	mov    eax,0x3
c0008931:	eb 13                	jmp    c0008946 <src_process+0x124>
c0008933:	b8 04 00 00 00       	mov    eax,0x4
c0008938:	eb 0c                	jmp    c0008946 <src_process+0x124>
c000893a:	b8 06 00 00 00       	mov    eax,0x6
c000893f:	eb 05                	jmp    c0008946 <src_process+0x124>
c0008941:	b8 10 00 00 00       	mov    eax,0x10
c0008946:	5a                   	pop    edx
c0008947:	5b                   	pop    ebx
c0008948:	5e                   	pop    esi
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 4c             	sub    esp,0x4c
c0008951:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0008955:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c0008959:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000895d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008961:	85 ff                	test   edi,edi
c0008963:	0f 8e 36 01 00 00    	jle    c0008a9f <src_callback_read+0x155>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 2e 01 00 00    	je     c0008a9f <src_callback_read+0x155>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 19 01 00 00       	jmp    c0008a9f <src_callback_read+0x155>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 07 01 00 00       	jmp    c0008a9f <src_callback_read+0x155>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 28          	lea    eax,[esp+0x28]
c00089a1:	50                   	push   eax
c00089a2:	e8 31 7d ff ff       	call   c00006d8 <memset>
c00089a7:	5e                   	pop    esi
c00089a8:	5d                   	pop    ebp
c00089a9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00089ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00089b1:	e8 a8 fd ff ff       	call   c000875e <is_bad_src_ratio>
c00089b6:	83 c4 10             	add    esp,0x10
c00089b9:	85 c0                	test   eax,eax
c00089bb:	74 0c                	je     c00089c9 <src_callback_read+0x7f>
c00089bd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089c4:	e9 d6 00 00 00       	jmp    c0008a9f <src_callback_read+0x155>
c00089c9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00089cd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00089d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00089d5:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00089d9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089dc:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00089e0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00089e4:	31 f6                	xor    esi,esi
c00089e6:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089e9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00089ed:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00089f2:	75 30                	jne    c0008a24 <src_callback_read+0xda>
c00089f4:	8d 44 24 14          	lea    eax,[esp+0x14]
c00089f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00089fc:	52                   	push   edx
c00089fd:	52                   	push   edx
c00089fe:	8d 44 24 20          	lea    eax,[esp+0x20]
c0008a02:	50                   	push   eax
c0008a03:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a06:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a09:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0008a0d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008a11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0008a15:	83 c4 10             	add    esp,0x10
c0008a18:	85 c0                	test   eax,eax
c0008a1a:	75 08                	jne    c0008a24 <src_callback_read+0xda>
c0008a1c:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008a24:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a2b:	50                   	push   eax
c0008a2c:	50                   	push   eax
c0008a2d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0008a31:	50                   	push   eax
c0008a32:	53                   	push   ebx
c0008a33:	e8 ea fd ff ff       	call   c0008822 <src_process>
c0008a38:	83 c4 10             	add    esp,0x10
c0008a3b:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a42:	85 c0                	test   eax,eax
c0008a44:	75 42                	jne    c0008a88 <src_callback_read+0x13e>
c0008a46:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0008a4a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a4d:	89 e9                	mov    ecx,ebp
c0008a4f:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c0008a53:	0f af ca             	imul   ecx,edx
c0008a56:	c1 e1 02             	shl    ecx,0x2
c0008a59:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0008a5d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0008a61:	0f af d1             	imul   edx,ecx
c0008a64:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c0008a68:	c1 e2 02             	shl    edx,0x2
c0008a6b:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008a6f:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a72:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c0008a77:	75 04                	jne    c0008a7d <src_callback_read+0x133>
c0008a79:	85 c9                	test   ecx,ecx
c0008a7b:	74 0b                	je     c0008a88 <src_callback_read+0x13e>
c0008a7d:	39 d7                	cmp    edi,edx
c0008a7f:	7e 09                	jle    c0008a8a <src_callback_read+0x140>
c0008a81:	89 d6                	mov    esi,edx
c0008a83:	e9 65 ff ff ff       	jmp    c00089ed <src_callback_read+0xa3>
c0008a88:	89 f2                	mov    edx,esi
c0008a8a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008a8e:	85 c0                	test   eax,eax
c0008a90:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a93:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008a97:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a9a:	74 05                	je     c0008aa1 <src_callback_read+0x157>
c0008a9c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a9f:	31 d2                	xor    edx,edx
c0008aa1:	83 c4 4c             	add    esp,0x4c
c0008aa4:	89 d0                	mov    eax,edx
c0008aa6:	5b                   	pop    ebx
c0008aa7:	5e                   	pop    esi
c0008aa8:	5f                   	pop    edi
c0008aa9:	5d                   	pop    ebp
c0008aaa:	c3                   	ret    

c0008aab <src_set_ratio>:
c0008aab:	53                   	push   ebx
c0008aac:	b8 02 00 00 00       	mov    eax,0x2
c0008ab1:	83 ec 08             	sub    esp,0x8
c0008ab4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ab8:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c0008abc:	85 db                	test   ebx,ebx
c0008abe:	74 33                	je     c0008af3 <src_set_ratio+0x48>
c0008ac0:	b8 07 00 00 00       	mov    eax,0x7
c0008ac5:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ac9:	74 2c                	je     c0008af7 <src_set_ratio+0x4c>
c0008acb:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008acf:	74 2a                	je     c0008afb <src_set_ratio+0x50>
c0008ad1:	50                   	push   eax
c0008ad2:	50                   	push   eax
c0008ad3:	dd 14 24             	fst    QWORD PTR [esp]
c0008ad6:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008ada:	e8 7f fc ff ff       	call   c000875e <is_bad_src_ratio>
c0008adf:	5a                   	pop    edx
c0008ae0:	85 c0                	test   eax,eax
c0008ae2:	59                   	pop    ecx
c0008ae3:	75 07                	jne    c0008aec <src_set_ratio+0x41>
c0008ae5:	dd 04 24             	fld    QWORD PTR [esp]
c0008ae8:	dd 1b                	fstp   QWORD PTR [ebx]
c0008aea:	eb 11                	jmp    c0008afd <src_set_ratio+0x52>
c0008aec:	b8 06 00 00 00       	mov    eax,0x6
c0008af1:	eb 0a                	jmp    c0008afd <src_set_ratio+0x52>
c0008af3:	dd d8                	fstp   st(0)
c0008af5:	eb 06                	jmp    c0008afd <src_set_ratio+0x52>
c0008af7:	dd d8                	fstp   st(0)
c0008af9:	eb 02                	jmp    c0008afd <src_set_ratio+0x52>
c0008afb:	dd d8                	fstp   st(0)
c0008afd:	83 c4 08             	add    esp,0x8
c0008b00:	5b                   	pop    ebx
c0008b01:	c3                   	ret    

c0008b02 <src_get_channels>:
c0008b02:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b06:	b8 02 00 00 00       	mov    eax,0x2
c0008b0b:	85 d2                	test   edx,edx
c0008b0d:	74 14                	je     c0008b23 <src_get_channels+0x21>
c0008b0f:	b8 07 00 00 00       	mov    eax,0x7
c0008b14:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b18:	74 09                	je     c0008b23 <src_get_channels+0x21>
c0008b1a:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b1e:	74 03                	je     c0008b23 <src_get_channels+0x21>
c0008b20:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b23:	c3                   	ret    

c0008b24 <src_reset>:
c0008b24:	53                   	push   ebx
c0008b25:	b8 02 00 00 00       	mov    eax,0x2
c0008b2a:	83 ec 08             	sub    esp,0x8
c0008b2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b31:	85 db                	test   ebx,ebx
c0008b33:	74 2e                	je     c0008b63 <src_reset+0x3f>
c0008b35:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b38:	85 c0                	test   eax,eax
c0008b3a:	74 09                	je     c0008b45 <src_reset+0x21>
c0008b3c:	83 ec 0c             	sub    esp,0xc
c0008b3f:	53                   	push   ebx
c0008b40:	ff d0                	call   eax
c0008b42:	83 c4 10             	add    esp,0x10
c0008b45:	d9 ee                	fldz   
c0008b47:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b4e:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008b51:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b58:	dd 1b                	fstp   QWORD PTR [ebx]
c0008b5a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b61:	31 c0                	xor    eax,eax
c0008b63:	83 c4 08             	add    esp,0x8
c0008b66:	5b                   	pop    ebx
c0008b67:	c3                   	ret    

c0008b68 <src_new>:
c0008b68:	57                   	push   edi
c0008b69:	56                   	push   esi
c0008b6a:	53                   	push   ebx
c0008b6b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b6f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b73:	85 f6                	test   esi,esi
c0008b75:	74 73                	je     c0008bea <src_new+0x82>
c0008b77:	85 ff                	test   edi,edi
c0008b79:	7f 08                	jg     c0008b83 <src_new+0x1b>
c0008b7b:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b81:	eb 1e                	jmp    c0008ba1 <src_new+0x39>
c0008b83:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008b89:	50                   	push   eax
c0008b8a:	50                   	push   eax
c0008b8b:	6a 3c                	push   0x3c
c0008b8d:	6a 01                	push   0x1
c0008b8f:	e8 99 49 00 00       	call   c000d52d <calloc>
c0008b94:	83 c4 10             	add    esp,0x10
c0008b97:	89 c3                	mov    ebx,eax
c0008b99:	85 c0                	test   eax,eax
c0008b9b:	75 10                	jne    c0008bad <src_new+0x45>
c0008b9d:	85 f6                	test   esi,esi
c0008b9f:	75 04                	jne    c0008ba5 <src_new+0x3d>
c0008ba1:	31 db                	xor    ebx,ebx
c0008ba3:	eb 4b                	jmp    c0008bf0 <src_new+0x88>
c0008ba5:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008bab:	eb 43                	jmp    c0008bf0 <src_new+0x88>
c0008bad:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bb0:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bb7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bbb:	e8 e2 fb ff ff       	call   c00087a2 <psrc_set_converter>
c0008bc0:	85 c0                	test   eax,eax
c0008bc2:	74 18                	je     c0008bdc <src_new+0x74>
c0008bc4:	85 f6                	test   esi,esi
c0008bc6:	74 06                	je     c0008bce <src_new+0x66>
c0008bc8:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008bce:	83 ec 0c             	sub    esp,0xc
c0008bd1:	53                   	push   ebx
c0008bd2:	31 db                	xor    ebx,ebx
c0008bd4:	e8 34 49 00 00       	call   c000d50d <free>
c0008bd9:	83 c4 10             	add    esp,0x10
c0008bdc:	83 ec 0c             	sub    esp,0xc
c0008bdf:	53                   	push   ebx
c0008be0:	e8 3f ff ff ff       	call   c0008b24 <src_reset>
c0008be5:	83 c4 10             	add    esp,0x10
c0008be8:	eb 06                	jmp    c0008bf0 <src_new+0x88>
c0008bea:	85 ff                	test   edi,edi
c0008bec:	7f 9b                	jg     c0008b89 <src_new+0x21>
c0008bee:	eb b1                	jmp    c0008ba1 <src_new+0x39>
c0008bf0:	89 d8                	mov    eax,ebx
c0008bf2:	5b                   	pop    ebx
c0008bf3:	5e                   	pop    esi
c0008bf4:	5f                   	pop    edi
c0008bf5:	c3                   	ret    

c0008bf6 <src_callback_new>:
c0008bf6:	56                   	push   esi
c0008bf7:	53                   	push   ebx
c0008bf8:	53                   	push   ebx
c0008bf9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008bfd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c01:	85 f6                	test   esi,esi
c0008c03:	75 0e                	jne    c0008c13 <src_callback_new+0x1d>
c0008c05:	31 db                	xor    ebx,ebx
c0008c07:	85 c0                	test   eax,eax
c0008c09:	74 47                	je     c0008c52 <src_callback_new+0x5c>
c0008c0b:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c11:	eb 3f                	jmp    c0008c52 <src_callback_new+0x5c>
c0008c13:	85 c0                	test   eax,eax
c0008c15:	74 06                	je     c0008c1d <src_callback_new+0x27>
c0008c17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c1d:	51                   	push   ecx
c0008c1e:	50                   	push   eax
c0008c1f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c23:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c27:	e8 3c ff ff ff       	call   c0008b68 <src_new>
c0008c2c:	83 c4 10             	add    esp,0x10
c0008c2f:	89 c3                	mov    ebx,eax
c0008c31:	85 c0                	test   eax,eax
c0008c33:	74 1d                	je     c0008c52 <src_callback_new+0x5c>
c0008c35:	83 ec 0c             	sub    esp,0xc
c0008c38:	50                   	push   eax
c0008c39:	e8 e6 fe ff ff       	call   c0008b24 <src_reset>
c0008c3e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c42:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c49:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c4c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c4f:	83 c4 10             	add    esp,0x10
c0008c52:	89 d8                	mov    eax,ebx
c0008c54:	5a                   	pop    edx
c0008c55:	5b                   	pop    ebx
c0008c56:	5e                   	pop    esi
c0008c57:	c3                   	ret    

c0008c58 <src_get_name>:
c0008c58:	53                   	push   ebx
c0008c59:	83 ec 14             	sub    esp,0x14
c0008c5c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c60:	53                   	push   ebx
c0008c61:	e8 59 1f 00 00       	call   c000abbf <sinc_get_name>
c0008c66:	83 c4 10             	add    esp,0x10
c0008c69:	85 c0                	test   eax,eax
c0008c6b:	75 1d                	jne    c0008c8a <src_get_name+0x32>
c0008c6d:	83 ec 0c             	sub    esp,0xc
c0008c70:	53                   	push   ebx
c0008c71:	e8 67 24 00 00       	call   c000b0dd <zoh_get_name>
c0008c76:	83 c4 10             	add    esp,0x10
c0008c79:	85 c0                	test   eax,eax
c0008c7b:	75 0d                	jne    c0008c8a <src_get_name+0x32>
c0008c7d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c81:	83 c4 08             	add    esp,0x8
c0008c84:	5b                   	pop    ebx
c0008c85:	e9 3a 05 00 00       	jmp    c00091c4 <linear_get_name>
c0008c8a:	83 c4 08             	add    esp,0x8
c0008c8d:	5b                   	pop    ebx
c0008c8e:	c3                   	ret    

c0008c8f <src_get_description>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 35 1f 00 00       	call   c000abd2 <sinc_get_description>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_description+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 3f 24 00 00       	call   c000b0ec <zoh_get_description>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_description+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 12 05 00 00       	jmp    c00091d3 <linear_get_description>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_version>:
c0008cc6:	b8 20 fc 01 c0       	mov    eax,0xc001fc20
c0008ccb:	c3                   	ret    

c0008ccc <src_is_valid_ratio>:
c0008ccc:	50                   	push   eax
c0008ccd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008cd1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008cd5:	e8 84 fa ff ff       	call   c000875e <is_bad_src_ratio>
c0008cda:	85 c0                	test   eax,eax
c0008cdc:	0f 94 c0             	sete   al
c0008cdf:	83 c4 0c             	add    esp,0xc
c0008ce2:	0f b6 c0             	movzx  eax,al
c0008ce5:	c3                   	ret    

c0008ce6 <src_error>:
c0008ce6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008cea:	31 c0                	xor    eax,eax
c0008cec:	85 d2                	test   edx,edx
c0008cee:	74 03                	je     c0008cf3 <src_error+0xd>
c0008cf0:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008cf3:	c3                   	ret    

c0008cf4 <src_strerror>:
c0008cf4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008cf8:	31 c0                	xor    eax,eax
c0008cfa:	83 fa 17             	cmp    edx,0x17
c0008cfd:	77 07                	ja     c0008d06 <src_strerror+0x12>
c0008cff:	8b 04 95 80 00 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdff80]
c0008d06:	c3                   	ret    

c0008d07 <src_simple>:
c0008d07:	56                   	push   esi
c0008d08:	53                   	push   ebx
c0008d09:	83 ec 18             	sub    esp,0x18
c0008d0c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d10:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d14:	50                   	push   eax
c0008d15:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d19:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d1d:	e8 46 fe ff ff       	call   c0008b68 <src_new>
c0008d22:	83 c4 10             	add    esp,0x10
c0008d25:	85 c0                	test   eax,eax
c0008d27:	75 06                	jne    c0008d2f <src_simple+0x28>
c0008d29:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d2d:	eb 25                	jmp    c0008d54 <src_simple+0x4d>
c0008d2f:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d36:	89 c3                	mov    ebx,eax
c0008d38:	50                   	push   eax
c0008d39:	50                   	push   eax
c0008d3a:	56                   	push   esi
c0008d3b:	53                   	push   ebx
c0008d3c:	e8 e1 fa ff ff       	call   c0008822 <src_process>
c0008d41:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d44:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d48:	e8 99 fa ff ff       	call   c00087e6 <src_delete>
c0008d4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	83 c4 14             	add    esp,0x14
c0008d57:	5b                   	pop    ebx
c0008d58:	5e                   	pop    esi
c0008d59:	c3                   	ret    

c0008d5a <src_short_to_float_array>:
c0008d5a:	83 ec 0c             	sub    esp,0xc
c0008d5d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008d61:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008d65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008d69:	85 c0                	test   eax,eax
c0008d6b:	74 0f                	je     c0008d7c <src_short_to_float_array+0x22>
c0008d6d:	48                   	dec    eax
c0008d6e:	d9 05 04 01 02 c0    	fld    DWORD PTR ds:0xc0020104
c0008d74:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008d77:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008d7a:	eb ed                	jmp    c0008d69 <src_short_to_float_array+0xf>
c0008d7c:	83 c4 0c             	add    esp,0xc
c0008d7f:	c3                   	ret    

c0008d80 <src_float_to_short_array>:
c0008d80:	56                   	push   esi
c0008d81:	53                   	push   ebx
c0008d82:	52                   	push   edx
c0008d83:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008d87:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008d8b:	85 db                	test   ebx,ebx
c0008d8d:	74 51                	je     c0008de0 <src_float_to_short_array+0x60>
c0008d8f:	4b                   	dec    ebx
c0008d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d94:	d9 05 08 01 02 c0    	fld    DWORD PTR ds:0xc0020108
c0008d9a:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008d9d:	dc 15 f8 00 02 c0    	fcom   QWORD PTR ds:0xc00200f8
c0008da3:	df e0                	fnstsw ax
c0008da5:	9e                   	sahf   
c0008da6:	72 0a                	jb     c0008db2 <src_float_to_short_array+0x32>
c0008da8:	dd d8                	fstp   st(0)
c0008daa:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008db0:	eb d9                	jmp    c0008d8b <src_float_to_short_array+0xb>
c0008db2:	d9 05 0c 01 02 c0    	fld    DWORD PTR ds:0xc002010c
c0008db8:	d8 d9                	fcomp  st(1)
c0008dba:	df e0                	fnstsw ax
c0008dbc:	9e                   	sahf   
c0008dbd:	72 0a                	jb     c0008dc9 <src_float_to_short_array+0x49>
c0008dbf:	dd d8                	fstp   st(0)
c0008dc1:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008dc7:	eb c2                	jmp    c0008d8b <src_float_to_short_array+0xb>
c0008dc9:	83 ec 10             	sub    esp,0x10
c0008dcc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dcf:	e8 8c 5b 01 00       	call   c001e960 <lrint>
c0008dd4:	83 c4 10             	add    esp,0x10
c0008dd7:	c1 f8 10             	sar    eax,0x10
c0008dda:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008dde:	eb ab                	jmp    c0008d8b <src_float_to_short_array+0xb>
c0008de0:	58                   	pop    eax
c0008de1:	5b                   	pop    ebx
c0008de2:	5e                   	pop    esi
c0008de3:	c3                   	ret    

c0008de4 <src_int_to_float_array>:
c0008de4:	83 ec 0c             	sub    esp,0xc
c0008de7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008deb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008def:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008df3:	85 c0                	test   eax,eax
c0008df5:	74 0f                	je     c0008e06 <src_int_to_float_array+0x22>
c0008df7:	48                   	dec    eax
c0008df8:	d9 05 10 01 02 c0    	fld    DWORD PTR ds:0xc0020110
c0008dfe:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008e01:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008e04:	eb ed                	jmp    c0008df3 <src_int_to_float_array+0xf>
c0008e06:	83 c4 0c             	add    esp,0xc
c0008e09:	c3                   	ret    

c0008e0a <src_float_to_int_array>:
c0008e0a:	56                   	push   esi
c0008e0b:	53                   	push   ebx
c0008e0c:	52                   	push   edx
c0008e0d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008e11:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008e15:	85 db                	test   ebx,ebx
c0008e17:	74 4f                	je     c0008e68 <src_float_to_int_array+0x5e>
c0008e19:	4b                   	dec    ebx
c0008e1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e1e:	d9 05 08 01 02 c0    	fld    DWORD PTR ds:0xc0020108
c0008e24:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008e27:	dc 15 f8 00 02 c0    	fcom   QWORD PTR ds:0xc00200f8
c0008e2d:	df e0                	fnstsw ax
c0008e2f:	9e                   	sahf   
c0008e30:	72 0b                	jb     c0008e3d <src_float_to_int_array+0x33>
c0008e32:	dd d8                	fstp   st(0)
c0008e34:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008e3b:	eb d8                	jmp    c0008e15 <src_float_to_int_array+0xb>
c0008e3d:	d9 05 0c 01 02 c0    	fld    DWORD PTR ds:0xc002010c
c0008e43:	d8 d9                	fcomp  st(1)
c0008e45:	df e0                	fnstsw ax
c0008e47:	9e                   	sahf   
c0008e48:	72 0b                	jb     c0008e55 <src_float_to_int_array+0x4b>
c0008e4a:	dd d8                	fstp   st(0)
c0008e4c:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008e53:	eb c0                	jmp    c0008e15 <src_float_to_int_array+0xb>
c0008e55:	83 ec 10             	sub    esp,0x10
c0008e58:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e5b:	e8 00 5b 01 00       	call   c001e960 <lrint>
c0008e60:	83 c4 10             	add    esp,0x10
c0008e63:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008e66:	eb ad                	jmp    c0008e15 <src_float_to_int_array+0xb>
c0008e68:	58                   	pop    eax
c0008e69:	5b                   	pop    ebx
c0008e6a:	5e                   	pop    esi
c0008e6b:	c3                   	ret    

c0008e6c <is_bad_src_ratio>:
c0008e6c:	83 ec 0c             	sub    esp,0xc
c0008e6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008e73:	89 04 24             	mov    DWORD PTR [esp],eax
c0008e76:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008e7a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e7e:	dd 04 24             	fld    QWORD PTR [esp]
c0008e81:	dd 05 e0 00 02 c0    	fld    QWORD PTR ds:0xc00200e0
c0008e87:	de d9                	fcompp 
c0008e89:	df e0                	fnstsw ax
c0008e8b:	f6 c4 45             	test   ah,0x45
c0008e8e:	74 10                	je     c0008ea0 <is_bad_src_ratio+0x34>
c0008e90:	dd 04 24             	fld    QWORD PTR [esp]
c0008e93:	dc 1d e8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200e8
c0008e99:	df e0                	fnstsw ax
c0008e9b:	f6 c4 45             	test   ah,0x45
c0008e9e:	75 07                	jne    c0008ea7 <is_bad_src_ratio+0x3b>
c0008ea0:	b8 01 00 00 00       	mov    eax,0x1
c0008ea5:	eb 05                	jmp    c0008eac <is_bad_src_ratio+0x40>
c0008ea7:	b8 00 00 00 00       	mov    eax,0x0
c0008eac:	83 c4 0c             	add    esp,0xc
c0008eaf:	c3                   	ret    

c0008eb0 <fmod_one>:
c0008eb0:	83 ec 2c             	sub    esp,0x2c
c0008eb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008eb7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ebb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008ebf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ec3:	83 ec 08             	sub    esp,0x8
c0008ec6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ece:	e8 8d 5a 01 00       	call   c001e960 <lrint>
c0008ed3:	83 c4 10             	add    esp,0x10
c0008ed6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008eda:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008ede:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008ee2:	de e1                	fsubrp st(1),st
c0008ee4:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008ee8:	d9 ee                	fldz   
c0008eea:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008eee:	df e0                	fnstsw ax
c0008ef0:	f6 c4 45             	test   ah,0x45
c0008ef3:	75 0a                	jne    c0008eff <fmod_one+0x4f>
c0008ef5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008ef9:	d9 e8                	fld1   
c0008efb:	de c1                	faddp  st(1),st
c0008efd:	eb 04                	jmp    c0008f03 <fmod_one+0x53>
c0008eff:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008f03:	83 c4 2c             	add    esp,0x2c
c0008f06:	c3                   	ret    

c0008f07 <linear_vari_process>:
c0008f07:	55                   	push   ebp
c0008f08:	57                   	push   edi
c0008f09:	56                   	push   esi
c0008f0a:	53                   	push   ebx
c0008f0b:	83 ec 2c             	sub    esp,0x2c
c0008f0e:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008f12:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008f16:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008f1e:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008f22:	0f 8e 5e 02 00 00    	jle    c0009186 <linear_vari_process+0x27f>
c0008f28:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008f2b:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008f33:	85 db                	test   ebx,ebx
c0008f35:	0f 84 4b 02 00 00    	je     c0009186 <linear_vari_process+0x27f>
c0008f3b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008f3e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008f42:	74 19                	je     c0008f5d <linear_vari_process+0x56>
c0008f44:	31 d2                	xor    edx,edx
c0008f46:	39 c2                	cmp    edx,eax
c0008f48:	7d 0c                	jge    c0008f56 <linear_vari_process+0x4f>
c0008f4a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008f4c:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008f4f:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008f53:	42                   	inc    edx
c0008f54:	eb f0                	jmp    c0008f46 <linear_vari_process+0x3f>
c0008f56:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008f5d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008f60:	0f af d0             	imul   edx,eax
c0008f63:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008f66:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008f6a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008f71:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008f74:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008f7b:	dd 07                	fld    QWORD PTR [edi]
c0008f7d:	dd 14 24             	fst    QWORD PTR [esp]
c0008f80:	50                   	push   eax
c0008f81:	50                   	push   eax
c0008f82:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008f85:	e8 e2 fe ff ff       	call   c0008e6c <is_bad_src_ratio>
c0008f8a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008f8e:	5a                   	pop    edx
c0008f8f:	59                   	pop    ecx
c0008f90:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008f95:	0f 85 e3 01 00 00    	jne    c000917e <linear_vari_process+0x277>
c0008f9b:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008f9e:	d9 e8                	fld1   
c0008fa0:	d8 d1                	fcom   st(1)
c0008fa2:	df e0                	fnstsw ax
c0008fa4:	9e                   	sahf   
c0008fa5:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008fa9:	0f 86 99 00 00 00    	jbe    c0009048 <linear_vari_process+0x141>
c0008faf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008fb2:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008fb5:	0f 8d 8d 00 00 00    	jge    c0009048 <linear_vari_process+0x141>
c0008fbb:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008fbf:	d8 c1                	fadd   st,st(1)
c0008fc1:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008fc4:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008fc7:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008fca:	df e0                	fnstsw ax
c0008fcc:	9e                   	sahf   
c0008fcd:	73 79                	jae    c0009048 <linear_vari_process+0x141>
c0008fcf:	85 d2                	test   edx,edx
c0008fd1:	7e 38                	jle    c000900b <linear_vari_process+0x104>
c0008fd3:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008fd7:	83 ec 10             	sub    esp,0x10
c0008fda:	dd 07                	fld    QWORD PTR [edi]
c0008fdc:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008fdf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008fe2:	e8 59 59 01 00       	call   c001e940 <fabs>
c0008fe7:	83 c4 10             	add    esp,0x10
c0008fea:	dc 1d 58 01 02 c0    	fcomp  QWORD PTR ds:0xc0020158
c0008ff0:	df e0                	fnstsw ax
c0008ff2:	9e                   	sahf   
c0008ff3:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008ff7:	76 12                	jbe    c000900b <linear_vari_process+0x104>
c0008ff9:	dd 07                	fld    QWORD PTR [edi]
c0008ffb:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008ffe:	d8 e1                	fsub   st,st(1)
c0009000:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0009003:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0009006:	de c1                	faddp  st(1),st
c0009008:	dd 1c 24             	fstp   QWORD PTR [esp]
c000900b:	31 c0                	xor    eax,eax
c000900d:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0009010:	7e 1f                	jle    c0009031 <linear_vari_process+0x12a>
c0009012:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0009016:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0009018:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000901b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000901f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0009022:	d8 e1                	fsub   st,st(1)
c0009024:	40                   	inc    eax
c0009025:	d8 ca                	fmul   st,st(2)
c0009027:	de c1                	faddp  st(1),st
c0009029:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000902c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000902f:	eb dc                	jmp    c000900d <linear_vari_process+0x106>
c0009031:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009035:	dc 34 24             	fdiv   QWORD PTR [esp]
c0009038:	de c1                	faddp  st(1),st
c000903a:	e9 5f ff ff ff       	jmp    c0008f9e <linear_vari_process+0x97>
c000903f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009043:	dc 34 24             	fdiv   QWORD PTR [esp]
c0009046:	de c1                	faddp  st(1),st
c0009048:	83 ec 10             	sub    esp,0x10
c000904b:	dd 14 24             	fst    QWORD PTR [esp]
c000904e:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009052:	e8 59 fe ff ff       	call   c0008eb0 <fmod_one>
c0009057:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000905a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000905e:	d8 e1                	fsub   st,st(1)
c0009060:	d9 c9                	fxch   st(1)
c0009062:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009066:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009069:	e8 f2 58 01 00       	call   c001e960 <lrint>
c000906e:	83 c4 10             	add    esp,0x10
c0009071:	0f af e8             	imul   ebp,eax
c0009074:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009078:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000907b:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000907e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0009081:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0009084:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0009087:	0f 8d 97 00 00 00    	jge    c0009124 <linear_vari_process+0x21d>
c000908d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009091:	d9 c0                	fld    st(0)
c0009093:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0009096:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000909a:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000909e:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c00090a2:	de d9                	fcompp 
c00090a4:	df e0                	fnstsw ax
c00090a6:	9e                   	sahf   
c00090a7:	76 7b                	jbe    c0009124 <linear_vari_process+0x21d>
c00090a9:	85 ed                	test   ebp,ebp
c00090ab:	7e 38                	jle    c00090e5 <linear_vari_process+0x1de>
c00090ad:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00090b1:	83 ec 10             	sub    esp,0x10
c00090b4:	dd 07                	fld    QWORD PTR [edi]
c00090b6:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c00090b9:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090bc:	e8 7f 58 01 00       	call   c001e940 <fabs>
c00090c1:	83 c4 10             	add    esp,0x10
c00090c4:	dc 1d 58 01 02 c0    	fcomp  QWORD PTR ds:0xc0020158
c00090ca:	df e0                	fnstsw ax
c00090cc:	9e                   	sahf   
c00090cd:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00090d1:	76 12                	jbe    c00090e5 <linear_vari_process+0x1de>
c00090d3:	dd 07                	fld    QWORD PTR [edi]
c00090d5:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c00090d8:	d8 e1                	fsub   st,st(1)
c00090da:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c00090dd:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c00090e0:	de c1                	faddp  st(1),st
c00090e2:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090e5:	31 c0                	xor    eax,eax
c00090e7:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00090ea:	39 c2                	cmp    edx,eax
c00090ec:	0f 8e 4d ff ff ff    	jle    c000903f <linear_vari_process+0x138>
c00090f2:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00090f4:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00090f7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00090fb:	89 e9                	mov    ecx,ebp
c00090fd:	01 c5                	add    ebp,eax
c00090ff:	29 d1                	sub    ecx,edx
c0009101:	89 ca                	mov    edx,ecx
c0009103:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009107:	01 c2                	add    edx,eax
c0009109:	40                   	inc    eax
c000910a:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000910d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0009110:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0009113:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0009116:	d8 e1                	fsub   st,st(1)
c0009118:	d8 ca                	fmul   st,st(2)
c000911a:	de c1                	faddp  st(1),st
c000911c:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c000911f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009122:	eb c3                	jmp    c00090e7 <linear_vari_process+0x1e0>
c0009124:	39 d1                	cmp    ecx,edx
c0009126:	7d 13                	jge    c000913b <linear_vari_process+0x234>
c0009128:	89 d0                	mov    eax,edx
c000912a:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000912d:	29 c8                	sub    eax,ecx
c000912f:	99                   	cdq    
c0009130:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009133:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009137:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c000913b:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000913e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009141:	85 c0                	test   eax,eax
c0009143:	7f 1b                	jg     c0009160 <linear_vari_process+0x259>
c0009145:	dd 04 24             	fld    QWORD PTR [esp]
c0009148:	dd 1f                	fstp   QWORD PTR [edi]
c000914a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000914d:	99                   	cdq    
c000914e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009151:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009154:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009157:	99                   	cdq    
c0009158:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000915b:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000915e:	eb 26                	jmp    c0009186 <linear_vari_process+0x27f>
c0009160:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0009163:	31 d2                	xor    edx,edx
c0009165:	29 c8                	sub    eax,ecx
c0009167:	c1 e0 02             	shl    eax,0x2
c000916a:	39 d1                	cmp    ecx,edx
c000916c:	7e d7                	jle    c0009145 <linear_vari_process+0x23e>
c000916e:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0009170:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0009174:	83 c0 04             	add    eax,0x4
c0009177:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000917b:	42                   	inc    edx
c000917c:	eb ec                	jmp    c000916a <linear_vari_process+0x263>
c000917e:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0009186:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000918a:	83 c4 2c             	add    esp,0x2c
c000918d:	5b                   	pop    ebx
c000918e:	5e                   	pop    esi
c000918f:	5f                   	pop    edi
c0009190:	5d                   	pop    ebp
c0009191:	c3                   	ret    

c0009192 <linear_reset>:
c0009192:	83 ec 0c             	sub    esp,0xc
c0009195:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009199:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000919c:	85 c0                	test   eax,eax
c000919e:	74 20                	je     c00091c0 <linear_reset+0x2e>
c00091a0:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00091a3:	83 c0 1c             	add    eax,0x1c
c00091a6:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00091a9:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c00091b0:	c1 e2 02             	shl    edx,0x2
c00091b3:	51                   	push   ecx
c00091b4:	52                   	push   edx
c00091b5:	6a 00                	push   0x0
c00091b7:	50                   	push   eax
c00091b8:	e8 1b 75 ff ff       	call   c00006d8 <memset>
c00091bd:	83 c4 10             	add    esp,0x10
c00091c0:	83 c4 0c             	add    esp,0xc
c00091c3:	c3                   	ret    

c00091c4 <linear_get_name>:
c00091c4:	31 c0                	xor    eax,eax
c00091c6:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00091cb:	75 05                	jne    c00091d2 <linear_get_name+0xe>
c00091cd:	b8 14 01 02 c0       	mov    eax,0xc0020114
c00091d2:	c3                   	ret    

c00091d3 <linear_get_description>:
c00091d3:	31 c0                	xor    eax,eax
c00091d5:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c00091da:	75 05                	jne    c00091e1 <linear_get_description+0xe>
c00091dc:	b8 28 01 02 c0       	mov    eax,0xc0020128
c00091e1:	c3                   	ret    

c00091e2 <linear_set_converter>:
c00091e2:	53                   	push   ebx
c00091e3:	b8 0a 00 00 00       	mov    eax,0xa
c00091e8:	83 ec 08             	sub    esp,0x8
c00091eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00091ef:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c00091f4:	75 6e                	jne    c0009264 <linear_set_converter+0x82>
c00091f6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00091f9:	85 c0                	test   eax,eax
c00091fb:	74 13                	je     c0009210 <linear_set_converter+0x2e>
c00091fd:	83 ec 0c             	sub    esp,0xc
c0009200:	50                   	push   eax
c0009201:	e8 07 43 00 00       	call   c000d50d <free>
c0009206:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000920d:	83 c4 10             	add    esp,0x10
c0009210:	50                   	push   eax
c0009211:	50                   	push   eax
c0009212:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009215:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000921c:	50                   	push   eax
c000921d:	6a 01                	push   0x1
c000921f:	e8 09 43 00 00       	call   c000d52d <calloc>
c0009224:	83 c4 10             	add    esp,0x10
c0009227:	89 c2                	mov    edx,eax
c0009229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000922c:	85 d2                	test   edx,edx
c000922e:	b8 01 00 00 00       	mov    eax,0x1
c0009233:	74 2f                	je     c0009264 <linear_set_converter+0x82>
c0009235:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c000923b:	83 ec 0c             	sub    esp,0xc
c000923e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009241:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009244:	c7 43 24 07 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008f07
c000924b:	c7 43 20 07 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008f07
c0009252:	c7 43 28 92 91 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009192
c0009259:	53                   	push   ebx
c000925a:	e8 33 ff ff ff       	call   c0009192 <linear_reset>
c000925f:	83 c4 10             	add    esp,0x10
c0009262:	31 c0                	xor    eax,eax
c0009264:	83 c4 08             	add    esp,0x8
c0009267:	5b                   	pop    ebx
c0009268:	c3                   	ret    

c0009269 <is_bad_src_ratio>:
c0009269:	83 ec 0c             	sub    esp,0xc
c000926c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009270:	89 04 24             	mov    DWORD PTR [esp],eax
c0009273:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009277:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000927b:	dd 04 24             	fld    QWORD PTR [esp]
c000927e:	dd 05 e0 00 02 c0    	fld    QWORD PTR ds:0xc00200e0
c0009284:	de d9                	fcompp 
c0009286:	df e0                	fnstsw ax
c0009288:	f6 c4 45             	test   ah,0x45
c000928b:	74 10                	je     c000929d <is_bad_src_ratio+0x34>
c000928d:	dd 04 24             	fld    QWORD PTR [esp]
c0009290:	dc 1d e8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200e8
c0009296:	df e0                	fnstsw ax
c0009298:	f6 c4 45             	test   ah,0x45
c000929b:	75 07                	jne    c00092a4 <is_bad_src_ratio+0x3b>
c000929d:	b8 01 00 00 00       	mov    eax,0x1
c00092a2:	eb 05                	jmp    c00092a9 <is_bad_src_ratio+0x40>
c00092a4:	b8 00 00 00 00       	mov    eax,0x0
c00092a9:	83 c4 0c             	add    esp,0xc
c00092ac:	c3                   	ret    

c00092ad <int_to_fp>:
c00092ad:	c1 e0 0c             	shl    eax,0xc
c00092b0:	c3                   	ret    

c00092b1 <fp_to_int>:
c00092b1:	c1 f8 0c             	sar    eax,0xc
c00092b4:	c3                   	ret    

c00092b5 <fp_fraction_part>:
c00092b5:	25 ff 0f 00 00       	and    eax,0xfff
c00092ba:	c3                   	ret    

c00092bb <fp_to_double>:
c00092bb:	83 ec 0c             	sub    esp,0xc
c00092be:	e8 f2 ff ff ff       	call   c00092b5 <fp_fraction_part>
c00092c3:	d9 05 20 88 03 c0    	fld    DWORD PTR ds:0xc0038820
c00092c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00092cd:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c00092d1:	83 c4 0c             	add    esp,0xc
c00092d4:	c3                   	ret    

c00092d5 <calc_output_single>:
c00092d5:	55                   	push   ebp
c00092d6:	57                   	push   edi
c00092d7:	89 c7                	mov    edi,eax
c00092d9:	56                   	push   esi
c00092da:	53                   	push   ebx
c00092db:	89 d3                	mov    ebx,edx
c00092dd:	83 ec 24             	sub    esp,0x24
c00092e0:	89 de                	mov    esi,ebx
c00092e2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00092e5:	e8 c3 ff ff ff       	call   c00092ad <int_to_fp>
c00092ea:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00092ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092f1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00092f8:	29 c8                	sub    eax,ecx
c00092fa:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0009302:	99                   	cdq    
c0009303:	f7 fb                	idiv   ebx
c0009305:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009308:	0f af f0             	imul   esi,eax
c000930b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000930f:	01 ce                	add    esi,ecx
c0009311:	29 c2                	sub    edx,eax
c0009313:	8d 14 97             	lea    edx,[edi+edx*4]
c0009316:	89 f0                	mov    eax,esi
c0009318:	e8 9e ff ff ff       	call   c00092bb <fp_to_double>
c000931d:	89 f0                	mov    eax,esi
c000931f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009323:	e8 89 ff ff ff       	call   c00092b1 <fp_to_int>
c0009328:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000932c:	83 c2 04             	add    edx,0x4
c000932f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009333:	d8 e1                	fsub   st,st(1)
c0009335:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009339:	de c9                	fmulp  st(1),st
c000933b:	de c1                	faddp  st(1),st
c000933d:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009343:	29 de                	sub    esi,ebx
c0009345:	dc 04 24             	fadd   QWORD PTR [esp]
c0009348:	dd 1c 24             	fstp   QWORD PTR [esp]
c000934b:	79 c9                	jns    c0009316 <calc_output_single+0x41>
c000934d:	89 d8                	mov    eax,ebx
c000934f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009353:	29 c8                	sub    eax,ecx
c0009355:	d9 ee                	fldz   
c0009357:	89 c1                	mov    ecx,eax
c0009359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000935d:	29 c8                	sub    eax,ecx
c000935f:	99                   	cdq    
c0009360:	f7 fb                	idiv   ebx
c0009362:	89 da                	mov    edx,ebx
c0009364:	0f af d0             	imul   edx,eax
c0009367:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c000936b:	01 d1                	add    ecx,edx
c000936d:	8d 14 87             	lea    edx,[edi+eax*4]
c0009370:	89 c8                	mov    eax,ecx
c0009372:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009376:	e8 40 ff ff ff       	call   c00092bb <fp_to_double>
c000937b:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000937f:	89 c8                	mov    eax,ecx
c0009381:	e8 2b ff ff ff       	call   c00092b1 <fp_to_int>
c0009386:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000938a:	29 d9                	sub    ecx,ebx
c000938c:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009390:	83 ea 04             	sub    edx,0x4
c0009393:	d8 e1                	fsub   st,st(1)
c0009395:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009399:	de c9                	fmulp  st(1),st
c000939b:	de c1                	faddp  st(1),st
c000939d:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c00093a3:	85 c9                	test   ecx,ecx
c00093a5:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00093a9:	de c1                	faddp  st(1),st
c00093ab:	7f c3                	jg     c0009370 <calc_output_single+0x9b>
c00093ad:	dd 04 24             	fld    QWORD PTR [esp]
c00093b0:	83 c4 24             	add    esp,0x24
c00093b3:	de c1                	faddp  st(1),st
c00093b5:	5b                   	pop    ebx
c00093b6:	5e                   	pop    esi
c00093b7:	5f                   	pop    edi
c00093b8:	5d                   	pop    ebp
c00093b9:	c3                   	ret    

c00093ba <calc_output_stereo>:
c00093ba:	55                   	push   ebp
c00093bb:	57                   	push   edi
c00093bc:	89 c7                	mov    edi,eax
c00093be:	56                   	push   esi
c00093bf:	53                   	push   ebx
c00093c0:	89 d3                	mov    ebx,edx
c00093c2:	83 ec 44             	sub    esp,0x44
c00093c5:	89 de                	mov    esi,ebx
c00093c7:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00093cb:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00093ce:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00093d2:	e8 d6 fe ff ff       	call   c00092ad <int_to_fp>
c00093d7:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00093da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00093de:	d9 ee                	fldz   
c00093e0:	29 c8                	sub    eax,ecx
c00093e2:	dd 14 24             	fst    QWORD PTR [esp]
c00093e5:	99                   	cdq    
c00093e6:	f7 fb                	idiv   ebx
c00093e8:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00093eb:	0f af f0             	imul   esi,eax
c00093ee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00093f2:	01 ce                	add    esi,ecx
c00093f4:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00093f7:	0f af c2             	imul   eax,edx
c00093fa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00093fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009402:	29 c2                	sub    edx,eax
c0009404:	8d 14 97             	lea    edx,[edi+edx*4]
c0009407:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000940b:	89 f0                	mov    eax,esi
c000940d:	e8 a9 fe ff ff       	call   c00092bb <fp_to_double>
c0009412:	89 f0                	mov    eax,esi
c0009414:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009418:	e8 94 fe ff ff       	call   c00092b1 <fp_to_int>
c000941d:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009421:	83 c2 08             	add    edx,0x8
c0009424:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009428:	d8 e1                	fsub   st,st(1)
c000942a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000942e:	de c9                	fmulp  st(1),st
c0009430:	de c1                	faddp  st(1),st
c0009432:	d9 c0                	fld    st(0)
c0009434:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000943a:	dc 04 24             	fadd   QWORD PTR [esp]
c000943d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009440:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009446:	29 de                	sub    esi,ebx
c0009448:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000944c:	de c1                	faddp  st(1),st
c000944e:	79 b7                	jns    c0009407 <calc_output_stereo+0x4d>
c0009450:	89 d8                	mov    eax,ebx
c0009452:	d9 ee                	fldz   
c0009454:	d9 ee                	fldz   
c0009456:	29 c8                	sub    eax,ecx
c0009458:	89 c1                	mov    ecx,eax
c000945a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000945e:	29 c8                	sub    eax,ecx
c0009460:	99                   	cdq    
c0009461:	f7 fb                	idiv   ebx
c0009463:	89 da                	mov    edx,ebx
c0009465:	0f af d0             	imul   edx,eax
c0009468:	40                   	inc    eax
c0009469:	01 d1                	add    ecx,edx
c000946b:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c0009470:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009474:	8d 14 87             	lea    edx,[edi+eax*4]
c0009477:	eb 04                	jmp    c000947d <calc_output_stereo+0xc3>
c0009479:	d9 ca                	fxch   st(2)
c000947b:	d9 c9                	fxch   st(1)
c000947d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009481:	d9 c9                	fxch   st(1)
c0009483:	89 c8                	mov    eax,ecx
c0009485:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009489:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000948d:	e8 29 fe ff ff       	call   c00092bb <fp_to_double>
c0009492:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009496:	89 c8                	mov    eax,ecx
c0009498:	e8 14 fe ff ff       	call   c00092b1 <fp_to_int>
c000949d:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00094a1:	29 d9                	sub    ecx,ebx
c00094a3:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00094a7:	83 ea 08             	sub    edx,0x8
c00094aa:	d8 e1                	fsub   st,st(1)
c00094ac:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00094b0:	de c9                	fmulp  st(1),st
c00094b2:	de c1                	faddp  st(1),st
c00094b4:	d9 c0                	fld    st(0)
c00094b6:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c00094bc:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00094c0:	de c1                	faddp  st(1),st
c00094c2:	d9 c9                	fxch   st(1)
c00094c4:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c00094ca:	85 c9                	test   ecx,ecx
c00094cc:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00094d0:	de c1                	faddp  st(1),st
c00094d2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00094d6:	7f a1                	jg     c0009479 <calc_output_stereo+0xbf>
c00094d8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00094dc:	dd 04 24             	fld    QWORD PTR [esp]
c00094df:	de c3                	faddp  st(3),st
c00094e1:	d9 ca                	fxch   st(2)
c00094e3:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00094e7:	d9 18                	fstp   DWORD PTR [eax]
c00094e9:	de c1                	faddp  st(1),st
c00094eb:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00094ef:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00094f2:	83 c4 44             	add    esp,0x44
c00094f5:	5b                   	pop    ebx
c00094f6:	5e                   	pop    esi
c00094f7:	5f                   	pop    edi
c00094f8:	5d                   	pop    ebp
c00094f9:	c3                   	ret    

c00094fa <calc_output_quad>:
c00094fa:	55                   	push   ebp
c00094fb:	57                   	push   edi
c00094fc:	56                   	push   esi
c00094fd:	89 c6                	mov    esi,eax
c00094ff:	53                   	push   ebx
c0009500:	89 d3                	mov    ebx,edx
c0009502:	83 ec 5c             	sub    esp,0x5c
c0009505:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c0009509:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000950c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000950f:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0009513:	e8 95 fd ff ff       	call   c00092ad <int_to_fp>
c0009518:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c000951b:	d9 ee                	fldz   
c000951d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009521:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009525:	29 c8                	sub    eax,ecx
c0009527:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c000952b:	99                   	cdq    
c000952c:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009530:	f7 fb                	idiv   ebx
c0009532:	89 da                	mov    edx,ebx
c0009534:	0f af d0             	imul   edx,eax
c0009537:	01 ca                	add    edx,ecx
c0009539:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000953d:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c0009540:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009544:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0009547:	0f af c2             	imul   eax,edx
c000954a:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000954e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009552:	29 c2                	sub    edx,eax
c0009554:	8d 14 96             	lea    edx,[esi+edx*4]
c0009557:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000955b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000955f:	e8 57 fd ff ff       	call   c00092bb <fp_to_double>
c0009564:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009568:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000956c:	e8 40 fd ff ff       	call   c00092b1 <fp_to_int>
c0009571:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009575:	83 c2 10             	add    edx,0x10
c0009578:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000957c:	d8 e1                	fsub   st,st(1)
c000957e:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009582:	de c9                	fmulp  st(1),st
c0009584:	de c1                	faddp  st(1),st
c0009586:	d9 c0                	fld    st(0)
c0009588:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c000958e:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009592:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009596:	d9 c0                	fld    st(0)
c0009598:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c000959e:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c00095a2:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00095a6:	d9 c0                	fld    st(0)
c00095a8:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00095ae:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00095b2:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00095b6:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00095bc:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c00095c0:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00095c4:	de c1                	faddp  st(1),st
c00095c6:	79 8f                	jns    c0009557 <calc_output_quad+0x5d>
c00095c8:	89 d8                	mov    eax,ebx
c00095ca:	d9 ee                	fldz   
c00095cc:	29 c8                	sub    eax,ecx
c00095ce:	d9 ee                	fldz   
c00095d0:	89 c1                	mov    ecx,eax
c00095d2:	d9 ee                	fldz   
c00095d4:	d9 ee                	fldz   
c00095d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00095da:	29 c8                	sub    eax,ecx
c00095dc:	99                   	cdq    
c00095dd:	f7 fb                	idiv   ebx
c00095df:	89 da                	mov    edx,ebx
c00095e1:	0f af d0             	imul   edx,eax
c00095e4:	40                   	inc    eax
c00095e5:	01 d1                	add    ecx,edx
c00095e7:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00095ec:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00095f0:	8d 14 86             	lea    edx,[esi+eax*4]
c00095f3:	eb 0a                	jmp    c00095ff <calc_output_quad+0x105>
c00095f5:	d9 cc                	fxch   st(4)
c00095f7:	d9 ca                	fxch   st(2)
c00095f9:	d9 c9                	fxch   st(1)
c00095fb:	d9 cb                	fxch   st(3)
c00095fd:	d9 c9                	fxch   st(1)
c00095ff:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009603:	d9 c9                	fxch   st(1)
c0009605:	89 c8                	mov    eax,ecx
c0009607:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000960b:	d9 c9                	fxch   st(1)
c000960d:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009611:	d9 c9                	fxch   st(1)
c0009613:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009617:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000961b:	e8 9b fc ff ff       	call   c00092bb <fp_to_double>
c0009620:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009624:	89 c8                	mov    eax,ecx
c0009626:	e8 86 fc ff ff       	call   c00092b1 <fp_to_int>
c000962b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000962f:	29 d9                	sub    ecx,ebx
c0009631:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009635:	83 ea 10             	sub    edx,0x10
c0009638:	d8 e1                	fsub   st,st(1)
c000963a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000963e:	de c9                	fmulp  st(1),st
c0009640:	de c1                	faddp  st(1),st
c0009642:	d9 c0                	fld    st(0)
c0009644:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c000964a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000964e:	de c1                	faddp  st(1),st
c0009650:	d9 c1                	fld    st(1)
c0009652:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c0009658:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000965c:	de c1                	faddp  st(1),st
c000965e:	d9 c2                	fld    st(2)
c0009660:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009666:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000966a:	de c1                	faddp  st(1),st
c000966c:	d9 cb                	fxch   st(3)
c000966e:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009674:	85 c9                	test   ecx,ecx
c0009676:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000967a:	de c1                	faddp  st(1),st
c000967c:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009680:	0f 8f 6f ff ff ff    	jg     c00095f5 <calc_output_quad+0xfb>
c0009686:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000968a:	de c4                	faddp  st(4),st
c000968c:	d9 cb                	fxch   st(3)
c000968e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009691:	d9 1f                	fstp   DWORD PTR [edi]
c0009693:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009697:	de c2                	faddp  st(2),st
c0009699:	d9 c9                	fxch   st(1)
c000969b:	dc 0c 24             	fmul   QWORD PTR [esp]
c000969e:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c00096a1:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00096a5:	de c3                	faddp  st(3),st
c00096a7:	d9 ca                	fxch   st(2)
c00096a9:	dc 0c 24             	fmul   QWORD PTR [esp]
c00096ac:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c00096af:	de c1                	faddp  st(1),st
c00096b1:	dc 0c 24             	fmul   QWORD PTR [esp]
c00096b4:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c00096b7:	83 c4 5c             	add    esp,0x5c
c00096ba:	5b                   	pop    ebx
c00096bb:	5e                   	pop    esi
c00096bc:	5f                   	pop    edi
c00096bd:	5d                   	pop    ebp
c00096be:	c3                   	ret    

c00096bf <calc_output_hex>:
c00096bf:	55                   	push   ebp
c00096c0:	57                   	push   edi
c00096c1:	89 c7                	mov    edi,eax
c00096c3:	56                   	push   esi
c00096c4:	53                   	push   ebx
c00096c5:	89 d3                	mov    ebx,edx
c00096c7:	83 ec 7c             	sub    esp,0x7c
c00096ca:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c00096d1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00096d4:	dd 1c 24             	fstp   QWORD PTR [esp]
c00096d7:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c00096de:	e8 ca fb ff ff       	call   c00092ad <int_to_fp>
c00096e3:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00096e6:	d9 ee                	fldz   
c00096e8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00096ec:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00096f0:	29 c8                	sub    eax,ecx
c00096f2:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00096f6:	99                   	cdq    
c00096f7:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00096fb:	f7 fb                	idiv   ebx
c00096fd:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c0009701:	89 da                	mov    edx,ebx
c0009703:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009707:	0f af d0             	imul   edx,eax
c000970a:	01 ca                	add    edx,ecx
c000970c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009710:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009713:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009717:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000971a:	0f af c2             	imul   eax,edx
c000971d:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009721:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009725:	29 c2                	sub    edx,eax
c0009727:	8d 14 97             	lea    edx,[edi+edx*4]
c000972a:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c000972e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009732:	e8 84 fb ff ff       	call   c00092bb <fp_to_double>
c0009737:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000973b:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c000973f:	e8 6d fb ff ff       	call   c00092b1 <fp_to_int>
c0009744:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009748:	83 c2 18             	add    edx,0x18
c000974b:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000974f:	d8 e1                	fsub   st,st(1)
c0009751:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009755:	de c9                	fmulp  st(1),st
c0009757:	de c1                	faddp  st(1),st
c0009759:	d9 c0                	fld    st(0)
c000975b:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009761:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009765:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009769:	d9 c0                	fld    st(0)
c000976b:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009771:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009775:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009779:	d9 c0                	fld    st(0)
c000977b:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009781:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009785:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009789:	d9 c0                	fld    st(0)
c000978b:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009791:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009795:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009799:	d9 c0                	fld    st(0)
c000979b:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00097a1:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00097a5:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00097a9:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00097af:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c00097b3:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00097b7:	de c1                	faddp  st(1),st
c00097b9:	0f 89 6b ff ff ff    	jns    c000972a <calc_output_hex+0x6b>
c00097bf:	d9 ee                	fldz   
c00097c1:	d9 ee                	fldz   
c00097c3:	89 d8                	mov    eax,ebx
c00097c5:	29 c8                	sub    eax,ecx
c00097c7:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c00097cb:	89 c1                	mov    ecx,eax
c00097cd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00097d1:	29 c8                	sub    eax,ecx
c00097d3:	99                   	cdq    
c00097d4:	f7 fb                	idiv   ebx
c00097d6:	89 da                	mov    edx,ebx
c00097d8:	0f af d0             	imul   edx,eax
c00097db:	40                   	inc    eax
c00097dc:	01 d1                	add    ecx,edx
c00097de:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c00097e3:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00097e7:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c00097eb:	8d 14 87             	lea    edx,[edi+eax*4]
c00097ee:	d9 ee                	fldz   
c00097f0:	d9 ee                	fldz   
c00097f2:	d9 ca                	fxch   st(2)
c00097f4:	eb 08                	jmp    c00097fe <calc_output_hex+0x13f>
c00097f6:	d9 cc                	fxch   st(4)
c00097f8:	d9 cb                	fxch   st(3)
c00097fa:	d9 ca                	fxch   st(2)
c00097fc:	d9 c9                	fxch   st(1)
c00097fe:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c0009802:	89 c8                	mov    eax,ecx
c0009804:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c0009808:	d9 ca                	fxch   st(2)
c000980a:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c000980e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0009812:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009816:	e8 a0 fa ff ff       	call   c00092bb <fp_to_double>
c000981b:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000981f:	89 c8                	mov    eax,ecx
c0009821:	e8 8b fa ff ff       	call   c00092b1 <fp_to_int>
c0009826:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000982a:	29 d9                	sub    ecx,ebx
c000982c:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009830:	83 ea 18             	sub    edx,0x18
c0009833:	d8 e1                	fsub   st,st(1)
c0009835:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009839:	de c9                	fmulp  st(1),st
c000983b:	de c1                	faddp  st(1),st
c000983d:	d9 c0                	fld    st(0)
c000983f:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009845:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0009849:	de c1                	faddp  st(1),st
c000984b:	d9 c1                	fld    st(1)
c000984d:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009853:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c0009857:	de c1                	faddp  st(1),st
c0009859:	d9 c2                	fld    st(2)
c000985b:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009861:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009865:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009869:	d9 c2                	fld    st(2)
c000986b:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009871:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009875:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009879:	d9 c2                	fld    st(2)
c000987b:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009881:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009885:	de c1                	faddp  st(1),st
c0009887:	d9 cb                	fxch   st(3)
c0009889:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c000988f:	85 c9                	test   ecx,ecx
c0009891:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009895:	de c1                	faddp  st(1),st
c0009897:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000989b:	0f 8f 55 ff ff ff    	jg     c00097f6 <calc_output_hex+0x137>
c00098a1:	d9 cb                	fxch   st(3)
c00098a3:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00098a7:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098aa:	d9 1e                	fstp   DWORD PTR [esi]
c00098ac:	d9 c9                	fxch   st(1)
c00098ae:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c00098b2:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098b5:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c00098b8:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00098bc:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00098c0:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098c3:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c00098c6:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00098ca:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00098ce:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098d1:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c00098d4:	d9 ca                	fxch   st(2)
c00098d6:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00098da:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098dd:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00098e0:	de c1                	faddp  st(1),st
c00098e2:	dc 0c 24             	fmul   QWORD PTR [esp]
c00098e5:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00098e8:	83 c4 7c             	add    esp,0x7c
c00098eb:	5b                   	pop    ebx
c00098ec:	5e                   	pop    esi
c00098ed:	5f                   	pop    edi
c00098ee:	5d                   	pop    ebp
c00098ef:	c3                   	ret    

c00098f0 <calc_output_multi>:
c00098f0:	55                   	push   ebp
c00098f1:	57                   	push   edi
c00098f2:	8d 78 44             	lea    edi,[eax+0x44]
c00098f5:	56                   	push   esi
c00098f6:	89 c6                	mov    esi,eax
c00098f8:	53                   	push   ebx
c00098f9:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c00098ff:	83 ec 4c             	sub    esp,0x4c
c0009902:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0009906:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c000990a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000990e:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009912:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009916:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000991a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000991d:	e8 8b f9 ff ff       	call   c00092ad <int_to_fp>
c0009922:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c0009925:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009929:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c000992d:	99                   	cdq    
c000992e:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009932:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009936:	0f af d0             	imul   edx,eax
c0009939:	0f af c3             	imul   eax,ebx
c000993c:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009940:	29 c5                	sub    ebp,eax
c0009942:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009946:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000994a:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009951:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009955:	52                   	push   edx
c0009956:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000995a:	6a 00                	push   0x0
c000995c:	57                   	push   edi
c000995d:	e8 76 6d ff ff       	call   c00006d8 <memset>
c0009962:	83 c4 10             	add    esp,0x10
c0009965:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009969:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000996d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009971:	e8 45 f9 ff ff       	call   c00092bb <fp_to_double>
c0009976:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000997a:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000997e:	e8 2e f9 ff ff       	call   c00092b1 <fp_to_int>
c0009983:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0009986:	89 d9                	mov    ecx,ebx
c0009988:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c000998b:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c000998f:	d8 e1                	fsub   st,st(1)
c0009991:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009995:	de c9                	fmulp  st(1),st
c0009997:	de c1                	faddp  st(1),st
c0009999:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000999d:	89 c8                	mov    eax,ecx
c000999f:	bd 08 00 00 00       	mov    ebp,0x8
c00099a4:	99                   	cdq    
c00099a5:	f7 fd                	idiv   ebp
c00099a7:	4a                   	dec    edx
c00099a8:	83 fa 06             	cmp    edx,0x6
c00099ab:	77 07                	ja     c00099b4 <calc_output_multi+0xc4>
c00099ad:	ff 24 95 60 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfea0]
c00099b4:	49                   	dec    ecx
c00099b5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099b9:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00099bc:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099c3:	d9 c1                	fld    st(1)
c00099c5:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099c9:	dc 00                	fadd   QWORD PTR [eax]
c00099cb:	dd 18                	fstp   QWORD PTR [eax]
c00099cd:	49                   	dec    ecx
c00099ce:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099d2:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00099d5:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099dc:	d9 c1                	fld    st(1)
c00099de:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099e2:	dc 00                	fadd   QWORD PTR [eax]
c00099e4:	dd 18                	fstp   QWORD PTR [eax]
c00099e6:	49                   	dec    ecx
c00099e7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099eb:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00099ee:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099f5:	d9 c1                	fld    st(1)
c00099f7:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099fb:	dc 00                	fadd   QWORD PTR [eax]
c00099fd:	dd 18                	fstp   QWORD PTR [eax]
c00099ff:	49                   	dec    ecx
c0009a00:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a04:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009a07:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a0e:	d9 c1                	fld    st(1)
c0009a10:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a14:	dc 00                	fadd   QWORD PTR [eax]
c0009a16:	dd 18                	fstp   QWORD PTR [eax]
c0009a18:	49                   	dec    ecx
c0009a19:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a1d:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009a20:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a27:	d9 c1                	fld    st(1)
c0009a29:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a2d:	dc 00                	fadd   QWORD PTR [eax]
c0009a2f:	dd 18                	fstp   QWORD PTR [eax]
c0009a31:	49                   	dec    ecx
c0009a32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a36:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009a39:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a40:	d9 c1                	fld    st(1)
c0009a42:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a46:	dc 00                	fadd   QWORD PTR [eax]
c0009a48:	dd 18                	fstp   QWORD PTR [eax]
c0009a4a:	49                   	dec    ecx
c0009a4b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a4f:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009a52:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a59:	d9 c1                	fld    st(1)
c0009a5b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a5f:	dc 00                	fadd   QWORD PTR [eax]
c0009a61:	dd 18                	fstp   QWORD PTR [eax]
c0009a63:	49                   	dec    ecx
c0009a64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009a68:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009a6b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009a72:	d9 c1                	fld    st(1)
c0009a74:	85 c9                	test   ecx,ecx
c0009a76:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009a7a:	dc 00                	fadd   QWORD PTR [eax]
c0009a7c:	dd 18                	fstp   QWORD PTR [eax]
c0009a7e:	0f 8f 19 ff ff ff    	jg     c000999d <calc_output_multi+0xad>
c0009a84:	dd d9                	fstp   st(1)
c0009a86:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c0009a8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a8e:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c0009a92:	0f 89 d1 fe ff ff    	jns    c0009969 <calc_output_multi+0x79>
c0009a98:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a9c:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009aa0:	89 d1                	mov    ecx,edx
c0009aa2:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009aa6:	29 c8                	sub    eax,ecx
c0009aa8:	99                   	cdq    
c0009aa9:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009aad:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009ab1:	0f af d0             	imul   edx,eax
c0009ab4:	40                   	inc    eax
c0009ab5:	01 d1                	add    ecx,edx
c0009ab7:	0f af c3             	imul   eax,ebx
c0009aba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009abe:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009ac1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ac5:	50                   	push   eax
c0009ac6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009aca:	6a 00                	push   0x0
c0009acc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ad0:	e8 03 6c ff ff       	call   c00006d8 <memset>
c0009ad5:	83 c4 10             	add    esp,0x10
c0009ad8:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009adc:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009ae0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009ae4:	e8 d2 f7 ff ff       	call   c00092bb <fp_to_double>
c0009ae9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009aed:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009af1:	e8 bb f7 ff ff       	call   c00092b1 <fp_to_int>
c0009af6:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0009af9:	89 d9                	mov    ecx,ebx
c0009afb:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009afe:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009b02:	d8 e1                	fsub   st,st(1)
c0009b04:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b08:	de c9                	fmulp  st(1),st
c0009b0a:	de c1                	faddp  st(1),st
c0009b0c:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009b10:	89 c8                	mov    eax,ecx
c0009b12:	bd 08 00 00 00       	mov    ebp,0x8
c0009b17:	99                   	cdq    
c0009b18:	f7 fd                	idiv   ebp
c0009b1a:	4a                   	dec    edx
c0009b1b:	83 fa 06             	cmp    edx,0x6
c0009b1e:	77 07                	ja     c0009b27 <calc_output_multi+0x237>
c0009b20:	ff 24 95 7c 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfe84]
c0009b27:	49                   	dec    ecx
c0009b28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b2c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b30:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009b33:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009b3a:	d9 c1                	fld    st(1)
c0009b3c:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009b40:	dc 00                	fadd   QWORD PTR [eax]
c0009b42:	dd 18                	fstp   QWORD PTR [eax]
c0009b44:	49                   	dec    ecx
c0009b45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b4d:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009b50:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009b57:	d9 c1                	fld    st(1)
c0009b59:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009b5d:	dc 00                	fadd   QWORD PTR [eax]
c0009b5f:	dd 18                	fstp   QWORD PTR [eax]
c0009b61:	49                   	dec    ecx
c0009b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b6a:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009b6d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009b74:	d9 c1                	fld    st(1)
c0009b76:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009b7a:	dc 00                	fadd   QWORD PTR [eax]
c0009b7c:	dd 18                	fstp   QWORD PTR [eax]
c0009b7e:	49                   	dec    ecx
c0009b7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009b83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b87:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009b8a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009b91:	d9 c1                	fld    st(1)
c0009b93:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009b97:	dc 00                	fadd   QWORD PTR [eax]
c0009b99:	dd 18                	fstp   QWORD PTR [eax]
c0009b9b:	49                   	dec    ecx
c0009b9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ba0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009ba4:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009ba7:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009bae:	d9 c1                	fld    st(1)
c0009bb0:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009bb4:	dc 00                	fadd   QWORD PTR [eax]
c0009bb6:	dd 18                	fstp   QWORD PTR [eax]
c0009bb8:	49                   	dec    ecx
c0009bb9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009bbd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009bc1:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009bc4:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009bcb:	d9 c1                	fld    st(1)
c0009bcd:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009bd1:	dc 00                	fadd   QWORD PTR [eax]
c0009bd3:	dd 18                	fstp   QWORD PTR [eax]
c0009bd5:	49                   	dec    ecx
c0009bd6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009bda:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009bde:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009be1:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009be8:	d9 c1                	fld    st(1)
c0009bea:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009bee:	dc 00                	fadd   QWORD PTR [eax]
c0009bf0:	dd 18                	fstp   QWORD PTR [eax]
c0009bf2:	49                   	dec    ecx
c0009bf3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009bf7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009bfb:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009bfe:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009c05:	d9 c1                	fld    st(1)
c0009c07:	85 c9                	test   ecx,ecx
c0009c09:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009c0d:	dc 00                	fadd   QWORD PTR [eax]
c0009c0f:	dd 18                	fstp   QWORD PTR [eax]
c0009c11:	0f 8f f9 fe ff ff    	jg     c0009b10 <calc_output_multi+0x220>
c0009c17:	dd d9                	fstp   st(1)
c0009c19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009c1d:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009c21:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c0009c25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0009c2a:	0f 8f ac fe ff ff    	jg     c0009adc <calc_output_multi+0x1ec>
c0009c30:	b9 08 00 00 00       	mov    ecx,0x8
c0009c35:	89 d8                	mov    eax,ebx
c0009c37:	99                   	cdq    
c0009c38:	f7 f9                	idiv   ecx
c0009c3a:	4a                   	dec    edx
c0009c3b:	83 fa 06             	cmp    edx,0x6
c0009c3e:	77 07                	ja     c0009c47 <calc_output_multi+0x357>
c0009c40:	ff 24 95 98 01 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdfe68]
c0009c47:	4b                   	dec    ebx
c0009c48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c4c:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c4f:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009c52:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009c56:	d8 c9                	fmul   st,st(1)
c0009c58:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009c5b:	4b                   	dec    ebx
c0009c5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c60:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c63:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009c66:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009c6a:	d8 c9                	fmul   st,st(1)
c0009c6c:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009c6f:	4b                   	dec    ebx
c0009c70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c74:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c77:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009c7a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009c7e:	d8 c9                	fmul   st,st(1)
c0009c80:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009c83:	4b                   	dec    ebx
c0009c84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c88:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c8b:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009c8e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009c92:	d8 c9                	fmul   st,st(1)
c0009c94:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009c97:	4b                   	dec    ebx
c0009c98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c9c:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009c9f:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ca2:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ca6:	d8 c9                	fmul   st,st(1)
c0009ca8:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009cab:	4b                   	dec    ebx
c0009cac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009cb0:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009cb3:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009cb6:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009cba:	d8 c9                	fmul   st,st(1)
c0009cbc:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009cbf:	4b                   	dec    ebx
c0009cc0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009cc4:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009cc7:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009cca:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009cce:	d8 c9                	fmul   st,st(1)
c0009cd0:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009cd3:	4b                   	dec    ebx
c0009cd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009cd8:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009cdb:	85 db                	test   ebx,ebx
c0009cdd:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009ce0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ce4:	d8 c9                	fmul   st,st(1)
c0009ce6:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ce9:	0f 8f 46 ff ff ff    	jg     c0009c35 <calc_output_multi+0x345>
c0009cef:	dd d8                	fstp   st(0)
c0009cf1:	83 c4 4c             	add    esp,0x4c
c0009cf4:	5b                   	pop    ebx
c0009cf5:	5e                   	pop    esi
c0009cf6:	5f                   	pop    edi
c0009cf7:	5d                   	pop    ebp
c0009cf8:	c3                   	ret    

c0009cf9 <sinc_reset>:
c0009cf9:	56                   	push   esi
c0009cfa:	53                   	push   ebx
c0009cfb:	51                   	push   ecx
c0009cfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d00:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009d03:	85 db                	test   ebx,ebx
c0009d05:	74 51                	je     c0009d58 <sinc_reset+0x5f>
c0009d07:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0009d0e:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0009d15:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c0009d1c:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c0009d22:	d9 ee                	fldz   
c0009d24:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009d27:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c0009d2a:	52                   	push   edx
c0009d2b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009d2e:	c1 e0 02             	shl    eax,0x2
c0009d31:	50                   	push   eax
c0009d32:	6a 00                	push   0x0
c0009d34:	56                   	push   esi
c0009d35:	e8 9e 69 ff ff       	call   c00006d8 <memset>
c0009d3a:	83 c4 0c             	add    esp,0xc
c0009d3d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009d40:	c1 e0 02             	shl    eax,0x2
c0009d43:	50                   	push   eax
c0009d44:	68 aa 00 00 00       	push   0xaa
c0009d49:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009d4c:	8d 04 86             	lea    eax,[esi+eax*4]
c0009d4f:	50                   	push   eax
c0009d50:	e8 83 69 ff ff       	call   c00006d8 <memset>
c0009d55:	83 c4 10             	add    esp,0x10
c0009d58:	58                   	pop    eax
c0009d59:	5b                   	pop    ebx
c0009d5a:	5e                   	pop    esi
c0009d5b:	c3                   	ret    

c0009d5c <double_to_fp>:
c0009d5c:	d9 05 24 88 03 c0    	fld    DWORD PTR ds:0xc0038824
c0009d62:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009d66:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009d6a:	e9 f1 4b 01 00       	jmp    c001e960 <lrint>

c0009d6f <fmod_one>:
c0009d6f:	83 ec 2c             	sub    esp,0x2c
c0009d72:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009d76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009d7a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d7e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009d82:	83 ec 08             	sub    esp,0x8
c0009d85:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009d8d:	e8 ce 4b 01 00       	call   c001e960 <lrint>
c0009d92:	83 c4 10             	add    esp,0x10
c0009d95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009d99:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009d9d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009da1:	de e1                	fsubrp st(1),st
c0009da3:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009da7:	d9 ee                	fldz   
c0009da9:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009dad:	df e0                	fnstsw ax
c0009daf:	f6 c4 45             	test   ah,0x45
c0009db2:	75 0a                	jne    c0009dbe <fmod_one+0x4f>
c0009db4:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009db8:	d9 e8                	fld1   
c0009dba:	de c1                	faddp  st(1),st
c0009dbc:	eb 04                	jmp    c0009dc2 <fmod_one+0x53>
c0009dbe:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009dc2:	83 c4 2c             	add    esp,0x2c
c0009dc5:	c3                   	ret    

c0009dc6 <prepare_data>:
c0009dc6:	55                   	push   ebp
c0009dc7:	57                   	push   edi
c0009dc8:	56                   	push   esi
c0009dc9:	53                   	push   ebx
c0009dca:	83 ec 1c             	sub    esp,0x1c
c0009dcd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009dd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009dd5:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009dd9:	0f 89 57 01 00 00    	jns    c0009f36 <prepare_data+0x170>
c0009ddf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009de2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009de5:	85 d2                	test   edx,edx
c0009de7:	75 0d                	jne    c0009df6 <prepare_data+0x30>
c0009de9:	8d 14 36             	lea    edx,[esi+esi*1]
c0009dec:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009def:	29 d0                	sub    eax,edx
c0009df1:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009df4:	eb 44                	jmp    c0009e3a <prepare_data+0x74>
c0009df6:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009df9:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009dfc:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009dff:	39 c1                	cmp    ecx,eax
c0009e01:	7d 04                	jge    c0009e07 <prepare_data+0x41>
c0009e03:	29 d0                	sub    eax,edx
c0009e05:	eb 2d                	jmp    c0009e34 <prepare_data+0x6e>
c0009e07:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009e0d:	29 d7                	sub    edi,edx
c0009e0f:	01 f7                	add    edi,esi
c0009e11:	51                   	push   ecx
c0009e12:	29 f2                	sub    edx,esi
c0009e14:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009e1b:	8d 14 90             	lea    edx,[eax+edx*4]
c0009e1e:	51                   	push   ecx
c0009e1f:	52                   	push   edx
c0009e20:	50                   	push   eax
c0009e21:	e8 ce 67 ff ff       	call   c00005f4 <memmove>
c0009e26:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009e29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009e2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009e2f:	29 f0                	sub    eax,esi
c0009e31:	83 c4 10             	add    esp,0x10
c0009e34:	29 f0                	sub    eax,esi
c0009e36:	79 02                	jns    c0009e3a <prepare_data+0x74>
c0009e38:	31 c0                	xor    eax,eax
c0009e3a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009e3d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009e40:	29 ef                	sub    edi,ebp
c0009e42:	39 c7                	cmp    edi,eax
c0009e44:	7e 02                	jle    c0009e48 <prepare_data+0x82>
c0009e46:	89 c7                	mov    edi,eax
c0009e48:	89 f8                	mov    eax,edi
c0009e4a:	99                   	cdq    
c0009e4b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e4e:	b8 15 00 00 00       	mov    eax,0x15
c0009e53:	29 d7                	sub    edi,edx
c0009e55:	0f 88 dd 00 00 00    	js     c0009f38 <prepare_data+0x172>
c0009e5b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009e5e:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009e61:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009e64:	0f 8f ce 00 00 00    	jg     c0009f38 <prepare_data+0x172>
c0009e6a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009e70:	50                   	push   eax
c0009e71:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009e78:	50                   	push   eax
c0009e79:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009e7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0009e7f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009e82:	50                   	push   eax
c0009e83:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009e86:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009e8a:	50                   	push   eax
c0009e8b:	e8 d1 67 ff ff       	call   c0000661 <memcpy>
c0009e90:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009e93:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009e96:	01 fd                	add    ebp,edi
c0009e98:	01 f9                	add    ecx,edi
c0009e9a:	83 c4 10             	add    esp,0x10
c0009e9d:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009ea0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009ea3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009ea6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009eaa:	0f 85 86 00 00 00    	jne    c0009f36 <prepare_data+0x170>
c0009eb0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009eb3:	89 e8                	mov    eax,ebp
c0009eb5:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009eb8:	29 c8                	sub    eax,ecx
c0009eba:	39 f8                	cmp    eax,edi
c0009ebc:	7d 78                	jge    c0009f36 <prepare_data+0x170>
c0009ebe:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009ec2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009ec6:	74 6e                	je     c0009f36 <prepare_data+0x170>
c0009ec8:	8d 7e 04             	lea    edi,[esi+0x4]
c0009ecb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009ecf:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009ed2:	29 ef                	sub    edi,ebp
c0009ed4:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009ed8:	7c 29                	jl     c0009f03 <prepare_data+0x13d>
c0009eda:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009edd:	29 f1                	sub    ecx,esi
c0009edf:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009ee6:	55                   	push   ebp
c0009ee7:	50                   	push   eax
c0009ee8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009eeb:	50                   	push   eax
c0009eec:	52                   	push   edx
c0009eed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ef1:	e8 fe 66 ff ff       	call   c00005f4 <memmove>
c0009ef6:	83 c4 10             	add    esp,0x10
c0009ef9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009efc:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009eff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f03:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009f06:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009f09:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009f0c:	83 c6 05             	add    esi,0x5
c0009f0f:	78 07                	js     c0009f18 <prepare_data+0x152>
c0009f11:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009f14:	39 cf                	cmp    edi,ecx
c0009f16:	7e 04                	jle    c0009f1c <prepare_data+0x156>
c0009f18:	89 ce                	mov    esi,ecx
c0009f1a:	29 c6                	sub    esi,eax
c0009f1c:	8d 04 82             	lea    eax,[edx+eax*4]
c0009f1f:	51                   	push   ecx
c0009f20:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009f27:	51                   	push   ecx
c0009f28:	6a 00                	push   0x0
c0009f2a:	50                   	push   eax
c0009f2b:	e8 a8 67 ff ff       	call   c00006d8 <memset>
c0009f30:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009f33:	83 c4 10             	add    esp,0x10
c0009f36:	31 c0                	xor    eax,eax
c0009f38:	83 c4 1c             	add    esp,0x1c
c0009f3b:	5b                   	pop    ebx
c0009f3c:	5e                   	pop    esi
c0009f3d:	5f                   	pop    edi
c0009f3e:	5d                   	pop    ebp
c0009f3f:	c3                   	ret    

c0009f40 <sinc_multichan_vari_process>:
c0009f40:	55                   	push   ebp
c0009f41:	b8 05 00 00 00       	mov    eax,0x5
c0009f46:	57                   	push   edi
c0009f47:	56                   	push   esi
c0009f48:	53                   	push   ebx
c0009f49:	83 ec 3c             	sub    esp,0x3c
c0009f4c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009f50:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009f54:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009f57:	85 db                	test   ebx,ebx
c0009f59:	0f 84 5d 02 00 00    	je     c000a1bc <sinc_multichan_vari_process+0x27c>
c0009f5f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009f62:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009f65:	0f af d0             	imul   edx,eax
c0009f68:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009f6b:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009f6f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009f76:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009f79:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009f80:	dd 06                	fld    QWORD PTR [esi]
c0009f82:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009f86:	55                   	push   ebp
c0009f87:	55                   	push   ebp
c0009f88:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f8b:	e8 d9 f2 ff ff       	call   c0009269 <is_bad_src_ratio>
c0009f90:	89 c2                	mov    edx,eax
c0009f92:	58                   	pop    eax
c0009f93:	85 d2                	test   edx,edx
c0009f95:	59                   	pop    ecx
c0009f96:	b8 16 00 00 00       	mov    eax,0x16
c0009f9b:	0f 85 1b 02 00 00    	jne    c000a1bc <sinc_multichan_vari_process+0x27c>
c0009fa1:	d9 05 28 88 03 c0    	fld    DWORD PTR ds:0xc0038828
c0009fa7:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009faa:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009fad:	dd 06                	fld    QWORD PTR [esi]
c0009faf:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009fb2:	d8 d1                	fcom   st(1)
c0009fb4:	df e0                	fnstsw ax
c0009fb6:	9e                   	sahf   
c0009fb7:	76 0f                	jbe    c0009fc8 <sinc_multichan_vari_process+0x88>
c0009fb9:	dd d8                	fstp   st(0)
c0009fbb:	d9 e8                	fld1   
c0009fbd:	d8 d9                	fcomp  st(1)
c0009fbf:	df e0                	fnstsw ax
c0009fc1:	9e                   	sahf   
c0009fc2:	77 0f                	ja     c0009fd3 <sinc_multichan_vari_process+0x93>
c0009fc4:	dd d8                	fstp   st(0)
c0009fc6:	eb 11                	jmp    c0009fd9 <sinc_multichan_vari_process+0x99>
c0009fc8:	dd d9                	fstp   st(1)
c0009fca:	d9 e8                	fld1   
c0009fcc:	d8 d9                	fcomp  st(1)
c0009fce:	df e0                	fnstsw ax
c0009fd0:	9e                   	sahf   
c0009fd1:	76 04                	jbe    c0009fd7 <sinc_multichan_vari_process+0x97>
c0009fd3:	de f9                	fdivp  st(1),st
c0009fd5:	eb 02                	jmp    c0009fd9 <sinc_multichan_vari_process+0x99>
c0009fd7:	dd d8                	fstp   st(0)
c0009fd9:	83 ec 10             	sub    esp,0x10
c0009fdc:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009fdf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009fe2:	e8 79 49 01 00       	call   c001e960 <lrint>
c0009fe7:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009fea:	40                   	inc    eax
c0009feb:	dd 14 24             	fst    QWORD PTR [esp]
c0009fee:	0f af c5             	imul   eax,ebp
c0009ff1:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009ff5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009ff9:	e8 71 fd ff ff       	call   c0009d6f <fmod_one>
c0009ffe:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a001:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a005:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a008:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a00c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a010:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a014:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a017:	e8 44 49 01 00       	call   c001e960 <lrint>
c000a01c:	0f af e8             	imul   ebp,eax
c000a01f:	d9 e8                	fld1   
c000a021:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a025:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a029:	01 e8                	add    eax,ebp
c000a02b:	dc 05 58 01 02 c0    	fadd   QWORD PTR ds:0xc0020158
c000a031:	99                   	cdq    
c000a032:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a036:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a039:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a03c:	83 c4 10             	add    esp,0x10
c000a03f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a042:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a045:	7d 4b                	jge    c000a092 <sinc_multichan_vari_process+0x152>
c000a047:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a04a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a04d:	01 c8                	add    eax,ecx
c000a04f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a052:	99                   	cdq    
c000a053:	f7 f9                	idiv   ecx
c000a055:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a059:	7d 09                	jge    c000a064 <sinc_multichan_vari_process+0x124>
c000a05b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a05e:	85 c0                	test   eax,eax
c000a060:	79 57                	jns    c000a0b9 <sinc_multichan_vari_process+0x179>
c000a062:	eb 70                	jmp    c000a0d4 <sinc_multichan_vari_process+0x194>
c000a064:	51                   	push   ecx
c000a065:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a069:	57                   	push   edi
c000a06a:	53                   	push   ebx
c000a06b:	e8 56 fd ff ff       	call   c0009dc6 <prepare_data>
c000a070:	83 c4 10             	add    esp,0x10
c000a073:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a076:	85 c0                	test   eax,eax
c000a078:	0f 85 3e 01 00 00    	jne    c000a1bc <sinc_multichan_vari_process+0x27c>
c000a07e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a081:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a084:	01 c8                	add    eax,ecx
c000a086:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a089:	99                   	cdq    
c000a08a:	f7 f9                	idiv   ecx
c000a08c:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a090:	7c c9                	jl     c000a05b <sinc_multichan_vari_process+0x11b>
c000a092:	dd 04 24             	fld    QWORD PTR [esp]
c000a095:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a098:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a09c:	dd 1e                	fstp   QWORD PTR [esi]
c000a09e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a0a1:	99                   	cdq    
c000a0a2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0a5:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a0a8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a0ab:	99                   	cdq    
c000a0ac:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0af:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a0b2:	31 c0                	xor    eax,eax
c000a0b4:	e9 03 01 00 00       	jmp    c000a1bc <sinc_multichan_vari_process+0x27c>
c000a0b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0bd:	dd 04 24             	fld    QWORD PTR [esp]
c000a0c0:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a0c3:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a0c7:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a0cb:	d9 c9                	fxch   st(1)
c000a0cd:	de d9                	fcompp 
c000a0cf:	df e0                	fnstsw ax
c000a0d1:	9e                   	sahf   
c000a0d2:	73 be                	jae    c000a092 <sinc_multichan_vari_process+0x152>
c000a0d4:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a0d8:	7e 31                	jle    c000a10b <sinc_multichan_vari_process+0x1cb>
c000a0da:	83 ec 10             	sub    esp,0x10
c000a0dd:	dd 06                	fld    QWORD PTR [esi]
c000a0df:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a0e2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0e5:	e8 56 48 01 00       	call   c001e940 <fabs>
c000a0ea:	83 c4 10             	add    esp,0x10
c000a0ed:	dc 1d 18 88 03 c0    	fcomp  QWORD PTR ds:0xc0038818
c000a0f3:	df e0                	fnstsw ax
c000a0f5:	9e                   	sahf   
c000a0f6:	76 13                	jbe    c000a10b <sinc_multichan_vari_process+0x1cb>
c000a0f8:	dd 06                	fld    QWORD PTR [esi]
c000a0fa:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a0fd:	d8 e1                	fsub   st,st(1)
c000a0ff:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a102:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a105:	de c1                	faddp  st(1),st
c000a107:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a10b:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a10e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a112:	d9 e8                	fld1   
c000a114:	d8 d9                	fcomp  st(1)
c000a116:	df e0                	fnstsw ax
c000a118:	9e                   	sahf   
c000a119:	77 04                	ja     c000a11f <sinc_multichan_vari_process+0x1df>
c000a11b:	dd d8                	fstp   st(0)
c000a11d:	d9 e8                	fld1   
c000a11f:	de c9                	fmulp  st(1),st
c000a121:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a125:	50                   	push   eax
c000a126:	50                   	push   eax
c000a127:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a12b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a12f:	e8 28 fc ff ff       	call   c0009d5c <double_to_fp>
c000a134:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a138:	89 c5                	mov    ebp,eax
c000a13a:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a13e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a141:	e8 16 fc ff ff       	call   c0009d5c <double_to_fp>
c000a146:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a149:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a14c:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a14f:	89 c1                	mov    ecx,eax
c000a151:	52                   	push   edx
c000a152:	89 d8                	mov    eax,ebx
c000a154:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c000a158:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a15b:	52                   	push   edx
c000a15c:	52                   	push   edx
c000a15d:	89 ea                	mov    edx,ebp
c000a15f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a162:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000a165:	e8 86 f7 ff ff       	call   c00098f0 <calc_output_multi>
c000a16a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000a16d:	d9 e8                	fld1   
c000a16f:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000a172:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c000a176:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a17a:	83 c4 10             	add    esp,0x10
c000a17d:	dd 14 24             	fst    QWORD PTR [esp]
c000a180:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a184:	e8 e6 fb ff ff       	call   c0009d6f <fmod_one>
c000a189:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a18c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a190:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a193:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a197:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a19b:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a19f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1a2:	e8 b9 47 01 00       	call   c001e960 <lrint>
c000a1a7:	0f af e8             	imul   ebp,eax
c000a1aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a1ae:	01 e8                	add    eax,ebp
c000a1b0:	99                   	cdq    
c000a1b1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a1b4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a1b7:	e9 80 fe ff ff       	jmp    c000a03c <sinc_multichan_vari_process+0xfc>
c000a1bc:	83 c4 3c             	add    esp,0x3c
c000a1bf:	5b                   	pop    ebx
c000a1c0:	5e                   	pop    esi
c000a1c1:	5f                   	pop    edi
c000a1c2:	5d                   	pop    ebp
c000a1c3:	c3                   	ret    

c000a1c4 <sinc_hex_vari_process>:
c000a1c4:	55                   	push   ebp
c000a1c5:	b8 05 00 00 00       	mov    eax,0x5
c000a1ca:	57                   	push   edi
c000a1cb:	56                   	push   esi
c000a1cc:	53                   	push   ebx
c000a1cd:	83 ec 3c             	sub    esp,0x3c
c000a1d0:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a1d4:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a1d8:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a1db:	85 db                	test   ebx,ebx
c000a1dd:	0f 84 58 02 00 00    	je     c000a43b <sinc_hex_vari_process+0x277>
c000a1e3:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a1e6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a1e9:	0f af d0             	imul   edx,eax
c000a1ec:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a1ef:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a1f3:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a1fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a1fd:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a204:	dd 06                	fld    QWORD PTR [esi]
c000a206:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a20a:	55                   	push   ebp
c000a20b:	55                   	push   ebp
c000a20c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a20f:	e8 55 f0 ff ff       	call   c0009269 <is_bad_src_ratio>
c000a214:	89 c2                	mov    edx,eax
c000a216:	58                   	pop    eax
c000a217:	85 d2                	test   edx,edx
c000a219:	59                   	pop    ecx
c000a21a:	b8 16 00 00 00       	mov    eax,0x16
c000a21f:	0f 85 16 02 00 00    	jne    c000a43b <sinc_hex_vari_process+0x277>
c000a225:	d9 05 28 88 03 c0    	fld    DWORD PTR ds:0xc0038828
c000a22b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a22e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a231:	dd 06                	fld    QWORD PTR [esi]
c000a233:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a236:	d8 d1                	fcom   st(1)
c000a238:	df e0                	fnstsw ax
c000a23a:	9e                   	sahf   
c000a23b:	76 0f                	jbe    c000a24c <sinc_hex_vari_process+0x88>
c000a23d:	dd d8                	fstp   st(0)
c000a23f:	d9 e8                	fld1   
c000a241:	d8 d9                	fcomp  st(1)
c000a243:	df e0                	fnstsw ax
c000a245:	9e                   	sahf   
c000a246:	77 0f                	ja     c000a257 <sinc_hex_vari_process+0x93>
c000a248:	dd d8                	fstp   st(0)
c000a24a:	eb 11                	jmp    c000a25d <sinc_hex_vari_process+0x99>
c000a24c:	dd d9                	fstp   st(1)
c000a24e:	d9 e8                	fld1   
c000a250:	d8 d9                	fcomp  st(1)
c000a252:	df e0                	fnstsw ax
c000a254:	9e                   	sahf   
c000a255:	76 04                	jbe    c000a25b <sinc_hex_vari_process+0x97>
c000a257:	de f9                	fdivp  st(1),st
c000a259:	eb 02                	jmp    c000a25d <sinc_hex_vari_process+0x99>
c000a25b:	dd d8                	fstp   st(0)
c000a25d:	83 ec 10             	sub    esp,0x10
c000a260:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a263:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a266:	e8 f5 46 01 00       	call   c001e960 <lrint>
c000a26b:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a26e:	40                   	inc    eax
c000a26f:	dd 14 24             	fst    QWORD PTR [esp]
c000a272:	0f af c5             	imul   eax,ebp
c000a275:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a279:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a27d:	e8 ed fa ff ff       	call   c0009d6f <fmod_one>
c000a282:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a285:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a289:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a28c:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a290:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a294:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a298:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a29b:	e8 c0 46 01 00       	call   c001e960 <lrint>
c000a2a0:	0f af e8             	imul   ebp,eax
c000a2a3:	d9 e8                	fld1   
c000a2a5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a2a9:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a2ad:	01 e8                	add    eax,ebp
c000a2af:	dc 05 58 01 02 c0    	fadd   QWORD PTR ds:0xc0020158
c000a2b5:	99                   	cdq    
c000a2b6:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a2ba:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a2bd:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a2c0:	83 c4 10             	add    esp,0x10
c000a2c3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a2c6:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a2c9:	7d 4b                	jge    c000a316 <sinc_hex_vari_process+0x152>
c000a2cb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2ce:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2d1:	01 c8                	add    eax,ecx
c000a2d3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2d6:	99                   	cdq    
c000a2d7:	f7 f9                	idiv   ecx
c000a2d9:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a2dd:	7d 09                	jge    c000a2e8 <sinc_hex_vari_process+0x124>
c000a2df:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a2e2:	85 c0                	test   eax,eax
c000a2e4:	79 57                	jns    c000a33d <sinc_hex_vari_process+0x179>
c000a2e6:	eb 70                	jmp    c000a358 <sinc_hex_vari_process+0x194>
c000a2e8:	51                   	push   ecx
c000a2e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a2ed:	57                   	push   edi
c000a2ee:	53                   	push   ebx
c000a2ef:	e8 d2 fa ff ff       	call   c0009dc6 <prepare_data>
c000a2f4:	83 c4 10             	add    esp,0x10
c000a2f7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a2fa:	85 c0                	test   eax,eax
c000a2fc:	0f 85 39 01 00 00    	jne    c000a43b <sinc_hex_vari_process+0x277>
c000a302:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a305:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a308:	01 c8                	add    eax,ecx
c000a30a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a30d:	99                   	cdq    
c000a30e:	f7 f9                	idiv   ecx
c000a310:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a314:	7c c9                	jl     c000a2df <sinc_hex_vari_process+0x11b>
c000a316:	dd 04 24             	fld    QWORD PTR [esp]
c000a319:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a31c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a320:	dd 1e                	fstp   QWORD PTR [esi]
c000a322:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a325:	99                   	cdq    
c000a326:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a329:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a32c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a32f:	99                   	cdq    
c000a330:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a333:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a336:	31 c0                	xor    eax,eax
c000a338:	e9 fe 00 00 00       	jmp    c000a43b <sinc_hex_vari_process+0x277>
c000a33d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a341:	dd 04 24             	fld    QWORD PTR [esp]
c000a344:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a347:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a34b:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a34f:	d9 c9                	fxch   st(1)
c000a351:	de d9                	fcompp 
c000a353:	df e0                	fnstsw ax
c000a355:	9e                   	sahf   
c000a356:	73 be                	jae    c000a316 <sinc_hex_vari_process+0x152>
c000a358:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a35c:	7e 31                	jle    c000a38f <sinc_hex_vari_process+0x1cb>
c000a35e:	83 ec 10             	sub    esp,0x10
c000a361:	dd 06                	fld    QWORD PTR [esi]
c000a363:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a366:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a369:	e8 d2 45 01 00       	call   c001e940 <fabs>
c000a36e:	83 c4 10             	add    esp,0x10
c000a371:	dc 1d 18 88 03 c0    	fcomp  QWORD PTR ds:0xc0038818
c000a377:	df e0                	fnstsw ax
c000a379:	9e                   	sahf   
c000a37a:	76 13                	jbe    c000a38f <sinc_hex_vari_process+0x1cb>
c000a37c:	dd 06                	fld    QWORD PTR [esi]
c000a37e:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a381:	d8 e1                	fsub   st,st(1)
c000a383:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a386:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a389:	de c1                	faddp  st(1),st
c000a38b:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a38f:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a392:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a396:	d9 e8                	fld1   
c000a398:	d8 d9                	fcomp  st(1)
c000a39a:	df e0                	fnstsw ax
c000a39c:	9e                   	sahf   
c000a39d:	77 04                	ja     c000a3a3 <sinc_hex_vari_process+0x1df>
c000a39f:	dd d8                	fstp   st(0)
c000a3a1:	d9 e8                	fld1   
c000a3a3:	de c9                	fmulp  st(1),st
c000a3a5:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a3a9:	50                   	push   eax
c000a3aa:	50                   	push   eax
c000a3ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3af:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3b3:	e8 a4 f9 ff ff       	call   c0009d5c <double_to_fp>
c000a3b8:	89 c5                	mov    ebp,eax
c000a3ba:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a3be:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a3c2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3c5:	e8 92 f9 ff ff       	call   c0009d5c <double_to_fp>
c000a3ca:	83 c4 0c             	add    esp,0xc
c000a3cd:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a3d0:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a3d3:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a3d6:	89 c1                	mov    ecx,eax
c000a3d8:	52                   	push   edx
c000a3d9:	89 d8                	mov    eax,ebx
c000a3db:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a3df:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a3e2:	52                   	push   edx
c000a3e3:	52                   	push   edx
c000a3e4:	89 ea                	mov    edx,ebp
c000a3e6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3e9:	e8 d1 f2 ff ff       	call   c00096bf <calc_output_hex>
c000a3ee:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a3f2:	d9 e8                	fld1   
c000a3f4:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a3f8:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a3fc:	dd 14 24             	fst    QWORD PTR [esp]
c000a3ff:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a403:	e8 67 f9 ff ff       	call   c0009d6f <fmod_one>
c000a408:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a40b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a40f:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a412:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a416:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a41a:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a41e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a421:	e8 3a 45 01 00       	call   c001e960 <lrint>
c000a426:	0f af e8             	imul   ebp,eax
c000a429:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a42d:	01 e8                	add    eax,ebp
c000a42f:	99                   	cdq    
c000a430:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a433:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a436:	e9 85 fe ff ff       	jmp    c000a2c0 <sinc_hex_vari_process+0xfc>
c000a43b:	83 c4 3c             	add    esp,0x3c
c000a43e:	5b                   	pop    ebx
c000a43f:	5e                   	pop    esi
c000a440:	5f                   	pop    edi
c000a441:	5d                   	pop    ebp
c000a442:	c3                   	ret    

c000a443 <sinc_quad_vari_process>:
c000a443:	55                   	push   ebp
c000a444:	b8 05 00 00 00       	mov    eax,0x5
c000a449:	57                   	push   edi
c000a44a:	56                   	push   esi
c000a44b:	53                   	push   ebx
c000a44c:	83 ec 3c             	sub    esp,0x3c
c000a44f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a453:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a457:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a45a:	85 db                	test   ebx,ebx
c000a45c:	0f 84 58 02 00 00    	je     c000a6ba <sinc_quad_vari_process+0x277>
c000a462:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a465:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a468:	0f af d0             	imul   edx,eax
c000a46b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a46e:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a472:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a479:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a47c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a483:	dd 06                	fld    QWORD PTR [esi]
c000a485:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a489:	55                   	push   ebp
c000a48a:	55                   	push   ebp
c000a48b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a48e:	e8 d6 ed ff ff       	call   c0009269 <is_bad_src_ratio>
c000a493:	89 c2                	mov    edx,eax
c000a495:	58                   	pop    eax
c000a496:	85 d2                	test   edx,edx
c000a498:	59                   	pop    ecx
c000a499:	b8 16 00 00 00       	mov    eax,0x16
c000a49e:	0f 85 16 02 00 00    	jne    c000a6ba <sinc_quad_vari_process+0x277>
c000a4a4:	d9 05 28 88 03 c0    	fld    DWORD PTR ds:0xc0038828
c000a4aa:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a4ad:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a4b0:	dd 06                	fld    QWORD PTR [esi]
c000a4b2:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a4b5:	d8 d1                	fcom   st(1)
c000a4b7:	df e0                	fnstsw ax
c000a4b9:	9e                   	sahf   
c000a4ba:	76 0f                	jbe    c000a4cb <sinc_quad_vari_process+0x88>
c000a4bc:	dd d8                	fstp   st(0)
c000a4be:	d9 e8                	fld1   
c000a4c0:	d8 d9                	fcomp  st(1)
c000a4c2:	df e0                	fnstsw ax
c000a4c4:	9e                   	sahf   
c000a4c5:	77 0f                	ja     c000a4d6 <sinc_quad_vari_process+0x93>
c000a4c7:	dd d8                	fstp   st(0)
c000a4c9:	eb 11                	jmp    c000a4dc <sinc_quad_vari_process+0x99>
c000a4cb:	dd d9                	fstp   st(1)
c000a4cd:	d9 e8                	fld1   
c000a4cf:	d8 d9                	fcomp  st(1)
c000a4d1:	df e0                	fnstsw ax
c000a4d3:	9e                   	sahf   
c000a4d4:	76 04                	jbe    c000a4da <sinc_quad_vari_process+0x97>
c000a4d6:	de f9                	fdivp  st(1),st
c000a4d8:	eb 02                	jmp    c000a4dc <sinc_quad_vari_process+0x99>
c000a4da:	dd d8                	fstp   st(0)
c000a4dc:	83 ec 10             	sub    esp,0x10
c000a4df:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4e2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a4e5:	e8 76 44 01 00       	call   c001e960 <lrint>
c000a4ea:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a4ed:	40                   	inc    eax
c000a4ee:	dd 14 24             	fst    QWORD PTR [esp]
c000a4f1:	0f af c5             	imul   eax,ebp
c000a4f4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a4f8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4fc:	e8 6e f8 ff ff       	call   c0009d6f <fmod_one>
c000a501:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a504:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a508:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a50b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a50f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a513:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a517:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a51a:	e8 41 44 01 00       	call   c001e960 <lrint>
c000a51f:	0f af e8             	imul   ebp,eax
c000a522:	d9 e8                	fld1   
c000a524:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a528:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a52c:	01 e8                	add    eax,ebp
c000a52e:	dc 05 58 01 02 c0    	fadd   QWORD PTR ds:0xc0020158
c000a534:	99                   	cdq    
c000a535:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a539:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a53c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a53f:	83 c4 10             	add    esp,0x10
c000a542:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a545:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a548:	7d 4b                	jge    c000a595 <sinc_quad_vari_process+0x152>
c000a54a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a54d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a550:	01 c8                	add    eax,ecx
c000a552:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a555:	99                   	cdq    
c000a556:	f7 f9                	idiv   ecx
c000a558:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a55c:	7d 09                	jge    c000a567 <sinc_quad_vari_process+0x124>
c000a55e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a561:	85 c0                	test   eax,eax
c000a563:	79 57                	jns    c000a5bc <sinc_quad_vari_process+0x179>
c000a565:	eb 70                	jmp    c000a5d7 <sinc_quad_vari_process+0x194>
c000a567:	51                   	push   ecx
c000a568:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a56c:	57                   	push   edi
c000a56d:	53                   	push   ebx
c000a56e:	e8 53 f8 ff ff       	call   c0009dc6 <prepare_data>
c000a573:	83 c4 10             	add    esp,0x10
c000a576:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a579:	85 c0                	test   eax,eax
c000a57b:	0f 85 39 01 00 00    	jne    c000a6ba <sinc_quad_vari_process+0x277>
c000a581:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a584:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a587:	01 c8                	add    eax,ecx
c000a589:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a58c:	99                   	cdq    
c000a58d:	f7 f9                	idiv   ecx
c000a58f:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a593:	7c c9                	jl     c000a55e <sinc_quad_vari_process+0x11b>
c000a595:	dd 04 24             	fld    QWORD PTR [esp]
c000a598:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a59b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a59f:	dd 1e                	fstp   QWORD PTR [esi]
c000a5a1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a5a4:	99                   	cdq    
c000a5a5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a5a8:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a5ab:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a5ae:	99                   	cdq    
c000a5af:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a5b2:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a5b5:	31 c0                	xor    eax,eax
c000a5b7:	e9 fe 00 00 00       	jmp    c000a6ba <sinc_quad_vari_process+0x277>
c000a5bc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5c0:	dd 04 24             	fld    QWORD PTR [esp]
c000a5c3:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a5c6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a5ca:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a5ce:	d9 c9                	fxch   st(1)
c000a5d0:	de d9                	fcompp 
c000a5d2:	df e0                	fnstsw ax
c000a5d4:	9e                   	sahf   
c000a5d5:	73 be                	jae    c000a595 <sinc_quad_vari_process+0x152>
c000a5d7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a5db:	7e 31                	jle    c000a60e <sinc_quad_vari_process+0x1cb>
c000a5dd:	83 ec 10             	sub    esp,0x10
c000a5e0:	dd 06                	fld    QWORD PTR [esi]
c000a5e2:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a5e5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5e8:	e8 53 43 01 00       	call   c001e940 <fabs>
c000a5ed:	83 c4 10             	add    esp,0x10
c000a5f0:	dc 1d 18 88 03 c0    	fcomp  QWORD PTR ds:0xc0038818
c000a5f6:	df e0                	fnstsw ax
c000a5f8:	9e                   	sahf   
c000a5f9:	76 13                	jbe    c000a60e <sinc_quad_vari_process+0x1cb>
c000a5fb:	dd 06                	fld    QWORD PTR [esi]
c000a5fd:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a600:	d8 e1                	fsub   st,st(1)
c000a602:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a605:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a608:	de c1                	faddp  st(1),st
c000a60a:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a60e:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a611:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a615:	d9 e8                	fld1   
c000a617:	d8 d9                	fcomp  st(1)
c000a619:	df e0                	fnstsw ax
c000a61b:	9e                   	sahf   
c000a61c:	77 04                	ja     c000a622 <sinc_quad_vari_process+0x1df>
c000a61e:	dd d8                	fstp   st(0)
c000a620:	d9 e8                	fld1   
c000a622:	de c9                	fmulp  st(1),st
c000a624:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a628:	50                   	push   eax
c000a629:	50                   	push   eax
c000a62a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a62e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a632:	e8 25 f7 ff ff       	call   c0009d5c <double_to_fp>
c000a637:	89 c5                	mov    ebp,eax
c000a639:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a63d:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a641:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a644:	e8 13 f7 ff ff       	call   c0009d5c <double_to_fp>
c000a649:	83 c4 0c             	add    esp,0xc
c000a64c:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a64f:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a652:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a655:	89 c1                	mov    ecx,eax
c000a657:	52                   	push   edx
c000a658:	89 d8                	mov    eax,ebx
c000a65a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a65e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a661:	52                   	push   edx
c000a662:	52                   	push   edx
c000a663:	89 ea                	mov    edx,ebp
c000a665:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a668:	e8 8d ee ff ff       	call   c00094fa <calc_output_quad>
c000a66d:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a671:	d9 e8                	fld1   
c000a673:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a677:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a67b:	dd 14 24             	fst    QWORD PTR [esp]
c000a67e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a682:	e8 e8 f6 ff ff       	call   c0009d6f <fmod_one>
c000a687:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a68a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a68e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a691:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a695:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a699:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a69d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6a0:	e8 bb 42 01 00       	call   c001e960 <lrint>
c000a6a5:	0f af e8             	imul   ebp,eax
c000a6a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a6ac:	01 e8                	add    eax,ebp
c000a6ae:	99                   	cdq    
c000a6af:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a6b2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a6b5:	e9 85 fe ff ff       	jmp    c000a53f <sinc_quad_vari_process+0xfc>
c000a6ba:	83 c4 3c             	add    esp,0x3c
c000a6bd:	5b                   	pop    ebx
c000a6be:	5e                   	pop    esi
c000a6bf:	5f                   	pop    edi
c000a6c0:	5d                   	pop    ebp
c000a6c1:	c3                   	ret    

c000a6c2 <sinc_stereo_vari_process>:
c000a6c2:	55                   	push   ebp
c000a6c3:	b8 05 00 00 00       	mov    eax,0x5
c000a6c8:	57                   	push   edi
c000a6c9:	56                   	push   esi
c000a6ca:	53                   	push   ebx
c000a6cb:	83 ec 3c             	sub    esp,0x3c
c000a6ce:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a6d2:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a6d6:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a6d9:	85 db                	test   ebx,ebx
c000a6db:	0f 84 58 02 00 00    	je     c000a939 <sinc_stereo_vari_process+0x277>
c000a6e1:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a6e4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6e7:	0f af d0             	imul   edx,eax
c000a6ea:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a6ed:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a6f1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a6f8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a6fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a702:	dd 06                	fld    QWORD PTR [esi]
c000a704:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a708:	55                   	push   ebp
c000a709:	55                   	push   ebp
c000a70a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a70d:	e8 57 eb ff ff       	call   c0009269 <is_bad_src_ratio>
c000a712:	89 c2                	mov    edx,eax
c000a714:	58                   	pop    eax
c000a715:	85 d2                	test   edx,edx
c000a717:	59                   	pop    ecx
c000a718:	b8 16 00 00 00       	mov    eax,0x16
c000a71d:	0f 85 16 02 00 00    	jne    c000a939 <sinc_stereo_vari_process+0x277>
c000a723:	d9 05 28 88 03 c0    	fld    DWORD PTR ds:0xc0038828
c000a729:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a72c:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a72f:	dd 06                	fld    QWORD PTR [esi]
c000a731:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a734:	d8 d1                	fcom   st(1)
c000a736:	df e0                	fnstsw ax
c000a738:	9e                   	sahf   
c000a739:	76 0f                	jbe    c000a74a <sinc_stereo_vari_process+0x88>
c000a73b:	dd d8                	fstp   st(0)
c000a73d:	d9 e8                	fld1   
c000a73f:	d8 d9                	fcomp  st(1)
c000a741:	df e0                	fnstsw ax
c000a743:	9e                   	sahf   
c000a744:	77 0f                	ja     c000a755 <sinc_stereo_vari_process+0x93>
c000a746:	dd d8                	fstp   st(0)
c000a748:	eb 11                	jmp    c000a75b <sinc_stereo_vari_process+0x99>
c000a74a:	dd d9                	fstp   st(1)
c000a74c:	d9 e8                	fld1   
c000a74e:	d8 d9                	fcomp  st(1)
c000a750:	df e0                	fnstsw ax
c000a752:	9e                   	sahf   
c000a753:	76 04                	jbe    c000a759 <sinc_stereo_vari_process+0x97>
c000a755:	de f9                	fdivp  st(1),st
c000a757:	eb 02                	jmp    c000a75b <sinc_stereo_vari_process+0x99>
c000a759:	dd d8                	fstp   st(0)
c000a75b:	83 ec 10             	sub    esp,0x10
c000a75e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a761:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a764:	e8 f7 41 01 00       	call   c001e960 <lrint>
c000a769:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a76c:	40                   	inc    eax
c000a76d:	dd 14 24             	fst    QWORD PTR [esp]
c000a770:	0f af c5             	imul   eax,ebp
c000a773:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a777:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a77b:	e8 ef f5 ff ff       	call   c0009d6f <fmod_one>
c000a780:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a783:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a787:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a78a:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a78e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a792:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a796:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a799:	e8 c2 41 01 00       	call   c001e960 <lrint>
c000a79e:	0f af e8             	imul   ebp,eax
c000a7a1:	d9 e8                	fld1   
c000a7a3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a7a7:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a7ab:	01 e8                	add    eax,ebp
c000a7ad:	dc 05 58 01 02 c0    	fadd   QWORD PTR ds:0xc0020158
c000a7b3:	99                   	cdq    
c000a7b4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a7b8:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a7bb:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a7be:	83 c4 10             	add    esp,0x10
c000a7c1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a7c4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a7c7:	7d 4b                	jge    c000a814 <sinc_stereo_vari_process+0x152>
c000a7c9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7cc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7cf:	01 c8                	add    eax,ecx
c000a7d1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7d4:	99                   	cdq    
c000a7d5:	f7 f9                	idiv   ecx
c000a7d7:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a7db:	7d 09                	jge    c000a7e6 <sinc_stereo_vari_process+0x124>
c000a7dd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a7e0:	85 c0                	test   eax,eax
c000a7e2:	79 57                	jns    c000a83b <sinc_stereo_vari_process+0x179>
c000a7e4:	eb 70                	jmp    c000a856 <sinc_stereo_vari_process+0x194>
c000a7e6:	51                   	push   ecx
c000a7e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a7eb:	57                   	push   edi
c000a7ec:	53                   	push   ebx
c000a7ed:	e8 d4 f5 ff ff       	call   c0009dc6 <prepare_data>
c000a7f2:	83 c4 10             	add    esp,0x10
c000a7f5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a7f8:	85 c0                	test   eax,eax
c000a7fa:	0f 85 39 01 00 00    	jne    c000a939 <sinc_stereo_vari_process+0x277>
c000a800:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a803:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a806:	01 c8                	add    eax,ecx
c000a808:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a80b:	99                   	cdq    
c000a80c:	f7 f9                	idiv   ecx
c000a80e:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a812:	7c c9                	jl     c000a7dd <sinc_stereo_vari_process+0x11b>
c000a814:	dd 04 24             	fld    QWORD PTR [esp]
c000a817:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a81a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a81e:	dd 1e                	fstp   QWORD PTR [esi]
c000a820:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a823:	99                   	cdq    
c000a824:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a827:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a82a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a82d:	99                   	cdq    
c000a82e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a831:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a834:	31 c0                	xor    eax,eax
c000a836:	e9 fe 00 00 00       	jmp    c000a939 <sinc_stereo_vari_process+0x277>
c000a83b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a83f:	dd 04 24             	fld    QWORD PTR [esp]
c000a842:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a845:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a849:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a84d:	d9 c9                	fxch   st(1)
c000a84f:	de d9                	fcompp 
c000a851:	df e0                	fnstsw ax
c000a853:	9e                   	sahf   
c000a854:	73 be                	jae    c000a814 <sinc_stereo_vari_process+0x152>
c000a856:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a85a:	7e 31                	jle    c000a88d <sinc_stereo_vari_process+0x1cb>
c000a85c:	83 ec 10             	sub    esp,0x10
c000a85f:	dd 06                	fld    QWORD PTR [esi]
c000a861:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a864:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a867:	e8 d4 40 01 00       	call   c001e940 <fabs>
c000a86c:	83 c4 10             	add    esp,0x10
c000a86f:	dc 1d 18 88 03 c0    	fcomp  QWORD PTR ds:0xc0038818
c000a875:	df e0                	fnstsw ax
c000a877:	9e                   	sahf   
c000a878:	76 13                	jbe    c000a88d <sinc_stereo_vari_process+0x1cb>
c000a87a:	dd 06                	fld    QWORD PTR [esi]
c000a87c:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a87f:	d8 e1                	fsub   st,st(1)
c000a881:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a884:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a887:	de c1                	faddp  st(1),st
c000a889:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a88d:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a890:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a894:	d9 e8                	fld1   
c000a896:	d8 d9                	fcomp  st(1)
c000a898:	df e0                	fnstsw ax
c000a89a:	9e                   	sahf   
c000a89b:	77 04                	ja     c000a8a1 <sinc_stereo_vari_process+0x1df>
c000a89d:	dd d8                	fstp   st(0)
c000a89f:	d9 e8                	fld1   
c000a8a1:	de c9                	fmulp  st(1),st
c000a8a3:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a8a7:	50                   	push   eax
c000a8a8:	50                   	push   eax
c000a8a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8ad:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a8b1:	e8 a6 f4 ff ff       	call   c0009d5c <double_to_fp>
c000a8b6:	89 c5                	mov    ebp,eax
c000a8b8:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a8bc:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a8c0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8c3:	e8 94 f4 ff ff       	call   c0009d5c <double_to_fp>
c000a8c8:	83 c4 0c             	add    esp,0xc
c000a8cb:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a8ce:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a8d1:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a8d4:	89 c1                	mov    ecx,eax
c000a8d6:	52                   	push   edx
c000a8d7:	89 d8                	mov    eax,ebx
c000a8d9:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a8dd:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a8e0:	52                   	push   edx
c000a8e1:	52                   	push   edx
c000a8e2:	89 ea                	mov    edx,ebp
c000a8e4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8e7:	e8 ce ea ff ff       	call   c00093ba <calc_output_stereo>
c000a8ec:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a8f0:	d9 e8                	fld1   
c000a8f2:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a8f6:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a8fa:	dd 14 24             	fst    QWORD PTR [esp]
c000a8fd:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a901:	e8 69 f4 ff ff       	call   c0009d6f <fmod_one>
c000a906:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a909:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a90d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a910:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a914:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a918:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a91c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a91f:	e8 3c 40 01 00       	call   c001e960 <lrint>
c000a924:	0f af e8             	imul   ebp,eax
c000a927:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a92b:	01 e8                	add    eax,ebp
c000a92d:	99                   	cdq    
c000a92e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a931:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a934:	e9 85 fe ff ff       	jmp    c000a7be <sinc_stereo_vari_process+0xfc>
c000a939:	83 c4 3c             	add    esp,0x3c
c000a93c:	5b                   	pop    ebx
c000a93d:	5e                   	pop    esi
c000a93e:	5f                   	pop    edi
c000a93f:	5d                   	pop    ebp
c000a940:	c3                   	ret    

c000a941 <sinc_mono_vari_process>:
c000a941:	55                   	push   ebp
c000a942:	b8 05 00 00 00       	mov    eax,0x5
c000a947:	57                   	push   edi
c000a948:	56                   	push   esi
c000a949:	53                   	push   ebx
c000a94a:	83 ec 3c             	sub    esp,0x3c
c000a94d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a951:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a955:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a958:	85 db                	test   ebx,ebx
c000a95a:	0f 84 57 02 00 00    	je     c000abb7 <sinc_mono_vari_process+0x276>
c000a960:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a963:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a966:	0f af d0             	imul   edx,eax
c000a969:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a96c:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a970:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a977:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a97a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a981:	dd 06                	fld    QWORD PTR [esi]
c000a983:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a987:	51                   	push   ecx
c000a988:	51                   	push   ecx
c000a989:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a98c:	e8 d8 e8 ff ff       	call   c0009269 <is_bad_src_ratio>
c000a991:	5d                   	pop    ebp
c000a992:	89 c2                	mov    edx,eax
c000a994:	58                   	pop    eax
c000a995:	85 d2                	test   edx,edx
c000a997:	b8 16 00 00 00       	mov    eax,0x16
c000a99c:	0f 85 15 02 00 00    	jne    c000abb7 <sinc_mono_vari_process+0x276>
c000a9a2:	d9 05 28 88 03 c0    	fld    DWORD PTR ds:0xc0038828
c000a9a8:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a9ab:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a9ae:	dd 06                	fld    QWORD PTR [esi]
c000a9b0:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a9b3:	d8 d1                	fcom   st(1)
c000a9b5:	df e0                	fnstsw ax
c000a9b7:	9e                   	sahf   
c000a9b8:	76 0f                	jbe    c000a9c9 <sinc_mono_vari_process+0x88>
c000a9ba:	dd d8                	fstp   st(0)
c000a9bc:	d9 e8                	fld1   
c000a9be:	d8 d9                	fcomp  st(1)
c000a9c0:	df e0                	fnstsw ax
c000a9c2:	9e                   	sahf   
c000a9c3:	77 0f                	ja     c000a9d4 <sinc_mono_vari_process+0x93>
c000a9c5:	dd d8                	fstp   st(0)
c000a9c7:	eb 11                	jmp    c000a9da <sinc_mono_vari_process+0x99>
c000a9c9:	dd d9                	fstp   st(1)
c000a9cb:	d9 e8                	fld1   
c000a9cd:	d8 d9                	fcomp  st(1)
c000a9cf:	df e0                	fnstsw ax
c000a9d1:	9e                   	sahf   
c000a9d2:	76 04                	jbe    c000a9d8 <sinc_mono_vari_process+0x97>
c000a9d4:	de f9                	fdivp  st(1),st
c000a9d6:	eb 02                	jmp    c000a9da <sinc_mono_vari_process+0x99>
c000a9d8:	dd d8                	fstp   st(0)
c000a9da:	83 ec 10             	sub    esp,0x10
c000a9dd:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a9e0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a9e3:	e8 78 3f 01 00       	call   c001e960 <lrint>
c000a9e8:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a9eb:	40                   	inc    eax
c000a9ec:	dd 14 24             	fst    QWORD PTR [esp]
c000a9ef:	0f af e8             	imul   ebp,eax
c000a9f2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a9f6:	e8 74 f3 ff ff       	call   c0009d6f <fmod_one>
c000a9fb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a9fe:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aa02:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000aa06:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000aa0a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aa0d:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000aa11:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aa15:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aa18:	e8 43 3f 01 00       	call   c001e960 <lrint>
c000aa1d:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000aa22:	d9 e8                	fld1   
c000aa24:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000aa28:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000aa2c:	99                   	cdq    
c000aa2d:	dc 05 58 01 02 c0    	fadd   QWORD PTR ds:0xc0020158
c000aa33:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000aa36:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000aa3a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000aa3d:	83 c4 10             	add    esp,0x10
c000aa40:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000aa43:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000aa46:	7d 44                	jge    c000aa8c <sinc_mono_vari_process+0x14b>
c000aa48:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000aa4b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000aa4e:	01 c8                	add    eax,ecx
c000aa50:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000aa53:	99                   	cdq    
c000aa54:	f7 f9                	idiv   ecx
c000aa56:	39 d5                	cmp    ebp,edx
c000aa58:	7d 09                	jge    c000aa63 <sinc_mono_vari_process+0x122>
c000aa5a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000aa5d:	85 c0                	test   eax,eax
c000aa5f:	79 52                	jns    c000aab3 <sinc_mono_vari_process+0x172>
c000aa61:	eb 6b                	jmp    c000aace <sinc_mono_vari_process+0x18d>
c000aa63:	52                   	push   edx
c000aa64:	55                   	push   ebp
c000aa65:	57                   	push   edi
c000aa66:	53                   	push   ebx
c000aa67:	e8 5a f3 ff ff       	call   c0009dc6 <prepare_data>
c000aa6c:	83 c4 10             	add    esp,0x10
c000aa6f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000aa72:	85 c0                	test   eax,eax
c000aa74:	0f 85 3d 01 00 00    	jne    c000abb7 <sinc_mono_vari_process+0x276>
c000aa7a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000aa7d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000aa80:	01 c8                	add    eax,ecx
c000aa82:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000aa85:	99                   	cdq    
c000aa86:	f7 f9                	idiv   ecx
c000aa88:	39 d5                	cmp    ebp,edx
c000aa8a:	7c ce                	jl     c000aa5a <sinc_mono_vari_process+0x119>
c000aa8c:	dd 04 24             	fld    QWORD PTR [esp]
c000aa8f:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000aa92:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa96:	dd 1e                	fstp   QWORD PTR [esi]
c000aa98:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000aa9b:	99                   	cdq    
c000aa9c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000aa9f:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000aaa2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000aaa5:	99                   	cdq    
c000aaa6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000aaa9:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000aaac:	31 c0                	xor    eax,eax
c000aaae:	e9 04 01 00 00       	jmp    c000abb7 <sinc_mono_vari_process+0x276>
c000aab3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aab7:	dd 04 24             	fld    QWORD PTR [esp]
c000aaba:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000aabd:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000aac1:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000aac5:	d9 c9                	fxch   st(1)
c000aac7:	de d9                	fcompp 
c000aac9:	df e0                	fnstsw ax
c000aacb:	9e                   	sahf   
c000aacc:	77 be                	ja     c000aa8c <sinc_mono_vari_process+0x14b>
c000aace:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000aad2:	7e 31                	jle    c000ab05 <sinc_mono_vari_process+0x1c4>
c000aad4:	83 ec 10             	sub    esp,0x10
c000aad7:	dd 06                	fld    QWORD PTR [esi]
c000aad9:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000aadc:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aadf:	e8 5c 3e 01 00       	call   c001e940 <fabs>
c000aae4:	83 c4 10             	add    esp,0x10
c000aae7:	dc 1d 18 88 03 c0    	fcomp  QWORD PTR ds:0xc0038818
c000aaed:	df e0                	fnstsw ax
c000aaef:	9e                   	sahf   
c000aaf0:	76 13                	jbe    c000ab05 <sinc_mono_vari_process+0x1c4>
c000aaf2:	dd 06                	fld    QWORD PTR [esi]
c000aaf4:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000aaf7:	d8 e1                	fsub   st,st(1)
c000aaf9:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000aafc:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000aaff:	de c1                	faddp  st(1),st
c000ab01:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000ab05:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000ab08:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000ab0c:	d9 e8                	fld1   
c000ab0e:	d8 d9                	fcomp  st(1)
c000ab10:	df e0                	fnstsw ax
c000ab12:	9e                   	sahf   
c000ab13:	77 04                	ja     c000ab19 <sinc_mono_vari_process+0x1d8>
c000ab15:	dd d8                	fstp   st(0)
c000ab17:	d9 e8                	fld1   
c000ab19:	de c9                	fmulp  st(1),st
c000ab1b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000ab1f:	50                   	push   eax
c000ab20:	50                   	push   eax
c000ab21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab29:	e8 2e f2 ff ff       	call   c0009d5c <double_to_fp>
c000ab2e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ab32:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab36:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000ab3a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab3d:	e8 1a f2 ff ff       	call   c0009d5c <double_to_fp>
c000ab42:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ab46:	89 c1                	mov    ecx,eax
c000ab48:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000ab4c:	89 d8                	mov    eax,ebx
c000ab4e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000ab51:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000ab55:	e8 7b e7 ff ff       	call   c00092d5 <calc_output_single>
c000ab5a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab5d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000ab60:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000ab64:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000ab67:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000ab6a:	d9 e8                	fld1   
c000ab6c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000ab70:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000ab74:	dd 14 24             	fst    QWORD PTR [esp]
c000ab77:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000ab7b:	e8 ef f1 ff ff       	call   c0009d6f <fmod_one>
c000ab80:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ab83:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000ab87:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ab8b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000ab8f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ab92:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000ab96:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ab9a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab9d:	e8 be 3d 01 00       	call   c001e960 <lrint>
c000aba2:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000aba7:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000abab:	99                   	cdq    
c000abac:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000abaf:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000abb2:	e9 86 fe ff ff       	jmp    c000aa3d <sinc_mono_vari_process+0xfc>
c000abb7:	83 c4 3c             	add    esp,0x3c
c000abba:	5b                   	pop    ebx
c000abbb:	5e                   	pop    esi
c000abbc:	5f                   	pop    edi
c000abbd:	5d                   	pop    ebp
c000abbe:	c3                   	ret    

c000abbf <sinc_get_name>:
c000abbf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000abc3:	31 c0                	xor    eax,eax
c000abc5:	83 fa 02             	cmp    edx,0x2
c000abc8:	77 07                	ja     c000abd1 <sinc_get_name+0x12>
c000abca:	8b 04 95 c0 01 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfe40]
c000abd1:	c3                   	ret    

c000abd2 <sinc_get_description>:
c000abd2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000abd6:	31 c0                	xor    eax,eax
c000abd8:	83 fa 02             	cmp    edx,0x2
c000abdb:	77 07                	ja     c000abe4 <sinc_get_description+0x12>
c000abdd:	8b 04 95 b4 01 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdfe4c]
c000abe4:	c3                   	ret    

c000abe5 <sinc_set_converter>:
c000abe5:	55                   	push   ebp
c000abe6:	57                   	push   edi
c000abe7:	56                   	push   esi
c000abe8:	53                   	push   ebx
c000abe9:	81 ec 5c 08 00 00    	sub    esp,0x85c
c000abef:	8b 9c 24 70 08 00 00 	mov    ebx,DWORD PTR [esp+0x870]
c000abf6:	8b ac 24 74 08 00 00 	mov    ebp,DWORD PTR [esp+0x874]
c000abfd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000ac00:	85 c0                	test   eax,eax
c000ac02:	74 13                	je     c000ac17 <sinc_set_converter+0x32>
c000ac04:	83 ec 0c             	sub    esp,0xc
c000ac07:	50                   	push   eax
c000ac08:	e8 00 29 00 00       	call   c000d50d <free>
c000ac0d:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	56                   	push   esi
c000ac18:	68 44 08 00 00       	push   0x844
c000ac1d:	6a 00                	push   0x0
c000ac1f:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ac23:	56                   	push   esi
c000ac24:	e8 af 5a ff ff       	call   c00006d8 <memset>
c000ac29:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ac2c:	c7 44 24 1c 50 50 6a 02 	mov    DWORD PTR [esp+0x1c],0x26a5050
c000ac34:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ac38:	b8 0b 00 00 00       	mov    eax,0xb
c000ac3d:	83 c4 10             	add    esp,0x10
c000ac40:	81 fa 80 00 00 00    	cmp    edx,0x80
c000ac46:	0f 8f 58 01 00 00    	jg     c000ada4 <sinc_set_converter+0x1bf>
c000ac4c:	83 fa 01             	cmp    edx,0x1
c000ac4f:	75 10                	jne    c000ac61 <sinc_set_converter+0x7c>
c000ac51:	c7 43 24 41 a9 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a941
c000ac58:	c7 43 20 41 a9 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a941
c000ac5f:	eb 4d                	jmp    c000acae <sinc_set_converter+0xc9>
c000ac61:	83 fa 02             	cmp    edx,0x2
c000ac64:	75 10                	jne    c000ac76 <sinc_set_converter+0x91>
c000ac66:	c7 43 24 c2 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a6c2
c000ac6d:	c7 43 20 c2 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a6c2
c000ac74:	eb 38                	jmp    c000acae <sinc_set_converter+0xc9>
c000ac76:	83 fa 04             	cmp    edx,0x4
c000ac79:	75 10                	jne    c000ac8b <sinc_set_converter+0xa6>
c000ac7b:	c7 43 24 43 a4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a443
c000ac82:	c7 43 20 43 a4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a443
c000ac89:	eb 23                	jmp    c000acae <sinc_set_converter+0xc9>
c000ac8b:	83 fa 06             	cmp    edx,0x6
c000ac8e:	75 10                	jne    c000aca0 <sinc_set_converter+0xbb>
c000ac90:	c7 43 24 c4 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a1c4
c000ac97:	c7 43 20 c4 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a1c4
c000ac9e:	eb 0e                	jmp    c000acae <sinc_set_converter+0xc9>
c000aca0:	c7 43 24 40 9f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009f40
c000aca7:	c7 43 20 40 9f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009f40
c000acae:	c7 43 28 f9 9c 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009cf9
c000acb5:	83 fd 01             	cmp    ebp,0x1
c000acb8:	74 28                	je     c000ace2 <sinc_set_converter+0xfd>
c000acba:	b8 0a 00 00 00       	mov    eax,0xa
c000acbf:	83 fd 02             	cmp    ebp,0x2
c000acc2:	0f 85 dc 00 00 00    	jne    c000ada4 <sinc_set_converter+0x1bf>
c000acc8:	c7 44 24 3c 84 60 03 c0 	mov    DWORD PTR [esp+0x3c],0xc0036084
c000acd0:	c7 44 24 24 9e 09 00 00 	mov    DWORD PTR [esp+0x24],0x99e
c000acd8:	c7 44 24 28 80 00 00 00 	mov    DWORD PTR [esp+0x28],0x80
c000ace0:	eb 18                	jmp    c000acfa <sinc_set_converter+0x115>
c000ace2:	c7 44 24 3c e4 01 02 c0 	mov    DWORD PTR [esp+0x3c],0xc00201e4
c000acea:	c7 44 24 24 a4 57 00 00 	mov    DWORD PTR [esp+0x24],0x57a4
c000acf2:	c7 44 24 28 eb 01 00 00 	mov    DWORD PTR [esp+0x28],0x1eb
c000acfa:	83 ec 10             	sub    esp,0x10
c000acfd:	d9 05 2c 88 03 c0    	fld    DWORD PTR ds:0xc003882c
c000ad03:	da 4c 24 34          	fimul  DWORD PTR [esp+0x34]
c000ad07:	da 74 24 38          	fidiv  DWORD PTR [esp+0x38]
c000ad0b:	d8 0d 30 88 03 c0    	fmul   DWORD PTR ds:0xc0038830
c000ad11:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ad14:	e8 47 3c 01 00       	call   c001e960 <lrint>
c000ad19:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ad1d:	83 c4 10             	add    esp,0x10
c000ad20:	3d 00 10 00 00       	cmp    eax,0x1000
c000ad25:	7d 05                	jge    c000ad2c <sinc_set_converter+0x147>
c000ad27:	b8 00 10 00 00       	mov    eax,0x1000
c000ad2c:	0f af c2             	imul   eax,edx
c000ad2f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ad33:	51                   	push   ecx
c000ad34:	8d 84 02 11 02 00 00 	lea    eax,[edx+eax*1+0x211]
c000ad3b:	51                   	push   ecx
c000ad3c:	c1 e0 02             	shl    eax,0x2
c000ad3f:	50                   	push   eax
c000ad40:	6a 01                	push   0x1
c000ad42:	e8 e6 27 00 00       	call   c000d52d <calloc>
c000ad47:	83 c4 10             	add    esp,0x10
c000ad4a:	89 c5                	mov    ebp,eax
c000ad4c:	b8 01 00 00 00       	mov    eax,0x1
c000ad51:	85 ed                	test   ebp,ebp
c000ad53:	74 4f                	je     c000ada4 <sinc_set_converter+0x1bf>
c000ad55:	b9 11 02 00 00       	mov    ecx,0x211
c000ad5a:	fc                   	cld    
c000ad5b:	89 ef                	mov    edi,ebp
c000ad5d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ad5f:	50                   	push   eax
c000ad60:	68 44 08 00 00       	push   0x844
c000ad65:	68 ee 00 00 00       	push   0xee
c000ad6a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ad6e:	50                   	push   eax
c000ad6f:	e8 64 59 ff ff       	call   c00006d8 <memset>
c000ad74:	89 6b 1c             	mov    DWORD PTR [ebx+0x1c],ebp
c000ad77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ad7a:	e8 7a ef ff ff       	call   c0009cf9 <sinc_reset>
c000ad7f:	bb 01 00 00 00       	mov    ebx,0x1
c000ad84:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	31 c9                	xor    ecx,ecx
c000ad8c:	89 da                	mov    edx,ebx
c000ad8e:	d3 e2                	shl    edx,cl
c000ad90:	39 c2                	cmp    edx,eax
c000ad92:	7d 05                	jge    c000ad99 <sinc_set_converter+0x1b4>
c000ad94:	09 d0                	or     eax,edx
c000ad96:	41                   	inc    ecx
c000ad97:	eb f3                	jmp    c000ad8c <sinc_set_converter+0x1a7>
c000ad99:	31 c0                	xor    eax,eax
c000ad9b:	83 f9 15             	cmp    ecx,0x15
c000ad9e:	0f 9d c0             	setge  al
c000ada1:	8d 04 c0             	lea    eax,[eax+eax*8]
c000ada4:	81 c4 5c 08 00 00    	add    esp,0x85c
c000adaa:	5b                   	pop    ebx
c000adab:	5e                   	pop    esi
c000adac:	5f                   	pop    edi
c000adad:	5d                   	pop    ebp
c000adae:	c3                   	ret    

c000adaf <is_bad_src_ratio>:
c000adaf:	83 ec 0c             	sub    esp,0xc
c000adb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000adbd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc1:	dd 04 24             	fld    QWORD PTR [esp]
c000adc4:	dd 05 e0 00 02 c0    	fld    QWORD PTR ds:0xc00200e0
c000adca:	de d9                	fcompp 
c000adcc:	df e0                	fnstsw ax
c000adce:	f6 c4 45             	test   ah,0x45
c000add1:	74 10                	je     c000ade3 <is_bad_src_ratio+0x34>
c000add3:	dd 04 24             	fld    QWORD PTR [esp]
c000add6:	dc 1d e8 00 02 c0    	fcomp  QWORD PTR ds:0xc00200e8
c000addc:	df e0                	fnstsw ax
c000adde:	f6 c4 45             	test   ah,0x45
c000ade1:	75 07                	jne    c000adea <is_bad_src_ratio+0x3b>
c000ade3:	b8 01 00 00 00       	mov    eax,0x1
c000ade8:	eb 05                	jmp    c000adef <is_bad_src_ratio+0x40>
c000adea:	b8 00 00 00 00       	mov    eax,0x0
c000adef:	83 c4 0c             	add    esp,0xc
c000adf2:	c3                   	ret    

c000adf3 <fmod_one>:
c000adf3:	83 ec 2c             	sub    esp,0x2c
c000adf6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000adfa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000adfe:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ae02:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ae06:	83 ec 08             	sub    esp,0x8
c000ae09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae11:	e8 4a 3b 01 00       	call   c001e960 <lrint>
c000ae16:	83 c4 10             	add    esp,0x10
c000ae19:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ae1d:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000ae21:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000ae25:	de e1                	fsubrp st(1),st
c000ae27:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ae2b:	d9 ee                	fldz   
c000ae2d:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000ae31:	df e0                	fnstsw ax
c000ae33:	f6 c4 45             	test   ah,0x45
c000ae36:	75 0a                	jne    c000ae42 <fmod_one+0x4f>
c000ae38:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ae3c:	d9 e8                	fld1   
c000ae3e:	de c1                	faddp  st(1),st
c000ae40:	eb 04                	jmp    c000ae46 <fmod_one+0x53>
c000ae42:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ae46:	83 c4 2c             	add    esp,0x2c
c000ae49:	c3                   	ret    

c000ae4a <zoh_vari_process>:
c000ae4a:	55                   	push   ebp
c000ae4b:	57                   	push   edi
c000ae4c:	56                   	push   esi
c000ae4d:	53                   	push   ebx
c000ae4e:	83 ec 2c             	sub    esp,0x2c
c000ae51:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000ae55:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ae59:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ae61:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000ae65:	0f 8e 34 02 00 00    	jle    c000b09f <zoh_vari_process+0x255>
c000ae6b:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000ae6e:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000ae76:	85 db                	test   ebx,ebx
c000ae78:	0f 84 21 02 00 00    	je     c000b09f <zoh_vari_process+0x255>
c000ae7e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ae81:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000ae85:	74 19                	je     c000aea0 <zoh_vari_process+0x56>
c000ae87:	31 d2                	xor    edx,edx
c000ae89:	39 c2                	cmp    edx,eax
c000ae8b:	7d 0c                	jge    c000ae99 <zoh_vari_process+0x4f>
c000ae8d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ae8f:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000ae92:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ae96:	42                   	inc    edx
c000ae97:	eb f0                	jmp    c000ae89 <zoh_vari_process+0x3f>
c000ae99:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000aea0:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000aea3:	0f af d0             	imul   edx,eax
c000aea6:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000aea9:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000aead:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000aeb4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000aeb7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000aebe:	dd 07                	fld    QWORD PTR [edi]
c000aec0:	dd 14 24             	fst    QWORD PTR [esp]
c000aec3:	50                   	push   eax
c000aec4:	50                   	push   eax
c000aec5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aec8:	e8 e2 fe ff ff       	call   c000adaf <is_bad_src_ratio>
c000aecd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aed1:	5a                   	pop    edx
c000aed2:	59                   	pop    ecx
c000aed3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aed8:	0f 85 b9 01 00 00    	jne    c000b097 <zoh_vari_process+0x24d>
c000aede:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000aee1:	d9 e8                	fld1   
c000aee3:	d8 d1                	fcom   st(1)
c000aee5:	df e0                	fnstsw ax
c000aee7:	9e                   	sahf   
c000aee8:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aeec:	0f 86 85 00 00 00    	jbe    c000af77 <zoh_vari_process+0x12d>
c000aef2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000aef5:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000aef8:	7d 7d                	jge    c000af77 <zoh_vari_process+0x12d>
c000aefa:	d9 c0                	fld    st(0)
c000aefc:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aeff:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000af02:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000af05:	df e0                	fnstsw ax
c000af07:	9e                   	sahf   
c000af08:	73 6d                	jae    c000af77 <zoh_vari_process+0x12d>
c000af0a:	85 d2                	test   edx,edx
c000af0c:	7e 38                	jle    c000af46 <zoh_vari_process+0xfc>
c000af0e:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000af12:	83 ec 10             	sub    esp,0x10
c000af15:	dd 07                	fld    QWORD PTR [edi]
c000af17:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000af1a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000af1d:	e8 1e 3a 01 00       	call   c001e940 <fabs>
c000af22:	83 c4 10             	add    esp,0x10
c000af25:	dc 1d 58 01 02 c0    	fcomp  QWORD PTR ds:0xc0020158
c000af2b:	df e0                	fnstsw ax
c000af2d:	9e                   	sahf   
c000af2e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000af32:	76 12                	jbe    c000af46 <zoh_vari_process+0xfc>
c000af34:	dd 07                	fld    QWORD PTR [edi]
c000af36:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000af39:	d8 e1                	fsub   st,st(1)
c000af3b:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000af3e:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000af41:	de c1                	faddp  st(1),st
c000af43:	dd 1c 24             	fstp   QWORD PTR [esp]
c000af46:	31 c0                	xor    eax,eax
c000af48:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000af4b:	7e 13                	jle    c000af60 <zoh_vari_process+0x116>
c000af4d:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000af51:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000af54:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000af57:	40                   	inc    eax
c000af58:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000af5b:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000af5e:	eb e8                	jmp    c000af48 <zoh_vari_process+0xfe>
c000af60:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000af64:	dc 34 24             	fdiv   QWORD PTR [esp]
c000af67:	de c1                	faddp  st(1),st
c000af69:	e9 73 ff ff ff       	jmp    c000aee1 <zoh_vari_process+0x97>
c000af6e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000af72:	dc 34 24             	fdiv   QWORD PTR [esp]
c000af75:	de c1                	faddp  st(1),st
c000af77:	83 ec 10             	sub    esp,0x10
c000af7a:	dd 14 24             	fst    QWORD PTR [esp]
c000af7d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000af81:	e8 6d fe ff ff       	call   c000adf3 <fmod_one>
c000af86:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000af89:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000af8d:	d8 e1                	fsub   st,st(1)
c000af8f:	d9 c9                	fxch   st(1)
c000af91:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000af95:	dd 1c 24             	fstp   QWORD PTR [esp]
c000af98:	e8 c3 39 01 00       	call   c001e960 <lrint>
c000af9d:	83 c4 10             	add    esp,0x10
c000afa0:	0f af e8             	imul   ebp,eax
c000afa3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000afa6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000afa9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000afad:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000afb0:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000afb3:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000afb6:	0f 8d 82 00 00 00    	jge    c000b03e <zoh_vari_process+0x1f4>
c000afbc:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000afc0:	d9 c0                	fld    st(0)
c000afc2:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000afc5:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000afc9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000afcd:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000afd1:	de d9                	fcompp 
c000afd3:	df e0                	fnstsw ax
c000afd5:	9e                   	sahf   
c000afd6:	72 66                	jb     c000b03e <zoh_vari_process+0x1f4>
c000afd8:	85 d2                	test   edx,edx
c000afda:	7e 38                	jle    c000b014 <zoh_vari_process+0x1ca>
c000afdc:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000afe0:	83 ec 10             	sub    esp,0x10
c000afe3:	dd 07                	fld    QWORD PTR [edi]
c000afe5:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000afe8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000afeb:	e8 50 39 01 00       	call   c001e940 <fabs>
c000aff0:	83 c4 10             	add    esp,0x10
c000aff3:	dc 1d 58 01 02 c0    	fcomp  QWORD PTR ds:0xc0020158
c000aff9:	df e0                	fnstsw ax
c000affb:	9e                   	sahf   
c000affc:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000b000:	76 12                	jbe    c000b014 <zoh_vari_process+0x1ca>
c000b002:	dd 07                	fld    QWORD PTR [edi]
c000b004:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000b007:	d8 e1                	fsub   st,st(1)
c000b009:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000b00c:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000b00f:	de c1                	faddp  st(1),st
c000b011:	dd 1c 24             	fstp   QWORD PTR [esp]
c000b014:	31 d2                	xor    edx,edx
c000b016:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b019:	39 d0                	cmp    eax,edx
c000b01b:	0f 8e 4d ff ff ff    	jle    c000af6e <zoh_vari_process+0x124>
c000b021:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000b024:	29 c1                	sub    ecx,eax
c000b026:	89 c8                	mov    eax,ecx
c000b028:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b02a:	01 d0                	add    eax,edx
c000b02c:	42                   	inc    edx
c000b02d:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000b030:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000b033:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000b036:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000b039:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000b03c:	eb d8                	jmp    c000b016 <zoh_vari_process+0x1cc>
c000b03e:	39 e9                	cmp    ecx,ebp
c000b040:	7d 13                	jge    c000b055 <zoh_vari_process+0x20b>
c000b042:	89 e8                	mov    eax,ebp
c000b044:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000b047:	29 c8                	sub    eax,ecx
c000b049:	99                   	cdq    
c000b04a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b04d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b051:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000b055:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000b058:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000b05b:	85 c0                	test   eax,eax
c000b05d:	7f 1b                	jg     c000b07a <zoh_vari_process+0x230>
c000b05f:	dd 04 24             	fld    QWORD PTR [esp]
c000b062:	dd 1f                	fstp   QWORD PTR [edi]
c000b064:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000b067:	99                   	cdq    
c000b068:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b06b:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000b06e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000b071:	99                   	cdq    
c000b072:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b075:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000b078:	eb 25                	jmp    c000b09f <zoh_vari_process+0x255>
c000b07a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000b07d:	31 d2                	xor    edx,edx
c000b07f:	29 e8                	sub    eax,ebp
c000b081:	c1 e0 02             	shl    eax,0x2
c000b084:	39 d5                	cmp    ebp,edx
c000b086:	7e d7                	jle    c000b05f <zoh_vari_process+0x215>
c000b088:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b08a:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000b08d:	83 c0 04             	add    eax,0x4
c000b090:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000b094:	42                   	inc    edx
c000b095:	eb ed                	jmp    c000b084 <zoh_vari_process+0x23a>
c000b097:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000b09f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b0a3:	83 c4 2c             	add    esp,0x2c
c000b0a6:	5b                   	pop    ebx
c000b0a7:	5e                   	pop    esi
c000b0a8:	5f                   	pop    edi
c000b0a9:	5d                   	pop    ebp
c000b0aa:	c3                   	ret    

c000b0ab <zoh_reset>:
c000b0ab:	83 ec 0c             	sub    esp,0xc
c000b0ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b0b2:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000b0b5:	85 c0                	test   eax,eax
c000b0b7:	74 20                	je     c000b0d9 <zoh_reset+0x2e>
c000b0b9:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000b0bc:	83 c0 1c             	add    eax,0x1c
c000b0bf:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000b0c2:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000b0c9:	c1 e2 02             	shl    edx,0x2
c000b0cc:	51                   	push   ecx
c000b0cd:	52                   	push   edx
c000b0ce:	6a 00                	push   0x0
c000b0d0:	50                   	push   eax
c000b0d1:	e8 02 56 ff ff       	call   c00006d8 <memset>
c000b0d6:	83 c4 10             	add    esp,0x10
c000b0d9:	83 c4 0c             	add    esp,0xc
c000b0dc:	c3                   	ret    

c000b0dd <zoh_get_name>:
c000b0dd:	31 c0                	xor    eax,eax
c000b0df:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000b0e4:	75 05                	jne    c000b0eb <zoh_get_name+0xe>
c000b0e6:	b8 34 88 03 c0       	mov    eax,0xc0038834
c000b0eb:	c3                   	ret    

c000b0ec <zoh_get_description>:
c000b0ec:	31 c0                	xor    eax,eax
c000b0ee:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000b0f3:	75 05                	jne    c000b0fa <zoh_get_description+0xe>
c000b0f5:	b8 45 88 03 c0       	mov    eax,0xc0038845
c000b0fa:	c3                   	ret    

c000b0fb <zoh_set_converter>:
c000b0fb:	53                   	push   ebx
c000b0fc:	b8 0a 00 00 00       	mov    eax,0xa
c000b101:	83 ec 08             	sub    esp,0x8
c000b104:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b108:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000b10d:	75 6e                	jne    c000b17d <zoh_set_converter+0x82>
c000b10f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000b112:	85 c0                	test   eax,eax
c000b114:	74 13                	je     c000b129 <zoh_set_converter+0x2e>
c000b116:	83 ec 0c             	sub    esp,0xc
c000b119:	50                   	push   eax
c000b11a:	e8 ee 23 00 00       	call   c000d50d <free>
c000b11f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b126:	83 c4 10             	add    esp,0x10
c000b129:	50                   	push   eax
c000b12a:	50                   	push   eax
c000b12b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000b12e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000b135:	50                   	push   eax
c000b136:	6a 01                	push   0x1
c000b138:	e8 f0 23 00 00       	call   c000d52d <calloc>
c000b13d:	83 c4 10             	add    esp,0x10
c000b140:	89 c2                	mov    edx,eax
c000b142:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000b145:	85 d2                	test   edx,edx
c000b147:	b8 01 00 00 00       	mov    eax,0x1
c000b14c:	74 2f                	je     c000b17d <zoh_set_converter+0x82>
c000b14e:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000b154:	83 ec 0c             	sub    esp,0xc
c000b157:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000b15a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000b15d:	c7 43 24 4a ae 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ae4a
c000b164:	c7 43 20 4a ae 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ae4a
c000b16b:	c7 43 28 ab b0 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000b0ab
c000b172:	53                   	push   ebx
c000b173:	e8 33 ff ff ff       	call   c000b0ab <zoh_reset>
c000b178:	83 c4 10             	add    esp,0x10
c000b17b:	31 c0                	xor    eax,eax
c000b17d:	83 c4 08             	add    esp,0x8
c000b180:	5b                   	pop    ebx
c000b181:	c3                   	ret    

c000b182 <Computer::close(int, int, void*)>:
c000b182:	57                   	push   edi
c000b183:	56                   	push   esi
c000b184:	53                   	push   ebx
c000b185:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b189:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b18d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b191:	83 ec 0c             	sub    esp,0xc
c000b194:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000b19a:	e8 93 87 00 00       	call   c0013932 <Device::closeAll()>
c000b19f:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b1a5:	83 c4 10             	add    esp,0x10
c000b1a8:	8b 10                	mov    edx,DWORD PTR [eax]
c000b1aa:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000b1ae:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000b1b6:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b1ba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1be:	5b                   	pop    ebx
c000b1bf:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000b1c2:	5e                   	pop    esi
c000b1c3:	5f                   	pop    edi
c000b1c4:	ff e0                	jmp    eax

c000b1c6 <Computer::Computer()>:
c000b1c6:	83 ec 0c             	sub    esp,0xc
c000b1c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1cd:	83 ec 08             	sub    esp,0x8
c000b1d0:	68 7c 88 03 c0       	push   0xc003887c
c000b1d5:	50                   	push   eax
c000b1d6:	e8 d1 87 00 00       	call   c00139ac <Device::Device(char const*)>
c000b1db:	83 c4 10             	add    esp,0x10
c000b1de:	ba f8 88 03 c0       	mov    edx,0xc00388f8
c000b1e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1e7:	89 10                	mov    DWORD PTR [eax],edx
c000b1e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1ed:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b1f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1fb:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000b205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b209:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000b20f:	83 ca 04             	or     edx,0x4
c000b212:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000b218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b21c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b222:	0f b6 d0             	movzx  edx,al
c000b225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b229:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000b230:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b234:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b23a:	0f b6 d0             	movzx  edx,al
c000b23d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b241:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000b246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b24a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b250:	8d 50 01             	lea    edx,[eax+0x1]
c000b253:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b257:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000b25d:	0f b6 d0             	movzx  edx,al
c000b260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b264:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000b268:	83 e1 3f             	and    ecx,0x3f
c000b26b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000b26f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b273:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b279:	0f b6 d0             	movzx  edx,al
c000b27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b280:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000b287:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b28b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b291:	0f b6 d0             	movzx  edx,al
c000b294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b298:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000b29d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2a1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b2a7:	8d 50 01             	lea    edx,[eax+0x1]
c000b2aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b2ae:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000b2b4:	0f b6 d0             	movzx  edx,al
c000b2b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2bb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000b2bf:	83 e1 3f             	and    ecx,0x3f
c000b2c2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000b2c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2ca:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b2d0:	0f b6 d0             	movzx  edx,al
c000b2d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2d7:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000b2de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2e2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b2e8:	0f b6 d0             	movzx  edx,al
c000b2eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2ef:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000b2f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2f8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000b2fe:	8d 50 01             	lea    edx,[eax+0x1]
c000b301:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b305:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000b30b:	0f b6 d0             	movzx  edx,al
c000b30e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b312:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000b316:	83 e1 3f             	and    ecx,0x3f
c000b319:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000b31d:	90                   	nop
c000b31e:	83 c4 0c             	add    esp,0xc
c000b321:	c3                   	ret    

c000b322 <Computer::setBootMessage(char const*)>:
c000b322:	c3                   	ret    
c000b323:	90                   	nop

c000b324 <Computer::start()>:
c000b324:	56                   	push   esi
c000b325:	53                   	push   ebx
c000b326:	50                   	push   eax
c000b327:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b32b:	e8 74 30 00 00       	call   c000e3a4 <lockScheduler()>
c000b330:	e8 a3 33 00 00       	call   c000e6d8 <schedule()>
c000b335:	e8 6c 30 00 00       	call   c000e3a6 <unlockScheduler()>
c000b33a:	fb                   	sti    
c000b33b:	83 ec 0c             	sub    esp,0xc
c000b33e:	68 3b 07 00 00       	push   0x73b
c000b343:	e8 6a 71 00 00       	call   c00124b2 <operator new(unsigned long)>
c000b348:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b34f:	89 c6                	mov    esi,eax
c000b351:	ff 35 fc bb 03 c0    	push   DWORD PTR ds:0xc003bbfc
c000b357:	68 85 88 03 c0       	push   0xc0038885
c000b35c:	6a 01                	push   0x1
c000b35e:	50                   	push   eax
c000b35f:	e8 a0 2e 00 00       	call   c000e204 <Process::Process(bool, char const*, Process*, char**)>
c000b364:	83 c4 20             	add    esp,0x20
c000b367:	68 ff 00 00 00       	push   0xff
c000b36c:	6a 00                	push   0x0
c000b36e:	68 71 c9 00 c0       	push   0xc000c971
c000b373:	56                   	push   esi
c000b374:	e8 55 31 00 00       	call   c000e4ce <Process::createThread(void (*)(void*), void*, int)>
c000b379:	6a 7a                	push   0x7a
c000b37b:	6a 00                	push   0x0
c000b37d:	68 14 ef 00 c0       	push   0xc000ef14
c000b382:	ff 35 fc bb 03 c0    	push   DWORD PTR ds:0xc003bbfc
c000b388:	e8 41 31 00 00       	call   c000e4ce <Process::createThread(void (*)(void*), void*, int)>
c000b38d:	83 c4 20             	add    esp,0x20
c000b390:	a3 b0 bb 03 c0       	mov    ds:0xc003bbb0,eax
c000b395:	c6 05 ad b9 03 c0 01 	mov    BYTE PTR ds:0xc003b9ad,0x1
c000b39c:	e8 6b 73 00 00       	call   c001270c <initVFS()>
c000b3a1:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b3a7:	8b 10                	mov    edx,DWORD PTR [eax]
c000b3a9:	6a 00                	push   0x0
c000b3ab:	6a 00                	push   0x0
c000b3ad:	6a 00                	push   0x0
c000b3af:	50                   	push   eax
c000b3b0:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b3b3:	e8 f9 48 00 00       	call   c000fcb1 <setupSystemCalls()>
c000b3b8:	e8 4d 7e 00 00       	call   c001320a <loadClockSettings()>
c000b3bd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3c0:	e8 41 85 00 00       	call   c0013906 <Device::loadDriversForAll()>
c000b3c5:	c7 04 24 92 88 03 c0 	mov    DWORD PTR [esp],0xc0038892
c000b3cc:	8b 1d a8 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9a8
c000b3d2:	e8 0b 13 00 00       	call   c000c6e2 <loadDLL(char const*)>
c000b3d7:	5a                   	pop    edx
c000b3d8:	59                   	pop    ecx
c000b3d9:	53                   	push   ebx
c000b3da:	50                   	push   eax
c000b3db:	e8 cb 13 00 00       	call   c000c7ab <executeDLL(unsigned long, void*)>
c000b3e0:	c7 04 24 f4 9f 03 c0 	mov    DWORD PTR [esp],0xc0039ff4
c000b3e7:	e8 16 1b 00 00       	call   c000cf02 <kprintf(char const*, ...)>
c000b3ec:	83 c4 10             	add    esp,0x10
c000b3ef:	83 ec 0c             	sub    esp,0xc
c000b3f2:	6a 02                	push   0x2
c000b3f4:	e8 aa 35 00 00       	call   c000e9a3 <blockTask(TaskState)>
c000b3f9:	83 c4 10             	add    esp,0x10
c000b3fc:	eb f1                	jmp    c000b3ef <Computer::start()+0xcb>

c000b3fe <firstTask()>:
c000b3fe:	83 ec 18             	sub    esp,0x18
c000b401:	ff 35 a8 b9 03 c0    	push   DWORD PTR ds:0xc003b9a8
c000b407:	e8 18 ff ff ff       	call   c000b324 <Computer::start()>

c000b40c <Computer::detectFeatures()>:
c000b40c:	55                   	push   ebp
c000b40d:	57                   	push   edi
c000b40e:	56                   	push   esi
c000b40f:	53                   	push   ebx
c000b410:	83 ec 1c             	sub    esp,0x1c
c000b413:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b417:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000b421:	e8 c6 4e ff ff       	call   c00002ec <detectCPUID>
c000b426:	85 c0                	test   eax,eax
c000b428:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b42e:	0f 95 c2             	setne  dl
c000b431:	83 e0 fd             	and    eax,0xfffffffd
c000b434:	d1 e2                	shl    edx,1
c000b436:	09 d0                	or     eax,edx
c000b438:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b43e:	a8 02                	test   al,0x2
c000b440:	75 46                	jne    c000b488 <Computer::detectFeatures()+0x7c>
c000b442:	f6 05 55 bb 03 c0 04 	test   BYTE PTR ds:0xc003bb55,0x4
c000b449:	74 07                	je     c000b452 <Computer::detectFeatures()+0x46>
c000b44b:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b452:	e8 8f 2f 01 00       	call   c001e3e6 <x87Detect>
c000b457:	83 e0 01             	and    eax,0x1
c000b45a:	c1 e0 04             	shl    eax,0x4
c000b45d:	88 c2                	mov    dl,al
c000b45f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b465:	83 e0 ef             	and    eax,0xffffffef
c000b468:	09 d0                	or     eax,edx
c000b46a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b470:	a8 10                	test   al,0x10
c000b472:	0f 85 10 01 00 00    	jne    c000b588 <Computer::detectFeatures()+0x17c>
c000b478:	84 c0                	test   al,al
c000b47a:	0f 88 2b 01 00 00    	js     c000b5ab <Computer::detectFeatures()+0x19f>
c000b480:	83 c4 1c             	add    esp,0x1c
c000b483:	5b                   	pop    ebx
c000b484:	5e                   	pop    esi
c000b485:	5f                   	pop    edi
c000b486:	5d                   	pop    ebp
c000b487:	c3                   	ret    
c000b488:	83 ec 0c             	sub    esp,0xc
c000b48b:	6a 20                	push   0x20
c000b48d:	e8 6f bc 00 00       	call   c0017101 <cpuidCheckEDX(unsigned int)>
c000b492:	83 e0 01             	and    eax,0x1
c000b495:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b49c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b4a2:	83 e0 f7             	and    eax,0xfffffff7
c000b4a5:	09 d0                	or     eax,edx
c000b4a7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b4ad:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b4b4:	e8 48 bc 00 00       	call   c0017101 <cpuidCheckEDX(unsigned int)>
c000b4b9:	83 e0 01             	and    eax,0x1
c000b4bc:	88 c2                	mov    dl,al
c000b4be:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b4c4:	83 e0 fe             	and    eax,0xfffffffe
c000b4c7:	09 d0                	or     eax,edx
c000b4c9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b4cf:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b4d6:	e8 26 bc 00 00       	call   c0017101 <cpuidCheckEDX(unsigned int)>
c000b4db:	c1 e0 07             	shl    eax,0x7
c000b4de:	88 c2                	mov    dl,al
c000b4e0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b4e6:	83 e0 7f             	and    eax,0x7f
c000b4e9:	09 d0                	or     eax,edx
c000b4eb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b4f1:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b4f8:	e8 04 bc 00 00       	call   c0017101 <cpuidCheckEDX(unsigned int)>
c000b4fd:	83 c4 10             	add    esp,0x10
c000b500:	83 e0 01             	and    eax,0x1
c000b503:	c1 e0 05             	shl    eax,0x5
c000b506:	88 c2                	mov    dl,al
c000b508:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b50e:	83 e0 df             	and    eax,0xffffffdf
c000b511:	09 d0                	or     eax,edx
c000b513:	f7 05 54 bb 03 c0 01 04 00 00 	test   DWORD PTR ds:0xc003bb54,0x401
c000b51d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b523:	0f 84 a8 00 00 00    	je     c000b5d1 <Computer::detectFeatures()+0x1c5>
c000b529:	83 ec 0c             	sub    esp,0xc
c000b52c:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b533:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b537:	50                   	push   eax
c000b538:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b53c:	55                   	push   ebp
c000b53d:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b541:	57                   	push   edi
c000b542:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b546:	56                   	push   esi
c000b547:	68 00 00 00 80       	push   0x80000000
c000b54c:	e8 2d bb 00 00       	call   c001707e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b551:	83 c4 20             	add    esp,0x20
c000b554:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b55b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b55f:	0f 86 dd fe ff ff    	jbe    c000b442 <Computer::detectFeatures()+0x36>
c000b565:	83 ec 0c             	sub    esp,0xc
c000b568:	50                   	push   eax
c000b569:	55                   	push   ebp
c000b56a:	57                   	push   edi
c000b56b:	56                   	push   esi
c000b56c:	68 01 00 00 80       	push   0x80000001
c000b571:	e8 08 bb 00 00       	call   c001707e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b576:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b580:	83 c4 20             	add    esp,0x20
c000b583:	e9 ba fe ff ff       	jmp    c000b442 <Computer::detectFeatures()+0x36>
c000b588:	e8 13 2e 01 00       	call   c001e3a0 <sseDetect>
c000b58d:	88 c2                	mov    dl,al
c000b58f:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b595:	c1 e2 07             	shl    edx,0x7
c000b598:	83 e0 7f             	and    eax,0x7f
c000b59b:	09 d0                	or     eax,edx
c000b59d:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b5a3:	84 c0                	test   al,al
c000b5a5:	0f 89 d5 fe ff ff    	jns    c000b480 <Computer::detectFeatures()+0x74>
c000b5ab:	e8 e0 2d 01 00       	call   c001e390 <avxDetect>
c000b5b0:	83 e0 01             	and    eax,0x1
c000b5b3:	c1 e0 05             	shl    eax,0x5
c000b5b6:	88 c2                	mov    dl,al
c000b5b8:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b5be:	83 e0 df             	and    eax,0xffffffdf
c000b5c1:	09 d0                	or     eax,edx
c000b5c3:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b5c9:	83 c4 1c             	add    esp,0x1c
c000b5cc:	5b                   	pop    ebx
c000b5cd:	5e                   	pop    esi
c000b5ce:	5f                   	pop    edi
c000b5cf:	5d                   	pop    ebp
c000b5d0:	c3                   	ret    
c000b5d1:	83 ec 0c             	sub    esp,0xc
c000b5d4:	68 00 02 00 00       	push   0x200
c000b5d9:	e8 23 bb 00 00       	call   c0017101 <cpuidCheckEDX(unsigned int)>
c000b5de:	83 c4 10             	add    esp,0x10
c000b5e1:	e9 43 ff ff ff       	jmp    c000b529 <Computer::detectFeatures()+0x11d>

c000b5e6 <Computer::displayFeatures()>:
c000b5e6:	c3                   	ret    
c000b5e7:	90                   	nop

c000b5e8 <Computer::rdmsr(unsigned int)>:
c000b5e8:	83 ec 0c             	sub    esp,0xc
c000b5eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5ef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5f6:	74 0a                	je     c000b602 <Computer::rdmsr(unsigned int)+0x1a>
c000b5f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5fc:	0f 32                	rdmsr  
c000b5fe:	83 c4 0c             	add    esp,0xc
c000b601:	c3                   	ret    
c000b602:	83 ec 0c             	sub    esp,0xc
c000b605:	68 ae 88 03 c0       	push   0xc00388ae
c000b60a:	e8 11 1a 00 00       	call   c000d020 <panic(char const*)>
c000b60f:	83 c4 10             	add    esp,0x10
c000b612:	eb e4                	jmp    c000b5f8 <Computer::rdmsr(unsigned int)+0x10>

c000b614 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b614:	57                   	push   edi
c000b615:	56                   	push   esi
c000b616:	52                   	push   edx
c000b617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b61b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b61f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b623:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b62a:	74 0e                	je     c000b63a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b62c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b630:	89 f0                	mov    eax,esi
c000b632:	89 fa                	mov    edx,edi
c000b634:	0f 30                	wrmsr  
c000b636:	58                   	pop    eax
c000b637:	5e                   	pop    esi
c000b638:	5f                   	pop    edi
c000b639:	c3                   	ret    
c000b63a:	83 ec 0c             	sub    esp,0xc
c000b63d:	68 b4 88 03 c0       	push   0xc00388b4
c000b642:	e8 d9 19 00 00       	call   c000d020 <panic(char const*)>
c000b647:	83 c4 10             	add    esp,0x10
c000b64a:	eb e0                	jmp    c000b62c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b64c <Computer::nmiEnabled()>:
c000b64c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b650:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b656:	c3                   	ret    
c000b657:	90                   	nop

c000b658 <Computer::readCMOS(unsigned char)>:
c000b658:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b65c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b663:	19 c0                	sbb    eax,eax
c000b665:	83 e0 80             	and    eax,0xffffff80
c000b668:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b66c:	e6 70                	out    0x70,al
c000b66e:	e4 71                	in     al,0x71
c000b670:	c3                   	ret    
c000b671:	90                   	nop

c000b672 <Computer::enableNMI(bool)>:
c000b672:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b676:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b67a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b680:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b688:	eb ce                	jmp    c000b658 <Computer::readCMOS(unsigned char)>

c000b68a <Computer::open(int, int, void*)>:
c000b68a:	56                   	push   esi
c000b68b:	53                   	push   ebx
c000b68c:	83 ec 10             	sub    esp,0x10
c000b68f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b693:	f6 05 54 bb 03 c0 04 	test   BYTE PTR ds:0xc003bb54,0x4
c000b69a:	68 68 22 00 00       	push   0x2268
c000b69f:	0f 94 05 e0 ad 03 c0 	sete   BYTE PTR ds:0xc003ade0
c000b6a6:	e8 07 6e 00 00       	call   c00124b2 <operator new(unsigned long)>
c000b6ab:	89 04 24             	mov    DWORD PTR [esp],eax
c000b6ae:	89 c6                	mov    esi,eax
c000b6b0:	e8 3b b1 00 00       	call   c00167f0 <ACPI::ACPI()>
c000b6b5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b6bb:	58                   	pop    eax
c000b6bc:	5a                   	pop    edx
c000b6bd:	56                   	push   esi
c000b6be:	53                   	push   ebx
c000b6bf:	e8 f8 80 00 00       	call   c00137bc <Device::addChild(Device*)>
c000b6c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b6c7:	e8 40 fd ff ff       	call   c000b40c <Computer::detectFeatures()>
c000b6cc:	59                   	pop    ecx
c000b6cd:	5e                   	pop    esi
c000b6ce:	6a 01                	push   0x1
c000b6d0:	53                   	push   ebx
c000b6d1:	e8 9c ff ff ff       	call   c000b672 <Computer::enableNMI(bool)>
c000b6d6:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b6dd:	e8 d0 6d 00 00       	call   c00124b2 <operator new(unsigned long)>
c000b6e2:	89 04 24             	mov    DWORD PTR [esp],eax
c000b6e5:	89 c6                	mov    esi,eax
c000b6e7:	e8 e0 ba 00 00       	call   c00171cc <CPU::CPU()>
c000b6ec:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b6f2:	58                   	pop    eax
c000b6f3:	5a                   	pop    edx
c000b6f4:	56                   	push   esi
c000b6f5:	53                   	push   ebx
c000b6f6:	e8 c1 80 00 00       	call   c00137bc <Device::addChild(Device*)>
c000b6fb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b701:	8b 10                	mov    edx,DWORD PTR [eax]
c000b703:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b707:	6a 00                	push   0x0
c000b709:	6a 00                	push   0x0
c000b70b:	50                   	push   eax
c000b70c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b70f:	83 c4 20             	add    esp,0x20
c000b712:	e8 0d 86 00 00       	call   c0013d24 <setupFPU()>
c000b717:	83 ec 08             	sub    esp,0x8
c000b71a:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b720:	50                   	push   eax
c000b721:	53                   	push   ebx
c000b722:	e8 95 80 00 00       	call   c00137bc <Device::addChild(Device*)>
c000b727:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b72d:	8b 10                	mov    edx,DWORD PTR [eax]
c000b72f:	6a 00                	push   0x0
c000b731:	6a 00                	push   0x0
c000b733:	6a 00                	push   0x0
c000b735:	50                   	push   eax
c000b736:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b739:	83 c4 14             	add    esp,0x14
c000b73c:	68 fe b3 00 c0       	push   0xc000b3fe
c000b741:	e8 88 2e 00 00       	call   c000e5ce <setupMultitasking(void (*)())>
c000b746:	83 c4 14             	add    esp,0x14
c000b749:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b74e:	5b                   	pop    ebx
c000b74f:	5e                   	pop    esi
c000b750:	c3                   	ret    
c000b751:	90                   	nop

c000b752 <Computer::disableNMI()>:
c000b752:	6a 00                	push   0x0
c000b754:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b758:	e8 15 ff ff ff       	call   c000b672 <Computer::enableNMI(bool)>
c000b75d:	58                   	pop    eax
c000b75e:	5a                   	pop    edx
c000b75f:	c3                   	ret    

c000b760 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b760:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b764:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b76b:	19 c0                	sbb    eax,eax
c000b76d:	83 e0 80             	and    eax,0xffffff80
c000b770:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b774:	e6 70                	out    0x70,al
c000b776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b77a:	e6 71                	out    0x71,al
c000b77c:	c3                   	ret    
c000b77d:	90                   	nop

c000b77e <Computer::handleNMI()>:
c000b77e:	56                   	push   esi
c000b77f:	53                   	push   ebx
c000b780:	83 ec 10             	sub    esp,0x10
c000b783:	e4 92                	in     al,0x92
c000b785:	89 c6                	mov    esi,eax
c000b787:	e4 61                	in     al,0x61
c000b789:	68 ba 88 03 c0       	push   0xc00388ba
c000b78e:	88 c3                	mov    bl,al
c000b790:	e8 6d 17 00 00       	call   c000cf02 <kprintf(char const*, ...)>
c000b795:	83 c4 10             	add    esp,0x10
c000b798:	83 e6 10             	and    esi,0x10
c000b79b:	75 0d                	jne    c000b7aa <Computer::handleNMI()+0x2c>
c000b79d:	f6 c3 40             	test   bl,0x40
c000b7a0:	75 1d                	jne    c000b7bf <Computer::handleNMI()+0x41>
c000b7a2:	84 db                	test   bl,bl
c000b7a4:	78 2d                	js     c000b7d3 <Computer::handleNMI()+0x55>
c000b7a6:	58                   	pop    eax
c000b7a7:	5b                   	pop    ebx
c000b7a8:	5e                   	pop    esi
c000b7a9:	c3                   	ret    
c000b7aa:	83 ec 0c             	sub    esp,0xc
c000b7ad:	68 cb 88 03 c0       	push   0xc00388cb
c000b7b2:	e8 69 18 00 00       	call   c000d020 <panic(char const*)>
c000b7b7:	83 c4 10             	add    esp,0x10
c000b7ba:	f6 c3 40             	test   bl,0x40
c000b7bd:	74 e3                	je     c000b7a2 <Computer::handleNMI()+0x24>
c000b7bf:	83 ec 0c             	sub    esp,0xc
c000b7c2:	68 d8 88 03 c0       	push   0xc00388d8
c000b7c7:	e8 54 18 00 00       	call   c000d020 <panic(char const*)>
c000b7cc:	83 c4 10             	add    esp,0x10
c000b7cf:	84 db                	test   bl,bl
c000b7d1:	79 d3                	jns    c000b7a6 <Computer::handleNMI()+0x28>
c000b7d3:	c7 44 24 10 e2 88 03 c0 	mov    DWORD PTR [esp+0x10],0xc00388e2
c000b7db:	5a                   	pop    edx
c000b7dc:	5b                   	pop    ebx
c000b7dd:	5e                   	pop    esi
c000b7de:	e9 3d 18 00 00       	jmp    c000d020 <panic(char const*)>
c000b7e3:	90                   	nop

c000b7e4 <Computer::setDiskActivityLight(int, bool)>:
c000b7e4:	56                   	push   esi
c000b7e5:	53                   	push   ebx
c000b7e6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b7ea:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b7ef:	77 1b                	ja     c000b80c <Computer::setDiskActivityLight(int, bool)+0x28>
c000b7f1:	e4 92                	in     al,0x92
c000b7f3:	bb 40 00 00 00       	mov    ebx,0x40
c000b7f8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b7fc:	89 da                	mov    edx,ebx
c000b7fe:	d3 e2                	shl    edx,cl
c000b800:	89 f1                	mov    ecx,esi
c000b802:	f7 d2                	not    edx
c000b804:	d3 e3                	shl    ebx,cl
c000b806:	21 d0                	and    eax,edx
c000b808:	09 d8                	or     eax,ebx
c000b80a:	e6 92                	out    0x92,al
c000b80c:	5b                   	pop    ebx
c000b80d:	5e                   	pop    esi
c000b80e:	c3                   	ret    

c000b80f <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c000b80f:	55                   	push   ebp
c000b810:	89 e5                	mov    ebp,esp
c000b812:	57                   	push   edi
c000b813:	56                   	push   esi
c000b814:	53                   	push   ebx
c000b815:	81 ec 2c 10 00 00    	sub    esp,0x102c
c000b81b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c000b81e:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c000b821:	85 c0                	test   eax,eax
c000b823:	0f 95 c1             	setne  cl
c000b826:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000b82a:	0f 94 c2             	sete   dl
c000b82d:	84 d1                	test   cl,dl
c000b82f:	74 26                	je     c000b857 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c000b831:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c000b838:	74 1d                	je     c000b857 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c000b83a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c000b83d:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c000b843:	89 d6                	mov    esi,edx
c000b845:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b84b:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c000b851:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c000b854:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c000b857:	83 ec 0c             	sub    esp,0xc
c000b85a:	05 ff 0f 00 00       	add    eax,0xfff
c000b85f:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000b862:	6a 01                	push   0x1
c000b864:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c000b86a:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c000b870:	e8 ac 5a 00 00       	call   c0011321 <Virt::allocateKernelVirtualPages(int)>
c000b875:	83 c4 10             	add    esp,0x10
c000b878:	89 c6                	mov    esi,eax
c000b87a:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c000b880:	0f 86 21 01 00 00    	jbe    c000b9a7 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c000b886:	c1 eb 0c             	shr    ebx,0xc
c000b889:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c000b893:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c000b899:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000b89c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000b89f:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c000b8a5:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c000b8a8:	29 d8                	sub    eax,ebx
c000b8aa:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c000b8b0:	0f 83 f4 00 00 00    	jae    c000b9aa <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c000b8b6:	83 ec 0c             	sub    esp,0xc
c000b8b9:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c000b8bf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000b8c2:	3d 00 10 00 00       	cmp    eax,0x1000
c000b8c7:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000b8c9:	52                   	push   edx
c000b8ca:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c000b8d0:	52                   	push   edx
c000b8d1:	76 05                	jbe    c000b8d8 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c000b8d3:	b8 00 10 00 00       	mov    eax,0x1000
c000b8d8:	31 d2                	xor    edx,edx
c000b8da:	52                   	push   edx
c000b8db:	50                   	push   eax
c000b8dc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000b8df:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000b8e2:	83 c4 20             	add    esp,0x20
c000b8e5:	85 c0                	test   eax,eax
c000b8e7:	74 1f                	je     c000b908 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c000b8e9:	51                   	push   ecx
c000b8ea:	51                   	push   ecx
c000b8eb:	50                   	push   eax
c000b8ec:	68 1c 89 03 c0       	push   0xc003891c
c000b8f1:	e8 0c 16 00 00       	call   c000cf02 <kprintf(char const*, ...)>
c000b8f6:	89 34 24             	mov    DWORD PTR [esp],esi
c000b8f9:	e8 59 5d 00 00       	call   c0011657 <Virt::freeKernelVirtualPages(unsigned long)>
c000b8fe:	83 c4 10             	add    esp,0x10
c000b901:	31 c0                	xor    eax,eax
c000b903:	e9 7c 01 00 00       	jmp    c000ba84 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c000b908:	e8 97 2a 00 00       	call   c000e3a4 <lockScheduler()>
c000b90d:	e8 95 21 00 00       	call   c000daa7 <Phys::allocatePage()>
c000b912:	6a 07                	push   0x7
c000b914:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c000b91a:	56                   	push   esi
c000b91b:	50                   	push   eax
c000b91c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b922:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c000b925:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c000b92b:	e8 28 60 00 00       	call   c0011958 <VAS::mapPage(unsigned long, unsigned long, int)>
c000b930:	83 c4 0c             	add    esp,0xc
c000b933:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b939:	6a 00                	push   0x0
c000b93b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b941:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c000b944:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c000b94a:	e8 67 5e 00 00       	call   c00117b6 <VAS::mapOtherVASIn(bool, VAS*)>
c000b94f:	58                   	pop    eax
c000b950:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c000b956:	5a                   	pop    edx
c000b957:	68 07 04 00 00       	push   0x407
c000b95c:	53                   	push   ebx
c000b95d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000b963:	50                   	push   eax
c000b964:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b96a:	6a 00                	push   0x0
c000b96c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b971:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b974:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000b97a:	e8 d9 66 00 00       	call   c0012058 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c000b97f:	83 c4 1c             	add    esp,0x1c
c000b982:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c000b988:	68 00 10 00 00       	push   0x1000
c000b98d:	50                   	push   eax
c000b98e:	56                   	push   esi
c000b98f:	e8 cd 4c ff ff       	call   c0000661 <memcpy>
c000b994:	e8 0d 2a 00 00       	call   c000e3a6 <unlockScheduler()>
c000b999:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c000b99f:	83 c4 10             	add    esp,0x10
c000b9a2:	e9 f5 fe ff ff       	jmp    c000b89c <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c000b9a7:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000b9aa:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c000b9b4:	0f 86 bc 00 00 00    	jbe    c000ba76 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c000b9ba:	e8 e5 29 00 00       	call   c000e3a4 <lockScheduler()>
c000b9bf:	51                   	push   ecx
c000b9c0:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000b9c6:	6a 00                	push   0x0
c000b9c8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000b9cd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000b9d0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000b9d6:	e8 db 5d 00 00       	call   c00117b6 <VAS::mapOtherVASIn(bool, VAS*)>
c000b9db:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c000b9e1:	83 c4 10             	add    esp,0x10
c000b9e4:	c1 e8 0c             	shr    eax,0xc
c000b9e7:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c000b9f1:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c000b9f7:	e8 ab 20 00 00       	call   c000daa7 <Phys::allocatePage()>
c000b9fc:	6a 07                	push   0x7
c000b9fe:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c000ba04:	56                   	push   esi
c000ba05:	50                   	push   eax
c000ba06:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000ba0c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000ba0f:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c000ba15:	e8 3e 5f 00 00       	call   c0011958 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ba1a:	58                   	pop    eax
c000ba1b:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c000ba21:	5a                   	pop    edx
c000ba22:	68 07 04 00 00       	push   0x407
c000ba27:	53                   	push   ebx
c000ba28:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ba2e:	50                   	push   eax
c000ba2f:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c000ba35:	6a 00                	push   0x0
c000ba37:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ba3c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ba3f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ba45:	e8 0e 66 00 00       	call   c0012058 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c000ba4a:	83 c4 1c             	add    esp,0x1c
c000ba4d:	68 00 10 00 00       	push   0x1000
c000ba52:	6a 00                	push   0x0
c000ba54:	56                   	push   esi
c000ba55:	e8 7e 4c ff ff       	call   c00006d8 <memset>
c000ba5a:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c000ba60:	83 c4 10             	add    esp,0x10
c000ba63:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c000ba69:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c000ba6f:	77 86                	ja     c000b9f7 <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c000ba71:	e8 30 29 00 00       	call   c000e3a6 <unlockScheduler()>
c000ba76:	83 ec 0c             	sub    esp,0xc
c000ba79:	56                   	push   esi
c000ba7a:	e8 d8 5b 00 00       	call   c0011657 <Virt::freeKernelVirtualPages(unsigned long)>
c000ba7f:	83 c4 10             	add    esp,0x10
c000ba82:	b0 01                	mov    al,0x1
c000ba84:	8d 65 f4             	lea    esp,[ebp-0xc]
c000ba87:	5b                   	pop    ebx
c000ba88:	5e                   	pop    esi
c000ba89:	5f                   	pop    edi
c000ba8a:	5d                   	pop    ebp
c000ba8b:	c3                   	ret    

c000ba8c <loadProgramIntoMemory(Process*, char const*)>:
c000ba8c:	55                   	push   ebp
c000ba8d:	57                   	push   edi
c000ba8e:	56                   	push   esi
c000ba8f:	53                   	push   ebx
c000ba90:	83 ec 48             	sub    esp,0x48
c000ba93:	68 14 01 00 00       	push   0x114
c000ba98:	e8 15 6a 00 00       	call   c00124b2 <operator new(unsigned long)>
c000ba9d:	83 c4 0c             	add    esp,0xc
c000baa0:	89 c6                	mov    esi,eax
c000baa2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000baa6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000baaa:	50                   	push   eax
c000baab:	e8 30 6e 00 00       	call   c00128e0 <File::File(char const*, Process*)>
c000bab0:	58                   	pop    eax
c000bab1:	5a                   	pop    edx
c000bab2:	6a 01                	push   0x1
c000bab4:	56                   	push   esi
c000bab5:	e8 8a 6e 00 00       	call   c0012944 <File::open(FileOpenMode)>
c000baba:	83 c4 10             	add    esp,0x10
c000babd:	85 c0                	test   eax,eax
c000babf:	0f 85 47 01 00 00    	jne    c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bac5:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000bacd:	83 ec 0c             	sub    esp,0xc
c000bad0:	6a 34                	push   0x34
c000bad2:	e8 26 1a 00 00       	call   c000d4fd <malloc>
c000bad7:	89 c3                	mov    ebx,eax
c000bad9:	58                   	pop    eax
c000bada:	8b 06                	mov    eax,DWORD PTR [esi]
c000badc:	8d 7c 24 38          	lea    edi,[esp+0x38]
c000bae0:	57                   	push   edi
c000bae1:	53                   	push   ebx
c000bae2:	6a 00                	push   0x0
c000bae4:	6a 34                	push   0x34
c000bae6:	56                   	push   esi
c000bae7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000baea:	83 c4 20             	add    esp,0x20
c000baed:	85 c0                	test   eax,eax
c000baef:	0f 85 17 01 00 00    	jne    c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000baf5:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c000bafb:	0f 85 0b 01 00 00    	jne    c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bb01:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000bb04:	85 c0                	test   eax,eax
c000bb06:	0f 84 00 01 00 00    	je     c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bb0c:	31 d2                	xor    edx,edx
c000bb0e:	55                   	push   ebp
c000bb0f:	52                   	push   edx
c000bb10:	50                   	push   eax
c000bb11:	56                   	push   esi
c000bb12:	e8 eb 6e 00 00       	call   c0012a02 <File::seek(unsigned long long)>
c000bb17:	83 c4 10             	add    esp,0x10
c000bb1a:	85 c0                	test   eax,eax
c000bb1c:	0f 85 ea 00 00 00    	jne    c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bb22:	83 ec 0c             	sub    esp,0xc
c000bb25:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000bb28:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c000bb2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bb30:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c000bb34:	0f af c2             	imul   eax,edx
c000bb37:	50                   	push   eax
c000bb38:	e8 c0 19 00 00       	call   c000d4fd <malloc>
c000bb3d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bb40:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bb44:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000bb46:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bb4a:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c000bb4e:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c000bb52:	0f af c2             	imul   eax,edx
c000bb55:	99                   	cdq    
c000bb56:	52                   	push   edx
c000bb57:	50                   	push   eax
c000bb58:	56                   	push   esi
c000bb59:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bb5c:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000bb5f:	83 c4 20             	add    esp,0x20
c000bb62:	85 c0                	test   eax,eax
c000bb64:	0f 84 a2 00 00 00    	je     c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bb6a:	31 d2                	xor    edx,edx
c000bb6c:	51                   	push   ecx
c000bb6d:	52                   	push   edx
c000bb6e:	50                   	push   eax
c000bb6f:	56                   	push   esi
c000bb70:	e8 8d 6e 00 00       	call   c0012a02 <File::seek(unsigned long long)>
c000bb75:	83 c4 10             	add    esp,0x10
c000bb78:	85 c0                	test   eax,eax
c000bb7a:	0f 85 8c 00 00 00    	jne    c000bc0c <loadProgramIntoMemory(Process*, char const*)+0x180>
c000bb80:	83 ec 0c             	sub    esp,0xc
c000bb83:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c000bb87:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c000bb8b:	31 ed                	xor    ebp,ebp
c000bb8d:	0f af c2             	imul   eax,edx
c000bb90:	50                   	push   eax
c000bb91:	e8 67 19 00 00       	call   c000d4fd <malloc>
c000bb96:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bb99:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb9d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000bb9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba3:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c000bba7:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c000bbab:	0f af c2             	imul   eax,edx
c000bbae:	99                   	cdq    
c000bbaf:	52                   	push   edx
c000bbb0:	50                   	push   eax
c000bbb1:	56                   	push   esi
c000bbb2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bbb5:	83 c4 20             	add    esp,0x20
c000bbb8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000bbc0:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c000bbc4:	0f 86 80 00 00 00    	jbe    c000bc4a <loadProgramIntoMemory(Process*, char const*)+0x1be>
c000bbca:	0f b7 fd             	movzx  edi,bp
c000bbcd:	c1 e7 05             	shl    edi,0x5
c000bbd0:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c000bbd4:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c000bbd7:	75 6b                	jne    c000bc44 <loadProgramIntoMemory(Process*, char const*)+0x1b8>
c000bbd9:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000bbdc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bbe0:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000bbe3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbe7:	52                   	push   edx
c000bbe8:	31 d2                	xor    edx,edx
c000bbea:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bbed:	52                   	push   edx
c000bbee:	50                   	push   eax
c000bbef:	56                   	push   esi
c000bbf0:	e8 0d 6e 00 00       	call   c0012a02 <File::seek(unsigned long long)>
c000bbf5:	83 c4 10             	add    esp,0x10
c000bbf8:	85 c0                	test   eax,eax
c000bbfa:	74 17                	je     c000bc13 <loadProgramIntoMemory(Process*, char const*)+0x187>
c000bbfc:	83 ec 0c             	sub    esp,0xc
c000bbff:	68 47 89 03 c0       	push   0xc0038947
c000bc04:	e8 f9 12 00 00       	call   c000cf02 <kprintf(char const*, ...)>
c000bc09:	83 c4 10             	add    esp,0x10
c000bc0c:	31 c0                	xor    eax,eax
c000bc0e:	e9 87 00 00 00       	jmp    c000bc9a <loadProgramIntoMemory(Process*, char const*)+0x20e>
c000bc13:	83 ec 0c             	sub    esp,0xc
c000bc16:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c000bc19:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c000bc1c:	50                   	push   eax
c000bc1d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bc25:	56                   	push   esi
c000bc26:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000bc2a:	e8 e0 fb ff ff       	call   c000b80f <allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c000bc2f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bc33:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c000bc37:	83 c4 20             	add    esp,0x20
c000bc3a:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c000bc3e:	73 04                	jae    c000bc44 <loadProgramIntoMemory(Process*, char const*)+0x1b8>
c000bc40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc44:	45                   	inc    ebp
c000bc45:	e9 76 ff ff ff       	jmp    c000bbc0 <loadProgramIntoMemory(Process*, char const*)+0x134>
c000bc4a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000bc4e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bc52:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bc56:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c000bc5c:	83 ec 0c             	sub    esp,0xc
c000bc5f:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c000bc65:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bc6a:	05 00 10 00 00       	add    eax,0x1000
c000bc6f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000bc72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc76:	e8 92 18 00 00       	call   c000d50d <free>
c000bc7b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bc7e:	e8 8a 18 00 00       	call   c000d50d <free>
c000bc83:	58                   	pop    eax
c000bc84:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc88:	e8 80 18 00 00       	call   c000d50d <free>
c000bc8d:	89 34 24             	mov    DWORD PTR [esp],esi
c000bc90:	e8 0d 6d 00 00       	call   c00129a2 <File::close()>
c000bc95:	83 c4 10             	add    esp,0x10
c000bc98:	b0 01                	mov    al,0x1
c000bc9a:	83 c4 3c             	add    esp,0x3c
c000bc9d:	5b                   	pop    ebx
c000bc9e:	5e                   	pop    esi
c000bc9f:	5f                   	pop    edi
c000bca0:	5d                   	pop    ebp
c000bca1:	c3                   	ret    

c000bca2 <runtimeReferenceHelper()>:
c000bca2:	83 ec 18             	sub    esp,0x18
c000bca5:	68 4f 89 03 c0       	push   0xc003894f
c000bcaa:	e8 53 12 00 00       	call   c000cf02 <kprintf(char const*, ...)>
c000bcaf:	fa                   	cli    
c000bcb0:	83 c4 10             	add    esp,0x10
c000bcb3:	eb fe                	jmp    c000bcb3 <runtimeReferenceHelper()+0x11>

c000bcb5 <getAddressOfKernelSymbol(char const*)>:
c000bcb5:	57                   	push   edi
c000bcb6:	56                   	push   esi
c000bcb7:	53                   	push   ebx
c000bcb8:	31 db                	xor    ebx,ebx
c000bcba:	39 1d 40 bb 03 c0    	cmp    DWORD PTR ds:0xc003bb40,ebx
c000bcc0:	7e 3c                	jle    c000bcfe <getAddressOfKernelSymbol(char const*)+0x49>
c000bcc2:	8b 34 9d c0 ba 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffc4540]
c000bcc9:	31 ff                	xor    edi,edi
c000bccb:	39 3c 9d c0 b9 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffc4640],edi
c000bcd2:	7e 27                	jle    c000bcfb <getAddressOfKernelSymbol(char const*)+0x46>
c000bcd4:	50                   	push   eax
c000bcd5:	50                   	push   eax
c000bcd6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bcda:	8b 06                	mov    eax,DWORD PTR [esi]
c000bcdc:	03 04 9d 40 ba 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffc45c0]
c000bce3:	50                   	push   eax
c000bce4:	e8 91 4b ff ff       	call   c000087a <strcmp>
c000bce9:	83 c4 10             	add    esp,0x10
c000bcec:	85 c0                	test   eax,eax
c000bcee:	75 05                	jne    c000bcf5 <getAddressOfKernelSymbol(char const*)+0x40>
c000bcf0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000bcf3:	eb 0b                	jmp    c000bd00 <getAddressOfKernelSymbol(char const*)+0x4b>
c000bcf5:	83 c6 10             	add    esi,0x10
c000bcf8:	47                   	inc    edi
c000bcf9:	eb d0                	jmp    c000bccb <getAddressOfKernelSymbol(char const*)+0x16>
c000bcfb:	43                   	inc    ebx
c000bcfc:	eb bc                	jmp    c000bcba <getAddressOfKernelSymbol(char const*)+0x5>
c000bcfe:	31 c0                	xor    eax,eax
c000bd00:	5b                   	pop    ebx
c000bd01:	5e                   	pop    esi
c000bd02:	5f                   	pop    edi
c000bd03:	c3                   	ret    

c000bd04 <loadKernelSymbolTable(char const*)>:
c000bd04:	55                   	push   ebp
c000bd05:	57                   	push   edi
c000bd06:	56                   	push   esi
c000bd07:	53                   	push   ebx
c000bd08:	83 ec 68             	sub    esp,0x68
c000bd0b:	8b 35 fc bb 03 c0    	mov    esi,DWORD PTR ds:0xc003bbfc
c000bd11:	68 14 01 00 00       	push   0x114
c000bd16:	e8 97 67 00 00       	call   c00124b2 <operator new(unsigned long)>
c000bd1b:	83 c4 0c             	add    esp,0xc
c000bd1e:	89 c3                	mov    ebx,eax
c000bd20:	56                   	push   esi
c000bd21:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c000bd25:	50                   	push   eax
c000bd26:	e8 b5 6b 00 00       	call   c00128e0 <File::File(char const*, Process*)>
c000bd2b:	5e                   	pop    esi
c000bd2c:	5f                   	pop    edi
c000bd2d:	6a 01                	push   0x1
c000bd2f:	53                   	push   ebx
c000bd30:	e8 0f 6c 00 00       	call   c0012944 <File::open(FileOpenMode)>
c000bd35:	83 c4 10             	add    esp,0x10
c000bd38:	31 d2                	xor    edx,edx
c000bd3a:	85 c0                	test   eax,eax
c000bd3c:	0f 85 79 02 00 00    	jne    c000bfbb <loadKernelSymbolTable(char const*)+0x2b7>
c000bd42:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000bd4a:	83 ec 0c             	sub    esp,0xc
c000bd4d:	6a 34                	push   0x34
c000bd4f:	e8 a9 17 00 00       	call   c000d4fd <malloc>
c000bd54:	59                   	pop    ecx
c000bd55:	89 c7                	mov    edi,eax
c000bd57:	8d 74 24 34          	lea    esi,[esp+0x34]
c000bd5b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bd5d:	56                   	push   esi
c000bd5e:	57                   	push   edi
c000bd5f:	6a 00                	push   0x0
c000bd61:	6a 34                	push   0x34
c000bd63:	53                   	push   ebx
c000bd64:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bd67:	83 c4 20             	add    esp,0x20
c000bd6a:	85 c0                	test   eax,eax
c000bd6c:	74 17                	je     c000bd85 <loadKernelSymbolTable(char const*)+0x81>
c000bd6e:	83 ec 0c             	sub    esp,0xc
c000bd71:	68 71 89 03 c0       	push   0xc0038971
c000bd76:	e8 a5 12 00 00       	call   c000d020 <panic(char const*)>
c000bd7b:	83 c4 10             	add    esp,0x10
c000bd7e:	31 d2                	xor    edx,edx
c000bd80:	e9 36 02 00 00       	jmp    c000bfbb <loadKernelSymbolTable(char const*)+0x2b7>
c000bd85:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c000bd8b:	75 e1                	jne    c000bd6e <loadKernelSymbolTable(char const*)+0x6a>
c000bd8d:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c000bd90:	85 c0                	test   eax,eax
c000bd92:	74 da                	je     c000bd6e <loadKernelSymbolTable(char const*)+0x6a>
c000bd94:	52                   	push   edx
c000bd95:	31 d2                	xor    edx,edx
c000bd97:	52                   	push   edx
c000bd98:	50                   	push   eax
c000bd99:	53                   	push   ebx
c000bd9a:	e8 63 6c 00 00       	call   c0012a02 <File::seek(unsigned long long)>
c000bd9f:	83 c4 10             	add    esp,0x10
c000bda2:	85 c0                	test   eax,eax
c000bda4:	75 c8                	jne    c000bd6e <loadKernelSymbolTable(char const*)+0x6a>
c000bda6:	83 ec 0c             	sub    esp,0xc
c000bda9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000bdad:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000bdb1:	31 ed                	xor    ebp,ebp
c000bdb3:	0f af c2             	imul   eax,edx
c000bdb6:	50                   	push   eax
c000bdb7:	e8 41 17 00 00       	call   c000d4fd <malloc>
c000bdbc:	89 34 24             	mov    DWORD PTR [esp],esi
c000bdbf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc3:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000bdc5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bdc9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000bdcd:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c000bdd1:	0f af c2             	imul   eax,edx
c000bdd4:	99                   	cdq    
c000bdd5:	52                   	push   edx
c000bdd6:	50                   	push   eax
c000bdd7:	53                   	push   ebx
c000bdd8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000bddb:	83 c4 20             	add    esp,0x20
c000bdde:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bde6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bdee:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000bdf6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000bdfe:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c000be02:	0f 86 aa 00 00 00    	jbe    c000beb2 <loadKernelSymbolTable(char const*)+0x1ae>
c000be08:	0f b7 f5             	movzx  esi,bp
c000be0b:	6b f6 28             	imul   esi,esi,0x28
c000be0e:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c000be12:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000be15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000be19:	50                   	push   eax
c000be1a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000be1e:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c000be22:	8b 16                	mov    edx,DWORD PTR [esi]
c000be24:	6b c0 28             	imul   eax,eax,0x28
c000be27:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c000be2b:	89 d0                	mov    eax,edx
c000be2d:	31 d2                	xor    edx,edx
c000be2f:	52                   	push   edx
c000be30:	50                   	push   eax
c000be31:	53                   	push   ebx
c000be32:	e8 cb 6b 00 00       	call   c0012a02 <File::seek(unsigned long long)>
c000be37:	83 c4 0c             	add    esp,0xc
c000be3a:	6a 20                	push   0x20
c000be3c:	6a 00                	push   0x0
c000be3e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c000be42:	52                   	push   edx
c000be43:	e8 90 48 ff ff       	call   c00006d8 <memset>
c000be48:	58                   	pop    eax
c000be49:	8b 03                	mov    eax,DWORD PTR [ebx]
c000be4b:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c000be4f:	51                   	push   ecx
c000be50:	8d 54 24 40          	lea    edx,[esp+0x40]
c000be54:	52                   	push   edx
c000be55:	6a 00                	push   0x0
c000be57:	6a 1f                	push   0x1f
c000be59:	53                   	push   ebx
c000be5a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000be5d:	83 c4 18             	add    esp,0x18
c000be60:	68 88 89 03 c0       	push   0xc0038988
c000be65:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c000be69:	52                   	push   edx
c000be6a:	e8 0b 4a ff ff       	call   c000087a <strcmp>
c000be6f:	83 c4 10             	add    esp,0x10
c000be72:	85 c0                	test   eax,eax
c000be74:	75 0f                	jne    c000be85 <loadKernelSymbolTable(char const*)+0x181>
c000be76:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000be79:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000be7d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000be81:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be85:	50                   	push   eax
c000be86:	50                   	push   eax
c000be87:	68 90 89 03 c0       	push   0xc0038990
c000be8c:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000be90:	50                   	push   eax
c000be91:	e8 e4 49 ff ff       	call   c000087a <strcmp>
c000be96:	83 c4 10             	add    esp,0x10
c000be99:	85 c0                	test   eax,eax
c000be9b:	75 0f                	jne    c000beac <loadKernelSymbolTable(char const*)+0x1a8>
c000be9d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000bea0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bea4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000bea8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000beac:	45                   	inc    ebp
c000bead:	e9 4c ff ff ff       	jmp    c000bdfe <loadKernelSymbolTable(char const*)+0xfa>
c000beb2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000beb7:	75 10                	jne    c000bec9 <loadKernelSymbolTable(char const*)+0x1c5>
c000beb9:	83 ec 0c             	sub    esp,0xc
c000bebc:	68 98 89 03 c0       	push   0xc0038998
c000bec1:	e8 5a 11 00 00       	call   c000d020 <panic(char const*)>
c000bec6:	83 c4 10             	add    esp,0x10
c000bec9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000bece:	75 10                	jne    c000bee0 <loadKernelSymbolTable(char const*)+0x1dc>
c000bed0:	83 ec 0c             	sub    esp,0xc
c000bed3:	68 98 89 03 c0       	push   0xc0038998
c000bed8:	e8 43 11 00 00       	call   c000d020 <panic(char const*)>
c000bedd:	83 c4 10             	add    esp,0x10
c000bee0:	31 d2                	xor    edx,edx
c000bee2:	50                   	push   eax
c000bee3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bee7:	52                   	push   edx
c000bee8:	50                   	push   eax
c000bee9:	53                   	push   ebx
c000beea:	e8 13 6b 00 00       	call   c0012a02 <File::seek(unsigned long long)>
c000beef:	5a                   	pop    edx
c000bef0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bef4:	e8 04 16 00 00       	call   c000d4fd <malloc>
c000bef9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000bf01:	89 c1                	mov    ecx,eax
c000bf03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf07:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bf0b:	5e                   	pop    esi
c000bf0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf0e:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c000bf12:	55                   	push   ebp
c000bf13:	51                   	push   ecx
c000bf14:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c000bf18:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf1c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf20:	53                   	push   ebx
c000bf21:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf24:	83 c4 14             	add    esp,0x14
c000bf27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf2b:	e8 cd 15 00 00       	call   c000d4fd <malloc>
c000bf30:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bf33:	89 c6                	mov    esi,eax
c000bf35:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf37:	56                   	push   esi
c000bf38:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf3c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000bf40:	53                   	push   ebx
c000bf41:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf44:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bf48:	8b 15 40 bb 03 c0    	mov    edx,DWORD PTR ds:0xc003bb40
c000bf4e:	83 c4 1c             	add    esp,0x1c
c000bf51:	c1 e8 04             	shr    eax,0x4
c000bf54:	89 04 95 c0 b9 03 c0 	mov    DWORD PTR [edx*4-0x3ffc4640],eax
c000bf5b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf5f:	31 d2                	xor    edx,edx
c000bf61:	52                   	push   edx
c000bf62:	50                   	push   eax
c000bf63:	53                   	push   ebx
c000bf64:	e8 99 6a 00 00       	call   c0012a02 <File::seek(unsigned long long)>
c000bf69:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bf6c:	31 d2                	xor    edx,edx
c000bf6e:	56                   	push   esi
c000bf6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bf73:	52                   	push   edx
c000bf74:	50                   	push   eax
c000bf75:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bf77:	53                   	push   ebx
c000bf78:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf7b:	83 c4 14             	add    esp,0x14
c000bf7e:	53                   	push   ebx
c000bf7f:	e8 1e 6a 00 00       	call   c00129a2 <File::close()>
c000bf84:	5d                   	pop    ebp
c000bf85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf89:	e8 7f 15 00 00       	call   c000d50d <free>
c000bf8e:	89 3c 24             	mov    DWORD PTR [esp],edi
c000bf91:	e8 77 15 00 00       	call   c000d50d <free>
c000bf96:	a1 40 bb 03 c0       	mov    eax,ds:0xc003bb40
c000bf9b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bf9f:	8d 50 01             	lea    edx,[eax+0x1]
c000bfa2:	89 0c 85 c0 ba 03 c0 	mov    DWORD PTR [eax*4-0x3ffc4540],ecx
c000bfa9:	89 15 40 bb 03 c0    	mov    DWORD PTR ds:0xc003bb40,edx
c000bfaf:	89 34 85 40 ba 03 c0 	mov    DWORD PTR [eax*4-0x3ffc45c0],esi
c000bfb6:	83 c4 10             	add    esp,0x10
c000bfb9:	b2 01                	mov    dl,0x1
c000bfbb:	83 c4 5c             	add    esp,0x5c
c000bfbe:	88 d0                	mov    al,dl
c000bfc0:	5b                   	pop    ebx
c000bfc1:	5e                   	pop    esi
c000bfc2:	5f                   	pop    edi
c000bfc3:	5d                   	pop    ebp
c000bfc4:	c3                   	ret    

c000bfc5 <loadDriverIntoMemory(char const*, unsigned long)>:
c000bfc5:	55                   	push   ebp
c000bfc6:	57                   	push   edi
c000bfc7:	56                   	push   esi
c000bfc8:	53                   	push   ebx
c000bfc9:	81 ec 68 05 00 00    	sub    esp,0x568
c000bfcf:	8b 1d fc bb 03 c0    	mov    ebx,DWORD PTR ds:0xc003bbfc
c000bfd5:	68 14 01 00 00       	push   0x114
c000bfda:	e8 d3 64 00 00       	call   c00124b2 <operator new(unsigned long)>
c000bfdf:	83 c4 0c             	add    esp,0xc
c000bfe2:	89 c5                	mov    ebp,eax
c000bfe4:	53                   	push   ebx
c000bfe5:	ff b4 24 78 05 00 00 	push   DWORD PTR [esp+0x578]
c000bfec:	50                   	push   eax
c000bfed:	e8 ee 68 00 00       	call   c00128e0 <File::File(char const*, Process*)>
c000bff2:	5e                   	pop    esi
c000bff3:	5f                   	pop    edi
c000bff4:	6a 01                	push   0x1
c000bff6:	55                   	push   ebp
c000bff7:	e8 48 69 00 00       	call   c0012944 <File::open(FileOpenMode)>
c000bffc:	83 c4 10             	add    esp,0x10
c000bfff:	85 c0                	test   eax,eax
c000c001:	0f 85 5f 01 00 00    	jne    c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c007:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000c00f:	83 ec 0c             	sub    esp,0xc
c000c012:	6a 34                	push   0x34
c000c014:	e8 e4 14 00 00       	call   c000d4fd <malloc>
c000c019:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c01d:	5b                   	pop    ebx
c000c01e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c021:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c000c025:	53                   	push   ebx
c000c026:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c02a:	6a 00                	push   0x0
c000c02c:	6a 34                	push   0x34
c000c02e:	55                   	push   ebp
c000c02f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c032:	83 c4 20             	add    esp,0x20
c000c035:	85 c0                	test   eax,eax
c000c037:	0f 85 29 01 00 00    	jne    c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c03d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c041:	81 38 7f 45 4c 46    	cmp    DWORD PTR [eax],0x464c457f
c000c047:	0f 85 19 01 00 00    	jne    c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c04d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c050:	85 c0                	test   eax,eax
c000c052:	0f 84 0e 01 00 00    	je     c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c058:	31 d2                	xor    edx,edx
c000c05a:	51                   	push   ecx
c000c05b:	52                   	push   edx
c000c05c:	50                   	push   eax
c000c05d:	55                   	push   ebp
c000c05e:	e8 9f 69 00 00       	call   c0012a02 <File::seek(unsigned long long)>
c000c063:	83 c4 10             	add    esp,0x10
c000c066:	85 c0                	test   eax,eax
c000c068:	0f 85 f8 00 00 00    	jne    c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c06e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c072:	83 ec 0c             	sub    esp,0xc
c000c075:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000c078:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c07c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000c080:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c084:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000c088:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
c000c08c:	0f af c2             	imul   eax,edx
c000c08f:	50                   	push   eax
c000c090:	e8 68 14 00 00       	call   c000d4fd <malloc>
c000c095:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c098:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c09c:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c09f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c0a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c0a7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c0ab:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
c000c0af:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c000c0b3:	0f af c2             	imul   eax,edx
c000c0b6:	99                   	cdq    
c000c0b7:	52                   	push   edx
c000c0b8:	50                   	push   eax
c000c0b9:	55                   	push   ebp
c000c0ba:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c0bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c0c1:	83 c4 20             	add    esp,0x20
c000c0c4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000c0c7:	85 c0                	test   eax,eax
c000c0c9:	0f 84 97 00 00 00    	je     c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c0cf:	52                   	push   edx
c000c0d0:	31 d2                	xor    edx,edx
c000c0d2:	52                   	push   edx
c000c0d3:	50                   	push   eax
c000c0d4:	55                   	push   ebp
c000c0d5:	e8 28 69 00 00       	call   c0012a02 <File::seek(unsigned long long)>
c000c0da:	83 c4 10             	add    esp,0x10
c000c0dd:	85 c0                	test   eax,eax
c000c0df:	0f 85 81 00 00 00    	jne    c000c166 <loadDriverIntoMemory(char const*, unsigned long)+0x1a1>
c000c0e5:	83 ec 0c             	sub    esp,0xc
c000c0e8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000c0ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f0:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c000c0f4:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
c000c0f8:	0f af c2             	imul   eax,edx
c000c0fb:	50                   	push   eax
c000c0fc:	e8 fc 13 00 00       	call   c000d4fd <malloc>
c000c101:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c104:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c108:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c10b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c10f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c113:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c117:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c000c11b:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
c000c11f:	31 ff                	xor    edi,edi
c000c121:	0f af c2             	imul   eax,edx
c000c124:	99                   	cdq    
c000c125:	52                   	push   edx
c000c126:	50                   	push   eax
c000c127:	55                   	push   ebp
c000c128:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c12b:	83 c4 20             	add    esp,0x20
c000c12e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c132:	66 39 78 2c          	cmp    WORD PTR [eax+0x2c],di
c000c136:	76 7c                	jbe    c000c1b4 <loadDriverIntoMemory(char const*, unsigned long)+0x1ef>
c000c138:	0f b7 df             	movzx  ebx,di
c000c13b:	c1 e3 05             	shl    ebx,0x5
c000c13e:	03 5c 24 2c          	add    ebx,DWORD PTR [esp+0x2c]
c000c142:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c000c145:	75 67                	jne    c000c1ae <loadDriverIntoMemory(char const*, unsigned long)+0x1e9>
c000c147:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c14a:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c000c14d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c151:	31 d2                	xor    edx,edx
c000c153:	50                   	push   eax
c000c154:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c157:	52                   	push   edx
c000c158:	50                   	push   eax
c000c159:	55                   	push   ebp
c000c15a:	e8 a3 68 00 00       	call   c0012a02 <File::seek(unsigned long long)>
c000c15f:	83 c4 10             	add    esp,0x10
c000c162:	85 c0                	test   eax,eax
c000c164:	74 07                	je     c000c16d <loadDriverIntoMemory(char const*, unsigned long)+0x1a8>
c000c166:	31 c0                	xor    eax,eax
c000c168:	e9 6a 05 00 00       	jmp    c000c6d7 <loadDriverIntoMemory(char const*, unsigned long)+0x712>
c000c16d:	8b 84 24 74 05 00 00 	mov    eax,DWORD PTR [esp+0x574]
c000c174:	31 d2                	xor    edx,edx
c000c176:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c000c17a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c17d:	83 ec 0c             	sub    esp,0xc
c000c180:	01 c6                	add    esi,eax
c000c182:	8d 84 24 5c 03 00 00 	lea    eax,[esp+0x35c]
c000c189:	50                   	push   eax
c000c18a:	56                   	push   esi
c000c18b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c18f:	52                   	push   edx
c000c190:	50                   	push   eax
c000c191:	55                   	push   ebp
c000c192:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c195:	83 c4 1c             	add    esp,0x1c
c000c198:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c19b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c000c19e:	50                   	push   eax
c000c19f:	6a 00                	push   0x0
c000c1a1:	03 74 24 14          	add    esi,DWORD PTR [esp+0x14]
c000c1a5:	56                   	push   esi
c000c1a6:	e8 2d 45 ff ff       	call   c00006d8 <memset>
c000c1ab:	83 c4 10             	add    esp,0x10
c000c1ae:	47                   	inc    edi
c000c1af:	e9 7a ff ff ff       	jmp    c000c12e <loadDriverIntoMemory(char const*, unsigned long)+0x169>
c000c1b4:	31 f6                	xor    esi,esi
c000c1b6:	53                   	push   ebx
c000c1b7:	68 00 02 00 00       	push   0x200
c000c1bc:	6a 00                	push   0x0
c000c1be:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c000c1c5:	50                   	push   eax
c000c1c6:	e8 0d 45 ff ff       	call   c00006d8 <memset>
c000c1cb:	83 c4 0c             	add    esp,0xc
c000c1ce:	68 00 02 00 00       	push   0x200
c000c1d3:	6a 00                	push   0x0
c000c1d5:	8d 84 24 5c 03 00 00 	lea    eax,[esp+0x35c]
c000c1dc:	50                   	push   eax
c000c1dd:	e8 f6 44 ff ff       	call   c00006d8 <memset>
c000c1e2:	83 c4 10             	add    esp,0x10
c000c1e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000c1ed:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000c1f5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000c1fd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c205:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c20d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000c215:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c21d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c221:	66 39 70 30          	cmp    WORD PTR [eax+0x30],si
c000c225:	0f 86 6b 01 00 00    	jbe    c000c396 <loadDriverIntoMemory(char const*, unsigned long)+0x3d1>
c000c22b:	0f b7 ce             	movzx  ecx,si
c000c22e:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
c000c232:	6b d9 28             	imul   ebx,ecx,0x28
c000c235:	03 5c 24 24          	add    ebx,DWORD PTR [esp+0x24]
c000c239:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c23c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c240:	50                   	push   eax
c000c241:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c245:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000c249:	0f b7 50 32          	movzx  edx,WORD PTR [eax+0x32]
c000c24d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c24f:	6b d2 28             	imul   edx,edx,0x28
c000c252:	03 44 17 10          	add    eax,DWORD PTR [edi+edx*1+0x10]
c000c256:	31 d2                	xor    edx,edx
c000c258:	52                   	push   edx
c000c259:	50                   	push   eax
c000c25a:	55                   	push   ebp
c000c25b:	e8 a2 67 00 00       	call   c0012a02 <File::seek(unsigned long long)>
c000c260:	83 c4 0c             	add    esp,0xc
c000c263:	6a 20                	push   0x20
c000c265:	6a 00                	push   0x0
c000c267:	8d 7c 24 5c          	lea    edi,[esp+0x5c]
c000c26b:	57                   	push   edi
c000c26c:	e8 67 44 ff ff       	call   c00006d8 <memset>
c000c271:	58                   	pop    eax
c000c272:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c275:	8d 54 24 58          	lea    edx,[esp+0x58]
c000c279:	52                   	push   edx
c000c27a:	57                   	push   edi
c000c27b:	6a 00                	push   0x0
c000c27d:	6a 1f                	push   0x1f
c000c27f:	55                   	push   ebp
c000c280:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c283:	83 c4 18             	add    esp,0x18
c000c286:	57                   	push   edi
c000c287:	68 b2 89 03 c0       	push   0xc00389b2
c000c28c:	e8 71 0c 00 00       	call   c000cf02 <kprintf(char const*, ...)>
c000c291:	5a                   	pop    edx
c000c292:	59                   	pop    ecx
c000c293:	68 c3 89 03 c0       	push   0xc00389c3
c000c298:	57                   	push   edi
c000c299:	e8 dc 45 ff ff       	call   c000087a <strcmp>
c000c29e:	83 c4 10             	add    esp,0x10
c000c2a1:	85 c0                	test   eax,eax
c000c2a3:	75 08                	jne    c000c2ad <loadDriverIntoMemory(char const*, unsigned long)+0x2e8>
c000c2a5:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c2a9:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000c2ad:	50                   	push   eax
c000c2ae:	50                   	push   eax
c000c2af:	68 cd 89 03 c0       	push   0xc00389cd
c000c2b4:	57                   	push   edi
c000c2b5:	e8 c0 45 ff ff       	call   c000087a <strcmp>
c000c2ba:	83 c4 10             	add    esp,0x10
c000c2bd:	85 c0                	test   eax,eax
c000c2bf:	75 07                	jne    c000c2c8 <loadDriverIntoMemory(char const*, unsigned long)+0x303>
c000c2c1:	0f b7 c6             	movzx  eax,si
c000c2c4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c2c8:	50                   	push   eax
c000c2c9:	6a 09                	push   0x9
c000c2cb:	68 bf 89 03 c0       	push   0xc00389bf
c000c2d0:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c000c2d4:	50                   	push   eax
c000c2d5:	e8 c2 42 ff ff       	call   c000059c <memcmp>
c000c2da:	83 c4 10             	add    esp,0x10
c000c2dd:	85 c0                	test   eax,eax
c000c2df:	75 24                	jne    c000c305 <loadDriverIntoMemory(char const*, unsigned long)+0x340>
c000c2e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c2e5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c2e9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c2ed:	89 bc 84 50 01 00 00 	mov    DWORD PTR [esp+eax*4+0x150],edi
c000c2f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c2f7:	89 84 94 50 03 00 00 	mov    DWORD PTR [esp+edx*4+0x350],eax
c000c2fe:	89 d0                	mov    eax,edx
c000c300:	40                   	inc    eax
c000c301:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c305:	50                   	push   eax
c000c306:	6a 09                	push   0x9
c000c308:	68 c9 89 03 c0       	push   0xc00389c9
c000c30d:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c000c311:	50                   	push   eax
c000c312:	e8 85 42 ff ff       	call   c000059c <memcmp>
c000c317:	83 c4 10             	add    esp,0x10
c000c31a:	85 c0                	test   eax,eax
c000c31c:	75 24                	jne    c000c342 <loadDriverIntoMemory(char const*, unsigned long)+0x37d>
c000c31e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c322:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c326:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c32a:	89 8c 84 50 01 00 00 	mov    DWORD PTR [esp+eax*4+0x150],ecx
c000c331:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c334:	89 84 bc 50 03 00 00 	mov    DWORD PTR [esp+edi*4+0x350],eax
c000c33b:	89 f8                	mov    eax,edi
c000c33d:	40                   	inc    eax
c000c33e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c342:	50                   	push   eax
c000c343:	50                   	push   eax
c000c344:	68 88 89 03 c0       	push   0xc0038988
c000c349:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c000c34d:	50                   	push   eax
c000c34e:	e8 27 45 ff ff       	call   c000087a <strcmp>
c000c353:	83 c4 10             	add    esp,0x10
c000c356:	85 c0                	test   eax,eax
c000c358:	75 0f                	jne    c000c369 <loadDriverIntoMemory(char const*, unsigned long)+0x3a4>
c000c35a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c35d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c361:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c365:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c369:	57                   	push   edi
c000c36a:	57                   	push   edi
c000c36b:	68 90 89 03 c0       	push   0xc0038990
c000c370:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c000c374:	50                   	push   eax
c000c375:	e8 00 45 ff ff       	call   c000087a <strcmp>
c000c37a:	83 c4 10             	add    esp,0x10
c000c37d:	85 c0                	test   eax,eax
c000c37f:	75 0f                	jne    c000c390 <loadDriverIntoMemory(char const*, unsigned long)+0x3cb>
c000c381:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c384:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c388:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c38c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c390:	46                   	inc    esi
c000c391:	e9 87 fe ff ff       	jmp    c000c21d <loadDriverIntoMemory(char const*, unsigned long)+0x258>
c000c396:	31 d2                	xor    edx,edx
c000c398:	31 ff                	xor    edi,edi
c000c39a:	51                   	push   ecx
c000c39b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c39f:	52                   	push   edx
c000c3a0:	50                   	push   eax
c000c3a1:	55                   	push   ebp
c000c3a2:	e8 5b 66 00 00       	call   c0012a02 <File::seek(unsigned long long)>
c000c3a7:	5b                   	pop    ebx
c000c3a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3ac:	e8 4c 11 00 00       	call   c000d4fd <malloc>
c000c3b1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c3b4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c3b8:	31 d2                	xor    edx,edx
c000c3ba:	5e                   	pop    esi
c000c3bb:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c000c3bf:	53                   	push   ebx
c000c3c0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c3c4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c3c8:	52                   	push   edx
c000c3c9:	50                   	push   eax
c000c3ca:	55                   	push   ebp
c000c3cb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c3ce:	83 c4 14             	add    esp,0x14
c000c3d1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c3d5:	e8 23 11 00 00       	call   c000d4fd <malloc>
c000c3da:	31 d2                	xor    edx,edx
c000c3dc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c3e0:	83 c4 0c             	add    esp,0xc
c000c3e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c3e7:	52                   	push   edx
c000c3e8:	50                   	push   eax
c000c3e9:	55                   	push   ebp
c000c3ea:	e8 13 66 00 00       	call   c0012a02 <File::seek(unsigned long long)>
c000c3ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c3f2:	31 d2                	xor    edx,edx
c000c3f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c3f8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c3fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c3ff:	52                   	push   edx
c000c400:	50                   	push   eax
c000c401:	55                   	push   ebp
c000c402:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c405:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000c409:	c1 e0 08             	shl    eax,0x8
c000c40c:	83 c8 01             	or     eax,0x1
c000c40f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000c413:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000c417:	c1 e0 08             	shl    eax,0x8
c000c41a:	83 c8 01             	or     eax,0x1
c000c41d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c421:	83 c4 20             	add    esp,0x20
c000c424:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000c428:	0f 84 7d 02 00 00    	je     c000c6ab <loadDriverIntoMemory(char const*, unsigned long)+0x6e6>
c000c42e:	8b 84 bc 50 03 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x350]
c000c435:	31 d2                	xor    edx,edx
c000c437:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c43b:	c1 e8 03             	shr    eax,0x3
c000c43e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c442:	50                   	push   eax
c000c443:	8b 84 bc 54 01 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x154]
c000c44a:	52                   	push   edx
c000c44b:	50                   	push   eax
c000c44c:	55                   	push   ebp
c000c44d:	e8 b0 65 00 00       	call   c0012a02 <File::seek(unsigned long long)>
c000c452:	58                   	pop    eax
c000c453:	ff b4 bc 5c 03 00 00 	push   DWORD PTR [esp+edi*4+0x35c]
c000c45a:	e8 9e 10 00 00       	call   c000d4fd <malloc>
c000c45f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c000c462:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c466:	5a                   	pop    edx
c000c467:	31 d2                	xor    edx,edx
c000c469:	8d 44 24 58          	lea    eax,[esp+0x58]
c000c46d:	50                   	push   eax
c000c46e:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c472:	8b 84 bc 64 03 00 00 	mov    eax,DWORD PTR [esp+edi*4+0x364]
c000c479:	52                   	push   edx
c000c47a:	50                   	push   eax
c000c47b:	55                   	push   ebp
c000c47c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c000c47f:	83 c4 20             	add    esp,0x20
c000c482:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c48a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000c48e:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c000c492:	0f 8d fe 01 00 00    	jge    c000c696 <loadDriverIntoMemory(char const*, unsigned long)+0x6d1>
c000c498:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c49c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c4a0:	83 ec 0c             	sub    esp,0xc
c000c4a3:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c000c4a6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4aa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c4ae:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c000c4b2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c4b6:	89 c6                	mov    esi,eax
c000c4b8:	c1 ee 08             	shr    esi,0x8
c000c4bb:	c1 e6 04             	shl    esi,0x4
c000c4be:	03 74 24 40          	add    esi,DWORD PTR [esp+0x40]
c000c4c2:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c000c4c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c4c9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c4cd:	53                   	push   ebx
c000c4ce:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c4d2:	03 06                	add    eax,DWORD PTR [esi]
c000c4d4:	50                   	push   eax
c000c4d5:	68 d3 89 03 c0       	push   0xc00389d3
c000c4da:	e8 23 0a 00 00       	call   c000cf02 <kprintf(char const*, ...)>
c000c4df:	83 c4 20             	add    esp,0x20
c000c4e2:	85 db                	test   ebx,ebx
c000c4e4:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000c4e9:	0f 85 06 01 00 00    	jne    c000c5f5 <loadDriverIntoMemory(char const*, unsigned long)+0x630>
c000c4ef:	83 ec 0c             	sub    esp,0xc
c000c4f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c4f6:	03 06                	add    eax,DWORD PTR [esi]
c000c4f8:	50                   	push   eax
c000c4f9:	e8 b7 f7 ff ff       	call   c000bcb5 <getAddressOfKernelSymbol(char const*)>
c000c4fe:	83 c4 10             	add    esp,0x10
c000c501:	89 c3                	mov    ebx,eax
c000c503:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c000c508:	85 c0                	test   eax,eax
c000c50a:	0f 85 e5 00 00 00    	jne    c000c5f5 <loadDriverIntoMemory(char const*, unsigned long)+0x630>
c000c510:	50                   	push   eax
c000c511:	50                   	push   eax
c000c512:	68 05 8a 03 c0       	push   0xc0038a05
c000c517:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c51b:	03 06                	add    eax,DWORD PTR [esi]
c000c51d:	50                   	push   eax
c000c51e:	e8 57 43 ff ff       	call   c000087a <strcmp>
c000c523:	83 c4 10             	add    esp,0x10
c000c526:	85 c0                	test   eax,eax
c000c528:	75 0a                	jne    c000c534 <loadDriverIntoMemory(char const*, unsigned long)+0x56f>
c000c52a:	bb 1c e7 01 c0       	mov    ebx,0xc001e71c
c000c52f:	e9 bc 00 00 00       	jmp    c000c5f0 <loadDriverIntoMemory(char const*, unsigned long)+0x62b>
c000c534:	50                   	push   eax
c000c535:	50                   	push   eax
c000c536:	68 0f 8a 03 c0       	push   0xc0038a0f
c000c53b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c53f:	03 06                	add    eax,DWORD PTR [esi]
c000c541:	50                   	push   eax
c000c542:	e8 33 43 ff ff       	call   c000087a <strcmp>
c000c547:	83 c4 10             	add    esp,0x10
c000c54a:	85 c0                	test   eax,eax
c000c54c:	75 0a                	jne    c000c558 <loadDriverIntoMemory(char const*, unsigned long)+0x593>
c000c54e:	bb 50 e4 01 c0       	mov    ebx,0xc001e450
c000c553:	e9 98 00 00 00       	jmp    c000c5f0 <loadDriverIntoMemory(char const*, unsigned long)+0x62b>
c000c558:	50                   	push   eax
c000c559:	50                   	push   eax
c000c55a:	68 18 8a 03 c0       	push   0xc0038a18
c000c55f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c563:	03 06                	add    eax,DWORD PTR [esi]
c000c565:	50                   	push   eax
c000c566:	e8 0f 43 ff ff       	call   c000087a <strcmp>
c000c56b:	83 c4 10             	add    esp,0x10
c000c56e:	85 c0                	test   eax,eax
c000c570:	75 07                	jne    c000c579 <loadDriverIntoMemory(char const*, unsigned long)+0x5b4>
c000c572:	bb 1c e8 01 c0       	mov    ebx,0xc001e81c
c000c577:	eb 77                	jmp    c000c5f0 <loadDriverIntoMemory(char const*, unsigned long)+0x62b>
c000c579:	50                   	push   eax
c000c57a:	50                   	push   eax
c000c57b:	68 22 8a 03 c0       	push   0xc0038a22
c000c580:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c584:	03 06                	add    eax,DWORD PTR [esi]
c000c586:	50                   	push   eax
c000c587:	e8 ee 42 ff ff       	call   c000087a <strcmp>
c000c58c:	83 c4 10             	add    esp,0x10
c000c58f:	85 c0                	test   eax,eax
c000c591:	74 58                	je     c000c5eb <loadDriverIntoMemory(char const*, unsigned long)+0x626>
c000c593:	50                   	push   eax
c000c594:	50                   	push   eax
c000c595:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c599:	03 06                	add    eax,DWORD PTR [esi]
c000c59b:	50                   	push   eax
c000c59c:	68 2b 8a 03 c0       	push   0xc0038a2b
c000c5a1:	e8 5c 09 00 00       	call   c000cf02 <kprintf(char const*, ...)>
c000c5a6:	58                   	pop    eax
c000c5a7:	5a                   	pop    edx
c000c5a8:	68 45 8a 03 c0       	push   0xc0038a45
c000c5ad:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c000c5b1:	50                   	push   eax
c000c5b2:	e8 3d 42 ff ff       	call   c00007f4 <strcpy>
c000c5b7:	59                   	pop    ecx
c000c5b8:	58                   	pop    eax
c000c5b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c5bd:	03 06                	add    eax,DWORD PTR [esi]
c000c5bf:	50                   	push   eax
c000c5c0:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c000c5c4:	50                   	push   eax
c000c5c5:	e8 77 43 ff ff       	call   c0000941 <strcat>
c000c5ca:	58                   	pop    eax
c000c5cb:	5a                   	pop    edx
c000c5cc:	68 a3 8a 03 c0       	push   0xc0038aa3
c000c5d1:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c000c5d5:	50                   	push   eax
c000c5d6:	e8 66 43 ff ff       	call   c0000941 <strcat>
c000c5db:	59                   	pop    ecx
c000c5dc:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c000c5e0:	50                   	push   eax
c000c5e1:	e8 3a 0a 00 00       	call   c000d020 <panic(char const*)>
c000c5e6:	83 c4 10             	add    esp,0x10
c000c5e9:	eb 0a                	jmp    c000c5f5 <loadDriverIntoMemory(char const*, unsigned long)+0x630>
c000c5eb:	bb 9c e5 01 c0       	mov    ebx,0xc001e59c
c000c5f0:	c6 44 24 1c 01       	mov    BYTE PTR [esp+0x1c],0x1
c000c5f5:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c000c5fa:	75 32                	jne    c000c62e <loadDriverIntoMemory(char const*, unsigned long)+0x669>
c000c5fc:	8b 8c 24 74 05 00 00 	mov    ecx,DWORD PTR [esp+0x574]
c000c603:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c607:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c000c60b:	01 ca                	add    edx,ecx
c000c60d:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000c612:	8b 02                	mov    eax,DWORD PTR [edx]
c000c614:	75 12                	jne    c000c628 <loadDriverIntoMemory(char const*, unsigned long)+0x663>
c000c616:	01 c8                	add    eax,ecx
c000c618:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c61c:	39 4c 24 38          	cmp    DWORD PTR [esp+0x38],ecx
c000c620:	74 08                	je     c000c62a <loadDriverIntoMemory(char const*, unsigned long)+0x665>
c000c622:	39 4c 24 30          	cmp    DWORD PTR [esp+0x30],ecx
c000c626:	74 02                	je     c000c62a <loadDriverIntoMemory(char const*, unsigned long)+0x665>
c000c628:	01 d8                	add    eax,ebx
c000c62a:	89 02                	mov    DWORD PTR [edx],eax
c000c62c:	eb 5f                	jmp    c000c68d <loadDriverIntoMemory(char const*, unsigned long)+0x6c8>
c000c62e:	80 7c 24 10 02       	cmp    BYTE PTR [esp+0x10],0x2
c000c633:	75 37                	jne    c000c66c <loadDriverIntoMemory(char const*, unsigned long)+0x6a7>
c000c635:	8b 94 24 74 05 00 00 	mov    edx,DWORD PTR [esp+0x574]
c000c63c:	2b 54 24 20          	sub    edx,DWORD PTR [esp+0x20]
c000c640:	03 54 24 14          	add    edx,DWORD PTR [esp+0x14]
c000c644:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c000c649:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000c64b:	74 13                	je     c000c660 <loadDriverIntoMemory(char const*, unsigned long)+0x69b>
c000c64d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c651:	2b 84 24 74 05 00 00 	sub    eax,DWORD PTR [esp+0x574]
c000c658:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000c65c:	01 c8                	add    eax,ecx
c000c65e:	eb 06                	jmp    c000c666 <loadDriverIntoMemory(char const*, unsigned long)+0x6a1>
c000c660:	89 c8                	mov    eax,ecx
c000c662:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c000c666:	01 c3                	add    ebx,eax
c000c668:	89 1a                	mov    DWORD PTR [edx],ebx
c000c66a:	eb 21                	jmp    c000c68d <loadDriverIntoMemory(char const*, unsigned long)+0x6c8>
c000c66c:	53                   	push   ebx
c000c66d:	53                   	push   ebx
c000c66e:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000c673:	50                   	push   eax
c000c674:	68 5c 8a 03 c0       	push   0xc0038a5c
c000c679:	e8 84 08 00 00       	call   c000cf02 <kprintf(char const*, ...)>
c000c67e:	c7 04 24 67 8a 03 c0 	mov    DWORD PTR [esp],0xc0038a67
c000c685:	e8 96 09 00 00       	call   c000d020 <panic(char const*)>
c000c68a:	83 c4 10             	add    esp,0x10
c000c68d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000c691:	e9 f4 fd ff ff       	jmp    c000c48a <loadDriverIntoMemory(char const*, unsigned long)+0x4c5>
c000c696:	83 ec 0c             	sub    esp,0xc
c000c699:	47                   	inc    edi
c000c69a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c69e:	e8 6a 0e 00 00       	call   c000d50d <free>
c000c6a3:	83 c4 10             	add    esp,0x10
c000c6a6:	e9 79 fd ff ff       	jmp    c000c424 <loadDriverIntoMemory(char const*, unsigned long)+0x45f>
c000c6ab:	83 ec 0c             	sub    esp,0xc
c000c6ae:	55                   	push   ebp
c000c6af:	e8 ee 62 00 00       	call   c00129a2 <File::close()>
c000c6b4:	58                   	pop    eax
c000c6b5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c6b9:	e8 4f 0e 00 00       	call   c000d50d <free>
c000c6be:	5a                   	pop    edx
c000c6bf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c6c3:	e8 45 0e 00 00       	call   c000d50d <free>
c000c6c8:	59                   	pop    ecx
c000c6c9:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c6cd:	e8 3b 0e 00 00       	call   c000d50d <free>
c000c6d2:	83 c4 10             	add    esp,0x10
c000c6d5:	b0 01                	mov    al,0x1
c000c6d7:	81 c4 5c 05 00 00    	add    esp,0x55c
c000c6dd:	5b                   	pop    ebx
c000c6de:	5e                   	pop    esi
c000c6df:	5f                   	pop    edi
c000c6e0:	5d                   	pop    ebp
c000c6e1:	c3                   	ret    

c000c6e2 <loadDLL(char const*)>:
c000c6e2:	57                   	push   edi
c000c6e3:	56                   	push   esi
c000c6e4:	53                   	push   ebx
c000c6e5:	81 ec 18 01 00 00    	sub    esp,0x118
c000c6eb:	8b 9c 24 28 01 00 00 	mov    ebx,DWORD PTR [esp+0x128]
c000c6f2:	53                   	push   ebx
c000c6f3:	68 7f 8a 03 c0       	push   0xc0038a7f
c000c6f8:	e8 05 08 00 00       	call   c000cf02 <kprintf(char const*, ...)>
c000c6fd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000c704:	e8 a9 5d 00 00       	call   c00124b2 <operator new(unsigned long)>
c000c709:	83 c4 0c             	add    esp,0xc
c000c70c:	89 c6                	mov    esi,eax
c000c70e:	ff 35 fc bb 03 c0    	push   DWORD PTR ds:0xc003bbfc
c000c714:	53                   	push   ebx
c000c715:	50                   	push   eax
c000c716:	e8 c5 61 00 00       	call   c00128e0 <File::File(char const*, Process*)>
c000c71b:	83 c4 0c             	add    esp,0xc
c000c71e:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000c722:	50                   	push   eax
c000c723:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c727:	50                   	push   eax
c000c728:	56                   	push   esi
c000c729:	e8 c2 64 00 00       	call   c0012bf0 <File::stat(unsigned long long*, bool*)>
c000c72e:	83 c4 10             	add    esp,0x10
c000c731:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c736:	75 0a                	jne    c000c742 <loadDLL(char const*)+0x60>
c000c738:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c73c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000c740:	75 32                	jne    c000c774 <loadDLL(char const*)+0x92>
c000c742:	50                   	push   eax
c000c743:	50                   	push   eax
c000c744:	68 90 8a 03 c0       	push   0xc0038a90
c000c749:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c000c74d:	57                   	push   edi
c000c74e:	e8 a1 40 ff ff       	call   c00007f4 <strcpy>
c000c753:	58                   	pop    eax
c000c754:	5a                   	pop    edx
c000c755:	53                   	push   ebx
c000c756:	57                   	push   edi
c000c757:	e8 e5 41 ff ff       	call   c0000941 <strcat>
c000c75c:	59                   	pop    ecx
c000c75d:	58                   	pop    eax
c000c75e:	68 a3 8a 03 c0       	push   0xc0038aa3
c000c763:	57                   	push   edi
c000c764:	e8 d8 41 ff ff       	call   c0000941 <strcat>
c000c769:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c76c:	e8 af 08 00 00       	call   c000d020 <panic(char const*)>
c000c771:	83 c4 10             	add    esp,0x10
c000c774:	83 ec 0c             	sub    esp,0xc
c000c777:	8b 06                	mov    eax,DWORD PTR [esi]
c000c779:	56                   	push   esi
c000c77a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000c77d:	58                   	pop    eax
c000c77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c782:	e8 76 0d 00 00       	call   c000d4fd <malloc>
c000c787:	5a                   	pop    edx
c000c788:	89 c6                	mov    esi,eax
c000c78a:	59                   	pop    ecx
c000c78b:	50                   	push   eax
c000c78c:	68 a5 8a 03 c0       	push   0xc0038aa5
c000c791:	e8 6c 07 00 00       	call   c000cf02 <kprintf(char const*, ...)>
c000c796:	5f                   	pop    edi
c000c797:	58                   	pop    eax
c000c798:	56                   	push   esi
c000c799:	53                   	push   ebx
c000c79a:	e8 26 f8 ff ff       	call   c000bfc5 <loadDriverIntoMemory(char const*, unsigned long)>
c000c79f:	81 c4 20 01 00 00    	add    esp,0x120
c000c7a5:	89 f0                	mov    eax,esi
c000c7a7:	5b                   	pop    ebx
c000c7a8:	5e                   	pop    esi
c000c7a9:	5f                   	pop    edi
c000c7aa:	c3                   	ret    

c000c7ab <executeDLL(unsigned long, void*)>:
c000c7ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7af:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c7b3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c7b7:	ff e0                	jmp    eax
c000c7b9:	90                   	nop

c000c7ba <GDTEntry::setBase(unsigned int)>:
c000c7ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c7be:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c7c2:	89 c1                	mov    ecx,eax
c000c7c4:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000c7c8:	c1 e9 10             	shr    ecx,0x10
c000c7cb:	c1 e8 18             	shr    eax,0x18
c000c7ce:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000c7d1:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000c7d4:	c3                   	ret    
c000c7d5:	90                   	nop

c000c7d6 <GDTEntry::setLimit(unsigned int)>:
c000c7d6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c7da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c7de:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000c7e1:	66 89 01             	mov    WORD PTR [ecx],ax
c000c7e4:	83 e2 f0             	and    edx,0xfffffff0
c000c7e7:	c1 e8 10             	shr    eax,0x10
c000c7ea:	83 e0 0f             	and    eax,0xf
c000c7ed:	09 d0                	or     eax,edx
c000c7ef:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000c7f2:	c3                   	ret    
c000c7f3:	90                   	nop

c000c7f4 <GDT::GDT()>:
c000c7f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c7f8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c7fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c802:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c808:	90                   	nop
c000c809:	c3                   	ret    

c000c80a <GDT::addEntry(GDTEntry)>:
c000c80a:	53                   	push   ebx
c000c80b:	83 ec 0c             	sub    esp,0xc
c000c80e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c812:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c814:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000c81b:	52                   	push   edx
c000c81c:	50                   	push   eax
c000c81d:	68 c4 8a 03 c0       	push   0xc0038ac4
c000c822:	e8 db 06 00 00       	call   c000cf02 <kprintf(char const*, ...)>
c000c827:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c829:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c82d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c831:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000c835:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000c839:	8d 50 01             	lea    edx,[eax+0x1]
c000c83c:	c1 e0 03             	shl    eax,0x3
c000c83f:	89 13                	mov    DWORD PTR [ebx],edx
c000c841:	83 c4 18             	add    esp,0x18
c000c844:	5b                   	pop    ebx
c000c845:	c3                   	ret    

c000c846 <GDT::getNumberOfEntries()>:
c000c846:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c84a:	8b 00                	mov    eax,DWORD PTR [eax]
c000c84c:	c3                   	ret    
c000c84d:	90                   	nop

c000c84e <GDT::flush()>:
c000c84e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c852:	8b 10                	mov    edx,DWORD PTR [eax]
c000c854:	83 c0 04             	add    eax,0x4
c000c857:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000c85e:	a3 46 bb 03 c0       	mov    ds:0xc003bb46,eax
c000c863:	66 89 15 44 bb 03 c0 	mov    WORD PTR ds:0xc003bb44,dx
c000c86a:	e9 f1 3a ff ff       	jmp    c0000360 <loadGDT>
c000c86f:	90                   	nop

c000c870 <GDT::setup()>:
c000c870:	55                   	push   ebp
c000c871:	57                   	push   edi
c000c872:	56                   	push   esi
c000c873:	53                   	push   ebx
c000c874:	83 ec 3c             	sub    esp,0x3c
c000c877:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000c87b:	6a 00                	push   0x0
c000c87d:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000c881:	53                   	push   ebx
c000c882:	e8 33 ff ff ff       	call   c000c7ba <GDTEntry::setBase(unsigned int)>
c000c887:	6a 00                	push   0x0
c000c889:	53                   	push   ebx
c000c88a:	e8 47 ff ff ff       	call   c000c7d6 <GDTEntry::setLimit(unsigned int)>
c000c88f:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000c897:	6a 00                	push   0x0
c000c899:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000c89d:	53                   	push   ebx
c000c89e:	e8 17 ff ff ff       	call   c000c7ba <GDTEntry::setBase(unsigned int)>
c000c8a3:	68 ff ff ff 00       	push   0xffffff
c000c8a8:	53                   	push   ebx
c000c8a9:	e8 28 ff ff ff       	call   c000c7d6 <GDTEntry::setLimit(unsigned int)>
c000c8ae:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c8b2:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000c8b7:	0d 00 9a c0 00       	or     eax,0xc09a00
c000c8bc:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c8c0:	83 c4 20             	add    esp,0x20
c000c8c3:	6a 00                	push   0x0
c000c8c5:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000c8c9:	53                   	push   ebx
c000c8ca:	e8 eb fe ff ff       	call   c000c7ba <GDTEntry::setBase(unsigned int)>
c000c8cf:	68 ff ff ff 00       	push   0xffffff
c000c8d4:	53                   	push   ebx
c000c8d5:	e8 fc fe ff ff       	call   c000c7d6 <GDTEntry::setLimit(unsigned int)>
c000c8da:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c8de:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c8e2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000c8e6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000c8ea:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c8ee:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000c8f3:	0d 00 92 c0 00       	or     eax,0xc09200
c000c8f8:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c8fc:	89 d8                	mov    eax,ebx
c000c8fe:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000c902:	80 cc 60             	or     ah,0x60
c000c905:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c909:	83 c4 0c             	add    esp,0xc
c000c90c:	89 f8                	mov    eax,edi
c000c90e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c912:	80 cc 60             	or     ah,0x60
c000c915:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c919:	89 c7                	mov    edi,eax
c000c91b:	55                   	push   ebp
c000c91c:	e8 e9 fe ff ff       	call   c000c80a <GDT::addEntry(GDTEntry)>
c000c921:	83 c4 0c             	add    esp,0xc
c000c924:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c928:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c92c:	55                   	push   ebp
c000c92d:	e8 d8 fe ff ff       	call   c000c80a <GDT::addEntry(GDTEntry)>
c000c932:	83 c4 0c             	add    esp,0xc
c000c935:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c939:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c93d:	55                   	push   ebp
c000c93e:	e8 c7 fe ff ff       	call   c000c80a <GDT::addEntry(GDTEntry)>
c000c943:	83 c4 0c             	add    esp,0xc
c000c946:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c94a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c94e:	53                   	push   ebx
c000c94f:	51                   	push   ecx
c000c950:	55                   	push   ebp
c000c951:	e8 b4 fe ff ff       	call   c000c80a <GDT::addEntry(GDTEntry)>
c000c956:	83 c4 0c             	add    esp,0xc
c000c959:	57                   	push   edi
c000c95a:	56                   	push   esi
c000c95b:	55                   	push   ebp
c000c95c:	e8 a9 fe ff ff       	call   c000c80a <GDT::addEntry(GDTEntry)>
c000c961:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000c964:	e8 e5 fe ff ff       	call   c000c84e <GDT::flush()>
c000c969:	83 c4 4c             	add    esp,0x4c
c000c96c:	5b                   	pop    ebx
c000c96d:	5e                   	pop    esi
c000c96e:	5f                   	pop    edi
c000c96f:	5d                   	pop    ebp
c000c970:	c3                   	ret    

c000c971 <idleFunction(void*)>:
c000c971:	53                   	push   ebx
c000c972:	83 ec 08             	sub    esp,0x8
c000c975:	e8 2c 1a 00 00       	call   c000e3a6 <unlockScheduler()>
c000c97a:	e8 39 a8 00 00       	call   c00171b8 <thisCPU()>
c000c97f:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000c986:	74 41                	je     c000c9c9 <idleFunction(void*)+0x58>
c000c988:	a1 a8 b9 03 c0       	mov    eax,ds:0xc003b9a8
c000c98d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000c994:	74 33                	je     c000c9c9 <idleFunction(void*)+0x58>
c000c996:	31 db                	xor    ebx,ebx
c000c998:	52                   	push   edx
c000c999:	52                   	push   edx
c000c99a:	68 e1 00 00 00       	push   0xe1
c000c99f:	50                   	push   eax
c000c9a0:	e8 43 ec ff ff       	call   c000b5e8 <Computer::rdmsr(unsigned int)>
c000c9a5:	53                   	push   ebx
c000c9a6:	83 e0 02             	and    eax,0x2
c000c9a9:	50                   	push   eax
c000c9aa:	68 e1 00 00 00       	push   0xe1
c000c9af:	ff 35 a8 b9 03 c0    	push   DWORD PTR ds:0xc003b9a8
c000c9b5:	e8 5a ec ff ff       	call   c000b614 <Computer::wrmsr(unsigned int, unsigned long long)>
c000c9ba:	83 c4 20             	add    esp,0x20
c000c9bd:	e8 8e 37 ff ff       	call   c0000150 <doTPAUSE>
c000c9c2:	e8 19 20 01 00       	call   c001e9e0 <idleCommon()>
c000c9c7:	eb f4                	jmp    c000c9bd <idleFunction(void*)+0x4c>
c000c9c9:	fb                   	sti    
c000c9ca:	f4                   	hlt    
c000c9cb:	e8 10 20 01 00       	call   c001e9e0 <idleCommon()>
c000c9d0:	eb f7                	jmp    c000c9c9 <idleFunction(void*)+0x58>

c000c9d2 <IDTEntry::IDTEntry(bool)>:
c000c9d2:	83 ec 04             	sub    esp,0x4
c000c9d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c9d9:	88 04 24             	mov    BYTE PTR [esp],al
c000c9dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9e0:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000c9e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9ea:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000c9ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c9f2:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000c9f5:	83 e2 f0             	and    edx,0xfffffff0
c000c9f8:	83 ca 0e             	or     edx,0xe
c000c9fb:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000c9fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca02:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ca05:	83 e2 ef             	and    edx,0xffffffef
c000ca08:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ca0b:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ca0f:	74 04                	je     c000ca15 <IDTEntry::IDTEntry(bool)+0x43>
c000ca11:	b2 03                	mov    dl,0x3
c000ca13:	eb 02                	jmp    c000ca17 <IDTEntry::IDTEntry(bool)+0x45>
c000ca15:	b2 00                	mov    dl,0x0
c000ca17:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca1b:	83 e2 03             	and    edx,0x3
c000ca1e:	88 d1                	mov    cl,dl
c000ca20:	c1 e1 05             	shl    ecx,0x5
c000ca23:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ca26:	83 e2 9f             	and    edx,0xffffff9f
c000ca29:	09 ca                	or     edx,ecx
c000ca2b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ca2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca32:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ca35:	83 ca 80             	or     edx,0xffffff80
c000ca38:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ca3b:	90                   	nop
c000ca3c:	83 c4 04             	add    esp,0x4
c000ca3f:	c3                   	ret    

c000ca40 <IDTEntry::setOffset(unsigned int)>:
c000ca40:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ca44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca48:	66 89 02             	mov    WORD PTR [edx],ax
c000ca4b:	c1 e8 10             	shr    eax,0x10
c000ca4e:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ca52:	c3                   	ret    
c000ca53:	90                   	nop

c000ca54 <IDT::IDT()>:
c000ca54:	90                   	nop
c000ca55:	c3                   	ret    

c000ca56 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ca56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ca5a:	83 c0 30             	add    eax,0x30
c000ca5d:	c3                   	ret    

c000ca5e <IDT::addEntry(IDTEntry, int)>:
c000ca5e:	53                   	push   ebx
c000ca5f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca63:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ca67:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ca6b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ca6f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ca72:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ca76:	5b                   	pop    ebx
c000ca77:	c3                   	ret    

c000ca78 <IDT::addEntry(int, void (*)(), bool)>:
c000ca78:	53                   	push   ebx
c000ca79:	83 ec 10             	sub    esp,0x10
c000ca7c:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ca81:	50                   	push   eax
c000ca82:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ca86:	53                   	push   ebx
c000ca87:	e8 46 ff ff ff       	call   c000c9d2 <IDTEntry::IDTEntry(bool)>
c000ca8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ca90:	53                   	push   ebx
c000ca91:	e8 aa ff ff ff       	call   c000ca40 <IDTEntry::setOffset(unsigned int)>
c000ca96:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ca9a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ca9e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000caa2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000caa6:	e8 b3 ff ff ff       	call   c000ca5e <IDT::addEntry(IDTEntry, int)>
c000caab:	83 c4 30             	add    esp,0x30
c000caae:	5b                   	pop    ebx
c000caaf:	c3                   	ret    

c000cab0 <IDT::flush()>:
c000cab0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cab4:	66 c7 05 4c bb 03 c0 ff 07 	mov    WORD PTR ds:0xc003bb4c,0x7ff
c000cabd:	a3 4e bb 03 c0       	mov    ds:0xc003bb4e,eax
c000cac2:	0f 01 1d 4c bb 03 c0 	lidtd  ds:0xc003bb4c
c000cac9:	c3                   	ret    

c000caca <IDT::setup()>:
c000caca:	57                   	push   edi
c000cacb:	56                   	push   esi
c000cacc:	53                   	push   ebx
c000cacd:	83 ec 10             	sub    esp,0x10
c000cad0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000cad4:	6a 00                	push   0x0
c000cad6:	68 80 03 00 c0       	push   0xc0000380
c000cadb:	6a 00                	push   0x0
c000cadd:	53                   	push   ebx
c000cade:	e8 95 ff ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cae3:	6a 00                	push   0x0
c000cae5:	68 90 03 00 c0       	push   0xc0000390
c000caea:	6a 01                	push   0x1
c000caec:	53                   	push   ebx
c000caed:	e8 86 ff ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000caf2:	83 c4 20             	add    esp,0x20
c000caf5:	6a 00                	push   0x0
c000caf7:	68 9a 03 00 c0       	push   0xc000039a
c000cafc:	6a 02                	push   0x2
c000cafe:	53                   	push   ebx
c000caff:	e8 74 ff ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cb04:	6a 00                	push   0x0
c000cb06:	68 a4 03 00 c0       	push   0xc00003a4
c000cb0b:	6a 03                	push   0x3
c000cb0d:	53                   	push   ebx
c000cb0e:	e8 65 ff ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cb13:	83 c4 20             	add    esp,0x20
c000cb16:	6a 00                	push   0x0
c000cb18:	68 ae 03 00 c0       	push   0xc00003ae
c000cb1d:	6a 04                	push   0x4
c000cb1f:	53                   	push   ebx
c000cb20:	e8 53 ff ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cb25:	6a 00                	push   0x0
c000cb27:	68 b8 03 00 c0       	push   0xc00003b8
c000cb2c:	6a 05                	push   0x5
c000cb2e:	53                   	push   ebx
c000cb2f:	e8 44 ff ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cb34:	83 c4 20             	add    esp,0x20
c000cb37:	6a 00                	push   0x0
c000cb39:	68 c2 03 00 c0       	push   0xc00003c2
c000cb3e:	6a 06                	push   0x6
c000cb40:	53                   	push   ebx
c000cb41:	e8 32 ff ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cb46:	6a 00                	push   0x0
c000cb48:	68 cc 03 00 c0       	push   0xc00003cc
c000cb4d:	6a 07                	push   0x7
c000cb4f:	53                   	push   ebx
c000cb50:	e8 23 ff ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cb55:	83 c4 20             	add    esp,0x20
c000cb58:	6a 00                	push   0x0
c000cb5a:	68 d6 03 00 c0       	push   0xc00003d6
c000cb5f:	6a 08                	push   0x8
c000cb61:	53                   	push   ebx
c000cb62:	e8 11 ff ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cb67:	6a 00                	push   0x0
c000cb69:	68 de 03 00 c0       	push   0xc00003de
c000cb6e:	6a 09                	push   0x9
c000cb70:	53                   	push   ebx
c000cb71:	e8 02 ff ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cb76:	83 c4 20             	add    esp,0x20
c000cb79:	6a 00                	push   0x0
c000cb7b:	68 e8 03 00 c0       	push   0xc00003e8
c000cb80:	6a 0a                	push   0xa
c000cb82:	53                   	push   ebx
c000cb83:	e8 f0 fe ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cb88:	6a 00                	push   0x0
c000cb8a:	68 f0 03 00 c0       	push   0xc00003f0
c000cb8f:	6a 0b                	push   0xb
c000cb91:	53                   	push   ebx
c000cb92:	e8 e1 fe ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cb97:	83 c4 20             	add    esp,0x20
c000cb9a:	6a 00                	push   0x0
c000cb9c:	68 f8 03 00 c0       	push   0xc00003f8
c000cba1:	6a 0c                	push   0xc
c000cba3:	53                   	push   ebx
c000cba4:	e8 cf fe ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cba9:	6a 00                	push   0x0
c000cbab:	68 00 04 00 c0       	push   0xc0000400
c000cbb0:	6a 0d                	push   0xd
c000cbb2:	53                   	push   ebx
c000cbb3:	e8 c0 fe ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cbb8:	83 c4 20             	add    esp,0x20
c000cbbb:	6a 00                	push   0x0
c000cbbd:	68 08 04 00 c0       	push   0xc0000408
c000cbc2:	6a 0e                	push   0xe
c000cbc4:	53                   	push   ebx
c000cbc5:	e8 ae fe ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cbca:	6a 00                	push   0x0
c000cbcc:	68 10 04 00 c0       	push   0xc0000410
c000cbd1:	6a 0f                	push   0xf
c000cbd3:	53                   	push   ebx
c000cbd4:	e8 9f fe ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cbd9:	83 c4 20             	add    esp,0x20
c000cbdc:	6a 00                	push   0x0
c000cbde:	68 1a 04 00 c0       	push   0xc000041a
c000cbe3:	6a 10                	push   0x10
c000cbe5:	53                   	push   ebx
c000cbe6:	e8 8d fe ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cbeb:	6a 00                	push   0x0
c000cbed:	68 24 04 00 c0       	push   0xc0000424
c000cbf2:	6a 11                	push   0x11
c000cbf4:	53                   	push   ebx
c000cbf5:	e8 7e fe ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cbfa:	83 c4 20             	add    esp,0x20
c000cbfd:	6a 00                	push   0x0
c000cbff:	68 2e 04 00 c0       	push   0xc000042e
c000cc04:	6a 12                	push   0x12
c000cc06:	53                   	push   ebx
c000cc07:	e8 6c fe ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cc0c:	6a 01                	push   0x1
c000cc0e:	68 38 04 00 c0       	push   0xc0000438
c000cc13:	6a 60                	push   0x60
c000cc15:	53                   	push   ebx
c000cc16:	e8 5d fe ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cc1b:	83 c4 20             	add    esp,0x20
c000cc1e:	6a 00                	push   0x0
c000cc20:	68 42 04 00 c0       	push   0xc0000442
c000cc25:	6a 20                	push   0x20
c000cc27:	53                   	push   ebx
c000cc28:	e8 4b fe ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cc2d:	6a 00                	push   0x0
c000cc2f:	68 4c 04 00 c0       	push   0xc000044c
c000cc34:	6a 21                	push   0x21
c000cc36:	53                   	push   ebx
c000cc37:	e8 3c fe ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cc3c:	83 c4 20             	add    esp,0x20
c000cc3f:	6a 00                	push   0x0
c000cc41:	68 56 04 00 c0       	push   0xc0000456
c000cc46:	6a 22                	push   0x22
c000cc48:	53                   	push   ebx
c000cc49:	e8 2a fe ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cc4e:	6a 00                	push   0x0
c000cc50:	68 60 04 00 c0       	push   0xc0000460
c000cc55:	6a 23                	push   0x23
c000cc57:	53                   	push   ebx
c000cc58:	e8 1b fe ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cc5d:	83 c4 20             	add    esp,0x20
c000cc60:	6a 00                	push   0x0
c000cc62:	68 6a 04 00 c0       	push   0xc000046a
c000cc67:	6a 24                	push   0x24
c000cc69:	53                   	push   ebx
c000cc6a:	e8 09 fe ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cc6f:	6a 00                	push   0x0
c000cc71:	68 74 04 00 c0       	push   0xc0000474
c000cc76:	6a 25                	push   0x25
c000cc78:	53                   	push   ebx
c000cc79:	e8 fa fd ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cc7e:	83 c4 20             	add    esp,0x20
c000cc81:	6a 00                	push   0x0
c000cc83:	68 7e 04 00 c0       	push   0xc000047e
c000cc88:	6a 26                	push   0x26
c000cc8a:	53                   	push   ebx
c000cc8b:	e8 e8 fd ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cc90:	6a 00                	push   0x0
c000cc92:	68 88 04 00 c0       	push   0xc0000488
c000cc97:	6a 27                	push   0x27
c000cc99:	53                   	push   ebx
c000cc9a:	e8 d9 fd ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cc9f:	83 c4 20             	add    esp,0x20
c000cca2:	6a 00                	push   0x0
c000cca4:	68 92 04 00 c0       	push   0xc0000492
c000cca9:	6a 28                	push   0x28
c000ccab:	53                   	push   ebx
c000ccac:	e8 c7 fd ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000ccb1:	6a 00                	push   0x0
c000ccb3:	68 9c 04 00 c0       	push   0xc000049c
c000ccb8:	6a 29                	push   0x29
c000ccba:	53                   	push   ebx
c000ccbb:	e8 b8 fd ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000ccc0:	83 c4 20             	add    esp,0x20
c000ccc3:	6a 00                	push   0x0
c000ccc5:	68 a6 04 00 c0       	push   0xc00004a6
c000ccca:	6a 2a                	push   0x2a
c000cccc:	53                   	push   ebx
c000cccd:	e8 a6 fd ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000ccd2:	6a 00                	push   0x0
c000ccd4:	68 b0 04 00 c0       	push   0xc00004b0
c000ccd9:	6a 2b                	push   0x2b
c000ccdb:	53                   	push   ebx
c000ccdc:	e8 97 fd ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cce1:	83 c4 20             	add    esp,0x20
c000cce4:	6a 00                	push   0x0
c000cce6:	68 ba 04 00 c0       	push   0xc00004ba
c000cceb:	6a 2c                	push   0x2c
c000cced:	53                   	push   ebx
c000ccee:	e8 85 fd ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000ccf3:	6a 00                	push   0x0
c000ccf5:	68 c4 04 00 c0       	push   0xc00004c4
c000ccfa:	6a 2d                	push   0x2d
c000ccfc:	53                   	push   ebx
c000ccfd:	e8 76 fd ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cd02:	83 c4 20             	add    esp,0x20
c000cd05:	6a 00                	push   0x0
c000cd07:	68 ce 04 00 c0       	push   0xc00004ce
c000cd0c:	6a 2e                	push   0x2e
c000cd0e:	53                   	push   ebx
c000cd0f:	e8 64 fd ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cd14:	6a 00                	push   0x0
c000cd16:	68 d8 04 00 c0       	push   0xc00004d8
c000cd1b:	6a 2f                	push   0x2f
c000cd1d:	53                   	push   ebx
c000cd1e:	e8 55 fd ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cd23:	83 c4 20             	add    esp,0x20
c000cd26:	6a 00                	push   0x0
c000cd28:	68 e2 04 00 c0       	push   0xc00004e2
c000cd2d:	6a 30                	push   0x30
c000cd2f:	53                   	push   ebx
c000cd30:	e8 43 fd ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cd35:	6a 00                	push   0x0
c000cd37:	68 ec 04 00 c0       	push   0xc00004ec
c000cd3c:	6a 31                	push   0x31
c000cd3e:	53                   	push   ebx
c000cd3f:	e8 34 fd ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cd44:	83 c4 20             	add    esp,0x20
c000cd47:	6a 00                	push   0x0
c000cd49:	68 f6 04 00 c0       	push   0xc00004f6
c000cd4e:	6a 32                	push   0x32
c000cd50:	53                   	push   ebx
c000cd51:	e8 22 fd ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cd56:	6a 00                	push   0x0
c000cd58:	68 00 05 00 c0       	push   0xc0000500
c000cd5d:	6a 33                	push   0x33
c000cd5f:	53                   	push   ebx
c000cd60:	e8 13 fd ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cd65:	83 c4 20             	add    esp,0x20
c000cd68:	6a 00                	push   0x0
c000cd6a:	68 0a 05 00 c0       	push   0xc000050a
c000cd6f:	6a 34                	push   0x34
c000cd71:	53                   	push   ebx
c000cd72:	e8 01 fd ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cd77:	6a 00                	push   0x0
c000cd79:	68 14 05 00 c0       	push   0xc0000514
c000cd7e:	6a 35                	push   0x35
c000cd80:	53                   	push   ebx
c000cd81:	e8 f2 fc ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cd86:	83 c4 20             	add    esp,0x20
c000cd89:	6a 00                	push   0x0
c000cd8b:	68 1e 05 00 c0       	push   0xc000051e
c000cd90:	6a 36                	push   0x36
c000cd92:	53                   	push   ebx
c000cd93:	e8 e0 fc ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cd98:	6a 00                	push   0x0
c000cd9a:	68 28 05 00 c0       	push   0xc0000528
c000cd9f:	6a 37                	push   0x37
c000cda1:	53                   	push   ebx
c000cda2:	e8 d1 fc ff ff       	call   c000ca78 <IDT::addEntry(int, void (*)(), bool)>
c000cda7:	83 c4 20             	add    esp,0x20
c000cdaa:	e8 02 47 00 00       	call   c00114b1 <Virt::getAKernelVAS()>
c000cdaf:	52                   	push   edx
c000cdb0:	6a 03                	push   0x3
c000cdb2:	6a 02                	push   0x2
c000cdb4:	50                   	push   eax
c000cdb5:	e8 9e 4c 00 00       	call   c0011a58 <VAS::allocatePages(int, int)>
c000cdba:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000cdc1:	89 c6                	mov    esi,eax
c000cdc3:	e8 ea 56 00 00       	call   c00124b2 <operator new(unsigned long)>
c000cdc8:	81 c6 00 20 00 00    	add    esi,0x2000
c000cdce:	89 04 24             	mov    DWORD PTR [esp],eax
c000cdd1:	89 c7                	mov    edi,eax
c000cdd3:	e8 30 40 00 00       	call   c0010e08 <TSS::TSS()>
c000cdd8:	83 c4 0c             	add    esp,0xc
c000cddb:	68 d6 03 00 c0       	push   0xc00003d6
c000cde0:	56                   	push   esi
c000cde1:	57                   	push   edi
c000cde2:	e8 61 40 00 00       	call   c0010e48 <TSS::setup(unsigned long, unsigned long)>
c000cde7:	59                   	pop    ecx
c000cde8:	89 c6                	mov    esi,eax
c000cdea:	5f                   	pop    edi
c000cdeb:	6a 00                	push   0x0
c000cded:	8d 44 24 14          	lea    eax,[esp+0x14]
c000cdf1:	50                   	push   eax
c000cdf2:	e8 db fb ff ff       	call   c000c9d2 <IDTEntry::IDTEntry(bool)>
c000cdf7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cdfb:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ce00:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ce07:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ce0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ce11:	80 ce 05             	or     dh,0x5
c000ce14:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ce17:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce1b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ce1f:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ce22:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ce25:	e8 86 fc ff ff       	call   c000cab0 <IDT::flush()>
c000ce2a:	83 c4 20             	add    esp,0x20
c000ce2d:	5b                   	pop    ebx
c000ce2e:	5e                   	pop    esi
c000ce2f:	5f                   	pop    edi
c000ce30:	c3                   	ret    

c000ce31 <stringifyxWithBase(unsigned int, char*, int)>:
c000ce31:	57                   	push   edi
c000ce32:	b9 3f 00 00 00       	mov    ecx,0x3f
c000ce37:	56                   	push   esi
c000ce38:	be e0 8a 03 c0       	mov    esi,0xc0038ae0
c000ce3d:	53                   	push   ebx
c000ce3e:	83 ec 40             	sub    esp,0x40
c000ce41:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000ce45:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000ce49:	fc                   	cld    
c000ce4a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ce4c:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000ce50:	83 f9 3e             	cmp    ecx,0x3e
c000ce53:	7e 05                	jle    c000ce5a <stringifyxWithBase(unsigned int, char*, int)+0x29>
c000ce55:	b9 3e 00 00 00       	mov    ecx,0x3e
c000ce5a:	89 df                	mov    edi,ebx
c000ce5c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000ce60:	eb 02                	jmp    c000ce64 <stringifyxWithBase(unsigned int, char*, int)+0x33>
c000ce62:	89 c7                	mov    edi,eax
c000ce64:	31 d2                	xor    edx,edx
c000ce66:	46                   	inc    esi
c000ce67:	89 f8                	mov    eax,edi
c000ce69:	f7 f1                	div    ecx
c000ce6b:	39 cf                	cmp    edi,ecx
c000ce6d:	73 f3                	jae    c000ce62 <stringifyxWithBase(unsigned int, char*, int)+0x31>
c000ce6f:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ce72:	eb 02                	jmp    c000ce76 <stringifyxWithBase(unsigned int, char*, int)+0x45>
c000ce74:	89 c3                	mov    ebx,eax
c000ce76:	31 d2                	xor    edx,edx
c000ce78:	4e                   	dec    esi
c000ce79:	89 d8                	mov    eax,ebx
c000ce7b:	f7 f1                	div    ecx
c000ce7d:	39 cb                	cmp    ebx,ecx
c000ce7f:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000ce83:	88 16                	mov    BYTE PTR [esi],dl
c000ce85:	73 ed                	jae    c000ce74 <stringifyxWithBase(unsigned int, char*, int)+0x43>
c000ce87:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ce8b:	83 c4 40             	add    esp,0x40
c000ce8e:	5b                   	pop    ebx
c000ce8f:	5e                   	pop    esi
c000ce90:	5f                   	pop    edi
c000ce91:	c3                   	ret    

c000ce92 <logc(char)>:
c000ce92:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ce96:	ba fd 03 00 00       	mov    edx,0x3fd
c000ce9b:	ec                   	in     al,dx
c000ce9c:	a8 20                	test   al,0x20
c000ce9e:	74 fb                	je     c000ce9b <logc(char)+0x9>
c000cea0:	ba f8 03 00 00       	mov    edx,0x3f8
c000cea5:	88 c8                	mov    al,cl
c000cea7:	ee                   	out    dx,al
c000cea8:	c3                   	ret    

c000cea9 <logs(char*)>:
c000cea9:	53                   	push   ebx
c000ceaa:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ceae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000ceb1:	84 c0                	test   al,al
c000ceb3:	74 0f                	je     c000cec4 <logs(char*)+0x1b>
c000ceb5:	50                   	push   eax
c000ceb6:	43                   	inc    ebx
c000ceb7:	e8 d6 ff ff ff       	call   c000ce92 <logc(char)>
c000cebc:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000cebf:	5a                   	pop    edx
c000cec0:	84 c0                	test   al,al
c000cec2:	75 f1                	jne    c000ceb5 <logs(char*)+0xc>
c000cec4:	5b                   	pop    ebx
c000cec5:	c3                   	ret    

c000cec6 <logWriteInt(unsigned int)>:
c000cec6:	83 ec 10             	sub    esp,0x10
c000cec9:	6a 0a                	push   0xa
c000cecb:	8d 44 24 08          	lea    eax,[esp+0x8]
c000cecf:	50                   	push   eax
c000ced0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ced4:	e8 58 ff ff ff       	call   c000ce31 <stringifyxWithBase(unsigned int, char*, int)>
c000ced9:	50                   	push   eax
c000ceda:	e8 ca ff ff ff       	call   c000cea9 <logs(char*)>
c000cedf:	83 c4 20             	add    esp,0x20
c000cee2:	c3                   	ret    

c000cee3 <logWriteIntBase(unsigned int, int)>:
c000cee3:	83 ec 10             	sub    esp,0x10
c000cee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ceea:	8d 44 24 08          	lea    eax,[esp+0x8]
c000ceee:	50                   	push   eax
c000ceef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cef3:	e8 39 ff ff ff       	call   c000ce31 <stringifyxWithBase(unsigned int, char*, int)>
c000cef8:	50                   	push   eax
c000cef9:	e8 ab ff ff ff       	call   c000cea9 <logs(char*)>
c000cefe:	83 c4 20             	add    esp,0x20
c000cf01:	c3                   	ret    

c000cf02 <kprintf(char const*, ...)>:
c000cf02:	55                   	push   ebp
c000cf03:	57                   	push   edi
c000cf04:	56                   	push   esi
c000cf05:	53                   	push   ebx
c000cf06:	83 ec 0c             	sub    esp,0xc
c000cf09:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cf0d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cf11:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cf15:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000cf18:	84 c0                	test   al,al
c000cf1a:	74 4a                	je     c000cf66 <kprintf(char const*, ...)+0x64>
c000cf1c:	31 db                	xor    ebx,ebx
c000cf1e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000cf21:	3c 25                	cmp    al,0x25
c000cf23:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000cf26:	0f 85 e4 00 00 00    	jne    c000d010 <kprintf(char const*, ...)+0x10e>
c000cf2c:	83 c3 02             	add    ebx,0x2
c000cf2f:	8a 07                	mov    al,BYTE PTR [edi]
c000cf31:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000cf34:	83 e8 25             	sub    eax,0x25
c000cf37:	3c 53                	cmp    al,0x53
c000cf39:	0f 87 ba 00 00 00    	ja     c000cff9 <kprintf(char const*, ...)+0xf7>
c000cf3f:	0f b6 c0             	movzx  eax,al
c000cf42:	ff 24 85 34 8c 03 c0 	jmp    DWORD PTR [eax*4-0x3ffc73cc]
c000cf49:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cf4d:	89 c8                	mov    eax,ecx
c000cf4f:	83 c1 04             	add    ecx,0x4
c000cf52:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cf56:	ff 30                	push   DWORD PTR [eax]
c000cf58:	e8 4c ff ff ff       	call   c000cea9 <logs(char*)>
c000cf5d:	58                   	pop    eax
c000cf5e:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000cf62:	84 c0                	test   al,al
c000cf64:	75 b8                	jne    c000cf1e <kprintf(char const*, ...)+0x1c>
c000cf66:	83 c4 0c             	add    esp,0xc
c000cf69:	5b                   	pop    ebx
c000cf6a:	5e                   	pop    esi
c000cf6b:	5f                   	pop    edi
c000cf6c:	5d                   	pop    ebp
c000cf6d:	c3                   	ret    
c000cf6e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cf72:	89 d0                	mov    eax,edx
c000cf74:	83 c2 04             	add    edx,0x4
c000cf77:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cf7b:	ff 30                	push   DWORD PTR [eax]
c000cf7d:	e8 44 ff ff ff       	call   c000cec6 <logWriteInt(unsigned int)>
c000cf82:	58                   	pop    eax
c000cf83:	eb d9                	jmp    c000cf5e <kprintf(char const*, ...)+0x5c>
c000cf85:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cf89:	89 d0                	mov    eax,edx
c000cf8b:	83 c2 04             	add    edx,0x4
c000cf8e:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000cf91:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cf95:	50                   	push   eax
c000cf96:	e8 f7 fe ff ff       	call   c000ce92 <logc(char)>
c000cf9b:	58                   	pop    eax
c000cf9c:	eb c0                	jmp    c000cf5e <kprintf(char const*, ...)+0x5c>
c000cf9e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cfa2:	89 c8                	mov    eax,ecx
c000cfa4:	83 c1 04             	add    ecx,0x4
c000cfa7:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cfab:	ff 30                	push   DWORD PTR [eax]
c000cfad:	e8 14 ff ff ff       	call   c000cec6 <logWriteInt(unsigned int)>
c000cfb2:	5f                   	pop    edi
c000cfb3:	eb a9                	jmp    c000cf5e <kprintf(char const*, ...)+0x5c>
c000cfb5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000cfb9:	89 c8                	mov    eax,ecx
c000cfbb:	83 c1 04             	add    ecx,0x4
c000cfbe:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000cfc2:	6a 10                	push   0x10
c000cfc4:	ff 30                	push   DWORD PTR [eax]
c000cfc6:	e8 18 ff ff ff       	call   c000cee3 <logWriteIntBase(unsigned int, int)>
c000cfcb:	59                   	pop    ecx
c000cfcc:	5f                   	pop    edi
c000cfcd:	eb 8f                	jmp    c000cf5e <kprintf(char const*, ...)+0x5c>
c000cfcf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cfd3:	89 d0                	mov    eax,edx
c000cfd5:	83 c2 08             	add    edx,0x8
c000cfd8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cfdc:	6a 10                	push   0x10
c000cfde:	ff 30                	push   DWORD PTR [eax]
c000cfe0:	e8 fe fe ff ff       	call   c000cee3 <logWriteIntBase(unsigned int, int)>
c000cfe5:	58                   	pop    eax
c000cfe6:	5a                   	pop    edx
c000cfe7:	e9 72 ff ff ff       	jmp    c000cf5e <kprintf(char const*, ...)+0x5c>
c000cfec:	6a 25                	push   0x25
c000cfee:	e8 9f fe ff ff       	call   c000ce92 <logc(char)>
c000cff3:	58                   	pop    eax
c000cff4:	e9 65 ff ff ff       	jmp    c000cf5e <kprintf(char const*, ...)+0x5c>
c000cff9:	6a 25                	push   0x25
c000cffb:	e8 92 fe ff ff       	call   c000ce92 <logc(char)>
c000d000:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000d003:	50                   	push   eax
c000d004:	e8 89 fe ff ff       	call   c000ce92 <logc(char)>
c000d009:	5a                   	pop    edx
c000d00a:	59                   	pop    ecx
c000d00b:	e9 4e ff ff ff       	jmp    c000cf5e <kprintf(char const*, ...)+0x5c>
c000d010:	50                   	push   eax
c000d011:	89 eb                	mov    ebx,ebp
c000d013:	e8 7a fe ff ff       	call   c000ce92 <logc(char)>
c000d018:	89 fd                	mov    ebp,edi
c000d01a:	58                   	pop    eax
c000d01b:	e9 3e ff ff ff       	jmp    c000cf5e <kprintf(char const*, ...)+0x5c>

c000d020 <panic(char const*)>:
c000d020:	55                   	push   ebp
c000d021:	89 e5                	mov    ebp,esp
c000d023:	53                   	push   ebx
c000d024:	50                   	push   eax
c000d025:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000d028:	fa                   	cli    
c000d029:	c6 05 52 bb 03 c0 01 	mov    BYTE PTR ds:0xc003bb52,0x1
c000d030:	53                   	push   ebx
c000d031:	c6 05 e0 ad 03 c0 00 	mov    BYTE PTR ds:0xc003ade0,0x0
c000d038:	68 84 8d 03 c0       	push   0xc0038d84
c000d03d:	e8 c0 fe ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c000d042:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d047:	52                   	push   edx
c000d048:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d04e:	e8 36 36 00 00       	call   c0010689 <setActiveTerminal(VgaText*)>
c000d053:	83 c4 0c             	add    esp,0xc
c000d056:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d05b:	6a 01                	push   0x1
c000d05d:	6a 0f                	push   0xf
c000d05f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d065:	e8 5e 30 00 00       	call   c00100c8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d06a:	59                   	pop    ecx
c000d06b:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d070:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d076:	e8 af 38 00 00       	call   c001092a <VgaText::clearScreen()>
c000d07b:	58                   	pop    eax
c000d07c:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d081:	5a                   	pop    edx
c000d082:	68 9d 8d 03 c0       	push   0xc0038d9d
c000d087:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d08d:	e8 16 3a 00 00       	call   c0010aa8 <VgaText::puts(char const*)>
c000d092:	59                   	pop    ecx
c000d093:	58                   	pop    eax
c000d094:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d099:	68 20 8b 03 c0       	push   0xc0038b20
c000d09e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d0a4:	e8 ff 39 00 00       	call   c0010aa8 <VgaText::puts(char const*)>
c000d0a9:	58                   	pop    eax
c000d0aa:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d0af:	5a                   	pop    edx
c000d0b0:	68 b9 8d 03 c0       	push   0xc0038db9
c000d0b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d0bb:	e8 e8 39 00 00       	call   c0010aa8 <VgaText::puts(char const*)>
c000d0c0:	59                   	pop    ecx
c000d0c1:	58                   	pop    eax
c000d0c2:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d0c7:	53                   	push   ebx
c000d0c8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d0ce:	e8 d5 39 00 00       	call   c0010aa8 <VgaText::puts(char const*)>
c000d0d3:	58                   	pop    eax
c000d0d4:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d0d9:	5a                   	pop    edx
c000d0da:	68 d9 8d 03 c0       	push   0xc0038dd9
c000d0df:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d0e5:	e8 be 39 00 00       	call   c0010aa8 <VgaText::puts(char const*)>
c000d0ea:	59                   	pop    ecx
c000d0eb:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d0f0:	5b                   	pop    ebx
c000d0f1:	68 5c 8b 03 c0       	push   0xc0038b5c
c000d0f6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d0fc:	e8 a7 39 00 00       	call   c0010aa8 <VgaText::puts(char const*)>
c000d101:	58                   	pop    eax
c000d102:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d107:	5a                   	pop    edx
c000d108:	68 b9 8d 03 c0       	push   0xc0038db9
c000d10d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d113:	e8 90 39 00 00       	call   c0010aa8 <VgaText::puts(char const*)>
c000d118:	59                   	pop    ecx
c000d119:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d11e:	5b                   	pop    ebx
c000d11f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000d122:	83 c0 0c             	add    eax,0xc
c000d125:	50                   	push   eax
c000d126:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d12b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d131:	e8 72 39 00 00       	call   c0010aa8 <VgaText::puts(char const*)>
c000d136:	58                   	pop    eax
c000d137:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d13c:	5a                   	pop    edx
c000d13d:	68 d8 8d 03 c0       	push   0xc0038dd8
c000d142:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d148:	e8 5b 39 00 00       	call   c0010aa8 <VgaText::puts(char const*)>
c000d14d:	59                   	pop    ecx
c000d14e:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d153:	5b                   	pop    ebx
c000d154:	68 88 8b 03 c0       	push   0xc0038b88
c000d159:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d15f:	e8 44 39 00 00       	call   c0010aa8 <VgaText::puts(char const*)>
c000d164:	58                   	pop    eax
c000d165:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d16a:	5a                   	pop    edx
c000d16b:	68 c8 8b 03 c0       	push   0xc0038bc8
c000d170:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d176:	e8 2d 39 00 00       	call   c0010aa8 <VgaText::puts(char const*)>
c000d17b:	59                   	pop    ecx
c000d17c:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d181:	5b                   	pop    ebx
c000d182:	68 c4 8d 03 c0       	push   0xc0038dc4
c000d187:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d18d:	e8 16 39 00 00       	call   c0010aa8 <VgaText::puts(char const*)>
c000d192:	58                   	pop    eax
c000d193:	5a                   	pop    edx
c000d194:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d197:	68 dc 8d 03 c0       	push   0xc0038ddc
c000d19c:	e8 61 fd ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c000d1a1:	59                   	pop    ecx
c000d1a2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d1a5:	5b                   	pop    ebx
c000d1a6:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d1a9:	68 e5 8d 03 c0       	push   0xc0038de5
c000d1ae:	e8 4f fd ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c000d1b3:	5a                   	pop    edx
c000d1b4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d1b7:	59                   	pop    ecx
c000d1b8:	8b 00                	mov    eax,DWORD PTR [eax]
c000d1ba:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d1bd:	68 79 9c 03 c0       	push   0xc0039c79
c000d1c2:	e8 3b fd ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c000d1c7:	5b                   	pop    ebx
c000d1c8:	58                   	pop    eax
c000d1c9:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d1ce:	68 0c 8c 03 c0       	push   0xc0038c0c
c000d1d3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d1d9:	e8 ca 38 00 00       	call   c0010aa8 <VgaText::puts(char const*)>
c000d1de:	58                   	pop    eax
c000d1df:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d1e4:	5a                   	pop    edx
c000d1e5:	68 ee 8d 03 c0       	push   0xc0038dee
c000d1ea:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d1f0:	e8 b3 38 00 00       	call   c0010aa8 <VgaText::puts(char const*)>
c000d1f5:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d1fa:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000d200:	e8 f0 17 01 00       	call   c001e9f5 <CPU::readCR0()>
c000d205:	59                   	pop    ecx
c000d206:	5a                   	pop    edx
c000d207:	50                   	push   eax
c000d208:	53                   	push   ebx
c000d209:	e8 c0 38 00 00       	call   c0010ace <VgaText::putx(unsigned int)>
c000d20e:	59                   	pop    ecx
c000d20f:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d214:	5b                   	pop    ebx
c000d215:	68 f8 8d 03 c0       	push   0xc0038df8
c000d21a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d220:	e8 83 38 00 00       	call   c0010aa8 <VgaText::puts(char const*)>
c000d225:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d22a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000d230:	e8 d2 17 01 00       	call   c001ea07 <CPU::readCR2()>
c000d235:	5a                   	pop    edx
c000d236:	59                   	pop    ecx
c000d237:	50                   	push   eax
c000d238:	53                   	push   ebx
c000d239:	e8 90 38 00 00       	call   c0010ace <VgaText::putx(unsigned int)>
c000d23e:	5b                   	pop    ebx
c000d23f:	58                   	pop    eax
c000d240:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d245:	68 02 8e 03 c0       	push   0xc0038e02
c000d24a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d250:	e8 53 38 00 00       	call   c0010aa8 <VgaText::puts(char const*)>
c000d255:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d25a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000d260:	e8 b4 17 01 00       	call   c001ea19 <CPU::readCR3()>
c000d265:	5a                   	pop    edx
c000d266:	59                   	pop    ecx
c000d267:	50                   	push   eax
c000d268:	53                   	push   ebx
c000d269:	e8 60 38 00 00       	call   c0010ace <VgaText::putx(unsigned int)>
c000d26e:	5b                   	pop    ebx
c000d26f:	58                   	pop    eax
c000d270:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d275:	68 15 8e 03 c0       	push   0xc0038e15
c000d27a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d280:	e8 23 38 00 00       	call   c0010aa8 <VgaText::puts(char const*)>
c000d285:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d28a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000d290:	e8 96 17 01 00       	call   c001ea2b <CPU::readCR4()>
c000d295:	5a                   	pop    edx
c000d296:	59                   	pop    ecx
c000d297:	50                   	push   eax
c000d298:	53                   	push   ebx
c000d299:	e8 30 38 00 00       	call   c0010ace <VgaText::putx(unsigned int)>
c000d29e:	5b                   	pop    ebx
c000d29f:	58                   	pop    eax
c000d2a0:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d2a5:	68 1f 8e 03 c0       	push   0xc0038e1f
c000d2aa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d2b0:	e8 f3 37 00 00       	call   c0010aa8 <VgaText::puts(char const*)>
c000d2b5:	5a                   	pop    edx
c000d2b6:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d2bb:	59                   	pop    ecx
c000d2bc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d2c2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d2c5:	50                   	push   eax
c000d2c6:	e8 03 38 00 00       	call   c0010ace <VgaText::putx(unsigned int)>
c000d2cb:	5b                   	pop    ebx
c000d2cc:	58                   	pop    eax
c000d2cd:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d2d2:	68 36 8e 03 c0       	push   0xc0038e36
c000d2d7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d2dd:	e8 c6 37 00 00       	call   c0010aa8 <VgaText::puts(char const*)>
c000d2e2:	5a                   	pop    edx
c000d2e3:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d2e8:	59                   	pop    ecx
c000d2e9:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d2ef:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d2f2:	ff 72 04             	push   DWORD PTR [edx+0x4]
c000d2f5:	50                   	push   eax
c000d2f6:	e8 d3 37 00 00       	call   c0010ace <VgaText::putx(unsigned int)>
c000d2fb:	5b                   	pop    ebx
c000d2fc:	58                   	pop    eax
c000d2fd:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d302:	68 36 8e 03 c0       	push   0xc0038e36
c000d307:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000d30d:	e8 96 37 00 00       	call   c0010aa8 <VgaText::puts(char const*)>
c000d312:	59                   	pop    ecx
c000d313:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c000d318:	5b                   	pop    ebx
c000d319:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000d31f:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d322:	8b 12                	mov    edx,DWORD PTR [edx]
c000d324:	ff 72 04             	push   DWORD PTR [edx+0x4]
c000d327:	50                   	push   eax
c000d328:	e8 a1 37 00 00       	call   c0010ace <VgaText::putx(unsigned int)>
c000d32d:	83 c4 10             	add    esp,0x10
c000d330:	b2 fe                	mov    dl,0xfe
c000d332:	e4 60                	in     al,0x60
c000d334:	3c 1c                	cmp    al,0x1c
c000d336:	74 04                	je     c000d33c <panic(char const*)+0x31c>
c000d338:	3c 5a                	cmp    al,0x5a
c000d33a:	75 f6                	jne    c000d332 <panic(char const*)+0x312>
c000d33c:	e4 64                	in     al,0x64
c000d33e:	a8 02                	test   al,0x2
c000d340:	75 fa                	jne    c000d33c <panic(char const*)+0x31c>
c000d342:	88 d0                	mov    al,dl
c000d344:	e6 64                	out    0x64,al
c000d346:	fa                   	cli    
c000d347:	f4                   	hlt    
c000d348:	eb e8                	jmp    c000d332 <panic(char const*)+0x312>

c000d34a <sbrk>:
c000d34a:	55                   	push   ebp
c000d34b:	57                   	push   edi
c000d34c:	56                   	push   esi
c000d34d:	53                   	push   ebx
c000d34e:	83 ec 1c             	sub    esp,0x1c
c000d351:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d355:	85 db                	test   ebx,ebx
c000d357:	74 37                	je     c000d390 <sbrk+0x46>
c000d359:	78 3f                	js     c000d39a <sbrk+0x50>
c000d35b:	e8 58 9e 00 00       	call   c00171b8 <thisCPU()>
c000d360:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000d366:	83 e0 01             	and    eax,0x1
c000d369:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000d36d:	a1 cc ad 03 c0       	mov    eax,ds:0xc003adcc
c000d372:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d376:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000d37c:	89 d8                	mov    eax,ebx
c000d37e:	78 35                	js     c000d3b5 <sbrk+0x6b>
c000d380:	c1 f8 0c             	sar    eax,0xc
c000d383:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d387:	89 c7                	mov    edi,eax
c000d389:	be 00 00 00 00       	mov    esi,0x0
c000d38e:	eb 3c                	jmp    c000d3cc <sbrk+0x82>
c000d390:	a1 cc ad 03 c0       	mov    eax,ds:0xc003adcc
c000d395:	e9 ad 00 00 00       	jmp    c000d447 <sbrk+0xfd>
c000d39a:	83 ec 08             	sub    esp,0x8
c000d39d:	53                   	push   ebx
c000d39e:	68 3c 8e 03 c0       	push   0xc0038e3c
c000d3a3:	e8 5a fb ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c000d3a8:	83 c4 10             	add    esp,0x10
c000d3ab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d3b0:	e9 92 00 00 00       	jmp    c000d447 <sbrk+0xfd>
c000d3b5:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000d3bb:	eb c3                	jmp    c000d380 <sbrk+0x36>
c000d3bd:	81 05 cc ad 03 c0 00 10 00 00 	add    DWORD PTR ds:0xc003adcc,0x1000
c000d3c7:	46                   	inc    esi
c000d3c8:	39 f7                	cmp    edi,esi
c000d3ca:	74 34                	je     c000d400 <sbrk+0xb6>
c000d3cc:	e8 e0 40 00 00       	call   c00114b1 <Virt::getAKernelVAS()>
c000d3d1:	89 c3                	mov    ebx,eax
c000d3d3:	8b 2d cc ad 03 c0    	mov    ebp,DWORD PTR ds:0xc003adcc
c000d3d9:	e8 c9 06 00 00       	call   c000daa7 <Phys::allocatePage()>
c000d3de:	68 01 04 00 00       	push   0x401
c000d3e3:	55                   	push   ebp
c000d3e4:	50                   	push   eax
c000d3e5:	53                   	push   ebx
c000d3e6:	e8 6d 45 00 00       	call   c0011958 <VAS::mapPage(unsigned long, unsigned long, int)>
c000d3eb:	83 c4 10             	add    esp,0x10
c000d3ee:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d3f3:	74 c8                	je     c000d3bd <sbrk+0x73>
c000d3f5:	8b 1d cc ad 03 c0    	mov    ebx,DWORD PTR ds:0xc003adcc
c000d3fb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000d3fe:	eb bd                	jmp    c000d3bd <sbrk+0x73>
c000d400:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000d405:	74 48                	je     c000d44f <sbrk+0x105>
c000d407:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d40b:	89 d3                	mov    ebx,edx
c000d40d:	c1 eb 0a             	shr    ebx,0xa
c000d410:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000d416:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000d41c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d420:	c1 e0 0c             	shl    eax,0xc
c000d423:	01 d0                	add    eax,edx
c000d425:	c1 e8 0a             	shr    eax,0xa
c000d428:	25 00 f0 ff ff       	and    eax,0xfffff000
c000d42d:	2d 00 00 40 00       	sub    eax,0x400000
c000d432:	39 c3                	cmp    ebx,eax
c000d434:	77 0d                	ja     c000d443 <sbrk+0xf9>
c000d436:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000d439:	81 c3 00 10 00 00    	add    ebx,0x1000
c000d43f:	39 d8                	cmp    eax,ebx
c000d441:	73 f3                	jae    c000d436 <sbrk+0xec>
c000d443:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d447:	83 c4 1c             	add    esp,0x1c
c000d44a:	5b                   	pop    ebx
c000d44b:	5e                   	pop    esi
c000d44c:	5f                   	pop    edi
c000d44d:	5d                   	pop    ebp
c000d44e:	c3                   	ret    
c000d44f:	e8 c5 15 01 00       	call   c001ea19 <CPU::readCR3()>
c000d454:	83 ec 0c             	sub    esp,0xc
c000d457:	50                   	push   eax
c000d458:	e8 e0 15 01 00       	call   c001ea3d <CPU::writeCR3(unsigned long)>
c000d45d:	83 c4 10             	add    esp,0x10
c000d460:	eb e1                	jmp    c000d443 <sbrk+0xf9>

c000d462 <mmap>:
c000d462:	83 ec 18             	sub    esp,0x18
c000d465:	68 6c 8e 03 c0       	push   0xc0038e6c
c000d46a:	e8 b1 fb ff ff       	call   c000d020 <panic(char const*)>
c000d46f:	b8 00 00 00 00       	mov    eax,0x0
c000d474:	83 c4 1c             	add    esp,0x1c
c000d477:	c3                   	ret    

c000d478 <munmap>:
c000d478:	83 ec 18             	sub    esp,0x18
c000d47b:	68 71 8e 03 c0       	push   0xc0038e71
c000d480:	e8 9b fb ff ff       	call   c000d020 <panic(char const*)>
c000d485:	b8 00 00 00 00       	mov    eax,0x0
c000d48a:	83 c4 1c             	add    esp,0x1c
c000d48d:	c3                   	ret    

c000d48e <liballoc_lock()>:
c000d48e:	83 ec 0c             	sub    esp,0xc
c000d491:	e8 0e 0f 00 00       	call   c000e3a4 <lockScheduler()>
c000d496:	b8 00 00 00 00       	mov    eax,0x0
c000d49b:	83 c4 0c             	add    esp,0xc
c000d49e:	c3                   	ret    

c000d49f <liballoc_unlock()>:
c000d49f:	83 ec 0c             	sub    esp,0xc
c000d4a2:	e8 ff 0e 00 00       	call   c000e3a6 <unlockScheduler()>
c000d4a7:	b8 00 00 00 00       	mov    eax,0x0
c000d4ac:	83 c4 0c             	add    esp,0xc
c000d4af:	c3                   	ret    

c000d4b0 <liballoc_alloc(int)>:
c000d4b0:	83 ec 0c             	sub    esp,0xc
c000d4b3:	e8 f9 3f 00 00       	call   c00114b1 <Virt::getAKernelVAS()>
c000d4b8:	83 ec 04             	sub    esp,0x4
c000d4bb:	6a 01                	push   0x1
c000d4bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d4c1:	50                   	push   eax
c000d4c2:	e8 91 45 00 00       	call   c0011a58 <VAS::allocatePages(int, int)>
c000d4c7:	83 c4 1c             	add    esp,0x1c
c000d4ca:	c3                   	ret    

c000d4cb <liballoc_free(void*, int)>:
c000d4cb:	83 ec 0c             	sub    esp,0xc
c000d4ce:	e8 de 3f 00 00       	call   c00114b1 <Virt::getAKernelVAS()>
c000d4d3:	83 ec 08             	sub    esp,0x8
c000d4d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d4da:	50                   	push   eax
c000d4db:	e8 9a 42 00 00       	call   c001177a <VAS::freeAllocatedPages(unsigned long)>
c000d4e0:	b8 00 00 00 00       	mov    eax,0x0
c000d4e5:	83 c4 1c             	add    esp,0x1c
c000d4e8:	c3                   	ret    

c000d4e9 <realloc>:
c000d4e9:	83 ec 14             	sub    esp,0x14
c000d4ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4f4:	e8 a5 41 ff ff       	call   c000169e <dlrealloc>
c000d4f9:	83 c4 1c             	add    esp,0x1c
c000d4fc:	c3                   	ret    

c000d4fd <malloc>:
c000d4fd:	83 ec 18             	sub    esp,0x18
c000d500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d504:	e8 58 3c ff ff       	call   c0001161 <dlmalloc>
c000d509:	83 c4 1c             	add    esp,0x1c
c000d50c:	c3                   	ret    

c000d50d <free>:
c000d50d:	83 ec 18             	sub    esp,0x18
c000d510:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d514:	e8 ed 38 ff ff       	call   c0000e06 <dlfree>
c000d519:	83 c4 1c             	add    esp,0x1c
c000d51c:	c3                   	ret    

c000d51d <rfree>:
c000d51d:	83 ec 18             	sub    esp,0x18
c000d520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d524:	e8 e4 ff ff ff       	call   c000d50d <free>
c000d529:	83 c4 1c             	add    esp,0x1c
c000d52c:	c3                   	ret    

c000d52d <calloc>:
c000d52d:	56                   	push   esi
c000d52e:	53                   	push   ebx
c000d52f:	83 ec 10             	sub    esp,0x10
c000d532:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d536:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000d53b:	53                   	push   ebx
c000d53c:	e8 bc ff ff ff       	call   c000d4fd <malloc>
c000d541:	89 c6                	mov    esi,eax
c000d543:	83 c4 0c             	add    esp,0xc
c000d546:	53                   	push   ebx
c000d547:	6a 00                	push   0x0
c000d549:	50                   	push   eax
c000d54a:	e8 89 31 ff ff       	call   c00006d8 <memset>
c000d54f:	89 f0                	mov    eax,esi
c000d551:	83 c4 14             	add    esp,0x14
c000d554:	5b                   	pop    ebx
c000d555:	5e                   	pop    esi
c000d556:	c3                   	ret    

c000d557 <hwTextMode_loadInData(VgaText*)>:
c000d557:	57                   	push   edi
c000d558:	56                   	push   esi
c000d559:	53                   	push   ebx
c000d55a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d55e:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000d564:	85 c0                	test   eax,eax
c000d566:	7e 30                	jle    c000d598 <hwTextMode_loadInData(VgaText*)+0x41>
c000d568:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000d56b:	31 f6                	xor    esi,esi
c000d56d:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000d570:	31 c0                	xor    eax,eax
c000d572:	c1 e1 05             	shl    ecx,0x5
c000d575:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000d57b:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000d57f:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000d583:	40                   	inc    eax
c000d584:	83 f8 50             	cmp    eax,0x50
c000d587:	75 f2                	jne    c000d57b <hwTextMode_loadInData(VgaText*)+0x24>
c000d589:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000d58f:	46                   	inc    esi
c000d590:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000d596:	7f d5                	jg     c000d56d <hwTextMode_loadInData(VgaText*)+0x16>
c000d598:	5b                   	pop    ebx
c000d599:	5e                   	pop    esi
c000d59a:	5f                   	pop    edi
c000d59b:	c3                   	ret    

c000d59c <hwTextMode_loadInTitle(VgaText*, char*)>:
c000d59c:	56                   	push   esi
c000d59d:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000d5a2:	53                   	push   ebx
c000d5a3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d5a7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d5ab:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000d5b1:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000d5b7:	c1 e0 04             	shl    eax,0x4
c000d5ba:	83 e6 0f             	and    esi,0xf
c000d5bd:	0f b6 c0             	movzx  eax,al
c000d5c0:	41                   	inc    ecx
c000d5c1:	09 f0                	or     eax,esi
c000d5c3:	83 c2 02             	add    edx,0x2
c000d5c6:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000d5ca:	c1 e0 08             	shl    eax,0x8
c000d5cd:	09 f0                	or     eax,esi
c000d5cf:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000d5d3:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000d5d9:	75 d0                	jne    c000d5ab <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000d5db:	5b                   	pop    ebx
c000d5dc:	5e                   	pop    esi
c000d5dd:	c3                   	ret    

c000d5de <hwTextMode_showCursor(VgaText*, bool)>:
c000d5de:	56                   	push   esi
c000d5df:	53                   	push   ebx
c000d5e0:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000d5e5:	74 38                	je     c000d61f <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000d5e7:	bb d4 03 00 00       	mov    ebx,0x3d4
c000d5ec:	b0 0a                	mov    al,0xa
c000d5ee:	89 da                	mov    edx,ebx
c000d5f0:	ee                   	out    dx,al
c000d5f1:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000d5f6:	89 ca                	mov    edx,ecx
c000d5f8:	ec                   	in     al,dx
c000d5f9:	b2 0f                	mov    dl,0xf
c000d5fb:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d5ff:	83 e0 c0             	and    eax,0xffffffc0
c000d602:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000d608:	09 d0                	or     eax,edx
c000d60a:	89 ca                	mov    edx,ecx
c000d60c:	ee                   	out    dx,al
c000d60d:	b0 0b                	mov    al,0xb
c000d60f:	89 da                	mov    edx,ebx
c000d611:	ee                   	out    dx,al
c000d612:	89 ca                	mov    edx,ecx
c000d614:	ec                   	in     al,dx
c000d615:	83 e0 e0             	and    eax,0xffffffe0
c000d618:	83 c8 0f             	or     eax,0xf
c000d61b:	ee                   	out    dx,al
c000d61c:	5b                   	pop    ebx
c000d61d:	5e                   	pop    esi
c000d61e:	c3                   	ret    
c000d61f:	b0 0a                	mov    al,0xa
c000d621:	ba d4 03 00 00       	mov    edx,0x3d4
c000d626:	ee                   	out    dx,al
c000d627:	b0 20                	mov    al,0x20
c000d629:	ba d5 03 00 00       	mov    edx,0x3d5
c000d62e:	ee                   	out    dx,al
c000d62f:	5b                   	pop    ebx
c000d630:	5e                   	pop    esi
c000d631:	c3                   	ret    

c000d632 <hwTextMode_update(VgaText*)>:
c000d632:	c3                   	ret    

c000d633 <hwTextMode_updateCursor(VgaText*)>:
c000d633:	56                   	push   esi
c000d634:	b9 19 00 00 00       	mov    ecx,0x19
c000d639:	53                   	push   ebx
c000d63a:	be d4 03 00 00       	mov    esi,0x3d4
c000d63f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d643:	89 f2                	mov    edx,esi
c000d645:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000d64b:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000d651:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000d654:	c1 e1 04             	shl    ecx,0x4
c000d657:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000d65d:	b0 0f                	mov    al,0xf
c000d65f:	ee                   	out    dx,al
c000d660:	bb d5 03 00 00       	mov    ebx,0x3d5
c000d665:	88 c8                	mov    al,cl
c000d667:	89 da                	mov    edx,ebx
c000d669:	ee                   	out    dx,al
c000d66a:	b0 0e                	mov    al,0xe
c000d66c:	89 f2                	mov    edx,esi
c000d66e:	ee                   	out    dx,al
c000d66f:	89 c8                	mov    eax,ecx
c000d671:	89 da                	mov    edx,ebx
c000d673:	66 c1 e8 08          	shr    ax,0x8
c000d677:	ee                   	out    dx,al
c000d678:	5b                   	pop    ebx
c000d679:	5e                   	pop    esi
c000d67a:	c3                   	ret    

c000d67b <hwTextMode_disableBlink(VgaText*, bool)>:
c000d67b:	ba da 03 00 00       	mov    edx,0x3da
c000d680:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000d685:	75 18                	jne    c000d69f <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000d687:	ec                   	in     al,dx
c000d688:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000d68d:	b0 30                	mov    al,0x30
c000d68f:	89 ca                	mov    edx,ecx
c000d691:	ee                   	out    dx,al
c000d692:	ba c1 03 00 00       	mov    edx,0x3c1
c000d697:	ec                   	in     al,dx
c000d698:	83 c8 08             	or     eax,0x8
c000d69b:	89 ca                	mov    edx,ecx
c000d69d:	ee                   	out    dx,al
c000d69e:	c3                   	ret    
c000d69f:	ec                   	in     al,dx
c000d6a0:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000d6a5:	b0 30                	mov    al,0x30
c000d6a7:	89 ca                	mov    edx,ecx
c000d6a9:	ee                   	out    dx,al
c000d6aa:	ba c1 03 00 00       	mov    edx,0x3c1
c000d6af:	ec                   	in     al,dx
c000d6b0:	83 e0 f7             	and    eax,0xfffffff7
c000d6b3:	89 ca                	mov    edx,ecx
c000d6b5:	ee                   	out    dx,al
c000d6b6:	c3                   	ret    

c000d6b7 <hwTextMode_scrollScreen(VgaText*)>:
c000d6b7:	55                   	push   ebp
c000d6b8:	bd 02 00 00 00       	mov    ebp,0x2
c000d6bd:	57                   	push   edi
c000d6be:	56                   	push   esi
c000d6bf:	53                   	push   ebx
c000d6c0:	83 ec 1c             	sub    esp,0x1c
c000d6c3:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000d6cb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d6cf:	31 c0                	xor    eax,eax
c000d6d1:	eb 0b                	jmp    c000d6de <hwTextMode_scrollScreen(VgaText*)+0x27>
c000d6d3:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000d6d9:	74 57                	je     c000d732 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000d6db:	43                   	inc    ebx
c000d6dc:	89 f0                	mov    eax,esi
c000d6de:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000d6e4:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000d6ea:	88 13                	mov    BYTE PTR [ebx],dl
c000d6ec:	8d 70 01             	lea    esi,[eax+0x1]
c000d6ef:	83 fd 18             	cmp    ebp,0x18
c000d6f2:	75 df                	jne    c000d6d3 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000d6f4:	a8 01                	test   al,0x1
c000d6f6:	75 13                	jne    c000d70b <hwTextMode_scrollScreen(VgaText*)+0x54>
c000d6f8:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000d6fb:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000d701:	75 d8                	jne    c000d6db <hwTextMode_scrollScreen(VgaText*)+0x24>
c000d703:	83 c4 1c             	add    esp,0x1c
c000d706:	5b                   	pop    ebx
c000d707:	5e                   	pop    esi
c000d708:	5f                   	pop    edi
c000d709:	5d                   	pop    ebp
c000d70a:	c3                   	ret    
c000d70b:	83 ec 08             	sub    esp,0x8
c000d70e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d712:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000d719:	50                   	push   eax
c000d71a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d71e:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000d725:	50                   	push   eax
c000d726:	e8 bd 29 00 00       	call   c00100e8 <VgaText::combineColours(unsigned char, unsigned char)>
c000d72b:	83 c4 10             	add    esp,0x10
c000d72e:	88 07                	mov    BYTE PTR [edi],al
c000d730:	eb c9                	jmp    c000d6fb <hwTextMode_scrollScreen(VgaText*)+0x44>
c000d732:	45                   	inc    ebp
c000d733:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000d73b:	eb 8e                	jmp    c000d6cb <hwTextMode_scrollScreen(VgaText*)+0x14>

c000d73d <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000d73d:	56                   	push   esi
c000d73e:	53                   	push   ebx
c000d73f:	83 ec 0c             	sub    esp,0xc
c000d742:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d746:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000d74a:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000d74f:	50                   	push   eax
c000d750:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000d755:	50                   	push   eax
c000d756:	e8 8d 29 00 00       	call   c00100e8 <VgaText::combineColours(unsigned char, unsigned char)>
c000d75b:	5a                   	pop    edx
c000d75c:	0f b6 c0             	movzx  eax,al
c000d75f:	59                   	pop    ecx
c000d760:	50                   	push   eax
c000d761:	89 f0                	mov    eax,esi
c000d763:	0f be f0             	movsx  esi,al
c000d766:	56                   	push   esi
c000d767:	e8 22 2a 00 00       	call   c001018e <VgaText::combineCharAndColour(char, unsigned char)>
c000d76c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d770:	ba 19 00 00 00       	mov    edx,0x19
c000d775:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000d77b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000d77e:	8d 14 92             	lea    edx,[edx+edx*4]
c000d781:	c1 e1 04             	shl    ecx,0x4
c000d784:	c1 e2 04             	shl    edx,0x4
c000d787:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000d78b:	01 ca                	add    edx,ecx
c000d78d:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000d795:	83 c4 14             	add    esp,0x14
c000d798:	5b                   	pop    ebx
c000d799:	5e                   	pop    esi
c000d79a:	c3                   	ret    

c000d79b <setupTextMode()>:
c000d79b:	c7 05 38 be 03 c0 7b d6 00 c0 	mov    DWORD PTR ds:0xc003be38,0xc000d67b
c000d7a5:	c7 05 24 be 03 c0 57 d5 00 c0 	mov    DWORD PTR ds:0xc003be24,0xc000d557
c000d7af:	c7 05 20 be 03 c0 9c d5 00 c0 	mov    DWORD PTR ds:0xc003be20,0xc000d59c
c000d7b9:	c7 05 2c be 03 c0 b7 d6 00 c0 	mov    DWORD PTR ds:0xc003be2c,0xc000d6b7
c000d7c3:	c7 05 34 be 03 c0 de d5 00 c0 	mov    DWORD PTR ds:0xc003be34,0xc000d5de
c000d7cd:	c7 05 28 be 03 c0 32 d6 00 c0 	mov    DWORD PTR ds:0xc003be28,0xc000d632
c000d7d7:	c7 05 30 be 03 c0 33 d6 00 c0 	mov    DWORD PTR ds:0xc003be30,0xc000d633
c000d7e1:	c7 05 3c be 03 c0 3d d7 00 c0 	mov    DWORD PTR ds:0xc003be3c,0xc000d73d
c000d7eb:	c3                   	ret    

c000d7ec <kernel_main>:
c000d7ec:	57                   	push   edi
c000d7ed:	bf f9 03 00 00       	mov    edi,0x3f9
c000d7f2:	56                   	push   esi
c000d7f3:	31 f6                	xor    esi,esi
c000d7f5:	53                   	push   ebx
c000d7f6:	83 ec 10             	sub    esp,0x10
c000d7f9:	e8 44 27 00 00       	call   c000ff42 <installVgaTextImplementation()>
c000d7fe:	e8 98 ff ff ff       	call   c000d79b <setupTextMode()>
c000d803:	89 f0                	mov    eax,esi
c000d805:	89 fa                	mov    edx,edi
c000d807:	ee                   	out    dx,al
c000d808:	bb fb 03 00 00       	mov    ebx,0x3fb
c000d80d:	b0 80                	mov    al,0x80
c000d80f:	89 da                	mov    edx,ebx
c000d811:	ee                   	out    dx,al
c000d812:	b1 03                	mov    cl,0x3
c000d814:	ba f8 03 00 00       	mov    edx,0x3f8
c000d819:	88 c8                	mov    al,cl
c000d81b:	ee                   	out    dx,al
c000d81c:	89 f0                	mov    eax,esi
c000d81e:	89 fa                	mov    edx,edi
c000d820:	ee                   	out    dx,al
c000d821:	88 c8                	mov    al,cl
c000d823:	89 da                	mov    edx,ebx
c000d825:	ee                   	out    dx,al
c000d826:	b0 c7                	mov    al,0xc7
c000d828:	ba fa 03 00 00       	mov    edx,0x3fa
c000d82d:	ee                   	out    dx,al
c000d82e:	b0 0b                	mov    al,0xb
c000d830:	ba fc 03 00 00       	mov    edx,0x3fc
c000d835:	ee                   	out    dx,al
c000d836:	a1 24 05 00 00       	mov    eax,ds:0x524
c000d83b:	83 ec 0c             	sub    esp,0xc
c000d83e:	05 ff 0f 00 00       	add    eax,0xfff
c000d843:	25 00 f0 ff ff       	and    eax,0xfffff000
c000d848:	50                   	push   eax
c000d849:	e8 4d 03 00 00       	call   c000db9b <Phys::physicalMemorySetup(unsigned int)>
c000d84e:	e8 df 3b 00 00       	call   c0011432 <Virt::virtualMemorySetup()>
c000d853:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000d859:	83 c4 10             	add    esp,0x10
c000d85c:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000d862:	75 0e                	jne    c000d872 <kernel_main+0x86>
c000d864:	89 d8                	mov    eax,ebx
c000d866:	25 48 03 00 00       	and    eax,0x348
c000d86b:	3d 00 03 00 00       	cmp    eax,0x300
c000d870:	74 10                	je     c000d882 <kernel_main+0x96>
c000d872:	83 ec 0c             	sub    esp,0xc
c000d875:	68 db 8d 03 c0       	push   0xc0038ddb
c000d87a:	e8 a1 f7 ff ff       	call   c000d020 <panic(char const*)>
c000d87f:	83 c4 10             	add    esp,0x10
c000d882:	83 ec 0c             	sub    esp,0xc
c000d885:	89 1d 54 bb 03 c0    	mov    DWORD PTR ds:0xc003bb54,ebx
c000d88b:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d88f:	53                   	push   ebx
c000d890:	e8 47 3d 00 00       	call   c00115dc <VAS::VAS()>
c000d895:	89 1d 5c be 03 c0    	mov    DWORD PTR ds:0xc003be5c,ebx
c000d89b:	e8 80 27 ff ff       	call   c0000020 <callGlobalConstructors>
c000d8a0:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000d8a7:	e8 06 4c 00 00       	call   c00124b2 <operator new(unsigned long)>
c000d8ac:	89 04 24             	mov    DWORD PTR [esp],eax
c000d8af:	89 c6                	mov    esi,eax
c000d8b1:	e8 10 d9 ff ff       	call   c000b1c6 <Computer::Computer()>
c000d8b6:	6a 00                	push   0x0
c000d8b8:	89 35 a8 b9 03 c0    	mov    DWORD PTR ds:0xc003b9a8,esi
c000d8be:	6a 00                	push   0x0
c000d8c0:	6a 00                	push   0x0
c000d8c2:	56                   	push   esi
c000d8c3:	e8 c2 dd ff ff       	call   c000b68a <Computer::open(int, int, void*)>
c000d8c8:	83 c4 14             	add    esp,0x14
c000d8cb:	53                   	push   ebx
c000d8cc:	e8 1b 3f 00 00       	call   c00117ec <VAS::~VAS()>
c000d8d1:	c7 04 24 78 8e 03 c0 	mov    DWORD PTR [esp],0xc0038e78
c000d8d8:	e8 43 f7 ff ff       	call   c000d020 <panic(char const*)>
c000d8dd:	83 c4 20             	add    esp,0x20
c000d8e0:	5b                   	pop    ebx
c000d8e1:	5e                   	pop    esi
c000d8e2:	5f                   	pop    edi
c000d8e3:	c3                   	ret    

c000d8e4 <Phys::allocateDMA(unsigned long)>:
c000d8e4:	55                   	push   ebp
c000d8e5:	31 d2                	xor    edx,edx
c000d8e7:	57                   	push   edi
c000d8e8:	31 ed                	xor    ebp,ebp
c000d8ea:	56                   	push   esi
c000d8eb:	31 c9                	xor    ecx,ecx
c000d8ed:	53                   	push   ebx
c000d8ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d8f2:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000d8f8:	31 c0                	xor    eax,eax
c000d8fa:	c1 ee 0c             	shr    esi,0xc
c000d8fd:	eb 17                	jmp    c000d916 <Phys::allocateDMA(unsigned long)+0x32>
c000d8ff:	85 c9                	test   ecx,ecx
c000d901:	75 04                	jne    c000d907 <Phys::allocateDMA(unsigned long)+0x23>
c000d903:	89 d5                	mov    ebp,edx
c000d905:	89 d0                	mov    eax,edx
c000d907:	8d 59 01             	lea    ebx,[ecx+0x1]
c000d90a:	39 de                	cmp    esi,ebx
c000d90c:	74 20                	je     c000d92e <Phys::allocateDMA(unsigned long)+0x4a>
c000d90e:	42                   	inc    edx
c000d90f:	89 d9                	mov    ecx,ebx
c000d911:	83 fa 2f             	cmp    edx,0x2f
c000d914:	7f 11                	jg     c000d927 <Phys::allocateDMA(unsigned long)+0x43>
c000d916:	80 ba 80 bb 03 c0 00 	cmp    BYTE PTR [edx-0x3ffc4480],0x0
c000d91d:	74 e0                	je     c000d8ff <Phys::allocateDMA(unsigned long)+0x1b>
c000d91f:	31 c9                	xor    ecx,ecx
c000d921:	42                   	inc    edx
c000d922:	83 fa 2f             	cmp    edx,0x2f
c000d925:	7e ef                	jle    c000d916 <Phys::allocateDMA(unsigned long)+0x32>
c000d927:	5b                   	pop    ebx
c000d928:	31 c0                	xor    eax,eax
c000d92a:	5e                   	pop    esi
c000d92b:	5f                   	pop    edi
c000d92c:	5d                   	pop    ebp
c000d92d:	c3                   	ret    
c000d92e:	8d 14 30             	lea    edx,[eax+esi*1]
c000d931:	89 d7                	mov    edi,edx
c000d933:	4f                   	dec    edi
c000d934:	79 03                	jns    c000d939 <Phys::allocateDMA(unsigned long)+0x55>
c000d936:	8d 7a 0e             	lea    edi,[edx+0xe]
c000d939:	c1 ff 04             	sar    edi,0x4
c000d93c:	89 c2                	mov    edx,eax
c000d93e:	c1 fa 04             	sar    edx,0x4
c000d941:	39 fa                	cmp    edx,edi
c000d943:	75 2f                	jne    c000d974 <Phys::allocateDMA(unsigned long)+0x90>
c000d945:	85 db                	test   ebx,ebx
c000d947:	74 1a                	je     c000d963 <Phys::allocateDMA(unsigned long)+0x7f>
c000d949:	be 80 bb 03 c0       	mov    esi,0xc003bb80
c000d94e:	8d 90 80 bb 03 c0    	lea    edx,[eax-0x3ffc4480]
c000d954:	f7 d6                	not    esi
c000d956:	29 c6                	sub    esi,eax
c000d958:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000d95b:	42                   	inc    edx
c000d95c:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000d95f:	39 d9                	cmp    ecx,ebx
c000d961:	7f f5                	jg     c000d958 <Phys::allocateDMA(unsigned long)+0x74>
c000d963:	85 ff                	test   edi,edi
c000d965:	74 13                	je     c000d97a <Phys::allocateDMA(unsigned long)+0x96>
c000d967:	5b                   	pop    ebx
c000d968:	05 50 20 0c 00       	add    eax,0xc2050
c000d96d:	5e                   	pop    esi
c000d96e:	c1 e0 0c             	shl    eax,0xc
c000d971:	5f                   	pop    edi
c000d972:	5d                   	pop    ebp
c000d973:	c3                   	ret    
c000d974:	89 ea                	mov    edx,ebp
c000d976:	31 c9                	xor    ecx,ecx
c000d978:	eb a7                	jmp    c000d921 <Phys::allocateDMA(unsigned long)+0x3d>
c000d97a:	5b                   	pop    ebx
c000d97b:	c1 e0 0c             	shl    eax,0xc
c000d97e:	5e                   	pop    esi
c000d97f:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000d984:	5f                   	pop    edi
c000d985:	5d                   	pop    ebp
c000d986:	c3                   	ret    

c000d987 <Phys::freeDMA(unsigned long, unsigned long)>:
c000d987:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d98b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d98f:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000d995:	c1 e9 0c             	shr    ecx,0xc
c000d998:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000d99d:	76 25                	jbe    c000d9c4 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000d99f:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000d9a4:	c1 e8 0c             	shr    eax,0xc
c000d9a7:	8d 50 10             	lea    edx,[eax+0x10]
c000d9aa:	85 c9                	test   ecx,ecx
c000d9ac:	74 15                	je     c000d9c3 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000d9ae:	8d 82 80 bb 03 c0    	lea    eax,[edx-0x3ffc4480]
c000d9b4:	8d 94 11 80 bb 03 c0 	lea    edx,[ecx+edx*1-0x3ffc4480]
c000d9bb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000d9be:	40                   	inc    eax
c000d9bf:	39 d0                	cmp    eax,edx
c000d9c1:	75 f8                	jne    c000d9bb <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000d9c3:	c3                   	ret    
c000d9c4:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000d9ca:	c1 ea 0c             	shr    edx,0xc
c000d9cd:	eb db                	jmp    c000d9aa <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000d9cf <Phys::setPageState(unsigned long, bool)>:
c000d9cf:	56                   	push   esi
c000d9d0:	ba 01 00 00 00       	mov    edx,0x1
c000d9d5:	53                   	push   ebx
c000d9d6:	8b 35 d0 ad 03 c0    	mov    esi,DWORD PTR ds:0xc003add0
c000d9dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d9e0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d9e4:	89 c8                	mov    eax,ecx
c000d9e6:	83 e1 07             	and    ecx,0x7
c000d9e9:	c1 e8 03             	shr    eax,0x3
c000d9ec:	d3 e3                	shl    ebx,cl
c000d9ee:	01 c6                	add    esi,eax
c000d9f0:	d3 e2                	shl    edx,cl
c000d9f2:	f7 d2                	not    edx
c000d9f4:	20 16                	and    BYTE PTR [esi],dl
c000d9f6:	03 05 d0 ad 03 c0    	add    eax,DWORD PTR ds:0xc003add0
c000d9fc:	08 18                	or     BYTE PTR [eax],bl
c000d9fe:	5b                   	pop    ebx
c000d9ff:	5e                   	pop    esi
c000da00:	c3                   	ret    

c000da01 <Phys::getPageState(unsigned long)>:
c000da01:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000da05:	8b 15 d0 ad 03 c0    	mov    edx,DWORD PTR ds:0xc003add0
c000da0b:	89 c8                	mov    eax,ecx
c000da0d:	83 e1 07             	and    ecx,0x7
c000da10:	c1 e8 03             	shr    eax,0x3
c000da13:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000da17:	d3 f8                	sar    eax,cl
c000da19:	83 e0 01             	and    eax,0x1
c000da1c:	c3                   	ret    

c000da1d <Phys::freePage(unsigned long)>:
c000da1d:	53                   	push   ebx
c000da1e:	83 ec 08             	sub    esp,0x8
c000da21:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000da25:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000da2b:	76 57                	jbe    c000da84 <Phys::freePage(unsigned long)+0x67>
c000da2d:	c1 eb 0c             	shr    ebx,0xc
c000da30:	53                   	push   ebx
c000da31:	e8 cb ff ff ff       	call   c000da01 <Phys::getPageState(unsigned long)>
c000da36:	5a                   	pop    edx
c000da37:	84 c0                	test   al,al
c000da39:	74 5b                	je     c000da96 <Phys::freePage(unsigned long)+0x79>
c000da3b:	a1 6c bb 03 c0       	mov    eax,ds:0xc003bb6c
c000da40:	48                   	dec    eax
c000da41:	a3 6c bb 03 c0       	mov    ds:0xc003bb6c,eax
c000da46:	8d 04 80             	lea    eax,[eax+eax*4]
c000da49:	8d 04 80             	lea    eax,[eax+eax*4]
c000da4c:	c1 e0 02             	shl    eax,0x2
c000da4f:	99                   	cdq    
c000da50:	f7 3d 70 bb 03 c0    	idiv   DWORD PTR ds:0xc003bb70
c000da56:	39 05 68 bb 03 c0    	cmp    DWORD PTR ds:0xc003bb68,eax
c000da5c:	75 13                	jne    c000da71 <Phys::freePage(unsigned long)+0x54>
c000da5e:	83 ec 08             	sub    esp,0x8
c000da61:	6a 00                	push   0x0
c000da63:	53                   	push   ebx
c000da64:	e8 66 ff ff ff       	call   c000d9cf <Phys::setPageState(unsigned long, bool)>
c000da69:	83 c4 10             	add    esp,0x10
c000da6c:	83 c4 08             	add    esp,0x8
c000da6f:	5b                   	pop    ebx
c000da70:	c3                   	ret    
c000da71:	83 ec 0c             	sub    esp,0xc
c000da74:	a3 68 bb 03 c0       	mov    ds:0xc003bb68,eax
c000da79:	50                   	push   eax
c000da7a:	e8 57 28 00 00       	call   c00102d6 <VgaText::updateRAMUsageDisplay(int)>
c000da7f:	83 c4 10             	add    esp,0x10
c000da82:	eb da                	jmp    c000da5e <Phys::freePage(unsigned long)+0x41>
c000da84:	68 00 10 00 00       	push   0x1000
c000da89:	53                   	push   ebx
c000da8a:	e8 f8 fe ff ff       	call   c000d987 <Phys::freeDMA(unsigned long, unsigned long)>
c000da8f:	59                   	pop    ecx
c000da90:	5b                   	pop    ebx
c000da91:	83 c4 08             	add    esp,0x8
c000da94:	5b                   	pop    ebx
c000da95:	c3                   	ret    
c000da96:	c7 44 24 10 93 8e 03 c0 	mov    DWORD PTR [esp+0x10],0xc0038e93
c000da9e:	83 c4 08             	add    esp,0x8
c000daa1:	5b                   	pop    ebx
c000daa2:	e9 79 f5 ff ff       	jmp    c000d020 <panic(char const*)>

c000daa7 <Phys::allocatePage()>:
c000daa7:	56                   	push   esi
c000daa8:	53                   	push   ebx
c000daa9:	51                   	push   ecx
c000daaa:	8b 35 60 bb 03 c0    	mov    esi,DWORD PTR ds:0xc003bb60
c000dab0:	89 f3                	mov    ebx,esi
c000dab2:	eb 0a                	jmp    c000dabe <Phys::allocatePage()+0x17>
c000dab4:	89 1d 60 bb 03 c0    	mov    DWORD PTR ds:0xc003bb60,ebx
c000daba:	39 de                	cmp    esi,ebx
c000dabc:	74 24                	je     c000dae2 <Phys::allocatePage()+0x3b>
c000dabe:	53                   	push   ebx
c000dabf:	e8 3d ff ff ff       	call   c000da01 <Phys::getPageState(unsigned long)>
c000dac4:	5a                   	pop    edx
c000dac5:	84 c0                	test   al,al
c000dac7:	74 4e                	je     c000db17 <Phys::allocatePage()+0x70>
c000dac9:	43                   	inc    ebx
c000daca:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000dad0:	75 e2                	jne    c000dab4 <Phys::allocatePage()+0xd>
c000dad2:	31 db                	xor    ebx,ebx
c000dad4:	c7 05 60 bb 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003bb60,0x0
c000dade:	39 de                	cmp    esi,ebx
c000dae0:	75 dc                	jne    c000dabe <Phys::allocatePage()+0x17>
c000dae2:	83 ec 0c             	sub    esp,0xc
c000dae5:	68 00 10 00 00       	push   0x1000
c000daea:	e8 f5 fd ff ff       	call   c000d8e4 <Phys::allocateDMA(unsigned long)>
c000daef:	83 c4 10             	add    esp,0x10
c000daf2:	85 c0                	test   eax,eax
c000daf4:	75 56                	jne    c000db4c <Phys::allocatePage()+0xa5>
c000daf6:	83 ec 0c             	sub    esp,0xc
c000daf9:	68 a9 8e 03 c0       	push   0xc0038ea9
c000dafe:	e8 1d f5 ff ff       	call   c000d020 <panic(char const*)>
c000db03:	83 c4 10             	add    esp,0x10
c000db06:	8b 1d 60 bb 03 c0    	mov    ebx,DWORD PTR ds:0xc003bb60
c000db0c:	53                   	push   ebx
c000db0d:	e8 ef fe ff ff       	call   c000da01 <Phys::getPageState(unsigned long)>
c000db12:	5a                   	pop    edx
c000db13:	84 c0                	test   al,al
c000db15:	75 b2                	jne    c000dac9 <Phys::allocatePage()+0x22>
c000db17:	6a 01                	push   0x1
c000db19:	53                   	push   ebx
c000db1a:	e8 b0 fe ff ff       	call   c000d9cf <Phys::setPageState(unsigned long, bool)>
c000db1f:	a1 6c bb 03 c0       	mov    eax,ds:0xc003bb6c
c000db24:	59                   	pop    ecx
c000db25:	40                   	inc    eax
c000db26:	5b                   	pop    ebx
c000db27:	a3 6c bb 03 c0       	mov    ds:0xc003bb6c,eax
c000db2c:	8d 04 80             	lea    eax,[eax+eax*4]
c000db2f:	8d 04 80             	lea    eax,[eax+eax*4]
c000db32:	c1 e0 02             	shl    eax,0x2
c000db35:	99                   	cdq    
c000db36:	f7 3d 70 bb 03 c0    	idiv   DWORD PTR ds:0xc003bb70
c000db3c:	39 05 68 bb 03 c0    	cmp    DWORD PTR ds:0xc003bb68,eax
c000db42:	75 0c                	jne    c000db50 <Phys::allocatePage()+0xa9>
c000db44:	a1 60 bb 03 c0       	mov    eax,ds:0xc003bb60
c000db49:	c1 e0 0c             	shl    eax,0xc
c000db4c:	5a                   	pop    edx
c000db4d:	5b                   	pop    ebx
c000db4e:	5e                   	pop    esi
c000db4f:	c3                   	ret    
c000db50:	83 ec 0c             	sub    esp,0xc
c000db53:	a3 68 bb 03 c0       	mov    ds:0xc003bb68,eax
c000db58:	50                   	push   eax
c000db59:	e8 78 27 00 00       	call   c00102d6 <VgaText::updateRAMUsageDisplay(int)>
c000db5e:	83 c4 10             	add    esp,0x10
c000db61:	eb e1                	jmp    c000db44 <Phys::allocatePage()+0x9d>

c000db63 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000db63:	56                   	push   esi
c000db64:	53                   	push   ebx
c000db65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000db69:	39 1d 64 bb 03 c0    	cmp    DWORD PTR ds:0xc003bb64,ebx
c000db6f:	73 06                	jae    c000db77 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000db71:	89 1d 64 bb 03 c0    	mov    DWORD PTR ds:0xc003bb64,ebx
c000db77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000db7b:	c1 eb 0c             	shr    ebx,0xc
c000db7e:	c1 e8 0c             	shr    eax,0xc
c000db81:	39 d8                	cmp    eax,ebx
c000db83:	73 13                	jae    c000db98 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000db85:	6a 00                	push   0x0
c000db87:	8d 70 01             	lea    esi,[eax+0x1]
c000db8a:	50                   	push   eax
c000db8b:	e8 3f fe ff ff       	call   c000d9cf <Phys::setPageState(unsigned long, bool)>
c000db90:	5a                   	pop    edx
c000db91:	89 f0                	mov    eax,esi
c000db93:	59                   	pop    ecx
c000db94:	39 f3                	cmp    ebx,esi
c000db96:	75 ed                	jne    c000db85 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000db98:	5b                   	pop    ebx
c000db99:	5e                   	pop    esi
c000db9a:	c3                   	ret    

c000db9b <Phys::physicalMemorySetup(unsigned int)>:
c000db9b:	55                   	push   ebp
c000db9c:	57                   	push   edi
c000db9d:	56                   	push   esi
c000db9e:	53                   	push   ebx
c000db9f:	31 db                	xor    ebx,ebx
c000dba1:	83 ec 30             	sub    esp,0x30
c000dba4:	6a 30                	push   0x30
c000dba6:	6a 00                	push   0x0
c000dba8:	68 80 bb 03 c0       	push   0xc003bb80
c000dbad:	e8 26 2b ff ff       	call   c00006d8 <memset>
c000dbb2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dbb6:	25 00 f0 ff ff       	and    eax,0xfffff000
c000dbbb:	05 00 10 00 00       	add    eax,0x1000
c000dbc0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dbc4:	83 c4 10             	add    esp,0x10
c000dbc7:	83 ec 08             	sub    esp,0x8
c000dbca:	6a 01                	push   0x1
c000dbcc:	53                   	push   ebx
c000dbcd:	43                   	inc    ebx
c000dbce:	e8 fc fd ff ff       	call   c000d9cf <Phys::setPageState(unsigned long, bool)>
c000dbd3:	83 c4 10             	add    esp,0x10
c000dbd6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000dbdc:	75 e9                	jne    c000dbc7 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000dbde:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000dbe5:	66 85 c0             	test   ax,ax
c000dbe8:	0f 84 28 01 00 00    	je     c000dd16 <Phys::physicalMemorySetup(unsigned int)+0x17b>
c000dbee:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbf2:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000dbf8:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000dbfd:	8b 35 08 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000608
c000dc03:	8b 3d 0c 06 00 c2    	mov    edi,DWORD PTR ds:0xc200060c
c000dc09:	89 f1                	mov    ecx,esi
c000dc0b:	89 fb                	mov    ebx,edi
c000dc0d:	01 c1                	add    ecx,eax
c000dc0f:	89 d5                	mov    ebp,edx
c000dc11:	11 d3                	adc    ebx,edx
c000dc13:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000dc16:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000dc1a:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000dc1e:	8b 0d 10 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000610
c000dc24:	09 dd                	or     ebp,ebx
c000dc26:	0f 85 fa 00 00 00    	jne    c000dd26 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000dc2c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dc30:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dc38:	c7 44 24 0c 00 06 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000600
c000dc40:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dc44:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000dc4c:	eb 45                	jmp    c000dc93 <Phys::physicalMemorySetup(unsigned int)+0xf8>
c000dc4e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000dc52:	83 44 24 0c 18       	add    DWORD PTR [esp+0xc],0x18
c000dc57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dc5b:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000dc5f:	0f 84 c1 00 00 00    	je     c000dd26 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000dc65:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000dc69:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000dc6c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dc6f:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c000dc72:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000dc75:	89 c1                	mov    ecx,eax
c000dc77:	89 d3                	mov    ebx,edx
c000dc79:	01 f1                	add    ecx,esi
c000dc7b:	11 fb                	adc    ebx,edi
c000dc7d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000dc80:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000dc84:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000dc87:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000dc8b:	09 d3                	or     ebx,edx
c000dc8d:	0f 85 93 00 00 00    	jne    c000dd26 <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000dc93:	49                   	dec    ecx
c000dc94:	75 b8                	jne    c000dc4e <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000dc96:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000dc99:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000dc9d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000dca1:	39 e9                	cmp    ecx,ebp
c000dca3:	89 d9                	mov    ecx,ebx
c000dca5:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000dca9:	72 a3                	jb     c000dc4e <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000dcab:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000dcb0:	39 f1                	cmp    ecx,esi
c000dcb2:	b9 00 00 00 00       	mov    ecx,0x0
c000dcb7:	19 f9                	sbb    ecx,edi
c000dcb9:	73 93                	jae    c000dc4e <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000dcbb:	39 e8                	cmp    eax,ebp
c000dcbd:	89 d1                	mov    ecx,edx
c000dcbf:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000dcc3:	73 13                	jae    c000dcd8 <Phys::physicalMemorySetup(unsigned int)+0x13d>
c000dcc5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dcc8:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000dccc:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000dcd0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dcd4:	1b 7c 24 1c          	sbb    edi,DWORD PTR [esp+0x1c]
c000dcd8:	83 ec 08             	sub    esp,0x8
c000dcdb:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000dcdf:	50                   	push   eax
c000dce0:	e8 7e fe ff ff       	call   c000db63 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000dce5:	83 c4 0c             	add    esp,0xc
c000dce8:	89 fa                	mov    edx,edi
c000dcea:	89 f0                	mov    eax,esi
c000dcec:	0f ac d0 0c          	shrd   eax,edx,0xc
c000dcf0:	03 05 70 bb 03 c0    	add    eax,DWORD PTR ds:0xc003bb70
c000dcf6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dcfd:	a3 70 bb 03 c0       	mov    ds:0xc003bb70,eax
c000dd02:	52                   	push   edx
c000dd03:	50                   	push   eax
c000dd04:	68 c5 8e 03 c0       	push   0xc0038ec5
c000dd09:	e8 f4 f1 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c000dd0e:	83 c4 10             	add    esp,0x10
c000dd11:	e9 38 ff ff ff       	jmp    c000dc4e <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000dd16:	83 ec 0c             	sub    esp,0xc
c000dd19:	68 b7 8e 03 c0       	push   0xc0038eb7
c000dd1e:	e8 fd f2 ff ff       	call   c000d020 <panic(char const*)>
c000dd23:	83 c4 10             	add    esp,0x10
c000dd26:	bb 40 01 00 00       	mov    ebx,0x140
c000dd2b:	83 ec 08             	sub    esp,0x8
c000dd2e:	6a 00                	push   0x0
c000dd30:	53                   	push   ebx
c000dd31:	43                   	inc    ebx
c000dd32:	e8 98 fc ff ff       	call   c000d9cf <Phys::setPageState(unsigned long, bool)>
c000dd37:	ff 05 70 bb 03 c0    	inc    DWORD PTR ds:0xc003bb70
c000dd3d:	83 c4 10             	add    esp,0x10
c000dd40:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000dd46:	75 e3                	jne    c000dd2b <Phys::physicalMemorySetup(unsigned int)+0x190>
c000dd48:	83 c4 2c             	add    esp,0x2c
c000dd4b:	5b                   	pop    ebx
c000dd4c:	5e                   	pop    esi
c000dd4d:	5f                   	pop    edi
c000dd4e:	5d                   	pop    ebp
c000dd4f:	c3                   	ret    

c000dd50 <Pipe::isAtty()>:
c000dd50:	31 c0                	xor    eax,eax
c000dd52:	c3                   	ret    
c000dd53:	90                   	nop

c000dd54 <Pipe::~Pipe()>:
c000dd54:	83 ec 0c             	sub    esp,0xc
c000dd57:	ba 24 8f 03 c0       	mov    edx,0xc0038f24
c000dd5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd60:	89 10                	mov    DWORD PTR [eax],edx
c000dd62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dd66:	83 ec 0c             	sub    esp,0xc
c000dd69:	50                   	push   eax
c000dd6a:	e8 d3 33 00 00       	call   c0011142 <UnixFile::~UnixFile()>
c000dd6f:	83 c4 10             	add    esp,0x10
c000dd72:	90                   	nop
c000dd73:	83 c4 0c             	add    esp,0xc
c000dd76:	c3                   	ret    
c000dd77:	90                   	nop

c000dd78 <Pipe::~Pipe()>:
c000dd78:	83 ec 0c             	sub    esp,0xc
c000dd7b:	83 ec 0c             	sub    esp,0xc
c000dd7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd82:	e8 cd ff ff ff       	call   c000dd54 <Pipe::~Pipe()>
c000dd87:	83 c4 10             	add    esp,0x10
c000dd8a:	83 ec 08             	sub    esp,0x8
c000dd8d:	6a 20                	push   0x20
c000dd8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd93:	e8 29 47 00 00       	call   c00124c1 <operator delete(void*, unsigned long)>
c000dd98:	83 c4 10             	add    esp,0x10
c000dd9b:	83 c4 0c             	add    esp,0xc
c000dd9e:	c3                   	ret    
c000dd9f:	90                   	nop

c000dda0 <Pipe::read(unsigned long long, void*, int*)>:
c000dda0:	55                   	push   ebp
c000dda1:	57                   	push   edi
c000dda2:	56                   	push   esi
c000dda3:	53                   	push   ebx
c000dda4:	83 ec 1c             	sub    esp,0x1c
c000dda7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ddab:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000ddaf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ddb3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000ddb6:	89 c8                	mov    eax,ecx
c000ddb8:	99                   	cdq    
c000ddb9:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000ddbd:	74 19                	je     c000ddd8 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000ddbf:	39 f9                	cmp    ecx,edi
c000ddc1:	89 d1                	mov    ecx,edx
c000ddc3:	19 f1                	sbb    ecx,esi
c000ddc5:	73 11                	jae    c000ddd8 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000ddc7:	e8 d8 05 00 00       	call   c000e3a4 <lockScheduler()>
c000ddcc:	e8 07 09 00 00       	call   c000e6d8 <schedule()>
c000ddd1:	e8 d0 05 00 00       	call   c000e3a6 <unlockScheduler()>
c000ddd6:	eb db                	jmp    c000ddb3 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000ddd8:	39 f8                	cmp    eax,edi
c000ddda:	89 d1                	mov    ecx,edx
c000dddc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000dde0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000dde4:	19 f1                	sbb    ecx,esi
c000dde6:	73 08                	jae    c000ddf0 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000dde8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddec:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddf0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ddf3:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ddf6:	29 c6                	sub    esi,eax
c000ddf8:	89 f1                	mov    ecx,esi
c000ddfa:	c1 f9 1f             	sar    ecx,0x1f
c000ddfd:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000de01:	89 ca                	mov    edx,ecx
c000de03:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000de07:	19 d1                	sbb    ecx,edx
c000de09:	73 04                	jae    c000de0f <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000de0b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000de0f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000de13:	89 fd                	mov    ebp,edi
c000de15:	29 f5                	sub    ebp,esi
c000de17:	85 f6                	test   esi,esi
c000de19:	74 12                	je     c000de2d <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000de1b:	52                   	push   edx
c000de1c:	56                   	push   esi
c000de1d:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000de20:	50                   	push   eax
c000de21:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000de25:	e8 37 28 ff ff       	call   c0000661 <memcpy>
c000de2a:	83 c4 10             	add    esp,0x10
c000de2d:	85 ed                	test   ebp,ebp
c000de2f:	74 12                	je     c000de43 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000de31:	50                   	push   eax
c000de32:	55                   	push   ebp
c000de33:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de36:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000de3a:	56                   	push   esi
c000de3b:	e8 21 28 ff ff       	call   c0000661 <memcpy>
c000de40:	83 c4 10             	add    esp,0x10
c000de43:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000de46:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000de49:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000de4c:	99                   	cdq    
c000de4d:	89 f7                	mov    edi,esi
c000de4f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000de53:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000de57:	c1 ff 1f             	sar    edi,0x1f
c000de5a:	57                   	push   edi
c000de5b:	56                   	push   esi
c000de5c:	52                   	push   edx
c000de5d:	50                   	push   eax
c000de5e:	e8 b9 09 01 00       	call   c001e81c <__umoddi3>
c000de63:	83 c4 10             	add    esp,0x10
c000de66:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000de69:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000de6e:	75 10                	jne    c000de80 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000de70:	83 ec 0c             	sub    esp,0xc
c000de73:	68 e1 8e 03 c0       	push   0xc0038ee1
c000de78:	e8 a3 f1 ff ff       	call   c000d020 <panic(char const*)>
c000de7d:	83 c4 10             	add    esp,0x10
c000de80:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000de84:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000de88:	89 10                	mov    DWORD PTR [eax],edx
c000de8a:	83 c4 1c             	add    esp,0x1c
c000de8d:	31 c0                	xor    eax,eax
c000de8f:	5b                   	pop    ebx
c000de90:	5e                   	pop    esi
c000de91:	5f                   	pop    edi
c000de92:	5d                   	pop    ebp
c000de93:	c3                   	ret    

c000de94 <Pipe::write(unsigned long long, void*, int*)>:
c000de94:	55                   	push   ebp
c000de95:	57                   	push   edi
c000de96:	56                   	push   esi
c000de97:	53                   	push   ebx
c000de98:	83 ec 1c             	sub    esp,0x1c
c000de9b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de9f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000dea3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000dea7:	89 04 24             	mov    DWORD PTR [esp],eax
c000deaa:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000dead:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000deb0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000deb4:	89 de                	mov    esi,ebx
c000deb6:	89 df                	mov    edi,ebx
c000deb8:	c1 ff 1f             	sar    edi,0x1f
c000debb:	01 c6                	add    esi,eax
c000debd:	89 c8                	mov    eax,ecx
c000debf:	11 d7                	adc    edi,edx
c000dec1:	99                   	cdq    
c000dec2:	39 f1                	cmp    ecx,esi
c000dec4:	89 d0                	mov    eax,edx
c000dec6:	19 f8                	sbb    eax,edi
c000dec8:	b8 01 00 00 00       	mov    eax,0x1
c000decd:	0f 82 80 00 00 00    	jb     c000df53 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ded3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ded6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ded9:	01 d8                	add    eax,ebx
c000dedb:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000dedf:	99                   	cdq    
c000dee0:	f7 f9                	idiv   ecx
c000dee2:	29 d1                	sub    ecx,edx
c000dee4:	89 d7                	mov    edi,edx
c000dee6:	89 c8                	mov    eax,ecx
c000dee8:	99                   	cdq    
c000dee9:	39 ce                	cmp    esi,ecx
c000deeb:	19 d3                	sbb    ebx,edx
c000deed:	bb 00 00 00 00       	mov    ebx,0x0
c000def2:	72 04                	jb     c000def8 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000def4:	89 f3                	mov    ebx,esi
c000def6:	29 cb                	sub    ebx,ecx
c000def8:	89 f1                	mov    ecx,esi
c000defa:	29 d9                	sub    ecx,ebx
c000defc:	74 1a                	je     c000df18 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000defe:	52                   	push   edx
c000deff:	51                   	push   ecx
c000df00:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000df04:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000df08:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000df0b:	57                   	push   edi
c000df0c:	e8 50 27 ff ff       	call   c0000661 <memcpy>
c000df11:	83 c4 10             	add    esp,0x10
c000df14:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000df18:	85 db                	test   ebx,ebx
c000df1a:	74 12                	je     c000df2e <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000df1c:	50                   	push   eax
c000df1d:	53                   	push   ebx
c000df1e:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000df22:	51                   	push   ecx
c000df23:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000df26:	e8 36 27 ff ff       	call   c0000661 <memcpy>
c000df2b:	83 c4 10             	add    esp,0x10
c000df2e:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000df31:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000df36:	75 10                	jne    c000df48 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000df38:	83 ec 0c             	sub    esp,0xc
c000df3b:	68 fd 8e 03 c0       	push   0xc0038efd
c000df40:	e8 db f0 ff ff       	call   c000d020 <panic(char const*)>
c000df45:	83 c4 10             	add    esp,0x10
c000df48:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000df4c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000df4f:	89 38                	mov    DWORD PTR [eax],edi
c000df51:	31 c0                	xor    eax,eax
c000df53:	83 c4 1c             	add    esp,0x1c
c000df56:	5b                   	pop    ebx
c000df57:	5e                   	pop    esi
c000df58:	5f                   	pop    edi
c000df59:	5d                   	pop    ebp
c000df5a:	c3                   	ret    
c000df5b:	90                   	nop

c000df5c <Pipe::Pipe(int)>:
c000df5c:	83 ec 0c             	sub    esp,0xc
c000df5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df63:	83 ec 08             	sub    esp,0x8
c000df66:	6a 00                	push   0x0
c000df68:	50                   	push   eax
c000df69:	e8 70 31 00 00       	call   c00110de <UnixFile::UnixFile(int)>
c000df6e:	83 c4 10             	add    esp,0x10
c000df71:	ba 24 8f 03 c0       	mov    edx,0xc0038f24
c000df76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df7a:	89 10                	mov    DWORD PTR [eax],edx
c000df7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df80:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000df84:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000df87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df8b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000df92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df96:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000df9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dfa1:	83 ec 0c             	sub    esp,0xc
c000dfa4:	50                   	push   eax
c000dfa5:	e8 53 f5 ff ff       	call   c000d4fd <malloc>
c000dfaa:	83 c4 10             	add    esp,0x10
c000dfad:	89 c2                	mov    edx,eax
c000dfaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfb3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000dfb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfba:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000dfbe:	90                   	nop
c000dfbf:	83 c4 0c             	add    esp,0xc
c000dfc2:	c3                   	ret    
c000dfc3:	90                   	nop

c000dfc4 <changeTSS>:
c000dfc4:	83 ec 0c             	sub    esp,0xc
c000dfc7:	e8 ec 91 00 00       	call   c00171b8 <thisCPU()>
c000dfcc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000dfd2:	83 ec 08             	sub    esp,0x8
c000dfd5:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c000dfd8:	05 7c 11 00 00       	add    eax,0x117c
c000dfdd:	c1 e1 15             	shl    ecx,0x15
c000dfe0:	ba 00 00 e8 01       	mov    edx,0x1e80000
c000dfe5:	29 ca                	sub    edx,ecx
c000dfe7:	52                   	push   edx
c000dfe8:	50                   	push   eax
c000dfe9:	e8 28 2e 00 00       	call   c0010e16 <TSS::setESP(unsigned long)>
c000dfee:	83 c4 1c             	add    esp,0x1c
c000dff1:	c3                   	ret    

c000dff2 <Process::addArgs(char**)>:
c000dff2:	57                   	push   edi
c000dff3:	56                   	push   esi
c000dff4:	53                   	push   ebx
c000dff5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dff9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000dffd:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c000e007:	85 ff                	test   edi,edi
c000e009:	74 3d                	je     c000e048 <Process::addArgs(char**)+0x56>
c000e00b:	8b 07                	mov    eax,DWORD PTR [edi]
c000e00d:	85 c0                	test   eax,eax
c000e00f:	74 37                	je     c000e048 <Process::addArgs(char**)+0x56>
c000e011:	31 db                	xor    ebx,ebx
c000e013:	83 ec 0c             	sub    esp,0xc
c000e016:	50                   	push   eax
c000e017:	e8 e5 26 ff ff       	call   c0000701 <strlen>
c000e01c:	40                   	inc    eax
c000e01d:	89 04 24             	mov    DWORD PTR [esp],eax
c000e020:	e8 d8 f4 ff ff       	call   c000d4fd <malloc>
c000e025:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c000e02c:	5a                   	pop    edx
c000e02d:	59                   	pop    ecx
c000e02e:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c000e031:	43                   	inc    ebx
c000e032:	50                   	push   eax
c000e033:	e8 bc 27 ff ff       	call   c00007f4 <strcpy>
c000e038:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c000e03e:	83 c4 10             	add    esp,0x10
c000e041:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c000e044:	85 c0                	test   eax,eax
c000e046:	75 cb                	jne    c000e013 <Process::addArgs(char**)+0x21>
c000e048:	5b                   	pop    ebx
c000e049:	5e                   	pop    esi
c000e04a:	5f                   	pop    edi
c000e04b:	c3                   	ret    

c000e04c <Process::Process(char const*, Process*, char**)>:
c000e04c:	56                   	push   esi
c000e04d:	53                   	push   ebx
c000e04e:	83 ec 14             	sub    esp,0x14
c000e051:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e055:	05 0c 02 00 00       	add    eax,0x20c
c000e05a:	bb 07 00 00 00       	mov    ebx,0x7
c000e05f:	89 c6                	mov    esi,eax
c000e061:	85 db                	test   ebx,ebx
c000e063:	78 12                	js     c000e077 <Process::Process(char const*, Process*, char**)+0x2b>
c000e065:	83 ec 0c             	sub    esp,0xc
c000e068:	56                   	push   esi
c000e069:	e8 da 09 01 00       	call   c001ea48 <ThreadControlBlock::ThreadControlBlock()>
c000e06e:	83 c4 10             	add    esp,0x10
c000e071:	83 c6 63             	add    esi,0x63
c000e074:	4b                   	dec    ebx
c000e075:	eb ea                	jmp    c000e061 <Process::Process(char const*, Process*, char**)+0x15>
c000e077:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e07b:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c000e082:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e086:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c000e08f:	a1 d4 ad 03 c0       	mov    eax,ds:0xc003add4
c000e094:	8d 50 01             	lea    edx,[eax+0x1]
c000e097:	89 15 d4 ad 03 c0    	mov    DWORD PTR ds:0xc003add4,edx
c000e09d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e0a1:	89 02                	mov    DWORD PTR [edx],eax
c000e0a3:	83 ec 0c             	sub    esp,0xc
c000e0a6:	6a 10                	push   0x10
c000e0a8:	e8 05 44 00 00       	call   c00124b2 <operator new(unsigned long)>
c000e0ad:	83 c4 10             	add    esp,0x10
c000e0b0:	89 c3                	mov    ebx,eax
c000e0b2:	83 ec 08             	sub    esp,0x8
c000e0b5:	6a 00                	push   0x0
c000e0b7:	53                   	push   ebx
c000e0b8:	e8 89 40 00 00       	call   c0012146 <VAS::VAS(bool)>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0c4:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c000e0ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0ce:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000e0d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0dc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e0e0:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c000e0e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0ea:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e0f0:	85 c0                	test   eax,eax
c000e0f2:	74 42                	je     c000e136 <Process::Process(char const*, Process*, char**)+0xea>
c000e0f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e0f8:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e0fe:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000e104:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e108:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c000e10e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e112:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e118:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000e11e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e122:	05 0c 01 00 00       	add    eax,0x10c
c000e127:	83 ec 08             	sub    esp,0x8
c000e12a:	52                   	push   edx
c000e12b:	50                   	push   eax
c000e12c:	e8 c3 26 ff ff       	call   c00007f4 <strcpy>
c000e131:	83 c4 10             	add    esp,0x10
c000e134:	eb 5c                	jmp    c000e192 <Process::Process(char const*, Process*, char**)+0x146>
c000e136:	83 ec 0c             	sub    esp,0xc
c000e139:	68 60 12 00 00       	push   0x1260
c000e13e:	e8 6f 43 00 00       	call   c00124b2 <operator new(unsigned long)>
c000e143:	83 c4 10             	add    esp,0x10
c000e146:	89 c3                	mov    ebx,eax
c000e148:	83 ec 08             	sub    esp,0x8
c000e14b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e14f:	53                   	push   ebx
c000e150:	e8 bf 29 00 00       	call   c0010b14 <VgaText::VgaText(char const*)>
c000e155:	83 c4 10             	add    esp,0x10
c000e158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e15c:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c000e162:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e166:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000e16c:	83 ec 0c             	sub    esp,0xc
c000e16f:	50                   	push   eax
c000e170:	e8 a0 1d 00 00       	call   c000ff15 <addToTerminalCycle(VgaText*)>
c000e175:	83 c4 10             	add    esp,0x10
c000e178:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e17c:	05 0c 01 00 00       	add    eax,0x10c
c000e181:	83 ec 08             	sub    esp,0x8
c000e184:	68 38 8f 03 c0       	push   0xc0038f38
c000e189:	50                   	push   eax
c000e18a:	e8 65 26 ff ff       	call   c00007f4 <strcpy>
c000e18f:	83 c4 10             	add    esp,0x10
c000e192:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e196:	83 c0 0c             	add    eax,0xc
c000e199:	83 ec 08             	sub    esp,0x8
c000e19c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e1a0:	50                   	push   eax
c000e1a1:	e8 4e 26 ff ff       	call   c00007f4 <strcpy>
c000e1a6:	83 c4 10             	add    esp,0x10
c000e1a9:	83 ec 08             	sub    esp,0x8
c000e1ac:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e1b0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e1b4:	e8 39 fe ff ff       	call   c000dff2 <Process::addArgs(char**)>
c000e1b9:	83 c4 10             	add    esp,0x10
c000e1bc:	83 ec 08             	sub    esp,0x8
c000e1bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e1c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e1c7:	e8 c0 d8 ff ff       	call   c000ba8c <loadProgramIntoMemory(Process*, char const*)>
c000e1cc:	83 c4 10             	add    esp,0x10
c000e1cf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e1d3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e1d7:	83 f0 01             	xor    eax,0x1
c000e1da:	88 c2                	mov    dl,al
c000e1dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1e0:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c000e1e6:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000e1eb:	83 ec 08             	sub    esp,0x8
c000e1ee:	50                   	push   eax
c000e1ef:	68 8c 8f 03 c0       	push   0xc0038f8c
c000e1f4:	e8 09 ed ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c000e1f9:	83 c4 10             	add    esp,0x10
c000e1fc:	90                   	nop
c000e1fd:	83 c4 14             	add    esp,0x14
c000e200:	5b                   	pop    ebx
c000e201:	5e                   	pop    esi
c000e202:	c3                   	ret    
c000e203:	90                   	nop

c000e204 <Process::Process(bool, char const*, Process*, char**)>:
c000e204:	56                   	push   esi
c000e205:	53                   	push   ebx
c000e206:	83 ec 14             	sub    esp,0x14
c000e209:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e20d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000e211:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e215:	05 0c 02 00 00       	add    eax,0x20c
c000e21a:	bb 07 00 00 00       	mov    ebx,0x7
c000e21f:	89 c6                	mov    esi,eax
c000e221:	85 db                	test   ebx,ebx
c000e223:	78 12                	js     c000e237 <Process::Process(bool, char const*, Process*, char**)+0x33>
c000e225:	83 ec 0c             	sub    esp,0xc
c000e228:	56                   	push   esi
c000e229:	e8 1a 08 01 00       	call   c001ea48 <ThreadControlBlock::ThreadControlBlock()>
c000e22e:	83 c4 10             	add    esp,0x10
c000e231:	83 c6 63             	add    esi,0x63
c000e234:	4b                   	dec    ebx
c000e235:	eb ea                	jmp    c000e221 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c000e237:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e23b:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c000e242:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e246:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c000e24f:	a1 d4 ad 03 c0       	mov    eax,ds:0xc003add4
c000e254:	8d 50 01             	lea    edx,[eax+0x1]
c000e257:	89 15 d4 ad 03 c0    	mov    DWORD PTR ds:0xc003add4,edx
c000e25d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e261:	89 02                	mov    DWORD PTR [edx],eax
c000e263:	83 ec 0c             	sub    esp,0xc
c000e266:	6a 10                	push   0x10
c000e268:	e8 45 42 00 00       	call   c00124b2 <operator new(unsigned long)>
c000e26d:	83 c4 10             	add    esp,0x10
c000e270:	89 c3                	mov    ebx,eax
c000e272:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c000e277:	83 ec 08             	sub    esp,0x8
c000e27a:	50                   	push   eax
c000e27b:	53                   	push   ebx
c000e27c:	e8 c5 3e 00 00       	call   c0012146 <VAS::VAS(bool)>
c000e281:	83 c4 10             	add    esp,0x10
c000e284:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e288:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c000e28e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e292:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000e29c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2a0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e2a4:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c000e2aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2ae:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e2b4:	85 c0                	test   eax,eax
c000e2b6:	74 42                	je     c000e2fa <Process::Process(bool, char const*, Process*, char**)+0xf6>
c000e2b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2bc:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e2c2:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000e2c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2cc:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c000e2d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2d6:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000e2dc:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000e2e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2e6:	05 0c 01 00 00       	add    eax,0x10c
c000e2eb:	83 ec 08             	sub    esp,0x8
c000e2ee:	52                   	push   edx
c000e2ef:	50                   	push   eax
c000e2f0:	e8 ff 24 ff ff       	call   c00007f4 <strcpy>
c000e2f5:	83 c4 10             	add    esp,0x10
c000e2f8:	eb 5c                	jmp    c000e356 <Process::Process(bool, char const*, Process*, char**)+0x152>
c000e2fa:	83 ec 0c             	sub    esp,0xc
c000e2fd:	68 60 12 00 00       	push   0x1260
c000e302:	e8 ab 41 00 00       	call   c00124b2 <operator new(unsigned long)>
c000e307:	83 c4 10             	add    esp,0x10
c000e30a:	89 c3                	mov    ebx,eax
c000e30c:	83 ec 08             	sub    esp,0x8
c000e30f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e313:	53                   	push   ebx
c000e314:	e8 fb 27 00 00       	call   c0010b14 <VgaText::VgaText(char const*)>
c000e319:	83 c4 10             	add    esp,0x10
c000e31c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e320:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c000e326:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e32a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000e330:	83 ec 0c             	sub    esp,0xc
c000e333:	50                   	push   eax
c000e334:	e8 dc 1b 00 00       	call   c000ff15 <addToTerminalCycle(VgaText*)>
c000e339:	83 c4 10             	add    esp,0x10
c000e33c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e340:	05 0c 01 00 00       	add    eax,0x10c
c000e345:	83 ec 08             	sub    esp,0x8
c000e348:	68 38 8f 03 c0       	push   0xc0038f38
c000e34d:	50                   	push   eax
c000e34e:	e8 a1 24 ff ff       	call   c00007f4 <strcpy>
c000e353:	83 c4 10             	add    esp,0x10
c000e356:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e35a:	83 c0 0c             	add    eax,0xc
c000e35d:	83 ec 08             	sub    esp,0x8
c000e360:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e364:	50                   	push   eax
c000e365:	e8 8a 24 ff ff       	call   c00007f4 <strcpy>
c000e36a:	83 c4 10             	add    esp,0x10
c000e36d:	83 ec 08             	sub    esp,0x8
c000e370:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000e374:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e378:	e8 75 fc ff ff       	call   c000dff2 <Process::addArgs(char**)>
c000e37d:	83 c4 10             	add    esp,0x10
c000e380:	90                   	nop
c000e381:	83 c4 14             	add    esp,0x14
c000e384:	5b                   	pop    ebx
c000e385:	5e                   	pop    esi
c000e386:	c3                   	ret    

c000e387 <disableIRQs()>:
c000e387:	fa                   	cli    
c000e388:	ff 05 d4 bb 03 c0    	inc    DWORD PTR ds:0xc003bbd4
c000e38e:	c3                   	ret    

c000e38f <getIRQNestingLevel()>:
c000e38f:	a1 d4 bb 03 c0       	mov    eax,ds:0xc003bbd4
c000e394:	c3                   	ret    

c000e395 <enableIRQs()>:
c000e395:	a1 d4 bb 03 c0       	mov    eax,ds:0xc003bbd4
c000e39a:	48                   	dec    eax
c000e39b:	a3 d4 bb 03 c0       	mov    ds:0xc003bbd4,eax
c000e3a0:	75 01                	jne    c000e3a3 <enableIRQs()+0xe>
c000e3a2:	fb                   	sti    
c000e3a3:	c3                   	ret    

c000e3a4 <lockScheduler()>:
c000e3a4:	eb e1                	jmp    c000e387 <disableIRQs()>

c000e3a6 <unlockScheduler()>:
c000e3a6:	eb ed                	jmp    c000e395 <enableIRQs()>

c000e3a8 <userModeEntryPoint(void*)>:
c000e3a8:	83 ec 0c             	sub    esp,0xc
c000e3ab:	e8 f6 ff ff ff       	call   c000e3a6 <unlockScheduler()>
c000e3b0:	fb                   	sti    
c000e3b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e3b6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e3b9:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c000e3bf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e3c3:	83 c4 0c             	add    esp,0xc
c000e3c6:	e9 48 1e ff ff       	jmp    c0000213 <goToUsermode>

c000e3cb <lockStuff()>:
c000e3cb:	e8 b7 ff ff ff       	call   c000e387 <disableIRQs()>
c000e3d0:	ff 05 d0 bb 03 c0    	inc    DWORD PTR ds:0xc003bbd0
c000e3d6:	c3                   	ret    

c000e3d7 <taskStartupFunction>:
c000e3d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e3dc:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c000e3df:	c3                   	ret    

c000e3e0 <updateTimeUsed()>:
c000e3e0:	57                   	push   edi
c000e3e1:	56                   	push   esi
c000e3e2:	53                   	push   ebx
c000e3e3:	e8 d0 8d 00 00       	call   c00171b8 <thisCPU()>
c000e3e8:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c000e3ef:	74 49                	je     c000e43a <updateTimeUsed()+0x5a>
c000e3f1:	0f 31                	rdtsc  
c000e3f3:	89 c1                	mov    ecx,eax
c000e3f5:	a3 10 bc 03 c0       	mov    ds:0xc003bc10,eax
c000e3fa:	2b 0d 00 bc 03 c0    	sub    ecx,DWORD PTR ds:0xc003bc00
c000e400:	89 d3                	mov    ebx,edx
c000e402:	89 0d 08 bc 03 c0    	mov    DWORD PTR ds:0xc003bc08,ecx
c000e408:	1b 1d 04 bc 03 c0    	sbb    ebx,DWORD PTR ds:0xc003bc04
c000e40e:	a3 00 bc 03 c0       	mov    ds:0xc003bc00,eax
c000e413:	89 1d 0c bc 03 c0    	mov    DWORD PTR ds:0xc003bc0c,ebx
c000e419:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e41e:	89 15 14 bc 03 c0    	mov    DWORD PTR ds:0xc003bc14,edx
c000e424:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c000e427:	89 15 04 bc 03 c0    	mov    DWORD PTR ds:0xc003bc04,edx
c000e42d:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c000e430:	01 f1                	add    ecx,esi
c000e432:	11 fb                	adc    ebx,edi
c000e434:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c000e437:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c000e43a:	5b                   	pop    ebx
c000e43b:	5e                   	pop    esi
c000e43c:	5f                   	pop    edi
c000e43d:	c3                   	ret    

c000e43e <switchToThread(ThreadControlBlock*)>:
c000e43e:	53                   	push   ebx
c000e43f:	83 ec 08             	sub    esp,0x8
c000e442:	a1 d0 bb 03 c0       	mov    eax,ds:0xc003bbd0
c000e447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e44b:	85 c0                	test   eax,eax
c000e44d:	75 30                	jne    c000e47f <switchToThread(ThreadControlBlock*)+0x41>
c000e44f:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c000e452:	3c ff                	cmp    al,0xff
c000e454:	74 25                	je     c000e47b <switchToThread(ThreadControlBlock*)+0x3d>
c000e456:	0f b6 d0             	movzx  edx,al
c000e459:	b8 84 03 00 00       	mov    eax,0x384
c000e45e:	29 d0                	sub    eax,edx
c000e460:	c1 e0 10             	shl    eax,0x10
c000e463:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c000e466:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000e469:	e8 72 ff ff ff       	call   c000e3e0 <updateTimeUsed()>
c000e46e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000e472:	83 c4 08             	add    esp,0x8
c000e475:	5b                   	pop    ebx
c000e476:	e9 d1 1d ff ff       	jmp    c000024c <switchToThreadASM>
c000e47b:	31 c0                	xor    eax,eax
c000e47d:	eb e7                	jmp    c000e466 <switchToThread(ThreadControlBlock*)+0x28>
c000e47f:	c7 05 cc bb 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003bbcc,0x1
c000e489:	83 c4 08             	add    esp,0x8
c000e48c:	5b                   	pop    ebx
c000e48d:	c3                   	ret    

c000e48e <Semaphore::Semaphore(int)>:
c000e48e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e492:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e496:	89 10                	mov    DWORD PTR [eax],edx
c000e498:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e49c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000e4a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4b2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000e4b9:	90                   	nop
c000e4ba:	c3                   	ret    
c000e4bb:	90                   	nop

c000e4bc <Mutex::Mutex()>:
c000e4bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4c0:	6a 01                	push   0x1
c000e4c2:	50                   	push   eax
c000e4c3:	e8 c6 ff ff ff       	call   c000e48e <Semaphore::Semaphore(int)>
c000e4c8:	83 c4 08             	add    esp,0x8
c000e4cb:	90                   	nop
c000e4cc:	c3                   	ret    
c000e4cd:	90                   	nop

c000e4ce <Process::createThread(void (*)(void*), void*, int)>:
c000e4ce:	55                   	push   ebp
c000e4cf:	31 c9                	xor    ecx,ecx
c000e4d1:	57                   	push   edi
c000e4d2:	56                   	push   esi
c000e4d3:	53                   	push   ebx
c000e4d4:	83 ec 1c             	sub    esp,0x1c
c000e4d7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e4db:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c000e4e2:	89 f2                	mov    edx,esi
c000e4e4:	0f b7 c2             	movzx  eax,dx
c000e4e7:	83 e2 01             	and    edx,0x1
c000e4ea:	74 14                	je     c000e500 <Process::createThread(void (*)(void*), void*, int)+0x32>
c000e4ec:	d1 f8                	sar    eax,1
c000e4ee:	41                   	inc    ecx
c000e4ef:	89 c2                	mov    edx,eax
c000e4f1:	83 f9 10             	cmp    ecx,0x10
c000e4f4:	75 ee                	jne    c000e4e4 <Process::createThread(void (*)(void*), void*, int)+0x16>
c000e4f6:	83 c4 1c             	add    esp,0x1c
c000e4f9:	31 c0                	xor    eax,eax
c000e4fb:	5b                   	pop    ebx
c000e4fc:	5e                   	pop    esi
c000e4fd:	5f                   	pop    edi
c000e4fe:	5d                   	pop    ebp
c000e4ff:	c3                   	ret    
c000e500:	83 ec 08             	sub    esp,0x8
c000e503:	b8 01 00 00 00       	mov    eax,0x1
c000e508:	d3 e0                	shl    eax,cl
c000e50a:	09 c6                	or     esi,eax
c000e50c:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c000e512:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c000e519:	8d 34 09             	lea    esi,[ecx+ecx*1]
c000e51c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e51f:	01 ce                	add    esi,ecx
c000e521:	89 f0                	mov    eax,esi
c000e523:	c1 e0 05             	shl    eax,0x5
c000e526:	01 c6                	add    esi,eax
c000e528:	8d 04 33             	lea    eax,[ebx+esi*1]
c000e52b:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c000e531:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c000e537:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e53b:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c000e541:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c000e547:	89 ca                	mov    edx,ecx
c000e549:	f7 da                	neg    edx
c000e54b:	c1 e2 15             	shl    edx,0x15
c000e54e:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c000e554:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c000e55a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e55e:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c000e568:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c000e56e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e572:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c000e578:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c000e582:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c000e58c:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c000e593:	50                   	push   eax
c000e594:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e598:	68 f0 bb 03 c0       	push   0xc003bbf0
c000e59d:	e8 3c 05 01 00       	call   c001eade <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5a9:	83 c4 1c             	add    esp,0x1c
c000e5ac:	5b                   	pop    ebx
c000e5ad:	5e                   	pop    esi
c000e5ae:	5f                   	pop    edi
c000e5af:	5d                   	pop    ebp
c000e5b0:	c3                   	ret    
c000e5b1:	90                   	nop

c000e5b2 <Process::createUserThread()>:
c000e5b2:	83 ec 0c             	sub    esp,0xc
c000e5b5:	68 80 00 00 00       	push   0x80
c000e5ba:	6a 00                	push   0x0
c000e5bc:	68 a8 e3 00 c0       	push   0xc000e3a8
c000e5c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c5:	e8 04 ff ff ff       	call   c000e4ce <Process::createThread(void (*)(void*), void*, int)>
c000e5ca:	83 c4 1c             	add    esp,0x1c
c000e5cd:	c3                   	ret    

c000e5ce <setupMultitasking(void (*)())>:
c000e5ce:	56                   	push   esi
c000e5cf:	53                   	push   ebx
c000e5d0:	53                   	push   ebx
c000e5d1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e5d5:	eb 10                	jmp    c000e5e7 <setupMultitasking(void (*)())+0x19>
c000e5d7:	83 ec 0c             	sub    esp,0xc
c000e5da:	68 f0 bb 03 c0       	push   0xc003bbf0
c000e5df:	e8 ea 05 01 00       	call   c001ebce <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e5e4:	83 c4 10             	add    esp,0x10
c000e5e7:	83 ec 0c             	sub    esp,0xc
c000e5ea:	68 f0 bb 03 c0       	push   0xc003bbf0
c000e5ef:	e8 be 05 01 00       	call   c001ebb2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e5f4:	83 c4 10             	add    esp,0x10
c000e5f7:	84 c0                	test   al,al
c000e5f9:	74 dc                	je     c000e5d7 <setupMultitasking(void (*)())+0x9>
c000e5fb:	83 ec 0c             	sub    esp,0xc
c000e5fe:	68 3b 07 00 00       	push   0x73b
c000e603:	e8 aa 3e 00 00       	call   c00124b2 <operator new(unsigned long)>
c000e608:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e60f:	89 c3                	mov    ebx,eax
c000e611:	6a 00                	push   0x0
c000e613:	68 3c 8f 03 c0       	push   0xc0038f3c
c000e618:	6a 01                	push   0x1
c000e61a:	50                   	push   eax
c000e61b:	e8 e4 fb ff ff       	call   c000e204 <Process::Process(bool, char const*, Process*, char**)>
c000e620:	83 c4 18             	add    esp,0x18
c000e623:	89 1d fc bb 03 c0    	mov    DWORD PTR ds:0xc003bbfc,ebx
c000e629:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c000e62f:	68 b4 8f 03 c0       	push   0xc0038fb4
c000e634:	e8 c9 e8 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c000e639:	58                   	pop    eax
c000e63a:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c000e640:	e8 44 20 00 00       	call   c0010689 <setActiveTerminal(VgaText*)>
c000e645:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c000e64d:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c000e653:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e656:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c000e660:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c000e666:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c000e66c:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c000e676:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c000e680:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c000e68a:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c000e690:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c000e696:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c000e6a0:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c000e6a6:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c000e6b0:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000e6b6:	5a                   	pop    edx
c000e6b7:	59                   	pop    ecx
c000e6b8:	68 38 8f 03 c0       	push   0xc0038f38
c000e6bd:	50                   	push   eax
c000e6be:	e8 31 21 ff ff       	call   c00007f4 <strcpy>
c000e6c3:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c000e6ca:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e6ce:	83 c4 14             	add    esp,0x14
c000e6d1:	5b                   	pop    ebx
c000e6d2:	5e                   	pop    esi
c000e6d3:	e9 66 1b ff ff       	jmp    c000023e <switchToThreadASMFirstTime>

c000e6d8 <schedule()>:
c000e6d8:	a1 d0 bb 03 c0       	mov    eax,ds:0xc003bbd0
c000e6dd:	85 c0                	test   eax,eax
c000e6df:	74 0b                	je     c000e6ec <schedule()+0x14>
c000e6e1:	c7 05 cc bb 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc003bbcc,0x1
c000e6eb:	c3                   	ret    
c000e6ec:	53                   	push   ebx
c000e6ed:	83 ec 14             	sub    esp,0x14
c000e6f0:	68 f0 bb 03 c0       	push   0xc003bbf0
c000e6f5:	e8 b8 04 01 00       	call   c001ebb2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e6fa:	83 c4 10             	add    esp,0x10
c000e6fd:	84 c0                	test   al,al
c000e6ff:	75 38                	jne    c000e739 <schedule()+0x61>
c000e701:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e706:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000e709:	4a                   	dec    edx
c000e70a:	74 32                	je     c000e73e <schedule()+0x66>
c000e70c:	83 ec 0c             	sub    esp,0xc
c000e70f:	68 f0 bb 03 c0       	push   0xc003bbf0
c000e714:	e8 63 05 01 00       	call   c001ec7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e719:	c7 04 24 f0 bb 03 c0 	mov    DWORD PTR [esp],0xc003bbf0
c000e720:	89 c3                	mov    ebx,eax
c000e722:	e8 a7 04 01 00       	call   c001ebce <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e727:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c000e72e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e731:	e8 08 fd ff ff       	call   c000e43e <switchToThread(ThreadControlBlock*)>
c000e736:	83 c4 10             	add    esp,0x10
c000e739:	83 c4 08             	add    esp,0x8
c000e73c:	5b                   	pop    ebx
c000e73d:	c3                   	ret    
c000e73e:	83 ec 08             	sub    esp,0x8
c000e741:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e748:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c000e74e:	68 f0 bb 03 c0       	push   0xc003bbf0
c000e753:	e8 86 03 01 00       	call   c001eade <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e758:	83 c4 10             	add    esp,0x10
c000e75b:	eb af                	jmp    c000e70c <schedule()+0x34>

c000e75d <unlockStuff()>:
c000e75d:	a1 d0 bb 03 c0       	mov    eax,ds:0xc003bbd0
c000e762:	48                   	dec    eax
c000e763:	a3 d0 bb 03 c0       	mov    ds:0xc003bbd0,eax
c000e768:	75 09                	jne    c000e773 <unlockStuff()+0x16>
c000e76a:	a1 cc bb 03 c0       	mov    eax,ds:0xc003bbcc
c000e76f:	85 c0                	test   eax,eax
c000e771:	75 05                	jne    c000e778 <unlockStuff()+0x1b>
c000e773:	e9 1d fc ff ff       	jmp    c000e395 <enableIRQs()>
c000e778:	83 ec 0c             	sub    esp,0xc
c000e77b:	c7 05 cc bb 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003bbcc,0x0
c000e785:	e8 4e ff ff ff       	call   c000e6d8 <schedule()>
c000e78a:	83 c4 0c             	add    esp,0xc
c000e78d:	e9 03 fc ff ff       	jmp    c000e395 <enableIRQs()>

c000e792 <forkProcess(regs*)>:
c000e792:	56                   	push   esi
c000e793:	53                   	push   ebx
c000e794:	50                   	push   eax
c000e795:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e79a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e79d:	66 83 b8 24 05 00 00 01 	cmp    WORD PTR [eax+0x524],0x1
c000e7a5:	0f 85 3e 01 00 00    	jne    c000e8e9 <forkProcess(regs*)+0x157>
c000e7ab:	e8 1b fc ff ff       	call   c000e3cb <lockStuff()>
c000e7b0:	83 ec 0c             	sub    esp,0xc
c000e7b3:	68 3b 07 00 00       	push   0x73b
c000e7b8:	e8 f5 3c 00 00       	call   c00124b2 <operator new(unsigned long)>
c000e7bd:	89 c3                	mov    ebx,eax
c000e7bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e7c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e7c7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e7ce:	50                   	push   eax
c000e7cf:	83 c0 0c             	add    eax,0xc
c000e7d2:	50                   	push   eax
c000e7d3:	6a 00                	push   0x0
c000e7d5:	53                   	push   ebx
c000e7d6:	e8 29 fa ff ff       	call   c000e204 <Process::Process(bool, char const*, Process*, char**)>
c000e7db:	8b b3 32 05 00 00    	mov    esi,DWORD PTR [ebx+0x532]
c000e7e1:	83 c4 20             	add    esp,0x20
c000e7e4:	85 f6                	test   esi,esi
c000e7e6:	74 16                	je     c000e7fe <forkProcess(regs*)+0x6c>
c000e7e8:	83 ec 0c             	sub    esp,0xc
c000e7eb:	56                   	push   esi
c000e7ec:	e8 fb 2f 00 00       	call   c00117ec <VAS::~VAS()>
c000e7f1:	59                   	pop    ecx
c000e7f2:	58                   	pop    eax
c000e7f3:	6a 10                	push   0x10
c000e7f5:	56                   	push   esi
c000e7f6:	e8 c6 3c 00 00       	call   c00124c1 <operator delete(void*, unsigned long)>
c000e7fb:	83 c4 10             	add    esp,0x10
c000e7fe:	83 ec 0c             	sub    esp,0xc
c000e801:	66 c7 83 24 05 00 00 01 00 	mov    WORD PTR [ebx+0x524],0x1
c000e80a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e80f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e812:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c000e818:	89 83 2e 05 00 00    	mov    DWORD PTR [ebx+0x52e],eax
c000e81e:	6a 10                	push   0x10
c000e820:	e8 8d 3c 00 00       	call   c00124b2 <operator new(unsigned long)>
c000e825:	59                   	pop    ecx
c000e826:	89 c6                	mov    esi,eax
c000e828:	58                   	pop    eax
c000e829:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e82e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e831:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000e837:	56                   	push   esi
c000e838:	e8 d1 34 00 00       	call   c0011d0e <VAS::VAS(VAS*)>
c000e83d:	89 b3 32 05 00 00    	mov    DWORD PTR [ebx+0x532],esi
c000e843:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000e846:	8b 13                	mov    edx,DWORD PTR [ebx]
c000e848:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c000e84e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e853:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e856:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
c000e85c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e861:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e864:	89 83 10 02 00 00    	mov    DWORD PTR [ebx+0x210],eax
c000e86a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e86f:	8a 40 44             	mov    al,BYTE PTR [eax+0x44]
c000e872:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c000e87c:	88 83 50 02 00 00    	mov    BYTE PTR [ebx+0x250],al
c000e882:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c000e888:	81 c3 0c 02 00 00    	add    ebx,0x20c
c000e88e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e893:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000e896:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000e89d:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000e8a0:	c7 43 0c 01 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1
c000e8a7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000e8ae:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000e8b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e8ba:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000e8bd:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e8c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e8c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000e8c8:	58                   	pop    eax
c000e8c9:	5a                   	pop    edx
c000e8ca:	53                   	push   ebx
c000e8cb:	68 f0 bb 03 c0       	push   0xc003bbf0
c000e8d0:	e8 09 02 01 00       	call   c001eade <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e8d5:	e8 83 fe ff ff       	call   c000e75d <unlockStuff()>
c000e8da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e8df:	83 c4 10             	add    esp,0x10
c000e8e2:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c000e8e5:	5a                   	pop    edx
c000e8e6:	5b                   	pop    ebx
c000e8e7:	5e                   	pop    esi
c000e8e8:	c3                   	ret    
c000e8e9:	83 ec 0c             	sub    esp,0xc
c000e8ec:	68 e8 8f 03 c0       	push   0xc0038fe8
c000e8f1:	e8 0c e6 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c000e8f6:	83 c4 10             	add    esp,0x10
c000e8f9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e8fe:	eb e5                	jmp    c000e8e5 <forkProcess(regs*)+0x153>

c000e900 <Semaphore::tryAcquire()>:
c000e900:	83 ec 0c             	sub    esp,0xc
c000e903:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e907:	e8 bf fa ff ff       	call   c000e3cb <lockStuff()>
c000e90c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e90f:	3b 10                	cmp    edx,DWORD PTR [eax]
c000e911:	7c 0b                	jl     c000e91e <Semaphore::tryAcquire()+0x1e>
c000e913:	e8 45 fe ff ff       	call   c000e75d <unlockStuff()>
c000e918:	31 c0                	xor    eax,eax
c000e91a:	83 c4 0c             	add    esp,0xc
c000e91d:	c3                   	ret    
c000e91e:	42                   	inc    edx
c000e91f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e922:	e8 36 fe ff ff       	call   c000e75d <unlockStuff()>
c000e927:	b0 01                	mov    al,0x1
c000e929:	83 c4 0c             	add    esp,0xc
c000e92c:	c3                   	ret    
c000e92d:	90                   	nop

c000e92e <Semaphore::assertLocked(char const*)>:
c000e92e:	83 ec 0c             	sub    esp,0xc
c000e931:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e935:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e939:	e8 8d fa ff ff       	call   c000e3cb <lockStuff()>
c000e93e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e940:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c000e943:	7c 08                	jl     c000e94d <Semaphore::assertLocked(char const*)+0x1f>
c000e945:	83 c4 0c             	add    esp,0xc
c000e948:	e9 10 fe ff ff       	jmp    c000e75d <unlockStuff()>
c000e94d:	83 ec 0c             	sub    esp,0xc
c000e950:	52                   	push   edx
c000e951:	e8 ca e6 ff ff       	call   c000d020 <panic(char const*)>
c000e956:	83 c4 10             	add    esp,0x10
c000e959:	83 c4 0c             	add    esp,0xc
c000e95c:	e9 fc fd ff ff       	jmp    c000e75d <unlockStuff()>

c000e961 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c000e961:	83 ec 0c             	sub    esp,0xc
c000e964:	e8 26 fa ff ff       	call   c000e38f <getIRQNestingLevel()>
c000e969:	83 ec 08             	sub    esp,0x8
c000e96c:	50                   	push   eax
c000e96d:	68 14 90 03 c0       	push   0xc0039014
c000e972:	e8 8b e5 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c000e977:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e97b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e980:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000e983:	e8 50 fd ff ff       	call   c000e6d8 <schedule()>
c000e988:	e8 19 fa ff ff       	call   c000e3a6 <unlockScheduler()>
c000e98d:	e8 fd f9 ff ff       	call   c000e38f <getIRQNestingLevel()>
c000e992:	5a                   	pop    edx
c000e993:	59                   	pop    ecx
c000e994:	50                   	push   eax
c000e995:	68 48 90 03 c0       	push   0xc0039048
c000e99a:	e8 63 e5 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c000e99f:	83 c4 1c             	add    esp,0x1c
c000e9a2:	c3                   	ret    

c000e9a3 <blockTask(TaskState)>:
c000e9a3:	83 ec 0c             	sub    esp,0xc
c000e9a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e9aa:	e8 f5 f9 ff ff       	call   c000e3a4 <lockScheduler()>
c000e9af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e9b4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000e9b7:	e8 1c fd ff ff       	call   c000e6d8 <schedule()>
c000e9bc:	83 c4 0c             	add    esp,0xc
c000e9bf:	e9 e2 f9 ff ff       	jmp    c000e3a6 <unlockScheduler()>

c000e9c4 <waitTask(int, int*, int)>:
c000e9c4:	83 ec 18             	sub    esp,0x18
c000e9c7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e9cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e9d0:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c000e9d3:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e9d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e9dc:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c000e9df:	6a 07                	push   0x7
c000e9e1:	e8 bd ff ff ff       	call   c000e9a3 <blockTask(TaskState)>
c000e9e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e9eb:	83 c4 10             	add    esp,0x10
c000e9ee:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c000e9f1:	85 d2                	test   edx,edx
c000e9f3:	74 0a                	je     c000e9ff <waitTask(int, int*, int)+0x3b>
c000e9f5:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c000e9f8:	89 02                	mov    DWORD PTR [edx],eax
c000e9fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e9ff:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c000ea02:	83 c4 0c             	add    esp,0xc
c000ea05:	c3                   	ret    

c000ea06 <nanoSleepUntil(unsigned long long)>:
c000ea06:	83 ec 0c             	sub    esp,0xc
c000ea09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea0d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ea11:	3b 05 70 c3 03 c0    	cmp    eax,DWORD PTR ds:0xc003c370
c000ea17:	89 d1                	mov    ecx,edx
c000ea19:	1b 0d 74 c3 03 c0    	sbb    ecx,DWORD PTR ds:0xc003c374
c000ea1f:	73 04                	jae    c000ea25 <nanoSleepUntil(unsigned long long)+0x1f>
c000ea21:	83 c4 0c             	add    esp,0xc
c000ea24:	c3                   	ret    
c000ea25:	e8 a1 f9 ff ff       	call   c000e3cb <lockStuff()>
c000ea2a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000ea30:	83 ec 08             	sub    esp,0x8
c000ea33:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c000ea36:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c000ea39:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c000ea3f:	68 e4 bb 03 c0       	push   0xc003bbe4
c000ea44:	e8 95 00 01 00       	call   c001eade <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000ea49:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000ea50:	e8 4e ff ff ff       	call   c000e9a3 <blockTask(TaskState)>
c000ea55:	83 c4 1c             	add    esp,0x1c
c000ea58:	e9 00 fd ff ff       	jmp    c000e75d <unlockStuff()>

c000ea5d <nanoSleep(unsigned long long)>:
c000ea5d:	a1 70 c3 03 c0       	mov    eax,ds:0xc003c370
c000ea62:	8b 15 74 c3 03 c0    	mov    edx,DWORD PTR ds:0xc003c374
c000ea68:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c000ea6c:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c000ea70:	eb 94                	jmp    c000ea06 <nanoSleepUntil(unsigned long long)>

c000ea72 <sleep(unsigned long long)>:
c000ea72:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c000ea7a:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c000ea7f:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c000ea83:	01 ca                	add    edx,ecx
c000ea85:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ea89:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ea8d:	eb ce                	jmp    c000ea5d <nanoSleep(unsigned long long)>
c000ea8f:	90                   	nop

c000ea90 <Semaphore::acquire()>:
c000ea90:	83 ec 0c             	sub    esp,0xc
c000ea93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ea97:	e8 2f f9 ff ff       	call   c000e3cb <lockStuff()>
c000ea9c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000ea9f:	3b 10                	cmp    edx,DWORD PTR [eax]
c000eaa1:	7d 0c                	jge    c000eaaf <Semaphore::acquire()+0x1f>
c000eaa3:	42                   	inc    edx
c000eaa4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000eaa7:	83 c4 0c             	add    esp,0xc
c000eaaa:	e9 ae fc ff ff       	jmp    c000e75d <unlockStuff()>
c000eaaf:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000eab5:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c000eabc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000eabf:	85 d2                	test   edx,edx
c000eac1:	74 2a                	je     c000eaed <Semaphore::acquire()+0x5d>
c000eac3:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c000eac6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000eacc:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c000eacf:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000ead5:	83 ec 0c             	sub    esp,0xc
c000ead8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000eadb:	6a 05                	push   0x5
c000eadd:	e8 c1 fe ff ff       	call   c000e9a3 <blockTask(TaskState)>
c000eae2:	83 c4 10             	add    esp,0x10
c000eae5:	83 c4 0c             	add    esp,0xc
c000eae8:	e9 70 fc ff ff       	jmp    c000e75d <unlockStuff()>
c000eaed:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000eaf3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000eaf6:	eb d7                	jmp    c000eacf <Semaphore::acquire()+0x3f>

c000eaf8 <execveProcess(char const*, char* const*, char* const*)>:
c000eaf8:	56                   	push   esi
c000eaf9:	53                   	push   ebx
c000eafa:	50                   	push   eax
c000eafb:	e8 cb f8 ff ff       	call   c000e3cb <lockStuff()>
c000eb00:	83 ec 0c             	sub    esp,0xc
c000eb03:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eb08:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eb0b:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c000eb11:	68 3b 07 00 00       	push   0x73b
c000eb16:	e8 97 39 00 00       	call   c00124b2 <operator new(unsigned long)>
c000eb1b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eb1f:	89 c3                	mov    ebx,eax
c000eb21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eb26:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eb29:	ff b0 2a 05 00 00    	push   DWORD PTR [eax+0x52a]
c000eb2f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000eb33:	53                   	push   ebx
c000eb34:	e8 13 f5 ff ff       	call   c000e04c <Process::Process(char const*, Process*, char**)>
c000eb39:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eb3e:	83 c4 20             	add    esp,0x20
c000eb41:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eb44:	85 f6                	test   esi,esi
c000eb46:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb48:	89 03                	mov    DWORD PTR [ebx],eax
c000eb4a:	74 06                	je     c000eb52 <execveProcess(char const*, char* const*, char* const*)+0x5a>
c000eb4c:	89 b3 26 05 00 00    	mov    DWORD PTR [ebx+0x526],esi
c000eb52:	83 ec 0c             	sub    esp,0xc
c000eb55:	53                   	push   ebx
c000eb56:	e8 57 fa ff ff       	call   c000e5b2 <Process::createUserThread()>
c000eb5b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000eb62:	e8 3c fe ff ff       	call   c000e9a3 <blockTask(TaskState)>
c000eb67:	e8 f1 fb ff ff       	call   c000e75d <unlockStuff()>
c000eb6c:	e8 33 f8 ff ff       	call   c000e3a4 <lockScheduler()>
c000eb71:	e8 62 fb ff ff       	call   c000e6d8 <schedule()>
c000eb76:	e8 2b f8 ff ff       	call   c000e3a6 <unlockScheduler()>
c000eb7b:	83 c4 14             	add    esp,0x14
c000eb7e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eb83:	5b                   	pop    ebx
c000eb84:	5e                   	pop    esi
c000eb85:	c3                   	ret    

c000eb86 <taskReturned>:
c000eb86:	83 ec 0c             	sub    esp,0xc
c000eb89:	e8 18 f8 ff ff       	call   c000e3a6 <unlockScheduler()>
c000eb8e:	83 ec 08             	sub    esp,0x8
c000eb91:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eb96:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eb99:	83 c0 0c             	add    eax,0xc
c000eb9c:	50                   	push   eax
c000eb9d:	68 43 8f 03 c0       	push   0xc0038f43
c000eba2:	e8 5b e3 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c000eba7:	83 c4 10             	add    esp,0x10
c000ebaa:	83 ec 0c             	sub    esp,0xc
c000ebad:	6a 02                	push   0x2
c000ebaf:	e8 ef fd ff ff       	call   c000e9a3 <blockTask(TaskState)>
c000ebb4:	e8 eb f7 ff ff       	call   c000e3a4 <lockScheduler()>
c000ebb9:	e8 1a fb ff ff       	call   c000e6d8 <schedule()>
c000ebbe:	e8 e3 f7 ff ff       	call   c000e3a6 <unlockScheduler()>
c000ebc3:	83 c4 10             	add    esp,0x10
c000ebc6:	eb e2                	jmp    c000ebaa <taskReturned+0x24>

c000ebc8 <unblockTask(ThreadControlBlock*)>:
c000ebc8:	53                   	push   ebx
c000ebc9:	83 ec 08             	sub    esp,0x8
c000ebcc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ebd0:	e8 cf f7 ff ff       	call   c000e3a4 <lockScheduler()>
c000ebd5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ebd8:	85 c0                	test   eax,eax
c000ebda:	74 5c                	je     c000ec38 <unblockTask(ThreadControlBlock*)+0x70>
c000ebdc:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ebdf:	48                   	dec    eax
c000ebe0:	74 31                	je     c000ec13 <unblockTask(ThreadControlBlock*)+0x4b>
c000ebe2:	83 ec 0c             	sub    esp,0xc
c000ebe5:	68 f0 bb 03 c0       	push   0xc003bbf0
c000ebea:	e8 8d 00 01 00       	call   c001ec7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	85 c0                	test   eax,eax
c000ebf4:	75 17                	jne    c000ec0d <unblockTask(ThreadControlBlock*)+0x45>
c000ebf6:	eb 65                	jmp    c000ec5d <unblockTask(ThreadControlBlock*)+0x95>
c000ebf8:	83 ec 08             	sub    esp,0x8
c000ebfb:	50                   	push   eax
c000ebfc:	68 f0 bb 03 c0       	push   0xc003bbf0
c000ec01:	e8 7e 00 01 00       	call   c001ec84 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c000ec06:	83 c4 10             	add    esp,0x10
c000ec09:	85 c0                	test   eax,eax
c000ec0b:	74 50                	je     c000ec5d <unblockTask(ThreadControlBlock*)+0x95>
c000ec0d:	39 c3                	cmp    ebx,eax
c000ec0f:	75 e7                	jne    c000ebf8 <unblockTask(ThreadControlBlock*)+0x30>
c000ec11:	eb 1c                	jmp    c000ec2f <unblockTask(ThreadControlBlock*)+0x67>
c000ec13:	83 ec 0c             	sub    esp,0xc
c000ec16:	68 38 91 03 c0       	push   0xc0039138
c000ec1b:	e8 e2 e2 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c000ec20:	c7 04 24 c4 90 03 c0 	mov    DWORD PTR [esp],0xc00390c4
c000ec27:	e8 d6 e2 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c000ec2c:	83 c4 10             	add    esp,0x10
c000ec2f:	83 c4 08             	add    esp,0x8
c000ec32:	5b                   	pop    ebx
c000ec33:	e9 6e f7 ff ff       	jmp    c000e3a6 <unlockScheduler()>
c000ec38:	83 ec 0c             	sub    esp,0xc
c000ec3b:	68 7c 90 03 c0       	push   0xc003907c
c000ec40:	e8 bd e2 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c000ec45:	c7 04 24 c4 90 03 c0 	mov    DWORD PTR [esp],0xc00390c4
c000ec4c:	e8 b1 e2 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c000ec51:	83 c4 10             	add    esp,0x10
c000ec54:	83 c4 08             	add    esp,0x8
c000ec57:	5b                   	pop    ebx
c000ec58:	e9 49 f7 ff ff       	jmp    c000e3a6 <unlockScheduler()>
c000ec5d:	83 ec 08             	sub    esp,0x8
c000ec60:	53                   	push   ebx
c000ec61:	68 f0 bb 03 c0       	push   0xc003bbf0
c000ec66:	e8 73 fe 00 00       	call   c001eade <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000ec6b:	83 c4 10             	add    esp,0x10
c000ec6e:	83 c4 08             	add    esp,0x8
c000ec71:	5b                   	pop    ebx
c000ec72:	e9 2f f7 ff ff       	jmp    c000e3a6 <unlockScheduler()>

c000ec77 <cleanupTerminatedTask(ThreadControlBlock*)>:
c000ec77:	55                   	push   ebp
c000ec78:	57                   	push   edi
c000ec79:	56                   	push   esi
c000ec7a:	53                   	push   ebx
c000ec7b:	83 ec 1c             	sub    esp,0x1c
c000ec7e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ec82:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ec85:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c000ec8b:	85 c9                	test   ecx,ecx
c000ec8d:	7e 20                	jle    c000ecaf <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c000ec8f:	31 f6                	xor    esi,esi
c000ec91:	83 ec 0c             	sub    esp,0xc
c000ec94:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c000ec9b:	46                   	inc    esi
c000ec9c:	e8 6c e8 ff ff       	call   c000d50d <free>
c000eca1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000eca4:	83 c4 10             	add    esp,0x10
c000eca7:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c000ecad:	7f e2                	jg     c000ec91 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c000ecaf:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c000ecb9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000ecbe:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c000ecc1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c000ecc4:	d3 c0                	rol    eax,cl
c000ecc6:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c000eccd:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000ecd0:	89 f7                	mov    edi,esi
c000ecd2:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c000ecda:	0f 85 4f 01 00 00    	jne    c000ee2f <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c000ece0:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000ece6:	85 c0                	test   eax,eax
c000ece8:	0f 84 aa 00 00 00    	je     c000ed98 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c000ecee:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c000ecf1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ecf5:	31 c9                	xor    ecx,ecx
c000ecf7:	eb 10                	jmp    c000ed09 <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c000ecf9:	41                   	inc    ecx
c000ecfa:	83 f9 10             	cmp    ecx,0x10
c000ecfd:	0f 84 95 00 00 00    	je     c000ed98 <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c000ed03:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000ed09:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c000ed10:	d3 fa                	sar    edx,cl
c000ed12:	83 e2 01             	and    edx,0x1
c000ed15:	74 e2                	je     c000ecf9 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ed17:	8d 14 09             	lea    edx,[ecx+ecx*1]
c000ed1a:	01 ca                	add    edx,ecx
c000ed1c:	89 d5                	mov    ebp,edx
c000ed1e:	c1 e5 05             	shl    ebp,0x5
c000ed21:	01 ea                	add    edx,ebp
c000ed23:	01 d0                	add    eax,edx
c000ed25:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c000ed2b:	83 fd 07             	cmp    ebp,0x7
c000ed2e:	75 c9                	jne    c000ecf9 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ed30:	05 40 02 00 00       	add    eax,0x240
c000ed35:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c000ed38:	83 fd ff             	cmp    ebp,0xffffffff
c000ed3b:	0f 8c 01 01 00 00    	jl     c000ee42 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cb>
c000ed41:	0f 84 b2 01 00 00    	je     c000eef9 <cleanupTerminatedTask(ThreadControlBlock*)+0x282>
c000ed47:	85 ed                	test   ebp,ebp
c000ed49:	0f 84 99 01 00 00    	je     c000eee8 <cleanupTerminatedTask(ThreadControlBlock*)+0x271>
c000ed4f:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c000ed51:	75 a6                	jne    c000ecf9 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ed53:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c000ed59:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ed5d:	01 d0                	add    eax,edx
c000ed5f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ed63:	83 ec 0c             	sub    esp,0xc
c000ed66:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c000ed6c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ed6f:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c000ed75:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c000ed7c:	50                   	push   eax
c000ed7d:	e8 46 fe ff ff       	call   c000ebc8 <unblockTask(ThreadControlBlock*)>
c000ed82:	83 c4 10             	add    esp,0x10
c000ed85:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000ed88:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ed8c:	89 f7                	mov    edi,esi
c000ed8e:	41                   	inc    ecx
c000ed8f:	83 f9 10             	cmp    ecx,0x10
c000ed92:	0f 85 6b ff ff ff    	jne    c000ed03 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c000ed98:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c000ed9e:	85 c0                	test   eax,eax
c000eda0:	74 5d                	je     c000edff <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c000eda2:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c000eda8:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c000edae:	74 4f                	je     c000edff <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c000edb0:	83 ec 0c             	sub    esp,0xc
c000edb3:	68 f0 bb 03 c0       	push   0xc003bbf0
c000edb8:	e8 bf fe 00 00       	call   c001ec7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000edbd:	c7 04 24 f0 bb 03 c0 	mov    DWORD PTR [esp],0xc003bbf0
c000edc4:	89 c7                	mov    edi,eax
c000edc6:	e8 e7 fd 00 00       	call   c001ebb2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000edcb:	83 c4 10             	add    esp,0x10
c000edce:	84 c0                	test   al,al
c000edd0:	0f 84 dd 00 00 00    	je     c000eeb3 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c000edd6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000edd9:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000eddf:	85 d2                	test   edx,edx
c000ede1:	74 0f                	je     c000edf2 <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c000ede3:	83 ec 0c             	sub    esp,0xc
c000ede6:	8b 02                	mov    eax,DWORD PTR [edx]
c000ede8:	52                   	push   edx
c000ede9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000edec:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000edef:	83 c4 10             	add    esp,0x10
c000edf2:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c000edfc:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000edff:	8b b7 32 05 00 00    	mov    esi,DWORD PTR [edi+0x532]
c000ee05:	85 f6                	test   esi,esi
c000ee07:	74 16                	je     c000ee1f <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c000ee09:	83 ec 0c             	sub    esp,0xc
c000ee0c:	56                   	push   esi
c000ee0d:	e8 da 29 00 00       	call   c00117ec <VAS::~VAS()>
c000ee12:	58                   	pop    eax
c000ee13:	5a                   	pop    edx
c000ee14:	6a 10                	push   0x10
c000ee16:	56                   	push   esi
c000ee17:	e8 a5 36 00 00       	call   c00124c1 <operator delete(void*, unsigned long)>
c000ee1c:	83 c4 10             	add    esp,0x10
c000ee1f:	83 ec 0c             	sub    esp,0xc
c000ee22:	68 5f 8f 03 c0       	push   0xc0038f5f
c000ee27:	e8 d6 e0 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c000ee2c:	83 c4 10             	add    esp,0x10
c000ee2f:	83 ec 08             	sub    esp,0x8
c000ee32:	6a 63                	push   0x63
c000ee34:	53                   	push   ebx
c000ee35:	e8 87 36 00 00       	call   c00124c1 <operator delete(void*, unsigned long)>
c000ee3a:	83 c4 2c             	add    esp,0x2c
c000ee3d:	5b                   	pop    ebx
c000ee3e:	5e                   	pop    esi
c000ee3f:	5f                   	pop    edi
c000ee40:	5d                   	pop    ebp
c000ee41:	c3                   	ret    
c000ee42:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ee46:	83 ec 0c             	sub    esp,0xc
c000ee49:	68 7c 91 03 c0       	push   0xc003917c
c000ee4e:	e8 cd e1 ff ff       	call   c000d020 <panic(char const*)>
c000ee53:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c000ee56:	83 c4 10             	add    esp,0x10
c000ee59:	89 f7                	mov    edi,esi
c000ee5b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ee5f:	e9 95 fe ff ff       	jmp    c000ecf9 <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c000ee64:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000ee6a:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c000ee70:	75 1c                	jne    c000ee8e <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000ee72:	83 ec 0c             	sub    esp,0xc
c000ee75:	68 e4 91 03 c0       	push   0xc00391e4
c000ee7a:	e8 83 e0 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c000ee7f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000ee86:	e8 18 fb ff ff       	call   c000e9a3 <blockTask(TaskState)>
c000ee8b:	83 c4 10             	add    esp,0x10
c000ee8e:	83 ec 08             	sub    esp,0x8
c000ee91:	56                   	push   esi
c000ee92:	68 f0 bb 03 c0       	push   0xc003bbf0
c000ee97:	e8 42 fc 00 00       	call   c001eade <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000ee9c:	c7 04 24 f0 bb 03 c0 	mov    DWORD PTR [esp],0xc003bbf0
c000eea3:	e8 d4 fd 00 00       	call   c001ec7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000eea8:	83 c4 10             	add    esp,0x10
c000eeab:	39 f8                	cmp    eax,edi
c000eead:	0f 84 23 ff ff ff    	je     c000edd6 <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c000eeb3:	83 ec 0c             	sub    esp,0xc
c000eeb6:	68 f0 bb 03 c0       	push   0xc003bbf0
c000eebb:	e8 bc fd 00 00       	call   c001ec7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000eec0:	c7 04 24 f0 bb 03 c0 	mov    DWORD PTR [esp],0xc003bbf0
c000eec7:	89 c6                	mov    esi,eax
c000eec9:	e8 00 fd 00 00       	call   c001ebce <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000eece:	83 c4 10             	add    esp,0x10
c000eed1:	39 f3                	cmp    ebx,esi
c000eed3:	74 b9                	je     c000ee8e <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000eed5:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c000eed8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000eedb:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c000eee1:	75 ab                	jne    c000ee8e <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c000eee3:	e9 7c ff ff ff       	jmp    c000ee64 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ed>
c000eee8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000eeec:	83 ec 0c             	sub    esp,0xc
c000eeef:	68 b0 91 03 c0       	push   0xc00391b0
c000eef4:	e9 55 ff ff ff       	jmp    c000ee4e <cleanupTerminatedTask(ThreadControlBlock*)+0x1d7>
c000eef9:	8b 36                	mov    esi,DWORD PTR [esi]
c000eefb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000eeff:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c000ef02:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ef05:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c000ef0b:	01 d7                	add    edi,edx
c000ef0d:	89 f8                	mov    eax,edi
c000ef0f:	e9 4b fe ff ff       	jmp    c000ed5f <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c000ef14 <cleanerTaskFunction(void*)>:
c000ef14:	53                   	push   ebx
c000ef15:	83 ec 08             	sub    esp,0x8
c000ef18:	e8 89 f4 ff ff       	call   c000e3a6 <unlockScheduler()>
c000ef1d:	e8 82 f4 ff ff       	call   c000e3a4 <lockScheduler()>
c000ef22:	80 3d b4 bb 03 c0 00 	cmp    BYTE PTR ds:0xc003bbb4,0x0
c000ef29:	75 72                	jne    c000ef9d <cleanerTaskFunction(void*)+0x89>
c000ef2b:	83 ec 0c             	sub    esp,0xc
c000ef2e:	6a 02                	push   0x2
c000ef30:	e8 2c fa ff ff       	call   c000e961 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c000ef35:	83 c4 10             	add    esp,0x10
c000ef38:	c6 05 b4 bb 03 c0 00 	mov    BYTE PTR ds:0xc003bbb4,0x0
c000ef3f:	e8 87 f4 ff ff       	call   c000e3cb <lockStuff()>
c000ef44:	e8 5b f4 ff ff       	call   c000e3a4 <lockScheduler()>
c000ef49:	83 ec 0c             	sub    esp,0xc
c000ef4c:	68 d8 bb 03 c0       	push   0xc003bbd8
c000ef51:	e8 5c fc 00 00       	call   c001ebb2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000ef56:	83 c4 10             	add    esp,0x10
c000ef59:	84 c0                	test   al,al
c000ef5b:	75 28                	jne    c000ef85 <cleanerTaskFunction(void*)+0x71>
c000ef5d:	83 ec 0c             	sub    esp,0xc
c000ef60:	68 d8 bb 03 c0       	push   0xc003bbd8
c000ef65:	e8 12 fd 00 00       	call   c001ec7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000ef6a:	c7 04 24 d8 bb 03 c0 	mov    DWORD PTR [esp],0xc003bbd8
c000ef71:	89 c3                	mov    ebx,eax
c000ef73:	e8 56 fc 00 00       	call   c001ebce <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000ef78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef7b:	e8 f7 fc ff ff       	call   c000ec77 <cleanupTerminatedTask(ThreadControlBlock*)>
c000ef80:	83 c4 10             	add    esp,0x10
c000ef83:	eb c4                	jmp    c000ef49 <cleanerTaskFunction(void*)+0x35>
c000ef85:	e8 1c f4 ff ff       	call   c000e3a6 <unlockScheduler()>
c000ef8a:	e8 ce f7 ff ff       	call   c000e75d <unlockStuff()>
c000ef8f:	e8 10 f4 ff ff       	call   c000e3a4 <lockScheduler()>
c000ef94:	80 3d b4 bb 03 c0 00 	cmp    BYTE PTR ds:0xc003bbb4,0x0
c000ef9b:	74 8e                	je     c000ef2b <cleanerTaskFunction(void*)+0x17>
c000ef9d:	e8 04 f4 ff ff       	call   c000e3a6 <unlockScheduler()>
c000efa2:	eb 94                	jmp    c000ef38 <cleanerTaskFunction(void*)+0x24>

c000efa4 <terminateTask(int)>:
c000efa4:	83 ec 0c             	sub    esp,0xc
c000efa7:	e8 1f f4 ff ff       	call   c000e3cb <lockStuff()>
c000efac:	e8 f3 f3 ff ff       	call   c000e3a4 <lockScheduler()>
c000efb1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000efb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000efba:	83 ec 08             	sub    esp,0x8
c000efbd:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c000efc0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000efc5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000efc8:	50                   	push   eax
c000efc9:	68 d8 bb 03 c0       	push   0xc003bbd8
c000efce:	e8 0b fb 00 00       	call   c001eade <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000efd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000efd8:	83 c4 10             	add    esp,0x10
c000efdb:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c000efe2:	a1 b0 bb 03 c0       	mov    eax,ds:0xc003bbb0
c000efe7:	85 c0                	test   eax,eax
c000efe9:	74 2e                	je     c000f019 <terminateTask(int)+0x75>
c000efeb:	83 ec 0c             	sub    esp,0xc
c000efee:	c6 05 b4 bb 03 c0 01 	mov    BYTE PTR ds:0xc003bbb4,0x1
c000eff5:	50                   	push   eax
c000eff6:	e8 cd fb ff ff       	call   c000ebc8 <unblockTask(ThreadControlBlock*)>
c000effb:	83 c4 10             	add    esp,0x10
c000effe:	e8 a3 f3 ff ff       	call   c000e3a6 <unlockScheduler()>
c000f003:	e8 55 f7 ff ff       	call   c000e75d <unlockStuff()>
c000f008:	e8 97 f3 ff ff       	call   c000e3a4 <lockScheduler()>
c000f00d:	e8 c6 f6 ff ff       	call   c000e6d8 <schedule()>
c000f012:	e8 8f f3 ff ff       	call   c000e3a6 <unlockScheduler()>
c000f017:	eb ef                	jmp    c000f008 <terminateTask(int)+0x64>
c000f019:	83 ec 0c             	sub    esp,0xc
c000f01c:	68 6d 8f 03 c0       	push   0xc0038f6d
c000f021:	e8 dc de ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c000f026:	83 c4 10             	add    esp,0x10
c000f029:	eb d3                	jmp    c000effe <terminateTask(int)+0x5a>
c000f02b:	90                   	nop

c000f02c <Semaphore::release()>:
c000f02c:	83 ec 0c             	sub    esp,0xc
c000f02f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f033:	e8 93 f3 ff ff       	call   c000e3cb <lockStuff()>
c000f038:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000f03b:	85 d2                	test   edx,edx
c000f03d:	74 1a                	je     c000f059 <Semaphore::release()+0x2d>
c000f03f:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c000f042:	83 ec 0c             	sub    esp,0xc
c000f045:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000f048:	52                   	push   edx
c000f049:	e8 7a fb ff ff       	call   c000ebc8 <unblockTask(ThreadControlBlock*)>
c000f04e:	83 c4 10             	add    esp,0x10
c000f051:	83 c4 0c             	add    esp,0xc
c000f054:	e9 04 f7 ff ff       	jmp    c000e75d <unlockStuff()>
c000f059:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c000f05c:	83 c4 0c             	add    esp,0xc
c000f05f:	e9 f9 f6 ff ff       	jmp    c000e75d <unlockStuff()>

c000f064 <__static_initialization_and_destruction_0(int, int)>:
c000f064:	83 ec 0c             	sub    esp,0xc
c000f067:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f06c:	0f 85 88 00 00 00    	jne    c000f0fa <__static_initialization_and_destruction_0(int, int)+0x96>
c000f072:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000f07a:	75 7e                	jne    c000f0fa <__static_initialization_and_destruction_0(int, int)+0x96>
c000f07c:	83 ec 0c             	sub    esp,0xc
c000f07f:	68 f0 bb 03 c0       	push   0xc003bbf0
c000f084:	e8 fd f9 00 00       	call   c001ea86 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000f089:	83 c4 10             	add    esp,0x10
c000f08c:	83 ec 04             	sub    esp,0x4
c000f08f:	68 c8 ad 03 c0       	push   0xc003adc8
c000f094:	68 f0 bb 03 c0       	push   0xc003bbf0
c000f099:	68 46 ea 01 c0       	push   0xc001ea46
c000f09e:	e8 9a 33 00 00       	call   c001243d <__cxa_atexit>
c000f0a3:	83 c4 10             	add    esp,0x10
c000f0a6:	83 ec 0c             	sub    esp,0xc
c000f0a9:	68 e4 bb 03 c0       	push   0xc003bbe4
c000f0ae:	e8 d3 f9 00 00       	call   c001ea86 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000f0b3:	83 c4 10             	add    esp,0x10
c000f0b6:	83 ec 04             	sub    esp,0x4
c000f0b9:	68 c8 ad 03 c0       	push   0xc003adc8
c000f0be:	68 e4 bb 03 c0       	push   0xc003bbe4
c000f0c3:	68 46 ea 01 c0       	push   0xc001ea46
c000f0c8:	e8 70 33 00 00       	call   c001243d <__cxa_atexit>
c000f0cd:	83 c4 10             	add    esp,0x10
c000f0d0:	83 ec 0c             	sub    esp,0xc
c000f0d3:	68 d8 bb 03 c0       	push   0xc003bbd8
c000f0d8:	e8 a9 f9 00 00       	call   c001ea86 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c000f0dd:	83 c4 10             	add    esp,0x10
c000f0e0:	83 ec 04             	sub    esp,0x4
c000f0e3:	68 c8 ad 03 c0       	push   0xc003adc8
c000f0e8:	68 d8 bb 03 c0       	push   0xc003bbd8
c000f0ed:	68 46 ea 01 c0       	push   0xc001ea46
c000f0f2:	e8 46 33 00 00       	call   c001243d <__cxa_atexit>
c000f0f7:	83 c4 10             	add    esp,0x10
c000f0fa:	90                   	nop
c000f0fb:	83 c4 0c             	add    esp,0xc
c000f0fe:	c3                   	ret    

c000f0ff <_GLOBAL__sub_I_kernelProcess>:
c000f0ff:	83 ec 0c             	sub    esp,0xc
c000f102:	83 ec 08             	sub    esp,0x8
c000f105:	68 ff ff 00 00       	push   0xffff
c000f10a:	6a 01                	push   0x1
c000f10c:	e8 53 ff ff ff       	call   c000f064 <__static_initialization_and_destruction_0(int, int)>
c000f111:	83 c4 10             	add    esp,0x10
c000f114:	83 c4 0c             	add    esp,0xc
c000f117:	c3                   	ret    

c000f118 <sysCallGetPID(regs*)>:
c000f118:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f11d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f120:	8b 00                	mov    eax,DWORD PTR [eax]
c000f122:	99                   	cdq    
c000f123:	c3                   	ret    

c000f124 <sysCallSeekDir(regs*)>:
c000f124:	31 c0                	xor    eax,eax
c000f126:	31 d2                	xor    edx,edx
c000f128:	c3                   	ret    

c000f129 <sysCallTellDir(regs*)>:
c000f129:	31 c0                	xor    eax,eax
c000f12b:	31 d2                	xor    edx,edx
c000f12d:	c3                   	ret    

c000f12e <sysCallVerify(regs*)>:
c000f12e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f132:	31 d2                	xor    edx,edx
c000f134:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f137:	c3                   	ret    

c000f138 <sysCallGetArgc(regs*)>:
c000f138:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f13d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f140:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c000f146:	99                   	cdq    
c000f147:	c3                   	ret    

c000f148 <sysFormatDisk(regs*)>:
c000f148:	56                   	push   esi
c000f149:	53                   	push   ebx
c000f14a:	53                   	push   ebx
c000f14b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f14f:	8b 1d 60 be 03 c0    	mov    ebx,DWORD PTR ds:0xc003be60
c000f155:	eb 25                	jmp    c000f17c <sysFormatDisk(regs*)+0x34>
c000f157:	83 ec 0c             	sub    esp,0xc
c000f15a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000f15d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000f15f:	ff 76 28             	push   DWORD PTR [esi+0x28]
c000f162:	ff 76 24             	push   DWORD PTR [esi+0x24]
c000f165:	50                   	push   eax
c000f166:	ff 34 85 00 c3 03 c0 	push   DWORD PTR [eax*4-0x3ffc3d00]
c000f16d:	53                   	push   ebx
c000f16e:	ff 52 48             	call   DWORD PTR [edx+0x48]
c000f171:	83 c4 20             	add    esp,0x20
c000f174:	83 f8 08             	cmp    eax,0x8
c000f177:	75 12                	jne    c000f18b <sysFormatDisk(regs*)+0x43>
c000f179:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000f17c:	85 db                	test   ebx,ebx
c000f17e:	75 d7                	jne    c000f157 <sysFormatDisk(regs*)+0xf>
c000f180:	59                   	pop    ecx
c000f181:	b8 03 00 00 00       	mov    eax,0x3
c000f186:	31 d2                	xor    edx,edx
c000f188:	5b                   	pop    ebx
c000f189:	5e                   	pop    esi
c000f18a:	c3                   	ret    
c000f18b:	85 c0                	test   eax,eax
c000f18d:	74 1b                	je     c000f1aa <sysFormatDisk(regs*)+0x62>
c000f18f:	83 f8 09             	cmp    eax,0x9
c000f192:	74 0b                	je     c000f19f <sysFormatDisk(regs*)+0x57>
c000f194:	59                   	pop    ecx
c000f195:	b8 02 00 00 00       	mov    eax,0x2
c000f19a:	31 d2                	xor    edx,edx
c000f19c:	5b                   	pop    ebx
c000f19d:	5e                   	pop    esi
c000f19e:	c3                   	ret    
c000f19f:	59                   	pop    ecx
c000f1a0:	b8 01 00 00 00       	mov    eax,0x1
c000f1a5:	31 d2                	xor    edx,edx
c000f1a7:	5b                   	pop    ebx
c000f1a8:	5e                   	pop    esi
c000f1a9:	c3                   	ret    
c000f1aa:	59                   	pop    ecx
c000f1ab:	31 c0                	xor    eax,eax
c000f1ad:	31 d2                	xor    edx,edx
c000f1af:	5b                   	pop    ebx
c000f1b0:	5e                   	pop    esi
c000f1b1:	c3                   	ret    

c000f1b2 <sysSetDiskVolumeLabel(regs*)>:
c000f1b2:	56                   	push   esi
c000f1b3:	53                   	push   ebx
c000f1b4:	53                   	push   ebx
c000f1b5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f1b9:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000f1bc:	83 f8 19             	cmp    eax,0x19
c000f1bf:	77 29                	ja     c000f1ea <sysSetDiskVolumeLabel(regs*)+0x38>
c000f1c1:	8b 0c 85 00 c3 03 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffc3d00]
c000f1c8:	85 c9                	test   ecx,ecx
c000f1ca:	74 1e                	je     c000f1ea <sysSetDiskVolumeLabel(regs*)+0x38>
c000f1cc:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c000f1cf:	85 d2                	test   edx,edx
c000f1d1:	74 17                	je     c000f1ea <sysSetDiskVolumeLabel(regs*)+0x38>
c000f1d3:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c000f1d9:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f1db:	52                   	push   edx
c000f1dc:	50                   	push   eax
c000f1dd:	51                   	push   ecx
c000f1de:	53                   	push   ebx
c000f1df:	ff 56 58             	call   DWORD PTR [esi+0x58]
c000f1e2:	83 c4 10             	add    esp,0x10
c000f1e5:	99                   	cdq    
c000f1e6:	59                   	pop    ecx
c000f1e7:	5b                   	pop    ebx
c000f1e8:	5e                   	pop    esi
c000f1e9:	c3                   	ret    
c000f1ea:	59                   	pop    ecx
c000f1eb:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000f1f0:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f1f5:	5b                   	pop    ebx
c000f1f6:	5e                   	pop    esi
c000f1f7:	c3                   	ret    

c000f1f8 <sysGetDiskVolumeLabel(regs*)>:
c000f1f8:	57                   	push   edi
c000f1f9:	56                   	push   esi
c000f1fa:	53                   	push   ebx
c000f1fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1ff:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000f202:	83 fa 19             	cmp    edx,0x19
c000f205:	77 34                	ja     c000f23b <sysGetDiskVolumeLabel(regs*)+0x43>
c000f207:	8b 0c 95 00 c3 03 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffc3d00]
c000f20e:	85 c9                	test   ecx,ecx
c000f210:	74 29                	je     c000f23b <sysGetDiskVolumeLabel(regs*)+0x43>
c000f212:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c000f215:	85 db                	test   ebx,ebx
c000f217:	74 22                	je     c000f23b <sysGetDiskVolumeLabel(regs*)+0x43>
c000f219:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000f21c:	85 c0                	test   eax,eax
c000f21e:	74 1b                	je     c000f23b <sysGetDiskVolumeLabel(regs*)+0x43>
c000f220:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c000f226:	83 ec 0c             	sub    esp,0xc
c000f229:	8b 3e                	mov    edi,DWORD PTR [esi]
c000f22b:	50                   	push   eax
c000f22c:	53                   	push   ebx
c000f22d:	52                   	push   edx
c000f22e:	51                   	push   ecx
c000f22f:	56                   	push   esi
c000f230:	ff 57 54             	call   DWORD PTR [edi+0x54]
c000f233:	83 c4 20             	add    esp,0x20
c000f236:	99                   	cdq    
c000f237:	5b                   	pop    ebx
c000f238:	5e                   	pop    esi
c000f239:	5f                   	pop    edi
c000f23a:	c3                   	ret    
c000f23b:	5b                   	pop    ebx
c000f23c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c000f241:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f246:	5e                   	pop    esi
c000f247:	5f                   	pop    edi
c000f248:	c3                   	ret    

c000f249 <sysShutdown(regs*)>:
c000f249:	83 ec 0c             	sub    esp,0xc
c000f24c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f250:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f253:	85 c0                	test   eax,eax
c000f255:	74 24                	je     c000f27b <sysShutdown(regs*)+0x32>
c000f257:	48                   	dec    eax
c000f258:	74 0e                	je     c000f268 <sysShutdown(regs*)+0x1f>
c000f25a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f25f:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f264:	83 c4 0c             	add    esp,0xc
c000f267:	c3                   	ret    
c000f268:	a1 80 c3 03 c0       	mov    eax,ds:0xc003c380
c000f26d:	85 c0                	test   eax,eax
c000f26f:	74 02                	je     c000f273 <sysShutdown(regs*)+0x2a>
c000f271:	ff d0                	call   eax
c000f273:	31 c0                	xor    eax,eax
c000f275:	31 d2                	xor    edx,edx
c000f277:	83 c4 0c             	add    esp,0xc
c000f27a:	c3                   	ret    
c000f27b:	a1 a8 b9 03 c0       	mov    eax,ds:0xc003b9a8
c000f280:	8b 10                	mov    edx,DWORD PTR [eax]
c000f282:	6a 00                	push   0x0
c000f284:	6a 00                	push   0x0
c000f286:	6a 00                	push   0x0
c000f288:	50                   	push   eax
c000f289:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000f28c:	83 c4 10             	add    esp,0x10
c000f28f:	eb c9                	jmp    c000f25a <sysShutdown(regs*)+0x11>

c000f291 <sysCallGetCwd(regs*)>:
c000f291:	83 ec 10             	sub    esp,0x10
c000f294:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f298:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000f29b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000f29e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f2a3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f2a6:	e8 a6 39 00 00       	call   c0012c51 <getcwd(Process*, char*, int)>
c000f2ab:	83 c4 1c             	add    esp,0x1c
c000f2ae:	99                   	cdq    
c000f2af:	c3                   	ret    

c000f2b0 <sysCallSetCwd(regs*)>:
c000f2b0:	83 ec 14             	sub    esp,0x14
c000f2b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f2b7:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000f2ba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f2bf:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f2c2:	e8 b4 39 00 00       	call   c0012c7b <setcwd(Process*, char*)>
c000f2c7:	83 c4 1c             	add    esp,0x1c
c000f2ca:	99                   	cdq    
c000f2cb:	c3                   	ret    

c000f2cc <sysCallRealpath(regs*)>:
c000f2cc:	83 ec 0c             	sub    esp,0xc
c000f2cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f2d3:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000f2d6:	85 d2                	test   edx,edx
c000f2d8:	74 07                	je     c000f2e1 <sysCallRealpath(regs*)+0x15>
c000f2da:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f2dd:	85 c0                	test   eax,eax
c000f2df:	75 0b                	jne    c000f2ec <sysCallRealpath(regs*)+0x20>
c000f2e1:	b8 01 00 00 00       	mov    eax,0x1
c000f2e6:	31 d2                	xor    edx,edx
c000f2e8:	83 c4 0c             	add    esp,0xc
c000f2eb:	c3                   	ret    
c000f2ec:	51                   	push   ecx
c000f2ed:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000f2f3:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000f2f6:	81 c1 0c 01 00 00    	add    ecx,0x10c
c000f2fc:	51                   	push   ecx
c000f2fd:	52                   	push   edx
c000f2fe:	50                   	push   eax
c000f2ff:	e8 32 34 00 00       	call   c0012736 <standardiseFiles(char*, char const*, char const*)>
c000f304:	83 c4 10             	add    esp,0x10
c000f307:	31 c0                	xor    eax,eax
c000f309:	31 d2                	xor    edx,edx
c000f30b:	83 c4 0c             	add    esp,0xc
c000f30e:	c3                   	ret    

c000f30f <sysCallOpen(regs*)>:
c000f30f:	56                   	push   esi
c000f310:	53                   	push   ebx
c000f311:	81 ec 04 01 00 00    	sub    esp,0x104
c000f317:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c000f31e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f321:	85 d2                	test   edx,edx
c000f323:	0f 84 c3 00 00 00    	je     c000f3ec <sysCallOpen(regs*)+0xdd>
c000f329:	50                   	push   eax
c000f32a:	68 b3 92 03 c0       	push   0xc00392b3
c000f32f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f332:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f336:	56                   	push   esi
c000f337:	e8 fa 33 00 00       	call   c0012736 <standardiseFiles(char*, char const*, char const*)>
c000f33c:	89 34 24             	mov    DWORD PTR [esp],esi
c000f33f:	e8 bd 13 ff ff       	call   c0000701 <strlen>
c000f344:	83 c4 10             	add    esp,0x10
c000f347:	48                   	dec    eax
c000f348:	74 1d                	je     c000f367 <sysCallOpen(regs*)+0x58>
c000f34a:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c000f34d:	eb 0f                	jmp    c000f35e <sysCallOpen(regs*)+0x4f>
c000f34f:	80 fa 3a             	cmp    dl,0x3a
c000f352:	74 0f                	je     c000f363 <sysCallOpen(regs*)+0x54>
c000f354:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c000f358:	48                   	dec    eax
c000f359:	74 0c                	je     c000f367 <sysCallOpen(regs*)+0x58>
c000f35b:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c000f35e:	80 fa 2e             	cmp    dl,0x2e
c000f361:	75 ec                	jne    c000f34f <sysCallOpen(regs*)+0x40>
c000f363:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c000f367:	83 ec 0c             	sub    esp,0xc
c000f36a:	68 14 01 00 00       	push   0x114
c000f36f:	e8 3e 31 00 00       	call   c00124b2 <operator new(unsigned long)>
c000f374:	83 c4 0c             	add    esp,0xc
c000f377:	89 c6                	mov    esi,eax
c000f379:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f37e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f381:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f384:	56                   	push   esi
c000f385:	e8 56 35 00 00       	call   c00128e0 <File::File(char const*, Process*)>
c000f38a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000f38d:	83 c4 10             	add    esp,0x10
c000f390:	0f b6 d0             	movzx  edx,al
c000f393:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c000f396:	89 c2                	mov    edx,eax
c000f398:	83 e2 01             	and    edx,0x1
c000f39b:	a8 02                	test   al,0x2
c000f39d:	74 03                	je     c000f3a2 <sysCallOpen(regs*)+0x93>
c000f39f:	83 ca 02             	or     edx,0x2
c000f3a2:	a8 04                	test   al,0x4
c000f3a4:	74 03                	je     c000f3a9 <sysCallOpen(regs*)+0x9a>
c000f3a6:	83 ca 04             	or     edx,0x4
c000f3a9:	a8 08                	test   al,0x8
c000f3ab:	74 03                	je     c000f3b0 <sysCallOpen(regs*)+0xa1>
c000f3ad:	83 ca 0a             	or     edx,0xa
c000f3b0:	a8 10                	test   al,0x10
c000f3b2:	74 03                	je     c000f3b7 <sysCallOpen(regs*)+0xa8>
c000f3b4:	83 ca 12             	or     edx,0x12
c000f3b7:	83 ec 08             	sub    esp,0x8
c000f3ba:	52                   	push   edx
c000f3bb:	56                   	push   esi
c000f3bc:	e8 83 35 00 00       	call   c0012944 <File::open(FileOpenMode)>
c000f3c1:	83 c4 10             	add    esp,0x10
c000f3c4:	85 c0                	test   eax,eax
c000f3c6:	75 24                	jne    c000f3ec <sysCallOpen(regs*)+0xdd>
c000f3c8:	83 ec 0c             	sub    esp,0xc
c000f3cb:	56                   	push   esi
c000f3cc:	e8 05 1d 00 00       	call   c00110d6 <UnixFile::getFileDescriptor()>
c000f3d1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f3d4:	83 c4 10             	add    esp,0x10
c000f3d7:	89 02                	mov    DWORD PTR [edx],eax
c000f3d9:	c1 f8 1f             	sar    eax,0x1f
c000f3dc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000f3df:	81 c4 04 01 00 00    	add    esp,0x104
c000f3e5:	31 c0                	xor    eax,eax
c000f3e7:	31 d2                	xor    edx,edx
c000f3e9:	5b                   	pop    ebx
c000f3ea:	5e                   	pop    esi
c000f3eb:	c3                   	ret    
c000f3ec:	81 c4 04 01 00 00    	add    esp,0x104
c000f3f2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f3f7:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f3fc:	5b                   	pop    ebx
c000f3fd:	5e                   	pop    esi
c000f3fe:	c3                   	ret    

c000f3ff <sysCallReadDir(regs*)>:
c000f3ff:	53                   	push   ebx
c000f400:	83 ec 18             	sub    esp,0x18
c000f403:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f407:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000f40a:	83 f8 02             	cmp    eax,0x2
c000f40d:	77 0c                	ja     c000f41b <sysCallReadDir(regs*)+0x1c>
c000f40f:	b8 01 00 00 00       	mov    eax,0x1
c000f414:	31 d2                	xor    edx,edx
c000f416:	83 c4 18             	add    esp,0x18
c000f419:	5b                   	pop    ebx
c000f41a:	c3                   	ret    
c000f41b:	83 ec 0c             	sub    esp,0xc
c000f41e:	50                   	push   eax
c000f41f:	e8 17 1e 00 00       	call   c001123b <getFromFileDescriptor(int)>
c000f424:	83 c4 10             	add    esp,0x10
c000f427:	85 c0                	test   eax,eax
c000f429:	74 37                	je     c000f462 <sysCallReadDir(regs*)+0x63>
c000f42b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f433:	83 ec 0c             	sub    esp,0xc
c000f436:	8b 10                	mov    edx,DWORD PTR [eax]
c000f438:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000f43c:	51                   	push   ecx
c000f43d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f440:	6a 00                	push   0x0
c000f442:	68 10 01 00 00       	push   0x110
c000f447:	50                   	push   eax
c000f448:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000f44b:	83 c4 20             	add    esp,0x20
c000f44e:	85 c0                	test   eax,eax
c000f450:	74 0c                	je     c000f45e <sysCallReadDir(regs*)+0x5f>
c000f452:	83 f8 07             	cmp    eax,0x7
c000f455:	74 b8                	je     c000f40f <sysCallReadDir(regs*)+0x10>
c000f457:	b8 02 00 00 00       	mov    eax,0x2
c000f45c:	eb b6                	jmp    c000f414 <sysCallReadDir(regs*)+0x15>
c000f45e:	31 c0                	xor    eax,eax
c000f460:	eb b2                	jmp    c000f414 <sysCallReadDir(regs*)+0x15>
c000f462:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f467:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f46c:	eb a8                	jmp    c000f416 <sysCallReadDir(regs*)+0x17>

c000f46e <sysCallIsATTY(regs*)>:
c000f46e:	83 ec 0c             	sub    esp,0xc
c000f471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f475:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f478:	83 f8 02             	cmp    eax,0x2
c000f47b:	77 26                	ja     c000f4a3 <sysCallIsATTY(regs*)+0x35>
c000f47d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f482:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f485:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000f48b:	85 c0                	test   eax,eax
c000f48d:	74 24                	je     c000f4b3 <sysCallIsATTY(regs*)+0x45>
c000f48f:	83 ec 0c             	sub    esp,0xc
c000f492:	8b 10                	mov    edx,DWORD PTR [eax]
c000f494:	50                   	push   eax
c000f495:	ff 12                	call   DWORD PTR [edx]
c000f497:	31 d2                	xor    edx,edx
c000f499:	0f b6 c0             	movzx  eax,al
c000f49c:	83 c4 10             	add    esp,0x10
c000f49f:	83 c4 0c             	add    esp,0xc
c000f4a2:	c3                   	ret    
c000f4a3:	83 ec 0c             	sub    esp,0xc
c000f4a6:	50                   	push   eax
c000f4a7:	e8 8f 1d 00 00       	call   c001123b <getFromFileDescriptor(int)>
c000f4ac:	83 c4 10             	add    esp,0x10
c000f4af:	85 c0                	test   eax,eax
c000f4b1:	75 dc                	jne    c000f48f <sysCallIsATTY(regs*)+0x21>
c000f4b3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f4b8:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f4bd:	83 c4 0c             	add    esp,0xc
c000f4c0:	c3                   	ret    

c000f4c1 <sysCallSeek(regs*)>:
c000f4c1:	53                   	push   ebx
c000f4c2:	83 ec 08             	sub    esp,0x8
c000f4c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f4c9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f4cc:	83 f8 02             	cmp    eax,0x2
c000f4cf:	76 32                	jbe    c000f503 <sysCallSeek(regs*)+0x42>
c000f4d1:	83 ec 0c             	sub    esp,0xc
c000f4d4:	50                   	push   eax
c000f4d5:	e8 61 1d 00 00       	call   c001123b <getFromFileDescriptor(int)>
c000f4da:	83 c4 0c             	add    esp,0xc
c000f4dd:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c000f4e0:	31 db                	xor    ebx,ebx
c000f4e2:	53                   	push   ebx
c000f4e3:	51                   	push   ecx
c000f4e4:	50                   	push   eax
c000f4e5:	e8 18 35 00 00       	call   c0012a02 <File::seek(unsigned long long)>
c000f4ea:	83 c4 10             	add    esp,0x10
c000f4ed:	85 c0                	test   eax,eax
c000f4ef:	0f 95 c0             	setne  al
c000f4f2:	31 d2                	xor    edx,edx
c000f4f4:	0f b6 c0             	movzx  eax,al
c000f4f7:	f7 d8                	neg    eax
c000f4f9:	83 d2 00             	adc    edx,0x0
c000f4fc:	83 c4 08             	add    esp,0x8
c000f4ff:	f7 da                	neg    edx
c000f501:	5b                   	pop    ebx
c000f502:	c3                   	ret    
c000f503:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f508:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f50d:	83 c4 08             	add    esp,0x8
c000f510:	5b                   	pop    ebx
c000f511:	c3                   	ret    

c000f512 <sysCallTell(regs*)>:
c000f512:	53                   	push   ebx
c000f513:	83 ec 08             	sub    esp,0x8
c000f516:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f51a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f51d:	83 f8 02             	cmp    eax,0x2
c000f520:	76 2d                	jbe    c000f54f <sysCallTell(regs*)+0x3d>
c000f522:	83 ec 0c             	sub    esp,0xc
c000f525:	50                   	push   eax
c000f526:	e8 10 1d 00 00       	call   c001123b <getFromFileDescriptor(int)>
c000f52b:	5a                   	pop    edx
c000f52c:	59                   	pop    ecx
c000f52d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f530:	50                   	push   eax
c000f531:	e8 22 35 00 00       	call   c0012a58 <File::tell(unsigned long long*)>
c000f536:	83 c4 10             	add    esp,0x10
c000f539:	85 c0                	test   eax,eax
c000f53b:	0f 95 c0             	setne  al
c000f53e:	31 d2                	xor    edx,edx
c000f540:	0f b6 c0             	movzx  eax,al
c000f543:	f7 d8                	neg    eax
c000f545:	83 d2 00             	adc    edx,0x0
c000f548:	83 c4 08             	add    esp,0x8
c000f54b:	f7 da                	neg    edx
c000f54d:	5b                   	pop    ebx
c000f54e:	c3                   	ret    
c000f54f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f554:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f559:	83 c4 08             	add    esp,0x8
c000f55c:	5b                   	pop    ebx
c000f55d:	c3                   	ret    

c000f55e <sysCallSizeFromFilename(regs*)>:
c000f55e:	57                   	push   edi
c000f55f:	56                   	push   esi
c000f560:	53                   	push   ebx
c000f561:	83 ec 10             	sub    esp,0x10
c000f564:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000f568:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c000f56b:	83 ff 02             	cmp    edi,0x2
c000f56e:	76 56                	jbe    c000f5c6 <sysCallSizeFromFilename(regs*)+0x68>
c000f570:	83 ec 0c             	sub    esp,0xc
c000f573:	68 14 01 00 00       	push   0x114
c000f578:	e8 35 2f 00 00       	call   c00124b2 <operator new(unsigned long)>
c000f57d:	83 c4 0c             	add    esp,0xc
c000f580:	89 c3                	mov    ebx,eax
c000f582:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f587:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f58a:	57                   	push   edi
c000f58b:	53                   	push   ebx
c000f58c:	e8 4f 33 00 00       	call   c00128e0 <File::File(char const*, Process*)>
c000f591:	83 c4 0c             	add    esp,0xc
c000f594:	8d 44 24 13          	lea    eax,[esp+0x13]
c000f598:	50                   	push   eax
c000f599:	ff 76 28             	push   DWORD PTR [esi+0x28]
c000f59c:	53                   	push   ebx
c000f59d:	e8 4e 36 00 00       	call   c0012bf0 <File::stat(unsigned long long*, bool*)>
c000f5a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f5a5:	89 c6                	mov    esi,eax
c000f5a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f5a9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f5ac:	83 c4 10             	add    esp,0x10
c000f5af:	31 c0                	xor    eax,eax
c000f5b1:	85 f6                	test   esi,esi
c000f5b3:	0f 95 c0             	setne  al
c000f5b6:	31 d2                	xor    edx,edx
c000f5b8:	f7 d8                	neg    eax
c000f5ba:	83 d2 00             	adc    edx,0x0
c000f5bd:	83 c4 10             	add    esp,0x10
c000f5c0:	f7 da                	neg    edx
c000f5c2:	5b                   	pop    ebx
c000f5c3:	5e                   	pop    esi
c000f5c4:	5f                   	pop    edi
c000f5c5:	c3                   	ret    
c000f5c6:	83 c4 10             	add    esp,0x10
c000f5c9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f5ce:	5b                   	pop    ebx
c000f5cf:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f5d4:	5e                   	pop    esi
c000f5d5:	5f                   	pop    edi
c000f5d6:	c3                   	ret    

c000f5d7 <sysCallSize(regs*)>:
c000f5d7:	53                   	push   ebx
c000f5d8:	83 ec 18             	sub    esp,0x18
c000f5db:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f5df:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c000f5e2:	83 f8 02             	cmp    eax,0x2
c000f5e5:	76 33                	jbe    c000f61a <sysCallSize(regs*)+0x43>
c000f5e7:	83 ec 0c             	sub    esp,0xc
c000f5ea:	50                   	push   eax
c000f5eb:	e8 4b 1c 00 00       	call   c001123b <getFromFileDescriptor(int)>
c000f5f0:	83 c4 0c             	add    esp,0xc
c000f5f3:	8d 54 24 13          	lea    edx,[esp+0x13]
c000f5f7:	52                   	push   edx
c000f5f8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f5fb:	50                   	push   eax
c000f5fc:	e8 ef 35 00 00       	call   c0012bf0 <File::stat(unsigned long long*, bool*)>
c000f601:	83 c4 10             	add    esp,0x10
c000f604:	85 c0                	test   eax,eax
c000f606:	0f 95 c0             	setne  al
c000f609:	31 d2                	xor    edx,edx
c000f60b:	0f b6 c0             	movzx  eax,al
c000f60e:	f7 d8                	neg    eax
c000f610:	83 d2 00             	adc    edx,0x0
c000f613:	83 c4 18             	add    esp,0x18
c000f616:	f7 da                	neg    edx
c000f618:	5b                   	pop    ebx
c000f619:	c3                   	ret    
c000f61a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f61f:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f624:	83 c4 18             	add    esp,0x18
c000f627:	5b                   	pop    ebx
c000f628:	c3                   	ret    

c000f629 <sysCallClose(regs*)>:
c000f629:	53                   	push   ebx
c000f62a:	83 ec 08             	sub    esp,0x8
c000f62d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f631:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f634:	83 f8 02             	cmp    eax,0x2
c000f637:	76 2f                	jbe    c000f668 <sysCallClose(regs*)+0x3f>
c000f639:	83 ec 0c             	sub    esp,0xc
c000f63c:	50                   	push   eax
c000f63d:	e8 f9 1b 00 00       	call   c001123b <getFromFileDescriptor(int)>
c000f642:	89 c3                	mov    ebx,eax
c000f644:	89 04 24             	mov    DWORD PTR [esp],eax
c000f647:	e8 56 33 00 00       	call   c00129a2 <File::close()>
c000f64c:	83 c4 10             	add    esp,0x10
c000f64f:	85 db                	test   ebx,ebx
c000f651:	74 0c                	je     c000f65f <sysCallClose(regs*)+0x36>
c000f653:	83 ec 0c             	sub    esp,0xc
c000f656:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f658:	53                   	push   ebx
c000f659:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f65c:	83 c4 10             	add    esp,0x10
c000f65f:	31 c0                	xor    eax,eax
c000f661:	31 d2                	xor    edx,edx
c000f663:	83 c4 08             	add    esp,0x8
c000f666:	5b                   	pop    ebx
c000f667:	c3                   	ret    
c000f668:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f66d:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f672:	83 c4 08             	add    esp,0x8
c000f675:	5b                   	pop    ebx
c000f676:	c3                   	ret    

c000f677 <sysCallOpenDir(regs*)>:
c000f677:	56                   	push   esi
c000f678:	53                   	push   ebx
c000f679:	53                   	push   ebx
c000f67a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f67e:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c000f681:	85 f6                	test   esi,esi
c000f683:	74 51                	je     c000f6d6 <sysCallOpenDir(regs*)+0x5f>
c000f685:	83 ec 0c             	sub    esp,0xc
c000f688:	68 14 01 00 00       	push   0x114
c000f68d:	e8 20 2e 00 00       	call   c00124b2 <operator new(unsigned long)>
c000f692:	83 c4 0c             	add    esp,0xc
c000f695:	89 c6                	mov    esi,eax
c000f697:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f69c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f69f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f6a2:	56                   	push   esi
c000f6a3:	e8 fa 36 00 00       	call   c0012da2 <Directory::Directory(char const*, Process*)>
c000f6a8:	89 34 24             	mov    DWORD PTR [esp],esi
c000f6ab:	e8 56 37 00 00       	call   c0012e06 <Directory::open()>
c000f6b0:	83 c4 10             	add    esp,0x10
c000f6b3:	85 c0                	test   eax,eax
c000f6b5:	75 1f                	jne    c000f6d6 <sysCallOpenDir(regs*)+0x5f>
c000f6b7:	83 ec 0c             	sub    esp,0xc
c000f6ba:	56                   	push   esi
c000f6bb:	e8 16 1a 00 00       	call   c00110d6 <UnixFile::getFileDescriptor()>
c000f6c0:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c000f6c3:	83 c4 10             	add    esp,0x10
c000f6c6:	89 02                	mov    DWORD PTR [edx],eax
c000f6c8:	c1 f8 1f             	sar    eax,0x1f
c000f6cb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000f6ce:	31 c0                	xor    eax,eax
c000f6d0:	59                   	pop    ecx
c000f6d1:	31 d2                	xor    edx,edx
c000f6d3:	5b                   	pop    ebx
c000f6d4:	5e                   	pop    esi
c000f6d5:	c3                   	ret    
c000f6d6:	59                   	pop    ecx
c000f6d7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f6dc:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f6e1:	5b                   	pop    ebx
c000f6e2:	5e                   	pop    esi
c000f6e3:	c3                   	ret    

c000f6e4 <sysCallMakeDir(regs*)>:
c000f6e4:	56                   	push   esi
c000f6e5:	53                   	push   ebx
c000f6e6:	83 ec 10             	sub    esp,0x10
c000f6e9:	68 14 01 00 00       	push   0x114
c000f6ee:	e8 bf 2d 00 00       	call   c00124b2 <operator new(unsigned long)>
c000f6f3:	83 c4 0c             	add    esp,0xc
c000f6f6:	89 c3                	mov    ebx,eax
c000f6f8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f6fd:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f700:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f704:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000f707:	53                   	push   ebx
c000f708:	e8 95 36 00 00       	call   c0012da2 <Directory::Directory(char const*, Process*)>
c000f70d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f710:	e8 d1 38 00 00       	call   c0012fe6 <Directory::create()>
c000f715:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f718:	89 c6                	mov    esi,eax
c000f71a:	e8 43 37 00 00       	call   c0012e62 <Directory::close()>
c000f71f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f721:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f724:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f727:	31 c0                	xor    eax,eax
c000f729:	85 f6                	test   esi,esi
c000f72b:	0f 95 c0             	setne  al
c000f72e:	31 d2                	xor    edx,edx
c000f730:	f7 d8                	neg    eax
c000f732:	83 d2 00             	adc    edx,0x0
c000f735:	83 c4 14             	add    esp,0x14
c000f738:	f7 da                	neg    edx
c000f73a:	5b                   	pop    ebx
c000f73b:	5e                   	pop    esi
c000f73c:	c3                   	ret    

c000f73d <sysCallCloseDir(regs*)>:
c000f73d:	53                   	push   ebx
c000f73e:	83 ec 08             	sub    esp,0x8
c000f741:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f745:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000f748:	83 f8 02             	cmp    eax,0x2
c000f74b:	76 2f                	jbe    c000f77c <sysCallCloseDir(regs*)+0x3f>
c000f74d:	83 ec 0c             	sub    esp,0xc
c000f750:	50                   	push   eax
c000f751:	e8 e5 1a 00 00       	call   c001123b <getFromFileDescriptor(int)>
c000f756:	89 c3                	mov    ebx,eax
c000f758:	89 04 24             	mov    DWORD PTR [esp],eax
c000f75b:	e8 02 37 00 00       	call   c0012e62 <Directory::close()>
c000f760:	83 c4 10             	add    esp,0x10
c000f763:	85 db                	test   ebx,ebx
c000f765:	74 0c                	je     c000f773 <sysCallCloseDir(regs*)+0x36>
c000f767:	83 ec 0c             	sub    esp,0xc
c000f76a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f76c:	53                   	push   ebx
c000f76d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f770:	83 c4 10             	add    esp,0x10
c000f773:	31 c0                	xor    eax,eax
c000f775:	31 d2                	xor    edx,edx
c000f777:	83 c4 08             	add    esp,0x8
c000f77a:	5b                   	pop    ebx
c000f77b:	c3                   	ret    
c000f77c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f781:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f786:	83 c4 08             	add    esp,0x8
c000f789:	5b                   	pop    ebx
c000f78a:	c3                   	ret    

c000f78b <sysCallWait(regs*)>:
c000f78b:	83 ec 10             	sub    esp,0x10
c000f78e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f792:	ff 70 28             	push   DWORD PTR [eax+0x28]
c000f795:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000f798:	ff 70 20             	push   DWORD PTR [eax+0x20]
c000f79b:	e8 24 f2 ff ff       	call   c000e9c4 <waitTask(int, int*, int)>
c000f7a0:	83 c4 1c             	add    esp,0x1c
c000f7a3:	99                   	cdq    
c000f7a4:	c3                   	ret    

c000f7a5 <sysCallFork(regs*)>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 b7 92 03 c0       	push   0xc00392b7
c000f7ad:	e8 50 d7 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c000f7b2:	58                   	pop    eax
c000f7b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7b7:	e8 d6 ef ff ff       	call   c000e792 <forkProcess(regs*)>
c000f7bc:	83 c4 1c             	add    esp,0x1c
c000f7bf:	99                   	cdq    
c000f7c0:	c3                   	ret    

c000f7c1 <sysCallExecve(regs*)>:
c000f7c1:	53                   	push   ebx
c000f7c2:	81 ec 24 01 00 00    	sub    esp,0x124
c000f7c8:	8b 9c 24 2c 01 00 00 	mov    ebx,DWORD PTR [esp+0x12c]
c000f7cf:	68 c5 92 03 c0       	push   0xc00392c5
c000f7d4:	e8 29 d7 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c000f7d9:	83 c4 0c             	add    esp,0xc
c000f7dc:	68 00 01 00 00       	push   0x100
c000f7e1:	8d 44 24 17          	lea    eax,[esp+0x17]
c000f7e5:	50                   	push   eax
c000f7e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f7eb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f7ee:	e8 5e 34 00 00       	call   c0012c51 <getcwd(Process*, char*, int)>
c000f7f3:	83 c4 0c             	add    esp,0xc
c000f7f6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000f7f9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000f7fc:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000f7ff:	e8 f4 f2 ff ff       	call   c000eaf8 <execveProcess(char const*, char* const*, char* const*)>
c000f804:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f809:	ba ff ff ff ff       	mov    edx,0xffffffff
c000f80e:	81 c4 28 01 00 00    	add    esp,0x128
c000f814:	5b                   	pop    ebx
c000f815:	c3                   	ret    

c000f816 <sysCallRmdir(regs*)>:
c000f816:	56                   	push   esi
c000f817:	53                   	push   ebx
c000f818:	83 ec 10             	sub    esp,0x10
c000f81b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f81f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c000f822:	68 14 01 00 00       	push   0x114
c000f827:	e8 86 2c 00 00       	call   c00124b2 <operator new(unsigned long)>
c000f82c:	83 c4 0c             	add    esp,0xc
c000f82f:	89 c3                	mov    ebx,eax
c000f831:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f836:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f839:	56                   	push   esi
c000f83a:	53                   	push   ebx
c000f83b:	e8 a0 30 00 00       	call   c00128e0 <File::File(char const*, Process*)>
c000f840:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f843:	e8 74 32 00 00       	call   c0012abc <File::unlink()>
c000f848:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f84b:	89 c6                	mov    esi,eax
c000f84d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f84f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f852:	31 c0                	xor    eax,eax
c000f854:	85 f6                	test   esi,esi
c000f856:	0f 95 c0             	setne  al
c000f859:	31 d2                	xor    edx,edx
c000f85b:	f7 d8                	neg    eax
c000f85d:	83 d2 00             	adc    edx,0x0
c000f860:	83 c4 14             	add    esp,0x14
c000f863:	f7 da                	neg    edx
c000f865:	5b                   	pop    ebx
c000f866:	5e                   	pop    esi
c000f867:	c3                   	ret    

c000f868 <sysCallUnlink(regs*)>:
c000f868:	56                   	push   esi
c000f869:	53                   	push   ebx
c000f86a:	83 ec 10             	sub    esp,0x10
c000f86d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f871:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c000f874:	68 14 01 00 00       	push   0x114
c000f879:	e8 34 2c 00 00       	call   c00124b2 <operator new(unsigned long)>
c000f87e:	83 c4 0c             	add    esp,0xc
c000f881:	89 c3                	mov    ebx,eax
c000f883:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f888:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000f88b:	56                   	push   esi
c000f88c:	53                   	push   ebx
c000f88d:	e8 4e 30 00 00       	call   c00128e0 <File::File(char const*, Process*)>
c000f892:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f895:	e8 22 32 00 00       	call   c0012abc <File::unlink()>
c000f89a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f89d:	89 c6                	mov    esi,eax
c000f89f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f8a1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000f8a4:	31 c0                	xor    eax,eax
c000f8a6:	85 f6                	test   esi,esi
c000f8a8:	0f 95 c0             	setne  al
c000f8ab:	31 d2                	xor    edx,edx
c000f8ad:	f7 d8                	neg    eax
c000f8af:	83 d2 00             	adc    edx,0x0
c000f8b2:	83 c4 14             	add    esp,0x14
c000f8b5:	f7 da                	neg    edx
c000f8b7:	5b                   	pop    ebx
c000f8b8:	5e                   	pop    esi
c000f8b9:	c3                   	ret    

c000f8ba <sysCallGetArgv(regs*)>:
c000f8ba:	83 ec 0c             	sub    esp,0xc
c000f8bd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f8c1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000f8c4:	85 c0                	test   eax,eax
c000f8c6:	78 2b                	js     c000f8f3 <sysCallGetArgv(regs*)+0x39>
c000f8c8:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000f8ce:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c000f8d1:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c000f8d7:	7d 1a                	jge    c000f8f3 <sysCallGetArgv(regs*)+0x39>
c000f8d9:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c000f8e0:	85 c0                	test   eax,eax
c000f8e2:	74 17                	je     c000f8fb <sysCallGetArgv(regs*)+0x41>
c000f8e4:	83 ec 08             	sub    esp,0x8
c000f8e7:	50                   	push   eax
c000f8e8:	ff 72 24             	push   DWORD PTR [edx+0x24]
c000f8eb:	e8 04 0f ff ff       	call   c00007f4 <strcpy>
c000f8f0:	83 c4 10             	add    esp,0x10
c000f8f3:	31 c0                	xor    eax,eax
c000f8f5:	31 d2                	xor    edx,edx
c000f8f7:	83 c4 0c             	add    esp,0xc
c000f8fa:	c3                   	ret    
c000f8fb:	b8 01 00 00 00       	mov    eax,0x1
c000f900:	31 d2                	xor    edx,edx
c000f902:	83 c4 0c             	add    esp,0xc
c000f905:	c3                   	ret    

c000f906 <sysCallTTYName(regs*)>:
c000f906:	56                   	push   esi
c000f907:	53                   	push   ebx
c000f908:	53                   	push   ebx
c000f909:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f90d:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000f910:	85 c0                	test   eax,eax
c000f912:	74 58                	je     c000f96c <sysCallTTYName(regs*)+0x66>
c000f914:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c000f917:	83 f8 02             	cmp    eax,0x2
c000f91a:	77 3e                	ja     c000f95a <sysCallTTYName(regs*)+0x54>
c000f91c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f921:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000f924:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000f92a:	85 db                	test   ebx,ebx
c000f92c:	74 3e                	je     c000f96c <sysCallTTYName(regs*)+0x66>
c000f92e:	83 ec 0c             	sub    esp,0xc
c000f931:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f933:	53                   	push   ebx
c000f934:	ff 10                	call   DWORD PTR [eax]
c000f936:	83 c4 10             	add    esp,0x10
c000f939:	84 c0                	test   al,al
c000f93b:	74 3a                	je     c000f977 <sysCallTTYName(regs*)+0x71>
c000f93d:	83 ec 08             	sub    esp,0x8
c000f940:	81 c3 1e 10 00 00    	add    ebx,0x101e
c000f946:	53                   	push   ebx
c000f947:	ff 76 24             	push   DWORD PTR [esi+0x24]
c000f94a:	e8 a5 0e ff ff       	call   c00007f4 <strcpy>
c000f94f:	83 c4 10             	add    esp,0x10
c000f952:	31 c0                	xor    eax,eax
c000f954:	59                   	pop    ecx
c000f955:	31 d2                	xor    edx,edx
c000f957:	5b                   	pop    ebx
c000f958:	5e                   	pop    esi
c000f959:	c3                   	ret    
c000f95a:	83 ec 0c             	sub    esp,0xc
c000f95d:	50                   	push   eax
c000f95e:	e8 d8 18 00 00       	call   c001123b <getFromFileDescriptor(int)>
c000f963:	83 c4 10             	add    esp,0x10
c000f966:	89 c3                	mov    ebx,eax
c000f968:	85 db                	test   ebx,ebx
c000f96a:	75 c2                	jne    c000f92e <sysCallTTYName(regs*)+0x28>
c000f96c:	59                   	pop    ecx
c000f96d:	b8 01 00 00 00       	mov    eax,0x1
c000f972:	31 d2                	xor    edx,edx
c000f974:	5b                   	pop    ebx
c000f975:	5e                   	pop    esi
c000f976:	c3                   	ret    
c000f977:	59                   	pop    ecx
c000f978:	b8 02 00 00 00       	mov    eax,0x2
c000f97d:	31 d2                	xor    edx,edx
c000f97f:	5b                   	pop    ebx
c000f980:	5e                   	pop    esi
c000f981:	c3                   	ret    

c000f982 <sysCallGetEnv(regs*)>:
c000f982:	83 ec 0c             	sub    esp,0xc
c000f985:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f989:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c000f98c:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000f98f:	85 c9                	test   ecx,ecx
c000f991:	75 0c                	jne    c000f99f <sysCallGetEnv(regs*)+0x1d>
c000f993:	85 d2                	test   edx,edx
c000f995:	74 14                	je     c000f9ab <sysCallGetEnv(regs*)+0x29>
c000f997:	31 c0                	xor    eax,eax
c000f999:	31 d2                	xor    edx,edx
c000f99b:	83 c4 0c             	add    esp,0xc
c000f99e:	c3                   	ret    
c000f99f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c000f9a2:	85 d2                	test   edx,edx
c000f9a4:	74 1b                	je     c000f9c1 <sysCallGetEnv(regs*)+0x3f>
c000f9a6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f9a9:	eb ec                	jmp    c000f997 <sysCallGetEnv(regs*)+0x15>
c000f9ab:	83 ec 0c             	sub    esp,0xc
c000f9ae:	68 10 93 03 c0       	push   0xc0039310
c000f9b3:	e8 49 0d ff ff       	call   c0000701 <strlen>
c000f9b8:	83 c4 10             	add    esp,0x10
c000f9bb:	31 d2                	xor    edx,edx
c000f9bd:	83 c4 0c             	add    esp,0xc
c000f9c0:	c3                   	ret    
c000f9c1:	83 ec 08             	sub    esp,0x8
c000f9c4:	68 10 93 03 c0       	push   0xc0039310
c000f9c9:	50                   	push   eax
c000f9ca:	e8 25 0e ff ff       	call   c00007f4 <strcpy>
c000f9cf:	83 c4 10             	add    esp,0x10
c000f9d2:	eb c3                	jmp    c000f997 <sysCallGetEnv(regs*)+0x15>

c000f9d4 <sysCallUSleep(regs*)>:
c000f9d4:	83 ec 14             	sub    esp,0x14
c000f9d7:	b8 e8 03 00 00       	mov    eax,0x3e8
c000f9dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f9e0:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c000f9e7:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c000f9ea:	01 ca                	add    edx,ecx
c000f9ec:	52                   	push   edx
c000f9ed:	50                   	push   eax
c000f9ee:	e8 6a f0 ff ff       	call   c000ea5d <nanoSleep(unsigned long long)>
c000f9f3:	31 c0                	xor    eax,eax
c000f9f5:	31 d2                	xor    edx,edx
c000f9f7:	83 c4 1c             	add    esp,0x1c
c000f9fa:	c3                   	ret    

c000f9fb <sysCallSpawn(regs*)>:
c000f9fb:	56                   	push   esi
c000f9fc:	53                   	push   ebx
c000f9fd:	53                   	push   ebx
c000f9fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fa02:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c000fa05:	85 f6                	test   esi,esi
c000fa07:	75 08                	jne    c000fa11 <sysCallSpawn(regs*)+0x16>
c000fa09:	59                   	pop    ecx
c000fa0a:	31 c0                	xor    eax,eax
c000fa0c:	31 d2                	xor    edx,edx
c000fa0e:	5b                   	pop    ebx
c000fa0f:	5e                   	pop    esi
c000fa10:	c3                   	ret    
c000fa11:	83 ec 0c             	sub    esp,0xc
c000fa14:	68 d5 92 03 c0       	push   0xc00392d5
c000fa19:	e8 e4 d4 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c000fa1e:	c7 04 24 3b 07 00 00 	mov    DWORD PTR [esp],0x73b
c000fa25:	e8 88 2a 00 00       	call   c00124b2 <operator new(unsigned long)>
c000fa2a:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000fa2d:	89 c6                	mov    esi,eax
c000fa2f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fa34:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000fa37:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000fa3a:	56                   	push   esi
c000fa3b:	e8 0c e6 ff ff       	call   c000e04c <Process::Process(char const*, Process*, char**)>
c000fa40:	83 c4 20             	add    esp,0x20
c000fa43:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c000fa4a:	75 bd                	jne    c000fa09 <sysCallSpawn(regs*)+0xe>
c000fa4c:	83 ec 0c             	sub    esp,0xc
c000fa4f:	68 e0 92 03 c0       	push   0xc00392e0
c000fa54:	e8 a9 d4 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c000fa59:	89 34 24             	mov    DWORD PTR [esp],esi
c000fa5c:	e8 51 eb ff ff       	call   c000e5b2 <Process::createUserThread()>
c000fa61:	8b 06                	mov    eax,DWORD PTR [esi]
c000fa63:	83 c4 10             	add    esp,0x10
c000fa66:	99                   	cdq    
c000fa67:	59                   	pop    ecx
c000fa68:	5b                   	pop    ebx
c000fa69:	5e                   	pop    esi
c000fa6a:	c3                   	ret    

c000fa6b <sysAppSettings(regs*)>:
c000fa6b:	53                   	push   ebx
c000fa6c:	83 ec 08             	sub    esp,0x8
c000fa6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa73:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c000fa76:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c000fa7c:	25 e0 1f 00 00       	and    eax,0x1fe0
c000fa81:	66 3d c0 09          	cmp    ax,0x9c0
c000fa85:	75 2f                	jne    c000fab6 <sysAppSettings(regs*)+0x4b>
c000fa87:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c000fa8d:	83 e0 1f             	and    eax,0x1f
c000fa90:	3c 01                	cmp    al,0x1
c000fa92:	74 2e                	je     c000fac2 <sysAppSettings(regs*)+0x57>
c000fa94:	3c 07                	cmp    al,0x7
c000fa96:	0f 84 bd 00 00 00    	je     c000fb59 <sysAppSettings(regs*)+0xee>
c000fa9c:	84 c0                	test   al,al
c000fa9e:	0f 84 dc 00 00 00    	je     c000fb80 <sysAppSettings(regs*)+0x115>
c000faa4:	3c 08                	cmp    al,0x8
c000faa6:	74 6d                	je     c000fb15 <sysAppSettings(regs*)+0xaa>
c000faa8:	0f b6 c0             	movzx  eax,al
c000faab:	83 c4 08             	add    esp,0x8
c000faae:	05 e8 03 00 00       	add    eax,0x3e8
c000fab3:	5b                   	pop    ebx
c000fab4:	99                   	cdq    
c000fab5:	c3                   	ret    
c000fab6:	b8 01 00 00 00       	mov    eax,0x1
c000fabb:	31 d2                	xor    edx,edx
c000fabd:	83 c4 08             	add    esp,0x8
c000fac0:	5b                   	pop    ebx
c000fac1:	c3                   	ret    
c000fac2:	51                   	push   ecx
c000fac3:	68 00 01 00 00       	push   0x100
c000fac8:	6a 00                	push   0x0
c000faca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000facf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fad2:	83 c0 0c             	add    eax,0xc
c000fad5:	50                   	push   eax
c000fad6:	e8 fd 0b ff ff       	call   c00006d8 <memset>
c000fadb:	83 c4 0c             	add    esp,0xc
c000fade:	68 ff 00 00 00       	push   0xff
c000fae3:	53                   	push   ebx
c000fae4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fae9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000faec:	83 c0 0c             	add    eax,0xc
c000faef:	50                   	push   eax
c000faf0:	e8 6c 0b ff ff       	call   c0000661 <memcpy>
c000faf5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fafa:	5b                   	pop    ebx
c000fafb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fafe:	5a                   	pop    edx
c000faff:	8d 50 0c             	lea    edx,[eax+0xc]
c000fb02:	52                   	push   edx
c000fb03:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000fb09:	e8 ee 09 00 00       	call   c00104fc <VgaText::setTitle(char*)>
c000fb0e:	83 c4 10             	add    esp,0x10
c000fb11:	31 c0                	xor    eax,eax
c000fb13:	eb a6                	jmp    c000fabb <sysAppSettings(regs*)+0x50>
c000fb15:	83 ec 08             	sub    esp,0x8
c000fb18:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c000fb1e:	83 e0 0f             	and    eax,0xf
c000fb21:	50                   	push   eax
c000fb22:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fb27:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fb2a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000fb30:	e8 b7 09 00 00       	call   c00104ec <VgaText::setTitleColour(VgaColour)>
c000fb35:	58                   	pop    eax
c000fb36:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c000fb3c:	5a                   	pop    edx
c000fb3d:	c1 e8 04             	shr    eax,0x4
c000fb40:	83 e0 0f             	and    eax,0xf
c000fb43:	50                   	push   eax
c000fb44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fb49:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fb4c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000fb52:	e8 85 09 00 00       	call   c00104dc <VgaText::setTitleTextColour(VgaColour)>
c000fb57:	eb b5                	jmp    c000fb0e <sysAppSettings(regs*)+0xa3>
c000fb59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fb5e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000fb61:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c000fb67:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c000fb6d:	c0 e8 06             	shr    al,0x6
c000fb70:	83 e0 01             	and    eax,0x1
c000fb73:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c000fb79:	31 c0                	xor    eax,eax
c000fb7b:	e9 3b ff ff ff       	jmp    c000fabb <sysAppSettings(regs*)+0x50>
c000fb80:	b8 02 00 00 00       	mov    eax,0x2
c000fb85:	e9 31 ff ff ff       	jmp    c000fabb <sysAppSettings(regs*)+0x50>

c000fb8a <sysSetFatAttrib(regs*)>:
c000fb8a:	57                   	push   edi
c000fb8b:	56                   	push   esi
c000fb8c:	53                   	push   ebx
c000fb8d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fb91:	83 ec 0c             	sub    esp,0xc
c000fb94:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c000fb97:	68 14 01 00 00       	push   0x114
c000fb9c:	e8 11 29 00 00       	call   c00124b2 <operator new(unsigned long)>
c000fba1:	83 c4 0c             	add    esp,0xc
c000fba4:	89 c3                	mov    ebx,eax
c000fba6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000fbab:	ff 70 40             	push   DWORD PTR [eax+0x40]
c000fbae:	57                   	push   edi
c000fbaf:	53                   	push   ebx
c000fbb0:	e8 2b 2d 00 00       	call   c00128e0 <File::File(char const*, Process*)>
c000fbb5:	83 c4 0c             	add    esp,0xc
c000fbb8:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c000fbbb:	0f b6 d4             	movzx  edx,ah
c000fbbe:	0f b6 c0             	movzx  eax,al
c000fbc1:	52                   	push   edx
c000fbc2:	50                   	push   eax
c000fbc3:	53                   	push   ebx
c000fbc4:	e8 8d 2f 00 00       	call   c0012b56 <File::chfatattr(unsigned char, unsigned char)>
c000fbc9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbcc:	89 c6                	mov    esi,eax
c000fbce:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fbd0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000fbd3:	83 c4 10             	add    esp,0x10
c000fbd6:	31 c0                	xor    eax,eax
c000fbd8:	5b                   	pop    ebx
c000fbd9:	85 f6                	test   esi,esi
c000fbdb:	5e                   	pop    esi
c000fbdc:	0f 95 c0             	setne  al
c000fbdf:	5f                   	pop    edi
c000fbe0:	31 d2                	xor    edx,edx
c000fbe2:	f7 d8                	neg    eax
c000fbe4:	83 d2 00             	adc    edx,0x0
c000fbe7:	f7 da                	neg    edx
c000fbe9:	c3                   	ret    

c000fbea <sysPanic(regs*)>:
c000fbea:	83 ec 18             	sub    esp,0x18
c000fbed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fbf1:	ff 70 24             	push   DWORD PTR [eax+0x24]
c000fbf4:	e8 27 d4 ff ff       	call   c000d020 <panic(char const*)>
c000fbf9:	c7 04 24 ed 92 03 c0 	mov    DWORD PTR [esp],0xc00392ed
c000fc00:	e8 1b d4 ff ff       	call   c000d020 <panic(char const*)>
c000fc05:	b8 01 00 00 00       	mov    eax,0x1
c000fc0a:	31 d2                	xor    edx,edx
c000fc0c:	83 c4 1c             	add    esp,0x1c
c000fc0f:	c3                   	ret    

c000fc10 <sysPipe(regs*)>:
c000fc10:	57                   	push   edi
c000fc11:	56                   	push   esi
c000fc12:	53                   	push   ebx
c000fc13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc17:	83 ec 0c             	sub    esp,0xc
c000fc1a:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c000fc1d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c000fc20:	6a 20                	push   0x20
c000fc22:	e8 8b 28 00 00       	call   c00124b2 <operator new(unsigned long)>
c000fc27:	89 c3                	mov    ebx,eax
c000fc29:	58                   	pop    eax
c000fc2a:	5a                   	pop    edx
c000fc2b:	68 00 50 00 00       	push   0x5000
c000fc30:	53                   	push   ebx
c000fc31:	e8 26 e3 ff ff       	call   c000df5c <Pipe::Pipe(int)>
c000fc36:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc39:	e8 98 14 00 00       	call   c00110d6 <UnixFile::getFileDescriptor()>
c000fc3e:	89 07                	mov    DWORD PTR [edi],eax
c000fc40:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc43:	e8 8e 14 00 00       	call   c00110d6 <UnixFile::getFileDescriptor()>
c000fc48:	83 c4 10             	add    esp,0x10
c000fc4b:	89 06                	mov    DWORD PTR [esi],eax
c000fc4d:	31 d2                	xor    edx,edx
c000fc4f:	5b                   	pop    ebx
c000fc50:	31 c0                	xor    eax,eax
c000fc52:	5e                   	pop    esi
c000fc53:	5f                   	pop    edi
c000fc54:	c3                   	ret    

c000fc55 <sysGetUnixTime(regs*)>:
c000fc55:	a1 a8 b9 03 c0       	mov    eax,ds:0xc003b9a8
c000fc5a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000fc60:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000fc64:	e9 3f 36 00 00       	jmp    c00132a8 <Clock::timeInSecondsLocal()>

c000fc69 <string_ends_with(char const*, char const*)>:
c000fc69:	57                   	push   edi
c000fc6a:	56                   	push   esi
c000fc6b:	53                   	push   ebx
c000fc6c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc70:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000fc74:	83 ec 0c             	sub    esp,0xc
c000fc77:	53                   	push   ebx
c000fc78:	e8 84 0a ff ff       	call   c0000701 <strlen>
c000fc7d:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fc80:	89 c6                	mov    esi,eax
c000fc82:	e8 7a 0a ff ff       	call   c0000701 <strlen>
c000fc87:	83 c4 10             	add    esp,0x10
c000fc8a:	39 c6                	cmp    esi,eax
c000fc8c:	7d 06                	jge    c000fc94 <string_ends_with(char const*, char const*)+0x2b>
c000fc8e:	5b                   	pop    ebx
c000fc8f:	31 c0                	xor    eax,eax
c000fc91:	5e                   	pop    esi
c000fc92:	5f                   	pop    edi
c000fc93:	c3                   	ret    
c000fc94:	83 ec 08             	sub    esp,0x8
c000fc97:	29 c6                	sub    esi,eax
c000fc99:	57                   	push   edi
c000fc9a:	01 f3                	add    ebx,esi
c000fc9c:	53                   	push   ebx
c000fc9d:	e8 d8 0b ff ff       	call   c000087a <strcmp>
c000fca2:	83 c4 10             	add    esp,0x10
c000fca5:	85 c0                	test   eax,eax
c000fca7:	5b                   	pop    ebx
c000fca8:	0f 94 c0             	sete   al
c000fcab:	5e                   	pop    esi
c000fcac:	0f b6 c0             	movzx  eax,al
c000fcaf:	5f                   	pop    edi
c000fcb0:	c3                   	ret    

c000fcb1 <setupSystemCalls()>:
c000fcb1:	c7 05 20 bc 03 c0 fe 84 01 c0 	mov    DWORD PTR ds:0xc003bc20,0xc00184fe
c000fcbb:	c7 05 24 bc 03 c0 c1 83 01 c0 	mov    DWORD PTR ds:0xc003bc24,0xc00183c1
c000fcc5:	c7 05 28 bc 03 c0 41 84 01 c0 	mov    DWORD PTR ds:0xc003bc28,0xc0018441
c000fccf:	c7 05 2c bc 03 c0 96 84 01 c0 	mov    DWORD PTR ds:0xc003bc2c,0xc0018496
c000fcd9:	c7 05 30 bc 03 c0 d9 83 01 c0 	mov    DWORD PTR ds:0xc003bc30,0xc00183d9
c000fce3:	c7 05 34 bc 03 c0 18 f1 00 c0 	mov    DWORD PTR ds:0xc003bc34,0xc000f118
c000fced:	c7 05 38 bc 03 c0 91 f2 00 c0 	mov    DWORD PTR ds:0xc003bc38,0xc000f291
c000fcf7:	c7 05 3c bc 03 c0 b0 f2 00 c0 	mov    DWORD PTR ds:0xc003bc3c,0xc000f2b0
c000fd01:	c7 05 44 bc 03 c0 29 f6 00 c0 	mov    DWORD PTR ds:0xc003bc44,0xc000f629
c000fd0b:	c7 05 40 bc 03 c0 0f f3 00 c0 	mov    DWORD PTR ds:0xc003bc40,0xc000f30f
c000fd15:	c7 05 48 bc 03 c0 77 f6 00 c0 	mov    DWORD PTR ds:0xc003bc48,0xc000f677
c000fd1f:	c7 05 4c bc 03 c0 ff f3 00 c0 	mov    DWORD PTR ds:0xc003bc4c,0xc000f3ff
c000fd29:	c7 05 50 bc 03 c0 24 f1 00 c0 	mov    DWORD PTR ds:0xc003bc50,0xc000f124
c000fd33:	c7 05 54 bc 03 c0 29 f1 00 c0 	mov    DWORD PTR ds:0xc003bc54,0xc000f129
c000fd3d:	c7 05 58 bc 03 c0 e4 f6 00 c0 	mov    DWORD PTR ds:0xc003bc58,0xc000f6e4
c000fd47:	c7 05 5c bc 03 c0 3d f7 00 c0 	mov    DWORD PTR ds:0xc003bc5c,0xc000f73d
c000fd51:	c7 05 60 bc 03 c0 c1 f4 00 c0 	mov    DWORD PTR ds:0xc003bc60,0xc000f4c1
c000fd5b:	c7 05 64 bc 03 c0 12 f5 00 c0 	mov    DWORD PTR ds:0xc003bc64,0xc000f512
c000fd65:	c7 05 68 bc 03 c0 d7 f5 00 c0 	mov    DWORD PTR ds:0xc003bc68,0xc000f5d7
c000fd6f:	c7 05 6c bc 03 c0 2e f1 00 c0 	mov    DWORD PTR ds:0xc003bc6c,0xc000f12e
c000fd79:	c7 05 70 bc 03 c0 8b f7 00 c0 	mov    DWORD PTR ds:0xc003bc70,0xc000f78b
c000fd83:	c7 05 74 bc 03 c0 a5 f7 00 c0 	mov    DWORD PTR ds:0xc003bc74,0xc000f7a5
c000fd8d:	c7 05 78 bc 03 c0 c1 f7 00 c0 	mov    DWORD PTR ds:0xc003bc78,0xc000f7c1
c000fd97:	c7 05 7c bc 03 c0 16 f8 00 c0 	mov    DWORD PTR ds:0xc003bc7c,0xc000f816
c000fda1:	c7 05 80 bc 03 c0 68 f8 00 c0 	mov    DWORD PTR ds:0xc003bc80,0xc000f868
c000fdab:	c7 05 84 bc 03 c0 38 f1 00 c0 	mov    DWORD PTR ds:0xc003bc84,0xc000f138
c000fdb5:	c7 05 88 bc 03 c0 ba f8 00 c0 	mov    DWORD PTR ds:0xc003bc88,0xc000f8ba
c000fdbf:	c7 05 8c bc 03 c0 cc f2 00 c0 	mov    DWORD PTR ds:0xc003bc8c,0xc000f2cc
c000fdc9:	c7 05 90 bc 03 c0 06 f9 00 c0 	mov    DWORD PTR ds:0xc003bc90,0xc000f906
c000fdd3:	c7 05 94 bc 03 c0 6e f4 00 c0 	mov    DWORD PTR ds:0xc003bc94,0xc000f46e
c000fddd:	c7 05 98 bc 03 c0 d4 f9 00 c0 	mov    DWORD PTR ds:0xc003bc98,0xc000f9d4
c000fde7:	c7 05 9c bc 03 c0 5e f5 00 c0 	mov    DWORD PTR ds:0xc003bc9c,0xc000f55e
c000fdf1:	c7 05 a0 bc 03 c0 fb f9 00 c0 	mov    DWORD PTR ds:0xc003bca0,0xc000f9fb
c000fdfb:	c7 05 a4 bc 03 c0 82 f9 00 c0 	mov    DWORD PTR ds:0xc003bca4,0xc000f982
c000fe05:	c7 05 a8 bc 03 c0 6b fa 00 c0 	mov    DWORD PTR ds:0xc003bca8,0xc000fa6b
c000fe0f:	c7 05 ac bc 03 c0 48 f1 00 c0 	mov    DWORD PTR ds:0xc003bcac,0xc000f148
c000fe19:	c7 05 b0 bc 03 c0 b2 f1 00 c0 	mov    DWORD PTR ds:0xc003bcb0,0xc000f1b2
c000fe23:	c7 05 b4 bc 03 c0 f8 f1 00 c0 	mov    DWORD PTR ds:0xc003bcb4,0xc000f1f8
c000fe2d:	c7 05 b8 bc 03 c0 8a fb 00 c0 	mov    DWORD PTR ds:0xc003bcb8,0xc000fb8a
c000fe37:	c7 05 bc bc 03 c0 ea fb 00 c0 	mov    DWORD PTR ds:0xc003bcbc,0xc000fbea
c000fe41:	c7 05 c0 bc 03 c0 49 f2 00 c0 	mov    DWORD PTR ds:0xc003bcc0,0xc000f249
c000fe4b:	c7 05 c4 bc 03 c0 10 fc 00 c0 	mov    DWORD PTR ds:0xc003bcc4,0xc000fc10
c000fe55:	c7 05 c8 bc 03 c0 55 fc 00 c0 	mov    DWORD PTR ds:0xc003bcc8,0xc000fc55
c000fe5f:	c3                   	ret    

c000fe60 <systemCall(regs*, void*)>:
c000fe60:	53                   	push   ebx
c000fe61:	83 ec 08             	sub    esp,0x8
c000fe64:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe68:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000fe6b:	83 f8 7f             	cmp    eax,0x7f
c000fe6e:	77 16                	ja     c000fe86 <systemCall(regs*, void*)+0x26>
c000fe70:	8b 14 85 20 bc 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc43e0]
c000fe77:	85 d2                	test   edx,edx
c000fe79:	74 0b                	je     c000fe86 <systemCall(regs*, void*)+0x26>
c000fe7b:	83 ec 0c             	sub    esp,0xc
c000fe7e:	53                   	push   ebx
c000fe7f:	ff d2                	call   edx
c000fe81:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000fe84:	eb 0d                	jmp    c000fe93 <systemCall(regs*, void*)+0x33>
c000fe86:	52                   	push   edx
c000fe87:	52                   	push   edx
c000fe88:	50                   	push   eax
c000fe89:	68 fc 92 03 c0       	push   0xc00392fc
c000fe8e:	e8 6f d0 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c000fe93:	83 c4 10             	add    esp,0x10
c000fe96:	b8 ef be ad de       	mov    eax,0xdeadbeef
c000fe9b:	31 d2                	xor    edx,edx
c000fe9d:	83 c4 08             	add    esp,0x8
c000fea0:	5b                   	pop    ebx
c000fea1:	c3                   	ret    

c000fea2 <VgaText::isAtty()>:
c000fea2:	b0 01                	mov    al,0x1
c000fea4:	c3                   	ret    
c000fea5:	90                   	nop

c000fea6 <VgaText::~VgaText()>:
c000fea6:	83 ec 0c             	sub    esp,0xc
c000fea9:	ba 04 94 03 c0       	mov    edx,0xc0039404
c000feae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feb2:	89 10                	mov    DWORD PTR [eax],edx
c000feb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feb8:	83 ec 0c             	sub    esp,0xc
c000febb:	50                   	push   eax
c000febc:	e8 81 12 00 00       	call   c0011142 <UnixFile::~UnixFile()>
c000fec1:	83 c4 10             	add    esp,0x10
c000fec4:	90                   	nop
c000fec5:	83 c4 0c             	add    esp,0xc
c000fec8:	c3                   	ret    
c000fec9:	90                   	nop

c000feca <VgaText::~VgaText()>:
c000feca:	83 ec 0c             	sub    esp,0xc
c000fecd:	83 ec 0c             	sub    esp,0xc
c000fed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fed4:	e8 cd ff ff ff       	call   c000fea6 <VgaText::~VgaText()>
c000fed9:	83 c4 10             	add    esp,0x10
c000fedc:	83 ec 08             	sub    esp,0x8
c000fedf:	68 60 12 00 00       	push   0x1260
c000fee4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fee8:	e8 d4 25 00 00       	call   c00124c1 <operator delete(void*, unsigned long)>
c000feed:	83 c4 10             	add    esp,0x10
c000fef0:	83 c4 0c             	add    esp,0xc
c000fef3:	c3                   	ret    

c000fef4 <VgaText::read(unsigned long long, void*, int*)>:
c000fef4:	83 ec 10             	sub    esp,0x10
c000fef7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fefb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000feff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff03:	e8 34 4f 00 00       	call   c0014e3c <readKeyboard(VgaText*, char*, unsigned long)>
c000ff08:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000ff0c:	89 02                	mov    DWORD PTR [edx],eax
c000ff0e:	31 c0                	xor    eax,eax
c000ff10:	83 c4 1c             	add    esp,0x1c
c000ff13:	c3                   	ret    

c000ff14 <setTerminalScrollLock(bool)>:
c000ff14:	c3                   	ret    

c000ff15 <addToTerminalCycle(VgaText*)>:
c000ff15:	8b 15 40 be 03 c0    	mov    edx,DWORD PTR ds:0xc003be40
c000ff1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff1f:	85 d2                	test   edx,edx
c000ff21:	75 0c                	jne    c000ff2f <addToTerminalCycle(VgaText*)+0x1a>
c000ff23:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000ff29:	a3 40 be 03 c0       	mov    ds:0xc003be40,eax
c000ff2e:	c3                   	ret    
c000ff2f:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000ff35:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000ff3b:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000ff41:	c3                   	ret    

c000ff42 <installVgaTextImplementation()>:
c000ff42:	83 ec 10             	sub    esp,0x10
c000ff45:	6a 20                	push   0x20
c000ff47:	6a 00                	push   0x0
c000ff49:	68 20 be 03 c0       	push   0xc003be20
c000ff4e:	e8 85 07 ff ff       	call   c00006d8 <memset>
c000ff53:	83 c4 1c             	add    esp,0x1c
c000ff56:	c3                   	ret    

c000ff57 <scrollTerminalScrollLock(int)>:
c000ff57:	c3                   	ret    

c000ff58 <VgaText::load()>:
c000ff58:	53                   	push   ebx
c000ff59:	31 c0                	xor    eax,eax
c000ff5b:	83 ec 58             	sub    esp,0x58
c000ff5e:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ff62:	89 e2                	mov    edx,esp
c000ff64:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000ff68:	40                   	inc    eax
c000ff69:	83 f8 50             	cmp    eax,0x50
c000ff6c:	75 f6                	jne    c000ff64 <VgaText::load()+0xc>
c000ff6e:	31 c0                	xor    eax,eax
c000ff70:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000ff77:	84 c9                	test   cl,cl
c000ff79:	74 06                	je     c000ff81 <VgaText::load()+0x29>
c000ff7b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ff7e:	40                   	inc    eax
c000ff7f:	eb ef                	jmp    c000ff70 <VgaText::load()+0x18>
c000ff81:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000ff87:	85 c0                	test   eax,eax
c000ff89:	74 09                	je     c000ff94 <VgaText::load()+0x3c>
c000ff8b:	51                   	push   ecx
c000ff8c:	51                   	push   ecx
c000ff8d:	52                   	push   edx
c000ff8e:	53                   	push   ebx
c000ff8f:	ff d0                	call   eax
c000ff91:	83 c4 10             	add    esp,0x10
c000ff94:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000ff9a:	85 c0                	test   eax,eax
c000ff9c:	74 09                	je     c000ffa7 <VgaText::load()+0x4f>
c000ff9e:	83 ec 0c             	sub    esp,0xc
c000ffa1:	53                   	push   ebx
c000ffa2:	ff d0                	call   eax
c000ffa4:	83 c4 10             	add    esp,0x10
c000ffa7:	83 c4 58             	add    esp,0x58
c000ffaa:	5b                   	pop    ebx
c000ffab:	c3                   	ret    

c000ffac <VgaText::updateCursor()>:
c000ffac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffb0:	39 05 44 be 03 c0    	cmp    DWORD PTR ds:0xc003be44,eax
c000ffb6:	75 0c                	jne    c000ffc4 <VgaText::updateCursor()+0x18>
c000ffb8:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000ffbe:	85 c0                	test   eax,eax
c000ffc0:	74 02                	je     c000ffc4 <VgaText::updateCursor()+0x18>
c000ffc2:	ff e0                	jmp    eax
c000ffc4:	c3                   	ret    
c000ffc5:	90                   	nop

c000ffc6 <VgaText::showCursor(bool)>:
c000ffc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ffca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ffce:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000ffd4:	c3                   	ret    
c000ffd5:	90                   	nop

c000ffd6 <VgaText::disableBlink(bool)>:
c000ffd6:	56                   	push   esi
c000ffd7:	53                   	push   ebx
c000ffd8:	51                   	push   ecx
c000ffd9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffdd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ffe1:	39 1d 44 be 03 c0    	cmp    DWORD PTR ds:0xc003be44,ebx
c000ffe7:	75 18                	jne    c0010001 <VgaText::disableBlink(bool)+0x2b>
c000ffe9:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000ffef:	85 c0                	test   eax,eax
c000fff1:	74 0e                	je     c0010001 <VgaText::disableBlink(bool)+0x2b>
c000fff3:	89 f1                	mov    ecx,esi
c000fff5:	52                   	push   edx
c000fff6:	52                   	push   edx
c000fff7:	0f b6 d1             	movzx  edx,cl
c000fffa:	52                   	push   edx
c000fffb:	53                   	push   ebx
c000fffc:	ff d0                	call   eax
c000fffe:	83 c4 10             	add    esp,0x10
c0010001:	89 f0                	mov    eax,esi
c0010003:	83 f0 01             	xor    eax,0x1
c0010006:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c001000c:	58                   	pop    eax
c001000d:	5b                   	pop    ebx
c001000e:	5e                   	pop    esi
c001000f:	c3                   	ret    

c0010010 <VgaText::doANSI_SGR(int)>:
c0010010:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010014:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010018:	85 d2                	test   edx,edx
c001001a:	75 14                	jne    c0010030 <VgaText::doANSI_SGR(int)+0x20>
c001001c:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c0010022:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010028:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c001002e:	eb 65                	jmp    c0010095 <VgaText::doANSI_SGR(int)+0x85>
c0010030:	83 fa 07             	cmp    edx,0x7
c0010033:	75 14                	jne    c0010049 <VgaText::doANSI_SGR(int)+0x39>
c0010035:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c001003b:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c0010041:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c0010047:	eb 4c                	jmp    c0010095 <VgaText::doANSI_SGR(int)+0x85>
c0010049:	83 fa 1b             	cmp    edx,0x1b
c001004c:	74 ce                	je     c001001c <VgaText::doANSI_SGR(int)+0xc>
c001004e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010051:	83 f9 07             	cmp    ecx,0x7
c0010054:	77 09                	ja     c001005f <VgaText::doANSI_SGR(int)+0x4f>
c0010056:	8b 14 8d 00 ae 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffc5200]
c001005d:	eb 20                	jmp    c001007f <VgaText::doANSI_SGR(int)+0x6f>
c001005f:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010062:	83 f9 07             	cmp    ecx,0x7
c0010065:	77 09                	ja     c0010070 <VgaText::doANSI_SGR(int)+0x60>
c0010067:	8b 14 8d 00 ae 03 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffc5200]
c001006e:	eb 25                	jmp    c0010095 <VgaText::doANSI_SGR(int)+0x85>
c0010070:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010073:	83 f9 07             	cmp    ecx,0x7
c0010076:	77 0e                	ja     c0010086 <VgaText::doANSI_SGR(int)+0x76>
c0010078:	8b 14 95 b8 ac 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc5348]
c001007f:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010085:	c3                   	ret    
c0010086:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010089:	83 f9 07             	cmp    ecx,0x7
c001008c:	77 0d                	ja     c001009b <VgaText::doANSI_SGR(int)+0x8b>
c001008e:	8b 14 95 90 ac 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc5370]
c0010095:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001009b:	c3                   	ret    

c001009c <VgaText::setDefaultBgColour(VgaColour)>:
c001009c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00100a4:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c00100aa:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c00100b0:	c3                   	ret    
c00100b1:	90                   	nop

c00100b2 <VgaText::setDefaultFgColour(VgaColour)>:
c00100b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00100ba:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c00100c0:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00100c6:	c3                   	ret    
c00100c7:	90                   	nop

c00100c8 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00100c8:	53                   	push   ebx
c00100c9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00100cd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00100d1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00100d5:	51                   	push   ecx
c00100d6:	e8 c1 ff ff ff       	call   c001009c <VgaText::setDefaultBgColour(VgaColour)>
c00100db:	58                   	pop    eax
c00100dc:	5a                   	pop    edx
c00100dd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00100e1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00100e5:	5b                   	pop    ebx
c00100e6:	eb ca                	jmp    c00100b2 <VgaText::setDefaultFgColour(VgaColour)>

c00100e8 <VgaText::combineColours(unsigned char, unsigned char)>:
c00100e8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00100ec:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00100f1:	83 e0 0f             	and    eax,0xf
c00100f4:	c1 e2 04             	shl    edx,0x4
c00100f7:	09 d0                	or     eax,edx
c00100f9:	c3                   	ret    

c00100fa <VgaText::scrollScreen()>:
c00100fa:	57                   	push   edi
c00100fb:	56                   	push   esi
c00100fc:	be 01 00 00 00       	mov    esi,0x1
c0010101:	53                   	push   ebx
c0010102:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010106:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c001010c:	31 ff                	xor    edi,edi
c001010e:	01 d9                	add    ecx,ebx
c0010110:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c0010113:	83 fe 17             	cmp    esi,0x17
c0010116:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c001011c:	75 28                	jne    c0010146 <VgaText::scrollScreen()+0x4c>
c001011e:	f7 c7 01 00 00 00    	test   edi,0x1
c0010124:	74 1c                	je     c0010142 <VgaText::scrollScreen()+0x48>
c0010126:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c001012d:	50                   	push   eax
c001012e:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c0010135:	50                   	push   eax
c0010136:	e8 ad ff ff ff       	call   c00100e8 <VgaText::combineColours(unsigned char, unsigned char)>
c001013b:	5a                   	pop    edx
c001013c:	5a                   	pop    edx
c001013d:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c0010140:	eb 04                	jmp    c0010146 <VgaText::scrollScreen()+0x4c>
c0010142:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c0010146:	47                   	inc    edi
c0010147:	41                   	inc    ecx
c0010148:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001014e:	75 c0                	jne    c0010110 <VgaText::scrollScreen()+0x16>
c0010150:	46                   	inc    esi
c0010151:	83 fe 18             	cmp    esi,0x18
c0010154:	75 b0                	jne    c0010106 <VgaText::scrollScreen()+0xc>
c0010156:	39 1d 44 be 03 c0    	cmp    DWORD PTR ds:0xc003be44,ebx
c001015c:	75 24                	jne    c0010182 <VgaText::scrollScreen()+0x88>
c001015e:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010165:	74 08                	je     c001016f <VgaText::scrollScreen()+0x75>
c0010167:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c001016d:	eb 13                	jmp    c0010182 <VgaText::scrollScreen()+0x88>
c001016f:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010175:	85 c0                	test   eax,eax
c0010177:	74 09                	je     c0010182 <VgaText::scrollScreen()+0x88>
c0010179:	83 ec 0c             	sub    esp,0xc
c001017c:	53                   	push   ebx
c001017d:	ff d0                	call   eax
c001017f:	83 c4 10             	add    esp,0x10
c0010182:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010186:	5b                   	pop    ebx
c0010187:	5e                   	pop    esi
c0010188:	5f                   	pop    edi
c0010189:	e9 1e fe ff ff       	jmp    c000ffac <VgaText::updateCursor()>

c001018e <VgaText::combineCharAndColour(char, unsigned char)>:
c001018e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0010193:	c1 e0 08             	shl    eax,0x8
c0010196:	89 c2                	mov    edx,eax
c0010198:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001019d:	09 d0                	or     eax,edx
c001019f:	c3                   	ret    

c00101a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00101a0:	53                   	push   ebx
c00101a1:	83 ec 08             	sub    esp,0x8
c00101a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00101a8:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00101ad:	50                   	push   eax
c00101ae:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00101b3:	50                   	push   eax
c00101b4:	e8 2f ff ff ff       	call   c00100e8 <VgaText::combineColours(unsigned char, unsigned char)>
c00101b9:	5a                   	pop    edx
c00101ba:	0f b6 c0             	movzx  eax,al
c00101bd:	5b                   	pop    ebx
c00101be:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c00101c3:	50                   	push   eax
c00101c4:	53                   	push   ebx
c00101c5:	e8 c4 ff ff ff       	call   c001018e <VgaText::combineCharAndColour(char, unsigned char)>
c00101ca:	5a                   	pop    edx
c00101cb:	5a                   	pop    edx
c00101cc:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c00101d2:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c00101d6:	0f b7 d2             	movzx  edx,dx
c00101d9:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c00101de:	39 0d 44 be 03 c0    	cmp    DWORD PTR ds:0xc003be44,ecx
c00101e4:	75 14                	jne    c00101fa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00101e6:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c00101ec:	85 c0                	test   eax,eax
c00101ee:	74 0a                	je     c00101fa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c00101f0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00101f4:	83 c4 08             	add    esp,0x8
c00101f7:	5b                   	pop    ebx
c00101f8:	ff e0                	jmp    eax
c00101fa:	83 c4 08             	add    esp,0x8
c00101fd:	5b                   	pop    ebx
c00101fe:	c3                   	ret    
c00101ff:	90                   	nop

c0010200 <VgaText::getCursorX()>:
c0010200:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010204:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c001020a:	c3                   	ret    
c001020b:	90                   	nop

c001020c <VgaText::getCursorY()>:
c001020c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010210:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c0010216:	c3                   	ret    
c0010217:	90                   	nop

c0010218 <VgaText::setCursor(int, int)>:
c0010218:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001021c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010220:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c0010226:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001022a:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c0010230:	e9 77 fd ff ff       	jmp    c000ffac <VgaText::updateCursor()>
c0010235:	90                   	nop

c0010236 <VgaText::setCursorX(int)>:
c0010236:	83 ec 10             	sub    esp,0x10
c0010239:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001023d:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c0010243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010247:	50                   	push   eax
c0010248:	e8 cb ff ff ff       	call   c0010218 <VgaText::setCursor(int, int)>
c001024d:	83 c4 1c             	add    esp,0x1c
c0010250:	c3                   	ret    
c0010251:	90                   	nop

c0010252 <VgaText::setCursorY(int)>:
c0010252:	83 ec 10             	sub    esp,0x10
c0010255:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010259:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001025d:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c0010263:	50                   	push   eax
c0010264:	e8 af ff ff ff       	call   c0010218 <VgaText::setCursor(int, int)>
c0010269:	83 c4 1c             	add    esp,0x1c
c001026c:	c3                   	ret    
c001026d:	90                   	nop

c001026e <VgaText::incrementCursor(bool)>:
c001026e:	56                   	push   esi
c001026f:	53                   	push   ebx
c0010270:	51                   	push   ecx
c0010271:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010275:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010279:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c001027f:	40                   	inc    eax
c0010280:	83 f8 50             	cmp    eax,0x50
c0010283:	74 08                	je     c001028d <VgaText::incrementCursor(bool)+0x1f>
c0010285:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c001028b:	eb 33                	jmp    c00102c0 <VgaText::incrementCursor(bool)+0x52>
c001028d:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010293:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001029d:	8d 50 01             	lea    edx,[eax+0x1]
c00102a0:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00102a6:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00102ac:	75 12                	jne    c00102c0 <VgaText::incrementCursor(bool)+0x52>
c00102ae:	83 ec 0c             	sub    esp,0xc
c00102b1:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00102b7:	53                   	push   ebx
c00102b8:	e8 3d fe ff ff       	call   c00100fa <VgaText::scrollScreen()>
c00102bd:	83 c4 10             	add    esp,0x10
c00102c0:	89 f0                	mov    eax,esi
c00102c2:	84 c0                	test   al,al
c00102c4:	74 0c                	je     c00102d2 <VgaText::incrementCursor(bool)+0x64>
c00102c6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00102ca:	5a                   	pop    edx
c00102cb:	5b                   	pop    ebx
c00102cc:	5e                   	pop    esi
c00102cd:	e9 da fc ff ff       	jmp    c000ffac <VgaText::updateCursor()>
c00102d2:	58                   	pop    eax
c00102d3:	5b                   	pop    ebx
c00102d4:	5e                   	pop    esi
c00102d5:	c3                   	ret    

c00102d6 <VgaText::updateRAMUsageDisplay(int)>:
c00102d6:	53                   	push   ebx
c00102d7:	bb 0a 00 00 00       	mov    ebx,0xa
c00102dc:	6a 0f                	push   0xf
c00102de:	6a 00                	push   0x0
c00102e0:	e8 03 fe ff ff       	call   c00100e8 <VgaText::combineColours(unsigned char, unsigned char)>
c00102e5:	5a                   	pop    edx
c00102e6:	59                   	pop    ecx
c00102e7:	0f b6 c8             	movzx  ecx,al
c00102ea:	51                   	push   ecx
c00102eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00102ef:	99                   	cdq    
c00102f0:	f7 fb                	idiv   ebx
c00102f2:	89 d3                	mov    ebx,edx
c00102f4:	83 c0 30             	add    eax,0x30
c00102f7:	83 c3 30             	add    ebx,0x30
c00102fa:	0f be c0             	movsx  eax,al
c00102fd:	0f b6 db             	movzx  ebx,bl
c0010300:	50                   	push   eax
c0010301:	e8 88 fe ff ff       	call   c001018e <VgaText::combineCharAndColour(char, unsigned char)>
c0010306:	5a                   	pop    edx
c0010307:	5a                   	pop    edx
c0010308:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c001030e:	51                   	push   ecx
c001030f:	53                   	push   ebx
c0010310:	e8 79 fe ff ff       	call   c001018e <VgaText::combineCharAndColour(char, unsigned char)>
c0010315:	5b                   	pop    ebx
c0010316:	5a                   	pop    edx
c0010317:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c001031d:	51                   	push   ecx
c001031e:	6a 25                	push   0x25
c0010320:	e8 69 fe ff ff       	call   c001018e <VgaText::combineCharAndColour(char, unsigned char)>
c0010325:	59                   	pop    ecx
c0010326:	5b                   	pop    ebx
c0010327:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c001032d:	5b                   	pop    ebx
c001032e:	c3                   	ret    
c001032f:	90                   	nop

c0010330 <VgaText::updateDiskUsage()>:
c0010330:	55                   	push   ebp
c0010331:	bd 10 27 00 00       	mov    ebp,0x2710
c0010336:	57                   	push   edi
c0010337:	56                   	push   esi
c0010338:	53                   	push   ebx
c0010339:	6a 0f                	push   0xf
c001033b:	6a 00                	push   0x0
c001033d:	e8 a6 fd ff ff       	call   c00100e8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010342:	5a                   	pop    edx
c0010343:	0f b6 d8             	movzx  ebx,al
c0010346:	59                   	pop    ecx
c0010347:	a1 88 d0 03 c0       	mov    eax,ds:0xc003d088
c001034c:	53                   	push   ebx
c001034d:	b9 0a 00 00 00       	mov    ecx,0xa
c0010352:	99                   	cdq    
c0010353:	f7 fd                	idiv   ebp
c0010355:	99                   	cdq    
c0010356:	f7 f9                	idiv   ecx
c0010358:	8d 42 30             	lea    eax,[edx+0x30]
c001035b:	0f b6 c0             	movzx  eax,al
c001035e:	50                   	push   eax
c001035f:	e8 2a fe ff ff       	call   c001018e <VgaText::combineCharAndColour(char, unsigned char)>
c0010364:	5e                   	pop    esi
c0010365:	5f                   	pop    edi
c0010366:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001036c:	bf e8 03 00 00       	mov    edi,0x3e8
c0010371:	53                   	push   ebx
c0010372:	a1 88 d0 03 c0       	mov    eax,ds:0xc003d088
c0010377:	99                   	cdq    
c0010378:	f7 ff                	idiv   edi
c001037a:	99                   	cdq    
c001037b:	f7 f9                	idiv   ecx
c001037d:	8d 42 30             	lea    eax,[edx+0x30]
c0010380:	0f b6 c0             	movzx  eax,al
c0010383:	50                   	push   eax
c0010384:	e8 05 fe ff ff       	call   c001018e <VgaText::combineCharAndColour(char, unsigned char)>
c0010389:	5a                   	pop    edx
c001038a:	5e                   	pop    esi
c001038b:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c0010391:	be 64 00 00 00       	mov    esi,0x64
c0010396:	53                   	push   ebx
c0010397:	a1 88 d0 03 c0       	mov    eax,ds:0xc003d088
c001039c:	99                   	cdq    
c001039d:	f7 fe                	idiv   esi
c001039f:	99                   	cdq    
c00103a0:	f7 f9                	idiv   ecx
c00103a2:	8d 42 30             	lea    eax,[edx+0x30]
c00103a5:	0f b6 c0             	movzx  eax,al
c00103a8:	50                   	push   eax
c00103a9:	e8 e0 fd ff ff       	call   c001018e <VgaText::combineCharAndColour(char, unsigned char)>
c00103ae:	5a                   	pop    edx
c00103af:	5a                   	pop    edx
c00103b0:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c00103b6:	53                   	push   ebx
c00103b7:	a1 88 d0 03 c0       	mov    eax,ds:0xc003d088
c00103bc:	99                   	cdq    
c00103bd:	f7 f9                	idiv   ecx
c00103bf:	99                   	cdq    
c00103c0:	f7 f9                	idiv   ecx
c00103c2:	8d 42 30             	lea    eax,[edx+0x30]
c00103c5:	0f b6 c0             	movzx  eax,al
c00103c8:	50                   	push   eax
c00103c9:	e8 c0 fd ff ff       	call   c001018e <VgaText::combineCharAndColour(char, unsigned char)>
c00103ce:	5a                   	pop    edx
c00103cf:	5a                   	pop    edx
c00103d0:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c00103d6:	53                   	push   ebx
c00103d7:	a1 88 d0 03 c0       	mov    eax,ds:0xc003d088
c00103dc:	99                   	cdq    
c00103dd:	f7 f9                	idiv   ecx
c00103df:	8d 42 30             	lea    eax,[edx+0x30]
c00103e2:	0f b6 c0             	movzx  eax,al
c00103e5:	50                   	push   eax
c00103e6:	e8 a3 fd ff ff       	call   c001018e <VgaText::combineCharAndColour(char, unsigned char)>
c00103eb:	5a                   	pop    edx
c00103ec:	5a                   	pop    edx
c00103ed:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c00103f3:	53                   	push   ebx
c00103f4:	a1 84 d0 03 c0       	mov    eax,ds:0xc003d084
c00103f9:	99                   	cdq    
c00103fa:	f7 fd                	idiv   ebp
c00103fc:	99                   	cdq    
c00103fd:	f7 f9                	idiv   ecx
c00103ff:	8d 42 30             	lea    eax,[edx+0x30]
c0010402:	0f b6 c0             	movzx  eax,al
c0010405:	50                   	push   eax
c0010406:	e8 83 fd ff ff       	call   c001018e <VgaText::combineCharAndColour(char, unsigned char)>
c001040b:	5d                   	pop    ebp
c001040c:	5a                   	pop    edx
c001040d:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c0010413:	53                   	push   ebx
c0010414:	a1 84 d0 03 c0       	mov    eax,ds:0xc003d084
c0010419:	99                   	cdq    
c001041a:	f7 ff                	idiv   edi
c001041c:	99                   	cdq    
c001041d:	f7 f9                	idiv   ecx
c001041f:	8d 42 30             	lea    eax,[edx+0x30]
c0010422:	0f b6 c0             	movzx  eax,al
c0010425:	50                   	push   eax
c0010426:	e8 63 fd ff ff       	call   c001018e <VgaText::combineCharAndColour(char, unsigned char)>
c001042b:	5f                   	pop    edi
c001042c:	5d                   	pop    ebp
c001042d:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c0010433:	53                   	push   ebx
c0010434:	a1 84 d0 03 c0       	mov    eax,ds:0xc003d084
c0010439:	99                   	cdq    
c001043a:	f7 fe                	idiv   esi
c001043c:	99                   	cdq    
c001043d:	f7 f9                	idiv   ecx
c001043f:	8d 42 30             	lea    eax,[edx+0x30]
c0010442:	0f b6 c0             	movzx  eax,al
c0010445:	50                   	push   eax
c0010446:	e8 43 fd ff ff       	call   c001018e <VgaText::combineCharAndColour(char, unsigned char)>
c001044b:	5a                   	pop    edx
c001044c:	5e                   	pop    esi
c001044d:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c0010453:	53                   	push   ebx
c0010454:	a1 84 d0 03 c0       	mov    eax,ds:0xc003d084
c0010459:	99                   	cdq    
c001045a:	f7 f9                	idiv   ecx
c001045c:	99                   	cdq    
c001045d:	f7 f9                	idiv   ecx
c001045f:	8d 42 30             	lea    eax,[edx+0x30]
c0010462:	0f b6 c0             	movzx  eax,al
c0010465:	50                   	push   eax
c0010466:	e8 23 fd ff ff       	call   c001018e <VgaText::combineCharAndColour(char, unsigned char)>
c001046b:	5f                   	pop    edi
c001046c:	5d                   	pop    ebp
c001046d:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c0010473:	53                   	push   ebx
c0010474:	a1 84 d0 03 c0       	mov    eax,ds:0xc003d084
c0010479:	99                   	cdq    
c001047a:	f7 f9                	idiv   ecx
c001047c:	83 c2 30             	add    edx,0x30
c001047f:	0f b6 d2             	movzx  edx,dl
c0010482:	52                   	push   edx
c0010483:	e8 06 fd ff ff       	call   c001018e <VgaText::combineCharAndColour(char, unsigned char)>
c0010488:	5a                   	pop    edx
c0010489:	59                   	pop    ecx
c001048a:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c0010490:	5b                   	pop    ebx
c0010491:	5e                   	pop    esi
c0010492:	5f                   	pop    edi
c0010493:	5d                   	pop    ebp
c0010494:	c3                   	ret    
c0010495:	90                   	nop

c0010496 <VgaText::updateTitle()>:
c0010496:	53                   	push   ebx
c0010497:	31 c0                	xor    eax,eax
c0010499:	83 ec 58             	sub    esp,0x58
c001049c:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00104a0:	89 e1                	mov    ecx,esp
c00104a2:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c00104a6:	40                   	inc    eax
c00104a7:	83 f8 50             	cmp    eax,0x50
c00104aa:	75 f6                	jne    c00104a2 <VgaText::updateTitle()+0xc>
c00104ac:	31 c0                	xor    eax,eax
c00104ae:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c00104b5:	84 db                	test   bl,bl
c00104b7:	74 06                	je     c00104bf <VgaText::updateTitle()+0x29>
c00104b9:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c00104bc:	40                   	inc    eax
c00104bd:	eb ef                	jmp    c00104ae <VgaText::updateTitle()+0x18>
c00104bf:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c00104c5:	85 c0                	test   eax,eax
c00104c7:	74 09                	je     c00104d2 <VgaText::updateTitle()+0x3c>
c00104c9:	53                   	push   ebx
c00104ca:	53                   	push   ebx
c00104cb:	51                   	push   ecx
c00104cc:	52                   	push   edx
c00104cd:	ff d0                	call   eax
c00104cf:	83 c4 10             	add    esp,0x10
c00104d2:	e8 59 fe ff ff       	call   c0010330 <VgaText::updateDiskUsage()>
c00104d7:	83 c4 58             	add    esp,0x58
c00104da:	5b                   	pop    ebx
c00104db:	c3                   	ret    

c00104dc <VgaText::setTitleTextColour(VgaColour)>:
c00104dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104e4:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c00104ea:	eb aa                	jmp    c0010496 <VgaText::updateTitle()>

c00104ec <VgaText::setTitleColour(VgaColour)>:
c00104ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104f4:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c00104fa:	eb 9a                	jmp    c0010496 <VgaText::updateTitle()>

c00104fc <VgaText::setTitle(char*)>:
c00104fc:	53                   	push   ebx
c00104fd:	83 ec 10             	sub    esp,0x10
c0010500:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010504:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010508:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c001050e:	50                   	push   eax
c001050f:	e8 e0 02 ff ff       	call   c00007f4 <strcpy>
c0010514:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010518:	83 c4 18             	add    esp,0x18
c001051b:	5b                   	pop    ebx
c001051c:	e9 75 ff ff ff       	jmp    c0010496 <VgaText::updateTitle()>
c0010521:	90                   	nop

c0010522 <VgaText::decrementCursor(bool)>:
c0010522:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010526:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001052a:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010530:	85 c0                	test   eax,eax
c0010532:	74 07                	je     c001053b <VgaText::decrementCursor(bool)+0x19>
c0010534:	48                   	dec    eax
c0010535:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c001053b:	84 c9                	test   cl,cl
c001053d:	74 09                	je     c0010548 <VgaText::decrementCursor(bool)+0x26>
c001053f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010543:	e9 64 fa ff ff       	jmp    c000ffac <VgaText::updateCursor()>
c0010548:	c3                   	ret    
c0010549:	90                   	nop

c001054a <VgaText::putchar(char, VgaColour, VgaColour)>:
c001054a:	53                   	push   ebx
c001054b:	83 ec 08             	sub    esp,0x8
c001054e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010552:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010556:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001055a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001055e:	3c 07                	cmp    al,0x7
c0010560:	75 2a                	jne    c001058c <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010562:	a1 64 be 03 c0       	mov    eax,ds:0xc003be64
c0010567:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001056f:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010577:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c001057f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010583:	83 c4 08             	add    esp,0x8
c0010586:	5b                   	pop    ebx
c0010587:	e9 10 2c 00 00       	jmp    c001319c <Buzzer::beep(int, int, bool)>
c001058c:	3c 0d                	cmp    al,0xd
c001058e:	75 0c                	jne    c001059c <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010590:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c001059a:	eb 3b                	jmp    c00105d7 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c001059c:	3c 0a                	cmp    al,0xa
c001059e:	75 40                	jne    c00105e0 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c00105a0:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c00105a6:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c00105b0:	8d 50 01             	lea    edx,[eax+0x1]
c00105b3:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c00105b9:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c00105bf:	75 12                	jne    c00105d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c00105c1:	83 ec 0c             	sub    esp,0xc
c00105c4:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c00105ca:	53                   	push   ebx
c00105cb:	e8 2a fb ff ff       	call   c00100fa <VgaText::scrollScreen()>
c00105d0:	83 c4 10             	add    esp,0x10
c00105d3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00105d7:	83 c4 08             	add    esp,0x8
c00105da:	5b                   	pop    ebx
c00105db:	e9 cc f9 ff ff       	jmp    c000ffac <VgaText::updateCursor()>
c00105e0:	3c 08                	cmp    al,0x8
c00105e2:	75 31                	jne    c0010615 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c00105e4:	50                   	push   eax
c00105e5:	50                   	push   eax
c00105e6:	6a 01                	push   0x1
c00105e8:	53                   	push   ebx
c00105e9:	e8 34 ff ff ff       	call   c0010522 <VgaText::decrementCursor(bool)>
c00105ee:	5a                   	pop    edx
c00105ef:	59                   	pop    ecx
c00105f0:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00105f6:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00105fc:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010602:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010608:	6a 20                	push   0x20
c001060a:	53                   	push   ebx
c001060b:	e8 90 fb ff ff       	call   c00101a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010610:	83 c4 28             	add    esp,0x28
c0010613:	5b                   	pop    ebx
c0010614:	c3                   	ret    
c0010615:	83 ec 08             	sub    esp,0x8
c0010618:	0f be c0             	movsx  eax,al
c001061b:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010621:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010627:	51                   	push   ecx
c0010628:	52                   	push   edx
c0010629:	50                   	push   eax
c001062a:	53                   	push   ebx
c001062b:	e8 70 fb ff ff       	call   c00101a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010630:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010634:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001063c:	83 c4 28             	add    esp,0x28
c001063f:	5b                   	pop    ebx
c0010640:	e9 29 fc ff ff       	jmp    c001026e <VgaText::incrementCursor(bool)>
c0010645:	90                   	nop

c0010646 <VgaText::isShowingCursor()>:
c0010646:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001064a:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010650:	c3                   	ret    
c0010651:	90                   	nop

c0010652 <VgaText::isBlinkDisabled()>:
c0010652:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010656:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c001065c:	83 f0 01             	xor    eax,0x1
c001065f:	c3                   	ret    

c0010660 <VgaText::setCursorHeight(int)>:
c0010660:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010664:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010668:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c001066e:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010675:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010679:	e9 48 f9 ff ff       	jmp    c000ffc6 <VgaText::showCursor(bool)>

c001067e <VgaText::getCursorHeight()>:
c001067e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010682:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010688:	c3                   	ret    

c0010689 <setActiveTerminal(VgaText*)>:
c0010689:	53                   	push   ebx
c001068a:	83 ec 08             	sub    esp,0x8
c001068d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010691:	85 db                	test   ebx,ebx
c0010693:	75 11                	jne    c00106a6 <setActiveTerminal(VgaText*)+0x1d>
c0010695:	c7 44 24 10 5c 93 03 c0 	mov    DWORD PTR [esp+0x10],0xc003935c
c001069d:	83 c4 08             	add    esp,0x8
c00106a0:	5b                   	pop    ebx
c00106a1:	e9 7a c9 ff ff       	jmp    c000d020 <panic(char const*)>
c00106a6:	50                   	push   eax
c00106a7:	50                   	push   eax
c00106a8:	53                   	push   ebx
c00106a9:	68 6a 93 03 c0       	push   0xc003936a
c00106ae:	e8 4f c8 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c00106b3:	a1 44 be 03 c0       	mov    eax,ds:0xc003be44
c00106b8:	83 c4 10             	add    esp,0x10
c00106bb:	85 c0                	test   eax,eax
c00106bd:	74 0c                	je     c00106cb <setActiveTerminal(VgaText*)+0x42>
c00106bf:	83 ec 0c             	sub    esp,0xc
c00106c2:	50                   	push   eax
c00106c3:	e8 e4 f8 ff ff       	call   c000ffac <VgaText::updateCursor()>
c00106c8:	83 c4 10             	add    esp,0x10
c00106cb:	89 1d 44 be 03 c0    	mov    DWORD PTR ds:0xc003be44,ebx
c00106d1:	51                   	push   ecx
c00106d2:	51                   	push   ecx
c00106d3:	53                   	push   ebx
c00106d4:	68 82 93 03 c0       	push   0xc0039382
c00106d9:	e8 24 c8 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c00106de:	83 c4 0c             	add    esp,0xc
c00106e1:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c00106e7:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c00106ed:	53                   	push   ebx
c00106ee:	e8 25 fb ff ff       	call   c0010218 <VgaText::setCursor(int, int)>
c00106f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00106f6:	e8 57 ff ff ff       	call   c0010652 <VgaText::isBlinkDisabled()>
c00106fb:	5a                   	pop    edx
c00106fc:	0f b6 c0             	movzx  eax,al
c00106ff:	59                   	pop    ecx
c0010700:	50                   	push   eax
c0010701:	53                   	push   ebx
c0010702:	e8 cf f8 ff ff       	call   c000ffd6 <VgaText::disableBlink(bool)>
c0010707:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001070a:	e8 6f ff ff ff       	call   c001067e <VgaText::getCursorHeight()>
c001070f:	5a                   	pop    edx
c0010710:	59                   	pop    ecx
c0010711:	50                   	push   eax
c0010712:	53                   	push   ebx
c0010713:	e8 48 ff ff ff       	call   c0010660 <VgaText::setCursorHeight(int)>
c0010718:	83 c4 10             	add    esp,0x10
c001071b:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010722:	75 0a                	jne    c001072e <setActiveTerminal(VgaText*)+0xa5>
c0010724:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c001072e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010732:	83 c4 08             	add    esp,0x8
c0010735:	5b                   	pop    ebx
c0010736:	e9 1d f8 ff ff       	jmp    c000ff58 <VgaText::load()>

c001073b <doTerminalCycle()>:
c001073b:	83 ec 18             	sub    esp,0x18
c001073e:	a1 40 be 03 c0       	mov    eax,ds:0xc003be40
c0010743:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010749:	50                   	push   eax
c001074a:	a3 40 be 03 c0       	mov    ds:0xc003be40,eax
c001074f:	e8 35 ff ff ff       	call   c0010689 <setActiveTerminal(VgaText*)>
c0010754:	83 c4 1c             	add    esp,0x1c
c0010757:	c3                   	ret    

c0010758 <VgaText::doUpdate()>:
c0010758:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001075c:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010762:	85 c0                	test   eax,eax
c0010764:	74 02                	je     c0010768 <VgaText::doUpdate()+0x10>
c0010766:	ff e0                	jmp    eax
c0010768:	c3                   	ret    
c0010769:	90                   	nop

c001076a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c001076a:	55                   	push   ebp
c001076b:	57                   	push   edi
c001076c:	56                   	push   esi
c001076d:	53                   	push   ebx
c001076e:	83 ec 1c             	sub    esp,0x1c
c0010771:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010775:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001077a:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010781:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010784:	50                   	push   eax
c0010785:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c001078a:	50                   	push   eax
c001078b:	e8 58 f9 ff ff       	call   c00100e8 <VgaText::combineColours(unsigned char, unsigned char)>
c0010790:	59                   	pop    ecx
c0010791:	0f b6 c0             	movzx  eax,al
c0010794:	5b                   	pop    ebx
c0010795:	31 c9                	xor    ecx,ecx
c0010797:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c001079f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00107a3:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c00107a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00107ad:	0f b7 db             	movzx  ebx,bx
c00107b0:	01 db                	add    ebx,ebx
c00107b2:	01 fb                	add    ebx,edi
c00107b4:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00107b7:	84 c0                	test   al,al
c00107b9:	0f 84 38 01 00 00    	je     c00108f7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c00107bf:	3c 0d                	cmp    al,0xd
c00107c1:	75 0f                	jne    c00107d2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c00107c3:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00107cd:	e9 1f 01 00 00       	jmp    c00108f1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c00107d2:	3c 0a                	cmp    al,0xa
c00107d4:	75 5b                	jne    c0010831 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c00107d6:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c00107dc:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c00107e6:	8d 48 01             	lea    ecx,[eax+0x1]
c00107e9:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c00107ef:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c00107f5:	75 12                	jne    c0010809 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c00107f7:	83 ec 0c             	sub    esp,0xc
c00107fa:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010800:	55                   	push   ebp
c0010801:	e8 f4 f8 ff ff       	call   c00100fa <VgaText::scrollScreen()>
c0010806:	83 c4 10             	add    esp,0x10
c0010809:	83 ec 0c             	sub    esp,0xc
c001080c:	55                   	push   ebp
c001080d:	e8 9a f7 ff ff       	call   c000ffac <VgaText::updateCursor()>
c0010812:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c001081a:	83 c4 10             	add    esp,0x10
c001081d:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010823:	31 c9                	xor    ecx,ecx
c0010825:	0f b7 db             	movzx  ebx,bx
c0010828:	01 db                	add    ebx,ebx
c001082a:	01 fb                	add    ebx,edi
c001082c:	e9 c0 00 00 00       	jmp    c00108f1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010831:	3c 08                	cmp    al,0x8
c0010833:	75 4e                	jne    c0010883 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010835:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010839:	53                   	push   ebx
c001083a:	53                   	push   ebx
c001083b:	6a 01                	push   0x1
c001083d:	55                   	push   ebp
c001083e:	e8 df fc ff ff       	call   c0010522 <VgaText::decrementCursor(bool)>
c0010843:	58                   	pop    eax
c0010844:	5a                   	pop    edx
c0010845:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c001084b:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010851:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010857:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c001085d:	6a 20                	push   0x20
c001085f:	55                   	push   ebp
c0010860:	e8 3b f9 ff ff       	call   c00101a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010865:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c001086d:	83 c4 20             	add    esp,0x20
c0010870:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010876:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001087a:	0f b7 db             	movzx  ebx,bx
c001087d:	01 db                	add    ebx,ebx
c001087f:	01 fb                	add    ebx,edi
c0010881:	eb 6e                	jmp    c00108f1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010883:	51                   	push   ecx
c0010884:	51                   	push   ecx
c0010885:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010889:	50                   	push   eax
c001088a:	e8 ff f8 ff ff       	call   c001018e <VgaText::combineCharAndColour(char, unsigned char)>
c001088f:	83 c4 10             	add    esp,0x10
c0010892:	66 89 03             	mov    WORD PTR [ebx],ax
c0010895:	39 2d 44 be 03 c0    	cmp    DWORD PTR ds:0xc003be44,ebp
c001089b:	75 2a                	jne    c00108c7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c001089d:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c00108a3:	85 c0                	test   eax,eax
c00108a5:	74 20                	je     c00108c7 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c00108a7:	52                   	push   edx
c00108a8:	52                   	push   edx
c00108a9:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c00108af:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c00108b5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00108b9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00108bd:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c00108c0:	51                   	push   ecx
c00108c1:	55                   	push   ebp
c00108c2:	ff d0                	call   eax
c00108c4:	83 c4 20             	add    esp,0x20
c00108c7:	83 c3 02             	add    ebx,0x2
c00108ca:	50                   	push   eax
c00108cb:	50                   	push   eax
c00108cc:	6a 00                	push   0x0
c00108ce:	55                   	push   ebp
c00108cf:	e8 9a f9 ff ff       	call   c001026e <VgaText::incrementCursor(bool)>
c00108d4:	83 c4 10             	add    esp,0x10
c00108d7:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c00108de:	75 0f                	jne    c00108ef <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c00108e0:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c00108e8:	0f b7 db             	movzx  ebx,bx
c00108eb:	01 db                	add    ebx,ebx
c00108ed:	01 fb                	add    ebx,edi
c00108ef:	b1 01                	mov    cl,0x1
c00108f1:	46                   	inc    esi
c00108f2:	e9 bd fe ff ff       	jmp    c00107b4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c00108f7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00108fb:	83 ec 0c             	sub    esp,0xc
c00108fe:	55                   	push   ebp
c00108ff:	e8 a8 f6 ff ff       	call   c000ffac <VgaText::updateCursor()>
c0010904:	83 c4 10             	add    esp,0x10
c0010907:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001090b:	84 c9                	test   cl,cl
c001090d:	74 0c                	je     c001091b <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c001090f:	83 ec 0c             	sub    esp,0xc
c0010912:	55                   	push   ebp
c0010913:	e8 40 fe ff ff       	call   c0010758 <VgaText::doUpdate()>
c0010918:	83 c4 10             	add    esp,0x10
c001091b:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010922:	83 c4 1c             	add    esp,0x1c
c0010925:	5b                   	pop    ebx
c0010926:	5e                   	pop    esi
c0010927:	5f                   	pop    edi
c0010928:	5d                   	pop    ebp
c0010929:	c3                   	ret    

c001092a <VgaText::clearScreen()>:
c001092a:	57                   	push   edi
c001092b:	56                   	push   esi
c001092c:	31 f6                	xor    esi,esi
c001092e:	53                   	push   ebx
c001092f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010933:	52                   	push   edx
c0010934:	6a 00                	push   0x0
c0010936:	6a 00                	push   0x0
c0010938:	53                   	push   ebx
c0010939:	e8 da f8 ff ff       	call   c0010218 <VgaText::setCursor(int, int)>
c001093e:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010945:	83 c4 10             	add    esp,0x10
c0010948:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c001094e:	7e 26                	jle    c0010976 <VgaText::clearScreen()+0x4c>
c0010950:	31 ff                	xor    edi,edi
c0010952:	50                   	push   eax
c0010953:	50                   	push   eax
c0010954:	56                   	push   esi
c0010955:	57                   	push   edi
c0010956:	47                   	inc    edi
c0010957:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c001095d:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010963:	6a 20                	push   0x20
c0010965:	53                   	push   ebx
c0010966:	e8 35 f8 ff ff       	call   c00101a0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001096b:	83 c4 20             	add    esp,0x20
c001096e:	83 ff 50             	cmp    edi,0x50
c0010971:	75 df                	jne    c0010952 <VgaText::clearScreen()+0x28>
c0010973:	46                   	inc    esi
c0010974:	eb d2                	jmp    c0010948 <VgaText::clearScreen()+0x1e>
c0010976:	83 ec 0c             	sub    esp,0xc
c0010979:	53                   	push   ebx
c001097a:	e8 d9 fd ff ff       	call   c0010758 <VgaText::doUpdate()>
c001097f:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0010986:	83 c4 10             	add    esp,0x10
c0010989:	5b                   	pop    ebx
c001098a:	5e                   	pop    esi
c001098b:	5f                   	pop    edi
c001098c:	c3                   	ret    
c001098d:	90                   	nop

c001098e <VgaText::putchar(char)>:
c001098e:	56                   	push   esi
c001098f:	53                   	push   ebx
c0010990:	83 ec 14             	sub    esp,0x14
c0010993:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010997:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001099b:	3c 5b                	cmp    al,0x5b
c001099d:	75 21                	jne    c00109c0 <VgaText::putchar(char)+0x32>
c001099f:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c00109a6:	74 28                	je     c00109d0 <VgaText::putchar(char)+0x42>
c00109a8:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c00109b1:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c00109bb:	e9 e2 00 00 00       	jmp    c0010aa2 <VgaText::putchar(char)+0x114>
c00109c0:	3c 1b                	cmp    al,0x1b
c00109c2:	75 0c                	jne    c00109d0 <VgaText::putchar(char)+0x42>
c00109c4:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c00109cb:	e9 d2 00 00 00       	jmp    c0010aa2 <VgaText::putchar(char)+0x114>
c00109d0:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c00109d6:	84 c9                	test   cl,cl
c00109d8:	0f 84 ab 00 00 00    	je     c0010a89 <VgaText::putchar(char)+0xfb>
c00109de:	8d 50 c0             	lea    edx,[eax-0x40]
c00109e1:	80 fa 3e             	cmp    dl,0x3e
c00109e4:	0f 87 82 00 00 00    	ja     c0010a6c <VgaText::putchar(char)+0xde>
c00109ea:	3c 6d                	cmp    al,0x6d
c00109ec:	75 4d                	jne    c0010a3b <VgaText::putchar(char)+0xad>
c00109ee:	31 f6                	xor    esi,esi
c00109f0:	31 d2                	xor    edx,edx
c00109f2:	31 c0                	xor    eax,eax
c00109f4:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00109fa:	7e 30                	jle    c0010a2c <VgaText::putchar(char)+0x9e>
c00109fc:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c0010a04:	80 fa 3b             	cmp    dl,0x3b
c0010a07:	75 17                	jne    c0010a20 <VgaText::putchar(char)+0x92>
c0010a09:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010a0d:	50                   	push   eax
c0010a0e:	53                   	push   ebx
c0010a0f:	e8 fc f5 ff ff       	call   c0010010 <VgaText::doANSI_SGR(int)>
c0010a14:	59                   	pop    ecx
c0010a15:	31 d2                	xor    edx,edx
c0010a17:	58                   	pop    eax
c0010a18:	31 c0                	xor    eax,eax
c0010a1a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010a1e:	eb 09                	jmp    c0010a29 <VgaText::putchar(char)+0x9b>
c0010a20:	6b c0 0a             	imul   eax,eax,0xa
c0010a23:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010a27:	88 ca                	mov    dl,cl
c0010a29:	46                   	inc    esi
c0010a2a:	eb c8                	jmp    c00109f4 <VgaText::putchar(char)+0x66>
c0010a2c:	84 d2                	test   dl,dl
c0010a2e:	74 31                	je     c0010a61 <VgaText::putchar(char)+0xd3>
c0010a30:	50                   	push   eax
c0010a31:	53                   	push   ebx
c0010a32:	e8 d9 f5 ff ff       	call   c0010010 <VgaText::doANSI_SGR(int)>
c0010a37:	58                   	pop    eax
c0010a38:	5a                   	pop    edx
c0010a39:	eb 26                	jmp    c0010a61 <VgaText::putchar(char)+0xd3>
c0010a3b:	3c 4a                	cmp    al,0x4a
c0010a3d:	75 22                	jne    c0010a61 <VgaText::putchar(char)+0xd3>
c0010a3f:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c0010a46:	75 19                	jne    c0010a61 <VgaText::putchar(char)+0xd3>
c0010a48:	83 ec 0c             	sub    esp,0xc
c0010a4b:	53                   	push   ebx
c0010a4c:	e8 d9 fe ff ff       	call   c001092a <VgaText::clearScreen()>
c0010a51:	83 c4 0c             	add    esp,0xc
c0010a54:	6a 00                	push   0x0
c0010a56:	6a 00                	push   0x0
c0010a58:	53                   	push   ebx
c0010a59:	e8 ba f7 ff ff       	call   c0010218 <VgaText::setCursor(int, int)>
c0010a5e:	83 c4 10             	add    esp,0x10
c0010a61:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0010a6a:	eb 36                	jmp    c0010aa2 <VgaText::putchar(char)+0x114>
c0010a6c:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c0010a72:	83 fa 0e             	cmp    edx,0xe
c0010a75:	7f 2b                	jg     c0010aa2 <VgaText::putchar(char)+0x114>
c0010a77:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010a7a:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0010a80:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0010a87:	eb 19                	jmp    c0010aa2 <VgaText::putchar(char)+0x114>
c0010a89:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010a8f:	0f be c0             	movsx  eax,al
c0010a92:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010a98:	50                   	push   eax
c0010a99:	53                   	push   ebx
c0010a9a:	e8 ab fa ff ff       	call   c001054a <VgaText::putchar(char, VgaColour, VgaColour)>
c0010a9f:	83 c4 10             	add    esp,0x10
c0010aa2:	83 c4 14             	add    esp,0x14
c0010aa5:	5b                   	pop    ebx
c0010aa6:	5e                   	pop    esi
c0010aa7:	c3                   	ret    

c0010aa8 <VgaText::puts(char const*)>:
c0010aa8:	53                   	push   ebx
c0010aa9:	83 ec 08             	sub    esp,0x8
c0010aac:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010ab0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0010ab3:	84 c0                	test   al,al
c0010ab5:	74 12                	je     c0010ac9 <VgaText::puts(char const*)+0x21>
c0010ab7:	43                   	inc    ebx
c0010ab8:	51                   	push   ecx
c0010ab9:	51                   	push   ecx
c0010aba:	50                   	push   eax
c0010abb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010abf:	e8 ca fe ff ff       	call   c001098e <VgaText::putchar(char)>
c0010ac4:	83 c4 10             	add    esp,0x10
c0010ac7:	eb e7                	jmp    c0010ab0 <VgaText::puts(char const*)+0x8>
c0010ac9:	83 c4 08             	add    esp,0x8
c0010acc:	5b                   	pop    ebx
c0010acd:	c3                   	ret    

c0010ace <VgaText::putx(unsigned int)>:
c0010ace:	57                   	push   edi
c0010acf:	b9 11 00 00 00       	mov    ecx,0x11
c0010ad4:	56                   	push   esi
c0010ad5:	be 9e 93 03 c0       	mov    esi,0xc003939e
c0010ada:	53                   	push   ebx
c0010adb:	83 ec 20             	sub    esp,0x20
c0010ade:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010ae2:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0010ae6:	fc                   	cld    
c0010ae7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010ae9:	be 08 00 00 00       	mov    esi,0x8
c0010aee:	50                   	push   eax
c0010aef:	50                   	push   eax
c0010af0:	89 d8                	mov    eax,ebx
c0010af2:	c1 e3 04             	shl    ebx,0x4
c0010af5:	c1 e8 1c             	shr    eax,0x1c
c0010af8:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0010afd:	50                   	push   eax
c0010afe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0010b02:	e8 87 fe ff ff       	call   c001098e <VgaText::putchar(char)>
c0010b07:	83 c4 10             	add    esp,0x10
c0010b0a:	4e                   	dec    esi
c0010b0b:	75 e1                	jne    c0010aee <VgaText::putx(unsigned int)+0x20>
c0010b0d:	83 c4 20             	add    esp,0x20
c0010b10:	5b                   	pop    ebx
c0010b11:	5e                   	pop    esi
c0010b12:	5f                   	pop    edi
c0010b13:	c3                   	ret    

c0010b14 <VgaText::VgaText(char const*)>:
c0010b14:	57                   	push   edi
c0010b15:	56                   	push   esi
c0010b16:	53                   	push   ebx
c0010b17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b1b:	83 ec 08             	sub    esp,0x8
c0010b1e:	6a 00                	push   0x0
c0010b20:	50                   	push   eax
c0010b21:	e8 b8 05 00 00       	call   c00110de <UnixFile::UnixFile(int)>
c0010b26:	83 c4 10             	add    esp,0x10
c0010b29:	ba 04 94 03 c0       	mov    edx,0xc0039404
c0010b2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b32:	89 10                	mov    DWORD PTR [eax],edx
c0010b34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b38:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c0010b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b46:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c0010b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b54:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0010b5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b5f:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0010b66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b6a:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c0010b74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b78:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c0010b82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b86:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0010b8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b91:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0010b98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b9c:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c0010ba2:	bb 20 be 03 c0       	mov    ebx,0xc003be20
c0010ba7:	b8 08 00 00 00       	mov    eax,0x8
c0010bac:	fc                   	cld    
c0010bad:	89 d7                	mov    edi,edx
c0010baf:	89 de                	mov    esi,ebx
c0010bb1:	89 c1                	mov    ecx,eax
c0010bb3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010bb5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bb9:	05 1e 10 00 00       	add    eax,0x101e
c0010bbe:	83 ec 08             	sub    esp,0x8
c0010bc1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bc5:	50                   	push   eax
c0010bc6:	e8 29 fc fe ff       	call   c00007f4 <strcpy>
c0010bcb:	83 c4 10             	add    esp,0x10
c0010bce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bd2:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0010bdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010be0:	83 c0 0c             	add    eax,0xc
c0010be3:	83 ec 04             	sub    esp,0x4
c0010be6:	68 00 0f 00 00       	push   0xf00
c0010beb:	6a 00                	push   0x0
c0010bed:	50                   	push   eax
c0010bee:	e8 e5 fa fe ff       	call   c00006d8 <memset>
c0010bf3:	83 c4 10             	add    esp,0x10
c0010bf6:	83 ec 04             	sub    esp,0x4
c0010bf9:	6a 00                	push   0x0
c0010bfb:	6a 07                	push   0x7
c0010bfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c01:	e8 c2 f4 ff ff       	call   c00100c8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010c06:	83 c4 10             	add    esp,0x10
c0010c09:	83 ec 08             	sub    esp,0x8
c0010c0c:	6a 02                	push   0x2
c0010c0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c12:	e8 49 fa ff ff       	call   c0010660 <VgaText::setCursorHeight(int)>
c0010c17:	83 c4 10             	add    esp,0x10
c0010c1a:	83 ec 04             	sub    esp,0x4
c0010c1d:	6a 00                	push   0x0
c0010c1f:	6a 00                	push   0x0
c0010c21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c25:	e8 ee f5 ff ff       	call   c0010218 <VgaText::setCursor(int, int)>
c0010c2a:	83 c4 10             	add    esp,0x10
c0010c2d:	83 ec 08             	sub    esp,0x8
c0010c30:	6a 01                	push   0x1
c0010c32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c36:	e8 8b f3 ff ff       	call   c000ffc6 <VgaText::showCursor(bool)>
c0010c3b:	83 c4 10             	add    esp,0x10
c0010c3e:	83 ec 08             	sub    esp,0x8
c0010c41:	6a 01                	push   0x1
c0010c43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c47:	e8 8a f3 ff ff       	call   c000ffd6 <VgaText::disableBlink(bool)>
c0010c4c:	83 c4 10             	add    esp,0x10
c0010c4f:	83 ec 0c             	sub    esp,0xc
c0010c52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010c56:	e8 cf fc ff ff       	call   c001092a <VgaText::clearScreen()>
c0010c5b:	83 c4 10             	add    esp,0x10
c0010c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c62:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0010c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c6d:	05 9e 10 00 00       	add    eax,0x109e
c0010c72:	83 ec 04             	sub    esp,0x4
c0010c75:	68 96 00 00 00       	push   0x96
c0010c7a:	6a 00                	push   0x0
c0010c7c:	50                   	push   eax
c0010c7d:	e8 56 fa fe ff       	call   c00006d8 <memset>
c0010c82:	83 c4 10             	add    esp,0x10
c0010c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c89:	05 34 11 00 00       	add    eax,0x1134
c0010c8e:	83 ec 04             	sub    esp,0x4
c0010c91:	68 2c 01 00 00       	push   0x12c
c0010c96:	6a 00                	push   0x0
c0010c98:	50                   	push   eax
c0010c99:	e8 3a fa fe ff       	call   c00006d8 <memset>
c0010c9e:	83 c4 10             	add    esp,0x10
c0010ca1:	90                   	nop
c0010ca2:	5b                   	pop    ebx
c0010ca3:	5e                   	pop    esi
c0010ca4:	5f                   	pop    edi
c0010ca5:	c3                   	ret    

c0010ca6 <VgaText::receiveKey(unsigned char)>:
c0010ca6:	55                   	push   ebp
c0010ca7:	57                   	push   edi
c0010ca8:	56                   	push   esi
c0010ca9:	53                   	push   ebx
c0010caa:	83 ec 1c             	sub    esp,0x1c
c0010cad:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0010cb1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010cb5:	84 db                	test   bl,bl
c0010cb7:	0f 84 c9 00 00 00    	je     c0010d86 <VgaText::receiveKey(unsigned char)+0xe0>
c0010cbd:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c0010cc3:	80 fb 08             	cmp    bl,0x8
c0010cc6:	75 2c                	jne    c0010cf4 <VgaText::receiveKey(unsigned char)+0x4e>
c0010cc8:	83 ec 0c             	sub    esp,0xc
c0010ccb:	57                   	push   edi
c0010ccc:	e8 30 fa fe ff       	call   c0000701 <strlen>
c0010cd1:	83 c4 10             	add    esp,0x10
c0010cd4:	85 c0                	test   eax,eax
c0010cd6:	74 41                	je     c0010d19 <VgaText::receiveKey(unsigned char)+0x73>
c0010cd8:	50                   	push   eax
c0010cd9:	50                   	push   eax
c0010cda:	6a 08                	push   0x8
c0010cdc:	56                   	push   esi
c0010cdd:	e8 ac fc ff ff       	call   c001098e <VgaText::putchar(char)>
c0010ce2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ce5:	e8 17 fa fe ff       	call   c0000701 <strlen>
c0010cea:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c0010cf2:	eb 22                	jmp    c0010d16 <VgaText::receiveKey(unsigned char)+0x70>
c0010cf4:	0f be c3             	movsx  eax,bl
c0010cf7:	52                   	push   edx
c0010cf8:	52                   	push   edx
c0010cf9:	50                   	push   eax
c0010cfa:	56                   	push   esi
c0010cfb:	e8 8e fc ff ff       	call   c001098e <VgaText::putchar(char)>
c0010d00:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0010d04:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0010d09:	59                   	pop    ecx
c0010d0a:	5d                   	pop    ebp
c0010d0b:	8d 44 24 16          	lea    eax,[esp+0x16]
c0010d0f:	50                   	push   eax
c0010d10:	57                   	push   edi
c0010d11:	e8 2b fc fe ff       	call   c0000941 <strcat>
c0010d16:	83 c4 10             	add    esp,0x10
c0010d19:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c0010d20:	75 05                	jne    c0010d27 <VgaText::receiveKey(unsigned char)+0x81>
c0010d22:	80 fb 0a             	cmp    bl,0xa
c0010d25:	75 53                	jne    c0010d7a <VgaText::receiveKey(unsigned char)+0xd4>
c0010d27:	83 ec 0c             	sub    esp,0xc
c0010d2a:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c0010d30:	53                   	push   ebx
c0010d31:	e8 cb f9 fe ff       	call   c0000701 <strlen>
c0010d36:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010d39:	89 c5                	mov    ebp,eax
c0010d3b:	e8 c1 f9 fe ff       	call   c0000701 <strlen>
c0010d40:	83 c4 10             	add    esp,0x10
c0010d43:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c0010d47:	3d 2c 01 00 00       	cmp    eax,0x12c
c0010d4c:	76 10                	jbe    c0010d5e <VgaText::receiveKey(unsigned char)+0xb8>
c0010d4e:	83 ec 0c             	sub    esp,0xc
c0010d51:	68 af 93 03 c0       	push   0xc00393af
c0010d56:	e8 c5 c2 ff ff       	call   c000d020 <panic(char const*)>
c0010d5b:	83 c4 10             	add    esp,0x10
c0010d5e:	50                   	push   eax
c0010d5f:	50                   	push   eax
c0010d60:	57                   	push   edi
c0010d61:	53                   	push   ebx
c0010d62:	e8 da fb fe ff       	call   c0000941 <strcat>
c0010d67:	83 c4 0c             	add    esp,0xc
c0010d6a:	68 96 00 00 00       	push   0x96
c0010d6f:	6a 00                	push   0x0
c0010d71:	57                   	push   edi
c0010d72:	e8 61 f9 fe ff       	call   c00006d8 <memset>
c0010d77:	83 c4 10             	add    esp,0x10
c0010d7a:	83 ec 0c             	sub    esp,0xc
c0010d7d:	56                   	push   esi
c0010d7e:	e8 d5 f9 ff ff       	call   c0010758 <VgaText::doUpdate()>
c0010d83:	83 c4 10             	add    esp,0x10
c0010d86:	83 c4 1c             	add    esp,0x1c
c0010d89:	5b                   	pop    ebx
c0010d8a:	5e                   	pop    esi
c0010d8b:	5f                   	pop    edi
c0010d8c:	5d                   	pop    ebp
c0010d8d:	c3                   	ret    

c0010d8e <VgaText::write(unsigned long long, void*, int*)>:
c0010d8e:	55                   	push   ebp
c0010d8f:	57                   	push   edi
c0010d90:	56                   	push   esi
c0010d91:	53                   	push   ebx
c0010d92:	83 ec 0c             	sub    esp,0xc
c0010d95:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010d99:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0010d9d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010da1:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0010da8:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0010dab:	39 eb                	cmp    ebx,ebp
c0010dad:	74 13                	je     c0010dc2 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0010daf:	43                   	inc    ebx
c0010db0:	50                   	push   eax
c0010db1:	50                   	push   eax
c0010db2:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0010db6:	50                   	push   eax
c0010db7:	56                   	push   esi
c0010db8:	e8 d1 fb ff ff       	call   c001098e <VgaText::putchar(char)>
c0010dbd:	83 c4 10             	add    esp,0x10
c0010dc0:	eb e9                	jmp    c0010dab <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0010dc2:	83 ec 0c             	sub    esp,0xc
c0010dc5:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0010dcc:	56                   	push   esi
c0010dcd:	e8 86 f9 ff ff       	call   c0010758 <VgaText::doUpdate()>
c0010dd2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010dd6:	89 38                	mov    DWORD PTR [eax],edi
c0010dd8:	83 c4 1c             	add    esp,0x1c
c0010ddb:	31 c0                	xor    eax,eax
c0010ddd:	5b                   	pop    ebx
c0010dde:	5e                   	pop    esi
c0010ddf:	5f                   	pop    edi
c0010de0:	5d                   	pop    ebp
c0010de1:	c3                   	ret    

c0010de2 <newTerminal(char*)>:
c0010de2:	83 ec 28             	sub    esp,0x28
c0010de5:	68 60 12 00 00       	push   0x1260
c0010dea:	e8 c3 16 00 00       	call   c00124b2 <operator new(unsigned long)>
c0010def:	5a                   	pop    edx
c0010df0:	59                   	pop    ecx
c0010df1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010df5:	50                   	push   eax
c0010df6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010dfa:	e8 15 fd ff ff       	call   c0010b14 <VgaText::VgaText(char const*)>
c0010dff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010e03:	83 c4 2c             	add    esp,0x2c
c0010e06:	c3                   	ret    
c0010e07:	90                   	nop

c0010e08 <TSS::TSS()>:
c0010e08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e0c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010e13:	90                   	nop
c0010e14:	c3                   	ret    
c0010e15:	90                   	nop

c0010e16 <TSS::setESP(unsigned long)>:
c0010e16:	55                   	push   ebp
c0010e17:	89 e5                	mov    ebp,esp
c0010e19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e1f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e25:	90                   	nop
c0010e26:	5d                   	pop    ebp
c0010e27:	c3                   	ret    

c0010e28 <TSS::flush()>:
c0010e28:	55                   	push   ebp
c0010e29:	89 e5                	mov    ebp,esp
c0010e2b:	83 ec 10             	sub    esp,0x10
c0010e2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e31:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e33:	83 c8 03             	or     eax,0x3
c0010e36:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0010e3a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0010e3e:	66 89 d0             	mov    ax,dx
c0010e41:	0f 00 d8             	ltr    ax
c0010e44:	90                   	nop
c0010e45:	c9                   	leave  
c0010e46:	c3                   	ret    
c0010e47:	90                   	nop

c0010e48 <TSS::setup(unsigned long, unsigned long)>:
c0010e48:	55                   	push   ebp
c0010e49:	89 e5                	mov    ebp,esp
c0010e4b:	53                   	push   ebx
c0010e4c:	83 ec 14             	sub    esp,0x14
c0010e4f:	83 ec 0c             	sub    esp,0xc
c0010e52:	6a 68                	push   0x68
c0010e54:	e8 a4 c6 ff ff       	call   c000d4fd <malloc>
c0010e59:	83 c4 10             	add    esp,0x10
c0010e5c:	89 c2                	mov    edx,eax
c0010e5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e61:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e6a:	83 ec 04             	sub    esp,0x4
c0010e6d:	6a 68                	push   0x68
c0010e6f:	6a 00                	push   0x0
c0010e71:	50                   	push   eax
c0010e72:	e8 61 f8 fe ff       	call   c00006d8 <memset>
c0010e77:	83 c4 10             	add    esp,0x10
c0010e7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e80:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0010e86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e89:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e8c:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0010e92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010e95:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e98:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010e9b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ea1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ea4:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0010eaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ead:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010eb0:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0010eb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010eb9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ebc:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0010ec2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ec5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ec8:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0010ece:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ed1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ed4:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0010ed7:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010eda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010edd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010ee0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0010ee3:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010ee6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ee9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010eec:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0010ef3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010ef6:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c0010ef9:	e8 1b db 00 00       	call   c001ea19 <CPU::readCR3()>
c0010efe:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0010f01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f07:	83 ec 08             	sub    esp,0x8
c0010f0a:	50                   	push   eax
c0010f0b:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010f0e:	50                   	push   eax
c0010f0f:	e8 a6 b8 ff ff       	call   c000c7ba <GDTEntry::setBase(unsigned int)>
c0010f14:	83 c4 10             	add    esp,0x10
c0010f17:	83 ec 08             	sub    esp,0x8
c0010f1a:	6a 68                	push   0x68
c0010f1c:	8d 45 f0             	lea    eax,[ebp-0x10]
c0010f1f:	50                   	push   eax
c0010f20:	e8 b1 b8 ff ff       	call   c000c7d6 <GDTEntry::setLimit(unsigned int)>
c0010f25:	83 c4 10             	add    esp,0x10
c0010f28:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c0010f2c:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010f2f:	83 e0 0f             	and    eax,0xf
c0010f32:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010f35:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0010f38:	83 c8 40             	or     eax,0x40
c0010f3b:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c0010f3e:	e8 75 62 00 00       	call   c00171b8 <thisCPU()>
c0010f43:	05 78 01 00 00       	add    eax,0x178
c0010f48:	83 ec 04             	sub    esp,0x4
c0010f4b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0010f4e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0010f51:	50                   	push   eax
c0010f52:	e8 b3 b8 ff ff       	call   c000c80a <GDT::addEntry(GDTEntry)>
c0010f57:	83 c4 10             	add    esp,0x10
c0010f5a:	89 c2                	mov    edx,eax
c0010f5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f5f:	89 10                	mov    DWORD PTR [eax],edx
c0010f61:	e8 52 62 00 00       	call   c00171b8 <thisCPU()>
c0010f66:	05 78 01 00 00       	add    eax,0x178
c0010f6b:	83 ec 0c             	sub    esp,0xc
c0010f6e:	50                   	push   eax
c0010f6f:	e8 da b8 ff ff       	call   c000c84e <GDT::flush()>
c0010f74:	83 c4 10             	add    esp,0x10
c0010f77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f7a:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f7c:	83 ec 08             	sub    esp,0x8
c0010f7f:	50                   	push   eax
c0010f80:	68 18 94 03 c0       	push   0xc0039418
c0010f85:	e8 78 bf ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0010f8a:	83 c4 10             	add    esp,0x10
c0010f8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0010f90:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f92:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0010f95:	c9                   	leave  
c0010f96:	c3                   	ret    
c0010f97:	90                   	nop

c0010f98 <ReservedFilename::isAtty()>:
c0010f98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f9c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0010f9f:	31 c0                	xor    eax,eax
c0010fa1:	83 fa 08             	cmp    edx,0x8
c0010fa4:	74 06                	je     c0010fac <ReservedFilename::isAtty()+0x14>
c0010fa6:	83 fa 06             	cmp    edx,0x6
c0010fa9:	0f 94 c0             	sete   al
c0010fac:	c3                   	ret    
c0010fad:	90                   	nop

c0010fae <ReservedFilename::read(unsigned long long, void*, int*)>:
c0010fae:	55                   	push   ebp
c0010faf:	57                   	push   edi
c0010fb0:	56                   	push   esi
c0010fb1:	53                   	push   ebx
c0010fb2:	83 ec 0c             	sub    esp,0xc
c0010fb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fb9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010fbd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fc0:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010fc4:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0010fc8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010fcc:	83 f8 08             	cmp    eax,0x8
c0010fcf:	75 08                	jne    c0010fd9 <ReservedFilename::read(unsigned long long, void*, int*)+0x2b>
c0010fd1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010fd7:	eb 5c                	jmp    c0011035 <ReservedFilename::read(unsigned long long, void*, int*)+0x87>
c0010fd9:	83 f8 06             	cmp    eax,0x6
c0010fdc:	75 3d                	jne    c001101b <ReservedFilename::read(unsigned long long, void*, int*)+0x6d>
c0010fde:	83 ec 0c             	sub    esp,0xc
c0010fe1:	68 36 94 03 c0       	push   0xc0039436
c0010fe6:	e8 17 bf ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0010feb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ff0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0010ff3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0010ff9:	8b 10                	mov    edx,DWORD PTR [eax]
c0010ffb:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0010fff:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c0011003:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c0011007:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c001100b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001100f:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0011012:	83 c4 1c             	add    esp,0x1c
c0011015:	5b                   	pop    ebx
c0011016:	5e                   	pop    esi
c0011017:	5f                   	pop    edi
c0011018:	5d                   	pop    ebp
c0011019:	ff e0                	jmp    eax
c001101b:	89 c2                	mov    edx,eax
c001101d:	83 e2 fd             	and    edx,0xfffffffd
c0011020:	83 fa 05             	cmp    edx,0x5
c0011023:	74 ac                	je     c0010fd1 <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0011025:	8d 50 f5             	lea    edx,[eax-0xb]
c0011028:	83 fa 08             	cmp    edx,0x8
c001102b:	76 a4                	jbe    c0010fd1 <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c001102d:	83 e8 15             	sub    eax,0x15
c0011030:	83 f8 08             	cmp    eax,0x8
c0011033:	76 9c                	jbe    c0010fd1 <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c0011035:	83 c4 0c             	add    esp,0xc
c0011038:	31 c0                	xor    eax,eax
c001103a:	5b                   	pop    ebx
c001103b:	5e                   	pop    esi
c001103c:	5f                   	pop    edi
c001103d:	5d                   	pop    ebp
c001103e:	c3                   	ret    
c001103f:	90                   	nop

c0011040 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011040:	55                   	push   ebp
c0011041:	57                   	push   edi
c0011042:	56                   	push   esi
c0011043:	53                   	push   ebx
c0011044:	83 ec 0c             	sub    esp,0xc
c0011047:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001104b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001104f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011052:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0011056:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001105a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001105e:	83 f8 08             	cmp    eax,0x8
c0011061:	75 08                	jne    c001106b <ReservedFilename::write(unsigned long long, void*, int*)+0x2b>
c0011063:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011069:	eb 60                	jmp    c00110cb <ReservedFilename::write(unsigned long long, void*, int*)+0x8b>
c001106b:	83 f8 06             	cmp    eax,0x6
c001106e:	75 3d                	jne    c00110ad <ReservedFilename::write(unsigned long long, void*, int*)+0x6d>
c0011070:	83 ec 0c             	sub    esp,0xc
c0011073:	68 43 94 03 c0       	push   0xc0039443
c0011078:	e8 85 be ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001107d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011082:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011085:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001108b:	8b 10                	mov    edx,DWORD PTR [eax]
c001108d:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0011091:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c0011095:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c0011099:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c001109d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00110a1:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00110a4:	83 c4 1c             	add    esp,0x1c
c00110a7:	5b                   	pop    ebx
c00110a8:	5e                   	pop    esi
c00110a9:	5f                   	pop    edi
c00110aa:	5d                   	pop    ebp
c00110ab:	ff e0                	jmp    eax
c00110ad:	83 f8 05             	cmp    eax,0x5
c00110b0:	75 04                	jne    c00110b6 <ReservedFilename::write(unsigned long long, void*, int*)+0x76>
c00110b2:	89 33                	mov    DWORD PTR [ebx],esi
c00110b4:	eb 15                	jmp    c00110cb <ReservedFilename::write(unsigned long long, void*, int*)+0x8b>
c00110b6:	83 f8 07             	cmp    eax,0x7
c00110b9:	74 a8                	je     c0011063 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c00110bb:	8d 50 f5             	lea    edx,[eax-0xb]
c00110be:	83 fa 08             	cmp    edx,0x8
c00110c1:	76 a0                	jbe    c0011063 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c00110c3:	83 e8 15             	sub    eax,0x15
c00110c6:	83 f8 08             	cmp    eax,0x8
c00110c9:	76 98                	jbe    c0011063 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c00110cb:	83 c4 0c             	add    esp,0xc
c00110ce:	31 c0                	xor    eax,eax
c00110d0:	5b                   	pop    ebx
c00110d1:	5e                   	pop    esi
c00110d2:	5f                   	pop    edi
c00110d3:	5d                   	pop    ebp
c00110d4:	c3                   	ret    
c00110d5:	90                   	nop

c00110d6 <UnixFile::getFileDescriptor()>:
c00110d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00110dd:	c3                   	ret    

c00110de <UnixFile::UnixFile(int)>:
c00110de:	83 ec 0c             	sub    esp,0xc
c00110e1:	ba a8 94 03 c0       	mov    edx,0xc00394a8
c00110e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110ea:	89 10                	mov    DWORD PTR [eax],edx
c00110ec:	a1 40 ae 03 c0       	mov    eax,ds:0xc003ae40
c00110f1:	8d 50 01             	lea    edx,[eax+0x1]
c00110f4:	89 15 40 ae 03 c0    	mov    DWORD PTR ds:0xc003ae40,edx
c00110fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00110fe:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011101:	83 ec 08             	sub    esp,0x8
c0011104:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011108:	68 50 be 03 c0       	push   0xc003be50
c001110d:	e8 86 dc 00 00       	call   c001ed98 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011112:	83 c4 10             	add    esp,0x10
c0011115:	90                   	nop
c0011116:	83 c4 0c             	add    esp,0xc
c0011119:	c3                   	ret    

c001111a <ReservedFilename::ReservedFilename(int)>:
c001111a:	83 ec 0c             	sub    esp,0xc
c001111d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011121:	83 ec 08             	sub    esp,0x8
c0011124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011128:	50                   	push   eax
c0011129:	e8 b0 ff ff ff       	call   c00110de <UnixFile::UnixFile(int)>
c001112e:	83 c4 10             	add    esp,0x10
c0011131:	ba c4 94 03 c0       	mov    edx,0xc00394c4
c0011136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001113a:	89 10                	mov    DWORD PTR [eax],edx
c001113c:	90                   	nop
c001113d:	83 c4 0c             	add    esp,0xc
c0011140:	c3                   	ret    
c0011141:	90                   	nop

c0011142 <UnixFile::~UnixFile()>:
c0011142:	83 ec 1c             	sub    esp,0x1c
c0011145:	ba a8 94 03 c0       	mov    edx,0xc00394a8
c001114a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001114e:	89 10                	mov    DWORD PTR [eax],edx
c0011150:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011158:	83 ec 0c             	sub    esp,0xc
c001115b:	68 50 be 03 c0       	push   0xc003be50
c0011160:	e8 81 db 00 00       	call   c001ece6 <LinkedList<UnixFile>::getFirstElement()>
c0011165:	83 c4 10             	add    esp,0x10
c0011168:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001116c:	83 ec 0c             	sub    esp,0xc
c001116f:	68 50 be 03 c0       	push   0xc003be50
c0011174:	e8 75 db 00 00       	call   c001ecee <LinkedList<UnixFile>::removeFirst()>
c0011179:	83 c4 10             	add    esp,0x10
c001117c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011180:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011184:	74 3d                	je     c00111c3 <UnixFile::~UnixFile()+0x81>
c0011186:	83 ec 08             	sub    esp,0x8
c0011189:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001118d:	68 50 be 03 c0       	push   0xc003be50
c0011192:	e8 01 dc 00 00       	call   c001ed98 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011197:	83 c4 10             	add    esp,0x10
c001119a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001119e:	8d 50 01             	lea    edx,[eax+0x1]
c00111a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00111a5:	3d 88 13 00 00       	cmp    eax,0x1388
c00111aa:	0f 94 c0             	sete   al
c00111ad:	84 c0                	test   al,al
c00111af:	74 a7                	je     c0011158 <UnixFile::~UnixFile()+0x16>
c00111b1:	83 ec 0c             	sub    esp,0xc
c00111b4:	68 80 94 03 c0       	push   0xc0039480
c00111b9:	e8 62 be ff ff       	call   c000d020 <panic(char const*)>
c00111be:	83 c4 10             	add    esp,0x10
c00111c1:	eb 95                	jmp    c0011158 <UnixFile::~UnixFile()+0x16>
c00111c3:	90                   	nop
c00111c4:	83 c4 1c             	add    esp,0x1c
c00111c7:	c3                   	ret    

c00111c8 <UnixFile::~UnixFile()>:
c00111c8:	83 ec 0c             	sub    esp,0xc
c00111cb:	83 ec 0c             	sub    esp,0xc
c00111ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111d2:	e8 6b ff ff ff       	call   c0011142 <UnixFile::~UnixFile()>
c00111d7:	83 c4 10             	add    esp,0x10
c00111da:	83 ec 08             	sub    esp,0x8
c00111dd:	6a 0c                	push   0xc
c00111df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111e3:	e8 d9 12 00 00       	call   c00124c1 <operator delete(void*, unsigned long)>
c00111e8:	83 c4 10             	add    esp,0x10
c00111eb:	83 c4 0c             	add    esp,0xc
c00111ee:	c3                   	ret    
c00111ef:	90                   	nop

c00111f0 <ReservedFilename::~ReservedFilename()>:
c00111f0:	83 ec 0c             	sub    esp,0xc
c00111f3:	ba c4 94 03 c0       	mov    edx,0xc00394c4
c00111f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111fc:	89 10                	mov    DWORD PTR [eax],edx
c00111fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011202:	83 ec 0c             	sub    esp,0xc
c0011205:	50                   	push   eax
c0011206:	e8 37 ff ff ff       	call   c0011142 <UnixFile::~UnixFile()>
c001120b:	83 c4 10             	add    esp,0x10
c001120e:	90                   	nop
c001120f:	83 c4 0c             	add    esp,0xc
c0011212:	c3                   	ret    
c0011213:	90                   	nop

c0011214 <ReservedFilename::~ReservedFilename()>:
c0011214:	83 ec 0c             	sub    esp,0xc
c0011217:	83 ec 0c             	sub    esp,0xc
c001121a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001121e:	e8 cd ff ff ff       	call   c00111f0 <ReservedFilename::~ReservedFilename()>
c0011223:	83 c4 10             	add    esp,0x10
c0011226:	83 ec 08             	sub    esp,0x8
c0011229:	6a 0c                	push   0xc
c001122b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001122f:	e8 8d 12 00 00       	call   c00124c1 <operator delete(void*, unsigned long)>
c0011234:	83 c4 10             	add    esp,0x10
c0011237:	83 c4 0c             	add    esp,0xc
c001123a:	c3                   	ret    

c001123b <getFromFileDescriptor(int)>:
c001123b:	83 ec 18             	sub    esp,0x18
c001123e:	68 50 be 03 c0       	push   0xc003be50
c0011243:	e8 9e da 00 00       	call   c001ece6 <LinkedList<UnixFile>::getFirstElement()>
c0011248:	83 c4 10             	add    esp,0x10
c001124b:	85 c0                	test   eax,eax
c001124d:	74 18                	je     c0011267 <getFromFileDescriptor(int)+0x2c>
c001124f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011253:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
c0011256:	74 0f                	je     c0011267 <getFromFileDescriptor(int)+0x2c>
c0011258:	52                   	push   edx
c0011259:	52                   	push   edx
c001125a:	50                   	push   eax
c001125b:	68 50 be 03 c0       	push   0xc003be50
c0011260:	e8 2b db 00 00       	call   c001ed90 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011265:	eb e1                	jmp    c0011248 <getFromFileDescriptor(int)+0xd>
c0011267:	83 c4 0c             	add    esp,0xc
c001126a:	c3                   	ret    

c001126b <__static_initialization_and_destruction_0(int, int)>:
c001126b:	83 ec 0c             	sub    esp,0xc
c001126e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011273:	75 34                	jne    c00112a9 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011275:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001127d:	75 2a                	jne    c00112a9 <__static_initialization_and_destruction_0(int, int)+0x3e>
c001127f:	83 ec 0c             	sub    esp,0xc
c0011282:	68 50 be 03 c0       	push   0xc003be50
c0011287:	e8 02 da 00 00       	call   c001ec8e <LinkedList<UnixFile>::LinkedList()>
c001128c:	83 c4 10             	add    esp,0x10
c001128f:	83 ec 04             	sub    esp,0x4
c0011292:	68 c8 ad 03 c0       	push   0xc003adc8
c0011297:	68 50 be 03 c0       	push   0xc003be50
c001129c:	68 8c ec 01 c0       	push   0xc001ec8c
c00112a1:	e8 97 11 00 00       	call   c001243d <__cxa_atexit>
c00112a6:	83 c4 10             	add    esp,0x10
c00112a9:	90                   	nop
c00112aa:	83 c4 0c             	add    esp,0xc
c00112ad:	c3                   	ret    

c00112ae <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00112ae:	83 ec 0c             	sub    esp,0xc
c00112b1:	83 ec 08             	sub    esp,0x8
c00112b4:	68 ff ff 00 00       	push   0xffff
c00112b9:	6a 01                	push   0x1
c00112bb:	e8 ab ff ff ff       	call   c001126b <__static_initialization_and_destruction_0(int, int)>
c00112c0:	83 c4 10             	add    esp,0x10
c00112c3:	83 c4 0c             	add    esp,0xc
c00112c6:	c3                   	ret    
c00112c7:	90                   	nop

c00112c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00112c8:	53                   	push   ebx
c00112c9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00112cd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00112d1:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00112d7:	89 c8                	mov    eax,ecx
c00112d9:	d1 e8                	shr    eax,1
c00112db:	03 05 48 ae 03 c0    	add    eax,DWORD PTR ds:0xc003ae48
c00112e1:	83 e1 01             	and    ecx,0x1
c00112e4:	8a 10                	mov    dl,BYTE PTR [eax]
c00112e6:	75 09                	jne    c00112f1 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c00112e8:	83 e2 f0             	and    edx,0xfffffff0
c00112eb:	09 da                	or     edx,ebx
c00112ed:	88 10                	mov    BYTE PTR [eax],dl
c00112ef:	5b                   	pop    ebx
c00112f0:	c3                   	ret    
c00112f1:	c1 e3 04             	shl    ebx,0x4
c00112f4:	83 e2 0f             	and    edx,0xf
c00112f7:	09 da                	or     edx,ebx
c00112f9:	88 10                	mov    BYTE PTR [eax],dl
c00112fb:	5b                   	pop    ebx
c00112fc:	c3                   	ret    

c00112fd <Virt::getPageState(unsigned long)>:
c00112fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011301:	8b 0d 48 ae 03 c0    	mov    ecx,DWORD PTR ds:0xc003ae48
c0011307:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c001130d:	89 d0                	mov    eax,edx
c001130f:	d1 e8                	shr    eax,1
c0011311:	83 e2 01             	and    edx,0x1
c0011314:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011317:	75 04                	jne    c001131d <Virt::getPageState(unsigned long)+0x20>
c0011319:	83 e0 0f             	and    eax,0xf
c001131c:	c3                   	ret    
c001131d:	c0 e8 04             	shr    al,0x4
c0011320:	c3                   	ret    

c0011321 <Virt::allocateKernelVirtualPages(int)>:
c0011321:	55                   	push   ebp
c0011322:	31 ed                	xor    ebp,ebp
c0011324:	57                   	push   edi
c0011325:	56                   	push   esi
c0011326:	53                   	push   ebx
c0011327:	31 db                	xor    ebx,ebx
c0011329:	83 ec 1c             	sub    esp,0x1c
c001132c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011330:	8b 3d 44 ae 03 c0    	mov    edi,DWORD PTR ds:0xc003ae44
c0011336:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001133b:	57                   	push   edi
c001133c:	e8 bc ff ff ff       	call   c00112fd <Virt::getPageState(unsigned long)>
c0011341:	5a                   	pop    edx
c0011342:	84 c0                	test   al,al
c0011344:	75 3a                	jne    c0011380 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011346:	85 db                	test   ebx,ebx
c0011348:	75 02                	jne    c001134c <Virt::allocateKernelVirtualPages(int)+0x2b>
c001134a:	89 fd                	mov    ebp,edi
c001134c:	43                   	inc    ebx
c001134d:	39 f3                	cmp    ebx,esi
c001134f:	74 5a                	je     c00113ab <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011351:	47                   	inc    edi
c0011352:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011358:	76 31                	jbe    c001138b <Virt::allocateKernelVirtualPages(int)+0x6a>
c001135a:	c7 05 44 ae 03 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc003ae44,0xc8000
c0011364:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011369:	75 28                	jne    c0011393 <Virt::allocateKernelVirtualPages(int)+0x72>
c001136b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011370:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011375:	57                   	push   edi
c0011376:	e8 82 ff ff ff       	call   c00112fd <Virt::getPageState(unsigned long)>
c001137b:	5a                   	pop    edx
c001137c:	84 c0                	test   al,al
c001137e:	74 c6                	je     c0011346 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011380:	31 db                	xor    ebx,ebx
c0011382:	47                   	inc    edi
c0011383:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011389:	77 cf                	ja     c001135a <Virt::allocateKernelVirtualPages(int)+0x39>
c001138b:	89 3d 44 ae 03 c0    	mov    DWORD PTR ds:0xc003ae44,edi
c0011391:	eb a8                	jmp    c001133b <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011393:	83 ec 0c             	sub    esp,0xc
c0011396:	68 d8 94 03 c0       	push   0xc00394d8
c001139b:	e8 80 bc ff ff       	call   c000d020 <panic(char const*)>
c00113a0:	8b 3d 44 ae 03 c0    	mov    edi,DWORD PTR ds:0xc003ae44
c00113a6:	83 c4 10             	add    esp,0x10
c00113a9:	eb 90                	jmp    c001133b <Virt::allocateKernelVirtualPages(int)+0x1a>
c00113ab:	89 2d 44 ae 03 c0    	mov    DWORD PTR ds:0xc003ae44,ebp
c00113b1:	4b                   	dec    ebx
c00113b2:	74 5f                	je     c0011413 <Virt::allocateKernelVirtualPages(int)+0xf2>
c00113b4:	85 f6                	test   esi,esi
c00113b6:	74 3d                	je     c00113f5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00113b8:	89 e8                	mov    eax,ebp
c00113ba:	31 db                	xor    ebx,ebx
c00113bc:	8d 7e ff             	lea    edi,[esi-0x1]
c00113bf:	eb 14                	jmp    c00113d5 <Virt::allocateKernelVirtualPages(int)+0xb4>
c00113c1:	6a 01                	push   0x1
c00113c3:	43                   	inc    ebx
c00113c4:	50                   	push   eax
c00113c5:	e8 fe fe ff ff       	call   c00112c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113ca:	58                   	pop    eax
c00113cb:	39 f3                	cmp    ebx,esi
c00113cd:	5a                   	pop    edx
c00113ce:	74 25                	je     c00113f5 <Virt::allocateKernelVirtualPages(int)+0xd4>
c00113d0:	a1 44 ae 03 c0       	mov    eax,ds:0xc003ae44
c00113d5:	8d 50 01             	lea    edx,[eax+0x1]
c00113d8:	85 db                	test   ebx,ebx
c00113da:	89 15 44 ae 03 c0    	mov    DWORD PTR ds:0xc003ae44,edx
c00113e0:	74 20                	je     c0011402 <Virt::allocateKernelVirtualPages(int)+0xe1>
c00113e2:	39 df                	cmp    edi,ebx
c00113e4:	75 db                	jne    c00113c1 <Virt::allocateKernelVirtualPages(int)+0xa0>
c00113e6:	6a 03                	push   0x3
c00113e8:	43                   	inc    ebx
c00113e9:	50                   	push   eax
c00113ea:	e8 d9 fe ff ff       	call   c00112c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00113ef:	59                   	pop    ecx
c00113f0:	39 f3                	cmp    ebx,esi
c00113f2:	58                   	pop    eax
c00113f3:	75 db                	jne    c00113d0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00113f5:	83 c4 1c             	add    esp,0x1c
c00113f8:	89 e8                	mov    eax,ebp
c00113fa:	5b                   	pop    ebx
c00113fb:	c1 e0 0c             	shl    eax,0xc
c00113fe:	5e                   	pop    esi
c00113ff:	5f                   	pop    edi
c0011400:	5d                   	pop    ebp
c0011401:	c3                   	ret    
c0011402:	6a 02                	push   0x2
c0011404:	bb 01 00 00 00       	mov    ebx,0x1
c0011409:	50                   	push   eax
c001140a:	e8 b9 fe ff ff       	call   c00112c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001140f:	58                   	pop    eax
c0011410:	5a                   	pop    edx
c0011411:	eb bd                	jmp    c00113d0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011413:	6a 04                	push   0x4
c0011415:	8d 45 01             	lea    eax,[ebp+0x1]
c0011418:	55                   	push   ebp
c0011419:	a3 44 ae 03 c0       	mov    ds:0xc003ae44,eax
c001141e:	e8 a5 fe ff ff       	call   c00112c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011423:	59                   	pop    ecx
c0011424:	89 e8                	mov    eax,ebp
c0011426:	5b                   	pop    ebx
c0011427:	c1 e0 0c             	shl    eax,0xc
c001142a:	83 c4 1c             	add    esp,0x1c
c001142d:	5b                   	pop    ebx
c001142e:	5e                   	pop    esi
c001142f:	5f                   	pop    edi
c0011430:	5d                   	pop    ebp
c0011431:	c3                   	ret    

c0011432 <Virt::virtualMemorySetup()>:
c0011432:	53                   	push   ebx
c0011433:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011438:	83 ec 08             	sub    esp,0x8
c001143b:	6a 0f                	push   0xf
c001143d:	53                   	push   ebx
c001143e:	43                   	inc    ebx
c001143f:	e8 84 fe ff ff       	call   c00112c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011444:	59                   	pop    ecx
c0011445:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001144b:	58                   	pop    eax
c001144c:	75 ed                	jne    c001143b <Virt::virtualMemorySetup()+0x9>
c001144e:	83 ec 08             	sub    esp,0x8
c0011451:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011456:	68 00 00 00 c8       	push   0xc8000000
c001145b:	68 83 96 03 c0       	push   0xc0039683
c0011460:	e8 9d ba ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0011465:	58                   	pop    eax
c0011466:	5a                   	pop    edx
c0011467:	68 00 f0 ff ef       	push   0xeffff000
c001146c:	68 97 96 03 c0       	push   0xc0039697
c0011471:	e8 8c ba ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0011476:	83 c4 10             	add    esp,0x10
c0011479:	83 ec 08             	sub    esp,0x8
c001147c:	6a 00                	push   0x0
c001147e:	53                   	push   ebx
c001147f:	43                   	inc    ebx
c0011480:	e8 43 fe ff ff       	call   c00112c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011485:	83 c4 10             	add    esp,0x10
c0011488:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001148e:	75 e9                	jne    c0011479 <Virt::virtualMemorySetup()+0x47>
c0011490:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011495:	83 ec 08             	sub    esp,0x8
c0011498:	6a 0f                	push   0xf
c001149a:	53                   	push   ebx
c001149b:	43                   	inc    ebx
c001149c:	e8 27 fe ff ff       	call   c00112c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00114a1:	83 c4 10             	add    esp,0x10
c00114a4:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00114aa:	75 e9                	jne    c0011495 <Virt::virtualMemorySetup()+0x63>
c00114ac:	83 c4 08             	add    esp,0x8
c00114af:	5b                   	pop    ebx
c00114b0:	c3                   	ret    

c00114b1 <Virt::getAKernelVAS()>:
c00114b1:	a1 5c be 03 c0       	mov    eax,ds:0xc003be5c
c00114b6:	c3                   	ret    

c00114b7 <Virt::setupPageSwapping(int)>:
c00114b7:	57                   	push   edi
c00114b8:	56                   	push   esi
c00114b9:	53                   	push   ebx
c00114ba:	83 ec 1c             	sub    esp,0x1c
c00114bd:	68 14 01 00 00       	push   0x114
c00114c2:	e8 eb 0f 00 00       	call   c00124b2 <operator new(unsigned long)>
c00114c7:	83 c4 0c             	add    esp,0xc
c00114ca:	89 c6                	mov    esi,eax
c00114cc:	ff 35 fc bb 03 c0    	push   DWORD PTR ds:0xc003bbfc
c00114d2:	68 ab 96 03 c0       	push   0xc00396ab
c00114d7:	50                   	push   eax
c00114d8:	e8 03 14 00 00       	call   c00128e0 <File::File(char const*, Process*)>
c00114dd:	89 34 24             	mov    DWORD PTR [esp],esi
c00114e0:	e8 d7 15 00 00       	call   c0012abc <File::unlink()>
c00114e5:	58                   	pop    eax
c00114e6:	5a                   	pop    edx
c00114e7:	6a 12                	push   0x12
c00114e9:	56                   	push   esi
c00114ea:	e8 55 14 00 00       	call   c0012944 <File::open(FileOpenMode)>
c00114ef:	83 c4 10             	add    esp,0x10
c00114f2:	85 c0                	test   eax,eax
c00114f4:	0f 85 bf 00 00 00    	jne    c00115b9 <Virt::setupPageSwapping(int)+0x102>
c00114fa:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00114fe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011506:	c1 e3 08             	shl    ebx,0x8
c0011509:	83 ec 0c             	sub    esp,0xc
c001150c:	68 00 00 01 00       	push   0x10000
c0011511:	e8 e7 bf ff ff       	call   c000d4fd <malloc>
c0011516:	83 c4 0c             	add    esp,0xc
c0011519:	89 c7                	mov    edi,eax
c001151b:	68 00 00 01 00       	push   0x10000
c0011520:	6a 00                	push   0x0
c0011522:	50                   	push   eax
c0011523:	e8 b0 f1 fe ff       	call   c00006d8 <memset>
c0011528:	83 c4 10             	add    esp,0x10
c001152b:	85 db                	test   ebx,ebx
c001152d:	79 03                	jns    c0011532 <Virt::setupPageSwapping(int)+0x7b>
c001152f:	83 c3 0f             	add    ebx,0xf
c0011532:	c1 fb 04             	sar    ebx,0x4
c0011535:	4b                   	dec    ebx
c0011536:	83 fb ff             	cmp    ebx,0xffffffff
c0011539:	74 4b                	je     c0011586 <Virt::setupPageSwapping(int)+0xcf>
c001153b:	83 ec 0c             	sub    esp,0xc
c001153e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011540:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011544:	52                   	push   edx
c0011545:	57                   	push   edi
c0011546:	6a 00                	push   0x0
c0011548:	68 00 00 01 00       	push   0x10000
c001154d:	56                   	push   esi
c001154e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011551:	83 c4 20             	add    esp,0x20
c0011554:	85 c0                	test   eax,eax
c0011556:	75 4e                	jne    c00115a6 <Virt::setupPageSwapping(int)+0xef>
c0011558:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001155c:	3d 00 00 01 00       	cmp    eax,0x10000
c0011561:	74 d2                	je     c0011535 <Virt::setupPageSwapping(int)+0x7e>
c0011563:	83 ec 08             	sub    esp,0x8
c0011566:	4b                   	dec    ebx
c0011567:	50                   	push   eax
c0011568:	68 fe 96 03 c0       	push   0xc00396fe
c001156d:	e8 90 b9 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0011572:	c7 04 24 07 97 03 c0 	mov    DWORD PTR [esp],0xc0039707
c0011579:	e8 a2 ba ff ff       	call   c000d020 <panic(char const*)>
c001157e:	83 c4 10             	add    esp,0x10
c0011581:	83 fb ff             	cmp    ebx,0xffffffff
c0011584:	75 b5                	jne    c001153b <Virt::setupPageSwapping(int)+0x84>
c0011586:	83 ec 0c             	sub    esp,0xc
c0011589:	56                   	push   esi
c001158a:	e8 13 14 00 00       	call   c00129a2 <File::close()>
c001158f:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011592:	e8 86 bf ff ff       	call   c000d51d <rfree>
c0011597:	89 34 24             	mov    DWORD PTR [esp],esi
c001159a:	8b 06                	mov    eax,DWORD PTR [esi]
c001159c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001159f:	83 c4 20             	add    esp,0x20
c00115a2:	5b                   	pop    ebx
c00115a3:	5e                   	pop    esi
c00115a4:	5f                   	pop    edi
c00115a5:	c3                   	ret    
c00115a6:	83 ec 08             	sub    esp,0x8
c00115a9:	50                   	push   eax
c00115aa:	68 e6 96 03 c0       	push   0xc00396e6
c00115af:	e8 4e b9 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c00115b4:	83 c4 10             	add    esp,0x10
c00115b7:	eb 9f                	jmp    c0011558 <Virt::setupPageSwapping(int)+0xa1>
c00115b9:	83 ec 08             	sub    esp,0x8
c00115bc:	50                   	push   eax
c00115bd:	68 c2 96 03 c0       	push   0xc00396c2
c00115c2:	e8 3b b9 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c00115c7:	c7 04 24 cb 96 03 c0 	mov    DWORD PTR [esp],0xc00396cb
c00115ce:	e8 4d ba ff ff       	call   c000d020 <panic(char const*)>
c00115d3:	83 c4 10             	add    esp,0x10
c00115d6:	e9 1f ff ff ff       	jmp    c00114fa <Virt::setupPageSwapping(int)+0x43>
c00115db:	90                   	nop

c00115dc <VAS::VAS()>:
c00115dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115e0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00115e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115eb:	a3 5c be 03 c0       	mov    ds:0xc003be5c,eax
c00115f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115f4:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c00115f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115fc:	c6 00 01             	mov    BYTE PTR [eax],0x1
c00115ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011603:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c001160a:	90                   	nop
c001160b:	c3                   	ret    

c001160c <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c001160c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011610:	89 c2                	mov    edx,eax
c0011612:	c1 e8 0a             	shr    eax,0xa
c0011615:	c1 ea 16             	shr    edx,0x16
c0011618:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001161d:	19 c9                	sbb    ecx,ecx
c001161f:	c1 e2 0c             	shl    edx,0xc
c0011622:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011628:	25 fc 0f 00 00       	and    eax,0xffc
c001162d:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011634:	01 d0                	add    eax,edx
c0011636:	c3                   	ret    
c0011637:	90                   	nop

c0011638 <VAS::getPageTableEntry(unsigned long)>:
c0011638:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001163c:	89 ca                	mov    edx,ecx
c001163e:	c1 e9 0a             	shr    ecx,0xa
c0011641:	c1 ea 16             	shr    edx,0x16
c0011644:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c001164a:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011650:	c1 e0 0c             	shl    eax,0xc
c0011653:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011656:	c3                   	ret    

c0011657 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011657:	57                   	push   edi
c0011658:	56                   	push   esi
c0011659:	be 01 00 00 00       	mov    esi,0x1
c001165e:	53                   	push   ebx
c001165f:	83 ec 10             	sub    esp,0x10
c0011662:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011666:	c1 eb 0c             	shr    ebx,0xc
c0011669:	eb 3f                	jmp    c00116aa <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c001166b:	e8 41 fe ff ff       	call   c00114b1 <Virt::getAKernelVAS()>
c0011670:	83 ec 08             	sub    esp,0x8
c0011673:	57                   	push   edi
c0011674:	50                   	push   eax
c0011675:	e8 be ff ff ff       	call   c0011638 <VAS::getPageTableEntry(unsigned long)>
c001167a:	83 c4 10             	add    esp,0x10
c001167d:	8b 00                	mov    eax,DWORD PTR [eax]
c001167f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011683:	f6 c4 04             	test   ah,0x4
c0011686:	75 5f                	jne    c00116e7 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011688:	80 fa 04             	cmp    dl,0x4
c001168b:	74 78                	je     c0011705 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001168d:	80 fa 02             	cmp    dl,0x2
c0011690:	0f 84 88 00 00 00    	je     c001171e <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011696:	80 fa 03             	cmp    dl,0x3
c0011699:	0f 84 ad 00 00 00    	je     c001174c <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001169f:	fe ca                	dec    dl
c00116a1:	0f 84 92 00 00 00    	je     c0011739 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00116a7:	43                   	inc    ebx
c00116a8:	31 f6                	xor    esi,esi
c00116aa:	53                   	push   ebx
c00116ab:	e8 4d fc ff ff       	call   c00112fd <Virt::getPageState(unsigned long)>
c00116b0:	5f                   	pop    edi
c00116b1:	89 df                	mov    edi,ebx
c00116b3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00116b7:	c1 e7 0c             	shl    edi,0xc
c00116ba:	84 c0                	test   al,al
c00116bc:	75 ad                	jne    c001166b <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c00116be:	83 ec 0c             	sub    esp,0xc
c00116c1:	68 0d 97 03 c0       	push   0xc003970d
c00116c6:	e8 55 b9 ff ff       	call   c000d020 <panic(char const*)>
c00116cb:	e8 e1 fd ff ff       	call   c00114b1 <Virt::getAKernelVAS()>
c00116d0:	5a                   	pop    edx
c00116d1:	59                   	pop    ecx
c00116d2:	57                   	push   edi
c00116d3:	50                   	push   eax
c00116d4:	e8 5f ff ff ff       	call   c0011638 <VAS::getPageTableEntry(unsigned long)>
c00116d9:	83 c4 10             	add    esp,0x10
c00116dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00116de:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00116e2:	f6 c4 04             	test   ah,0x4
c00116e5:	74 c0                	je     c00116a7 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00116e7:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c00116eb:	25 00 f0 ff ff       	and    eax,0xfffff000
c00116f0:	83 ec 0c             	sub    esp,0xc
c00116f3:	50                   	push   eax
c00116f4:	e8 24 c3 ff ff       	call   c000da1d <Phys::freePage(unsigned long)>
c00116f9:	83 c4 10             	add    esp,0x10
c00116fc:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011700:	80 fa 04             	cmp    dl,0x4
c0011703:	75 88                	jne    c001168d <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011705:	89 f0                	mov    eax,esi
c0011707:	84 c0                	test   al,al
c0011709:	75 47                	jne    c0011752 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c001170b:	c7 44 24 20 f8 94 03 c0 	mov    DWORD PTR [esp+0x20],0xc00394f8
c0011713:	83 c4 10             	add    esp,0x10
c0011716:	5b                   	pop    ebx
c0011717:	5e                   	pop    esi
c0011718:	5f                   	pop    edi
c0011719:	e9 02 b9 ff ff       	jmp    c000d020 <panic(char const*)>
c001171e:	89 f0                	mov    eax,esi
c0011720:	84 c0                	test   al,al
c0011722:	75 15                	jne    c0011739 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011724:	83 ec 0c             	sub    esp,0xc
c0011727:	68 29 97 03 c0       	push   0xc0039729
c001172c:	e8 ef b8 ff ff       	call   c000d020 <panic(char const*)>
c0011731:	83 c4 10             	add    esp,0x10
c0011734:	e9 6e ff ff ff       	jmp    c00116a7 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011739:	83 ec 08             	sub    esp,0x8
c001173c:	6a 00                	push   0x0
c001173e:	53                   	push   ebx
c001173f:	e8 84 fb ff ff       	call   c00112c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011744:	83 c4 10             	add    esp,0x10
c0011747:	e9 5b ff ff ff       	jmp    c00116a7 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c001174c:	89 f0                	mov    eax,esi
c001174e:	84 c0                	test   al,al
c0011750:	75 15                	jne    c0011767 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011752:	83 ec 08             	sub    esp,0x8
c0011755:	6a 00                	push   0x0
c0011757:	53                   	push   ebx
c0011758:	e8 6b fb ff ff       	call   c00112c8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001175d:	83 c4 10             	add    esp,0x10
c0011760:	83 c4 10             	add    esp,0x10
c0011763:	5b                   	pop    ebx
c0011764:	5e                   	pop    esi
c0011765:	5f                   	pop    edi
c0011766:	c3                   	ret    
c0011767:	c7 44 24 20 45 97 03 c0 	mov    DWORD PTR [esp+0x20],0xc0039745
c001176f:	83 c4 10             	add    esp,0x10
c0011772:	5b                   	pop    ebx
c0011773:	5e                   	pop    esi
c0011774:	5f                   	pop    edi
c0011775:	e9 a6 b8 ff ff       	jmp    c000d020 <panic(char const*)>

c001177a <VAS::freeAllocatedPages(unsigned long)>:
c001177a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001177e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011782:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0011786:	74 09                	je     c0011791 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0011788:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001178c:	e9 c6 fe ff ff       	jmp    c0011657 <Virt::freeKernelVirtualPages(unsigned long)>
c0011791:	c7 44 24 04 1c 95 03 c0 	mov    DWORD PTR [esp+0x4],0xc003951c
c0011799:	e9 64 b7 ff ff       	jmp    c000cf02 <kprintf(char const*, ...)>

c001179e <VAS::virtualToPhysical(unsigned long)>:
c001179e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00117a2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00117a6:	e8 8d fe ff ff       	call   c0011638 <VAS::getPageTableEntry(unsigned long)>
c00117ab:	5a                   	pop    edx
c00117ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00117ae:	59                   	pop    ecx
c00117af:	25 00 f0 ff ff       	and    eax,0xfffff000
c00117b4:	c3                   	ret    
c00117b5:	90                   	nop

c00117b6 <VAS::mapOtherVASIn(bool, VAS*)>:
c00117b6:	83 ec 0c             	sub    esp,0xc
c00117b9:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00117be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00117c2:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00117c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117c9:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00117cc:	19 c0                	sbb    eax,eax
c00117ce:	83 ca 03             	or     edx,0x3
c00117d1:	83 e0 fc             	and    eax,0xfffffffc
c00117d4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00117db:	e8 39 d2 00 00       	call   c001ea19 <CPU::readCR3()>
c00117e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00117e4:	83 c4 0c             	add    esp,0xc
c00117e7:	e9 51 d2 00 00       	jmp    c001ea3d <CPU::writeCR3(unsigned long)>

c00117ec <VAS::~VAS()>:
c00117ec:	83 ec 2c             	sub    esp,0x2c
c00117ef:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00117f7:	e8 a8 cb ff ff       	call   c000e3a4 <lockScheduler()>
c00117fc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011801:	8b 00                	mov    eax,DWORD PTR [eax]
c0011803:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011806:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001180c:	83 ec 04             	sub    esp,0x4
c001180f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011813:	6a 01                	push   0x1
c0011815:	50                   	push   eax
c0011816:	e8 9b ff ff ff       	call   c00117b6 <VAS::mapOtherVASIn(bool, VAS*)>
c001181b:	83 c4 10             	add    esp,0x10
c001181e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011826:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001182e:	0f 8f d7 00 00 00    	jg     c001190b <VAS::~VAS()+0x11f>
c0011834:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011838:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001183b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001183f:	c1 e2 02             	shl    edx,0x2
c0011842:	01 d0                	add    eax,edx
c0011844:	8b 00                	mov    eax,DWORD PTR [eax]
c0011846:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001184a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001184e:	83 e0 01             	and    eax,0x1
c0011851:	0f 84 ab 00 00 00    	je     c0011902 <VAS::~VAS()+0x116>
c0011857:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001185f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0011867:	7f 75                	jg     c00118de <VAS::~VAS()+0xf2>
c0011869:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001186d:	c1 e0 0a             	shl    eax,0xa
c0011870:	89 c2                	mov    edx,eax
c0011872:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011876:	01 d0                	add    eax,edx
c0011878:	c1 e0 0c             	shl    eax,0xc
c001187b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001187f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011884:	8b 00                	mov    eax,DWORD PTR [eax]
c0011886:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011889:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001188f:	83 ec 04             	sub    esp,0x4
c0011892:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011896:	6a 01                	push   0x1
c0011898:	50                   	push   eax
c0011899:	e8 6e fd ff ff       	call   c001160c <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001189e:	83 c4 10             	add    esp,0x10
c00118a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00118a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00118a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00118ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00118af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118b3:	25 01 04 00 00       	and    eax,0x401
c00118b8:	3d 01 04 00 00       	cmp    eax,0x401
c00118bd:	75 19                	jne    c00118d8 <VAS::~VAS()+0xec>
c00118bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118c3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118c8:	83 ec 0c             	sub    esp,0xc
c00118cb:	50                   	push   eax
c00118cc:	e8 4c c1 ff ff       	call   c000da1d <Phys::freePage(unsigned long)>
c00118d1:	83 c4 10             	add    esp,0x10
c00118d4:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118d8:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00118dc:	eb 81                	jmp    c001185f <VAS::~VAS()+0x73>
c00118de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118e2:	25 00 04 00 00       	and    eax,0x400
c00118e7:	74 19                	je     c0011902 <VAS::~VAS()+0x116>
c00118e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ed:	25 00 f0 ff ff       	and    eax,0xfffff000
c00118f2:	83 ec 0c             	sub    esp,0xc
c00118f5:	50                   	push   eax
c00118f6:	e8 22 c1 ff ff       	call   c000da1d <Phys::freePage(unsigned long)>
c00118fb:	83 c4 10             	add    esp,0x10
c00118fe:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011902:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0011906:	e9 1b ff ff ff       	jmp    c0011826 <VAS::~VAS()+0x3a>
c001190b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001190f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011912:	83 ec 0c             	sub    esp,0xc
c0011915:	50                   	push   eax
c0011916:	e8 3c fd ff ff       	call   c0011657 <Virt::freeKernelVirtualPages(unsigned long)>
c001191b:	83 c4 10             	add    esp,0x10
c001191e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011922:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011925:	83 ec 0c             	sub    esp,0xc
c0011928:	50                   	push   eax
c0011929:	e8 ef c0 ff ff       	call   c000da1d <Phys::freePage(unsigned long)>
c001192e:	83 c4 10             	add    esp,0x10
c0011931:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0011935:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011939:	c1 e0 02             	shl    eax,0x2
c001193c:	83 ec 08             	sub    esp,0x8
c001193f:	50                   	push   eax
c0011940:	68 40 95 03 c0       	push   0xc0039540
c0011945:	e8 b8 b5 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001194a:	83 c4 10             	add    esp,0x10
c001194d:	e8 54 ca ff ff       	call   c000e3a6 <unlockScheduler()>
c0011952:	90                   	nop
c0011953:	83 c4 2c             	add    esp,0x2c
c0011956:	c3                   	ret    
c0011957:	90                   	nop

c0011958 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0011958:	55                   	push   ebp
c0011959:	57                   	push   edi
c001195a:	56                   	push   esi
c001195b:	53                   	push   ebx
c001195c:	83 ec 1c             	sub    esp,0x1c
c001195f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011963:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011967:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001196d:	77 08                	ja     c0011977 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001196f:	0f 20 d8             	mov    eax,cr3
c0011972:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0011975:	75 47                	jne    c00119be <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0011977:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001197b:	09 d8                	or     eax,ebx
c001197d:	a9 ff 0f 00 00       	test   eax,0xfff
c0011982:	75 57                	jne    c00119db <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0011984:	89 de                	mov    esi,ebx
c0011986:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011989:	c1 ee 16             	shr    esi,0x16
c001198c:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0011993:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0011997:	74 54                	je     c00119ed <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c0011999:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001199d:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00119a3:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00119a7:	c1 e6 0c             	shl    esi,0xc
c00119aa:	c1 eb 0a             	shr    ebx,0xa
c00119ad:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00119b3:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00119b6:	83 c4 1c             	add    esp,0x1c
c00119b9:	5b                   	pop    ebx
c00119ba:	5e                   	pop    esi
c00119bb:	5f                   	pop    edi
c00119bc:	5d                   	pop    ebp
c00119bd:	c3                   	ret    
c00119be:	83 ec 0c             	sub    esp,0xc
c00119c1:	68 60 95 03 c0       	push   0xc0039560
c00119c6:	e8 37 b5 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c00119cb:	83 c4 10             	add    esp,0x10
c00119ce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00119d2:	09 d8                	or     eax,ebx
c00119d4:	a9 ff 0f 00 00       	test   eax,0xfff
c00119d9:	74 a9                	je     c0011984 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119db:	83 ec 0c             	sub    esp,0xc
c00119de:	68 c8 95 03 c0       	push   0xc00395c8
c00119e3:	e8 38 b6 ff ff       	call   c000d020 <panic(char const*)>
c00119e8:	83 c4 10             	add    esp,0x10
c00119eb:	eb 97                	jmp    c0011984 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00119ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00119f1:	e8 b1 c0 ff ff       	call   c000daa7 <Phys::allocatePage()>
c00119f6:	89 c5                	mov    ebp,eax
c00119f8:	e8 b4 fa ff ff       	call   c00114b1 <Virt::getAKernelVAS()>
c00119fd:	83 ec 0c             	sub    esp,0xc
c0011a00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011a04:	6a 01                	push   0x1
c0011a06:	e8 16 f9 ff ff       	call   c0011321 <Virt::allocateKernelVirtualPages(int)>
c0011a0b:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0011a12:	6a 01                	push   0x1
c0011a14:	50                   	push   eax
c0011a15:	55                   	push   ebp
c0011a16:	81 cd 07 04 00 00    	or     ebp,0x407
c0011a1c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0011a20:	51                   	push   ecx
c0011a21:	e8 1e 02 00 00       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011a26:	83 c4 1c             	add    esp,0x1c
c0011a29:	68 00 10 00 00       	push   0x1000
c0011a2e:	6a 00                	push   0x0
c0011a30:	50                   	push   eax
c0011a31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011a35:	e8 9e ec fe ff       	call   c00006d8 <memset>
c0011a3a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0011a3e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0011a41:	e8 11 fc ff ff       	call   c0011657 <Virt::freeKernelVirtualPages(unsigned long)>
c0011a46:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011a4a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011a4d:	83 c4 10             	add    esp,0x10
c0011a50:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0011a53:	e9 41 ff ff ff       	jmp    c0011999 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c0011a58 <VAS::allocatePages(int, int)>:
c0011a58:	55                   	push   ebp
c0011a59:	57                   	push   edi
c0011a5a:	56                   	push   esi
c0011a5b:	53                   	push   ebx
c0011a5c:	83 ec 1c             	sub    esp,0x1c
c0011a5f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a63:	e8 50 57 00 00       	call   c00171b8 <thisCPU()>
c0011a68:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011a6e:	83 e0 01             	and    eax,0x1
c0011a71:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0011a75:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011a79:	0f 85 d7 00 00 00    	jne    c0011b56 <VAS::allocatePages(int, int)+0xfe>
c0011a7f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011a82:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a86:	85 c0                	test   eax,eax
c0011a88:	0f 84 ac 00 00 00    	je     c0011b3a <VAS::allocatePages(int, int)+0xe2>
c0011a8e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011a92:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011a96:	c1 e6 0c             	shl    esi,0xc
c0011a99:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0011a9d:	85 c0                	test   eax,eax
c0011a9f:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0011aa2:	7e 33                	jle    c0011ad7 <VAS::allocatePages(int, int)+0x7f>
c0011aa4:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0011aa8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011aac:	81 cd 00 04 00 00    	or     ebp,0x400
c0011ab2:	e8 f0 bf ff ff       	call   c000daa7 <Phys::allocatePage()>
c0011ab7:	55                   	push   ebp
c0011ab8:	53                   	push   ebx
c0011ab9:	50                   	push   eax
c0011aba:	57                   	push   edi
c0011abb:	e8 98 fe ff ff       	call   c0011958 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ac0:	83 c4 10             	add    esp,0x10
c0011ac3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ac8:	74 03                	je     c0011acd <VAS::allocatePages(int, int)+0x75>
c0011aca:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011acd:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ad3:	39 de                	cmp    esi,ebx
c0011ad5:	75 db                	jne    c0011ab2 <VAS::allocatePages(int, int)+0x5a>
c0011ad7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011adc:	74 3f                	je     c0011b1d <VAS::allocatePages(int, int)+0xc5>
c0011ade:	c1 ee 0a             	shr    esi,0xa
c0011ae1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011ae5:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0011aeb:	c1 eb 0a             	shr    ebx,0xa
c0011aee:	81 ee 00 00 40 00    	sub    esi,0x400000
c0011af4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011afa:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011b00:	39 f3                	cmp    ebx,esi
c0011b02:	77 0d                	ja     c0011b11 <VAS::allocatePages(int, int)+0xb9>
c0011b04:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011b07:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011b0d:	39 de                	cmp    esi,ebx
c0011b0f:	73 f3                	jae    c0011b04 <VAS::allocatePages(int, int)+0xac>
c0011b11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b15:	83 c4 1c             	add    esp,0x1c
c0011b18:	5b                   	pop    ebx
c0011b19:	5e                   	pop    esi
c0011b1a:	5f                   	pop    edi
c0011b1b:	5d                   	pop    ebp
c0011b1c:	c3                   	ret    
c0011b1d:	e8 f7 ce 00 00       	call   c001ea19 <CPU::readCR3()>
c0011b22:	83 ec 0c             	sub    esp,0xc
c0011b25:	50                   	push   eax
c0011b26:	e8 12 cf 00 00       	call   c001ea3d <CPU::writeCR3(unsigned long)>
c0011b2b:	83 c4 10             	add    esp,0x10
c0011b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b32:	83 c4 1c             	add    esp,0x1c
c0011b35:	5b                   	pop    ebx
c0011b36:	5e                   	pop    esi
c0011b37:	5f                   	pop    edi
c0011b38:	5d                   	pop    ebp
c0011b39:	c3                   	ret    
c0011b3a:	83 ec 0c             	sub    esp,0xc
c0011b3d:	68 ec 95 03 c0       	push   0xc00395ec
c0011b42:	e8 d9 b4 ff ff       	call   c000d020 <panic(char const*)>
c0011b47:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011b4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b4e:	83 c4 10             	add    esp,0x10
c0011b51:	e9 38 ff ff ff       	jmp    c0011a8e <VAS::allocatePages(int, int)+0x36>
c0011b56:	83 ec 0c             	sub    esp,0xc
c0011b59:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0011b5d:	e8 bf f7 ff ff       	call   c0011321 <Virt::allocateKernelVirtualPages(int)>
c0011b62:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011b66:	83 c4 10             	add    esp,0x10
c0011b69:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0011b6e:	0f 87 94 00 00 00    	ja     c0011c08 <VAS::allocatePages(int, int)+0x1b0>
c0011b74:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0011b78:	85 d2                	test   edx,edx
c0011b7a:	7e 3c                	jle    c0011bb8 <VAS::allocatePages(int, int)+0x160>
c0011b7c:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011b80:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0011b84:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b88:	c1 e5 0c             	shl    ebp,0xc
c0011b8b:	81 ce 00 04 00 00    	or     esi,0x400
c0011b91:	01 dd                	add    ebp,ebx
c0011b93:	e8 0f bf ff ff       	call   c000daa7 <Phys::allocatePage()>
c0011b98:	56                   	push   esi
c0011b99:	53                   	push   ebx
c0011b9a:	50                   	push   eax
c0011b9b:	57                   	push   edi
c0011b9c:	e8 b7 fd ff ff       	call   c0011958 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011ba1:	83 c4 10             	add    esp,0x10
c0011ba4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011ba9:	74 03                	je     c0011bae <VAS::allocatePages(int, int)+0x156>
c0011bab:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bae:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bb4:	39 dd                	cmp    ebp,ebx
c0011bb6:	75 db                	jne    c0011b93 <VAS::allocatePages(int, int)+0x13b>
c0011bb8:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011bbd:	0f 84 5a ff ff ff    	je     c0011b1d <VAS::allocatePages(int, int)+0xc5>
c0011bc3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011bc7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011bcb:	89 d3                	mov    ebx,edx
c0011bcd:	c1 e0 0c             	shl    eax,0xc
c0011bd0:	c1 eb 0a             	shr    ebx,0xa
c0011bd3:	01 d0                	add    eax,edx
c0011bd5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011bdb:	c1 e8 0a             	shr    eax,0xa
c0011bde:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011be4:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011be9:	2d 00 00 40 00       	sub    eax,0x400000
c0011bee:	39 c3                	cmp    ebx,eax
c0011bf0:	0f 87 1b ff ff ff    	ja     c0011b11 <VAS::allocatePages(int, int)+0xb9>
c0011bf6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011bf9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011bff:	39 d8                	cmp    eax,ebx
c0011c01:	73 f3                	jae    c0011bf6 <VAS::allocatePages(int, int)+0x19e>
c0011c03:	e9 09 ff ff ff       	jmp    c0011b11 <VAS::allocatePages(int, int)+0xb9>
c0011c08:	e8 ab 55 00 00       	call   c00171b8 <thisCPU()>
c0011c0d:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0011c14:	0f 84 5a ff ff ff    	je     c0011b74 <VAS::allocatePages(int, int)+0x11c>
c0011c1a:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0011c22:	e9 4d ff ff ff       	jmp    c0011b74 <VAS::allocatePages(int, int)+0x11c>
c0011c27:	90                   	nop

c0011c28 <VAS::setCPUSpecific(unsigned long)>:
c0011c28:	83 ec 0c             	sub    esp,0xc
c0011c2b:	6a 05                	push   0x5
c0011c2d:	68 00 00 40 c2       	push   0xc2400000
c0011c32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c3a:	e8 19 fd ff ff       	call   c0011958 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c3f:	83 c4 1c             	add    esp,0x1c
c0011c42:	c3                   	ret    
c0011c43:	90                   	nop

c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0011c44:	55                   	push   ebp
c0011c45:	57                   	push   edi
c0011c46:	56                   	push   esi
c0011c47:	53                   	push   ebx
c0011c48:	83 ec 1c             	sub    esp,0x1c
c0011c4b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011c4f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0011c53:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0011c57:	e8 5c 55 00 00       	call   c00171b8 <thisCPU()>
c0011c5c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0011c62:	83 e0 01             	and    eax,0x1
c0011c65:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0011c69:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c6d:	85 c0                	test   eax,eax
c0011c6f:	7e 39                	jle    c0011caa <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c0011c71:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c75:	89 f3                	mov    ebx,esi
c0011c77:	c1 e0 0c             	shl    eax,0xc
c0011c7a:	01 f0                	add    eax,esi
c0011c7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011c80:	55                   	push   ebp
c0011c81:	53                   	push   ebx
c0011c82:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011c86:	29 f0                	sub    eax,esi
c0011c88:	01 d8                	add    eax,ebx
c0011c8a:	50                   	push   eax
c0011c8b:	57                   	push   edi
c0011c8c:	e8 c7 fc ff ff       	call   c0011958 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c91:	83 c4 10             	add    esp,0x10
c0011c94:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011c99:	74 03                	je     c0011c9e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c0011c9b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011c9e:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ca4:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0011ca8:	75 d6                	jne    c0011c80 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c0011caa:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0011caf:	74 42                	je     c0011cf3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c0011cb1:	89 f3                	mov    ebx,esi
c0011cb3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011cb7:	c1 eb 0a             	shr    ebx,0xa
c0011cba:	c1 e0 0c             	shl    eax,0xc
c0011cbd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0011cc3:	01 f0                	add    eax,esi
c0011cc5:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0011ccb:	c1 e8 0a             	shr    eax,0xa
c0011cce:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011cd3:	2d 00 00 40 00       	sub    eax,0x400000
c0011cd8:	39 c3                	cmp    ebx,eax
c0011cda:	77 0d                	ja     c0011ce9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c0011cdc:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0011cdf:	81 c3 00 10 00 00    	add    ebx,0x1000
c0011ce5:	39 d8                	cmp    eax,ebx
c0011ce7:	73 f3                	jae    c0011cdc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c0011ce9:	83 c4 1c             	add    esp,0x1c
c0011cec:	89 f0                	mov    eax,esi
c0011cee:	5b                   	pop    ebx
c0011cef:	5e                   	pop    esi
c0011cf0:	5f                   	pop    edi
c0011cf1:	5d                   	pop    ebp
c0011cf2:	c3                   	ret    
c0011cf3:	e8 21 cd 00 00       	call   c001ea19 <CPU::readCR3()>
c0011cf8:	83 ec 0c             	sub    esp,0xc
c0011cfb:	50                   	push   eax
c0011cfc:	e8 3c cd 00 00       	call   c001ea3d <CPU::writeCR3(unsigned long)>
c0011d01:	89 f0                	mov    eax,esi
c0011d03:	83 c4 10             	add    esp,0x10
c0011d06:	83 c4 1c             	add    esp,0x1c
c0011d09:	5b                   	pop    ebx
c0011d0a:	5e                   	pop    esi
c0011d0b:	5f                   	pop    edi
c0011d0c:	5d                   	pop    ebp
c0011d0d:	c3                   	ret    

c0011d0e <VAS::VAS(VAS*)>:
c0011d0e:	53                   	push   ebx
c0011d0f:	83 ec 38             	sub    esp,0x38
c0011d12:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d16:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d1d:	e8 a9 c6 ff ff       	call   c000e3cb <lockStuff()>
c0011d22:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011d26:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011d29:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d2d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011d30:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0011d34:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c0011d37:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d3b:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0011d3e:	e8 64 bd ff ff       	call   c000daa7 <Phys::allocatePage()>
c0011d43:	89 c2                	mov    edx,eax
c0011d45:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d49:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011d4c:	e8 60 f7 ff ff       	call   c00114b1 <Virt::getAKernelVAS()>
c0011d51:	89 c3                	mov    ebx,eax
c0011d53:	83 ec 0c             	sub    esp,0xc
c0011d56:	6a 01                	push   0x1
c0011d58:	e8 c4 f5 ff ff       	call   c0011321 <Virt::allocateKernelVirtualPages(int)>
c0011d5d:	83 c4 10             	add    esp,0x10
c0011d60:	89 c2                	mov    edx,eax
c0011d62:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d66:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011d69:	83 ec 0c             	sub    esp,0xc
c0011d6c:	6a 03                	push   0x3
c0011d6e:	6a 01                	push   0x1
c0011d70:	52                   	push   edx
c0011d71:	50                   	push   eax
c0011d72:	53                   	push   ebx
c0011d73:	e8 cc fe ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011d78:	83 c4 20             	add    esp,0x20
c0011d7b:	89 c2                	mov    edx,eax
c0011d7d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011d81:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0011d84:	83 ec 04             	sub    esp,0x4
c0011d87:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0011d8b:	6a 01                	push   0x1
c0011d8d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011d91:	e8 20 fa ff ff       	call   c00117b6 <VAS::mapOtherVASIn(bool, VAS*)>
c0011d96:	83 c4 10             	add    esp,0x10
c0011d99:	83 ec 0c             	sub    esp,0xc
c0011d9c:	6a 01                	push   0x1
c0011d9e:	e8 7e f5 ff ff       	call   c0011321 <Virt::allocateKernelVirtualPages(int)>
c0011da3:	83 c4 10             	add    esp,0x10
c0011da6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0011daa:	83 ec 0c             	sub    esp,0xc
c0011dad:	6a 01                	push   0x1
c0011daf:	e8 6d f5 ff ff       	call   c0011321 <Virt::allocateKernelVirtualPages(int)>
c0011db4:	83 c4 10             	add    esp,0x10
c0011db7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011dbb:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011dc3:	81 7c 24 2c ff 03 00 00 	cmp    DWORD PTR [esp+0x2c],0x3ff
c0011dcb:	0f 8f 5e 02 00 00    	jg     c001202f <VAS::VAS(VAS*)+0x321>
c0011dd1:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011dd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dd8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011ddb:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011de1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011de4:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011de8:	c1 e2 02             	shl    edx,0x2
c0011deb:	01 d0                	add    eax,edx
c0011ded:	8b 00                	mov    eax,DWORD PTR [eax]
c0011def:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011df3:	83 ec 08             	sub    esp,0x8
c0011df6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011dfa:	68 5f 97 03 c0       	push   0xc003975f
c0011dff:	e8 fe b0 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0011e04:	83 c4 10             	add    esp,0x10
c0011e07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011e0b:	25 01 04 00 00       	and    eax,0x401
c0011e10:	3d 01 04 00 00       	cmp    eax,0x401
c0011e15:	0f 85 e5 01 00 00    	jne    c0012000 <VAS::VAS(VAS*)+0x2f2>
c0011e1b:	83 ec 0c             	sub    esp,0xc
c0011e1e:	68 70 97 03 c0       	push   0xc0039770
c0011e23:	e8 da b0 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0011e28:	83 c4 10             	add    esp,0x10
c0011e2b:	e8 77 bc ff ff       	call   c000daa7 <Phys::allocatePage()>
c0011e30:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011e34:	83 ec 08             	sub    esp,0x8
c0011e37:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011e3b:	68 86 97 03 c0       	push   0xc0039786
c0011e40:	e8 bd b0 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0011e45:	83 c4 10             	add    esp,0x10
c0011e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011e4c:	25 ff 0f 00 00       	and    eax,0xfff
c0011e51:	89 c1                	mov    ecx,eax
c0011e53:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011e57:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0011e5a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0011e5e:	c1 e2 02             	shl    edx,0x2
c0011e61:	01 c2                	add    edx,eax
c0011e63:	89 c8                	mov    eax,ecx
c0011e65:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0011e69:	89 02                	mov    DWORD PTR [edx],eax
c0011e6b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0011e73:	81 7c 24 28 ff 03 00 00 	cmp    DWORD PTR [esp+0x28],0x3ff
c0011e7b:	0f 8f a5 01 00 00    	jg     c0012026 <VAS::VAS(VAS*)+0x318>
c0011e81:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011e85:	c1 e0 0a             	shl    eax,0xa
c0011e88:	89 c2                	mov    edx,eax
c0011e8a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e8e:	01 d0                	add    eax,edx
c0011e90:	c1 e0 0c             	shl    eax,0xc
c0011e93:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011e97:	83 ec 08             	sub    esp,0x8
c0011e9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0011ea2:	e8 91 f7 ff ff       	call   c0011638 <VAS::getPageTableEntry(unsigned long)>
c0011ea7:	83 c4 10             	add    esp,0x10
c0011eaa:	8b 00                	mov    eax,DWORD PTR [eax]
c0011eac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011eb0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0011eb5:	8b 00                	mov    eax,DWORD PTR [eax]
c0011eb7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011eba:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0011ec0:	83 ec 04             	sub    esp,0x4
c0011ec3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011ec7:	6a 01                	push   0x1
c0011ec9:	50                   	push   eax
c0011eca:	e8 3d f7 ff ff       	call   c001160c <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0011ecf:	83 c4 10             	add    esp,0x10
c0011ed2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011ed6:	83 ec 04             	sub    esp,0x4
c0011ed9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011edd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ee1:	68 18 96 03 c0       	push   0xc0039618
c0011ee6:	e8 17 b0 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0011eeb:	83 c4 10             	add    esp,0x10
c0011eee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011ef2:	25 01 04 00 00       	and    eax,0x401
c0011ef7:	3d 01 04 00 00       	cmp    eax,0x401
c0011efc:	0f 85 db 00 00 00    	jne    c0011fdd <VAS::VAS(VAS*)+0x2cf>
c0011f02:	83 ec 0c             	sub    esp,0xc
c0011f05:	68 95 97 03 c0       	push   0xc0039795
c0011f0a:	e8 f3 af ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0011f0f:	83 c4 10             	add    esp,0x10
c0011f12:	e8 90 bb ff ff       	call   c000daa7 <Phys::allocatePage()>
c0011f17:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011f1b:	83 ec 08             	sub    esp,0x8
c0011f1e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011f22:	68 a4 97 03 c0       	push   0xc00397a4
c0011f27:	e8 d6 af ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0011f2c:	83 c4 10             	add    esp,0x10
c0011f2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f33:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f38:	83 ec 08             	sub    esp,0x8
c0011f3b:	50                   	push   eax
c0011f3c:	68 b8 97 03 c0       	push   0xc00397b8
c0011f41:	e8 bc af ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0011f46:	83 c4 10             	add    esp,0x10
c0011f49:	e8 63 f5 ff ff       	call   c00114b1 <Virt::getAKernelVAS()>
c0011f4e:	83 ec 0c             	sub    esp,0xc
c0011f51:	6a 03                	push   0x3
c0011f53:	6a 01                	push   0x1
c0011f55:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0011f59:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011f5d:	50                   	push   eax
c0011f5e:	e8 e1 fc ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f63:	83 c4 20             	add    esp,0x20
c0011f66:	e8 46 f5 ff ff       	call   c00114b1 <Virt::getAKernelVAS()>
c0011f6b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011f6f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0011f75:	83 ec 0c             	sub    esp,0xc
c0011f78:	6a 03                	push   0x3
c0011f7a:	6a 01                	push   0x1
c0011f7c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011f80:	52                   	push   edx
c0011f81:	50                   	push   eax
c0011f82:	e8 bd fc ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0011f87:	83 c4 20             	add    esp,0x20
c0011f8a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011f8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011f92:	83 ec 04             	sub    esp,0x4
c0011f95:	68 00 10 00 00       	push   0x1000
c0011f9a:	52                   	push   edx
c0011f9b:	50                   	push   eax
c0011f9c:	e8 c0 e6 fe ff       	call   c0000661 <memcpy>
c0011fa1:	83 c4 10             	add    esp,0x10
c0011fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fa8:	25 ff 0f 00 00       	and    eax,0xfff
c0011fad:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0011fb1:	89 c2                	mov    edx,eax
c0011fb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fb7:	89 10                	mov    DWORD PTR [eax],edx
c0011fb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011fbd:	25 ff 0f 00 00       	and    eax,0xfff
c0011fc2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0011fc6:	83 ec 04             	sub    esp,0x4
c0011fc9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011fcd:	50                   	push   eax
c0011fce:	68 3c 96 03 c0       	push   0xc003963c
c0011fd3:	e8 2a af ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0011fd8:	83 c4 10             	add    esp,0x10
c0011fdb:	eb 1a                	jmp    c0011ff7 <VAS::VAS(VAS*)+0x2e9>
c0011fdd:	83 ec 0c             	sub    esp,0xc
c0011fe0:	68 cc 97 03 c0       	push   0xc00397cc
c0011fe5:	e8 18 af ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0011fea:	83 c4 10             	add    esp,0x10
c0011fed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ff1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011ff5:	89 10                	mov    DWORD PTR [eax],edx
c0011ff7:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0011ffb:	e9 73 fe ff ff       	jmp    c0011e73 <VAS::VAS(VAS*)+0x165>
c0012000:	83 ec 0c             	sub    esp,0xc
c0012003:	68 d0 97 03 c0       	push   0xc00397d0
c0012008:	e8 f5 ae ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001200d:	83 c4 10             	add    esp,0x10
c0012010:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012014:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012017:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001201b:	c1 e2 02             	shl    edx,0x2
c001201e:	01 c2                	add    edx,eax
c0012020:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012024:	89 02                	mov    DWORD PTR [edx],eax
c0012026:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c001202a:	e9 94 fd ff ff       	jmp    c0011dc3 <VAS::VAS(VAS*)+0xb5>
c001202f:	83 ec 0c             	sub    esp,0xc
c0012032:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012036:	e8 1c f6 ff ff       	call   c0011657 <Virt::freeKernelVirtualPages(unsigned long)>
c001203b:	83 c4 10             	add    esp,0x10
c001203e:	83 ec 0c             	sub    esp,0xc
c0012041:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012045:	e8 0d f6 ff ff       	call   c0011657 <Virt::freeKernelVirtualPages(unsigned long)>
c001204a:	83 c4 10             	add    esp,0x10
c001204d:	e8 0b c7 ff ff       	call   c000e75d <unlockStuff()>
c0012052:	90                   	nop
c0012053:	83 c4 38             	add    esp,0x38
c0012056:	5b                   	pop    ebx
c0012057:	c3                   	ret    

c0012058 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012058:	55                   	push   ebp
c0012059:	57                   	push   edi
c001205a:	56                   	push   esi
c001205b:	53                   	push   ebx
c001205c:	83 ec 1c             	sub    esp,0x1c
c001205f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012063:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012067:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c001206b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001206f:	a9 ff 0f 00 00       	test   eax,0xfff
c0012074:	75 4a                	jne    c00120c0 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012076:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001207a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001207d:	c1 eb 16             	shr    ebx,0x16
c0012080:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012087:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c001208b:	74 4d                	je     c00120da <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001208d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012091:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012095:	c1 e8 0a             	shr    eax,0xa
c0012098:	80 fa 01             	cmp    dl,0x1
c001209b:	19 d2                	sbb    edx,edx
c001209d:	c1 e3 0c             	shl    ebx,0xc
c00120a0:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c00120a4:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00120aa:	25 fc 0f 00 00       	and    eax,0xffc
c00120af:	01 d8                	add    eax,ebx
c00120b1:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00120b8:	83 c4 1c             	add    esp,0x1c
c00120bb:	5b                   	pop    ebx
c00120bc:	5e                   	pop    esi
c00120bd:	5f                   	pop    edi
c00120be:	5d                   	pop    ebp
c00120bf:	c3                   	ret    
c00120c0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00120c4:	83 ec 0c             	sub    esp,0xc
c00120c7:	68 60 96 03 c0       	push   0xc0039660
c00120cc:	e8 4f af ff ff       	call   c000d020 <panic(char const*)>
c00120d1:	83 c4 10             	add    esp,0x10
c00120d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00120d8:	eb 9c                	jmp    c0012076 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00120da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00120de:	e8 c4 b9 ff ff       	call   c000daa7 <Phys::allocatePage()>
c00120e3:	89 c5                	mov    ebp,eax
c00120e5:	e8 c7 f3 ff ff       	call   c00114b1 <Virt::getAKernelVAS()>
c00120ea:	83 ec 0c             	sub    esp,0xc
c00120ed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00120f1:	6a 01                	push   0x1
c00120f3:	e8 29 f2 ff ff       	call   c0011321 <Virt::allocateKernelVirtualPages(int)>
c00120f8:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00120ff:	6a 01                	push   0x1
c0012101:	50                   	push   eax
c0012102:	55                   	push   ebp
c0012103:	81 cd 07 04 00 00    	or     ebp,0x407
c0012109:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001210d:	51                   	push   ecx
c001210e:	e8 31 fb ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012113:	83 c4 1c             	add    esp,0x1c
c0012116:	68 00 10 00 00       	push   0x1000
c001211b:	6a 00                	push   0x0
c001211d:	50                   	push   eax
c001211e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012122:	e8 b1 e5 fe ff       	call   c00006d8 <memset>
c0012127:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001212b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001212e:	e8 24 f5 ff ff       	call   c0011657 <Virt::freeKernelVirtualPages(unsigned long)>
c0012133:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012136:	83 c4 10             	add    esp,0x10
c0012139:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001213c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012140:	e9 48 ff ff ff       	jmp    c001208d <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012145:	90                   	nop

c0012146 <VAS::VAS(bool)>:
c0012146:	53                   	push   ebx
c0012147:	83 ec 28             	sub    esp,0x28
c001214a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001214e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012152:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012156:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001215d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012161:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012165:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012168:	e8 3a b9 ff ff       	call   c000daa7 <Phys::allocatePage()>
c001216d:	89 c2                	mov    edx,eax
c001216f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012173:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012176:	e8 36 f3 ff ff       	call   c00114b1 <Virt::getAKernelVAS()>
c001217b:	89 c3                	mov    ebx,eax
c001217d:	83 ec 0c             	sub    esp,0xc
c0012180:	6a 01                	push   0x1
c0012182:	e8 9a f1 ff ff       	call   c0011321 <Virt::allocateKernelVirtualPages(int)>
c0012187:	83 c4 10             	add    esp,0x10
c001218a:	89 c2                	mov    edx,eax
c001218c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012190:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012193:	83 ec 0c             	sub    esp,0xc
c0012196:	6a 03                	push   0x3
c0012198:	6a 01                	push   0x1
c001219a:	52                   	push   edx
c001219b:	50                   	push   eax
c001219c:	53                   	push   ebx
c001219d:	e8 a2 fa ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00121a2:	83 c4 20             	add    esp,0x20
c00121a5:	89 c2                	mov    edx,eax
c00121a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121ab:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00121ae:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00121b6:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00121be:	7f 1c                	jg     c00121dc <VAS::VAS(bool)+0x96>
c00121c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00121c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00121c7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00121cb:	c1 e2 02             	shl    edx,0x2
c00121ce:	01 d0                	add    eax,edx
c00121d0:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00121d6:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121da:	eb da                	jmp    c00121b6 <VAS::VAS(bool)+0x70>
c00121dc:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00121e4:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00121ec:	7f 71                	jg     c001225f <VAS::VAS(bool)+0x119>
c00121ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121f2:	2d 00 02 00 00       	sub    eax,0x200
c00121f7:	c1 e0 0c             	shl    eax,0xc
c00121fa:	83 c8 03             	or     eax,0x3
c00121fd:	89 c3                	mov    ebx,eax
c00121ff:	e8 b4 4f 00 00       	call   c00171b8 <thisCPU()>
c0012204:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001220a:	83 e0 10             	and    eax,0x10
c001220d:	84 c0                	test   al,al
c001220f:	74 07                	je     c0012218 <VAS::VAS(bool)+0xd2>
c0012211:	b8 00 01 00 00       	mov    eax,0x100
c0012216:	eb 05                	jmp    c001221d <VAS::VAS(bool)+0xd7>
c0012218:	b8 00 00 00 00       	mov    eax,0x0
c001221d:	09 d8                	or     eax,ebx
c001221f:	89 c1                	mov    ecx,eax
c0012221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012225:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012228:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001222c:	c1 e2 02             	shl    edx,0x2
c001222f:	01 d0                	add    eax,edx
c0012231:	89 ca                	mov    edx,ecx
c0012233:	89 10                	mov    DWORD PTR [eax],edx
c0012235:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012239:	2d 40 03 00 00       	sub    eax,0x340
c001223e:	83 f8 7f             	cmp    eax,0x7f
c0012241:	77 16                	ja     c0012259 <VAS::VAS(bool)+0x113>
c0012243:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012247:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001224a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001224e:	c1 e2 02             	shl    edx,0x2
c0012251:	01 d0                	add    eax,edx
c0012253:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012259:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001225d:	eb 85                	jmp    c00121e4 <VAS::VAS(bool)+0x9e>
c001225f:	e8 54 4f 00 00       	call   c00171b8 <thisCPU()>
c0012264:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001226a:	83 e0 10             	and    eax,0x10
c001226d:	84 c0                	test   al,al
c001226f:	74 07                	je     c0012278 <VAS::VAS(bool)+0x132>
c0012271:	b8 03 41 00 00       	mov    eax,0x4103
c0012276:	eb 05                	jmp    c001227d <VAS::VAS(bool)+0x137>
c0012278:	b8 03 40 00 00       	mov    eax,0x4003
c001227d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012281:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012284:	81 c2 20 0c 00 00    	add    edx,0xc20
c001228a:	89 02                	mov    DWORD PTR [edx],eax
c001228c:	e8 27 4f 00 00       	call   c00171b8 <thisCPU()>
c0012291:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012297:	83 ec 08             	sub    esp,0x8
c001229a:	50                   	push   eax
c001229b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001229f:	e8 84 f9 ff ff       	call   c0011c28 <VAS::setCPUSpecific(unsigned long)>
c00122a4:	83 c4 10             	add    esp,0x10
c00122a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122ab:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c00122ae:	e8 05 4f 00 00       	call   c00171b8 <thisCPU()>
c00122b3:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00122b9:	83 e0 10             	and    eax,0x10
c00122bc:	84 c0                	test   al,al
c00122be:	74 07                	je     c00122c7 <VAS::VAS(bool)+0x181>
c00122c0:	b8 00 01 00 00       	mov    eax,0x100
c00122c5:	eb 05                	jmp    c00122cc <VAS::VAS(bool)+0x186>
c00122c7:	b8 00 00 00 00       	mov    eax,0x0
c00122cc:	09 d8                	or     eax,ebx
c00122ce:	89 c2                	mov    edx,eax
c00122d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00122d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00122d7:	05 fc 0f 00 00       	add    eax,0xffc
c00122dc:	83 ca 03             	or     edx,0x3
c00122df:	89 10                	mov    DWORD PTR [eax],edx
c00122e1:	e8 d2 4e 00 00       	call   c00171b8 <thisCPU()>
c00122e6:	83 ec 0c             	sub    esp,0xc
c00122e9:	50                   	push   eax
c00122ea:	e8 af 17 00 00       	call   c0013a9e <Device::getName()>
c00122ef:	83 c4 10             	add    esp,0x10
c00122f2:	83 ec 08             	sub    esp,0x8
c00122f5:	68 e0 97 03 c0       	push   0xc00397e0
c00122fa:	50                   	push   eax
c00122fb:	e8 7a e5 fe ff       	call   c000087a <strcmp>
c0012300:	83 c4 10             	add    esp,0x10
c0012303:	85 c0                	test   eax,eax
c0012305:	0f 94 c0             	sete   al
c0012308:	84 c0                	test   al,al
c001230a:	74 64                	je     c0012370 <VAS::VAS(bool)+0x22a>
c001230c:	e8 76 c0 ff ff       	call   c000e387 <disableIRQs()>
c0012311:	e8 a2 4e 00 00       	call   c00171b8 <thisCPU()>
c0012316:	05 7c 09 00 00       	add    eax,0x97c
c001231b:	83 ec 0c             	sub    esp,0xc
c001231e:	50                   	push   eax
c001231f:	e8 32 a7 ff ff       	call   c000ca56 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012324:	83 c4 10             	add    esp,0x10
c0012327:	25 00 f0 ff ff       	and    eax,0xfffff000
c001232c:	89 c3                	mov    ebx,eax
c001232e:	e8 85 4e 00 00       	call   c00171b8 <thisCPU()>
c0012333:	05 7c 09 00 00       	add    eax,0x97c
c0012338:	83 ec 0c             	sub    esp,0xc
c001233b:	50                   	push   eax
c001233c:	e8 15 a7 ff ff       	call   c000ca56 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012341:	83 c4 10             	add    esp,0x10
c0012344:	83 ec 08             	sub    esp,0x8
c0012347:	50                   	push   eax
c0012348:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001234c:	e8 e7 f2 ff ff       	call   c0011638 <VAS::getPageTableEntry(unsigned long)>
c0012351:	83 c4 10             	add    esp,0x10
c0012354:	8b 00                	mov    eax,DWORD PTR [eax]
c0012356:	25 00 f0 ff ff       	and    eax,0xfffff000
c001235b:	6a 11                	push   0x11
c001235d:	53                   	push   ebx
c001235e:	50                   	push   eax
c001235f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012363:	e8 f0 f5 ff ff       	call   c0011958 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012368:	83 c4 10             	add    esp,0x10
c001236b:	e8 25 c0 ff ff       	call   c000e395 <enableIRQs()>
c0012370:	90                   	nop
c0012371:	83 c4 28             	add    esp,0x28
c0012374:	5b                   	pop    ebx
c0012375:	c3                   	ret    

c0012376 <mapVASFirstTime>:
c0012376:	55                   	push   ebp
c0012377:	57                   	push   edi
c0012378:	56                   	push   esi
c0012379:	53                   	push   ebx
c001237a:	83 ec 0c             	sub    esp,0xc
c001237d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012382:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012385:	4a                   	dec    edx
c0012386:	0f 84 99 00 00 00    	je     c0012425 <mapVASFirstTime+0xaf>
c001238c:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c001238f:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012392:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012397:	c1 e5 15             	shl    ebp,0x15
c001239a:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c001239f:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c00123a5:	29 eb                	sub    ebx,ebp
c00123a7:	29 ee                	sub    esi,ebp
c00123a9:	e8 f9 b6 ff ff       	call   c000daa7 <Phys::allocatePage()>
c00123ae:	83 ec 0c             	sub    esp,0xc
c00123b1:	68 03 04 00 00       	push   0x403
c00123b6:	6a 01                	push   0x1
c00123b8:	53                   	push   ebx
c00123b9:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00123bf:	50                   	push   eax
c00123c0:	57                   	push   edi
c00123c1:	e8 7e f8 ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00123c6:	83 c4 20             	add    esp,0x20
c00123c9:	39 f3                	cmp    ebx,esi
c00123cb:	75 dc                	jne    c00123a9 <mapVASFirstTime+0x33>
c00123cd:	be 00 f0 ff 01       	mov    esi,0x1fff000
c00123d2:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c00123d7:	29 ee                	sub    esi,ebp
c00123d9:	29 e8                	sub    eax,ebp
c00123db:	89 c5                	mov    ebp,eax
c00123dd:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c00123e1:	19 db                	sbb    ebx,ebx
c00123e3:	e8 bf b6 ff ff       	call   c000daa7 <Phys::allocatePage()>
c00123e8:	83 e3 04             	and    ebx,0x4
c00123eb:	83 ec 0c             	sub    esp,0xc
c00123ee:	81 c3 03 04 00 00    	add    ebx,0x403
c00123f4:	53                   	push   ebx
c00123f5:	6a 01                	push   0x1
c00123f7:	56                   	push   esi
c00123f8:	81 ee 00 10 00 00    	sub    esi,0x1000
c00123fe:	50                   	push   eax
c00123ff:	57                   	push   edi
c0012400:	e8 3f f8 ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012405:	83 c4 20             	add    esp,0x20
c0012408:	39 f5                	cmp    ebp,esi
c001240a:	75 d1                	jne    c00123dd <mapVASFirstTime+0x67>
c001240c:	e8 08 c6 00 00       	call   c001ea19 <CPU::readCR3()>
c0012411:	83 ec 0c             	sub    esp,0xc
c0012414:	50                   	push   eax
c0012415:	e8 23 c6 00 00       	call   c001ea3d <CPU::writeCR3(unsigned long)>
c001241a:	83 c4 10             	add    esp,0x10
c001241d:	83 c4 0c             	add    esp,0xc
c0012420:	5b                   	pop    ebx
c0012421:	5e                   	pop    esi
c0012422:	5f                   	pop    edi
c0012423:	5d                   	pop    ebp
c0012424:	c3                   	ret    
c0012425:	83 ec 0c             	sub    esp,0xc
c0012428:	68 ee 97 03 c0       	push   0xc00397ee
c001242d:	e8 d0 aa ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0012432:	83 c4 10             	add    esp,0x10
c0012435:	83 c4 0c             	add    esp,0xc
c0012438:	5b                   	pop    ebx
c0012439:	5e                   	pop    esi
c001243a:	5f                   	pop    edi
c001243b:	5d                   	pop    ebp
c001243c:	c3                   	ret    

c001243d <__cxa_atexit>:
c001243d:	31 c0                	xor    eax,eax
c001243f:	c3                   	ret    

c0012440 <__cxa_finalize>:
c0012440:	c3                   	ret    

c0012441 <__stack_chk_fail>:
c0012441:	55                   	push   ebp
c0012442:	89 e5                	mov    ebp,esp
c0012444:	83 ec 10             	sub    esp,0x10
c0012447:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001244a:	68 07 98 03 c0       	push   0xc0039807
c001244f:	e8 ae aa ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0012454:	58                   	pop    eax
c0012455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012458:	5a                   	pop    edx
c0012459:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001245c:	68 07 98 03 c0       	push   0xc0039807
c0012461:	e8 9c aa ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0012466:	59                   	pop    ecx
c0012467:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001246a:	5a                   	pop    edx
c001246b:	8b 00                	mov    eax,DWORD PTR [eax]
c001246d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012470:	68 07 98 03 c0       	push   0xc0039807
c0012475:	e8 88 aa ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001247a:	59                   	pop    ecx
c001247b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001247e:	5a                   	pop    edx
c001247f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012481:	8b 00                	mov    eax,DWORD PTR [eax]
c0012483:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012486:	68 07 98 03 c0       	push   0xc0039807
c001248b:	e8 72 aa ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0012490:	c7 04 24 0f 98 03 c0 	mov    DWORD PTR [esp],0xc003980f
c0012497:	e8 84 ab ff ff       	call   c000d020 <panic(char const*)>
c001249c:	83 c4 10             	add    esp,0x10
c001249f:	c9                   	leave  
c00124a0:	c3                   	ret    

c00124a1 <__cxa_pure_virtual>:
c00124a1:	83 ec 18             	sub    esp,0x18
c00124a4:	68 27 98 03 c0       	push   0xc0039827
c00124a9:	e8 72 ab ff ff       	call   c000d020 <panic(char const*)>
c00124ae:	83 c4 1c             	add    esp,0x1c
c00124b1:	c3                   	ret    

c00124b2 <operator new(unsigned long)>:
c00124b2:	e9 46 b0 ff ff       	jmp    c000d4fd <malloc>

c00124b7 <operator new[](unsigned long)>:
c00124b7:	e9 41 b0 ff ff       	jmp    c000d4fd <malloc>

c00124bc <operator delete(void*)>:
c00124bc:	e9 5c b0 ff ff       	jmp    c000d51d <rfree>

c00124c1 <operator delete(void*, unsigned long)>:
c00124c1:	e9 57 b0 ff ff       	jmp    c000d51d <rfree>

c00124c6 <operator delete[](void*)>:
c00124c6:	e9 52 b0 ff ff       	jmp    c000d51d <rfree>

c00124cb <operator delete[](void*, unsigned long)>:
c00124cb:	e9 4d b0 ff ff       	jmp    c000d51d <rfree>

c00124d0 <File::read(unsigned long long, void*, int*)>:
c00124d0:	53                   	push   ebx
c00124d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00124d5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124d9:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00124e0:	3c 19                	cmp    al,0x19
c00124e2:	77 35                	ja     c0012519 <File::read(unsigned long long, void*, int*)+0x49>
c00124e4:	8b 04 85 00 c3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3d00]
c00124eb:	85 c0                	test   eax,eax
c00124ed:	74 2a                	je     c0012519 <File::read(unsigned long long, void*, int*)+0x49>
c00124ef:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00124f5:	85 c0                	test   eax,eax
c00124f7:	74 20                	je     c0012519 <File::read(unsigned long long, void*, int*)+0x49>
c00124f9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00124fd:	74 21                	je     c0012520 <File::read(unsigned long long, void*, int*)+0x50>
c00124ff:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012501:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012505:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c001250b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001250f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012513:	5b                   	pop    ebx
c0012514:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012517:	ff e0                	jmp    eax
c0012519:	b8 0b 00 00 00       	mov    eax,0xb
c001251e:	eb 05                	jmp    c0012525 <File::read(unsigned long long, void*, int*)+0x55>
c0012520:	b8 05 00 00 00       	mov    eax,0x5
c0012525:	5b                   	pop    ebx
c0012526:	c3                   	ret    
c0012527:	90                   	nop

c0012528 <File::write(unsigned long long, void*, int*)>:
c0012528:	53                   	push   ebx
c0012529:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001252d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012531:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012538:	3c 19                	cmp    al,0x19
c001253a:	77 35                	ja     c0012571 <File::write(unsigned long long, void*, int*)+0x49>
c001253c:	8b 04 85 00 c3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3d00]
c0012543:	85 c0                	test   eax,eax
c0012545:	74 2a                	je     c0012571 <File::write(unsigned long long, void*, int*)+0x49>
c0012547:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001254d:	85 c0                	test   eax,eax
c001254f:	74 20                	je     c0012571 <File::write(unsigned long long, void*, int*)+0x49>
c0012551:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012555:	74 21                	je     c0012578 <File::write(unsigned long long, void*, int*)+0x50>
c0012557:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012559:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001255d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012563:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012567:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001256b:	5b                   	pop    ebx
c001256c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c001256f:	ff e0                	jmp    eax
c0012571:	b8 0b 00 00 00       	mov    eax,0xb
c0012576:	eb 05                	jmp    c001257d <File::write(unsigned long long, void*, int*)+0x55>
c0012578:	b8 05 00 00 00       	mov    eax,0x5
c001257d:	5b                   	pop    ebx
c001257e:	c3                   	ret    
c001257f:	90                   	nop

c0012580 <Directory::read(unsigned long long, void*, int*)>:
c0012580:	53                   	push   ebx
c0012581:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012585:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012589:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012590:	3c 19                	cmp    al,0x19
c0012592:	77 35                	ja     c00125c9 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012594:	8b 04 85 00 c3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3d00]
c001259b:	85 c0                	test   eax,eax
c001259d:	74 2a                	je     c00125c9 <Directory::read(unsigned long long, void*, int*)+0x49>
c001259f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00125a5:	85 c0                	test   eax,eax
c00125a7:	74 20                	je     c00125c9 <Directory::read(unsigned long long, void*, int*)+0x49>
c00125a9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00125ad:	74 21                	je     c00125d0 <Directory::read(unsigned long long, void*, int*)+0x50>
c00125af:	8b 08                	mov    ecx,DWORD PTR [eax]
c00125b1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00125b5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00125bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00125bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00125c3:	5b                   	pop    ebx
c00125c4:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c00125c7:	ff e0                	jmp    eax
c00125c9:	b8 0b 00 00 00       	mov    eax,0xb
c00125ce:	eb 05                	jmp    c00125d5 <Directory::read(unsigned long long, void*, int*)+0x55>
c00125d0:	b8 05 00 00 00       	mov    eax,0x5
c00125d5:	5b                   	pop    ebx
c00125d6:	c3                   	ret    
c00125d7:	90                   	nop

c00125d8 <Directory::write(unsigned long long, void*, int*)>:
c00125d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125dc:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c00125e3:	b8 0b 00 00 00       	mov    eax,0xb
c00125e8:	80 fa 19             	cmp    dl,0x19
c00125eb:	77 18                	ja     c0012605 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00125ed:	8b 14 95 00 c3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3d00]
c00125f4:	85 d2                	test   edx,edx
c00125f6:	74 0d                	je     c0012605 <Directory::write(unsigned long long, void*, int*)+0x2d>
c00125f8:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c00125ff:	19 c0                	sbb    eax,eax
c0012601:	83 e0 0a             	and    eax,0xa
c0012604:	40                   	inc    eax
c0012605:	c3                   	ret    

c0012606 <File::isAtty()>:
c0012606:	31 c0                	xor    eax,eax
c0012608:	c3                   	ret    
c0012609:	90                   	nop

c001260a <Directory::isAtty()>:
c001260a:	31 c0                	xor    eax,eax
c001260c:	c3                   	ret    
c001260d:	90                   	nop

c001260e <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001260e:	b8 0a 00 00 00       	mov    eax,0xa
c0012613:	c3                   	ret    

c0012614 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012614:	b8 0a 00 00 00       	mov    eax,0xa
c0012619:	c3                   	ret    

c001261a <File::~File()>:
c001261a:	83 ec 0c             	sub    esp,0xc
c001261d:	ba a8 98 03 c0       	mov    edx,0xc00398a8
c0012622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012626:	89 10                	mov    DWORD PTR [eax],edx
c0012628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001262c:	83 ec 0c             	sub    esp,0xc
c001262f:	50                   	push   eax
c0012630:	e8 0d eb ff ff       	call   c0011142 <UnixFile::~UnixFile()>
c0012635:	83 c4 10             	add    esp,0x10
c0012638:	90                   	nop
c0012639:	83 c4 0c             	add    esp,0xc
c001263c:	c3                   	ret    
c001263d:	90                   	nop

c001263e <File::~File()>:
c001263e:	83 ec 0c             	sub    esp,0xc
c0012641:	83 ec 0c             	sub    esp,0xc
c0012644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012648:	e8 cd ff ff ff       	call   c001261a <File::~File()>
c001264d:	83 c4 10             	add    esp,0x10
c0012650:	83 ec 08             	sub    esp,0x8
c0012653:	68 14 01 00 00       	push   0x114
c0012658:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001265c:	e8 60 fe ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c0012661:	83 c4 10             	add    esp,0x10
c0012664:	83 c4 0c             	add    esp,0xc
c0012667:	c3                   	ret    

c0012668 <Directory::~Directory()>:
c0012668:	83 ec 0c             	sub    esp,0xc
c001266b:	ba c4 98 03 c0       	mov    edx,0xc00398c4
c0012670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012674:	89 10                	mov    DWORD PTR [eax],edx
c0012676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001267a:	83 ec 0c             	sub    esp,0xc
c001267d:	50                   	push   eax
c001267e:	e8 bf ea ff ff       	call   c0011142 <UnixFile::~UnixFile()>
c0012683:	83 c4 10             	add    esp,0x10
c0012686:	90                   	nop
c0012687:	83 c4 0c             	add    esp,0xc
c001268a:	c3                   	ret    
c001268b:	90                   	nop

c001268c <Directory::~Directory()>:
c001268c:	83 ec 0c             	sub    esp,0xc
c001268f:	83 ec 0c             	sub    esp,0xc
c0012692:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012696:	e8 cd ff ff ff       	call   c0012668 <Directory::~Directory()>
c001269b:	83 c4 10             	add    esp,0x10
c001269e:	83 ec 08             	sub    esp,0x8
c00126a1:	68 14 01 00 00       	push   0x114
c00126a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126aa:	e8 12 fe ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c00126af:	83 c4 10             	add    esp,0x10
c00126b2:	83 c4 0c             	add    esp,0xc
c00126b5:	c3                   	ret    

c00126b6 <Filesystem::Filesystem()>:
c00126b6:	ba 44 98 03 c0       	mov    edx,0xc0039844
c00126bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126bf:	89 10                	mov    DWORD PTR [eax],edx
c00126c1:	8b 15 60 be 03 c0    	mov    edx,DWORD PTR ds:0xc003be60
c00126c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126cb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00126ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126d2:	a3 60 be 03 c0       	mov    ds:0xc003be60,eax
c00126d7:	90                   	nop
c00126d8:	c3                   	ret    
c00126d9:	90                   	nop

c00126da <Filesystem::~Filesystem()>:
c00126da:	ba 44 98 03 c0       	mov    edx,0xc0039844
c00126df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126e3:	89 10                	mov    DWORD PTR [eax],edx
c00126e5:	90                   	nop
c00126e6:	c3                   	ret    
c00126e7:	90                   	nop

c00126e8 <Filesystem::~Filesystem()>:
c00126e8:	83 ec 0c             	sub    esp,0xc
c00126eb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00126ef:	e8 e6 ff ff ff       	call   c00126da <Filesystem::~Filesystem()>
c00126f4:	83 c4 04             	add    esp,0x4
c00126f7:	83 ec 08             	sub    esp,0x8
c00126fa:	6a 08                	push   0x8
c00126fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012700:	e8 bc fd ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c0012705:	83 c4 10             	add    esp,0x10
c0012708:	83 c4 0c             	add    esp,0xc
c001270b:	c3                   	ret    

c001270c <initVFS()>:
c001270c:	83 ec 18             	sub    esp,0x18
c001270f:	6a 08                	push   0x8
c0012711:	e8 9c fd ff ff       	call   c00124b2 <operator new(unsigned long)>
c0012716:	89 04 24             	mov    DWORD PTR [esp],eax
c0012719:	e8 f4 70 00 00       	call   c0019812 <FAT::FAT()>
c001271e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012725:	e8 88 fd ff ff       	call   c00124b2 <operator new(unsigned long)>
c001272a:	89 04 24             	mov    DWORD PTR [esp],eax
c001272d:	e8 ea 82 00 00       	call   c001aa1c <ISO9660::ISO9660()>
c0012732:	83 c4 1c             	add    esp,0x1c
c0012735:	c3                   	ret    

c0012736 <standardiseFiles(char*, char const*, char const*)>:
c0012736:	55                   	push   ebp
c0012737:	57                   	push   edi
c0012738:	56                   	push   esi
c0012739:	53                   	push   ebx
c001273a:	81 ec 10 04 00 00    	sub    esp,0x410
c0012740:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012747:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c001274e:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012755:	68 00 04 00 00       	push   0x400
c001275a:	6a 00                	push   0x0
c001275c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012760:	56                   	push   esi
c0012761:	e8 72 df fe ff       	call   c00006d8 <memset>
c0012766:	83 c4 10             	add    esp,0x10
c0012769:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c001276d:	75 0b                	jne    c001277a <standardiseFiles(char*, char const*, char const*)+0x44>
c001276f:	50                   	push   eax
c0012770:	50                   	push   eax
c0012771:	57                   	push   edi
c0012772:	56                   	push   esi
c0012773:	e8 7c e0 fe ff       	call   c00007f4 <strcpy>
c0012778:	eb 41                	jmp    c00127bb <standardiseFiles(char*, char const*, char const*)+0x85>
c001277a:	8a 07                	mov    al,BYTE PTR [edi]
c001277c:	3c 5c                	cmp    al,0x5c
c001277e:	74 04                	je     c0012784 <standardiseFiles(char*, char const*, char const*)+0x4e>
c0012780:	3c 2f                	cmp    al,0x2f
c0012782:	75 18                	jne    c001279c <standardiseFiles(char*, char const*, char const*)+0x66>
c0012784:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012787:	3c 60                	cmp    al,0x60
c0012789:	7e 03                	jle    c001278e <standardiseFiles(char*, char const*, char const*)+0x58>
c001278b:	83 e8 20             	sub    eax,0x20
c001278e:	88 04 24             	mov    BYTE PTR [esp],al
c0012791:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012798:	50                   	push   eax
c0012799:	50                   	push   eax
c001279a:	eb 18                	jmp    c00127b4 <standardiseFiles(char*, char const*, char const*)+0x7e>
c001279c:	50                   	push   eax
c001279d:	50                   	push   eax
c001279e:	55                   	push   ebp
c001279f:	56                   	push   esi
c00127a0:	e8 4f e0 fe ff       	call   c00007f4 <strcpy>
c00127a5:	5a                   	pop    edx
c00127a6:	59                   	pop    ecx
c00127a7:	68 3a 8f 03 c0       	push   0xc0038f3a
c00127ac:	56                   	push   esi
c00127ad:	e8 8f e1 fe ff       	call   c0000941 <strcat>
c00127b2:	5d                   	pop    ebp
c00127b3:	58                   	pop    eax
c00127b4:	57                   	push   edi
c00127b5:	56                   	push   esi
c00127b6:	e8 86 e1 fe ff       	call   c0000941 <strcat>
c00127bb:	83 c4 10             	add    esp,0x10
c00127be:	8a 04 24             	mov    al,BYTE PTR [esp]
c00127c1:	3c 60                	cmp    al,0x60
c00127c3:	7e 03                	jle    c00127c8 <standardiseFiles(char*, char const*, char const*)+0x92>
c00127c5:	83 e8 20             	sub    eax,0x20
c00127c8:	88 04 24             	mov    BYTE PTR [esp],al
c00127cb:	88 03                	mov    BYTE PTR [ebx],al
c00127cd:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c00127d4:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00127da:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00127de:	bf 03 00 00 00       	mov    edi,0x3
c00127e3:	b8 03 00 00 00       	mov    eax,0x3
c00127e8:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00127eb:	84 d2                	test   dl,dl
c00127ed:	0f 84 91 00 00 00    	je     c0012884 <standardiseFiles(char*, char const*, char const*)+0x14e>
c00127f3:	8d 4f 01             	lea    ecx,[edi+0x1]
c00127f6:	80 fa 5c             	cmp    dl,0x5c
c00127f9:	74 05                	je     c0012800 <standardiseFiles(char*, char const*, char const*)+0xca>
c00127fb:	80 fa 2f             	cmp    dl,0x2f
c00127fe:	75 12                	jne    c0012812 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012800:	89 c5                	mov    ebp,eax
c0012802:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012807:	74 09                	je     c0012812 <standardiseFiles(char*, char const*, char const*)+0xdc>
c0012809:	40                   	inc    eax
c001280a:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c001280e:	89 cf                	mov    edi,ecx
c0012810:	eb d6                	jmp    c00127e8 <standardiseFiles(char*, char const*, char const*)+0xb2>
c0012812:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0012817:	75 5b                	jne    c0012874 <standardiseFiles(char*, char const*, char const*)+0x13e>
c0012819:	80 fa 2e             	cmp    dl,0x2e
c001281c:	75 56                	jne    c0012874 <standardiseFiles(char*, char const*, char const*)+0x13e>
c001281e:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c0012822:	74 19                	je     c001283d <standardiseFiles(char*, char const*, char const*)+0x107>
c0012824:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012829:	74 53                	je     c001287e <standardiseFiles(char*, char const*, char const*)+0x148>
c001282b:	89 f9                	mov    ecx,edi
c001282d:	41                   	inc    ecx
c001282e:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0012831:	80 fa 2f             	cmp    dl,0x2f
c0012834:	74 f7                	je     c001282d <standardiseFiles(char*, char const*, char const*)+0xf7>
c0012836:	80 fa 5c             	cmp    dl,0x5c
c0012839:	74 f2                	je     c001282d <standardiseFiles(char*, char const*, char const*)+0xf7>
c001283b:	eb d1                	jmp    c001280e <standardiseFiles(char*, char const*, char const*)+0xd8>
c001283d:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0012842:	74 3a                	je     c001287e <standardiseFiles(char*, char const*, char const*)+0x148>
c0012844:	83 f8 03             	cmp    eax,0x3
c0012847:	74 c5                	je     c001280e <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012849:	41                   	inc    ecx
c001284a:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001284d:	80 fa 2f             	cmp    dl,0x2f
c0012850:	74 f7                	je     c0012849 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012852:	80 fa 5c             	cmp    dl,0x5c
c0012855:	74 f2                	je     c0012849 <standardiseFiles(char*, char const*, char const*)+0x113>
c0012857:	48                   	dec    eax
c0012858:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001285c:	75 06                	jne    c0012864 <standardiseFiles(char*, char const*, char const*)+0x12e>
c001285e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012862:	eb f3                	jmp    c0012857 <standardiseFiles(char*, char const*, char const*)+0x121>
c0012864:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0012868:	74 07                	je     c0012871 <standardiseFiles(char*, char const*, char const*)+0x13b>
c001286a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001286e:	48                   	dec    eax
c001286f:	eb f3                	jmp    c0012864 <standardiseFiles(char*, char const*, char const*)+0x12e>
c0012871:	40                   	inc    eax
c0012872:	eb 9a                	jmp    c001280e <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012874:	80 fa 2f             	cmp    dl,0x2f
c0012877:	74 95                	je     c001280e <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012879:	80 fa 5c             	cmp    dl,0x5c
c001287c:	74 90                	je     c001280e <standardiseFiles(char*, char const*, char const*)+0xd8>
c001287e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0012881:	40                   	inc    eax
c0012882:	eb 8a                	jmp    c001280e <standardiseFiles(char*, char const*, char const*)+0xd8>
c0012884:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0012888:	83 ec 0c             	sub    esp,0xc
c001288b:	53                   	push   ebx
c001288c:	e8 70 de fe ff       	call   c0000701 <strlen>
c0012891:	83 c4 10             	add    esp,0x10
c0012894:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0012899:	75 26                	jne    c00128c1 <standardiseFiles(char*, char const*, char const*)+0x18b>
c001289b:	83 ec 0c             	sub    esp,0xc
c001289e:	53                   	push   ebx
c001289f:	e8 5d de fe ff       	call   c0000701 <strlen>
c00128a4:	83 c4 10             	add    esp,0x10
c00128a7:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c00128ac:	74 26                	je     c00128d4 <standardiseFiles(char*, char const*, char const*)+0x19e>
c00128ae:	83 ec 0c             	sub    esp,0xc
c00128b1:	53                   	push   ebx
c00128b2:	e8 4a de fe ff       	call   c0000701 <strlen>
c00128b7:	83 c4 10             	add    esp,0x10
c00128ba:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00128bf:	eb c7                	jmp    c0012888 <standardiseFiles(char*, char const*, char const*)+0x152>
c00128c1:	83 ec 0c             	sub    esp,0xc
c00128c4:	53                   	push   ebx
c00128c5:	e8 37 de fe ff       	call   c0000701 <strlen>
c00128ca:	83 c4 10             	add    esp,0x10
c00128cd:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00128d2:	74 c7                	je     c001289b <standardiseFiles(char*, char const*, char const*)+0x165>
c00128d4:	81 c4 0c 04 00 00    	add    esp,0x40c
c00128da:	5b                   	pop    ebx
c00128db:	5e                   	pop    esi
c00128dc:	5f                   	pop    edi
c00128dd:	5d                   	pop    ebp
c00128de:	c3                   	ret    
c00128df:	90                   	nop

c00128e0 <File::File(char const*, Process*)>:
c00128e0:	83 ec 0c             	sub    esp,0xc
c00128e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128e7:	83 ec 08             	sub    esp,0x8
c00128ea:	6a 00                	push   0x0
c00128ec:	50                   	push   eax
c00128ed:	e8 ec e7 ff ff       	call   c00110de <UnixFile::UnixFile(int)>
c00128f2:	83 c4 10             	add    esp,0x10
c00128f5:	ba a8 98 03 c0       	mov    edx,0xc00398a8
c00128fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128fe:	89 10                	mov    DWORD PTR [eax],edx
c0012900:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012904:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001290a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001290e:	83 c0 0d             	add    eax,0xd
c0012911:	83 ec 04             	sub    esp,0x4
c0012914:	52                   	push   edx
c0012915:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012919:	50                   	push   eax
c001291a:	e8 17 fe ff ff       	call   c0012736 <standardiseFiles(char*, char const*, char const*)>
c001291f:	83 c4 10             	add    esp,0x10
c0012922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012926:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012929:	8d 50 bf             	lea    edx,[eax-0x41]
c001292c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012930:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001293a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c001293e:	90                   	nop
c001293f:	83 c4 0c             	add    esp,0xc
c0012942:	c3                   	ret    
c0012943:	90                   	nop

c0012944 <File::open(FileOpenMode)>:
c0012944:	53                   	push   ebx
c0012945:	b8 0b 00 00 00       	mov    eax,0xb
c001294a:	83 ec 08             	sub    esp,0x8
c001294d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012951:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012958:	80 fa 19             	cmp    dl,0x19
c001295b:	77 40                	ja     c001299d <File::open(FileOpenMode)+0x59>
c001295d:	8b 14 95 00 c3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3d00]
c0012964:	85 d2                	test   edx,edx
c0012966:	74 35                	je     c001299d <File::open(FileOpenMode)+0x59>
c0012968:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001296e:	85 d2                	test   edx,edx
c0012970:	74 2b                	je     c001299d <File::open(FileOpenMode)+0x59>
c0012972:	b8 06 00 00 00       	mov    eax,0x6
c0012977:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c001297b:	75 20                	jne    c001299d <File::open(FileOpenMode)+0x59>
c001297d:	8b 02                	mov    eax,DWORD PTR [edx]
c001297f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012985:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012989:	51                   	push   ecx
c001298a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c001298d:	51                   	push   ecx
c001298e:	52                   	push   edx
c001298f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0012992:	83 c4 10             	add    esp,0x10
c0012995:	85 c0                	test   eax,eax
c0012997:	75 04                	jne    c001299d <File::open(FileOpenMode)+0x59>
c0012999:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001299d:	83 c4 08             	add    esp,0x8
c00129a0:	5b                   	pop    ebx
c00129a1:	c3                   	ret    

c00129a2 <File::close()>:
c00129a2:	53                   	push   ebx
c00129a3:	b8 0b 00 00 00       	mov    eax,0xb
c00129a8:	83 ec 08             	sub    esp,0x8
c00129ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00129af:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00129b6:	80 fa 19             	cmp    dl,0x19
c00129b9:	77 41                	ja     c00129fc <File::close()+0x5a>
c00129bb:	8b 1c 95 00 c3 03 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffc3d00]
c00129c2:	85 db                	test   ebx,ebx
c00129c4:	74 36                	je     c00129fc <File::close()+0x5a>
c00129c6:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00129cd:	74 2d                	je     c00129fc <File::close()+0x5a>
c00129cf:	b8 05 00 00 00       	mov    eax,0x5
c00129d4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00129d8:	74 22                	je     c00129fc <File::close()+0x5a>
c00129da:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00129de:	8b 04 95 00 c3 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc3d00]
c00129e5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00129eb:	53                   	push   ebx
c00129ec:	53                   	push   ebx
c00129ed:	8b 10                	mov    edx,DWORD PTR [eax]
c00129ef:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00129f5:	50                   	push   eax
c00129f6:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00129f9:	83 c4 10             	add    esp,0x10
c00129fc:	83 c4 08             	add    esp,0x8
c00129ff:	5b                   	pop    ebx
c0012a00:	c3                   	ret    
c0012a01:	90                   	nop

c0012a02 <File::seek(unsigned long long)>:
c0012a02:	56                   	push   esi
c0012a03:	53                   	push   ebx
c0012a04:	b8 0b 00 00 00       	mov    eax,0xb
c0012a09:	51                   	push   ecx
c0012a0a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012a0e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012a12:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0012a19:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012a1d:	80 fa 19             	cmp    dl,0x19
c0012a20:	77 31                	ja     c0012a53 <File::seek(unsigned long long)+0x51>
c0012a22:	8b 14 95 00 c3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3d00]
c0012a29:	85 d2                	test   edx,edx
c0012a2b:	74 26                	je     c0012a53 <File::seek(unsigned long long)+0x51>
c0012a2d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012a33:	85 d2                	test   edx,edx
c0012a35:	74 1c                	je     c0012a53 <File::seek(unsigned long long)+0x51>
c0012a37:	b8 05 00 00 00       	mov    eax,0x5
c0012a3c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0012a40:	74 11                	je     c0012a53 <File::seek(unsigned long long)+0x51>
c0012a42:	8b 02                	mov    eax,DWORD PTR [edx]
c0012a44:	53                   	push   ebx
c0012a45:	51                   	push   ecx
c0012a46:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0012a4c:	52                   	push   edx
c0012a4d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012a50:	83 c4 10             	add    esp,0x10
c0012a53:	5a                   	pop    edx
c0012a54:	5b                   	pop    ebx
c0012a55:	5e                   	pop    esi
c0012a56:	c3                   	ret    
c0012a57:	90                   	nop

c0012a58 <File::tell(unsigned long long*)>:
c0012a58:	83 ec 0c             	sub    esp,0xc
c0012a5b:	b8 0b 00 00 00       	mov    eax,0xb
c0012a60:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012a64:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012a6b:	80 fa 19             	cmp    dl,0x19
c0012a6e:	77 34                	ja     c0012aa4 <File::tell(unsigned long long*)+0x4c>
c0012a70:	8b 14 95 00 c3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3d00]
c0012a77:	85 d2                	test   edx,edx
c0012a79:	74 29                	je     c0012aa4 <File::tell(unsigned long long*)+0x4c>
c0012a7b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012a81:	85 d2                	test   edx,edx
c0012a83:	74 1f                	je     c0012aa4 <File::tell(unsigned long long*)+0x4c>
c0012a85:	b8 05 00 00 00       	mov    eax,0x5
c0012a8a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012a8e:	74 14                	je     c0012aa4 <File::tell(unsigned long long*)+0x4c>
c0012a90:	50                   	push   eax
c0012a91:	8b 02                	mov    eax,DWORD PTR [edx]
c0012a93:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a97:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012a9d:	52                   	push   edx
c0012a9e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0012aa1:	83 c4 10             	add    esp,0x10
c0012aa4:	83 c4 0c             	add    esp,0xc
c0012aa7:	c3                   	ret    

c0012aa8 <File::rewind()>:
c0012aa8:	83 ec 10             	sub    esp,0x10
c0012aab:	6a 00                	push   0x0
c0012aad:	6a 00                	push   0x0
c0012aaf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ab3:	e8 4a ff ff ff       	call   c0012a02 <File::seek(unsigned long long)>
c0012ab8:	83 c4 1c             	add    esp,0x1c
c0012abb:	c3                   	ret    

c0012abc <File::unlink()>:
c0012abc:	83 ec 0c             	sub    esp,0xc
c0012abf:	b8 0b 00 00 00       	mov    eax,0xb
c0012ac4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ac8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012acf:	80 f9 19             	cmp    cl,0x19
c0012ad2:	77 2f                	ja     c0012b03 <File::unlink()+0x47>
c0012ad4:	8b 0c 8d 00 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3d00]
c0012adb:	85 c9                	test   ecx,ecx
c0012add:	74 24                	je     c0012b03 <File::unlink()+0x47>
c0012adf:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012ae5:	85 c9                	test   ecx,ecx
c0012ae7:	74 1a                	je     c0012b03 <File::unlink()+0x47>
c0012ae9:	b8 06 00 00 00       	mov    eax,0x6
c0012aee:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012af2:	75 0f                	jne    c0012b03 <File::unlink()+0x47>
c0012af4:	83 c2 0d             	add    edx,0xd
c0012af7:	50                   	push   eax
c0012af8:	50                   	push   eax
c0012af9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012afb:	52                   	push   edx
c0012afc:	51                   	push   ecx
c0012afd:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012b00:	83 c4 10             	add    esp,0x10
c0012b03:	83 c4 0c             	add    esp,0xc
c0012b06:	c3                   	ret    
c0012b07:	90                   	nop

c0012b08 <File::rename(char const*)>:
c0012b08:	83 ec 0c             	sub    esp,0xc
c0012b0b:	b8 0b 00 00 00       	mov    eax,0xb
c0012b10:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012b14:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012b1b:	80 f9 19             	cmp    cl,0x19
c0012b1e:	77 32                	ja     c0012b52 <File::rename(char const*)+0x4a>
c0012b20:	8b 0c 8d 00 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3d00]
c0012b27:	85 c9                	test   ecx,ecx
c0012b29:	74 27                	je     c0012b52 <File::rename(char const*)+0x4a>
c0012b2b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012b31:	85 c9                	test   ecx,ecx
c0012b33:	74 1d                	je     c0012b52 <File::rename(char const*)+0x4a>
c0012b35:	b8 06 00 00 00       	mov    eax,0x6
c0012b3a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012b3e:	75 12                	jne    c0012b52 <File::rename(char const*)+0x4a>
c0012b40:	83 c2 0d             	add    edx,0xd
c0012b43:	50                   	push   eax
c0012b44:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012b46:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012b4a:	52                   	push   edx
c0012b4b:	51                   	push   ecx
c0012b4c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012b4f:	83 c4 10             	add    esp,0x10
c0012b52:	83 c4 0c             	add    esp,0xc
c0012b55:	c3                   	ret    

c0012b56 <File::chfatattr(unsigned char, unsigned char)>:
c0012b56:	57                   	push   edi
c0012b57:	b8 0b 00 00 00       	mov    eax,0xb
c0012b5c:	56                   	push   esi
c0012b5d:	53                   	push   ebx
c0012b5e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012b62:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012b66:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012b6d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012b71:	80 f9 19             	cmp    cl,0x19
c0012b74:	77 37                	ja     c0012bad <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012b76:	8b 0c 8d 00 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3d00]
c0012b7d:	85 c9                	test   ecx,ecx
c0012b7f:	74 2c                	je     c0012bad <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012b81:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012b87:	85 c9                	test   ecx,ecx
c0012b89:	74 22                	je     c0012bad <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012b8b:	b8 06 00 00 00       	mov    eax,0x6
c0012b90:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012b94:	75 17                	jne    c0012bad <File::chfatattr(unsigned char, unsigned char)+0x57>
c0012b96:	8b 39                	mov    edi,DWORD PTR [ecx]
c0012b98:	89 f0                	mov    eax,esi
c0012b9a:	83 c2 0d             	add    edx,0xd
c0012b9d:	0f b6 f0             	movzx  esi,al
c0012ba0:	0f b6 db             	movzx  ebx,bl
c0012ba3:	56                   	push   esi
c0012ba4:	53                   	push   ebx
c0012ba5:	52                   	push   edx
c0012ba6:	51                   	push   ecx
c0012ba7:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0012baa:	83 c4 10             	add    esp,0x10
c0012bad:	5b                   	pop    ebx
c0012bae:	5e                   	pop    esi
c0012baf:	5f                   	pop    edi
c0012bb0:	c3                   	ret    
c0012bb1:	90                   	nop

c0012bb2 <File::exists()>:
c0012bb2:	83 ec 0c             	sub    esp,0xc
c0012bb5:	31 c0                	xor    eax,eax
c0012bb7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012bbb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012bc2:	80 f9 19             	cmp    cl,0x19
c0012bc5:	77 24                	ja     c0012beb <File::exists()+0x39>
c0012bc7:	8b 0c 8d 00 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3d00]
c0012bce:	85 c9                	test   ecx,ecx
c0012bd0:	74 19                	je     c0012beb <File::exists()+0x39>
c0012bd2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012bd8:	85 c9                	test   ecx,ecx
c0012bda:	74 0f                	je     c0012beb <File::exists()+0x39>
c0012bdc:	83 c2 0d             	add    edx,0xd
c0012bdf:	50                   	push   eax
c0012be0:	50                   	push   eax
c0012be1:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012be3:	52                   	push   edx
c0012be4:	51                   	push   ecx
c0012be5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012be8:	83 c4 10             	add    esp,0x10
c0012beb:	83 c4 0c             	add    esp,0xc
c0012bee:	c3                   	ret    
c0012bef:	90                   	nop

c0012bf0 <File::stat(unsigned long long*, bool*)>:
c0012bf0:	56                   	push   esi
c0012bf1:	53                   	push   ebx
c0012bf2:	50                   	push   eax
c0012bf3:	b8 0b 00 00 00       	mov    eax,0xb
c0012bf8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012bfc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012c00:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012c07:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012c0b:	80 f9 19             	cmp    cl,0x19
c0012c0e:	77 3d                	ja     c0012c4d <File::stat(unsigned long long*, bool*)+0x5d>
c0012c10:	8b 0c 8d 00 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3d00]
c0012c17:	85 c9                	test   ecx,ecx
c0012c19:	74 32                	je     c0012c4d <File::stat(unsigned long long*, bool*)+0x5d>
c0012c1b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012c21:	85 c9                	test   ecx,ecx
c0012c23:	74 28                	je     c0012c4d <File::stat(unsigned long long*, bool*)+0x5d>
c0012c25:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012c27:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012c2b:	74 13                	je     c0012c40 <File::stat(unsigned long long*, bool*)+0x50>
c0012c2d:	83 ec 04             	sub    esp,0x4
c0012c30:	56                   	push   esi
c0012c31:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0012c37:	51                   	push   ecx
c0012c38:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0012c3b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0012c3e:	eb 0a                	jmp    c0012c4a <File::stat(unsigned long long*, bool*)+0x5a>
c0012c40:	53                   	push   ebx
c0012c41:	83 c2 0d             	add    edx,0xd
c0012c44:	56                   	push   esi
c0012c45:	52                   	push   edx
c0012c46:	51                   	push   ecx
c0012c47:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0012c4a:	83 c4 10             	add    esp,0x10
c0012c4d:	5a                   	pop    edx
c0012c4e:	5b                   	pop    ebx
c0012c4f:	5e                   	pop    esi
c0012c50:	c3                   	ret    

c0012c51 <getcwd(Process*, char*, int)>:
c0012c51:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c55:	31 c0                	xor    eax,eax
c0012c57:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012c5a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012c5e:	7d 15                	jge    c0012c75 <getcwd(Process*, char*, int)+0x24>
c0012c60:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c64:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012c6b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012c6e:	84 c9                	test   cl,cl
c0012c70:	74 06                	je     c0012c78 <getcwd(Process*, char*, int)+0x27>
c0012c72:	40                   	inc    eax
c0012c73:	eb e2                	jmp    c0012c57 <getcwd(Process*, char*, int)+0x6>
c0012c75:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012c78:	31 c0                	xor    eax,eax
c0012c7a:	c3                   	ret    

c0012c7b <setcwd(Process*, char*)>:
c0012c7b:	55                   	push   ebp
c0012c7c:	57                   	push   edi
c0012c7d:	56                   	push   esi
c0012c7e:	53                   	push   ebx
c0012c7f:	81 ec 20 02 00 00    	sub    esp,0x220
c0012c85:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0012c8c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0012c92:	57                   	push   edi
c0012c93:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0012c9a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0012c9e:	56                   	push   esi
c0012c9f:	e8 92 fa ff ff       	call   c0012736 <standardiseFiles(char*, char const*, char const*)>
c0012ca4:	89 34 24             	mov    DWORD PTR [esp],esi
c0012ca7:	e8 55 da fe ff       	call   c0000701 <strlen>
c0012cac:	83 c4 10             	add    esp,0x10
c0012caf:	83 f8 02             	cmp    eax,0x2
c0012cb2:	77 17                	ja     c0012ccb <setcwd(Process*, char*)+0x50>
c0012cb4:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0012cb9:	83 e8 41             	sub    eax,0x41
c0012cbc:	83 f8 19             	cmp    eax,0x19
c0012cbf:	76 24                	jbe    c0012ce5 <setcwd(Process*, char*)+0x6a>
c0012cc1:	b8 03 00 00 00       	mov    eax,0x3
c0012cc6:	e9 cb 00 00 00       	jmp    c0012d96 <setcwd(Process*, char*)+0x11b>
c0012ccb:	83 ec 0c             	sub    esp,0xc
c0012cce:	56                   	push   esi
c0012ccf:	e8 2d da fe ff       	call   c0000701 <strlen>
c0012cd4:	83 c4 10             	add    esp,0x10
c0012cd7:	83 f8 03             	cmp    eax,0x3
c0012cda:	75 33                	jne    c0012d0f <setcwd(Process*, char*)+0x94>
c0012cdc:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0012ce1:	75 2c                	jne    c0012d0f <setcwd(Process*, char*)+0x94>
c0012ce3:	eb cf                	jmp    c0012cb4 <setcwd(Process*, char*)+0x39>
c0012ce5:	8b 14 85 00 c3 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc3d00]
c0012cec:	b8 05 00 00 00       	mov    eax,0x5
c0012cf1:	85 d2                	test   edx,edx
c0012cf3:	0f 84 9d 00 00 00    	je     c0012d96 <setcwd(Process*, char*)+0x11b>
c0012cf9:	b8 06 00 00 00       	mov    eax,0x6
c0012cfe:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012d05:	0f 84 8b 00 00 00    	je     c0012d96 <setcwd(Process*, char*)+0x11b>
c0012d0b:	51                   	push   ecx
c0012d0c:	51                   	push   ecx
c0012d0d:	eb 7b                	jmp    c0012d8a <setcwd(Process*, char*)+0x10f>
c0012d0f:	83 ec 0c             	sub    esp,0xc
c0012d12:	68 14 01 00 00       	push   0x114
c0012d17:	e8 96 f7 ff ff       	call   c00124b2 <operator new(unsigned long)>
c0012d1c:	83 c4 0c             	add    esp,0xc
c0012d1f:	89 c3                	mov    ebx,eax
c0012d21:	55                   	push   ebp
c0012d22:	56                   	push   esi
c0012d23:	50                   	push   eax
c0012d24:	e8 b7 fb ff ff       	call   c00128e0 <File::File(char const*, Process*)>
c0012d29:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c0012d2e:	83 c4 0c             	add    esp,0xc
c0012d31:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0012d35:	50                   	push   eax
c0012d36:	8d 44 24 10          	lea    eax,[esp+0x10]
c0012d3a:	50                   	push   eax
c0012d3b:	53                   	push   ebx
c0012d3c:	e8 af fe ff ff       	call   c0012bf0 <File::stat(unsigned long long*, bool*)>
c0012d41:	83 c4 10             	add    esp,0x10
c0012d44:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012d46:	83 f8 02             	cmp    eax,0x2
c0012d49:	75 09                	jne    c0012d54 <setcwd(Process*, char*)+0xd9>
c0012d4b:	83 ec 0c             	sub    esp,0xc
c0012d4e:	53                   	push   ebx
c0012d4f:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012d52:	eb 0d                	jmp    c0012d61 <setcwd(Process*, char*)+0xe6>
c0012d54:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012d57:	85 c0                	test   eax,eax
c0012d59:	74 10                	je     c0012d6b <setcwd(Process*, char*)+0xf0>
c0012d5b:	83 ec 0c             	sub    esp,0xc
c0012d5e:	53                   	push   ebx
c0012d5f:	ff d2                	call   edx
c0012d61:	83 c4 10             	add    esp,0x10
c0012d64:	b8 01 00 00 00       	mov    eax,0x1
c0012d69:	eb 2b                	jmp    c0012d96 <setcwd(Process*, char*)+0x11b>
c0012d6b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c0012d70:	75 10                	jne    c0012d82 <setcwd(Process*, char*)+0x107>
c0012d72:	83 ec 0c             	sub    esp,0xc
c0012d75:	53                   	push   ebx
c0012d76:	ff d2                	call   edx
c0012d78:	83 c4 10             	add    esp,0x10
c0012d7b:	b8 02 00 00 00       	mov    eax,0x2
c0012d80:	eb 14                	jmp    c0012d96 <setcwd(Process*, char*)+0x11b>
c0012d82:	83 ec 0c             	sub    esp,0xc
c0012d85:	53                   	push   ebx
c0012d86:	ff d2                	call   edx
c0012d88:	58                   	pop    eax
c0012d89:	5a                   	pop    edx
c0012d8a:	56                   	push   esi
c0012d8b:	57                   	push   edi
c0012d8c:	e8 63 da fe ff       	call   c00007f4 <strcpy>
c0012d91:	83 c4 10             	add    esp,0x10
c0012d94:	31 c0                	xor    eax,eax
c0012d96:	81 c4 1c 02 00 00    	add    esp,0x21c
c0012d9c:	5b                   	pop    ebx
c0012d9d:	5e                   	pop    esi
c0012d9e:	5f                   	pop    edi
c0012d9f:	5d                   	pop    ebp
c0012da0:	c3                   	ret    
c0012da1:	90                   	nop

c0012da2 <Directory::Directory(char const*, Process*)>:
c0012da2:	83 ec 0c             	sub    esp,0xc
c0012da5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012da9:	83 ec 08             	sub    esp,0x8
c0012dac:	6a 00                	push   0x0
c0012dae:	50                   	push   eax
c0012daf:	e8 2a e3 ff ff       	call   c00110de <UnixFile::UnixFile(int)>
c0012db4:	83 c4 10             	add    esp,0x10
c0012db7:	ba c4 98 03 c0       	mov    edx,0xc00398c4
c0012dbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dc0:	89 10                	mov    DWORD PTR [eax],edx
c0012dc2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012dc6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dd0:	83 c0 0d             	add    eax,0xd
c0012dd3:	83 ec 04             	sub    esp,0x4
c0012dd6:	52                   	push   edx
c0012dd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ddb:	50                   	push   eax
c0012ddc:	e8 55 f9 ff ff       	call   c0012736 <standardiseFiles(char*, char const*, char const*)>
c0012de1:	83 c4 10             	add    esp,0x10
c0012de4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012de8:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0012deb:	8d 50 bf             	lea    edx,[eax-0x41]
c0012dee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012df2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0012df8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dfc:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0012e00:	90                   	nop
c0012e01:	83 c4 0c             	add    esp,0xc
c0012e04:	c3                   	ret    
c0012e05:	90                   	nop

c0012e06 <Directory::open()>:
c0012e06:	53                   	push   ebx
c0012e07:	b8 0b 00 00 00       	mov    eax,0xb
c0012e0c:	83 ec 08             	sub    esp,0x8
c0012e0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012e13:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0012e1a:	80 fa 19             	cmp    dl,0x19
c0012e1d:	77 3d                	ja     c0012e5c <Directory::open()+0x56>
c0012e1f:	8b 14 95 00 c3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3d00]
c0012e26:	85 d2                	test   edx,edx
c0012e28:	74 32                	je     c0012e5c <Directory::open()+0x56>
c0012e2a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0012e30:	85 d2                	test   edx,edx
c0012e32:	74 28                	je     c0012e5c <Directory::open()+0x56>
c0012e34:	b8 06 00 00 00       	mov    eax,0x6
c0012e39:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0012e3d:	75 1d                	jne    c0012e5c <Directory::open()+0x56>
c0012e3f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0012e45:	50                   	push   eax
c0012e46:	8b 02                	mov    eax,DWORD PTR [edx]
c0012e48:	51                   	push   ecx
c0012e49:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0012e4c:	51                   	push   ecx
c0012e4d:	52                   	push   edx
c0012e4e:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0012e51:	83 c4 10             	add    esp,0x10
c0012e54:	85 c0                	test   eax,eax
c0012e56:	75 04                	jne    c0012e5c <Directory::open()+0x56>
c0012e58:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0012e5c:	83 c4 08             	add    esp,0x8
c0012e5f:	5b                   	pop    ebx
c0012e60:	c3                   	ret    
c0012e61:	90                   	nop

c0012e62 <Directory::close()>:
c0012e62:	53                   	push   ebx
c0012e63:	b8 0b 00 00 00       	mov    eax,0xb
c0012e68:	83 ec 08             	sub    esp,0x8
c0012e6b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012e6f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012e76:	80 fa 19             	cmp    dl,0x19
c0012e79:	77 41                	ja     c0012ebc <Directory::close()+0x5a>
c0012e7b:	8b 1c 95 00 c3 03 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffc3d00]
c0012e82:	85 db                	test   ebx,ebx
c0012e84:	74 36                	je     c0012ebc <Directory::close()+0x5a>
c0012e86:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0012e8d:	74 2d                	je     c0012ebc <Directory::close()+0x5a>
c0012e8f:	b8 05 00 00 00       	mov    eax,0x5
c0012e94:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0012e98:	74 22                	je     c0012ebc <Directory::close()+0x5a>
c0012e9a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0012e9e:	8b 04 95 00 c3 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffc3d00]
c0012ea5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012eab:	53                   	push   ebx
c0012eac:	53                   	push   ebx
c0012ead:	8b 10                	mov    edx,DWORD PTR [eax]
c0012eaf:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0012eb5:	50                   	push   eax
c0012eb6:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0012eb9:	83 c4 10             	add    esp,0x10
c0012ebc:	83 c4 08             	add    esp,0x8
c0012ebf:	5b                   	pop    ebx
c0012ec0:	c3                   	ret    
c0012ec1:	90                   	nop

c0012ec2 <Directory::unlink()>:
c0012ec2:	83 ec 0c             	sub    esp,0xc
c0012ec5:	b8 0b 00 00 00       	mov    eax,0xb
c0012eca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ece:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ed5:	80 f9 19             	cmp    cl,0x19
c0012ed8:	77 2f                	ja     c0012f09 <Directory::unlink()+0x47>
c0012eda:	8b 0c 8d 00 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3d00]
c0012ee1:	85 c9                	test   ecx,ecx
c0012ee3:	74 24                	je     c0012f09 <Directory::unlink()+0x47>
c0012ee5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012eeb:	85 c9                	test   ecx,ecx
c0012eed:	74 1a                	je     c0012f09 <Directory::unlink()+0x47>
c0012eef:	b8 06 00 00 00       	mov    eax,0x6
c0012ef4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012ef8:	75 0f                	jne    c0012f09 <Directory::unlink()+0x47>
c0012efa:	83 c2 0d             	add    edx,0xd
c0012efd:	50                   	push   eax
c0012efe:	50                   	push   eax
c0012eff:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f01:	52                   	push   edx
c0012f02:	51                   	push   ecx
c0012f03:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0012f06:	83 c4 10             	add    esp,0x10
c0012f09:	83 c4 0c             	add    esp,0xc
c0012f0c:	c3                   	ret    
c0012f0d:	90                   	nop

c0012f0e <Directory::rename(char const*)>:
c0012f0e:	83 ec 0c             	sub    esp,0xc
c0012f11:	b8 0b 00 00 00       	mov    eax,0xb
c0012f16:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f1a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f21:	80 f9 19             	cmp    cl,0x19
c0012f24:	77 32                	ja     c0012f58 <Directory::rename(char const*)+0x4a>
c0012f26:	8b 0c 8d 00 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3d00]
c0012f2d:	85 c9                	test   ecx,ecx
c0012f2f:	74 27                	je     c0012f58 <Directory::rename(char const*)+0x4a>
c0012f31:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f37:	85 c9                	test   ecx,ecx
c0012f39:	74 1d                	je     c0012f58 <Directory::rename(char const*)+0x4a>
c0012f3b:	b8 06 00 00 00       	mov    eax,0x6
c0012f40:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f44:	75 12                	jne    c0012f58 <Directory::rename(char const*)+0x4a>
c0012f46:	83 c2 0d             	add    edx,0xd
c0012f49:	50                   	push   eax
c0012f4a:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f4c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f50:	52                   	push   edx
c0012f51:	51                   	push   ecx
c0012f52:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0012f55:	83 c4 10             	add    esp,0x10
c0012f58:	83 c4 0c             	add    esp,0xc
c0012f5b:	c3                   	ret    

c0012f5c <Directory::exists()>:
c0012f5c:	83 ec 0c             	sub    esp,0xc
c0012f5f:	31 c0                	xor    eax,eax
c0012f61:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012f65:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012f6c:	80 f9 19             	cmp    cl,0x19
c0012f6f:	77 24                	ja     c0012f95 <Directory::exists()+0x39>
c0012f71:	8b 0c 8d 00 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3d00]
c0012f78:	85 c9                	test   ecx,ecx
c0012f7a:	74 19                	je     c0012f95 <Directory::exists()+0x39>
c0012f7c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0012f82:	85 c9                	test   ecx,ecx
c0012f84:	74 0f                	je     c0012f95 <Directory::exists()+0x39>
c0012f86:	83 c2 0d             	add    edx,0xd
c0012f89:	50                   	push   eax
c0012f8a:	50                   	push   eax
c0012f8b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012f8d:	52                   	push   edx
c0012f8e:	51                   	push   ecx
c0012f8f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0012f92:	83 c4 10             	add    esp,0x10
c0012f95:	83 c4 0c             	add    esp,0xc
c0012f98:	c3                   	ret    
c0012f99:	90                   	nop

c0012f9a <Directory::read(dirent*)>:
c0012f9a:	83 ec 1c             	sub    esp,0x1c
c0012f9d:	b8 0b 00 00 00       	mov    eax,0xb
c0012fa2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012fa6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0012fad:	80 fa 19             	cmp    dl,0x19
c0012fb0:	77 30                	ja     c0012fe2 <Directory::read(dirent*)+0x48>
c0012fb2:	8b 14 95 00 c3 03 c0 	mov    edx,DWORD PTR [edx*4-0x3ffc3d00]
c0012fb9:	85 d2                	test   edx,edx
c0012fbb:	74 25                	je     c0012fe2 <Directory::read(dirent*)+0x48>
c0012fbd:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0012fc4:	74 1c                	je     c0012fe2 <Directory::read(dirent*)+0x48>
c0012fc6:	83 ec 0c             	sub    esp,0xc
c0012fc9:	8b 01                	mov    eax,DWORD PTR [ecx]
c0012fcb:	8d 54 24 18          	lea    edx,[esp+0x18]
c0012fcf:	52                   	push   edx
c0012fd0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012fd4:	6a 00                	push   0x0
c0012fd6:	68 10 01 00 00       	push   0x110
c0012fdb:	51                   	push   ecx
c0012fdc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012fdf:	83 c4 20             	add    esp,0x20
c0012fe2:	83 c4 1c             	add    esp,0x1c
c0012fe5:	c3                   	ret    

c0012fe6 <Directory::create()>:
c0012fe6:	83 ec 0c             	sub    esp,0xc
c0012fe9:	b8 0b 00 00 00       	mov    eax,0xb
c0012fee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012ff2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0012ff9:	80 f9 19             	cmp    cl,0x19
c0012ffc:	77 2f                	ja     c001302d <Directory::create()+0x47>
c0012ffe:	8b 0c 8d 00 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3d00]
c0013005:	85 c9                	test   ecx,ecx
c0013007:	74 24                	je     c001302d <Directory::create()+0x47>
c0013009:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001300f:	85 c9                	test   ecx,ecx
c0013011:	74 1a                	je     c001302d <Directory::create()+0x47>
c0013013:	b8 06 00 00 00       	mov    eax,0x6
c0013018:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001301c:	75 0f                	jne    c001302d <Directory::create()+0x47>
c001301e:	83 c2 0d             	add    edx,0xd
c0013021:	50                   	push   eax
c0013022:	50                   	push   eax
c0013023:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013025:	52                   	push   edx
c0013026:	51                   	push   ecx
c0013027:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c001302a:	83 c4 10             	add    esp,0x10
c001302d:	83 c4 0c             	add    esp,0xc
c0013030:	c3                   	ret    
c0013031:	90                   	nop

c0013032 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013032:	b8 0a 00 00 00       	mov    eax,0xa
c0013037:	c3                   	ret    

c0013038 <Bus::Bus(char const*)>:
c0013038:	83 ec 0c             	sub    esp,0xc
c001303b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001303f:	83 ec 08             	sub    esp,0x8
c0013042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013046:	50                   	push   eax
c0013047:	e8 60 09 00 00       	call   c00139ac <Device::Device(char const*)>
c001304c:	83 c4 10             	add    esp,0x10
c001304f:	ba e0 98 03 c0       	mov    edx,0xc00398e0
c0013054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013058:	89 10                	mov    DWORD PTR [eax],edx
c001305a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001305e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013068:	90                   	nop
c0013069:	83 c4 0c             	add    esp,0xc
c001306c:	c3                   	ret    
c001306d:	90                   	nop

c001306e <Bus::~Bus()>:
c001306e:	83 ec 0c             	sub    esp,0xc
c0013071:	ba e0 98 03 c0       	mov    edx,0xc00398e0
c0013076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001307a:	89 10                	mov    DWORD PTR [eax],edx
c001307c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013080:	83 ec 0c             	sub    esp,0xc
c0013083:	50                   	push   eax
c0013084:	e8 d5 05 00 00       	call   c001365e <Device::~Device()>
c0013089:	83 c4 10             	add    esp,0x10
c001308c:	90                   	nop
c001308d:	83 c4 0c             	add    esp,0xc
c0013090:	c3                   	ret    
c0013091:	90                   	nop

c0013092 <Bus::~Bus()>:
c0013092:	83 ec 0c             	sub    esp,0xc
c0013095:	83 ec 0c             	sub    esp,0xc
c0013098:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001309c:	e8 cd ff ff ff       	call   c001306e <Bus::~Bus()>
c00130a1:	83 c4 10             	add    esp,0x10
c00130a4:	83 ec 08             	sub    esp,0x8
c00130a7:	68 58 01 00 00       	push   0x158
c00130ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130b0:	e8 0c f4 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c00130b5:	83 c4 10             	add    esp,0x10
c00130b8:	83 c4 0c             	add    esp,0xc
c00130bb:	c3                   	ret    

c00130bc <Buzzer::Buzzer(char const*)>:
c00130bc:	83 ec 0c             	sub    esp,0xc
c00130bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130c3:	83 ec 08             	sub    esp,0x8
c00130c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130ca:	50                   	push   eax
c00130cb:	e8 dc 08 00 00       	call   c00139ac <Device::Device(char const*)>
c00130d0:	83 c4 10             	add    esp,0x10
c00130d3:	ba 0c 99 03 c0       	mov    edx,0xc003990c
c00130d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130dc:	89 10                	mov    DWORD PTR [eax],edx
c00130de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130e2:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00130ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130f0:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00130fa:	90                   	nop
c00130fb:	83 c4 0c             	add    esp,0xc
c00130fe:	c3                   	ret    
c00130ff:	90                   	nop

c0013100 <Buzzer::~Buzzer()>:
c0013100:	83 ec 0c             	sub    esp,0xc
c0013103:	ba 0c 99 03 c0       	mov    edx,0xc003990c
c0013108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001310c:	89 10                	mov    DWORD PTR [eax],edx
c001310e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013112:	83 ec 0c             	sub    esp,0xc
c0013115:	50                   	push   eax
c0013116:	e8 43 05 00 00       	call   c001365e <Device::~Device()>
c001311b:	83 c4 10             	add    esp,0x10
c001311e:	90                   	nop
c001311f:	83 c4 0c             	add    esp,0xc
c0013122:	c3                   	ret    
c0013123:	90                   	nop

c0013124 <Buzzer::~Buzzer()>:
c0013124:	83 ec 0c             	sub    esp,0xc
c0013127:	83 ec 0c             	sub    esp,0xc
c001312a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001312e:	e8 cd ff ff ff       	call   c0013100 <Buzzer::~Buzzer()>
c0013133:	83 c4 10             	add    esp,0x10
c0013136:	83 ec 08             	sub    esp,0x8
c0013139:	68 5c 01 00 00       	push   0x15c
c001313e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013142:	e8 7a f3 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c0013147:	83 c4 10             	add    esp,0x10
c001314a:	83 c4 0c             	add    esp,0xc
c001314d:	c3                   	ret    

c001314e <Buzzer::stop()>:
c001314e:	83 ec 14             	sub    esp,0x14
c0013151:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013155:	8b 10                	mov    edx,DWORD PTR [eax]
c0013157:	6a 00                	push   0x0
c0013159:	50                   	push   eax
c001315a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001315d:	83 c4 1c             	add    esp,0x1c
c0013160:	c3                   	ret    

c0013161 <beepThread(void*)>:
c0013161:	53                   	push   ebx
c0013162:	83 ec 08             	sub    esp,0x8
c0013165:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013169:	e8 38 b2 ff ff       	call   c000e3a6 <unlockScheduler()>
c001316e:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013173:	52                   	push   edx
c0013174:	52                   	push   edx
c0013175:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001317b:	52                   	push   edx
c001317c:	50                   	push   eax
c001317d:	e8 db b8 ff ff       	call   c000ea5d <nanoSleep(unsigned long long)>
c0013182:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013185:	e8 c4 ff ff ff       	call   c001314e <Buzzer::stop()>
c001318a:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013192:	83 c4 18             	add    esp,0x18
c0013195:	5b                   	pop    ebx
c0013196:	e9 08 b8 ff ff       	jmp    c000e9a3 <blockTask(TaskState)>
c001319b:	90                   	nop

c001319c <Buzzer::beep(int, int, bool)>:
c001319c:	57                   	push   edi
c001319d:	56                   	push   esi
c001319e:	53                   	push   ebx
c001319f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00131a3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00131a7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00131ab:	52                   	push   edx
c00131ac:	52                   	push   edx
c00131ad:	8b 06                	mov    eax,DWORD PTR [esi]
c00131af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131b3:	56                   	push   esi
c00131b4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00131b7:	83 c4 10             	add    esp,0x10
c00131ba:	89 f8                	mov    eax,edi
c00131bc:	84 c0                	test   al,al
c00131be:	74 1f                	je     c00131df <Buzzer::beep(int, int, bool)+0x43>
c00131c0:	50                   	push   eax
c00131c1:	50                   	push   eax
c00131c2:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c00131c8:	99                   	cdq    
c00131c9:	52                   	push   edx
c00131ca:	50                   	push   eax
c00131cb:	e8 8d b8 ff ff       	call   c000ea5d <nanoSleep(unsigned long long)>
c00131d0:	83 c4 10             	add    esp,0x10
c00131d3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00131d7:	5b                   	pop    ebx
c00131d8:	5e                   	pop    esi
c00131d9:	5f                   	pop    edi
c00131da:	e9 6f ff ff ff       	jmp    c001314e <Buzzer::stop()>
c00131df:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00131e5:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c00131ea:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00131f2:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00131f6:	c7 44 24 14 61 31 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013161
c00131fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013202:	5b                   	pop    ebx
c0013203:	5e                   	pop    esi
c0013204:	5f                   	pop    edi
c0013205:	e9 c4 b2 ff ff       	jmp    c000e4ce <Process::createThread(void (*)(void*), void*, int)>

c001320a <loadClockSettings()>:
c001320a:	c7 05 6c be 03 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc003be6c,0xa
c0013214:	c6 05 69 be 03 c0 00 	mov    BYTE PTR ds:0xc003be69,0x0
c001321b:	c6 05 68 be 03 c0 01 	mov    BYTE PTR ds:0xc003be68,0x1
c0013222:	c3                   	ret    
c0013223:	90                   	nop

c0013224 <Clock::Clock(char const*)>:
c0013224:	83 ec 0c             	sub    esp,0xc
c0013227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001322b:	83 ec 08             	sub    esp,0x8
c001322e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013232:	50                   	push   eax
c0013233:	e8 74 07 00 00       	call   c00139ac <Device::Device(char const*)>
c0013238:	83 c4 10             	add    esp,0x10
c001323b:	ba 3c 99 03 c0       	mov    edx,0xc003993c
c0013240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013244:	89 10                	mov    DWORD PTR [eax],edx
c0013246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001324a:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013254:	90                   	nop
c0013255:	83 c4 0c             	add    esp,0xc
c0013258:	c3                   	ret    
c0013259:	90                   	nop

c001325a <Clock::~Clock()>:
c001325a:	83 ec 0c             	sub    esp,0xc
c001325d:	ba 3c 99 03 c0       	mov    edx,0xc003993c
c0013262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013266:	89 10                	mov    DWORD PTR [eax],edx
c0013268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001326c:	83 ec 0c             	sub    esp,0xc
c001326f:	50                   	push   eax
c0013270:	e8 e9 03 00 00       	call   c001365e <Device::~Device()>
c0013275:	83 c4 10             	add    esp,0x10
c0013278:	90                   	nop
c0013279:	83 c4 0c             	add    esp,0xc
c001327c:	c3                   	ret    
c001327d:	90                   	nop

c001327e <Clock::~Clock()>:
c001327e:	83 ec 0c             	sub    esp,0xc
c0013281:	83 ec 0c             	sub    esp,0xc
c0013284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013288:	e8 cd ff ff ff       	call   c001325a <Clock::~Clock()>
c001328d:	83 c4 10             	add    esp,0x10
c0013290:	83 ec 08             	sub    esp,0x8
c0013293:	68 58 01 00 00       	push   0x158
c0013298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001329c:	e8 20 f2 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c00132a1:	83 c4 10             	add    esp,0x10
c00132a4:	83 c4 0c             	add    esp,0xc
c00132a7:	c3                   	ret    

c00132a8 <Clock::timeInSecondsLocal()>:
c00132a8:	53                   	push   ebx
c00132a9:	83 ec 14             	sub    esp,0x14
c00132ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132b0:	8b 10                	mov    edx,DWORD PTR [eax]
c00132b2:	50                   	push   eax
c00132b3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00132b6:	0f b6 0d 68 be 03 c0 	movzx  ecx,BYTE PTR ds:0xc003be68
c00132bd:	03 0d 6c be 03 c0    	add    ecx,DWORD PTR ds:0xc003be6c
c00132c3:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00132c9:	89 cb                	mov    ebx,ecx
c00132cb:	c1 fb 1f             	sar    ebx,0x1f
c00132ce:	01 c8                	add    eax,ecx
c00132d0:	11 da                	adc    edx,ebx
c00132d2:	83 c4 10             	add    esp,0x10
c00132d5:	31 c9                	xor    ecx,ecx
c00132d7:	80 3d 69 be 03 c0 00 	cmp    BYTE PTR ds:0xc003be69,0x0
c00132de:	74 05                	je     c00132e5 <Clock::timeInSecondsLocal()+0x3d>
c00132e0:	b9 08 07 00 00       	mov    ecx,0x708
c00132e5:	31 db                	xor    ebx,ebx
c00132e7:	01 c8                	add    eax,ecx
c00132e9:	11 da                	adc    edx,ebx
c00132eb:	83 c4 08             	add    esp,0x8
c00132ee:	5b                   	pop    ebx
c00132ef:	c3                   	ret    

c00132f0 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00132f0:	57                   	push   edi
c00132f1:	56                   	push   esi
c00132f2:	53                   	push   ebx
c00132f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00132f7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00132fb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132fd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013301:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013304:	0f b6 05 68 be 03 c0 	movzx  eax,BYTE PTR ds:0xc003be68
c001330b:	03 05 6c be 03 c0    	add    eax,DWORD PTR ds:0xc003be6c
c0013311:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013317:	99                   	cdq    
c0013318:	29 c6                	sub    esi,eax
c001331a:	19 d7                	sbb    edi,edx
c001331c:	89 f0                	mov    eax,esi
c001331e:	89 fa                	mov    edx,edi
c0013320:	31 f6                	xor    esi,esi
c0013322:	80 3d 69 be 03 c0 00 	cmp    BYTE PTR ds:0xc003be69,0x0
c0013329:	74 05                	je     c0013330 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c001332b:	be 08 07 00 00       	mov    esi,0x708
c0013330:	31 ff                	xor    edi,edi
c0013332:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013336:	29 f0                	sub    eax,esi
c0013338:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001333c:	19 fa                	sbb    edx,edi
c001333e:	89 d8                	mov    eax,ebx
c0013340:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013344:	5b                   	pop    ebx
c0013345:	5e                   	pop    esi
c0013346:	5f                   	pop    edi
c0013347:	ff e0                	jmp    eax

c0013349 <datetimeToSeconds(datetime_t)>:
c0013349:	55                   	push   ebp
c001334a:	57                   	push   edi
c001334b:	56                   	push   esi
c001334c:	53                   	push   ebx
c001334d:	83 ec 14             	sub    esp,0x14
c0013350:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013354:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013358:	89 d3                	mov    ebx,edx
c001335a:	0f b6 c6             	movzx  eax,dh
c001335d:	c1 eb 10             	shr    ebx,0x10
c0013360:	48                   	dec    eax
c0013361:	66 81 eb 6c 07       	sub    bx,0x76c
c0013366:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001336a:	0f b6 f5             	movzx  esi,ch
c001336d:	89 cf                	mov    edi,ecx
c001336f:	6b f6 3c             	imul   esi,esi,0x3c
c0013372:	c1 ef 10             	shr    edi,0x10
c0013375:	0f b6 c9             	movzx  ecx,cl
c0013378:	89 f8                	mov    eax,edi
c001337a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013380:	0f b6 f8             	movzx  edi,al
c0013383:	0f b6 d2             	movzx  edx,dl
c0013386:	01 fe                	add    esi,edi
c0013388:	01 f1                	add    ecx,esi
c001338a:	0f b7 f3             	movzx  esi,bx
c001338d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013391:	c1 f9 1f             	sar    ecx,0x1f
c0013394:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013399:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001339d:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00133a2:	8b 0c 8d 80 99 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc6680]
c00133a9:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c00133ad:	76 29                	jbe    c00133d8 <datetimeToSeconds(datetime_t)+0x8f>
c00133af:	f6 c3 03             	test   bl,0x3
c00133b2:	75 24                	jne    c00133d8 <datetimeToSeconds(datetime_t)+0x8f>
c00133b4:	31 d2                	xor    edx,edx
c00133b6:	bf 64 00 00 00       	mov    edi,0x64
c00133bb:	89 d8                	mov    eax,ebx
c00133bd:	66 f7 f7             	div    di
c00133c0:	66 85 d2             	test   dx,dx
c00133c3:	75 12                	jne    c00133d7 <datetimeToSeconds(datetime_t)+0x8e>
c00133c5:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c00133cb:	bf 90 01 00 00       	mov    edi,0x190
c00133d0:	99                   	cdq    
c00133d1:	f7 ff                	idiv   edi
c00133d3:	85 d2                	test   edx,edx
c00133d5:	75 01                	jne    c00133d8 <datetimeToSeconds(datetime_t)+0x8f>
c00133d7:	41                   	inc    ecx
c00133d8:	66 83 fb 46          	cmp    bx,0x46
c00133dc:	76 45                	jbe    c0013423 <datetimeToSeconds(datetime_t)+0xda>
c00133de:	bb 46 00 00 00       	mov    ebx,0x46
c00133e3:	bf 64 00 00 00       	mov    edi,0x64
c00133e8:	bd 90 01 00 00       	mov    ebp,0x190
c00133ed:	b8 6d 01 00 00       	mov    eax,0x16d
c00133f2:	f6 c3 03             	test   bl,0x3
c00133f5:	75 23                	jne    c001341a <datetimeToSeconds(datetime_t)+0xd1>
c00133f7:	89 d8                	mov    eax,ebx
c00133f9:	99                   	cdq    
c00133fa:	f7 ff                	idiv   edi
c00133fc:	b8 6e 01 00 00       	mov    eax,0x16e
c0013401:	85 d2                	test   edx,edx
c0013403:	75 15                	jne    c001341a <datetimeToSeconds(datetime_t)+0xd1>
c0013405:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c001340b:	99                   	cdq    
c001340c:	f7 fd                	idiv   ebp
c001340e:	83 fa 01             	cmp    edx,0x1
c0013411:	19 c0                	sbb    eax,eax
c0013413:	f7 d0                	not    eax
c0013415:	05 6e 01 00 00       	add    eax,0x16e
c001341a:	01 c1                	add    ecx,eax
c001341c:	43                   	inc    ebx
c001341d:	39 f3                	cmp    ebx,esi
c001341f:	7c cc                	jl     c00133ed <datetimeToSeconds(datetime_t)+0xa4>
c0013421:	eb 35                	jmp    c0013458 <datetimeToSeconds(datetime_t)+0x10f>
c0013423:	74 33                	je     c0013458 <datetimeToSeconds(datetime_t)+0x10f>
c0013425:	b8 45 00 00 00       	mov    eax,0x45
c001342a:	89 c2                	mov    edx,eax
c001342c:	83 e2 03             	and    edx,0x3
c001342f:	39 f0                	cmp    eax,esi
c0013431:	7e 0f                	jle    c0013442 <datetimeToSeconds(datetime_t)+0xf9>
c0013433:	83 fa 01             	cmp    edx,0x1
c0013436:	19 d2                	sbb    edx,edx
c0013438:	48                   	dec    eax
c0013439:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013440:	eb e8                	jmp    c001342a <datetimeToSeconds(datetime_t)+0xe1>
c0013442:	b8 6d 01 00 00       	mov    eax,0x16d
c0013447:	85 d2                	test   edx,edx
c0013449:	75 0b                	jne    c0013456 <datetimeToSeconds(datetime_t)+0x10d>
c001344b:	66 83 fb 01          	cmp    bx,0x1
c001344f:	19 c0                	sbb    eax,eax
c0013451:	05 6e 01 00 00       	add    eax,0x16e
c0013456:	29 c1                	sub    ecx,eax
c0013458:	b8 80 51 01 00       	mov    eax,0x15180
c001345d:	f7 e9                	imul   ecx
c001345f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013463:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013467:	83 c4 14             	add    esp,0x14
c001346a:	5b                   	pop    ebx
c001346b:	5e                   	pop    esi
c001346c:	5f                   	pop    edi
c001346d:	5d                   	pop    ebp
c001346e:	c3                   	ret    
c001346f:	90                   	nop

c0013470 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013470:	57                   	push   edi
c0013471:	56                   	push   esi
c0013472:	53                   	push   ebx
c0013473:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013477:	8b 06                	mov    eax,DWORD PTR [esi]
c0013479:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c001347c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013484:	e8 c0 fe ff ff       	call   c0013349 <datetimeToSeconds(datetime_t)>
c0013489:	59                   	pop    ecx
c001348a:	0f b6 0d 68 be 03 c0 	movzx  ecx,BYTE PTR ds:0xc003be68
c0013491:	5b                   	pop    ebx
c0013492:	03 0d 6c be 03 c0    	add    ecx,DWORD PTR ds:0xc003be6c
c0013498:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001349e:	89 cb                	mov    ebx,ecx
c00134a0:	c1 fb 1f             	sar    ebx,0x1f
c00134a3:	29 c8                	sub    eax,ecx
c00134a5:	19 da                	sbb    edx,ebx
c00134a7:	31 c9                	xor    ecx,ecx
c00134a9:	80 3d 69 be 03 c0 00 	cmp    BYTE PTR ds:0xc003be69,0x0
c00134b0:	74 05                	je     c00134b7 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c00134b2:	b9 08 07 00 00       	mov    ecx,0x708
c00134b7:	31 db                	xor    ebx,ebx
c00134b9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00134bd:	29 c8                	sub    eax,ecx
c00134bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00134c3:	19 da                	sbb    edx,ebx
c00134c5:	89 f8                	mov    eax,edi
c00134c7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00134cb:	5b                   	pop    ebx
c00134cc:	5e                   	pop    esi
c00134cd:	5f                   	pop    edi
c00134ce:	ff e0                	jmp    eax

c00134d0 <secondsToDatetime(unsigned long long)>:
c00134d0:	55                   	push   ebp
c00134d1:	57                   	push   edi
c00134d2:	56                   	push   esi
c00134d3:	53                   	push   ebx
c00134d4:	83 ec 1c             	sub    esp,0x1c
c00134d7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00134db:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00134df:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00134e3:	6a 00                	push   0x0
c00134e5:	68 80 51 01 00       	push   0x15180
c00134ea:	55                   	push   ebp
c00134eb:	57                   	push   edi
c00134ec:	e8 2b b2 00 00       	call   c001e71c <__udivdi3>
c00134f1:	83 c4 10             	add    esp,0x10
c00134f4:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00134fa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00134fe:	6a 00                	push   0x0
c0013500:	68 80 51 01 00       	push   0x15180
c0013505:	55                   	push   ebp
c0013506:	57                   	push   edi
c0013507:	bf 10 0e 00 00       	mov    edi,0xe10
c001350c:	e8 0b b3 00 00       	call   c001e81c <__umoddi3>
c0013511:	83 c4 10             	add    esp,0x10
c0013514:	99                   	cdq    
c0013515:	f7 ff                	idiv   edi
c0013517:	bf 3c 00 00 00       	mov    edi,0x3c
c001351c:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001351f:	89 d0                	mov    eax,edx
c0013521:	99                   	cdq    
c0013522:	f7 ff                	idiv   edi
c0013524:	85 db                	test   ebx,ebx
c0013526:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013529:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001352c:	79 11                	jns    c001353f <secondsToDatetime(unsigned long long)+0x6f>
c001352e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013532:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013538:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001353d:	eb 07                	jmp    c0013546 <secondsToDatetime(unsigned long long)+0x76>
c001353f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013544:	89 d8                	mov    eax,ebx
c0013546:	bf b4 05 00 00       	mov    edi,0x5b4
c001354b:	99                   	cdq    
c001354c:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013551:	f7 f9                	idiv   ecx
c0013553:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013558:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001355c:	31 d2                	xor    edx,edx
c001355e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013566:	01 c3                	add    ebx,eax
c0013568:	89 d8                	mov    eax,ebx
c001356a:	f7 f1                	div    ecx
c001356c:	31 d2                	xor    edx,edx
c001356e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013571:	89 d8                	mov    eax,ebx
c0013573:	f7 f7                	div    edi
c0013575:	31 d2                	xor    edx,edx
c0013577:	29 c1                	sub    ecx,eax
c0013579:	89 d8                	mov    eax,ebx
c001357b:	f7 f5                	div    ebp
c001357d:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013582:	29 c1                	sub    ecx,eax
c0013584:	31 d2                	xor    edx,edx
c0013586:	89 c8                	mov    eax,ecx
c0013588:	f7 f5                	div    ebp
c001358a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001358f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013593:	31 d2                	xor    edx,edx
c0013595:	89 c8                	mov    eax,ecx
c0013597:	f7 f5                	div    ebp
c0013599:	31 d2                	xor    edx,edx
c001359b:	01 c3                	add    ebx,eax
c001359d:	89 c8                	mov    eax,ecx
c001359f:	f7 f7                	div    edi
c00135a1:	bf 99 00 00 00       	mov    edi,0x99
c00135a6:	29 c3                	sub    ebx,eax
c00135a8:	31 d2                	xor    edx,edx
c00135aa:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00135b2:	29 c3                	sub    ebx,eax
c00135b4:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00135b7:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00135ba:	bb 05 00 00 00       	mov    ebx,0x5
c00135bf:	83 c1 02             	add    ecx,0x2
c00135c2:	89 c8                	mov    eax,ecx
c00135c4:	f7 f7                	div    edi
c00135c6:	31 d2                	xor    edx,edx
c00135c8:	89 c7                	mov    edi,eax
c00135ca:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00135d0:	83 c0 02             	add    eax,0x2
c00135d3:	f7 f3                	div    ebx
c00135d5:	89 eb                	mov    ebx,ebp
c00135d7:	29 c3                	sub    ebx,eax
c00135d9:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00135df:	88 1e                	mov    BYTE PTR [esi],bl
c00135e1:	19 c0                	sbb    eax,eax
c00135e3:	31 d2                	xor    edx,edx
c00135e5:	83 e0 0c             	and    eax,0xc
c00135e8:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00135ec:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00135f4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00135f8:	83 f9 01             	cmp    ecx,0x1
c00135fb:	0f 96 c2             	setbe  dl
c00135fe:	41                   	inc    ecx
c00135ff:	01 d0                	add    eax,edx
c0013601:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013604:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013608:	83 c4 1c             	add    esp,0x1c
c001360b:	89 f0                	mov    eax,esi
c001360d:	5b                   	pop    ebx
c001360e:	5e                   	pop    esi
c001360f:	5f                   	pop    edi
c0013610:	5d                   	pop    ebp
c0013611:	c2 04 00             	ret    0x4

c0013614 <Clock::timeInDatetimeLocal()>:
c0013614:	53                   	push   ebx
c0013615:	83 ec 14             	sub    esp,0x14
c0013618:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001361c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013620:	e8 83 fc ff ff       	call   c00132a8 <Clock::timeInSecondsLocal()>
c0013625:	83 c4 0c             	add    esp,0xc
c0013628:	52                   	push   edx
c0013629:	50                   	push   eax
c001362a:	53                   	push   ebx
c001362b:	e8 a0 fe ff ff       	call   c00134d0 <secondsToDatetime(unsigned long long)>
c0013630:	89 d8                	mov    eax,ebx
c0013632:	83 c4 14             	add    esp,0x14
c0013635:	5b                   	pop    ebx
c0013636:	c2 04 00             	ret    0x4
c0013639:	90                   	nop

c001363a <Device::hibernate()>:
c001363a:	c3                   	ret    
c001363b:	90                   	nop

c001363c <Device::wake()>:
c001363c:	c3                   	ret    
c001363d:	90                   	nop

c001363e <Device::detect()>:
c001363e:	c3                   	ret    
c001363f:	90                   	nop

c0013640 <Device::disableLegacy()>:
c0013640:	c3                   	ret    
c0013641:	90                   	nop

c0013642 <Device::powerSaving(PowerSavingLevel)>:
c0013642:	c3                   	ret    
c0013643:	90                   	nop

c0013644 <DriverlessDevice::close(int, int, void*)>:
c0013644:	31 c0                	xor    eax,eax
c0013646:	c3                   	ret    
c0013647:	90                   	nop

c0013648 <DriverlessDevice::detect()>:
c0013648:	c3                   	ret    
c0013649:	90                   	nop

c001364a <DriverlessDevice::open(int, int, void*)>:
c001364a:	83 ec 18             	sub    esp,0x18
c001364d:	68 b0 99 03 c0       	push   0xc00399b0
c0013652:	e8 c9 99 ff ff       	call   c000d020 <panic(char const*)>
c0013657:	83 c8 ff             	or     eax,0xffffffff
c001365a:	83 c4 1c             	add    esp,0x1c
c001365d:	c3                   	ret    

c001365e <Device::~Device()>:
c001365e:	ba d8 99 03 c0       	mov    edx,0xc00399d8
c0013663:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013667:	89 10                	mov    DWORD PTR [eax],edx
c0013669:	90                   	nop
c001366a:	c3                   	ret    
c001366b:	90                   	nop

c001366c <Device::~Device()>:
c001366c:	83 ec 0c             	sub    esp,0xc
c001366f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013673:	e8 e6 ff ff ff       	call   c001365e <Device::~Device()>
c0013678:	83 c4 04             	add    esp,0x4
c001367b:	83 ec 08             	sub    esp,0x8
c001367e:	68 58 01 00 00       	push   0x158
c0013683:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013687:	e8 35 ee ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c001368c:	83 c4 10             	add    esp,0x10
c001368f:	83 c4 0c             	add    esp,0xc
c0013692:	c3                   	ret    
c0013693:	90                   	nop

c0013694 <Device::findAndLoadDriver()>:
c0013694:	c3                   	ret    
c0013695:	90                   	nop

c0013696 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013696:	57                   	push   edi
c0013697:	b9 09 00 00 00       	mov    ecx,0x9
c001369c:	56                   	push   esi
c001369d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00136a1:	8d 74 24 10          	lea    esi,[esp+0x10]
c00136a5:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c00136af:	81 c7 18 01 00 00    	add    edi,0x118
c00136b5:	fc                   	cld    
c00136b6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00136b8:	5e                   	pop    esi
c00136b9:	5f                   	pop    edi
c00136ba:	c3                   	ret    
c00136bb:	90                   	nop

c00136bc <Device::preOpenACPI(void*, char*, char*)>:
c00136bc:	56                   	push   esi
c00136bd:	53                   	push   ebx
c00136be:	83 ec 08             	sub    esp,0x8
c00136c1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00136c5:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00136c9:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c00136d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00136d7:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c00136dd:	6a 1e                	push   0x1e
c00136df:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c00136e5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00136e9:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00136ef:	50                   	push   eax
c00136f0:	e8 6c cf fe ff       	call   c0000661 <memcpy>
c00136f5:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00136f9:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00136fd:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013705:	83 c4 14             	add    esp,0x14
c0013708:	5b                   	pop    ebx
c0013709:	5e                   	pop    esi
c001370a:	e9 52 cf fe ff       	jmp    c0000661 <memcpy>
c001370f:	90                   	nop

c0013710 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013710:	55                   	push   ebp
c0013711:	57                   	push   edi
c0013712:	56                   	push   esi
c0013713:	53                   	push   ebx
c0013714:	83 ec 0c             	sub    esp,0xc
c0013717:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001371b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001371f:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013723:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013727:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c001372c:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013733:	75 0b                	jne    c0013740 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c0013735:	8b 00                	mov    eax,DWORD PTR [eax]
c0013737:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001373b:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001373e:	eb 24                	jmp    c0013764 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c0013740:	e8 73 3a 00 00       	call   c00171b8 <thisCPU()>
c0013745:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001374b:	8b 10                	mov    edx,DWORD PTR [eax]
c001374d:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0013751:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0013755:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0013759:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001375d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013761:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013764:	83 c4 0c             	add    esp,0xc
c0013767:	5b                   	pop    ebx
c0013768:	5e                   	pop    esi
c0013769:	5f                   	pop    edi
c001376a:	5d                   	pop    ebp
c001376b:	ff e0                	jmp    eax
c001376d:	90                   	nop

c001376e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001376e:	57                   	push   edi
c001376f:	56                   	push   esi
c0013770:	53                   	push   ebx
c0013771:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013775:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013779:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001377d:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0013782:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013789:	75 0b                	jne    c0013796 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c001378b:	8b 00                	mov    eax,DWORD PTR [eax]
c001378d:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0013791:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013794:	eb 20                	jmp    c00137b6 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0013796:	e8 1d 3a 00 00       	call   c00171b8 <thisCPU()>
c001379b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00137a1:	8b 10                	mov    edx,DWORD PTR [eax]
c00137a3:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00137a7:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00137ab:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00137af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00137b3:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c00137b6:	5b                   	pop    ebx
c00137b7:	5e                   	pop    esi
c00137b8:	5f                   	pop    edi
c00137b9:	ff e0                	jmp    eax
c00137bb:	90                   	nop

c00137bc <Device::addChild(Device*)>:
c00137bc:	53                   	push   ebx
c00137bd:	83 ec 08             	sub    esp,0x8
c00137c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137c8:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00137ce:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00137d4:	8b 13                	mov    edx,DWORD PTR [ebx]
c00137d6:	85 d2                	test   edx,edx
c00137d8:	74 04                	je     c00137de <Device::addChild(Device*)+0x22>
c00137da:	89 d3                	mov    ebx,edx
c00137dc:	eb f6                	jmp    c00137d4 <Device::addChild(Device*)+0x18>
c00137de:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00137e1:	83 ec 0c             	sub    esp,0xc
c00137e4:	6a 08                	push   0x8
c00137e6:	e8 c7 ec ff ff       	call   c00124b2 <operator new(unsigned long)>
c00137eb:	89 03                	mov    DWORD PTR [ebx],eax
c00137ed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00137f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00137fa:	83 c4 18             	add    esp,0x18
c00137fd:	5b                   	pop    ebx
c00137fe:	c3                   	ret    
c00137ff:	90                   	nop

c0013800 <Device::removeAllChildren()>:
c0013800:	56                   	push   esi
c0013801:	53                   	push   ebx
c0013802:	52                   	push   edx
c0013803:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013807:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c001380d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013810:	74 17                	je     c0013829 <Device::removeAllChildren()+0x29>
c0013812:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013815:	85 c0                	test   eax,eax
c0013817:	74 0c                	je     c0013825 <Device::removeAllChildren()+0x25>
c0013819:	83 ec 0c             	sub    esp,0xc
c001381c:	8b 10                	mov    edx,DWORD PTR [eax]
c001381e:	50                   	push   eax
c001381f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013822:	83 c4 10             	add    esp,0x10
c0013825:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013827:	eb e4                	jmp    c001380d <Device::removeAllChildren()+0xd>
c0013829:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001382f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013835:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001383b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013842:	58                   	pop    eax
c0013843:	5b                   	pop    ebx
c0013844:	5e                   	pop    esi
c0013845:	c3                   	ret    

c0013846 <Device::hibernateAll()>:
c0013846:	53                   	push   ebx
c0013847:	83 ec 14             	sub    esp,0x14
c001384a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001384e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013850:	53                   	push   ebx
c0013851:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013854:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001385a:	83 c4 10             	add    esp,0x10
c001385d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013860:	74 0f                	je     c0013871 <Device::hibernateAll()+0x2b>
c0013862:	83 ec 0c             	sub    esp,0xc
c0013865:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013868:	e8 d9 ff ff ff       	call   c0013846 <Device::hibernateAll()>
c001386d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001386f:	eb e9                	jmp    c001385a <Device::hibernateAll()+0x14>
c0013871:	83 c4 08             	add    esp,0x8
c0013874:	5b                   	pop    ebx
c0013875:	c3                   	ret    

c0013876 <Device::wakeAll()>:
c0013876:	53                   	push   ebx
c0013877:	83 ec 14             	sub    esp,0x14
c001387a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001387e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013880:	53                   	push   ebx
c0013881:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0013884:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001388a:	83 c4 10             	add    esp,0x10
c001388d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013890:	74 0f                	je     c00138a1 <Device::wakeAll()+0x2b>
c0013892:	83 ec 0c             	sub    esp,0xc
c0013895:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013898:	e8 d9 ff ff ff       	call   c0013876 <Device::wakeAll()>
c001389d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001389f:	eb e9                	jmp    c001388a <Device::wakeAll()+0x14>
c00138a1:	83 c4 08             	add    esp,0x8
c00138a4:	5b                   	pop    ebx
c00138a5:	c3                   	ret    

c00138a6 <Device::detectAll()>:
c00138a6:	53                   	push   ebx
c00138a7:	83 ec 14             	sub    esp,0x14
c00138aa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00138ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138b0:	53                   	push   ebx
c00138b1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00138b4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00138ba:	83 c4 10             	add    esp,0x10
c00138bd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00138c0:	74 0f                	je     c00138d1 <Device::detectAll()+0x2b>
c00138c2:	83 ec 0c             	sub    esp,0xc
c00138c5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00138c8:	e8 d9 ff ff ff       	call   c00138a6 <Device::detectAll()>
c00138cd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00138cf:	eb e9                	jmp    c00138ba <Device::detectAll()+0x14>
c00138d1:	83 c4 08             	add    esp,0x8
c00138d4:	5b                   	pop    ebx
c00138d5:	c3                   	ret    

c00138d6 <Device::disableLegacyAll()>:
c00138d6:	53                   	push   ebx
c00138d7:	83 ec 14             	sub    esp,0x14
c00138da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00138de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138e0:	53                   	push   ebx
c00138e1:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00138e4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00138ea:	83 c4 10             	add    esp,0x10
c00138ed:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00138f0:	74 0f                	je     c0013901 <Device::disableLegacyAll()+0x2b>
c00138f2:	83 ec 0c             	sub    esp,0xc
c00138f5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00138f8:	e8 d9 ff ff ff       	call   c00138d6 <Device::disableLegacyAll()>
c00138fd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00138ff:	eb e9                	jmp    c00138ea <Device::disableLegacyAll()+0x14>
c0013901:	83 c4 08             	add    esp,0x8
c0013904:	5b                   	pop    ebx
c0013905:	c3                   	ret    

c0013906 <Device::loadDriversForAll()>:
c0013906:	53                   	push   ebx
c0013907:	83 ec 08             	sub    esp,0x8
c001390a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001390e:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013914:	8b 18                	mov    ebx,DWORD PTR [eax]
c0013916:	85 db                	test   ebx,ebx
c0013918:	74 12                	je     c001392c <Device::loadDriversForAll()+0x26>
c001391a:	83 ec 0c             	sub    esp,0xc
c001391d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0013920:	e8 e1 ff ff ff       	call   c0013906 <Device::loadDriversForAll()>
c0013925:	83 c4 10             	add    esp,0x10
c0013928:	89 d8                	mov    eax,ebx
c001392a:	eb e8                	jmp    c0013914 <Device::loadDriversForAll()+0xe>
c001392c:	83 c4 08             	add    esp,0x8
c001392f:	5b                   	pop    ebx
c0013930:	c3                   	ret    
c0013931:	90                   	nop

c0013932 <Device::closeAll()>:
c0013932:	53                   	push   ebx
c0013933:	83 ec 08             	sub    esp,0x8
c0013936:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001393a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001393c:	6a 00                	push   0x0
c001393e:	6a 00                	push   0x0
c0013940:	6a 00                	push   0x0
c0013942:	53                   	push   ebx
c0013943:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013946:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001394c:	83 c4 10             	add    esp,0x10
c001394f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013952:	74 0f                	je     c0013963 <Device::closeAll()+0x31>
c0013954:	83 ec 0c             	sub    esp,0xc
c0013957:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001395a:	e8 d3 ff ff ff       	call   c0013932 <Device::closeAll()>
c001395f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013961:	eb e9                	jmp    c001394c <Device::closeAll()+0x1a>
c0013963:	83 c4 08             	add    esp,0x8
c0013966:	5b                   	pop    ebx
c0013967:	c3                   	ret    

c0013968 <Device::powerSavingAll(PowerSavingLevel)>:
c0013968:	56                   	push   esi
c0013969:	53                   	push   ebx
c001396a:	83 ec 0c             	sub    esp,0xc
c001396d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013971:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013975:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013977:	56                   	push   esi
c0013978:	53                   	push   ebx
c0013979:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001397c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013982:	83 c4 10             	add    esp,0x10
c0013985:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013988:	74 0f                	je     c0013999 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001398a:	52                   	push   edx
c001398b:	52                   	push   edx
c001398c:	56                   	push   esi
c001398d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013990:	e8 d3 ff ff ff       	call   c0013968 <Device::powerSavingAll(PowerSavingLevel)>
c0013995:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013997:	eb e9                	jmp    c0013982 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0013999:	58                   	pop    eax
c001399a:	5b                   	pop    ebx
c001399b:	5e                   	pop    esi
c001399c:	c3                   	ret    
c001399d:	90                   	nop

c001399e <Device::setName(char const*)>:
c001399e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00139a6:	e9 49 ce fe ff       	jmp    c00007f4 <strcpy>
c00139ab:	90                   	nop

c00139ac <Device::Device(char const*)>:
c00139ac:	83 ec 0c             	sub    esp,0xc
c00139af:	ba d8 99 03 c0       	mov    edx,0xc00399d8
c00139b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139b8:	89 10                	mov    DWORD PTR [eax],edx
c00139ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139be:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00139c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139cc:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00139d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139da:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00139e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139e8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00139f2:	83 ec 08             	sub    esp,0x8
c00139f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139f9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00139fd:	e8 9c ff ff ff       	call   c001399e <Device::setName(char const*)>
c0013a02:	83 c4 10             	add    esp,0x10
c0013a05:	83 ec 0c             	sub    esp,0xc
c0013a08:	6a 08                	push   0x8
c0013a0a:	e8 a3 ea ff ff       	call   c00124b2 <operator new(unsigned long)>
c0013a0f:	83 c4 10             	add    esp,0x10
c0013a12:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013a18:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013a1f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a23:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0013a29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a2d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013a33:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013a39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a3d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0013a43:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013a4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a4e:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0013a55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a59:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0013a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a64:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0013a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a72:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0013a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a80:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0013a8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a8e:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0013a98:	90                   	nop
c0013a99:	83 c4 0c             	add    esp,0xc
c0013a9c:	c3                   	ret    
c0013a9d:	90                   	nop

c0013a9e <Device::getName()>:
c0013a9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013aa2:	05 d0 00 00 00       	add    eax,0xd0
c0013aa7:	c3                   	ret    

c0013aa8 <DriverlessDevice::DriverlessDevice(char const*)>:
c0013aa8:	83 ec 0c             	sub    esp,0xc
c0013aab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aaf:	83 ec 08             	sub    esp,0x8
c0013ab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ab6:	50                   	push   eax
c0013ab7:	e8 f0 fe ff ff       	call   c00139ac <Device::Device(char const*)>
c0013abc:	83 c4 10             	add    esp,0x10
c0013abf:	ba 04 9a 03 c0       	mov    edx,0xc0039a04
c0013ac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ac8:	89 10                	mov    DWORD PTR [eax],edx
c0013aca:	90                   	nop
c0013acb:	83 c4 0c             	add    esp,0xc
c0013ace:	c3                   	ret    
c0013acf:	90                   	nop

c0013ad0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0013ad0:	57                   	push   edi
c0013ad1:	56                   	push   esi
c0013ad2:	53                   	push   ebx
c0013ad3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013adb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013adf:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0013ae5:	75 0c                	jne    c0013af3 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0013ae7:	52                   	push   edx
c0013ae8:	52                   	push   edx
c0013ae9:	53                   	push   ebx
c0013aea:	56                   	push   esi
c0013aeb:	e8 1c b4 00 00       	call   c001ef0c <LinkedList<Device>::addElement(Device*)>
c0013af0:	83 c4 10             	add    esp,0x10
c0013af3:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0013af9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013afc:	74 12                	je     c0013b10 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0013afe:	50                   	push   eax
c0013aff:	57                   	push   edi
c0013b00:	56                   	push   esi
c0013b01:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013b04:	e8 c7 ff ff ff       	call   c0013ad0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013b09:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0013b0b:	83 c4 10             	add    esp,0x10
c0013b0e:	eb e9                	jmp    c0013af9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0013b10:	5b                   	pop    ebx
c0013b11:	5e                   	pop    esi
c0013b12:	5f                   	pop    edi
c0013b13:	c3                   	ret    

c0013b14 <getDevicesOfType(DeviceType)>:
c0013b14:	53                   	push   ebx
c0013b15:	83 ec 14             	sub    esp,0x14
c0013b18:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013b1c:	53                   	push   ebx
c0013b1d:	e8 c6 b4 00 00       	call   c001efe8 <LinkedList<Device>::LinkedList()>
c0013b22:	83 c4 0c             	add    esp,0xc
c0013b25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013b29:	53                   	push   ebx
c0013b2a:	ff 35 a8 b9 03 c0    	push   DWORD PTR ds:0xc003b9a8
c0013b30:	e8 9b ff ff ff       	call   c0013ad0 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0013b35:	89 d8                	mov    eax,ebx
c0013b37:	83 c4 18             	add    esp,0x18
c0013b3a:	5b                   	pop    ebx
c0013b3b:	c2 04 00             	ret    0x4

c0013b3e <HardDiskController::HardDiskController(char const*)>:
c0013b3e:	83 ec 0c             	sub    esp,0xc
c0013b41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b45:	83 ec 08             	sub    esp,0x8
c0013b48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b4c:	50                   	push   eax
c0013b4d:	e8 5a fe ff ff       	call   c00139ac <Device::Device(char const*)>
c0013b52:	83 c4 10             	add    esp,0x10
c0013b55:	ba 30 9a 03 c0       	mov    edx,0xc0039a30
c0013b5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b5e:	89 10                	mov    DWORD PTR [eax],edx
c0013b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b64:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0013b6e:	90                   	nop
c0013b6f:	83 c4 0c             	add    esp,0xc
c0013b72:	c3                   	ret    
c0013b73:	90                   	nop

c0013b74 <HardDiskController::~HardDiskController()>:
c0013b74:	83 ec 0c             	sub    esp,0xc
c0013b77:	ba 30 9a 03 c0       	mov    edx,0xc0039a30
c0013b7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b80:	89 10                	mov    DWORD PTR [eax],edx
c0013b82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b86:	83 ec 0c             	sub    esp,0xc
c0013b89:	50                   	push   eax
c0013b8a:	e8 cf fa ff ff       	call   c001365e <Device::~Device()>
c0013b8f:	83 c4 10             	add    esp,0x10
c0013b92:	90                   	nop
c0013b93:	83 c4 0c             	add    esp,0xc
c0013b96:	c3                   	ret    
c0013b97:	90                   	nop

c0013b98 <HardDiskController::~HardDiskController()>:
c0013b98:	83 ec 0c             	sub    esp,0xc
c0013b9b:	83 ec 0c             	sub    esp,0xc
c0013b9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ba2:	e8 cd ff ff ff       	call   c0013b74 <HardDiskController::~HardDiskController()>
c0013ba7:	83 c4 10             	add    esp,0x10
c0013baa:	83 ec 08             	sub    esp,0x8
c0013bad:	68 58 01 00 00       	push   0x158
c0013bb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bb6:	e8 06 e9 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c0013bbb:	83 c4 10             	add    esp,0x10
c0013bbe:	83 c4 0c             	add    esp,0xc
c0013bc1:	c3                   	ret    

c0013bc2 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0013bc2:	83 ec 0c             	sub    esp,0xc
c0013bc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bc9:	83 ec 08             	sub    esp,0x8
c0013bcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bd0:	50                   	push   eax
c0013bd1:	e8 d6 fd ff ff       	call   c00139ac <Device::Device(char const*)>
c0013bd6:	83 c4 10             	add    esp,0x10
c0013bd9:	ba 5c 9a 03 c0       	mov    edx,0xc0039a5c
c0013bde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013be2:	89 10                	mov    DWORD PTR [eax],edx
c0013be4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013be8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0013bef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bf3:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0013bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bfe:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0013c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c0c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c10:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0013c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c1a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013c24:	90                   	nop
c0013c25:	83 c4 0c             	add    esp,0xc
c0013c28:	c3                   	ret    
c0013c29:	90                   	nop

c0013c2a <PhysicalDisk::startCache()>:
c0013c2a:	56                   	push   esi
c0013c2b:	53                   	push   ebx
c0013c2c:	83 ec 10             	sub    esp,0x10
c0013c2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013c33:	6a 30                	push   0x30
c0013c35:	e8 78 e8 ff ff       	call   c00124b2 <operator new(unsigned long)>
c0013c3a:	89 c6                	mov    esi,eax
c0013c3c:	58                   	pop    eax
c0013c3d:	5a                   	pop    edx
c0013c3e:	53                   	push   ebx
c0013c3f:	56                   	push   esi
c0013c40:	e8 b7 1d 00 00       	call   c00159fc <VCache::VCache(PhysicalDisk*)>
c0013c45:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0013c4b:	83 c4 14             	add    esp,0x14
c0013c4e:	5b                   	pop    ebx
c0013c4f:	5e                   	pop    esi
c0013c50:	c3                   	ret    
c0013c51:	90                   	nop

c0013c52 <PhysicalDisk::~PhysicalDisk()>:
c0013c52:	83 ec 0c             	sub    esp,0xc
c0013c55:	ba 5c 9a 03 c0       	mov    edx,0xc0039a5c
c0013c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c5e:	89 10                	mov    DWORD PTR [eax],edx
c0013c60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c64:	83 ec 0c             	sub    esp,0xc
c0013c67:	50                   	push   eax
c0013c68:	e8 f1 f9 ff ff       	call   c001365e <Device::~Device()>
c0013c6d:	83 c4 10             	add    esp,0x10
c0013c70:	90                   	nop
c0013c71:	83 c4 0c             	add    esp,0xc
c0013c74:	c3                   	ret    
c0013c75:	90                   	nop

c0013c76 <PhysicalDisk::~PhysicalDisk()>:
c0013c76:	83 ec 0c             	sub    esp,0xc
c0013c79:	83 ec 0c             	sub    esp,0xc
c0013c7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c80:	e8 cd ff ff ff       	call   c0013c52 <PhysicalDisk::~PhysicalDisk()>
c0013c85:	83 c4 10             	add    esp,0x10
c0013c88:	83 ec 08             	sub    esp,0x8
c0013c8b:	68 6c 01 00 00       	push   0x16c
c0013c90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c94:	e8 28 e8 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c0013c99:	83 c4 10             	add    esp,0x10
c0013c9c:	83 c4 0c             	add    esp,0xc
c0013c9f:	c3                   	ret    

c0013ca0 <FPU::FPU(char const*)>:
c0013ca0:	83 ec 0c             	sub    esp,0xc
c0013ca3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ca7:	83 ec 08             	sub    esp,0x8
c0013caa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cae:	50                   	push   eax
c0013caf:	e8 f8 fc ff ff       	call   c00139ac <Device::Device(char const*)>
c0013cb4:	83 c4 10             	add    esp,0x10
c0013cb7:	ba 98 9a 03 c0       	mov    edx,0xc0039a98
c0013cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cc0:	89 10                	mov    DWORD PTR [eax],edx
c0013cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cc6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0013cd0:	90                   	nop
c0013cd1:	83 c4 0c             	add    esp,0xc
c0013cd4:	c3                   	ret    
c0013cd5:	90                   	nop

c0013cd6 <FPU::~FPU()>:
c0013cd6:	83 ec 0c             	sub    esp,0xc
c0013cd9:	ba 98 9a 03 c0       	mov    edx,0xc0039a98
c0013cde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ce2:	89 10                	mov    DWORD PTR [eax],edx
c0013ce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ce8:	83 ec 0c             	sub    esp,0xc
c0013ceb:	50                   	push   eax
c0013cec:	e8 6d f9 ff ff       	call   c001365e <Device::~Device()>
c0013cf1:	83 c4 10             	add    esp,0x10
c0013cf4:	90                   	nop
c0013cf5:	83 c4 0c             	add    esp,0xc
c0013cf8:	c3                   	ret    
c0013cf9:	90                   	nop

c0013cfa <FPU::~FPU()>:
c0013cfa:	83 ec 0c             	sub    esp,0xc
c0013cfd:	83 ec 0c             	sub    esp,0xc
c0013d00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d04:	e8 cd ff ff ff       	call   c0013cd6 <FPU::~FPU()>
c0013d09:	83 c4 10             	add    esp,0x10
c0013d0c:	83 ec 08             	sub    esp,0x8
c0013d0f:	68 58 01 00 00       	push   0x158
c0013d14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d18:	e8 a4 e7 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c0013d1d:	83 c4 10             	add    esp,0x10
c0013d20:	83 c4 0c             	add    esp,0xc
c0013d23:	c3                   	ret    

c0013d24 <setupFPU()>:
c0013d24:	53                   	push   ebx
c0013d25:	83 ec 08             	sub    esp,0x8
c0013d28:	a1 a8 b9 03 c0       	mov    eax,ds:0xc003b9a8
c0013d2d:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0013d34:	74 19                	je     c0013d4f <setupFPU()+0x2b>
c0013d36:	83 ec 0c             	sub    esp,0xc
c0013d39:	68 58 01 00 00       	push   0x158
c0013d3e:	e8 6f e7 ff ff       	call   c00124b2 <operator new(unsigned long)>
c0013d43:	89 c3                	mov    ebx,eax
c0013d45:	89 04 24             	mov    DWORD PTR [esp],eax
c0013d48:	e8 a5 96 00 00       	call   c001d3f2 <AVX::AVX()>
c0013d4d:	eb 5b                	jmp    c0013daa <setupFPU()+0x86>
c0013d4f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013d55:	84 c0                	test   al,al
c0013d57:	79 19                	jns    c0013d72 <setupFPU()+0x4e>
c0013d59:	83 ec 0c             	sub    esp,0xc
c0013d5c:	68 58 01 00 00       	push   0x158
c0013d61:	e8 4c e7 ff ff       	call   c00124b2 <operator new(unsigned long)>
c0013d66:	89 c3                	mov    ebx,eax
c0013d68:	89 04 24             	mov    DWORD PTR [esp],eax
c0013d6b:	e8 a8 97 00 00       	call   c001d518 <SSE::SSE()>
c0013d70:	eb 38                	jmp    c0013daa <setupFPU()+0x86>
c0013d72:	a8 20                	test   al,0x20
c0013d74:	74 19                	je     c0013d8f <setupFPU()+0x6b>
c0013d76:	83 ec 0c             	sub    esp,0xc
c0013d79:	68 58 01 00 00       	push   0x158
c0013d7e:	e8 2f e7 ff ff       	call   c00124b2 <operator new(unsigned long)>
c0013d83:	89 c3                	mov    ebx,eax
c0013d85:	89 04 24             	mov    DWORD PTR [esp],eax
c0013d88:	e8 f5 96 00 00       	call   c001d482 <MMX::MMX()>
c0013d8d:	eb 1b                	jmp    c0013daa <setupFPU()+0x86>
c0013d8f:	a8 10                	test   al,0x10
c0013d91:	74 1c                	je     c0013daf <setupFPU()+0x8b>
c0013d93:	83 ec 0c             	sub    esp,0xc
c0013d96:	68 58 01 00 00       	push   0x158
c0013d9b:	e8 12 e7 ff ff       	call   c00124b2 <operator new(unsigned long)>
c0013da0:	89 c3                	mov    ebx,eax
c0013da2:	89 04 24             	mov    DWORD PTR [esp],eax
c0013da5:	e8 fc 97 00 00       	call   c001d5a6 <x87::x87()>
c0013daa:	83 c4 10             	add    esp,0x10
c0013dad:	eb 12                	jmp    c0013dc1 <setupFPU()+0x9d>
c0013daf:	83 ec 0c             	sub    esp,0xc
c0013db2:	31 db                	xor    ebx,ebx
c0013db4:	68 88 9a 03 c0       	push   0xc0039a88
c0013db9:	e8 62 92 ff ff       	call   c000d020 <panic(char const*)>
c0013dbe:	83 c4 10             	add    esp,0x10
c0013dc1:	89 d8                	mov    eax,ebx
c0013dc3:	83 c4 08             	add    esp,0x8
c0013dc6:	5b                   	pop    ebx
c0013dc7:	c3                   	ret    

c0013dc8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0013dc8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013dcc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013dd0:	c1 e0 04             	shl    eax,0x4
c0013dd3:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0013dd7:	8d 50 10             	lea    edx,[eax+0x10]
c0013dda:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0013de0:	74 08                	je     c0013dea <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0013de2:	83 c0 04             	add    eax,0x4
c0013de5:	39 d0                	cmp    eax,edx
c0013de7:	75 f1                	jne    c0013dda <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0013de9:	c3                   	ret    
c0013dea:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013df4:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013dfe:	eb e2                	jmp    c0013de2 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0013e00 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0013e00:	57                   	push   edi
c0013e01:	31 c0                	xor    eax,eax
c0013e03:	56                   	push   esi
c0013e04:	53                   	push   ebx
c0013e05:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013e09:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013e0d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013e11:	89 da                	mov    edx,ebx
c0013e13:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013e17:	c1 e2 04             	shl    edx,0x4
c0013e1a:	01 ca                	add    edx,ecx
c0013e1c:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0013e24:	74 16                	je     c0013e3c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0013e26:	40                   	inc    eax
c0013e27:	83 f8 04             	cmp    eax,0x4
c0013e2a:	75 f0                	jne    c0013e1c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0013e2c:	c7 44 24 10 c8 9a 03 c0 	mov    DWORD PTR [esp+0x10],0xc0039ac8
c0013e34:	5b                   	pop    ebx
c0013e35:	5e                   	pop    esi
c0013e36:	5f                   	pop    edi
c0013e37:	e9 e4 91 ff ff       	jmp    c000d020 <panic(char const*)>
c0013e3c:	8d 04 98             	lea    eax,[eax+ebx*4]
c0013e3f:	8d 04 81             	lea    eax,[ecx+eax*4]
c0013e42:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0013e48:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0013e4e:	5b                   	pop    ebx
c0013e4f:	5e                   	pop    esi
c0013e50:	5f                   	pop    edi
c0013e51:	c3                   	ret    

c0013e52 <doubleFault(regs*, void*)>:
c0013e52:	c7 44 24 04 f8 9b 03 c0 	mov    DWORD PTR [esp+0x4],0xc0039bf8
c0013e5a:	e9 c1 91 ff ff       	jmp    c000d020 <panic(char const*)>
c0013e5f:	90                   	nop

c0013e60 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013e60:	56                   	push   esi
c0013e61:	53                   	push   ebx
c0013e62:	50                   	push   eax
c0013e63:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013e67:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013e6b:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013e70:	75 35                	jne    c0013ea7 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0013e72:	8d 43 20             	lea    eax,[ebx+0x20]
c0013e75:	31 d2                	xor    edx,edx
c0013e77:	89 c1                	mov    ecx,eax
c0013e79:	c1 e1 04             	shl    ecx,0x4
c0013e7c:	01 f1                	add    ecx,esi
c0013e7e:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0013e86:	74 3e                	je     c0013ec6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0013e88:	42                   	inc    edx
c0013e89:	83 fa 04             	cmp    edx,0x4
c0013e8c:	75 f0                	jne    c0013e7e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0013e8e:	83 ec 0c             	sub    esp,0xc
c0013e91:	68 3c 9b 03 c0       	push   0xc0039b3c
c0013e96:	e8 85 91 ff ff       	call   c000d020 <panic(char const*)>
c0013e9b:	83 c4 10             	add    esp,0x10
c0013e9e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0013ea3:	5a                   	pop    edx
c0013ea4:	5b                   	pop    ebx
c0013ea5:	5e                   	pop    esi
c0013ea6:	c3                   	ret    
c0013ea7:	83 ec 0c             	sub    esp,0xc
c0013eaa:	56                   	push   esi
c0013eab:	e8 ee fb ff ff       	call   c0013a9e <Device::getName()>
c0013eb0:	83 c4 10             	add    esp,0x10
c0013eb3:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013eb6:	75 ba                	jne    c0013e72 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013eb8:	83 fb 0f             	cmp    ebx,0xf
c0013ebb:	7f 29                	jg     c0013ee6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0013ebd:	0f b6 9b 00 b1 03 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffc4f00]
c0013ec4:	eb ac                	jmp    c0013e72 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013ec6:	8d 04 82             	lea    eax,[edx+eax*4]
c0013ec9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ecd:	8d 04 86             	lea    eax,[esi+eax*4]
c0013ed0:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0013ed6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013eda:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0013ee0:	89 d8                	mov    eax,ebx
c0013ee2:	5a                   	pop    edx
c0013ee3:	5b                   	pop    ebx
c0013ee4:	5e                   	pop    esi
c0013ee5:	c3                   	ret    
c0013ee6:	83 ec 0c             	sub    esp,0xc
c0013ee9:	68 04 9b 03 c0       	push   0xc0039b04
c0013eee:	e8 2d 91 ff ff       	call   c000d020 <panic(char const*)>
c0013ef3:	83 c4 10             	add    esp,0x10
c0013ef6:	e9 77 ff ff ff       	jmp    c0013e72 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0013efb:	90                   	nop

c0013efc <InterruptController::clearAllHandlers(int, bool)>:
c0013efc:	56                   	push   esi
c0013efd:	53                   	push   ebx
c0013efe:	52                   	push   edx
c0013eff:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f03:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013f07:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0013f0c:	75 61                	jne    c0013f6f <InterruptController::clearAllHandlers(int, bool)+0x73>
c0013f0e:	8d 46 20             	lea    eax,[esi+0x20]
c0013f11:	c1 e6 04             	shl    esi,0x4
c0013f14:	c1 e0 04             	shl    eax,0x4
c0013f17:	01 de                	add    esi,ebx
c0013f19:	01 d8                	add    eax,ebx
c0013f1b:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0013f25:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0013f2f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0013f39:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0013f43:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0013f4d:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0013f57:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0013f61:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0013f6b:	58                   	pop    eax
c0013f6c:	5b                   	pop    ebx
c0013f6d:	5e                   	pop    esi
c0013f6e:	c3                   	ret    
c0013f6f:	83 ec 0c             	sub    esp,0xc
c0013f72:	53                   	push   ebx
c0013f73:	e8 26 fb ff ff       	call   c0013a9e <Device::getName()>
c0013f78:	83 c4 10             	add    esp,0x10
c0013f7b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013f7e:	75 8e                	jne    c0013f0e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013f80:	83 fe 0f             	cmp    esi,0xf
c0013f83:	7f 09                	jg     c0013f8e <InterruptController::clearAllHandlers(int, bool)+0x92>
c0013f85:	0f b6 b6 00 b1 03 c0 	movzx  esi,BYTE PTR [esi-0x3ffc4f00]
c0013f8c:	eb 80                	jmp    c0013f0e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013f8e:	83 ec 0c             	sub    esp,0xc
c0013f91:	68 78 9b 03 c0       	push   0xc0039b78
c0013f96:	e8 85 90 ff ff       	call   c000d020 <panic(char const*)>
c0013f9b:	83 c4 10             	add    esp,0x10
c0013f9e:	e9 6b ff ff ff       	jmp    c0013f0e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0013fa3:	90                   	nop

c0013fa4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013fa4:	56                   	push   esi
c0013fa5:	53                   	push   ebx
c0013fa6:	52                   	push   edx
c0013fa7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013fab:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013faf:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0013fb4:	75 3a                	jne    c0013ff0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0013fb6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013fba:	8d 50 20             	lea    edx,[eax+0x20]
c0013fbd:	c1 e2 04             	shl    edx,0x4
c0013fc0:	8d 04 16             	lea    eax,[esi+edx*1]
c0013fc3:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0013fc7:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0013fcd:	74 0b                	je     c0013fda <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0013fcf:	83 c0 04             	add    eax,0x4
c0013fd2:	39 d0                	cmp    eax,edx
c0013fd4:	75 f1                	jne    c0013fc7 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0013fd6:	58                   	pop    eax
c0013fd7:	5b                   	pop    ebx
c0013fd8:	5e                   	pop    esi
c0013fd9:	c3                   	ret    
c0013fda:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013fe4:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0013fee:	eb df                	jmp    c0013fcf <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0013ff0:	83 ec 0c             	sub    esp,0xc
c0013ff3:	56                   	push   esi
c0013ff4:	e8 a5 fa ff ff       	call   c0013a9e <Device::getName()>
c0013ff9:	83 c4 10             	add    esp,0x10
c0013ffc:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0013fff:	75 b5                	jne    c0013fb6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014001:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014006:	7f 11                	jg     c0014019 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014008:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001400c:	0f b6 80 00 b1 03 c0 	movzx  eax,BYTE PTR [eax-0x3ffc4f00]
c0014013:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014017:	eb 9d                	jmp    c0013fb6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014019:	83 ec 0c             	sub    esp,0xc
c001401c:	68 78 9b 03 c0       	push   0xc0039b78
c0014021:	e8 fa 8f ff ff       	call   c000d020 <panic(char const*)>
c0014026:	83 c4 10             	add    esp,0x10
c0014029:	eb 8b                	jmp    c0013fb6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c001402b <nmiHandler(regs*, void*)>:
c001402b:	a1 a8 b9 03 c0       	mov    eax,ds:0xc003b9a8
c0014030:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014034:	e9 45 77 ff ff       	jmp    c000b77e <Computer::handleNMI()>

c0014039 <int_handler>:
c0014039:	55                   	push   ebp
c001403a:	57                   	push   edi
c001403b:	56                   	push   esi
c001403c:	53                   	push   ebx
c001403d:	83 ec 0c             	sub    esp,0xc
c0014040:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014044:	80 3d 52 bb 03 c0 00 	cmp    BYTE PTR ds:0xc003bb52,0x0
c001404b:	74 0b                	je     c0014058 <int_handler+0x1f>
c001404d:	fa                   	cli    
c001404e:	f4                   	hlt    
c001404f:	80 3d 52 bb 03 c0 00 	cmp    BYTE PTR ds:0xc003bb52,0x0
c0014056:	75 f5                	jne    c001404d <int_handler+0x14>
c0014058:	e8 5b 31 00 00       	call   c00171b8 <thisCPU()>
c001405d:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014060:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014066:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014069:	83 f8 17             	cmp    eax,0x17
c001406c:	77 13                	ja     c0014081 <int_handler+0x48>
c001406e:	83 ec 08             	sub    esp,0x8
c0014071:	8b 17                	mov    edx,DWORD PTR [edi]
c0014073:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014076:	0f b6 c0             	movzx  eax,al
c0014079:	50                   	push   eax
c001407a:	57                   	push   edi
c001407b:	ff 52 38             	call   DWORD PTR [edx+0x38]
c001407e:	83 c4 10             	add    esp,0x10
c0014081:	83 c3 15             	add    ebx,0x15
c0014084:	c1 e3 04             	shl    ebx,0x4
c0014087:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c001408b:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014092:	31 db                	xor    ebx,ebx
c0014094:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014098:	85 c0                	test   eax,eax
c001409a:	74 13                	je     c00140af <int_handler+0x76>
c001409c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001409f:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c00140a3:	74 1c                	je     c00140c1 <int_handler+0x88>
c00140a5:	83 ec 08             	sub    esp,0x8
c00140a8:	52                   	push   edx
c00140a9:	56                   	push   esi
c00140aa:	ff d0                	call   eax
c00140ac:	83 c4 10             	add    esp,0x10
c00140af:	43                   	inc    ebx
c00140b0:	83 fb 04             	cmp    ebx,0x4
c00140b3:	75 df                	jne    c0014094 <int_handler+0x5b>
c00140b5:	83 c4 0c             	add    esp,0xc
c00140b8:	31 c0                	xor    eax,eax
c00140ba:	5b                   	pop    ebx
c00140bb:	31 d2                	xor    edx,edx
c00140bd:	5e                   	pop    esi
c00140be:	5f                   	pop    edi
c00140bf:	5d                   	pop    ebp
c00140c0:	c3                   	ret    
c00140c1:	83 ec 08             	sub    esp,0x8
c00140c4:	52                   	push   edx
c00140c5:	56                   	push   esi
c00140c6:	ff d0                	call   eax
c00140c8:	83 c4 10             	add    esp,0x10
c00140cb:	83 c4 0c             	add    esp,0xc
c00140ce:	5b                   	pop    ebx
c00140cf:	5e                   	pop    esi
c00140d0:	5f                   	pop    edi
c00140d1:	5d                   	pop    ebp
c00140d2:	c3                   	ret    
c00140d3:	90                   	nop

c00140d4 <InterruptController::InterruptController(char const*)>:
c00140d4:	83 ec 1c             	sub    esp,0x1c
c00140d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140db:	83 ec 08             	sub    esp,0x8
c00140de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00140e2:	50                   	push   eax
c00140e3:	e8 c4 f8 ff ff       	call   c00139ac <Device::Device(char const*)>
c00140e8:	83 c4 10             	add    esp,0x10
c00140eb:	ba 70 9d 03 c0       	mov    edx,0xc0039d70
c00140f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140f4:	89 10                	mov    DWORD PTR [eax],edx
c00140f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140fa:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014104:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001410c:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014114:	7f 5e                	jg     c0014174 <InterruptController::InterruptController(char const*)+0xa0>
c0014116:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001411e:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014123:	7f 49                	jg     c001416e <InterruptController::InterruptController(char const*)+0x9a>
c0014125:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014129:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001412d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014134:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014138:	01 ca                	add    edx,ecx
c001413a:	83 c2 54             	add    edx,0x54
c001413d:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014145:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014149:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001414d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014154:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014158:	01 ca                	add    edx,ecx
c001415a:	81 c2 54 04 00 00    	add    edx,0x454
c0014160:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014168:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001416c:	eb b0                	jmp    c001411e <InterruptController::InterruptController(char const*)+0x4a>
c001416e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014172:	eb 98                	jmp    c001410c <InterruptController::InterruptController(char const*)+0x38>
c0014174:	90                   	nop
c0014175:	83 c4 1c             	add    esp,0x1c
c0014178:	c3                   	ret    
c0014179:	90                   	nop

c001417a <InterruptController::~InterruptController()>:
c001417a:	83 ec 0c             	sub    esp,0xc
c001417d:	ba 70 9d 03 c0       	mov    edx,0xc0039d70
c0014182:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014186:	89 10                	mov    DWORD PTR [eax],edx
c0014188:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001418c:	83 ec 0c             	sub    esp,0xc
c001418f:	50                   	push   eax
c0014190:	e8 c9 f4 ff ff       	call   c001365e <Device::~Device()>
c0014195:	83 c4 10             	add    esp,0x10
c0014198:	90                   	nop
c0014199:	83 c4 0c             	add    esp,0xc
c001419c:	c3                   	ret    
c001419d:	90                   	nop

c001419e <InterruptController::~InterruptController()>:
c001419e:	83 ec 0c             	sub    esp,0xc
c00141a1:	83 ec 0c             	sub    esp,0xc
c00141a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141a8:	e8 cd ff ff ff       	call   c001417a <InterruptController::~InterruptController()>
c00141ad:	83 c4 10             	add    esp,0x10
c00141b0:	83 ec 08             	sub    esp,0x8
c00141b3:	68 58 21 00 00       	push   0x2158
c00141b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00141bc:	e8 00 e3 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c00141c1:	83 c4 10             	add    esp,0x10
c00141c4:	83 c4 0c             	add    esp,0xc
c00141c7:	c3                   	ret    

c00141c8 <displayDebugInfo(regs*)>:
c00141c8:	55                   	push   ebp
c00141c9:	57                   	push   edi
c00141ca:	56                   	push   esi
c00141cb:	53                   	push   ebx
c00141cc:	83 ec 24             	sub    esp,0x24
c00141cf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00141d3:	0f 20 c2             	mov    edx,cr0
c00141d6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00141da:	0f 20 d7             	mov    edi,cr2
c00141dd:	0f 20 de             	mov    esi,cr3
c00141e0:	0f 20 e5             	mov    ebp,cr4
c00141e3:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00141e6:	68 05 9c 03 c0       	push   0xc0039c05
c00141eb:	e8 12 8d ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c00141f0:	58                   	pop    eax
c00141f1:	5a                   	pop    edx
c00141f2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00141f5:	68 10 9c 03 c0       	push   0xc0039c10
c00141fa:	e8 03 8d ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c00141ff:	59                   	pop    ecx
c0014200:	58                   	pop    eax
c0014201:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014204:	68 1b 9c 03 c0       	push   0xc0039c1b
c0014209:	e8 f4 8c ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001420e:	58                   	pop    eax
c001420f:	5a                   	pop    edx
c0014210:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014213:	68 26 9c 03 c0       	push   0xc0039c26
c0014218:	e8 e5 8c ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001421d:	59                   	pop    ecx
c001421e:	58                   	pop    eax
c001421f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014222:	68 31 9c 03 c0       	push   0xc0039c31
c0014227:	e8 d6 8c ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001422c:	58                   	pop    eax
c001422d:	5a                   	pop    edx
c001422e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014231:	68 3c 9c 03 c0       	push   0xc0039c3c
c0014236:	e8 c7 8c ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001423b:	59                   	pop    ecx
c001423c:	58                   	pop    eax
c001423d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014240:	68 56 9c 03 c0       	push   0xc0039c56
c0014245:	e8 b8 8c ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001424a:	58                   	pop    eax
c001424b:	5a                   	pop    edx
c001424c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001424f:	68 47 9c 03 c0       	push   0xc0039c47
c0014254:	e8 a9 8c ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0014259:	59                   	pop    ecx
c001425a:	58                   	pop    eax
c001425b:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001425e:	68 52 9c 03 c0       	push   0xc0039c52
c0014263:	e8 9a 8c ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0014268:	58                   	pop    eax
c0014269:	5a                   	pop    edx
c001426a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001426d:	68 61 9c 03 c0       	push   0xc0039c61
c0014272:	e8 8b 8c ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0014277:	59                   	pop    ecx
c0014278:	58                   	pop    eax
c0014279:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001427c:	68 6c 9c 03 c0       	push   0xc0039c6c
c0014281:	e8 7c 8c ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0014286:	58                   	pop    eax
c0014287:	5a                   	pop    edx
c0014288:	57                   	push   edi
c0014289:	68 77 9c 03 c0       	push   0xc0039c77
c001428e:	e8 6f 8c ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0014293:	59                   	pop    ecx
c0014294:	58                   	pop    eax
c0014295:	56                   	push   esi
c0014296:	68 82 9c 03 c0       	push   0xc0039c82
c001429b:	e8 62 8c ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c00142a0:	58                   	pop    eax
c00142a1:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c00142a6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142ac:	e8 d8 c3 ff ff       	call   c0010689 <setActiveTerminal(VgaText*)>
c00142b1:	58                   	pop    eax
c00142b2:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00142b5:	5a                   	pop    edx
c00142b6:	c1 e0 05             	shl    eax,0x5
c00142b9:	05 60 ae 03 c0       	add    eax,0xc003ae60
c00142be:	50                   	push   eax
c00142bf:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c00142c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142ca:	e8 d9 c7 ff ff       	call   c0010aa8 <VgaText::puts(char const*)>
c00142cf:	59                   	pop    ecx
c00142d0:	58                   	pop    eax
c00142d1:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c00142d6:	68 8d 9c 03 c0       	push   0xc0039c8d
c00142db:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142e1:	e8 c2 c7 ff ff       	call   c0010aa8 <VgaText::puts(char const*)>
c00142e6:	58                   	pop    eax
c00142e7:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c00142ec:	5a                   	pop    edx
c00142ed:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00142f0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00142f6:	e8 d3 c7 ff ff       	call   c0010ace <VgaText::putx(unsigned int)>
c00142fb:	59                   	pop    ecx
c00142fc:	58                   	pop    eax
c00142fd:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c0014302:	68 95 9c 03 c0       	push   0xc0039c95
c0014307:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001430d:	e8 96 c7 ff ff       	call   c0010aa8 <VgaText::puts(char const*)>
c0014312:	58                   	pop    eax
c0014313:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c0014318:	5a                   	pop    edx
c0014319:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001431c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014322:	e8 a7 c7 ff ff       	call   c0010ace <VgaText::putx(unsigned int)>
c0014327:	59                   	pop    ecx
c0014328:	58                   	pop    eax
c0014329:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c001432e:	68 9d 9c 03 c0       	push   0xc0039c9d
c0014333:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014339:	e8 6a c7 ff ff       	call   c0010aa8 <VgaText::puts(char const*)>
c001433e:	58                   	pop    eax
c001433f:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c0014344:	5a                   	pop    edx
c0014345:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014348:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001434e:	e8 7b c7 ff ff       	call   c0010ace <VgaText::putx(unsigned int)>
c0014353:	59                   	pop    ecx
c0014354:	58                   	pop    eax
c0014355:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c001435a:	68 a5 9c 03 c0       	push   0xc0039ca5
c001435f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014365:	e8 3e c7 ff ff       	call   c0010aa8 <VgaText::puts(char const*)>
c001436a:	58                   	pop    eax
c001436b:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c0014370:	5a                   	pop    edx
c0014371:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014374:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001437a:	e8 4f c7 ff ff       	call   c0010ace <VgaText::putx(unsigned int)>
c001437f:	59                   	pop    ecx
c0014380:	58                   	pop    eax
c0014381:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c0014386:	68 ad 9c 03 c0       	push   0xc0039cad
c001438b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014391:	e8 12 c7 ff ff       	call   c0010aa8 <VgaText::puts(char const*)>
c0014396:	58                   	pop    eax
c0014397:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c001439c:	5a                   	pop    edx
c001439d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00143a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143a6:	e8 23 c7 ff ff       	call   c0010ace <VgaText::putx(unsigned int)>
c00143ab:	59                   	pop    ecx
c00143ac:	58                   	pop    eax
c00143ad:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c00143b2:	68 b5 9c 03 c0       	push   0xc0039cb5
c00143b7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143bd:	e8 e6 c6 ff ff       	call   c0010aa8 <VgaText::puts(char const*)>
c00143c2:	58                   	pop    eax
c00143c3:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c00143c8:	5a                   	pop    edx
c00143c9:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c00143cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143d2:	e8 f7 c6 ff ff       	call   c0010ace <VgaText::putx(unsigned int)>
c00143d7:	59                   	pop    ecx
c00143d8:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c00143dd:	5b                   	pop    ebx
c00143de:	68 bd 9c 03 c0       	push   0xc0039cbd
c00143e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00143e9:	e8 ba c6 ff ff       	call   c0010aa8 <VgaText::puts(char const*)>
c00143ee:	58                   	pop    eax
c00143ef:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c00143f4:	5a                   	pop    edx
c00143f5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00143f9:	52                   	push   edx
c00143fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014400:	e8 c9 c6 ff ff       	call   c0010ace <VgaText::putx(unsigned int)>
c0014405:	59                   	pop    ecx
c0014406:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c001440b:	5b                   	pop    ebx
c001440c:	68 c6 9c 03 c0       	push   0xc0039cc6
c0014411:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014417:	e8 8c c6 ff ff       	call   c0010aa8 <VgaText::puts(char const*)>
c001441c:	58                   	pop    eax
c001441d:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c0014422:	5a                   	pop    edx
c0014423:	57                   	push   edi
c0014424:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001442a:	e8 9f c6 ff ff       	call   c0010ace <VgaText::putx(unsigned int)>
c001442f:	59                   	pop    ecx
c0014430:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c0014435:	5b                   	pop    ebx
c0014436:	68 ce 9c 03 c0       	push   0xc0039cce
c001443b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014441:	e8 62 c6 ff ff       	call   c0010aa8 <VgaText::puts(char const*)>
c0014446:	5f                   	pop    edi
c0014447:	58                   	pop    eax
c0014448:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c001444d:	56                   	push   esi
c001444e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014454:	e8 75 c6 ff ff       	call   c0010ace <VgaText::putx(unsigned int)>
c0014459:	58                   	pop    eax
c001445a:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c001445f:	5a                   	pop    edx
c0014460:	68 d6 9c 03 c0       	push   0xc0039cd6
c0014465:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001446b:	e8 38 c6 ff ff       	call   c0010aa8 <VgaText::puts(char const*)>
c0014470:	59                   	pop    ecx
c0014471:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c0014476:	5b                   	pop    ebx
c0014477:	55                   	push   ebp
c0014478:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001447e:	e8 4b c6 ff ff       	call   c0010ace <VgaText::putx(unsigned int)>
c0014483:	5e                   	pop    esi
c0014484:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c0014489:	5f                   	pop    edi
c001448a:	68 de 9c 03 c0       	push   0xc0039cde
c001448f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014495:	e8 0e c6 ff ff       	call   c0010aa8 <VgaText::puts(char const*)>
c001449a:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c001449f:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00144a5:	e8 96 ab 00 00       	call   c001f040 <CPU::readDR0()>
c00144aa:	5d                   	pop    ebp
c00144ab:	5a                   	pop    edx
c00144ac:	50                   	push   eax
c00144ad:	53                   	push   ebx
c00144ae:	e8 1b c6 ff ff       	call   c0010ace <VgaText::putx(unsigned int)>
c00144b3:	59                   	pop    ecx
c00144b4:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c00144b9:	5b                   	pop    ebx
c00144ba:	68 e7 9c 03 c0       	push   0xc0039ce7
c00144bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144c5:	e8 de c5 ff ff       	call   c0010aa8 <VgaText::puts(char const*)>
c00144ca:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c00144cf:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00144d5:	e8 78 ab 00 00       	call   c001f052 <CPU::readDR1()>
c00144da:	5e                   	pop    esi
c00144db:	5f                   	pop    edi
c00144dc:	50                   	push   eax
c00144dd:	53                   	push   ebx
c00144de:	e8 eb c5 ff ff       	call   c0010ace <VgaText::putx(unsigned int)>
c00144e3:	5d                   	pop    ebp
c00144e4:	58                   	pop    eax
c00144e5:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c00144ea:	68 ef 9c 03 c0       	push   0xc0039cef
c00144ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00144f5:	e8 ae c5 ff ff       	call   c0010aa8 <VgaText::puts(char const*)>
c00144fa:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c00144ff:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014505:	e8 5a ab 00 00       	call   c001f064 <CPU::readDR2()>
c001450a:	5a                   	pop    edx
c001450b:	59                   	pop    ecx
c001450c:	50                   	push   eax
c001450d:	53                   	push   ebx
c001450e:	e8 bb c5 ff ff       	call   c0010ace <VgaText::putx(unsigned int)>
c0014513:	5b                   	pop    ebx
c0014514:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c0014519:	5e                   	pop    esi
c001451a:	68 f7 9c 03 c0       	push   0xc0039cf7
c001451f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014525:	e8 7e c5 ff ff       	call   c0010aa8 <VgaText::puts(char const*)>
c001452a:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c001452f:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014535:	e8 3c ab 00 00       	call   c001f076 <CPU::readDR3()>
c001453a:	5f                   	pop    edi
c001453b:	5d                   	pop    ebp
c001453c:	50                   	push   eax
c001453d:	53                   	push   ebx
c001453e:	e8 8b c5 ff ff       	call   c0010ace <VgaText::putx(unsigned int)>
c0014543:	58                   	pop    eax
c0014544:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c0014549:	5a                   	pop    edx
c001454a:	68 ff 9c 03 c0       	push   0xc0039cff
c001454f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014555:	e8 4e c5 ff ff       	call   c0010aa8 <VgaText::puts(char const*)>
c001455a:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c001455f:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014565:	e8 1e ab 00 00       	call   c001f088 <CPU::readDR6()>
c001456a:	59                   	pop    ecx
c001456b:	5e                   	pop    esi
c001456c:	50                   	push   eax
c001456d:	53                   	push   ebx
c001456e:	e8 5b c5 ff ff       	call   c0010ace <VgaText::putx(unsigned int)>
c0014573:	5f                   	pop    edi
c0014574:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c0014579:	5d                   	pop    ebp
c001457a:	68 07 9d 03 c0       	push   0xc0039d07
c001457f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014585:	e8 1e c5 ff ff       	call   c0010aa8 <VgaText::puts(char const*)>
c001458a:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c001458f:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0014595:	e8 00 ab 00 00       	call   c001f09a <CPU::readDR7()>
c001459a:	5a                   	pop    edx
c001459b:	59                   	pop    ecx
c001459c:	50                   	push   eax
c001459d:	53                   	push   ebx
c001459e:	e8 2b c5 ff ff       	call   c0010ace <VgaText::putx(unsigned int)>
c00145a3:	fa                   	cli    
c00145a4:	f4                   	hlt    
c00145a5:	83 c4 10             	add    esp,0x10
c00145a8:	eb fe                	jmp    c00145a8 <displayDebugInfo(regs*)+0x3e0>

c00145aa <gpFault(regs*, void*)>:
c00145aa:	53                   	push   ebx
c00145ab:	83 ec 14             	sub    esp,0x14
c00145ae:	c7 05 88 be 03 c0 9d 87 01 c0 	mov    DWORD PTR ds:0xc003be88,0xc001879d
c00145b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00145bc:	53                   	push   ebx
c00145bd:	e8 db 41 00 00       	call   c001879d <vm8086FaultHandler(regs*)>
c00145c2:	83 c4 10             	add    esp,0x10
c00145c5:	84 c0                	test   al,al
c00145c7:	74 05                	je     c00145ce <gpFault(regs*, void*)+0x24>
c00145c9:	83 c4 08             	add    esp,0x8
c00145cc:	5b                   	pop    ebx
c00145cd:	c3                   	ret    
c00145ce:	83 ec 0c             	sub    esp,0xc
c00145d1:	68 0f 9d 03 c0       	push   0xc0039d0f
c00145d6:	e8 27 89 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c00145db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145de:	e8 e5 fb ff ff       	call   c00141c8 <displayDebugInfo(regs*)>

c00145e3 <pgFault(regs*, void*)>:
c00145e3:	83 ec 18             	sub    esp,0x18
c00145e6:	68 2a 9d 03 c0       	push   0xc0039d2a
c00145eb:	e8 12 89 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c00145f0:	58                   	pop    eax
c00145f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145f5:	e8 ce fb ff ff       	call   c00141c8 <displayDebugInfo(regs*)>

c00145fa <otherISRHandler(regs*, void*)>:
c00145fa:	53                   	push   ebx
c00145fb:	83 ec 0c             	sub    esp,0xc
c00145fe:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014602:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014605:	50                   	push   eax
c0014606:	50                   	push   eax
c0014607:	68 37 9d 03 c0       	push   0xc0039d37
c001460c:	e8 f1 88 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0014611:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014614:	e8 af fb ff ff       	call   c00141c8 <displayDebugInfo(regs*)>

c0014619 <opcodeFault(regs*, void*)>:
c0014619:	53                   	push   ebx
c001461a:	83 ec 08             	sub    esp,0x8
c001461d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014621:	e8 92 2b 00 00       	call   c00171b8 <thisCPU()>
c0014626:	80 b8 94 11 00 00 00 	cmp    BYTE PTR [eax+0x1194],0x0
c001462d:	74 16                	je     c0014645 <opcodeFault(regs*, void*)+0x2c>
c001462f:	83 ec 0c             	sub    esp,0xc
c0014632:	68 b4 9b 03 c0       	push   0xc0039bb4
c0014637:	e8 c6 88 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001463c:	83 43 38 40          	add    DWORD PTR [ebx+0x38],0x40
c0014640:	83 c4 18             	add    esp,0x18
c0014643:	5b                   	pop    ebx
c0014644:	c3                   	ret    
c0014645:	83 ec 0c             	sub    esp,0xc
c0014648:	68 54 9d 03 c0       	push   0xc0039d54
c001464d:	e8 b0 88 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0014652:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0014655:	c1 e0 04             	shl    eax,0x4
c0014658:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001465b:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c001465f:	89 14 24             	mov    DWORD PTR [esp],edx
c0014662:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0014666:	52                   	push   edx
c0014667:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c001466b:	52                   	push   edx
c001466c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c001466f:	50                   	push   eax
c0014670:	68 d8 9b 03 c0       	push   0xc0039bd8
c0014675:	e8 88 88 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001467a:	83 c4 14             	add    esp,0x14
c001467d:	53                   	push   ebx
c001467e:	e8 45 fb ff ff       	call   c00141c8 <displayDebugInfo(regs*)>

c0014683 <displayProgramFault(char const*)>:
c0014683:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014688:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001468b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0014691:	85 c0                	test   eax,eax
c0014693:	74 15                	je     c00146aa <displayProgramFault(char const*)+0x27>
c0014695:	83 ec 0c             	sub    esp,0xc
c0014698:	6a 04                	push   0x4
c001469a:	6a 0f                	push   0xf
c001469c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00146a0:	50                   	push   eax
c00146a1:	e8 c4 c0 ff ff       	call   c001076a <VgaText::puts(char const*, VgaColour, VgaColour)>
c00146a6:	83 c4 1c             	add    esp,0x1c
c00146a9:	c3                   	ret    
c00146aa:	c3                   	ret    
c00146ab:	90                   	nop

c00146ac <InterruptController::convertLegacyIRQNumber(int)>:
c00146ac:	53                   	push   ebx
c00146ad:	83 ec 14             	sub    esp,0x14
c00146b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00146b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146b8:	e8 e1 f3 ff ff       	call   c0013a9e <Device::getName()>
c00146bd:	83 c4 10             	add    esp,0x10
c00146c0:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00146c3:	74 07                	je     c00146cc <InterruptController::convertLegacyIRQNumber(int)+0x20>
c00146c5:	89 d8                	mov    eax,ebx
c00146c7:	83 c4 08             	add    esp,0x8
c00146ca:	5b                   	pop    ebx
c00146cb:	c3                   	ret    
c00146cc:	83 fb 0f             	cmp    ebx,0xf
c00146cf:	7f 0e                	jg     c00146df <InterruptController::convertLegacyIRQNumber(int)+0x33>
c00146d1:	0f b6 9b 00 b1 03 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffc4f00]
c00146d8:	83 c4 08             	add    esp,0x8
c00146db:	89 d8                	mov    eax,ebx
c00146dd:	5b                   	pop    ebx
c00146de:	c3                   	ret    
c00146df:	83 ec 0c             	sub    esp,0xc
c00146e2:	68 04 9b 03 c0       	push   0xc0039b04
c00146e7:	e8 34 89 ff ff       	call   c000d020 <panic(char const*)>
c00146ec:	89 d8                	mov    eax,ebx
c00146ee:	83 c4 10             	add    esp,0x10
c00146f1:	83 c4 08             	add    esp,0x8
c00146f4:	5b                   	pop    ebx
c00146f5:	c3                   	ret    

c00146f6 <setupInterruptController()>:
c00146f6:	56                   	push   esi
c00146f7:	53                   	push   ebx
c00146f8:	51                   	push   ecx
c00146f9:	e8 b7 2a 00 00       	call   c00171b5 <getCPUNumber()>
c00146fe:	85 c0                	test   eax,eax
c0014700:	0f 85 10 02 00 00    	jne    c0014916 <setupInterruptController()+0x220>
c0014706:	83 ec 0c             	sub    esp,0xc
c0014709:	a1 a8 b9 03 c0       	mov    eax,ds:0xc003b9a8
c001470e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014714:	68 58 21 00 00       	push   0x2158
c0014719:	83 e0 01             	and    eax,0x1
c001471c:	89 c6                	mov    esi,eax
c001471e:	e8 8f dd ff ff       	call   c00124b2 <operator new(unsigned long)>
c0014723:	89 04 24             	mov    DWORD PTR [esp],eax
c0014726:	89 c3                	mov    ebx,eax
c0014728:	e8 e5 94 00 00       	call   c001dc12 <PIC::PIC()>
c001472d:	6a 00                	push   0x0
c001472f:	6a 00                	push   0x0
c0014731:	6a 00                	push   0x0
c0014733:	53                   	push   ebx
c0014734:	e8 1d 98 00 00       	call   c001df56 <PIC::open(int, int, void*)>
c0014739:	83 c4 20             	add    esp,0x20
c001473c:	89 f0                	mov    eax,esi
c001473e:	84 c0                	test   al,al
c0014740:	0f 85 92 01 00 00    	jne    c00148d8 <setupInterruptController()+0x1e2>
c0014746:	83 ec 08             	sub    esp,0x8
c0014749:	53                   	push   ebx
c001474a:	ff 35 a8 b9 03 c0    	push   DWORD PTR ds:0xc003b9a8
c0014750:	e8 67 f0 ff ff       	call   c00137bc <Device::addChild(Device*)>
c0014755:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014757:	6a 00                	push   0x0
c0014759:	68 fa 45 01 c0       	push   0xc00145fa
c001475e:	6a 00                	push   0x0
c0014760:	53                   	push   ebx
c0014761:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014764:	83 c4 20             	add    esp,0x20
c0014767:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014769:	6a 00                	push   0x0
c001476b:	68 fa 45 01 c0       	push   0xc00145fa
c0014770:	6a 01                	push   0x1
c0014772:	53                   	push   ebx
c0014773:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014776:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014778:	6a 00                	push   0x0
c001477a:	68 2b 40 01 c0       	push   0xc001402b
c001477f:	6a 02                	push   0x2
c0014781:	53                   	push   ebx
c0014782:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014785:	83 c4 20             	add    esp,0x20
c0014788:	8b 03                	mov    eax,DWORD PTR [ebx]
c001478a:	6a 00                	push   0x0
c001478c:	68 fa 45 01 c0       	push   0xc00145fa
c0014791:	6a 03                	push   0x3
c0014793:	53                   	push   ebx
c0014794:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014797:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014799:	6a 00                	push   0x0
c001479b:	68 fa 45 01 c0       	push   0xc00145fa
c00147a0:	6a 04                	push   0x4
c00147a2:	53                   	push   ebx
c00147a3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147a6:	83 c4 20             	add    esp,0x20
c00147a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147ab:	6a 00                	push   0x0
c00147ad:	68 fa 45 01 c0       	push   0xc00145fa
c00147b2:	6a 05                	push   0x5
c00147b4:	53                   	push   ebx
c00147b5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147ba:	6a 00                	push   0x0
c00147bc:	68 19 46 01 c0       	push   0xc0014619
c00147c1:	6a 06                	push   0x6
c00147c3:	53                   	push   ebx
c00147c4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147c7:	83 c4 20             	add    esp,0x20
c00147ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147cc:	6a 00                	push   0x0
c00147ce:	68 fa 45 01 c0       	push   0xc00145fa
c00147d3:	6a 07                	push   0x7
c00147d5:	53                   	push   ebx
c00147d6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147db:	6a 00                	push   0x0
c00147dd:	68 52 3e 01 c0       	push   0xc0013e52
c00147e2:	6a 08                	push   0x8
c00147e4:	53                   	push   ebx
c00147e5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147e8:	83 c4 20             	add    esp,0x20
c00147eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147ed:	6a 00                	push   0x0
c00147ef:	68 fa 45 01 c0       	push   0xc00145fa
c00147f4:	6a 09                	push   0x9
c00147f6:	53                   	push   ebx
c00147f7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00147fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147fc:	6a 00                	push   0x0
c00147fe:	68 fa 45 01 c0       	push   0xc00145fa
c0014803:	6a 0a                	push   0xa
c0014805:	53                   	push   ebx
c0014806:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0014809:	83 c4 20             	add    esp,0x20
c001480c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001480e:	6a 00                	push   0x0
c0014810:	68 fa 45 01 c0       	push   0xc00145fa
c0014815:	6a 0b                	push   0xb
c0014817:	53                   	push   ebx
c0014818:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001481b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001481d:	6a 00                	push   0x0
c001481f:	68 fa 45 01 c0       	push   0xc00145fa
c0014824:	6a 0c                	push   0xc
c0014826:	53                   	push   ebx
c0014827:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001482a:	83 c4 20             	add    esp,0x20
c001482d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001482f:	6a 00                	push   0x0
c0014831:	68 aa 45 01 c0       	push   0xc00145aa
c0014836:	6a 0d                	push   0xd
c0014838:	53                   	push   ebx
c0014839:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001483c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001483e:	6a 00                	push   0x0
c0014840:	68 e3 45 01 c0       	push   0xc00145e3
c0014845:	6a 0e                	push   0xe
c0014847:	53                   	push   ebx
c0014848:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001484b:	83 c4 20             	add    esp,0x20
c001484e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014850:	6a 00                	push   0x0
c0014852:	68 fa 45 01 c0       	push   0xc00145fa
c0014857:	6a 0f                	push   0xf
c0014859:	53                   	push   ebx
c001485a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001485d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001485f:	6a 00                	push   0x0
c0014861:	68 fa 45 01 c0       	push   0xc00145fa
c0014866:	6a 10                	push   0x10
c0014868:	53                   	push   ebx
c0014869:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001486c:	83 c4 20             	add    esp,0x20
c001486f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014871:	6a 00                	push   0x0
c0014873:	68 fa 45 01 c0       	push   0xc00145fa
c0014878:	6a 11                	push   0x11
c001487a:	53                   	push   ebx
c001487b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001487e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014880:	6a 00                	push   0x0
c0014882:	68 fa 45 01 c0       	push   0xc00145fa
c0014887:	6a 12                	push   0x12
c0014889:	53                   	push   ebx
c001488a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001488d:	83 c4 20             	add    esp,0x20
c0014890:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014892:	6a 00                	push   0x0
c0014894:	68 fa 45 01 c0       	push   0xc00145fa
c0014899:	6a 13                	push   0x13
c001489b:	53                   	push   ebx
c001489c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001489f:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148a1:	6a 00                	push   0x0
c00148a3:	68 fa 45 01 c0       	push   0xc00145fa
c00148a8:	6a 14                	push   0x14
c00148aa:	53                   	push   ebx
c00148ab:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00148ae:	83 c4 20             	add    esp,0x20
c00148b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148b3:	6a 00                	push   0x0
c00148b5:	68 fa 45 01 c0       	push   0xc00145fa
c00148ba:	6a 1e                	push   0x1e
c00148bc:	53                   	push   ebx
c00148bd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00148c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148c2:	6a 00                	push   0x0
c00148c4:	68 60 fe 00 c0       	push   0xc000fe60
c00148c9:	6a 60                	push   0x60
c00148cb:	53                   	push   ebx
c00148cc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00148cf:	83 c4 20             	add    esp,0x20
c00148d2:	89 d8                	mov    eax,ebx
c00148d4:	5a                   	pop    edx
c00148d5:	5b                   	pop    ebx
c00148d6:	5e                   	pop    esi
c00148d7:	c3                   	ret    
c00148d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148da:	6a 00                	push   0x0
c00148dc:	6a 00                	push   0x0
c00148de:	6a 00                	push   0x0
c00148e0:	53                   	push   ebx
c00148e1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00148e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00148e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00148e9:	ff 50 04             	call   DWORD PTR [eax+0x4]
c00148ec:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c00148f3:	e8 ba db ff ff       	call   c00124b2 <operator new(unsigned long)>
c00148f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00148fb:	89 c3                	mov    ebx,eax
c00148fd:	e8 4e 8e 00 00       	call   c001d750 <APIC::APIC()>
c0014902:	6a 00                	push   0x0
c0014904:	6a 00                	push   0x0
c0014906:	6a 00                	push   0x0
c0014908:	53                   	push   ebx
c0014909:	e8 60 8d 00 00       	call   c001d66e <APIC::open(int, int, void*)>
c001490e:	83 c4 20             	add    esp,0x20
c0014911:	e9 30 fe ff ff       	jmp    c0014746 <setupInterruptController()+0x50>
c0014916:	83 ec 0c             	sub    esp,0xc
c0014919:	68 58 21 00 00       	push   0x2158
c001491e:	e8 8f db ff ff       	call   c00124b2 <operator new(unsigned long)>
c0014923:	89 04 24             	mov    DWORD PTR [esp],eax
c0014926:	89 c3                	mov    ebx,eax
c0014928:	e8 23 8e 00 00       	call   c001d750 <APIC::APIC()>
c001492d:	6a 00                	push   0x0
c001492f:	6a 00                	push   0x0
c0014931:	6a 00                	push   0x0
c0014933:	53                   	push   ebx
c0014934:	e8 35 8d 00 00       	call   c001d66e <APIC::open(int, int, void*)>
c0014939:	83 c4 18             	add    esp,0x18
c001493c:	53                   	push   ebx
c001493d:	ff 35 a8 b9 03 c0    	push   DWORD PTR ds:0xc003b9a8
c0014943:	e8 74 ee ff ff       	call   c00137bc <Device::addChild(Device*)>
c0014948:	83 c4 10             	add    esp,0x10
c001494b:	89 d8                	mov    eax,ebx
c001494d:	5a                   	pop    edx
c001494e:	5b                   	pop    ebx
c001494f:	5e                   	pop    esi
c0014950:	c3                   	ret    
c0014951:	90                   	nop

c0014952 <startGUI(void*)>:
c0014952:	55                   	push   ebp
c0014953:	89 e5                	mov    ebp,esp
c0014955:	53                   	push   ebx
c0014956:	83 ec 04             	sub    esp,0x4
c0014959:	e8 48 9a ff ff       	call   c000e3a6 <unlockScheduler()>
c001495e:	e8 2c 9a ff ff       	call   c000e38f <getIRQNestingLevel()>
c0014963:	83 ec 08             	sub    esp,0x8
c0014966:	50                   	push   eax
c0014967:	68 b0 9d 03 c0       	push   0xc0039db0
c001496c:	e8 91 85 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0014971:	83 c4 10             	add    esp,0x10
c0014974:	8b 1d a8 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9a8
c001497a:	83 ec 0c             	sub    esp,0xc
c001497d:	68 ca 9d 03 c0       	push   0xc0039dca
c0014982:	e8 5b 7d ff ff       	call   c000c6e2 <loadDLL(char const*)>
c0014987:	83 c4 10             	add    esp,0x10
c001498a:	83 ec 08             	sub    esp,0x8
c001498d:	53                   	push   ebx
c001498e:	50                   	push   eax
c001498f:	e8 17 7e ff ff       	call   c000c7ab <executeDLL(unsigned long, void*)>
c0014994:	83 c4 10             	add    esp,0x10
c0014997:	8b 1d a8 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9a8
c001499d:	83 ec 0c             	sub    esp,0xc
c00149a0:	68 e4 9d 03 c0       	push   0xc0039de4
c00149a5:	e8 38 7d ff ff       	call   c000c6e2 <loadDLL(char const*)>
c00149aa:	83 c4 10             	add    esp,0x10
c00149ad:	83 ec 08             	sub    esp,0x8
c00149b0:	53                   	push   ebx
c00149b1:	50                   	push   eax
c00149b2:	e8 f4 7d ff ff       	call   c000c7ab <executeDLL(unsigned long, void*)>
c00149b7:	83 c4 10             	add    esp,0x10
c00149ba:	90                   	nop
c00149bb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00149be:	c9                   	leave  
c00149bf:	c3                   	ret    

c00149c0 <sendKeyToTerminal(unsigned char)>:
c00149c0:	55                   	push   ebp
c00149c1:	89 e5                	mov    ebp,esp
c00149c3:	83 ec 28             	sub    esp,0x28
c00149c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00149c9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00149cc:	a1 44 be 03 c0       	mov    eax,ds:0xc003be44
c00149d1:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00149d5:	83 ec 08             	sub    esp,0x8
c00149d8:	52                   	push   edx
c00149d9:	50                   	push   eax
c00149da:	e8 c7 c2 ff ff       	call   c0010ca6 <VgaText::receiveKey(unsigned char)>
c00149df:	83 c4 10             	add    esp,0x10
c00149e2:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c00149e6:	75 41                	jne    c0014a29 <sendKeyToTerminal(unsigned char)+0x69>
c00149e8:	e8 de 99 ff ff       	call   c000e3cb <lockStuff()>
c00149ed:	a1 a0 be 03 c0       	mov    eax,ds:0xc003bea0
c00149f2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00149f5:	c7 05 a0 be 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003bea0,0x0
c00149ff:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0014a03:	74 1f                	je     c0014a24 <sendKeyToTerminal(unsigned char)+0x64>
c0014a05:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014a08:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0014a0b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0014a0e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0014a11:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014a14:	83 ec 0c             	sub    esp,0xc
c0014a17:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0014a1a:	e8 a9 a1 ff ff       	call   c000ebc8 <unblockTask(ThreadControlBlock*)>
c0014a1f:	83 c4 10             	add    esp,0x10
c0014a22:	eb db                	jmp    c00149ff <sendKeyToTerminal(unsigned char)+0x3f>
c0014a24:	e8 34 9d ff ff       	call   c000e75d <unlockStuff()>
c0014a29:	90                   	nop
c0014a2a:	c9                   	leave  
c0014a2b:	c3                   	ret    

c0014a2c <sendKeyboardToken(KeyboardToken)>:
c0014a2c:	55                   	push   ebp
c0014a2d:	89 e5                	mov    ebp,esp
c0014a2f:	83 ec 18             	sub    esp,0x18
c0014a32:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0014a35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a38:	0f b7 c0             	movzx  eax,ax
c0014a3b:	83 f2 01             	xor    edx,0x1
c0014a3e:	88 90 c0 be 03 c0    	mov    BYTE PTR [eax-0x3ffc4140],dl
c0014a44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a47:	66 3d 03 02          	cmp    ax,0x203
c0014a4b:	75 07                	jne    c0014a54 <sendKeyboardToken(KeyboardToken)+0x28>
c0014a4d:	a0 c0 bf 03 c0       	mov    al,ds:0xc003bfc0
c0014a52:	84 c0                	test   al,al
c0014a54:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0014a58:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0014a5b:	a0 c8 c2 03 c0       	mov    al,ds:0xc003c2c8
c0014a60:	38 c2                	cmp    dl,al
c0014a62:	74 1c                	je     c0014a80 <sendKeyboardToken(KeyboardToken)+0x54>
c0014a64:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0014a67:	a2 c8 c2 03 c0       	mov    ds:0xc003c2c8,al
c0014a6c:	a0 c8 c2 03 c0       	mov    al,ds:0xc003c2c8
c0014a71:	0f b6 c0             	movzx  eax,al
c0014a74:	83 ec 0c             	sub    esp,0xc
c0014a77:	50                   	push   eax
c0014a78:	e8 97 b4 ff ff       	call   c000ff14 <setTerminalScrollLock(bool)>
c0014a7d:	83 c4 10             	add    esp,0x10
c0014a80:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0014a83:	84 c0                	test   al,al
c0014a85:	0f 84 ae 00 00 00    	je     c0014b39 <sendKeyboardToken(KeyboardToken)+0x10d>
c0014a8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a8e:	66 3d 10 03          	cmp    ax,0x310
c0014a92:	75 06                	jne    c0014a9a <sendKeyboardToken(KeyboardToken)+0x6e>
c0014a94:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0014a9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014a9d:	66 3d 11 03          	cmp    ax,0x311
c0014aa1:	75 06                	jne    c0014aa9 <sendKeyboardToken(KeyboardToken)+0x7d>
c0014aa3:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0014aa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aac:	66 3d 12 03          	cmp    ax,0x312
c0014ab0:	75 06                	jne    c0014ab8 <sendKeyboardToken(KeyboardToken)+0x8c>
c0014ab2:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0014ab8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014abb:	66 3d 13 03          	cmp    ax,0x313
c0014abf:	75 06                	jne    c0014ac7 <sendKeyboardToken(KeyboardToken)+0x9b>
c0014ac1:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0014ac7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014aca:	66 3d 14 03          	cmp    ax,0x314
c0014ace:	75 06                	jne    c0014ad6 <sendKeyboardToken(KeyboardToken)+0xaa>
c0014ad0:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0014ad6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ad9:	66 3d 15 03          	cmp    ax,0x315
c0014add:	75 06                	jne    c0014ae5 <sendKeyboardToken(KeyboardToken)+0xb9>
c0014adf:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0014ae5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ae8:	66 3d 16 03          	cmp    ax,0x316
c0014aec:	75 06                	jne    c0014af4 <sendKeyboardToken(KeyboardToken)+0xc8>
c0014aee:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0014af4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014af7:	66 3d 17 03          	cmp    ax,0x317
c0014afb:	75 06                	jne    c0014b03 <sendKeyboardToken(KeyboardToken)+0xd7>
c0014afd:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0014b03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b06:	66 3d 18 03          	cmp    ax,0x318
c0014b0a:	75 06                	jne    c0014b12 <sendKeyboardToken(KeyboardToken)+0xe6>
c0014b0c:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0014b12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b15:	66 3d 19 03          	cmp    ax,0x319
c0014b19:	75 06                	jne    c0014b21 <sendKeyboardToken(KeyboardToken)+0xf5>
c0014b1b:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0014b21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b24:	66 3d 1a 03          	cmp    ax,0x31a
c0014b28:	0f 85 c9 00 00 00    	jne    c0014bf7 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0014b2e:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0014b34:	e9 be 00 00 00       	jmp    c0014bf7 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0014b39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b3c:	66 3d 10 03          	cmp    ax,0x310
c0014b40:	75 0a                	jne    c0014b4c <sendKeyboardToken(KeyboardToken)+0x120>
c0014b42:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0014b48:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b4f:	66 3d 11 03          	cmp    ax,0x311
c0014b53:	75 0a                	jne    c0014b5f <sendKeyboardToken(KeyboardToken)+0x133>
c0014b55:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0014b5b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b62:	66 3d 12 03          	cmp    ax,0x312
c0014b66:	75 0a                	jne    c0014b72 <sendKeyboardToken(KeyboardToken)+0x146>
c0014b68:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0014b6e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b75:	66 3d 13 03          	cmp    ax,0x313
c0014b79:	75 0a                	jne    c0014b85 <sendKeyboardToken(KeyboardToken)+0x159>
c0014b7b:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0014b81:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b88:	66 3d 14 03          	cmp    ax,0x314
c0014b8c:	75 0a                	jne    c0014b98 <sendKeyboardToken(KeyboardToken)+0x16c>
c0014b8e:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0014b94:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014b98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014b9b:	66 3d 15 03          	cmp    ax,0x315
c0014b9f:	75 0a                	jne    c0014bab <sendKeyboardToken(KeyboardToken)+0x17f>
c0014ba1:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0014ba7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014bab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bae:	66 3d 16 03          	cmp    ax,0x316
c0014bb2:	75 0a                	jne    c0014bbe <sendKeyboardToken(KeyboardToken)+0x192>
c0014bb4:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0014bba:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014bbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bc1:	66 3d 17 03          	cmp    ax,0x317
c0014bc5:	75 0a                	jne    c0014bd1 <sendKeyboardToken(KeyboardToken)+0x1a5>
c0014bc7:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0014bcd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014bd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bd4:	66 3d 18 03          	cmp    ax,0x318
c0014bd8:	75 0a                	jne    c0014be4 <sendKeyboardToken(KeyboardToken)+0x1b8>
c0014bda:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0014be0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014be4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014be7:	66 3d 19 03          	cmp    ax,0x319
c0014beb:	75 0a                	jne    c0014bf7 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0014bed:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0014bf3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0014bf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014bfa:	66 3d 00 02          	cmp    ax,0x200
c0014bfe:	75 2a                	jne    c0014c2a <sendKeyboardToken(KeyboardToken)+0x1fe>
c0014c00:	a0 c0 c2 03 c0       	mov    al,ds:0xc003c2c0
c0014c05:	83 f0 01             	xor    eax,0x1
c0014c08:	84 c0                	test   al,al
c0014c0a:	74 1e                	je     c0014c2a <sendKeyboardToken(KeyboardToken)+0x1fe>
c0014c0c:	a1 fc bb 03 c0       	mov    eax,ds:0xc003bbfc
c0014c11:	6a 01                	push   0x1
c0014c13:	6a 00                	push   0x0
c0014c15:	68 52 49 01 c0       	push   0xc0014952
c0014c1a:	50                   	push   eax
c0014c1b:	e8 ae 98 ff ff       	call   c000e4ce <Process::createThread(void (*)(void*), void*, int)>
c0014c20:	83 c4 10             	add    esp,0x10
c0014c23:	c6 05 c0 c2 03 c0 01 	mov    BYTE PTR ds:0xc003c2c0,0x1
c0014c2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c2d:	66 3d 1d 03          	cmp    ax,0x31d
c0014c31:	75 06                	jne    c0014c39 <sendKeyboardToken(KeyboardToken)+0x20d>
c0014c33:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0014c39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c3c:	66 3d 1c 03          	cmp    ax,0x31c
c0014c40:	75 06                	jne    c0014c48 <sendKeyboardToken(KeyboardToken)+0x21c>
c0014c42:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0014c48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c4b:	66 3d 1b 03          	cmp    ax,0x31b
c0014c4f:	75 06                	jne    c0014c57 <sendKeyboardToken(KeyboardToken)+0x22b>
c0014c51:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0014c57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c5a:	66 3d 1e 03          	cmp    ax,0x31e
c0014c5e:	75 06                	jne    c0014c66 <sendKeyboardToken(KeyboardToken)+0x23a>
c0014c60:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0014c66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c69:	66 3d 1f 03          	cmp    ax,0x31f
c0014c6d:	75 06                	jne    c0014c75 <sendKeyboardToken(KeyboardToken)+0x249>
c0014c6f:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0014c75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014c78:	66 3d 1a 03          	cmp    ax,0x31a
c0014c7c:	75 06                	jne    c0014c84 <sendKeyboardToken(KeyboardToken)+0x258>
c0014c7e:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0014c84:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0014c88:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014c8b:	83 f0 01             	xor    eax,0x1
c0014c8e:	84 c0                	test   al,al
c0014c90:	74 77                	je     c0014d09 <sendKeyboardToken(KeyboardToken)+0x2dd>
c0014c92:	a0 c1 bf 03 c0       	mov    al,ds:0xc003bfc1
c0014c97:	84 c0                	test   al,al
c0014c99:	74 41                	je     c0014cdc <sendKeyboardToken(KeyboardToken)+0x2b0>
c0014c9b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0014c9f:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0014ca3:	74 2b                	je     c0014cd0 <sendKeyboardToken(KeyboardToken)+0x2a4>
c0014ca5:	8b 15 c4 c2 03 c0    	mov    edx,DWORD PTR ds:0xc003c2c4
c0014cab:	89 d0                	mov    eax,edx
c0014cad:	c1 e0 02             	shl    eax,0x2
c0014cb0:	01 d0                	add    eax,edx
c0014cb2:	01 c0                	add    eax,eax
c0014cb4:	a3 c4 c2 03 c0       	mov    ds:0xc003c2c4,eax
c0014cb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014cbc:	0f b7 c0             	movzx  eax,ax
c0014cbf:	8d 50 d0             	lea    edx,[eax-0x30]
c0014cc2:	a1 c4 c2 03 c0       	mov    eax,ds:0xc003c2c4
c0014cc7:	01 d0                	add    eax,edx
c0014cc9:	a3 c4 c2 03 c0       	mov    ds:0xc003c2c4,eax
c0014cce:	eb 6d                	jmp    c0014d3d <sendKeyboardToken(KeyboardToken)+0x311>
c0014cd0:	c7 05 c4 c2 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c2c4,0x0
c0014cda:	eb 61                	jmp    c0014d3d <sendKeyboardToken(KeyboardToken)+0x311>
c0014cdc:	a1 c4 c2 03 c0       	mov    eax,ds:0xc003c2c4
c0014ce1:	85 c0                	test   eax,eax
c0014ce3:	74 18                	je     c0014cfd <sendKeyboardToken(KeyboardToken)+0x2d1>
c0014ce5:	a1 c4 c2 03 c0       	mov    eax,ds:0xc003c2c4
c0014cea:	0f b6 c0             	movzx  eax,al
c0014ced:	83 ec 0c             	sub    esp,0xc
c0014cf0:	50                   	push   eax
c0014cf1:	e8 ca fc ff ff       	call   c00149c0 <sendKeyToTerminal(unsigned char)>
c0014cf6:	83 c4 10             	add    esp,0x10
c0014cf9:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0014cfd:	c7 05 c4 c2 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c2c4,0x0
c0014d07:	eb 34                	jmp    c0014d3d <sendKeyboardToken(KeyboardToken)+0x311>
c0014d09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d0c:	66 3d 01 01          	cmp    ax,0x101
c0014d10:	75 2b                	jne    c0014d3d <sendKeyboardToken(KeyboardToken)+0x311>
c0014d12:	a1 c4 c2 03 c0       	mov    eax,ds:0xc003c2c4
c0014d17:	85 c0                	test   eax,eax
c0014d19:	74 18                	je     c0014d33 <sendKeyboardToken(KeyboardToken)+0x307>
c0014d1b:	a1 c4 c2 03 c0       	mov    eax,ds:0xc003c2c4
c0014d20:	0f b6 c0             	movzx  eax,al
c0014d23:	83 ec 0c             	sub    esp,0xc
c0014d26:	50                   	push   eax
c0014d27:	e8 94 fc ff ff       	call   c00149c0 <sendKeyToTerminal(unsigned char)>
c0014d2c:	83 c4 10             	add    esp,0x10
c0014d2f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0014d33:	c7 05 c4 c2 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c2c4,0x0
c0014d3d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0014d40:	83 f0 01             	xor    eax,0x1
c0014d43:	84 c0                	test   al,al
c0014d45:	74 4c                	je     c0014d93 <sendKeyboardToken(KeyboardToken)+0x367>
c0014d47:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014d4a:	83 f0 01             	xor    eax,0x1
c0014d4d:	84 c0                	test   al,al
c0014d4f:	74 42                	je     c0014d93 <sendKeyboardToken(KeyboardToken)+0x367>
c0014d51:	a0 c0 bf 03 c0       	mov    al,ds:0xc003bfc0
c0014d56:	83 f0 01             	xor    eax,0x1
c0014d59:	84 c0                	test   al,al
c0014d5b:	74 36                	je     c0014d93 <sendKeyboardToken(KeyboardToken)+0x367>
c0014d5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d60:	66 83 f8 1f          	cmp    ax,0x1f
c0014d64:	76 09                	jbe    c0014d6f <sendKeyboardToken(KeyboardToken)+0x343>
c0014d66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d69:	66 83 f8 7e          	cmp    ax,0x7e
c0014d6d:	76 12                	jbe    c0014d81 <sendKeyboardToken(KeyboardToken)+0x355>
c0014d6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d72:	66 83 f8 0a          	cmp    ax,0xa
c0014d76:	74 09                	je     c0014d81 <sendKeyboardToken(KeyboardToken)+0x355>
c0014d78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d7b:	66 83 f8 08          	cmp    ax,0x8
c0014d7f:	75 12                	jne    c0014d93 <sendKeyboardToken(KeyboardToken)+0x367>
c0014d81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014d84:	0f b6 c0             	movzx  eax,al
c0014d87:	83 ec 0c             	sub    esp,0xc
c0014d8a:	50                   	push   eax
c0014d8b:	e8 30 fc ff ff       	call   c00149c0 <sendKeyToTerminal(unsigned char)>
c0014d90:	83 c4 10             	add    esp,0x10
c0014d93:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0014d96:	83 f0 01             	xor    eax,0x1
c0014d99:	84 c0                	test   al,al
c0014d9b:	74 4f                	je     c0014dec <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014d9d:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014da0:	83 f0 01             	xor    eax,0x1
c0014da3:	84 c0                	test   al,al
c0014da5:	74 45                	je     c0014dec <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014da7:	a0 c0 bf 03 c0       	mov    al,ds:0xc003bfc0
c0014dac:	84 c0                	test   al,al
c0014dae:	74 3c                	je     c0014dec <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014db0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014db3:	66 83 f8 3f          	cmp    ax,0x3f
c0014db7:	76 33                	jbe    c0014dec <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014db9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dbc:	66 83 f8 7f          	cmp    ax,0x7f
c0014dc0:	77 2a                	ja     c0014dec <sendKeyboardToken(KeyboardToken)+0x3c0>
c0014dc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dc5:	88 c2                	mov    dl,al
c0014dc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014dca:	66 83 f8 5f          	cmp    ax,0x5f
c0014dce:	76 04                	jbe    c0014dd4 <sendKeyboardToken(KeyboardToken)+0x3a8>
c0014dd0:	b0 20                	mov    al,0x20
c0014dd2:	eb 02                	jmp    c0014dd6 <sendKeyboardToken(KeyboardToken)+0x3aa>
c0014dd4:	b0 00                	mov    al,0x0
c0014dd6:	29 c2                	sub    edx,eax
c0014dd8:	88 d0                	mov    al,dl
c0014dda:	83 e8 40             	sub    eax,0x40
c0014ddd:	0f b6 c0             	movzx  eax,al
c0014de0:	83 ec 0c             	sub    esp,0xc
c0014de3:	50                   	push   eax
c0014de4:	e8 d7 fb ff ff       	call   c00149c0 <sendKeyToTerminal(unsigned char)>
c0014de9:	83 c4 10             	add    esp,0x10
c0014dec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014def:	66 3d 00 03          	cmp    ax,0x300
c0014df3:	75 0f                	jne    c0014e04 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0014df5:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0014df8:	83 f0 01             	xor    eax,0x1
c0014dfb:	84 c0                	test   al,al
c0014dfd:	74 05                	je     c0014e04 <sendKeyboardToken(KeyboardToken)+0x3d8>
c0014dff:	e8 37 b9 ff ff       	call   c001073b <doTerminalCycle()>
c0014e04:	90                   	nop
c0014e05:	c9                   	leave  
c0014e06:	c3                   	ret    

c0014e07 <clearInternalKeybuffer(VgaText*)>:
c0014e07:	55                   	push   ebp
c0014e08:	89 e5                	mov    ebp,esp
c0014e0a:	83 ec 08             	sub    esp,0x8
c0014e0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e10:	05 34 11 00 00       	add    eax,0x1134
c0014e15:	83 ec 0c             	sub    esp,0xc
c0014e18:	50                   	push   eax
c0014e19:	e8 e3 b8 fe ff       	call   c0000701 <strlen>
c0014e1e:	83 c4 10             	add    esp,0x10
c0014e21:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014e24:	81 c2 34 11 00 00    	add    edx,0x1134
c0014e2a:	83 ec 04             	sub    esp,0x4
c0014e2d:	50                   	push   eax
c0014e2e:	6a 00                	push   0x0
c0014e30:	52                   	push   edx
c0014e31:	e8 a2 b8 fe ff       	call   c00006d8 <memset>
c0014e36:	83 c4 10             	add    esp,0x10
c0014e39:	90                   	nop
c0014e3a:	c9                   	leave  
c0014e3b:	c3                   	ret    

c0014e3c <readKeyboard(VgaText*, char*, unsigned long)>:
c0014e3c:	55                   	push   ebp
c0014e3d:	89 e5                	mov    ebp,esp
c0014e3f:	83 ec 18             	sub    esp,0x18
c0014e42:	fb                   	sti    
c0014e43:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0014e4a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0014e4e:	74 77                	je     c0014ec7 <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0014e50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e53:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0014e59:	84 c0                	test   al,al
c0014e5b:	75 02                	jne    c0014e5f <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0014e5d:	eb f1                	jmp    c0014e50 <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0014e5f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0014e62:	8d 50 01             	lea    edx,[eax+0x1]
c0014e65:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0014e68:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014e6b:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0014e71:	88 10                	mov    BYTE PTR [eax],dl
c0014e73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e76:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0014e7c:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0014e7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014e82:	05 34 11 00 00       	add    eax,0x1134
c0014e87:	83 ec 0c             	sub    esp,0xc
c0014e8a:	50                   	push   eax
c0014e8b:	e8 71 b8 fe ff       	call   c0000701 <strlen>
c0014e90:	83 c4 10             	add    esp,0x10
c0014e93:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014e96:	81 c2 34 11 00 00    	add    edx,0x1134
c0014e9c:	8d 4a 01             	lea    ecx,[edx+0x1]
c0014e9f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0014ea2:	81 c2 34 11 00 00    	add    edx,0x1134
c0014ea8:	83 ec 04             	sub    esp,0x4
c0014eab:	50                   	push   eax
c0014eac:	51                   	push   ecx
c0014ead:	52                   	push   edx
c0014eae:	e8 41 b7 fe ff       	call   c00005f4 <memmove>
c0014eb3:	83 c4 10             	add    esp,0x10
c0014eb6:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0014eb9:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ebc:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0014ec0:	75 88                	jne    c0014e4a <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0014ec2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014ec5:	eb 03                	jmp    c0014eca <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c0014ec7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014eca:	c9                   	leave  
c0014ecb:	c3                   	ret    

c0014ecc <Keyboard::Keyboard(char const*)>:
c0014ecc:	83 ec 0c             	sub    esp,0xc
c0014ecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ed3:	83 ec 08             	sub    esp,0x8
c0014ed6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014eda:	50                   	push   eax
c0014edb:	e8 cc ea ff ff       	call   c00139ac <Device::Device(char const*)>
c0014ee0:	83 c4 10             	add    esp,0x10
c0014ee3:	ba 08 9e 03 c0       	mov    edx,0xc0039e08
c0014ee8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014eec:	89 10                	mov    DWORD PTR [eax],edx
c0014eee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ef2:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0014efc:	c6 05 a4 be 03 c0 01 	mov    BYTE PTR ds:0xc003bea4,0x1
c0014f03:	90                   	nop
c0014f04:	83 c4 0c             	add    esp,0xc
c0014f07:	c3                   	ret    

c0014f08 <Keyboard::~Keyboard()>:
c0014f08:	83 ec 0c             	sub    esp,0xc
c0014f0b:	ba 08 9e 03 c0       	mov    edx,0xc0039e08
c0014f10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f14:	89 10                	mov    DWORD PTR [eax],edx
c0014f16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f1a:	83 ec 0c             	sub    esp,0xc
c0014f1d:	50                   	push   eax
c0014f1e:	e8 3b e7 ff ff       	call   c001365e <Device::~Device()>
c0014f23:	83 c4 10             	add    esp,0x10
c0014f26:	90                   	nop
c0014f27:	83 c4 0c             	add    esp,0xc
c0014f2a:	c3                   	ret    
c0014f2b:	90                   	nop

c0014f2c <Keyboard::~Keyboard()>:
c0014f2c:	83 ec 0c             	sub    esp,0xc
c0014f2f:	83 ec 0c             	sub    esp,0xc
c0014f32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f36:	e8 cd ff ff ff       	call   c0014f08 <Keyboard::~Keyboard()>
c0014f3b:	83 c4 10             	add    esp,0x10
c0014f3e:	83 ec 08             	sub    esp,0x8
c0014f41:	68 5c 01 00 00       	push   0x15c
c0014f46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f4a:	e8 72 d5 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c0014f4f:	83 c4 10             	add    esp,0x10
c0014f52:	83 c4 0c             	add    esp,0xc
c0014f55:	c3                   	ret    

c0014f56 <LogicalDisk::close(int, int, void*)>:
c0014f56:	83 c8 ff             	or     eax,0xffffffff
c0014f59:	c3                   	ret    

c0014f5a <LogicalDisk::~LogicalDisk()>:
c0014f5a:	83 ec 0c             	sub    esp,0xc
c0014f5d:	ba b8 9e 03 c0       	mov    edx,0xc0039eb8
c0014f62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f66:	89 10                	mov    DWORD PTR [eax],edx
c0014f68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014f6c:	83 ec 0c             	sub    esp,0xc
c0014f6f:	50                   	push   eax
c0014f70:	e8 e9 e6 ff ff       	call   c001365e <Device::~Device()>
c0014f75:	83 c4 10             	add    esp,0x10
c0014f78:	90                   	nop
c0014f79:	83 c4 0c             	add    esp,0xc
c0014f7c:	c3                   	ret    
c0014f7d:	90                   	nop

c0014f7e <LogicalDisk::~LogicalDisk()>:
c0014f7e:	83 ec 0c             	sub    esp,0xc
c0014f81:	83 ec 0c             	sub    esp,0xc
c0014f84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f88:	e8 cd ff ff ff       	call   c0014f5a <LogicalDisk::~LogicalDisk()>
c0014f8d:	83 c4 10             	add    esp,0x10
c0014f90:	83 ec 08             	sub    esp,0x8
c0014f93:	68 74 01 00 00       	push   0x174
c0014f98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f9c:	e8 20 d5 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c0014fa1:	83 c4 10             	add    esp,0x10
c0014fa4:	83 c4 0c             	add    esp,0xc
c0014fa7:	c3                   	ret    

c0014fa8 <LogicalDisk::open(int, int, void*)>:
c0014fa8:	83 ec 18             	sub    esp,0x18
c0014fab:	68 34 9e 03 c0       	push   0xc0039e34
c0014fb0:	e8 6b 80 ff ff       	call   c000d020 <panic(char const*)>
c0014fb5:	83 c8 ff             	or     eax,0xffffffff
c0014fb8:	83 c4 1c             	add    esp,0x1c
c0014fbb:	c3                   	ret    

c0014fbc <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0014fbc:	53                   	push   ebx
c0014fbd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014fc1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014fc5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014fc9:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0014fcf:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0014fd5:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0014fdb:	77 10                	ja     c0014fed <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0014fdd:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0014fe3:	89 d3                	mov    ebx,edx
c0014fe5:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0014feb:	72 05                	jb     c0014ff2 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0014fed:	83 c8 ff             	or     eax,0xffffffff
c0014ff0:	89 c2                	mov    edx,eax
c0014ff2:	5b                   	pop    ebx
c0014ff3:	c3                   	ret    

c0014ff4 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0014ff4:	56                   	push   esi
c0014ff5:	83 c8 ff             	or     eax,0xffffffff
c0014ff8:	53                   	push   ebx
c0014ff9:	89 c2                	mov    edx,eax
c0014ffb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014fff:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0015003:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015007:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001500d:	77 27                	ja     c0015036 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001500f:	89 d8                	mov    eax,ebx
c0015011:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0015017:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001501d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015022:	89 c2                	mov    edx,eax
c0015024:	73 10                	jae    c0015036 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0015026:	89 c8                	mov    eax,ecx
c0015028:	89 da                	mov    edx,ebx
c001502a:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0015030:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0015036:	5b                   	pop    ebx
c0015037:	5e                   	pop    esi
c0015038:	c3                   	ret    
c0015039:	90                   	nop

c001503a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c001503a:	83 ec 1c             	sub    esp,0x1c
c001503d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015041:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015045:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015049:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001504d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015051:	89 04 24             	mov    DWORD PTR [esp],eax
c0015054:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0015058:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001505c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015060:	83 ec 08             	sub    esp,0x8
c0015063:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015067:	50                   	push   eax
c0015068:	e8 3f e9 ff ff       	call   c00139ac <Device::Device(char const*)>
c001506d:	83 c4 10             	add    esp,0x10
c0015070:	ba b8 9e 03 c0       	mov    edx,0xc0039eb8
c0015075:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015079:	89 10                	mov    DWORD PTR [eax],edx
c001507b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001507f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015086:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001508a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0015091:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015095:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001509f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00150a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00150a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00150ab:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00150b1:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00150b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00150bb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00150be:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00150c2:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00150c8:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00150ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150d2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00150d6:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00150dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150e0:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00150ea:	90                   	nop
c00150eb:	83 c4 1c             	add    esp,0x1c
c00150ee:	c3                   	ret    
c00150ef:	90                   	nop

c00150f0 <LogicalDisk::assignDriveLetter()>:
c00150f0:	55                   	push   ebp
c00150f1:	57                   	push   edi
c00150f2:	56                   	push   esi
c00150f3:	53                   	push   ebx
c00150f4:	83 ec 14             	sub    esp,0x14
c00150f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00150fb:	8b 3d e0 c2 03 c0    	mov    edi,DWORD PTR ds:0xc003c2e0
c0015101:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0015107:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001510b:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0015111:	8b 3d e4 c2 03 c0    	mov    edi,DWORD PTR ds:0xc003c2e4
c0015117:	3c 01                	cmp    al,0x1
c0015119:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001511d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0015121:	19 c0                	sbb    eax,eax
c0015123:	83 e0 02             	and    eax,0x2
c0015126:	83 c0 41             	add    eax,0x41
c0015129:	0f be e8             	movsx  ebp,al
c001512c:	3c 43                	cmp    al,0x43
c001512e:	75 10                	jne    c0015140 <LogicalDisk::assignDriveLetter()+0x50>
c0015130:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0015137:	75 5d                	jne    c0015196 <LogicalDisk::assignDriveLetter()+0xa6>
c0015139:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001513e:	75 56                	jne    c0015196 <LogicalDisk::assignDriveLetter()+0xa6>
c0015140:	8d 75 bf             	lea    esi,[ebp-0x41]
c0015143:	ba 01 00 00 00       	mov    edx,0x1
c0015148:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001514c:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0015150:	d3 e2                	shl    edx,cl
c0015152:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015156:	89 d7                	mov    edi,edx
c0015158:	89 d6                	mov    esi,edx
c001515a:	c1 ff 1f             	sar    edi,0x1f
c001515d:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0015161:	21 f9                	and    ecx,edi
c0015163:	09 d1                	or     ecx,edx
c0015165:	75 2f                	jne    c0015196 <LogicalDisk::assignDriveLetter()+0xa6>
c0015167:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001516b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001516f:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0015175:	09 f2                	or     edx,esi
c0015177:	89 15 e0 c2 03 c0    	mov    DWORD PTR ds:0xc003c2e0,edx
c001517d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015181:	09 fa                	or     edx,edi
c0015183:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0015187:	89 15 e4 c2 03 c0    	mov    DWORD PTR ds:0xc003c2e4,edx
c001518d:	89 1c bd 00 c3 03 c0 	mov    DWORD PTR [edi*4-0x3ffc3d00],ebx
c0015194:	eb 08                	jmp    c001519e <LogicalDisk::assignDriveLetter()+0xae>
c0015196:	45                   	inc    ebp
c0015197:	40                   	inc    eax
c0015198:	3c 5b                	cmp    al,0x5b
c001519a:	75 90                	jne    c001512c <LogicalDisk::assignDriveLetter()+0x3c>
c001519c:	31 c0                	xor    eax,eax
c001519e:	83 c4 14             	add    esp,0x14
c00151a1:	5b                   	pop    ebx
c00151a2:	5e                   	pop    esi
c00151a3:	5f                   	pop    edi
c00151a4:	5d                   	pop    ebp
c00151a5:	c3                   	ret    

c00151a6 <LogicalDisk::mount()>:
c00151a6:	56                   	push   esi
c00151a7:	53                   	push   ebx
c00151a8:	51                   	push   ecx
c00151a9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00151ad:	8b 1d 60 be 03 c0    	mov    ebx,DWORD PTR ds:0xc003be60
c00151b3:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00151bd:	85 db                	test   ebx,ebx
c00151bf:	74 50                	je     c0015211 <LogicalDisk::mount()+0x6b>
c00151c1:	e8 c9 91 ff ff       	call   c000e38f <getIRQNestingLevel()>
c00151c6:	52                   	push   edx
c00151c7:	52                   	push   edx
c00151c8:	50                   	push   eax
c00151c9:	68 58 9e 03 c0       	push   0xc0039e58
c00151ce:	e8 2f 7d ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c00151d3:	83 c4 0c             	add    esp,0xc
c00151d6:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00151dd:	8b 13                	mov    edx,DWORD PTR [ebx]
c00151df:	83 e8 41             	sub    eax,0x41
c00151e2:	50                   	push   eax
c00151e3:	56                   	push   esi
c00151e4:	53                   	push   ebx
c00151e5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00151e8:	83 c4 10             	add    esp,0x10
c00151eb:	84 c0                	test   al,al
c00151ed:	74 08                	je     c00151f7 <LogicalDisk::mount()+0x51>
c00151ef:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00151f5:	eb 1c                	jmp    c0015213 <LogicalDisk::mount()+0x6d>
c00151f7:	e8 93 91 ff ff       	call   c000e38f <getIRQNestingLevel()>
c00151fc:	51                   	push   ecx
c00151fd:	51                   	push   ecx
c00151fe:	50                   	push   eax
c00151ff:	68 73 9e 03 c0       	push   0xc0039e73
c0015204:	e8 f9 7c ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0015209:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001520c:	83 c4 10             	add    esp,0x10
c001520f:	eb ac                	jmp    c00151bd <LogicalDisk::mount()+0x17>
c0015211:	31 c0                	xor    eax,eax
c0015213:	5a                   	pop    edx
c0015214:	5b                   	pop    ebx
c0015215:	5e                   	pop    esi
c0015216:	c3                   	ret    
c0015217:	90                   	nop

c0015218 <LogicalDisk::unmount()>:
c0015218:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001521c:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0015226:	c3                   	ret    
c0015227:	90                   	nop

c0015228 <LogicalDisk::unassignDriveLetter()>:
c0015228:	57                   	push   edi
c0015229:	56                   	push   esi
c001522a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001522e:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0015235:	84 c9                	test   cl,cl
c0015237:	75 0f                	jne    c0015248 <LogicalDisk::unassignDriveLetter()+0x20>
c0015239:	c7 44 24 0c 8e 9e 03 c0 	mov    DWORD PTR [esp+0xc],0xc0039e8e
c0015241:	5e                   	pop    esi
c0015242:	5f                   	pop    edi
c0015243:	e9 d8 7d ff ff       	jmp    c000d020 <panic(char const*)>
c0015248:	83 e9 41             	sub    ecx,0x41
c001524b:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0015252:	b8 01 00 00 00       	mov    eax,0x1
c0015257:	c7 04 8d 00 c3 03 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffc3d00],0x0
c0015262:	d3 e0                	shl    eax,cl
c0015264:	89 c7                	mov    edi,eax
c0015266:	f7 d0                	not    eax
c0015268:	c1 ff 1f             	sar    edi,0x1f
c001526b:	21 05 e0 c2 03 c0    	and    DWORD PTR ds:0xc003c2e0,eax
c0015271:	89 fe                	mov    esi,edi
c0015273:	f7 d6                	not    esi
c0015275:	21 35 e4 c2 03 c0    	and    DWORD PTR ds:0xc003c2e4,esi
c001527b:	5e                   	pop    esi
c001527c:	5f                   	pop    edi
c001527d:	c3                   	ret    

c001527e <LogicalDisk::read(unsigned long long, int, void*)>:
c001527e:	57                   	push   edi
c001527f:	56                   	push   esi
c0015280:	53                   	push   ebx
c0015281:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015285:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015289:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001528d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015291:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015297:	77 41                	ja     c00152da <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0015299:	99                   	cdq    
c001529a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00152a0:	01 c8                	add    eax,ecx
c00152a2:	11 da                	adc    edx,ebx
c00152a4:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00152aa:	19 d7                	sbb    edi,edx
c00152ac:	72 33                	jb     c00152e1 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00152ae:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00152b4:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00152ba:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00152be:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00152c2:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00152c8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00152ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00152d2:	5b                   	pop    ebx
c00152d3:	5e                   	pop    esi
c00152d4:	5f                   	pop    edi
c00152d5:	e9 9a 09 00 00       	jmp    c0015c74 <VCache::read(unsigned long long, int, void*)>
c00152da:	b8 05 00 00 00       	mov    eax,0x5
c00152df:	eb 05                	jmp    c00152e6 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00152e1:	b8 07 00 00 00       	mov    eax,0x7
c00152e6:	5b                   	pop    ebx
c00152e7:	5e                   	pop    esi
c00152e8:	5f                   	pop    edi
c00152e9:	c3                   	ret    

c00152ea <LogicalDisk::write(unsigned long long, int, void*)>:
c00152ea:	57                   	push   edi
c00152eb:	56                   	push   esi
c00152ec:	53                   	push   ebx
c00152ed:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00152f1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00152f5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00152f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00152fd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0015303:	77 41                	ja     c0015346 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0015305:	99                   	cdq    
c0015306:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001530c:	01 c8                	add    eax,ecx
c001530e:	11 da                	adc    edx,ebx
c0015310:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0015316:	19 d7                	sbb    edi,edx
c0015318:	72 33                	jb     c001534d <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001531a:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0015320:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0015326:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001532a:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001532e:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0015334:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001533a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001533e:	5b                   	pop    ebx
c001533f:	5e                   	pop    esi
c0015340:	5f                   	pop    edi
c0015341:	e9 4a 08 00 00       	jmp    c0015b90 <VCache::write(unsigned long long, int, void*)>
c0015346:	b8 05 00 00 00       	mov    eax,0x5
c001534b:	eb 05                	jmp    c0015352 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001534d:	b8 07 00 00 00       	mov    eax,0x7
c0015352:	5b                   	pop    ebx
c0015353:	5e                   	pop    esi
c0015354:	5f                   	pop    edi
c0015355:	c3                   	ret    

c0015356 <Mouse::Mouse(char const*)>:
c0015356:	83 ec 0c             	sub    esp,0xc
c0015359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001535d:	83 ec 08             	sub    esp,0x8
c0015360:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015364:	50                   	push   eax
c0015365:	e8 42 e6 ff ff       	call   c00139ac <Device::Device(char const*)>
c001536a:	83 c4 10             	add    esp,0x10
c001536d:	ba e4 9e 03 c0       	mov    edx,0xc0039ee4
c0015372:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015376:	89 10                	mov    DWORD PTR [eax],edx
c0015378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001537c:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0015386:	90                   	nop
c0015387:	83 c4 0c             	add    esp,0xc
c001538a:	c3                   	ret    
c001538b:	90                   	nop

c001538c <Mouse::~Mouse()>:
c001538c:	83 ec 0c             	sub    esp,0xc
c001538f:	ba e4 9e 03 c0       	mov    edx,0xc0039ee4
c0015394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015398:	89 10                	mov    DWORD PTR [eax],edx
c001539a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001539e:	83 ec 0c             	sub    esp,0xc
c00153a1:	50                   	push   eax
c00153a2:	e8 b7 e2 ff ff       	call   c001365e <Device::~Device()>
c00153a7:	83 c4 10             	add    esp,0x10
c00153aa:	90                   	nop
c00153ab:	83 c4 0c             	add    esp,0xc
c00153ae:	c3                   	ret    
c00153af:	90                   	nop

c00153b0 <Mouse::~Mouse()>:
c00153b0:	83 ec 0c             	sub    esp,0xc
c00153b3:	83 ec 0c             	sub    esp,0xc
c00153b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00153ba:	e8 cd ff ff ff       	call   c001538c <Mouse::~Mouse()>
c00153bf:	83 c4 10             	add    esp,0x10
c00153c2:	83 ec 08             	sub    esp,0x8
c00153c5:	68 58 01 00 00       	push   0x158
c00153ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00153ce:	e8 ee d0 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c00153d3:	83 c4 10             	add    esp,0x10
c00153d6:	83 c4 0c             	add    esp,0xc
c00153d9:	c3                   	ret    

c00153da <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00153da:	55                   	push   ebp
c00153db:	57                   	push   edi
c00153dc:	56                   	push   esi
c00153dd:	53                   	push   ebx
c00153de:	81 ec 28 01 00 00    	sub    esp,0x128
c00153e4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00153eb:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00153f2:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00153f9:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c0015400:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015404:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0015408:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001540f:	e8 8a e6 ff ff       	call   c0013a9e <Device::getName()>
c0015414:	5a                   	pop    edx
c0015415:	59                   	pop    ecx
c0015416:	50                   	push   eax
c0015417:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001541b:	55                   	push   ebp
c001541c:	e8 d3 b3 fe ff       	call   c00007f4 <strcpy>
c0015421:	5b                   	pop    ebx
c0015422:	58                   	pop    eax
c0015423:	68 08 9f 03 c0       	push   0xc0039f08
c0015428:	55                   	push   ebp
c0015429:	e8 13 b5 fe ff       	call   c0000941 <strcat>
c001542e:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0015435:	e8 78 d0 ff ff       	call   c00124b2 <operator new(unsigned long)>
c001543a:	83 c4 0c             	add    esp,0xc
c001543d:	89 c3                	mov    ebx,eax
c001543f:	57                   	push   edi
c0015440:	56                   	push   esi
c0015441:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015445:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015449:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0015450:	55                   	push   ebp
c0015451:	50                   	push   eax
c0015452:	e8 e3 fb ff ff       	call   c001503a <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0015457:	83 c4 14             	add    esp,0x14
c001545a:	53                   	push   ebx
c001545b:	e8 90 fc ff ff       	call   c00150f0 <LogicalDisk::assignDriveLetter()>
c0015460:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015463:	e8 3e fd ff ff       	call   c00151a6 <LogicalDisk::mount()>
c0015468:	58                   	pop    eax
c0015469:	5a                   	pop    edx
c001546a:	53                   	push   ebx
c001546b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0015472:	e8 45 e3 ff ff       	call   c00137bc <Device::addChild(Device*)>
c0015477:	81 c4 2c 01 00 00    	add    esp,0x12c
c001547d:	5b                   	pop    ebx
c001547e:	5e                   	pop    esi
c001547f:	5f                   	pop    edi
c0015480:	5d                   	pop    ebp
c0015481:	c3                   	ret    

c0015482 <createPartitionsForDisk(PhysicalDisk*)>:
c0015482:	55                   	push   ebp
c0015483:	57                   	push   edi
c0015484:	56                   	push   esi
c0015485:	53                   	push   ebx
c0015486:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001548c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0015493:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015499:	3d 00 02 00 00       	cmp    eax,0x200
c001549e:	74 27                	je     c00154c7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00154a0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c00154a6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c00154ac:	83 ec 10             	sub    esp,0x10
c00154af:	0f a4 f7 0a          	shld   edi,esi,0xa
c00154b3:	99                   	cdq    
c00154b4:	c1 e6 0a             	shl    esi,0xa
c00154b7:	52                   	push   edx
c00154b8:	89 fd                	mov    ebp,edi
c00154ba:	50                   	push   eax
c00154bb:	55                   	push   ebp
c00154bc:	56                   	push   esi
c00154bd:	e8 5a 92 00 00       	call   c001e71c <__udivdi3>
c00154c2:	e9 b1 00 00 00       	jmp    c0015578 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00154c7:	83 ec 0c             	sub    esp,0xc
c00154ca:	8b 03                	mov    eax,DWORD PTR [ebx]
c00154cc:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00154d0:	56                   	push   esi
c00154d1:	6a 01                	push   0x1
c00154d3:	6a 00                	push   0x0
c00154d5:	6a 00                	push   0x0
c00154d7:	53                   	push   ebx
c00154d8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00154db:	83 c4 20             	add    esp,0x20
c00154de:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00154e6:	75 0a                	jne    c00154f2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00154e8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00154f0:	74 2c                	je     c001551e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00154f2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00154f8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00154fe:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015504:	83 ec 10             	sub    esp,0x10
c0015507:	0f a4 c2 0a          	shld   edx,eax,0xa
c001550b:	89 f7                	mov    edi,esi
c001550d:	c1 e0 0a             	shl    eax,0xa
c0015510:	c1 ff 1f             	sar    edi,0x1f
c0015513:	57                   	push   edi
c0015514:	56                   	push   esi
c0015515:	52                   	push   edx
c0015516:	50                   	push   eax
c0015517:	e8 00 92 00 00       	call   c001e71c <__udivdi3>
c001551c:	eb 5a                	jmp    c0015578 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c001551e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0015525:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c001552c:	83 e1 7f             	and    ecx,0x7f
c001552f:	83 e0 7f             	and    eax,0x7f
c0015532:	01 c1                	add    ecx,eax
c0015534:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001553b:	83 e0 7f             	and    eax,0x7f
c001553e:	01 c1                	add    ecx,eax
c0015540:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0015547:	83 e0 7f             	and    eax,0x7f
c001554a:	00 c1                	add    cl,al
c001554c:	74 41                	je     c001558f <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c001554e:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0015554:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001555a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015560:	83 ec 10             	sub    esp,0x10
c0015563:	0f a4 c2 0a          	shld   edx,eax,0xa
c0015567:	89 f7                	mov    edi,esi
c0015569:	c1 e0 0a             	shl    eax,0xa
c001556c:	c1 ff 1f             	sar    edi,0x1f
c001556f:	57                   	push   edi
c0015570:	56                   	push   esi
c0015571:	52                   	push   edx
c0015572:	50                   	push   eax
c0015573:	e8 a4 91 00 00       	call   c001e71c <__udivdi3>
c0015578:	83 c4 14             	add    esp,0x14
c001557b:	52                   	push   edx
c001557c:	50                   	push   eax
c001557d:	6a 00                	push   0x0
c001557f:	6a 00                	push   0x0
c0015581:	53                   	push   ebx
c0015582:	e8 53 fe ff ff       	call   c00153da <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0015587:	83 c4 20             	add    esp,0x20
c001558a:	e9 79 01 00 00       	jmp    c0015708 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c001558f:	89 f0                	mov    eax,esi
c0015591:	31 f6                	xor    esi,esi
c0015593:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001559a:	75 02                	jne    c001559e <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001559c:	89 f1                	mov    ecx,esi
c001559e:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00155a5:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c00155ac:	c1 e2 08             	shl    edx,0x8
c00155af:	c1 e7 10             	shl    edi,0x10
c00155b2:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00155ba:	09 fa                	or     edx,edi
c00155bc:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00155c4:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00155cb:	83 c0 10             	add    eax,0x10
c00155ce:	09 fa                	or     edx,edi
c00155d0:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00155d7:	c1 e7 18             	shl    edi,0x18
c00155da:	09 fa                	or     edx,edi
c00155dc:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00155e3:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00155e7:	c1 e7 10             	shl    edi,0x10
c00155ea:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00155f1:	c1 e2 08             	shl    edx,0x8
c00155f4:	09 fa                	or     edx,edi
c00155f6:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00155fd:	09 fa                	or     edx,edi
c00155ff:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0015606:	c1 e7 18             	shl    edi,0x18
c0015609:	09 fa                	or     edx,edi
c001560b:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c001560f:	46                   	inc    esi
c0015610:	83 fe 04             	cmp    esi,0x4
c0015613:	0f 85 7a ff ff ff    	jne    c0015593 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0015619:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001561d:	83 f0 01             	xor    eax,0x1
c0015620:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0015624:	75 57                	jne    c001567d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015626:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001562a:	83 f0 01             	xor    eax,0x1
c001562d:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0015631:	75 4a                	jne    c001567d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0015633:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0015637:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001563f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015647:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001564d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0015653:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0015659:	0f a4 c2 0a          	shld   edx,eax,0xa
c001565d:	89 f7                	mov    edi,esi
c001565f:	c1 e0 0a             	shl    eax,0xa
c0015662:	c1 ff 1f             	sar    edi,0x1f
c0015665:	57                   	push   edi
c0015666:	56                   	push   esi
c0015667:	52                   	push   edx
c0015668:	50                   	push   eax
c0015669:	e8 ae 90 00 00       	call   c001e71c <__udivdi3>
c001566e:	83 c4 10             	add    esp,0x10
c0015671:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015675:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015679:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001567d:	84 c9                	test   cl,cl
c001567f:	74 53                	je     c00156d4 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0015681:	0f b6 c9             	movzx  ecx,cl
c0015684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015688:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001568c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0015694:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015698:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001569c:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00156a0:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00156a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00156a8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00156ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00156b0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00156b4:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00156b8:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00156bc:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00156c0:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00156c4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00156c8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00156cc:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00156d0:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00156d4:	31 ed                	xor    ebp,ebp
c00156d6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00156da:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00156de:	89 f8                	mov    eax,edi
c00156e0:	09 f0                	or     eax,esi
c00156e2:	74 1e                	je     c0015702 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00156e4:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00156e8:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00156ec:	89 d1                	mov    ecx,edx
c00156ee:	09 c1                	or     ecx,eax
c00156f0:	74 10                	je     c0015702 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00156f2:	83 ec 0c             	sub    esp,0xc
c00156f5:	57                   	push   edi
c00156f6:	56                   	push   esi
c00156f7:	52                   	push   edx
c00156f8:	50                   	push   eax
c00156f9:	53                   	push   ebx
c00156fa:	e8 db fc ff ff       	call   c00153da <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00156ff:	83 c4 20             	add    esp,0x20
c0015702:	45                   	inc    ebp
c0015703:	83 fd 04             	cmp    ebp,0x4
c0015706:	75 ce                	jne    c00156d6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0015708:	81 c4 5c 02 00 00    	add    esp,0x25c
c001570e:	5b                   	pop    ebx
c001570f:	5e                   	pop    esi
c0015710:	5f                   	pop    edi
c0015711:	5d                   	pop    ebp
c0015712:	c3                   	ret    
c0015713:	90                   	nop

c0015714 <Timer::Timer(char const*)>:
c0015714:	83 ec 0c             	sub    esp,0xc
c0015717:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001571b:	83 ec 08             	sub    esp,0x8
c001571e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015722:	50                   	push   eax
c0015723:	e8 84 e2 ff ff       	call   c00139ac <Device::Device(char const*)>
c0015728:	83 c4 10             	add    esp,0x10
c001572b:	ba 1c 9f 03 c0       	mov    edx,0xc0039f1c
c0015730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015734:	89 10                	mov    DWORD PTR [eax],edx
c0015736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001573a:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0015744:	90                   	nop
c0015745:	83 c4 0c             	add    esp,0xc
c0015748:	c3                   	ret    
c0015749:	90                   	nop

c001574a <Timer::~Timer()>:
c001574a:	83 ec 0c             	sub    esp,0xc
c001574d:	ba 1c 9f 03 c0       	mov    edx,0xc0039f1c
c0015752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015756:	89 10                	mov    DWORD PTR [eax],edx
c0015758:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001575c:	83 ec 0c             	sub    esp,0xc
c001575f:	50                   	push   eax
c0015760:	e8 f9 de ff ff       	call   c001365e <Device::~Device()>
c0015765:	83 c4 10             	add    esp,0x10
c0015768:	90                   	nop
c0015769:	83 c4 0c             	add    esp,0xc
c001576c:	c3                   	ret    
c001576d:	90                   	nop

c001576e <Timer::~Timer()>:
c001576e:	83 ec 0c             	sub    esp,0xc
c0015771:	83 ec 0c             	sub    esp,0xc
c0015774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015778:	e8 cd ff ff ff       	call   c001574a <Timer::~Timer()>
c001577d:	83 c4 10             	add    esp,0x10
c0015780:	83 ec 08             	sub    esp,0x8
c0015783:	68 5c 01 00 00       	push   0x15c
c0015788:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001578c:	e8 30 cd ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c0015791:	83 c4 10             	add    esp,0x10
c0015794:	83 c4 0c             	add    esp,0xc
c0015797:	c3                   	ret    

c0015798 <Timer::read()>:
c0015798:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001579c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00157a2:	c3                   	ret    

c00157a3 <timerHandler(unsigned long long)>:
c00157a3:	55                   	push   ebp
c00157a4:	57                   	push   edi
c00157a5:	56                   	push   esi
c00157a6:	53                   	push   ebx
c00157a7:	83 ec 0c             	sub    esp,0xc
c00157aa:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00157ae:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00157b2:	01 35 70 c3 03 c0    	add    DWORD PTR ds:0xc003c370,esi
c00157b8:	11 3d 74 c3 03 c0    	adc    DWORD PTR ds:0xc003c374,edi
c00157be:	80 3d ad b9 03 c0 00 	cmp    BYTE PTR ds:0xc003b9ad,0x0
c00157c5:	0f 84 07 01 00 00    	je     c00158d2 <timerHandler(unsigned long long)+0x12f>
c00157cb:	e8 fb 8b ff ff       	call   c000e3cb <lockStuff()>
c00157d0:	83 ec 0c             	sub    esp,0xc
c00157d3:	68 e4 bb 03 c0       	push   0xc003bbe4
c00157d8:	e8 9f 94 00 00       	call   c001ec7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157dd:	c7 04 24 e4 bb 03 c0 	mov    DWORD PTR [esp],0xc003bbe4
c00157e4:	89 c3                	mov    ebx,eax
c00157e6:	e8 c7 93 00 00       	call   c001ebb2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00157eb:	83 c4 10             	add    esp,0x10
c00157ee:	84 c0                	test   al,al
c00157f0:	74 60                	je     c0015852 <timerHandler(unsigned long long)+0xaf>
c00157f2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00157f8:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c00157fb:	85 c0                	test   eax,eax
c00157fd:	0f 85 91 00 00 00    	jne    c0015894 <timerHandler(unsigned long long)+0xf1>
c0015803:	e9 be 00 00 00       	jmp    c00158c6 <timerHandler(unsigned long long)+0x123>
c0015808:	83 ec 0c             	sub    esp,0xc
c001580b:	55                   	push   ebp
c001580c:	e8 b7 93 ff ff       	call   c000ebc8 <unblockTask(ThreadControlBlock*)>
c0015811:	83 c4 10             	add    esp,0x10
c0015814:	39 eb                	cmp    ebx,ebp
c0015816:	75 12                	jne    c001582a <timerHandler(unsigned long long)+0x87>
c0015818:	83 ec 0c             	sub    esp,0xc
c001581b:	68 e4 bb 03 c0       	push   0xc003bbe4
c0015820:	e8 57 94 00 00       	call   c001ec7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015825:	89 c3                	mov    ebx,eax
c0015827:	83 c4 10             	add    esp,0x10
c001582a:	83 ec 0c             	sub    esp,0xc
c001582d:	68 e4 bb 03 c0       	push   0xc003bbe4
c0015832:	e8 7b 93 00 00       	call   c001ebb2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015837:	83 c4 10             	add    esp,0x10
c001583a:	84 c0                	test   al,al
c001583c:	75 b4                	jne    c00157f2 <timerHandler(unsigned long long)+0x4f>
c001583e:	83 ec 0c             	sub    esp,0xc
c0015841:	68 e4 bb 03 c0       	push   0xc003bbe4
c0015846:	e8 31 94 00 00       	call   c001ec7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001584b:	83 c4 10             	add    esp,0x10
c001584e:	39 d8                	cmp    eax,ebx
c0015850:	74 a0                	je     c00157f2 <timerHandler(unsigned long long)+0x4f>
c0015852:	83 ec 0c             	sub    esp,0xc
c0015855:	68 e4 bb 03 c0       	push   0xc003bbe4
c001585a:	e8 1d 94 00 00       	call   c001ec7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001585f:	c7 04 24 e4 bb 03 c0 	mov    DWORD PTR [esp],0xc003bbe4
c0015866:	89 c5                	mov    ebp,eax
c0015868:	e8 61 93 00 00       	call   c001ebce <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001586d:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0015870:	83 c4 10             	add    esp,0x10
c0015873:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0015876:	39 15 70 c3 03 c0    	cmp    DWORD PTR ds:0xc003c370,edx
c001587c:	a1 74 c3 03 c0       	mov    eax,ds:0xc003c374
c0015881:	19 c8                	sbb    eax,ecx
c0015883:	73 83                	jae    c0015808 <timerHandler(unsigned long long)+0x65>
c0015885:	50                   	push   eax
c0015886:	50                   	push   eax
c0015887:	55                   	push   ebp
c0015888:	68 e4 bb 03 c0       	push   0xc003bbe4
c001588d:	e8 4c 92 00 00       	call   c001eade <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015892:	eb 93                	jmp    c0015827 <timerHandler(unsigned long long)+0x84>
c0015894:	80 3d ac b9 03 c0 00 	cmp    BYTE PTR ds:0xc003b9ac,0x0
c001589b:	74 29                	je     c00158c6 <timerHandler(unsigned long long)+0x123>
c001589d:	39 c6                	cmp    esi,eax
c001589f:	bb 00 00 00 00       	mov    ebx,0x0
c00158a4:	19 df                	sbb    edi,ebx
c00158a6:	72 19                	jb     c00158c1 <timerHandler(unsigned long long)+0x11e>
c00158a8:	e8 f7 8a ff ff       	call   c000e3a4 <lockScheduler()>
c00158ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158b2:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c00158b5:	e8 1e 8e ff ff       	call   c000e6d8 <schedule()>
c00158ba:	e8 e7 8a ff ff       	call   c000e3a6 <unlockScheduler()>
c00158bf:	eb 05                	jmp    c00158c6 <timerHandler(unsigned long long)+0x123>
c00158c1:	29 f0                	sub    eax,esi
c00158c3:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c00158c6:	83 c4 0c             	add    esp,0xc
c00158c9:	5b                   	pop    ebx
c00158ca:	5e                   	pop    esi
c00158cb:	5f                   	pop    edi
c00158cc:	5d                   	pop    ebp
c00158cd:	e9 8b 8e ff ff       	jmp    c000e75d <unlockStuff()>
c00158d2:	83 c4 0c             	add    esp,0xc
c00158d5:	5b                   	pop    ebx
c00158d6:	5e                   	pop    esi
c00158d7:	5f                   	pop    edi
c00158d8:	5d                   	pop    ebp
c00158d9:	c3                   	ret    

c00158da <setupTimer(int)>:
c00158da:	57                   	push   edi
c00158db:	56                   	push   esi
c00158dc:	53                   	push   ebx
c00158dd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00158e1:	e8 cf 18 00 00       	call   c00171b5 <getCPUNumber()>
c00158e6:	85 c0                	test   eax,eax
c00158e8:	74 32                	je     c001591c <setupTimer(int)+0x42>
c00158ea:	83 ec 0c             	sub    esp,0xc
c00158ed:	68 60 01 00 00       	push   0x160
c00158f2:	e8 bb cb ff ff       	call   c00124b2 <operator new(unsigned long)>
c00158f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00158fa:	89 c3                	mov    ebx,eax
c00158fc:	e8 bf 88 00 00       	call   c001e1c0 <APICTimer::APICTimer()>
c0015901:	6a 00                	push   0x0
c0015903:	6a 00                	push   0x0
c0015905:	56                   	push   esi
c0015906:	53                   	push   ebx
c0015907:	e8 bc 87 00 00       	call   c001e0c8 <APICTimer::open(int, int, void*)>
c001590c:	83 c4 20             	add    esp,0x20
c001590f:	e8 a4 18 00 00       	call   c00171b8 <thisCPU()>
c0015914:	56                   	push   esi
c0015915:	56                   	push   esi
c0015916:	53                   	push   ebx
c0015917:	e9 96 00 00 00       	jmp    c00159b2 <setupTimer(int)+0xd8>
c001591c:	e8 97 18 00 00       	call   c00171b8 <thisCPU()>
c0015921:	83 ec 0c             	sub    esp,0xc
c0015924:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c001592a:	e8 6f e1 ff ff       	call   c0013a9e <Device::getName()>
c001592f:	83 c4 10             	add    esp,0x10
c0015932:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0015935:	0f 85 87 00 00 00    	jne    c00159c2 <setupTimer(int)+0xe8>
c001593b:	a1 a8 b9 03 c0       	mov    eax,ds:0xc003b9a8
c0015940:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0015947:	74 79                	je     c00159c2 <setupTimer(int)+0xe8>
c0015949:	83 ec 0c             	sub    esp,0xc
c001594c:	68 5c 01 00 00       	push   0x15c
c0015951:	e8 5c cb ff ff       	call   c00124b2 <operator new(unsigned long)>
c0015956:	89 04 24             	mov    DWORD PTR [esp],eax
c0015959:	89 c3                	mov    ebx,eax
c001595b:	e8 b0 89 00 00       	call   c001e310 <PIT::PIT()>
c0015960:	59                   	pop    ecx
c0015961:	5f                   	pop    edi
c0015962:	53                   	push   ebx
c0015963:	ff 35 a8 b9 03 c0    	push   DWORD PTR ds:0xc003b9a8
c0015969:	e8 4e de ff ff       	call   c00137bc <Device::addChild(Device*)>
c001596e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015970:	6a 00                	push   0x0
c0015972:	6a 00                	push   0x0
c0015974:	56                   	push   esi
c0015975:	53                   	push   ebx
c0015976:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015979:	83 c4 14             	add    esp,0x14
c001597c:	68 60 01 00 00       	push   0x160
c0015981:	e8 2c cb ff ff       	call   c00124b2 <operator new(unsigned long)>
c0015986:	89 04 24             	mov    DWORD PTR [esp],eax
c0015989:	89 c7                	mov    edi,eax
c001598b:	e8 30 88 00 00       	call   c001e1c0 <APICTimer::APICTimer()>
c0015990:	6a 00                	push   0x0
c0015992:	6a 00                	push   0x0
c0015994:	56                   	push   esi
c0015995:	57                   	push   edi
c0015996:	e8 2d 87 00 00       	call   c001e0c8 <APICTimer::open(int, int, void*)>
c001599b:	83 c4 20             	add    esp,0x20
c001599e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159a0:	6a 00                	push   0x0
c00159a2:	6a 00                	push   0x0
c00159a4:	6a 00                	push   0x0
c00159a6:	53                   	push   ebx
c00159a7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00159aa:	e8 09 18 00 00       	call   c00171b8 <thisCPU()>
c00159af:	5a                   	pop    edx
c00159b0:	59                   	pop    ecx
c00159b1:	57                   	push   edi
c00159b2:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00159b8:	e8 ff dd ff ff       	call   c00137bc <Device::addChild(Device*)>
c00159bd:	83 c4 10             	add    esp,0x10
c00159c0:	eb 33                	jmp    c00159f5 <setupTimer(int)+0x11b>
c00159c2:	83 ec 0c             	sub    esp,0xc
c00159c5:	68 5c 01 00 00       	push   0x15c
c00159ca:	e8 e3 ca ff ff       	call   c00124b2 <operator new(unsigned long)>
c00159cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00159d2:	89 c3                	mov    ebx,eax
c00159d4:	e8 37 89 00 00       	call   c001e310 <PIT::PIT()>
c00159d9:	58                   	pop    eax
c00159da:	5a                   	pop    edx
c00159db:	53                   	push   ebx
c00159dc:	ff 35 a8 b9 03 c0    	push   DWORD PTR ds:0xc003b9a8
c00159e2:	e8 d5 dd ff ff       	call   c00137bc <Device::addChild(Device*)>
c00159e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159e9:	6a 00                	push   0x0
c00159eb:	6a 00                	push   0x0
c00159ed:	56                   	push   esi
c00159ee:	53                   	push   ebx
c00159ef:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00159f2:	83 c4 20             	add    esp,0x20
c00159f5:	89 d8                	mov    eax,ebx
c00159f7:	5b                   	pop    ebx
c00159f8:	5e                   	pop    esi
c00159f9:	5f                   	pop    edi
c00159fa:	c3                   	ret    
c00159fb:	90                   	nop

c00159fc <VCache::VCache(PhysicalDisk*)>:
c00159fc:	53                   	push   ebx
c00159fd:	83 ec 08             	sub    esp,0x8
c0015a00:	ba 4c 9f 03 c0       	mov    edx,0xc0039f4c
c0015a05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a09:	89 10                	mov    DWORD PTR [eax],edx
c0015a0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a0f:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0015a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a1a:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0015a21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a25:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0015a2c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a37:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0015a3e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015a45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a49:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0015a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a54:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0015a58:	83 ec 0c             	sub    esp,0xc
c0015a5b:	6a 10                	push   0x10
c0015a5d:	e8 50 ca ff ff       	call   c00124b2 <operator new(unsigned long)>
c0015a62:	83 c4 10             	add    esp,0x10
c0015a65:	89 c3                	mov    ebx,eax
c0015a67:	83 ec 0c             	sub    esp,0xc
c0015a6a:	53                   	push   ebx
c0015a6b:	e8 4c 8a ff ff       	call   c000e4bc <Mutex::Mutex()>
c0015a70:	83 c4 10             	add    esp,0x10
c0015a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a77:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0015a7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a7e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015a82:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0015a85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a89:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0015a90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015a94:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0015a9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015a9e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0015aa1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015aa5:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0015aab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015ab1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015ab5:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0015ab8:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0015abb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015abf:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0015ac3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ac7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015acd:	c1 e0 06             	shl    eax,0x6
c0015ad0:	83 ec 0c             	sub    esp,0xc
c0015ad3:	50                   	push   eax
c0015ad4:	e8 24 7a ff ff       	call   c000d4fd <malloc>
c0015ad9:	83 c4 10             	add    esp,0x10
c0015adc:	89 c2                	mov    edx,eax
c0015ade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ae2:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015ae5:	90                   	nop
c0015ae6:	83 c4 08             	add    esp,0x8
c0015ae9:	5b                   	pop    ebx
c0015aea:	c3                   	ret    
c0015aeb:	90                   	nop

c0015aec <VCache::writeWriteBuffer()>:
c0015aec:	53                   	push   ebx
c0015aed:	83 ec 14             	sub    esp,0x14
c0015af0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015af4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015af7:	8b 10                	mov    edx,DWORD PTR [eax]
c0015af9:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015afc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015aff:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015b02:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0015b05:	50                   	push   eax
c0015b06:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0015b09:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0015b10:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0015b17:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0015b1b:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0015b22:	83 c4 28             	add    esp,0x28
c0015b25:	5b                   	pop    ebx
c0015b26:	c3                   	ret    
c0015b27:	90                   	nop

c0015b28 <VCache::~VCache()>:
c0015b28:	83 ec 0c             	sub    esp,0xc
c0015b2b:	ba 4c 9f 03 c0       	mov    edx,0xc0039f4c
c0015b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b34:	89 10                	mov    DWORD PTR [eax],edx
c0015b36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b3a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0015b3d:	84 c0                	test   al,al
c0015b3f:	74 0f                	je     c0015b50 <VCache::~VCache()+0x28>
c0015b41:	83 ec 0c             	sub    esp,0xc
c0015b44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b48:	e8 9f ff ff ff       	call   c0015aec <VCache::writeWriteBuffer()>
c0015b4d:	83 c4 10             	add    esp,0x10
c0015b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015b54:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015b57:	83 ec 0c             	sub    esp,0xc
c0015b5a:	50                   	push   eax
c0015b5b:	e8 ad 79 ff ff       	call   c000d50d <free>
c0015b60:	83 c4 10             	add    esp,0x10
c0015b63:	90                   	nop
c0015b64:	83 c4 0c             	add    esp,0xc
c0015b67:	c3                   	ret    

c0015b68 <VCache::~VCache()>:
c0015b68:	83 ec 0c             	sub    esp,0xc
c0015b6b:	83 ec 0c             	sub    esp,0xc
c0015b6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b72:	e8 b1 ff ff ff       	call   c0015b28 <VCache::~VCache()>
c0015b77:	83 c4 10             	add    esp,0x10
c0015b7a:	83 ec 08             	sub    esp,0x8
c0015b7d:	6a 30                	push   0x30
c0015b7f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015b83:	e8 39 c9 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c0015b88:	83 c4 10             	add    esp,0x10
c0015b8b:	83 c4 0c             	add    esp,0xc
c0015b8e:	c3                   	ret    
c0015b8f:	90                   	nop

c0015b90 <VCache::write(unsigned long long, int, void*)>:
c0015b90:	55                   	push   ebp
c0015b91:	57                   	push   edi
c0015b92:	56                   	push   esi
c0015b93:	53                   	push   ebx
c0015b94:	83 ec 28             	sub    esp,0x28
c0015b97:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015b9b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0015b9f:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015ba3:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0015ba7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015baa:	e8 e1 8e ff ff       	call   c000ea90 <Semaphore::acquire()>
c0015baf:	83 c4 10             	add    esp,0x10
c0015bb2:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0015bb6:	74 66                	je     c0015c1e <VCache::write(unsigned long long, int, void*)+0x8e>
c0015bb8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015bbb:	99                   	cdq    
c0015bbc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015bc0:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0015bc3:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0015bc6:	89 c1                	mov    ecx,eax
c0015bc8:	89 d0                	mov    eax,edx
c0015bca:	31 f1                	xor    ecx,esi
c0015bcc:	31 f8                	xor    eax,edi
c0015bce:	89 ca                	mov    edx,ecx
c0015bd0:	09 c2                	or     edx,eax
c0015bd2:	75 3e                	jne    c0015c12 <VCache::write(unsigned long long, int, void*)+0x82>
c0015bd4:	83 fd 01             	cmp    ebp,0x1
c0015bd7:	75 39                	jne    c0015c12 <VCache::write(unsigned long long, int, void*)+0x82>
c0015bd9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015bdc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015be2:	51                   	push   ecx
c0015be3:	50                   	push   eax
c0015be4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015be8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015bec:	0f af c8             	imul   ecx,eax
c0015bef:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0015bf2:	51                   	push   ecx
c0015bf3:	e8 69 aa fe ff       	call   c0000661 <memcpy>
c0015bf8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0015bfb:	83 c4 10             	add    esp,0x10
c0015bfe:	40                   	inc    eax
c0015bff:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0015c02:	83 f8 40             	cmp    eax,0x40
c0015c05:	75 57                	jne    c0015c5e <VCache::write(unsigned long long, int, void*)+0xce>
c0015c07:	83 ec 0c             	sub    esp,0xc
c0015c0a:	53                   	push   ebx
c0015c0b:	e8 dc fe ff ff       	call   c0015aec <VCache::writeWriteBuffer()>
c0015c10:	eb 34                	jmp    c0015c46 <VCache::write(unsigned long long, int, void*)+0xb6>
c0015c12:	83 ec 0c             	sub    esp,0xc
c0015c15:	53                   	push   ebx
c0015c16:	e8 d1 fe ff ff       	call   c0015aec <VCache::writeWriteBuffer()>
c0015c1b:	83 c4 10             	add    esp,0x10
c0015c1e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015c21:	83 fd 3f             	cmp    ebp,0x3f
c0015c24:	7f 25                	jg     c0015c4b <VCache::write(unsigned long long, int, void*)+0xbb>
c0015c26:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0015c29:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0015c2c:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0015c2f:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0015c33:	52                   	push   edx
c0015c34:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0015c3a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015c3e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015c41:	e8 1b aa fe ff       	call   c0000661 <memcpy>
c0015c46:	83 c4 10             	add    esp,0x10
c0015c49:	eb 13                	jmp    c0015c5e <VCache::write(unsigned long long, int, void*)+0xce>
c0015c4b:	83 ec 0c             	sub    esp,0xc
c0015c4e:	8b 10                	mov    edx,DWORD PTR [eax]
c0015c50:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015c54:	55                   	push   ebp
c0015c55:	57                   	push   edi
c0015c56:	56                   	push   esi
c0015c57:	50                   	push   eax
c0015c58:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0015c5b:	83 c4 20             	add    esp,0x20
c0015c5e:	83 ec 0c             	sub    esp,0xc
c0015c61:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015c64:	e8 c3 93 ff ff       	call   c000f02c <Semaphore::release()>
c0015c69:	83 c4 2c             	add    esp,0x2c
c0015c6c:	31 c0                	xor    eax,eax
c0015c6e:	5b                   	pop    ebx
c0015c6f:	5e                   	pop    esi
c0015c70:	5f                   	pop    edi
c0015c71:	5d                   	pop    ebp
c0015c72:	c3                   	ret    
c0015c73:	90                   	nop

c0015c74 <VCache::read(unsigned long long, int, void*)>:
c0015c74:	57                   	push   edi
c0015c75:	56                   	push   esi
c0015c76:	53                   	push   ebx
c0015c77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015c7b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015c7f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015c83:	83 ec 0c             	sub    esp,0xc
c0015c86:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015c89:	e8 02 8e ff ff       	call   c000ea90 <Semaphore::acquire()>
c0015c8e:	83 c4 10             	add    esp,0x10
c0015c91:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0015c95:	74 0c                	je     c0015ca3 <VCache::read(unsigned long long, int, void*)+0x2f>
c0015c97:	83 ec 0c             	sub    esp,0xc
c0015c9a:	53                   	push   ebx
c0015c9b:	e8 4c fe ff ff       	call   c0015aec <VCache::writeWriteBuffer()>
c0015ca0:	83 c4 10             	add    esp,0x10
c0015ca3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015ca6:	83 ec 0c             	sub    esp,0xc
c0015ca9:	8b 10                	mov    edx,DWORD PTR [eax]
c0015cab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015caf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cb3:	57                   	push   edi
c0015cb4:	56                   	push   esi
c0015cb5:	50                   	push   eax
c0015cb6:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015cb9:	83 c4 14             	add    esp,0x14
c0015cbc:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0015cbf:	e8 68 93 ff ff       	call   c000f02c <Semaphore::release()>
c0015cc4:	83 c4 10             	add    esp,0x10
c0015cc7:	31 c0                	xor    eax,eax
c0015cc9:	5b                   	pop    ebx
c0015cca:	5e                   	pop    esi
c0015ccb:	5f                   	pop    edi
c0015ccc:	c3                   	ret    
c0015ccd:	90                   	nop

c0015cce <Video::putrect(int, int, int, int, unsigned int)>:
c0015cce:	55                   	push   ebp
c0015ccf:	57                   	push   edi
c0015cd0:	56                   	push   esi
c0015cd1:	53                   	push   ebx
c0015cd2:	83 ec 1c             	sub    esp,0x1c
c0015cd5:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0015cd9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0015cdd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015ce1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0015ce5:	01 e8                	add    eax,ebp
c0015ce7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015ceb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015cef:	01 df                	add    edi,ebx
c0015cf1:	39 fb                	cmp    ebx,edi
c0015cf3:	7d 1b                	jge    c0015d10 <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0015cf5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0015cf9:	7d 12                	jge    c0015d0d <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c0015cfb:	8b 16                	mov    edx,DWORD PTR [esi]
c0015cfd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0015d01:	53                   	push   ebx
c0015d02:	55                   	push   ebp
c0015d03:	45                   	inc    ebp
c0015d04:	56                   	push   esi
c0015d05:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0015d08:	83 c4 10             	add    esp,0x10
c0015d0b:	eb e8                	jmp    c0015cf5 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0015d0d:	43                   	inc    ebx
c0015d0e:	eb e1                	jmp    c0015cf1 <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0015d10:	83 c4 1c             	add    esp,0x1c
c0015d13:	5b                   	pop    ebx
c0015d14:	5e                   	pop    esi
c0015d15:	5f                   	pop    edi
c0015d16:	5d                   	pop    ebp
c0015d17:	c3                   	ret    

c0015d18 <Video::blit(unsigned int*, int, int, int, int)>:
c0015d18:	55                   	push   ebp
c0015d19:	57                   	push   edi
c0015d1a:	56                   	push   esi
c0015d1b:	53                   	push   ebx
c0015d1c:	83 ec 1c             	sub    esp,0x1c
c0015d1f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0015d23:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0015d27:	85 c0                	test   eax,eax
c0015d29:	79 02                	jns    c0015d2d <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0015d2b:	31 c0                	xor    eax,eax
c0015d2d:	c1 e0 02             	shl    eax,0x2
c0015d30:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015d34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015d38:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0015d3c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0015d40:	39 d8                	cmp    eax,ebx
c0015d42:	7e 49                	jle    c0015d8d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0015d44:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0015d4a:	7c 41                	jl     c0015d8d <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0015d4c:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0015d50:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0015d54:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0015d58:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0015d5c:	39 f9                	cmp    ecx,edi
c0015d5e:	7e 22                	jle    c0015d82 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0015d60:	83 c5 04             	add    ebp,0x4
c0015d63:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0015d69:	7c 14                	jl     c0015d7f <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0015d6b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015d6d:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0015d70:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d74:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015d78:	56                   	push   esi
c0015d79:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0015d7c:	83 c4 10             	add    esp,0x10
c0015d7f:	47                   	inc    edi
c0015d80:	eb d2                	jmp    c0015d54 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0015d82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d86:	43                   	inc    ebx
c0015d87:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0015d8b:	eb ab                	jmp    c0015d38 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0015d8d:	83 c4 1c             	add    esp,0x1c
c0015d90:	5b                   	pop    ebx
c0015d91:	5e                   	pop    esi
c0015d92:	5f                   	pop    edi
c0015d93:	5d                   	pop    ebp
c0015d94:	c3                   	ret    
c0015d95:	90                   	nop

c0015d96 <Video::clearScreen(unsigned int)>:
c0015d96:	57                   	push   edi
c0015d97:	56                   	push   esi
c0015d98:	53                   	push   ebx
c0015d99:	31 db                	xor    ebx,ebx
c0015d9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015d9f:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0015da5:	7e 1f                	jle    c0015dc6 <Video::clearScreen(unsigned int)+0x30>
c0015da7:	31 ff                	xor    edi,edi
c0015da9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0015daf:	7e 12                	jle    c0015dc3 <Video::clearScreen(unsigned int)+0x2d>
c0015db1:	8b 06                	mov    eax,DWORD PTR [esi]
c0015db3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015db7:	53                   	push   ebx
c0015db8:	57                   	push   edi
c0015db9:	47                   	inc    edi
c0015dba:	56                   	push   esi
c0015dbb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015dbe:	83 c4 10             	add    esp,0x10
c0015dc1:	eb e6                	jmp    c0015da9 <Video::clearScreen(unsigned int)+0x13>
c0015dc3:	43                   	inc    ebx
c0015dc4:	eb d9                	jmp    c0015d9f <Video::clearScreen(unsigned int)+0x9>
c0015dc6:	5b                   	pop    ebx
c0015dc7:	5e                   	pop    esi
c0015dc8:	5f                   	pop    edi
c0015dc9:	c3                   	ret    

c0015dca <Video::putpixel(int, int, unsigned int)>:
c0015dca:	c7 44 24 04 54 9f 03 c0 	mov    DWORD PTR [esp+0x4],0xc0039f54
c0015dd2:	e9 2b 71 ff ff       	jmp    c000cf02 <kprintf(char const*, ...)>
c0015dd7:	90                   	nop

c0015dd8 <Video::Video(char const*)>:
c0015dd8:	83 ec 0c             	sub    esp,0xc
c0015ddb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015ddf:	83 ec 08             	sub    esp,0x8
c0015de2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015de6:	50                   	push   eax
c0015de7:	e8 c0 db ff ff       	call   c00139ac <Device::Device(char const*)>
c0015dec:	83 c4 10             	add    esp,0x10
c0015def:	ba 6c 9f 03 c0       	mov    edx,0xc0039f6c
c0015df4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015df8:	89 10                	mov    DWORD PTR [eax],edx
c0015dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dfe:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0015e08:	90                   	nop
c0015e09:	83 c4 0c             	add    esp,0xc
c0015e0c:	c3                   	ret    
c0015e0d:	90                   	nop

c0015e0e <Video::~Video()>:
c0015e0e:	83 ec 0c             	sub    esp,0xc
c0015e11:	ba 6c 9f 03 c0       	mov    edx,0xc0039f6c
c0015e16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e1a:	89 10                	mov    DWORD PTR [eax],edx
c0015e1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e20:	83 ec 0c             	sub    esp,0xc
c0015e23:	50                   	push   eax
c0015e24:	e8 35 d8 ff ff       	call   c001365e <Device::~Device()>
c0015e29:	83 c4 10             	add    esp,0x10
c0015e2c:	90                   	nop
c0015e2d:	83 c4 0c             	add    esp,0xc
c0015e30:	c3                   	ret    
c0015e31:	90                   	nop

c0015e32 <Video::~Video()>:
c0015e32:	83 ec 0c             	sub    esp,0xc
c0015e35:	83 ec 0c             	sub    esp,0xc
c0015e38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e3c:	e8 cd ff ff ff       	call   c0015e0e <Video::~Video()>
c0015e41:	83 c4 10             	add    esp,0x10
c0015e44:	83 ec 08             	sub    esp,0x8
c0015e47:	68 64 01 00 00       	push   0x164
c0015e4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015e50:	e8 6c c6 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c0015e55:	83 c4 10             	add    esp,0x10
c0015e58:	83 c4 0c             	add    esp,0xc
c0015e5b:	c3                   	ret    

c0015e5c <Video::isMonochrome()>:
c0015e5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e60:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0015e66:	c3                   	ret    
c0015e67:	90                   	nop

c0015e68 <Video::getWidth()>:
c0015e68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e6c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015e72:	c3                   	ret    
c0015e73:	90                   	nop

c0015e74 <Video::getHeight()>:
c0015e74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e78:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015e7e:	c3                   	ret    
c0015e7f:	90                   	nop

c0015e80 <Video::drawCursor(int, int, unsigned char*, int)>:
c0015e80:	55                   	push   ebp
c0015e81:	57                   	push   edi
c0015e82:	56                   	push   esi
c0015e83:	53                   	push   ebx
c0015e84:	83 ec 2c             	sub    esp,0x2c
c0015e87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0015e8b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0015e8f:	83 f8 01             	cmp    eax,0x1
c0015e92:	19 c9                	sbb    ecx,ecx
c0015e94:	31 db                	xor    ebx,ebx
c0015e96:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0015e9a:	89 cd                	mov    ebp,ecx
c0015e9c:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0015ea4:	f7 d5                	not    ebp
c0015ea6:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0015eac:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015eb0:	01 d8                	add    eax,ebx
c0015eb2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015eb6:	56                   	push   esi
c0015eb7:	e8 b8 ff ff ff       	call   c0015e74 <Video::getHeight()>
c0015ebc:	59                   	pop    ecx
c0015ebd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0015ec1:	7e 70                	jle    c0015f33 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0015ec3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015ec7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0015ecb:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0015ece:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015ed2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015ed6:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0015edd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015ee1:	89 f8                	mov    eax,edi
c0015ee3:	83 c0 20             	add    eax,0x20
c0015ee6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015eea:	56                   	push   esi
c0015eeb:	e8 78 ff ff ff       	call   c0015e68 <Video::getWidth()>
c0015ef0:	5a                   	pop    edx
c0015ef1:	39 c7                	cmp    edi,eax
c0015ef3:	7d 34                	jge    c0015f29 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0015ef5:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0015efa:	74 05                	je     c0015f01 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0015efc:	8b 06                	mov    eax,DWORD PTR [esi]
c0015efe:	55                   	push   ebp
c0015eff:	eb 0d                	jmp    c0015f0e <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0015f01:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0015f06:	74 12                	je     c0015f1a <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0015f08:	8b 06                	mov    eax,DWORD PTR [esi]
c0015f0a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015f0e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015f12:	57                   	push   edi
c0015f13:	56                   	push   esi
c0015f14:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0015f17:	83 c4 10             	add    esp,0x10
c0015f1a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0015f1e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0015f22:	47                   	inc    edi
c0015f23:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015f27:	75 c1                	jne    c0015eea <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0015f29:	43                   	inc    ebx
c0015f2a:	83 fb 20             	cmp    ebx,0x20
c0015f2d:	0f 85 79 ff ff ff    	jne    c0015eac <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0015f33:	83 c4 2c             	add    esp,0x2c
c0015f36:	5b                   	pop    ebx
c0015f37:	5e                   	pop    esi
c0015f38:	5f                   	pop    edi
c0015f39:	5d                   	pop    ebp
c0015f3a:	c3                   	ret    
c0015f3b:	90                   	nop

c0015f3c <ACPI::close(int, int, void*)>:
c0015f3c:	83 ec 1c             	sub    esp,0x1c
c0015f3f:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0015f47:	74 0a                	je     c0015f53 <ACPI::close(int, int, void*)+0x17>
c0015f49:	b8 00 00 00 00       	mov    eax,0x0
c0015f4e:	e9 9a 00 00 00       	jmp    c0015fed <ACPI::close(int, int, void*)+0xb1>
c0015f53:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0015f58:	75 37                	jne    c0015f91 <ACPI::close(int, int, void*)+0x55>
c0015f5a:	83 ec 0c             	sub    esp,0xc
c0015f5d:	68 a4 9f 03 c0       	push   0xc0039fa4
c0015f62:	e8 9b 6f ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0015f67:	83 c4 10             	add    esp,0x10
c0015f6a:	a1 88 c3 03 c0       	mov    eax,ds:0xc003c388
c0015f6f:	85 c0                	test   eax,eax
c0015f71:	74 07                	je     c0015f7a <ACPI::close(int, int, void*)+0x3e>
c0015f73:	a1 88 c3 03 c0       	mov    eax,ds:0xc003c388
c0015f78:	ff d0                	call   eax
c0015f7a:	83 ec 0c             	sub    esp,0xc
c0015f7d:	68 58 a0 03 c0       	push   0xc003a058
c0015f82:	e8 99 70 ff ff       	call   c000d020 <panic(char const*)>
c0015f87:	83 c4 10             	add    esp,0x10
c0015f8a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015f8f:	eb 5c                	jmp    c0015fed <ACPI::close(int, int, void*)+0xb1>
c0015f91:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0015f96:	75 50                	jne    c0015fe8 <ACPI::close(int, int, void*)+0xac>
c0015f98:	a1 84 c3 03 c0       	mov    eax,ds:0xc003c384
c0015f9d:	85 c0                	test   eax,eax
c0015f9f:	74 07                	je     c0015fa8 <ACPI::close(int, int, void*)+0x6c>
c0015fa1:	a1 84 c3 03 c0       	mov    eax,ds:0xc003c384
c0015fa6:	ff d0                	call   eax
c0015fa8:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0015fad:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015fb2:	83 e0 02             	and    eax,0x2
c0015fb5:	74 1c                	je     c0015fd3 <ACPI::close(int, int, void*)+0x97>
c0015fb7:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0015fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015fc2:	89 c2                	mov    edx,eax
c0015fc4:	ec                   	in     al,dx
c0015fc5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0015fc9:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0015fcd:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015fd1:	eb da                	jmp    c0015fad <ACPI::close(int, int, void*)+0x71>
c0015fd3:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0015fda:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0015fdf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0015fe3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0015fe7:	ee                   	out    dx,al
c0015fe8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015fed:	83 c4 1c             	add    esp,0x1c
c0015ff0:	c3                   	ret    

c0015ff1 <findRSDP()>:
c0015ff1:	83 ec 1c             	sub    esp,0x1c
c0015ff4:	a1 a8 b9 03 c0       	mov    eax,ds:0xc003b9a8
c0015ff9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015fff:	83 e0 04             	and    eax,0x4
c0016002:	84 c0                	test   al,al
c0016004:	75 07                	jne    c001600d <findRSDP()+0x1c>
c0016006:	b8 00 00 00 00       	mov    eax,0x0
c001600b:	eb 6a                	jmp    c0016077 <findRSDP()+0x86>
c001600d:	a1 70 bb 03 c0       	mov    eax,ds:0xc003bb70
c0016012:	3d ff 07 00 00       	cmp    eax,0x7ff
c0016017:	7f 1b                	jg     c0016034 <findRSDP()+0x43>
c0016019:	a1 a8 b9 03 c0       	mov    eax,ds:0xc003b9a8
c001601e:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016024:	83 e2 fb             	and    edx,0xfffffffb
c0016027:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001602d:	b8 00 00 00 00       	mov    eax,0x0
c0016032:	eb 43                	jmp    c0016077 <findRSDP()+0x86>
c0016034:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001603c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0016044:	77 2c                	ja     c0016072 <findRSDP()+0x81>
c0016046:	83 ec 04             	sub    esp,0x4
c0016049:	6a 08                	push   0x8
c001604b:	68 b1 9f 03 c0       	push   0xc0039fb1
c0016050:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016054:	e8 43 a5 fe ff       	call   c000059c <memcmp>
c0016059:	83 c4 10             	add    esp,0x10
c001605c:	85 c0                	test   eax,eax
c001605e:	0f 94 c0             	sete   al
c0016061:	84 c0                	test   al,al
c0016063:	74 06                	je     c001606b <findRSDP()+0x7a>
c0016065:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016069:	eb 0c                	jmp    c0016077 <findRSDP()+0x86>
c001606b:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0016070:	eb ca                	jmp    c001603c <findRSDP()+0x4b>
c0016072:	b8 00 00 00 00       	mov    eax,0x0
c0016077:	83 c4 1c             	add    esp,0x1c
c001607a:	c3                   	ret    

c001607b <loadACPITables(unsigned char*)>:
c001607b:	56                   	push   esi
c001607c:	53                   	push   ebx
c001607d:	83 ec 44             	sub    esp,0x44
c0016080:	a1 a8 b9 03 c0       	mov    eax,ds:0xc003b9a8
c0016085:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001608b:	83 e0 04             	and    eax,0x4
c001608e:	84 c0                	test   al,al
c0016090:	0f 84 05 02 00 00    	je     c001629b <loadACPITables(unsigned char*)+0x220>
c0016096:	a0 a0 c5 03 c0       	mov    al,ds:0xc003c5a0
c001609b:	84 c0                	test   al,al
c001609d:	74 75                	je     c0016114 <loadACPITables(unsigned char*)+0x99>
c001609f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00160a3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00160a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00160ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00160ae:	83 e8 24             	sub    eax,0x24
c00160b1:	c1 e8 03             	shr    eax,0x3
c00160b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00160b8:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00160c0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00160c4:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00160c8:	0f 8d b2 00 00 00    	jge    c0016180 <loadACPITables(unsigned char*)+0x105>
c00160ce:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00160d2:	83 c0 24             	add    eax,0x24
c00160d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00160d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00160dd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00160e1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00160e5:	c1 e0 03             	shl    eax,0x3
c00160e8:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00160ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00160f0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00160f3:	8b 00                	mov    eax,DWORD PTR [eax]
c00160f5:	89 c1                	mov    ecx,eax
c00160f7:	a1 8c c3 03 c0       	mov    eax,ds:0xc003c38c
c00160fc:	8d 50 01             	lea    edx,[eax+0x1]
c00160ff:	89 15 8c c3 03 c0    	mov    DWORD PTR ds:0xc003c38c,edx
c0016105:	89 ca                	mov    edx,ecx
c0016107:	89 14 c5 a4 c3 03 c0 	mov    DWORD PTR [eax*8-0x3ffc3c5c],edx
c001610e:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0016112:	eb ac                	jmp    c00160c0 <loadACPITables(unsigned char*)+0x45>
c0016114:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016118:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001611c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016120:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016123:	83 e8 24             	sub    eax,0x24
c0016126:	c1 e8 02             	shr    eax,0x2
c0016129:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001612d:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0016135:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016139:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c001613d:	7d 41                	jge    c0016180 <loadACPITables(unsigned char*)+0x105>
c001613f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016143:	83 c0 24             	add    eax,0x24
c0016146:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001614a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001614e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016152:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016156:	c1 e0 02             	shl    eax,0x2
c0016159:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c001615d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016161:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016163:	a1 8c c3 03 c0       	mov    eax,ds:0xc003c38c
c0016168:	8d 50 01             	lea    edx,[eax+0x1]
c001616b:	89 15 8c c3 03 c0    	mov    DWORD PTR ds:0xc003c38c,edx
c0016171:	89 ca                	mov    edx,ecx
c0016173:	89 14 c5 a4 c3 03 c0 	mov    DWORD PTR [eax*8-0x3ffc3c5c],edx
c001617a:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c001617e:	eb b5                	jmp    c0016135 <loadACPITables(unsigned char*)+0xba>
c0016180:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0016188:	a1 8c c3 03 c0       	mov    eax,ds:0xc003c38c
c001618d:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0016191:	0f 8d 05 01 00 00    	jge    c001629c <loadACPITables(unsigned char*)+0x221>
c0016197:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001619b:	8b 04 c5 a4 c3 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc3c5c]
c00161a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00161a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00161ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00161b2:	25 ff 0f 00 00       	and    eax,0xfff
c00161b7:	89 c6                	mov    esi,eax
c00161b9:	e8 f3 b2 ff ff       	call   c00114b1 <Virt::getAKernelVAS()>
c00161be:	89 c3                	mov    ebx,eax
c00161c0:	83 ec 0c             	sub    esp,0xc
c00161c3:	6a 01                	push   0x1
c00161c5:	e8 57 b1 ff ff       	call   c0011321 <Virt::allocateKernelVirtualPages(int)>
c00161ca:	83 c4 10             	add    esp,0x10
c00161cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00161d1:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00161d7:	83 ec 0c             	sub    esp,0xc
c00161da:	6a 01                	push   0x1
c00161dc:	6a 01                	push   0x1
c00161de:	50                   	push   eax
c00161df:	52                   	push   edx
c00161e0:	53                   	push   ebx
c00161e1:	e8 5e ba ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00161e6:	83 c4 20             	add    esp,0x20
c00161e9:	09 f0                	or     eax,esi
c00161eb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00161ef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00161f3:	c1 e0 03             	shl    eax,0x3
c00161f6:	05 a0 c3 03 c0       	add    eax,0xc003c3a0
c00161fb:	83 ec 04             	sub    esp,0x4
c00161fe:	6a 04                	push   0x4
c0016200:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016204:	50                   	push   eax
c0016205:	e8 57 a4 fe ff       	call   c0000661 <memcpy>
c001620a:	83 c4 10             	add    esp,0x10
c001620d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016211:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016214:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016218:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001621c:	05 00 10 00 00       	add    eax,0x1000
c0016221:	c1 e8 0c             	shr    eax,0xc
c0016224:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001622c:	89 04 24             	mov    DWORD PTR [esp],eax
c001622f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016233:	25 ff 0f 00 00       	and    eax,0xfff
c0016238:	89 c6                	mov    esi,eax
c001623a:	e8 72 b2 ff ff       	call   c00114b1 <Virt::getAKernelVAS()>
c001623f:	89 c3                	mov    ebx,eax
c0016241:	83 ec 0c             	sub    esp,0xc
c0016244:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016248:	e8 d4 b0 ff ff       	call   c0011321 <Virt::allocateKernelVirtualPages(int)>
c001624d:	83 c4 10             	add    esp,0x10
c0016250:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016254:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001625a:	83 ec 0c             	sub    esp,0xc
c001625d:	6a 01                	push   0x1
c001625f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016263:	50                   	push   eax
c0016264:	52                   	push   edx
c0016265:	53                   	push   ebx
c0016266:	e8 d9 b9 ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001626b:	83 c4 20             	add    esp,0x20
c001626e:	09 f0                	or     eax,esi
c0016270:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016274:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016277:	83 ec 0c             	sub    esp,0xc
c001627a:	50                   	push   eax
c001627b:	e8 d7 b3 ff ff       	call   c0011657 <Virt::freeKernelVirtualPages(unsigned long)>
c0016280:	83 c4 10             	add    esp,0x10
c0016283:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016287:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001628b:	89 14 c5 a4 c3 03 c0 	mov    DWORD PTR [eax*8-0x3ffc3c5c],edx
c0016292:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0016296:	e9 ed fe ff ff       	jmp    c0016188 <loadACPITables(unsigned char*)+0x10d>
c001629b:	90                   	nop
c001629c:	83 c4 44             	add    esp,0x44
c001629f:	5b                   	pop    ebx
c00162a0:	5e                   	pop    esi
c00162a1:	c3                   	ret    

c00162a2 <findRSDT(unsigned char*)>:
c00162a2:	56                   	push   esi
c00162a3:	53                   	push   ebx
c00162a4:	83 ec 44             	sub    esp,0x44
c00162a7:	a1 a8 b9 03 c0       	mov    eax,ds:0xc003b9a8
c00162ac:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00162b2:	83 e0 04             	and    eax,0x4
c00162b5:	84 c0                	test   al,al
c00162b7:	75 0a                	jne    c00162c3 <findRSDT(unsigned char*)+0x21>
c00162b9:	b8 00 00 00 00       	mov    eax,0x0
c00162be:	e9 f7 00 00 00       	jmp    c00163ba <findRSDT(unsigned char*)+0x118>
c00162c3:	83 ec 04             	sub    esp,0x4
c00162c6:	6a 24                	push   0x24
c00162c8:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00162cc:	8d 44 24 18          	lea    eax,[esp+0x18]
c00162d0:	50                   	push   eax
c00162d1:	e8 8b a3 fe ff       	call   c0000661 <memcpy>
c00162d6:	83 c4 10             	add    esp,0x10
c00162d9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00162dd:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00162e1:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00162e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00162ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00162f1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00162f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162f9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00162fd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016301:	25 ff 0f 00 00       	and    eax,0xfff
c0016306:	89 c6                	mov    esi,eax
c0016308:	e8 a4 b1 ff ff       	call   c00114b1 <Virt::getAKernelVAS()>
c001630d:	89 c3                	mov    ebx,eax
c001630f:	83 ec 0c             	sub    esp,0xc
c0016312:	6a 02                	push   0x2
c0016314:	e8 08 b0 ff ff       	call   c0011321 <Virt::allocateKernelVirtualPages(int)>
c0016319:	83 c4 10             	add    esp,0x10
c001631c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016320:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016326:	83 ec 0c             	sub    esp,0xc
c0016329:	6a 01                	push   0x1
c001632b:	6a 02                	push   0x2
c001632d:	50                   	push   eax
c001632e:	52                   	push   edx
c001632f:	53                   	push   ebx
c0016330:	e8 0f b9 ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016335:	83 c4 20             	add    esp,0x20
c0016338:	09 f0                	or     eax,esi
c001633a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001633e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016342:	25 ff 0f 00 00       	and    eax,0xfff
c0016347:	89 c6                	mov    esi,eax
c0016349:	e8 63 b1 ff ff       	call   c00114b1 <Virt::getAKernelVAS()>
c001634e:	89 c3                	mov    ebx,eax
c0016350:	83 ec 0c             	sub    esp,0xc
c0016353:	6a 02                	push   0x2
c0016355:	e8 c7 af ff ff       	call   c0011321 <Virt::allocateKernelVirtualPages(int)>
c001635a:	83 c4 10             	add    esp,0x10
c001635d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016361:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016367:	83 ec 0c             	sub    esp,0xc
c001636a:	6a 01                	push   0x1
c001636c:	6a 02                	push   0x2
c001636e:	50                   	push   eax
c001636f:	52                   	push   edx
c0016370:	53                   	push   ebx
c0016371:	e8 ce b8 ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016376:	83 c4 20             	add    esp,0x20
c0016379:	09 f0                	or     eax,esi
c001637b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001637f:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0016384:	75 11                	jne    c0016397 <findRSDT(unsigned char*)+0xf5>
c0016386:	c6 05 a0 c5 03 c0 00 	mov    BYTE PTR ds:0xc003c5a0,0x0
c001638d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016391:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016395:	eb 1f                	jmp    c00163b6 <findRSDT(unsigned char*)+0x114>
c0016397:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c001639c:	75 11                	jne    c00163af <findRSDT(unsigned char*)+0x10d>
c001639e:	c6 05 a0 c5 03 c0 01 	mov    BYTE PTR ds:0xc003c5a0,0x1
c00163a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00163a9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00163ad:	eb 07                	jmp    c00163b6 <findRSDT(unsigned char*)+0x114>
c00163af:	b8 00 00 00 00       	mov    eax,0x0
c00163b4:	eb 04                	jmp    c00163ba <findRSDT(unsigned char*)+0x118>
c00163b6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00163ba:	83 c4 44             	add    esp,0x44
c00163bd:	5b                   	pop    ebx
c00163be:	5e                   	pop    esi
c00163bf:	c3                   	ret    

c00163c0 <findDataTable(unsigned char*, char*)>:
c00163c0:	83 ec 1c             	sub    esp,0x1c
c00163c3:	a1 a8 b9 03 c0       	mov    eax,ds:0xc003b9a8
c00163c8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00163ce:	83 e0 04             	and    eax,0x4
c00163d1:	84 c0                	test   al,al
c00163d3:	75 07                	jne    c00163dc <findDataTable(unsigned char*, char*)+0x1c>
c00163d5:	b8 00 00 00 00       	mov    eax,0x0
c00163da:	eb 7c                	jmp    c0016458 <findDataTable(unsigned char*, char*)+0x98>
c00163dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00163e4:	a1 8c c3 03 c0       	mov    eax,ds:0xc003c38c
c00163e9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00163ed:	7d 3a                	jge    c0016429 <findDataTable(unsigned char*, char*)+0x69>
c00163ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00163f3:	c1 e0 03             	shl    eax,0x3
c00163f6:	05 a0 c3 03 c0       	add    eax,0xc003c3a0
c00163fb:	83 ec 04             	sub    esp,0x4
c00163fe:	6a 04                	push   0x4
c0016400:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016404:	50                   	push   eax
c0016405:	e8 92 a1 fe ff       	call   c000059c <memcmp>
c001640a:	83 c4 10             	add    esp,0x10
c001640d:	85 c0                	test   eax,eax
c001640f:	0f 94 c0             	sete   al
c0016412:	84 c0                	test   al,al
c0016414:	74 0d                	je     c0016423 <findDataTable(unsigned char*, char*)+0x63>
c0016416:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001641a:	8b 04 c5 a4 c3 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffc3c5c]
c0016421:	eb 35                	jmp    c0016458 <findDataTable(unsigned char*, char*)+0x98>
c0016423:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016427:	eb bb                	jmp    c00163e4 <findDataTable(unsigned char*, char*)+0x24>
c0016429:	a0 a0 c5 03 c0       	mov    al,ds:0xc003c5a0
c001642e:	84 c0                	test   al,al
c0016430:	74 07                	je     c0016439 <findDataTable(unsigned char*, char*)+0x79>
c0016432:	b8 58 00 00 00       	mov    eax,0x58
c0016437:	eb 05                	jmp    c001643e <findDataTable(unsigned char*, char*)+0x7e>
c0016439:	b8 52 00 00 00       	mov    eax,0x52
c001643e:	83 ec 04             	sub    esp,0x4
c0016441:	50                   	push   eax
c0016442:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016446:	68 7c a0 03 c0       	push   0xc003a07c
c001644b:	e8 b2 6a ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0016450:	83 c4 10             	add    esp,0x10
c0016453:	b8 00 00 00 00       	mov    eax,0x0
c0016458:	83 c4 1c             	add    esp,0x1c
c001645b:	c3                   	ret    

c001645c <scanMADT()>:
c001645c:	83 ec 2c             	sub    esp,0x2c
c001645f:	a1 a8 b9 03 c0       	mov    eax,ds:0xc003b9a8
c0016464:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001646a:	83 e0 04             	and    eax,0x4
c001646d:	84 c0                	test   al,al
c001646f:	0f 84 73 03 00 00    	je     c00167e8 <scanMADT()+0x38c>
c0016475:	e8 77 fb ff ff       	call   c0015ff1 <findRSDP()>
c001647a:	a3 ac c5 03 c0       	mov    ds:0xc003c5ac,eax
c001647f:	a1 ac c5 03 c0       	mov    eax,ds:0xc003c5ac
c0016484:	85 c0                	test   eax,eax
c0016486:	75 19                	jne    c00164a1 <scanMADT()+0x45>
c0016488:	a1 a8 b9 03 c0       	mov    eax,ds:0xc003b9a8
c001648d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016493:	83 e2 fb             	and    edx,0xfffffffb
c0016496:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001649c:	e9 4b 03 00 00       	jmp    c00167ec <scanMADT()+0x390>
c00164a1:	a1 ac c5 03 c0       	mov    eax,ds:0xc003c5ac
c00164a6:	83 ec 0c             	sub    esp,0xc
c00164a9:	50                   	push   eax
c00164aa:	e8 f3 fd ff ff       	call   c00162a2 <findRSDT(unsigned char*)>
c00164af:	83 c4 10             	add    esp,0x10
c00164b2:	a3 a8 c5 03 c0       	mov    ds:0xc003c5a8,eax
c00164b7:	a1 a8 c5 03 c0       	mov    eax,ds:0xc003c5a8
c00164bc:	85 c0                	test   eax,eax
c00164be:	75 19                	jne    c00164d9 <scanMADT()+0x7d>
c00164c0:	a1 a8 b9 03 c0       	mov    eax,ds:0xc003b9a8
c00164c5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00164cb:	83 e2 fb             	and    edx,0xfffffffb
c00164ce:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00164d4:	e9 13 03 00 00       	jmp    c00167ec <scanMADT()+0x390>
c00164d9:	a1 a8 c5 03 c0       	mov    eax,ds:0xc003c5a8
c00164de:	83 ec 0c             	sub    esp,0xc
c00164e1:	50                   	push   eax
c00164e2:	e8 94 fb ff ff       	call   c001607b <loadACPITables(unsigned char*)>
c00164e7:	83 c4 10             	add    esp,0x10
c00164ea:	a1 a8 c5 03 c0       	mov    eax,ds:0xc003c5a8
c00164ef:	83 ec 08             	sub    esp,0x8
c00164f2:	68 ba 9f 03 c0       	push   0xc0039fba
c00164f7:	50                   	push   eax
c00164f8:	e8 c3 fe ff ff       	call   c00163c0 <findDataTable(unsigned char*, char*)>
c00164fd:	83 c4 10             	add    esp,0x10
c0016500:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016504:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0016509:	75 19                	jne    c0016524 <scanMADT()+0xc8>
c001650b:	a1 a8 b9 03 c0       	mov    eax,ds:0xc003b9a8
c0016510:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0016516:	83 e2 fe             	and    edx,0xfffffffe
c0016519:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001651f:	e9 c8 02 00 00       	jmp    c00167ec <scanMADT()+0x390>
c0016524:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001652c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016530:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0016533:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0016537:	0f 87 af 02 00 00    	ja     c00167ec <scanMADT()+0x390>
c001653d:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0016545:	0f 87 a1 02 00 00    	ja     c00167ec <scanMADT()+0x390>
c001654b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001654f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016553:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016557:	8d 50 01             	lea    edx,[eax+0x1]
c001655a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001655e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016562:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016566:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001656a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001656e:	8d 50 01             	lea    edx,[eax+0x1]
c0016571:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016575:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016579:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001657d:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0016581:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0016586:	0f 86 5f 02 00 00    	jbe    c00167eb <scanMADT()+0x38f>
c001658c:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0016591:	75 57                	jne    c00165ea <scanMADT()+0x18e>
c0016593:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016597:	8d 50 01             	lea    edx,[eax+0x1]
c001659a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001659e:	8a 15 e0 c6 03 c0    	mov    dl,BYTE PTR ds:0xc003c6e0
c00165a4:	0f b6 d2             	movzx  edx,dl
c00165a7:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00165ab:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00165af:	88 82 20 c7 03 c0    	mov    BYTE PTR [edx-0x3ffc38e0],al
c00165b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165b9:	8d 50 01             	lea    edx,[eax+0x1]
c00165bc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00165c0:	8a 15 e0 c6 03 c0    	mov    dl,BYTE PTR ds:0xc003c6e0
c00165c6:	8d 4a 01             	lea    ecx,[edx+0x1]
c00165c9:	88 0d e0 c6 03 c0    	mov    BYTE PTR ds:0xc003c6e0,cl
c00165cf:	0f b6 d2             	movzx  edx,dl
c00165d2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00165d6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00165da:	88 82 00 c7 03 c0    	mov    BYTE PTR [edx-0x3ffc3900],al
c00165e0:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00165e5:	e9 ea 01 00 00       	jmp    c00167d4 <scanMADT()+0x378>
c00165ea:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c00165ef:	0f 85 14 01 00 00    	jne    c0016709 <scanMADT()+0x2ad>
c00165f5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165f9:	8d 50 01             	lea    edx,[eax+0x1]
c00165fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016600:	8a 15 b0 c5 03 c0    	mov    dl,BYTE PTR ds:0xc003c5b0
c0016606:	0f b6 d2             	movzx  edx,dl
c0016609:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001660d:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0016611:	88 82 c0 c5 03 c0    	mov    BYTE PTR [edx-0x3ffc3a40],al
c0016617:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c001661b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001661f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016623:	01 d0                	add    eax,edx
c0016625:	83 c0 2c             	add    eax,0x2c
c0016628:	8a 00                	mov    al,BYTE PTR [eax]
c001662a:	0f b6 d0             	movzx  edx,al
c001662d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016631:	8d 48 01             	lea    ecx,[eax+0x1]
c0016634:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016638:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001663c:	0f b6 c0             	movzx  eax,al
c001663f:	c1 e0 08             	shl    eax,0x8
c0016642:	89 d1                	mov    ecx,edx
c0016644:	09 c1                	or     ecx,eax
c0016646:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001664a:	8d 50 02             	lea    edx,[eax+0x2]
c001664d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016651:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016655:	0f b6 c0             	movzx  eax,al
c0016658:	c1 e0 10             	shl    eax,0x10
c001665b:	09 c1                	or     ecx,eax
c001665d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016661:	8d 50 03             	lea    edx,[eax+0x3]
c0016664:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016668:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001666c:	0f b6 c0             	movzx  eax,al
c001666f:	c1 e0 18             	shl    eax,0x18
c0016672:	09 c1                	or     ecx,eax
c0016674:	89 ca                	mov    edx,ecx
c0016676:	a0 b0 c5 03 c0       	mov    al,ds:0xc003c5b0
c001667b:	0f b6 c0             	movzx  eax,al
c001667e:	89 14 85 e0 c5 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3a20],edx
c0016685:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001668a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001668e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016692:	01 d0                	add    eax,edx
c0016694:	83 c0 2c             	add    eax,0x2c
c0016697:	8a 00                	mov    al,BYTE PTR [eax]
c0016699:	0f b6 d0             	movzx  edx,al
c001669c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166a0:	8d 48 01             	lea    ecx,[eax+0x1]
c00166a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00166a7:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00166ab:	0f b6 c0             	movzx  eax,al
c00166ae:	c1 e0 08             	shl    eax,0x8
c00166b1:	89 d1                	mov    ecx,edx
c00166b3:	09 c1                	or     ecx,eax
c00166b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166b9:	8d 50 02             	lea    edx,[eax+0x2]
c00166bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00166c0:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00166c4:	0f b6 c0             	movzx  eax,al
c00166c7:	c1 e0 10             	shl    eax,0x10
c00166ca:	09 c1                	or     ecx,eax
c00166cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00166d0:	8d 50 03             	lea    edx,[eax+0x3]
c00166d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00166d7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00166db:	0f b6 c0             	movzx  eax,al
c00166de:	c1 e0 18             	shl    eax,0x18
c00166e1:	09 c1                	or     ecx,eax
c00166e3:	89 ca                	mov    edx,ecx
c00166e5:	a0 b0 c5 03 c0       	mov    al,ds:0xc003c5b0
c00166ea:	0f b6 c0             	movzx  eax,al
c00166ed:	89 14 85 60 c6 03 c0 	mov    DWORD PTR [eax*4-0x3ffc39a0],edx
c00166f4:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00166f9:	a0 b0 c5 03 c0       	mov    al,ds:0xc003c5b0
c00166fe:	40                   	inc    eax
c00166ff:	a2 b0 c5 03 c0       	mov    ds:0xc003c5b0,al
c0016704:	e9 cb 00 00 00       	jmp    c00167d4 <scanMADT()+0x378>
c0016709:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c001670e:	0f 85 a6 00 00 00    	jne    c00167ba <scanMADT()+0x35e>
c0016714:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016718:	8d 50 01             	lea    edx,[eax+0x1]
c001671b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001671f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016723:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0016727:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001672b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001672f:	8d 50 01             	lea    edx,[eax+0x1]
c0016732:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0016736:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001673a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001673e:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0016742:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016746:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001674a:	01 d0                	add    eax,edx
c001674c:	83 c0 2c             	add    eax,0x2c
c001674f:	8a 00                	mov    al,BYTE PTR [eax]
c0016751:	0f b6 d0             	movzx  edx,al
c0016754:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016758:	8d 48 01             	lea    ecx,[eax+0x1]
c001675b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001675f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0016763:	0f b6 c0             	movzx  eax,al
c0016766:	c1 e0 08             	shl    eax,0x8
c0016769:	89 d1                	mov    ecx,edx
c001676b:	09 c1                	or     ecx,eax
c001676d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016771:	8d 50 02             	lea    edx,[eax+0x2]
c0016774:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016778:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001677c:	0f b6 c0             	movzx  eax,al
c001677f:	c1 e0 10             	shl    eax,0x10
c0016782:	09 c1                	or     ecx,eax
c0016784:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016788:	8d 50 03             	lea    edx,[eax+0x3]
c001678b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001678f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0016793:	0f b6 c0             	movzx  eax,al
c0016796:	c1 e0 18             	shl    eax,0x18
c0016799:	09 c8                	or     eax,ecx
c001679b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001679f:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00167a4:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c00167a9:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00167ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167b2:	88 90 00 b1 03 c0    	mov    BYTE PTR [eax-0x3ffc4f00],dl
c00167b8:	eb 1a                	jmp    c00167d4 <scanMADT()+0x378>
c00167ba:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c00167bf:	75 07                	jne    c00167c8 <scanMADT()+0x36c>
c00167c1:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00167c6:	eb 0c                	jmp    c00167d4 <scanMADT()+0x378>
c00167c8:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c00167cd:	75 05                	jne    c00167d4 <scanMADT()+0x378>
c00167cf:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c00167d4:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c00167d9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00167dd:	01 d0                	add    eax,edx
c00167df:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00167e3:	e9 44 fd ff ff       	jmp    c001652c <scanMADT()+0xd0>
c00167e8:	90                   	nop
c00167e9:	eb 01                	jmp    c00167ec <scanMADT()+0x390>
c00167eb:	90                   	nop
c00167ec:	83 c4 2c             	add    esp,0x2c
c00167ef:	c3                   	ret    

c00167f0 <ACPI::ACPI()>:
c00167f0:	83 ec 0c             	sub    esp,0xc
c00167f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167f7:	83 ec 08             	sub    esp,0x8
c00167fa:	68 bf 9f 03 c0       	push   0xc0039fbf
c00167ff:	50                   	push   eax
c0016800:	e8 a7 d1 ff ff       	call   c00139ac <Device::Device(char const*)>
c0016805:	83 c4 10             	add    esp,0x10
c0016808:	ba e4 a0 03 c0       	mov    edx,0xc003a0e4
c001680d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016811:	89 10                	mov    DWORD PTR [eax],edx
c0016813:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016817:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001681e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016822:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c001682c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016830:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c001683a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001683e:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0016845:	e8 12 fc ff ff       	call   c001645c <scanMADT()>
c001684a:	90                   	nop
c001684b:	83 c4 0c             	add    esp,0xc
c001684e:	c3                   	ret    
c001684f:	90                   	nop

c0016850 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0016850:	83 ec 2c             	sub    esp,0x2c
c0016853:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016857:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001685b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001685f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0016863:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0016868:	88 d0                	mov    al,dl
c001686a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001686e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0016873:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001687b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001687f:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016885:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0016889:	0f 8d 97 00 00 00    	jge    c0016926 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c001688f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016893:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016897:	83 c2 2a             	add    edx,0x2a
c001689a:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c001689e:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00168a3:	75 78                	jne    c001691d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00168a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00168a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00168ad:	83 c2 2a             	add    edx,0x2a
c00168b0:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c00168b4:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c00168b8:	75 63                	jne    c001691d <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00168ba:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00168bf:	74 3a                	je     c00168fb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c00168c1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00168c5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00168c9:	83 c2 2a             	add    edx,0x2a
c00168cc:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00168d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00168d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00168d7:	39 c2                	cmp    edx,eax
c00168d9:	74 10                	je     c00168eb <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00168db:	83 ec 0c             	sub    esp,0xc
c00168de:	68 ac a0 03 c0       	push   0xc003a0ac
c00168e3:	e8 38 67 ff ff       	call   c000d020 <panic(char const*)>
c00168e8:	83 c4 10             	add    esp,0x10
c00168eb:	83 ec 0c             	sub    esp,0xc
c00168ee:	68 c4 9f 03 c0       	push   0xc0039fc4
c00168f3:	e8 28 67 ff ff       	call   c000d020 <panic(char const*)>
c00168f8:	83 c4 10             	add    esp,0x10
c00168fb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00168ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016903:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016907:	83 c2 2a             	add    edx,0x2a
c001690a:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c001690e:	8b 02                	mov    eax,DWORD PTR [edx]
c0016910:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0016913:	89 01                	mov    DWORD PTR [ecx],eax
c0016915:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016918:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c001691d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0016921:	e9 55 ff ff ff       	jmp    c001687b <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0016926:	90                   	nop
c0016927:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001692b:	83 c4 2c             	add    esp,0x2c
c001692e:	c2 04 00             	ret    0x4
c0016931:	90                   	nop

c0016932 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0016932:	83 ec 1c             	sub    esp,0x1c
c0016935:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016939:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c001693d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016941:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0016946:	88 c8                	mov    al,cl
c0016948:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001694c:	88 d0                	mov    al,dl
c001694e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0016952:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016956:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001695c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016960:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0016963:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0016967:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001696b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001696f:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0016975:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016979:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001697c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016980:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0016985:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016989:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001698f:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0016993:	8d 48 01             	lea    ecx,[eax+0x1]
c0016996:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001699a:	83 c2 2a             	add    edx,0x2a
c001699d:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00169a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169a5:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00169ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169af:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00169b2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00169b6:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00169ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169be:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00169c4:	8d 50 01             	lea    edx,[eax+0x1]
c00169c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169cb:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c00169d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00169d5:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00169db:	3d 00 08 00 00       	cmp    eax,0x800
c00169e0:	75 10                	jne    c00169f2 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00169e2:	83 ec 0c             	sub    esp,0xc
c00169e5:	68 d3 9f 03 c0       	push   0xc0039fd3
c00169ea:	e8 31 66 ff ff       	call   c000d020 <panic(char const*)>
c00169ef:	83 c4 10             	add    esp,0x10
c00169f2:	90                   	nop
c00169f3:	83 c4 1c             	add    esp,0x1c
c00169f6:	c3                   	ret    
c00169f7:	90                   	nop

c00169f8 <ACPI::setScreenBrightnessLevel(void*, int)>:
c00169f8:	b8 00 00 00 00       	mov    eax,0x0
c00169fd:	c3                   	ret    

c00169fe <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00169fe:	83 ec 1c             	sub    esp,0x1c
c0016a01:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016a05:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0016a08:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0016a0c:	a1 a8 b9 03 c0       	mov    eax,ds:0xc003b9a8
c0016a11:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0016a16:	83 ec 08             	sub    esp,0x8
c0016a19:	52                   	push   edx
c0016a1a:	50                   	push   eax
c0016a1b:	e8 38 4c ff ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c0016a20:	83 c4 10             	add    esp,0x10
c0016a23:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0016a27:	a1 a8 b9 03 c0       	mov    eax,ds:0xc003b9a8
c0016a2c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0016a31:	83 ec 04             	sub    esp,0x4
c0016a34:	6a 01                	push   0x1
c0016a36:	52                   	push   edx
c0016a37:	50                   	push   eax
c0016a38:	e8 23 4d ff ff       	call   c000b760 <Computer::writeCMOS(unsigned char, unsigned char)>
c0016a3d:	83 c4 10             	add    esp,0x10
c0016a40:	90                   	nop
c0016a41:	83 c4 1c             	add    esp,0x1c
c0016a44:	c3                   	ret    
c0016a45:	90                   	nop

c0016a46 <ACPI::open(int, int, void*)>:
c0016a46:	53                   	push   ebx
c0016a47:	83 ec 18             	sub    esp,0x18
c0016a4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a4e:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0016a54:	83 f0 01             	xor    eax,0x1
c0016a57:	84 c0                	test   al,al
c0016a59:	74 0b                	je     c0016a66 <ACPI::open(int, int, void*)+0x20>
c0016a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a5f:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0016a66:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a6a:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0016a70:	84 c0                	test   al,al
c0016a72:	74 60                	je     c0016ad4 <ACPI::open(int, int, void*)+0x8e>
c0016a74:	83 ec 0c             	sub    esp,0xc
c0016a77:	68 58 01 00 00       	push   0x158
c0016a7c:	e8 31 ba ff ff       	call   c00124b2 <operator new(unsigned long)>
c0016a81:	83 c4 10             	add    esp,0x10
c0016a84:	89 c3                	mov    ebx,eax
c0016a86:	83 ec 0c             	sub    esp,0xc
c0016a89:	53                   	push   ebx
c0016a8a:	e8 25 45 00 00       	call   c001afb4 <PCI::PCI()>
c0016a8f:	83 c4 10             	add    esp,0x10
c0016a92:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0016a96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016a9a:	83 ec 08             	sub    esp,0x8
c0016a9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016aa1:	50                   	push   eax
c0016aa2:	e8 15 cd ff ff       	call   c00137bc <Device::addChild(Device*)>
c0016aa7:	83 c4 10             	add    esp,0x10
c0016aaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016aae:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ab0:	83 c0 08             	add    eax,0x8
c0016ab3:	8b 00                	mov    eax,DWORD PTR [eax]
c0016ab5:	6a 00                	push   0x0
c0016ab7:	6a 00                	push   0x0
c0016ab9:	6a 00                	push   0x0
c0016abb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016abf:	ff d0                	call   eax
c0016ac1:	83 c4 10             	add    esp,0x10
c0016ac4:	83 ec 0c             	sub    esp,0xc
c0016ac7:	68 f0 9f 03 c0       	push   0xc0039ff0
c0016acc:	e8 31 64 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0016ad1:	83 c4 10             	add    esp,0x10
c0016ad4:	83 ec 0c             	sub    esp,0xc
c0016ad7:	68 fb 9f 03 c0       	push   0xc0039ffb
c0016adc:	e8 23 52 ff ff       	call   c000bd04 <loadKernelSymbolTable(char const*)>
c0016ae1:	83 c4 10             	add    esp,0x10
c0016ae4:	8b 1d a8 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9a8
c0016aea:	83 ec 0c             	sub    esp,0xc
c0016aed:	68 19 a0 03 c0       	push   0xc003a019
c0016af2:	e8 eb 5b ff ff       	call   c000c6e2 <loadDLL(char const*)>
c0016af7:	83 c4 10             	add    esp,0x10
c0016afa:	83 ec 08             	sub    esp,0x8
c0016afd:	53                   	push   ebx
c0016afe:	50                   	push   eax
c0016aff:	e8 a7 5c ff ff       	call   c000c7ab <executeDLL(unsigned long, void*)>
c0016b04:	83 c4 10             	add    esp,0x10
c0016b07:	a1 a8 b9 03 c0       	mov    eax,ds:0xc003b9a8
c0016b0c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0016b12:	83 e0 04             	and    eax,0x4
c0016b15:	84 c0                	test   al,al
c0016b17:	74 23                	je     c0016b3c <ACPI::open(int, int, void*)+0xf6>
c0016b19:	8b 1d a8 b9 03 c0    	mov    ebx,DWORD PTR ds:0xc003b9a8
c0016b1f:	83 ec 0c             	sub    esp,0xc
c0016b22:	68 36 a0 03 c0       	push   0xc003a036
c0016b27:	e8 b6 5b ff ff       	call   c000c6e2 <loadDLL(char const*)>
c0016b2c:	83 c4 10             	add    esp,0x10
c0016b2f:	83 ec 08             	sub    esp,0x8
c0016b32:	53                   	push   ebx
c0016b33:	50                   	push   eax
c0016b34:	e8 72 5c ff ff       	call   c000c7ab <executeDLL(unsigned long, void*)>
c0016b39:	83 c4 10             	add    esp,0x10
c0016b3c:	a1 a8 c5 03 c0       	mov    eax,ds:0xc003c5a8
c0016b41:	83 ec 08             	sub    esp,0x8
c0016b44:	68 53 a0 03 c0       	push   0xc003a053
c0016b49:	50                   	push   eax
c0016b4a:	e8 71 f8 ff ff       	call   c00163c0 <findDataTable(unsigned char*, char*)>
c0016b4f:	83 c4 10             	add    esp,0x10
c0016b52:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b56:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016b5b:	74 13                	je     c0016b70 <ACPI::open(int, int, void*)+0x12a>
c0016b5d:	83 ec 08             	sub    esp,0x8
c0016b60:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016b64:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016b68:	e8 91 fe ff ff       	call   c00169fe <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0016b6d:	83 c4 10             	add    esp,0x10
c0016b70:	b8 00 00 00 00       	mov    eax,0x0
c0016b75:	83 c4 18             	add    esp,0x18
c0016b78:	5b                   	pop    ebx
c0016b79:	c3                   	ret    

c0016b7a <ACPI::sleep()>:
c0016b7a:	83 ec 0c             	sub    esp,0xc
c0016b7d:	a1 80 c3 03 c0       	mov    eax,ds:0xc003c380
c0016b82:	85 c0                	test   eax,eax
c0016b84:	74 07                	je     c0016b8d <ACPI::sleep()+0x13>
c0016b86:	a1 80 c3 03 c0       	mov    eax,ds:0xc003c380
c0016b8b:	ff d0                	call   eax
c0016b8d:	90                   	nop
c0016b8e:	83 c4 0c             	add    esp,0xc
c0016b91:	c3                   	ret    

c0016b92 <CPU::close(int, int, void*)>:
c0016b92:	31 c0                	xor    eax,eax
c0016b94:	c3                   	ret    

c0016b95 <lookupAMDCPUName(unsigned char, unsigned char)>:
c0016b95:	55                   	push   ebp
c0016b96:	57                   	push   edi
c0016b97:	56                   	push   esi
c0016b98:	53                   	push   ebx
c0016b99:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016b9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016ba1:	89 ce                	mov    esi,ecx
c0016ba3:	89 d5                	mov    ebp,edx
c0016ba5:	80 f9 04             	cmp    cl,0x4
c0016ba8:	75 28                	jne    c0016bd2 <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c0016baa:	8d 42 f9             	lea    eax,[edx-0x7]
c0016bad:	3c 03                	cmp    al,0x3
c0016baf:	0f 86 63 01 00 00    	jbe    c0016d18 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0016bb5:	80 fa 03             	cmp    dl,0x3
c0016bb8:	0f 84 5a 01 00 00    	je     c0016d18 <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0016bbe:	8d 7a f2             	lea    edi,[edx-0xe]
c0016bc1:	b8 d0 b2 03 c0       	mov    eax,0xc003b2d0
c0016bc6:	89 fb                	mov    ebx,edi
c0016bc8:	80 fb 01             	cmp    bl,0x1
c0016bcb:	77 4e                	ja     c0016c1b <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c0016bcd:	e9 52 01 00 00       	jmp    c0016d24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016bd2:	80 f9 05             	cmp    cl,0x5
c0016bd5:	75 4d                	jne    c0016c24 <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c0016bd7:	b8 e0 b2 03 c0       	mov    eax,0xc003b2e0
c0016bdc:	80 fa 03             	cmp    dl,0x3
c0016bdf:	0f 86 3f 01 00 00    	jbe    c0016d24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016be5:	8d 7a fa             	lea    edi,[edx-0x6]
c0016be8:	b8 f0 b2 03 c0       	mov    eax,0xc003b2f0
c0016bed:	89 fb                	mov    ebx,edi
c0016bef:	80 fb 01             	cmp    bl,0x1
c0016bf2:	0f 86 2c 01 00 00    	jbe    c0016d24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016bf8:	b8 00 b3 03 c0       	mov    eax,0xc003b300
c0016bfd:	80 fa 08             	cmp    dl,0x8
c0016c00:	0f 84 1e 01 00 00    	je     c0016d24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c06:	89 d7                	mov    edi,edx
c0016c08:	b8 10 b3 03 c0       	mov    eax,0xc003b310
c0016c0d:	83 e7 fb             	and    edi,0xfffffffb
c0016c10:	89 fb                	mov    ebx,edi
c0016c12:	80 fb 09             	cmp    bl,0x9
c0016c15:	0f 84 09 01 00 00    	je     c0016d24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c1b:	31 c0                	xor    eax,eax
c0016c1d:	89 eb                	mov    ebx,ebp
c0016c1f:	0f b6 fb             	movzx  edi,bl
c0016c22:	eb 30                	jmp    c0016c54 <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c0016c24:	31 c0                	xor    eax,eax
c0016c26:	80 f9 06             	cmp    cl,0x6
c0016c29:	75 f2                	jne    c0016c1d <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016c2b:	80 fa 0a             	cmp    dl,0xa
c0016c2e:	77 ed                	ja     c0016c1d <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016c30:	bf de 05 00 00       	mov    edi,0x5de
c0016c35:	0f a3 d7             	bt     edi,edx
c0016c38:	73 e3                	jae    c0016c1d <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c0016c3a:	b8 20 b3 03 c0       	mov    eax,0xc003b320
c0016c3f:	e9 e0 00 00 00       	jmp    c0016d24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c44:	39 c7                	cmp    edi,eax
c0016c46:	0f 84 d3 00 00 00    	je     c0016d1f <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0016c4c:	40                   	inc    eax
c0016c4d:	3d d0 00 00 00       	cmp    eax,0xd0
c0016c52:	74 09                	je     c0016c5d <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c0016c54:	89 f3                	mov    ebx,esi
c0016c56:	80 fb 0f             	cmp    bl,0xf
c0016c59:	75 f1                	jne    c0016c4c <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c0016c5b:	eb e7                	jmp    c0016c44 <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c0016c5d:	80 f9 10             	cmp    cl,0x10
c0016c60:	75 14                	jne    c0016c76 <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c0016c62:	8d 42 fc             	lea    eax,[edx-0x4]
c0016c65:	83 e0 fb             	and    eax,0xfffffffb
c0016c68:	3c 02                	cmp    al,0x2
c0016c6a:	76 34                	jbe    c0016ca0 <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c0016c6c:	b8 5d a2 03 c0       	mov    eax,0xc003a25d
c0016c71:	80 fa 02             	cmp    dl,0x2
c0016c74:	eb 24                	jmp    c0016c9a <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c0016c76:	80 f9 11             	cmp    cl,0x11
c0016c79:	75 13                	jne    c0016c8e <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c0016c7b:	b8 5d a2 03 c0       	mov    eax,0xc003a25d
c0016c80:	80 fa 03             	cmp    dl,0x3
c0016c83:	0f 85 9b 00 00 00    	jne    c0016d24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016c89:	e9 91 00 00 00       	jmp    c0016d1f <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0016c8e:	80 f9 12             	cmp    cl,0x12
c0016c91:	75 14                	jne    c0016ca7 <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c0016c93:	b8 5d a2 03 c0       	mov    eax,0xc003a25d
c0016c98:	fe ca                	dec    dl
c0016c9a:	0f 85 84 00 00 00    	jne    c0016d24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016ca0:	b8 40 b3 03 c0       	mov    eax,0xc003b340
c0016ca5:	eb 7d                	jmp    c0016d24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016ca7:	80 f9 14             	cmp    cl,0x14
c0016caa:	75 12                	jne    c0016cbe <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c0016cac:	4a                   	dec    edx
c0016cad:	b8 5d a2 03 c0       	mov    eax,0xc003a25d
c0016cb2:	80 fa 01             	cmp    dl,0x1
c0016cb5:	77 6d                	ja     c0016d24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016cb7:	b8 50 b3 03 c0       	mov    eax,0xc003b350
c0016cbc:	eb 66                	jmp    c0016d24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016cbe:	80 f9 15             	cmp    cl,0x15
c0016cc1:	75 31                	jne    c0016cf4 <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c0016cc3:	b8 60 b3 03 c0       	mov    eax,0xc003b360
c0016cc8:	80 fa 01             	cmp    dl,0x1
c0016ccb:	74 57                	je     c0016d24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016ccd:	b8 5d a2 03 c0       	mov    eax,0xc003a25d
c0016cd2:	80 fa 13             	cmp    dl,0x13
c0016cd5:	76 0c                	jbe    c0016ce3 <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c0016cd7:	80 fa 30             	cmp    dl,0x30
c0016cda:	75 48                	jne    c0016d24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016cdc:	b8 80 b3 03 c0       	mov    eax,0xc003b380
c0016ce1:	eb 41                	jmp    c0016d24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016ce3:	b9 04 00 09 00       	mov    ecx,0x90004
c0016ce8:	0f a3 d1             	bt     ecx,edx
c0016ceb:	73 37                	jae    c0016d24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016ced:	b8 70 b3 03 c0       	mov    eax,0xc003b370
c0016cf2:	eb 30                	jmp    c0016d24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016cf4:	b8 5d a2 03 c0       	mov    eax,0xc003a25d
c0016cf9:	80 f9 16             	cmp    cl,0x16
c0016cfc:	75 26                	jne    c0016d24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016cfe:	b8 90 b3 03 c0       	mov    eax,0xc003b390
c0016d03:	84 d2                	test   dl,dl
c0016d05:	74 1d                	je     c0016d24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016d07:	b8 5d a2 03 c0       	mov    eax,0xc003a25d
c0016d0c:	80 fa 30             	cmp    dl,0x30
c0016d0f:	75 13                	jne    c0016d24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016d11:	b8 a0 b3 03 c0       	mov    eax,0xc003b3a0
c0016d16:	eb 0c                	jmp    c0016d24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016d18:	b8 c0 b2 03 c0       	mov    eax,0xc003b2c0
c0016d1d:	eb 05                	jmp    c0016d24 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0016d1f:	b8 30 b3 03 c0       	mov    eax,0xc003b330
c0016d24:	5b                   	pop    ebx
c0016d25:	5e                   	pop    esi
c0016d26:	5f                   	pop    edi
c0016d27:	5d                   	pop    ebp
c0016d28:	c3                   	ret    

c0016d29 <lookupIntelCPUName(unsigned char, unsigned char)>:
c0016d29:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016d2d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016d31:	80 f9 04             	cmp    cl,0x4
c0016d34:	75 6b                	jne    c0016da1 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0016d36:	b8 20 b1 03 c0       	mov    eax,0xc003b120
c0016d3b:	80 fa 01             	cmp    dl,0x1
c0016d3e:	0f 86 92 02 00 00    	jbe    c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d44:	b8 30 b1 03 c0       	mov    eax,0xc003b130
c0016d49:	80 fa 02             	cmp    dl,0x2
c0016d4c:	0f 84 84 02 00 00    	je     c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d52:	b8 40 b1 03 c0       	mov    eax,0xc003b140
c0016d57:	80 fa 03             	cmp    dl,0x3
c0016d5a:	0f 84 76 02 00 00    	je     c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d60:	b8 50 b1 03 c0       	mov    eax,0xc003b150
c0016d65:	80 fa 04             	cmp    dl,0x4
c0016d68:	0f 84 68 02 00 00    	je     c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d6e:	b8 60 b1 03 c0       	mov    eax,0xc003b160
c0016d73:	80 fa 05             	cmp    dl,0x5
c0016d76:	0f 84 5a 02 00 00    	je     c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d7c:	b8 40 b1 03 c0       	mov    eax,0xc003b140
c0016d81:	80 fa 07             	cmp    dl,0x7
c0016d84:	0f 84 4c 02 00 00    	je     c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d8a:	83 ea 08             	sub    edx,0x8
c0016d8d:	b8 5d a2 03 c0       	mov    eax,0xc003a25d
c0016d92:	80 fa 01             	cmp    dl,0x1
c0016d95:	0f 87 3b 02 00 00    	ja     c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016d9b:	b8 70 b1 03 c0       	mov    eax,0xc003b170
c0016da0:	c3                   	ret    
c0016da1:	80 f9 05             	cmp    cl,0x5
c0016da4:	75 45                	jne    c0016deb <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c0016da6:	8d 4a ff             	lea    ecx,[edx-0x1]
c0016da9:	b8 80 b1 03 c0       	mov    eax,0xc003b180
c0016dae:	80 f9 02             	cmp    cl,0x2
c0016db1:	0f 86 1f 02 00 00    	jbe    c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016db7:	80 fa 04             	cmp    dl,0x4
c0016dba:	0f 84 f3 01 00 00    	je     c0016fb3 <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c0016dc0:	80 fa 07             	cmp    dl,0x7
c0016dc3:	0f 84 0d 02 00 00    	je     c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016dc9:	b8 90 b1 03 c0       	mov    eax,0xc003b190
c0016dce:	80 fa 08             	cmp    dl,0x8
c0016dd1:	0f 84 ff 01 00 00    	je     c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016dd7:	b8 5d a2 03 c0       	mov    eax,0xc003a25d
c0016ddc:	80 fa 09             	cmp    dl,0x9
c0016ddf:	0f 85 f1 01 00 00    	jne    c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016de5:	b8 a0 b1 03 c0       	mov    eax,0xc003b1a0
c0016dea:	c3                   	ret    
c0016deb:	80 f9 06             	cmp    cl,0x6
c0016dee:	0f 85 85 01 00 00    	jne    c0016f79 <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c0016df4:	b8 b0 b1 03 c0       	mov    eax,0xc003b1b0
c0016df9:	80 fa 01             	cmp    dl,0x1
c0016dfc:	0f 84 d4 01 00 00    	je     c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e02:	8d 42 fb             	lea    eax,[edx-0x5]
c0016e05:	3c 01                	cmp    al,0x1
c0016e07:	0f 86 ac 01 00 00    	jbe    c0016fb9 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0016e0d:	80 fa 03             	cmp    dl,0x3
c0016e10:	0f 84 a3 01 00 00    	je     c0016fb9 <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0016e16:	8d 4a f9             	lea    ecx,[edx-0x7]
c0016e19:	b8 d0 b1 03 c0       	mov    eax,0xc003b1d0
c0016e1e:	80 f9 01             	cmp    cl,0x1
c0016e21:	0f 86 af 01 00 00    	jbe    c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e27:	80 fa 09             	cmp    dl,0x9
c0016e2a:	0f 84 8f 01 00 00    	je     c0016fbf <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0016e30:	8d 4a f6             	lea    ecx,[edx-0xa]
c0016e33:	80 f9 01             	cmp    cl,0x1
c0016e36:	0f 86 9a 01 00 00    	jbe    c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e3c:	b8 e0 b1 03 c0       	mov    eax,0xc003b1e0
c0016e41:	80 fa 0d             	cmp    dl,0xd
c0016e44:	0f 84 8c 01 00 00    	je     c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e4a:	b8 f0 b1 03 c0       	mov    eax,0xc003b1f0
c0016e4f:	80 fa 0e             	cmp    dl,0xe
c0016e52:	0f 84 7e 01 00 00    	je     c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e58:	b8 00 b2 03 c0       	mov    eax,0xc003b200
c0016e5d:	80 fa 0f             	cmp    dl,0xf
c0016e60:	0f 84 70 01 00 00    	je     c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e66:	b8 e0 b1 03 c0       	mov    eax,0xc003b1e0
c0016e6b:	80 fa 15             	cmp    dl,0x15
c0016e6e:	0f 84 62 01 00 00    	je     c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e74:	8d 4a ea             	lea    ecx,[edx-0x16]
c0016e77:	b8 00 b2 03 c0       	mov    eax,0xc003b200
c0016e7c:	80 f9 01             	cmp    cl,0x1
c0016e7f:	0f 86 51 01 00 00    	jbe    c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016e85:	80 fa 1a             	cmp    dl,0x1a
c0016e88:	0f 84 37 01 00 00    	je     c0016fc5 <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c0016e8e:	80 fa 1c             	cmp    dl,0x1c
c0016e91:	0f 84 34 01 00 00    	je     c0016fcb <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c0016e97:	80 fa 1d             	cmp    dl,0x1d
c0016e9a:	0f 84 36 01 00 00    	je     c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ea0:	b8 30 b2 03 c0       	mov    eax,0xc003b230
c0016ea5:	80 fa 25             	cmp    dl,0x25
c0016ea8:	0f 84 28 01 00 00    	je     c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016eae:	8d 4a da             	lea    ecx,[edx-0x26]
c0016eb1:	b8 20 b2 03 c0       	mov    eax,0xc003b220
c0016eb6:	80 f9 01             	cmp    cl,0x1
c0016eb9:	0f 86 17 01 00 00    	jbe    c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ebf:	b8 40 b2 03 c0       	mov    eax,0xc003b240
c0016ec4:	80 fa 2a             	cmp    dl,0x2a
c0016ec7:	0f 84 09 01 00 00    	je     c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ecd:	b8 30 b2 03 c0       	mov    eax,0xc003b230
c0016ed2:	80 fa 2c             	cmp    dl,0x2c
c0016ed5:	0f 84 fb 00 00 00    	je     c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016edb:	b8 40 b2 03 c0       	mov    eax,0xc003b240
c0016ee0:	80 fa 2d             	cmp    dl,0x2d
c0016ee3:	0f 84 ed 00 00 00    	je     c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ee9:	b8 10 b2 03 c0       	mov    eax,0xc003b210
c0016eee:	80 fa 2e             	cmp    dl,0x2e
c0016ef1:	0f 84 df 00 00 00    	je     c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016ef7:	b8 30 b2 03 c0       	mov    eax,0xc003b230
c0016efc:	80 fa 2f             	cmp    dl,0x2f
c0016eff:	0f 84 d1 00 00 00    	je     c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f05:	8d 4a cb             	lea    ecx,[edx-0x35]
c0016f08:	b8 20 b2 03 c0       	mov    eax,0xc003b220
c0016f0d:	80 f9 01             	cmp    cl,0x1
c0016f10:	0f 86 c0 00 00 00    	jbe    c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f16:	b8 50 b2 03 c0       	mov    eax,0xc003b250
c0016f1b:	80 fa 37             	cmp    dl,0x37
c0016f1e:	0f 84 b2 00 00 00    	je     c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f24:	b8 60 b2 03 c0       	mov    eax,0xc003b260
c0016f29:	80 fa 3a             	cmp    dl,0x3a
c0016f2c:	0f 84 a4 00 00 00    	je     c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f32:	b8 70 b2 03 c0       	mov    eax,0xc003b270
c0016f37:	80 fa 3c             	cmp    dl,0x3c
c0016f3a:	0f 84 96 00 00 00    	je     c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f40:	b8 80 b2 03 c0       	mov    eax,0xc003b280
c0016f45:	80 fa 3d             	cmp    dl,0x3d
c0016f48:	0f 84 88 00 00 00    	je     c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f4e:	b8 60 b2 03 c0       	mov    eax,0xc003b260
c0016f53:	80 fa 3e             	cmp    dl,0x3e
c0016f56:	74 7e                	je     c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f58:	8d 42 bb             	lea    eax,[edx-0x45]
c0016f5b:	3c 01                	cmp    al,0x1
c0016f5d:	76 72                	jbe    c0016fd1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0016f5f:	80 fa 3f             	cmp    dl,0x3f
c0016f62:	74 6d                	je     c0016fd1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0016f64:	80 fa 4a             	cmp    dl,0x4a
c0016f67:	74 0a                	je     c0016f73 <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c0016f69:	b8 5d a2 03 c0       	mov    eax,0xc003a25d
c0016f6e:	80 fa 4d             	cmp    dl,0x4d
c0016f71:	75 63                	jne    c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f73:	b8 50 b2 03 c0       	mov    eax,0xc003b250
c0016f78:	c3                   	ret    
c0016f79:	b8 5d a2 03 c0       	mov    eax,0xc003a25d
c0016f7e:	80 f9 0b             	cmp    cl,0xb
c0016f81:	75 0a                	jne    c0016f8d <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0016f83:	fe ca                	dec    dl
c0016f85:	75 4f                	jne    c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f87:	b8 90 b2 03 c0       	mov    eax,0xc003b290
c0016f8c:	c3                   	ret    
c0016f8d:	80 f9 0f             	cmp    cl,0xf
c0016f90:	75 44                	jne    c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f92:	b8 a0 b2 03 c0       	mov    eax,0xc003b2a0
c0016f97:	80 fa 02             	cmp    dl,0x2
c0016f9a:	76 3a                	jbe    c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016f9c:	8d 42 fd             	lea    eax,[edx-0x3]
c0016f9f:	3c 01                	cmp    al,0x1
c0016fa1:	76 0a                	jbe    c0016fad <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0016fa3:	b8 5d a2 03 c0       	mov    eax,0xc003a25d
c0016fa8:	80 fa 06             	cmp    dl,0x6
c0016fab:	75 29                	jne    c0016fd6 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0016fad:	b8 b0 b2 03 c0       	mov    eax,0xc003b2b0
c0016fb2:	c3                   	ret    
c0016fb3:	b8 90 b1 03 c0       	mov    eax,0xc003b190
c0016fb8:	c3                   	ret    
c0016fb9:	b8 c0 b1 03 c0       	mov    eax,0xc003b1c0
c0016fbe:	c3                   	ret    
c0016fbf:	b8 e0 b1 03 c0       	mov    eax,0xc003b1e0
c0016fc4:	c3                   	ret    
c0016fc5:	b8 10 b2 03 c0       	mov    eax,0xc003b210
c0016fca:	c3                   	ret    
c0016fcb:	b8 20 b2 03 c0       	mov    eax,0xc003b220
c0016fd0:	c3                   	ret    
c0016fd1:	b8 70 b2 03 c0       	mov    eax,0xc003b270
c0016fd6:	c3                   	ret    

c0016fd7 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0016fd7:	60                   	pusha  
c0016fd8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016fdc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016fe0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016fe4:	9c                   	pushf  
c0016fe5:	fa                   	cli    
c0016fe6:	0f 09                	wbinvd 
c0016fe8:	0f 30                	wrmsr  
c0016fea:	9d                   	popf   
c0016feb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016fef:	89 02                	mov    DWORD PTR [edx],eax
c0016ff1:	61                   	popa   
c0016ff2:	c3                   	ret    

c0016ff3 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0016ff3:	60                   	pusha  
c0016ff4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016ff8:	9c                   	pushf  
c0016ff9:	fa                   	cli    
c0016ffa:	0f 09                	wbinvd 
c0016ffc:	31 c0                	xor    eax,eax
c0016ffe:	31 d2                	xor    edx,edx
c0017000:	0f 32                	rdmsr  
c0017002:	9d                   	popf   
c0017003:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017007:	89 02                	mov    DWORD PTR [edx],eax
c0017009:	61                   	popa   
c001700a:	c3                   	ret    

c001700b <AMD_K6_writeback(int, int, int)>:
c001700b:	56                   	push   esi
c001700c:	53                   	push   ebx
c001700d:	83 ec 10             	sub    esp,0x10
c0017010:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017014:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0017019:	75 5d                	jne    c0017078 <AMD_K6_writeback(int, int, int)+0x6d>
c001701b:	83 f8 08             	cmp    eax,0x8
c001701e:	75 09                	jne    c0017029 <AMD_K6_writeback(int, int, int)+0x1e>
c0017020:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0017025:	7e 13                	jle    c001703a <AMD_K6_writeback(int, int, int)+0x2f>
c0017027:	eb 30                	jmp    c0017059 <AMD_K6_writeback(int, int, int)+0x4e>
c0017029:	83 f8 06             	cmp    eax,0x6
c001702c:	7c 4a                	jl     c0017078 <AMD_K6_writeback(int, int, int)+0x6d>
c001702e:	83 f8 07             	cmp    eax,0x7
c0017031:	7e 07                	jle    c001703a <AMD_K6_writeback(int, int, int)+0x2f>
c0017033:	83 f8 09             	cmp    eax,0x9
c0017036:	74 21                	je     c0017059 <AMD_K6_writeback(int, int, int)+0x4e>
c0017038:	eb 3e                	jmp    c0017078 <AMD_K6_writeback(int, int, int)+0x6d>
c001703a:	89 e6                	mov    esi,esp
c001703c:	8b 1d 64 bb 03 c0    	mov    ebx,DWORD PTR ds:0xc003bb64
c0017042:	56                   	push   esi
c0017043:	c1 eb 15             	shr    ebx,0x15
c0017046:	68 82 00 00 c0       	push   0xc0000082
c001704b:	83 e3 7e             	and    ebx,0x7e
c001704e:	e8 a0 ff ff ff       	call   c0016ff3 <AMD_K6_read_msr(unsigned int, REGS*)>
c0017053:	56                   	push   esi
c0017054:	6a 00                	push   0x0
c0017056:	53                   	push   ebx
c0017057:	eb 12                	jmp    c001706b <AMD_K6_writeback(int, int, int)+0x60>
c0017059:	89 e3                	mov    ebx,esp
c001705b:	53                   	push   ebx
c001705c:	68 82 00 00 c0       	push   0xc0000082
c0017061:	e8 8d ff ff ff       	call   c0016ff3 <AMD_K6_read_msr(unsigned int, REGS*)>
c0017066:	53                   	push   ebx
c0017067:	6a 00                	push   0x0
c0017069:	6a 00                	push   0x0
c001706b:	68 82 00 00 c0       	push   0xc0000082
c0017070:	e8 62 ff ff ff       	call   c0016fd7 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0017075:	83 c4 18             	add    esp,0x18
c0017078:	83 c4 10             	add    esp,0x10
c001707b:	5b                   	pop    ebx
c001707c:	5e                   	pop    esi
c001707d:	c3                   	ret    

c001707e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001707e:	55                   	push   ebp
c001707f:	57                   	push   edi
c0017080:	56                   	push   esi
c0017081:	53                   	push   ebx
c0017082:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017086:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001708a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001708e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0017092:	39 05 c0 b3 03 c0    	cmp    DWORD PTR ds:0xc003b3c0,eax
c0017098:	75 23                	jne    c00170bd <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c001709a:	a1 4c c7 03 c0       	mov    eax,ds:0xc003c74c
c001709f:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00170a3:	89 06                	mov    DWORD PTR [esi],eax
c00170a5:	a1 48 c7 03 c0       	mov    eax,ds:0xc003c748
c00170aa:	89 07                	mov    DWORD PTR [edi],eax
c00170ac:	a1 44 c7 03 c0       	mov    eax,ds:0xc003c744
c00170b1:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00170b4:	a1 40 c7 03 c0       	mov    eax,ds:0xc003c740
c00170b9:	89 02                	mov    DWORD PTR [edx],eax
c00170bb:	eb 3f                	jmp    c00170fc <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00170bd:	31 c9                	xor    ecx,ecx
c00170bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00170c3:	0f a2                	cpuid  
c00170c5:	89 06                	mov    DWORD PTR [esi],eax
c00170c7:	89 1f                	mov    DWORD PTR [edi],ebx
c00170c9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170cd:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00170d0:	89 10                	mov    DWORD PTR [eax],edx
c00170d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00170d6:	a3 c0 b3 03 c0       	mov    ds:0xc003b3c0,eax
c00170db:	8b 06                	mov    eax,DWORD PTR [esi]
c00170dd:	a3 4c c7 03 c0       	mov    ds:0xc003c74c,eax
c00170e2:	8b 07                	mov    eax,DWORD PTR [edi]
c00170e4:	a3 48 c7 03 c0       	mov    ds:0xc003c748,eax
c00170e9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00170ec:	a3 44 c7 03 c0       	mov    ds:0xc003c744,eax
c00170f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00170f7:	a3 40 c7 03 c0       	mov    ds:0xc003c740,eax
c00170fc:	5b                   	pop    ebx
c00170fd:	5e                   	pop    esi
c00170fe:	5f                   	pop    edi
c00170ff:	5d                   	pop    ebp
c0017100:	c3                   	ret    

c0017101 <cpuidCheckEDX(unsigned int)>:
c0017101:	83 ec 10             	sub    esp,0x10
c0017104:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017108:	50                   	push   eax
c0017109:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001710d:	50                   	push   eax
c001710e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017112:	50                   	push   eax
c0017113:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017117:	50                   	push   eax
c0017118:	6a 01                	push   0x1
c001711a:	e8 5f ff ff ff       	call   c001707e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001711f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017123:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0017127:	0f 95 c0             	setne  al
c001712a:	83 c4 24             	add    esp,0x24
c001712d:	c3                   	ret    

c001712e <cpuidCheckECX(unsigned int)>:
c001712e:	83 ec 10             	sub    esp,0x10
c0017131:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017135:	50                   	push   eax
c0017136:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001713a:	50                   	push   eax
c001713b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001713f:	50                   	push   eax
c0017140:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017144:	50                   	push   eax
c0017145:	6a 01                	push   0x1
c0017147:	e8 32 ff ff ff       	call   c001707e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001714c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017150:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0017154:	0f 95 c0             	setne  al
c0017157:	83 c4 24             	add    esp,0x24
c001715a:	c3                   	ret    

c001715b <cpuidCheckExtendedEBX(unsigned int)>:
c001715b:	83 ec 10             	sub    esp,0x10
c001715e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017162:	50                   	push   eax
c0017163:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017167:	50                   	push   eax
c0017168:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001716c:	50                   	push   eax
c001716d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017171:	50                   	push   eax
c0017172:	6a 07                	push   0x7
c0017174:	e8 05 ff ff ff       	call   c001707e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017179:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001717d:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0017181:	0f 95 c0             	setne  al
c0017184:	83 c4 24             	add    esp,0x24
c0017187:	c3                   	ret    

c0017188 <cpuidCheckExtendedECX(unsigned int)>:
c0017188:	83 ec 10             	sub    esp,0x10
c001718b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001718f:	50                   	push   eax
c0017190:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017194:	50                   	push   eax
c0017195:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017199:	50                   	push   eax
c001719a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001719e:	50                   	push   eax
c001719f:	6a 07                	push   0x7
c00171a1:	e8 d8 fe ff ff       	call   c001707e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00171a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00171aa:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00171ae:	0f 95 c0             	setne  al
c00171b1:	83 c4 24             	add    esp,0x24
c00171b4:	c3                   	ret    

c00171b5 <getCPUNumber()>:
c00171b5:	31 c0                	xor    eax,eax
c00171b7:	c3                   	ret    

c00171b8 <thisCPU()>:
c00171b8:	e8 f8 ff ff ff       	call   c00171b5 <getCPUNumber()>
c00171bd:	8b 15 a8 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9a8
c00171c3:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c00171ca:	c3                   	ret    
c00171cb:	90                   	nop

c00171cc <CPU::CPU()>:
c00171cc:	83 ec 0c             	sub    esp,0xc
c00171cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171d3:	83 ec 08             	sub    esp,0x8
c00171d6:	68 5d a2 03 c0       	push   0xc003a25d
c00171db:	50                   	push   eax
c00171dc:	e8 cb c7 ff ff       	call   c00139ac <Device::Device(char const*)>
c00171e1:	83 c4 10             	add    esp,0x10
c00171e4:	ba 34 a3 03 c0       	mov    edx,0xc003a334
c00171e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171ed:	89 10                	mov    DWORD PTR [eax],edx
c00171ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171f3:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00171fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017201:	05 78 01 00 00       	add    eax,0x178
c0017206:	83 ec 0c             	sub    esp,0xc
c0017209:	50                   	push   eax
c001720a:	e8 e5 55 ff ff       	call   c000c7f4 <GDT::GDT()>
c001720f:	83 c4 10             	add    esp,0x10
c0017212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017216:	05 7c 09 00 00       	add    eax,0x97c
c001721b:	83 ec 0c             	sub    esp,0xc
c001721e:	50                   	push   eax
c001721f:	e8 30 58 ff ff       	call   c000ca54 <IDT::IDT()>
c0017224:	83 c4 10             	add    esp,0x10
c0017227:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001722b:	05 7c 11 00 00       	add    eax,0x117c
c0017230:	83 ec 0c             	sub    esp,0xc
c0017233:	50                   	push   eax
c0017234:	e8 cf 9b ff ff       	call   c0010e08 <TSS::TSS()>
c0017239:	83 c4 10             	add    esp,0x10
c001723c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017240:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0017247:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001724b:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0017255:	90                   	nop
c0017256:	83 c4 0c             	add    esp,0xc
c0017259:	c3                   	ret    

c001725a <CPU::displayFeatures()>:
c001725a:	c3                   	ret    
c001725b:	90                   	nop

c001725c <CPU::detectFeatures()>:
c001725c:	55                   	push   ebp
c001725d:	57                   	push   edi
c001725e:	56                   	push   esi
c001725f:	53                   	push   ebx
c0017260:	83 ec 50             	sub    esp,0x50
c0017263:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0017267:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0017271:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0017278:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c001727e:	6a 0d                	push   0xd
c0017280:	6a 00                	push   0x0
c0017282:	57                   	push   edi
c0017283:	e8 50 94 fe ff       	call   c00006d8 <memset>
c0017288:	83 c4 10             	add    esp,0x10
c001728b:	a1 a8 b9 03 c0       	mov    eax,ds:0xc003b9a8
c0017290:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0017297:	0f 84 20 09 00 00    	je     c0017bbd <CPU::detectFeatures()+0x961>
c001729d:	83 ec 0c             	sub    esp,0xc
c00172a0:	6a 10                	push   0x10
c00172a2:	e8 5a fe ff ff       	call   c0017101 <cpuidCheckEDX(unsigned int)>
c00172a7:	83 e0 01             	and    eax,0x1
c00172aa:	8d 14 00             	lea    edx,[eax+eax*1]
c00172ad:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00172b3:	83 e0 fd             	and    eax,0xfffffffd
c00172b6:	09 d0                	or     eax,edx
c00172b8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00172be:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00172c5:	e8 37 fe ff ff       	call   c0017101 <cpuidCheckEDX(unsigned int)>
c00172ca:	83 e0 01             	and    eax,0x1
c00172cd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00172d4:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00172da:	83 e0 fb             	and    eax,0xfffffffb
c00172dd:	09 d0                	or     eax,edx
c00172df:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00172e5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00172ec:	e8 10 fe ff ff       	call   c0017101 <cpuidCheckEDX(unsigned int)>
c00172f1:	83 e0 01             	and    eax,0x1
c00172f4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00172fb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017301:	83 e0 f7             	and    eax,0xfffffff7
c0017304:	09 d0                	or     eax,edx
c0017306:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001730c:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0017313:	e8 e9 fd ff ff       	call   c0017101 <cpuidCheckEDX(unsigned int)>
c0017318:	83 e0 01             	and    eax,0x1
c001731b:	c1 e0 04             	shl    eax,0x4
c001731e:	88 c2                	mov    dl,al
c0017320:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017326:	83 e0 ef             	and    eax,0xffffffef
c0017329:	09 d0                	or     eax,edx
c001732b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017331:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0017338:	e8 c4 fd ff ff       	call   c0017101 <cpuidCheckEDX(unsigned int)>
c001733d:	83 e0 01             	and    eax,0x1
c0017340:	c1 e0 05             	shl    eax,0x5
c0017343:	88 c2                	mov    dl,al
c0017345:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001734b:	83 e0 df             	and    eax,0xffffffdf
c001734e:	09 d0                	or     eax,edx
c0017350:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017356:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001735d:	e8 9f fd ff ff       	call   c0017101 <cpuidCheckEDX(unsigned int)>
c0017362:	83 e0 01             	and    eax,0x1
c0017365:	8d 14 00             	lea    edx,[eax+eax*1]
c0017368:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c001736e:	83 e0 fd             	and    eax,0xfffffffd
c0017371:	09 d0                	or     eax,edx
c0017373:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017379:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0017380:	e8 7c fd ff ff       	call   c0017101 <cpuidCheckEDX(unsigned int)>
c0017385:	83 e0 01             	and    eax,0x1
c0017388:	c1 e0 06             	shl    eax,0x6
c001738b:	88 c2                	mov    dl,al
c001738d:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0017393:	83 e0 bf             	and    eax,0xffffffbf
c0017396:	09 d0                	or     eax,edx
c0017398:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001739e:	58                   	pop    eax
c001739f:	8d 74 24 28          	lea    esi,[esp+0x28]
c00173a3:	56                   	push   esi
c00173a4:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00173a8:	55                   	push   ebp
c00173a9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00173ad:	50                   	push   eax
c00173ae:	8d 54 24 28          	lea    edx,[esp+0x28]
c00173b2:	52                   	push   edx
c00173b3:	6a 00                	push   0x0
c00173b5:	e8 c4 fc ff ff       	call   c001707e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00173ba:	83 c4 1c             	add    esp,0x1c
c00173bd:	6a 04                	push   0x4
c00173bf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00173c3:	50                   	push   eax
c00173c4:	57                   	push   edi
c00173c5:	e8 97 92 fe ff       	call   c0000661 <memcpy>
c00173ca:	83 c4 0c             	add    esp,0xc
c00173cd:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00173d3:	6a 04                	push   0x4
c00173d5:	56                   	push   esi
c00173d6:	50                   	push   eax
c00173d7:	e8 85 92 fe ff       	call   c0000661 <memcpy>
c00173dc:	83 c4 0c             	add    esp,0xc
c00173df:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c00173e5:	6a 04                	push   0x4
c00173e7:	55                   	push   ebp
c00173e8:	50                   	push   eax
c00173e9:	e8 73 92 fe ff       	call   c0000661 <memcpy>
c00173ee:	58                   	pop    eax
c00173ef:	5a                   	pop    edx
c00173f0:	68 08 a1 03 c0       	push   0xc003a108
c00173f5:	57                   	push   edi
c00173f6:	e8 7f 94 fe ff       	call   c000087a <strcmp>
c00173fb:	83 c4 10             	add    esp,0x10
c00173fe:	85 c0                	test   eax,eax
c0017400:	75 0f                	jne    c0017411 <CPU::detectFeatures()+0x1b5>
c0017402:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001740c:	e9 22 02 00 00       	jmp    c0017633 <CPU::detectFeatures()+0x3d7>
c0017411:	50                   	push   eax
c0017412:	50                   	push   eax
c0017413:	68 15 a1 03 c0       	push   0xc003a115
c0017418:	57                   	push   edi
c0017419:	e8 5c 94 fe ff       	call   c000087a <strcmp>
c001741e:	83 c4 10             	add    esp,0x10
c0017421:	85 c0                	test   eax,eax
c0017423:	74 dd                	je     c0017402 <CPU::detectFeatures()+0x1a6>
c0017425:	51                   	push   ecx
c0017426:	51                   	push   ecx
c0017427:	68 22 a1 03 c0       	push   0xc003a122
c001742c:	57                   	push   edi
c001742d:	e8 48 94 fe ff       	call   c000087a <strcmp>
c0017432:	83 c4 10             	add    esp,0x10
c0017435:	85 c0                	test   eax,eax
c0017437:	74 2a                	je     c0017463 <CPU::detectFeatures()+0x207>
c0017439:	52                   	push   edx
c001743a:	52                   	push   edx
c001743b:	68 2f a1 03 c0       	push   0xc003a12f
c0017440:	57                   	push   edi
c0017441:	e8 34 94 fe ff       	call   c000087a <strcmp>
c0017446:	83 c4 10             	add    esp,0x10
c0017449:	85 c0                	test   eax,eax
c001744b:	74 16                	je     c0017463 <CPU::detectFeatures()+0x207>
c001744d:	50                   	push   eax
c001744e:	50                   	push   eax
c001744f:	68 3c a1 03 c0       	push   0xc003a13c
c0017454:	57                   	push   edi
c0017455:	e8 20 94 fe ff       	call   c000087a <strcmp>
c001745a:	83 c4 10             	add    esp,0x10
c001745d:	85 c0                	test   eax,eax
c001745f:	74 48                	je     c00174a9 <CPU::detectFeatures()+0x24d>
c0017461:	eb 0f                	jmp    c0017472 <CPU::detectFeatures()+0x216>
c0017463:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001746d:	e9 c1 01 00 00       	jmp    c0017633 <CPU::detectFeatures()+0x3d7>
c0017472:	50                   	push   eax
c0017473:	50                   	push   eax
c0017474:	68 49 a1 03 c0       	push   0xc003a149
c0017479:	57                   	push   edi
c001747a:	e8 fb 93 fe ff       	call   c000087a <strcmp>
c001747f:	83 c4 10             	add    esp,0x10
c0017482:	85 c0                	test   eax,eax
c0017484:	74 23                	je     c00174a9 <CPU::detectFeatures()+0x24d>
c0017486:	50                   	push   eax
c0017487:	50                   	push   eax
c0017488:	68 56 a1 03 c0       	push   0xc003a156
c001748d:	57                   	push   edi
c001748e:	e8 e7 93 fe ff       	call   c000087a <strcmp>
c0017493:	83 c4 10             	add    esp,0x10
c0017496:	85 c0                	test   eax,eax
c0017498:	75 1e                	jne    c00174b8 <CPU::detectFeatures()+0x25c>
c001749a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00174a4:	e9 8a 01 00 00       	jmp    c0017633 <CPU::detectFeatures()+0x3d7>
c00174a9:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00174b3:	e9 7b 01 00 00       	jmp    c0017633 <CPU::detectFeatures()+0x3d7>
c00174b8:	50                   	push   eax
c00174b9:	50                   	push   eax
c00174ba:	68 63 a1 03 c0       	push   0xc003a163
c00174bf:	57                   	push   edi
c00174c0:	e8 b5 93 fe ff       	call   c000087a <strcmp>
c00174c5:	83 c4 10             	add    esp,0x10
c00174c8:	85 c0                	test   eax,eax
c00174ca:	75 0f                	jne    c00174db <CPU::detectFeatures()+0x27f>
c00174cc:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00174d6:	e9 58 01 00 00       	jmp    c0017633 <CPU::detectFeatures()+0x3d7>
c00174db:	50                   	push   eax
c00174dc:	50                   	push   eax
c00174dd:	68 22 a1 03 c0       	push   0xc003a122
c00174e2:	57                   	push   edi
c00174e3:	e8 92 93 fe ff       	call   c000087a <strcmp>
c00174e8:	83 c4 10             	add    esp,0x10
c00174eb:	85 c0                	test   eax,eax
c00174ed:	75 0f                	jne    c00174fe <CPU::detectFeatures()+0x2a2>
c00174ef:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00174f9:	e9 35 01 00 00       	jmp    c0017633 <CPU::detectFeatures()+0x3d7>
c00174fe:	50                   	push   eax
c00174ff:	50                   	push   eax
c0017500:	68 70 a1 03 c0       	push   0xc003a170
c0017505:	57                   	push   edi
c0017506:	e8 6f 93 fe ff       	call   c000087a <strcmp>
c001750b:	83 c4 10             	add    esp,0x10
c001750e:	85 c0                	test   eax,eax
c0017510:	75 0f                	jne    c0017521 <CPU::detectFeatures()+0x2c5>
c0017512:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001751c:	e9 12 01 00 00       	jmp    c0017633 <CPU::detectFeatures()+0x3d7>
c0017521:	51                   	push   ecx
c0017522:	51                   	push   ecx
c0017523:	68 7d a1 03 c0       	push   0xc003a17d
c0017528:	57                   	push   edi
c0017529:	e8 4c 93 fe ff       	call   c000087a <strcmp>
c001752e:	83 c4 10             	add    esp,0x10
c0017531:	85 c0                	test   eax,eax
c0017533:	75 0f                	jne    c0017544 <CPU::detectFeatures()+0x2e8>
c0017535:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c001753f:	e9 ef 00 00 00       	jmp    c0017633 <CPU::detectFeatures()+0x3d7>
c0017544:	52                   	push   edx
c0017545:	52                   	push   edx
c0017546:	68 8a a1 03 c0       	push   0xc003a18a
c001754b:	57                   	push   edi
c001754c:	e8 29 93 fe ff       	call   c000087a <strcmp>
c0017551:	83 c4 10             	add    esp,0x10
c0017554:	85 c0                	test   eax,eax
c0017556:	75 0f                	jne    c0017567 <CPU::detectFeatures()+0x30b>
c0017558:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0017562:	e9 cc 00 00 00       	jmp    c0017633 <CPU::detectFeatures()+0x3d7>
c0017567:	50                   	push   eax
c0017568:	50                   	push   eax
c0017569:	68 97 a1 03 c0       	push   0xc003a197
c001756e:	57                   	push   edi
c001756f:	e8 06 93 fe ff       	call   c000087a <strcmp>
c0017574:	83 c4 10             	add    esp,0x10
c0017577:	85 c0                	test   eax,eax
c0017579:	75 0f                	jne    c001758a <CPU::detectFeatures()+0x32e>
c001757b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0017585:	e9 a9 00 00 00       	jmp    c0017633 <CPU::detectFeatures()+0x3d7>
c001758a:	50                   	push   eax
c001758b:	50                   	push   eax
c001758c:	68 a4 a1 03 c0       	push   0xc003a1a4
c0017591:	57                   	push   edi
c0017592:	e8 e3 92 fe ff       	call   c000087a <strcmp>
c0017597:	83 c4 10             	add    esp,0x10
c001759a:	85 c0                	test   eax,eax
c001759c:	75 0f                	jne    c00175ad <CPU::detectFeatures()+0x351>
c001759e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00175a8:	e9 86 00 00 00       	jmp    c0017633 <CPU::detectFeatures()+0x3d7>
c00175ad:	50                   	push   eax
c00175ae:	50                   	push   eax
c00175af:	68 b1 a1 03 c0       	push   0xc003a1b1
c00175b4:	57                   	push   edi
c00175b5:	e8 c0 92 fe ff       	call   c000087a <strcmp>
c00175ba:	83 c4 10             	add    esp,0x10
c00175bd:	85 c0                	test   eax,eax
c00175bf:	75 0c                	jne    c00175cd <CPU::detectFeatures()+0x371>
c00175c1:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00175cb:	eb 66                	jmp    c0017633 <CPU::detectFeatures()+0x3d7>
c00175cd:	50                   	push   eax
c00175ce:	50                   	push   eax
c00175cf:	68 be a1 03 c0       	push   0xc003a1be
c00175d4:	57                   	push   edi
c00175d5:	e8 a0 92 fe ff       	call   c000087a <strcmp>
c00175da:	83 c4 10             	add    esp,0x10
c00175dd:	85 c0                	test   eax,eax
c00175df:	75 0c                	jne    c00175ed <CPU::detectFeatures()+0x391>
c00175e1:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00175eb:	eb 46                	jmp    c0017633 <CPU::detectFeatures()+0x3d7>
c00175ed:	50                   	push   eax
c00175ee:	50                   	push   eax
c00175ef:	68 cb a1 03 c0       	push   0xc003a1cb
c00175f4:	57                   	push   edi
c00175f5:	e8 80 92 fe ff       	call   c000087a <strcmp>
c00175fa:	83 c4 10             	add    esp,0x10
c00175fd:	85 c0                	test   eax,eax
c00175ff:	74 e0                	je     c00175e1 <CPU::detectFeatures()+0x385>
c0017601:	50                   	push   eax
c0017602:	50                   	push   eax
c0017603:	68 d8 a1 03 c0       	push   0xc003a1d8
c0017608:	57                   	push   edi
c0017609:	e8 6c 92 fe ff       	call   c000087a <strcmp>
c001760e:	83 c4 10             	add    esp,0x10
c0017611:	85 c0                	test   eax,eax
c0017613:	74 cc                	je     c00175e1 <CPU::detectFeatures()+0x385>
c0017615:	51                   	push   ecx
c0017616:	51                   	push   ecx
c0017617:	68 e5 a1 03 c0       	push   0xc003a1e5
c001761c:	57                   	push   edi
c001761d:	e8 58 92 fe ff       	call   c000087a <strcmp>
c0017622:	83 c4 10             	add    esp,0x10
c0017625:	85 c0                	test   eax,eax
c0017627:	74 b8                	je     c00175e1 <CPU::detectFeatures()+0x385>
c0017629:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0017633:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0017638:	0f 86 be 00 00 00    	jbe    c00176fc <CPU::detectFeatures()+0x4a0>
c001763e:	83 ec 0c             	sub    esp,0xc
c0017641:	68 80 00 00 00       	push   0x80
c0017646:	e8 10 fb ff ff       	call   c001715b <cpuidCheckExtendedEBX(unsigned int)>
c001764b:	83 e0 01             	and    eax,0x1
c001764e:	c1 e0 06             	shl    eax,0x6
c0017651:	88 c2                	mov    dl,al
c0017653:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0017659:	83 e0 bf             	and    eax,0xffffffbf
c001765c:	09 d0                	or     eax,edx
c001765e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0017664:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001766b:	e8 eb fa ff ff       	call   c001715b <cpuidCheckExtendedEBX(unsigned int)>
c0017670:	83 e0 01             	and    eax,0x1
c0017673:	c1 e0 04             	shl    eax,0x4
c0017676:	88 c2                	mov    dl,al
c0017678:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001767e:	83 e0 ef             	and    eax,0xffffffef
c0017681:	09 d0                	or     eax,edx
c0017683:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0017689:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0017690:	e8 c6 fa ff ff       	call   c001715b <cpuidCheckExtendedEBX(unsigned int)>
c0017695:	c1 e0 07             	shl    eax,0x7
c0017698:	88 c2                	mov    dl,al
c001769a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00176a0:	83 e0 7f             	and    eax,0x7f
c00176a3:	09 d0                	or     eax,edx
c00176a5:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00176ab:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00176b2:	e8 d1 fa ff ff       	call   c0017188 <cpuidCheckExtendedECX(unsigned int)>
c00176b7:	83 e0 01             	and    eax,0x1
c00176ba:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00176c1:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00176c7:	83 e0 f7             	and    eax,0xfffffff7
c00176ca:	09 d0                	or     eax,edx
c00176cc:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00176d2:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00176d9:	e8 aa fa ff ff       	call   c0017188 <cpuidCheckExtendedECX(unsigned int)>
c00176de:	83 c4 10             	add    esp,0x10
c00176e1:	83 e0 01             	and    eax,0x1
c00176e4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00176eb:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00176f1:	83 e0 fb             	and    eax,0xfffffffb
c00176f4:	09 d0                	or     eax,edx
c00176f6:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00176fc:	83 ec 0c             	sub    esp,0xc
c00176ff:	56                   	push   esi
c0017700:	55                   	push   ebp
c0017701:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0017705:	57                   	push   edi
c0017706:	8d 44 24 28          	lea    eax,[esp+0x28]
c001770a:	50                   	push   eax
c001770b:	6a 01                	push   0x1
c001770d:	e8 6c f9 ff ff       	call   c001707e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017712:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017716:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001771c:	88 ca                	mov    dl,cl
c001771e:	83 e0 f0             	and    eax,0xfffffff0
c0017721:	83 e2 0f             	and    edx,0xf
c0017724:	09 d0                	or     eax,edx
c0017726:	88 ca                	mov    dl,cl
c0017728:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c001772e:	c0 ea 04             	shr    dl,0x4
c0017731:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0017735:	0f b6 c2             	movzx  eax,dl
c0017738:	83 c4 20             	add    esp,0x20
c001773b:	c1 e0 06             	shl    eax,0x6
c001773e:	89 c5                	mov    ebp,eax
c0017740:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017746:	66 25 3f c0          	and    ax,0xc03f
c001774a:	09 e8                	or     eax,ebp
c001774c:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0017753:	89 c8                	mov    eax,ecx
c0017755:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001775b:	c1 e8 08             	shr    eax,0x8
c001775e:	83 e2 3f             	and    edx,0x3f
c0017761:	83 e0 0f             	and    eax,0xf
c0017764:	89 c5                	mov    ebp,eax
c0017766:	c1 e5 06             	shl    ebp,0x6
c0017769:	09 d5                	or     ebp,edx
c001776b:	89 ea                	mov    edx,ebp
c001776d:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0017773:	88 c2                	mov    dl,al
c0017775:	c0 ea 02             	shr    dl,0x2
c0017778:	89 d5                	mov    ebp,edx
c001777a:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0017780:	83 e2 c0             	and    edx,0xffffffc0
c0017783:	09 d5                	or     ebp,edx
c0017785:	89 ea                	mov    edx,ebp
c0017787:	89 cd                	mov    ebp,ecx
c0017789:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c001778f:	c1 ed 0c             	shr    ebp,0xc
c0017792:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0017798:	83 e5 03             	and    ebp,0x3
c001779b:	83 e2 cf             	and    edx,0xffffffcf
c001779e:	c1 e5 04             	shl    ebp,0x4
c00177a1:	09 d5                	or     ebp,edx
c00177a3:	3c 06                	cmp    al,0x6
c00177a5:	89 ea                	mov    edx,ebp
c00177a7:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00177ad:	74 04                	je     c00177b3 <CPU::detectFeatures()+0x557>
c00177af:	3c 0f                	cmp    al,0xf
c00177b1:	75 5c                	jne    c001780f <CPU::detectFeatures()+0x5b3>
c00177b3:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00177b7:	89 cd                	mov    ebp,ecx
c00177b9:	c1 ed 10             	shr    ebp,0x10
c00177bc:	c1 e5 04             	shl    ebp,0x4
c00177bf:	09 ea                	or     edx,ebp
c00177c1:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00177c7:	0f b6 d2             	movzx  edx,dl
c00177ca:	66 81 e5 3f c0       	and    bp,0xc03f
c00177cf:	c1 e2 06             	shl    edx,0x6
c00177d2:	09 ea                	or     edx,ebp
c00177d4:	3c 0f                	cmp    al,0xf
c00177d6:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00177dd:	75 30                	jne    c001780f <CPU::detectFeatures()+0x5b3>
c00177df:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c00177e5:	c1 e9 14             	shr    ecx,0x14
c00177e8:	83 e0 3f             	and    eax,0x3f
c00177eb:	83 c1 0f             	add    ecx,0xf
c00177ee:	88 ca                	mov    dl,cl
c00177f0:	c0 e9 02             	shr    cl,0x2
c00177f3:	c1 e2 06             	shl    edx,0x6
c00177f6:	09 d0                	or     eax,edx
c00177f8:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00177fe:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0017804:	83 e0 c0             	and    eax,0xffffffc0
c0017807:	09 c1                	or     ecx,eax
c0017809:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c001780f:	83 ec 0c             	sub    esp,0xc
c0017812:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0017819:	56                   	push   esi
c001781a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001781e:	50                   	push   eax
c001781f:	57                   	push   edi
c0017820:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0017824:	55                   	push   ebp
c0017825:	68 00 00 00 80       	push   0x80000000
c001782a:	e8 4f f8 ff ff       	call   c001707e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001782f:	83 c4 20             	add    esp,0x20
c0017832:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001783a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001783e:	76 1e                	jbe    c001785e <CPU::detectFeatures()+0x602>
c0017840:	83 ec 0c             	sub    esp,0xc
c0017843:	56                   	push   esi
c0017844:	50                   	push   eax
c0017845:	57                   	push   edi
c0017846:	55                   	push   ebp
c0017847:	68 01 00 00 80       	push   0x80000001
c001784c:	e8 2d f8 ff ff       	call   c001707e <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017851:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001785b:	83 c4 20             	add    esp,0x20
c001785e:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0017864:	83 f8 01             	cmp    eax,0x1
c0017867:	75 6f                	jne    c00178d8 <CPU::detectFeatures()+0x67c>
c0017869:	51                   	push   ecx
c001786a:	51                   	push   ecx
c001786b:	68 f1 a1 03 c0       	push   0xc003a1f1
c0017870:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0017874:	56                   	push   esi
c0017875:	e8 7a 8f fe ff       	call   c00007f4 <strcpy>
c001787a:	5f                   	pop    edi
c001787b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017881:	5d                   	pop    ebp
c0017882:	66 c1 e8 06          	shr    ax,0x6
c0017886:	0f b6 c0             	movzx  eax,al
c0017889:	50                   	push   eax
c001788a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017890:	c1 e8 0e             	shr    eax,0xe
c0017893:	0f b6 c0             	movzx  eax,al
c0017896:	50                   	push   eax
c0017897:	e8 8d f4 ff ff       	call   c0016d29 <lookupIntelCPUName(unsigned char, unsigned char)>
c001789c:	5a                   	pop    edx
c001789d:	59                   	pop    ecx
c001789e:	50                   	push   eax
c001789f:	56                   	push   esi
c00178a0:	e8 9c 90 fe ff       	call   c0000941 <strcat>
c00178a5:	5f                   	pop    edi
c00178a6:	5d                   	pop    ebp
c00178a7:	56                   	push   esi
c00178a8:	53                   	push   ebx
c00178a9:	e8 f0 c0 ff ff       	call   c001399e <Device::setName(char const*)>
c00178ae:	58                   	pop    eax
c00178af:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00178b5:	5a                   	pop    edx
c00178b6:	68 f8 a1 03 c0       	push   0xc003a1f8
c00178bb:	50                   	push   eax
c00178bc:	e8 b9 8f fe ff       	call   c000087a <strcmp>
c00178c1:	83 c4 10             	add    esp,0x10
c00178c4:	85 c0                	test   eax,eax
c00178c6:	0f 85 73 03 00 00    	jne    c0017c3f <CPU::detectFeatures()+0x9e3>
c00178cc:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00178d3:	e9 67 03 00 00       	jmp    c0017c3f <CPU::detectFeatures()+0x9e3>
c00178d8:	83 f8 02             	cmp    eax,0x2
c00178db:	0f 85 b5 00 00 00    	jne    c0017996 <CPU::detectFeatures()+0x73a>
c00178e1:	57                   	push   edi
c00178e2:	57                   	push   edi
c00178e3:	68 0a a2 03 c0       	push   0xc003a20a
c00178e8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00178ec:	56                   	push   esi
c00178ed:	e8 02 8f fe ff       	call   c00007f4 <strcpy>
c00178f2:	5d                   	pop    ebp
c00178f3:	58                   	pop    eax
c00178f4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00178fa:	66 c1 e8 06          	shr    ax,0x6
c00178fe:	0f b6 c0             	movzx  eax,al
c0017901:	50                   	push   eax
c0017902:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017908:	c1 e8 0e             	shr    eax,0xe
c001790b:	0f b6 c0             	movzx  eax,al
c001790e:	50                   	push   eax
c001790f:	e8 81 f2 ff ff       	call   c0016b95 <lookupAMDCPUName(unsigned char, unsigned char)>
c0017914:	5a                   	pop    edx
c0017915:	59                   	pop    ecx
c0017916:	50                   	push   eax
c0017917:	56                   	push   esi
c0017918:	e8 24 90 fe ff       	call   c0000941 <strcat>
c001791d:	5f                   	pop    edi
c001791e:	5d                   	pop    ebp
c001791f:	56                   	push   esi
c0017920:	53                   	push   ebx
c0017921:	e8 78 c0 ff ff       	call   c001399e <Device::setName(char const*)>
c0017926:	58                   	pop    eax
c0017927:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001792d:	5a                   	pop    edx
c001792e:	68 0f a2 03 c0       	push   0xc003a20f
c0017933:	50                   	push   eax
c0017934:	e8 41 8f fe ff       	call   c000087a <strcmp>
c0017939:	83 c4 10             	add    esp,0x10
c001793c:	85 c0                	test   eax,eax
c001793e:	75 20                	jne    c0017960 <CPU::detectFeatures()+0x704>
c0017940:	8b 15 a8 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9a8
c0017946:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001794c:	a8 01                	test   al,0x1
c001794e:	74 10                	je     c0017960 <CPU::detectFeatures()+0x704>
c0017950:	83 e0 fe             	and    eax,0xfffffffe
c0017953:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0017959:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0017960:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017966:	c1 e8 0e             	shr    eax,0xe
c0017969:	3c 05                	cmp    al,0x5
c001796b:	0f 85 ce 02 00 00    	jne    c0017c3f <CPU::detectFeatures()+0x9e3>
c0017971:	56                   	push   esi
c0017972:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0017978:	83 e0 0f             	and    eax,0xf
c001797b:	50                   	push   eax
c001797c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0017982:	66 c1 e8 06          	shr    ax,0x6
c0017986:	0f b6 c0             	movzx  eax,al
c0017989:	50                   	push   eax
c001798a:	6a 05                	push   0x5
c001798c:	e8 7a f6 ff ff       	call   c001700b <AMD_K6_writeback(int, int, int)>
c0017991:	e9 1f 02 00 00       	jmp    c0017bb5 <CPU::detectFeatures()+0x959>
c0017996:	8d 50 fd             	lea    edx,[eax-0x3]
c0017999:	83 fa 01             	cmp    edx,0x1
c001799c:	76 09                	jbe    c00179a7 <CPU::detectFeatures()+0x74b>
c001799e:	83 f8 06             	cmp    eax,0x6
c00179a1:	0f 85 91 01 00 00    	jne    c0017b38 <CPU::detectFeatures()+0x8dc>
c00179a7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00179ad:	c1 ea 0e             	shr    edx,0xe
c00179b0:	80 fa 05             	cmp    dl,0x5
c00179b3:	75 7b                	jne    c0017a30 <CPU::detectFeatures()+0x7d4>
c00179b5:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00179bb:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00179c0:	66 81 fa 00 01       	cmp    dx,0x100
c00179c5:	75 0c                	jne    c00179d3 <CPU::detectFeatures()+0x777>
c00179c7:	51                   	push   ecx
c00179c8:	51                   	push   ecx
c00179c9:	68 16 a2 03 c0       	push   0xc003a216
c00179ce:	e9 dc 01 00 00       	jmp    c0017baf <CPU::detectFeatures()+0x953>
c00179d3:	66 81 fa 00 02       	cmp    dx,0x200
c00179d8:	75 0c                	jne    c00179e6 <CPU::detectFeatures()+0x78a>
c00179da:	52                   	push   edx
c00179db:	52                   	push   edx
c00179dc:	68 29 a2 03 c0       	push   0xc003a229
c00179e1:	e9 c9 01 00 00       	jmp    c0017baf <CPU::detectFeatures()+0x953>
c00179e6:	66 81 fa 40 02       	cmp    dx,0x240
c00179eb:	75 0c                	jne    c00179f9 <CPU::detectFeatures()+0x79d>
c00179ed:	50                   	push   eax
c00179ee:	50                   	push   eax
c00179ef:	68 3b a2 03 c0       	push   0xc003a23b
c00179f4:	e9 b6 01 00 00       	jmp    c0017baf <CPU::detectFeatures()+0x953>
c00179f9:	83 f8 06             	cmp    eax,0x6
c00179fc:	75 0c                	jne    c0017a0a <CPU::detectFeatures()+0x7ae>
c00179fe:	50                   	push   eax
c00179ff:	50                   	push   eax
c0017a00:	68 4d a2 03 c0       	push   0xc003a24d
c0017a05:	e9 a5 01 00 00       	jmp    c0017baf <CPU::detectFeatures()+0x953>
c0017a0a:	83 f8 04             	cmp    eax,0x4
c0017a0d:	75 0c                	jne    c0017a1b <CPU::detectFeatures()+0x7bf>
c0017a0f:	50                   	push   eax
c0017a10:	50                   	push   eax
c0017a11:	68 59 a2 03 c0       	push   0xc003a259
c0017a16:	e9 94 01 00 00       	jmp    c0017baf <CPU::detectFeatures()+0x953>
c0017a1b:	83 f8 03             	cmp    eax,0x3
c0017a1e:	0f 85 1b 02 00 00    	jne    c0017c3f <CPU::detectFeatures()+0x9e3>
c0017a24:	50                   	push   eax
c0017a25:	50                   	push   eax
c0017a26:	68 61 a2 03 c0       	push   0xc003a261
c0017a2b:	e9 7f 01 00 00       	jmp    c0017baf <CPU::detectFeatures()+0x953>
c0017a30:	80 fa 06             	cmp    dl,0x6
c0017a33:	0f 85 db 00 00 00    	jne    c0017b14 <CPU::detectFeatures()+0x8b8>
c0017a39:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0017a3f:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0017a44:	66 81 fa 80 01       	cmp    dx,0x180
c0017a49:	75 0c                	jne    c0017a57 <CPU::detectFeatures()+0x7fb>
c0017a4b:	50                   	push   eax
c0017a4c:	50                   	push   eax
c0017a4d:	68 6c a2 03 c0       	push   0xc003a26c
c0017a52:	e9 58 01 00 00       	jmp    c0017baf <CPU::detectFeatures()+0x953>
c0017a57:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c0017a5d:	66 f7 c1 80 ff       	test   cx,0xff80
c0017a62:	75 0c                	jne    c0017a70 <CPU::detectFeatures()+0x814>
c0017a64:	50                   	push   eax
c0017a65:	50                   	push   eax
c0017a66:	68 7c a2 03 c0       	push   0xc003a27c
c0017a6b:	e9 3f 01 00 00       	jmp    c0017baf <CPU::detectFeatures()+0x953>
c0017a70:	66 81 fa 40 02       	cmp    dx,0x240
c0017a75:	75 0c                	jne    c0017a83 <CPU::detectFeatures()+0x827>
c0017a77:	55                   	push   ebp
c0017a78:	55                   	push   ebp
c0017a79:	68 83 a2 03 c0       	push   0xc003a283
c0017a7e:	e9 2c 01 00 00       	jmp    c0017baf <CPU::detectFeatures()+0x953>
c0017a83:	66 81 fa 80 02       	cmp    dx,0x280
c0017a88:	75 0c                	jne    c0017a96 <CPU::detectFeatures()+0x83a>
c0017a8a:	57                   	push   edi
c0017a8b:	57                   	push   edi
c0017a8c:	68 8c a2 03 c0       	push   0xc003a28c
c0017a91:	e9 19 01 00 00       	jmp    c0017baf <CPU::detectFeatures()+0x953>
c0017a96:	66 81 fa 40 03       	cmp    dx,0x340
c0017a9b:	74 ed                	je     c0017a8a <CPU::detectFeatures()+0x82e>
c0017a9d:	66 81 fa c0 03       	cmp    dx,0x3c0
c0017aa2:	75 0c                	jne    c0017ab0 <CPU::detectFeatures()+0x854>
c0017aa4:	56                   	push   esi
c0017aa5:	56                   	push   esi
c0017aa6:	68 93 a2 03 c0       	push   0xc003a293
c0017aab:	e9 ff 00 00 00       	jmp    c0017baf <CPU::detectFeatures()+0x953>
c0017ab0:	83 f8 06             	cmp    eax,0x6
c0017ab3:	0f 84 45 ff ff ff    	je     c00179fe <CPU::detectFeatures()+0x7a2>
c0017ab9:	83 f8 04             	cmp    eax,0x4
c0017abc:	0f 84 4d ff ff ff    	je     c0017a0f <CPU::detectFeatures()+0x7b3>
c0017ac2:	83 f8 03             	cmp    eax,0x3
c0017ac5:	0f 85 74 01 00 00    	jne    c0017c3f <CPU::detectFeatures()+0x9e3>
c0017acb:	51                   	push   ecx
c0017acc:	51                   	push   ecx
c0017acd:	68 9c a2 03 c0       	push   0xc003a29c
c0017ad2:	53                   	push   ebx
c0017ad3:	e8 c6 be ff ff       	call   c001399e <Device::setName(char const*)>
c0017ad8:	b1 c1                	mov    cl,0xc1
c0017ada:	88 c8                	mov    al,cl
c0017adc:	e6 22                	out    0x22,al
c0017ade:	e4 23                	in     al,0x23
c0017ae0:	88 c2                	mov    dl,al
c0017ae2:	88 c8                	mov    al,cl
c0017ae4:	e6 22                	out    0x22,al
c0017ae6:	88 d0                	mov    al,dl
c0017ae8:	83 c8 10             	or     eax,0x10
c0017aeb:	e6 23                	out    0x23,al
c0017aed:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0017af4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0017af7:	89 d0                	mov    eax,edx
c0017af9:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0017aff:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0017b03:	40                   	inc    eax
c0017b04:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0017b0a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0017b0f:	e9 a1 00 00 00       	jmp    c0017bb5 <CPU::detectFeatures()+0x959>
c0017b14:	83 f8 06             	cmp    eax,0x6
c0017b17:	0f 84 e1 fe ff ff    	je     c00179fe <CPU::detectFeatures()+0x7a2>
c0017b1d:	83 f8 04             	cmp    eax,0x4
c0017b20:	0f 84 e9 fe ff ff    	je     c0017a0f <CPU::detectFeatures()+0x7b3>
c0017b26:	83 f8 03             	cmp    eax,0x3
c0017b29:	0f 85 10 01 00 00    	jne    c0017c3f <CPU::detectFeatures()+0x9e3>
c0017b2f:	52                   	push   edx
c0017b30:	52                   	push   edx
c0017b31:	68 a7 a2 03 c0       	push   0xc003a2a7
c0017b36:	eb 77                	jmp    c0017baf <CPU::detectFeatures()+0x953>
c0017b38:	83 f8 07             	cmp    eax,0x7
c0017b3b:	75 09                	jne    c0017b46 <CPU::detectFeatures()+0x8ea>
c0017b3d:	50                   	push   eax
c0017b3e:	50                   	push   eax
c0017b3f:	68 b1 a2 03 c0       	push   0xc003a2b1
c0017b44:	eb 69                	jmp    c0017baf <CPU::detectFeatures()+0x953>
c0017b46:	83 f8 0a             	cmp    eax,0xa
c0017b49:	75 09                	jne    c0017b54 <CPU::detectFeatures()+0x8f8>
c0017b4b:	50                   	push   eax
c0017b4c:	50                   	push   eax
c0017b4d:	68 bc a2 03 c0       	push   0xc003a2bc
c0017b52:	eb 5b                	jmp    c0017baf <CPU::detectFeatures()+0x953>
c0017b54:	83 f8 0b             	cmp    eax,0xb
c0017b57:	75 09                	jne    c0017b62 <CPU::detectFeatures()+0x906>
c0017b59:	50                   	push   eax
c0017b5a:	50                   	push   eax
c0017b5b:	68 c4 a2 03 c0       	push   0xc003a2c4
c0017b60:	eb 4d                	jmp    c0017baf <CPU::detectFeatures()+0x953>
c0017b62:	83 f8 08             	cmp    eax,0x8
c0017b65:	75 09                	jne    c0017b70 <CPU::detectFeatures()+0x914>
c0017b67:	50                   	push   eax
c0017b68:	50                   	push   eax
c0017b69:	68 cd a2 03 c0       	push   0xc003a2cd
c0017b6e:	eb 3f                	jmp    c0017baf <CPU::detectFeatures()+0x953>
c0017b70:	83 f8 09             	cmp    eax,0x9
c0017b73:	75 09                	jne    c0017b7e <CPU::detectFeatures()+0x922>
c0017b75:	50                   	push   eax
c0017b76:	50                   	push   eax
c0017b77:	68 d5 a2 03 c0       	push   0xc003a2d5
c0017b7c:	eb 31                	jmp    c0017baf <CPU::detectFeatures()+0x953>
c0017b7e:	83 f8 05             	cmp    eax,0x5
c0017b81:	75 09                	jne    c0017b8c <CPU::detectFeatures()+0x930>
c0017b83:	50                   	push   eax
c0017b84:	50                   	push   eax
c0017b85:	68 dd a2 03 c0       	push   0xc003a2dd
c0017b8a:	eb 23                	jmp    c0017baf <CPU::detectFeatures()+0x953>
c0017b8c:	83 f8 0c             	cmp    eax,0xc
c0017b8f:	75 09                	jne    c0017b9a <CPU::detectFeatures()+0x93e>
c0017b91:	55                   	push   ebp
c0017b92:	55                   	push   ebp
c0017b93:	68 eb a2 03 c0       	push   0xc003a2eb
c0017b98:	eb 15                	jmp    c0017baf <CPU::detectFeatures()+0x953>
c0017b9a:	83 f8 0d             	cmp    eax,0xd
c0017b9d:	75 09                	jne    c0017ba8 <CPU::detectFeatures()+0x94c>
c0017b9f:	57                   	push   edi
c0017ba0:	57                   	push   edi
c0017ba1:	68 f6 a2 03 c0       	push   0xc003a2f6
c0017ba6:	eb 07                	jmp    c0017baf <CPU::detectFeatures()+0x953>
c0017ba8:	56                   	push   esi
c0017ba9:	56                   	push   esi
c0017baa:	68 0a a3 03 c0       	push   0xc003a30a
c0017baf:	53                   	push   ebx
c0017bb0:	e8 e9 bd ff ff       	call   c001399e <Device::setName(char const*)>
c0017bb5:	83 c4 10             	add    esp,0x10
c0017bb8:	e9 82 00 00 00       	jmp    c0017c3f <CPU::detectFeatures()+0x9e3>
c0017bbd:	51                   	push   ecx
c0017bbe:	51                   	push   ecx
c0017bbf:	68 56 a1 03 c0       	push   0xc003a156
c0017bc4:	57                   	push   edi
c0017bc5:	e8 2a 8c fe ff       	call   c00007f4 <strcpy>
c0017bca:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0017bd4:	e8 a6 85 fe ff       	call   c000017f <is486>
c0017bd9:	83 c4 10             	add    esp,0x10
c0017bdc:	85 c0                	test   eax,eax
c0017bde:	74 2d                	je     c0017c0d <CPU::detectFeatures()+0x9b1>
c0017be0:	52                   	push   edx
c0017be1:	52                   	push   edx
c0017be2:	68 16 a3 03 c0       	push   0xc003a316
c0017be7:	53                   	push   ebx
c0017be8:	e8 b1 bd ff ff       	call   c001399e <Device::setName(char const*)>
c0017bed:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0017bf4:	e8 fc 6d 00 00       	call   c001e9f5 <CPU::readCR0()>
c0017bf9:	83 c4 10             	add    esp,0x10
c0017bfc:	83 e0 14             	and    eax,0x14
c0017bff:	83 f8 04             	cmp    eax,0x4
c0017c02:	75 1f                	jne    c0017c23 <CPU::detectFeatures()+0x9c7>
c0017c04:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0017c0b:	eb 32                	jmp    c0017c3f <CPU::detectFeatures()+0x9e3>
c0017c0d:	50                   	push   eax
c0017c0e:	50                   	push   eax
c0017c0f:	68 21 a3 03 c0       	push   0xc003a321
c0017c14:	53                   	push   ebx
c0017c15:	e8 84 bd ff ff       	call   c001399e <Device::setName(char const*)>
c0017c1a:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0017c21:	eb d1                	jmp    c0017bf4 <CPU::detectFeatures()+0x998>
c0017c23:	e8 32 85 fe ff       	call   c000015a <hasLegacyFPU>
c0017c28:	83 e0 01             	and    eax,0x1
c0017c2b:	8d 14 00             	lea    edx,[eax+eax*1]
c0017c2e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0017c34:	83 e0 fd             	and    eax,0xfffffffd
c0017c37:	09 d0                	or     eax,edx
c0017c39:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0017c3f:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0017c46:	83 c4 4c             	add    esp,0x4c
c0017c49:	5b                   	pop    ebx
c0017c4a:	5e                   	pop    esi
c0017c4b:	5f                   	pop    edi
c0017c4c:	5d                   	pop    ebp
c0017c4d:	c3                   	ret    

c0017c4e <CPU::setupSMEP()>:
c0017c4e:	83 ec 0c             	sub    esp,0xc
c0017c51:	e8 d5 6d 00 00       	call   c001ea2b <CPU::readCR4()>
c0017c56:	0d 00 00 10 00       	or     eax,0x100000
c0017c5b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c5f:	83 c4 0c             	add    esp,0xc
c0017c62:	e9 ea 74 00 00       	jmp    c001f151 <CPU::writeCR4(unsigned long)>
c0017c67:	90                   	nop

c0017c68 <CPU::setupUMIP()>:
c0017c68:	83 ec 0c             	sub    esp,0xc
c0017c6b:	e8 bb 6d 00 00       	call   c001ea2b <CPU::readCR4()>
c0017c70:	80 cc 08             	or     ah,0x8
c0017c73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c77:	83 c4 0c             	add    esp,0xc
c0017c7a:	e9 d2 74 00 00       	jmp    c001f151 <CPU::writeCR4(unsigned long)>
c0017c7f:	90                   	nop

c0017c80 <CPU::setupTSC()>:
c0017c80:	83 ec 0c             	sub    esp,0xc
c0017c83:	e8 a3 6d 00 00       	call   c001ea2b <CPU::readCR4()>
c0017c88:	83 c8 04             	or     eax,0x4
c0017c8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c8f:	83 c4 0c             	add    esp,0xc
c0017c92:	e9 ba 74 00 00       	jmp    c001f151 <CPU::writeCR4(unsigned long)>
c0017c97:	90                   	nop

c0017c98 <CPU::setupLargePages()>:
c0017c98:	83 ec 0c             	sub    esp,0xc
c0017c9b:	e8 8b 6d 00 00       	call   c001ea2b <CPU::readCR4()>
c0017ca0:	83 c8 10             	or     eax,0x10
c0017ca3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017ca7:	83 c4 0c             	add    esp,0xc
c0017caa:	e9 a2 74 00 00       	jmp    c001f151 <CPU::writeCR4(unsigned long)>
c0017caf:	90                   	nop

c0017cb0 <CPU::setupPAT()>:
c0017cb0:	a1 a8 b9 03 c0       	mov    eax,ds:0xc003b9a8
c0017cb5:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0017cbc:	74 2c                	je     c0017cea <CPU::setupPAT()+0x3a>
c0017cbe:	53                   	push   ebx
c0017cbf:	83 ec 10             	sub    esp,0x10
c0017cc2:	68 77 02 00 00       	push   0x277
c0017cc7:	50                   	push   eax
c0017cc8:	e8 1b 39 ff ff       	call   c000b5e8 <Computer::rdmsr(unsigned int)>
c0017ccd:	83 e2 f8             	and    edx,0xfffffff8
c0017cd0:	83 ca 01             	or     edx,0x1
c0017cd3:	52                   	push   edx
c0017cd4:	50                   	push   eax
c0017cd5:	68 77 02 00 00       	push   0x277
c0017cda:	ff 35 a8 b9 03 c0    	push   DWORD PTR ds:0xc003b9a8
c0017ce0:	e8 2f 39 ff ff       	call   c000b614 <Computer::wrmsr(unsigned int, unsigned long long)>
c0017ce5:	83 c4 28             	add    esp,0x28
c0017ce8:	5b                   	pop    ebx
c0017ce9:	c3                   	ret    
c0017cea:	c3                   	ret    
c0017ceb:	90                   	nop

c0017cec <CPU::setupMTRR()>:
c0017cec:	c3                   	ret    
c0017ced:	90                   	nop

c0017cee <CPU::setupGlobalPages()>:
c0017cee:	83 ec 0c             	sub    esp,0xc
c0017cf1:	e8 35 6d 00 00       	call   c001ea2b <CPU::readCR4()>
c0017cf6:	0c 80                	or     al,0x80
c0017cf8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017cfc:	83 c4 0c             	add    esp,0xc
c0017cff:	e9 4d 74 00 00       	jmp    c001f151 <CPU::writeCR4(unsigned long)>

c0017d04 <CPU::allowUsermodeDataAccess()>:
c0017d04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d08:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0017d0f:	74 03                	je     c0017d14 <CPU::allowUsermodeDataAccess()+0x10>
c0017d11:	0f 01 cb             	stac   
c0017d14:	c3                   	ret    
c0017d15:	90                   	nop

c0017d16 <CPU::prohibitUsermodeDataAccess()>:
c0017d16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d1a:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0017d21:	74 03                	je     c0017d26 <CPU::prohibitUsermodeDataAccess()+0x10>
c0017d23:	0f 01 ca             	clac   
c0017d26:	c3                   	ret    
c0017d27:	90                   	nop

c0017d28 <CPU::setupSMAP()>:
c0017d28:	53                   	push   ebx
c0017d29:	83 ec 08             	sub    esp,0x8
c0017d2c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017d30:	e8 f6 6c 00 00       	call   c001ea2b <CPU::readCR4()>
c0017d35:	83 ec 0c             	sub    esp,0xc
c0017d38:	0d 00 00 20 00       	or     eax,0x200000
c0017d3d:	50                   	push   eax
c0017d3e:	e8 0e 74 00 00       	call   c001f151 <CPU::writeCR4(unsigned long)>
c0017d43:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0017d47:	83 c4 18             	add    esp,0x18
c0017d4a:	5b                   	pop    ebx
c0017d4b:	eb c9                	jmp    c0017d16 <CPU::prohibitUsermodeDataAccess()>
c0017d4d:	90                   	nop

c0017d4e <CPU::setupFeatures()>:
c0017d4e:	53                   	push   ebx
c0017d4f:	83 ec 08             	sub    esp,0x8
c0017d52:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017d56:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0017d5d:	74 0c                	je     c0017d6b <CPU::setupFeatures()+0x1d>
c0017d5f:	83 ec 0c             	sub    esp,0xc
c0017d62:	53                   	push   ebx
c0017d63:	e8 e6 fe ff ff       	call   c0017c4e <CPU::setupSMEP()>
c0017d68:	83 c4 10             	add    esp,0x10
c0017d6b:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0017d72:	74 0c                	je     c0017d80 <CPU::setupFeatures()+0x32>
c0017d74:	83 ec 0c             	sub    esp,0xc
c0017d77:	53                   	push   ebx
c0017d78:	e8 ab ff ff ff       	call   c0017d28 <CPU::setupSMAP()>
c0017d7d:	83 c4 10             	add    esp,0x10
c0017d80:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0017d87:	74 0c                	je     c0017d95 <CPU::setupFeatures()+0x47>
c0017d89:	83 ec 0c             	sub    esp,0xc
c0017d8c:	53                   	push   ebx
c0017d8d:	e8 d6 fe ff ff       	call   c0017c68 <CPU::setupUMIP()>
c0017d92:	83 c4 10             	add    esp,0x10
c0017d95:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0017d9c:	74 0c                	je     c0017daa <CPU::setupFeatures()+0x5c>
c0017d9e:	83 ec 0c             	sub    esp,0xc
c0017da1:	53                   	push   ebx
c0017da2:	e8 d9 fe ff ff       	call   c0017c80 <CPU::setupTSC()>
c0017da7:	83 c4 10             	add    esp,0x10
c0017daa:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0017db1:	74 0c                	je     c0017dbf <CPU::setupFeatures()+0x71>
c0017db3:	83 ec 0c             	sub    esp,0xc
c0017db6:	53                   	push   ebx
c0017db7:	e8 dc fe ff ff       	call   c0017c98 <CPU::setupLargePages()>
c0017dbc:	83 c4 10             	add    esp,0x10
c0017dbf:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0017dc6:	74 0c                	je     c0017dd4 <CPU::setupFeatures()+0x86>
c0017dc8:	83 ec 0c             	sub    esp,0xc
c0017dcb:	53                   	push   ebx
c0017dcc:	e8 1d ff ff ff       	call   c0017cee <CPU::setupGlobalPages()>
c0017dd1:	83 c4 10             	add    esp,0x10
c0017dd4:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0017ddb:	74 0d                	je     c0017dea <CPU::setupFeatures()+0x9c>
c0017ddd:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0017de1:	83 c4 08             	add    esp,0x8
c0017de4:	5b                   	pop    ebx
c0017de5:	e9 c6 fe ff ff       	jmp    c0017cb0 <CPU::setupPAT()>
c0017dea:	83 c4 08             	add    esp,0x8
c0017ded:	5b                   	pop    ebx
c0017dee:	c3                   	ret    
c0017def:	90                   	nop

c0017df0 <CPU::open(int, int, void*)>:
c0017df0:	57                   	push   edi
c0017df1:	56                   	push   esi
c0017df2:	53                   	push   ebx
c0017df3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017df7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017dfb:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0017e01:	83 ec 0c             	sub    esp,0xc
c0017e04:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0017e0a:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0017e10:	50                   	push   eax
c0017e11:	e8 5a 4a ff ff       	call   c000c870 <GDT::setup()>
c0017e16:	83 c4 0c             	add    esp,0xc
c0017e19:	6a 00                	push   0x0
c0017e1b:	68 ef be ad de       	push   0xdeadbeef
c0017e20:	57                   	push   edi
c0017e21:	e8 22 90 ff ff       	call   c0010e48 <TSS::setup(unsigned long, unsigned long)>
c0017e26:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017e29:	e8 fa 8f ff ff       	call   c0010e28 <TSS::flush()>
c0017e2e:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0017e34:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e37:	e8 8e 4c ff ff       	call   c000caca <IDT::setup()>
c0017e3c:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0017e43:	e8 00 73 00 00       	call   c001f148 <CPU::writeDR7(unsigned long)>
c0017e48:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0017e52:	e8 50 5c ff ff       	call   c000daa7 <Phys::allocatePage()>
c0017e57:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0017e5d:	89 30                	mov    DWORD PTR [eax],esi
c0017e5f:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0017e65:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0017e68:	58                   	pop    eax
c0017e69:	5a                   	pop    edx
c0017e6a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0017e70:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017e74:	e8 af 9d ff ff       	call   c0011c28 <VAS::setCPUSpecific(unsigned long)>
c0017e79:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e7c:	e8 db f3 ff ff       	call   c001725c <CPU::detectFeatures()>
c0017e81:	e8 70 c8 ff ff       	call   c00146f6 <setupInterruptController()>
c0017e86:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0017e8c:	a1 54 bb 03 c0       	mov    eax,ds:0xc003bb54
c0017e91:	83 e0 10             	and    eax,0x10
c0017e94:	83 f8 01             	cmp    eax,0x1
c0017e97:	19 c0                	sbb    eax,eax
c0017e99:	83 e0 46             	and    eax,0x46
c0017e9c:	83 c0 1e             	add    eax,0x1e
c0017e9f:	89 04 24             	mov    DWORD PTR [esp],eax
c0017ea2:	e8 33 da ff ff       	call   c00158da <setupTimer(int)>
c0017ea7:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0017ead:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017eb0:	e8 99 fe ff ff       	call   c0017d4e <CPU::setupFeatures()>
c0017eb5:	83 c4 10             	add    esp,0x10
c0017eb8:	31 c0                	xor    eax,eax
c0017eba:	5b                   	pop    ebx
c0017ebb:	5e                   	pop    esi
c0017ebc:	5f                   	pop    edi
c0017ebd:	c3                   	ret    

c0017ebe <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0017ebe:	55                   	push   ebp
c0017ebf:	57                   	push   edi
c0017ec0:	56                   	push   esi
c0017ec1:	53                   	push   ebx
c0017ec2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017ec8:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0017ecf:	8a 1e                	mov    bl,BYTE PTR [esi]
c0017ed1:	8d 6e 01             	lea    ebp,[esi+0x1]
c0017ed4:	80 fb 40             	cmp    bl,0x40
c0017ed7:	75 1b                	jne    c0017ef4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0017ed9:	8a 16                	mov    dl,BYTE PTR [esi]
c0017edb:	84 d2                	test   dl,dl
c0017edd:	0f 84 f1 00 00 00    	je     c0017fd4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017ee3:	8d 46 01             	lea    eax,[esi+0x1]
c0017ee6:	80 fa 3a             	cmp    dl,0x3a
c0017ee9:	74 04                	je     c0017eef <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0017eeb:	89 c6                	mov    esi,eax
c0017eed:	eb ea                	jmp    c0017ed9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0017eef:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0017ef2:	89 c6                	mov    esi,eax
c0017ef4:	50                   	push   eax
c0017ef5:	6a 40                	push   0x40
c0017ef7:	6a 00                	push   0x0
c0017ef9:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017efd:	50                   	push   eax
c0017efe:	e8 d5 87 fe ff       	call   c00006d8 <memset>
c0017f03:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0017f0a:	31 c0                	xor    eax,eax
c0017f0c:	83 c4 10             	add    esp,0x10
c0017f0f:	8a 0f                	mov    cl,BYTE PTR [edi]
c0017f11:	84 c9                	test   cl,cl
c0017f13:	0f 84 bb 00 00 00    	je     c0017fd4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017f19:	3d c7 00 00 00       	cmp    eax,0xc7
c0017f1e:	0f 8f b0 00 00 00    	jg     c0017fd4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017f24:	80 f9 0a             	cmp    cl,0xa
c0017f27:	0f 85 98 00 00 00    	jne    c0017fc5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0017f2d:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0017f32:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0017f36:	a8 df                	test   al,0xdf
c0017f38:	0f 94 c1             	sete   cl
c0017f3b:	3c 23                	cmp    al,0x23
c0017f3d:	0f 94 c2             	sete   dl
c0017f40:	08 d1                	or     cl,dl
c0017f42:	75 4a                	jne    c0017f8e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017f44:	8d 50 f7             	lea    edx,[eax-0x9]
c0017f47:	80 fa 01             	cmp    dl,0x1
c0017f4a:	76 42                	jbe    c0017f8e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017f4c:	3c 5b                	cmp    al,0x5b
c0017f4e:	75 42                	jne    c0017f92 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0017f50:	80 fb 40             	cmp    bl,0x40
c0017f53:	75 39                	jne    c0017f8e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017f55:	83 ec 0c             	sub    esp,0xc
c0017f58:	8d 54 24 65          	lea    edx,[esp+0x65]
c0017f5c:	52                   	push   edx
c0017f5d:	e8 9f 87 fe ff       	call   c0000701 <strlen>
c0017f62:	83 c4 10             	add    esp,0x10
c0017f65:	83 f8 3f             	cmp    eax,0x3f
c0017f68:	77 6a                	ja     c0017fd4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017f6a:	50                   	push   eax
c0017f6b:	50                   	push   eax
c0017f6c:	8d 54 24 61          	lea    edx,[esp+0x61]
c0017f70:	52                   	push   edx
c0017f71:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017f75:	52                   	push   edx
c0017f76:	e8 79 88 fe ff       	call   c00007f4 <strcpy>
c0017f7b:	58                   	pop    eax
c0017f7c:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017f80:	52                   	push   edx
c0017f81:	e8 7b 87 fe ff       	call   c0000701 <strlen>
c0017f86:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0017f8b:	83 c4 10             	add    esp,0x10
c0017f8e:	31 d2                	xor    edx,edx
c0017f90:	eb 3a                	jmp    c0017fcc <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0017f92:	80 fb 40             	cmp    bl,0x40
c0017f95:	74 06                	je     c0017f9d <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0017f97:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017f9b:	eb 20                	jmp    c0017fbd <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0017f9d:	50                   	push   eax
c0017f9e:	50                   	push   eax
c0017f9f:	55                   	push   ebp
c0017fa0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017fa4:	50                   	push   eax
c0017fa5:	e8 d0 88 fe ff       	call   c000087a <strcmp>
c0017faa:	83 c4 10             	add    esp,0x10
c0017fad:	85 c0                	test   eax,eax
c0017faf:	75 dd                	jne    c0017f8e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017fb1:	eb e4                	jmp    c0017f97 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0017fb3:	8d 50 01             	lea    edx,[eax+0x1]
c0017fb6:	80 f9 3d             	cmp    cl,0x3d
c0017fb9:	74 1d                	je     c0017fd8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0017fbb:	89 d0                	mov    eax,edx
c0017fbd:	8a 08                	mov    cl,BYTE PTR [eax]
c0017fbf:	84 c9                	test   cl,cl
c0017fc1:	75 f0                	jne    c0017fb3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0017fc3:	eb 0f                	jmp    c0017fd4 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0017fc5:	8d 50 01             	lea    edx,[eax+0x1]
c0017fc8:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0017fcc:	47                   	inc    edi
c0017fcd:	89 d0                	mov    eax,edx
c0017fcf:	e9 3b ff ff ff       	jmp    c0017f0f <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0017fd4:	31 c0                	xor    eax,eax
c0017fd6:	eb 33                	jmp    c001800b <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0017fd8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017fdc:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0017fdf:	50                   	push   eax
c0017fe0:	50                   	push   eax
c0017fe1:	8d 44 24 60          	lea    eax,[esp+0x60]
c0017fe5:	50                   	push   eax
c0017fe6:	56                   	push   esi
c0017fe7:	e8 8e 88 fe ff       	call   c000087a <strcmp>
c0017fec:	83 c4 10             	add    esp,0x10
c0017fef:	85 c0                	test   eax,eax
c0017ff1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017ff5:	75 97                	jne    c0017f8e <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0017ff7:	51                   	push   ecx
c0017ff8:	51                   	push   ecx
c0017ff9:	52                   	push   edx
c0017ffa:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0018001:	e8 ee 87 fe ff       	call   c00007f4 <strcpy>
c0018006:	83 c4 10             	add    esp,0x10
c0018009:	b0 01                	mov    al,0x1
c001800b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018011:	5b                   	pop    ebx
c0018012:	5e                   	pop    esi
c0018013:	5f                   	pop    edi
c0018014:	5d                   	pop    ebp
c0018015:	c3                   	ret    

c0018016 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0018016:	57                   	push   edi
c0018017:	56                   	push   esi
c0018018:	53                   	push   ebx
c0018019:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001801f:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0018026:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001802d:	53                   	push   ebx
c001802e:	e8 ce 86 fe ff       	call   c0000701 <strlen>
c0018033:	89 34 24             	mov    DWORD PTR [esp],esi
c0018036:	89 c7                	mov    edi,eax
c0018038:	e8 c4 86 fe ff       	call   c0000701 <strlen>
c001803d:	83 c4 10             	add    esp,0x10
c0018040:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0018044:	31 ff                	xor    edi,edi
c0018046:	3d ff 00 00 00       	cmp    eax,0xff
c001804b:	0f 87 18 01 00 00    	ja     c0018169 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0018051:	51                   	push   ecx
c0018052:	51                   	push   ecx
c0018053:	56                   	push   esi
c0018054:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0018058:	56                   	push   esi
c0018059:	e8 96 87 fe ff       	call   c00007f4 <strcpy>
c001805e:	58                   	pop    eax
c001805f:	5a                   	pop    edx
c0018060:	68 3a 8f 03 c0       	push   0xc0038f3a
c0018065:	56                   	push   esi
c0018066:	e8 d6 88 fe ff       	call   c0000941 <strcat>
c001806b:	59                   	pop    ecx
c001806c:	58                   	pop    eax
c001806d:	53                   	push   ebx
c001806e:	56                   	push   esi
c001806f:	e8 cd 88 fe ff       	call   c0000941 <strcat>
c0018074:	58                   	pop    eax
c0018075:	5a                   	pop    edx
c0018076:	68 58 a3 03 c0       	push   0xc003a358
c001807b:	56                   	push   esi
c001807c:	e8 c0 88 fe ff       	call   c0000941 <strcat>
c0018081:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018088:	e8 25 a4 ff ff       	call   c00124b2 <operator new(unsigned long)>
c001808d:	83 c4 0c             	add    esp,0xc
c0018090:	89 c3                	mov    ebx,eax
c0018092:	ff 35 fc bb 03 c0    	push   DWORD PTR ds:0xc003bbfc
c0018098:	56                   	push   esi
c0018099:	50                   	push   eax
c001809a:	e8 41 a8 ff ff       	call   c00128e0 <File::File(char const*, Process*)>
c001809f:	59                   	pop    ecx
c00180a0:	5e                   	pop    esi
c00180a1:	6a 01                	push   0x1
c00180a3:	53                   	push   ebx
c00180a4:	e8 9b a8 ff ff       	call   c0012944 <File::open(FileOpenMode)>
c00180a9:	83 c4 10             	add    esp,0x10
c00180ac:	85 c0                	test   eax,eax
c00180ae:	74 08                	je     c00180b8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c00180b0:	83 ec 0c             	sub    esp,0xc
c00180b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180b5:	53                   	push   ebx
c00180b6:	eb 2e                	jmp    c00180e6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c00180b8:	52                   	push   edx
c00180b9:	8d 44 24 07          	lea    eax,[esp+0x7]
c00180bd:	50                   	push   eax
c00180be:	8d 44 24 10          	lea    eax,[esp+0x10]
c00180c2:	50                   	push   eax
c00180c3:	53                   	push   ebx
c00180c4:	e8 27 ab ff ff       	call   c0012bf0 <File::stat(unsigned long long*, bool*)>
c00180c9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00180cd:	83 c4 10             	add    esp,0x10
c00180d0:	89 c1                	mov    ecx,eax
c00180d2:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c00180d6:	75 13                	jne    c00180eb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c00180d8:	83 ec 0c             	sub    esp,0xc
c00180db:	53                   	push   ebx
c00180dc:	e8 c1 a8 ff ff       	call   c00129a2 <File::close()>
c00180e1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00180e6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00180e9:	eb 7b                	jmp    c0018166 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c00180eb:	83 ec 0c             	sub    esp,0xc
c00180ee:	50                   	push   eax
c00180ef:	e8 09 54 ff ff       	call   c000d4fd <malloc>
c00180f4:	89 c6                	mov    esi,eax
c00180f6:	58                   	pop    eax
c00180f7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00180f9:	8d 54 24 10          	lea    edx,[esp+0x10]
c00180fd:	52                   	push   edx
c00180fe:	56                   	push   esi
c00180ff:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018103:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018107:	53                   	push   ebx
c0018108:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001810b:	83 c4 20             	add    esp,0x20
c001810e:	85 c0                	test   eax,eax
c0018110:	75 0a                	jne    c001811c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0018112:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018116:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001811a:	74 18                	je     c0018134 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c001811c:	83 ec 0c             	sub    esp,0xc
c001811f:	31 ff                	xor    edi,edi
c0018121:	53                   	push   ebx
c0018122:	e8 7b a8 ff ff       	call   c00129a2 <File::close()>
c0018127:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018129:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001812c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001812f:	83 c4 10             	add    esp,0x10
c0018132:	eb 35                	jmp    c0018169 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0018134:	83 ec 0c             	sub    esp,0xc
c0018137:	53                   	push   ebx
c0018138:	e8 65 a8 ff ff       	call   c00129a2 <File::close()>
c001813d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001813f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018142:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018145:	83 c4 0c             	add    esp,0xc
c0018148:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c001814f:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0018156:	56                   	push   esi
c0018157:	e8 62 fd ff ff       	call   c0017ebe <Reg::findLineFromLoadedData(char*, char*, char*)>
c001815c:	89 34 24             	mov    DWORD PTR [esp],esi
c001815f:	89 c7                	mov    edi,eax
c0018161:	e8 a7 53 ff ff       	call   c000d50d <free>
c0018166:	83 c4 10             	add    esp,0x10
c0018169:	81 c4 10 01 00 00    	add    esp,0x110
c001816f:	89 f8                	mov    eax,edi
c0018171:	5b                   	pop    ebx
c0018172:	5e                   	pop    esi
c0018173:	5f                   	pop    edi
c0018174:	c3                   	ret    

c0018175 <Reg::getLine(char*, char*, char*)>:
c0018175:	57                   	push   edi
c0018176:	56                   	push   esi
c0018177:	53                   	push   ebx
c0018178:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001817c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018180:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0018184:	57                   	push   edi
c0018185:	56                   	push   esi
c0018186:	53                   	push   ebx
c0018187:	68 5d a3 03 c0       	push   0xc003a35d
c001818c:	e8 85 fe ff ff       	call   c0018016 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0018191:	83 c4 10             	add    esp,0x10
c0018194:	84 c0                	test   al,al
c0018196:	75 10                	jne    c00181a8 <Reg::getLine(char*, char*, char*)+0x33>
c0018198:	57                   	push   edi
c0018199:	56                   	push   esi
c001819a:	53                   	push   ebx
c001819b:	68 82 a3 03 c0       	push   0xc003a382
c00181a0:	e8 71 fe ff ff       	call   c0018016 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c00181a5:	83 c4 10             	add    esp,0x10
c00181a8:	5b                   	pop    ebx
c00181a9:	5e                   	pop    esi
c00181aa:	5f                   	pop    edi
c00181ab:	c3                   	ret    

c00181ac <Reg::readInt(char*, char*, int*)>:
c00181ac:	55                   	push   ebp
c00181ad:	57                   	push   edi
c00181ae:	56                   	push   esi
c00181af:	53                   	push   ebx
c00181b0:	81 ec f0 00 00 00    	sub    esp,0xf0
c00181b6:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00181ba:	57                   	push   edi
c00181bb:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00181c2:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00181c9:	e8 a7 ff ff ff       	call   c0018175 <Reg::getLine(char*, char*, char*)>
c00181ce:	83 c4 10             	add    esp,0x10
c00181d1:	84 c0                	test   al,al
c00181d3:	0f 84 b3 00 00 00    	je     c001828c <Reg::readInt(char*, char*, int*)+0xe0>
c00181d9:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00181dd:	80 fa 2b             	cmp    dl,0x2b
c00181e0:	74 0c                	je     c00181ee <Reg::readInt(char*, char*, int*)+0x42>
c00181e2:	80 fa 2d             	cmp    dl,0x2d
c00181e5:	75 0e                	jne    c00181f5 <Reg::readInt(char*, char*, int*)+0x49>
c00181e7:	ba 01 00 00 00       	mov    edx,0x1
c00181ec:	eb 0b                	jmp    c00181f9 <Reg::readInt(char*, char*, int*)+0x4d>
c00181ee:	ba 01 00 00 00       	mov    edx,0x1
c00181f3:	eb 02                	jmp    c00181f7 <Reg::readInt(char*, char*, int*)+0x4b>
c00181f5:	31 d2                	xor    edx,edx
c00181f7:	31 c0                	xor    eax,eax
c00181f9:	be 0a 00 00 00       	mov    esi,0xa
c00181fe:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0018203:	75 20                	jne    c0018225 <Reg::readInt(char*, char*, int*)+0x79>
c0018205:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0018209:	80 f9 78             	cmp    cl,0x78
c001820c:	75 0a                	jne    c0018218 <Reg::readInt(char*, char*, int*)+0x6c>
c001820e:	83 c2 02             	add    edx,0x2
c0018211:	be 10 00 00 00       	mov    esi,0x10
c0018216:	eb 0d                	jmp    c0018225 <Reg::readInt(char*, char*, int*)+0x79>
c0018218:	80 f9 62             	cmp    cl,0x62
c001821b:	75 08                	jne    c0018225 <Reg::readInt(char*, char*, int*)+0x79>
c001821d:	83 c2 02             	add    edx,0x2
c0018220:	be 02 00 00 00       	mov    esi,0x2
c0018225:	01 d7                	add    edi,edx
c0018227:	31 d2                	xor    edx,edx
c0018229:	8a 1f                	mov    bl,BYTE PTR [edi]
c001822b:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001822f:	80 fb 0d             	cmp    bl,0xd
c0018232:	0f 94 c3             	sete   bl
c0018235:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001823a:	0f 94 c1             	sete   cl
c001823d:	08 cb                	or     bl,cl
c001823f:	75 3a                	jne    c001827b <Reg::readInt(char*, char*, int*)+0xcf>
c0018241:	0f af d6             	imul   edx,esi
c0018244:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0018249:	83 fe 10             	cmp    esi,0x10
c001824c:	75 26                	jne    c0018274 <Reg::readInt(char*, char*, int*)+0xc8>
c001824e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0018252:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0018255:	89 e9                	mov    ecx,ebp
c0018257:	80 f9 05             	cmp    cl,0x5
c001825a:	77 06                	ja     c0018262 <Reg::readInt(char*, char*, int*)+0xb6>
c001825c:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0018260:	eb 16                	jmp    c0018278 <Reg::readInt(char*, char*, int*)+0xcc>
c0018262:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0018266:	83 e9 61             	sub    ecx,0x61
c0018269:	80 f9 05             	cmp    cl,0x5
c001826c:	77 06                	ja     c0018274 <Reg::readInt(char*, char*, int*)+0xc8>
c001826e:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0018272:	eb 04                	jmp    c0018278 <Reg::readInt(char*, char*, int*)+0xcc>
c0018274:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0018278:	47                   	inc    edi
c0018279:	eb ae                	jmp    c0018229 <Reg::readInt(char*, char*, int*)+0x7d>
c001827b:	84 c0                	test   al,al
c001827d:	74 02                	je     c0018281 <Reg::readInt(char*, char*, int*)+0xd5>
c001827f:	f7 da                	neg    edx
c0018281:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0018288:	89 10                	mov    DWORD PTR [eax],edx
c001828a:	88 d8                	mov    al,bl
c001828c:	81 c4 ec 00 00 00    	add    esp,0xec
c0018292:	5b                   	pop    ebx
c0018293:	5e                   	pop    esi
c0018294:	5f                   	pop    edi
c0018295:	5d                   	pop    ebp
c0018296:	c3                   	ret    

c0018297 <Reg::readString(char*, char*, char*, int)>:
c0018297:	57                   	push   edi
c0018298:	56                   	push   esi
c0018299:	53                   	push   ebx
c001829a:	81 ec d4 00 00 00    	sub    esp,0xd4
c00182a0:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00182a7:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00182ab:	57                   	push   edi
c00182ac:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00182b3:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00182ba:	e8 b6 fe ff ff       	call   c0018175 <Reg::getLine(char*, char*, char*)>
c00182bf:	83 c4 10             	add    esp,0x10
c00182c2:	89 c6                	mov    esi,eax
c00182c4:	84 c0                	test   al,al
c00182c6:	74 44                	je     c001830c <Reg::readString(char*, char*, char*, int)+0x75>
c00182c8:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00182cf:	31 c0                	xor    eax,eax
c00182d1:	4a                   	dec    edx
c00182d2:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00182d5:	84 c9                	test   cl,cl
c00182d7:	74 0f                	je     c00182e8 <Reg::readString(char*, char*, char*, int)+0x51>
c00182d9:	39 c2                	cmp    edx,eax
c00182db:	7e 0b                	jle    c00182e8 <Reg::readString(char*, char*, char*, int)+0x51>
c00182dd:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00182e0:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00182e5:	40                   	inc    eax
c00182e6:	eb ea                	jmp    c00182d2 <Reg::readString(char*, char*, char*, int)+0x3b>
c00182e8:	83 ec 0c             	sub    esp,0xc
c00182eb:	53                   	push   ebx
c00182ec:	e8 10 84 fe ff       	call   c0000701 <strlen>
c00182f1:	83 c4 10             	add    esp,0x10
c00182f4:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00182f9:	75 11                	jne    c001830c <Reg::readString(char*, char*, char*, int)+0x75>
c00182fb:	83 ec 0c             	sub    esp,0xc
c00182fe:	53                   	push   ebx
c00182ff:	e8 fd 83 fe ff       	call   c0000701 <strlen>
c0018304:	83 c4 10             	add    esp,0x10
c0018307:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001830c:	81 c4 d0 00 00 00    	add    esp,0xd0
c0018312:	89 f0                	mov    eax,esi
c0018314:	5b                   	pop    ebx
c0018315:	5e                   	pop    esi
c0018316:	5f                   	pop    edi
c0018317:	c3                   	ret    

c0018318 <Reg::readBool(char*, char*, bool*)>:
c0018318:	83 ec 20             	sub    esp,0x20
c001831b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001831f:	50                   	push   eax
c0018320:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018324:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018328:	e8 7f fe ff ff       	call   c00181ac <Reg::readInt(char*, char*, int*)>
c001832d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018332:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018336:	0f 95 02             	setne  BYTE PTR [edx]
c0018339:	83 c4 2c             	add    esp,0x2c
c001833c:	c3                   	ret    

c001833d <Reg::readBoolWithDefault(char*, char*, bool)>:
c001833d:	53                   	push   ebx
c001833e:	83 ec 1c             	sub    esp,0x1c
c0018341:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0018345:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018349:	50                   	push   eax
c001834a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001834e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018352:	e8 c1 ff ff ff       	call   c0018318 <Reg::readBool(char*, char*, bool*)>
c0018357:	83 c4 10             	add    esp,0x10
c001835a:	84 c0                	test   al,al
c001835c:	74 04                	je     c0018362 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001835e:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0018362:	88 d8                	mov    al,bl
c0018364:	83 c4 18             	add    esp,0x18
c0018367:	5b                   	pop    ebx
c0018368:	c3                   	ret    

c0018369 <Reg::readIntWithDefault(char*, char*, int)>:
c0018369:	53                   	push   ebx
c001836a:	83 ec 1c             	sub    esp,0x1c
c001836d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0018371:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018375:	50                   	push   eax
c0018376:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001837a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001837e:	e8 29 fe ff ff       	call   c00181ac <Reg::readInt(char*, char*, int*)>
c0018383:	83 c4 10             	add    esp,0x10
c0018386:	84 c0                	test   al,al
c0018388:	74 04                	je     c001838e <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001838a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001838e:	89 d8                	mov    eax,ebx
c0018390:	83 c4 18             	add    esp,0x18
c0018393:	5b                   	pop    ebx
c0018394:	c3                   	ret    

c0018395 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0018395:	56                   	push   esi
c0018396:	53                   	push   ebx
c0018397:	51                   	push   ecx
c0018398:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001839c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00183a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00183a4:	56                   	push   esi
c00183a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00183a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00183ad:	e8 e5 fe ff ff       	call   c0018297 <Reg::readString(char*, char*, char*, int)>
c00183b2:	83 c4 10             	add    esp,0x10
c00183b5:	84 c0                	test   al,al
c00183b7:	74 02                	je     c00183bb <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c00183b9:	89 f3                	mov    ebx,esi
c00183bb:	89 d8                	mov    eax,ebx
c00183bd:	5a                   	pop    edx
c00183be:	5b                   	pop    ebx
c00183bf:	5e                   	pop    esi
c00183c0:	c3                   	ret    

c00183c1 <Sys::exit(regs*)>:
c00183c1:	83 ec 18             	sub    esp,0x18
c00183c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00183c8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00183cb:	e8 d4 6b ff ff       	call   c000efa4 <terminateTask(int)>
c00183d0:	83 c8 ff             	or     eax,0xffffffff
c00183d3:	83 c4 1c             	add    esp,0x1c
c00183d6:	89 c2                	mov    edx,eax
c00183d8:	c3                   	ret    

c00183d9 <Sys::read(regs*)>:
c00183d9:	57                   	push   edi
c00183da:	56                   	push   esi
c00183db:	53                   	push   ebx
c00183dc:	83 ec 10             	sub    esp,0x10
c00183df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00183e3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00183e6:	83 f8 02             	cmp    eax,0x2
c00183e9:	77 10                	ja     c00183fb <Sys::read(regs*)+0x22>
c00183eb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00183f0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00183f3:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00183f9:	eb 0e                	jmp    c0018409 <Sys::read(regs*)+0x30>
c00183fb:	83 ec 0c             	sub    esp,0xc
c00183fe:	50                   	push   eax
c00183ff:	e8 37 8e ff ff       	call   c001123b <getFromFileDescriptor(int)>
c0018404:	83 c4 10             	add    esp,0x10
c0018407:	89 c1                	mov    ecx,eax
c0018409:	83 c8 ff             	or     eax,0xffffffff
c001840c:	85 c9                	test   ecx,ecx
c001840e:	89 c2                	mov    edx,eax
c0018410:	74 28                	je     c001843a <Sys::read(regs*)+0x61>
c0018412:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001841a:	31 ff                	xor    edi,edi
c001841c:	83 ec 0c             	sub    esp,0xc
c001841f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0018421:	8d 54 24 18          	lea    edx,[esp+0x18]
c0018425:	52                   	push   edx
c0018426:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0018429:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001842c:	57                   	push   edi
c001842d:	56                   	push   esi
c001842e:	51                   	push   ecx
c001842f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0018432:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018436:	83 c4 20             	add    esp,0x20
c0018439:	99                   	cdq    
c001843a:	83 c4 10             	add    esp,0x10
c001843d:	5b                   	pop    ebx
c001843e:	5e                   	pop    esi
c001843f:	5f                   	pop    edi
c0018440:	c3                   	ret    

c0018441 <Sys::sbrk(regs*)>:
c0018441:	56                   	push   esi
c0018442:	53                   	push   ebx
c0018443:	50                   	push   eax
c0018444:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018449:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001844d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018450:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0018453:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c0018459:	85 db                	test   ebx,ebx
c001845b:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001845e:	74 02                	je     c0018462 <Sys::sbrk(regs*)+0x21>
c0018460:	79 06                	jns    c0018468 <Sys::sbrk(regs*)+0x27>
c0018462:	89 f0                	mov    eax,esi
c0018464:	31 d2                	xor    edx,edx
c0018466:	eb 2a                	jmp    c0018492 <Sys::sbrk(regs*)+0x51>
c0018468:	83 c8 ff             	or     eax,0xffffffff
c001846b:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0018471:	89 c2                	mov    edx,eax
c0018473:	77 1d                	ja     c0018492 <Sys::sbrk(regs*)+0x51>
c0018475:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001847b:	50                   	push   eax
c001847c:	c1 ea 0c             	shr    edx,0xc
c001847f:	68 07 04 00 00       	push   0x407
c0018484:	52                   	push   edx
c0018485:	51                   	push   ecx
c0018486:	e8 cd 95 ff ff       	call   c0011a58 <VAS::allocatePages(int, int)>
c001848b:	89 f0                	mov    eax,esi
c001848d:	31 d2                	xor    edx,edx
c001848f:	83 c4 10             	add    esp,0x10
c0018492:	59                   	pop    ecx
c0018493:	5b                   	pop    ebx
c0018494:	5e                   	pop    esi
c0018495:	c3                   	ret    

c0018496 <Sys::write(regs*)>:
c0018496:	57                   	push   edi
c0018497:	56                   	push   esi
c0018498:	53                   	push   ebx
c0018499:	83 ec 10             	sub    esp,0x10
c001849c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00184a0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00184a3:	83 f8 02             	cmp    eax,0x2
c00184a6:	77 10                	ja     c00184b8 <Sys::write(regs*)+0x22>
c00184a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00184ad:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00184b0:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00184b6:	eb 0e                	jmp    c00184c6 <Sys::write(regs*)+0x30>
c00184b8:	83 ec 0c             	sub    esp,0xc
c00184bb:	50                   	push   eax
c00184bc:	e8 7a 8d ff ff       	call   c001123b <getFromFileDescriptor(int)>
c00184c1:	83 c4 10             	add    esp,0x10
c00184c4:	89 c1                	mov    ecx,eax
c00184c6:	83 c8 ff             	or     eax,0xffffffff
c00184c9:	85 c9                	test   ecx,ecx
c00184cb:	89 c2                	mov    edx,eax
c00184cd:	74 28                	je     c00184f7 <Sys::write(regs*)+0x61>
c00184cf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00184d7:	31 ff                	xor    edi,edi
c00184d9:	83 ec 0c             	sub    esp,0xc
c00184dc:	8b 01                	mov    eax,DWORD PTR [ecx]
c00184de:	8d 54 24 18          	lea    edx,[esp+0x18]
c00184e2:	52                   	push   edx
c00184e3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00184e6:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00184e9:	57                   	push   edi
c00184ea:	56                   	push   esi
c00184eb:	51                   	push   ecx
c00184ec:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00184ef:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00184f3:	83 c4 20             	add    esp,0x20
c00184f6:	99                   	cdq    
c00184f7:	83 c4 10             	add    esp,0x10
c00184fa:	5b                   	pop    ebx
c00184fb:	5e                   	pop    esi
c00184fc:	5f                   	pop    edi
c00184fd:	c3                   	ret    

c00184fe <Sys::yield(regs*)>:
c00184fe:	83 ec 0c             	sub    esp,0xc
c0018501:	e8 9e 5e ff ff       	call   c000e3a4 <lockScheduler()>
c0018506:	e8 cd 61 ff ff       	call   c000e6d8 <schedule()>
c001850b:	e8 96 5e ff ff       	call   c000e3a6 <unlockScheduler()>
c0018510:	31 c0                	xor    eax,eax
c0018512:	31 d2                	xor    edx,edx
c0018514:	83 c4 0c             	add    esp,0xc
c0018517:	c3                   	ret    

c0018518 <vm8086EntryPoint(void*)>:
c0018518:	83 ec 0c             	sub    esp,0xc
c001851b:	e8 86 5e ff ff       	call   c000e3a6 <unlockScheduler()>
c0018520:	fb                   	sti    
c0018521:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018526:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001852a:	52                   	push   edx
c001852b:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001852f:	52                   	push   edx
c0018530:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018534:	52                   	push   edx
c0018535:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0018539:	50                   	push   eax
c001853a:	e8 a3 7c fe ff       	call   c00001e2 <goToVM86>
c001853f:	83 c4 1c             	add    esp,0x1c
c0018542:	c3                   	ret    

c0018543 <inbv(unsigned short)>:
c0018543:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018547:	ec                   	in     al,dx
c0018548:	c3                   	ret    

c0018549 <outbv(unsigned short, unsigned char)>:
c0018549:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001854d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018551:	ee                   	out    dx,al
c0018552:	c3                   	ret    

c0018553 <realToLinear(unsigned short, unsigned short)>:
c0018553:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018558:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001855d:	c1 e0 04             	shl    eax,0x4
c0018560:	01 d0                	add    eax,edx
c0018562:	c3                   	ret    

c0018563 <getSegment(unsigned int)>:
c0018563:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018567:	c1 e8 10             	shr    eax,0x10
c001856a:	c3                   	ret    

c001856b <getOffset(unsigned int)>:
c001856b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001856f:	c3                   	ret    

c0018570 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0018570:	55                   	push   ebp
c0018571:	57                   	push   edi
c0018572:	56                   	push   esi
c0018573:	53                   	push   ebx
c0018574:	83 ec 2c             	sub    esp,0x2c
c0018577:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001857b:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001857f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018583:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0018587:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001858b:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001858f:	e8 10 5e ff ff       	call   c000e3a4 <lockScheduler()>
c0018594:	68 80 00 00 00       	push   0x80
c0018599:	6a 00                	push   0x0
c001859b:	68 18 85 01 c0       	push   0xc0018518
c00185a0:	55                   	push   ebp
c00185a1:	e8 28 5f ff ff       	call   c000e4ce <Process::createThread(void (*)(void*), void*, int)>
c00185a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00185aa:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c00185ae:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00185b2:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c00185b6:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c00185ba:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00185be:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00185c5:	e8 e8 9e ff ff       	call   c00124b2 <operator new(unsigned long)>
c00185ca:	83 c4 0c             	add    esp,0xc
c00185cd:	89 c3                	mov    ebx,eax
c00185cf:	55                   	push   ebp
c00185d0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00185d4:	50                   	push   eax
c00185d5:	e8 06 a3 ff ff       	call   c00128e0 <File::File(char const*, Process*)>
c00185da:	83 c4 0c             	add    esp,0xc
c00185dd:	8d 44 24 17          	lea    eax,[esp+0x17]
c00185e1:	50                   	push   eax
c00185e2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00185e6:	50                   	push   eax
c00185e7:	53                   	push   ebx
c00185e8:	e8 03 a6 ff ff       	call   c0012bf0 <File::stat(unsigned long long*, bool*)>
c00185ed:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c00185f1:	83 c4 10             	add    esp,0x10
c00185f4:	84 d2                	test   dl,dl
c00185f6:	74 1c                	je     c0018614 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c00185f8:	83 ec 0c             	sub    esp,0xc
c00185fb:	68 9d a3 03 c0       	push   0xc003a39d
c0018600:	e8 1b 4a ff ff       	call   c000d020 <panic(char const*)>
c0018605:	e8 9c 5d ff ff       	call   c000e3a6 <unlockScheduler()>
c001860a:	83 c4 10             	add    esp,0x10
c001860d:	31 d2                	xor    edx,edx
c001860f:	e9 81 00 00 00       	jmp    c0018695 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018614:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0018618:	51                   	push   ecx
c0018619:	51                   	push   ecx
c001861a:	6a 01                	push   0x1
c001861c:	53                   	push   ebx
c001861d:	e8 22 a3 ff ff       	call   c0012944 <File::open(FileOpenMode)>
c0018622:	83 c4 10             	add    esp,0x10
c0018625:	85 c0                	test   eax,eax
c0018627:	74 1b                	je     c0018644 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0018629:	83 ec 0c             	sub    esp,0xc
c001862c:	68 b6 a3 03 c0       	push   0xc003a3b6
c0018631:	e8 ea 49 ff ff       	call   c000d020 <panic(char const*)>
c0018636:	e8 6b 5d ff ff       	call   c000e3a6 <unlockScheduler()>
c001863b:	83 c4 10             	add    esp,0x10
c001863e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0018642:	eb 51                	jmp    c0018695 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018644:	83 ec 0c             	sub    esp,0xc
c0018647:	0f b7 ff             	movzx  edi,di
c001864a:	6a 07                	push   0x7
c001864c:	0f b7 f6             	movzx  esi,si
c001864f:	68 00 01 00 00       	push   0x100
c0018654:	6a 00                	push   0x0
c0018656:	6a 00                	push   0x0
c0018658:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c001865e:	e8 e1 95 ff ff       	call   c0011c44 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0018663:	83 c4 18             	add    esp,0x18
c0018666:	57                   	push   edi
c0018667:	56                   	push   esi
c0018668:	e8 e6 fe ff ff       	call   c0018553 <realToLinear(unsigned short, unsigned short)>
c001866d:	5a                   	pop    edx
c001866e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018670:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0018674:	51                   	push   ecx
c0018675:	50                   	push   eax
c0018676:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001867a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001867e:	53                   	push   ebx
c001867f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018682:	83 c4 14             	add    esp,0x14
c0018685:	53                   	push   ebx
c0018686:	e8 17 a3 ff ff       	call   c00129a2 <File::close()>
c001868b:	e8 16 5d ff ff       	call   c000e3a6 <unlockScheduler()>
c0018690:	83 c4 10             	add    esp,0x10
c0018693:	b2 01                	mov    dl,0x1
c0018695:	83 c4 2c             	add    esp,0x2c
c0018698:	88 d0                	mov    al,dl
c001869a:	5b                   	pop    ebx
c001869b:	5e                   	pop    esi
c001869c:	5f                   	pop    edi
c001869d:	5d                   	pop    ebp
c001869e:	c3                   	ret    

c001869f <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001869f:	57                   	push   edi
c00186a0:	56                   	push   esi
c00186a1:	53                   	push   ebx
c00186a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00186a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186aa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00186ae:	83 e8 06             	sub    eax,0x6
c00186b1:	0f b7 c0             	movzx  eax,ax
c00186b4:	50                   	push   eax
c00186b5:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00186ba:	50                   	push   eax
c00186bb:	e8 93 fe ff ff       	call   c0018553 <realToLinear(unsigned short, unsigned short)>
c00186c0:	5a                   	pop    edx
c00186c1:	5e                   	pop    esi
c00186c2:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00186c5:	8d 56 fa             	lea    edx,[esi-0x6]
c00186c8:	81 e2 ff ff 00 00    	and    edx,0xffff
c00186ce:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00186d1:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00186d4:	83 c2 02             	add    edx,0x2
c00186d7:	66 89 10             	mov    WORD PTR [eax],dx
c00186da:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00186dd:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00186e1:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00186e4:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00186e8:	89 d6                	mov    esi,edx
c00186ea:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00186f0:	66 81 e6 ff fd       	and    si,0xfdff
c00186f5:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c00186f9:	74 07                	je     c0018702 <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00186fb:	89 d6                	mov    esi,edx
c00186fd:	66 81 ce 00 02       	or     si,0x200
c0018702:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0018706:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001870b:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001870f:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0018717:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001871a:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018722:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018725:	5b                   	pop    ebx
c0018726:	5e                   	pop    esi
c0018727:	5f                   	pop    edi
c0018728:	c3                   	ret    

c0018729 <readByteFromReal(unsigned short, unsigned short)>:
c0018729:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001872e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018733:	c1 e0 04             	shl    eax,0x4
c0018736:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0018739:	c3                   	ret    

c001873a <readWordFromReal(unsigned short, unsigned short)>:
c001873a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001873f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018744:	c1 e0 04             	shl    eax,0x4
c0018747:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001874b:	c3                   	ret    

c001874c <readDwordFromReal(unsigned short, unsigned short)>:
c001874c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018751:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018756:	c1 e0 04             	shl    eax,0x4
c0018759:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001875c:	c3                   	ret    

c001875d <writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001875d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018762:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018767:	c1 e0 04             	shl    eax,0x4
c001876a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001876e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0018771:	c3                   	ret    

c0018772 <writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0018772:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018777:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001877c:	c1 e0 04             	shl    eax,0x4
c001877f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018783:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0018787:	c3                   	ret    

c0018788 <writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0018788:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001878d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018792:	c1 e0 04             	shl    eax,0x4
c0018795:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018799:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001879c:	c3                   	ret    

c001879d <vm8086FaultHandler(regs*)>:
c001879d:	55                   	push   ebp
c001879e:	57                   	push   edi
c001879f:	56                   	push   esi
c00187a0:	53                   	push   ebx
c00187a1:	83 ec 1c             	sub    esp,0x1c
c00187a4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00187a8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00187ab:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00187af:	0f b7 f0             	movzx  esi,ax
c00187b2:	52                   	push   edx
c00187b3:	0f b7 c0             	movzx  eax,ax
c00187b6:	50                   	push   eax
c00187b7:	e8 97 fd ff ff       	call   c0018553 <realToLinear(unsigned short, unsigned short)>
c00187bc:	5a                   	pop    edx
c00187bd:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00187c0:	59                   	pop    ecx
c00187c1:	89 c7                	mov    edi,eax
c00187c3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00187c6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00187ca:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00187cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00187d3:	0f b7 c5             	movzx  eax,bp
c00187d6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00187da:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00187de:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00187e2:	e8 6c fd ff ff       	call   c0018553 <realToLinear(unsigned short, unsigned short)>
c00187e7:	5a                   	pop    edx
c00187e8:	59                   	pop    ecx
c00187e9:	b1 06                	mov    cl,0x6
c00187eb:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00187f0:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00187f5:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c00187f8:	80 fa 9d             	cmp    dl,0x9d
c00187fb:	0f 84 1d 02 00 00    	je     c0018a1e <vm8086FaultHandler(regs*)+0x281>
c0018801:	0f 87 8e 00 00 00    	ja     c0018895 <vm8086FaultHandler(regs*)+0xf8>
c0018807:	80 fa 66             	cmp    dl,0x66
c001880a:	0f 84 89 01 00 00    	je     c0018999 <vm8086FaultHandler(regs*)+0x1fc>
c0018810:	77 44                	ja     c0018856 <vm8086FaultHandler(regs*)+0xb9>
c0018812:	80 fa 36             	cmp    dl,0x36
c0018815:	0f 84 74 01 00 00    	je     c001898f <vm8086FaultHandler(regs*)+0x1f2>
c001881b:	77 1a                	ja     c0018837 <vm8086FaultHandler(regs*)+0x9a>
c001881d:	80 fa 26             	cmp    dl,0x26
c0018820:	0f 84 4b 01 00 00    	je     c0018971 <vm8086FaultHandler(regs*)+0x1d4>
c0018826:	80 fa 2e             	cmp    dl,0x2e
c0018829:	0f 85 4a 05 00 00    	jne    c0018d79 <vm8086FaultHandler(regs*)+0x5dc>
c001882f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018832:	31 c9                	xor    ecx,ecx
c0018834:	47                   	inc    edi
c0018835:	eb be                	jmp    c00187f5 <vm8086FaultHandler(regs*)+0x58>
c0018837:	80 fa 64             	cmp    dl,0x64
c001883a:	0f 84 3b 01 00 00    	je     c001897b <vm8086FaultHandler(regs*)+0x1de>
c0018840:	0f 87 3f 01 00 00    	ja     c0018985 <vm8086FaultHandler(regs*)+0x1e8>
c0018846:	80 fa 3e             	cmp    dl,0x3e
c0018849:	0f 85 2a 05 00 00    	jne    c0018d79 <vm8086FaultHandler(regs*)+0x5dc>
c001884f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018852:	b1 01                	mov    cl,0x1
c0018854:	eb de                	jmp    c0018834 <vm8086FaultHandler(regs*)+0x97>
c0018856:	80 fa 6d             	cmp    dl,0x6d
c0018859:	0f 84 bf 02 00 00    	je     c0018b1e <vm8086FaultHandler(regs*)+0x381>
c001885f:	77 17                	ja     c0018878 <vm8086FaultHandler(regs*)+0xdb>
c0018861:	80 fa 67             	cmp    dl,0x67
c0018864:	0f 84 3c 01 00 00    	je     c00189a6 <vm8086FaultHandler(regs*)+0x209>
c001886a:	80 fa 6c             	cmp    dl,0x6c
c001886d:	0f 84 5d 02 00 00    	je     c0018ad0 <vm8086FaultHandler(regs*)+0x333>
c0018873:	e9 01 05 00 00       	jmp    c0018d79 <vm8086FaultHandler(regs*)+0x5dc>
c0018878:	80 fa 6f             	cmp    dl,0x6f
c001887b:	0f 84 8b 03 00 00    	je     c0018c0c <vm8086FaultHandler(regs*)+0x46f>
c0018881:	0f 82 0f 03 00 00    	jb     c0018b96 <vm8086FaultHandler(regs*)+0x3f9>
c0018887:	80 fa 9c             	cmp    dl,0x9c
c001888a:	0f 84 23 01 00 00    	je     c00189b3 <vm8086FaultHandler(regs*)+0x216>
c0018890:	e9 e4 04 00 00       	jmp    c0018d79 <vm8086FaultHandler(regs*)+0x5dc>
c0018895:	80 fa ec             	cmp    dl,0xec
c0018898:	0f 84 7f 04 00 00    	je     c0018d1d <vm8086FaultHandler(regs*)+0x580>
c001889e:	77 7b                	ja     c001891b <vm8086FaultHandler(regs*)+0x17e>
c00188a0:	80 fa e4             	cmp    dl,0xe4
c00188a3:	0f 84 fe 03 00 00    	je     c0018ca7 <vm8086FaultHandler(regs*)+0x50a>
c00188a9:	77 53                	ja     c00188fe <vm8086FaultHandler(regs*)+0x161>
c00188ab:	80 fa cd             	cmp    dl,0xcd
c00188ae:	0f 84 cd 01 00 00    	je     c0018a81 <vm8086FaultHandler(regs*)+0x2e4>
c00188b4:	80 fa cf             	cmp    dl,0xcf
c00188b7:	0f 85 bc 04 00 00    	jne    c0018d79 <vm8086FaultHandler(regs*)+0x5dc>
c00188bd:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00188c0:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00188c3:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00188c7:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00188ca:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00188ce:	81 ca 00 02 02 00    	or     edx,0x20200
c00188d4:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00188d7:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00188db:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00188e1:	66 c1 e8 09          	shr    ax,0x9
c00188e5:	83 e0 01             	and    eax,0x1
c00188e8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00188eb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00188ee:	83 c0 06             	add    eax,0x6
c00188f1:	25 ff ff 00 00       	and    eax,0xffff
c00188f6:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00188f9:	e9 77 04 00 00       	jmp    c0018d75 <vm8086FaultHandler(regs*)+0x5d8>
c00188fe:	80 fa e6             	cmp    dl,0xe6
c0018901:	0f 84 ea 03 00 00    	je     c0018cf1 <vm8086FaultHandler(regs*)+0x554>
c0018907:	0f 82 b6 03 00 00    	jb     c0018cc3 <vm8086FaultHandler(regs*)+0x526>
c001890d:	80 fa e7             	cmp    dl,0xe7
c0018910:	0f 84 f2 03 00 00    	je     c0018d08 <vm8086FaultHandler(regs*)+0x56b>
c0018916:	e9 5e 04 00 00       	jmp    c0018d79 <vm8086FaultHandler(regs*)+0x5dc>
c001891b:	80 fa ef             	cmp    dl,0xef
c001891e:	0f 84 3c 04 00 00    	je     c0018d60 <vm8086FaultHandler(regs*)+0x5c3>
c0018924:	77 28                	ja     c001894e <vm8086FaultHandler(regs*)+0x1b1>
c0018926:	80 fa ed             	cmp    dl,0xed
c0018929:	0f 84 0a 04 00 00    	je     c0018d39 <vm8086FaultHandler(regs*)+0x59c>
c001892f:	80 fa ee             	cmp    dl,0xee
c0018932:	0f 85 41 04 00 00    	jne    c0018d79 <vm8086FaultHandler(regs*)+0x5dc>
c0018938:	50                   	push   eax
c0018939:	50                   	push   eax
c001893a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001893e:	50                   	push   eax
c001893f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018943:	50                   	push   eax
c0018944:	e8 00 fc ff ff       	call   c0018549 <outbv(unsigned short, unsigned char)>
c0018949:	e9 0a 04 00 00       	jmp    c0018d58 <vm8086FaultHandler(regs*)+0x5bb>
c001894e:	80 fa fa             	cmp    dl,0xfa
c0018951:	0f 84 5d 01 00 00    	je     c0018ab4 <vm8086FaultHandler(regs*)+0x317>
c0018957:	80 fa fb             	cmp    dl,0xfb
c001895a:	0f 84 62 01 00 00    	je     c0018ac2 <vm8086FaultHandler(regs*)+0x325>
c0018960:	80 fa f3             	cmp    dl,0xf3
c0018963:	0f 85 10 04 00 00    	jne    c0018d79 <vm8086FaultHandler(regs*)+0x5dc>
c0018969:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001896c:	e9 c3 fe ff ff       	jmp    c0018834 <vm8086FaultHandler(regs*)+0x97>
c0018971:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018974:	b1 02                	mov    cl,0x2
c0018976:	e9 b9 fe ff ff       	jmp    c0018834 <vm8086FaultHandler(regs*)+0x97>
c001897b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001897e:	b1 03                	mov    cl,0x3
c0018980:	e9 af fe ff ff       	jmp    c0018834 <vm8086FaultHandler(regs*)+0x97>
c0018985:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018988:	b1 04                	mov    cl,0x4
c001898a:	e9 a5 fe ff ff       	jmp    c0018834 <vm8086FaultHandler(regs*)+0x97>
c001898f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018992:	b1 05                	mov    cl,0x5
c0018994:	e9 9b fe ff ff       	jmp    c0018834 <vm8086FaultHandler(regs*)+0x97>
c0018999:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001899c:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00189a1:	e9 8e fe ff ff       	jmp    c0018834 <vm8086FaultHandler(regs*)+0x97>
c00189a6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00189a9:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00189ae:	e9 81 fe ff ff       	jmp    c0018834 <vm8086FaultHandler(regs*)+0x97>
c00189b3:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00189b6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00189ba:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00189bf:	74 30                	je     c00189f1 <vm8086FaultHandler(regs*)+0x254>
c00189c1:	83 e9 04             	sub    ecx,0x4
c00189c4:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00189ca:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00189d0:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00189d3:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00189d6:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00189dc:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00189e0:	0f 84 8c 03 00 00    	je     c0018d72 <vm8086FaultHandler(regs*)+0x5d5>
c00189e6:	80 ce 02             	or     dh,0x2
c00189e9:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00189ec:	e9 81 03 00 00       	jmp    c0018d72 <vm8086FaultHandler(regs*)+0x5d5>
c00189f1:	83 e9 02             	sub    ecx,0x2
c00189f4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00189fa:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00189fd:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018a01:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018a07:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018a0b:	74 05                	je     c0018a12 <vm8086FaultHandler(regs*)+0x275>
c0018a0d:	80 ce 02             	or     dh,0x2
c0018a10:	eb 03                	jmp    c0018a15 <vm8086FaultHandler(regs*)+0x278>
c0018a12:	80 e6 fd             	and    dh,0xfd
c0018a15:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018a19:	e9 54 03 00 00       	jmp    c0018d72 <vm8086FaultHandler(regs*)+0x5d5>
c0018a1e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018a23:	74 2a                	je     c0018a4f <vm8086FaultHandler(regs*)+0x2b2>
c0018a25:	8b 10                	mov    edx,DWORD PTR [eax]
c0018a27:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018a2d:	81 ca 00 02 02 00    	or     edx,0x20200
c0018a33:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018a36:	8b 00                	mov    eax,DWORD PTR [eax]
c0018a38:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018a3e:	c1 e8 09             	shr    eax,0x9
c0018a41:	83 e0 01             	and    eax,0x1
c0018a44:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018a47:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018a4a:	83 c0 04             	add    eax,0x4
c0018a4d:	eb 25                	jmp    c0018a74 <vm8086FaultHandler(regs*)+0x2d7>
c0018a4f:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018a52:	81 ca 00 02 02 00    	or     edx,0x20200
c0018a58:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0018a5b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0018a5e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018a64:	66 c1 e8 09          	shr    ax,0x9
c0018a68:	83 e0 01             	and    eax,0x1
c0018a6b:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0018a6e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018a71:	83 c0 02             	add    eax,0x2
c0018a74:	25 ff ff 00 00       	and    eax,0xffff
c0018a79:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0018a7c:	e9 f1 02 00 00       	jmp    c0018d72 <vm8086FaultHandler(regs*)+0x5d5>
c0018a81:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018a85:	3c ff                	cmp    al,0xff
c0018a87:	75 10                	jne    c0018a99 <vm8086FaultHandler(regs*)+0x2fc>
c0018a89:	83 ec 0c             	sub    esp,0xc
c0018a8c:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0018a8f:	e8 10 65 ff ff       	call   c000efa4 <terminateTask(int)>
c0018a94:	e9 c2 02 00 00       	jmp    c0018d5b <vm8086FaultHandler(regs*)+0x5be>
c0018a99:	83 ec 0c             	sub    esp,0xc
c0018a9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018aa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018aa4:	57                   	push   edi
c0018aa5:	50                   	push   eax
c0018aa6:	53                   	push   ebx
c0018aa7:	e8 f3 fb ff ff       	call   c001869f <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018aac:	83 c4 20             	add    esp,0x20
c0018aaf:	e9 c1 02 00 00       	jmp    c0018d75 <vm8086FaultHandler(regs*)+0x5d8>
c0018ab4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ab9:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018abd:	e9 b0 02 00 00       	jmp    c0018d72 <vm8086FaultHandler(regs*)+0x5d5>
c0018ac2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ac7:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0018acb:	e9 a2 02 00 00       	jmp    c0018d72 <vm8086FaultHandler(regs*)+0x5d5>
c0018ad0:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018ad5:	74 0d                	je     c0018ae4 <vm8086FaultHandler(regs*)+0x347>
c0018ad7:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0018ade:	0f 87 e9 02 00 00    	ja     c0018dcd <vm8086FaultHandler(regs*)+0x630>
c0018ae4:	83 ec 0c             	sub    esp,0xc
c0018ae7:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0018aea:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018aee:	50                   	push   eax
c0018aef:	e8 4f fa ff ff       	call   c0018543 <inbv(unsigned short)>
c0018af4:	83 c4 0c             	add    esp,0xc
c0018af7:	0f b6 c0             	movzx  eax,al
c0018afa:	0f b7 c9             	movzx  ecx,cx
c0018afd:	50                   	push   eax
c0018afe:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0018b02:	50                   	push   eax
c0018b03:	51                   	push   ecx
c0018b04:	e8 54 fc ff ff       	call   c001875d <writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0018b09:	83 c4 10             	add    esp,0x10
c0018b0c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018b0f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018b13:	74 03                	je     c0018b18 <vm8086FaultHandler(regs*)+0x37b>
c0018b15:	48                   	dec    eax
c0018b16:	eb 01                	jmp    c0018b19 <vm8086FaultHandler(regs*)+0x37c>
c0018b18:	40                   	inc    eax
c0018b19:	0f b7 c0             	movzx  eax,ax
c0018b1c:	eb 70                	jmp    c0018b8e <vm8086FaultHandler(regs*)+0x3f1>
c0018b1e:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018b21:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0018b24:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018b29:	74 0c                	je     c0018b37 <vm8086FaultHandler(regs*)+0x39a>
c0018b2b:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018b31:	0f 87 96 02 00 00    	ja     c0018dcd <vm8086FaultHandler(regs*)+0x630>
c0018b37:	0f b7 c9             	movzx  ecx,cx
c0018b3a:	0f b7 f6             	movzx  esi,si
c0018b3d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018b40:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018b45:	74 20                	je     c0018b67 <vm8086FaultHandler(regs*)+0x3ca>
c0018b47:	ed                   	in     eax,dx
c0018b48:	55                   	push   ebp
c0018b49:	50                   	push   eax
c0018b4a:	51                   	push   ecx
c0018b4b:	56                   	push   esi
c0018b4c:	e8 37 fc ff ff       	call   c0018788 <writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0018b51:	83 c4 10             	add    esp,0x10
c0018b54:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018b57:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018b5b:	74 05                	je     c0018b62 <vm8086FaultHandler(regs*)+0x3c5>
c0018b5d:	83 e8 04             	sub    eax,0x4
c0018b60:	eb 27                	jmp    c0018b89 <vm8086FaultHandler(regs*)+0x3ec>
c0018b62:	83 c0 04             	add    eax,0x4
c0018b65:	eb 22                	jmp    c0018b89 <vm8086FaultHandler(regs*)+0x3ec>
c0018b67:	66 ed                	in     ax,dx
c0018b69:	0f b7 c0             	movzx  eax,ax
c0018b6c:	57                   	push   edi
c0018b6d:	50                   	push   eax
c0018b6e:	51                   	push   ecx
c0018b6f:	56                   	push   esi
c0018b70:	e8 fd fb ff ff       	call   c0018772 <writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0018b75:	83 c4 10             	add    esp,0x10
c0018b78:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018b7b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018b7f:	74 05                	je     c0018b86 <vm8086FaultHandler(regs*)+0x3e9>
c0018b81:	83 e8 02             	sub    eax,0x2
c0018b84:	eb 03                	jmp    c0018b89 <vm8086FaultHandler(regs*)+0x3ec>
c0018b86:	83 c0 02             	add    eax,0x2
c0018b89:	25 ff ff 00 00       	and    eax,0xffff
c0018b8e:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0018b91:	e9 dc 01 00 00       	jmp    c0018d72 <vm8086FaultHandler(regs*)+0x5d5>
c0018b96:	49                   	dec    ecx
c0018b97:	80 f9 05             	cmp    cl,0x5
c0018b9a:	77 24                	ja     c0018bc0 <vm8086FaultHandler(regs*)+0x423>
c0018b9c:	0f b6 c9             	movzx  ecx,cl
c0018b9f:	ff 24 8d fc a3 03 c0 	jmp    DWORD PTR [ecx*4-0x3ffc5c04]
c0018ba6:	0f b7 f5             	movzx  esi,bp
c0018ba9:	eb 15                	jmp    c0018bc0 <vm8086FaultHandler(regs*)+0x423>
c0018bab:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0018baf:	eb 0f                	jmp    c0018bc0 <vm8086FaultHandler(regs*)+0x423>
c0018bb1:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0018bb5:	eb 09                	jmp    c0018bc0 <vm8086FaultHandler(regs*)+0x423>
c0018bb7:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0018bbb:	eb 03                	jmp    c0018bc0 <vm8086FaultHandler(regs*)+0x423>
c0018bbd:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0018bc0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018bc3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018bc8:	74 0b                	je     c0018bd5 <vm8086FaultHandler(regs*)+0x438>
c0018bca:	3d ff ff 00 00       	cmp    eax,0xffff
c0018bcf:	0f 87 f8 01 00 00    	ja     c0018dcd <vm8086FaultHandler(regs*)+0x630>
c0018bd5:	0f b7 c0             	movzx  eax,ax
c0018bd8:	52                   	push   edx
c0018bd9:	52                   	push   edx
c0018bda:	50                   	push   eax
c0018bdb:	56                   	push   esi
c0018bdc:	e8 48 fb ff ff       	call   c0018729 <readByteFromReal(unsigned short, unsigned short)>
c0018be1:	59                   	pop    ecx
c0018be2:	0f b6 c0             	movzx  eax,al
c0018be5:	5e                   	pop    esi
c0018be6:	50                   	push   eax
c0018be7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018beb:	50                   	push   eax
c0018bec:	e8 58 f9 ff ff       	call   c0018549 <outbv(unsigned short, unsigned char)>
c0018bf1:	83 c4 10             	add    esp,0x10
c0018bf4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018bf7:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018bfb:	74 03                	je     c0018c00 <vm8086FaultHandler(regs*)+0x463>
c0018bfd:	48                   	dec    eax
c0018bfe:	eb 01                	jmp    c0018c01 <vm8086FaultHandler(regs*)+0x464>
c0018c00:	40                   	inc    eax
c0018c01:	0f b7 c0             	movzx  eax,ax
c0018c04:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018c07:	e9 66 01 00 00       	jmp    c0018d72 <vm8086FaultHandler(regs*)+0x5d5>
c0018c0c:	49                   	dec    ecx
c0018c0d:	80 f9 05             	cmp    cl,0x5
c0018c10:	77 1f                	ja     c0018c31 <vm8086FaultHandler(regs*)+0x494>
c0018c12:	0f b6 c9             	movzx  ecx,cl
c0018c15:	ff 24 8d 14 a4 03 c0 	jmp    DWORD PTR [ecx*4-0x3ffc5bec]
c0018c1c:	89 ee                	mov    esi,ebp
c0018c1e:	eb 11                	jmp    c0018c31 <vm8086FaultHandler(regs*)+0x494>
c0018c20:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0018c23:	eb 0c                	jmp    c0018c31 <vm8086FaultHandler(regs*)+0x494>
c0018c25:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018c28:	eb 07                	jmp    c0018c31 <vm8086FaultHandler(regs*)+0x494>
c0018c2a:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0018c2d:	eb 02                	jmp    c0018c31 <vm8086FaultHandler(regs*)+0x494>
c0018c2f:	8b 33                	mov    esi,DWORD PTR [ebx]
c0018c31:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0018c34:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018c39:	74 0c                	je     c0018c47 <vm8086FaultHandler(regs*)+0x4aa>
c0018c3b:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018c41:	0f 87 86 01 00 00    	ja     c0018dcd <vm8086FaultHandler(regs*)+0x630>
c0018c47:	0f b7 d6             	movzx  edx,si
c0018c4a:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0018c4d:	0f b7 c1             	movzx  eax,cx
c0018c50:	81 e7 00 04 00 00    	and    edi,0x400
c0018c56:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0018c59:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018c5e:	74 1d                	je     c0018c7d <vm8086FaultHandler(regs*)+0x4e0>
c0018c60:	55                   	push   ebp
c0018c61:	55                   	push   ebp
c0018c62:	50                   	push   eax
c0018c63:	52                   	push   edx
c0018c64:	e8 e3 fa ff ff       	call   c001874c <readDwordFromReal(unsigned short, unsigned short)>
c0018c69:	83 c4 10             	add    esp,0x10
c0018c6c:	89 f2                	mov    edx,esi
c0018c6e:	ef                   	out    dx,eax
c0018c6f:	85 ff                	test   edi,edi
c0018c71:	74 05                	je     c0018c78 <vm8086FaultHandler(regs*)+0x4db>
c0018c73:	83 e9 04             	sub    ecx,0x4
c0018c76:	eb 21                	jmp    c0018c99 <vm8086FaultHandler(regs*)+0x4fc>
c0018c78:	83 c1 04             	add    ecx,0x4
c0018c7b:	eb 1c                	jmp    c0018c99 <vm8086FaultHandler(regs*)+0x4fc>
c0018c7d:	55                   	push   ebp
c0018c7e:	55                   	push   ebp
c0018c7f:	50                   	push   eax
c0018c80:	52                   	push   edx
c0018c81:	e8 b4 fa ff ff       	call   c001873a <readWordFromReal(unsigned short, unsigned short)>
c0018c86:	83 c4 10             	add    esp,0x10
c0018c89:	89 f2                	mov    edx,esi
c0018c8b:	66 ef                	out    dx,ax
c0018c8d:	85 ff                	test   edi,edi
c0018c8f:	74 05                	je     c0018c96 <vm8086FaultHandler(regs*)+0x4f9>
c0018c91:	83 e9 02             	sub    ecx,0x2
c0018c94:	eb 03                	jmp    c0018c99 <vm8086FaultHandler(regs*)+0x4fc>
c0018c96:	83 c1 02             	add    ecx,0x2
c0018c99:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018c9f:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0018ca2:	e9 cb 00 00 00       	jmp    c0018d72 <vm8086FaultHandler(regs*)+0x5d5>
c0018ca7:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018cae:	83 ec 0c             	sub    esp,0xc
c0018cb1:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018cb5:	50                   	push   eax
c0018cb6:	e8 88 f8 ff ff       	call   c0018543 <inbv(unsigned short)>
c0018cbb:	0f b6 c0             	movzx  eax,al
c0018cbe:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018cc1:	eb 3f                	jmp    c0018d02 <vm8086FaultHandler(regs*)+0x565>
c0018cc3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018cc8:	74 07                	je     c0018cd1 <vm8086FaultHandler(regs*)+0x534>
c0018cca:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018cce:	ed                   	in     eax,dx
c0018ccf:	eb 14                	jmp    c0018ce5 <vm8086FaultHandler(regs*)+0x548>
c0018cd1:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0018cd4:	66 31 c9             	xor    cx,cx
c0018cd7:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0018cda:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018cde:	66 ed                	in     ax,dx
c0018ce0:	0f b7 c0             	movzx  eax,ax
c0018ce3:	09 c8                	or     eax,ecx
c0018ce5:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018ce8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018cec:	e9 84 00 00 00       	jmp    c0018d75 <vm8086FaultHandler(regs*)+0x5d8>
c0018cf1:	52                   	push   edx
c0018cf2:	52                   	push   edx
c0018cf3:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018cf7:	50                   	push   eax
c0018cf8:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018cfc:	50                   	push   eax
c0018cfd:	e8 47 f8 ff ff       	call   c0018549 <outbv(unsigned short, unsigned char)>
c0018d02:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018d06:	eb 53                	jmp    c0018d5b <vm8086FaultHandler(regs*)+0x5be>
c0018d08:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018d0b:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018d0f:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018d14:	74 03                	je     c0018d19 <vm8086FaultHandler(regs*)+0x57c>
c0018d16:	ef                   	out    dx,eax
c0018d17:	eb cf                	jmp    c0018ce8 <vm8086FaultHandler(regs*)+0x54b>
c0018d19:	66 ef                	out    dx,ax
c0018d1b:	eb cb                	jmp    c0018ce8 <vm8086FaultHandler(regs*)+0x54b>
c0018d1d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018d24:	83 ec 0c             	sub    esp,0xc
c0018d27:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018d2b:	50                   	push   eax
c0018d2c:	e8 12 f8 ff ff       	call   c0018543 <inbv(unsigned short)>
c0018d31:	0f b6 c0             	movzx  eax,al
c0018d34:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018d37:	eb 1f                	jmp    c0018d58 <vm8086FaultHandler(regs*)+0x5bb>
c0018d39:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018d3c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018d41:	74 03                	je     c0018d46 <vm8086FaultHandler(regs*)+0x5a9>
c0018d43:	ed                   	in     eax,dx
c0018d44:	eb 0d                	jmp    c0018d53 <vm8086FaultHandler(regs*)+0x5b6>
c0018d46:	66 ed                	in     ax,dx
c0018d48:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018d4b:	0f b7 c0             	movzx  eax,ax
c0018d4e:	66 31 d2             	xor    dx,dx
c0018d51:	09 d0                	or     eax,edx
c0018d53:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018d56:	eb 1a                	jmp    c0018d72 <vm8086FaultHandler(regs*)+0x5d5>
c0018d58:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018d5b:	83 c4 10             	add    esp,0x10
c0018d5e:	eb 15                	jmp    c0018d75 <vm8086FaultHandler(regs*)+0x5d8>
c0018d60:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018d63:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018d66:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018d6b:	74 03                	je     c0018d70 <vm8086FaultHandler(regs*)+0x5d3>
c0018d6d:	ef                   	out    dx,eax
c0018d6e:	eb 02                	jmp    c0018d72 <vm8086FaultHandler(regs*)+0x5d5>
c0018d70:	66 ef                	out    dx,ax
c0018d72:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018d75:	b0 01                	mov    al,0x1
c0018d77:	eb 56                	jmp    c0018dcf <vm8086FaultHandler(regs*)+0x632>
c0018d79:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0018d7d:	50                   	push   eax
c0018d7e:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0018d82:	50                   	push   eax
c0018d83:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0018d87:	50                   	push   eax
c0018d88:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0018d8c:	50                   	push   eax
c0018d8d:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018d91:	50                   	push   eax
c0018d92:	52                   	push   edx
c0018d93:	52                   	push   edx
c0018d94:	68 cf a3 03 c0       	push   0xc003a3cf
c0018d99:	e8 64 41 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c0018d9e:	83 c4 20             	add    esp,0x20
c0018da1:	83 ec 0c             	sub    esp,0xc
c0018da4:	6a 60                	push   0x60
c0018da6:	e8 98 f7 ff ff       	call   c0018543 <inbv(unsigned short)>
c0018dab:	83 c4 10             	add    esp,0x10
c0018dae:	3c 1c                	cmp    al,0x1c
c0018db0:	74 04                	je     c0018db6 <vm8086FaultHandler(regs*)+0x619>
c0018db2:	3c 5a                	cmp    al,0x5a
c0018db4:	75 eb                	jne    c0018da1 <vm8086FaultHandler(regs*)+0x604>
c0018db6:	3c 5a                	cmp    al,0x5a
c0018db8:	74 04                	je     c0018dbe <vm8086FaultHandler(regs*)+0x621>
c0018dba:	3c 1c                	cmp    al,0x1c
c0018dbc:	75 0f                	jne    c0018dcd <vm8086FaultHandler(regs*)+0x630>
c0018dbe:	83 ec 0c             	sub    esp,0xc
c0018dc1:	6a 60                	push   0x60
c0018dc3:	e8 7b f7 ff ff       	call   c0018543 <inbv(unsigned short)>
c0018dc8:	83 c4 10             	add    esp,0x10
c0018dcb:	eb e9                	jmp    c0018db6 <vm8086FaultHandler(regs*)+0x619>
c0018dcd:	31 c0                	xor    eax,eax
c0018dcf:	83 c4 1c             	add    esp,0x1c
c0018dd2:	5b                   	pop    ebx
c0018dd3:	5e                   	pop    esi
c0018dd4:	5f                   	pop    edi
c0018dd5:	5d                   	pop    ebp
c0018dd6:	c3                   	ret    
c0018dd7:	90                   	nop

c0018dd8 <FAT::getName()>:
c0018dd8:	b8 2c a4 03 c0       	mov    eax,0xc003a42c
c0018ddd:	c3                   	ret    

c0018dde <FAT::tell(void*, unsigned long long*)>:
c0018dde:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018de3:	75 06                	jne    c0018deb <FAT::tell(void*, unsigned long long*)+0xd>
c0018de5:	b8 04 00 00 00       	mov    eax,0x4
c0018dea:	c3                   	ret    
c0018deb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018df0:	75 06                	jne    c0018df8 <FAT::tell(void*, unsigned long long*)+0x1a>
c0018df2:	b8 04 00 00 00       	mov    eax,0x4
c0018df7:	c3                   	ret    
c0018df8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018dfc:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0018dff:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018e02:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e06:	89 01                	mov    DWORD PTR [ecx],eax
c0018e08:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018e0b:	b8 00 00 00 00       	mov    eax,0x0
c0018e10:	c3                   	ret    
c0018e11:	90                   	nop

c0018e12 <FAT::stat(void*, unsigned long long*)>:
c0018e12:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018e17:	75 06                	jne    c0018e1f <FAT::stat(void*, unsigned long long*)+0xd>
c0018e19:	b8 04 00 00 00       	mov    eax,0x4
c0018e1e:	c3                   	ret    
c0018e1f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018e24:	75 06                	jne    c0018e2c <FAT::stat(void*, unsigned long long*)+0x1a>
c0018e26:	b8 04 00 00 00       	mov    eax,0x4
c0018e2b:	c3                   	ret    
c0018e2c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e30:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018e33:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018e36:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018e3a:	89 01                	mov    DWORD PTR [ecx],eax
c0018e3c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018e3f:	b8 00 00 00 00       	mov    eax,0x0
c0018e44:	c3                   	ret    
c0018e45:	90                   	nop

c0018e46 <FAT::exists(char const*)>:
c0018e46:	b0 00                	mov    al,0x0
c0018e48:	c3                   	ret    
c0018e49:	90                   	nop

c0018e4a <FAT::~FAT()>:
c0018e4a:	83 ec 0c             	sub    esp,0xc
c0018e4d:	ba b0 a4 03 c0       	mov    edx,0xc003a4b0
c0018e52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e56:	89 10                	mov    DWORD PTR [eax],edx
c0018e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e5c:	83 ec 0c             	sub    esp,0xc
c0018e5f:	50                   	push   eax
c0018e60:	e8 75 98 ff ff       	call   c00126da <Filesystem::~Filesystem()>
c0018e65:	83 c4 10             	add    esp,0x10
c0018e68:	90                   	nop
c0018e69:	83 c4 0c             	add    esp,0xc
c0018e6c:	c3                   	ret    
c0018e6d:	90                   	nop

c0018e6e <FAT::~FAT()>:
c0018e6e:	83 ec 0c             	sub    esp,0xc
c0018e71:	83 ec 0c             	sub    esp,0xc
c0018e74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e78:	e8 cd ff ff ff       	call   c0018e4a <FAT::~FAT()>
c0018e7d:	83 c4 10             	add    esp,0x10
c0018e80:	83 ec 08             	sub    esp,0x8
c0018e83:	6a 08                	push   0x8
c0018e85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018e89:	e8 33 96 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c0018e8e:	83 c4 10             	add    esp,0x10
c0018e91:	83 c4 0c             	add    esp,0xc
c0018e94:	c3                   	ret    
c0018e95:	90                   	nop

c0018e96 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018e96:	83 ec 1c             	sub    esp,0x1c
c0018e99:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018ea0:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018ea5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ea9:	8b 04 85 80 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3880]
c0018eb0:	83 f8 ff             	cmp    eax,0xffffffff
c0018eb3:	75 34                	jne    c0018ee9 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0018eb5:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018eb9:	88 c2                	mov    dl,al
c0018ebb:	a1 60 c7 03 c0       	mov    eax,ds:0xc003c760
c0018ec0:	01 d0                	add    eax,edx
c0018ec2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018ec6:	8b 15 60 c7 03 c0    	mov    edx,DWORD PTR ds:0xc003c760
c0018ecc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ed0:	89 14 85 80 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3880],edx
c0018ed7:	a1 60 c7 03 c0       	mov    eax,ds:0xc003c760
c0018edc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018ee0:	89 14 85 00 c8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3800],edx
c0018ee7:	eb 17                	jmp    c0018f00 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0018ee9:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018eed:	88 c2                	mov    dl,al
c0018eef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018ef3:	8b 04 85 80 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3880]
c0018efa:	01 d0                	add    eax,edx
c0018efc:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018f00:	83 ec 04             	sub    esp,0x4
c0018f03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018f07:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018f0b:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018f0f:	50                   	push   eax
c0018f10:	e8 6d de fe ff       	call   c0006d82 <f_getlabel>
c0018f15:	83 c4 10             	add    esp,0x10
c0018f18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018f1c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018f21:	75 07                	jne    c0018f2a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0018f23:	b8 00 00 00 00       	mov    eax,0x0
c0018f28:	eb 05                	jmp    c0018f2f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0018f2a:	b8 01 00 00 00       	mov    eax,0x1
c0018f2f:	83 c4 1c             	add    esp,0x1c
c0018f32:	c3                   	ret    
c0018f33:	90                   	nop

c0018f34 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018f34:	57                   	push   edi
c0018f35:	83 ec 58             	sub    esp,0x58
c0018f38:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018f40:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018f44:	b9 0f 00 00 00       	mov    ecx,0xf
c0018f49:	b8 00 00 00 00       	mov    eax,0x0
c0018f4e:	fc                   	cld    
c0018f4f:	89 d7                	mov    edi,edx
c0018f51:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018f53:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018f57:	8b 04 85 80 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3880]
c0018f5e:	83 f8 ff             	cmp    eax,0xffffffff
c0018f61:	75 34                	jne    c0018f97 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0018f63:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018f67:	88 c2                	mov    dl,al
c0018f69:	a1 60 c7 03 c0       	mov    eax,ds:0xc003c760
c0018f6e:	01 d0                	add    eax,edx
c0018f70:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018f74:	8b 15 60 c7 03 c0    	mov    edx,DWORD PTR ds:0xc003c760
c0018f7a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018f7e:	89 14 85 80 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3880],edx
c0018f85:	a1 60 c7 03 c0       	mov    eax,ds:0xc003c760
c0018f8a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018f8e:	89 14 85 00 c8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3800],edx
c0018f95:	eb 17                	jmp    c0018fae <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0018f97:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018f9b:	88 c2                	mov    dl,al
c0018f9d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018fa1:	8b 04 85 80 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3880]
c0018fa8:	01 d0                	add    eax,edx
c0018faa:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018fae:	83 ec 08             	sub    esp,0x8
c0018fb1:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018fb5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018fb9:	50                   	push   eax
c0018fba:	e8 82 79 fe ff       	call   c0000941 <strcat>
c0018fbf:	83 c4 10             	add    esp,0x10
c0018fc2:	83 ec 0c             	sub    esp,0xc
c0018fc5:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018fc9:	50                   	push   eax
c0018fca:	e8 a1 df fe ff       	call   c0006f70 <f_setlabel>
c0018fcf:	83 c4 10             	add    esp,0x10
c0018fd2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018fd6:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018fdb:	75 07                	jne    c0018fe4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0018fdd:	b8 00 00 00 00       	mov    eax,0x0
c0018fe2:	eb 05                	jmp    c0018fe9 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0018fe4:	b8 01 00 00 00       	mov    eax,0x1
c0018fe9:	83 c4 58             	add    esp,0x58
c0018fec:	5f                   	pop    edi
c0018fed:	c3                   	ret    

c0018fee <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018fee:	83 ec 2c             	sub    esp,0x2c
c0018ff1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018ff9:	83 ec 08             	sub    esp,0x8
c0018ffc:	68 50 a4 03 c0       	push   0xc003a450
c0019001:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019005:	e8 70 78 fe ff       	call   c000087a <strcmp>
c001900a:	83 c4 10             	add    esp,0x10
c001900d:	85 c0                	test   eax,eax
c001900f:	0f 94 c0             	sete   al
c0019012:	84 c0                	test   al,al
c0019014:	74 0d                	je     c0019023 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0019016:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001901e:	e9 a6 00 00 00       	jmp    c00190c9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019023:	83 ec 08             	sub    esp,0x8
c0019026:	68 42 a4 03 c0       	push   0xc003a442
c001902b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001902f:	e8 46 78 fe ff       	call   c000087a <strcmp>
c0019034:	83 c4 10             	add    esp,0x10
c0019037:	85 c0                	test   eax,eax
c0019039:	0f 94 c0             	sete   al
c001903c:	84 c0                	test   al,al
c001903e:	74 0a                	je     c001904a <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0019040:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019048:	eb 7f                	jmp    c00190c9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001904a:	83 ec 08             	sub    esp,0x8
c001904d:	68 48 a4 03 c0       	push   0xc003a448
c0019052:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019056:	e8 1f 78 fe ff       	call   c000087a <strcmp>
c001905b:	83 c4 10             	add    esp,0x10
c001905e:	85 c0                	test   eax,eax
c0019060:	0f 94 c0             	sete   al
c0019063:	84 c0                	test   al,al
c0019065:	74 0a                	je     c0019071 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0019067:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001906f:	eb 58                	jmp    c00190c9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019071:	83 ec 08             	sub    esp,0x8
c0019074:	68 cc f7 01 c0       	push   0xc001f7cc
c0019079:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001907d:	e8 f8 77 fe ff       	call   c000087a <strcmp>
c0019082:	83 c4 10             	add    esp,0x10
c0019085:	85 c0                	test   eax,eax
c0019087:	0f 94 c0             	sete   al
c001908a:	84 c0                	test   al,al
c001908c:	74 0a                	je     c0019098 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001908e:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019096:	eb 31                	jmp    c00190c9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019098:	83 ec 08             	sub    esp,0x8
c001909b:	68 4e a4 03 c0       	push   0xc003a44e
c00190a0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00190a4:	e8 d1 77 fe ff       	call   c000087a <strcmp>
c00190a9:	83 c4 10             	add    esp,0x10
c00190ac:	85 c0                	test   eax,eax
c00190ae:	0f 94 c0             	sete   al
c00190b1:	84 c0                	test   al,al
c00190b3:	74 0a                	je     c00190bf <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00190b5:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00190bd:	eb 0a                	jmp    c00190c9 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00190bf:	b8 08 00 00 00       	mov    eax,0x8
c00190c4:	e9 04 01 00 00       	jmp    c00191cd <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00190c9:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00190d0:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00190d5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00190d9:	8b 04 85 80 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3880]
c00190e0:	83 f8 ff             	cmp    eax,0xffffffff
c00190e3:	75 34                	jne    c0019119 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00190e5:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00190e9:	88 c2                	mov    dl,al
c00190eb:	a1 60 c7 03 c0       	mov    eax,ds:0xc003c760
c00190f0:	01 d0                	add    eax,edx
c00190f2:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00190f6:	8b 15 60 c7 03 c0    	mov    edx,DWORD PTR ds:0xc003c760
c00190fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019100:	89 14 85 80 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3880],edx
c0019107:	a1 60 c7 03 c0       	mov    eax,ds:0xc003c760
c001910c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019110:	89 14 85 00 c8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3800],edx
c0019117:	eb 17                	jmp    c0019130 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0019119:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001911d:	88 c2                	mov    dl,al
c001911f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019123:	8b 04 85 80 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3880]
c001912a:	01 d0                	add    eax,edx
c001912c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019130:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019134:	88 04 24             	mov    BYTE PTR [esp],al
c0019137:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001913b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001913f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019147:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001914c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019154:	83 ec 0c             	sub    esp,0xc
c0019157:	68 00 20 00 00       	push   0x2000
c001915c:	e8 9c 43 ff ff       	call   c000d4fd <malloc>
c0019161:	83 c4 10             	add    esp,0x10
c0019164:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019168:	68 00 20 00 00       	push   0x2000
c001916d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019171:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019175:	50                   	push   eax
c0019176:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001917a:	50                   	push   eax
c001917b:	e8 3b e2 fe ff       	call   c00073bb <f_mkfs>
c0019180:	83 c4 10             	add    esp,0x10
c0019183:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019187:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001918c:	75 07                	jne    c0019195 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001918e:	b8 00 00 00 00       	mov    eax,0x0
c0019193:	eb 38                	jmp    c00191cd <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019195:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001919a:	75 17                	jne    c00191b3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001919c:	83 ec 0c             	sub    esp,0xc
c001919f:	68 80 a4 03 c0       	push   0xc003a480
c00191a4:	e8 59 3d ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c00191a9:	83 c4 10             	add    esp,0x10
c00191ac:	b8 09 00 00 00       	mov    eax,0x9
c00191b1:	eb 1a                	jmp    c00191cd <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00191b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00191b7:	83 ec 08             	sub    esp,0x8
c00191ba:	50                   	push   eax
c00191bb:	68 54 a4 03 c0       	push   0xc003a454
c00191c0:	e8 3d 3d ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c00191c5:	83 c4 10             	add    esp,0x10
c00191c8:	b8 01 00 00 00       	mov    eax,0x1
c00191cd:	83 c4 2c             	add    esp,0x2c
c00191d0:	c3                   	ret    
c00191d1:	90                   	nop

c00191d2 <FAT::tryMount(LogicalDisk*, int)>:
c00191d2:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00191d8:	a1 60 c7 03 c0       	mov    eax,ds:0xc003c760
c00191dd:	83 f8 14             	cmp    eax,0x14
c00191e0:	75 17                	jne    c00191f9 <FAT::tryMount(LogicalDisk*, int)+0x27>
c00191e2:	83 ec 0c             	sub    esp,0xc
c00191e5:	68 66 a4 03 c0       	push   0xc003a466
c00191ea:	e8 31 3e ff ff       	call   c000d020 <panic(char const*)>
c00191ef:	83 c4 10             	add    esp,0x10
c00191f2:	b0 00                	mov    al,0x0
c00191f4:	e9 d7 01 00 00       	jmp    c00193d0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00191f9:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0019200:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019206:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001920c:	3d 00 02 00 00       	cmp    eax,0x200
c0019211:	74 07                	je     c001921a <FAT::tryMount(LogicalDisk*, int)+0x48>
c0019213:	b0 00                	mov    al,0x0
c0019215:	e9 b6 01 00 00       	jmp    c00193d0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001921a:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0019222:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0019229:	8b 04 85 80 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3880]
c0019230:	83 f8 ff             	cmp    eax,0xffffffff
c0019233:	74 07                	je     c001923c <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0019235:	b0 01                	mov    al,0x1
c0019237:	e9 94 01 00 00       	jmp    c00193d0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001923c:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0019246:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001924e:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0019255:	88 c2                	mov    dl,al
c0019257:	a1 60 c7 03 c0       	mov    eax,ds:0xc003c760
c001925c:	01 d0                	add    eax,edx
c001925e:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0019265:	8b 15 60 c7 03 c0    	mov    edx,DWORD PTR ds:0xc003c760
c001926b:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0019272:	89 14 85 80 c7 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3880],edx
c0019279:	a1 60 c7 03 c0       	mov    eax,ds:0xc003c760
c001927e:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0019285:	89 14 85 00 c8 03 c0 	mov    DWORD PTR [eax*4-0x3ffc3800],edx
c001928c:	83 ec 0c             	sub    esp,0xc
c001928f:	68 54 02 00 00       	push   0x254
c0019294:	e8 64 42 ff ff       	call   c000d4fd <malloc>
c0019299:	83 c4 10             	add    esp,0x10
c001929c:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c00192a3:	83 ec 04             	sub    esp,0x4
c00192a6:	6a 00                	push   0x0
c00192a8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00192af:	50                   	push   eax
c00192b0:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00192b7:	e8 bd bc fe ff       	call   c0004f79 <f_mount>
c00192bc:	83 c4 10             	add    esp,0x10
c00192bf:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00192c6:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c00192ce:	74 19                	je     c00192e9 <FAT::tryMount(LogicalDisk*, int)+0x117>
c00192d0:	83 ec 0c             	sub    esp,0xc
c00192d3:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00192da:	e8 3e 42 ff ff       	call   c000d51d <rfree>
c00192df:	83 c4 10             	add    esp,0x10
c00192e2:	b0 00                	mov    al,0x0
c00192e4:	e9 e7 00 00 00       	jmp    c00193d0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00192e9:	83 ec 04             	sub    esp,0x4
c00192ec:	68 00 01 00 00       	push   0x100
c00192f1:	6a 00                	push   0x0
c00192f3:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00192fa:	50                   	push   eax
c00192fb:	e8 d8 73 fe ff       	call   c00006d8 <memset>
c0019300:	83 c4 10             	add    esp,0x10
c0019303:	83 ec 08             	sub    esp,0x8
c0019306:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001930d:	50                   	push   eax
c001930e:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019315:	50                   	push   eax
c0019316:	e8 26 76 fe ff       	call   c0000941 <strcat>
c001931b:	83 c4 10             	add    esp,0x10
c001931e:	83 ec 08             	sub    esp,0x8
c0019321:	68 74 a4 03 c0       	push   0xc003a474
c0019326:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001932d:	50                   	push   eax
c001932e:	e8 0e 76 fe ff       	call   c0000941 <strcat>
c0019333:	83 c4 10             	add    esp,0x10
c0019336:	83 ec 04             	sub    esp,0x4
c0019339:	6a 01                	push   0x1
c001933b:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0019342:	50                   	push   eax
c0019343:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019347:	50                   	push   eax
c0019348:	e8 8e bc fe ff       	call   c0004fdb <f_open>
c001934d:	83 c4 10             	add    esp,0x10
c0019350:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019357:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001935e:	85 c0                	test   eax,eax
c0019360:	74 0a                	je     c001936c <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0019362:	78 2d                	js     c0019391 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0019364:	83 e8 04             	sub    eax,0x4
c0019367:	83 f8 01             	cmp    eax,0x1
c001936a:	77 25                	ja     c0019391 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001936c:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0019374:	83 ec 0c             	sub    esp,0xc
c0019377:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001937b:	50                   	push   eax
c001937c:	e8 ac c7 fe ff       	call   c0005b2d <f_close>
c0019381:	83 c4 10             	add    esp,0x10
c0019384:	90                   	nop
c0019385:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001938d:	74 3a                	je     c00193c9 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001938f:	eb 2d                	jmp    c00193be <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0019391:	83 ec 0c             	sub    esp,0xc
c0019394:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001939b:	e8 7d 41 ff ff       	call   c000d51d <rfree>
c00193a0:	83 c4 10             	add    esp,0x10
c00193a3:	83 ec 04             	sub    esp,0x4
c00193a6:	6a 00                	push   0x0
c00193a8:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00193af:	50                   	push   eax
c00193b0:	6a 00                	push   0x0
c00193b2:	e8 c2 bb fe ff       	call   c0004f79 <f_mount>
c00193b7:	83 c4 10             	add    esp,0x10
c00193ba:	b0 00                	mov    al,0x0
c00193bc:	eb 12                	jmp    c00193d0 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00193be:	a1 60 c7 03 c0       	mov    eax,ds:0xc003c760
c00193c3:	40                   	inc    eax
c00193c4:	a3 60 c7 03 c0       	mov    ds:0xc003c760,eax
c00193c9:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c00193d0:	81 c4 6c 03 00 00    	add    esp,0x36c
c00193d6:	c3                   	ret    
c00193d7:	90                   	nop

c00193d8 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00193d8:	81 ec 3c 02 00 00    	sub    esp,0x23c
c00193de:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c00193e6:	74 0a                	je     c00193f2 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c00193e8:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c00193f0:	75 0a                	jne    c00193fc <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c00193f2:	b8 04 00 00 00       	mov    eax,0x4
c00193f7:	e9 dc 00 00 00       	jmp    c00194d8 <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c00193fc:	83 ec 08             	sub    esp,0x8
c00193ff:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019406:	50                   	push   eax
c0019407:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001940e:	e8 24 cd fe ff       	call   c0006137 <f_readdir>
c0019413:	83 c4 10             	add    esp,0x10
c0019416:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001941d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019424:	83 ec 0c             	sub    esp,0xc
c0019427:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001942e:	83 c0 1a             	add    eax,0x1a
c0019431:	50                   	push   eax
c0019432:	e8 ca 72 fe ff       	call   c0000701 <strlen>
c0019437:	83 c4 10             	add    esp,0x10
c001943a:	ba 00 00 00 00       	mov    edx,0x0
c001943f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019443:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0019447:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001944e:	0f b6 c0             	movzx  eax,al
c0019451:	83 e0 10             	and    eax,0x10
c0019454:	74 07                	je     c001945d <FAT::readDir(void*, unsigned long, void*, int*)+0x85>
c0019456:	b8 02 00 00 00       	mov    eax,0x2
c001945b:	eb 05                	jmp    c0019462 <FAT::readDir(void*, unsigned long, void*, int*)+0x8a>
c001945d:	b8 01 00 00 00       	mov    eax,0x1
c0019462:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019466:	83 ec 08             	sub    esp,0x8
c0019469:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019470:	83 c0 1a             	add    eax,0x1a
c0019473:	50                   	push   eax
c0019474:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019478:	83 c0 10             	add    eax,0x10
c001947b:	50                   	push   eax
c001947c:	e8 73 73 fe ff       	call   c00007f4 <strcpy>
c0019481:	83 c4 10             	add    esp,0x10
c0019484:	83 ec 04             	sub    esp,0x4
c0019487:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001948e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019492:	50                   	push   eax
c0019493:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001949a:	e8 c2 71 fe ff       	call   c0000661 <memcpy>
c001949f:	83 c4 10             	add    esp,0x10
c00194a2:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c00194a9:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00194af:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c00194b6:	84 c0                	test   al,al
c00194b8:	75 07                	jne    c00194c1 <FAT::readDir(void*, unsigned long, void*, int*)+0xe9>
c00194ba:	b8 07 00 00 00       	mov    eax,0x7
c00194bf:	eb 17                	jmp    c00194d8 <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c00194c1:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c00194c8:	85 c0                	test   eax,eax
c00194ca:	75 07                	jne    c00194d3 <FAT::readDir(void*, unsigned long, void*, int*)+0xfb>
c00194cc:	b8 00 00 00 00       	mov    eax,0x0
c00194d1:	eb 05                	jmp    c00194d8 <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c00194d3:	b8 01 00 00 00       	mov    eax,0x1
c00194d8:	81 c4 3c 02 00 00    	add    esp,0x23c
c00194de:	c3                   	ret    
c00194df:	90                   	nop

c00194e0 <FAT::read(void*, unsigned long, void*, int*)>:
c00194e0:	83 ec 1c             	sub    esp,0x1c
c00194e3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00194e8:	74 07                	je     c00194f1 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c00194ea:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00194ef:	75 07                	jne    c00194f8 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c00194f1:	b8 04 00 00 00       	mov    eax,0x4
c00194f6:	eb 3d                	jmp    c0019535 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00194f8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00194fc:	50                   	push   eax
c00194fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019501:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019505:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019509:	e8 09 bf fe ff       	call   c0005417 <f_read>
c001950e:	83 c4 10             	add    esp,0x10
c0019511:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019515:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019519:	89 c2                	mov    edx,eax
c001951b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001951f:	89 10                	mov    DWORD PTR [eax],edx
c0019521:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019525:	85 c0                	test   eax,eax
c0019527:	75 07                	jne    c0019530 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0019529:	b8 00 00 00 00       	mov    eax,0x0
c001952e:	eb 05                	jmp    c0019535 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0019530:	b8 01 00 00 00       	mov    eax,0x1
c0019535:	83 c4 1c             	add    esp,0x1c
c0019538:	c3                   	ret    
c0019539:	90                   	nop

c001953a <FAT::write(void*, unsigned long, void*, int*)>:
c001953a:	83 ec 1c             	sub    esp,0x1c
c001953d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019542:	74 07                	je     c001954b <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0019544:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019549:	75 07                	jne    c0019552 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001954b:	b8 04 00 00 00       	mov    eax,0x4
c0019550:	eb 3d                	jmp    c001958f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0019552:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019556:	50                   	push   eax
c0019557:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001955b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001955f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019563:	e8 2f c1 fe ff       	call   c0005697 <f_write>
c0019568:	83 c4 10             	add    esp,0x10
c001956b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001956f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019573:	89 c2                	mov    edx,eax
c0019575:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019579:	89 10                	mov    DWORD PTR [eax],edx
c001957b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001957f:	85 c0                	test   eax,eax
c0019581:	75 07                	jne    c001958a <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0019583:	b8 00 00 00 00       	mov    eax,0x0
c0019588:	eb 05                	jmp    c001958f <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001958a:	b8 01 00 00 00       	mov    eax,0x1
c001958f:	83 c4 1c             	add    esp,0x1c
c0019592:	c3                   	ret    
c0019593:	90                   	nop

c0019594 <FAT::close(void*)>:
c0019594:	83 ec 1c             	sub    esp,0x1c
c0019597:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001959c:	75 07                	jne    c00195a5 <FAT::close(void*)+0x11>
c001959e:	b8 04 00 00 00       	mov    eax,0x4
c00195a3:	eb 36                	jmp    c00195db <FAT::close(void*)+0x47>
c00195a5:	83 ec 0c             	sub    esp,0xc
c00195a8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195ac:	e8 7c c5 fe ff       	call   c0005b2d <f_close>
c00195b1:	83 c4 10             	add    esp,0x10
c00195b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195b8:	83 ec 0c             	sub    esp,0xc
c00195bb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195bf:	e8 49 3f ff ff       	call   c000d50d <free>
c00195c4:	83 c4 10             	add    esp,0x10
c00195c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195cb:	85 c0                	test   eax,eax
c00195cd:	75 07                	jne    c00195d6 <FAT::close(void*)+0x42>
c00195cf:	b8 00 00 00 00       	mov    eax,0x0
c00195d4:	eb 05                	jmp    c00195db <FAT::close(void*)+0x47>
c00195d6:	b8 01 00 00 00       	mov    eax,0x1
c00195db:	83 c4 1c             	add    esp,0x1c
c00195de:	c3                   	ret    
c00195df:	90                   	nop

c00195e0 <FAT::closeDir(void*)>:
c00195e0:	83 ec 1c             	sub    esp,0x1c
c00195e3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00195e8:	75 07                	jne    c00195f1 <FAT::closeDir(void*)+0x11>
c00195ea:	b8 04 00 00 00       	mov    eax,0x4
c00195ef:	eb 36                	jmp    c0019627 <FAT::closeDir(void*)+0x47>
c00195f1:	83 ec 0c             	sub    esp,0xc
c00195f4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00195f8:	e8 18 cb fe ff       	call   c0006115 <f_closedir>
c00195fd:	83 c4 10             	add    esp,0x10
c0019600:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019604:	83 ec 0c             	sub    esp,0xc
c0019607:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001960b:	e8 fd 3e ff ff       	call   c000d50d <free>
c0019610:	83 c4 10             	add    esp,0x10
c0019613:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019617:	85 c0                	test   eax,eax
c0019619:	75 07                	jne    c0019622 <FAT::closeDir(void*)+0x42>
c001961b:	b8 00 00 00 00       	mov    eax,0x0
c0019620:	eb 05                	jmp    c0019627 <FAT::closeDir(void*)+0x47>
c0019622:	b8 01 00 00 00       	mov    eax,0x1
c0019627:	83 c4 1c             	add    esp,0x1c
c001962a:	c3                   	ret    
c001962b:	90                   	nop

c001962c <FAT::seek(void*, unsigned long long)>:
c001962c:	83 ec 2c             	sub    esp,0x2c
c001962f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019633:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019637:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001963b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001963f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0019644:	75 07                	jne    c001964d <FAT::seek(void*, unsigned long long)+0x21>
c0019646:	b8 04 00 00 00       	mov    eax,0x4
c001964b:	eb 2f                	jmp    c001967c <FAT::seek(void*, unsigned long long)+0x50>
c001964d:	83 ec 04             	sub    esp,0x4
c0019650:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019654:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019658:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001965c:	e8 fb c4 fe ff       	call   c0005b5c <f_lseek>
c0019661:	83 c4 10             	add    esp,0x10
c0019664:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019668:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001966c:	85 c0                	test   eax,eax
c001966e:	75 07                	jne    c0019677 <FAT::seek(void*, unsigned long long)+0x4b>
c0019670:	b8 00 00 00 00       	mov    eax,0x0
c0019675:	eb 05                	jmp    c001967c <FAT::seek(void*, unsigned long long)+0x50>
c0019677:	b8 01 00 00 00       	mov    eax,0x1
c001967c:	83 c4 2c             	add    esp,0x2c
c001967f:	c3                   	ret    

c0019680 <fatWrapperReadDisk>:
c0019680:	83 ec 1c             	sub    esp,0x1c
c0019683:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019687:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001968b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001968f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019692:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019696:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001969a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001969f:	8b 04 85 00 c3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3d00]
c00196a6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00196aa:	83 ec 0c             	sub    esp,0xc
c00196ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00196b1:	52                   	push   edx
c00196b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196b6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196ba:	50                   	push   eax
c00196bb:	e8 be bb ff ff       	call   c001527e <LogicalDisk::read(unsigned long long, int, void*)>
c00196c0:	83 c4 20             	add    esp,0x20
c00196c3:	83 c4 1c             	add    esp,0x1c
c00196c6:	c3                   	ret    

c00196c7 <fatWrapperWriteDisk>:
c00196c7:	83 ec 1c             	sub    esp,0x1c
c00196ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00196ce:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00196d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00196d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00196d9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00196dd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00196e1:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00196e6:	8b 04 85 00 c3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3d00]
c00196ed:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00196f1:	83 ec 0c             	sub    esp,0xc
c00196f4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00196f8:	52                   	push   edx
c00196f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00196fd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019701:	50                   	push   eax
c0019702:	e8 e3 bb ff ff       	call   c00152ea <LogicalDisk::write(unsigned long long, int, void*)>
c0019707:	83 c4 20             	add    esp,0x20
c001970a:	83 c4 1c             	add    esp,0x1c
c001970d:	c3                   	ret    

c001970e <fatWrapperIoctl>:
c001970e:	53                   	push   ebx
c001970f:	83 ec 28             	sub    esp,0x28
c0019712:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019716:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001971a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001971e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019722:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0019727:	75 31                	jne    c001975a <fatWrapperIoctl+0x4c>
c0019729:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001972d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019731:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019736:	8b 04 85 00 c3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3d00]
c001973d:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019743:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019749:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001974d:	66 89 02             	mov    WORD PTR [edx],ax
c0019750:	b8 00 00 00 00       	mov    eax,0x0
c0019755:	e9 b2 00 00 00       	jmp    c001980c <fatWrapperIoctl+0xfe>
c001975a:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001975f:	75 6a                	jne    c00197cb <fatWrapperIoctl+0xbd>
c0019761:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019765:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019769:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001976e:	8b 04 85 00 c3 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3d00]
c0019775:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001977b:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019781:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019787:	89 c8                	mov    eax,ecx
c0019789:	89 da                	mov    edx,ebx
c001978b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001978f:	c1 e0 0a             	shl    eax,0xa
c0019792:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019797:	8b 0c 8d 00 c3 03 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffc3d00]
c001979e:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c00197a4:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c00197aa:	89 cb                	mov    ebx,ecx
c00197ac:	c1 fb 1f             	sar    ebx,0x1f
c00197af:	53                   	push   ebx
c00197b0:	51                   	push   ecx
c00197b1:	52                   	push   edx
c00197b2:	50                   	push   eax
c00197b3:	e8 64 4f 00 00       	call   c001e71c <__udivdi3>
c00197b8:	83 c4 10             	add    esp,0x10
c00197bb:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00197bf:	89 01                	mov    DWORD PTR [ecx],eax
c00197c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00197c4:	b8 00 00 00 00       	mov    eax,0x0
c00197c9:	eb 41                	jmp    c001980c <fatWrapperIoctl+0xfe>
c00197cb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00197d0:	75 07                	jne    c00197d9 <fatWrapperIoctl+0xcb>
c00197d2:	b8 00 00 00 00       	mov    eax,0x0
c00197d7:	eb 33                	jmp    c001980c <fatWrapperIoctl+0xfe>
c00197d9:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c00197de:	75 19                	jne    c00197f9 <fatWrapperIoctl+0xeb>
c00197e0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00197e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00197e8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00197ec:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00197f2:	b8 00 00 00 00       	mov    eax,0x0
c00197f7:	eb 13                	jmp    c001980c <fatWrapperIoctl+0xfe>
c00197f9:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c00197fe:	75 07                	jne    c0019807 <fatWrapperIoctl+0xf9>
c0019800:	b8 00 00 00 00       	mov    eax,0x0
c0019805:	eb 05                	jmp    c001980c <fatWrapperIoctl+0xfe>
c0019807:	b8 04 00 00 00       	mov    eax,0x4
c001980c:	83 c4 28             	add    esp,0x28
c001980f:	5b                   	pop    ebx
c0019810:	c3                   	ret    
c0019811:	90                   	nop

c0019812 <FAT::FAT()>:
c0019812:	83 ec 1c             	sub    esp,0x1c
c0019815:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019819:	83 ec 0c             	sub    esp,0xc
c001981c:	50                   	push   eax
c001981d:	e8 94 8e ff ff       	call   c00126b6 <Filesystem::Filesystem()>
c0019822:	83 c4 10             	add    esp,0x10
c0019825:	ba b0 a4 03 c0       	mov    edx,0xc003a4b0
c001982a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001982e:	89 10                	mov    DWORD PTR [eax],edx
c0019830:	c7 05 60 c7 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc003c760,0x0
c001983a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0019842:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0019847:	7f 15                	jg     c001985e <FAT::FAT()+0x4c>
c0019849:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001984d:	c7 04 85 80 c7 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffc3880],0xffffffff
c0019858:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001985c:	eb e4                	jmp    c0019842 <FAT::FAT()+0x30>
c001985e:	90                   	nop
c001985f:	83 c4 1c             	add    esp,0x1c
c0019862:	c3                   	ret    
c0019863:	90                   	nop

c0019864 <FAT::fixFilepath(char*)>:
c0019864:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019868:	8a 00                	mov    al,BYTE PTR [eax]
c001986a:	3c 40                	cmp    al,0x40
c001986c:	7e 2c                	jle    c001989a <FAT::fixFilepath(char*)+0x36>
c001986e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019872:	8a 00                	mov    al,BYTE PTR [eax]
c0019874:	83 e8 41             	sub    eax,0x41
c0019877:	88 c2                	mov    dl,al
c0019879:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001987d:	88 10                	mov    BYTE PTR [eax],dl
c001987f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019883:	8a 00                	mov    al,BYTE PTR [eax]
c0019885:	0f be c0             	movsx  eax,al
c0019888:	8b 04 85 80 c7 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc3880]
c001988f:	83 c0 30             	add    eax,0x30
c0019892:	88 c2                	mov    dl,al
c0019894:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019898:	88 10                	mov    BYTE PTR [eax],dl
c001989a:	90                   	nop
c001989b:	c3                   	ret    

c001989c <FAT::open(char const*, void**, FileOpenMode)>:
c001989c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00198a2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00198aa:	74 0a                	je     c00198b6 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00198ac:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00198b4:	75 0a                	jne    c00198c0 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00198b6:	b8 04 00 00 00       	mov    eax,0x4
c00198bb:	e9 fd 00 00 00       	jmp    c00199bd <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00198c0:	83 ec 08             	sub    esp,0x8
c00198c3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00198ca:	8d 44 24 14          	lea    eax,[esp+0x14]
c00198ce:	50                   	push   eax
c00198cf:	e8 20 6f fe ff       	call   c00007f4 <strcpy>
c00198d4:	83 c4 10             	add    esp,0x10
c00198d7:	83 ec 08             	sub    esp,0x8
c00198da:	8d 44 24 10          	lea    eax,[esp+0x10]
c00198de:	50                   	push   eax
c00198df:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00198e6:	e8 79 ff ff ff       	call   c0019864 <FAT::fixFilepath(char*)>
c00198eb:	83 c4 10             	add    esp,0x10
c00198ee:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00198f6:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00198fd:	83 e0 01             	and    eax,0x1
c0019900:	74 08                	je     c001990a <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0019902:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001990a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019911:	83 e0 04             	and    eax,0x4
c0019914:	74 10                	je     c0019926 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0019916:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001991e:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0019926:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001992d:	83 e0 02             	and    eax,0x2
c0019930:	74 08                	je     c001993a <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0019932:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001993a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019941:	83 e0 08             	and    eax,0x8
c0019944:	74 08                	je     c001994e <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0019946:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001994e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019955:	83 e0 10             	and    eax,0x10
c0019958:	74 08                	je     c0019962 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001995a:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0019962:	83 ec 0c             	sub    esp,0xc
c0019965:	68 50 02 00 00       	push   0x250
c001996a:	e8 8e 3b ff ff       	call   c000d4fd <malloc>
c001996f:	83 c4 10             	add    esp,0x10
c0019972:	89 c2                	mov    edx,eax
c0019974:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001997b:	89 10                	mov    DWORD PTR [eax],edx
c001997d:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0019985:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001998c:	8b 00                	mov    eax,DWORD PTR [eax]
c001998e:	83 ec 04             	sub    esp,0x4
c0019991:	52                   	push   edx
c0019992:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019996:	52                   	push   edx
c0019997:	50                   	push   eax
c0019998:	e8 3e b6 fe ff       	call   c0004fdb <f_open>
c001999d:	83 c4 10             	add    esp,0x10
c00199a0:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c00199a7:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00199af:	74 07                	je     c00199b8 <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00199b1:	b8 01 00 00 00       	mov    eax,0x1
c00199b6:	eb 05                	jmp    c00199bd <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00199b8:	b8 00 00 00 00       	mov    eax,0x0
c00199bd:	81 c4 1c 01 00 00    	add    esp,0x11c
c00199c3:	c3                   	ret    

c00199c4 <FAT::openDir(char const*, void**)>:
c00199c4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00199ca:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00199d2:	74 0a                	je     c00199de <FAT::openDir(char const*, void**)+0x1a>
c00199d4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00199dc:	75 07                	jne    c00199e5 <FAT::openDir(char const*, void**)+0x21>
c00199de:	b8 04 00 00 00       	mov    eax,0x4
c00199e3:	eb 7d                	jmp    c0019a62 <FAT::openDir(char const*, void**)+0x9e>
c00199e5:	83 ec 08             	sub    esp,0x8
c00199e8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199ef:	8d 44 24 18          	lea    eax,[esp+0x18]
c00199f3:	50                   	push   eax
c00199f4:	e8 fb 6d fe ff       	call   c00007f4 <strcpy>
c00199f9:	83 c4 10             	add    esp,0x10
c00199fc:	83 ec 08             	sub    esp,0x8
c00199ff:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019a03:	50                   	push   eax
c0019a04:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a0b:	e8 54 fe ff ff       	call   c0019864 <FAT::fixFilepath(char*)>
c0019a10:	83 c4 10             	add    esp,0x10
c0019a13:	83 ec 0c             	sub    esp,0xc
c0019a16:	6a 4c                	push   0x4c
c0019a18:	e8 e0 3a ff ff       	call   c000d4fd <malloc>
c0019a1d:	83 c4 10             	add    esp,0x10
c0019a20:	89 c2                	mov    edx,eax
c0019a22:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019a29:	89 10                	mov    DWORD PTR [eax],edx
c0019a2b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019a32:	8b 00                	mov    eax,DWORD PTR [eax]
c0019a34:	83 ec 08             	sub    esp,0x8
c0019a37:	8d 54 24 14          	lea    edx,[esp+0x14]
c0019a3b:	52                   	push   edx
c0019a3c:	50                   	push   eax
c0019a3d:	e8 d1 c5 fe ff       	call   c0006013 <f_opendir>
c0019a42:	83 c4 10             	add    esp,0x10
c0019a45:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019a4c:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019a54:	74 07                	je     c0019a5d <FAT::openDir(char const*, void**)+0x99>
c0019a56:	b8 01 00 00 00       	mov    eax,0x1
c0019a5b:	eb 05                	jmp    c0019a62 <FAT::openDir(char const*, void**)+0x9e>
c0019a5d:	b8 00 00 00 00       	mov    eax,0x0
c0019a62:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019a68:	c3                   	ret    
c0019a69:	90                   	nop

c0019a6a <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019a6a:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019a70:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0019a78:	75 0a                	jne    c0019a84 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0019a7a:	b8 04 00 00 00       	mov    eax,0x4
c0019a7f:	e9 c9 00 00 00       	jmp    c0019b4d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019a84:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019a8c:	75 0a                	jne    c0019a98 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0019a8e:	b8 04 00 00 00       	mov    eax,0x4
c0019a93:	e9 b5 00 00 00       	jmp    c0019b4d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019a98:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019aa0:	75 0a                	jne    c0019aac <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0019aa2:	b8 04 00 00 00       	mov    eax,0x4
c0019aa7:	e9 a1 00 00 00       	jmp    c0019b4d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019aac:	83 ec 08             	sub    esp,0x8
c0019aaf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019ab6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019abd:	50                   	push   eax
c0019abe:	e8 31 6d fe ff       	call   c00007f4 <strcpy>
c0019ac3:	83 c4 10             	add    esp,0x10
c0019ac6:	83 ec 08             	sub    esp,0x8
c0019ac9:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019ad0:	50                   	push   eax
c0019ad1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019ad8:	e8 87 fd ff ff       	call   c0019864 <FAT::fixFilepath(char*)>
c0019add:	83 c4 10             	add    esp,0x10
c0019ae0:	83 ec 08             	sub    esp,0x8
c0019ae3:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019ae7:	50                   	push   eax
c0019ae8:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019aef:	50                   	push   eax
c0019af0:	e8 dd c6 fe ff       	call   c00061d2 <f_stat>
c0019af5:	83 c4 10             	add    esp,0x10
c0019af8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019aff:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019b06:	85 c0                	test   eax,eax
c0019b08:	74 07                	je     c0019b11 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0019b0a:	83 f8 04             	cmp    eax,0x4
c0019b0d:	74 32                	je     c0019b41 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0019b0f:	eb 37                	jmp    c0019b48 <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0019b11:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019b15:	0f b6 c0             	movzx  eax,al
c0019b18:	83 e0 10             	and    eax,0x10
c0019b1b:	0f 95 c2             	setne  dl
c0019b1e:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019b25:	88 10                	mov    BYTE PTR [eax],dl
c0019b27:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0019b2a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019b2e:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019b35:	89 01                	mov    DWORD PTR [ecx],eax
c0019b37:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019b3a:	b8 00 00 00 00       	mov    eax,0x0
c0019b3f:	eb 0c                	jmp    c0019b4d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019b41:	b8 02 00 00 00       	mov    eax,0x2
c0019b46:	eb 05                	jmp    c0019b4d <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019b48:	b8 01 00 00 00       	mov    eax,0x1
c0019b4d:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019b53:	c3                   	ret    

c0019b54 <FAT::unlink(char const*)>:
c0019b54:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019b5a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019b62:	75 07                	jne    c0019b6b <FAT::unlink(char const*)+0x17>
c0019b64:	b8 04 00 00 00       	mov    eax,0x4
c0019b69:	eb 5c                	jmp    c0019bc7 <FAT::unlink(char const*)+0x73>
c0019b6b:	83 ec 08             	sub    esp,0x8
c0019b6e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b75:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019b79:	50                   	push   eax
c0019b7a:	e8 75 6c fe ff       	call   c00007f4 <strcpy>
c0019b7f:	83 c4 10             	add    esp,0x10
c0019b82:	83 ec 08             	sub    esp,0x8
c0019b85:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019b89:	50                   	push   eax
c0019b8a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019b91:	e8 ce fc ff ff       	call   c0019864 <FAT::fixFilepath(char*)>
c0019b96:	83 c4 10             	add    esp,0x10
c0019b99:	83 ec 0c             	sub    esp,0xc
c0019b9c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019ba0:	50                   	push   eax
c0019ba1:	e8 7e c9 fe ff       	call   c0006524 <f_unlink>
c0019ba6:	83 c4 10             	add    esp,0x10
c0019ba9:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019bb0:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019bb7:	85 c0                	test   eax,eax
c0019bb9:	75 07                	jne    c0019bc2 <FAT::unlink(char const*)+0x6e>
c0019bbb:	b8 00 00 00 00       	mov    eax,0x0
c0019bc0:	eb 05                	jmp    c0019bc7 <FAT::unlink(char const*)+0x73>
c0019bc2:	b8 01 00 00 00       	mov    eax,0x1
c0019bc7:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019bcd:	c3                   	ret    

c0019bce <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019bce:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019bd4:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019bdb:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019be2:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019be6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019bea:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019bf2:	75 0a                	jne    c0019bfe <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019bf4:	b8 04 00 00 00       	mov    eax,0x4
c0019bf9:	e9 1c 01 00 00       	jmp    c0019d1a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019bfe:	83 ec 08             	sub    esp,0x8
c0019c01:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019c08:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019c0c:	50                   	push   eax
c0019c0d:	e8 e2 6b fe ff       	call   c00007f4 <strcpy>
c0019c12:	83 c4 10             	add    esp,0x10
c0019c15:	83 ec 08             	sub    esp,0x8
c0019c18:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019c1c:	50                   	push   eax
c0019c1d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019c24:	e8 3b fc ff ff       	call   c0019864 <FAT::fixFilepath(char*)>
c0019c29:	83 c4 10             	add    esp,0x10
c0019c2c:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019c34:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019c3c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c41:	83 e0 01             	and    eax,0x1
c0019c44:	74 08                	je     c0019c4e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0019c46:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0019c4e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c53:	83 e0 02             	and    eax,0x2
c0019c56:	74 08                	je     c0019c60 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0019c58:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0019c60:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c65:	83 e0 04             	and    eax,0x4
c0019c68:	74 08                	je     c0019c72 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0019c6a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0019c72:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019c77:	83 e0 08             	and    eax,0x8
c0019c7a:	74 08                	je     c0019c84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0019c7c:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0019c84:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c89:	83 e0 01             	and    eax,0x1
c0019c8c:	74 08                	je     c0019c96 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019c8e:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0019c96:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c9b:	83 e0 02             	and    eax,0x2
c0019c9e:	74 08                	je     c0019ca8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0019ca0:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0019ca8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019cad:	83 e0 04             	and    eax,0x4
c0019cb0:	74 08                	je     c0019cba <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0019cb2:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0019cba:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019cbf:	83 e0 08             	and    eax,0x8
c0019cc2:	74 08                	je     c0019ccc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0019cc4:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0019ccc:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019cd3:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0019cda:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019ce2:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019cea:	83 ec 04             	sub    esp,0x4
c0019ced:	52                   	push   edx
c0019cee:	50                   	push   eax
c0019cef:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019cf3:	50                   	push   eax
c0019cf4:	e8 cd ce fe ff       	call   c0006bc6 <f_chmod>
c0019cf9:	83 c4 10             	add    esp,0x10
c0019cfc:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019d03:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019d0a:	85 c0                	test   eax,eax
c0019d0c:	75 07                	jne    c0019d15 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0019d0e:	b8 00 00 00 00       	mov    eax,0x0
c0019d13:	eb 05                	jmp    c0019d1a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019d15:	b8 01 00 00 00       	mov    eax,0x1
c0019d1a:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019d20:	c3                   	ret    
c0019d21:	90                   	nop

c0019d22 <FAT::rename(char const*, char const*)>:
c0019d22:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019d28:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019d30:	74 0a                	je     c0019d3c <FAT::rename(char const*, char const*)+0x1a>
c0019d32:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019d3a:	75 0a                	jne    c0019d46 <FAT::rename(char const*, char const*)+0x24>
c0019d3c:	b8 04 00 00 00       	mov    eax,0x4
c0019d41:	e9 98 00 00 00       	jmp    c0019dde <FAT::rename(char const*, char const*)+0xbc>
c0019d46:	83 ec 08             	sub    esp,0x8
c0019d49:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019d50:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019d57:	50                   	push   eax
c0019d58:	e8 97 6a fe ff       	call   c00007f4 <strcpy>
c0019d5d:	83 c4 10             	add    esp,0x10
c0019d60:	83 ec 08             	sub    esp,0x8
c0019d63:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019d6a:	50                   	push   eax
c0019d6b:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019d72:	e8 ed fa ff ff       	call   c0019864 <FAT::fixFilepath(char*)>
c0019d77:	83 c4 10             	add    esp,0x10
c0019d7a:	83 ec 08             	sub    esp,0x8
c0019d7d:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019d84:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d88:	50                   	push   eax
c0019d89:	e8 66 6a fe ff       	call   c00007f4 <strcpy>
c0019d8e:	83 c4 10             	add    esp,0x10
c0019d91:	83 ec 08             	sub    esp,0x8
c0019d94:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d98:	50                   	push   eax
c0019d99:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019da0:	e8 bf fa ff ff       	call   c0019864 <FAT::fixFilepath(char*)>
c0019da5:	83 c4 10             	add    esp,0x10
c0019da8:	83 ec 08             	sub    esp,0x8
c0019dab:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019daf:	50                   	push   eax
c0019db0:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019db7:	50                   	push   eax
c0019db8:	e8 16 cb fe ff       	call   c00068d3 <f_rename>
c0019dbd:	83 c4 10             	add    esp,0x10
c0019dc0:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019dc7:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019dce:	85 c0                	test   eax,eax
c0019dd0:	75 07                	jne    c0019dd9 <FAT::rename(char const*, char const*)+0xb7>
c0019dd2:	b8 00 00 00 00       	mov    eax,0x0
c0019dd7:	eb 05                	jmp    c0019dde <FAT::rename(char const*, char const*)+0xbc>
c0019dd9:	b8 01 00 00 00       	mov    eax,0x1
c0019dde:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019de4:	c3                   	ret    
c0019de5:	90                   	nop

c0019de6 <FAT::mkdir(char const*)>:
c0019de6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019dec:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019df4:	75 07                	jne    c0019dfd <FAT::mkdir(char const*)+0x17>
c0019df6:	b8 04 00 00 00       	mov    eax,0x4
c0019dfb:	eb 5c                	jmp    c0019e59 <FAT::mkdir(char const*)+0x73>
c0019dfd:	83 ec 08             	sub    esp,0x8
c0019e00:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e07:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e0b:	50                   	push   eax
c0019e0c:	e8 e3 69 fe ff       	call   c00007f4 <strcpy>
c0019e11:	83 c4 10             	add    esp,0x10
c0019e14:	83 ec 08             	sub    esp,0x8
c0019e17:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019e1b:	50                   	push   eax
c0019e1c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019e23:	e8 3c fa ff ff       	call   c0019864 <FAT::fixFilepath(char*)>
c0019e28:	83 c4 10             	add    esp,0x10
c0019e2b:	83 ec 0c             	sub    esp,0xc
c0019e2e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019e32:	50                   	push   eax
c0019e33:	e8 6f c8 fe ff       	call   c00066a7 <f_mkdir>
c0019e38:	83 c4 10             	add    esp,0x10
c0019e3b:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019e42:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019e49:	85 c0                	test   eax,eax
c0019e4b:	75 07                	jne    c0019e54 <FAT::mkdir(char const*)+0x6e>
c0019e4d:	b8 00 00 00 00       	mov    eax,0x0
c0019e52:	eb 05                	jmp    c0019e59 <FAT::mkdir(char const*)+0x73>
c0019e54:	b8 01 00 00 00       	mov    eax,0x1
c0019e59:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019e5f:	c3                   	ret    

c0019e60 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019e60:	b8 08 00 00 00       	mov    eax,0x8
c0019e65:	c3                   	ret    

c0019e66 <ISO9660::seek(void*, unsigned long long)>:
c0019e66:	53                   	push   ebx
c0019e67:	b8 04 00 00 00       	mov    eax,0x4
c0019e6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019e70:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e74:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019e78:	85 d2                	test   edx,edx
c0019e7a:	74 17                	je     c0019e93 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019e7c:	89 c8                	mov    eax,ecx
c0019e7e:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0019e81:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0019e84:	b8 01 00 00 00       	mov    eax,0x1
c0019e89:	73 08                	jae    c0019e93 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019e8b:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0019e8e:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0019e91:	31 c0                	xor    eax,eax
c0019e93:	5b                   	pop    ebx
c0019e94:	c3                   	ret    
c0019e95:	90                   	nop

c0019e96 <ISO9660::tell(void*, unsigned long long*)>:
c0019e96:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019e9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019e9e:	85 d2                	test   edx,edx
c0019ea0:	74 12                	je     c0019eb4 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019ea2:	85 c0                	test   eax,eax
c0019ea4:	74 0e                	je     c0019eb4 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019ea6:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019ea9:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0019eac:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019eaf:	89 10                	mov    DWORD PTR [eax],edx
c0019eb1:	31 c0                	xor    eax,eax
c0019eb3:	c3                   	ret    
c0019eb4:	b8 04 00 00 00       	mov    eax,0x4
c0019eb9:	c3                   	ret    

c0019eba <ISO9660::getName()>:
c0019eba:	b8 0c a5 03 c0       	mov    eax,0xc003a50c
c0019ebf:	c3                   	ret    

c0019ec0 <ISO9660::stat(void*, unsigned long long*)>:
c0019ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019ec4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019ec8:	85 d2                	test   edx,edx
c0019eca:	74 12                	je     c0019ede <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019ecc:	85 c0                	test   eax,eax
c0019ece:	74 0e                	je     c0019ede <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019ed0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0019ed3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0019ed6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019ed9:	89 10                	mov    DWORD PTR [eax],edx
c0019edb:	31 c0                	xor    eax,eax
c0019edd:	c3                   	ret    
c0019ede:	b8 04 00 00 00       	mov    eax,0x4
c0019ee3:	c3                   	ret    

c0019ee4 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019ee4:	b8 01 00 00 00       	mov    eax,0x1
c0019ee9:	c3                   	ret    

c0019eea <ISO9660::unlink(char const*)>:
c0019eea:	b8 01 00 00 00       	mov    eax,0x1
c0019eef:	c3                   	ret    

c0019ef0 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019ef0:	b8 01 00 00 00       	mov    eax,0x1
c0019ef5:	c3                   	ret    

c0019ef6 <ISO9660::rename(char const*, char const*)>:
c0019ef6:	b8 01 00 00 00       	mov    eax,0x1
c0019efb:	c3                   	ret    

c0019efc <ISO9660::mkdir(char const*)>:
c0019efc:	b8 01 00 00 00       	mov    eax,0x1
c0019f01:	c3                   	ret    

c0019f02 <ISO9660::close(void*)>:
c0019f02:	83 ec 0c             	sub    esp,0xc
c0019f05:	b8 04 00 00 00       	mov    eax,0x4
c0019f0a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019f0e:	85 d2                	test   edx,edx
c0019f10:	74 0e                	je     c0019f20 <ISO9660::close(void*)+0x1e>
c0019f12:	83 ec 0c             	sub    esp,0xc
c0019f15:	52                   	push   edx
c0019f16:	e8 f2 35 ff ff       	call   c000d50d <free>
c0019f1b:	83 c4 10             	add    esp,0x10
c0019f1e:	31 c0                	xor    eax,eax
c0019f20:	83 c4 0c             	add    esp,0xc
c0019f23:	c3                   	ret    

c0019f24 <ISO9660::closeDir(void*)>:
c0019f24:	83 ec 0c             	sub    esp,0xc
c0019f27:	b8 04 00 00 00       	mov    eax,0x4
c0019f2c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019f30:	85 d2                	test   edx,edx
c0019f32:	74 0e                	je     c0019f42 <ISO9660::closeDir(void*)+0x1e>
c0019f34:	83 ec 0c             	sub    esp,0xc
c0019f37:	52                   	push   edx
c0019f38:	e8 d0 35 ff ff       	call   c000d50d <free>
c0019f3d:	83 c4 10             	add    esp,0x10
c0019f40:	31 c0                	xor    eax,eax
c0019f42:	83 c4 0c             	add    esp,0xc
c0019f45:	c3                   	ret    

c0019f46 <ISO9660::~ISO9660()>:
c0019f46:	83 ec 0c             	sub    esp,0xc
c0019f49:	ba 60 a5 03 c0       	mov    edx,0xc003a560
c0019f4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f52:	89 10                	mov    DWORD PTR [eax],edx
c0019f54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f58:	83 ec 0c             	sub    esp,0xc
c0019f5b:	50                   	push   eax
c0019f5c:	e8 79 87 ff ff       	call   c00126da <Filesystem::~Filesystem()>
c0019f61:	83 c4 10             	add    esp,0x10
c0019f64:	90                   	nop
c0019f65:	83 c4 0c             	add    esp,0xc
c0019f68:	c3                   	ret    
c0019f69:	90                   	nop

c0019f6a <ISO9660::~ISO9660()>:
c0019f6a:	83 ec 0c             	sub    esp,0xc
c0019f6d:	83 ec 0c             	sub    esp,0xc
c0019f70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f74:	e8 cd ff ff ff       	call   c0019f46 <ISO9660::~ISO9660()>
c0019f79:	83 c4 10             	add    esp,0x10
c0019f7c:	83 ec 08             	sub    esp,0x8
c0019f7f:	6a 08                	push   0x8
c0019f81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f85:	e8 37 85 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c0019f8a:	83 c4 10             	add    esp,0x10
c0019f8d:	83 c4 0c             	add    esp,0xc
c0019f90:	c3                   	ret    

c0019f91 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0019f91:	55                   	push   ebp
c0019f92:	31 c9                	xor    ecx,ecx
c0019f94:	57                   	push   edi
c0019f95:	56                   	push   esi
c0019f96:	53                   	push   ebx
c0019f97:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0019f9b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019f9f:	89 eb                	mov    ebx,ebp
c0019fa1:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0019fa5:	39 ce                	cmp    esi,ecx
c0019fa7:	7e 17                	jle    c0019fc0 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0019fa9:	31 d2                	xor    edx,edx
c0019fab:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0019faf:	7d 13                	jge    c0019fc4 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0019fb1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019fb5:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0019fb8:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0019fbb:	75 0d                	jne    c0019fca <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0019fbd:	42                   	inc    edx
c0019fbe:	eb eb                	jmp    c0019fab <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0019fc0:	31 c0                	xor    eax,eax
c0019fc2:	eb 0a                	jmp    c0019fce <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0019fc4:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0019fc8:	eb 04                	jmp    c0019fce <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0019fca:	41                   	inc    ecx
c0019fcb:	43                   	inc    ebx
c0019fcc:	eb d7                	jmp    c0019fa5 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0019fce:	5b                   	pop    ebx
c0019fcf:	5e                   	pop    esi
c0019fd0:	5f                   	pop    edi
c0019fd1:	5d                   	pop    ebp
c0019fd2:	c3                   	ret    

c0019fd3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019fd3:	56                   	push   esi
c0019fd4:	53                   	push   ebx
c0019fd5:	52                   	push   edx
c0019fd6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019fda:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019fde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019fe2:	39 0d 60 c8 03 c0    	cmp    DWORD PTR ds:0xc003c860,ecx
c0019fe8:	75 08                	jne    c0019ff2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0019fea:	38 05 c4 b3 03 c0    	cmp    BYTE PTR ds:0xc003b3c4,al
c0019ff0:	74 2b                	je     c001a01d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0019ff2:	83 ec 0c             	sub    esp,0xc
c0019ff5:	a2 c4 b3 03 c0       	mov    ds:0xc003b3c4,al
c0019ffa:	68 80 c8 03 c0       	push   0xc003c880
c0019fff:	0f be c0             	movsx  eax,al
c001a002:	6a 01                	push   0x1
c001a004:	89 0d 60 c8 03 c0    	mov    DWORD PTR ds:0xc003c860,ecx
c001a00a:	31 db                	xor    ebx,ebx
c001a00c:	53                   	push   ebx
c001a00d:	51                   	push   ecx
c001a00e:	ff 34 85 fc c1 03 c0 	push   DWORD PTR [eax*4-0x3ffc3e04]
c001a015:	e8 64 b2 ff ff       	call   c001527e <LogicalDisk::read(unsigned long long, int, void*)>
c001a01a:	83 c4 20             	add    esp,0x20
c001a01d:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001a025:	c7 44 24 14 80 c8 03 c0 	mov    DWORD PTR [esp+0x14],0xc003c880
c001a02d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001a031:	58                   	pop    eax
c001a032:	5b                   	pop    ebx
c001a033:	5e                   	pop    esi
c001a034:	e9 28 66 fe ff       	jmp    c0000661 <memcpy>
c001a039:	90                   	nop

c001a03a <ISO9660::tryMount(LogicalDisk*, int)>:
c001a03a:	81 ec 10 08 00 00    	sub    esp,0x810
c001a040:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001a047:	83 c0 41             	add    eax,0x41
c001a04a:	0f be c0             	movsx  eax,al
c001a04d:	50                   	push   eax
c001a04e:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a052:	50                   	push   eax
c001a053:	6a 10                	push   0x10
c001a055:	e8 79 ff ff ff       	call   c0019fd3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a05a:	83 c4 10             	add    esp,0x10
c001a05d:	31 c0                	xor    eax,eax
c001a05f:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a064:	75 1d                	jne    c001a083 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a066:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a06b:	75 16                	jne    c001a083 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a06d:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a072:	75 0f                	jne    c001a083 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a074:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a079:	75 08                	jne    c001a083 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001a07b:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a080:	0f 94 c0             	sete   al
c001a083:	81 c4 0c 08 00 00    	add    esp,0x80c
c001a089:	c3                   	ret    

c001a08a <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a08a:	55                   	push   ebp
c001a08b:	57                   	push   edi
c001a08c:	56                   	push   esi
c001a08d:	53                   	push   ebx
c001a08e:	81 ec 34 08 00 00    	sub    esp,0x834
c001a094:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001a09b:	55                   	push   ebp
c001a09c:	68 27 a5 03 c0       	push   0xc003a527
c001a0a1:	e8 5c 2e ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001a0a6:	83 c4 10             	add    esp,0x10
c001a0a9:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001a0b1:	0f 84 06 02 00 00    	je     c001a2bd <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a0b7:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001a0bf:	0f 84 f8 01 00 00    	je     c001a2bd <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001a0c5:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a0cc:	b8 01 00 00 00       	mov    eax,0x1
c001a0d1:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001a0d5:	0f 85 e7 01 00 00    	jne    c001a2c2 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a0db:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001a0de:	31 d2                	xor    edx,edx
c001a0e0:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001a0e3:	89 e9                	mov    ecx,ebp
c001a0e5:	89 d3                	mov    ebx,edx
c001a0e7:	01 f1                	add    ecx,esi
c001a0e9:	11 fb                	adc    ebx,edi
c001a0eb:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a0ef:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a0f3:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001a0fa:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001a0fd:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001a100:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001a104:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001a108:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a10c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001a110:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001a114:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001a118:	72 19                	jb     c001a133 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001a11a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a11e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a122:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a126:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a129:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a12d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a131:	eb 13                	jmp    c001a146 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001a133:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a137:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a13b:	29 f0                	sub    eax,esi
c001a13d:	19 fa                	sbb    edx,edi
c001a13f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a142:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a146:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001a14d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001a150:	8b 00                	mov    eax,DWORD PTR [eax]
c001a152:	53                   	push   ebx
c001a153:	0f a4 c2 0b          	shld   edx,eax,0xb
c001a157:	c1 e0 0b             	shl    eax,0xb
c001a15a:	01 c6                	add    esi,eax
c001a15c:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a163:	11 d7                	adc    edi,edx
c001a165:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a169:	89 fa                	mov    edx,edi
c001a16b:	50                   	push   eax
c001a16c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001a170:	50                   	push   eax
c001a171:	89 f0                	mov    eax,esi
c001a173:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a177:	50                   	push   eax
c001a178:	e8 56 fe ff ff       	call   c0019fd3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a17d:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a184:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a188:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001a18b:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001a18f:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001a195:	83 c4 10             	add    esp,0x10
c001a198:	b8 00 08 00 00       	mov    eax,0x800
c001a19d:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001a1a1:	29 d0                	sub    eax,edx
c001a1a3:	39 c1                	cmp    ecx,eax
c001a1a5:	83 db 00             	sbb    ebx,0x0
c001a1a8:	7d 19                	jge    c001a1c3 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001a1aa:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a1af:	75 16                	jne    c001a1c7 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001a1b1:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a1b8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a1be:	e9 f6 00 00 00       	jmp    c001a2b9 <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001a1c3:	89 c5                	mov    ebp,eax
c001a1c5:	eb 03                	jmp    c001a1ca <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001a1c7:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001a1ca:	51                   	push   ecx
c001a1cb:	55                   	push   ebp
c001a1cc:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001a1d0:	50                   	push   eax
c001a1d1:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001a1d8:	e8 84 64 fe ff       	call   c0000661 <memcpy>
c001a1dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a1e1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a1e5:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001a1ec:	01 e8                	add    eax,ebp
c001a1ee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a1f2:	89 e8                	mov    eax,ebp
c001a1f4:	99                   	cdq    
c001a1f5:	01 ee                	add    esi,ebp
c001a1f7:	11 d7                	adc    edi,edx
c001a1f9:	29 e9                	sub    ecx,ebp
c001a1fb:	19 d3                	sbb    ebx,edx
c001a1fd:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a201:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a205:	83 c4 10             	add    esp,0x10
c001a208:	b8 ff 07 00 00       	mov    eax,0x7ff
c001a20d:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001a210:	b8 00 00 00 00       	mov    eax,0x0
c001a215:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a219:	7d 3f                	jge    c001a25a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001a21b:	52                   	push   edx
c001a21c:	89 fa                	mov    edx,edi
c001a21e:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a225:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a229:	50                   	push   eax
c001a22a:	89 f0                	mov    eax,esi
c001a22c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a230:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a234:	50                   	push   eax
c001a235:	e8 99 fd ff ff       	call   c0019fd3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a23a:	81 c6 00 08 00 00    	add    esi,0x800
c001a240:	83 d7 00             	adc    edi,0x0
c001a243:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001a24b:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001a253:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001a258:	eb ab                	jmp    c001a205 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001a25a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a25e:	0b 04 24             	or     eax,DWORD PTR [esp]
c001a261:	74 34                	je     c001a297 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001a263:	89 fa                	mov    edx,edi
c001a265:	50                   	push   eax
c001a266:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a26d:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a271:	50                   	push   eax
c001a272:	89 f0                	mov    eax,esi
c001a274:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a278:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a27c:	55                   	push   ebp
c001a27d:	50                   	push   eax
c001a27e:	e8 50 fd ff ff       	call   c0019fd3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a283:	83 c4 0c             	add    esp,0xc
c001a286:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001a28a:	55                   	push   ebp
c001a28b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a28f:	e8 cd 63 fe ff       	call   c0000661 <memcpy>
c001a294:	83 c4 10             	add    esp,0x10
c001a297:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a29e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a2a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a2a6:	89 38                	mov    DWORD PTR [eax],edi
c001a2a8:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a2af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a2b3:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001a2b6:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001a2b9:	31 c0                	xor    eax,eax
c001a2bb:	eb 05                	jmp    c001a2c2 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a2bd:	b8 04 00 00 00       	mov    eax,0x4
c001a2c2:	81 c4 2c 08 00 00    	add    esp,0x82c
c001a2c8:	5b                   	pop    ebx
c001a2c9:	5e                   	pop    esi
c001a2ca:	5f                   	pop    edi
c001a2cb:	5d                   	pop    ebp
c001a2cc:	c3                   	ret    
c001a2cd:	90                   	nop

c001a2ce <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a2ce:	55                   	push   ebp
c001a2cf:	57                   	push   edi
c001a2d0:	56                   	push   esi
c001a2d1:	53                   	push   ebx
c001a2d2:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001a2d8:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001a2df:	85 f6                	test   esi,esi
c001a2e1:	0f 84 65 02 00 00    	je     c001a54c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27e>
c001a2e7:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001a2ef:	0f 84 57 02 00 00    	je     c001a54c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27e>
c001a2f5:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001a2f8:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001a2fb:	75 0a                	jne    c001a307 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001a2fd:	b8 07 00 00 00       	mov    eax,0x7
c001a302:	e9 4a 02 00 00       	jmp    c001a551 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x283>
c001a307:	50                   	push   eax
c001a308:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a30c:	50                   	push   eax
c001a30d:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a314:	53                   	push   ebx
c001a315:	8b 06                	mov    eax,DWORD PTR [esi]
c001a317:	c1 e0 0b             	shl    eax,0xb
c001a31a:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001a31d:	c1 e8 0b             	shr    eax,0xb
c001a320:	50                   	push   eax
c001a321:	e8 ad fc ff ff       	call   c0019fd3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a326:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a329:	83 c4 10             	add    esp,0x10
c001a32c:	89 c1                	mov    ecx,eax
c001a32e:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001a331:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a337:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001a33a:	84 db                	test   bl,bl
c001a33c:	0f 85 90 00 00 00    	jne    c001a3d2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001a342:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001a348:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a34e:	29 c7                	sub    edi,eax
c001a350:	89 fb                	mov    ebx,edi
c001a352:	c1 fb 1f             	sar    ebx,0x1f
c001a355:	01 f8                	add    eax,edi
c001a357:	11 da                	adc    edx,ebx
c001a359:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a35d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a361:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001a364:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001a367:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a36a:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a36d:	89 04 24             	mov    DWORD PTR [esp],eax
c001a370:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a374:	89 d8                	mov    eax,ebx
c001a376:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001a379:	ba 00 00 00 00       	mov    edx,0x0
c001a37e:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a382:	b8 00 00 00 00       	mov    eax,0x0
c001a387:	73 0b                	jae    c001a394 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a389:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a38c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a390:	29 f8                	sub    eax,edi
c001a392:	19 da                	sbb    edx,ebx
c001a394:	89 d3                	mov    ebx,edx
c001a396:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a399:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a39c:	09 c3                	or     ebx,eax
c001a39e:	0f 84 59 ff ff ff    	je     c001a2fd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001a3a4:	55                   	push   ebp
c001a3a5:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a3a9:	50                   	push   eax
c001a3aa:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a3b1:	53                   	push   ebx
c001a3b2:	8b 06                	mov    eax,DWORD PTR [esi]
c001a3b4:	c1 e0 0b             	shl    eax,0xb
c001a3b7:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001a3bb:	c1 e8 0b             	shr    eax,0xb
c001a3be:	50                   	push   eax
c001a3bf:	e8 0f fc ff ff       	call   c0019fd3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a3c4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a3c7:	83 c4 10             	add    esp,0x10
c001a3ca:	25 ff 07 00 00       	and    eax,0x7ff
c001a3cf:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001a3d2:	57                   	push   edi
c001a3d3:	6a 28                	push   0x28
c001a3d5:	6a 00                	push   0x0
c001a3d7:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a3db:	50                   	push   eax
c001a3dc:	e8 f7 62 fe ff       	call   c00006d8 <memset>
c001a3e1:	31 d2                	xor    edx,edx
c001a3e3:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a3e6:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a3ec:	89 f8                	mov    eax,edi
c001a3ee:	83 c0 21             	add    eax,0x21
c001a3f1:	83 d2 00             	adc    edx,0x0
c001a3f4:	89 c7                	mov    edi,eax
c001a3f6:	89 d5                	mov    ebp,edx
c001a3f8:	83 c4 10             	add    esp,0x10
c001a3fb:	31 c9                	xor    ecx,ecx
c001a3fd:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001a404:	83 f9 28             	cmp    ecx,0x28
c001a407:	88 04 24             	mov    BYTE PTR [esp],al
c001a40a:	0f 94 c2             	sete   dl
c001a40d:	88 d0                	mov    al,dl
c001a40f:	ba ff 07 00 00       	mov    edx,0x7ff
c001a414:	39 fa                	cmp    edx,edi
c001a416:	ba 00 00 00 00       	mov    edx,0x0
c001a41b:	19 ea                	sbb    edx,ebp
c001a41d:	0f 92 c2             	setb   dl
c001a420:	09 c2                	or     edx,eax
c001a422:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001a426:	0f 94 c0             	sete   al
c001a429:	08 d0                	or     al,dl
c001a42b:	75 16                	jne    c001a443 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a42d:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001a431:	74 10                	je     c001a443 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a433:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a436:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001a43a:	41                   	inc    ecx
c001a43b:	83 c7 01             	add    edi,0x1
c001a43e:	83 d5 00             	adc    ebp,0x0
c001a441:	eb ba                	jmp    c001a3fd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001a443:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c001a44b:	83 ec 0c             	sub    esp,0xc
c001a44e:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001a452:	57                   	push   edi
c001a453:	e8 a9 62 fe ff       	call   c0000701 <strlen>
c001a458:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001a460:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a464:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001a46b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a46e:	5a                   	pop    edx
c001a46f:	25 ff 07 00 00       	and    eax,0x7ff
c001a474:	01 c8                	add    eax,ecx
c001a476:	59                   	pop    ecx
c001a477:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001a47d:	83 e0 02             	and    eax,0x2
c001a480:	3c 01                	cmp    al,0x1
c001a482:	19 c0                	sbb    eax,eax
c001a484:	83 c0 02             	add    eax,0x2
c001a487:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a48b:	57                   	push   edi
c001a48c:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001a490:	50                   	push   eax
c001a491:	e8 5e 63 fe ff       	call   c00007f4 <strcpy>
c001a496:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001a49a:	83 c4 10             	add    esp,0x10
c001a49d:	84 c0                	test   al,al
c001a49f:	75 21                	jne    c001a4c2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f4>
c001a4a1:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001a4a9:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a4b1:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a4b9:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001a4c0:	eb 28                	jmp    c001a4ea <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21c>
c001a4c2:	fe c8                	dec    al
c001a4c4:	75 24                	jne    c001a4ea <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21c>
c001a4c6:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001a4ce:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a4d6:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a4de:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001a4e5:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001a4ea:	0f b6 fb             	movzx  edi,bl
c001a4ed:	31 db                	xor    ebx,ebx
c001a4ef:	50                   	push   eax
c001a4f0:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001a4f7:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a4fb:	50                   	push   eax
c001a4fc:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001a503:	e8 59 61 fe ff       	call   c0000661 <memcpy>
c001a508:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001a50f:	89 f9                	mov    ecx,edi
c001a511:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a517:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001a51a:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a51d:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001a520:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a523:	83 c4 10             	add    esp,0x10
c001a526:	39 c7                	cmp    edi,eax
c001a528:	89 df                	mov    edi,ebx
c001a52a:	19 d7                	sbb    edi,edx
c001a52c:	72 10                	jb     c001a53e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x270>
c001a52e:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001a535:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001a53c:	eb 0a                	jmp    c001a548 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27a>
c001a53e:	29 c8                	sub    eax,ecx
c001a540:	19 da                	sbb    edx,ebx
c001a542:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a545:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a548:	31 c0                	xor    eax,eax
c001a54a:	eb 05                	jmp    c001a551 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x283>
c001a54c:	b8 04 00 00 00       	mov    eax,0x4
c001a551:	81 c4 5c 09 00 00    	add    esp,0x95c
c001a557:	5b                   	pop    ebx
c001a558:	5e                   	pop    esi
c001a559:	5f                   	pop    edi
c001a55a:	5d                   	pop    ebp
c001a55b:	c3                   	ret    

c001a55c <readRoot(unsigned int*, unsigned int*, char)>:
c001a55c:	81 ec 40 08 00 00    	sub    esp,0x840
c001a562:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001a56a:	50                   	push   eax
c001a56b:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a56f:	50                   	push   eax
c001a570:	6a 10                	push   0x10
c001a572:	e8 5c fa ff ff       	call   c0019fd3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a577:	83 c4 0c             	add    esp,0xc
c001a57a:	6a 22                	push   0x22
c001a57c:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001a583:	50                   	push   eax
c001a584:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a588:	50                   	push   eax
c001a589:	e8 d3 60 fe ff       	call   c0000661 <memcpy>
c001a58e:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a595:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a599:	89 10                	mov    DWORD PTR [eax],edx
c001a59b:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a5a2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a5a6:	89 10                	mov    DWORD PTR [eax],edx
c001a5a8:	b0 01                	mov    al,0x1
c001a5aa:	81 c4 4c 08 00 00    	add    esp,0x84c
c001a5b0:	c3                   	ret    

c001a5b1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001a5b1:	55                   	push   ebp
c001a5b2:	57                   	push   edi
c001a5b3:	56                   	push   esi
c001a5b4:	53                   	push   ebx
c001a5b5:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a5bb:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a5c2:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001a5c9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a5cd:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001a5d1:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a5d5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a5d9:	75 03                	jne    c001a5de <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a5db:	83 c3 02             	add    ebx,0x2
c001a5de:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001a5e1:	75 03                	jne    c001a5e6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001a5e3:	43                   	inc    ebx
c001a5e4:	eb f8                	jmp    c001a5de <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a5e6:	51                   	push   ecx
c001a5e7:	68 00 01 00 00       	push   0x100
c001a5ec:	6a 00                	push   0x0
c001a5ee:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a5f2:	50                   	push   eax
c001a5f3:	e8 e0 60 fe ff       	call   c00006d8 <memset>
c001a5f8:	83 c4 10             	add    esp,0x10
c001a5fb:	31 d2                	xor    edx,edx
c001a5fd:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a600:	84 c0                	test   al,al
c001a602:	74 21                	je     c001a625 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001a604:	3c 2f                	cmp    al,0x2f
c001a606:	75 0b                	jne    c001a613 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001a608:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001a60c:	bd 01 00 00 00       	mov    ebp,0x1
c001a611:	eb 14                	jmp    c001a627 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001a613:	8d 48 9f             	lea    ecx,[eax-0x61]
c001a616:	80 f9 19             	cmp    cl,0x19
c001a619:	77 03                	ja     c001a61e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a61b:	83 e8 20             	sub    eax,0x20
c001a61e:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001a622:	42                   	inc    edx
c001a623:	eb d8                	jmp    c001a5fd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001a625:	31 ed                	xor    ebp,ebp
c001a627:	83 ec 0c             	sub    esp,0xc
c001a62a:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001a631:	e8 c7 2e ff ff       	call   c000d4fd <malloc>
c001a636:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a63d:	89 c6                	mov    esi,eax
c001a63f:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001a645:	c1 ef 0b             	shr    edi,0xb
c001a648:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001a64f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001a653:	83 c4 10             	add    esp,0x10
c001a656:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001a65b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a65f:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001a666:	74 28                	je     c001a690 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001a668:	52                   	push   edx
c001a669:	57                   	push   edi
c001a66a:	50                   	push   eax
c001a66b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a66f:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a676:	e8 58 f9 ff ff       	call   c0019fd3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a67b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a67f:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001a686:	05 00 08 00 00       	add    eax,0x800
c001a68b:	83 c4 10             	add    esp,0x10
c001a68e:	eb cb                	jmp    c001a65b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001a690:	83 ec 0c             	sub    esp,0xc
c001a693:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a697:	57                   	push   edi
c001a698:	e8 64 60 fe ff       	call   c0000701 <strlen>
c001a69d:	50                   	push   eax
c001a69e:	57                   	push   edi
c001a69f:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001a6a6:	56                   	push   esi
c001a6a7:	e8 e5 f8 ff ff       	call   c0019f91 <__memmem(unsigned char*, int, unsigned char*, int)>
c001a6ac:	83 c4 20             	add    esp,0x20
c001a6af:	85 c0                	test   eax,eax
c001a6b1:	75 13                	jne    c001a6c6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001a6b3:	83 ec 0c             	sub    esp,0xc
c001a6b6:	56                   	push   esi
c001a6b7:	e8 51 2e ff ff       	call   c000d50d <free>
c001a6bc:	83 c4 10             	add    esp,0x10
c001a6bf:	31 c0                	xor    eax,eax
c001a6c1:	e9 b3 00 00 00       	jmp    c001a779 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a6c6:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001a6ca:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001a6ce:	c1 e7 08             	shl    edi,0x8
c001a6d1:	c1 e2 10             	shl    edx,0x10
c001a6d4:	09 d7                	or     edi,edx
c001a6d6:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001a6da:	09 d7                	or     edi,edx
c001a6dc:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001a6e0:	c1 e2 18             	shl    edx,0x18
c001a6e3:	09 d7                	or     edi,edx
c001a6e5:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001a6e9:	89 d1                	mov    ecx,edx
c001a6eb:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001a6ef:	c1 e1 08             	shl    ecx,0x8
c001a6f2:	c1 e2 10             	shl    edx,0x10
c001a6f5:	09 ca                	or     edx,ecx
c001a6f7:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001a6fb:	09 ca                	or     edx,ecx
c001a6fd:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001a701:	c1 e1 18             	shl    ecx,0x18
c001a704:	09 ca                	or     edx,ecx
c001a706:	89 e9                	mov    ecx,ebp
c001a708:	84 c9                	test   cl,cl
c001a70a:	74 3c                	je     c001a748 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001a70c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a710:	83 ec 0c             	sub    esp,0xc
c001a713:	56                   	push   esi
c001a714:	e8 f4 2d ff ff       	call   c000d50d <free>
c001a719:	83 c4 0c             	add    esp,0xc
c001a71c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a723:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a728:	50                   	push   eax
c001a729:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a730:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a737:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a73b:	52                   	push   edx
c001a73c:	57                   	push   edi
c001a73d:	53                   	push   ebx
c001a73e:	e8 6e fe ff ff       	call   c001a5b1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a743:	83 c4 20             	add    esp,0x20
c001a746:	eb 31                	jmp    c001a779 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a748:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001a74b:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001a752:	d0 e8                	shr    al,1
c001a754:	89 3b                	mov    DWORD PTR [ebx],edi
c001a756:	83 e0 01             	and    eax,0x1
c001a759:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a760:	83 ec 0c             	sub    esp,0xc
c001a763:	89 13                	mov    DWORD PTR [ebx],edx
c001a765:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001a76c:	89 03                	mov    DWORD PTR [ebx],eax
c001a76e:	56                   	push   esi
c001a76f:	e8 99 2d ff ff       	call   c000d50d <free>
c001a774:	83 c4 10             	add    esp,0x10
c001a777:	b0 01                	mov    al,0x1
c001a779:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a77f:	5b                   	pop    ebx
c001a780:	5e                   	pop    esi
c001a781:	5f                   	pop    edi
c001a782:	5d                   	pop    ebp
c001a783:	c3                   	ret    

c001a784 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001a784:	55                   	push   ebp
c001a785:	57                   	push   edi
c001a786:	56                   	push   esi
c001a787:	53                   	push   ebx
c001a788:	83 ec 20             	sub    esp,0x20
c001a78b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a78f:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001a793:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a797:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a79f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001a7a7:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001a7ac:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001a7b2:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001a7b8:	57                   	push   edi
c001a7b9:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a7bd:	50                   	push   eax
c001a7be:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a7c2:	50                   	push   eax
c001a7c3:	e8 94 fd ff ff       	call   c001a55c <readRoot(unsigned int*, unsigned int*, char)>
c001a7c8:	5a                   	pop    edx
c001a7c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a7cd:	e8 2f 5f fe ff       	call   c0000701 <strlen>
c001a7d2:	83 c4 10             	add    esp,0x10
c001a7d5:	83 f8 03             	cmp    eax,0x3
c001a7d8:	77 17                	ja     c001a7f1 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a7da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a7de:	89 03                	mov    DWORD PTR [ebx],eax
c001a7e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a7e4:	89 06                	mov    DWORD PTR [esi],eax
c001a7e6:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001a7ed:	b0 01                	mov    al,0x1
c001a7ef:	eb 19                	jmp    c001a80a <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001a7f1:	50                   	push   eax
c001a7f2:	55                   	push   ebp
c001a7f3:	57                   	push   edi
c001a7f4:	56                   	push   esi
c001a7f5:	53                   	push   ebx
c001a7f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a7fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a7fe:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a802:	e8 aa fd ff ff       	call   c001a5b1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a807:	83 c4 20             	add    esp,0x20
c001a80a:	83 c4 1c             	add    esp,0x1c
c001a80d:	5b                   	pop    ebx
c001a80e:	5e                   	pop    esi
c001a80f:	5f                   	pop    edi
c001a810:	5d                   	pop    ebp
c001a811:	c3                   	ret    

c001a812 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a812:	57                   	push   edi
c001a813:	56                   	push   esi
c001a814:	53                   	push   ebx
c001a815:	83 ec 10             	sub    esp,0x10
c001a818:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a81c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a820:	85 ff                	test   edi,edi
c001a822:	74 7b                	je     c001a89f <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a824:	85 f6                	test   esi,esi
c001a826:	74 77                	je     c001a89f <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a828:	83 ec 0c             	sub    esp,0xc
c001a82b:	6a 1c                	push   0x1c
c001a82d:	e8 cb 2c ff ff       	call   c000d4fd <malloc>
c001a832:	89 07                	mov    DWORD PTR [edi],eax
c001a834:	89 c3                	mov    ebx,eax
c001a836:	58                   	pop    eax
c001a837:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a83b:	50                   	push   eax
c001a83c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a83f:	50                   	push   eax
c001a840:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a844:	50                   	push   eax
c001a845:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a849:	50                   	push   eax
c001a84a:	56                   	push   esi
c001a84b:	e8 34 ff ff ff       	call   c001a784 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a850:	83 c4 20             	add    esp,0x20
c001a853:	84 c0                	test   al,al
c001a855:	74 07                	je     c001a85e <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001a857:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a85c:	74 0b                	je     c001a869 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a85e:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a862:	b8 01 00 00 00       	mov    eax,0x1
c001a867:	eb 3b                	jmp    c001a8a4 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a869:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a86d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a871:	89 03                	mov    DWORD PTR [ebx],eax
c001a873:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a87a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a87e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a885:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a88c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a88f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a896:	8a 06                	mov    al,BYTE PTR [esi]
c001a898:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a89b:	31 c0                	xor    eax,eax
c001a89d:	eb 05                	jmp    c001a8a4 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a89f:	b8 04 00 00 00       	mov    eax,0x4
c001a8a4:	83 c4 10             	add    esp,0x10
c001a8a7:	5b                   	pop    ebx
c001a8a8:	5e                   	pop    esi
c001a8a9:	5f                   	pop    edi
c001a8aa:	c3                   	ret    
c001a8ab:	90                   	nop

c001a8ac <ISO9660::exists(char const*)>:
c001a8ac:	83 ec 28             	sub    esp,0x28
c001a8af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a8b3:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a8b7:	52                   	push   edx
c001a8b8:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001a8bb:	52                   	push   edx
c001a8bc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a8c0:	52                   	push   edx
c001a8c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a8c5:	52                   	push   edx
c001a8c6:	50                   	push   eax
c001a8c7:	e8 b8 fe ff ff       	call   c001a784 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a8cc:	83 c4 3c             	add    esp,0x3c
c001a8cf:	c3                   	ret    

c001a8d0 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a8d0:	56                   	push   esi
c001a8d1:	53                   	push   ebx
c001a8d2:	83 ec 14             	sub    esp,0x14
c001a8d5:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a8d9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a8dd:	85 db                	test   ebx,ebx
c001a8df:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001a8e3:	0f 94 c2             	sete   dl
c001a8e6:	85 f6                	test   esi,esi
c001a8e8:	0f 94 c0             	sete   al
c001a8eb:	08 c2                	or     dl,al
c001a8ed:	75 68                	jne    c001a957 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a8ef:	85 c9                	test   ecx,ecx
c001a8f1:	74 64                	je     c001a957 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a8f3:	83 ec 0c             	sub    esp,0xc
c001a8f6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a8f9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a8fd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a903:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a90a:	50                   	push   eax
c001a90b:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001a90e:	50                   	push   eax
c001a90f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a913:	50                   	push   eax
c001a914:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a918:	50                   	push   eax
c001a919:	51                   	push   ecx
c001a91a:	e8 65 fe ff ff       	call   c001a784 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a91f:	83 c4 20             	add    esp,0x20
c001a922:	ba 01 00 00 00       	mov    edx,0x1
c001a927:	84 c0                	test   al,al
c001a929:	74 31                	je     c001a95c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a92b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a92f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a936:	89 03                	mov    DWORD PTR [ebx],eax
c001a938:	ba 00 00 00 00       	mov    edx,0x0
c001a93d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a941:	85 c0                	test   eax,eax
c001a943:	0f 95 06             	setne  BYTE PTR [esi]
c001a946:	74 14                	je     c001a95c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a948:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a94e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a955:	eb 05                	jmp    c001a95c <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a957:	ba 04 00 00 00       	mov    edx,0x4
c001a95c:	83 c4 14             	add    esp,0x14
c001a95f:	89 d0                	mov    eax,edx
c001a961:	5b                   	pop    ebx
c001a962:	5e                   	pop    esi
c001a963:	c3                   	ret    

c001a964 <ISO9660::openDir(char const*, void**)>:
c001a964:	57                   	push   edi
c001a965:	56                   	push   esi
c001a966:	53                   	push   ebx
c001a967:	83 ec 10             	sub    esp,0x10
c001a96a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a96e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a972:	85 ff                	test   edi,edi
c001a974:	0f 84 95 00 00 00    	je     c001aa0f <ISO9660::openDir(char const*, void**)+0xab>
c001a97a:	85 f6                	test   esi,esi
c001a97c:	0f 84 8d 00 00 00    	je     c001aa0f <ISO9660::openDir(char const*, void**)+0xab>
c001a982:	83 ec 0c             	sub    esp,0xc
c001a985:	6a 1c                	push   0x1c
c001a987:	e8 71 2b ff ff       	call   c000d4fd <malloc>
c001a98c:	89 07                	mov    DWORD PTR [edi],eax
c001a98e:	89 c3                	mov    ebx,eax
c001a990:	59                   	pop    ecx
c001a991:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a995:	50                   	push   eax
c001a996:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a999:	50                   	push   eax
c001a99a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a99e:	50                   	push   eax
c001a99f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a9a3:	50                   	push   eax
c001a9a4:	56                   	push   esi
c001a9a5:	e8 da fd ff ff       	call   c001a784 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a9aa:	83 c4 20             	add    esp,0x20
c001a9ad:	84 c0                	test   al,al
c001a9af:	74 07                	je     c001a9b8 <ISO9660::openDir(char const*, void**)+0x54>
c001a9b1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a9b6:	75 21                	jne    c001a9d9 <ISO9660::openDir(char const*, void**)+0x75>
c001a9b8:	0f b6 c0             	movzx  eax,al
c001a9bb:	52                   	push   edx
c001a9bc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a9c0:	50                   	push   eax
c001a9c1:	68 3a a5 03 c0       	push   0xc003a53a
c001a9c6:	e8 37 25 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001a9cb:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a9cf:	83 c4 10             	add    esp,0x10
c001a9d2:	b8 01 00 00 00       	mov    eax,0x1
c001a9d7:	eb 3b                	jmp    c001aa14 <ISO9660::openDir(char const*, void**)+0xb0>
c001a9d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9dd:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a9e1:	89 03                	mov    DWORD PTR [ebx],eax
c001a9e3:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a9ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9ee:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a9f5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a9fc:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a9ff:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001aa06:	8a 06                	mov    al,BYTE PTR [esi]
c001aa08:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001aa0b:	31 c0                	xor    eax,eax
c001aa0d:	eb 05                	jmp    c001aa14 <ISO9660::openDir(char const*, void**)+0xb0>
c001aa0f:	b8 04 00 00 00       	mov    eax,0x4
c001aa14:	83 c4 10             	add    esp,0x10
c001aa17:	5b                   	pop    ebx
c001aa18:	5e                   	pop    esi
c001aa19:	5f                   	pop    edi
c001aa1a:	c3                   	ret    
c001aa1b:	90                   	nop

c001aa1c <ISO9660::ISO9660()>:
c001aa1c:	83 ec 0c             	sub    esp,0xc
c001aa1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa23:	83 ec 0c             	sub    esp,0xc
c001aa26:	50                   	push   eax
c001aa27:	e8 8a 7c ff ff       	call   c00126b6 <Filesystem::Filesystem()>
c001aa2c:	83 c4 10             	add    esp,0x10
c001aa2f:	ba 60 a5 03 c0       	mov    edx,0xc003a560
c001aa34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa38:	89 10                	mov    DWORD PTR [eax],edx
c001aa3a:	90                   	nop
c001aa3b:	83 c4 0c             	add    esp,0xc
c001aa3e:	c3                   	ret    
c001aa3f:	90                   	nop

c001aa40 <SoundChannel::~SoundChannel()>:
c001aa40:	83 ec 0c             	sub    esp,0xc
c001aa43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa47:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001aa4a:	83 ec 0c             	sub    esp,0xc
c001aa4d:	50                   	push   eax
c001aa4e:	e8 ba 2a ff ff       	call   c000d50d <free>
c001aa53:	83 c4 10             	add    esp,0x10
c001aa56:	90                   	nop
c001aa57:	83 c4 0c             	add    esp,0xc
c001aa5a:	c3                   	ret    
c001aa5b:	90                   	nop

c001aa5c <SoundChannel::setSpeed(float)>:
c001aa5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa60:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001aa64:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001aa67:	c3                   	ret    

c001aa68 <SoundChannel::getSpeed()>:
c001aa68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa6c:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001aa6f:	c3                   	ret    

c001aa70 <SoundChannel::setVolume(int)>:
c001aa70:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa74:	83 f8 64             	cmp    eax,0x64
c001aa77:	7e 05                	jle    c001aa7e <SoundChannel::setVolume(int)+0xe>
c001aa79:	b8 64 00 00 00       	mov    eax,0x64
c001aa7e:	85 c0                	test   eax,eax
c001aa80:	79 02                	jns    c001aa84 <SoundChannel::setVolume(int)+0x14>
c001aa82:	31 c0                	xor    eax,eax
c001aa84:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001aa88:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001aa8b:	c3                   	ret    

c001aa8c <SoundChannel::getVolume()>:
c001aa8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa90:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001aa93:	c3                   	ret    

c001aa94 <SoundChannel::pause()>:
c001aa94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa98:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001aa9c:	c3                   	ret    
c001aa9d:	90                   	nop

c001aa9e <SoundChannel::SoundChannel(int, int, int, int)>:
c001aa9e:	83 ec 1c             	sub    esp,0x1c
c001aaa1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001aaa5:	e8 ea ff ff ff       	call   c001aa94 <SoundChannel::pause()>
c001aaaa:	83 c4 04             	add    esp,0x4
c001aaad:	6a 50                	push   0x50
c001aaaf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001aab3:	e8 b8 ff ff ff       	call   c001aa70 <SoundChannel::setVolume(int)>
c001aab8:	83 c4 08             	add    esp,0x8
c001aabb:	d9 e8                	fld1   
c001aabd:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001aac1:	d9 1c 24             	fstp   DWORD PTR [esp]
c001aac4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001aac8:	e8 8f ff ff ff       	call   c001aa5c <SoundChannel::setSpeed(float)>
c001aacd:	83 c4 08             	add    esp,0x8
c001aad0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aad4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001aad8:	89 10                	mov    DWORD PTR [eax],edx
c001aada:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aade:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001aae2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001aae5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aae9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001aaed:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001aaf0:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001aaf5:	75 23                	jne    c001ab1a <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001aaf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aafb:	8b 10                	mov    edx,DWORD PTR [eax]
c001aafd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab01:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ab04:	0f af c2             	imul   eax,edx
c001ab07:	85 c0                	test   eax,eax
c001ab09:	79 03                	jns    c001ab0e <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001ab0b:	83 c0 03             	add    eax,0x3
c001ab0e:	c1 f8 02             	sar    eax,0x2
c001ab11:	05 a0 0f 00 00       	add    eax,0xfa0
c001ab16:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ab1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab1e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ab22:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001ab25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab29:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001ab30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab34:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001ab3b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab3f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ab42:	c1 e0 02             	shl    eax,0x2
c001ab45:	83 ec 0c             	sub    esp,0xc
c001ab48:	50                   	push   eax
c001ab49:	e8 af 29 ff ff       	call   c000d4fd <malloc>
c001ab4e:	83 c4 10             	add    esp,0x10
c001ab51:	89 c2                	mov    edx,eax
c001ab53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab57:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001ab5a:	83 ec 04             	sub    esp,0x4
c001ab5d:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ab61:	50                   	push   eax
c001ab62:	6a 01                	push   0x1
c001ab64:	6a 04                	push   0x4
c001ab66:	e8 fd df fe ff       	call   c0008b68 <src_new>
c001ab6b:	83 c4 10             	add    esp,0x10
c001ab6e:	89 c2                	mov    edx,eax
c001ab70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab74:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001ab77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ab7b:	85 c0                	test   eax,eax
c001ab7d:	74 10                	je     c001ab8f <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001ab7f:	83 ec 0c             	sub    esp,0xc
c001ab82:	68 bc a5 03 c0       	push   0xc003a5bc
c001ab87:	e8 94 24 ff ff       	call   c000d020 <panic(char const*)>
c001ab8c:	83 c4 10             	add    esp,0x10
c001ab8f:	90                   	nop
c001ab90:	83 c4 1c             	add    esp,0x1c
c001ab93:	c3                   	ret    

c001ab94 <SoundChannel::play()>:
c001ab94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab98:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001ab9c:	c3                   	ret    
c001ab9d:	90                   	nop

c001ab9e <SoundChannel::paused()>:
c001ab9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aba2:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001aba5:	c3                   	ret    

c001aba6 <SoundChannel::getSampleRate()>:
c001aba6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abaa:	8b 00                	mov    eax,DWORD PTR [eax]
c001abac:	c3                   	ret    
c001abad:	90                   	nop

c001abae <SoundChannel::getBits()>:
c001abae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001abb5:	c3                   	ret    

c001abb6 <SoundChannel::getBufferUsed()>:
c001abb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abba:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001abbd:	c3                   	ret    

c001abbe <SoundChannel::getBufferSize()>:
c001abbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abc2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001abc5:	c3                   	ret    

c001abc6 <SoundChannel::unbuffer(float*, int, int)>:
c001abc6:	53                   	push   ebx
c001abc7:	83 ec 40             	sub    esp,0x40
c001abca:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001abce:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001abd6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001abd9:	db 03                	fild   DWORD PTR [ebx]
c001abdb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001abdf:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001abe3:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001abe6:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001abe9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001abed:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001abf1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001abf5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001abf9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001abfd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ac01:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ac05:	50                   	push   eax
c001ac06:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001ac09:	e8 14 dc fe ff       	call   c0008822 <src_process>
c001ac0e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ac12:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001ac15:	83 c4 0c             	add    esp,0xc
c001ac18:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ac1b:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001ac1e:	29 d0                	sub    eax,edx
c001ac20:	c1 e0 02             	shl    eax,0x2
c001ac23:	50                   	push   eax
c001ac24:	8d 04 91             	lea    eax,[ecx+edx*4]
c001ac27:	50                   	push   eax
c001ac28:	51                   	push   ecx
c001ac29:	e8 c6 59 fe ff       	call   c00005f4 <memmove>
c001ac2e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ac32:	83 c4 48             	add    esp,0x48
c001ac35:	5b                   	pop    ebx
c001ac36:	c3                   	ret    
c001ac37:	90                   	nop

c001ac38 <SoundChannel::buffer8(unsigned char*, int)>:
c001ac38:	53                   	push   ebx
c001ac39:	31 c0                	xor    eax,eax
c001ac3b:	83 ec 08             	sub    esp,0x8
c001ac3e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac42:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001ac45:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001ac48:	74 35                	je     c001ac7f <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001ac4a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001ac4e:	7d 2f                	jge    c001ac7f <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001ac50:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ac54:	d9 05 d8 a5 03 c0    	fld    DWORD PTR ds:0xc003a5d8
c001ac5a:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001ac5e:	40                   	inc    eax
c001ac5f:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001ac64:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001ac67:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001ac6b:	8d 59 01             	lea    ebx,[ecx+0x1]
c001ac6e:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001ac71:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001ac74:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001ac77:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ac7a:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001ac7d:	eb c9                	jmp    c001ac48 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001ac7f:	83 c4 08             	add    esp,0x8
c001ac82:	5b                   	pop    ebx
c001ac83:	c3                   	ret    

c001ac84 <SoundDevice::SoundDevice(char const*)>:
c001ac84:	83 ec 1c             	sub    esp,0x1c
c001ac87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac8b:	83 ec 08             	sub    esp,0x8
c001ac8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac92:	50                   	push   eax
c001ac93:	e8 14 8d ff ff       	call   c00139ac <Device::Device(char const*)>
c001ac98:	83 c4 10             	add    esp,0x10
c001ac9b:	ba e4 a5 03 c0       	mov    edx,0xc003a5e4
c001aca0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aca4:	89 10                	mov    DWORD PTR [eax],edx
c001aca6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acaa:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001acb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acb8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001acc2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001acca:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001accf:	7f 19                	jg     c001acea <SoundDevice::SoundDevice(char const*)+0x66>
c001acd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001acd9:	83 c2 54             	add    edx,0x54
c001acdc:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001ace4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ace8:	eb e0                	jmp    c001acca <SoundDevice::SoundDevice(char const*)+0x46>
c001acea:	90                   	nop
c001aceb:	83 c4 1c             	add    esp,0x1c
c001acee:	c3                   	ret    
c001acef:	90                   	nop

c001acf0 <SoundDevice::~SoundDevice()>:
c001acf0:	53                   	push   ebx
c001acf1:	83 ec 18             	sub    esp,0x18
c001acf4:	ba e4 a5 03 c0       	mov    edx,0xc003a5e4
c001acf9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001acfd:	89 10                	mov    DWORD PTR [eax],edx
c001acff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ad07:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ad0c:	7f 46                	jg     c001ad54 <SoundDevice::~SoundDevice()+0x64>
c001ad0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ad16:	83 c2 54             	add    edx,0x54
c001ad19:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001ad1d:	85 c0                	test   eax,eax
c001ad1f:	74 2d                	je     c001ad4e <SoundDevice::~SoundDevice()+0x5e>
c001ad21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad25:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ad29:	83 c2 54             	add    edx,0x54
c001ad2c:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001ad30:	85 db                	test   ebx,ebx
c001ad32:	74 1a                	je     c001ad4e <SoundDevice::~SoundDevice()+0x5e>
c001ad34:	83 ec 0c             	sub    esp,0xc
c001ad37:	53                   	push   ebx
c001ad38:	e8 03 fd ff ff       	call   c001aa40 <SoundChannel::~SoundChannel()>
c001ad3d:	83 c4 10             	add    esp,0x10
c001ad40:	83 ec 08             	sub    esp,0x8
c001ad43:	6a 2c                	push   0x2c
c001ad45:	53                   	push   ebx
c001ad46:	e8 76 77 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c001ad4b:	83 c4 10             	add    esp,0x10
c001ad4e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ad52:	eb b3                	jmp    c001ad07 <SoundDevice::~SoundDevice()+0x17>
c001ad54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad58:	83 ec 0c             	sub    esp,0xc
c001ad5b:	50                   	push   eax
c001ad5c:	e8 fd 88 ff ff       	call   c001365e <Device::~Device()>
c001ad61:	83 c4 10             	add    esp,0x10
c001ad64:	90                   	nop
c001ad65:	83 c4 18             	add    esp,0x18
c001ad68:	5b                   	pop    ebx
c001ad69:	c3                   	ret    

c001ad6a <SoundDevice::~SoundDevice()>:
c001ad6a:	83 ec 0c             	sub    esp,0xc
c001ad6d:	83 ec 0c             	sub    esp,0xc
c001ad70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad74:	e8 77 ff ff ff       	call   c001acf0 <SoundDevice::~SoundDevice()>
c001ad79:	83 c4 10             	add    esp,0x10
c001ad7c:	83 ec 08             	sub    esp,0x8
c001ad7f:	68 e4 01 00 00       	push   0x1e4
c001ad84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad88:	e8 34 77 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c001ad8d:	83 c4 10             	add    esp,0x10
c001ad90:	83 c4 0c             	add    esp,0xc
c001ad93:	c3                   	ret    

c001ad94 <SoundDevice::getFreeChannelNum()>:
c001ad94:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ad98:	31 c0                	xor    eax,eax
c001ad9a:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001ada2:	74 09                	je     c001adad <SoundDevice::getFreeChannelNum()+0x19>
c001ada4:	40                   	inc    eax
c001ada5:	83 f8 20             	cmp    eax,0x20
c001ada8:	75 f0                	jne    c001ad9a <SoundDevice::getFreeChannelNum()+0x6>
c001adaa:	83 c8 ff             	or     eax,0xffffffff
c001adad:	c3                   	ret    

c001adae <SoundDevice::addChannel(SoundChannel*)>:
c001adae:	56                   	push   esi
c001adaf:	53                   	push   ebx
c001adb0:	51                   	push   ecx
c001adb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001adb5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001adb9:	53                   	push   ebx
c001adba:	e8 d5 ff ff ff       	call   c001ad94 <SoundDevice::getFreeChannelNum()>
c001adbf:	5a                   	pop    edx
c001adc0:	83 f8 ff             	cmp    eax,0xffffffff
c001adc3:	74 51                	je     c001ae16 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001adc5:	85 f6                	test   esi,esi
c001adc7:	74 4d                	je     c001ae16 <SoundDevice::addChannel(SoundChannel*)+0x68>
c001adc9:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001add0:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001add7:	75 30                	jne    c001ae09 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001add9:	83 ec 0c             	sub    esp,0xc
c001addc:	56                   	push   esi
c001addd:	e8 c4 fd ff ff       	call   c001aba6 <SoundChannel::getSampleRate()>
c001ade2:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001ade8:	89 34 24             	mov    DWORD PTR [esp],esi
c001adeb:	e8 be fd ff ff       	call   c001abae <SoundChannel::getBits()>
c001adf0:	83 c4 0c             	add    esp,0xc
c001adf3:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001adf9:	8b 13                	mov    edx,DWORD PTR [ebx]
c001adfb:	50                   	push   eax
c001adfc:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001ae02:	53                   	push   ebx
c001ae03:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001ae06:	83 c4 10             	add    esp,0x10
c001ae09:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001ae0f:	b8 01 00 00 00       	mov    eax,0x1
c001ae14:	eb 03                	jmp    c001ae19 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001ae16:	83 c8 ff             	or     eax,0xffffffff
c001ae19:	5a                   	pop    edx
c001ae1a:	5b                   	pop    ebx
c001ae1b:	5e                   	pop    esi
c001ae1c:	c3                   	ret    
c001ae1d:	90                   	nop

c001ae1e <SoundDevice::removeChannel(int)>:
c001ae1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ae22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ae26:	83 fa 1f             	cmp    edx,0x1f
c001ae29:	77 23                	ja     c001ae4e <SoundDevice::removeChannel(int)+0x30>
c001ae2b:	8d 14 90             	lea    edx,[eax+edx*4]
c001ae2e:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001ae35:	74 17                	je     c001ae4e <SoundDevice::removeChannel(int)+0x30>
c001ae37:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001ae41:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001ae47:	75 05                	jne    c001ae4e <SoundDevice::removeChannel(int)+0x30>
c001ae49:	8b 00                	mov    eax,DWORD PTR [eax]
c001ae4b:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001ae4e:	c3                   	ret    
c001ae4f:	90                   	nop

c001ae50 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001ae50:	56                   	push   esi
c001ae51:	53                   	push   ebx
c001ae52:	31 db                	xor    ebx,ebx
c001ae54:	83 ec 14             	sub    esp,0x14
c001ae57:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001ae5b:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001ae5f:	7d 55                	jge    c001aeb6 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001ae61:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ae65:	d9 e8                	fld1   
c001ae67:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001ae6a:	d8 0d 14 a6 03 c0    	fmul   DWORD PTR ds:0xc003a614
c001ae70:	d8 0d 18 a6 03 c0    	fmul   DWORD PTR ds:0xc003a618
c001ae76:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001ae7a:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001ae7e:	d8 15 1c a6 03 c0    	fcom   DWORD PTR ds:0xc003a61c
c001ae84:	df e0                	fnstsw ax
c001ae86:	9e                   	sahf   
c001ae87:	72 08                	jb     c001ae91 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001ae89:	dd d8                	fstp   st(0)
c001ae8b:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001ae8f:	eb 22                	jmp    c001aeb3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001ae91:	d9 ee                	fldz   
c001ae93:	d8 d9                	fcomp  st(1)
c001ae95:	df e0                	fnstsw ax
c001ae97:	9e                   	sahf   
c001ae98:	72 08                	jb     c001aea2 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001ae9a:	dd d8                	fstp   st(0)
c001ae9c:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001aea0:	eb 11                	jmp    c001aeb3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001aea2:	83 ec 10             	sub    esp,0x10
c001aea5:	d9 1c 24             	fstp   DWORD PTR [esp]
c001aea8:	e8 bf 3a 00 00       	call   c001e96c <lrintf>
c001aead:	83 c4 10             	add    esp,0x10
c001aeb0:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001aeb3:	43                   	inc    ebx
c001aeb4:	eb a5                	jmp    c001ae5b <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001aeb6:	83 c4 14             	add    esp,0x14
c001aeb9:	5b                   	pop    ebx
c001aeba:	5e                   	pop    esi
c001aebb:	c3                   	ret    

c001aebc <SoundDevice::getAudio(int, float*, float*)>:
c001aebc:	55                   	push   ebp
c001aebd:	57                   	push   edi
c001aebe:	56                   	push   esi
c001aebf:	53                   	push   ebx
c001aec0:	31 db                	xor    ebx,ebx
c001aec2:	83 ec 20             	sub    esp,0x20
c001aec5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aec9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001aecd:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001aed1:	c1 e0 02             	shl    eax,0x2
c001aed4:	50                   	push   eax
c001aed5:	6a 00                	push   0x0
c001aed7:	55                   	push   ebp
c001aed8:	e8 fb 57 fe ff       	call   c00006d8 <memset>
c001aedd:	83 c4 10             	add    esp,0x10
c001aee0:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001aee4:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001aeeb:	85 c0                	test   eax,eax
c001aeed:	0f 84 94 00 00 00    	je     c001af87 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001aef3:	83 ec 0c             	sub    esp,0xc
c001aef6:	50                   	push   eax
c001aef7:	e8 a2 fc ff ff       	call   c001ab9e <SoundChannel::paused()>
c001aefc:	83 c4 10             	add    esp,0x10
c001aeff:	84 c0                	test   al,al
c001af01:	0f 85 80 00 00 00    	jne    c001af87 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001af07:	83 ec 0c             	sub    esp,0xc
c001af0a:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001af11:	e8 76 fb ff ff       	call   c001aa8c <SoundChannel::getVolume()>
c001af16:	83 c4 10             	add    esp,0x10
c001af19:	85 c0                	test   eax,eax
c001af1b:	74 6a                	je     c001af87 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001af1d:	83 ec 0c             	sub    esp,0xc
c001af20:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001af27:	e8 60 fb ff ff       	call   c001aa8c <SoundChannel::getVolume()>
c001af2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001af30:	d9 05 20 a6 03 c0    	fld    DWORD PTR ds:0xc003a620
c001af36:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001af3a:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001af3e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001af42:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001af48:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001af4c:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001af53:	e8 6e fc ff ff       	call   c001abc6 <SoundChannel::unbuffer(float*, int, int)>
c001af58:	83 c4 20             	add    esp,0x20
c001af5b:	31 d2                	xor    edx,edx
c001af5d:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001af61:	39 c2                	cmp    edx,eax
c001af63:	7d 1a                	jge    c001af7f <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001af65:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001af69:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001af6c:	d8 c9                	fmul   st,st(1)
c001af6e:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001af74:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001af78:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001af7c:	42                   	inc    edx
c001af7d:	eb e2                	jmp    c001af61 <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001af7f:	dd d8                	fstp   st(0)
c001af81:	39 c7                	cmp    edi,eax
c001af83:	7e 02                	jle    c001af87 <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001af85:	89 c7                	mov    edi,eax
c001af87:	43                   	inc    ebx
c001af88:	83 fb 20             	cmp    ebx,0x20
c001af8b:	0f 85 53 ff ff ff    	jne    c001aee4 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001af91:	83 c4 1c             	add    esp,0x1c
c001af94:	89 f8                	mov    eax,edi
c001af96:	5b                   	pop    ebx
c001af97:	5e                   	pop    esi
c001af98:	5f                   	pop    edi
c001af99:	5d                   	pop    ebp
c001af9a:	c3                   	ret    
c001af9b:	90                   	nop

c001af9c <PCI::open(int, int, void*)>:
c001af9c:	83 ec 18             	sub    esp,0x18
c001af9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001afa3:	8b 10                	mov    edx,DWORD PTR [eax]
c001afa5:	50                   	push   eax
c001afa6:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001afa9:	31 c0                	xor    eax,eax
c001afab:	83 c4 1c             	add    esp,0x1c
c001afae:	c3                   	ret    
c001afaf:	90                   	nop

c001afb0 <PCI::close(int, int, void*)>:
c001afb0:	31 c0                	xor    eax,eax
c001afb2:	c3                   	ret    
c001afb3:	90                   	nop

c001afb4 <PCI::PCI()>:
c001afb4:	83 ec 0c             	sub    esp,0xc
c001afb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afbb:	83 ec 08             	sub    esp,0x8
c001afbe:	68 24 a6 03 c0       	push   0xc003a624
c001afc3:	50                   	push   eax
c001afc4:	e8 6f 80 ff ff       	call   c0013038 <Bus::Bus(char const*)>
c001afc9:	83 c4 10             	add    esp,0x10
c001afcc:	ba d0 a6 03 c0       	mov    edx,0xc003a6d0
c001afd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afd5:	89 10                	mov    DWORD PTR [eax],edx
c001afd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afdb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001afe1:	0f b6 d0             	movzx  edx,al
c001afe4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afe8:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001afef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aff3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001aff9:	0f b6 d0             	movzx  edx,al
c001affc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b000:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b009:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b00f:	8d 50 01             	lea    edx,[eax+0x1]
c001b012:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b016:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b01c:	0f b6 d0             	movzx  edx,al
c001b01f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b023:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b027:	83 c9 c0             	or     ecx,0xffffffc0
c001b02a:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b02e:	90                   	nop
c001b02f:	83 c4 0c             	add    esp,0xc
c001b032:	c3                   	ret    
c001b033:	90                   	nop

c001b034 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b034:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b038:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b03d:	89 ca                	mov    edx,ecx
c001b03f:	c1 e0 10             	shl    eax,0x10
c001b042:	81 e2 fc 00 00 00    	and    edx,0xfc
c001b048:	09 d0                	or     eax,edx
c001b04a:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001b04f:	c1 e2 08             	shl    edx,0x8
c001b052:	09 d0                	or     eax,edx
c001b054:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001b059:	c1 e2 0b             	shl    edx,0xb
c001b05c:	09 d0                	or     eax,edx
c001b05e:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b063:	0d 00 00 00 80       	or     eax,0x80000000
c001b068:	ef                   	out    dx,eax
c001b069:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b06e:	ed                   	in     eax,dx
c001b06f:	83 e1 02             	and    ecx,0x2
c001b072:	0f b6 c9             	movzx  ecx,cl
c001b075:	c1 e1 03             	shl    ecx,0x3
c001b078:	d3 e8                	shr    eax,cl
c001b07a:	c3                   	ret    
c001b07b:	90                   	nop

c001b07c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001b07c:	6a 00                	push   0x0
c001b07e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b083:	50                   	push   eax
c001b084:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b089:	50                   	push   eax
c001b08a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b08f:	50                   	push   eax
c001b090:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b094:	e8 9b ff ff ff       	call   c001b034 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b099:	83 c4 14             	add    esp,0x14
c001b09c:	c3                   	ret    
c001b09d:	90                   	nop

c001b09e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001b09e:	6a 0e                	push   0xe
c001b0a0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0a5:	50                   	push   eax
c001b0a6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0ab:	50                   	push   eax
c001b0ac:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b0b1:	50                   	push   eax
c001b0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b0b6:	e8 79 ff ff ff       	call   c001b034 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0bb:	83 c4 14             	add    esp,0x14
c001b0be:	0f b6 c0             	movzx  eax,al
c001b0c1:	c3                   	ret    

c001b0c2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001b0c2:	55                   	push   ebp
c001b0c3:	57                   	push   edi
c001b0c4:	56                   	push   esi
c001b0c5:	53                   	push   ebx
c001b0c6:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b0cb:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001b0d0:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001b0d5:	6a 0a                	push   0xa
c001b0d7:	56                   	push   esi
c001b0d8:	55                   	push   ebp
c001b0d9:	57                   	push   edi
c001b0da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b0de:	e8 51 ff ff ff       	call   c001b034 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0e3:	6a 0a                	push   0xa
c001b0e5:	89 c3                	mov    ebx,eax
c001b0e7:	56                   	push   esi
c001b0e8:	0f b6 db             	movzx  ebx,bl
c001b0eb:	55                   	push   ebp
c001b0ec:	57                   	push   edi
c001b0ed:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001b0f1:	e8 3e ff ff ff       	call   c001b034 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0f6:	83 c4 28             	add    esp,0x28
c001b0f9:	25 00 ff 00 00       	and    eax,0xff00
c001b0fe:	09 d8                	or     eax,ebx
c001b100:	5b                   	pop    ebx
c001b101:	5e                   	pop    esi
c001b102:	5f                   	pop    edi
c001b103:	5d                   	pop    ebp
c001b104:	c3                   	ret    
c001b105:	90                   	nop

c001b106 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001b106:	6a 08                	push   0x8
c001b108:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b10d:	50                   	push   eax
c001b10e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b113:	50                   	push   eax
c001b114:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b119:	50                   	push   eax
c001b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b11e:	e8 11 ff ff ff       	call   c001b034 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b123:	83 c4 14             	add    esp,0x14
c001b126:	0f b6 c4             	movzx  eax,ah
c001b129:	c3                   	ret    

c001b12a <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001b12a:	6a 08                	push   0x8
c001b12c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b131:	50                   	push   eax
c001b132:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b137:	50                   	push   eax
c001b138:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b13d:	50                   	push   eax
c001b13e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b142:	e8 ed fe ff ff       	call   c001b034 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b147:	83 c4 14             	add    esp,0x14
c001b14a:	c3                   	ret    
c001b14b:	90                   	nop

c001b14c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001b14c:	6a 3c                	push   0x3c
c001b14e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b153:	50                   	push   eax
c001b154:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b159:	50                   	push   eax
c001b15a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b15f:	50                   	push   eax
c001b160:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b164:	e8 cb fe ff ff       	call   c001b034 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b169:	83 c4 14             	add    esp,0x14
c001b16c:	c3                   	ret    
c001b16d:	90                   	nop

c001b16e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001b16e:	6a 18                	push   0x18
c001b170:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b175:	50                   	push   eax
c001b176:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b17b:	50                   	push   eax
c001b17c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b181:	50                   	push   eax
c001b182:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b186:	e8 a9 fe ff ff       	call   c001b034 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b18b:	83 c4 14             	add    esp,0x14
c001b18e:	0f b6 c4             	movzx  eax,ah
c001b191:	c3                   	ret    

c001b192 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001b192:	55                   	push   ebp
c001b193:	57                   	push   edi
c001b194:	56                   	push   esi
c001b195:	53                   	push   ebx
c001b196:	50                   	push   eax
c001b197:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b19b:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001b1a0:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b1a5:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001b1aa:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b1b1:	8d 43 12             	lea    eax,[ebx+0x12]
c001b1b4:	83 c3 10             	add    ebx,0x10
c001b1b7:	0f b6 c0             	movzx  eax,al
c001b1ba:	0f b6 db             	movzx  ebx,bl
c001b1bd:	50                   	push   eax
c001b1be:	51                   	push   ecx
c001b1bf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b1c3:	57                   	push   edi
c001b1c4:	55                   	push   ebp
c001b1c5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b1c9:	e8 66 fe ff ff       	call   c001b034 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b1ce:	53                   	push   ebx
c001b1cf:	89 c6                	mov    esi,eax
c001b1d1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b1d5:	c1 e6 10             	shl    esi,0x10
c001b1d8:	51                   	push   ecx
c001b1d9:	57                   	push   edi
c001b1da:	55                   	push   ebp
c001b1db:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b1df:	e8 50 fe ff ff       	call   c001b034 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b1e4:	83 c4 2c             	add    esp,0x2c
c001b1e7:	0f b7 c0             	movzx  eax,ax
c001b1ea:	5b                   	pop    ebx
c001b1eb:	09 f0                	or     eax,esi
c001b1ed:	5e                   	pop    esi
c001b1ee:	5f                   	pop    edi
c001b1ef:	5d                   	pop    ebp
c001b1f0:	c3                   	ret    
c001b1f1:	90                   	nop

c001b1f2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b1f2:	53                   	push   ebx
c001b1f3:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b1f8:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b1fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b201:	c1 e1 10             	shl    ecx,0x10
c001b204:	25 fc 00 00 00       	and    eax,0xfc
c001b209:	09 c1                	or     ecx,eax
c001b20b:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b210:	c1 e0 08             	shl    eax,0x8
c001b213:	09 c1                	or     ecx,eax
c001b215:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b21a:	c1 e0 0b             	shl    eax,0xb
c001b21d:	09 c1                	or     ecx,eax
c001b21f:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b225:	89 c8                	mov    eax,ecx
c001b227:	ef                   	out    dx,eax
c001b228:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b22d:	ed                   	in     eax,dx
c001b22e:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001b233:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001b238:	74 0a                	je     c001b244 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001b23a:	0f b7 d8             	movzx  ebx,ax
c001b23d:	89 d0                	mov    eax,edx
c001b23f:	c1 e0 10             	shl    eax,0x10
c001b242:	eb 05                	jmp    c001b249 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001b244:	66 31 c0             	xor    ax,ax
c001b247:	89 d3                	mov    ebx,edx
c001b249:	09 c3                	or     ebx,eax
c001b24b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b250:	89 c8                	mov    eax,ecx
c001b252:	ef                   	out    dx,eax
c001b253:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b258:	89 d8                	mov    eax,ebx
c001b25a:	ef                   	out    dx,eax
c001b25b:	5b                   	pop    ebx
c001b25c:	c3                   	ret    
c001b25d:	90                   	nop

c001b25e <PCI::checkBus(unsigned char)>:
c001b25e:	56                   	push   esi
c001b25f:	53                   	push   ebx
c001b260:	31 db                	xor    ebx,ebx
c001b262:	51                   	push   ecx
c001b263:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b268:	52                   	push   edx
c001b269:	53                   	push   ebx
c001b26a:	43                   	inc    ebx
c001b26b:	56                   	push   esi
c001b26c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b270:	e8 4d 03 00 00       	call   c001b5c2 <PCI::checkDevice(unsigned char, unsigned char)>
c001b275:	83 c4 10             	add    esp,0x10
c001b278:	83 fb 20             	cmp    ebx,0x20
c001b27b:	75 eb                	jne    c001b268 <PCI::checkBus(unsigned char)+0xa>
c001b27d:	58                   	pop    eax
c001b27e:	5b                   	pop    ebx
c001b27f:	5e                   	pop    esi
c001b280:	c3                   	ret    
c001b281:	90                   	nop

c001b282 <PCI::foundDevice(PCIDeviceInfo)>:
c001b282:	55                   	push   ebp
c001b283:	57                   	push   edi
c001b284:	56                   	push   esi
c001b285:	53                   	push   ebx
c001b286:	83 ec 1c             	sub    esp,0x1c
c001b289:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b28d:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001b293:	0f 84 51 01 00 00    	je     c001b3ea <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b299:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b29d:	66 81 f9 06 04       	cmp    cx,0x406
c001b2a2:	75 2c                	jne    c001b2d0 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001b2a4:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b2a9:	50                   	push   eax
c001b2aa:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b2af:	50                   	push   eax
c001b2b0:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b2b5:	50                   	push   eax
c001b2b6:	56                   	push   esi
c001b2b7:	e8 b2 fe ff ff       	call   c001b16e <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b2bc:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b2c0:	0f b6 c0             	movzx  eax,al
c001b2c3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b2c7:	83 c4 2c             	add    esp,0x2c
c001b2ca:	5b                   	pop    ebx
c001b2cb:	5e                   	pop    esi
c001b2cc:	5f                   	pop    edi
c001b2cd:	5d                   	pop    ebp
c001b2ce:	eb 8e                	jmp    c001b25e <PCI::checkBus(unsigned char)>
c001b2d0:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b2d4:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b2da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b2de:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b2e2:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001b2e6:	88 d3                	mov    bl,dl
c001b2e8:	85 c0                	test   eax,eax
c001b2ea:	74 33                	je     c001b31f <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b2ec:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b2ef:	85 d2                	test   edx,edx
c001b2f1:	74 28                	je     c001b31b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b2f3:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001b2f9:	31 ef                	xor    edi,ebp
c001b2fb:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001b301:	75 18                	jne    c001b31b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b303:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b307:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001b30d:	75 0c                	jne    c001b31b <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b30f:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001b315:	0f 84 cf 00 00 00    	je     c001b3ea <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b31b:	8b 00                	mov    eax,DWORD PTR [eax]
c001b31d:	eb c9                	jmp    c001b2e8 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001b31f:	66 81 f9 01 06       	cmp    cx,0x601
c001b324:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001b328:	75 18                	jne    c001b342 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001b32a:	83 ec 0c             	sub    esp,0xc
c001b32d:	68 58 01 00 00       	push   0x158
c001b332:	e8 7b 71 ff ff       	call   c00124b2 <operator new(unsigned long)>
c001b337:	59                   	pop    ecx
c001b338:	89 c5                	mov    ebp,eax
c001b33a:	5f                   	pop    edi
c001b33b:	68 2c a6 03 c0       	push   0xc003a62c
c001b340:	eb 7d                	jmp    c001b3bf <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001b342:	66 81 f9 01 01       	cmp    cx,0x101
c001b347:	75 60                	jne    c001b3a9 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001b349:	83 ec 0c             	sub    esp,0xc
c001b34c:	68 70 02 00 00       	push   0x270
c001b351:	e8 5c 71 ff ff       	call   c00124b2 <operator new(unsigned long)>
c001b356:	89 04 24             	mov    DWORD PTR [esp],eax
c001b359:	89 c5                	mov    ebp,eax
c001b35b:	e8 e0 07 00 00       	call   c001bb40 <IDE::IDE()>
c001b360:	58                   	pop    eax
c001b361:	5a                   	pop    edx
c001b362:	55                   	push   ebp
c001b363:	56                   	push   esi
c001b364:	e8 53 84 ff ff       	call   c00137bc <Device::addChild(Device*)>
c001b369:	83 ec 1c             	sub    esp,0x1c
c001b36c:	b9 09 00 00 00       	mov    ecx,0x9
c001b371:	fc                   	cld    
c001b372:	89 e7                	mov    edi,esp
c001b374:	89 de                	mov    esi,ebx
c001b376:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b378:	55                   	push   ebp
c001b379:	e8 18 83 ff ff       	call   c0013696 <Device::preOpenPCI(PCIDeviceInfo)>
c001b37e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b381:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b385:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b38d:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b395:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b39d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b3a0:	83 c4 4c             	add    esp,0x4c
c001b3a3:	5b                   	pop    ebx
c001b3a4:	5e                   	pop    esi
c001b3a5:	5f                   	pop    edi
c001b3a6:	5d                   	pop    ebp
c001b3a7:	ff e0                	jmp    eax
c001b3a9:	83 ec 0c             	sub    esp,0xc
c001b3ac:	68 58 01 00 00       	push   0x158
c001b3b1:	e8 fc 70 ff ff       	call   c00124b2 <operator new(unsigned long)>
c001b3b6:	59                   	pop    ecx
c001b3b7:	89 c5                	mov    ebp,eax
c001b3b9:	5f                   	pop    edi
c001b3ba:	68 4b a6 03 c0       	push   0xc003a64b
c001b3bf:	55                   	push   ebp
c001b3c0:	e8 e3 86 ff ff       	call   c0013aa8 <DriverlessDevice::DriverlessDevice(char const*)>
c001b3c5:	58                   	pop    eax
c001b3c6:	5a                   	pop    edx
c001b3c7:	55                   	push   ebp
c001b3c8:	56                   	push   esi
c001b3c9:	e8 ee 83 ff ff       	call   c00137bc <Device::addChild(Device*)>
c001b3ce:	b9 09 00 00 00       	mov    ecx,0x9
c001b3d3:	fc                   	cld    
c001b3d4:	89 df                	mov    edi,ebx
c001b3d6:	89 de                	mov    esi,ebx
c001b3d8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b3da:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001b3de:	83 c4 2c             	add    esp,0x2c
c001b3e1:	5b                   	pop    ebx
c001b3e2:	5e                   	pop    esi
c001b3e3:	5f                   	pop    edi
c001b3e4:	5d                   	pop    ebp
c001b3e5:	e9 ac 82 ff ff       	jmp    c0013696 <Device::preOpenPCI(PCIDeviceInfo)>
c001b3ea:	83 c4 1c             	add    esp,0x1c
c001b3ed:	5b                   	pop    ebx
c001b3ee:	5e                   	pop    esi
c001b3ef:	5f                   	pop    edi
c001b3f0:	5d                   	pop    ebp
c001b3f1:	c3                   	ret    

c001b3f2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b3f2:	55                   	push   ebp
c001b3f3:	57                   	push   edi
c001b3f4:	56                   	push   esi
c001b3f5:	53                   	push   ebx
c001b3f6:	83 ec 5c             	sub    esp,0x5c
c001b3f9:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001b3fd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b401:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001b405:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001b40a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b40e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001b412:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001b417:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b41b:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001b420:	6a 0c                	push   0xc
c001b422:	55                   	push   ebp
c001b423:	53                   	push   ebx
c001b424:	57                   	push   edi
c001b425:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001b42c:	e8 03 fc ff ff       	call   c001b034 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b431:	83 c4 0c             	add    esp,0xc
c001b434:	6a 00                	push   0x0
c001b436:	68 65 a6 03 c0       	push   0xc003a665
c001b43b:	e8 c2 1a ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001b440:	55                   	push   ebp
c001b441:	53                   	push   ebx
c001b442:	57                   	push   edi
c001b443:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b44a:	e8 73 fc ff ff       	call   c001b0c2 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b44f:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001b454:	83 c4 20             	add    esp,0x20
c001b457:	55                   	push   ebp
c001b458:	53                   	push   ebx
c001b459:	57                   	push   edi
c001b45a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b45e:	e8 e9 fc ff ff       	call   c001b14c <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b463:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001b46a:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b46e:	55                   	push   ebp
c001b46f:	53                   	push   ebx
c001b470:	57                   	push   edi
c001b471:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b478:	e8 b7 fb ff ff       	call   c001b034 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b47d:	0f b6 c4             	movzx  eax,ah
c001b480:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b484:	83 c4 18             	add    esp,0x18
c001b487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b48b:	68 79 a6 03 c0       	push   0xc003a679
c001b490:	e8 6d 1a ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001b495:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b499:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001b49d:	a1 a8 b9 03 c0       	mov    eax,ds:0xc003b9a8
c001b4a2:	83 c4 10             	add    esp,0x10
c001b4a5:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001b4ab:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001b4b2:	74 6c                	je     c001b520 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b4b4:	31 f6                	xor    esi,esi
c001b4b6:	8b 15 a8 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9a8
c001b4bc:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b4c2:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001b4c8:	7e 56                	jle    c001b520 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b4ca:	8d 14 f2             	lea    edx,[edx+esi*8]
c001b4cd:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001b4d4:	39 cb                	cmp    ebx,ecx
c001b4d6:	75 45                	jne    c001b51d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b4d8:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001b4df:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001b4e3:	75 38                	jne    c001b51d <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b4e5:	83 ec 0c             	sub    esp,0xc
c001b4e8:	68 88 a6 03 c0       	push   0xc003a688
c001b4ed:	e8 10 1a ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001b4f2:	8b 15 a8 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9a8
c001b4f8:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b4fe:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001b506:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001b50a:	52                   	push   edx
c001b50b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b50f:	53                   	push   ebx
c001b510:	68 ad a6 03 c0       	push   0xc003a6ad
c001b515:	e8 e8 19 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001b51a:	83 c4 20             	add    esp,0x20
c001b51d:	46                   	inc    esi
c001b51e:	eb 96                	jmp    c001b4b6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001b520:	31 d2                	xor    edx,edx
c001b522:	83 ec 0c             	sub    esp,0xc
c001b525:	55                   	push   ebp
c001b526:	53                   	push   ebx
c001b527:	57                   	push   edi
c001b528:	52                   	push   edx
c001b529:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b52d:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b534:	e8 59 fc ff ff       	call   c001b192 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b539:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001b53d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b541:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b545:	42                   	inc    edx
c001b546:	83 c4 20             	add    esp,0x20
c001b549:	83 fa 06             	cmp    edx,0x6
c001b54c:	75 d4                	jne    c001b522 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001b54e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b552:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001b556:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001b55a:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001b55e:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001b562:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b566:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b56b:	86 e0                	xchg   al,ah
c001b56d:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001b572:	55                   	push   ebp
c001b573:	53                   	push   ebx
c001b574:	57                   	push   edi
c001b575:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b579:	e8 88 fb ff ff       	call   c001b106 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b57e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b582:	55                   	push   ebp
c001b583:	53                   	push   ebx
c001b584:	57                   	push   edi
c001b585:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b58c:	e8 eb fa ff ff       	call   c001b07c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b591:	83 ec 0c             	sub    esp,0xc
c001b594:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001b599:	b9 09 00 00 00       	mov    ecx,0x9
c001b59e:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001b5a2:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001b5a6:	fc                   	cld    
c001b5a7:	89 e7                	mov    edi,esp
c001b5a9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b5ab:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001b5b2:	e8 cb fc ff ff       	call   c001b282 <PCI::foundDevice(PCIDeviceInfo)>
c001b5b7:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b5bd:	5b                   	pop    ebx
c001b5be:	5e                   	pop    esi
c001b5bf:	5f                   	pop    edi
c001b5c0:	5d                   	pop    ebp
c001b5c1:	c3                   	ret    

c001b5c2 <PCI::checkDevice(unsigned char, unsigned char)>:
c001b5c2:	55                   	push   ebp
c001b5c3:	57                   	push   edi
c001b5c4:	56                   	push   esi
c001b5c5:	53                   	push   ebx
c001b5c6:	83 ec 0c             	sub    esp,0xc
c001b5c9:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b5cd:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b5d2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b5d7:	6a 00                	push   0x0
c001b5d9:	56                   	push   esi
c001b5da:	57                   	push   edi
c001b5db:	55                   	push   ebp
c001b5dc:	e8 9b fa ff ff       	call   c001b07c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b5e1:	6a 00                	push   0x0
c001b5e3:	56                   	push   esi
c001b5e4:	57                   	push   edi
c001b5e5:	55                   	push   ebp
c001b5e6:	e8 07 fe ff ff       	call   c001b3f2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b5eb:	83 c4 20             	add    esp,0x20
c001b5ee:	6a 00                	push   0x0
c001b5f0:	56                   	push   esi
c001b5f1:	57                   	push   edi
c001b5f2:	55                   	push   ebp
c001b5f3:	e8 a6 fa ff ff       	call   c001b09e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b5f8:	83 c4 10             	add    esp,0x10
c001b5fb:	84 c0                	test   al,al
c001b5fd:	79 27                	jns    c001b626 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b5ff:	bb 01 00 00 00       	mov    ebx,0x1
c001b604:	53                   	push   ebx
c001b605:	56                   	push   esi
c001b606:	57                   	push   edi
c001b607:	55                   	push   ebp
c001b608:	e8 6f fa ff ff       	call   c001b07c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b60d:	83 c4 10             	add    esp,0x10
c001b610:	66 40                	inc    ax
c001b612:	74 0c                	je     c001b620 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001b614:	53                   	push   ebx
c001b615:	56                   	push   esi
c001b616:	57                   	push   edi
c001b617:	55                   	push   ebp
c001b618:	e8 d5 fd ff ff       	call   c001b3f2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b61d:	83 c4 10             	add    esp,0x10
c001b620:	43                   	inc    ebx
c001b621:	83 fb 08             	cmp    ebx,0x8
c001b624:	75 de                	jne    c001b604 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b626:	83 c4 0c             	add    esp,0xc
c001b629:	5b                   	pop    ebx
c001b62a:	5e                   	pop    esi
c001b62b:	5f                   	pop    edi
c001b62c:	5d                   	pop    ebp
c001b62d:	c3                   	ret    

c001b62e <PCI::detect()>:
c001b62e:	56                   	push   esi
c001b62f:	53                   	push   ebx
c001b630:	53                   	push   ebx
c001b631:	31 db                	xor    ebx,ebx
c001b633:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b637:	6a 00                	push   0x0
c001b639:	6a 00                	push   0x0
c001b63b:	6a 00                	push   0x0
c001b63d:	56                   	push   esi
c001b63e:	e8 5b fa ff ff       	call   c001b09e <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b643:	83 c4 10             	add    esp,0x10
c001b646:	a8 80                	test   al,0x80
c001b648:	75 21                	jne    c001b66b <PCI::detect()+0x3d>
c001b64a:	51                   	push   ecx
c001b64b:	51                   	push   ecx
c001b64c:	6a 00                	push   0x0
c001b64e:	56                   	push   esi
c001b64f:	e8 0a fc ff ff       	call   c001b25e <PCI::checkBus(unsigned char)>
c001b654:	83 c4 10             	add    esp,0x10
c001b657:	eb 24                	jmp    c001b67d <PCI::detect()+0x4f>
c001b659:	52                   	push   edx
c001b65a:	52                   	push   edx
c001b65b:	53                   	push   ebx
c001b65c:	43                   	inc    ebx
c001b65d:	56                   	push   esi
c001b65e:	e8 fb fb ff ff       	call   c001b25e <PCI::checkBus(unsigned char)>
c001b663:	83 c4 10             	add    esp,0x10
c001b666:	83 fb 08             	cmp    ebx,0x8
c001b669:	74 12                	je     c001b67d <PCI::detect()+0x4f>
c001b66b:	53                   	push   ebx
c001b66c:	6a 00                	push   0x0
c001b66e:	6a 00                	push   0x0
c001b670:	56                   	push   esi
c001b671:	e8 06 fa ff ff       	call   c001b07c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b676:	83 c4 10             	add    esp,0x10
c001b679:	66 40                	inc    ax
c001b67b:	74 dc                	je     c001b659 <PCI::detect()+0x2b>
c001b67d:	58                   	pop    eax
c001b67e:	5b                   	pop    ebx
c001b67f:	5e                   	pop    esi
c001b680:	c3                   	ret    
c001b681:	90                   	nop

c001b682 <RTC::open(int, int, void*)>:
c001b682:	31 c0                	xor    eax,eax
c001b684:	c3                   	ret    
c001b685:	90                   	nop

c001b686 <RTC::close(int, int, void*)>:
c001b686:	31 c0                	xor    eax,eax
c001b688:	c3                   	ret    
c001b689:	90                   	nop

c001b68a <RTC::timeInSecondsUTC()>:
c001b68a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b68e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b694:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b69a:	c3                   	ret    
c001b69b:	90                   	nop

c001b69c <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001b69c:	31 c0                	xor    eax,eax
c001b69e:	c3                   	ret    
c001b69f:	90                   	nop

c001b6a0 <RTC::timeInDatetimeUTC()>:
c001b6a0:	53                   	push   ebx
c001b6a1:	83 ec 14             	sub    esp,0x14
c001b6a4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b6a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6ac:	8b 10                	mov    edx,DWORD PTR [eax]
c001b6ae:	50                   	push   eax
c001b6af:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001b6b2:	83 c4 0c             	add    esp,0xc
c001b6b5:	52                   	push   edx
c001b6b6:	50                   	push   eax
c001b6b7:	53                   	push   ebx
c001b6b8:	e8 13 7e ff ff       	call   c00134d0 <secondsToDatetime(unsigned long long)>
c001b6bd:	89 d8                	mov    eax,ebx
c001b6bf:	83 c4 14             	add    esp,0x14
c001b6c2:	5b                   	pop    ebx
c001b6c3:	c2 04 00             	ret    0x4

c001b6c6 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001b6c6:	56                   	push   esi
c001b6c7:	53                   	push   ebx
c001b6c8:	83 ec 14             	sub    esp,0x14
c001b6cb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b6cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b6d1:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001b6d4:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b6d8:	52                   	push   edx
c001b6d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b6e1:	50                   	push   eax
c001b6e2:	e8 e9 7d ff ff       	call   c00134d0 <secondsToDatetime(unsigned long long)>
c001b6e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b6eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b6ef:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b6f3:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001b6f7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001b6fb:	89 f0                	mov    eax,esi
c001b6fd:	83 c4 20             	add    esp,0x20
c001b700:	5b                   	pop    ebx
c001b701:	5e                   	pop    esi
c001b702:	ff e0                	jmp    eax

c001b704 <RTC::~RTC()>:
c001b704:	83 ec 0c             	sub    esp,0xc
c001b707:	ba 28 a7 03 c0       	mov    edx,0xc003a728
c001b70c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b710:	89 10                	mov    DWORD PTR [eax],edx
c001b712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b716:	83 ec 0c             	sub    esp,0xc
c001b719:	50                   	push   eax
c001b71a:	e8 3b 7b ff ff       	call   c001325a <Clock::~Clock()>
c001b71f:	83 c4 10             	add    esp,0x10
c001b722:	90                   	nop
c001b723:	83 c4 0c             	add    esp,0xc
c001b726:	c3                   	ret    
c001b727:	90                   	nop

c001b728 <RTC::~RTC()>:
c001b728:	83 ec 0c             	sub    esp,0xc
c001b72b:	83 ec 0c             	sub    esp,0xc
c001b72e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b732:	e8 cd ff ff ff       	call   c001b704 <RTC::~RTC()>
c001b737:	83 c4 10             	add    esp,0x10
c001b73a:	83 ec 08             	sub    esp,0x8
c001b73d:	68 60 01 00 00       	push   0x160
c001b742:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b746:	e8 76 6d ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c001b74b:	83 c4 10             	add    esp,0x10
c001b74e:	83 c4 0c             	add    esp,0xc
c001b751:	c3                   	ret    

c001b752 <RTC::get_update_in_progress_flag()>:
c001b752:	83 ec 14             	sub    esp,0x14
c001b755:	6a 0a                	push   0xa
c001b757:	ff 35 a8 b9 03 c0    	push   DWORD PTR ds:0xc003b9a8
c001b75d:	e8 f6 fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b762:	83 c4 1c             	add    esp,0x1c
c001b765:	c0 e8 07             	shr    al,0x7
c001b768:	c3                   	ret    
c001b769:	90                   	nop

c001b76a <RTC::completeRTCRefresh()>:
c001b76a:	55                   	push   ebp
c001b76b:	57                   	push   edi
c001b76c:	56                   	push   esi
c001b76d:	53                   	push   ebx
c001b76e:	83 ec 2c             	sub    esp,0x2c
c001b771:	8b 35 70 c3 03 c0    	mov    esi,DWORD PTR ds:0xc003c370
c001b777:	8b 3d 74 c3 03 c0    	mov    edi,DWORD PTR ds:0xc003c374
c001b77d:	81 c6 00 94 35 77    	add    esi,0x77359400
c001b783:	83 d7 00             	adc    edi,0x0
c001b786:	83 ec 0c             	sub    esp,0xc
c001b789:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b78d:	e8 c0 ff ff ff       	call   c001b752 <RTC::get_update_in_progress_flag()>
c001b792:	83 c4 10             	add    esp,0x10
c001b795:	84 c0                	test   al,al
c001b797:	74 10                	je     c001b7a9 <RTC::completeRTCRefresh()+0x3f>
c001b799:	3b 35 70 c3 03 c0    	cmp    esi,DWORD PTR ds:0xc003c370
c001b79f:	89 f8                	mov    eax,edi
c001b7a1:	1b 05 74 c3 03 c0    	sbb    eax,DWORD PTR ds:0xc003c374
c001b7a7:	73 dd                	jae    c001b786 <RTC::completeRTCRefresh()+0x1c>
c001b7a9:	55                   	push   ebp
c001b7aa:	55                   	push   ebp
c001b7ab:	6a 00                	push   0x0
c001b7ad:	ff 35 a8 b9 03 c0    	push   DWORD PTR ds:0xc003b9a8
c001b7b3:	e8 a0 fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b7b8:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b7bc:	58                   	pop    eax
c001b7bd:	5a                   	pop    edx
c001b7be:	6a 02                	push   0x2
c001b7c0:	ff 35 a8 b9 03 c0    	push   DWORD PTR ds:0xc003b9a8
c001b7c6:	e8 8d fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b7cb:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001b7cf:	59                   	pop    ecx
c001b7d0:	5b                   	pop    ebx
c001b7d1:	6a 04                	push   0x4
c001b7d3:	ff 35 a8 b9 03 c0    	push   DWORD PTR ds:0xc003b9a8
c001b7d9:	e8 7a fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b7de:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b7e2:	5e                   	pop    esi
c001b7e3:	5f                   	pop    edi
c001b7e4:	6a 07                	push   0x7
c001b7e6:	ff 35 a8 b9 03 c0    	push   DWORD PTR ds:0xc003b9a8
c001b7ec:	e8 67 fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b7f1:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c001b7f5:	5d                   	pop    ebp
c001b7f6:	58                   	pop    eax
c001b7f7:	6a 08                	push   0x8
c001b7f9:	ff 35 a8 b9 03 c0    	push   DWORD PTR ds:0xc003b9a8
c001b7ff:	e8 54 fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b804:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001b808:	58                   	pop    eax
c001b809:	5a                   	pop    edx
c001b80a:	6a 09                	push   0x9
c001b80c:	ff 35 a8 b9 03 c0    	push   DWORD PTR ds:0xc003b9a8
c001b812:	e8 41 fe fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b817:	83 c4 10             	add    esp,0x10
c001b81a:	0f b6 e8             	movzx  ebp,al
c001b81d:	8b 35 70 c3 03 c0    	mov    esi,DWORD PTR ds:0xc003c370
c001b823:	8b 3d 74 c3 03 c0    	mov    edi,DWORD PTR ds:0xc003c374
c001b829:	81 c6 00 94 35 77    	add    esi,0x77359400
c001b82f:	83 d7 00             	adc    edi,0x0
c001b832:	83 ec 0c             	sub    esp,0xc
c001b835:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b839:	e8 14 ff ff ff       	call   c001b752 <RTC::get_update_in_progress_flag()>
c001b83e:	83 c4 10             	add    esp,0x10
c001b841:	84 c0                	test   al,al
c001b843:	74 10                	je     c001b855 <RTC::completeRTCRefresh()+0xeb>
c001b845:	3b 35 70 c3 03 c0    	cmp    esi,DWORD PTR ds:0xc003c370
c001b84b:	89 f8                	mov    eax,edi
c001b84d:	1b 05 74 c3 03 c0    	sbb    eax,DWORD PTR ds:0xc003c374
c001b853:	73 dd                	jae    c001b832 <RTC::completeRTCRefresh()+0xc8>
c001b855:	50                   	push   eax
c001b856:	50                   	push   eax
c001b857:	6a 00                	push   0x0
c001b859:	ff 35 a8 b9 03 c0    	push   DWORD PTR ds:0xc003b9a8
c001b85f:	e8 f4 fd fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b864:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001b868:	58                   	pop    eax
c001b869:	5a                   	pop    edx
c001b86a:	6a 02                	push   0x2
c001b86c:	ff 35 a8 b9 03 c0    	push   DWORD PTR ds:0xc003b9a8
c001b872:	e8 e1 fd fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b877:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b87b:	59                   	pop    ecx
c001b87c:	5b                   	pop    ebx
c001b87d:	6a 04                	push   0x4
c001b87f:	ff 35 a8 b9 03 c0    	push   DWORD PTR ds:0xc003b9a8
c001b885:	e8 ce fd fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b88a:	5e                   	pop    esi
c001b88b:	88 c3                	mov    bl,al
c001b88d:	5f                   	pop    edi
c001b88e:	6a 07                	push   0x7
c001b890:	ff 35 a8 b9 03 c0    	push   DWORD PTR ds:0xc003b9a8
c001b896:	e8 bd fd fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b89b:	89 c6                	mov    esi,eax
c001b89d:	58                   	pop    eax
c001b89e:	5a                   	pop    edx
c001b89f:	6a 08                	push   0x8
c001b8a1:	ff 35 a8 b9 03 c0    	push   DWORD PTR ds:0xc003b9a8
c001b8a7:	e8 ac fd fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b8ac:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b8b0:	59                   	pop    ecx
c001b8b1:	5f                   	pop    edi
c001b8b2:	6a 09                	push   0x9
c001b8b4:	ff 35 a8 b9 03 c0    	push   DWORD PTR ds:0xc003b9a8
c001b8ba:	e8 99 fd fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b8bf:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b8c3:	0f b6 f8             	movzx  edi,al
c001b8c6:	83 c4 10             	add    esp,0x10
c001b8c9:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c001b8cc:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001b8d0:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c001b8d4:	89 f1                	mov    ecx,esi
c001b8d6:	0f 94 c0             	sete   al
c001b8d9:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c001b8dd:	0f 94 c2             	sete   dl
c001b8e0:	21 d0                	and    eax,edx
c001b8e2:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c001b8e6:	0f 94 c2             	sete   dl
c001b8e9:	21 c2                	and    edx,eax
c001b8eb:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c001b8ef:	0f 94 c0             	sete   al
c001b8f2:	21 d0                	and    eax,edx
c001b8f4:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001b8f8:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c001b8fc:	0f 94 c1             	sete   cl
c001b8ff:	84 c8                	test   al,cl
c001b901:	75 28                	jne    c001b92b <RTC::completeRTCRefresh()+0x1c1>
c001b903:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b907:	89 fd                	mov    ebp,edi
c001b909:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b90d:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c001b911:	89 f0                	mov    eax,esi
c001b913:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001b917:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b91b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b91f:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b922:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001b926:	e9 f2 fe ff ff       	jmp    c001b81d <RTC::completeRTCRefresh()+0xb3>
c001b92b:	39 fd                	cmp    ebp,edi
c001b92d:	75 d4                	jne    c001b903 <RTC::completeRTCRefresh()+0x199>
c001b92f:	55                   	push   ebp
c001b930:	55                   	push   ebp
c001b931:	6a 0b                	push   0xb
c001b933:	ff 35 a8 b9 03 c0    	push   DWORD PTR ds:0xc003b9a8
c001b939:	e8 1a fd fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001b93e:	83 c4 10             	add    esp,0x10
c001b941:	89 c5                	mov    ebp,eax
c001b943:	a8 04                	test   al,0x4
c001b945:	75 75                	jne    c001b9bc <RTC::completeRTCRefresh()+0x252>
c001b947:	b1 0a                	mov    cl,0xa
c001b949:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001b94c:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b94f:	83 e2 0f             	and    edx,0xf
c001b952:	c0 e8 04             	shr    al,0x4
c001b955:	c1 ef 04             	shr    edi,0x4
c001b958:	f6 e1                	mul    cl
c001b95a:	6b ff 0a             	imul   edi,edi,0xa
c001b95d:	01 d0                	add    eax,edx
c001b95f:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001b963:	88 04 24             	mov    BYTE PTR [esp],al
c001b966:	83 e2 0f             	and    edx,0xf
c001b969:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b96d:	c0 e8 04             	shr    al,0x4
c001b970:	f6 e1                	mul    cl
c001b972:	01 d0                	add    eax,edx
c001b974:	88 da                	mov    dl,bl
c001b976:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b97a:	83 e2 0f             	and    edx,0xf
c001b97d:	88 d8                	mov    al,bl
c001b97f:	83 e3 80             	and    ebx,0xffffff80
c001b982:	c0 e8 04             	shr    al,0x4
c001b985:	83 e0 07             	and    eax,0x7
c001b988:	f6 e1                	mul    cl
c001b98a:	01 d0                	add    eax,edx
c001b98c:	89 f2                	mov    edx,esi
c001b98e:	09 c3                	or     ebx,eax
c001b990:	83 e2 0f             	and    edx,0xf
c001b993:	89 f0                	mov    eax,esi
c001b995:	c0 e8 04             	shr    al,0x4
c001b998:	f6 e1                	mul    cl
c001b99a:	8d 34 02             	lea    esi,[edx+eax*1]
c001b99d:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c001b9a1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b9a5:	83 e2 0f             	and    edx,0xf
c001b9a8:	c0 e8 04             	shr    al,0x4
c001b9ab:	f6 e1                	mul    cl
c001b9ad:	01 d0                	add    eax,edx
c001b9af:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001b9b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b9b7:	83 e0 0f             	and    eax,0xf
c001b9ba:	01 c7                	add    edi,eax
c001b9bc:	83 e5 02             	and    ebp,0x2
c001b9bf:	75 14                	jne    c001b9d5 <RTC::completeRTCRefresh()+0x26b>
c001b9c1:	84 db                	test   bl,bl
c001b9c3:	79 10                	jns    c001b9d5 <RTC::completeRTCRefresh()+0x26b>
c001b9c5:	83 e3 7f             	and    ebx,0x7f
c001b9c8:	b9 18 00 00 00       	mov    ecx,0x18
c001b9cd:	8d 43 0c             	lea    eax,[ebx+0xc]
c001b9d0:	99                   	cdq    
c001b9d1:	f7 f9                	idiv   ecx
c001b9d3:	88 d3                	mov    bl,dl
c001b9d5:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001b9db:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c001b9e1:	77 06                	ja     c001b9e9 <RTC::completeRTCRefresh()+0x27f>
c001b9e3:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c001b9e9:	0f b6 0c 24          	movzx  ecx,BYTE PTR [esp]
c001b9ed:	31 d2                	xor    edx,edx
c001b9ef:	c1 e1 10             	shl    ecx,0x10
c001b9f2:	89 d7                	mov    edi,edx
c001b9f4:	c1 e5 10             	shl    ebp,0x10
c001b9f7:	31 c0                	xor    eax,eax
c001b9f9:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001b9ff:	09 cf                	or     edi,ecx
c001ba01:	89 f1                	mov    ecx,esi
c001ba03:	89 fa                	mov    edx,edi
c001ba05:	88 c8                	mov    al,cl
c001ba07:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c001ba0b:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c001ba0f:	88 da                	mov    dl,bl
c001ba11:	0f b7 c8             	movzx  ecx,ax
c001ba14:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001ba18:	09 e9                	or     ecx,ebp
c001ba1a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ba1d:	0f b6 db             	movzx  ebx,bl
c001ba20:	50                   	push   eax
c001ba21:	50                   	push   eax
c001ba22:	53                   	push   ebx
c001ba23:	68 f4 a6 03 c0       	push   0xc003a6f4
c001ba28:	e8 d5 14 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001ba2d:	5a                   	pop    edx
c001ba2e:	59                   	pop    ecx
c001ba2f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba33:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ba37:	52                   	push   edx
c001ba38:	50                   	push   eax
c001ba39:	e8 0b 79 ff ff       	call   c0013349 <datetimeToSeconds(datetime_t)>
c001ba3e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001ba42:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001ba48:	89 93 5c 01 00 00    	mov    DWORD PTR [ebx+0x15c],edx
c001ba4e:	83 c4 3c             	add    esp,0x3c
c001ba51:	5b                   	pop    ebx
c001ba52:	5e                   	pop    esi
c001ba53:	5f                   	pop    edi
c001ba54:	5d                   	pop    ebp
c001ba55:	c3                   	ret    

c001ba56 <rtcIRQHandler(regs*, void*)>:
c001ba56:	53                   	push   ebx
c001ba57:	83 ec 10             	sub    esp,0x10
c001ba5a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ba5e:	6a 0c                	push   0xc
c001ba60:	ff 35 a8 b9 03 c0    	push   DWORD PTR ds:0xc003b9a8
c001ba66:	e8 ed fb fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001ba6b:	83 c4 10             	add    esp,0x10
c001ba6e:	84 c0                	test   al,al
c001ba70:	79 24                	jns    c001ba96 <rtcIRQHandler(regs*, void*)+0x40>
c001ba72:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001ba79:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001ba80:	66 ff 05 80 d0 03 c0 	inc    WORD PTR ds:0xc003d080
c001ba87:	75 0d                	jne    c001ba96 <rtcIRQHandler(regs*, void*)+0x40>
c001ba89:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001ba8d:	83 c4 08             	add    esp,0x8
c001ba90:	5b                   	pop    ebx
c001ba91:	e9 d4 fc ff ff       	jmp    c001b76a <RTC::completeRTCRefresh()>
c001ba96:	83 c4 08             	add    esp,0x8
c001ba99:	5b                   	pop    ebx
c001ba9a:	c3                   	ret    
c001ba9b:	90                   	nop

c001ba9c <RTC::RTC()>:
c001ba9c:	83 ec 1c             	sub    esp,0x1c
c001ba9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001baa3:	83 ec 08             	sub    esp,0x8
c001baa6:	68 0a a7 03 c0       	push   0xc003a70a
c001baab:	50                   	push   eax
c001baac:	e8 73 77 ff ff       	call   c0013224 <Clock::Clock(char const*)>
c001bab1:	83 c4 10             	add    esp,0x10
c001bab4:	ba 28 a7 03 c0       	mov    edx,0xc003a728
c001bab9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001babd:	89 10                	mov    DWORD PTR [eax],edx
c001babf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bac3:	83 ec 0c             	sub    esp,0xc
c001bac6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001baca:	6a 01                	push   0x1
c001bacc:	68 56 ba 01 c0       	push   0xc001ba56
c001bad1:	6a 08                	push   0x8
c001bad3:	50                   	push   eax
c001bad4:	e8 37 7c ff ff       	call   c0013710 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bad9:	83 c4 20             	add    esp,0x20
c001badc:	89 c2                	mov    edx,eax
c001bade:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bae2:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001bae8:	e8 9a 28 ff ff       	call   c000e387 <disableIRQs()>
c001baed:	a1 a8 b9 03 c0       	mov    eax,ds:0xc003b9a8
c001baf2:	83 ec 08             	sub    esp,0x8
c001baf5:	6a 0b                	push   0xb
c001baf7:	50                   	push   eax
c001baf8:	e8 5b fb fe ff       	call   c000b658 <Computer::readCMOS(unsigned char)>
c001bafd:	83 c4 10             	add    esp,0x10
c001bb00:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001bb04:	a1 a8 b9 03 c0       	mov    eax,ds:0xc003b9a8
c001bb09:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001bb0d:	83 ca 10             	or     edx,0x10
c001bb10:	0f b6 d2             	movzx  edx,dl
c001bb13:	83 ec 04             	sub    esp,0x4
c001bb16:	52                   	push   edx
c001bb17:	6a 0b                	push   0xb
c001bb19:	50                   	push   eax
c001bb1a:	e8 41 fc fe ff       	call   c000b760 <Computer::writeCMOS(unsigned char, unsigned char)>
c001bb1f:	83 c4 10             	add    esp,0x10
c001bb22:	83 ec 0c             	sub    esp,0xc
c001bb25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bb29:	e8 3c fc ff ff       	call   c001b76a <RTC::completeRTCRefresh()>
c001bb2e:	83 c4 10             	add    esp,0x10
c001bb31:	e8 5f 28 ff ff       	call   c000e395 <enableIRQs()>
c001bb36:	90                   	nop
c001bb37:	83 c4 1c             	add    esp,0x1c
c001bb3a:	c3                   	ret    
c001bb3b:	90                   	nop

c001bb3c <IDE::close(int, int, void*)>:
c001bb3c:	83 c8 ff             	or     eax,0xffffffff
c001bb3f:	c3                   	ret    

c001bb40 <IDE::IDE()>:
c001bb40:	83 ec 0c             	sub    esp,0xc
c001bb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb47:	83 ec 08             	sub    esp,0x8
c001bb4a:	68 5c a7 03 c0       	push   0xc003a75c
c001bb4f:	50                   	push   eax
c001bb50:	e8 e9 7f ff ff       	call   c0013b3e <HardDiskController::HardDiskController(char const*)>
c001bb55:	83 c4 10             	add    esp,0x10
c001bb58:	ba 9c a9 03 c0       	mov    edx,0xc003a99c
c001bb5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb61:	89 10                	mov    DWORD PTR [eax],edx
c001bb63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb67:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001bb6e:	90                   	nop
c001bb6f:	83 c4 0c             	add    esp,0xc
c001bb72:	c3                   	ret    
c001bb73:	90                   	nop

c001bb74 <IDE::prepareInterrupt(unsigned char)>:
c001bb74:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bb79:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bb7d:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001bb85:	c3                   	ret    

c001bb86 <selectDrive(unsigned char, unsigned char)>:
c001bb86:	c3                   	ret    
c001bb87:	90                   	nop

c001bb88 <IDE::getBase(unsigned char)>:
c001bb88:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001bb8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bb91:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001bb99:	c3                   	ret    

c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001bb9a:	55                   	push   ebp
c001bb9b:	57                   	push   edi
c001bb9c:	56                   	push   esi
c001bb9d:	53                   	push   ebx
c001bb9e:	83 ec 1c             	sub    esp,0x1c
c001bba1:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bba5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bba9:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001bbac:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bbb0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bbb4:	80 f9 03             	cmp    cl,0x3
c001bbb7:	77 51                	ja     c001bc0a <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001bbb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bbbd:	0f b6 f2             	movzx  esi,dl
c001bbc0:	0f b6 db             	movzx  ebx,bl
c001bbc3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bbc6:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001bbca:	83 ca 80             	or     edx,0xffffff80
c001bbcd:	0f b6 d2             	movzx  edx,dl
c001bbd0:	52                   	push   edx
c001bbd1:	6a 0c                	push   0xc
c001bbd3:	56                   	push   esi
c001bbd4:	57                   	push   edi
c001bbd5:	e8 c0 ff ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bbda:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001bbdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bbe3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001bbe7:	ee                   	out    dx,al
c001bbe8:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001bbed:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001bbf1:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001bbf5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bbf9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bc01:	83 c4 2c             	add    esp,0x2c
c001bc04:	5b                   	pop    ebx
c001bc05:	5e                   	pop    esi
c001bc06:	5f                   	pop    edi
c001bc07:	5d                   	pop    ebp
c001bc08:	eb 90                	jmp    c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc0a:	80 fb 07             	cmp    bl,0x7
c001bc0d:	77 12                	ja     c001bc21 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001bc0f:	0f b6 d2             	movzx  edx,dl
c001bc12:	0f b6 db             	movzx  ebx,bl
c001bc15:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001bc1d:	89 da                	mov    edx,ebx
c001bc1f:	eb 2f                	jmp    c001bc50 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001bc21:	80 fb 0d             	cmp    bl,0xd
c001bc24:	77 13                	ja     c001bc39 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001bc26:	0f b6 d2             	movzx  edx,dl
c001bc29:	0f b6 db             	movzx  ebx,bl
c001bc2c:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001bc33:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001bc37:	eb 17                	jmp    c001bc50 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001bc39:	80 fb 15             	cmp    bl,0x15
c001bc3c:	77 13                	ja     c001bc51 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001bc3e:	0f b6 d2             	movzx  edx,dl
c001bc41:	0f b6 db             	movzx  ebx,bl
c001bc44:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001bc4c:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001bc50:	ee                   	out    dx,al
c001bc51:	83 c4 1c             	add    esp,0x1c
c001bc54:	5b                   	pop    ebx
c001bc55:	5e                   	pop    esi
c001bc56:	5f                   	pop    edi
c001bc57:	5d                   	pop    ebp
c001bc58:	c3                   	ret    
c001bc59:	90                   	nop

c001bc5a <IDE::read(unsigned char, unsigned char)>:
c001bc5a:	55                   	push   ebp
c001bc5b:	57                   	push   edi
c001bc5c:	56                   	push   esi
c001bc5d:	53                   	push   ebx
c001bc5e:	83 ec 1c             	sub    esp,0x1c
c001bc61:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001bc65:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bc69:	8d 43 f8             	lea    eax,[ebx-0x8]
c001bc6c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001bc70:	3c 03                	cmp    al,0x3
c001bc72:	77 43                	ja     c001bcb7 <IDE::read(unsigned char, unsigned char)+0x5d>
c001bc74:	0f b6 f2             	movzx  esi,dl
c001bc77:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001bc7a:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001bc7e:	83 c8 80             	or     eax,0xffffff80
c001bc81:	0f b6 c0             	movzx  eax,al
c001bc84:	50                   	push   eax
c001bc85:	6a 0c                	push   0xc
c001bc87:	56                   	push   esi
c001bc88:	57                   	push   edi
c001bc89:	e8 0c ff ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc8e:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001bc93:	0f b6 c3             	movzx  eax,bl
c001bc96:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001bc9a:	ec                   	in     al,dx
c001bc9b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bc9f:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001bca4:	52                   	push   edx
c001bca5:	6a 0c                	push   0xc
c001bca7:	56                   	push   esi
c001bca8:	57                   	push   edi
c001bca9:	e8 ec fe ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bcae:	83 c4 20             	add    esp,0x20
c001bcb1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001bcb5:	eb 49                	jmp    c001bd00 <IDE::read(unsigned char, unsigned char)+0xa6>
c001bcb7:	80 fb 07             	cmp    bl,0x7
c001bcba:	77 12                	ja     c001bcce <IDE::read(unsigned char, unsigned char)+0x74>
c001bcbc:	0f b6 d2             	movzx  edx,dl
c001bcbf:	0f b6 c3             	movzx  eax,bl
c001bcc2:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001bcca:	89 c2                	mov    edx,eax
c001bccc:	eb 31                	jmp    c001bcff <IDE::read(unsigned char, unsigned char)+0xa5>
c001bcce:	80 fb 0d             	cmp    bl,0xd
c001bcd1:	77 13                	ja     c001bce6 <IDE::read(unsigned char, unsigned char)+0x8c>
c001bcd3:	0f b6 d2             	movzx  edx,dl
c001bcd6:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001bcdd:	0f b6 d3             	movzx  edx,bl
c001bce0:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bce4:	eb 19                	jmp    c001bcff <IDE::read(unsigned char, unsigned char)+0xa5>
c001bce6:	31 c0                	xor    eax,eax
c001bce8:	80 fb 15             	cmp    bl,0x15
c001bceb:	77 13                	ja     c001bd00 <IDE::read(unsigned char, unsigned char)+0xa6>
c001bced:	0f b6 d2             	movzx  edx,dl
c001bcf0:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001bcf8:	0f b6 d3             	movzx  edx,bl
c001bcfb:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bcff:	ec                   	in     al,dx
c001bd00:	83 c4 1c             	add    esp,0x1c
c001bd03:	5b                   	pop    ebx
c001bd04:	5e                   	pop    esi
c001bd05:	5f                   	pop    edi
c001bd06:	5d                   	pop    ebp
c001bd07:	c3                   	ret    

c001bd08 <IDE::waitInterrupt(unsigned char)>:
c001bd08:	55                   	push   ebp
c001bd09:	57                   	push   edi
c001bd0a:	56                   	push   esi
c001bd0b:	53                   	push   ebx
c001bd0c:	31 db                	xor    ebx,ebx
c001bd0e:	83 ec 0c             	sub    esp,0xc
c001bd11:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bd15:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001bd1a:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001bd22:	89 e8                	mov    eax,ebp
c001bd24:	84 c0                	test   al,al
c001bd26:	75 34                	jne    c001bd5c <IDE::waitInterrupt(unsigned char)+0x54>
c001bd28:	52                   	push   edx
c001bd29:	6a 0c                	push   0xc
c001bd2b:	56                   	push   esi
c001bd2c:	57                   	push   edi
c001bd2d:	e8 28 ff ff ff       	call   c001bc5a <IDE::read(unsigned char, unsigned char)>
c001bd32:	83 c4 10             	add    esp,0x10
c001bd35:	a8 01                	test   al,0x1
c001bd37:	75 2b                	jne    c001bd64 <IDE::waitInterrupt(unsigned char)+0x5c>
c001bd39:	f6 c3 04             	test   bl,0x4
c001bd3c:	75 16                	jne    c001bd54 <IDE::waitInterrupt(unsigned char)+0x4c>
c001bd3e:	83 fb 32             	cmp    ebx,0x32
c001bd41:	7e 11                	jle    c001bd54 <IDE::waitInterrupt(unsigned char)+0x4c>
c001bd43:	50                   	push   eax
c001bd44:	50                   	push   eax
c001bd45:	6a 00                	push   0x0
c001bd47:	68 80 96 98 00       	push   0x989680
c001bd4c:	e8 0c 2d ff ff       	call   c000ea5d <nanoSleep(unsigned long long)>
c001bd51:	83 c4 10             	add    esp,0x10
c001bd54:	83 fb 3c             	cmp    ebx,0x3c
c001bd57:	74 0b                	je     c001bd64 <IDE::waitInterrupt(unsigned char)+0x5c>
c001bd59:	43                   	inc    ebx
c001bd5a:	eb be                	jmp    c001bd1a <IDE::waitInterrupt(unsigned char)+0x12>
c001bd5c:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001bd64:	83 c4 0c             	add    esp,0xc
c001bd67:	89 e8                	mov    eax,ebp
c001bd69:	5b                   	pop    ebx
c001bd6a:	5e                   	pop    esi
c001bd6b:	5f                   	pop    edi
c001bd6c:	5d                   	pop    ebp
c001bd6d:	c3                   	ret    

c001bd6e <ideChannel0IRQHandler(regs*, void*)>:
c001bd6e:	83 ec 10             	sub    esp,0x10
c001bd71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd75:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001bd7c:	6a 07                	push   0x7
c001bd7e:	6a 00                	push   0x0
c001bd80:	50                   	push   eax
c001bd81:	e8 d4 fe ff ff       	call   c001bc5a <IDE::read(unsigned char, unsigned char)>
c001bd86:	83 c4 1c             	add    esp,0x1c
c001bd89:	c3                   	ret    

c001bd8a <ideChannel1IRQHandler(regs*, void*)>:
c001bd8a:	83 ec 10             	sub    esp,0x10
c001bd8d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd91:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001bd98:	6a 07                	push   0x7
c001bd9a:	6a 01                	push   0x1
c001bd9c:	50                   	push   eax
c001bd9d:	e8 b8 fe ff ff       	call   c001bc5a <IDE::read(unsigned char, unsigned char)>
c001bda2:	83 c4 1c             	add    esp,0x1c
c001bda5:	c3                   	ret    

c001bda6 <IDE::enableIRQs(unsigned char, bool)>:
c001bda6:	57                   	push   edi
c001bda7:	56                   	push   esi
c001bda8:	be 04 00 00 00       	mov    esi,0x4
c001bdad:	53                   	push   ebx
c001bdae:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001bdb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bdb7:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001bdbc:	0f 94 c0             	sete   al
c001bdbf:	d1 e0                	shl    eax,1
c001bdc1:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001bdc8:	0f b6 c0             	movzx  eax,al
c001bdcb:	50                   	push   eax
c001bdcc:	6a 0c                	push   0xc
c001bdce:	57                   	push   edi
c001bdcf:	53                   	push   ebx
c001bdd0:	e8 c5 fd ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bdd5:	83 c4 10             	add    esp,0x10
c001bdd8:	50                   	push   eax
c001bdd9:	6a 0c                	push   0xc
c001bddb:	57                   	push   edi
c001bddc:	53                   	push   ebx
c001bddd:	e8 78 fe ff ff       	call   c001bc5a <IDE::read(unsigned char, unsigned char)>
c001bde2:	83 c4 10             	add    esp,0x10
c001bde5:	4e                   	dec    esi
c001bde6:	75 f0                	jne    c001bdd8 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001bde8:	5b                   	pop    ebx
c001bde9:	5e                   	pop    esi
c001bdea:	5f                   	pop    edi
c001bdeb:	c3                   	ret    

c001bdec <IDE::open(int, int, void*)>:
c001bdec:	55                   	push   ebp
c001bded:	57                   	push   edi
c001bdee:	56                   	push   esi
c001bdef:	53                   	push   ebx
c001bdf0:	83 ec 1c             	sub    esp,0x1c
c001bdf3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bdf7:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001be00:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001be09:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001be10:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001be17:	0f 85 b0 02 00 00    	jne    c001c0cd <IDE::open(int, int, void*)+0x2e1>
c001be1d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001be23:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001be27:	83 e0 7f             	and    eax,0x7f
c001be2a:	3c 05                	cmp    al,0x5
c001be2c:	74 04                	je     c001be32 <IDE::open(int, int, void*)+0x46>
c001be2e:	3c 0f                	cmp    al,0xf
c001be30:	75 32                	jne    c001be64 <IDE::open(int, int, void*)+0x78>
c001be32:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001be38:	83 e0 fc             	and    eax,0xfffffffc
c001be3b:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001be42:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001be48:	83 e0 fc             	and    eax,0xfffffffc
c001be4b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001be52:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001be58:	83 e0 fc             	and    eax,0xfffffffc
c001be5b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001be62:	eb 14                	jmp    c001be78 <IDE::open(int, int, void*)+0x8c>
c001be64:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001be6e:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001be78:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001be7f:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001be86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001be8a:	89 c6                	mov    esi,eax
c001be8c:	bf f8 0c 00 00       	mov    edi,0xcf8
c001be91:	c1 e6 10             	shl    esi,0x10
c001be94:	89 e8                	mov    eax,ebp
c001be96:	89 fa                	mov    edx,edi
c001be98:	c1 e0 0b             	shl    eax,0xb
c001be9b:	09 f0                	or     eax,esi
c001be9d:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001bea4:	c1 e6 08             	shl    esi,0x8
c001bea7:	09 c6                	or     esi,eax
c001bea9:	89 f0                	mov    eax,esi
c001beab:	0d 08 00 00 80       	or     eax,0x80000008
c001beb0:	ef                   	out    dx,eax
c001beb1:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001beb6:	89 ca                	mov    edx,ecx
c001beb8:	ed                   	in     eax,dx
c001beb9:	c1 e8 10             	shr    eax,0x10
c001bebc:	3d ff ff 00 00       	cmp    eax,0xffff
c001bec1:	0f 84 f5 00 00 00    	je     c001bfbc <IDE::open(int, int, void*)+0x1d0>
c001bec7:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001becd:	89 fa                	mov    edx,edi
c001becf:	89 f0                	mov    eax,esi
c001bed1:	ef                   	out    dx,eax
c001bed2:	b0 fe                	mov    al,0xfe
c001bed4:	89 ca                	mov    edx,ecx
c001bed6:	ee                   	out    dx,al
c001bed7:	89 f0                	mov    eax,esi
c001bed9:	89 fa                	mov    edx,edi
c001bedb:	ef                   	out    dx,eax
c001bedc:	89 ca                	mov    edx,ecx
c001bede:	ed                   	in     eax,dx
c001bedf:	3c fe                	cmp    al,0xfe
c001bee1:	0f 85 a9 00 00 00    	jne    c001bf90 <IDE::open(int, int, void*)+0x1a4>
c001bee7:	8b 15 a8 b9 03 c0    	mov    edx,DWORD PTR ds:0xc003b9a8
c001beed:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001bef4:	74 33                	je     c001bf29 <IDE::open(int, int, void*)+0x13d>
c001bef6:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001befc:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bf00:	40                   	inc    eax
c001bf01:	83 ec 0c             	sub    esp,0xc
c001bf04:	0f b6 c0             	movzx  eax,al
c001bf07:	50                   	push   eax
c001bf08:	55                   	push   ebp
c001bf09:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bf0d:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001bf13:	51                   	push   ecx
c001bf14:	e8 37 a9 ff ff       	call   c0016850 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bf19:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bf1e:	83 c4 1c             	add    esp,0x1c
c001bf21:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bf27:	eb 0a                	jmp    c001bf33 <IDE::open(int, int, void*)+0x147>
c001bf29:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bf33:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bf3a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bf41:	c1 e1 10             	shl    ecx,0x10
c001bf44:	c1 e0 08             	shl    eax,0x8
c001bf47:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bf4c:	09 c1                	or     ecx,eax
c001bf4e:	89 fa                	mov    edx,edi
c001bf50:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bf57:	c1 e0 0b             	shl    eax,0xb
c001bf5a:	09 c1                	or     ecx,eax
c001bf5c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bf62:	89 c8                	mov    eax,ecx
c001bf64:	ef                   	out    dx,eax
c001bf65:	be fc 0c 00 00       	mov    esi,0xcfc
c001bf6a:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bf70:	89 f2                	mov    edx,esi
c001bf72:	ee                   	out    dx,al
c001bf73:	89 c8                	mov    eax,ecx
c001bf75:	89 fa                	mov    edx,edi
c001bf77:	ef                   	out    dx,eax
c001bf78:	89 f2                	mov    edx,esi
c001bf7a:	ed                   	in     eax,dx
c001bf7b:	0f b6 c0             	movzx  eax,al
c001bf7e:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bf84:	74 46                	je     c001bfcc <IDE::open(int, int, void*)+0x1e0>
c001bf86:	83 ec 0c             	sub    esp,0xc
c001bf89:	68 74 a7 03 c0       	push   0xc003a774
c001bf8e:	eb 34                	jmp    c001bfc4 <IDE::open(int, int, void*)+0x1d8>
c001bf90:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bf99:	75 17                	jne    c001bfb2 <IDE::open(int, int, void*)+0x1c6>
c001bf9b:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001bfa0:	74 07                	je     c001bfa9 <IDE::open(int, int, void*)+0x1bd>
c001bfa2:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001bfa7:	75 09                	jne    c001bfb2 <IDE::open(int, int, void*)+0x1c6>
c001bfa9:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bfb0:	eb 1a                	jmp    c001bfcc <IDE::open(int, int, void*)+0x1e0>
c001bfb2:	83 ec 0c             	sub    esp,0xc
c001bfb5:	68 7c a7 03 c0       	push   0xc003a77c
c001bfba:	eb 08                	jmp    c001bfc4 <IDE::open(int, int, void*)+0x1d8>
c001bfbc:	83 ec 0c             	sub    esp,0xc
c001bfbf:	68 ad a7 03 c0       	push   0xc003a7ad
c001bfc4:	e8 57 10 ff ff       	call   c000d020 <panic(char const*)>
c001bfc9:	83 c4 10             	add    esp,0x10
c001bfcc:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001bfd3:	79 1a                	jns    c001bfef <IDE::open(int, int, void*)+0x203>
c001bfd5:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bfdb:	83 e0 fc             	and    eax,0xfffffffc
c001bfde:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bfe5:	83 c0 08             	add    eax,0x8
c001bfe8:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bfef:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bff5:	89 c2                	mov    edx,eax
c001bff7:	83 e2 0f             	and    edx,0xf
c001bffa:	66 83 fa 08          	cmp    dx,0x8
c001bffe:	75 0a                	jne    c001c00a <IDE::open(int, int, void*)+0x21e>
c001c000:	83 e8 02             	sub    eax,0x2
c001c003:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c00a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c010:	89 c2                	mov    edx,eax
c001c012:	83 e2 0f             	and    edx,0xf
c001c015:	66 83 fa 08          	cmp    dx,0x8
c001c019:	75 0a                	jne    c001c025 <IDE::open(int, int, void*)+0x239>
c001c01b:	83 e8 02             	sub    eax,0x2
c001c01e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c025:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c02c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c033:	89 d0                	mov    eax,edx
c001c035:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c038:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c03c:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c040:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c043:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c048:	0f b6 c9             	movzx  ecx,cl
c001c04b:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c052:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c055:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c059:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c05d:	8d 50 02             	lea    edx,[eax+0x2]
c001c060:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c065:	0f b6 d2             	movzx  edx,dl
c001c068:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c06e:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c071:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c075:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c079:	8d 48 03             	lea    ecx,[eax+0x3]
c001c07c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c081:	0f b6 c9             	movzx  ecx,cl
c001c084:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c08a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c08d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c091:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c095:	8d 50 04             	lea    edx,[eax+0x4]
c001c098:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c09e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c0a3:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c0aa:	66 85 f6             	test   si,si
c001c0ad:	74 3e                	je     c001c0ed <IDE::open(int, int, void*)+0x301>
c001c0af:	0f b6 d2             	movzx  edx,dl
c001c0b2:	83 c0 05             	add    eax,0x5
c001c0b5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c0b8:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c0bc:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c0c0:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c0c6:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c0cb:	eb 20                	jmp    c001c0ed <IDE::open(int, int, void*)+0x301>
c001c0cd:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c0d7:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c0e1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c0e8:	e9 02 ff ff ff       	jmp    c001bfef <IDE::open(int, int, void*)+0x203>
c001c0ed:	52                   	push   edx
c001c0ee:	52                   	push   edx
c001c0ef:	6a 00                	push   0x0
c001c0f1:	53                   	push   ebx
c001c0f2:	e8 7d fa ff ff       	call   c001bb74 <IDE::prepareInterrupt(unsigned char)>
c001c0f7:	59                   	pop    ecx
c001c0f8:	5e                   	pop    esi
c001c0f9:	6a 01                	push   0x1
c001c0fb:	53                   	push   ebx
c001c0fc:	e8 73 fa ff ff       	call   c001bb74 <IDE::prepareInterrupt(unsigned char)>
c001c101:	83 c4 0c             	add    esp,0xc
c001c104:	6a 00                	push   0x0
c001c106:	6a 00                	push   0x0
c001c108:	53                   	push   ebx
c001c109:	e8 98 fc ff ff       	call   c001bda6 <IDE::enableIRQs(unsigned char, bool)>
c001c10e:	83 c4 0c             	add    esp,0xc
c001c111:	6a 00                	push   0x0
c001c113:	6a 01                	push   0x1
c001c115:	53                   	push   ebx
c001c116:	e8 8b fc ff ff       	call   c001bda6 <IDE::enableIRQs(unsigned char, bool)>
c001c11b:	83 c4 10             	add    esp,0x10
c001c11e:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c125:	74 40                	je     c001c167 <IDE::open(int, int, void*)+0x37b>
c001c127:	83 ec 0c             	sub    esp,0xc
c001c12a:	68 d7 a7 03 c0       	push   0xc003a7d7
c001c12f:	e8 ce 0d ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001c134:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c137:	6a 01                	push   0x1
c001c139:	68 6e bd 01 c0       	push   0xc001bd6e
c001c13e:	6a 0e                	push   0xe
c001c140:	53                   	push   ebx
c001c141:	e8 ca 75 ff ff       	call   c0013710 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c146:	83 c4 14             	add    esp,0x14
c001c149:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c14f:	53                   	push   ebx
c001c150:	6a 01                	push   0x1
c001c152:	68 8a bd 01 c0       	push   0xc001bd8a
c001c157:	6a 0f                	push   0xf
c001c159:	53                   	push   ebx
c001c15a:	e8 b1 75 ff ff       	call   c0013710 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c15f:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c165:	eb 4a                	jmp    c001c1b1 <IDE::open(int, int, void*)+0x3c5>
c001c167:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c171:	50                   	push   eax
c001c172:	6a 0f                	push   0xf
c001c174:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c17a:	68 f3 a7 03 c0       	push   0xc003a7f3
c001c17f:	e8 7e 0d ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001c184:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c187:	6a 00                	push   0x0
c001c189:	68 6e bd 01 c0       	push   0xc001bd6e
c001c18e:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c194:	53                   	push   ebx
c001c195:	e8 76 75 ff ff       	call   c0013710 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c19a:	83 c4 14             	add    esp,0x14
c001c19d:	53                   	push   ebx
c001c19e:	6a 00                	push   0x0
c001c1a0:	68 8a bd 01 c0       	push   0xc001bd8a
c001c1a5:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c1ab:	53                   	push   ebx
c001c1ac:	e8 5f 75 ff ff       	call   c0013710 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c1b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c1b3:	83 c4 20             	add    esp,0x20
c001c1b6:	83 ec 0c             	sub    esp,0xc
c001c1b9:	53                   	push   ebx
c001c1ba:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c1bd:	83 c4 0c             	add    esp,0xc
c001c1c0:	6a 07                	push   0x7
c001c1c2:	6a 00                	push   0x0
c001c1c4:	53                   	push   ebx
c001c1c5:	e8 90 fa ff ff       	call   c001bc5a <IDE::read(unsigned char, unsigned char)>
c001c1ca:	83 c4 0c             	add    esp,0xc
c001c1cd:	6a 07                	push   0x7
c001c1cf:	6a 01                	push   0x1
c001c1d1:	53                   	push   ebx
c001c1d2:	e8 83 fa ff ff       	call   c001bc5a <IDE::read(unsigned char, unsigned char)>
c001c1d7:	83 c4 0c             	add    esp,0xc
c001c1da:	6a 01                	push   0x1
c001c1dc:	6a 00                	push   0x0
c001c1de:	53                   	push   ebx
c001c1df:	e8 c2 fb ff ff       	call   c001bda6 <IDE::enableIRQs(unsigned char, bool)>
c001c1e4:	83 c4 0c             	add    esp,0xc
c001c1e7:	6a 01                	push   0x1
c001c1e9:	6a 01                	push   0x1
c001c1eb:	53                   	push   ebx
c001c1ec:	e8 b5 fb ff ff       	call   c001bda6 <IDE::enableIRQs(unsigned char, bool)>
c001c1f1:	83 c4 2c             	add    esp,0x2c
c001c1f4:	31 c0                	xor    eax,eax
c001c1f6:	5b                   	pop    ebx
c001c1f7:	5e                   	pop    esi
c001c1f8:	5f                   	pop    edi
c001c1f9:	5d                   	pop    ebp
c001c1fa:	c3                   	ret    
c001c1fb:	90                   	nop

c001c1fc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c1fc:	55                   	push   ebp
c001c1fd:	57                   	push   edi
c001c1fe:	56                   	push   esi
c001c1ff:	53                   	push   ebx
c001c200:	83 ec 1c             	sub    esp,0x1c
c001c203:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c207:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c20b:	8d 50 f8             	lea    edx,[eax-0x8]
c001c20e:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c212:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c216:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c21a:	80 fa 03             	cmp    dl,0x3
c001c21d:	77 5d                	ja     c001c27c <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001c21f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c223:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c227:	0f b6 db             	movzx  ebx,bl
c001c22a:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c22d:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001c231:	83 ca 80             	or     edx,0xffffff80
c001c234:	0f b6 d2             	movzx  edx,dl
c001c237:	52                   	push   edx
c001c238:	6a 0c                	push   0xc
c001c23a:	53                   	push   ebx
c001c23b:	56                   	push   esi
c001c23c:	e8 59 f9 ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c241:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001c246:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c24a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c24e:	0f b6 c0             	movzx  eax,al
c001c251:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001c255:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c257:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c25c:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c260:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c264:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c268:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c270:	83 c4 2c             	add    esp,0x2c
c001c273:	5b                   	pop    ebx
c001c274:	5e                   	pop    esi
c001c275:	5f                   	pop    edi
c001c276:	5d                   	pop    ebp
c001c277:	e9 1e f9 ff ff       	jmp    c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c27c:	3c 07                	cmp    al,0x7
c001c27e:	77 10                	ja     c001c290 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001c280:	0f b6 db             	movzx  ebx,bl
c001c283:	0f b6 d0             	movzx  edx,al
c001c286:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001c28e:	eb 2d                	jmp    c001c2bd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c290:	3c 0d                	cmp    al,0xd
c001c292:	77 13                	ja     c001c2a7 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001c294:	0f b6 db             	movzx  ebx,bl
c001c297:	0f b6 c0             	movzx  eax,al
c001c29a:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001c2a1:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001c2a5:	eb 16                	jmp    c001c2bd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c2a7:	3c 15                	cmp    al,0x15
c001c2a9:	77 14                	ja     c001c2bf <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001c2ab:	0f b6 db             	movzx  ebx,bl
c001c2ae:	0f b6 c0             	movzx  eax,al
c001c2b1:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001c2b9:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001c2bd:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c2bf:	83 c4 1c             	add    esp,0x1c
c001c2c2:	5b                   	pop    ebx
c001c2c3:	5e                   	pop    esi
c001c2c4:	5f                   	pop    edi
c001c2c5:	5d                   	pop    ebp
c001c2c6:	c3                   	ret    
c001c2c7:	90                   	nop

c001c2c8 <IDE::detect()>:
c001c2c8:	55                   	push   ebp
c001c2c9:	57                   	push   edi
c001c2ca:	56                   	push   esi
c001c2cb:	53                   	push   ebx
c001c2cc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c2d2:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c2d9:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c2e0:	0f 85 be 02 00 00    	jne    c001c5a4 <IDE::detect()+0x2dc>
c001c2e6:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c2ed:	31 f6                	xor    esi,esi
c001c2ef:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c2f7:	31 ed                	xor    ebp,ebp
c001c2f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c2fd:	c1 e0 06             	shl    eax,0x6
c001c300:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c308:	89 e8                	mov    eax,ebp
c001c30a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c30e:	c1 e0 04             	shl    eax,0x4
c001c311:	83 c8 a0             	or     eax,0xffffffa0
c001c314:	0f b6 c0             	movzx  eax,al
c001c317:	50                   	push   eax
c001c318:	6a 06                	push   0x6
c001c31a:	56                   	push   esi
c001c31b:	53                   	push   ebx
c001c31c:	e8 79 f8 ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c321:	83 c4 0c             	add    esp,0xc
c001c324:	6a 0c                	push   0xc
c001c326:	56                   	push   esi
c001c327:	53                   	push   ebx
c001c328:	e8 2d f9 ff ff       	call   c001bc5a <IDE::read(unsigned char, unsigned char)>
c001c32d:	83 c4 0c             	add    esp,0xc
c001c330:	6a 0c                	push   0xc
c001c332:	56                   	push   esi
c001c333:	53                   	push   ebx
c001c334:	e8 21 f9 ff ff       	call   c001bc5a <IDE::read(unsigned char, unsigned char)>
c001c339:	83 c4 0c             	add    esp,0xc
c001c33c:	6a 0c                	push   0xc
c001c33e:	56                   	push   esi
c001c33f:	53                   	push   ebx
c001c340:	e8 15 f9 ff ff       	call   c001bc5a <IDE::read(unsigned char, unsigned char)>
c001c345:	83 c4 0c             	add    esp,0xc
c001c348:	6a 0c                	push   0xc
c001c34a:	56                   	push   esi
c001c34b:	53                   	push   ebx
c001c34c:	e8 09 f9 ff ff       	call   c001bc5a <IDE::read(unsigned char, unsigned char)>
c001c351:	68 ec 00 00 00       	push   0xec
c001c356:	6a 07                	push   0x7
c001c358:	56                   	push   esi
c001c359:	53                   	push   ebx
c001c35a:	e8 3b f8 ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c35f:	83 c4 1c             	add    esp,0x1c
c001c362:	6a 0c                	push   0xc
c001c364:	56                   	push   esi
c001c365:	53                   	push   ebx
c001c366:	e8 ef f8 ff ff       	call   c001bc5a <IDE::read(unsigned char, unsigned char)>
c001c36b:	83 c4 0c             	add    esp,0xc
c001c36e:	6a 0c                	push   0xc
c001c370:	56                   	push   esi
c001c371:	53                   	push   ebx
c001c372:	e8 e3 f8 ff ff       	call   c001bc5a <IDE::read(unsigned char, unsigned char)>
c001c377:	83 c4 0c             	add    esp,0xc
c001c37a:	6a 0c                	push   0xc
c001c37c:	56                   	push   esi
c001c37d:	53                   	push   ebx
c001c37e:	e8 d7 f8 ff ff       	call   c001bc5a <IDE::read(unsigned char, unsigned char)>
c001c383:	83 c4 0c             	add    esp,0xc
c001c386:	6a 0c                	push   0xc
c001c388:	56                   	push   esi
c001c389:	53                   	push   ebx
c001c38a:	e8 cb f8 ff ff       	call   c001bc5a <IDE::read(unsigned char, unsigned char)>
c001c38f:	83 c4 0c             	add    esp,0xc
c001c392:	6a 0c                	push   0xc
c001c394:	56                   	push   esi
c001c395:	53                   	push   ebx
c001c396:	e8 bf f8 ff ff       	call   c001bc5a <IDE::read(unsigned char, unsigned char)>
c001c39b:	83 c4 10             	add    esp,0x10
c001c39e:	84 c0                	test   al,al
c001c3a0:	0f 84 8b 01 00 00    	je     c001c531 <IDE::detect()+0x269>
c001c3a6:	31 ff                	xor    edi,edi
c001c3a8:	50                   	push   eax
c001c3a9:	6a 0c                	push   0xc
c001c3ab:	56                   	push   esi
c001c3ac:	53                   	push   ebx
c001c3ad:	e8 a8 f8 ff ff       	call   c001bc5a <IDE::read(unsigned char, unsigned char)>
c001c3b2:	83 c4 10             	add    esp,0x10
c001c3b5:	a8 01                	test   al,0x1
c001c3b7:	0f 85 8e 01 00 00    	jne    c001c54b <IDE::detect()+0x283>
c001c3bd:	84 c0                	test   al,al
c001c3bf:	78 04                	js     c001c3c5 <IDE::detect()+0xfd>
c001c3c1:	a8 08                	test   al,0x8
c001c3c3:	75 27                	jne    c001c3ec <IDE::detect()+0x124>
c001c3c5:	47                   	inc    edi
c001c3c6:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c3cc:	7e da                	jle    c001c3a8 <IDE::detect()+0xe0>
c001c3ce:	50                   	push   eax
c001c3cf:	50                   	push   eax
c001c3d0:	6a 00                	push   0x0
c001c3d2:	68 40 4b 4c 00       	push   0x4c4b40
c001c3d7:	e8 81 26 ff ff       	call   c000ea5d <nanoSleep(unsigned long long)>
c001c3dc:	83 c4 10             	add    esp,0x10
c001c3df:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c3e5:	75 c1                	jne    c001c3a8 <IDE::detect()+0xe0>
c001c3e7:	e9 5f 01 00 00       	jmp    c001c54b <IDE::detect()+0x283>
c001c3ec:	31 c9                	xor    ecx,ecx
c001c3ee:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c3f2:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c3f6:	83 ec 0c             	sub    esp,0xc
c001c3f9:	68 80 00 00 00       	push   0x80
c001c3fe:	57                   	push   edi
c001c3ff:	6a 00                	push   0x0
c001c401:	56                   	push   esi
c001c402:	53                   	push   ebx
c001c403:	e8 f4 fd ff ff       	call   c001c1fc <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c408:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c40d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c411:	89 d1                	mov    ecx,edx
c001c413:	c1 e0 06             	shl    eax,0x6
c001c416:	01 d8                	add    eax,ebx
c001c418:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c41f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c426:	89 f2                	mov    edx,esi
c001c428:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c42e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c432:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c438:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c43c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c443:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c44b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c452:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c45a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c460:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c467:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c46d:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c471:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c475:	83 c4 20             	add    esp,0x20
c001c478:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c47b:	83 c0 02             	add    eax,0x2
c001c47e:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c484:	83 c7 02             	add    edi,0x2
c001c487:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c48a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c490:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c494:	75 e2                	jne    c001c478 <IDE::detect()+0x1b0>
c001c496:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c49a:	c1 e0 06             	shl    eax,0x6
c001c49d:	01 d8                	add    eax,ebx
c001c49f:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001c4a5:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c4ac:	66 c1 ea 09          	shr    dx,0x9
c001c4b0:	83 e2 01             	and    edx,0x1
c001c4b3:	84 c9                	test   cl,cl
c001c4b5:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c4bb:	75 2f                	jne    c001c4ec <IDE::detect()+0x224>
c001c4bd:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001c4c3:	85 c0                	test   eax,eax
c001c4c5:	74 66                	je     c001c52d <IDE::detect()+0x265>
c001c4c7:	50                   	push   eax
c001c4c8:	55                   	push   ebp
c001c4c9:	56                   	push   esi
c001c4ca:	68 0f a8 03 c0       	push   0xc003a80f
c001c4cf:	e8 2e 0a ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001c4d4:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c4db:	e8 d2 5f ff ff       	call   c00124b2 <operator new(unsigned long)>
c001c4e0:	89 c7                	mov    edi,eax
c001c4e2:	89 04 24             	mov    DWORD PTR [esp],eax
c001c4e5:	e8 e8 02 00 00       	call   c001c7d2 <ATA::ATA()>
c001c4ea:	eb 28                	jmp    c001c514 <IDE::detect()+0x24c>
c001c4ec:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001c4f2:	55                   	push   ebp
c001c4f3:	56                   	push   esi
c001c4f4:	68 3e a8 03 c0       	push   0xc003a83e
c001c4f9:	e8 04 0a ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001c4fe:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001c505:	e8 a8 5f ff ff       	call   c00124b2 <operator new(unsigned long)>
c001c50a:	89 c7                	mov    edi,eax
c001c50c:	89 04 24             	mov    DWORD PTR [esp],eax
c001c50f:	e8 ee 08 00 00       	call   c001ce02 <ATAPI::ATAPI()>
c001c514:	5a                   	pop    edx
c001c515:	59                   	pop    ecx
c001c516:	57                   	push   edi
c001c517:	53                   	push   ebx
c001c518:	e8 9f 72 ff ff       	call   c00137bc <Device::addChild(Device*)>
c001c51d:	8b 07                	mov    eax,DWORD PTR [edi]
c001c51f:	53                   	push   ebx
c001c520:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c524:	6a 00                	push   0x0
c001c526:	57                   	push   edi
c001c527:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c52a:	83 c4 20             	add    esp,0x20
c001c52d:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001c531:	4d                   	dec    ebp
c001c532:	74 0a                	je     c001c53e <IDE::detect()+0x276>
c001c534:	bd 01 00 00 00       	mov    ebp,0x1
c001c539:	e9 bb fd ff ff       	jmp    c001c2f9 <IDE::detect()+0x31>
c001c53e:	4e                   	dec    esi
c001c53f:	74 63                	je     c001c5a4 <IDE::detect()+0x2dc>
c001c541:	be 01 00 00 00       	mov    esi,0x1
c001c546:	e9 ac fd ff ff       	jmp    c001c2f7 <IDE::detect()+0x2f>
c001c54b:	50                   	push   eax
c001c54c:	6a 04                	push   0x4
c001c54e:	56                   	push   esi
c001c54f:	53                   	push   ebx
c001c550:	e8 05 f7 ff ff       	call   c001bc5a <IDE::read(unsigned char, unsigned char)>
c001c555:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c559:	83 c4 0c             	add    esp,0xc
c001c55c:	6a 05                	push   0x5
c001c55e:	56                   	push   esi
c001c55f:	53                   	push   ebx
c001c560:	e8 f5 f6 ff ff       	call   c001bc5a <IDE::read(unsigned char, unsigned char)>
c001c565:	83 c4 10             	add    esp,0x10
c001c568:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001c56c:	80 fa 14             	cmp    dl,0x14
c001c56f:	75 04                	jne    c001c575 <IDE::detect()+0x2ad>
c001c571:	3c eb                	cmp    al,0xeb
c001c573:	eb 07                	jmp    c001c57c <IDE::detect()+0x2b4>
c001c575:	3c 96                	cmp    al,0x96
c001c577:	75 b8                	jne    c001c531 <IDE::detect()+0x269>
c001c579:	80 fa 69             	cmp    dl,0x69
c001c57c:	75 b3                	jne    c001c531 <IDE::detect()+0x269>
c001c57e:	68 a1 00 00 00       	push   0xa1
c001c583:	6a 07                	push   0x7
c001c585:	56                   	push   esi
c001c586:	53                   	push   ebx
c001c587:	e8 0e f6 ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c58c:	5f                   	pop    edi
c001c58d:	58                   	pop    eax
c001c58e:	6a 00                	push   0x0
c001c590:	68 40 42 0f 00       	push   0xf4240
c001c595:	e8 c3 24 ff ff       	call   c000ea5d <nanoSleep(unsigned long long)>
c001c59a:	83 c4 10             	add    esp,0x10
c001c59d:	b1 01                	mov    cl,0x1
c001c59f:	e9 4a fe ff ff       	jmp    c001c3ee <IDE::detect()+0x126>
c001c5a4:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c5aa:	5b                   	pop    ebx
c001c5ab:	5e                   	pop    esi
c001c5ac:	5f                   	pop    edi
c001c5ad:	5d                   	pop    ebp
c001c5ae:	c3                   	ret    
c001c5af:	90                   	nop

c001c5b0 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c5b0:	55                   	push   ebp
c001c5b1:	57                   	push   edi
c001c5b2:	56                   	push   esi
c001c5b3:	53                   	push   ebx
c001c5b4:	83 ec 1c             	sub    esp,0x1c
c001c5b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c5bb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c5bf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c5c3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001c5c7:	88 c3                	mov    bl,al
c001c5c9:	84 c0                	test   al,al
c001c5cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c5cf:	0f 84 67 01 00 00    	je     c001c73c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001c5d5:	83 ec 0c             	sub    esp,0xc
c001c5d8:	68 6f a8 03 c0       	push   0xc003a86f
c001c5dd:	e8 20 09 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001c5e2:	83 c4 10             	add    esp,0x10
c001c5e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c5e9:	3c 01                	cmp    al,0x1
c001c5eb:	75 17                	jne    c001c604 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001c5ed:	83 ec 0c             	sub    esp,0xc
c001c5f0:	b3 13                	mov    bl,0x13
c001c5f2:	68 7b a8 03 c0       	push   0xc003a87b
c001c5f7:	e8 06 09 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001c5fc:	83 c4 10             	add    esp,0x10
c001c5ff:	e9 25 01 00 00       	jmp    c001c729 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c604:	3c 02                	cmp    al,0x2
c001c606:	0f 85 ef 00 00 00    	jne    c001c6fb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001c60c:	d1 e6                	shl    esi,1
c001c60e:	09 ee                	or     esi,ebp
c001c610:	52                   	push   edx
c001c611:	89 f0                	mov    eax,esi
c001c613:	6a 01                	push   0x1
c001c615:	0f b6 f0             	movzx  esi,al
c001c618:	c1 e6 06             	shl    esi,0x6
c001c61b:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001c623:	50                   	push   eax
c001c624:	57                   	push   edi
c001c625:	e8 30 f6 ff ff       	call   c001bc5a <IDE::read(unsigned char, unsigned char)>
c001c62a:	83 c4 10             	add    esp,0x10
c001c62d:	89 c6                	mov    esi,eax
c001c62f:	a8 01                	test   al,0x1
c001c631:	74 12                	je     c001c645 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001c633:	83 ec 0c             	sub    esp,0xc
c001c636:	b3 07                	mov    bl,0x7
c001c638:	68 90 a8 03 c0       	push   0xc003a890
c001c63d:	e8 c0 08 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001c642:	83 c4 10             	add    esp,0x10
c001c645:	f7 c6 02 00 00 00    	test   esi,0x2
c001c64b:	74 12                	je     c001c65f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001c64d:	83 ec 0c             	sub    esp,0xc
c001c650:	b3 03                	mov    bl,0x3
c001c652:	68 ae a8 03 c0       	push   0xc003a8ae
c001c657:	e8 a6 08 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001c65c:	83 c4 10             	add    esp,0x10
c001c65f:	f7 c6 04 00 00 00    	test   esi,0x4
c001c665:	74 12                	je     c001c679 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001c667:	83 ec 0c             	sub    esp,0xc
c001c66a:	b3 14                	mov    bl,0x14
c001c66c:	68 ce a8 03 c0       	push   0xc003a8ce
c001c671:	e8 8c 08 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001c676:	83 c4 10             	add    esp,0x10
c001c679:	f7 c6 08 00 00 00    	test   esi,0x8
c001c67f:	74 12                	je     c001c693 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001c681:	83 ec 0c             	sub    esp,0xc
c001c684:	b3 03                	mov    bl,0x3
c001c686:	68 ae a8 03 c0       	push   0xc003a8ae
c001c68b:	e8 72 08 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001c690:	83 c4 10             	add    esp,0x10
c001c693:	f7 c6 10 00 00 00    	test   esi,0x10
c001c699:	74 12                	je     c001c6ad <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001c69b:	83 ec 0c             	sub    esp,0xc
c001c69e:	b3 15                	mov    bl,0x15
c001c6a0:	68 e6 a8 03 c0       	push   0xc003a8e6
c001c6a5:	e8 58 08 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001c6aa:	83 c4 10             	add    esp,0x10
c001c6ad:	f7 c6 20 00 00 00    	test   esi,0x20
c001c6b3:	74 12                	je     c001c6c7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001c6b5:	83 ec 0c             	sub    esp,0xc
c001c6b8:	b3 03                	mov    bl,0x3
c001c6ba:	68 ae a8 03 c0       	push   0xc003a8ae
c001c6bf:	e8 3e 08 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001c6c4:	83 c4 10             	add    esp,0x10
c001c6c7:	f7 c6 40 00 00 00    	test   esi,0x40
c001c6cd:	74 12                	je     c001c6e1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001c6cf:	83 ec 0c             	sub    esp,0xc
c001c6d2:	b3 16                	mov    bl,0x16
c001c6d4:	68 00 a9 03 c0       	push   0xc003a900
c001c6d9:	e8 24 08 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001c6de:	83 c4 10             	add    esp,0x10
c001c6e1:	89 f0                	mov    eax,esi
c001c6e3:	84 c0                	test   al,al
c001c6e5:	79 42                	jns    c001c729 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c6e7:	83 ec 0c             	sub    esp,0xc
c001c6ea:	b3 0d                	mov    bl,0xd
c001c6ec:	68 21 a9 03 c0       	push   0xc003a921
c001c6f1:	e8 0c 08 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001c6f6:	83 c4 10             	add    esp,0x10
c001c6f9:	eb 2e                	jmp    c001c729 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c6fb:	3c 03                	cmp    al,0x3
c001c6fd:	75 14                	jne    c001c713 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001c6ff:	83 ec 0c             	sub    esp,0xc
c001c702:	b3 17                	mov    bl,0x17
c001c704:	68 35 a9 03 c0       	push   0xc003a935
c001c709:	e8 f4 07 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001c70e:	83 c4 10             	add    esp,0x10
c001c711:	eb 16                	jmp    c001c729 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c713:	3c 04                	cmp    al,0x4
c001c715:	75 12                	jne    c001c729 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c717:	83 ec 0c             	sub    esp,0xc
c001c71a:	b3 08                	mov    bl,0x8
c001c71c:	68 4b a9 03 c0       	push   0xc003a94b
c001c721:	e8 dc 07 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001c726:	83 c4 10             	add    esp,0x10
c001c729:	50                   	push   eax
c001c72a:	50                   	push   eax
c001c72b:	0f b6 c3             	movzx  eax,bl
c001c72e:	50                   	push   eax
c001c72f:	68 63 a9 03 c0       	push   0xc003a963
c001c734:	e8 c9 07 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001c739:	83 c4 10             	add    esp,0x10
c001c73c:	83 c4 1c             	add    esp,0x1c
c001c73f:	88 d8                	mov    al,bl
c001c741:	5b                   	pop    ebx
c001c742:	5e                   	pop    esi
c001c743:	5f                   	pop    edi
c001c744:	5d                   	pop    ebp
c001c745:	c3                   	ret    

c001c746 <IDE::polling(unsigned char, unsigned int)>:
c001c746:	57                   	push   edi
c001c747:	56                   	push   esi
c001c748:	53                   	push   ebx
c001c749:	bb 04 00 00 00       	mov    ebx,0x4
c001c74e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c752:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c757:	52                   	push   edx
c001c758:	6a 0c                	push   0xc
c001c75a:	56                   	push   esi
c001c75b:	57                   	push   edi
c001c75c:	e8 f9 f4 ff ff       	call   c001bc5a <IDE::read(unsigned char, unsigned char)>
c001c761:	83 c4 10             	add    esp,0x10
c001c764:	4b                   	dec    ebx
c001c765:	75 f0                	jne    c001c757 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c767:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c76c:	50                   	push   eax
c001c76d:	6a 0c                	push   0xc
c001c76f:	56                   	push   esi
c001c770:	57                   	push   edi
c001c771:	e8 e4 f4 ff ff       	call   c001bc5a <IDE::read(unsigned char, unsigned char)>
c001c776:	83 c4 10             	add    esp,0x10
c001c779:	a8 01                	test   al,0x1
c001c77b:	74 12                	je     c001c78f <IDE::polling(unsigned char, unsigned int)+0x49>
c001c77d:	83 ec 0c             	sub    esp,0xc
c001c780:	68 7d a9 03 c0       	push   0xc003a97d
c001c785:	e8 78 07 ff ff       	call   c000cf02 <kprintf(char const*, ...)>
c001c78a:	83 c4 10             	add    esp,0x10
c001c78d:	eb 17                	jmp    c001c7a6 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c78f:	a8 20                	test   al,0x20
c001c791:	75 0f                	jne    c001c7a2 <IDE::polling(unsigned char, unsigned int)+0x5c>
c001c793:	4b                   	dec    ebx
c001c794:	74 10                	je     c001c7a6 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c796:	84 c0                	test   al,al
c001c798:	78 d2                	js     c001c76c <IDE::polling(unsigned char, unsigned int)+0x26>
c001c79a:	a8 08                	test   al,0x8
c001c79c:	74 ce                	je     c001c76c <IDE::polling(unsigned char, unsigned int)+0x26>
c001c79e:	31 c0                	xor    eax,eax
c001c7a0:	eb 06                	jmp    c001c7a8 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c7a2:	b0 01                	mov    al,0x1
c001c7a4:	eb 02                	jmp    c001c7a8 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c7a6:	b0 02                	mov    al,0x2
c001c7a8:	5b                   	pop    ebx
c001c7a9:	5e                   	pop    esi
c001c7aa:	5f                   	pop    edi
c001c7ab:	c3                   	ret    

c001c7ac <ATA::close(int, int, void*)>:
c001c7ac:	83 ec 0c             	sub    esp,0xc
c001c7af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c7b9:	85 c0                	test   eax,eax
c001c7bb:	74 0c                	je     c001c7c9 <ATA::close(int, int, void*)+0x1d>
c001c7bd:	83 ec 0c             	sub    esp,0xc
c001c7c0:	8b 10                	mov    edx,DWORD PTR [eax]
c001c7c2:	50                   	push   eax
c001c7c3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c7c6:	83 c4 10             	add    esp,0x10
c001c7c9:	31 c0                	xor    eax,eax
c001c7cb:	83 c4 0c             	add    esp,0xc
c001c7ce:	c3                   	ret    
c001c7cf:	90                   	nop

c001c7d0 <ATA::powerSaving(PowerSavingLevel)>:
c001c7d0:	c3                   	ret    
c001c7d1:	90                   	nop

c001c7d2 <ATA::ATA()>:
c001c7d2:	83 ec 0c             	sub    esp,0xc
c001c7d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7d9:	83 ec 04             	sub    esp,0x4
c001c7dc:	68 00 02 00 00       	push   0x200
c001c7e1:	68 c0 a9 03 c0       	push   0xc003a9c0
c001c7e6:	50                   	push   eax
c001c7e7:	e8 d6 73 ff ff       	call   c0013bc2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c7ec:	83 c4 10             	add    esp,0x10
c001c7ef:	ba ec a9 03 c0       	mov    edx,0xc003a9ec
c001c7f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7f8:	89 10                	mov    DWORD PTR [eax],edx
c001c7fa:	90                   	nop
c001c7fb:	83 c4 0c             	add    esp,0xc
c001c7fe:	c3                   	ret    
c001c7ff:	90                   	nop

c001c800 <ATA::flush(bool)>:
c001c800:	53                   	push   ebx
c001c801:	83 ec 08             	sub    esp,0x8
c001c804:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001c809:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c80d:	19 c0                	sbb    eax,eax
c001c80f:	83 e0 fd             	and    eax,0xfffffffd
c001c812:	05 ea 00 00 00       	add    eax,0xea
c001c817:	50                   	push   eax
c001c818:	6a 07                	push   0x7
c001c81a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c821:	50                   	push   eax
c001c822:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c828:	e8 6d f3 ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c82d:	83 c4 0c             	add    esp,0xc
c001c830:	6a 00                	push   0x0
c001c832:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c839:	50                   	push   eax
c001c83a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c840:	e8 01 ff ff ff       	call   c001c746 <IDE::polling(unsigned char, unsigned int)>
c001c845:	83 c4 18             	add    esp,0x18
c001c848:	5b                   	pop    ebx
c001c849:	c3                   	ret    

c001c84a <ATA::readyForCommand()>:
c001c84a:	56                   	push   esi
c001c84b:	53                   	push   ebx
c001c84c:	31 db                	xor    ebx,ebx
c001c84e:	50                   	push   eax
c001c84f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c853:	50                   	push   eax
c001c854:	6a 0c                	push   0xc
c001c856:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c85d:	50                   	push   eax
c001c85e:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c864:	e8 f1 f3 ff ff       	call   c001bc5a <IDE::read(unsigned char, unsigned char)>
c001c869:	83 c4 10             	add    esp,0x10
c001c86c:	a8 88                	test   al,0x88
c001c86e:	74 23                	je     c001c893 <ATA::readyForCommand()+0x49>
c001c870:	43                   	inc    ebx
c001c871:	83 fb 63             	cmp    ebx,0x63
c001c874:	7e dd                	jle    c001c853 <ATA::readyForCommand()+0x9>
c001c876:	51                   	push   ecx
c001c877:	51                   	push   ecx
c001c878:	6a 00                	push   0x0
c001c87a:	68 40 42 0f 00       	push   0xf4240
c001c87f:	e8 d9 21 ff ff       	call   c000ea5d <nanoSleep(unsigned long long)>
c001c884:	83 c4 10             	add    esp,0x10
c001c887:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c88d:	75 c4                	jne    c001c853 <ATA::readyForCommand()+0x9>
c001c88f:	31 c0                	xor    eax,eax
c001c891:	eb 02                	jmp    c001c895 <ATA::readyForCommand()+0x4b>
c001c893:	b0 01                	mov    al,0x1
c001c895:	5a                   	pop    edx
c001c896:	5b                   	pop    ebx
c001c897:	5e                   	pop    esi
c001c898:	c3                   	ret    
c001c899:	90                   	nop

c001c89a <ATA::access(unsigned long long, int, void*, bool)>:
c001c89a:	55                   	push   ebp
c001c89b:	57                   	push   edi
c001c89c:	56                   	push   esi
c001c89d:	53                   	push   ebx
c001c89e:	83 ec 2c             	sub    esp,0x2c
c001c8a1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c8a5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c8a9:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c8ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c8b1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c8b5:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c8b9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c8bd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c8c3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c8c7:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c8cd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c8d1:	c1 e0 06             	shl    eax,0x6
c001c8d4:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c8dc:	74 5d                	je     c001c93b <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c8de:	89 fa                	mov    edx,edi
c001c8e0:	89 f0                	mov    eax,esi
c001c8e2:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c8e6:	c1 ea 1c             	shr    edx,0x1c
c001c8e9:	89 d1                	mov    ecx,edx
c001c8eb:	09 c1                	or     ecx,eax
c001c8ed:	74 25                	je     c001c914 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c8ef:	31 ed                	xor    ebp,ebp
c001c8f1:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c8f8:	89 fa                	mov    edx,edi
c001c8fa:	89 f0                	mov    eax,esi
c001c8fc:	0f ad d0             	shrd   eax,edx,cl
c001c8ff:	d3 ea                	shr    edx,cl
c001c901:	f6 c1 20             	test   cl,0x20
c001c904:	74 02                	je     c001c908 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c906:	89 d0                	mov    eax,edx
c001c908:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c90c:	45                   	inc    ebp
c001c90d:	83 fd 06             	cmp    ebp,0x6
c001c910:	75 df                	jne    c001c8f1 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c912:	eb 76                	jmp    c001c98a <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c914:	89 f0                	mov    eax,esi
c001c916:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c91b:	89 fa                	mov    edx,edi
c001c91d:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c924:	0f ac d0 10          	shrd   eax,edx,0x10
c001c928:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c92d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c931:	c1 ee 18             	shr    esi,0x18
c001c934:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c939:	eb 56                	jmp    c001c991 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c93b:	6a 00                	push   0x0
c001c93d:	6a 3f                	push   0x3f
c001c93f:	57                   	push   edi
c001c940:	56                   	push   esi
c001c941:	e8 d6 1e 00 00       	call   c001e81c <__umoddi3>
c001c946:	83 c4 10             	add    esp,0x10
c001c949:	40                   	inc    eax
c001c94a:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c94e:	6a 00                	push   0x0
c001c950:	68 f0 03 00 00       	push   0x3f0
c001c955:	57                   	push   edi
c001c956:	56                   	push   esi
c001c957:	e8 c0 1d 00 00       	call   c001e71c <__udivdi3>
c001c95c:	83 c4 10             	add    esp,0x10
c001c95f:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c964:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c96b:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c970:	6a 00                	push   0x0
c001c972:	6a 3f                	push   0x3f
c001c974:	57                   	push   edi
c001c975:	56                   	push   esi
c001c976:	e8 a1 1d 00 00       	call   c001e71c <__udivdi3>
c001c97b:	83 c4 10             	add    esp,0x10
c001c97e:	89 c6                	mov    esi,eax
c001c980:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c985:	83 e6 0f             	and    esi,0xf
c001c988:	eb 07                	jmp    c001c991 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c98a:	31 f6                	xor    esi,esi
c001c98c:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c991:	bf 01 00 00 00       	mov    edi,0x1
c001c996:	50                   	push   eax
c001c997:	6a 00                	push   0x0
c001c999:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9a0:	50                   	push   eax
c001c9a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c9a5:	e8 fc f3 ff ff       	call   c001bda6 <IDE::enableIRQs(unsigned char, bool)>
c001c9aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c9ad:	e8 98 fe ff ff       	call   c001c84a <ATA::readyForCommand()>
c001c9b2:	83 c4 10             	add    esp,0x10
c001c9b5:	84 c0                	test   al,al
c001c9b7:	0f 84 50 02 00 00    	je     c001cc0d <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c9bd:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c9c3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c9c9:	c1 e0 04             	shl    eax,0x4
c001c9cc:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c9d3:	09 c6                	or     esi,eax
c001c9d5:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001c9da:	75 05                	jne    c001c9e1 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c9dc:	83 ce a0             	or     esi,0xffffffa0
c001c9df:	eb 03                	jmp    c001c9e4 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c9e1:	83 ce e0             	or     esi,0xffffffe0
c001c9e4:	89 f0                	mov    eax,esi
c001c9e6:	0f b6 f0             	movzx  esi,al
c001c9e9:	56                   	push   esi
c001c9ea:	6a 06                	push   0x6
c001c9ec:	51                   	push   ecx
c001c9ed:	52                   	push   edx
c001c9ee:	e8 a7 f1 ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9f3:	83 c4 10             	add    esp,0x10
c001c9f6:	6a 00                	push   0x0
c001c9f8:	6a 01                	push   0x1
c001c9fa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca01:	50                   	push   eax
c001ca02:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca08:	e8 8d f1 ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca0d:	83 c4 10             	add    esp,0x10
c001ca10:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001ca15:	75 6e                	jne    c001ca85 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001ca17:	6a 00                	push   0x0
c001ca19:	6a 08                	push   0x8
c001ca1b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca22:	50                   	push   eax
c001ca23:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca29:	e8 6c f1 ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca2e:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001ca33:	50                   	push   eax
c001ca34:	6a 09                	push   0x9
c001ca36:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca3d:	50                   	push   eax
c001ca3e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca44:	e8 51 f1 ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca49:	83 c4 20             	add    esp,0x20
c001ca4c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001ca51:	50                   	push   eax
c001ca52:	6a 0a                	push   0xa
c001ca54:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca5b:	50                   	push   eax
c001ca5c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca62:	e8 33 f1 ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca67:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001ca6c:	50                   	push   eax
c001ca6d:	6a 0b                	push   0xb
c001ca6f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca76:	50                   	push   eax
c001ca77:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca7d:	e8 18 f1 ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca82:	83 c4 20             	add    esp,0x20
c001ca85:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001ca8a:	50                   	push   eax
c001ca8b:	6a 02                	push   0x2
c001ca8d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca94:	50                   	push   eax
c001ca95:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca9b:	e8 fa f0 ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caa0:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001caa5:	50                   	push   eax
c001caa6:	6a 03                	push   0x3
c001caa8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001caaf:	50                   	push   eax
c001cab0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cab6:	e8 df f0 ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cabb:	83 c4 20             	add    esp,0x20
c001cabe:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001cac3:	50                   	push   eax
c001cac4:	6a 04                	push   0x4
c001cac6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cacd:	50                   	push   eax
c001cace:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cad4:	e8 c1 f0 ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cad9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cade:	50                   	push   eax
c001cadf:	6a 05                	push   0x5
c001cae1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cae8:	50                   	push   eax
c001cae9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001caef:	e8 a6 f0 ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001caf4:	83 c4 20             	add    esp,0x20
c001caf7:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001cafc:	0f 94 c0             	sete   al
c001caff:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cb04:	74 09                	je     c001cb0f <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001cb06:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001cb0d:	eb 07                	jmp    c001cb16 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001cb0f:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001cb16:	0f b6 c0             	movzx  eax,al
c001cb19:	50                   	push   eax
c001cb1a:	6a 07                	push   0x7
c001cb1c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb23:	50                   	push   eax
c001cb24:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb2a:	e8 6b f0 ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb2f:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001cb33:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001cb37:	83 c4 10             	add    esp,0x10
c001cb3a:	85 f6                	test   esi,esi
c001cb3c:	0f 84 ac 00 00 00    	je     c001cbee <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001cb42:	50                   	push   eax
c001cb43:	6a 01                	push   0x1
c001cb45:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb4c:	50                   	push   eax
c001cb4d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb53:	e8 ee fb ff ff       	call   c001c746 <IDE::polling(unsigned char, unsigned int)>
c001cb58:	83 c4 10             	add    esp,0x10
c001cb5b:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001cb61:	84 c0                	test   al,al
c001cb63:	74 20                	je     c001cb85 <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001cb65:	0f b6 f8             	movzx  edi,al
c001cb68:	0f b6 d2             	movzx  edx,dl
c001cb6b:	57                   	push   edi
c001cb6c:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001cb73:	50                   	push   eax
c001cb74:	52                   	push   edx
c001cb75:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cb7b:	e8 30 fa ff ff       	call   c001c5b0 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cb80:	e9 85 00 00 00       	jmp    c001cc0a <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001cb85:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001cb8a:	74 41                	je     c001cbcd <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001cb8c:	31 c9                	xor    ecx,ecx
c001cb8e:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001cb92:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001cb96:	50                   	push   eax
c001cb97:	50                   	push   eax
c001cb98:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cb9f:	50                   	push   eax
c001cba0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cba6:	e8 dd ef ff ff       	call   c001bb88 <IDE::getBase(unsigned char)>
c001cbab:	89 c2                	mov    edx,eax
c001cbad:	89 e8                	mov    eax,ebp
c001cbaf:	66 ef                	out    dx,ax
c001cbb1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001cbb5:	83 c4 10             	add    esp,0x10
c001cbb8:	41                   	inc    ecx
c001cbb9:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001cbbf:	75 cd                	jne    c001cb8e <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001cbc1:	4e                   	dec    esi
c001cbc2:	81 c7 00 02 00 00    	add    edi,0x200
c001cbc8:	e9 6d ff ff ff       	jmp    c001cb3a <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001cbcd:	0f b6 d2             	movzx  edx,dl
c001cbd0:	51                   	push   ecx
c001cbd1:	51                   	push   ecx
c001cbd2:	52                   	push   edx
c001cbd3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbd9:	e8 aa ef ff ff       	call   c001bb88 <IDE::getBase(unsigned char)>
c001cbde:	b9 00 01 00 00       	mov    ecx,0x100
c001cbe3:	89 c2                	mov    edx,eax
c001cbe5:	fc                   	cld    
c001cbe6:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cbe9:	83 c4 10             	add    esp,0x10
c001cbec:	eb d3                	jmp    c001cbc1 <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001cbee:	31 ff                	xor    edi,edi
c001cbf0:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cbf5:	74 16                	je     c001cc0d <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001cbf7:	50                   	push   eax
c001cbf8:	50                   	push   eax
c001cbf9:	31 c0                	xor    eax,eax
c001cbfb:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001cc00:	0f 94 c0             	sete   al
c001cc03:	50                   	push   eax
c001cc04:	53                   	push   ebx
c001cc05:	e8 f6 fb ff ff       	call   c001c800 <ATA::flush(bool)>
c001cc0a:	83 c4 10             	add    esp,0x10
c001cc0d:	83 c4 2c             	add    esp,0x2c
c001cc10:	89 f8                	mov    eax,edi
c001cc12:	5b                   	pop    ebx
c001cc13:	5e                   	pop    esi
c001cc14:	5f                   	pop    edi
c001cc15:	5d                   	pop    ebp
c001cc16:	c3                   	ret    
c001cc17:	90                   	nop

c001cc18 <ATA::read(unsigned long long, int, void*)>:
c001cc18:	57                   	push   edi
c001cc19:	b8 04 00 00 00       	mov    eax,0x4
c001cc1e:	56                   	push   esi
c001cc1f:	53                   	push   ebx
c001cc20:	83 ec 10             	sub    esp,0x10
c001cc23:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cc27:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cc2b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001cc2e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cc32:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cc36:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001cc3c:	77 3b                	ja     c001cc79 <ATA::read(unsigned long long, int, void*)+0x61>
c001cc3e:	b8 06 00 00 00       	mov    eax,0x6
c001cc43:	85 d2                	test   edx,edx
c001cc45:	74 32                	je     c001cc79 <ATA::read(unsigned long long, int, void*)+0x61>
c001cc47:	50                   	push   eax
c001cc48:	50                   	push   eax
c001cc49:	6a 00                	push   0x0
c001cc4b:	52                   	push   edx
c001cc4c:	53                   	push   ebx
c001cc4d:	57                   	push   edi
c001cc4e:	56                   	push   esi
c001cc4f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cc53:	e8 42 fc ff ff       	call   c001c89a <ATA::access(unsigned long long, int, void*, bool)>
c001cc58:	83 c4 20             	add    esp,0x20
c001cc5b:	85 c0                	test   eax,eax
c001cc5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cc61:	75 11                	jne    c001cc74 <ATA::read(unsigned long long, int, void*)+0x5c>
c001cc63:	01 1d 88 d0 03 c0    	add    DWORD PTR ds:0xc003d088,ebx
c001cc69:	e8 c2 36 ff ff       	call   c0010330 <VgaText::updateDiskUsage()>
c001cc6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc72:	eb 05                	jmp    c001cc79 <ATA::read(unsigned long long, int, void*)+0x61>
c001cc74:	b8 01 00 00 00       	mov    eax,0x1
c001cc79:	83 c4 10             	add    esp,0x10
c001cc7c:	5b                   	pop    ebx
c001cc7d:	5e                   	pop    esi
c001cc7e:	5f                   	pop    edi
c001cc7f:	c3                   	ret    

c001cc80 <ATA::write(unsigned long long, int, void*)>:
c001cc80:	57                   	push   edi
c001cc81:	b8 04 00 00 00       	mov    eax,0x4
c001cc86:	56                   	push   esi
c001cc87:	53                   	push   ebx
c001cc88:	83 ec 10             	sub    esp,0x10
c001cc8b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cc8f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001cc93:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001cc96:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001cc9a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cc9e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001cca4:	77 3b                	ja     c001cce1 <ATA::write(unsigned long long, int, void*)+0x61>
c001cca6:	b8 06 00 00 00       	mov    eax,0x6
c001ccab:	85 d2                	test   edx,edx
c001ccad:	74 32                	je     c001cce1 <ATA::write(unsigned long long, int, void*)+0x61>
c001ccaf:	50                   	push   eax
c001ccb0:	50                   	push   eax
c001ccb1:	6a 01                	push   0x1
c001ccb3:	52                   	push   edx
c001ccb4:	53                   	push   ebx
c001ccb5:	57                   	push   edi
c001ccb6:	56                   	push   esi
c001ccb7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ccbb:	e8 da fb ff ff       	call   c001c89a <ATA::access(unsigned long long, int, void*, bool)>
c001ccc0:	83 c4 20             	add    esp,0x20
c001ccc3:	85 c0                	test   eax,eax
c001ccc5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ccc9:	75 11                	jne    c001ccdc <ATA::write(unsigned long long, int, void*)+0x5c>
c001cccb:	01 1d 84 d0 03 c0    	add    DWORD PTR ds:0xc003d084,ebx
c001ccd1:	e8 5a 36 ff ff       	call   c0010330 <VgaText::updateDiskUsage()>
c001ccd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccda:	eb 05                	jmp    c001cce1 <ATA::write(unsigned long long, int, void*)+0x61>
c001ccdc:	b8 01 00 00 00       	mov    eax,0x1
c001cce1:	83 c4 10             	add    esp,0x10
c001cce4:	5b                   	pop    ebx
c001cce5:	5e                   	pop    esi
c001cce6:	5f                   	pop    edi
c001cce7:	c3                   	ret    

c001cce8 <ATA::detectCHS()>:
c001cce8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ccec:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001ccf2:	c1 e0 06             	shl    eax,0x6
c001ccf5:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001ccfb:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cd05:	c7 44 24 04 cf a9 03 c0 	mov    DWORD PTR [esp+0x4],0xc003a9cf
c001cd0d:	e9 0e 03 ff ff       	jmp    c000d020 <panic(char const*)>

c001cd12 <ATA::open(int, int, void*)>:
c001cd12:	53                   	push   ebx
c001cd13:	83 ec 08             	sub    esp,0x8
c001cd16:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cd1a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cd1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cd22:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cd28:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cd2e:	c1 e0 06             	shl    eax,0x6
c001cd31:	01 d0                	add    eax,edx
c001cd33:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cd3a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cd40:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cd47:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cd51:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cd57:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cd5e:	75 0c                	jne    c001cd6c <ATA::open(int, int, void*)+0x5a>
c001cd60:	83 ec 0c             	sub    esp,0xc
c001cd63:	53                   	push   ebx
c001cd64:	e8 7f ff ff ff       	call   c001cce8 <ATA::detectCHS()>
c001cd69:	83 c4 10             	add    esp,0x10
c001cd6c:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cd72:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cd78:	c1 e0 06             	shl    eax,0x6
c001cd7b:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cd82:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cd8c:	d1 e8                	shr    eax,1
c001cd8e:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cd94:	6a 04                	push   0x4
c001cd96:	6a 0c                	push   0xc
c001cd98:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cd9f:	50                   	push   eax
c001cda0:	52                   	push   edx
c001cda1:	e8 f4 ed ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cda6:	90                   	nop
c001cda7:	90                   	nop
c001cda8:	6a 00                	push   0x0
c001cdaa:	6a 0c                	push   0xc
c001cdac:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cdb3:	50                   	push   eax
c001cdb4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cdba:	e8 db ed ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cdbf:	83 c4 14             	add    esp,0x14
c001cdc2:	53                   	push   ebx
c001cdc3:	e8 62 6e ff ff       	call   c0013c2a <PhysicalDisk::startCache()>
c001cdc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cdcb:	e8 b2 86 ff ff       	call   c0015482 <createPartitionsForDisk(PhysicalDisk*)>
c001cdd0:	31 c0                	xor    eax,eax
c001cdd2:	83 c4 18             	add    esp,0x18
c001cdd5:	5b                   	pop    ebx
c001cdd6:	c3                   	ret    
c001cdd7:	90                   	nop

c001cdd8 <ATAPI::write(unsigned long long, int, void*)>:
c001cdd8:	b8 03 00 00 00       	mov    eax,0x3
c001cddd:	c3                   	ret    

c001cdde <ATAPI::close(int, int, void*)>:
c001cdde:	83 ec 0c             	sub    esp,0xc
c001cde1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cde5:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cdeb:	85 c0                	test   eax,eax
c001cded:	74 0c                	je     c001cdfb <ATAPI::close(int, int, void*)+0x1d>
c001cdef:	83 ec 0c             	sub    esp,0xc
c001cdf2:	8b 10                	mov    edx,DWORD PTR [eax]
c001cdf4:	50                   	push   eax
c001cdf5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cdf8:	83 c4 10             	add    esp,0x10
c001cdfb:	31 c0                	xor    eax,eax
c001cdfd:	83 c4 0c             	add    esp,0xc
c001ce00:	c3                   	ret    
c001ce01:	90                   	nop

c001ce02 <ATAPI::ATAPI()>:
c001ce02:	83 ec 0c             	sub    esp,0xc
c001ce05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce09:	83 ec 04             	sub    esp,0x4
c001ce0c:	68 00 08 00 00       	push   0x800
c001ce11:	68 18 aa 03 c0       	push   0xc003aa18
c001ce16:	50                   	push   eax
c001ce17:	e8 a6 6d ff ff       	call   c0013bc2 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ce1c:	83 c4 10             	add    esp,0x10
c001ce1f:	ba 58 aa 03 c0       	mov    edx,0xc003aa58
c001ce24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce28:	89 10                	mov    DWORD PTR [eax],edx
c001ce2a:	90                   	nop
c001ce2b:	83 c4 0c             	add    esp,0xc
c001ce2e:	c3                   	ret    
c001ce2f:	90                   	nop

c001ce30 <ATAPI::readyForCommand()>:
c001ce30:	56                   	push   esi
c001ce31:	53                   	push   ebx
c001ce32:	31 db                	xor    ebx,ebx
c001ce34:	50                   	push   eax
c001ce35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ce39:	50                   	push   eax
c001ce3a:	6a 0c                	push   0xc
c001ce3c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ce43:	50                   	push   eax
c001ce44:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ce4a:	e8 0b ee ff ff       	call   c001bc5a <IDE::read(unsigned char, unsigned char)>
c001ce4f:	83 c4 10             	add    esp,0x10
c001ce52:	a8 88                	test   al,0x88
c001ce54:	74 23                	je     c001ce79 <ATAPI::readyForCommand()+0x49>
c001ce56:	43                   	inc    ebx
c001ce57:	83 fb 63             	cmp    ebx,0x63
c001ce5a:	7e dd                	jle    c001ce39 <ATAPI::readyForCommand()+0x9>
c001ce5c:	51                   	push   ecx
c001ce5d:	51                   	push   ecx
c001ce5e:	6a 00                	push   0x0
c001ce60:	68 40 42 0f 00       	push   0xf4240
c001ce65:	e8 f3 1b ff ff       	call   c000ea5d <nanoSleep(unsigned long long)>
c001ce6a:	83 c4 10             	add    esp,0x10
c001ce6d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001ce73:	75 c4                	jne    c001ce39 <ATAPI::readyForCommand()+0x9>
c001ce75:	31 c0                	xor    eax,eax
c001ce77:	eb 02                	jmp    c001ce7b <ATAPI::readyForCommand()+0x4b>
c001ce79:	b0 01                	mov    al,0x1
c001ce7b:	5a                   	pop    edx
c001ce7c:	5b                   	pop    ebx
c001ce7d:	5e                   	pop    esi
c001ce7e:	c3                   	ret    
c001ce7f:	90                   	nop

c001ce80 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001ce80:	55                   	push   ebp
c001ce81:	57                   	push   edi
c001ce82:	56                   	push   esi
c001ce83:	53                   	push   ebx
c001ce84:	83 ec 20             	sub    esp,0x20
c001ce87:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ce8b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ce8f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ce93:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ce97:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ce9b:	6a 01                	push   0x1
c001ce9d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cea4:	50                   	push   eax
c001cea5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ceab:	e8 f6 ee ff ff       	call   c001bda6 <IDE::enableIRQs(unsigned char, bool)>
c001ceb0:	5e                   	pop    esi
c001ceb1:	58                   	pop    eax
c001ceb2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ceb9:	50                   	push   eax
c001ceba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cec0:	e8 af ec ff ff       	call   c001bb74 <IDE::prepareInterrupt(unsigned char)>
c001cec5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cec8:	e8 63 ff ff ff       	call   c001ce30 <ATAPI::readyForCommand()>
c001cecd:	83 c4 10             	add    esp,0x10
c001ced0:	84 c0                	test   al,al
c001ced2:	75 0a                	jne    c001cede <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001ced4:	bb 01 00 00 00       	mov    ebx,0x1
c001ced9:	e9 57 02 00 00       	jmp    c001d135 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cede:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001cee4:	c1 e0 04             	shl    eax,0x4
c001cee7:	0f b6 c0             	movzx  eax,al
c001ceea:	50                   	push   eax
c001ceeb:	6a 06                	push   0x6
c001ceed:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cef4:	50                   	push   eax
c001cef5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cefb:	e8 9a ec ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf00:	6a 00                	push   0x0
c001cf02:	6a 01                	push   0x1
c001cf04:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf0b:	50                   	push   eax
c001cf0c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf12:	e8 83 ec ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf17:	83 c4 20             	add    esp,0x20
c001cf1a:	0f b6 c3             	movzx  eax,bl
c001cf1d:	0f b6 df             	movzx  ebx,bh
c001cf20:	50                   	push   eax
c001cf21:	6a 04                	push   0x4
c001cf23:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf2a:	50                   	push   eax
c001cf2b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf31:	e8 64 ec ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf36:	53                   	push   ebx
c001cf37:	6a 05                	push   0x5
c001cf39:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf40:	50                   	push   eax
c001cf41:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf47:	e8 4e ec ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf4c:	83 c4 20             	add    esp,0x20
c001cf4f:	68 a0 00 00 00       	push   0xa0
c001cf54:	6a 07                	push   0x7
c001cf56:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf5d:	50                   	push   eax
c001cf5e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf64:	e8 31 ec ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf69:	83 c4 0c             	add    esp,0xc
c001cf6c:	6a 01                	push   0x1
c001cf6e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cf75:	50                   	push   eax
c001cf76:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cf7c:	e8 c5 f7 ff ff       	call   c001c746 <IDE::polling(unsigned char, unsigned int)>
c001cf81:	83 c4 10             	add    esp,0x10
c001cf84:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001cf8a:	84 c0                	test   al,al
c001cf8c:	74 23                	je     c001cfb1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001cf8e:	0f b6 d8             	movzx  ebx,al
c001cf91:	0f b6 d2             	movzx  edx,dl
c001cf94:	53                   	push   ebx
c001cf95:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001cf9c:	50                   	push   eax
c001cf9d:	52                   	push   edx
c001cf9e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfa4:	e8 07 f6 ff ff       	call   c001c5b0 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001cfa9:	83 c4 10             	add    esp,0x10
c001cfac:	e9 84 01 00 00       	jmp    c001d135 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cfb1:	0f b6 d2             	movzx  edx,dl
c001cfb4:	53                   	push   ebx
c001cfb5:	53                   	push   ebx
c001cfb6:	52                   	push   edx
c001cfb7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cfbd:	e8 c6 eb ff ff       	call   c001bb88 <IDE::getBase(unsigned char)>
c001cfc2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cfc6:	b9 06 00 00 00       	mov    ecx,0x6
c001cfcb:	89 c2                	mov    edx,eax
c001cfcd:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001cfd0:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001cfd4:	83 c4 10             	add    esp,0x10
c001cfd7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001cfdd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001cfe4:	85 db                	test   ebx,ebx
c001cfe6:	0f 84 ec 00 00 00    	je     c001d0d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001cfec:	51                   	push   ecx
c001cfed:	51                   	push   ecx
c001cfee:	52                   	push   edx
c001cfef:	50                   	push   eax
c001cff0:	e8 13 ed ff ff       	call   c001bd08 <IDE::waitInterrupt(unsigned char)>
c001cff5:	83 c4 10             	add    esp,0x10
c001cff8:	84 c0                	test   al,al
c001cffa:	0f 84 d4 fe ff ff    	je     c001ced4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d000:	56                   	push   esi
c001d001:	56                   	push   esi
c001d002:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d009:	50                   	push   eax
c001d00a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d010:	e8 5f eb ff ff       	call   c001bb74 <IDE::prepareInterrupt(unsigned char)>
c001d015:	83 c4 0c             	add    esp,0xc
c001d018:	6a 04                	push   0x4
c001d01a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d021:	50                   	push   eax
c001d022:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d028:	e8 2d ec ff ff       	call   c001bc5a <IDE::read(unsigned char, unsigned char)>
c001d02d:	83 c4 0c             	add    esp,0xc
c001d030:	89 c6                	mov    esi,eax
c001d032:	6a 05                	push   0x5
c001d034:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d03b:	50                   	push   eax
c001d03c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d042:	e8 13 ec ff ff       	call   c001bc5a <IDE::read(unsigned char, unsigned char)>
c001d047:	89 f1                	mov    ecx,esi
c001d049:	0f b6 c0             	movzx  eax,al
c001d04c:	0f b6 f1             	movzx  esi,cl
c001d04f:	c1 e0 08             	shl    eax,0x8
c001d052:	09 c6                	or     esi,eax
c001d054:	d1 fe                	sar    esi,1
c001d056:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d05a:	83 c4 10             	add    esp,0x10
c001d05d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d062:	74 41                	je     c001d0a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001d064:	31 c9                	xor    ecx,ecx
c001d066:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d06c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d073:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d077:	75 0a                	jne    c001d083 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001d079:	01 c9                	add    ecx,ecx
c001d07b:	01 cd                	add    ebp,ecx
c001d07d:	4b                   	dec    ebx
c001d07e:	e9 54 ff ff ff       	jmp    c001cfd7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001d083:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d088:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d08c:	51                   	push   ecx
c001d08d:	51                   	push   ecx
c001d08e:	52                   	push   edx
c001d08f:	50                   	push   eax
c001d090:	e8 f3 ea ff ff       	call   c001bb88 <IDE::getBase(unsigned char)>
c001d095:	89 c2                	mov    edx,eax
c001d097:	89 f0                	mov    eax,esi
c001d099:	66 ef                	out    dx,ax
c001d09b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d09f:	83 c4 10             	add    esp,0x10
c001d0a2:	41                   	inc    ecx
c001d0a3:	eb c1                	jmp    c001d066 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001d0a5:	31 f6                	xor    esi,esi
c001d0a7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d0ad:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d0b4:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d0b8:	75 06                	jne    c001d0c0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001d0ba:	01 f6                	add    esi,esi
c001d0bc:	01 f5                	add    ebp,esi
c001d0be:	eb bd                	jmp    c001d07d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001d0c0:	51                   	push   ecx
c001d0c1:	51                   	push   ecx
c001d0c2:	52                   	push   edx
c001d0c3:	50                   	push   eax
c001d0c4:	e8 bf ea ff ff       	call   c001bb88 <IDE::getBase(unsigned char)>
c001d0c9:	89 c2                	mov    edx,eax
c001d0cb:	66 ed                	in     ax,dx
c001d0cd:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d0d2:	83 c4 10             	add    esp,0x10
c001d0d5:	46                   	inc    esi
c001d0d6:	eb cf                	jmp    c001d0a7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001d0d8:	51                   	push   ecx
c001d0d9:	51                   	push   ecx
c001d0da:	52                   	push   edx
c001d0db:	50                   	push   eax
c001d0dc:	e8 27 ec ff ff       	call   c001bd08 <IDE::waitInterrupt(unsigned char)>
c001d0e1:	83 c4 10             	add    esp,0x10
c001d0e4:	84 c0                	test   al,al
c001d0e6:	0f 84 e8 fd ff ff    	je     c001ced4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d0ec:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d0f1:	52                   	push   edx
c001d0f2:	52                   	push   edx
c001d0f3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0fa:	50                   	push   eax
c001d0fb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d101:	e8 6e ea ff ff       	call   c001bb74 <IDE::prepareInterrupt(unsigned char)>
c001d106:	83 c4 10             	add    esp,0x10
c001d109:	50                   	push   eax
c001d10a:	50                   	push   eax
c001d10b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d112:	50                   	push   eax
c001d113:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d119:	e8 6a ea ff ff       	call   c001bb88 <IDE::getBase(unsigned char)>
c001d11e:	8d 50 07             	lea    edx,[eax+0x7]
c001d121:	ec                   	in     al,dx
c001d122:	83 c4 10             	add    esp,0x10
c001d125:	a8 88                	test   al,0x88
c001d127:	74 0a                	je     c001d133 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d129:	4b                   	dec    ebx
c001d12a:	75 dd                	jne    c001d109 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d12c:	bb 02 00 00 00       	mov    ebx,0x2
c001d131:	eb 02                	jmp    c001d135 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d133:	31 db                	xor    ebx,ebx
c001d135:	83 c4 1c             	add    esp,0x1c
c001d138:	89 d8                	mov    eax,ebx
c001d13a:	5b                   	pop    ebx
c001d13b:	5e                   	pop    esi
c001d13c:	5f                   	pop    edi
c001d13d:	5d                   	pop    ebp
c001d13e:	c3                   	ret    
c001d13f:	90                   	nop

c001d140 <ATAPI::diskRemoved()>:
c001d140:	83 ec 18             	sub    esp,0x18
c001d143:	68 23 aa 03 c0       	push   0xc003aa23
c001d148:	e8 b5 fd fe ff       	call   c000cf02 <kprintf(char const*, ...)>
c001d14d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d151:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001d158:	83 c4 1c             	add    esp,0x1c
c001d15b:	c3                   	ret    

c001d15c <ATAPI::eject()>:
c001d15c:	57                   	push   edi
c001d15d:	b9 03 00 00 00       	mov    ecx,0x3
c001d162:	53                   	push   ebx
c001d163:	83 ec 14             	sub    esp,0x14
c001d166:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d16a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d16e:	fc                   	cld    
c001d16f:	31 c0                	xor    eax,eax
c001d171:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d173:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d178:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d17d:	50                   	push   eax
c001d17e:	50                   	push   eax
c001d17f:	6a 00                	push   0x0
c001d181:	6a 00                	push   0x0
c001d183:	6a 00                	push   0x0
c001d185:	6a 02                	push   0x2
c001d187:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d18b:	50                   	push   eax
c001d18c:	53                   	push   ebx
c001d18d:	e8 ee fc ff ff       	call   c001ce80 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d192:	83 c4 14             	add    esp,0x14
c001d195:	53                   	push   ebx
c001d196:	e8 a5 ff ff ff       	call   c001d140 <ATAPI::diskRemoved()>
c001d19b:	83 c4 24             	add    esp,0x24
c001d19e:	5b                   	pop    ebx
c001d19f:	5f                   	pop    edi
c001d1a0:	c3                   	ret    
c001d1a1:	90                   	nop

c001d1a2 <ATAPI::diskInserted()>:
c001d1a2:	53                   	push   ebx
c001d1a3:	83 ec 14             	sub    esp,0x14
c001d1a6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d1aa:	68 39 aa 03 c0       	push   0xc003aa39
c001d1af:	e8 4e fd fe ff       	call   c000cf02 <kprintf(char const*, ...)>
c001d1b4:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001d1bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d1be:	e8 67 6a ff ff       	call   c0013c2a <PhysicalDisk::startCache()>
c001d1c3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001d1c7:	83 c4 18             	add    esp,0x18
c001d1ca:	5b                   	pop    ebx
c001d1cb:	e9 b2 82 ff ff       	jmp    c0015482 <createPartitionsForDisk(PhysicalDisk*)>

c001d1d0 <ATAPI::detectMedia()>:
c001d1d0:	56                   	push   esi
c001d1d1:	53                   	push   ebx
c001d1d2:	83 ec 28             	sub    esp,0x28
c001d1d5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d1d9:	6a 0c                	push   0xc
c001d1db:	6a 00                	push   0x0
c001d1dd:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d1e1:	56                   	push   esi
c001d1e2:	e8 f1 34 fe ff       	call   c00006d8 <memset>
c001d1e7:	58                   	pop    eax
c001d1e8:	5a                   	pop    edx
c001d1e9:	6a 00                	push   0x0
c001d1eb:	6a 00                	push   0x0
c001d1ed:	6a 00                	push   0x0
c001d1ef:	6a 00                	push   0x0
c001d1f1:	56                   	push   esi
c001d1f2:	53                   	push   ebx
c001d1f3:	e8 88 fc ff ff       	call   c001ce80 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d1f8:	83 c4 1c             	add    esp,0x1c
c001d1fb:	6a 0c                	push   0xc
c001d1fd:	6a 00                	push   0x0
c001d1ff:	56                   	push   esi
c001d200:	e8 d3 34 fe ff       	call   c00006d8 <memset>
c001d205:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d20a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d20f:	59                   	pop    ecx
c001d210:	58                   	pop    eax
c001d211:	6a 01                	push   0x1
c001d213:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d217:	50                   	push   eax
c001d218:	6a 00                	push   0x0
c001d21a:	6a 12                	push   0x12
c001d21c:	56                   	push   esi
c001d21d:	53                   	push   ebx
c001d21e:	e8 5d fc ff ff       	call   c001ce80 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d223:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d227:	83 c4 20             	add    esp,0x20
c001d22a:	83 e0 7f             	and    eax,0x7f
c001d22d:	3c 70                	cmp    al,0x70
c001d22f:	74 15                	je     c001d246 <ATAPI::detectMedia()+0x76>
c001d231:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d238:	75 0c                	jne    c001d246 <ATAPI::detectMedia()+0x76>
c001d23a:	83 ec 0c             	sub    esp,0xc
c001d23d:	53                   	push   ebx
c001d23e:	e8 5f ff ff ff       	call   c001d1a2 <ATAPI::diskInserted()>
c001d243:	83 c4 10             	add    esp,0x10
c001d246:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d24a:	83 e0 0f             	and    eax,0xf
c001d24d:	3c 02                	cmp    al,0x2
c001d24f:	75 1b                	jne    c001d26c <ATAPI::detectMedia()+0x9c>
c001d251:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d256:	75 2d                	jne    c001d285 <ATAPI::detectMedia()+0xb5>
c001d258:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d25f:	74 24                	je     c001d285 <ATAPI::detectMedia()+0xb5>
c001d261:	83 ec 0c             	sub    esp,0xc
c001d264:	53                   	push   ebx
c001d265:	e8 d6 fe ff ff       	call   c001d140 <ATAPI::diskRemoved()>
c001d26a:	eb 16                	jmp    c001d282 <ATAPI::detectMedia()+0xb2>
c001d26c:	84 c0                	test   al,al
c001d26e:	75 15                	jne    c001d285 <ATAPI::detectMedia()+0xb5>
c001d270:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d277:	75 0c                	jne    c001d285 <ATAPI::detectMedia()+0xb5>
c001d279:	83 ec 0c             	sub    esp,0xc
c001d27c:	53                   	push   ebx
c001d27d:	e8 20 ff ff ff       	call   c001d1a2 <ATAPI::diskInserted()>
c001d282:	83 c4 10             	add    esp,0x10
c001d285:	83 c4 24             	add    esp,0x24
c001d288:	5b                   	pop    ebx
c001d289:	5e                   	pop    esi
c001d28a:	c3                   	ret    
c001d28b:	90                   	nop

c001d28c <ATAPI::open(int, int, void*)>:
c001d28c:	53                   	push   ebx
c001d28d:	83 ec 08             	sub    esp,0x8
c001d290:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d294:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d298:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d29c:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d2a2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d2a8:	c1 e0 06             	shl    eax,0x6
c001d2ab:	01 d0                	add    eax,edx
c001d2ad:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d2b4:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d2ba:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d2c1:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d2cb:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d2d1:	6a 04                	push   0x4
c001d2d3:	6a 0c                	push   0xc
c001d2d5:	51                   	push   ecx
c001d2d6:	52                   	push   edx
c001d2d7:	e8 be e8 ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2dc:	90                   	nop
c001d2dd:	90                   	nop
c001d2de:	6a 00                	push   0x0
c001d2e0:	6a 0c                	push   0xc
c001d2e2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d2e9:	50                   	push   eax
c001d2ea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d2f0:	e8 a5 e8 ff ff       	call   c001bb9a <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2f5:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d2fc:	83 c4 14             	add    esp,0x14
c001d2ff:	53                   	push   ebx
c001d300:	e8 cb fe ff ff       	call   c001d1d0 <ATAPI::detectMedia()>
c001d305:	31 c0                	xor    eax,eax
c001d307:	83 c4 18             	add    esp,0x18
c001d30a:	5b                   	pop    ebx
c001d30b:	c3                   	ret    

c001d30c <ATAPI::read(unsigned long long, int, void*)>:
c001d30c:	55                   	push   ebp
c001d30d:	57                   	push   edi
c001d30e:	56                   	push   esi
c001d30f:	53                   	push   ebx
c001d310:	83 ec 1c             	sub    esp,0x1c
c001d313:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d317:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d31b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d31f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d326:	74 41                	je     c001d369 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001d328:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d32c:	b9 03 00 00 00       	mov    ecx,0x3
c001d331:	fc                   	cld    
c001d332:	31 c0                	xor    eax,eax
c001d334:	86 fb                	xchg   bl,bh
c001d336:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d338:	c1 c3 10             	rol    ebx,0x10
c001d33b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d340:	89 e8                	mov    eax,ebp
c001d342:	86 fb                	xchg   bl,bh
c001d344:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d348:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001d34c:	50                   	push   eax
c001d34d:	50                   	push   eax
c001d34e:	55                   	push   ebp
c001d34f:	c1 e5 0b             	shl    ebp,0xb
c001d352:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d356:	6a 00                	push   0x0
c001d358:	55                   	push   ebp
c001d359:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d35d:	50                   	push   eax
c001d35e:	56                   	push   esi
c001d35f:	e8 1c fb ff ff       	call   c001ce80 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d364:	83 c4 20             	add    esp,0x20
c001d367:	eb 1a                	jmp    c001d383 <ATAPI::read(unsigned long long, int, void*)+0x77>
c001d369:	83 ec 0c             	sub    esp,0xc
c001d36c:	56                   	push   esi
c001d36d:	e8 5e fe ff ff       	call   c001d1d0 <ATAPI::detectMedia()>
c001d372:	83 c4 10             	add    esp,0x10
c001d375:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001d37c:	75 aa                	jne    c001d328 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d37e:	b8 02 00 00 00       	mov    eax,0x2
c001d383:	83 c4 1c             	add    esp,0x1c
c001d386:	5b                   	pop    ebx
c001d387:	5e                   	pop    esi
c001d388:	5f                   	pop    edi
c001d389:	5d                   	pop    ebp
c001d38a:	c3                   	ret    
c001d38b:	90                   	nop

c001d38c <AVX::open(int, int, void*)>:
c001d38c:	83 ec 0c             	sub    esp,0xc
c001d38f:	e8 04 10 00 00       	call   c001e398 <avxInit>
c001d394:	b8 00 00 00 00       	mov    eax,0x0
c001d399:	83 c4 0c             	add    esp,0xc
c001d39c:	c3                   	ret    
c001d39d:	90                   	nop

c001d39e <AVX::close(int, int, void*)>:
c001d39e:	83 ec 0c             	sub    esp,0xc
c001d3a1:	e8 f3 0f 00 00       	call   c001e399 <avxClose>
c001d3a6:	b8 00 00 00 00       	mov    eax,0x0
c001d3ab:	83 c4 0c             	add    esp,0xc
c001d3ae:	c3                   	ret    
c001d3af:	90                   	nop

c001d3b0 <AVX::available()>:
c001d3b0:	83 ec 0c             	sub    esp,0xc
c001d3b3:	e8 d8 0f 00 00       	call   c001e390 <avxDetect>
c001d3b8:	85 c0                	test   eax,eax
c001d3ba:	0f 95 c0             	setne  al
c001d3bd:	83 c4 0c             	add    esp,0xc
c001d3c0:	c3                   	ret    
c001d3c1:	90                   	nop

c001d3c2 <AVX::save(void*)>:
c001d3c2:	83 ec 0c             	sub    esp,0xc
c001d3c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d3c9:	83 ec 0c             	sub    esp,0xc
c001d3cc:	50                   	push   eax
c001d3cd:	e8 c4 0f 00 00       	call   c001e396 <avxSave>
c001d3d2:	83 c4 10             	add    esp,0x10
c001d3d5:	90                   	nop
c001d3d6:	83 c4 0c             	add    esp,0xc
c001d3d9:	c3                   	ret    

c001d3da <AVX::load(void*)>:
c001d3da:	83 ec 0c             	sub    esp,0xc
c001d3dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d3e1:	83 ec 0c             	sub    esp,0xc
c001d3e4:	50                   	push   eax
c001d3e5:	e8 ad 0f 00 00       	call   c001e397 <avxLoad>
c001d3ea:	83 c4 10             	add    esp,0x10
c001d3ed:	90                   	nop
c001d3ee:	83 c4 0c             	add    esp,0xc
c001d3f1:	c3                   	ret    

c001d3f2 <AVX::AVX()>:
c001d3f2:	83 ec 0c             	sub    esp,0xc
c001d3f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d3f9:	83 ec 08             	sub    esp,0x8
c001d3fc:	68 84 aa 03 c0       	push   0xc003aa84
c001d401:	50                   	push   eax
c001d402:	e8 99 68 ff ff       	call   c0013ca0 <FPU::FPU(char const*)>
c001d407:	83 c4 10             	add    esp,0x10
c001d40a:	ba 94 aa 03 c0       	mov    edx,0xc003aa94
c001d40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d413:	89 10                	mov    DWORD PTR [eax],edx
c001d415:	90                   	nop
c001d416:	83 c4 0c             	add    esp,0xc
c001d419:	c3                   	ret    

c001d41a <MMX::available()>:
c001d41a:	a1 a8 b9 03 c0       	mov    eax,ds:0xc003b9a8
c001d41f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d425:	83 e0 20             	and    eax,0x20
c001d428:	84 c0                	test   al,al
c001d42a:	0f 95 c0             	setne  al
c001d42d:	c3                   	ret    

c001d42e <MMX::open(int, int, void*)>:
c001d42e:	83 ec 0c             	sub    esp,0xc
c001d431:	e8 d6 0f 00 00       	call   c001e40c <x87Init>
c001d436:	b8 00 00 00 00       	mov    eax,0x0
c001d43b:	83 c4 0c             	add    esp,0xc
c001d43e:	c3                   	ret    
c001d43f:	90                   	nop

c001d440 <MMX::close(int, int, void*)>:
c001d440:	83 ec 0c             	sub    esp,0xc
c001d443:	e8 de 0f 00 00       	call   c001e426 <x87Close>
c001d448:	b8 00 00 00 00       	mov    eax,0x0
c001d44d:	83 c4 0c             	add    esp,0xc
c001d450:	c3                   	ret    
c001d451:	90                   	nop

c001d452 <MMX::save(void*)>:
c001d452:	83 ec 0c             	sub    esp,0xc
c001d455:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d459:	83 ec 0c             	sub    esp,0xc
c001d45c:	50                   	push   eax
c001d45d:	e8 9f 0f 00 00       	call   c001e401 <x87Save>
c001d462:	83 c4 10             	add    esp,0x10
c001d465:	90                   	nop
c001d466:	83 c4 0c             	add    esp,0xc
c001d469:	c3                   	ret    

c001d46a <MMX::load(void*)>:
c001d46a:	83 ec 0c             	sub    esp,0xc
c001d46d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d471:	83 ec 0c             	sub    esp,0xc
c001d474:	50                   	push   eax
c001d475:	e8 8d 0f 00 00       	call   c001e407 <x87Load>
c001d47a:	83 c4 10             	add    esp,0x10
c001d47d:	90                   	nop
c001d47e:	83 c4 0c             	add    esp,0xc
c001d481:	c3                   	ret    

c001d482 <MMX::MMX()>:
c001d482:	83 ec 0c             	sub    esp,0xc
c001d485:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d489:	83 ec 08             	sub    esp,0x8
c001d48c:	68 c4 aa 03 c0       	push   0xc003aac4
c001d491:	50                   	push   eax
c001d492:	e8 09 68 ff ff       	call   c0013ca0 <FPU::FPU(char const*)>
c001d497:	83 c4 10             	add    esp,0x10
c001d49a:	ba d4 aa 03 c0       	mov    edx,0xc003aad4
c001d49f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4a3:	89 10                	mov    DWORD PTR [eax],edx
c001d4a5:	90                   	nop
c001d4a6:	83 c4 0c             	add    esp,0xc
c001d4a9:	c3                   	ret    

c001d4aa <SSE::open(int, int, void*)>:
c001d4aa:	83 ec 0c             	sub    esp,0xc
c001d4ad:	e8 15 0f 00 00       	call   c001e3c7 <sseInit>
c001d4b2:	b8 00 00 00 00       	mov    eax,0x0
c001d4b7:	83 c4 0c             	add    esp,0xc
c001d4ba:	c3                   	ret    
c001d4bb:	90                   	nop

c001d4bc <SSE::close(int, int, void*)>:
c001d4bc:	83 ec 0c             	sub    esp,0xc
c001d4bf:	e8 13 0f 00 00       	call   c001e3d7 <sseClose>
c001d4c4:	b8 00 00 00 00       	mov    eax,0x0
c001d4c9:	83 c4 0c             	add    esp,0xc
c001d4cc:	c3                   	ret    
c001d4cd:	90                   	nop

c001d4ce <SSE::available()>:
c001d4ce:	83 ec 1c             	sub    esp,0x1c
c001d4d1:	e8 ca 0e 00 00       	call   c001e3a0 <sseDetect>
c001d4d6:	85 c0                	test   eax,eax
c001d4d8:	0f 95 c0             	setne  al
c001d4db:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d4df:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d4e3:	83 c4 1c             	add    esp,0x1c
c001d4e6:	c3                   	ret    
c001d4e7:	90                   	nop

c001d4e8 <SSE::save(void*)>:
c001d4e8:	83 ec 0c             	sub    esp,0xc
c001d4eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d4ef:	83 ec 0c             	sub    esp,0xc
c001d4f2:	50                   	push   eax
c001d4f3:	e8 c3 0e 00 00       	call   c001e3bb <sseSave>
c001d4f8:	83 c4 10             	add    esp,0x10
c001d4fb:	90                   	nop
c001d4fc:	83 c4 0c             	add    esp,0xc
c001d4ff:	c3                   	ret    

c001d500 <SSE::load(void*)>:
c001d500:	83 ec 0c             	sub    esp,0xc
c001d503:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d507:	83 ec 0c             	sub    esp,0xc
c001d50a:	50                   	push   eax
c001d50b:	e8 b1 0e 00 00       	call   c001e3c1 <sseLoad>
c001d510:	83 c4 10             	add    esp,0x10
c001d513:	90                   	nop
c001d514:	83 c4 0c             	add    esp,0xc
c001d517:	c3                   	ret    

c001d518 <SSE::SSE()>:
c001d518:	83 ec 0c             	sub    esp,0xc
c001d51b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d51f:	83 ec 08             	sub    esp,0x8
c001d522:	68 04 ab 03 c0       	push   0xc003ab04
c001d527:	50                   	push   eax
c001d528:	e8 73 67 ff ff       	call   c0013ca0 <FPU::FPU(char const*)>
c001d52d:	83 c4 10             	add    esp,0x10
c001d530:	ba 14 ab 03 c0       	mov    edx,0xc003ab14
c001d535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d539:	89 10                	mov    DWORD PTR [eax],edx
c001d53b:	90                   	nop
c001d53c:	83 c4 0c             	add    esp,0xc
c001d53f:	c3                   	ret    

c001d540 <x87::open(int, int, void*)>:
c001d540:	83 ec 0c             	sub    esp,0xc
c001d543:	e8 c4 0e 00 00       	call   c001e40c <x87Init>
c001d548:	b8 00 00 00 00       	mov    eax,0x0
c001d54d:	83 c4 0c             	add    esp,0xc
c001d550:	c3                   	ret    
c001d551:	90                   	nop

c001d552 <x87::close(int, int, void*)>:
c001d552:	83 ec 0c             	sub    esp,0xc
c001d555:	e8 cc 0e 00 00       	call   c001e426 <x87Close>
c001d55a:	b8 00 00 00 00       	mov    eax,0x0
c001d55f:	83 c4 0c             	add    esp,0xc
c001d562:	c3                   	ret    
c001d563:	90                   	nop

c001d564 <x87::available()>:
c001d564:	83 ec 0c             	sub    esp,0xc
c001d567:	e8 7a 0e 00 00       	call   c001e3e6 <x87Detect>
c001d56c:	85 c0                	test   eax,eax
c001d56e:	0f 95 c0             	setne  al
c001d571:	83 c4 0c             	add    esp,0xc
c001d574:	c3                   	ret    
c001d575:	90                   	nop

c001d576 <x87::save(void*)>:
c001d576:	83 ec 0c             	sub    esp,0xc
c001d579:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d57d:	83 ec 0c             	sub    esp,0xc
c001d580:	50                   	push   eax
c001d581:	e8 7b 0e 00 00       	call   c001e401 <x87Save>
c001d586:	83 c4 10             	add    esp,0x10
c001d589:	90                   	nop
c001d58a:	83 c4 0c             	add    esp,0xc
c001d58d:	c3                   	ret    

c001d58e <x87::load(void*)>:
c001d58e:	83 ec 0c             	sub    esp,0xc
c001d591:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d595:	83 ec 0c             	sub    esp,0xc
c001d598:	50                   	push   eax
c001d599:	e8 69 0e 00 00       	call   c001e407 <x87Load>
c001d59e:	83 c4 10             	add    esp,0x10
c001d5a1:	90                   	nop
c001d5a2:	83 c4 0c             	add    esp,0xc
c001d5a5:	c3                   	ret    

c001d5a6 <x87::x87()>:
c001d5a6:	83 ec 0c             	sub    esp,0xc
c001d5a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5ad:	83 ec 08             	sub    esp,0x8
c001d5b0:	68 44 ab 03 c0       	push   0xc003ab44
c001d5b5:	50                   	push   eax
c001d5b6:	e8 e5 66 ff ff       	call   c0013ca0 <FPU::FPU(char const*)>
c001d5bb:	83 c4 10             	add    esp,0x10
c001d5be:	ba 54 ab 03 c0       	mov    edx,0xc003ab54
c001d5c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5c7:	89 10                	mov    DWORD PTR [eax],edx
c001d5c9:	90                   	nop
c001d5ca:	83 c4 0c             	add    esp,0xc
c001d5cd:	c3                   	ret    

c001d5ce <APIC::disable()>:
c001d5ce:	90                   	nop
c001d5cf:	c3                   	ret    

c001d5d0 <APIC::close(int, int, void*)>:
c001d5d0:	55                   	push   ebp
c001d5d1:	89 e5                	mov    ebp,esp
c001d5d3:	83 ec 08             	sub    esp,0x8
c001d5d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d5d9:	8b 00                	mov    eax,DWORD PTR [eax]
c001d5db:	83 c0 3c             	add    eax,0x3c
c001d5de:	8b 00                	mov    eax,DWORD PTR [eax]
c001d5e0:	83 ec 0c             	sub    esp,0xc
c001d5e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d5e6:	ff d0                	call   eax
c001d5e8:	83 c4 10             	add    esp,0x10
c001d5eb:	b8 00 00 00 00       	mov    eax,0x0
c001d5f0:	c9                   	leave  
c001d5f1:	c3                   	ret    

c001d5f2 <IOAPIC::close(int, int, void*)>:
c001d5f2:	b8 00 00 00 00       	mov    eax,0x0
c001d5f7:	c3                   	ret    

c001d5f8 <APIC::io_wait()>:
c001d5f8:	eb 00                	jmp    c001d5fa <APIC::io_wait()+0x2>
c001d5fa:	eb 00                	jmp    c001d5fc <APIC::io_wait()+0x4>
c001d5fc:	90                   	nop
c001d5fd:	c3                   	ret    

c001d5fe <APIC::getBase()>:
c001d5fe:	55                   	push   ebp
c001d5ff:	89 e5                	mov    ebp,esp
c001d601:	83 ec 18             	sub    esp,0x18
c001d604:	a1 a8 b9 03 c0       	mov    eax,ds:0xc003b9a8
c001d609:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001d60f:	83 e0 08             	and    eax,0x8
c001d612:	84 c0                	test   al,al
c001d614:	75 07                	jne    c001d61d <APIC::getBase()+0x1f>
c001d616:	b8 00 00 00 00       	mov    eax,0x0
c001d61b:	eb 21                	jmp    c001d63e <APIC::getBase()+0x40>
c001d61d:	a1 a8 b9 03 c0       	mov    eax,ds:0xc003b9a8
c001d622:	83 ec 08             	sub    esp,0x8
c001d625:	6a 1b                	push   0x1b
c001d627:	50                   	push   eax
c001d628:	e8 bb df fe ff       	call   c000b5e8 <Computer::rdmsr(unsigned int)>
c001d62d:	83 c4 10             	add    esp,0x10
c001d630:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d633:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001d636:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d639:	25 00 f0 ff ff       	and    eax,0xfffff000
c001d63e:	c9                   	leave  
c001d63f:	c3                   	ret    

c001d640 <APIC::eoi(unsigned char)>:
c001d640:	55                   	push   ebp
c001d641:	89 e5                	mov    ebp,esp
c001d643:	83 ec 28             	sub    esp,0x28
c001d646:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d649:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d64c:	83 ec 0c             	sub    esp,0xc
c001d64f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d652:	e8 a7 ff ff ff       	call   c001d5fe <APIC::getBase()>
c001d657:	83 c4 10             	add    esp,0x10
c001d65a:	05 b0 00 00 00       	add    eax,0xb0
c001d65f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d662:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001d665:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001d66b:	90                   	nop
c001d66c:	c9                   	leave  
c001d66d:	c3                   	ret    

c001d66e <APIC::open(int, int, void*)>:
c001d66e:	55                   	push   ebp
c001d66f:	89 e5                	mov    ebp,esp
c001d671:	57                   	push   edi
c001d672:	56                   	push   esi
c001d673:	53                   	push   ebx
c001d674:	83 ec 1c             	sub    esp,0x1c
c001d677:	83 ec 0c             	sub    esp,0xc
c001d67a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d67d:	e8 7c ff ff ff       	call   c001d5fe <APIC::getBase()>
c001d682:	83 c4 10             	add    esp,0x10
c001d685:	05 f0 00 00 00       	add    eax,0xf0
c001d68a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d68d:	83 ec 0c             	sub    esp,0xc
c001d690:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d693:	e8 66 ff ff ff       	call   c001d5fe <APIC::getBase()>
c001d698:	83 c4 10             	add    esp,0x10
c001d69b:	89 c2                	mov    edx,eax
c001d69d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d6a0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d6a6:	0f b6 f8             	movzx  edi,al
c001d6a9:	89 d0                	mov    eax,edx
c001d6ab:	ba 00 00 00 00       	mov    edx,0x0
c001d6b0:	89 c1                	mov    ecx,eax
c001d6b2:	80 e5 ff             	and    ch,0xff
c001d6b5:	89 cb                	mov    ebx,ecx
c001d6b7:	0f b6 f2             	movzx  esi,dl
c001d6ba:	89 d8                	mov    eax,ebx
c001d6bc:	89 f2                	mov    edx,esi
c001d6be:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d6c1:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d6c4:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d6c8:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d6cc:	83 e0 00             	and    eax,0x0
c001d6cf:	09 d0                	or     eax,edx
c001d6d1:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d6d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d6d8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d6de:	8d 50 01             	lea    edx,[eax+0x1]
c001d6e1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d6e4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d6ea:	0f b6 d0             	movzx  edx,al
c001d6ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d6f0:	83 c2 08             	add    edx,0x8
c001d6f3:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d6f7:	0f b6 c9             	movzx  ecx,cl
c001d6fa:	81 c9 00 00 01 00    	or     ecx,0x10000
c001d700:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d704:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d707:	8b 00                	mov    eax,DWORD PTR [eax]
c001d709:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d70c:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001d713:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d716:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001d719:	89 10                	mov    DWORD PTR [eax],edx
c001d71b:	b8 00 00 00 00       	mov    eax,0x0
c001d720:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d723:	5b                   	pop    ebx
c001d724:	5e                   	pop    esi
c001d725:	5f                   	pop    edi
c001d726:	5d                   	pop    ebp
c001d727:	c3                   	ret    

c001d728 <IOAPIC::IOAPIC()>:
c001d728:	83 ec 0c             	sub    esp,0xc
c001d72b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d72f:	83 ec 08             	sub    esp,0x8
c001d732:	68 84 ab 03 c0       	push   0xc003ab84
c001d737:	50                   	push   eax
c001d738:	e8 6f 62 ff ff       	call   c00139ac <Device::Device(char const*)>
c001d73d:	83 c4 10             	add    esp,0x10
c001d740:	ba ac ac 03 c0       	mov    edx,0xc003acac
c001d745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d749:	89 10                	mov    DWORD PTR [eax],edx
c001d74b:	90                   	nop
c001d74c:	83 c4 0c             	add    esp,0xc
c001d74f:	c3                   	ret    

c001d750 <APIC::APIC()>:
c001d750:	53                   	push   ebx
c001d751:	83 ec 18             	sub    esp,0x18
c001d754:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d758:	83 ec 08             	sub    esp,0x8
c001d75b:	68 8c ab 03 c0       	push   0xc003ab8c
c001d760:	50                   	push   eax
c001d761:	e8 6e 69 ff ff       	call   c00140d4 <InterruptController::InterruptController(char const*)>
c001d766:	83 c4 10             	add    esp,0x10
c001d769:	ba 64 ac 03 c0       	mov    edx,0xc003ac64
c001d76e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d772:	89 10                	mov    DWORD PTR [eax],edx
c001d774:	a0 e0 d0 03 c0       	mov    al,ds:0xc003d0e0
c001d779:	83 f0 01             	xor    eax,0x1
c001d77c:	84 c0                	test   al,al
c001d77e:	0f 84 96 00 00 00    	je     c001d81a <APIC::APIC()+0xca>
c001d784:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001d789:	a0 b0 c5 03 c0       	mov    al,ds:0xc003c5b0
c001d78e:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001d792:	73 7f                	jae    c001d813 <APIC::APIC()+0xc3>
c001d794:	83 ec 0c             	sub    esp,0xc
c001d797:	68 68 01 00 00       	push   0x168
c001d79c:	e8 11 4d ff ff       	call   c00124b2 <operator new(unsigned long)>
c001d7a1:	83 c4 10             	add    esp,0x10
c001d7a4:	89 c3                	mov    ebx,eax
c001d7a6:	83 ec 0c             	sub    esp,0xc
c001d7a9:	53                   	push   ebx
c001d7aa:	e8 79 ff ff ff       	call   c001d728 <IOAPIC::IOAPIC()>
c001d7af:	83 c4 10             	add    esp,0x10
c001d7b2:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d7b6:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d7bb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d7bf:	89 14 85 c0 d0 03 c0 	mov    DWORD PTR [eax*4-0x3ffc2f40],edx
c001d7c6:	a1 a0 d0 03 c0       	mov    eax,ds:0xc003d0a0
c001d7cb:	40                   	inc    eax
c001d7cc:	a3 a0 d0 03 c0       	mov    ds:0xc003d0a0,eax
c001d7d1:	a1 a8 b9 03 c0       	mov    eax,ds:0xc003b9a8
c001d7d6:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d7dc:	83 ec 08             	sub    esp,0x8
c001d7df:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d7e3:	50                   	push   eax
c001d7e4:	e8 d3 5f ff ff       	call   c00137bc <Device::addChild(Device*)>
c001d7e9:	83 c4 10             	add    esp,0x10
c001d7ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d7f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001d7f2:	83 c0 08             	add    eax,0x8
c001d7f5:	8b 00                	mov    eax,DWORD PTR [eax]
c001d7f7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001d7fc:	6a 00                	push   0x0
c001d7fe:	6a 00                	push   0x0
c001d800:	52                   	push   edx
c001d801:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d805:	ff d0                	call   eax
c001d807:	83 c4 10             	add    esp,0x10
c001d80a:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001d80e:	e9 76 ff ff ff       	jmp    c001d789 <APIC::APIC()+0x39>
c001d813:	c6 05 e0 d0 03 c0 01 	mov    BYTE PTR ds:0xc003d0e0,0x1
c001d81a:	90                   	nop
c001d81b:	83 c4 18             	add    esp,0x18
c001d81e:	5b                   	pop    ebx
c001d81f:	c3                   	ret    

c001d820 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d820:	55                   	push   ebp
c001d821:	89 e5                	mov    ebp,esp
c001d823:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d826:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d82c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d82f:	72 1d                	jb     c001d84e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d831:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d834:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d83a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d83d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d843:	01 d0                	add    eax,edx
c001d845:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d848:	73 04                	jae    c001d84e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d84a:	b0 01                	mov    al,0x1
c001d84c:	eb 02                	jmp    c001d850 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d84e:	b0 00                	mov    al,0x0
c001d850:	5d                   	pop    ebp
c001d851:	c3                   	ret    

c001d852 <IOAPIC::read(int)>:
c001d852:	55                   	push   ebp
c001d853:	89 e5                	mov    ebp,esp
c001d855:	83 ec 10             	sub    esp,0x10
c001d858:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d85b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d861:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d864:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d867:	0f b6 d0             	movzx  edx,al
c001d86a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d86d:	89 10                	mov    DWORD PTR [eax],edx
c001d86f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d872:	83 c0 10             	add    eax,0x10
c001d875:	8b 00                	mov    eax,DWORD PTR [eax]
c001d877:	c9                   	leave  
c001d878:	c3                   	ret    
c001d879:	90                   	nop

c001d87a <IOAPIC::open(int, int, void*)>:
c001d87a:	55                   	push   ebp
c001d87b:	89 e5                	mov    ebp,esp
c001d87d:	57                   	push   edi
c001d87e:	56                   	push   esi
c001d87f:	53                   	push   ebx
c001d880:	83 ec 0c             	sub    esp,0xc
c001d883:	83 ec 0c             	sub    esp,0xc
c001d886:	68 b7 ab 03 c0       	push   0xc003abb7
c001d88b:	e8 72 f6 fe ff       	call   c000cf02 <kprintf(char const*, ...)>
c001d890:	83 c4 10             	add    esp,0x10
c001d893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d896:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d899:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d89f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8a2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d8a8:	8b 14 85 e0 c5 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc3a20]
c001d8af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8b2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d8b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8bb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d8c1:	8b 14 85 60 c6 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffc39a0]
c001d8c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8cb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d8d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8d4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d8da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d8dd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d8e3:	0f b6 f8             	movzx  edi,al
c001d8e6:	89 d0                	mov    eax,edx
c001d8e8:	ba 00 00 00 00       	mov    edx,0x0
c001d8ed:	89 c1                	mov    ecx,eax
c001d8ef:	80 e5 ff             	and    ch,0xff
c001d8f2:	89 cb                	mov    ebx,ecx
c001d8f4:	0f b6 f2             	movzx  esi,dl
c001d8f7:	89 d8                	mov    eax,ebx
c001d8f9:	89 f2                	mov    edx,esi
c001d8fb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d8fe:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d901:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d905:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d909:	83 e0 00             	and    eax,0x0
c001d90c:	09 d0                	or     eax,edx
c001d90e:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d912:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d915:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d91b:	8d 50 01             	lea    edx,[eax+0x1]
c001d91e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d921:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d927:	0f b6 d0             	movzx  edx,al
c001d92a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d92d:	83 c2 08             	add    edx,0x8
c001d930:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d934:	0f b6 c9             	movzx  ecx,cl
c001d937:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d93d:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d941:	83 ec 08             	sub    esp,0x8
c001d944:	6a 01                	push   0x1
c001d946:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d949:	e8 04 ff ff ff       	call   c001d852 <IOAPIC::read(int)>
c001d94e:	83 c4 10             	add    esp,0x10
c001d951:	c1 f8 10             	sar    eax,0x10
c001d954:	0f b6 c0             	movzx  eax,al
c001d957:	8d 50 01             	lea    edx,[eax+0x1]
c001d95a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d95d:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d963:	b8 00 00 00 00       	mov    eax,0x0
c001d968:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d96b:	5b                   	pop    ebx
c001d96c:	5e                   	pop    esi
c001d96d:	5f                   	pop    edi
c001d96e:	5d                   	pop    ebp
c001d96f:	c3                   	ret    

c001d970 <IOAPIC::write(int, int)>:
c001d970:	55                   	push   ebp
c001d971:	89 e5                	mov    ebp,esp
c001d973:	83 ec 10             	sub    esp,0x10
c001d976:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d979:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d97f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d982:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d985:	0f b6 d0             	movzx  edx,al
c001d988:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d98b:	89 10                	mov    DWORD PTR [eax],edx
c001d98d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d990:	8d 50 10             	lea    edx,[eax+0x10]
c001d993:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d996:	89 02                	mov    DWORD PTR [edx],eax
c001d998:	90                   	nop
c001d999:	c9                   	leave  
c001d99a:	c3                   	ret    
c001d99b:	90                   	nop

c001d99c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001d99c:	55                   	push   ebp
c001d99d:	89 e5                	mov    ebp,esp
c001d99f:	83 ec 20             	sub    esp,0x20
c001d9a2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d9a5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d9a8:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d9ab:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d9ae:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d9b1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d9b4:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d9b7:	88 d0                	mov    al,dl
c001d9b9:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001d9bc:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d9c0:	83 c0 08             	add    eax,0x8
c001d9c3:	01 c0                	add    eax,eax
c001d9c5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d9c8:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d9cc:	83 c0 08             	add    eax,0x8
c001d9cf:	01 c0                	add    eax,eax
c001d9d1:	40                   	inc    eax
c001d9d2:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001d9d5:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d9d8:	50                   	push   eax
c001d9d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d9dc:	e8 71 fe ff ff       	call   c001d852 <IOAPIC::read(int)>
c001d9e1:	83 c4 08             	add    esp,0x8
c001d9e4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d9e7:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001d9ee:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001d9f1:	c1 e0 18             	shl    eax,0x18
c001d9f4:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d9f7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d9fa:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d9fd:	52                   	push   edx
c001d9fe:	50                   	push   eax
c001d9ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da02:	e8 69 ff ff ff       	call   c001d970 <IOAPIC::write(int, int)>
c001da07:	83 c4 0c             	add    esp,0xc
c001da0a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da0d:	50                   	push   eax
c001da0e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da11:	e8 3c fe ff ff       	call   c001d852 <IOAPIC::read(int)>
c001da16:	83 c4 08             	add    esp,0x8
c001da19:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001da1c:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001da23:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001da2a:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001da31:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001da38:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001da3c:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001da3f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001da42:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001da45:	52                   	push   edx
c001da46:	50                   	push   eax
c001da47:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001da4a:	e8 21 ff ff ff       	call   c001d970 <IOAPIC::write(int, int)>
c001da4f:	83 c4 0c             	add    esp,0xc
c001da52:	90                   	nop
c001da53:	c9                   	leave  
c001da54:	c3                   	ret    
c001da55:	90                   	nop

c001da56 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001da56:	55                   	push   ebp
c001da57:	89 e5                	mov    ebp,esp
c001da59:	56                   	push   esi
c001da5a:	53                   	push   ebx
c001da5b:	83 ec 20             	sub    esp,0x20
c001da5e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001da61:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001da64:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001da68:	74 28                	je     c001da92 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001da6a:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001da6e:	7f 12                	jg     c001da82 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001da70:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001da73:	05 00 b1 03 c0       	add    eax,0xc003b100
c001da78:	8a 00                	mov    al,BYTE PTR [eax]
c001da7a:	0f b6 c0             	movzx  eax,al
c001da7d:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001da80:	eb 10                	jmp    c001da92 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001da82:	83 ec 0c             	sub    esp,0xc
c001da85:	68 c8 ab 03 c0       	push   0xc003abc8
c001da8a:	e8 91 f5 fe ff       	call   c000d020 <panic(char const*)>
c001da8f:	83 c4 10             	add    esp,0x10
c001da92:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001da96:	a1 a0 d0 03 c0       	mov    eax,ds:0xc003d0a0
c001da9b:	83 ec 08             	sub    esp,0x8
c001da9e:	50                   	push   eax
c001da9f:	68 00 ac 03 c0       	push   0xc003ac00
c001daa4:	e8 59 f4 fe ff       	call   c000cf02 <kprintf(char const*, ...)>
c001daa9:	83 c4 10             	add    esp,0x10
c001daac:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001dab3:	a1 a0 d0 03 c0       	mov    eax,ds:0xc003d0a0
c001dab8:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001dabb:	7d 58                	jge    c001db15 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001dabd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dac0:	8b 04 85 c0 d0 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffc2f40]
c001dac7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001daca:	83 ec 08             	sub    esp,0x8
c001dacd:	52                   	push   edx
c001dace:	50                   	push   eax
c001dacf:	e8 4c fd ff ff       	call   c001d820 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001dad4:	83 c4 10             	add    esp,0x10
c001dad7:	84 c0                	test   al,al
c001dad9:	74 35                	je     c001db10 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001dadb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dade:	8b 1c 85 c0 d0 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffc2f40]
c001dae5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dae8:	83 c0 20             	add    eax,0x20
c001daeb:	0f b6 f0             	movzx  esi,al
c001daee:	e8 c2 96 ff ff       	call   c00171b5 <getCPUNumber()>
c001daf3:	99                   	cdq    
c001daf4:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001daf7:	0f b6 c9             	movzx  ecx,cl
c001dafa:	83 ec 0c             	sub    esp,0xc
c001dafd:	56                   	push   esi
c001dafe:	52                   	push   edx
c001daff:	50                   	push   eax
c001db00:	51                   	push   ecx
c001db01:	53                   	push   ebx
c001db02:	e8 95 fe ff ff       	call   c001d99c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001db07:	83 c4 20             	add    esp,0x20
c001db0a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001db0e:	eb 05                	jmp    c001db15 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001db10:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001db13:	eb 9e                	jmp    c001dab3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001db15:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001db18:	83 f0 01             	xor    eax,0x1
c001db1b:	84 c0                	test   al,al
c001db1d:	74 10                	je     c001db2f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001db1f:	83 ec 0c             	sub    esp,0xc
c001db22:	68 17 ac 03 c0       	push   0xc003ac17
c001db27:	e8 f4 f4 fe ff       	call   c000d020 <panic(char const*)>
c001db2c:	83 c4 10             	add    esp,0x10
c001db2f:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001db33:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001db3a:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001db3e:	7f 65                	jg     c001dba5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001db40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db43:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001db46:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001db4d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001db50:	01 ca                	add    edx,ecx
c001db52:	83 c2 54             	add    edx,0x54
c001db55:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001db59:	85 c0                	test   eax,eax
c001db5b:	75 43                	jne    c001dba0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001db5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db60:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001db63:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001db6a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001db6d:	01 ca                	add    edx,ecx
c001db6f:	8d 4a 54             	lea    ecx,[edx+0x54]
c001db72:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001db75:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001db79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001db7c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001db7f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001db86:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001db89:	01 ca                	add    edx,ecx
c001db8b:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001db91:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001db94:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001db98:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001db9b:	83 e8 20             	sub    eax,0x20
c001db9e:	eb 1a                	jmp    c001dbba <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001dba0:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001dba3:	eb 95                	jmp    c001db3a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001dba5:	83 ec 0c             	sub    esp,0xc
c001dba8:	68 24 ac 03 c0       	push   0xc003ac24
c001dbad:	e8 6e f4 fe ff       	call   c000d020 <panic(char const*)>
c001dbb2:	83 c4 10             	add    esp,0x10
c001dbb5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001dbba:	8d 65 f8             	lea    esp,[ebp-0x8]
c001dbbd:	5b                   	pop    ebx
c001dbbe:	5e                   	pop    esi
c001dbbf:	5d                   	pop    ebp
c001dbc0:	c3                   	ret    
c001dbc1:	90                   	nop

c001dbc2 <PIC::disable()>:
c001dbc2:	55                   	push   ebp
c001dbc3:	89 e5                	mov    ebp,esp
c001dbc5:	83 ec 10             	sub    esp,0x10
c001dbc8:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001dbce:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001dbd2:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dbd5:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001dbd9:	ee                   	out    dx,al
c001dbda:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001dbe0:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001dbe4:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001dbe7:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001dbeb:	ee                   	out    dx,al
c001dbec:	90                   	nop
c001dbed:	c9                   	leave  
c001dbee:	c3                   	ret    
c001dbef:	90                   	nop

c001dbf0 <PIC::close(int, int, void*)>:
c001dbf0:	55                   	push   ebp
c001dbf1:	89 e5                	mov    ebp,esp
c001dbf3:	83 ec 08             	sub    esp,0x8
c001dbf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dbf9:	8b 00                	mov    eax,DWORD PTR [eax]
c001dbfb:	83 c0 3c             	add    eax,0x3c
c001dbfe:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc00:	83 ec 0c             	sub    esp,0xc
c001dc03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dc06:	ff d0                	call   eax
c001dc08:	83 c4 10             	add    esp,0x10
c001dc0b:	b8 00 00 00 00       	mov    eax,0x0
c001dc10:	c9                   	leave  
c001dc11:	c3                   	ret    

c001dc12 <PIC::PIC()>:
c001dc12:	83 ec 0c             	sub    esp,0xc
c001dc15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc19:	83 ec 08             	sub    esp,0x8
c001dc1c:	68 d0 ac 03 c0       	push   0xc003acd0
c001dc21:	50                   	push   eax
c001dc22:	e8 ad 64 ff ff       	call   c00140d4 <InterruptController::InterruptController(char const*)>
c001dc27:	83 c4 10             	add    esp,0x10
c001dc2a:	ba fc ac 03 c0       	mov    edx,0xc003acfc
c001dc2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc33:	89 10                	mov    DWORD PTR [eax],edx
c001dc35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc39:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc3f:	0f b6 d0             	movzx  edx,al
c001dc42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc46:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001dc4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc51:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc57:	0f b6 d0             	movzx  edx,al
c001dc5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc5e:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001dc63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc6d:	8d 50 01             	lea    edx,[eax+0x1]
c001dc70:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dc74:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dc7a:	0f b6 d0             	movzx  edx,al
c001dc7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc81:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dc85:	83 e1 3f             	and    ecx,0x3f
c001dc88:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dc8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc90:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dc96:	0f b6 d0             	movzx  edx,al
c001dc99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc9d:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001dca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dca8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dcae:	0f b6 d0             	movzx  edx,al
c001dcb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcb5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001dcba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcbe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dcc4:	8d 50 01             	lea    edx,[eax+0x1]
c001dcc7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dccb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dcd1:	0f b6 d0             	movzx  edx,al
c001dcd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcd8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dcdc:	83 e1 3f             	and    ecx,0x3f
c001dcdf:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dce3:	90                   	nop
c001dce4:	83 c4 0c             	add    esp,0xc
c001dce7:	c3                   	ret    

c001dce8 <PIC::ioWait()>:
c001dce8:	eb 00                	jmp    c001dcea <PIC::ioWait()+0x2>
c001dcea:	eb 00                	jmp    c001dcec <PIC::ioWait()+0x4>
c001dcec:	90                   	nop
c001dced:	c3                   	ret    

c001dcee <PIC::getIRQReg(int)>:
c001dcee:	55                   	push   ebp
c001dcef:	89 e5                	mov    ebp,esp
c001dcf1:	83 ec 10             	sub    esp,0x10
c001dcf4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dcf7:	0f b6 c0             	movzx  eax,al
c001dcfa:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001dd00:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001dd03:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001dd06:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001dd0a:	ee                   	out    dx,al
c001dd0b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dd0e:	0f b6 c0             	movzx  eax,al
c001dd11:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001dd17:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001dd1a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001dd1d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001dd21:	ee                   	out    dx,al
c001dd22:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001dd28:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001dd2c:	89 c2                	mov    edx,eax
c001dd2e:	ec                   	in     al,dx
c001dd2f:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001dd32:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001dd35:	0f b6 c0             	movzx  eax,al
c001dd38:	c1 e0 08             	shl    eax,0x8
c001dd3b:	89 c1                	mov    ecx,eax
c001dd3d:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001dd43:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001dd47:	89 c2                	mov    edx,eax
c001dd49:	ec                   	in     al,dx
c001dd4a:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001dd4d:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001dd50:	0f b6 c0             	movzx  eax,al
c001dd53:	09 c8                	or     eax,ecx
c001dd55:	c9                   	leave  
c001dd56:	c3                   	ret    
c001dd57:	90                   	nop

c001dd58 <PIC::eoi(unsigned char)>:
c001dd58:	55                   	push   ebp
c001dd59:	89 e5                	mov    ebp,esp
c001dd5b:	83 ec 14             	sub    esp,0x14
c001dd5e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dd61:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001dd64:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001dd68:	75 1e                	jne    c001dd88 <PIC::eoi(unsigned char)+0x30>
c001dd6a:	6a 0b                	push   0xb
c001dd6c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dd6f:	e8 7a ff ff ff       	call   c001dcee <PIC::getIRQReg(int)>
c001dd74:	83 c4 08             	add    esp,0x8
c001dd77:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001dd7b:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001dd7f:	25 80 00 00 00       	and    eax,0x80
c001dd84:	85 c0                	test   eax,eax
c001dd86:	74 5f                	je     c001dde7 <PIC::eoi(unsigned char)+0x8f>
c001dd88:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001dd8c:	75 2d                	jne    c001ddbb <PIC::eoi(unsigned char)+0x63>
c001dd8e:	6a 0b                	push   0xb
c001dd90:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dd93:	e8 56 ff ff ff       	call   c001dcee <PIC::getIRQReg(int)>
c001dd98:	83 c4 08             	add    esp,0x8
c001dd9b:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001dd9f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001dda2:	66 85 c0             	test   ax,ax
c001dda5:	78 14                	js     c001ddbb <PIC::eoi(unsigned char)+0x63>
c001dda7:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001ddad:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001ddb1:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001ddb4:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001ddb8:	ee                   	out    dx,al
c001ddb9:	eb 2d                	jmp    c001dde8 <PIC::eoi(unsigned char)+0x90>
c001ddbb:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001ddbf:	76 12                	jbe    c001ddd3 <PIC::eoi(unsigned char)+0x7b>
c001ddc1:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001ddc7:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001ddcb:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001ddce:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001ddd2:	ee                   	out    dx,al
c001ddd3:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001ddd9:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001dddd:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001dde0:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001dde4:	ee                   	out    dx,al
c001dde5:	eb 01                	jmp    c001dde8 <PIC::eoi(unsigned char)+0x90>
c001dde7:	90                   	nop
c001dde8:	c9                   	leave  
c001dde9:	c3                   	ret    

c001ddea <PIC::remap()>:
c001ddea:	55                   	push   ebp
c001ddeb:	89 e5                	mov    ebp,esp
c001dded:	83 ec 48             	sub    esp,0x48
c001ddf0:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001ddf7:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001ddfe:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001de04:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001de07:	89 c2                	mov    edx,eax
c001de09:	ec                   	in     al,dx
c001de0a:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001de0d:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001de10:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001de13:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001de19:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001de1c:	89 c2                	mov    edx,eax
c001de1e:	ec                   	in     al,dx
c001de1f:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001de22:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001de25:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001de28:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001de2e:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001de32:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001de35:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001de38:	ee                   	out    dx,al
c001de39:	83 ec 0c             	sub    esp,0xc
c001de3c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de3f:	e8 a4 fe ff ff       	call   c001dce8 <PIC::ioWait()>
c001de44:	83 c4 10             	add    esp,0x10
c001de47:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001de4d:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001de51:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001de54:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001de57:	ee                   	out    dx,al
c001de58:	83 ec 0c             	sub    esp,0xc
c001de5b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de5e:	e8 85 fe ff ff       	call   c001dce8 <PIC::ioWait()>
c001de63:	83 c4 10             	add    esp,0x10
c001de66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001de69:	0f b6 c0             	movzx  eax,al
c001de6c:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001de72:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001de75:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001de78:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001de7b:	ee                   	out    dx,al
c001de7c:	83 ec 0c             	sub    esp,0xc
c001de7f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001de82:	e8 61 fe ff ff       	call   c001dce8 <PIC::ioWait()>
c001de87:	83 c4 10             	add    esp,0x10
c001de8a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001de8d:	0f b6 c0             	movzx  eax,al
c001de90:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001de96:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001de99:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001de9c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001de9f:	ee                   	out    dx,al
c001dea0:	83 ec 0c             	sub    esp,0xc
c001dea3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dea6:	e8 3d fe ff ff       	call   c001dce8 <PIC::ioWait()>
c001deab:	83 c4 10             	add    esp,0x10
c001deae:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001deb4:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001deb8:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001debb:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001debe:	ee                   	out    dx,al
c001debf:	83 ec 0c             	sub    esp,0xc
c001dec2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dec5:	e8 1e fe ff ff       	call   c001dce8 <PIC::ioWait()>
c001deca:	83 c4 10             	add    esp,0x10
c001decd:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001ded3:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001ded7:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001deda:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001dedd:	ee                   	out    dx,al
c001dede:	83 ec 0c             	sub    esp,0xc
c001dee1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dee4:	e8 ff fd ff ff       	call   c001dce8 <PIC::ioWait()>
c001dee9:	83 c4 10             	add    esp,0x10
c001deec:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001def2:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001def6:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001def9:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001defc:	ee                   	out    dx,al
c001defd:	83 ec 0c             	sub    esp,0xc
c001df00:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df03:	e8 e0 fd ff ff       	call   c001dce8 <PIC::ioWait()>
c001df08:	83 c4 10             	add    esp,0x10
c001df0b:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001df11:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001df15:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001df18:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001df1b:	ee                   	out    dx,al
c001df1c:	83 ec 0c             	sub    esp,0xc
c001df1f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df22:	e8 c1 fd ff ff       	call   c001dce8 <PIC::ioWait()>
c001df27:	83 c4 10             	add    esp,0x10
c001df2a:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001df2e:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001df34:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001df37:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001df3a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001df3d:	ee                   	out    dx,al
c001df3e:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001df42:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001df48:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001df4b:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001df4e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001df51:	ee                   	out    dx,al
c001df52:	90                   	nop
c001df53:	c9                   	leave  
c001df54:	c3                   	ret    
c001df55:	90                   	nop

c001df56 <PIC::open(int, int, void*)>:
c001df56:	55                   	push   ebp
c001df57:	89 e5                	mov    ebp,esp
c001df59:	83 ec 18             	sub    esp,0x18
c001df5c:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001df62:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001df66:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001df69:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001df6d:	ee                   	out    dx,al
c001df6e:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001df74:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001df78:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001df7b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001df7f:	ee                   	out    dx,al
c001df80:	83 ec 0c             	sub    esp,0xc
c001df83:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001df86:	e8 5f fe ff ff       	call   c001ddea <PIC::remap()>
c001df8b:	83 c4 10             	add    esp,0x10
c001df8e:	b8 00 00 00 00       	mov    eax,0x0
c001df93:	c9                   	leave  
c001df94:	c3                   	ret    
c001df95:	90                   	nop

c001df96 <APICTimer::close(int, int, void*)>:
c001df96:	b8 00 00 00 00       	mov    eax,0x0
c001df9b:	c3                   	ret    

c001df9c <apicTimerHandler(regs*, void*)>:
c001df9c:	83 ec 0c             	sub    esp,0xc
c001df9f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dfa3:	8b 00                	mov    eax,DWORD PTR [eax]
c001dfa5:	99                   	cdq    
c001dfa6:	52                   	push   edx
c001dfa7:	50                   	push   eax
c001dfa8:	6a 00                	push   0x0
c001dfaa:	68 00 ca 9a 3b       	push   0x3b9aca00
c001dfaf:	e8 68 07 00 00       	call   c001e71c <__udivdi3>
c001dfb4:	83 c4 10             	add    esp,0x10
c001dfb7:	83 ec 08             	sub    esp,0x8
c001dfba:	52                   	push   edx
c001dfbb:	50                   	push   eax
c001dfbc:	e8 e2 77 ff ff       	call   c00157a3 <timerHandler(unsigned long long)>
c001dfc1:	83 c4 10             	add    esp,0x10
c001dfc4:	90                   	nop
c001dfc5:	83 c4 0c             	add    esp,0xc
c001dfc8:	c3                   	ret    
c001dfc9:	90                   	nop

c001dfca <APICTimer::write(int)>:
c001dfca:	53                   	push   ebx
c001dfcb:	83 ec 28             	sub    esp,0x28
c001dfce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dfd2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001dfd6:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dfdc:	e8 d7 91 ff ff       	call   c00171b8 <thisCPU()>
c001dfe1:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001dfe7:	83 ec 0c             	sub    esp,0xc
c001dfea:	50                   	push   eax
c001dfeb:	e8 0e f6 ff ff       	call   c001d5fe <APIC::getBase()>
c001dff0:	83 c4 10             	add    esp,0x10
c001dff3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001dff7:	a1 70 c3 03 c0       	mov    eax,ds:0xc003c370
c001dffc:	8b 15 74 c3 03 c0    	mov    edx,DWORD PTR ds:0xc003c374
c001e002:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e006:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001e00a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e00e:	05 e0 03 00 00       	add    eax,0x3e0
c001e013:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001e019:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e01d:	05 80 03 00 00       	add    eax,0x380
c001e022:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001e028:	fb                   	sti    
c001e029:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e02d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e031:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001e036:	83 d2 00             	adc    edx,0x0
c001e039:	89 c1                	mov    ecx,eax
c001e03b:	89 d3                	mov    ebx,edx
c001e03d:	a1 70 c3 03 c0       	mov    eax,ds:0xc003c370
c001e042:	8b 15 74 c3 03 c0    	mov    edx,DWORD PTR ds:0xc003c374
c001e048:	39 c8                	cmp    eax,ecx
c001e04a:	89 d0                	mov    eax,edx
c001e04c:	19 d8                	sbb    eax,ebx
c001e04e:	73 02                	jae    c001e052 <APICTimer::write(int)+0x88>
c001e050:	eb d7                	jmp    c001e029 <APICTimer::write(int)+0x5f>
c001e052:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e056:	05 20 03 00 00       	add    eax,0x320
c001e05b:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001e061:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e065:	05 90 03 00 00       	add    eax,0x390
c001e06a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e06c:	f7 d0                	not    eax
c001e06e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e072:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e076:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e07a:	ba 00 00 00 00       	mov    edx,0x0
c001e07f:	f7 f3                	div    ebx
c001e081:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e085:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e089:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e08f:	0d 00 00 02 00       	or     eax,0x20000
c001e094:	89 c2                	mov    edx,eax
c001e096:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e09a:	05 20 03 00 00       	add    eax,0x320
c001e09f:	89 10                	mov    DWORD PTR [eax],edx
c001e0a1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e0a5:	05 e0 03 00 00       	add    eax,0x3e0
c001e0aa:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001e0b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e0b4:	05 80 03 00 00       	add    eax,0x380
c001e0b9:	89 c2                	mov    edx,eax
c001e0bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e0bf:	89 02                	mov    DWORD PTR [edx],eax
c001e0c1:	90                   	nop
c001e0c2:	83 c4 28             	add    esp,0x28
c001e0c5:	5b                   	pop    ebx
c001e0c6:	c3                   	ret    
c001e0c7:	90                   	nop

c001e0c8 <APICTimer::open(int, int, void*)>:
c001e0c8:	57                   	push   edi
c001e0c9:	56                   	push   esi
c001e0ca:	53                   	push   ebx
c001e0cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e0cf:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0d1:	83 c0 24             	add    eax,0x24
c001e0d4:	8b 00                	mov    eax,DWORD PTR [eax]
c001e0d6:	83 ec 08             	sub    esp,0x8
c001e0d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e0dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e0e1:	ff d0                	call   eax
c001e0e3:	83 c4 10             	add    esp,0x10
c001e0e6:	e8 cd 90 ff ff       	call   c00171b8 <thisCPU()>
c001e0eb:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001e0f1:	83 ec 0c             	sub    esp,0xc
c001e0f4:	50                   	push   eax
c001e0f5:	e8 04 f5 ff ff       	call   c001d5fe <APIC::getBase()>
c001e0fa:	83 c4 10             	add    esp,0x10
c001e0fd:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001e103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e107:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e10d:	0f b6 f8             	movzx  edi,al
c001e110:	89 d0                	mov    eax,edx
c001e112:	ba 00 00 00 00       	mov    edx,0x0
c001e117:	89 c1                	mov    ecx,eax
c001e119:	80 e5 ff             	and    ch,0xff
c001e11c:	89 cb                	mov    ebx,ecx
c001e11e:	0f b6 f2             	movzx  esi,dl
c001e121:	89 d8                	mov    eax,ebx
c001e123:	89 f2                	mov    edx,esi
c001e125:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e129:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e12c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e130:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e134:	83 e0 00             	and    eax,0x0
c001e137:	09 d0                	or     eax,edx
c001e139:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e13d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e141:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e147:	8d 50 01             	lea    edx,[eax+0x1]
c001e14a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e14e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e154:	0f b6 d0             	movzx  edx,al
c001e157:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e15b:	83 c2 08             	add    edx,0x8
c001e15e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e162:	0f b6 c9             	movzx  ecx,cl
c001e165:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e16b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e16f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e173:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e177:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e17d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e181:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e185:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e18b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e18f:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e195:	83 ec 0c             	sub    esp,0xc
c001e198:	51                   	push   ecx
c001e199:	6a 01                	push   0x1
c001e19b:	68 9c df 01 c0       	push   0xc001df9c
c001e1a0:	52                   	push   edx
c001e1a1:	50                   	push   eax
c001e1a2:	e8 69 55 ff ff       	call   c0013710 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e1a7:	83 c4 20             	add    esp,0x20
c001e1aa:	89 c2                	mov    edx,eax
c001e1ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1b0:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e1b6:	b8 00 00 00 00       	mov    eax,0x0
c001e1bb:	5b                   	pop    ebx
c001e1bc:	5e                   	pop    esi
c001e1bd:	5f                   	pop    edi
c001e1be:	c3                   	ret    
c001e1bf:	90                   	nop

c001e1c0 <APICTimer::APICTimer()>:
c001e1c0:	83 ec 0c             	sub    esp,0xc
c001e1c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1c7:	83 ec 08             	sub    esp,0x8
c001e1ca:	68 3c ad 03 c0       	push   0xc003ad3c
c001e1cf:	50                   	push   eax
c001e1d0:	e8 3f 75 ff ff       	call   c0015714 <Timer::Timer(char const*)>
c001e1d5:	83 c4 10             	add    esp,0x10
c001e1d8:	ba 50 ad 03 c0       	mov    edx,0xc003ad50
c001e1dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1e1:	89 10                	mov    DWORD PTR [eax],edx
c001e1e3:	90                   	nop
c001e1e4:	83 c4 0c             	add    esp,0xc
c001e1e7:	c3                   	ret    

c001e1e8 <PIT::write(int)>:
c001e1e8:	83 ec 10             	sub    esp,0x10
c001e1eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e1f3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e1f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e1fd:	a3 e4 d0 03 c0       	mov    ds:0xc003d0e4,eax
c001e202:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e207:	99                   	cdq    
c001e208:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e20c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e210:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e217:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e21c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e220:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e225:	ee                   	out    dx,al
c001e226:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e22a:	0f b6 c0             	movzx  eax,al
c001e22d:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e234:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e238:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e23c:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e241:	ee                   	out    dx,al
c001e242:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e246:	c1 f8 08             	sar    eax,0x8
c001e249:	0f b6 c0             	movzx  eax,al
c001e24c:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e253:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e257:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e25b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e260:	ee                   	out    dx,al
c001e261:	90                   	nop
c001e262:	83 c4 10             	add    esp,0x10
c001e265:	c3                   	ret    

c001e266 <pitHandler(regs*, void*)>:
c001e266:	83 ec 0c             	sub    esp,0xc
c001e269:	a1 e4 d0 03 c0       	mov    eax,ds:0xc003d0e4
c001e26e:	99                   	cdq    
c001e26f:	52                   	push   edx
c001e270:	50                   	push   eax
c001e271:	6a 00                	push   0x0
c001e273:	68 00 ca 9a 3b       	push   0x3b9aca00
c001e278:	e8 9f 04 00 00       	call   c001e71c <__udivdi3>
c001e27d:	83 c4 10             	add    esp,0x10
c001e280:	83 ec 08             	sub    esp,0x8
c001e283:	52                   	push   edx
c001e284:	50                   	push   eax
c001e285:	e8 19 75 ff ff       	call   c00157a3 <timerHandler(unsigned long long)>
c001e28a:	83 c4 10             	add    esp,0x10
c001e28d:	90                   	nop
c001e28e:	83 c4 0c             	add    esp,0xc
c001e291:	c3                   	ret    

c001e292 <PIT::open(int, int, void*)>:
c001e292:	83 ec 0c             	sub    esp,0xc
c001e295:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e299:	8b 00                	mov    eax,DWORD PTR [eax]
c001e29b:	83 c0 24             	add    eax,0x24
c001e29e:	8b 00                	mov    eax,DWORD PTR [eax]
c001e2a0:	83 ec 08             	sub    esp,0x8
c001e2a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e2a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e2ab:	ff d0                	call   eax
c001e2ad:	83 c4 10             	add    esp,0x10
c001e2b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2b4:	83 ec 0c             	sub    esp,0xc
c001e2b7:	6a 00                	push   0x0
c001e2b9:	6a 01                	push   0x1
c001e2bb:	68 66 e2 01 c0       	push   0xc001e266
c001e2c0:	6a 00                	push   0x0
c001e2c2:	50                   	push   eax
c001e2c3:	e8 48 54 ff ff       	call   c0013710 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e2c8:	83 c4 20             	add    esp,0x20
c001e2cb:	89 c2                	mov    edx,eax
c001e2cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2d1:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e2d7:	b8 00 00 00 00       	mov    eax,0x0
c001e2dc:	83 c4 0c             	add    esp,0xc
c001e2df:	c3                   	ret    

c001e2e0 <PIT::close(int, int, void*)>:
c001e2e0:	83 ec 0c             	sub    esp,0xc
c001e2e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2e7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e2f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2f5:	6a 01                	push   0x1
c001e2f7:	68 66 e2 01 c0       	push   0xc001e266
c001e2fc:	6a 00                	push   0x0
c001e2fe:	50                   	push   eax
c001e2ff:	e8 6a 54 ff ff       	call   c001376e <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001e304:	83 c4 10             	add    esp,0x10
c001e307:	b8 00 00 00 00       	mov    eax,0x0
c001e30c:	83 c4 0c             	add    esp,0xc
c001e30f:	c3                   	ret    

c001e310 <PIT::PIT()>:
c001e310:	83 ec 0c             	sub    esp,0xc
c001e313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e317:	83 ec 08             	sub    esp,0x8
c001e31a:	68 78 ad 03 c0       	push   0xc003ad78
c001e31f:	50                   	push   eax
c001e320:	e8 ef 73 ff ff       	call   c0015714 <Timer::Timer(char const*)>
c001e325:	83 c4 10             	add    esp,0x10
c001e328:	ba a0 ad 03 c0       	mov    edx,0xc003ada0
c001e32d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e331:	89 10                	mov    DWORD PTR [eax],edx
c001e333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e337:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e33d:	0f b6 d0             	movzx  edx,al
c001e340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e344:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001e34b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e34f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e355:	0f b6 d0             	movzx  edx,al
c001e358:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e35c:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001e361:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e365:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e36b:	8d 50 01             	lea    edx,[eax+0x1]
c001e36e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e372:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e378:	0f b6 d0             	movzx  edx,al
c001e37b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e37f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e383:	83 e1 3f             	and    ecx,0x3f
c001e386:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e38a:	90                   	nop
c001e38b:	83 c4 0c             	add    esp,0xc
c001e38e:	c3                   	ret    
c001e38f:	90                   	nop

c001e390 <avxDetect>:
c001e390:	b8 00 00 00 00       	mov    eax,0x0
c001e395:	c3                   	ret    

c001e396 <avxSave>:
c001e396:	c3                   	ret    

c001e397 <avxLoad>:
c001e397:	c3                   	ret    

c001e398 <avxInit>:
c001e398:	c3                   	ret    

c001e399 <avxClose>:
c001e399:	c3                   	ret    
c001e39a:	66 90                	xchg   ax,ax
c001e39c:	66 90                	xchg   ax,ax
c001e39e:	66 90                	xchg   ax,ax

c001e3a0 <sseDetect>:
c001e3a0:	b8 01 00 00 00       	mov    eax,0x1
c001e3a5:	0f a2                	cpuid  
c001e3a7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001e3ad:	74 06                	je     c001e3b5 <sseDetect.noSSE>
c001e3af:	b8 01 00 00 00       	mov    eax,0x1
c001e3b4:	c3                   	ret    

c001e3b5 <sseDetect.noSSE>:
c001e3b5:	b8 00 00 00 00       	mov    eax,0x0
c001e3ba:	c3                   	ret    

c001e3bb <sseSave>:
c001e3bb:	0f ae 44 24 08       	fxsave [esp+0x8]
c001e3c0:	c3                   	ret    

c001e3c1 <sseLoad>:
c001e3c1:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001e3c6:	c3                   	ret    

c001e3c7 <sseInit>:
c001e3c7:	e8 40 00 00 00       	call   c001e40c <x87Init>
c001e3cc:	0f 20 e0             	mov    eax,cr4
c001e3cf:	66 0d 00 06          	or     ax,0x600
c001e3d3:	0f 22 e0             	mov    cr4,eax
c001e3d6:	c3                   	ret    

c001e3d7 <sseClose>:
c001e3d7:	c3                   	ret    
c001e3d8:	66 90                	xchg   ax,ax
c001e3da:	66 90                	xchg   ax,ax
c001e3dc:	66 90                	xchg   ax,ax
c001e3de:	66 90                	xchg   ax,ax

c001e3e0 <value_37F>:
c001e3e0:	7f 03                	jg     c001e3e5 <value_37A+0x1>

c001e3e2 <value_37E>:
c001e3e2:	7e 03                	jle    c001e3e7 <x87Detect+0x1>

c001e3e4 <value_37A>:
c001e3e4:	7a 03                	jp     c001e3e9 <x87Detect+0x3>

c001e3e6 <x87Detect>:
c001e3e6:	b8 01 00 00 00       	mov    eax,0x1
c001e3eb:	0f a2                	cpuid  
c001e3ed:	f7 c2 01 00 00 00    	test   edx,0x1
c001e3f3:	74 06                	je     c001e3fb <x87Detect.nox87>
c001e3f5:	b8 01 00 00 00       	mov    eax,0x1
c001e3fa:	c3                   	ret    

c001e3fb <x87Detect.nox87>:
c001e3fb:	b8 00 00 00 00       	mov    eax,0x0
c001e400:	c3                   	ret    

c001e401 <x87Save>:
c001e401:	9b dd 74 24 08       	fsave  [esp+0x8]
c001e406:	c3                   	ret    

c001e407 <x87Load>:
c001e407:	dd 64 24 08          	frstor [esp+0x8]
c001e40b:	c3                   	ret    

c001e40c <x87Init>:
c001e40c:	9b db e3             	finit  
c001e40f:	0f 20 c0             	mov    eax,cr0
c001e412:	66 25 fb ff          	and    ax,0xfffb
c001e416:	66 0d 22 00          	or     ax,0x22
c001e41a:	0f 22 c0             	mov    cr0,eax
c001e41d:	0f 06                	clts   
c001e41f:	d9 2d e4 e3 01 c0    	fldcw  WORD PTR ds:0xc001e3e4
c001e425:	c3                   	ret    

c001e426 <x87Close>:
c001e426:	c3                   	ret    
c001e427:	90                   	nop

c001e428 <__do_global_ctors_aux>:
c001e428:	a1 58 f5 01 c0       	mov    eax,ds:0xc001f558
c001e42d:	83 f8 ff             	cmp    eax,0xffffffff
c001e430:	74 1a                	je     c001e44c <__do_global_ctors_aux+0x24>
c001e432:	55                   	push   ebp
c001e433:	89 e5                	mov    ebp,esp
c001e435:	53                   	push   ebx
c001e436:	52                   	push   edx
c001e437:	bb 58 f5 01 c0       	mov    ebx,0xc001f558
c001e43c:	ff d0                	call   eax
c001e43e:	83 eb 04             	sub    ebx,0x4
c001e441:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e443:	83 f8 ff             	cmp    eax,0xffffffff
c001e446:	75 f4                	jne    c001e43c <__do_global_ctors_aux+0x14>
c001e448:	58                   	pop    eax
c001e449:	5b                   	pop    ebx
c001e44a:	5d                   	pop    ebp
c001e44b:	c3                   	ret    
c001e44c:	c3                   	ret    
c001e44d:	66 90                	xchg   ax,ax
c001e44f:	90                   	nop

c001e450 <__divdi3>:
c001e450:	55                   	push   ebp
c001e451:	57                   	push   edi
c001e452:	56                   	push   esi
c001e453:	53                   	push   ebx
c001e454:	83 ec 1c             	sub    esp,0x1c
c001e457:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001e45b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e45f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e462:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e466:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001e46a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e46e:	85 db                	test   ebx,ebx
c001e470:	0f 88 8e 00 00 00    	js     c001e504 <__divdi3+0xb4>
c001e476:	89 dd                	mov    ebp,ebx
c001e478:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001e480:	89 d3                	mov    ebx,edx
c001e482:	85 d2                	test   edx,edx
c001e484:	79 0d                	jns    c001e493 <__divdi3+0x43>
c001e486:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001e48a:	f7 d8                	neg    eax
c001e48c:	83 d2 00             	adc    edx,0x0
c001e48f:	f7 da                	neg    edx
c001e491:	89 d3                	mov    ebx,edx
c001e493:	89 c7                	mov    edi,eax
c001e495:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e498:	85 db                	test   ebx,ebx
c001e49a:	75 48                	jne    c001e4e4 <__divdi3+0x94>
c001e49c:	39 ef                	cmp    edi,ebp
c001e49e:	76 24                	jbe    c001e4c4 <__divdi3+0x74>
c001e4a0:	89 ea                	mov    edx,ebp
c001e4a2:	f7 f7                	div    edi
c001e4a4:	89 c1                	mov    ecx,eax
c001e4a6:	31 f6                	xor    esi,esi
c001e4a8:	89 c8                	mov    eax,ecx
c001e4aa:	89 f2                	mov    edx,esi
c001e4ac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e4b0:	85 c9                	test   ecx,ecx
c001e4b2:	74 07                	je     c001e4bb <__divdi3+0x6b>
c001e4b4:	f7 d8                	neg    eax
c001e4b6:	83 d2 00             	adc    edx,0x0
c001e4b9:	f7 da                	neg    edx
c001e4bb:	83 c4 1c             	add    esp,0x1c
c001e4be:	5b                   	pop    ebx
c001e4bf:	5e                   	pop    esi
c001e4c0:	5f                   	pop    edi
c001e4c1:	5d                   	pop    ebp
c001e4c2:	c3                   	ret    
c001e4c3:	90                   	nop
c001e4c4:	85 ff                	test   edi,edi
c001e4c6:	75 0b                	jne    c001e4d3 <__divdi3+0x83>
c001e4c8:	b8 01 00 00 00       	mov    eax,0x1
c001e4cd:	31 d2                	xor    edx,edx
c001e4cf:	f7 f3                	div    ebx
c001e4d1:	89 c7                	mov    edi,eax
c001e4d3:	31 d2                	xor    edx,edx
c001e4d5:	89 e8                	mov    eax,ebp
c001e4d7:	f7 f7                	div    edi
c001e4d9:	89 c6                	mov    esi,eax
c001e4db:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001e4de:	f7 f7                	div    edi
c001e4e0:	89 c1                	mov    ecx,eax
c001e4e2:	eb c4                	jmp    c001e4a8 <__divdi3+0x58>
c001e4e4:	39 eb                	cmp    ebx,ebp
c001e4e6:	77 3c                	ja     c001e524 <__divdi3+0xd4>
c001e4e8:	0f bd f3             	bsr    esi,ebx
c001e4eb:	83 f6 1f             	xor    esi,0x1f
c001e4ee:	75 40                	jne    c001e530 <__divdi3+0xe0>
c001e4f0:	39 eb                	cmp    ebx,ebp
c001e4f2:	72 09                	jb     c001e4fd <__divdi3+0xad>
c001e4f4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001e4f7:	0f 87 97 00 00 00    	ja     c001e594 <__divdi3+0x144>
c001e4fd:	b9 01 00 00 00       	mov    ecx,0x1
c001e502:	eb a4                	jmp    c001e4a8 <__divdi3+0x58>
c001e504:	f7 d9                	neg    ecx
c001e506:	83 d3 00             	adc    ebx,0x0
c001e509:	f7 db                	neg    ebx
c001e50b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001e50e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001e512:	89 dd                	mov    ebp,ebx
c001e514:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001e51c:	e9 5f ff ff ff       	jmp    c001e480 <__divdi3+0x30>
c001e521:	8d 76 00             	lea    esi,[esi+0x0]
c001e524:	31 f6                	xor    esi,esi
c001e526:	31 c9                	xor    ecx,ecx
c001e528:	e9 7b ff ff ff       	jmp    c001e4a8 <__divdi3+0x58>
c001e52d:	8d 76 00             	lea    esi,[esi+0x0]
c001e530:	b8 20 00 00 00       	mov    eax,0x20
c001e535:	29 f0                	sub    eax,esi
c001e537:	89 f1                	mov    ecx,esi
c001e539:	d3 e3                	shl    ebx,cl
c001e53b:	89 fa                	mov    edx,edi
c001e53d:	88 c1                	mov    cl,al
c001e53f:	d3 ea                	shr    edx,cl
c001e541:	09 da                	or     edx,ebx
c001e543:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e547:	89 f1                	mov    ecx,esi
c001e549:	d3 e7                	shl    edi,cl
c001e54b:	89 eb                	mov    ebx,ebp
c001e54d:	88 c1                	mov    cl,al
c001e54f:	d3 eb                	shr    ebx,cl
c001e551:	89 f1                	mov    ecx,esi
c001e553:	d3 e5                	shl    ebp,cl
c001e555:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001e558:	88 c1                	mov    cl,al
c001e55a:	d3 ea                	shr    edx,cl
c001e55c:	09 d5                	or     ebp,edx
c001e55e:	89 e8                	mov    eax,ebp
c001e560:	89 da                	mov    edx,ebx
c001e562:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001e566:	89 d3                	mov    ebx,edx
c001e568:	89 c5                	mov    ebp,eax
c001e56a:	f7 e7                	mul    edi
c001e56c:	39 d3                	cmp    ebx,edx
c001e56e:	72 18                	jb     c001e588 <__divdi3+0x138>
c001e570:	74 0a                	je     c001e57c <__divdi3+0x12c>
c001e572:	89 e9                	mov    ecx,ebp
c001e574:	31 f6                	xor    esi,esi
c001e576:	e9 2d ff ff ff       	jmp    c001e4a8 <__divdi3+0x58>
c001e57b:	90                   	nop
c001e57c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001e57f:	89 f1                	mov    ecx,esi
c001e581:	d3 e7                	shl    edi,cl
c001e583:	39 c7                	cmp    edi,eax
c001e585:	73 eb                	jae    c001e572 <__divdi3+0x122>
c001e587:	90                   	nop
c001e588:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001e58b:	31 f6                	xor    esi,esi
c001e58d:	e9 16 ff ff ff       	jmp    c001e4a8 <__divdi3+0x58>
c001e592:	66 90                	xchg   ax,ax
c001e594:	31 c9                	xor    ecx,ecx
c001e596:	e9 0d ff ff ff       	jmp    c001e4a8 <__divdi3+0x58>
c001e59b:	90                   	nop

c001e59c <__moddi3>:
c001e59c:	55                   	push   ebp
c001e59d:	57                   	push   edi
c001e59e:	56                   	push   esi
c001e59f:	53                   	push   ebx
c001e5a0:	83 ec 2c             	sub    esp,0x2c
c001e5a3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e5a7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001e5ab:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e5af:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001e5b3:	85 db                	test   ebx,ebx
c001e5b5:	0f 88 85 00 00 00    	js     c001e640 <__moddi3+0xa4>
c001e5bb:	89 de                	mov    esi,ebx
c001e5bd:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001e5c5:	89 d7                	mov    edi,edx
c001e5c7:	85 d2                	test   edx,edx
c001e5c9:	79 09                	jns    c001e5d4 <__moddi3+0x38>
c001e5cb:	f7 d8                	neg    eax
c001e5cd:	83 d2 00             	adc    edx,0x0
c001e5d0:	f7 da                	neg    edx
c001e5d2:	89 d7                	mov    edi,edx
c001e5d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e5d8:	89 cd                	mov    ebp,ecx
c001e5da:	85 ff                	test   edi,edi
c001e5dc:	75 52                	jne    c001e630 <__moddi3+0x94>
c001e5de:	89 c3                	mov    ebx,eax
c001e5e0:	39 f0                	cmp    eax,esi
c001e5e2:	76 24                	jbe    c001e608 <__moddi3+0x6c>
c001e5e4:	89 c8                	mov    eax,ecx
c001e5e6:	89 f2                	mov    edx,esi
c001e5e8:	f7 f3                	div    ebx
c001e5ea:	89 d6                	mov    esi,edx
c001e5ec:	89 f0                	mov    eax,esi
c001e5ee:	31 d2                	xor    edx,edx
c001e5f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e5f4:	85 c9                	test   ecx,ecx
c001e5f6:	74 07                	je     c001e5ff <__moddi3+0x63>
c001e5f8:	f7 d8                	neg    eax
c001e5fa:	83 d2 00             	adc    edx,0x0
c001e5fd:	f7 da                	neg    edx
c001e5ff:	83 c4 2c             	add    esp,0x2c
c001e602:	5b                   	pop    ebx
c001e603:	5e                   	pop    esi
c001e604:	5f                   	pop    edi
c001e605:	5d                   	pop    ebp
c001e606:	c3                   	ret    
c001e607:	90                   	nop
c001e608:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001e60c:	85 db                	test   ebx,ebx
c001e60e:	75 0d                	jne    c001e61d <__moddi3+0x81>
c001e610:	b8 01 00 00 00       	mov    eax,0x1
c001e615:	31 d2                	xor    edx,edx
c001e617:	f7 f7                	div    edi
c001e619:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e61d:	89 f0                	mov    eax,esi
c001e61f:	31 d2                	xor    edx,edx
c001e621:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e625:	f7 f7                	div    edi
c001e627:	89 e8                	mov    eax,ebp
c001e629:	f7 f7                	div    edi
c001e62b:	89 d6                	mov    esi,edx
c001e62d:	eb bd                	jmp    c001e5ec <__moddi3+0x50>
c001e62f:	90                   	nop
c001e630:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e634:	39 f7                	cmp    edi,esi
c001e636:	76 20                	jbe    c001e658 <__moddi3+0xbc>
c001e638:	89 c8                	mov    eax,ecx
c001e63a:	89 f2                	mov    edx,esi
c001e63c:	eb b2                	jmp    c001e5f0 <__moddi3+0x54>
c001e63e:	66 90                	xchg   ax,ax
c001e640:	f7 d9                	neg    ecx
c001e642:	83 d3 00             	adc    ebx,0x0
c001e645:	f7 db                	neg    ebx
c001e647:	89 de                	mov    esi,ebx
c001e649:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e651:	e9 6f ff ff ff       	jmp    c001e5c5 <__moddi3+0x29>
c001e656:	66 90                	xchg   ax,ax
c001e658:	0f bd c7             	bsr    eax,edi
c001e65b:	83 f0 1f             	xor    eax,0x1f
c001e65e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e662:	75 24                	jne    c001e688 <__moddi3+0xec>
c001e664:	39 f7                	cmp    edi,esi
c001e666:	72 06                	jb     c001e66e <__moddi3+0xd2>
c001e668:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e66c:	77 0c                	ja     c001e67a <__moddi3+0xde>
c001e66e:	89 e9                	mov    ecx,ebp
c001e670:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e674:	19 fe                	sbb    esi,edi
c001e676:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e67a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e67e:	89 f2                	mov    edx,esi
c001e680:	e9 6b ff ff ff       	jmp    c001e5f0 <__moddi3+0x54>
c001e685:	8d 76 00             	lea    esi,[esi+0x0]
c001e688:	b8 20 00 00 00       	mov    eax,0x20
c001e68d:	89 c2                	mov    edx,eax
c001e68f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e693:	29 da                	sub    edx,ebx
c001e695:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e699:	88 d9                	mov    cl,bl
c001e69b:	d3 e7                	shl    edi,cl
c001e69d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e6a1:	88 d1                	mov    cl,dl
c001e6a3:	d3 e8                	shr    eax,cl
c001e6a5:	09 c7                	or     edi,eax
c001e6a7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e6ab:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e6af:	89 d8                	mov    eax,ebx
c001e6b1:	88 d9                	mov    cl,bl
c001e6b3:	d3 e7                	shl    edi,cl
c001e6b5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e6b9:	89 f3                	mov    ebx,esi
c001e6bb:	88 d1                	mov    cl,dl
c001e6bd:	d3 eb                	shr    ebx,cl
c001e6bf:	89 c7                	mov    edi,eax
c001e6c1:	88 c1                	mov    cl,al
c001e6c3:	d3 e6                	shl    esi,cl
c001e6c5:	89 e8                	mov    eax,ebp
c001e6c7:	88 d1                	mov    cl,dl
c001e6c9:	d3 e8                	shr    eax,cl
c001e6cb:	09 f0                	or     eax,esi
c001e6cd:	89 f9                	mov    ecx,edi
c001e6cf:	d3 e5                	shl    ebp,cl
c001e6d1:	89 da                	mov    edx,ebx
c001e6d3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e6d7:	89 d3                	mov    ebx,edx
c001e6d9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e6dd:	89 c6                	mov    esi,eax
c001e6df:	89 d1                	mov    ecx,edx
c001e6e1:	39 d3                	cmp    ebx,edx
c001e6e3:	72 27                	jb     c001e70c <__moddi3+0x170>
c001e6e5:	74 21                	je     c001e708 <__moddi3+0x16c>
c001e6e7:	29 f5                	sub    ebp,esi
c001e6e9:	19 cb                	sbb    ebx,ecx
c001e6eb:	89 de                	mov    esi,ebx
c001e6ed:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e6f1:	d3 e6                	shl    esi,cl
c001e6f3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e6f7:	89 f9                	mov    ecx,edi
c001e6f9:	d3 ed                	shr    ebp,cl
c001e6fb:	09 ee                	or     esi,ebp
c001e6fd:	89 f0                	mov    eax,esi
c001e6ff:	d3 eb                	shr    ebx,cl
c001e701:	89 da                	mov    edx,ebx
c001e703:	e9 e8 fe ff ff       	jmp    c001e5f0 <__moddi3+0x54>
c001e708:	39 c5                	cmp    ebp,eax
c001e70a:	73 db                	jae    c001e6e7 <__moddi3+0x14b>
c001e70c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e710:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e714:	89 d1                	mov    ecx,edx
c001e716:	89 c6                	mov    esi,eax
c001e718:	eb cd                	jmp    c001e6e7 <__moddi3+0x14b>
c001e71a:	66 90                	xchg   ax,ax

c001e71c <__udivdi3>:
c001e71c:	55                   	push   ebp
c001e71d:	57                   	push   edi
c001e71e:	56                   	push   esi
c001e71f:	53                   	push   ebx
c001e720:	83 ec 1c             	sub    esp,0x1c
c001e723:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e727:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e72b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e72f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e733:	85 d2                	test   edx,edx
c001e735:	75 41                	jne    c001e778 <__udivdi3+0x5c>
c001e737:	39 f7                	cmp    edi,esi
c001e739:	76 15                	jbe    c001e750 <__udivdi3+0x34>
c001e73b:	89 e8                	mov    eax,ebp
c001e73d:	89 f2                	mov    edx,esi
c001e73f:	f7 f7                	div    edi
c001e741:	31 db                	xor    ebx,ebx
c001e743:	89 da                	mov    edx,ebx
c001e745:	83 c4 1c             	add    esp,0x1c
c001e748:	5b                   	pop    ebx
c001e749:	5e                   	pop    esi
c001e74a:	5f                   	pop    edi
c001e74b:	5d                   	pop    ebp
c001e74c:	c3                   	ret    
c001e74d:	8d 76 00             	lea    esi,[esi+0x0]
c001e750:	89 f9                	mov    ecx,edi
c001e752:	85 ff                	test   edi,edi
c001e754:	75 0b                	jne    c001e761 <__udivdi3+0x45>
c001e756:	b8 01 00 00 00       	mov    eax,0x1
c001e75b:	31 d2                	xor    edx,edx
c001e75d:	f7 f7                	div    edi
c001e75f:	89 c1                	mov    ecx,eax
c001e761:	31 d2                	xor    edx,edx
c001e763:	89 f0                	mov    eax,esi
c001e765:	f7 f1                	div    ecx
c001e767:	89 c3                	mov    ebx,eax
c001e769:	89 e8                	mov    eax,ebp
c001e76b:	f7 f1                	div    ecx
c001e76d:	89 da                	mov    edx,ebx
c001e76f:	83 c4 1c             	add    esp,0x1c
c001e772:	5b                   	pop    ebx
c001e773:	5e                   	pop    esi
c001e774:	5f                   	pop    edi
c001e775:	5d                   	pop    ebp
c001e776:	c3                   	ret    
c001e777:	90                   	nop
c001e778:	39 f2                	cmp    edx,esi
c001e77a:	77 1c                	ja     c001e798 <__udivdi3+0x7c>
c001e77c:	0f bd da             	bsr    ebx,edx
c001e77f:	83 f3 1f             	xor    ebx,0x1f
c001e782:	75 24                	jne    c001e7a8 <__udivdi3+0x8c>
c001e784:	39 f2                	cmp    edx,esi
c001e786:	72 08                	jb     c001e790 <__udivdi3+0x74>
c001e788:	39 ef                	cmp    edi,ebp
c001e78a:	0f 87 84 00 00 00    	ja     c001e814 <__udivdi3+0xf8>
c001e790:	b8 01 00 00 00       	mov    eax,0x1
c001e795:	eb ac                	jmp    c001e743 <__udivdi3+0x27>
c001e797:	90                   	nop
c001e798:	31 db                	xor    ebx,ebx
c001e79a:	31 c0                	xor    eax,eax
c001e79c:	89 da                	mov    edx,ebx
c001e79e:	83 c4 1c             	add    esp,0x1c
c001e7a1:	5b                   	pop    ebx
c001e7a2:	5e                   	pop    esi
c001e7a3:	5f                   	pop    edi
c001e7a4:	5d                   	pop    ebp
c001e7a5:	c3                   	ret    
c001e7a6:	66 90                	xchg   ax,ax
c001e7a8:	b8 20 00 00 00       	mov    eax,0x20
c001e7ad:	29 d8                	sub    eax,ebx
c001e7af:	88 d9                	mov    cl,bl
c001e7b1:	d3 e2                	shl    edx,cl
c001e7b3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e7b7:	89 fa                	mov    edx,edi
c001e7b9:	88 c1                	mov    cl,al
c001e7bb:	d3 ea                	shr    edx,cl
c001e7bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e7c1:	09 d1                	or     ecx,edx
c001e7c3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e7c7:	88 d9                	mov    cl,bl
c001e7c9:	d3 e7                	shl    edi,cl
c001e7cb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e7cf:	89 f7                	mov    edi,esi
c001e7d1:	88 c1                	mov    cl,al
c001e7d3:	d3 ef                	shr    edi,cl
c001e7d5:	88 d9                	mov    cl,bl
c001e7d7:	d3 e6                	shl    esi,cl
c001e7d9:	89 ea                	mov    edx,ebp
c001e7db:	88 c1                	mov    cl,al
c001e7dd:	d3 ea                	shr    edx,cl
c001e7df:	09 d6                	or     esi,edx
c001e7e1:	89 f0                	mov    eax,esi
c001e7e3:	89 fa                	mov    edx,edi
c001e7e5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e7e9:	89 d7                	mov    edi,edx
c001e7eb:	89 c6                	mov    esi,eax
c001e7ed:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e7f1:	39 d7                	cmp    edi,edx
c001e7f3:	72 13                	jb     c001e808 <__udivdi3+0xec>
c001e7f5:	74 09                	je     c001e800 <__udivdi3+0xe4>
c001e7f7:	89 f0                	mov    eax,esi
c001e7f9:	31 db                	xor    ebx,ebx
c001e7fb:	e9 43 ff ff ff       	jmp    c001e743 <__udivdi3+0x27>
c001e800:	88 d9                	mov    cl,bl
c001e802:	d3 e5                	shl    ebp,cl
c001e804:	39 c5                	cmp    ebp,eax
c001e806:	73 ef                	jae    c001e7f7 <__udivdi3+0xdb>
c001e808:	8d 46 ff             	lea    eax,[esi-0x1]
c001e80b:	31 db                	xor    ebx,ebx
c001e80d:	e9 31 ff ff ff       	jmp    c001e743 <__udivdi3+0x27>
c001e812:	66 90                	xchg   ax,ax
c001e814:	31 c0                	xor    eax,eax
c001e816:	e9 28 ff ff ff       	jmp    c001e743 <__udivdi3+0x27>
c001e81b:	90                   	nop

c001e81c <__umoddi3>:
c001e81c:	55                   	push   ebp
c001e81d:	57                   	push   edi
c001e81e:	56                   	push   esi
c001e81f:	53                   	push   ebx
c001e820:	83 ec 1c             	sub    esp,0x1c
c001e823:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e827:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e82b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e82f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e833:	89 da                	mov    edx,ebx
c001e835:	85 c0                	test   eax,eax
c001e837:	75 37                	jne    c001e870 <__umoddi3+0x54>
c001e839:	39 df                	cmp    edi,ebx
c001e83b:	76 13                	jbe    c001e850 <__umoddi3+0x34>
c001e83d:	89 f0                	mov    eax,esi
c001e83f:	f7 f7                	div    edi
c001e841:	89 d0                	mov    eax,edx
c001e843:	31 d2                	xor    edx,edx
c001e845:	83 c4 1c             	add    esp,0x1c
c001e848:	5b                   	pop    ebx
c001e849:	5e                   	pop    esi
c001e84a:	5f                   	pop    edi
c001e84b:	5d                   	pop    ebp
c001e84c:	c3                   	ret    
c001e84d:	8d 76 00             	lea    esi,[esi+0x0]
c001e850:	89 fd                	mov    ebp,edi
c001e852:	85 ff                	test   edi,edi
c001e854:	75 0b                	jne    c001e861 <__umoddi3+0x45>
c001e856:	b8 01 00 00 00       	mov    eax,0x1
c001e85b:	31 d2                	xor    edx,edx
c001e85d:	f7 f7                	div    edi
c001e85f:	89 c5                	mov    ebp,eax
c001e861:	89 d8                	mov    eax,ebx
c001e863:	31 d2                	xor    edx,edx
c001e865:	f7 f5                	div    ebp
c001e867:	89 f0                	mov    eax,esi
c001e869:	f7 f5                	div    ebp
c001e86b:	89 d0                	mov    eax,edx
c001e86d:	eb d4                	jmp    c001e843 <__umoddi3+0x27>
c001e86f:	90                   	nop
c001e870:	89 f1                	mov    ecx,esi
c001e872:	39 d8                	cmp    eax,ebx
c001e874:	76 0a                	jbe    c001e880 <__umoddi3+0x64>
c001e876:	89 f0                	mov    eax,esi
c001e878:	83 c4 1c             	add    esp,0x1c
c001e87b:	5b                   	pop    ebx
c001e87c:	5e                   	pop    esi
c001e87d:	5f                   	pop    edi
c001e87e:	5d                   	pop    ebp
c001e87f:	c3                   	ret    
c001e880:	0f bd e8             	bsr    ebp,eax
c001e883:	83 f5 1f             	xor    ebp,0x1f
c001e886:	75 1c                	jne    c001e8a4 <__umoddi3+0x88>
c001e888:	39 d8                	cmp    eax,ebx
c001e88a:	72 04                	jb     c001e890 <__umoddi3+0x74>
c001e88c:	39 f7                	cmp    edi,esi
c001e88e:	77 08                	ja     c001e898 <__umoddi3+0x7c>
c001e890:	89 da                	mov    edx,ebx
c001e892:	29 fe                	sub    esi,edi
c001e894:	19 c2                	sbb    edx,eax
c001e896:	89 f1                	mov    ecx,esi
c001e898:	89 c8                	mov    eax,ecx
c001e89a:	83 c4 1c             	add    esp,0x1c
c001e89d:	5b                   	pop    ebx
c001e89e:	5e                   	pop    esi
c001e89f:	5f                   	pop    edi
c001e8a0:	5d                   	pop    ebp
c001e8a1:	c3                   	ret    
c001e8a2:	66 90                	xchg   ax,ax
c001e8a4:	ba 20 00 00 00       	mov    edx,0x20
c001e8a9:	29 ea                	sub    edx,ebp
c001e8ab:	89 e9                	mov    ecx,ebp
c001e8ad:	d3 e0                	shl    eax,cl
c001e8af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e8b3:	89 f8                	mov    eax,edi
c001e8b5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e8b9:	88 d1                	mov    cl,dl
c001e8bb:	d3 e8                	shr    eax,cl
c001e8bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e8c1:	09 c1                	or     ecx,eax
c001e8c3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e8c7:	89 e9                	mov    ecx,ebp
c001e8c9:	d3 e7                	shl    edi,cl
c001e8cb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e8cf:	89 d8                	mov    eax,ebx
c001e8d1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e8d5:	88 d1                	mov    cl,dl
c001e8d7:	d3 e8                	shr    eax,cl
c001e8d9:	89 c7                	mov    edi,eax
c001e8db:	89 e9                	mov    ecx,ebp
c001e8dd:	d3 e3                	shl    ebx,cl
c001e8df:	89 f0                	mov    eax,esi
c001e8e1:	88 d1                	mov    cl,dl
c001e8e3:	d3 e8                	shr    eax,cl
c001e8e5:	09 d8                	or     eax,ebx
c001e8e7:	89 e9                	mov    ecx,ebp
c001e8e9:	d3 e6                	shl    esi,cl
c001e8eb:	89 f3                	mov    ebx,esi
c001e8ed:	89 fa                	mov    edx,edi
c001e8ef:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e8f3:	89 d1                	mov    ecx,edx
c001e8f5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e8f9:	89 c6                	mov    esi,eax
c001e8fb:	89 d7                	mov    edi,edx
c001e8fd:	39 d1                	cmp    ecx,edx
c001e8ff:	72 27                	jb     c001e928 <__umoddi3+0x10c>
c001e901:	74 21                	je     c001e924 <__umoddi3+0x108>
c001e903:	89 ca                	mov    edx,ecx
c001e905:	29 f3                	sub    ebx,esi
c001e907:	19 fa                	sbb    edx,edi
c001e909:	89 d0                	mov    eax,edx
c001e90b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e90f:	d3 e0                	shl    eax,cl
c001e911:	89 e9                	mov    ecx,ebp
c001e913:	d3 eb                	shr    ebx,cl
c001e915:	09 d8                	or     eax,ebx
c001e917:	d3 ea                	shr    edx,cl
c001e919:	83 c4 1c             	add    esp,0x1c
c001e91c:	5b                   	pop    ebx
c001e91d:	5e                   	pop    esi
c001e91e:	5f                   	pop    edi
c001e91f:	5d                   	pop    ebp
c001e920:	c3                   	ret    
c001e921:	8d 76 00             	lea    esi,[esi+0x0]
c001e924:	39 c3                	cmp    ebx,eax
c001e926:	73 db                	jae    c001e903 <__umoddi3+0xe7>
c001e928:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e92c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e930:	89 d7                	mov    edi,edx
c001e932:	89 c6                	mov    esi,eax
c001e934:	eb cd                	jmp    c001e903 <__umoddi3+0xe7>
c001e936:	66 90                	xchg   ax,ax
c001e938:	66 90                	xchg   ax,ax
c001e93a:	66 90                	xchg   ax,ax
c001e93c:	66 90                	xchg   ax,ax
c001e93e:	66 90                	xchg   ax,ax

c001e940 <fabs>:
c001e940:	83 ec 0c             	sub    esp,0xc
c001e943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e947:	89 04 24             	mov    DWORD PTR [esp],eax
c001e94a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e94e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001e953:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e957:	dd 04 24             	fld    QWORD PTR [esp]
c001e95a:	83 c4 0c             	add    esp,0xc
c001e95d:	c3                   	ret    
c001e95e:	66 90                	xchg   ax,ax

c001e960 <lrint>:
c001e960:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001e964:	83 ec 04             	sub    esp,0x4
c001e967:	db 1c 24             	fistp  DWORD PTR [esp]
c001e96a:	58                   	pop    eax
c001e96b:	c3                   	ret    

c001e96c <lrintf>:
c001e96c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001e970:	83 ec 04             	sub    esp,0x4
c001e973:	db 1c 24             	fistp  DWORD PTR [esp]
c001e976:	58                   	pop    eax
c001e977:	c3                   	ret    

Disassembly of section .init:

c001e978 <_init>:
c001e978:	55                   	push   ebp
c001e979:	89 e5                	mov    ebp,esp
c001e97b:	e8 98 17 fe ff       	call   c0000118 <frame_dummy>
c001e980:	e8 a3 fa ff ff       	call   c001e428 <__do_global_ctors_aux>
c001e985:	5d                   	pop    ebp
c001e986:	c3                   	ret    

Disassembly of section .fini:

c001e987 <_fini>:
c001e987:	55                   	push   ebp
c001e988:	89 e5                	mov    ebp,esp
c001e98a:	e8 19 17 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001e98f:	5d                   	pop    ebp
c001e990:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e992 <Computer::~Computer()>:
c001e992:	83 ec 0c             	sub    esp,0xc
c001e995:	ba f8 88 03 c0       	mov    edx,0xc00388f8
c001e99a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e99e:	89 10                	mov    DWORD PTR [eax],edx
c001e9a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9a4:	83 ec 0c             	sub    esp,0xc
c001e9a7:	50                   	push   eax
c001e9a8:	e8 b1 4c ff ff       	call   c001365e <Device::~Device()>
c001e9ad:	83 c4 10             	add    esp,0x10
c001e9b0:	90                   	nop
c001e9b1:	83 c4 0c             	add    esp,0xc
c001e9b4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e9b6 <Computer::~Computer()>:
c001e9b6:	83 ec 0c             	sub    esp,0xc
c001e9b9:	83 ec 0c             	sub    esp,0xc
c001e9bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9c0:	e8 cd ff ff ff       	call   c001e992 <Computer::~Computer()>
c001e9c5:	83 c4 10             	add    esp,0x10
c001e9c8:	83 ec 08             	sub    esp,0x8
c001e9cb:	68 ec 01 00 00       	push   0x1ec
c001e9d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9d4:	e8 e8 3a ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c001e9d9:	83 c4 10             	add    esp,0x10
c001e9dc:	83 c4 0c             	add    esp,0xc
c001e9df:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e9e0 <idleCommon()>:
c001e9e0:	83 ec 0c             	sub    esp,0xc
c001e9e3:	e8 bc f9 fe ff       	call   c000e3a4 <lockScheduler()>
c001e9e8:	e8 eb fc fe ff       	call   c000e6d8 <schedule()>
c001e9ed:	83 c4 0c             	add    esp,0xc
c001e9f0:	e9 b1 f9 fe ff       	jmp    c000e3a6 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001e9f5 <CPU::readCR0()>:
c001e9f5:	83 ec 10             	sub    esp,0x10
c001e9f8:	0f 20 c0             	mov    eax,cr0
c001e9fb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e9ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea03:	83 c4 10             	add    esp,0x10
c001ea06:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001ea07 <CPU::readCR2()>:
c001ea07:	83 ec 10             	sub    esp,0x10
c001ea0a:	0f 20 d0             	mov    eax,cr2
c001ea0d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea15:	83 c4 10             	add    esp,0x10
c001ea18:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001ea19 <CPU::readCR3()>:
c001ea19:	83 ec 10             	sub    esp,0x10
c001ea1c:	0f 20 d8             	mov    eax,cr3
c001ea1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea27:	83 c4 10             	add    esp,0x10
c001ea2a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001ea2b <CPU::readCR4()>:
c001ea2b:	83 ec 10             	sub    esp,0x10
c001ea2e:	0f 20 e0             	mov    eax,cr4
c001ea31:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ea35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ea39:	83 c4 10             	add    esp,0x10
c001ea3c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001ea3d <CPU::writeCR3(unsigned long)>:
c001ea3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea41:	0f 22 d8             	mov    cr3,eax
c001ea44:	90                   	nop
c001ea45:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001ea46 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001ea46:	90                   	nop
c001ea47:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ea48 <ThreadControlBlock::ThreadControlBlock()>:
c001ea48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea4c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ea53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea57:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001ea5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea62:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001ea69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea6d:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001ea74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea78:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ea7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ea80:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001ea84:	90                   	nop
c001ea85:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001ea86 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001ea86:	83 ec 0c             	sub    esp,0xc
c001ea89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea8d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ea93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea97:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ea9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaa2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eaa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eab7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eabe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eac9:	83 ec 0c             	sub    esp,0xc
c001eacc:	68 0c 92 03 c0       	push   0xc003920c
c001ead1:	e8 2c e4 fe ff       	call   c000cf02 <kprintf(char const*, ...)>
c001ead6:	83 c4 10             	add    esp,0x10
c001ead9:	90                   	nop
c001eada:	83 c4 0c             	add    esp,0xc
c001eadd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001eade <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001eade:	83 ec 0c             	sub    esp,0xc
c001eae1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001eae6:	75 10                	jne    c001eaf8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001eae8:	83 ec 0c             	sub    esp,0xc
c001eaeb:	68 28 92 03 c0       	push   0xc0039228
c001eaf0:	e8 2b e5 fe ff       	call   c000d020 <panic(char const*)>
c001eaf5:	83 c4 10             	add    esp,0x10
c001eaf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eafc:	8b 00                	mov    eax,DWORD PTR [eax]
c001eafe:	85 c0                	test   eax,eax
c001eb00:	74 34                	je     c001eb36 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001eb02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb09:	85 c0                	test   eax,eax
c001eb0b:	74 29                	je     c001eb36 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001eb0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb11:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb14:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb18:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001eb1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb1f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb23:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb2d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001eb34:	eb 65                	jmp    c001eb9b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001eb36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb3a:	8b 00                	mov    eax,DWORD PTR [eax]
c001eb3c:	85 c0                	test   eax,eax
c001eb3e:	75 4b                	jne    c001eb8b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001eb40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb47:	85 c0                	test   eax,eax
c001eb49:	75 40                	jne    c001eb8b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001eb4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb4f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb53:	89 10                	mov    DWORD PTR [eax],edx
c001eb55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001eb5d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001eb60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001eb67:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001eb6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb72:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eb75:	85 c0                	test   eax,eax
c001eb77:	74 22                	je     c001eb9b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001eb79:	83 ec 0c             	sub    esp,0xc
c001eb7c:	68 4a 92 03 c0       	push   0xc003924a
c001eb81:	e8 9a e4 fe ff       	call   c000d020 <panic(char const*)>
c001eb86:	83 c4 10             	add    esp,0x10
c001eb89:	eb 10                	jmp    c001eb9b <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001eb8b:	83 ec 0c             	sub    esp,0xc
c001eb8e:	68 54 92 03 c0       	push   0xc0039254
c001eb93:	e8 88 e4 fe ff       	call   c000d020 <panic(char const*)>
c001eb98:	83 c4 10             	add    esp,0x10
c001eb9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb9f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eba2:	8d 50 01             	lea    edx,[eax+0x1]
c001eba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eba9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ebac:	90                   	nop
c001ebad:	83 c4 0c             	add    esp,0xc
c001ebb0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001ebb2 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001ebb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebb6:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebb8:	85 c0                	test   eax,eax
c001ebba:	75 0e                	jne    c001ebca <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ebbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ebc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ebc3:	85 c0                	test   eax,eax
c001ebc5:	75 03                	jne    c001ebca <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001ebc7:	b0 01                	mov    al,0x1
c001ebc9:	c3                   	ret    
c001ebca:	b0 00                	mov    al,0x0
c001ebcc:	90                   	nop
c001ebcd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001ebce <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001ebce:	83 ec 0c             	sub    esp,0xc
c001ebd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebd5:	8b 00                	mov    eax,DWORD PTR [eax]
c001ebd7:	85 c0                	test   eax,eax
c001ebd9:	75 15                	jne    c001ebf0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001ebdb:	83 ec 0c             	sub    esp,0xc
c001ebde:	68 60 92 03 c0       	push   0xc0039260
c001ebe3:	e8 38 e4 fe ff       	call   c000d020 <panic(char const*)>
c001ebe8:	83 c4 10             	add    esp,0x10
c001ebeb:	e9 88 00 00 00       	jmp    c001ec78 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001ebf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebf4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ebf7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ebfa:	85 c0                	test   eax,eax
c001ebfc:	0f 95 c0             	setne  al
c001ebff:	84 c0                	test   al,al
c001ec01:	74 10                	je     c001ec13 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001ec03:	83 ec 0c             	sub    esp,0xc
c001ec06:	68 ab 92 03 c0       	push   0xc00392ab
c001ec0b:	e8 10 e4 fe ff       	call   c000d020 <panic(char const*)>
c001ec10:	83 c4 10             	add    esp,0x10
c001ec13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec17:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec19:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ec1c:	85 c0                	test   eax,eax
c001ec1e:	0f 94 c0             	sete   al
c001ec21:	84 c0                	test   al,al
c001ec23:	74 33                	je     c001ec58 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001ec25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec29:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec33:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ec3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec3e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec41:	83 f8 01             	cmp    eax,0x1
c001ec44:	74 21                	je     c001ec67 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001ec46:	83 ec 0c             	sub    esp,0xc
c001ec49:	68 84 92 03 c0       	push   0xc0039284
c001ec4e:	e8 cd e3 fe ff       	call   c000d020 <panic(char const*)>
c001ec53:	83 c4 10             	add    esp,0x10
c001ec56:	eb 0f                	jmp    c001ec67 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001ec58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec5c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec5e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ec61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec65:	89 10                	mov    DWORD PTR [eax],edx
c001ec67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec6b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ec6e:	8d 50 ff             	lea    edx,[eax-0x1]
c001ec71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec75:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ec78:	83 c4 0c             	add    esp,0xc
c001ec7b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001ec7c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001ec7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec80:	8b 00                	mov    eax,DWORD PTR [eax]
c001ec82:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001ec84 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001ec84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec88:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ec8b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001ec8c <LinkedList<UnixFile>::~LinkedList()>:
c001ec8c:	90                   	nop
c001ec8d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001ec8e <LinkedList<UnixFile>::LinkedList()>:
c001ec8e:	83 ec 0c             	sub    esp,0xc
c001ec91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec95:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ec9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec9f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecaa:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ecb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ecbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecbf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ecc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecca:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ecd1:	83 ec 0c             	sub    esp,0xc
c001ecd4:	68 0c 92 03 c0       	push   0xc003920c
c001ecd9:	e8 24 e2 fe ff       	call   c000cf02 <kprintf(char const*, ...)>
c001ecde:	83 c4 10             	add    esp,0x10
c001ece1:	90                   	nop
c001ece2:	83 c4 0c             	add    esp,0xc
c001ece5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001ece6 <LinkedList<UnixFile>::getFirstElement()>:
c001ece6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ecea:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecec:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001ecee <LinkedList<UnixFile>::removeFirst()>:
c001ecee:	83 ec 0c             	sub    esp,0xc
c001ecf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf5:	8b 00                	mov    eax,DWORD PTR [eax]
c001ecf7:	85 c0                	test   eax,eax
c001ecf9:	75 12                	jne    c001ed0d <LinkedList<UnixFile>::removeFirst()+0x1f>
c001ecfb:	83 ec 0c             	sub    esp,0xc
c001ecfe:	68 60 92 03 c0       	push   0xc0039260
c001ed03:	e8 18 e3 fe ff       	call   c000d020 <panic(char const*)>
c001ed08:	83 c4 10             	add    esp,0x10
c001ed0b:	eb 7e                	jmp    c001ed8b <LinkedList<UnixFile>::removeFirst()+0x9d>
c001ed0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed11:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ed14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed17:	85 c0                	test   eax,eax
c001ed19:	74 10                	je     c001ed2b <LinkedList<UnixFile>::removeFirst()+0x3d>
c001ed1b:	83 ec 0c             	sub    esp,0xc
c001ed1e:	68 ab 92 03 c0       	push   0xc00392ab
c001ed23:	e8 f8 e2 fe ff       	call   c000d020 <panic(char const*)>
c001ed28:	83 c4 10             	add    esp,0x10
c001ed2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed2f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed31:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed34:	85 c0                	test   eax,eax
c001ed36:	75 33                	jne    c001ed6b <LinkedList<UnixFile>::removeFirst()+0x7d>
c001ed38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed3c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ed42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed46:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001ed4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed51:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed54:	83 f8 01             	cmp    eax,0x1
c001ed57:	74 21                	je     c001ed7a <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ed59:	83 ec 0c             	sub    esp,0xc
c001ed5c:	68 84 92 03 c0       	push   0xc0039284
c001ed61:	e8 ba e2 fe ff       	call   c000d020 <panic(char const*)>
c001ed66:	83 c4 10             	add    esp,0x10
c001ed69:	eb 0f                	jmp    c001ed7a <LinkedList<UnixFile>::removeFirst()+0x8c>
c001ed6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed6f:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed71:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001ed74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed78:	89 10                	mov    DWORD PTR [eax],edx
c001ed7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed7e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed81:	8d 50 ff             	lea    edx,[eax-0x1]
c001ed84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed88:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ed8b:	83 c4 0c             	add    esp,0xc
c001ed8e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001ed90 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001ed90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed94:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ed97:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001ed98 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001ed98:	83 ec 1c             	sub    esp,0x1c
c001ed9b:	83 ec 0c             	sub    esp,0xc
c001ed9e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001eda2:	e8 3f ff ff ff       	call   c001ece6 <LinkedList<UnixFile>::getFirstElement()>
c001eda7:	83 c4 10             	add    esp,0x10
c001edaa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001edae:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001edb3:	74 43                	je     c001edf8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x60>
c001edb5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001edb9:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c001edbd:	75 20                	jne    c001eddf <LinkedList<UnixFile>::addElement(UnixFile*)+0x47>
c001edbf:	83 ec 0c             	sub    esp,0xc
c001edc2:	68 50 94 03 c0       	push   0xc0039450
c001edc7:	e8 36 e1 fe ff       	call   c000cf02 <kprintf(char const*, ...)>
c001edcc:	83 c4 10             	add    esp,0x10
c001edcf:	83 ec 0c             	sub    esp,0xc
c001edd2:	68 67 94 03 c0       	push   0xc0039467
c001edd7:	e8 44 e2 fe ff       	call   c000d020 <panic(char const*)>
c001eddc:	83 c4 10             	add    esp,0x10
c001eddf:	83 ec 08             	sub    esp,0x8
c001ede2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001ede6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001edea:	e8 a1 ff ff ff       	call   c001ed90 <LinkedList<UnixFile>::getNext(UnixFile*)>
c001edef:	83 c4 10             	add    esp,0x10
c001edf2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001edf6:	eb b6                	jmp    c001edae <LinkedList<UnixFile>::addElement(UnixFile*)+0x16>
c001edf8:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001edfd:	75 10                	jne    c001ee0f <LinkedList<UnixFile>::addElement(UnixFile*)+0x77>
c001edff:	83 ec 0c             	sub    esp,0xc
c001ee02:	68 28 92 03 c0       	push   0xc0039228
c001ee07:	e8 14 e2 fe ff       	call   c000d020 <panic(char const*)>
c001ee0c:	83 c4 10             	add    esp,0x10
c001ee0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee13:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee15:	85 c0                	test   eax,eax
c001ee17:	74 34                	je     c001ee4d <LinkedList<UnixFile>::addElement(UnixFile*)+0xb5>
c001ee19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee1d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee20:	85 c0                	test   eax,eax
c001ee22:	74 29                	je     c001ee4d <LinkedList<UnixFile>::addElement(UnixFile*)+0xb5>
c001ee24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee2b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ee2f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ee32:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee36:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ee3a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ee3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee44:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ee4b:	eb 65                	jmp    c001eeb2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001ee4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee51:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee53:	85 c0                	test   eax,eax
c001ee55:	75 4b                	jne    c001eea2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x10a>
c001ee57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee5e:	85 c0                	test   eax,eax
c001ee60:	75 40                	jne    c001eea2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x10a>
c001ee62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee66:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ee6a:	89 10                	mov    DWORD PTR [eax],edx
c001ee6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee70:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001ee74:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ee77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ee7e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001ee85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ee89:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ee8c:	85 c0                	test   eax,eax
c001ee8e:	74 22                	je     c001eeb2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001ee90:	83 ec 0c             	sub    esp,0xc
c001ee93:	68 4a 92 03 c0       	push   0xc003924a
c001ee98:	e8 83 e1 fe ff       	call   c000d020 <panic(char const*)>
c001ee9d:	83 c4 10             	add    esp,0x10
c001eea0:	eb 10                	jmp    c001eeb2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001eea2:	83 ec 0c             	sub    esp,0xc
c001eea5:	68 54 92 03 c0       	push   0xc0039254
c001eeaa:	e8 71 e1 fe ff       	call   c000d020 <panic(char const*)>
c001eeaf:	83 c4 10             	add    esp,0x10
c001eeb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eeb6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001eeb9:	8d 50 01             	lea    edx,[eax+0x1]
c001eebc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001eec0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001eec3:	90                   	nop
c001eec4:	83 c4 1c             	add    esp,0x1c
c001eec7:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001eec8 <DriverlessDevice::~DriverlessDevice()>:
c001eec8:	ba 04 9a 03 c0       	mov    edx,0xc0039a04
c001eecd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eed1:	89 10                	mov    DWORD PTR [eax],edx
c001eed3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eed7:	50                   	push   eax
c001eed8:	e8 81 47 ff ff       	call   c001365e <Device::~Device()>
c001eedd:	83 c4 04             	add    esp,0x4
c001eee0:	90                   	nop
c001eee1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001eee2 <DriverlessDevice::~DriverlessDevice()>:
c001eee2:	83 ec 0c             	sub    esp,0xc
c001eee5:	83 ec 0c             	sub    esp,0xc
c001eee8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeec:	e8 d7 ff ff ff       	call   c001eec8 <DriverlessDevice::~DriverlessDevice()>
c001eef1:	83 c4 10             	add    esp,0x10
c001eef4:	83 ec 08             	sub    esp,0x8
c001eef7:	68 58 01 00 00       	push   0x158
c001eefc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef00:	e8 bc 35 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c001ef05:	83 c4 10             	add    esp,0x10
c001ef08:	83 c4 0c             	add    esp,0xc
c001ef0b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001ef0c <LinkedList<Device>::addElement(Device*)>:
c001ef0c:	83 ec 0c             	sub    esp,0xc
c001ef0f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ef14:	75 10                	jne    c001ef26 <LinkedList<Device>::addElement(Device*)+0x1a>
c001ef16:	83 ec 0c             	sub    esp,0xc
c001ef19:	68 28 92 03 c0       	push   0xc0039228
c001ef1e:	e8 fd e0 fe ff       	call   c000d020 <panic(char const*)>
c001ef23:	83 c4 10             	add    esp,0x10
c001ef26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef2a:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef2c:	85 c0                	test   eax,eax
c001ef2e:	74 3a                	je     c001ef6a <LinkedList<Device>::addElement(Device*)+0x5e>
c001ef30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef37:	85 c0                	test   eax,eax
c001ef39:	74 2f                	je     c001ef6a <LinkedList<Device>::addElement(Device*)+0x5e>
c001ef3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef3f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef42:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef46:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001ef4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef50:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef54:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ef57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef5e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001ef68:	eb 68                	jmp    c001efd2 <LinkedList<Device>::addElement(Device*)+0xc6>
c001ef6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef6e:	8b 00                	mov    eax,DWORD PTR [eax]
c001ef70:	85 c0                	test   eax,eax
c001ef72:	75 4e                	jne    c001efc2 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ef74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef7b:	85 c0                	test   eax,eax
c001ef7d:	75 43                	jne    c001efc2 <LinkedList<Device>::addElement(Device*)+0xb6>
c001ef7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef87:	89 10                	mov    DWORD PTR [eax],edx
c001ef89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef8d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ef91:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ef94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ef9b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001efa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efa9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001efac:	85 c0                	test   eax,eax
c001efae:	74 22                	je     c001efd2 <LinkedList<Device>::addElement(Device*)+0xc6>
c001efb0:	83 ec 0c             	sub    esp,0xc
c001efb3:	68 4a 92 03 c0       	push   0xc003924a
c001efb8:	e8 63 e0 fe ff       	call   c000d020 <panic(char const*)>
c001efbd:	83 c4 10             	add    esp,0x10
c001efc0:	eb 10                	jmp    c001efd2 <LinkedList<Device>::addElement(Device*)+0xc6>
c001efc2:	83 ec 0c             	sub    esp,0xc
c001efc5:	68 54 92 03 c0       	push   0xc0039254
c001efca:	e8 51 e0 fe ff       	call   c000d020 <panic(char const*)>
c001efcf:	83 c4 10             	add    esp,0x10
c001efd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efd6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001efd9:	8d 50 01             	lea    edx,[eax+0x1]
c001efdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efe0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001efe3:	90                   	nop
c001efe4:	83 c4 0c             	add    esp,0xc
c001efe7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001efe8 <LinkedList<Device>::LinkedList()>:
c001efe8:	83 ec 0c             	sub    esp,0xc
c001efeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efef:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eff5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eff9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f000:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f004:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f00b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f00f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f015:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f019:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f024:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f02b:	83 ec 0c             	sub    esp,0xc
c001f02e:	68 0c 92 03 c0       	push   0xc003920c
c001f033:	e8 ca de fe ff       	call   c000cf02 <kprintf(char const*, ...)>
c001f038:	83 c4 10             	add    esp,0x10
c001f03b:	90                   	nop
c001f03c:	83 c4 0c             	add    esp,0xc
c001f03f:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001f040 <CPU::readDR0()>:
c001f040:	83 ec 10             	sub    esp,0x10
c001f043:	0f 21 c0             	mov    eax,db0
c001f046:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f04a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f04e:	83 c4 10             	add    esp,0x10
c001f051:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001f052 <CPU::readDR1()>:
c001f052:	83 ec 10             	sub    esp,0x10
c001f055:	0f 21 c8             	mov    eax,db1
c001f058:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f05c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f060:	83 c4 10             	add    esp,0x10
c001f063:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001f064 <CPU::readDR2()>:
c001f064:	83 ec 10             	sub    esp,0x10
c001f067:	0f 21 d0             	mov    eax,db2
c001f06a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f06e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f072:	83 c4 10             	add    esp,0x10
c001f075:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001f076 <CPU::readDR3()>:
c001f076:	83 ec 10             	sub    esp,0x10
c001f079:	0f 21 d8             	mov    eax,db3
c001f07c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f080:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f084:	83 c4 10             	add    esp,0x10
c001f087:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001f088 <CPU::readDR6()>:
c001f088:	83 ec 10             	sub    esp,0x10
c001f08b:	0f 21 f0             	mov    eax,db6
c001f08e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f092:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f096:	83 c4 10             	add    esp,0x10
c001f099:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001f09a <CPU::readDR7()>:
c001f09a:	83 ec 10             	sub    esp,0x10
c001f09d:	0f 21 f8             	mov    eax,db7
c001f0a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f0a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f0a8:	83 c4 10             	add    esp,0x10
c001f0ab:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f0ac <ACPI::~ACPI()>:
c001f0ac:	83 ec 0c             	sub    esp,0xc
c001f0af:	ba e4 a0 03 c0       	mov    edx,0xc003a0e4
c001f0b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0b8:	89 10                	mov    DWORD PTR [eax],edx
c001f0ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0be:	83 ec 0c             	sub    esp,0xc
c001f0c1:	50                   	push   eax
c001f0c2:	e8 97 45 ff ff       	call   c001365e <Device::~Device()>
c001f0c7:	83 c4 10             	add    esp,0x10
c001f0ca:	90                   	nop
c001f0cb:	83 c4 0c             	add    esp,0xc
c001f0ce:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f0d0 <ACPI::~ACPI()>:
c001f0d0:	83 ec 0c             	sub    esp,0xc
c001f0d3:	83 ec 0c             	sub    esp,0xc
c001f0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0da:	e8 cd ff ff ff       	call   c001f0ac <ACPI::~ACPI()>
c001f0df:	83 c4 10             	add    esp,0x10
c001f0e2:	83 ec 08             	sub    esp,0x8
c001f0e5:	68 68 22 00 00       	push   0x2268
c001f0ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f0ee:	e8 ce 33 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c001f0f3:	83 c4 10             	add    esp,0x10
c001f0f6:	83 c4 0c             	add    esp,0xc
c001f0f9:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f0fa <CPU::~CPU()>:
c001f0fa:	83 ec 0c             	sub    esp,0xc
c001f0fd:	ba 34 a3 03 c0       	mov    edx,0xc003a334
c001f102:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f106:	89 10                	mov    DWORD PTR [eax],edx
c001f108:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f10c:	83 ec 0c             	sub    esp,0xc
c001f10f:	50                   	push   eax
c001f110:	e8 49 45 ff ff       	call   c001365e <Device::~Device()>
c001f115:	83 c4 10             	add    esp,0x10
c001f118:	90                   	nop
c001f119:	83 c4 0c             	add    esp,0xc
c001f11c:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001f11e <CPU::~CPU()>:
c001f11e:	83 ec 0c             	sub    esp,0xc
c001f121:	83 ec 0c             	sub    esp,0xc
c001f124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f128:	e8 cd ff ff ff       	call   c001f0fa <CPU::~CPU()>
c001f12d:	83 c4 10             	add    esp,0x10
c001f130:	83 ec 08             	sub    esp,0x8
c001f133:	68 98 11 00 00       	push   0x1198
c001f138:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f13c:	e8 80 33 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c001f141:	83 c4 10             	add    esp,0x10
c001f144:	83 c4 0c             	add    esp,0xc
c001f147:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001f148 <CPU::writeDR7(unsigned long)>:
c001f148:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f14c:	0f 23 f8             	mov    db7,eax
c001f14f:	90                   	nop
c001f150:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001f151 <CPU::writeCR4(unsigned long)>:
c001f151:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f155:	0f 22 e0             	mov    cr4,eax
c001f158:	90                   	nop
c001f159:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001f15a <PCI::~PCI()>:
c001f15a:	83 ec 0c             	sub    esp,0xc
c001f15d:	ba d0 a6 03 c0       	mov    edx,0xc003a6d0
c001f162:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f166:	89 10                	mov    DWORD PTR [eax],edx
c001f168:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f16c:	83 ec 0c             	sub    esp,0xc
c001f16f:	50                   	push   eax
c001f170:	e8 f9 3e ff ff       	call   c001306e <Bus::~Bus()>
c001f175:	83 c4 10             	add    esp,0x10
c001f178:	90                   	nop
c001f179:	83 c4 0c             	add    esp,0xc
c001f17c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f17e <PCI::~PCI()>:
c001f17e:	83 ec 0c             	sub    esp,0xc
c001f181:	83 ec 0c             	sub    esp,0xc
c001f184:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f188:	e8 cd ff ff ff       	call   c001f15a <PCI::~PCI()>
c001f18d:	83 c4 10             	add    esp,0x10
c001f190:	83 ec 08             	sub    esp,0x8
c001f193:	68 58 01 00 00       	push   0x158
c001f198:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f19c:	e8 20 33 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c001f1a1:	83 c4 10             	add    esp,0x10
c001f1a4:	83 c4 0c             	add    esp,0xc
c001f1a7:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f1a8 <IDE::~IDE()>:
c001f1a8:	83 ec 0c             	sub    esp,0xc
c001f1ab:	ba 9c a9 03 c0       	mov    edx,0xc003a99c
c001f1b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1b4:	89 10                	mov    DWORD PTR [eax],edx
c001f1b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1ba:	83 ec 0c             	sub    esp,0xc
c001f1bd:	50                   	push   eax
c001f1be:	e8 b1 49 ff ff       	call   c0013b74 <HardDiskController::~HardDiskController()>
c001f1c3:	83 c4 10             	add    esp,0x10
c001f1c6:	90                   	nop
c001f1c7:	83 c4 0c             	add    esp,0xc
c001f1ca:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f1cc <IDE::~IDE()>:
c001f1cc:	83 ec 0c             	sub    esp,0xc
c001f1cf:	83 ec 0c             	sub    esp,0xc
c001f1d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1d6:	e8 cd ff ff ff       	call   c001f1a8 <IDE::~IDE()>
c001f1db:	83 c4 10             	add    esp,0x10
c001f1de:	83 ec 08             	sub    esp,0x8
c001f1e1:	68 70 02 00 00       	push   0x270
c001f1e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f1ea:	e8 d2 32 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c001f1ef:	83 c4 10             	add    esp,0x10
c001f1f2:	83 c4 0c             	add    esp,0xc
c001f1f5:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f1f6 <ATA::~ATA()>:
c001f1f6:	83 ec 0c             	sub    esp,0xc
c001f1f9:	ba ec a9 03 c0       	mov    edx,0xc003a9ec
c001f1fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f202:	89 10                	mov    DWORD PTR [eax],edx
c001f204:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f208:	83 ec 0c             	sub    esp,0xc
c001f20b:	50                   	push   eax
c001f20c:	e8 41 4a ff ff       	call   c0013c52 <PhysicalDisk::~PhysicalDisk()>
c001f211:	83 c4 10             	add    esp,0x10
c001f214:	90                   	nop
c001f215:	83 c4 0c             	add    esp,0xc
c001f218:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f21a <ATA::~ATA()>:
c001f21a:	83 ec 0c             	sub    esp,0xc
c001f21d:	83 ec 0c             	sub    esp,0xc
c001f220:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f224:	e8 cd ff ff ff       	call   c001f1f6 <ATA::~ATA()>
c001f229:	83 c4 10             	add    esp,0x10
c001f22c:	83 ec 08             	sub    esp,0x8
c001f22f:	68 7c 01 00 00       	push   0x17c
c001f234:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f238:	e8 84 32 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c001f23d:	83 c4 10             	add    esp,0x10
c001f240:	83 c4 0c             	add    esp,0xc
c001f243:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f244 <ATAPI::~ATAPI()>:
c001f244:	83 ec 0c             	sub    esp,0xc
c001f247:	ba 58 aa 03 c0       	mov    edx,0xc003aa58
c001f24c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f250:	89 10                	mov    DWORD PTR [eax],edx
c001f252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f256:	83 ec 0c             	sub    esp,0xc
c001f259:	50                   	push   eax
c001f25a:	e8 f3 49 ff ff       	call   c0013c52 <PhysicalDisk::~PhysicalDisk()>
c001f25f:	83 c4 10             	add    esp,0x10
c001f262:	90                   	nop
c001f263:	83 c4 0c             	add    esp,0xc
c001f266:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f268 <ATAPI::~ATAPI()>:
c001f268:	83 ec 0c             	sub    esp,0xc
c001f26b:	83 ec 0c             	sub    esp,0xc
c001f26e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f272:	e8 cd ff ff ff       	call   c001f244 <ATAPI::~ATAPI()>
c001f277:	83 c4 10             	add    esp,0x10
c001f27a:	83 ec 08             	sub    esp,0x8
c001f27d:	68 80 01 00 00       	push   0x180
c001f282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f286:	e8 36 32 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c001f28b:	83 c4 10             	add    esp,0x10
c001f28e:	83 c4 0c             	add    esp,0xc
c001f291:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001f292 <AVX::~AVX()>:
c001f292:	83 ec 0c             	sub    esp,0xc
c001f295:	ba 94 aa 03 c0       	mov    edx,0xc003aa94
c001f29a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f29e:	89 10                	mov    DWORD PTR [eax],edx
c001f2a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2a4:	83 ec 0c             	sub    esp,0xc
c001f2a7:	50                   	push   eax
c001f2a8:	e8 29 4a ff ff       	call   c0013cd6 <FPU::~FPU()>
c001f2ad:	83 c4 10             	add    esp,0x10
c001f2b0:	90                   	nop
c001f2b1:	83 c4 0c             	add    esp,0xc
c001f2b4:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001f2b6 <AVX::~AVX()>:
c001f2b6:	83 ec 0c             	sub    esp,0xc
c001f2b9:	83 ec 0c             	sub    esp,0xc
c001f2bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2c0:	e8 cd ff ff ff       	call   c001f292 <AVX::~AVX()>
c001f2c5:	83 c4 10             	add    esp,0x10
c001f2c8:	83 ec 08             	sub    esp,0x8
c001f2cb:	68 58 01 00 00       	push   0x158
c001f2d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2d4:	e8 e8 31 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c001f2d9:	83 c4 10             	add    esp,0x10
c001f2dc:	83 c4 0c             	add    esp,0xc
c001f2df:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001f2e0 <MMX::~MMX()>:
c001f2e0:	83 ec 0c             	sub    esp,0xc
c001f2e3:	ba d4 aa 03 c0       	mov    edx,0xc003aad4
c001f2e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2ec:	89 10                	mov    DWORD PTR [eax],edx
c001f2ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2f2:	83 ec 0c             	sub    esp,0xc
c001f2f5:	50                   	push   eax
c001f2f6:	e8 db 49 ff ff       	call   c0013cd6 <FPU::~FPU()>
c001f2fb:	83 c4 10             	add    esp,0x10
c001f2fe:	90                   	nop
c001f2ff:	83 c4 0c             	add    esp,0xc
c001f302:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001f304 <MMX::~MMX()>:
c001f304:	83 ec 0c             	sub    esp,0xc
c001f307:	83 ec 0c             	sub    esp,0xc
c001f30a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f30e:	e8 cd ff ff ff       	call   c001f2e0 <MMX::~MMX()>
c001f313:	83 c4 10             	add    esp,0x10
c001f316:	83 ec 08             	sub    esp,0x8
c001f319:	68 58 01 00 00       	push   0x158
c001f31e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f322:	e8 9a 31 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c001f327:	83 c4 10             	add    esp,0x10
c001f32a:	83 c4 0c             	add    esp,0xc
c001f32d:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001f32e <SSE::~SSE()>:
c001f32e:	83 ec 0c             	sub    esp,0xc
c001f331:	ba 14 ab 03 c0       	mov    edx,0xc003ab14
c001f336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f33a:	89 10                	mov    DWORD PTR [eax],edx
c001f33c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f340:	83 ec 0c             	sub    esp,0xc
c001f343:	50                   	push   eax
c001f344:	e8 8d 49 ff ff       	call   c0013cd6 <FPU::~FPU()>
c001f349:	83 c4 10             	add    esp,0x10
c001f34c:	90                   	nop
c001f34d:	83 c4 0c             	add    esp,0xc
c001f350:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001f352 <SSE::~SSE()>:
c001f352:	83 ec 0c             	sub    esp,0xc
c001f355:	83 ec 0c             	sub    esp,0xc
c001f358:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f35c:	e8 cd ff ff ff       	call   c001f32e <SSE::~SSE()>
c001f361:	83 c4 10             	add    esp,0x10
c001f364:	83 ec 08             	sub    esp,0x8
c001f367:	68 58 01 00 00       	push   0x158
c001f36c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f370:	e8 4c 31 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c001f375:	83 c4 10             	add    esp,0x10
c001f378:	83 c4 0c             	add    esp,0xc
c001f37b:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001f37c <x87::~x87()>:
c001f37c:	83 ec 0c             	sub    esp,0xc
c001f37f:	ba 54 ab 03 c0       	mov    edx,0xc003ab54
c001f384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f388:	89 10                	mov    DWORD PTR [eax],edx
c001f38a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f38e:	83 ec 0c             	sub    esp,0xc
c001f391:	50                   	push   eax
c001f392:	e8 3f 49 ff ff       	call   c0013cd6 <FPU::~FPU()>
c001f397:	83 c4 10             	add    esp,0x10
c001f39a:	90                   	nop
c001f39b:	83 c4 0c             	add    esp,0xc
c001f39e:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001f3a0 <x87::~x87()>:
c001f3a0:	83 ec 0c             	sub    esp,0xc
c001f3a3:	83 ec 0c             	sub    esp,0xc
c001f3a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3aa:	e8 cd ff ff ff       	call   c001f37c <x87::~x87()>
c001f3af:	83 c4 10             	add    esp,0x10
c001f3b2:	83 ec 08             	sub    esp,0x8
c001f3b5:	68 58 01 00 00       	push   0x158
c001f3ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3be:	e8 fe 30 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c001f3c3:	83 c4 10             	add    esp,0x10
c001f3c6:	83 c4 0c             	add    esp,0xc
c001f3c9:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001f3ca <IOAPIC::~IOAPIC()>:
c001f3ca:	83 ec 0c             	sub    esp,0xc
c001f3cd:	ba ac ac 03 c0       	mov    edx,0xc003acac
c001f3d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3d6:	89 10                	mov    DWORD PTR [eax],edx
c001f3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3dc:	83 ec 0c             	sub    esp,0xc
c001f3df:	50                   	push   eax
c001f3e0:	e8 79 42 ff ff       	call   c001365e <Device::~Device()>
c001f3e5:	83 c4 10             	add    esp,0x10
c001f3e8:	90                   	nop
c001f3e9:	83 c4 0c             	add    esp,0xc
c001f3ec:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001f3ee <IOAPIC::~IOAPIC()>:
c001f3ee:	83 ec 0c             	sub    esp,0xc
c001f3f1:	83 ec 0c             	sub    esp,0xc
c001f3f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3f8:	e8 cd ff ff ff       	call   c001f3ca <IOAPIC::~IOAPIC()>
c001f3fd:	83 c4 10             	add    esp,0x10
c001f400:	83 ec 08             	sub    esp,0x8
c001f403:	68 68 01 00 00       	push   0x168
c001f408:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f40c:	e8 b0 30 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c001f411:	83 c4 10             	add    esp,0x10
c001f414:	83 c4 0c             	add    esp,0xc
c001f417:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001f418 <APIC::~APIC()>:
c001f418:	83 ec 0c             	sub    esp,0xc
c001f41b:	ba 64 ac 03 c0       	mov    edx,0xc003ac64
c001f420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f424:	89 10                	mov    DWORD PTR [eax],edx
c001f426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f42a:	83 ec 0c             	sub    esp,0xc
c001f42d:	50                   	push   eax
c001f42e:	e8 47 4d ff ff       	call   c001417a <InterruptController::~InterruptController()>
c001f433:	83 c4 10             	add    esp,0x10
c001f436:	90                   	nop
c001f437:	83 c4 0c             	add    esp,0xc
c001f43a:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001f43c <APIC::~APIC()>:
c001f43c:	83 ec 0c             	sub    esp,0xc
c001f43f:	83 ec 0c             	sub    esp,0xc
c001f442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f446:	e8 cd ff ff ff       	call   c001f418 <APIC::~APIC()>
c001f44b:	83 c4 10             	add    esp,0x10
c001f44e:	83 ec 08             	sub    esp,0x8
c001f451:	68 58 21 00 00       	push   0x2158
c001f456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f45a:	e8 62 30 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c001f45f:	83 c4 10             	add    esp,0x10
c001f462:	83 c4 0c             	add    esp,0xc
c001f465:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001f466 <PIC::~PIC()>:
c001f466:	83 ec 0c             	sub    esp,0xc
c001f469:	ba fc ac 03 c0       	mov    edx,0xc003acfc
c001f46e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f472:	89 10                	mov    DWORD PTR [eax],edx
c001f474:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f478:	83 ec 0c             	sub    esp,0xc
c001f47b:	50                   	push   eax
c001f47c:	e8 f9 4c ff ff       	call   c001417a <InterruptController::~InterruptController()>
c001f481:	83 c4 10             	add    esp,0x10
c001f484:	90                   	nop
c001f485:	83 c4 0c             	add    esp,0xc
c001f488:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001f48a <PIC::~PIC()>:
c001f48a:	83 ec 0c             	sub    esp,0xc
c001f48d:	83 ec 0c             	sub    esp,0xc
c001f490:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f494:	e8 cd ff ff ff       	call   c001f466 <PIC::~PIC()>
c001f499:	83 c4 10             	add    esp,0x10
c001f49c:	83 ec 08             	sub    esp,0x8
c001f49f:	68 58 21 00 00       	push   0x2158
c001f4a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4a8:	e8 14 30 ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c001f4ad:	83 c4 10             	add    esp,0x10
c001f4b0:	83 c4 0c             	add    esp,0xc
c001f4b3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001f4b4 <APICTimer::~APICTimer()>:
c001f4b4:	83 ec 0c             	sub    esp,0xc
c001f4b7:	ba 50 ad 03 c0       	mov    edx,0xc003ad50
c001f4bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4c0:	89 10                	mov    DWORD PTR [eax],edx
c001f4c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4c6:	83 ec 0c             	sub    esp,0xc
c001f4c9:	50                   	push   eax
c001f4ca:	e8 7b 62 ff ff       	call   c001574a <Timer::~Timer()>
c001f4cf:	83 c4 10             	add    esp,0x10
c001f4d2:	90                   	nop
c001f4d3:	83 c4 0c             	add    esp,0xc
c001f4d6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001f4d8 <APICTimer::~APICTimer()>:
c001f4d8:	83 ec 0c             	sub    esp,0xc
c001f4db:	83 ec 0c             	sub    esp,0xc
c001f4de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4e2:	e8 cd ff ff ff       	call   c001f4b4 <APICTimer::~APICTimer()>
c001f4e7:	83 c4 10             	add    esp,0x10
c001f4ea:	83 ec 08             	sub    esp,0x8
c001f4ed:	68 60 01 00 00       	push   0x160
c001f4f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f4f6:	e8 c6 2f ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c001f4fb:	83 c4 10             	add    esp,0x10
c001f4fe:	83 c4 0c             	add    esp,0xc
c001f501:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001f502 <PIT::~PIT()>:
c001f502:	83 ec 0c             	sub    esp,0xc
c001f505:	ba a0 ad 03 c0       	mov    edx,0xc003ada0
c001f50a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f50e:	89 10                	mov    DWORD PTR [eax],edx
c001f510:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f514:	83 ec 0c             	sub    esp,0xc
c001f517:	50                   	push   eax
c001f518:	e8 2d 62 ff ff       	call   c001574a <Timer::~Timer()>
c001f51d:	83 c4 10             	add    esp,0x10
c001f520:	90                   	nop
c001f521:	83 c4 0c             	add    esp,0xc
c001f524:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001f526 <PIT::~PIT()>:
c001f526:	83 ec 0c             	sub    esp,0xc
c001f529:	83 ec 0c             	sub    esp,0xc
c001f52c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f530:	e8 cd ff ff ff       	call   c001f502 <PIT::~PIT()>
c001f535:	83 c4 10             	add    esp,0x10
c001f538:	83 ec 08             	sub    esp,0x8
c001f53b:	68 5c 01 00 00       	push   0x15c
c001f540:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f544:	e8 78 2f ff ff       	call   c00124c1 <operator delete(void*, unsigned long)>
c001f549:	83 c4 10             	add    esp,0x10
c001f54c:	83 c4 0c             	add    esp,0xc
c001f54f:	c3                   	ret    
