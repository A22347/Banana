
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 12 c2 00 00       	call   c000c232 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 e3 f0 01 00       	call   c001f108 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 92 fc 01 c0       	mov    ebx,0xc001fc92
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 9c fc 01 c0    	cmp    ebx,0xc001fc9c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 4c 3b 02 c0       	mov    eax,0xc0023b4c
c0000049:	3d 4c 3b 02 c0       	cmp    eax,0xc0023b4c
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 4c 3b 02 c0       	push   0xc0023b4c
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 4c 3b 02 c0       	mov    eax,0xc0023b4c
c0000075:	2d 4c 3b 02 c0       	sub    eax,0xc0023b4c
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 4c 3b 02 c0       	push   0xc0023b4c
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d ec 3c 02 c0 00 	cmp    BYTE PTR ds:0xc0023cec,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb a4 fc 01 c0       	mov    ebx,0xc001fca4
c00000bb:	81 eb a0 fc 01 c0    	sub    ebx,0xc001fca0
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be a0 fc 01 c0       	mov    esi,0xc001fca0
c00000ca:	a1 f0 3c 02 c0       	mov    eax,ds:0xc0023cf0
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 f0 3c 02 c0       	mov    ds:0xc0023cf0,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 f0 3c 02 c0       	mov    eax,ds:0xc0023cf0
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 4c 3b 02 c0       	push   0xc0023b4c
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 ec 3c 02 c0 01 	mov    BYTE PTR ds:0xc0023cec,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 f4 3c 02 c0       	push   0xc0023cf4
c000012c:	68 4c 3b 02 c0       	push   0xc0023b4c
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <doTPAUSE>:
c0000150:	fb                   	sti    
c0000151:	31 c0                	xor    eax,eax
c0000153:	31 d2                	xor    edx,edx
c0000155:	66 0f ae f0          	tpause eax
c0000159:	c3                   	ret    

c000015a <hasLegacyFPU>:
c000015a:	0f 20 c2             	mov    edx,cr0
c000015d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000163:	0f 22 c2             	mov    cr0,edx
c0000166:	db e3                	fninit 
c0000168:	dd 3d 7d 01 00 c0    	fnstsw WORD PTR ds:0xc000017d
c000016e:	31 c0                	xor    eax,eax
c0000170:	66 81 3d 7d 01 00 c0 00 00 	cmp    WORD PTR ds:0xc000017d,0x0
c0000179:	75 01                	jne    c000017c <hasLegacyFPU.nofpu>

c000017b <hasLegacyFPU.hasfpu>:
c000017b:	40                   	inc    eax

c000017c <hasLegacyFPU.nofpu>:
c000017c:	c3                   	ret    

c000017d <testword>:
c000017d:	aa                   	stos   BYTE PTR es:[edi],al
c000017e:	55                   	push   ebp

c000017f <is486>:
c000017f:	0f 09                	wbinvd 
c0000181:	31 c0                	xor    eax,eax
c0000183:	40                   	inc    eax
c0000184:	c3                   	ret    
c0000185:	90                   	nop
c0000186:	90                   	nop
c0000187:	90                   	nop
c0000188:	90                   	nop
c0000189:	90                   	nop
c000018a:	90                   	nop
c000018b:	90                   	nop
c000018c:	90                   	nop
c000018d:	90                   	nop
c000018e:	90                   	nop
c000018f:	90                   	nop
c0000190:	90                   	nop
c0000191:	90                   	nop
c0000192:	90                   	nop
c0000193:	90                   	nop
c0000194:	90                   	nop
c0000195:	90                   	nop
c0000196:	90                   	nop
c0000197:	90                   	nop
c0000198:	90                   	nop
c0000199:	90                   	nop
c000019a:	90                   	nop
c000019b:	90                   	nop
c000019c:	90                   	nop
c000019d:	90                   	nop
c000019e:	90                   	nop
c000019f:	90                   	nop
c00001a0:	90                   	nop
c00001a1:	90                   	nop
c00001a2:	90                   	nop
c00001a3:	90                   	nop
c00001a4:	90                   	nop
c00001a5:	90                   	nop
c00001a6:	90                   	nop
c00001a7:	90                   	nop
c00001a8:	90                   	nop
c00001a9:	90                   	nop
c00001aa:	90                   	nop
c00001ab:	90                   	nop
c00001ac:	90                   	nop
c00001ad:	90                   	nop
c00001ae:	90                   	nop
c00001af:	90                   	nop
c00001b0:	90                   	nop
c00001b1:	90                   	nop
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	c3                   	ret    

c00001b5 <goToVM86>:
c00001b5:	fa                   	cli    
c00001b6:	55                   	push   ebp
c00001b7:	89 e5                	mov    ebp,esp
c00001b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bc:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00001bf:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00001c2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00001c5:	25 ff ff 00 00       	and    eax,0xffff
c00001ca:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00001d0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00001d6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00001dc:	52                   	push   edx
c00001dd:	51                   	push   ecx
c00001de:	68 02 02 02 00       	push   0x20202
c00001e3:	53                   	push   ebx
c00001e4:	50                   	push   eax
c00001e5:	cf                   	iret   

c00001e6 <goToUsermode>:
c00001e6:	fa                   	cli    
c00001e7:	55                   	push   ebp
c00001e8:	89 e5                	mov    ebp,esp
c00001ea:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00001ed:	66 b8 23 00          	mov    ax,0x23
c00001f1:	66 8e d8             	mov    ds,ax
c00001f4:	66 8e c0             	mov    es,ax
c00001f7:	66 8e e0             	mov    fs,ax
c00001fa:	66 8e e8             	mov    gs,ax
c00001fd:	89 e0                	mov    eax,esp
c00001ff:	68 23 00 00 00       	push   0x23
c0000204:	50                   	push   eax
c0000205:	68 02 02 00 00       	push   0x202
c000020a:	68 1b 00 00 00       	push   0x1b
c000020f:	53                   	push   ebx
c0000210:	cf                   	iret   

c0000211 <switchToThreadASMFirstTime>:
c0000211:	9c                   	pushf  
c0000212:	fa                   	cli    
c0000213:	50                   	push   eax
c0000214:	53                   	push   ebx
c0000215:	51                   	push   ecx
c0000216:	52                   	push   edx
c0000217:	56                   	push   esi
c0000218:	57                   	push   edi
c0000219:	55                   	push   ebp
c000021a:	e9 11 00 00 00       	jmp    c0000230 <commonThreadSwitch>

c000021f <switchToThreadASM>:
c000021f:	9c                   	pushf  
c0000220:	50                   	push   eax
c0000221:	53                   	push   ebx
c0000222:	51                   	push   ecx
c0000223:	52                   	push   edx
c0000224:	56                   	push   esi
c0000225:	57                   	push   edi
c0000226:	55                   	push   ebp
c0000227:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000022d:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000230 <commonThreadSwitch>:
c0000230:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000234:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000023a:	8b 06                	mov    eax,DWORD PTR [esi]
c000023c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000023f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000242:	0f 20 d9             	mov    ecx,cr3
c0000245:	39 c8                	cmp    eax,ecx
c0000247:	74 03                	je     c000024c <commonThreadSwitch.doneVAS>
c0000249:	0f 22 d8             	mov    cr3,eax

c000024c <commonThreadSwitch.doneVAS>:
c000024c:	85 d2                	test   edx,edx
c000024e:	74 4e                	je     c000029e <commonThreadSwitch.notFirstTime>
c0000250:	fa                   	cli    
c0000251:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000254:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000259:	60                   	pusha  
c000025a:	e8 89 ec 00 00       	call   c000eee8 <mapVASFirstTime>
c000025f:	61                   	popa   
c0000260:	89 c4                	mov    esp,eax
c0000262:	56                   	push   esi
c0000263:	52                   	push   edx
c0000264:	e8 97 7d 01 00       	call   c0018000 <changeTSS>
c0000269:	5a                   	pop    edx
c000026a:	5e                   	pop    esi
c000026b:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000272:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000278:	74 39                	je     c00002b3 <commonThreadSwitch.cameOffAFork>
c000027a:	5d                   	pop    ebp
c000027b:	5f                   	pop    edi
c000027c:	5e                   	pop    esi
c000027d:	59                   	pop    ecx
c000027e:	59                   	pop    ecx
c000027f:	5b                   	pop    ebx
c0000280:	58                   	pop    eax
c0000281:	81 c4 04 00 00 00    	add    esp,0x4
c0000287:	6a 02                	push   0x2
c0000289:	9d                   	popf   
c000028a:	52                   	push   edx
c000028b:	e8 9d 81 01 00       	call   c001842d <taskStartupFunction>
c0000290:	5a                   	pop    edx
c0000291:	50                   	push   eax
c0000292:	ff d2                	call   edx
c0000294:	e8 52 87 01 00       	call   c00189eb <taskReturned>
c0000299:	e9 fb ff ff ff       	jmp    c0000299 <commonThreadSwitch.doneVAS+0x4d>

c000029e <commonThreadSwitch.notFirstTime>:
c000029e:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a1:	56                   	push   esi
c00002a2:	52                   	push   edx
c00002a3:	e8 58 7d 01 00       	call   c0018000 <changeTSS>
c00002a8:	5a                   	pop    edx
c00002a9:	5e                   	pop    esi
c00002aa:	5d                   	pop    ebp
c00002ab:	5f                   	pop    edi
c00002ac:	5e                   	pop    esi
c00002ad:	5a                   	pop    edx
c00002ae:	59                   	pop    ecx
c00002af:	5b                   	pop    ebx
c00002b0:	58                   	pop    eax
c00002b1:	9d                   	popf   
c00002b2:	c3                   	ret    

c00002b3 <commonThreadSwitch.cameOffAFork>:
c00002b3:	31 c0                	xor    eax,eax
c00002b5:	31 d2                	xor    edx,edx
c00002b7:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c00002ba:	e9 a2 02 00 00       	jmp    c0000561 <offAForkJumpThingy>

c00002bf <detectCPUID>:
c00002bf:	9c                   	pushf  
c00002c0:	9c                   	pushf  
c00002c1:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002c8:	9d                   	popf   
c00002c9:	9c                   	pushf  
c00002ca:	58                   	pop    eax
c00002cb:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002ce:	9d                   	popf   
c00002cf:	25 00 00 20 00       	and    eax,0x200000
c00002d4:	c3                   	ret    

c00002d5 <asmQuickAcquireLock>:
c00002d5:	55                   	push   ebp
c00002d6:	89 e5                	mov    ebp,esp
c00002d8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00002db <asmQuickAcquireLock.retry>:
c00002db:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00002e0:	72 02                	jb     c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002e2:	fa                   	cli    
c00002e3:	c3                   	ret    

c00002e4 <asmQuickAcquireLock.spin_with_pause>:
c00002e4:	f3 90                	pause  
c00002e6:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00002ec:	75 f6                	jne    c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002ee:	e9 e8 ff ff ff       	jmp    c00002db <asmQuickAcquireLock.retry>

c00002f3 <asmQuickReleaseLock>:
c00002f3:	55                   	push   ebp
c00002f4:	89 e5                	mov    ebp,esp
c00002f6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00002fd:	5d                   	pop    ebp
c00002fe:	c3                   	ret    

c00002ff <asmAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 05                	jb     c0000311 <asmAcquireLock.spin_with_pause>
c000030c:	9c                   	pushf  
c000030d:	58                   	pop    eax
c000030e:	fa                   	cli    
c000030f:	5d                   	pop    ebp
c0000310:	c3                   	ret    

c0000311 <asmAcquireLock.spin_with_pause>:
c0000311:	f3 90                	pause  
c0000313:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000319:	75 f6                	jne    c0000311 <asmAcquireLock.spin_with_pause>
c000031b:	e9 e5 ff ff ff       	jmp    c0000305 <asmAcquireLock.retry>

c0000320 <asmReleaseLock>:
c0000320:	55                   	push   ebp
c0000321:	89 e5                	mov    ebp,esp
c0000323:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000326:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000329:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000032f:	52                   	push   edx
c0000330:	9d                   	popf   
c0000331:	5d                   	pop    ebp
c0000332:	c3                   	ret    

c0000333 <loadGDT>:
c0000333:	0f 01 15 30 41 02 c0 	lgdtd  ds:0xc0024130
c000033a:	66 b8 10 00          	mov    ax,0x10
c000033e:	66 8e d8             	mov    ds,ax
c0000341:	66 8e c0             	mov    es,ax
c0000344:	66 8e e0             	mov    fs,ax
c0000347:	66 8e e8             	mov    gs,ax
c000034a:	66 8e d0             	mov    ss,ax
c000034d:	e9 00 00 00 00       	jmp    c0000352 <flush2>

c0000352 <flush2>:
c0000352:	c3                   	ret    

c0000353 <isr0>:
c0000353:	fa                   	cli    
c0000354:	68 00 00 00 00       	push   0x0
c0000359:	68 00 00 00 00       	push   0x0
c000035e:	e9 a2 01 00 00       	jmp    c0000505 <int_common_stub>

c0000363 <isr1>:
c0000363:	fa                   	cli    
c0000364:	6a 00                	push   0x0
c0000366:	6a 01                	push   0x1
c0000368:	e9 98 01 00 00       	jmp    c0000505 <int_common_stub>

c000036d <isr2>:
c000036d:	fa                   	cli    
c000036e:	6a 00                	push   0x0
c0000370:	6a 02                	push   0x2
c0000372:	e9 8e 01 00 00       	jmp    c0000505 <int_common_stub>

c0000377 <isr3>:
c0000377:	fa                   	cli    
c0000378:	6a 00                	push   0x0
c000037a:	6a 03                	push   0x3
c000037c:	e9 84 01 00 00       	jmp    c0000505 <int_common_stub>

c0000381 <isr4>:
c0000381:	fa                   	cli    
c0000382:	6a 00                	push   0x0
c0000384:	6a 04                	push   0x4
c0000386:	e9 7a 01 00 00       	jmp    c0000505 <int_common_stub>

c000038b <isr5>:
c000038b:	fa                   	cli    
c000038c:	6a 00                	push   0x0
c000038e:	6a 05                	push   0x5
c0000390:	e9 70 01 00 00       	jmp    c0000505 <int_common_stub>

c0000395 <isr6>:
c0000395:	fa                   	cli    
c0000396:	6a 00                	push   0x0
c0000398:	6a 06                	push   0x6
c000039a:	e9 66 01 00 00       	jmp    c0000505 <int_common_stub>

c000039f <isr7>:
c000039f:	fa                   	cli    
c00003a0:	6a 00                	push   0x0
c00003a2:	6a 07                	push   0x7
c00003a4:	e9 5c 01 00 00       	jmp    c0000505 <int_common_stub>

c00003a9 <isr8>:
c00003a9:	fa                   	cli    
c00003aa:	6a 08                	push   0x8
c00003ac:	e9 54 01 00 00       	jmp    c0000505 <int_common_stub>

c00003b1 <isr9>:
c00003b1:	fa                   	cli    
c00003b2:	6a 00                	push   0x0
c00003b4:	6a 09                	push   0x9
c00003b6:	e9 4a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003bb <isr10>:
c00003bb:	fa                   	cli    
c00003bc:	6a 0a                	push   0xa
c00003be:	e9 42 01 00 00       	jmp    c0000505 <int_common_stub>

c00003c3 <isr11>:
c00003c3:	fa                   	cli    
c00003c4:	6a 0b                	push   0xb
c00003c6:	e9 3a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003cb <isr12>:
c00003cb:	fa                   	cli    
c00003cc:	6a 0c                	push   0xc
c00003ce:	e9 32 01 00 00       	jmp    c0000505 <int_common_stub>

c00003d3 <isr13>:
c00003d3:	fa                   	cli    
c00003d4:	6a 0d                	push   0xd
c00003d6:	e9 2a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003db <isr14>:
c00003db:	fa                   	cli    
c00003dc:	6a 0e                	push   0xe
c00003de:	e9 22 01 00 00       	jmp    c0000505 <int_common_stub>

c00003e3 <isr15>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 0f                	push   0xf
c00003e8:	e9 18 01 00 00       	jmp    c0000505 <int_common_stub>

c00003ed <isr16>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 10                	push   0x10
c00003f2:	e9 0e 01 00 00       	jmp    c0000505 <int_common_stub>

c00003f7 <isr17>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 11                	push   0x11
c00003fc:	e9 04 01 00 00       	jmp    c0000505 <int_common_stub>

c0000401 <isr18>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 12                	push   0x12
c0000406:	e9 fa 00 00 00       	jmp    c0000505 <int_common_stub>

c000040b <isr96>:
c000040b:	fa                   	cli    
c000040c:	6a 00                	push   0x0
c000040e:	6a 60                	push   0x60
c0000410:	e9 20 01 00 00       	jmp    c0000535 <syscall_common_stub>

c0000415 <irq0>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 20                	push   0x20
c000041a:	e9 e6 00 00 00       	jmp    c0000505 <int_common_stub>

c000041f <irq1>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 21                	push   0x21
c0000424:	e9 dc 00 00 00       	jmp    c0000505 <int_common_stub>

c0000429 <irq2>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 22                	push   0x22
c000042e:	e9 d2 00 00 00       	jmp    c0000505 <int_common_stub>

c0000433 <irq3>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 23                	push   0x23
c0000438:	e9 c8 00 00 00       	jmp    c0000505 <int_common_stub>

c000043d <irq4>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 24                	push   0x24
c0000442:	e9 be 00 00 00       	jmp    c0000505 <int_common_stub>

c0000447 <irq5>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 25                	push   0x25
c000044c:	e9 b4 00 00 00       	jmp    c0000505 <int_common_stub>

c0000451 <irq6>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 26                	push   0x26
c0000456:	e9 aa 00 00 00       	jmp    c0000505 <int_common_stub>

c000045b <irq7>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 27                	push   0x27
c0000460:	e9 a0 00 00 00       	jmp    c0000505 <int_common_stub>

c0000465 <irq8>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 28                	push   0x28
c000046a:	e9 96 00 00 00       	jmp    c0000505 <int_common_stub>

c000046f <irq9>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 29                	push   0x29
c0000474:	e9 8c 00 00 00       	jmp    c0000505 <int_common_stub>

c0000479 <irq10>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 2a                	push   0x2a
c000047e:	e9 82 00 00 00       	jmp    c0000505 <int_common_stub>

c0000483 <irq11>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 2b                	push   0x2b
c0000488:	e9 78 00 00 00       	jmp    c0000505 <int_common_stub>

c000048d <irq12>:
c000048d:	fa                   	cli    
c000048e:	6a 00                	push   0x0
c0000490:	6a 2c                	push   0x2c
c0000492:	e9 6e 00 00 00       	jmp    c0000505 <int_common_stub>

c0000497 <irq13>:
c0000497:	fa                   	cli    
c0000498:	6a 00                	push   0x0
c000049a:	6a 2d                	push   0x2d
c000049c:	e9 64 00 00 00       	jmp    c0000505 <int_common_stub>

c00004a1 <irq14>:
c00004a1:	fa                   	cli    
c00004a2:	6a 00                	push   0x0
c00004a4:	6a 2e                	push   0x2e
c00004a6:	e9 5a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004ab <irq15>:
c00004ab:	fa                   	cli    
c00004ac:	6a 00                	push   0x0
c00004ae:	6a 2f                	push   0x2f
c00004b0:	e9 50 00 00 00       	jmp    c0000505 <int_common_stub>

c00004b5 <irq16>:
c00004b5:	fa                   	cli    
c00004b6:	6a 00                	push   0x0
c00004b8:	6a 30                	push   0x30
c00004ba:	e9 46 00 00 00       	jmp    c0000505 <int_common_stub>

c00004bf <irq17>:
c00004bf:	fa                   	cli    
c00004c0:	6a 00                	push   0x0
c00004c2:	6a 31                	push   0x31
c00004c4:	e9 3c 00 00 00       	jmp    c0000505 <int_common_stub>

c00004c9 <irq18>:
c00004c9:	fa                   	cli    
c00004ca:	6a 00                	push   0x0
c00004cc:	6a 32                	push   0x32
c00004ce:	e9 32 00 00 00       	jmp    c0000505 <int_common_stub>

c00004d3 <irq19>:
c00004d3:	fa                   	cli    
c00004d4:	6a 00                	push   0x0
c00004d6:	6a 33                	push   0x33
c00004d8:	e9 28 00 00 00       	jmp    c0000505 <int_common_stub>

c00004dd <irq20>:
c00004dd:	fa                   	cli    
c00004de:	6a 00                	push   0x0
c00004e0:	6a 34                	push   0x34
c00004e2:	e9 1e 00 00 00       	jmp    c0000505 <int_common_stub>

c00004e7 <irq21>:
c00004e7:	fa                   	cli    
c00004e8:	6a 00                	push   0x0
c00004ea:	6a 35                	push   0x35
c00004ec:	e9 14 00 00 00       	jmp    c0000505 <int_common_stub>

c00004f1 <irq22>:
c00004f1:	fa                   	cli    
c00004f2:	6a 00                	push   0x0
c00004f4:	6a 36                	push   0x36
c00004f6:	e9 0a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004fb <irq23>:
c00004fb:	fa                   	cli    
c00004fc:	6a 00                	push   0x0
c00004fe:	6a 37                	push   0x37
c0000500:	e9 00 00 00 00       	jmp    c0000505 <int_common_stub>

c0000505 <int_common_stub>:
c0000505:	60                   	pusha  
c0000506:	1e                   	push   ds
c0000507:	06                   	push   es
c0000508:	0f a0                	push   fs
c000050a:	0f a8                	push   gs
c000050c:	66 b8 10 00          	mov    ax,0x10
c0000510:	66 8e d8             	mov    ds,ax
c0000513:	66 8e c0             	mov    es,ax
c0000516:	66 8e e0             	mov    fs,ax
c0000519:	66 8e e8             	mov    gs,ax
c000051c:	89 e1                	mov    ecx,esp
c000051e:	51                   	push   ecx
c000051f:	b9 10 0e 01 c0       	mov    ecx,0xc0010e10
c0000524:	ff d1                	call   ecx
c0000526:	59                   	pop    ecx
c0000527:	0f a9                	pop    gs
c0000529:	0f a1                	pop    fs
c000052b:	07                   	pop    es
c000052c:	1f                   	pop    ds
c000052d:	61                   	popa   
c000052e:	81 c4 08 00 00 00    	add    esp,0x8
c0000534:	cf                   	iret   

c0000535 <syscall_common_stub>:
c0000535:	60                   	pusha  
c0000536:	1e                   	push   ds
c0000537:	06                   	push   es
c0000538:	0f a0                	push   fs
c000053a:	0f a8                	push   gs
c000053c:	66 b8 10 00          	mov    ax,0x10
c0000540:	66 8e d8             	mov    ds,ax
c0000543:	66 8e c0             	mov    es,ax
c0000546:	66 8e e0             	mov    fs,ax
c0000549:	66 8e e8             	mov    gs,ax
c000054c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000552:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000555:	89 e1                	mov    ecx,esp
c0000557:	51                   	push   ecx
c0000558:	fb                   	sti    
c0000559:	b9 10 0e 01 c0       	mov    ecx,0xc0010e10
c000055e:	ff d1                	call   ecx
c0000560:	59                   	pop    ecx

c0000561 <offAForkJumpThingy>:
c0000561:	0f a9                	pop    gs
c0000563:	0f a1                	pop    fs
c0000565:	07                   	pop    es
c0000566:	1f                   	pop    ds
c0000567:	61                   	popa   
c0000568:	81 c4 08 00 00 00    	add    esp,0x8
c000056e:	cf                   	iret   

c000056f <memcmp>:
c000056f:	56                   	push   esi
c0000570:	53                   	push   ebx
c0000571:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000575:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000057d:	01 d6                	add    esi,edx
c000057f:	39 f2                	cmp    edx,esi
c0000581:	74 0e                	je     c0000591 <memcmp+0x22>
c0000583:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000586:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000589:	38 c8                	cmp    al,cl
c000058b:	75 08                	jne    c0000595 <memcmp+0x26>
c000058d:	42                   	inc    edx
c000058e:	43                   	inc    ebx
c000058f:	eb ee                	jmp    c000057f <memcmp+0x10>
c0000591:	31 c0                	xor    eax,eax
c0000593:	eb 02                	jmp    c0000597 <memcmp+0x28>
c0000595:	29 c8                	sub    eax,ecx
c0000597:	5b                   	pop    ebx
c0000598:	5e                   	pop    esi
c0000599:	c3                   	ret    

c000059a <memmove>:
c000059a:	56                   	push   esi
c000059b:	53                   	push   ebx
c000059c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00005a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00005a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00005a8:	39 c8                	cmp    eax,ecx
c00005aa:	73 12                	jae    c00005be <memmove+0x24>
c00005ac:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00005af:	89 c3                	mov    ebx,eax
c00005b1:	39 f1                	cmp    ecx,esi
c00005b3:	74 1a                	je     c00005cf <memmove+0x35>
c00005b5:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005b7:	43                   	inc    ebx
c00005b8:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00005bb:	41                   	inc    ecx
c00005bc:	eb f3                	jmp    c00005b1 <memmove+0x17>
c00005be:	76 0f                	jbe    c00005cf <memmove+0x35>
c00005c0:	85 d2                	test   edx,edx
c00005c2:	74 0b                	je     c00005cf <memmove+0x35>
c00005c4:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c00005c8:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c00005cc:	4a                   	dec    edx
c00005cd:	eb f1                	jmp    c00005c0 <memmove+0x26>
c00005cf:	5b                   	pop    ebx
c00005d0:	5e                   	pop    esi
c00005d1:	c3                   	ret    

c00005d2 <memcpy>:
c00005d2:	57                   	push   edi
c00005d3:	56                   	push   esi
c00005d4:	53                   	push   ebx
c00005d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005dd:	89 da                	mov    edx,ebx
c00005df:	89 d9                	mov    ecx,ebx
c00005e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005e5:	83 e2 fc             	and    edx,0xfffffffc
c00005e8:	c1 e9 02             	shr    ecx,0x2
c00005eb:	89 c7                	mov    edi,eax
c00005ed:	fc                   	cld    
c00005ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00005f0:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00005f3:	01 c2                	add    edx,eax
c00005f5:	01 de                	add    esi,ebx
c00005f7:	39 f1                	cmp    ecx,esi
c00005f9:	74 09                	je     c0000604 <memcpy+0x32>
c00005fb:	8a 19                	mov    bl,BYTE PTR [ecx]
c00005fd:	42                   	inc    edx
c00005fe:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000601:	41                   	inc    ecx
c0000602:	eb f3                	jmp    c00005f7 <memcpy+0x25>
c0000604:	5b                   	pop    ebx
c0000605:	5e                   	pop    esi
c0000606:	5f                   	pop    edi
c0000607:	c3                   	ret    

c0000608 <memset>:
c0000608:	53                   	push   ebx
c0000609:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000060d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000611:	01 c1                	add    ecx,eax
c0000613:	89 c2                	mov    edx,eax
c0000615:	39 ca                	cmp    edx,ecx
c0000617:	74 0a                	je     c0000623 <memset+0x1b>
c0000619:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c000061d:	42                   	inc    edx
c000061e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000621:	eb f2                	jmp    c0000615 <memset+0xd>
c0000623:	5b                   	pop    ebx
c0000624:	c3                   	ret    

c0000625 <strlen>:
c0000625:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000629:	31 c0                	xor    eax,eax
c000062b:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000062f:	74 03                	je     c0000634 <strlen+0xf>
c0000631:	40                   	inc    eax
c0000632:	eb f7                	jmp    c000062b <strlen+0x6>
c0000634:	c3                   	ret    

c0000635 <strpbrk>:
c0000635:	53                   	push   ebx
c0000636:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000063a:	8a 08                	mov    cl,BYTE PTR [eax]
c000063c:	84 c9                	test   cl,cl
c000063e:	74 14                	je     c0000654 <strpbrk+0x1f>
c0000640:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000644:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000646:	84 db                	test   bl,bl
c0000648:	74 07                	je     c0000651 <strpbrk+0x1c>
c000064a:	38 cb                	cmp    bl,cl
c000064c:	74 08                	je     c0000656 <strpbrk+0x21>
c000064e:	42                   	inc    edx
c000064f:	eb f3                	jmp    c0000644 <strpbrk+0xf>
c0000651:	40                   	inc    eax
c0000652:	eb e6                	jmp    c000063a <strpbrk+0x5>
c0000654:	31 c0                	xor    eax,eax
c0000656:	5b                   	pop    ebx
c0000657:	c3                   	ret    

c0000658 <strtok>:
c0000658:	56                   	push   esi
c0000659:	53                   	push   ebx
c000065a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000065e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000662:	85 db                	test   ebx,ebx
c0000664:	75 0e                	jne    c0000674 <strtok+0x1c>
c0000666:	8b 1d 0c 3d 02 c0    	mov    ebx,DWORD PTR ds:0xc0023d0c
c000066c:	85 db                	test   ebx,ebx
c000066e:	75 04                	jne    c0000674 <strtok+0x1c>
c0000670:	31 db                	xor    ebx,ebx
c0000672:	eb 2e                	jmp    c00006a2 <strtok+0x4a>
c0000674:	56                   	push   esi
c0000675:	53                   	push   ebx
c0000676:	e8 ba ff ff ff       	call   c0000635 <strpbrk>
c000067b:	a3 0c 3d 02 c0       	mov    ds:0xc0023d0c,eax
c0000680:	5a                   	pop    edx
c0000681:	a1 0c 3d 02 c0       	mov    eax,ds:0xc0023d0c
c0000686:	59                   	pop    ecx
c0000687:	39 d8                	cmp    eax,ebx
c0000689:	75 07                	jne    c0000692 <strtok+0x3a>
c000068b:	43                   	inc    ebx
c000068c:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000690:	eb e2                	jmp    c0000674 <strtok+0x1c>
c0000692:	85 c0                	test   eax,eax
c0000694:	74 da                	je     c0000670 <strtok+0x18>
c0000696:	8d 50 01             	lea    edx,[eax+0x1]
c0000699:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000069c:	89 15 0c 3d 02 c0    	mov    DWORD PTR ds:0xc0023d0c,edx
c00006a2:	89 d8                	mov    eax,ebx
c00006a4:	5b                   	pop    ebx
c00006a5:	5e                   	pop    esi
c00006a6:	c3                   	ret    

c00006a7 <strcpy>:
c00006a7:	53                   	push   ebx
c00006a8:	31 d2                	xor    edx,edx
c00006aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00006b2:	8d 1c 10             	lea    ebx,[eax+edx*1]
c00006b5:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00006b8:	84 c9                	test   cl,cl
c00006ba:	74 06                	je     c00006c2 <strcpy+0x1b>
c00006bc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00006bf:	42                   	inc    edx
c00006c0:	eb ec                	jmp    c00006ae <strcpy+0x7>
c00006c2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00006c5:	5b                   	pop    ebx
c00006c6:	c3                   	ret    

c00006c7 <strncpy>:
c00006c7:	56                   	push   esi
c00006c8:	53                   	push   ebx
c00006c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006d1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00006d5:	89 c3                	mov    ebx,eax
c00006d7:	85 c9                	test   ecx,ecx
c00006d9:	74 1a                	je     c00006f5 <strncpy+0x2e>
c00006db:	46                   	inc    esi
c00006dc:	43                   	inc    ebx
c00006dd:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00006e0:	49                   	dec    ecx
c00006e1:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00006e4:	84 d2                	test   dl,dl
c00006e6:	75 ef                	jne    c00006d7 <strncpy+0x10>
c00006e8:	31 d2                	xor    edx,edx
c00006ea:	39 d1                	cmp    ecx,edx
c00006ec:	74 07                	je     c00006f5 <strncpy+0x2e>
c00006ee:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00006f2:	42                   	inc    edx
c00006f3:	eb f5                	jmp    c00006ea <strncpy+0x23>
c00006f5:	5b                   	pop    ebx
c00006f6:	5e                   	pop    esi
c00006f7:	c3                   	ret    

c00006f8 <strcmp>:
c00006f8:	31 c9                	xor    ecx,ecx
c00006fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00006fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000702:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000706:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000070a:	38 d0                	cmp    al,dl
c000070c:	75 08                	jne    c0000716 <strcmp+0x1e>
c000070e:	41                   	inc    ecx
c000070f:	84 c0                	test   al,al
c0000711:	75 e7                	jne    c00006fa <strcmp+0x2>
c0000713:	31 c0                	xor    eax,eax
c0000715:	c3                   	ret    
c0000716:	29 d0                	sub    eax,edx
c0000718:	c3                   	ret    

c0000719 <strchr>:
c0000719:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000071d:	8a 10                	mov    dl,BYTE PTR [eax]
c000071f:	84 d2                	test   dl,dl
c0000721:	74 09                	je     c000072c <strchr+0x13>
c0000723:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c0000727:	74 05                	je     c000072e <strchr+0x15>
c0000729:	40                   	inc    eax
c000072a:	eb f1                	jmp    c000071d <strchr+0x4>
c000072c:	31 c0                	xor    eax,eax
c000072e:	c3                   	ret    

c000072f <strncmp>:
c000072f:	56                   	push   esi
c0000730:	53                   	push   ebx
c0000731:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000735:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000073d:	01 d6                	add    esi,edx
c000073f:	39 f2                	cmp    edx,esi
c0000741:	74 12                	je     c0000755 <strncmp+0x26>
c0000743:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000746:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000749:	38 c8                	cmp    al,cl
c000074b:	75 0c                	jne    c0000759 <strncmp+0x2a>
c000074d:	42                   	inc    edx
c000074e:	84 c0                	test   al,al
c0000750:	74 03                	je     c0000755 <strncmp+0x26>
c0000752:	43                   	inc    ebx
c0000753:	eb ea                	jmp    c000073f <strncmp+0x10>
c0000755:	31 c0                	xor    eax,eax
c0000757:	eb 02                	jmp    c000075b <strncmp+0x2c>
c0000759:	29 c8                	sub    eax,ecx
c000075b:	5b                   	pop    ebx
c000075c:	5e                   	pop    esi
c000075d:	c3                   	ret    

c000075e <strcat>:
c000075e:	53                   	push   ebx
c000075f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000763:	89 c1                	mov    ecx,eax
c0000765:	8d 51 01             	lea    edx,[ecx+0x1]
c0000768:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000076c:	74 04                	je     c0000772 <strcat+0x14>
c000076e:	89 d1                	mov    ecx,edx
c0000770:	eb f3                	jmp    c0000765 <strcat+0x7>
c0000772:	31 d2                	xor    edx,edx
c0000774:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000778:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000077b:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000077e:	42                   	inc    edx
c000077f:	84 db                	test   bl,bl
c0000781:	75 f1                	jne    c0000774 <strcat+0x16>
c0000783:	5b                   	pop    ebx
c0000784:	c3                   	ret    

c0000785 <strncat>:
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000793:	89 c2                	mov    edx,eax
c0000795:	85 db                	test   ebx,ebx
c0000797:	74 23                	je     c00007bc <strncat+0x37>
c0000799:	8d 72 01             	lea    esi,[edx+0x1]
c000079c:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c00007a0:	74 04                	je     c00007a6 <strncat+0x21>
c00007a2:	89 f2                	mov    edx,esi
c00007a4:	eb f3                	jmp    c0000799 <strncat+0x14>
c00007a6:	8d 34 19             	lea    esi,[ecx+ebx*1]
c00007a9:	41                   	inc    ecx
c00007aa:	42                   	inc    edx
c00007ab:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00007ae:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007b1:	84 db                	test   bl,bl
c00007b3:	74 07                	je     c00007bc <strncat+0x37>
c00007b5:	39 f1                	cmp    ecx,esi
c00007b7:	75 f0                	jne    c00007a9 <strncat+0x24>
c00007b9:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00007bc:	5b                   	pop    ebx
c00007bd:	5e                   	pop    esi
c00007be:	c3                   	ret    

c00007bf <strstr>:
c00007bf:	57                   	push   edi
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007ca:	57                   	push   edi
c00007cb:	e8 55 fe ff ff       	call   c0000625 <strlen>
c00007d0:	59                   	pop    ecx
c00007d1:	89 c6                	mov    esi,eax
c00007d3:	85 c0                	test   eax,eax
c00007d5:	74 1f                	je     c00007f6 <strstr+0x37>
c00007d7:	53                   	push   ebx
c00007d8:	e8 48 fe ff ff       	call   c0000625 <strlen>
c00007dd:	5a                   	pop    edx
c00007de:	39 f0                	cmp    eax,esi
c00007e0:	72 12                	jb     c00007f4 <strstr+0x35>
c00007e2:	56                   	push   esi
c00007e3:	57                   	push   edi
c00007e4:	53                   	push   ebx
c00007e5:	e8 85 fd ff ff       	call   c000056f <memcmp>
c00007ea:	83 c4 0c             	add    esp,0xc
c00007ed:	85 c0                	test   eax,eax
c00007ef:	74 05                	je     c00007f6 <strstr+0x37>
c00007f1:	43                   	inc    ebx
c00007f2:	eb e3                	jmp    c00007d7 <strstr+0x18>
c00007f4:	31 db                	xor    ebx,ebx
c00007f6:	89 d8                	mov    eax,ebx
c00007f8:	5b                   	pop    ebx
c00007f9:	5e                   	pop    esi
c00007fa:	5f                   	pop    edi
c00007fb:	c3                   	ret    

c00007fc <toupper>:
c00007fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000800:	0f b6 d0             	movzx  edx,al
c0000803:	f6 82 c0 fc 01 c0 02 	test   BYTE PTR [edx-0x3ffe0340],0x2
c000080a:	74 03                	je     c000080f <toupper+0x13>
c000080c:	83 e8 20             	sub    eax,0x20
c000080f:	c3                   	ret    

c0000810 <tolower>:
c0000810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000814:	0f b6 d0             	movzx  edx,al
c0000817:	f6 82 c0 fc 01 c0 01 	test   BYTE PTR [edx-0x3ffe0340],0x1
c000081e:	74 03                	je     c0000823 <tolower+0x13>
c0000820:	83 c0 20             	add    eax,0x20
c0000823:	c3                   	ret    

c0000824 <simple_strtoul>:
c0000824:	55                   	push   ebp
c0000825:	57                   	push   edi
c0000826:	56                   	push   esi
c0000827:	53                   	push   ebx
c0000828:	83 ec 08             	sub    esp,0x8
c000082b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000082f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000833:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000836:	f6 82 c0 fc 01 c0 08 	test   BYTE PTR [edx-0x3ffe0340],0x8
c000083d:	74 03                	je     c0000842 <simple_strtoul+0x1e>
c000083f:	41                   	inc    ecx
c0000840:	eb f1                	jmp    c0000833 <simple_strtoul+0xf>
c0000842:	80 fa 09             	cmp    dl,0x9
c0000845:	74 f8                	je     c000083f <simple_strtoul+0x1b>
c0000847:	80 fa 2d             	cmp    dl,0x2d
c000084a:	75 0b                	jne    c0000857 <simple_strtoul+0x33>
c000084c:	41                   	inc    ecx
c000084d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000855:	eb 0e                	jmp    c0000865 <simple_strtoul+0x41>
c0000857:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000085f:	80 fa 2b             	cmp    dl,0x2b
c0000862:	75 01                	jne    c0000865 <simple_strtoul+0x41>
c0000864:	41                   	inc    ecx
c0000865:	85 f6                	test   esi,esi
c0000867:	75 22                	jne    c000088b <simple_strtoul+0x67>
c0000869:	be 0a 00 00 00       	mov    esi,0xa
c000086e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000871:	75 5a                	jne    c00008cd <simple_strtoul+0xa9>
c0000873:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000877:	50                   	push   eax
c0000878:	e8 93 ff ff ff       	call   c0000810 <tolower>
c000087d:	5a                   	pop    edx
c000087e:	83 f8 78             	cmp    eax,0x78
c0000881:	74 03                	je     c0000886 <simple_strtoul+0x62>
c0000883:	41                   	inc    ecx
c0000884:	eb 16                	jmp    c000089c <simple_strtoul+0x78>
c0000886:	83 c1 02             	add    ecx,0x2
c0000889:	eb 22                	jmp    c00008ad <simple_strtoul+0x89>
c000088b:	8d 46 fe             	lea    eax,[esi-0x2]
c000088e:	83 f8 22             	cmp    eax,0x22
c0000891:	0f 87 ab 00 00 00    	ja     c0000942 <simple_strtoul+0x11e>
c0000897:	83 fe 08             	cmp    esi,0x8
c000089a:	75 0c                	jne    c00008a8 <simple_strtoul+0x84>
c000089c:	be 08 00 00 00       	mov    esi,0x8
c00008a1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008a4:	75 27                	jne    c00008cd <simple_strtoul+0xa9>
c00008a6:	eb 1f                	jmp    c00008c7 <simple_strtoul+0xa3>
c00008a8:	83 fe 10             	cmp    esi,0x10
c00008ab:	75 20                	jne    c00008cd <simple_strtoul+0xa9>
c00008ad:	be 10 00 00 00       	mov    esi,0x10
c00008b2:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008b5:	75 16                	jne    c00008cd <simple_strtoul+0xa9>
c00008b7:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008bb:	50                   	push   eax
c00008bc:	e8 4f ff ff ff       	call   c0000810 <tolower>
c00008c1:	5d                   	pop    ebp
c00008c2:	83 f8 78             	cmp    eax,0x78
c00008c5:	74 03                	je     c00008ca <simple_strtoul+0xa6>
c00008c7:	41                   	inc    ecx
c00008c8:	eb 03                	jmp    c00008cd <simple_strtoul+0xa9>
c00008ca:	83 c1 02             	add    ecx,0x2
c00008cd:	31 ed                	xor    ebp,ebp
c00008cf:	31 db                	xor    ebx,ebx
c00008d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00008d8:	8a 11                	mov    dl,BYTE PTR [ecx]
c00008da:	84 d2                	test   dl,dl
c00008dc:	74 27                	je     c0000905 <simple_strtoul+0xe1>
c00008de:	0f b6 fa             	movzx  edi,dl
c00008e1:	f6 87 c0 fc 01 c0 04 	test   BYTE PTR [edi-0x3ffe0340],0x4
c00008e8:	74 05                	je     c00008ef <simple_strtoul+0xcb>
c00008ea:	83 ef 30             	sub    edi,0x30
c00008ed:	eb 22                	jmp    c0000911 <simple_strtoul+0xed>
c00008ef:	0f be d2             	movsx  edx,dl
c00008f2:	52                   	push   edx
c00008f3:	e8 04 ff ff ff       	call   c00007fc <toupper>
c00008f8:	0f b6 d0             	movzx  edx,al
c00008fb:	5f                   	pop    edi
c00008fc:	f6 82 c0 fc 01 c0 01 	test   BYTE PTR [edx-0x3ffe0340],0x1
c0000903:	75 09                	jne    c000090e <simple_strtoul+0xea>
c0000905:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000090a:	75 2d                	jne    c0000939 <simple_strtoul+0x115>
c000090c:	eb 59                	jmp    c0000967 <simple_strtoul+0x143>
c000090e:	8d 78 c9             	lea    edi,[eax-0x37]
c0000911:	39 f7                	cmp    edi,esi
c0000913:	73 f0                	jae    c0000905 <simple_strtoul+0xe1>
c0000915:	89 f8                	mov    eax,edi
c0000917:	31 d2                	xor    edx,edx
c0000919:	f7 d0                	not    eax
c000091b:	f7 f6                	div    esi
c000091d:	39 d8                	cmp    eax,ebx
c000091f:	72 0e                	jb     c000092f <simple_strtoul+0x10b>
c0000921:	0f af de             	imul   ebx,esi
c0000924:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000092b:	01 fb                	add    ebx,edi
c000092d:	eb 07                	jmp    c0000936 <simple_strtoul+0x112>
c000092f:	bd 01 00 00 00       	mov    ebp,0x1
c0000934:	31 db                	xor    ebx,ebx
c0000936:	41                   	inc    ecx
c0000937:	eb 9f                	jmp    c00008d8 <simple_strtoul+0xb4>
c0000939:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000093c:	09 d8                	or     eax,ebx
c000093e:	75 21                	jne    c0000961 <simple_strtoul+0x13d>
c0000940:	eb 11                	jmp    c0000953 <simple_strtoul+0x12f>
c0000942:	31 db                	xor    ebx,ebx
c0000944:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000949:	74 22                	je     c000096d <simple_strtoul+0x149>
c000094b:	31 ed                	xor    ebp,ebp
c000094d:	31 db                	xor    ebx,ebx
c000094f:	85 c9                	test   ecx,ecx
c0000951:	74 0e                	je     c0000961 <simple_strtoul+0x13d>
c0000953:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000957:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000095b:	31 db                	xor    ebx,ebx
c000095d:	89 38                	mov    DWORD PTR [eax],edi
c000095f:	eb 06                	jmp    c0000967 <simple_strtoul+0x143>
c0000961:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000965:	89 08                	mov    DWORD PTR [eax],ecx
c0000967:	4d                   	dec    ebp
c0000968:	75 03                	jne    c000096d <simple_strtoul+0x149>
c000096a:	83 cb ff             	or     ebx,0xffffffff
c000096d:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000972:	75 02                	jne    c0000976 <simple_strtoul+0x152>
c0000974:	f7 db                	neg    ebx
c0000976:	83 c4 08             	add    esp,0x8
c0000979:	89 d8                	mov    eax,ebx
c000097b:	5b                   	pop    ebx
c000097c:	5e                   	pop    esi
c000097d:	5f                   	pop    edi
c000097e:	5d                   	pop    ebp
c000097f:	c3                   	ret    

c0000980 <largebin_index>:
c0000980:	89 c2                	mov    edx,eax
c0000982:	c1 ea 08             	shr    edx,0x8
c0000985:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000098b:	77 10                	ja     c000099d <largebin_index+0x1d>
c000098d:	0f bd d2             	bsr    edx,edx
c0000990:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000993:	d3 e8                	shr    eax,cl
c0000995:	83 e0 03             	and    eax,0x3
c0000998:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c000099c:	c3                   	ret    
c000099d:	b8 5f 00 00 00       	mov    eax,0x5f
c00009a2:	c3                   	ret    

c00009a3 <malloc_init_state>:
c00009a3:	8d 50 34             	lea    edx,[eax+0x34]
c00009a6:	53                   	push   ebx
c00009a7:	89 d1                	mov    ecx,edx
c00009a9:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009af:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009b2:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009b5:	83 c2 08             	add    edx,0x8
c00009b8:	39 da                	cmp    edx,ebx
c00009ba:	75 f3                	jne    c00009af <malloc_init_state+0xc>
c00009bc:	8b 10                	mov    edx,DWORD PTR [eax]
c00009be:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009c8:	83 e2 03             	and    edx,0x3
c00009cb:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009d5:	83 ca 48             	or     edx,0x48
c00009d8:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009e2:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009ec:	89 10                	mov    DWORD PTR [eax],edx
c00009ee:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009f5:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c00009f8:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a02:	5b                   	pop    ebx
c0000a03:	c3                   	ret    

c0000a04 <malloc_consolidate>:
c0000a04:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a06:	85 d2                	test   edx,edx
c0000a08:	0f 84 d8 00 00 00    	je     c0000ae6 <malloc_consolidate+0xe2>
c0000a0e:	55                   	push   ebp
c0000a0f:	83 e2 fd             	and    edx,0xfffffffd
c0000a12:	57                   	push   edi
c0000a13:	8d 78 34             	lea    edi,[eax+0x34]
c0000a16:	56                   	push   esi
c0000a17:	89 c5                	mov    ebp,eax
c0000a19:	53                   	push   ebx
c0000a1a:	83 ec 10             	sub    esp,0x10
c0000a1d:	89 10                	mov    DWORD PTR [eax],edx
c0000a1f:	c1 ea 03             	shr    edx,0x3
c0000a22:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a26:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a2a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a2e:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a31:	85 d2                	test   edx,edx
c0000a33:	0f 84 98 00 00 00    	je     c0000ad1 <malloc_consolidate+0xcd>
c0000a39:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a40:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a43:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a46:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a4a:	89 f9                	mov    ecx,edi
c0000a4c:	83 e1 fe             	and    ecx,0xfffffffe
c0000a4f:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a52:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a55:	83 e3 fc             	and    ebx,0xfffffffc
c0000a58:	83 e7 01             	and    edi,0x1
c0000a5b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a5e:	75 14                	jne    c0000a74 <malloc_consolidate+0x70>
c0000a60:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a62:	29 fa                	sub    edx,edi
c0000a64:	01 f9                	add    ecx,edi
c0000a66:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a69:	89 fb                	mov    ebx,edi
c0000a6b:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a6e:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a71:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a74:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a77:	74 40                	je     c0000ab9 <malloc_consolidate+0xb5>
c0000a79:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a7c:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a7f:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a83:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a86:	83 e7 01             	and    edi,0x1
c0000a89:	75 0e                	jne    c0000a99 <malloc_consolidate+0x95>
c0000a8b:	01 d9                	add    ecx,ebx
c0000a8d:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a90:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a93:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000a96:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000a99:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000a9c:	89 ce                	mov    esi,ecx
c0000a9e:	83 ce 01             	or     esi,0x1
c0000aa1:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000aa4:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000aa7:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000aaa:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000aae:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000ab1:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ab4:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ab7:	eb 0c                	jmp    c0000ac5 <malloc_consolidate+0xc1>
c0000ab9:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000abc:	83 c9 01             	or     ecx,0x1
c0000abf:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ac2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ac5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ac9:	85 d2                	test   edx,edx
c0000acb:	0f 85 6f ff ff ff    	jne    c0000a40 <malloc_consolidate+0x3c>
c0000ad1:	83 c5 04             	add    ebp,0x4
c0000ad4:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ad8:	0f 85 50 ff ff ff    	jne    c0000a2e <malloc_consolidate+0x2a>
c0000ade:	83 c4 10             	add    esp,0x10
c0000ae1:	5b                   	pop    ebx
c0000ae2:	5e                   	pop    esi
c0000ae3:	5f                   	pop    edi
c0000ae4:	5d                   	pop    ebp
c0000ae5:	c3                   	ret    
c0000ae6:	e9 b8 fe ff ff       	jmp    c00009a3 <malloc_init_state>

c0000aeb <dlfree>:
c0000aeb:	57                   	push   edi
c0000aec:	56                   	push   esi
c0000aed:	53                   	push   ebx
c0000aee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000af2:	85 db                	test   ebx,ebx
c0000af4:	0f 84 e2 00 00 00    	je     c0000bdc <dlfree+0xf1>
c0000afa:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000afd:	8b 0d 20 3d 02 c0    	mov    ecx,DWORD PTR ds:0xc0023d20
c0000b03:	89 f0                	mov    eax,esi
c0000b05:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b08:	83 e0 fc             	and    eax,0xfffffffc
c0000b0b:	39 c1                	cmp    ecx,eax
c0000b0d:	72 24                	jb     c0000b33 <dlfree+0x48>
c0000b0f:	c1 e8 03             	shr    eax,0x3
c0000b12:	83 c9 03             	or     ecx,0x3
c0000b15:	83 e8 02             	sub    eax,0x2
c0000b18:	89 0d 20 3d 02 c0    	mov    DWORD PTR ds:0xc0023d20,ecx
c0000b1e:	8b 0c 85 24 3d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdc2dc]
c0000b25:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b27:	89 14 85 24 3d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc2dc],edx
c0000b2e:	e9 a9 00 00 00       	jmp    c0000bdc <dlfree+0xf1>
c0000b33:	83 e6 02             	and    esi,0x2
c0000b36:	0f 85 a0 00 00 00    	jne    c0000bdc <dlfree+0xf1>
c0000b3c:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b3f:	83 c9 01             	or     ecx,0x1
c0000b42:	89 0d 20 3d 02 c0    	mov    DWORD PTR ds:0xc0023d20,ecx
c0000b48:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b4b:	83 e1 fc             	and    ecx,0xfffffffc
c0000b4e:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b52:	75 13                	jne    c0000b67 <dlfree+0x7c>
c0000b54:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b57:	29 da                	sub    edx,ebx
c0000b59:	01 d8                	add    eax,ebx
c0000b5b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b5e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b61:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b64:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b67:	39 35 4c 3d 02 c0    	cmp    DWORD PTR ds:0xc0023d4c,esi
c0000b6d:	74 40                	je     c0000baf <dlfree+0xc4>
c0000b6f:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b73:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b76:	80 e3 01             	and    bl,0x1
c0000b79:	75 0e                	jne    c0000b89 <dlfree+0x9e>
c0000b7b:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b7e:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b81:	01 c8                	add    eax,ecx
c0000b83:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b86:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b89:	8b 0d 5c 3d 02 c0    	mov    ecx,DWORD PTR ds:0xc0023d5c
c0000b8f:	c7 42 0c 54 3d 02 c0 	mov    DWORD PTR [edx+0xc],0xc0023d54
c0000b96:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000b99:	89 15 5c 3d 02 c0    	mov    DWORD PTR ds:0xc0023d5c,edx
c0000b9f:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ba2:	89 c1                	mov    ecx,eax
c0000ba4:	83 c9 01             	or     ecx,0x1
c0000ba7:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000baa:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bad:	eb 10                	jmp    c0000bbf <dlfree+0xd4>
c0000baf:	01 c8                	add    eax,ecx
c0000bb1:	89 c1                	mov    ecx,eax
c0000bb3:	83 c9 01             	or     ecx,0x1
c0000bb6:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bb9:	89 15 4c 3d 02 c0    	mov    DWORD PTR ds:0xc0023d4c,edx
c0000bbf:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bc4:	76 16                	jbe    c0000bdc <dlfree+0xf1>
c0000bc6:	f6 05 20 3d 02 c0 02 	test   BYTE PTR ds:0xc0023d20,0x2
c0000bcd:	74 0d                	je     c0000bdc <dlfree+0xf1>
c0000bcf:	5b                   	pop    ebx
c0000bd0:	b8 20 3d 02 c0       	mov    eax,0xc0023d20
c0000bd5:	5e                   	pop    esi
c0000bd6:	5f                   	pop    edi
c0000bd7:	e9 28 fe ff ff       	jmp    c0000a04 <malloc_consolidate>
c0000bdc:	5b                   	pop    ebx
c0000bdd:	5e                   	pop    esi
c0000bde:	5f                   	pop    edi
c0000bdf:	c3                   	ret    

c0000be0 <sYSMALLOc>:
c0000be0:	55                   	push   ebp
c0000be1:	57                   	push   edi
c0000be2:	56                   	push   esi
c0000be3:	53                   	push   ebx
c0000be4:	89 d3                	mov    ebx,edx
c0000be6:	83 ec 2c             	sub    esp,0x2c
c0000be9:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000bef:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000bf2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000bf6:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000bf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000bfd:	74 1f                	je     c0000c1e <sYSMALLOc+0x3e>
c0000bff:	89 d0                	mov    eax,edx
c0000c01:	e8 fe fd ff ff       	call   c0000a04 <malloc_consolidate>
c0000c06:	83 ec 0c             	sub    esp,0xc
c0000c09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000c0d:	83 e8 07             	sub    eax,0x7
c0000c10:	50                   	push   eax
c0000c11:	e8 33 02 00 00       	call   c0000e49 <dlmalloc>
c0000c16:	83 c4 10             	add    esp,0x10
c0000c19:	e9 23 02 00 00       	jmp    c0000e41 <sYSMALLOc+0x261>
c0000c1e:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000c21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000c25:	83 c0 10             	add    eax,0x10
c0000c28:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000c2e:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000c31:	01 c2                	add    edx,eax
c0000c33:	83 e5 fc             	and    ebp,0xfffffffc
c0000c36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000c3a:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c41:	74 02                	je     c0000c45 <sYSMALLOc+0x65>
c0000c43:	29 ea                	sub    edx,ebp
c0000c45:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000c49:	f7 d9                	neg    ecx
c0000c4b:	21 ca                	and    edx,ecx
c0000c4d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000c51:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000c55:	7f 07                	jg     c0000c5e <sYSMALLOc+0x7e>
c0000c57:	31 c0                	xor    eax,eax
c0000c59:	e9 e3 01 00 00       	jmp    c0000e41 <sYSMALLOc+0x261>
c0000c5e:	83 ec 0c             	sub    esp,0xc
c0000c61:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c65:	e8 0b b1 00 00       	call   c000bd75 <sbrk>
c0000c6a:	83 c4 10             	add    esp,0x10
c0000c6d:	89 c6                	mov    esi,eax
c0000c6f:	83 f8 ff             	cmp    eax,0xffffffff
c0000c72:	74 e3                	je     c0000c57 <sYSMALLOc+0x77>
c0000c74:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000c78:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000c7b:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000c81:	39 c2                	cmp    edx,eax
c0000c83:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000c89:	75 11                	jne    c0000c9c <sYSMALLOc+0xbc>
c0000c8b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c8f:	01 e8                	add    eax,ebp
c0000c91:	83 c8 01             	or     eax,0x1
c0000c94:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000c97:	e9 93 00 00 00       	jmp    c0000d2f <sYSMALLOc+0x14f>
c0000c9c:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000ca2:	a8 01                	test   al,0x1
c0000ca4:	0f 84 73 01 00 00    	je     c0000e1d <sYSMALLOc+0x23d>
c0000caa:	85 ed                	test   ebp,ebp
c0000cac:	74 12                	je     c0000cc0 <sYSMALLOc+0xe0>
c0000cae:	39 f2                	cmp    edx,esi
c0000cb0:	76 0e                	jbe    c0000cc0 <sYSMALLOc+0xe0>
c0000cb2:	83 e0 fe             	and    eax,0xfffffffe
c0000cb5:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000cbb:	e9 5d 01 00 00       	jmp    c0000e1d <sYSMALLOc+0x23d>
c0000cc0:	85 ed                	test   ebp,ebp
c0000cc2:	74 0c                	je     c0000cd0 <sYSMALLOc+0xf0>
c0000cc4:	89 f0                	mov    eax,esi
c0000cc6:	29 d0                	sub    eax,edx
c0000cc8:	01 c1                	add    ecx,eax
c0000cca:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000cd0:	89 f2                	mov    edx,esi
c0000cd2:	83 e2 07             	and    edx,0x7
c0000cd5:	0f 84 b1 00 00 00    	je     c0000d8c <sYSMALLOc+0x1ac>
c0000cdb:	b8 08 00 00 00       	mov    eax,0x8
c0000ce0:	29 d0                	sub    eax,edx
c0000ce2:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000ce5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000ce9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ced:	01 e8                	add    eax,ebp
c0000cef:	83 ec 0c             	sub    esp,0xc
c0000cf2:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000cf5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000cf9:	01 f2                	add    edx,esi
c0000cfb:	01 d1                	add    ecx,edx
c0000cfd:	29 d0                	sub    eax,edx
c0000cff:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000d03:	01 c1                	add    ecx,eax
c0000d05:	51                   	push   ecx
c0000d06:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000d0a:	e8 66 b0 00 00       	call   c000bd75 <sbrk>
c0000d0f:	83 c4 10             	add    esp,0x10
c0000d12:	83 f8 ff             	cmp    eax,0xffffffff
c0000d15:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000d19:	75 7c                	jne    c0000d97 <sYSMALLOc+0x1b7>
c0000d1b:	83 ec 0c             	sub    esp,0xc
c0000d1e:	6a 00                	push   0x0
c0000d20:	e8 50 b0 00 00       	call   c000bd75 <sbrk>
c0000d25:	83 c4 10             	add    esp,0x10
c0000d28:	31 c9                	xor    ecx,ecx
c0000d2a:	83 f8 ff             	cmp    eax,0xffffffff
c0000d2d:	75 7e                	jne    c0000dad <sYSMALLOc+0x1cd>
c0000d2f:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000d35:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000d3b:	73 06                	jae    c0000d43 <sYSMALLOc+0x163>
c0000d3d:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000d43:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000d49:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000d4f:	73 06                	jae    c0000d57 <sYSMALLOc+0x177>
c0000d51:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000d57:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000d5a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000d5d:	83 e2 fc             	and    edx,0xfffffffc
c0000d60:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000d64:	0f 87 ed fe ff ff    	ja     c0000c57 <sYSMALLOc+0x77>
c0000d6a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000d6e:	29 fa                	sub    edx,edi
c0000d70:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000d73:	83 ca 01             	or     edx,0x1
c0000d76:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000d79:	89 fb                	mov    ebx,edi
c0000d7b:	83 cb 01             	or     ebx,0x1
c0000d7e:	83 c0 08             	add    eax,0x8
c0000d81:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000d84:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000d87:	e9 b5 00 00 00       	jmp    c0000e41 <sYSMALLOc+0x261>
c0000d8c:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000d90:	31 c0                	xor    eax,eax
c0000d92:	e9 52 ff ff ff       	jmp    c0000ce9 <sYSMALLOc+0x109>
c0000d97:	39 c6                	cmp    esi,eax
c0000d99:	76 12                	jbe    c0000dad <sYSMALLOc+0x1cd>
c0000d9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d9f:	01 f0                	add    eax,esi
c0000da1:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000da8:	e9 7b ff ff ff       	jmp    c0000d28 <sYSMALLOc+0x148>
c0000dad:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000db1:	29 f0                	sub    eax,esi
c0000db3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0000db6:	01 c8                	add    eax,ecx
c0000db8:	83 c8 01             	or     eax,0x1
c0000dbb:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0000dbe:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0000dc4:	85 ed                	test   ebp,ebp
c0000dc6:	0f 84 63 ff ff ff    	je     c0000d2f <sYSMALLOc+0x14f>
c0000dcc:	8d 45 f4             	lea    eax,[ebp-0xc]
c0000dcf:	83 e0 f8             	and    eax,0xfffffff8
c0000dd2:	89 c2                	mov    edx,eax
c0000dd4:	83 ca 01             	or     edx,0x1
c0000dd7:	83 f8 0f             	cmp    eax,0xf
c0000dda:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000ddd:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000de5:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000ded:	0f 86 3c ff ff ff    	jbe    c0000d2f <sYSMALLOc+0x14f>
c0000df3:	83 ec 0c             	sub    esp,0xc
c0000df6:	83 c7 08             	add    edi,0x8
c0000df9:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dff:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000e09:	57                   	push   edi
c0000e0a:	e8 dc fc ff ff       	call   c0000aeb <dlfree>
c0000e0f:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000e15:	83 c4 10             	add    esp,0x10
c0000e18:	e9 12 ff ff ff       	jmp    c0000d2f <sYSMALLOc+0x14f>
c0000e1d:	83 ec 0c             	sub    esp,0xc
c0000e20:	6a 00                	push   0x0
c0000e22:	e8 4e af 00 00       	call   c000bd75 <sbrk>
c0000e27:	89 c2                	mov    edx,eax
c0000e29:	29 f2                	sub    edx,esi
c0000e2b:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000e2f:	83 c4 10             	add    esp,0x10
c0000e32:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000e38:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000e3c:	e9 e7 fe ff ff       	jmp    c0000d28 <sYSMALLOc+0x148>
c0000e41:	83 c4 2c             	add    esp,0x2c
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	5d                   	pop    ebp
c0000e48:	c3                   	ret    

c0000e49 <dlmalloc>:
c0000e49:	55                   	push   ebp
c0000e4a:	57                   	push   edi
c0000e4b:	56                   	push   esi
c0000e4c:	53                   	push   ebx
c0000e4d:	83 ec 1c             	sub    esp,0x1c
c0000e50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e54:	83 f8 df             	cmp    eax,0xffffffdf
c0000e57:	0f 87 70 03 00 00    	ja     c00011cd <dlmalloc+0x384>
c0000e5d:	83 c0 0b             	add    eax,0xb
c0000e60:	be 10 00 00 00       	mov    esi,0x10
c0000e65:	83 f8 0f             	cmp    eax,0xf
c0000e68:	76 05                	jbe    c0000e6f <dlmalloc+0x26>
c0000e6a:	83 e0 f8             	and    eax,0xfffffff8
c0000e6d:	89 c6                	mov    esi,eax
c0000e6f:	8b 3d 20 3d 02 c0    	mov    edi,DWORD PTR ds:0xc0023d20
c0000e75:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e7b:	75 17                	jne    c0000e94 <dlmalloc+0x4b>
c0000e7d:	85 ff                	test   edi,edi
c0000e7f:	0f 85 05 03 00 00    	jne    c000118a <dlmalloc+0x341>
c0000e85:	b8 20 3d 02 c0       	mov    eax,0xc0023d20
c0000e8a:	e8 75 fb ff ff       	call   c0000a04 <malloc_consolidate>
c0000e8f:	e9 f6 02 00 00       	jmp    c000118a <dlmalloc+0x341>
c0000e94:	39 f7                	cmp    edi,esi
c0000e96:	72 1f                	jb     c0000eb7 <dlmalloc+0x6e>
c0000e98:	89 f2                	mov    edx,esi
c0000e9a:	c1 ea 03             	shr    edx,0x3
c0000e9d:	83 ea 02             	sub    edx,0x2
c0000ea0:	8b 04 95 24 3d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc2dc]
c0000ea7:	85 c0                	test   eax,eax
c0000ea9:	74 0c                	je     c0000eb7 <dlmalloc+0x6e>
c0000eab:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000eae:	89 0c 95 24 3d 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc2dc],ecx
c0000eb5:	eb 30                	jmp    c0000ee7 <dlmalloc+0x9e>
c0000eb7:	89 f0                	mov    eax,esi
c0000eb9:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000ebf:	77 2e                	ja     c0000eef <dlmalloc+0xa6>
c0000ec1:	c1 e8 03             	shr    eax,0x3
c0000ec4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ec8:	8d 14 c5 54 3d 02 c0 	lea    edx,[eax*8-0x3ffdc2ac]
c0000ecf:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000ed2:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000ed5:	39 c3                	cmp    ebx,eax
c0000ed7:	74 2e                	je     c0000f07 <dlmalloc+0xbe>
c0000ed9:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000edc:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000ee1:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ee4:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000ee7:	83 c0 08             	add    eax,0x8
c0000eea:	e9 e0 02 00 00       	jmp    c00011cf <dlmalloc+0x386>
c0000eef:	e8 8c fa ff ff       	call   c0000980 <largebin_index>
c0000ef4:	83 e7 02             	and    edi,0x2
c0000ef7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000efb:	74 0a                	je     c0000f07 <dlmalloc+0xbe>
c0000efd:	b8 20 3d 02 c0       	mov    eax,0xc0023d20
c0000f02:	e8 fd fa ff ff       	call   c0000a04 <malloc_consolidate>
c0000f07:	8d 46 10             	lea    eax,[esi+0x10]
c0000f0a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f0e:	8b 1d 60 3d 02 c0    	mov    ebx,DWORD PTR ds:0xc0023d60
c0000f14:	81 fb 54 3d 02 c0    	cmp    ebx,0xc0023d54
c0000f1a:	0f 84 13 01 00 00    	je     c0001033 <dlmalloc+0x1ea>
c0000f20:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f23:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f26:	83 e7 fc             	and    edi,0xfffffffc
c0000f29:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2f:	77 4c                	ja     c0000f7d <dlmalloc+0x134>
c0000f31:	3d 54 3d 02 c0       	cmp    eax,0xc0023d54
c0000f36:	75 45                	jne    c0000f7d <dlmalloc+0x134>
c0000f38:	39 1d 50 3d 02 c0    	cmp    DWORD PTR ds:0xc0023d50,ebx
c0000f3e:	75 3d                	jne    c0000f7d <dlmalloc+0x134>
c0000f40:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f44:	73 37                	jae    c0000f7d <dlmalloc+0x134>
c0000f46:	89 fa                	mov    edx,edi
c0000f48:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f4b:	29 f2                	sub    edx,esi
c0000f4d:	83 ce 01             	or     esi,0x1
c0000f50:	89 d1                	mov    ecx,edx
c0000f52:	a3 5c 3d 02 c0       	mov    ds:0xc0023d5c,eax
c0000f57:	83 c9 01             	or     ecx,0x1
c0000f5a:	a3 60 3d 02 c0       	mov    ds:0xc0023d60,eax
c0000f5f:	a3 50 3d 02 c0       	mov    ds:0xc0023d50,eax
c0000f64:	c7 40 08 54 3d 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023d54
c0000f6b:	c7 40 0c 54 3d 02 c0 	mov    DWORD PTR [eax+0xc],0xc0023d54
c0000f72:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f75:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f78:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f7b:	eb 15                	jmp    c0000f92 <dlmalloc+0x149>
c0000f7d:	a3 60 3d 02 c0       	mov    ds:0xc0023d60,eax
c0000f82:	39 fe                	cmp    esi,edi
c0000f84:	c7 40 08 54 3d 02 c0 	mov    DWORD PTR [eax+0x8],0xc0023d54
c0000f8b:	75 0d                	jne    c0000f9a <dlmalloc+0x151>
c0000f8d:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f92:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f95:	e9 35 02 00 00       	jmp    c00011cf <dlmalloc+0x386>
c0000f9a:	89 f8                	mov    eax,edi
c0000f9c:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000fa2:	77 19                	ja     c0000fbd <dlmalloc+0x174>
c0000fa4:	c1 e8 03             	shr    eax,0x3
c0000fa7:	8d 14 00             	lea    edx,[eax+eax*1]
c0000faa:	83 c2 0d             	add    edx,0xd
c0000fad:	8d 2c 95 18 3d 02 c0 	lea    ebp,[edx*4-0x3ffdc2e8]
c0000fb4:	8b 14 95 20 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc2e0]
c0000fbb:	eb 46                	jmp    c0001003 <dlmalloc+0x1ba>
c0000fbd:	e8 be f9 ff ff       	call   c0000980 <largebin_index>
c0000fc2:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fc5:	83 c2 0d             	add    edx,0xd
c0000fc8:	8d 0c 95 20 3d 02 c0 	lea    ecx,[edx*4-0x3ffdc2e0]
c0000fcf:	8b 14 95 20 3d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc2e0]
c0000fd6:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fd9:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fdd:	89 d5                	mov    ebp,edx
c0000fdf:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000fe3:	74 1e                	je     c0001003 <dlmalloc+0x1ba>
c0000fe5:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000fe8:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000feb:	77 12                	ja     c0000fff <dlmalloc+0x1b6>
c0000fed:	83 cf 01             	or     edi,0x1
c0000ff0:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000ff3:	76 05                	jbe    c0000ffa <dlmalloc+0x1b1>
c0000ff5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0000ff8:	eb f6                	jmp    c0000ff0 <dlmalloc+0x1a7>
c0000ffa:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0000ffd:	eb 04                	jmp    c0001003 <dlmalloc+0x1ba>
c0000fff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001003:	89 c7                	mov    edi,eax
c0001005:	88 c1                	mov    cl,al
c0001007:	c1 ff 05             	sar    edi,0x5
c000100a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000100e:	bf 01 00 00 00       	mov    edi,0x1
c0001013:	d3 e7                	shl    edi,cl
c0001015:	89 f8                	mov    eax,edi
c0001017:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000101b:	09 04 bd 54 40 02 c0 	or     DWORD PTR [edi*4-0x3ffdbfac],eax
c0001022:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001025:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001028:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000102b:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c000102e:	e9 db fe ff ff       	jmp    c0000f0e <dlmalloc+0xc5>
c0001033:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001039:	76 78                	jbe    c00010b3 <dlmalloc+0x26a>
c000103b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000103f:	8d 04 c5 54 3d 02 c0 	lea    eax,[eax*8-0x3ffdc2ac]
c0001046:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001049:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000104c:	39 ca                	cmp    edx,ecx
c000104e:	74 63                	je     c00010b3 <dlmalloc+0x26a>
c0001050:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001053:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001056:	83 e3 fc             	and    ebx,0xfffffffc
c0001059:	39 de                	cmp    esi,ebx
c000105b:	77 52                	ja     c00010af <dlmalloc+0x266>
c000105d:	89 df                	mov    edi,ebx
c000105f:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001062:	29 f7                	sub    edi,esi
c0001064:	01 d3                	add    ebx,edx
c0001066:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001069:	83 ff 0f             	cmp    edi,0xf
c000106c:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000106f:	8d 42 08             	lea    eax,[edx+0x8]
c0001072:	77 09                	ja     c000107d <dlmalloc+0x234>
c0001074:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001078:	e9 52 01 00 00       	jmp    c00011cf <dlmalloc+0x386>
c000107d:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001080:	83 ce 01             	or     esi,0x1
c0001083:	89 0d 5c 3d 02 c0    	mov    DWORD PTR ds:0xc0023d5c,ecx
c0001089:	89 0d 60 3d 02 c0    	mov    DWORD PTR ds:0xc0023d60,ecx
c000108f:	c7 41 08 54 3d 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0023d54
c0001096:	c7 41 0c 54 3d 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0023d54
c000109d:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c00010a0:	89 fa                	mov    edx,edi
c00010a2:	83 ca 01             	or     edx,0x1
c00010a5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a8:	89 3b                	mov    DWORD PTR [ebx],edi
c00010aa:	e9 20 01 00 00       	jmp    c00011cf <dlmalloc+0x386>
c00010af:	89 c2                	mov    edx,eax
c00010b1:	eb 99                	jmp    c000104c <dlmalloc+0x203>
c00010b3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010b7:	b8 01 00 00 00       	mov    eax,0x1
c00010bc:	41                   	inc    ecx
c00010bd:	89 cb                	mov    ebx,ecx
c00010bf:	c1 eb 05             	shr    ebx,0x5
c00010c2:	8d 14 cd 4c 3d 02 c0 	lea    edx,[ecx*8-0x3ffdc2b4]
c00010c9:	d3 e0                	shl    eax,cl
c00010cb:	8b 3c 9d 54 40 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbfac]
c00010d2:	39 f8                	cmp    eax,edi
c00010d4:	77 04                	ja     c00010da <dlmalloc+0x291>
c00010d6:	85 c0                	test   eax,eax
c00010d8:	75 26                	jne    c0001100 <dlmalloc+0x2b7>
c00010da:	43                   	inc    ebx
c00010db:	83 fb 02             	cmp    ebx,0x2
c00010de:	0f 87 a6 00 00 00    	ja     c000118a <dlmalloc+0x341>
c00010e4:	8b 3c 9d 54 40 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdbfac]
c00010eb:	85 ff                	test   edi,edi
c00010ed:	74 eb                	je     c00010da <dlmalloc+0x291>
c00010ef:	89 d8                	mov    eax,ebx
c00010f1:	c1 e0 06             	shl    eax,0x6
c00010f4:	8d 14 85 4c 3d 02 c0 	lea    edx,[eax*4-0x3ffdc2b4]
c00010fb:	b8 01 00 00 00       	mov    eax,0x1
c0001100:	85 f8                	test   eax,edi
c0001102:	75 07                	jne    c000110b <dlmalloc+0x2c2>
c0001104:	83 c2 08             	add    edx,0x8
c0001107:	01 c0                	add    eax,eax
c0001109:	eb f5                	jmp    c0001100 <dlmalloc+0x2b7>
c000110b:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c000110e:	39 ca                	cmp    edx,ecx
c0001110:	75 14                	jne    c0001126 <dlmalloc+0x2dd>
c0001112:	89 c1                	mov    ecx,eax
c0001114:	83 c2 08             	add    edx,0x8
c0001117:	f7 d1                	not    ecx
c0001119:	21 cf                	and    edi,ecx
c000111b:	01 c0                	add    eax,eax
c000111d:	89 3c 9d 54 40 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdbfac],edi
c0001124:	eb ac                	jmp    c00010d2 <dlmalloc+0x289>
c0001126:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001129:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000112c:	83 e0 fc             	and    eax,0xfffffffc
c000112f:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001132:	89 c3                	mov    ebx,eax
c0001134:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001137:	29 f3                	sub    ebx,esi
c0001139:	8d 14 01             	lea    edx,[ecx+eax*1]
c000113c:	83 fb 0f             	cmp    ebx,0xf
c000113f:	8d 41 08             	lea    eax,[ecx+0x8]
c0001142:	77 09                	ja     c000114d <dlmalloc+0x304>
c0001144:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001148:	e9 82 00 00 00       	jmp    c00011cf <dlmalloc+0x386>
c000114d:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001150:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001156:	89 3d 5c 3d 02 c0    	mov    DWORD PTR ds:0xc0023d5c,edi
c000115c:	89 3d 60 3d 02 c0    	mov    DWORD PTR ds:0xc0023d60,edi
c0001162:	c7 47 08 54 3d 02 c0 	mov    DWORD PTR [edi+0x8],0xc0023d54
c0001169:	c7 47 0c 54 3d 02 c0 	mov    DWORD PTR [edi+0xc],0xc0023d54
c0001170:	77 06                	ja     c0001178 <dlmalloc+0x32f>
c0001172:	89 3d 50 3d 02 c0    	mov    DWORD PTR ds:0xc0023d50,edi
c0001178:	83 ce 01             	or     esi,0x1
c000117b:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000117e:	89 d9                	mov    ecx,ebx
c0001180:	83 c9 01             	or     ecx,0x1
c0001183:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001186:	89 1a                	mov    DWORD PTR [edx],ebx
c0001188:	eb 45                	jmp    c00011cf <dlmalloc+0x386>
c000118a:	a1 4c 3d 02 c0       	mov    eax,ds:0xc0023d4c
c000118f:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001192:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001195:	83 e2 fc             	and    edx,0xfffffffc
c0001198:	39 d1                	cmp    ecx,edx
c000119a:	77 1e                	ja     c00011ba <dlmalloc+0x371>
c000119c:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000119f:	89 f3                	mov    ebx,esi
c00011a1:	29 f2                	sub    edx,esi
c00011a3:	83 cb 01             	or     ebx,0x1
c00011a6:	83 ca 01             	or     edx,0x1
c00011a9:	89 0d 4c 3d 02 c0    	mov    DWORD PTR ds:0xc0023d4c,ecx
c00011af:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011b2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011b5:	e9 2d fd ff ff       	jmp    c0000ee7 <dlmalloc+0x9e>
c00011ba:	83 c4 1c             	add    esp,0x1c
c00011bd:	89 f0                	mov    eax,esi
c00011bf:	ba 20 3d 02 c0       	mov    edx,0xc0023d20
c00011c4:	5b                   	pop    ebx
c00011c5:	5e                   	pop    esi
c00011c6:	5f                   	pop    edi
c00011c7:	5d                   	pop    ebp
c00011c8:	e9 13 fa ff ff       	jmp    c0000be0 <sYSMALLOc>
c00011cd:	31 c0                	xor    eax,eax
c00011cf:	83 c4 1c             	add    esp,0x1c
c00011d2:	5b                   	pop    ebx
c00011d3:	5e                   	pop    esi
c00011d4:	5f                   	pop    edi
c00011d5:	5d                   	pop    ebp
c00011d6:	c3                   	ret    

c00011d7 <iALLOc>:
c00011d7:	55                   	push   ebp
c00011d8:	89 c5                	mov    ebp,eax
c00011da:	57                   	push   edi
c00011db:	56                   	push   esi
c00011dc:	53                   	push   ebx
c00011dd:	83 ec 2c             	sub    esp,0x2c
c00011e0:	83 3d 20 3d 02 c0 00 	cmp    DWORD PTR ds:0xc0023d20,0x0
c00011e7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011eb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011f3:	75 12                	jne    c0001207 <iALLOc+0x30>
c00011f5:	b8 20 3d 02 c0       	mov    eax,0xc0023d20
c00011fa:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00011fe:	e8 01 f8 ff ff       	call   c0000a04 <malloc_consolidate>
c0001203:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001207:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000120c:	74 12                	je     c0001220 <iALLOc+0x49>
c000120e:	85 ed                	test   ebp,ebp
c0001210:	0f 84 64 01 00 00    	je     c000137a <iALLOc+0x1a3>
c0001216:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000121e:	eb 33                	jmp    c0001253 <iALLOc+0x7c>
c0001220:	85 ed                	test   ebp,ebp
c0001222:	75 14                	jne    c0001238 <iALLOc+0x61>
c0001224:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000122c:	83 c4 2c             	add    esp,0x2c
c000122f:	5b                   	pop    ebx
c0001230:	5e                   	pop    esi
c0001231:	5f                   	pop    edi
c0001232:	5d                   	pop    ebp
c0001233:	e9 11 fc ff ff       	jmp    c0000e49 <dlmalloc>
c0001238:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000123f:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001247:	83 f8 0f             	cmp    eax,0xf
c000124a:	76 07                	jbe    c0001253 <iALLOc+0x7c>
c000124c:	83 e0 f8             	and    eax,0xfffffff8
c000124f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001253:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001258:	75 09                	jne    c0001263 <iALLOc+0x8c>
c000125a:	89 d0                	mov    eax,edx
c000125c:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000125f:	31 f6                	xor    esi,esi
c0001261:	eb 3b                	jmp    c000129e <iALLOc+0xc7>
c0001263:	8b 02                	mov    eax,DWORD PTR [edx]
c0001265:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000126d:	83 c0 0b             	add    eax,0xb
c0001270:	83 f8 0f             	cmp    eax,0xf
c0001273:	76 07                	jbe    c000127c <iALLOc+0xa5>
c0001275:	83 e0 f8             	and    eax,0xfffffff8
c0001278:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000127c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001280:	0f af f5             	imul   esi,ebp
c0001283:	eb 25                	jmp    c00012aa <iALLOc+0xd3>
c0001285:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001287:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000128a:	bb 10 00 00 00       	mov    ebx,0x10
c000128f:	83 f9 0f             	cmp    ecx,0xf
c0001292:	76 05                	jbe    c0001299 <iALLOc+0xc2>
c0001294:	83 e1 f8             	and    ecx,0xfffffff8
c0001297:	89 cb                	mov    ebx,ecx
c0001299:	01 de                	add    esi,ebx
c000129b:	83 c0 04             	add    eax,0x4
c000129e:	39 c7                	cmp    edi,eax
c00012a0:	75 e3                	jne    c0001285 <iALLOc+0xae>
c00012a2:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012aa:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012ae:	83 ec 0c             	sub    esp,0xc
c00012b1:	8b 1d 74 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024074
c00012b7:	c7 05 74 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024074,0x0
c00012c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012c5:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012c9:	50                   	push   eax
c00012ca:	e8 7a fb ff ff       	call   c0000e49 <dlmalloc>
c00012cf:	83 c4 10             	add    esp,0x10
c00012d2:	89 1d 74 40 02 c0    	mov    DWORD PTR ds:0xc0024074,ebx
c00012d8:	85 c0                	test   eax,eax
c00012da:	0f 84 92 00 00 00    	je     c0001372 <iALLOc+0x19b>
c00012e0:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012e3:	8d 78 f8             	lea    edi,[eax-0x8]
c00012e6:	83 e3 fc             	and    ebx,0xfffffffc
c00012e9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012ed:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012f2:	74 1e                	je     c0001312 <iALLOc+0x13b>
c00012f4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00012f8:	89 d9                	mov    ecx,ebx
c00012fa:	52                   	push   edx
c00012fb:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00012ff:	83 e9 04             	sub    ecx,0x4
c0001302:	51                   	push   ecx
c0001303:	6a 00                	push   0x0
c0001305:	50                   	push   eax
c0001306:	e8 fd f2 ff ff       	call   c0000608 <memset>
c000130b:	83 c4 10             	add    esp,0x10
c000130e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001312:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001317:	75 14                	jne    c000132d <iALLOc+0x156>
c0001319:	8d 04 37             	lea    eax,[edi+esi*1]
c000131c:	29 f3                	sub    ebx,esi
c000131e:	83 cb 01             	or     ebx,0x1
c0001321:	8d 48 08             	lea    ecx,[eax+0x8]
c0001324:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001327:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000132b:	89 f3                	mov    ebx,esi
c000132d:	31 c0                	xor    eax,eax
c000132f:	4d                   	dec    ebp
c0001330:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001334:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001337:	39 c5                	cmp    ebp,eax
c0001339:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000133c:	74 2c                	je     c000136a <iALLOc+0x193>
c000133e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001342:	85 c9                	test   ecx,ecx
c0001344:	75 15                	jne    c000135b <iALLOc+0x184>
c0001346:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001349:	8d 71 0b             	lea    esi,[ecx+0xb]
c000134c:	b9 10 00 00 00       	mov    ecx,0x10
c0001351:	83 fe 0f             	cmp    esi,0xf
c0001354:	76 05                	jbe    c000135b <iALLOc+0x184>
c0001356:	83 e6 f8             	and    esi,0xfffffff8
c0001359:	89 f1                	mov    ecx,esi
c000135b:	89 ce                	mov    esi,ecx
c000135d:	29 cb                	sub    ebx,ecx
c000135f:	83 ce 01             	or     esi,0x1
c0001362:	40                   	inc    eax
c0001363:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001366:	01 cf                	add    edi,ecx
c0001368:	eb c6                	jmp    c0001330 <iALLOc+0x159>
c000136a:	83 cb 01             	or     ebx,0x1
c000136d:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001370:	eb 08                	jmp    c000137a <iALLOc+0x1a3>
c0001372:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000137a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000137e:	83 c4 2c             	add    esp,0x2c
c0001381:	5b                   	pop    ebx
c0001382:	5e                   	pop    esi
c0001383:	5f                   	pop    edi
c0001384:	5d                   	pop    ebp
c0001385:	c3                   	ret    

c0001386 <dlrealloc>:
c0001386:	55                   	push   ebp
c0001387:	57                   	push   edi
c0001388:	56                   	push   esi
c0001389:	53                   	push   ebx
c000138a:	83 ec 1c             	sub    esp,0x1c
c000138d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001391:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001395:	85 db                	test   ebx,ebx
c0001397:	75 10                	jne    c00013a9 <dlrealloc+0x23>
c0001399:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000139d:	83 c4 1c             	add    esp,0x1c
c00013a0:	5b                   	pop    ebx
c00013a1:	5e                   	pop    esi
c00013a2:	5f                   	pop    edi
c00013a3:	5d                   	pop    ebp
c00013a4:	e9 a0 fa ff ff       	jmp    c0000e49 <dlmalloc>
c00013a9:	83 f8 df             	cmp    eax,0xffffffdf
c00013ac:	76 07                	jbe    c00013b5 <dlrealloc+0x2f>
c00013ae:	31 db                	xor    ebx,ebx
c00013b0:	e9 7c 01 00 00       	jmp    c0001531 <dlrealloc+0x1ab>
c00013b5:	83 c0 0b             	add    eax,0xb
c00013b8:	bf 10 00 00 00       	mov    edi,0x10
c00013bd:	83 f8 0f             	cmp    eax,0xf
c00013c0:	76 05                	jbe    c00013c7 <dlrealloc+0x41>
c00013c2:	83 e0 f8             	and    eax,0xfffffff8
c00013c5:	89 c7                	mov    edi,eax
c00013c7:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013ca:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00013cd:	89 c6                	mov    esi,eax
c00013cf:	83 e6 fc             	and    esi,0xfffffffc
c00013d2:	a8 02                	test   al,0x2
c00013d4:	75 d8                	jne    c00013ae <dlrealloc+0x28>
c00013d6:	39 f7                	cmp    edi,esi
c00013d8:	0f 86 15 01 00 00    	jbe    c00014f3 <dlrealloc+0x16d>
c00013de:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00013e2:	39 15 4c 3d 02 c0    	cmp    DWORD PTR ds:0xc0023d4c,edx
c00013e8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013eb:	75 33                	jne    c0001420 <dlrealloc+0x9a>
c00013ed:	83 e1 fc             	and    ecx,0xfffffffc
c00013f0:	01 f1                	add    ecx,esi
c00013f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f6:	8d 4f 10             	lea    ecx,[edi+0x10]
c00013f9:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00013fd:	77 49                	ja     c0001448 <dlrealloc+0xc2>
c00013ff:	83 e0 01             	and    eax,0x1
c0001402:	01 fd                	add    ebp,edi
c0001404:	09 f8                	or     eax,edi
c0001406:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000140d:	29 f8                	sub    eax,edi
c000140f:	89 2d 4c 3d 02 c0    	mov    DWORD PTR ds:0xc0023d4c,ebp
c0001415:	83 c8 01             	or     eax,0x1
c0001418:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000141b:	e9 11 01 00 00       	jmp    c0001531 <dlrealloc+0x1ab>
c0001420:	89 c8                	mov    eax,ecx
c0001422:	83 e0 fe             	and    eax,0xfffffffe
c0001425:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000142a:	75 1c                	jne    c0001448 <dlrealloc+0xc2>
c000142c:	83 e1 fc             	and    ecx,0xfffffffc
c000142f:	01 f1                	add    ecx,esi
c0001431:	39 cf                	cmp    edi,ecx
c0001433:	77 13                	ja     c0001448 <dlrealloc+0xc2>
c0001435:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001438:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000143b:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000143e:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001441:	89 ce                	mov    esi,ecx
c0001443:	e9 ab 00 00 00       	jmp    c00014f3 <dlrealloc+0x16d>
c0001448:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000144c:	83 ec 0c             	sub    esp,0xc
c000144f:	8d 47 f9             	lea    eax,[edi-0x7]
c0001452:	50                   	push   eax
c0001453:	e8 f1 f9 ff ff       	call   c0000e49 <dlmalloc>
c0001458:	83 c4 10             	add    esp,0x10
c000145b:	89 c1                	mov    ecx,eax
c000145d:	85 c0                	test   eax,eax
c000145f:	0f 84 49 ff ff ff    	je     c00013ae <dlrealloc+0x28>
c0001465:	8d 40 f8             	lea    eax,[eax-0x8]
c0001468:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000146c:	39 c2                	cmp    edx,eax
c000146e:	75 0a                	jne    c000147a <dlrealloc+0xf4>
c0001470:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001473:	83 e0 fc             	and    eax,0xfffffffc
c0001476:	01 c6                	add    esi,eax
c0001478:	eb 79                	jmp    c00014f3 <dlrealloc+0x16d>
c000147a:	83 ee 04             	sub    esi,0x4
c000147d:	83 fe 27             	cmp    esi,0x27
c0001480:	76 16                	jbe    c0001498 <dlrealloc+0x112>
c0001482:	50                   	push   eax
c0001483:	56                   	push   esi
c0001484:	53                   	push   ebx
c0001485:	51                   	push   ecx
c0001486:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000148a:	e8 43 f1 ff ff       	call   c00005d2 <memcpy>
c000148f:	83 c4 10             	add    esp,0x10
c0001492:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001496:	eb 43                	jmp    c00014db <dlrealloc+0x155>
c0001498:	8b 03                	mov    eax,DWORD PTR [ebx]
c000149a:	83 fe 13             	cmp    esi,0x13
c000149d:	89 01                	mov    DWORD PTR [ecx],eax
c000149f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00014a2:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c00014a5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00014a8:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00014ab:	76 2e                	jbe    c00014db <dlrealloc+0x155>
c00014ad:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014b0:	83 fe 1b             	cmp    esi,0x1b
c00014b3:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00014b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00014b9:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00014bc:	76 1d                	jbe    c00014db <dlrealloc+0x155>
c00014be:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00014c1:	83 fe 23             	cmp    esi,0x23
c00014c4:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00014c7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00014ca:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00014cd:	76 0c                	jbe    c00014db <dlrealloc+0x155>
c00014cf:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00014d2:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00014d5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00014d8:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00014db:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014df:	83 ec 0c             	sub    esp,0xc
c00014e2:	53                   	push   ebx
c00014e3:	e8 03 f6 ff ff       	call   c0000aeb <dlfree>
c00014e8:	83 c4 10             	add    esp,0x10
c00014eb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00014ef:	89 cb                	mov    ebx,ecx
c00014f1:	eb 3e                	jmp    c0001531 <dlrealloc+0x1ab>
c00014f3:	89 f2                	mov    edx,esi
c00014f5:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00014f8:	29 fa                	sub    edx,edi
c00014fa:	83 e1 01             	and    ecx,0x1
c00014fd:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c0001501:	83 fa 0f             	cmp    edx,0xf
c0001504:	77 0b                	ja     c0001511 <dlrealloc+0x18b>
c0001506:	09 ce                	or     esi,ecx
c0001508:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000150b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000150f:	eb 20                	jmp    c0001531 <dlrealloc+0x1ab>
c0001511:	01 fd                	add    ebp,edi
c0001513:	83 ca 01             	or     edx,0x1
c0001516:	09 cf                	or     edi,ecx
c0001518:	83 ec 0c             	sub    esp,0xc
c000151b:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c000151e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0001521:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001525:	83 c5 08             	add    ebp,0x8
c0001528:	55                   	push   ebp
c0001529:	e8 bd f5 ff ff       	call   c0000aeb <dlfree>
c000152e:	83 c4 10             	add    esp,0x10
c0001531:	83 c4 1c             	add    esp,0x1c
c0001534:	89 d8                	mov    eax,ebx
c0001536:	5b                   	pop    ebx
c0001537:	5e                   	pop    esi
c0001538:	5f                   	pop    edi
c0001539:	5d                   	pop    ebp
c000153a:	c3                   	ret    

c000153b <dlmemalign>:
c000153b:	55                   	push   ebp
c000153c:	57                   	push   edi
c000153d:	56                   	push   esi
c000153e:	53                   	push   ebx
c000153f:	83 ec 0c             	sub    esp,0xc
c0001542:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001546:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000154a:	83 fa 08             	cmp    edx,0x8
c000154d:	77 10                	ja     c000155f <dlmemalign+0x24>
c000154f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001553:	83 c4 0c             	add    esp,0xc
c0001556:	5b                   	pop    ebx
c0001557:	5e                   	pop    esi
c0001558:	5f                   	pop    edi
c0001559:	5d                   	pop    ebp
c000155a:	e9 ea f8 ff ff       	jmp    c0000e49 <dlmalloc>
c000155f:	bf 10 00 00 00       	mov    edi,0x10
c0001564:	83 fa 0f             	cmp    edx,0xf
c0001567:	76 13                	jbe    c000157c <dlmemalign+0x41>
c0001569:	8d 4a ff             	lea    ecx,[edx-0x1]
c000156c:	85 d1                	test   ecx,edx
c000156e:	75 04                	jne    c0001574 <dlmemalign+0x39>
c0001570:	89 d7                	mov    edi,edx
c0001572:	eb 08                	jmp    c000157c <dlmemalign+0x41>
c0001574:	39 d7                	cmp    edi,edx
c0001576:	73 04                	jae    c000157c <dlmemalign+0x41>
c0001578:	01 ff                	add    edi,edi
c000157a:	eb f8                	jmp    c0001574 <dlmemalign+0x39>
c000157c:	83 f8 df             	cmp    eax,0xffffffdf
c000157f:	76 07                	jbe    c0001588 <dlmemalign+0x4d>
c0001581:	31 c0                	xor    eax,eax
c0001583:	e9 ce 00 00 00       	jmp    c0001656 <dlmemalign+0x11b>
c0001588:	83 c0 0b             	add    eax,0xb
c000158b:	bd 10 00 00 00       	mov    ebp,0x10
c0001590:	83 f8 0f             	cmp    eax,0xf
c0001593:	76 05                	jbe    c000159a <dlmemalign+0x5f>
c0001595:	83 e0 f8             	and    eax,0xfffffff8
c0001598:	89 c5                	mov    ebp,eax
c000159a:	83 ec 0c             	sub    esp,0xc
c000159d:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00015a1:	50                   	push   eax
c00015a2:	e8 a2 f8 ff ff       	call   c0000e49 <dlmalloc>
c00015a7:	83 c4 10             	add    esp,0x10
c00015aa:	89 c1                	mov    ecx,eax
c00015ac:	85 c0                	test   eax,eax
c00015ae:	74 d1                	je     c0001581 <dlmemalign+0x46>
c00015b0:	31 d2                	xor    edx,edx
c00015b2:	8d 70 f8             	lea    esi,[eax-0x8]
c00015b5:	f7 f7                	div    edi
c00015b7:	85 d2                	test   edx,edx
c00015b9:	74 62                	je     c000161d <dlmemalign+0xe2>
c00015bb:	89 f8                	mov    eax,edi
c00015bd:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015c1:	f7 d8                	neg    eax
c00015c3:	21 c3                	and    ebx,eax
c00015c5:	83 eb 08             	sub    ebx,0x8
c00015c8:	89 d8                	mov    eax,ebx
c00015ca:	29 f0                	sub    eax,esi
c00015cc:	83 f8 0f             	cmp    eax,0xf
c00015cf:	77 02                	ja     c00015d3 <dlmemalign+0x98>
c00015d1:	01 fb                	add    ebx,edi
c00015d3:	89 d8                	mov    eax,ebx
c00015d5:	29 f0                	sub    eax,esi
c00015d7:	89 c6                	mov    esi,eax
c00015d9:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015dc:	89 c2                	mov    edx,eax
c00015de:	83 e2 fc             	and    edx,0xfffffffc
c00015e1:	29 f2                	sub    edx,esi
c00015e3:	a8 02                	test   al,0x2
c00015e5:	74 10                	je     c00015f7 <dlmemalign+0xbc>
c00015e7:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015ea:	83 ca 02             	or     edx,0x2
c00015ed:	8d 43 08             	lea    eax,[ebx+0x8]
c00015f0:	89 33                	mov    DWORD PTR [ebx],esi
c00015f2:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015f5:	eb 5f                	jmp    c0001656 <dlmemalign+0x11b>
c00015f7:	89 d0                	mov    eax,edx
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	83 c8 01             	or     eax,0x1
c00015ff:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001602:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001607:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000160a:	83 e0 01             	and    eax,0x1
c000160d:	09 f0                	or     eax,esi
c000160f:	89 de                	mov    esi,ebx
c0001611:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001614:	51                   	push   ecx
c0001615:	e8 d1 f4 ff ff       	call   c0000aeb <dlfree>
c000161a:	83 c4 10             	add    esp,0x10
c000161d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001620:	a8 02                	test   al,0x2
c0001622:	75 2f                	jne    c0001653 <dlmemalign+0x118>
c0001624:	83 e0 fc             	and    eax,0xfffffffc
c0001627:	8d 55 10             	lea    edx,[ebp+0x10]
c000162a:	39 c2                	cmp    edx,eax
c000162c:	73 25                	jae    c0001653 <dlmemalign+0x118>
c000162e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001631:	29 e8                	sub    eax,ebp
c0001633:	83 c8 01             	or     eax,0x1
c0001636:	83 ec 0c             	sub    esp,0xc
c0001639:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000163c:	83 c2 08             	add    edx,0x8
c000163f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001642:	83 e0 01             	and    eax,0x1
c0001645:	09 c5                	or     ebp,eax
c0001647:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000164a:	52                   	push   edx
c000164b:	e8 9b f4 ff ff       	call   c0000aeb <dlfree>
c0001650:	83 c4 10             	add    esp,0x10
c0001653:	8d 46 08             	lea    eax,[esi+0x8]
c0001656:	83 c4 0c             	add    esp,0xc
c0001659:	5b                   	pop    ebx
c000165a:	5e                   	pop    esi
c000165b:	5f                   	pop    edi
c000165c:	5d                   	pop    ebp
c000165d:	c3                   	ret    

c000165e <dlcalloc>:
c000165e:	53                   	push   ebx
c000165f:	83 ec 14             	sub    esp,0x14
c0001662:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001666:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000166b:	50                   	push   eax
c000166c:	e8 d8 f7 ff ff       	call   c0000e49 <dlmalloc>
c0001671:	83 c4 10             	add    esp,0x10
c0001674:	89 c3                	mov    ebx,eax
c0001676:	85 c0                	test   eax,eax
c0001678:	74 77                	je     c00016f1 <dlcalloc+0x93>
c000167a:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000167d:	89 d0                	mov    eax,edx
c000167f:	83 e0 fc             	and    eax,0xfffffffc
c0001682:	80 e2 02             	and    dl,0x2
c0001685:	75 5a                	jne    c00016e1 <dlcalloc+0x83>
c0001687:	83 e8 04             	sub    eax,0x4
c000168a:	83 f8 27             	cmp    eax,0x27
c000168d:	76 03                	jbe    c0001692 <dlcalloc+0x34>
c000168f:	51                   	push   ecx
c0001690:	eb 53                	jmp    c00016e5 <dlcalloc+0x87>
c0001692:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001698:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000169f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00016a6:	83 f8 13             	cmp    eax,0x13
c00016a9:	76 46                	jbe    c00016f1 <dlcalloc+0x93>
c00016ab:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00016b2:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016b9:	83 f8 1b             	cmp    eax,0x1b
c00016bc:	76 33                	jbe    c00016f1 <dlcalloc+0x93>
c00016be:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016c5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016cc:	83 f8 23             	cmp    eax,0x23
c00016cf:	76 20                	jbe    c00016f1 <dlcalloc+0x93>
c00016d1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016d8:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016df:	eb 10                	jmp    c00016f1 <dlcalloc+0x93>
c00016e1:	83 e8 08             	sub    eax,0x8
c00016e4:	52                   	push   edx
c00016e5:	50                   	push   eax
c00016e6:	6a 00                	push   0x0
c00016e8:	53                   	push   ebx
c00016e9:	e8 1a ef ff ff       	call   c0000608 <memset>
c00016ee:	83 c4 10             	add    esp,0x10
c00016f1:	83 c4 08             	add    esp,0x8
c00016f4:	89 d8                	mov    eax,ebx
c00016f6:	5b                   	pop    ebx
c00016f7:	c3                   	ret    

c00016f8 <dlcfree>:
c00016f8:	e9 ee f3 ff ff       	jmp    c0000aeb <dlfree>

c00016fd <dlindependent_calloc>:
c00016fd:	83 ec 28             	sub    esp,0x28
c0001700:	b9 03 00 00 00       	mov    ecx,0x3
c0001705:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001709:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000170d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001711:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001715:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001719:	e8 b9 fa ff ff       	call   c00011d7 <iALLOc>
c000171e:	83 c4 2c             	add    esp,0x2c
c0001721:	c3                   	ret    

c0001722 <dlindependent_comalloc>:
c0001722:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001726:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000172a:	31 c9                	xor    ecx,ecx
c000172c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001730:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001734:	e9 9e fa ff ff       	jmp    c00011d7 <iALLOc>

c0001739 <dlvalloc>:
c0001739:	83 ec 0c             	sub    esp,0xc
c000173c:	83 3d 20 3d 02 c0 00 	cmp    DWORD PTR ds:0xc0023d20,0x0
c0001743:	75 0a                	jne    c000174f <dlvalloc+0x16>
c0001745:	b8 20 3d 02 c0       	mov    eax,0xc0023d20
c000174a:	e8 b5 f2 ff ff       	call   c0000a04 <malloc_consolidate>
c000174f:	50                   	push   eax
c0001750:	50                   	push   eax
c0001751:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001755:	ff 35 7c 40 02 c0    	push   DWORD PTR ds:0xc002407c
c000175b:	e8 db fd ff ff       	call   c000153b <dlmemalign>
c0001760:	83 c4 1c             	add    esp,0x1c
c0001763:	c3                   	ret    

c0001764 <dlpvalloc>:
c0001764:	83 ec 0c             	sub    esp,0xc
c0001767:	83 3d 20 3d 02 c0 00 	cmp    DWORD PTR ds:0xc0023d20,0x0
c000176e:	75 0a                	jne    c000177a <dlpvalloc+0x16>
c0001770:	b8 20 3d 02 c0       	mov    eax,0xc0023d20
c0001775:	e8 8a f2 ff ff       	call   c0000a04 <malloc_consolidate>
c000177a:	52                   	push   edx
c000177b:	a1 7c 40 02 c0       	mov    eax,ds:0xc002407c
c0001780:	52                   	push   edx
c0001781:	89 c1                	mov    ecx,eax
c0001783:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001787:	f7 d9                	neg    ecx
c0001789:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c000178d:	21 ca                	and    edx,ecx
c000178f:	52                   	push   edx
c0001790:	50                   	push   eax
c0001791:	e8 a5 fd ff ff       	call   c000153b <dlmemalign>
c0001796:	83 c4 1c             	add    esp,0x1c
c0001799:	c3                   	ret    

c000179a <dlmalloc_trim>:
c000179a:	b8 20 3d 02 c0       	mov    eax,0xc0023d20
c000179f:	e8 60 f2 ff ff       	call   c0000a04 <malloc_consolidate>
c00017a4:	31 c0                	xor    eax,eax
c00017a6:	c3                   	ret    

c00017a7 <dlmalloc_usable_size>:
c00017a7:	53                   	push   ebx
c00017a8:	31 c0                	xor    eax,eax
c00017aa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00017ae:	85 c9                	test   ecx,ecx
c00017b0:	74 24                	je     c00017d6 <dlmalloc_usable_size+0x2f>
c00017b2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017b5:	f6 c2 02             	test   dl,0x2
c00017b8:	74 08                	je     c00017c2 <dlmalloc_usable_size+0x1b>
c00017ba:	83 e2 fc             	and    edx,0xfffffffc
c00017bd:	8d 42 f8             	lea    eax,[edx-0x8]
c00017c0:	eb 14                	jmp    c00017d6 <dlmalloc_usable_size+0x2f>
c00017c2:	89 d3                	mov    ebx,edx
c00017c4:	31 c0                	xor    eax,eax
c00017c6:	83 e3 fe             	and    ebx,0xfffffffe
c00017c9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017ce:	74 06                	je     c00017d6 <dlmalloc_usable_size+0x2f>
c00017d0:	83 e2 fc             	and    edx,0xfffffffc
c00017d3:	8d 42 fc             	lea    eax,[edx-0x4]
c00017d6:	5b                   	pop    ebx
c00017d7:	c3                   	ret    

c00017d8 <dlmallinfo>:
c00017d8:	55                   	push   ebp
c00017d9:	57                   	push   edi
c00017da:	56                   	push   esi
c00017db:	53                   	push   ebx
c00017dc:	83 ec 08             	sub    esp,0x8
c00017df:	83 3d 4c 3d 02 c0 00 	cmp    DWORD PTR ds:0xc0023d4c,0x0
c00017e6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017ea:	75 0a                	jne    c00017f6 <dlmallinfo+0x1e>
c00017ec:	b8 20 3d 02 c0       	mov    eax,0xc0023d20
c00017f1:	e8 0e f2 ff ff       	call   c0000a04 <malloc_consolidate>
c00017f6:	a1 4c 3d 02 c0       	mov    eax,ds:0xc0023d4c
c00017fb:	31 ed                	xor    ebp,ebp
c00017fd:	31 c9                	xor    ecx,ecx
c00017ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001802:	83 e0 fc             	and    eax,0xfffffffc
c0001805:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001809:	31 c0                	xor    eax,eax
c000180b:	8b 14 85 24 3d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc2dc]
c0001812:	85 d2                	test   edx,edx
c0001814:	74 0e                	je     c0001824 <dlmallinfo+0x4c>
c0001816:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001819:	45                   	inc    ebp
c000181a:	83 e6 fc             	and    esi,0xfffffffc
c000181d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001820:	01 f1                	add    ecx,esi
c0001822:	eb ee                	jmp    c0001812 <dlmallinfo+0x3a>
c0001824:	40                   	inc    eax
c0001825:	83 f8 0a             	cmp    eax,0xa
c0001828:	75 e1                	jne    c000180b <dlmallinfo+0x33>
c000182a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000182e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001835:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001838:	b8 54 3d 02 c0       	mov    eax,0xc0023d54
c000183d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001840:	39 f0                	cmp    eax,esi
c0001842:	74 10                	je     c0001854 <dlmallinfo+0x7c>
c0001844:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001847:	ff 04 24             	inc    DWORD PTR [esp]
c000184a:	83 e7 fc             	and    edi,0xfffffffc
c000184d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001850:	01 fa                	add    edx,edi
c0001852:	eb ec                	jmp    c0001840 <dlmallinfo+0x68>
c0001854:	83 c0 08             	add    eax,0x8
c0001857:	3d 4c 40 02 c0       	cmp    eax,0xc002404c
c000185c:	75 df                	jne    c000183d <dlmallinfo+0x65>
c000185e:	a1 88 40 02 c0       	mov    eax,ds:0xc0024088
c0001863:	8b 35 70 40 02 c0    	mov    esi,DWORD PTR ds:0xc0024070
c0001869:	89 03                	mov    DWORD PTR [ebx],eax
c000186b:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000186e:	29 d0                	sub    eax,edx
c0001870:	8b 35 84 40 02 c0    	mov    esi,DWORD PTR ds:0xc0024084
c0001876:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001879:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000187c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000187f:	8b 35 94 40 02 c0    	mov    esi,DWORD PTR ds:0xc0024094
c0001885:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001889:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000188c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000188f:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001892:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001895:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001898:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000189b:	83 c4 08             	add    esp,0x8
c000189e:	89 d8                	mov    eax,ebx
c00018a0:	5b                   	pop    ebx
c00018a1:	5e                   	pop    esi
c00018a2:	5f                   	pop    edi
c00018a3:	5d                   	pop    ebp
c00018a4:	c2 04 00             	ret    0x4

c00018a7 <dlmalloc_stats>:
c00018a7:	83 ec 30             	sub    esp,0x30
c00018aa:	8d 44 24 08          	lea    eax,[esp+0x8]
c00018ae:	50                   	push   eax
c00018af:	e8 24 ff ff ff       	call   c00017d8 <dlmallinfo>
c00018b4:	83 c4 30             	add    esp,0x30
c00018b7:	c3                   	ret    

c00018b8 <dlmallopt>:
c00018b8:	56                   	push   esi
c00018b9:	b8 20 3d 02 c0       	mov    eax,0xc0023d20
c00018be:	53                   	push   ebx
c00018bf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018c7:	e8 38 f1 ff ff       	call   c0000a04 <malloc_consolidate>
c00018cc:	8d 46 04             	lea    eax,[esi+0x4]
c00018cf:	83 f8 05             	cmp    eax,0x5
c00018d2:	77 67                	ja     c000193b <dlmallopt+0x83>
c00018d4:	ff 24 85 c4 fd 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe023c]
c00018db:	83 fb 50             	cmp    ebx,0x50
c00018de:	77 5b                	ja     c000193b <dlmallopt+0x83>
c00018e0:	ba 08 00 00 00       	mov    edx,0x8
c00018e5:	85 db                	test   ebx,ebx
c00018e7:	74 12                	je     c00018fb <dlmallopt+0x43>
c00018e9:	83 c3 0b             	add    ebx,0xb
c00018ec:	ba 10 00 00 00       	mov    edx,0x10
c00018f1:	83 fb 0f             	cmp    ebx,0xf
c00018f4:	76 05                	jbe    c00018fb <dlmallopt+0x43>
c00018f6:	89 da                	mov    edx,ebx
c00018f8:	83 e2 f8             	and    edx,0xfffffff8
c00018fb:	a1 20 3d 02 c0       	mov    eax,ds:0xc0023d20
c0001900:	83 e0 03             	and    eax,0x3
c0001903:	09 d0                	or     eax,edx
c0001905:	a3 20 3d 02 c0       	mov    ds:0xc0023d20,eax
c000190a:	eb 31                	jmp    c000193d <dlmallopt+0x85>
c000190c:	89 1d 64 40 02 c0    	mov    DWORD PTR ds:0xc0024064,ebx
c0001912:	eb 06                	jmp    c000191a <dlmallopt+0x62>
c0001914:	89 1d 68 40 02 c0    	mov    DWORD PTR ds:0xc0024068,ebx
c000191a:	be 01 00 00 00       	mov    esi,0x1
c000191f:	eb 1c                	jmp    c000193d <dlmallopt+0x85>
c0001921:	89 1d 6c 40 02 c0    	mov    DWORD PTR ds:0xc002406c,ebx
c0001927:	eb f1                	jmp    c000191a <dlmallopt+0x62>
c0001929:	31 f6                	xor    esi,esi
c000192b:	85 db                	test   ebx,ebx
c000192d:	75 0e                	jne    c000193d <dlmallopt+0x85>
c000192f:	c7 05 74 40 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024074,0x0
c0001939:	eb df                	jmp    c000191a <dlmallopt+0x62>
c000193b:	31 f6                	xor    esi,esi
c000193d:	5b                   	pop    ebx
c000193e:	89 f0                	mov    eax,esi
c0001940:	5e                   	pop    esi
c0001941:	c3                   	ret    

c0001942 <disk_status>:
c0001942:	31 c0                	xor    eax,eax
c0001944:	c3                   	ret    

c0001945 <disk_initialize>:
c0001945:	31 c0                	xor    eax,eax
c0001947:	c3                   	ret    

c0001948 <disk_read>:
c0001948:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000194d:	0f b6 04 85 40 56 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda9c0]
c0001955:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001959:	e9 08 88 01 00       	jmp    c001a166 <fatWrapperReadDisk>

c000195e <disk_write>:
c000195e:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001963:	0f b6 04 85 40 56 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda9c0]
c000196b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000196f:	e9 3d 88 01 00       	jmp    c001a1b1 <fatWrapperWriteDisk>

c0001974 <disk_ioctl>:
c0001974:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001979:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000197d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001982:	0f b6 04 85 40 56 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda9c0]
c000198a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000198e:	e9 69 88 01 00       	jmp    c001a1fc <fatWrapperIoctl>

c0001993 <ld_word>:
c0001993:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001997:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000199a:	c1 e2 08             	shl    edx,0x8
c000199d:	09 d0                	or     eax,edx
c000199f:	c3                   	ret    

c00019a0 <ld_dword>:
c00019a0:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00019a4:	89 d1                	mov    ecx,edx
c00019a6:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019aa:	c1 e1 08             	shl    ecx,0x8
c00019ad:	09 ca                	or     edx,ecx
c00019af:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019b2:	c1 e2 08             	shl    edx,0x8
c00019b5:	09 d0                	or     eax,edx
c00019b7:	c3                   	ret    

c00019b8 <ld_qword>:
c00019b8:	57                   	push   edi
c00019b9:	56                   	push   esi
c00019ba:	53                   	push   ebx
c00019bb:	31 db                	xor    ebx,ebx
c00019bd:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00019c0:	89 df                	mov    edi,ebx
c00019c2:	89 ce                	mov    esi,ecx
c00019c4:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00019c8:	0f a4 f7 08          	shld   edi,esi,0x8
c00019cc:	c1 e6 08             	shl    esi,0x8
c00019cf:	09 f2                	or     edx,esi
c00019d1:	89 d6                	mov    esi,edx
c00019d3:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00019d7:	0f a4 f7 08          	shld   edi,esi,0x8
c00019db:	c1 e6 08             	shl    esi,0x8
c00019de:	09 f2                	or     edx,esi
c00019e0:	89 d6                	mov    esi,edx
c00019e2:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019e6:	0f a4 f7 08          	shld   edi,esi,0x8
c00019ea:	c1 e6 08             	shl    esi,0x8
c00019ed:	89 fb                	mov    ebx,edi
c00019ef:	09 f2                	or     edx,esi
c00019f1:	89 d1                	mov    ecx,edx
c00019f3:	0f a4 cb 08          	shld   ebx,ecx,0x8
c00019f7:	89 da                	mov    edx,ebx
c00019f9:	5b                   	pop    ebx
c00019fa:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019fd:	c1 e1 08             	shl    ecx,0x8
c0001a00:	5e                   	pop    esi
c0001a01:	09 c8                	or     eax,ecx
c0001a03:	5f                   	pop    edi
c0001a04:	c3                   	ret    

c0001a05 <st_word>:
c0001a05:	66 89 10             	mov    WORD PTR [eax],dx
c0001a08:	c3                   	ret    

c0001a09 <st_dword>:
c0001a09:	89 10                	mov    DWORD PTR [eax],edx
c0001a0b:	c3                   	ret    

c0001a0c <st_qword>:
c0001a0c:	89 10                	mov    DWORD PTR [eax],edx
c0001a0e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a11:	c3                   	ret    

c0001a12 <mem_cpy>:
c0001a12:	85 c9                	test   ecx,ecx
c0001a14:	74 10                	je     c0001a26 <mem_cpy+0x14>
c0001a16:	57                   	push   edi
c0001a17:	01 c1                	add    ecx,eax
c0001a19:	56                   	push   esi
c0001a1a:	89 c7                	mov    edi,eax
c0001a1c:	89 d6                	mov    esi,edx
c0001a1e:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a1f:	39 f9                	cmp    ecx,edi
c0001a21:	75 fb                	jne    c0001a1e <mem_cpy+0xc>
c0001a23:	5e                   	pop    esi
c0001a24:	5f                   	pop    edi
c0001a25:	c3                   	ret    
c0001a26:	c3                   	ret    

c0001a27 <mem_set>:
c0001a27:	01 c1                	add    ecx,eax
c0001a29:	40                   	inc    eax
c0001a2a:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a2d:	39 c8                	cmp    eax,ecx
c0001a2f:	75 f8                	jne    c0001a29 <mem_set+0x2>
c0001a31:	c3                   	ret    

c0001a32 <mem_cmp>:
c0001a32:	57                   	push   edi
c0001a33:	56                   	push   esi
c0001a34:	89 c6                	mov    esi,eax
c0001a36:	53                   	push   ebx
c0001a37:	46                   	inc    esi
c0001a38:	42                   	inc    edx
c0001a39:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001a3d:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001a41:	29 fb                	sub    ebx,edi
c0001a43:	89 cf                	mov    edi,ecx
c0001a45:	29 f7                	sub    edi,esi
c0001a47:	01 c7                	add    edi,eax
c0001a49:	74 04                	je     c0001a4f <mem_cmp+0x1d>
c0001a4b:	85 db                	test   ebx,ebx
c0001a4d:	74 e8                	je     c0001a37 <mem_cmp+0x5>
c0001a4f:	89 d8                	mov    eax,ebx
c0001a51:	5b                   	pop    ebx
c0001a52:	5e                   	pop    esi
c0001a53:	5f                   	pop    edi
c0001a54:	c3                   	ret    

c0001a55 <chk_chr>:
c0001a55:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001a58:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001a5b:	74 07                	je     c0001a64 <chk_chr+0xf>
c0001a5d:	39 d1                	cmp    ecx,edx
c0001a5f:	74 03                	je     c0001a64 <chk_chr+0xf>
c0001a61:	40                   	inc    eax
c0001a62:	eb f1                	jmp    c0001a55 <chk_chr>
c0001a64:	89 c8                	mov    eax,ecx
c0001a66:	c3                   	ret    

c0001a67 <dbc_1st>:
c0001a67:	31 c0                	xor    eax,eax
c0001a69:	c3                   	ret    

c0001a6a <dbc_2nd>:
c0001a6a:	31 c0                	xor    eax,eax
c0001a6c:	c3                   	ret    

c0001a6d <tchar2uni>:
c0001a6d:	57                   	push   edi
c0001a6e:	89 c7                	mov    edi,eax
c0001a70:	56                   	push   esi
c0001a71:	53                   	push   ebx
c0001a72:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001a74:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001a76:	8d 73 01             	lea    esi,[ebx+0x1]
c0001a79:	84 c9                	test   cl,cl
c0001a7b:	78 0a                	js     c0001a87 <tchar2uni+0x1a>
c0001a7d:	0f b6 d1             	movzx  edx,cl
c0001a80:	89 f3                	mov    ebx,esi
c0001a82:	e9 9f 00 00 00       	jmp    c0001b26 <tchar2uni+0xb9>
c0001a87:	88 ca                	mov    dl,cl
c0001a89:	83 e2 e0             	and    edx,0xffffffe0
c0001a8c:	80 fa c0             	cmp    dl,0xc0
c0001a8f:	75 0c                	jne    c0001a9d <tchar2uni+0x30>
c0001a91:	89 ca                	mov    edx,ecx
c0001a93:	b9 01 00 00 00       	mov    ecx,0x1
c0001a98:	83 e2 1f             	and    edx,0x1f
c0001a9b:	eb 2e                	jmp    c0001acb <tchar2uni+0x5e>
c0001a9d:	88 ca                	mov    dl,cl
c0001a9f:	83 e2 f0             	and    edx,0xfffffff0
c0001aa2:	80 fa e0             	cmp    dl,0xe0
c0001aa5:	75 0c                	jne    c0001ab3 <tchar2uni+0x46>
c0001aa7:	89 ca                	mov    edx,ecx
c0001aa9:	b9 02 00 00 00       	mov    ecx,0x2
c0001aae:	83 e2 0f             	and    edx,0xf
c0001ab1:	eb 18                	jmp    c0001acb <tchar2uni+0x5e>
c0001ab3:	88 ca                	mov    dl,cl
c0001ab5:	83 e2 f8             	and    edx,0xfffffff8
c0001ab8:	88 d0                	mov    al,dl
c0001aba:	83 ca ff             	or     edx,0xffffffff
c0001abd:	3c f0                	cmp    al,0xf0
c0001abf:	75 6c                	jne    c0001b2d <tchar2uni+0xc0>
c0001ac1:	89 ca                	mov    edx,ecx
c0001ac3:	b9 03 00 00 00       	mov    ecx,0x3
c0001ac8:	83 e2 07             	and    edx,0x7
c0001acb:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001acf:	46                   	inc    esi
c0001ad0:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ad3:	88 c8                	mov    al,cl
c0001ad5:	83 e0 c0             	and    eax,0xffffffc0
c0001ad8:	3c 80                	cmp    al,0x80
c0001ada:	75 4e                	jne    c0001b2a <tchar2uni+0xbd>
c0001adc:	c1 e2 06             	shl    edx,0x6
c0001adf:	83 e1 3f             	and    ecx,0x3f
c0001ae2:	09 ca                	or     edx,ecx
c0001ae4:	39 de                	cmp    esi,ebx
c0001ae6:	75 e7                	jne    c0001acf <tchar2uni+0x62>
c0001ae8:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001aee:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001af4:	76 34                	jbe    c0001b2a <tchar2uni+0xbd>
c0001af6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001af9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001aff:	77 29                	ja     c0001b2a <tchar2uni+0xbd>
c0001b01:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b07:	76 1d                	jbe    c0001b26 <tchar2uni+0xb9>
c0001b09:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b0f:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b15:	c1 e1 06             	shl    ecx,0x6
c0001b18:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b1e:	09 ca                	or     edx,ecx
c0001b20:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b26:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b28:	eb 03                	jmp    c0001b2d <tchar2uni+0xc0>
c0001b2a:	83 ca ff             	or     edx,0xffffffff
c0001b2d:	5b                   	pop    ebx
c0001b2e:	89 d0                	mov    eax,edx
c0001b30:	5e                   	pop    esi
c0001b31:	5f                   	pop    edi
c0001b32:	c3                   	ret    

c0001b33 <put_utf>:
c0001b33:	53                   	push   ebx
c0001b34:	83 f8 7f             	cmp    eax,0x7f
c0001b37:	89 c3                	mov    ebx,eax
c0001b39:	b0 00                	mov    al,0x0
c0001b3b:	77 11                	ja     c0001b4e <put_utf+0x1b>
c0001b3d:	85 c9                	test   ecx,ecx
c0001b3f:	0f 84 e5 00 00 00    	je     c0001c2a <put_utf+0xf7>
c0001b45:	88 1a                	mov    BYTE PTR [edx],bl
c0001b47:	b0 01                	mov    al,0x1
c0001b49:	e9 dc 00 00 00       	jmp    c0001c2a <put_utf+0xf7>
c0001b4e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001b54:	77 23                	ja     c0001b79 <put_utf+0x46>
c0001b56:	83 f9 01             	cmp    ecx,0x1
c0001b59:	0f 86 cb 00 00 00    	jbe    c0001c2a <put_utf+0xf7>
c0001b5f:	89 d8                	mov    eax,ebx
c0001b61:	83 e3 3f             	and    ebx,0x3f
c0001b64:	c1 e8 06             	shr    eax,0x6
c0001b67:	83 cb 80             	or     ebx,0xffffff80
c0001b6a:	83 c8 c0             	or     eax,0xffffffc0
c0001b6d:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001b70:	88 02                	mov    BYTE PTR [edx],al
c0001b72:	b0 02                	mov    al,0x2
c0001b74:	e9 b1 00 00 00       	jmp    c0001c2a <put_utf+0xf7>
c0001b79:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001b7f:	77 40                	ja     c0001bc1 <put_utf+0x8e>
c0001b81:	83 f9 02             	cmp    ecx,0x2
c0001b84:	0f 86 a0 00 00 00    	jbe    c0001c2a <put_utf+0xf7>
c0001b8a:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001b90:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b96:	0f 86 8e 00 00 00    	jbe    c0001c2a <put_utf+0xf7>
c0001b9c:	89 d8                	mov    eax,ebx
c0001b9e:	c1 e8 0c             	shr    eax,0xc
c0001ba1:	83 c8 e0             	or     eax,0xffffffe0
c0001ba4:	88 02                	mov    BYTE PTR [edx],al
c0001ba6:	89 d8                	mov    eax,ebx
c0001ba8:	c1 e8 06             	shr    eax,0x6
c0001bab:	83 e3 3f             	and    ebx,0x3f
c0001bae:	83 e0 3f             	and    eax,0x3f
c0001bb1:	83 cb 80             	or     ebx,0xffffff80
c0001bb4:	83 c8 80             	or     eax,0xffffff80
c0001bb7:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001bba:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001bbd:	b0 03                	mov    al,0x3
c0001bbf:	eb 69                	jmp    c0001c2a <put_utf+0xf7>
c0001bc1:	83 f9 03             	cmp    ecx,0x3
c0001bc4:	76 64                	jbe    c0001c2a <put_utf+0xf7>
c0001bc6:	89 d9                	mov    ecx,ebx
c0001bc8:	66 31 c9             	xor    cx,cx
c0001bcb:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001bd1:	0f b7 c3             	movzx  eax,bx
c0001bd4:	c1 e9 06             	shr    ecx,0x6
c0001bd7:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001bdd:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001be3:	77 43                	ja     c0001c28 <put_utf+0xf5>
c0001be5:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001beb:	77 3b                	ja     c0001c28 <put_utf+0xf5>
c0001bed:	09 cb                	or     ebx,ecx
c0001bef:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001bf5:	89 d8                	mov    eax,ebx
c0001bf7:	c1 e8 12             	shr    eax,0x12
c0001bfa:	83 c8 f0             	or     eax,0xfffffff0
c0001bfd:	88 02                	mov    BYTE PTR [edx],al
c0001bff:	89 d8                	mov    eax,ebx
c0001c01:	c1 e8 0c             	shr    eax,0xc
c0001c04:	83 e0 3f             	and    eax,0x3f
c0001c07:	83 c8 80             	or     eax,0xffffff80
c0001c0a:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c0d:	89 d8                	mov    eax,ebx
c0001c0f:	c1 e8 06             	shr    eax,0x6
c0001c12:	83 e3 3f             	and    ebx,0x3f
c0001c15:	83 e0 3f             	and    eax,0x3f
c0001c18:	83 cb 80             	or     ebx,0xffffff80
c0001c1b:	83 c8 80             	or     eax,0xffffff80
c0001c1e:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c21:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c24:	b0 04                	mov    al,0x4
c0001c26:	eb 02                	jmp    c0001c2a <put_utf+0xf7>
c0001c28:	31 c0                	xor    eax,eax
c0001c2a:	5b                   	pop    ebx
c0001c2b:	c3                   	ret    

c0001c2c <clst2sect>:
c0001c2c:	89 c1                	mov    ecx,eax
c0001c2e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001c31:	83 ea 02             	sub    edx,0x2
c0001c34:	83 e8 02             	sub    eax,0x2
c0001c37:	39 d0                	cmp    eax,edx
c0001c39:	76 0d                	jbe    c0001c48 <clst2sect+0x1c>
c0001c3b:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001c3f:	f7 e2                	mul    edx
c0001c41:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001c44:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001c47:	c3                   	ret    
c0001c48:	31 c0                	xor    eax,eax
c0001c4a:	31 d2                	xor    edx,edx
c0001c4c:	c3                   	ret    

c0001c4d <clmt_clust>:
c0001c4d:	57                   	push   edi
c0001c4e:	89 cf                	mov    edi,ecx
c0001c50:	56                   	push   esi
c0001c51:	89 d6                	mov    esi,edx
c0001c53:	53                   	push   ebx
c0001c54:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001c57:	8b 00                	mov    eax,DWORD PTR [eax]
c0001c59:	0f ac fe 09          	shrd   esi,edi,0x9
c0001c5d:	c1 ef 09             	shr    edi,0x9
c0001c60:	89 f2                	mov    edx,esi
c0001c62:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001c65:	89 f9                	mov    ecx,edi
c0001c67:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001c6b:	31 ff                	xor    edi,edi
c0001c6d:	57                   	push   edi
c0001c6e:	56                   	push   esi
c0001c6f:	51                   	push   ecx
c0001c70:	52                   	push   edx
c0001c71:	e8 36 d2 01 00       	call   c001eeac <__udivdi3>
c0001c76:	83 c4 10             	add    esp,0x10
c0001c79:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001c7b:	85 d2                	test   edx,edx
c0001c7d:	74 10                	je     c0001c8f <clmt_clust+0x42>
c0001c7f:	39 d0                	cmp    eax,edx
c0001c81:	72 07                	jb     c0001c8a <clmt_clust+0x3d>
c0001c83:	29 d0                	sub    eax,edx
c0001c85:	83 c3 08             	add    ebx,0x8
c0001c88:	eb ef                	jmp    c0001c79 <clmt_clust+0x2c>
c0001c8a:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001c8d:	89 c2                	mov    edx,eax
c0001c8f:	5b                   	pop    ebx
c0001c90:	89 d0                	mov    eax,edx
c0001c92:	5e                   	pop    esi
c0001c93:	5f                   	pop    edi
c0001c94:	c3                   	ret    

c0001c95 <pick_lfn>:
c0001c95:	55                   	push   ebp
c0001c96:	57                   	push   edi
c0001c97:	56                   	push   esi
c0001c98:	89 d6                	mov    esi,edx
c0001c9a:	53                   	push   ebx
c0001c9b:	89 c3                	mov    ebx,eax
c0001c9d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001ca0:	e8 ee fc ff ff       	call   c0001993 <ld_word>
c0001ca5:	66 85 c0             	test   ax,ax
c0001ca8:	74 04                	je     c0001cae <pick_lfn+0x19>
c0001caa:	31 c0                	xor    eax,eax
c0001cac:	eb 5c                	jmp    c0001d0a <pick_lfn+0x75>
c0001cae:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001cb1:	83 e1 bf             	and    ecx,0xffffffbf
c0001cb4:	bd 01 00 00 00       	mov    ebp,0x1
c0001cb9:	49                   	dec    ecx
c0001cba:	31 ff                	xor    edi,edi
c0001cbc:	6b c9 0d             	imul   ecx,ecx,0xd
c0001cbf:	0f b6 87 e0 fe 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe0120]
c0001cc6:	01 f0                	add    eax,esi
c0001cc8:	e8 c6 fc ff ff       	call   c0001993 <ld_word>
c0001ccd:	66 85 ed             	test   bp,bp
c0001cd0:	74 11                	je     c0001ce3 <pick_lfn+0x4e>
c0001cd2:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cd8:	77 d0                	ja     c0001caa <pick_lfn+0x15>
c0001cda:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001cde:	89 c5                	mov    ebp,eax
c0001ce0:	41                   	inc    ecx
c0001ce1:	eb 04                	jmp    c0001ce7 <pick_lfn+0x52>
c0001ce3:	66 40                	inc    ax
c0001ce5:	75 c3                	jne    c0001caa <pick_lfn+0x15>
c0001ce7:	47                   	inc    edi
c0001ce8:	83 ff 0d             	cmp    edi,0xd
c0001ceb:	75 d2                	jne    c0001cbf <pick_lfn+0x2a>
c0001ced:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001cf0:	74 13                	je     c0001d05 <pick_lfn+0x70>
c0001cf2:	66 85 ed             	test   bp,bp
c0001cf5:	74 0e                	je     c0001d05 <pick_lfn+0x70>
c0001cf7:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cfd:	77 ab                	ja     c0001caa <pick_lfn+0x15>
c0001cff:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d05:	b8 01 00 00 00       	mov    eax,0x1
c0001d0a:	5b                   	pop    ebx
c0001d0b:	5e                   	pop    esi
c0001d0c:	5f                   	pop    edi
c0001d0d:	5d                   	pop    ebp
c0001d0e:	c3                   	ret    

c0001d0f <put_lfn>:
c0001d0f:	55                   	push   ebp
c0001d10:	31 ed                	xor    ebp,ebp
c0001d12:	57                   	push   edi
c0001d13:	89 d7                	mov    edi,edx
c0001d15:	56                   	push   esi
c0001d16:	31 f6                	xor    esi,esi
c0001d18:	53                   	push   ebx
c0001d19:	83 ec 08             	sub    esp,0x8
c0001d1c:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d23:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d26:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d2c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d2f:	31 d2                	xor    edx,edx
c0001d31:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d35:	e8 cb fc ff ff       	call   c0001a05 <st_word>
c0001d3a:	0f b6 d9             	movzx  ebx,cl
c0001d3d:	4b                   	dec    ebx
c0001d3e:	6b db 0d             	imul   ebx,ebx,0xd
c0001d41:	66 83 fe ff          	cmp    si,0xffff
c0001d45:	74 08                	je     c0001d4f <put_lfn+0x40>
c0001d47:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d4a:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001d4e:	43                   	inc    ebx
c0001d4f:	0f b6 85 e0 fe 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0120]
c0001d56:	0f b7 d6             	movzx  edx,si
c0001d59:	01 f8                	add    eax,edi
c0001d5b:	e8 a5 fc ff ff       	call   c0001a05 <st_word>
c0001d60:	66 85 f6             	test   si,si
c0001d63:	75 03                	jne    c0001d68 <put_lfn+0x59>
c0001d65:	83 ce ff             	or     esi,0xffffffff
c0001d68:	45                   	inc    ebp
c0001d69:	83 fd 0d             	cmp    ebp,0xd
c0001d6c:	75 d3                	jne    c0001d41 <put_lfn+0x32>
c0001d6e:	66 46                	inc    si
c0001d70:	74 0a                	je     c0001d7c <put_lfn+0x6d>
c0001d72:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d75:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001d7a:	75 09                	jne    c0001d85 <put_lfn+0x76>
c0001d7c:	88 c8                	mov    al,cl
c0001d7e:	83 c8 40             	or     eax,0x40
c0001d81:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001d85:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001d89:	88 07                	mov    BYTE PTR [edi],al
c0001d8b:	83 c4 08             	add    esp,0x8
c0001d8e:	5b                   	pop    ebx
c0001d8f:	5e                   	pop    esi
c0001d90:	5f                   	pop    edi
c0001d91:	5d                   	pop    ebp
c0001d92:	c3                   	ret    

c0001d93 <gen_numname>:
c0001d93:	57                   	push   edi
c0001d94:	89 cf                	mov    edi,ecx
c0001d96:	56                   	push   esi
c0001d97:	b9 0b 00 00 00       	mov    ecx,0xb
c0001d9c:	53                   	push   ebx
c0001d9d:	89 c6                	mov    esi,eax
c0001d9f:	83 ec 10             	sub    esp,0x10
c0001da2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001da6:	e8 67 fc ff ff       	call   c0001a12 <mem_cpy>
c0001dab:	83 fb 05             	cmp    ebx,0x5
c0001dae:	76 2d                	jbe    c0001ddd <gen_numname+0x4a>
c0001db0:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001db3:	66 85 c0             	test   ax,ax
c0001db6:	74 25                	je     c0001ddd <gen_numname+0x4a>
c0001db8:	83 c7 02             	add    edi,0x2
c0001dbb:	ba 10 00 00 00       	mov    edx,0x10
c0001dc0:	89 c1                	mov    ecx,eax
c0001dc2:	01 db                	add    ebx,ebx
c0001dc4:	66 d1 e8             	shr    ax,1
c0001dc7:	83 e1 01             	and    ecx,0x1
c0001dca:	01 cb                	add    ebx,ecx
c0001dcc:	0f ba e3 10          	bt     ebx,0x10
c0001dd0:	73 06                	jae    c0001dd8 <gen_numname+0x45>
c0001dd2:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001dd8:	4a                   	dec    edx
c0001dd9:	75 e5                	jne    c0001dc0 <gen_numname+0x2d>
c0001ddb:	eb d3                	jmp    c0001db0 <gen_numname+0x1d>
c0001ddd:	b8 07 00 00 00       	mov    eax,0x7
c0001de2:	88 d9                	mov    cl,bl
c0001de4:	83 e1 0f             	and    ecx,0xf
c0001de7:	8d 51 30             	lea    edx,[ecx+0x30]
c0001dea:	80 fa 39             	cmp    dl,0x39
c0001ded:	76 03                	jbe    c0001df2 <gen_numname+0x5f>
c0001def:	8d 51 37             	lea    edx,[ecx+0x37]
c0001df2:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001df5:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001df9:	89 da                	mov    edx,ebx
c0001dfb:	c1 ea 04             	shr    edx,0x4
c0001dfe:	83 fb 0f             	cmp    ebx,0xf
c0001e01:	76 06                	jbe    c0001e09 <gen_numname+0x76>
c0001e03:	89 c8                	mov    eax,ecx
c0001e05:	89 d3                	mov    ebx,edx
c0001e07:	eb d9                	jmp    c0001de2 <gen_numname+0x4f>
c0001e09:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e0e:	31 d2                	xor    edx,edx
c0001e10:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e13:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e16:	39 ca                	cmp    edx,ecx
c0001e18:	73 18                	jae    c0001e32 <gen_numname+0x9f>
c0001e1a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e1d:	3c 20                	cmp    al,0x20
c0001e1f:	74 11                	je     c0001e32 <gen_numname+0x9f>
c0001e21:	e8 41 fc ff ff       	call   c0001a67 <dbc_1st>
c0001e26:	85 c0                	test   eax,eax
c0001e28:	74 05                	je     c0001e2f <gen_numname+0x9c>
c0001e2a:	39 d3                	cmp    ebx,edx
c0001e2c:	74 04                	je     c0001e32 <gen_numname+0x9f>
c0001e2e:	42                   	inc    edx
c0001e2f:	42                   	inc    edx
c0001e30:	eb e1                	jmp    c0001e13 <gen_numname+0x80>
c0001e32:	b0 20                	mov    al,0x20
c0001e34:	83 f9 07             	cmp    ecx,0x7
c0001e37:	77 05                	ja     c0001e3e <gen_numname+0xab>
c0001e39:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001e3d:	41                   	inc    ecx
c0001e3e:	42                   	inc    edx
c0001e3f:	83 fa 07             	cmp    edx,0x7
c0001e42:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001e46:	76 ea                	jbe    c0001e32 <gen_numname+0x9f>
c0001e48:	83 c4 10             	add    esp,0x10
c0001e4b:	5b                   	pop    ebx
c0001e4c:	5e                   	pop    esi
c0001e4d:	5f                   	pop    edi
c0001e4e:	c3                   	ret    

c0001e4f <sum_sfn>:
c0001e4f:	31 c9                	xor    ecx,ecx
c0001e51:	31 d2                	xor    edx,edx
c0001e53:	d0 ca                	ror    dl,1
c0001e55:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001e58:	41                   	inc    ecx
c0001e59:	83 f9 0b             	cmp    ecx,0xb
c0001e5c:	75 f5                	jne    c0001e53 <sum_sfn+0x4>
c0001e5e:	88 d0                	mov    al,dl
c0001e60:	c3                   	ret    

c0001e61 <xdir_sum>:
c0001e61:	56                   	push   esi
c0001e62:	31 c9                	xor    ecx,ecx
c0001e64:	53                   	push   ebx
c0001e65:	31 d2                	xor    edx,edx
c0001e67:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001e6b:	43                   	inc    ebx
c0001e6c:	c1 e3 05             	shl    ebx,0x5
c0001e6f:	83 fa 02             	cmp    edx,0x2
c0001e72:	74 0b                	je     c0001e7f <xdir_sum+0x1e>
c0001e74:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001e78:	66 d1 c9             	ror    cx,1
c0001e7b:	01 f1                	add    ecx,esi
c0001e7d:	eb 05                	jmp    c0001e84 <xdir_sum+0x23>
c0001e7f:	ba 03 00 00 00       	mov    edx,0x3
c0001e84:	42                   	inc    edx
c0001e85:	39 d3                	cmp    ebx,edx
c0001e87:	77 e6                	ja     c0001e6f <xdir_sum+0xe>
c0001e89:	5b                   	pop    ebx
c0001e8a:	89 c8                	mov    eax,ecx
c0001e8c:	5e                   	pop    esi
c0001e8d:	c3                   	ret    

c0001e8e <xsum32>:
c0001e8e:	d1 ca                	ror    edx,1
c0001e90:	0f b6 c0             	movzx  eax,al
c0001e93:	01 d0                	add    eax,edx
c0001e95:	c3                   	ret    

c0001e96 <get_xfileinfo>:
c0001e96:	55                   	push   ebp
c0001e97:	31 c9                	xor    ecx,ecx
c0001e99:	57                   	push   edi
c0001e9a:	bd 40 00 00 00       	mov    ebp,0x40
c0001e9f:	56                   	push   esi
c0001ea0:	31 ff                	xor    edi,edi
c0001ea2:	53                   	push   ebx
c0001ea3:	89 c6                	mov    esi,eax
c0001ea5:	83 ec 0c             	sub    esp,0xc
c0001ea8:	89 d3                	mov    ebx,edx
c0001eaa:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001eb1:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001eb5:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001eb8:	76 6d                	jbe    c0001f27 <get_xfileinfo+0x91>
c0001eba:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001ec0:	76 0b                	jbe    c0001ecd <get_xfileinfo+0x37>
c0001ec2:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001ec6:	bf 01 00 00 00       	mov    edi,0x1
c0001ecb:	eb 63                	jmp    c0001f30 <get_xfileinfo+0x9a>
c0001ecd:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001ed3:	75 03                	jne    c0001ed8 <get_xfileinfo+0x42>
c0001ed5:	83 c5 02             	add    ebp,0x2
c0001ed8:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001edb:	83 c5 02             	add    ebp,0x2
c0001ede:	e8 b0 fa ff ff       	call   c0001993 <ld_word>
c0001ee3:	ff 04 24             	inc    DWORD PTR [esp]
c0001ee6:	66 85 c9             	test   cx,cx
c0001ee9:	75 0d                	jne    c0001ef8 <get_xfileinfo+0x62>
c0001eeb:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001ef1:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001ef6:	76 2b                	jbe    c0001f23 <get_xfileinfo+0x8d>
c0001ef8:	c1 e1 10             	shl    ecx,0x10
c0001efb:	ba ff 00 00 00       	mov    edx,0xff
c0001f00:	29 fa                	sub    edx,edi
c0001f02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f06:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f0a:	0f b7 c0             	movzx  eax,ax
c0001f0d:	09 c8                	or     eax,ecx
c0001f0f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f13:	e8 1b fc ff ff       	call   c0001b33 <put_utf>
c0001f18:	84 c0                	test   al,al
c0001f1a:	74 a6                	je     c0001ec2 <get_xfileinfo+0x2c>
c0001f1c:	0f b6 c0             	movzx  eax,al
c0001f1f:	01 c7                	add    edi,eax
c0001f21:	31 c0                	xor    eax,eax
c0001f23:	89 c1                	mov    ecx,eax
c0001f25:	eb 8a                	jmp    c0001eb1 <get_xfileinfo+0x1b>
c0001f27:	85 ff                	test   edi,edi
c0001f29:	74 97                	je     c0001ec2 <get_xfileinfo+0x2c>
c0001f2b:	66 85 c9             	test   cx,cx
c0001f2e:	75 92                	jne    c0001ec2 <get_xfileinfo+0x2c>
c0001f30:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001f35:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001f39:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001f3c:	31 c0                	xor    eax,eax
c0001f3e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001f41:	31 d2                	xor    edx,edx
c0001f43:	80 e1 10             	and    cl,0x10
c0001f46:	75 08                	jne    c0001f50 <get_xfileinfo+0xba>
c0001f48:	8d 46 38             	lea    eax,[esi+0x38]
c0001f4b:	e8 68 fa ff ff       	call   c00019b8 <ld_qword>
c0001f50:	89 03                	mov    DWORD PTR [ebx],eax
c0001f52:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001f55:	8d 46 0c             	lea    eax,[esi+0xc]
c0001f58:	e8 36 fa ff ff       	call   c0001993 <ld_word>
c0001f5d:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001f61:	8d 46 0e             	lea    eax,[esi+0xe]
c0001f64:	e8 2a fa ff ff       	call   c0001993 <ld_word>
c0001f69:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001f6d:	83 c4 0c             	add    esp,0xc
c0001f70:	5b                   	pop    ebx
c0001f71:	5e                   	pop    esi
c0001f72:	5f                   	pop    edi
c0001f73:	5d                   	pop    ebp
c0001f74:	c3                   	ret    

c0001f75 <get_ldnumber>:
c0001f75:	57                   	push   edi
c0001f76:	56                   	push   esi
c0001f77:	53                   	push   ebx
c0001f78:	83 cb ff             	or     ebx,0xffffffff
c0001f7b:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f7d:	85 d2                	test   edx,edx
c0001f7f:	74 34                	je     c0001fb5 <get_ldnumber+0x40>
c0001f81:	89 c7                	mov    edi,eax
c0001f83:	89 d1                	mov    ecx,edx
c0001f85:	41                   	inc    ecx
c0001f86:	8a 41 ff             	mov    al,BYTE PTR [ecx-0x1]
c0001f89:	3c 1f                	cmp    al,0x1f
c0001f8b:	76 04                	jbe    c0001f91 <get_ldnumber+0x1c>
c0001f8d:	3c 3a                	cmp    al,0x3a
c0001f8f:	75 f4                	jne    c0001f85 <get_ldnumber+0x10>
c0001f91:	31 db                	xor    ebx,ebx
c0001f93:	3c 3a                	cmp    al,0x3a
c0001f95:	75 1e                	jne    c0001fb5 <get_ldnumber+0x40>
c0001f97:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001f9a:	83 cb ff             	or     ebx,0xffffffff
c0001f9d:	8d 46 d0             	lea    eax,[esi-0x30]
c0001fa0:	3c 09                	cmp    al,0x9
c0001fa2:	77 11                	ja     c0001fb5 <get_ldnumber+0x40>
c0001fa4:	83 c2 02             	add    edx,0x2
c0001fa7:	39 d1                	cmp    ecx,edx
c0001fa9:	75 0a                	jne    c0001fb5 <get_ldnumber+0x40>
c0001fab:	89 f0                	mov    eax,esi
c0001fad:	89 0f                	mov    DWORD PTR [edi],ecx
c0001faf:	0f be d8             	movsx  ebx,al
c0001fb2:	83 eb 30             	sub    ebx,0x30
c0001fb5:	89 d8                	mov    eax,ebx
c0001fb7:	5b                   	pop    ebx
c0001fb8:	5e                   	pop    esi
c0001fb9:	5f                   	pop    edi
c0001fba:	c3                   	ret    

c0001fbb <crc32>:
c0001fbb:	56                   	push   esi
c0001fbc:	89 d6                	mov    esi,edx
c0001fbe:	53                   	push   ebx
c0001fbf:	b2 01                	mov    dl,0x1
c0001fc1:	bb 08 00 00 00       	mov    ebx,0x8
c0001fc6:	89 f1                	mov    ecx,esi
c0001fc8:	84 d1                	test   cl,dl
c0001fca:	0f 95 c1             	setne  cl
c0001fcd:	0f b6 c9             	movzx  ecx,cl
c0001fd0:	31 c1                	xor    ecx,eax
c0001fd2:	89 c8                	mov    eax,ecx
c0001fd4:	d1 e8                	shr    eax,1
c0001fd6:	80 e1 01             	and    cl,0x1
c0001fd9:	74 05                	je     c0001fe0 <crc32+0x25>
c0001fdb:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0001fe0:	01 d2                	add    edx,edx
c0001fe2:	4b                   	dec    ebx
c0001fe3:	75 e1                	jne    c0001fc6 <crc32+0xb>
c0001fe5:	5b                   	pop    ebx
c0001fe6:	5e                   	pop    esi
c0001fe7:	c3                   	ret    

c0001fe8 <test_gpt_header>:
c0001fe8:	55                   	push   ebp
c0001fe9:	b9 10 00 00 00       	mov    ecx,0x10
c0001fee:	57                   	push   edi
c0001fef:	ba e0 fd 01 c0       	mov    edx,0xc001fde0
c0001ff4:	56                   	push   esi
c0001ff5:	31 ff                	xor    edi,edi
c0001ff7:	53                   	push   ebx
c0001ff8:	89 c3                	mov    ebx,eax
c0001ffa:	e8 33 fa ff ff       	call   c0001a32 <mem_cmp>
c0001fff:	85 c0                	test   eax,eax
c0002001:	75 55                	jne    c0002058 <test_gpt_header+0x70>
c0002003:	89 c7                	mov    edi,eax
c0002005:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000200a:	83 ce ff             	or     esi,0xffffffff
c000200d:	31 d2                	xor    edx,edx
c000200f:	83 fd 03             	cmp    ebp,0x3
c0002012:	76 05                	jbe    c0002019 <test_gpt_header+0x31>
c0002014:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c0002019:	89 f0                	mov    eax,esi
c000201b:	45                   	inc    ebp
c000201c:	e8 9a ff ff ff       	call   c0001fbb <crc32>
c0002021:	83 fd 4c             	cmp    ebp,0x4c
c0002024:	89 c6                	mov    esi,eax
c0002026:	75 e5                	jne    c000200d <test_gpt_header+0x25>
c0002028:	8d 43 10             	lea    eax,[ebx+0x10]
c000202b:	e8 70 f9 ff ff       	call   c00019a0 <ld_dword>
c0002030:	f7 d6                	not    esi
c0002032:	39 c6                	cmp    esi,eax
c0002034:	75 22                	jne    c0002058 <test_gpt_header+0x70>
c0002036:	8d 43 54             	lea    eax,[ebx+0x54]
c0002039:	e8 62 f9 ff ff       	call   c00019a0 <ld_dword>
c000203e:	83 c0 80             	add    eax,0xffffff80
c0002041:	75 15                	jne    c0002058 <test_gpt_header+0x70>
c0002043:	8d 43 50             	lea    eax,[ebx+0x50]
c0002046:	e8 55 f9 ff ff       	call   c00019a0 <ld_dword>
c000204b:	3d 80 00 00 00       	cmp    eax,0x80
c0002050:	0f 96 c0             	setbe  al
c0002053:	0f b6 c0             	movzx  eax,al
c0002056:	89 c7                	mov    edi,eax
c0002058:	5b                   	pop    ebx
c0002059:	89 f8                	mov    eax,edi
c000205b:	5e                   	pop    esi
c000205c:	5f                   	pop    edi
c000205d:	5d                   	pop    ebp
c000205e:	c3                   	ret    

c000205f <make_rand>:
c000205f:	56                   	push   esi
c0002060:	85 c0                	test   eax,eax
c0002062:	53                   	push   ebx
c0002063:	75 05                	jne    c000206a <make_rand+0xb>
c0002065:	b8 01 00 00 00       	mov    eax,0x1
c000206a:	01 d1                	add    ecx,edx
c000206c:	bb 08 00 00 00       	mov    ebx,0x8
c0002071:	89 c6                	mov    esi,eax
c0002073:	d1 e8                	shr    eax,1
c0002075:	83 e6 01             	and    esi,0x1
c0002078:	85 f6                	test   esi,esi
c000207a:	74 05                	je     c0002081 <make_rand+0x22>
c000207c:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002081:	4b                   	dec    ebx
c0002082:	75 ed                	jne    c0002071 <make_rand+0x12>
c0002084:	42                   	inc    edx
c0002085:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002088:	39 ca                	cmp    edx,ecx
c000208a:	75 e0                	jne    c000206c <make_rand+0xd>
c000208c:	5b                   	pop    ebx
c000208d:	5e                   	pop    esi
c000208e:	c3                   	ret    

c000208f <validate>:
c000208f:	56                   	push   esi
c0002090:	89 d6                	mov    esi,edx
c0002092:	53                   	push   ebx
c0002093:	85 c0                	test   eax,eax
c0002095:	51                   	push   ecx
c0002096:	75 09                	jne    c00020a1 <validate+0x12>
c0002098:	b8 09 00 00 00       	mov    eax,0x9
c000209d:	31 c9                	xor    ecx,ecx
c000209f:	eb 2f                	jmp    c00020d0 <validate+0x41>
c00020a1:	89 c3                	mov    ebx,eax
c00020a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00020a5:	85 c0                	test   eax,eax
c00020a7:	74 ef                	je     c0002098 <validate+0x9>
c00020a9:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00020ac:	74 ea                	je     c0002098 <validate+0x9>
c00020ae:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00020b2:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00020b6:	75 e0                	jne    c0002098 <validate+0x9>
c00020b8:	83 ec 0c             	sub    esp,0xc
c00020bb:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020bf:	50                   	push   eax
c00020c0:	e8 7d f8 ff ff       	call   c0001942 <disk_status>
c00020c5:	83 c4 10             	add    esp,0x10
c00020c8:	a8 01                	test   al,0x1
c00020ca:	75 cc                	jne    c0002098 <validate+0x9>
c00020cc:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00020ce:	31 c0                	xor    eax,eax
c00020d0:	89 0e                	mov    DWORD PTR [esi],ecx
c00020d2:	5a                   	pop    edx
c00020d3:	5b                   	pop    ebx
c00020d4:	5e                   	pop    esi
c00020d5:	c3                   	ret    

c00020d6 <sync_window>:
c00020d6:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00020da:	0f 84 85 00 00 00    	je     c0002165 <sync_window+0x8f>
c00020e0:	55                   	push   ebp
c00020e1:	8d 68 54             	lea    ebp,[eax+0x54]
c00020e4:	57                   	push   edi
c00020e5:	56                   	push   esi
c00020e6:	53                   	push   ebx
c00020e7:	89 c3                	mov    ebx,eax
c00020e9:	83 ec 28             	sub    esp,0x28
c00020ec:	6a 01                	push   0x1
c00020ee:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00020f1:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00020f4:	55                   	push   ebp
c00020f5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020f9:	50                   	push   eax
c00020fa:	e8 5f f8 ff ff       	call   c000195e <disk_write>
c00020ff:	83 c4 20             	add    esp,0x20
c0002102:	ba 01 00 00 00       	mov    edx,0x1
c0002107:	85 c0                	test   eax,eax
c0002109:	75 50                	jne    c000215b <sync_window+0x85>
c000210b:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c000210e:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0002111:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0002115:	89 c6                	mov    esi,eax
c0002117:	31 ff                	xor    edi,edi
c0002119:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c000211c:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c000211f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002123:	89 d7                	mov    edi,edx
c0002125:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002129:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000212c:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002130:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002134:	73 23                	jae    c0002159 <sync_window+0x83>
c0002136:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000213a:	75 1d                	jne    c0002159 <sync_window+0x83>
c000213c:	83 ec 0c             	sub    esp,0xc
c000213f:	6a 01                	push   0x1
c0002141:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002145:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002149:	52                   	push   edx
c000214a:	50                   	push   eax
c000214b:	55                   	push   ebp
c000214c:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002150:	50                   	push   eax
c0002151:	e8 08 f8 ff ff       	call   c000195e <disk_write>
c0002156:	83 c4 20             	add    esp,0x20
c0002159:	31 d2                	xor    edx,edx
c000215b:	83 c4 1c             	add    esp,0x1c
c000215e:	89 d0                	mov    eax,edx
c0002160:	5b                   	pop    ebx
c0002161:	5e                   	pop    esi
c0002162:	5f                   	pop    edi
c0002163:	5d                   	pop    ebp
c0002164:	c3                   	ret    
c0002165:	31 d2                	xor    edx,edx
c0002167:	89 d0                	mov    eax,edx
c0002169:	c3                   	ret    

c000216a <move_window>:
c000216a:	56                   	push   esi
c000216b:	53                   	push   ebx
c000216c:	89 c3                	mov    ebx,eax
c000216e:	83 ec 14             	sub    esp,0x14
c0002171:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002174:	75 07                	jne    c000217d <move_window+0x13>
c0002176:	31 f6                	xor    esi,esi
c0002178:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000217b:	74 59                	je     c00021d6 <move_window+0x6c>
c000217d:	89 d8                	mov    eax,ebx
c000217f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002183:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002187:	e8 4a ff ff ff       	call   c00020d6 <sync_window>
c000218c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002190:	89 c6                	mov    esi,eax
c0002192:	85 c0                	test   eax,eax
c0002194:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002198:	75 3c                	jne    c00021d6 <move_window+0x6c>
c000219a:	83 ec 0c             	sub    esp,0xc
c000219d:	8d 43 54             	lea    eax,[ebx+0x54]
c00021a0:	6a 01                	push   0x1
c00021a2:	51                   	push   ecx
c00021a3:	52                   	push   edx
c00021a4:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00021a8:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00021ac:	50                   	push   eax
c00021ad:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021b1:	50                   	push   eax
c00021b2:	e8 91 f7 ff ff       	call   c0001948 <disk_read>
c00021b7:	83 c4 20             	add    esp,0x20
c00021ba:	85 c0                	test   eax,eax
c00021bc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00021c0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021c4:	74 0a                	je     c00021d0 <move_window+0x66>
c00021c6:	83 ca ff             	or     edx,0xffffffff
c00021c9:	be 01 00 00 00       	mov    esi,0x1
c00021ce:	89 d1                	mov    ecx,edx
c00021d0:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00021d3:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00021d6:	83 c4 14             	add    esp,0x14
c00021d9:	89 f0                	mov    eax,esi
c00021db:	5b                   	pop    ebx
c00021dc:	5e                   	pop    esi
c00021dd:	c3                   	ret    

c00021de <check_fs>:
c00021de:	53                   	push   ebx
c00021df:	89 c3                	mov    ebx,eax
c00021e1:	83 ec 08             	sub    esp,0x8
c00021e4:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00021e8:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00021ef:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00021f6:	e8 6f ff ff ff       	call   c000216a <move_window>
c00021fb:	ba 04 00 00 00       	mov    edx,0x4
c0002200:	85 c0                	test   eax,eax
c0002202:	0f 85 89 00 00 00    	jne    c0002291 <check_fs+0xb3>
c0002208:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000220e:	e8 80 f7 ff ff       	call   c0001993 <ld_word>
c0002213:	ba 03 00 00 00       	mov    edx,0x3
c0002218:	66 3d 55 aa          	cmp    ax,0xaa55
c000221c:	75 73                	jne    c0002291 <check_fs+0xb3>
c000221e:	ba 00 ff 01 c0       	mov    edx,0xc001ff00
c0002223:	8d 43 54             	lea    eax,[ebx+0x54]
c0002226:	b9 0b 00 00 00       	mov    ecx,0xb
c000222b:	e8 02 f8 ff ff       	call   c0001a32 <mem_cmp>
c0002230:	ba 01 00 00 00       	mov    edx,0x1
c0002235:	85 c0                	test   eax,eax
c0002237:	74 58                	je     c0002291 <check_fs+0xb3>
c0002239:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000223c:	8d 50 18             	lea    edx,[eax+0x18]
c000223f:	80 fa 01             	cmp    dl,0x1
c0002242:	76 09                	jbe    c000224d <check_fs+0x6f>
c0002244:	ba 02 00 00 00       	mov    edx,0x2
c0002249:	3c eb                	cmp    al,0xeb
c000224b:	75 44                	jne    c0002291 <check_fs+0xb3>
c000224d:	ba 2c 2c 02 c0       	mov    edx,0xc0022c2c
c0002252:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002258:	b9 03 00 00 00       	mov    ecx,0x3
c000225d:	e8 d0 f7 ff ff       	call   c0001a32 <mem_cmp>
c0002262:	31 d2                	xor    edx,edx
c0002264:	85 c0                	test   eax,eax
c0002266:	74 29                	je     c0002291 <check_fs+0xb3>
c0002268:	ba 0c ff 01 c0       	mov    edx,0xc001ff0c
c000226d:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002273:	b9 05 00 00 00       	mov    ecx,0x5
c0002278:	e8 b5 f7 ff ff       	call   c0001a32 <mem_cmp>
c000227d:	31 d2                	xor    edx,edx
c000227f:	85 c0                	test   eax,eax
c0002281:	74 0e                	je     c0002291 <check_fs+0xb3>
c0002283:	31 d2                	xor    edx,edx
c0002285:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000228c:	0f 95 c2             	setne  dl
c000228f:	01 d2                	add    edx,edx
c0002291:	83 c4 08             	add    esp,0x8
c0002294:	89 d0                	mov    eax,edx
c0002296:	5b                   	pop    ebx
c0002297:	c3                   	ret    

c0002298 <find_volume>:
c0002298:	55                   	push   ebp
c0002299:	31 c9                	xor    ecx,ecx
c000229b:	57                   	push   edi
c000229c:	56                   	push   esi
c000229d:	89 d6                	mov    esi,edx
c000229f:	53                   	push   ebx
c00022a0:	31 d2                	xor    edx,edx
c00022a2:	83 ec 3c             	sub    esp,0x3c
c00022a5:	89 c3                	mov    ebx,eax
c00022a7:	e8 32 ff ff ff       	call   c00021de <check_fs>
c00022ac:	83 f8 02             	cmp    eax,0x2
c00022af:	74 0e                	je     c00022bf <find_volume+0x27>
c00022b1:	0f 87 56 01 00 00    	ja     c000240d <find_volume+0x175>
c00022b7:	85 f6                	test   esi,esi
c00022b9:	0f 84 4e 01 00 00    	je     c000240d <find_volume+0x175>
c00022bf:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00022c6:	0f 85 df 00 00 00    	jne    c00023ab <find_volume+0x113>
c00022cc:	31 c9                	xor    ecx,ecx
c00022ce:	ba 01 00 00 00       	mov    edx,0x1
c00022d3:	89 d8                	mov    eax,ebx
c00022d5:	e8 90 fe ff ff       	call   c000216a <move_window>
c00022da:	85 c0                	test   eax,eax
c00022dc:	74 0a                	je     c00022e8 <find_volume+0x50>
c00022de:	b8 04 00 00 00       	mov    eax,0x4
c00022e3:	e9 25 01 00 00       	jmp    c000240d <find_volume+0x175>
c00022e8:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00022eb:	89 e8                	mov    eax,ebp
c00022ed:	e8 f6 fc ff ff       	call   c0001fe8 <test_gpt_header>
c00022f2:	85 c0                	test   eax,eax
c00022f4:	75 0a                	jne    c0002300 <find_volume+0x68>
c00022f6:	b8 03 00 00 00       	mov    eax,0x3
c00022fb:	e9 0d 01 00 00       	jmp    c000240d <find_volume+0x175>
c0002300:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c0002306:	e8 95 f6 ff ff       	call   c00019a0 <ld_dword>
c000230b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000230f:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002315:	e8 9e f6 ff ff       	call   c00019b8 <ld_qword>
c000231a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002322:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002326:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000232a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002332:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002336:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000233a:	74 ba                	je     c00022f6 <find_volume+0x5e>
c000233c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002340:	31 c9                	xor    ecx,ecx
c0002342:	c1 e7 07             	shl    edi,0x7
c0002345:	89 d8                	mov    eax,ebx
c0002347:	89 fa                	mov    edx,edi
c0002349:	c1 ea 09             	shr    edx,0x9
c000234c:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002350:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002354:	e8 11 fe ff ff       	call   c000216a <move_window>
c0002359:	85 c0                	test   eax,eax
c000235b:	75 81                	jne    c00022de <find_volume+0x46>
c000235d:	81 e7 80 01 00 00    	and    edi,0x180
c0002363:	b9 10 00 00 00       	mov    ecx,0x10
c0002368:	ba f0 fe 01 c0       	mov    edx,0xc001fef0
c000236d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002371:	e8 bc f6 ff ff       	call   c0001a32 <mem_cmp>
c0002376:	85 c0                	test   eax,eax
c0002378:	75 2b                	jne    c00023a5 <find_volume+0x10d>
c000237a:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c000237e:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002382:	e8 31 f6 ff ff       	call   c00019b8 <ld_qword>
c0002387:	89 d1                	mov    ecx,edx
c0002389:	89 c2                	mov    edx,eax
c000238b:	89 d8                	mov    eax,ebx
c000238d:	e8 4c fe ff ff       	call   c00021de <check_fs>
c0002392:	85 f6                	test   esi,esi
c0002394:	75 05                	jne    c000239b <find_volume+0x103>
c0002396:	83 f8 01             	cmp    eax,0x1
c0002399:	76 72                	jbe    c000240d <find_volume+0x175>
c000239b:	85 f6                	test   esi,esi
c000239d:	74 06                	je     c00023a5 <find_volume+0x10d>
c000239f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00023a3:	74 68                	je     c000240d <find_volume+0x175>
c00023a5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00023a9:	eb 87                	jmp    c0002332 <find_volume+0x9a>
c00023ab:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00023af:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00023b5:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00023bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023bf:	89 cd                	mov    ebp,ecx
c00023c1:	89 f8                	mov    eax,edi
c00023c3:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00023c7:	e8 d4 f5 ff ff       	call   c00019a0 <ld_dword>
c00023cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00023d0:	83 c7 10             	add    edi,0x10
c00023d3:	83 c1 04             	add    ecx,0x4
c00023d6:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00023d9:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00023dd:	75 e2                	jne    c00023c1 <find_volume+0x129>
c00023df:	31 ff                	xor    edi,edi
c00023e1:	85 f6                	test   esi,esi
c00023e3:	74 03                	je     c00023e8 <find_volume+0x150>
c00023e5:	8d 7e ff             	lea    edi,[esi-0x1]
c00023e8:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00023ec:	b8 03 00 00 00       	mov    eax,0x3
c00023f1:	85 d2                	test   edx,edx
c00023f3:	74 09                	je     c00023fe <find_volume+0x166>
c00023f5:	31 c9                	xor    ecx,ecx
c00023f7:	89 d8                	mov    eax,ebx
c00023f9:	e8 e0 fd ff ff       	call   c00021de <check_fs>
c00023fe:	85 f6                	test   esi,esi
c0002400:	75 0b                	jne    c000240d <find_volume+0x175>
c0002402:	83 f8 01             	cmp    eax,0x1
c0002405:	76 06                	jbe    c000240d <find_volume+0x175>
c0002407:	47                   	inc    edi
c0002408:	83 ff 03             	cmp    edi,0x3
c000240b:	76 db                	jbe    c00023e8 <find_volume+0x150>
c000240d:	83 c4 3c             	add    esp,0x3c
c0002410:	5b                   	pop    ebx
c0002411:	5e                   	pop    esi
c0002412:	5f                   	pop    edi
c0002413:	5d                   	pop    ebp
c0002414:	c3                   	ret    

c0002415 <mount_volume>:
c0002415:	55                   	push   ebp
c0002416:	57                   	push   edi
c0002417:	89 cf                	mov    edi,ecx
c0002419:	56                   	push   esi
c000241a:	53                   	push   ebx
c000241b:	bb 0b 00 00 00       	mov    ebx,0xb
c0002420:	83 ec 3c             	sub    esp,0x3c
c0002423:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002429:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000242d:	e8 43 fb ff ff       	call   c0001f75 <get_ldnumber>
c0002432:	85 c0                	test   eax,eax
c0002434:	0f 88 3b 05 00 00    	js     c0002975 <mount_volume+0x560>
c000243a:	8b 2c 85 c0 40 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdbf40]
c0002441:	89 c6                	mov    esi,eax
c0002443:	bb 0c 00 00 00       	mov    ebx,0xc
c0002448:	85 ed                	test   ebp,ebp
c000244a:	0f 84 25 05 00 00    	je     c0002975 <mount_volume+0x560>
c0002450:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002454:	83 e7 fe             	and    edi,0xfffffffe
c0002457:	89 2a                	mov    DWORD PTR [edx],ebp
c0002459:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000245d:	74 32                	je     c0002491 <mount_volume+0x7c>
c000245f:	83 ec 0c             	sub    esp,0xc
c0002462:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002466:	50                   	push   eax
c0002467:	e8 d6 f4 ff ff       	call   c0001942 <disk_status>
c000246c:	83 c4 10             	add    esp,0x10
c000246f:	a8 01                	test   al,0x1
c0002471:	75 1e                	jne    c0002491 <mount_volume+0x7c>
c0002473:	89 f9                	mov    ecx,edi
c0002475:	31 db                	xor    ebx,ebx
c0002477:	84 c9                	test   cl,cl
c0002479:	0f 84 f6 04 00 00    	je     c0002975 <mount_volume+0x560>
c000247f:	a8 04                	test   al,0x4
c0002481:	0f 84 ee 04 00 00    	je     c0002975 <mount_volume+0x560>
c0002487:	bb 0a 00 00 00       	mov    ebx,0xa
c000248c:	e9 e4 04 00 00       	jmp    c0002975 <mount_volume+0x560>
c0002491:	83 ec 0c             	sub    esp,0xc
c0002494:	89 f0                	mov    eax,esi
c0002496:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c000249a:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000249d:	0f b6 f0             	movzx  esi,al
c00024a0:	56                   	push   esi
c00024a1:	e8 9f f4 ff ff       	call   c0001945 <disk_initialize>
c00024a6:	bb 03 00 00 00       	mov    ebx,0x3
c00024ab:	83 c4 10             	add    esp,0x10
c00024ae:	a8 01                	test   al,0x1
c00024b0:	0f 85 bf 04 00 00    	jne    c0002975 <mount_volume+0x560>
c00024b6:	89 f9                	mov    ecx,edi
c00024b8:	84 c9                	test   cl,cl
c00024ba:	74 04                	je     c00024c0 <mount_volume+0xab>
c00024bc:	a8 04                	test   al,0x4
c00024be:	75 c7                	jne    c0002487 <mount_volume+0x72>
c00024c0:	31 d2                	xor    edx,edx
c00024c2:	89 e8                	mov    eax,ebp
c00024c4:	e8 cf fd ff ff       	call   c0002298 <find_volume>
c00024c9:	83 f8 04             	cmp    eax,0x4
c00024cc:	75 0a                	jne    c00024d8 <mount_volume+0xc3>
c00024ce:	bb 01 00 00 00       	mov    ebx,0x1
c00024d3:	e9 9d 04 00 00       	jmp    c0002975 <mount_volume+0x560>
c00024d8:	83 f8 01             	cmp    eax,0x1
c00024db:	76 0a                	jbe    c00024e7 <mount_volume+0xd2>
c00024dd:	bb 0d 00 00 00       	mov    ebx,0xd
c00024e2:	e9 8e 04 00 00       	jmp    c0002975 <mount_volume+0x560>
c00024e7:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00024ea:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00024ed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024f1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00024f5:	75 17                	jne    c000250e <mount_volume+0xf9>
c00024f7:	b8 0b 00 00 00       	mov    eax,0xb
c00024fc:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c0002501:	75 da                	jne    c00024dd <mount_volume+0xc8>
c0002503:	40                   	inc    eax
c0002504:	83 f8 40             	cmp    eax,0x40
c0002507:	75 f3                	jne    c00024fc <mount_volume+0xe7>
c0002509:	e9 5a 02 00 00       	jmp    c0002768 <mount_volume+0x353>
c000250e:	8d 45 5f             	lea    eax,[ebp+0x5f]
c0002511:	e8 7d f4 ff ff       	call   c0001993 <ld_word>
c0002516:	66 3d 00 02          	cmp    ax,0x200
c000251a:	75 c1                	jne    c00024dd <mount_volume+0xc8>
c000251c:	8d 45 6a             	lea    eax,[ebp+0x6a]
c000251f:	e8 6f f4 ff ff       	call   c0001993 <ld_word>
c0002524:	0f b7 c0             	movzx  eax,ax
c0002527:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000252b:	85 c0                	test   eax,eax
c000252d:	75 0c                	jne    c000253b <mount_volume+0x126>
c000252f:	8d 45 78             	lea    eax,[ebp+0x78]
c0002532:	e8 69 f4 ff ff       	call   c00019a0 <ld_dword>
c0002537:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000253b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000253f:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002542:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002545:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002549:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000254c:	48                   	dec    eax
c000254d:	3c 01                	cmp    al,0x1
c000254f:	77 8c                	ja     c00024dd <mount_volume+0xc8>
c0002551:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002555:	89 c3                	mov    ebx,eax
c0002557:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c000255b:	66 85 c0             	test   ax,ax
c000255e:	0f 84 79 ff ff ff    	je     c00024dd <mount_volume+0xc8>
c0002564:	8d 40 ff             	lea    eax,[eax-0x1]
c0002567:	85 d8                	test   eax,ebx
c0002569:	0f 85 6e ff ff ff    	jne    c00024dd <mount_volume+0xc8>
c000256f:	8d 45 65             	lea    eax,[ebp+0x65]
c0002572:	e8 1c f4 ff ff       	call   c0001993 <ld_word>
c0002577:	89 c7                	mov    edi,eax
c0002579:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000257d:	a8 0f                	test   al,0xf
c000257f:	0f 85 58 ff ff ff    	jne    c00024dd <mount_volume+0xc8>
c0002585:	8d 45 67             	lea    eax,[ebp+0x67]
c0002588:	e8 06 f4 ff ff       	call   c0001993 <ld_word>
c000258d:	0f b7 f0             	movzx  esi,ax
c0002590:	85 f6                	test   esi,esi
c0002592:	75 0a                	jne    c000259e <mount_volume+0x189>
c0002594:	8d 45 74             	lea    eax,[ebp+0x74]
c0002597:	e8 04 f4 ff ff       	call   c00019a0 <ld_dword>
c000259c:	89 c6                	mov    esi,eax
c000259e:	8d 45 62             	lea    eax,[ebp+0x62]
c00025a1:	e8 ed f3 ff ff       	call   c0001993 <ld_word>
c00025a6:	66 85 c0             	test   ax,ax
c00025a9:	0f 84 2e ff ff ff    	je     c00024dd <mount_volume+0xc8>
c00025af:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00025b4:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00025b9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00025bd:	89 fa                	mov    edx,edi
c00025bf:	66 c1 ea 04          	shr    dx,0x4
c00025c3:	0f b7 d2             	movzx  edx,dx
c00025c6:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00025ca:	0f b7 c8             	movzx  ecx,ax
c00025cd:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00025d0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025d4:	39 c6                	cmp    esi,eax
c00025d6:	0f 82 01 ff ff ff    	jb     c00024dd <mount_volume+0xc8>
c00025dc:	29 c6                	sub    esi,eax
c00025de:	31 d2                	xor    edx,edx
c00025e0:	89 f0                	mov    eax,esi
c00025e2:	f7 f3                	div    ebx
c00025e4:	39 de                	cmp    esi,ebx
c00025e6:	0f 82 f1 fe ff ff    	jb     c00024dd <mount_volume+0xc8>
c00025ec:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00025f1:	0f 87 e6 fe ff ff    	ja     c00024dd <mount_volume+0xc8>
c00025f7:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00025fc:	0f 86 63 03 00 00    	jbe    c0002965 <mount_volume+0x550>
c0002602:	bb 03 00 00 00       	mov    ebx,0x3
c0002607:	8d 70 02             	lea    esi,[eax+0x2]
c000260a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000260e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002612:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002615:	89 c8                	mov    eax,ecx
c0002617:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000261a:	31 d2                	xor    edx,edx
c000261c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002620:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002624:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002628:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000262b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000262f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002633:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002636:	31 d2                	xor    edx,edx
c0002638:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000263c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002640:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002643:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002646:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002649:	83 fb 03             	cmp    ebx,0x3
c000264c:	75 2b                	jne    c0002679 <mount_volume+0x264>
c000264e:	8d 45 7e             	lea    eax,[ebp+0x7e]
c0002651:	e8 3d f3 ff ff       	call   c0001993 <ld_word>
c0002656:	66 09 c7             	or     di,ax
c0002659:	0f 85 7e fe ff ff    	jne    c00024dd <mount_volume+0xc8>
c000265f:	c1 e6 02             	shl    esi,0x2
c0002662:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002668:	e8 33 f3 ff ff       	call   c00019a0 <ld_dword>
c000266d:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002674:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002677:	eb 30                	jmp    c00026a9 <mount_volume+0x294>
c0002679:	66 85 ff             	test   di,di
c000267c:	0f 84 5b fe ff ff    	je     c00024dd <mount_volume+0xc8>
c0002682:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002686:	31 d2                	xor    edx,edx
c0002688:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000268c:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002690:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002693:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002696:	83 fb 02             	cmp    ebx,0x2
c0002699:	75 04                	jne    c000269f <mount_volume+0x28a>
c000269b:	01 f6                	add    esi,esi
c000269d:	eb 0a                	jmp    c00026a9 <mount_volume+0x294>
c000269f:	8d 04 76             	lea    eax,[esi+esi*2]
c00026a2:	83 e6 01             	and    esi,0x1
c00026a5:	d1 e8                	shr    eax,1
c00026a7:	01 c6                	add    esi,eax
c00026a9:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00026af:	c1 ee 09             	shr    esi,0x9
c00026b2:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026b6:	0f 87 21 fe ff ff    	ja     c00024dd <mount_volume+0xc8>
c00026bc:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00026c3:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00026ca:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00026ce:	83 fb 03             	cmp    ebx,0x3
c00026d1:	75 7a                	jne    c000274d <mount_volume+0x338>
c00026d3:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00026d9:	e8 b5 f2 ff ff       	call   c0001993 <ld_word>
c00026de:	66 48                	dec    ax
c00026e0:	75 6b                	jne    c000274d <mount_volume+0x338>
c00026e2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026ea:	83 c2 01             	add    edx,0x1
c00026ed:	89 e8                	mov    eax,ebp
c00026ef:	83 d1 00             	adc    ecx,0x0
c00026f2:	e8 73 fa ff ff       	call   c000216a <move_window>
c00026f7:	85 c0                	test   eax,eax
c00026f9:	75 52                	jne    c000274d <mount_volume+0x338>
c00026fb:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00026ff:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c0002705:	e8 89 f2 ff ff       	call   c0001993 <ld_word>
c000270a:	66 3d 55 aa          	cmp    ax,0xaa55
c000270e:	75 3d                	jne    c000274d <mount_volume+0x338>
c0002710:	8d 45 54             	lea    eax,[ebp+0x54]
c0002713:	e8 88 f2 ff ff       	call   c00019a0 <ld_dword>
c0002718:	3d 52 52 61 41       	cmp    eax,0x41615252
c000271d:	75 2e                	jne    c000274d <mount_volume+0x338>
c000271f:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002725:	e8 76 f2 ff ff       	call   c00019a0 <ld_dword>
c000272a:	3d 72 72 41 61       	cmp    eax,0x61417272
c000272f:	75 1c                	jne    c000274d <mount_volume+0x338>
c0002731:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002737:	e8 64 f2 ff ff       	call   c00019a0 <ld_dword>
c000273c:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c000273f:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002745:	e8 56 f2 ff ff       	call   c00019a0 <ld_dword>
c000274a:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c000274d:	66 a1 a0 40 02 c0    	mov    ax,ds:0xc00240a0
c0002753:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002756:	40                   	inc    eax
c0002757:	31 db                	xor    ebx,ebx
c0002759:	66 a3 a0 40 02 c0    	mov    ds:0xc00240a0,ax
c000275f:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002763:	e9 0d 02 00 00       	jmp    c0002975 <mount_volume+0x560>
c0002768:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c000276e:	e8 20 f2 ff ff       	call   c0001993 <ld_word>
c0002773:	66 3d 00 01          	cmp    ax,0x100
c0002777:	0f 85 60 fd ff ff    	jne    c00024dd <mount_volume+0xc8>
c000277d:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002784:	0f 85 53 fd ff ff    	jne    c00024dd <mount_volume+0xc8>
c000278a:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002790:	e8 23 f2 ff ff       	call   c00019b8 <ld_qword>
c0002795:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002799:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c000279f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00027a3:	e8 f8 f1 ff ff       	call   c00019a0 <ld_dword>
c00027a8:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027ab:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c00027b1:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027b4:	fe c8                	dec    al
c00027b6:	0f 85 21 fd ff ff    	jne    c00024dd <mount_volume+0xc8>
c00027bc:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00027c3:	bb 01 00 00 00       	mov    ebx,0x1
c00027c8:	d3 e3                	shl    ebx,cl
c00027ca:	66 85 db             	test   bx,bx
c00027cd:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00027d1:	0f 84 06 fd ff ff    	je     c00024dd <mount_volume+0xc8>
c00027d7:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00027dd:	e8 be f1 ff ff       	call   c00019a0 <ld_dword>
c00027e2:	89 c6                	mov    esi,eax
c00027e4:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00027e9:	0f 87 ee fc ff ff    	ja     c00024dd <mount_volume+0xc8>
c00027ef:	8d 40 02             	lea    eax,[eax+0x2]
c00027f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027f6:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00027f9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00027fd:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002800:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002803:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002809:	e8 92 f1 ff ff       	call   c00019a0 <ld_dword>
c000280e:	31 d2                	xor    edx,edx
c0002810:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002814:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002818:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000281c:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000281f:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002822:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000282c:	e8 6f f1 ff ff       	call   c00019a0 <ld_dword>
c0002831:	31 d2                	xor    edx,edx
c0002833:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002837:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000283b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000283f:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002842:	0f b7 c3             	movzx  eax,bx
c0002845:	0f af f0             	imul   esi,eax
c0002848:	89 f0                	mov    eax,esi
c000284a:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000284d:	31 d2                	xor    edx,edx
c000284f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002853:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002857:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c000285b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000285f:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002863:	39 c1                	cmp    ecx,eax
c0002865:	89 df                	mov    edi,ebx
c0002867:	19 d7                	sbb    edi,edx
c0002869:	0f 82 6e fc ff ff    	jb     c00024dd <mount_volume+0xc8>
c000286f:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002875:	31 db                	xor    ebx,ebx
c0002877:	e8 24 f1 ff ff       	call   c00019a0 <ld_dword>
c000287c:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002883:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002886:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000288e:	85 db                	test   ebx,ebx
c0002890:	75 39                	jne    c00028cb <mount_volume+0x4b6>
c0002892:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002896:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000289a:	0f 86 3d fc ff ff    	jbe    c00024dd <mount_volume+0xc8>
c00028a0:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c00028a3:	89 e8                	mov    eax,ebp
c00028a5:	e8 82 f3 ff ff       	call   c0001c2c <clst2sect>
c00028aa:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028ae:	31 ff                	xor    edi,edi
c00028b0:	01 c6                	add    esi,eax
c00028b2:	11 d7                	adc    edi,edx
c00028b4:	89 e8                	mov    eax,ebp
c00028b6:	89 f2                	mov    edx,esi
c00028b8:	89 f9                	mov    ecx,edi
c00028ba:	e8 ab f8 ff ff       	call   c000216a <move_window>
c00028bf:	85 c0                	test   eax,eax
c00028c1:	0f 85 07 fc ff ff    	jne    c00024ce <mount_volume+0xb9>
c00028c7:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00028cb:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00028d0:	74 0b                	je     c00028dd <mount_volume+0x4c8>
c00028d2:	83 c3 20             	add    ebx,0x20
c00028d5:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00028db:	eb b1                	jmp    c000288e <mount_volume+0x479>
c00028dd:	8d 75 54             	lea    esi,[ebp+0x54]
c00028e0:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00028e4:	e8 b7 f0 ff ff       	call   c00019a0 <ld_dword>
c00028e9:	89 c3                	mov    ebx,eax
c00028eb:	83 f8 01             	cmp    eax,0x1
c00028ee:	0f 86 e9 fb ff ff    	jbe    c00024dd <mount_volume+0xc8>
c00028f4:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00028f7:	0f 86 e0 fb ff ff    	jbe    c00024dd <mount_volume+0xc8>
c00028fd:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002901:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002904:	0f af c2             	imul   eax,edx
c0002907:	31 d2                	xor    edx,edx
c0002909:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c000290c:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c000290f:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002912:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002915:	89 da                	mov    edx,ebx
c0002917:	31 c9                	xor    ecx,ecx
c0002919:	c1 ea 07             	shr    edx,0x7
c000291c:	89 e8                	mov    eax,ebp
c000291e:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002921:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002924:	e8 41 f8 ff ff       	call   c000216a <move_window>
c0002929:	85 c0                	test   eax,eax
c000292b:	0f 85 9d fb ff ff    	jne    c00024ce <mount_volume+0xb9>
c0002931:	89 d8                	mov    eax,ebx
c0002933:	83 e0 7f             	and    eax,0x7f
c0002936:	8d 04 86             	lea    eax,[esi+eax*4]
c0002939:	e8 62 f0 ff ff       	call   c00019a0 <ld_dword>
c000293e:	83 f8 ff             	cmp    eax,0xffffffff
c0002941:	74 0a                	je     c000294d <mount_volume+0x538>
c0002943:	43                   	inc    ebx
c0002944:	39 d8                	cmp    eax,ebx
c0002946:	74 cd                	je     c0002915 <mount_volume+0x500>
c0002948:	e9 90 fb ff ff       	jmp    c00024dd <mount_volume+0xc8>
c000294d:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002954:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c000295b:	bb 04 00 00 00       	mov    ebx,0x4
c0002960:	e9 e8 fd ff ff       	jmp    c000274d <mount_volume+0x338>
c0002965:	31 db                	xor    ebx,ebx
c0002967:	3d f5 0f 00 00       	cmp    eax,0xff5
c000296c:	0f 97 c3             	seta   bl
c000296f:	43                   	inc    ebx
c0002970:	e9 92 fc ff ff       	jmp    c0002607 <mount_volume+0x1f2>
c0002975:	83 c4 3c             	add    esp,0x3c
c0002978:	89 d8                	mov    eax,ebx
c000297a:	5b                   	pop    ebx
c000297b:	5e                   	pop    esi
c000297c:	5f                   	pop    edi
c000297d:	5d                   	pop    ebp
c000297e:	c3                   	ret    

c000297f <find_bitmap>:
c000297f:	55                   	push   ebp
c0002980:	57                   	push   edi
c0002981:	89 c7                	mov    edi,eax
c0002983:	56                   	push   esi
c0002984:	8d 72 fe             	lea    esi,[edx-0x2]
c0002987:	53                   	push   ebx
c0002988:	83 ec 1c             	sub    esp,0x1c
c000298b:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c000298e:	83 e8 02             	sub    eax,0x2
c0002991:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002995:	39 f0                	cmp    eax,esi
c0002997:	77 02                	ja     c000299b <find_bitmap+0x1c>
c0002999:	31 f6                	xor    esi,esi
c000299b:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000299f:	89 f3                	mov    ebx,esi
c00029a1:	31 ed                	xor    ebp,ebp
c00029a3:	89 da                	mov    edx,ebx
c00029a5:	31 c9                	xor    ecx,ecx
c00029a7:	c1 ea 0c             	shr    edx,0xc
c00029aa:	89 f8                	mov    eax,edi
c00029ac:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c00029af:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c00029b2:	e8 b3 f7 ff ff       	call   c000216a <move_window>
c00029b7:	85 c0                	test   eax,eax
c00029b9:	75 68                	jne    c0002a23 <find_bitmap+0xa4>
c00029bb:	89 d9                	mov    ecx,ebx
c00029bd:	b8 01 00 00 00       	mov    eax,0x1
c00029c2:	83 e1 07             	and    ecx,0x7
c00029c5:	89 da                	mov    edx,ebx
c00029c7:	d3 e0                	shl    eax,cl
c00029c9:	c1 ea 03             	shr    edx,0x3
c00029cc:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c00029cf:	83 e9 02             	sub    ecx,0x2
c00029d2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c00029d8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00029dc:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c00029e0:	43                   	inc    ebx
c00029e1:	21 c1                	and    ecx,eax
c00029e3:	01 c0                	add    eax,eax
c00029e5:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c00029e9:	77 09                	ja     c00029f4 <find_bitmap+0x75>
c00029eb:	31 db                	xor    ebx,ebx
c00029ed:	ba 00 02 00 00       	mov    edx,0x200
c00029f2:	31 c0                	xor    eax,eax
c00029f4:	84 c9                	test   cl,cl
c00029f6:	75 10                	jne    c0002a08 <find_bitmap+0x89>
c00029f8:	45                   	inc    ebp
c00029f9:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00029fd:	75 0f                	jne    c0002a0e <find_bitmap+0x8f>
c00029ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a03:	83 c0 02             	add    eax,0x2
c0002a06:	eb 22                	jmp    c0002a2a <find_bitmap+0xab>
c0002a08:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a0c:	31 ed                	xor    ebp,ebp
c0002a0e:	39 de                	cmp    esi,ebx
c0002a10:	74 16                	je     c0002a28 <find_bitmap+0xa9>
c0002a12:	84 c0                	test   al,al
c0002a14:	75 c6                	jne    c00029dc <find_bitmap+0x5d>
c0002a16:	42                   	inc    edx
c0002a17:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a1d:	77 84                	ja     c00029a3 <find_bitmap+0x24>
c0002a1f:	b0 01                	mov    al,0x1
c0002a21:	eb b9                	jmp    c00029dc <find_bitmap+0x5d>
c0002a23:	83 c8 ff             	or     eax,0xffffffff
c0002a26:	eb 02                	jmp    c0002a2a <find_bitmap+0xab>
c0002a28:	31 c0                	xor    eax,eax
c0002a2a:	83 c4 1c             	add    esp,0x1c
c0002a2d:	5b                   	pop    ebx
c0002a2e:	5e                   	pop    esi
c0002a2f:	5f                   	pop    edi
c0002a30:	5d                   	pop    ebp
c0002a31:	c3                   	ret    

c0002a32 <change_bitmap>:
c0002a32:	55                   	push   ebp
c0002a33:	89 cd                	mov    ebp,ecx
c0002a35:	57                   	push   edi
c0002a36:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002a39:	56                   	push   esi
c0002a3a:	89 c7                	mov    edi,eax
c0002a3c:	53                   	push   ebx
c0002a3d:	89 c8                	mov    eax,ecx
c0002a3f:	83 ec 1c             	sub    esp,0x1c
c0002a42:	31 d2                	xor    edx,edx
c0002a44:	c1 e8 0c             	shr    eax,0xc
c0002a47:	89 ce                	mov    esi,ecx
c0002a49:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002a4c:	bb 01 00 00 00       	mov    ebx,0x1
c0002a51:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002a54:	83 e1 07             	and    ecx,0x7
c0002a57:	c1 ee 03             	shr    esi,0x3
c0002a5a:	d3 e3                	shl    ebx,cl
c0002a5c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002a62:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002a66:	89 c1                	mov    ecx,eax
c0002a68:	89 d3                	mov    ebx,edx
c0002a6a:	83 c1 01             	add    ecx,0x1
c0002a6d:	83 d3 00             	adc    ebx,0x0
c0002a70:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a74:	89 d1                	mov    ecx,edx
c0002a76:	89 c2                	mov    edx,eax
c0002a78:	89 f8                	mov    eax,edi
c0002a7a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002a7e:	e8 e7 f6 ff ff       	call   c000216a <move_window>
c0002a83:	89 c1                	mov    ecx,eax
c0002a85:	85 c0                	test   eax,eax
c0002a87:	75 48                	jne    c0002ad1 <change_bitmap+0x9f>
c0002a89:	31 d2                	xor    edx,edx
c0002a8b:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002a8f:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002a93:	0f 95 c2             	setne  dl
c0002a96:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002a9a:	74 3c                	je     c0002ad8 <change_bitmap+0xa6>
c0002a9c:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002aa0:	4d                   	dec    ebp
c0002aa1:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002aa5:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002aa9:	74 32                	je     c0002add <change_bitmap+0xab>
c0002aab:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002aaf:	75 d8                	jne    c0002a89 <change_bitmap+0x57>
c0002ab1:	8d 46 01             	lea    eax,[esi+0x1]
c0002ab4:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002ab9:	89 c3                	mov    ebx,eax
c0002abb:	31 f6                	xor    esi,esi
c0002abd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ac1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ac5:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002acb:	74 99                	je     c0002a66 <change_bitmap+0x34>
c0002acd:	89 de                	mov    esi,ebx
c0002acf:	eb b8                	jmp    c0002a89 <change_bitmap+0x57>
c0002ad1:	b9 01 00 00 00       	mov    ecx,0x1
c0002ad6:	eb 05                	jmp    c0002add <change_bitmap+0xab>
c0002ad8:	b9 02 00 00 00       	mov    ecx,0x2
c0002add:	83 c4 1c             	add    esp,0x1c
c0002ae0:	89 c8                	mov    eax,ecx
c0002ae2:	5b                   	pop    ebx
c0002ae3:	5e                   	pop    esi
c0002ae4:	5f                   	pop    edi
c0002ae5:	5d                   	pop    ebp
c0002ae6:	c3                   	ret    

c0002ae7 <put_fat>:
c0002ae7:	83 fa 01             	cmp    edx,0x1
c0002aea:	0f 86 7b 01 00 00    	jbe    c0002c6b <put_fat+0x184>
c0002af0:	55                   	push   ebp
c0002af1:	57                   	push   edi
c0002af2:	89 cf                	mov    edi,ecx
c0002af4:	56                   	push   esi
c0002af5:	b9 02 00 00 00       	mov    ecx,0x2
c0002afa:	53                   	push   ebx
c0002afb:	89 c6                	mov    esi,eax
c0002afd:	83 ec 1c             	sub    esp,0x1c
c0002b00:	89 d3                	mov    ebx,edx
c0002b02:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b05:	0f 86 68 01 00 00    	jbe    c0002c73 <put_fat+0x18c>
c0002b0b:	8a 00                	mov    al,BYTE PTR [eax]
c0002b0d:	3c 02                	cmp    al,0x2
c0002b0f:	0f 84 c7 00 00 00    	je     c0002bdc <put_fat+0xf5>
c0002b15:	77 09                	ja     c0002b20 <put_fat+0x39>
c0002b17:	fe c8                	dec    al
c0002b19:	74 17                	je     c0002b32 <put_fat+0x4b>
c0002b1b:	e9 53 01 00 00       	jmp    c0002c73 <put_fat+0x18c>
c0002b20:	b9 02 00 00 00       	mov    ecx,0x2
c0002b25:	3c 04                	cmp    al,0x4
c0002b27:	0f 86 e1 00 00 00    	jbe    c0002c0e <put_fat+0x127>
c0002b2d:	e9 41 01 00 00       	jmp    c0002c73 <put_fat+0x18c>
c0002b32:	89 d5                	mov    ebp,edx
c0002b34:	31 c9                	xor    ecx,ecx
c0002b36:	d1 ed                	shr    ebp,1
c0002b38:	89 f0                	mov    eax,esi
c0002b3a:	01 d5                	add    ebp,edx
c0002b3c:	89 ea                	mov    edx,ebp
c0002b3e:	c1 ea 09             	shr    edx,0x9
c0002b41:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b44:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b47:	e8 1e f6 ff ff       	call   c000216a <move_window>
c0002b4c:	89 c1                	mov    ecx,eax
c0002b4e:	85 c0                	test   eax,eax
c0002b50:	0f 85 1d 01 00 00    	jne    c0002c73 <put_fat+0x18c>
c0002b56:	8d 46 54             	lea    eax,[esi+0x54]
c0002b59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b5d:	8d 45 01             	lea    eax,[ebp+0x1]
c0002b60:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002b66:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b6a:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002b6e:	83 e3 01             	and    ebx,0x1
c0002b71:	89 f8                	mov    eax,edi
c0002b73:	74 0d                	je     c0002b82 <put_fat+0x9b>
c0002b75:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002b78:	89 fa                	mov    edx,edi
c0002b7a:	c1 e2 04             	shl    edx,0x4
c0002b7d:	83 e0 0f             	and    eax,0xf
c0002b80:	09 d0                	or     eax,edx
c0002b82:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b86:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002b89:	c1 ea 09             	shr    edx,0x9
c0002b8c:	31 c9                	xor    ecx,ecx
c0002b8e:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b91:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b95:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b98:	89 f0                	mov    eax,esi
c0002b9a:	e8 cb f5 ff ff       	call   c000216a <move_window>
c0002b9f:	89 c1                	mov    ecx,eax
c0002ba1:	85 c0                	test   eax,eax
c0002ba3:	0f 85 ca 00 00 00    	jne    c0002c73 <put_fat+0x18c>
c0002ba9:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002bad:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bb3:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bb7:	85 db                	test   ebx,ebx
c0002bb9:	74 07                	je     c0002bc2 <put_fat+0xdb>
c0002bbb:	c1 ef 04             	shr    edi,0x4
c0002bbe:	89 fa                	mov    edx,edi
c0002bc0:	eb 0e                	jmp    c0002bd0 <put_fat+0xe9>
c0002bc2:	c1 ef 08             	shr    edi,0x8
c0002bc5:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002bc8:	83 e2 f0             	and    edx,0xfffffff0
c0002bcb:	83 e7 0f             	and    edi,0xf
c0002bce:	09 fa                	or     edx,edi
c0002bd0:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002bd3:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bd7:	e9 97 00 00 00       	jmp    c0002c73 <put_fat+0x18c>
c0002bdc:	c1 ea 08             	shr    edx,0x8
c0002bdf:	31 c9                	xor    ecx,ecx
c0002be1:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002be4:	89 f0                	mov    eax,esi
c0002be6:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002be9:	e8 7c f5 ff ff       	call   c000216a <move_window>
c0002bee:	89 c1                	mov    ecx,eax
c0002bf0:	85 c0                	test   eax,eax
c0002bf2:	75 7f                	jne    c0002c73 <put_fat+0x18c>
c0002bf4:	01 db                	add    ebx,ebx
c0002bf6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bfa:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c00:	0f b7 d7             	movzx  edx,di
c0002c03:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c07:	e8 f9 ed ff ff       	call   c0001a05 <st_word>
c0002c0c:	eb 53                	jmp    c0002c61 <put_fat+0x17a>
c0002c0e:	c1 ea 07             	shr    edx,0x7
c0002c11:	31 c9                	xor    ecx,ecx
c0002c13:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c16:	89 f0                	mov    eax,esi
c0002c18:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c1b:	e8 4a f5 ff ff       	call   c000216a <move_window>
c0002c20:	89 c1                	mov    ecx,eax
c0002c22:	85 c0                	test   eax,eax
c0002c24:	75 4d                	jne    c0002c73 <put_fat+0x18c>
c0002c26:	c1 e3 02             	shl    ebx,0x2
c0002c29:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c2f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002c32:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002c36:	74 1c                	je     c0002c54 <put_fat+0x16d>
c0002c38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c3c:	89 d8                	mov    eax,ebx
c0002c3e:	e8 5d ed ff ff       	call   c00019a0 <ld_dword>
c0002c43:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c49:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c4e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c52:	09 c7                	or     edi,eax
c0002c54:	89 fa                	mov    edx,edi
c0002c56:	89 d8                	mov    eax,ebx
c0002c58:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c5c:	e8 a8 ed ff ff       	call   c0001a09 <st_dword>
c0002c61:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c65:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c69:	eb 08                	jmp    c0002c73 <put_fat+0x18c>
c0002c6b:	b9 02 00 00 00       	mov    ecx,0x2
c0002c70:	89 c8                	mov    eax,ecx
c0002c72:	c3                   	ret    
c0002c73:	83 c4 1c             	add    esp,0x1c
c0002c76:	89 c8                	mov    eax,ecx
c0002c78:	5b                   	pop    ebx
c0002c79:	5e                   	pop    esi
c0002c7a:	5f                   	pop    edi
c0002c7b:	5d                   	pop    ebp
c0002c7c:	c3                   	ret    

c0002c7d <fill_last_frag>:
c0002c7d:	57                   	push   edi
c0002c7e:	89 cf                	mov    edi,ecx
c0002c80:	56                   	push   esi
c0002c81:	89 d6                	mov    esi,edx
c0002c83:	53                   	push   ebx
c0002c84:	89 c3                	mov    ebx,eax
c0002c86:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002c89:	85 c0                	test   eax,eax
c0002c8b:	74 21                	je     c0002cae <fill_last_frag+0x31>
c0002c8d:	89 f9                	mov    ecx,edi
c0002c8f:	83 f8 01             	cmp    eax,0x1
c0002c92:	76 05                	jbe    c0002c99 <fill_last_frag+0x1c>
c0002c94:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002c97:	29 c1                	sub    ecx,eax
c0002c99:	8d 56 01             	lea    edx,[esi+0x1]
c0002c9c:	29 c2                	sub    edx,eax
c0002c9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ca0:	e8 42 fe ff ff       	call   c0002ae7 <put_fat>
c0002ca5:	85 c0                	test   eax,eax
c0002ca7:	75 05                	jne    c0002cae <fill_last_frag+0x31>
c0002ca9:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002cac:	eb d8                	jmp    c0002c86 <fill_last_frag+0x9>
c0002cae:	5b                   	pop    ebx
c0002caf:	5e                   	pop    esi
c0002cb0:	5f                   	pop    edi
c0002cb1:	c3                   	ret    

c0002cb2 <fill_first_frag>:
c0002cb2:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002cb6:	75 2d                	jne    c0002ce5 <fill_first_frag+0x33>
c0002cb8:	57                   	push   edi
c0002cb9:	56                   	push   esi
c0002cba:	53                   	push   ebx
c0002cbb:	89 c3                	mov    ebx,eax
c0002cbd:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002cc0:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002cc3:	01 d7                	add    edi,edx
c0002cc5:	39 fa                	cmp    edx,edi
c0002cc7:	74 14                	je     c0002cdd <fill_first_frag+0x2b>
c0002cc9:	8d 72 01             	lea    esi,[edx+0x1]
c0002ccc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002cce:	89 f1                	mov    ecx,esi
c0002cd0:	e8 12 fe ff ff       	call   c0002ae7 <put_fat>
c0002cd5:	89 f2                	mov    edx,esi
c0002cd7:	85 c0                	test   eax,eax
c0002cd9:	74 ea                	je     c0002cc5 <fill_first_frag+0x13>
c0002cdb:	eb 0b                	jmp    c0002ce8 <fill_first_frag+0x36>
c0002cdd:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ce1:	31 c0                	xor    eax,eax
c0002ce3:	eb 03                	jmp    c0002ce8 <fill_first_frag+0x36>
c0002ce5:	31 c0                	xor    eax,eax
c0002ce7:	c3                   	ret    
c0002ce8:	5b                   	pop    ebx
c0002ce9:	5e                   	pop    esi
c0002cea:	5f                   	pop    edi
c0002ceb:	c3                   	ret    

c0002cec <get_fat>:
c0002cec:	83 fa 01             	cmp    edx,0x1
c0002cef:	0f 86 db 01 00 00    	jbe    c0002ed0 <get_fat+0x1e4>
c0002cf5:	55                   	push   ebp
c0002cf6:	b9 01 00 00 00       	mov    ecx,0x1
c0002cfb:	57                   	push   edi
c0002cfc:	56                   	push   esi
c0002cfd:	53                   	push   ebx
c0002cfe:	83 ec 1c             	sub    esp,0x1c
c0002d01:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d03:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d06:	0f 86 cc 01 00 00    	jbe    c0002ed8 <get_fat+0x1ec>
c0002d0c:	89 c3                	mov    ebx,eax
c0002d0e:	8a 07                	mov    al,BYTE PTR [edi]
c0002d10:	89 d6                	mov    esi,edx
c0002d12:	3c 02                	cmp    al,0x2
c0002d14:	0f 84 99 00 00 00    	je     c0002db3 <get_fat+0xc7>
c0002d1a:	77 09                	ja     c0002d25 <get_fat+0x39>
c0002d1c:	fe c8                	dec    al
c0002d1e:	74 1a                	je     c0002d3a <get_fat+0x4e>
c0002d20:	e9 b3 01 00 00       	jmp    c0002ed8 <get_fat+0x1ec>
c0002d25:	3c 03                	cmp    al,0x3
c0002d27:	0f 84 b5 00 00 00    	je     c0002de2 <get_fat+0xf6>
c0002d2d:	3c 04                	cmp    al,0x4
c0002d2f:	0f 84 e3 00 00 00    	je     c0002e18 <get_fat+0x12c>
c0002d35:	e9 9e 01 00 00       	jmp    c0002ed8 <get_fat+0x1ec>
c0002d3a:	89 d3                	mov    ebx,edx
c0002d3c:	31 c9                	xor    ecx,ecx
c0002d3e:	d1 eb                	shr    ebx,1
c0002d40:	89 f8                	mov    eax,edi
c0002d42:	01 d3                	add    ebx,edx
c0002d44:	89 da                	mov    edx,ebx
c0002d46:	c1 ea 09             	shr    edx,0x9
c0002d49:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d4c:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d4f:	e8 16 f4 ff ff       	call   c000216a <move_window>
c0002d54:	85 c0                	test   eax,eax
c0002d56:	74 08                	je     c0002d60 <get_fat+0x74>
c0002d58:	83 c9 ff             	or     ecx,0xffffffff
c0002d5b:	e9 78 01 00 00       	jmp    c0002ed8 <get_fat+0x1ec>
c0002d60:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002d63:	31 c9                	xor    ecx,ecx
c0002d65:	89 ea                	mov    edx,ebp
c0002d67:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002d6d:	c1 ea 09             	shr    edx,0x9
c0002d70:	89 f8                	mov    eax,edi
c0002d72:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d75:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002d79:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d7c:	e8 e9 f3 ff ff       	call   c000216a <move_window>
c0002d81:	85 c0                	test   eax,eax
c0002d83:	75 d3                	jne    c0002d58 <get_fat+0x6c>
c0002d85:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d8b:	0f b6 c3             	movzx  eax,bl
c0002d8e:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002d93:	c1 e3 08             	shl    ebx,0x8
c0002d96:	09 c3                	or     ebx,eax
c0002d98:	89 d9                	mov    ecx,ebx
c0002d9a:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002da0:	83 e6 01             	and    esi,0x1
c0002da3:	0f 84 2f 01 00 00    	je     c0002ed8 <get_fat+0x1ec>
c0002da9:	89 d9                	mov    ecx,ebx
c0002dab:	c1 e9 04             	shr    ecx,0x4
c0002dae:	e9 25 01 00 00       	jmp    c0002ed8 <get_fat+0x1ec>
c0002db3:	c1 ea 08             	shr    edx,0x8
c0002db6:	31 c9                	xor    ecx,ecx
c0002db8:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dbb:	89 f8                	mov    eax,edi
c0002dbd:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dc0:	e8 a5 f3 ff ff       	call   c000216a <move_window>
c0002dc5:	85 c0                	test   eax,eax
c0002dc7:	75 8f                	jne    c0002d58 <get_fat+0x6c>
c0002dc9:	01 f6                	add    esi,esi
c0002dcb:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002dd1:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002dd5:	e8 b9 eb ff ff       	call   c0001993 <ld_word>
c0002dda:	0f b7 c8             	movzx  ecx,ax
c0002ddd:	e9 f6 00 00 00       	jmp    c0002ed8 <get_fat+0x1ec>
c0002de2:	c1 ea 07             	shr    edx,0x7
c0002de5:	31 c9                	xor    ecx,ecx
c0002de7:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dea:	89 f8                	mov    eax,edi
c0002dec:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002def:	e8 76 f3 ff ff       	call   c000216a <move_window>
c0002df4:	85 c0                	test   eax,eax
c0002df6:	0f 85 5c ff ff ff    	jne    c0002d58 <get_fat+0x6c>
c0002dfc:	c1 e6 02             	shl    esi,0x2
c0002dff:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e05:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e09:	e8 92 eb ff ff       	call   c00019a0 <ld_dword>
c0002e0e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e13:	e9 b4 00 00 00       	jmp    c0002ecc <get_fat+0x1e0>
c0002e18:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e1b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e1e:	89 d1                	mov    ecx,edx
c0002e20:	09 c1                	or     ecx,eax
c0002e22:	74 06                	je     c0002e2a <get_fat+0x13e>
c0002e24:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002e28:	75 0f                	jne    c0002e39 <get_fat+0x14d>
c0002e2a:	b9 01 00 00 00       	mov    ecx,0x1
c0002e2f:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002e33:	0f 85 9f 00 00 00    	jne    c0002ed8 <get_fat+0x1ec>
c0002e39:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002e3d:	89 f5                	mov    ebp,esi
c0002e3f:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002e44:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002e47:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002e4a:	80 f9 02             	cmp    cl,0x2
c0002e4d:	75 35                	jne    c0002e84 <get_fat+0x198>
c0002e4f:	83 c0 ff             	add    eax,0xffffffff
c0002e52:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002e57:	83 d2 ff             	adc    edx,0xffffffff
c0002e5a:	31 db                	xor    ebx,ebx
c0002e5c:	53                   	push   ebx
c0002e5d:	51                   	push   ecx
c0002e5e:	0f ac d0 09          	shrd   eax,edx,0x9
c0002e62:	c1 ea 09             	shr    edx,0x9
c0002e65:	52                   	push   edx
c0002e66:	50                   	push   eax
c0002e67:	e8 40 c0 01 00       	call   c001eeac <__udivdi3>
c0002e6c:	83 c4 10             	add    esp,0x10
c0002e6f:	b9 01 00 00 00       	mov    ecx,0x1
c0002e74:	39 c5                	cmp    ebp,eax
c0002e76:	77 60                	ja     c0002ed8 <get_fat+0x1ec>
c0002e78:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e7d:	74 59                	je     c0002ed8 <get_fat+0x1ec>
c0002e7f:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002e82:	eb 54                	jmp    c0002ed8 <get_fat+0x1ec>
c0002e84:	80 f9 03             	cmp    cl,0x3
c0002e87:	75 05                	jne    c0002e8e <get_fat+0x1a2>
c0002e89:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002e8c:	77 f1                	ja     c0002e7f <get_fat+0x193>
c0002e8e:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e93:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002e97:	75 3f                	jne    c0002ed8 <get_fat+0x1ec>
c0002e99:	89 f2                	mov    edx,esi
c0002e9b:	31 c9                	xor    ecx,ecx
c0002e9d:	c1 ea 07             	shr    edx,0x7
c0002ea0:	89 f8                	mov    eax,edi
c0002ea2:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ea5:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ea8:	e8 bd f2 ff ff       	call   c000216a <move_window>
c0002ead:	85 c0                	test   eax,eax
c0002eaf:	0f 85 a3 fe ff ff    	jne    c0002d58 <get_fat+0x6c>
c0002eb5:	c1 e6 02             	shl    esi,0x2
c0002eb8:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ebe:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ec2:	e8 d9 ea ff ff       	call   c00019a0 <ld_dword>
c0002ec7:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002ecc:	89 c1                	mov    ecx,eax
c0002ece:	eb 08                	jmp    c0002ed8 <get_fat+0x1ec>
c0002ed0:	b9 01 00 00 00       	mov    ecx,0x1
c0002ed5:	89 c8                	mov    eax,ecx
c0002ed7:	c3                   	ret    
c0002ed8:	83 c4 1c             	add    esp,0x1c
c0002edb:	89 c8                	mov    eax,ecx
c0002edd:	5b                   	pop    ebx
c0002ede:	5e                   	pop    esi
c0002edf:	5f                   	pop    edi
c0002ee0:	5d                   	pop    ebp
c0002ee1:	c3                   	ret    

c0002ee2 <dir_sdi>:
c0002ee2:	55                   	push   ebp
c0002ee3:	57                   	push   edi
c0002ee4:	56                   	push   esi
c0002ee5:	53                   	push   ebx
c0002ee6:	89 c3                	mov    ebx,eax
c0002ee8:	83 ec 1c             	sub    esp,0x1c
c0002eeb:	8b 38                	mov    edi,DWORD PTR [eax]
c0002eed:	31 c0                	xor    eax,eax
c0002eef:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002ef2:	0f 94 c0             	sete   al
c0002ef5:	48                   	dec    eax
c0002ef6:	25 00 00 20 f0       	and    eax,0xf0200000
c0002efb:	05 00 00 00 10       	add    eax,0x10000000
c0002f00:	39 d0                	cmp    eax,edx
c0002f02:	77 0a                	ja     c0002f0e <dir_sdi+0x2c>
c0002f04:	b8 02 00 00 00       	mov    eax,0x2
c0002f09:	e9 c4 00 00 00       	jmp    c0002fd2 <dir_sdi+0xf0>
c0002f0e:	89 d6                	mov    esi,edx
c0002f10:	f6 c2 1f             	test   dl,0x1f
c0002f13:	75 ef                	jne    c0002f04 <dir_sdi+0x22>
c0002f15:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f18:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f1b:	85 c9                	test   ecx,ecx
c0002f1d:	75 2d                	jne    c0002f4c <dir_sdi+0x6a>
c0002f1f:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f22:	77 1b                	ja     c0002f3f <dir_sdi+0x5d>
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002f2a:	c1 ea 05             	shr    edx,0x5
c0002f2d:	39 c2                	cmp    edx,eax
c0002f2f:	73 d3                	jae    c0002f04 <dir_sdi+0x22>
c0002f31:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f34:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002f37:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f3a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f3d:	eb 4b                	jmp    c0002f8a <dir_sdi+0xa8>
c0002f3f:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f42:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f46:	85 c0                	test   eax,eax
c0002f48:	74 da                	je     c0002f24 <dir_sdi+0x42>
c0002f4a:	89 c1                	mov    ecx,eax
c0002f4c:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002f50:	c1 e5 09             	shl    ebp,0x9
c0002f53:	89 ca                	mov    edx,ecx
c0002f55:	39 ee                	cmp    esi,ebp
c0002f57:	72 1c                	jb     c0002f75 <dir_sdi+0x93>
c0002f59:	89 d8                	mov    eax,ebx
c0002f5b:	e8 8c fd ff ff       	call   c0002cec <get_fat>
c0002f60:	89 c1                	mov    ecx,eax
c0002f62:	83 f8 ff             	cmp    eax,0xffffffff
c0002f65:	74 66                	je     c0002fcd <dir_sdi+0xeb>
c0002f67:	83 f8 01             	cmp    eax,0x1
c0002f6a:	76 98                	jbe    c0002f04 <dir_sdi+0x22>
c0002f6c:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002f6f:	76 93                	jbe    c0002f04 <dir_sdi+0x22>
c0002f71:	29 ee                	sub    esi,ebp
c0002f73:	eb de                	jmp    c0002f53 <dir_sdi+0x71>
c0002f75:	89 f8                	mov    eax,edi
c0002f77:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f7b:	e8 ac ec ff ff       	call   c0001c2c <clst2sect>
c0002f80:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f84:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f87:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f8a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0002f8d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0002f90:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002f93:	89 d1                	mov    ecx,edx
c0002f95:	09 c1                	or     ecx,eax
c0002f97:	0f 84 67 ff ff ff    	je     c0002f04 <dir_sdi+0x22>
c0002f9d:	89 f1                	mov    ecx,esi
c0002f9f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002fa7:	c1 e9 09             	shr    ecx,0x9
c0002faa:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002fae:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002fb2:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002fb6:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002fbc:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fbf:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fc3:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0002fc6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fc9:	31 c0                	xor    eax,eax
c0002fcb:	eb 05                	jmp    c0002fd2 <dir_sdi+0xf0>
c0002fcd:	b8 01 00 00 00       	mov    eax,0x1
c0002fd2:	83 c4 1c             	add    esp,0x1c
c0002fd5:	5b                   	pop    ebx
c0002fd6:	5e                   	pop    esi
c0002fd7:	5f                   	pop    edi
c0002fd8:	5d                   	pop    ebp
c0002fd9:	c3                   	ret    

c0002fda <create_chain>:
c0002fda:	55                   	push   ebp
c0002fdb:	89 c5                	mov    ebp,eax
c0002fdd:	57                   	push   edi
c0002fde:	56                   	push   esi
c0002fdf:	53                   	push   ebx
c0002fe0:	83 ec 1c             	sub    esp,0x1c
c0002fe3:	85 d2                	test   edx,edx
c0002fe5:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fe7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002feb:	75 0e                	jne    c0002ffb <create_chain+0x21>
c0002fed:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0002ff0:	85 ff                	test   edi,edi
c0002ff2:	74 39                	je     c000302d <create_chain+0x53>
c0002ff4:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0002ff7:	77 39                	ja     c0003032 <create_chain+0x58>
c0002ff9:	eb 32                	jmp    c000302d <create_chain+0x53>
c0002ffb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fff:	e8 e8 fc ff ff       	call   c0002cec <get_fat>
c0003004:	89 c3                	mov    ebx,eax
c0003006:	83 f8 01             	cmp    eax,0x1
c0003009:	77 0a                	ja     c0003015 <create_chain+0x3b>
c000300b:	bb 01 00 00 00       	mov    ebx,0x1
c0003010:	e9 bc 01 00 00       	jmp    c00031d1 <create_chain+0x1f7>
c0003015:	83 f8 ff             	cmp    eax,0xffffffff
c0003018:	0f 84 60 01 00 00    	je     c000317e <create_chain+0x1a4>
c000301e:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003021:	0f 87 aa 01 00 00    	ja     c00031d1 <create_chain+0x1f7>
c0003027:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000302b:	eb 05                	jmp    c0003032 <create_chain+0x58>
c000302d:	bf 01 00 00 00       	mov    edi,0x1
c0003032:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003036:	75 07                	jne    c000303f <create_chain+0x65>
c0003038:	31 db                	xor    ebx,ebx
c000303a:	e9 92 01 00 00       	jmp    c00031d1 <create_chain+0x1f7>
c000303f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003042:	75 74                	jne    c00030b8 <create_chain+0xde>
c0003044:	b9 01 00 00 00       	mov    ecx,0x1
c0003049:	89 fa                	mov    edx,edi
c000304b:	89 f0                	mov    eax,esi
c000304d:	e8 2d f9 ff ff       	call   c000297f <find_bitmap>
c0003052:	89 c3                	mov    ebx,eax
c0003054:	8d 40 ff             	lea    eax,[eax-0x1]
c0003057:	83 f8 fd             	cmp    eax,0xfffffffd
c000305a:	0f 87 71 01 00 00    	ja     c00031d1 <create_chain+0x1f7>
c0003060:	83 ec 0c             	sub    esp,0xc
c0003063:	b9 01 00 00 00       	mov    ecx,0x1
c0003068:	89 da                	mov    edx,ebx
c000306a:	89 f0                	mov    eax,esi
c000306c:	6a 01                	push   0x1
c000306e:	e8 bf f9 ff ff       	call   c0002a32 <change_bitmap>
c0003073:	83 c4 10             	add    esp,0x10
c0003076:	83 f8 02             	cmp    eax,0x2
c0003079:	74 90                	je     c000300b <create_chain+0x31>
c000307b:	83 f8 01             	cmp    eax,0x1
c000307e:	0f 84 fa 00 00 00    	je     c000317e <create_chain+0x1a4>
c0003084:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003089:	75 09                	jne    c0003094 <create_chain+0xba>
c000308b:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000308f:	e9 0e 01 00 00       	jmp    c00031a2 <create_chain+0x1c8>
c0003094:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003098:	0f 85 e9 00 00 00    	jne    c0003187 <create_chain+0x1ad>
c000309e:	8d 57 01             	lea    edx,[edi+0x1]
c00030a1:	39 da                	cmp    edx,ebx
c00030a3:	0f 84 f9 00 00 00    	je     c00031a2 <create_chain+0x1c8>
c00030a9:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00030ac:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00030b0:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00030b3:	e9 cf 00 00 00       	jmp    c0003187 <create_chain+0x1ad>
c00030b8:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00030bc:	75 41                	jne    c00030ff <create_chain+0x125>
c00030be:	8d 5f 01             	lea    ebx,[edi+0x1]
c00030c1:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030c4:	77 05                	ja     c00030cb <create_chain+0xf1>
c00030c6:	bb 02 00 00 00       	mov    ebx,0x2
c00030cb:	89 da                	mov    edx,ebx
c00030cd:	89 e8                	mov    eax,ebp
c00030cf:	e8 18 fc ff ff       	call   c0002cec <get_fat>
c00030d4:	83 f8 01             	cmp    eax,0x1
c00030d7:	0f 84 a6 00 00 00    	je     c0003183 <create_chain+0x1a9>
c00030dd:	83 f8 ff             	cmp    eax,0xffffffff
c00030e0:	0f 84 9d 00 00 00    	je     c0003183 <create_chain+0x1a9>
c00030e6:	85 c0                	test   eax,eax
c00030e8:	74 11                	je     c00030fb <create_chain+0x121>
c00030ea:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00030ed:	83 f8 01             	cmp    eax,0x1
c00030f0:	76 0d                	jbe    c00030ff <create_chain+0x125>
c00030f2:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030f5:	76 08                	jbe    c00030ff <create_chain+0x125>
c00030f7:	89 c7                	mov    edi,eax
c00030f9:	eb 04                	jmp    c00030ff <create_chain+0x125>
c00030fb:	85 db                	test   ebx,ebx
c00030fd:	75 36                	jne    c0003135 <create_chain+0x15b>
c00030ff:	89 fb                	mov    ebx,edi
c0003101:	43                   	inc    ebx
c0003102:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003105:	77 0e                	ja     c0003115 <create_chain+0x13b>
c0003107:	83 ff 01             	cmp    edi,0x1
c000310a:	0f 86 28 ff ff ff    	jbe    c0003038 <create_chain+0x5e>
c0003110:	bb 02 00 00 00       	mov    ebx,0x2
c0003115:	89 da                	mov    edx,ebx
c0003117:	89 e8                	mov    eax,ebp
c0003119:	e8 ce fb ff ff       	call   c0002cec <get_fat>
c000311e:	85 c0                	test   eax,eax
c0003120:	74 13                	je     c0003135 <create_chain+0x15b>
c0003122:	83 f8 01             	cmp    eax,0x1
c0003125:	74 5c                	je     c0003183 <create_chain+0x1a9>
c0003127:	83 f8 ff             	cmp    eax,0xffffffff
c000312a:	74 57                	je     c0003183 <create_chain+0x1a9>
c000312c:	39 fb                	cmp    ebx,edi
c000312e:	75 d1                	jne    c0003101 <create_chain+0x127>
c0003130:	e9 03 ff ff ff       	jmp    c0003038 <create_chain+0x5e>
c0003135:	83 c9 ff             	or     ecx,0xffffffff
c0003138:	89 da                	mov    edx,ebx
c000313a:	89 f0                	mov    eax,esi
c000313c:	e8 a6 f9 ff ff       	call   c0002ae7 <put_fat>
c0003141:	85 c0                	test   eax,eax
c0003143:	75 14                	jne    c0003159 <create_chain+0x17f>
c0003145:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000314a:	74 0d                	je     c0003159 <create_chain+0x17f>
c000314c:	89 d9                	mov    ecx,ebx
c000314e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003152:	89 f0                	mov    eax,esi
c0003154:	e8 8e f9 ff ff       	call   c0002ae7 <put_fat>
c0003159:	85 c0                	test   eax,eax
c000315b:	75 1a                	jne    c0003177 <create_chain+0x19d>
c000315d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003160:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0003163:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003166:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003169:	39 d0                	cmp    eax,edx
c000316b:	77 04                	ja     c0003171 <create_chain+0x197>
c000316d:	48                   	dec    eax
c000316e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003171:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003175:	eb 5a                	jmp    c00031d1 <create_chain+0x1f7>
c0003177:	48                   	dec    eax
c0003178:	0f 85 8d fe ff ff    	jne    c000300b <create_chain+0x31>
c000317e:	83 cb ff             	or     ebx,0xffffffff
c0003181:	eb 4e                	jmp    c00031d1 <create_chain+0x1f7>
c0003183:	89 c3                	mov    ebx,eax
c0003185:	eb 4a                	jmp    c00031d1 <create_chain+0x1f7>
c0003187:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000318b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c000318e:	41                   	inc    ecx
c000318f:	39 d9                	cmp    ecx,ebx
c0003191:	75 19                	jne    c00031ac <create_chain+0x1d2>
c0003193:	b9 02 00 00 00       	mov    ecx,0x2
c0003198:	85 d2                	test   edx,edx
c000319a:	74 03                	je     c000319f <create_chain+0x1c5>
c000319c:	8d 4a 01             	lea    ecx,[edx+0x1]
c000319f:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00031a2:	85 c0                	test   eax,eax
c00031a4:	0f 85 61 fe ff ff    	jne    c000300b <create_chain+0x31>
c00031aa:	eb b1                	jmp    c000315d <create_chain+0x183>
c00031ac:	85 d2                	test   edx,edx
c00031ae:	75 07                	jne    c00031b7 <create_chain+0x1dd>
c00031b0:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031b7:	89 d9                	mov    ecx,ebx
c00031b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031bd:	89 e8                	mov    eax,ebp
c00031bf:	e8 b9 fa ff ff       	call   c0002c7d <fill_last_frag>
c00031c4:	85 c0                	test   eax,eax
c00031c6:	75 af                	jne    c0003177 <create_chain+0x19d>
c00031c8:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031cf:	eb 8c                	jmp    c000315d <create_chain+0x183>
c00031d1:	83 c4 1c             	add    esp,0x1c
c00031d4:	89 d8                	mov    eax,ebx
c00031d6:	5b                   	pop    ebx
c00031d7:	5e                   	pop    esi
c00031d8:	5f                   	pop    edi
c00031d9:	5d                   	pop    ebp
c00031da:	c3                   	ret    

c00031db <remove_chain>:
c00031db:	55                   	push   ebp
c00031dc:	57                   	push   edi
c00031dd:	56                   	push   esi
c00031de:	53                   	push   ebx
c00031df:	83 ec 1c             	sub    esp,0x1c
c00031e2:	83 fa 01             	cmp    edx,0x1
c00031e5:	8b 18                	mov    ebx,DWORD PTR [eax]
c00031e7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00031eb:	77 0a                	ja     c00031f7 <remove_chain+0x1c>
c00031ed:	b8 02 00 00 00       	mov    eax,0x2
c00031f2:	e9 24 01 00 00       	jmp    c000331b <remove_chain+0x140>
c00031f7:	89 d6                	mov    esi,edx
c00031f9:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00031fc:	76 ef                	jbe    c00031ed <remove_chain+0x12>
c00031fe:	89 c7                	mov    edi,eax
c0003200:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003205:	75 06                	jne    c000320d <remove_chain+0x32>
c0003207:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000320b:	eb 54                	jmp    c0003261 <remove_chain+0x86>
c000320d:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003210:	75 06                	jne    c0003218 <remove_chain+0x3d>
c0003212:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c0003216:	74 ef                	je     c0003207 <remove_chain+0x2c>
c0003218:	83 c9 ff             	or     ecx,0xffffffff
c000321b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000321f:	89 d8                	mov    eax,ebx
c0003221:	e8 c1 f8 ff ff       	call   c0002ae7 <put_fat>
c0003226:	85 c0                	test   eax,eax
c0003228:	74 dd                	je     c0003207 <remove_chain+0x2c>
c000322a:	e9 ec 00 00 00       	jmp    c000331b <remove_chain+0x140>
c000322f:	83 f8 01             	cmp    eax,0x1
c0003232:	74 b9                	je     c00031ed <remove_chain+0x12>
c0003234:	83 f8 ff             	cmp    eax,0xffffffff
c0003237:	74 6d                	je     c00032a6 <remove_chain+0xcb>
c0003239:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000323c:	75 6f                	jne    c00032ad <remove_chain+0xd2>
c000323e:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0003241:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003244:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003247:	39 d0                	cmp    eax,edx
c0003249:	73 08                	jae    c0003253 <remove_chain+0x78>
c000324b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000324f:	40                   	inc    eax
c0003250:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003253:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003256:	39 e9                	cmp    ecx,ebp
c0003258:	75 64                	jne    c00032be <remove_chain+0xe3>
c000325a:	89 ee                	mov    esi,ebp
c000325c:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c000325f:	76 0f                	jbe    c0003270 <remove_chain+0x95>
c0003261:	89 f2                	mov    edx,esi
c0003263:	89 f8                	mov    eax,edi
c0003265:	e8 82 fa ff ff       	call   c0002cec <get_fat>
c000326a:	89 c5                	mov    ebp,eax
c000326c:	85 c0                	test   eax,eax
c000326e:	75 bf                	jne    c000322f <remove_chain+0x54>
c0003270:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003273:	0f 85 a0 00 00 00    	jne    c0003319 <remove_chain+0x13e>
c0003279:	eb 6c                	jmp    c00032e7 <remove_chain+0x10c>
c000327b:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c000327e:	84 c0                	test   al,al
c0003280:	75 7d                	jne    c00032ff <remove_chain+0x124>
c0003282:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0003285:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003289:	0f 84 86 00 00 00    	je     c0003315 <remove_chain+0x13a>
c000328f:	89 da                	mov    edx,ebx
c0003291:	89 f8                	mov    eax,edi
c0003293:	e8 54 fa ff ff       	call   c0002cec <get_fat>
c0003298:	83 f8 01             	cmp    eax,0x1
c000329b:	0f 86 4c ff ff ff    	jbe    c00031ed <remove_chain+0x12>
c00032a1:	83 f8 ff             	cmp    eax,0xffffffff
c00032a4:	75 4e                	jne    c00032f4 <remove_chain+0x119>
c00032a6:	b8 01 00 00 00       	mov    eax,0x1
c00032ab:	eb 6e                	jmp    c000331b <remove_chain+0x140>
c00032ad:	31 c9                	xor    ecx,ecx
c00032af:	89 f2                	mov    edx,esi
c00032b1:	89 d8                	mov    eax,ebx
c00032b3:	e8 2f f8 ff ff       	call   c0002ae7 <put_fat>
c00032b8:	85 c0                	test   eax,eax
c00032ba:	74 82                	je     c000323e <remove_chain+0x63>
c00032bc:	eb 5d                	jmp    c000331b <remove_chain+0x140>
c00032be:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c1:	75 1b                	jne    c00032de <remove_chain+0x103>
c00032c3:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00032c7:	83 ec 0c             	sub    esp,0xc
c00032ca:	6a 00                	push   0x0
c00032cc:	89 d8                	mov    eax,ebx
c00032ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00032d2:	e8 5b f7 ff ff       	call   c0002a32 <change_bitmap>
c00032d7:	83 c4 10             	add    esp,0x10
c00032da:	85 c0                	test   eax,eax
c00032dc:	75 3d                	jne    c000331b <remove_chain+0x140>
c00032de:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00032e2:	e9 73 ff ff ff       	jmp    c000325a <remove_chain+0x7f>
c00032e7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032ec:	75 8d                	jne    c000327b <remove_chain+0xa0>
c00032ee:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00032f2:	eb 25                	jmp    c0003319 <remove_chain+0x13e>
c00032f4:	8d 53 01             	lea    edx,[ebx+0x1]
c00032f7:	89 c3                	mov    ebx,eax
c00032f9:	39 c2                	cmp    edx,eax
c00032fb:	74 88                	je     c0003285 <remove_chain+0xaa>
c00032fd:	eb 1a                	jmp    c0003319 <remove_chain+0x13e>
c00032ff:	3c 03                	cmp    al,0x3
c0003301:	75 16                	jne    c0003319 <remove_chain+0x13e>
c0003303:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0003306:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000330a:	77 0d                	ja     c0003319 <remove_chain+0x13e>
c000330c:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c000330f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003313:	72 04                	jb     c0003319 <remove_chain+0x13e>
c0003315:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c0003319:	31 c0                	xor    eax,eax
c000331b:	83 c4 1c             	add    esp,0x1c
c000331e:	5b                   	pop    ebx
c000331f:	5e                   	pop    esi
c0003320:	5f                   	pop    edi
c0003321:	5d                   	pop    ebp
c0003322:	c3                   	ret    

c0003323 <dir_clear>:
c0003323:	55                   	push   ebp
c0003324:	57                   	push   edi
c0003325:	56                   	push   esi
c0003326:	89 c6                	mov    esi,eax
c0003328:	53                   	push   ebx
c0003329:	83 ec 1c             	sub    esp,0x1c
c000332c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003330:	e8 a1 ed ff ff       	call   c00020d6 <sync_window>
c0003335:	85 c0                	test   eax,eax
c0003337:	0f 85 de 00 00 00    	jne    c000341b <dir_clear+0xf8>
c000333d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003341:	89 f0                	mov    eax,esi
c0003343:	e8 e4 e8 ff ff       	call   c0001c2c <clst2sect>
c0003348:	8d 6e 54             	lea    ebp,[esi+0x54]
c000334b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000334f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003353:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003356:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003359:	b9 00 02 00 00       	mov    ecx,0x200
c000335e:	31 d2                	xor    edx,edx
c0003360:	89 e8                	mov    eax,ebp
c0003362:	e8 c0 e6 ff ff       	call   c0001a27 <mem_set>
c0003367:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000336b:	c1 e3 09             	shl    ebx,0x9
c000336e:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0003374:	76 1f                	jbe    c0003395 <dir_clear+0x72>
c0003376:	bb 00 80 00 00       	mov    ebx,0x8000
c000337b:	eb 18                	jmp    c0003395 <dir_clear+0x72>
c000337d:	83 ec 0c             	sub    esp,0xc
c0003380:	53                   	push   ebx
c0003381:	e8 f3 4d 00 00       	call   c0008179 <ff_memalloc>
c0003386:	83 c4 10             	add    esp,0x10
c0003389:	89 c7                	mov    edi,eax
c000338b:	85 c0                	test   eax,eax
c000338d:	0f 85 8f 00 00 00    	jne    c0003422 <dir_clear+0xff>
c0003393:	d1 eb                	shr    ebx,1
c0003395:	81 fb 00 02 00 00    	cmp    ebx,0x200
c000339b:	77 e0                	ja     c000337d <dir_clear+0x5a>
c000339d:	31 db                	xor    ebx,ebx
c000339f:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033a3:	39 d8                	cmp    eax,ebx
c00033a5:	76 66                	jbe    c000340d <dir_clear+0xea>
c00033a7:	83 ec 0c             	sub    esp,0xc
c00033aa:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033ae:	6a 01                	push   0x1
c00033b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033b8:	55                   	push   ebp
c00033b9:	50                   	push   eax
c00033ba:	e8 9f e5 ff ff       	call   c000195e <disk_write>
c00033bf:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00033c4:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00033c9:	83 c4 20             	add    esp,0x20
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 3d                	jne    c000340d <dir_clear+0xea>
c00033d0:	43                   	inc    ebx
c00033d1:	eb cc                	jmp    c000339f <dir_clear+0x7c>
c00033d3:	83 ec 0c             	sub    esp,0xc
c00033d6:	89 d8                	mov    eax,ebx
c00033d8:	31 d2                	xor    edx,edx
c00033da:	55                   	push   ebp
c00033db:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00033df:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00033e3:	52                   	push   edx
c00033e4:	50                   	push   eax
c00033e5:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033e9:	57                   	push   edi
c00033ea:	50                   	push   eax
c00033eb:	e8 6e e5 ff ff       	call   c000195e <disk_write>
c00033f0:	83 c4 20             	add    esp,0x20
c00033f3:	85 c0                	test   eax,eax
c00033f5:	75 0a                	jne    c0003401 <dir_clear+0xde>
c00033f7:	01 eb                	add    ebx,ebp
c00033f9:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033fd:	39 d8                	cmp    eax,ebx
c00033ff:	77 d2                	ja     c00033d3 <dir_clear+0xb0>
c0003401:	83 ec 0c             	sub    esp,0xc
c0003404:	57                   	push   edi
c0003405:	e8 85 4d 00 00       	call   c000818f <ff_memfree>
c000340a:	83 c4 10             	add    esp,0x10
c000340d:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003411:	39 d8                	cmp    eax,ebx
c0003413:	0f 95 c0             	setne  al
c0003416:	0f b6 c0             	movzx  eax,al
c0003419:	eb 19                	jmp    c0003434 <dir_clear+0x111>
c000341b:	b8 01 00 00 00       	mov    eax,0x1
c0003420:	eb 12                	jmp    c0003434 <dir_clear+0x111>
c0003422:	89 d9                	mov    ecx,ebx
c0003424:	31 d2                	xor    edx,edx
c0003426:	c1 eb 09             	shr    ebx,0x9
c0003429:	e8 f9 e5 ff ff       	call   c0001a27 <mem_set>
c000342e:	89 dd                	mov    ebp,ebx
c0003430:	31 db                	xor    ebx,ebx
c0003432:	eb c5                	jmp    c00033f9 <dir_clear+0xd6>
c0003434:	83 c4 1c             	add    esp,0x1c
c0003437:	5b                   	pop    ebx
c0003438:	5e                   	pop    esi
c0003439:	5f                   	pop    edi
c000343a:	5d                   	pop    ebp
c000343b:	c3                   	ret    

c000343c <dir_next>:
c000343c:	55                   	push   ebp
c000343d:	57                   	push   edi
c000343e:	56                   	push   esi
c000343f:	53                   	push   ebx
c0003440:	89 c3                	mov    ebx,eax
c0003442:	83 ec 1c             	sub    esp,0x1c
c0003445:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003447:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000344a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000344e:	8d 78 20             	lea    edi,[eax+0x20]
c0003451:	31 c0                	xor    eax,eax
c0003453:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003457:	0f 94 c0             	sete   al
c000345a:	48                   	dec    eax
c000345b:	25 00 00 20 f0       	and    eax,0xf0200000
c0003460:	05 00 00 00 10       	add    eax,0x10000000
c0003465:	39 f8                	cmp    eax,edi
c0003467:	77 0e                	ja     c0003477 <dir_next+0x3b>
c0003469:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003470:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003477:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000347a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000347d:	89 ce                	mov    esi,ecx
c000347f:	b8 04 00 00 00       	mov    eax,0x4
c0003484:	09 d6                	or     esi,edx
c0003486:	0f 84 da 00 00 00    	je     c0003566 <dir_next+0x12a>
c000348c:	89 f8                	mov    eax,edi
c000348e:	25 ff 01 00 00       	and    eax,0x1ff
c0003493:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003497:	0f 85 b9 00 00 00    	jne    c0003556 <dir_next+0x11a>
c000349d:	83 c2 01             	add    edx,0x1
c00034a0:	83 d1 00             	adc    ecx,0x0
c00034a3:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00034a6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00034a9:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00034ac:	85 d2                	test   edx,edx
c00034ae:	75 29                	jne    c00034d9 <dir_next+0x9d>
c00034b0:	89 fa                	mov    edx,edi
c00034b2:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034b6:	c1 ea 05             	shr    edx,0x5
c00034b9:	39 c2                	cmp    edx,eax
c00034bb:	0f 82 95 00 00 00    	jb     c0003556 <dir_next+0x11a>
c00034c1:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034c8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034cf:	b8 04 00 00 00       	mov    eax,0x4
c00034d4:	e9 8d 00 00 00       	jmp    c0003566 <dir_next+0x12a>
c00034d9:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00034dd:	89 f9                	mov    ecx,edi
c00034df:	48                   	dec    eax
c00034e0:	c1 e9 09             	shr    ecx,0x9
c00034e3:	85 c8                	test   eax,ecx
c00034e5:	75 6f                	jne    c0003556 <dir_next+0x11a>
c00034e7:	89 d8                	mov    eax,ebx
c00034e9:	e8 fe f7 ff ff       	call   c0002cec <get_fat>
c00034ee:	89 c6                	mov    esi,eax
c00034f0:	83 f8 01             	cmp    eax,0x1
c00034f3:	77 07                	ja     c00034fc <dir_next+0xc0>
c00034f5:	b8 02 00 00 00       	mov    eax,0x2
c00034fa:	eb 6a                	jmp    c0003566 <dir_next+0x12a>
c00034fc:	83 f8 ff             	cmp    eax,0xffffffff
c00034ff:	75 07                	jne    c0003508 <dir_next+0xcc>
c0003501:	b8 01 00 00 00       	mov    eax,0x1
c0003506:	eb 5e                	jmp    c0003566 <dir_next+0x12a>
c0003508:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c000350b:	77 37                	ja     c0003544 <dir_next+0x108>
c000350d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003512:	74 ad                	je     c00034c1 <dir_next+0x85>
c0003514:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003517:	89 d8                	mov    eax,ebx
c0003519:	e8 bc fa ff ff       	call   c0002fda <create_chain>
c000351e:	89 c6                	mov    esi,eax
c0003520:	b8 07 00 00 00       	mov    eax,0x7
c0003525:	85 f6                	test   esi,esi
c0003527:	74 3d                	je     c0003566 <dir_next+0x12a>
c0003529:	83 fe 01             	cmp    esi,0x1
c000352c:	74 c7                	je     c00034f5 <dir_next+0xb9>
c000352e:	83 fe ff             	cmp    esi,0xffffffff
c0003531:	74 ce                	je     c0003501 <dir_next+0xc5>
c0003533:	89 f2                	mov    edx,esi
c0003535:	89 e8                	mov    eax,ebp
c0003537:	e8 e7 fd ff ff       	call   c0003323 <dir_clear>
c000353c:	85 c0                	test   eax,eax
c000353e:	75 c1                	jne    c0003501 <dir_next+0xc5>
c0003540:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c0003544:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003547:	89 f2                	mov    edx,esi
c0003549:	89 e8                	mov    eax,ebp
c000354b:	e8 dc e6 ff ff       	call   c0001c2c <clst2sect>
c0003550:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003553:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003556:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000355a:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c000355d:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003561:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003564:	31 c0                	xor    eax,eax
c0003566:	83 c4 1c             	add    esp,0x1c
c0003569:	5b                   	pop    ebx
c000356a:	5e                   	pop    esi
c000356b:	5f                   	pop    edi
c000356c:	5d                   	pop    ebp
c000356d:	c3                   	ret    

c000356e <load_xdir>:
c000356e:	55                   	push   ebp
c000356f:	57                   	push   edi
c0003570:	56                   	push   esi
c0003571:	89 c6                	mov    esi,eax
c0003573:	53                   	push   ebx
c0003574:	83 ec 1c             	sub    esp,0x1c
c0003577:	8b 00                	mov    eax,DWORD PTR [eax]
c0003579:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000357c:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000357f:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003582:	e8 e3 eb ff ff       	call   c000216a <move_window>
c0003587:	89 c3                	mov    ebx,eax
c0003589:	85 c0                	test   eax,eax
c000358b:	0f 85 0c 01 00 00    	jne    c000369d <load_xdir+0x12f>
c0003591:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003594:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003597:	0f 85 fb 00 00 00    	jne    c0003698 <load_xdir+0x12a>
c000359d:	89 f8                	mov    eax,edi
c000359f:	b9 20 00 00 00       	mov    ecx,0x20
c00035a4:	e8 69 e4 ff ff       	call   c0001a12 <mem_cpy>
c00035a9:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00035ad:	40                   	inc    eax
c00035ae:	c1 e0 05             	shl    eax,0x5
c00035b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00035b5:	83 e8 60             	sub    eax,0x60
c00035b8:	3d 00 02 00 00       	cmp    eax,0x200
c00035bd:	0f 87 d5 00 00 00    	ja     c0003698 <load_xdir+0x12a>
c00035c3:	31 d2                	xor    edx,edx
c00035c5:	89 f0                	mov    eax,esi
c00035c7:	e8 70 fe ff ff       	call   c000343c <dir_next>
c00035cc:	89 c3                	mov    ebx,eax
c00035ce:	83 f8 04             	cmp    eax,0x4
c00035d1:	0f 84 c1 00 00 00    	je     c0003698 <load_xdir+0x12a>
c00035d7:	85 c0                	test   eax,eax
c00035d9:	0f 85 be 00 00 00    	jne    c000369d <load_xdir+0x12f>
c00035df:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035e2:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035e5:	8b 06                	mov    eax,DWORD PTR [esi]
c00035e7:	e8 7e eb ff ff       	call   c000216a <move_window>
c00035ec:	89 c3                	mov    ebx,eax
c00035ee:	85 c0                	test   eax,eax
c00035f0:	0f 85 a7 00 00 00    	jne    c000369d <load_xdir+0x12f>
c00035f6:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00035f9:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00035fc:	0f 85 96 00 00 00    	jne    c0003698 <load_xdir+0x12a>
c0003602:	8d 47 20             	lea    eax,[edi+0x20]
c0003605:	b9 20 00 00 00       	mov    ecx,0x20
c000360a:	e8 03 e4 ff ff       	call   c0001a12 <mem_cpy>
c000360f:	31 d2                	xor    edx,edx
c0003611:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c0003615:	b9 0f 00 00 00       	mov    ecx,0xf
c000361a:	83 c0 2c             	add    eax,0x2c
c000361d:	f7 f1                	div    ecx
c000361f:	c1 e0 05             	shl    eax,0x5
c0003622:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003626:	77 70                	ja     c0003698 <load_xdir+0x12a>
c0003628:	bd 40 00 00 00       	mov    ebp,0x40
c000362d:	31 d2                	xor    edx,edx
c000362f:	89 f0                	mov    eax,esi
c0003631:	e8 06 fe ff ff       	call   c000343c <dir_next>
c0003636:	89 c3                	mov    ebx,eax
c0003638:	83 f8 04             	cmp    eax,0x4
c000363b:	74 5b                	je     c0003698 <load_xdir+0x12a>
c000363d:	85 c0                	test   eax,eax
c000363f:	75 5c                	jne    c000369d <load_xdir+0x12f>
c0003641:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003644:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003647:	8b 06                	mov    eax,DWORD PTR [esi]
c0003649:	e8 1c eb ff ff       	call   c000216a <move_window>
c000364e:	89 c3                	mov    ebx,eax
c0003650:	85 c0                	test   eax,eax
c0003652:	75 49                	jne    c000369d <load_xdir+0x12f>
c0003654:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003657:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c000365a:	75 3c                	jne    c0003698 <load_xdir+0x12a>
c000365c:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003662:	77 0d                	ja     c0003671 <load_xdir+0x103>
c0003664:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003667:	b9 20 00 00 00       	mov    ecx,0x20
c000366c:	e8 a1 e3 ff ff       	call   c0001a12 <mem_cpy>
c0003671:	83 c5 20             	add    ebp,0x20
c0003674:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003678:	77 b3                	ja     c000362d <load_xdir+0xbf>
c000367a:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003680:	77 1b                	ja     c000369d <load_xdir+0x12f>
c0003682:	89 f8                	mov    eax,edi
c0003684:	e8 d8 e7 ff ff       	call   c0001e61 <xdir_sum>
c0003689:	89 c1                	mov    ecx,eax
c000368b:	8d 47 02             	lea    eax,[edi+0x2]
c000368e:	e8 00 e3 ff ff       	call   c0001993 <ld_word>
c0003693:	66 39 c1             	cmp    cx,ax
c0003696:	74 05                	je     c000369d <load_xdir+0x12f>
c0003698:	bb 02 00 00 00       	mov    ebx,0x2
c000369d:	83 c4 1c             	add    esp,0x1c
c00036a0:	89 d8                	mov    eax,ebx
c00036a2:	5b                   	pop    ebx
c00036a3:	5e                   	pop    esi
c00036a4:	5f                   	pop    edi
c00036a5:	5d                   	pop    ebp
c00036a6:	c3                   	ret    

c00036a7 <load_obj_xdir>:
c00036a7:	53                   	push   ebx
c00036a8:	89 c3                	mov    ebx,eax
c00036aa:	83 ec 08             	sub    esp,0x8
c00036ad:	8b 02                	mov    eax,DWORD PTR [edx]
c00036af:	89 03                	mov    DWORD PTR [ebx],eax
c00036b1:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00036b4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00036b7:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036ba:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00036bd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c0:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00036c7:	30 c0                	xor    al,al
c00036c9:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00036d0:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00036d3:	89 d8                	mov    eax,ebx
c00036d5:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00036d8:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00036db:	e8 02 f8 ff ff       	call   c0002ee2 <dir_sdi>
c00036e0:	85 c0                	test   eax,eax
c00036e2:	75 0b                	jne    c00036ef <load_obj_xdir+0x48>
c00036e4:	83 c4 08             	add    esp,0x8
c00036e7:	89 d8                	mov    eax,ebx
c00036e9:	5b                   	pop    ebx
c00036ea:	e9 7f fe ff ff       	jmp    c000356e <load_xdir>
c00036ef:	83 c4 08             	add    esp,0x8
c00036f2:	5b                   	pop    ebx
c00036f3:	c3                   	ret    

c00036f4 <dir_read>:
c00036f4:	55                   	push   ebp
c00036f5:	bd 04 00 00 00       	mov    ebp,0x4
c00036fa:	57                   	push   edi
c00036fb:	56                   	push   esi
c00036fc:	be ff ff ff ff       	mov    esi,0xffffffff
c0003701:	53                   	push   ebx
c0003702:	89 c3                	mov    ebx,eax
c0003704:	83 ec 1c             	sub    esp,0x1c
c0003707:	8b 38                	mov    edi,DWORD PTR [eax]
c0003709:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000370d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003712:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003715:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003718:	89 c8                	mov    eax,ecx
c000371a:	09 d0                	or     eax,edx
c000371c:	0f 84 25 01 00 00    	je     c0003847 <dir_read+0x153>
c0003722:	89 f8                	mov    eax,edi
c0003724:	e8 41 ea ff ff       	call   c000216a <move_window>
c0003729:	89 c5                	mov    ebp,eax
c000372b:	85 c0                	test   eax,eax
c000372d:	0f 85 23 01 00 00    	jne    c0003856 <dir_read+0x162>
c0003733:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003736:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003738:	84 c9                	test   cl,cl
c000373a:	0f 84 11 01 00 00    	je     c0003851 <dir_read+0x15d>
c0003740:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003743:	75 48                	jne    c000378d <dir_read+0x99>
c0003745:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000374a:	74 10                	je     c000375c <dir_read+0x68>
c000374c:	80 f9 83             	cmp    cl,0x83
c000374f:	0f 85 dd 00 00 00    	jne    c0003832 <dir_read+0x13e>
c0003755:	31 ed                	xor    ebp,ebp
c0003757:	e9 08 01 00 00       	jmp    c0003864 <dir_read+0x170>
c000375c:	80 f9 85             	cmp    cl,0x85
c000375f:	0f 85 cd 00 00 00    	jne    c0003832 <dir_read+0x13e>
c0003765:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003768:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000376b:	89 d8                	mov    eax,ebx
c000376d:	e8 fc fd ff ff       	call   c000356e <load_xdir>
c0003772:	89 c5                	mov    ebp,eax
c0003774:	85 c0                	test   eax,eax
c0003776:	0f 85 da 00 00 00    	jne    c0003856 <dir_read+0x162>
c000377c:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c000377f:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003782:	83 e0 3f             	and    eax,0x3f
c0003785:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003788:	e9 d7 00 00 00       	jmp    c0003864 <dir_read+0x170>
c000378d:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003790:	83 e0 3f             	and    eax,0x3f
c0003793:	80 f9 e5             	cmp    cl,0xe5
c0003796:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000379a:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000379d:	0f 84 8a 00 00 00    	je     c000382d <dir_read+0x139>
c00037a3:	80 f9 2e             	cmp    cl,0x2e
c00037a6:	0f 84 81 00 00 00    	je     c000382d <dir_read+0x139>
c00037ac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037b0:	83 e0 1f             	and    eax,0x1f
c00037b3:	83 f8 08             	cmp    eax,0x8
c00037b6:	0f 94 c0             	sete   al
c00037b9:	0f b6 c0             	movzx  eax,al
c00037bc:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037c0:	75 6b                	jne    c000382d <dir_read+0x139>
c00037c2:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00037c7:	75 44                	jne    c000380d <dir_read+0x119>
c00037c9:	f6 c1 40             	test   cl,0x40
c00037cc:	74 12                	je     c00037e0 <dir_read+0xec>
c00037ce:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037d1:	83 e1 bf             	and    ecx,0xffffffbf
c00037d4:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037d8:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037db:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037de:	eb 06                	jmp    c00037e6 <dir_read+0xf2>
c00037e0:	89 f0                	mov    eax,esi
c00037e2:	38 c8                	cmp    al,cl
c00037e4:	75 47                	jne    c000382d <dir_read+0x139>
c00037e6:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037ea:	be ff ff ff ff       	mov    esi,0xffffffff
c00037ef:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00037f2:	75 3e                	jne    c0003832 <dir_read+0x13e>
c00037f4:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00037f7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00037fb:	e8 95 e4 ff ff       	call   c0001c95 <pick_lfn>
c0003800:	85 c0                	test   eax,eax
c0003802:	74 2e                	je     c0003832 <dir_read+0x13e>
c0003804:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003808:	8d 71 ff             	lea    esi,[ecx-0x1]
c000380b:	eb 25                	jmp    c0003832 <dir_read+0x13e>
c000380d:	89 f0                	mov    eax,esi
c000380f:	84 c0                	test   al,al
c0003811:	75 11                	jne    c0003824 <dir_read+0x130>
c0003813:	89 d0                	mov    eax,edx
c0003815:	e8 35 e6 ff ff       	call   c0001e4f <sum_sfn>
c000381a:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c000381e:	0f 84 31 ff ff ff    	je     c0003755 <dir_read+0x61>
c0003824:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000382b:	eb 37                	jmp    c0003864 <dir_read+0x170>
c000382d:	be ff ff ff ff       	mov    esi,0xffffffff
c0003832:	31 d2                	xor    edx,edx
c0003834:	89 d8                	mov    eax,ebx
c0003836:	e8 01 fc ff ff       	call   c000343c <dir_next>
c000383b:	89 c5                	mov    ebp,eax
c000383d:	85 c0                	test   eax,eax
c000383f:	0f 84 cd fe ff ff    	je     c0003712 <dir_read+0x1e>
c0003845:	eb 0f                	jmp    c0003856 <dir_read+0x162>
c0003847:	85 ed                	test   ebp,ebp
c0003849:	0f 84 06 ff ff ff    	je     c0003755 <dir_read+0x61>
c000384f:	eb 05                	jmp    c0003856 <dir_read+0x162>
c0003851:	bd 04 00 00 00       	mov    ebp,0x4
c0003856:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000385d:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003864:	83 c4 1c             	add    esp,0x1c
c0003867:	89 e8                	mov    eax,ebp
c0003869:	5b                   	pop    ebx
c000386a:	5e                   	pop    esi
c000386b:	5f                   	pop    edi
c000386c:	5d                   	pop    ebp
c000386d:	c3                   	ret    

c000386e <dir_alloc>:
c000386e:	55                   	push   ebp
c000386f:	89 d5                	mov    ebp,edx
c0003871:	57                   	push   edi
c0003872:	31 d2                	xor    edx,edx
c0003874:	56                   	push   esi
c0003875:	53                   	push   ebx
c0003876:	89 c3                	mov    ebx,eax
c0003878:	83 ec 0c             	sub    esp,0xc
c000387b:	8b 38                	mov    edi,DWORD PTR [eax]
c000387d:	e8 60 f6 ff ff       	call   c0002ee2 <dir_sdi>
c0003882:	85 c0                	test   eax,eax
c0003884:	75 4e                	jne    c00038d4 <dir_alloc+0x66>
c0003886:	31 f6                	xor    esi,esi
c0003888:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000388b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000388e:	89 f8                	mov    eax,edi
c0003890:	e8 d5 e8 ff ff       	call   c000216a <move_window>
c0003895:	85 c0                	test   eax,eax
c0003897:	75 3b                	jne    c00038d4 <dir_alloc+0x66>
c0003899:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000389c:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c000389f:	8a 12                	mov    dl,BYTE PTR [edx]
c00038a1:	75 07                	jne    c00038aa <dir_alloc+0x3c>
c00038a3:	f7 d2                	not    edx
c00038a5:	c0 ea 07             	shr    dl,0x7
c00038a8:	eb 0d                	jmp    c00038b7 <dir_alloc+0x49>
c00038aa:	80 fa e5             	cmp    dl,0xe5
c00038ad:	0f 94 c1             	sete   cl
c00038b0:	84 d2                	test   dl,dl
c00038b2:	0f 94 c2             	sete   dl
c00038b5:	09 ca                	or     edx,ecx
c00038b7:	84 d2                	test   dl,dl
c00038b9:	74 07                	je     c00038c2 <dir_alloc+0x54>
c00038bb:	46                   	inc    esi
c00038bc:	39 ee                	cmp    esi,ebp
c00038be:	75 04                	jne    c00038c4 <dir_alloc+0x56>
c00038c0:	eb 1c                	jmp    c00038de <dir_alloc+0x70>
c00038c2:	31 f6                	xor    esi,esi
c00038c4:	ba 01 00 00 00       	mov    edx,0x1
c00038c9:	89 d8                	mov    eax,ebx
c00038cb:	e8 6c fb ff ff       	call   c000343c <dir_next>
c00038d0:	85 c0                	test   eax,eax
c00038d2:	74 b4                	je     c0003888 <dir_alloc+0x1a>
c00038d4:	83 f8 04             	cmp    eax,0x4
c00038d7:	75 05                	jne    c00038de <dir_alloc+0x70>
c00038d9:	b8 07 00 00 00       	mov    eax,0x7
c00038de:	83 c4 0c             	add    esp,0xc
c00038e1:	5b                   	pop    ebx
c00038e2:	5e                   	pop    esi
c00038e3:	5f                   	pop    edi
c00038e4:	5d                   	pop    ebp
c00038e5:	c3                   	ret    

c00038e6 <store_xdir>:
c00038e6:	55                   	push   ebp
c00038e7:	57                   	push   edi
c00038e8:	89 c7                	mov    edi,eax
c00038ea:	56                   	push   esi
c00038eb:	53                   	push   ebx
c00038ec:	83 ec 0c             	sub    esp,0xc
c00038ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00038f1:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00038f4:	89 e8                	mov    eax,ebp
c00038f6:	e8 66 e5 ff ff       	call   c0001e61 <xdir_sum>
c00038fb:	0f b7 d0             	movzx  edx,ax
c00038fe:	8d 45 02             	lea    eax,[ebp+0x2]
c0003901:	e8 ff e0 ff ff       	call   c0001a05 <st_word>
c0003906:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003909:	89 f8                	mov    eax,edi
c000390b:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c000390f:	e8 ce f5 ff ff       	call   c0002ee2 <dir_sdi>
c0003914:	89 c6                	mov    esi,eax
c0003916:	85 f6                	test   esi,esi
c0003918:	75 3d                	jne    c0003957 <store_xdir+0x71>
c000391a:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c000391d:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003920:	8b 07                	mov    eax,DWORD PTR [edi]
c0003922:	e8 43 e8 ff ff       	call   c000216a <move_window>
c0003927:	89 c6                	mov    esi,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 2a                	jne    c0003957 <store_xdir+0x71>
c000392d:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003930:	b9 20 00 00 00       	mov    ecx,0x20
c0003935:	89 ea                	mov    edx,ebp
c0003937:	e8 d6 e0 ff ff       	call   c0001a12 <mem_cpy>
c000393c:	8b 07                	mov    eax,DWORD PTR [edi]
c000393e:	85 db                	test   ebx,ebx
c0003940:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003944:	74 11                	je     c0003957 <store_xdir+0x71>
c0003946:	31 d2                	xor    edx,edx
c0003948:	89 f8                	mov    eax,edi
c000394a:	e8 ed fa ff ff       	call   c000343c <dir_next>
c000394f:	83 c5 20             	add    ebp,0x20
c0003952:	89 c6                	mov    esi,eax
c0003954:	4b                   	dec    ebx
c0003955:	eb bf                	jmp    c0003916 <store_xdir+0x30>
c0003957:	89 f0                	mov    eax,esi
c0003959:	83 fe 02             	cmp    esi,0x2
c000395c:	76 05                	jbe    c0003963 <store_xdir+0x7d>
c000395e:	b8 02 00 00 00       	mov    eax,0x2
c0003963:	83 c4 0c             	add    esp,0xc
c0003966:	5b                   	pop    ebx
c0003967:	5e                   	pop    esi
c0003968:	5f                   	pop    edi
c0003969:	5d                   	pop    ebp
c000396a:	c3                   	ret    

c000396b <dir_remove>:
c000396b:	57                   	push   edi
c000396c:	56                   	push   esi
c000396d:	53                   	push   ebx
c000396e:	89 c3                	mov    ebx,eax
c0003970:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003973:	8b 30                	mov    esi,DWORD PTR [eax]
c0003975:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003978:	83 fa ff             	cmp    edx,0xffffffff
c000397b:	74 09                	je     c0003986 <dir_remove+0x1b>
c000397d:	e8 60 f5 ff ff       	call   c0002ee2 <dir_sdi>
c0003982:	85 c0                	test   eax,eax
c0003984:	75 41                	jne    c00039c7 <dir_remove+0x5c>
c0003986:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003989:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000398c:	89 f0                	mov    eax,esi
c000398e:	e8 d7 e7 ff ff       	call   c000216a <move_window>
c0003993:	85 c0                	test   eax,eax
c0003995:	75 26                	jne    c00039bd <dir_remove+0x52>
c0003997:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000399a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000399d:	75 05                	jne    c00039a4 <dir_remove+0x39>
c000399f:	80 22 7f             	and    BYTE PTR [edx],0x7f
c00039a2:	eb 03                	jmp    c00039a7 <dir_remove+0x3c>
c00039a4:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00039a7:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00039ab:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c00039ae:	73 17                	jae    c00039c7 <dir_remove+0x5c>
c00039b0:	31 d2                	xor    edx,edx
c00039b2:	89 d8                	mov    eax,ebx
c00039b4:	e8 83 fa ff ff       	call   c000343c <dir_next>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	74 c9                	je     c0003986 <dir_remove+0x1b>
c00039bd:	83 f8 04             	cmp    eax,0x4
c00039c0:	75 05                	jne    c00039c7 <dir_remove+0x5c>
c00039c2:	b8 02 00 00 00       	mov    eax,0x2
c00039c7:	5b                   	pop    ebx
c00039c8:	5e                   	pop    esi
c00039c9:	5f                   	pop    edi
c00039ca:	c3                   	ret    

c00039cb <create_name>:
c00039cb:	55                   	push   ebp
c00039cc:	89 d5                	mov    ebp,edx
c00039ce:	57                   	push   edi
c00039cf:	89 c7                	mov    edi,eax
c00039d1:	56                   	push   esi
c00039d2:	31 f6                	xor    esi,esi
c00039d4:	53                   	push   ebx
c00039d5:	83 ec 3c             	sub    esp,0x3c
c00039d8:	8b 02                	mov    eax,DWORD PTR [edx]
c00039da:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00039de:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039e7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00039eb:	e8 7d e0 ff ff       	call   c0001a6d <tchar2uni>
c00039f0:	89 c3                	mov    ebx,eax
c00039f2:	83 f8 ff             	cmp    eax,0xffffffff
c00039f5:	75 0a                	jne    c0003a01 <create_name+0x36>
c00039f7:	b8 06 00 00 00       	mov    eax,0x6
c00039fc:	e9 83 02 00 00       	jmp    c0003c84 <create_name+0x2b9>
c0003a01:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a06:	76 0c                	jbe    c0003a14 <create_name+0x49>
c0003a08:	c1 e8 10             	shr    eax,0x10
c0003a0b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a0f:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a13:	46                   	inc    esi
c0003a14:	66 83 fb 1f          	cmp    bx,0x1f
c0003a18:	89 d8                	mov    eax,ebx
c0003a1a:	76 36                	jbe    c0003a52 <create_name+0x87>
c0003a1c:	66 83 fb 2f          	cmp    bx,0x2f
c0003a20:	74 30                	je     c0003a52 <create_name+0x87>
c0003a22:	66 83 fb 5c          	cmp    bx,0x5c
c0003a26:	74 39                	je     c0003a61 <create_name+0x96>
c0003a28:	66 83 fb 7f          	cmp    bx,0x7f
c0003a2c:	77 11                	ja     c0003a3f <create_name+0x74>
c0003a2e:	0f b7 d3             	movzx  edx,bx
c0003a31:	b8 12 ff 01 c0       	mov    eax,0xc001ff12
c0003a36:	e8 1a e0 ff ff       	call   c0001a55 <chk_chr>
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 b8                	jne    c00039f7 <create_name+0x2c>
c0003a3f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003a45:	77 b0                	ja     c00039f7 <create_name+0x2c>
c0003a47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a4b:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003a4f:	46                   	inc    esi
c0003a50:	eb 95                	jmp    c00039e7 <create_name+0x1c>
c0003a52:	66 83 f8 1f          	cmp    ax,0x1f
c0003a56:	b3 04                	mov    bl,0x4
c0003a58:	76 19                	jbe    c0003a73 <create_name+0xa8>
c0003a5a:	eb 05                	jmp    c0003a61 <create_name+0x96>
c0003a5c:	40                   	inc    eax
c0003a5d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a61:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a65:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a67:	80 fa 2f             	cmp    dl,0x2f
c0003a6a:	74 f0                	je     c0003a5c <create_name+0x91>
c0003a6c:	80 fa 5c             	cmp    dl,0x5c
c0003a6f:	74 eb                	je     c0003a5c <create_name+0x91>
c0003a71:	31 db                	xor    ebx,ebx
c0003a73:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a77:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003a7a:	85 f6                	test   esi,esi
c0003a7c:	74 18                	je     c0003a96 <create_name+0xcb>
c0003a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a82:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003a87:	66 83 f8 20          	cmp    ax,0x20
c0003a8b:	74 06                	je     c0003a93 <create_name+0xc8>
c0003a8d:	66 83 f8 2e          	cmp    ax,0x2e
c0003a91:	75 03                	jne    c0003a96 <create_name+0xcb>
c0003a93:	4e                   	dec    esi
c0003a94:	eb e4                	jmp    c0003a7a <create_name+0xaf>
c0003a96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a9a:	31 ed                	xor    ebp,ebp
c0003a9c:	85 f6                	test   esi,esi
c0003a9e:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003aa4:	0f 84 4d ff ff ff    	je     c00039f7 <create_name+0x2c>
c0003aaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003aae:	8d 55 01             	lea    edx,[ebp+0x1]
c0003ab1:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003ab5:	66 83 f8 20          	cmp    ax,0x20
c0003ab9:	75 04                	jne    c0003abf <create_name+0xf4>
c0003abb:	89 d5                	mov    ebp,edx
c0003abd:	eb eb                	jmp    c0003aaa <create_name+0xdf>
c0003abf:	85 ed                	test   ebp,ebp
c0003ac1:	75 06                	jne    c0003ac9 <create_name+0xfe>
c0003ac3:	66 83 f8 2e          	cmp    ax,0x2e
c0003ac7:	75 08                	jne    c0003ad1 <create_name+0x106>
c0003ac9:	83 cb 03             	or     ebx,0x3
c0003acc:	eb 03                	jmp    c0003ad1 <create_name+0x106>
c0003ace:	4e                   	dec    esi
c0003acf:	74 0c                	je     c0003add <create_name+0x112>
c0003ad1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ad5:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003adb:	75 f1                	jne    c0003ace <create_name+0x103>
c0003add:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ae2:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ae5:	ba 20 00 00 00       	mov    edx,0x20
c0003aea:	e8 38 df ff ff       	call   c0001a27 <mem_set>
c0003aef:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0003af7:	31 c9                	xor    ecx,ecx
c0003af9:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0003afe:	8d 45 01             	lea    eax,[ebp+0x1]
c0003b01:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b09:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b0d:	66 85 ed             	test   bp,bp
c0003b10:	0f 84 1f 01 00 00    	je     c0003c35 <create_name+0x26a>
c0003b16:	66 83 fd 20          	cmp    bp,0x20
c0003b1a:	74 0c                	je     c0003b28 <create_name+0x15d>
c0003b1c:	66 83 fd 2e          	cmp    bp,0x2e
c0003b20:	75 0f                	jne    c0003b31 <create_name+0x166>
c0003b22:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003b26:	74 09                	je     c0003b31 <create_name+0x166>
c0003b28:	83 cb 03             	or     ebx,0x3
c0003b2b:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
c0003b2f:	eb cd                	jmp    c0003afe <create_name+0x133>
c0003b31:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0003b35:	73 06                	jae    c0003b3d <create_name+0x172>
c0003b37:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003b3b:	75 3a                	jne    c0003b77 <create_name+0x1ac>
c0003b3d:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0003b42:	75 08                	jne    c0003b4c <create_name+0x181>
c0003b44:	83 cb 03             	or     ebx,0x3
c0003b47:	e9 e9 00 00 00       	jmp    c0003c35 <create_name+0x26a>
c0003b4c:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003b50:	74 0d                	je     c0003b5f <create_name+0x194>
c0003b52:	83 cb 03             	or     ebx,0x3
c0003b55:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003b59:	0f 87 d6 00 00 00    	ja     c0003c35 <create_name+0x26a>
c0003b5f:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003b64:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0003b68:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0003b70:	b9 08 00 00 00       	mov    ecx,0x8
c0003b75:	eb b4                	jmp    c0003b2b <create_name+0x160>
c0003b77:	66 83 fd 7f          	cmp    bp,0x7f
c0003b7b:	76 68                	jbe    c0003be5 <create_name+0x21a>
c0003b7d:	88 da                	mov    dl,bl
c0003b7f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003b83:	83 ca 02             	or     edx,0x2
c0003b86:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003b8a:	50                   	push   eax
c0003b8b:	50                   	push   eax
c0003b8c:	68 b5 01 00 00       	push   0x1b5
c0003b91:	55                   	push   ebp
c0003b92:	e8 0f 46 00 00       	call   c00081a6 <ff_uni2oem>
c0003b97:	83 c4 10             	add    esp,0x10
c0003b9a:	89 c5                	mov    ebp,eax
c0003b9c:	a8 80                	test   al,0x80
c0003b9e:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003ba2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ba6:	74 0c                	je     c0003bb4 <create_name+0x1e9>
c0003ba8:	83 e5 7f             	and    ebp,0x7f
c0003bab:	0f b6 ad 60 fe 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe01a0]
c0003bb2:	eb 2a                	jmp    c0003bde <create_name+0x213>
c0003bb4:	66 3d ff 00          	cmp    ax,0xff
c0003bb8:	76 24                	jbe    c0003bde <create_name+0x213>
c0003bba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003bbe:	48                   	dec    eax
c0003bbf:	39 c8                	cmp    eax,ecx
c0003bc1:	77 0c                	ja     c0003bcf <create_name+0x204>
c0003bc3:	83 cb 03             	or     ebx,0x3
c0003bc6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0003bca:	e9 5c ff ff ff       	jmp    c0003b2b <create_name+0x160>
c0003bcf:	89 e8                	mov    eax,ebp
c0003bd1:	88 d3                	mov    bl,dl
c0003bd3:	66 c1 e8 08          	shr    ax,0x8
c0003bd7:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003bdb:	41                   	inc    ecx
c0003bdc:	eb 4b                	jmp    c0003c29 <create_name+0x25e>
c0003bde:	66 85 ed             	test   bp,bp
c0003be1:	88 d3                	mov    bl,dl
c0003be3:	74 19                	je     c0003bfe <create_name+0x233>
c0003be5:	0f b7 d5             	movzx  edx,bp
c0003be8:	b8 1b ff 01 c0       	mov    eax,0xc001ff1b
c0003bed:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003bf1:	e8 5f de ff ff       	call   c0001a55 <chk_chr>
c0003bf6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003bfa:	85 c0                	test   eax,eax
c0003bfc:	74 0a                	je     c0003c08 <create_name+0x23d>
c0003bfe:	83 cb 03             	or     ebx,0x3
c0003c01:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c06:	eb 21                	jmp    c0003c29 <create_name+0x25e>
c0003c08:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c0b:	66 83 f8 19          	cmp    ax,0x19
c0003c0f:	77 07                	ja     c0003c18 <create_name+0x24d>
c0003c11:	80 4c 24 0b 02       	or     BYTE PTR [esp+0xb],0x2
c0003c16:	eb 11                	jmp    c0003c29 <create_name+0x25e>
c0003c18:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c1b:	66 83 f8 19          	cmp    ax,0x19
c0003c1f:	77 08                	ja     c0003c29 <create_name+0x25e>
c0003c21:	80 4c 24 0b 01       	or     BYTE PTR [esp+0xb],0x1
c0003c26:	83 ed 20             	sub    ebp,0x20
c0003c29:	89 e8                	mov    eax,ebp
c0003c2b:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c2f:	41                   	inc    ecx
c0003c30:	e9 f6 fe ff ff       	jmp    c0003b2b <create_name+0x160>
c0003c35:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003c39:	75 04                	jne    c0003c3f <create_name+0x274>
c0003c3b:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003c3f:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0003c44:	75 05                	jne    c0003c4b <create_name+0x280>
c0003c46:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003c4b:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003c4f:	83 e0 0c             	and    eax,0xc
c0003c52:	3c 0c                	cmp    al,0xc
c0003c54:	74 0b                	je     c0003c61 <create_name+0x296>
c0003c56:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003c5a:	83 e0 03             	and    eax,0x3
c0003c5d:	3c 03                	cmp    al,0x3
c0003c5f:	75 05                	jne    c0003c66 <create_name+0x29b>
c0003c61:	83 cb 02             	or     ebx,0x2
c0003c64:	eb 19                	jmp    c0003c7f <create_name+0x2b4>
c0003c66:	f6 c3 02             	test   bl,0x2
c0003c69:	75 14                	jne    c0003c7f <create_name+0x2b4>
c0003c6b:	f6 44 24 0b 01       	test   BYTE PTR [esp+0xb],0x1
c0003c70:	74 03                	je     c0003c75 <create_name+0x2aa>
c0003c72:	83 cb 10             	or     ebx,0x10
c0003c75:	f6 44 24 0b 04       	test   BYTE PTR [esp+0xb],0x4
c0003c7a:	74 03                	je     c0003c7f <create_name+0x2b4>
c0003c7c:	83 cb 08             	or     ebx,0x8
c0003c7f:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003c82:	31 c0                	xor    eax,eax
c0003c84:	83 c4 3c             	add    esp,0x3c
c0003c87:	5b                   	pop    ebx
c0003c88:	5e                   	pop    esi
c0003c89:	5f                   	pop    edi
c0003c8a:	5d                   	pop    ebp
c0003c8b:	c3                   	ret    

c0003c8c <xname_sum>:
c0003c8c:	56                   	push   esi
c0003c8d:	89 c6                	mov    esi,eax
c0003c8f:	53                   	push   ebx
c0003c90:	31 db                	xor    ebx,ebx
c0003c92:	51                   	push   ecx
c0003c93:	83 c6 02             	add    esi,0x2
c0003c96:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003c9a:	66 85 c0             	test   ax,ax
c0003c9d:	74 1f                	je     c0003cbe <xname_sum+0x32>
c0003c9f:	66 d1 cb             	ror    bx,1
c0003ca2:	83 ec 0c             	sub    esp,0xc
c0003ca5:	50                   	push   eax
c0003ca6:	e8 00 46 00 00       	call   c00082ab <ff_wtoupper>
c0003cab:	0f b6 d0             	movzx  edx,al
c0003cae:	01 d3                	add    ebx,edx
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	66 c1 e8 08          	shr    ax,0x8
c0003cb7:	66 d1 cb             	ror    bx,1
c0003cba:	01 c3                	add    ebx,eax
c0003cbc:	eb d5                	jmp    c0003c93 <xname_sum+0x7>
c0003cbe:	5a                   	pop    edx
c0003cbf:	89 d8                	mov    eax,ebx
c0003cc1:	5b                   	pop    ebx
c0003cc2:	5e                   	pop    esi
c0003cc3:	c3                   	ret    

c0003cc4 <create_xdir>:
c0003cc4:	55                   	push   ebp
c0003cc5:	b9 40 00 00 00       	mov    ecx,0x40
c0003cca:	57                   	push   edi
c0003ccb:	bd 01 00 00 00       	mov    ebp,0x1
c0003cd0:	56                   	push   esi
c0003cd1:	31 ff                	xor    edi,edi
c0003cd3:	53                   	push   ebx
c0003cd4:	89 c3                	mov    ebx,eax
c0003cd6:	83 ec 1c             	sub    esp,0x1c
c0003cd9:	be 40 00 00 00       	mov    esi,0x40
c0003cde:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ce2:	31 d2                	xor    edx,edx
c0003ce4:	e8 3e dd ff ff       	call   c0001a27 <mem_set>
c0003ce9:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003cec:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003cf0:	31 c9                	xor    ecx,ecx
c0003cf2:	8d 46 01             	lea    eax,[esi+0x1]
c0003cf5:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003cf9:	83 c6 02             	add    esi,0x2
c0003cfc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d00:	66 85 ed             	test   bp,bp
c0003d03:	74 12                	je     c0003d17 <create_xdir+0x53>
c0003d05:	0f b6 c1             	movzx  eax,cl
c0003d08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d0c:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003d10:	66 83 fd 01          	cmp    bp,0x1
c0003d14:	80 d9 ff             	sbb    cl,0xff
c0003d17:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003d1a:	83 c6 02             	add    esi,0x2
c0003d1d:	0f b7 d5             	movzx  edx,bp
c0003d20:	e8 e0 dc ff ff       	call   c0001a05 <st_word>
c0003d25:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003d2b:	75 d3                	jne    c0003d00 <create_xdir+0x3c>
c0003d2d:	8d 47 01             	lea    eax,[edi+0x1]
c0003d30:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d34:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003d38:	0f b6 c1             	movzx  eax,cl
c0003d3b:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003d40:	74 07                	je     c0003d49 <create_xdir+0x85>
c0003d42:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003d47:	eb a9                	jmp    c0003cf2 <create_xdir+0x2e>
c0003d49:	8d 47 02             	lea    eax,[edi+0x2]
c0003d4c:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003d4f:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003d52:	89 d0                	mov    eax,edx
c0003d54:	e8 33 ff ff ff       	call   c0003c8c <xname_sum>
c0003d59:	83 c4 1c             	add    esp,0x1c
c0003d5c:	0f b7 d0             	movzx  edx,ax
c0003d5f:	8d 43 24             	lea    eax,[ebx+0x24]
c0003d62:	5b                   	pop    ebx
c0003d63:	5e                   	pop    esi
c0003d64:	5f                   	pop    edi
c0003d65:	5d                   	pop    ebp
c0003d66:	e9 9a dc ff ff       	jmp    c0001a05 <st_word>

c0003d6b <cmp_lfn>:
c0003d6b:	55                   	push   ebp
c0003d6c:	57                   	push   edi
c0003d6d:	89 d7                	mov    edi,edx
c0003d6f:	56                   	push   esi
c0003d70:	53                   	push   ebx
c0003d71:	83 ec 1c             	sub    esp,0x1c
c0003d74:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003d78:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003d7b:	e8 13 dc ff ff       	call   c0001993 <ld_word>
c0003d80:	66 85 c0             	test   ax,ax
c0003d83:	74 07                	je     c0003d8c <cmp_lfn+0x21>
c0003d85:	31 c0                	xor    eax,eax
c0003d87:	e9 9a 00 00 00       	jmp    c0003e26 <cmp_lfn+0xbb>
c0003d8c:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003d8e:	bd 01 00 00 00       	mov    ebp,0x1
c0003d93:	83 e3 3f             	and    ebx,0x3f
c0003d96:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003d9e:	4b                   	dec    ebx
c0003d9f:	6b db 0d             	imul   ebx,ebx,0xd
c0003da2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003da6:	0f b6 80 e0 fe 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0120]
c0003dad:	01 f8                	add    eax,edi
c0003daf:	e8 df db ff ff       	call   c0001993 <ld_word>
c0003db4:	66 85 ed             	test   bp,bp
c0003db7:	89 c6                	mov    esi,eax
c0003db9:	74 3c                	je     c0003df7 <cmp_lfn+0x8c>
c0003dbb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003dc1:	77 c2                	ja     c0003d85 <cmp_lfn+0x1a>
c0003dc3:	83 ec 0c             	sub    esp,0xc
c0003dc6:	0f b7 c0             	movzx  eax,ax
c0003dc9:	50                   	push   eax
c0003dca:	e8 dc 44 00 00       	call   c00082ab <ff_wtoupper>
c0003dcf:	89 c5                	mov    ebp,eax
c0003dd1:	8d 43 01             	lea    eax,[ebx+0x1]
c0003dd4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003dd8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003ddc:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003de0:	89 04 24             	mov    DWORD PTR [esp],eax
c0003de3:	e8 c3 44 00 00       	call   c00082ab <ff_wtoupper>
c0003de8:	83 c4 10             	add    esp,0x10
c0003deb:	39 c5                	cmp    ebp,eax
c0003ded:	75 96                	jne    c0003d85 <cmp_lfn+0x1a>
c0003def:	89 f5                	mov    ebp,esi
c0003df1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003df5:	eb 04                	jmp    c0003dfb <cmp_lfn+0x90>
c0003df7:	66 46                	inc    si
c0003df9:	75 8a                	jne    c0003d85 <cmp_lfn+0x1a>
c0003dfb:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003dff:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e04:	75 9c                	jne    c0003da2 <cmp_lfn+0x37>
c0003e06:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e09:	74 16                	je     c0003e21 <cmp_lfn+0xb6>
c0003e0b:	66 85 ed             	test   bp,bp
c0003e0e:	74 11                	je     c0003e21 <cmp_lfn+0xb6>
c0003e10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e14:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003e19:	0f 94 c0             	sete   al
c0003e1c:	0f b6 c0             	movzx  eax,al
c0003e1f:	eb 05                	jmp    c0003e26 <cmp_lfn+0xbb>
c0003e21:	b8 01 00 00 00       	mov    eax,0x1
c0003e26:	83 c4 1c             	add    esp,0x1c
c0003e29:	5b                   	pop    ebx
c0003e2a:	5e                   	pop    esi
c0003e2b:	5f                   	pop    edi
c0003e2c:	5d                   	pop    ebp
c0003e2d:	c3                   	ret    

c0003e2e <dir_find>:
c0003e2e:	55                   	push   ebp
c0003e2f:	31 d2                	xor    edx,edx
c0003e31:	57                   	push   edi
c0003e32:	56                   	push   esi
c0003e33:	53                   	push   ebx
c0003e34:	89 c3                	mov    ebx,eax
c0003e36:	83 ec 1c             	sub    esp,0x1c
c0003e39:	8b 30                	mov    esi,DWORD PTR [eax]
c0003e3b:	e8 a2 f0 ff ff       	call   c0002ee2 <dir_sdi>
c0003e40:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e43:	85 c0                	test   eax,eax
c0003e45:	0f 85 9f 01 00 00    	jne    c0003fea <dir_find+0x1bc>
c0003e4b:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003e4e:	0f 85 8e 00 00 00    	jne    c0003ee2 <dir_find+0xb4>
c0003e54:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003e57:	e8 30 fe ff ff       	call   c0003c8c <xname_sum>
c0003e5c:	89 c5                	mov    ebp,eax
c0003e5e:	31 d2                	xor    edx,edx
c0003e60:	89 d8                	mov    eax,ebx
c0003e62:	e8 8d f8 ff ff       	call   c00036f4 <dir_read>
c0003e67:	85 c0                	test   eax,eax
c0003e69:	0f 85 5f 01 00 00    	jne    c0003fce <dir_find+0x1a0>
c0003e6f:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003e72:	8d 41 24             	lea    eax,[ecx+0x24]
c0003e75:	e8 19 db ff ff       	call   c0001993 <ld_word>
c0003e7a:	66 39 e8             	cmp    ax,bp
c0003e7d:	75 df                	jne    c0003e5e <dir_find+0x30>
c0003e7f:	0f b6 49 23          	movzx  ecx,BYTE PTR [ecx+0x23]
c0003e83:	31 ff                	xor    edi,edi
c0003e85:	ba 40 00 00 00       	mov    edx,0x40
c0003e8a:	39 f9                	cmp    ecx,edi
c0003e8c:	0f 84 4a 01 00 00    	je     c0003fdc <dir_find+0x1ae>
c0003e92:	f6 c2 1f             	test   dl,0x1f
c0003e95:	75 03                	jne    c0003e9a <dir_find+0x6c>
c0003e97:	83 c2 02             	add    edx,0x2
c0003e9a:	89 d0                	mov    eax,edx
c0003e9c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003ea0:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003ea3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003ea7:	e8 e7 da ff ff       	call   c0001993 <ld_word>
c0003eac:	83 ec 0c             	sub    esp,0xc
c0003eaf:	0f b7 c0             	movzx  eax,ax
c0003eb2:	50                   	push   eax
c0003eb3:	e8 f3 43 00 00       	call   c00082ab <ff_wtoupper>
c0003eb8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ebc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ebf:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0003ec3:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ec6:	e8 e0 43 00 00       	call   c00082ab <ff_wtoupper>
c0003ecb:	83 c4 10             	add    esp,0x10
c0003ece:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003ed2:	75 8a                	jne    c0003e5e <dir_find+0x30>
c0003ed4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ed8:	47                   	inc    edi
c0003ed9:	83 c2 02             	add    edx,0x2
c0003edc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ee0:	eb a8                	jmp    c0003e8a <dir_find+0x5c>
c0003ee2:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003ee9:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003eee:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ef3:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003ef6:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003ef9:	89 f0                	mov    eax,esi
c0003efb:	e8 6a e2 ff ff       	call   c000216a <move_window>
c0003f00:	85 c0                	test   eax,eax
c0003f02:	0f 85 c6 00 00 00    	jne    c0003fce <dir_find+0x1a0>
c0003f08:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f0b:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003f0e:	84 c9                	test   cl,cl
c0003f10:	0f 84 bd 00 00 00    	je     c0003fd3 <dir_find+0x1a5>
c0003f16:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003f19:	88 d0                	mov    al,dl
c0003f1b:	83 e0 3f             	and    eax,0x3f
c0003f1e:	80 f9 e5             	cmp    cl,0xe5
c0003f21:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003f24:	0f 84 87 00 00 00    	je     c0003fb1 <dir_find+0x183>
c0003f2a:	80 e2 08             	and    dl,0x8
c0003f2d:	74 06                	je     c0003f35 <dir_find+0x107>
c0003f2f:	3c 0f                	cmp    al,0xf
c0003f31:	75 7e                	jne    c0003fb1 <dir_find+0x183>
c0003f33:	eb 04                	jmp    c0003f39 <dir_find+0x10b>
c0003f35:	3c 0f                	cmp    al,0xf
c0003f37:	75 4c                	jne    c0003f85 <dir_find+0x157>
c0003f39:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003f3d:	75 7e                	jne    c0003fbd <dir_find+0x18f>
c0003f3f:	f6 c1 40             	test   cl,0x40
c0003f42:	74 12                	je     c0003f56 <dir_find+0x128>
c0003f44:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003f47:	83 e1 bf             	and    ecx,0xffffffbf
c0003f4a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003f4e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003f51:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003f54:	eb 06                	jmp    c0003f5c <dir_find+0x12e>
c0003f56:	89 f8                	mov    eax,edi
c0003f58:	38 c8                	cmp    al,cl
c0003f5a:	75 5c                	jne    c0003fb8 <dir_find+0x18a>
c0003f5c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003f60:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f65:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003f68:	75 53                	jne    c0003fbd <dir_find+0x18f>
c0003f6a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f6d:	89 ea                	mov    edx,ebp
c0003f6f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003f73:	e8 f3 fd ff ff       	call   c0003d6b <cmp_lfn>
c0003f78:	85 c0                	test   eax,eax
c0003f7a:	74 41                	je     c0003fbd <dir_find+0x18f>
c0003f7c:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003f80:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003f83:	eb 38                	jmp    c0003fbd <dir_find+0x18f>
c0003f85:	89 f8                	mov    eax,edi
c0003f87:	84 c0                	test   al,al
c0003f89:	75 0d                	jne    c0003f98 <dir_find+0x16a>
c0003f8b:	89 e8                	mov    eax,ebp
c0003f8d:	e8 bd de ff ff       	call   c0001e4f <sum_sfn>
c0003f92:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0003f96:	74 52                	je     c0003fea <dir_find+0x1bc>
c0003f98:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0003f9c:	75 13                	jne    c0003fb1 <dir_find+0x183>
c0003f9e:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0003fa1:	b9 0b 00 00 00       	mov    ecx,0xb
c0003fa6:	89 e8                	mov    eax,ebp
c0003fa8:	e8 85 da ff ff       	call   c0001a32 <mem_cmp>
c0003fad:	85 c0                	test   eax,eax
c0003faf:	74 39                	je     c0003fea <dir_find+0x1bc>
c0003fb1:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fb8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fbd:	31 d2                	xor    edx,edx
c0003fbf:	89 d8                	mov    eax,ebx
c0003fc1:	e8 76 f4 ff ff       	call   c000343c <dir_next>
c0003fc6:	85 c0                	test   eax,eax
c0003fc8:	0f 84 25 ff ff ff    	je     c0003ef3 <dir_find+0xc5>
c0003fce:	89 04 24             	mov    DWORD PTR [esp],eax
c0003fd1:	eb 17                	jmp    c0003fea <dir_find+0x1bc>
c0003fd3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0003fda:	eb 0e                	jmp    c0003fea <dir_find+0x1bc>
c0003fdc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fdf:	66 83 3c 48 00       	cmp    WORD PTR [eax+ecx*2],0x0
c0003fe4:	0f 85 74 fe ff ff    	jne    c0003e5e <dir_find+0x30>
c0003fea:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0003fed:	83 c4 1c             	add    esp,0x1c
c0003ff0:	5b                   	pop    ebx
c0003ff1:	5e                   	pop    esi
c0003ff2:	5f                   	pop    edi
c0003ff3:	5d                   	pop    ebp
c0003ff4:	c3                   	ret    

c0003ff5 <dir_register>:
c0003ff5:	55                   	push   ebp
c0003ff6:	57                   	push   edi
c0003ff7:	56                   	push   esi
c0003ff8:	be 06 00 00 00       	mov    esi,0x6
c0003ffd:	53                   	push   ebx
c0003ffe:	83 ec 6c             	sub    esp,0x6c
c0004001:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004005:	0f 85 63 02 00 00    	jne    c000426e <dir_register+0x279>
c000400b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000400d:	31 ff                	xor    edi,edi
c000400f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004012:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004017:	74 03                	je     c000401c <dir_register+0x27>
c0004019:	47                   	inc    edi
c000401a:	eb f6                	jmp    c0004012 <dir_register+0x1d>
c000401c:	89 c3                	mov    ebx,eax
c000401e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004022:	0f 85 e1 00 00 00    	jne    c0004109 <dir_register+0x114>
c0004028:	83 c7 0e             	add    edi,0xe
c000402b:	b9 0f 00 00 00       	mov    ecx,0xf
c0004030:	89 f8                	mov    eax,edi
c0004032:	31 d2                	xor    edx,edx
c0004034:	f7 f1                	div    ecx
c0004036:	89 c7                	mov    edi,eax
c0004038:	8d 50 02             	lea    edx,[eax+0x2]
c000403b:	89 d8                	mov    eax,ebx
c000403d:	e8 2c f8 ff ff       	call   c000386e <dir_alloc>
c0004042:	89 c6                	mov    esi,eax
c0004044:	85 c0                	test   eax,eax
c0004046:	0f 85 22 02 00 00    	jne    c000426e <dir_register+0x279>
c000404c:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004052:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004055:	c1 e7 05             	shl    edi,0x5
c0004058:	29 f8                	sub    eax,edi
c000405a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000405d:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004060:	a8 04                	test   al,0x4
c0004062:	0f 84 91 00 00 00    	je     c00040f9 <dir_register+0x104>
c0004068:	83 e0 fb             	and    eax,0xfffffffb
c000406b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000406e:	89 d8                	mov    eax,ebx
c0004070:	e8 3d ec ff ff       	call   c0002cb2 <fill_first_frag>
c0004075:	85 c0                	test   eax,eax
c0004077:	0f 85 ef 01 00 00    	jne    c000426c <dir_register+0x277>
c000407d:	83 c9 ff             	or     ecx,0xffffffff
c0004080:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004083:	89 d8                	mov    eax,ebx
c0004085:	e8 f3 eb ff ff       	call   c0002c7d <fill_last_frag>
c000408a:	85 c0                	test   eax,eax
c000408c:	0f 85 da 01 00 00    	jne    c000426c <dir_register+0x277>
c0004092:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004096:	74 61                	je     c00040f9 <dir_register+0x104>
c0004098:	89 da                	mov    edx,ebx
c000409a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000409e:	e8 04 f6 ff ff       	call   c00036a7 <load_obj_xdir>
c00040a3:	85 c0                	test   eax,eax
c00040a5:	0f 85 c1 01 00 00    	jne    c000426c <dir_register+0x277>
c00040ab:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00040af:	c1 e2 09             	shl    edx,0x9
c00040b2:	31 c9                	xor    ecx,ecx
c00040b4:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00040b7:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00040ba:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00040bd:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00040c0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040c3:	83 c0 38             	add    eax,0x38
c00040c6:	e8 41 d9 ff ff       	call   c0001a0c <st_qword>
c00040cb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040ce:	83 c0 28             	add    eax,0x28
c00040d1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040d4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00040d7:	e8 30 d9 ff ff       	call   c0001a0c <st_qword>
c00040dc:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040df:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00040e2:	83 c8 01             	or     eax,0x1
c00040e5:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00040e8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040ec:	e8 f5 f7 ff ff       	call   c00038e6 <store_xdir>
c00040f1:	85 c0                	test   eax,eax
c00040f3:	0f 85 73 01 00 00    	jne    c000426c <dir_register+0x277>
c00040f9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040fc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040ff:	e8 c0 fb ff ff       	call   c0003cc4 <create_xdir>
c0004104:	e9 65 01 00 00       	jmp    c000426e <dir_register+0x279>
c0004109:	8d 40 3c             	lea    eax,[eax+0x3c]
c000410c:	b9 0c 00 00 00       	mov    ecx,0xc
c0004111:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004115:	89 c2                	mov    edx,eax
c0004117:	8d 44 24 14          	lea    eax,[esp+0x14]
c000411b:	e8 f2 d8 ff ff       	call   c0001a12 <mem_cpy>
c0004120:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004125:	74 58                	je     c000417f <dir_register+0x18a>
c0004127:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000412b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004133:	83 ec 0c             	sub    esp,0xc
c0004136:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004139:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000413d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004141:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004145:	e8 49 dc ff ff       	call   c0001d93 <gen_numname>
c000414a:	89 d8                	mov    eax,ebx
c000414c:	e8 dd fc ff ff       	call   c0003e2e <dir_find>
c0004151:	83 c4 10             	add    esp,0x10
c0004154:	89 c6                	mov    esi,eax
c0004156:	85 c0                	test   eax,eax
c0004158:	75 15                	jne    c000416f <dir_register+0x17a>
c000415a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000415e:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004163:	75 ce                	jne    c0004133 <dir_register+0x13e>
c0004165:	be 07 00 00 00       	mov    esi,0x7
c000416a:	e9 ff 00 00 00       	jmp    c000426e <dir_register+0x279>
c000416f:	83 f8 04             	cmp    eax,0x4
c0004172:	0f 85 f6 00 00 00    	jne    c000426e <dir_register+0x279>
c0004178:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000417c:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000417f:	b9 01 00 00 00       	mov    ecx,0x1
c0004184:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004189:	74 0f                	je     c000419a <dir_register+0x1a5>
c000418b:	b9 0d 00 00 00       	mov    ecx,0xd
c0004190:	8d 47 0c             	lea    eax,[edi+0xc]
c0004193:	31 d2                	xor    edx,edx
c0004195:	f7 f1                	div    ecx
c0004197:	8d 48 01             	lea    ecx,[eax+0x1]
c000419a:	89 ca                	mov    edx,ecx
c000419c:	89 d8                	mov    eax,ebx
c000419e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041a2:	e8 c7 f6 ff ff       	call   c000386e <dir_alloc>
c00041a7:	89 c6                	mov    esi,eax
c00041a9:	85 c0                	test   eax,eax
c00041ab:	0f 85 bd 00 00 00    	jne    c000426e <dir_register+0x279>
c00041b1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041b5:	89 cf                	mov    edi,ecx
c00041b7:	4f                   	dec    edi
c00041b8:	74 6d                	je     c0004227 <dir_register+0x232>
c00041ba:	89 f8                	mov    eax,edi
c00041bc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00041bf:	c1 e0 05             	shl    eax,0x5
c00041c2:	29 c2                	sub    edx,eax
c00041c4:	89 d8                	mov    eax,ebx
c00041c6:	e8 17 ed ff ff       	call   c0002ee2 <dir_sdi>
c00041cb:	89 c6                	mov    esi,eax
c00041cd:	85 c0                	test   eax,eax
c00041cf:	0f 85 99 00 00 00    	jne    c000426e <dir_register+0x279>
c00041d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00041d9:	e8 71 dc ff ff       	call   c0001e4f <sum_sfn>
c00041de:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00041e2:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e5:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041e8:	89 e8                	mov    eax,ebp
c00041ea:	e8 7b df ff ff       	call   c000216a <move_window>
c00041ef:	89 c6                	mov    esi,eax
c00041f1:	85 c0                	test   eax,eax
c00041f3:	75 79                	jne    c000426e <dir_register+0x279>
c00041f5:	83 ec 0c             	sub    esp,0xc
c00041f8:	89 f8                	mov    eax,edi
c00041fa:	0f b6 c8             	movzx  ecx,al
c00041fd:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0004202:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004205:	52                   	push   edx
c0004206:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004209:	e8 01 db ff ff       	call   c0001d0f <put_lfn>
c000420e:	31 d2                	xor    edx,edx
c0004210:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004214:	89 d8                	mov    eax,ebx
c0004216:	e8 21 f2 ff ff       	call   c000343c <dir_next>
c000421b:	83 c4 10             	add    esp,0x10
c000421e:	89 c6                	mov    esi,eax
c0004220:	85 c0                	test   eax,eax
c0004222:	75 4a                	jne    c000426e <dir_register+0x279>
c0004224:	4f                   	dec    edi
c0004225:	75 bb                	jne    c00041e2 <dir_register+0x1ed>
c0004227:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000422a:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000422d:	89 e8                	mov    eax,ebp
c000422f:	e8 36 df ff ff       	call   c000216a <move_window>
c0004234:	89 c6                	mov    esi,eax
c0004236:	85 c0                	test   eax,eax
c0004238:	75 34                	jne    c000426e <dir_register+0x279>
c000423a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000423d:	b9 20 00 00 00       	mov    ecx,0x20
c0004242:	31 d2                	xor    edx,edx
c0004244:	e8 de d7 ff ff       	call   c0001a27 <mem_set>
c0004249:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000424c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004250:	b9 0b 00 00 00       	mov    ecx,0xb
c0004255:	e8 b8 d7 ff ff       	call   c0001a12 <mem_cpy>
c000425a:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000425d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004260:	83 e0 18             	and    eax,0x18
c0004263:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004266:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000426a:	eb 02                	jmp    c000426e <dir_register+0x279>
c000426c:	89 c6                	mov    esi,eax
c000426e:	83 c4 6c             	add    esp,0x6c
c0004271:	89 f0                	mov    eax,esi
c0004273:	5b                   	pop    ebx
c0004274:	5e                   	pop    esi
c0004275:	5f                   	pop    edi
c0004276:	5d                   	pop    ebp
c0004277:	c3                   	ret    

c0004278 <sync_fs>:
c0004278:	56                   	push   esi
c0004279:	53                   	push   ebx
c000427a:	53                   	push   ebx
c000427b:	89 c3                	mov    ebx,eax
c000427d:	e8 54 de ff ff       	call   c00020d6 <sync_window>
c0004282:	85 c0                	test   eax,eax
c0004284:	0f 85 b1 00 00 00    	jne    c000433b <sync_fs+0xc3>
c000428a:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000428d:	0f 85 8e 00 00 00    	jne    c0004321 <sync_fs+0xa9>
c0004293:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004297:	0f 85 84 00 00 00    	jne    c0004321 <sync_fs+0xa9>
c000429d:	8d 73 54             	lea    esi,[ebx+0x54]
c00042a0:	b9 00 02 00 00       	mov    ecx,0x200
c00042a5:	31 d2                	xor    edx,edx
c00042a7:	89 f0                	mov    eax,esi
c00042a9:	e8 79 d7 ff ff       	call   c0001a27 <mem_set>
c00042ae:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00042b4:	ba 55 aa 00 00       	mov    edx,0xaa55
c00042b9:	e8 47 d7 ff ff       	call   c0001a05 <st_word>
c00042be:	ba 52 52 61 41       	mov    edx,0x41615252
c00042c3:	89 f0                	mov    eax,esi
c00042c5:	e8 3f d7 ff ff       	call   c0001a09 <st_dword>
c00042ca:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00042d0:	ba 72 72 41 61       	mov    edx,0x61417272
c00042d5:	e8 2f d7 ff ff       	call   c0001a09 <st_dword>
c00042da:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042dd:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00042e3:	e8 21 d7 ff ff       	call   c0001a09 <st_dword>
c00042e8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00042eb:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00042f1:	e8 13 d7 ff ff       	call   c0001a09 <st_dword>
c00042f6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00042f9:	83 c0 01             	add    eax,0x1
c00042fc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00042ff:	83 d2 00             	adc    edx,0x0
c0004302:	83 ec 0c             	sub    esp,0xc
c0004305:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004308:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000430b:	6a 01                	push   0x1
c000430d:	52                   	push   edx
c000430e:	50                   	push   eax
c000430f:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004313:	56                   	push   esi
c0004314:	50                   	push   eax
c0004315:	e8 44 d6 ff ff       	call   c000195e <disk_write>
c000431a:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000431e:	83 c4 20             	add    esp,0x20
c0004321:	51                   	push   ecx
c0004322:	6a 00                	push   0x0
c0004324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004328:	6a 00                	push   0x0
c000432a:	50                   	push   eax
c000432b:	e8 44 d6 ff ff       	call   c0001974 <disk_ioctl>
c0004330:	83 c4 10             	add    esp,0x10
c0004333:	85 c0                	test   eax,eax
c0004335:	0f 95 c0             	setne  al
c0004338:	0f b6 c0             	movzx  eax,al
c000433b:	5a                   	pop    edx
c000433c:	5b                   	pop    ebx
c000433d:	5e                   	pop    esi
c000433e:	c3                   	ret    

c000433f <create_partition>:
c000433f:	55                   	push   ebp
c0004340:	57                   	push   edi
c0004341:	56                   	push   esi
c0004342:	53                   	push   ebx
c0004343:	83 ec 60             	sub    esp,0x60
c0004346:	0f b6 c0             	movzx  eax,al
c0004349:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000434d:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004351:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004355:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0004359:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000435d:	50                   	push   eax
c000435e:	6a 01                	push   0x1
c0004360:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004364:	e8 0b d6 ff ff       	call   c0001974 <disk_ioctl>
c0004369:	83 c4 10             	add    esp,0x10
c000436c:	85 c0                	test   eax,eax
c000436e:	74 0a                	je     c000437a <create_partition+0x3b>
c0004370:	b8 01 00 00 00       	mov    eax,0x1
c0004375:	e9 73 05 00 00       	jmp    c00048ed <create_partition+0x5ae>
c000437a:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000437e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004382:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0004386:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000438a:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000438f:	0f 86 ed 03 00 00    	jbe    c0004782 <create_partition+0x443>
c0004395:	83 c0 df             	add    eax,0xffffffdf
c0004398:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00043a0:	83 d2 ff             	adc    edx,0xffffffff
c00043a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043ab:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00043af:	83 c0 bd             	add    eax,0xffffffbd
c00043b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043b6:	83 d2 ff             	adc    edx,0xffffffff
c00043b9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00043bd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00043c1:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00043c8:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00043d0:	be 22 00 00 00       	mov    esi,0x22
c00043d5:	31 ff                	xor    edi,edi
c00043d7:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00043df:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00043e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00043ef:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00043f3:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00043f9:	75 0e                	jne    c0004409 <create_partition+0xca>
c00043fb:	b9 00 02 00 00       	mov    ecx,0x200
c0004400:	31 d2                	xor    edx,edx
c0004402:	89 d8                	mov    eax,ebx
c0004404:	e8 1e d6 ff ff       	call   c0001a27 <mem_set>
c0004409:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000440d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004411:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004415:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004418:	0f 84 23 01 00 00    	je     c0004541 <create_partition+0x202>
c000441e:	89 f0                	mov    eax,esi
c0004420:	89 fa                	mov    edx,edi
c0004422:	05 ff 07 00 00       	add    eax,0x7ff
c0004427:	83 d2 00             	adc    edx,0x0
c000442a:	89 c1                	mov    ecx,eax
c000442c:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004436:	89 ce                	mov    esi,ecx
c0004438:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000443c:	89 d7                	mov    edi,edx
c000443e:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004442:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004446:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004449:	89 04 24             	mov    DWORD PTR [esp],eax
c000444c:	b8 64 00 00 00       	mov    eax,0x64
c0004451:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004454:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004458:	b8 00 00 00 00       	mov    eax,0x0
c000445d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004461:	72 41                	jb     c00044a4 <create_partition+0x165>
c0004463:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004467:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000446b:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004470:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004474:	01 c1                	add    ecx,eax
c0004476:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000447a:	f7 24 24             	mul    DWORD PTR [esp]
c000447d:	6a 00                	push   0x0
c000447f:	01 ca                	add    edx,ecx
c0004481:	6a 64                	push   0x64
c0004483:	52                   	push   edx
c0004484:	50                   	push   eax
c0004485:	e8 22 aa 01 00       	call   c001eeac <__udivdi3>
c000448a:	83 c4 10             	add    esp,0x10
c000448d:	05 ff 07 00 00       	add    eax,0x7ff
c0004492:	83 d2 00             	adc    edx,0x0
c0004495:	89 c1                	mov    ecx,eax
c0004497:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c000449d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044a1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00044a4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00044a7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00044ab:	01 f0                	add    eax,esi
c00044ad:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00044b1:	11 fa                	adc    edx,edi
c00044b3:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00044b7:	19 d1                	sbb    ecx,edx
c00044b9:	73 2e                	jae    c00044e9 <create_partition+0x1aa>
c00044bb:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00044bf:	89 f8                	mov    eax,edi
c00044c1:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00044c5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00044cc:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044d4:	73 6b                	jae    c0004541 <create_partition+0x202>
c00044d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00044da:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00044de:	29 f0                	sub    eax,esi
c00044e0:	19 fa                	sbb    edx,edi
c00044e2:	89 04 24             	mov    DWORD PTR [esp],eax
c00044e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044ed:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044f0:	74 4f                	je     c0004541 <create_partition+0x202>
c00044f2:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00044f5:	b9 10 00 00 00       	mov    ecx,0x10
c00044fa:	ba f0 fe 01 c0       	mov    edx,0xc001fef0
c00044ff:	e8 0e d5 ff ff       	call   c0001a12 <mem_cpy>
c0004504:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004508:	b9 10 00 00 00       	mov    ecx,0x10
c000450d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004511:	e8 49 db ff ff       	call   c000205f <make_rand>
c0004516:	89 f2                	mov    edx,esi
c0004518:	89 f9                	mov    ecx,edi
c000451a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000451e:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004522:	e8 e5 d4 ff ff       	call   c0001a0c <st_qword>
c0004527:	03 34 24             	add    esi,DWORD PTR [esp]
c000452a:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000452e:	89 f2                	mov    edx,esi
c0004530:	89 f9                	mov    ecx,edi
c0004532:	83 c2 ff             	add    edx,0xffffffff
c0004535:	83 d1 ff             	adc    ecx,0xffffffff
c0004538:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000453c:	e8 cb d4 ff ff       	call   c0001a0c <st_qword>
c0004541:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004545:	83 e8 80             	sub    eax,0xffffff80
c0004548:	89 c5                	mov    ebp,eax
c000454a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000454e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004554:	75 6b                	jne    c00045c1 <create_partition+0x282>
c0004556:	45                   	inc    ebp
c0004557:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000455b:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004560:	e8 56 da ff ff       	call   c0001fbb <crc32>
c0004565:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000456b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000456f:	75 e5                	jne    c0004556 <create_partition+0x217>
c0004571:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004575:	83 ec 0c             	sub    esp,0xc
c0004578:	c1 ed 09             	shr    ebp,0x9
c000457b:	31 d2                	xor    edx,edx
c000457d:	6a 01                	push   0x1
c000457f:	52                   	push   edx
c0004580:	8d 45 02             	lea    eax,[ebp+0x2]
c0004583:	50                   	push   eax
c0004584:	53                   	push   ebx
c0004585:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004589:	e8 d0 d3 ff ff       	call   c000195e <disk_write>
c000458e:	83 c4 20             	add    esp,0x20
c0004591:	85 c0                	test   eax,eax
c0004593:	0f 85 d7 fd ff ff    	jne    c0004370 <create_partition+0x31>
c0004599:	83 ec 0c             	sub    esp,0xc
c000459c:	89 e8                	mov    eax,ebp
c000459e:	31 d2                	xor    edx,edx
c00045a0:	6a 01                	push   0x1
c00045a2:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00045a6:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00045aa:	52                   	push   edx
c00045ab:	50                   	push   eax
c00045ac:	53                   	push   ebx
c00045ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045b1:	e8 a8 d3 ff ff       	call   c000195e <disk_write>
c00045b6:	83 c4 20             	add    esp,0x20
c00045b9:	85 c0                	test   eax,eax
c00045bb:	0f 85 af fd ff ff    	jne    c0004370 <create_partition+0x31>
c00045c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00045c9:	3d 00 40 00 00       	cmp    eax,0x4000
c00045ce:	74 0d                	je     c00045dd <create_partition+0x29e>
c00045d0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00045d4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045d8:	e9 12 fe ff ff       	jmp    c00043ef <create_partition+0xb0>
c00045dd:	31 d2                	xor    edx,edx
c00045df:	b9 00 02 00 00       	mov    ecx,0x200
c00045e4:	89 d8                	mov    eax,ebx
c00045e6:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00045e9:	e8 39 d4 ff ff       	call   c0001a27 <mem_set>
c00045ee:	b9 10 00 00 00       	mov    ecx,0x10
c00045f3:	ba e0 fd 01 c0       	mov    edx,0xc001fde0
c00045f8:	89 d8                	mov    eax,ebx
c00045fa:	e8 13 d4 ff ff       	call   c0001a12 <mem_cpy>
c00045ff:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004603:	f7 d2                	not    edx
c0004605:	8d 43 58             	lea    eax,[ebx+0x58]
c0004608:	8d 7b 48             	lea    edi,[ebx+0x48]
c000460b:	e8 f9 d3 ff ff       	call   c0001a09 <st_dword>
c0004610:	8d 43 18             	lea    eax,[ebx+0x18]
c0004613:	31 c9                	xor    ecx,ecx
c0004615:	ba 01 00 00 00       	mov    edx,0x1
c000461a:	89 04 24             	mov    DWORD PTR [esp],eax
c000461d:	e8 ea d3 ff ff       	call   c0001a0c <st_qword>
c0004622:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004626:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000462a:	83 c2 ff             	add    edx,0xffffffff
c000462d:	89 e8                	mov    eax,ebp
c000462f:	83 d1 ff             	adc    ecx,0xffffffff
c0004632:	e8 d5 d3 ff ff       	call   c0001a0c <st_qword>
c0004637:	31 c9                	xor    ecx,ecx
c0004639:	8d 43 28             	lea    eax,[ebx+0x28]
c000463c:	ba 22 00 00 00       	mov    edx,0x22
c0004641:	e8 c6 d3 ff ff       	call   c0001a0c <st_qword>
c0004646:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000464a:	83 c2 de             	add    edx,0xffffffde
c000464d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004651:	83 d1 ff             	adc    ecx,0xffffffff
c0004654:	8d 43 30             	lea    eax,[ebx+0x30]
c0004657:	e8 b0 d3 ff ff       	call   c0001a0c <st_qword>
c000465c:	8d 43 54             	lea    eax,[ebx+0x54]
c000465f:	ba 80 00 00 00       	mov    edx,0x80
c0004664:	31 f6                	xor    esi,esi
c0004666:	e8 9e d3 ff ff       	call   c0001a09 <st_dword>
c000466b:	8d 43 50             	lea    eax,[ebx+0x50]
c000466e:	ba 80 00 00 00       	mov    edx,0x80
c0004673:	e8 91 d3 ff ff       	call   c0001a09 <st_dword>
c0004678:	ba 02 00 00 00       	mov    edx,0x2
c000467d:	89 f8                	mov    eax,edi
c000467f:	e8 85 d3 ff ff       	call   c0001a09 <st_dword>
c0004684:	8d 53 38             	lea    edx,[ebx+0x38]
c0004687:	b9 10 00 00 00       	mov    ecx,0x10
c000468c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004690:	e8 ca d9 ff ff       	call   c000205f <make_rand>
c0004695:	83 c8 ff             	or     eax,0xffffffff
c0004698:	46                   	inc    esi
c0004699:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c000469e:	e8 18 d9 ff ff       	call   c0001fbb <crc32>
c00046a3:	83 fe 5c             	cmp    esi,0x5c
c00046a6:	75 f0                	jne    c0004698 <create_partition+0x359>
c00046a8:	f7 d0                	not    eax
c00046aa:	8d 73 10             	lea    esi,[ebx+0x10]
c00046ad:	89 c2                	mov    edx,eax
c00046af:	89 f0                	mov    eax,esi
c00046b1:	e8 53 d3 ff ff       	call   c0001a09 <st_dword>
c00046b6:	83 ec 0c             	sub    esp,0xc
c00046b9:	6a 01                	push   0x1
c00046bb:	6a 00                	push   0x0
c00046bd:	6a 01                	push   0x1
c00046bf:	53                   	push   ebx
c00046c0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046c4:	e8 95 d2 ff ff       	call   c000195e <disk_write>
c00046c9:	83 c4 20             	add    esp,0x20
c00046cc:	85 c0                	test   eax,eax
c00046ce:	0f 85 9c fc ff ff    	jne    c0004370 <create_partition+0x31>
c00046d4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046d8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046dc:	83 c2 ff             	add    edx,0xffffffff
c00046df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00046e2:	83 d1 ff             	adc    ecx,0xffffffff
c00046e5:	e8 22 d3 ff ff       	call   c0001a0c <st_qword>
c00046ea:	ba 01 00 00 00       	mov    edx,0x1
c00046ef:	31 c9                	xor    ecx,ecx
c00046f1:	89 e8                	mov    eax,ebp
c00046f3:	e8 14 d3 ff ff       	call   c0001a0c <st_qword>
c00046f8:	89 f8                	mov    eax,edi
c00046fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00046fe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004702:	e8 05 d3 ff ff       	call   c0001a0c <st_qword>
c0004707:	89 f0                	mov    eax,esi
c0004709:	31 d2                	xor    edx,edx
c000470b:	31 ff                	xor    edi,edi
c000470d:	e8 f7 d2 ff ff       	call   c0001a09 <st_dword>
c0004712:	83 c8 ff             	or     eax,0xffffffff
c0004715:	47                   	inc    edi
c0004716:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c000471b:	e8 9b d8 ff ff       	call   c0001fbb <crc32>
c0004720:	83 ff 5c             	cmp    edi,0x5c
c0004723:	75 f0                	jne    c0004715 <create_partition+0x3d6>
c0004725:	f7 d0                	not    eax
c0004727:	89 c2                	mov    edx,eax
c0004729:	89 f0                	mov    eax,esi
c000472b:	e8 d9 d2 ff ff       	call   c0001a09 <st_dword>
c0004730:	83 ec 0c             	sub    esp,0xc
c0004733:	6a 01                	push   0x1
c0004735:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004739:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000473d:	83 c0 ff             	add    eax,0xffffffff
c0004740:	83 d2 ff             	adc    edx,0xffffffff
c0004743:	52                   	push   edx
c0004744:	50                   	push   eax
c0004745:	53                   	push   ebx
c0004746:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000474a:	e8 0f d2 ff ff       	call   c000195e <disk_write>
c000474f:	83 c4 20             	add    esp,0x20
c0004752:	85 c0                	test   eax,eax
c0004754:	0f 85 16 fc ff ff    	jne    c0004370 <create_partition+0x31>
c000475a:	31 d2                	xor    edx,edx
c000475c:	89 d8                	mov    eax,ebx
c000475e:	b9 00 02 00 00       	mov    ecx,0x200
c0004763:	e8 bf d2 ff ff       	call   c0001a27 <mem_set>
c0004768:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000476e:	b9 10 00 00 00       	mov    ecx,0x10
c0004773:	ba f0 fd 01 c0       	mov    edx,0xc001fdf0
c0004778:	e8 95 d2 ff ff       	call   c0001a12 <mem_cpy>
c000477d:	e9 3d 01 00 00       	jmp    c00048bf <create_partition+0x580>
c0004782:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004786:	b9 05 00 00 00       	mov    ecx,0x5
c000478b:	89 04 24             	mov    DWORD PTR [esp],eax
c000478e:	c6 44 24 10 08       	mov    BYTE PTR [esp+0x10],0x8
c0004793:	0f b6 74 24 10       	movzx  esi,BYTE PTR [esp+0x10]
c0004798:	31 d2                	xor    edx,edx
c000479a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000479d:	f7 f6                	div    esi
c000479f:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00047a4:	76 0c                	jbe    c00047b2 <create_partition+0x473>
c00047a6:	d0 64 24 10          	shl    BYTE PTR [esp+0x10],1
c00047aa:	49                   	dec    ecx
c00047ab:	75 e6                	jne    c0004793 <create_partition+0x454>
c00047ad:	c6 44 24 10 ff       	mov    BYTE PTR [esp+0x10],0xff
c00047b2:	b9 00 02 00 00       	mov    ecx,0x200
c00047b7:	31 d2                	xor    edx,edx
c00047b9:	89 d8                	mov    eax,ebx
c00047bb:	bd 3f 00 00 00       	mov    ebp,0x3f
c00047c0:	e8 62 d2 ff ff       	call   c0001a27 <mem_set>
c00047c5:	b9 64 00 00 00       	mov    ecx,0x64
c00047ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047cd:	31 d2                	xor    edx,edx
c00047cf:	f7 f1                	div    ecx
c00047d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00047d5:	8d 8b c6 01 00 00    	lea    ecx,[ebx+0x1c6]
c00047db:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00047e3:	83 7c 24 18 03       	cmp    DWORD PTR [esp+0x18],0x3
c00047e8:	0f 96 c2             	setbe  dl
c00047eb:	85 ed                	test   ebp,ebp
c00047ed:	0f 95 c0             	setne  al
c00047f0:	84 c2                	test   dl,al
c00047f2:	0f 84 c7 00 00 00    	je     c00048bf <create_partition+0x580>
c00047f8:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00047fb:	0f 83 be 00 00 00    	jae    c00048bf <create_partition+0x580>
c0004801:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004805:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0004809:	8b 34 f8             	mov    esi,DWORD PTR [eax+edi*8]
c000480c:	83 fe 64             	cmp    esi,0x64
c000480f:	77 0c                	ja     c000481d <create_partition+0x4de>
c0004811:	74 07                	je     c000481a <create_partition+0x4db>
c0004813:	0f af 74 24 28       	imul   esi,DWORD PTR [esp+0x28]
c0004818:	eb 03                	jmp    c000481d <create_partition+0x4de>
c000481a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000481d:	89 e8                	mov    eax,ebp
c000481f:	01 f0                	add    eax,esi
c0004821:	72 05                	jb     c0004828 <create_partition+0x4e9>
c0004823:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004826:	76 07                	jbe    c000482f <create_partition+0x4f0>
c0004828:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000482b:	29 ee                	sub    esi,ebp
c000482d:	eb 08                	jmp    c0004837 <create_partition+0x4f8>
c000482f:	85 f6                	test   esi,esi
c0004831:	0f 84 88 00 00 00    	je     c00048bf <create_partition+0x580>
c0004837:	89 c8                	mov    eax,ecx
c0004839:	89 ea                	mov    edx,ebp
c000483b:	e8 c9 d1 ff ff       	call   c0001a09 <st_dword>
c0004840:	89 f2                	mov    edx,esi
c0004842:	bf 3f 00 00 00       	mov    edi,0x3f
c0004847:	8d 41 04             	lea    eax,[ecx+0x4]
c000484a:	e8 ba d1 ff ff       	call   c0001a09 <st_dword>
c000484f:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0004853:	31 d2                	xor    edx,edx
c0004855:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0004859:	88 41 fc             	mov    BYTE PTR [ecx-0x4],al
c000485c:	83 c1 10             	add    ecx,0x10
c000485f:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0004864:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004868:	89 e8                	mov    eax,ebp
c000486a:	f7 f7                	div    edi
c000486c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0004870:	31 d2                	xor    edx,edx
c0004872:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0004876:	88 51 e9             	mov    BYTE PTR [ecx-0x17],dl
c0004879:	89 c2                	mov    edx,eax
c000487b:	c1 ea 02             	shr    edx,0x2
c000487e:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0004882:	47                   	inc    edi
c0004883:	01 f5                	add    ebp,esi
c0004885:	83 e2 c0             	and    edx,0xffffffc0
c0004888:	88 41 eb             	mov    BYTE PTR [ecx-0x15],al
c000488b:	09 fa                	or     edx,edi
c000488d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0004890:	88 51 ea             	mov    BYTE PTR [ecx-0x16],dl
c0004893:	bf 3f 00 00 00       	mov    edi,0x3f
c0004898:	31 d2                	xor    edx,edx
c000489a:	f7 f7                	div    edi
c000489c:	89 d6                	mov    esi,edx
c000489e:	31 d2                	xor    edx,edx
c00048a0:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c00048a4:	89 c7                	mov    edi,eax
c00048a6:	46                   	inc    esi
c00048a7:	c1 ef 02             	shr    edi,0x2
c00048aa:	88 51 ed             	mov    BYTE PTR [ecx-0x13],dl
c00048ad:	83 e7 c0             	and    edi,0xffffffc0
c00048b0:	88 41 ef             	mov    BYTE PTR [ecx-0x11],al
c00048b3:	09 fe                	or     esi,edi
c00048b5:	89 f2                	mov    edx,esi
c00048b7:	88 51 ee             	mov    BYTE PTR [ecx-0x12],dl
c00048ba:	e9 24 ff ff ff       	jmp    c00047e3 <create_partition+0x4a4>
c00048bf:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00048c5:	ba 55 aa 00 00       	mov    edx,0xaa55
c00048ca:	e8 36 d1 ff ff       	call   c0001a05 <st_word>
c00048cf:	83 ec 0c             	sub    esp,0xc
c00048d2:	6a 01                	push   0x1
c00048d4:	6a 00                	push   0x0
c00048d6:	6a 00                	push   0x0
c00048d8:	53                   	push   ebx
c00048d9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048dd:	e8 7c d0 ff ff       	call   c000195e <disk_write>
c00048e2:	83 c4 20             	add    esp,0x20
c00048e5:	85 c0                	test   eax,eax
c00048e7:	0f 95 c0             	setne  al
c00048ea:	0f b6 c0             	movzx  eax,al
c00048ed:	83 c4 5c             	add    esp,0x5c
c00048f0:	5b                   	pop    ebx
c00048f1:	5e                   	pop    esi
c00048f2:	5f                   	pop    edi
c00048f3:	5d                   	pop    ebp
c00048f4:	c3                   	ret    

c00048f5 <get_fileinfo>:
c00048f5:	55                   	push   ebp
c00048f6:	57                   	push   edi
c00048f7:	56                   	push   esi
c00048f8:	53                   	push   ebx
c00048f9:	83 ec 1c             	sub    esp,0x1c
c00048fc:	8b 30                	mov    esi,DWORD PTR [eax]
c00048fe:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004902:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004905:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004909:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c000490c:	0f 84 dc 01 00 00    	je     c0004aee <get_fileinfo+0x1f9>
c0004912:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004915:	75 0f                	jne    c0004926 <get_fileinfo+0x31>
c0004917:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000491a:	83 c4 1c             	add    esp,0x1c
c000491d:	5b                   	pop    ebx
c000491e:	5e                   	pop    esi
c000491f:	5f                   	pop    edi
c0004920:	5d                   	pop    ebp
c0004921:	e9 70 d5 ff ff       	jmp    c0001e96 <get_xfileinfo>
c0004926:	89 d3                	mov    ebx,edx
c0004928:	89 c6                	mov    esi,eax
c000492a:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c000492e:	74 6a                	je     c000499a <get_fileinfo+0xa5>
c0004930:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004938:	31 ed                	xor    ebp,ebp
c000493a:	31 ff                	xor    edi,edi
c000493c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004940:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004944:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004947:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c000494b:	66 85 d2             	test   dx,dx
c000494e:	74 3e                	je     c000498e <get_fileinfo+0x99>
c0004950:	66 85 ed             	test   bp,bp
c0004953:	75 0c                	jne    c0004961 <get_fileinfo+0x6c>
c0004955:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c000495b:	66 3d ff 07          	cmp    ax,0x7ff
c000495f:	76 22                	jbe    c0004983 <get_fileinfo+0x8e>
c0004961:	89 e8                	mov    eax,ebp
c0004963:	b9 ff 00 00 00       	mov    ecx,0xff
c0004968:	c1 e0 10             	shl    eax,0x10
c000496b:	29 f9                	sub    ecx,edi
c000496d:	09 d0                	or     eax,edx
c000496f:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004973:	e8 bb d1 ff ff       	call   c0001b33 <put_utf>
c0004978:	84 c0                	test   al,al
c000497a:	74 10                	je     c000498c <get_fileinfo+0x97>
c000497c:	0f b6 c0             	movzx  eax,al
c000497f:	01 c7                	add    edi,eax
c0004981:	31 d2                	xor    edx,edx
c0004983:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004988:	89 d5                	mov    ebp,edx
c000498a:	eb b0                	jmp    c000493c <get_fileinfo+0x47>
c000498c:	31 ff                	xor    edi,edi
c000498e:	66 85 ed             	test   bp,bp
c0004991:	74 02                	je     c0004995 <get_fileinfo+0xa0>
c0004993:	31 ff                	xor    edi,edi
c0004995:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c000499a:	31 ff                	xor    edi,edi
c000499c:	31 c9                	xor    ecx,ecx
c000499e:	83 f9 0a             	cmp    ecx,0xa
c00049a1:	0f 87 ad 00 00 00    	ja     c0004a54 <get_fileinfo+0x15f>
c00049a7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049aa:	8d 69 01             	lea    ebp,[ecx+0x1]
c00049ad:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c00049b1:	66 83 fa 20          	cmp    dx,0x20
c00049b5:	0f 84 92 00 00 00    	je     c0004a4d <get_fileinfo+0x158>
c00049bb:	66 83 fa 05          	cmp    dx,0x5
c00049bf:	75 05                	jne    c00049c6 <get_fileinfo+0xd1>
c00049c1:	ba e5 00 00 00       	mov    edx,0xe5
c00049c6:	83 fd 09             	cmp    ebp,0x9
c00049c9:	75 0b                	jne    c00049d6 <get_fileinfo+0xe1>
c00049cb:	83 ff 0b             	cmp    edi,0xb
c00049ce:	77 06                	ja     c00049d6 <get_fileinfo+0xe1>
c00049d0:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c00049d5:	47                   	inc    edi
c00049d6:	0f b7 c2             	movzx  eax,dx
c00049d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049dd:	e8 85 d0 ff ff       	call   c0001a67 <dbc_1st>
c00049e2:	85 c0                	test   eax,eax
c00049e4:	74 2f                	je     c0004a15 <get_fileinfo+0x120>
c00049e6:	83 fd 08             	cmp    ebp,0x8
c00049e9:	74 2a                	je     c0004a15 <get_fileinfo+0x120>
c00049eb:	83 fd 0b             	cmp    ebp,0xb
c00049ee:	74 25                	je     c0004a15 <get_fileinfo+0x120>
c00049f0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049f3:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00049f7:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00049fb:	e8 6a d0 ff ff       	call   c0001a6a <dbc_2nd>
c0004a00:	85 c0                	test   eax,eax
c0004a02:	74 11                	je     c0004a15 <get_fileinfo+0x120>
c0004a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a08:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a0b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a10:	c1 e2 08             	shl    edx,0x8
c0004a13:	09 c2                	or     edx,eax
c0004a15:	50                   	push   eax
c0004a16:	50                   	push   eax
c0004a17:	68 b5 01 00 00       	push   0x1b5
c0004a1c:	0f b7 d2             	movzx  edx,dx
c0004a1f:	52                   	push   edx
c0004a20:	e8 17 38 00 00       	call   c000823c <ff_oem2uni>
c0004a25:	83 c4 10             	add    esp,0x10
c0004a28:	66 85 c0             	test   ax,ax
c0004a2b:	75 04                	jne    c0004a31 <get_fileinfo+0x13c>
c0004a2d:	31 ff                	xor    edi,edi
c0004a2f:	eb 23                	jmp    c0004a54 <get_fileinfo+0x15f>
c0004a31:	b9 0c 00 00 00       	mov    ecx,0xc
c0004a36:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004a3a:	29 f9                	sub    ecx,edi
c0004a3c:	0f b7 c0             	movzx  eax,ax
c0004a3f:	e8 ef d0 ff ff       	call   c0001b33 <put_utf>
c0004a44:	84 c0                	test   al,al
c0004a46:	74 e5                	je     c0004a2d <get_fileinfo+0x138>
c0004a48:	0f b6 c0             	movzx  eax,al
c0004a4b:	01 c7                	add    edi,eax
c0004a4d:	89 e9                	mov    ecx,ebp
c0004a4f:	e9 4a ff ff ff       	jmp    c000499e <get_fileinfo+0xa9>
c0004a54:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004a59:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004a5d:	75 54                	jne    c0004ab3 <get_fileinfo+0x1be>
c0004a5f:	85 ff                	test   edi,edi
c0004a61:	75 0b                	jne    c0004a6e <get_fileinfo+0x179>
c0004a63:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004a67:	ba 01 00 00 00       	mov    edx,0x1
c0004a6c:	eb 33                	jmp    c0004aa1 <get_fileinfo+0x1ac>
c0004a6e:	b1 08                	mov    cl,0x8
c0004a70:	31 d2                	xor    edx,edx
c0004a72:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004a78:	84 c0                	test   al,al
c0004a7a:	74 25                	je     c0004aa1 <get_fileinfo+0x1ac>
c0004a7c:	66 83 f8 2e          	cmp    ax,0x2e
c0004a80:	74 16                	je     c0004a98 <get_fileinfo+0x1a3>
c0004a82:	8d 78 bf             	lea    edi,[eax-0x41]
c0004a85:	66 83 ff 19          	cmp    di,0x19
c0004a89:	77 0f                	ja     c0004a9a <get_fileinfo+0x1a5>
c0004a8b:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004a8e:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004a91:	74 07                	je     c0004a9a <get_fileinfo+0x1a5>
c0004a93:	83 c0 20             	add    eax,0x20
c0004a96:	eb 02                	jmp    c0004a9a <get_fileinfo+0x1a5>
c0004a98:	b1 10                	mov    cl,0x10
c0004a9a:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004a9e:	42                   	inc    edx
c0004a9f:	eb d1                	jmp    c0004a72 <get_fileinfo+0x17d>
c0004aa1:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004aa6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aa9:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004aad:	75 04                	jne    c0004ab3 <get_fileinfo+0x1be>
c0004aaf:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ab3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ab6:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004ab9:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004abc:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004abf:	83 c0 1c             	add    eax,0x1c
c0004ac2:	e8 d9 ce ff ff       	call   c00019a0 <ld_dword>
c0004ac7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ace:	89 03                	mov    DWORD PTR [ebx],eax
c0004ad0:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ad3:	83 c0 16             	add    eax,0x16
c0004ad6:	e8 b8 ce ff ff       	call   c0001993 <ld_word>
c0004adb:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004adf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ae2:	83 c0 18             	add    eax,0x18
c0004ae5:	e8 a9 ce ff ff       	call   c0001993 <ld_word>
c0004aea:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004aee:	83 c4 1c             	add    esp,0x1c
c0004af1:	5b                   	pop    ebx
c0004af2:	5e                   	pop    esi
c0004af3:	5f                   	pop    edi
c0004af4:	5d                   	pop    ebp
c0004af5:	c3                   	ret    

c0004af6 <ld_clust.isra.0>:
c0004af6:	56                   	push   esi
c0004af7:	89 c6                	mov    esi,eax
c0004af9:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004afc:	53                   	push   ebx
c0004afd:	89 d3                	mov    ebx,edx
c0004aff:	e8 8f ce ff ff       	call   c0001993 <ld_word>
c0004b04:	0f b7 c8             	movzx  ecx,ax
c0004b07:	89 f0                	mov    eax,esi
c0004b09:	3c 03                	cmp    al,0x3
c0004b0b:	75 0d                	jne    c0004b1a <ld_clust.isra.0+0x24>
c0004b0d:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b10:	e8 7e ce ff ff       	call   c0001993 <ld_word>
c0004b15:	c1 e0 10             	shl    eax,0x10
c0004b18:	09 c1                	or     ecx,eax
c0004b1a:	5b                   	pop    ebx
c0004b1b:	89 c8                	mov    eax,ecx
c0004b1d:	5e                   	pop    esi
c0004b1e:	c3                   	ret    

c0004b1f <st_clust.isra.1>:
c0004b1f:	56                   	push   esi
c0004b20:	89 c6                	mov    esi,eax
c0004b22:	53                   	push   ebx
c0004b23:	89 d3                	mov    ebx,edx
c0004b25:	0f b7 d1             	movzx  edx,cx
c0004b28:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004b2b:	e8 d5 ce ff ff       	call   c0001a05 <st_word>
c0004b30:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004b33:	75 0f                	jne    c0004b44 <st_clust.isra.1+0x25>
c0004b35:	c1 e9 10             	shr    ecx,0x10
c0004b38:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b3b:	89 ca                	mov    edx,ecx
c0004b3d:	5b                   	pop    ebx
c0004b3e:	5e                   	pop    esi
c0004b3f:	e9 c1 ce ff ff       	jmp    c0001a05 <st_word>
c0004b44:	5b                   	pop    ebx
c0004b45:	5e                   	pop    esi
c0004b46:	c3                   	ret    

c0004b47 <init_alloc_info.isra.2>:
c0004b47:	56                   	push   esi
c0004b48:	89 c6                	mov    esi,eax
c0004b4a:	53                   	push   ebx
c0004b4b:	89 d3                	mov    ebx,edx
c0004b4d:	51                   	push   ecx
c0004b4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0004b50:	83 c0 34             	add    eax,0x34
c0004b53:	e8 48 ce ff ff       	call   c00019a0 <ld_dword>
c0004b58:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004b5b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b5d:	83 c0 38             	add    eax,0x38
c0004b60:	e8 53 ce ff ff       	call   c00019b8 <ld_qword>
c0004b65:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004b68:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004b6b:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b6d:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004b70:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004b77:	83 e0 02             	and    eax,0x2
c0004b7a:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004b7d:	5b                   	pop    ebx
c0004b7e:	5b                   	pop    ebx
c0004b7f:	5e                   	pop    esi
c0004b80:	c3                   	ret    

c0004b81 <follow_path>:
c0004b81:	56                   	push   esi
c0004b82:	53                   	push   ebx
c0004b83:	89 c3                	mov    ebx,eax
c0004b85:	83 ec 14             	sub    esp,0x14
c0004b88:	8b 30                	mov    esi,DWORD PTR [eax]
c0004b8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004b8e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b92:	8a 10                	mov    dl,BYTE PTR [eax]
c0004b94:	80 fa 2f             	cmp    dl,0x2f
c0004b97:	75 07                	jne    c0004ba0 <follow_path+0x1f>
c0004b99:	40                   	inc    eax
c0004b9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b9e:	eb ee                	jmp    c0004b8e <follow_path+0xd>
c0004ba0:	80 fa 5c             	cmp    dl,0x5c
c0004ba3:	74 f4                	je     c0004b99 <follow_path+0x18>
c0004ba5:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004bac:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bb3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004bb6:	77 52                	ja     c0004c0a <follow_path+0x89>
c0004bb8:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004bbc:	31 d2                	xor    edx,edx
c0004bbe:	89 d8                	mov    eax,ebx
c0004bc0:	e8 1d e3 ff ff       	call   c0002ee2 <dir_sdi>
c0004bc5:	eb 7c                	jmp    c0004c43 <follow_path+0xc2>
c0004bc7:	89 d8                	mov    eax,ebx
c0004bc9:	e8 60 f2 ff ff       	call   c0003e2e <dir_find>
c0004bce:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004bd1:	85 c0                	test   eax,eax
c0004bd3:	75 46                	jne    c0004c1b <follow_path+0x9a>
c0004bd5:	80 e2 04             	and    dl,0x4
c0004bd8:	75 69                	jne    c0004c43 <follow_path+0xc2>
c0004bda:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004bde:	74 5e                	je     c0004c3e <follow_path+0xbd>
c0004be0:	8a 06                	mov    al,BYTE PTR [esi]
c0004be2:	3c 04                	cmp    al,0x4
c0004be4:	75 41                	jne    c0004c27 <follow_path+0xa6>
c0004be6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004be9:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004bed:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004bf0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004bf3:	30 c0                	xor    al,al
c0004bf5:	09 d0                	or     eax,edx
c0004bf7:	89 da                	mov    edx,ebx
c0004bf9:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004bfc:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004bff:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c02:	8d 46 10             	lea    eax,[esi+0x10]
c0004c05:	e8 3d ff ff ff       	call   c0004b47 <init_alloc_info.isra.2>
c0004c0a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c0e:	89 d8                	mov    eax,ebx
c0004c10:	e8 b6 ed ff ff       	call   c00039cb <create_name>
c0004c15:	85 c0                	test   eax,eax
c0004c17:	74 ae                	je     c0004bc7 <follow_path+0x46>
c0004c19:	eb 28                	jmp    c0004c43 <follow_path+0xc2>
c0004c1b:	83 f8 04             	cmp    eax,0x4
c0004c1e:	75 23                	jne    c0004c43 <follow_path+0xc2>
c0004c20:	80 e2 04             	and    dl,0x4
c0004c23:	74 19                	je     c0004c3e <follow_path+0xbd>
c0004c25:	eb 1c                	jmp    c0004c43 <follow_path+0xc2>
c0004c27:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004c2a:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004c30:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004c34:	e8 bd fe ff ff       	call   c0004af6 <ld_clust.isra.0>
c0004c39:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c3c:	eb cc                	jmp    c0004c0a <follow_path+0x89>
c0004c3e:	b8 05 00 00 00       	mov    eax,0x5
c0004c43:	83 c4 14             	add    esp,0x14
c0004c46:	5b                   	pop    ebx
c0004c47:	5e                   	pop    esi
c0004c48:	c3                   	ret    

c0004c49 <f_mount>:
c0004c49:	53                   	push   ebx
c0004c4a:	83 ec 18             	sub    esp,0x18
c0004c4d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004c51:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004c55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c59:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004c5d:	e8 13 d3 ff ff       	call   c0001f75 <get_ldnumber>
c0004c62:	89 c2                	mov    edx,eax
c0004c64:	b8 0b 00 00 00       	mov    eax,0xb
c0004c69:	85 d2                	test   edx,edx
c0004c6b:	78 39                	js     c0004ca6 <f_mount+0x5d>
c0004c6d:	8b 04 95 c0 40 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbf40]
c0004c74:	85 c0                	test   eax,eax
c0004c76:	74 03                	je     c0004c7b <f_mount+0x32>
c0004c78:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c7f:	85 c0                	test   eax,eax
c0004c81:	74 03                	je     c0004c86 <f_mount+0x3d>
c0004c83:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c8a:	89 04 95 c0 40 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbf40],eax
c0004c91:	31 c0                	xor    eax,eax
c0004c93:	84 db                	test   bl,bl
c0004c95:	74 0f                	je     c0004ca6 <f_mount+0x5d>
c0004c97:	31 c9                	xor    ecx,ecx
c0004c99:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004c9d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ca1:	e8 6f d7 ff ff       	call   c0002415 <mount_volume>
c0004ca6:	83 c4 18             	add    esp,0x18
c0004ca9:	5b                   	pop    ebx
c0004caa:	c3                   	ret    

c0004cab <f_open>:
c0004cab:	55                   	push   ebp
c0004cac:	bd 09 00 00 00       	mov    ebp,0x9
c0004cb1:	57                   	push   edi
c0004cb2:	56                   	push   esi
c0004cb3:	53                   	push   ebx
c0004cb4:	83 ec 7c             	sub    esp,0x7c
c0004cb7:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004cbe:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004cc5:	85 db                	test   ebx,ebx
c0004cc7:	0f 84 10 04 00 00    	je     c00050dd <f_open+0x432>
c0004ccd:	89 fe                	mov    esi,edi
c0004ccf:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004cd3:	83 e6 3f             	and    esi,0x3f
c0004cd6:	89 f0                	mov    eax,esi
c0004cd8:	0f b6 c8             	movzx  ecx,al
c0004cdb:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004ce2:	e8 2e d7 ff ff       	call   c0002415 <mount_volume>
c0004ce7:	89 c5                	mov    ebp,eax
c0004ce9:	85 c0                	test   eax,eax
c0004ceb:	0f 85 e6 03 00 00    	jne    c00050d7 <f_open+0x42c>
c0004cf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004cf5:	83 ec 0c             	sub    esp,0xc
c0004cf8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004cfc:	bd 11 00 00 00       	mov    ebp,0x11
c0004d01:	68 60 04 00 00       	push   0x460
c0004d06:	e8 6e 34 00 00       	call   c0008179 <ff_memalloc>
c0004d0b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d0f:	83 c4 10             	add    esp,0x10
c0004d12:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d17:	0f 84 c0 03 00 00    	je     c00050dd <f_open+0x432>
c0004d1d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004d21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d25:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004d2b:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004d2e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004d31:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004d38:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d3c:	e8 40 fe ff ff       	call   c0004b81 <follow_path>
c0004d41:	89 c5                	mov    ebp,eax
c0004d43:	85 c0                	test   eax,eax
c0004d45:	75 0c                	jne    c0004d53 <f_open+0xa8>
c0004d47:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004d4c:	79 05                	jns    c0004d53 <f_open+0xa8>
c0004d4e:	bd 06 00 00 00       	mov    ebp,0x6
c0004d53:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004d59:	0f 84 84 01 00 00    	je     c0004ee3 <f_open+0x238>
c0004d5f:	85 ed                	test   ebp,ebp
c0004d61:	74 20                	je     c0004d83 <f_open+0xd8>
c0004d63:	83 fd 04             	cmp    ebp,0x4
c0004d66:	0f 85 58 03 00 00    	jne    c00050c4 <f_open+0x419>
c0004d6c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d70:	83 ce 08             	or     esi,0x8
c0004d73:	e8 7d f2 ff ff       	call   c0003ff5 <dir_register>
c0004d78:	89 c5                	mov    ebp,eax
c0004d7a:	85 c0                	test   eax,eax
c0004d7c:	74 2f                	je     c0004dad <f_open+0x102>
c0004d7e:	e9 41 03 00 00       	jmp    c00050c4 <f_open+0x419>
c0004d83:	bd 07 00 00 00       	mov    ebp,0x7
c0004d88:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004d8d:	0f 85 31 03 00 00    	jne    c00050c4 <f_open+0x419>
c0004d93:	bd 08 00 00 00       	mov    ebp,0x8
c0004d98:	f7 c7 04 00 00 00    	test   edi,0x4
c0004d9e:	0f 85 20 03 00 00    	jne    c00050c4 <f_open+0x419>
c0004da4:	83 e7 08             	and    edi,0x8
c0004da7:	0f 84 65 01 00 00    	je     c0004f12 <f_open+0x267>
c0004dad:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004db1:	8a 02                	mov    al,BYTE PTR [edx]
c0004db3:	3c 04                	cmp    al,0x4
c0004db5:	0f 85 97 00 00 00    	jne    c0004e52 <f_open+0x1a7>
c0004dbb:	8d 42 10             	lea    eax,[edx+0x10]
c0004dbe:	89 13                	mov    DWORD PTR [ebx],edx
c0004dc0:	89 da                	mov    edx,ebx
c0004dc2:	e8 80 fd ff ff       	call   c0004b47 <init_alloc_info.isra.2>
c0004dc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dcb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004dce:	31 d2                	xor    edx,edx
c0004dd0:	83 c0 02             	add    eax,0x2
c0004dd3:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004dd8:	e8 4a cc ff ff       	call   c0001a27 <mem_set>
c0004ddd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004de1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004de4:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004de9:	83 c0 26             	add    eax,0x26
c0004dec:	31 d2                	xor    edx,edx
c0004dee:	e8 34 cc ff ff       	call   c0001a27 <mem_set>
c0004df3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004df7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004dfa:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004dfe:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e03:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e06:	83 c0 08             	add    eax,0x8
c0004e09:	e8 fb cb ff ff       	call   c0001a09 <st_dword>
c0004e0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e12:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e15:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e19:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e1d:	e8 c4 ea ff ff       	call   c00038e6 <store_xdir>
c0004e22:	89 c5                	mov    ebp,eax
c0004e24:	85 c0                	test   eax,eax
c0004e26:	0f 85 98 02 00 00    	jne    c00050c4 <f_open+0x419>
c0004e2c:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004e2f:	85 d2                	test   edx,edx
c0004e31:	0f 84 db 00 00 00    	je     c0004f12 <f_open+0x267>
c0004e37:	31 c9                	xor    ecx,ecx
c0004e39:	89 d8                	mov    eax,ebx
c0004e3b:	e8 9b e3 ff ff       	call   c00031db <remove_chain>
c0004e40:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e44:	89 c5                	mov    ebp,eax
c0004e46:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e49:	48                   	dec    eax
c0004e4a:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004e4d:	e9 b8 00 00 00       	jmp    c0004f0a <f_open+0x25f>
c0004e52:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004e56:	89 ea                	mov    edx,ebp
c0004e58:	e8 99 fc ff ff       	call   c0004af6 <ld_clust.isra.0>
c0004e5d:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e62:	89 c7                	mov    edi,eax
c0004e64:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004e67:	e8 9d cb ff ff       	call   c0001a09 <st_dword>
c0004e6c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e70:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004e74:	31 c9                	xor    ecx,ecx
c0004e76:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e7e:	e8 9c fc ff ff       	call   c0004b1f <st_clust.isra.1>
c0004e83:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e87:	83 c0 1c             	add    eax,0x1c
c0004e8a:	31 d2                	xor    edx,edx
c0004e8c:	e8 78 cb ff ff       	call   c0001a09 <st_dword>
c0004e91:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e95:	85 ff                	test   edi,edi
c0004e97:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e9b:	74 75                	je     c0004f12 <f_open+0x267>
c0004e9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea1:	31 c9                	xor    ecx,ecx
c0004ea3:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004ea6:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004ea9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ead:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004eb1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eb5:	89 fa                	mov    edx,edi
c0004eb7:	e8 1f e3 ff ff       	call   c00031db <remove_chain>
c0004ebc:	89 c5                	mov    ebp,eax
c0004ebe:	85 c0                	test   eax,eax
c0004ec0:	0f 85 fe 01 00 00    	jne    c00050c4 <f_open+0x419>
c0004ec6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004eca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004ece:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ed2:	4f                   	dec    edi
c0004ed3:	e8 92 d2 ff ff       	call   c000216a <move_window>
c0004ed8:	89 c5                	mov    ebp,eax
c0004eda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ede:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004ee1:	eb 27                	jmp    c0004f0a <f_open+0x25f>
c0004ee3:	85 ed                	test   ebp,ebp
c0004ee5:	0f 85 d9 01 00 00    	jne    c00050c4 <f_open+0x419>
c0004eeb:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004eef:	bd 04 00 00 00       	mov    ebp,0x4
c0004ef4:	a8 10                	test   al,0x10
c0004ef6:	0f 85 c8 01 00 00    	jne    c00050c4 <f_open+0x419>
c0004efc:	83 e7 02             	and    edi,0x2
c0004eff:	74 11                	je     c0004f12 <f_open+0x267>
c0004f01:	bd 07 00 00 00       	mov    ebp,0x7
c0004f06:	a8 01                	test   al,0x1
c0004f08:	eb 02                	jmp    c0004f0c <f_open+0x261>
c0004f0a:	85 ed                	test   ebp,ebp
c0004f0c:	0f 85 b2 01 00 00    	jne    c00050c4 <f_open+0x419>
c0004f12:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f18:	74 03                	je     c0004f1d <f_open+0x272>
c0004f1a:	83 ce 40             	or     esi,0x40
c0004f1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f21:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004f24:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004f27:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004f2a:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004f2e:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004f31:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004f34:	8a 02                	mov    al,BYTE PTR [edx]
c0004f36:	3c 04                	cmp    al,0x4
c0004f38:	75 2a                	jne    c0004f64 <f_open+0x2b9>
c0004f3a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004f3e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004f45:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004f4a:	30 c0                	xor    al,al
c0004f4c:	09 c8                	or     eax,ecx
c0004f4e:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f51:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004f55:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f58:	8d 42 10             	lea    eax,[edx+0x10]
c0004f5b:	89 da                	mov    edx,ebx
c0004f5d:	e8 e5 fb ff ff       	call   c0004b47 <init_alloc_info.isra.2>
c0004f62:	eb 1c                	jmp    c0004f80 <f_open+0x2d5>
c0004f64:	89 fa                	mov    edx,edi
c0004f66:	e8 8b fb ff ff       	call   c0004af6 <ld_clust.isra.0>
c0004f6b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f6e:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004f71:	e8 2a ca ff ff       	call   c00019a0 <ld_dword>
c0004f76:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0004f7d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004f80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f84:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0004f8b:	89 03                	mov    DWORD PTR [ebx],eax
c0004f8d:	31 d2                	xor    edx,edx
c0004f8f:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004f93:	b9 00 02 00 00       	mov    ecx,0x200
c0004f98:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004f9c:	89 f0                	mov    eax,esi
c0004f9e:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0004fa1:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0004fa5:	8d 43 50             	lea    eax,[ebx+0x50]
c0004fa8:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0004faf:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0004fb6:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0004fbd:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0004fc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004fc8:	e8 5a ca ff ff       	call   c0001a27 <mem_set>
c0004fcd:	83 e6 20             	and    esi,0x20
c0004fd0:	75 07                	jne    c0004fd9 <f_open+0x32e>
c0004fd2:	31 ed                	xor    ebp,ebp
c0004fd4:	e9 eb 00 00 00       	jmp    c00050c4 <f_open+0x419>
c0004fd9:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0004fdc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004fdf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004fe3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004fe7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004feb:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0004fef:	74 e1                	je     c0004fd2 <f_open+0x327>
c0004ff1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004ff5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ff9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0004ffc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005000:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005003:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005006:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000500a:	c1 e5 09             	shl    ebp,0x9
c000500d:	31 ff                	xor    edi,edi
c000500f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005013:	89 f8                	mov    eax,edi
c0005015:	89 ee                	mov    esi,ebp
c0005017:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000501b:	73 22                	jae    c000503f <f_open+0x394>
c000501d:	89 d8                	mov    eax,ebx
c000501f:	e8 c8 dc ff ff       	call   c0002cec <get_fat>
c0005024:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0005028:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c000502c:	89 c2                	mov    edx,eax
c000502e:	83 f8 01             	cmp    eax,0x1
c0005031:	76 10                	jbe    c0005043 <f_open+0x398>
c0005033:	83 f8 ff             	cmp    eax,0xffffffff
c0005036:	75 d5                	jne    c000500d <f_open+0x362>
c0005038:	bd 01 00 00 00       	mov    ebp,0x1
c000503d:	eb 09                	jmp    c0005048 <f_open+0x39d>
c000503f:	31 ed                	xor    ebp,ebp
c0005041:	eb 05                	jmp    c0005048 <f_open+0x39d>
c0005043:	bd 02 00 00 00       	mov    ebp,0x2
c0005048:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000504b:	85 ed                	test   ebp,ebp
c000504d:	75 75                	jne    c00050c4 <f_open+0x419>
c000504f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005053:	25 ff 01 00 00       	and    eax,0x1ff
c0005058:	0f 84 74 ff ff ff    	je     c0004fd2 <f_open+0x327>
c000505e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005062:	bd 02 00 00 00       	mov    ebp,0x2
c0005067:	89 c8                	mov    eax,ecx
c0005069:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000506d:	e8 ba cb ff ff       	call   c0001c2c <clst2sect>
c0005072:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005076:	89 d7                	mov    edi,edx
c0005078:	09 c7                	or     edi,eax
c000507a:	74 48                	je     c00050c4 <f_open+0x419>
c000507c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005080:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005084:	0f ac fe 09          	shrd   esi,edi,0x9
c0005088:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000508c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005094:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005098:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000509c:	83 ec 0c             	sub    esp,0xc
c000509f:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00050a2:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00050a5:	6a 01                	push   0x1
c00050a7:	52                   	push   edx
c00050a8:	50                   	push   eax
c00050a9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00050ad:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00050b1:	50                   	push   eax
c00050b2:	e8 91 c8 ff ff       	call   c0001948 <disk_read>
c00050b7:	83 c4 20             	add    esp,0x20
c00050ba:	85 c0                	test   eax,eax
c00050bc:	0f 95 c0             	setne  al
c00050bf:	0f b6 c0             	movzx  eax,al
c00050c2:	89 c5                	mov    ebp,eax
c00050c4:	83 ec 0c             	sub    esp,0xc
c00050c7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00050cb:	e8 bf 30 00 00       	call   c000818f <ff_memfree>
c00050d0:	83 c4 10             	add    esp,0x10
c00050d3:	85 ed                	test   ebp,ebp
c00050d5:	74 06                	je     c00050dd <f_open+0x432>
c00050d7:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00050dd:	83 c4 7c             	add    esp,0x7c
c00050e0:	89 e8                	mov    eax,ebp
c00050e2:	5b                   	pop    ebx
c00050e3:	5e                   	pop    esi
c00050e4:	5f                   	pop    edi
c00050e5:	5d                   	pop    ebp
c00050e6:	c3                   	ret    

c00050e7 <f_read>:
c00050e7:	55                   	push   ebp
c00050e8:	57                   	push   edi
c00050e9:	56                   	push   esi
c00050ea:	53                   	push   ebx
c00050eb:	83 ec 2c             	sub    esp,0x2c
c00050ee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00050f2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00050f6:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00050fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005100:	89 d8                	mov    eax,ebx
c0005102:	e8 88 cf ff ff       	call   c000208f <validate>
c0005107:	89 c5                	mov    ebp,eax
c0005109:	85 c0                	test   eax,eax
c000510b:	0f 85 4c 02 00 00    	jne    c000535d <f_read+0x276>
c0005111:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005115:	85 ed                	test   ebp,ebp
c0005117:	0f 85 40 02 00 00    	jne    c000535d <f_read+0x276>
c000511d:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005121:	0f 84 31 02 00 00    	je     c0005358 <f_read+0x271>
c0005127:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000512a:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000512d:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005130:	bf 00 00 00 00       	mov    edi,0x0
c0005135:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0005138:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000513c:	89 d1                	mov    ecx,edx
c000513e:	19 f9                	sbb    ecx,edi
c0005140:	0f 83 cf 00 00 00    	jae    c0005215 <f_read+0x12e>
c0005146:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000514a:	e9 c6 00 00 00       	jmp    c0005215 <f_read+0x12e>
c000514f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005152:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005155:	89 d0                	mov    eax,edx
c0005157:	25 ff 01 00 00       	and    eax,0x1ff
c000515c:	0f 85 c9 01 00 00    	jne    c000532b <f_read+0x244>
c0005162:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005166:	89 d6                	mov    esi,edx
c0005168:	89 cf                	mov    edi,ecx
c000516a:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000516e:	0f ac fe 09          	shrd   esi,edi,0x9
c0005172:	48                   	dec    eax
c0005173:	21 f0                	and    eax,esi
c0005175:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005179:	0f 84 a6 00 00 00    	je     c0005225 <f_read+0x13e>
c000517f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005183:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005186:	89 c8                	mov    eax,ecx
c0005188:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000518b:	e8 9c ca ff ff       	call   c0001c2c <clst2sect>
c0005190:	89 d7                	mov    edi,edx
c0005192:	09 c7                	or     edi,eax
c0005194:	0f 84 b4 00 00 00    	je     c000524e <f_read+0x167>
c000519a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000519e:	31 ff                	xor    edi,edi
c00051a0:	01 c6                	add    esi,eax
c00051a2:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00051a5:	11 d7                	adc    edi,edx
c00051a7:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00051af:	0f 86 fd 00 00 00    	jbe    c00052b2 <f_read+0x1cb>
c00051b5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00051b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051bd:	c1 e8 09             	shr    eax,0x9
c00051c0:	89 04 24             	mov    DWORD PTR [esp],eax
c00051c3:	03 14 24             	add    edx,DWORD PTR [esp]
c00051c6:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00051ca:	39 c2                	cmp    edx,eax
c00051cc:	76 07                	jbe    c00051d5 <f_read+0xee>
c00051ce:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00051d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00051d5:	83 ec 0c             	sub    esp,0xc
c00051d8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00051dc:	57                   	push   edi
c00051dd:	56                   	push   esi
c00051de:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00051e2:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051e6:	50                   	push   eax
c00051e7:	e8 5c c7 ff ff       	call   c0001948 <disk_read>
c00051ec:	83 c4 20             	add    esp,0x20
c00051ef:	85 c0                	test   eax,eax
c00051f1:	75 6e                	jne    c0005261 <f_read+0x17a>
c00051f3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00051f7:	78 7e                	js     c0005277 <f_read+0x190>
c00051f9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00051fc:	c1 e6 09             	shl    esi,0x9
c00051ff:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005203:	31 ff                	xor    edi,edi
c0005205:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005209:	01 30                	add    DWORD PTR [eax],esi
c000520b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000520f:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005212:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005215:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000521a:	0f 85 2f ff ff ff    	jne    c000514f <f_read+0x68>
c0005220:	e9 38 01 00 00       	jmp    c000535d <f_read+0x276>
c0005225:	89 c8                	mov    eax,ecx
c0005227:	09 d0                	or     eax,edx
c0005229:	75 05                	jne    c0005230 <f_read+0x149>
c000522b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000522e:	eb 19                	jmp    c0005249 <f_read+0x162>
c0005230:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005234:	74 09                	je     c000523f <f_read+0x158>
c0005236:	89 d8                	mov    eax,ebx
c0005238:	e8 10 ca ff ff       	call   c0001c4d <clmt_clust>
c000523d:	eb 0a                	jmp    c0005249 <f_read+0x162>
c000523f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005242:	89 d8                	mov    eax,ebx
c0005244:	e8 a3 da ff ff       	call   c0002cec <get_fat>
c0005249:	83 f8 01             	cmp    eax,0x1
c000524c:	77 0e                	ja     c000525c <f_read+0x175>
c000524e:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005252:	bd 02 00 00 00       	mov    ebp,0x2
c0005257:	e9 01 01 00 00       	jmp    c000535d <f_read+0x276>
c000525c:	83 f8 ff             	cmp    eax,0xffffffff
c000525f:	75 0e                	jne    c000526f <f_read+0x188>
c0005261:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005265:	bd 01 00 00 00       	mov    ebp,0x1
c000526a:	e9 ee 00 00 00       	jmp    c000535d <f_read+0x276>
c000526f:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005272:	e9 08 ff ff ff       	jmp    c000517f <f_read+0x98>
c0005277:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000527a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000527d:	29 f0                	sub    eax,esi
c000527f:	19 fa                	sbb    edx,edi
c0005281:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005284:	89 d7                	mov    edi,edx
c0005286:	ba 00 00 00 00       	mov    edx,0x0
c000528b:	89 f9                	mov    ecx,edi
c000528d:	19 d1                	sbb    ecx,edx
c000528f:	0f 83 64 ff ff ff    	jae    c00051f9 <f_read+0x112>
c0005295:	89 c7                	mov    edi,eax
c0005297:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000529b:	c1 e7 09             	shl    edi,0x9
c000529e:	8d 53 50             	lea    edx,[ebx+0x50]
c00052a1:	01 f8                	add    eax,edi
c00052a3:	b9 00 02 00 00       	mov    ecx,0x200
c00052a8:	e8 65 c7 ff ff       	call   c0001a12 <mem_cpy>
c00052ad:	e9 47 ff ff ff       	jmp    c00051f9 <f_read+0x112>
c00052b2:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00052b5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00052b8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00052bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00052bf:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00052c3:	75 05                	jne    c00052ca <f_read+0x1e3>
c00052c5:	39 34 24             	cmp    DWORD PTR [esp],esi
c00052c8:	74 5b                	je     c0005325 <f_read+0x23e>
c00052ca:	8d 43 50             	lea    eax,[ebx+0x50]
c00052cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00052d1:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052d5:	79 2a                	jns    c0005301 <f_read+0x21a>
c00052d7:	83 ec 0c             	sub    esp,0xc
c00052da:	6a 01                	push   0x1
c00052dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00052e8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052ec:	50                   	push   eax
c00052ed:	e8 6c c6 ff ff       	call   c000195e <disk_write>
c00052f2:	83 c4 20             	add    esp,0x20
c00052f5:	85 c0                	test   eax,eax
c00052f7:	0f 85 64 ff ff ff    	jne    c0005261 <f_read+0x17a>
c00052fd:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005301:	83 ec 0c             	sub    esp,0xc
c0005304:	6a 01                	push   0x1
c0005306:	57                   	push   edi
c0005307:	56                   	push   esi
c0005308:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000530c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005310:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005314:	50                   	push   eax
c0005315:	e8 2e c6 ff ff       	call   c0001948 <disk_read>
c000531a:	83 c4 20             	add    esp,0x20
c000531d:	85 c0                	test   eax,eax
c000531f:	0f 85 3c ff ff ff    	jne    c0005261 <f_read+0x17a>
c0005325:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005328:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000532b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000532e:	ba 00 02 00 00       	mov    edx,0x200
c0005333:	25 ff 01 00 00       	and    eax,0x1ff
c0005338:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000533c:	29 c2                	sub    edx,eax
c000533e:	39 d6                	cmp    esi,edx
c0005340:	76 02                	jbe    c0005344 <f_read+0x25d>
c0005342:	89 d6                	mov    esi,edx
c0005344:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005348:	89 f1                	mov    ecx,esi
c000534a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000534e:	e8 bf c6 ff ff       	call   c0001a12 <mem_cpy>
c0005353:	e9 a7 fe ff ff       	jmp    c00051ff <f_read+0x118>
c0005358:	bd 07 00 00 00       	mov    ebp,0x7
c000535d:	83 c4 2c             	add    esp,0x2c
c0005360:	89 e8                	mov    eax,ebp
c0005362:	5b                   	pop    ebx
c0005363:	5e                   	pop    esi
c0005364:	5f                   	pop    edi
c0005365:	5d                   	pop    ebp
c0005366:	c3                   	ret    

c0005367 <f_write>:
c0005367:	55                   	push   ebp
c0005368:	57                   	push   edi
c0005369:	56                   	push   esi
c000536a:	53                   	push   ebx
c000536b:	83 ec 2c             	sub    esp,0x2c
c000536e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005372:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005376:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000537a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005380:	89 d8                	mov    eax,ebx
c0005382:	e8 08 cd ff ff       	call   c000208f <validate>
c0005387:	89 c5                	mov    ebp,eax
c0005389:	85 c0                	test   eax,eax
c000538b:	0f 85 86 02 00 00    	jne    c0005617 <f_write+0x2b0>
c0005391:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005395:	85 ed                	test   ebp,ebp
c0005397:	0f 85 7a 02 00 00    	jne    c0005617 <f_write+0x2b0>
c000539d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00053a1:	0f 84 6b 02 00 00    	je     c0005612 <f_write+0x2ab>
c00053a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053ab:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00053ae:	0f 84 43 01 00 00    	je     c00054f7 <f_write+0x190>
c00053b4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053b7:	89 c1                	mov    ecx,eax
c00053b9:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00053bd:	0f 83 34 01 00 00    	jae    c00054f7 <f_write+0x190>
c00053c3:	f7 d0                	not    eax
c00053c5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053c9:	e9 29 01 00 00       	jmp    c00054f7 <f_write+0x190>
c00053ce:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053d1:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00053d4:	89 d0                	mov    eax,edx
c00053d6:	25 ff 01 00 00       	and    eax,0x1ff
c00053db:	0f 85 00 02 00 00    	jne    c00055e1 <f_write+0x27a>
c00053e1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053e5:	89 d6                	mov    esi,edx
c00053e7:	89 cf                	mov    edi,ecx
c00053e9:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00053ed:	0f ac fe 09          	shrd   esi,edi,0x9
c00053f1:	48                   	dec    eax
c00053f2:	21 f0                	and    eax,esi
c00053f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00053f8:	0f 84 06 01 00 00    	je     c0005504 <f_write+0x19d>
c00053fe:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005402:	0f 88 6e 01 00 00    	js     c0005576 <f_write+0x20f>
c0005408:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000540c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000540f:	89 c8                	mov    eax,ecx
c0005411:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005415:	e8 12 c8 ff ff       	call   c0001c2c <clst2sect>
c000541a:	89 d1                	mov    ecx,edx
c000541c:	09 c1                	or     ecx,eax
c000541e:	0f 84 1c 01 00 00    	je     c0005540 <f_write+0x1d9>
c0005424:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005428:	31 ff                	xor    edi,edi
c000542a:	01 c6                	add    esi,eax
c000542c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005430:	11 d7                	adc    edi,edx
c0005432:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000543a:	0f 86 63 01 00 00    	jbe    c00055a3 <f_write+0x23c>
c0005440:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005444:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005448:	c1 e8 09             	shr    eax,0x9
c000544b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000544f:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0005453:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005457:	39 c2                	cmp    edx,eax
c0005459:	76 08                	jbe    c0005463 <f_write+0xfc>
c000545b:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000545f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005463:	83 ec 0c             	sub    esp,0xc
c0005466:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000546a:	57                   	push   edi
c000546b:	56                   	push   esi
c000546c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005470:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005474:	50                   	push   eax
c0005475:	e8 e4 c4 ff ff       	call   c000195e <disk_write>
c000547a:	83 c4 20             	add    esp,0x20
c000547d:	85 c0                	test   eax,eax
c000547f:	0f 85 ce 00 00 00    	jne    c0005553 <f_write+0x1ec>
c0005485:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005488:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000548b:	29 f0                	sub    eax,esi
c000548d:	19 fa                	sbb    edx,edi
c000548f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005493:	89 d7                	mov    edi,edx
c0005495:	ba 00 00 00 00       	mov    edx,0x0
c000549a:	89 f9                	mov    ecx,edi
c000549c:	19 d1                	sbb    ecx,edx
c000549e:	73 1c                	jae    c00054bc <f_write+0x155>
c00054a0:	89 c7                	mov    edi,eax
c00054a2:	b9 00 02 00 00       	mov    ecx,0x200
c00054a7:	c1 e7 09             	shl    edi,0x9
c00054aa:	8d 43 50             	lea    eax,[ebx+0x50]
c00054ad:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00054b1:	89 fa                	mov    edx,edi
c00054b3:	e8 5a c5 ff ff       	call   c0001a12 <mem_cpy>
c00054b8:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054bc:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00054c0:	c1 e6 09             	shl    esi,0x9
c00054c3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054c7:	31 ff                	xor    edi,edi
c00054c9:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054cd:	01 30                	add    DWORD PTR [eax],esi
c00054cf:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054d3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00054d6:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00054d9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00054dc:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00054df:	89 c1                	mov    ecx,eax
c00054e1:	39 f2                	cmp    edx,esi
c00054e3:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00054e6:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00054e9:	19 f9                	sbb    ecx,edi
c00054eb:	73 04                	jae    c00054f1 <f_write+0x18a>
c00054ed:	89 f2                	mov    edx,esi
c00054ef:	89 f8                	mov    eax,edi
c00054f1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00054f4:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00054f7:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054fc:	0f 85 cc fe ff ff    	jne    c00053ce <f_write+0x67>
c0005502:	eb 2e                	jmp    c0005532 <f_write+0x1cb>
c0005504:	89 c8                	mov    eax,ecx
c0005506:	09 d0                	or     eax,edx
c0005508:	75 0b                	jne    c0005515 <f_write+0x1ae>
c000550a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000550d:	31 d2                	xor    edx,edx
c000550f:	85 c0                	test   eax,eax
c0005511:	75 28                	jne    c000553b <f_write+0x1d4>
c0005513:	eb 12                	jmp    c0005527 <f_write+0x1c0>
c0005515:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005519:	74 09                	je     c0005524 <f_write+0x1bd>
c000551b:	89 d8                	mov    eax,ebx
c000551d:	e8 2b c7 ff ff       	call   c0001c4d <clmt_clust>
c0005522:	eb 0a                	jmp    c000552e <f_write+0x1c7>
c0005524:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005527:	89 d8                	mov    eax,ebx
c0005529:	e8 ac da ff ff       	call   c0002fda <create_chain>
c000552e:	85 c0                	test   eax,eax
c0005530:	75 09                	jne    c000553b <f_write+0x1d4>
c0005532:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005536:	e9 dc 00 00 00       	jmp    c0005617 <f_write+0x2b0>
c000553b:	83 f8 01             	cmp    eax,0x1
c000553e:	75 0e                	jne    c000554e <f_write+0x1e7>
c0005540:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005544:	bd 02 00 00 00       	mov    ebp,0x2
c0005549:	e9 c9 00 00 00       	jmp    c0005617 <f_write+0x2b0>
c000554e:	83 f8 ff             	cmp    eax,0xffffffff
c0005551:	75 0e                	jne    c0005561 <f_write+0x1fa>
c0005553:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005557:	bd 01 00 00 00       	mov    ebp,0x1
c000555c:	e9 b6 00 00 00       	jmp    c0005617 <f_write+0x2b0>
c0005561:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005564:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005568:	0f 85 90 fe ff ff    	jne    c00053fe <f_write+0x97>
c000556e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005571:	e9 88 fe ff ff       	jmp    c00053fe <f_write+0x97>
c0005576:	83 ec 0c             	sub    esp,0xc
c0005579:	8d 43 50             	lea    eax,[ebx+0x50]
c000557c:	6a 01                	push   0x1
c000557e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005581:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005584:	50                   	push   eax
c0005585:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005589:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000558d:	50                   	push   eax
c000558e:	e8 cb c3 ff ff       	call   c000195e <disk_write>
c0005593:	83 c4 20             	add    esp,0x20
c0005596:	85 c0                	test   eax,eax
c0005598:	75 b9                	jne    c0005553 <f_write+0x1ec>
c000559a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000559e:	e9 65 fe ff ff       	jmp    c0005408 <f_write+0xa1>
c00055a3:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00055a6:	75 05                	jne    c00055ad <f_write+0x246>
c00055a8:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00055ab:	74 2e                	je     c00055db <f_write+0x274>
c00055ad:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055b0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00055b3:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00055b6:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00055b9:	73 20                	jae    c00055db <f_write+0x274>
c00055bb:	83 ec 0c             	sub    esp,0xc
c00055be:	8d 43 50             	lea    eax,[ebx+0x50]
c00055c1:	6a 01                	push   0x1
c00055c3:	57                   	push   edi
c00055c4:	56                   	push   esi
c00055c5:	50                   	push   eax
c00055c6:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055ca:	50                   	push   eax
c00055cb:	e8 78 c3 ff ff       	call   c0001948 <disk_read>
c00055d0:	83 c4 20             	add    esp,0x20
c00055d3:	85 c0                	test   eax,eax
c00055d5:	0f 85 78 ff ff ff    	jne    c0005553 <f_write+0x1ec>
c00055db:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055de:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055e1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055e4:	ba 00 02 00 00       	mov    edx,0x200
c00055e9:	25 ff 01 00 00       	and    eax,0x1ff
c00055ee:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00055f2:	29 c2                	sub    edx,eax
c00055f4:	39 d6                	cmp    esi,edx
c00055f6:	76 02                	jbe    c00055fa <f_write+0x293>
c00055f8:	89 d6                	mov    esi,edx
c00055fa:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00055fe:	89 f1                	mov    ecx,esi
c0005600:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005604:	e8 09 c4 ff ff       	call   c0001a12 <mem_cpy>
c0005609:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c000560d:	e9 b1 fe ff ff       	jmp    c00054c3 <f_write+0x15c>
c0005612:	bd 07 00 00 00       	mov    ebp,0x7
c0005617:	83 c4 2c             	add    esp,0x2c
c000561a:	89 e8                	mov    eax,ebp
c000561c:	5b                   	pop    ebx
c000561d:	5e                   	pop    esi
c000561e:	5f                   	pop    edi
c000561f:	5d                   	pop    ebp
c0005620:	c3                   	ret    

c0005621 <f_sync>:
c0005621:	56                   	push   esi
c0005622:	53                   	push   ebx
c0005623:	83 ec 64             	sub    esp,0x64
c0005626:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000562a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000562e:	89 d8                	mov    eax,ebx
c0005630:	e8 5a ca ff ff       	call   c000208f <validate>
c0005635:	85 c0                	test   eax,eax
c0005637:	0f 85 ba 01 00 00    	jne    c00057f7 <f_sync+0x1d6>
c000563d:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005640:	f6 c2 40             	test   dl,0x40
c0005643:	0f 84 ae 01 00 00    	je     c00057f7 <f_sync+0x1d6>
c0005649:	84 d2                	test   dl,dl
c000564b:	79 33                	jns    c0005680 <f_sync+0x5f>
c000564d:	83 ec 0c             	sub    esp,0xc
c0005650:	8d 43 50             	lea    eax,[ebx+0x50]
c0005653:	6a 01                	push   0x1
c0005655:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005658:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000565b:	50                   	push   eax
c000565c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005660:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005664:	50                   	push   eax
c0005665:	e8 f4 c2 ff ff       	call   c000195e <disk_write>
c000566a:	89 c2                	mov    edx,eax
c000566c:	83 c4 20             	add    esp,0x20
c000566f:	b8 01 00 00 00       	mov    eax,0x1
c0005674:	85 d2                	test   edx,edx
c0005676:	0f 85 7b 01 00 00    	jne    c00057f7 <f_sync+0x1d6>
c000567c:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005684:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005687:	0f 85 11 01 00 00    	jne    c000579e <f_sync+0x17d>
c000568d:	89 d8                	mov    eax,ebx
c000568f:	e8 1e d6 ff ff       	call   c0002cb2 <fill_first_frag>
c0005694:	85 c0                	test   eax,eax
c0005696:	0f 85 5b 01 00 00    	jne    c00057f7 <f_sync+0x1d6>
c000569c:	83 c9 ff             	or     ecx,0xffffffff
c000569f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056a2:	89 d8                	mov    eax,ebx
c00056a4:	e8 d4 d5 ff ff       	call   c0002c7d <fill_last_frag>
c00056a9:	85 c0                	test   eax,eax
c00056ab:	0f 85 46 01 00 00    	jne    c00057f7 <f_sync+0x1d6>
c00056b1:	83 ec 0c             	sub    esp,0xc
c00056b4:	68 60 04 00 00       	push   0x460
c00056b9:	e8 bb 2a 00 00       	call   c0008179 <ff_memalloc>
c00056be:	89 c6                	mov    esi,eax
c00056c0:	83 c4 10             	add    esp,0x10
c00056c3:	b8 11 00 00 00       	mov    eax,0x11
c00056c8:	85 f6                	test   esi,esi
c00056ca:	0f 84 27 01 00 00    	je     c00057f7 <f_sync+0x1d6>
c00056d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056d4:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00056da:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00056dd:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00056e0:	89 da                	mov    edx,ebx
c00056e2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00056e6:	e8 bc df ff ff       	call   c00036a7 <load_obj_xdir>
c00056eb:	85 c0                	test   eax,eax
c00056ed:	0f 85 95 00 00 00    	jne    c0005788 <f_sync+0x167>
c00056f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056f7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00056fa:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00056fe:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005701:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005704:	83 ca 01             	or     edx,0x1
c0005707:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c000570a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000570d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005710:	83 c0 34             	add    eax,0x34
c0005713:	e8 f1 c2 ff ff       	call   c0001a09 <st_dword>
c0005718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000571c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000571f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005722:	83 c0 38             	add    eax,0x38
c0005725:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005728:	e8 df c2 ff ff       	call   c0001a0c <st_qword>
c000572d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005731:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005734:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005737:	83 c0 28             	add    eax,0x28
c000573a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000573d:	e8 ca c2 ff ff       	call   c0001a0c <st_qword>
c0005742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005746:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005749:	ba 00 00 21 50       	mov    edx,0x50210000
c000574e:	83 c0 0c             	add    eax,0xc
c0005751:	e8 b3 c2 ff ff       	call   c0001a09 <st_dword>
c0005756:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000575a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000575d:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005761:	31 d2                	xor    edx,edx
c0005763:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005766:	83 c0 10             	add    eax,0x10
c0005769:	e8 9b c2 ff ff       	call   c0001a09 <st_dword>
c000576e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005772:	e8 6f e1 ff ff       	call   c00038e6 <store_xdir>
c0005777:	85 c0                	test   eax,eax
c0005779:	75 0d                	jne    c0005788 <f_sync+0x167>
c000577b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000577f:	e8 f4 ea ff ff       	call   c0004278 <sync_fs>
c0005784:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005788:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000578c:	83 ec 0c             	sub    esp,0xc
c000578f:	56                   	push   esi
c0005790:	e8 fa 29 00 00       	call   c000818f <ff_memfree>
c0005795:	83 c4 10             	add    esp,0x10
c0005798:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000579c:	eb 59                	jmp    c00057f7 <f_sync+0x1d6>
c000579e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00057a1:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00057a4:	e8 c1 c9 ff ff       	call   c000216a <move_window>
c00057a9:	85 c0                	test   eax,eax
c00057ab:	75 4a                	jne    c00057f7 <f_sync+0x1d6>
c00057ad:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00057b0:	89 f2                	mov    edx,esi
c00057b2:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00057b6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00057b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00057bb:	e8 5f f3 ff ff       	call   c0004b1f <st_clust.isra.1>
c00057c0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057c3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00057c6:	e8 3e c2 ff ff       	call   c0001a09 <st_dword>
c00057cb:	8d 46 16             	lea    eax,[esi+0x16]
c00057ce:	ba 00 00 21 50       	mov    edx,0x50210000
c00057d3:	e8 31 c2 ff ff       	call   c0001a09 <st_dword>
c00057d8:	8d 46 12             	lea    eax,[esi+0x12]
c00057db:	31 d2                	xor    edx,edx
c00057dd:	e8 23 c2 ff ff       	call   c0001a05 <st_word>
c00057e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057e6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00057ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ee:	e8 85 ea ff ff       	call   c0004278 <sync_fs>
c00057f3:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00057f7:	83 c4 64             	add    esp,0x64
c00057fa:	5b                   	pop    ebx
c00057fb:	5e                   	pop    esi
c00057fc:	c3                   	ret    

c00057fd <f_close>:
c00057fd:	53                   	push   ebx
c00057fe:	83 ec 24             	sub    esp,0x24
c0005801:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005805:	53                   	push   ebx
c0005806:	e8 16 fe ff ff       	call   c0005621 <f_sync>
c000580b:	83 c4 10             	add    esp,0x10
c000580e:	85 c0                	test   eax,eax
c0005810:	75 15                	jne    c0005827 <f_close+0x2a>
c0005812:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005816:	89 d8                	mov    eax,ebx
c0005818:	e8 72 c8 ff ff       	call   c000208f <validate>
c000581d:	85 c0                	test   eax,eax
c000581f:	75 06                	jne    c0005827 <f_close+0x2a>
c0005821:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005827:	83 c4 18             	add    esp,0x18
c000582a:	5b                   	pop    ebx
c000582b:	c3                   	ret    

c000582c <f_lseek>:
c000582c:	55                   	push   ebp
c000582d:	57                   	push   edi
c000582e:	56                   	push   esi
c000582f:	53                   	push   ebx
c0005830:	83 ec 3c             	sub    esp,0x3c
c0005833:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005837:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000583b:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000583f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005842:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005846:	89 d8                	mov    eax,ebx
c0005848:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000584c:	e8 3e c8 ff ff       	call   c000208f <validate>
c0005851:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005855:	85 c0                	test   eax,eax
c0005857:	0f 85 28 04 00 00    	jne    c0005c85 <f_lseek+0x459>
c000585d:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005861:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005865:	85 c0                	test   eax,eax
c0005867:	0f 85 18 04 00 00    	jne    c0005c85 <f_lseek+0x459>
c000586d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005871:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005874:	74 0c                	je     c0005882 <f_lseek+0x56>
c0005876:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005879:	85 c0                	test   eax,eax
c000587b:	75 1f                	jne    c000589c <f_lseek+0x70>
c000587d:	e9 8b 01 00 00       	jmp    c0005a0d <f_lseek+0x1e1>
c0005882:	83 c9 ff             	or     ecx,0xffffffff
c0005885:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005888:	89 d8                	mov    eax,ebx
c000588a:	e8 ee d3 ff ff       	call   c0002c7d <fill_last_frag>
c000588f:	85 c0                	test   eax,eax
c0005891:	74 e3                	je     c0005876 <f_lseek+0x4a>
c0005893:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005897:	e9 e9 03 00 00       	jmp    c0005c85 <f_lseek+0x459>
c000589c:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00058a1:	0f 85 ac 00 00 00    	jne    c0005953 <f_lseek+0x127>
c00058a7:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c00058ab:	0f 85 a2 00 00 00    	jne    c0005953 <f_lseek+0x127>
c00058b1:	8d 78 04             	lea    edi,[eax+0x4]
c00058b4:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00058b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00058b9:	be 02 00 00 00       	mov    esi,0x2
c00058be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058c2:	85 ed                	test   ebp,ebp
c00058c4:	74 73                	je     c0005939 <f_lseek+0x10d>
c00058c6:	89 e9                	mov    ecx,ebp
c00058c8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00058cf:	89 ca                	mov    edx,ecx
c00058d1:	89 d8                	mov    eax,ebx
c00058d3:	ff 04 24             	inc    DWORD PTR [esp]
c00058d6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00058da:	e8 0d d4 ff ff       	call   c0002cec <get_fat>
c00058df:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00058e3:	83 f8 01             	cmp    eax,0x1
c00058e6:	77 11                	ja     c00058f9 <f_lseek+0xcd>
c00058e8:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00058ec:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00058f4:	e9 8c 03 00 00       	jmp    c0005c85 <f_lseek+0x459>
c00058f9:	83 f8 ff             	cmp    eax,0xffffffff
c00058fc:	75 11                	jne    c000590f <f_lseek+0xe3>
c00058fe:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005902:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c000590a:	e9 76 03 00 00       	jmp    c0005c85 <f_lseek+0x459>
c000590f:	8d 51 01             	lea    edx,[ecx+0x1]
c0005912:	89 c1                	mov    ecx,eax
c0005914:	39 c2                	cmp    edx,eax
c0005916:	74 b7                	je     c00058cf <f_lseek+0xa3>
c0005918:	83 c6 02             	add    esi,0x2
c000591b:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c000591f:	72 0b                	jb     c000592c <f_lseek+0x100>
c0005921:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005924:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005927:	89 0f                	mov    DWORD PTR [edi],ecx
c0005929:	83 c7 08             	add    edi,0x8
c000592c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005930:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005933:	76 04                	jbe    c0005939 <f_lseek+0x10d>
c0005935:	89 c5                	mov    ebp,eax
c0005937:	eb 8d                	jmp    c00058c6 <f_lseek+0x9a>
c0005939:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000593c:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c0005940:	89 30                	mov    DWORD PTR [eax],esi
c0005942:	0f 87 35 03 00 00    	ja     c0005c7d <f_lseek+0x451>
c0005948:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c000594e:	e9 32 03 00 00       	jmp    c0005c85 <f_lseek+0x459>
c0005953:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0005956:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005959:	39 34 24             	cmp    DWORD PTR [esp],esi
c000595c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005960:	19 f8                	sbb    eax,edi
c0005962:	73 07                	jae    c000596b <f_lseek+0x13f>
c0005964:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005967:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000596b:	89 f8                	mov    eax,edi
c000596d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005970:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005973:	09 f0                	or     eax,esi
c0005975:	0f 84 0a 03 00 00    	je     c0005c85 <f_lseek+0x459>
c000597b:	89 f0                	mov    eax,esi
c000597d:	89 fa                	mov    edx,edi
c000597f:	83 c0 ff             	add    eax,0xffffffff
c0005982:	83 d2 ff             	adc    edx,0xffffffff
c0005985:	89 04 24             	mov    DWORD PTR [esp],eax
c0005988:	89 d1                	mov    ecx,edx
c000598a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000598e:	89 c2                	mov    edx,eax
c0005990:	89 d8                	mov    eax,ebx
c0005992:	e8 b6 c2 ff ff       	call   c0001c4d <clmt_clust>
c0005997:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000599b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000599e:	89 c2                	mov    edx,eax
c00059a0:	89 c8                	mov    eax,ecx
c00059a2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00059a6:	e8 81 c2 ff ff       	call   c0001c2c <clst2sect>
c00059ab:	89 d1                	mov    ecx,edx
c00059ad:	09 c1                	or     ecx,eax
c00059af:	0f 84 33 ff ff ff    	je     c00058e8 <f_lseek+0xbc>
c00059b5:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00059bb:	0f 84 c4 02 00 00    	je     c0005c85 <f_lseek+0x459>
c00059c1:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00059c5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00059c9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00059cc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c00059d0:	0f ac fe 09          	shrd   esi,edi,0x9
c00059d4:	4d                   	dec    ebp
c00059d5:	31 ff                	xor    edi,edi
c00059d7:	21 ee                	and    esi,ebp
c00059d9:	01 c6                	add    esi,eax
c00059db:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00059de:	11 d7                	adc    edi,edx
c00059e0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00059e3:	39 fa                	cmp    edx,edi
c00059e5:	75 08                	jne    c00059ef <f_lseek+0x1c3>
c00059e7:	39 f0                	cmp    eax,esi
c00059e9:	0f 84 96 02 00 00    	je     c0005c85 <f_lseek+0x459>
c00059ef:	8d 6b 50             	lea    ebp,[ebx+0x50]
c00059f2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00059f6:	0f 89 58 02 00 00    	jns    c0005c54 <f_lseek+0x428>
c00059fc:	83 ec 0c             	sub    esp,0xc
c00059ff:	6a 01                	push   0x1
c0005a01:	52                   	push   edx
c0005a02:	50                   	push   eax
c0005a03:	55                   	push   ebp
c0005a04:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005a08:	e9 32 02 00 00       	jmp    c0005c3f <f_lseek+0x413>
c0005a0d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a11:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005a14:	74 16                	je     c0005a2c <f_lseek+0x200>
c0005a16:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005a1b:	76 0f                	jbe    c0005a2c <f_lseek+0x200>
c0005a1d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005a24:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005a2c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a2f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005a32:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005a35:	89 c7                	mov    edi,eax
c0005a37:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005a3b:	73 0d                	jae    c0005a4a <f_lseek+0x21e>
c0005a3d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005a41:	75 07                	jne    c0005a4a <f_lseek+0x21e>
c0005a43:	89 14 24             	mov    DWORD PTR [esp],edx
c0005a46:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005a4a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a4e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005a51:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005a54:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005a5b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005a62:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005a65:	75 09                	jne    c0005a70 <f_lseek+0x244>
c0005a67:	31 f6                	xor    esi,esi
c0005a69:	31 ff                	xor    edi,edi
c0005a6b:	e9 87 01 00 00       	jmp    c0005bf7 <f_lseek+0x3cb>
c0005a70:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005a74:	c1 e1 09             	shl    ecx,0x9
c0005a77:	89 d7                	mov    edi,edx
c0005a79:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005a7d:	09 c7                	or     edi,eax
c0005a7f:	74 6b                	je     c0005aec <f_lseek+0x2c0>
c0005a81:	83 c0 ff             	add    eax,0xffffffff
c0005a84:	89 cf                	mov    edi,ecx
c0005a86:	83 d2 ff             	adc    edx,0xffffffff
c0005a89:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a8d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005a90:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005a94:	83 c0 ff             	add    eax,0xffffffff
c0005a97:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005a9b:	83 d2 ff             	adc    edx,0xffffffff
c0005a9e:	31 ed                	xor    ebp,ebp
c0005aa0:	55                   	push   ebp
c0005aa1:	51                   	push   ecx
c0005aa2:	52                   	push   edx
c0005aa3:	50                   	push   eax
c0005aa4:	e8 03 94 01 00       	call   c001eeac <__udivdi3>
c0005aa9:	83 c4 10             	add    esp,0x10
c0005aac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab0:	89 d6                	mov    esi,edx
c0005ab2:	55                   	push   ebp
c0005ab3:	57                   	push   edi
c0005ab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005ab8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005abc:	e8 eb 93 01 00       	call   c001eeac <__udivdi3>
c0005ac1:	83 c4 10             	add    esp,0x10
c0005ac4:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005ac8:	19 d6                	sbb    esi,edx
c0005aca:	72 20                	jb     c0005aec <f_lseek+0x2c0>
c0005acc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005ad0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ad4:	f7 d9                	neg    ecx
c0005ad6:	23 4c 24 10          	and    ecx,DWORD PTR [esp+0x10]
c0005ada:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005add:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005ae0:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005ae3:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005ae7:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005aea:	eb 28                	jmp    c0005b14 <f_lseek+0x2e8>
c0005aec:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005aef:	85 c0                	test   eax,eax
c0005af1:	75 1e                	jne    c0005b11 <f_lseek+0x2e5>
c0005af3:	31 d2                	xor    edx,edx
c0005af5:	89 d8                	mov    eax,ebx
c0005af7:	e8 de d4 ff ff       	call   c0002fda <create_chain>
c0005afc:	83 f8 01             	cmp    eax,0x1
c0005aff:	0f 84 e3 fd ff ff    	je     c00058e8 <f_lseek+0xbc>
c0005b05:	83 f8 ff             	cmp    eax,0xffffffff
c0005b08:	0f 84 f0 fd ff ff    	je     c00058fe <f_lseek+0xd2>
c0005b0e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005b11:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b14:	85 c0                	test   eax,eax
c0005b16:	0f 84 4b ff ff ff    	je     c0005a67 <f_lseek+0x23b>
c0005b1c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0005b20:	31 ff                	xor    edi,edi
c0005b22:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005b25:	89 fd                	mov    ebp,edi
c0005b27:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005b2b:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005b2e:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005b31:	1b 6c 24 04          	sbb    ebp,DWORD PTR [esp+0x4]
c0005b35:	73 7d                	jae    c0005bb4 <f_lseek+0x388>
c0005b37:	29 34 24             	sub    DWORD PTR [esp],esi
c0005b3a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005b3e:	01 d6                	add    esi,edx
c0005b40:	11 cf                	adc    edi,ecx
c0005b42:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005b45:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005b48:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005b4b:	f6 c2 02             	test   dl,0x2
c0005b4e:	74 25                	je     c0005b75 <f_lseek+0x349>
c0005b50:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0005b53:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005b56:	19 f9                	sbb    ecx,edi
c0005b58:	73 0c                	jae    c0005b66 <f_lseek+0x33a>
c0005b5a:	83 ca 40             	or     edx,0x40
c0005b5d:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005b60:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005b63:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005b66:	89 c2                	mov    edx,eax
c0005b68:	89 d8                	mov    eax,ebx
c0005b6a:	e8 6b d4 ff ff       	call   c0002fda <create_chain>
c0005b6f:	85 c0                	test   eax,eax
c0005b71:	75 0b                	jne    c0005b7e <f_lseek+0x352>
c0005b73:	eb 30                	jmp    c0005ba5 <f_lseek+0x379>
c0005b75:	89 c2                	mov    edx,eax
c0005b77:	89 d8                	mov    eax,ebx
c0005b79:	e8 6e d1 ff ff       	call   c0002cec <get_fat>
c0005b7e:	83 f8 ff             	cmp    eax,0xffffffff
c0005b81:	0f 84 77 fd ff ff    	je     c00058fe <f_lseek+0xd2>
c0005b87:	83 f8 01             	cmp    eax,0x1
c0005b8a:	0f 86 58 fd ff ff    	jbe    c00058e8 <f_lseek+0xbc>
c0005b90:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005b94:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005b97:	0f 86 4b fd ff ff    	jbe    c00058e8 <f_lseek+0xbc>
c0005b9d:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ba0:	e9 77 ff ff ff       	jmp    c0005b1c <f_lseek+0x2f0>
c0005ba5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bac:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005bb4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005bb7:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005bbb:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005bbe:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005bc1:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005bc4:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005bca:	0f 84 97 fe ff ff    	je     c0005a67 <f_lseek+0x23b>
c0005bd0:	89 c2                	mov    edx,eax
c0005bd2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005bd6:	e8 51 c0 ff ff       	call   c0001c2c <clst2sect>
c0005bdb:	89 d7                	mov    edi,edx
c0005bdd:	09 c7                	or     edi,eax
c0005bdf:	0f 84 03 fd ff ff    	je     c00058e8 <f_lseek+0xbc>
c0005be5:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005be9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005bec:	0f ac fe 09          	shrd   esi,edi,0x9
c0005bf0:	c1 ef 09             	shr    edi,0x9
c0005bf3:	01 c6                	add    esi,eax
c0005bf5:	11 d7                	adc    edi,edx
c0005bf7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005bfa:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005bfd:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005c00:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c03:	19 d1                	sbb    ecx,edx
c0005c05:	73 0a                	jae    c0005c11 <f_lseek+0x3e5>
c0005c07:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005c0b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005c0e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005c11:	a9 ff 01 00 00       	test   eax,0x1ff
c0005c16:	74 6d                	je     c0005c85 <f_lseek+0x459>
c0005c18:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005c1b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005c1e:	39 fa                	cmp    edx,edi
c0005c20:	75 04                	jne    c0005c26 <f_lseek+0x3fa>
c0005c22:	39 f0                	cmp    eax,esi
c0005c24:	74 5f                	je     c0005c85 <f_lseek+0x459>
c0005c26:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c29:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c2d:	79 25                	jns    c0005c54 <f_lseek+0x428>
c0005c2f:	83 ec 0c             	sub    esp,0xc
c0005c32:	6a 01                	push   0x1
c0005c34:	52                   	push   edx
c0005c35:	50                   	push   eax
c0005c36:	55                   	push   ebp
c0005c37:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005c3b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005c3f:	50                   	push   eax
c0005c40:	e8 19 bd ff ff       	call   c000195e <disk_write>
c0005c45:	83 c4 20             	add    esp,0x20
c0005c48:	85 c0                	test   eax,eax
c0005c4a:	0f 85 ae fc ff ff    	jne    c00058fe <f_lseek+0xd2>
c0005c50:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005c54:	83 ec 0c             	sub    esp,0xc
c0005c57:	6a 01                	push   0x1
c0005c59:	57                   	push   edi
c0005c5a:	56                   	push   esi
c0005c5b:	55                   	push   ebp
c0005c5c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005c60:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005c64:	50                   	push   eax
c0005c65:	e8 de bc ff ff       	call   c0001948 <disk_read>
c0005c6a:	83 c4 20             	add    esp,0x20
c0005c6d:	85 c0                	test   eax,eax
c0005c6f:	0f 85 89 fc ff ff    	jne    c00058fe <f_lseek+0xd2>
c0005c75:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005c78:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005c7b:	eb 08                	jmp    c0005c85 <f_lseek+0x459>
c0005c7d:	c7 44 24 0c 11 00 00 00 	mov    DWORD PTR [esp+0xc],0x11
c0005c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c89:	83 c4 3c             	add    esp,0x3c
c0005c8c:	5b                   	pop    ebx
c0005c8d:	5e                   	pop    esi
c0005c8e:	5f                   	pop    edi
c0005c8f:	5d                   	pop    ebp
c0005c90:	c3                   	ret    

c0005c91 <f_opendir>:
c0005c91:	56                   	push   esi
c0005c92:	b8 09 00 00 00       	mov    eax,0x9
c0005c97:	53                   	push   ebx
c0005c98:	83 ec 24             	sub    esp,0x24
c0005c9b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005c9f:	85 db                	test   ebx,ebx
c0005ca1:	0f 84 e6 00 00 00    	je     c0005d8d <f_opendir+0xfc>
c0005ca7:	31 c9                	xor    ecx,ecx
c0005ca9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005cad:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005cb1:	e8 5f c7 ff ff       	call   c0002415 <mount_volume>
c0005cb6:	85 c0                	test   eax,eax
c0005cb8:	0f 85 c9 00 00 00    	jne    c0005d87 <f_opendir+0xf6>
c0005cbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005cc2:	83 ec 0c             	sub    esp,0xc
c0005cc5:	89 03                	mov    DWORD PTR [ebx],eax
c0005cc7:	68 60 04 00 00       	push   0x460
c0005ccc:	e8 a8 24 00 00       	call   c0008179 <ff_memalloc>
c0005cd1:	89 c6                	mov    esi,eax
c0005cd3:	83 c4 10             	add    esp,0x10
c0005cd6:	b8 11 00 00 00       	mov    eax,0x11
c0005cdb:	85 f6                	test   esi,esi
c0005cdd:	0f 84 aa 00 00 00    	je     c0005d8d <f_opendir+0xfc>
c0005ce3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ce7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ced:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005cf0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005cf3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005cf7:	89 d8                	mov    eax,ebx
c0005cf9:	e8 83 ee ff ff       	call   c0004b81 <follow_path>
c0005cfe:	85 c0                	test   eax,eax
c0005d00:	75 61                	jne    c0005d63 <f_opendir+0xd2>
c0005d02:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005d06:	78 46                	js     c0005d4e <f_opendir+0xbd>
c0005d08:	b8 05 00 00 00       	mov    eax,0x5
c0005d0d:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005d11:	74 50                	je     c0005d63 <f_opendir+0xd2>
c0005d13:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005d17:	8a 01                	mov    al,BYTE PTR [ecx]
c0005d19:	3c 04                	cmp    al,0x4
c0005d1b:	75 26                	jne    c0005d43 <f_opendir+0xb2>
c0005d1d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d20:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d23:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005d26:	30 d2                	xor    dl,dl
c0005d28:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005d2c:	09 c2                	or     edx,eax
c0005d2e:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005d31:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005d34:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005d37:	89 da                	mov    edx,ebx
c0005d39:	8d 41 10             	lea    eax,[ecx+0x10]
c0005d3c:	e8 06 ee ff ff       	call   c0004b47 <init_alloc_info.isra.2>
c0005d41:	eb 0b                	jmp    c0005d4e <f_opendir+0xbd>
c0005d43:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005d46:	e8 ab ed ff ff       	call   c0004af6 <ld_clust.isra.0>
c0005d4b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005d4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d52:	31 d2                	xor    edx,edx
c0005d54:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005d58:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005d5c:	89 d8                	mov    eax,ebx
c0005d5e:	e8 7f d1 ff ff       	call   c0002ee2 <dir_sdi>
c0005d63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005d67:	83 ec 0c             	sub    esp,0xc
c0005d6a:	56                   	push   esi
c0005d6b:	e8 1f 24 00 00       	call   c000818f <ff_memfree>
c0005d70:	83 c4 10             	add    esp,0x10
c0005d73:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d77:	83 f8 04             	cmp    eax,0x4
c0005d7a:	74 06                	je     c0005d82 <f_opendir+0xf1>
c0005d7c:	85 c0                	test   eax,eax
c0005d7e:	74 0d                	je     c0005d8d <f_opendir+0xfc>
c0005d80:	eb 05                	jmp    c0005d87 <f_opendir+0xf6>
c0005d82:	b8 05 00 00 00       	mov    eax,0x5
c0005d87:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005d8d:	83 c4 24             	add    esp,0x24
c0005d90:	5b                   	pop    ebx
c0005d91:	5e                   	pop    esi
c0005d92:	c3                   	ret    

c0005d93 <f_closedir>:
c0005d93:	53                   	push   ebx
c0005d94:	83 ec 18             	sub    esp,0x18
c0005d97:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005d9b:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005d9f:	89 d8                	mov    eax,ebx
c0005da1:	e8 e9 c2 ff ff       	call   c000208f <validate>
c0005da6:	85 c0                	test   eax,eax
c0005da8:	75 06                	jne    c0005db0 <f_closedir+0x1d>
c0005daa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005db0:	83 c4 18             	add    esp,0x18
c0005db3:	5b                   	pop    ebx
c0005db4:	c3                   	ret    

c0005db5 <f_readdir>:
c0005db5:	57                   	push   edi
c0005db6:	56                   	push   esi
c0005db7:	53                   	push   ebx
c0005db8:	83 ec 20             	sub    esp,0x20
c0005dbb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005dbf:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005dc3:	89 d8                	mov    eax,ebx
c0005dc5:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005dc9:	e8 c1 c2 ff ff       	call   c000208f <validate>
c0005dce:	85 c0                	test   eax,eax
c0005dd0:	75 77                	jne    c0005e49 <f_readdir+0x94>
c0005dd2:	85 ff                	test   edi,edi
c0005dd4:	75 0b                	jne    c0005de1 <f_readdir+0x2c>
c0005dd6:	31 d2                	xor    edx,edx
c0005dd8:	89 d8                	mov    eax,ebx
c0005dda:	e8 03 d1 ff ff       	call   c0002ee2 <dir_sdi>
c0005ddf:	eb 68                	jmp    c0005e49 <f_readdir+0x94>
c0005de1:	83 ec 0c             	sub    esp,0xc
c0005de4:	68 60 04 00 00       	push   0x460
c0005de9:	e8 8b 23 00 00       	call   c0008179 <ff_memalloc>
c0005dee:	89 c6                	mov    esi,eax
c0005df0:	83 c4 10             	add    esp,0x10
c0005df3:	b8 11 00 00 00       	mov    eax,0x11
c0005df8:	85 f6                	test   esi,esi
c0005dfa:	74 4d                	je     c0005e49 <f_readdir+0x94>
c0005dfc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e00:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e06:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e09:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e0c:	31 d2                	xor    edx,edx
c0005e0e:	89 d8                	mov    eax,ebx
c0005e10:	e8 df d8 ff ff       	call   c00036f4 <dir_read>
c0005e15:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005e1a:	75 19                	jne    c0005e35 <f_readdir+0x80>
c0005e1c:	89 fa                	mov    edx,edi
c0005e1e:	89 d8                	mov    eax,ebx
c0005e20:	e8 d0 ea ff ff       	call   c00048f5 <get_fileinfo>
c0005e25:	31 d2                	xor    edx,edx
c0005e27:	89 d8                	mov    eax,ebx
c0005e29:	e8 0e d6 ff ff       	call   c000343c <dir_next>
c0005e2e:	83 f8 04             	cmp    eax,0x4
c0005e31:	75 02                	jne    c0005e35 <f_readdir+0x80>
c0005e33:	31 c0                	xor    eax,eax
c0005e35:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e39:	83 ec 0c             	sub    esp,0xc
c0005e3c:	56                   	push   esi
c0005e3d:	e8 4d 23 00 00       	call   c000818f <ff_memfree>
c0005e42:	83 c4 10             	add    esp,0x10
c0005e45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e49:	83 c4 20             	add    esp,0x20
c0005e4c:	5b                   	pop    ebx
c0005e4d:	5e                   	pop    esi
c0005e4e:	5f                   	pop    edi
c0005e4f:	c3                   	ret    

c0005e50 <f_stat>:
c0005e50:	57                   	push   edi
c0005e51:	31 c9                	xor    ecx,ecx
c0005e53:	56                   	push   esi
c0005e54:	53                   	push   ebx
c0005e55:	83 ec 50             	sub    esp,0x50
c0005e58:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005e5c:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005e60:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005e64:	e8 ac c5 ff ff       	call   c0002415 <mount_volume>
c0005e69:	89 c3                	mov    ebx,eax
c0005e6b:	85 c0                	test   eax,eax
c0005e6d:	75 67                	jne    c0005ed6 <f_stat+0x86>
c0005e6f:	83 ec 0c             	sub    esp,0xc
c0005e72:	bb 11 00 00 00       	mov    ebx,0x11
c0005e77:	68 60 04 00 00       	push   0x460
c0005e7c:	e8 f8 22 00 00       	call   c0008179 <ff_memalloc>
c0005e81:	83 c4 10             	add    esp,0x10
c0005e84:	89 c6                	mov    esi,eax
c0005e86:	85 c0                	test   eax,eax
c0005e88:	74 4c                	je     c0005ed6 <f_stat+0x86>
c0005e8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005e8e:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e94:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e97:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e9a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005e9e:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005ea2:	e8 da ec ff ff       	call   c0004b81 <follow_path>
c0005ea7:	89 c3                	mov    ebx,eax
c0005ea9:	85 c0                	test   eax,eax
c0005eab:	75 1d                	jne    c0005eca <f_stat+0x7a>
c0005ead:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005eb2:	78 11                	js     c0005ec5 <f_stat+0x75>
c0005eb4:	85 ff                	test   edi,edi
c0005eb6:	74 12                	je     c0005eca <f_stat+0x7a>
c0005eb8:	89 fa                	mov    edx,edi
c0005eba:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005ebe:	e8 32 ea ff ff       	call   c00048f5 <get_fileinfo>
c0005ec3:	eb 05                	jmp    c0005eca <f_stat+0x7a>
c0005ec5:	bb 06 00 00 00       	mov    ebx,0x6
c0005eca:	83 ec 0c             	sub    esp,0xc
c0005ecd:	56                   	push   esi
c0005ece:	e8 bc 22 00 00       	call   c000818f <ff_memfree>
c0005ed3:	83 c4 10             	add    esp,0x10
c0005ed6:	83 c4 50             	add    esp,0x50
c0005ed9:	89 d8                	mov    eax,ebx
c0005edb:	5b                   	pop    ebx
c0005edc:	5e                   	pop    esi
c0005edd:	5f                   	pop    edi
c0005ede:	c3                   	ret    

c0005edf <f_getfree>:
c0005edf:	55                   	push   ebp
c0005ee0:	31 c9                	xor    ecx,ecx
c0005ee2:	57                   	push   edi
c0005ee3:	56                   	push   esi
c0005ee4:	53                   	push   ebx
c0005ee5:	83 ec 5c             	sub    esp,0x5c
c0005ee8:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005eec:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005ef0:	e8 20 c5 ff ff       	call   c0002415 <mount_volume>
c0005ef5:	89 c5                	mov    ebp,eax
c0005ef7:	85 c0                	test   eax,eax
c0005ef9:	0f 85 be 01 00 00    	jne    c00060bd <f_getfree+0x1de>
c0005eff:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005f03:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f07:	89 02                	mov    DWORD PTR [edx],eax
c0005f09:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0005f0c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005f0f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0005f13:	8d 73 fe             	lea    esi,[ebx-0x2]
c0005f16:	39 f2                	cmp    edx,esi
c0005f18:	77 0b                	ja     c0005f25 <f_getfree+0x46>
c0005f1a:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005f1e:	89 10                	mov    DWORD PTR [eax],edx
c0005f20:	e9 98 01 00 00       	jmp    c00060bd <f_getfree+0x1de>
c0005f25:	8a 10                	mov    dl,BYTE PTR [eax]
c0005f27:	80 fa 01             	cmp    dl,0x1
c0005f2a:	75 3a                	jne    c0005f66 <f_getfree+0x87>
c0005f2c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005f30:	be 02 00 00 00       	mov    esi,0x2
c0005f35:	31 db                	xor    ebx,ebx
c0005f37:	89 f2                	mov    edx,esi
c0005f39:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005f3d:	e8 aa cd ff ff       	call   c0002cec <get_fat>
c0005f42:	83 f8 ff             	cmp    eax,0xffffffff
c0005f45:	0f 84 51 01 00 00    	je     c000609c <f_getfree+0x1bd>
c0005f4b:	83 f8 01             	cmp    eax,0x1
c0005f4e:	0f 84 4f 01 00 00    	je     c00060a3 <f_getfree+0x1c4>
c0005f54:	83 d3 00             	adc    ebx,0x0
c0005f57:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f5b:	46                   	inc    esi
c0005f5c:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0005f5f:	77 d6                	ja     c0005f37 <f_getfree+0x58>
c0005f61:	e9 46 01 00 00       	jmp    c00060ac <f_getfree+0x1cd>
c0005f66:	80 fa 04             	cmp    dl,0x4
c0005f69:	0f 85 94 00 00 00    	jne    c0006003 <f_getfree+0x124>
c0005f6f:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0005f72:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0005f75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005f79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f7d:	31 ff                	xor    edi,edi
c0005f7f:	31 db                	xor    ebx,ebx
c0005f81:	85 ff                	test   edi,edi
c0005f83:	75 3f                	jne    c0005fc4 <f_getfree+0xe5>
c0005f85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005f89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f8d:	83 c0 01             	add    eax,0x1
c0005f90:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005f94:	83 d2 00             	adc    edx,0x0
c0005f97:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005f9b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005f9f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fa3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005fa7:	e8 be c1 ff ff       	call   c000216a <move_window>
c0005fac:	85 c0                	test   eax,eax
c0005fae:	0f 85 f6 00 00 00    	jne    c00060aa <f_getfree+0x1cb>
c0005fb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005fb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005fbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005fc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fc8:	8a 44 38 54          	mov    al,BYTE PTR [eax+edi*1+0x54]
c0005fcc:	88 c2                	mov    dl,al
c0005fce:	b8 08 00 00 00       	mov    eax,0x8
c0005fd3:	29 f0                	sub    eax,esi
c0005fd5:	89 c1                	mov    ecx,eax
c0005fd7:	01 f1                	add    ecx,esi
c0005fd9:	74 18                	je     c0005ff3 <f_getfree+0x114>
c0005fdb:	85 f6                	test   esi,esi
c0005fdd:	74 14                	je     c0005ff3 <f_getfree+0x114>
c0005fdf:	88 d1                	mov    cl,dl
c0005fe1:	83 e1 01             	and    ecx,0x1
c0005fe4:	80 f9 01             	cmp    cl,0x1
c0005fe7:	88 d1                	mov    cl,dl
c0005fe9:	83 d3 00             	adc    ebx,0x0
c0005fec:	4e                   	dec    esi
c0005fed:	d0 e9                	shr    cl,1
c0005fef:	88 ca                	mov    dl,cl
c0005ff1:	eb e2                	jmp    c0005fd5 <f_getfree+0xf6>
c0005ff3:	47                   	inc    edi
c0005ff4:	81 e7 ff 01 00 00    	and    edi,0x1ff
c0005ffa:	85 f6                	test   esi,esi
c0005ffc:	75 83                	jne    c0005f81 <f_getfree+0xa2>
c0005ffe:	e9 a9 00 00 00       	jmp    c00060ac <f_getfree+0x1cd>
c0006003:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006006:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006009:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0006011:	31 db                	xor    ebx,ebx
c0006013:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006018:	75 1b                	jne    c0006035 <f_getfree+0x156>
c000601a:	89 d6                	mov    esi,edx
c000601c:	89 cf                	mov    edi,ecx
c000601e:	83 c6 01             	add    esi,0x1
c0006021:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006025:	83 d7 00             	adc    edi,0x0
c0006028:	e8 3d c1 ff ff       	call   c000216a <move_window>
c000602d:	85 c0                	test   eax,eax
c000602f:	75 79                	jne    c00060aa <f_getfree+0x1cb>
c0006031:	89 f2                	mov    edx,esi
c0006033:	89 f9                	mov    ecx,edi
c0006035:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0006039:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000603d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0006041:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006045:	8d 44 38 54          	lea    eax,[eax+edi*1+0x54]
c0006049:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000604d:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006050:	75 15                	jne    c0006067 <f_getfree+0x188>
c0006052:	e8 3c b9 ff ff       	call   c0001993 <ld_word>
c0006057:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000605b:	66 83 f8 01          	cmp    ax,0x1
c000605f:	83 d3 00             	adc    ebx,0x0
c0006062:	83 c6 02             	add    esi,0x2
c0006065:	eb 17                	jmp    c000607e <f_getfree+0x19f>
c0006067:	e8 34 b9 ff ff       	call   c00019a0 <ld_dword>
c000606c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0006070:	25 ff ff ff 0f       	and    eax,0xfffffff
c0006075:	83 f8 01             	cmp    eax,0x1
c0006078:	83 d3 00             	adc    ebx,0x0
c000607b:	83 c6 04             	add    esi,0x4
c000607e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0006084:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006088:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000608c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006090:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0006094:	0f 85 79 ff ff ff    	jne    c0006013 <f_getfree+0x134>
c000609a:	eb 10                	jmp    c00060ac <f_getfree+0x1cd>
c000609c:	bd 01 00 00 00       	mov    ebp,0x1
c00060a1:	eb 09                	jmp    c00060ac <f_getfree+0x1cd>
c00060a3:	bd 02 00 00 00       	mov    ebp,0x2
c00060a8:	eb 02                	jmp    c00060ac <f_getfree+0x1cd>
c00060aa:	89 c5                	mov    ebp,eax
c00060ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00060b0:	89 18                	mov    DWORD PTR [eax],ebx
c00060b2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060b6:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00060ba:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00060bd:	83 c4 5c             	add    esp,0x5c
c00060c0:	89 e8                	mov    eax,ebp
c00060c2:	5b                   	pop    ebx
c00060c3:	5e                   	pop    esi
c00060c4:	5f                   	pop    edi
c00060c5:	5d                   	pop    ebp
c00060c6:	c3                   	ret    

c00060c7 <f_truncate>:
c00060c7:	56                   	push   esi
c00060c8:	53                   	push   ebx
c00060c9:	83 ec 14             	sub    esp,0x14
c00060cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d4:	89 d8                	mov    eax,ebx
c00060d6:	e8 b4 bf ff ff       	call   c000208f <validate>
c00060db:	89 c6                	mov    esi,eax
c00060dd:	85 c0                	test   eax,eax
c00060df:	0f 85 d2 00 00 00    	jne    c00061b7 <f_truncate+0xf0>
c00060e5:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00060e9:	85 f6                	test   esi,esi
c00060eb:	0f 85 c6 00 00 00    	jne    c00061b7 <f_truncate+0xf0>
c00060f1:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00060f5:	0f 84 b7 00 00 00    	je     c00061b2 <f_truncate+0xeb>
c00060fb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00060fe:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006101:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006104:	89 d1                	mov    ecx,edx
c0006106:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006109:	0f 83 a8 00 00 00    	jae    c00061b7 <f_truncate+0xf0>
c000610f:	09 c2                	or     edx,eax
c0006111:	75 15                	jne    c0006128 <f_truncate+0x61>
c0006113:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006116:	31 c9                	xor    ecx,ecx
c0006118:	89 d8                	mov    eax,ebx
c000611a:	e8 bc d0 ff ff       	call   c00031db <remove_chain>
c000611f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006126:	eb 35                	jmp    c000615d <f_truncate+0x96>
c0006128:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000612b:	89 d8                	mov    eax,ebx
c000612d:	e8 ba cb ff ff       	call   c0002cec <get_fat>
c0006132:	89 c2                	mov    edx,eax
c0006134:	b8 01 00 00 00       	mov    eax,0x1
c0006139:	83 fa ff             	cmp    edx,0xffffffff
c000613c:	74 1f                	je     c000615d <f_truncate+0x96>
c000613e:	b8 02 00 00 00       	mov    eax,0x2
c0006143:	83 fa 01             	cmp    edx,0x1
c0006146:	74 15                	je     c000615d <f_truncate+0x96>
c0006148:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000614c:	31 c0                	xor    eax,eax
c000614e:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006151:	76 0a                	jbe    c000615d <f_truncate+0x96>
c0006153:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e d0 ff ff       	call   c00031db <remove_chain>
c000615d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006160:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0006163:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006166:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006169:	83 ca 40             	or     edx,0x40
c000616c:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000616f:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006172:	85 c0                	test   eax,eax
c0006174:	75 35                	jne    c00061ab <f_truncate+0xe4>
c0006176:	84 d2                	test   dl,dl
c0006178:	79 3d                	jns    c00061b7 <f_truncate+0xf0>
c000617a:	83 ec 0c             	sub    esp,0xc
c000617d:	8d 43 50             	lea    eax,[ebx+0x50]
c0006180:	6a 01                	push   0x1
c0006182:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006185:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006188:	50                   	push   eax
c0006189:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000618d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0006191:	50                   	push   eax
c0006192:	e8 c7 b7 ff ff       	call   c000195e <disk_write>
c0006197:	83 c4 20             	add    esp,0x20
c000619a:	85 c0                	test   eax,eax
c000619c:	75 08                	jne    c00061a6 <f_truncate+0xdf>
c000619e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00061a2:	31 f6                	xor    esi,esi
c00061a4:	eb 11                	jmp    c00061b7 <f_truncate+0xf0>
c00061a6:	b8 01 00 00 00       	mov    eax,0x1
c00061ab:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00061ae:	89 c6                	mov    esi,eax
c00061b0:	eb 05                	jmp    c00061b7 <f_truncate+0xf0>
c00061b2:	be 07 00 00 00       	mov    esi,0x7
c00061b7:	83 c4 14             	add    esp,0x14
c00061ba:	89 f0                	mov    eax,esi
c00061bc:	5b                   	pop    ebx
c00061bd:	5e                   	pop    esi
c00061be:	c3                   	ret    

c00061bf <f_unlink>:
c00061bf:	56                   	push   esi
c00061c0:	b9 02 00 00 00       	mov    ecx,0x2
c00061c5:	53                   	push   ebx
c00061c6:	81 ec e4 00 00 00    	sub    esp,0xe4
c00061cc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00061d0:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00061d7:	e8 39 c2 ff ff       	call   c0002415 <mount_volume>
c00061dc:	85 c0                	test   eax,eax
c00061de:	0f 85 53 01 00 00    	jne    c0006337 <f_unlink+0x178>
c00061e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00061e8:	83 ec 0c             	sub    esp,0xc
c00061eb:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00061ef:	68 60 04 00 00       	push   0x460
c00061f4:	e8 80 1f 00 00       	call   c0008179 <ff_memalloc>
c00061f9:	89 c3                	mov    ebx,eax
c00061fb:	83 c4 10             	add    esp,0x10
c00061fe:	b8 11 00 00 00       	mov    eax,0x11
c0006203:	85 db                	test   ebx,ebx
c0006205:	0f 84 2c 01 00 00    	je     c0006337 <f_unlink+0x178>
c000620b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000620f:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006215:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006218:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000621b:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c0006222:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006226:	e8 56 e9 ff ff       	call   c0004b81 <follow_path>
c000622b:	85 c0                	test   eax,eax
c000622d:	0f 85 f0 00 00 00    	jne    c0006323 <f_unlink+0x164>
c0006233:	b8 06 00 00 00       	mov    eax,0x6
c0006238:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006240:	0f 88 dd 00 00 00    	js     c0006323 <f_unlink+0x164>
c0006246:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c000624b:	74 0a                	je     c0006257 <f_unlink+0x98>
c000624d:	b8 07 00 00 00       	mov    eax,0x7
c0006252:	e9 cc 00 00 00       	jmp    c0006323 <f_unlink+0x164>
c0006257:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000625b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000625f:	8a 02                	mov    al,BYTE PTR [edx]
c0006261:	3c 04                	cmp    al,0x4
c0006263:	75 12                	jne    c0006277 <f_unlink+0xb8>
c0006265:	8d 42 10             	lea    eax,[edx+0x10]
c0006268:	8d 54 24 20          	lea    edx,[esp+0x20]
c000626c:	e8 d6 e8 ff ff       	call   c0004b47 <init_alloc_info.isra.2>
c0006271:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006275:	eb 0e                	jmp    c0006285 <f_unlink+0xc6>
c0006277:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000627e:	e8 73 e8 ff ff       	call   c0004af6 <ld_clust.isra.0>
c0006283:	89 c6                	mov    esi,eax
c0006285:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c000628a:	75 20                	jne    c00062ac <f_unlink+0xed>
c000628c:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006290:	e8 d6 d6 ff ff       	call   c000396b <dir_remove>
c0006295:	85 c0                	test   eax,eax
c0006297:	75 7d                	jne    c0006316 <f_unlink+0x157>
c0006299:	85 f6                	test   esi,esi
c000629b:	74 79                	je     c0006316 <f_unlink+0x157>
c000629d:	31 c9                	xor    ecx,ecx
c000629f:	89 f2                	mov    edx,esi
c00062a1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00062a5:	e8 31 cf ff ff       	call   c00031db <remove_chain>
c00062aa:	eb 6a                	jmp    c0006316 <f_unlink+0x157>
c00062ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062b0:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00062b7:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00062be:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00062c1:	75 21                	jne    c00062e4 <f_unlink+0x125>
c00062c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00062c7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00062cb:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00062d2:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00062d6:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00062dd:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00062e4:	31 d2                	xor    edx,edx
c00062e6:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00062ed:	e8 f0 cb ff ff       	call   c0002ee2 <dir_sdi>
c00062f2:	85 c0                	test   eax,eax
c00062f4:	75 2d                	jne    c0006323 <f_unlink+0x164>
c00062f6:	31 d2                	xor    edx,edx
c00062f8:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00062ff:	e8 f0 d3 ff ff       	call   c00036f4 <dir_read>
c0006304:	85 c0                	test   eax,eax
c0006306:	0f 84 41 ff ff ff    	je     c000624d <f_unlink+0x8e>
c000630c:	83 f8 04             	cmp    eax,0x4
c000630f:	75 12                	jne    c0006323 <f_unlink+0x164>
c0006311:	e9 76 ff ff ff       	jmp    c000628c <f_unlink+0xcd>
c0006316:	85 c0                	test   eax,eax
c0006318:	75 09                	jne    c0006323 <f_unlink+0x164>
c000631a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000631e:	e8 55 df ff ff       	call   c0004278 <sync_fs>
c0006323:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006327:	83 ec 0c             	sub    esp,0xc
c000632a:	53                   	push   ebx
c000632b:	e8 5f 1e 00 00       	call   c000818f <ff_memfree>
c0006330:	83 c4 10             	add    esp,0x10
c0006333:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006337:	81 c4 e4 00 00 00    	add    esp,0xe4
c000633d:	5b                   	pop    ebx
c000633e:	5e                   	pop    esi
c000633f:	c3                   	ret    

c0006340 <f_mkdir>:
c0006340:	57                   	push   edi
c0006341:	b9 02 00 00 00       	mov    ecx,0x2
c0006346:	56                   	push   esi
c0006347:	53                   	push   ebx
c0006348:	83 c4 80             	add    esp,0xffffff80
c000634b:	8d 54 24 08          	lea    edx,[esp+0x8]
c000634f:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006356:	e8 ba c0 ff ff       	call   c0002415 <mount_volume>
c000635b:	89 c3                	mov    ebx,eax
c000635d:	85 c0                	test   eax,eax
c000635f:	0f 85 fe 01 00 00    	jne    c0006563 <f_mkdir+0x223>
c0006365:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006369:	83 ec 0c             	sub    esp,0xc
c000636c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0006370:	bb 11 00 00 00       	mov    ebx,0x11
c0006375:	68 60 04 00 00       	push   0x460
c000637a:	e8 fa 1d 00 00       	call   c0008179 <ff_memalloc>
c000637f:	83 c4 10             	add    esp,0x10
c0006382:	89 c7                	mov    edi,eax
c0006384:	85 c0                	test   eax,eax
c0006386:	0f 84 d7 01 00 00    	je     c0006563 <f_mkdir+0x223>
c000638c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006390:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006396:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006399:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c000639c:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00063a3:	8d 44 24 34          	lea    eax,[esp+0x34]
c00063a7:	e8 d5 e7 ff ff       	call   c0004b81 <follow_path>
c00063ac:	89 c3                	mov    ebx,eax
c00063ae:	85 c0                	test   eax,eax
c00063b0:	74 3e                	je     c00063f0 <f_mkdir+0xb0>
c00063b2:	83 f8 04             	cmp    eax,0x4
c00063b5:	75 3e                	jne    c00063f5 <f_mkdir+0xb5>
c00063b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063bb:	31 d2                	xor    edx,edx
c00063bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00063c5:	e8 10 cc ff ff       	call   c0002fda <create_chain>
c00063ca:	89 c6                	mov    esi,eax
c00063cc:	85 c0                	test   eax,eax
c00063ce:	74 0c                	je     c00063dc <f_mkdir+0x9c>
c00063d0:	bb 02 00 00 00       	mov    ebx,0x2
c00063d5:	83 f8 01             	cmp    eax,0x1
c00063d8:	74 07                	je     c00063e1 <f_mkdir+0xa1>
c00063da:	eb 2a                	jmp    c0006406 <f_mkdir+0xc6>
c00063dc:	bb 07 00 00 00       	mov    ebx,0x7
c00063e1:	31 c9                	xor    ecx,ecx
c00063e3:	89 f2                	mov    edx,esi
c00063e5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00063e9:	e8 ed cd ff ff       	call   c00031db <remove_chain>
c00063ee:	eb 05                	jmp    c00063f5 <f_mkdir+0xb5>
c00063f0:	bb 08 00 00 00       	mov    ebx,0x8
c00063f5:	83 ec 0c             	sub    esp,0xc
c00063f8:	57                   	push   edi
c00063f9:	e8 91 1d 00 00       	call   c000818f <ff_memfree>
c00063fe:	83 c4 10             	add    esp,0x10
c0006401:	e9 5d 01 00 00       	jmp    c0006563 <f_mkdir+0x223>
c0006406:	bb 01 00 00 00       	mov    ebx,0x1
c000640b:	83 f8 ff             	cmp    eax,0xffffffff
c000640e:	74 d1                	je     c00063e1 <f_mkdir+0xa1>
c0006410:	89 f2                	mov    edx,esi
c0006412:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006416:	e8 08 cf ff ff       	call   c0003323 <dir_clear>
c000641b:	89 c3                	mov    ebx,eax
c000641d:	85 c0                	test   eax,eax
c000641f:	75 c0                	jne    c00063e1 <f_mkdir+0xa1>
c0006421:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006425:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006428:	74 69                	je     c0006493 <f_mkdir+0x153>
c000642a:	b9 0b 00 00 00       	mov    ecx,0xb
c000642f:	83 c0 54             	add    eax,0x54
c0006432:	ba 20 00 00 00       	mov    edx,0x20
c0006437:	e8 eb b5 ff ff       	call   c0001a27 <mem_set>
c000643c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006440:	83 c0 6a             	add    eax,0x6a
c0006443:	c6 40 ea 2e          	mov    BYTE PTR [eax-0x16],0x2e
c0006447:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c000644b:	ba 00 00 21 50       	mov    edx,0x50210000
c0006450:	e8 b4 b5 ff ff       	call   c0001a09 <st_dword>
c0006455:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006459:	89 f1                	mov    ecx,esi
c000645b:	8d 50 54             	lea    edx,[eax+0x54]
c000645e:	e8 bc e6 ff ff       	call   c0004b1f <st_clust.isra.1>
c0006463:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006467:	b9 20 00 00 00       	mov    ecx,0x20
c000646c:	8d 50 54             	lea    edx,[eax+0x54]
c000646f:	83 c0 74             	add    eax,0x74
c0006472:	e8 9b b5 ff ff       	call   c0001a12 <mem_cpy>
c0006477:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000647b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000647f:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006483:	8d 50 74             	lea    edx,[eax+0x74]
c0006486:	e8 94 e6 ff ff       	call   c0004b1f <st_clust.isra.1>
c000648b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000648f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006493:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006497:	e8 59 db ff ff       	call   c0003ff5 <dir_register>
c000649c:	89 c3                	mov    ebx,eax
c000649e:	85 c0                	test   eax,eax
c00064a0:	0f 85 3b ff ff ff    	jne    c00063e1 <f_mkdir+0xa1>
c00064a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064aa:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064ad:	75 74                	jne    c0006523 <f_mkdir+0x1e3>
c00064af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064b2:	ba 00 00 21 50       	mov    edx,0x50210000
c00064b7:	83 c0 0c             	add    eax,0xc
c00064ba:	e8 4a b5 ff ff       	call   c0001a09 <st_dword>
c00064bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064c6:	89 f2                	mov    edx,esi
c00064c8:	83 c0 34             	add    eax,0x34
c00064cb:	e8 39 b5 ff ff       	call   c0001a09 <st_dword>
c00064d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d4:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00064d8:	c1 e2 09             	shl    edx,0x9
c00064db:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064de:	83 c0 38             	add    eax,0x38
c00064e1:	e8 23 b5 ff ff       	call   c0001a09 <st_dword>
c00064e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064ea:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00064ee:	c1 e2 09             	shl    edx,0x9
c00064f1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064f4:	83 c0 28             	add    eax,0x28
c00064f7:	e8 0d b5 ff ff       	call   c0001a09 <st_dword>
c00064fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006500:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006503:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006507:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000650a:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000650e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006512:	e8 cf d3 ff ff       	call   c00038e6 <store_xdir>
c0006517:	89 c3                	mov    ebx,eax
c0006519:	85 c0                	test   eax,eax
c000651b:	0f 85 d4 fe ff ff    	jne    c00063f5 <f_mkdir+0xb5>
c0006521:	eb 30                	jmp    c0006553 <f_mkdir+0x213>
c0006523:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006527:	ba 00 00 21 50       	mov    edx,0x50210000
c000652c:	83 c0 16             	add    eax,0x16
c000652f:	e8 d5 b4 ff ff       	call   c0001a09 <st_dword>
c0006534:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006538:	89 f1                	mov    ecx,esi
c000653a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000653e:	e8 dc e5 ff ff       	call   c0004b1f <st_clust.isra.1>
c0006543:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006547:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c000654b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006553:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006557:	e8 1c dd ff ff       	call   c0004278 <sync_fs>
c000655c:	89 c3                	mov    ebx,eax
c000655e:	e9 92 fe ff ff       	jmp    c00063f5 <f_mkdir+0xb5>
c0006563:	83 ec 80             	sub    esp,0xffffff80
c0006566:	89 d8                	mov    eax,ebx
c0006568:	5b                   	pop    ebx
c0006569:	5e                   	pop    esi
c000656a:	5f                   	pop    edi
c000656b:	c3                   	ret    

c000656c <f_rename>:
c000656c:	55                   	push   ebp
c000656d:	57                   	push   edi
c000656e:	56                   	push   esi
c000656f:	53                   	push   ebx
c0006570:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006576:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000657d:	e8 f3 b9 ff ff       	call   c0001f75 <get_ldnumber>
c0006582:	b9 02 00 00 00       	mov    ecx,0x2
c0006587:	8d 54 24 14          	lea    edx,[esp+0x14]
c000658b:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006592:	e8 7e be ff ff       	call   c0002415 <mount_volume>
c0006597:	85 c0                	test   eax,eax
c0006599:	0f 85 b5 02 00 00    	jne    c0006854 <f_rename+0x2e8>
c000659f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00065aa:	68 60 04 00 00       	push   0x460
c00065af:	e8 c5 1b 00 00       	call   c0008179 <ff_memalloc>
c00065b4:	89 c3                	mov    ebx,eax
c00065b6:	83 c4 10             	add    esp,0x10
c00065b9:	b8 11 00 00 00       	mov    eax,0x11
c00065be:	85 db                	test   ebx,ebx
c00065c0:	0f 84 8e 02 00 00    	je     c0006854 <f_rename+0x2e8>
c00065c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065ca:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00065d0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00065d3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00065d6:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00065dd:	8d 44 24 58          	lea    eax,[esp+0x58]
c00065e1:	e8 9b e5 ff ff       	call   c0004b81 <follow_path>
c00065e6:	85 c0                	test   eax,eax
c00065e8:	0f 85 52 02 00 00    	jne    c0006840 <f_rename+0x2d4>
c00065ee:	b8 06 00 00 00       	mov    eax,0x6
c00065f3:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00065fb:	0f 85 3f 02 00 00    	jne    c0006840 <f_rename+0x2d4>
c0006601:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006605:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006608:	0f 85 05 01 00 00    	jne    c0006713 <f_rename+0x1a7>
c000660e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006611:	b9 40 00 00 00       	mov    ecx,0x40
c0006616:	8d 44 24 18          	lea    eax,[esp+0x18]
c000661a:	e8 f3 b3 ff ff       	call   c0001a12 <mem_cpy>
c000661f:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006624:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006628:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000662f:	e8 de b3 ff ff       	call   c0001a12 <mem_cpy>
c0006634:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000663b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006642:	e8 3a e5 ff ff       	call   c0004b81 <follow_path>
c0006647:	85 c0                	test   eax,eax
c0006649:	75 29                	jne    c0006674 <f_rename+0x108>
c000664b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000664f:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006656:	74 0a                	je     c0006662 <f_rename+0xf6>
c0006658:	b8 08 00 00 00       	mov    eax,0x8
c000665d:	e9 de 01 00 00       	jmp    c0006840 <f_rename+0x2d4>
c0006662:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006669:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006670:	75 e6                	jne    c0006658 <f_rename+0xec>
c0006672:	eb 09                	jmp    c000667d <f_rename+0x111>
c0006674:	83 f8 04             	cmp    eax,0x4
c0006677:	0f 85 c3 01 00 00    	jne    c0006840 <f_rename+0x2d4>
c000667d:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006684:	e8 6c d9 ff ff       	call   c0003ff5 <dir_register>
c0006689:	85 c0                	test   eax,eax
c000668b:	0f 85 af 01 00 00    	jne    c0006840 <f_rename+0x2d4>
c0006691:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006695:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006698:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000669b:	89 c5                	mov    ebp,eax
c000669d:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00066a0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00066a4:	8d 46 24             	lea    eax,[esi+0x24]
c00066a7:	e8 e7 b2 ff ff       	call   c0001993 <ld_word>
c00066ac:	b9 40 00 00 00       	mov    ecx,0x40
c00066b1:	89 c7                	mov    edi,eax
c00066b3:	8d 54 24 18          	lea    edx,[esp+0x18]
c00066b7:	89 f0                	mov    eax,esi
c00066b9:	e8 54 b3 ff ff       	call   c0001a12 <mem_cpy>
c00066be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066c2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066c5:	89 e9                	mov    ecx,ebp
c00066c7:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00066ca:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00066ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066d2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066d5:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00066d8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00066db:	83 c0 24             	add    eax,0x24
c00066de:	0f b7 d7             	movzx  edx,di
c00066e1:	e8 1f b3 ff ff       	call   c0001a05 <st_word>
c00066e6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066ea:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066ed:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00066f0:	a8 10                	test   al,0x10
c00066f2:	75 06                	jne    c00066fa <f_rename+0x18e>
c00066f4:	83 c8 20             	or     eax,0x20
c00066f7:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00066fa:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006701:	e8 e0 d1 ff ff       	call   c00038e6 <store_xdir>
c0006706:	85 c0                	test   eax,eax
c0006708:	0f 84 1c 01 00 00    	je     c000682a <f_rename+0x2be>
c000670e:	e9 2d 01 00 00       	jmp    c0006840 <f_rename+0x2d4>
c0006713:	b9 20 00 00 00       	mov    ecx,0x20
c0006718:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000671f:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006723:	e8 ea b2 ff ff       	call   c0001a12 <mem_cpy>
c0006728:	b9 4c 00 00 00       	mov    ecx,0x4c
c000672d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006731:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006738:	e8 d5 b2 ff ff       	call   c0001a12 <mem_cpy>
c000673d:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006744:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000674b:	e8 31 e4 ff ff       	call   c0004b81 <follow_path>
c0006750:	85 c0                	test   eax,eax
c0006752:	75 27                	jne    c000677b <f_rename+0x20f>
c0006754:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006758:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000675f:	0f 85 f3 fe ff ff    	jne    c0006658 <f_rename+0xec>
c0006765:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c000676c:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006773:	0f 85 df fe ff ff    	jne    c0006658 <f_rename+0xec>
c0006779:	eb 09                	jmp    c0006784 <f_rename+0x218>
c000677b:	83 f8 04             	cmp    eax,0x4
c000677e:	0f 85 bc 00 00 00    	jne    c0006840 <f_rename+0x2d4>
c0006784:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000678b:	e8 65 d8 ff ff       	call   c0003ff5 <dir_register>
c0006790:	85 c0                	test   eax,eax
c0006792:	0f 85 a8 00 00 00    	jne    c0006840 <f_rename+0x2d4>
c0006798:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c000679f:	b9 13 00 00 00       	mov    ecx,0x13
c00067a4:	8d 54 24 25          	lea    edx,[esp+0x25]
c00067a8:	8d 46 0d             	lea    eax,[esi+0xd]
c00067ab:	e8 62 b2 ff ff       	call   c0001a12 <mem_cpy>
c00067b0:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00067b4:	a8 10                	test   al,0x10
c00067b6:	75 03                	jne    c00067bb <f_rename+0x24f>
c00067b8:	83 c8 20             	or     eax,0x20
c00067bb:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00067be:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067c2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067c6:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c00067ca:	74 5e                	je     c000682a <f_rename+0x2be>
c00067cc:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c00067d3:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c00067d7:	74 51                	je     c000682a <f_rename+0x2be>
c00067d9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00067dd:	89 f2                	mov    edx,esi
c00067df:	8a 07                	mov    al,BYTE PTR [edi]
c00067e1:	e8 10 e3 ff ff       	call   c0004af6 <ld_clust.isra.0>
c00067e6:	89 c2                	mov    edx,eax
c00067e8:	89 f8                	mov    eax,edi
c00067ea:	e8 3d b4 ff ff       	call   c0001c2c <clst2sect>
c00067ef:	89 c6                	mov    esi,eax
c00067f1:	89 d1                	mov    ecx,edx
c00067f3:	b8 02 00 00 00       	mov    eax,0x2
c00067f8:	09 f2                	or     edx,esi
c00067fa:	74 44                	je     c0006840 <f_rename+0x2d4>
c00067fc:	89 f2                	mov    edx,esi
c00067fe:	89 f8                	mov    eax,edi
c0006800:	e8 65 b9 ff ff       	call   c000216a <move_window>
c0006805:	85 c0                	test   eax,eax
c0006807:	75 37                	jne    c0006840 <f_rename+0x2d4>
c0006809:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000680d:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006811:	75 17                	jne    c000682a <f_rename+0x2be>
c0006813:	8d 50 74             	lea    edx,[eax+0x74]
c0006816:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c000681d:	e8 fd e2 ff ff       	call   c0004b1f <st_clust.isra.1>
c0006822:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006826:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000682a:	8d 44 24 58          	lea    eax,[esp+0x58]
c000682e:	e8 38 d1 ff ff       	call   c000396b <dir_remove>
c0006833:	85 c0                	test   eax,eax
c0006835:	75 09                	jne    c0006840 <f_rename+0x2d4>
c0006837:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000683b:	e8 38 da ff ff       	call   c0004278 <sync_fs>
c0006840:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006844:	83 ec 0c             	sub    esp,0xc
c0006847:	53                   	push   ebx
c0006848:	e8 42 19 00 00       	call   c000818f <ff_memfree>
c000684d:	83 c4 10             	add    esp,0x10
c0006850:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006854:	81 c4 fc 00 00 00    	add    esp,0xfc
c000685a:	5b                   	pop    ebx
c000685b:	5e                   	pop    esi
c000685c:	5f                   	pop    edi
c000685d:	5d                   	pop    ebp
c000685e:	c3                   	ret    

c000685f <f_chmod>:
c000685f:	57                   	push   edi
c0006860:	b9 02 00 00 00       	mov    ecx,0x2
c0006865:	56                   	push   esi
c0006866:	53                   	push   ebx
c0006867:	83 ec 60             	sub    esp,0x60
c000686a:	8d 54 24 10          	lea    edx,[esp+0x10]
c000686e:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006872:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006876:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000687a:	e8 96 bb ff ff       	call   c0002415 <mount_volume>
c000687f:	85 c0                	test   eax,eax
c0006881:	0f 85 af 00 00 00    	jne    c0006936 <f_chmod+0xd7>
c0006887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000688b:	83 ec 0c             	sub    esp,0xc
c000688e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006892:	68 60 04 00 00       	push   0x460
c0006897:	e8 dd 18 00 00       	call   c0008179 <ff_memalloc>
c000689c:	89 c6                	mov    esi,eax
c000689e:	83 c4 10             	add    esp,0x10
c00068a1:	b8 11 00 00 00       	mov    eax,0x11
c00068a6:	85 f6                	test   esi,esi
c00068a8:	0f 84 88 00 00 00    	je     c0006936 <f_chmod+0xd7>
c00068ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068b2:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00068b8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068bb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00068be:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00068c2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00068c6:	e8 b6 e2 ff ff       	call   c0004b81 <follow_path>
c00068cb:	85 c0                	test   eax,eax
c00068cd:	75 53                	jne    c0006922 <f_chmod+0xc3>
c00068cf:	b8 06 00 00 00       	mov    eax,0x6
c00068d4:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00068d9:	75 47                	jne    c0006922 <f_chmod+0xc3>
c00068db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068df:	89 f9                	mov    ecx,edi
c00068e1:	83 e1 27             	and    ecx,0x27
c00068e4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00068e7:	75 1d                	jne    c0006906 <f_chmod+0xa7>
c00068e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00068ec:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00068ef:	21 cb                	and    ebx,ecx
c00068f1:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00068f4:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00068f7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00068fb:	e8 e6 cf ff ff       	call   c00038e6 <store_xdir>
c0006900:	85 c0                	test   eax,eax
c0006902:	75 1e                	jne    c0006922 <f_chmod+0xc3>
c0006904:	eb 13                	jmp    c0006919 <f_chmod+0xba>
c0006906:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c000690a:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c000690d:	21 cb                	and    ebx,ecx
c000690f:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006912:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006915:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000691d:	e8 56 d9 ff ff       	call   c0004278 <sync_fs>
c0006922:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006926:	83 ec 0c             	sub    esp,0xc
c0006929:	56                   	push   esi
c000692a:	e8 60 18 00 00       	call   c000818f <ff_memfree>
c000692f:	83 c4 10             	add    esp,0x10
c0006932:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006936:	83 c4 60             	add    esp,0x60
c0006939:	5b                   	pop    ebx
c000693a:	5e                   	pop    esi
c000693b:	5f                   	pop    edi
c000693c:	c3                   	ret    

c000693d <f_utime>:
c000693d:	56                   	push   esi
c000693e:	b9 02 00 00 00       	mov    ecx,0x2
c0006943:	53                   	push   ebx
c0006944:	83 ec 64             	sub    esp,0x64
c0006947:	8d 54 24 10          	lea    edx,[esp+0x10]
c000694b:	8d 44 24 70          	lea    eax,[esp+0x70]
c000694f:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006953:	e8 bd ba ff ff       	call   c0002415 <mount_volume>
c0006958:	85 c0                	test   eax,eax
c000695a:	0f 85 b5 00 00 00    	jne    c0006a15 <f_utime+0xd8>
c0006960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006964:	83 ec 0c             	sub    esp,0xc
c0006967:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000696b:	68 60 04 00 00       	push   0x460
c0006970:	e8 04 18 00 00       	call   c0008179 <ff_memalloc>
c0006975:	89 c3                	mov    ebx,eax
c0006977:	83 c4 10             	add    esp,0x10
c000697a:	b8 11 00 00 00       	mov    eax,0x11
c000697f:	85 db                	test   ebx,ebx
c0006981:	0f 84 8e 00 00 00    	je     c0006a15 <f_utime+0xd8>
c0006987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000698b:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006991:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006994:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006997:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000699b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000699f:	e8 dd e1 ff ff       	call   c0004b81 <follow_path>
c00069a4:	85 c0                	test   eax,eax
c00069a6:	75 59                	jne    c0006a01 <f_utime+0xc4>
c00069a8:	b8 06 00 00 00       	mov    eax,0x6
c00069ad:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069b2:	75 4d                	jne    c0006a01 <f_utime+0xc4>
c00069b4:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c00069b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069bc:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c00069c0:	c1 e2 10             	shl    edx,0x10
c00069c3:	09 ca                	or     edx,ecx
c00069c5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069c8:	75 1a                	jne    c00069e4 <f_utime+0xa7>
c00069ca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069cd:	83 c0 0c             	add    eax,0xc
c00069d0:	e8 34 b0 ff ff       	call   c0001a09 <st_dword>
c00069d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069d9:	e8 08 cf ff ff       	call   c00038e6 <store_xdir>
c00069de:	85 c0                	test   eax,eax
c00069e0:	75 1f                	jne    c0006a01 <f_utime+0xc4>
c00069e2:	eb 14                	jmp    c00069f8 <f_utime+0xbb>
c00069e4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00069e8:	83 c0 16             	add    eax,0x16
c00069eb:	e8 19 b0 ff ff       	call   c0001a09 <st_dword>
c00069f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069f4:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069fc:	e8 77 d8 ff ff       	call   c0004278 <sync_fs>
c0006a01:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a05:	83 ec 0c             	sub    esp,0xc
c0006a08:	53                   	push   ebx
c0006a09:	e8 81 17 00 00       	call   c000818f <ff_memfree>
c0006a0e:	83 c4 10             	add    esp,0x10
c0006a11:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a15:	83 c4 64             	add    esp,0x64
c0006a18:	5b                   	pop    ebx
c0006a19:	5e                   	pop    esi
c0006a1a:	c3                   	ret    

c0006a1b <f_getlabel>:
c0006a1b:	55                   	push   ebp
c0006a1c:	31 c9                	xor    ecx,ecx
c0006a1e:	57                   	push   edi
c0006a1f:	56                   	push   esi
c0006a20:	53                   	push   ebx
c0006a21:	83 ec 6c             	sub    esp,0x6c
c0006a24:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a28:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006a2f:	e8 e1 b9 ff ff       	call   c0002415 <mount_volume>
c0006a34:	89 c3                	mov    ebx,eax
c0006a36:	85 c0                	test   eax,eax
c0006a38:	0f 85 73 01 00 00    	jne    c0006bb1 <f_getlabel+0x196>
c0006a3e:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006a46:	0f 84 65 01 00 00    	je     c0006bb1 <f_getlabel+0x196>
c0006a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a50:	31 d2                	xor    edx,edx
c0006a52:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006a56:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a5a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006a62:	e8 7b c4 ff ff       	call   c0002ee2 <dir_sdi>
c0006a67:	89 c3                	mov    ebx,eax
c0006a69:	85 c0                	test   eax,eax
c0006a6b:	0f 85 2f 01 00 00    	jne    c0006ba0 <f_getlabel+0x185>
c0006a71:	ba 01 00 00 00       	mov    edx,0x1
c0006a76:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a7a:	e8 75 cc ff ff       	call   c00036f4 <dir_read>
c0006a7f:	89 c3                	mov    ebx,eax
c0006a81:	85 c0                	test   eax,eax
c0006a83:	0f 85 17 01 00 00    	jne    c0006ba0 <f_getlabel+0x185>
c0006a89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a8d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a90:	74 09                	je     c0006a9b <f_getlabel+0x80>
c0006a92:	31 f6                	xor    esi,esi
c0006a94:	31 c9                	xor    ecx,ecx
c0006a96:	e9 c8 00 00 00       	jmp    c0006b63 <f_getlabel+0x148>
c0006a9b:	31 ed                	xor    ebp,ebp
c0006a9d:	31 f6                	xor    esi,esi
c0006a9f:	31 ff                	xor    edi,edi
c0006aa1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aa5:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006aa9:	39 fa                	cmp    edx,edi
c0006aab:	76 4b                	jbe    c0006af8 <f_getlabel+0xdd>
c0006aad:	47                   	inc    edi
c0006aae:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006ab1:	01 d0                	add    eax,edx
c0006ab3:	e8 db ae ff ff       	call   c0001993 <ld_word>
c0006ab8:	66 85 ed             	test   bp,bp
c0006abb:	75 0d                	jne    c0006aca <f_getlabel+0xaf>
c0006abd:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ac3:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006ac8:	76 28                	jbe    c0006af2 <f_getlabel+0xd7>
c0006aca:	89 e9                	mov    ecx,ebp
c0006acc:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006ad3:	c1 e1 10             	shl    ecx,0x10
c0006ad6:	01 f2                	add    edx,esi
c0006ad8:	0f b7 c0             	movzx  eax,ax
c0006adb:	09 c8                	or     eax,ecx
c0006add:	b9 04 00 00 00       	mov    ecx,0x4
c0006ae2:	e8 4c b0 ff ff       	call   c0001b33 <put_utf>
c0006ae7:	84 c0                	test   al,al
c0006ae9:	74 0b                	je     c0006af6 <f_getlabel+0xdb>
c0006aeb:	0f b6 c0             	movzx  eax,al
c0006aee:	01 c6                	add    esi,eax
c0006af0:	31 c0                	xor    eax,eax
c0006af2:	89 c5                	mov    ebp,eax
c0006af4:	eb ab                	jmp    c0006aa1 <f_getlabel+0x86>
c0006af6:	31 f6                	xor    esi,esi
c0006af8:	66 85 ed             	test   bp,bp
c0006afb:	74 02                	je     c0006aff <f_getlabel+0xe4>
c0006afd:	31 f6                	xor    esi,esi
c0006aff:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006b06:	c6 04 30 00          	mov    BYTE PTR [eax+esi*1],0x0
c0006b0a:	e9 a2 00 00 00       	jmp    c0006bb1 <f_getlabel+0x196>
c0006b0f:	83 ff 0b             	cmp    edi,0xb
c0006b12:	74 11                	je     c0006b25 <f_getlabel+0x10a>
c0006b14:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006b19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b1d:	8d 79 02             	lea    edi,[ecx+0x2]
c0006b20:	c1 e0 08             	shl    eax,0x8
c0006b23:	09 c2                	or     edx,eax
c0006b25:	50                   	push   eax
c0006b26:	50                   	push   eax
c0006b27:	68 b5 01 00 00       	push   0x1b5
c0006b2c:	0f b7 d2             	movzx  edx,dx
c0006b2f:	52                   	push   edx
c0006b30:	e8 07 17 00 00       	call   c000823c <ff_oem2uni>
c0006b35:	83 c4 10             	add    esp,0x10
c0006b38:	66 85 c0             	test   ax,ax
c0006b3b:	74 46                	je     c0006b83 <f_getlabel+0x168>
c0006b3d:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b44:	b9 04 00 00 00       	mov    ecx,0x4
c0006b49:	01 f2                	add    edx,esi
c0006b4b:	0f b7 c0             	movzx  eax,ax
c0006b4e:	e8 e0 af ff ff       	call   c0001b33 <put_utf>
c0006b53:	84 c0                	test   al,al
c0006b55:	74 2c                	je     c0006b83 <f_getlabel+0x168>
c0006b57:	0f b6 c0             	movzx  eax,al
c0006b5a:	01 c6                	add    esi,eax
c0006b5c:	83 ff 0b             	cmp    edi,0xb
c0006b5f:	74 24                	je     c0006b85 <f_getlabel+0x16a>
c0006b61:	89 f9                	mov    ecx,edi
c0006b63:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006b67:	8d 79 01             	lea    edi,[ecx+0x1]
c0006b6a:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006b6f:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006b74:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b78:	e8 ea ae ff ff       	call   c0001a67 <dbc_1st>
c0006b7d:	85 c0                	test   eax,eax
c0006b7f:	74 a4                	je     c0006b25 <f_getlabel+0x10a>
c0006b81:	eb 8c                	jmp    c0006b0f <f_getlabel+0xf4>
c0006b83:	31 f6                	xor    esi,esi
c0006b85:	03 b4 24 84 00 00 00 	add    esi,DWORD PTR [esp+0x84]
c0006b8c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0006b8f:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
c0006b96:	74 19                	je     c0006bb1 <f_getlabel+0x196>
c0006b98:	4e                   	dec    esi
c0006b99:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c0006b9c:	74 ee                	je     c0006b8c <f_getlabel+0x171>
c0006b9e:	eb 11                	jmp    c0006bb1 <f_getlabel+0x196>
c0006ba0:	83 fb 04             	cmp    ebx,0x4
c0006ba3:	75 0c                	jne    c0006bb1 <f_getlabel+0x196>
c0006ba5:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bac:	31 db                	xor    ebx,ebx
c0006bae:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006bb1:	85 db                	test   ebx,ebx
c0006bb3:	75 50                	jne    c0006c05 <f_getlabel+0x1ea>
c0006bb5:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006bbd:	74 46                	je     c0006c05 <f_getlabel+0x1ea>
c0006bbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bc3:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006bc6:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006bc9:	e8 9c b5 ff ff       	call   c000216a <move_window>
c0006bce:	89 c3                	mov    ebx,eax
c0006bd0:	85 c0                	test   eax,eax
c0006bd2:	75 31                	jne    c0006c05 <f_getlabel+0x1ea>
c0006bd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006bd8:	b8 43 00 00 00       	mov    eax,0x43
c0006bdd:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006bdf:	80 f9 03             	cmp    cl,0x3
c0006be2:	74 0f                	je     c0006bf3 <f_getlabel+0x1d8>
c0006be4:	31 c0                	xor    eax,eax
c0006be6:	80 f9 04             	cmp    cl,0x4
c0006be9:	0f 94 c0             	sete   al
c0006bec:	48                   	dec    eax
c0006bed:	83 e0 c3             	and    eax,0xffffffc3
c0006bf0:	83 c0 64             	add    eax,0x64
c0006bf3:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006bf7:	e8 a4 ad ff ff       	call   c00019a0 <ld_dword>
c0006bfc:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006c03:	89 07                	mov    DWORD PTR [edi],eax
c0006c05:	83 c4 6c             	add    esp,0x6c
c0006c08:	89 d8                	mov    eax,ebx
c0006c0a:	5b                   	pop    ebx
c0006c0b:	5e                   	pop    esi
c0006c0c:	5f                   	pop    edi
c0006c0d:	5d                   	pop    ebp
c0006c0e:	c3                   	ret    

c0006c0f <f_setlabel>:
c0006c0f:	56                   	push   esi
c0006c10:	b9 02 00 00 00       	mov    ecx,0x2
c0006c15:	53                   	push   ebx
c0006c16:	83 ec 74             	sub    esp,0x74
c0006c19:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006c1d:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c24:	e8 ec b7 ff ff       	call   c0002415 <mount_volume>
c0006c29:	89 c6                	mov    esi,eax
c0006c2b:	85 c0                	test   eax,eax
c0006c2d:	0f 85 41 02 00 00    	jne    c0006e74 <f_setlabel+0x265>
c0006c33:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c37:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c3a:	0f 85 8e 00 00 00    	jne    c0006cce <f_setlabel+0xbf>
c0006c40:	b9 16 00 00 00       	mov    ecx,0x16
c0006c45:	31 d2                	xor    edx,edx
c0006c47:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006c4b:	31 db                	xor    ebx,ebx
c0006c4d:	e8 d5 ad ff ff       	call   c0001a27 <mem_set>
c0006c52:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006c59:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006c5c:	0f 86 0a 01 00 00    	jbe    c0006d6c <f_setlabel+0x15d>
c0006c62:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c69:	e8 ff ad ff ff       	call   c0001a6d <tchar2uni>
c0006c6e:	89 c6                	mov    esi,eax
c0006c70:	3d ff ff 00 00       	cmp    eax,0xffff
c0006c75:	76 2a                	jbe    c0006ca1 <f_setlabel+0x92>
c0006c77:	83 f8 ff             	cmp    eax,0xffffffff
c0006c7a:	74 05                	je     c0006c81 <f_setlabel+0x72>
c0006c7c:	83 fb 09             	cmp    ebx,0x9
c0006c7f:	76 0a                	jbe    c0006c8b <f_setlabel+0x7c>
c0006c81:	be 06 00 00 00       	mov    esi,0x6
c0006c86:	e9 e9 01 00 00       	jmp    c0006e74 <f_setlabel+0x265>
c0006c8b:	89 c2                	mov    edx,eax
c0006c8d:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006c91:	c1 ea 10             	shr    edx,0x10
c0006c94:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006c97:	01 c8                	add    eax,ecx
c0006c99:	43                   	inc    ebx
c0006c9a:	e8 66 ad ff ff       	call   c0001a05 <st_word>
c0006c9f:	eb 04                	jmp    c0006ca5 <f_setlabel+0x96>
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 dc                	je     c0006c81 <f_setlabel+0x72>
c0006ca5:	89 f2                	mov    edx,esi
c0006ca7:	b8 37 fe 01 c0       	mov    eax,0xc001fe37
c0006cac:	e8 a4 ad ff ff       	call   c0001a55 <chk_chr>
c0006cb1:	85 c0                	test   eax,eax
c0006cb3:	75 cc                	jne    c0006c81 <f_setlabel+0x72>
c0006cb5:	83 fb 0a             	cmp    ebx,0xa
c0006cb8:	77 c7                	ja     c0006c81 <f_setlabel+0x72>
c0006cba:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cbd:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cc1:	0f b7 d6             	movzx  edx,si
c0006cc4:	01 c8                	add    eax,ecx
c0006cc6:	43                   	inc    ebx
c0006cc7:	e8 39 ad ff ff       	call   c0001a05 <st_word>
c0006ccc:	eb 84                	jmp    c0006c52 <f_setlabel+0x43>
c0006cce:	b9 0b 00 00 00       	mov    ecx,0xb
c0006cd3:	ba 20 00 00 00       	mov    edx,0x20
c0006cd8:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006cdc:	31 db                	xor    ebx,ebx
c0006cde:	e8 44 ad ff ff       	call   c0001a27 <mem_set>
c0006ce3:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006cea:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ced:	76 60                	jbe    c0006d4f <f_setlabel+0x140>
c0006cef:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cf6:	e8 72 ad ff ff       	call   c0001a6d <tchar2uni>
c0006cfb:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d00:	0f 87 7b ff ff ff    	ja     c0006c81 <f_setlabel+0x72>
c0006d06:	83 ec 0c             	sub    esp,0xc
c0006d09:	50                   	push   eax
c0006d0a:	e8 9c 15 00 00       	call   c00082ab <ff_wtoupper>
c0006d0f:	5a                   	pop    edx
c0006d10:	59                   	pop    ecx
c0006d11:	68 b5 01 00 00       	push   0x1b5
c0006d16:	50                   	push   eax
c0006d17:	e8 8a 14 00 00       	call   c00081a6 <ff_uni2oem>
c0006d1c:	83 c4 10             	add    esp,0x10
c0006d1f:	89 c6                	mov    esi,eax
c0006d21:	66 85 c0             	test   ax,ax
c0006d24:	0f 84 57 ff ff ff    	je     c0006c81 <f_setlabel+0x72>
c0006d2a:	0f b7 d0             	movzx  edx,ax
c0006d2d:	b8 30 fe 01 c0       	mov    eax,0xc001fe30
c0006d32:	e8 1e ad ff ff       	call   c0001a55 <chk_chr>
c0006d37:	85 c0                	test   eax,eax
c0006d39:	0f 85 42 ff ff ff    	jne    c0006c81 <f_setlabel+0x72>
c0006d3f:	66 81 fe ff 00       	cmp    si,0xff
c0006d44:	0f 87 14 01 00 00    	ja     c0006e5e <f_setlabel+0x24f>
c0006d4a:	e9 fa 00 00 00       	jmp    c0006e49 <f_setlabel+0x23a>
c0006d4f:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006d54:	0f 84 27 ff ff ff    	je     c0006c81 <f_setlabel+0x72>
c0006d5a:	85 db                	test   ebx,ebx
c0006d5c:	74 0e                	je     c0006d6c <f_setlabel+0x15d>
c0006d5e:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006d61:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006d66:	75 04                	jne    c0006d6c <f_setlabel+0x15d>
c0006d68:	89 c3                	mov    ebx,eax
c0006d6a:	eb ee                	jmp    c0006d5a <f_setlabel+0x14b>
c0006d6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006d70:	31 d2                	xor    edx,edx
c0006d72:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006d76:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006d7a:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006d82:	e8 5b c1 ff ff       	call   c0002ee2 <dir_sdi>
c0006d87:	89 c6                	mov    esi,eax
c0006d89:	85 c0                	test   eax,eax
c0006d8b:	0f 85 e3 00 00 00    	jne    c0006e74 <f_setlabel+0x265>
c0006d91:	ba 01 00 00 00       	mov    edx,0x1
c0006d96:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006d9a:	e8 55 c9 ff ff       	call   c00036f4 <dir_read>
c0006d9f:	85 c0                	test   eax,eax
c0006da1:	75 21                	jne    c0006dc4 <f_setlabel+0x1b5>
c0006da3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006da7:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006dab:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006dae:	74 5d                	je     c0006e0d <f_setlabel+0x1fe>
c0006db0:	85 db                	test   ebx,ebx
c0006db2:	74 0b                	je     c0006dbf <f_setlabel+0x1b0>
c0006db4:	b9 0b 00 00 00       	mov    ecx,0xb
c0006db9:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006dbd:	eb 70                	jmp    c0006e2f <f_setlabel+0x220>
c0006dbf:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006dc2:	eb 70                	jmp    c0006e34 <f_setlabel+0x225>
c0006dc4:	83 f8 04             	cmp    eax,0x4
c0006dc7:	75 7c                	jne    c0006e45 <f_setlabel+0x236>
c0006dc9:	85 db                	test   ebx,ebx
c0006dcb:	0f 84 a3 00 00 00    	je     c0006e74 <f_setlabel+0x265>
c0006dd1:	ba 01 00 00 00       	mov    edx,0x1
c0006dd6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dda:	e8 8f ca ff ff       	call   c000386e <dir_alloc>
c0006ddf:	89 c6                	mov    esi,eax
c0006de1:	85 c0                	test   eax,eax
c0006de3:	0f 85 8b 00 00 00    	jne    c0006e74 <f_setlabel+0x265>
c0006de9:	31 d2                	xor    edx,edx
c0006deb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006def:	b9 20 00 00 00       	mov    ecx,0x20
c0006df4:	e8 2e ac ff ff       	call   c0001a27 <mem_set>
c0006df9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006dfd:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e00:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e04:	75 18                	jne    c0006e1e <f_setlabel+0x20f>
c0006e06:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006e09:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e0d:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006e10:	b9 16 00 00 00       	mov    ecx,0x16
c0006e15:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e19:	83 c0 02             	add    eax,0x2
c0006e1c:	eb 9b                	jmp    c0006db9 <f_setlabel+0x1aa>
c0006e1e:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006e22:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e27:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e2b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e2f:	e8 de ab ff ff       	call   c0001a12 <mem_cpy>
c0006e34:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e38:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006e3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e40:	e8 33 d4 ff ff       	call   c0004278 <sync_fs>
c0006e45:	89 c6                	mov    esi,eax
c0006e47:	eb 2b                	jmp    c0006e74 <f_setlabel+0x265>
c0006e49:	83 fb 0a             	cmp    ebx,0xa
c0006e4c:	0f 87 2f fe ff ff    	ja     c0006c81 <f_setlabel+0x72>
c0006e52:	89 f0                	mov    eax,esi
c0006e54:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006e58:	43                   	inc    ebx
c0006e59:	e9 85 fe ff ff       	jmp    c0006ce3 <f_setlabel+0xd4>
c0006e5e:	83 fb 09             	cmp    ebx,0x9
c0006e61:	0f 87 1a fe ff ff    	ja     c0006c81 <f_setlabel+0x72>
c0006e67:	89 f0                	mov    eax,esi
c0006e69:	66 c1 e8 08          	shr    ax,0x8
c0006e6d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006e71:	43                   	inc    ebx
c0006e72:	eb de                	jmp    c0006e52 <f_setlabel+0x243>
c0006e74:	83 c4 74             	add    esp,0x74
c0006e77:	89 f0                	mov    eax,esi
c0006e79:	5b                   	pop    ebx
c0006e7a:	5e                   	pop    esi
c0006e7b:	c3                   	ret    

c0006e7c <f_forward>:
c0006e7c:	55                   	push   ebp
c0006e7d:	57                   	push   edi
c0006e7e:	56                   	push   esi
c0006e7f:	53                   	push   ebx
c0006e80:	83 ec 2c             	sub    esp,0x2c
c0006e83:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006e87:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006e8b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006e8f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006e95:	89 d8                	mov    eax,ebx
c0006e97:	e8 f3 b1 ff ff       	call   c000208f <validate>
c0006e9c:	89 c5                	mov    ebp,eax
c0006e9e:	85 c0                	test   eax,eax
c0006ea0:	0f 85 aa 01 00 00    	jne    c0007050 <f_forward+0x1d4>
c0006ea6:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006eaa:	85 ed                	test   ebp,ebp
c0006eac:	0f 85 9e 01 00 00    	jne    c0007050 <f_forward+0x1d4>
c0006eb2:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006eb6:	0f 84 8f 01 00 00    	je     c000704b <f_forward+0x1cf>
c0006ebc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006ebf:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006ec2:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006ec5:	bf 00 00 00 00       	mov    edi,0x0
c0006eca:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006ecd:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006ed1:	89 d1                	mov    ecx,edx
c0006ed3:	19 f9                	sbb    ecx,edi
c0006ed5:	0f 83 cf 00 00 00    	jae    c0006faa <f_forward+0x12e>
c0006edb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006edf:	e9 c6 00 00 00       	jmp    c0006faa <f_forward+0x12e>
c0006ee4:	50                   	push   eax
c0006ee5:	50                   	push   eax
c0006ee6:	6a 00                	push   0x0
c0006ee8:	6a 00                	push   0x0
c0006eea:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006eee:	83 c4 10             	add    esp,0x10
c0006ef1:	85 c0                	test   eax,eax
c0006ef3:	0f 84 57 01 00 00    	je     c0007050 <f_forward+0x1d4>
c0006ef9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006efd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006f00:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006f03:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006f07:	89 d7                	mov    edi,edx
c0006f09:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006f0c:	89 c6                	mov    esi,eax
c0006f0e:	0f ac fe 09          	shrd   esi,edi,0x9
c0006f12:	21 ce                	and    esi,ecx
c0006f14:	89 c1                	mov    ecx,eax
c0006f16:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006f1c:	0f 84 98 00 00 00    	je     c0006fba <f_forward+0x13e>
c0006f22:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f26:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006f29:	89 c8                	mov    eax,ecx
c0006f2b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006f2f:	e8 f8 ac ff ff       	call   c0001c2c <clst2sect>
c0006f34:	89 d7                	mov    edi,edx
c0006f36:	09 c7                	or     edi,eax
c0006f38:	0f 84 9e 00 00 00    	je     c0006fdc <f_forward+0x160>
c0006f3e:	31 ff                	xor    edi,edi
c0006f40:	01 c6                	add    esi,eax
c0006f42:	11 d7                	adc    edi,edx
c0006f44:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006f47:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0006f4a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0006f4e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0006f51:	39 fa                	cmp    edx,edi
c0006f53:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006f57:	0f 85 a2 00 00 00    	jne    c0006fff <f_forward+0x183>
c0006f5d:	39 f0                	cmp    eax,esi
c0006f5f:	0f 85 9a 00 00 00    	jne    c0006fff <f_forward+0x183>
c0006f65:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006f68:	ba 00 02 00 00       	mov    edx,0x200
c0006f6d:	25 ff 01 00 00       	and    eax,0x1ff
c0006f72:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0006f76:	29 c2                	sub    edx,eax
c0006f78:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0006f7b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0006f7e:	39 d1                	cmp    ecx,edx
c0006f80:	76 02                	jbe    c0006f84 <f_forward+0x108>
c0006f82:	89 d1                	mov    ecx,edx
c0006f84:	52                   	push   edx
c0006f85:	8d 73 50             	lea    esi,[ebx+0x50]
c0006f88:	52                   	push   edx
c0006f89:	01 c6                	add    esi,eax
c0006f8b:	51                   	push   ecx
c0006f8c:	56                   	push   esi
c0006f8d:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006f91:	83 c4 10             	add    esp,0x10
c0006f94:	85 c0                	test   eax,eax
c0006f96:	74 44                	je     c0006fdc <f_forward+0x160>
c0006f98:	31 ff                	xor    edi,edi
c0006f9a:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0006f9d:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0006fa0:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0006fa4:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0006fa8:	01 07                	add    DWORD PTR [edi],eax
c0006faa:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0006faf:	0f 85 2f ff ff ff    	jne    c0006ee4 <f_forward+0x68>
c0006fb5:	e9 96 00 00 00       	jmp    c0007050 <f_forward+0x1d4>
c0006fba:	85 f6                	test   esi,esi
c0006fbc:	0f 85 60 ff ff ff    	jne    c0006f22 <f_forward+0xa6>
c0006fc2:	89 d7                	mov    edi,edx
c0006fc4:	09 c7                	or     edi,eax
c0006fc6:	75 05                	jne    c0006fcd <f_forward+0x151>
c0006fc8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006fcb:	eb 0a                	jmp    c0006fd7 <f_forward+0x15b>
c0006fcd:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006fd0:	89 d8                	mov    eax,ebx
c0006fd2:	e8 15 bd ff ff       	call   c0002cec <get_fat>
c0006fd7:	83 f8 01             	cmp    eax,0x1
c0006fda:	77 0b                	ja     c0006fe7 <f_forward+0x16b>
c0006fdc:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0006fe0:	bd 02 00 00 00       	mov    ebp,0x2
c0006fe5:	eb 69                	jmp    c0007050 <f_forward+0x1d4>
c0006fe7:	83 f8 ff             	cmp    eax,0xffffffff
c0006fea:	75 0b                	jne    c0006ff7 <f_forward+0x17b>
c0006fec:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0006ff0:	bd 01 00 00 00       	mov    ebp,0x1
c0006ff5:	eb 59                	jmp    c0007050 <f_forward+0x1d4>
c0006ff7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0006ffa:	e9 23 ff ff ff       	jmp    c0006f22 <f_forward+0xa6>
c0006fff:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007003:	79 20                	jns    c0007025 <f_forward+0x1a9>
c0007005:	83 ec 0c             	sub    esp,0xc
c0007008:	6a 01                	push   0x1
c000700a:	52                   	push   edx
c000700b:	50                   	push   eax
c000700c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007010:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007014:	50                   	push   eax
c0007015:	e8 44 a9 ff ff       	call   c000195e <disk_write>
c000701a:	83 c4 20             	add    esp,0x20
c000701d:	85 c0                	test   eax,eax
c000701f:	75 cb                	jne    c0006fec <f_forward+0x170>
c0007021:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007025:	83 ec 0c             	sub    esp,0xc
c0007028:	6a 01                	push   0x1
c000702a:	57                   	push   edi
c000702b:	56                   	push   esi
c000702c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007030:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007034:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007038:	50                   	push   eax
c0007039:	e8 0a a9 ff ff       	call   c0001948 <disk_read>
c000703e:	83 c4 20             	add    esp,0x20
c0007041:	85 c0                	test   eax,eax
c0007043:	0f 84 1c ff ff ff    	je     c0006f65 <f_forward+0xe9>
c0007049:	eb a1                	jmp    c0006fec <f_forward+0x170>
c000704b:	bd 07 00 00 00       	mov    ebp,0x7
c0007050:	83 c4 2c             	add    esp,0x2c
c0007053:	89 e8                	mov    eax,ebp
c0007055:	5b                   	pop    ebx
c0007056:	5e                   	pop    esi
c0007057:	5f                   	pop    edi
c0007058:	5d                   	pop    ebp
c0007059:	c3                   	ret    

c000705a <f_mkfs>:
c000705a:	55                   	push   ebp
c000705b:	57                   	push   edi
c000705c:	56                   	push   esi
c000705d:	53                   	push   ebx
c000705e:	bb 0b 00 00 00       	mov    ebx,0xb
c0007063:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007069:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007070:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007077:	e8 f9 ae ff ff       	call   c0001f75 <get_ldnumber>
c000707c:	85 c0                	test   eax,eax
c000707e:	0f 88 e8 10 00 00    	js     c000816c <f_mkfs+0x1112>
c0007084:	8b 14 85 c0 40 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbf40]
c000708b:	85 d2                	test   edx,edx
c000708d:	74 03                	je     c0007092 <f_mkfs+0x38>
c000708f:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0007092:	85 f6                	test   esi,esi
c0007094:	75 05                	jne    c000709b <f_mkfs+0x41>
c0007096:	be 20 fe 01 c0       	mov    esi,0xc001fe20
c000709b:	0f b6 c0             	movzx  eax,al
c000709e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070a2:	83 ec 0c             	sub    esp,0xc
c00070a5:	bb 03 00 00 00       	mov    ebx,0x3
c00070aa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070ae:	e8 92 a8 ff ff       	call   c0001945 <disk_initialize>
c00070b3:	83 c4 10             	add    esp,0x10
c00070b6:	a8 01                	test   al,0x1
c00070b8:	0f 85 ae 10 00 00    	jne    c000816c <f_mkfs+0x1112>
c00070be:	bb 0a 00 00 00       	mov    ebx,0xa
c00070c3:	a8 04                	test   al,0x4
c00070c5:	0f 85 a1 10 00 00    	jne    c000816c <f_mkfs+0x1112>
c00070cb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00070ce:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00070d2:	85 c0                	test   eax,eax
c00070d4:	75 20                	jne    c00070f6 <f_mkfs+0x9c>
c00070d6:	51                   	push   ecx
c00070d7:	8d 44 24 78          	lea    eax,[esp+0x78]
c00070db:	50                   	push   eax
c00070dc:	6a 03                	push   0x3
c00070de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070e2:	e8 8d a8 ff ff       	call   c0001974 <disk_ioctl>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	85 c0                	test   eax,eax
c00070ec:	74 08                	je     c00070f6 <f_mkfs+0x9c>
c00070ee:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00070f6:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00070fa:	8d 42 ff             	lea    eax,[edx-0x1]
c00070fd:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007102:	77 04                	ja     c0007108 <f_mkfs+0xae>
c0007104:	85 c2                	test   edx,eax
c0007106:	74 08                	je     c0007110 <f_mkfs+0xb6>
c0007108:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007110:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007113:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c0007117:	48                   	dec    eax
c0007118:	3c 01                	cmp    al,0x1
c000711a:	76 05                	jbe    c0007121 <f_mkfs+0xc7>
c000711c:	c6 44 24 40 01       	mov    BYTE PTR [esp+0x40],0x1
c0007121:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007124:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007128:	48                   	dec    eax
c0007129:	3d ff 7f 00 00       	cmp    eax,0x7fff
c000712e:	77 07                	ja     c0007137 <f_mkfs+0xdd>
c0007130:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007135:	74 08                	je     c000713f <f_mkfs+0xe5>
c0007137:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c000713f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007142:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007148:	77 07                	ja     c0007151 <f_mkfs+0xf7>
c000714a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000714d:	85 d8                	test   eax,ebx
c000714f:	74 02                	je     c0007153 <f_mkfs+0xf9>
c0007151:	31 db                	xor    ebx,ebx
c0007153:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c000715e:	77 0a                	ja     c000716a <f_mkfs+0x110>
c0007160:	bb 11 00 00 00       	mov    ebx,0x11
c0007165:	e9 02 10 00 00       	jmp    c000816c <f_mkfs+0x1112>
c000716a:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007171:	8b 36                	mov    esi,DWORD PTR [esi]
c0007173:	85 ed                	test   ebp,ebp
c0007175:	75 1e                	jne    c0007195 <f_mkfs+0x13b>
c0007177:	83 ec 0c             	sub    esp,0xc
c000717a:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007181:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007186:	50                   	push   eax
c0007187:	e8 ed 0f 00 00       	call   c0008179 <ff_memalloc>
c000718c:	83 c4 10             	add    esp,0x10
c000718f:	89 c5                	mov    ebp,eax
c0007191:	85 c0                	test   eax,eax
c0007193:	74 cb                	je     c0007160 <f_mkfs+0x106>
c0007195:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c000719d:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00071a5:	52                   	push   edx
c00071a6:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00071aa:	50                   	push   eax
c00071ab:	6a 01                	push   0x1
c00071ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071b1:	e8 be a7 ff ff       	call   c0001974 <disk_ioctl>
c00071b6:	83 c4 10             	add    esp,0x10
c00071b9:	85 c0                	test   eax,eax
c00071bb:	0f 85 46 0f 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c00071c1:	89 f1                	mov    ecx,esi
c00071c3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00071cb:	83 e1 0f             	and    ecx,0xf
c00071ce:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00071d6:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00071da:	83 e6 08             	and    esi,0x8
c00071dd:	75 56                	jne    c0007235 <f_mkfs+0x1db>
c00071df:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00071e3:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00071e7:	83 ff 00             	cmp    edi,0x0
c00071ea:	76 20                	jbe    c000720c <f_mkfs+0x1b2>
c00071ec:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00071f1:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00071f7:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00071ff:	83 d7 ff             	adc    edi,0xffffffff
c0007202:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007206:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000720a:	eb 21                	jmp    c000722d <f_mkfs+0x1d3>
c000720c:	ba 3f 00 00 00       	mov    edx,0x3f
c0007211:	39 f2                	cmp    edx,esi
c0007213:	19 f8                	sbb    eax,edi
c0007215:	73 1e                	jae    c0007235 <f_mkfs+0x1db>
c0007217:	83 c6 c1             	add    esi,0xffffffc1
c000721a:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007222:	83 d7 ff             	adc    edi,0xffffffff
c0007225:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007229:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000722d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007235:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007239:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c000723d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007240:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007244:	ba 7f 00 00 00       	mov    edx,0x7f
c0007249:	31 c0                	xor    eax,eax
c000724b:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000724e:	89 c7                	mov    edi,eax
c0007250:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007254:	0f 83 c1 0a 00 00    	jae    c0007d1b <f_mkfs+0xcc1>
c000725a:	89 df                	mov    edi,ebx
c000725c:	c1 ef 09             	shr    edi,0x9
c000725f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007263:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c000726a:	c1 ef 09             	shr    edi,0x9
c000726d:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007272:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007276:	74 29                	je     c00072a1 <f_mkfs+0x247>
c0007278:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000727d:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007283:	0f 97 c2             	seta   dl
c0007286:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007289:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000728d:	0f 92 c0             	setb   al
c0007290:	08 c2                	or     dl,al
c0007292:	75 5b                	jne    c00072ef <f_mkfs+0x295>
c0007294:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007298:	83 e0 07             	and    eax,0x7
c000729b:	3c 04                	cmp    al,0x4
c000729d:	74 50                	je     c00072ef <f_mkfs+0x295>
c000729f:	eb 1b                	jmp    c00072bc <f_mkfs+0x262>
c00072a1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00072a6:	0f 87 6f 0a 00 00    	ja     c0007d1b <f_mkfs+0xcc1>
c00072ac:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072b2:	76 08                	jbe    c00072bc <f_mkfs+0x262>
c00072b4:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00072bc:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00072c0:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00072c4:	83 e0 01             	and    eax,0x1
c00072c7:	80 e1 02             	and    cl,0x2
c00072ca:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00072ce:	74 0d                	je     c00072dd <f_mkfs+0x283>
c00072d0:	84 c0                	test   al,al
c00072d2:	0f 84 4f 09 00 00    	je     c0007c27 <f_mkfs+0xbcd>
c00072d8:	e9 0e 08 00 00       	jmp    c0007aeb <f_mkfs+0xa91>
c00072dd:	bb 13 00 00 00       	mov    ebx,0x13
c00072e2:	84 c0                	test   al,al
c00072e4:	0f 85 01 08 00 00    	jne    c0007aeb <f_mkfs+0xa91>
c00072ea:	e9 35 0e 00 00       	jmp    c0008124 <f_mkfs+0x10ca>
c00072ef:	ba ff 0f 00 00       	mov    edx,0xfff
c00072f4:	31 c0                	xor    eax,eax
c00072f6:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00072f9:	89 c7                	mov    edi,eax
c00072fb:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00072ff:	0f 83 16 0a 00 00    	jae    c0007d1b <f_mkfs+0xcc1>
c0007305:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000730b:	77 39                	ja     c0007346 <f_mkfs+0x2ec>
c000730d:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007312:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000731a:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000731d:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007321:	73 08                	jae    c000732b <f_mkfs+0x2d1>
c0007323:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000732b:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007330:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007333:	b8 00 00 00 00       	mov    eax,0x0
c0007338:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000733c:	73 08                	jae    c0007346 <f_mkfs+0x2ec>
c000733e:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c0007346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000734a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000734e:	83 c0 20             	add    eax,0x20
c0007351:	83 d2 00             	adc    edx,0x0
c0007354:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007358:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000735c:	31 d2                	xor    edx,edx
c000735e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007362:	52                   	push   edx
c0007363:	50                   	push   eax
c0007364:	31 ff                	xor    edi,edi
c0007366:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000736a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000736e:	e8 39 7b 01 00       	call   c001eeac <__udivdi3>
c0007373:	83 c4 10             	add    esp,0x10
c0007376:	c1 e0 02             	shl    eax,0x2
c0007379:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c000737d:	05 07 02 00 00       	add    eax,0x207
c0007382:	89 f1                	mov    ecx,esi
c0007384:	c1 e8 09             	shr    eax,0x9
c0007387:	89 fb                	mov    ebx,edi
c0007389:	83 c1 ff             	add    ecx,0xffffffff
c000738c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007390:	83 d3 ff             	adc    ebx,0xffffffff
c0007393:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0007397:	13 5c 24 44          	adc    ebx,DWORD PTR [esp+0x44]
c000739b:	31 d2                	xor    edx,edx
c000739d:	01 c8                	add    eax,ecx
c000739f:	11 da                	adc    edx,ebx
c00073a1:	89 c1                	mov    ecx,eax
c00073a3:	f7 de                	neg    esi
c00073a5:	83 d7 00             	adc    edi,0x0
c00073a8:	21 f1                	and    ecx,esi
c00073aa:	f7 df                	neg    edi
c00073ac:	89 d0                	mov    eax,edx
c00073ae:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00073b2:	21 f8                	and    eax,edi
c00073b4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00073b8:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00073bc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00073c0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00073c4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00073c8:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00073cc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00073cf:	0f ac d0 01          	shrd   eax,edx,0x1
c00073d3:	d1 ea                	shr    edx,1
c00073d5:	89 df                	mov    edi,ebx
c00073d7:	39 c1                	cmp    ecx,eax
c00073d9:	19 d7                	sbb    edi,edx
c00073db:	0f 83 3a 09 00 00    	jae    c0007d1b <f_mkfs+0xcc1>
c00073e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00073e5:	31 d2                	xor    edx,edx
c00073e7:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00073eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00073ef:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00073f3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00073f6:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00073fa:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00073fe:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007402:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007406:	83 f8 0f             	cmp    eax,0xf
c0007409:	0f 86 0c 09 00 00    	jbe    c0007d1b <f_mkfs+0xcc1>
c000740f:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c0007417:	0f 87 fe 08 00 00    	ja     c0007d1b <f_mkfs+0xcc1>
c000741d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007421:	31 d2                	xor    edx,edx
c0007423:	83 c0 07             	add    eax,0x7
c0007426:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000742e:	c1 e8 03             	shr    eax,0x3
c0007431:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c0007439:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000743d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007441:	c1 e0 09             	shl    eax,0x9
c0007444:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000744b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000744f:	48                   	dec    eax
c0007450:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007454:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
c0007458:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000745c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007460:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007467:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000746b:	31 d2                	xor    edx,edx
c000746d:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0007472:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007476:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000747a:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000747e:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007482:	31 ff                	xor    edi,edi
c0007484:	31 f6                	xor    esi,esi
c0007486:	31 db                	xor    ebx,ebx
c0007488:	85 ff                	test   edi,edi
c000748a:	74 05                	je     c0007491 <f_mkfs+0x437>
c000748c:	4f                   	dec    edi
c000748d:	74 44                	je     c00074d3 <f_mkfs+0x479>
c000748f:	eb 4f                	jmp    c00074e0 <f_mkfs+0x486>
c0007491:	83 ec 0c             	sub    esp,0xc
c0007494:	0f b7 c3             	movzx  eax,bx
c0007497:	50                   	push   eax
c0007498:	e8 0e 0e 00 00       	call   c00082ab <ff_wtoupper>
c000749d:	83 c4 10             	add    esp,0x10
c00074a0:	89 c1                	mov    ecx,eax
c00074a2:	66 39 c3             	cmp    bx,ax
c00074a5:	8d 53 01             	lea    edx,[ebx+0x1]
c00074a8:	75 3e                	jne    c00074e8 <f_mkfs+0x48e>
c00074aa:	be 01 00 00 00       	mov    esi,0x1
c00074af:	89 df                	mov    edi,ebx
c00074b1:	66 01 f7             	add    di,si
c00074b4:	75 07                	jne    c00074bd <f_mkfs+0x463>
c00074b6:	83 fe 7f             	cmp    esi,0x7f
c00074b9:	77 31                	ja     c00074ec <f_mkfs+0x492>
c00074bb:	eb 16                	jmp    c00074d3 <f_mkfs+0x479>
c00074bd:	83 ec 0c             	sub    esp,0xc
c00074c0:	0f b7 ff             	movzx  edi,di
c00074c3:	57                   	push   edi
c00074c4:	e8 e2 0d 00 00       	call   c00082ab <ff_wtoupper>
c00074c9:	83 c4 10             	add    esp,0x10
c00074cc:	39 c7                	cmp    edi,eax
c00074ce:	75 e6                	jne    c00074b6 <f_mkfs+0x45c>
c00074d0:	46                   	inc    esi
c00074d1:	eb dc                	jmp    c00074af <f_mkfs+0x455>
c00074d3:	31 c0                	xor    eax,eax
c00074d5:	4e                   	dec    esi
c00074d6:	0f 95 c0             	setne  al
c00074d9:	89 d9                	mov    ecx,ebx
c00074db:	89 c7                	mov    edi,eax
c00074dd:	43                   	inc    ebx
c00074de:	eb 14                	jmp    c00074f4 <f_mkfs+0x49a>
c00074e0:	89 f1                	mov    ecx,esi
c00074e2:	01 f3                	add    ebx,esi
c00074e4:	31 ff                	xor    edi,edi
c00074e6:	eb 0c                	jmp    c00074f4 <f_mkfs+0x49a>
c00074e8:	89 d3                	mov    ebx,edx
c00074ea:	eb 08                	jmp    c00074f4 <f_mkfs+0x49a>
c00074ec:	bf 02 00 00 00       	mov    edi,0x2
c00074f1:	83 c9 ff             	or     ecx,0xffffffff
c00074f4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074f7:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00074fb:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00074ff:	0f b6 c1             	movzx  eax,cl
c0007502:	e8 87 a9 ff ff       	call   c0001e8e <xsum32>
c0007507:	66 c1 e9 08          	shr    cx,0x8
c000750b:	89 c2                	mov    edx,eax
c000750d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007510:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007514:	0f b7 c1             	movzx  eax,cx
c0007517:	e8 72 a9 ff ff       	call   c0001e8e <xsum32>
c000751c:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007521:	66 85 db             	test   bx,bx
c0007524:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007528:	74 1f                	je     c0007549 <f_mkfs+0x4ef>
c000752a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000752d:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007534:	83 c0 02             	add    eax,0x2
c0007537:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c000753d:	39 c2                	cmp    edx,eax
c000753f:	74 08                	je     c0007549 <f_mkfs+0x4ef>
c0007541:	89 04 24             	mov    DWORD PTR [esp],eax
c0007544:	e9 3f ff ff ff       	jmp    c0007488 <f_mkfs+0x42e>
c0007549:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000754c:	83 ec 0c             	sub    esp,0xc
c000754f:	05 01 02 00 00       	add    eax,0x201
c0007554:	c1 e8 09             	shr    eax,0x9
c0007557:	50                   	push   eax
c0007558:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000755c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007560:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007564:	55                   	push   ebp
c0007565:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007569:	e8 f0 a3 ff ff       	call   c000195e <disk_write>
c000756e:	83 c4 20             	add    esp,0x20
c0007571:	85 c0                	test   eax,eax
c0007573:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007576:	0f 85 8b 0b 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c000757c:	89 d0                	mov    eax,edx
c000757e:	31 d2                	xor    edx,edx
c0007580:	01 44 24 48          	add    DWORD PTR [esp+0x48],eax
c0007584:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007588:	66 85 db             	test   bx,bx
c000758b:	74 04                	je     c0007591 <f_mkfs+0x537>
c000758d:	31 c0                	xor    eax,eax
c000758f:	eb b0                	jmp    c0007541 <f_mkfs+0x4e7>
c0007591:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007595:	31 d2                	xor    edx,edx
c0007597:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c000759b:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000759f:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00075a3:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00075aa:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00075ae:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00075b4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00075b8:	8d 70 01             	lea    esi,[eax+0x1]
c00075bb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00075bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00075c3:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00075ce:	c1 eb 09             	shr    ebx,0x9
c00075d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00075d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00075d9:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00075e0:	31 d2                	xor    edx,edx
c00075e2:	25 00 fe ff ff       	and    eax,0xfffffe00
c00075e7:	89 04 24             	mov    DWORD PTR [esp],eax
c00075ea:	89 c1                	mov    ecx,eax
c00075ec:	89 e8                	mov    eax,ebp
c00075ee:	e8 34 a4 ff ff       	call   c0001a27 <mem_set>
c00075f3:	31 c0                	xor    eax,eax
c00075f5:	83 fe 07             	cmp    esi,0x7
c00075f8:	76 10                	jbe    c000760a <f_mkfs+0x5b0>
c00075fa:	39 04 24             	cmp    DWORD PTR [esp],eax
c00075fd:	76 0b                	jbe    c000760a <f_mkfs+0x5b0>
c00075ff:	40                   	inc    eax
c0007600:	83 ee 08             	sub    esi,0x8
c0007603:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007608:	eb eb                	jmp    c00075f5 <f_mkfs+0x59b>
c000760a:	b2 01                	mov    dl,0x1
c000760c:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007610:	85 f6                	test   esi,esi
c0007612:	74 0c                	je     c0007620 <f_mkfs+0x5c6>
c0007614:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007617:	76 07                	jbe    c0007620 <f_mkfs+0x5c6>
c0007619:	08 11                	or     BYTE PTR [ecx],dl
c000761b:	4e                   	dec    esi
c000761c:	01 d2                	add    edx,edx
c000761e:	eb f0                	jmp    c0007610 <f_mkfs+0x5b6>
c0007620:	89 df                	mov    edi,ebx
c0007622:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007626:	76 04                	jbe    c000762c <f_mkfs+0x5d2>
c0007628:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000762c:	83 ec 0c             	sub    esp,0xc
c000762f:	57                   	push   edi
c0007630:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007634:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007638:	55                   	push   ebp
c0007639:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000763d:	e8 1c a3 ff ff       	call   c000195e <disk_write>
c0007642:	83 c4 20             	add    esp,0x20
c0007645:	85 c0                	test   eax,eax
c0007647:	0f 85 ba 0a 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c000764d:	31 d2                	xor    edx,edx
c000764f:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c0007653:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007657:	29 fb                	sub    ebx,edi
c0007659:	0f 85 7a ff ff ff    	jne    c00075d9 <f_mkfs+0x57f>
c000765f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007663:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000766b:	31 f6                	xor    esi,esi
c000766d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007671:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007674:	31 d2                	xor    edx,edx
c0007676:	89 e8                	mov    eax,ebp
c0007678:	e8 aa a3 ff ff       	call   c0001a27 <mem_set>
c000767d:	31 c9                	xor    ecx,ecx
c000767f:	85 db                	test   ebx,ebx
c0007681:	75 40                	jne    c00076c3 <f_mkfs+0x669>
c0007683:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007688:	89 e8                	mov    eax,ebp
c000768a:	e8 7a a3 ff ff       	call   c0001a09 <st_dword>
c000768f:	8d 45 04             	lea    eax,[ebp+0x4]
c0007692:	83 ca ff             	or     edx,0xffffffff
c0007695:	bb 02 00 00 00       	mov    ebx,0x2
c000769a:	e8 6a a3 ff ff       	call   c0001a09 <st_dword>
c000769f:	b9 08 00 00 00       	mov    ecx,0x8
c00076a4:	eb 1d                	jmp    c00076c3 <f_mkfs+0x669>
c00076a6:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00076a9:	76 3b                	jbe    c00076e6 <f_mkfs+0x68c>
c00076ab:	43                   	inc    ebx
c00076ac:	83 fe 01             	cmp    esi,0x1
c00076af:	89 da                	mov    edx,ebx
c00076b1:	77 03                	ja     c00076b6 <f_mkfs+0x65c>
c00076b3:	83 ca ff             	or     edx,0xffffffff
c00076b6:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00076ba:	4e                   	dec    esi
c00076bb:	e8 49 a3 ff ff       	call   c0001a09 <st_dword>
c00076c0:	83 c1 04             	add    ecx,0x4
c00076c3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00076c7:	85 f6                	test   esi,esi
c00076c9:	75 db                	jne    c00076a6 <f_mkfs+0x64c>
c00076cb:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00076d0:	77 14                	ja     c00076e6 <f_mkfs+0x68c>
c00076d2:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00076d9:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00076dd:	85 f6                	test   esi,esi
c00076df:	74 05                	je     c00076e6 <f_mkfs+0x68c>
c00076e1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00076e4:	77 dd                	ja     c00076c3 <f_mkfs+0x669>
c00076e6:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00076ea:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00076ee:	39 cf                	cmp    edi,ecx
c00076f0:	76 02                	jbe    c00076f4 <f_mkfs+0x69a>
c00076f2:	89 cf                	mov    edi,ecx
c00076f4:	83 ec 0c             	sub    esp,0xc
c00076f7:	57                   	push   edi
c00076f8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00076fc:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007700:	55                   	push   ebp
c0007701:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007705:	e8 54 a2 ff ff       	call   c000195e <disk_write>
c000770a:	83 c4 20             	add    esp,0x20
c000770d:	85 c0                	test   eax,eax
c000770f:	0f 85 f2 09 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c0007715:	31 d2                	xor    edx,edx
c0007717:	01 7c 24 40          	add    DWORD PTR [esp+0x40],edi
c000771b:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c000771f:	29 7c 24 50          	sub    DWORD PTR [esp+0x50],edi
c0007723:	0f 85 48 ff ff ff    	jne    c0007671 <f_mkfs+0x617>
c0007729:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000772c:	31 d2                	xor    edx,edx
c000772e:	89 e8                	mov    eax,ebp
c0007730:	31 ff                	xor    edi,edi
c0007732:	e8 f0 a2 ff ff       	call   c0001a27 <mem_set>
c0007737:	8d 45 34             	lea    eax,[ebp+0x34]
c000773a:	ba 02 00 00 00       	mov    edx,0x2
c000773f:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007743:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007747:	e8 bd a2 ff ff       	call   c0001a09 <st_dword>
c000774c:	8d 45 38             	lea    eax,[ebp+0x38]
c000774f:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007753:	e8 b1 a2 ff ff       	call   c0001a09 <st_dword>
c0007758:	8d 45 44             	lea    eax,[ebp+0x44]
c000775b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000775f:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007763:	e8 a1 a2 ff ff       	call   c0001a09 <st_dword>
c0007768:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000776c:	8d 45 54             	lea    eax,[ebp+0x54]
c000776f:	83 c2 02             	add    edx,0x2
c0007772:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007776:	e8 8e a2 ff ff       	call   c0001a09 <st_dword>
c000777b:	8d 45 58             	lea    eax,[ebp+0x58]
c000777e:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007782:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007786:	e8 7e a2 ff ff       	call   c0001a09 <st_dword>
c000778b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000778f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c0007794:	89 c6                	mov    esi,eax
c0007796:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000779a:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000779e:	89 04 24             	mov    DWORD PTR [esp],eax
c00077a1:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00077a5:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00077a8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077ac:	39 cb                	cmp    ebx,ecx
c00077ae:	76 02                	jbe    c00077b2 <f_mkfs+0x758>
c00077b0:	89 cb                	mov    ebx,ecx
c00077b2:	83 ec 0c             	sub    esp,0xc
c00077b5:	53                   	push   ebx
c00077b6:	57                   	push   edi
c00077b7:	56                   	push   esi
c00077b8:	55                   	push   ebp
c00077b9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077bd:	e8 9c a1 ff ff       	call   c000195e <disk_write>
c00077c2:	83 c4 20             	add    esp,0x20
c00077c5:	85 c0                	test   eax,eax
c00077c7:	0f 85 3a 09 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c00077cd:	31 d2                	xor    edx,edx
c00077cf:	b9 00 02 00 00       	mov    ecx,0x200
c00077d4:	89 e8                	mov    eax,ebp
c00077d6:	e8 4c a2 ff ff       	call   c0001a27 <mem_set>
c00077db:	31 d2                	xor    edx,edx
c00077dd:	01 de                	add    esi,ebx
c00077df:	11 d7                	adc    edi,edx
c00077e1:	29 1c 24             	sub    DWORD PTR [esp],ebx
c00077e4:	75 bf                	jne    c00077a5 <f_mkfs+0x74b>
c00077e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00077ea:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00077ee:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00077f6:	b9 00 02 00 00       	mov    ecx,0x200
c00077fb:	31 d2                	xor    edx,edx
c00077fd:	89 e8                	mov    eax,ebp
c00077ff:	e8 23 a2 ff ff       	call   c0001a27 <mem_set>
c0007804:	b9 0b 00 00 00       	mov    ecx,0xb
c0007809:	ba 00 ff 01 c0       	mov    edx,0xc001ff00
c000780e:	89 e8                	mov    eax,ebp
c0007810:	e8 fd a1 ff ff       	call   c0001a12 <mem_cpy>
c0007815:	8d 45 40             	lea    eax,[ebp+0x40]
c0007818:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000781c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007820:	e8 e7 a1 ff ff       	call   c0001a0c <st_qword>
c0007825:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007829:	8d 45 48             	lea    eax,[ebp+0x48]
c000782c:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007830:	e8 d7 a1 ff ff       	call   c0001a0c <st_qword>
c0007835:	8d 45 50             	lea    eax,[ebp+0x50]
c0007838:	ba 20 00 00 00       	mov    edx,0x20
c000783d:	e8 c7 a1 ff ff       	call   c0001a09 <st_dword>
c0007842:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007846:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000784a:	e8 ba a1 ff ff       	call   c0001a09 <st_dword>
c000784f:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007853:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007857:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000785b:	e8 a9 a1 ff ff       	call   c0001a09 <st_dword>
c0007860:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007863:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007867:	e8 9d a1 ff ff       	call   c0001a09 <st_dword>
c000786c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007870:	8d 50 02             	lea    edx,[eax+0x2]
c0007873:	8d 45 60             	lea    eax,[ebp+0x60]
c0007876:	e8 8e a1 ff ff       	call   c0001a09 <st_dword>
c000787b:	8d 45 64             	lea    eax,[ebp+0x64]
c000787e:	ba 00 00 21 50       	mov    edx,0x50210000
c0007883:	e8 81 a1 ff ff       	call   c0001a09 <st_dword>
c0007888:	8d 45 68             	lea    eax,[ebp+0x68]
c000788b:	ba 00 01 00 00       	mov    edx,0x100
c0007890:	e8 70 a1 ff ff       	call   c0001a05 <st_word>
c0007895:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007899:	b8 0a 00 00 00       	mov    eax,0xa
c000789e:	48                   	dec    eax
c000789f:	74 05                	je     c00078a6 <f_mkfs+0x84c>
c00078a1:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00078a4:	eb f8                	jmp    c000789e <f_mkfs+0x844>
c00078a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078aa:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00078ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00078b2:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00078b6:	74 05                	je     c00078bd <f_mkfs+0x863>
c00078b8:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c00078bb:	eb f5                	jmp    c00078b2 <f_mkfs+0x858>
c00078bd:	8d 45 78             	lea    eax,[ebp+0x78]
c00078c0:	ba eb fe 00 00       	mov    edx,0xfeeb
c00078c5:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c00078cb:	31 db                	xor    ebx,ebx
c00078cd:	e8 33 a1 ff ff       	call   c0001a05 <st_word>
c00078d2:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c00078d8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00078dd:	89 04 24             	mov    DWORD PTR [esp],eax
c00078e0:	e8 20 a1 ff ff       	call   c0001a05 <st_word>
c00078e5:	31 c9                	xor    ecx,ecx
c00078e7:	8d 41 96             	lea    eax,[ecx-0x6a]
c00078ea:	83 f8 01             	cmp    eax,0x1
c00078ed:	76 13                	jbe    c0007902 <f_mkfs+0x8a8>
c00078ef:	83 f9 70             	cmp    ecx,0x70
c00078f2:	74 0e                	je     c0007902 <f_mkfs+0x8a8>
c00078f4:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00078f9:	89 da                	mov    edx,ebx
c00078fb:	e8 8e a5 ff ff       	call   c0001e8e <xsum32>
c0007900:	89 c3                	mov    ebx,eax
c0007902:	41                   	inc    ecx
c0007903:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007909:	75 dc                	jne    c00078e7 <f_mkfs+0x88d>
c000790b:	89 f0                	mov    eax,esi
c000790d:	89 fa                	mov    edx,edi
c000790f:	83 c0 01             	add    eax,0x1
c0007912:	83 d2 00             	adc    edx,0x0
c0007915:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007919:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000791d:	83 ec 0c             	sub    esp,0xc
c0007920:	6a 01                	push   0x1
c0007922:	57                   	push   edi
c0007923:	56                   	push   esi
c0007924:	55                   	push   ebp
c0007925:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007929:	e8 30 a0 ff ff       	call   c000195e <disk_write>
c000792e:	83 c4 20             	add    esp,0x20
c0007931:	85 c0                	test   eax,eax
c0007933:	0f 85 ce 07 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c0007939:	31 d2                	xor    edx,edx
c000793b:	b9 00 02 00 00       	mov    ecx,0x200
c0007940:	89 e8                	mov    eax,ebp
c0007942:	e8 e0 a0 ff ff       	call   c0001a27 <mem_set>
c0007947:	ba 55 aa 00 00       	mov    edx,0xaa55
c000794c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000794f:	e8 b1 a0 ff ff       	call   c0001a05 <st_word>
c0007954:	89 f0                	mov    eax,esi
c0007956:	83 c0 09             	add    eax,0x9
c0007959:	89 fa                	mov    edx,edi
c000795b:	83 d2 00             	adc    edx,0x0
c000795e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007961:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007965:	31 c9                	xor    ecx,ecx
c0007967:	41                   	inc    ecx
c0007968:	89 da                	mov    edx,ebx
c000796a:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c000796f:	e8 1a a5 ff ff       	call   c0001e8e <xsum32>
c0007974:	89 c3                	mov    ebx,eax
c0007976:	81 f9 00 02 00 00    	cmp    ecx,0x200
c000797c:	75 e9                	jne    c0007967 <f_mkfs+0x90d>
c000797e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007982:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007986:	83 c0 01             	add    eax,0x1
c0007989:	83 d2 00             	adc    edx,0x0
c000798c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007990:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007994:	83 ec 0c             	sub    esp,0xc
c0007997:	6a 01                	push   0x1
c0007999:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000799d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079a1:	55                   	push   ebp
c00079a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079a6:	e8 b3 9f ff ff       	call   c000195e <disk_write>
c00079ab:	83 c4 20             	add    esp,0x20
c00079ae:	85 c0                	test   eax,eax
c00079b0:	0f 85 51 07 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c00079b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079ba:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c00079be:	75 09                	jne    c00079c9 <f_mkfs+0x96f>
c00079c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00079c3:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c00079c7:	74 12                	je     c00079db <f_mkfs+0x981>
c00079c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00079cd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00079d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079d5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00079d9:	eb 8a                	jmp    c0007965 <f_mkfs+0x90b>
c00079db:	31 d2                	xor    edx,edx
c00079dd:	b9 00 02 00 00       	mov    ecx,0x200
c00079e2:	89 e8                	mov    eax,ebp
c00079e4:	e8 3e a0 ff ff       	call   c0001a27 <mem_set>
c00079e9:	83 c6 0b             	add    esi,0xb
c00079ec:	83 d7 00             	adc    edi,0x0
c00079ef:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00079f3:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c00079f7:	31 c9                	xor    ecx,ecx
c00079f9:	41                   	inc    ecx
c00079fa:	89 da                	mov    edx,ebx
c00079fc:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a01:	e8 88 a4 ff ff       	call   c0001e8e <xsum32>
c0007a06:	89 c3                	mov    ebx,eax
c0007a08:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a0e:	75 e9                	jne    c00079f9 <f_mkfs+0x99f>
c0007a10:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007a13:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007a17:	83 c6 01             	add    esi,0x1
c0007a1a:	83 d7 00             	adc    edi,0x0
c0007a1d:	83 ec 0c             	sub    esp,0xc
c0007a20:	6a 01                	push   0x1
c0007a22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a26:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a2a:	55                   	push   ebp
c0007a2b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a2f:	e8 2a 9f ff ff       	call   c000195e <disk_write>
c0007a34:	83 c4 20             	add    esp,0x20
c0007a37:	85 c0                	test   eax,eax
c0007a39:	0f 85 c8 06 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c0007a3f:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007a43:	75 06                	jne    c0007a4b <f_mkfs+0x9f1>
c0007a45:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007a49:	74 09                	je     c0007a54 <f_mkfs+0x9fa>
c0007a4b:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a4e:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007a52:	eb a3                	jmp    c00079f7 <f_mkfs+0x99d>
c0007a54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007a58:	89 da                	mov    edx,ebx
c0007a5a:	01 e8                	add    eax,ebp
c0007a5c:	e8 a8 9f ff ff       	call   c0001a09 <st_dword>
c0007a61:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007a66:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007a6e:	75 e4                	jne    c0007a54 <f_mkfs+0x9fa>
c0007a70:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007a73:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007a77:	83 c6 02             	add    esi,0x2
c0007a7a:	83 d7 00             	adc    edi,0x0
c0007a7d:	83 ec 0c             	sub    esp,0xc
c0007a80:	6a 01                	push   0x1
c0007a82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007a86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007a8a:	55                   	push   ebp
c0007a8b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a8f:	e8 ca 9e ff ff       	call   c000195e <disk_write>
c0007a94:	83 c4 20             	add    esp,0x20
c0007a97:	85 c0                	test   eax,eax
c0007a99:	0f 85 68 06 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c0007a9f:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007aa4:	74 0d                	je     c0007ab3 <f_mkfs+0xa59>
c0007aa6:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007aae:	e9 43 fd ff ff       	jmp    c00077f6 <f_mkfs+0x79c>
c0007ab3:	b1 07                	mov    cl,0x7
c0007ab5:	e9 e3 05 00 00       	jmp    c000809d <f_mkfs+0x1043>
c0007aba:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007abf:	0f 85 4f 02 00 00    	jne    c0007d14 <f_mkfs+0xcba>
c0007ac5:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007aca:	0f 86 22 02 00 00    	jbe    c0007cf2 <f_mkfs+0xc98>
c0007ad0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ad5:	0f 85 81 06 00 00    	jne    c000815c <f_mkfs+0x1102>
c0007adb:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007ade:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007ae2:	83 f8 40             	cmp    eax,0x40
c0007ae5:	0f 87 51 06 00 00    	ja     c000813c <f_mkfs+0x10e2>
c0007aeb:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007aef:	85 ff                	test   edi,edi
c0007af1:	75 1c                	jne    c0007b0f <f_mkfs+0xab5>
c0007af3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007af6:	ba 00 fe 01 c0       	mov    edx,0xc001fe00
c0007afb:	c1 e9 0c             	shr    ecx,0xc
c0007afe:	bf 01 00 00 00       	mov    edi,0x1
c0007b03:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007b06:	66 85 c0             	test   ax,ax
c0007b09:	0f 85 95 01 00 00    	jne    c0007ca4 <f_mkfs+0xc4a>
c0007b0f:	31 d2                	xor    edx,edx
c0007b11:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007b14:	f7 f7                	div    edi
c0007b16:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007b1b:	0f 86 95 01 00 00    	jbe    c0007cb6 <f_mkfs+0xc5c>
c0007b21:	83 c0 02             	add    eax,0x2
c0007b24:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007b29:	01 c0                	add    eax,eax
c0007b2b:	05 ff 01 00 00       	add    eax,0x1ff
c0007b30:	be 01 00 00 00       	mov    esi,0x1
c0007b35:	c1 e8 09             	shr    eax,0x9
c0007b38:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007b3c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b40:	c1 e0 05             	shl    eax,0x5
c0007b43:	c1 e8 09             	shr    eax,0x9
c0007b46:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007b4a:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0007b4f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007b53:	89 f0                	mov    eax,esi
c0007b55:	31 d2                	xor    edx,edx
c0007b57:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007b5b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007b5f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007b63:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007b67:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007b6b:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007b70:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007b74:	31 d2                	xor    edx,edx
c0007b76:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007b7a:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007b7e:	31 db                	xor    ebx,ebx
c0007b80:	01 c8                	add    eax,ecx
c0007b82:	11 da                	adc    edx,ebx
c0007b84:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007b88:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007b8c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007b90:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007b94:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007b98:	f7 da                	neg    edx
c0007b9a:	21 d1                	and    ecx,edx
c0007b9c:	29 d9                	sub    ecx,ebx
c0007b9e:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ba3:	0f 85 20 01 00 00    	jne    c0007cc9 <f_mkfs+0xc6f>
c0007ba9:	31 db                	xor    ebx,ebx
c0007bab:	01 ce                	add    esi,ecx
c0007bad:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007bb1:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007bb5:	89 f8                	mov    eax,edi
c0007bb7:	31 d2                	xor    edx,edx
c0007bb9:	c1 e0 04             	shl    eax,0x4
c0007bbc:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007bc0:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007bc4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007bc8:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007bcc:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007bd0:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007bd3:	19 d3                	sbb    ebx,edx
c0007bd5:	0f 82 40 01 00 00    	jb     c0007d1b <f_mkfs+0xcc1>
c0007bdb:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007bdf:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007be2:	0f af 54 24 50       	imul   edx,DWORD PTR [esp+0x50]
c0007be7:	89 c8                	mov    eax,ecx
c0007be9:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
c0007bed:	29 f0                	sub    eax,esi
c0007bef:	29 d0                	sub    eax,edx
c0007bf1:	31 d2                	xor    edx,edx
c0007bf3:	f7 f7                	div    edi
c0007bf5:	89 c3                	mov    ebx,eax
c0007bf7:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007bfc:	0f 85 b8 fe ff ff    	jne    c0007aba <f_mkfs+0xa60>
c0007c02:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007c07:	0f 87 1d 01 00 00    	ja     c0007d2a <f_mkfs+0xcd0>
c0007c0d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c12:	0f 85 03 01 00 00    	jne    c0007d1b <f_mkfs+0xcc1>
c0007c18:	83 ff 01             	cmp    edi,0x1
c0007c1b:	0f 86 fa 00 00 00    	jbe    c0007d1b <f_mkfs+0xcc1>
c0007c21:	d1 ef                	shr    edi,1
c0007c23:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007c27:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c2b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c2e:	85 db                	test   ebx,ebx
c0007c30:	75 2d                	jne    c0007c5f <f_mkfs+0xc05>
c0007c32:	89 cb                	mov    ebx,ecx
c0007c34:	ba 10 fe 01 c0       	mov    edx,0xc001fe10
c0007c39:	c1 eb 11             	shr    ebx,0x11
c0007c3c:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007c44:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c47:	66 85 c0             	test   ax,ax
c0007c4a:	74 11                	je     c0007c5d <f_mkfs+0xc03>
c0007c4c:	83 c2 02             	add    edx,0x2
c0007c4f:	39 d8                	cmp    eax,ebx
c0007c51:	77 0a                	ja     c0007c5d <f_mkfs+0xc03>
c0007c53:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007c57:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007c5b:	eb e7                	jmp    c0007c44 <f_mkfs+0xbea>
c0007c5d:	31 db                	xor    ebx,ebx
c0007c5f:	31 d2                	xor    edx,edx
c0007c61:	89 c8                	mov    eax,ecx
c0007c63:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007c67:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007c6e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007c73:	c1 ea 09             	shr    edx,0x9
c0007c76:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007c7b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c7f:	0f 87 96 00 00 00    	ja     c0007d1b <f_mkfs+0xcc1>
c0007c85:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007c89:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0007c91:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c95:	be 20 00 00 00       	mov    esi,0x20
c0007c9a:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007c9f:	e9 a6 fe ff ff       	jmp    c0007b4a <f_mkfs+0xaf0>
c0007ca4:	83 c2 02             	add    edx,0x2
c0007ca7:	39 c8                	cmp    eax,ecx
c0007ca9:	0f 87 60 fe ff ff    	ja     c0007b0f <f_mkfs+0xab5>
c0007caf:	01 ff                	add    edi,edi
c0007cb1:	e9 4d fe ff ff       	jmp    c0007b03 <f_mkfs+0xaa9>
c0007cb6:	8d 04 40             	lea    eax,[eax+eax*2]
c0007cb9:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007cbe:	40                   	inc    eax
c0007cbf:	d1 e8                	shr    eax,1
c0007cc1:	83 c0 03             	add    eax,0x3
c0007cc4:	e9 62 fe ff ff       	jmp    c0007b2b <f_mkfs+0xad1>
c0007cc9:	31 d2                	xor    edx,edx
c0007ccb:	89 c8                	mov    eax,ecx
c0007ccd:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007cd1:	85 d2                	test   edx,edx
c0007cd3:	74 0c                	je     c0007ce1 <f_mkfs+0xc87>
c0007cd5:	49                   	dec    ecx
c0007cd6:	46                   	inc    esi
c0007cd7:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007cdc:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ce1:	89 c8                	mov    eax,ecx
c0007ce3:	31 d2                	xor    edx,edx
c0007ce5:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007ce9:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007ced:	e9 c3 fe ff ff       	jmp    c0007bb5 <f_mkfs+0xb5b>
c0007cf2:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007cf7:	77 31                	ja     c0007d2a <f_mkfs+0xcd0>
c0007cf9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007cfe:	75 1b                	jne    c0007d1b <f_mkfs+0xcc1>
c0007d00:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007d03:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007d07:	3d 80 00 00 00       	cmp    eax,0x80
c0007d0c:	0f 86 d9 fd ff ff    	jbe    c0007aeb <f_mkfs+0xa91>
c0007d12:	eb 07                	jmp    c0007d1b <f_mkfs+0xcc1>
c0007d14:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d19:	76 0a                	jbe    c0007d25 <f_mkfs+0xccb>
c0007d1b:	bb 0e 00 00 00       	mov    ebx,0xe
c0007d20:	e9 ff 03 00 00       	jmp    c0008124 <f_mkfs+0x10ca>
c0007d25:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d2a:	31 d2                	xor    edx,edx
c0007d2c:	b9 00 02 00 00       	mov    ecx,0x200
c0007d31:	89 e8                	mov    eax,ebp
c0007d33:	e8 ef 9c ff ff       	call   c0001a27 <mem_set>
c0007d38:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d3d:	ba 22 ff 01 c0       	mov    edx,0xc001ff22
c0007d42:	89 e8                	mov    eax,ebp
c0007d44:	e8 c9 9c ff ff       	call   c0001a12 <mem_cpy>
c0007d49:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007d4c:	ba 00 02 00 00       	mov    edx,0x200
c0007d51:	e8 af 9c ff ff       	call   c0001a05 <st_word>
c0007d56:	89 f8                	mov    eax,edi
c0007d58:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007d5b:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007d5e:	0f b7 d6             	movzx  edx,si
c0007d61:	e8 9f 9c ff ff       	call   c0001a05 <st_word>
c0007d66:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0007d6a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007d6d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007d72:	75 08                	jne    c0007d7c <f_mkfs+0xd22>
c0007d74:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007d7c:	8d 45 11             	lea    eax,[ebp+0x11]
c0007d7f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007d83:	e8 7d 9c ff ff       	call   c0001a05 <st_word>
c0007d88:	b8 ff ff 00 00       	mov    eax,0xffff
c0007d8d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007d91:	39 d0                	cmp    eax,edx
c0007d93:	b8 00 00 00 00       	mov    eax,0x0
c0007d98:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007d9c:	72 0a                	jb     c0007da8 <f_mkfs+0xd4e>
c0007d9e:	8d 45 13             	lea    eax,[ebp+0x13]
c0007da1:	e8 5f 9c ff ff       	call   c0001a05 <st_word>
c0007da6:	eb 08                	jmp    c0007db0 <f_mkfs+0xd56>
c0007da8:	8d 45 20             	lea    eax,[ebp+0x20]
c0007dab:	e8 59 9c ff ff       	call   c0001a09 <st_dword>
c0007db0:	8d 45 18             	lea    eax,[ebp+0x18]
c0007db3:	ba 3f 00 00 00       	mov    edx,0x3f
c0007db8:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007dbc:	e8 44 9c ff ff       	call   c0001a05 <st_word>
c0007dc1:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007dc4:	ba ff 00 00 00       	mov    edx,0xff
c0007dc9:	e8 37 9c ff ff       	call   c0001a05 <st_word>
c0007dce:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007dd1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007dd5:	e8 2f 9c ff ff       	call   c0001a09 <st_dword>
c0007dda:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ddf:	75 57                	jne    c0007e38 <f_mkfs+0xdde>
c0007de1:	8d 45 43             	lea    eax,[ebp+0x43]
c0007de4:	ba 00 00 21 50       	mov    edx,0x50210000
c0007de9:	e8 1b 9c ff ff       	call   c0001a09 <st_dword>
c0007dee:	8d 45 24             	lea    eax,[ebp+0x24]
c0007df1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007df5:	e8 0f 9c ff ff       	call   c0001a09 <st_dword>
c0007dfa:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007dfd:	ba 02 00 00 00       	mov    edx,0x2
c0007e02:	e8 02 9c ff ff       	call   c0001a09 <st_dword>
c0007e07:	8d 45 30             	lea    eax,[ebp+0x30]
c0007e0a:	ba 01 00 00 00       	mov    edx,0x1
c0007e0f:	e8 f1 9b ff ff       	call   c0001a05 <st_word>
c0007e14:	8d 45 32             	lea    eax,[ebp+0x32]
c0007e17:	ba 06 00 00 00       	mov    edx,0x6
c0007e1c:	e8 e4 9b ff ff       	call   c0001a05 <st_word>
c0007e21:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007e25:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007e29:	8d 45 47             	lea    eax,[ebp+0x47]
c0007e2c:	b9 13 00 00 00       	mov    ecx,0x13
c0007e31:	ba 2e ff 01 c0       	mov    edx,0xc001ff2e
c0007e36:	eb 2f                	jmp    c0007e67 <f_mkfs+0xe0d>
c0007e38:	8d 45 27             	lea    eax,[ebp+0x27]
c0007e3b:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e40:	e8 c4 9b ff ff       	call   c0001a09 <st_dword>
c0007e45:	8d 45 16             	lea    eax,[ebp+0x16]
c0007e48:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007e4d:	e8 b3 9b ff ff       	call   c0001a05 <st_word>
c0007e52:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007e56:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007e5a:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007e5d:	b9 13 00 00 00       	mov    ecx,0x13
c0007e62:	ba 42 ff 01 c0       	mov    edx,0xc001ff42
c0007e67:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007e6d:	e8 a0 9b ff ff       	call   c0001a12 <mem_cpy>
c0007e72:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007e77:	89 f0                	mov    eax,esi
c0007e79:	e8 87 9b ff ff       	call   c0001a05 <st_word>
c0007e7e:	83 ec 0c             	sub    esp,0xc
c0007e81:	6a 01                	push   0x1
c0007e83:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007e87:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007e8b:	55                   	push   ebp
c0007e8c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007e90:	e8 c9 9a ff ff       	call   c000195e <disk_write>
c0007e95:	83 c4 20             	add    esp,0x20
c0007e98:	85 c0                	test   eax,eax
c0007e9a:	0f 85 67 02 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c0007ea0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ea5:	0f 85 b7 00 00 00    	jne    c0007f62 <f_mkfs+0xf08>
c0007eab:	83 ec 0c             	sub    esp,0xc
c0007eae:	6a 01                	push   0x1
c0007eb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007eb4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007eb8:	83 c0 06             	add    eax,0x6
c0007ebb:	83 d2 00             	adc    edx,0x0
c0007ebe:	52                   	push   edx
c0007ebf:	50                   	push   eax
c0007ec0:	55                   	push   ebp
c0007ec1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ec5:	e8 94 9a ff ff       	call   c000195e <disk_write>
c0007eca:	83 c4 20             	add    esp,0x20
c0007ecd:	b9 00 02 00 00       	mov    ecx,0x200
c0007ed2:	31 d2                	xor    edx,edx
c0007ed4:	89 e8                	mov    eax,ebp
c0007ed6:	e8 4c 9b ff ff       	call   c0001a27 <mem_set>
c0007edb:	ba 52 52 61 41       	mov    edx,0x41615252
c0007ee0:	89 e8                	mov    eax,ebp
c0007ee2:	e8 22 9b ff ff       	call   c0001a09 <st_dword>
c0007ee7:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007eed:	ba 72 72 41 61       	mov    edx,0x61417272
c0007ef2:	e8 12 9b ff ff       	call   c0001a09 <st_dword>
c0007ef7:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007efa:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007f00:	e8 04 9b ff ff       	call   c0001a09 <st_dword>
c0007f05:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007f0b:	ba 02 00 00 00       	mov    edx,0x2
c0007f10:	e8 f4 9a ff ff       	call   c0001a09 <st_dword>
c0007f15:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f1a:	89 f0                	mov    eax,esi
c0007f1c:	e8 e4 9a ff ff       	call   c0001a05 <st_word>
c0007f21:	83 ec 0c             	sub    esp,0xc
c0007f24:	6a 01                	push   0x1
c0007f26:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f2a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f2e:	83 c0 07             	add    eax,0x7
c0007f31:	83 d2 00             	adc    edx,0x0
c0007f34:	52                   	push   edx
c0007f35:	50                   	push   eax
c0007f36:	55                   	push   ebp
c0007f37:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f3b:	e8 1e 9a ff ff       	call   c000195e <disk_write>
c0007f40:	83 c4 14             	add    esp,0x14
c0007f43:	6a 01                	push   0x1
c0007f45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f49:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f4d:	83 c0 01             	add    eax,0x1
c0007f50:	83 d2 00             	adc    edx,0x0
c0007f53:	52                   	push   edx
c0007f54:	50                   	push   eax
c0007f55:	55                   	push   ebp
c0007f56:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f5a:	e8 ff 99 ff ff       	call   c000195e <disk_write>
c0007f5f:	83 c4 20             	add    esp,0x20
c0007f62:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0007f69:	31 d2                	xor    edx,edx
c0007f6b:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0007f71:	31 db                	xor    ebx,ebx
c0007f73:	89 e8                	mov    eax,ebp
c0007f75:	e8 ad 9a ff ff       	call   c0001a27 <mem_set>
c0007f7a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007f81:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0007f86:	0f 94 c3             	sete   bl
c0007f89:	4b                   	dec    ebx
c0007f8a:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0007f90:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0007f96:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f9b:	75 21                	jne    c0007fbe <f_mkfs+0xf64>
c0007f9d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007fa2:	89 e8                	mov    eax,ebp
c0007fa4:	e8 60 9a ff ff       	call   c0001a09 <st_dword>
c0007fa9:	8d 45 04             	lea    eax,[ebp+0x4]
c0007fac:	83 ca ff             	or     edx,0xffffffff
c0007faf:	e8 55 9a ff ff       	call   c0001a09 <st_dword>
c0007fb4:	8d 45 08             	lea    eax,[ebp+0x8]
c0007fb7:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0007fbc:	eb 04                	jmp    c0007fc2 <f_mkfs+0xf68>
c0007fbe:	89 da                	mov    edx,ebx
c0007fc0:	89 e8                	mov    eax,ebp
c0007fc2:	e8 42 9a ff ff       	call   c0001a09 <st_dword>
c0007fc7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007fcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007fcf:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007fd3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007fd7:	39 ce                	cmp    esi,ecx
c0007fd9:	76 02                	jbe    c0007fdd <f_mkfs+0xf83>
c0007fdb:	89 ce                	mov    esi,ecx
c0007fdd:	83 ec 0c             	sub    esp,0xc
c0007fe0:	56                   	push   esi
c0007fe1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0007fe5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0007fe9:	55                   	push   ebp
c0007fea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fee:	e8 6b 99 ff ff       	call   c000195e <disk_write>
c0007ff3:	83 c4 20             	add    esp,0x20
c0007ff6:	85 c0                	test   eax,eax
c0007ff8:	0f 85 09 01 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	b9 00 02 00 00       	mov    ecx,0x200
c0008005:	89 e8                	mov    eax,ebp
c0008007:	e8 1b 9a ff ff       	call   c0001a27 <mem_set>
c000800c:	31 d2                	xor    edx,edx
c000800e:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c0008012:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008016:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000801a:	75 b3                	jne    c0007fcf <f_mkfs+0xf75>
c000801c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000801f:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008026:	40                   	inc    eax
c0008027:	39 44 24 50          	cmp    DWORD PTR [esp+0x50],eax
c000802b:	0f 87 65 ff ff ff    	ja     c0007f96 <f_mkfs+0xf3c>
c0008031:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008036:	74 04                	je     c000803c <f_mkfs+0xfe2>
c0008038:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c000803c:	89 fb                	mov    ebx,edi
c000803e:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c0008042:	76 04                	jbe    c0008048 <f_mkfs+0xfee>
c0008044:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008048:	83 ec 0c             	sub    esp,0xc
c000804b:	53                   	push   ebx
c000804c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008050:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008054:	55                   	push   ebp
c0008055:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008059:	e8 00 99 ff ff       	call   c000195e <disk_write>
c000805e:	83 c4 20             	add    esp,0x20
c0008061:	85 c0                	test   eax,eax
c0008063:	0f 85 9e 00 00 00    	jne    c0008107 <f_mkfs+0x10ad>
c0008069:	31 d2                	xor    edx,edx
c000806b:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000806f:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008073:	29 df                	sub    edi,ebx
c0008075:	75 c5                	jne    c000803c <f_mkfs+0xfe2>
c0008077:	b1 0c                	mov    cl,0xc
c0008079:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000807e:	74 1d                	je     c000809d <f_mkfs+0x1043>
c0008080:	b8 ff ff 00 00       	mov    eax,0xffff
c0008085:	b1 06                	mov    cl,0x6
c0008087:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c000808b:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000808f:	72 0c                	jb     c000809d <f_mkfs+0x1043>
c0008091:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008096:	0f 94 c1             	sete   cl
c0008099:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c000809d:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00080a2:	75 4c                	jne    c00080f0 <f_mkfs+0x1096>
c00080a4:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00080a8:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00080ac:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00080b3:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00080ba:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00080c5:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00080d0:	83 ec 0c             	sub    esp,0xc
c00080d3:	0f b6 c9             	movzx  ecx,cl
c00080d6:	55                   	push   ebp
c00080d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00080db:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00080e2:	e8 58 c2 ff ff       	call   c000433f <create_partition>
c00080e7:	83 c4 10             	add    esp,0x10
c00080ea:	89 c3                	mov    ebx,eax
c00080ec:	85 c0                	test   eax,eax
c00080ee:	75 34                	jne    c0008124 <f_mkfs+0x10ca>
c00080f0:	50                   	push   eax
c00080f1:	31 db                	xor    ebx,ebx
c00080f3:	6a 00                	push   0x0
c00080f5:	6a 00                	push   0x0
c00080f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00080fb:	e8 74 98 ff ff       	call   c0001974 <disk_ioctl>
c0008100:	83 c4 10             	add    esp,0x10
c0008103:	85 c0                	test   eax,eax
c0008105:	74 1d                	je     c0008124 <f_mkfs+0x10ca>
c0008107:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000810f:	75 0c                	jne    c000811d <f_mkfs+0x10c3>
c0008111:	83 ec 0c             	sub    esp,0xc
c0008114:	55                   	push   ebp
c0008115:	e8 75 00 00 00       	call   c000818f <ff_memfree>
c000811a:	83 c4 10             	add    esp,0x10
c000811d:	bb 01 00 00 00       	mov    ebx,0x1
c0008122:	eb 48                	jmp    c000816c <f_mkfs+0x1112>
c0008124:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000812c:	75 3e                	jne    c000816c <f_mkfs+0x1112>
c000812e:	83 ec 0c             	sub    esp,0xc
c0008131:	55                   	push   ebp
c0008132:	e8 58 00 00 00       	call   c000818f <ff_memfree>
c0008137:	83 c4 10             	add    esp,0x10
c000813a:	eb 30                	jmp    c000816c <f_mkfs+0x1112>
c000813c:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008141:	0f 85 eb fa ff ff    	jne    c0007c32 <f_mkfs+0xbd8>
c0008147:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000814b:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008151:	0f 86 b8 f9 ff ff    	jbe    c0007b0f <f_mkfs+0xab5>
c0008157:	e9 bf fb ff ff       	jmp    c0007d1b <f_mkfs+0xcc1>
c000815c:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008161:	0f 85 c0 fa ff ff    	jne    c0007c27 <f_mkfs+0xbcd>
c0008167:	e9 af fb ff ff       	jmp    c0007d1b <f_mkfs+0xcc1>
c000816c:	81 c4 9c 00 00 00    	add    esp,0x9c
c0008172:	89 d8                	mov    eax,ebx
c0008174:	5b                   	pop    ebx
c0008175:	5e                   	pop    esi
c0008176:	5f                   	pop    edi
c0008177:	5d                   	pop    ebp
c0008178:	c3                   	ret    

c0008179 <ff_memalloc>:
c0008179:	83 ec 0c             	sub    esp,0xc
c000817c:	83 ec 0c             	sub    esp,0xc
c000817f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008183:	e8 9f 3d 00 00       	call   c000bf27 <malloc>
c0008188:	83 c4 10             	add    esp,0x10
c000818b:	83 c4 0c             	add    esp,0xc
c000818e:	c3                   	ret    

c000818f <ff_memfree>:
c000818f:	83 ec 0c             	sub    esp,0xc
c0008192:	83 ec 0c             	sub    esp,0xc
c0008195:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008199:	e8 99 3d 00 00       	call   c000bf37 <free>
c000819e:	83 c4 10             	add    esp,0x10
c00081a1:	90                   	nop
c00081a2:	83 c4 0c             	add    esp,0xc
c00081a5:	c3                   	ret    

c00081a6 <ff_uni2oem>:
c00081a6:	83 ec 14             	sub    esp,0x14
c00081a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081ad:	66 89 04 24          	mov    WORD PTR [esp],ax
c00081b1:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00081b8:	c7 44 24 0c 60 02 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020260
c00081c0:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00081c5:	77 0b                	ja     c00081d2 <ff_uni2oem+0x2c>
c00081c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081cb:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00081d0:	eb 61                	jmp    c0008233 <ff_uni2oem+0x8d>
c00081d2:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00081da:	77 57                	ja     c0008233 <ff_uni2oem+0x8d>
c00081dc:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00081e2:	75 4f                	jne    c0008233 <ff_uni2oem+0x8d>
c00081e4:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00081eb:	eb 0b                	jmp    c00081f8 <ff_uni2oem+0x52>
c00081ed:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00081f2:	40                   	inc    eax
c00081f3:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00081f8:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00081fe:	77 21                	ja     c0008221 <ff_uni2oem+0x7b>
c0008200:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008205:	25 ff ff 00 00       	and    eax,0xffff
c000820a:	8d 14 00             	lea    edx,[eax+eax*1]
c000820d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008211:	01 d0                	add    eax,edx
c0008213:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008216:	25 ff ff 00 00       	and    eax,0xffff
c000821b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000821f:	75 cc                	jne    c00081ed <ff_uni2oem+0x47>
c0008221:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008226:	83 e8 80             	sub    eax,0xffffff80
c0008229:	25 ff 00 00 00       	and    eax,0xff
c000822e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008233:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008238:	83 c4 14             	add    esp,0x14
c000823b:	c3                   	ret    

c000823c <ff_oem2uni>:
c000823c:	83 ec 18             	sub    esp,0x18
c000823f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008243:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008247:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000824c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008250:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008257:	c7 44 24 10 60 02 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020260
c000825f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0008265:	77 0b                	ja     c0008272 <ff_oem2uni+0x36>
c0008267:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008270:	eb 30                	jmp    c00082a2 <ff_oem2uni+0x66>
c0008272:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008278:	75 28                	jne    c00082a2 <ff_oem2uni+0x66>
c000827a:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008281:	77 1f                	ja     c00082a2 <ff_oem2uni+0x66>
c0008283:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008287:	25 ff ff 00 00       	and    eax,0xffff
c000828c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008291:	8d 14 00             	lea    edx,[eax+eax*1]
c0008294:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008298:	01 d0                	add    eax,edx
c000829a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000829d:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082a2:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00082a7:	83 c4 18             	add    esp,0x18
c00082aa:	c3                   	ret    

c00082ab <ff_wtoupper>:
c00082ab:	83 ec 10             	sub    esp,0x10
c00082ae:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00082b6:	0f 87 62 01 00 00    	ja     c000841e <ff_wtoupper+0x173>
c00082bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00082c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00082c5:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00082cc:	77 07                	ja     c00082d5 <ff_wtoupper+0x2a>
c00082ce:	b8 60 00 02 c0       	mov    eax,0xc0020060
c00082d3:	eb 05                	jmp    c00082da <ff_wtoupper+0x2f>
c00082d5:	b8 a0 ff 01 c0       	mov    eax,0xc001ffa0
c00082da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082e2:	8d 50 02             	lea    edx,[eax+0x2]
c00082e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00082e9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082ec:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00082f1:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00082f7:	0f 84 13 01 00 00    	je     c0008410 <ff_wtoupper+0x165>
c00082fd:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008302:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008307:	0f 82 03 01 00 00    	jb     c0008410 <ff_wtoupper+0x165>
c000830d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008311:	8d 50 02             	lea    edx,[eax+0x2]
c0008314:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008318:	66 8b 00             	mov    ax,WORD PTR [eax]
c000831b:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008320:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008325:	66 c1 e8 08          	shr    ax,0x8
c0008329:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000832e:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008335:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000833a:	31 d2                	xor    edx,edx
c000833c:	66 89 c2             	mov    dx,ax
c000833f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008343:	31 c9                	xor    ecx,ecx
c0008345:	66 89 c1             	mov    cx,ax
c0008348:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c000834d:	25 ff ff 00 00       	and    eax,0xffff
c0008352:	01 c8                	add    eax,ecx
c0008354:	39 c2                	cmp    edx,eax
c0008356:	0f 8d 92 00 00 00    	jge    c00083ee <ff_wtoupper+0x143>
c000835c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008360:	25 ff ff 00 00       	and    eax,0xffff
c0008365:	83 f8 08             	cmp    eax,0x8
c0008368:	0f 87 a1 00 00 00    	ja     c000840f <ff_wtoupper+0x164>
c000836e:	8b 04 85 60 ff 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe00a0]
c0008375:	ff e0                	jmp    eax
c0008377:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000837c:	31 d2                	xor    edx,edx
c000837e:	66 89 c2             	mov    dx,ax
c0008381:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008385:	25 ff ff 00 00       	and    eax,0xffff
c000838a:	29 c2                	sub    edx,eax
c000838c:	89 d0                	mov    eax,edx
c000838e:	8d 14 00             	lea    edx,[eax+eax*1]
c0008391:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008395:	01 d0                	add    eax,edx
c0008397:	66 8b 00             	mov    ax,WORD PTR [eax]
c000839a:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000839f:	eb 4b                	jmp    c00083ec <ff_wtoupper+0x141>
c00083a1:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083a6:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00083aa:	83 e0 01             	and    eax,0x1
c00083ad:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00083b2:	eb 38                	jmp    c00083ec <ff_wtoupper+0x141>
c00083b4:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00083ba:	eb 30                	jmp    c00083ec <ff_wtoupper+0x141>
c00083bc:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00083c2:	eb 28                	jmp    c00083ec <ff_wtoupper+0x141>
c00083c4:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00083ca:	eb 20                	jmp    c00083ec <ff_wtoupper+0x141>
c00083cc:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00083d2:	eb 18                	jmp    c00083ec <ff_wtoupper+0x141>
c00083d4:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00083da:	eb 10                	jmp    c00083ec <ff_wtoupper+0x141>
c00083dc:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00083e2:	eb 08                	jmp    c00083ec <ff_wtoupper+0x141>
c00083e4:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00083eb:	90                   	nop
c00083ec:	eb 21                	jmp    c000840f <ff_wtoupper+0x164>
c00083ee:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00083f4:	0f 85 e4 fe ff ff    	jne    c00082de <ff_wtoupper+0x33>
c00083fa:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083ff:	25 ff ff 00 00       	and    eax,0xffff
c0008404:	01 c0                	add    eax,eax
c0008406:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000840a:	e9 cf fe ff ff       	jmp    c00082de <ff_wtoupper+0x33>
c000840f:	90                   	nop
c0008410:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008415:	25 ff ff 00 00       	and    eax,0xffff
c000841a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000841e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008422:	83 c4 10             	add    esp,0x10
c0008425:	c3                   	ret    

c0008426 <is_bad_src_ratio>:
c0008426:	83 ec 0c             	sub    esp,0xc
c0008429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842d:	89 04 24             	mov    DWORD PTR [esp],eax
c0008430:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008434:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008438:	dd 04 24             	fld    QWORD PTR [esp]
c000843b:	dd 05 20 08 02 c0    	fld    QWORD PTR ds:0xc0020820
c0008441:	de d9                	fcompp 
c0008443:	df e0                	fnstsw ax
c0008445:	f6 c4 45             	test   ah,0x45
c0008448:	74 10                	je     c000845a <is_bad_src_ratio+0x34>
c000844a:	dd 04 24             	fld    QWORD PTR [esp]
c000844d:	dc 1d 28 08 02 c0    	fcomp  QWORD PTR ds:0xc0020828
c0008453:	df e0                	fnstsw ax
c0008455:	f6 c4 45             	test   ah,0x45
c0008458:	75 07                	jne    c0008461 <is_bad_src_ratio+0x3b>
c000845a:	b8 01 00 00 00       	mov    eax,0x1
c000845f:	eb 05                	jmp    c0008466 <is_bad_src_ratio+0x40>
c0008461:	b8 00 00 00 00       	mov    eax,0x0
c0008466:	83 c4 0c             	add    esp,0xc
c0008469:	c3                   	ret    

c000846a <psrc_set_converter>:
c000846a:	56                   	push   esi
c000846b:	89 d6                	mov    esi,edx
c000846d:	53                   	push   ebx
c000846e:	89 c3                	mov    ebx,eax
c0008470:	83 ec 0c             	sub    esp,0xc
c0008473:	52                   	push   edx
c0008474:	50                   	push   eax
c0008475:	e8 21 24 00 00       	call   c000a89b <sinc_set_converter>
c000847a:	83 c4 10             	add    esp,0x10
c000847d:	85 c0                	test   eax,eax
c000847f:	74 25                	je     c00084a6 <psrc_set_converter+0x3c>
c0008481:	50                   	push   eax
c0008482:	50                   	push   eax
c0008483:	56                   	push   esi
c0008484:	53                   	push   ebx
c0008485:	e8 1c 28 00 00       	call   c000aca6 <zoh_set_converter>
c000848a:	83 c4 10             	add    esp,0x10
c000848d:	85 c0                	test   eax,eax
c000848f:	74 15                	je     c00084a6 <psrc_set_converter+0x3c>
c0008491:	51                   	push   ecx
c0008492:	51                   	push   ecx
c0008493:	56                   	push   esi
c0008494:	53                   	push   ebx
c0008495:	e8 0c 0a 00 00       	call   c0008ea6 <linear_set_converter>
c000849a:	83 c4 10             	add    esp,0x10
c000849d:	ba 0a 00 00 00       	mov    edx,0xa
c00084a2:	85 c0                	test   eax,eax
c00084a4:	75 02                	jne    c00084a8 <psrc_set_converter+0x3e>
c00084a6:	31 d2                	xor    edx,edx
c00084a8:	89 d0                	mov    eax,edx
c00084aa:	5a                   	pop    edx
c00084ab:	5b                   	pop    ebx
c00084ac:	5e                   	pop    esi
c00084ad:	c3                   	ret    

c00084ae <src_delete>:
c00084ae:	53                   	push   ebx
c00084af:	83 ec 08             	sub    esp,0x8
c00084b2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084b6:	85 db                	test   ebx,ebx
c00084b8:	74 29                	je     c00084e3 <src_delete+0x35>
c00084ba:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00084bd:	85 c0                	test   eax,eax
c00084bf:	74 0c                	je     c00084cd <src_delete+0x1f>
c00084c1:	83 ec 0c             	sub    esp,0xc
c00084c4:	50                   	push   eax
c00084c5:	e8 6d 3a 00 00       	call   c000bf37 <free>
c00084ca:	83 c4 10             	add    esp,0x10
c00084cd:	50                   	push   eax
c00084ce:	6a 3c                	push   0x3c
c00084d0:	6a 00                	push   0x0
c00084d2:	53                   	push   ebx
c00084d3:	e8 30 81 ff ff       	call   c0000608 <memset>
c00084d8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00084db:	e8 57 3a 00 00       	call   c000bf37 <free>
c00084e0:	83 c4 10             	add    esp,0x10
c00084e3:	83 c4 08             	add    esp,0x8
c00084e6:	31 c0                	xor    eax,eax
c00084e8:	5b                   	pop    ebx
c00084e9:	c3                   	ret    

c00084ea <src_process>:
c00084ea:	56                   	push   esi
c00084eb:	53                   	push   ebx
c00084ec:	53                   	push   ebx
c00084ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00084f1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00084f5:	85 f6                	test   esi,esi
c00084f7:	0f 84 e2 00 00 00    	je     c00085df <src_process+0xf5>
c00084fd:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0008501:	0f 84 df 00 00 00    	je     c00085e6 <src_process+0xfc>
c0008507:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c000850b:	0f 84 d5 00 00 00    	je     c00085e6 <src_process+0xfc>
c0008511:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008518:	0f 85 cf 00 00 00    	jne    c00085ed <src_process+0x103>
c000851e:	85 db                	test   ebx,ebx
c0008520:	0f 84 ce 00 00 00    	je     c00085f4 <src_process+0x10a>
c0008526:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008529:	0f 84 cc 00 00 00    	je     c00085fb <src_process+0x111>
c000852f:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c0008533:	0f 84 c2 00 00 00    	je     c00085fb <src_process+0x111>
c0008539:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000853c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000853f:	e8 e2 fe ff ff       	call   c0008426 <is_bad_src_ratio>
c0008544:	5a                   	pop    edx
c0008545:	85 c0                	test   eax,eax
c0008547:	59                   	pop    ecx
c0008548:	0f 85 b4 00 00 00    	jne    c0008602 <src_process+0x118>
c000854e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008552:	79 07                	jns    c000855b <src_process+0x71>
c0008554:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000855b:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000855f:	79 07                	jns    c0008568 <src_process+0x7e>
c0008561:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008568:	8b 13                	mov    edx,DWORD PTR [ebx]
c000856a:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000856d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0008570:	39 ca                	cmp    edx,ecx
c0008572:	73 0b                	jae    c000857f <src_process+0x95>
c0008574:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008578:	8d 04 82             	lea    eax,[edx+eax*4]
c000857b:	39 c1                	cmp    ecx,eax
c000857d:	eb 09                	jmp    c0008588 <src_process+0x9e>
c000857f:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c0008583:	8d 04 81             	lea    eax,[ecx+eax*4]
c0008586:	39 c2                	cmp    edx,eax
c0008588:	72 7f                	jb     c0008609 <src_process+0x11f>
c000858a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008591:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008598:	d9 05 40 08 02 c0    	fld    DWORD PTR ds:0xc0020840
c000859e:	dc 1e                	fcomp  QWORD PTR [esi]
c00085a0:	df e0                	fnstsw ax
c00085a2:	9e                   	sahf   
c00085a3:	76 05                	jbe    c00085aa <src_process+0xc0>
c00085a5:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00085a8:	dd 1e                	fstp   QWORD PTR [esi]
c00085aa:	dd 06                	fld    QWORD PTR [esi]
c00085ac:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00085af:	83 ec 10             	sub    esp,0x10
c00085b2:	dd 1c 24             	fstp   QWORD PTR [esp]
c00085b5:	e8 16 6b 01 00       	call   c001f0d0 <fabs>
c00085ba:	83 c4 10             	add    esp,0x10
c00085bd:	dd 05 30 08 02 c0    	fld    QWORD PTR ds:0xc0020830
c00085c3:	de d9                	fcompp 
c00085c5:	df e0                	fnstsw ax
c00085c7:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00085cb:	9e                   	sahf   
c00085cc:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00085d0:	76 05                	jbe    c00085d7 <src_process+0xed>
c00085d2:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00085d5:	eb 03                	jmp    c00085da <src_process+0xf0>
c00085d7:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00085da:	59                   	pop    ecx
c00085db:	5b                   	pop    ebx
c00085dc:	5e                   	pop    esi
c00085dd:	ff e0                	jmp    eax
c00085df:	b8 02 00 00 00       	mov    eax,0x2
c00085e4:	eb 28                	jmp    c000860e <src_process+0x124>
c00085e6:	b8 07 00 00 00       	mov    eax,0x7
c00085eb:	eb 21                	jmp    c000860e <src_process+0x124>
c00085ed:	b8 12 00 00 00       	mov    eax,0x12
c00085f2:	eb 1a                	jmp    c000860e <src_process+0x124>
c00085f4:	b8 03 00 00 00       	mov    eax,0x3
c00085f9:	eb 13                	jmp    c000860e <src_process+0x124>
c00085fb:	b8 04 00 00 00       	mov    eax,0x4
c0008600:	eb 0c                	jmp    c000860e <src_process+0x124>
c0008602:	b8 06 00 00 00       	mov    eax,0x6
c0008607:	eb 05                	jmp    c000860e <src_process+0x124>
c0008609:	b8 10 00 00 00       	mov    eax,0x10
c000860e:	5a                   	pop    edx
c000860f:	5b                   	pop    ebx
c0008610:	5e                   	pop    esi
c0008611:	c3                   	ret    

c0008612 <src_callback_read>:
c0008612:	55                   	push   ebp
c0008613:	57                   	push   edi
c0008614:	56                   	push   esi
c0008615:	53                   	push   ebx
c0008616:	83 ec 4c             	sub    esp,0x4c
c0008619:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c000861d:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c0008621:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0008625:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008629:	85 ff                	test   edi,edi
c000862b:	0f 8e 36 01 00 00    	jle    c0008767 <src_callback_read+0x155>
c0008631:	85 db                	test   ebx,ebx
c0008633:	0f 84 2e 01 00 00    	je     c0008767 <src_callback_read+0x155>
c0008639:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008640:	74 0c                	je     c000864e <src_callback_read+0x3c>
c0008642:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008649:	e9 19 01 00 00       	jmp    c0008767 <src_callback_read+0x155>
c000864e:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c0008652:	75 0c                	jne    c0008660 <src_callback_read+0x4e>
c0008654:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c000865b:	e9 07 01 00 00       	jmp    c0008767 <src_callback_read+0x155>
c0008660:	51                   	push   ecx
c0008661:	6a 24                	push   0x24
c0008663:	6a 00                	push   0x0
c0008665:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008669:	50                   	push   eax
c000866a:	e8 99 7f ff ff       	call   c0000608 <memset>
c000866f:	5e                   	pop    esi
c0008670:	5d                   	pop    ebp
c0008671:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008675:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008679:	e8 a8 fd ff ff       	call   c0008426 <is_bad_src_ratio>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	85 c0                	test   eax,eax
c0008683:	74 0c                	je     c0008691 <src_callback_read+0x7f>
c0008685:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c000868c:	e9 d6 00 00 00       	jmp    c0008767 <src_callback_read+0x155>
c0008691:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0008695:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0008699:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000869d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086a1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00086a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00086a8:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00086ab:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00086af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00086b3:	31 f6                	xor    esi,esi
c00086b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00086ba:	75 30                	jne    c00086ec <src_callback_read+0xda>
c00086bc:	8d 44 24 14          	lea    eax,[esp+0x14]
c00086c0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086c4:	52                   	push   edx
c00086c5:	52                   	push   edx
c00086c6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00086ca:	50                   	push   eax
c00086cb:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086ce:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00086d1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00086d5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00086d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00086dd:	83 c4 10             	add    esp,0x10
c00086e0:	85 c0                	test   eax,eax
c00086e2:	75 08                	jne    c00086ec <src_callback_read+0xda>
c00086e4:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00086ec:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00086f3:	50                   	push   eax
c00086f4:	50                   	push   eax
c00086f5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00086f9:	50                   	push   eax
c00086fa:	53                   	push   ebx
c00086fb:	e8 ea fd ff ff       	call   c00084ea <src_process>
c0008700:	83 c4 10             	add    esp,0x10
c0008703:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c000870a:	85 c0                	test   eax,eax
c000870c:	75 42                	jne    c0008750 <src_callback_read+0x13e>
c000870e:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0008712:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008715:	89 e9                	mov    ecx,ebp
c0008717:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c000871b:	0f af ca             	imul   ecx,edx
c000871e:	c1 e1 02             	shl    ecx,0x2
c0008721:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0008725:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0008729:	0f af d1             	imul   edx,ecx
c000872c:	c1 e2 02             	shl    edx,0x2
c000872f:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c0008733:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008737:	8d 14 31             	lea    edx,[ecx+esi*1]
c000873a:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c000873f:	75 04                	jne    c0008745 <src_callback_read+0x133>
c0008741:	85 c9                	test   ecx,ecx
c0008743:	74 0b                	je     c0008750 <src_callback_read+0x13e>
c0008745:	39 d7                	cmp    edi,edx
c0008747:	7e 09                	jle    c0008752 <src_callback_read+0x140>
c0008749:	89 d6                	mov    esi,edx
c000874b:	e9 65 ff ff ff       	jmp    c00086b5 <src_callback_read+0xa3>
c0008750:	89 f2                	mov    edx,esi
c0008752:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008756:	85 c0                	test   eax,eax
c0008758:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c000875b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000875f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008762:	74 05                	je     c0008769 <src_callback_read+0x157>
c0008764:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008767:	31 d2                	xor    edx,edx
c0008769:	83 c4 4c             	add    esp,0x4c
c000876c:	89 d0                	mov    eax,edx
c000876e:	5b                   	pop    ebx
c000876f:	5e                   	pop    esi
c0008770:	5f                   	pop    edi
c0008771:	5d                   	pop    ebp
c0008772:	c3                   	ret    

c0008773 <src_set_ratio>:
c0008773:	53                   	push   ebx
c0008774:	b8 02 00 00 00       	mov    eax,0x2
c0008779:	83 ec 08             	sub    esp,0x8
c000877c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008780:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c0008784:	85 db                	test   ebx,ebx
c0008786:	74 33                	je     c00087bb <src_set_ratio+0x48>
c0008788:	b8 07 00 00 00       	mov    eax,0x7
c000878d:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008791:	74 2c                	je     c00087bf <src_set_ratio+0x4c>
c0008793:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008797:	74 2a                	je     c00087c3 <src_set_ratio+0x50>
c0008799:	50                   	push   eax
c000879a:	50                   	push   eax
c000879b:	dd 14 24             	fst    QWORD PTR [esp]
c000879e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00087a2:	e8 7f fc ff ff       	call   c0008426 <is_bad_src_ratio>
c00087a7:	5a                   	pop    edx
c00087a8:	59                   	pop    ecx
c00087a9:	85 c0                	test   eax,eax
c00087ab:	75 07                	jne    c00087b4 <src_set_ratio+0x41>
c00087ad:	dd 04 24             	fld    QWORD PTR [esp]
c00087b0:	dd 1b                	fstp   QWORD PTR [ebx]
c00087b2:	eb 11                	jmp    c00087c5 <src_set_ratio+0x52>
c00087b4:	b8 06 00 00 00       	mov    eax,0x6
c00087b9:	eb 0a                	jmp    c00087c5 <src_set_ratio+0x52>
c00087bb:	dd d8                	fstp   st(0)
c00087bd:	eb 06                	jmp    c00087c5 <src_set_ratio+0x52>
c00087bf:	dd d8                	fstp   st(0)
c00087c1:	eb 02                	jmp    c00087c5 <src_set_ratio+0x52>
c00087c3:	dd d8                	fstp   st(0)
c00087c5:	83 c4 08             	add    esp,0x8
c00087c8:	5b                   	pop    ebx
c00087c9:	c3                   	ret    

c00087ca <src_get_channels>:
c00087ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00087ce:	b8 02 00 00 00       	mov    eax,0x2
c00087d3:	85 d2                	test   edx,edx
c00087d5:	74 14                	je     c00087eb <src_get_channels+0x21>
c00087d7:	b8 07 00 00 00       	mov    eax,0x7
c00087dc:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00087e0:	74 09                	je     c00087eb <src_get_channels+0x21>
c00087e2:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c00087e6:	74 03                	je     c00087eb <src_get_channels+0x21>
c00087e8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00087eb:	c3                   	ret    

c00087ec <src_reset>:
c00087ec:	53                   	push   ebx
c00087ed:	b8 02 00 00 00       	mov    eax,0x2
c00087f2:	83 ec 08             	sub    esp,0x8
c00087f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087f9:	85 db                	test   ebx,ebx
c00087fb:	74 2e                	je     c000882b <src_reset+0x3f>
c00087fd:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008800:	85 c0                	test   eax,eax
c0008802:	74 09                	je     c000880d <src_reset+0x21>
c0008804:	83 ec 0c             	sub    esp,0xc
c0008807:	53                   	push   ebx
c0008808:	ff d0                	call   eax
c000880a:	83 c4 10             	add    esp,0x10
c000880d:	d9 ee                	fldz   
c000880f:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008816:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000881d:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008820:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008827:	31 c0                	xor    eax,eax
c0008829:	dd 1b                	fstp   QWORD PTR [ebx]
c000882b:	83 c4 08             	add    esp,0x8
c000882e:	5b                   	pop    ebx
c000882f:	c3                   	ret    

c0008830 <src_new>:
c0008830:	57                   	push   edi
c0008831:	56                   	push   esi
c0008832:	53                   	push   ebx
c0008833:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008837:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000883b:	85 f6                	test   esi,esi
c000883d:	74 73                	je     c00088b2 <src_new+0x82>
c000883f:	85 ff                	test   edi,edi
c0008841:	7f 08                	jg     c000884b <src_new+0x1b>
c0008843:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008849:	eb 1e                	jmp    c0008869 <src_new+0x39>
c000884b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008851:	50                   	push   eax
c0008852:	50                   	push   eax
c0008853:	6a 3c                	push   0x3c
c0008855:	6a 01                	push   0x1
c0008857:	e8 fb 36 00 00       	call   c000bf57 <calloc>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 c3                	mov    ebx,eax
c0008861:	85 c0                	test   eax,eax
c0008863:	75 10                	jne    c0008875 <src_new+0x45>
c0008865:	85 f6                	test   esi,esi
c0008867:	75 04                	jne    c000886d <src_new+0x3d>
c0008869:	31 db                	xor    ebx,ebx
c000886b:	eb 4b                	jmp    c00088b8 <src_new+0x88>
c000886d:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008873:	eb 43                	jmp    c00088b8 <src_new+0x88>
c0008875:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008878:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000887f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008883:	e8 e2 fb ff ff       	call   c000846a <psrc_set_converter>
c0008888:	85 c0                	test   eax,eax
c000888a:	74 18                	je     c00088a4 <src_new+0x74>
c000888c:	85 f6                	test   esi,esi
c000888e:	74 06                	je     c0008896 <src_new+0x66>
c0008890:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008896:	83 ec 0c             	sub    esp,0xc
c0008899:	53                   	push   ebx
c000889a:	31 db                	xor    ebx,ebx
c000889c:	e8 96 36 00 00       	call   c000bf37 <free>
c00088a1:	83 c4 10             	add    esp,0x10
c00088a4:	83 ec 0c             	sub    esp,0xc
c00088a7:	53                   	push   ebx
c00088a8:	e8 3f ff ff ff       	call   c00087ec <src_reset>
c00088ad:	83 c4 10             	add    esp,0x10
c00088b0:	eb 06                	jmp    c00088b8 <src_new+0x88>
c00088b2:	85 ff                	test   edi,edi
c00088b4:	7f 9b                	jg     c0008851 <src_new+0x21>
c00088b6:	eb b1                	jmp    c0008869 <src_new+0x39>
c00088b8:	89 d8                	mov    eax,ebx
c00088ba:	5b                   	pop    ebx
c00088bb:	5e                   	pop    esi
c00088bc:	5f                   	pop    edi
c00088bd:	c3                   	ret    

c00088be <src_callback_new>:
c00088be:	56                   	push   esi
c00088bf:	53                   	push   ebx
c00088c0:	53                   	push   ebx
c00088c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088c9:	85 f6                	test   esi,esi
c00088cb:	75 0e                	jne    c00088db <src_callback_new+0x1d>
c00088cd:	31 db                	xor    ebx,ebx
c00088cf:	85 c0                	test   eax,eax
c00088d1:	74 47                	je     c000891a <src_callback_new+0x5c>
c00088d3:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00088d9:	eb 3f                	jmp    c000891a <src_callback_new+0x5c>
c00088db:	85 c0                	test   eax,eax
c00088dd:	74 06                	je     c00088e5 <src_callback_new+0x27>
c00088df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00088e5:	51                   	push   ecx
c00088e6:	50                   	push   eax
c00088e7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00088eb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00088ef:	e8 3c ff ff ff       	call   c0008830 <src_new>
c00088f4:	83 c4 10             	add    esp,0x10
c00088f7:	89 c3                	mov    ebx,eax
c00088f9:	85 c0                	test   eax,eax
c00088fb:	74 1d                	je     c000891a <src_callback_new+0x5c>
c00088fd:	83 ec 0c             	sub    esp,0xc
c0008900:	50                   	push   eax
c0008901:	e8 e6 fe ff ff       	call   c00087ec <src_reset>
c0008906:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000890a:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008911:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008914:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008917:	83 c4 10             	add    esp,0x10
c000891a:	5a                   	pop    edx
c000891b:	89 d8                	mov    eax,ebx
c000891d:	5b                   	pop    ebx
c000891e:	5e                   	pop    esi
c000891f:	c3                   	ret    

c0008920 <src_get_name>:
c0008920:	53                   	push   ebx
c0008921:	83 ec 14             	sub    esp,0x14
c0008924:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008928:	53                   	push   ebx
c0008929:	e8 47 1f 00 00       	call   c000a875 <sinc_get_name>
c000892e:	83 c4 10             	add    esp,0x10
c0008931:	85 c0                	test   eax,eax
c0008933:	75 1d                	jne    c0008952 <src_get_name+0x32>
c0008935:	83 ec 0c             	sub    esp,0xc
c0008938:	53                   	push   ebx
c0008939:	e8 4a 23 00 00       	call   c000ac88 <zoh_get_name>
c000893e:	83 c4 10             	add    esp,0x10
c0008941:	85 c0                	test   eax,eax
c0008943:	75 0d                	jne    c0008952 <src_get_name+0x32>
c0008945:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008949:	83 c4 08             	add    esp,0x8
c000894c:	5b                   	pop    ebx
c000894d:	e9 36 05 00 00       	jmp    c0008e88 <linear_get_name>
c0008952:	83 c4 08             	add    esp,0x8
c0008955:	5b                   	pop    ebx
c0008956:	c3                   	ret    

c0008957 <src_get_description>:
c0008957:	53                   	push   ebx
c0008958:	83 ec 14             	sub    esp,0x14
c000895b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000895f:	53                   	push   ebx
c0008960:	e8 23 1f 00 00       	call   c000a888 <sinc_get_description>
c0008965:	83 c4 10             	add    esp,0x10
c0008968:	85 c0                	test   eax,eax
c000896a:	75 1d                	jne    c0008989 <src_get_description+0x32>
c000896c:	83 ec 0c             	sub    esp,0xc
c000896f:	53                   	push   ebx
c0008970:	e8 22 23 00 00       	call   c000ac97 <zoh_get_description>
c0008975:	83 c4 10             	add    esp,0x10
c0008978:	85 c0                	test   eax,eax
c000897a:	75 0d                	jne    c0008989 <src_get_description+0x32>
c000897c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008980:	83 c4 08             	add    esp,0x8
c0008983:	5b                   	pop    ebx
c0008984:	e9 0e 05 00 00       	jmp    c0008e97 <linear_get_description>
c0008989:	83 c4 08             	add    esp,0x8
c000898c:	5b                   	pop    ebx
c000898d:	c3                   	ret    

c000898e <src_get_version>:
c000898e:	b8 60 03 02 c0       	mov    eax,0xc0020360
c0008993:	c3                   	ret    

c0008994 <src_is_valid_ratio>:
c0008994:	50                   	push   eax
c0008995:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008999:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000899d:	e8 84 fa ff ff       	call   c0008426 <is_bad_src_ratio>
c00089a2:	85 c0                	test   eax,eax
c00089a4:	0f 94 c0             	sete   al
c00089a7:	0f b6 c0             	movzx  eax,al
c00089aa:	83 c4 0c             	add    esp,0xc
c00089ad:	c3                   	ret    

c00089ae <src_error>:
c00089ae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089b2:	31 c0                	xor    eax,eax
c00089b4:	85 d2                	test   edx,edx
c00089b6:	74 03                	je     c00089bb <src_error+0xd>
c00089b8:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00089bb:	c3                   	ret    

c00089bc <src_strerror>:
c00089bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089c0:	31 c0                	xor    eax,eax
c00089c2:	83 fa 17             	cmp    edx,0x17
c00089c5:	77 07                	ja     c00089ce <src_strerror+0x12>
c00089c7:	8b 04 95 c0 07 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf840]
c00089ce:	c3                   	ret    

c00089cf <src_simple>:
c00089cf:	56                   	push   esi
c00089d0:	53                   	push   ebx
c00089d1:	83 ec 18             	sub    esp,0x18
c00089d4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089d8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089dc:	50                   	push   eax
c00089dd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00089e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00089e5:	e8 46 fe ff ff       	call   c0008830 <src_new>
c00089ea:	83 c4 10             	add    esp,0x10
c00089ed:	85 c0                	test   eax,eax
c00089ef:	75 06                	jne    c00089f7 <src_simple+0x28>
c00089f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00089f5:	eb 25                	jmp    c0008a1c <src_simple+0x4d>
c00089f7:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c00089fe:	89 c3                	mov    ebx,eax
c0008a00:	50                   	push   eax
c0008a01:	50                   	push   eax
c0008a02:	56                   	push   esi
c0008a03:	53                   	push   ebx
c0008a04:	e8 e1 fa ff ff       	call   c00084ea <src_process>
c0008a09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008a0c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a10:	e8 99 fa ff ff       	call   c00084ae <src_delete>
c0008a15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a19:	83 c4 10             	add    esp,0x10
c0008a1c:	83 c4 14             	add    esp,0x14
c0008a1f:	5b                   	pop    ebx
c0008a20:	5e                   	pop    esi
c0008a21:	c3                   	ret    

c0008a22 <src_short_to_float_array>:
c0008a22:	83 ec 0c             	sub    esp,0xc
c0008a25:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008a29:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a2d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008a31:	85 c0                	test   eax,eax
c0008a33:	74 0f                	je     c0008a44 <src_short_to_float_array+0x22>
c0008a35:	48                   	dec    eax
c0008a36:	d9 05 44 08 02 c0    	fld    DWORD PTR ds:0xc0020844
c0008a3c:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008a3f:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008a42:	eb ed                	jmp    c0008a31 <src_short_to_float_array+0xf>
c0008a44:	83 c4 0c             	add    esp,0xc
c0008a47:	c3                   	ret    

c0008a48 <src_float_to_short_array>:
c0008a48:	56                   	push   esi
c0008a49:	53                   	push   ebx
c0008a4a:	52                   	push   edx
c0008a4b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a4f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008a53:	85 db                	test   ebx,ebx
c0008a55:	74 51                	je     c0008aa8 <src_float_to_short_array+0x60>
c0008a57:	4b                   	dec    ebx
c0008a58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a5c:	d9 05 48 08 02 c0    	fld    DWORD PTR ds:0xc0020848
c0008a62:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008a65:	dc 15 38 08 02 c0    	fcom   QWORD PTR ds:0xc0020838
c0008a6b:	df e0                	fnstsw ax
c0008a6d:	9e                   	sahf   
c0008a6e:	72 0a                	jb     c0008a7a <src_float_to_short_array+0x32>
c0008a70:	dd d8                	fstp   st(0)
c0008a72:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008a78:	eb d9                	jmp    c0008a53 <src_float_to_short_array+0xb>
c0008a7a:	d9 05 4c 08 02 c0    	fld    DWORD PTR ds:0xc002084c
c0008a80:	d8 d9                	fcomp  st(1)
c0008a82:	df e0                	fnstsw ax
c0008a84:	9e                   	sahf   
c0008a85:	72 0a                	jb     c0008a91 <src_float_to_short_array+0x49>
c0008a87:	dd d8                	fstp   st(0)
c0008a89:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008a8f:	eb c2                	jmp    c0008a53 <src_float_to_short_array+0xb>
c0008a91:	83 ec 10             	sub    esp,0x10
c0008a94:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008a97:	e8 54 66 01 00       	call   c001f0f0 <lrint>
c0008a9c:	83 c4 10             	add    esp,0x10
c0008a9f:	c1 f8 10             	sar    eax,0x10
c0008aa2:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008aa6:	eb ab                	jmp    c0008a53 <src_float_to_short_array+0xb>
c0008aa8:	58                   	pop    eax
c0008aa9:	5b                   	pop    ebx
c0008aaa:	5e                   	pop    esi
c0008aab:	c3                   	ret    

c0008aac <src_int_to_float_array>:
c0008aac:	83 ec 0c             	sub    esp,0xc
c0008aaf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ab3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008abb:	85 c0                	test   eax,eax
c0008abd:	74 0f                	je     c0008ace <src_int_to_float_array+0x22>
c0008abf:	48                   	dec    eax
c0008ac0:	d9 05 50 08 02 c0    	fld    DWORD PTR ds:0xc0020850
c0008ac6:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008ac9:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008acc:	eb ed                	jmp    c0008abb <src_int_to_float_array+0xf>
c0008ace:	83 c4 0c             	add    esp,0xc
c0008ad1:	c3                   	ret    

c0008ad2 <src_float_to_int_array>:
c0008ad2:	56                   	push   esi
c0008ad3:	53                   	push   ebx
c0008ad4:	52                   	push   edx
c0008ad5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008add:	85 db                	test   ebx,ebx
c0008adf:	74 4f                	je     c0008b30 <src_float_to_int_array+0x5e>
c0008ae1:	4b                   	dec    ebx
c0008ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ae6:	d9 05 48 08 02 c0    	fld    DWORD PTR ds:0xc0020848
c0008aec:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008aef:	dc 15 38 08 02 c0    	fcom   QWORD PTR ds:0xc0020838
c0008af5:	df e0                	fnstsw ax
c0008af7:	9e                   	sahf   
c0008af8:	72 0b                	jb     c0008b05 <src_float_to_int_array+0x33>
c0008afa:	dd d8                	fstp   st(0)
c0008afc:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008b03:	eb d8                	jmp    c0008add <src_float_to_int_array+0xb>
c0008b05:	d9 05 4c 08 02 c0    	fld    DWORD PTR ds:0xc002084c
c0008b0b:	d8 d9                	fcomp  st(1)
c0008b0d:	df e0                	fnstsw ax
c0008b0f:	9e                   	sahf   
c0008b10:	72 0b                	jb     c0008b1d <src_float_to_int_array+0x4b>
c0008b12:	dd d8                	fstp   st(0)
c0008b14:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008b1b:	eb c0                	jmp    c0008add <src_float_to_int_array+0xb>
c0008b1d:	83 ec 10             	sub    esp,0x10
c0008b20:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b23:	e8 c8 65 01 00       	call   c001f0f0 <lrint>
c0008b28:	83 c4 10             	add    esp,0x10
c0008b2b:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008b2e:	eb ad                	jmp    c0008add <src_float_to_int_array+0xb>
c0008b30:	58                   	pop    eax
c0008b31:	5b                   	pop    ebx
c0008b32:	5e                   	pop    esi
c0008b33:	c3                   	ret    

c0008b34 <is_bad_src_ratio>:
c0008b34:	83 ec 0c             	sub    esp,0xc
c0008b37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b3b:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b42:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008b46:	dd 04 24             	fld    QWORD PTR [esp]
c0008b49:	dd 05 20 08 02 c0    	fld    QWORD PTR ds:0xc0020820
c0008b4f:	de d9                	fcompp 
c0008b51:	df e0                	fnstsw ax
c0008b53:	f6 c4 45             	test   ah,0x45
c0008b56:	74 10                	je     c0008b68 <is_bad_src_ratio+0x34>
c0008b58:	dd 04 24             	fld    QWORD PTR [esp]
c0008b5b:	dc 1d 28 08 02 c0    	fcomp  QWORD PTR ds:0xc0020828
c0008b61:	df e0                	fnstsw ax
c0008b63:	f6 c4 45             	test   ah,0x45
c0008b66:	75 07                	jne    c0008b6f <is_bad_src_ratio+0x3b>
c0008b68:	b8 01 00 00 00       	mov    eax,0x1
c0008b6d:	eb 05                	jmp    c0008b74 <is_bad_src_ratio+0x40>
c0008b6f:	b8 00 00 00 00       	mov    eax,0x0
c0008b74:	83 c4 0c             	add    esp,0xc
c0008b77:	c3                   	ret    

c0008b78 <fmod_one>:
c0008b78:	83 ec 2c             	sub    esp,0x2c
c0008b7b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b83:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008b87:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008b8b:	83 ec 08             	sub    esp,0x8
c0008b8e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b92:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008b96:	e8 55 65 01 00       	call   c001f0f0 <lrint>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ba2:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008ba6:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008baa:	de e1                	fsubrp st(1),st
c0008bac:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008bb0:	d9 ee                	fldz   
c0008bb2:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008bb6:	df e0                	fnstsw ax
c0008bb8:	f6 c4 45             	test   ah,0x45
c0008bbb:	75 0a                	jne    c0008bc7 <fmod_one+0x4f>
c0008bbd:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008bc1:	d9 e8                	fld1   
c0008bc3:	de c1                	faddp  st(1),st
c0008bc5:	eb 04                	jmp    c0008bcb <fmod_one+0x53>
c0008bc7:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008bcb:	83 c4 2c             	add    esp,0x2c
c0008bce:	c3                   	ret    

c0008bcf <linear_vari_process>:
c0008bcf:	55                   	push   ebp
c0008bd0:	57                   	push   edi
c0008bd1:	56                   	push   esi
c0008bd2:	53                   	push   ebx
c0008bd3:	83 ec 2c             	sub    esp,0x2c
c0008bd6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008bda:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008bde:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008be6:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008bea:	0f 8e 5a 02 00 00    	jle    c0008e4a <linear_vari_process+0x27b>
c0008bf0:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008bf3:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008bfb:	85 db                	test   ebx,ebx
c0008bfd:	0f 84 47 02 00 00    	je     c0008e4a <linear_vari_process+0x27b>
c0008c03:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008c06:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008c0a:	74 19                	je     c0008c25 <linear_vari_process+0x56>
c0008c0c:	31 d2                	xor    edx,edx
c0008c0e:	39 c2                	cmp    edx,eax
c0008c10:	7d 0c                	jge    c0008c1e <linear_vari_process+0x4f>
c0008c12:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008c14:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008c17:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008c1b:	42                   	inc    edx
c0008c1c:	eb f0                	jmp    c0008c0e <linear_vari_process+0x3f>
c0008c1e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008c25:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008c28:	0f af d0             	imul   edx,eax
c0008c2b:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008c2e:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008c32:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008c39:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c3c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008c43:	dd 07                	fld    QWORD PTR [edi]
c0008c45:	dd 14 24             	fst    QWORD PTR [esp]
c0008c48:	50                   	push   eax
c0008c49:	50                   	push   eax
c0008c4a:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008c4d:	e8 e2 fe ff ff       	call   c0008b34 <is_bad_src_ratio>
c0008c52:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008c56:	5a                   	pop    edx
c0008c57:	59                   	pop    ecx
c0008c58:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008c5d:	0f 85 df 01 00 00    	jne    c0008e42 <linear_vari_process+0x273>
c0008c63:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008c66:	d9 e8                	fld1   
c0008c68:	d8 d1                	fcom   st(1)
c0008c6a:	df e0                	fnstsw ax
c0008c6c:	9e                   	sahf   
c0008c6d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008c71:	0f 86 97 00 00 00    	jbe    c0008d0e <linear_vari_process+0x13f>
c0008c77:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c7a:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008c7d:	0f 8d 8b 00 00 00    	jge    c0008d0e <linear_vari_process+0x13f>
c0008c83:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008c87:	d8 c1                	fadd   st,st(1)
c0008c89:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008c8c:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008c8f:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008c92:	df e0                	fnstsw ax
c0008c94:	9e                   	sahf   
c0008c95:	73 77                	jae    c0008d0e <linear_vari_process+0x13f>
c0008c97:	85 d2                	test   edx,edx
c0008c99:	7e 36                	jle    c0008cd1 <linear_vari_process+0x102>
c0008c9b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008c9f:	dd 07                	fld    QWORD PTR [edi]
c0008ca1:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008ca4:	83 ec 10             	sub    esp,0x10
c0008ca7:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008caa:	e8 21 64 01 00       	call   c001f0d0 <fabs>
c0008caf:	83 c4 10             	add    esp,0x10
c0008cb2:	dc 1d 98 08 02 c0    	fcomp  QWORD PTR ds:0xc0020898
c0008cb8:	df e0                	fnstsw ax
c0008cba:	9e                   	sahf   
c0008cbb:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008cbf:	76 10                	jbe    c0008cd1 <linear_vari_process+0x102>
c0008cc1:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008cc4:	dc 27                	fsub   QWORD PTR [edi]
c0008cc6:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008cc9:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008ccc:	dc 07                	fadd   QWORD PTR [edi]
c0008cce:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cd1:	31 c0                	xor    eax,eax
c0008cd3:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008cd6:	7e 1f                	jle    c0008cf7 <linear_vari_process+0x128>
c0008cd8:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008cda:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008cdd:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008ce1:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008ce5:	d8 e1                	fsub   st,st(1)
c0008ce7:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008cea:	40                   	inc    eax
c0008ceb:	d8 ca                	fmul   st,st(2)
c0008ced:	de c1                	faddp  st(1),st
c0008cef:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008cf2:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008cf5:	eb dc                	jmp    c0008cd3 <linear_vari_process+0x104>
c0008cf7:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008cfb:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008cfe:	de c1                	faddp  st(1),st
c0008d00:	e9 61 ff ff ff       	jmp    c0008c66 <linear_vari_process+0x97>
c0008d05:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d09:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d0c:	de c1                	faddp  st(1),st
c0008d0e:	83 ec 10             	sub    esp,0x10
c0008d11:	dd 14 24             	fst    QWORD PTR [esp]
c0008d14:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d18:	e8 5b fe ff ff       	call   c0008b78 <fmod_one>
c0008d1d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008d20:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008d24:	d8 e1                	fsub   st,st(1)
c0008d26:	d9 c9                	fxch   st(1)
c0008d28:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d2c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d2f:	e8 bc 63 01 00       	call   c001f0f0 <lrint>
c0008d34:	83 c4 10             	add    esp,0x10
c0008d37:	0f af e8             	imul   ebp,eax
c0008d3a:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008d3d:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008d40:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d44:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008d47:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008d4a:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008d4d:	0f 8d 95 00 00 00    	jge    c0008de8 <linear_vari_process+0x219>
c0008d53:	d9 c0                	fld    st(0)
c0008d55:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d58:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008d5c:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008d60:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008d64:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008d68:	de d9                	fcompp 
c0008d6a:	df e0                	fnstsw ax
c0008d6c:	9e                   	sahf   
c0008d6d:	76 79                	jbe    c0008de8 <linear_vari_process+0x219>
c0008d6f:	85 ed                	test   ebp,ebp
c0008d71:	7e 36                	jle    c0008da9 <linear_vari_process+0x1da>
c0008d73:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d77:	dd 07                	fld    QWORD PTR [edi]
c0008d79:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d7c:	83 ec 10             	sub    esp,0x10
c0008d7f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d82:	e8 49 63 01 00       	call   c001f0d0 <fabs>
c0008d87:	83 c4 10             	add    esp,0x10
c0008d8a:	dc 1d 98 08 02 c0    	fcomp  QWORD PTR ds:0xc0020898
c0008d90:	df e0                	fnstsw ax
c0008d92:	9e                   	sahf   
c0008d93:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d97:	76 10                	jbe    c0008da9 <linear_vari_process+0x1da>
c0008d99:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008d9c:	dc 27                	fsub   QWORD PTR [edi]
c0008d9e:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008da1:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008da4:	dc 07                	fadd   QWORD PTR [edi]
c0008da6:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008da9:	31 c0                	xor    eax,eax
c0008dab:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008dae:	39 c2                	cmp    edx,eax
c0008db0:	0f 8e 4f ff ff ff    	jle    c0008d05 <linear_vari_process+0x136>
c0008db6:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008db8:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008dbb:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008dbf:	89 e9                	mov    ecx,ebp
c0008dc1:	29 d1                	sub    ecx,edx
c0008dc3:	01 c5                	add    ebp,eax
c0008dc5:	89 ca                	mov    edx,ecx
c0008dc7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008dcb:	01 c2                	add    edx,eax
c0008dcd:	40                   	inc    eax
c0008dce:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008dd1:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008dd4:	d8 e1                	fsub   st,st(1)
c0008dd6:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008dd9:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008ddc:	d8 ca                	fmul   st,st(2)
c0008dde:	de c1                	faddp  st(1),st
c0008de0:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008de3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008de6:	eb c3                	jmp    c0008dab <linear_vari_process+0x1dc>
c0008de8:	39 d1                	cmp    ecx,edx
c0008dea:	7d 13                	jge    c0008dff <linear_vari_process+0x230>
c0008dec:	89 d0                	mov    eax,edx
c0008dee:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008df1:	29 c8                	sub    eax,ecx
c0008df3:	99                   	cdq    
c0008df4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008df7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008dfb:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008dff:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008e02:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e05:	85 c0                	test   eax,eax
c0008e07:	7f 1b                	jg     c0008e24 <linear_vari_process+0x255>
c0008e09:	dd 04 24             	fld    QWORD PTR [esp]
c0008e0c:	dd 1f                	fstp   QWORD PTR [edi]
c0008e0e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e11:	99                   	cdq    
c0008e12:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e15:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008e18:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008e1b:	99                   	cdq    
c0008e1c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e1f:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008e22:	eb 26                	jmp    c0008e4a <linear_vari_process+0x27b>
c0008e24:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008e27:	31 d2                	xor    edx,edx
c0008e29:	29 c8                	sub    eax,ecx
c0008e2b:	c1 e0 02             	shl    eax,0x2
c0008e2e:	39 d1                	cmp    ecx,edx
c0008e30:	7e d7                	jle    c0008e09 <linear_vari_process+0x23a>
c0008e32:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008e34:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008e38:	83 c0 04             	add    eax,0x4
c0008e3b:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008e3f:	42                   	inc    edx
c0008e40:	eb ec                	jmp    c0008e2e <linear_vari_process+0x25f>
c0008e42:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008e4a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e4e:	83 c4 2c             	add    esp,0x2c
c0008e51:	5b                   	pop    ebx
c0008e52:	5e                   	pop    esi
c0008e53:	5f                   	pop    edi
c0008e54:	5d                   	pop    ebp
c0008e55:	c3                   	ret    

c0008e56 <linear_reset>:
c0008e56:	83 ec 0c             	sub    esp,0xc
c0008e59:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008e5d:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008e60:	85 c0                	test   eax,eax
c0008e62:	74 20                	je     c0008e84 <linear_reset+0x2e>
c0008e64:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008e67:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c0008e6e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008e71:	51                   	push   ecx
c0008e72:	c1 e2 02             	shl    edx,0x2
c0008e75:	83 c0 1c             	add    eax,0x1c
c0008e78:	52                   	push   edx
c0008e79:	6a 00                	push   0x0
c0008e7b:	50                   	push   eax
c0008e7c:	e8 87 77 ff ff       	call   c0000608 <memset>
c0008e81:	83 c4 10             	add    esp,0x10
c0008e84:	83 c4 0c             	add    esp,0xc
c0008e87:	c3                   	ret    

c0008e88 <linear_get_name>:
c0008e88:	31 c0                	xor    eax,eax
c0008e8a:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008e8f:	75 05                	jne    c0008e96 <linear_get_name+0xe>
c0008e91:	b8 54 08 02 c0       	mov    eax,0xc0020854
c0008e96:	c3                   	ret    

c0008e97 <linear_get_description>:
c0008e97:	31 c0                	xor    eax,eax
c0008e99:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008e9e:	75 05                	jne    c0008ea5 <linear_get_description+0xe>
c0008ea0:	b8 68 08 02 c0       	mov    eax,0xc0020868
c0008ea5:	c3                   	ret    

c0008ea6 <linear_set_converter>:
c0008ea6:	53                   	push   ebx
c0008ea7:	b8 0a 00 00 00       	mov    eax,0xa
c0008eac:	83 ec 08             	sub    esp,0x8
c0008eaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008eb3:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008eb8:	75 6e                	jne    c0008f28 <linear_set_converter+0x82>
c0008eba:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008ebd:	85 c0                	test   eax,eax
c0008ebf:	74 13                	je     c0008ed4 <linear_set_converter+0x2e>
c0008ec1:	83 ec 0c             	sub    esp,0xc
c0008ec4:	50                   	push   eax
c0008ec5:	e8 6d 30 00 00       	call   c000bf37 <free>
c0008eca:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008ed1:	83 c4 10             	add    esp,0x10
c0008ed4:	50                   	push   eax
c0008ed5:	50                   	push   eax
c0008ed6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008ed9:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008ee0:	50                   	push   eax
c0008ee1:	6a 01                	push   0x1
c0008ee3:	e8 6f 30 00 00       	call   c000bf57 <calloc>
c0008ee8:	89 c2                	mov    edx,eax
c0008eea:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008eed:	83 c4 10             	add    esp,0x10
c0008ef0:	b8 01 00 00 00       	mov    eax,0x1
c0008ef5:	85 d2                	test   edx,edx
c0008ef7:	74 2f                	je     c0008f28 <linear_set_converter+0x82>
c0008ef9:	83 ec 0c             	sub    esp,0xc
c0008efc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008eff:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f02:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008f08:	c7 43 24 cf 8b 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008bcf
c0008f0f:	c7 43 20 cf 8b 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008bcf
c0008f16:	c7 43 28 56 8e 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008e56
c0008f1d:	53                   	push   ebx
c0008f1e:	e8 33 ff ff ff       	call   c0008e56 <linear_reset>
c0008f23:	83 c4 10             	add    esp,0x10
c0008f26:	31 c0                	xor    eax,eax
c0008f28:	83 c4 08             	add    esp,0x8
c0008f2b:	5b                   	pop    ebx
c0008f2c:	c3                   	ret    

c0008f2d <is_bad_src_ratio>:
c0008f2d:	83 ec 0c             	sub    esp,0xc
c0008f30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f34:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f37:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008f3b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008f3f:	dd 04 24             	fld    QWORD PTR [esp]
c0008f42:	dd 05 20 08 02 c0    	fld    QWORD PTR ds:0xc0020820
c0008f48:	de d9                	fcompp 
c0008f4a:	df e0                	fnstsw ax
c0008f4c:	f6 c4 45             	test   ah,0x45
c0008f4f:	74 10                	je     c0008f61 <is_bad_src_ratio+0x34>
c0008f51:	dd 04 24             	fld    QWORD PTR [esp]
c0008f54:	dc 1d 28 08 02 c0    	fcomp  QWORD PTR ds:0xc0020828
c0008f5a:	df e0                	fnstsw ax
c0008f5c:	f6 c4 45             	test   ah,0x45
c0008f5f:	75 07                	jne    c0008f68 <is_bad_src_ratio+0x3b>
c0008f61:	b8 01 00 00 00       	mov    eax,0x1
c0008f66:	eb 05                	jmp    c0008f6d <is_bad_src_ratio+0x40>
c0008f68:	b8 00 00 00 00       	mov    eax,0x0
c0008f6d:	83 c4 0c             	add    esp,0xc
c0008f70:	c3                   	ret    

c0008f71 <int_to_fp>:
c0008f71:	c1 e0 0c             	shl    eax,0xc
c0008f74:	c3                   	ret    

c0008f75 <fp_to_int>:
c0008f75:	c1 f8 0c             	sar    eax,0xc
c0008f78:	c3                   	ret    

c0008f79 <fp_fraction_part>:
c0008f79:	25 ff 0f 00 00       	and    eax,0xfff
c0008f7e:	c3                   	ret    

c0008f7f <fp_to_double>:
c0008f7f:	83 ec 0c             	sub    esp,0xc
c0008f82:	e8 f2 ff ff ff       	call   c0008f79 <fp_fraction_part>
c0008f87:	d9 05 28 0a 02 c0    	fld    DWORD PTR ds:0xc0020a28
c0008f8d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008f91:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0008f95:	83 c4 0c             	add    esp,0xc
c0008f98:	c3                   	ret    

c0008f99 <calc_output_single>:
c0008f99:	55                   	push   ebp
c0008f9a:	57                   	push   edi
c0008f9b:	89 c7                	mov    edi,eax
c0008f9d:	56                   	push   esi
c0008f9e:	53                   	push   ebx
c0008f9f:	89 d3                	mov    ebx,edx
c0008fa1:	83 ec 24             	sub    esp,0x24
c0008fa4:	89 de                	mov    esi,ebx
c0008fa6:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008fa9:	e8 c3 ff ff ff       	call   c0008f71 <int_to_fp>
c0008fae:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0008fb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fb5:	29 c8                	sub    eax,ecx
c0008fb7:	99                   	cdq    
c0008fb8:	f7 fb                	idiv   ebx
c0008fba:	0f af f0             	imul   esi,eax
c0008fbd:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0008fc0:	01 ce                	add    esi,ecx
c0008fc2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008fc6:	29 c2                	sub    edx,eax
c0008fc8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008fcf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008fd7:	8d 14 97             	lea    edx,[edi+edx*4]
c0008fda:	89 f0                	mov    eax,esi
c0008fdc:	e8 9e ff ff ff       	call   c0008f7f <fp_to_double>
c0008fe1:	89 f0                	mov    eax,esi
c0008fe3:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008fe7:	e8 89 ff ff ff       	call   c0008f75 <fp_to_int>
c0008fec:	83 c2 04             	add    edx,0x4
c0008fef:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008ff3:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0008ff7:	d8 e1                	fsub   st,st(1)
c0008ff9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008ffd:	de c9                	fmulp  st(1),st
c0008fff:	de c1                	faddp  st(1),st
c0009001:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009007:	29 de                	sub    esi,ebx
c0009009:	dc 04 24             	fadd   QWORD PTR [esp]
c000900c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000900f:	79 c9                	jns    c0008fda <calc_output_single+0x41>
c0009011:	89 d8                	mov    eax,ebx
c0009013:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009017:	29 c8                	sub    eax,ecx
c0009019:	89 c1                	mov    ecx,eax
c000901b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000901f:	29 c8                	sub    eax,ecx
c0009021:	99                   	cdq    
c0009022:	f7 fb                	idiv   ebx
c0009024:	89 da                	mov    edx,ebx
c0009026:	0f af d0             	imul   edx,eax
c0009029:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c000902d:	01 d1                	add    ecx,edx
c000902f:	d9 ee                	fldz   
c0009031:	8d 14 87             	lea    edx,[edi+eax*4]
c0009034:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009038:	89 c8                	mov    eax,ecx
c000903a:	e8 40 ff ff ff       	call   c0008f7f <fp_to_double>
c000903f:	89 c8                	mov    eax,ecx
c0009041:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009045:	e8 2b ff ff ff       	call   c0008f75 <fp_to_int>
c000904a:	29 d9                	sub    ecx,ebx
c000904c:	83 ea 04             	sub    edx,0x4
c000904f:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009053:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009057:	d8 e1                	fsub   st,st(1)
c0009059:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000905d:	de c9                	fmulp  st(1),st
c000905f:	de c1                	faddp  st(1),st
c0009061:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009067:	85 c9                	test   ecx,ecx
c0009069:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000906d:	de c1                	faddp  st(1),st
c000906f:	7f c3                	jg     c0009034 <calc_output_single+0x9b>
c0009071:	dd 04 24             	fld    QWORD PTR [esp]
c0009074:	de c1                	faddp  st(1),st
c0009076:	83 c4 24             	add    esp,0x24
c0009079:	5b                   	pop    ebx
c000907a:	5e                   	pop    esi
c000907b:	5f                   	pop    edi
c000907c:	5d                   	pop    ebp
c000907d:	c3                   	ret    

c000907e <calc_output_stereo>:
c000907e:	55                   	push   ebp
c000907f:	57                   	push   edi
c0009080:	89 c7                	mov    edi,eax
c0009082:	56                   	push   esi
c0009083:	53                   	push   ebx
c0009084:	89 d3                	mov    ebx,edx
c0009086:	83 ec 44             	sub    esp,0x44
c0009089:	89 de                	mov    esi,ebx
c000908b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000908e:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009092:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009096:	e8 d6 fe ff ff       	call   c0008f71 <int_to_fp>
c000909b:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c000909e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00090a2:	29 c8                	sub    eax,ecx
c00090a4:	99                   	cdq    
c00090a5:	f7 fb                	idiv   ebx
c00090a7:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00090aa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00090b2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00090b6:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00090b9:	0f af f0             	imul   esi,eax
c00090bc:	0f af c2             	imul   eax,edx
c00090bf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00090c3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00090c7:	d9 ee                	fldz   
c00090c9:	29 c2                	sub    edx,eax
c00090cb:	01 ce                	add    esi,ecx
c00090cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090d0:	8d 14 97             	lea    edx,[edi+edx*4]
c00090d3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00090db:	89 f0                	mov    eax,esi
c00090dd:	e8 9d fe ff ff       	call   c0008f7f <fp_to_double>
c00090e2:	89 f0                	mov    eax,esi
c00090e4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00090e8:	e8 88 fe ff ff       	call   c0008f75 <fp_to_int>
c00090ed:	83 c2 08             	add    edx,0x8
c00090f0:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00090f4:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00090f8:	d8 e1                	fsub   st,st(1)
c00090fa:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00090fe:	de c9                	fmulp  st(1),st
c0009100:	de c1                	faddp  st(1),st
c0009102:	d9 c0                	fld    st(0)
c0009104:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000910a:	dc 04 24             	fadd   QWORD PTR [esp]
c000910d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009110:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009116:	29 de                	sub    esi,ebx
c0009118:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000911c:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009120:	79 b9                	jns    c00090db <calc_output_stereo+0x5d>
c0009122:	89 d8                	mov    eax,ebx
c0009124:	29 c8                	sub    eax,ecx
c0009126:	89 c1                	mov    ecx,eax
c0009128:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000912c:	29 c8                	sub    eax,ecx
c000912e:	99                   	cdq    
c000912f:	f7 fb                	idiv   ebx
c0009131:	89 da                	mov    edx,ebx
c0009133:	0f af d0             	imul   edx,eax
c0009136:	40                   	inc    eax
c0009137:	01 d1                	add    ecx,edx
c0009139:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
c000913e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0009142:	d9 ee                	fldz   
c0009144:	d9 ee                	fldz   
c0009146:	8d 14 87             	lea    edx,[edi+eax*4]
c0009149:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000914d:	89 c8                	mov    eax,ecx
c000914f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009153:	e8 27 fe ff ff       	call   c0008f7f <fp_to_double>
c0009158:	89 c8                	mov    eax,ecx
c000915a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000915e:	e8 12 fe ff ff       	call   c0008f75 <fp_to_int>
c0009163:	29 d9                	sub    ecx,ebx
c0009165:	83 ea 08             	sub    edx,0x8
c0009168:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000916c:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009170:	d8 e1                	fsub   st,st(1)
c0009172:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009176:	de c9                	fmulp  st(1),st
c0009178:	de c1                	faddp  st(1),st
c000917a:	d9 c0                	fld    st(0)
c000917c:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c0009182:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009186:	de c1                	faddp  st(1),st
c0009188:	d9 c9                	fxch   st(1)
c000918a:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c0009190:	85 c9                	test   ecx,ecx
c0009192:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009196:	de c1                	faddp  st(1),st
c0009198:	7f af                	jg     c0009149 <calc_output_stereo+0xcb>
c000919a:	dd 04 24             	fld    QWORD PTR [esp]
c000919d:	de c2                	faddp  st(2),st
c000919f:	d9 c9                	fxch   st(1)
c00091a1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00091a5:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c00091a9:	d9 18                	fstp   DWORD PTR [eax]
c00091ab:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00091af:	de c1                	faddp  st(1),st
c00091b1:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c00091b5:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00091b8:	83 c4 44             	add    esp,0x44
c00091bb:	5b                   	pop    ebx
c00091bc:	5e                   	pop    esi
c00091bd:	5f                   	pop    edi
c00091be:	5d                   	pop    ebp
c00091bf:	c3                   	ret    

c00091c0 <calc_output_quad>:
c00091c0:	55                   	push   ebp
c00091c1:	57                   	push   edi
c00091c2:	56                   	push   esi
c00091c3:	89 c6                	mov    esi,eax
c00091c5:	53                   	push   ebx
c00091c6:	89 d3                	mov    ebx,edx
c00091c8:	83 ec 5c             	sub    esp,0x5c
c00091cb:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00091ce:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c00091d2:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00091d6:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091d9:	e8 93 fd ff ff       	call   c0008f71 <int_to_fp>
c00091de:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c00091e1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00091e5:	29 c8                	sub    eax,ecx
c00091e7:	99                   	cdq    
c00091e8:	f7 fb                	idiv   ebx
c00091ea:	89 da                	mov    edx,ebx
c00091ec:	0f af d0             	imul   edx,eax
c00091ef:	01 ca                	add    edx,ecx
c00091f1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00091f5:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c00091f8:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00091fc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00091ff:	0f af c2             	imul   eax,edx
c0009202:	d9 ee                	fldz   
c0009204:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009208:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000920c:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009210:	29 c2                	sub    edx,eax
c0009212:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c0009216:	8d 14 96             	lea    edx,[esi+edx*4]
c0009219:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000921d:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009221:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009225:	e8 55 fd ff ff       	call   c0008f7f <fp_to_double>
c000922a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000922e:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009232:	e8 3e fd ff ff       	call   c0008f75 <fp_to_int>
c0009237:	83 c2 10             	add    edx,0x10
c000923a:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000923e:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009242:	d8 e1                	fsub   st,st(1)
c0009244:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009248:	de c9                	fmulp  st(1),st
c000924a:	de c1                	faddp  st(1),st
c000924c:	d9 c0                	fld    st(0)
c000924e:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009254:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009258:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000925c:	d9 c0                	fld    st(0)
c000925e:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009264:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009268:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000926c:	d9 c0                	fld    st(0)
c000926e:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009274:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009278:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000927c:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009282:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c0009286:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000928a:	de c1                	faddp  st(1),st
c000928c:	79 8f                	jns    c000921d <calc_output_quad+0x5d>
c000928e:	89 d8                	mov    eax,ebx
c0009290:	29 c8                	sub    eax,ecx
c0009292:	89 c1                	mov    ecx,eax
c0009294:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009298:	29 c8                	sub    eax,ecx
c000929a:	99                   	cdq    
c000929b:	f7 fb                	idiv   ebx
c000929d:	89 da                	mov    edx,ebx
c000929f:	0f af d0             	imul   edx,eax
c00092a2:	40                   	inc    eax
c00092a3:	01 d1                	add    ecx,edx
c00092a5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00092aa:	d9 ee                	fldz   
c00092ac:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00092b0:	d9 ee                	fldz   
c00092b2:	d9 ee                	fldz   
c00092b4:	d9 ee                	fldz   
c00092b6:	8d 14 86             	lea    edx,[esi+eax*4]
c00092b9:	eb 0a                	jmp    c00092c5 <calc_output_quad+0x105>
c00092bb:	d9 cc                	fxch   st(4)
c00092bd:	d9 ca                	fxch   st(2)
c00092bf:	d9 c9                	fxch   st(1)
c00092c1:	d9 cb                	fxch   st(3)
c00092c3:	d9 c9                	fxch   st(1)
c00092c5:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092c9:	d9 c9                	fxch   st(1)
c00092cb:	89 c8                	mov    eax,ecx
c00092cd:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092d1:	d9 c9                	fxch   st(1)
c00092d3:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00092d7:	d9 c9                	fxch   st(1)
c00092d9:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00092dd:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00092e1:	e8 99 fc ff ff       	call   c0008f7f <fp_to_double>
c00092e6:	89 c8                	mov    eax,ecx
c00092e8:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00092ec:	e8 84 fc ff ff       	call   c0008f75 <fp_to_int>
c00092f1:	29 d9                	sub    ecx,ebx
c00092f3:	83 ea 10             	sub    edx,0x10
c00092f6:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00092fa:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00092fe:	d8 e1                	fsub   st,st(1)
c0009300:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009304:	de c9                	fmulp  st(1),st
c0009306:	de c1                	faddp  st(1),st
c0009308:	d9 c0                	fld    st(0)
c000930a:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c0009310:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009314:	de c1                	faddp  st(1),st
c0009316:	d9 c1                	fld    st(1)
c0009318:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c000931e:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0009322:	de c1                	faddp  st(1),st
c0009324:	d9 c2                	fld    st(2)
c0009326:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c000932c:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009330:	de c1                	faddp  st(1),st
c0009332:	d9 cb                	fxch   st(3)
c0009334:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c000933a:	85 c9                	test   ecx,ecx
c000933c:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009340:	de c1                	faddp  st(1),st
c0009342:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009346:	0f 8f 6f ff ff ff    	jg     c00092bb <calc_output_quad+0xfb>
c000934c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009350:	de c4                	faddp  st(4),st
c0009352:	d9 cb                	fxch   st(3)
c0009354:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009357:	d9 1f                	fstp   DWORD PTR [edi]
c0009359:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000935d:	de c2                	faddp  st(2),st
c000935f:	d9 c9                	fxch   st(1)
c0009361:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009364:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009367:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000936b:	de c3                	faddp  st(3),st
c000936d:	d9 ca                	fxch   st(2)
c000936f:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009372:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009375:	de c1                	faddp  st(1),st
c0009377:	dc 0c 24             	fmul   QWORD PTR [esp]
c000937a:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000937d:	83 c4 5c             	add    esp,0x5c
c0009380:	5b                   	pop    ebx
c0009381:	5e                   	pop    esi
c0009382:	5f                   	pop    edi
c0009383:	5d                   	pop    ebp
c0009384:	c3                   	ret    

c0009385 <calc_output_hex>:
c0009385:	55                   	push   ebp
c0009386:	57                   	push   edi
c0009387:	89 c7                	mov    edi,eax
c0009389:	56                   	push   esi
c000938a:	53                   	push   ebx
c000938b:	89 d3                	mov    ebx,edx
c000938d:	83 ec 7c             	sub    esp,0x7c
c0009390:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009393:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c000939a:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c00093a1:	dd 1c 24             	fstp   QWORD PTR [esp]
c00093a4:	e8 c8 fb ff ff       	call   c0008f71 <int_to_fp>
c00093a9:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00093ac:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00093b0:	29 c8                	sub    eax,ecx
c00093b2:	99                   	cdq    
c00093b3:	f7 fb                	idiv   ebx
c00093b5:	89 da                	mov    edx,ebx
c00093b7:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00093bf:	0f af d0             	imul   edx,eax
c00093c2:	01 ca                	add    edx,ecx
c00093c4:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00093cc:	d9 ee                	fldz   
c00093ce:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00093d2:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00093d5:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c00093d9:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00093dc:	0f af c2             	imul   eax,edx
c00093df:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00093e3:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00093e7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00093eb:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00093ef:	29 c2                	sub    edx,eax
c00093f1:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00093f5:	8d 14 97             	lea    edx,[edi+edx*4]
c00093f8:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00093fc:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009400:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009404:	e8 76 fb ff ff       	call   c0008f7f <fp_to_double>
c0009409:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000940d:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c0009411:	e8 5f fb ff ff       	call   c0008f75 <fp_to_int>
c0009416:	83 c2 18             	add    edx,0x18
c0009419:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000941d:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009421:	d8 e1                	fsub   st,st(1)
c0009423:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009427:	de c9                	fmulp  st(1),st
c0009429:	de c1                	faddp  st(1),st
c000942b:	d9 c0                	fld    st(0)
c000942d:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009433:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009437:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000943b:	d9 c0                	fld    st(0)
c000943d:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009443:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009447:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000944b:	d9 c0                	fld    st(0)
c000944d:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009453:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009457:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000945b:	d9 c0                	fld    st(0)
c000945d:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009463:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009467:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000946b:	d9 c0                	fld    st(0)
c000946d:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009473:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009477:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000947b:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009481:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009485:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009489:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000948d:	0f 89 6d ff ff ff    	jns    c0009400 <calc_output_hex+0x7b>
c0009493:	89 d8                	mov    eax,ebx
c0009495:	29 c8                	sub    eax,ecx
c0009497:	89 c1                	mov    ecx,eax
c0009499:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000949d:	29 c8                	sub    eax,ecx
c000949f:	99                   	cdq    
c00094a0:	f7 fb                	idiv   ebx
c00094a2:	89 da                	mov    edx,ebx
c00094a4:	0f af d0             	imul   edx,eax
c00094a7:	40                   	inc    eax
c00094a8:	01 d1                	add    ecx,edx
c00094aa:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c00094af:	d9 ee                	fldz   
c00094b1:	d9 ee                	fldz   
c00094b3:	d9 ee                	fldz   
c00094b5:	d9 ca                	fxch   st(2)
c00094b7:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
c00094bb:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c00094bf:	d9 ee                	fldz   
c00094c1:	8d 14 87             	lea    edx,[edi+eax*4]
c00094c4:	d9 ee                	fldz   
c00094c6:	d9 ca                	fxch   st(2)
c00094c8:	eb 0a                	jmp    c00094d4 <calc_output_hex+0x14f>
c00094ca:	d9 c9                	fxch   st(1)
c00094cc:	d9 cc                	fxch   st(4)
c00094ce:	d9 cb                	fxch   st(3)
c00094d0:	d9 ca                	fxch   st(2)
c00094d2:	d9 c9                	fxch   st(1)
c00094d4:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c00094d8:	89 c8                	mov    eax,ecx
c00094da:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c00094de:	d9 ca                	fxch   st(2)
c00094e0:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094e4:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00094e8:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00094ec:	e8 8e fa ff ff       	call   c0008f7f <fp_to_double>
c00094f1:	89 c8                	mov    eax,ecx
c00094f3:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00094f7:	e8 79 fa ff ff       	call   c0008f75 <fp_to_int>
c00094fc:	29 d9                	sub    ecx,ebx
c00094fe:	83 ea 18             	sub    edx,0x18
c0009501:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009505:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009509:	d8 e1                	fsub   st,st(1)
c000950b:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000950f:	de c9                	fmulp  st(1),st
c0009511:	de c1                	faddp  st(1),st
c0009513:	d9 c0                	fld    st(0)
c0009515:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c000951b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000951f:	de c1                	faddp  st(1),st
c0009521:	d9 c1                	fld    st(1)
c0009523:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009529:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c000952d:	de c1                	faddp  st(1),st
c000952f:	d9 c2                	fld    st(2)
c0009531:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009537:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c000953b:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000953f:	d9 c2                	fld    st(2)
c0009541:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009547:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000954b:	de c1                	faddp  st(1),st
c000954d:	d9 c3                	fld    st(3)
c000954f:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009555:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009559:	de c1                	faddp  st(1),st
c000955b:	d9 cc                	fxch   st(4)
c000955d:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009563:	85 c9                	test   ecx,ecx
c0009565:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009569:	de c1                	faddp  st(1),st
c000956b:	0f 8f 59 ff ff ff    	jg     c00094ca <calc_output_hex+0x145>
c0009571:	d9 cb                	fxch   st(3)
c0009573:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009577:	dc 0c 24             	fmul   QWORD PTR [esp]
c000957a:	d9 1e                	fstp   DWORD PTR [esi]
c000957c:	d9 c9                	fxch   st(1)
c000957e:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009582:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009585:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c0009588:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000958c:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009590:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009593:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c0009596:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000959a:	dc 0c 24             	fmul   QWORD PTR [esp]
c000959d:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c00095a0:	d9 c9                	fxch   st(1)
c00095a2:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00095a6:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095a9:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00095ac:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00095b0:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095b3:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00095b6:	83 c4 7c             	add    esp,0x7c
c00095b9:	5b                   	pop    ebx
c00095ba:	5e                   	pop    esi
c00095bb:	5f                   	pop    edi
c00095bc:	5d                   	pop    ebp
c00095bd:	c3                   	ret    

c00095be <sinc_reset>:
c00095be:	56                   	push   esi
c00095bf:	53                   	push   ebx
c00095c0:	51                   	push   ecx
c00095c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095c5:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c00095c8:	85 db                	test   ebx,ebx
c00095ca:	74 51                	je     c000961d <sinc_reset+0x5f>
c00095cc:	d9 ee                	fldz   
c00095ce:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00095d5:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00095dc:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c00095df:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c00095e6:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00095ec:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c00095ef:	52                   	push   edx
c00095f0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00095f3:	c1 e0 02             	shl    eax,0x2
c00095f6:	50                   	push   eax
c00095f7:	6a 00                	push   0x0
c00095f9:	56                   	push   esi
c00095fa:	e8 09 70 ff ff       	call   c0000608 <memset>
c00095ff:	83 c4 0c             	add    esp,0xc
c0009602:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009605:	c1 e0 02             	shl    eax,0x2
c0009608:	50                   	push   eax
c0009609:	68 aa 00 00 00       	push   0xaa
c000960e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009611:	8d 04 86             	lea    eax,[esi+eax*4]
c0009614:	50                   	push   eax
c0009615:	e8 ee 6f ff ff       	call   c0000608 <memset>
c000961a:	83 c4 10             	add    esp,0x10
c000961d:	58                   	pop    eax
c000961e:	5b                   	pop    ebx
c000961f:	5e                   	pop    esi
c0009620:	c3                   	ret    

c0009621 <calc_output_multi>:
c0009621:	55                   	push   ebp
c0009622:	57                   	push   edi
c0009623:	8d 78 44             	lea    edi,[eax+0x44]
c0009626:	56                   	push   esi
c0009627:	89 c6                	mov    esi,eax
c0009629:	53                   	push   ebx
c000962a:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c0009630:	83 ec 4c             	sub    esp,0x4c
c0009633:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0009637:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000963b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000963e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009642:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009646:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000964a:	e8 22 f9 ff ff       	call   c0008f71 <int_to_fp>
c000964f:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0009653:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009657:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c000965b:	99                   	cdq    
c000965c:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c0009660:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009664:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c0009667:	0f af d0             	imul   edx,eax
c000966a:	0f af c3             	imul   eax,ebx
c000966d:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0009671:	29 c5                	sub    ebp,eax
c0009673:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000967a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000967e:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c0009682:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0009686:	52                   	push   edx
c0009687:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000968b:	6a 00                	push   0x0
c000968d:	57                   	push   edi
c000968e:	e8 75 6f ff ff       	call   c0000608 <memset>
c0009693:	83 c4 10             	add    esp,0x10
c0009696:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000969a:	e8 e0 f8 ff ff       	call   c0008f7f <fp_to_double>
c000969f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00096a3:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00096a7:	e8 c9 f8 ff ff       	call   c0008f75 <fp_to_int>
c00096ac:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00096af:	89 d9                	mov    ecx,ebx
c00096b1:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00096b4:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00096b8:	d8 e1                	fsub   st,st(1)
c00096ba:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00096be:	de c9                	fmulp  st(1),st
c00096c0:	de c1                	faddp  st(1),st
c00096c2:	89 c8                	mov    eax,ecx
c00096c4:	bd 08 00 00 00       	mov    ebp,0x8
c00096c9:	99                   	cdq    
c00096ca:	f7 fd                	idiv   ebp
c00096cc:	4a                   	dec    edx
c00096cd:	83 fa 06             	cmp    edx,0x6
c00096d0:	77 07                	ja     c00096d9 <calc_output_multi+0xb8>
c00096d2:	ff 24 95 a0 08 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf760]
c00096d9:	49                   	dec    ecx
c00096da:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00096de:	d9 c0                	fld    st(0)
c00096e0:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00096e7:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00096ea:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00096ee:	dc 00                	fadd   QWORD PTR [eax]
c00096f0:	dd 18                	fstp   QWORD PTR [eax]
c00096f2:	49                   	dec    ecx
c00096f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00096f7:	d9 c0                	fld    st(0)
c00096f9:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009700:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009703:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009707:	dc 00                	fadd   QWORD PTR [eax]
c0009709:	dd 18                	fstp   QWORD PTR [eax]
c000970b:	49                   	dec    ecx
c000970c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009710:	d9 c0                	fld    st(0)
c0009712:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009719:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000971c:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009720:	dc 00                	fadd   QWORD PTR [eax]
c0009722:	dd 18                	fstp   QWORD PTR [eax]
c0009724:	49                   	dec    ecx
c0009725:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009729:	d9 c0                	fld    st(0)
c000972b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009732:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009735:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009739:	dc 00                	fadd   QWORD PTR [eax]
c000973b:	dd 18                	fstp   QWORD PTR [eax]
c000973d:	49                   	dec    ecx
c000973e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009742:	d9 c0                	fld    st(0)
c0009744:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000974b:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000974e:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009752:	dc 00                	fadd   QWORD PTR [eax]
c0009754:	dd 18                	fstp   QWORD PTR [eax]
c0009756:	49                   	dec    ecx
c0009757:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000975b:	d9 c0                	fld    st(0)
c000975d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009764:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009767:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000976b:	dc 00                	fadd   QWORD PTR [eax]
c000976d:	dd 18                	fstp   QWORD PTR [eax]
c000976f:	49                   	dec    ecx
c0009770:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009774:	d9 c0                	fld    st(0)
c0009776:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000977d:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009780:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009784:	dc 00                	fadd   QWORD PTR [eax]
c0009786:	dd 18                	fstp   QWORD PTR [eax]
c0009788:	49                   	dec    ecx
c0009789:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000978d:	d9 c0                	fld    st(0)
c000978f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009796:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009799:	85 c9                	test   ecx,ecx
c000979b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000979f:	dc 00                	fadd   QWORD PTR [eax]
c00097a1:	dd 18                	fstp   QWORD PTR [eax]
c00097a3:	0f 8f 19 ff ff ff    	jg     c00096c2 <calc_output_multi+0xa1>
c00097a9:	dd d8                	fstp   st(0)
c00097ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00097af:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c00097b3:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c00097b7:	0f 89 d9 fe ff ff    	jns    c0009696 <calc_output_multi+0x75>
c00097bd:	89 d1                	mov    ecx,edx
c00097bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00097c3:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c00097c7:	29 c8                	sub    eax,ecx
c00097c9:	99                   	cdq    
c00097ca:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c00097ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00097d2:	0f af d0             	imul   edx,eax
c00097d5:	40                   	inc    eax
c00097d6:	01 d1                	add    ecx,edx
c00097d8:	0f af c3             	imul   eax,ebx
c00097db:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c00097de:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c00097e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00097e6:	50                   	push   eax
c00097e7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097eb:	6a 00                	push   0x0
c00097ed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00097f1:	e8 12 6e ff ff       	call   c0000608 <memset>
c00097f6:	83 c4 10             	add    esp,0x10
c00097f9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00097fd:	e8 7d f7 ff ff       	call   c0008f7f <fp_to_double>
c0009802:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009806:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000980a:	e8 66 f7 ff ff       	call   c0008f75 <fp_to_int>
c000980f:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0009812:	89 d9                	mov    ecx,ebx
c0009814:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009817:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c000981b:	d8 e1                	fsub   st,st(1)
c000981d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009821:	de c9                	fmulp  st(1),st
c0009823:	de c1                	faddp  st(1),st
c0009825:	89 c8                	mov    eax,ecx
c0009827:	bd 08 00 00 00       	mov    ebp,0x8
c000982c:	99                   	cdq    
c000982d:	f7 fd                	idiv   ebp
c000982f:	4a                   	dec    edx
c0009830:	83 fa 06             	cmp    edx,0x6
c0009833:	77 07                	ja     c000983c <calc_output_multi+0x21b>
c0009835:	ff 24 95 bc 08 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf744]
c000983c:	49                   	dec    ecx
c000983d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009841:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009845:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000984c:	d9 c0                	fld    st(0)
c000984e:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009852:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009855:	dc 00                	fadd   QWORD PTR [eax]
c0009857:	dd 18                	fstp   QWORD PTR [eax]
c0009859:	49                   	dec    ecx
c000985a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000985e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009862:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009869:	d9 c0                	fld    st(0)
c000986b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000986f:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009872:	dc 00                	fadd   QWORD PTR [eax]
c0009874:	dd 18                	fstp   QWORD PTR [eax]
c0009876:	49                   	dec    ecx
c0009877:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000987b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000987f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009886:	d9 c0                	fld    st(0)
c0009888:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000988c:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000988f:	dc 00                	fadd   QWORD PTR [eax]
c0009891:	dd 18                	fstp   QWORD PTR [eax]
c0009893:	49                   	dec    ecx
c0009894:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009898:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000989c:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098a3:	d9 c0                	fld    st(0)
c00098a5:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098a9:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098ac:	dc 00                	fadd   QWORD PTR [eax]
c00098ae:	dd 18                	fstp   QWORD PTR [eax]
c00098b0:	49                   	dec    ecx
c00098b1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00098b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098b9:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098c0:	d9 c0                	fld    st(0)
c00098c2:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098c6:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098c9:	dc 00                	fadd   QWORD PTR [eax]
c00098cb:	dd 18                	fstp   QWORD PTR [eax]
c00098cd:	49                   	dec    ecx
c00098ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00098d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098d6:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098dd:	d9 c0                	fld    st(0)
c00098df:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098e3:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098e6:	dc 00                	fadd   QWORD PTR [eax]
c00098e8:	dd 18                	fstp   QWORD PTR [eax]
c00098ea:	49                   	dec    ecx
c00098eb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00098ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098f3:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098fa:	d9 c0                	fld    st(0)
c00098fc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009900:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009903:	dc 00                	fadd   QWORD PTR [eax]
c0009905:	dd 18                	fstp   QWORD PTR [eax]
c0009907:	49                   	dec    ecx
c0009908:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000990c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009910:	85 c9                	test   ecx,ecx
c0009912:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009919:	d9 c0                	fld    st(0)
c000991b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000991f:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009922:	dc 00                	fadd   QWORD PTR [eax]
c0009924:	dd 18                	fstp   QWORD PTR [eax]
c0009926:	0f 8f f9 fe ff ff    	jg     c0009825 <calc_output_multi+0x204>
c000992c:	dd d8                	fstp   st(0)
c000992e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009932:	29 5c 24 18          	sub    DWORD PTR [esp+0x18],ebx
c0009936:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c000993a:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000993f:	0f 8f b4 fe ff ff    	jg     c00097f9 <calc_output_multi+0x1d8>
c0009945:	b9 08 00 00 00       	mov    ecx,0x8
c000994a:	89 d8                	mov    eax,ebx
c000994c:	99                   	cdq    
c000994d:	f7 f9                	idiv   ecx
c000994f:	4a                   	dec    edx
c0009950:	83 fa 06             	cmp    edx,0x6
c0009953:	77 07                	ja     c000995c <calc_output_multi+0x33b>
c0009955:	ff 24 95 d8 08 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf728]
c000995c:	4b                   	dec    ebx
c000995d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009961:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009964:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009967:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000996b:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c000996f:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009972:	4b                   	dec    ebx
c0009973:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009977:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c000997a:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c000997d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009981:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009985:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009988:	4b                   	dec    ebx
c0009989:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000998d:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009990:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009993:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009997:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c000999b:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c000999e:	4b                   	dec    ebx
c000999f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099a3:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099a6:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099a9:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099ad:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c00099b1:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099b4:	4b                   	dec    ebx
c00099b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099b9:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099bc:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099bf:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099c3:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c00099c7:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099ca:	4b                   	dec    ebx
c00099cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099cf:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099d2:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099d5:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099d9:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c00099dd:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099e0:	4b                   	dec    ebx
c00099e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e5:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099e8:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099eb:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099ef:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c00099f3:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099f6:	4b                   	dec    ebx
c00099f7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099fb:	85 db                	test   ebx,ebx
c00099fd:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a00:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a03:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a07:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a0b:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a0e:	0f 8f 36 ff ff ff    	jg     c000994a <calc_output_multi+0x329>
c0009a14:	83 c4 4c             	add    esp,0x4c
c0009a17:	5b                   	pop    ebx
c0009a18:	5e                   	pop    esi
c0009a19:	5f                   	pop    edi
c0009a1a:	5d                   	pop    ebp
c0009a1b:	c3                   	ret    

c0009a1c <double_to_fp>:
c0009a1c:	d9 05 2c 0a 02 c0    	fld    DWORD PTR ds:0xc0020a2c
c0009a22:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009a26:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009a2a:	e9 c1 56 01 00       	jmp    c001f0f0 <lrint>

c0009a2f <fmod_one>:
c0009a2f:	83 ec 2c             	sub    esp,0x2c
c0009a32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a3a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a42:	83 ec 08             	sub    esp,0x8
c0009a45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a4d:	e8 9e 56 01 00       	call   c001f0f0 <lrint>
c0009a52:	83 c4 10             	add    esp,0x10
c0009a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a59:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009a5d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009a61:	de e1                	fsubrp st(1),st
c0009a63:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009a67:	d9 ee                	fldz   
c0009a69:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009a6d:	df e0                	fnstsw ax
c0009a6f:	f6 c4 45             	test   ah,0x45
c0009a72:	75 0a                	jne    c0009a7e <fmod_one+0x4f>
c0009a74:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009a78:	d9 e8                	fld1   
c0009a7a:	de c1                	faddp  st(1),st
c0009a7c:	eb 04                	jmp    c0009a82 <fmod_one+0x53>
c0009a7e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009a82:	83 c4 2c             	add    esp,0x2c
c0009a85:	c3                   	ret    

c0009a86 <prepare_data>:
c0009a86:	55                   	push   ebp
c0009a87:	57                   	push   edi
c0009a88:	56                   	push   esi
c0009a89:	53                   	push   ebx
c0009a8a:	83 ec 1c             	sub    esp,0x1c
c0009a8d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009a91:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009a95:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009a99:	0f 89 57 01 00 00    	jns    c0009bf6 <prepare_data+0x170>
c0009a9f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009aa2:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009aa5:	85 d2                	test   edx,edx
c0009aa7:	75 0d                	jne    c0009ab6 <prepare_data+0x30>
c0009aa9:	8d 14 36             	lea    edx,[esi+esi*1]
c0009aac:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009aaf:	29 d0                	sub    eax,edx
c0009ab1:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009ab4:	eb 44                	jmp    c0009afa <prepare_data+0x74>
c0009ab6:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009ab9:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009abc:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009abf:	39 c1                	cmp    ecx,eax
c0009ac1:	7d 04                	jge    c0009ac7 <prepare_data+0x41>
c0009ac3:	29 d0                	sub    eax,edx
c0009ac5:	eb 2d                	jmp    c0009af4 <prepare_data+0x6e>
c0009ac7:	29 d7                	sub    edi,edx
c0009ac9:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009acf:	01 f7                	add    edi,esi
c0009ad1:	29 f2                	sub    edx,esi
c0009ad3:	51                   	push   ecx
c0009ad4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009adb:	8d 14 90             	lea    edx,[eax+edx*4]
c0009ade:	51                   	push   ecx
c0009adf:	52                   	push   edx
c0009ae0:	50                   	push   eax
c0009ae1:	e8 b4 6a ff ff       	call   c000059a <memmove>
c0009ae6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009ae9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009aec:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009aef:	29 f0                	sub    eax,esi
c0009af1:	83 c4 10             	add    esp,0x10
c0009af4:	29 f0                	sub    eax,esi
c0009af6:	79 02                	jns    c0009afa <prepare_data+0x74>
c0009af8:	31 c0                	xor    eax,eax
c0009afa:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009afd:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009b00:	29 ef                	sub    edi,ebp
c0009b02:	39 c7                	cmp    edi,eax
c0009b04:	7e 02                	jle    c0009b08 <prepare_data+0x82>
c0009b06:	89 c7                	mov    edi,eax
c0009b08:	89 f8                	mov    eax,edi
c0009b0a:	99                   	cdq    
c0009b0b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009b0e:	29 d7                	sub    edi,edx
c0009b10:	b8 15 00 00 00       	mov    eax,0x15
c0009b15:	0f 88 dd 00 00 00    	js     c0009bf8 <prepare_data+0x172>
c0009b1b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009b1e:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009b21:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009b24:	0f 8f ce 00 00 00    	jg     c0009bf8 <prepare_data+0x172>
c0009b2a:	50                   	push   eax
c0009b2b:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009b32:	50                   	push   eax
c0009b33:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009b39:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009b3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b3f:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009b42:	50                   	push   eax
c0009b43:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009b46:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009b4a:	50                   	push   eax
c0009b4b:	e8 82 6a ff ff       	call   c00005d2 <memcpy>
c0009b50:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009b53:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009b56:	83 c4 10             	add    esp,0x10
c0009b59:	01 fd                	add    ebp,edi
c0009b5b:	01 f9                	add    ecx,edi
c0009b5d:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009b60:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009b63:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009b66:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b6a:	0f 85 86 00 00 00    	jne    c0009bf6 <prepare_data+0x170>
c0009b70:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009b73:	89 e8                	mov    eax,ebp
c0009b75:	29 c8                	sub    eax,ecx
c0009b77:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009b7a:	39 f8                	cmp    eax,edi
c0009b7c:	7d 78                	jge    c0009bf6 <prepare_data+0x170>
c0009b7e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009b82:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009b86:	74 6e                	je     c0009bf6 <prepare_data+0x170>
c0009b88:	8d 7e 04             	lea    edi,[esi+0x4]
c0009b8b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009b8f:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009b92:	29 ef                	sub    edi,ebp
c0009b94:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009b98:	7c 29                	jl     c0009bc3 <prepare_data+0x13d>
c0009b9a:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009b9d:	29 f1                	sub    ecx,esi
c0009b9f:	55                   	push   ebp
c0009ba0:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009ba7:	50                   	push   eax
c0009ba8:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bab:	50                   	push   eax
c0009bac:	52                   	push   edx
c0009bad:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009bb1:	e8 e4 69 ff ff       	call   c000059a <memmove>
c0009bb6:	83 c4 10             	add    esp,0x10
c0009bb9:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bbc:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009bbf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009bc3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009bc6:	83 c6 05             	add    esi,0x5
c0009bc9:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009bcc:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009bcf:	78 07                	js     c0009bd8 <prepare_data+0x152>
c0009bd1:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bd4:	39 cf                	cmp    edi,ecx
c0009bd6:	7e 04                	jle    c0009bdc <prepare_data+0x156>
c0009bd8:	89 ce                	mov    esi,ecx
c0009bda:	29 c6                	sub    esi,eax
c0009bdc:	51                   	push   ecx
c0009bdd:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009be4:	51                   	push   ecx
c0009be5:	8d 04 82             	lea    eax,[edx+eax*4]
c0009be8:	6a 00                	push   0x0
c0009bea:	50                   	push   eax
c0009beb:	e8 18 6a ff ff       	call   c0000608 <memset>
c0009bf0:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009bf3:	83 c4 10             	add    esp,0x10
c0009bf6:	31 c0                	xor    eax,eax
c0009bf8:	83 c4 1c             	add    esp,0x1c
c0009bfb:	5b                   	pop    ebx
c0009bfc:	5e                   	pop    esi
c0009bfd:	5f                   	pop    edi
c0009bfe:	5d                   	pop    ebp
c0009bff:	c3                   	ret    

c0009c00 <sinc_multichan_vari_process>:
c0009c00:	55                   	push   ebp
c0009c01:	b8 05 00 00 00       	mov    eax,0x5
c0009c06:	57                   	push   edi
c0009c07:	56                   	push   esi
c0009c08:	53                   	push   ebx
c0009c09:	83 ec 3c             	sub    esp,0x3c
c0009c0c:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009c10:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009c14:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009c17:	85 db                	test   ebx,ebx
c0009c19:	0f 84 5b 02 00 00    	je     c0009e7a <sinc_multichan_vari_process+0x27a>
c0009c1f:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009c22:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009c25:	0f af d0             	imul   edx,eax
c0009c28:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009c2b:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009c2f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009c36:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009c39:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009c40:	dd 06                	fld    QWORD PTR [esi]
c0009c42:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009c46:	55                   	push   ebp
c0009c47:	55                   	push   ebp
c0009c48:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009c4b:	e8 dd f2 ff ff       	call   c0008f2d <is_bad_src_ratio>
c0009c50:	89 c2                	mov    edx,eax
c0009c52:	58                   	pop    eax
c0009c53:	59                   	pop    ecx
c0009c54:	b8 16 00 00 00       	mov    eax,0x16
c0009c59:	85 d2                	test   edx,edx
c0009c5b:	0f 85 19 02 00 00    	jne    c0009e7a <sinc_multichan_vari_process+0x27a>
c0009c61:	d9 05 30 0a 02 c0    	fld    DWORD PTR ds:0xc0020a30
c0009c67:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009c6a:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009c6d:	dd 06                	fld    QWORD PTR [esi]
c0009c6f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009c72:	d8 d1                	fcom   st(1)
c0009c74:	df e0                	fnstsw ax
c0009c76:	9e                   	sahf   
c0009c77:	76 0f                	jbe    c0009c88 <sinc_multichan_vari_process+0x88>
c0009c79:	dd d8                	fstp   st(0)
c0009c7b:	d9 e8                	fld1   
c0009c7d:	d8 d9                	fcomp  st(1)
c0009c7f:	df e0                	fnstsw ax
c0009c81:	9e                   	sahf   
c0009c82:	77 0f                	ja     c0009c93 <sinc_multichan_vari_process+0x93>
c0009c84:	dd d8                	fstp   st(0)
c0009c86:	eb 11                	jmp    c0009c99 <sinc_multichan_vari_process+0x99>
c0009c88:	dd d9                	fstp   st(1)
c0009c8a:	d9 e8                	fld1   
c0009c8c:	d8 d9                	fcomp  st(1)
c0009c8e:	df e0                	fnstsw ax
c0009c90:	9e                   	sahf   
c0009c91:	76 04                	jbe    c0009c97 <sinc_multichan_vari_process+0x97>
c0009c93:	de f9                	fdivp  st(1),st
c0009c95:	eb 02                	jmp    c0009c99 <sinc_multichan_vari_process+0x99>
c0009c97:	dd d8                	fstp   st(0)
c0009c99:	83 ec 10             	sub    esp,0x10
c0009c9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009c9f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ca2:	e8 49 54 01 00       	call   c001f0f0 <lrint>
c0009ca7:	40                   	inc    eax
c0009ca8:	0f af c5             	imul   eax,ebp
c0009cab:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009cae:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009cb2:	dd 14 24             	fst    QWORD PTR [esp]
c0009cb5:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009cb9:	e8 71 fd ff ff       	call   c0009a2f <fmod_one>
c0009cbe:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009cc1:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009cc4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cc8:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009ccc:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009cd0:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009cd4:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cd7:	e8 14 54 01 00       	call   c001f0f0 <lrint>
c0009cdc:	d9 e8                	fld1   
c0009cde:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009ce2:	0f af e8             	imul   ebp,eax
c0009ce5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009ce9:	01 e8                	add    eax,ebp
c0009ceb:	99                   	cdq    
c0009cec:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009cef:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009cf2:	dc 05 98 08 02 c0    	fadd   QWORD PTR ds:0xc0020898
c0009cf8:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009cfc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009cff:	83 c4 10             	add    esp,0x10
c0009d02:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009d05:	7d 4b                	jge    c0009d52 <sinc_multichan_vari_process+0x152>
c0009d07:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d0a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d0d:	01 c8                	add    eax,ecx
c0009d0f:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d12:	99                   	cdq    
c0009d13:	f7 f9                	idiv   ecx
c0009d15:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d19:	7d 09                	jge    c0009d24 <sinc_multichan_vari_process+0x124>
c0009d1b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009d1e:	85 c0                	test   eax,eax
c0009d20:	79 57                	jns    c0009d79 <sinc_multichan_vari_process+0x179>
c0009d22:	eb 70                	jmp    c0009d94 <sinc_multichan_vari_process+0x194>
c0009d24:	51                   	push   ecx
c0009d25:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d29:	57                   	push   edi
c0009d2a:	53                   	push   ebx
c0009d2b:	e8 56 fd ff ff       	call   c0009a86 <prepare_data>
c0009d30:	83 c4 10             	add    esp,0x10
c0009d33:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009d36:	85 c0                	test   eax,eax
c0009d38:	0f 85 3c 01 00 00    	jne    c0009e7a <sinc_multichan_vari_process+0x27a>
c0009d3e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d41:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d44:	01 c8                	add    eax,ecx
c0009d46:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d49:	99                   	cdq    
c0009d4a:	f7 f9                	idiv   ecx
c0009d4c:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d50:	7c c9                	jl     c0009d1b <sinc_multichan_vari_process+0x11b>
c0009d52:	dd 04 24             	fld    QWORD PTR [esp]
c0009d55:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009d58:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009d5c:	dd 1e                	fstp   QWORD PTR [esi]
c0009d5e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009d61:	99                   	cdq    
c0009d62:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d65:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009d68:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009d6b:	99                   	cdq    
c0009d6c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d6f:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009d72:	31 c0                	xor    eax,eax
c0009d74:	e9 01 01 00 00       	jmp    c0009e7a <sinc_multichan_vari_process+0x27a>
c0009d79:	dd 04 24             	fld    QWORD PTR [esp]
c0009d7c:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009d7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d83:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009d87:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009d8b:	d9 c9                	fxch   st(1)
c0009d8d:	de d9                	fcompp 
c0009d8f:	df e0                	fnstsw ax
c0009d91:	9e                   	sahf   
c0009d92:	73 be                	jae    c0009d52 <sinc_multichan_vari_process+0x152>
c0009d94:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009d98:	7e 2f                	jle    c0009dc9 <sinc_multichan_vari_process+0x1c9>
c0009d9a:	dd 06                	fld    QWORD PTR [esi]
c0009d9c:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009d9f:	83 ec 10             	sub    esp,0x10
c0009da2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009da5:	e8 26 53 01 00       	call   c001f0d0 <fabs>
c0009daa:	83 c4 10             	add    esp,0x10
c0009dad:	dc 1d 20 0a 02 c0    	fcomp  QWORD PTR ds:0xc0020a20
c0009db3:	df e0                	fnstsw ax
c0009db5:	9e                   	sahf   
c0009db6:	76 11                	jbe    c0009dc9 <sinc_multichan_vari_process+0x1c9>
c0009db8:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009dbb:	dc 26                	fsub   QWORD PTR [esi]
c0009dbd:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009dc0:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009dc3:	dc 06                	fadd   QWORD PTR [esi]
c0009dc5:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009dc9:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009dcc:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009dd0:	d9 e8                	fld1   
c0009dd2:	d8 d9                	fcomp  st(1)
c0009dd4:	df e0                	fnstsw ax
c0009dd6:	9e                   	sahf   
c0009dd7:	77 04                	ja     c0009ddd <sinc_multichan_vari_process+0x1dd>
c0009dd9:	dd d8                	fstp   st(0)
c0009ddb:	d9 e8                	fld1   
c0009ddd:	de c9                	fmulp  st(1),st
c0009ddf:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009de3:	50                   	push   eax
c0009de4:	50                   	push   eax
c0009de5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009de9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ded:	e8 2a fc ff ff       	call   c0009a1c <double_to_fp>
c0009df2:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009df6:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009dfa:	89 c5                	mov    ebp,eax
c0009dfc:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009dff:	e8 18 fc ff ff       	call   c0009a1c <double_to_fp>
c0009e04:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009e07:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009e0a:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009e0d:	89 c1                	mov    ecx,eax
c0009e0f:	52                   	push   edx
c0009e10:	89 d8                	mov    eax,ebx
c0009e12:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009e16:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009e19:	52                   	push   edx
c0009e1a:	52                   	push   edx
c0009e1b:	89 ea                	mov    edx,ebp
c0009e1d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e20:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009e23:	e8 f9 f7 ff ff       	call   c0009621 <calc_output_multi>
c0009e28:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009e2b:	d9 e8                	fld1   
c0009e2d:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009e31:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009e34:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e38:	83 c4 10             	add    esp,0x10
c0009e3b:	dd 14 24             	fst    QWORD PTR [esp]
c0009e3e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009e42:	e8 e8 fb ff ff       	call   c0009a2f <fmod_one>
c0009e47:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009e4a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009e4d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e51:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009e55:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009e59:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009e5d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e60:	e8 8b 52 01 00       	call   c001f0f0 <lrint>
c0009e65:	0f af e8             	imul   ebp,eax
c0009e68:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009e6c:	01 e8                	add    eax,ebp
c0009e6e:	99                   	cdq    
c0009e6f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009e72:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009e75:	e9 82 fe ff ff       	jmp    c0009cfc <sinc_multichan_vari_process+0xfc>
c0009e7a:	83 c4 3c             	add    esp,0x3c
c0009e7d:	5b                   	pop    ebx
c0009e7e:	5e                   	pop    esi
c0009e7f:	5f                   	pop    edi
c0009e80:	5d                   	pop    ebp
c0009e81:	c3                   	ret    

c0009e82 <sinc_hex_vari_process>:
c0009e82:	55                   	push   ebp
c0009e83:	b8 05 00 00 00       	mov    eax,0x5
c0009e88:	57                   	push   edi
c0009e89:	56                   	push   esi
c0009e8a:	53                   	push   ebx
c0009e8b:	83 ec 3c             	sub    esp,0x3c
c0009e8e:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009e92:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009e96:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009e99:	85 db                	test   ebx,ebx
c0009e9b:	0f 84 56 02 00 00    	je     c000a0f7 <sinc_hex_vari_process+0x275>
c0009ea1:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009ea4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009ea7:	0f af d0             	imul   edx,eax
c0009eaa:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009ead:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009eb1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009eb8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009ebb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009ec2:	dd 06                	fld    QWORD PTR [esi]
c0009ec4:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009ec8:	55                   	push   ebp
c0009ec9:	55                   	push   ebp
c0009eca:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ecd:	e8 5b f0 ff ff       	call   c0008f2d <is_bad_src_ratio>
c0009ed2:	89 c2                	mov    edx,eax
c0009ed4:	58                   	pop    eax
c0009ed5:	59                   	pop    ecx
c0009ed6:	b8 16 00 00 00       	mov    eax,0x16
c0009edb:	85 d2                	test   edx,edx
c0009edd:	0f 85 14 02 00 00    	jne    c000a0f7 <sinc_hex_vari_process+0x275>
c0009ee3:	d9 05 30 0a 02 c0    	fld    DWORD PTR ds:0xc0020a30
c0009ee9:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009eec:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009eef:	dd 06                	fld    QWORD PTR [esi]
c0009ef1:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009ef4:	d8 d1                	fcom   st(1)
c0009ef6:	df e0                	fnstsw ax
c0009ef8:	9e                   	sahf   
c0009ef9:	76 0f                	jbe    c0009f0a <sinc_hex_vari_process+0x88>
c0009efb:	dd d8                	fstp   st(0)
c0009efd:	d9 e8                	fld1   
c0009eff:	d8 d9                	fcomp  st(1)
c0009f01:	df e0                	fnstsw ax
c0009f03:	9e                   	sahf   
c0009f04:	77 0f                	ja     c0009f15 <sinc_hex_vari_process+0x93>
c0009f06:	dd d8                	fstp   st(0)
c0009f08:	eb 11                	jmp    c0009f1b <sinc_hex_vari_process+0x99>
c0009f0a:	dd d9                	fstp   st(1)
c0009f0c:	d9 e8                	fld1   
c0009f0e:	d8 d9                	fcomp  st(1)
c0009f10:	df e0                	fnstsw ax
c0009f12:	9e                   	sahf   
c0009f13:	76 04                	jbe    c0009f19 <sinc_hex_vari_process+0x97>
c0009f15:	de f9                	fdivp  st(1),st
c0009f17:	eb 02                	jmp    c0009f1b <sinc_hex_vari_process+0x99>
c0009f19:	dd d8                	fstp   st(0)
c0009f1b:	83 ec 10             	sub    esp,0x10
c0009f1e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f21:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f24:	e8 c7 51 01 00       	call   c001f0f0 <lrint>
c0009f29:	40                   	inc    eax
c0009f2a:	0f af c5             	imul   eax,ebp
c0009f2d:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009f30:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009f34:	dd 14 24             	fst    QWORD PTR [esp]
c0009f37:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f3b:	e8 ef fa ff ff       	call   c0009a2f <fmod_one>
c0009f40:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f43:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f46:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f4a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f4e:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009f52:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f56:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f59:	e8 92 51 01 00       	call   c001f0f0 <lrint>
c0009f5e:	d9 e8                	fld1   
c0009f60:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009f64:	0f af e8             	imul   ebp,eax
c0009f67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6b:	01 e8                	add    eax,ebp
c0009f6d:	99                   	cdq    
c0009f6e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009f71:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009f74:	dc 05 98 08 02 c0    	fadd   QWORD PTR ds:0xc0020898
c0009f7a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f7e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009f81:	83 c4 10             	add    esp,0x10
c0009f84:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009f87:	7d 4b                	jge    c0009fd4 <sinc_hex_vari_process+0x152>
c0009f89:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009f8c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009f8f:	01 c8                	add    eax,ecx
c0009f91:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009f94:	99                   	cdq    
c0009f95:	f7 f9                	idiv   ecx
c0009f97:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009f9b:	7d 09                	jge    c0009fa6 <sinc_hex_vari_process+0x124>
c0009f9d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009fa0:	85 c0                	test   eax,eax
c0009fa2:	79 57                	jns    c0009ffb <sinc_hex_vari_process+0x179>
c0009fa4:	eb 70                	jmp    c000a016 <sinc_hex_vari_process+0x194>
c0009fa6:	51                   	push   ecx
c0009fa7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009fab:	57                   	push   edi
c0009fac:	53                   	push   ebx
c0009fad:	e8 d4 fa ff ff       	call   c0009a86 <prepare_data>
c0009fb2:	83 c4 10             	add    esp,0x10
c0009fb5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009fb8:	85 c0                	test   eax,eax
c0009fba:	0f 85 37 01 00 00    	jne    c000a0f7 <sinc_hex_vari_process+0x275>
c0009fc0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fc3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009fc6:	01 c8                	add    eax,ecx
c0009fc8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009fcb:	99                   	cdq    
c0009fcc:	f7 f9                	idiv   ecx
c0009fce:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009fd2:	7c c9                	jl     c0009f9d <sinc_hex_vari_process+0x11b>
c0009fd4:	dd 04 24             	fld    QWORD PTR [esp]
c0009fd7:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009fda:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009fde:	dd 1e                	fstp   QWORD PTR [esi]
c0009fe0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009fe3:	99                   	cdq    
c0009fe4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009fe7:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009fea:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009fed:	99                   	cdq    
c0009fee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009ff1:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009ff4:	31 c0                	xor    eax,eax
c0009ff6:	e9 fc 00 00 00       	jmp    c000a0f7 <sinc_hex_vari_process+0x275>
c0009ffb:	dd 04 24             	fld    QWORD PTR [esp]
c0009ffe:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a001:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a005:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a009:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a00d:	d9 c9                	fxch   st(1)
c000a00f:	de d9                	fcompp 
c000a011:	df e0                	fnstsw ax
c000a013:	9e                   	sahf   
c000a014:	73 be                	jae    c0009fd4 <sinc_hex_vari_process+0x152>
c000a016:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a01a:	7e 2f                	jle    c000a04b <sinc_hex_vari_process+0x1c9>
c000a01c:	dd 06                	fld    QWORD PTR [esi]
c000a01e:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a021:	83 ec 10             	sub    esp,0x10
c000a024:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a027:	e8 a4 50 01 00       	call   c001f0d0 <fabs>
c000a02c:	83 c4 10             	add    esp,0x10
c000a02f:	dc 1d 20 0a 02 c0    	fcomp  QWORD PTR ds:0xc0020a20
c000a035:	df e0                	fnstsw ax
c000a037:	9e                   	sahf   
c000a038:	76 11                	jbe    c000a04b <sinc_hex_vari_process+0x1c9>
c000a03a:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a03d:	dc 26                	fsub   QWORD PTR [esi]
c000a03f:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a042:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a045:	dc 06                	fadd   QWORD PTR [esi]
c000a047:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a04b:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a04e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a052:	d9 e8                	fld1   
c000a054:	d8 d9                	fcomp  st(1)
c000a056:	df e0                	fnstsw ax
c000a058:	9e                   	sahf   
c000a059:	77 04                	ja     c000a05f <sinc_hex_vari_process+0x1dd>
c000a05b:	dd d8                	fstp   st(0)
c000a05d:	d9 e8                	fld1   
c000a05f:	de c9                	fmulp  st(1),st
c000a061:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a065:	50                   	push   eax
c000a066:	50                   	push   eax
c000a067:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a06b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a06f:	e8 a8 f9 ff ff       	call   c0009a1c <double_to_fp>
c000a074:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a078:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a07c:	89 c5                	mov    ebp,eax
c000a07e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a081:	e8 96 f9 ff ff       	call   c0009a1c <double_to_fp>
c000a086:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a089:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a08c:	83 c4 0c             	add    esp,0xc
c000a08f:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a092:	89 c1                	mov    ecx,eax
c000a094:	52                   	push   edx
c000a095:	89 d8                	mov    eax,ebx
c000a097:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a09b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a09e:	52                   	push   edx
c000a09f:	52                   	push   edx
c000a0a0:	89 ea                	mov    edx,ebp
c000a0a2:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0a5:	e8 db f2 ff ff       	call   c0009385 <calc_output_hex>
c000a0aa:	d9 e8                	fld1   
c000a0ac:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a0b0:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a0b4:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a0b8:	dd 14 24             	fst    QWORD PTR [esp]
c000a0bb:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a0bf:	e8 6b f9 ff ff       	call   c0009a2f <fmod_one>
c000a0c4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a0c7:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a0ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a0ce:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a0d2:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a0d6:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a0da:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0dd:	e8 0e 50 01 00       	call   c001f0f0 <lrint>
c000a0e2:	0f af e8             	imul   ebp,eax
c000a0e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a0e9:	01 e8                	add    eax,ebp
c000a0eb:	99                   	cdq    
c000a0ec:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a0ef:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a0f2:	e9 87 fe ff ff       	jmp    c0009f7e <sinc_hex_vari_process+0xfc>
c000a0f7:	83 c4 3c             	add    esp,0x3c
c000a0fa:	5b                   	pop    ebx
c000a0fb:	5e                   	pop    esi
c000a0fc:	5f                   	pop    edi
c000a0fd:	5d                   	pop    ebp
c000a0fe:	c3                   	ret    

c000a0ff <sinc_quad_vari_process>:
c000a0ff:	55                   	push   ebp
c000a100:	b8 05 00 00 00       	mov    eax,0x5
c000a105:	57                   	push   edi
c000a106:	56                   	push   esi
c000a107:	53                   	push   ebx
c000a108:	83 ec 3c             	sub    esp,0x3c
c000a10b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a10f:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a113:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a116:	85 db                	test   ebx,ebx
c000a118:	0f 84 56 02 00 00    	je     c000a374 <sinc_quad_vari_process+0x275>
c000a11e:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a121:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a124:	0f af d0             	imul   edx,eax
c000a127:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a12a:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a12e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a135:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a138:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a13f:	dd 06                	fld    QWORD PTR [esi]
c000a141:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a145:	55                   	push   ebp
c000a146:	55                   	push   ebp
c000a147:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a14a:	e8 de ed ff ff       	call   c0008f2d <is_bad_src_ratio>
c000a14f:	89 c2                	mov    edx,eax
c000a151:	58                   	pop    eax
c000a152:	59                   	pop    ecx
c000a153:	b8 16 00 00 00       	mov    eax,0x16
c000a158:	85 d2                	test   edx,edx
c000a15a:	0f 85 14 02 00 00    	jne    c000a374 <sinc_quad_vari_process+0x275>
c000a160:	d9 05 30 0a 02 c0    	fld    DWORD PTR ds:0xc0020a30
c000a166:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a169:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a16c:	dd 06                	fld    QWORD PTR [esi]
c000a16e:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a171:	d8 d1                	fcom   st(1)
c000a173:	df e0                	fnstsw ax
c000a175:	9e                   	sahf   
c000a176:	76 0f                	jbe    c000a187 <sinc_quad_vari_process+0x88>
c000a178:	dd d8                	fstp   st(0)
c000a17a:	d9 e8                	fld1   
c000a17c:	d8 d9                	fcomp  st(1)
c000a17e:	df e0                	fnstsw ax
c000a180:	9e                   	sahf   
c000a181:	77 0f                	ja     c000a192 <sinc_quad_vari_process+0x93>
c000a183:	dd d8                	fstp   st(0)
c000a185:	eb 11                	jmp    c000a198 <sinc_quad_vari_process+0x99>
c000a187:	dd d9                	fstp   st(1)
c000a189:	d9 e8                	fld1   
c000a18b:	d8 d9                	fcomp  st(1)
c000a18d:	df e0                	fnstsw ax
c000a18f:	9e                   	sahf   
c000a190:	76 04                	jbe    c000a196 <sinc_quad_vari_process+0x97>
c000a192:	de f9                	fdivp  st(1),st
c000a194:	eb 02                	jmp    c000a198 <sinc_quad_vari_process+0x99>
c000a196:	dd d8                	fstp   st(0)
c000a198:	83 ec 10             	sub    esp,0x10
c000a19b:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a19e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1a1:	e8 4a 4f 01 00       	call   c001f0f0 <lrint>
c000a1a6:	40                   	inc    eax
c000a1a7:	0f af c5             	imul   eax,ebp
c000a1aa:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a1ad:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a1b1:	dd 14 24             	fst    QWORD PTR [esp]
c000a1b4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a1b8:	e8 72 f8 ff ff       	call   c0009a2f <fmod_one>
c000a1bd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a1c0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1c7:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a1cb:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a1cf:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a1d3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1d6:	e8 15 4f 01 00       	call   c001f0f0 <lrint>
c000a1db:	d9 e8                	fld1   
c000a1dd:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a1e1:	0f af e8             	imul   ebp,eax
c000a1e4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a1e8:	01 e8                	add    eax,ebp
c000a1ea:	99                   	cdq    
c000a1eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a1ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a1f1:	dc 05 98 08 02 c0    	fadd   QWORD PTR ds:0xc0020898
c000a1f7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a1fb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a1fe:	83 c4 10             	add    esp,0x10
c000a201:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a204:	7d 4b                	jge    c000a251 <sinc_quad_vari_process+0x152>
c000a206:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a209:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a20c:	01 c8                	add    eax,ecx
c000a20e:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a211:	99                   	cdq    
c000a212:	f7 f9                	idiv   ecx
c000a214:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a218:	7d 09                	jge    c000a223 <sinc_quad_vari_process+0x124>
c000a21a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a21d:	85 c0                	test   eax,eax
c000a21f:	79 57                	jns    c000a278 <sinc_quad_vari_process+0x179>
c000a221:	eb 70                	jmp    c000a293 <sinc_quad_vari_process+0x194>
c000a223:	51                   	push   ecx
c000a224:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a228:	57                   	push   edi
c000a229:	53                   	push   ebx
c000a22a:	e8 57 f8 ff ff       	call   c0009a86 <prepare_data>
c000a22f:	83 c4 10             	add    esp,0x10
c000a232:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a235:	85 c0                	test   eax,eax
c000a237:	0f 85 37 01 00 00    	jne    c000a374 <sinc_quad_vari_process+0x275>
c000a23d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a240:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a243:	01 c8                	add    eax,ecx
c000a245:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a248:	99                   	cdq    
c000a249:	f7 f9                	idiv   ecx
c000a24b:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a24f:	7c c9                	jl     c000a21a <sinc_quad_vari_process+0x11b>
c000a251:	dd 04 24             	fld    QWORD PTR [esp]
c000a254:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a257:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a25b:	dd 1e                	fstp   QWORD PTR [esi]
c000a25d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a260:	99                   	cdq    
c000a261:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a264:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a267:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a26a:	99                   	cdq    
c000a26b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a26e:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a271:	31 c0                	xor    eax,eax
c000a273:	e9 fc 00 00 00       	jmp    c000a374 <sinc_quad_vari_process+0x275>
c000a278:	dd 04 24             	fld    QWORD PTR [esp]
c000a27b:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a27e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a282:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a286:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a28a:	d9 c9                	fxch   st(1)
c000a28c:	de d9                	fcompp 
c000a28e:	df e0                	fnstsw ax
c000a290:	9e                   	sahf   
c000a291:	73 be                	jae    c000a251 <sinc_quad_vari_process+0x152>
c000a293:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a297:	7e 2f                	jle    c000a2c8 <sinc_quad_vari_process+0x1c9>
c000a299:	dd 06                	fld    QWORD PTR [esi]
c000a29b:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a29e:	83 ec 10             	sub    esp,0x10
c000a2a1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2a4:	e8 27 4e 01 00       	call   c001f0d0 <fabs>
c000a2a9:	83 c4 10             	add    esp,0x10
c000a2ac:	dc 1d 20 0a 02 c0    	fcomp  QWORD PTR ds:0xc0020a20
c000a2b2:	df e0                	fnstsw ax
c000a2b4:	9e                   	sahf   
c000a2b5:	76 11                	jbe    c000a2c8 <sinc_quad_vari_process+0x1c9>
c000a2b7:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a2ba:	dc 26                	fsub   QWORD PTR [esi]
c000a2bc:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a2bf:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a2c2:	dc 06                	fadd   QWORD PTR [esi]
c000a2c4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a2c8:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a2cb:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a2cf:	d9 e8                	fld1   
c000a2d1:	d8 d9                	fcomp  st(1)
c000a2d3:	df e0                	fnstsw ax
c000a2d5:	9e                   	sahf   
c000a2d6:	77 04                	ja     c000a2dc <sinc_quad_vari_process+0x1dd>
c000a2d8:	dd d8                	fstp   st(0)
c000a2da:	d9 e8                	fld1   
c000a2dc:	de c9                	fmulp  st(1),st
c000a2de:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a2e2:	50                   	push   eax
c000a2e3:	50                   	push   eax
c000a2e4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a2e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a2ec:	e8 2b f7 ff ff       	call   c0009a1c <double_to_fp>
c000a2f1:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a2f5:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a2f9:	89 c5                	mov    ebp,eax
c000a2fb:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2fe:	e8 19 f7 ff ff       	call   c0009a1c <double_to_fp>
c000a303:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a306:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a309:	83 c4 0c             	add    esp,0xc
c000a30c:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a30f:	89 c1                	mov    ecx,eax
c000a311:	52                   	push   edx
c000a312:	89 d8                	mov    eax,ebx
c000a314:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a318:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a31b:	52                   	push   edx
c000a31c:	52                   	push   edx
c000a31d:	89 ea                	mov    edx,ebp
c000a31f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a322:	e8 99 ee ff ff       	call   c00091c0 <calc_output_quad>
c000a327:	d9 e8                	fld1   
c000a329:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a32d:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a331:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a335:	dd 14 24             	fst    QWORD PTR [esp]
c000a338:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a33c:	e8 ee f6 ff ff       	call   c0009a2f <fmod_one>
c000a341:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a344:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a347:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a34b:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a34f:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a353:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a357:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a35a:	e8 91 4d 01 00       	call   c001f0f0 <lrint>
c000a35f:	0f af e8             	imul   ebp,eax
c000a362:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a366:	01 e8                	add    eax,ebp
c000a368:	99                   	cdq    
c000a369:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a36c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a36f:	e9 87 fe ff ff       	jmp    c000a1fb <sinc_quad_vari_process+0xfc>
c000a374:	83 c4 3c             	add    esp,0x3c
c000a377:	5b                   	pop    ebx
c000a378:	5e                   	pop    esi
c000a379:	5f                   	pop    edi
c000a37a:	5d                   	pop    ebp
c000a37b:	c3                   	ret    

c000a37c <sinc_stereo_vari_process>:
c000a37c:	55                   	push   ebp
c000a37d:	b8 05 00 00 00       	mov    eax,0x5
c000a382:	57                   	push   edi
c000a383:	56                   	push   esi
c000a384:	53                   	push   ebx
c000a385:	83 ec 3c             	sub    esp,0x3c
c000a388:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a38c:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a390:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a393:	85 db                	test   ebx,ebx
c000a395:	0f 84 56 02 00 00    	je     c000a5f1 <sinc_stereo_vari_process+0x275>
c000a39b:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a39e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a3a1:	0f af d0             	imul   edx,eax
c000a3a4:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a3a7:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a3ab:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a3b2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a3b5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a3bc:	dd 06                	fld    QWORD PTR [esi]
c000a3be:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a3c2:	55                   	push   ebp
c000a3c3:	55                   	push   ebp
c000a3c4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3c7:	e8 61 eb ff ff       	call   c0008f2d <is_bad_src_ratio>
c000a3cc:	89 c2                	mov    edx,eax
c000a3ce:	58                   	pop    eax
c000a3cf:	59                   	pop    ecx
c000a3d0:	b8 16 00 00 00       	mov    eax,0x16
c000a3d5:	85 d2                	test   edx,edx
c000a3d7:	0f 85 14 02 00 00    	jne    c000a5f1 <sinc_stereo_vari_process+0x275>
c000a3dd:	d9 05 30 0a 02 c0    	fld    DWORD PTR ds:0xc0020a30
c000a3e3:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a3e6:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a3e9:	dd 06                	fld    QWORD PTR [esi]
c000a3eb:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a3ee:	d8 d1                	fcom   st(1)
c000a3f0:	df e0                	fnstsw ax
c000a3f2:	9e                   	sahf   
c000a3f3:	76 0f                	jbe    c000a404 <sinc_stereo_vari_process+0x88>
c000a3f5:	dd d8                	fstp   st(0)
c000a3f7:	d9 e8                	fld1   
c000a3f9:	d8 d9                	fcomp  st(1)
c000a3fb:	df e0                	fnstsw ax
c000a3fd:	9e                   	sahf   
c000a3fe:	77 0f                	ja     c000a40f <sinc_stereo_vari_process+0x93>
c000a400:	dd d8                	fstp   st(0)
c000a402:	eb 11                	jmp    c000a415 <sinc_stereo_vari_process+0x99>
c000a404:	dd d9                	fstp   st(1)
c000a406:	d9 e8                	fld1   
c000a408:	d8 d9                	fcomp  st(1)
c000a40a:	df e0                	fnstsw ax
c000a40c:	9e                   	sahf   
c000a40d:	76 04                	jbe    c000a413 <sinc_stereo_vari_process+0x97>
c000a40f:	de f9                	fdivp  st(1),st
c000a411:	eb 02                	jmp    c000a415 <sinc_stereo_vari_process+0x99>
c000a413:	dd d8                	fstp   st(0)
c000a415:	83 ec 10             	sub    esp,0x10
c000a418:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a41b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a41e:	e8 cd 4c 01 00       	call   c001f0f0 <lrint>
c000a423:	40                   	inc    eax
c000a424:	0f af c5             	imul   eax,ebp
c000a427:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a42a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a42e:	dd 14 24             	fst    QWORD PTR [esp]
c000a431:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a435:	e8 f5 f5 ff ff       	call   c0009a2f <fmod_one>
c000a43a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a43d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a440:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a444:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a448:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a44c:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a450:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a453:	e8 98 4c 01 00       	call   c001f0f0 <lrint>
c000a458:	d9 e8                	fld1   
c000a45a:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a45e:	0f af e8             	imul   ebp,eax
c000a461:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a465:	01 e8                	add    eax,ebp
c000a467:	99                   	cdq    
c000a468:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a46b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a46e:	dc 05 98 08 02 c0    	fadd   QWORD PTR ds:0xc0020898
c000a474:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a478:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a47b:	83 c4 10             	add    esp,0x10
c000a47e:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a481:	7d 4b                	jge    c000a4ce <sinc_stereo_vari_process+0x152>
c000a483:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a486:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a489:	01 c8                	add    eax,ecx
c000a48b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a48e:	99                   	cdq    
c000a48f:	f7 f9                	idiv   ecx
c000a491:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a495:	7d 09                	jge    c000a4a0 <sinc_stereo_vari_process+0x124>
c000a497:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a49a:	85 c0                	test   eax,eax
c000a49c:	79 57                	jns    c000a4f5 <sinc_stereo_vari_process+0x179>
c000a49e:	eb 70                	jmp    c000a510 <sinc_stereo_vari_process+0x194>
c000a4a0:	51                   	push   ecx
c000a4a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a4a5:	57                   	push   edi
c000a4a6:	53                   	push   ebx
c000a4a7:	e8 da f5 ff ff       	call   c0009a86 <prepare_data>
c000a4ac:	83 c4 10             	add    esp,0x10
c000a4af:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a4b2:	85 c0                	test   eax,eax
c000a4b4:	0f 85 37 01 00 00    	jne    c000a5f1 <sinc_stereo_vari_process+0x275>
c000a4ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4c0:	01 c8                	add    eax,ecx
c000a4c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4c5:	99                   	cdq    
c000a4c6:	f7 f9                	idiv   ecx
c000a4c8:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4cc:	7c c9                	jl     c000a497 <sinc_stereo_vari_process+0x11b>
c000a4ce:	dd 04 24             	fld    QWORD PTR [esp]
c000a4d1:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a4d4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a4d8:	dd 1e                	fstp   QWORD PTR [esi]
c000a4da:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a4dd:	99                   	cdq    
c000a4de:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a4e1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a4e4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a4e7:	99                   	cdq    
c000a4e8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a4eb:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a4ee:	31 c0                	xor    eax,eax
c000a4f0:	e9 fc 00 00 00       	jmp    c000a5f1 <sinc_stereo_vari_process+0x275>
c000a4f5:	dd 04 24             	fld    QWORD PTR [esp]
c000a4f8:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a4fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a4ff:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a503:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a507:	d9 c9                	fxch   st(1)
c000a509:	de d9                	fcompp 
c000a50b:	df e0                	fnstsw ax
c000a50d:	9e                   	sahf   
c000a50e:	73 be                	jae    c000a4ce <sinc_stereo_vari_process+0x152>
c000a510:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a514:	7e 2f                	jle    c000a545 <sinc_stereo_vari_process+0x1c9>
c000a516:	dd 06                	fld    QWORD PTR [esi]
c000a518:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a51b:	83 ec 10             	sub    esp,0x10
c000a51e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a521:	e8 aa 4b 01 00       	call   c001f0d0 <fabs>
c000a526:	83 c4 10             	add    esp,0x10
c000a529:	dc 1d 20 0a 02 c0    	fcomp  QWORD PTR ds:0xc0020a20
c000a52f:	df e0                	fnstsw ax
c000a531:	9e                   	sahf   
c000a532:	76 11                	jbe    c000a545 <sinc_stereo_vari_process+0x1c9>
c000a534:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a537:	dc 26                	fsub   QWORD PTR [esi]
c000a539:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a53c:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a53f:	dc 06                	fadd   QWORD PTR [esi]
c000a541:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a545:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a548:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a54c:	d9 e8                	fld1   
c000a54e:	d8 d9                	fcomp  st(1)
c000a550:	df e0                	fnstsw ax
c000a552:	9e                   	sahf   
c000a553:	77 04                	ja     c000a559 <sinc_stereo_vari_process+0x1dd>
c000a555:	dd d8                	fstp   st(0)
c000a557:	d9 e8                	fld1   
c000a559:	de c9                	fmulp  st(1),st
c000a55b:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a55f:	50                   	push   eax
c000a560:	50                   	push   eax
c000a561:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a565:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a569:	e8 ae f4 ff ff       	call   c0009a1c <double_to_fp>
c000a56e:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a572:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a576:	89 c5                	mov    ebp,eax
c000a578:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a57b:	e8 9c f4 ff ff       	call   c0009a1c <double_to_fp>
c000a580:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a583:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a586:	83 c4 0c             	add    esp,0xc
c000a589:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a58c:	89 c1                	mov    ecx,eax
c000a58e:	52                   	push   edx
c000a58f:	89 d8                	mov    eax,ebx
c000a591:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a595:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a598:	52                   	push   edx
c000a599:	52                   	push   edx
c000a59a:	89 ea                	mov    edx,ebp
c000a59c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a59f:	e8 da ea ff ff       	call   c000907e <calc_output_stereo>
c000a5a4:	d9 e8                	fld1   
c000a5a6:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a5aa:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a5ae:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a5b2:	dd 14 24             	fst    QWORD PTR [esp]
c000a5b5:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a5b9:	e8 71 f4 ff ff       	call   c0009a2f <fmod_one>
c000a5be:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a5c1:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a5c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5c8:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a5cc:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a5d0:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a5d4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5d7:	e8 14 4b 01 00       	call   c001f0f0 <lrint>
c000a5dc:	0f af e8             	imul   ebp,eax
c000a5df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a5e3:	01 e8                	add    eax,ebp
c000a5e5:	99                   	cdq    
c000a5e6:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a5e9:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a5ec:	e9 87 fe ff ff       	jmp    c000a478 <sinc_stereo_vari_process+0xfc>
c000a5f1:	83 c4 3c             	add    esp,0x3c
c000a5f4:	5b                   	pop    ebx
c000a5f5:	5e                   	pop    esi
c000a5f6:	5f                   	pop    edi
c000a5f7:	5d                   	pop    ebp
c000a5f8:	c3                   	ret    

c000a5f9 <sinc_mono_vari_process>:
c000a5f9:	55                   	push   ebp
c000a5fa:	b8 05 00 00 00       	mov    eax,0x5
c000a5ff:	57                   	push   edi
c000a600:	56                   	push   esi
c000a601:	53                   	push   ebx
c000a602:	83 ec 3c             	sub    esp,0x3c
c000a605:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a609:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a60d:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a610:	85 db                	test   ebx,ebx
c000a612:	0f 84 55 02 00 00    	je     c000a86d <sinc_mono_vari_process+0x274>
c000a618:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a61b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a61e:	0f af d0             	imul   edx,eax
c000a621:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a624:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a628:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a62f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a632:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a639:	dd 06                	fld    QWORD PTR [esi]
c000a63b:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a63f:	51                   	push   ecx
c000a640:	51                   	push   ecx
c000a641:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a644:	e8 e4 e8 ff ff       	call   c0008f2d <is_bad_src_ratio>
c000a649:	5d                   	pop    ebp
c000a64a:	89 c2                	mov    edx,eax
c000a64c:	58                   	pop    eax
c000a64d:	85 d2                	test   edx,edx
c000a64f:	b8 16 00 00 00       	mov    eax,0x16
c000a654:	0f 85 13 02 00 00    	jne    c000a86d <sinc_mono_vari_process+0x274>
c000a65a:	d9 05 30 0a 02 c0    	fld    DWORD PTR ds:0xc0020a30
c000a660:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a663:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a666:	dd 06                	fld    QWORD PTR [esi]
c000a668:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a66b:	d8 d1                	fcom   st(1)
c000a66d:	df e0                	fnstsw ax
c000a66f:	9e                   	sahf   
c000a670:	76 0f                	jbe    c000a681 <sinc_mono_vari_process+0x88>
c000a672:	dd d8                	fstp   st(0)
c000a674:	d9 e8                	fld1   
c000a676:	d8 d9                	fcomp  st(1)
c000a678:	df e0                	fnstsw ax
c000a67a:	9e                   	sahf   
c000a67b:	77 0f                	ja     c000a68c <sinc_mono_vari_process+0x93>
c000a67d:	dd d8                	fstp   st(0)
c000a67f:	eb 11                	jmp    c000a692 <sinc_mono_vari_process+0x99>
c000a681:	dd d9                	fstp   st(1)
c000a683:	d9 e8                	fld1   
c000a685:	d8 d9                	fcomp  st(1)
c000a687:	df e0                	fnstsw ax
c000a689:	9e                   	sahf   
c000a68a:	76 04                	jbe    c000a690 <sinc_mono_vari_process+0x97>
c000a68c:	de f9                	fdivp  st(1),st
c000a68e:	eb 02                	jmp    c000a692 <sinc_mono_vari_process+0x99>
c000a690:	dd d8                	fstp   st(0)
c000a692:	83 ec 10             	sub    esp,0x10
c000a695:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a698:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a69b:	e8 50 4a 01 00       	call   c001f0f0 <lrint>
c000a6a0:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a6a3:	40                   	inc    eax
c000a6a4:	dd 14 24             	fst    QWORD PTR [esp]
c000a6a7:	0f af e8             	imul   ebp,eax
c000a6aa:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a6ae:	e8 7c f3 ff ff       	call   c0009a2f <fmod_one>
c000a6b3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a6b6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6ba:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6bd:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a6c1:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a6c5:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a6c9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a6cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6d0:	e8 1b 4a 01 00       	call   c001f0f0 <lrint>
c000a6d5:	d9 e8                	fld1   
c000a6d7:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a6db:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a6e0:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a6e4:	99                   	cdq    
c000a6e5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a6e8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a6eb:	dc 05 98 08 02 c0    	fadd   QWORD PTR ds:0xc0020898
c000a6f1:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a6f5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a6f8:	83 c4 10             	add    esp,0x10
c000a6fb:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a6fe:	7d 44                	jge    c000a744 <sinc_mono_vari_process+0x14b>
c000a700:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a703:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a706:	01 c8                	add    eax,ecx
c000a708:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a70b:	99                   	cdq    
c000a70c:	f7 f9                	idiv   ecx
c000a70e:	39 d5                	cmp    ebp,edx
c000a710:	7d 09                	jge    c000a71b <sinc_mono_vari_process+0x122>
c000a712:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a715:	85 c0                	test   eax,eax
c000a717:	79 52                	jns    c000a76b <sinc_mono_vari_process+0x172>
c000a719:	eb 6b                	jmp    c000a786 <sinc_mono_vari_process+0x18d>
c000a71b:	52                   	push   edx
c000a71c:	55                   	push   ebp
c000a71d:	57                   	push   edi
c000a71e:	53                   	push   ebx
c000a71f:	e8 62 f3 ff ff       	call   c0009a86 <prepare_data>
c000a724:	83 c4 10             	add    esp,0x10
c000a727:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a72a:	85 c0                	test   eax,eax
c000a72c:	0f 85 3b 01 00 00    	jne    c000a86d <sinc_mono_vari_process+0x274>
c000a732:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a735:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a738:	01 c8                	add    eax,ecx
c000a73a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a73d:	99                   	cdq    
c000a73e:	f7 f9                	idiv   ecx
c000a740:	39 d5                	cmp    ebp,edx
c000a742:	7c ce                	jl     c000a712 <sinc_mono_vari_process+0x119>
c000a744:	dd 04 24             	fld    QWORD PTR [esp]
c000a747:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a74a:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a74e:	dd 1e                	fstp   QWORD PTR [esi]
c000a750:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a753:	99                   	cdq    
c000a754:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a757:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a75a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a75d:	99                   	cdq    
c000a75e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a761:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a764:	31 c0                	xor    eax,eax
c000a766:	e9 02 01 00 00       	jmp    c000a86d <sinc_mono_vari_process+0x274>
c000a76b:	dd 04 24             	fld    QWORD PTR [esp]
c000a76e:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a771:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a775:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a779:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a77d:	d9 c9                	fxch   st(1)
c000a77f:	de d9                	fcompp 
c000a781:	df e0                	fnstsw ax
c000a783:	9e                   	sahf   
c000a784:	77 be                	ja     c000a744 <sinc_mono_vari_process+0x14b>
c000a786:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a78a:	7e 2f                	jle    c000a7bb <sinc_mono_vari_process+0x1c2>
c000a78c:	dd 06                	fld    QWORD PTR [esi]
c000a78e:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a791:	83 ec 10             	sub    esp,0x10
c000a794:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a797:	e8 34 49 01 00       	call   c001f0d0 <fabs>
c000a79c:	83 c4 10             	add    esp,0x10
c000a79f:	dc 1d 20 0a 02 c0    	fcomp  QWORD PTR ds:0xc0020a20
c000a7a5:	df e0                	fnstsw ax
c000a7a7:	9e                   	sahf   
c000a7a8:	76 11                	jbe    c000a7bb <sinc_mono_vari_process+0x1c2>
c000a7aa:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a7ad:	dc 26                	fsub   QWORD PTR [esi]
c000a7af:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a7b2:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a7b5:	dc 06                	fadd   QWORD PTR [esi]
c000a7b7:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a7bb:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a7be:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a7c2:	d9 e8                	fld1   
c000a7c4:	d8 d9                	fcomp  st(1)
c000a7c6:	df e0                	fnstsw ax
c000a7c8:	9e                   	sahf   
c000a7c9:	77 04                	ja     c000a7cf <sinc_mono_vari_process+0x1d6>
c000a7cb:	dd d8                	fstp   st(0)
c000a7cd:	d9 e8                	fld1   
c000a7cf:	de c9                	fmulp  st(1),st
c000a7d1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a7d5:	50                   	push   eax
c000a7d6:	50                   	push   eax
c000a7d7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7df:	e8 38 f2 ff ff       	call   c0009a1c <double_to_fp>
c000a7e4:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a7e8:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a7ec:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a7f0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7f3:	e8 24 f2 ff ff       	call   c0009a1c <double_to_fp>
c000a7f8:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a7fc:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a800:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a803:	89 c1                	mov    ecx,eax
c000a805:	89 d8                	mov    eax,ebx
c000a807:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a80b:	e8 89 e7 ff ff       	call   c0008f99 <calc_output_single>
c000a810:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a813:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a817:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a81a:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a81d:	d9 e8                	fld1   
c000a81f:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a823:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a826:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a82a:	dd 14 24             	fst    QWORD PTR [esp]
c000a82d:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a831:	e8 f9 f1 ff ff       	call   c0009a2f <fmod_one>
c000a836:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a839:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a83d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a840:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a844:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a848:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a84c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a850:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a853:	e8 98 48 01 00       	call   c001f0f0 <lrint>
c000a858:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a85d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a861:	99                   	cdq    
c000a862:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a865:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a868:	e9 88 fe ff ff       	jmp    c000a6f5 <sinc_mono_vari_process+0xfc>
c000a86d:	83 c4 3c             	add    esp,0x3c
c000a870:	5b                   	pop    ebx
c000a871:	5e                   	pop    esi
c000a872:	5f                   	pop    edi
c000a873:	5d                   	pop    ebp
c000a874:	c3                   	ret    

c000a875 <sinc_get_name>:
c000a875:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a879:	31 c0                	xor    eax,eax
c000a87b:	83 fa 02             	cmp    edx,0x2
c000a87e:	77 07                	ja     c000a887 <sinc_get_name+0x12>
c000a880:	8b 04 95 00 09 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf700]
c000a887:	c3                   	ret    

c000a888 <sinc_get_description>:
c000a888:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a88c:	31 c0                	xor    eax,eax
c000a88e:	83 fa 02             	cmp    edx,0x2
c000a891:	77 07                	ja     c000a89a <sinc_get_description+0x12>
c000a893:	8b 04 95 f4 08 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf70c]
c000a89a:	c3                   	ret    

c000a89b <sinc_set_converter>:
c000a89b:	53                   	push   ebx
c000a89c:	81 ec 58 08 00 00    	sub    esp,0x858
c000a8a2:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a8a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a8ac:	85 c0                	test   eax,eax
c000a8ae:	74 13                	je     c000a8c3 <sinc_set_converter+0x28>
c000a8b0:	83 ec 0c             	sub    esp,0xc
c000a8b3:	50                   	push   eax
c000a8b4:	e8 7e 16 00 00       	call   c000bf37 <free>
c000a8b9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a8c0:	83 c4 10             	add    esp,0x10
c000a8c3:	50                   	push   eax
c000a8c4:	68 44 08 00 00       	push   0x844
c000a8c9:	6a 00                	push   0x0
c000a8cb:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a8cf:	50                   	push   eax
c000a8d0:	e8 33 5d ff ff       	call   c0000608 <memset>
c000a8d5:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a8d8:	83 c4 10             	add    esp,0x10
c000a8db:	b8 0b 00 00 00       	mov    eax,0xb
c000a8e0:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a8e6:	7f 6e                	jg     c000a956 <sinc_set_converter+0xbb>
c000a8e8:	83 fa 01             	cmp    edx,0x1
c000a8eb:	75 10                	jne    c000a8fd <sinc_set_converter+0x62>
c000a8ed:	c7 43 24 f9 a5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a5f9
c000a8f4:	c7 43 20 f9 a5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a5f9
c000a8fb:	eb 4d                	jmp    c000a94a <sinc_set_converter+0xaf>
c000a8fd:	83 fa 02             	cmp    edx,0x2
c000a900:	75 10                	jne    c000a912 <sinc_set_converter+0x77>
c000a902:	c7 43 24 7c a3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a37c
c000a909:	c7 43 20 7c a3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a37c
c000a910:	eb 38                	jmp    c000a94a <sinc_set_converter+0xaf>
c000a912:	83 fa 04             	cmp    edx,0x4
c000a915:	75 10                	jne    c000a927 <sinc_set_converter+0x8c>
c000a917:	c7 43 24 ff a0 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a0ff
c000a91e:	c7 43 20 ff a0 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a0ff
c000a925:	eb 23                	jmp    c000a94a <sinc_set_converter+0xaf>
c000a927:	83 fa 06             	cmp    edx,0x6
c000a92a:	75 10                	jne    c000a93c <sinc_set_converter+0xa1>
c000a92c:	c7 43 24 82 9e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009e82
c000a933:	c7 43 20 82 9e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009e82
c000a93a:	eb 0e                	jmp    c000a94a <sinc_set_converter+0xaf>
c000a93c:	c7 43 24 00 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009c00
c000a943:	c7 43 20 00 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009c00
c000a94a:	c7 43 28 be 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095be
c000a951:	b8 0a 00 00 00       	mov    eax,0xa
c000a956:	81 c4 58 08 00 00    	add    esp,0x858
c000a95c:	5b                   	pop    ebx
c000a95d:	c3                   	ret    

c000a95e <is_bad_src_ratio>:
c000a95e:	83 ec 0c             	sub    esp,0xc
c000a961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a965:	89 04 24             	mov    DWORD PTR [esp],eax
c000a968:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a96c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a970:	dd 04 24             	fld    QWORD PTR [esp]
c000a973:	dd 05 20 08 02 c0    	fld    QWORD PTR ds:0xc0020820
c000a979:	de d9                	fcompp 
c000a97b:	df e0                	fnstsw ax
c000a97d:	f6 c4 45             	test   ah,0x45
c000a980:	74 10                	je     c000a992 <is_bad_src_ratio+0x34>
c000a982:	dd 04 24             	fld    QWORD PTR [esp]
c000a985:	dc 1d 28 08 02 c0    	fcomp  QWORD PTR ds:0xc0020828
c000a98b:	df e0                	fnstsw ax
c000a98d:	f6 c4 45             	test   ah,0x45
c000a990:	75 07                	jne    c000a999 <is_bad_src_ratio+0x3b>
c000a992:	b8 01 00 00 00       	mov    eax,0x1
c000a997:	eb 05                	jmp    c000a99e <is_bad_src_ratio+0x40>
c000a999:	b8 00 00 00 00       	mov    eax,0x0
c000a99e:	83 c4 0c             	add    esp,0xc
c000a9a1:	c3                   	ret    

c000a9a2 <fmod_one>:
c000a9a2:	83 ec 2c             	sub    esp,0x2c
c000a9a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a9a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a9b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9b5:	83 ec 08             	sub    esp,0x8
c000a9b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9c0:	e8 2b 47 01 00       	call   c001f0f0 <lrint>
c000a9c5:	83 c4 10             	add    esp,0x10
c000a9c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9cc:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000a9d0:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a9d4:	de e1                	fsubrp st(1),st
c000a9d6:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a9da:	d9 ee                	fldz   
c000a9dc:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000a9e0:	df e0                	fnstsw ax
c000a9e2:	f6 c4 45             	test   ah,0x45
c000a9e5:	75 0a                	jne    c000a9f1 <fmod_one+0x4f>
c000a9e7:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000a9eb:	d9 e8                	fld1   
c000a9ed:	de c1                	faddp  st(1),st
c000a9ef:	eb 04                	jmp    c000a9f5 <fmod_one+0x53>
c000a9f1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000a9f5:	83 c4 2c             	add    esp,0x2c
c000a9f8:	c3                   	ret    

c000a9f9 <zoh_vari_process>:
c000a9f9:	55                   	push   ebp
c000a9fa:	57                   	push   edi
c000a9fb:	56                   	push   esi
c000a9fc:	53                   	push   ebx
c000a9fd:	83 ec 2c             	sub    esp,0x2c
c000aa00:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aa04:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aa08:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aa10:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aa14:	0f 8e 30 02 00 00    	jle    c000ac4a <zoh_vari_process+0x251>
c000aa1a:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aa1d:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aa25:	85 db                	test   ebx,ebx
c000aa27:	0f 84 1d 02 00 00    	je     c000ac4a <zoh_vari_process+0x251>
c000aa2d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aa30:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aa34:	74 19                	je     c000aa4f <zoh_vari_process+0x56>
c000aa36:	31 d2                	xor    edx,edx
c000aa38:	39 c2                	cmp    edx,eax
c000aa3a:	7d 0c                	jge    c000aa48 <zoh_vari_process+0x4f>
c000aa3c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aa3e:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aa41:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aa45:	42                   	inc    edx
c000aa46:	eb f0                	jmp    c000aa38 <zoh_vari_process+0x3f>
c000aa48:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000aa4f:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000aa52:	0f af d0             	imul   edx,eax
c000aa55:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000aa58:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000aa5c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000aa63:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000aa66:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000aa6d:	dd 07                	fld    QWORD PTR [edi]
c000aa6f:	dd 14 24             	fst    QWORD PTR [esp]
c000aa72:	50                   	push   eax
c000aa73:	50                   	push   eax
c000aa74:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aa77:	e8 e2 fe ff ff       	call   c000a95e <is_bad_src_ratio>
c000aa7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aa80:	5a                   	pop    edx
c000aa81:	59                   	pop    ecx
c000aa82:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aa87:	0f 85 b5 01 00 00    	jne    c000ac42 <zoh_vari_process+0x249>
c000aa8d:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000aa90:	d9 e8                	fld1   
c000aa92:	d8 d1                	fcom   st(1)
c000aa94:	df e0                	fnstsw ax
c000aa96:	9e                   	sahf   
c000aa97:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aa9b:	0f 86 83 00 00 00    	jbe    c000ab24 <zoh_vari_process+0x12b>
c000aaa1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000aaa4:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000aaa7:	7d 7b                	jge    c000ab24 <zoh_vari_process+0x12b>
c000aaa9:	d9 c0                	fld    st(0)
c000aaab:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aaae:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000aab1:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000aab4:	df e0                	fnstsw ax
c000aab6:	9e                   	sahf   
c000aab7:	73 6b                	jae    c000ab24 <zoh_vari_process+0x12b>
c000aab9:	85 d2                	test   edx,edx
c000aabb:	7e 36                	jle    c000aaf3 <zoh_vari_process+0xfa>
c000aabd:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aac1:	dd 07                	fld    QWORD PTR [edi]
c000aac3:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000aac6:	83 ec 10             	sub    esp,0x10
c000aac9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aacc:	e8 ff 45 01 00       	call   c001f0d0 <fabs>
c000aad1:	83 c4 10             	add    esp,0x10
c000aad4:	dc 1d 98 08 02 c0    	fcomp  QWORD PTR ds:0xc0020898
c000aada:	df e0                	fnstsw ax
c000aadc:	9e                   	sahf   
c000aadd:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aae1:	76 10                	jbe    c000aaf3 <zoh_vari_process+0xfa>
c000aae3:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000aae6:	dc 27                	fsub   QWORD PTR [edi]
c000aae8:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000aaeb:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000aaee:	dc 07                	fadd   QWORD PTR [edi]
c000aaf0:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaf3:	31 c0                	xor    eax,eax
c000aaf5:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000aaf8:	7e 13                	jle    c000ab0d <zoh_vari_process+0x114>
c000aafa:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000aafe:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ab01:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ab04:	40                   	inc    eax
c000ab05:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000ab08:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ab0b:	eb e8                	jmp    c000aaf5 <zoh_vari_process+0xfc>
c000ab0d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab11:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab14:	de c1                	faddp  st(1),st
c000ab16:	e9 75 ff ff ff       	jmp    c000aa90 <zoh_vari_process+0x97>
c000ab1b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab1f:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab22:	de c1                	faddp  st(1),st
c000ab24:	83 ec 10             	sub    esp,0x10
c000ab27:	dd 14 24             	fst    QWORD PTR [esp]
c000ab2a:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab2e:	e8 6f fe ff ff       	call   c000a9a2 <fmod_one>
c000ab33:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ab36:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000ab3a:	d8 e1                	fsub   st,st(1)
c000ab3c:	d9 c9                	fxch   st(1)
c000ab3e:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab42:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab45:	e8 a6 45 01 00       	call   c001f0f0 <lrint>
c000ab4a:	83 c4 10             	add    esp,0x10
c000ab4d:	0f af e8             	imul   ebp,eax
c000ab50:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ab53:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab56:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab5a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ab5d:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ab60:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab63:	0f 8d 80 00 00 00    	jge    c000abe9 <zoh_vari_process+0x1f0>
c000ab69:	d9 c0                	fld    st(0)
c000ab6b:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ab6e:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ab72:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000ab76:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ab7a:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000ab7e:	de d9                	fcompp 
c000ab80:	df e0                	fnstsw ax
c000ab82:	9e                   	sahf   
c000ab83:	72 64                	jb     c000abe9 <zoh_vari_process+0x1f0>
c000ab85:	85 d2                	test   edx,edx
c000ab87:	7e 36                	jle    c000abbf <zoh_vari_process+0x1c6>
c000ab89:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ab8d:	dd 07                	fld    QWORD PTR [edi]
c000ab8f:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ab92:	83 ec 10             	sub    esp,0x10
c000ab95:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab98:	e8 33 45 01 00       	call   c001f0d0 <fabs>
c000ab9d:	83 c4 10             	add    esp,0x10
c000aba0:	dc 1d 98 08 02 c0    	fcomp  QWORD PTR ds:0xc0020898
c000aba6:	df e0                	fnstsw ax
c000aba8:	9e                   	sahf   
c000aba9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000abad:	76 10                	jbe    c000abbf <zoh_vari_process+0x1c6>
c000abaf:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000abb2:	dc 27                	fsub   QWORD PTR [edi]
c000abb4:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000abb7:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000abba:	dc 07                	fadd   QWORD PTR [edi]
c000abbc:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abbf:	31 d2                	xor    edx,edx
c000abc1:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000abc4:	39 d0                	cmp    eax,edx
c000abc6:	0f 8e 4f ff ff ff    	jle    c000ab1b <zoh_vari_process+0x122>
c000abcc:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000abcf:	29 c1                	sub    ecx,eax
c000abd1:	89 c8                	mov    eax,ecx
c000abd3:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000abd5:	01 d0                	add    eax,edx
c000abd7:	42                   	inc    edx
c000abd8:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000abdb:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000abde:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000abe1:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000abe4:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000abe7:	eb d8                	jmp    c000abc1 <zoh_vari_process+0x1c8>
c000abe9:	39 e9                	cmp    ecx,ebp
c000abeb:	7d 13                	jge    c000ac00 <zoh_vari_process+0x207>
c000abed:	89 e8                	mov    eax,ebp
c000abef:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000abf2:	29 c8                	sub    eax,ecx
c000abf4:	99                   	cdq    
c000abf5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000abf8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000abfc:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000ac00:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000ac03:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac06:	85 c0                	test   eax,eax
c000ac08:	7f 1b                	jg     c000ac25 <zoh_vari_process+0x22c>
c000ac0a:	dd 04 24             	fld    QWORD PTR [esp]
c000ac0d:	dd 1f                	fstp   QWORD PTR [edi]
c000ac0f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac12:	99                   	cdq    
c000ac13:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac16:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000ac19:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac1c:	99                   	cdq    
c000ac1d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac20:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000ac23:	eb 25                	jmp    c000ac4a <zoh_vari_process+0x251>
c000ac25:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ac28:	31 d2                	xor    edx,edx
c000ac2a:	29 e8                	sub    eax,ebp
c000ac2c:	c1 e0 02             	shl    eax,0x2
c000ac2f:	39 d5                	cmp    ebp,edx
c000ac31:	7e d7                	jle    c000ac0a <zoh_vari_process+0x211>
c000ac33:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac35:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000ac38:	83 c0 04             	add    eax,0x4
c000ac3b:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ac3f:	42                   	inc    edx
c000ac40:	eb ed                	jmp    c000ac2f <zoh_vari_process+0x236>
c000ac42:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ac4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ac4e:	83 c4 2c             	add    esp,0x2c
c000ac51:	5b                   	pop    ebx
c000ac52:	5e                   	pop    esi
c000ac53:	5f                   	pop    edi
c000ac54:	5d                   	pop    ebp
c000ac55:	c3                   	ret    

c000ac56 <zoh_reset>:
c000ac56:	83 ec 0c             	sub    esp,0xc
c000ac59:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac5d:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ac60:	85 c0                	test   eax,eax
c000ac62:	74 20                	je     c000ac84 <zoh_reset+0x2e>
c000ac64:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ac67:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c000ac6e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ac71:	51                   	push   ecx
c000ac72:	c1 e2 02             	shl    edx,0x2
c000ac75:	83 c0 1c             	add    eax,0x1c
c000ac78:	52                   	push   edx
c000ac79:	6a 00                	push   0x0
c000ac7b:	50                   	push   eax
c000ac7c:	e8 87 59 ff ff       	call   c0000608 <memset>
c000ac81:	83 c4 10             	add    esp,0x10
c000ac84:	83 c4 0c             	add    esp,0xc
c000ac87:	c3                   	ret    

c000ac88 <zoh_get_name>:
c000ac88:	31 c0                	xor    eax,eax
c000ac8a:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ac8f:	75 05                	jne    c000ac96 <zoh_get_name+0xe>
c000ac91:	b8 34 0a 02 c0       	mov    eax,0xc0020a34
c000ac96:	c3                   	ret    

c000ac97 <zoh_get_description>:
c000ac97:	31 c0                	xor    eax,eax
c000ac99:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ac9e:	75 05                	jne    c000aca5 <zoh_get_description+0xe>
c000aca0:	b8 45 0a 02 c0       	mov    eax,0xc0020a45
c000aca5:	c3                   	ret    

c000aca6 <zoh_set_converter>:
c000aca6:	53                   	push   ebx
c000aca7:	b8 0a 00 00 00       	mov    eax,0xa
c000acac:	83 ec 08             	sub    esp,0x8
c000acaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000acb3:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000acb8:	75 6e                	jne    c000ad28 <zoh_set_converter+0x82>
c000acba:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000acbd:	85 c0                	test   eax,eax
c000acbf:	74 13                	je     c000acd4 <zoh_set_converter+0x2e>
c000acc1:	83 ec 0c             	sub    esp,0xc
c000acc4:	50                   	push   eax
c000acc5:	e8 6d 12 00 00       	call   c000bf37 <free>
c000acca:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000acd1:	83 c4 10             	add    esp,0x10
c000acd4:	50                   	push   eax
c000acd5:	50                   	push   eax
c000acd6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000acd9:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ace0:	50                   	push   eax
c000ace1:	6a 01                	push   0x1
c000ace3:	e8 6f 12 00 00       	call   c000bf57 <calloc>
c000ace8:	89 c2                	mov    edx,eax
c000acea:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000aced:	83 c4 10             	add    esp,0x10
c000acf0:	b8 01 00 00 00       	mov    eax,0x1
c000acf5:	85 d2                	test   edx,edx
c000acf7:	74 2f                	je     c000ad28 <zoh_set_converter+0x82>
c000acf9:	83 ec 0c             	sub    esp,0xc
c000acfc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000acff:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ad02:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000ad08:	c7 43 24 f9 a9 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a9f9
c000ad0f:	c7 43 20 f9 a9 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a9f9
c000ad16:	c7 43 28 56 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ac56
c000ad1d:	53                   	push   ebx
c000ad1e:	e8 33 ff ff ff       	call   c000ac56 <zoh_reset>
c000ad23:	83 c4 10             	add    esp,0x10
c000ad26:	31 c0                	xor    eax,eax
c000ad28:	83 c4 08             	add    esp,0x8
c000ad2b:	5b                   	pop    ebx
c000ad2c:	c3                   	ret    
c000ad2d:	90                   	nop

c000ad2e <Computer::close(int, int, void*)>:
c000ad2e:	57                   	push   edi
c000ad2f:	56                   	push   esi
c000ad30:	53                   	push   ebx
c000ad31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad35:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ad39:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ad3d:	83 ec 0c             	sub    esp,0xc
c000ad40:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ad46:	50                   	push   eax
c000ad47:	e8 98 59 00 00       	call   c00106e4 <Device::closeAll()>
c000ad4c:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ad52:	83 c4 10             	add    esp,0x10
c000ad55:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad57:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ad5b:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ad63:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ad67:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ad6b:	5b                   	pop    ebx
c000ad6c:	5e                   	pop    esi
c000ad6d:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ad70:	5f                   	pop    edi
c000ad71:	ff e0                	jmp    eax
c000ad73:	90                   	nop

c000ad74 <Computer::Computer()>:
c000ad74:	83 ec 0c             	sub    esp,0xc
c000ad77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad7b:	83 ec 08             	sub    esp,0x8
c000ad7e:	68 7c 0a 02 c0       	push   0xc0020a7c
c000ad83:	50                   	push   eax
c000ad84:	e8 d5 59 00 00       	call   c001075e <Device::Device(char const*)>
c000ad89:	83 c4 10             	add    esp,0x10
c000ad8c:	ba 44 0c 02 c0       	mov    edx,0xc0020c44
c000ad91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad95:	89 10                	mov    DWORD PTR [eax],edx
c000ad97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad9b:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ada5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ada9:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000adb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adb7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000adbd:	83 ca 04             	or     edx,0x4
c000adc0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000adc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adca:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000add0:	31 d2                	xor    edx,edx
c000add2:	88 c2                	mov    dl,al
c000add4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add8:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000addf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ade3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ade9:	31 d2                	xor    edx,edx
c000adeb:	88 c2                	mov    dl,al
c000aded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adf1:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000adf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adfa:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae00:	8d 50 01             	lea    edx,[eax+0x1]
c000ae03:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae07:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae0d:	31 d2                	xor    edx,edx
c000ae0f:	88 c2                	mov    dl,al
c000ae11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae15:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae19:	83 e1 3f             	and    ecx,0x3f
c000ae1c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000ae20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae24:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae2a:	31 d2                	xor    edx,edx
c000ae2c:	88 c2                	mov    dl,al
c000ae2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae32:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ae39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae3d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae43:	31 d2                	xor    edx,edx
c000ae45:	88 c2                	mov    dl,al
c000ae47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4b:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000ae50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae5a:	8d 50 01             	lea    edx,[eax+0x1]
c000ae5d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae61:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae67:	31 d2                	xor    edx,edx
c000ae69:	88 c2                	mov    dl,al
c000ae6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae6f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae73:	83 e1 3f             	and    ecx,0x3f
c000ae76:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000ae7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae84:	31 d2                	xor    edx,edx
c000ae86:	88 c2                	mov    dl,al
c000ae88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae8c:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000ae93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae97:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae9d:	31 d2                	xor    edx,edx
c000ae9f:	88 c2                	mov    dl,al
c000aea1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea5:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000aeaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeae:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeb4:	8d 50 01             	lea    edx,[eax+0x1]
c000aeb7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aebb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aec1:	31 d2                	xor    edx,edx
c000aec3:	88 c2                	mov    dl,al
c000aec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aec9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aecd:	83 e1 3f             	and    ecx,0x3f
c000aed0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aed4:	90                   	nop
c000aed5:	83 c4 0c             	add    esp,0xc
c000aed8:	c3                   	ret    
c000aed9:	90                   	nop

c000aeda <Computer::setBootMessage(char const*)>:
c000aeda:	c3                   	ret    
c000aedb:	90                   	nop

c000aedc <Computer::start()>:
c000aedc:	56                   	push   esi
c000aedd:	53                   	push   ebx
c000aede:	83 ec 14             	sub    esp,0x14
c000aee1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000aee5:	e8 0b d5 00 00       	call   c00183f5 <lockScheduler()>
c000aeea:	e8 4f d8 00 00       	call   c001873e <schedule()>
c000aeef:	e8 03 d5 00 00       	call   c00183f7 <unlockScheduler()>
c000aef4:	fb                   	sti    
c000aef5:	83 ec 0c             	sub    esp,0xc
c000aef8:	68 3b 07 00 00       	push   0x73b
c000aefd:	e8 22 41 00 00       	call   c000f024 <operator new(unsigned long)>
c000af02:	89 c6                	mov    esi,eax
c000af04:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c000af09:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000af10:	50                   	push   eax
c000af11:	68 85 0a 02 c0       	push   0xc0020a85
c000af16:	6a 01                	push   0x1
c000af18:	56                   	push   esi
c000af19:	e8 2e d3 00 00       	call   c001824c <Process::Process(bool, char const*, Process*, char**)>
c000af1e:	83 c4 20             	add    esp,0x20
c000af21:	68 ff 00 00 00       	push   0xff
c000af26:	6a 00                	push   0x0
c000af28:	68 b5 b8 00 c0       	push   0xc000b8b5
c000af2d:	56                   	push   esi
c000af2e:	e8 f7 d5 00 00       	call   c001852a <Process::createThread(void (*)(void*), void*, int)>
c000af33:	6a 7a                	push   0x7a
c000af35:	8b 15 74 55 02 c0    	mov    edx,DWORD PTR ds:0xc0025574
c000af3b:	6a 00                	push   0x0
c000af3d:	68 6f 8d 01 c0       	push   0xc0018d6f
c000af42:	52                   	push   edx
c000af43:	e8 e2 d5 00 00       	call   c001852a <Process::createThread(void (*)(void*), void*, int)>
c000af48:	83 c4 20             	add    esp,0x20
c000af4b:	a3 28 55 02 c0       	mov    ds:0xc0025528,eax
c000af50:	c6 05 2d 41 02 c0 01 	mov    BYTE PTR ds:0xc002412d,0x1
c000af57:	e8 60 45 00 00       	call   c000f4bc <initVFS()>
c000af5c:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000af62:	8b 10                	mov    edx,DWORD PTR [eax]
c000af64:	6a 00                	push   0x0
c000af66:	6a 00                	push   0x0
c000af68:	6a 00                	push   0x0
c000af6a:	50                   	push   eax
c000af6b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000af6e:	e8 d0 bc 00 00       	call   c0016c43 <setupSystemCalls()>
c000af73:	e8 42 50 00 00       	call   c000ffba <loadClockSettings()>
c000af78:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000af7b:	e8 38 57 00 00       	call   c00106b8 <Device::loadDriversForAll()>
c000af80:	bb 02 00 00 00       	mov    ebx,0x2
c000af85:	b8 01 00 00 00       	mov    eax,0x1
c000af8a:	31 d2                	xor    edx,edx
c000af8c:	31 c9                	xor    ecx,ecx
c000af8e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000af96:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000af9e:	f0 0f c7 4c 24 18    	lock cmpxchg8b QWORD PTR [esp+0x18]
c000afa4:	59                   	pop    ecx
c000afa5:	8b 1d 28 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024128
c000afab:	5e                   	pop    esi
c000afac:	6a 01                	push   0x1
c000afae:	68 92 0a 02 c0       	push   0xc0020a92
c000afb3:	e8 57 ce 00 00       	call   c0017e0f <Thr::loadDLL(char const*, bool)>
c000afb8:	5a                   	pop    edx
c000afb9:	59                   	pop    ecx
c000afba:	53                   	push   ebx
c000afbb:	50                   	push   eax
c000afbc:	e8 14 d0 00 00       	call   c0017fd5 <Thr::executeDLL(unsigned long, void*)>
c000afc1:	c7 04 24 70 1c 02 c0 	mov    DWORD PTR [esp],0xc0021c70
c000afc8:	e8 8c 41 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000afcd:	83 c4 10             	add    esp,0x10
c000afd0:	83 ec 0c             	sub    esp,0xc
c000afd3:	6a 02                	push   0x2
c000afd5:	e8 bd d8 00 00       	call   c0018897 <blockTask(TaskState)>
c000afda:	83 c4 10             	add    esp,0x10
c000afdd:	eb f1                	jmp    c000afd0 <Computer::start()+0xf4>

c000afdf <firstTask()>:
c000afdf:	83 ec 18             	sub    esp,0x18
c000afe2:	a1 28 41 02 c0       	mov    eax,ds:0xc0024128
c000afe7:	50                   	push   eax
c000afe8:	e8 ef fe ff ff       	call   c000aedc <Computer::start()>
c000afed:	90                   	nop

c000afee <Computer::detectFeatures()>:
c000afee:	55                   	push   ebp
c000afef:	57                   	push   edi
c000aff0:	56                   	push   esi
c000aff1:	53                   	push   ebx
c000aff2:	83 ec 1c             	sub    esp,0x1c
c000aff5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000aff9:	8b b3 e8 01 00 00    	mov    esi,DWORD PTR [ebx+0x1e8]
c000afff:	81 e6 04 00 fc ff    	and    esi,0xfffc0004
c000b005:	89 b3 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],esi
c000b00b:	e8 af 52 ff ff       	call   c00002bf <detectCPUID>
c000b010:	85 c0                	test   eax,eax
c000b012:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b018:	0f 95 c2             	setne  dl
c000b01b:	01 d2                	add    edx,edx
c000b01d:	83 e0 fd             	and    eax,0xfffffffd
c000b020:	09 d0                	or     eax,edx
c000b022:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b028:	a8 02                	test   al,0x2
c000b02a:	75 4e                	jne    c000b07a <Computer::detectFeatures()+0x8c>
c000b02c:	f6 05 41 41 02 c0 04 	test   BYTE PTR ds:0xc0024141,0x4
c000b033:	74 0f                	je     c000b044 <Computer::detectFeatures()+0x56>
c000b035:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b03b:	83 e0 fb             	and    eax,0xfffffffb
c000b03e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b044:	e8 2d 3b 01 00       	call   c001eb76 <x87Detect>
c000b049:	83 e0 01             	and    eax,0x1
c000b04c:	c1 e0 04             	shl    eax,0x4
c000b04f:	88 c2                	mov    dl,al
c000b051:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b057:	83 e0 ef             	and    eax,0xffffffef
c000b05a:	09 d0                	or     eax,edx
c000b05c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b062:	a8 10                	test   al,0x10
c000b064:	0f 85 20 01 00 00    	jne    c000b18a <Computer::detectFeatures()+0x19c>
c000b06a:	84 c0                	test   al,al
c000b06c:	0f 88 3b 01 00 00    	js     c000b1ad <Computer::detectFeatures()+0x1bf>
c000b072:	83 c4 1c             	add    esp,0x1c
c000b075:	5b                   	pop    ebx
c000b076:	5e                   	pop    esi
c000b077:	5f                   	pop    edi
c000b078:	5d                   	pop    ebp
c000b079:	c3                   	ret    
c000b07a:	83 ec 0c             	sub    esp,0xc
c000b07d:	6a 20                	push   0x20
c000b07f:	e8 45 91 00 00       	call   c00141c9 <cpuidCheckEDX(unsigned int)>
c000b084:	83 e0 01             	and    eax,0x1
c000b087:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b08e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b094:	83 e0 f7             	and    eax,0xfffffff7
c000b097:	09 d0                	or     eax,edx
c000b099:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b09f:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b0a6:	e8 1e 91 00 00       	call   c00141c9 <cpuidCheckEDX(unsigned int)>
c000b0ab:	83 e0 01             	and    eax,0x1
c000b0ae:	88 c2                	mov    dl,al
c000b0b0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0b6:	83 e0 fe             	and    eax,0xfffffffe
c000b0b9:	09 d0                	or     eax,edx
c000b0bb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0c1:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b0c8:	e8 fc 90 00 00       	call   c00141c9 <cpuidCheckEDX(unsigned int)>
c000b0cd:	c1 e0 07             	shl    eax,0x7
c000b0d0:	88 c2                	mov    dl,al
c000b0d2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0d8:	83 e0 7f             	and    eax,0x7f
c000b0db:	09 d0                	or     eax,edx
c000b0dd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0e3:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b0ea:	e8 da 90 00 00       	call   c00141c9 <cpuidCheckEDX(unsigned int)>
c000b0ef:	83 c4 10             	add    esp,0x10
c000b0f2:	83 e0 01             	and    eax,0x1
c000b0f5:	c1 e0 05             	shl    eax,0x5
c000b0f8:	88 c2                	mov    dl,al
c000b0fa:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b100:	83 e0 df             	and    eax,0xffffffdf
c000b103:	09 d0                	or     eax,edx
c000b105:	f7 05 40 41 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0024140,0x401
c000b10f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b115:	0f 84 b8 00 00 00    	je     c000b1d3 <Computer::detectFeatures()+0x1e5>
c000b11b:	83 ec 0c             	sub    esp,0xc
c000b11e:	8a 8b e8 01 00 00    	mov    cl,BYTE PTR [ebx+0x1e8]
c000b124:	83 e1 fe             	and    ecx,0xfffffffe
c000b127:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b12b:	88 8b e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],cl
c000b131:	50                   	push   eax
c000b132:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b136:	55                   	push   ebp
c000b137:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b13b:	57                   	push   edi
c000b13c:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b140:	56                   	push   esi
c000b141:	68 00 00 00 80       	push   0x80000000
c000b146:	e8 fb 8f 00 00       	call   c0014146 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b14b:	83 c4 20             	add    esp,0x20
c000b14e:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b155:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b159:	0f 86 cd fe ff ff    	jbe    c000b02c <Computer::detectFeatures()+0x3e>
c000b15f:	83 ec 0c             	sub    esp,0xc
c000b162:	50                   	push   eax
c000b163:	55                   	push   ebp
c000b164:	57                   	push   edi
c000b165:	56                   	push   esi
c000b166:	68 01 00 00 80       	push   0x80000001
c000b16b:	e8 d6 8f 00 00       	call   c0014146 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b170:	8b 93 e8 01 00 00    	mov    edx,DWORD PTR [ebx+0x1e8]
c000b176:	83 c4 20             	add    esp,0x20
c000b179:	81 e2 bf ff fc ff    	and    edx,0xfffcffbf
c000b17f:	89 93 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],edx
c000b185:	e9 a2 fe ff ff       	jmp    c000b02c <Computer::detectFeatures()+0x3e>
c000b18a:	e8 a1 39 01 00       	call   c001eb30 <sseDetect>
c000b18f:	88 c2                	mov    dl,al
c000b191:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b197:	c1 e2 07             	shl    edx,0x7
c000b19a:	83 e0 7f             	and    eax,0x7f
c000b19d:	09 d0                	or     eax,edx
c000b19f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b1a5:	84 c0                	test   al,al
c000b1a7:	0f 89 c5 fe ff ff    	jns    c000b072 <Computer::detectFeatures()+0x84>
c000b1ad:	e8 6e 39 01 00       	call   c001eb20 <avxDetect>
c000b1b2:	83 e0 01             	and    eax,0x1
c000b1b5:	c1 e0 05             	shl    eax,0x5
c000b1b8:	88 c2                	mov    dl,al
c000b1ba:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b1c0:	83 e0 df             	and    eax,0xffffffdf
c000b1c3:	09 d0                	or     eax,edx
c000b1c5:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b1cb:	83 c4 1c             	add    esp,0x1c
c000b1ce:	5b                   	pop    ebx
c000b1cf:	5e                   	pop    esi
c000b1d0:	5f                   	pop    edi
c000b1d1:	5d                   	pop    ebp
c000b1d2:	c3                   	ret    
c000b1d3:	83 ec 0c             	sub    esp,0xc
c000b1d6:	68 00 02 00 00       	push   0x200
c000b1db:	e8 e9 8f 00 00       	call   c00141c9 <cpuidCheckEDX(unsigned int)>
c000b1e0:	83 c4 10             	add    esp,0x10
c000b1e3:	e9 33 ff ff ff       	jmp    c000b11b <Computer::detectFeatures()+0x12d>

c000b1e8 <Computer::displayFeatures()>:
c000b1e8:	53                   	push   ebx
c000b1e9:	83 ec 14             	sub    esp,0x14
c000b1ec:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b1f0:	68 b5 0a 02 c0       	push   0xc0020ab5
c000b1f5:	e8 5f 3f 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b1fa:	83 c4 10             	add    esp,0x10
c000b1fd:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c000b202:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000b209:	74 05                	je     c000b210 <Computer::displayFeatures()+0x28>
c000b20b:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c000b210:	51                   	push   ecx
c000b211:	51                   	push   ecx
c000b212:	50                   	push   eax
c000b213:	68 c8 0a 02 c0       	push   0xc0020ac8
c000b218:	e8 3c 3f 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b21d:	83 c4 10             	add    esp,0x10
c000b220:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c000b225:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000b22c:	75 05                	jne    c000b233 <Computer::displayFeatures()+0x4b>
c000b22e:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c000b233:	52                   	push   edx
c000b234:	52                   	push   edx
c000b235:	50                   	push   eax
c000b236:	68 d9 0a 02 c0       	push   0xc0020ad9
c000b23b:	e8 19 3f 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b240:	83 c4 10             	add    esp,0x10
c000b243:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c000b248:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000b24f:	75 05                	jne    c000b256 <Computer::displayFeatures()+0x6e>
c000b251:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c000b256:	51                   	push   ecx
c000b257:	51                   	push   ecx
c000b258:	50                   	push   eax
c000b259:	68 ea 0a 02 c0       	push   0xc0020aea
c000b25e:	e8 f6 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b263:	83 c4 10             	add    esp,0x10
c000b266:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c000b26b:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000b272:	75 05                	jne    c000b279 <Computer::displayFeatures()+0x91>
c000b274:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c000b279:	52                   	push   edx
c000b27a:	52                   	push   edx
c000b27b:	50                   	push   eax
c000b27c:	68 fb 0a 02 c0       	push   0xc0020afb
c000b281:	e8 d3 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b286:	83 c4 10             	add    esp,0x10
c000b289:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c000b28e:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000b295:	75 05                	jne    c000b29c <Computer::displayFeatures()+0xb4>
c000b297:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c000b29c:	51                   	push   ecx
c000b29d:	51                   	push   ecx
c000b29e:	50                   	push   eax
c000b29f:	68 0c 0b 02 c0       	push   0xc0020b0c
c000b2a4:	e8 b0 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b2a9:	83 c4 10             	add    esp,0x10
c000b2ac:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c000b2b1:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000b2b8:	75 05                	jne    c000b2bf <Computer::displayFeatures()+0xd7>
c000b2ba:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c000b2bf:	52                   	push   edx
c000b2c0:	52                   	push   edx
c000b2c1:	50                   	push   eax
c000b2c2:	68 1d 0b 02 c0       	push   0xc0020b1d
c000b2c7:	e8 8d 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b2cc:	83 c4 10             	add    esp,0x10
c000b2cf:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c000b2d4:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000b2db:	75 05                	jne    c000b2e2 <Computer::displayFeatures()+0xfa>
c000b2dd:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c000b2e2:	51                   	push   ecx
c000b2e3:	51                   	push   ecx
c000b2e4:	50                   	push   eax
c000b2e5:	68 2e 0b 02 c0       	push   0xc0020b2e
c000b2ea:	e8 6a 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b2ef:	83 c4 10             	add    esp,0x10
c000b2f2:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c000b2f7:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000b2fe:	78 05                	js     c000b305 <Computer::displayFeatures()+0x11d>
c000b300:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c000b305:	52                   	push   edx
c000b306:	52                   	push   edx
c000b307:	50                   	push   eax
c000b308:	68 3f 0b 02 c0       	push   0xc0020b3f
c000b30d:	e8 47 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b312:	83 c4 10             	add    esp,0x10
c000b315:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c000b31a:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000b321:	0f 84 93 01 00 00    	je     c000b4ba <Computer::displayFeatures()+0x2d2>
c000b327:	51                   	push   ecx
c000b328:	51                   	push   ecx
c000b329:	50                   	push   eax
c000b32a:	68 50 0b 02 c0       	push   0xc0020b50
c000b32f:	e8 25 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b334:	83 c4 10             	add    esp,0x10
c000b337:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c000b33c:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000b343:	0f 84 67 01 00 00    	je     c000b4b0 <Computer::displayFeatures()+0x2c8>
c000b349:	52                   	push   edx
c000b34a:	52                   	push   edx
c000b34b:	50                   	push   eax
c000b34c:	68 61 0b 02 c0       	push   0xc0020b61
c000b351:	e8 03 3e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b356:	83 c4 10             	add    esp,0x10
c000b359:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c000b35e:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000b365:	0f 84 3b 01 00 00    	je     c000b4a6 <Computer::displayFeatures()+0x2be>
c000b36b:	51                   	push   ecx
c000b36c:	51                   	push   ecx
c000b36d:	50                   	push   eax
c000b36e:	68 72 0b 02 c0       	push   0xc0020b72
c000b373:	e8 e1 3d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b378:	83 c4 10             	add    esp,0x10
c000b37b:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c000b380:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000b387:	0f 84 0f 01 00 00    	je     c000b49c <Computer::displayFeatures()+0x2b4>
c000b38d:	52                   	push   edx
c000b38e:	52                   	push   edx
c000b38f:	50                   	push   eax
c000b390:	68 83 0b 02 c0       	push   0xc0020b83
c000b395:	e8 bf 3d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b39a:	83 c4 10             	add    esp,0x10
c000b39d:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c000b3a2:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000b3a9:	0f 84 e3 00 00 00    	je     c000b492 <Computer::displayFeatures()+0x2aa>
c000b3af:	51                   	push   ecx
c000b3b0:	51                   	push   ecx
c000b3b1:	50                   	push   eax
c000b3b2:	68 94 0b 02 c0       	push   0xc0020b94
c000b3b7:	e8 9d 3d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b3bc:	83 c4 10             	add    esp,0x10
c000b3bf:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c000b3c4:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000b3cb:	0f 84 b7 00 00 00    	je     c000b488 <Computer::displayFeatures()+0x2a0>
c000b3d1:	52                   	push   edx
c000b3d2:	52                   	push   edx
c000b3d3:	50                   	push   eax
c000b3d4:	68 a5 0b 02 c0       	push   0xc0020ba5
c000b3d9:	e8 7b 3d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b3de:	83 c4 10             	add    esp,0x10
c000b3e1:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c000b3e6:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000b3ed:	0f 84 8b 00 00 00    	je     c000b47e <Computer::displayFeatures()+0x296>
c000b3f3:	51                   	push   ecx
c000b3f4:	51                   	push   ecx
c000b3f5:	50                   	push   eax
c000b3f6:	68 b6 0b 02 c0       	push   0xc0020bb6
c000b3fb:	e8 59 3d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c000b408:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000b40f:	78 05                	js     c000b416 <Computer::displayFeatures()+0x22e>
c000b411:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c000b416:	52                   	push   edx
c000b417:	52                   	push   edx
c000b418:	50                   	push   eax
c000b419:	68 c7 0b 02 c0       	push   0xc0020bc7
c000b41e:	e8 36 3d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b423:	83 c4 10             	add    esp,0x10
c000b426:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c000b42b:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000b432:	74 43                	je     c000b477 <Computer::displayFeatures()+0x28f>
c000b434:	51                   	push   ecx
c000b435:	51                   	push   ecx
c000b436:	50                   	push   eax
c000b437:	68 d8 0b 02 c0       	push   0xc0020bd8
c000b43c:	e8 18 3d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b441:	83 c4 10             	add    esp,0x10
c000b444:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c000b449:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000b450:	74 1e                	je     c000b470 <Computer::displayFeatures()+0x288>
c000b452:	52                   	push   edx
c000b453:	52                   	push   edx
c000b454:	50                   	push   eax
c000b455:	68 e9 0b 02 c0       	push   0xc0020be9
c000b45a:	e8 fa 3c 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b45f:	c7 44 24 20 4e 22 02 c0 	mov    DWORD PTR [esp+0x20],0xc002224e
c000b467:	83 c4 18             	add    esp,0x18
c000b46a:	5b                   	pop    ebx
c000b46b:	e9 e9 3c 00 00       	jmp    c000f159 <Dbg::kprintf(char const*, ...)>
c000b470:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c000b475:	eb db                	jmp    c000b452 <Computer::displayFeatures()+0x26a>
c000b477:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c000b47c:	eb b6                	jmp    c000b434 <Computer::displayFeatures()+0x24c>
c000b47e:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c000b483:	e9 6b ff ff ff       	jmp    c000b3f3 <Computer::displayFeatures()+0x20b>
c000b488:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c000b48d:	e9 3f ff ff ff       	jmp    c000b3d1 <Computer::displayFeatures()+0x1e9>
c000b492:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c000b497:	e9 13 ff ff ff       	jmp    c000b3af <Computer::displayFeatures()+0x1c7>
c000b49c:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c000b4a1:	e9 e7 fe ff ff       	jmp    c000b38d <Computer::displayFeatures()+0x1a5>
c000b4a6:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c000b4ab:	e9 bb fe ff ff       	jmp    c000b36b <Computer::displayFeatures()+0x183>
c000b4b0:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c000b4b5:	e9 8f fe ff ff       	jmp    c000b349 <Computer::displayFeatures()+0x161>
c000b4ba:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c000b4bf:	e9 63 fe ff ff       	jmp    c000b327 <Computer::displayFeatures()+0x13f>

c000b4c4 <Computer::rdmsr(unsigned int)>:
c000b4c4:	83 ec 0c             	sub    esp,0xc
c000b4c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4cb:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b4d2:	74 0a                	je     c000b4de <Computer::rdmsr(unsigned int)+0x1a>
c000b4d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b4d8:	0f 32                	rdmsr  
c000b4da:	83 c4 0c             	add    esp,0xc
c000b4dd:	c3                   	ret    
c000b4de:	83 ec 0c             	sub    esp,0xc
c000b4e1:	68 fa 0b 02 c0       	push   0xc0020bfa
c000b4e6:	e8 01 9f 00 00       	call   c00153ec <Krnl::panic(char const*)>
c000b4eb:	83 c4 10             	add    esp,0x10
c000b4ee:	eb e4                	jmp    c000b4d4 <Computer::rdmsr(unsigned int)+0x10>

c000b4f0 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b4f0:	57                   	push   edi
c000b4f1:	56                   	push   esi
c000b4f2:	52                   	push   edx
c000b4f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4f7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b4fb:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b4ff:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b506:	74 0e                	je     c000b516 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b508:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b50c:	89 f0                	mov    eax,esi
c000b50e:	89 fa                	mov    edx,edi
c000b510:	0f 30                	wrmsr  
c000b512:	58                   	pop    eax
c000b513:	5e                   	pop    esi
c000b514:	5f                   	pop    edi
c000b515:	c3                   	ret    
c000b516:	83 ec 0c             	sub    esp,0xc
c000b519:	68 00 0c 02 c0       	push   0xc0020c00
c000b51e:	e8 c9 9e 00 00       	call   c00153ec <Krnl::panic(char const*)>
c000b523:	83 c4 10             	add    esp,0x10
c000b526:	eb e0                	jmp    c000b508 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b528 <Computer::nmiEnabled()>:
c000b528:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b52c:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b532:	c3                   	ret    
c000b533:	90                   	nop

c000b534 <Computer::readCMOS(unsigned char)>:
c000b534:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b538:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b53c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b543:	19 c0                	sbb    eax,eax
c000b545:	83 e0 80             	and    eax,0xffffff80
c000b548:	09 d0                	or     eax,edx
c000b54a:	e6 70                	out    0x70,al
c000b54c:	e4 71                	in     al,0x71
c000b54e:	c3                   	ret    
c000b54f:	90                   	nop

c000b550 <Computer::enableNMI(bool)>:
c000b550:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b554:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b558:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b55e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b566:	eb cc                	jmp    c000b534 <Computer::readCMOS(unsigned char)>

c000b568 <Computer::open(int, int, void*)>:
c000b568:	56                   	push   esi
c000b569:	53                   	push   ebx
c000b56a:	83 ec 10             	sub    esp,0x10
c000b56d:	f6 05 40 41 02 c0 04 	test   BYTE PTR ds:0xc0024140,0x4
c000b574:	0f 94 05 60 35 02 c0 	sete   BYTE PTR ds:0xc0023560
c000b57b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b57f:	68 68 22 00 00       	push   0x2268
c000b584:	e8 9b 3a 00 00       	call   c000f024 <operator new(unsigned long)>
c000b589:	89 c6                	mov    esi,eax
c000b58b:	89 04 24             	mov    DWORD PTR [esp],eax
c000b58e:	e8 23 82 00 00       	call   c00137b6 <ACPI::ACPI()>
c000b593:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b599:	59                   	pop    ecx
c000b59a:	58                   	pop    eax
c000b59b:	56                   	push   esi
c000b59c:	53                   	push   ebx
c000b59d:	e8 cc 4f 00 00       	call   c001056e <Device::addChild(Device*)>
c000b5a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b5a5:	e8 44 fa ff ff       	call   c000afee <Computer::detectFeatures()>
c000b5aa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b5ad:	e8 36 fc ff ff       	call   c000b1e8 <Computer::displayFeatures()>
c000b5b2:	58                   	pop    eax
c000b5b3:	5a                   	pop    edx
c000b5b4:	6a 01                	push   0x1
c000b5b6:	53                   	push   ebx
c000b5b7:	e8 94 ff ff ff       	call   c000b550 <Computer::enableNMI(bool)>
c000b5bc:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b5c3:	e8 5c 3a 00 00       	call   c000f024 <operator new(unsigned long)>
c000b5c8:	89 c6                	mov    esi,eax
c000b5ca:	89 04 24             	mov    DWORD PTR [esp],eax
c000b5cd:	e8 c2 8c 00 00       	call   c0014294 <CPU::CPU()>
c000b5d2:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b5d8:	59                   	pop    ecx
c000b5d9:	58                   	pop    eax
c000b5da:	56                   	push   esi
c000b5db:	53                   	push   ebx
c000b5dc:	e8 8d 4f 00 00       	call   c001056e <Device::addChild(Device*)>
c000b5e1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b5e7:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b5eb:	8b 10                	mov    edx,DWORD PTR [eax]
c000b5ed:	51                   	push   ecx
c000b5ee:	6a 00                	push   0x0
c000b5f0:	6a 00                	push   0x0
c000b5f2:	50                   	push   eax
c000b5f3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b5f6:	83 c4 20             	add    esp,0x20
c000b5f9:	e8 d8 54 00 00       	call   c0010ad6 <setupFPU()>
c000b5fe:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b604:	85 c0                	test   eax,eax
c000b606:	74 1e                	je     c000b626 <Computer::open(int, int, void*)+0xbe>
c000b608:	52                   	push   edx
c000b609:	52                   	push   edx
c000b60a:	50                   	push   eax
c000b60b:	53                   	push   ebx
c000b60c:	e8 5d 4f 00 00       	call   c001056e <Device::addChild(Device*)>
c000b611:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b617:	8b 10                	mov    edx,DWORD PTR [eax]
c000b619:	6a 00                	push   0x0
c000b61b:	6a 00                	push   0x0
c000b61d:	6a 00                	push   0x0
c000b61f:	50                   	push   eax
c000b620:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b623:	83 c4 20             	add    esp,0x20
c000b626:	83 ec 0c             	sub    esp,0xc
c000b629:	68 df af 00 c0       	push   0xc000afdf
c000b62e:	e8 f6 cf 00 00       	call   c0018629 <setupMultitasking(void (*)())>
c000b633:	83 c4 14             	add    esp,0x14
c000b636:	83 c8 ff             	or     eax,0xffffffff
c000b639:	5b                   	pop    ebx
c000b63a:	5e                   	pop    esi
c000b63b:	c3                   	ret    

c000b63c <Computer::disableNMI()>:
c000b63c:	6a 00                	push   0x0
c000b63e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b642:	50                   	push   eax
c000b643:	e8 08 ff ff ff       	call   c000b550 <Computer::enableNMI(bool)>
c000b648:	5a                   	pop    edx
c000b649:	59                   	pop    ecx
c000b64a:	c3                   	ret    
c000b64b:	90                   	nop

c000b64c <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b64c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b650:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b654:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b65b:	19 c0                	sbb    eax,eax
c000b65d:	83 e0 80             	and    eax,0xffffff80
c000b660:	09 d0                	or     eax,edx
c000b662:	e6 70                	out    0x70,al
c000b664:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b668:	e6 71                	out    0x71,al
c000b66a:	c3                   	ret    
c000b66b:	90                   	nop

c000b66c <Computer::handleNMI()>:
c000b66c:	56                   	push   esi
c000b66d:	53                   	push   ebx
c000b66e:	83 ec 10             	sub    esp,0x10
c000b671:	e4 92                	in     al,0x92
c000b673:	89 c6                	mov    esi,eax
c000b675:	e4 61                	in     al,0x61
c000b677:	68 06 0c 02 c0       	push   0xc0020c06
c000b67c:	88 c3                	mov    bl,al
c000b67e:	e8 d6 3a 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b683:	83 c4 10             	add    esp,0x10
c000b686:	83 e6 10             	and    esi,0x10
c000b689:	75 0d                	jne    c000b698 <Computer::handleNMI()+0x2c>
c000b68b:	f6 c3 40             	test   bl,0x40
c000b68e:	75 1d                	jne    c000b6ad <Computer::handleNMI()+0x41>
c000b690:	84 db                	test   bl,bl
c000b692:	78 2d                	js     c000b6c1 <Computer::handleNMI()+0x55>
c000b694:	58                   	pop    eax
c000b695:	5b                   	pop    ebx
c000b696:	5e                   	pop    esi
c000b697:	c3                   	ret    
c000b698:	83 ec 0c             	sub    esp,0xc
c000b69b:	68 17 0c 02 c0       	push   0xc0020c17
c000b6a0:	e8 47 9d 00 00       	call   c00153ec <Krnl::panic(char const*)>
c000b6a5:	83 c4 10             	add    esp,0x10
c000b6a8:	f6 c3 40             	test   bl,0x40
c000b6ab:	74 e3                	je     c000b690 <Computer::handleNMI()+0x24>
c000b6ad:	83 ec 0c             	sub    esp,0xc
c000b6b0:	68 24 0c 02 c0       	push   0xc0020c24
c000b6b5:	e8 32 9d 00 00       	call   c00153ec <Krnl::panic(char const*)>
c000b6ba:	83 c4 10             	add    esp,0x10
c000b6bd:	84 db                	test   bl,bl
c000b6bf:	79 d3                	jns    c000b694 <Computer::handleNMI()+0x28>
c000b6c1:	c7 44 24 10 2e 0c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020c2e
c000b6c9:	5a                   	pop    edx
c000b6ca:	5b                   	pop    ebx
c000b6cb:	5e                   	pop    esi
c000b6cc:	e9 1b 9d 00 00       	jmp    c00153ec <Krnl::panic(char const*)>
c000b6d1:	90                   	nop

c000b6d2 <Computer::setDiskActivityLight(int, bool)>:
c000b6d2:	56                   	push   esi
c000b6d3:	53                   	push   ebx
c000b6d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b6d8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b6dd:	77 1c                	ja     c000b6fb <Computer::setDiskActivityLight(int, bool)+0x29>
c000b6df:	e4 92                	in     al,0x92
c000b6e1:	bb 40 00 00 00       	mov    ebx,0x40
c000b6e6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b6ea:	89 da                	mov    edx,ebx
c000b6ec:	d3 e2                	shl    edx,cl
c000b6ee:	83 f2 ff             	xor    edx,0xffffffff
c000b6f1:	89 f1                	mov    ecx,esi
c000b6f3:	21 d0                	and    eax,edx
c000b6f5:	d3 e3                	shl    ebx,cl
c000b6f7:	09 d8                	or     eax,ebx
c000b6f9:	e6 92                	out    0x92,al
c000b6fb:	5b                   	pop    ebx
c000b6fc:	5e                   	pop    esi
c000b6fd:	c3                   	ret    

c000b6fe <GDTEntry::setBase(unsigned int)>:
c000b6fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b702:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b706:	89 c1                	mov    ecx,eax
c000b708:	c1 e9 10             	shr    ecx,0x10
c000b70b:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b70f:	c1 e8 18             	shr    eax,0x18
c000b712:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b715:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b718:	c3                   	ret    
c000b719:	90                   	nop

c000b71a <GDTEntry::setLimit(unsigned int)>:
c000b71a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b71e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b722:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b725:	66 89 01             	mov    WORD PTR [ecx],ax
c000b728:	c1 e8 10             	shr    eax,0x10
c000b72b:	83 e2 f0             	and    edx,0xfffffff0
c000b72e:	83 e0 0f             	and    eax,0xf
c000b731:	09 d0                	or     eax,edx
c000b733:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b736:	c3                   	ret    
c000b737:	90                   	nop

c000b738 <GDT::GDT()>:
c000b738:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b73c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b746:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b74c:	90                   	nop
c000b74d:	c3                   	ret    

c000b74e <GDT::addEntry(GDTEntry)>:
c000b74e:	53                   	push   ebx
c000b74f:	83 ec 0c             	sub    esp,0xc
c000b752:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b756:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b758:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b75f:	52                   	push   edx
c000b760:	50                   	push   eax
c000b761:	68 68 0c 02 c0       	push   0xc0020c68
c000b766:	e8 ee 39 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000b76b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b76d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b771:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b775:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b779:	8d 50 01             	lea    edx,[eax+0x1]
c000b77c:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b780:	89 13                	mov    DWORD PTR [ebx],edx
c000b782:	c1 e0 03             	shl    eax,0x3
c000b785:	83 c4 18             	add    esp,0x18
c000b788:	5b                   	pop    ebx
c000b789:	c3                   	ret    

c000b78a <GDT::getNumberOfEntries()>:
c000b78a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b78e:	8b 00                	mov    eax,DWORD PTR [eax]
c000b790:	c3                   	ret    
c000b791:	90                   	nop

c000b792 <GDT::flush()>:
c000b792:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b796:	83 c0 04             	add    eax,0x4
c000b799:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000b79c:	a3 32 41 02 c0       	mov    ds:0xc0024132,eax
c000b7a1:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b7a8:	66 89 15 30 41 02 c0 	mov    WORD PTR ds:0xc0024130,dx
c000b7af:	e9 7f 4b ff ff       	jmp    c0000333 <loadGDT>

c000b7b4 <GDT::setup()>:
c000b7b4:	55                   	push   ebp
c000b7b5:	57                   	push   edi
c000b7b6:	56                   	push   esi
c000b7b7:	53                   	push   ebx
c000b7b8:	83 ec 3c             	sub    esp,0x3c
c000b7bb:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b7bf:	6a 00                	push   0x0
c000b7c1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b7c5:	53                   	push   ebx
c000b7c6:	e8 33 ff ff ff       	call   c000b6fe <GDTEntry::setBase(unsigned int)>
c000b7cb:	6a 00                	push   0x0
c000b7cd:	53                   	push   ebx
c000b7ce:	e8 47 ff ff ff       	call   c000b71a <GDTEntry::setLimit(unsigned int)>
c000b7d3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b7db:	6a 00                	push   0x0
c000b7dd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b7e1:	53                   	push   ebx
c000b7e2:	e8 17 ff ff ff       	call   c000b6fe <GDTEntry::setBase(unsigned int)>
c000b7e7:	68 ff ff ff 00       	push   0xffffff
c000b7ec:	53                   	push   ebx
c000b7ed:	e8 28 ff ff ff       	call   c000b71a <GDTEntry::setLimit(unsigned int)>
c000b7f2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b7f6:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b7fb:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b800:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b804:	83 c4 20             	add    esp,0x20
c000b807:	6a 00                	push   0x0
c000b809:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b80d:	53                   	push   ebx
c000b80e:	e8 eb fe ff ff       	call   c000b6fe <GDTEntry::setBase(unsigned int)>
c000b813:	68 ff ff ff 00       	push   0xffffff
c000b818:	53                   	push   ebx
c000b819:	e8 fc fe ff ff       	call   c000b71a <GDTEntry::setLimit(unsigned int)>
c000b81e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b822:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b826:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b82b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b82f:	0d 00 92 c0 00       	or     eax,0xc09200
c000b834:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b838:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b83c:	89 d8                	mov    eax,ebx
c000b83e:	80 cc 60             	or     ah,0x60
c000b841:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b845:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b849:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b84d:	83 c4 0c             	add    esp,0xc
c000b850:	89 f8                	mov    eax,edi
c000b852:	80 cc 60             	or     ah,0x60
c000b855:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b859:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b85d:	89 c7                	mov    edi,eax
c000b85f:	55                   	push   ebp
c000b860:	e8 e9 fe ff ff       	call   c000b74e <GDT::addEntry(GDTEntry)>
c000b865:	83 c4 0c             	add    esp,0xc
c000b868:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b86c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b870:	55                   	push   ebp
c000b871:	e8 d8 fe ff ff       	call   c000b74e <GDT::addEntry(GDTEntry)>
c000b876:	83 c4 0c             	add    esp,0xc
c000b879:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b87d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b881:	55                   	push   ebp
c000b882:	e8 c7 fe ff ff       	call   c000b74e <GDT::addEntry(GDTEntry)>
c000b887:	83 c4 0c             	add    esp,0xc
c000b88a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b88e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b892:	53                   	push   ebx
c000b893:	51                   	push   ecx
c000b894:	55                   	push   ebp
c000b895:	e8 b4 fe ff ff       	call   c000b74e <GDT::addEntry(GDTEntry)>
c000b89a:	83 c4 0c             	add    esp,0xc
c000b89d:	57                   	push   edi
c000b89e:	56                   	push   esi
c000b89f:	55                   	push   ebp
c000b8a0:	e8 a9 fe ff ff       	call   c000b74e <GDT::addEntry(GDTEntry)>
c000b8a5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b8a8:	e8 e5 fe ff ff       	call   c000b792 <GDT::flush()>
c000b8ad:	83 c4 4c             	add    esp,0x4c
c000b8b0:	5b                   	pop    ebx
c000b8b1:	5e                   	pop    esi
c000b8b2:	5f                   	pop    edi
c000b8b3:	5d                   	pop    ebp
c000b8b4:	c3                   	ret    

c000b8b5 <idleFunction(void*)>:
c000b8b5:	53                   	push   ebx
c000b8b6:	83 ec 08             	sub    esp,0x8
c000b8b9:	e8 39 cb 00 00       	call   c00183f7 <unlockScheduler()>
c000b8be:	e8 bd 89 00 00       	call   c0014280 <thisCPU()>
c000b8c3:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b8ca:	74 41                	je     c000b90d <idleFunction(void*)+0x58>
c000b8cc:	a1 28 41 02 c0       	mov    eax,ds:0xc0024128
c000b8d1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b8d8:	74 33                	je     c000b90d <idleFunction(void*)+0x58>
c000b8da:	52                   	push   edx
c000b8db:	31 db                	xor    ebx,ebx
c000b8dd:	52                   	push   edx
c000b8de:	68 e1 00 00 00       	push   0xe1
c000b8e3:	50                   	push   eax
c000b8e4:	e8 db fb ff ff       	call   c000b4c4 <Computer::rdmsr(unsigned int)>
c000b8e9:	53                   	push   ebx
c000b8ea:	83 e0 02             	and    eax,0x2
c000b8ed:	50                   	push   eax
c000b8ee:	68 e1 00 00 00       	push   0xe1
c000b8f3:	ff 35 28 41 02 c0    	push   DWORD PTR ds:0xc0024128
c000b8f9:	e8 f2 fb ff ff       	call   c000b4f0 <Computer::wrmsr(unsigned int, unsigned long long)>
c000b8fe:	83 c4 20             	add    esp,0x20
c000b901:	e8 4a 48 ff ff       	call   c0000150 <doTPAUSE>
c000b906:	e8 65 38 01 00       	call   c001f170 <idleCommon()>
c000b90b:	eb f4                	jmp    c000b901 <idleFunction(void*)+0x4c>
c000b90d:	fb                   	sti    
c000b90e:	f4                   	hlt    
c000b90f:	e8 5c 38 01 00       	call   c001f170 <idleCommon()>
c000b914:	eb f7                	jmp    c000b90d <idleFunction(void*)+0x58>

c000b916 <IDTEntry::IDTEntry(bool)>:
c000b916:	83 ec 04             	sub    esp,0x4
c000b919:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b91d:	88 04 24             	mov    BYTE PTR [esp],al
c000b920:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b924:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b92a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b92e:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b932:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b936:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b939:	83 e2 f0             	and    edx,0xfffffff0
c000b93c:	83 ca 0e             	or     edx,0xe
c000b93f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b942:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b946:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b949:	83 e2 ef             	and    edx,0xffffffef
c000b94c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b94f:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000b953:	74 04                	je     c000b959 <IDTEntry::IDTEntry(bool)+0x43>
c000b955:	b2 03                	mov    dl,0x3
c000b957:	eb 02                	jmp    c000b95b <IDTEntry::IDTEntry(bool)+0x45>
c000b959:	b2 00                	mov    dl,0x0
c000b95b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b95f:	83 e2 03             	and    edx,0x3
c000b962:	88 d1                	mov    cl,dl
c000b964:	c1 e1 05             	shl    ecx,0x5
c000b967:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b96a:	83 e2 9f             	and    edx,0xffffff9f
c000b96d:	09 ca                	or     edx,ecx
c000b96f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b972:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b976:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b979:	83 ca 80             	or     edx,0xffffff80
c000b97c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b97f:	90                   	nop
c000b980:	83 c4 04             	add    esp,0x4
c000b983:	c3                   	ret    

c000b984 <IDTEntry::setOffset(unsigned int)>:
c000b984:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b988:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b98c:	66 89 02             	mov    WORD PTR [edx],ax
c000b98f:	c1 e8 10             	shr    eax,0x10
c000b992:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000b996:	c3                   	ret    
c000b997:	90                   	nop

c000b998 <IDT::IDT()>:
c000b998:	90                   	nop
c000b999:	c3                   	ret    

c000b99a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000b99a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b99e:	83 c0 30             	add    eax,0x30
c000b9a1:	c3                   	ret    

c000b9a2 <IDT::addEntry(IDTEntry, int)>:
c000b9a2:	53                   	push   ebx
c000b9a3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b9ab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b9af:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b9b3:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000b9b6:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000b9ba:	5b                   	pop    ebx
c000b9bb:	c3                   	ret    

c000b9bc <IDT::addEntry(int, void (*)(), bool)>:
c000b9bc:	53                   	push   ebx
c000b9bd:	83 ec 10             	sub    esp,0x10
c000b9c0:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000b9c5:	50                   	push   eax
c000b9c6:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000b9ca:	53                   	push   ebx
c000b9cb:	e8 46 ff ff ff       	call   c000b916 <IDTEntry::IDTEntry(bool)>
c000b9d0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b9d4:	53                   	push   ebx
c000b9d5:	e8 aa ff ff ff       	call   c000b984 <IDTEntry::setOffset(unsigned int)>
c000b9da:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b9de:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b9e2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b9e6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b9ea:	e8 b3 ff ff ff       	call   c000b9a2 <IDT::addEntry(IDTEntry, int)>
c000b9ef:	83 c4 30             	add    esp,0x30
c000b9f2:	5b                   	pop    ebx
c000b9f3:	c3                   	ret    

c000b9f4 <IDT::flush()>:
c000b9f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b9f8:	66 c7 05 38 41 02 c0 ff 07 	mov    WORD PTR ds:0xc0024138,0x7ff
c000ba01:	a3 3a 41 02 c0       	mov    ds:0xc002413a,eax
c000ba06:	0f 01 1d 38 41 02 c0 	lidtd  ds:0xc0024138
c000ba0d:	c3                   	ret    

c000ba0e <IDT::setup()>:
c000ba0e:	57                   	push   edi
c000ba0f:	56                   	push   esi
c000ba10:	53                   	push   ebx
c000ba11:	83 ec 10             	sub    esp,0x10
c000ba14:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000ba18:	6a 00                	push   0x0
c000ba1a:	68 53 03 00 c0       	push   0xc0000353
c000ba1f:	6a 00                	push   0x0
c000ba21:	53                   	push   ebx
c000ba22:	e8 95 ff ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000ba27:	6a 00                	push   0x0
c000ba29:	68 63 03 00 c0       	push   0xc0000363
c000ba2e:	6a 01                	push   0x1
c000ba30:	53                   	push   ebx
c000ba31:	e8 86 ff ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000ba36:	83 c4 20             	add    esp,0x20
c000ba39:	6a 00                	push   0x0
c000ba3b:	68 6d 03 00 c0       	push   0xc000036d
c000ba40:	6a 02                	push   0x2
c000ba42:	53                   	push   ebx
c000ba43:	e8 74 ff ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000ba48:	6a 00                	push   0x0
c000ba4a:	68 77 03 00 c0       	push   0xc0000377
c000ba4f:	6a 03                	push   0x3
c000ba51:	53                   	push   ebx
c000ba52:	e8 65 ff ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000ba57:	83 c4 20             	add    esp,0x20
c000ba5a:	6a 00                	push   0x0
c000ba5c:	68 81 03 00 c0       	push   0xc0000381
c000ba61:	6a 04                	push   0x4
c000ba63:	53                   	push   ebx
c000ba64:	e8 53 ff ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000ba69:	6a 00                	push   0x0
c000ba6b:	68 8b 03 00 c0       	push   0xc000038b
c000ba70:	6a 05                	push   0x5
c000ba72:	53                   	push   ebx
c000ba73:	e8 44 ff ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000ba78:	83 c4 20             	add    esp,0x20
c000ba7b:	6a 00                	push   0x0
c000ba7d:	68 95 03 00 c0       	push   0xc0000395
c000ba82:	6a 06                	push   0x6
c000ba84:	53                   	push   ebx
c000ba85:	e8 32 ff ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000ba8a:	6a 00                	push   0x0
c000ba8c:	68 9f 03 00 c0       	push   0xc000039f
c000ba91:	6a 07                	push   0x7
c000ba93:	53                   	push   ebx
c000ba94:	e8 23 ff ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000ba99:	83 c4 20             	add    esp,0x20
c000ba9c:	6a 00                	push   0x0
c000ba9e:	68 a9 03 00 c0       	push   0xc00003a9
c000baa3:	6a 08                	push   0x8
c000baa5:	53                   	push   ebx
c000baa6:	e8 11 ff ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000baab:	6a 00                	push   0x0
c000baad:	68 b1 03 00 c0       	push   0xc00003b1
c000bab2:	6a 09                	push   0x9
c000bab4:	53                   	push   ebx
c000bab5:	e8 02 ff ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000baba:	83 c4 20             	add    esp,0x20
c000babd:	6a 00                	push   0x0
c000babf:	68 bb 03 00 c0       	push   0xc00003bb
c000bac4:	6a 0a                	push   0xa
c000bac6:	53                   	push   ebx
c000bac7:	e8 f0 fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bacc:	6a 00                	push   0x0
c000bace:	68 c3 03 00 c0       	push   0xc00003c3
c000bad3:	6a 0b                	push   0xb
c000bad5:	53                   	push   ebx
c000bad6:	e8 e1 fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000badb:	83 c4 20             	add    esp,0x20
c000bade:	6a 00                	push   0x0
c000bae0:	68 cb 03 00 c0       	push   0xc00003cb
c000bae5:	6a 0c                	push   0xc
c000bae7:	53                   	push   ebx
c000bae8:	e8 cf fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000baed:	6a 00                	push   0x0
c000baef:	68 d3 03 00 c0       	push   0xc00003d3
c000baf4:	6a 0d                	push   0xd
c000baf6:	53                   	push   ebx
c000baf7:	e8 c0 fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bafc:	83 c4 20             	add    esp,0x20
c000baff:	6a 00                	push   0x0
c000bb01:	68 db 03 00 c0       	push   0xc00003db
c000bb06:	6a 0e                	push   0xe
c000bb08:	53                   	push   ebx
c000bb09:	e8 ae fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bb0e:	6a 00                	push   0x0
c000bb10:	68 e3 03 00 c0       	push   0xc00003e3
c000bb15:	6a 0f                	push   0xf
c000bb17:	53                   	push   ebx
c000bb18:	e8 9f fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bb1d:	83 c4 20             	add    esp,0x20
c000bb20:	6a 00                	push   0x0
c000bb22:	68 ed 03 00 c0       	push   0xc00003ed
c000bb27:	6a 10                	push   0x10
c000bb29:	53                   	push   ebx
c000bb2a:	e8 8d fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bb2f:	6a 00                	push   0x0
c000bb31:	68 f7 03 00 c0       	push   0xc00003f7
c000bb36:	6a 11                	push   0x11
c000bb38:	53                   	push   ebx
c000bb39:	e8 7e fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bb3e:	83 c4 20             	add    esp,0x20
c000bb41:	6a 00                	push   0x0
c000bb43:	68 01 04 00 c0       	push   0xc0000401
c000bb48:	6a 12                	push   0x12
c000bb4a:	53                   	push   ebx
c000bb4b:	e8 6c fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bb50:	6a 01                	push   0x1
c000bb52:	68 0b 04 00 c0       	push   0xc000040b
c000bb57:	6a 60                	push   0x60
c000bb59:	53                   	push   ebx
c000bb5a:	e8 5d fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bb5f:	83 c4 20             	add    esp,0x20
c000bb62:	6a 00                	push   0x0
c000bb64:	68 15 04 00 c0       	push   0xc0000415
c000bb69:	6a 20                	push   0x20
c000bb6b:	53                   	push   ebx
c000bb6c:	e8 4b fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bb71:	6a 00                	push   0x0
c000bb73:	68 1f 04 00 c0       	push   0xc000041f
c000bb78:	6a 21                	push   0x21
c000bb7a:	53                   	push   ebx
c000bb7b:	e8 3c fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bb80:	83 c4 20             	add    esp,0x20
c000bb83:	6a 00                	push   0x0
c000bb85:	68 29 04 00 c0       	push   0xc0000429
c000bb8a:	6a 22                	push   0x22
c000bb8c:	53                   	push   ebx
c000bb8d:	e8 2a fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bb92:	6a 00                	push   0x0
c000bb94:	68 33 04 00 c0       	push   0xc0000433
c000bb99:	6a 23                	push   0x23
c000bb9b:	53                   	push   ebx
c000bb9c:	e8 1b fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bba1:	83 c4 20             	add    esp,0x20
c000bba4:	6a 00                	push   0x0
c000bba6:	68 3d 04 00 c0       	push   0xc000043d
c000bbab:	6a 24                	push   0x24
c000bbad:	53                   	push   ebx
c000bbae:	e8 09 fe ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bbb3:	6a 00                	push   0x0
c000bbb5:	68 47 04 00 c0       	push   0xc0000447
c000bbba:	6a 25                	push   0x25
c000bbbc:	53                   	push   ebx
c000bbbd:	e8 fa fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bbc2:	83 c4 20             	add    esp,0x20
c000bbc5:	6a 00                	push   0x0
c000bbc7:	68 51 04 00 c0       	push   0xc0000451
c000bbcc:	6a 26                	push   0x26
c000bbce:	53                   	push   ebx
c000bbcf:	e8 e8 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bbd4:	6a 00                	push   0x0
c000bbd6:	68 5b 04 00 c0       	push   0xc000045b
c000bbdb:	6a 27                	push   0x27
c000bbdd:	53                   	push   ebx
c000bbde:	e8 d9 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bbe3:	83 c4 20             	add    esp,0x20
c000bbe6:	6a 00                	push   0x0
c000bbe8:	68 65 04 00 c0       	push   0xc0000465
c000bbed:	6a 28                	push   0x28
c000bbef:	53                   	push   ebx
c000bbf0:	e8 c7 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bbf5:	6a 00                	push   0x0
c000bbf7:	68 6f 04 00 c0       	push   0xc000046f
c000bbfc:	6a 29                	push   0x29
c000bbfe:	53                   	push   ebx
c000bbff:	e8 b8 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bc04:	83 c4 20             	add    esp,0x20
c000bc07:	6a 00                	push   0x0
c000bc09:	68 79 04 00 c0       	push   0xc0000479
c000bc0e:	6a 2a                	push   0x2a
c000bc10:	53                   	push   ebx
c000bc11:	e8 a6 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bc16:	6a 00                	push   0x0
c000bc18:	68 83 04 00 c0       	push   0xc0000483
c000bc1d:	6a 2b                	push   0x2b
c000bc1f:	53                   	push   ebx
c000bc20:	e8 97 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bc25:	83 c4 20             	add    esp,0x20
c000bc28:	6a 00                	push   0x0
c000bc2a:	68 8d 04 00 c0       	push   0xc000048d
c000bc2f:	6a 2c                	push   0x2c
c000bc31:	53                   	push   ebx
c000bc32:	e8 85 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bc37:	6a 00                	push   0x0
c000bc39:	68 97 04 00 c0       	push   0xc0000497
c000bc3e:	6a 2d                	push   0x2d
c000bc40:	53                   	push   ebx
c000bc41:	e8 76 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bc46:	83 c4 20             	add    esp,0x20
c000bc49:	6a 00                	push   0x0
c000bc4b:	68 a1 04 00 c0       	push   0xc00004a1
c000bc50:	6a 2e                	push   0x2e
c000bc52:	53                   	push   ebx
c000bc53:	e8 64 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bc58:	6a 00                	push   0x0
c000bc5a:	68 ab 04 00 c0       	push   0xc00004ab
c000bc5f:	6a 2f                	push   0x2f
c000bc61:	53                   	push   ebx
c000bc62:	e8 55 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bc67:	83 c4 20             	add    esp,0x20
c000bc6a:	6a 00                	push   0x0
c000bc6c:	68 b5 04 00 c0       	push   0xc00004b5
c000bc71:	6a 30                	push   0x30
c000bc73:	53                   	push   ebx
c000bc74:	e8 43 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bc79:	6a 00                	push   0x0
c000bc7b:	68 bf 04 00 c0       	push   0xc00004bf
c000bc80:	6a 31                	push   0x31
c000bc82:	53                   	push   ebx
c000bc83:	e8 34 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bc88:	83 c4 20             	add    esp,0x20
c000bc8b:	6a 00                	push   0x0
c000bc8d:	68 c9 04 00 c0       	push   0xc00004c9
c000bc92:	6a 32                	push   0x32
c000bc94:	53                   	push   ebx
c000bc95:	e8 22 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bc9a:	6a 00                	push   0x0
c000bc9c:	68 d3 04 00 c0       	push   0xc00004d3
c000bca1:	6a 33                	push   0x33
c000bca3:	53                   	push   ebx
c000bca4:	e8 13 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bca9:	83 c4 20             	add    esp,0x20
c000bcac:	6a 00                	push   0x0
c000bcae:	68 dd 04 00 c0       	push   0xc00004dd
c000bcb3:	6a 34                	push   0x34
c000bcb5:	53                   	push   ebx
c000bcb6:	e8 01 fd ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bcbb:	6a 00                	push   0x0
c000bcbd:	68 e7 04 00 c0       	push   0xc00004e7
c000bcc2:	6a 35                	push   0x35
c000bcc4:	53                   	push   ebx
c000bcc5:	e8 f2 fc ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bcca:	83 c4 20             	add    esp,0x20
c000bccd:	6a 00                	push   0x0
c000bccf:	68 f1 04 00 c0       	push   0xc00004f1
c000bcd4:	6a 36                	push   0x36
c000bcd6:	53                   	push   ebx
c000bcd7:	e8 e0 fc ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bcdc:	6a 00                	push   0x0
c000bcde:	68 fb 04 00 c0       	push   0xc00004fb
c000bce3:	6a 37                	push   0x37
c000bce5:	53                   	push   ebx
c000bce6:	e8 d1 fc ff ff       	call   c000b9bc <IDT::addEntry(int, void (*)(), bool)>
c000bceb:	83 c4 20             	add    esp,0x20
c000bcee:	e8 d8 25 00 00       	call   c000e2cb <Virt::getAKernelVAS()>
c000bcf3:	52                   	push   edx
c000bcf4:	6a 03                	push   0x3
c000bcf6:	6a 02                	push   0x2
c000bcf8:	50                   	push   eax
c000bcf9:	e8 0e 2c 00 00       	call   c000e90c <VAS::allocatePages(int, int)>
c000bcfe:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000bd05:	89 c6                	mov    esi,eax
c000bd07:	e8 18 33 00 00       	call   c000f024 <operator new(unsigned long)>
c000bd0c:	81 c6 00 20 00 00    	add    esi,0x2000
c000bd12:	89 04 24             	mov    DWORD PTR [esp],eax
c000bd15:	89 c7                	mov    edi,eax
c000bd17:	e8 ee 1c 00 00       	call   c000da0a <TSS::TSS()>
c000bd1c:	83 c4 0c             	add    esp,0xc
c000bd1f:	68 a9 03 00 c0       	push   0xc00003a9
c000bd24:	56                   	push   esi
c000bd25:	57                   	push   edi
c000bd26:	e8 1f 1d 00 00       	call   c000da4a <TSS::setup(unsigned long, unsigned long)>
c000bd2b:	59                   	pop    ecx
c000bd2c:	89 c6                	mov    esi,eax
c000bd2e:	5f                   	pop    edi
c000bd2f:	6a 00                	push   0x0
c000bd31:	8d 44 24 14          	lea    eax,[esp+0x14]
c000bd35:	50                   	push   eax
c000bd36:	e8 db fb ff ff       	call   c000b916 <IDTEntry::IDTEntry(bool)>
c000bd3b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd3f:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000bd44:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000bd4a:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000bd51:	80 ce 05             	or     dh,0x5
c000bd54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bd58:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bd5c:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000bd5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd63:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000bd66:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000bd69:	e8 86 fc ff ff       	call   c000b9f4 <IDT::flush()>
c000bd6e:	83 c4 20             	add    esp,0x20
c000bd71:	5b                   	pop    ebx
c000bd72:	5e                   	pop    esi
c000bd73:	5f                   	pop    edi
c000bd74:	c3                   	ret    

c000bd75 <sbrk>:
c000bd75:	55                   	push   ebp
c000bd76:	57                   	push   edi
c000bd77:	56                   	push   esi
c000bd78:	53                   	push   ebx
c000bd79:	83 ec 1c             	sub    esp,0x1c
c000bd7c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000bd80:	85 db                	test   ebx,ebx
c000bd82:	a1 40 35 02 c0       	mov    eax,ds:0xc0023540
c000bd87:	0f 84 e4 00 00 00    	je     c000be71 <sbrk+0xfc>
c000bd8d:	78 3d                	js     c000bdcc <sbrk+0x57>
c000bd8f:	e8 ec 84 00 00       	call   c0014280 <thisCPU()>
c000bd94:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000bd9a:	83 e0 01             	and    eax,0x1
c000bd9d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000bda1:	a1 40 35 02 c0       	mov    eax,ds:0xc0023540
c000bda6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bdaa:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000bdb0:	89 d8                	mov    eax,ebx
c000bdb2:	c1 f8 1f             	sar    eax,0x1f
c000bdb5:	25 ff 0f 00 00       	and    eax,0xfff
c000bdba:	01 c3                	add    ebx,eax
c000bdbc:	c1 fb 0c             	sar    ebx,0xc
c000bdbf:	89 df                	mov    edi,ebx
c000bdc1:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000bdc5:	be 00 00 00 00       	mov    esi,0x0
c000bdca:	eb 2a                	jmp    c000bdf6 <sbrk+0x81>
c000bdcc:	83 ec 08             	sub    esp,0x8
c000bdcf:	53                   	push   ebx
c000bdd0:	68 84 0c 02 c0       	push   0xc0020c84
c000bdd5:	e8 7f 33 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000bdda:	83 c4 10             	add    esp,0x10
c000bddd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bde2:	e9 8a 00 00 00       	jmp    c000be71 <sbrk+0xfc>
c000bde7:	81 05 40 35 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023540,0x1000
c000bdf1:	46                   	inc    esi
c000bdf2:	39 f7                	cmp    edi,esi
c000bdf4:	74 34                	je     c000be2a <sbrk+0xb5>
c000bdf6:	e8 d0 24 00 00       	call   c000e2cb <Virt::getAKernelVAS()>
c000bdfb:	89 c3                	mov    ebx,eax
c000bdfd:	8b 2d 40 35 02 c0    	mov    ebp,DWORD PTR ds:0xc0023540
c000be03:	e8 f5 06 00 00       	call   c000c4fd <Phys::allocatePage()>
c000be08:	68 01 04 00 00       	push   0x401
c000be0d:	55                   	push   ebp
c000be0e:	50                   	push   eax
c000be0f:	53                   	push   ebx
c000be10:	e8 f5 29 00 00       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c000be15:	83 c4 10             	add    esp,0x10
c000be18:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000be1d:	74 c8                	je     c000bde7 <sbrk+0x72>
c000be1f:	8b 1d 40 35 02 c0    	mov    ebx,DWORD PTR ds:0xc0023540
c000be25:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000be28:	eb bd                	jmp    c000bde7 <sbrk+0x72>
c000be2a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000be2f:	74 48                	je     c000be79 <sbrk+0x104>
c000be31:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000be35:	89 d3                	mov    ebx,edx
c000be37:	c1 eb 0a             	shr    ebx,0xa
c000be3a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000be40:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000be46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be4a:	c1 e0 0c             	shl    eax,0xc
c000be4d:	01 d0                	add    eax,edx
c000be4f:	c1 e8 0a             	shr    eax,0xa
c000be52:	25 00 f0 ff ff       	and    eax,0xfffff000
c000be57:	2d 00 00 40 00       	sub    eax,0x400000
c000be5c:	39 c3                	cmp    ebx,eax
c000be5e:	77 0d                	ja     c000be6d <sbrk+0xf8>
c000be60:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000be63:	81 c3 00 10 00 00    	add    ebx,0x1000
c000be69:	39 d8                	cmp    eax,ebx
c000be6b:	73 f3                	jae    c000be60 <sbrk+0xeb>
c000be6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000be71:	83 c4 1c             	add    esp,0x1c
c000be74:	5b                   	pop    ebx
c000be75:	5e                   	pop    esi
c000be76:	5f                   	pop    edi
c000be77:	5d                   	pop    ebp
c000be78:	c3                   	ret    
c000be79:	e8 07 33 01 00       	call   c001f185 <CPU::readCR3()>
c000be7e:	83 ec 0c             	sub    esp,0xc
c000be81:	50                   	push   eax
c000be82:	e8 10 33 01 00       	call   c001f197 <CPU::writeCR3(unsigned long)>
c000be87:	83 c4 10             	add    esp,0x10
c000be8a:	eb e1                	jmp    c000be6d <sbrk+0xf8>

c000be8c <mmap>:
c000be8c:	83 ec 18             	sub    esp,0x18
c000be8f:	68 b4 0c 02 c0       	push   0xc0020cb4
c000be94:	e8 53 95 00 00       	call   c00153ec <Krnl::panic(char const*)>
c000be99:	b8 00 00 00 00       	mov    eax,0x0
c000be9e:	83 c4 1c             	add    esp,0x1c
c000bea1:	c3                   	ret    

c000bea2 <munmap>:
c000bea2:	83 ec 18             	sub    esp,0x18
c000bea5:	68 b9 0c 02 c0       	push   0xc0020cb9
c000beaa:	e8 3d 95 00 00       	call   c00153ec <Krnl::panic(char const*)>
c000beaf:	b8 00 00 00 00       	mov    eax,0x0
c000beb4:	83 c4 1c             	add    esp,0x1c
c000beb7:	c3                   	ret    

c000beb8 <liballoc_lock()>:
c000beb8:	83 ec 0c             	sub    esp,0xc
c000bebb:	e8 35 c5 00 00       	call   c00183f5 <lockScheduler()>
c000bec0:	b8 00 00 00 00       	mov    eax,0x0
c000bec5:	83 c4 0c             	add    esp,0xc
c000bec8:	c3                   	ret    

c000bec9 <liballoc_unlock()>:
c000bec9:	83 ec 0c             	sub    esp,0xc
c000becc:	e8 26 c5 00 00       	call   c00183f7 <unlockScheduler()>
c000bed1:	b8 00 00 00 00       	mov    eax,0x0
c000bed6:	83 c4 0c             	add    esp,0xc
c000bed9:	c3                   	ret    

c000beda <liballoc_alloc(int)>:
c000beda:	83 ec 0c             	sub    esp,0xc
c000bedd:	e8 e9 23 00 00       	call   c000e2cb <Virt::getAKernelVAS()>
c000bee2:	83 ec 04             	sub    esp,0x4
c000bee5:	6a 01                	push   0x1
c000bee7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000beeb:	50                   	push   eax
c000beec:	e8 1b 2a 00 00       	call   c000e90c <VAS::allocatePages(int, int)>
c000bef1:	83 c4 1c             	add    esp,0x1c
c000bef4:	c3                   	ret    

c000bef5 <liballoc_free(void*, int)>:
c000bef5:	83 ec 0c             	sub    esp,0xc
c000bef8:	e8 ce 23 00 00       	call   c000e2cb <Virt::getAKernelVAS()>
c000befd:	83 ec 08             	sub    esp,0x8
c000bf00:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bf04:	50                   	push   eax
c000bf05:	e8 a2 26 00 00       	call   c000e5ac <VAS::freeAllocatedPages(unsigned long)>
c000bf0a:	b8 00 00 00 00       	mov    eax,0x0
c000bf0f:	83 c4 1c             	add    esp,0x1c
c000bf12:	c3                   	ret    

c000bf13 <realloc>:
c000bf13:	83 ec 14             	sub    esp,0x14
c000bf16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf1e:	e8 63 54 ff ff       	call   c0001386 <dlrealloc>
c000bf23:	83 c4 1c             	add    esp,0x1c
c000bf26:	c3                   	ret    

c000bf27 <malloc>:
c000bf27:	83 ec 18             	sub    esp,0x18
c000bf2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf2e:	e8 16 4f ff ff       	call   c0000e49 <dlmalloc>
c000bf33:	83 c4 1c             	add    esp,0x1c
c000bf36:	c3                   	ret    

c000bf37 <free>:
c000bf37:	83 ec 18             	sub    esp,0x18
c000bf3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf3e:	e8 a8 4b ff ff       	call   c0000aeb <dlfree>
c000bf43:	83 c4 1c             	add    esp,0x1c
c000bf46:	c3                   	ret    

c000bf47 <rfree>:
c000bf47:	83 ec 18             	sub    esp,0x18
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	e8 e4 ff ff ff       	call   c000bf37 <free>
c000bf53:	83 c4 1c             	add    esp,0x1c
c000bf56:	c3                   	ret    

c000bf57 <calloc>:
c000bf57:	56                   	push   esi
c000bf58:	53                   	push   ebx
c000bf59:	83 ec 10             	sub    esp,0x10
c000bf5c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bf60:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000bf65:	53                   	push   ebx
c000bf66:	e8 bc ff ff ff       	call   c000bf27 <malloc>
c000bf6b:	89 c6                	mov    esi,eax
c000bf6d:	83 c4 0c             	add    esp,0xc
c000bf70:	53                   	push   ebx
c000bf71:	6a 00                	push   0x0
c000bf73:	50                   	push   eax
c000bf74:	e8 8f 46 ff ff       	call   c0000608 <memset>
c000bf79:	89 f0                	mov    eax,esi
c000bf7b:	83 c4 14             	add    esp,0x14
c000bf7e:	5b                   	pop    ebx
c000bf7f:	5e                   	pop    esi
c000bf80:	c3                   	ret    

c000bf81 <hwTextMode_loadInData(VgaText*)>:
c000bf81:	57                   	push   edi
c000bf82:	56                   	push   esi
c000bf83:	53                   	push   ebx
c000bf84:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bf88:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000bf8e:	85 c0                	test   eax,eax
c000bf90:	7e 30                	jle    c000bfc2 <hwTextMode_loadInData(VgaText*)+0x41>
c000bf92:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000bf95:	31 f6                	xor    esi,esi
c000bf97:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000bf9a:	31 c0                	xor    eax,eax
c000bf9c:	c1 e1 05             	shl    ecx,0x5
c000bf9f:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000bfa5:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000bfa9:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000bfad:	40                   	inc    eax
c000bfae:	83 f8 50             	cmp    eax,0x50
c000bfb1:	75 f2                	jne    c000bfa5 <hwTextMode_loadInData(VgaText*)+0x24>
c000bfb3:	46                   	inc    esi
c000bfb4:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000bfba:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000bfc0:	7f d5                	jg     c000bf97 <hwTextMode_loadInData(VgaText*)+0x16>
c000bfc2:	5b                   	pop    ebx
c000bfc3:	5e                   	pop    esi
c000bfc4:	5f                   	pop    edi
c000bfc5:	c3                   	ret    

c000bfc6 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000bfc6:	56                   	push   esi
c000bfc7:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000bfcc:	53                   	push   ebx
c000bfcd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000bfd1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bfd5:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000bfdb:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000bfe1:	c1 e0 04             	shl    eax,0x4
c000bfe4:	83 e6 0f             	and    esi,0xf
c000bfe7:	25 ff 00 00 00       	and    eax,0xff
c000bfec:	83 c2 02             	add    edx,0x2
c000bfef:	09 f0                	or     eax,esi
c000bff1:	41                   	inc    ecx
c000bff2:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000bff6:	c1 e0 08             	shl    eax,0x8
c000bff9:	81 e6 ff 00 00 00    	and    esi,0xff
c000bfff:	09 f0                	or     eax,esi
c000c001:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000c005:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000c00b:	75 c8                	jne    c000bfd5 <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000c00d:	5b                   	pop    ebx
c000c00e:	5e                   	pop    esi
c000c00f:	c3                   	ret    

c000c010 <hwTextMode_showCursor(VgaText*, bool)>:
c000c010:	56                   	push   esi
c000c011:	53                   	push   ebx
c000c012:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000c017:	74 38                	je     c000c051 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000c019:	bb d4 03 00 00       	mov    ebx,0x3d4
c000c01e:	b0 0a                	mov    al,0xa
c000c020:	89 da                	mov    edx,ebx
c000c022:	ee                   	out    dx,al
c000c023:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000c028:	89 ca                	mov    edx,ecx
c000c02a:	ec                   	in     al,dx
c000c02b:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c02f:	b2 0f                	mov    dl,0xf
c000c031:	83 e0 c0             	and    eax,0xffffffc0
c000c034:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000c03a:	09 d0                	or     eax,edx
c000c03c:	89 ca                	mov    edx,ecx
c000c03e:	ee                   	out    dx,al
c000c03f:	b0 0b                	mov    al,0xb
c000c041:	89 da                	mov    edx,ebx
c000c043:	ee                   	out    dx,al
c000c044:	89 ca                	mov    edx,ecx
c000c046:	ec                   	in     al,dx
c000c047:	83 e0 e0             	and    eax,0xffffffe0
c000c04a:	83 c8 0f             	or     eax,0xf
c000c04d:	ee                   	out    dx,al
c000c04e:	5b                   	pop    ebx
c000c04f:	5e                   	pop    esi
c000c050:	c3                   	ret    
c000c051:	b0 0a                	mov    al,0xa
c000c053:	ba d4 03 00 00       	mov    edx,0x3d4
c000c058:	ee                   	out    dx,al
c000c059:	b0 20                	mov    al,0x20
c000c05b:	ba d5 03 00 00       	mov    edx,0x3d5
c000c060:	ee                   	out    dx,al
c000c061:	5b                   	pop    ebx
c000c062:	5e                   	pop    esi
c000c063:	c3                   	ret    

c000c064 <hwTextMode_update(VgaText*)>:
c000c064:	c3                   	ret    

c000c065 <hwTextMode_updateCursor(VgaText*)>:
c000c065:	56                   	push   esi
c000c066:	b9 19 00 00 00       	mov    ecx,0x19
c000c06b:	53                   	push   ebx
c000c06c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c070:	8b 90 ac 0f 00 00    	mov    edx,DWORD PTR [eax+0xfac]
c000c076:	8b 98 b4 0f 00 00    	mov    ebx,DWORD PTR [eax+0xfb4]
c000c07c:	29 d1                	sub    ecx,edx
c000c07e:	8b b0 b0 0f 00 00    	mov    esi,DWORD PTR [eax+0xfb0]
c000c084:	01 d9                	add    ecx,ebx
c000c086:	b0 0f                	mov    al,0xf
c000c088:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000c08b:	c1 e1 04             	shl    ecx,0x4
c000c08e:	01 f1                	add    ecx,esi
c000c090:	be d4 03 00 00       	mov    esi,0x3d4
c000c095:	89 f2                	mov    edx,esi
c000c097:	ee                   	out    dx,al
c000c098:	bb d5 03 00 00       	mov    ebx,0x3d5
c000c09d:	88 c8                	mov    al,cl
c000c09f:	89 da                	mov    edx,ebx
c000c0a1:	ee                   	out    dx,al
c000c0a2:	b0 0e                	mov    al,0xe
c000c0a4:	89 f2                	mov    edx,esi
c000c0a6:	ee                   	out    dx,al
c000c0a7:	89 c8                	mov    eax,ecx
c000c0a9:	89 da                	mov    edx,ebx
c000c0ab:	66 c1 e8 08          	shr    ax,0x8
c000c0af:	ee                   	out    dx,al
c000c0b0:	5b                   	pop    ebx
c000c0b1:	5e                   	pop    esi
c000c0b2:	c3                   	ret    

c000c0b3 <hwTextMode_disableBlink(VgaText*, bool)>:
c000c0b3:	ba da 03 00 00       	mov    edx,0x3da
c000c0b8:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000c0bd:	75 18                	jne    c000c0d7 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000c0bf:	ec                   	in     al,dx
c000c0c0:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c0c5:	b0 30                	mov    al,0x30
c000c0c7:	89 ca                	mov    edx,ecx
c000c0c9:	ee                   	out    dx,al
c000c0ca:	ba c1 03 00 00       	mov    edx,0x3c1
c000c0cf:	ec                   	in     al,dx
c000c0d0:	83 c8 08             	or     eax,0x8
c000c0d3:	89 ca                	mov    edx,ecx
c000c0d5:	ee                   	out    dx,al
c000c0d6:	c3                   	ret    
c000c0d7:	ec                   	in     al,dx
c000c0d8:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c0dd:	b0 30                	mov    al,0x30
c000c0df:	89 ca                	mov    edx,ecx
c000c0e1:	ee                   	out    dx,al
c000c0e2:	ba c1 03 00 00       	mov    edx,0x3c1
c000c0e7:	ec                   	in     al,dx
c000c0e8:	83 e0 f7             	and    eax,0xfffffff7
c000c0eb:	89 ca                	mov    edx,ecx
c000c0ed:	ee                   	out    dx,al
c000c0ee:	c3                   	ret    

c000c0ef <hwTextMode_scrollScreen(VgaText*)>:
c000c0ef:	55                   	push   ebp
c000c0f0:	bd 02 00 00 00       	mov    ebp,0x2
c000c0f5:	57                   	push   edi
c000c0f6:	56                   	push   esi
c000c0f7:	53                   	push   ebx
c000c0f8:	83 ec 1c             	sub    esp,0x1c
c000c0fb:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000c103:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c107:	31 c0                	xor    eax,eax
c000c109:	eb 0b                	jmp    c000c116 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000c10b:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c111:	74 58                	je     c000c16b <hwTextMode_scrollScreen(VgaText*)+0x7c>
c000c113:	43                   	inc    ebx
c000c114:	89 f0                	mov    eax,esi
c000c116:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000c11c:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000c122:	88 13                	mov    BYTE PTR [ebx],dl
c000c124:	8d 70 01             	lea    esi,[eax+0x1]
c000c127:	83 fd 18             	cmp    ebp,0x18
c000c12a:	75 df                	jne    c000c10b <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000c12c:	a8 01                	test   al,0x1
c000c12e:	75 13                	jne    c000c143 <hwTextMode_scrollScreen(VgaText*)+0x54>
c000c130:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000c133:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c139:	75 d8                	jne    c000c113 <hwTextMode_scrollScreen(VgaText*)+0x24>
c000c13b:	83 c4 1c             	add    esp,0x1c
c000c13e:	5b                   	pop    ebx
c000c13f:	5e                   	pop    esi
c000c140:	5f                   	pop    edi
c000c141:	5d                   	pop    ebp
c000c142:	c3                   	ret    
c000c143:	52                   	push   edx
c000c144:	31 c0                	xor    eax,eax
c000c146:	52                   	push   edx
c000c147:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c14b:	8a 81 cc 0f 00 00    	mov    al,BYTE PTR [ecx+0xfcc]
c000c151:	50                   	push   eax
c000c152:	31 c0                	xor    eax,eax
c000c154:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000c158:	8a 81 d0 0f 00 00    	mov    al,BYTE PTR [ecx+0xfd0]
c000c15e:	50                   	push   eax
c000c15f:	e8 84 0b 00 00       	call   c000cce8 <VgaText::combineColours(unsigned char, unsigned char)>
c000c164:	83 c4 10             	add    esp,0x10
c000c167:	88 07                	mov    BYTE PTR [edi],al
c000c169:	eb c8                	jmp    c000c133 <hwTextMode_scrollScreen(VgaText*)+0x44>
c000c16b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c16f:	45                   	inc    ebp
c000c170:	05 a0 00 00 00       	add    eax,0xa0
c000c175:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c179:	eb 88                	jmp    c000c103 <hwTextMode_scrollScreen(VgaText*)+0x14>

c000c17b <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000c17b:	56                   	push   esi
c000c17c:	31 c0                	xor    eax,eax
c000c17e:	53                   	push   ebx
c000c17f:	83 ec 0c             	sub    esp,0xc
c000c182:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c186:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c18a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000c18e:	50                   	push   eax
c000c18f:	31 c0                	xor    eax,eax
c000c191:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c195:	50                   	push   eax
c000c196:	e8 4d 0b 00 00       	call   c000cce8 <VgaText::combineColours(unsigned char, unsigned char)>
c000c19b:	5a                   	pop    edx
c000c19c:	25 ff 00 00 00       	and    eax,0xff
c000c1a1:	59                   	pop    ecx
c000c1a2:	50                   	push   eax
c000c1a3:	89 f0                	mov    eax,esi
c000c1a5:	0f be f0             	movsx  esi,al
c000c1a8:	56                   	push   esi
c000c1a9:	e8 e0 0b 00 00       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000c1ae:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c1b2:	ba 19 00 00 00       	mov    edx,0x19
c000c1b7:	8b b1 ac 0f 00 00    	mov    esi,DWORD PTR [ecx+0xfac]
c000c1bd:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c1c0:	29 f2                	sub    edx,esi
c000c1c2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c1c6:	c1 e1 04             	shl    ecx,0x4
c000c1c9:	8d 14 92             	lea    edx,[edx+edx*4]
c000c1cc:	01 d9                	add    ecx,ebx
c000c1ce:	c1 e2 04             	shl    edx,0x4
c000c1d1:	01 ca                	add    edx,ecx
c000c1d3:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000c1db:	83 c4 14             	add    esp,0x14
c000c1de:	5b                   	pop    ebx
c000c1df:	5e                   	pop    esi
c000c1e0:	c3                   	ret    

c000c1e1 <setupTextMode()>:
c000c1e1:	c7 05 d8 41 02 c0 b3 c0 00 c0 	mov    DWORD PTR ds:0xc00241d8,0xc000c0b3
c000c1eb:	c7 05 c4 41 02 c0 81 bf 00 c0 	mov    DWORD PTR ds:0xc00241c4,0xc000bf81
c000c1f5:	c7 05 c0 41 02 c0 c6 bf 00 c0 	mov    DWORD PTR ds:0xc00241c0,0xc000bfc6
c000c1ff:	c7 05 cc 41 02 c0 ef c0 00 c0 	mov    DWORD PTR ds:0xc00241cc,0xc000c0ef
c000c209:	c7 05 d4 41 02 c0 10 c0 00 c0 	mov    DWORD PTR ds:0xc00241d4,0xc000c010
c000c213:	c7 05 c8 41 02 c0 64 c0 00 c0 	mov    DWORD PTR ds:0xc00241c8,0xc000c064
c000c21d:	c7 05 d0 41 02 c0 65 c0 00 c0 	mov    DWORD PTR ds:0xc00241d0,0xc000c065
c000c227:	c7 05 dc 41 02 c0 7b c1 00 c0 	mov    DWORD PTR ds:0xc00241dc,0xc000c17b
c000c231:	c3                   	ret    

c000c232 <kernel_main>:
c000c232:	57                   	push   edi
c000c233:	bf f9 03 00 00       	mov    edi,0x3f9
c000c238:	56                   	push   esi
c000c239:	31 f6                	xor    esi,esi
c000c23b:	53                   	push   ebx
c000c23c:	83 ec 10             	sub    esp,0x10
c000c23f:	e8 fe 08 00 00       	call   c000cb42 <installVgaTextImplementation()>
c000c244:	e8 98 ff ff ff       	call   c000c1e1 <setupTextMode()>
c000c249:	89 f0                	mov    eax,esi
c000c24b:	89 fa                	mov    edx,edi
c000c24d:	ee                   	out    dx,al
c000c24e:	bb fb 03 00 00       	mov    ebx,0x3fb
c000c253:	b0 80                	mov    al,0x80
c000c255:	89 da                	mov    edx,ebx
c000c257:	ee                   	out    dx,al
c000c258:	b1 03                	mov    cl,0x3
c000c25a:	ba f8 03 00 00       	mov    edx,0x3f8
c000c25f:	88 c8                	mov    al,cl
c000c261:	ee                   	out    dx,al
c000c262:	89 f0                	mov    eax,esi
c000c264:	89 fa                	mov    edx,edi
c000c266:	ee                   	out    dx,al
c000c267:	88 c8                	mov    al,cl
c000c269:	89 da                	mov    edx,ebx
c000c26b:	ee                   	out    dx,al
c000c26c:	b0 c7                	mov    al,0xc7
c000c26e:	ba fa 03 00 00       	mov    edx,0x3fa
c000c273:	ee                   	out    dx,al
c000c274:	b0 0b                	mov    al,0xb
c000c276:	ba fc 03 00 00       	mov    edx,0x3fc
c000c27b:	ee                   	out    dx,al
c000c27c:	a1 24 05 00 00       	mov    eax,ds:0x524
c000c281:	83 ec 0c             	sub    esp,0xc
c000c284:	05 ff 0f 00 00       	add    eax,0xfff
c000c289:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c28e:	50                   	push   eax
c000c28f:	e8 6d 03 00 00       	call   c000c601 <Phys::physicalMemorySetup(unsigned int)>
c000c294:	e8 b6 1f 00 00       	call   c000e24f <Virt::virtualMemorySetup()>
c000c299:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000c29f:	83 c4 10             	add    esp,0x10
c000c2a2:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000c2a8:	75 0e                	jne    c000c2b8 <kernel_main+0x86>
c000c2aa:	89 d8                	mov    eax,ebx
c000c2ac:	25 48 03 00 00       	and    eax,0x348
c000c2b1:	3d 00 03 00 00       	cmp    eax,0x300
c000c2b6:	74 10                	je     c000c2c8 <kernel_main+0x96>
c000c2b8:	83 ec 0c             	sub    esp,0xc
c000c2bb:	68 4f 22 02 c0       	push   0xc002224f
c000c2c0:	e8 27 91 00 00       	call   c00153ec <Krnl::panic(char const*)>
c000c2c5:	83 c4 10             	add    esp,0x10
c000c2c8:	83 ec 0c             	sub    esp,0xc
c000c2cb:	89 1d 40 41 02 c0    	mov    DWORD PTR ds:0xc0024140,ebx
c000c2d1:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c2d5:	53                   	push   ebx
c000c2d6:	e8 11 21 00 00       	call   c000e3ec <VAS::VAS()>
c000c2db:	89 1d 84 42 02 c0    	mov    DWORD PTR ds:0xc0024284,ebx
c000c2e1:	e8 3a 3d ff ff       	call   c0000020 <callGlobalConstructors>
c000c2e6:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000c2ed:	e8 32 2d 00 00       	call   c000f024 <operator new(unsigned long)>
c000c2f2:	89 04 24             	mov    DWORD PTR [esp],eax
c000c2f5:	89 c6                	mov    esi,eax
c000c2f7:	e8 78 ea ff ff       	call   c000ad74 <Computer::Computer()>
c000c2fc:	6a 00                	push   0x0
c000c2fe:	6a 00                	push   0x0
c000c300:	89 35 28 41 02 c0    	mov    DWORD PTR ds:0xc0024128,esi
c000c306:	6a 00                	push   0x0
c000c308:	56                   	push   esi
c000c309:	e8 5a f2 ff ff       	call   c000b568 <Computer::open(int, int, void*)>
c000c30e:	83 c4 14             	add    esp,0x14
c000c311:	53                   	push   ebx
c000c312:	e8 87 23 00 00       	call   c000e69e <VAS::~VAS()>
c000c317:	c7 04 24 c0 0c 02 c0 	mov    DWORD PTR [esp],0xc0020cc0
c000c31e:	e8 c9 90 00 00       	call   c00153ec <Krnl::panic(char const*)>
c000c323:	83 c4 20             	add    esp,0x20
c000c326:	5b                   	pop    ebx
c000c327:	5e                   	pop    esi
c000c328:	5f                   	pop    edi
c000c329:	c3                   	ret    

c000c32a <Phys::allocateDMA(unsigned long)>:
c000c32a:	57                   	push   edi
c000c32b:	31 d2                	xor    edx,edx
c000c32d:	56                   	push   esi
c000c32e:	31 ff                	xor    edi,edi
c000c330:	53                   	push   ebx
c000c331:	31 c9                	xor    ecx,ecx
c000c333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c337:	31 f6                	xor    esi,esi
c000c339:	05 ff 0f 00 00       	add    eax,0xfff
c000c33e:	c1 e8 0c             	shr    eax,0xc
c000c341:	eb 17                	jmp    c000c35a <Phys::allocateDMA(unsigned long)+0x30>
c000c343:	85 c9                	test   ecx,ecx
c000c345:	75 04                	jne    c000c34b <Phys::allocateDMA(unsigned long)+0x21>
c000c347:	89 d7                	mov    edi,edx
c000c349:	89 d6                	mov    esi,edx
c000c34b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c34e:	39 d8                	cmp    eax,ebx
c000c350:	74 1f                	je     c000c371 <Phys::allocateDMA(unsigned long)+0x47>
c000c352:	42                   	inc    edx
c000c353:	89 d9                	mov    ecx,ebx
c000c355:	83 fa 2f             	cmp    edx,0x2f
c000c358:	7f 11                	jg     c000c36b <Phys::allocateDMA(unsigned long)+0x41>
c000c35a:	80 ba 80 41 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdbe80],0x0
c000c361:	74 e0                	je     c000c343 <Phys::allocateDMA(unsigned long)+0x19>
c000c363:	31 c9                	xor    ecx,ecx
c000c365:	42                   	inc    edx
c000c366:	83 fa 2f             	cmp    edx,0x2f
c000c369:	7e ef                	jle    c000c35a <Phys::allocateDMA(unsigned long)+0x30>
c000c36b:	5b                   	pop    ebx
c000c36c:	31 c0                	xor    eax,eax
c000c36e:	5e                   	pop    esi
c000c36f:	5f                   	pop    edi
c000c370:	c3                   	ret    
c000c371:	8d 54 06 ff          	lea    edx,[esi+eax*1-0x1]
c000c375:	89 d3                	mov    ebx,edx
c000c377:	c1 fb 1f             	sar    ebx,0x1f
c000c37a:	83 e3 0f             	and    ebx,0xf
c000c37d:	01 d3                	add    ebx,edx
c000c37f:	89 f2                	mov    edx,esi
c000c381:	c1 fb 04             	sar    ebx,0x4
c000c384:	c1 fa 04             	sar    edx,0x4
c000c387:	39 da                	cmp    edx,ebx
c000c389:	75 30                	jne    c000c3bb <Phys::allocateDMA(unsigned long)+0x91>
c000c38b:	85 c0                	test   eax,eax
c000c38d:	74 1b                	je     c000c3aa <Phys::allocateDMA(unsigned long)+0x80>
c000c38f:	bf 80 41 02 c0       	mov    edi,0xc0024180
c000c394:	8d 96 80 41 02 c0    	lea    edx,[esi-0x3ffdbe80]
c000c39a:	83 f7 ff             	xor    edi,0xffffffff
c000c39d:	29 f7                	sub    edi,esi
c000c39f:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c3a2:	42                   	inc    edx
c000c3a3:	8d 04 17             	lea    eax,[edi+edx*1]
c000c3a6:	39 c1                	cmp    ecx,eax
c000c3a8:	7f f5                	jg     c000c39f <Phys::allocateDMA(unsigned long)+0x75>
c000c3aa:	85 db                	test   ebx,ebx
c000c3ac:	74 13                	je     c000c3c1 <Phys::allocateDMA(unsigned long)+0x97>
c000c3ae:	5b                   	pop    ebx
c000c3af:	8d 86 50 20 0c 00    	lea    eax,[esi+0xc2050]
c000c3b5:	c1 e0 0c             	shl    eax,0xc
c000c3b8:	5e                   	pop    esi
c000c3b9:	5f                   	pop    edi
c000c3ba:	c3                   	ret    
c000c3bb:	89 fa                	mov    edx,edi
c000c3bd:	31 c9                	xor    ecx,ecx
c000c3bf:	eb a4                	jmp    c000c365 <Phys::allocateDMA(unsigned long)+0x3b>
c000c3c1:	c1 e6 0c             	shl    esi,0xc
c000c3c4:	5b                   	pop    ebx
c000c3c5:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000c3cb:	5e                   	pop    esi
c000c3cc:	5f                   	pop    edi
c000c3cd:	c3                   	ret    

c000c3ce <Phys::freeDMA(unsigned long, unsigned long)>:
c000c3ce:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c3d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c3d6:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c3dc:	c1 e9 0c             	shr    ecx,0xc
c000c3df:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c3e4:	76 25                	jbe    c000c40b <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c3e6:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c3eb:	c1 e8 0c             	shr    eax,0xc
c000c3ee:	8d 50 10             	lea    edx,[eax+0x10]
c000c3f1:	85 c9                	test   ecx,ecx
c000c3f3:	74 15                	je     c000c40a <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c3f5:	8d 82 80 41 02 c0    	lea    eax,[edx-0x3ffdbe80]
c000c3fb:	8d 94 11 80 41 02 c0 	lea    edx,[ecx+edx*1-0x3ffdbe80]
c000c402:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c405:	40                   	inc    eax
c000c406:	39 d0                	cmp    eax,edx
c000c408:	75 f8                	jne    c000c402 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c40a:	c3                   	ret    
c000c40b:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c411:	c1 ea 0c             	shr    edx,0xc
c000c414:	eb db                	jmp    c000c3f1 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c416 <Phys::setPageState(unsigned long, bool)>:
c000c416:	56                   	push   esi
c000c417:	ba 01 00 00 00       	mov    edx,0x1
c000c41c:	53                   	push   ebx
c000c41d:	8b 35 44 35 02 c0    	mov    esi,DWORD PTR ds:0xc0023544
c000c423:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c427:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c42b:	89 c8                	mov    eax,ecx
c000c42d:	83 e1 07             	and    ecx,0x7
c000c430:	c1 e8 03             	shr    eax,0x3
c000c433:	01 c6                	add    esi,eax
c000c435:	d3 e2                	shl    edx,cl
c000c437:	83 f2 ff             	xor    edx,0xffffffff
c000c43a:	20 16                	and    BYTE PTR [esi],dl
c000c43c:	8b 15 44 35 02 c0    	mov    edx,DWORD PTR ds:0xc0023544
c000c442:	01 d0                	add    eax,edx
c000c444:	d3 e3                	shl    ebx,cl
c000c446:	8a 08                	mov    cl,BYTE PTR [eax]
c000c448:	09 d9                	or     ecx,ebx
c000c44a:	88 08                	mov    BYTE PTR [eax],cl
c000c44c:	5b                   	pop    ebx
c000c44d:	5e                   	pop    esi
c000c44e:	c3                   	ret    

c000c44f <Phys::getPageState(unsigned long)>:
c000c44f:	53                   	push   ebx
c000c450:	8b 15 44 35 02 c0    	mov    edx,DWORD PTR ds:0xc0023544
c000c456:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c45a:	31 db                	xor    ebx,ebx
c000c45c:	89 c8                	mov    eax,ecx
c000c45e:	83 e1 07             	and    ecx,0x7
c000c461:	c1 e8 03             	shr    eax,0x3
c000c464:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c000c467:	89 d8                	mov    eax,ebx
c000c469:	5b                   	pop    ebx
c000c46a:	d3 f8                	sar    eax,cl
c000c46c:	83 e0 01             	and    eax,0x1
c000c46f:	c3                   	ret    

c000c470 <Phys::freePage(unsigned long)>:
c000c470:	53                   	push   ebx
c000c471:	83 ec 08             	sub    esp,0x8
c000c474:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c478:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c47e:	76 5a                	jbe    c000c4da <Phys::freePage(unsigned long)+0x6a>
c000c480:	c1 eb 0c             	shr    ebx,0xc
c000c483:	53                   	push   ebx
c000c484:	e8 c6 ff ff ff       	call   c000c44f <Phys::getPageState(unsigned long)>
c000c489:	5a                   	pop    edx
c000c48a:	84 c0                	test   al,al
c000c48c:	74 5e                	je     c000c4ec <Phys::freePage(unsigned long)+0x7c>
c000c48e:	a1 6c 41 02 c0       	mov    eax,ds:0xc002416c
c000c493:	48                   	dec    eax
c000c494:	a3 6c 41 02 c0       	mov    ds:0xc002416c,eax
c000c499:	8d 04 80             	lea    eax,[eax+eax*4]
c000c49c:	8d 04 80             	lea    eax,[eax+eax*4]
c000c49f:	c1 e0 02             	shl    eax,0x2
c000c4a2:	89 c2                	mov    edx,eax
c000c4a4:	c1 fa 1f             	sar    edx,0x1f
c000c4a7:	f7 3d 70 41 02 c0    	idiv   DWORD PTR ds:0xc0024170
c000c4ad:	39 05 68 41 02 c0    	cmp    DWORD PTR ds:0xc0024168,eax
c000c4b3:	75 12                	jne    c000c4c7 <Phys::freePage(unsigned long)+0x57>
c000c4b5:	51                   	push   ecx
c000c4b6:	51                   	push   ecx
c000c4b7:	6a 00                	push   0x0
c000c4b9:	53                   	push   ebx
c000c4ba:	e8 57 ff ff ff       	call   c000c416 <Phys::setPageState(unsigned long, bool)>
c000c4bf:	83 c4 10             	add    esp,0x10
c000c4c2:	83 c4 08             	add    esp,0x8
c000c4c5:	5b                   	pop    ebx
c000c4c6:	c3                   	ret    
c000c4c7:	83 ec 0c             	sub    esp,0xc
c000c4ca:	a3 68 41 02 c0       	mov    ds:0xc0024168,eax
c000c4cf:	50                   	push   eax
c000c4d0:	e8 01 0a 00 00       	call   c000ced6 <VgaText::updateRAMUsageDisplay(int)>
c000c4d5:	83 c4 10             	add    esp,0x10
c000c4d8:	eb db                	jmp    c000c4b5 <Phys::freePage(unsigned long)+0x45>
c000c4da:	68 00 10 00 00       	push   0x1000
c000c4df:	53                   	push   ebx
c000c4e0:	e8 e9 fe ff ff       	call   c000c3ce <Phys::freeDMA(unsigned long, unsigned long)>
c000c4e5:	59                   	pop    ecx
c000c4e6:	5b                   	pop    ebx
c000c4e7:	83 c4 08             	add    esp,0x8
c000c4ea:	5b                   	pop    ebx
c000c4eb:	c3                   	ret    
c000c4ec:	c7 44 24 10 db 0c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020cdb
c000c4f4:	83 c4 08             	add    esp,0x8
c000c4f7:	5b                   	pop    ebx
c000c4f8:	e9 ef 8e 00 00       	jmp    c00153ec <Krnl::panic(char const*)>

c000c4fd <Phys::allocatePage()>:
c000c4fd:	56                   	push   esi
c000c4fe:	53                   	push   ebx
c000c4ff:	51                   	push   ecx
c000c500:	8b 35 60 41 02 c0    	mov    esi,DWORD PTR ds:0xc0024160
c000c506:	89 f3                	mov    ebx,esi
c000c508:	eb 0a                	jmp    c000c514 <Phys::allocatePage()+0x17>
c000c50a:	89 1d 60 41 02 c0    	mov    DWORD PTR ds:0xc0024160,ebx
c000c510:	39 de                	cmp    esi,ebx
c000c512:	74 24                	je     c000c538 <Phys::allocatePage()+0x3b>
c000c514:	53                   	push   ebx
c000c515:	e8 35 ff ff ff       	call   c000c44f <Phys::getPageState(unsigned long)>
c000c51a:	5a                   	pop    edx
c000c51b:	84 c0                	test   al,al
c000c51d:	74 5a                	je     c000c579 <Phys::allocatePage()+0x7c>
c000c51f:	43                   	inc    ebx
c000c520:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c526:	75 e2                	jne    c000c50a <Phys::allocatePage()+0xd>
c000c528:	31 db                	xor    ebx,ebx
c000c52a:	c7 05 60 41 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024160,0x0
c000c534:	39 de                	cmp    esi,ebx
c000c536:	75 dc                	jne    c000c514 <Phys::allocatePage()+0x17>
c000c538:	83 ec 0c             	sub    esp,0xc
c000c53b:	68 f1 0c 02 c0       	push   0xc0020cf1
c000c540:	e8 14 2c 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000c545:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000c54c:	e8 d9 fd ff ff       	call   c000c32a <Phys::allocateDMA(unsigned long)>
c000c551:	83 c4 10             	add    esp,0x10
c000c554:	85 c0                	test   eax,eax
c000c556:	75 5a                	jne    c000c5b2 <Phys::allocatePage()+0xb5>
c000c558:	83 ec 0c             	sub    esp,0xc
c000c55b:	68 02 0d 02 c0       	push   0xc0020d02
c000c560:	e8 87 8e 00 00       	call   c00153ec <Krnl::panic(char const*)>
c000c565:	83 c4 10             	add    esp,0x10
c000c568:	8b 1d 60 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024160
c000c56e:	53                   	push   ebx
c000c56f:	e8 db fe ff ff       	call   c000c44f <Phys::getPageState(unsigned long)>
c000c574:	5a                   	pop    edx
c000c575:	84 c0                	test   al,al
c000c577:	75 a6                	jne    c000c51f <Phys::allocatePage()+0x22>
c000c579:	6a 01                	push   0x1
c000c57b:	53                   	push   ebx
c000c57c:	e8 95 fe ff ff       	call   c000c416 <Phys::setPageState(unsigned long, bool)>
c000c581:	a1 6c 41 02 c0       	mov    eax,ds:0xc002416c
c000c586:	59                   	pop    ecx
c000c587:	40                   	inc    eax
c000c588:	5b                   	pop    ebx
c000c589:	a3 6c 41 02 c0       	mov    ds:0xc002416c,eax
c000c58e:	8d 04 80             	lea    eax,[eax+eax*4]
c000c591:	8d 04 80             	lea    eax,[eax+eax*4]
c000c594:	c1 e0 02             	shl    eax,0x2
c000c597:	89 c2                	mov    edx,eax
c000c599:	c1 fa 1f             	sar    edx,0x1f
c000c59c:	f7 3d 70 41 02 c0    	idiv   DWORD PTR ds:0xc0024170
c000c5a2:	39 05 68 41 02 c0    	cmp    DWORD PTR ds:0xc0024168,eax
c000c5a8:	75 0c                	jne    c000c5b6 <Phys::allocatePage()+0xb9>
c000c5aa:	a1 60 41 02 c0       	mov    eax,ds:0xc0024160
c000c5af:	c1 e0 0c             	shl    eax,0xc
c000c5b2:	5a                   	pop    edx
c000c5b3:	5b                   	pop    ebx
c000c5b4:	5e                   	pop    esi
c000c5b5:	c3                   	ret    
c000c5b6:	83 ec 0c             	sub    esp,0xc
c000c5b9:	a3 68 41 02 c0       	mov    ds:0xc0024168,eax
c000c5be:	50                   	push   eax
c000c5bf:	e8 12 09 00 00       	call   c000ced6 <VgaText::updateRAMUsageDisplay(int)>
c000c5c4:	83 c4 10             	add    esp,0x10
c000c5c7:	eb e1                	jmp    c000c5aa <Phys::allocatePage()+0xad>

c000c5c9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c5c9:	56                   	push   esi
c000c5ca:	53                   	push   ebx
c000c5cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c5cf:	39 1d 64 41 02 c0    	cmp    DWORD PTR ds:0xc0024164,ebx
c000c5d5:	73 06                	jae    c000c5dd <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c5d7:	89 1d 64 41 02 c0    	mov    DWORD PTR ds:0xc0024164,ebx
c000c5dd:	c1 eb 0c             	shr    ebx,0xc
c000c5e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c5e4:	c1 e8 0c             	shr    eax,0xc
c000c5e7:	39 d8                	cmp    eax,ebx
c000c5e9:	73 13                	jae    c000c5fe <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c5eb:	6a 00                	push   0x0
c000c5ed:	8d 70 01             	lea    esi,[eax+0x1]
c000c5f0:	50                   	push   eax
c000c5f1:	e8 20 fe ff ff       	call   c000c416 <Phys::setPageState(unsigned long, bool)>
c000c5f6:	5a                   	pop    edx
c000c5f7:	89 f0                	mov    eax,esi
c000c5f9:	59                   	pop    ecx
c000c5fa:	39 f3                	cmp    ebx,esi
c000c5fc:	75 ed                	jne    c000c5eb <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c5fe:	5b                   	pop    ebx
c000c5ff:	5e                   	pop    esi
c000c600:	c3                   	ret    

c000c601 <Phys::physicalMemorySetup(unsigned int)>:
c000c601:	55                   	push   ebp
c000c602:	57                   	push   edi
c000c603:	56                   	push   esi
c000c604:	53                   	push   ebx
c000c605:	31 db                	xor    ebx,ebx
c000c607:	83 ec 40             	sub    esp,0x40
c000c60a:	6a 30                	push   0x30
c000c60c:	6a 00                	push   0x0
c000c60e:	68 80 41 02 c0       	push   0xc0024180
c000c613:	e8 f0 3f ff ff       	call   c0000608 <memset>
c000c618:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c61c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c621:	05 00 10 00 00       	add    eax,0x1000
c000c626:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c62a:	83 c4 10             	add    esp,0x10
c000c62d:	56                   	push   esi
c000c62e:	56                   	push   esi
c000c62f:	6a 01                	push   0x1
c000c631:	53                   	push   ebx
c000c632:	43                   	inc    ebx
c000c633:	e8 de fd ff ff       	call   c000c416 <Phys::setPageState(unsigned long, bool)>
c000c638:	83 c4 10             	add    esp,0x10
c000c63b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c641:	75 ea                	jne    c000c62d <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c643:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c000c649:	66 85 c0             	test   ax,ax
c000c64c:	0f 84 3b 01 00 00    	je     c000c78d <Phys::physicalMemorySetup(unsigned int)+0x18c>
c000c652:	89 c7                	mov    edi,eax
c000c654:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c65c:	81 e7 ff ff 00 00    	and    edi,0xffff
c000c662:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000c667:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000c66b:	eb 6d                	jmp    c000c6da <Phys::physicalMemorySetup(unsigned int)+0xd9>
c000c66d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000c671:	89 c1                	mov    ecx,eax
c000c673:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000c677:	0f 83 bc 00 00 00    	jae    c000c739 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c67d:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c681:	ba 00 00 0a 00       	mov    edx,0xa0000
c000c686:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c68a:	39 f2                	cmp    edx,esi
c000c68c:	19 f8                	sbb    eax,edi
c000c68e:	73 07                	jae    c000c697 <Phys::physicalMemorySetup(unsigned int)+0x96>
c000c690:	be 00 00 0a 00       	mov    esi,0xa0000
c000c695:	31 ff                	xor    edi,edi
c000c697:	89 f2                	mov    edx,esi
c000c699:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000c69e:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000c6a4:	89 f9                	mov    ecx,edi
c000c6a6:	83 d1 ff             	adc    ecx,0xffffffff
c000c6a9:	39 d0                	cmp    eax,edx
c000c6ab:	b8 00 00 00 00       	mov    eax,0x0
c000c6b0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c6b4:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c6b8:	19 c8                	sbb    eax,ecx
c000c6ba:	0f 82 0d 01 00 00    	jb     c000c7cd <Phys::physicalMemorySetup(unsigned int)+0x1cc>
c000c6c0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c6c4:	83 c3 18             	add    ebx,0x18
c000c6c7:	41                   	inc    ecx
c000c6c8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c6cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c6d0:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000c6d4:	0f 84 c3 00 00 00    	je     c000c79d <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c6da:	8b 33                	mov    esi,DWORD PTR [ebx]
c000c6dc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c6df:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000c6e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c6e6:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000c6e9:	01 f0                	add    eax,esi
c000c6eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c6ee:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c6f2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c6f6:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000c6fa:	11 fa                	adc    edx,edi
c000c6fc:	55                   	push   ebp
c000c6fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c701:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c705:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c709:	51                   	push   ecx
c000c70a:	56                   	push   esi
c000c70b:	68 3c 0d 02 c0       	push   0xc0020d3c
c000c710:	e8 44 2a 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000c715:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c719:	83 c4 10             	add    esp,0x10
c000c71c:	09 f8                	or     eax,edi
c000c71e:	75 7d                	jne    c000c79d <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c720:	83 fd 01             	cmp    ebp,0x1
c000c723:	75 11                	jne    c000c736 <Phys::physicalMemorySetup(unsigned int)+0x135>
c000c725:	ba 00 00 08 00       	mov    edx,0x80000
c000c72a:	89 c1                	mov    ecx,eax
c000c72c:	39 f2                	cmp    edx,esi
c000c72e:	19 f9                	sbb    ecx,edi
c000c730:	0f 83 37 ff ff ff    	jae    c000c66d <Phys::physicalMemorySetup(unsigned int)+0x6c>
c000c736:	4d                   	dec    ebp
c000c737:	75 87                	jne    c000c6c0 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c739:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c73d:	31 d2                	xor    edx,edx
c000c73f:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000c743:	89 c8                	mov    eax,ecx
c000c745:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c749:	19 d1                	sbb    ecx,edx
c000c74b:	0f 82 6f ff ff ff    	jb     c000c6c0 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c751:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000c756:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000c75a:	b9 00 00 00 00       	mov    ecx,0x0
c000c75f:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c763:	0f 83 57 ff ff ff    	jae    c000c6c0 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c769:	39 c6                	cmp    esi,eax
c000c76b:	19 d7                	sbb    edi,edx
c000c76d:	73 6a                	jae    c000c7d9 <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c76f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c773:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c777:	29 c7                	sub    edi,eax
c000c779:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c77d:	19 d5                	sbb    ebp,edx
c000c77f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000c783:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000c787:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c78b:	eb 4c                	jmp    c000c7d9 <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c78d:	83 ec 0c             	sub    esp,0xc
c000c790:	68 10 0d 02 c0       	push   0xc0020d10
c000c795:	e8 52 8c 00 00       	call   c00153ec <Krnl::panic(char const*)>
c000c79a:	83 c4 10             	add    esp,0x10
c000c79d:	bb 40 01 00 00       	mov    ebx,0x140
c000c7a2:	50                   	push   eax
c000c7a3:	50                   	push   eax
c000c7a4:	6a 00                	push   0x0
c000c7a6:	53                   	push   ebx
c000c7a7:	e8 6a fc ff ff       	call   c000c416 <Phys::setPageState(unsigned long, bool)>
c000c7ac:	8b 15 70 41 02 c0    	mov    edx,DWORD PTR ds:0xc0024170
c000c7b2:	43                   	inc    ebx
c000c7b3:	42                   	inc    edx
c000c7b4:	83 c4 10             	add    esp,0x10
c000c7b7:	89 15 70 41 02 c0    	mov    DWORD PTR ds:0xc0024170,edx
c000c7bd:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c7c3:	75 dd                	jne    c000c7a2 <Phys::physicalMemorySetup(unsigned int)+0x1a1>
c000c7c5:	83 c4 3c             	add    esp,0x3c
c000c7c8:	5b                   	pop    ebx
c000c7c9:	5e                   	pop    esi
c000c7ca:	5f                   	pop    edi
c000c7cb:	5d                   	pop    ebp
c000c7cc:	c3                   	ret    
c000c7cd:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c000c7d1:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c000c7d9:	56                   	push   esi
c000c7da:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000c7de:	56                   	push   esi
c000c7df:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000c7e3:	57                   	push   edi
c000c7e4:	68 60 0d 02 c0       	push   0xc0020d60
c000c7e9:	e8 6b 29 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000c7ee:	5d                   	pop    ebp
c000c7ef:	58                   	pop    eax
c000c7f0:	56                   	push   esi
c000c7f1:	57                   	push   edi
c000c7f2:	e8 d2 fd ff ff       	call   c000c5c9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c7f7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c7fb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c7ff:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c803:	8b 15 70 41 02 c0    	mov    edx,DWORD PTR ds:0xc0024170
c000c809:	83 c4 0c             	add    esp,0xc
c000c80c:	01 d0                	add    eax,edx
c000c80e:	a3 70 41 02 c0       	mov    ds:0xc0024170,eax
c000c813:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c81a:	52                   	push   edx
c000c81b:	50                   	push   eax
c000c81c:	68 1e 0d 02 c0       	push   0xc0020d1e
c000c821:	e8 33 29 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000c826:	83 c4 10             	add    esp,0x10
c000c829:	e9 92 fe ff ff       	jmp    c000c6c0 <Phys::physicalMemorySetup(unsigned int)+0xbf>

c000c82e <Pipe::isAtty()>:
c000c82e:	31 c0                	xor    eax,eax
c000c830:	c3                   	ret    
c000c831:	90                   	nop

c000c832 <Pipe::~Pipe()>:
c000c832:	83 ec 0c             	sub    esp,0xc
c000c835:	ba cc 0d 02 c0       	mov    edx,0xc0020dcc
c000c83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c83e:	89 10                	mov    DWORD PTR [eax],edx
c000c840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c844:	83 ec 0c             	sub    esp,0xc
c000c847:	50                   	push   eax
c000c848:	e8 5d 16 00 00       	call   c000deaa <UnixFile::~UnixFile()>
c000c84d:	83 c4 10             	add    esp,0x10
c000c850:	90                   	nop
c000c851:	83 c4 0c             	add    esp,0xc
c000c854:	c3                   	ret    
c000c855:	90                   	nop

c000c856 <Pipe::~Pipe()>:
c000c856:	83 ec 0c             	sub    esp,0xc
c000c859:	83 ec 0c             	sub    esp,0xc
c000c85c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c860:	e8 cd ff ff ff       	call   c000c832 <Pipe::~Pipe()>
c000c865:	83 c4 10             	add    esp,0x10
c000c868:	83 ec 08             	sub    esp,0x8
c000c86b:	6a 20                	push   0x20
c000c86d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c871:	e8 bd 27 00 00       	call   c000f033 <operator delete(void*, unsigned long)>
c000c876:	83 c4 10             	add    esp,0x10
c000c879:	83 c4 0c             	add    esp,0xc
c000c87c:	c3                   	ret    
c000c87d:	90                   	nop

c000c87e <Pipe::read(unsigned long long, void*, int*)>:
c000c87e:	55                   	push   ebp
c000c87f:	57                   	push   edi
c000c880:	56                   	push   esi
c000c881:	53                   	push   ebx
c000c882:	83 ec 1c             	sub    esp,0x1c
c000c885:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c889:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c88d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c891:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c894:	89 c8                	mov    eax,ecx
c000c896:	99                   	cdq    
c000c897:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c89b:	74 19                	je     c000c8b6 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c89d:	39 f9                	cmp    ecx,edi
c000c89f:	89 d1                	mov    ecx,edx
c000c8a1:	19 f1                	sbb    ecx,esi
c000c8a3:	73 11                	jae    c000c8b6 <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c8a5:	e8 4b bb 00 00       	call   c00183f5 <lockScheduler()>
c000c8aa:	e8 8f be 00 00       	call   c001873e <schedule()>
c000c8af:	e8 43 bb 00 00       	call   c00183f7 <unlockScheduler()>
c000c8b4:	eb db                	jmp    c000c891 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c8b6:	39 f8                	cmp    eax,edi
c000c8b8:	89 d1                	mov    ecx,edx
c000c8ba:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c8be:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c8c2:	19 f1                	sbb    ecx,esi
c000c8c4:	73 08                	jae    c000c8ce <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c8c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ce:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c8d1:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c8d4:	29 c6                	sub    esi,eax
c000c8d6:	89 f1                	mov    ecx,esi
c000c8d8:	c1 f9 1f             	sar    ecx,0x1f
c000c8db:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c8df:	89 ca                	mov    edx,ecx
c000c8e1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c8e5:	19 d1                	sbb    ecx,edx
c000c8e7:	73 04                	jae    c000c8ed <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c8e9:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c8ed:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c8f1:	89 fd                	mov    ebp,edi
c000c8f3:	29 f5                	sub    ebp,esi
c000c8f5:	85 f6                	test   esi,esi
c000c8f7:	74 12                	je     c000c90b <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c8f9:	52                   	push   edx
c000c8fa:	56                   	push   esi
c000c8fb:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c8fe:	50                   	push   eax
c000c8ff:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c903:	e8 ca 3c ff ff       	call   c00005d2 <memcpy>
c000c908:	83 c4 10             	add    esp,0x10
c000c90b:	85 ed                	test   ebp,ebp
c000c90d:	74 12                	je     c000c921 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c90f:	50                   	push   eax
c000c910:	55                   	push   ebp
c000c911:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c914:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c918:	56                   	push   esi
c000c919:	e8 b4 3c ff ff       	call   c00005d2 <memcpy>
c000c91e:	83 c4 10             	add    esp,0x10
c000c921:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c924:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c927:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c92a:	99                   	cdq    
c000c92b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c92f:	89 f7                	mov    edi,esi
c000c931:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c935:	c1 ff 1f             	sar    edi,0x1f
c000c938:	57                   	push   edi
c000c939:	56                   	push   esi
c000c93a:	52                   	push   edx
c000c93b:	50                   	push   eax
c000c93c:	e8 6b 26 01 00       	call   c001efac <__umoddi3>
c000c941:	83 c4 10             	add    esp,0x10
c000c944:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c947:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000c94c:	75 10                	jne    c000c95e <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000c94e:	83 ec 0c             	sub    esp,0xc
c000c951:	68 89 0d 02 c0       	push   0xc0020d89
c000c956:	e8 91 8a 00 00       	call   c00153ec <Krnl::panic(char const*)>
c000c95b:	83 c4 10             	add    esp,0x10
c000c95e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c962:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c966:	89 10                	mov    DWORD PTR [eax],edx
c000c968:	83 c4 1c             	add    esp,0x1c
c000c96b:	31 c0                	xor    eax,eax
c000c96d:	5b                   	pop    ebx
c000c96e:	5e                   	pop    esi
c000c96f:	5f                   	pop    edi
c000c970:	5d                   	pop    ebp
c000c971:	c3                   	ret    

c000c972 <Pipe::write(unsigned long long, void*, int*)>:
c000c972:	55                   	push   ebp
c000c973:	57                   	push   edi
c000c974:	56                   	push   esi
c000c975:	53                   	push   ebx
c000c976:	83 ec 1c             	sub    esp,0x1c
c000c979:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000c97d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c981:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000c985:	89 04 24             	mov    DWORD PTR [esp],eax
c000c988:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000c98b:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000c98e:	89 de                	mov    esi,ebx
c000c990:	89 df                	mov    edi,ebx
c000c992:	c1 ff 1f             	sar    edi,0x1f
c000c995:	01 c6                	add    esi,eax
c000c997:	89 c8                	mov    eax,ecx
c000c999:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000c99d:	11 d7                	adc    edi,edx
c000c99f:	99                   	cdq    
c000c9a0:	89 d0                	mov    eax,edx
c000c9a2:	39 f1                	cmp    ecx,esi
c000c9a4:	19 f8                	sbb    eax,edi
c000c9a6:	b8 01 00 00 00       	mov    eax,0x1
c000c9ab:	0f 82 80 00 00 00    	jb     c000ca31 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000c9b1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000c9b4:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000c9b7:	01 d8                	add    eax,ebx
c000c9b9:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c9bd:	99                   	cdq    
c000c9be:	f7 f9                	idiv   ecx
c000c9c0:	29 d1                	sub    ecx,edx
c000c9c2:	89 d7                	mov    edi,edx
c000c9c4:	89 c8                	mov    eax,ecx
c000c9c6:	99                   	cdq    
c000c9c7:	39 ce                	cmp    esi,ecx
c000c9c9:	19 d3                	sbb    ebx,edx
c000c9cb:	bb 00 00 00 00       	mov    ebx,0x0
c000c9d0:	72 04                	jb     c000c9d6 <Pipe::write(unsigned long long, void*, int*)+0x64>
c000c9d2:	89 f3                	mov    ebx,esi
c000c9d4:	29 cb                	sub    ebx,ecx
c000c9d6:	89 f1                	mov    ecx,esi
c000c9d8:	29 d9                	sub    ecx,ebx
c000c9da:	74 1a                	je     c000c9f6 <Pipe::write(unsigned long long, void*, int*)+0x84>
c000c9dc:	52                   	push   edx
c000c9dd:	51                   	push   ecx
c000c9de:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c9e2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c9e6:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000c9e9:	57                   	push   edi
c000c9ea:	e8 e3 3b ff ff       	call   c00005d2 <memcpy>
c000c9ef:	83 c4 10             	add    esp,0x10
c000c9f2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c9f6:	85 db                	test   ebx,ebx
c000c9f8:	74 12                	je     c000ca0c <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000c9fa:	50                   	push   eax
c000c9fb:	53                   	push   ebx
c000c9fc:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000ca00:	51                   	push   ecx
c000ca01:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000ca04:	e8 c9 3b ff ff       	call   c00005d2 <memcpy>
c000ca09:	83 c4 10             	add    esp,0x10
c000ca0c:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000ca0f:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ca14:	75 10                	jne    c000ca26 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000ca16:	83 ec 0c             	sub    esp,0xc
c000ca19:	68 a5 0d 02 c0       	push   0xc0020da5
c000ca1e:	e8 c9 89 00 00       	call   c00153ec <Krnl::panic(char const*)>
c000ca23:	83 c4 10             	add    esp,0x10
c000ca26:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca2a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000ca2d:	89 38                	mov    DWORD PTR [eax],edi
c000ca2f:	31 c0                	xor    eax,eax
c000ca31:	83 c4 1c             	add    esp,0x1c
c000ca34:	5b                   	pop    ebx
c000ca35:	5e                   	pop    esi
c000ca36:	5f                   	pop    edi
c000ca37:	5d                   	pop    ebp
c000ca38:	c3                   	ret    
c000ca39:	90                   	nop

c000ca3a <Pipe::Pipe(int)>:
c000ca3a:	83 ec 0c             	sub    esp,0xc
c000ca3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca41:	83 ec 08             	sub    esp,0x8
c000ca44:	6a 00                	push   0x0
c000ca46:	50                   	push   eax
c000ca47:	e8 bc 12 00 00       	call   c000dd08 <UnixFile::UnixFile(int)>
c000ca4c:	83 c4 10             	add    esp,0x10
c000ca4f:	ba cc 0d 02 c0       	mov    edx,0xc0020dcc
c000ca54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca58:	89 10                	mov    DWORD PTR [eax],edx
c000ca5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca5e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ca62:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000ca65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca69:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ca70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca74:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ca7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca7f:	83 ec 0c             	sub    esp,0xc
c000ca82:	50                   	push   eax
c000ca83:	e8 9f f4 ff ff       	call   c000bf27 <malloc>
c000ca88:	83 c4 10             	add    esp,0x10
c000ca8b:	89 c2                	mov    edx,eax
c000ca8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca91:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ca94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca98:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ca9c:	90                   	nop
c000ca9d:	83 c4 0c             	add    esp,0xc
c000caa0:	c3                   	ret    
c000caa1:	90                   	nop

c000caa2 <VgaText::isAtty()>:
c000caa2:	b0 01                	mov    al,0x1
c000caa4:	c3                   	ret    
c000caa5:	90                   	nop

c000caa6 <VgaText::~VgaText()>:
c000caa6:	83 ec 0c             	sub    esp,0xc
c000caa9:	ba 88 0e 02 c0       	mov    edx,0xc0020e88
c000caae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cab2:	89 10                	mov    DWORD PTR [eax],edx
c000cab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cab8:	83 ec 0c             	sub    esp,0xc
c000cabb:	50                   	push   eax
c000cabc:	e8 e9 13 00 00       	call   c000deaa <UnixFile::~UnixFile()>
c000cac1:	83 c4 10             	add    esp,0x10
c000cac4:	90                   	nop
c000cac5:	83 c4 0c             	add    esp,0xc
c000cac8:	c3                   	ret    
c000cac9:	90                   	nop

c000caca <VgaText::~VgaText()>:
c000caca:	83 ec 0c             	sub    esp,0xc
c000cacd:	83 ec 0c             	sub    esp,0xc
c000cad0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cad4:	e8 cd ff ff ff       	call   c000caa6 <VgaText::~VgaText()>
c000cad9:	83 c4 10             	add    esp,0x10
c000cadc:	83 ec 08             	sub    esp,0x8
c000cadf:	68 60 12 00 00       	push   0x1260
c000cae4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cae8:	e8 46 25 00 00       	call   c000f033 <operator delete(void*, unsigned long)>
c000caed:	83 c4 10             	add    esp,0x10
c000caf0:	83 c4 0c             	add    esp,0xc
c000caf3:	c3                   	ret    

c000caf4 <VgaText::read(unsigned long long, void*, int*)>:
c000caf4:	83 ec 10             	sub    esp,0x10
c000caf7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cafb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000caff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb03:	e8 cd 52 00 00       	call   c0011dd5 <readKeyboard(VgaText*, char*, unsigned long)>
c000cb08:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cb0c:	89 02                	mov    DWORD PTR [edx],eax
c000cb0e:	31 c0                	xor    eax,eax
c000cb10:	83 c4 1c             	add    esp,0x1c
c000cb13:	c3                   	ret    

c000cb14 <setTerminalScrollLock(bool)>:
c000cb14:	c3                   	ret    

c000cb15 <addToTerminalCycle(VgaText*)>:
c000cb15:	8b 15 e0 41 02 c0    	mov    edx,DWORD PTR ds:0xc00241e0
c000cb1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb1f:	85 d2                	test   edx,edx
c000cb21:	75 0c                	jne    c000cb2f <addToTerminalCycle(VgaText*)+0x1a>
c000cb23:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000cb29:	a3 e0 41 02 c0       	mov    ds:0xc00241e0,eax
c000cb2e:	c3                   	ret    
c000cb2f:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000cb35:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000cb3b:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000cb41:	c3                   	ret    

c000cb42 <installVgaTextImplementation()>:
c000cb42:	83 ec 10             	sub    esp,0x10
c000cb45:	6a 20                	push   0x20
c000cb47:	6a 00                	push   0x0
c000cb49:	68 c0 41 02 c0       	push   0xc00241c0
c000cb4e:	e8 b5 3a ff ff       	call   c0000608 <memset>
c000cb53:	83 c4 1c             	add    esp,0x1c
c000cb56:	c3                   	ret    

c000cb57 <scrollTerminalScrollLock(int)>:
c000cb57:	c3                   	ret    

c000cb58 <VgaText::load()>:
c000cb58:	53                   	push   ebx
c000cb59:	31 c0                	xor    eax,eax
c000cb5b:	83 ec 58             	sub    esp,0x58
c000cb5e:	89 e2                	mov    edx,esp
c000cb60:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000cb64:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000cb68:	40                   	inc    eax
c000cb69:	83 f8 50             	cmp    eax,0x50
c000cb6c:	75 f6                	jne    c000cb64 <VgaText::load()+0xc>
c000cb6e:	31 c0                	xor    eax,eax
c000cb70:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000cb77:	84 c9                	test   cl,cl
c000cb79:	74 06                	je     c000cb81 <VgaText::load()+0x29>
c000cb7b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cb7e:	40                   	inc    eax
c000cb7f:	eb ef                	jmp    c000cb70 <VgaText::load()+0x18>
c000cb81:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000cb87:	85 c0                	test   eax,eax
c000cb89:	74 09                	je     c000cb94 <VgaText::load()+0x3c>
c000cb8b:	51                   	push   ecx
c000cb8c:	51                   	push   ecx
c000cb8d:	52                   	push   edx
c000cb8e:	53                   	push   ebx
c000cb8f:	ff d0                	call   eax
c000cb91:	83 c4 10             	add    esp,0x10
c000cb94:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000cb9a:	85 c0                	test   eax,eax
c000cb9c:	74 09                	je     c000cba7 <VgaText::load()+0x4f>
c000cb9e:	83 ec 0c             	sub    esp,0xc
c000cba1:	53                   	push   ebx
c000cba2:	ff d0                	call   eax
c000cba4:	83 c4 10             	add    esp,0x10
c000cba7:	83 c4 58             	add    esp,0x58
c000cbaa:	5b                   	pop    ebx
c000cbab:	c3                   	ret    

c000cbac <VgaText::updateCursor()>:
c000cbac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbb0:	39 05 e4 41 02 c0    	cmp    DWORD PTR ds:0xc00241e4,eax
c000cbb6:	75 0c                	jne    c000cbc4 <VgaText::updateCursor()+0x18>
c000cbb8:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000cbbe:	85 c0                	test   eax,eax
c000cbc0:	74 02                	je     c000cbc4 <VgaText::updateCursor()+0x18>
c000cbc2:	ff e0                	jmp    eax
c000cbc4:	c3                   	ret    
c000cbc5:	90                   	nop

c000cbc6 <VgaText::showCursor(bool)>:
c000cbc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cbce:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000cbd4:	c3                   	ret    
c000cbd5:	90                   	nop

c000cbd6 <VgaText::disableBlink(bool)>:
c000cbd6:	56                   	push   esi
c000cbd7:	53                   	push   ebx
c000cbd8:	51                   	push   ecx
c000cbd9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cbdd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cbe1:	39 1d e4 41 02 c0    	cmp    DWORD PTR ds:0xc00241e4,ebx
c000cbe7:	75 18                	jne    c000cc01 <VgaText::disableBlink(bool)+0x2b>
c000cbe9:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000cbef:	85 c0                	test   eax,eax
c000cbf1:	74 0e                	je     c000cc01 <VgaText::disableBlink(bool)+0x2b>
c000cbf3:	89 f1                	mov    ecx,esi
c000cbf5:	52                   	push   edx
c000cbf6:	52                   	push   edx
c000cbf7:	0f b6 d1             	movzx  edx,cl
c000cbfa:	52                   	push   edx
c000cbfb:	53                   	push   ebx
c000cbfc:	ff d0                	call   eax
c000cbfe:	83 c4 10             	add    esp,0x10
c000cc01:	89 f0                	mov    eax,esi
c000cc03:	83 f0 01             	xor    eax,0x1
c000cc06:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000cc0c:	58                   	pop    eax
c000cc0d:	5b                   	pop    ebx
c000cc0e:	5e                   	pop    esi
c000cc0f:	c3                   	ret    

c000cc10 <VgaText::doANSI_SGR(int)>:
c000cc10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc18:	85 d2                	test   edx,edx
c000cc1a:	75 14                	jne    c000cc30 <VgaText::doANSI_SGR(int)+0x20>
c000cc1c:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000cc22:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cc28:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000cc2e:	eb 65                	jmp    c000cc95 <VgaText::doANSI_SGR(int)+0x85>
c000cc30:	83 fa 07             	cmp    edx,0x7
c000cc33:	75 14                	jne    c000cc49 <VgaText::doANSI_SGR(int)+0x39>
c000cc35:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000cc3b:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000cc41:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000cc47:	eb 4c                	jmp    c000cc95 <VgaText::doANSI_SGR(int)+0x85>
c000cc49:	83 fa 1b             	cmp    edx,0x1b
c000cc4c:	74 ce                	je     c000cc1c <VgaText::doANSI_SGR(int)+0xc>
c000cc4e:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000cc51:	83 f9 07             	cmp    ecx,0x7
c000cc54:	77 09                	ja     c000cc5f <VgaText::doANSI_SGR(int)+0x4f>
c000cc56:	8b 14 8d 80 35 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdca80]
c000cc5d:	eb 20                	jmp    c000cc7f <VgaText::doANSI_SGR(int)+0x6f>
c000cc5f:	8d 4a d8             	lea    ecx,[edx-0x28]
c000cc62:	83 f9 07             	cmp    ecx,0x7
c000cc65:	77 09                	ja     c000cc70 <VgaText::doANSI_SGR(int)+0x60>
c000cc67:	8b 14 8d 80 35 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdca80]
c000cc6e:	eb 25                	jmp    c000cc95 <VgaText::doANSI_SGR(int)+0x85>
c000cc70:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000cc73:	83 f9 07             	cmp    ecx,0x7
c000cc76:	77 0e                	ja     c000cc86 <VgaText::doANSI_SGR(int)+0x76>
c000cc78:	8b 14 95 38 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcbc8]
c000cc7f:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cc85:	c3                   	ret    
c000cc86:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000cc89:	83 f9 07             	cmp    ecx,0x7
c000cc8c:	77 0d                	ja     c000cc9b <VgaText::doANSI_SGR(int)+0x8b>
c000cc8e:	8b 14 95 10 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcbf0]
c000cc95:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cc9b:	c3                   	ret    

c000cc9c <VgaText::setDefaultBgColour(VgaColour)>:
c000cc9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cca0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cca4:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000ccaa:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000ccb0:	c3                   	ret    
c000ccb1:	90                   	nop

c000ccb2 <VgaText::setDefaultFgColour(VgaColour)>:
c000ccb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccb6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ccba:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000ccc0:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000ccc6:	c3                   	ret    
c000ccc7:	90                   	nop

c000ccc8 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000ccc8:	53                   	push   ebx
c000ccc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cccd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ccd1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ccd5:	51                   	push   ecx
c000ccd6:	e8 c1 ff ff ff       	call   c000cc9c <VgaText::setDefaultBgColour(VgaColour)>
c000ccdb:	58                   	pop    eax
c000ccdc:	5a                   	pop    edx
c000ccdd:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cce1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000cce5:	5b                   	pop    ebx
c000cce6:	eb ca                	jmp    c000ccb2 <VgaText::setDefaultFgColour(VgaColour)>

c000cce8 <VgaText::combineColours(unsigned char, unsigned char)>:
c000cce8:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000cced:	c1 e2 04             	shl    edx,0x4
c000ccf0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000ccf4:	83 e0 0f             	and    eax,0xf
c000ccf7:	09 d0                	or     eax,edx
c000ccf9:	c3                   	ret    

c000ccfa <VgaText::scrollScreen()>:
c000ccfa:	57                   	push   edi
c000ccfb:	56                   	push   esi
c000ccfc:	be 01 00 00 00       	mov    esi,0x1
c000cd01:	53                   	push   ebx
c000cd02:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cd06:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000cd0c:	31 ff                	xor    edi,edi
c000cd0e:	01 d9                	add    ecx,ebx
c000cd10:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000cd13:	83 fe 17             	cmp    esi,0x17
c000cd16:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000cd1c:	75 28                	jne    c000cd46 <VgaText::scrollScreen()+0x4c>
c000cd1e:	f7 c7 01 00 00 00    	test   edi,0x1
c000cd24:	74 1c                	je     c000cd42 <VgaText::scrollScreen()+0x48>
c000cd26:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000cd2d:	50                   	push   eax
c000cd2e:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000cd35:	50                   	push   eax
c000cd36:	e8 ad ff ff ff       	call   c000cce8 <VgaText::combineColours(unsigned char, unsigned char)>
c000cd3b:	5a                   	pop    edx
c000cd3c:	5a                   	pop    edx
c000cd3d:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000cd40:	eb 04                	jmp    c000cd46 <VgaText::scrollScreen()+0x4c>
c000cd42:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000cd46:	47                   	inc    edi
c000cd47:	41                   	inc    ecx
c000cd48:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000cd4e:	75 c0                	jne    c000cd10 <VgaText::scrollScreen()+0x16>
c000cd50:	46                   	inc    esi
c000cd51:	83 fe 18             	cmp    esi,0x18
c000cd54:	75 b0                	jne    c000cd06 <VgaText::scrollScreen()+0xc>
c000cd56:	39 1d e4 41 02 c0    	cmp    DWORD PTR ds:0xc00241e4,ebx
c000cd5c:	75 24                	jne    c000cd82 <VgaText::scrollScreen()+0x88>
c000cd5e:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000cd65:	74 08                	je     c000cd6f <VgaText::scrollScreen()+0x75>
c000cd67:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000cd6d:	eb 13                	jmp    c000cd82 <VgaText::scrollScreen()+0x88>
c000cd6f:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000cd75:	85 c0                	test   eax,eax
c000cd77:	74 09                	je     c000cd82 <VgaText::scrollScreen()+0x88>
c000cd79:	83 ec 0c             	sub    esp,0xc
c000cd7c:	53                   	push   ebx
c000cd7d:	ff d0                	call   eax
c000cd7f:	83 c4 10             	add    esp,0x10
c000cd82:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cd86:	5b                   	pop    ebx
c000cd87:	5e                   	pop    esi
c000cd88:	5f                   	pop    edi
c000cd89:	e9 1e fe ff ff       	jmp    c000cbac <VgaText::updateCursor()>

c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>:
c000cd8e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000cd93:	c1 e0 08             	shl    eax,0x8
c000cd96:	89 c2                	mov    edx,eax
c000cd98:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000cd9d:	09 d0                	or     eax,edx
c000cd9f:	c3                   	ret    

c000cda0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000cda0:	53                   	push   ebx
c000cda1:	83 ec 08             	sub    esp,0x8
c000cda4:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000cda9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cdad:	50                   	push   eax
c000cdae:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000cdb3:	50                   	push   eax
c000cdb4:	e8 2f ff ff ff       	call   c000cce8 <VgaText::combineColours(unsigned char, unsigned char)>
c000cdb9:	5a                   	pop    edx
c000cdba:	5b                   	pop    ebx
c000cdbb:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000cdc0:	0f b6 c0             	movzx  eax,al
c000cdc3:	50                   	push   eax
c000cdc4:	53                   	push   ebx
c000cdc5:	e8 c4 ff ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000cdca:	5a                   	pop    edx
c000cdcb:	5a                   	pop    edx
c000cdcc:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000cdd2:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000cdd6:	0f b7 d2             	movzx  edx,dx
c000cdd9:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000cdde:	39 0d e4 41 02 c0    	cmp    DWORD PTR ds:0xc00241e4,ecx
c000cde4:	75 14                	jne    c000cdfa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000cde6:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000cdec:	85 c0                	test   eax,eax
c000cdee:	74 0a                	je     c000cdfa <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000cdf0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000cdf4:	83 c4 08             	add    esp,0x8
c000cdf7:	5b                   	pop    ebx
c000cdf8:	ff e0                	jmp    eax
c000cdfa:	83 c4 08             	add    esp,0x8
c000cdfd:	5b                   	pop    ebx
c000cdfe:	c3                   	ret    
c000cdff:	90                   	nop

c000ce00 <VgaText::getCursorX()>:
c000ce00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce04:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000ce0a:	c3                   	ret    
c000ce0b:	90                   	nop

c000ce0c <VgaText::getCursorY()>:
c000ce0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce10:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000ce16:	c3                   	ret    
c000ce17:	90                   	nop

c000ce18 <VgaText::setCursor(int, int)>:
c000ce18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce1c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce20:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000ce26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ce2a:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000ce30:	e9 77 fd ff ff       	jmp    c000cbac <VgaText::updateCursor()>
c000ce35:	90                   	nop

c000ce36 <VgaText::setCursorX(int)>:
c000ce36:	83 ec 10             	sub    esp,0x10
c000ce39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ce3d:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000ce43:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce47:	50                   	push   eax
c000ce48:	e8 cb ff ff ff       	call   c000ce18 <VgaText::setCursor(int, int)>
c000ce4d:	83 c4 1c             	add    esp,0x1c
c000ce50:	c3                   	ret    
c000ce51:	90                   	nop

c000ce52 <VgaText::setCursorY(int)>:
c000ce52:	83 ec 10             	sub    esp,0x10
c000ce55:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ce59:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ce5d:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000ce63:	50                   	push   eax
c000ce64:	e8 af ff ff ff       	call   c000ce18 <VgaText::setCursor(int, int)>
c000ce69:	83 c4 1c             	add    esp,0x1c
c000ce6c:	c3                   	ret    
c000ce6d:	90                   	nop

c000ce6e <VgaText::incrementCursor(bool)>:
c000ce6e:	56                   	push   esi
c000ce6f:	53                   	push   ebx
c000ce70:	51                   	push   ecx
c000ce71:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ce75:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ce79:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000ce7f:	40                   	inc    eax
c000ce80:	83 f8 50             	cmp    eax,0x50
c000ce83:	74 08                	je     c000ce8d <VgaText::incrementCursor(bool)+0x1f>
c000ce85:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000ce8b:	eb 33                	jmp    c000cec0 <VgaText::incrementCursor(bool)+0x52>
c000ce8d:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000ce93:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000ce9d:	8d 50 01             	lea    edx,[eax+0x1]
c000cea0:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cea6:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000ceac:	75 12                	jne    c000cec0 <VgaText::incrementCursor(bool)+0x52>
c000ceae:	83 ec 0c             	sub    esp,0xc
c000ceb1:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000ceb7:	53                   	push   ebx
c000ceb8:	e8 3d fe ff ff       	call   c000ccfa <VgaText::scrollScreen()>
c000cebd:	83 c4 10             	add    esp,0x10
c000cec0:	89 f0                	mov    eax,esi
c000cec2:	84 c0                	test   al,al
c000cec4:	74 0c                	je     c000ced2 <VgaText::incrementCursor(bool)+0x64>
c000cec6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ceca:	5a                   	pop    edx
c000cecb:	5b                   	pop    ebx
c000cecc:	5e                   	pop    esi
c000cecd:	e9 da fc ff ff       	jmp    c000cbac <VgaText::updateCursor()>
c000ced2:	58                   	pop    eax
c000ced3:	5b                   	pop    ebx
c000ced4:	5e                   	pop    esi
c000ced5:	c3                   	ret    

c000ced6 <VgaText::updateRAMUsageDisplay(int)>:
c000ced6:	53                   	push   ebx
c000ced7:	bb 0a 00 00 00       	mov    ebx,0xa
c000cedc:	6a 0f                	push   0xf
c000cede:	6a 00                	push   0x0
c000cee0:	e8 03 fe ff ff       	call   c000cce8 <VgaText::combineColours(unsigned char, unsigned char)>
c000cee5:	5a                   	pop    edx
c000cee6:	59                   	pop    ecx
c000cee7:	0f b6 c8             	movzx  ecx,al
c000ceea:	51                   	push   ecx
c000ceeb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ceef:	99                   	cdq    
c000cef0:	f7 fb                	idiv   ebx
c000cef2:	83 c0 30             	add    eax,0x30
c000cef5:	89 d3                	mov    ebx,edx
c000cef7:	0f be c0             	movsx  eax,al
c000cefa:	50                   	push   eax
c000cefb:	e8 8e fe ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000cf00:	5a                   	pop    edx
c000cf01:	83 c3 30             	add    ebx,0x30
c000cf04:	5a                   	pop    edx
c000cf05:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cf0b:	0f b6 db             	movzx  ebx,bl
c000cf0e:	51                   	push   ecx
c000cf0f:	53                   	push   ebx
c000cf10:	e8 79 fe ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000cf15:	5b                   	pop    ebx
c000cf16:	5a                   	pop    edx
c000cf17:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cf1d:	51                   	push   ecx
c000cf1e:	6a 25                	push   0x25
c000cf20:	e8 69 fe ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000cf25:	59                   	pop    ecx
c000cf26:	5b                   	pop    ebx
c000cf27:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cf2d:	5b                   	pop    ebx
c000cf2e:	c3                   	ret    
c000cf2f:	90                   	nop

c000cf30 <VgaText::updateDiskUsage()>:
c000cf30:	55                   	push   ebp
c000cf31:	bd 10 27 00 00       	mov    ebp,0x2710
c000cf36:	57                   	push   edi
c000cf37:	56                   	push   esi
c000cf38:	53                   	push   ebx
c000cf39:	6a 0f                	push   0xf
c000cf3b:	6a 00                	push   0x0
c000cf3d:	e8 a6 fd ff ff       	call   c000cce8 <VgaText::combineColours(unsigned char, unsigned char)>
c000cf42:	0f b6 d8             	movzx  ebx,al
c000cf45:	a1 c4 5e 02 c0       	mov    eax,ds:0xc0025ec4
c000cf4a:	5a                   	pop    edx
c000cf4b:	99                   	cdq    
c000cf4c:	f7 fd                	idiv   ebp
c000cf4e:	59                   	pop    ecx
c000cf4f:	b9 0a 00 00 00       	mov    ecx,0xa
c000cf54:	99                   	cdq    
c000cf55:	f7 f9                	idiv   ecx
c000cf57:	53                   	push   ebx
c000cf58:	8d 42 30             	lea    eax,[edx+0x30]
c000cf5b:	0f b6 c0             	movzx  eax,al
c000cf5e:	50                   	push   eax
c000cf5f:	e8 2a fe ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000cf64:	5e                   	pop    esi
c000cf65:	5f                   	pop    edi
c000cf66:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000cf6c:	a1 c4 5e 02 c0       	mov    eax,ds:0xc0025ec4
c000cf71:	bf e8 03 00 00       	mov    edi,0x3e8
c000cf76:	99                   	cdq    
c000cf77:	f7 ff                	idiv   edi
c000cf79:	99                   	cdq    
c000cf7a:	f7 f9                	idiv   ecx
c000cf7c:	53                   	push   ebx
c000cf7d:	8d 42 30             	lea    eax,[edx+0x30]
c000cf80:	0f b6 c0             	movzx  eax,al
c000cf83:	50                   	push   eax
c000cf84:	e8 05 fe ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000cf89:	5a                   	pop    edx
c000cf8a:	5e                   	pop    esi
c000cf8b:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000cf91:	a1 c4 5e 02 c0       	mov    eax,ds:0xc0025ec4
c000cf96:	be 64 00 00 00       	mov    esi,0x64
c000cf9b:	99                   	cdq    
c000cf9c:	f7 fe                	idiv   esi
c000cf9e:	99                   	cdq    
c000cf9f:	f7 f9                	idiv   ecx
c000cfa1:	53                   	push   ebx
c000cfa2:	8d 42 30             	lea    eax,[edx+0x30]
c000cfa5:	0f b6 c0             	movzx  eax,al
c000cfa8:	50                   	push   eax
c000cfa9:	e8 e0 fd ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000cfae:	5a                   	pop    edx
c000cfaf:	5a                   	pop    edx
c000cfb0:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000cfb6:	a1 c4 5e 02 c0       	mov    eax,ds:0xc0025ec4
c000cfbb:	53                   	push   ebx
c000cfbc:	99                   	cdq    
c000cfbd:	f7 f9                	idiv   ecx
c000cfbf:	99                   	cdq    
c000cfc0:	f7 f9                	idiv   ecx
c000cfc2:	8d 42 30             	lea    eax,[edx+0x30]
c000cfc5:	0f b6 c0             	movzx  eax,al
c000cfc8:	50                   	push   eax
c000cfc9:	e8 c0 fd ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000cfce:	5a                   	pop    edx
c000cfcf:	5a                   	pop    edx
c000cfd0:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000cfd6:	a1 c4 5e 02 c0       	mov    eax,ds:0xc0025ec4
c000cfdb:	53                   	push   ebx
c000cfdc:	99                   	cdq    
c000cfdd:	f7 f9                	idiv   ecx
c000cfdf:	8d 42 30             	lea    eax,[edx+0x30]
c000cfe2:	0f b6 c0             	movzx  eax,al
c000cfe5:	50                   	push   eax
c000cfe6:	e8 a3 fd ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000cfeb:	5a                   	pop    edx
c000cfec:	5a                   	pop    edx
c000cfed:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000cff3:	a1 c0 5e 02 c0       	mov    eax,ds:0xc0025ec0
c000cff8:	53                   	push   ebx
c000cff9:	99                   	cdq    
c000cffa:	f7 fd                	idiv   ebp
c000cffc:	99                   	cdq    
c000cffd:	f7 f9                	idiv   ecx
c000cfff:	8d 42 30             	lea    eax,[edx+0x30]
c000d002:	0f b6 c0             	movzx  eax,al
c000d005:	50                   	push   eax
c000d006:	e8 83 fd ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000d00b:	5d                   	pop    ebp
c000d00c:	5a                   	pop    edx
c000d00d:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000d013:	a1 c0 5e 02 c0       	mov    eax,ds:0xc0025ec0
c000d018:	53                   	push   ebx
c000d019:	99                   	cdq    
c000d01a:	f7 ff                	idiv   edi
c000d01c:	99                   	cdq    
c000d01d:	f7 f9                	idiv   ecx
c000d01f:	8d 42 30             	lea    eax,[edx+0x30]
c000d022:	0f b6 c0             	movzx  eax,al
c000d025:	50                   	push   eax
c000d026:	e8 63 fd ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000d02b:	5f                   	pop    edi
c000d02c:	5d                   	pop    ebp
c000d02d:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000d033:	53                   	push   ebx
c000d034:	a1 c0 5e 02 c0       	mov    eax,ds:0xc0025ec0
c000d039:	99                   	cdq    
c000d03a:	f7 fe                	idiv   esi
c000d03c:	99                   	cdq    
c000d03d:	f7 f9                	idiv   ecx
c000d03f:	8d 42 30             	lea    eax,[edx+0x30]
c000d042:	0f b6 c0             	movzx  eax,al
c000d045:	50                   	push   eax
c000d046:	e8 43 fd ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000d04b:	5a                   	pop    edx
c000d04c:	5e                   	pop    esi
c000d04d:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000d053:	a1 c0 5e 02 c0       	mov    eax,ds:0xc0025ec0
c000d058:	53                   	push   ebx
c000d059:	99                   	cdq    
c000d05a:	f7 f9                	idiv   ecx
c000d05c:	99                   	cdq    
c000d05d:	f7 f9                	idiv   ecx
c000d05f:	8d 42 30             	lea    eax,[edx+0x30]
c000d062:	0f b6 c0             	movzx  eax,al
c000d065:	50                   	push   eax
c000d066:	e8 23 fd ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000d06b:	5f                   	pop    edi
c000d06c:	5d                   	pop    ebp
c000d06d:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000d073:	a1 c0 5e 02 c0       	mov    eax,ds:0xc0025ec0
c000d078:	53                   	push   ebx
c000d079:	99                   	cdq    
c000d07a:	f7 f9                	idiv   ecx
c000d07c:	83 c2 30             	add    edx,0x30
c000d07f:	0f b6 d2             	movzx  edx,dl
c000d082:	52                   	push   edx
c000d083:	e8 06 fd ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000d088:	5a                   	pop    edx
c000d089:	59                   	pop    ecx
c000d08a:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000d090:	5b                   	pop    ebx
c000d091:	5e                   	pop    esi
c000d092:	5f                   	pop    edi
c000d093:	5d                   	pop    ebp
c000d094:	c3                   	ret    
c000d095:	90                   	nop

c000d096 <VgaText::updateTitle()>:
c000d096:	53                   	push   ebx
c000d097:	31 c0                	xor    eax,eax
c000d099:	83 ec 58             	sub    esp,0x58
c000d09c:	89 e1                	mov    ecx,esp
c000d09e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000d0a2:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000d0a6:	40                   	inc    eax
c000d0a7:	83 f8 50             	cmp    eax,0x50
c000d0aa:	75 f6                	jne    c000d0a2 <VgaText::updateTitle()+0xc>
c000d0ac:	31 c0                	xor    eax,eax
c000d0ae:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000d0b5:	84 db                	test   bl,bl
c000d0b7:	74 06                	je     c000d0bf <VgaText::updateTitle()+0x29>
c000d0b9:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000d0bc:	40                   	inc    eax
c000d0bd:	eb ef                	jmp    c000d0ae <VgaText::updateTitle()+0x18>
c000d0bf:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000d0c5:	85 c0                	test   eax,eax
c000d0c7:	74 09                	je     c000d0d2 <VgaText::updateTitle()+0x3c>
c000d0c9:	53                   	push   ebx
c000d0ca:	53                   	push   ebx
c000d0cb:	51                   	push   ecx
c000d0cc:	52                   	push   edx
c000d0cd:	ff d0                	call   eax
c000d0cf:	83 c4 10             	add    esp,0x10
c000d0d2:	e8 59 fe ff ff       	call   c000cf30 <VgaText::updateDiskUsage()>
c000d0d7:	83 c4 58             	add    esp,0x58
c000d0da:	5b                   	pop    ebx
c000d0db:	c3                   	ret    

c000d0dc <VgaText::setTitleTextColour(VgaColour)>:
c000d0dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d0e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0e4:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000d0ea:	eb aa                	jmp    c000d096 <VgaText::updateTitle()>

c000d0ec <VgaText::setTitleColour(VgaColour)>:
c000d0ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d0f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d0f4:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000d0fa:	eb 9a                	jmp    c000d096 <VgaText::updateTitle()>

c000d0fc <VgaText::setTitle(char*)>:
c000d0fc:	53                   	push   ebx
c000d0fd:	83 ec 10             	sub    esp,0x10
c000d100:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d104:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d108:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000d10e:	50                   	push   eax
c000d10f:	e8 93 35 ff ff       	call   c00006a7 <strcpy>
c000d114:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000d118:	83 c4 18             	add    esp,0x18
c000d11b:	5b                   	pop    ebx
c000d11c:	e9 75 ff ff ff       	jmp    c000d096 <VgaText::updateTitle()>
c000d121:	90                   	nop

c000d122 <VgaText::decrementCursor(bool)>:
c000d122:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d126:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d12a:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000d130:	85 c0                	test   eax,eax
c000d132:	74 07                	je     c000d13b <VgaText::decrementCursor(bool)+0x19>
c000d134:	48                   	dec    eax
c000d135:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000d13b:	84 c9                	test   cl,cl
c000d13d:	74 09                	je     c000d148 <VgaText::decrementCursor(bool)+0x26>
c000d13f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d143:	e9 64 fa ff ff       	jmp    c000cbac <VgaText::updateCursor()>
c000d148:	c3                   	ret    
c000d149:	90                   	nop

c000d14a <VgaText::putchar(char, VgaColour, VgaColour)>:
c000d14a:	53                   	push   ebx
c000d14b:	83 ec 08             	sub    esp,0x8
c000d14e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d152:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d156:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d15a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d15e:	3c 07                	cmp    al,0x7
c000d160:	75 2a                	jne    c000d18c <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000d162:	a1 8c 42 02 c0       	mov    eax,ds:0xc002428c
c000d167:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000d16f:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000d177:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000d17f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d183:	83 c4 08             	add    esp,0x8
c000d186:	5b                   	pop    ebx
c000d187:	e9 c0 2d 00 00       	jmp    c000ff4c <Buzzer::beep(int, int, bool)>
c000d18c:	3c 0d                	cmp    al,0xd
c000d18e:	75 0c                	jne    c000d19c <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000d190:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d19a:	eb 3b                	jmp    c000d1d7 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000d19c:	3c 0a                	cmp    al,0xa
c000d19e:	75 40                	jne    c000d1e0 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000d1a0:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000d1a6:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d1b0:	8d 50 01             	lea    edx,[eax+0x1]
c000d1b3:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000d1b9:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000d1bf:	75 12                	jne    c000d1d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000d1c1:	83 ec 0c             	sub    esp,0xc
c000d1c4:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000d1ca:	53                   	push   ebx
c000d1cb:	e8 2a fb ff ff       	call   c000ccfa <VgaText::scrollScreen()>
c000d1d0:	83 c4 10             	add    esp,0x10
c000d1d3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d1d7:	83 c4 08             	add    esp,0x8
c000d1da:	5b                   	pop    ebx
c000d1db:	e9 cc f9 ff ff       	jmp    c000cbac <VgaText::updateCursor()>
c000d1e0:	3c 08                	cmp    al,0x8
c000d1e2:	75 31                	jne    c000d215 <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000d1e4:	50                   	push   eax
c000d1e5:	50                   	push   eax
c000d1e6:	6a 01                	push   0x1
c000d1e8:	53                   	push   ebx
c000d1e9:	e8 34 ff ff ff       	call   c000d122 <VgaText::decrementCursor(bool)>
c000d1ee:	5a                   	pop    edx
c000d1ef:	59                   	pop    ecx
c000d1f0:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d1f6:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d1fc:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d202:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d208:	6a 20                	push   0x20
c000d20a:	53                   	push   ebx
c000d20b:	e8 90 fb ff ff       	call   c000cda0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d210:	83 c4 28             	add    esp,0x28
c000d213:	5b                   	pop    ebx
c000d214:	c3                   	ret    
c000d215:	83 ec 08             	sub    esp,0x8
c000d218:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d21e:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d224:	0f be c0             	movsx  eax,al
c000d227:	51                   	push   ecx
c000d228:	52                   	push   edx
c000d229:	50                   	push   eax
c000d22a:	53                   	push   ebx
c000d22b:	e8 70 fb ff ff       	call   c000cda0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d230:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000d234:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000d23c:	83 c4 28             	add    esp,0x28
c000d23f:	5b                   	pop    ebx
c000d240:	e9 29 fc ff ff       	jmp    c000ce6e <VgaText::incrementCursor(bool)>
c000d245:	90                   	nop

c000d246 <VgaText::isShowingCursor()>:
c000d246:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d24a:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000d250:	c3                   	ret    
c000d251:	90                   	nop

c000d252 <VgaText::isBlinkDisabled()>:
c000d252:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d256:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000d25c:	83 f0 01             	xor    eax,0x1
c000d25f:	c3                   	ret    

c000d260 <VgaText::setCursorHeight(int)>:
c000d260:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d264:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d268:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000d26e:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000d275:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d279:	e9 48 f9 ff ff       	jmp    c000cbc6 <VgaText::showCursor(bool)>

c000d27e <VgaText::getCursorHeight()>:
c000d27e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d282:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000d288:	c3                   	ret    

c000d289 <setActiveTerminal(VgaText*)>:
c000d289:	53                   	push   ebx
c000d28a:	83 ec 08             	sub    esp,0x8
c000d28d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d291:	85 db                	test   ebx,ebx
c000d293:	75 11                	jne    c000d2a6 <setActiveTerminal(VgaText*)+0x1d>
c000d295:	c7 44 24 10 e0 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020de0
c000d29d:	83 c4 08             	add    esp,0x8
c000d2a0:	5b                   	pop    ebx
c000d2a1:	e9 46 81 00 00       	jmp    c00153ec <Krnl::panic(char const*)>
c000d2a6:	50                   	push   eax
c000d2a7:	50                   	push   eax
c000d2a8:	53                   	push   ebx
c000d2a9:	68 ee 0d 02 c0       	push   0xc0020dee
c000d2ae:	e8 a6 1e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000d2b3:	a1 e4 41 02 c0       	mov    eax,ds:0xc00241e4
c000d2b8:	83 c4 10             	add    esp,0x10
c000d2bb:	85 c0                	test   eax,eax
c000d2bd:	74 0c                	je     c000d2cb <setActiveTerminal(VgaText*)+0x42>
c000d2bf:	83 ec 0c             	sub    esp,0xc
c000d2c2:	50                   	push   eax
c000d2c3:	e8 e4 f8 ff ff       	call   c000cbac <VgaText::updateCursor()>
c000d2c8:	83 c4 10             	add    esp,0x10
c000d2cb:	51                   	push   ecx
c000d2cc:	89 1d e4 41 02 c0    	mov    DWORD PTR ds:0xc00241e4,ebx
c000d2d2:	51                   	push   ecx
c000d2d3:	53                   	push   ebx
c000d2d4:	68 06 0e 02 c0       	push   0xc0020e06
c000d2d9:	e8 7b 1e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000d2de:	83 c4 0c             	add    esp,0xc
c000d2e1:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2e7:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2ed:	53                   	push   ebx
c000d2ee:	e8 25 fb ff ff       	call   c000ce18 <VgaText::setCursor(int, int)>
c000d2f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d2f6:	e8 57 ff ff ff       	call   c000d252 <VgaText::isBlinkDisabled()>
c000d2fb:	5a                   	pop    edx
c000d2fc:	59                   	pop    ecx
c000d2fd:	0f b6 c0             	movzx  eax,al
c000d300:	50                   	push   eax
c000d301:	53                   	push   ebx
c000d302:	e8 cf f8 ff ff       	call   c000cbd6 <VgaText::disableBlink(bool)>
c000d307:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d30a:	e8 6f ff ff ff       	call   c000d27e <VgaText::getCursorHeight()>
c000d30f:	5a                   	pop    edx
c000d310:	59                   	pop    ecx
c000d311:	50                   	push   eax
c000d312:	53                   	push   ebx
c000d313:	e8 48 ff ff ff       	call   c000d260 <VgaText::setCursorHeight(int)>
c000d318:	83 c4 10             	add    esp,0x10
c000d31b:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000d322:	75 0a                	jne    c000d32e <setActiveTerminal(VgaText*)+0xa5>
c000d324:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000d32e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d332:	83 c4 08             	add    esp,0x8
c000d335:	5b                   	pop    ebx
c000d336:	e9 1d f8 ff ff       	jmp    c000cb58 <VgaText::load()>

c000d33b <doTerminalCycle()>:
c000d33b:	83 ec 18             	sub    esp,0x18
c000d33e:	a1 e0 41 02 c0       	mov    eax,ds:0xc00241e0
c000d343:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000d349:	50                   	push   eax
c000d34a:	a3 e0 41 02 c0       	mov    ds:0xc00241e0,eax
c000d34f:	e8 35 ff ff ff       	call   c000d289 <setActiveTerminal(VgaText*)>
c000d354:	83 c4 1c             	add    esp,0x1c
c000d357:	c3                   	ret    

c000d358 <VgaText::doUpdate()>:
c000d358:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d35c:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000d362:	85 c0                	test   eax,eax
c000d364:	74 02                	je     c000d368 <VgaText::doUpdate()+0x10>
c000d366:	ff e0                	jmp    eax
c000d368:	c3                   	ret    
c000d369:	90                   	nop

c000d36a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000d36a:	55                   	push   ebp
c000d36b:	57                   	push   edi
c000d36c:	56                   	push   esi
c000d36d:	53                   	push   ebx
c000d36e:	83 ec 1c             	sub    esp,0x1c
c000d371:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d375:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d37a:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000d381:	50                   	push   eax
c000d382:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d387:	50                   	push   eax
c000d388:	e8 5b f9 ff ff       	call   c000cce8 <VgaText::combineColours(unsigned char, unsigned char)>
c000d38d:	59                   	pop    ecx
c000d38e:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000d391:	5b                   	pop    ebx
c000d392:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d39a:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d3a0:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d3a4:	0f b7 db             	movzx  ebx,bx
c000d3a7:	01 db                	add    ebx,ebx
c000d3a9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d3ad:	01 fb                	add    ebx,edi
c000d3af:	31 c0                	xor    eax,eax
c000d3b1:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d3b4:	84 c9                	test   cl,cl
c000d3b6:	0f 84 3d 01 00 00    	je     c000d4f9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18f>
c000d3bc:	80 f9 0d             	cmp    cl,0xd
c000d3bf:	75 0f                	jne    c000d3d0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x66>
c000d3c1:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d3cb:	e9 23 01 00 00       	jmp    c000d4f3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d3d0:	80 f9 0a             	cmp    cl,0xa
c000d3d3:	75 5b                	jne    c000d430 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc6>
c000d3d5:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d3db:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d3e5:	8d 48 01             	lea    ecx,[eax+0x1]
c000d3e8:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d3ee:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d3f4:	75 12                	jne    c000d408 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9e>
c000d3f6:	83 ec 0c             	sub    esp,0xc
c000d3f9:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d3ff:	55                   	push   ebp
c000d400:	e8 f5 f8 ff ff       	call   c000ccfa <VgaText::scrollScreen()>
c000d405:	83 c4 10             	add    esp,0x10
c000d408:	83 ec 0c             	sub    esp,0xc
c000d40b:	55                   	push   ebp
c000d40c:	e8 9b f7 ff ff       	call   c000cbac <VgaText::updateCursor()>
c000d411:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d419:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d41f:	83 c4 10             	add    esp,0x10
c000d422:	0f b7 db             	movzx  ebx,bx
c000d425:	01 db                	add    ebx,ebx
c000d427:	31 c0                	xor    eax,eax
c000d429:	01 fb                	add    ebx,edi
c000d42b:	e9 c3 00 00 00       	jmp    c000d4f3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d430:	80 f9 08             	cmp    cl,0x8
c000d433:	75 4e                	jne    c000d483 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d435:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000d439:	50                   	push   eax
c000d43a:	50                   	push   eax
c000d43b:	6a 01                	push   0x1
c000d43d:	55                   	push   ebp
c000d43e:	e8 df fc ff ff       	call   c000d122 <VgaText::decrementCursor(bool)>
c000d443:	58                   	pop    eax
c000d444:	5a                   	pop    edx
c000d445:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d44b:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d451:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d457:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d45d:	6a 20                	push   0x20
c000d45f:	55                   	push   ebp
c000d460:	e8 3b f9 ff ff       	call   c000cda0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d465:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d46d:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d473:	83 c4 20             	add    esp,0x20
c000d476:	0f b7 db             	movzx  ebx,bx
c000d479:	01 db                	add    ebx,ebx
c000d47b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d47f:	01 fb                	add    ebx,edi
c000d481:	eb 70                	jmp    c000d4f3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d483:	50                   	push   eax
c000d484:	50                   	push   eax
c000d485:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d48a:	50                   	push   eax
c000d48b:	51                   	push   ecx
c000d48c:	e8 fd f8 ff ff       	call   c000cd8e <VgaText::combineCharAndColour(char, unsigned char)>
c000d491:	66 89 03             	mov    WORD PTR [ebx],ax
c000d494:	83 c4 10             	add    esp,0x10
c000d497:	39 2d e4 41 02 c0    	cmp    DWORD PTR ds:0xc00241e4,ebp
c000d49d:	75 2a                	jne    c000d4c9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d49f:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d4a5:	85 c0                	test   eax,eax
c000d4a7:	74 20                	je     c000d4c9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d4a9:	52                   	push   edx
c000d4aa:	52                   	push   edx
c000d4ab:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d4b1:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d4b7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d4bb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d4bf:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d4c2:	51                   	push   ecx
c000d4c3:	55                   	push   ebp
c000d4c4:	ff d0                	call   eax
c000d4c6:	83 c4 20             	add    esp,0x20
c000d4c9:	50                   	push   eax
c000d4ca:	83 c3 02             	add    ebx,0x2
c000d4cd:	50                   	push   eax
c000d4ce:	6a 00                	push   0x0
c000d4d0:	55                   	push   ebp
c000d4d1:	e8 98 f9 ff ff       	call   c000ce6e <VgaText::incrementCursor(bool)>
c000d4d6:	83 c4 10             	add    esp,0x10
c000d4d9:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d4e0:	75 0f                	jne    c000d4f1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d4e2:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d4ea:	0f b7 db             	movzx  ebx,bx
c000d4ed:	01 db                	add    ebx,ebx
c000d4ef:	01 fb                	add    ebx,edi
c000d4f1:	b0 01                	mov    al,0x1
c000d4f3:	46                   	inc    esi
c000d4f4:	e9 b8 fe ff ff       	jmp    c000d3b1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x47>
c000d4f9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d4fd:	83 ec 0c             	sub    esp,0xc
c000d500:	55                   	push   ebp
c000d501:	e8 a6 f6 ff ff       	call   c000cbac <VgaText::updateCursor()>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000d50d:	84 c0                	test   al,al
c000d50f:	74 0c                	je     c000d51d <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b3>
c000d511:	83 ec 0c             	sub    esp,0xc
c000d514:	55                   	push   ebp
c000d515:	e8 3e fe ff ff       	call   c000d358 <VgaText::doUpdate()>
c000d51a:	83 c4 10             	add    esp,0x10
c000d51d:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d524:	83 c4 1c             	add    esp,0x1c
c000d527:	5b                   	pop    ebx
c000d528:	5e                   	pop    esi
c000d529:	5f                   	pop    edi
c000d52a:	5d                   	pop    ebp
c000d52b:	c3                   	ret    

c000d52c <VgaText::clearScreen()>:
c000d52c:	57                   	push   edi
c000d52d:	56                   	push   esi
c000d52e:	31 f6                	xor    esi,esi
c000d530:	53                   	push   ebx
c000d531:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d535:	52                   	push   edx
c000d536:	6a 00                	push   0x0
c000d538:	6a 00                	push   0x0
c000d53a:	53                   	push   ebx
c000d53b:	e8 d8 f8 ff ff       	call   c000ce18 <VgaText::setCursor(int, int)>
c000d540:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d547:	83 c4 10             	add    esp,0x10
c000d54a:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d550:	7e 26                	jle    c000d578 <VgaText::clearScreen()+0x4c>
c000d552:	31 ff                	xor    edi,edi
c000d554:	50                   	push   eax
c000d555:	50                   	push   eax
c000d556:	56                   	push   esi
c000d557:	57                   	push   edi
c000d558:	47                   	inc    edi
c000d559:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d55f:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d565:	6a 20                	push   0x20
c000d567:	53                   	push   ebx
c000d568:	e8 33 f8 ff ff       	call   c000cda0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d56d:	83 c4 20             	add    esp,0x20
c000d570:	83 ff 50             	cmp    edi,0x50
c000d573:	75 df                	jne    c000d554 <VgaText::clearScreen()+0x28>
c000d575:	46                   	inc    esi
c000d576:	eb d2                	jmp    c000d54a <VgaText::clearScreen()+0x1e>
c000d578:	83 ec 0c             	sub    esp,0xc
c000d57b:	53                   	push   ebx
c000d57c:	e8 d7 fd ff ff       	call   c000d358 <VgaText::doUpdate()>
c000d581:	83 c4 10             	add    esp,0x10
c000d584:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d58b:	5b                   	pop    ebx
c000d58c:	5e                   	pop    esi
c000d58d:	5f                   	pop    edi
c000d58e:	c3                   	ret    
c000d58f:	90                   	nop

c000d590 <VgaText::putchar(char)>:
c000d590:	56                   	push   esi
c000d591:	53                   	push   ebx
c000d592:	83 ec 14             	sub    esp,0x14
c000d595:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d599:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d59d:	3c 5b                	cmp    al,0x5b
c000d59f:	75 21                	jne    c000d5c2 <VgaText::putchar(char)+0x32>
c000d5a1:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d5a8:	74 28                	je     c000d5d2 <VgaText::putchar(char)+0x42>
c000d5aa:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d5b3:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d5bd:	e9 e2 00 00 00       	jmp    c000d6a4 <VgaText::putchar(char)+0x114>
c000d5c2:	3c 1b                	cmp    al,0x1b
c000d5c4:	75 0c                	jne    c000d5d2 <VgaText::putchar(char)+0x42>
c000d5c6:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d5cd:	e9 d2 00 00 00       	jmp    c000d6a4 <VgaText::putchar(char)+0x114>
c000d5d2:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d5d8:	84 c9                	test   cl,cl
c000d5da:	0f 84 ab 00 00 00    	je     c000d68b <VgaText::putchar(char)+0xfb>
c000d5e0:	8d 50 c0             	lea    edx,[eax-0x40]
c000d5e3:	80 fa 3e             	cmp    dl,0x3e
c000d5e6:	0f 87 82 00 00 00    	ja     c000d66e <VgaText::putchar(char)+0xde>
c000d5ec:	3c 6d                	cmp    al,0x6d
c000d5ee:	75 4d                	jne    c000d63d <VgaText::putchar(char)+0xad>
c000d5f0:	31 f6                	xor    esi,esi
c000d5f2:	31 d2                	xor    edx,edx
c000d5f4:	31 c0                	xor    eax,eax
c000d5f6:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d5fc:	7e 30                	jle    c000d62e <VgaText::putchar(char)+0x9e>
c000d5fe:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d606:	80 fa 3b             	cmp    dl,0x3b
c000d609:	75 17                	jne    c000d622 <VgaText::putchar(char)+0x92>
c000d60b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d60f:	50                   	push   eax
c000d610:	53                   	push   ebx
c000d611:	e8 fa f5 ff ff       	call   c000cc10 <VgaText::doANSI_SGR(int)>
c000d616:	59                   	pop    ecx
c000d617:	31 d2                	xor    edx,edx
c000d619:	58                   	pop    eax
c000d61a:	31 c0                	xor    eax,eax
c000d61c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d620:	eb 09                	jmp    c000d62b <VgaText::putchar(char)+0x9b>
c000d622:	6b c0 0a             	imul   eax,eax,0xa
c000d625:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d629:	88 ca                	mov    dl,cl
c000d62b:	46                   	inc    esi
c000d62c:	eb c8                	jmp    c000d5f6 <VgaText::putchar(char)+0x66>
c000d62e:	84 d2                	test   dl,dl
c000d630:	74 31                	je     c000d663 <VgaText::putchar(char)+0xd3>
c000d632:	50                   	push   eax
c000d633:	53                   	push   ebx
c000d634:	e8 d7 f5 ff ff       	call   c000cc10 <VgaText::doANSI_SGR(int)>
c000d639:	58                   	pop    eax
c000d63a:	5a                   	pop    edx
c000d63b:	eb 26                	jmp    c000d663 <VgaText::putchar(char)+0xd3>
c000d63d:	3c 4a                	cmp    al,0x4a
c000d63f:	75 22                	jne    c000d663 <VgaText::putchar(char)+0xd3>
c000d641:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d648:	75 19                	jne    c000d663 <VgaText::putchar(char)+0xd3>
c000d64a:	83 ec 0c             	sub    esp,0xc
c000d64d:	53                   	push   ebx
c000d64e:	e8 d9 fe ff ff       	call   c000d52c <VgaText::clearScreen()>
c000d653:	83 c4 0c             	add    esp,0xc
c000d656:	6a 00                	push   0x0
c000d658:	6a 00                	push   0x0
c000d65a:	53                   	push   ebx
c000d65b:	e8 b8 f7 ff ff       	call   c000ce18 <VgaText::setCursor(int, int)>
c000d660:	83 c4 10             	add    esp,0x10
c000d663:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d66c:	eb 36                	jmp    c000d6a4 <VgaText::putchar(char)+0x114>
c000d66e:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d674:	83 fa 0e             	cmp    edx,0xe
c000d677:	7f 2b                	jg     c000d6a4 <VgaText::putchar(char)+0x114>
c000d679:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d67c:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d682:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d689:	eb 19                	jmp    c000d6a4 <VgaText::putchar(char)+0x114>
c000d68b:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d691:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d697:	0f be c0             	movsx  eax,al
c000d69a:	50                   	push   eax
c000d69b:	53                   	push   ebx
c000d69c:	e8 a9 fa ff ff       	call   c000d14a <VgaText::putchar(char, VgaColour, VgaColour)>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	83 c4 14             	add    esp,0x14
c000d6a7:	5b                   	pop    ebx
c000d6a8:	5e                   	pop    esi
c000d6a9:	c3                   	ret    

c000d6aa <VgaText::puts(char const*)>:
c000d6aa:	53                   	push   ebx
c000d6ab:	83 ec 08             	sub    esp,0x8
c000d6ae:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d6b2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d6b5:	84 c0                	test   al,al
c000d6b7:	74 12                	je     c000d6cb <VgaText::puts(char const*)+0x21>
c000d6b9:	51                   	push   ecx
c000d6ba:	43                   	inc    ebx
c000d6bb:	51                   	push   ecx
c000d6bc:	50                   	push   eax
c000d6bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6c1:	e8 ca fe ff ff       	call   c000d590 <VgaText::putchar(char)>
c000d6c6:	83 c4 10             	add    esp,0x10
c000d6c9:	eb e7                	jmp    c000d6b2 <VgaText::puts(char const*)+0x8>
c000d6cb:	83 c4 08             	add    esp,0x8
c000d6ce:	5b                   	pop    ebx
c000d6cf:	c3                   	ret    

c000d6d0 <VgaText::putx(unsigned int)>:
c000d6d0:	57                   	push   edi
c000d6d1:	b9 11 00 00 00       	mov    ecx,0x11
c000d6d6:	56                   	push   esi
c000d6d7:	be 22 0e 02 c0       	mov    esi,0xc0020e22
c000d6dc:	53                   	push   ebx
c000d6dd:	83 ec 20             	sub    esp,0x20
c000d6e0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d6e4:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d6e8:	fc                   	cld    
c000d6e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d6eb:	be 08 00 00 00       	mov    esi,0x8
c000d6f0:	50                   	push   eax
c000d6f1:	50                   	push   eax
c000d6f2:	89 d8                	mov    eax,ebx
c000d6f4:	c1 e8 1c             	shr    eax,0x1c
c000d6f7:	c1 e3 04             	shl    ebx,0x4
c000d6fa:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d6ff:	50                   	push   eax
c000d700:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d704:	e8 87 fe ff ff       	call   c000d590 <VgaText::putchar(char)>
c000d709:	83 c4 10             	add    esp,0x10
c000d70c:	4e                   	dec    esi
c000d70d:	75 e1                	jne    c000d6f0 <VgaText::putx(unsigned int)+0x20>
c000d70f:	83 c4 20             	add    esp,0x20
c000d712:	5b                   	pop    ebx
c000d713:	5e                   	pop    esi
c000d714:	5f                   	pop    edi
c000d715:	c3                   	ret    

c000d716 <VgaText::VgaText(char const*)>:
c000d716:	57                   	push   edi
c000d717:	56                   	push   esi
c000d718:	53                   	push   ebx
c000d719:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d71d:	83 ec 08             	sub    esp,0x8
c000d720:	6a 00                	push   0x0
c000d722:	50                   	push   eax
c000d723:	e8 e0 05 00 00       	call   c000dd08 <UnixFile::UnixFile(int)>
c000d728:	83 c4 10             	add    esp,0x10
c000d72b:	ba 88 0e 02 c0       	mov    edx,0xc0020e88
c000d730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d734:	89 10                	mov    DWORD PTR [eax],edx
c000d736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d73a:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d744:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d748:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d752:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d756:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d761:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d768:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d76c:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d77a:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d788:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d78f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d793:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d79e:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d7a4:	bb c0 41 02 c0       	mov    ebx,0xc00241c0
c000d7a9:	b8 08 00 00 00       	mov    eax,0x8
c000d7ae:	fc                   	cld    
c000d7af:	89 d7                	mov    edi,edx
c000d7b1:	89 de                	mov    esi,ebx
c000d7b3:	89 c1                	mov    ecx,eax
c000d7b5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d7b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7bb:	05 1e 10 00 00       	add    eax,0x101e
c000d7c0:	83 ec 08             	sub    esp,0x8
c000d7c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7c7:	50                   	push   eax
c000d7c8:	e8 da 2e ff ff       	call   c00006a7 <strcpy>
c000d7cd:	83 c4 10             	add    esp,0x10
c000d7d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7d4:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d7de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7e2:	83 c0 0c             	add    eax,0xc
c000d7e5:	83 ec 04             	sub    esp,0x4
c000d7e8:	68 00 0f 00 00       	push   0xf00
c000d7ed:	6a 00                	push   0x0
c000d7ef:	50                   	push   eax
c000d7f0:	e8 13 2e ff ff       	call   c0000608 <memset>
c000d7f5:	83 c4 10             	add    esp,0x10
c000d7f8:	83 ec 04             	sub    esp,0x4
c000d7fb:	6a 00                	push   0x0
c000d7fd:	6a 07                	push   0x7
c000d7ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d803:	e8 c0 f4 ff ff       	call   c000ccc8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d808:	83 c4 10             	add    esp,0x10
c000d80b:	83 ec 08             	sub    esp,0x8
c000d80e:	6a 02                	push   0x2
c000d810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d814:	e8 47 fa ff ff       	call   c000d260 <VgaText::setCursorHeight(int)>
c000d819:	83 c4 10             	add    esp,0x10
c000d81c:	83 ec 04             	sub    esp,0x4
c000d81f:	6a 00                	push   0x0
c000d821:	6a 00                	push   0x0
c000d823:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d827:	e8 ec f5 ff ff       	call   c000ce18 <VgaText::setCursor(int, int)>
c000d82c:	83 c4 10             	add    esp,0x10
c000d82f:	83 ec 08             	sub    esp,0x8
c000d832:	6a 01                	push   0x1
c000d834:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d838:	e8 89 f3 ff ff       	call   c000cbc6 <VgaText::showCursor(bool)>
c000d83d:	83 c4 10             	add    esp,0x10
c000d840:	83 ec 08             	sub    esp,0x8
c000d843:	6a 01                	push   0x1
c000d845:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d849:	e8 88 f3 ff ff       	call   c000cbd6 <VgaText::disableBlink(bool)>
c000d84e:	83 c4 10             	add    esp,0x10
c000d851:	83 ec 0c             	sub    esp,0xc
c000d854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d858:	e8 cf fc ff ff       	call   c000d52c <VgaText::clearScreen()>
c000d85d:	83 c4 10             	add    esp,0x10
c000d860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d864:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d86b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d86f:	05 9e 10 00 00       	add    eax,0x109e
c000d874:	83 ec 04             	sub    esp,0x4
c000d877:	68 96 00 00 00       	push   0x96
c000d87c:	6a 00                	push   0x0
c000d87e:	50                   	push   eax
c000d87f:	e8 84 2d ff ff       	call   c0000608 <memset>
c000d884:	83 c4 10             	add    esp,0x10
c000d887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d88b:	05 34 11 00 00       	add    eax,0x1134
c000d890:	83 ec 04             	sub    esp,0x4
c000d893:	68 2c 01 00 00       	push   0x12c
c000d898:	6a 00                	push   0x0
c000d89a:	50                   	push   eax
c000d89b:	e8 68 2d ff ff       	call   c0000608 <memset>
c000d8a0:	83 c4 10             	add    esp,0x10
c000d8a3:	90                   	nop
c000d8a4:	5b                   	pop    ebx
c000d8a5:	5e                   	pop    esi
c000d8a6:	5f                   	pop    edi
c000d8a7:	c3                   	ret    

c000d8a8 <VgaText::receiveKey(unsigned char)>:
c000d8a8:	55                   	push   ebp
c000d8a9:	57                   	push   edi
c000d8aa:	56                   	push   esi
c000d8ab:	53                   	push   ebx
c000d8ac:	83 ec 1c             	sub    esp,0x1c
c000d8af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d8b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d8b7:	84 db                	test   bl,bl
c000d8b9:	0f 84 c9 00 00 00    	je     c000d988 <VgaText::receiveKey(unsigned char)+0xe0>
c000d8bf:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d8c5:	80 fb 08             	cmp    bl,0x8
c000d8c8:	75 2c                	jne    c000d8f6 <VgaText::receiveKey(unsigned char)+0x4e>
c000d8ca:	83 ec 0c             	sub    esp,0xc
c000d8cd:	57                   	push   edi
c000d8ce:	e8 52 2d ff ff       	call   c0000625 <strlen>
c000d8d3:	83 c4 10             	add    esp,0x10
c000d8d6:	85 c0                	test   eax,eax
c000d8d8:	74 41                	je     c000d91b <VgaText::receiveKey(unsigned char)+0x73>
c000d8da:	50                   	push   eax
c000d8db:	50                   	push   eax
c000d8dc:	6a 08                	push   0x8
c000d8de:	56                   	push   esi
c000d8df:	e8 ac fc ff ff       	call   c000d590 <VgaText::putchar(char)>
c000d8e4:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8e7:	e8 39 2d ff ff       	call   c0000625 <strlen>
c000d8ec:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d8f4:	eb 22                	jmp    c000d918 <VgaText::receiveKey(unsigned char)+0x70>
c000d8f6:	52                   	push   edx
c000d8f7:	52                   	push   edx
c000d8f8:	0f be c3             	movsx  eax,bl
c000d8fb:	50                   	push   eax
c000d8fc:	56                   	push   esi
c000d8fd:	e8 8e fc ff ff       	call   c000d590 <VgaText::putchar(char)>
c000d902:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d906:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d90b:	59                   	pop    ecx
c000d90c:	5d                   	pop    ebp
c000d90d:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d911:	50                   	push   eax
c000d912:	57                   	push   edi
c000d913:	e8 46 2e ff ff       	call   c000075e <strcat>
c000d918:	83 c4 10             	add    esp,0x10
c000d91b:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d922:	75 05                	jne    c000d929 <VgaText::receiveKey(unsigned char)+0x81>
c000d924:	80 fb 0a             	cmp    bl,0xa
c000d927:	75 53                	jne    c000d97c <VgaText::receiveKey(unsigned char)+0xd4>
c000d929:	83 ec 0c             	sub    esp,0xc
c000d92c:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d932:	53                   	push   ebx
c000d933:	e8 ed 2c ff ff       	call   c0000625 <strlen>
c000d938:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d93b:	89 c5                	mov    ebp,eax
c000d93d:	e8 e3 2c ff ff       	call   c0000625 <strlen>
c000d942:	83 c4 10             	add    esp,0x10
c000d945:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000d949:	3d 2c 01 00 00       	cmp    eax,0x12c
c000d94e:	76 10                	jbe    c000d960 <VgaText::receiveKey(unsigned char)+0xb8>
c000d950:	83 ec 0c             	sub    esp,0xc
c000d953:	68 33 0e 02 c0       	push   0xc0020e33
c000d958:	e8 8f 7a 00 00       	call   c00153ec <Krnl::panic(char const*)>
c000d95d:	83 c4 10             	add    esp,0x10
c000d960:	50                   	push   eax
c000d961:	50                   	push   eax
c000d962:	57                   	push   edi
c000d963:	53                   	push   ebx
c000d964:	e8 f5 2d ff ff       	call   c000075e <strcat>
c000d969:	83 c4 0c             	add    esp,0xc
c000d96c:	68 96 00 00 00       	push   0x96
c000d971:	6a 00                	push   0x0
c000d973:	57                   	push   edi
c000d974:	e8 8f 2c ff ff       	call   c0000608 <memset>
c000d979:	83 c4 10             	add    esp,0x10
c000d97c:	83 ec 0c             	sub    esp,0xc
c000d97f:	56                   	push   esi
c000d980:	e8 d3 f9 ff ff       	call   c000d358 <VgaText::doUpdate()>
c000d985:	83 c4 10             	add    esp,0x10
c000d988:	83 c4 1c             	add    esp,0x1c
c000d98b:	5b                   	pop    ebx
c000d98c:	5e                   	pop    esi
c000d98d:	5f                   	pop    edi
c000d98e:	5d                   	pop    ebp
c000d98f:	c3                   	ret    

c000d990 <VgaText::write(unsigned long long, void*, int*)>:
c000d990:	55                   	push   ebp
c000d991:	57                   	push   edi
c000d992:	56                   	push   esi
c000d993:	53                   	push   ebx
c000d994:	83 ec 0c             	sub    esp,0xc
c000d997:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d99b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000d99f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000d9a3:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000d9aa:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000d9ad:	39 eb                	cmp    ebx,ebp
c000d9af:	74 13                	je     c000d9c4 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000d9b1:	50                   	push   eax
c000d9b2:	43                   	inc    ebx
c000d9b3:	50                   	push   eax
c000d9b4:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000d9b8:	50                   	push   eax
c000d9b9:	56                   	push   esi
c000d9ba:	e8 d1 fb ff ff       	call   c000d590 <VgaText::putchar(char)>
c000d9bf:	83 c4 10             	add    esp,0x10
c000d9c2:	eb e9                	jmp    c000d9ad <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000d9c4:	83 ec 0c             	sub    esp,0xc
c000d9c7:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000d9ce:	56                   	push   esi
c000d9cf:	e8 84 f9 ff ff       	call   c000d358 <VgaText::doUpdate()>
c000d9d4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d9d8:	89 38                	mov    DWORD PTR [eax],edi
c000d9da:	83 c4 1c             	add    esp,0x1c
c000d9dd:	31 c0                	xor    eax,eax
c000d9df:	5b                   	pop    ebx
c000d9e0:	5e                   	pop    esi
c000d9e1:	5f                   	pop    edi
c000d9e2:	5d                   	pop    ebp
c000d9e3:	c3                   	ret    

c000d9e4 <newTerminal(char*)>:
c000d9e4:	83 ec 28             	sub    esp,0x28
c000d9e7:	68 60 12 00 00       	push   0x1260
c000d9ec:	e8 33 16 00 00       	call   c000f024 <operator new(unsigned long)>
c000d9f1:	5a                   	pop    edx
c000d9f2:	59                   	pop    ecx
c000d9f3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d9f7:	50                   	push   eax
c000d9f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d9fc:	e8 15 fd ff ff       	call   c000d716 <VgaText::VgaText(char const*)>
c000da01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000da05:	83 c4 2c             	add    esp,0x2c
c000da08:	c3                   	ret    
c000da09:	90                   	nop

c000da0a <TSS::TSS()>:
c000da0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000da0e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000da15:	90                   	nop
c000da16:	c3                   	ret    
c000da17:	90                   	nop

c000da18 <TSS::setESP(unsigned long)>:
c000da18:	55                   	push   ebp
c000da19:	89 e5                	mov    ebp,esp
c000da1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da1e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da21:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000da24:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000da27:	90                   	nop
c000da28:	5d                   	pop    ebp
c000da29:	c3                   	ret    

c000da2a <TSS::flush()>:
c000da2a:	55                   	push   ebp
c000da2b:	89 e5                	mov    ebp,esp
c000da2d:	83 ec 10             	sub    esp,0x10
c000da30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da33:	8b 00                	mov    eax,DWORD PTR [eax]
c000da35:	83 c8 03             	or     eax,0x3
c000da38:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000da3c:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000da40:	66 89 d0             	mov    ax,dx
c000da43:	0f 00 d8             	ltr    ax
c000da46:	90                   	nop
c000da47:	c9                   	leave  
c000da48:	c3                   	ret    
c000da49:	90                   	nop

c000da4a <TSS::setup(unsigned long, unsigned long)>:
c000da4a:	55                   	push   ebp
c000da4b:	89 e5                	mov    ebp,esp
c000da4d:	53                   	push   ebx
c000da4e:	83 ec 14             	sub    esp,0x14
c000da51:	83 ec 0c             	sub    esp,0xc
c000da54:	6a 68                	push   0x68
c000da56:	e8 cc e4 ff ff       	call   c000bf27 <malloc>
c000da5b:	83 c4 10             	add    esp,0x10
c000da5e:	89 c2                	mov    edx,eax
c000da60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da63:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000da66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da69:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da6c:	83 ec 04             	sub    esp,0x4
c000da6f:	6a 68                	push   0x68
c000da71:	6a 00                	push   0x0
c000da73:	50                   	push   eax
c000da74:	e8 8f 2b ff ff       	call   c0000608 <memset>
c000da79:	83 c4 10             	add    esp,0x10
c000da7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da82:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000da88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da8b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da8e:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000da94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000da97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000da9a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000da9d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000daa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000daa3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000daa6:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000daac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000daaf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dab2:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000dab8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dabb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dabe:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000dac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dac7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000daca:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000dad0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dad3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dad6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000dad9:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000dadc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dadf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dae2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000dae5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000daeb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000daee:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000daf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000daf8:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000dafb:	e8 85 16 01 00       	call   c001f185 <CPU::readCR3()>
c000db00:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000db03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db06:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db09:	83 ec 08             	sub    esp,0x8
c000db0c:	50                   	push   eax
c000db0d:	8d 45 f0             	lea    eax,[ebp-0x10]
c000db10:	50                   	push   eax
c000db11:	e8 e8 db ff ff       	call   c000b6fe <GDTEntry::setBase(unsigned int)>
c000db16:	83 c4 10             	add    esp,0x10
c000db19:	83 ec 08             	sub    esp,0x8
c000db1c:	6a 68                	push   0x68
c000db1e:	8d 45 f0             	lea    eax,[ebp-0x10]
c000db21:	50                   	push   eax
c000db22:	e8 f3 db ff ff       	call   c000b71a <GDTEntry::setLimit(unsigned int)>
c000db27:	83 c4 10             	add    esp,0x10
c000db2a:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000db2e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000db31:	83 e0 0f             	and    eax,0xf
c000db34:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000db37:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000db3a:	83 c8 40             	or     eax,0x40
c000db3d:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000db40:	e8 3b 67 00 00       	call   c0014280 <thisCPU()>
c000db45:	05 78 01 00 00       	add    eax,0x178
c000db4a:	83 ec 04             	sub    esp,0x4
c000db4d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000db50:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000db53:	50                   	push   eax
c000db54:	e8 f5 db ff ff       	call   c000b74e <GDT::addEntry(GDTEntry)>
c000db59:	83 c4 10             	add    esp,0x10
c000db5c:	89 c2                	mov    edx,eax
c000db5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db61:	89 10                	mov    DWORD PTR [eax],edx
c000db63:	e8 18 67 00 00       	call   c0014280 <thisCPU()>
c000db68:	05 78 01 00 00       	add    eax,0x178
c000db6d:	83 ec 0c             	sub    esp,0xc
c000db70:	50                   	push   eax
c000db71:	e8 1c dc ff ff       	call   c000b792 <GDT::flush()>
c000db76:	83 c4 10             	add    esp,0x10
c000db79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db7c:	8b 00                	mov    eax,DWORD PTR [eax]
c000db7e:	83 ec 08             	sub    esp,0x8
c000db81:	50                   	push   eax
c000db82:	68 9c 0e 02 c0       	push   0xc0020e9c
c000db87:	e8 cd 15 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000db8c:	83 c4 10             	add    esp,0x10
c000db8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db92:	8b 00                	mov    eax,DWORD PTR [eax]
c000db94:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000db97:	c9                   	leave  
c000db98:	c3                   	ret    
c000db99:	90                   	nop

c000db9a <ReservedFilename::read(unsigned long long, void*, int*)>:
c000db9a:	55                   	push   ebp
c000db9b:	57                   	push   edi
c000db9c:	56                   	push   esi
c000db9d:	53                   	push   ebx
c000db9e:	83 ec 0c             	sub    esp,0xc
c000dba1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dba5:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dba9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dbad:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000dbb1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbb4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dbb8:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dbbd:	75 08                	jne    c000dbc7 <ReservedFilename::read(unsigned long long, void*, int*)+0x2d>
c000dbbf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dbc5:	eb 5e                	jmp    c000dc25 <ReservedFilename::read(unsigned long long, void*, int*)+0x8b>
c000dbc7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dbcc:	75 3d                	jne    c000dc0b <ReservedFilename::read(unsigned long long, void*, int*)+0x71>
c000dbce:	83 ec 0c             	sub    esp,0xc
c000dbd1:	68 ba 0e 02 c0       	push   0xc0020eba
c000dbd6:	e8 7e 15 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000dbdb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dbe0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dbe3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dbe9:	8b 10                	mov    edx,DWORD PTR [eax]
c000dbeb:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000dbef:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dbf3:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dbf7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000dbfb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dbff:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000dc02:	83 c4 1c             	add    esp,0x1c
c000dc05:	5b                   	pop    ebx
c000dc06:	5e                   	pop    esi
c000dc07:	5f                   	pop    edi
c000dc08:	5d                   	pop    ebp
c000dc09:	ff e0                	jmp    eax
c000dc0b:	89 c2                	mov    edx,eax
c000dc0d:	83 e2 fd             	and    edx,0xfffffffd
c000dc10:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c000dc16:	74 a7                	je     c000dbbf <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000dc18:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dc1d:	83 e0 ef             	and    eax,0xffffffef
c000dc20:	83 f8 08             	cmp    eax,0x8
c000dc23:	76 9a                	jbe    c000dbbf <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000dc25:	83 c4 0c             	add    esp,0xc
c000dc28:	31 c0                	xor    eax,eax
c000dc2a:	5b                   	pop    ebx
c000dc2b:	5e                   	pop    esi
c000dc2c:	5f                   	pop    edi
c000dc2d:	5d                   	pop    ebp
c000dc2e:	c3                   	ret    
c000dc2f:	90                   	nop

c000dc30 <ReservedFilename::isAtty()>:
c000dc30:	83 ec 18             	sub    esp,0x18
c000dc33:	68 c7 0e 02 c0       	push   0xc0020ec7
c000dc38:	e8 1c 15 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000dc3d:	83 c4 10             	add    esp,0x10
c000dc40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dc44:	31 c0                	xor    eax,eax
c000dc46:	81 7a 04 01 ff ff 0f 	cmp    DWORD PTR [edx+0x4],0xfffff01
c000dc4d:	75 12                	jne    c000dc61 <ReservedFilename::isAtty()+0x31>
c000dc4f:	83 ec 0c             	sub    esp,0xc
c000dc52:	68 dd 0e 02 c0       	push   0xc0020edd
c000dc57:	e8 fd 14 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000dc5c:	83 c4 10             	add    esp,0x10
c000dc5f:	b0 01                	mov    al,0x1
c000dc61:	83 c4 0c             	add    esp,0xc
c000dc64:	c3                   	ret    
c000dc65:	90                   	nop

c000dc66 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000dc66:	55                   	push   ebp
c000dc67:	57                   	push   edi
c000dc68:	56                   	push   esi
c000dc69:	53                   	push   ebx
c000dc6a:	83 ec 0c             	sub    esp,0xc
c000dc6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc71:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dc75:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dc79:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000dc7d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc80:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dc84:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dc89:	75 08                	jne    c000dc93 <ReservedFilename::write(unsigned long long, void*, int*)+0x2d>
c000dc8b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dc91:	eb 63                	jmp    c000dcf6 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000dc93:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dc98:	75 3d                	jne    c000dcd7 <ReservedFilename::write(unsigned long long, void*, int*)+0x71>
c000dc9a:	83 ec 0c             	sub    esp,0xc
c000dc9d:	68 f0 0e 02 c0       	push   0xc0020ef0
c000dca2:	e8 b2 14 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000dca7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dcac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dcaf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dcb5:	8b 10                	mov    edx,DWORD PTR [eax]
c000dcb7:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000dcbb:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dcbf:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dcc3:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000dcc7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dccb:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c000dcce:	83 c4 1c             	add    esp,0x1c
c000dcd1:	5b                   	pop    ebx
c000dcd2:	5e                   	pop    esi
c000dcd3:	5f                   	pop    edi
c000dcd4:	5d                   	pop    ebp
c000dcd5:	ff e0                	jmp    eax
c000dcd7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000dcdc:	75 04                	jne    c000dce2 <ReservedFilename::write(unsigned long long, void*, int*)+0x7c>
c000dcde:	89 33                	mov    DWORD PTR [ebx],esi
c000dce0:	eb 14                	jmp    c000dcf6 <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000dce2:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000dce7:	74 a2                	je     c000dc8b <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000dce9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dcee:	83 e0 ef             	and    eax,0xffffffef
c000dcf1:	83 f8 08             	cmp    eax,0x8
c000dcf4:	76 95                	jbe    c000dc8b <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000dcf6:	83 c4 0c             	add    esp,0xc
c000dcf9:	31 c0                	xor    eax,eax
c000dcfb:	5b                   	pop    ebx
c000dcfc:	5e                   	pop    esi
c000dcfd:	5f                   	pop    edi
c000dcfe:	5d                   	pop    ebp
c000dcff:	c3                   	ret    

c000dd00 <UnixFile::getFileDescriptor()>:
c000dd00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd07:	c3                   	ret    

c000dd08 <UnixFile::UnixFile(int)>:
c000dd08:	53                   	push   ebx
c000dd09:	83 ec 18             	sub    esp,0x18
c000dd0c:	ba 0c 10 02 c0       	mov    edx,0xc002100c
c000dd11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd15:	89 10                	mov    DWORD PTR [eax],edx
c000dd17:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000dd1f:	0f 8f 4d 01 00 00    	jg     c000de72 <UnixFile::UnixFile(int)+0x16a>
c000dd25:	a1 c0 35 02 c0       	mov    eax,ds:0xc00235c0
c000dd2a:	8d 50 01             	lea    edx,[eax+0x1]
c000dd2d:	89 15 c0 35 02 c0    	mov    DWORD PTR ds:0xc00235c0,edx
c000dd33:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000dd37:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000dd3a:	83 ec 08             	sub    esp,0x8
c000dd3d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dd41:	68 78 42 02 c0       	push   0xc0024278
c000dd46:	e8 af 14 01 00       	call   c001f1fa <LinkedList<UnixFile>::addElement(UnixFile*)>
c000dd4b:	83 c4 10             	add    esp,0x10
c000dd4e:	a0 74 42 02 c0       	mov    al,ds:0xc0024274
c000dd53:	83 f0 01             	xor    eax,0x1
c000dd56:	84 c0                	test   al,al
c000dd58:	0f 84 15 01 00 00    	je     c000de73 <UnixFile::UnixFile(int)+0x16b>
c000dd5e:	c6 05 74 42 02 c0 01 	mov    BYTE PTR ds:0xc0024274,0x1
c000dd65:	83 ec 0c             	sub    esp,0xc
c000dd68:	6a 0c                	push   0xc
c000dd6a:	e8 b5 12 00 00       	call   c000f024 <operator new(unsigned long)>
c000dd6f:	83 c4 10             	add    esp,0x10
c000dd72:	89 c3                	mov    ebx,eax
c000dd74:	83 ec 08             	sub    esp,0x8
c000dd77:	68 03 ff ff 0f       	push   0xfffff03
c000dd7c:	53                   	push   ebx
c000dd7d:	e8 f6 00 00 00       	call   c000de78 <ReservedFilename::ReservedFilename(int)>
c000dd82:	83 c4 10             	add    esp,0x10
c000dd85:	89 1d 6c 42 02 c0    	mov    DWORD PTR ds:0xc002426c,ebx
c000dd8b:	83 ec 0c             	sub    esp,0xc
c000dd8e:	6a 0c                	push   0xc
c000dd90:	e8 8f 12 00 00       	call   c000f024 <operator new(unsigned long)>
c000dd95:	83 c4 10             	add    esp,0x10
c000dd98:	89 c3                	mov    ebx,eax
c000dd9a:	83 ec 08             	sub    esp,0x8
c000dd9d:	68 01 ff ff 0f       	push   0xfffff01
c000dda2:	53                   	push   ebx
c000dda3:	e8 d0 00 00 00       	call   c000de78 <ReservedFilename::ReservedFilename(int)>
c000dda8:	83 c4 10             	add    esp,0x10
c000ddab:	89 1d 70 42 02 c0    	mov    DWORD PTR ds:0xc0024270,ebx
c000ddb1:	83 ec 0c             	sub    esp,0xc
c000ddb4:	6a 0c                	push   0xc
c000ddb6:	e8 69 12 00 00       	call   c000f024 <operator new(unsigned long)>
c000ddbb:	83 c4 10             	add    esp,0x10
c000ddbe:	89 c3                	mov    ebx,eax
c000ddc0:	83 ec 08             	sub    esp,0x8
c000ddc3:	68 00 ff ff 0f       	push   0xfffff00
c000ddc8:	53                   	push   ebx
c000ddc9:	e8 aa 00 00 00       	call   c000de78 <ReservedFilename::ReservedFilename(int)>
c000ddce:	83 c4 10             	add    esp,0x10
c000ddd1:	89 1d 64 42 02 c0    	mov    DWORD PTR ds:0xc0024264,ebx
c000ddd7:	83 ec 0c             	sub    esp,0xc
c000ddda:	6a 0c                	push   0xc
c000dddc:	e8 43 12 00 00       	call   c000f024 <operator new(unsigned long)>
c000dde1:	83 c4 10             	add    esp,0x10
c000dde4:	89 c3                	mov    ebx,eax
c000dde6:	83 ec 08             	sub    esp,0x8
c000dde9:	68 02 ff ff 0f       	push   0xfffff02
c000ddee:	53                   	push   ebx
c000ddef:	e8 84 00 00 00       	call   c000de78 <ReservedFilename::ReservedFilename(int)>
c000ddf4:	83 c4 10             	add    esp,0x10
c000ddf7:	89 1d 68 42 02 c0    	mov    DWORD PTR ds:0xc0024268,ebx
c000ddfd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000de05:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000de0a:	7f 67                	jg     c000de73 <UnixFile::UnixFile(int)+0x16b>
c000de0c:	83 ec 0c             	sub    esp,0xc
c000de0f:	6a 0c                	push   0xc
c000de11:	e8 0e 12 00 00       	call   c000f024 <operator new(unsigned long)>
c000de16:	83 c4 10             	add    esp,0x10
c000de19:	89 c3                	mov    ebx,eax
c000de1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de1f:	05 10 ff ff 0f       	add    eax,0xfffff10
c000de24:	83 ec 08             	sub    esp,0x8
c000de27:	50                   	push   eax
c000de28:	53                   	push   ebx
c000de29:	e8 4a 00 00 00       	call   c000de78 <ReservedFilename::ReservedFilename(int)>
c000de2e:	83 c4 10             	add    esp,0x10
c000de31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de35:	89 1c 85 40 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbdc0],ebx
c000de3c:	83 ec 0c             	sub    esp,0xc
c000de3f:	6a 0c                	push   0xc
c000de41:	e8 de 11 00 00       	call   c000f024 <operator new(unsigned long)>
c000de46:	83 c4 10             	add    esp,0x10
c000de49:	89 c3                	mov    ebx,eax
c000de4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de4f:	05 20 ff ff 0f       	add    eax,0xfffff20
c000de54:	83 ec 08             	sub    esp,0x8
c000de57:	50                   	push   eax
c000de58:	53                   	push   ebx
c000de59:	e8 1a 00 00 00       	call   c000de78 <ReservedFilename::ReservedFilename(int)>
c000de5e:	83 c4 10             	add    esp,0x10
c000de61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000de65:	89 1c 85 00 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbe00],ebx
c000de6c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000de70:	eb 93                	jmp    c000de05 <UnixFile::UnixFile(int)+0xfd>
c000de72:	90                   	nop
c000de73:	83 c4 18             	add    esp,0x18
c000de76:	5b                   	pop    ebx
c000de77:	c3                   	ret    

c000de78 <ReservedFilename::ReservedFilename(int)>:
c000de78:	83 ec 0c             	sub    esp,0xc
c000de7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de7f:	83 ec 08             	sub    esp,0x8
c000de82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de86:	50                   	push   eax
c000de87:	e8 7c fe ff ff       	call   c000dd08 <UnixFile::UnixFile(int)>
c000de8c:	83 c4 10             	add    esp,0x10
c000de8f:	ba 28 10 02 c0       	mov    edx,0xc0021028
c000de94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de98:	89 10                	mov    DWORD PTR [eax],edx
c000de9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de9e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000dea2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000dea5:	90                   	nop
c000dea6:	83 c4 0c             	add    esp,0xc
c000dea9:	c3                   	ret    

c000deaa <UnixFile::~UnixFile()>:
c000deaa:	83 ec 1c             	sub    esp,0x1c
c000dead:	ba 0c 10 02 c0       	mov    edx,0xc002100c
c000deb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000deb6:	89 10                	mov    DWORD PTR [eax],edx
c000deb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000debc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000debf:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000dec4:	7f 73                	jg     c000df39 <UnixFile::~UnixFile()+0x8f>
c000dec6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dece:	83 ec 0c             	sub    esp,0xc
c000ded1:	68 78 42 02 c0       	push   0xc0024278
c000ded6:	e8 f3 13 01 00       	call   c001f2ce <LinkedList<UnixFile>::getFirstElement()>
c000dedb:	83 c4 10             	add    esp,0x10
c000dede:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dee2:	83 ec 0c             	sub    esp,0xc
c000dee5:	68 78 42 02 c0       	push   0xc0024278
c000deea:	e8 e7 13 01 00       	call   c001f2d6 <LinkedList<UnixFile>::removeFirst()>
c000deef:	83 c4 10             	add    esp,0x10
c000def2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000def6:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000defa:	74 40                	je     c000df3c <UnixFile::~UnixFile()+0x92>
c000defc:	83 ec 08             	sub    esp,0x8
c000deff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000df03:	68 78 42 02 c0       	push   0xc0024278
c000df08:	e8 ed 12 01 00       	call   c001f1fa <LinkedList<UnixFile>::addElement(UnixFile*)>
c000df0d:	83 c4 10             	add    esp,0x10
c000df10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df14:	8d 50 01             	lea    edx,[eax+0x1]
c000df17:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df1b:	3d 88 13 00 00       	cmp    eax,0x1388
c000df20:	0f 94 c0             	sete   al
c000df23:	84 c0                	test   al,al
c000df25:	74 a7                	je     c000dece <UnixFile::~UnixFile()+0x24>
c000df27:	83 ec 0c             	sub    esp,0xc
c000df2a:	68 e4 0f 02 c0       	push   0xc0020fe4
c000df2f:	e8 b8 74 00 00       	call   c00153ec <Krnl::panic(char const*)>
c000df34:	83 c4 10             	add    esp,0x10
c000df37:	eb 95                	jmp    c000dece <UnixFile::~UnixFile()+0x24>
c000df39:	90                   	nop
c000df3a:	eb 01                	jmp    c000df3d <UnixFile::~UnixFile()+0x93>
c000df3c:	90                   	nop
c000df3d:	90                   	nop
c000df3e:	83 c4 1c             	add    esp,0x1c
c000df41:	c3                   	ret    

c000df42 <UnixFile::~UnixFile()>:
c000df42:	83 ec 0c             	sub    esp,0xc
c000df45:	83 ec 0c             	sub    esp,0xc
c000df48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df4c:	e8 59 ff ff ff       	call   c000deaa <UnixFile::~UnixFile()>
c000df51:	83 c4 10             	add    esp,0x10
c000df54:	83 ec 08             	sub    esp,0x8
c000df57:	6a 0c                	push   0xc
c000df59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df5d:	e8 d1 10 00 00       	call   c000f033 <operator delete(void*, unsigned long)>
c000df62:	83 c4 10             	add    esp,0x10
c000df65:	83 c4 0c             	add    esp,0xc
c000df68:	c3                   	ret    
c000df69:	90                   	nop

c000df6a <ReservedFilename::~ReservedFilename()>:
c000df6a:	83 ec 0c             	sub    esp,0xc
c000df6d:	ba 28 10 02 c0       	mov    edx,0xc0021028
c000df72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df76:	89 10                	mov    DWORD PTR [eax],edx
c000df78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df7c:	83 ec 0c             	sub    esp,0xc
c000df7f:	50                   	push   eax
c000df80:	e8 25 ff ff ff       	call   c000deaa <UnixFile::~UnixFile()>
c000df85:	83 c4 10             	add    esp,0x10
c000df88:	90                   	nop
c000df89:	83 c4 0c             	add    esp,0xc
c000df8c:	c3                   	ret    
c000df8d:	90                   	nop

c000df8e <ReservedFilename::~ReservedFilename()>:
c000df8e:	83 ec 0c             	sub    esp,0xc
c000df91:	83 ec 0c             	sub    esp,0xc
c000df94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df98:	e8 cd ff ff ff       	call   c000df6a <ReservedFilename::~ReservedFilename()>
c000df9d:	83 c4 10             	add    esp,0x10
c000dfa0:	83 ec 08             	sub    esp,0x8
c000dfa3:	6a 0c                	push   0xc
c000dfa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfa9:	e8 85 10 00 00       	call   c000f033 <operator delete(void*, unsigned long)>
c000dfae:	83 c4 10             	add    esp,0x10
c000dfb1:	83 c4 0c             	add    esp,0xc
c000dfb4:	c3                   	ret    

c000dfb5 <getFromFileDescriptor(int)>:
c000dfb5:	53                   	push   ebx
c000dfb6:	83 ec 08             	sub    esp,0x8
c000dfb9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dfbd:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000dfc3:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000dfc9:	7f 33                	jg     c000dffe <getFromFileDescriptor(int)+0x49>
c000dfcb:	83 ec 0c             	sub    esp,0xc
c000dfce:	68 78 42 02 c0       	push   0xc0024278
c000dfd3:	e8 f6 12 01 00       	call   c001f2ce <LinkedList<UnixFile>::getFirstElement()>
c000dfd8:	83 c4 10             	add    esp,0x10
c000dfdb:	85 c0                	test   eax,eax
c000dfdd:	75 07                	jne    c000dfe6 <getFromFileDescriptor(int)+0x31>
c000dfdf:	31 c0                	xor    eax,eax
c000dfe1:	e9 98 00 00 00       	jmp    c000e07e <getFromFileDescriptor(int)+0xc9>
c000dfe6:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000dfe9:	0f 84 8f 00 00 00    	je     c000e07e <getFromFileDescriptor(int)+0xc9>
c000dfef:	52                   	push   edx
c000dff0:	52                   	push   edx
c000dff1:	50                   	push   eax
c000dff2:	68 78 42 02 c0       	push   0xc0024278
c000dff7:	e8 7c 13 01 00       	call   c001f378 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000dffc:	eb da                	jmp    c000dfd8 <getFromFileDescriptor(int)+0x23>
c000dffe:	83 ec 0c             	sub    esp,0xc
c000e001:	68 fd 0e 02 c0       	push   0xc0020efd
c000e006:	e8 4e 11 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e00b:	83 c4 10             	add    esp,0x10
c000e00e:	a1 6c 42 02 c0       	mov    eax,ds:0xc002426c
c000e013:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000e019:	74 63                	je     c000e07e <getFromFileDescriptor(int)+0xc9>
c000e01b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000e021:	75 17                	jne    c000e03a <getFromFileDescriptor(int)+0x85>
c000e023:	83 ec 0c             	sub    esp,0xc
c000e026:	68 24 0f 02 c0       	push   0xc0020f24
c000e02b:	e8 29 11 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e030:	a1 70 42 02 c0       	mov    eax,ds:0xc0024270
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	eb 44                	jmp    c000e07e <getFromFileDescriptor(int)+0xc9>
c000e03a:	a1 68 42 02 c0       	mov    eax,ds:0xc0024268
c000e03f:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000e045:	74 37                	je     c000e07e <getFromFileDescriptor(int)+0xc9>
c000e047:	a1 64 42 02 c0       	mov    eax,ds:0xc0024264
c000e04c:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000e052:	74 2a                	je     c000e07e <getFromFileDescriptor(int)+0xc9>
c000e054:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000e05a:	83 f8 08             	cmp    eax,0x8
c000e05d:	77 09                	ja     c000e068 <getFromFileDescriptor(int)+0xb3>
c000e05f:	8b 04 85 40 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbdc0]
c000e066:	eb 16                	jmp    c000e07e <getFromFileDescriptor(int)+0xc9>
c000e068:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000e06e:	83 fb 08             	cmp    ebx,0x8
c000e071:	0f 87 68 ff ff ff    	ja     c000dfdf <getFromFileDescriptor(int)+0x2a>
c000e077:	8b 04 9d 00 42 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbe00]
c000e07e:	83 c4 08             	add    esp,0x8
c000e081:	5b                   	pop    ebx
c000e082:	c3                   	ret    

c000e083 <__static_initialization_and_destruction_0(int, int)>:
c000e083:	83 ec 0c             	sub    esp,0xc
c000e086:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e08b:	75 34                	jne    c000e0c1 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e08d:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000e095:	75 2a                	jne    c000e0c1 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e097:	83 ec 0c             	sub    esp,0xc
c000e09a:	68 78 42 02 c0       	push   0xc0024278
c000e09f:	e8 fe 10 01 00       	call   c001f1a2 <LinkedList<UnixFile>::LinkedList()>
c000e0a4:	83 c4 10             	add    esp,0x10
c000e0a7:	83 ec 04             	sub    esp,0x4
c000e0aa:	68 3c 35 02 c0       	push   0xc002353c
c000e0af:	68 78 42 02 c0       	push   0xc0024278
c000e0b4:	68 a0 f1 01 c0       	push   0xc001f1a0
c000e0b9:	e8 f1 0e 00 00       	call   c000efaf <__cxa_atexit>
c000e0be:	83 c4 10             	add    esp,0x10
c000e0c1:	90                   	nop
c000e0c2:	83 c4 0c             	add    esp,0xc
c000e0c5:	c3                   	ret    

c000e0c6 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000e0c6:	83 ec 0c             	sub    esp,0xc
c000e0c9:	83 ec 08             	sub    esp,0x8
c000e0cc:	68 ff ff 00 00       	push   0xffff
c000e0d1:	6a 01                	push   0x1
c000e0d3:	e8 ab ff ff ff       	call   c000e083 <__static_initialization_and_destruction_0(int, int)>
c000e0d8:	83 c4 10             	add    esp,0x10
c000e0db:	83 c4 0c             	add    esp,0xc
c000e0de:	c3                   	ret    
c000e0df:	90                   	nop

c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000e0e0:	53                   	push   ebx
c000e0e1:	8b 15 c8 35 02 c0    	mov    edx,DWORD PTR ds:0xc00235c8
c000e0e7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e0eb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e0ef:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000e0f5:	89 c8                	mov    eax,ecx
c000e0f7:	d1 e8                	shr    eax,1
c000e0f9:	01 d0                	add    eax,edx
c000e0fb:	83 e1 01             	and    ecx,0x1
c000e0fe:	8a 10                	mov    dl,BYTE PTR [eax]
c000e100:	75 09                	jne    c000e10b <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c000e102:	83 e2 f0             	and    edx,0xfffffff0
c000e105:	09 da                	or     edx,ebx
c000e107:	88 10                	mov    BYTE PTR [eax],dl
c000e109:	5b                   	pop    ebx
c000e10a:	c3                   	ret    
c000e10b:	c1 e3 04             	shl    ebx,0x4
c000e10e:	83 e2 0f             	and    edx,0xf
c000e111:	09 da                	or     edx,ebx
c000e113:	88 10                	mov    BYTE PTR [eax],dl
c000e115:	5b                   	pop    ebx
c000e116:	c3                   	ret    

c000e117 <Virt::getPageState(unsigned long)>:
c000e117:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e11b:	8b 0d c8 35 02 c0    	mov    ecx,DWORD PTR ds:0xc00235c8
c000e121:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000e127:	89 d0                	mov    eax,edx
c000e129:	d1 e8                	shr    eax,1
c000e12b:	8a 0c 01             	mov    cl,BYTE PTR [ecx+eax*1]
c000e12e:	88 c8                	mov    al,cl
c000e130:	c0 e8 04             	shr    al,0x4
c000e133:	83 e2 01             	and    edx,0x1
c000e136:	75 05                	jne    c000e13d <Virt::getPageState(unsigned long)+0x26>
c000e138:	88 c8                	mov    al,cl
c000e13a:	83 e0 0f             	and    eax,0xf
c000e13d:	c3                   	ret    

c000e13e <Virt::allocateKernelVirtualPages(int)>:
c000e13e:	55                   	push   ebp
c000e13f:	31 ed                	xor    ebp,ebp
c000e141:	57                   	push   edi
c000e142:	56                   	push   esi
c000e143:	53                   	push   ebx
c000e144:	31 db                	xor    ebx,ebx
c000e146:	83 ec 1c             	sub    esp,0x1c
c000e149:	8b 3d c4 35 02 c0    	mov    edi,DWORD PTR ds:0xc00235c4
c000e14f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e153:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e158:	57                   	push   edi
c000e159:	e8 b9 ff ff ff       	call   c000e117 <Virt::getPageState(unsigned long)>
c000e15e:	5a                   	pop    edx
c000e15f:	84 c0                	test   al,al
c000e161:	75 3a                	jne    c000e19d <Virt::allocateKernelVirtualPages(int)+0x5f>
c000e163:	85 db                	test   ebx,ebx
c000e165:	75 02                	jne    c000e169 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000e167:	89 fd                	mov    ebp,edi
c000e169:	43                   	inc    ebx
c000e16a:	39 f3                	cmp    ebx,esi
c000e16c:	74 5a                	je     c000e1c8 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000e16e:	47                   	inc    edi
c000e16f:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e175:	76 31                	jbe    c000e1a8 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000e177:	c7 05 c4 35 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00235c4,0xc8000
c000e181:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e186:	75 28                	jne    c000e1b0 <Virt::allocateKernelVirtualPages(int)+0x72>
c000e188:	bf 00 80 0c 00       	mov    edi,0xc8000
c000e18d:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e192:	57                   	push   edi
c000e193:	e8 7f ff ff ff       	call   c000e117 <Virt::getPageState(unsigned long)>
c000e198:	5a                   	pop    edx
c000e199:	84 c0                	test   al,al
c000e19b:	74 c6                	je     c000e163 <Virt::allocateKernelVirtualPages(int)+0x25>
c000e19d:	47                   	inc    edi
c000e19e:	31 db                	xor    ebx,ebx
c000e1a0:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e1a6:	77 cf                	ja     c000e177 <Virt::allocateKernelVirtualPages(int)+0x39>
c000e1a8:	89 3d c4 35 02 c0    	mov    DWORD PTR ds:0xc00235c4,edi
c000e1ae:	eb a8                	jmp    c000e158 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e1b0:	83 ec 0c             	sub    esp,0xc
c000e1b3:	68 3c 10 02 c0       	push   0xc002103c
c000e1b8:	e8 2f 72 00 00       	call   c00153ec <Krnl::panic(char const*)>
c000e1bd:	8b 3d c4 35 02 c0    	mov    edi,DWORD PTR ds:0xc00235c4
c000e1c3:	83 c4 10             	add    esp,0x10
c000e1c6:	eb 90                	jmp    c000e158 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e1c8:	89 2d c4 35 02 c0    	mov    DWORD PTR ds:0xc00235c4,ebp
c000e1ce:	4b                   	dec    ebx
c000e1cf:	74 5f                	je     c000e230 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000e1d1:	85 f6                	test   esi,esi
c000e1d3:	74 3d                	je     c000e212 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e1d5:	89 e8                	mov    eax,ebp
c000e1d7:	31 db                	xor    ebx,ebx
c000e1d9:	8d 7e ff             	lea    edi,[esi-0x1]
c000e1dc:	eb 14                	jmp    c000e1f2 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000e1de:	6a 01                	push   0x1
c000e1e0:	43                   	inc    ebx
c000e1e1:	50                   	push   eax
c000e1e2:	e8 f9 fe ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e1e7:	58                   	pop    eax
c000e1e8:	39 f3                	cmp    ebx,esi
c000e1ea:	5a                   	pop    edx
c000e1eb:	74 25                	je     c000e212 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e1ed:	a1 c4 35 02 c0       	mov    eax,ds:0xc00235c4
c000e1f2:	8d 50 01             	lea    edx,[eax+0x1]
c000e1f5:	85 db                	test   ebx,ebx
c000e1f7:	89 15 c4 35 02 c0    	mov    DWORD PTR ds:0xc00235c4,edx
c000e1fd:	74 20                	je     c000e21f <Virt::allocateKernelVirtualPages(int)+0xe1>
c000e1ff:	39 df                	cmp    edi,ebx
c000e201:	75 db                	jne    c000e1de <Virt::allocateKernelVirtualPages(int)+0xa0>
c000e203:	6a 03                	push   0x3
c000e205:	43                   	inc    ebx
c000e206:	50                   	push   eax
c000e207:	e8 d4 fe ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e20c:	59                   	pop    ecx
c000e20d:	39 f3                	cmp    ebx,esi
c000e20f:	58                   	pop    eax
c000e210:	75 db                	jne    c000e1ed <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e212:	83 c4 1c             	add    esp,0x1c
c000e215:	89 e8                	mov    eax,ebp
c000e217:	c1 e0 0c             	shl    eax,0xc
c000e21a:	5b                   	pop    ebx
c000e21b:	5e                   	pop    esi
c000e21c:	5f                   	pop    edi
c000e21d:	5d                   	pop    ebp
c000e21e:	c3                   	ret    
c000e21f:	6a 02                	push   0x2
c000e221:	bb 01 00 00 00       	mov    ebx,0x1
c000e226:	50                   	push   eax
c000e227:	e8 b4 fe ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e22c:	58                   	pop    eax
c000e22d:	5a                   	pop    edx
c000e22e:	eb bd                	jmp    c000e1ed <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e230:	6a 04                	push   0x4
c000e232:	8d 45 01             	lea    eax,[ebp+0x1]
c000e235:	55                   	push   ebp
c000e236:	a3 c4 35 02 c0       	mov    ds:0xc00235c4,eax
c000e23b:	e8 a0 fe ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e240:	59                   	pop    ecx
c000e241:	5b                   	pop    ebx
c000e242:	89 e8                	mov    eax,ebp
c000e244:	c1 e0 0c             	shl    eax,0xc
c000e247:	83 c4 1c             	add    esp,0x1c
c000e24a:	5b                   	pop    ebx
c000e24b:	5e                   	pop    esi
c000e24c:	5f                   	pop    edi
c000e24d:	5d                   	pop    ebp
c000e24e:	c3                   	ret    

c000e24f <Virt::virtualMemorySetup()>:
c000e24f:	53                   	push   ebx
c000e250:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e255:	83 ec 08             	sub    esp,0x8
c000e258:	6a 0f                	push   0xf
c000e25a:	53                   	push   ebx
c000e25b:	43                   	inc    ebx
c000e25c:	e8 7f fe ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e261:	59                   	pop    ecx
c000e262:	58                   	pop    eax
c000e263:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e269:	75 ed                	jne    c000e258 <Virt::virtualMemorySetup()+0x9>
c000e26b:	50                   	push   eax
c000e26c:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e271:	50                   	push   eax
c000e272:	68 00 00 00 c8       	push   0xc8000000
c000e277:	68 c3 11 02 c0       	push   0xc00211c3
c000e27c:	e8 d8 0e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e281:	58                   	pop    eax
c000e282:	5a                   	pop    edx
c000e283:	68 00 f0 ff ef       	push   0xeffff000
c000e288:	68 d7 11 02 c0       	push   0xc00211d7
c000e28d:	e8 c7 0e 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e292:	83 c4 10             	add    esp,0x10
c000e295:	50                   	push   eax
c000e296:	50                   	push   eax
c000e297:	6a 00                	push   0x0
c000e299:	53                   	push   ebx
c000e29a:	43                   	inc    ebx
c000e29b:	e8 40 fe ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2a0:	83 c4 10             	add    esp,0x10
c000e2a3:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e2a9:	75 ea                	jne    c000e295 <Virt::virtualMemorySetup()+0x46>
c000e2ab:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000e2b0:	51                   	push   ecx
c000e2b1:	51                   	push   ecx
c000e2b2:	6a 0f                	push   0xf
c000e2b4:	53                   	push   ebx
c000e2b5:	43                   	inc    ebx
c000e2b6:	e8 25 fe ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2bb:	83 c4 10             	add    esp,0x10
c000e2be:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000e2c4:	75 ea                	jne    c000e2b0 <Virt::virtualMemorySetup()+0x61>
c000e2c6:	83 c4 08             	add    esp,0x8
c000e2c9:	5b                   	pop    ebx
c000e2ca:	c3                   	ret    

c000e2cb <Virt::getAKernelVAS()>:
c000e2cb:	a1 84 42 02 c0       	mov    eax,ds:0xc0024284
c000e2d0:	c3                   	ret    

c000e2d1 <Virt::setupPageSwapping(int)>:
c000e2d1:	57                   	push   edi
c000e2d2:	56                   	push   esi
c000e2d3:	53                   	push   ebx
c000e2d4:	83 ec 1c             	sub    esp,0x1c
c000e2d7:	68 14 01 00 00       	push   0x114
c000e2dc:	e8 43 0d 00 00       	call   c000f024 <operator new(unsigned long)>
c000e2e1:	83 c4 0c             	add    esp,0xc
c000e2e4:	8b 3d 74 55 02 c0    	mov    edi,DWORD PTR ds:0xc0025574
c000e2ea:	89 c6                	mov    esi,eax
c000e2ec:	57                   	push   edi
c000e2ed:	68 eb 11 02 c0       	push   0xc00211eb
c000e2f2:	50                   	push   eax
c000e2f3:	e8 98 13 00 00       	call   c000f690 <File::File(char const*, Process*)>
c000e2f8:	89 34 24             	mov    DWORD PTR [esp],esi
c000e2fb:	e8 6c 15 00 00       	call   c000f86c <File::unlink()>
c000e300:	58                   	pop    eax
c000e301:	5a                   	pop    edx
c000e302:	6a 12                	push   0x12
c000e304:	56                   	push   esi
c000e305:	e8 ea 13 00 00       	call   c000f6f4 <File::open(FileOpenMode)>
c000e30a:	83 c4 10             	add    esp,0x10
c000e30d:	85 c0                	test   eax,eax
c000e30f:	0f 85 b6 00 00 00    	jne    c000e3cb <Virt::setupPageSwapping(int)+0xfa>
c000e315:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e319:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e321:	c1 e3 08             	shl    ebx,0x8
c000e324:	83 ec 0c             	sub    esp,0xc
c000e327:	c1 fb 04             	sar    ebx,0x4
c000e32a:	68 00 00 01 00       	push   0x10000
c000e32f:	e8 f3 db ff ff       	call   c000bf27 <malloc>
c000e334:	83 c4 0c             	add    esp,0xc
c000e337:	89 c7                	mov    edi,eax
c000e339:	68 00 00 01 00       	push   0x10000
c000e33e:	6a 00                	push   0x0
c000e340:	50                   	push   eax
c000e341:	e8 c2 22 ff ff       	call   c0000608 <memset>
c000e346:	83 c4 10             	add    esp,0x10
c000e349:	4b                   	dec    ebx
c000e34a:	83 fb ff             	cmp    ebx,0xffffffff
c000e34d:	74 4a                	je     c000e399 <Virt::setupPageSwapping(int)+0xc8>
c000e34f:	83 ec 0c             	sub    esp,0xc
c000e352:	8b 06                	mov    eax,DWORD PTR [esi]
c000e354:	8d 54 24 18          	lea    edx,[esp+0x18]
c000e358:	52                   	push   edx
c000e359:	57                   	push   edi
c000e35a:	6a 00                	push   0x0
c000e35c:	68 00 00 01 00       	push   0x10000
c000e361:	56                   	push   esi
c000e362:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e365:	83 c4 20             	add    esp,0x20
c000e368:	85 c0                	test   eax,eax
c000e36a:	75 4d                	jne    c000e3b9 <Virt::setupPageSwapping(int)+0xe8>
c000e36c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e370:	3d 00 00 01 00       	cmp    eax,0x10000
c000e375:	74 d2                	je     c000e349 <Virt::setupPageSwapping(int)+0x78>
c000e377:	52                   	push   edx
c000e378:	4b                   	dec    ebx
c000e379:	52                   	push   edx
c000e37a:	50                   	push   eax
c000e37b:	68 3e 12 02 c0       	push   0xc002123e
c000e380:	e8 d4 0d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e385:	c7 04 24 47 12 02 c0 	mov    DWORD PTR [esp],0xc0021247
c000e38c:	e8 5b 70 00 00       	call   c00153ec <Krnl::panic(char const*)>
c000e391:	83 c4 10             	add    esp,0x10
c000e394:	83 fb ff             	cmp    ebx,0xffffffff
c000e397:	75 b6                	jne    c000e34f <Virt::setupPageSwapping(int)+0x7e>
c000e399:	83 ec 0c             	sub    esp,0xc
c000e39c:	56                   	push   esi
c000e39d:	e8 b0 13 00 00       	call   c000f752 <File::close()>
c000e3a2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e3a5:	e8 9d db ff ff       	call   c000bf47 <rfree>
c000e3aa:	8b 06                	mov    eax,DWORD PTR [esi]
c000e3ac:	89 34 24             	mov    DWORD PTR [esp],esi
c000e3af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e3b2:	83 c4 20             	add    esp,0x20
c000e3b5:	5b                   	pop    ebx
c000e3b6:	5e                   	pop    esi
c000e3b7:	5f                   	pop    edi
c000e3b8:	c3                   	ret    
c000e3b9:	51                   	push   ecx
c000e3ba:	51                   	push   ecx
c000e3bb:	50                   	push   eax
c000e3bc:	68 26 12 02 c0       	push   0xc0021226
c000e3c1:	e8 93 0d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e3c6:	83 c4 10             	add    esp,0x10
c000e3c9:	eb a1                	jmp    c000e36c <Virt::setupPageSwapping(int)+0x9b>
c000e3cb:	53                   	push   ebx
c000e3cc:	53                   	push   ebx
c000e3cd:	50                   	push   eax
c000e3ce:	68 02 12 02 c0       	push   0xc0021202
c000e3d3:	e8 81 0d 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e3d8:	c7 04 24 0b 12 02 c0 	mov    DWORD PTR [esp],0xc002120b
c000e3df:	e8 08 70 00 00       	call   c00153ec <Krnl::panic(char const*)>
c000e3e4:	83 c4 10             	add    esp,0x10
c000e3e7:	e9 29 ff ff ff       	jmp    c000e315 <Virt::setupPageSwapping(int)+0x44>

c000e3ec <VAS::VAS()>:
c000e3ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e3f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3fb:	a3 84 42 02 c0       	mov    ds:0xc0024284,eax
c000e400:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e404:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e408:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e40c:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e40f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e413:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e41a:	90                   	nop
c000e41b:	c3                   	ret    

c000e41c <VAS::VAS(VAS*)>:
c000e41c:	83 ec 0c             	sub    esp,0xc
c000e41f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e423:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e42a:	83 ec 0c             	sub    esp,0xc
c000e42d:	68 5c 10 02 c0       	push   0xc002105c
c000e432:	e8 b5 6f 00 00       	call   c00153ec <Krnl::panic(char const*)>
c000e437:	83 c4 10             	add    esp,0x10
c000e43a:	90                   	nop
c000e43b:	83 c4 0c             	add    esp,0xc
c000e43e:	c3                   	ret    
c000e43f:	90                   	nop

c000e440 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e440:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e444:	89 c2                	mov    edx,eax
c000e446:	c1 ea 16             	shr    edx,0x16
c000e449:	c1 e8 0a             	shr    eax,0xa
c000e44c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e451:	19 c9                	sbb    ecx,ecx
c000e453:	25 fc 0f 00 00       	and    eax,0xffc
c000e458:	c1 e2 0c             	shl    edx,0xc
c000e45b:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e461:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e468:	01 d0                	add    eax,edx
c000e46a:	c3                   	ret    
c000e46b:	90                   	nop

c000e46c <VAS::getPageTableEntry(unsigned long)>:
c000e46c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e470:	89 ca                	mov    edx,ecx
c000e472:	c1 ea 16             	shr    edx,0x16
c000e475:	c1 e9 0a             	shr    ecx,0xa
c000e478:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e47e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e484:	c1 e0 0c             	shl    eax,0xc
c000e487:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e48a:	c3                   	ret    

c000e48b <Virt::freeKernelVirtualPages(unsigned long)>:
c000e48b:	57                   	push   edi
c000e48c:	56                   	push   esi
c000e48d:	be 01 00 00 00       	mov    esi,0x1
c000e492:	53                   	push   ebx
c000e493:	83 ec 10             	sub    esp,0x10
c000e496:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e49a:	c1 eb 0c             	shr    ebx,0xc
c000e49d:	eb 3e                	jmp    c000e4dd <Virt::freeKernelVirtualPages(unsigned long)+0x52>
c000e49f:	e8 27 fe ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c000e4a4:	51                   	push   ecx
c000e4a5:	51                   	push   ecx
c000e4a6:	57                   	push   edi
c000e4a7:	50                   	push   eax
c000e4a8:	e8 bf ff ff ff       	call   c000e46c <VAS::getPageTableEntry(unsigned long)>
c000e4ad:	83 c4 10             	add    esp,0x10
c000e4b0:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e4b4:	8b 00                	mov    eax,DWORD PTR [eax]
c000e4b6:	f6 c4 04             	test   ah,0x4
c000e4b9:	75 5f                	jne    c000e51a <Virt::freeKernelVirtualPages(unsigned long)+0x8f>
c000e4bb:	80 fa 04             	cmp    dl,0x4
c000e4be:	74 78                	je     c000e538 <Virt::freeKernelVirtualPages(unsigned long)+0xad>
c000e4c0:	80 fa 02             	cmp    dl,0x2
c000e4c3:	0f 84 88 00 00 00    	je     c000e551 <Virt::freeKernelVirtualPages(unsigned long)+0xc6>
c000e4c9:	80 fa 03             	cmp    dl,0x3
c000e4cc:	0f 84 ac 00 00 00    	je     c000e57e <Virt::freeKernelVirtualPages(unsigned long)+0xf3>
c000e4d2:	fe ca                	dec    dl
c000e4d4:	0f 84 92 00 00 00    	je     c000e56c <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e4da:	43                   	inc    ebx
c000e4db:	31 f6                	xor    esi,esi
c000e4dd:	53                   	push   ebx
c000e4de:	e8 34 fc ff ff       	call   c000e117 <Virt::getPageState(unsigned long)>
c000e4e3:	5f                   	pop    edi
c000e4e4:	89 df                	mov    edi,ebx
c000e4e6:	c1 e7 0c             	shl    edi,0xc
c000e4e9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e4ed:	84 c0                	test   al,al
c000e4ef:	75 ae                	jne    c000e49f <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e4f1:	83 ec 0c             	sub    esp,0xc
c000e4f4:	68 4d 12 02 c0       	push   0xc002124d
c000e4f9:	e8 ee 6e 00 00       	call   c00153ec <Krnl::panic(char const*)>
c000e4fe:	e8 c8 fd ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c000e503:	5a                   	pop    edx
c000e504:	59                   	pop    ecx
c000e505:	57                   	push   edi
c000e506:	50                   	push   eax
c000e507:	e8 60 ff ff ff       	call   c000e46c <VAS::getPageTableEntry(unsigned long)>
c000e50c:	83 c4 10             	add    esp,0x10
c000e50f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e513:	8b 00                	mov    eax,DWORD PTR [eax]
c000e515:	f6 c4 04             	test   ah,0x4
c000e518:	74 c0                	je     c000e4da <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e51a:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e51e:	83 ec 0c             	sub    esp,0xc
c000e521:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e526:	50                   	push   eax
c000e527:	e8 44 df ff ff       	call   c000c470 <Phys::freePage(unsigned long)>
c000e52c:	83 c4 10             	add    esp,0x10
c000e52f:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e533:	80 fa 04             	cmp    dl,0x4
c000e536:	75 88                	jne    c000e4c0 <Virt::freeKernelVirtualPages(unsigned long)+0x35>
c000e538:	89 f0                	mov    eax,esi
c000e53a:	84 c0                	test   al,al
c000e53c:	75 46                	jne    c000e584 <Virt::freeKernelVirtualPages(unsigned long)+0xf9>
c000e53e:	c7 44 24 20 80 10 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021080
c000e546:	83 c4 10             	add    esp,0x10
c000e549:	5b                   	pop    ebx
c000e54a:	5e                   	pop    esi
c000e54b:	5f                   	pop    edi
c000e54c:	e9 9b 6e 00 00       	jmp    c00153ec <Krnl::panic(char const*)>
c000e551:	89 f0                	mov    eax,esi
c000e553:	84 c0                	test   al,al
c000e555:	75 15                	jne    c000e56c <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e557:	83 ec 0c             	sub    esp,0xc
c000e55a:	68 69 12 02 c0       	push   0xc0021269
c000e55f:	e8 88 6e 00 00       	call   c00153ec <Krnl::panic(char const*)>
c000e564:	83 c4 10             	add    esp,0x10
c000e567:	e9 6e ff ff ff       	jmp    c000e4da <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e56c:	50                   	push   eax
c000e56d:	50                   	push   eax
c000e56e:	6a 00                	push   0x0
c000e570:	53                   	push   ebx
c000e571:	e8 6a fb ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e576:	83 c4 10             	add    esp,0x10
c000e579:	e9 5c ff ff ff       	jmp    c000e4da <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e57e:	89 f0                	mov    eax,esi
c000e580:	84 c0                	test   al,al
c000e582:	75 14                	jne    c000e598 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000e584:	52                   	push   edx
c000e585:	52                   	push   edx
c000e586:	6a 00                	push   0x0
c000e588:	53                   	push   ebx
c000e589:	e8 52 fb ff ff       	call   c000e0e0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e58e:	83 c4 10             	add    esp,0x10
c000e591:	83 c4 10             	add    esp,0x10
c000e594:	5b                   	pop    ebx
c000e595:	5e                   	pop    esi
c000e596:	5f                   	pop    edi
c000e597:	c3                   	ret    
c000e598:	c7 44 24 20 85 12 02 c0 	mov    DWORD PTR [esp+0x20],0xc0021285
c000e5a0:	83 c4 10             	add    esp,0x10
c000e5a3:	5b                   	pop    ebx
c000e5a4:	5e                   	pop    esi
c000e5a5:	5f                   	pop    edi
c000e5a6:	e9 41 6e 00 00       	jmp    c00153ec <Krnl::panic(char const*)>
c000e5ab:	90                   	nop

c000e5ac <VAS::freeAllocatedPages(unsigned long)>:
c000e5ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e5b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e5b4:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e5b8:	74 09                	je     c000e5c3 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e5ba:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e5be:	e9 c8 fe ff ff       	jmp    c000e48b <Virt::freeKernelVirtualPages(unsigned long)>
c000e5c3:	c7 44 24 04 a4 10 02 c0 	mov    DWORD PTR [esp+0x4],0xc00210a4
c000e5cb:	e9 89 0b 00 00       	jmp    c000f159 <Dbg::kprintf(char const*, ...)>

c000e5d0 <VAS::virtualToPhysical(unsigned long)>:
c000e5d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e5d4:	50                   	push   eax
c000e5d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e5d9:	52                   	push   edx
c000e5da:	e8 8d fe ff ff       	call   c000e46c <VAS::getPageTableEntry(unsigned long)>
c000e5df:	59                   	pop    ecx
c000e5e0:	8b 00                	mov    eax,DWORD PTR [eax]
c000e5e2:	5a                   	pop    edx
c000e5e3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e5e8:	c3                   	ret    
c000e5e9:	90                   	nop

c000e5ea <VAS::reflagRange(unsigned long, int, int, int)>:
c000e5ea:	55                   	push   ebp
c000e5eb:	57                   	push   edi
c000e5ec:	56                   	push   esi
c000e5ed:	53                   	push   ebx
c000e5ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e5f2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e5f6:	89 c3                	mov    ebx,eax
c000e5f8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000e5fc:	c1 e3 0c             	shl    ebx,0xc
c000e5ff:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e603:	01 f3                	add    ebx,esi
c000e605:	85 c0                	test   eax,eax
c000e607:	7e 1f                	jle    c000e628 <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c000e609:	56                   	push   esi
c000e60a:	81 c6 00 10 00 00    	add    esi,0x1000
c000e610:	55                   	push   ebp
c000e611:	e8 56 fe ff ff       	call   c000e46c <VAS::getPageTableEntry(unsigned long)>
c000e616:	5a                   	pop    edx
c000e617:	59                   	pop    ecx
c000e618:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e61a:	21 f9                	and    ecx,edi
c000e61c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e620:	09 d1                	or     ecx,edx
c000e622:	39 f3                	cmp    ebx,esi
c000e624:	89 08                	mov    DWORD PTR [eax],ecx
c000e626:	75 e1                	jne    c000e609 <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c000e628:	5b                   	pop    ebx
c000e629:	5e                   	pop    esi
c000e62a:	5f                   	pop    edi
c000e62b:	5d                   	pop    ebp
c000e62c:	c3                   	ret    
c000e62d:	90                   	nop

c000e62e <VAS::setToWriteCombining(unsigned long, int)>:
c000e62e:	83 ec 0c             	sub    esp,0xc
c000e631:	e8 4a 5c 00 00       	call   c0014280 <thisCPU()>
c000e636:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000e63d:	75 04                	jne    c000e643 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000e63f:	83 c4 0c             	add    esp,0xc
c000e642:	c3                   	ret    
c000e643:	83 ec 0c             	sub    esp,0xc
c000e646:	68 80 00 00 00       	push   0x80
c000e64b:	6a ff                	push   0xffffffff
c000e64d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e651:	50                   	push   eax
c000e652:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e656:	52                   	push   edx
c000e657:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e65b:	51                   	push   ecx
c000e65c:	e8 89 ff ff ff       	call   c000e5ea <VAS::reflagRange(unsigned long, int, int, int)>
c000e661:	83 c4 20             	add    esp,0x20
c000e664:	83 c4 0c             	add    esp,0xc
c000e667:	c3                   	ret    

c000e668 <VAS::mapOtherVASIn(bool, VAS*)>:
c000e668:	83 ec 0c             	sub    esp,0xc
c000e66b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e66f:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e674:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e67b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e67e:	19 c0                	sbb    eax,eax
c000e680:	83 ca 03             	or     edx,0x3
c000e683:	83 e0 fc             	and    eax,0xfffffffc
c000e686:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e68d:	e8 f3 0a 01 00       	call   c001f185 <CPU::readCR3()>
c000e692:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e696:	83 c4 0c             	add    esp,0xc
c000e699:	e9 f9 0a 01 00       	jmp    c001f197 <CPU::writeCR3(unsigned long)>

c000e69e <VAS::~VAS()>:
c000e69e:	83 ec 2c             	sub    esp,0x2c
c000e6a1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e6a9:	e8 47 9d 00 00       	call   c00183f5 <lockScheduler()>
c000e6ae:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e6b3:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e6b8:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e6be:	83 ec 04             	sub    esp,0x4
c000e6c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e6c5:	6a 01                	push   0x1
c000e6c7:	50                   	push   eax
c000e6c8:	e8 9b ff ff ff       	call   c000e668 <VAS::mapOtherVASIn(bool, VAS*)>
c000e6cd:	83 c4 10             	add    esp,0x10
c000e6d0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e6d8:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e6e0:	0f 8f d7 00 00 00    	jg     c000e7bd <VAS::~VAS()+0x11f>
c000e6e6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e6ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e6ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6f1:	c1 e2 02             	shl    edx,0x2
c000e6f4:	01 d0                	add    eax,edx
c000e6f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000e6f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e700:	83 e0 01             	and    eax,0x1
c000e703:	0f 84 ab 00 00 00    	je     c000e7b4 <VAS::~VAS()+0x116>
c000e709:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e711:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e719:	7f 75                	jg     c000e790 <VAS::~VAS()+0xf2>
c000e71b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e71f:	c1 e0 0a             	shl    eax,0xa
c000e722:	89 c2                	mov    edx,eax
c000e724:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e728:	01 d0                	add    eax,edx
c000e72a:	c1 e0 0c             	shl    eax,0xc
c000e72d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e731:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e736:	8b 00                	mov    eax,DWORD PTR [eax]
c000e738:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e73b:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e741:	83 ec 04             	sub    esp,0x4
c000e744:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e748:	6a 01                	push   0x1
c000e74a:	50                   	push   eax
c000e74b:	e8 f0 fc ff ff       	call   c000e440 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e750:	83 c4 10             	add    esp,0x10
c000e753:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e75b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e75d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e761:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e765:	25 01 04 00 00       	and    eax,0x401
c000e76a:	3d 01 04 00 00       	cmp    eax,0x401
c000e76f:	75 19                	jne    c000e78a <VAS::~VAS()+0xec>
c000e771:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e775:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e77a:	83 ec 0c             	sub    esp,0xc
c000e77d:	50                   	push   eax
c000e77e:	e8 ed dc ff ff       	call   c000c470 <Phys::freePage(unsigned long)>
c000e783:	83 c4 10             	add    esp,0x10
c000e786:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e78a:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e78e:	eb 81                	jmp    c000e711 <VAS::~VAS()+0x73>
c000e790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e794:	25 00 04 00 00       	and    eax,0x400
c000e799:	74 19                	je     c000e7b4 <VAS::~VAS()+0x116>
c000e79b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79f:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e7a4:	83 ec 0c             	sub    esp,0xc
c000e7a7:	50                   	push   eax
c000e7a8:	e8 c3 dc ff ff       	call   c000c470 <Phys::freePage(unsigned long)>
c000e7ad:	83 c4 10             	add    esp,0x10
c000e7b0:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e7b4:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e7b8:	e9 1b ff ff ff       	jmp    c000e6d8 <VAS::~VAS()+0x3a>
c000e7bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7c1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e7c4:	83 ec 0c             	sub    esp,0xc
c000e7c7:	50                   	push   eax
c000e7c8:	e8 be fc ff ff       	call   c000e48b <Virt::freeKernelVirtualPages(unsigned long)>
c000e7cd:	83 c4 10             	add    esp,0x10
c000e7d0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7d4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e7d7:	83 ec 0c             	sub    esp,0xc
c000e7da:	50                   	push   eax
c000e7db:	e8 90 dc ff ff       	call   c000c470 <Phys::freePage(unsigned long)>
c000e7e0:	83 c4 10             	add    esp,0x10
c000e7e3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e7e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e7eb:	c1 e0 02             	shl    eax,0x2
c000e7ee:	83 ec 08             	sub    esp,0x8
c000e7f1:	50                   	push   eax
c000e7f2:	68 c8 10 02 c0       	push   0xc00210c8
c000e7f7:	e8 5d 09 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e7fc:	83 c4 10             	add    esp,0x10
c000e7ff:	e8 f3 9b 00 00       	call   c00183f7 <unlockScheduler()>
c000e804:	90                   	nop
c000e805:	83 c4 2c             	add    esp,0x2c
c000e808:	c3                   	ret    
c000e809:	90                   	nop

c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e80a:	55                   	push   ebp
c000e80b:	57                   	push   edi
c000e80c:	56                   	push   esi
c000e80d:	53                   	push   ebx
c000e80e:	83 ec 1c             	sub    esp,0x1c
c000e811:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e815:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e819:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e81f:	77 08                	ja     c000e829 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e821:	0f 20 d8             	mov    eax,cr3
c000e824:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e827:	75 49                	jne    c000e872 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c000e829:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e82d:	09 d8                	or     eax,ebx
c000e82f:	a9 ff 0f 00 00       	test   eax,0xfff
c000e834:	75 59                	jne    c000e88f <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c000e836:	89 de                	mov    esi,ebx
c000e838:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e83b:	c1 ee 16             	shr    esi,0x16
c000e83e:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e845:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e849:	74 56                	je     c000e8a1 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c000e84b:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e851:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e855:	c1 eb 0a             	shr    ebx,0xa
c000e858:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e85c:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e862:	09 d0                	or     eax,edx
c000e864:	c1 e6 0c             	shl    esi,0xc
c000e867:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e86a:	83 c4 1c             	add    esp,0x1c
c000e86d:	5b                   	pop    ebx
c000e86e:	5e                   	pop    esi
c000e86f:	5f                   	pop    edi
c000e870:	5d                   	pop    ebp
c000e871:	c3                   	ret    
c000e872:	83 ec 0c             	sub    esp,0xc
c000e875:	68 e8 10 02 c0       	push   0xc00210e8
c000e87a:	e8 da 08 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000e87f:	83 c4 10             	add    esp,0x10
c000e882:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e886:	09 d8                	or     eax,ebx
c000e888:	a9 ff 0f 00 00       	test   eax,0xfff
c000e88d:	74 a7                	je     c000e836 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e88f:	83 ec 0c             	sub    esp,0xc
c000e892:	68 50 11 02 c0       	push   0xc0021150
c000e897:	e8 50 6b 00 00       	call   c00153ec <Krnl::panic(char const*)>
c000e89c:	83 c4 10             	add    esp,0x10
c000e89f:	eb 95                	jmp    c000e836 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e8a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e8a5:	e8 53 dc ff ff       	call   c000c4fd <Phys::allocatePage()>
c000e8aa:	89 c5                	mov    ebp,eax
c000e8ac:	e8 1a fa ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c000e8b1:	83 ec 0c             	sub    esp,0xc
c000e8b4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e8b8:	6a 01                	push   0x1
c000e8ba:	e8 7f f8 ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c000e8bf:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e8c6:	6a 01                	push   0x1
c000e8c8:	50                   	push   eax
c000e8c9:	55                   	push   ebp
c000e8ca:	81 cd 07 04 00 00    	or     ebp,0x407
c000e8d0:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e8d4:	51                   	push   ecx
c000e8d5:	e8 22 02 00 00       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e8da:	83 c4 1c             	add    esp,0x1c
c000e8dd:	68 00 10 00 00       	push   0x1000
c000e8e2:	6a 00                	push   0x0
c000e8e4:	50                   	push   eax
c000e8e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e8e9:	e8 1a 1d ff ff       	call   c0000608 <memset>
c000e8ee:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e8f2:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e8f5:	e8 91 fb ff ff       	call   c000e48b <Virt::freeKernelVirtualPages(unsigned long)>
c000e8fa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e8fe:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e901:	83 c4 10             	add    esp,0x10
c000e904:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e907:	e9 3f ff ff ff       	jmp    c000e84b <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e90c <VAS::allocatePages(int, int)>:
c000e90c:	55                   	push   ebp
c000e90d:	57                   	push   edi
c000e90e:	56                   	push   esi
c000e90f:	53                   	push   ebx
c000e910:	83 ec 1c             	sub    esp,0x1c
c000e913:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e917:	e8 64 59 00 00       	call   c0014280 <thisCPU()>
c000e91c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e922:	83 e0 01             	and    eax,0x1
c000e925:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e929:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e92d:	0f 85 d5 00 00 00    	jne    c000ea08 <VAS::allocatePages(int, int)+0xfc>
c000e933:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e936:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e93a:	85 c0                	test   eax,eax
c000e93c:	0f 84 aa 00 00 00    	je     c000e9ec <VAS::allocatePages(int, int)+0xe0>
c000e942:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e946:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e94a:	c1 e6 0c             	shl    esi,0xc
c000e94d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e951:	01 de                	add    esi,ebx
c000e953:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e957:	81 cd 00 04 00 00    	or     ebp,0x400
c000e95d:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000e960:	85 c0                	test   eax,eax
c000e962:	7e 25                	jle    c000e989 <VAS::allocatePages(int, int)+0x7d>
c000e964:	e8 94 db ff ff       	call   c000c4fd <Phys::allocatePage()>
c000e969:	55                   	push   ebp
c000e96a:	53                   	push   ebx
c000e96b:	50                   	push   eax
c000e96c:	57                   	push   edi
c000e96d:	e8 98 fe ff ff       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c000e972:	83 c4 10             	add    esp,0x10
c000e975:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e97a:	74 03                	je     c000e97f <VAS::allocatePages(int, int)+0x73>
c000e97c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e97f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e985:	39 de                	cmp    esi,ebx
c000e987:	75 db                	jne    c000e964 <VAS::allocatePages(int, int)+0x58>
c000e989:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e98e:	74 3f                	je     c000e9cf <VAS::allocatePages(int, int)+0xc3>
c000e990:	c1 ee 0a             	shr    esi,0xa
c000e993:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e997:	c1 eb 0a             	shr    ebx,0xa
c000e99a:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000e9a0:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e9a6:	81 ee 00 00 40 00    	sub    esi,0x400000
c000e9ac:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e9b2:	39 f3                	cmp    ebx,esi
c000e9b4:	77 0d                	ja     c000e9c3 <VAS::allocatePages(int, int)+0xb7>
c000e9b6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e9b9:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e9bf:	39 de                	cmp    esi,ebx
c000e9c1:	73 f3                	jae    c000e9b6 <VAS::allocatePages(int, int)+0xaa>
c000e9c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9c7:	83 c4 1c             	add    esp,0x1c
c000e9ca:	5b                   	pop    ebx
c000e9cb:	5e                   	pop    esi
c000e9cc:	5f                   	pop    edi
c000e9cd:	5d                   	pop    ebp
c000e9ce:	c3                   	ret    
c000e9cf:	e8 b1 07 01 00       	call   c001f185 <CPU::readCR3()>
c000e9d4:	83 ec 0c             	sub    esp,0xc
c000e9d7:	50                   	push   eax
c000e9d8:	e8 ba 07 01 00       	call   c001f197 <CPU::writeCR3(unsigned long)>
c000e9dd:	83 c4 10             	add    esp,0x10
c000e9e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9e4:	83 c4 1c             	add    esp,0x1c
c000e9e7:	5b                   	pop    ebx
c000e9e8:	5e                   	pop    esi
c000e9e9:	5f                   	pop    edi
c000e9ea:	5d                   	pop    ebp
c000e9eb:	c3                   	ret    
c000e9ec:	83 ec 0c             	sub    esp,0xc
c000e9ef:	68 74 11 02 c0       	push   0xc0021174
c000e9f4:	e8 f3 69 00 00       	call   c00153ec <Krnl::panic(char const*)>
c000e9f9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e9fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea00:	83 c4 10             	add    esp,0x10
c000ea03:	e9 3a ff ff ff       	jmp    c000e942 <VAS::allocatePages(int, int)+0x36>
c000ea08:	83 ec 0c             	sub    esp,0xc
c000ea0b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ea0f:	53                   	push   ebx
c000ea10:	e8 29 f7 ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c000ea15:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ea19:	83 c4 10             	add    esp,0x10
c000ea1c:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000ea21:	0f 87 94 00 00 00    	ja     c000eabb <VAS::allocatePages(int, int)+0x1af>
c000ea27:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ea2b:	85 d2                	test   edx,edx
c000ea2d:	7e 3c                	jle    c000ea6b <VAS::allocatePages(int, int)+0x15f>
c000ea2f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ea33:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ea37:	c1 e5 0c             	shl    ebp,0xc
c000ea3a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea3e:	81 ce 00 04 00 00    	or     esi,0x400
c000ea44:	01 dd                	add    ebp,ebx
c000ea46:	e8 b2 da ff ff       	call   c000c4fd <Phys::allocatePage()>
c000ea4b:	56                   	push   esi
c000ea4c:	53                   	push   ebx
c000ea4d:	50                   	push   eax
c000ea4e:	57                   	push   edi
c000ea4f:	e8 b6 fd ff ff       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c000ea54:	83 c4 10             	add    esp,0x10
c000ea57:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea5c:	74 03                	je     c000ea61 <VAS::allocatePages(int, int)+0x155>
c000ea5e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea61:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea67:	39 dd                	cmp    ebp,ebx
c000ea69:	75 db                	jne    c000ea46 <VAS::allocatePages(int, int)+0x13a>
c000ea6b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea70:	0f 84 59 ff ff ff    	je     c000e9cf <VAS::allocatePages(int, int)+0xc3>
c000ea76:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea7a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ea7e:	c1 e0 0c             	shl    eax,0xc
c000ea81:	89 d3                	mov    ebx,edx
c000ea83:	c1 eb 0a             	shr    ebx,0xa
c000ea86:	01 d0                	add    eax,edx
c000ea88:	c1 e8 0a             	shr    eax,0xa
c000ea8b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000ea91:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ea96:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ea9c:	2d 00 00 40 00       	sub    eax,0x400000
c000eaa1:	39 c3                	cmp    ebx,eax
c000eaa3:	0f 87 1a ff ff ff    	ja     c000e9c3 <VAS::allocatePages(int, int)+0xb7>
c000eaa9:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eaac:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eab2:	39 d8                	cmp    eax,ebx
c000eab4:	73 f3                	jae    c000eaa9 <VAS::allocatePages(int, int)+0x19d>
c000eab6:	e9 08 ff ff ff       	jmp    c000e9c3 <VAS::allocatePages(int, int)+0xb7>
c000eabb:	e8 c0 57 00 00       	call   c0014280 <thisCPU()>
c000eac0:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000eac7:	0f 84 5a ff ff ff    	je     c000ea27 <VAS::allocatePages(int, int)+0x11b>
c000eacd:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ead1:	80 cd 01             	or     ch,0x1
c000ead4:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c000ead8:	e9 4a ff ff ff       	jmp    c000ea27 <VAS::allocatePages(int, int)+0x11b>
c000eadd:	90                   	nop

c000eade <VAS::setCPUSpecific(unsigned long)>:
c000eade:	83 ec 0c             	sub    esp,0xc
c000eae1:	6a 05                	push   0x5
c000eae3:	68 00 00 40 c2       	push   0xc2400000
c000eae8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eaec:	50                   	push   eax
c000eaed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eaf1:	52                   	push   edx
c000eaf2:	e8 13 fd ff ff       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c000eaf7:	83 c4 1c             	add    esp,0x1c
c000eafa:	c3                   	ret    
c000eafb:	90                   	nop

c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000eafc:	55                   	push   ebp
c000eafd:	57                   	push   edi
c000eafe:	56                   	push   esi
c000eaff:	53                   	push   ebx
c000eb00:	83 ec 1c             	sub    esp,0x1c
c000eb03:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000eb07:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eb0b:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000eb0f:	e8 6c 57 00 00       	call   c0014280 <thisCPU()>
c000eb14:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000eb1a:	83 e0 01             	and    eax,0x1
c000eb1d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eb21:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb25:	85 c0                	test   eax,eax
c000eb27:	7e 39                	jle    c000eb62 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000eb29:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb2d:	89 f3                	mov    ebx,esi
c000eb2f:	c1 e0 0c             	shl    eax,0xc
c000eb32:	01 f0                	add    eax,esi
c000eb34:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eb38:	55                   	push   ebp
c000eb39:	53                   	push   ebx
c000eb3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb3e:	29 f0                	sub    eax,esi
c000eb40:	01 d8                	add    eax,ebx
c000eb42:	50                   	push   eax
c000eb43:	57                   	push   edi
c000eb44:	e8 c1 fc ff ff       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c000eb49:	83 c4 10             	add    esp,0x10
c000eb4c:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb51:	74 03                	je     c000eb56 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000eb53:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb56:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb5c:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000eb60:	75 d6                	jne    c000eb38 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000eb62:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb67:	74 42                	je     c000ebab <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000eb69:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000eb6d:	89 f3                	mov    ebx,esi
c000eb6f:	c1 e0 0c             	shl    eax,0xc
c000eb72:	c1 eb 0a             	shr    ebx,0xa
c000eb75:	01 f0                	add    eax,esi
c000eb77:	c1 e8 0a             	shr    eax,0xa
c000eb7a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000eb80:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb85:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000eb8b:	2d 00 00 40 00       	sub    eax,0x400000
c000eb90:	39 c3                	cmp    ebx,eax
c000eb92:	77 0d                	ja     c000eba1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000eb94:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb97:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb9d:	39 d8                	cmp    eax,ebx
c000eb9f:	73 f3                	jae    c000eb94 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000eba1:	83 c4 1c             	add    esp,0x1c
c000eba4:	89 f0                	mov    eax,esi
c000eba6:	5b                   	pop    ebx
c000eba7:	5e                   	pop    esi
c000eba8:	5f                   	pop    edi
c000eba9:	5d                   	pop    ebp
c000ebaa:	c3                   	ret    
c000ebab:	e8 d5 05 01 00       	call   c001f185 <CPU::readCR3()>
c000ebb0:	83 ec 0c             	sub    esp,0xc
c000ebb3:	50                   	push   eax
c000ebb4:	e8 de 05 01 00       	call   c001f197 <CPU::writeCR3(unsigned long)>
c000ebb9:	83 c4 10             	add    esp,0x10
c000ebbc:	89 f0                	mov    eax,esi
c000ebbe:	83 c4 1c             	add    esp,0x1c
c000ebc1:	5b                   	pop    ebx
c000ebc2:	5e                   	pop    esi
c000ebc3:	5f                   	pop    edi
c000ebc4:	5d                   	pop    ebp
c000ebc5:	c3                   	ret    

c000ebc6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000ebc6:	55                   	push   ebp
c000ebc7:	57                   	push   edi
c000ebc8:	56                   	push   esi
c000ebc9:	53                   	push   ebx
c000ebca:	83 ec 1c             	sub    esp,0x1c
c000ebcd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ebd1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ebd5:	09 f0                	or     eax,esi
c000ebd7:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ebdb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ebdf:	a9 ff 0f 00 00       	test   eax,0xfff
c000ebe4:	75 4c                	jne    c000ec32 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6c>
c000ebe6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ebea:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ebed:	c1 eb 16             	shr    ebx,0x16
c000ebf0:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000ebf7:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000ebfb:	74 4f                	je     c000ec4c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x86>
c000ebfd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ec01:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000ec05:	c1 e8 0a             	shr    eax,0xa
c000ec08:	80 fa 01             	cmp    dl,0x1
c000ec0b:	19 d2                	sbb    edx,edx
c000ec0d:	25 fc 0f 00 00       	and    eax,0xffc
c000ec12:	c1 e3 0c             	shl    ebx,0xc
c000ec15:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000ec1b:	01 d8                	add    eax,ebx
c000ec1d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ec21:	09 d9                	or     ecx,ebx
c000ec23:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000ec2a:	83 c4 1c             	add    esp,0x1c
c000ec2d:	5b                   	pop    ebx
c000ec2e:	5e                   	pop    esi
c000ec2f:	5f                   	pop    edi
c000ec30:	5d                   	pop    ebp
c000ec31:	c3                   	ret    
c000ec32:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ec36:	83 ec 0c             	sub    esp,0xc
c000ec39:	68 a0 11 02 c0       	push   0xc00211a0
c000ec3e:	e8 a9 67 00 00       	call   c00153ec <Krnl::panic(char const*)>
c000ec43:	83 c4 10             	add    esp,0x10
c000ec46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ec4a:	eb 9a                	jmp    c000ebe6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000ec4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ec50:	e8 a8 d8 ff ff       	call   c000c4fd <Phys::allocatePage()>
c000ec55:	89 c5                	mov    ebp,eax
c000ec57:	e8 6f f6 ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c000ec5c:	83 ec 0c             	sub    esp,0xc
c000ec5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ec63:	6a 01                	push   0x1
c000ec65:	e8 d4 f4 ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c000ec6a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000ec71:	6a 01                	push   0x1
c000ec73:	50                   	push   eax
c000ec74:	55                   	push   ebp
c000ec75:	81 cd 07 04 00 00    	or     ebp,0x407
c000ec7b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000ec7f:	51                   	push   ecx
c000ec80:	e8 77 fe ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ec85:	83 c4 1c             	add    esp,0x1c
c000ec88:	68 00 10 00 00       	push   0x1000
c000ec8d:	6a 00                	push   0x0
c000ec8f:	50                   	push   eax
c000ec90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ec94:	e8 6f 19 ff ff       	call   c0000608 <memset>
c000ec99:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ec9d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000eca0:	e8 e6 f7 ff ff       	call   c000e48b <Virt::freeKernelVirtualPages(unsigned long)>
c000eca5:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000eca8:	83 c4 10             	add    esp,0x10
c000ecab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ecaf:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000ecb2:	e9 46 ff ff ff       	jmp    c000ebfd <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000ecb7:	90                   	nop

c000ecb8 <VAS::VAS(bool)>:
c000ecb8:	53                   	push   ebx
c000ecb9:	83 ec 28             	sub    esp,0x28
c000ecbc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ecc0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ecc4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecc8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000eccf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ecd3:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000ecd7:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000ecda:	e8 1e d8 ff ff       	call   c000c4fd <Phys::allocatePage()>
c000ecdf:	89 c2                	mov    edx,eax
c000ece1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ece5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ece8:	e8 de f5 ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c000eced:	89 c3                	mov    ebx,eax
c000ecef:	83 ec 0c             	sub    esp,0xc
c000ecf2:	6a 01                	push   0x1
c000ecf4:	e8 45 f4 ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c000ecf9:	83 c4 10             	add    esp,0x10
c000ecfc:	89 c2                	mov    edx,eax
c000ecfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed02:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ed05:	83 ec 0c             	sub    esp,0xc
c000ed08:	6a 03                	push   0x3
c000ed0a:	6a 01                	push   0x1
c000ed0c:	52                   	push   edx
c000ed0d:	50                   	push   eax
c000ed0e:	53                   	push   ebx
c000ed0f:	e8 e8 fd ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ed14:	83 c4 20             	add    esp,0x20
c000ed17:	89 c2                	mov    edx,eax
c000ed19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed1d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ed20:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ed28:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000ed30:	7f 1c                	jg     c000ed4e <VAS::VAS(bool)+0x96>
c000ed32:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed36:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed39:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ed3d:	c1 e2 02             	shl    edx,0x2
c000ed40:	01 d0                	add    eax,edx
c000ed42:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ed48:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ed4c:	eb da                	jmp    c000ed28 <VAS::VAS(bool)+0x70>
c000ed4e:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ed56:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ed5e:	7f 71                	jg     c000edd1 <VAS::VAS(bool)+0x119>
c000ed60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ed64:	2d 00 02 00 00       	sub    eax,0x200
c000ed69:	c1 e0 0c             	shl    eax,0xc
c000ed6c:	83 c8 03             	or     eax,0x3
c000ed6f:	89 c3                	mov    ebx,eax
c000ed71:	e8 0a 55 00 00       	call   c0014280 <thisCPU()>
c000ed76:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ed7c:	83 e0 10             	and    eax,0x10
c000ed7f:	84 c0                	test   al,al
c000ed81:	74 07                	je     c000ed8a <VAS::VAS(bool)+0xd2>
c000ed83:	b8 00 01 00 00       	mov    eax,0x100
c000ed88:	eb 05                	jmp    c000ed8f <VAS::VAS(bool)+0xd7>
c000ed8a:	b8 00 00 00 00       	mov    eax,0x0
c000ed8f:	09 d8                	or     eax,ebx
c000ed91:	89 c1                	mov    ecx,eax
c000ed93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed97:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed9a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ed9e:	c1 e2 02             	shl    edx,0x2
c000eda1:	01 d0                	add    eax,edx
c000eda3:	89 ca                	mov    edx,ecx
c000eda5:	89 10                	mov    DWORD PTR [eax],edx
c000eda7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edab:	2d 40 03 00 00       	sub    eax,0x340
c000edb0:	83 f8 7f             	cmp    eax,0x7f
c000edb3:	77 16                	ja     c000edcb <VAS::VAS(bool)+0x113>
c000edb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edb9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000edbc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000edc0:	c1 e2 02             	shl    edx,0x2
c000edc3:	01 d0                	add    eax,edx
c000edc5:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000edcb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000edcf:	eb 85                	jmp    c000ed56 <VAS::VAS(bool)+0x9e>
c000edd1:	e8 aa 54 00 00       	call   c0014280 <thisCPU()>
c000edd6:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000eddc:	83 e0 10             	and    eax,0x10
c000eddf:	84 c0                	test   al,al
c000ede1:	74 07                	je     c000edea <VAS::VAS(bool)+0x132>
c000ede3:	b8 03 41 00 00       	mov    eax,0x4103
c000ede8:	eb 05                	jmp    c000edef <VAS::VAS(bool)+0x137>
c000edea:	b8 03 40 00 00       	mov    eax,0x4003
c000edef:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000edf3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000edf6:	81 c2 20 0c 00 00    	add    edx,0xc20
c000edfc:	89 02                	mov    DWORD PTR [edx],eax
c000edfe:	e8 7d 54 00 00       	call   c0014280 <thisCPU()>
c000ee03:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000ee09:	83 ec 08             	sub    esp,0x8
c000ee0c:	50                   	push   eax
c000ee0d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ee11:	e8 c8 fc ff ff       	call   c000eade <VAS::setCPUSpecific(unsigned long)>
c000ee16:	83 c4 10             	add    esp,0x10
c000ee19:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee1d:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000ee20:	e8 5b 54 00 00       	call   c0014280 <thisCPU()>
c000ee25:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee2b:	83 e0 10             	and    eax,0x10
c000ee2e:	84 c0                	test   al,al
c000ee30:	74 07                	je     c000ee39 <VAS::VAS(bool)+0x181>
c000ee32:	b8 00 01 00 00       	mov    eax,0x100
c000ee37:	eb 05                	jmp    c000ee3e <VAS::VAS(bool)+0x186>
c000ee39:	b8 00 00 00 00       	mov    eax,0x0
c000ee3e:	09 d8                	or     eax,ebx
c000ee40:	89 c2                	mov    edx,eax
c000ee42:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee46:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee49:	05 fc 0f 00 00       	add    eax,0xffc
c000ee4e:	83 ca 03             	or     edx,0x3
c000ee51:	89 10                	mov    DWORD PTR [eax],edx
c000ee53:	e8 28 54 00 00       	call   c0014280 <thisCPU()>
c000ee58:	83 ec 0c             	sub    esp,0xc
c000ee5b:	50                   	push   eax
c000ee5c:	e8 ef 19 00 00       	call   c0010850 <Device::getName()>
c000ee61:	83 c4 10             	add    esp,0x10
c000ee64:	83 ec 08             	sub    esp,0x8
c000ee67:	68 9f 12 02 c0       	push   0xc002129f
c000ee6c:	50                   	push   eax
c000ee6d:	e8 86 18 ff ff       	call   c00006f8 <strcmp>
c000ee72:	83 c4 10             	add    esp,0x10
c000ee75:	85 c0                	test   eax,eax
c000ee77:	0f 94 c0             	sete   al
c000ee7a:	84 c0                	test   al,al
c000ee7c:	74 64                	je     c000eee2 <VAS::VAS(bool)+0x22a>
c000ee7e:	e8 50 95 00 00       	call   c00183d3 <disableIRQs()>
c000ee83:	e8 f8 53 00 00       	call   c0014280 <thisCPU()>
c000ee88:	05 7c 09 00 00       	add    eax,0x97c
c000ee8d:	83 ec 0c             	sub    esp,0xc
c000ee90:	50                   	push   eax
c000ee91:	e8 04 cb ff ff       	call   c000b99a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ee96:	83 c4 10             	add    esp,0x10
c000ee99:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ee9e:	89 c3                	mov    ebx,eax
c000eea0:	e8 db 53 00 00       	call   c0014280 <thisCPU()>
c000eea5:	05 7c 09 00 00       	add    eax,0x97c
c000eeaa:	83 ec 0c             	sub    esp,0xc
c000eead:	50                   	push   eax
c000eeae:	e8 e7 ca ff ff       	call   c000b99a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000eeb3:	83 c4 10             	add    esp,0x10
c000eeb6:	83 ec 08             	sub    esp,0x8
c000eeb9:	50                   	push   eax
c000eeba:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eebe:	e8 a9 f5 ff ff       	call   c000e46c <VAS::getPageTableEntry(unsigned long)>
c000eec3:	83 c4 10             	add    esp,0x10
c000eec6:	8b 00                	mov    eax,DWORD PTR [eax]
c000eec8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eecd:	6a 11                	push   0x11
c000eecf:	53                   	push   ebx
c000eed0:	50                   	push   eax
c000eed1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eed5:	e8 30 f9 ff ff       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c000eeda:	83 c4 10             	add    esp,0x10
c000eedd:	e8 04 95 00 00       	call   c00183e6 <enableIRQs()>
c000eee2:	90                   	nop
c000eee3:	83 c4 28             	add    esp,0x28
c000eee6:	5b                   	pop    ebx
c000eee7:	c3                   	ret    

c000eee8 <mapVASFirstTime>:
c000eee8:	55                   	push   ebp
c000eee9:	57                   	push   edi
c000eeea:	56                   	push   esi
c000eeeb:	53                   	push   ebx
c000eeec:	83 ec 0c             	sub    esp,0xc
c000eeef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000eef4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000eef7:	4a                   	dec    edx
c000eef8:	0f 84 99 00 00 00    	je     c000ef97 <mapVASFirstTime+0xaf>
c000eefe:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000ef01:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000ef04:	c1 e5 15             	shl    ebp,0x15
c000ef07:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000ef0c:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000ef11:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000ef17:	29 eb                	sub    ebx,ebp
c000ef19:	29 ee                	sub    esi,ebp
c000ef1b:	e8 dd d5 ff ff       	call   c000c4fd <Phys::allocatePage()>
c000ef20:	83 ec 0c             	sub    esp,0xc
c000ef23:	68 03 04 00 00       	push   0x403
c000ef28:	6a 01                	push   0x1
c000ef2a:	53                   	push   ebx
c000ef2b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000ef31:	50                   	push   eax
c000ef32:	57                   	push   edi
c000ef33:	e8 c4 fb ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef38:	83 c4 20             	add    esp,0x20
c000ef3b:	39 f3                	cmp    ebx,esi
c000ef3d:	75 dc                	jne    c000ef1b <mapVASFirstTime+0x33>
c000ef3f:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000ef44:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000ef49:	29 e8                	sub    eax,ebp
c000ef4b:	29 ee                	sub    esi,ebp
c000ef4d:	89 c5                	mov    ebp,eax
c000ef4f:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000ef53:	19 db                	sbb    ebx,ebx
c000ef55:	e8 a3 d5 ff ff       	call   c000c4fd <Phys::allocatePage()>
c000ef5a:	83 e3 04             	and    ebx,0x4
c000ef5d:	83 ec 0c             	sub    esp,0xc
c000ef60:	81 c3 03 04 00 00    	add    ebx,0x403
c000ef66:	53                   	push   ebx
c000ef67:	6a 01                	push   0x1
c000ef69:	56                   	push   esi
c000ef6a:	81 ee 00 10 00 00    	sub    esi,0x1000
c000ef70:	50                   	push   eax
c000ef71:	57                   	push   edi
c000ef72:	e8 85 fb ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef77:	83 c4 20             	add    esp,0x20
c000ef7a:	39 f5                	cmp    ebp,esi
c000ef7c:	75 d1                	jne    c000ef4f <mapVASFirstTime+0x67>
c000ef7e:	e8 02 02 01 00       	call   c001f185 <CPU::readCR3()>
c000ef83:	83 ec 0c             	sub    esp,0xc
c000ef86:	50                   	push   eax
c000ef87:	e8 0b 02 01 00       	call   c001f197 <CPU::writeCR3(unsigned long)>
c000ef8c:	83 c4 10             	add    esp,0x10
c000ef8f:	83 c4 0c             	add    esp,0xc
c000ef92:	5b                   	pop    ebx
c000ef93:	5e                   	pop    esi
c000ef94:	5f                   	pop    edi
c000ef95:	5d                   	pop    ebp
c000ef96:	c3                   	ret    
c000ef97:	83 ec 0c             	sub    esp,0xc
c000ef9a:	68 ad 12 02 c0       	push   0xc00212ad
c000ef9f:	e8 b5 01 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000efa4:	83 c4 10             	add    esp,0x10
c000efa7:	83 c4 0c             	add    esp,0xc
c000efaa:	5b                   	pop    ebx
c000efab:	5e                   	pop    esi
c000efac:	5f                   	pop    edi
c000efad:	5d                   	pop    ebp
c000efae:	c3                   	ret    

c000efaf <__cxa_atexit>:
c000efaf:	31 c0                	xor    eax,eax
c000efb1:	c3                   	ret    

c000efb2 <__cxa_finalize>:
c000efb2:	c3                   	ret    

c000efb3 <__stack_chk_fail>:
c000efb3:	55                   	push   ebp
c000efb4:	89 e5                	mov    ebp,esp
c000efb6:	83 ec 10             	sub    esp,0x10
c000efb9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000efbc:	68 c6 12 02 c0       	push   0xc00212c6
c000efc1:	e8 93 01 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000efc6:	58                   	pop    eax
c000efc7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efca:	5a                   	pop    edx
c000efcb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000efce:	68 c6 12 02 c0       	push   0xc00212c6
c000efd3:	e8 81 01 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000efd8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efdb:	59                   	pop    ecx
c000efdc:	5a                   	pop    edx
c000efdd:	8b 00                	mov    eax,DWORD PTR [eax]
c000efdf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000efe2:	68 c6 12 02 c0       	push   0xc00212c6
c000efe7:	e8 6d 01 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000efec:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000efef:	59                   	pop    ecx
c000eff0:	5a                   	pop    edx
c000eff1:	8b 00                	mov    eax,DWORD PTR [eax]
c000eff3:	8b 00                	mov    eax,DWORD PTR [eax]
c000eff5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000eff8:	68 c6 12 02 c0       	push   0xc00212c6
c000effd:	e8 57 01 00 00       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c000f002:	c7 04 24 ce 12 02 c0 	mov    DWORD PTR [esp],0xc00212ce
c000f009:	e8 de 63 00 00       	call   c00153ec <Krnl::panic(char const*)>
c000f00e:	83 c4 10             	add    esp,0x10
c000f011:	c9                   	leave  
c000f012:	c3                   	ret    

c000f013 <__cxa_pure_virtual>:
c000f013:	83 ec 18             	sub    esp,0x18
c000f016:	68 e6 12 02 c0       	push   0xc00212e6
c000f01b:	e8 cc 63 00 00       	call   c00153ec <Krnl::panic(char const*)>
c000f020:	83 c4 1c             	add    esp,0x1c
c000f023:	c3                   	ret    

c000f024 <operator new(unsigned long)>:
c000f024:	e9 fe ce ff ff       	jmp    c000bf27 <malloc>

c000f029 <operator new[](unsigned long)>:
c000f029:	e9 f9 ce ff ff       	jmp    c000bf27 <malloc>

c000f02e <operator delete(void*)>:
c000f02e:	e9 14 cf ff ff       	jmp    c000bf47 <rfree>

c000f033 <operator delete(void*, unsigned long)>:
c000f033:	e9 0f cf ff ff       	jmp    c000bf47 <rfree>

c000f038 <operator delete[](void*)>:
c000f038:	e9 0a cf ff ff       	jmp    c000bf47 <rfree>

c000f03d <operator delete[](void*, unsigned long)>:
c000f03d:	e9 05 cf ff ff       	jmp    c000bf47 <rfree>

c000f042 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000f042:	57                   	push   edi
c000f043:	56                   	push   esi
c000f044:	be fd 12 02 c0       	mov    esi,0xc00212fd
c000f049:	53                   	push   ebx
c000f04a:	83 ec 40             	sub    esp,0x40
c000f04d:	a0 fc 12 02 c0       	mov    al,ds:0xc00212fc
c000f052:	8d 7c 24 02          	lea    edi,[esp+0x2]
c000f056:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c000f05a:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000f05e:	b8 3e 00 00 00       	mov    eax,0x3e
c000f063:	f7 c7 02 00 00 00    	test   edi,0x2
c000f069:	75 69                	jne    c000f0d4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x92>
c000f06b:	89 c1                	mov    ecx,eax
c000f06d:	c1 e9 02             	shr    ecx,0x2
c000f070:	fc                   	cld    
c000f071:	31 d2                	xor    edx,edx
c000f073:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f075:	a8 02                	test   al,0x2
c000f077:	74 0b                	je     c000f084 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x42>
c000f079:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f07c:	66 89 17             	mov    WORD PTR [edi],dx
c000f07f:	ba 02 00 00 00       	mov    edx,0x2
c000f084:	a8 01                	test   al,0x1
c000f086:	74 06                	je     c000f08e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000f088:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000f08b:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000f08e:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000f092:	83 f9 3e             	cmp    ecx,0x3e
c000f095:	7e 05                	jle    c000f09c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5a>
c000f097:	b9 3e 00 00 00       	mov    ecx,0x3e
c000f09c:	89 df                	mov    edi,ebx
c000f09e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000f0a2:	eb 02                	jmp    c000f0a6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x64>
c000f0a4:	89 c7                	mov    edi,eax
c000f0a6:	31 d2                	xor    edx,edx
c000f0a8:	89 f8                	mov    eax,edi
c000f0aa:	46                   	inc    esi
c000f0ab:	f7 f1                	div    ecx
c000f0ad:	39 cf                	cmp    edi,ecx
c000f0af:	73 f3                	jae    c000f0a4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x62>
c000f0b1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f0b4:	eb 02                	jmp    c000f0b8 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x76>
c000f0b6:	89 c3                	mov    ebx,eax
c000f0b8:	31 d2                	xor    edx,edx
c000f0ba:	89 d8                	mov    eax,ebx
c000f0bc:	f7 f1                	div    ecx
c000f0be:	4e                   	dec    esi
c000f0bf:	39 cb                	cmp    ebx,ecx
c000f0c1:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000f0c5:	88 16                	mov    BYTE PTR [esi],dl
c000f0c7:	73 ed                	jae    c000f0b6 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x74>
c000f0c9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f0cd:	83 c4 40             	add    esp,0x40
c000f0d0:	5b                   	pop    ebx
c000f0d1:	5e                   	pop    esi
c000f0d2:	5f                   	pop    edi
c000f0d3:	c3                   	ret    
c000f0d4:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f0d7:	83 c7 02             	add    edi,0x2
c000f0da:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000f0de:	83 c6 02             	add    esi,0x2
c000f0e1:	83 e8 02             	sub    eax,0x2
c000f0e4:	eb 85                	jmp    c000f06b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>

c000f0e6 <Dbg::logc(char)>:
c000f0e6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0ea:	ba fd 03 00 00       	mov    edx,0x3fd
c000f0ef:	ec                   	in     al,dx
c000f0f0:	a8 20                	test   al,0x20
c000f0f2:	74 fb                	je     c000f0ef <Dbg::logc(char)+0x9>
c000f0f4:	ba f8 03 00 00       	mov    edx,0x3f8
c000f0f9:	88 c8                	mov    al,cl
c000f0fb:	ee                   	out    dx,al
c000f0fc:	c3                   	ret    

c000f0fd <Dbg::logs(char*)>:
c000f0fd:	53                   	push   ebx
c000f0fe:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000f102:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f105:	84 c0                	test   al,al
c000f107:	74 0f                	je     c000f118 <Dbg::logs(char*)+0x1b>
c000f109:	43                   	inc    ebx
c000f10a:	50                   	push   eax
c000f10b:	e8 d6 ff ff ff       	call   c000f0e6 <Dbg::logc(char)>
c000f110:	5a                   	pop    edx
c000f111:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f114:	84 c0                	test   al,al
c000f116:	75 f1                	jne    c000f109 <Dbg::logs(char*)+0xc>
c000f118:	5b                   	pop    ebx
c000f119:	c3                   	ret    

c000f11a <Dbg::logWriteInt(unsigned int)>:
c000f11a:	83 ec 10             	sub    esp,0x10
c000f11d:	6a 0a                	push   0xa
c000f11f:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f123:	50                   	push   eax
c000f124:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f128:	50                   	push   eax
c000f129:	e8 14 ff ff ff       	call   c000f042 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f12e:	50                   	push   eax
c000f12f:	e8 c9 ff ff ff       	call   c000f0fd <Dbg::logs(char*)>
c000f134:	83 c4 20             	add    esp,0x20
c000f137:	c3                   	ret    

c000f138 <Dbg::logWriteIntBase(unsigned int, int)>:
c000f138:	83 ec 10             	sub    esp,0x10
c000f13b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f13f:	50                   	push   eax
c000f140:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f144:	50                   	push   eax
c000f145:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f149:	52                   	push   edx
c000f14a:	e8 f3 fe ff ff       	call   c000f042 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f14f:	50                   	push   eax
c000f150:	e8 a8 ff ff ff       	call   c000f0fd <Dbg::logs(char*)>
c000f155:	83 c4 20             	add    esp,0x20
c000f158:	c3                   	ret    

c000f159 <Dbg::kprintf(char const*, ...)>:
c000f159:	55                   	push   ebp
c000f15a:	57                   	push   edi
c000f15b:	56                   	push   esi
c000f15c:	53                   	push   ebx
c000f15d:	83 ec 0c             	sub    esp,0xc
c000f160:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f164:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f168:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f16c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f16f:	84 c0                	test   al,al
c000f171:	74 4d                	je     c000f1c0 <Dbg::kprintf(char const*, ...)+0x67>
c000f173:	31 ff                	xor    edi,edi
c000f175:	8d 77 01             	lea    esi,[edi+0x1]
c000f178:	3c 25                	cmp    al,0x25
c000f17a:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000f17d:	0f 85 ec 00 00 00    	jne    c000f26f <Dbg::kprintf(char const*, ...)+0x116>
c000f183:	83 c7 02             	add    edi,0x2
c000f186:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f189:	83 e8 25             	sub    eax,0x25
c000f18c:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000f18f:	3c 53                	cmp    al,0x53
c000f191:	0f 87 c0 00 00 00    	ja     c000f257 <Dbg::kprintf(char const*, ...)+0xfe>
c000f197:	25 ff 00 00 00       	and    eax,0xff
c000f19c:	ff 24 85 3c 13 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdecc4]
c000f1a3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1a7:	89 c8                	mov    eax,ecx
c000f1a9:	83 c1 04             	add    ecx,0x4
c000f1ac:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f1b0:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1b2:	50                   	push   eax
c000f1b3:	e8 45 ff ff ff       	call   c000f0fd <Dbg::logs(char*)>
c000f1b8:	58                   	pop    eax
c000f1b9:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000f1bc:	84 c0                	test   al,al
c000f1be:	75 b5                	jne    c000f175 <Dbg::kprintf(char const*, ...)+0x1c>
c000f1c0:	83 c4 0c             	add    esp,0xc
c000f1c3:	5b                   	pop    ebx
c000f1c4:	5e                   	pop    esi
c000f1c5:	5f                   	pop    edi
c000f1c6:	5d                   	pop    ebp
c000f1c7:	c3                   	ret    
c000f1c8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f1cc:	89 d0                	mov    eax,edx
c000f1ce:	83 c2 04             	add    edx,0x4
c000f1d1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f1d5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1d7:	50                   	push   eax
c000f1d8:	e8 3d ff ff ff       	call   c000f11a <Dbg::logWriteInt(unsigned int)>
c000f1dd:	58                   	pop    eax
c000f1de:	eb d9                	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f1e0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f1e4:	89 d0                	mov    eax,edx
c000f1e6:	83 c2 04             	add    edx,0x4
c000f1e9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f1ed:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000f1f0:	50                   	push   eax
c000f1f1:	e8 f0 fe ff ff       	call   c000f0e6 <Dbg::logc(char)>
c000f1f6:	58                   	pop    eax
c000f1f7:	eb c0                	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f1f9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1fd:	89 c8                	mov    eax,ecx
c000f1ff:	83 c1 04             	add    ecx,0x4
c000f202:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f206:	8b 28                	mov    ebp,DWORD PTR [eax]
c000f208:	55                   	push   ebp
c000f209:	e8 0c ff ff ff       	call   c000f11a <Dbg::logWriteInt(unsigned int)>
c000f20e:	58                   	pop    eax
c000f20f:	eb a8                	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f211:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f215:	89 c8                	mov    eax,ecx
c000f217:	83 c1 04             	add    ecx,0x4
c000f21a:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f21e:	6a 10                	push   0x10
c000f220:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f222:	51                   	push   ecx
c000f223:	e8 10 ff ff ff       	call   c000f138 <Dbg::logWriteIntBase(unsigned int, int)>
c000f228:	5d                   	pop    ebp
c000f229:	58                   	pop    eax
c000f22a:	eb 8d                	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f22c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f230:	89 d0                	mov    eax,edx
c000f232:	83 c2 08             	add    edx,0x8
c000f235:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f239:	6a 10                	push   0x10
c000f23b:	8b 00                	mov    eax,DWORD PTR [eax]
c000f23d:	50                   	push   eax
c000f23e:	e8 f5 fe ff ff       	call   c000f138 <Dbg::logWriteIntBase(unsigned int, int)>
c000f243:	58                   	pop    eax
c000f244:	5a                   	pop    edx
c000f245:	e9 6f ff ff ff       	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f24a:	6a 25                	push   0x25
c000f24c:	e8 95 fe ff ff       	call   c000f0e6 <Dbg::logc(char)>
c000f251:	5a                   	pop    edx
c000f252:	e9 62 ff ff ff       	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f257:	6a 25                	push   0x25
c000f259:	e8 88 fe ff ff       	call   c000f0e6 <Dbg::logc(char)>
c000f25e:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000f262:	50                   	push   eax
c000f263:	e8 7e fe ff ff       	call   c000f0e6 <Dbg::logc(char)>
c000f268:	5a                   	pop    edx
c000f269:	59                   	pop    ecx
c000f26a:	e9 4a ff ff ff       	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f26f:	50                   	push   eax
c000f270:	89 f7                	mov    edi,esi
c000f272:	e8 6f fe ff ff       	call   c000f0e6 <Dbg::logc(char)>
c000f277:	89 ee                	mov    esi,ebp
c000f279:	58                   	pop    eax
c000f27a:	e9 3a ff ff ff       	jmp    c000f1b9 <Dbg::kprintf(char const*, ...)+0x60>
c000f27f:	90                   	nop

c000f280 <File::read(unsigned long long, void*, int*)>:
c000f280:	53                   	push   ebx
c000f281:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f285:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f289:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f290:	3c 19                	cmp    al,0x19
c000f292:	77 35                	ja     c000f2c9 <File::read(unsigned long long, void*, int*)+0x49>
c000f294:	8b 04 85 20 47 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb8e0]
c000f29b:	85 c0                	test   eax,eax
c000f29d:	74 2a                	je     c000f2c9 <File::read(unsigned long long, void*, int*)+0x49>
c000f29f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f2a5:	85 c0                	test   eax,eax
c000f2a7:	74 20                	je     c000f2c9 <File::read(unsigned long long, void*, int*)+0x49>
c000f2a9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f2ad:	74 21                	je     c000f2d0 <File::read(unsigned long long, void*, int*)+0x50>
c000f2af:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f2b1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f2b5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f2bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f2bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f2c3:	5b                   	pop    ebx
c000f2c4:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f2c7:	ff e0                	jmp    eax
c000f2c9:	b8 0b 00 00 00       	mov    eax,0xb
c000f2ce:	eb 05                	jmp    c000f2d5 <File::read(unsigned long long, void*, int*)+0x55>
c000f2d0:	b8 05 00 00 00       	mov    eax,0x5
c000f2d5:	5b                   	pop    ebx
c000f2d6:	c3                   	ret    
c000f2d7:	90                   	nop

c000f2d8 <File::write(unsigned long long, void*, int*)>:
c000f2d8:	53                   	push   ebx
c000f2d9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f2dd:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f2e1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f2e8:	3c 19                	cmp    al,0x19
c000f2ea:	77 35                	ja     c000f321 <File::write(unsigned long long, void*, int*)+0x49>
c000f2ec:	8b 04 85 20 47 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb8e0]
c000f2f3:	85 c0                	test   eax,eax
c000f2f5:	74 2a                	je     c000f321 <File::write(unsigned long long, void*, int*)+0x49>
c000f2f7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f2fd:	85 c0                	test   eax,eax
c000f2ff:	74 20                	je     c000f321 <File::write(unsigned long long, void*, int*)+0x49>
c000f301:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f305:	74 21                	je     c000f328 <File::write(unsigned long long, void*, int*)+0x50>
c000f307:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f309:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f30d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f313:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f317:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f31b:	5b                   	pop    ebx
c000f31c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f31f:	ff e0                	jmp    eax
c000f321:	b8 0b 00 00 00       	mov    eax,0xb
c000f326:	eb 05                	jmp    c000f32d <File::write(unsigned long long, void*, int*)+0x55>
c000f328:	b8 05 00 00 00       	mov    eax,0x5
c000f32d:	5b                   	pop    ebx
c000f32e:	c3                   	ret    
c000f32f:	90                   	nop

c000f330 <Directory::read(unsigned long long, void*, int*)>:
c000f330:	53                   	push   ebx
c000f331:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f335:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f339:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f340:	3c 19                	cmp    al,0x19
c000f342:	77 35                	ja     c000f379 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f344:	8b 04 85 20 47 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb8e0]
c000f34b:	85 c0                	test   eax,eax
c000f34d:	74 2a                	je     c000f379 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f34f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f355:	85 c0                	test   eax,eax
c000f357:	74 20                	je     c000f379 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f359:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f35d:	74 21                	je     c000f380 <Directory::read(unsigned long long, void*, int*)+0x50>
c000f35f:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f361:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f365:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f36b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f36f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f373:	5b                   	pop    ebx
c000f374:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f377:	ff e0                	jmp    eax
c000f379:	b8 0b 00 00 00       	mov    eax,0xb
c000f37e:	eb 05                	jmp    c000f385 <Directory::read(unsigned long long, void*, int*)+0x55>
c000f380:	b8 05 00 00 00       	mov    eax,0x5
c000f385:	5b                   	pop    ebx
c000f386:	c3                   	ret    
c000f387:	90                   	nop

c000f388 <Directory::write(unsigned long long, void*, int*)>:
c000f388:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f38c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f393:	b8 0b 00 00 00       	mov    eax,0xb
c000f398:	80 fa 19             	cmp    dl,0x19
c000f39b:	77 18                	ja     c000f3b5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f39d:	8b 14 95 20 47 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb8e0]
c000f3a4:	85 d2                	test   edx,edx
c000f3a6:	74 0d                	je     c000f3b5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f3a8:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f3af:	19 c0                	sbb    eax,eax
c000f3b1:	83 e0 0a             	and    eax,0xa
c000f3b4:	40                   	inc    eax
c000f3b5:	c3                   	ret    

c000f3b6 <File::isAtty()>:
c000f3b6:	31 c0                	xor    eax,eax
c000f3b8:	c3                   	ret    
c000f3b9:	90                   	nop

c000f3ba <Directory::isAtty()>:
c000f3ba:	31 c0                	xor    eax,eax
c000f3bc:	c3                   	ret    
c000f3bd:	90                   	nop

c000f3be <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f3be:	b8 0a 00 00 00       	mov    eax,0xa
c000f3c3:	c3                   	ret    

c000f3c4 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f3c4:	b8 0a 00 00 00       	mov    eax,0xa
c000f3c9:	c3                   	ret    

c000f3ca <File::~File()>:
c000f3ca:	83 ec 0c             	sub    esp,0xc
c000f3cd:	ba f8 14 02 c0       	mov    edx,0xc00214f8
c000f3d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3d6:	89 10                	mov    DWORD PTR [eax],edx
c000f3d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3dc:	83 ec 0c             	sub    esp,0xc
c000f3df:	50                   	push   eax
c000f3e0:	e8 c5 ea ff ff       	call   c000deaa <UnixFile::~UnixFile()>
c000f3e5:	83 c4 10             	add    esp,0x10
c000f3e8:	90                   	nop
c000f3e9:	83 c4 0c             	add    esp,0xc
c000f3ec:	c3                   	ret    
c000f3ed:	90                   	nop

c000f3ee <File::~File()>:
c000f3ee:	83 ec 0c             	sub    esp,0xc
c000f3f1:	83 ec 0c             	sub    esp,0xc
c000f3f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3f8:	e8 cd ff ff ff       	call   c000f3ca <File::~File()>
c000f3fd:	83 c4 10             	add    esp,0x10
c000f400:	83 ec 08             	sub    esp,0x8
c000f403:	68 14 01 00 00       	push   0x114
c000f408:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f40c:	e8 22 fc ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c000f411:	83 c4 10             	add    esp,0x10
c000f414:	83 c4 0c             	add    esp,0xc
c000f417:	c3                   	ret    

c000f418 <Directory::~Directory()>:
c000f418:	83 ec 0c             	sub    esp,0xc
c000f41b:	ba 14 15 02 c0       	mov    edx,0xc0021514
c000f420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f424:	89 10                	mov    DWORD PTR [eax],edx
c000f426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f42a:	83 ec 0c             	sub    esp,0xc
c000f42d:	50                   	push   eax
c000f42e:	e8 77 ea ff ff       	call   c000deaa <UnixFile::~UnixFile()>
c000f433:	83 c4 10             	add    esp,0x10
c000f436:	90                   	nop
c000f437:	83 c4 0c             	add    esp,0xc
c000f43a:	c3                   	ret    
c000f43b:	90                   	nop

c000f43c <Directory::~Directory()>:
c000f43c:	83 ec 0c             	sub    esp,0xc
c000f43f:	83 ec 0c             	sub    esp,0xc
c000f442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f446:	e8 cd ff ff ff       	call   c000f418 <Directory::~Directory()>
c000f44b:	83 c4 10             	add    esp,0x10
c000f44e:	83 ec 08             	sub    esp,0x8
c000f451:	68 14 01 00 00       	push   0x114
c000f456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f45a:	e8 d4 fb ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c000f45f:	83 c4 10             	add    esp,0x10
c000f462:	83 c4 0c             	add    esp,0xc
c000f465:	c3                   	ret    

c000f466 <Filesystem::Filesystem()>:
c000f466:	ba 94 14 02 c0       	mov    edx,0xc0021494
c000f46b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f46f:	89 10                	mov    DWORD PTR [eax],edx
c000f471:	8b 15 88 42 02 c0    	mov    edx,DWORD PTR ds:0xc0024288
c000f477:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f47b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f47e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f482:	a3 88 42 02 c0       	mov    ds:0xc0024288,eax
c000f487:	90                   	nop
c000f488:	c3                   	ret    
c000f489:	90                   	nop

c000f48a <Filesystem::~Filesystem()>:
c000f48a:	ba 94 14 02 c0       	mov    edx,0xc0021494
c000f48f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f493:	89 10                	mov    DWORD PTR [eax],edx
c000f495:	90                   	nop
c000f496:	c3                   	ret    
c000f497:	90                   	nop

c000f498 <Filesystem::~Filesystem()>:
c000f498:	83 ec 0c             	sub    esp,0xc
c000f49b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f49f:	e8 e6 ff ff ff       	call   c000f48a <Filesystem::~Filesystem()>
c000f4a4:	83 c4 04             	add    esp,0x4
c000f4a7:	83 ec 08             	sub    esp,0x8
c000f4aa:	6a 08                	push   0x8
c000f4ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4b0:	e8 7e fb ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c000f4b5:	83 c4 10             	add    esp,0x10
c000f4b8:	83 c4 0c             	add    esp,0xc
c000f4bb:	c3                   	ret    

c000f4bc <initVFS()>:
c000f4bc:	83 ec 18             	sub    esp,0x18
c000f4bf:	6a 08                	push   0x8
c000f4c1:	e8 5e fb ff ff       	call   c000f024 <operator new(unsigned long)>
c000f4c6:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4c9:	e8 3e ae 00 00       	call   c001a30c <FAT::FAT()>
c000f4ce:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f4d5:	e8 4a fb ff ff       	call   c000f024 <operator new(unsigned long)>
c000f4da:	89 04 24             	mov    DWORD PTR [esp],eax
c000f4dd:	e8 ca c0 00 00       	call   c001b5ac <ISO9660::ISO9660()>
c000f4e2:	83 c4 1c             	add    esp,0x1c
c000f4e5:	c3                   	ret    

c000f4e6 <standardiseFiles(char*, char const*, char const*)>:
c000f4e6:	55                   	push   ebp
c000f4e7:	57                   	push   edi
c000f4e8:	56                   	push   esi
c000f4e9:	53                   	push   ebx
c000f4ea:	81 ec 10 04 00 00    	sub    esp,0x410
c000f4f0:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f4f7:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f4fe:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f505:	68 00 04 00 00       	push   0x400
c000f50a:	6a 00                	push   0x0
c000f50c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f510:	56                   	push   esi
c000f511:	e8 f2 10 ff ff       	call   c0000608 <memset>
c000f516:	83 c4 10             	add    esp,0x10
c000f519:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f51d:	75 0b                	jne    c000f52a <standardiseFiles(char*, char const*, char const*)+0x44>
c000f51f:	50                   	push   eax
c000f520:	50                   	push   eax
c000f521:	57                   	push   edi
c000f522:	56                   	push   esi
c000f523:	e8 7f 11 ff ff       	call   c00006a7 <strcpy>
c000f528:	eb 41                	jmp    c000f56b <standardiseFiles(char*, char const*, char const*)+0x85>
c000f52a:	8a 07                	mov    al,BYTE PTR [edi]
c000f52c:	3c 5c                	cmp    al,0x5c
c000f52e:	74 04                	je     c000f534 <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f530:	3c 2f                	cmp    al,0x2f
c000f532:	75 18                	jne    c000f54c <standardiseFiles(char*, char const*, char const*)+0x66>
c000f534:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f537:	3c 60                	cmp    al,0x60
c000f539:	7e 03                	jle    c000f53e <standardiseFiles(char*, char const*, char const*)+0x58>
c000f53b:	83 e8 20             	sub    eax,0x20
c000f53e:	88 04 24             	mov    BYTE PTR [esp],al
c000f541:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f548:	50                   	push   eax
c000f549:	50                   	push   eax
c000f54a:	eb 18                	jmp    c000f564 <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f54c:	50                   	push   eax
c000f54d:	50                   	push   eax
c000f54e:	55                   	push   ebp
c000f54f:	56                   	push   esi
c000f550:	e8 52 11 ff ff       	call   c00006a7 <strcpy>
c000f555:	5a                   	pop    edx
c000f556:	59                   	pop    ecx
c000f557:	68 d4 27 02 c0       	push   0xc00227d4
c000f55c:	56                   	push   esi
c000f55d:	e8 fc 11 ff ff       	call   c000075e <strcat>
c000f562:	5d                   	pop    ebp
c000f563:	58                   	pop    eax
c000f564:	57                   	push   edi
c000f565:	56                   	push   esi
c000f566:	e8 f3 11 ff ff       	call   c000075e <strcat>
c000f56b:	83 c4 10             	add    esp,0x10
c000f56e:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f571:	3c 60                	cmp    al,0x60
c000f573:	7e 03                	jle    c000f578 <standardiseFiles(char*, char const*, char const*)+0x92>
c000f575:	83 e8 20             	sub    eax,0x20
c000f578:	88 04 24             	mov    BYTE PTR [esp],al
c000f57b:	88 03                	mov    BYTE PTR [ebx],al
c000f57d:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f584:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f58a:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f58e:	bf 03 00 00 00       	mov    edi,0x3
c000f593:	b8 03 00 00 00       	mov    eax,0x3
c000f598:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f59b:	84 d2                	test   dl,dl
c000f59d:	0f 84 91 00 00 00    	je     c000f634 <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f5a3:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f5a6:	80 fa 2f             	cmp    dl,0x2f
c000f5a9:	74 05                	je     c000f5b0 <standardiseFiles(char*, char const*, char const*)+0xca>
c000f5ab:	80 fa 5c             	cmp    dl,0x5c
c000f5ae:	75 12                	jne    c000f5c2 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f5b0:	89 c5                	mov    ebp,eax
c000f5b2:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f5b7:	74 09                	je     c000f5c2 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f5b9:	40                   	inc    eax
c000f5ba:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f5be:	89 cf                	mov    edi,ecx
c000f5c0:	eb d6                	jmp    c000f598 <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f5c2:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f5c7:	75 5b                	jne    c000f624 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f5c9:	80 fa 2e             	cmp    dl,0x2e
c000f5cc:	75 56                	jne    c000f624 <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f5ce:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f5d2:	74 19                	je     c000f5ed <standardiseFiles(char*, char const*, char const*)+0x107>
c000f5d4:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f5d9:	74 53                	je     c000f62e <standardiseFiles(char*, char const*, char const*)+0x148>
c000f5db:	89 f9                	mov    ecx,edi
c000f5dd:	41                   	inc    ecx
c000f5de:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f5e1:	80 fa 5c             	cmp    dl,0x5c
c000f5e4:	74 f7                	je     c000f5dd <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f5e6:	80 fa 2f             	cmp    dl,0x2f
c000f5e9:	74 f2                	je     c000f5dd <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f5eb:	eb d1                	jmp    c000f5be <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5ed:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f5f2:	74 3a                	je     c000f62e <standardiseFiles(char*, char const*, char const*)+0x148>
c000f5f4:	83 f8 03             	cmp    eax,0x3
c000f5f7:	74 c5                	je     c000f5be <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5f9:	41                   	inc    ecx
c000f5fa:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f5fd:	80 fa 2f             	cmp    dl,0x2f
c000f600:	74 f7                	je     c000f5f9 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f602:	80 fa 5c             	cmp    dl,0x5c
c000f605:	74 f2                	je     c000f5f9 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f607:	48                   	dec    eax
c000f608:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f60c:	75 06                	jne    c000f614 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f60e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f612:	eb f3                	jmp    c000f607 <standardiseFiles(char*, char const*, char const*)+0x121>
c000f614:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f618:	74 07                	je     c000f621 <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f61a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f61e:	48                   	dec    eax
c000f61f:	eb f3                	jmp    c000f614 <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f621:	40                   	inc    eax
c000f622:	eb 9a                	jmp    c000f5be <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f624:	80 fa 2f             	cmp    dl,0x2f
c000f627:	74 95                	je     c000f5be <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f629:	80 fa 5c             	cmp    dl,0x5c
c000f62c:	74 90                	je     c000f5be <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f62e:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f631:	40                   	inc    eax
c000f632:	eb 8a                	jmp    c000f5be <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f634:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f638:	83 ec 0c             	sub    esp,0xc
c000f63b:	53                   	push   ebx
c000f63c:	e8 e4 0f ff ff       	call   c0000625 <strlen>
c000f641:	83 c4 10             	add    esp,0x10
c000f644:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f649:	75 26                	jne    c000f671 <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f64b:	83 ec 0c             	sub    esp,0xc
c000f64e:	53                   	push   ebx
c000f64f:	e8 d1 0f ff ff       	call   c0000625 <strlen>
c000f654:	83 c4 10             	add    esp,0x10
c000f657:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f65c:	74 26                	je     c000f684 <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f65e:	83 ec 0c             	sub    esp,0xc
c000f661:	53                   	push   ebx
c000f662:	e8 be 0f ff ff       	call   c0000625 <strlen>
c000f667:	83 c4 10             	add    esp,0x10
c000f66a:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f66f:	eb c7                	jmp    c000f638 <standardiseFiles(char*, char const*, char const*)+0x152>
c000f671:	83 ec 0c             	sub    esp,0xc
c000f674:	53                   	push   ebx
c000f675:	e8 ab 0f ff ff       	call   c0000625 <strlen>
c000f67a:	83 c4 10             	add    esp,0x10
c000f67d:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f682:	74 c7                	je     c000f64b <standardiseFiles(char*, char const*, char const*)+0x165>
c000f684:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f68a:	5b                   	pop    ebx
c000f68b:	5e                   	pop    esi
c000f68c:	5f                   	pop    edi
c000f68d:	5d                   	pop    ebp
c000f68e:	c3                   	ret    
c000f68f:	90                   	nop

c000f690 <File::File(char const*, Process*)>:
c000f690:	83 ec 0c             	sub    esp,0xc
c000f693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f697:	83 ec 08             	sub    esp,0x8
c000f69a:	6a 00                	push   0x0
c000f69c:	50                   	push   eax
c000f69d:	e8 66 e6 ff ff       	call   c000dd08 <UnixFile::UnixFile(int)>
c000f6a2:	83 c4 10             	add    esp,0x10
c000f6a5:	ba f8 14 02 c0       	mov    edx,0xc00214f8
c000f6aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6ae:	89 10                	mov    DWORD PTR [eax],edx
c000f6b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6b4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f6ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6be:	83 c0 0d             	add    eax,0xd
c000f6c1:	83 ec 04             	sub    esp,0x4
c000f6c4:	52                   	push   edx
c000f6c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f6c9:	50                   	push   eax
c000f6ca:	e8 17 fe ff ff       	call   c000f4e6 <standardiseFiles(char*, char const*, char const*)>
c000f6cf:	83 c4 10             	add    esp,0x10
c000f6d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6d6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f6d9:	8d 50 bf             	lea    edx,[eax-0x41]
c000f6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6e0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f6e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f6ea:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f6ee:	90                   	nop
c000f6ef:	83 c4 0c             	add    esp,0xc
c000f6f2:	c3                   	ret    
c000f6f3:	90                   	nop

c000f6f4 <File::open(FileOpenMode)>:
c000f6f4:	53                   	push   ebx
c000f6f5:	b8 0b 00 00 00       	mov    eax,0xb
c000f6fa:	83 ec 08             	sub    esp,0x8
c000f6fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f701:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f708:	80 fa 19             	cmp    dl,0x19
c000f70b:	77 40                	ja     c000f74d <File::open(FileOpenMode)+0x59>
c000f70d:	8b 14 95 20 47 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb8e0]
c000f714:	85 d2                	test   edx,edx
c000f716:	74 35                	je     c000f74d <File::open(FileOpenMode)+0x59>
c000f718:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f71e:	85 d2                	test   edx,edx
c000f720:	74 2b                	je     c000f74d <File::open(FileOpenMode)+0x59>
c000f722:	b8 06 00 00 00       	mov    eax,0x6
c000f727:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f72b:	75 20                	jne    c000f74d <File::open(FileOpenMode)+0x59>
c000f72d:	8b 02                	mov    eax,DWORD PTR [edx]
c000f72f:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f735:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f739:	51                   	push   ecx
c000f73a:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f73d:	51                   	push   ecx
c000f73e:	52                   	push   edx
c000f73f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f742:	83 c4 10             	add    esp,0x10
c000f745:	85 c0                	test   eax,eax
c000f747:	75 04                	jne    c000f74d <File::open(FileOpenMode)+0x59>
c000f749:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f74d:	83 c4 08             	add    esp,0x8
c000f750:	5b                   	pop    ebx
c000f751:	c3                   	ret    

c000f752 <File::close()>:
c000f752:	53                   	push   ebx
c000f753:	b8 0b 00 00 00       	mov    eax,0xb
c000f758:	83 ec 08             	sub    esp,0x8
c000f75b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f75f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f766:	80 fa 19             	cmp    dl,0x19
c000f769:	77 41                	ja     c000f7ac <File::close()+0x5a>
c000f76b:	8b 1c 95 20 47 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb8e0]
c000f772:	85 db                	test   ebx,ebx
c000f774:	74 36                	je     c000f7ac <File::close()+0x5a>
c000f776:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f77d:	74 2d                	je     c000f7ac <File::close()+0x5a>
c000f77f:	b8 05 00 00 00       	mov    eax,0x5
c000f784:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f788:	74 22                	je     c000f7ac <File::close()+0x5a>
c000f78a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f78e:	8b 04 95 20 47 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb8e0]
c000f795:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f79b:	53                   	push   ebx
c000f79c:	53                   	push   ebx
c000f79d:	8b 10                	mov    edx,DWORD PTR [eax]
c000f79f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f7a5:	50                   	push   eax
c000f7a6:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f7a9:	83 c4 10             	add    esp,0x10
c000f7ac:	83 c4 08             	add    esp,0x8
c000f7af:	5b                   	pop    ebx
c000f7b0:	c3                   	ret    
c000f7b1:	90                   	nop

c000f7b2 <File::seek(unsigned long long)>:
c000f7b2:	56                   	push   esi
c000f7b3:	b8 0b 00 00 00       	mov    eax,0xb
c000f7b8:	53                   	push   ebx
c000f7b9:	51                   	push   ecx
c000f7ba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f7be:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f7c2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f7c6:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f7cd:	80 fa 19             	cmp    dl,0x19
c000f7d0:	77 31                	ja     c000f803 <File::seek(unsigned long long)+0x51>
c000f7d2:	8b 14 95 20 47 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb8e0]
c000f7d9:	85 d2                	test   edx,edx
c000f7db:	74 26                	je     c000f803 <File::seek(unsigned long long)+0x51>
c000f7dd:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f7e3:	85 d2                	test   edx,edx
c000f7e5:	74 1c                	je     c000f803 <File::seek(unsigned long long)+0x51>
c000f7e7:	b8 05 00 00 00       	mov    eax,0x5
c000f7ec:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f7f0:	74 11                	je     c000f803 <File::seek(unsigned long long)+0x51>
c000f7f2:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7f4:	53                   	push   ebx
c000f7f5:	51                   	push   ecx
c000f7f6:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f7fc:	52                   	push   edx
c000f7fd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f800:	83 c4 10             	add    esp,0x10
c000f803:	5a                   	pop    edx
c000f804:	5b                   	pop    ebx
c000f805:	5e                   	pop    esi
c000f806:	c3                   	ret    
c000f807:	90                   	nop

c000f808 <File::tell(unsigned long long*)>:
c000f808:	83 ec 0c             	sub    esp,0xc
c000f80b:	b8 0b 00 00 00       	mov    eax,0xb
c000f810:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f814:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f81b:	80 fa 19             	cmp    dl,0x19
c000f81e:	77 34                	ja     c000f854 <File::tell(unsigned long long*)+0x4c>
c000f820:	8b 14 95 20 47 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb8e0]
c000f827:	85 d2                	test   edx,edx
c000f829:	74 29                	je     c000f854 <File::tell(unsigned long long*)+0x4c>
c000f82b:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f831:	85 d2                	test   edx,edx
c000f833:	74 1f                	je     c000f854 <File::tell(unsigned long long*)+0x4c>
c000f835:	b8 05 00 00 00       	mov    eax,0x5
c000f83a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f83e:	74 14                	je     c000f854 <File::tell(unsigned long long*)+0x4c>
c000f840:	50                   	push   eax
c000f841:	8b 02                	mov    eax,DWORD PTR [edx]
c000f843:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f847:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f84d:	52                   	push   edx
c000f84e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f851:	83 c4 10             	add    esp,0x10
c000f854:	83 c4 0c             	add    esp,0xc
c000f857:	c3                   	ret    

c000f858 <File::rewind()>:
c000f858:	83 ec 10             	sub    esp,0x10
c000f85b:	6a 00                	push   0x0
c000f85d:	6a 00                	push   0x0
c000f85f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f863:	e8 4a ff ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c000f868:	83 c4 1c             	add    esp,0x1c
c000f86b:	c3                   	ret    

c000f86c <File::unlink()>:
c000f86c:	83 ec 0c             	sub    esp,0xc
c000f86f:	b8 0b 00 00 00       	mov    eax,0xb
c000f874:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f878:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f87f:	80 f9 19             	cmp    cl,0x19
c000f882:	77 2f                	ja     c000f8b3 <File::unlink()+0x47>
c000f884:	8b 0c 8d 20 47 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb8e0]
c000f88b:	85 c9                	test   ecx,ecx
c000f88d:	74 24                	je     c000f8b3 <File::unlink()+0x47>
c000f88f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f895:	85 c9                	test   ecx,ecx
c000f897:	74 1a                	je     c000f8b3 <File::unlink()+0x47>
c000f899:	b8 06 00 00 00       	mov    eax,0x6
c000f89e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f8a2:	75 0f                	jne    c000f8b3 <File::unlink()+0x47>
c000f8a4:	50                   	push   eax
c000f8a5:	83 c2 0d             	add    edx,0xd
c000f8a8:	50                   	push   eax
c000f8a9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f8ab:	52                   	push   edx
c000f8ac:	51                   	push   ecx
c000f8ad:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f8b0:	83 c4 10             	add    esp,0x10
c000f8b3:	83 c4 0c             	add    esp,0xc
c000f8b6:	c3                   	ret    
c000f8b7:	90                   	nop

c000f8b8 <File::rename(char const*)>:
c000f8b8:	83 ec 0c             	sub    esp,0xc
c000f8bb:	b8 0b 00 00 00       	mov    eax,0xb
c000f8c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f8c4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f8cb:	80 f9 19             	cmp    cl,0x19
c000f8ce:	77 32                	ja     c000f902 <File::rename(char const*)+0x4a>
c000f8d0:	8b 0c 8d 20 47 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb8e0]
c000f8d7:	85 c9                	test   ecx,ecx
c000f8d9:	74 27                	je     c000f902 <File::rename(char const*)+0x4a>
c000f8db:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f8e1:	85 c9                	test   ecx,ecx
c000f8e3:	74 1d                	je     c000f902 <File::rename(char const*)+0x4a>
c000f8e5:	b8 06 00 00 00       	mov    eax,0x6
c000f8ea:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f8ee:	75 12                	jne    c000f902 <File::rename(char const*)+0x4a>
c000f8f0:	50                   	push   eax
c000f8f1:	83 c2 0d             	add    edx,0xd
c000f8f4:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f8f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8fa:	52                   	push   edx
c000f8fb:	51                   	push   ecx
c000f8fc:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f8ff:	83 c4 10             	add    esp,0x10
c000f902:	83 c4 0c             	add    esp,0xc
c000f905:	c3                   	ret    

c000f906 <File::chfatattr(unsigned char, unsigned char)>:
c000f906:	57                   	push   edi
c000f907:	b8 0b 00 00 00       	mov    eax,0xb
c000f90c:	56                   	push   esi
c000f90d:	53                   	push   ebx
c000f90e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f912:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f916:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f91a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f921:	80 f9 19             	cmp    cl,0x19
c000f924:	77 37                	ja     c000f95d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f926:	8b 0c 8d 20 47 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb8e0]
c000f92d:	85 c9                	test   ecx,ecx
c000f92f:	74 2c                	je     c000f95d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f931:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f937:	85 c9                	test   ecx,ecx
c000f939:	74 22                	je     c000f95d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f93b:	b8 06 00 00 00       	mov    eax,0x6
c000f940:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f944:	75 17                	jne    c000f95d <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f946:	89 f0                	mov    eax,esi
c000f948:	8b 39                	mov    edi,DWORD PTR [ecx]
c000f94a:	0f b6 f0             	movzx  esi,al
c000f94d:	56                   	push   esi
c000f94e:	83 c2 0d             	add    edx,0xd
c000f951:	0f b6 db             	movzx  ebx,bl
c000f954:	53                   	push   ebx
c000f955:	52                   	push   edx
c000f956:	51                   	push   ecx
c000f957:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000f95a:	83 c4 10             	add    esp,0x10
c000f95d:	5b                   	pop    ebx
c000f95e:	5e                   	pop    esi
c000f95f:	5f                   	pop    edi
c000f960:	c3                   	ret    
c000f961:	90                   	nop

c000f962 <File::exists()>:
c000f962:	83 ec 0c             	sub    esp,0xc
c000f965:	31 c0                	xor    eax,eax
c000f967:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f96b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f972:	80 f9 19             	cmp    cl,0x19
c000f975:	77 24                	ja     c000f99b <File::exists()+0x39>
c000f977:	8b 0c 8d 20 47 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb8e0]
c000f97e:	85 c9                	test   ecx,ecx
c000f980:	74 19                	je     c000f99b <File::exists()+0x39>
c000f982:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f988:	85 c9                	test   ecx,ecx
c000f98a:	74 0f                	je     c000f99b <File::exists()+0x39>
c000f98c:	50                   	push   eax
c000f98d:	83 c2 0d             	add    edx,0xd
c000f990:	50                   	push   eax
c000f991:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f993:	52                   	push   edx
c000f994:	51                   	push   ecx
c000f995:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f998:	83 c4 10             	add    esp,0x10
c000f99b:	83 c4 0c             	add    esp,0xc
c000f99e:	c3                   	ret    
c000f99f:	90                   	nop

c000f9a0 <File::stat(unsigned long long*, bool*)>:
c000f9a0:	56                   	push   esi
c000f9a1:	53                   	push   ebx
c000f9a2:	50                   	push   eax
c000f9a3:	b8 0b 00 00 00       	mov    eax,0xb
c000f9a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f9ac:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f9b0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f9b4:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f9bb:	80 f9 19             	cmp    cl,0x19
c000f9be:	77 3d                	ja     c000f9fd <File::stat(unsigned long long*, bool*)+0x5d>
c000f9c0:	8b 0c 8d 20 47 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb8e0]
c000f9c7:	85 c9                	test   ecx,ecx
c000f9c9:	74 32                	je     c000f9fd <File::stat(unsigned long long*, bool*)+0x5d>
c000f9cb:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f9d1:	85 c9                	test   ecx,ecx
c000f9d3:	74 28                	je     c000f9fd <File::stat(unsigned long long*, bool*)+0x5d>
c000f9d5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f9d7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f9db:	74 13                	je     c000f9f0 <File::stat(unsigned long long*, bool*)+0x50>
c000f9dd:	83 ec 04             	sub    esp,0x4
c000f9e0:	56                   	push   esi
c000f9e1:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000f9e7:	51                   	push   ecx
c000f9e8:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000f9eb:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000f9ee:	eb 0a                	jmp    c000f9fa <File::stat(unsigned long long*, bool*)+0x5a>
c000f9f0:	53                   	push   ebx
c000f9f1:	83 c2 0d             	add    edx,0xd
c000f9f4:	56                   	push   esi
c000f9f5:	52                   	push   edx
c000f9f6:	51                   	push   ecx
c000f9f7:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000f9fa:	83 c4 10             	add    esp,0x10
c000f9fd:	5a                   	pop    edx
c000f9fe:	5b                   	pop    ebx
c000f9ff:	5e                   	pop    esi
c000fa00:	c3                   	ret    

c000fa01 <getcwd(Process*, char*, int)>:
c000fa01:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fa05:	31 c0                	xor    eax,eax
c000fa07:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000fa0a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000fa0e:	7d 15                	jge    c000fa25 <getcwd(Process*, char*, int)+0x24>
c000fa10:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fa14:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000fa1b:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fa1e:	84 c9                	test   cl,cl
c000fa20:	74 06                	je     c000fa28 <getcwd(Process*, char*, int)+0x27>
c000fa22:	40                   	inc    eax
c000fa23:	eb e2                	jmp    c000fa07 <getcwd(Process*, char*, int)+0x6>
c000fa25:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000fa28:	31 c0                	xor    eax,eax
c000fa2a:	c3                   	ret    

c000fa2b <setcwd(Process*, char*)>:
c000fa2b:	55                   	push   ebp
c000fa2c:	57                   	push   edi
c000fa2d:	56                   	push   esi
c000fa2e:	53                   	push   ebx
c000fa2f:	81 ec 20 02 00 00    	sub    esp,0x220
c000fa35:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000fa3c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000fa42:	57                   	push   edi
c000fa43:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000fa4a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000fa4e:	56                   	push   esi
c000fa4f:	e8 92 fa ff ff       	call   c000f4e6 <standardiseFiles(char*, char const*, char const*)>
c000fa54:	89 34 24             	mov    DWORD PTR [esp],esi
c000fa57:	e8 c9 0b ff ff       	call   c0000625 <strlen>
c000fa5c:	83 c4 10             	add    esp,0x10
c000fa5f:	83 f8 02             	cmp    eax,0x2
c000fa62:	77 17                	ja     c000fa7b <setcwd(Process*, char*)+0x50>
c000fa64:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000fa69:	83 e8 41             	sub    eax,0x41
c000fa6c:	83 f8 19             	cmp    eax,0x19
c000fa6f:	76 24                	jbe    c000fa95 <setcwd(Process*, char*)+0x6a>
c000fa71:	b8 03 00 00 00       	mov    eax,0x3
c000fa76:	e9 cb 00 00 00       	jmp    c000fb46 <setcwd(Process*, char*)+0x11b>
c000fa7b:	83 ec 0c             	sub    esp,0xc
c000fa7e:	56                   	push   esi
c000fa7f:	e8 a1 0b ff ff       	call   c0000625 <strlen>
c000fa84:	83 c4 10             	add    esp,0x10
c000fa87:	83 f8 03             	cmp    eax,0x3
c000fa8a:	75 33                	jne    c000fabf <setcwd(Process*, char*)+0x94>
c000fa8c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000fa91:	75 2c                	jne    c000fabf <setcwd(Process*, char*)+0x94>
c000fa93:	eb cf                	jmp    c000fa64 <setcwd(Process*, char*)+0x39>
c000fa95:	8b 14 85 20 47 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb8e0]
c000fa9c:	b8 05 00 00 00       	mov    eax,0x5
c000faa1:	85 d2                	test   edx,edx
c000faa3:	0f 84 9d 00 00 00    	je     c000fb46 <setcwd(Process*, char*)+0x11b>
c000faa9:	b8 06 00 00 00       	mov    eax,0x6
c000faae:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fab5:	0f 84 8b 00 00 00    	je     c000fb46 <setcwd(Process*, char*)+0x11b>
c000fabb:	51                   	push   ecx
c000fabc:	51                   	push   ecx
c000fabd:	eb 7b                	jmp    c000fb3a <setcwd(Process*, char*)+0x10f>
c000fabf:	83 ec 0c             	sub    esp,0xc
c000fac2:	68 14 01 00 00       	push   0x114
c000fac7:	e8 58 f5 ff ff       	call   c000f024 <operator new(unsigned long)>
c000facc:	83 c4 0c             	add    esp,0xc
c000facf:	89 c3                	mov    ebx,eax
c000fad1:	55                   	push   ebp
c000fad2:	56                   	push   esi
c000fad3:	50                   	push   eax
c000fad4:	e8 b7 fb ff ff       	call   c000f690 <File::File(char const*, Process*)>
c000fad9:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000fade:	83 c4 0c             	add    esp,0xc
c000fae1:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000fae5:	50                   	push   eax
c000fae6:	8d 44 24 10          	lea    eax,[esp+0x10]
c000faea:	50                   	push   eax
c000faeb:	53                   	push   ebx
c000faec:	e8 af fe ff ff       	call   c000f9a0 <File::stat(unsigned long long*, bool*)>
c000faf1:	83 c4 10             	add    esp,0x10
c000faf4:	8b 13                	mov    edx,DWORD PTR [ebx]
c000faf6:	83 f8 02             	cmp    eax,0x2
c000faf9:	75 09                	jne    c000fb04 <setcwd(Process*, char*)+0xd9>
c000fafb:	83 ec 0c             	sub    esp,0xc
c000fafe:	53                   	push   ebx
c000faff:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fb02:	eb 0d                	jmp    c000fb11 <setcwd(Process*, char*)+0xe6>
c000fb04:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000fb07:	85 c0                	test   eax,eax
c000fb09:	74 10                	je     c000fb1b <setcwd(Process*, char*)+0xf0>
c000fb0b:	83 ec 0c             	sub    esp,0xc
c000fb0e:	53                   	push   ebx
c000fb0f:	ff d2                	call   edx
c000fb11:	83 c4 10             	add    esp,0x10
c000fb14:	b8 01 00 00 00       	mov    eax,0x1
c000fb19:	eb 2b                	jmp    c000fb46 <setcwd(Process*, char*)+0x11b>
c000fb1b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000fb20:	75 10                	jne    c000fb32 <setcwd(Process*, char*)+0x107>
c000fb22:	83 ec 0c             	sub    esp,0xc
c000fb25:	53                   	push   ebx
c000fb26:	ff d2                	call   edx
c000fb28:	83 c4 10             	add    esp,0x10
c000fb2b:	b8 02 00 00 00       	mov    eax,0x2
c000fb30:	eb 14                	jmp    c000fb46 <setcwd(Process*, char*)+0x11b>
c000fb32:	83 ec 0c             	sub    esp,0xc
c000fb35:	53                   	push   ebx
c000fb36:	ff d2                	call   edx
c000fb38:	58                   	pop    eax
c000fb39:	5a                   	pop    edx
c000fb3a:	56                   	push   esi
c000fb3b:	57                   	push   edi
c000fb3c:	e8 66 0b ff ff       	call   c00006a7 <strcpy>
c000fb41:	83 c4 10             	add    esp,0x10
c000fb44:	31 c0                	xor    eax,eax
c000fb46:	81 c4 1c 02 00 00    	add    esp,0x21c
c000fb4c:	5b                   	pop    ebx
c000fb4d:	5e                   	pop    esi
c000fb4e:	5f                   	pop    edi
c000fb4f:	5d                   	pop    ebp
c000fb50:	c3                   	ret    
c000fb51:	90                   	nop

c000fb52 <Directory::Directory(char const*, Process*)>:
c000fb52:	83 ec 0c             	sub    esp,0xc
c000fb55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb59:	83 ec 08             	sub    esp,0x8
c000fb5c:	6a 00                	push   0x0
c000fb5e:	50                   	push   eax
c000fb5f:	e8 a4 e1 ff ff       	call   c000dd08 <UnixFile::UnixFile(int)>
c000fb64:	83 c4 10             	add    esp,0x10
c000fb67:	ba 14 15 02 c0       	mov    edx,0xc0021514
c000fb6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb70:	89 10                	mov    DWORD PTR [eax],edx
c000fb72:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fb76:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000fb7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb80:	83 c0 0d             	add    eax,0xd
c000fb83:	83 ec 04             	sub    esp,0x4
c000fb86:	52                   	push   edx
c000fb87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb8b:	50                   	push   eax
c000fb8c:	e8 55 f9 ff ff       	call   c000f4e6 <standardiseFiles(char*, char const*, char const*)>
c000fb91:	83 c4 10             	add    esp,0x10
c000fb94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb98:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000fb9b:	8d 50 bf             	lea    edx,[eax-0x41]
c000fb9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fba2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000fba8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fbac:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000fbb0:	90                   	nop
c000fbb1:	83 c4 0c             	add    esp,0xc
c000fbb4:	c3                   	ret    
c000fbb5:	90                   	nop

c000fbb6 <Directory::open()>:
c000fbb6:	53                   	push   ebx
c000fbb7:	b8 0b 00 00 00       	mov    eax,0xb
c000fbbc:	83 ec 08             	sub    esp,0x8
c000fbbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fbc3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fbca:	80 fa 19             	cmp    dl,0x19
c000fbcd:	77 3d                	ja     c000fc0c <Directory::open()+0x56>
c000fbcf:	8b 14 95 20 47 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb8e0]
c000fbd6:	85 d2                	test   edx,edx
c000fbd8:	74 32                	je     c000fc0c <Directory::open()+0x56>
c000fbda:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000fbe0:	85 d2                	test   edx,edx
c000fbe2:	74 28                	je     c000fc0c <Directory::open()+0x56>
c000fbe4:	b8 06 00 00 00       	mov    eax,0x6
c000fbe9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fbed:	75 1d                	jne    c000fc0c <Directory::open()+0x56>
c000fbef:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fbf5:	50                   	push   eax
c000fbf6:	8b 02                	mov    eax,DWORD PTR [edx]
c000fbf8:	51                   	push   ecx
c000fbf9:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000fbfc:	51                   	push   ecx
c000fbfd:	52                   	push   edx
c000fbfe:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fc01:	83 c4 10             	add    esp,0x10
c000fc04:	85 c0                	test   eax,eax
c000fc06:	75 04                	jne    c000fc0c <Directory::open()+0x56>
c000fc08:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000fc0c:	83 c4 08             	add    esp,0x8
c000fc0f:	5b                   	pop    ebx
c000fc10:	c3                   	ret    
c000fc11:	90                   	nop

c000fc12 <Directory::close()>:
c000fc12:	53                   	push   ebx
c000fc13:	b8 0b 00 00 00       	mov    eax,0xb
c000fc18:	83 ec 08             	sub    esp,0x8
c000fc1b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fc1f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fc26:	80 fa 19             	cmp    dl,0x19
c000fc29:	77 41                	ja     c000fc6c <Directory::close()+0x5a>
c000fc2b:	8b 1c 95 20 47 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb8e0]
c000fc32:	85 db                	test   ebx,ebx
c000fc34:	74 36                	je     c000fc6c <Directory::close()+0x5a>
c000fc36:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fc3d:	74 2d                	je     c000fc6c <Directory::close()+0x5a>
c000fc3f:	b8 05 00 00 00       	mov    eax,0x5
c000fc44:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000fc48:	74 22                	je     c000fc6c <Directory::close()+0x5a>
c000fc4a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fc4e:	8b 04 95 20 47 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb8e0]
c000fc55:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000fc5b:	53                   	push   ebx
c000fc5c:	53                   	push   ebx
c000fc5d:	8b 10                	mov    edx,DWORD PTR [eax]
c000fc5f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000fc65:	50                   	push   eax
c000fc66:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000fc69:	83 c4 10             	add    esp,0x10
c000fc6c:	83 c4 08             	add    esp,0x8
c000fc6f:	5b                   	pop    ebx
c000fc70:	c3                   	ret    
c000fc71:	90                   	nop

c000fc72 <Directory::unlink()>:
c000fc72:	83 ec 0c             	sub    esp,0xc
c000fc75:	b8 0b 00 00 00       	mov    eax,0xb
c000fc7a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fc7e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fc85:	80 f9 19             	cmp    cl,0x19
c000fc88:	77 2f                	ja     c000fcb9 <Directory::unlink()+0x47>
c000fc8a:	8b 0c 8d 20 47 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb8e0]
c000fc91:	85 c9                	test   ecx,ecx
c000fc93:	74 24                	je     c000fcb9 <Directory::unlink()+0x47>
c000fc95:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fc9b:	85 c9                	test   ecx,ecx
c000fc9d:	74 1a                	je     c000fcb9 <Directory::unlink()+0x47>
c000fc9f:	b8 06 00 00 00       	mov    eax,0x6
c000fca4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fca8:	75 0f                	jne    c000fcb9 <Directory::unlink()+0x47>
c000fcaa:	50                   	push   eax
c000fcab:	83 c2 0d             	add    edx,0xd
c000fcae:	50                   	push   eax
c000fcaf:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fcb1:	52                   	push   edx
c000fcb2:	51                   	push   ecx
c000fcb3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fcb6:	83 c4 10             	add    esp,0x10
c000fcb9:	83 c4 0c             	add    esp,0xc
c000fcbc:	c3                   	ret    
c000fcbd:	90                   	nop

c000fcbe <Directory::rename(char const*)>:
c000fcbe:	83 ec 0c             	sub    esp,0xc
c000fcc1:	b8 0b 00 00 00       	mov    eax,0xb
c000fcc6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fcca:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fcd1:	80 f9 19             	cmp    cl,0x19
c000fcd4:	77 32                	ja     c000fd08 <Directory::rename(char const*)+0x4a>
c000fcd6:	8b 0c 8d 20 47 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb8e0]
c000fcdd:	85 c9                	test   ecx,ecx
c000fcdf:	74 27                	je     c000fd08 <Directory::rename(char const*)+0x4a>
c000fce1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fce7:	85 c9                	test   ecx,ecx
c000fce9:	74 1d                	je     c000fd08 <Directory::rename(char const*)+0x4a>
c000fceb:	b8 06 00 00 00       	mov    eax,0x6
c000fcf0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fcf4:	75 12                	jne    c000fd08 <Directory::rename(char const*)+0x4a>
c000fcf6:	50                   	push   eax
c000fcf7:	83 c2 0d             	add    edx,0xd
c000fcfa:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fcfc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fd00:	52                   	push   edx
c000fd01:	51                   	push   ecx
c000fd02:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fd05:	83 c4 10             	add    esp,0x10
c000fd08:	83 c4 0c             	add    esp,0xc
c000fd0b:	c3                   	ret    

c000fd0c <Directory::exists()>:
c000fd0c:	83 ec 0c             	sub    esp,0xc
c000fd0f:	31 c0                	xor    eax,eax
c000fd11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd15:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd1c:	80 f9 19             	cmp    cl,0x19
c000fd1f:	77 24                	ja     c000fd45 <Directory::exists()+0x39>
c000fd21:	8b 0c 8d 20 47 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb8e0]
c000fd28:	85 c9                	test   ecx,ecx
c000fd2a:	74 19                	je     c000fd45 <Directory::exists()+0x39>
c000fd2c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd32:	85 c9                	test   ecx,ecx
c000fd34:	74 0f                	je     c000fd45 <Directory::exists()+0x39>
c000fd36:	50                   	push   eax
c000fd37:	83 c2 0d             	add    edx,0xd
c000fd3a:	50                   	push   eax
c000fd3b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd3d:	52                   	push   edx
c000fd3e:	51                   	push   ecx
c000fd3f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fd42:	83 c4 10             	add    esp,0x10
c000fd45:	83 c4 0c             	add    esp,0xc
c000fd48:	c3                   	ret    
c000fd49:	90                   	nop

c000fd4a <Directory::read(dirent*)>:
c000fd4a:	83 ec 1c             	sub    esp,0x1c
c000fd4d:	b8 0b 00 00 00       	mov    eax,0xb
c000fd52:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fd56:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fd5d:	80 fa 19             	cmp    dl,0x19
c000fd60:	77 30                	ja     c000fd92 <Directory::read(dirent*)+0x48>
c000fd62:	8b 14 95 20 47 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb8e0]
c000fd69:	85 d2                	test   edx,edx
c000fd6b:	74 25                	je     c000fd92 <Directory::read(dirent*)+0x48>
c000fd6d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fd74:	74 1c                	je     c000fd92 <Directory::read(dirent*)+0x48>
c000fd76:	83 ec 0c             	sub    esp,0xc
c000fd79:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd7b:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fd7f:	52                   	push   edx
c000fd80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fd84:	6a 00                	push   0x0
c000fd86:	68 10 01 00 00       	push   0x110
c000fd8b:	51                   	push   ecx
c000fd8c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fd8f:	83 c4 20             	add    esp,0x20
c000fd92:	83 c4 1c             	add    esp,0x1c
c000fd95:	c3                   	ret    

c000fd96 <Directory::create()>:
c000fd96:	83 ec 0c             	sub    esp,0xc
c000fd99:	b8 0b 00 00 00       	mov    eax,0xb
c000fd9e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fda2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fda9:	80 f9 19             	cmp    cl,0x19
c000fdac:	77 2f                	ja     c000fddd <Directory::create()+0x47>
c000fdae:	8b 0c 8d 20 47 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb8e0]
c000fdb5:	85 c9                	test   ecx,ecx
c000fdb7:	74 24                	je     c000fddd <Directory::create()+0x47>
c000fdb9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fdbf:	85 c9                	test   ecx,ecx
c000fdc1:	74 1a                	je     c000fddd <Directory::create()+0x47>
c000fdc3:	b8 06 00 00 00       	mov    eax,0x6
c000fdc8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fdcc:	75 0f                	jne    c000fddd <Directory::create()+0x47>
c000fdce:	50                   	push   eax
c000fdcf:	83 c2 0d             	add    edx,0xd
c000fdd2:	50                   	push   eax
c000fdd3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fdd5:	52                   	push   edx
c000fdd6:	51                   	push   ecx
c000fdd7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fdda:	83 c4 10             	add    esp,0x10
c000fddd:	83 c4 0c             	add    esp,0xc
c000fde0:	c3                   	ret    
c000fde1:	90                   	nop

c000fde2 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fde2:	b8 0a 00 00 00       	mov    eax,0xa
c000fde7:	c3                   	ret    

c000fde8 <Bus::Bus(char const*)>:
c000fde8:	83 ec 0c             	sub    esp,0xc
c000fdeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdef:	83 ec 08             	sub    esp,0x8
c000fdf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdf6:	50                   	push   eax
c000fdf7:	e8 62 09 00 00       	call   c001075e <Device::Device(char const*)>
c000fdfc:	83 c4 10             	add    esp,0x10
c000fdff:	ba 30 15 02 c0       	mov    edx,0xc0021530
c000fe04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe08:	89 10                	mov    DWORD PTR [eax],edx
c000fe0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe0e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fe18:	90                   	nop
c000fe19:	83 c4 0c             	add    esp,0xc
c000fe1c:	c3                   	ret    
c000fe1d:	90                   	nop

c000fe1e <Bus::~Bus()>:
c000fe1e:	83 ec 0c             	sub    esp,0xc
c000fe21:	ba 30 15 02 c0       	mov    edx,0xc0021530
c000fe26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe2a:	89 10                	mov    DWORD PTR [eax],edx
c000fe2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe30:	83 ec 0c             	sub    esp,0xc
c000fe33:	50                   	push   eax
c000fe34:	e8 db 05 00 00       	call   c0010414 <Device::~Device()>
c000fe39:	83 c4 10             	add    esp,0x10
c000fe3c:	90                   	nop
c000fe3d:	83 c4 0c             	add    esp,0xc
c000fe40:	c3                   	ret    
c000fe41:	90                   	nop

c000fe42 <Bus::~Bus()>:
c000fe42:	83 ec 0c             	sub    esp,0xc
c000fe45:	83 ec 0c             	sub    esp,0xc
c000fe48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe4c:	e8 cd ff ff ff       	call   c000fe1e <Bus::~Bus()>
c000fe51:	83 c4 10             	add    esp,0x10
c000fe54:	83 ec 08             	sub    esp,0x8
c000fe57:	68 58 01 00 00       	push   0x158
c000fe5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe60:	e8 ce f1 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c000fe65:	83 c4 10             	add    esp,0x10
c000fe68:	83 c4 0c             	add    esp,0xc
c000fe6b:	c3                   	ret    

c000fe6c <Buzzer::Buzzer(char const*)>:
c000fe6c:	83 ec 0c             	sub    esp,0xc
c000fe6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe73:	83 ec 08             	sub    esp,0x8
c000fe76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe7a:	50                   	push   eax
c000fe7b:	e8 de 08 00 00       	call   c001075e <Device::Device(char const*)>
c000fe80:	83 c4 10             	add    esp,0x10
c000fe83:	ba 5c 15 02 c0       	mov    edx,0xc002155c
c000fe88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe8c:	89 10                	mov    DWORD PTR [eax],edx
c000fe8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe92:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000fe9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fea0:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000feaa:	90                   	nop
c000feab:	83 c4 0c             	add    esp,0xc
c000feae:	c3                   	ret    
c000feaf:	90                   	nop

c000feb0 <Buzzer::~Buzzer()>:
c000feb0:	83 ec 0c             	sub    esp,0xc
c000feb3:	ba 5c 15 02 c0       	mov    edx,0xc002155c
c000feb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000febc:	89 10                	mov    DWORD PTR [eax],edx
c000febe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fec2:	83 ec 0c             	sub    esp,0xc
c000fec5:	50                   	push   eax
c000fec6:	e8 49 05 00 00       	call   c0010414 <Device::~Device()>
c000fecb:	83 c4 10             	add    esp,0x10
c000fece:	90                   	nop
c000fecf:	83 c4 0c             	add    esp,0xc
c000fed2:	c3                   	ret    
c000fed3:	90                   	nop

c000fed4 <Buzzer::~Buzzer()>:
c000fed4:	83 ec 0c             	sub    esp,0xc
c000fed7:	83 ec 0c             	sub    esp,0xc
c000feda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fede:	e8 cd ff ff ff       	call   c000feb0 <Buzzer::~Buzzer()>
c000fee3:	83 c4 10             	add    esp,0x10
c000fee6:	83 ec 08             	sub    esp,0x8
c000fee9:	68 5c 01 00 00       	push   0x15c
c000feee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fef2:	e8 3c f1 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c000fef7:	83 c4 10             	add    esp,0x10
c000fefa:	83 c4 0c             	add    esp,0xc
c000fefd:	c3                   	ret    

c000fefe <Buzzer::stop()>:
c000fefe:	83 ec 14             	sub    esp,0x14
c000ff01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ff05:	8b 10                	mov    edx,DWORD PTR [eax]
c000ff07:	6a 00                	push   0x0
c000ff09:	50                   	push   eax
c000ff0a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ff0d:	83 c4 1c             	add    esp,0x1c
c000ff10:	c3                   	ret    

c000ff11 <beepThread(void*)>:
c000ff11:	53                   	push   ebx
c000ff12:	83 ec 08             	sub    esp,0x8
c000ff15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ff19:	e8 d9 84 00 00       	call   c00183f7 <unlockScheduler()>
c000ff1e:	52                   	push   edx
c000ff1f:	b8 40 42 0f 00       	mov    eax,0xf4240
c000ff24:	52                   	push   edx
c000ff25:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000ff2b:	52                   	push   edx
c000ff2c:	50                   	push   eax
c000ff2d:	e8 21 8a 00 00       	call   c0018953 <nanoSleep(unsigned long long)>
c000ff32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ff35:	e8 c4 ff ff ff       	call   c000fefe <Buzzer::stop()>
c000ff3a:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000ff42:	83 c4 18             	add    esp,0x18
c000ff45:	5b                   	pop    ebx
c000ff46:	e9 4c 89 00 00       	jmp    c0018897 <blockTask(TaskState)>
c000ff4b:	90                   	nop

c000ff4c <Buzzer::beep(int, int, bool)>:
c000ff4c:	57                   	push   edi
c000ff4d:	56                   	push   esi
c000ff4e:	53                   	push   ebx
c000ff4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ff53:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ff57:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ff5b:	52                   	push   edx
c000ff5c:	52                   	push   edx
c000ff5d:	8b 06                	mov    eax,DWORD PTR [esi]
c000ff5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff63:	56                   	push   esi
c000ff64:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ff67:	89 f8                	mov    eax,edi
c000ff69:	83 c4 10             	add    esp,0x10
c000ff6c:	84 c0                	test   al,al
c000ff6e:	74 1f                	je     c000ff8f <Buzzer::beep(int, int, bool)+0x43>
c000ff70:	50                   	push   eax
c000ff71:	50                   	push   eax
c000ff72:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c000ff78:	99                   	cdq    
c000ff79:	52                   	push   edx
c000ff7a:	50                   	push   eax
c000ff7b:	e8 d3 89 00 00       	call   c0018953 <nanoSleep(unsigned long long)>
c000ff80:	83 c4 10             	add    esp,0x10
c000ff83:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000ff87:	5b                   	pop    ebx
c000ff88:	5e                   	pop    esi
c000ff89:	5f                   	pop    edi
c000ff8a:	e9 6f ff ff ff       	jmp    c000fefe <Buzzer::stop()>
c000ff8f:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c000ff95:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c000ff9a:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000ffa2:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000ffa6:	c7 44 24 14 11 ff 00 c0 	mov    DWORD PTR [esp+0x14],0xc000ff11
c000ffae:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ffb2:	5b                   	pop    ebx
c000ffb3:	5e                   	pop    esi
c000ffb4:	5f                   	pop    edi
c000ffb5:	e9 70 85 00 00       	jmp    c001852a <Process::createThread(void (*)(void*), void*, int)>

c000ffba <loadClockSettings()>:
c000ffba:	c7 05 94 42 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0024294,0xa
c000ffc4:	c6 05 91 42 02 c0 00 	mov    BYTE PTR ds:0xc0024291,0x0
c000ffcb:	c6 05 90 42 02 c0 01 	mov    BYTE PTR ds:0xc0024290,0x1
c000ffd2:	c3                   	ret    
c000ffd3:	90                   	nop

c000ffd4 <Clock::Clock(char const*)>:
c000ffd4:	83 ec 0c             	sub    esp,0xc
c000ffd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffdb:	83 ec 08             	sub    esp,0x8
c000ffde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffe2:	50                   	push   eax
c000ffe3:	e8 76 07 00 00       	call   c001075e <Device::Device(char const*)>
c000ffe8:	83 c4 10             	add    esp,0x10
c000ffeb:	ba 8c 15 02 c0       	mov    edx,0xc002158c
c000fff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fff4:	89 10                	mov    DWORD PTR [eax],edx
c000fff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fffa:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0010004:	90                   	nop
c0010005:	83 c4 0c             	add    esp,0xc
c0010008:	c3                   	ret    
c0010009:	90                   	nop

c001000a <Clock::~Clock()>:
c001000a:	83 ec 0c             	sub    esp,0xc
c001000d:	ba 8c 15 02 c0       	mov    edx,0xc002158c
c0010012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010016:	89 10                	mov    DWORD PTR [eax],edx
c0010018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001001c:	83 ec 0c             	sub    esp,0xc
c001001f:	50                   	push   eax
c0010020:	e8 ef 03 00 00       	call   c0010414 <Device::~Device()>
c0010025:	83 c4 10             	add    esp,0x10
c0010028:	90                   	nop
c0010029:	83 c4 0c             	add    esp,0xc
c001002c:	c3                   	ret    
c001002d:	90                   	nop

c001002e <Clock::~Clock()>:
c001002e:	83 ec 0c             	sub    esp,0xc
c0010031:	83 ec 0c             	sub    esp,0xc
c0010034:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010038:	e8 cd ff ff ff       	call   c001000a <Clock::~Clock()>
c001003d:	83 c4 10             	add    esp,0x10
c0010040:	83 ec 08             	sub    esp,0x8
c0010043:	68 58 01 00 00       	push   0x158
c0010048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001004c:	e8 e2 ef ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0010051:	83 c4 10             	add    esp,0x10
c0010054:	83 c4 0c             	add    esp,0xc
c0010057:	c3                   	ret    

c0010058 <Clock::timeInSecondsLocal()>:
c0010058:	53                   	push   ebx
c0010059:	83 ec 14             	sub    esp,0x14
c001005c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010060:	8b 10                	mov    edx,DWORD PTR [eax]
c0010062:	50                   	push   eax
c0010063:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0010066:	0f b6 0d 90 42 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024290
c001006d:	03 0d 94 42 02 c0    	add    ecx,DWORD PTR ds:0xc0024294
c0010073:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010079:	89 cb                	mov    ebx,ecx
c001007b:	c1 fb 1f             	sar    ebx,0x1f
c001007e:	01 c8                	add    eax,ecx
c0010080:	11 da                	adc    edx,ebx
c0010082:	83 c4 10             	add    esp,0x10
c0010085:	31 c9                	xor    ecx,ecx
c0010087:	80 3d 91 42 02 c0 00 	cmp    BYTE PTR ds:0xc0024291,0x0
c001008e:	74 05                	je     c0010095 <Clock::timeInSecondsLocal()+0x3d>
c0010090:	b9 08 07 00 00       	mov    ecx,0x708
c0010095:	31 db                	xor    ebx,ebx
c0010097:	01 c8                	add    eax,ecx
c0010099:	11 da                	adc    edx,ebx
c001009b:	83 c4 08             	add    esp,0x8
c001009e:	5b                   	pop    ebx
c001009f:	c3                   	ret    

c00100a0 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c00100a0:	57                   	push   edi
c00100a1:	56                   	push   esi
c00100a2:	53                   	push   ebx
c00100a3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00100a7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00100ab:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00100af:	8b 01                	mov    eax,DWORD PTR [ecx]
c00100b1:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c00100b4:	0f b6 05 90 42 02 c0 	movzx  eax,BYTE PTR ds:0xc0024290
c00100bb:	03 05 94 42 02 c0    	add    eax,DWORD PTR ds:0xc0024294
c00100c1:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c00100c7:	99                   	cdq    
c00100c8:	29 c6                	sub    esi,eax
c00100ca:	19 d7                	sbb    edi,edx
c00100cc:	89 f0                	mov    eax,esi
c00100ce:	89 fa                	mov    edx,edi
c00100d0:	31 f6                	xor    esi,esi
c00100d2:	80 3d 91 42 02 c0 00 	cmp    BYTE PTR ds:0xc0024291,0x0
c00100d9:	74 05                	je     c00100e0 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c00100db:	be 08 07 00 00       	mov    esi,0x708
c00100e0:	31 ff                	xor    edi,edi
c00100e2:	29 f0                	sub    eax,esi
c00100e4:	19 fa                	sbb    edx,edi
c00100e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00100ea:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00100ee:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00100f2:	89 d8                	mov    eax,ebx
c00100f4:	5b                   	pop    ebx
c00100f5:	5e                   	pop    esi
c00100f6:	5f                   	pop    edi
c00100f7:	ff e0                	jmp    eax

c00100f9 <datetimeToSeconds(datetime_t)>:
c00100f9:	55                   	push   ebp
c00100fa:	57                   	push   edi
c00100fb:	56                   	push   esi
c00100fc:	53                   	push   ebx
c00100fd:	83 ec 14             	sub    esp,0x14
c0010100:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0010104:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0010108:	0f b6 f5             	movzx  esi,ch
c001010b:	6b f6 3c             	imul   esi,esi,0x3c
c001010e:	89 cf                	mov    edi,ecx
c0010110:	89 d3                	mov    ebx,edx
c0010112:	0f b6 c9             	movzx  ecx,cl
c0010115:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001011b:	0f b6 c6             	movzx  eax,dh
c001011e:	c1 ef 10             	shr    edi,0x10
c0010121:	48                   	dec    eax
c0010122:	c1 eb 10             	shr    ebx,0x10
c0010125:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0010129:	89 f8                	mov    eax,edi
c001012b:	0f b6 f8             	movzx  edi,al
c001012e:	01 fe                	add    esi,edi
c0010130:	01 f1                	add    ecx,esi
c0010132:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010136:	c1 f9 1f             	sar    ecx,0x1f
c0010139:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001013d:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0010142:	0f b6 d2             	movzx  edx,dl
c0010145:	66 81 eb 6c 07       	sub    bx,0x76c
c001014a:	8b 0c 8d c0 15 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdea40]
c0010151:	0f b7 f3             	movzx  esi,bx
c0010154:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0010158:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c001015d:	76 29                	jbe    c0010188 <datetimeToSeconds(datetime_t)+0x8f>
c001015f:	f6 c3 03             	test   bl,0x3
c0010162:	75 24                	jne    c0010188 <datetimeToSeconds(datetime_t)+0x8f>
c0010164:	31 d2                	xor    edx,edx
c0010166:	bf 64 00 00 00       	mov    edi,0x64
c001016b:	89 d8                	mov    eax,ebx
c001016d:	66 f7 f7             	div    di
c0010170:	66 85 d2             	test   dx,dx
c0010173:	75 12                	jne    c0010187 <datetimeToSeconds(datetime_t)+0x8e>
c0010175:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c001017b:	bf 90 01 00 00       	mov    edi,0x190
c0010180:	99                   	cdq    
c0010181:	f7 ff                	idiv   edi
c0010183:	85 d2                	test   edx,edx
c0010185:	75 01                	jne    c0010188 <datetimeToSeconds(datetime_t)+0x8f>
c0010187:	41                   	inc    ecx
c0010188:	66 83 fb 46          	cmp    bx,0x46
c001018c:	76 45                	jbe    c00101d3 <datetimeToSeconds(datetime_t)+0xda>
c001018e:	bb 46 00 00 00       	mov    ebx,0x46
c0010193:	bf 64 00 00 00       	mov    edi,0x64
c0010198:	bd 90 01 00 00       	mov    ebp,0x190
c001019d:	b8 6d 01 00 00       	mov    eax,0x16d
c00101a2:	f6 c3 03             	test   bl,0x3
c00101a5:	75 23                	jne    c00101ca <datetimeToSeconds(datetime_t)+0xd1>
c00101a7:	89 d8                	mov    eax,ebx
c00101a9:	99                   	cdq    
c00101aa:	f7 ff                	idiv   edi
c00101ac:	85 d2                	test   edx,edx
c00101ae:	b8 6e 01 00 00       	mov    eax,0x16e
c00101b3:	75 15                	jne    c00101ca <datetimeToSeconds(datetime_t)+0xd1>
c00101b5:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c00101bb:	99                   	cdq    
c00101bc:	f7 fd                	idiv   ebp
c00101be:	31 c0                	xor    eax,eax
c00101c0:	85 d2                	test   edx,edx
c00101c2:	0f 94 c0             	sete   al
c00101c5:	05 6d 01 00 00       	add    eax,0x16d
c00101ca:	43                   	inc    ebx
c00101cb:	01 c1                	add    ecx,eax
c00101cd:	39 f3                	cmp    ebx,esi
c00101cf:	7c cc                	jl     c001019d <datetimeToSeconds(datetime_t)+0xa4>
c00101d1:	eb 3b                	jmp    c001020e <datetimeToSeconds(datetime_t)+0x115>
c00101d3:	74 39                	je     c001020e <datetimeToSeconds(datetime_t)+0x115>
c00101d5:	b8 45 00 00 00       	mov    eax,0x45
c00101da:	89 c2                	mov    edx,eax
c00101dc:	83 e2 03             	and    edx,0x3
c00101df:	39 f0                	cmp    eax,esi
c00101e1:	7e 13                	jle    c00101f6 <datetimeToSeconds(datetime_t)+0xfd>
c00101e3:	85 d2                	test   edx,edx
c00101e5:	0f 94 c2             	sete   dl
c00101e8:	0f b6 d2             	movzx  edx,dl
c00101eb:	81 c2 6d 01 00 00    	add    edx,0x16d
c00101f1:	48                   	dec    eax
c00101f2:	29 d1                	sub    ecx,edx
c00101f4:	eb e4                	jmp    c00101da <datetimeToSeconds(datetime_t)+0xe1>
c00101f6:	b8 6d 01 00 00       	mov    eax,0x16d
c00101fb:	85 d2                	test   edx,edx
c00101fd:	75 0d                	jne    c001020c <datetimeToSeconds(datetime_t)+0x113>
c00101ff:	31 c0                	xor    eax,eax
c0010201:	66 85 db             	test   bx,bx
c0010204:	0f 95 c0             	setne  al
c0010207:	05 6d 01 00 00       	add    eax,0x16d
c001020c:	29 c1                	sub    ecx,eax
c001020e:	b8 80 51 01 00       	mov    eax,0x15180
c0010213:	f7 e9                	imul   ecx
c0010215:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0010219:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c001021d:	83 c4 14             	add    esp,0x14
c0010220:	5b                   	pop    ebx
c0010221:	5e                   	pop    esi
c0010222:	5f                   	pop    edi
c0010223:	5d                   	pop    ebp
c0010224:	c3                   	ret    
c0010225:	90                   	nop

c0010226 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0010226:	57                   	push   edi
c0010227:	56                   	push   esi
c0010228:	53                   	push   ebx
c0010229:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001022d:	8b 06                	mov    eax,DWORD PTR [esi]
c001022f:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0010232:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010236:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001023a:	e8 ba fe ff ff       	call   c00100f9 <datetimeToSeconds(datetime_t)>
c001023f:	59                   	pop    ecx
c0010240:	0f b6 0d 90 42 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024290
c0010247:	03 0d 94 42 02 c0    	add    ecx,DWORD PTR ds:0xc0024294
c001024d:	5b                   	pop    ebx
c001024e:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010254:	89 cb                	mov    ebx,ecx
c0010256:	c1 fb 1f             	sar    ebx,0x1f
c0010259:	29 c8                	sub    eax,ecx
c001025b:	19 da                	sbb    edx,ebx
c001025d:	31 c9                	xor    ecx,ecx
c001025f:	80 3d 91 42 02 c0 00 	cmp    BYTE PTR ds:0xc0024291,0x0
c0010266:	74 05                	je     c001026d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0010268:	b9 08 07 00 00       	mov    ecx,0x708
c001026d:	31 db                	xor    ebx,ebx
c001026f:	29 c8                	sub    eax,ecx
c0010271:	19 da                	sbb    edx,ebx
c0010273:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010277:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001027b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001027f:	5b                   	pop    ebx
c0010280:	89 f8                	mov    eax,edi
c0010282:	5e                   	pop    esi
c0010283:	5f                   	pop    edi
c0010284:	ff e0                	jmp    eax

c0010286 <secondsToDatetime(unsigned long long)>:
c0010286:	55                   	push   ebp
c0010287:	57                   	push   edi
c0010288:	56                   	push   esi
c0010289:	53                   	push   ebx
c001028a:	83 ec 1c             	sub    esp,0x1c
c001028d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010291:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010295:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0010299:	6a 00                	push   0x0
c001029b:	68 80 51 01 00       	push   0x15180
c00102a0:	55                   	push   ebp
c00102a1:	57                   	push   edi
c00102a2:	e8 05 ec 00 00       	call   c001eeac <__udivdi3>
c00102a7:	83 c4 10             	add    esp,0x10
c00102aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00102ae:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c00102b4:	6a 00                	push   0x0
c00102b6:	68 80 51 01 00       	push   0x15180
c00102bb:	55                   	push   ebp
c00102bc:	57                   	push   edi
c00102bd:	e8 ea ec 00 00       	call   c001efac <__umoddi3>
c00102c2:	bf 10 0e 00 00       	mov    edi,0xe10
c00102c7:	83 c4 10             	add    esp,0x10
c00102ca:	99                   	cdq    
c00102cb:	f7 ff                	idiv   edi
c00102cd:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00102d0:	89 d0                	mov    eax,edx
c00102d2:	99                   	cdq    
c00102d3:	bf 3c 00 00 00       	mov    edi,0x3c
c00102d8:	f7 ff                	idiv   edi
c00102da:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00102dd:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00102e0:	85 db                	test   ebx,ebx
c00102e2:	79 11                	jns    c00102f5 <secondsToDatetime(unsigned long long)+0x6f>
c00102e4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00102e8:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00102ee:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00102f3:	eb 07                	jmp    c00102fc <secondsToDatetime(unsigned long long)+0x76>
c00102f5:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00102fa:	89 d8                	mov    eax,ebx
c00102fc:	99                   	cdq    
c00102fd:	f7 f9                	idiv   ecx
c00102ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010303:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0010308:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0010310:	01 c3                	add    ebx,eax
c0010312:	31 d2                	xor    edx,edx
c0010314:	89 d8                	mov    eax,ebx
c0010316:	bf b4 05 00 00       	mov    edi,0x5b4
c001031b:	f7 f1                	div    ecx
c001031d:	31 d2                	xor    edx,edx
c001031f:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0010324:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0010327:	89 d8                	mov    eax,ebx
c0010329:	f7 f7                	div    edi
c001032b:	29 c1                	sub    ecx,eax
c001032d:	31 d2                	xor    edx,edx
c001032f:	89 d8                	mov    eax,ebx
c0010331:	f7 f5                	div    ebp
c0010333:	29 c1                	sub    ecx,eax
c0010335:	bd 6d 01 00 00       	mov    ebp,0x16d
c001033a:	89 c8                	mov    eax,ecx
c001033c:	31 d2                	xor    edx,edx
c001033e:	f7 f5                	div    ebp
c0010340:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010344:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0010349:	89 c8                	mov    eax,ecx
c001034b:	31 d2                	xor    edx,edx
c001034d:	f7 f5                	div    ebp
c001034f:	01 c3                	add    ebx,eax
c0010351:	31 d2                	xor    edx,edx
c0010353:	89 c8                	mov    eax,ecx
c0010355:	f7 f7                	div    edi
c0010357:	29 c3                	sub    ebx,eax
c0010359:	bf 99 00 00 00       	mov    edi,0x99
c001035e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0010366:	29 c3                	sub    ebx,eax
c0010368:	31 d2                	xor    edx,edx
c001036a:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c001036d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0010370:	83 c1 02             	add    ecx,0x2
c0010373:	bb 05 00 00 00       	mov    ebx,0x5
c0010378:	89 c8                	mov    eax,ecx
c001037a:	f7 f7                	div    edi
c001037c:	89 c7                	mov    edi,eax
c001037e:	31 d2                	xor    edx,edx
c0010380:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0010386:	83 c0 02             	add    eax,0x2
c0010389:	f7 f3                	div    ebx
c001038b:	89 eb                	mov    ebx,ebp
c001038d:	29 c3                	sub    ebx,eax
c001038f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0010395:	19 c0                	sbb    eax,eax
c0010397:	31 d2                	xor    edx,edx
c0010399:	83 e0 0c             	and    eax,0xc
c001039c:	88 1e                	mov    BYTE PTR [esi],bl
c001039e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00103a2:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00103aa:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00103ae:	83 f9 01             	cmp    ecx,0x1
c00103b1:	0f 96 c2             	setbe  dl
c00103b4:	01 d0                	add    eax,edx
c00103b6:	41                   	inc    ecx
c00103b7:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00103bb:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00103be:	83 c4 1c             	add    esp,0x1c
c00103c1:	89 f0                	mov    eax,esi
c00103c3:	5b                   	pop    ebx
c00103c4:	5e                   	pop    esi
c00103c5:	5f                   	pop    edi
c00103c6:	5d                   	pop    ebp
c00103c7:	c2 04 00             	ret    0x4

c00103ca <Clock::timeInDatetimeLocal()>:
c00103ca:	53                   	push   ebx
c00103cb:	83 ec 14             	sub    esp,0x14
c00103ce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00103d2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00103d6:	e8 7d fc ff ff       	call   c0010058 <Clock::timeInSecondsLocal()>
c00103db:	83 c4 0c             	add    esp,0xc
c00103de:	52                   	push   edx
c00103df:	50                   	push   eax
c00103e0:	53                   	push   ebx
c00103e1:	e8 a0 fe ff ff       	call   c0010286 <secondsToDatetime(unsigned long long)>
c00103e6:	83 c4 14             	add    esp,0x14
c00103e9:	89 d8                	mov    eax,ebx
c00103eb:	5b                   	pop    ebx
c00103ec:	c2 04 00             	ret    0x4
c00103ef:	90                   	nop

c00103f0 <Device::hibernate()>:
c00103f0:	c3                   	ret    
c00103f1:	90                   	nop

c00103f2 <Device::wake()>:
c00103f2:	c3                   	ret    
c00103f3:	90                   	nop

c00103f4 <Device::detect()>:
c00103f4:	c3                   	ret    
c00103f5:	90                   	nop

c00103f6 <Device::disableLegacy()>:
c00103f6:	c3                   	ret    
c00103f7:	90                   	nop

c00103f8 <Device::powerSaving(PowerSavingLevel)>:
c00103f8:	c3                   	ret    
c00103f9:	90                   	nop

c00103fa <DriverlessDevice::close(int, int, void*)>:
c00103fa:	31 c0                	xor    eax,eax
c00103fc:	c3                   	ret    
c00103fd:	90                   	nop

c00103fe <DriverlessDevice::detect()>:
c00103fe:	c3                   	ret    
c00103ff:	90                   	nop

c0010400 <DriverlessDevice::open(int, int, void*)>:
c0010400:	83 ec 18             	sub    esp,0x18
c0010403:	68 f0 15 02 c0       	push   0xc00215f0
c0010408:	e8 df 4f 00 00       	call   c00153ec <Krnl::panic(char const*)>
c001040d:	83 c8 ff             	or     eax,0xffffffff
c0010410:	83 c4 1c             	add    esp,0x1c
c0010413:	c3                   	ret    

c0010414 <Device::~Device()>:
c0010414:	ba 18 16 02 c0       	mov    edx,0xc0021618
c0010419:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001041d:	89 10                	mov    DWORD PTR [eax],edx
c001041f:	90                   	nop
c0010420:	c3                   	ret    
c0010421:	90                   	nop

c0010422 <Device::~Device()>:
c0010422:	83 ec 0c             	sub    esp,0xc
c0010425:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010429:	e8 e6 ff ff ff       	call   c0010414 <Device::~Device()>
c001042e:	83 c4 04             	add    esp,0x4
c0010431:	83 ec 08             	sub    esp,0x8
c0010434:	68 58 01 00 00       	push   0x158
c0010439:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001043d:	e8 f1 eb ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0010442:	83 c4 10             	add    esp,0x10
c0010445:	83 c4 0c             	add    esp,0xc
c0010448:	c3                   	ret    
c0010449:	90                   	nop

c001044a <Device::findAndLoadDriver()>:
c001044a:	c3                   	ret    
c001044b:	90                   	nop

c001044c <Device::preOpenPCI(PCIDeviceInfo)>:
c001044c:	57                   	push   edi
c001044d:	b9 09 00 00 00       	mov    ecx,0x9
c0010452:	56                   	push   esi
c0010453:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010457:	81 c7 18 01 00 00    	add    edi,0x118
c001045d:	8d 74 24 10          	lea    esi,[esp+0x10]
c0010461:	c7 47 fc 02 00 00 00 	mov    DWORD PTR [edi-0x4],0x2
c0010468:	fc                   	cld    
c0010469:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001046b:	5e                   	pop    esi
c001046c:	5f                   	pop    edi
c001046d:	c3                   	ret    

c001046e <Device::preOpenACPI(void*, char*, char*)>:
c001046e:	56                   	push   esi
c001046f:	53                   	push   ebx
c0010470:	83 ec 08             	sub    esp,0x8
c0010473:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010477:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001047b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001047f:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0010485:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001048f:	6a 1e                	push   0x1e
c0010491:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0010497:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001049b:	81 c3 3a 01 00 00    	add    ebx,0x13a
c00104a1:	50                   	push   eax
c00104a2:	e8 2b 01 ff ff       	call   c00005d2 <memcpy>
c00104a7:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00104ab:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00104af:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c00104b7:	83 c4 14             	add    esp,0x14
c00104ba:	5b                   	pop    ebx
c00104bb:	5e                   	pop    esi
c00104bc:	e9 11 01 ff ff       	jmp    c00005d2 <memcpy>
c00104c1:	90                   	nop

c00104c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00104c2:	55                   	push   ebp
c00104c3:	57                   	push   edi
c00104c4:	56                   	push   esi
c00104c5:	53                   	push   ebx
c00104c6:	83 ec 0c             	sub    esp,0xc
c00104c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104cd:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00104d1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00104d5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00104d9:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c00104de:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00104e5:	75 0b                	jne    c00104f2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c00104e7:	8b 00                	mov    eax,DWORD PTR [eax]
c00104e9:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00104ed:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00104f0:	eb 24                	jmp    c0010516 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00104f2:	e8 89 3d 00 00       	call   c0014280 <thisCPU()>
c00104f7:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00104fd:	8b 10                	mov    edx,DWORD PTR [eax]
c00104ff:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0010503:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0010507:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c001050b:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001050f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0010513:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0010516:	83 c4 0c             	add    esp,0xc
c0010519:	5b                   	pop    ebx
c001051a:	5e                   	pop    esi
c001051b:	5f                   	pop    edi
c001051c:	5d                   	pop    ebp
c001051d:	ff e0                	jmp    eax
c001051f:	90                   	nop

c0010520 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010520:	57                   	push   edi
c0010521:	56                   	push   esi
c0010522:	53                   	push   ebx
c0010523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010527:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001052b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001052f:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c0010534:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001053b:	75 0b                	jne    c0010548 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c001053d:	8b 00                	mov    eax,DWORD PTR [eax]
c001053f:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010543:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0010546:	eb 20                	jmp    c0010568 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0010548:	e8 33 3d 00 00       	call   c0014280 <thisCPU()>
c001054d:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0010553:	8b 10                	mov    edx,DWORD PTR [eax]
c0010555:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010559:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001055d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010561:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010565:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0010568:	5b                   	pop    ebx
c0010569:	5e                   	pop    esi
c001056a:	5f                   	pop    edi
c001056b:	ff e0                	jmp    eax
c001056d:	90                   	nop

c001056e <Device::addChild(Device*)>:
c001056e:	53                   	push   ebx
c001056f:	83 ec 08             	sub    esp,0x8
c0010572:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010576:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001057a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0010580:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0010586:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010588:	85 d2                	test   edx,edx
c001058a:	74 04                	je     c0010590 <Device::addChild(Device*)+0x22>
c001058c:	89 d3                	mov    ebx,edx
c001058e:	eb f6                	jmp    c0010586 <Device::addChild(Device*)+0x18>
c0010590:	83 ec 0c             	sub    esp,0xc
c0010593:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010596:	6a 08                	push   0x8
c0010598:	e8 87 ea ff ff       	call   c000f024 <operator new(unsigned long)>
c001059d:	89 03                	mov    DWORD PTR [ebx],eax
c001059f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00105a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00105ac:	83 c4 18             	add    esp,0x18
c00105af:	5b                   	pop    ebx
c00105b0:	c3                   	ret    
c00105b1:	90                   	nop

c00105b2 <Device::removeAllChildren()>:
c00105b2:	56                   	push   esi
c00105b3:	53                   	push   ebx
c00105b4:	52                   	push   edx
c00105b5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00105b9:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00105bf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00105c2:	74 17                	je     c00105db <Device::removeAllChildren()+0x29>
c00105c4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00105c7:	85 c0                	test   eax,eax
c00105c9:	74 0c                	je     c00105d7 <Device::removeAllChildren()+0x25>
c00105cb:	83 ec 0c             	sub    esp,0xc
c00105ce:	8b 10                	mov    edx,DWORD PTR [eax]
c00105d0:	50                   	push   eax
c00105d1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00105d4:	83 c4 10             	add    esp,0x10
c00105d7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00105d9:	eb e4                	jmp    c00105bf <Device::removeAllChildren()+0xd>
c00105db:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00105e1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00105e7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00105ed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00105f4:	58                   	pop    eax
c00105f5:	5b                   	pop    ebx
c00105f6:	5e                   	pop    esi
c00105f7:	c3                   	ret    

c00105f8 <Device::hibernateAll()>:
c00105f8:	53                   	push   ebx
c00105f9:	83 ec 14             	sub    esp,0x14
c00105fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010600:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010602:	53                   	push   ebx
c0010603:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0010606:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001060c:	83 c4 10             	add    esp,0x10
c001060f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010612:	74 0f                	je     c0010623 <Device::hibernateAll()+0x2b>
c0010614:	83 ec 0c             	sub    esp,0xc
c0010617:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001061a:	e8 d9 ff ff ff       	call   c00105f8 <Device::hibernateAll()>
c001061f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010621:	eb e9                	jmp    c001060c <Device::hibernateAll()+0x14>
c0010623:	83 c4 08             	add    esp,0x8
c0010626:	5b                   	pop    ebx
c0010627:	c3                   	ret    

c0010628 <Device::wakeAll()>:
c0010628:	53                   	push   ebx
c0010629:	83 ec 14             	sub    esp,0x14
c001062c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010630:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010632:	53                   	push   ebx
c0010633:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0010636:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001063c:	83 c4 10             	add    esp,0x10
c001063f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010642:	74 0f                	je     c0010653 <Device::wakeAll()+0x2b>
c0010644:	83 ec 0c             	sub    esp,0xc
c0010647:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001064a:	e8 d9 ff ff ff       	call   c0010628 <Device::wakeAll()>
c001064f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010651:	eb e9                	jmp    c001063c <Device::wakeAll()+0x14>
c0010653:	83 c4 08             	add    esp,0x8
c0010656:	5b                   	pop    ebx
c0010657:	c3                   	ret    

c0010658 <Device::detectAll()>:
c0010658:	53                   	push   ebx
c0010659:	83 ec 14             	sub    esp,0x14
c001065c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010660:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010662:	53                   	push   ebx
c0010663:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0010666:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001066c:	83 c4 10             	add    esp,0x10
c001066f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010672:	74 0f                	je     c0010683 <Device::detectAll()+0x2b>
c0010674:	83 ec 0c             	sub    esp,0xc
c0010677:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001067a:	e8 d9 ff ff ff       	call   c0010658 <Device::detectAll()>
c001067f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010681:	eb e9                	jmp    c001066c <Device::detectAll()+0x14>
c0010683:	83 c4 08             	add    esp,0x8
c0010686:	5b                   	pop    ebx
c0010687:	c3                   	ret    

c0010688 <Device::disableLegacyAll()>:
c0010688:	53                   	push   ebx
c0010689:	83 ec 14             	sub    esp,0x14
c001068c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010690:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010692:	53                   	push   ebx
c0010693:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0010696:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001069c:	83 c4 10             	add    esp,0x10
c001069f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106a2:	74 0f                	je     c00106b3 <Device::disableLegacyAll()+0x2b>
c00106a4:	83 ec 0c             	sub    esp,0xc
c00106a7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106aa:	e8 d9 ff ff ff       	call   c0010688 <Device::disableLegacyAll()>
c00106af:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106b1:	eb e9                	jmp    c001069c <Device::disableLegacyAll()+0x14>
c00106b3:	83 c4 08             	add    esp,0x8
c00106b6:	5b                   	pop    ebx
c00106b7:	c3                   	ret    

c00106b8 <Device::loadDriversForAll()>:
c00106b8:	53                   	push   ebx
c00106b9:	83 ec 08             	sub    esp,0x8
c00106bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106c0:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00106c6:	8b 18                	mov    ebx,DWORD PTR [eax]
c00106c8:	85 db                	test   ebx,ebx
c00106ca:	74 12                	je     c00106de <Device::loadDriversForAll()+0x26>
c00106cc:	83 ec 0c             	sub    esp,0xc
c00106cf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00106d2:	e8 e1 ff ff ff       	call   c00106b8 <Device::loadDriversForAll()>
c00106d7:	83 c4 10             	add    esp,0x10
c00106da:	89 d8                	mov    eax,ebx
c00106dc:	eb e8                	jmp    c00106c6 <Device::loadDriversForAll()+0xe>
c00106de:	83 c4 08             	add    esp,0x8
c00106e1:	5b                   	pop    ebx
c00106e2:	c3                   	ret    
c00106e3:	90                   	nop

c00106e4 <Device::closeAll()>:
c00106e4:	53                   	push   ebx
c00106e5:	83 ec 08             	sub    esp,0x8
c00106e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106ee:	6a 00                	push   0x0
c00106f0:	6a 00                	push   0x0
c00106f2:	6a 00                	push   0x0
c00106f4:	53                   	push   ebx
c00106f5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00106f8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106fe:	83 c4 10             	add    esp,0x10
c0010701:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010704:	74 0f                	je     c0010715 <Device::closeAll()+0x31>
c0010706:	83 ec 0c             	sub    esp,0xc
c0010709:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001070c:	e8 d3 ff ff ff       	call   c00106e4 <Device::closeAll()>
c0010711:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010713:	eb e9                	jmp    c00106fe <Device::closeAll()+0x1a>
c0010715:	83 c4 08             	add    esp,0x8
c0010718:	5b                   	pop    ebx
c0010719:	c3                   	ret    

c001071a <Device::powerSavingAll(PowerSavingLevel)>:
c001071a:	56                   	push   esi
c001071b:	53                   	push   ebx
c001071c:	83 ec 0c             	sub    esp,0xc
c001071f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010723:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0010727:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010729:	56                   	push   esi
c001072a:	53                   	push   ebx
c001072b:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001072e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010734:	83 c4 10             	add    esp,0x10
c0010737:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001073a:	74 0f                	je     c001074b <Device::powerSavingAll(PowerSavingLevel)+0x31>
c001073c:	52                   	push   edx
c001073d:	52                   	push   edx
c001073e:	56                   	push   esi
c001073f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010742:	e8 d3 ff ff ff       	call   c001071a <Device::powerSavingAll(PowerSavingLevel)>
c0010747:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010749:	eb e9                	jmp    c0010734 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c001074b:	58                   	pop    eax
c001074c:	5b                   	pop    ebx
c001074d:	5e                   	pop    esi
c001074e:	c3                   	ret    
c001074f:	90                   	nop

c0010750 <Device::setName(char const*)>:
c0010750:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0010758:	e9 4a ff fe ff       	jmp    c00006a7 <strcpy>
c001075d:	90                   	nop

c001075e <Device::Device(char const*)>:
c001075e:	83 ec 0c             	sub    esp,0xc
c0010761:	ba 18 16 02 c0       	mov    edx,0xc0021618
c0010766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001076a:	89 10                	mov    DWORD PTR [eax],edx
c001076c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010770:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001077a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001077e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001078c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001079a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00107a4:	83 ec 08             	sub    esp,0x8
c00107a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00107af:	e8 9c ff ff ff       	call   c0010750 <Device::setName(char const*)>
c00107b4:	83 c4 10             	add    esp,0x10
c00107b7:	83 ec 0c             	sub    esp,0xc
c00107ba:	6a 08                	push   0x8
c00107bc:	e8 63 e8 ff ff       	call   c000f024 <operator new(unsigned long)>
c00107c1:	83 c4 10             	add    esp,0x10
c00107c4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00107ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00107d5:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00107db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107df:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00107e5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00107eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107ef:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00107f5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010800:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0010807:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001080b:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0010812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010816:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0010820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010824:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001082e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010832:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001083c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010840:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001084a:	90                   	nop
c001084b:	83 c4 0c             	add    esp,0xc
c001084e:	c3                   	ret    
c001084f:	90                   	nop

c0010850 <Device::getName()>:
c0010850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010854:	05 d0 00 00 00       	add    eax,0xd0
c0010859:	c3                   	ret    

c001085a <DriverlessDevice::DriverlessDevice(char const*)>:
c001085a:	83 ec 0c             	sub    esp,0xc
c001085d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010861:	83 ec 08             	sub    esp,0x8
c0010864:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010868:	50                   	push   eax
c0010869:	e8 f0 fe ff ff       	call   c001075e <Device::Device(char const*)>
c001086e:	83 c4 10             	add    esp,0x10
c0010871:	ba 44 16 02 c0       	mov    edx,0xc0021644
c0010876:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001087a:	89 10                	mov    DWORD PTR [eax],edx
c001087c:	90                   	nop
c001087d:	83 c4 0c             	add    esp,0xc
c0010880:	c3                   	ret    
c0010881:	90                   	nop

c0010882 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0010882:	57                   	push   edi
c0010883:	56                   	push   esi
c0010884:	53                   	push   ebx
c0010885:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010889:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001088d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010891:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0010897:	75 0c                	jne    c00108a5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0010899:	52                   	push   edx
c001089a:	52                   	push   edx
c001089b:	53                   	push   ebx
c001089c:	56                   	push   esi
c001089d:	e8 22 eb 00 00       	call   c001f3c4 <LinkedList<Device>::addElement(Device*)>
c00108a2:	83 c4 10             	add    esp,0x10
c00108a5:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00108ab:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00108ae:	74 12                	je     c00108c2 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00108b0:	50                   	push   eax
c00108b1:	57                   	push   edi
c00108b2:	56                   	push   esi
c00108b3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00108b6:	e8 c7 ff ff ff       	call   c0010882 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00108bb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00108bd:	83 c4 10             	add    esp,0x10
c00108c0:	eb e9                	jmp    c00108ab <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00108c2:	5b                   	pop    ebx
c00108c3:	5e                   	pop    esi
c00108c4:	5f                   	pop    edi
c00108c5:	c3                   	ret    

c00108c6 <getDevicesOfType(DeviceType)>:
c00108c6:	53                   	push   ebx
c00108c7:	83 ec 14             	sub    esp,0x14
c00108ca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00108ce:	53                   	push   ebx
c00108cf:	e8 cc eb 00 00       	call   c001f4a0 <LinkedList<Device>::LinkedList()>
c00108d4:	83 c4 0c             	add    esp,0xc
c00108d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108db:	53                   	push   ebx
c00108dc:	ff 35 28 41 02 c0    	push   DWORD PTR ds:0xc0024128
c00108e2:	e8 9b ff ff ff       	call   c0010882 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00108e7:	83 c4 18             	add    esp,0x18
c00108ea:	89 d8                	mov    eax,ebx
c00108ec:	5b                   	pop    ebx
c00108ed:	c2 04 00             	ret    0x4

c00108f0 <HardDiskController::HardDiskController(char const*)>:
c00108f0:	83 ec 0c             	sub    esp,0xc
c00108f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f7:	83 ec 08             	sub    esp,0x8
c00108fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108fe:	50                   	push   eax
c00108ff:	e8 5a fe ff ff       	call   c001075e <Device::Device(char const*)>
c0010904:	83 c4 10             	add    esp,0x10
c0010907:	ba 70 16 02 c0       	mov    edx,0xc0021670
c001090c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010910:	89 10                	mov    DWORD PTR [eax],edx
c0010912:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010916:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0010920:	90                   	nop
c0010921:	83 c4 0c             	add    esp,0xc
c0010924:	c3                   	ret    
c0010925:	90                   	nop

c0010926 <HardDiskController::~HardDiskController()>:
c0010926:	83 ec 0c             	sub    esp,0xc
c0010929:	ba 70 16 02 c0       	mov    edx,0xc0021670
c001092e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010932:	89 10                	mov    DWORD PTR [eax],edx
c0010934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010938:	83 ec 0c             	sub    esp,0xc
c001093b:	50                   	push   eax
c001093c:	e8 d3 fa ff ff       	call   c0010414 <Device::~Device()>
c0010941:	83 c4 10             	add    esp,0x10
c0010944:	90                   	nop
c0010945:	83 c4 0c             	add    esp,0xc
c0010948:	c3                   	ret    
c0010949:	90                   	nop

c001094a <HardDiskController::~HardDiskController()>:
c001094a:	83 ec 0c             	sub    esp,0xc
c001094d:	83 ec 0c             	sub    esp,0xc
c0010950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010954:	e8 cd ff ff ff       	call   c0010926 <HardDiskController::~HardDiskController()>
c0010959:	83 c4 10             	add    esp,0x10
c001095c:	83 ec 08             	sub    esp,0x8
c001095f:	68 58 01 00 00       	push   0x158
c0010964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010968:	e8 c6 e6 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001096d:	83 c4 10             	add    esp,0x10
c0010970:	83 c4 0c             	add    esp,0xc
c0010973:	c3                   	ret    

c0010974 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0010974:	83 ec 0c             	sub    esp,0xc
c0010977:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001097b:	83 ec 08             	sub    esp,0x8
c001097e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010982:	50                   	push   eax
c0010983:	e8 d6 fd ff ff       	call   c001075e <Device::Device(char const*)>
c0010988:	83 c4 10             	add    esp,0x10
c001098b:	ba 9c 16 02 c0       	mov    edx,0xc002169c
c0010990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010994:	89 10                	mov    DWORD PTR [eax],edx
c0010996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001099a:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00109a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109a5:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00109ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b0:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00109ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109be:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00109c2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00109c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109cc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00109d6:	90                   	nop
c00109d7:	83 c4 0c             	add    esp,0xc
c00109da:	c3                   	ret    
c00109db:	90                   	nop

c00109dc <PhysicalDisk::startCache()>:
c00109dc:	56                   	push   esi
c00109dd:	53                   	push   ebx
c00109de:	83 ec 10             	sub    esp,0x10
c00109e1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00109e5:	6a 30                	push   0x30
c00109e7:	e8 38 e6 ff ff       	call   c000f024 <operator new(unsigned long)>
c00109ec:	89 c6                	mov    esi,eax
c00109ee:	58                   	pop    eax
c00109ef:	5a                   	pop    edx
c00109f0:	53                   	push   ebx
c00109f1:	56                   	push   esi
c00109f2:	e8 9f 1f 00 00       	call   c0012996 <VCache::VCache(PhysicalDisk*)>
c00109f7:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00109fd:	83 c4 14             	add    esp,0x14
c0010a00:	5b                   	pop    ebx
c0010a01:	5e                   	pop    esi
c0010a02:	c3                   	ret    
c0010a03:	90                   	nop

c0010a04 <PhysicalDisk::~PhysicalDisk()>:
c0010a04:	83 ec 0c             	sub    esp,0xc
c0010a07:	ba 9c 16 02 c0       	mov    edx,0xc002169c
c0010a0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a10:	89 10                	mov    DWORD PTR [eax],edx
c0010a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a16:	83 ec 0c             	sub    esp,0xc
c0010a19:	50                   	push   eax
c0010a1a:	e8 f5 f9 ff ff       	call   c0010414 <Device::~Device()>
c0010a1f:	83 c4 10             	add    esp,0x10
c0010a22:	90                   	nop
c0010a23:	83 c4 0c             	add    esp,0xc
c0010a26:	c3                   	ret    
c0010a27:	90                   	nop

c0010a28 <PhysicalDisk::~PhysicalDisk()>:
c0010a28:	83 ec 0c             	sub    esp,0xc
c0010a2b:	83 ec 0c             	sub    esp,0xc
c0010a2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a32:	e8 cd ff ff ff       	call   c0010a04 <PhysicalDisk::~PhysicalDisk()>
c0010a37:	83 c4 10             	add    esp,0x10
c0010a3a:	83 ec 08             	sub    esp,0x8
c0010a3d:	68 6c 01 00 00       	push   0x16c
c0010a42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a46:	e8 e8 e5 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0010a4b:	83 c4 10             	add    esp,0x10
c0010a4e:	83 c4 0c             	add    esp,0xc
c0010a51:	c3                   	ret    

c0010a52 <FPU::FPU(char const*)>:
c0010a52:	83 ec 0c             	sub    esp,0xc
c0010a55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a59:	83 ec 08             	sub    esp,0x8
c0010a5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a60:	50                   	push   eax
c0010a61:	e8 f8 fc ff ff       	call   c001075e <Device::Device(char const*)>
c0010a66:	83 c4 10             	add    esp,0x10
c0010a69:	ba dc 16 02 c0       	mov    edx,0xc00216dc
c0010a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a72:	89 10                	mov    DWORD PTR [eax],edx
c0010a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a78:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0010a82:	90                   	nop
c0010a83:	83 c4 0c             	add    esp,0xc
c0010a86:	c3                   	ret    
c0010a87:	90                   	nop

c0010a88 <FPU::~FPU()>:
c0010a88:	83 ec 0c             	sub    esp,0xc
c0010a8b:	ba dc 16 02 c0       	mov    edx,0xc00216dc
c0010a90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a94:	89 10                	mov    DWORD PTR [eax],edx
c0010a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a9a:	83 ec 0c             	sub    esp,0xc
c0010a9d:	50                   	push   eax
c0010a9e:	e8 71 f9 ff ff       	call   c0010414 <Device::~Device()>
c0010aa3:	83 c4 10             	add    esp,0x10
c0010aa6:	90                   	nop
c0010aa7:	83 c4 0c             	add    esp,0xc
c0010aaa:	c3                   	ret    
c0010aab:	90                   	nop

c0010aac <FPU::~FPU()>:
c0010aac:	83 ec 0c             	sub    esp,0xc
c0010aaf:	83 ec 0c             	sub    esp,0xc
c0010ab2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ab6:	e8 cd ff ff ff       	call   c0010a88 <FPU::~FPU()>
c0010abb:	83 c4 10             	add    esp,0x10
c0010abe:	83 ec 08             	sub    esp,0x8
c0010ac1:	68 58 01 00 00       	push   0x158
c0010ac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aca:	e8 64 e5 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0010acf:	83 c4 10             	add    esp,0x10
c0010ad2:	83 c4 0c             	add    esp,0xc
c0010ad5:	c3                   	ret    

c0010ad6 <setupFPU()>:
c0010ad6:	53                   	push   ebx
c0010ad7:	83 ec 08             	sub    esp,0x8
c0010ada:	a1 28 41 02 c0       	mov    eax,ds:0xc0024128
c0010adf:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010ae6:	74 19                	je     c0010b01 <setupFPU()+0x2b>
c0010ae8:	83 ec 0c             	sub    esp,0xc
c0010aeb:	68 58 01 00 00       	push   0x158
c0010af0:	e8 2f e5 ff ff       	call   c000f024 <operator new(unsigned long)>
c0010af5:	89 c3                	mov    ebx,eax
c0010af7:	89 04 24             	mov    DWORD PTR [esp],eax
c0010afa:	e8 fb cf 00 00       	call   c001dafa <AVX::AVX()>
c0010aff:	eb 5b                	jmp    c0010b5c <setupFPU()+0x86>
c0010b01:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010b07:	84 c0                	test   al,al
c0010b09:	79 19                	jns    c0010b24 <setupFPU()+0x4e>
c0010b0b:	83 ec 0c             	sub    esp,0xc
c0010b0e:	68 58 01 00 00       	push   0x158
c0010b13:	e8 0c e5 ff ff       	call   c000f024 <operator new(unsigned long)>
c0010b18:	89 c3                	mov    ebx,eax
c0010b1a:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b1d:	e8 fe d0 00 00       	call   c001dc20 <SSE::SSE()>
c0010b22:	eb 38                	jmp    c0010b5c <setupFPU()+0x86>
c0010b24:	a8 20                	test   al,0x20
c0010b26:	74 19                	je     c0010b41 <setupFPU()+0x6b>
c0010b28:	83 ec 0c             	sub    esp,0xc
c0010b2b:	68 58 01 00 00       	push   0x158
c0010b30:	e8 ef e4 ff ff       	call   c000f024 <operator new(unsigned long)>
c0010b35:	89 c3                	mov    ebx,eax
c0010b37:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b3a:	e8 4b d0 00 00       	call   c001db8a <MMX::MMX()>
c0010b3f:	eb 1b                	jmp    c0010b5c <setupFPU()+0x86>
c0010b41:	a8 10                	test   al,0x10
c0010b43:	74 1c                	je     c0010b61 <setupFPU()+0x8b>
c0010b45:	83 ec 0c             	sub    esp,0xc
c0010b48:	68 58 01 00 00       	push   0x158
c0010b4d:	e8 d2 e4 ff ff       	call   c000f024 <operator new(unsigned long)>
c0010b52:	89 c3                	mov    ebx,eax
c0010b54:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b57:	e8 52 d1 00 00       	call   c001dcae <x87::x87()>
c0010b5c:	83 c4 10             	add    esp,0x10
c0010b5f:	eb 2c                	jmp    c0010b8d <setupFPU()+0xb7>
c0010b61:	83 ec 0c             	sub    esp,0xc
c0010b64:	31 db                	xor    ebx,ebx
c0010b66:	68 c8 16 02 c0       	push   0xc00216c8
c0010b6b:	e8 e9 e5 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0010b70:	e8 0b 37 00 00       	call   c0014280 <thisCPU()>
c0010b75:	e8 06 37 00 00       	call   c0014280 <thisCPU()>
c0010b7a:	e8 79 e9 00 00       	call   c001f4f8 <CPU::readCR0()>
c0010b7f:	83 c8 04             	or     eax,0x4
c0010b82:	89 04 24             	mov    DWORD PTR [esp],eax
c0010b85:	e8 80 e9 00 00       	call   c001f50a <CPU::writeCR0(unsigned long)>
c0010b8a:	83 c4 10             	add    esp,0x10
c0010b8d:	83 c4 08             	add    esp,0x8
c0010b90:	89 d8                	mov    eax,ebx
c0010b92:	5b                   	pop    ebx
c0010b93:	c3                   	ret    

c0010b94 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010b94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b98:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b9c:	c1 e0 04             	shl    eax,0x4
c0010b9f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010ba3:	01 d0                	add    eax,edx
c0010ba5:	8d 50 10             	lea    edx,[eax+0x10]
c0010ba8:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010bae:	74 08                	je     c0010bb8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x24>
c0010bb0:	83 c0 04             	add    eax,0x4
c0010bb3:	39 d0                	cmp    eax,edx
c0010bb5:	75 f1                	jne    c0010ba8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x14>
c0010bb7:	c3                   	ret    
c0010bb8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010bc2:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010bcc:	eb e2                	jmp    c0010bb0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1c>

c0010bce <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010bce:	57                   	push   edi
c0010bcf:	31 c0                	xor    eax,eax
c0010bd1:	56                   	push   esi
c0010bd2:	53                   	push   ebx
c0010bd3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010bd7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010bdb:	89 da                	mov    edx,ebx
c0010bdd:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010be1:	c1 e2 04             	shl    edx,0x4
c0010be4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010be8:	01 ca                	add    edx,ecx
c0010bea:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010bf2:	74 16                	je     c0010c0a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010bf4:	40                   	inc    eax
c0010bf5:	83 f8 04             	cmp    eax,0x4
c0010bf8:	75 f0                	jne    c0010bea <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010bfa:	c7 44 24 10 0c 17 02 c0 	mov    DWORD PTR [esp+0x10],0xc002170c
c0010c02:	5b                   	pop    ebx
c0010c03:	5e                   	pop    esi
c0010c04:	5f                   	pop    edi
c0010c05:	e9 e2 47 00 00       	jmp    c00153ec <Krnl::panic(char const*)>
c0010c0a:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010c0d:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010c10:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010c16:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010c1c:	5b                   	pop    ebx
c0010c1d:	5e                   	pop    esi
c0010c1e:	5f                   	pop    edi
c0010c1f:	c3                   	ret    

c0010c20 <doubleFault(regs*, void*)>:
c0010c20:	c7 44 24 04 3c 18 02 c0 	mov    DWORD PTR [esp+0x4],0xc002183c
c0010c28:	e9 bf 47 00 00       	jmp    c00153ec <Krnl::panic(char const*)>
c0010c2d:	90                   	nop

c0010c2e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010c2e:	56                   	push   esi
c0010c2f:	53                   	push   ebx
c0010c30:	50                   	push   eax
c0010c31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c35:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c39:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010c3e:	75 33                	jne    c0010c73 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x45>
c0010c40:	8d 43 20             	lea    eax,[ebx+0x20]
c0010c43:	31 d2                	xor    edx,edx
c0010c45:	89 c1                	mov    ecx,eax
c0010c47:	c1 e1 04             	shl    ecx,0x4
c0010c4a:	01 f1                	add    ecx,esi
c0010c4c:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010c54:	74 3f                	je     c0010c95 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0010c56:	42                   	inc    edx
c0010c57:	83 fa 04             	cmp    edx,0x4
c0010c5a:	75 f0                	jne    c0010c4c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010c5c:	83 ec 0c             	sub    esp,0xc
c0010c5f:	68 80 17 02 c0       	push   0xc0021780
c0010c64:	e8 83 47 00 00       	call   c00153ec <Krnl::panic(char const*)>
c0010c69:	83 c4 10             	add    esp,0x10
c0010c6c:	83 c8 ff             	or     eax,0xffffffff
c0010c6f:	5a                   	pop    edx
c0010c70:	5b                   	pop    ebx
c0010c71:	5e                   	pop    esi
c0010c72:	c3                   	ret    
c0010c73:	83 ec 0c             	sub    esp,0xc
c0010c76:	56                   	push   esi
c0010c77:	e8 d4 fb ff ff       	call   c0010850 <Device::getName()>
c0010c7c:	83 c4 10             	add    esp,0x10
c0010c7f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010c82:	75 bc                	jne    c0010c40 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c84:	83 fb 0f             	cmp    ebx,0xf
c0010c87:	7f 2c                	jg     c0010cb5 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x87>
c0010c89:	31 c0                	xor    eax,eax
c0010c8b:	8a 83 80 38 02 c0    	mov    al,BYTE PTR [ebx-0x3ffdc780]
c0010c91:	89 c3                	mov    ebx,eax
c0010c93:	eb ab                	jmp    c0010c40 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c95:	8d 04 82             	lea    eax,[edx+eax*4]
c0010c98:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c9c:	8d 04 86             	lea    eax,[esi+eax*4]
c0010c9f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010ca5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010ca9:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010caf:	89 d8                	mov    eax,ebx
c0010cb1:	5a                   	pop    edx
c0010cb2:	5b                   	pop    ebx
c0010cb3:	5e                   	pop    esi
c0010cb4:	c3                   	ret    
c0010cb5:	83 ec 0c             	sub    esp,0xc
c0010cb8:	68 48 17 02 c0       	push   0xc0021748
c0010cbd:	e8 2a 47 00 00       	call   c00153ec <Krnl::panic(char const*)>
c0010cc2:	83 c4 10             	add    esp,0x10
c0010cc5:	e9 76 ff ff ff       	jmp    c0010c40 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>

c0010cca <InterruptController::clearAllHandlers(int, bool)>:
c0010cca:	56                   	push   esi
c0010ccb:	53                   	push   ebx
c0010ccc:	52                   	push   edx
c0010ccd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010cd1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010cd5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010cda:	75 61                	jne    c0010d3d <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010cdc:	8d 46 20             	lea    eax,[esi+0x20]
c0010cdf:	c1 e0 04             	shl    eax,0x4
c0010ce2:	c1 e6 04             	shl    esi,0x4
c0010ce5:	01 d8                	add    eax,ebx
c0010ce7:	01 de                	add    esi,ebx
c0010ce9:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010cf3:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010cfd:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010d07:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010d11:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010d1b:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010d25:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010d2f:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010d39:	58                   	pop    eax
c0010d3a:	5b                   	pop    ebx
c0010d3b:	5e                   	pop    esi
c0010d3c:	c3                   	ret    
c0010d3d:	83 ec 0c             	sub    esp,0xc
c0010d40:	53                   	push   ebx
c0010d41:	e8 0a fb ff ff       	call   c0010850 <Device::getName()>
c0010d46:	83 c4 10             	add    esp,0x10
c0010d49:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010d4c:	75 8e                	jne    c0010cdc <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d4e:	83 fe 0f             	cmp    esi,0xf
c0010d51:	7f 12                	jg     c0010d65 <InterruptController::clearAllHandlers(int, bool)+0x9b>
c0010d53:	8a 86 80 38 02 c0    	mov    al,BYTE PTR [esi-0x3ffdc780]
c0010d59:	25 ff 00 00 00       	and    eax,0xff
c0010d5e:	89 c6                	mov    esi,eax
c0010d60:	e9 77 ff ff ff       	jmp    c0010cdc <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010d65:	83 ec 0c             	sub    esp,0xc
c0010d68:	68 bc 17 02 c0       	push   0xc00217bc
c0010d6d:	e8 7a 46 00 00       	call   c00153ec <Krnl::panic(char const*)>
c0010d72:	83 c4 10             	add    esp,0x10
c0010d75:	e9 62 ff ff ff       	jmp    c0010cdc <InterruptController::clearAllHandlers(int, bool)+0x12>

c0010d7a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010d7a:	56                   	push   esi
c0010d7b:	53                   	push   ebx
c0010d7c:	52                   	push   edx
c0010d7d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d81:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010d85:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010d8a:	75 3a                	jne    c0010dc6 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010d8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d90:	8d 50 20             	lea    edx,[eax+0x20]
c0010d93:	c1 e2 04             	shl    edx,0x4
c0010d96:	8d 04 16             	lea    eax,[esi+edx*1]
c0010d99:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010d9d:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010da3:	74 0b                	je     c0010db0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010da5:	83 c0 04             	add    eax,0x4
c0010da8:	39 d0                	cmp    eax,edx
c0010daa:	75 f1                	jne    c0010d9d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010dac:	58                   	pop    eax
c0010dad:	5b                   	pop    ebx
c0010dae:	5e                   	pop    esi
c0010daf:	c3                   	ret    
c0010db0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010dba:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010dc4:	eb df                	jmp    c0010da5 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010dc6:	83 ec 0c             	sub    esp,0xc
c0010dc9:	56                   	push   esi
c0010dca:	e8 81 fa ff ff       	call   c0010850 <Device::getName()>
c0010dcf:	83 c4 10             	add    esp,0x10
c0010dd2:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010dd5:	75 b5                	jne    c0010d8c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010dd7:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010ddc:	7f 12                	jg     c0010df0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x76>
c0010dde:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010de2:	31 c0                	xor    eax,eax
c0010de4:	8a 81 80 38 02 c0    	mov    al,BYTE PTR [ecx-0x3ffdc780]
c0010dea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010dee:	eb 9c                	jmp    c0010d8c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010df0:	83 ec 0c             	sub    esp,0xc
c0010df3:	68 bc 17 02 c0       	push   0xc00217bc
c0010df8:	e8 ef 45 00 00       	call   c00153ec <Krnl::panic(char const*)>
c0010dfd:	83 c4 10             	add    esp,0x10
c0010e00:	eb 8a                	jmp    c0010d8c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010e02 <nmiHandler(regs*, void*)>:
c0010e02:	a1 28 41 02 c0       	mov    eax,ds:0xc0024128
c0010e07:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010e0b:	e9 5c a8 ff ff       	jmp    c000b66c <Computer::handleNMI()>

c0010e10 <int_handler>:
c0010e10:	55                   	push   ebp
c0010e11:	57                   	push   edi
c0010e12:	56                   	push   esi
c0010e13:	53                   	push   ebx
c0010e14:	83 ec 0c             	sub    esp,0xc
c0010e17:	80 3d 74 4b 02 c0 00 	cmp    BYTE PTR ds:0xc0024b74,0x0
c0010e1e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010e22:	74 0b                	je     c0010e2f <int_handler+0x1f>
c0010e24:	fa                   	cli    
c0010e25:	f4                   	hlt    
c0010e26:	80 3d 74 4b 02 c0 00 	cmp    BYTE PTR ds:0xc0024b74,0x0
c0010e2d:	75 f5                	jne    c0010e24 <int_handler+0x14>
c0010e2f:	e8 4c 34 00 00       	call   c0014280 <thisCPU()>
c0010e34:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010e37:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010e3d:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010e40:	83 f8 17             	cmp    eax,0x17
c0010e43:	77 14                	ja     c0010e59 <int_handler+0x49>
c0010e45:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010e48:	55                   	push   ebp
c0010e49:	55                   	push   ebp
c0010e4a:	25 ff 00 00 00       	and    eax,0xff
c0010e4f:	8b 17                	mov    edx,DWORD PTR [edi]
c0010e51:	50                   	push   eax
c0010e52:	57                   	push   edi
c0010e53:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010e56:	83 c4 10             	add    esp,0x10
c0010e59:	83 c3 15             	add    ebx,0x15
c0010e5c:	c1 e3 04             	shl    ebx,0x4
c0010e5f:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010e63:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010e6a:	31 db                	xor    ebx,ebx
c0010e6c:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010e70:	85 c0                	test   eax,eax
c0010e72:	74 12                	je     c0010e86 <int_handler+0x76>
c0010e74:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010e77:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010e7b:	74 1b                	je     c0010e98 <int_handler+0x88>
c0010e7d:	51                   	push   ecx
c0010e7e:	51                   	push   ecx
c0010e7f:	52                   	push   edx
c0010e80:	56                   	push   esi
c0010e81:	ff d0                	call   eax
c0010e83:	83 c4 10             	add    esp,0x10
c0010e86:	43                   	inc    ebx
c0010e87:	83 fb 04             	cmp    ebx,0x4
c0010e8a:	75 e0                	jne    c0010e6c <int_handler+0x5c>
c0010e8c:	83 c4 0c             	add    esp,0xc
c0010e8f:	31 c0                	xor    eax,eax
c0010e91:	31 d2                	xor    edx,edx
c0010e93:	5b                   	pop    ebx
c0010e94:	5e                   	pop    esi
c0010e95:	5f                   	pop    edi
c0010e96:	5d                   	pop    ebp
c0010e97:	c3                   	ret    
c0010e98:	53                   	push   ebx
c0010e99:	53                   	push   ebx
c0010e9a:	52                   	push   edx
c0010e9b:	56                   	push   esi
c0010e9c:	ff d0                	call   eax
c0010e9e:	83 c4 10             	add    esp,0x10
c0010ea1:	83 c4 0c             	add    esp,0xc
c0010ea4:	5b                   	pop    ebx
c0010ea5:	5e                   	pop    esi
c0010ea6:	5f                   	pop    edi
c0010ea7:	5d                   	pop    ebp
c0010ea8:	c3                   	ret    
c0010ea9:	90                   	nop

c0010eaa <InterruptController::InterruptController(char const*)>:
c0010eaa:	83 ec 1c             	sub    esp,0x1c
c0010ead:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eb1:	83 ec 08             	sub    esp,0x8
c0010eb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010eb8:	50                   	push   eax
c0010eb9:	e8 a0 f8 ff ff       	call   c001075e <Device::Device(char const*)>
c0010ebe:	83 c4 10             	add    esp,0x10
c0010ec1:	ba ec 19 02 c0       	mov    edx,0xc00219ec
c0010ec6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eca:	89 10                	mov    DWORD PTR [eax],edx
c0010ecc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010ed0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010eda:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010ee2:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010eea:	7f 5e                	jg     c0010f4a <InterruptController::InterruptController(char const*)+0xa0>
c0010eec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010ef4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010ef9:	7f 49                	jg     c0010f44 <InterruptController::InterruptController(char const*)+0x9a>
c0010efb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eff:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010f03:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010f0a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f0e:	01 ca                	add    edx,ecx
c0010f10:	83 c2 54             	add    edx,0x54
c0010f13:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010f1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f1f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010f23:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010f2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f2e:	01 ca                	add    edx,ecx
c0010f30:	81 c2 54 04 00 00    	add    edx,0x454
c0010f36:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010f3e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010f42:	eb b0                	jmp    c0010ef4 <InterruptController::InterruptController(char const*)+0x4a>
c0010f44:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010f48:	eb 98                	jmp    c0010ee2 <InterruptController::InterruptController(char const*)+0x38>
c0010f4a:	90                   	nop
c0010f4b:	83 c4 1c             	add    esp,0x1c
c0010f4e:	c3                   	ret    
c0010f4f:	90                   	nop

c0010f50 <InterruptController::~InterruptController()>:
c0010f50:	83 ec 0c             	sub    esp,0xc
c0010f53:	ba ec 19 02 c0       	mov    edx,0xc00219ec
c0010f58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f5c:	89 10                	mov    DWORD PTR [eax],edx
c0010f5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f62:	83 ec 0c             	sub    esp,0xc
c0010f65:	50                   	push   eax
c0010f66:	e8 a9 f4 ff ff       	call   c0010414 <Device::~Device()>
c0010f6b:	83 c4 10             	add    esp,0x10
c0010f6e:	90                   	nop
c0010f6f:	83 c4 0c             	add    esp,0xc
c0010f72:	c3                   	ret    
c0010f73:	90                   	nop

c0010f74 <InterruptController::~InterruptController()>:
c0010f74:	83 ec 0c             	sub    esp,0xc
c0010f77:	83 ec 0c             	sub    esp,0xc
c0010f7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f7e:	e8 cd ff ff ff       	call   c0010f50 <InterruptController::~InterruptController()>
c0010f83:	83 c4 10             	add    esp,0x10
c0010f86:	83 ec 08             	sub    esp,0x8
c0010f89:	68 58 21 00 00       	push   0x2158
c0010f8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f92:	e8 9c e0 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0010f97:	83 c4 10             	add    esp,0x10
c0010f9a:	83 c4 0c             	add    esp,0xc
c0010f9d:	c3                   	ret    

c0010f9e <displayDebugInfo(regs*)>:
c0010f9e:	55                   	push   ebp
c0010f9f:	57                   	push   edi
c0010fa0:	56                   	push   esi
c0010fa1:	53                   	push   ebx
c0010fa2:	83 ec 24             	sub    esp,0x24
c0010fa5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010fa9:	0f 20 c2             	mov    edx,cr0
c0010fac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010fb0:	0f 20 d7             	mov    edi,cr2
c0010fb3:	0f 20 de             	mov    esi,cr3
c0010fb6:	0f 20 e5             	mov    ebp,cr4
c0010fb9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0010fbc:	50                   	push   eax
c0010fbd:	68 49 18 02 c0       	push   0xc0021849
c0010fc2:	e8 92 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0010fc7:	5a                   	pop    edx
c0010fc8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010fcb:	59                   	pop    ecx
c0010fcc:	50                   	push   eax
c0010fcd:	68 54 18 02 c0       	push   0xc0021854
c0010fd2:	e8 82 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0010fd7:	58                   	pop    eax
c0010fd8:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010fdb:	5a                   	pop    edx
c0010fdc:	51                   	push   ecx
c0010fdd:	68 5f 18 02 c0       	push   0xc002185f
c0010fe2:	e8 72 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0010fe7:	58                   	pop    eax
c0010fe8:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010feb:	5a                   	pop    edx
c0010fec:	51                   	push   ecx
c0010fed:	68 6a 18 02 c0       	push   0xc002186a
c0010ff2:	e8 62 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0010ff7:	58                   	pop    eax
c0010ff8:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010ffb:	5a                   	pop    edx
c0010ffc:	51                   	push   ecx
c0010ffd:	68 75 18 02 c0       	push   0xc0021875
c0011002:	e8 52 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011007:	58                   	pop    eax
c0011008:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001100b:	5a                   	pop    edx
c001100c:	51                   	push   ecx
c001100d:	68 80 18 02 c0       	push   0xc0021880
c0011012:	e8 42 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011017:	58                   	pop    eax
c0011018:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c001101b:	5a                   	pop    edx
c001101c:	51                   	push   ecx
c001101d:	68 9a 18 02 c0       	push   0xc002189a
c0011022:	e8 32 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011027:	58                   	pop    eax
c0011028:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c001102b:	5a                   	pop    edx
c001102c:	51                   	push   ecx
c001102d:	68 8b 18 02 c0       	push   0xc002188b
c0011032:	e8 22 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011037:	58                   	pop    eax
c0011038:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c001103b:	5a                   	pop    edx
c001103c:	51                   	push   ecx
c001103d:	68 96 18 02 c0       	push   0xc0021896
c0011042:	e8 12 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011047:	58                   	pop    eax
c0011048:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001104b:	5a                   	pop    edx
c001104c:	51                   	push   ecx
c001104d:	68 a5 18 02 c0       	push   0xc00218a5
c0011052:	e8 02 e1 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011057:	58                   	pop    eax
c0011058:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001105b:	5a                   	pop    edx
c001105c:	51                   	push   ecx
c001105d:	68 b0 18 02 c0       	push   0xc00218b0
c0011062:	e8 f2 e0 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011067:	58                   	pop    eax
c0011068:	5a                   	pop    edx
c0011069:	57                   	push   edi
c001106a:	68 bb 18 02 c0       	push   0xc00218bb
c001106f:	e8 e5 e0 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011074:	59                   	pop    ecx
c0011075:	58                   	pop    eax
c0011076:	56                   	push   esi
c0011077:	68 c6 18 02 c0       	push   0xc00218c6
c001107c:	e8 d8 e0 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011081:	58                   	pop    eax
c0011082:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0011087:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001108d:	50                   	push   eax
c001108e:	e8 f6 c1 ff ff       	call   c000d289 <setActiveTerminal(VgaText*)>
c0011093:	58                   	pop    eax
c0011094:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011097:	c1 e0 05             	shl    eax,0x5
c001109a:	5a                   	pop    edx
c001109b:	05 e0 35 02 c0       	add    eax,0xc00235e0
c00110a0:	50                   	push   eax
c00110a1:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c00110a6:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00110ac:	51                   	push   ecx
c00110ad:	e8 f8 c5 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00110b2:	58                   	pop    eax
c00110b3:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c00110b8:	5a                   	pop    edx
c00110b9:	68 d1 18 02 c0       	push   0xc00218d1
c00110be:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00110c4:	51                   	push   ecx
c00110c5:	e8 e0 c5 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00110ca:	58                   	pop    eax
c00110cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110d0:	5a                   	pop    edx
c00110d1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00110d4:	83 c0 0c             	add    eax,0xc
c00110d7:	50                   	push   eax
c00110d8:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c00110dd:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00110e3:	51                   	push   ecx
c00110e4:	e8 c1 c5 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00110e9:	58                   	pop    eax
c00110ea:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c00110ef:	5a                   	pop    edx
c00110f0:	68 da 18 02 c0       	push   0xc00218da
c00110f5:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00110fb:	51                   	push   ecx
c00110fc:	e8 a9 c5 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0011101:	58                   	pop    eax
c0011102:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0011105:	5a                   	pop    edx
c0011106:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c001110b:	51                   	push   ecx
c001110c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011112:	50                   	push   eax
c0011113:	e8 b8 c5 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c0011118:	58                   	pop    eax
c0011119:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c001111e:	5a                   	pop    edx
c001111f:	68 e2 18 02 c0       	push   0xc00218e2
c0011124:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001112a:	51                   	push   ecx
c001112b:	e8 7a c5 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0011130:	58                   	pop    eax
c0011131:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c0011134:	5a                   	pop    edx
c0011135:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c001113a:	51                   	push   ecx
c001113b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011141:	50                   	push   eax
c0011142:	e8 89 c5 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c0011147:	58                   	pop    eax
c0011148:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c001114d:	5a                   	pop    edx
c001114e:	68 ea 18 02 c0       	push   0xc00218ea
c0011153:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0011159:	51                   	push   ecx
c001115a:	e8 4b c5 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c001115f:	58                   	pop    eax
c0011160:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0011163:	5a                   	pop    edx
c0011164:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0011169:	51                   	push   ecx
c001116a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011170:	50                   	push   eax
c0011171:	e8 5a c5 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c0011176:	58                   	pop    eax
c0011177:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c001117c:	5a                   	pop    edx
c001117d:	68 f2 18 02 c0       	push   0xc00218f2
c0011182:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0011188:	51                   	push   ecx
c0011189:	e8 1c c5 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c001118e:	58                   	pop    eax
c001118f:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0011192:	5a                   	pop    edx
c0011193:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0011198:	51                   	push   ecx
c0011199:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001119f:	50                   	push   eax
c00111a0:	e8 2b c5 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c00111a5:	58                   	pop    eax
c00111a6:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c00111ab:	5a                   	pop    edx
c00111ac:	68 fa 18 02 c0       	push   0xc00218fa
c00111b1:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00111b7:	51                   	push   ecx
c00111b8:	e8 ed c4 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00111bd:	58                   	pop    eax
c00111be:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00111c1:	5a                   	pop    edx
c00111c2:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c00111c7:	51                   	push   ecx
c00111c8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00111ce:	50                   	push   eax
c00111cf:	e8 fc c4 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c00111d4:	58                   	pop    eax
c00111d5:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c00111da:	5a                   	pop    edx
c00111db:	68 02 19 02 c0       	push   0xc0021902
c00111e0:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00111e6:	51                   	push   ecx
c00111e7:	e8 be c4 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00111ec:	58                   	pop    eax
c00111ed:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00111f0:	5a                   	pop    edx
c00111f1:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c00111f6:	51                   	push   ecx
c00111f7:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00111fd:	53                   	push   ebx
c00111fe:	e8 cd c4 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c0011203:	58                   	pop    eax
c0011204:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0011209:	5a                   	pop    edx
c001120a:	68 0a 19 02 c0       	push   0xc002190a
c001120f:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0011215:	51                   	push   ecx
c0011216:	e8 8f c4 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c001121b:	5b                   	pop    ebx
c001121c:	58                   	pop    eax
c001121d:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0011222:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011226:	52                   	push   edx
c0011227:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001122d:	50                   	push   eax
c001122e:	e8 9d c4 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c0011233:	58                   	pop    eax
c0011234:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0011239:	5a                   	pop    edx
c001123a:	68 13 19 02 c0       	push   0xc0021913
c001123f:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0011245:	51                   	push   ecx
c0011246:	e8 5f c4 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c001124b:	5b                   	pop    ebx
c001124c:	58                   	pop    eax
c001124d:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0011252:	57                   	push   edi
c0011253:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011259:	50                   	push   eax
c001125a:	e8 71 c4 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c001125f:	58                   	pop    eax
c0011260:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0011265:	5a                   	pop    edx
c0011266:	68 1b 19 02 c0       	push   0xc002191b
c001126b:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0011271:	51                   	push   ecx
c0011272:	e8 33 c4 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0011277:	5b                   	pop    ebx
c0011278:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c001127d:	5f                   	pop    edi
c001127e:	56                   	push   esi
c001127f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011285:	50                   	push   eax
c0011286:	e8 45 c4 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c001128b:	58                   	pop    eax
c001128c:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0011291:	5a                   	pop    edx
c0011292:	68 23 19 02 c0       	push   0xc0021923
c0011297:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001129d:	51                   	push   ecx
c001129e:	e8 07 c4 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00112a3:	5b                   	pop    ebx
c00112a4:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c00112a9:	5e                   	pop    esi
c00112aa:	55                   	push   ebp
c00112ab:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00112b1:	57                   	push   edi
c00112b2:	e8 19 c4 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c00112b7:	5d                   	pop    ebp
c00112b8:	58                   	pop    eax
c00112b9:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c00112be:	68 2b 19 02 c0       	push   0xc002192b
c00112c3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00112c9:	50                   	push   eax
c00112ca:	e8 db c3 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00112cf:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c00112d4:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00112da:	e8 34 e2 00 00       	call   c001f513 <CPU::readDR0()>
c00112df:	5a                   	pop    edx
c00112e0:	59                   	pop    ecx
c00112e1:	50                   	push   eax
c00112e2:	53                   	push   ebx
c00112e3:	e8 e8 c3 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c00112e8:	5b                   	pop    ebx
c00112e9:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c00112ee:	5e                   	pop    esi
c00112ef:	68 34 19 02 c0       	push   0xc0021934
c00112f4:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00112fa:	57                   	push   edi
c00112fb:	e8 aa c3 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0011300:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0011305:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001130b:	e8 15 e2 00 00       	call   c001f525 <CPU::readDR1()>
c0011310:	5d                   	pop    ebp
c0011311:	5a                   	pop    edx
c0011312:	50                   	push   eax
c0011313:	53                   	push   ebx
c0011314:	e8 b7 c3 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c0011319:	59                   	pop    ecx
c001131a:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c001131f:	5b                   	pop    ebx
c0011320:	68 3c 19 02 c0       	push   0xc002193c
c0011325:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001132b:	56                   	push   esi
c001132c:	e8 79 c3 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0011331:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0011336:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001133c:	e8 f6 e1 00 00       	call   c001f537 <CPU::readDR2()>
c0011341:	5f                   	pop    edi
c0011342:	5d                   	pop    ebp
c0011343:	50                   	push   eax
c0011344:	53                   	push   ebx
c0011345:	e8 86 c3 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c001134a:	58                   	pop    eax
c001134b:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0011350:	5a                   	pop    edx
c0011351:	68 44 19 02 c0       	push   0xc0021944
c0011356:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001135c:	51                   	push   ecx
c001135d:	e8 48 c3 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0011362:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0011367:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001136d:	e8 d7 e1 00 00       	call   c001f549 <CPU::readDR3()>
c0011372:	5e                   	pop    esi
c0011373:	5f                   	pop    edi
c0011374:	50                   	push   eax
c0011375:	53                   	push   ebx
c0011376:	e8 55 c3 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c001137b:	5d                   	pop    ebp
c001137c:	58                   	pop    eax
c001137d:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0011382:	68 4c 19 02 c0       	push   0xc002194c
c0011387:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001138d:	50                   	push   eax
c001138e:	e8 17 c3 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0011393:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0011398:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001139e:	e8 b8 e1 00 00       	call   c001f55b <CPU::readDR6()>
c00113a3:	5a                   	pop    edx
c00113a4:	59                   	pop    ecx
c00113a5:	50                   	push   eax
c00113a6:	53                   	push   ebx
c00113a7:	e8 24 c3 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c00113ac:	5b                   	pop    ebx
c00113ad:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c00113b2:	5e                   	pop    esi
c00113b3:	68 54 19 02 c0       	push   0xc0021954
c00113b8:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00113be:	57                   	push   edi
c00113bf:	e8 e6 c2 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00113c4:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c00113c9:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00113cf:	e8 99 e1 00 00       	call   c001f56d <CPU::readDR7()>
c00113d4:	5d                   	pop    ebp
c00113d5:	5a                   	pop    edx
c00113d6:	50                   	push   eax
c00113d7:	53                   	push   ebx
c00113d8:	e8 f3 c2 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c00113dd:	fa                   	cli    
c00113de:	f4                   	hlt    
c00113df:	83 c4 10             	add    esp,0x10
c00113e2:	eb fe                	jmp    c00113e2 <displayDebugInfo(regs*)+0x444>

c00113e4 <x87EmulHandler(regs*, void*)>:
c00113e4:	53                   	push   ebx
c00113e5:	83 ec 08             	sub    esp,0x8
c00113e8:	a1 b4 42 02 c0       	mov    eax,ds:0xc00242b4
c00113ed:	85 c0                	test   eax,eax
c00113ef:	74 16                	je     c0011407 <x87EmulHandler(regs*, void*)+0x23>
c00113f1:	83 ec 0c             	sub    esp,0xc
c00113f4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00113f8:	53                   	push   ebx
c00113f9:	ff d0                	call   eax
c00113fb:	83 c4 10             	add    esp,0x10
c00113fe:	84 c0                	test   al,al
c0011400:	74 2e                	je     c0011430 <x87EmulHandler(regs*, void*)+0x4c>
c0011402:	83 c4 08             	add    esp,0x8
c0011405:	5b                   	pop    ebx
c0011406:	c3                   	ret    
c0011407:	50                   	push   eax
c0011408:	8b 1d 28 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024128
c001140e:	50                   	push   eax
c001140f:	6a 01                	push   0x1
c0011411:	68 5c 19 02 c0       	push   0xc002195c
c0011416:	e8 f4 69 00 00       	call   c0017e0f <Thr::loadDLL(char const*, bool)>
c001141b:	5a                   	pop    edx
c001141c:	59                   	pop    ecx
c001141d:	53                   	push   ebx
c001141e:	50                   	push   eax
c001141f:	e8 b1 6b 00 00       	call   c0017fd5 <Thr::executeDLL(unsigned long, void*)>
c0011424:	a1 b4 42 02 c0       	mov    eax,ds:0xc00242b4
c0011429:	83 c4 10             	add    esp,0x10
c001142c:	85 c0                	test   eax,eax
c001142e:	75 c1                	jne    c00113f1 <x87EmulHandler(regs*, void*)+0xd>
c0011430:	83 ec 0c             	sub    esp,0xc
c0011433:	68 79 19 02 c0       	push   0xc0021979
c0011438:	e8 1c dd ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001143d:	59                   	pop    ecx
c001143e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011442:	e8 57 fb ff ff       	call   c0010f9e <displayDebugInfo(regs*)>

c0011447 <gpFault(regs*, void*)>:
c0011447:	53                   	push   ebx
c0011448:	83 ec 14             	sub    esp,0x14
c001144b:	c7 05 b0 42 02 c0 87 92 01 c0 	mov    DWORD PTR ds:0xc00242b0,0xc0019287
c0011455:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011459:	53                   	push   ebx
c001145a:	e8 28 7e 00 00       	call   c0019287 <Vm::faultHandler(regs*)>
c001145f:	83 c4 10             	add    esp,0x10
c0011462:	84 c0                	test   al,al
c0011464:	74 05                	je     c001146b <gpFault(regs*, void*)+0x24>
c0011466:	83 c4 08             	add    esp,0x8
c0011469:	5b                   	pop    ebx
c001146a:	c3                   	ret    
c001146b:	83 ec 0c             	sub    esp,0xc
c001146e:	68 79 19 02 c0       	push   0xc0021979
c0011473:	e8 e1 dc ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0011478:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001147b:	e8 1e fb ff ff       	call   c0010f9e <displayDebugInfo(regs*)>

c0011480 <pgFault(regs*, void*)>:
c0011480:	83 ec 18             	sub    esp,0x18
c0011483:	68 94 19 02 c0       	push   0xc0021994
c0011488:	e8 cc dc ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001148d:	58                   	pop    eax
c001148e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011492:	52                   	push   edx
c0011493:	e8 06 fb ff ff       	call   c0010f9e <displayDebugInfo(regs*)>

c0011498 <otherISRHandler(regs*, void*)>:
c0011498:	53                   	push   ebx
c0011499:	83 ec 0c             	sub    esp,0xc
c001149c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00114a0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00114a3:	50                   	push   eax
c00114a4:	50                   	push   eax
c00114a5:	68 a1 19 02 c0       	push   0xc00219a1
c00114aa:	e8 aa dc ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00114af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00114b2:	e8 e7 fa ff ff       	call   c0010f9e <displayDebugInfo(regs*)>

c00114b7 <opcodeFault(regs*, void*)>:
c00114b7:	55                   	push   ebp
c00114b8:	57                   	push   edi
c00114b9:	56                   	push   esi
c00114ba:	53                   	push   ebx
c00114bb:	83 ec 2c             	sub    esp,0x2c
c00114be:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00114c2:	e8 b9 2d 00 00       	call   c0014280 <thisCPU()>
c00114c7:	80 b8 94 11 00 00 00 	cmp    BYTE PTR [eax+0x1194],0x0
c00114ce:	0f 85 c8 00 00 00    	jne    c001159c <opcodeFault(regs*, void*)+0xe5>
c00114d4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00114d7:	8a 10                	mov    dl,BYTE PTR [eax]
c00114d9:	80 fa f0             	cmp    dl,0xf0
c00114dc:	75 0b                	jne    c00114e9 <opcodeFault(regs*, void*)+0x32>
c00114de:	8d 48 01             	lea    ecx,[eax+0x1]
c00114e1:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c00114e4:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c00114e7:	89 c8                	mov    eax,ecx
c00114e9:	80 fa 0f             	cmp    dl,0xf
c00114ec:	0f 85 cb 00 00 00    	jne    c00115bd <opcodeFault(regs*, void*)+0x106>
c00114f2:	80 78 01 c7          	cmp    BYTE PTR [eax+0x1],0xc7
c00114f6:	0f 85 c1 00 00 00    	jne    c00115bd <opcodeFault(regs*, void*)+0x106>
c00114fc:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c00114ff:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0011503:	47                   	inc    edi
c0011504:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0011507:	50                   	push   eax
c0011508:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c001150c:	50                   	push   eax
c001150d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011511:	50                   	push   eax
c0011512:	53                   	push   ebx
c0011513:	e8 d4 3c 00 00       	call   c00151ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0011518:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001151c:	83 c4 10             	add    esp,0x10
c001151f:	80 7c 24 1a 00       	cmp    BYTE PTR [esp+0x1a],0x0
c0011524:	0f 85 93 00 00 00    	jne    c00115bd <opcodeFault(regs*, void*)+0x106>
c001152a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001152d:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0011530:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0011533:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011537:	8b 6b 20             	mov    ebp,DWORD PTR [ebx+0x20]
c001153a:	e8 b6 6e 00 00       	call   c00183f5 <lockScheduler()>
c001153f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011543:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011545:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011548:	31 ce                	xor    esi,ecx
c001154a:	31 d7                	xor    edi,edx
c001154c:	09 f7                	or     edi,esi
c001154e:	74 38                	je     c0011588 <opcodeFault(regs*, void*)+0xd1>
c0011550:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0011553:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0011556:	83 e1 bf             	and    ecx,0xffffffbf
c0011559:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c001155c:	89 4b 40             	mov    DWORD PTR [ebx+0x40],ecx
c001155f:	e8 93 6e 00 00       	call   c00183f7 <unlockScheduler()>
c0011564:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011568:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c001156b:	83 ec 0c             	sub    esp,0xc
c001156e:	01 c2                	add    edx,eax
c0011570:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0011573:	68 be 19 02 c0       	push   0xc00219be
c0011578:	e8 dc db ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001157d:	83 c4 10             	add    esp,0x10
c0011580:	83 c4 2c             	add    esp,0x2c
c0011583:	5b                   	pop    ebx
c0011584:	5e                   	pop    esi
c0011585:	5f                   	pop    edi
c0011586:	5d                   	pop    ebp
c0011587:	c3                   	ret    
c0011588:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001158c:	89 28                	mov    DWORD PTR [eax],ebp
c001158e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0011591:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0011594:	83 ce 40             	or     esi,0x40
c0011597:	89 73 40             	mov    DWORD PTR [ebx+0x40],esi
c001159a:	eb c3                	jmp    c001155f <opcodeFault(regs*, void*)+0xa8>
c001159c:	83 ec 0c             	sub    esp,0xc
c001159f:	68 f8 17 02 c0       	push   0xc00217f8
c00115a4:	e8 b0 db ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00115a9:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00115ac:	83 c4 10             	add    esp,0x10
c00115af:	83 c5 19             	add    ebp,0x19
c00115b2:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c00115b5:	83 c4 2c             	add    esp,0x2c
c00115b8:	5b                   	pop    ebx
c00115b9:	5e                   	pop    esi
c00115ba:	5f                   	pop    edi
c00115bb:	5d                   	pop    ebp
c00115bc:	c3                   	ret    
c00115bd:	83 ec 0c             	sub    esp,0xc
c00115c0:	68 d1 19 02 c0       	push   0xc00219d1
c00115c5:	e8 8f db ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00115ca:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00115cd:	31 d2                	xor    edx,edx
c00115cf:	c1 e0 04             	shl    eax,0x4
c00115d2:	31 c9                	xor    ecx,ecx
c00115d4:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00115d7:	8a 50 03             	mov    dl,BYTE PTR [eax+0x3]
c00115da:	89 14 24             	mov    DWORD PTR [esp],edx
c00115dd:	31 d2                	xor    edx,edx
c00115df:	8a 50 02             	mov    dl,BYTE PTR [eax+0x2]
c00115e2:	52                   	push   edx
c00115e3:	31 d2                	xor    edx,edx
c00115e5:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c00115e8:	52                   	push   edx
c00115e9:	8a 08                	mov    cl,BYTE PTR [eax]
c00115eb:	89 c8                	mov    eax,ecx
c00115ed:	50                   	push   eax
c00115ee:	68 1c 18 02 c0       	push   0xc002181c
c00115f3:	e8 61 db ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00115f8:	83 c4 14             	add    esp,0x14
c00115fb:	53                   	push   ebx
c00115fc:	e8 9d f9 ff ff       	call   c0010f9e <displayDebugInfo(regs*)>

c0011601 <displayProgramFault(char const*)>:
c0011601:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011606:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011609:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001160f:	85 c0                	test   eax,eax
c0011611:	74 16                	je     c0011629 <displayProgramFault(char const*)+0x28>
c0011613:	83 ec 0c             	sub    esp,0xc
c0011616:	6a 04                	push   0x4
c0011618:	6a 0f                	push   0xf
c001161a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001161e:	52                   	push   edx
c001161f:	50                   	push   eax
c0011620:	e8 45 bd ff ff       	call   c000d36a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0011625:	83 c4 1c             	add    esp,0x1c
c0011628:	c3                   	ret    
c0011629:	c3                   	ret    

c001162a <InterruptController::convertLegacyIRQNumber(int)>:
c001162a:	53                   	push   ebx
c001162b:	83 ec 14             	sub    esp,0x14
c001162e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011632:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011636:	50                   	push   eax
c0011637:	e8 14 f2 ff ff       	call   c0010850 <Device::getName()>
c001163c:	83 c4 10             	add    esp,0x10
c001163f:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0011642:	74 07                	je     c001164b <InterruptController::convertLegacyIRQNumber(int)+0x21>
c0011644:	83 c4 08             	add    esp,0x8
c0011647:	89 d8                	mov    eax,ebx
c0011649:	5b                   	pop    ebx
c001164a:	c3                   	ret    
c001164b:	83 fb 0f             	cmp    ebx,0xf
c001164e:	7f 11                	jg     c0011661 <InterruptController::convertLegacyIRQNumber(int)+0x37>
c0011650:	31 c0                	xor    eax,eax
c0011652:	8a 83 80 38 02 c0    	mov    al,BYTE PTR [ebx-0x3ffdc780]
c0011658:	83 c4 08             	add    esp,0x8
c001165b:	89 c3                	mov    ebx,eax
c001165d:	89 d8                	mov    eax,ebx
c001165f:	5b                   	pop    ebx
c0011660:	c3                   	ret    
c0011661:	83 ec 0c             	sub    esp,0xc
c0011664:	68 48 17 02 c0       	push   0xc0021748
c0011669:	e8 7e 3d 00 00       	call   c00153ec <Krnl::panic(char const*)>
c001166e:	83 c4 10             	add    esp,0x10
c0011671:	89 d8                	mov    eax,ebx
c0011673:	83 c4 08             	add    esp,0x8
c0011676:	5b                   	pop    ebx
c0011677:	c3                   	ret    

c0011678 <setupInterruptController()>:
c0011678:	56                   	push   esi
c0011679:	53                   	push   ebx
c001167a:	50                   	push   eax
c001167b:	e8 fd 2b 00 00       	call   c001427d <getCPUNumber()>
c0011680:	85 c0                	test   eax,eax
c0011682:	0f 85 10 02 00 00    	jne    c0011898 <setupInterruptController()+0x220>
c0011688:	a1 28 41 02 c0       	mov    eax,ds:0xc0024128
c001168d:	83 ec 0c             	sub    esp,0xc
c0011690:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011696:	68 58 21 00 00       	push   0x2158
c001169b:	83 e0 01             	and    eax,0x1
c001169e:	89 c6                	mov    esi,eax
c00116a0:	e8 7f d9 ff ff       	call   c000f024 <operator new(unsigned long)>
c00116a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00116a8:	89 c3                	mov    ebx,eax
c00116aa:	e8 b3 cc 00 00       	call   c001e362 <PIC::PIC()>
c00116af:	6a 00                	push   0x0
c00116b1:	6a 00                	push   0x0
c00116b3:	6a 00                	push   0x0
c00116b5:	53                   	push   ebx
c00116b6:	e8 0b d0 00 00       	call   c001e6c6 <PIC::open(int, int, void*)>
c00116bb:	89 f0                	mov    eax,esi
c00116bd:	83 c4 20             	add    esp,0x20
c00116c0:	84 c0                	test   al,al
c00116c2:	0f 85 92 01 00 00    	jne    c001185a <setupInterruptController()+0x1e2>
c00116c8:	51                   	push   ecx
c00116c9:	8b 35 28 41 02 c0    	mov    esi,DWORD PTR ds:0xc0024128
c00116cf:	51                   	push   ecx
c00116d0:	53                   	push   ebx
c00116d1:	56                   	push   esi
c00116d2:	e8 97 ee ff ff       	call   c001056e <Device::addChild(Device*)>
c00116d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116d9:	6a 00                	push   0x0
c00116db:	68 98 14 01 c0       	push   0xc0011498
c00116e0:	6a 00                	push   0x0
c00116e2:	53                   	push   ebx
c00116e3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00116e6:	83 c4 20             	add    esp,0x20
c00116e9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116eb:	6a 00                	push   0x0
c00116ed:	68 98 14 01 c0       	push   0xc0011498
c00116f2:	6a 01                	push   0x1
c00116f4:	53                   	push   ebx
c00116f5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00116f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00116fa:	6a 00                	push   0x0
c00116fc:	68 02 0e 01 c0       	push   0xc0010e02
c0011701:	6a 02                	push   0x2
c0011703:	53                   	push   ebx
c0011704:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011707:	83 c4 20             	add    esp,0x20
c001170a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001170c:	6a 00                	push   0x0
c001170e:	68 98 14 01 c0       	push   0xc0011498
c0011713:	6a 03                	push   0x3
c0011715:	53                   	push   ebx
c0011716:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011719:	8b 03                	mov    eax,DWORD PTR [ebx]
c001171b:	6a 00                	push   0x0
c001171d:	68 98 14 01 c0       	push   0xc0011498
c0011722:	6a 04                	push   0x4
c0011724:	53                   	push   ebx
c0011725:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011728:	83 c4 20             	add    esp,0x20
c001172b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001172d:	6a 00                	push   0x0
c001172f:	68 98 14 01 c0       	push   0xc0011498
c0011734:	6a 05                	push   0x5
c0011736:	53                   	push   ebx
c0011737:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001173a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001173c:	6a 00                	push   0x0
c001173e:	68 b7 14 01 c0       	push   0xc00114b7
c0011743:	6a 06                	push   0x6
c0011745:	53                   	push   ebx
c0011746:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011749:	83 c4 20             	add    esp,0x20
c001174c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001174e:	6a 00                	push   0x0
c0011750:	68 e4 13 01 c0       	push   0xc00113e4
c0011755:	6a 07                	push   0x7
c0011757:	53                   	push   ebx
c0011758:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001175b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001175d:	6a 00                	push   0x0
c001175f:	68 20 0c 01 c0       	push   0xc0010c20
c0011764:	6a 08                	push   0x8
c0011766:	53                   	push   ebx
c0011767:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001176a:	83 c4 20             	add    esp,0x20
c001176d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001176f:	6a 00                	push   0x0
c0011771:	68 98 14 01 c0       	push   0xc0011498
c0011776:	6a 09                	push   0x9
c0011778:	53                   	push   ebx
c0011779:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001177c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001177e:	6a 00                	push   0x0
c0011780:	68 98 14 01 c0       	push   0xc0011498
c0011785:	6a 0a                	push   0xa
c0011787:	53                   	push   ebx
c0011788:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001178b:	83 c4 20             	add    esp,0x20
c001178e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011790:	6a 00                	push   0x0
c0011792:	68 98 14 01 c0       	push   0xc0011498
c0011797:	6a 0b                	push   0xb
c0011799:	53                   	push   ebx
c001179a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001179d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001179f:	6a 00                	push   0x0
c00117a1:	68 98 14 01 c0       	push   0xc0011498
c00117a6:	6a 0c                	push   0xc
c00117a8:	53                   	push   ebx
c00117a9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00117ac:	83 c4 20             	add    esp,0x20
c00117af:	8b 03                	mov    eax,DWORD PTR [ebx]
c00117b1:	6a 00                	push   0x0
c00117b3:	68 47 14 01 c0       	push   0xc0011447
c00117b8:	6a 0d                	push   0xd
c00117ba:	53                   	push   ebx
c00117bb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00117be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00117c0:	6a 00                	push   0x0
c00117c2:	68 80 14 01 c0       	push   0xc0011480
c00117c7:	6a 0e                	push   0xe
c00117c9:	53                   	push   ebx
c00117ca:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00117cd:	83 c4 20             	add    esp,0x20
c00117d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00117d2:	6a 00                	push   0x0
c00117d4:	68 98 14 01 c0       	push   0xc0011498
c00117d9:	6a 0f                	push   0xf
c00117db:	53                   	push   ebx
c00117dc:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00117df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00117e1:	6a 00                	push   0x0
c00117e3:	68 98 14 01 c0       	push   0xc0011498
c00117e8:	6a 10                	push   0x10
c00117ea:	53                   	push   ebx
c00117eb:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00117ee:	83 c4 20             	add    esp,0x20
c00117f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00117f3:	6a 00                	push   0x0
c00117f5:	68 98 14 01 c0       	push   0xc0011498
c00117fa:	6a 11                	push   0x11
c00117fc:	53                   	push   ebx
c00117fd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011800:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011802:	6a 00                	push   0x0
c0011804:	68 98 14 01 c0       	push   0xc0011498
c0011809:	6a 12                	push   0x12
c001180b:	53                   	push   ebx
c001180c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001180f:	83 c4 20             	add    esp,0x20
c0011812:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011814:	6a 00                	push   0x0
c0011816:	68 98 14 01 c0       	push   0xc0011498
c001181b:	6a 13                	push   0x13
c001181d:	53                   	push   ebx
c001181e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011821:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011823:	6a 00                	push   0x0
c0011825:	68 98 14 01 c0       	push   0xc0011498
c001182a:	6a 14                	push   0x14
c001182c:	53                   	push   ebx
c001182d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011830:	83 c4 20             	add    esp,0x20
c0011833:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011835:	6a 00                	push   0x0
c0011837:	68 98 14 01 c0       	push   0xc0011498
c001183c:	6a 1e                	push   0x1e
c001183e:	53                   	push   ebx
c001183f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011842:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011844:	6a 00                	push   0x0
c0011846:	68 fc 6d 01 c0       	push   0xc0016dfc
c001184b:	6a 60                	push   0x60
c001184d:	53                   	push   ebx
c001184e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011851:	83 c4 20             	add    esp,0x20
c0011854:	89 d8                	mov    eax,ebx
c0011856:	5a                   	pop    edx
c0011857:	5b                   	pop    ebx
c0011858:	5e                   	pop    esi
c0011859:	c3                   	ret    
c001185a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001185c:	6a 00                	push   0x0
c001185e:	6a 00                	push   0x0
c0011860:	6a 00                	push   0x0
c0011862:	53                   	push   ebx
c0011863:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011866:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011868:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001186b:	ff 50 04             	call   DWORD PTR [eax+0x4]
c001186e:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c0011875:	e8 aa d7 ff ff       	call   c000f024 <operator new(unsigned long)>
c001187a:	89 04 24             	mov    DWORD PTR [esp],eax
c001187d:	89 c3                	mov    ebx,eax
c001187f:	e8 e4 c5 00 00       	call   c001de68 <APIC::APIC()>
c0011884:	6a 00                	push   0x0
c0011886:	6a 00                	push   0x0
c0011888:	6a 00                	push   0x0
c001188a:	53                   	push   ebx
c001188b:	e8 e6 c4 00 00       	call   c001dd76 <APIC::open(int, int, void*)>
c0011890:	83 c4 20             	add    esp,0x20
c0011893:	e9 30 fe ff ff       	jmp    c00116c8 <setupInterruptController()+0x50>
c0011898:	83 ec 0c             	sub    esp,0xc
c001189b:	68 58 21 00 00       	push   0x2158
c00118a0:	e8 7f d7 ff ff       	call   c000f024 <operator new(unsigned long)>
c00118a5:	89 04 24             	mov    DWORD PTR [esp],eax
c00118a8:	89 c3                	mov    ebx,eax
c00118aa:	e8 b9 c5 00 00       	call   c001de68 <APIC::APIC()>
c00118af:	6a 00                	push   0x0
c00118b1:	6a 00                	push   0x0
c00118b3:	6a 00                	push   0x0
c00118b5:	53                   	push   ebx
c00118b6:	e8 bb c4 00 00       	call   c001dd76 <APIC::open(int, int, void*)>
c00118bb:	83 c4 18             	add    esp,0x18
c00118be:	a1 28 41 02 c0       	mov    eax,ds:0xc0024128
c00118c3:	53                   	push   ebx
c00118c4:	50                   	push   eax
c00118c5:	e8 a4 ec ff ff       	call   c001056e <Device::addChild(Device*)>
c00118ca:	83 c4 10             	add    esp,0x10
c00118cd:	89 d8                	mov    eax,ebx
c00118cf:	5a                   	pop    edx
c00118d0:	5b                   	pop    ebx
c00118d1:	5e                   	pop    esi
c00118d2:	c3                   	ret    
c00118d3:	90                   	nop

c00118d4 <startGUI(void*)>:
c00118d4:	55                   	push   ebp
c00118d5:	89 e5                	mov    ebp,esp
c00118d7:	53                   	push   ebx
c00118d8:	83 ec 04             	sub    esp,0x4
c00118db:	e8 17 6b 00 00       	call   c00183f7 <unlockScheduler()>
c00118e0:	e8 fb 6a 00 00       	call   c00183e0 <getIRQNestingLevel()>
c00118e5:	83 ec 08             	sub    esp,0x8
c00118e8:	50                   	push   eax
c00118e9:	68 2c 1a 02 c0       	push   0xc0021a2c
c00118ee:	e8 66 d8 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00118f3:	83 c4 10             	add    esp,0x10
c00118f6:	8b 1d 28 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024128
c00118fc:	83 ec 08             	sub    esp,0x8
c00118ff:	6a 01                	push   0x1
c0011901:	68 46 1a 02 c0       	push   0xc0021a46
c0011906:	e8 04 65 00 00       	call   c0017e0f <Thr::loadDLL(char const*, bool)>
c001190b:	83 c4 10             	add    esp,0x10
c001190e:	83 ec 08             	sub    esp,0x8
c0011911:	53                   	push   ebx
c0011912:	50                   	push   eax
c0011913:	e8 bd 66 00 00       	call   c0017fd5 <Thr::executeDLL(unsigned long, void*)>
c0011918:	83 c4 10             	add    esp,0x10
c001191b:	8b 1d 28 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024128
c0011921:	83 ec 08             	sub    esp,0x8
c0011924:	6a 01                	push   0x1
c0011926:	68 60 1a 02 c0       	push   0xc0021a60
c001192b:	e8 df 64 00 00       	call   c0017e0f <Thr::loadDLL(char const*, bool)>
c0011930:	83 c4 10             	add    esp,0x10
c0011933:	83 ec 08             	sub    esp,0x8
c0011936:	53                   	push   ebx
c0011937:	50                   	push   eax
c0011938:	e8 98 66 00 00       	call   c0017fd5 <Thr::executeDLL(unsigned long, void*)>
c001193d:	83 c4 10             	add    esp,0x10
c0011940:	90                   	nop
c0011941:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011944:	c9                   	leave  
c0011945:	c3                   	ret    

c0011946 <sendKeyToTerminal(unsigned char)>:
c0011946:	55                   	push   ebp
c0011947:	89 e5                	mov    ebp,esp
c0011949:	83 ec 28             	sub    esp,0x28
c001194c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001194f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0011952:	8b 15 e4 41 02 c0    	mov    edx,DWORD PTR ds:0xc00241e4
c0011958:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001195b:	25 ff 00 00 00       	and    eax,0xff
c0011960:	83 ec 08             	sub    esp,0x8
c0011963:	50                   	push   eax
c0011964:	52                   	push   edx
c0011965:	e8 3e bf ff ff       	call   c000d8a8 <VgaText::receiveKey(unsigned char)>
c001196a:	83 c4 10             	add    esp,0x10
c001196d:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0011971:	75 41                	jne    c00119b4 <sendKeyToTerminal(unsigned char)+0x6e>
c0011973:	e8 a4 6a 00 00       	call   c001841c <lockStuff()>
c0011978:	a1 c0 42 02 c0       	mov    eax,ds:0xc00242c0
c001197d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011980:	c7 05 c0 42 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00242c0,0x0
c001198a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001198e:	74 1f                	je     c00119af <sendKeyToTerminal(unsigned char)+0x69>
c0011990:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011993:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0011996:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011999:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001199c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001199f:	83 ec 0c             	sub    esp,0xc
c00119a2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00119a5:	e8 6f 70 00 00       	call   c0018a19 <unblockTask(ThreadControlBlock*)>
c00119aa:	83 c4 10             	add    esp,0x10
c00119ad:	eb db                	jmp    c001198a <sendKeyToTerminal(unsigned char)+0x44>
c00119af:	e8 0f 6e 00 00       	call   c00187c3 <unlockStuff()>
c00119b4:	90                   	nop
c00119b5:	c9                   	leave  
c00119b6:	c3                   	ret    

c00119b7 <sendKeyboardToken(KeyboardToken)>:
c00119b7:	55                   	push   ebp
c00119b8:	89 e5                	mov    ebp,esp
c00119ba:	83 ec 18             	sub    esp,0x18
c00119bd:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00119c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119c3:	25 ff ff 00 00       	and    eax,0xffff
c00119c8:	83 f2 01             	xor    edx,0x1
c00119cb:	88 90 e0 42 02 c0    	mov    BYTE PTR [eax-0x3ffdbd20],dl
c00119d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119d4:	66 3d 03 02          	cmp    ax,0x203
c00119d8:	75 07                	jne    c00119e1 <sendKeyboardToken(KeyboardToken)+0x2a>
c00119da:	a0 e0 43 02 c0       	mov    al,ds:0xc00243e0
c00119df:	84 c0                	test   al,al
c00119e1:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00119e5:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00119e8:	a0 e8 46 02 c0       	mov    al,ds:0xc00246e8
c00119ed:	38 c2                	cmp    dl,al
c00119ef:	74 1e                	je     c0011a0f <sendKeyboardToken(KeyboardToken)+0x58>
c00119f1:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00119f4:	a2 e8 46 02 c0       	mov    ds:0xc00246e8,al
c00119f9:	a0 e8 46 02 c0       	mov    al,ds:0xc00246e8
c00119fe:	25 ff 00 00 00       	and    eax,0xff
c0011a03:	83 ec 0c             	sub    esp,0xc
c0011a06:	50                   	push   eax
c0011a07:	e8 08 b1 ff ff       	call   c000cb14 <setTerminalScrollLock(bool)>
c0011a0c:	83 c4 10             	add    esp,0x10
c0011a0f:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0011a12:	84 c0                	test   al,al
c0011a14:	0f 84 ae 00 00 00    	je     c0011ac8 <sendKeyboardToken(KeyboardToken)+0x111>
c0011a1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a1d:	66 3d 10 03          	cmp    ax,0x310
c0011a21:	75 06                	jne    c0011a29 <sendKeyboardToken(KeyboardToken)+0x72>
c0011a23:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0011a29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a2c:	66 3d 11 03          	cmp    ax,0x311
c0011a30:	75 06                	jne    c0011a38 <sendKeyboardToken(KeyboardToken)+0x81>
c0011a32:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0011a38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a3b:	66 3d 12 03          	cmp    ax,0x312
c0011a3f:	75 06                	jne    c0011a47 <sendKeyboardToken(KeyboardToken)+0x90>
c0011a41:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0011a47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a4a:	66 3d 13 03          	cmp    ax,0x313
c0011a4e:	75 06                	jne    c0011a56 <sendKeyboardToken(KeyboardToken)+0x9f>
c0011a50:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0011a56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a59:	66 3d 14 03          	cmp    ax,0x314
c0011a5d:	75 06                	jne    c0011a65 <sendKeyboardToken(KeyboardToken)+0xae>
c0011a5f:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0011a65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a68:	66 3d 15 03          	cmp    ax,0x315
c0011a6c:	75 06                	jne    c0011a74 <sendKeyboardToken(KeyboardToken)+0xbd>
c0011a6e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0011a74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a77:	66 3d 16 03          	cmp    ax,0x316
c0011a7b:	75 06                	jne    c0011a83 <sendKeyboardToken(KeyboardToken)+0xcc>
c0011a7d:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0011a83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a86:	66 3d 17 03          	cmp    ax,0x317
c0011a8a:	75 06                	jne    c0011a92 <sendKeyboardToken(KeyboardToken)+0xdb>
c0011a8c:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0011a92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a95:	66 3d 18 03          	cmp    ax,0x318
c0011a99:	75 06                	jne    c0011aa1 <sendKeyboardToken(KeyboardToken)+0xea>
c0011a9b:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0011aa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aa4:	66 3d 19 03          	cmp    ax,0x319
c0011aa8:	75 06                	jne    c0011ab0 <sendKeyboardToken(KeyboardToken)+0xf9>
c0011aaa:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0011ab0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ab3:	66 3d 1a 03          	cmp    ax,0x31a
c0011ab7:	0f 85 c9 00 00 00    	jne    c0011b86 <sendKeyboardToken(KeyboardToken)+0x1cf>
c0011abd:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0011ac3:	e9 be 00 00 00       	jmp    c0011b86 <sendKeyboardToken(KeyboardToken)+0x1cf>
c0011ac8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011acb:	66 3d 10 03          	cmp    ax,0x310
c0011acf:	75 0a                	jne    c0011adb <sendKeyboardToken(KeyboardToken)+0x124>
c0011ad1:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0011ad7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011adb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ade:	66 3d 11 03          	cmp    ax,0x311
c0011ae2:	75 0a                	jne    c0011aee <sendKeyboardToken(KeyboardToken)+0x137>
c0011ae4:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0011aea:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011aee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011af1:	66 3d 12 03          	cmp    ax,0x312
c0011af5:	75 0a                	jne    c0011b01 <sendKeyboardToken(KeyboardToken)+0x14a>
c0011af7:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0011afd:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011b01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b04:	66 3d 13 03          	cmp    ax,0x313
c0011b08:	75 0a                	jne    c0011b14 <sendKeyboardToken(KeyboardToken)+0x15d>
c0011b0a:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0011b10:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011b14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b17:	66 3d 14 03          	cmp    ax,0x314
c0011b1b:	75 0a                	jne    c0011b27 <sendKeyboardToken(KeyboardToken)+0x170>
c0011b1d:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0011b23:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011b27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b2a:	66 3d 15 03          	cmp    ax,0x315
c0011b2e:	75 0a                	jne    c0011b3a <sendKeyboardToken(KeyboardToken)+0x183>
c0011b30:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0011b36:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011b3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b3d:	66 3d 16 03          	cmp    ax,0x316
c0011b41:	75 0a                	jne    c0011b4d <sendKeyboardToken(KeyboardToken)+0x196>
c0011b43:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0011b49:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011b4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b50:	66 3d 17 03          	cmp    ax,0x317
c0011b54:	75 0a                	jne    c0011b60 <sendKeyboardToken(KeyboardToken)+0x1a9>
c0011b56:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0011b5c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011b60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b63:	66 3d 18 03          	cmp    ax,0x318
c0011b67:	75 0a                	jne    c0011b73 <sendKeyboardToken(KeyboardToken)+0x1bc>
c0011b69:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0011b6f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011b73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b76:	66 3d 19 03          	cmp    ax,0x319
c0011b7a:	75 0a                	jne    c0011b86 <sendKeyboardToken(KeyboardToken)+0x1cf>
c0011b7c:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0011b82:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011b86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b89:	66 3d 00 02          	cmp    ax,0x200
c0011b8d:	75 2a                	jne    c0011bb9 <sendKeyboardToken(KeyboardToken)+0x202>
c0011b8f:	a0 e0 46 02 c0       	mov    al,ds:0xc00246e0
c0011b94:	83 f0 01             	xor    eax,0x1
c0011b97:	84 c0                	test   al,al
c0011b99:	74 1e                	je     c0011bb9 <sendKeyboardToken(KeyboardToken)+0x202>
c0011b9b:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0011ba0:	6a 01                	push   0x1
c0011ba2:	6a 00                	push   0x0
c0011ba4:	68 d4 18 01 c0       	push   0xc00118d4
c0011ba9:	50                   	push   eax
c0011baa:	e8 7b 69 00 00       	call   c001852a <Process::createThread(void (*)(void*), void*, int)>
c0011baf:	83 c4 10             	add    esp,0x10
c0011bb2:	c6 05 e0 46 02 c0 01 	mov    BYTE PTR ds:0xc00246e0,0x1
c0011bb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011bbc:	66 3d 1d 03          	cmp    ax,0x31d
c0011bc0:	75 06                	jne    c0011bc8 <sendKeyboardToken(KeyboardToken)+0x211>
c0011bc2:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0011bc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011bcb:	66 3d 1c 03          	cmp    ax,0x31c
c0011bcf:	75 06                	jne    c0011bd7 <sendKeyboardToken(KeyboardToken)+0x220>
c0011bd1:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0011bd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011bda:	66 3d 1b 03          	cmp    ax,0x31b
c0011bde:	75 06                	jne    c0011be6 <sendKeyboardToken(KeyboardToken)+0x22f>
c0011be0:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0011be6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011be9:	66 3d 1e 03          	cmp    ax,0x31e
c0011bed:	75 06                	jne    c0011bf5 <sendKeyboardToken(KeyboardToken)+0x23e>
c0011bef:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0011bf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011bf8:	66 3d 1f 03          	cmp    ax,0x31f
c0011bfc:	75 06                	jne    c0011c04 <sendKeyboardToken(KeyboardToken)+0x24d>
c0011bfe:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0011c04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c07:	66 3d 1a 03          	cmp    ax,0x31a
c0011c0b:	75 06                	jne    c0011c13 <sendKeyboardToken(KeyboardToken)+0x25c>
c0011c0d:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0011c13:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0011c17:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011c1a:	83 f0 01             	xor    eax,0x1
c0011c1d:	84 c0                	test   al,al
c0011c1f:	74 7b                	je     c0011c9c <sendKeyboardToken(KeyboardToken)+0x2e5>
c0011c21:	a0 e1 43 02 c0       	mov    al,ds:0xc00243e1
c0011c26:	84 c0                	test   al,al
c0011c28:	74 43                	je     c0011c6d <sendKeyboardToken(KeyboardToken)+0x2b6>
c0011c2a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011c2e:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0011c32:	74 2d                	je     c0011c61 <sendKeyboardToken(KeyboardToken)+0x2aa>
c0011c34:	8b 15 e4 46 02 c0    	mov    edx,DWORD PTR ds:0xc00246e4
c0011c3a:	89 d0                	mov    eax,edx
c0011c3c:	c1 e0 02             	shl    eax,0x2
c0011c3f:	01 d0                	add    eax,edx
c0011c41:	01 c0                	add    eax,eax
c0011c43:	a3 e4 46 02 c0       	mov    ds:0xc00246e4,eax
c0011c48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c4b:	25 ff ff 00 00       	and    eax,0xffff
c0011c50:	8d 50 d0             	lea    edx,[eax-0x30]
c0011c53:	a1 e4 46 02 c0       	mov    eax,ds:0xc00246e4
c0011c58:	01 d0                	add    eax,edx
c0011c5a:	a3 e4 46 02 c0       	mov    ds:0xc00246e4,eax
c0011c5f:	eb 71                	jmp    c0011cd2 <sendKeyboardToken(KeyboardToken)+0x31b>
c0011c61:	c7 05 e4 46 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00246e4,0x0
c0011c6b:	eb 65                	jmp    c0011cd2 <sendKeyboardToken(KeyboardToken)+0x31b>
c0011c6d:	a1 e4 46 02 c0       	mov    eax,ds:0xc00246e4
c0011c72:	85 c0                	test   eax,eax
c0011c74:	74 1a                	je     c0011c90 <sendKeyboardToken(KeyboardToken)+0x2d9>
c0011c76:	a1 e4 46 02 c0       	mov    eax,ds:0xc00246e4
c0011c7b:	25 ff 00 00 00       	and    eax,0xff
c0011c80:	83 ec 0c             	sub    esp,0xc
c0011c83:	50                   	push   eax
c0011c84:	e8 bd fc ff ff       	call   c0011946 <sendKeyToTerminal(unsigned char)>
c0011c89:	83 c4 10             	add    esp,0x10
c0011c8c:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011c90:	c7 05 e4 46 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00246e4,0x0
c0011c9a:	eb 36                	jmp    c0011cd2 <sendKeyboardToken(KeyboardToken)+0x31b>
c0011c9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011c9f:	66 3d 01 01          	cmp    ax,0x101
c0011ca3:	75 2d                	jne    c0011cd2 <sendKeyboardToken(KeyboardToken)+0x31b>
c0011ca5:	a1 e4 46 02 c0       	mov    eax,ds:0xc00246e4
c0011caa:	85 c0                	test   eax,eax
c0011cac:	74 1a                	je     c0011cc8 <sendKeyboardToken(KeyboardToken)+0x311>
c0011cae:	a1 e4 46 02 c0       	mov    eax,ds:0xc00246e4
c0011cb3:	25 ff 00 00 00       	and    eax,0xff
c0011cb8:	83 ec 0c             	sub    esp,0xc
c0011cbb:	50                   	push   eax
c0011cbc:	e8 85 fc ff ff       	call   c0011946 <sendKeyToTerminal(unsigned char)>
c0011cc1:	83 c4 10             	add    esp,0x10
c0011cc4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011cc8:	c7 05 e4 46 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00246e4,0x0
c0011cd2:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0011cd5:	83 f0 01             	xor    eax,0x1
c0011cd8:	84 c0                	test   al,al
c0011cda:	74 4e                	je     c0011d2a <sendKeyboardToken(KeyboardToken)+0x373>
c0011cdc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011cdf:	83 f0 01             	xor    eax,0x1
c0011ce2:	84 c0                	test   al,al
c0011ce4:	74 44                	je     c0011d2a <sendKeyboardToken(KeyboardToken)+0x373>
c0011ce6:	a0 e0 43 02 c0       	mov    al,ds:0xc00243e0
c0011ceb:	83 f0 01             	xor    eax,0x1
c0011cee:	84 c0                	test   al,al
c0011cf0:	74 38                	je     c0011d2a <sendKeyboardToken(KeyboardToken)+0x373>
c0011cf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011cf5:	66 83 f8 1f          	cmp    ax,0x1f
c0011cf9:	76 09                	jbe    c0011d04 <sendKeyboardToken(KeyboardToken)+0x34d>
c0011cfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011cfe:	66 83 f8 7e          	cmp    ax,0x7e
c0011d02:	76 12                	jbe    c0011d16 <sendKeyboardToken(KeyboardToken)+0x35f>
c0011d04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011d07:	66 83 f8 0a          	cmp    ax,0xa
c0011d0b:	74 09                	je     c0011d16 <sendKeyboardToken(KeyboardToken)+0x35f>
c0011d0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011d10:	66 83 f8 08          	cmp    ax,0x8
c0011d14:	75 14                	jne    c0011d2a <sendKeyboardToken(KeyboardToken)+0x373>
c0011d16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011d19:	25 ff 00 00 00       	and    eax,0xff
c0011d1e:	83 ec 0c             	sub    esp,0xc
c0011d21:	50                   	push   eax
c0011d22:	e8 1f fc ff ff       	call   c0011946 <sendKeyToTerminal(unsigned char)>
c0011d27:	83 c4 10             	add    esp,0x10
c0011d2a:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0011d2d:	83 f0 01             	xor    eax,0x1
c0011d30:	84 c0                	test   al,al
c0011d32:	74 51                	je     c0011d85 <sendKeyboardToken(KeyboardToken)+0x3ce>
c0011d34:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011d37:	83 f0 01             	xor    eax,0x1
c0011d3a:	84 c0                	test   al,al
c0011d3c:	74 47                	je     c0011d85 <sendKeyboardToken(KeyboardToken)+0x3ce>
c0011d3e:	a0 e0 43 02 c0       	mov    al,ds:0xc00243e0
c0011d43:	84 c0                	test   al,al
c0011d45:	74 3e                	je     c0011d85 <sendKeyboardToken(KeyboardToken)+0x3ce>
c0011d47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011d4a:	66 83 f8 3f          	cmp    ax,0x3f
c0011d4e:	76 35                	jbe    c0011d85 <sendKeyboardToken(KeyboardToken)+0x3ce>
c0011d50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011d53:	66 83 f8 7f          	cmp    ax,0x7f
c0011d57:	77 2c                	ja     c0011d85 <sendKeyboardToken(KeyboardToken)+0x3ce>
c0011d59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011d5c:	88 c2                	mov    dl,al
c0011d5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011d61:	66 83 f8 5f          	cmp    ax,0x5f
c0011d65:	76 04                	jbe    c0011d6b <sendKeyboardToken(KeyboardToken)+0x3b4>
c0011d67:	b0 20                	mov    al,0x20
c0011d69:	eb 02                	jmp    c0011d6d <sendKeyboardToken(KeyboardToken)+0x3b6>
c0011d6b:	b0 00                	mov    al,0x0
c0011d6d:	29 c2                	sub    edx,eax
c0011d6f:	88 d0                	mov    al,dl
c0011d71:	83 e8 40             	sub    eax,0x40
c0011d74:	25 ff 00 00 00       	and    eax,0xff
c0011d79:	83 ec 0c             	sub    esp,0xc
c0011d7c:	50                   	push   eax
c0011d7d:	e8 c4 fb ff ff       	call   c0011946 <sendKeyToTerminal(unsigned char)>
c0011d82:	83 c4 10             	add    esp,0x10
c0011d85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011d88:	66 3d 00 03          	cmp    ax,0x300
c0011d8c:	75 0f                	jne    c0011d9d <sendKeyboardToken(KeyboardToken)+0x3e6>
c0011d8e:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011d91:	83 f0 01             	xor    eax,0x1
c0011d94:	84 c0                	test   al,al
c0011d96:	74 05                	je     c0011d9d <sendKeyboardToken(KeyboardToken)+0x3e6>
c0011d98:	e8 9e b5 ff ff       	call   c000d33b <doTerminalCycle()>
c0011d9d:	90                   	nop
c0011d9e:	c9                   	leave  
c0011d9f:	c3                   	ret    

c0011da0 <clearInternalKeybuffer(VgaText*)>:
c0011da0:	55                   	push   ebp
c0011da1:	89 e5                	mov    ebp,esp
c0011da3:	83 ec 08             	sub    esp,0x8
c0011da6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011da9:	05 34 11 00 00       	add    eax,0x1134
c0011dae:	83 ec 0c             	sub    esp,0xc
c0011db1:	50                   	push   eax
c0011db2:	e8 6e e8 fe ff       	call   c0000625 <strlen>
c0011db7:	83 c4 10             	add    esp,0x10
c0011dba:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011dbd:	81 c2 34 11 00 00    	add    edx,0x1134
c0011dc3:	83 ec 04             	sub    esp,0x4
c0011dc6:	50                   	push   eax
c0011dc7:	6a 00                	push   0x0
c0011dc9:	52                   	push   edx
c0011dca:	e8 39 e8 fe ff       	call   c0000608 <memset>
c0011dcf:	83 c4 10             	add    esp,0x10
c0011dd2:	90                   	nop
c0011dd3:	c9                   	leave  
c0011dd4:	c3                   	ret    

c0011dd5 <readKeyboard(VgaText*, char*, unsigned long)>:
c0011dd5:	55                   	push   ebp
c0011dd6:	89 e5                	mov    ebp,esp
c0011dd8:	83 ec 18             	sub    esp,0x18
c0011ddb:	fb                   	sti    
c0011ddc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0011de3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0011de7:	74 77                	je     c0011e60 <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0011de9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011dec:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0011df2:	84 c0                	test   al,al
c0011df4:	75 02                	jne    c0011df8 <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0011df6:	eb f1                	jmp    c0011de9 <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0011df8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011dfb:	8d 50 01             	lea    edx,[eax+0x1]
c0011dfe:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0011e01:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011e04:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0011e0a:	88 10                	mov    BYTE PTR [eax],dl
c0011e0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011e0f:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0011e15:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0011e18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011e1b:	05 34 11 00 00       	add    eax,0x1134
c0011e20:	83 ec 0c             	sub    esp,0xc
c0011e23:	50                   	push   eax
c0011e24:	e8 fc e7 fe ff       	call   c0000625 <strlen>
c0011e29:	83 c4 10             	add    esp,0x10
c0011e2c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011e2f:	81 c2 34 11 00 00    	add    edx,0x1134
c0011e35:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011e38:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011e3b:	81 c2 34 11 00 00    	add    edx,0x1134
c0011e41:	83 ec 04             	sub    esp,0x4
c0011e44:	50                   	push   eax
c0011e45:	51                   	push   ecx
c0011e46:	52                   	push   edx
c0011e47:	e8 4e e7 fe ff       	call   c000059a <memmove>
c0011e4c:	83 c4 10             	add    esp,0x10
c0011e4f:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0011e52:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011e55:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0011e59:	75 88                	jne    c0011de3 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0011e5b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e5e:	eb 03                	jmp    c0011e63 <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c0011e60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e63:	c9                   	leave  
c0011e64:	c3                   	ret    
c0011e65:	90                   	nop

c0011e66 <Keyboard::Keyboard(char const*)>:
c0011e66:	83 ec 0c             	sub    esp,0xc
c0011e69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e6d:	83 ec 08             	sub    esp,0x8
c0011e70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e74:	50                   	push   eax
c0011e75:	e8 e4 e8 ff ff       	call   c001075e <Device::Device(char const*)>
c0011e7a:	83 c4 10             	add    esp,0x10
c0011e7d:	ba 84 1a 02 c0       	mov    edx,0xc0021a84
c0011e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e86:	89 10                	mov    DWORD PTR [eax],edx
c0011e88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e8c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0011e96:	c6 05 c4 42 02 c0 01 	mov    BYTE PTR ds:0xc00242c4,0x1
c0011e9d:	90                   	nop
c0011e9e:	83 c4 0c             	add    esp,0xc
c0011ea1:	c3                   	ret    

c0011ea2 <Keyboard::~Keyboard()>:
c0011ea2:	83 ec 0c             	sub    esp,0xc
c0011ea5:	ba 84 1a 02 c0       	mov    edx,0xc0021a84
c0011eaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011eae:	89 10                	mov    DWORD PTR [eax],edx
c0011eb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011eb4:	83 ec 0c             	sub    esp,0xc
c0011eb7:	50                   	push   eax
c0011eb8:	e8 57 e5 ff ff       	call   c0010414 <Device::~Device()>
c0011ebd:	83 c4 10             	add    esp,0x10
c0011ec0:	90                   	nop
c0011ec1:	83 c4 0c             	add    esp,0xc
c0011ec4:	c3                   	ret    
c0011ec5:	90                   	nop

c0011ec6 <Keyboard::~Keyboard()>:
c0011ec6:	83 ec 0c             	sub    esp,0xc
c0011ec9:	83 ec 0c             	sub    esp,0xc
c0011ecc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ed0:	e8 cd ff ff ff       	call   c0011ea2 <Keyboard::~Keyboard()>
c0011ed5:	83 c4 10             	add    esp,0x10
c0011ed8:	83 ec 08             	sub    esp,0x8
c0011edb:	68 5c 01 00 00       	push   0x15c
c0011ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ee4:	e8 4a d1 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0011ee9:	83 c4 10             	add    esp,0x10
c0011eec:	83 c4 0c             	add    esp,0xc
c0011eef:	c3                   	ret    

c0011ef0 <LogicalDisk::close(int, int, void*)>:
c0011ef0:	83 c8 ff             	or     eax,0xffffffff
c0011ef3:	c3                   	ret    

c0011ef4 <LogicalDisk::~LogicalDisk()>:
c0011ef4:	83 ec 0c             	sub    esp,0xc
c0011ef7:	ba 34 1b 02 c0       	mov    edx,0xc0021b34
c0011efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f00:	89 10                	mov    DWORD PTR [eax],edx
c0011f02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f06:	83 ec 0c             	sub    esp,0xc
c0011f09:	50                   	push   eax
c0011f0a:	e8 05 e5 ff ff       	call   c0010414 <Device::~Device()>
c0011f0f:	83 c4 10             	add    esp,0x10
c0011f12:	90                   	nop
c0011f13:	83 c4 0c             	add    esp,0xc
c0011f16:	c3                   	ret    
c0011f17:	90                   	nop

c0011f18 <LogicalDisk::~LogicalDisk()>:
c0011f18:	83 ec 0c             	sub    esp,0xc
c0011f1b:	83 ec 0c             	sub    esp,0xc
c0011f1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f22:	e8 cd ff ff ff       	call   c0011ef4 <LogicalDisk::~LogicalDisk()>
c0011f27:	83 c4 10             	add    esp,0x10
c0011f2a:	83 ec 08             	sub    esp,0x8
c0011f2d:	68 74 01 00 00       	push   0x174
c0011f32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011f36:	e8 f8 d0 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0011f3b:	83 c4 10             	add    esp,0x10
c0011f3e:	83 c4 0c             	add    esp,0xc
c0011f41:	c3                   	ret    

c0011f42 <LogicalDisk::open(int, int, void*)>:
c0011f42:	83 ec 18             	sub    esp,0x18
c0011f45:	68 b0 1a 02 c0       	push   0xc0021ab0
c0011f4a:	e8 9d 34 00 00       	call   c00153ec <Krnl::panic(char const*)>
c0011f4f:	83 c8 ff             	or     eax,0xffffffff
c0011f52:	83 c4 1c             	add    esp,0x1c
c0011f55:	c3                   	ret    

c0011f56 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0011f56:	53                   	push   ebx
c0011f57:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011f5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011f5f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011f63:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0011f69:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0011f6f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0011f75:	77 10                	ja     c0011f87 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0011f77:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0011f7d:	89 d3                	mov    ebx,edx
c0011f7f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0011f85:	72 05                	jb     c0011f8c <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0011f87:	83 c8 ff             	or     eax,0xffffffff
c0011f8a:	89 c2                	mov    edx,eax
c0011f8c:	5b                   	pop    ebx
c0011f8d:	c3                   	ret    

c0011f8e <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0011f8e:	56                   	push   esi
c0011f8f:	83 c8 ff             	or     eax,0xffffffff
c0011f92:	53                   	push   ebx
c0011f93:	89 c2                	mov    edx,eax
c0011f95:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011f99:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0011f9d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0011fa1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011fa7:	77 27                	ja     c0011fd0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011fa9:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0011faf:	89 d8                	mov    eax,ebx
c0011fb1:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0011fb7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fbc:	89 c2                	mov    edx,eax
c0011fbe:	73 10                	jae    c0011fd0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011fc0:	89 c8                	mov    eax,ecx
c0011fc2:	89 da                	mov    edx,ebx
c0011fc4:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0011fca:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0011fd0:	5b                   	pop    ebx
c0011fd1:	5e                   	pop    esi
c0011fd2:	c3                   	ret    
c0011fd3:	90                   	nop

c0011fd4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0011fd4:	83 ec 1c             	sub    esp,0x1c
c0011fd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011fdb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011fdf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011fe3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011fe7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011feb:	89 04 24             	mov    DWORD PTR [esp],eax
c0011fee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011ff2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ff6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011ffa:	83 ec 08             	sub    esp,0x8
c0011ffd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012001:	50                   	push   eax
c0012002:	e8 57 e7 ff ff       	call   c001075e <Device::Device(char const*)>
c0012007:	83 c4 10             	add    esp,0x10
c001200a:	ba 34 1b 02 c0       	mov    edx,0xc0021b34
c001200f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012013:	89 10                	mov    DWORD PTR [eax],edx
c0012015:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012019:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0012020:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012024:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001202b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001202f:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0012039:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001203d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012041:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012045:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001204b:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0012051:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012055:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0012058:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001205c:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0012062:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0012068:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001206c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012070:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0012076:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001207a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0012084:	90                   	nop
c0012085:	83 c4 1c             	add    esp,0x1c
c0012088:	c3                   	ret    
c0012089:	90                   	nop

c001208a <LogicalDisk::assignDriveLetter()>:
c001208a:	55                   	push   ebp
c001208b:	57                   	push   edi
c001208c:	56                   	push   esi
c001208d:	53                   	push   ebx
c001208e:	83 ec 14             	sub    esp,0x14
c0012091:	8b 3d 00 47 02 c0    	mov    edi,DWORD PTR ds:0xc0024700
c0012097:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001209b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001209f:	8b 3d 04 47 02 c0    	mov    edi,DWORD PTR ds:0xc0024704
c00120a5:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00120ab:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00120af:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00120b5:	3c 01                	cmp    al,0x1
c00120b7:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00120bb:	19 c0                	sbb    eax,eax
c00120bd:	83 e0 02             	and    eax,0x2
c00120c0:	83 c0 41             	add    eax,0x41
c00120c3:	0f be e8             	movsx  ebp,al
c00120c6:	3c 43                	cmp    al,0x43
c00120c8:	75 10                	jne    c00120da <LogicalDisk::assignDriveLetter()+0x50>
c00120ca:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00120d1:	75 5d                	jne    c0012130 <LogicalDisk::assignDriveLetter()+0xa6>
c00120d3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00120d8:	75 56                	jne    c0012130 <LogicalDisk::assignDriveLetter()+0xa6>
c00120da:	8d 75 bf             	lea    esi,[ebp-0x41]
c00120dd:	ba 01 00 00 00       	mov    edx,0x1
c00120e2:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00120e6:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00120ea:	d3 e2                	shl    edx,cl
c00120ec:	89 d7                	mov    edi,edx
c00120ee:	89 d6                	mov    esi,edx
c00120f0:	c1 ff 1f             	sar    edi,0x1f
c00120f3:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00120f7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00120fb:	21 f9                	and    ecx,edi
c00120fd:	09 d1                	or     ecx,edx
c00120ff:	75 2f                	jne    c0012130 <LogicalDisk::assignDriveLetter()+0xa6>
c0012101:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012105:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0012109:	09 f2                	or     edx,esi
c001210b:	89 15 00 47 02 c0    	mov    DWORD PTR ds:0xc0024700,edx
c0012111:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012115:	09 fa                	or     edx,edi
c0012117:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001211b:	89 15 04 47 02 c0    	mov    DWORD PTR ds:0xc0024704,edx
c0012121:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0012127:	89 1c bd 20 47 02 c0 	mov    DWORD PTR [edi*4-0x3ffdb8e0],ebx
c001212e:	eb 08                	jmp    c0012138 <LogicalDisk::assignDriveLetter()+0xae>
c0012130:	40                   	inc    eax
c0012131:	45                   	inc    ebp
c0012132:	3c 5b                	cmp    al,0x5b
c0012134:	75 90                	jne    c00120c6 <LogicalDisk::assignDriveLetter()+0x3c>
c0012136:	31 c0                	xor    eax,eax
c0012138:	83 c4 14             	add    esp,0x14
c001213b:	5b                   	pop    ebx
c001213c:	5e                   	pop    esi
c001213d:	5f                   	pop    edi
c001213e:	5d                   	pop    ebp
c001213f:	c3                   	ret    

c0012140 <LogicalDisk::mount()>:
c0012140:	56                   	push   esi
c0012141:	53                   	push   ebx
c0012142:	51                   	push   ecx
c0012143:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012147:	8b 1d 88 42 02 c0    	mov    ebx,DWORD PTR ds:0xc0024288
c001214d:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0012157:	85 db                	test   ebx,ebx
c0012159:	74 50                	je     c00121ab <LogicalDisk::mount()+0x6b>
c001215b:	e8 80 62 00 00       	call   c00183e0 <getIRQNestingLevel()>
c0012160:	52                   	push   edx
c0012161:	52                   	push   edx
c0012162:	50                   	push   eax
c0012163:	68 d4 1a 02 c0       	push   0xc0021ad4
c0012168:	e8 ec cf ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001216d:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0012174:	83 c4 0c             	add    esp,0xc
c0012177:	83 e8 41             	sub    eax,0x41
c001217a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001217c:	50                   	push   eax
c001217d:	56                   	push   esi
c001217e:	53                   	push   ebx
c001217f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012182:	83 c4 10             	add    esp,0x10
c0012185:	84 c0                	test   al,al
c0012187:	74 08                	je     c0012191 <LogicalDisk::mount()+0x51>
c0012189:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001218f:	eb 1c                	jmp    c00121ad <LogicalDisk::mount()+0x6d>
c0012191:	e8 4a 62 00 00       	call   c00183e0 <getIRQNestingLevel()>
c0012196:	51                   	push   ecx
c0012197:	51                   	push   ecx
c0012198:	50                   	push   eax
c0012199:	68 ef 1a 02 c0       	push   0xc0021aef
c001219e:	e8 b6 cf ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00121a3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00121a6:	83 c4 10             	add    esp,0x10
c00121a9:	eb ac                	jmp    c0012157 <LogicalDisk::mount()+0x17>
c00121ab:	31 c0                	xor    eax,eax
c00121ad:	5a                   	pop    edx
c00121ae:	5b                   	pop    ebx
c00121af:	5e                   	pop    esi
c00121b0:	c3                   	ret    
c00121b1:	90                   	nop

c00121b2 <LogicalDisk::unmount()>:
c00121b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121b6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00121c0:	c3                   	ret    
c00121c1:	90                   	nop

c00121c2 <LogicalDisk::unassignDriveLetter()>:
c00121c2:	57                   	push   edi
c00121c3:	56                   	push   esi
c00121c4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00121c8:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00121cf:	84 c9                	test   cl,cl
c00121d1:	75 0f                	jne    c00121e2 <LogicalDisk::unassignDriveLetter()+0x20>
c00121d3:	c7 44 24 0c 0a 1b 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021b0a
c00121db:	5e                   	pop    esi
c00121dc:	5f                   	pop    edi
c00121dd:	e9 0a 32 00 00       	jmp    c00153ec <Krnl::panic(char const*)>
c00121e2:	83 e9 41             	sub    ecx,0x41
c00121e5:	b8 01 00 00 00       	mov    eax,0x1
c00121ea:	d3 e0                	shl    eax,cl
c00121ec:	89 c7                	mov    edi,eax
c00121ee:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00121f5:	c1 ff 1f             	sar    edi,0x1f
c00121f8:	c7 04 8d 20 47 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdb8e0],0x0
c0012203:	89 fe                	mov    esi,edi
c0012205:	f7 d6                	not    esi
c0012207:	f7 d0                	not    eax
c0012209:	21 35 04 47 02 c0    	and    DWORD PTR ds:0xc0024704,esi
c001220f:	5e                   	pop    esi
c0012210:	21 05 00 47 02 c0    	and    DWORD PTR ds:0xc0024700,eax
c0012216:	5f                   	pop    edi
c0012217:	c3                   	ret    

c0012218 <LogicalDisk::read(unsigned long long, int, void*)>:
c0012218:	57                   	push   edi
c0012219:	56                   	push   esi
c001221a:	53                   	push   ebx
c001221b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001221f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012223:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012227:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001222b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012231:	77 41                	ja     c0012274 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0012233:	99                   	cdq    
c0012234:	01 c8                	add    eax,ecx
c0012236:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001223c:	11 da                	adc    edx,ebx
c001223e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0012244:	19 d7                	sbb    edi,edx
c0012246:	72 33                	jb     c001227b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0012248:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001224e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0012254:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012258:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001225c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0012262:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012268:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001226c:	5b                   	pop    ebx
c001226d:	5e                   	pop    esi
c001226e:	5f                   	pop    edi
c001226f:	e9 9a 09 00 00       	jmp    c0012c0e <VCache::read(unsigned long long, int, void*)>
c0012274:	b8 05 00 00 00       	mov    eax,0x5
c0012279:	eb 05                	jmp    c0012280 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001227b:	b8 07 00 00 00       	mov    eax,0x7
c0012280:	5b                   	pop    ebx
c0012281:	5e                   	pop    esi
c0012282:	5f                   	pop    edi
c0012283:	c3                   	ret    

c0012284 <LogicalDisk::write(unsigned long long, int, void*)>:
c0012284:	57                   	push   edi
c0012285:	56                   	push   esi
c0012286:	53                   	push   ebx
c0012287:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001228b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001228f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012293:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012297:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001229d:	77 41                	ja     c00122e0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001229f:	99                   	cdq    
c00122a0:	01 c8                	add    eax,ecx
c00122a2:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00122a8:	11 da                	adc    edx,ebx
c00122aa:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00122b0:	19 d7                	sbb    edi,edx
c00122b2:	72 33                	jb     c00122e7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00122b4:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00122ba:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00122c0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00122c4:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00122c8:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00122ce:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00122d4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00122d8:	5b                   	pop    ebx
c00122d9:	5e                   	pop    esi
c00122da:	5f                   	pop    edi
c00122db:	e9 4a 08 00 00       	jmp    c0012b2a <VCache::write(unsigned long long, int, void*)>
c00122e0:	b8 05 00 00 00       	mov    eax,0x5
c00122e5:	eb 05                	jmp    c00122ec <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00122e7:	b8 07 00 00 00       	mov    eax,0x7
c00122ec:	5b                   	pop    ebx
c00122ed:	5e                   	pop    esi
c00122ee:	5f                   	pop    edi
c00122ef:	c3                   	ret    

c00122f0 <Mouse::Mouse(char const*)>:
c00122f0:	83 ec 0c             	sub    esp,0xc
c00122f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122f7:	83 ec 08             	sub    esp,0x8
c00122fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00122fe:	50                   	push   eax
c00122ff:	e8 5a e4 ff ff       	call   c001075e <Device::Device(char const*)>
c0012304:	83 c4 10             	add    esp,0x10
c0012307:	ba 60 1b 02 c0       	mov    edx,0xc0021b60
c001230c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012310:	89 10                	mov    DWORD PTR [eax],edx
c0012312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012316:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0012320:	90                   	nop
c0012321:	83 c4 0c             	add    esp,0xc
c0012324:	c3                   	ret    
c0012325:	90                   	nop

c0012326 <Mouse::~Mouse()>:
c0012326:	83 ec 0c             	sub    esp,0xc
c0012329:	ba 60 1b 02 c0       	mov    edx,0xc0021b60
c001232e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012332:	89 10                	mov    DWORD PTR [eax],edx
c0012334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012338:	83 ec 0c             	sub    esp,0xc
c001233b:	50                   	push   eax
c001233c:	e8 d3 e0 ff ff       	call   c0010414 <Device::~Device()>
c0012341:	83 c4 10             	add    esp,0x10
c0012344:	90                   	nop
c0012345:	83 c4 0c             	add    esp,0xc
c0012348:	c3                   	ret    
c0012349:	90                   	nop

c001234a <Mouse::~Mouse()>:
c001234a:	83 ec 0c             	sub    esp,0xc
c001234d:	83 ec 0c             	sub    esp,0xc
c0012350:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012354:	e8 cd ff ff ff       	call   c0012326 <Mouse::~Mouse()>
c0012359:	83 c4 10             	add    esp,0x10
c001235c:	83 ec 08             	sub    esp,0x8
c001235f:	68 58 01 00 00       	push   0x158
c0012364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012368:	e8 c6 cc ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001236d:	83 c4 10             	add    esp,0x10
c0012370:	83 c4 0c             	add    esp,0xc
c0012373:	c3                   	ret    

c0012374 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0012374:	55                   	push   ebp
c0012375:	57                   	push   edi
c0012376:	56                   	push   esi
c0012377:	53                   	push   ebx
c0012378:	81 ec 28 01 00 00    	sub    esp,0x128
c001237e:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0012385:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001238c:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012393:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001239a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001239e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00123a2:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00123a9:	e8 a2 e4 ff ff       	call   c0010850 <Device::getName()>
c00123ae:	5a                   	pop    edx
c00123af:	59                   	pop    ecx
c00123b0:	50                   	push   eax
c00123b1:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00123b5:	55                   	push   ebp
c00123b6:	e8 ec e2 fe ff       	call   c00006a7 <strcpy>
c00123bb:	5b                   	pop    ebx
c00123bc:	58                   	pop    eax
c00123bd:	68 84 1b 02 c0       	push   0xc0021b84
c00123c2:	55                   	push   ebp
c00123c3:	e8 96 e3 fe ff       	call   c000075e <strcat>
c00123c8:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00123cf:	e8 50 cc ff ff       	call   c000f024 <operator new(unsigned long)>
c00123d4:	83 c4 0c             	add    esp,0xc
c00123d7:	89 c3                	mov    ebx,eax
c00123d9:	57                   	push   edi
c00123da:	56                   	push   esi
c00123db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00123df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00123e3:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00123ea:	55                   	push   ebp
c00123eb:	50                   	push   eax
c00123ec:	e8 e3 fb ff ff       	call   c0011fd4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00123f1:	83 c4 14             	add    esp,0x14
c00123f4:	53                   	push   ebx
c00123f5:	e8 90 fc ff ff       	call   c001208a <LogicalDisk::assignDriveLetter()>
c00123fa:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00123fd:	e8 3e fd ff ff       	call   c0012140 <LogicalDisk::mount()>
c0012402:	58                   	pop    eax
c0012403:	5a                   	pop    edx
c0012404:	53                   	push   ebx
c0012405:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001240c:	e8 5d e1 ff ff       	call   c001056e <Device::addChild(Device*)>
c0012411:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012417:	5b                   	pop    ebx
c0012418:	5e                   	pop    esi
c0012419:	5f                   	pop    edi
c001241a:	5d                   	pop    ebp
c001241b:	c3                   	ret    

c001241c <createPartitionsForDisk(PhysicalDisk*)>:
c001241c:	55                   	push   ebp
c001241d:	57                   	push   edi
c001241e:	56                   	push   esi
c001241f:	53                   	push   ebx
c0012420:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0012426:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c001242d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0012433:	3d 00 02 00 00       	cmp    eax,0x200
c0012438:	74 27                	je     c0012461 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c001243a:	83 ec 10             	sub    esp,0x10
c001243d:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0012443:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0012449:	99                   	cdq    
c001244a:	52                   	push   edx
c001244b:	0f a4 f7 0a          	shld   edi,esi,0xa
c001244f:	50                   	push   eax
c0012450:	89 fd                	mov    ebp,edi
c0012452:	c1 e6 0a             	shl    esi,0xa
c0012455:	55                   	push   ebp
c0012456:	56                   	push   esi
c0012457:	e8 50 ca 00 00       	call   c001eeac <__udivdi3>
c001245c:	e9 b1 00 00 00       	jmp    c0012512 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012461:	83 ec 0c             	sub    esp,0xc
c0012464:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012466:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001246a:	56                   	push   esi
c001246b:	6a 01                	push   0x1
c001246d:	6a 00                	push   0x0
c001246f:	6a 00                	push   0x0
c0012471:	53                   	push   ebx
c0012472:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012475:	83 c4 20             	add    esp,0x20
c0012478:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0012480:	75 0a                	jne    c001248c <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0012482:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001248a:	74 2c                	je     c00124b8 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001248c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012492:	83 ec 10             	sub    esp,0x10
c0012495:	89 f7                	mov    edi,esi
c0012497:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001249d:	c1 ff 1f             	sar    edi,0x1f
c00124a0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00124a6:	57                   	push   edi
c00124a7:	0f a4 c2 0a          	shld   edx,eax,0xa
c00124ab:	c1 e0 0a             	shl    eax,0xa
c00124ae:	56                   	push   esi
c00124af:	52                   	push   edx
c00124b0:	50                   	push   eax
c00124b1:	e8 f6 c9 00 00       	call   c001eeac <__udivdi3>
c00124b6:	eb 5a                	jmp    c0012512 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00124b8:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c00124bf:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c00124c6:	83 e0 7f             	and    eax,0x7f
c00124c9:	83 e1 7f             	and    ecx,0x7f
c00124cc:	01 c1                	add    ecx,eax
c00124ce:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c00124d5:	83 e0 7f             	and    eax,0x7f
c00124d8:	01 c1                	add    ecx,eax
c00124da:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00124e1:	83 e0 7f             	and    eax,0x7f
c00124e4:	00 c1                	add    cl,al
c00124e6:	74 41                	je     c0012529 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00124e8:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00124ee:	83 ec 10             	sub    esp,0x10
c00124f1:	89 f7                	mov    edi,esi
c00124f3:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00124f9:	c1 ff 1f             	sar    edi,0x1f
c00124fc:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012502:	57                   	push   edi
c0012503:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012507:	c1 e0 0a             	shl    eax,0xa
c001250a:	56                   	push   esi
c001250b:	52                   	push   edx
c001250c:	50                   	push   eax
c001250d:	e8 9a c9 00 00       	call   c001eeac <__udivdi3>
c0012512:	83 c4 14             	add    esp,0x14
c0012515:	52                   	push   edx
c0012516:	50                   	push   eax
c0012517:	6a 00                	push   0x0
c0012519:	6a 00                	push   0x0
c001251b:	53                   	push   ebx
c001251c:	e8 53 fe ff ff       	call   c0012374 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012521:	83 c4 20             	add    esp,0x20
c0012524:	e9 79 01 00 00       	jmp    c00126a2 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0012529:	89 f0                	mov    eax,esi
c001252b:	31 f6                	xor    esi,esi
c001252d:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0012534:	75 02                	jne    c0012538 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0012536:	89 f1                	mov    ecx,esi
c0012538:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c001253f:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0012546:	c1 e2 08             	shl    edx,0x8
c0012549:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0012551:	c1 e7 10             	shl    edi,0x10
c0012554:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001255c:	09 fa                	or     edx,edi
c001255e:	83 c0 10             	add    eax,0x10
c0012561:	0f b6 b8 b6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b6]
c0012568:	09 fa                	or     edx,edi
c001256a:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0012571:	c1 e7 18             	shl    edi,0x18
c0012574:	09 fa                	or     edx,edi
c0012576:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c001257a:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0012581:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0012588:	c1 e7 10             	shl    edi,0x10
c001258b:	c1 e2 08             	shl    edx,0x8
c001258e:	09 fa                	or     edx,edi
c0012590:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0012597:	09 fa                	or     edx,edi
c0012599:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00125a0:	c1 e7 18             	shl    edi,0x18
c00125a3:	09 fa                	or     edx,edi
c00125a5:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c00125a9:	46                   	inc    esi
c00125aa:	83 fe 04             	cmp    esi,0x4
c00125ad:	0f 85 7a ff ff ff    	jne    c001252d <createPartitionsForDisk(PhysicalDisk*)+0x111>
c00125b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125b7:	83 f0 01             	xor    eax,0x1
c00125ba:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00125be:	75 57                	jne    c0012617 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00125c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00125c4:	83 f0 01             	xor    eax,0x1
c00125c7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00125cb:	75 4a                	jne    c0012617 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c00125cd:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00125d3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00125d7:	89 f7                	mov    edi,esi
c00125d9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00125e1:	c1 ff 1f             	sar    edi,0x1f
c00125e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00125ec:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00125f2:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00125f8:	57                   	push   edi
c00125f9:	56                   	push   esi
c00125fa:	0f a4 c2 0a          	shld   edx,eax,0xa
c00125fe:	c1 e0 0a             	shl    eax,0xa
c0012601:	52                   	push   edx
c0012602:	50                   	push   eax
c0012603:	e8 a4 c8 00 00       	call   c001eeac <__udivdi3>
c0012608:	83 c4 10             	add    esp,0x10
c001260b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001260f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012613:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0012617:	84 c9                	test   cl,cl
c0012619:	74 53                	je     c001266e <createPartitionsForDisk(PhysicalDisk*)+0x252>
c001261b:	0f b6 c9             	movzx  ecx,cl
c001261e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012622:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012626:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001262a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001262e:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0012632:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0012636:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001263a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001263e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012642:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012646:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001264a:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001264e:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0012652:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0012656:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001265a:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001265e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012662:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012666:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001266a:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001266e:	31 ed                	xor    ebp,ebp
c0012670:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0012674:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0012678:	89 f8                	mov    eax,edi
c001267a:	09 f0                	or     eax,esi
c001267c:	74 1e                	je     c001269c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001267e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0012682:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0012686:	89 d1                	mov    ecx,edx
c0012688:	09 c1                	or     ecx,eax
c001268a:	74 10                	je     c001269c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001268c:	83 ec 0c             	sub    esp,0xc
c001268f:	57                   	push   edi
c0012690:	56                   	push   esi
c0012691:	52                   	push   edx
c0012692:	50                   	push   eax
c0012693:	53                   	push   ebx
c0012694:	e8 db fc ff ff       	call   c0012374 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012699:	83 c4 20             	add    esp,0x20
c001269c:	45                   	inc    ebp
c001269d:	83 fd 04             	cmp    ebp,0x4
c00126a0:	75 ce                	jne    c0012670 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00126a2:	81 c4 5c 02 00 00    	add    esp,0x25c
c00126a8:	5b                   	pop    ebx
c00126a9:	5e                   	pop    esi
c00126aa:	5f                   	pop    edi
c00126ab:	5d                   	pop    ebp
c00126ac:	c3                   	ret    
c00126ad:	90                   	nop

c00126ae <Timer::Timer(char const*)>:
c00126ae:	83 ec 0c             	sub    esp,0xc
c00126b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126b5:	83 ec 08             	sub    esp,0x8
c00126b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00126bc:	50                   	push   eax
c00126bd:	e8 9c e0 ff ff       	call   c001075e <Device::Device(char const*)>
c00126c2:	83 c4 10             	add    esp,0x10
c00126c5:	ba 98 1b 02 c0       	mov    edx,0xc0021b98
c00126ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126ce:	89 10                	mov    DWORD PTR [eax],edx
c00126d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126d4:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00126de:	90                   	nop
c00126df:	83 c4 0c             	add    esp,0xc
c00126e2:	c3                   	ret    
c00126e3:	90                   	nop

c00126e4 <Timer::~Timer()>:
c00126e4:	83 ec 0c             	sub    esp,0xc
c00126e7:	ba 98 1b 02 c0       	mov    edx,0xc0021b98
c00126ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126f0:	89 10                	mov    DWORD PTR [eax],edx
c00126f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126f6:	83 ec 0c             	sub    esp,0xc
c00126f9:	50                   	push   eax
c00126fa:	e8 15 dd ff ff       	call   c0010414 <Device::~Device()>
c00126ff:	83 c4 10             	add    esp,0x10
c0012702:	90                   	nop
c0012703:	83 c4 0c             	add    esp,0xc
c0012706:	c3                   	ret    
c0012707:	90                   	nop

c0012708 <Timer::~Timer()>:
c0012708:	83 ec 0c             	sub    esp,0xc
c001270b:	83 ec 0c             	sub    esp,0xc
c001270e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012712:	e8 cd ff ff ff       	call   c00126e4 <Timer::~Timer()>
c0012717:	83 c4 10             	add    esp,0x10
c001271a:	83 ec 08             	sub    esp,0x8
c001271d:	68 5c 01 00 00       	push   0x15c
c0012722:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012726:	e8 08 c9 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001272b:	83 c4 10             	add    esp,0x10
c001272e:	83 c4 0c             	add    esp,0xc
c0012731:	c3                   	ret    

c0012732 <Timer::read()>:
c0012732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012736:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001273c:	c3                   	ret    

c001273d <timerHandler(unsigned long long)>:
c001273d:	55                   	push   ebp
c001273e:	57                   	push   edi
c001273f:	56                   	push   esi
c0012740:	53                   	push   ebx
c0012741:	83 ec 0c             	sub    esp,0xc
c0012744:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012748:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001274c:	01 35 90 47 02 c0    	add    DWORD PTR ds:0xc0024790,esi
c0012752:	11 3d 94 47 02 c0    	adc    DWORD PTR ds:0xc0024794,edi
c0012758:	80 3d 2d 41 02 c0 00 	cmp    BYTE PTR ds:0xc002412d,0x0
c001275f:	0f 84 07 01 00 00    	je     c001286c <timerHandler(unsigned long long)+0x12f>
c0012765:	e8 b2 5c 00 00       	call   c001841c <lockStuff()>
c001276a:	83 ec 0c             	sub    esp,0xc
c001276d:	68 5c 55 02 c0       	push   0xc002555c
c0012772:	e8 09 ce 00 00       	call   c001f580 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012777:	c7 04 24 5c 55 02 c0 	mov    DWORD PTR [esp],0xc002555c
c001277e:	89 c3                	mov    ebx,eax
c0012780:	e8 03 ce 00 00       	call   c001f588 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012785:	83 c4 10             	add    esp,0x10
c0012788:	84 c0                	test   al,al
c001278a:	74 60                	je     c00127ec <timerHandler(unsigned long long)+0xaf>
c001278c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012792:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0012795:	85 c0                	test   eax,eax
c0012797:	0f 85 91 00 00 00    	jne    c001282e <timerHandler(unsigned long long)+0xf1>
c001279d:	e9 be 00 00 00       	jmp    c0012860 <timerHandler(unsigned long long)+0x123>
c00127a2:	83 ec 0c             	sub    esp,0xc
c00127a5:	55                   	push   ebp
c00127a6:	e8 6e 62 00 00       	call   c0018a19 <unblockTask(ThreadControlBlock*)>
c00127ab:	83 c4 10             	add    esp,0x10
c00127ae:	39 eb                	cmp    ebx,ebp
c00127b0:	75 12                	jne    c00127c4 <timerHandler(unsigned long long)+0x87>
c00127b2:	83 ec 0c             	sub    esp,0xc
c00127b5:	68 5c 55 02 c0       	push   0xc002555c
c00127ba:	e8 c1 cd 00 00       	call   c001f580 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00127bf:	89 c3                	mov    ebx,eax
c00127c1:	83 c4 10             	add    esp,0x10
c00127c4:	83 ec 0c             	sub    esp,0xc
c00127c7:	68 5c 55 02 c0       	push   0xc002555c
c00127cc:	e8 b7 cd 00 00       	call   c001f588 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00127d1:	83 c4 10             	add    esp,0x10
c00127d4:	84 c0                	test   al,al
c00127d6:	75 b4                	jne    c001278c <timerHandler(unsigned long long)+0x4f>
c00127d8:	83 ec 0c             	sub    esp,0xc
c00127db:	68 5c 55 02 c0       	push   0xc002555c
c00127e0:	e8 9b cd 00 00       	call   c001f580 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00127e5:	83 c4 10             	add    esp,0x10
c00127e8:	39 d8                	cmp    eax,ebx
c00127ea:	74 a0                	je     c001278c <timerHandler(unsigned long long)+0x4f>
c00127ec:	83 ec 0c             	sub    esp,0xc
c00127ef:	68 5c 55 02 c0       	push   0xc002555c
c00127f4:	e8 87 cd 00 00       	call   c001f580 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00127f9:	89 c5                	mov    ebp,eax
c00127fb:	c7 04 24 5c 55 02 c0 	mov    DWORD PTR [esp],0xc002555c
c0012802:	e8 9d cd 00 00       	call   c001f5a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012807:	83 c4 10             	add    esp,0x10
c001280a:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c001280d:	a1 94 47 02 c0       	mov    eax,ds:0xc0024794
c0012812:	39 15 90 47 02 c0    	cmp    DWORD PTR ds:0xc0024790,edx
c0012818:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c001281b:	19 c8                	sbb    eax,ecx
c001281d:	73 83                	jae    c00127a2 <timerHandler(unsigned long long)+0x65>
c001281f:	50                   	push   eax
c0012820:	50                   	push   eax
c0012821:	55                   	push   ebp
c0012822:	68 5c 55 02 c0       	push   0xc002555c
c0012827:	e8 26 ce 00 00       	call   c001f652 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001282c:	eb 93                	jmp    c00127c1 <timerHandler(unsigned long long)+0x84>
c001282e:	80 3d 2c 41 02 c0 00 	cmp    BYTE PTR ds:0xc002412c,0x0
c0012835:	74 29                	je     c0012860 <timerHandler(unsigned long long)+0x123>
c0012837:	39 c6                	cmp    esi,eax
c0012839:	bb 00 00 00 00       	mov    ebx,0x0
c001283e:	19 df                	sbb    edi,ebx
c0012840:	72 19                	jb     c001285b <timerHandler(unsigned long long)+0x11e>
c0012842:	e8 ae 5b 00 00       	call   c00183f5 <lockScheduler()>
c0012847:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001284c:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c001284f:	e8 ea 5e 00 00       	call   c001873e <schedule()>
c0012854:	e8 9e 5b 00 00       	call   c00183f7 <unlockScheduler()>
c0012859:	eb 05                	jmp    c0012860 <timerHandler(unsigned long long)+0x123>
c001285b:	29 f0                	sub    eax,esi
c001285d:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0012860:	83 c4 0c             	add    esp,0xc
c0012863:	5b                   	pop    ebx
c0012864:	5e                   	pop    esi
c0012865:	5f                   	pop    edi
c0012866:	5d                   	pop    ebp
c0012867:	e9 57 5f 00 00       	jmp    c00187c3 <unlockStuff()>
c001286c:	83 c4 0c             	add    esp,0xc
c001286f:	5b                   	pop    ebx
c0012870:	5e                   	pop    esi
c0012871:	5f                   	pop    edi
c0012872:	5d                   	pop    ebp
c0012873:	c3                   	ret    

c0012874 <setupTimer(int)>:
c0012874:	57                   	push   edi
c0012875:	56                   	push   esi
c0012876:	53                   	push   ebx
c0012877:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001287b:	e8 fd 19 00 00       	call   c001427d <getCPUNumber()>
c0012880:	85 c0                	test   eax,eax
c0012882:	74 32                	je     c00128b6 <setupTimer(int)+0x42>
c0012884:	83 ec 0c             	sub    esp,0xc
c0012887:	68 60 01 00 00       	push   0x160
c001288c:	e8 93 c7 ff ff       	call   c000f024 <operator new(unsigned long)>
c0012891:	89 04 24             	mov    DWORD PTR [esp],eax
c0012894:	89 c3                	mov    ebx,eax
c0012896:	e8 a7 c0 00 00       	call   c001e942 <APICTimer::APICTimer()>
c001289b:	6a 00                	push   0x0
c001289d:	6a 00                	push   0x0
c001289f:	56                   	push   esi
c00128a0:	53                   	push   ebx
c00128a1:	e8 96 bf 00 00       	call   c001e83c <APICTimer::open(int, int, void*)>
c00128a6:	83 c4 20             	add    esp,0x20
c00128a9:	e8 d2 19 00 00       	call   c0014280 <thisCPU()>
c00128ae:	56                   	push   esi
c00128af:	56                   	push   esi
c00128b0:	53                   	push   ebx
c00128b1:	e9 96 00 00 00       	jmp    c001294c <setupTimer(int)+0xd8>
c00128b6:	e8 c5 19 00 00       	call   c0014280 <thisCPU()>
c00128bb:	83 ec 0c             	sub    esp,0xc
c00128be:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c00128c4:	e8 87 df ff ff       	call   c0010850 <Device::getName()>
c00128c9:	83 c4 10             	add    esp,0x10
c00128cc:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00128cf:	0f 85 87 00 00 00    	jne    c001295c <setupTimer(int)+0xe8>
c00128d5:	a1 28 41 02 c0       	mov    eax,ds:0xc0024128
c00128da:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00128e1:	74 79                	je     c001295c <setupTimer(int)+0xe8>
c00128e3:	83 ec 0c             	sub    esp,0xc
c00128e6:	68 5c 01 00 00       	push   0x15c
c00128eb:	e8 34 c7 ff ff       	call   c000f024 <operator new(unsigned long)>
c00128f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00128f3:	89 c3                	mov    ebx,eax
c00128f5:	e8 a4 c1 00 00       	call   c001ea9e <PIT::PIT()>
c00128fa:	59                   	pop    ecx
c00128fb:	5f                   	pop    edi
c00128fc:	53                   	push   ebx
c00128fd:	ff 35 28 41 02 c0    	push   DWORD PTR ds:0xc0024128
c0012903:	e8 66 dc ff ff       	call   c001056e <Device::addChild(Device*)>
c0012908:	8b 03                	mov    eax,DWORD PTR [ebx]
c001290a:	6a 00                	push   0x0
c001290c:	6a 00                	push   0x0
c001290e:	56                   	push   esi
c001290f:	53                   	push   ebx
c0012910:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012913:	83 c4 14             	add    esp,0x14
c0012916:	68 60 01 00 00       	push   0x160
c001291b:	e8 04 c7 ff ff       	call   c000f024 <operator new(unsigned long)>
c0012920:	89 04 24             	mov    DWORD PTR [esp],eax
c0012923:	89 c7                	mov    edi,eax
c0012925:	e8 18 c0 00 00       	call   c001e942 <APICTimer::APICTimer()>
c001292a:	6a 00                	push   0x0
c001292c:	6a 00                	push   0x0
c001292e:	56                   	push   esi
c001292f:	57                   	push   edi
c0012930:	e8 07 bf 00 00       	call   c001e83c <APICTimer::open(int, int, void*)>
c0012935:	83 c4 20             	add    esp,0x20
c0012938:	8b 03                	mov    eax,DWORD PTR [ebx]
c001293a:	6a 00                	push   0x0
c001293c:	6a 00                	push   0x0
c001293e:	6a 00                	push   0x0
c0012940:	53                   	push   ebx
c0012941:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012944:	e8 37 19 00 00       	call   c0014280 <thisCPU()>
c0012949:	5a                   	pop    edx
c001294a:	59                   	pop    ecx
c001294b:	57                   	push   edi
c001294c:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012952:	e8 17 dc ff ff       	call   c001056e <Device::addChild(Device*)>
c0012957:	83 c4 10             	add    esp,0x10
c001295a:	eb 33                	jmp    c001298f <setupTimer(int)+0x11b>
c001295c:	83 ec 0c             	sub    esp,0xc
c001295f:	68 5c 01 00 00       	push   0x15c
c0012964:	e8 bb c6 ff ff       	call   c000f024 <operator new(unsigned long)>
c0012969:	89 04 24             	mov    DWORD PTR [esp],eax
c001296c:	89 c3                	mov    ebx,eax
c001296e:	e8 2b c1 00 00       	call   c001ea9e <PIT::PIT()>
c0012973:	58                   	pop    eax
c0012974:	5a                   	pop    edx
c0012975:	53                   	push   ebx
c0012976:	ff 35 28 41 02 c0    	push   DWORD PTR ds:0xc0024128
c001297c:	e8 ed db ff ff       	call   c001056e <Device::addChild(Device*)>
c0012981:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012983:	6a 00                	push   0x0
c0012985:	6a 00                	push   0x0
c0012987:	56                   	push   esi
c0012988:	53                   	push   ebx
c0012989:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001298c:	83 c4 20             	add    esp,0x20
c001298f:	89 d8                	mov    eax,ebx
c0012991:	5b                   	pop    ebx
c0012992:	5e                   	pop    esi
c0012993:	5f                   	pop    edi
c0012994:	c3                   	ret    
c0012995:	90                   	nop

c0012996 <VCache::VCache(PhysicalDisk*)>:
c0012996:	53                   	push   ebx
c0012997:	83 ec 08             	sub    esp,0x8
c001299a:	ba c8 1b 02 c0       	mov    edx,0xc0021bc8
c001299f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129a3:	89 10                	mov    DWORD PTR [eax],edx
c00129a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129a9:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c00129b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129b4:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c00129bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129bf:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c00129c6:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00129cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129d1:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00129d8:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00129df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129e3:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00129ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129ee:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00129f2:	83 ec 0c             	sub    esp,0xc
c00129f5:	6a 10                	push   0x10
c00129f7:	e8 28 c6 ff ff       	call   c000f024 <operator new(unsigned long)>
c00129fc:	83 c4 10             	add    esp,0x10
c00129ff:	89 c3                	mov    ebx,eax
c0012a01:	83 ec 0c             	sub    esp,0xc
c0012a04:	53                   	push   ebx
c0012a05:	e8 0e 5b 00 00       	call   c0018518 <Mutex::Mutex()>
c0012a0a:	83 c4 10             	add    esp,0x10
c0012a0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a11:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0012a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a18:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012a1c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a23:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0012a2a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012a2e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0012a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a38:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012a3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012a3f:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0012a45:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a4b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0012a4f:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0012a52:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0012a55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a59:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0012a5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012a61:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012a67:	c1 e0 06             	shl    eax,0x6
c0012a6a:	83 ec 0c             	sub    esp,0xc
c0012a6d:	50                   	push   eax
c0012a6e:	e8 b4 94 ff ff       	call   c000bf27 <malloc>
c0012a73:	83 c4 10             	add    esp,0x10
c0012a76:	89 c2                	mov    edx,eax
c0012a78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a7c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0012a7f:	90                   	nop
c0012a80:	83 c4 08             	add    esp,0x8
c0012a83:	5b                   	pop    ebx
c0012a84:	c3                   	ret    
c0012a85:	90                   	nop

c0012a86 <VCache::writeWriteBuffer()>:
c0012a86:	53                   	push   ebx
c0012a87:	83 ec 14             	sub    esp,0x14
c0012a8a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012a8e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012a91:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a93:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012a96:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012a99:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0012a9c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0012a9f:	50                   	push   eax
c0012aa0:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0012aa3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0012aaa:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0012ab1:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0012ab5:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0012abc:	83 c4 28             	add    esp,0x28
c0012abf:	5b                   	pop    ebx
c0012ac0:	c3                   	ret    
c0012ac1:	90                   	nop

c0012ac2 <VCache::~VCache()>:
c0012ac2:	83 ec 0c             	sub    esp,0xc
c0012ac5:	ba c8 1b 02 c0       	mov    edx,0xc0021bc8
c0012aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ace:	89 10                	mov    DWORD PTR [eax],edx
c0012ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ad4:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0012ad7:	84 c0                	test   al,al
c0012ad9:	74 0f                	je     c0012aea <VCache::~VCache()+0x28>
c0012adb:	83 ec 0c             	sub    esp,0xc
c0012ade:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ae2:	e8 9f ff ff ff       	call   c0012a86 <VCache::writeWriteBuffer()>
c0012ae7:	83 c4 10             	add    esp,0x10
c0012aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012aee:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0012af1:	83 ec 0c             	sub    esp,0xc
c0012af4:	50                   	push   eax
c0012af5:	e8 3d 94 ff ff       	call   c000bf37 <free>
c0012afa:	83 c4 10             	add    esp,0x10
c0012afd:	90                   	nop
c0012afe:	83 c4 0c             	add    esp,0xc
c0012b01:	c3                   	ret    

c0012b02 <VCache::~VCache()>:
c0012b02:	83 ec 0c             	sub    esp,0xc
c0012b05:	83 ec 0c             	sub    esp,0xc
c0012b08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b0c:	e8 b1 ff ff ff       	call   c0012ac2 <VCache::~VCache()>
c0012b11:	83 c4 10             	add    esp,0x10
c0012b14:	83 ec 08             	sub    esp,0x8
c0012b17:	6a 30                	push   0x30
c0012b19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b1d:	e8 11 c5 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0012b22:	83 c4 10             	add    esp,0x10
c0012b25:	83 c4 0c             	add    esp,0xc
c0012b28:	c3                   	ret    
c0012b29:	90                   	nop

c0012b2a <VCache::write(unsigned long long, int, void*)>:
c0012b2a:	55                   	push   ebp
c0012b2b:	57                   	push   edi
c0012b2c:	56                   	push   esi
c0012b2d:	53                   	push   ebx
c0012b2e:	83 ec 28             	sub    esp,0x28
c0012b31:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012b35:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0012b39:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012b3d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0012b41:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012b44:	e8 3d 5e 00 00       	call   c0018986 <Semaphore::acquire()>
c0012b49:	83 c4 10             	add    esp,0x10
c0012b4c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0012b50:	74 66                	je     c0012bb8 <VCache::write(unsigned long long, int, void*)+0x8e>
c0012b52:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012b55:	99                   	cdq    
c0012b56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012b5a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0012b5d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0012b60:	89 c1                	mov    ecx,eax
c0012b62:	31 f1                	xor    ecx,esi
c0012b64:	89 d0                	mov    eax,edx
c0012b66:	31 f8                	xor    eax,edi
c0012b68:	89 ca                	mov    edx,ecx
c0012b6a:	09 c2                	or     edx,eax
c0012b6c:	75 3e                	jne    c0012bac <VCache::write(unsigned long long, int, void*)+0x82>
c0012b6e:	83 fd 01             	cmp    ebp,0x1
c0012b71:	75 39                	jne    c0012bac <VCache::write(unsigned long long, int, void*)+0x82>
c0012b73:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012b76:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012b7c:	51                   	push   ecx
c0012b7d:	50                   	push   eax
c0012b7e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012b82:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012b86:	0f af c8             	imul   ecx,eax
c0012b89:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0012b8c:	51                   	push   ecx
c0012b8d:	e8 40 da fe ff       	call   c00005d2 <memcpy>
c0012b92:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012b95:	83 c4 10             	add    esp,0x10
c0012b98:	40                   	inc    eax
c0012b99:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0012b9c:	83 f8 40             	cmp    eax,0x40
c0012b9f:	75 57                	jne    c0012bf8 <VCache::write(unsigned long long, int, void*)+0xce>
c0012ba1:	83 ec 0c             	sub    esp,0xc
c0012ba4:	53                   	push   ebx
c0012ba5:	e8 dc fe ff ff       	call   c0012a86 <VCache::writeWriteBuffer()>
c0012baa:	eb 34                	jmp    c0012be0 <VCache::write(unsigned long long, int, void*)+0xb6>
c0012bac:	83 ec 0c             	sub    esp,0xc
c0012baf:	53                   	push   ebx
c0012bb0:	e8 d1 fe ff ff       	call   c0012a86 <VCache::writeWriteBuffer()>
c0012bb5:	83 c4 10             	add    esp,0x10
c0012bb8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012bbb:	83 fd 3f             	cmp    ebp,0x3f
c0012bbe:	7f 25                	jg     c0012be5 <VCache::write(unsigned long long, int, void*)+0xbb>
c0012bc0:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0012bc3:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0012bc6:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0012bc9:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0012bcd:	52                   	push   edx
c0012bce:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0012bd4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012bd8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012bdb:	e8 f2 d9 fe ff       	call   c00005d2 <memcpy>
c0012be0:	83 c4 10             	add    esp,0x10
c0012be3:	eb 13                	jmp    c0012bf8 <VCache::write(unsigned long long, int, void*)+0xce>
c0012be5:	83 ec 0c             	sub    esp,0xc
c0012be8:	8b 10                	mov    edx,DWORD PTR [eax]
c0012bea:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012bee:	55                   	push   ebp
c0012bef:	57                   	push   edi
c0012bf0:	56                   	push   esi
c0012bf1:	50                   	push   eax
c0012bf2:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0012bf5:	83 c4 20             	add    esp,0x20
c0012bf8:	83 ec 0c             	sub    esp,0xc
c0012bfb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012bfe:	e8 0f 63 00 00       	call   c0018f12 <Semaphore::release()>
c0012c03:	83 c4 2c             	add    esp,0x2c
c0012c06:	5b                   	pop    ebx
c0012c07:	31 c0                	xor    eax,eax
c0012c09:	5e                   	pop    esi
c0012c0a:	5f                   	pop    edi
c0012c0b:	5d                   	pop    ebp
c0012c0c:	c3                   	ret    
c0012c0d:	90                   	nop

c0012c0e <VCache::read(unsigned long long, int, void*)>:
c0012c0e:	57                   	push   edi
c0012c0f:	56                   	push   esi
c0012c10:	53                   	push   ebx
c0012c11:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012c15:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012c19:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012c1d:	83 ec 0c             	sub    esp,0xc
c0012c20:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012c23:	e8 5e 5d 00 00       	call   c0018986 <Semaphore::acquire()>
c0012c28:	83 c4 10             	add    esp,0x10
c0012c2b:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0012c2f:	74 0c                	je     c0012c3d <VCache::read(unsigned long long, int, void*)+0x2f>
c0012c31:	83 ec 0c             	sub    esp,0xc
c0012c34:	53                   	push   ebx
c0012c35:	e8 4c fe ff ff       	call   c0012a86 <VCache::writeWriteBuffer()>
c0012c3a:	83 c4 10             	add    esp,0x10
c0012c3d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012c40:	83 ec 0c             	sub    esp,0xc
c0012c43:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c45:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012c4d:	57                   	push   edi
c0012c4e:	56                   	push   esi
c0012c4f:	50                   	push   eax
c0012c50:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012c53:	83 c4 14             	add    esp,0x14
c0012c56:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012c59:	e8 b4 62 00 00       	call   c0018f12 <Semaphore::release()>
c0012c5e:	83 c4 10             	add    esp,0x10
c0012c61:	5b                   	pop    ebx
c0012c62:	31 c0                	xor    eax,eax
c0012c64:	5e                   	pop    esi
c0012c65:	5f                   	pop    edi
c0012c66:	c3                   	ret    
c0012c67:	90                   	nop

c0012c68 <Video::putrect(int, int, int, int, unsigned int)>:
c0012c68:	55                   	push   ebp
c0012c69:	57                   	push   edi
c0012c6a:	56                   	push   esi
c0012c6b:	53                   	push   ebx
c0012c6c:	83 ec 1c             	sub    esp,0x1c
c0012c6f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012c73:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012c77:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012c7b:	01 e8                	add    eax,ebp
c0012c7d:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0012c81:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012c85:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012c89:	01 df                	add    edi,ebx
c0012c8b:	39 fb                	cmp    ebx,edi
c0012c8d:	7d 1b                	jge    c0012caa <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0012c8f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0012c93:	7d 12                	jge    c0012ca7 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c0012c95:	8b 16                	mov    edx,DWORD PTR [esi]
c0012c97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012c9b:	53                   	push   ebx
c0012c9c:	55                   	push   ebp
c0012c9d:	45                   	inc    ebp
c0012c9e:	56                   	push   esi
c0012c9f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012ca2:	83 c4 10             	add    esp,0x10
c0012ca5:	eb e8                	jmp    c0012c8f <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0012ca7:	43                   	inc    ebx
c0012ca8:	eb e1                	jmp    c0012c8b <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0012caa:	83 c4 1c             	add    esp,0x1c
c0012cad:	5b                   	pop    ebx
c0012cae:	5e                   	pop    esi
c0012caf:	5f                   	pop    edi
c0012cb0:	5d                   	pop    ebp
c0012cb1:	c3                   	ret    

c0012cb2 <Video::blit(unsigned int*, int, int, int, int)>:
c0012cb2:	55                   	push   ebp
c0012cb3:	57                   	push   edi
c0012cb4:	56                   	push   esi
c0012cb5:	53                   	push   ebx
c0012cb6:	83 ec 1c             	sub    esp,0x1c
c0012cb9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012cbd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012cc1:	85 c0                	test   eax,eax
c0012cc3:	79 02                	jns    c0012cc7 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0012cc5:	31 c0                	xor    eax,eax
c0012cc7:	c1 e0 02             	shl    eax,0x2
c0012cca:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012cce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012cd2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012cd6:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0012cda:	39 d8                	cmp    eax,ebx
c0012cdc:	7e 49                	jle    c0012d27 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0012cde:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0012ce4:	7c 41                	jl     c0012d27 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0012ce6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012cea:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012cee:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012cf2:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0012cf6:	39 f9                	cmp    ecx,edi
c0012cf8:	7e 22                	jle    c0012d1c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0012cfa:	83 c5 04             	add    ebp,0x4
c0012cfd:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0012d03:	7c 14                	jl     c0012d19 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0012d05:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012d07:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0012d0a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012d0e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012d12:	56                   	push   esi
c0012d13:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0012d16:	83 c4 10             	add    esp,0x10
c0012d19:	47                   	inc    edi
c0012d1a:	eb d2                	jmp    c0012cee <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0012d1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d20:	43                   	inc    ebx
c0012d21:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0012d25:	eb ab                	jmp    c0012cd2 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0012d27:	83 c4 1c             	add    esp,0x1c
c0012d2a:	5b                   	pop    ebx
c0012d2b:	5e                   	pop    esi
c0012d2c:	5f                   	pop    edi
c0012d2d:	5d                   	pop    ebp
c0012d2e:	c3                   	ret    
c0012d2f:	90                   	nop

c0012d30 <Video::clearScreen(unsigned int)>:
c0012d30:	57                   	push   edi
c0012d31:	56                   	push   esi
c0012d32:	53                   	push   ebx
c0012d33:	31 db                	xor    ebx,ebx
c0012d35:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012d39:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0012d3f:	7e 1f                	jle    c0012d60 <Video::clearScreen(unsigned int)+0x30>
c0012d41:	31 ff                	xor    edi,edi
c0012d43:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0012d49:	7e 12                	jle    c0012d5d <Video::clearScreen(unsigned int)+0x2d>
c0012d4b:	8b 06                	mov    eax,DWORD PTR [esi]
c0012d4d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012d51:	53                   	push   ebx
c0012d52:	57                   	push   edi
c0012d53:	47                   	inc    edi
c0012d54:	56                   	push   esi
c0012d55:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012d58:	83 c4 10             	add    esp,0x10
c0012d5b:	eb e6                	jmp    c0012d43 <Video::clearScreen(unsigned int)+0x13>
c0012d5d:	43                   	inc    ebx
c0012d5e:	eb d9                	jmp    c0012d39 <Video::clearScreen(unsigned int)+0x9>
c0012d60:	5b                   	pop    ebx
c0012d61:	5e                   	pop    esi
c0012d62:	5f                   	pop    edi
c0012d63:	c3                   	ret    

c0012d64 <Video::putpixel(int, int, unsigned int)>:
c0012d64:	c7 44 24 04 d0 1b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021bd0
c0012d6c:	e9 e8 c3 ff ff       	jmp    c000f159 <Dbg::kprintf(char const*, ...)>
c0012d71:	90                   	nop

c0012d72 <Video::Video(char const*)>:
c0012d72:	83 ec 0c             	sub    esp,0xc
c0012d75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d79:	83 ec 08             	sub    esp,0x8
c0012d7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d80:	50                   	push   eax
c0012d81:	e8 d8 d9 ff ff       	call   c001075e <Device::Device(char const*)>
c0012d86:	83 c4 10             	add    esp,0x10
c0012d89:	ba e8 1b 02 c0       	mov    edx,0xc0021be8
c0012d8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d92:	89 10                	mov    DWORD PTR [eax],edx
c0012d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d98:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0012da2:	90                   	nop
c0012da3:	83 c4 0c             	add    esp,0xc
c0012da6:	c3                   	ret    
c0012da7:	90                   	nop

c0012da8 <Video::~Video()>:
c0012da8:	83 ec 0c             	sub    esp,0xc
c0012dab:	ba e8 1b 02 c0       	mov    edx,0xc0021be8
c0012db0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012db4:	89 10                	mov    DWORD PTR [eax],edx
c0012db6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dba:	83 ec 0c             	sub    esp,0xc
c0012dbd:	50                   	push   eax
c0012dbe:	e8 51 d6 ff ff       	call   c0010414 <Device::~Device()>
c0012dc3:	83 c4 10             	add    esp,0x10
c0012dc6:	90                   	nop
c0012dc7:	83 c4 0c             	add    esp,0xc
c0012dca:	c3                   	ret    
c0012dcb:	90                   	nop

c0012dcc <Video::~Video()>:
c0012dcc:	83 ec 0c             	sub    esp,0xc
c0012dcf:	83 ec 0c             	sub    esp,0xc
c0012dd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dd6:	e8 cd ff ff ff       	call   c0012da8 <Video::~Video()>
c0012ddb:	83 c4 10             	add    esp,0x10
c0012dde:	83 ec 08             	sub    esp,0x8
c0012de1:	68 64 01 00 00       	push   0x164
c0012de6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012dea:	e8 44 c2 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0012def:	83 c4 10             	add    esp,0x10
c0012df2:	83 c4 0c             	add    esp,0xc
c0012df5:	c3                   	ret    

c0012df6 <Video::isMonochrome()>:
c0012df6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012dfa:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0012e00:	c3                   	ret    
c0012e01:	90                   	nop

c0012e02 <Video::getWidth()>:
c0012e02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e06:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012e0c:	c3                   	ret    
c0012e0d:	90                   	nop

c0012e0e <Video::getHeight()>:
c0012e0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e12:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012e18:	c3                   	ret    
c0012e19:	90                   	nop

c0012e1a <Video::drawCursor(int, int, unsigned char*, int)>:
c0012e1a:	55                   	push   ebp
c0012e1b:	57                   	push   edi
c0012e1c:	56                   	push   esi
c0012e1d:	53                   	push   ebx
c0012e1e:	83 ec 2c             	sub    esp,0x2c
c0012e21:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012e25:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0012e29:	83 f8 01             	cmp    eax,0x1
c0012e2c:	19 c9                	sbb    ecx,ecx
c0012e2e:	31 db                	xor    ebx,ebx
c0012e30:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0012e34:	89 cd                	mov    ebp,ecx
c0012e36:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0012e3e:	f7 d5                	not    ebp
c0012e40:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0012e46:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012e4a:	01 d8                	add    eax,ebx
c0012e4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012e50:	56                   	push   esi
c0012e51:	e8 b8 ff ff ff       	call   c0012e0e <Video::getHeight()>
c0012e56:	59                   	pop    ecx
c0012e57:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012e5b:	7e 70                	jle    c0012ecd <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0012e5d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012e61:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012e65:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0012e68:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012e6c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012e70:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0012e77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012e7b:	89 f8                	mov    eax,edi
c0012e7d:	83 c0 20             	add    eax,0x20
c0012e80:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012e84:	56                   	push   esi
c0012e85:	e8 78 ff ff ff       	call   c0012e02 <Video::getWidth()>
c0012e8a:	5a                   	pop    edx
c0012e8b:	39 c7                	cmp    edi,eax
c0012e8d:	7d 34                	jge    c0012ec3 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0012e8f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0012e94:	74 05                	je     c0012e9b <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0012e96:	8b 06                	mov    eax,DWORD PTR [esi]
c0012e98:	55                   	push   ebp
c0012e99:	eb 0d                	jmp    c0012ea8 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0012e9b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0012ea0:	74 12                	je     c0012eb4 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0012ea2:	8b 06                	mov    eax,DWORD PTR [esi]
c0012ea4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ea8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012eac:	57                   	push   edi
c0012ead:	56                   	push   esi
c0012eae:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012eb1:	83 c4 10             	add    esp,0x10
c0012eb4:	47                   	inc    edi
c0012eb5:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0012eb9:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0012ebd:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0012ec1:	75 c1                	jne    c0012e84 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0012ec3:	43                   	inc    ebx
c0012ec4:	83 fb 20             	cmp    ebx,0x20
c0012ec7:	0f 85 79 ff ff ff    	jne    c0012e46 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0012ecd:	83 c4 2c             	add    esp,0x2c
c0012ed0:	5b                   	pop    ebx
c0012ed1:	5e                   	pop    esi
c0012ed2:	5f                   	pop    edi
c0012ed3:	5d                   	pop    ebp
c0012ed4:	c3                   	ret    
c0012ed5:	90                   	nop

c0012ed6 <ACPI::close(int, int, void*)>:
c0012ed6:	83 ec 1c             	sub    esp,0x1c
c0012ed9:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0012ee1:	74 0a                	je     c0012eed <ACPI::close(int, int, void*)+0x17>
c0012ee3:	b8 00 00 00 00       	mov    eax,0x0
c0012ee8:	e9 9e 00 00 00       	jmp    c0012f8b <ACPI::close(int, int, void*)+0xb5>
c0012eed:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0012ef2:	75 37                	jne    c0012f2b <ACPI::close(int, int, void*)+0x55>
c0012ef4:	83 ec 0c             	sub    esp,0xc
c0012ef7:	68 20 1c 02 c0       	push   0xc0021c20
c0012efc:	e8 58 c2 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0012f01:	83 c4 10             	add    esp,0x10
c0012f04:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0012f09:	85 c0                	test   eax,eax
c0012f0b:	74 07                	je     c0012f14 <ACPI::close(int, int, void*)+0x3e>
c0012f0d:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0012f12:	ff d0                	call   eax
c0012f14:	83 ec 0c             	sub    esp,0xc
c0012f17:	68 f4 1c 02 c0       	push   0xc0021cf4
c0012f1c:	e8 cb 24 00 00       	call   c00153ec <Krnl::panic(char const*)>
c0012f21:	83 c4 10             	add    esp,0x10
c0012f24:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012f29:	eb 60                	jmp    c0012f8b <ACPI::close(int, int, void*)+0xb5>
c0012f2b:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0012f30:	75 54                	jne    c0012f86 <ACPI::close(int, int, void*)+0xb0>
c0012f32:	a1 a4 47 02 c0       	mov    eax,ds:0xc00247a4
c0012f37:	85 c0                	test   eax,eax
c0012f39:	74 07                	je     c0012f42 <ACPI::close(int, int, void*)+0x6c>
c0012f3b:	a1 a4 47 02 c0       	mov    eax,ds:0xc00247a4
c0012f40:	ff d0                	call   eax
c0012f42:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0012f47:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012f4b:	25 ff 00 00 00       	and    eax,0xff
c0012f50:	83 e0 02             	and    eax,0x2
c0012f53:	74 1c                	je     c0012f71 <ACPI::close(int, int, void*)+0x9b>
c0012f55:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0012f5c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012f60:	89 c2                	mov    edx,eax
c0012f62:	ec                   	in     al,dx
c0012f63:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012f67:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012f6b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012f6f:	eb d6                	jmp    c0012f47 <ACPI::close(int, int, void*)+0x71>
c0012f71:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0012f78:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0012f7d:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0012f81:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f85:	ee                   	out    dx,al
c0012f86:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012f8b:	83 c4 1c             	add    esp,0x1c
c0012f8e:	c3                   	ret    

c0012f8f <findRSDP()>:
c0012f8f:	83 ec 1c             	sub    esp,0x1c
c0012f92:	a1 28 41 02 c0       	mov    eax,ds:0xc0024128
c0012f97:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012f9d:	83 e0 04             	and    eax,0x4
c0012fa0:	84 c0                	test   al,al
c0012fa2:	75 07                	jne    c0012fab <findRSDP()+0x1c>
c0012fa4:	b8 00 00 00 00       	mov    eax,0x0
c0012fa9:	eb 6a                	jmp    c0013015 <findRSDP()+0x86>
c0012fab:	a1 70 41 02 c0       	mov    eax,ds:0xc0024170
c0012fb0:	3d ff 07 00 00       	cmp    eax,0x7ff
c0012fb5:	7f 1b                	jg     c0012fd2 <findRSDP()+0x43>
c0012fb7:	a1 28 41 02 c0       	mov    eax,ds:0xc0024128
c0012fbc:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012fc2:	83 e2 fb             	and    edx,0xfffffffb
c0012fc5:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012fcb:	b8 00 00 00 00       	mov    eax,0x0
c0012fd0:	eb 43                	jmp    c0013015 <findRSDP()+0x86>
c0012fd2:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0012fda:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0012fe2:	77 2c                	ja     c0013010 <findRSDP()+0x81>
c0012fe4:	83 ec 04             	sub    esp,0x4
c0012fe7:	6a 08                	push   0x8
c0012fe9:	68 2d 1c 02 c0       	push   0xc0021c2d
c0012fee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ff2:	e8 78 d5 fe ff       	call   c000056f <memcmp>
c0012ff7:	83 c4 10             	add    esp,0x10
c0012ffa:	85 c0                	test   eax,eax
c0012ffc:	0f 94 c0             	sete   al
c0012fff:	84 c0                	test   al,al
c0013001:	74 06                	je     c0013009 <findRSDP()+0x7a>
c0013003:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013007:	eb 0c                	jmp    c0013015 <findRSDP()+0x86>
c0013009:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001300e:	eb ca                	jmp    c0012fda <findRSDP()+0x4b>
c0013010:	b8 00 00 00 00       	mov    eax,0x0
c0013015:	83 c4 1c             	add    esp,0x1c
c0013018:	c3                   	ret    

c0013019 <loadACPITables(unsigned char*)>:
c0013019:	56                   	push   esi
c001301a:	53                   	push   ebx
c001301b:	83 ec 44             	sub    esp,0x44
c001301e:	a1 28 41 02 c0       	mov    eax,ds:0xc0024128
c0013023:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013029:	83 e0 04             	and    eax,0x4
c001302c:	84 c0                	test   al,al
c001302e:	0f 84 05 02 00 00    	je     c0013239 <loadACPITables(unsigned char*)+0x220>
c0013034:	a0 c0 49 02 c0       	mov    al,ds:0xc00249c0
c0013039:	84 c0                	test   al,al
c001303b:	74 75                	je     c00130b2 <loadACPITables(unsigned char*)+0x99>
c001303d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013041:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013045:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013049:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001304c:	83 e8 24             	sub    eax,0x24
c001304f:	c1 e8 03             	shr    eax,0x3
c0013052:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0013056:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001305e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013062:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0013066:	0f 8d b2 00 00 00    	jge    c001311e <loadACPITables(unsigned char*)+0x105>
c001306c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013070:	83 c0 24             	add    eax,0x24
c0013073:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013077:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001307b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001307f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013083:	c1 e0 03             	shl    eax,0x3
c0013086:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c001308a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001308e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0013091:	8b 00                	mov    eax,DWORD PTR [eax]
c0013093:	89 c1                	mov    ecx,eax
c0013095:	a1 ac 47 02 c0       	mov    eax,ds:0xc00247ac
c001309a:	8d 50 01             	lea    edx,[eax+0x1]
c001309d:	89 15 ac 47 02 c0    	mov    DWORD PTR ds:0xc00247ac,edx
c00130a3:	89 ca                	mov    edx,ecx
c00130a5:	89 14 c5 c4 47 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb83c],edx
c00130ac:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c00130b0:	eb ac                	jmp    c001305e <loadACPITables(unsigned char*)+0x45>
c00130b2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00130b6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00130ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00130be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00130c1:	83 e8 24             	sub    eax,0x24
c00130c4:	c1 e8 02             	shr    eax,0x2
c00130c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00130cb:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c00130d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00130d7:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c00130db:	7d 41                	jge    c001311e <loadACPITables(unsigned char*)+0x105>
c00130dd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00130e1:	83 c0 24             	add    eax,0x24
c00130e4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00130e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00130f0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00130f4:	c1 e0 02             	shl    eax,0x2
c00130f7:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c00130fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00130ff:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013101:	a1 ac 47 02 c0       	mov    eax,ds:0xc00247ac
c0013106:	8d 50 01             	lea    edx,[eax+0x1]
c0013109:	89 15 ac 47 02 c0    	mov    DWORD PTR ds:0xc00247ac,edx
c001310f:	89 ca                	mov    edx,ecx
c0013111:	89 14 c5 c4 47 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb83c],edx
c0013118:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c001311c:	eb b5                	jmp    c00130d3 <loadACPITables(unsigned char*)+0xba>
c001311e:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0013126:	a1 ac 47 02 c0       	mov    eax,ds:0xc00247ac
c001312b:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c001312f:	0f 8d 05 01 00 00    	jge    c001323a <loadACPITables(unsigned char*)+0x221>
c0013135:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013139:	8b 04 c5 c4 47 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb83c]
c0013140:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013144:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013148:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001314c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013150:	25 ff 0f 00 00       	and    eax,0xfff
c0013155:	89 c6                	mov    esi,eax
c0013157:	e8 6f b1 ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c001315c:	89 c3                	mov    ebx,eax
c001315e:	83 ec 0c             	sub    esp,0xc
c0013161:	6a 01                	push   0x1
c0013163:	e8 d6 af ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c0013168:	83 c4 10             	add    esp,0x10
c001316b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001316f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013175:	83 ec 0c             	sub    esp,0xc
c0013178:	6a 01                	push   0x1
c001317a:	6a 01                	push   0x1
c001317c:	50                   	push   eax
c001317d:	52                   	push   edx
c001317e:	53                   	push   ebx
c001317f:	e8 78 b9 ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013184:	83 c4 20             	add    esp,0x20
c0013187:	09 f0                	or     eax,esi
c0013189:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001318d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013191:	c1 e0 03             	shl    eax,0x3
c0013194:	05 c0 47 02 c0       	add    eax,0xc00247c0
c0013199:	83 ec 04             	sub    esp,0x4
c001319c:	6a 04                	push   0x4
c001319e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00131a2:	50                   	push   eax
c00131a3:	e8 2a d4 fe ff       	call   c00005d2 <memcpy>
c00131a8:	83 c4 10             	add    esp,0x10
c00131ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00131b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00131b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00131ba:	05 00 10 00 00       	add    eax,0x1000
c00131bf:	c1 e8 0c             	shr    eax,0xc
c00131c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00131c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ca:	89 04 24             	mov    DWORD PTR [esp],eax
c00131cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131d1:	25 ff 0f 00 00       	and    eax,0xfff
c00131d6:	89 c6                	mov    esi,eax
c00131d8:	e8 ee b0 ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c00131dd:	89 c3                	mov    ebx,eax
c00131df:	83 ec 0c             	sub    esp,0xc
c00131e2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00131e6:	e8 53 af ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c00131eb:	83 c4 10             	add    esp,0x10
c00131ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00131f2:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00131f8:	83 ec 0c             	sub    esp,0xc
c00131fb:	6a 01                	push   0x1
c00131fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013201:	50                   	push   eax
c0013202:	52                   	push   edx
c0013203:	53                   	push   ebx
c0013204:	e8 f3 b8 ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013209:	83 c4 20             	add    esp,0x20
c001320c:	09 f0                	or     eax,esi
c001320e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013212:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0013215:	83 ec 0c             	sub    esp,0xc
c0013218:	50                   	push   eax
c0013219:	e8 6d b2 ff ff       	call   c000e48b <Virt::freeKernelVirtualPages(unsigned long)>
c001321e:	83 c4 10             	add    esp,0x10
c0013221:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013225:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013229:	89 14 c5 c4 47 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb83c],edx
c0013230:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0013234:	e9 ed fe ff ff       	jmp    c0013126 <loadACPITables(unsigned char*)+0x10d>
c0013239:	90                   	nop
c001323a:	83 c4 44             	add    esp,0x44
c001323d:	5b                   	pop    ebx
c001323e:	5e                   	pop    esi
c001323f:	c3                   	ret    

c0013240 <findRSDT(unsigned char*)>:
c0013240:	56                   	push   esi
c0013241:	53                   	push   ebx
c0013242:	83 ec 44             	sub    esp,0x44
c0013245:	a1 28 41 02 c0       	mov    eax,ds:0xc0024128
c001324a:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013250:	83 e0 04             	and    eax,0x4
c0013253:	84 c0                	test   al,al
c0013255:	75 0a                	jne    c0013261 <findRSDT(unsigned char*)+0x21>
c0013257:	b8 00 00 00 00       	mov    eax,0x0
c001325c:	e9 f7 00 00 00       	jmp    c0013358 <findRSDT(unsigned char*)+0x118>
c0013261:	83 ec 04             	sub    esp,0x4
c0013264:	6a 24                	push   0x24
c0013266:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001326a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001326e:	50                   	push   eax
c001326f:	e8 5e d3 fe ff       	call   c00005d2 <memcpy>
c0013274:	83 c4 10             	add    esp,0x10
c0013277:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001327b:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001327f:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0013287:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001328b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001328f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0013293:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013297:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001329b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001329f:	25 ff 0f 00 00       	and    eax,0xfff
c00132a4:	89 c6                	mov    esi,eax
c00132a6:	e8 20 b0 ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c00132ab:	89 c3                	mov    ebx,eax
c00132ad:	83 ec 0c             	sub    esp,0xc
c00132b0:	6a 02                	push   0x2
c00132b2:	e8 87 ae ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c00132b7:	83 c4 10             	add    esp,0x10
c00132ba:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00132be:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00132c4:	83 ec 0c             	sub    esp,0xc
c00132c7:	6a 01                	push   0x1
c00132c9:	6a 02                	push   0x2
c00132cb:	50                   	push   eax
c00132cc:	52                   	push   edx
c00132cd:	53                   	push   ebx
c00132ce:	e8 29 b8 ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00132d3:	83 c4 20             	add    esp,0x20
c00132d6:	09 f0                	or     eax,esi
c00132d8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00132dc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00132e0:	25 ff 0f 00 00       	and    eax,0xfff
c00132e5:	89 c6                	mov    esi,eax
c00132e7:	e8 df af ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c00132ec:	89 c3                	mov    ebx,eax
c00132ee:	83 ec 0c             	sub    esp,0xc
c00132f1:	6a 02                	push   0x2
c00132f3:	e8 46 ae ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c00132f8:	83 c4 10             	add    esp,0x10
c00132fb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00132ff:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013305:	83 ec 0c             	sub    esp,0xc
c0013308:	6a 01                	push   0x1
c001330a:	6a 02                	push   0x2
c001330c:	50                   	push   eax
c001330d:	52                   	push   edx
c001330e:	53                   	push   ebx
c001330f:	e8 e8 b7 ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013314:	83 c4 20             	add    esp,0x20
c0013317:	09 f0                	or     eax,esi
c0013319:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001331d:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0013322:	75 11                	jne    c0013335 <findRSDT(unsigned char*)+0xf5>
c0013324:	c6 05 c0 49 02 c0 00 	mov    BYTE PTR ds:0xc00249c0,0x0
c001332b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001332f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013333:	eb 1f                	jmp    c0013354 <findRSDT(unsigned char*)+0x114>
c0013335:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c001333a:	75 11                	jne    c001334d <findRSDT(unsigned char*)+0x10d>
c001333c:	c6 05 c0 49 02 c0 01 	mov    BYTE PTR ds:0xc00249c0,0x1
c0013343:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013347:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001334b:	eb 07                	jmp    c0013354 <findRSDT(unsigned char*)+0x114>
c001334d:	b8 00 00 00 00       	mov    eax,0x0
c0013352:	eb 04                	jmp    c0013358 <findRSDT(unsigned char*)+0x118>
c0013354:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013358:	83 c4 44             	add    esp,0x44
c001335b:	5b                   	pop    ebx
c001335c:	5e                   	pop    esi
c001335d:	c3                   	ret    

c001335e <findDataTable(unsigned char*, char*)>:
c001335e:	83 ec 1c             	sub    esp,0x1c
c0013361:	a1 28 41 02 c0       	mov    eax,ds:0xc0024128
c0013366:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001336c:	83 e0 04             	and    eax,0x4
c001336f:	84 c0                	test   al,al
c0013371:	75 07                	jne    c001337a <findDataTable(unsigned char*, char*)+0x1c>
c0013373:	b8 00 00 00 00       	mov    eax,0x0
c0013378:	eb 7c                	jmp    c00133f6 <findDataTable(unsigned char*, char*)+0x98>
c001337a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013382:	a1 ac 47 02 c0       	mov    eax,ds:0xc00247ac
c0013387:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001338b:	7d 3a                	jge    c00133c7 <findDataTable(unsigned char*, char*)+0x69>
c001338d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013391:	c1 e0 03             	shl    eax,0x3
c0013394:	05 c0 47 02 c0       	add    eax,0xc00247c0
c0013399:	83 ec 04             	sub    esp,0x4
c001339c:	6a 04                	push   0x4
c001339e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00133a2:	50                   	push   eax
c00133a3:	e8 c7 d1 fe ff       	call   c000056f <memcmp>
c00133a8:	83 c4 10             	add    esp,0x10
c00133ab:	85 c0                	test   eax,eax
c00133ad:	0f 94 c0             	sete   al
c00133b0:	84 c0                	test   al,al
c00133b2:	74 0d                	je     c00133c1 <findDataTable(unsigned char*, char*)+0x63>
c00133b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00133b8:	8b 04 c5 c4 47 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb83c]
c00133bf:	eb 35                	jmp    c00133f6 <findDataTable(unsigned char*, char*)+0x98>
c00133c1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00133c5:	eb bb                	jmp    c0013382 <findDataTable(unsigned char*, char*)+0x24>
c00133c7:	a0 c0 49 02 c0       	mov    al,ds:0xc00249c0
c00133cc:	84 c0                	test   al,al
c00133ce:	74 07                	je     c00133d7 <findDataTable(unsigned char*, char*)+0x79>
c00133d0:	b8 58 00 00 00       	mov    eax,0x58
c00133d5:	eb 05                	jmp    c00133dc <findDataTable(unsigned char*, char*)+0x7e>
c00133d7:	b8 52 00 00 00       	mov    eax,0x52
c00133dc:	83 ec 04             	sub    esp,0x4
c00133df:	50                   	push   eax
c00133e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00133e4:	68 18 1d 02 c0       	push   0xc0021d18
c00133e9:	e8 6b bd ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00133ee:	83 c4 10             	add    esp,0x10
c00133f1:	b8 00 00 00 00       	mov    eax,0x0
c00133f6:	83 c4 1c             	add    esp,0x1c
c00133f9:	c3                   	ret    

c00133fa <scanMADT()>:
c00133fa:	83 ec 2c             	sub    esp,0x2c
c00133fd:	a1 28 41 02 c0       	mov    eax,ds:0xc0024128
c0013402:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013408:	83 e0 04             	and    eax,0x4
c001340b:	84 c0                	test   al,al
c001340d:	0f 84 9a 03 00 00    	je     c00137ad <scanMADT()+0x3b3>
c0013413:	e8 77 fb ff ff       	call   c0012f8f <findRSDP()>
c0013418:	a3 cc 49 02 c0       	mov    ds:0xc00249cc,eax
c001341d:	a1 cc 49 02 c0       	mov    eax,ds:0xc00249cc
c0013422:	85 c0                	test   eax,eax
c0013424:	75 19                	jne    c001343f <scanMADT()+0x45>
c0013426:	a1 28 41 02 c0       	mov    eax,ds:0xc0024128
c001342b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013431:	83 e2 fb             	and    edx,0xfffffffb
c0013434:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001343a:	e9 72 03 00 00       	jmp    c00137b1 <scanMADT()+0x3b7>
c001343f:	a1 cc 49 02 c0       	mov    eax,ds:0xc00249cc
c0013444:	83 ec 0c             	sub    esp,0xc
c0013447:	50                   	push   eax
c0013448:	e8 f3 fd ff ff       	call   c0013240 <findRSDT(unsigned char*)>
c001344d:	83 c4 10             	add    esp,0x10
c0013450:	a3 c8 49 02 c0       	mov    ds:0xc00249c8,eax
c0013455:	a1 c8 49 02 c0       	mov    eax,ds:0xc00249c8
c001345a:	85 c0                	test   eax,eax
c001345c:	75 19                	jne    c0013477 <scanMADT()+0x7d>
c001345e:	a1 28 41 02 c0       	mov    eax,ds:0xc0024128
c0013463:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013469:	83 e2 fb             	and    edx,0xfffffffb
c001346c:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013472:	e9 3a 03 00 00       	jmp    c00137b1 <scanMADT()+0x3b7>
c0013477:	a1 c8 49 02 c0       	mov    eax,ds:0xc00249c8
c001347c:	83 ec 0c             	sub    esp,0xc
c001347f:	50                   	push   eax
c0013480:	e8 94 fb ff ff       	call   c0013019 <loadACPITables(unsigned char*)>
c0013485:	83 c4 10             	add    esp,0x10
c0013488:	a1 c8 49 02 c0       	mov    eax,ds:0xc00249c8
c001348d:	83 ec 08             	sub    esp,0x8
c0013490:	68 36 1c 02 c0       	push   0xc0021c36
c0013495:	50                   	push   eax
c0013496:	e8 c3 fe ff ff       	call   c001335e <findDataTable(unsigned char*, char*)>
c001349b:	83 c4 10             	add    esp,0x10
c001349e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00134a2:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c00134a7:	75 19                	jne    c00134c2 <scanMADT()+0xc8>
c00134a9:	a1 28 41 02 c0       	mov    eax,ds:0xc0024128
c00134ae:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00134b4:	83 e2 fe             	and    edx,0xfffffffe
c00134b7:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00134bd:	e9 ef 02 00 00       	jmp    c00137b1 <scanMADT()+0x3b7>
c00134c2:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00134ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00134d1:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00134d5:	0f 87 d6 02 00 00    	ja     c00137b1 <scanMADT()+0x3b7>
c00134db:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c00134e3:	0f 87 c8 02 00 00    	ja     c00137b1 <scanMADT()+0x3b7>
c00134e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134ed:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00134f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134f5:	8d 50 01             	lea    edx,[eax+0x1]
c00134f8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00134fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013500:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013504:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0013508:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001350c:	8d 50 01             	lea    edx,[eax+0x1]
c001350f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013513:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013517:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001351b:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c001351f:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0013524:	0f 86 86 02 00 00    	jbe    c00137b0 <scanMADT()+0x3b6>
c001352a:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001352f:	75 5b                	jne    c001358c <scanMADT()+0x192>
c0013531:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013535:	8d 50 01             	lea    edx,[eax+0x1]
c0013538:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001353c:	8a 15 00 4b 02 c0    	mov    dl,BYTE PTR ds:0xc0024b00
c0013542:	81 e2 ff 00 00 00    	and    edx,0xff
c0013548:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001354c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013550:	88 82 40 4b 02 c0    	mov    BYTE PTR [edx-0x3ffdb4c0],al
c0013556:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001355a:	8d 42 01             	lea    eax,[edx+0x1]
c001355d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013561:	a0 00 4b 02 c0       	mov    al,ds:0xc0024b00
c0013566:	8d 48 01             	lea    ecx,[eax+0x1]
c0013569:	88 0d 00 4b 02 c0    	mov    BYTE PTR ds:0xc0024b00,cl
c001356f:	25 ff 00 00 00       	and    eax,0xff
c0013574:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013578:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c001357c:	88 90 20 4b 02 c0    	mov    BYTE PTR [eax-0x3ffdb4e0],dl
c0013582:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013587:	e9 0a 02 00 00       	jmp    c0013796 <scanMADT()+0x39c>
c001358c:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0013591:	0f 85 29 01 00 00    	jne    c00136c0 <scanMADT()+0x2c6>
c0013597:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001359b:	8d 50 01             	lea    edx,[eax+0x1]
c001359e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00135a2:	8a 15 d0 49 02 c0    	mov    dl,BYTE PTR ds:0xc00249d0
c00135a8:	81 e2 ff 00 00 00    	and    edx,0xff
c00135ae:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00135b2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c00135b6:	88 82 e0 49 02 c0    	mov    BYTE PTR [edx-0x3ffdb620],al
c00135bc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00135c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00135c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135c8:	01 d0                	add    eax,edx
c00135ca:	83 c0 2c             	add    eax,0x2c
c00135cd:	8a 00                	mov    al,BYTE PTR [eax]
c00135cf:	31 d2                	xor    edx,edx
c00135d1:	88 c2                	mov    dl,al
c00135d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135d7:	8d 48 01             	lea    ecx,[eax+0x1]
c00135da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135de:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00135e2:	25 ff 00 00 00       	and    eax,0xff
c00135e7:	c1 e0 08             	shl    eax,0x8
c00135ea:	89 d1                	mov    ecx,edx
c00135ec:	09 c1                	or     ecx,eax
c00135ee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135f2:	8d 50 02             	lea    edx,[eax+0x2]
c00135f5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00135f9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00135fd:	25 ff 00 00 00       	and    eax,0xff
c0013602:	c1 e0 10             	shl    eax,0x10
c0013605:	09 c1                	or     ecx,eax
c0013607:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001360b:	8d 50 03             	lea    edx,[eax+0x3]
c001360e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013612:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013616:	25 ff 00 00 00       	and    eax,0xff
c001361b:	c1 e0 18             	shl    eax,0x18
c001361e:	09 c1                	or     ecx,eax
c0013620:	89 ca                	mov    edx,ecx
c0013622:	a0 d0 49 02 c0       	mov    al,ds:0xc00249d0
c0013627:	25 ff 00 00 00       	and    eax,0xff
c001362c:	89 14 85 00 4a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb600],edx
c0013633:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013638:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001363c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013640:	01 d0                	add    eax,edx
c0013642:	83 c0 2c             	add    eax,0x2c
c0013645:	8a 00                	mov    al,BYTE PTR [eax]
c0013647:	31 d2                	xor    edx,edx
c0013649:	88 c2                	mov    dl,al
c001364b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001364f:	8d 48 01             	lea    ecx,[eax+0x1]
c0013652:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013656:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001365a:	25 ff 00 00 00       	and    eax,0xff
c001365f:	c1 e0 08             	shl    eax,0x8
c0013662:	89 d1                	mov    ecx,edx
c0013664:	09 c1                	or     ecx,eax
c0013666:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001366a:	8d 50 02             	lea    edx,[eax+0x2]
c001366d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013671:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013675:	25 ff 00 00 00       	and    eax,0xff
c001367a:	c1 e0 10             	shl    eax,0x10
c001367d:	09 c1                	or     ecx,eax
c001367f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013683:	8d 50 03             	lea    edx,[eax+0x3]
c0013686:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001368a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001368e:	25 ff 00 00 00       	and    eax,0xff
c0013693:	c1 e0 18             	shl    eax,0x18
c0013696:	09 c1                	or     ecx,eax
c0013698:	89 ca                	mov    edx,ecx
c001369a:	a0 d0 49 02 c0       	mov    al,ds:0xc00249d0
c001369f:	25 ff 00 00 00       	and    eax,0xff
c00136a4:	89 14 85 80 4a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb580],edx
c00136ab:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00136b0:	a0 d0 49 02 c0       	mov    al,ds:0xc00249d0
c00136b5:	40                   	inc    eax
c00136b6:	a2 d0 49 02 c0       	mov    ds:0xc00249d0,al
c00136bb:	e9 d6 00 00 00       	jmp    c0013796 <scanMADT()+0x39c>
c00136c0:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c00136c5:	0f 85 b1 00 00 00    	jne    c001377c <scanMADT()+0x382>
c00136cb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00136cf:	8d 50 01             	lea    edx,[eax+0x1]
c00136d2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00136d6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00136da:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00136de:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00136e2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00136e6:	8d 50 01             	lea    edx,[eax+0x1]
c00136e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00136ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00136f1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00136f5:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c00136f9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00136fd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013701:	01 d0                	add    eax,edx
c0013703:	83 c0 2c             	add    eax,0x2c
c0013706:	8a 00                	mov    al,BYTE PTR [eax]
c0013708:	31 d2                	xor    edx,edx
c001370a:	88 c2                	mov    dl,al
c001370c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013710:	8d 48 01             	lea    ecx,[eax+0x1]
c0013713:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013717:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001371b:	25 ff 00 00 00       	and    eax,0xff
c0013720:	c1 e0 08             	shl    eax,0x8
c0013723:	89 d1                	mov    ecx,edx
c0013725:	09 c1                	or     ecx,eax
c0013727:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001372b:	8d 50 02             	lea    edx,[eax+0x2]
c001372e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013732:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013736:	25 ff 00 00 00       	and    eax,0xff
c001373b:	c1 e0 10             	shl    eax,0x10
c001373e:	09 c1                	or     ecx,eax
c0013740:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013744:	8d 50 03             	lea    edx,[eax+0x3]
c0013747:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001374b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001374f:	25 ff 00 00 00       	and    eax,0xff
c0013754:	c1 e0 18             	shl    eax,0x18
c0013757:	09 c8                	or     eax,ecx
c0013759:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001375d:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013762:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0013767:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001376b:	25 ff 00 00 00       	and    eax,0xff
c0013770:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013774:	88 90 80 38 02 c0    	mov    BYTE PTR [eax-0x3ffdc780],dl
c001377a:	eb 1a                	jmp    c0013796 <scanMADT()+0x39c>
c001377c:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0013781:	75 07                	jne    c001378a <scanMADT()+0x390>
c0013783:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013788:	eb 0c                	jmp    c0013796 <scanMADT()+0x39c>
c001378a:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c001378f:	75 05                	jne    c0013796 <scanMADT()+0x39c>
c0013791:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0013796:	8a 44 24 12          	mov    al,BYTE PTR [esp+0x12]
c001379a:	31 d2                	xor    edx,edx
c001379c:	88 c2                	mov    dl,al
c001379e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00137a2:	01 d0                	add    eax,edx
c00137a4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00137a8:	e9 1d fd ff ff       	jmp    c00134ca <scanMADT()+0xd0>
c00137ad:	90                   	nop
c00137ae:	eb 01                	jmp    c00137b1 <scanMADT()+0x3b7>
c00137b0:	90                   	nop
c00137b1:	83 c4 2c             	add    esp,0x2c
c00137b4:	c3                   	ret    
c00137b5:	90                   	nop

c00137b6 <ACPI::ACPI()>:
c00137b6:	83 ec 0c             	sub    esp,0xc
c00137b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137bd:	83 ec 08             	sub    esp,0x8
c00137c0:	68 3b 1c 02 c0       	push   0xc0021c3b
c00137c5:	50                   	push   eax
c00137c6:	e8 93 cf ff ff       	call   c001075e <Device::Device(char const*)>
c00137cb:	83 c4 10             	add    esp,0x10
c00137ce:	ba e4 1d 02 c0       	mov    edx,0xc0021de4
c00137d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137d7:	89 10                	mov    DWORD PTR [eax],edx
c00137d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137dd:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00137e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137e8:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c00137f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137f6:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0013800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013804:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c001380b:	e8 ea fb ff ff       	call   c00133fa <scanMADT()>
c0013810:	90                   	nop
c0013811:	83 c4 0c             	add    esp,0xc
c0013814:	c3                   	ret    
c0013815:	90                   	nop

c0013816 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0013816:	83 ec 2c             	sub    esp,0x2c
c0013819:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001381d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013821:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013825:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013829:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001382e:	88 d0                	mov    al,dl
c0013830:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013834:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0013839:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013841:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013845:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001384b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001384f:	0f 8d 97 00 00 00    	jge    c00138ec <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0013855:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013859:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001385d:	83 c2 2a             	add    edx,0x2a
c0013860:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0013864:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0013869:	75 78                	jne    c00138e3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001386b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001386f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013873:	83 c2 2a             	add    edx,0x2a
c0013876:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001387a:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001387e:	75 63                	jne    c00138e3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013880:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013885:	74 3a                	je     c00138c1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0013887:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001388b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001388f:	83 c2 2a             	add    edx,0x2a
c0013892:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0013896:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001389a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001389d:	39 c2                	cmp    edx,eax
c001389f:	74 10                	je     c00138b1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00138a1:	83 ec 0c             	sub    esp,0xc
c00138a4:	68 48 1d 02 c0       	push   0xc0021d48
c00138a9:	e8 3e 1b 00 00       	call   c00153ec <Krnl::panic(char const*)>
c00138ae:	83 c4 10             	add    esp,0x10
c00138b1:	83 ec 0c             	sub    esp,0xc
c00138b4:	68 40 1c 02 c0       	push   0xc0021c40
c00138b9:	e8 2e 1b 00 00       	call   c00153ec <Krnl::panic(char const*)>
c00138be:	83 c4 10             	add    esp,0x10
c00138c1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00138c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00138c9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00138cd:	83 c2 2a             	add    edx,0x2a
c00138d0:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00138d4:	8b 02                	mov    eax,DWORD PTR [edx]
c00138d6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00138d9:	89 01                	mov    DWORD PTR [ecx],eax
c00138db:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00138de:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00138e3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00138e7:	e9 55 ff ff ff       	jmp    c0013841 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00138ec:	90                   	nop
c00138ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00138f1:	83 c4 2c             	add    esp,0x2c
c00138f4:	c2 04 00             	ret    0x4
c00138f7:	90                   	nop

c00138f8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00138f8:	56                   	push   esi
c00138f9:	53                   	push   ebx
c00138fa:	83 ec 14             	sub    esp,0x14
c00138fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013901:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013905:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013909:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001390e:	88 c8                	mov    al,cl
c0013910:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013914:	88 d0                	mov    al,dl
c0013916:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c001391a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001391e:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0013924:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013928:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c001392e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0013932:	31 c9                	xor    ecx,ecx
c0013934:	88 c1                	mov    cl,al
c0013936:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001393a:	31 d2                	xor    edx,edx
c001393c:	88 c2                	mov    dl,al
c001393e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013942:	25 ff ff 00 00       	and    eax,0xffff
c0013947:	83 ec 04             	sub    esp,0x4
c001394a:	56                   	push   esi
c001394b:	53                   	push   ebx
c001394c:	51                   	push   ecx
c001394d:	52                   	push   edx
c001394e:	50                   	push   eax
c001394f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013953:	68 78 1d 02 c0       	push   0xc0021d78
c0013958:	e8 fc b7 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001395d:	83 c4 20             	add    esp,0x20
c0013960:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013964:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001396a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001396e:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013971:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013975:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0013979:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001397d:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013983:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013987:	8d 48 2a             	lea    ecx,[eax+0x2a]
c001398a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001398e:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0013993:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013997:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001399d:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00139a1:	8d 48 01             	lea    ecx,[eax+0x1]
c00139a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00139a8:	83 c2 2a             	add    edx,0x2a
c00139ab:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c00139af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00139b3:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00139b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00139bd:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00139c0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00139c4:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c00139c8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00139cc:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00139d2:	8d 50 01             	lea    edx,[eax+0x1]
c00139d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00139d9:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c00139df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00139e3:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00139e9:	3d 00 08 00 00       	cmp    eax,0x800
c00139ee:	75 10                	jne    c0013a00 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0x108>
c00139f0:	83 ec 0c             	sub    esp,0xc
c00139f3:	68 4f 1c 02 c0       	push   0xc0021c4f
c00139f8:	e8 ef 19 00 00       	call   c00153ec <Krnl::panic(char const*)>
c00139fd:	83 c4 10             	add    esp,0x10
c0013a00:	90                   	nop
c0013a01:	83 c4 14             	add    esp,0x14
c0013a04:	5b                   	pop    ebx
c0013a05:	5e                   	pop    esi
c0013a06:	c3                   	ret    
c0013a07:	90                   	nop

c0013a08 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0013a08:	b8 00 00 00 00       	mov    eax,0x0
c0013a0d:	c3                   	ret    

c0013a0e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0013a0e:	83 ec 1c             	sub    esp,0x1c
c0013a11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013a15:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0013a18:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013a1c:	8b 15 28 41 02 c0    	mov    edx,DWORD PTR ds:0xc0024128
c0013a22:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013a26:	25 ff 00 00 00       	and    eax,0xff
c0013a2b:	83 ec 08             	sub    esp,0x8
c0013a2e:	50                   	push   eax
c0013a2f:	52                   	push   edx
c0013a30:	e8 ff 7a ff ff       	call   c000b534 <Computer::readCMOS(unsigned char)>
c0013a35:	83 c4 10             	add    esp,0x10
c0013a38:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0013a3c:	8b 15 28 41 02 c0    	mov    edx,DWORD PTR ds:0xc0024128
c0013a42:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013a46:	25 ff 00 00 00       	and    eax,0xff
c0013a4b:	83 ec 04             	sub    esp,0x4
c0013a4e:	6a 01                	push   0x1
c0013a50:	50                   	push   eax
c0013a51:	52                   	push   edx
c0013a52:	e8 f5 7b ff ff       	call   c000b64c <Computer::writeCMOS(unsigned char, unsigned char)>
c0013a57:	83 c4 10             	add    esp,0x10
c0013a5a:	90                   	nop
c0013a5b:	83 c4 1c             	add    esp,0x1c
c0013a5e:	c3                   	ret    
c0013a5f:	90                   	nop

c0013a60 <ACPI::open(int, int, void*)>:
c0013a60:	53                   	push   ebx
c0013a61:	83 ec 18             	sub    esp,0x18
c0013a64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013a68:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c0013a6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013a73:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c0013a79:	84 c0                	test   al,al
c0013a7b:	74 60                	je     c0013add <ACPI::open(int, int, void*)+0x7d>
c0013a7d:	83 ec 0c             	sub    esp,0xc
c0013a80:	68 58 01 00 00       	push   0x158
c0013a85:	e8 9a b5 ff ff       	call   c000f024 <operator new(unsigned long)>
c0013a8a:	83 c4 10             	add    esp,0x10
c0013a8d:	89 c3                	mov    ebx,eax
c0013a8f:	83 ec 0c             	sub    esp,0xc
c0013a92:	53                   	push   ebx
c0013a93:	e8 a8 80 00 00       	call   c001bb40 <PCI::PCI()>
c0013a98:	83 c4 10             	add    esp,0x10
c0013a9b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0013a9f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013aa3:	83 ec 08             	sub    esp,0x8
c0013aa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013aaa:	50                   	push   eax
c0013aab:	e8 be ca ff ff       	call   c001056e <Device::addChild(Device*)>
c0013ab0:	83 c4 10             	add    esp,0x10
c0013ab3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013ab7:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ab9:	83 c0 08             	add    eax,0x8
c0013abc:	8b 00                	mov    eax,DWORD PTR [eax]
c0013abe:	6a 00                	push   0x0
c0013ac0:	6a 00                	push   0x0
c0013ac2:	6a 00                	push   0x0
c0013ac4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ac8:	ff d0                	call   eax
c0013aca:	83 c4 10             	add    esp,0x10
c0013acd:	83 ec 0c             	sub    esp,0xc
c0013ad0:	68 6c 1c 02 c0       	push   0xc0021c6c
c0013ad5:	e8 7f b6 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0013ada:	83 c4 10             	add    esp,0x10
c0013add:	83 ec 0c             	sub    esp,0xc
c0013ae0:	68 77 1c 02 c0       	push   0xc0021c77
c0013ae5:	e8 43 38 00 00       	call   c001732d <Thr::loadKernelSymbolTable(char const*)>
c0013aea:	83 c4 10             	add    esp,0x10
c0013aed:	8b 1d 28 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024128
c0013af3:	83 ec 08             	sub    esp,0x8
c0013af6:	6a 01                	push   0x1
c0013af8:	68 95 1c 02 c0       	push   0xc0021c95
c0013afd:	e8 0d 43 00 00       	call   c0017e0f <Thr::loadDLL(char const*, bool)>
c0013b02:	83 c4 10             	add    esp,0x10
c0013b05:	83 ec 08             	sub    esp,0x8
c0013b08:	53                   	push   ebx
c0013b09:	50                   	push   eax
c0013b0a:	e8 c6 44 00 00       	call   c0017fd5 <Thr::executeDLL(unsigned long, void*)>
c0013b0f:	83 c4 10             	add    esp,0x10
c0013b12:	8b 1d 28 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024128
c0013b18:	83 ec 08             	sub    esp,0x8
c0013b1b:	6a 01                	push   0x1
c0013b1d:	68 b2 1c 02 c0       	push   0xc0021cb2
c0013b22:	e8 e8 42 00 00       	call   c0017e0f <Thr::loadDLL(char const*, bool)>
c0013b27:	83 c4 10             	add    esp,0x10
c0013b2a:	83 ec 08             	sub    esp,0x8
c0013b2d:	53                   	push   ebx
c0013b2e:	50                   	push   eax
c0013b2f:	e8 a1 44 00 00       	call   c0017fd5 <Thr::executeDLL(unsigned long, void*)>
c0013b34:	83 c4 10             	add    esp,0x10
c0013b37:	a1 28 41 02 c0       	mov    eax,ds:0xc0024128
c0013b3c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013b42:	83 e0 04             	and    eax,0x4
c0013b45:	84 c0                	test   al,al
c0013b47:	0f 84 cf 00 00 00    	je     c0013c1c <ACPI::open(int, int, void*)+0x1bc>
c0013b4d:	83 ec 0c             	sub    esp,0xc
c0013b50:	68 14 01 00 00       	push   0x114
c0013b55:	e8 ca b4 ff ff       	call   c000f024 <operator new(unsigned long)>
c0013b5a:	83 c4 10             	add    esp,0x10
c0013b5d:	89 c3                	mov    ebx,eax
c0013b5f:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0013b64:	83 ec 04             	sub    esp,0x4
c0013b67:	50                   	push   eax
c0013b68:	68 cf 1c 02 c0       	push   0xc0021ccf
c0013b6d:	53                   	push   ebx
c0013b6e:	e8 1d bb ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0013b73:	83 c4 10             	add    esp,0x10
c0013b76:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0013b7a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013b7f:	74 17                	je     c0013b98 <ACPI::open(int, int, void*)+0x138>
c0013b81:	83 ec 0c             	sub    esp,0xc
c0013b84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013b88:	e8 d5 bd ff ff       	call   c000f962 <File::exists()>
c0013b8d:	83 c4 10             	add    esp,0x10
c0013b90:	84 c0                	test   al,al
c0013b92:	74 04                	je     c0013b98 <ACPI::open(int, int, void*)+0x138>
c0013b94:	b0 01                	mov    al,0x1
c0013b96:	eb 02                	jmp    c0013b9a <ACPI::open(int, int, void*)+0x13a>
c0013b98:	b0 00                	mov    al,0x0
c0013b9a:	84 c0                	test   al,al
c0013b9c:	74 25                	je     c0013bc3 <ACPI::open(int, int, void*)+0x163>
c0013b9e:	8b 1d 28 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024128
c0013ba4:	83 ec 08             	sub    esp,0x8
c0013ba7:	6a 01                	push   0x1
c0013ba9:	68 cf 1c 02 c0       	push   0xc0021ccf
c0013bae:	e8 5c 42 00 00       	call   c0017e0f <Thr::loadDLL(char const*, bool)>
c0013bb3:	83 c4 10             	add    esp,0x10
c0013bb6:	83 ec 08             	sub    esp,0x8
c0013bb9:	53                   	push   ebx
c0013bba:	50                   	push   eax
c0013bbb:	e8 15 44 00 00       	call   c0017fd5 <Thr::executeDLL(unsigned long, void*)>
c0013bc0:	83 c4 10             	add    esp,0x10
c0013bc3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013bc8:	74 1e                	je     c0013be8 <ACPI::open(int, int, void*)+0x188>
c0013bca:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0013bcf:	74 17                	je     c0013be8 <ACPI::open(int, int, void*)+0x188>
c0013bd1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013bd5:	8b 00                	mov    eax,DWORD PTR [eax]
c0013bd7:	83 c0 08             	add    eax,0x8
c0013bda:	8b 00                	mov    eax,DWORD PTR [eax]
c0013bdc:	83 ec 0c             	sub    esp,0xc
c0013bdf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013be3:	ff d0                	call   eax
c0013be5:	83 c4 10             	add    esp,0x10
c0013be8:	a1 c8 49 02 c0       	mov    eax,ds:0xc00249c8
c0013bed:	83 ec 08             	sub    esp,0x8
c0013bf0:	68 ec 1c 02 c0       	push   0xc0021cec
c0013bf5:	50                   	push   eax
c0013bf6:	e8 63 f7 ff ff       	call   c001335e <findDataTable(unsigned char*, char*)>
c0013bfb:	83 c4 10             	add    esp,0x10
c0013bfe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013c02:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0013c07:	74 13                	je     c0013c1c <ACPI::open(int, int, void*)+0x1bc>
c0013c09:	83 ec 08             	sub    esp,0x8
c0013c0c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013c10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013c14:	e8 f5 fd ff ff       	call   c0013a0e <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0013c19:	83 c4 10             	add    esp,0x10
c0013c1c:	b8 00 00 00 00       	mov    eax,0x0
c0013c21:	83 c4 18             	add    esp,0x18
c0013c24:	5b                   	pop    ebx
c0013c25:	c3                   	ret    

c0013c26 <ACPI::sleep()>:
c0013c26:	83 ec 0c             	sub    esp,0xc
c0013c29:	a1 a0 47 02 c0       	mov    eax,ds:0xc00247a0
c0013c2e:	85 c0                	test   eax,eax
c0013c30:	74 07                	je     c0013c39 <ACPI::sleep()+0x13>
c0013c32:	a1 a0 47 02 c0       	mov    eax,ds:0xc00247a0
c0013c37:	ff d0                	call   eax
c0013c39:	90                   	nop
c0013c3a:	83 c4 0c             	add    esp,0xc
c0013c3d:	c3                   	ret    

c0013c3e <CPU::close(int, int, void*)>:
c0013c3e:	31 c0                	xor    eax,eax
c0013c40:	c3                   	ret    

c0013c41 <lookupAMDCPUName(unsigned char, unsigned char)>:
c0013c41:	55                   	push   ebp
c0013c42:	57                   	push   edi
c0013c43:	56                   	push   esi
c0013c44:	53                   	push   ebx
c0013c45:	51                   	push   ecx
c0013c46:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c4a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0013c4e:	89 d6                	mov    esi,edx
c0013c50:	89 cd                	mov    ebp,ecx
c0013c52:	80 fa 04             	cmp    dl,0x4
c0013c55:	75 28                	jne    c0013c7f <lookupAMDCPUName(unsigned char, unsigned char)+0x3e>
c0013c57:	8d 41 f9             	lea    eax,[ecx-0x7]
c0013c5a:	3c 03                	cmp    al,0x3
c0013c5c:	0f 86 64 01 00 00    	jbe    c0013dc6 <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c0013c62:	80 f9 03             	cmp    cl,0x3
c0013c65:	0f 84 5b 01 00 00    	je     c0013dc6 <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c0013c6b:	8d 79 f2             	lea    edi,[ecx-0xe]
c0013c6e:	b8 50 3a 02 c0       	mov    eax,0xc0023a50
c0013c73:	89 fb                	mov    ebx,edi
c0013c75:	80 fb 01             	cmp    bl,0x1
c0013c78:	77 4e                	ja     c0013cc8 <lookupAMDCPUName(unsigned char, unsigned char)+0x87>
c0013c7a:	e9 61 01 00 00       	jmp    c0013de0 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013c7f:	80 fa 05             	cmp    dl,0x5
c0013c82:	75 4d                	jne    c0013cd1 <lookupAMDCPUName(unsigned char, unsigned char)+0x90>
c0013c84:	b8 60 3a 02 c0       	mov    eax,0xc0023a60
c0013c89:	80 f9 03             	cmp    cl,0x3
c0013c8c:	0f 86 4e 01 00 00    	jbe    c0013de0 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013c92:	8d 79 fa             	lea    edi,[ecx-0x6]
c0013c95:	b8 70 3a 02 c0       	mov    eax,0xc0023a70
c0013c9a:	89 fb                	mov    ebx,edi
c0013c9c:	80 fb 01             	cmp    bl,0x1
c0013c9f:	0f 86 3b 01 00 00    	jbe    c0013de0 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013ca5:	b8 80 3a 02 c0       	mov    eax,0xc0023a80
c0013caa:	80 f9 08             	cmp    cl,0x8
c0013cad:	0f 84 2d 01 00 00    	je     c0013de0 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013cb3:	89 cf                	mov    edi,ecx
c0013cb5:	b8 90 3a 02 c0       	mov    eax,0xc0023a90
c0013cba:	83 e7 fb             	and    edi,0xfffffffb
c0013cbd:	89 fb                	mov    ebx,edi
c0013cbf:	80 fb 09             	cmp    bl,0x9
c0013cc2:	0f 84 18 01 00 00    	je     c0013de0 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013cc8:	31 c0                	xor    eax,eax
c0013cca:	89 eb                	mov    ebx,ebp
c0013ccc:	0f b6 fb             	movzx  edi,bl
c0013ccf:	eb 30                	jmp    c0013d01 <lookupAMDCPUName(unsigned char, unsigned char)+0xc0>
c0013cd1:	31 c0                	xor    eax,eax
c0013cd3:	80 fa 06             	cmp    dl,0x6
c0013cd6:	75 f2                	jne    c0013cca <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0013cd8:	80 f9 0a             	cmp    cl,0xa
c0013cdb:	77 ed                	ja     c0013cca <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0013cdd:	bf de 05 00 00       	mov    edi,0x5de
c0013ce2:	0f a3 cf             	bt     edi,ecx
c0013ce5:	73 e3                	jae    c0013cca <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0013ce7:	b8 a0 3a 02 c0       	mov    eax,0xc0023aa0
c0013cec:	e9 ef 00 00 00       	jmp    c0013de0 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013cf1:	39 c7                	cmp    edi,eax
c0013cf3:	0f 84 d4 00 00 00    	je     c0013dcd <lookupAMDCPUName(unsigned char, unsigned char)+0x18c>
c0013cf9:	40                   	inc    eax
c0013cfa:	3d d0 00 00 00       	cmp    eax,0xd0
c0013cff:	74 09                	je     c0013d0a <lookupAMDCPUName(unsigned char, unsigned char)+0xc9>
c0013d01:	89 f3                	mov    ebx,esi
c0013d03:	80 fb 0f             	cmp    bl,0xf
c0013d06:	75 f1                	jne    c0013cf9 <lookupAMDCPUName(unsigned char, unsigned char)+0xb8>
c0013d08:	eb e7                	jmp    c0013cf1 <lookupAMDCPUName(unsigned char, unsigned char)+0xb0>
c0013d0a:	80 fa 10             	cmp    dl,0x10
c0013d0d:	75 19                	jne    c0013d28 <lookupAMDCPUName(unsigned char, unsigned char)+0xe7>
c0013d0f:	8d 41 fc             	lea    eax,[ecx-0x4]
c0013d12:	83 e0 fb             	and    eax,0xfffffffb
c0013d15:	3c 02                	cmp    al,0x2
c0013d17:	0f 86 b7 00 00 00    	jbe    c0013dd4 <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c0013d1d:	80 f9 02             	cmp    cl,0x2
c0013d20:	0f 84 ae 00 00 00    	je     c0013dd4 <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c0013d26:	eb 13                	jmp    c0013d3b <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c0013d28:	80 fa 11             	cmp    dl,0x11
c0013d2b:	75 0e                	jne    c0013d3b <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c0013d2d:	b8 b0 3a 02 c0       	mov    eax,0xc0023ab0
c0013d32:	80 f9 03             	cmp    cl,0x3
c0013d35:	0f 84 a5 00 00 00    	je     c0013de0 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013d3b:	80 fa 12             	cmp    dl,0x12
c0013d3e:	75 0e                	jne    c0013d4e <lookupAMDCPUName(unsigned char, unsigned char)+0x10d>
c0013d40:	b8 c0 3a 02 c0       	mov    eax,0xc0023ac0
c0013d45:	80 f9 01             	cmp    cl,0x1
c0013d48:	0f 84 92 00 00 00    	je     c0013de0 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013d4e:	80 fa 14             	cmp    dl,0x14
c0013d51:	be 01 00 00 00       	mov    esi,0x1
c0013d56:	0f 94 c3             	sete   bl
c0013d59:	80 f9 13             	cmp    cl,0x13
c0013d5c:	77 0c                	ja     c0013d6a <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c0013d5e:	be 04 00 09 00       	mov    esi,0x90004
c0013d63:	d3 ee                	shr    esi,cl
c0013d65:	f7 d6                	not    esi
c0013d67:	83 e6 01             	and    esi,0x1
c0013d6a:	8d 41 ff             	lea    eax,[ecx-0x1]
c0013d6d:	3c 01                	cmp    al,0x1
c0013d6f:	b8 d0 3a 02 c0       	mov    eax,0xc0023ad0
c0013d74:	0f 96 44 24 03       	setbe  BYTE PTR [esp+0x3]
c0013d79:	84 5c 24 03          	test   BYTE PTR [esp+0x3],bl
c0013d7d:	75 61                	jne    c0013de0 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013d7f:	80 fa 15             	cmp    dl,0x15
c0013d82:	75 1f                	jne    c0013da3 <lookupAMDCPUName(unsigned char, unsigned char)+0x162>
c0013d84:	b8 e0 3a 02 c0       	mov    eax,0xc0023ae0
c0013d89:	80 f9 01             	cmp    cl,0x1
c0013d8c:	74 52                	je     c0013de0 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013d8e:	89 f3                	mov    ebx,esi
c0013d90:	b8 f0 3a 02 c0       	mov    eax,0xc0023af0
c0013d95:	84 db                	test   bl,bl
c0013d97:	74 47                	je     c0013de0 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013d99:	b8 00 3b 02 c0       	mov    eax,0xc0023b00
c0013d9e:	80 f9 30             	cmp    cl,0x30
c0013da1:	74 3d                	je     c0013de0 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013da3:	80 fa 16             	cmp    dl,0x16
c0013da6:	0f 94 c2             	sete   dl
c0013da9:	84 c9                	test   cl,cl
c0013dab:	75 09                	jne    c0013db6 <lookupAMDCPUName(unsigned char, unsigned char)+0x175>
c0013dad:	b8 10 3b 02 c0       	mov    eax,0xc0023b10
c0013db2:	84 d2                	test   dl,dl
c0013db4:	75 2a                	jne    c0013de0 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013db6:	80 f9 30             	cmp    cl,0x30
c0013db9:	75 20                	jne    c0013ddb <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c0013dbb:	b8 20 3b 02 c0       	mov    eax,0xc0023b20
c0013dc0:	84 d2                	test   dl,dl
c0013dc2:	75 1c                	jne    c0013de0 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013dc4:	eb 15                	jmp    c0013ddb <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c0013dc6:	b8 40 3a 02 c0       	mov    eax,0xc0023a40
c0013dcb:	eb 13                	jmp    c0013de0 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013dcd:	b8 b0 3a 02 c0       	mov    eax,0xc0023ab0
c0013dd2:	eb 0c                	jmp    c0013de0 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013dd4:	b8 c0 3a 02 c0       	mov    eax,0xc0023ac0
c0013dd9:	eb 05                	jmp    c0013de0 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0013ddb:	b8 fa 20 02 c0       	mov    eax,0xc00220fa
c0013de0:	5a                   	pop    edx
c0013de1:	5b                   	pop    ebx
c0013de2:	5e                   	pop    esi
c0013de3:	5f                   	pop    edi
c0013de4:	5d                   	pop    ebp
c0013de5:	c3                   	ret    

c0013de6 <lookupIntelCPUName(unsigned char, unsigned char)>:
c0013de6:	53                   	push   ebx
c0013de7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013deb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013def:	80 f9 04             	cmp    cl,0x4
c0013df2:	75 6a                	jne    c0013e5e <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0013df4:	b8 a0 38 02 c0       	mov    eax,0xc00238a0
c0013df9:	80 fa 01             	cmp    dl,0x1
c0013dfc:	0f 86 9b 02 00 00    	jbe    c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013e02:	b8 b0 38 02 c0       	mov    eax,0xc00238b0
c0013e07:	80 fa 02             	cmp    dl,0x2
c0013e0a:	0f 84 8d 02 00 00    	je     c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013e10:	b8 c0 38 02 c0       	mov    eax,0xc00238c0
c0013e15:	80 fa 03             	cmp    dl,0x3
c0013e18:	0f 84 7f 02 00 00    	je     c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013e1e:	b8 d0 38 02 c0       	mov    eax,0xc00238d0
c0013e23:	80 fa 04             	cmp    dl,0x4
c0013e26:	0f 84 71 02 00 00    	je     c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013e2c:	b8 e0 38 02 c0       	mov    eax,0xc00238e0
c0013e31:	80 fa 05             	cmp    dl,0x5
c0013e34:	0f 84 63 02 00 00    	je     c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013e3a:	b8 c0 38 02 c0       	mov    eax,0xc00238c0
c0013e3f:	80 fa 07             	cmp    dl,0x7
c0013e42:	0f 84 55 02 00 00    	je     c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013e48:	8d 5a f8             	lea    ebx,[edx-0x8]
c0013e4b:	b8 f0 38 02 c0       	mov    eax,0xc00238f0
c0013e50:	80 fb 01             	cmp    bl,0x1
c0013e53:	0f 87 e0 01 00 00    	ja     c0014039 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c0013e59:	e9 3f 02 00 00       	jmp    c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013e5e:	80 f9 05             	cmp    cl,0x5
c0013e61:	75 3e                	jne    c0013ea1 <lookupIntelCPUName(unsigned char, unsigned char)+0xbb>
c0013e63:	8d 5a ff             	lea    ebx,[edx-0x1]
c0013e66:	b8 00 39 02 c0       	mov    eax,0xc0023900
c0013e6b:	80 fb 02             	cmp    bl,0x2
c0013e6e:	0f 86 29 02 00 00    	jbe    c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013e74:	80 fa 04             	cmp    dl,0x4
c0013e77:	0f 84 f1 01 00 00    	je     c001406e <lookupIntelCPUName(unsigned char, unsigned char)+0x288>
c0013e7d:	80 fa 07             	cmp    dl,0x7
c0013e80:	0f 84 17 02 00 00    	je     c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013e86:	b8 10 39 02 c0       	mov    eax,0xc0023910
c0013e8b:	80 fa 08             	cmp    dl,0x8
c0013e8e:	0f 84 09 02 00 00    	je     c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013e94:	b8 20 39 02 c0       	mov    eax,0xc0023920
c0013e99:	80 fa 09             	cmp    dl,0x9
c0013e9c:	e9 96 01 00 00       	jmp    c0014037 <lookupIntelCPUName(unsigned char, unsigned char)+0x251>
c0013ea1:	80 f9 06             	cmp    cl,0x6
c0013ea4:	0f 85 80 01 00 00    	jne    c001402a <lookupIntelCPUName(unsigned char, unsigned char)+0x244>
c0013eaa:	b8 30 39 02 c0       	mov    eax,0xc0023930
c0013eaf:	80 fa 01             	cmp    dl,0x1
c0013eb2:	0f 84 e5 01 00 00    	je     c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013eb8:	8d 42 fb             	lea    eax,[edx-0x5]
c0013ebb:	3c 01                	cmp    al,0x1
c0013ebd:	0f 86 b2 01 00 00    	jbe    c0014075 <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c0013ec3:	80 fa 03             	cmp    dl,0x3
c0013ec6:	0f 84 a9 01 00 00    	je     c0014075 <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c0013ecc:	8d 5a f9             	lea    ebx,[edx-0x7]
c0013ecf:	b8 50 39 02 c0       	mov    eax,0xc0023950
c0013ed4:	80 fb 01             	cmp    bl,0x1
c0013ed7:	0f 86 c0 01 00 00    	jbe    c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013edd:	80 fa 09             	cmp    dl,0x9
c0013ee0:	0f 84 96 01 00 00    	je     c001407c <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0013ee6:	8d 5a f6             	lea    ebx,[edx-0xa]
c0013ee9:	80 fb 01             	cmp    bl,0x1
c0013eec:	0f 86 ab 01 00 00    	jbe    c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013ef2:	b8 60 39 02 c0       	mov    eax,0xc0023960
c0013ef7:	80 fa 0d             	cmp    dl,0xd
c0013efa:	0f 84 9d 01 00 00    	je     c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013f00:	b8 70 39 02 c0       	mov    eax,0xc0023970
c0013f05:	80 fa 0e             	cmp    dl,0xe
c0013f08:	0f 84 8f 01 00 00    	je     c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013f0e:	b8 80 39 02 c0       	mov    eax,0xc0023980
c0013f13:	80 fa 0f             	cmp    dl,0xf
c0013f16:	0f 84 81 01 00 00    	je     c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013f1c:	b8 60 39 02 c0       	mov    eax,0xc0023960
c0013f21:	80 fa 15             	cmp    dl,0x15
c0013f24:	0f 84 73 01 00 00    	je     c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013f2a:	8d 5a ea             	lea    ebx,[edx-0x16]
c0013f2d:	b8 80 39 02 c0       	mov    eax,0xc0023980
c0013f32:	80 fb 01             	cmp    bl,0x1
c0013f35:	0f 86 62 01 00 00    	jbe    c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013f3b:	80 fa 1a             	cmp    dl,0x1a
c0013f3e:	0f 84 3f 01 00 00    	je     c0014083 <lookupIntelCPUName(unsigned char, unsigned char)+0x29d>
c0013f44:	80 fa 1c             	cmp    dl,0x1c
c0013f47:	0f 84 3d 01 00 00    	je     c001408a <lookupIntelCPUName(unsigned char, unsigned char)+0x2a4>
c0013f4d:	80 fa 1d             	cmp    dl,0x1d
c0013f50:	0f 84 47 01 00 00    	je     c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013f56:	b8 b0 39 02 c0       	mov    eax,0xc00239b0
c0013f5b:	80 fa 25             	cmp    dl,0x25
c0013f5e:	0f 84 39 01 00 00    	je     c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013f64:	8d 5a da             	lea    ebx,[edx-0x26]
c0013f67:	b8 a0 39 02 c0       	mov    eax,0xc00239a0
c0013f6c:	80 fb 01             	cmp    bl,0x1
c0013f6f:	0f 86 28 01 00 00    	jbe    c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013f75:	b8 c0 39 02 c0       	mov    eax,0xc00239c0
c0013f7a:	80 fa 2a             	cmp    dl,0x2a
c0013f7d:	0f 84 1a 01 00 00    	je     c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013f83:	b8 b0 39 02 c0       	mov    eax,0xc00239b0
c0013f88:	80 fa 2c             	cmp    dl,0x2c
c0013f8b:	0f 84 0c 01 00 00    	je     c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013f91:	b8 c0 39 02 c0       	mov    eax,0xc00239c0
c0013f96:	80 fa 2d             	cmp    dl,0x2d
c0013f99:	0f 84 fe 00 00 00    	je     c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013f9f:	b8 90 39 02 c0       	mov    eax,0xc0023990
c0013fa4:	80 fa 2e             	cmp    dl,0x2e
c0013fa7:	0f 84 f0 00 00 00    	je     c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013fad:	b8 b0 39 02 c0       	mov    eax,0xc00239b0
c0013fb2:	80 fa 2f             	cmp    dl,0x2f
c0013fb5:	0f 84 e2 00 00 00    	je     c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013fbb:	8d 5a cb             	lea    ebx,[edx-0x35]
c0013fbe:	b8 a0 39 02 c0       	mov    eax,0xc00239a0
c0013fc3:	80 fb 01             	cmp    bl,0x1
c0013fc6:	0f 86 d1 00 00 00    	jbe    c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013fcc:	b8 d0 39 02 c0       	mov    eax,0xc00239d0
c0013fd1:	80 fa 37             	cmp    dl,0x37
c0013fd4:	0f 84 c3 00 00 00    	je     c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013fda:	b8 e0 39 02 c0       	mov    eax,0xc00239e0
c0013fdf:	80 fa 3a             	cmp    dl,0x3a
c0013fe2:	0f 84 b5 00 00 00    	je     c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013fe8:	b8 f0 39 02 c0       	mov    eax,0xc00239f0
c0013fed:	80 fa 3c             	cmp    dl,0x3c
c0013ff0:	0f 84 a7 00 00 00    	je     c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0013ff6:	b8 00 3a 02 c0       	mov    eax,0xc0023a00
c0013ffb:	80 fa 3d             	cmp    dl,0x3d
c0013ffe:	0f 84 99 00 00 00    	je     c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014004:	b8 e0 39 02 c0       	mov    eax,0xc00239e0
c0014009:	80 fa 3e             	cmp    dl,0x3e
c001400c:	0f 84 8b 00 00 00    	je     c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014012:	8d 42 bb             	lea    eax,[edx-0x45]
c0014015:	3c 01                	cmp    al,0x1
c0014017:	76 78                	jbe    c0014091 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c0014019:	80 fa 3f             	cmp    dl,0x3f
c001401c:	74 73                	je     c0014091 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c001401e:	80 fa 4a             	cmp    dl,0x4a
c0014021:	74 75                	je     c0014098 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c0014023:	80 fa 4d             	cmp    dl,0x4d
c0014026:	75 11                	jne    c0014039 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c0014028:	eb 6e                	jmp    c0014098 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c001402a:	80 f9 0b             	cmp    cl,0xb
c001402d:	75 0a                	jne    c0014039 <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c001402f:	b8 10 3a 02 c0       	mov    eax,0xc0023a10
c0014034:	80 fa 01             	cmp    dl,0x1
c0014037:	74 64                	je     c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014039:	80 f9 0f             	cmp    cl,0xf
c001403c:	b8 20 3a 02 c0       	mov    eax,0xc0023a20
c0014041:	0f 94 c1             	sete   cl
c0014044:	80 fa 02             	cmp    dl,0x2
c0014047:	0f 96 c3             	setbe  bl
c001404a:	84 cb                	test   bl,cl
c001404c:	75 4f                	jne    c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001404e:	8d 42 fd             	lea    eax,[edx-0x3]
c0014051:	3c 01                	cmp    al,0x1
c0014053:	0f 96 c0             	setbe  al
c0014056:	80 fa 06             	cmp    dl,0x6
c0014059:	0f 94 c2             	sete   dl
c001405c:	09 c2                	or     edx,eax
c001405e:	b8 fa 20 02 c0       	mov    eax,0xc00220fa
c0014063:	84 ca                	test   dl,cl
c0014065:	74 36                	je     c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014067:	b8 30 3a 02 c0       	mov    eax,0xc0023a30
c001406c:	eb 2f                	jmp    c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001406e:	b8 10 39 02 c0       	mov    eax,0xc0023910
c0014073:	eb 28                	jmp    c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014075:	b8 40 39 02 c0       	mov    eax,0xc0023940
c001407a:	eb 21                	jmp    c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001407c:	b8 60 39 02 c0       	mov    eax,0xc0023960
c0014081:	eb 1a                	jmp    c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014083:	b8 90 39 02 c0       	mov    eax,0xc0023990
c0014088:	eb 13                	jmp    c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001408a:	b8 a0 39 02 c0       	mov    eax,0xc00239a0
c001408f:	eb 0c                	jmp    c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014091:	b8 f0 39 02 c0       	mov    eax,0xc00239f0
c0014096:	eb 05                	jmp    c001409d <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014098:	b8 d0 39 02 c0       	mov    eax,0xc00239d0
c001409d:	5b                   	pop    ebx
c001409e:	c3                   	ret    

c001409f <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c001409f:	60                   	pusha  
c00140a0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00140a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00140a8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00140ac:	9c                   	pushf  
c00140ad:	fa                   	cli    
c00140ae:	0f 09                	wbinvd 
c00140b0:	0f 30                	wrmsr  
c00140b2:	9d                   	popf   
c00140b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00140b7:	89 02                	mov    DWORD PTR [edx],eax
c00140b9:	61                   	popa   
c00140ba:	c3                   	ret    

c00140bb <AMD_K6_read_msr(unsigned int, REGS*)>:
c00140bb:	60                   	pusha  
c00140bc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00140c0:	9c                   	pushf  
c00140c1:	fa                   	cli    
c00140c2:	0f 09                	wbinvd 
c00140c4:	31 c0                	xor    eax,eax
c00140c6:	31 d2                	xor    edx,edx
c00140c8:	0f 32                	rdmsr  
c00140ca:	9d                   	popf   
c00140cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00140cf:	89 02                	mov    DWORD PTR [edx],eax
c00140d1:	61                   	popa   
c00140d2:	c3                   	ret    

c00140d3 <AMD_K6_writeback(int, int, int)>:
c00140d3:	56                   	push   esi
c00140d4:	53                   	push   ebx
c00140d5:	83 ec 10             	sub    esp,0x10
c00140d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140dc:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c00140e1:	75 5d                	jne    c0014140 <AMD_K6_writeback(int, int, int)+0x6d>
c00140e3:	83 f8 08             	cmp    eax,0x8
c00140e6:	75 09                	jne    c00140f1 <AMD_K6_writeback(int, int, int)+0x1e>
c00140e8:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c00140ed:	7e 13                	jle    c0014102 <AMD_K6_writeback(int, int, int)+0x2f>
c00140ef:	eb 30                	jmp    c0014121 <AMD_K6_writeback(int, int, int)+0x4e>
c00140f1:	83 f8 06             	cmp    eax,0x6
c00140f4:	7c 4a                	jl     c0014140 <AMD_K6_writeback(int, int, int)+0x6d>
c00140f6:	83 f8 07             	cmp    eax,0x7
c00140f9:	7e 07                	jle    c0014102 <AMD_K6_writeback(int, int, int)+0x2f>
c00140fb:	83 f8 09             	cmp    eax,0x9
c00140fe:	74 21                	je     c0014121 <AMD_K6_writeback(int, int, int)+0x4e>
c0014100:	eb 3e                	jmp    c0014140 <AMD_K6_writeback(int, int, int)+0x6d>
c0014102:	89 e6                	mov    esi,esp
c0014104:	8b 1d 64 41 02 c0    	mov    ebx,DWORD PTR ds:0xc0024164
c001410a:	c1 eb 15             	shr    ebx,0x15
c001410d:	56                   	push   esi
c001410e:	68 82 00 00 c0       	push   0xc0000082
c0014113:	e8 a3 ff ff ff       	call   c00140bb <AMD_K6_read_msr(unsigned int, REGS*)>
c0014118:	56                   	push   esi
c0014119:	83 e3 7e             	and    ebx,0x7e
c001411c:	6a 00                	push   0x0
c001411e:	53                   	push   ebx
c001411f:	eb 12                	jmp    c0014133 <AMD_K6_writeback(int, int, int)+0x60>
c0014121:	89 e3                	mov    ebx,esp
c0014123:	53                   	push   ebx
c0014124:	68 82 00 00 c0       	push   0xc0000082
c0014129:	e8 8d ff ff ff       	call   c00140bb <AMD_K6_read_msr(unsigned int, REGS*)>
c001412e:	53                   	push   ebx
c001412f:	6a 00                	push   0x0
c0014131:	6a 00                	push   0x0
c0014133:	68 82 00 00 c0       	push   0xc0000082
c0014138:	e8 62 ff ff ff       	call   c001409f <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c001413d:	83 c4 18             	add    esp,0x18
c0014140:	83 c4 10             	add    esp,0x10
c0014143:	5b                   	pop    ebx
c0014144:	5e                   	pop    esi
c0014145:	c3                   	ret    

c0014146 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0014146:	55                   	push   ebp
c0014147:	57                   	push   edi
c0014148:	56                   	push   esi
c0014149:	53                   	push   ebx
c001414a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001414e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014152:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014156:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001415a:	39 05 40 3b 02 c0    	cmp    DWORD PTR ds:0xc0023b40,eax
c0014160:	75 23                	jne    c0014185 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0014162:	a1 6c 4b 02 c0       	mov    eax,ds:0xc0024b6c
c0014167:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001416b:	89 06                	mov    DWORD PTR [esi],eax
c001416d:	a1 68 4b 02 c0       	mov    eax,ds:0xc0024b68
c0014172:	89 07                	mov    DWORD PTR [edi],eax
c0014174:	a1 64 4b 02 c0       	mov    eax,ds:0xc0024b64
c0014179:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c001417c:	a1 60 4b 02 c0       	mov    eax,ds:0xc0024b60
c0014181:	89 02                	mov    DWORD PTR [edx],eax
c0014183:	eb 3f                	jmp    c00141c4 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0014185:	31 c9                	xor    ecx,ecx
c0014187:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001418b:	0f a2                	cpuid  
c001418d:	89 06                	mov    DWORD PTR [esi],eax
c001418f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014193:	89 1f                	mov    DWORD PTR [edi],ebx
c0014195:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0014198:	89 10                	mov    DWORD PTR [eax],edx
c001419a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001419e:	a3 40 3b 02 c0       	mov    ds:0xc0023b40,eax
c00141a3:	8b 06                	mov    eax,DWORD PTR [esi]
c00141a5:	a3 6c 4b 02 c0       	mov    ds:0xc0024b6c,eax
c00141aa:	8b 07                	mov    eax,DWORD PTR [edi]
c00141ac:	a3 68 4b 02 c0       	mov    ds:0xc0024b68,eax
c00141b1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00141b4:	a3 64 4b 02 c0       	mov    ds:0xc0024b64,eax
c00141b9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00141bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00141bf:	a3 60 4b 02 c0       	mov    ds:0xc0024b60,eax
c00141c4:	5b                   	pop    ebx
c00141c5:	5e                   	pop    esi
c00141c6:	5f                   	pop    edi
c00141c7:	5d                   	pop    ebp
c00141c8:	c3                   	ret    

c00141c9 <cpuidCheckEDX(unsigned int)>:
c00141c9:	83 ec 10             	sub    esp,0x10
c00141cc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00141d0:	50                   	push   eax
c00141d1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00141d5:	50                   	push   eax
c00141d6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00141da:	50                   	push   eax
c00141db:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00141df:	50                   	push   eax
c00141e0:	6a 01                	push   0x1
c00141e2:	e8 5f ff ff ff       	call   c0014146 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00141e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00141eb:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c00141ef:	0f 95 c0             	setne  al
c00141f2:	83 c4 24             	add    esp,0x24
c00141f5:	c3                   	ret    

c00141f6 <cpuidCheckECX(unsigned int)>:
c00141f6:	83 ec 10             	sub    esp,0x10
c00141f9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00141fd:	50                   	push   eax
c00141fe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014202:	50                   	push   eax
c0014203:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014207:	50                   	push   eax
c0014208:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001420c:	50                   	push   eax
c001420d:	6a 01                	push   0x1
c001420f:	e8 32 ff ff ff       	call   c0014146 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014214:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014218:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001421c:	0f 95 c0             	setne  al
c001421f:	83 c4 24             	add    esp,0x24
c0014222:	c3                   	ret    

c0014223 <cpuidCheckExtendedEBX(unsigned int)>:
c0014223:	83 ec 10             	sub    esp,0x10
c0014226:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001422a:	50                   	push   eax
c001422b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001422f:	50                   	push   eax
c0014230:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014234:	50                   	push   eax
c0014235:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014239:	50                   	push   eax
c001423a:	6a 07                	push   0x7
c001423c:	e8 05 ff ff ff       	call   c0014146 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014241:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014245:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0014249:	0f 95 c0             	setne  al
c001424c:	83 c4 24             	add    esp,0x24
c001424f:	c3                   	ret    

c0014250 <cpuidCheckExtendedECX(unsigned int)>:
c0014250:	83 ec 10             	sub    esp,0x10
c0014253:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014257:	50                   	push   eax
c0014258:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001425c:	50                   	push   eax
c001425d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014261:	50                   	push   eax
c0014262:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014266:	50                   	push   eax
c0014267:	6a 07                	push   0x7
c0014269:	e8 d8 fe ff ff       	call   c0014146 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001426e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014272:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0014276:	0f 95 c0             	setne  al
c0014279:	83 c4 24             	add    esp,0x24
c001427c:	c3                   	ret    

c001427d <getCPUNumber()>:
c001427d:	31 c0                	xor    eax,eax
c001427f:	c3                   	ret    

c0014280 <thisCPU()>:
c0014280:	e8 f8 ff ff ff       	call   c001427d <getCPUNumber()>
c0014285:	8b 15 28 41 02 c0    	mov    edx,DWORD PTR ds:0xc0024128
c001428b:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c0014292:	c3                   	ret    
c0014293:	90                   	nop

c0014294 <CPU::CPU()>:
c0014294:	83 ec 0c             	sub    esp,0xc
c0014297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001429b:	83 ec 08             	sub    esp,0x8
c001429e:	68 fa 20 02 c0       	push   0xc00220fa
c00142a3:	50                   	push   eax
c00142a4:	e8 b5 c4 ff ff       	call   c001075e <Device::Device(char const*)>
c00142a9:	83 c4 10             	add    esp,0x10
c00142ac:	ba d4 21 02 c0       	mov    edx,0xc00221d4
c00142b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142b5:	89 10                	mov    DWORD PTR [eax],edx
c00142b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142bb:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00142c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142c9:	05 78 01 00 00       	add    eax,0x178
c00142ce:	83 ec 0c             	sub    esp,0xc
c00142d1:	50                   	push   eax
c00142d2:	e8 61 74 ff ff       	call   c000b738 <GDT::GDT()>
c00142d7:	83 c4 10             	add    esp,0x10
c00142da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142de:	05 7c 09 00 00       	add    eax,0x97c
c00142e3:	83 ec 0c             	sub    esp,0xc
c00142e6:	50                   	push   eax
c00142e7:	e8 ac 76 ff ff       	call   c000b998 <IDT::IDT()>
c00142ec:	83 c4 10             	add    esp,0x10
c00142ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142f3:	05 7c 11 00 00       	add    eax,0x117c
c00142f8:	83 ec 0c             	sub    esp,0xc
c00142fb:	50                   	push   eax
c00142fc:	e8 09 97 ff ff       	call   c000da0a <TSS::TSS()>
c0014301:	83 c4 10             	add    esp,0x10
c0014304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014308:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c001430f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014313:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c001431d:	90                   	nop
c001431e:	83 c4 0c             	add    esp,0xc
c0014321:	c3                   	ret    

c0014322 <CPU::displayFeatures()>:
c0014322:	53                   	push   ebx
c0014323:	83 ec 10             	sub    esp,0x10
c0014326:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001432a:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0014330:	68 08 1e 02 c0       	push   0xc0021e08
c0014335:	e8 1f ae ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001433a:	59                   	pop    ecx
c001433b:	58                   	pop    eax
c001433c:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0014342:	50                   	push   eax
c0014343:	68 19 1e 02 c0       	push   0xc0021e19
c0014348:	e8 0c ae ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001434d:	58                   	pop    eax
c001434e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014354:	c1 e8 0e             	shr    eax,0xe
c0014357:	5a                   	pop    edx
c0014358:	0f b6 c0             	movzx  eax,al
c001435b:	50                   	push   eax
c001435c:	68 2a 1e 02 c0       	push   0xc0021e2a
c0014361:	e8 f3 ad ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014366:	59                   	pop    ecx
c0014367:	58                   	pop    eax
c0014368:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001436e:	66 c1 e8 06          	shr    ax,0x6
c0014372:	0f b6 c0             	movzx  eax,al
c0014375:	50                   	push   eax
c0014376:	68 3b 1e 02 c0       	push   0xc0021e3b
c001437b:	e8 d9 ad ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014380:	c7 04 24 4e 22 02 c0 	mov    DWORD PTR [esp],0xc002224e
c0014387:	e8 cd ad ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001438c:	83 c4 10             	add    esp,0x10
c001438f:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c0014394:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c001439b:	74 05                	je     c00143a2 <CPU::displayFeatures()+0x80>
c001439d:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c00143a2:	52                   	push   edx
c00143a3:	52                   	push   edx
c00143a4:	50                   	push   eax
c00143a5:	68 4c 1e 02 c0       	push   0xc0021e4c
c00143aa:	e8 aa ad ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00143af:	83 c4 10             	add    esp,0x10
c00143b2:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c00143b7:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c00143be:	78 05                	js     c00143c5 <CPU::displayFeatures()+0xa3>
c00143c0:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c00143c5:	51                   	push   ecx
c00143c6:	51                   	push   ecx
c00143c7:	50                   	push   eax
c00143c8:	68 63 1e 02 c0       	push   0xc0021e63
c00143cd:	e8 87 ad ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00143d2:	83 c4 10             	add    esp,0x10
c00143d5:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c00143da:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00143e1:	75 05                	jne    c00143e8 <CPU::displayFeatures()+0xc6>
c00143e3:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c00143e8:	52                   	push   edx
c00143e9:	52                   	push   edx
c00143ea:	50                   	push   eax
c00143eb:	68 7a 1e 02 c0       	push   0xc0021e7a
c00143f0:	e8 64 ad ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00143f5:	83 c4 10             	add    esp,0x10
c00143f8:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c00143fd:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0014404:	75 05                	jne    c001440b <CPU::displayFeatures()+0xe9>
c0014406:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c001440b:	51                   	push   ecx
c001440c:	51                   	push   ecx
c001440d:	50                   	push   eax
c001440e:	68 91 1e 02 c0       	push   0xc0021e91
c0014413:	e8 41 ad ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014418:	83 c4 10             	add    esp,0x10
c001441b:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c0014420:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014427:	75 05                	jne    c001442e <CPU::displayFeatures()+0x10c>
c0014429:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c001442e:	52                   	push   edx
c001442f:	52                   	push   edx
c0014430:	50                   	push   eax
c0014431:	68 a8 1e 02 c0       	push   0xc0021ea8
c0014436:	e8 1e ad ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001443b:	83 c4 10             	add    esp,0x10
c001443e:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c0014443:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001444a:	75 05                	jne    c0014451 <CPU::displayFeatures()+0x12f>
c001444c:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c0014451:	51                   	push   ecx
c0014452:	51                   	push   ecx
c0014453:	50                   	push   eax
c0014454:	68 bf 1e 02 c0       	push   0xc0021ebf
c0014459:	e8 fb ac ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001445e:	83 c4 10             	add    esp,0x10
c0014461:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c0014466:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001446d:	75 05                	jne    c0014474 <CPU::displayFeatures()+0x152>
c001446f:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c0014474:	52                   	push   edx
c0014475:	52                   	push   edx
c0014476:	50                   	push   eax
c0014477:	68 d6 1e 02 c0       	push   0xc0021ed6
c001447c:	e8 d8 ac ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014481:	83 c4 10             	add    esp,0x10
c0014484:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c0014489:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0014490:	75 05                	jne    c0014497 <CPU::displayFeatures()+0x175>
c0014492:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c0014497:	51                   	push   ecx
c0014498:	51                   	push   ecx
c0014499:	50                   	push   eax
c001449a:	68 ed 1e 02 c0       	push   0xc0021eed
c001449f:	e8 b5 ac ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00144a4:	83 c4 10             	add    esp,0x10
c00144a7:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c00144ac:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00144b3:	75 05                	jne    c00144ba <CPU::displayFeatures()+0x198>
c00144b5:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c00144ba:	52                   	push   edx
c00144bb:	52                   	push   edx
c00144bc:	50                   	push   eax
c00144bd:	68 04 1f 02 c0       	push   0xc0021f04
c00144c2:	e8 92 ac ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00144c7:	83 c4 10             	add    esp,0x10
c00144ca:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c00144cf:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00144d6:	75 05                	jne    c00144dd <CPU::displayFeatures()+0x1bb>
c00144d8:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c00144dd:	51                   	push   ecx
c00144de:	51                   	push   ecx
c00144df:	50                   	push   eax
c00144e0:	68 1b 1f 02 c0       	push   0xc0021f1b
c00144e5:	e8 6f ac ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00144ea:	83 c4 10             	add    esp,0x10
c00144ed:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c00144f2:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00144f9:	75 05                	jne    c0014500 <CPU::displayFeatures()+0x1de>
c00144fb:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c0014500:	52                   	push   edx
c0014501:	52                   	push   edx
c0014502:	50                   	push   eax
c0014503:	68 32 1f 02 c0       	push   0xc0021f32
c0014508:	e8 4c ac ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001450d:	83 c4 10             	add    esp,0x10
c0014510:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c0014515:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c001451c:	75 05                	jne    c0014523 <CPU::displayFeatures()+0x201>
c001451e:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c0014523:	51                   	push   ecx
c0014524:	51                   	push   ecx
c0014525:	50                   	push   eax
c0014526:	68 49 1f 02 c0       	push   0xc0021f49
c001452b:	e8 29 ac ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014530:	83 c4 10             	add    esp,0x10
c0014533:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c0014538:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001453f:	75 05                	jne    c0014546 <CPU::displayFeatures()+0x224>
c0014541:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c0014546:	52                   	push   edx
c0014547:	52                   	push   edx
c0014548:	50                   	push   eax
c0014549:	68 60 1f 02 c0       	push   0xc0021f60
c001454e:	e8 06 ac ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014553:	83 c4 10             	add    esp,0x10
c0014556:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c001455b:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0014562:	78 05                	js     c0014569 <CPU::displayFeatures()+0x247>
c0014564:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c0014569:	51                   	push   ecx
c001456a:	51                   	push   ecx
c001456b:	50                   	push   eax
c001456c:	68 77 1f 02 c0       	push   0xc0021f77
c0014571:	e8 e3 ab ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014576:	83 c4 10             	add    esp,0x10
c0014579:	b8 ae 0a 02 c0       	mov    eax,0xc0020aae
c001457e:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0014585:	75 05                	jne    c001458c <CPU::displayFeatures()+0x26a>
c0014587:	b8 b2 0a 02 c0       	mov    eax,0xc0020ab2
c001458c:	52                   	push   edx
c001458d:	52                   	push   edx
c001458e:	50                   	push   eax
c001458f:	68 8e 1f 02 c0       	push   0xc0021f8e
c0014594:	e8 c0 ab ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0014599:	83 c4 18             	add    esp,0x18
c001459c:	5b                   	pop    ebx
c001459d:	c3                   	ret    

c001459e <CPU::detectFeatures()>:
c001459e:	55                   	push   ebp
c001459f:	57                   	push   edi
c00145a0:	56                   	push   esi
c00145a1:	53                   	push   ebx
c00145a2:	83 ec 50             	sub    esp,0x50
c00145a5:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00145a9:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c00145b3:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c00145ba:	6a 0d                	push   0xd
c00145bc:	6a 00                	push   0x0
c00145be:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c00145c4:	57                   	push   edi
c00145c5:	e8 3e c0 fe ff       	call   c0000608 <memset>
c00145ca:	a1 28 41 02 c0       	mov    eax,ds:0xc0024128
c00145cf:	83 c4 10             	add    esp,0x10
c00145d2:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00145d9:	0f 84 04 09 00 00    	je     c0014ee3 <CPU::detectFeatures()+0x945>
c00145df:	83 ec 0c             	sub    esp,0xc
c00145e2:	6a 10                	push   0x10
c00145e4:	e8 e0 fb ff ff       	call   c00141c9 <cpuidCheckEDX(unsigned int)>
c00145e9:	83 e0 01             	and    eax,0x1
c00145ec:	8d 14 00             	lea    edx,[eax+eax*1]
c00145ef:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00145f5:	83 e0 fd             	and    eax,0xfffffffd
c00145f8:	09 d0                	or     eax,edx
c00145fa:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014600:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0014607:	e8 bd fb ff ff       	call   c00141c9 <cpuidCheckEDX(unsigned int)>
c001460c:	83 e0 01             	and    eax,0x1
c001460f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014616:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001461c:	83 e0 fb             	and    eax,0xfffffffb
c001461f:	09 d0                	or     eax,edx
c0014621:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014627:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001462e:	e8 96 fb ff ff       	call   c00141c9 <cpuidCheckEDX(unsigned int)>
c0014633:	83 e0 01             	and    eax,0x1
c0014636:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001463d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014643:	83 e0 f7             	and    eax,0xfffffff7
c0014646:	09 d0                	or     eax,edx
c0014648:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001464e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0014655:	e8 6f fb ff ff       	call   c00141c9 <cpuidCheckEDX(unsigned int)>
c001465a:	83 e0 01             	and    eax,0x1
c001465d:	c1 e0 04             	shl    eax,0x4
c0014660:	88 c2                	mov    dl,al
c0014662:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014668:	83 e0 ef             	and    eax,0xffffffef
c001466b:	09 d0                	or     eax,edx
c001466d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014673:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001467a:	e8 4a fb ff ff       	call   c00141c9 <cpuidCheckEDX(unsigned int)>
c001467f:	83 e0 01             	and    eax,0x1
c0014682:	c1 e0 05             	shl    eax,0x5
c0014685:	88 c2                	mov    dl,al
c0014687:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001468d:	83 e0 df             	and    eax,0xffffffdf
c0014690:	09 d0                	or     eax,edx
c0014692:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014698:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001469f:	e8 25 fb ff ff       	call   c00141c9 <cpuidCheckEDX(unsigned int)>
c00146a4:	83 e0 01             	and    eax,0x1
c00146a7:	8d 14 00             	lea    edx,[eax+eax*1]
c00146aa:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00146b0:	83 e0 fd             	and    eax,0xfffffffd
c00146b3:	09 d0                	or     eax,edx
c00146b5:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00146bb:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00146c2:	e8 02 fb ff ff       	call   c00141c9 <cpuidCheckEDX(unsigned int)>
c00146c7:	83 e0 01             	and    eax,0x1
c00146ca:	c1 e0 06             	shl    eax,0x6
c00146cd:	88 c2                	mov    dl,al
c00146cf:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00146d5:	83 e0 bf             	and    eax,0xffffffbf
c00146d8:	09 d0                	or     eax,edx
c00146da:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00146e0:	58                   	pop    eax
c00146e1:	8d 74 24 28          	lea    esi,[esp+0x28]
c00146e5:	56                   	push   esi
c00146e6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00146ea:	55                   	push   ebp
c00146eb:	8d 44 24 28          	lea    eax,[esp+0x28]
c00146ef:	50                   	push   eax
c00146f0:	8d 54 24 28          	lea    edx,[esp+0x28]
c00146f4:	52                   	push   edx
c00146f5:	6a 00                	push   0x0
c00146f7:	e8 4a fa ff ff       	call   c0014146 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00146fc:	83 c4 1c             	add    esp,0x1c
c00146ff:	6a 04                	push   0x4
c0014701:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0014705:	50                   	push   eax
c0014706:	57                   	push   edi
c0014707:	e8 c6 be fe ff       	call   c00005d2 <memcpy>
c001470c:	83 c4 0c             	add    esp,0xc
c001470f:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0014715:	6a 04                	push   0x4
c0014717:	56                   	push   esi
c0014718:	50                   	push   eax
c0014719:	e8 b4 be fe ff       	call   c00005d2 <memcpy>
c001471e:	83 c4 0c             	add    esp,0xc
c0014721:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0014727:	6a 04                	push   0x4
c0014729:	55                   	push   ebp
c001472a:	50                   	push   eax
c001472b:	e8 a2 be fe ff       	call   c00005d2 <memcpy>
c0014730:	58                   	pop    eax
c0014731:	5a                   	pop    edx
c0014732:	68 a5 1f 02 c0       	push   0xc0021fa5
c0014737:	57                   	push   edi
c0014738:	e8 bb bf fe ff       	call   c00006f8 <strcmp>
c001473d:	83 c4 10             	add    esp,0x10
c0014740:	85 c0                	test   eax,eax
c0014742:	75 0f                	jne    c0014753 <CPU::detectFeatures()+0x1b5>
c0014744:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001474e:	e9 22 02 00 00       	jmp    c0014975 <CPU::detectFeatures()+0x3d7>
c0014753:	50                   	push   eax
c0014754:	50                   	push   eax
c0014755:	68 b2 1f 02 c0       	push   0xc0021fb2
c001475a:	57                   	push   edi
c001475b:	e8 98 bf fe ff       	call   c00006f8 <strcmp>
c0014760:	83 c4 10             	add    esp,0x10
c0014763:	85 c0                	test   eax,eax
c0014765:	74 dd                	je     c0014744 <CPU::detectFeatures()+0x1a6>
c0014767:	51                   	push   ecx
c0014768:	51                   	push   ecx
c0014769:	68 bf 1f 02 c0       	push   0xc0021fbf
c001476e:	57                   	push   edi
c001476f:	e8 84 bf fe ff       	call   c00006f8 <strcmp>
c0014774:	83 c4 10             	add    esp,0x10
c0014777:	85 c0                	test   eax,eax
c0014779:	74 2a                	je     c00147a5 <CPU::detectFeatures()+0x207>
c001477b:	52                   	push   edx
c001477c:	52                   	push   edx
c001477d:	68 cc 1f 02 c0       	push   0xc0021fcc
c0014782:	57                   	push   edi
c0014783:	e8 70 bf fe ff       	call   c00006f8 <strcmp>
c0014788:	83 c4 10             	add    esp,0x10
c001478b:	85 c0                	test   eax,eax
c001478d:	74 16                	je     c00147a5 <CPU::detectFeatures()+0x207>
c001478f:	50                   	push   eax
c0014790:	50                   	push   eax
c0014791:	68 d9 1f 02 c0       	push   0xc0021fd9
c0014796:	57                   	push   edi
c0014797:	e8 5c bf fe ff       	call   c00006f8 <strcmp>
c001479c:	83 c4 10             	add    esp,0x10
c001479f:	85 c0                	test   eax,eax
c00147a1:	74 48                	je     c00147eb <CPU::detectFeatures()+0x24d>
c00147a3:	eb 0f                	jmp    c00147b4 <CPU::detectFeatures()+0x216>
c00147a5:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c00147af:	e9 c1 01 00 00       	jmp    c0014975 <CPU::detectFeatures()+0x3d7>
c00147b4:	50                   	push   eax
c00147b5:	50                   	push   eax
c00147b6:	68 e6 1f 02 c0       	push   0xc0021fe6
c00147bb:	57                   	push   edi
c00147bc:	e8 37 bf fe ff       	call   c00006f8 <strcmp>
c00147c1:	83 c4 10             	add    esp,0x10
c00147c4:	85 c0                	test   eax,eax
c00147c6:	74 23                	je     c00147eb <CPU::detectFeatures()+0x24d>
c00147c8:	50                   	push   eax
c00147c9:	50                   	push   eax
c00147ca:	68 f3 1f 02 c0       	push   0xc0021ff3
c00147cf:	57                   	push   edi
c00147d0:	e8 23 bf fe ff       	call   c00006f8 <strcmp>
c00147d5:	83 c4 10             	add    esp,0x10
c00147d8:	85 c0                	test   eax,eax
c00147da:	75 1e                	jne    c00147fa <CPU::detectFeatures()+0x25c>
c00147dc:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00147e6:	e9 8a 01 00 00       	jmp    c0014975 <CPU::detectFeatures()+0x3d7>
c00147eb:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00147f5:	e9 7b 01 00 00       	jmp    c0014975 <CPU::detectFeatures()+0x3d7>
c00147fa:	50                   	push   eax
c00147fb:	50                   	push   eax
c00147fc:	68 00 20 02 c0       	push   0xc0022000
c0014801:	57                   	push   edi
c0014802:	e8 f1 be fe ff       	call   c00006f8 <strcmp>
c0014807:	83 c4 10             	add    esp,0x10
c001480a:	85 c0                	test   eax,eax
c001480c:	75 0f                	jne    c001481d <CPU::detectFeatures()+0x27f>
c001480e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0014818:	e9 58 01 00 00       	jmp    c0014975 <CPU::detectFeatures()+0x3d7>
c001481d:	50                   	push   eax
c001481e:	50                   	push   eax
c001481f:	68 bf 1f 02 c0       	push   0xc0021fbf
c0014824:	57                   	push   edi
c0014825:	e8 ce be fe ff       	call   c00006f8 <strcmp>
c001482a:	83 c4 10             	add    esp,0x10
c001482d:	85 c0                	test   eax,eax
c001482f:	75 0f                	jne    c0014840 <CPU::detectFeatures()+0x2a2>
c0014831:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001483b:	e9 35 01 00 00       	jmp    c0014975 <CPU::detectFeatures()+0x3d7>
c0014840:	50                   	push   eax
c0014841:	50                   	push   eax
c0014842:	68 0d 20 02 c0       	push   0xc002200d
c0014847:	57                   	push   edi
c0014848:	e8 ab be fe ff       	call   c00006f8 <strcmp>
c001484d:	83 c4 10             	add    esp,0x10
c0014850:	85 c0                	test   eax,eax
c0014852:	75 0f                	jne    c0014863 <CPU::detectFeatures()+0x2c5>
c0014854:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001485e:	e9 12 01 00 00       	jmp    c0014975 <CPU::detectFeatures()+0x3d7>
c0014863:	51                   	push   ecx
c0014864:	51                   	push   ecx
c0014865:	68 1a 20 02 c0       	push   0xc002201a
c001486a:	57                   	push   edi
c001486b:	e8 88 be fe ff       	call   c00006f8 <strcmp>
c0014870:	83 c4 10             	add    esp,0x10
c0014873:	85 c0                	test   eax,eax
c0014875:	75 0f                	jne    c0014886 <CPU::detectFeatures()+0x2e8>
c0014877:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0014881:	e9 ef 00 00 00       	jmp    c0014975 <CPU::detectFeatures()+0x3d7>
c0014886:	52                   	push   edx
c0014887:	52                   	push   edx
c0014888:	68 27 20 02 c0       	push   0xc0022027
c001488d:	57                   	push   edi
c001488e:	e8 65 be fe ff       	call   c00006f8 <strcmp>
c0014893:	83 c4 10             	add    esp,0x10
c0014896:	85 c0                	test   eax,eax
c0014898:	75 0f                	jne    c00148a9 <CPU::detectFeatures()+0x30b>
c001489a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c00148a4:	e9 cc 00 00 00       	jmp    c0014975 <CPU::detectFeatures()+0x3d7>
c00148a9:	50                   	push   eax
c00148aa:	50                   	push   eax
c00148ab:	68 34 20 02 c0       	push   0xc0022034
c00148b0:	57                   	push   edi
c00148b1:	e8 42 be fe ff       	call   c00006f8 <strcmp>
c00148b6:	83 c4 10             	add    esp,0x10
c00148b9:	85 c0                	test   eax,eax
c00148bb:	75 0f                	jne    c00148cc <CPU::detectFeatures()+0x32e>
c00148bd:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00148c7:	e9 a9 00 00 00       	jmp    c0014975 <CPU::detectFeatures()+0x3d7>
c00148cc:	50                   	push   eax
c00148cd:	50                   	push   eax
c00148ce:	68 41 20 02 c0       	push   0xc0022041
c00148d3:	57                   	push   edi
c00148d4:	e8 1f be fe ff       	call   c00006f8 <strcmp>
c00148d9:	83 c4 10             	add    esp,0x10
c00148dc:	85 c0                	test   eax,eax
c00148de:	75 0f                	jne    c00148ef <CPU::detectFeatures()+0x351>
c00148e0:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00148ea:	e9 86 00 00 00       	jmp    c0014975 <CPU::detectFeatures()+0x3d7>
c00148ef:	50                   	push   eax
c00148f0:	50                   	push   eax
c00148f1:	68 4e 20 02 c0       	push   0xc002204e
c00148f6:	57                   	push   edi
c00148f7:	e8 fc bd fe ff       	call   c00006f8 <strcmp>
c00148fc:	83 c4 10             	add    esp,0x10
c00148ff:	85 c0                	test   eax,eax
c0014901:	75 0c                	jne    c001490f <CPU::detectFeatures()+0x371>
c0014903:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001490d:	eb 66                	jmp    c0014975 <CPU::detectFeatures()+0x3d7>
c001490f:	50                   	push   eax
c0014910:	50                   	push   eax
c0014911:	68 5b 20 02 c0       	push   0xc002205b
c0014916:	57                   	push   edi
c0014917:	e8 dc bd fe ff       	call   c00006f8 <strcmp>
c001491c:	83 c4 10             	add    esp,0x10
c001491f:	85 c0                	test   eax,eax
c0014921:	75 0c                	jne    c001492f <CPU::detectFeatures()+0x391>
c0014923:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001492d:	eb 46                	jmp    c0014975 <CPU::detectFeatures()+0x3d7>
c001492f:	50                   	push   eax
c0014930:	50                   	push   eax
c0014931:	68 68 20 02 c0       	push   0xc0022068
c0014936:	57                   	push   edi
c0014937:	e8 bc bd fe ff       	call   c00006f8 <strcmp>
c001493c:	83 c4 10             	add    esp,0x10
c001493f:	85 c0                	test   eax,eax
c0014941:	74 e0                	je     c0014923 <CPU::detectFeatures()+0x385>
c0014943:	50                   	push   eax
c0014944:	50                   	push   eax
c0014945:	68 75 20 02 c0       	push   0xc0022075
c001494a:	57                   	push   edi
c001494b:	e8 a8 bd fe ff       	call   c00006f8 <strcmp>
c0014950:	83 c4 10             	add    esp,0x10
c0014953:	85 c0                	test   eax,eax
c0014955:	74 cc                	je     c0014923 <CPU::detectFeatures()+0x385>
c0014957:	51                   	push   ecx
c0014958:	51                   	push   ecx
c0014959:	68 82 20 02 c0       	push   0xc0022082
c001495e:	57                   	push   edi
c001495f:	e8 94 bd fe ff       	call   c00006f8 <strcmp>
c0014964:	83 c4 10             	add    esp,0x10
c0014967:	85 c0                	test   eax,eax
c0014969:	74 b8                	je     c0014923 <CPU::detectFeatures()+0x385>
c001496b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0014975:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001497a:	0f 86 be 00 00 00    	jbe    c0014a3e <CPU::detectFeatures()+0x4a0>
c0014980:	83 ec 0c             	sub    esp,0xc
c0014983:	68 80 00 00 00       	push   0x80
c0014988:	e8 96 f8 ff ff       	call   c0014223 <cpuidCheckExtendedEBX(unsigned int)>
c001498d:	83 e0 01             	and    eax,0x1
c0014990:	c1 e0 06             	shl    eax,0x6
c0014993:	88 c2                	mov    dl,al
c0014995:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001499b:	83 e0 bf             	and    eax,0xffffffbf
c001499e:	09 d0                	or     eax,edx
c00149a0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00149a6:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00149ad:	e8 71 f8 ff ff       	call   c0014223 <cpuidCheckExtendedEBX(unsigned int)>
c00149b2:	83 e0 01             	and    eax,0x1
c00149b5:	c1 e0 04             	shl    eax,0x4
c00149b8:	88 c2                	mov    dl,al
c00149ba:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00149c0:	83 e0 ef             	and    eax,0xffffffef
c00149c3:	09 d0                	or     eax,edx
c00149c5:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00149cb:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00149d2:	e8 4c f8 ff ff       	call   c0014223 <cpuidCheckExtendedEBX(unsigned int)>
c00149d7:	c1 e0 07             	shl    eax,0x7
c00149da:	88 c2                	mov    dl,al
c00149dc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00149e2:	83 e0 7f             	and    eax,0x7f
c00149e5:	09 d0                	or     eax,edx
c00149e7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00149ed:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00149f4:	e8 57 f8 ff ff       	call   c0014250 <cpuidCheckExtendedECX(unsigned int)>
c00149f9:	83 e0 01             	and    eax,0x1
c00149fc:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014a03:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014a09:	83 e0 f7             	and    eax,0xfffffff7
c0014a0c:	09 d0                	or     eax,edx
c0014a0e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014a14:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0014a1b:	e8 30 f8 ff ff       	call   c0014250 <cpuidCheckExtendedECX(unsigned int)>
c0014a20:	83 c4 10             	add    esp,0x10
c0014a23:	83 e0 01             	and    eax,0x1
c0014a26:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014a2d:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014a33:	83 e0 fb             	and    eax,0xfffffffb
c0014a36:	09 d0                	or     eax,edx
c0014a38:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014a3e:	83 ec 0c             	sub    esp,0xc
c0014a41:	56                   	push   esi
c0014a42:	55                   	push   ebp
c0014a43:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0014a47:	57                   	push   edi
c0014a48:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014a4c:	50                   	push   eax
c0014a4d:	6a 01                	push   0x1
c0014a4f:	e8 f2 f6 ff ff       	call   c0014146 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014a54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0014a58:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c0014a5e:	88 c1                	mov    cl,al
c0014a60:	83 e2 f0             	and    edx,0xfffffff0
c0014a63:	83 e1 0f             	and    ecx,0xf
c0014a66:	09 ca                	or     edx,ecx
c0014a68:	88 c1                	mov    cl,al
c0014a6a:	c0 e9 04             	shr    cl,0x4
c0014a6d:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c0014a73:	0f b6 d1             	movzx  edx,cl
c0014a76:	c1 e2 06             	shl    edx,0x6
c0014a79:	88 4c 24 2f          	mov    BYTE PTR [esp+0x2f],cl
c0014a7d:	89 d5                	mov    ebp,edx
c0014a7f:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014a85:	66 81 e2 3f c0       	and    dx,0xc03f
c0014a8a:	83 c4 20             	add    esp,0x20
c0014a8d:	09 ea                	or     edx,ebp
c0014a8f:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0014a96:	89 c2                	mov    edx,eax
c0014a98:	c1 ea 08             	shr    edx,0x8
c0014a9b:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0014aa1:	83 e2 0f             	and    edx,0xf
c0014aa4:	83 e1 3f             	and    ecx,0x3f
c0014aa7:	89 d5                	mov    ebp,edx
c0014aa9:	c1 e5 06             	shl    ebp,0x6
c0014aac:	09 cd                	or     ebp,ecx
c0014aae:	89 e9                	mov    ecx,ebp
c0014ab0:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c0014ab6:	88 d1                	mov    cl,dl
c0014ab8:	c0 e9 02             	shr    cl,0x2
c0014abb:	89 cd                	mov    ebp,ecx
c0014abd:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0014ac3:	83 e1 c0             	and    ecx,0xffffffc0
c0014ac6:	09 cd                	or     ebp,ecx
c0014ac8:	89 e9                	mov    ecx,ebp
c0014aca:	89 c5                	mov    ebp,eax
c0014acc:	c1 ed 0c             	shr    ebp,0xc
c0014acf:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0014ad5:	83 e5 03             	and    ebp,0x3
c0014ad8:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0014ade:	c1 e5 04             	shl    ebp,0x4
c0014ae1:	83 e1 cf             	and    ecx,0xffffffcf
c0014ae4:	09 cd                	or     ebp,ecx
c0014ae6:	80 fa 06             	cmp    dl,0x6
c0014ae9:	89 e9                	mov    ecx,ebp
c0014aeb:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0014af1:	74 05                	je     c0014af8 <CPU::detectFeatures()+0x55a>
c0014af3:	80 fa 0f             	cmp    dl,0xf
c0014af6:	75 5d                	jne    c0014b55 <CPU::detectFeatures()+0x5b7>
c0014af8:	89 c5                	mov    ebp,eax
c0014afa:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0014afe:	c1 ed 10             	shr    ebp,0x10
c0014b01:	c1 e5 04             	shl    ebp,0x4
c0014b04:	09 e9                	or     ecx,ebp
c0014b06:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0014b0c:	0f b6 c9             	movzx  ecx,cl
c0014b0f:	c1 e1 06             	shl    ecx,0x6
c0014b12:	66 81 e5 3f c0       	and    bp,0xc03f
c0014b17:	09 e9                	or     ecx,ebp
c0014b19:	80 fa 0f             	cmp    dl,0xf
c0014b1c:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0014b23:	75 30                	jne    c0014b55 <CPU::detectFeatures()+0x5b7>
c0014b25:	c1 e8 14             	shr    eax,0x14
c0014b28:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0014b2e:	83 c0 0f             	add    eax,0xf
c0014b31:	83 e2 3f             	and    edx,0x3f
c0014b34:	88 c1                	mov    cl,al
c0014b36:	c1 e1 06             	shl    ecx,0x6
c0014b39:	c0 e8 02             	shr    al,0x2
c0014b3c:	09 ca                	or     edx,ecx
c0014b3e:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0014b44:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0014b4a:	83 e2 c0             	and    edx,0xffffffc0
c0014b4d:	09 d0                	or     eax,edx
c0014b4f:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c0014b55:	83 ec 0c             	sub    esp,0xc
c0014b58:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0014b5f:	56                   	push   esi
c0014b60:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014b64:	50                   	push   eax
c0014b65:	57                   	push   edi
c0014b66:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014b6a:	55                   	push   ebp
c0014b6b:	68 00 00 00 80       	push   0x80000000
c0014b70:	e8 d1 f5 ff ff       	call   c0014146 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014b75:	83 c4 20             	add    esp,0x20
c0014b78:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c0014b80:	8d 44 24 18          	lea    eax,[esp+0x18]
c0014b84:	76 1e                	jbe    c0014ba4 <CPU::detectFeatures()+0x606>
c0014b86:	83 ec 0c             	sub    esp,0xc
c0014b89:	56                   	push   esi
c0014b8a:	50                   	push   eax
c0014b8b:	57                   	push   edi
c0014b8c:	55                   	push   ebp
c0014b8d:	68 01 00 00 80       	push   0x80000001
c0014b92:	e8 af f5 ff ff       	call   c0014146 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014b97:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c0014ba1:	83 c4 20             	add    esp,0x20
c0014ba4:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0014baa:	83 f8 01             	cmp    eax,0x1
c0014bad:	75 6f                	jne    c0014c1e <CPU::detectFeatures()+0x680>
c0014baf:	51                   	push   ecx
c0014bb0:	51                   	push   ecx
c0014bb1:	68 8e 20 02 c0       	push   0xc002208e
c0014bb6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014bba:	56                   	push   esi
c0014bbb:	e8 e7 ba fe ff       	call   c00006a7 <strcpy>
c0014bc0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014bc6:	5f                   	pop    edi
c0014bc7:	66 c1 e8 06          	shr    ax,0x6
c0014bcb:	5d                   	pop    ebp
c0014bcc:	0f b6 c0             	movzx  eax,al
c0014bcf:	50                   	push   eax
c0014bd0:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014bd6:	c1 e8 0e             	shr    eax,0xe
c0014bd9:	0f b6 c0             	movzx  eax,al
c0014bdc:	50                   	push   eax
c0014bdd:	e8 04 f2 ff ff       	call   c0013de6 <lookupIntelCPUName(unsigned char, unsigned char)>
c0014be2:	5a                   	pop    edx
c0014be3:	59                   	pop    ecx
c0014be4:	50                   	push   eax
c0014be5:	56                   	push   esi
c0014be6:	e8 73 bb fe ff       	call   c000075e <strcat>
c0014beb:	5f                   	pop    edi
c0014bec:	5d                   	pop    ebp
c0014bed:	56                   	push   esi
c0014bee:	53                   	push   ebx
c0014bef:	e8 5c bb ff ff       	call   c0010750 <Device::setName(char const*)>
c0014bf4:	58                   	pop    eax
c0014bf5:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0014bfb:	5a                   	pop    edx
c0014bfc:	68 95 20 02 c0       	push   0xc0022095
c0014c01:	50                   	push   eax
c0014c02:	e8 f1 ba fe ff       	call   c00006f8 <strcmp>
c0014c07:	83 c4 10             	add    esp,0x10
c0014c0a:	85 c0                	test   eax,eax
c0014c0c:	0f 85 53 03 00 00    	jne    c0014f65 <CPU::detectFeatures()+0x9c7>
c0014c12:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0014c19:	e9 47 03 00 00       	jmp    c0014f65 <CPU::detectFeatures()+0x9c7>
c0014c1e:	83 f8 02             	cmp    eax,0x2
c0014c21:	0f 85 b5 00 00 00    	jne    c0014cdc <CPU::detectFeatures()+0x73e>
c0014c27:	57                   	push   edi
c0014c28:	57                   	push   edi
c0014c29:	68 a7 20 02 c0       	push   0xc00220a7
c0014c2e:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014c32:	56                   	push   esi
c0014c33:	e8 6f ba fe ff       	call   c00006a7 <strcpy>
c0014c38:	5d                   	pop    ebp
c0014c39:	58                   	pop    eax
c0014c3a:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014c40:	66 c1 e8 06          	shr    ax,0x6
c0014c44:	0f b6 c0             	movzx  eax,al
c0014c47:	50                   	push   eax
c0014c48:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014c4e:	c1 e8 0e             	shr    eax,0xe
c0014c51:	0f b6 c0             	movzx  eax,al
c0014c54:	50                   	push   eax
c0014c55:	e8 e7 ef ff ff       	call   c0013c41 <lookupAMDCPUName(unsigned char, unsigned char)>
c0014c5a:	5a                   	pop    edx
c0014c5b:	59                   	pop    ecx
c0014c5c:	50                   	push   eax
c0014c5d:	56                   	push   esi
c0014c5e:	e8 fb ba fe ff       	call   c000075e <strcat>
c0014c63:	5f                   	pop    edi
c0014c64:	5d                   	pop    ebp
c0014c65:	56                   	push   esi
c0014c66:	53                   	push   ebx
c0014c67:	e8 e4 ba ff ff       	call   c0010750 <Device::setName(char const*)>
c0014c6c:	58                   	pop    eax
c0014c6d:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0014c73:	5a                   	pop    edx
c0014c74:	68 ac 20 02 c0       	push   0xc00220ac
c0014c79:	50                   	push   eax
c0014c7a:	e8 79 ba fe ff       	call   c00006f8 <strcmp>
c0014c7f:	83 c4 10             	add    esp,0x10
c0014c82:	85 c0                	test   eax,eax
c0014c84:	75 20                	jne    c0014ca6 <CPU::detectFeatures()+0x708>
c0014c86:	8b 15 28 41 02 c0    	mov    edx,DWORD PTR ds:0xc0024128
c0014c8c:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014c92:	a8 01                	test   al,0x1
c0014c94:	74 10                	je     c0014ca6 <CPU::detectFeatures()+0x708>
c0014c96:	83 e0 fe             	and    eax,0xfffffffe
c0014c99:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014c9f:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0014ca6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014cac:	c1 e8 0e             	shr    eax,0xe
c0014caf:	3c 05                	cmp    al,0x5
c0014cb1:	0f 85 ae 02 00 00    	jne    c0014f65 <CPU::detectFeatures()+0x9c7>
c0014cb7:	56                   	push   esi
c0014cb8:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0014cbe:	83 e0 0f             	and    eax,0xf
c0014cc1:	50                   	push   eax
c0014cc2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014cc8:	66 c1 e8 06          	shr    ax,0x6
c0014ccc:	0f b6 c0             	movzx  eax,al
c0014ccf:	50                   	push   eax
c0014cd0:	6a 05                	push   0x5
c0014cd2:	e8 fc f3 ff ff       	call   c00140d3 <AMD_K6_writeback(int, int, int)>
c0014cd7:	e9 ff 01 00 00       	jmp    c0014edb <CPU::detectFeatures()+0x93d>
c0014cdc:	89 c1                	mov    ecx,eax
c0014cde:	83 e1 fd             	and    ecx,0xfffffffd
c0014ce1:	83 f9 04             	cmp    ecx,0x4
c0014ce4:	74 09                	je     c0014cef <CPU::detectFeatures()+0x751>
c0014ce6:	83 f8 03             	cmp    eax,0x3
c0014ce9:	0f 85 6f 01 00 00    	jne    c0014e5e <CPU::detectFeatures()+0x8c0>
c0014cef:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014cf5:	c1 ea 0e             	shr    edx,0xe
c0014cf8:	80 fa 05             	cmp    dl,0x5
c0014cfb:	75 62                	jne    c0014d5f <CPU::detectFeatures()+0x7c1>
c0014cfd:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014d03:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0014d08:	66 81 fa 00 01       	cmp    dx,0x100
c0014d0d:	75 0c                	jne    c0014d1b <CPU::detectFeatures()+0x77d>
c0014d0f:	51                   	push   ecx
c0014d10:	51                   	push   ecx
c0014d11:	68 b3 20 02 c0       	push   0xc00220b3
c0014d16:	e9 ba 01 00 00       	jmp    c0014ed5 <CPU::detectFeatures()+0x937>
c0014d1b:	66 81 fa 00 02       	cmp    dx,0x200
c0014d20:	75 0c                	jne    c0014d2e <CPU::detectFeatures()+0x790>
c0014d22:	52                   	push   edx
c0014d23:	52                   	push   edx
c0014d24:	68 c6 20 02 c0       	push   0xc00220c6
c0014d29:	e9 a7 01 00 00       	jmp    c0014ed5 <CPU::detectFeatures()+0x937>
c0014d2e:	66 81 fa 40 02       	cmp    dx,0x240
c0014d33:	75 0c                	jne    c0014d41 <CPU::detectFeatures()+0x7a3>
c0014d35:	50                   	push   eax
c0014d36:	50                   	push   eax
c0014d37:	68 d8 20 02 c0       	push   0xc00220d8
c0014d3c:	e9 94 01 00 00       	jmp    c0014ed5 <CPU::detectFeatures()+0x937>
c0014d41:	83 f8 06             	cmp    eax,0x6
c0014d44:	0f 84 ee 00 00 00    	je     c0014e38 <CPU::detectFeatures()+0x89a>
c0014d4a:	83 f9 04             	cmp    ecx,0x4
c0014d4d:	0f 84 f6 00 00 00    	je     c0014e49 <CPU::detectFeatures()+0x8ab>
c0014d53:	50                   	push   eax
c0014d54:	50                   	push   eax
c0014d55:	68 fe 20 02 c0       	push   0xc00220fe
c0014d5a:	e9 76 01 00 00       	jmp    c0014ed5 <CPU::detectFeatures()+0x937>
c0014d5f:	80 fa 06             	cmp    dl,0x6
c0014d62:	0f 85 cb 00 00 00    	jne    c0014e33 <CPU::detectFeatures()+0x895>
c0014d68:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0014d6e:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0014d73:	66 81 fa 80 01       	cmp    dx,0x180
c0014d78:	75 0c                	jne    c0014d86 <CPU::detectFeatures()+0x7e8>
c0014d7a:	50                   	push   eax
c0014d7b:	50                   	push   eax
c0014d7c:	68 09 21 02 c0       	push   0xc0022109
c0014d81:	e9 4f 01 00 00       	jmp    c0014ed5 <CPU::detectFeatures()+0x937>
c0014d86:	66 81 fa c0 01       	cmp    dx,0x1c0
c0014d8b:	74 07                	je     c0014d94 <CPU::detectFeatures()+0x7f6>
c0014d8d:	66 81 fa 00 02       	cmp    dx,0x200
c0014d92:	75 0c                	jne    c0014da0 <CPU::detectFeatures()+0x802>
c0014d94:	50                   	push   eax
c0014d95:	50                   	push   eax
c0014d96:	68 19 21 02 c0       	push   0xc0022119
c0014d9b:	e9 35 01 00 00       	jmp    c0014ed5 <CPU::detectFeatures()+0x937>
c0014da0:	66 81 fa 40 02       	cmp    dx,0x240
c0014da5:	75 0c                	jne    c0014db3 <CPU::detectFeatures()+0x815>
c0014da7:	50                   	push   eax
c0014da8:	50                   	push   eax
c0014da9:	68 20 21 02 c0       	push   0xc0022120
c0014dae:	e9 22 01 00 00       	jmp    c0014ed5 <CPU::detectFeatures()+0x937>
c0014db3:	66 81 fa 80 02       	cmp    dx,0x280
c0014db8:	74 07                	je     c0014dc1 <CPU::detectFeatures()+0x823>
c0014dba:	66 81 fa 40 03       	cmp    dx,0x340
c0014dbf:	75 0c                	jne    c0014dcd <CPU::detectFeatures()+0x82f>
c0014dc1:	50                   	push   eax
c0014dc2:	50                   	push   eax
c0014dc3:	68 29 21 02 c0       	push   0xc0022129
c0014dc8:	e9 08 01 00 00       	jmp    c0014ed5 <CPU::detectFeatures()+0x937>
c0014dcd:	66 81 fa c0 03       	cmp    dx,0x3c0
c0014dd2:	75 0c                	jne    c0014de0 <CPU::detectFeatures()+0x842>
c0014dd4:	55                   	push   ebp
c0014dd5:	55                   	push   ebp
c0014dd6:	68 30 21 02 c0       	push   0xc0022130
c0014ddb:	e9 f5 00 00 00       	jmp    c0014ed5 <CPU::detectFeatures()+0x937>
c0014de0:	83 f8 06             	cmp    eax,0x6
c0014de3:	74 53                	je     c0014e38 <CPU::detectFeatures()+0x89a>
c0014de5:	83 f9 04             	cmp    ecx,0x4
c0014de8:	74 5f                	je     c0014e49 <CPU::detectFeatures()+0x8ab>
c0014dea:	57                   	push   edi
c0014deb:	57                   	push   edi
c0014dec:	68 39 21 02 c0       	push   0xc0022139
c0014df1:	53                   	push   ebx
c0014df2:	e8 59 b9 ff ff       	call   c0010750 <Device::setName(char const*)>
c0014df7:	b1 c1                	mov    cl,0xc1
c0014df9:	88 c8                	mov    al,cl
c0014dfb:	e6 22                	out    0x22,al
c0014dfd:	e4 23                	in     al,0x23
c0014dff:	88 c2                	mov    dl,al
c0014e01:	88 c8                	mov    al,cl
c0014e03:	e6 22                	out    0x22,al
c0014e05:	88 d0                	mov    al,dl
c0014e07:	83 c8 10             	or     eax,0x10
c0014e0a:	e6 23                	out    0x23,al
c0014e0c:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0014e13:	89 d0                	mov    eax,edx
c0014e15:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0014e18:	40                   	inc    eax
c0014e19:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0014e1f:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0014e23:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0014e29:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0014e2e:	e9 a8 00 00 00       	jmp    c0014edb <CPU::detectFeatures()+0x93d>
c0014e33:	83 f8 06             	cmp    eax,0x6
c0014e36:	75 0c                	jne    c0014e44 <CPU::detectFeatures()+0x8a6>
c0014e38:	56                   	push   esi
c0014e39:	56                   	push   esi
c0014e3a:	68 ea 20 02 c0       	push   0xc00220ea
c0014e3f:	e9 91 00 00 00       	jmp    c0014ed5 <CPU::detectFeatures()+0x937>
c0014e44:	83 f9 04             	cmp    ecx,0x4
c0014e47:	75 0c                	jne    c0014e55 <CPU::detectFeatures()+0x8b7>
c0014e49:	51                   	push   ecx
c0014e4a:	51                   	push   ecx
c0014e4b:	68 f6 20 02 c0       	push   0xc00220f6
c0014e50:	e9 80 00 00 00       	jmp    c0014ed5 <CPU::detectFeatures()+0x937>
c0014e55:	52                   	push   edx
c0014e56:	52                   	push   edx
c0014e57:	68 44 21 02 c0       	push   0xc0022144
c0014e5c:	eb 77                	jmp    c0014ed5 <CPU::detectFeatures()+0x937>
c0014e5e:	83 f8 07             	cmp    eax,0x7
c0014e61:	75 09                	jne    c0014e6c <CPU::detectFeatures()+0x8ce>
c0014e63:	50                   	push   eax
c0014e64:	50                   	push   eax
c0014e65:	68 4e 21 02 c0       	push   0xc002214e
c0014e6a:	eb 69                	jmp    c0014ed5 <CPU::detectFeatures()+0x937>
c0014e6c:	83 f8 0a             	cmp    eax,0xa
c0014e6f:	75 09                	jne    c0014e7a <CPU::detectFeatures()+0x8dc>
c0014e71:	50                   	push   eax
c0014e72:	50                   	push   eax
c0014e73:	68 59 21 02 c0       	push   0xc0022159
c0014e78:	eb 5b                	jmp    c0014ed5 <CPU::detectFeatures()+0x937>
c0014e7a:	83 f8 0b             	cmp    eax,0xb
c0014e7d:	75 09                	jne    c0014e88 <CPU::detectFeatures()+0x8ea>
c0014e7f:	50                   	push   eax
c0014e80:	50                   	push   eax
c0014e81:	68 61 21 02 c0       	push   0xc0022161
c0014e86:	eb 4d                	jmp    c0014ed5 <CPU::detectFeatures()+0x937>
c0014e88:	83 f8 08             	cmp    eax,0x8
c0014e8b:	75 09                	jne    c0014e96 <CPU::detectFeatures()+0x8f8>
c0014e8d:	50                   	push   eax
c0014e8e:	50                   	push   eax
c0014e8f:	68 6a 21 02 c0       	push   0xc002216a
c0014e94:	eb 3f                	jmp    c0014ed5 <CPU::detectFeatures()+0x937>
c0014e96:	83 f8 09             	cmp    eax,0x9
c0014e99:	75 09                	jne    c0014ea4 <CPU::detectFeatures()+0x906>
c0014e9b:	50                   	push   eax
c0014e9c:	50                   	push   eax
c0014e9d:	68 72 21 02 c0       	push   0xc0022172
c0014ea2:	eb 31                	jmp    c0014ed5 <CPU::detectFeatures()+0x937>
c0014ea4:	83 f8 05             	cmp    eax,0x5
c0014ea7:	75 09                	jne    c0014eb2 <CPU::detectFeatures()+0x914>
c0014ea9:	50                   	push   eax
c0014eaa:	50                   	push   eax
c0014eab:	68 7a 21 02 c0       	push   0xc002217a
c0014eb0:	eb 23                	jmp    c0014ed5 <CPU::detectFeatures()+0x937>
c0014eb2:	83 f8 0c             	cmp    eax,0xc
c0014eb5:	75 09                	jne    c0014ec0 <CPU::detectFeatures()+0x922>
c0014eb7:	55                   	push   ebp
c0014eb8:	55                   	push   ebp
c0014eb9:	68 88 21 02 c0       	push   0xc0022188
c0014ebe:	eb 15                	jmp    c0014ed5 <CPU::detectFeatures()+0x937>
c0014ec0:	83 f8 0d             	cmp    eax,0xd
c0014ec3:	75 09                	jne    c0014ece <CPU::detectFeatures()+0x930>
c0014ec5:	57                   	push   edi
c0014ec6:	57                   	push   edi
c0014ec7:	68 93 21 02 c0       	push   0xc0022193
c0014ecc:	eb 07                	jmp    c0014ed5 <CPU::detectFeatures()+0x937>
c0014ece:	56                   	push   esi
c0014ecf:	56                   	push   esi
c0014ed0:	68 a7 21 02 c0       	push   0xc00221a7
c0014ed5:	53                   	push   ebx
c0014ed6:	e8 75 b8 ff ff       	call   c0010750 <Device::setName(char const*)>
c0014edb:	83 c4 10             	add    esp,0x10
c0014ede:	e9 82 00 00 00       	jmp    c0014f65 <CPU::detectFeatures()+0x9c7>
c0014ee3:	51                   	push   ecx
c0014ee4:	51                   	push   ecx
c0014ee5:	68 f3 1f 02 c0       	push   0xc0021ff3
c0014eea:	57                   	push   edi
c0014eeb:	e8 b7 b7 fe ff       	call   c00006a7 <strcpy>
c0014ef0:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014efa:	e8 80 b2 fe ff       	call   c000017f <is486>
c0014eff:	83 c4 10             	add    esp,0x10
c0014f02:	85 c0                	test   eax,eax
c0014f04:	74 2d                	je     c0014f33 <CPU::detectFeatures()+0x995>
c0014f06:	52                   	push   edx
c0014f07:	52                   	push   edx
c0014f08:	68 b3 21 02 c0       	push   0xc00221b3
c0014f0d:	53                   	push   ebx
c0014f0e:	e8 3d b8 ff ff       	call   c0010750 <Device::setName(char const*)>
c0014f13:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0014f1a:	e8 d9 a5 00 00       	call   c001f4f8 <CPU::readCR0()>
c0014f1f:	83 c4 10             	add    esp,0x10
c0014f22:	83 e0 14             	and    eax,0x14
c0014f25:	83 f8 04             	cmp    eax,0x4
c0014f28:	75 1f                	jne    c0014f49 <CPU::detectFeatures()+0x9ab>
c0014f2a:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0014f31:	eb 32                	jmp    c0014f65 <CPU::detectFeatures()+0x9c7>
c0014f33:	50                   	push   eax
c0014f34:	50                   	push   eax
c0014f35:	68 be 21 02 c0       	push   0xc00221be
c0014f3a:	53                   	push   ebx
c0014f3b:	e8 10 b8 ff ff       	call   c0010750 <Device::setName(char const*)>
c0014f40:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0014f47:	eb d1                	jmp    c0014f1a <CPU::detectFeatures()+0x97c>
c0014f49:	e8 0c b2 fe ff       	call   c000015a <hasLegacyFPU>
c0014f4e:	83 e0 01             	and    eax,0x1
c0014f51:	8d 14 00             	lea    edx,[eax+eax*1]
c0014f54:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014f5a:	83 e0 fd             	and    eax,0xfffffffd
c0014f5d:	09 d0                	or     eax,edx
c0014f5f:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014f65:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0014f6c:	83 c4 4c             	add    esp,0x4c
c0014f6f:	5b                   	pop    ebx
c0014f70:	5e                   	pop    esi
c0014f71:	5f                   	pop    edi
c0014f72:	5d                   	pop    ebp
c0014f73:	c3                   	ret    

c0014f74 <CPU::setupSMEP()>:
c0014f74:	83 ec 0c             	sub    esp,0xc
c0014f77:	e8 46 a8 00 00       	call   c001f7c2 <CPU::readCR4()>
c0014f7c:	0d 00 00 10 00       	or     eax,0x100000
c0014f81:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014f85:	83 c4 0c             	add    esp,0xc
c0014f88:	e9 50 a8 00 00       	jmp    c001f7dd <CPU::writeCR4(unsigned long)>
c0014f8d:	90                   	nop

c0014f8e <CPU::setupUMIP()>:
c0014f8e:	83 ec 0c             	sub    esp,0xc
c0014f91:	e8 2c a8 00 00       	call   c001f7c2 <CPU::readCR4()>
c0014f96:	80 cc 08             	or     ah,0x8
c0014f99:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014f9d:	83 c4 0c             	add    esp,0xc
c0014fa0:	e9 38 a8 00 00       	jmp    c001f7dd <CPU::writeCR4(unsigned long)>
c0014fa5:	90                   	nop

c0014fa6 <CPU::setupTSC()>:
c0014fa6:	83 ec 0c             	sub    esp,0xc
c0014fa9:	e8 14 a8 00 00       	call   c001f7c2 <CPU::readCR4()>
c0014fae:	83 c8 04             	or     eax,0x4
c0014fb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014fb5:	83 c4 0c             	add    esp,0xc
c0014fb8:	e9 20 a8 00 00       	jmp    c001f7dd <CPU::writeCR4(unsigned long)>
c0014fbd:	90                   	nop

c0014fbe <CPU::setupLargePages()>:
c0014fbe:	83 ec 0c             	sub    esp,0xc
c0014fc1:	e8 fc a7 00 00       	call   c001f7c2 <CPU::readCR4()>
c0014fc6:	83 c8 10             	or     eax,0x10
c0014fc9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014fcd:	83 c4 0c             	add    esp,0xc
c0014fd0:	e9 08 a8 00 00       	jmp    c001f7dd <CPU::writeCR4(unsigned long)>
c0014fd5:	90                   	nop

c0014fd6 <CPU::setupPAT()>:
c0014fd6:	a1 28 41 02 c0       	mov    eax,ds:0xc0024128
c0014fdb:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014fe2:	74 2c                	je     c0015010 <CPU::setupPAT()+0x3a>
c0014fe4:	53                   	push   ebx
c0014fe5:	83 ec 10             	sub    esp,0x10
c0014fe8:	68 77 02 00 00       	push   0x277
c0014fed:	50                   	push   eax
c0014fee:	e8 d1 64 ff ff       	call   c000b4c4 <Computer::rdmsr(unsigned int)>
c0014ff3:	83 e2 f8             	and    edx,0xfffffff8
c0014ff6:	83 ca 01             	or     edx,0x1
c0014ff9:	52                   	push   edx
c0014ffa:	50                   	push   eax
c0014ffb:	68 77 02 00 00       	push   0x277
c0015000:	ff 35 28 41 02 c0    	push   DWORD PTR ds:0xc0024128
c0015006:	e8 e5 64 ff ff       	call   c000b4f0 <Computer::wrmsr(unsigned int, unsigned long long)>
c001500b:	83 c4 28             	add    esp,0x28
c001500e:	5b                   	pop    ebx
c001500f:	c3                   	ret    
c0015010:	c3                   	ret    
c0015011:	90                   	nop

c0015012 <CPU::setupMTRR()>:
c0015012:	c3                   	ret    
c0015013:	90                   	nop

c0015014 <CPU::setupGlobalPages()>:
c0015014:	83 ec 0c             	sub    esp,0xc
c0015017:	e8 a6 a7 00 00       	call   c001f7c2 <CPU::readCR4()>
c001501c:	0c 80                	or     al,0x80
c001501e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015022:	83 c4 0c             	add    esp,0xc
c0015025:	e9 b3 a7 00 00       	jmp    c001f7dd <CPU::writeCR4(unsigned long)>

c001502a <CPU::allowUsermodeDataAccess()>:
c001502a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001502e:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0015035:	74 03                	je     c001503a <CPU::allowUsermodeDataAccess()+0x10>
c0015037:	0f 01 cb             	stac   
c001503a:	c3                   	ret    
c001503b:	90                   	nop

c001503c <CPU::prohibitUsermodeDataAccess()>:
c001503c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015040:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0015047:	74 03                	je     c001504c <CPU::prohibitUsermodeDataAccess()+0x10>
c0015049:	0f 01 ca             	clac   
c001504c:	c3                   	ret    
c001504d:	90                   	nop

c001504e <CPU::setupSMAP()>:
c001504e:	53                   	push   ebx
c001504f:	83 ec 08             	sub    esp,0x8
c0015052:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015056:	e8 67 a7 00 00       	call   c001f7c2 <CPU::readCR4()>
c001505b:	83 ec 0c             	sub    esp,0xc
c001505e:	0d 00 00 20 00       	or     eax,0x200000
c0015063:	50                   	push   eax
c0015064:	e8 74 a7 00 00       	call   c001f7dd <CPU::writeCR4(unsigned long)>
c0015069:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001506d:	83 c4 18             	add    esp,0x18
c0015070:	5b                   	pop    ebx
c0015071:	eb c9                	jmp    c001503c <CPU::prohibitUsermodeDataAccess()>
c0015073:	90                   	nop

c0015074 <CPU::setupFeatures()>:
c0015074:	53                   	push   ebx
c0015075:	83 ec 08             	sub    esp,0x8
c0015078:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001507c:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0015083:	74 0c                	je     c0015091 <CPU::setupFeatures()+0x1d>
c0015085:	83 ec 0c             	sub    esp,0xc
c0015088:	53                   	push   ebx
c0015089:	e8 e6 fe ff ff       	call   c0014f74 <CPU::setupSMEP()>
c001508e:	83 c4 10             	add    esp,0x10
c0015091:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0015098:	74 0c                	je     c00150a6 <CPU::setupFeatures()+0x32>
c001509a:	83 ec 0c             	sub    esp,0xc
c001509d:	53                   	push   ebx
c001509e:	e8 ab ff ff ff       	call   c001504e <CPU::setupSMAP()>
c00150a3:	83 c4 10             	add    esp,0x10
c00150a6:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00150ad:	74 0c                	je     c00150bb <CPU::setupFeatures()+0x47>
c00150af:	83 ec 0c             	sub    esp,0xc
c00150b2:	53                   	push   ebx
c00150b3:	e8 d6 fe ff ff       	call   c0014f8e <CPU::setupUMIP()>
c00150b8:	83 c4 10             	add    esp,0x10
c00150bb:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c00150c2:	74 0c                	je     c00150d0 <CPU::setupFeatures()+0x5c>
c00150c4:	83 ec 0c             	sub    esp,0xc
c00150c7:	53                   	push   ebx
c00150c8:	e8 d9 fe ff ff       	call   c0014fa6 <CPU::setupTSC()>
c00150cd:	83 c4 10             	add    esp,0x10
c00150d0:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c00150d7:	74 0c                	je     c00150e5 <CPU::setupFeatures()+0x71>
c00150d9:	83 ec 0c             	sub    esp,0xc
c00150dc:	53                   	push   ebx
c00150dd:	e8 dc fe ff ff       	call   c0014fbe <CPU::setupLargePages()>
c00150e2:	83 c4 10             	add    esp,0x10
c00150e5:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00150ec:	74 0c                	je     c00150fa <CPU::setupFeatures()+0x86>
c00150ee:	83 ec 0c             	sub    esp,0xc
c00150f1:	53                   	push   ebx
c00150f2:	e8 1d ff ff ff       	call   c0015014 <CPU::setupGlobalPages()>
c00150f7:	83 c4 10             	add    esp,0x10
c00150fa:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0015101:	74 0d                	je     c0015110 <CPU::setupFeatures()+0x9c>
c0015103:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0015107:	83 c4 08             	add    esp,0x8
c001510a:	5b                   	pop    ebx
c001510b:	e9 c6 fe ff ff       	jmp    c0014fd6 <CPU::setupPAT()>
c0015110:	83 c4 08             	add    esp,0x8
c0015113:	5b                   	pop    ebx
c0015114:	c3                   	ret    
c0015115:	90                   	nop

c0015116 <CPU::open(int, int, void*)>:
c0015116:	57                   	push   edi
c0015117:	56                   	push   esi
c0015118:	53                   	push   ebx
c0015119:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001511d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015121:	83 ec 0c             	sub    esp,0xc
c0015124:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001512a:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0015130:	50                   	push   eax
c0015131:	e8 7e 66 ff ff       	call   c000b7b4 <GDT::setup()>
c0015136:	83 c4 0c             	add    esp,0xc
c0015139:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c001513f:	6a 00                	push   0x0
c0015141:	68 ef be ad de       	push   0xdeadbeef
c0015146:	57                   	push   edi
c0015147:	e8 fe 88 ff ff       	call   c000da4a <TSS::setup(unsigned long, unsigned long)>
c001514c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001514f:	e8 d6 88 ff ff       	call   c000da2a <TSS::flush()>
c0015154:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c001515a:	89 04 24             	mov    DWORD PTR [esp],eax
c001515d:	e8 ac 68 ff ff       	call   c000ba0e <IDT::setup()>
c0015162:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0015169:	e8 66 a6 00 00       	call   c001f7d4 <CPU::writeDR7(unsigned long)>
c001516e:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0015178:	e8 80 73 ff ff       	call   c000c4fd <Phys::allocatePage()>
c001517d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0015183:	89 30                	mov    DWORD PTR [eax],esi
c0015185:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001518b:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001518e:	58                   	pop    eax
c001518f:	5a                   	pop    edx
c0015190:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0015196:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001519a:	e8 3f 99 ff ff       	call   c000eade <VAS::setCPUSpecific(unsigned long)>
c001519f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151a2:	e8 f7 f3 ff ff       	call   c001459e <CPU::detectFeatures()>
c00151a7:	e8 cc c4 ff ff       	call   c0011678 <setupInterruptController()>
c00151ac:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c00151b2:	a1 40 41 02 c0       	mov    eax,ds:0xc0024140
c00151b7:	83 e0 10             	and    eax,0x10
c00151ba:	83 f8 01             	cmp    eax,0x1
c00151bd:	19 c0                	sbb    eax,eax
c00151bf:	83 e0 46             	and    eax,0x46
c00151c2:	83 c0 1e             	add    eax,0x1e
c00151c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00151c8:	e8 a7 d6 ff ff       	call   c0012874 <setupTimer(int)>
c00151cd:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c00151d3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151d6:	e8 99 fe ff ff       	call   c0015074 <CPU::setupFeatures()>
c00151db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151de:	e8 3f f1 ff ff       	call   c0014322 <CPU::displayFeatures()>
c00151e3:	83 c4 10             	add    esp,0x10
c00151e6:	5b                   	pop    ebx
c00151e7:	31 c0                	xor    eax,eax
c00151e9:	5e                   	pop    esi
c00151ea:	5f                   	pop    edi
c00151eb:	c3                   	ret    

c00151ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00151ec:	56                   	push   esi
c00151ed:	53                   	push   ebx
c00151ee:	51                   	push   ecx
c00151ef:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00151f3:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00151f7:	8b 5a 38             	mov    ebx,DWORD PTR [edx+0x38]
c00151fa:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00151fd:	88 c1                	mov    cl,al
c00151ff:	c0 e9 06             	shr    cl,0x6
c0015202:	88 0c 24             	mov    BYTE PTR [esp],cl
c0015205:	88 c1                	mov    cl,al
c0015207:	66 c1 e8 03          	shr    ax,0x3
c001520b:	83 e1 07             	and    ecx,0x7
c001520e:	83 e0 07             	and    eax,0x7
c0015211:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c0015215:	88 06                	mov    BYTE PTR [esi],al
c0015217:	74 7f                	je     c0015298 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c0015219:	80 f9 04             	cmp    cl,0x4
c001521c:	74 7a                	je     c0015298 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c001521e:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0015222:	75 05                	jne    c0015229 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x3d>
c0015224:	80 f9 05             	cmp    cl,0x5
c0015227:	74 6f                	je     c0015298 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c0015229:	84 c9                	test   cl,cl
c001522b:	75 05                	jne    c0015232 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x46>
c001522d:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c0015230:	eb 3c                	jmp    c001526e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015232:	80 f9 01             	cmp    cl,0x1
c0015235:	75 05                	jne    c001523c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x50>
c0015237:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001523a:	eb 32                	jmp    c001526e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c001523c:	80 f9 02             	cmp    cl,0x2
c001523f:	75 05                	jne    c0015246 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5a>
c0015241:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0015244:	eb 28                	jmp    c001526e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015246:	31 c0                	xor    eax,eax
c0015248:	80 f9 03             	cmp    cl,0x3
c001524b:	75 05                	jne    c0015252 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x66>
c001524d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015250:	eb 1c                	jmp    c001526e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015252:	80 f9 05             	cmp    cl,0x5
c0015255:	75 05                	jne    c001525c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x70>
c0015257:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c001525a:	eb 12                	jmp    c001526e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c001525c:	80 f9 06             	cmp    cl,0x6
c001525f:	75 05                	jne    c0015266 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7a>
c0015261:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0015264:	eb 08                	jmp    c001526e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015266:	80 f9 07             	cmp    cl,0x7
c0015269:	75 03                	jne    c001526e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c001526b:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c001526e:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c0015272:	75 10                	jne    c0015284 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x98>
c0015274:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0015278:	b9 03 00 00 00       	mov    ecx,0x3
c001527d:	01 d0                	add    eax,edx
c001527f:	e9 42 01 00 00       	jmp    c00153c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c0015284:	b9 02 00 00 00       	mov    ecx,0x2
c0015289:	80 3c 24 02          	cmp    BYTE PTR [esp],0x2
c001528d:	0f 85 33 01 00 00    	jne    c00153c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c0015293:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0015296:	eb 18                	jmp    c00152b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xc4>
c0015298:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001529c:	0f 94 44 24 02       	sete   BYTE PTR [esp+0x2]
c00152a1:	80 f9 05             	cmp    cl,0x5
c00152a4:	0f 94 c0             	sete   al
c00152a7:	84 44 24 02          	test   BYTE PTR [esp+0x2],al
c00152ab:	74 0d                	je     c00152ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c00152ad:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c00152b0:	b9 06 00 00 00       	mov    ecx,0x6
c00152b5:	e9 0c 01 00 00       	jmp    c00153c6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00152ba:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c00152be:	0f 84 06 01 00 00    	je     c00153ca <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1de>
c00152c4:	80 f9 04             	cmp    cl,0x4
c00152c7:	0f 85 06 01 00 00    	jne    c00153d3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c00152cd:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c00152d0:	89 c6                	mov    esi,eax
c00152d2:	88 c1                	mov    cl,al
c00152d4:	66 c1 ee 03          	shr    si,0x3
c00152d8:	c0 e9 06             	shr    cl,0x6
c00152db:	83 e6 07             	and    esi,0x7
c00152de:	24 07                	and    al,0x7
c00152e0:	88 4c 24 03          	mov    BYTE PTR [esp+0x3],cl
c00152e4:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00152e8:	89 f1                	mov    ecx,esi
c00152ea:	75 05                	jne    c00152f1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x105>
c00152ec:	8b 72 2c             	mov    esi,DWORD PTR [edx+0x2c]
c00152ef:	eb 4b                	jmp    c001533c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c00152f1:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c00152f6:	75 05                	jne    c00152fd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x111>
c00152f8:	8b 72 28             	mov    esi,DWORD PTR [edx+0x28]
c00152fb:	eb 3f                	jmp    c001533c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c00152fd:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0015302:	75 05                	jne    c0015309 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x11d>
c0015304:	8b 72 24             	mov    esi,DWORD PTR [edx+0x24]
c0015307:	eb 33                	jmp    c001533c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015309:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c001530e:	75 05                	jne    c0015315 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x129>
c0015310:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015313:	eb 27                	jmp    c001533c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015315:	80 7c 24 01 04       	cmp    BYTE PTR [esp+0x1],0x4
c001531a:	75 05                	jne    c0015321 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x135>
c001531c:	8b 72 44             	mov    esi,DWORD PTR [edx+0x44]
c001531f:	eb 1b                	jmp    c001533c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015321:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c0015326:	75 05                	jne    c001532d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x141>
c0015328:	8b 72 18             	mov    esi,DWORD PTR [edx+0x18]
c001532b:	eb 0f                	jmp    c001533c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001532d:	80 7c 24 01 06       	cmp    BYTE PTR [esp+0x1],0x6
c0015332:	75 05                	jne    c0015339 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14d>
c0015334:	8b 72 14             	mov    esi,DWORD PTR [edx+0x14]
c0015337:	eb 03                	jmp    c001533c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015339:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c001533c:	84 c9                	test   cl,cl
c001533e:	75 05                	jne    c0015345 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0015340:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c0015343:	eb 3c                	jmp    c0015381 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c0015345:	80 f9 01             	cmp    cl,0x1
c0015348:	75 05                	jne    c001534f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001534a:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001534d:	eb 32                	jmp    c0015381 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c001534f:	80 f9 02             	cmp    cl,0x2
c0015352:	75 05                	jne    c0015359 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0015354:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0015357:	eb 28                	jmp    c0015381 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c0015359:	80 f9 03             	cmp    cl,0x3
c001535c:	75 05                	jne    c0015363 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x177>
c001535e:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015361:	eb 1e                	jmp    c0015381 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c0015363:	31 c0                	xor    eax,eax
c0015365:	80 f9 04             	cmp    cl,0x4
c0015368:	74 17                	je     c0015381 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c001536a:	80 f9 05             	cmp    cl,0x5
c001536d:	75 05                	jne    c0015374 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001536f:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c0015372:	eb 0d                	jmp    c0015381 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c0015374:	80 f9 06             	cmp    cl,0x6
c0015377:	75 05                	jne    c001537e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x192>
c0015379:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001537c:	eb 03                	jmp    c0015381 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c001537e:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0015381:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c0015386:	8a 4c 24 03          	mov    cl,BYTE PTR [esp+0x3]
c001538a:	0f 94 c2             	sete   dl
c001538d:	d3 e0                	shl    eax,cl
c001538f:	22 54 24 02          	and    dl,BYTE PTR [esp+0x2]
c0015393:	74 07                	je     c001539c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b0>
c0015395:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0015398:	31 d2                	xor    edx,edx
c001539a:	eb 23                	jmp    c00153bf <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001539c:	01 f0                	add    eax,esi
c001539e:	b9 03 00 00 00       	mov    ecx,0x3
c00153a3:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00153a7:	74 33                	je     c00153dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c00153a9:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c00153ad:	75 0d                	jne    c00153bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d0>
c00153af:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c00153b3:	01 c8                	add    eax,ecx
c00153b5:	b9 04 00 00 00       	mov    ecx,0x4
c00153ba:	eb 20                	jmp    c00153dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c00153bc:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00153bf:	b9 07 00 00 00       	mov    ecx,0x7
c00153c4:	eb 16                	jmp    c00153dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c00153c6:	31 d2                	xor    edx,edx
c00153c8:	eb 12                	jmp    c00153dc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c00153ca:	b9 02 00 00 00       	mov    ecx,0x2
c00153cf:	b2 01                	mov    dl,0x1
c00153d1:	eb 07                	jmp    c00153da <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ee>
c00153d3:	31 d2                	xor    edx,edx
c00153d5:	b9 02 00 00 00       	mov    ecx,0x2
c00153da:	31 c0                	xor    eax,eax
c00153dc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00153e0:	89 0b                	mov    DWORD PTR [ebx],ecx
c00153e2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00153e6:	88 11                	mov    BYTE PTR [ecx],dl
c00153e8:	5a                   	pop    edx
c00153e9:	5b                   	pop    ebx
c00153ea:	5e                   	pop    esi
c00153eb:	c3                   	ret    

c00153ec <Krnl::panic(char const*)>:
c00153ec:	55                   	push   ebp
c00153ed:	89 e5                	mov    ebp,esp
c00153ef:	53                   	push   ebx
c00153f0:	51                   	push   ecx
c00153f1:	a1 70 4b 02 c0       	mov    eax,ds:0xc0024b70
c00153f6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00153f9:	85 c0                	test   eax,eax
c00153fb:	74 02                	je     c00153ff <Krnl::panic(char const*)+0x13>
c00153fd:	ff d0                	call   eax
c00153ff:	fa                   	cli    
c0015400:	50                   	push   eax
c0015401:	c6 05 74 4b 02 c0 01 	mov    BYTE PTR ds:0xc0024b74,0x1
c0015408:	50                   	push   eax
c0015409:	c6 05 60 35 02 c0 00 	mov    BYTE PTR ds:0xc0023560,0x0
c0015410:	53                   	push   ebx
c0015411:	68 f8 21 02 c0       	push   0xc00221f8
c0015416:	e8 3e 9d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001541b:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0015420:	5a                   	pop    edx
c0015421:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015427:	51                   	push   ecx
c0015428:	e8 5c 7e ff ff       	call   c000d289 <setActiveTerminal(VgaText*)>
c001542d:	83 c4 0c             	add    esp,0xc
c0015430:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0015435:	6a 01                	push   0x1
c0015437:	6a 0f                	push   0xf
c0015439:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001543f:	50                   	push   eax
c0015440:	e8 83 78 ff ff       	call   c000ccc8 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015445:	58                   	pop    eax
c0015446:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c001544b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015451:	50                   	push   eax
c0015452:	e8 d5 80 ff ff       	call   c000d52c <VgaText::clearScreen()>
c0015457:	58                   	pop    eax
c0015458:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c001545d:	5a                   	pop    edx
c001545e:	68 11 22 02 c0       	push   0xc0022211
c0015463:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015469:	51                   	push   ecx
c001546a:	e8 3b 82 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c001546f:	58                   	pop    eax
c0015470:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0015475:	5a                   	pop    edx
c0015476:	68 b0 22 02 c0       	push   0xc00222b0
c001547b:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015481:	51                   	push   ecx
c0015482:	e8 23 82 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0015487:	58                   	pop    eax
c0015488:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c001548d:	5a                   	pop    edx
c001548e:	68 2d 22 02 c0       	push   0xc002222d
c0015493:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015499:	51                   	push   ecx
c001549a:	e8 0b 82 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c001549f:	58                   	pop    eax
c00154a0:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c00154a5:	5a                   	pop    edx
c00154a6:	53                   	push   ebx
c00154a7:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00154ad:	51                   	push   ecx
c00154ae:	e8 f7 81 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00154b3:	5b                   	pop    ebx
c00154b4:	58                   	pop    eax
c00154b5:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c00154ba:	68 4d 22 02 c0       	push   0xc002224d
c00154bf:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00154c5:	50                   	push   eax
c00154c6:	e8 df 81 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00154cb:	58                   	pop    eax
c00154cc:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c00154d1:	5a                   	pop    edx
c00154d2:	68 ec 22 02 c0       	push   0xc00222ec
c00154d7:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00154dd:	51                   	push   ecx
c00154de:	e8 c7 81 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00154e3:	5b                   	pop    ebx
c00154e4:	58                   	pop    eax
c00154e5:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c00154ea:	68 2d 22 02 c0       	push   0xc002222d
c00154ef:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00154f5:	50                   	push   eax
c00154f6:	e8 af 81 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00154fb:	58                   	pop    eax
c00154fc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015501:	5a                   	pop    edx
c0015502:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015505:	83 c0 0c             	add    eax,0xc
c0015508:	50                   	push   eax
c0015509:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c001550e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015514:	51                   	push   ecx
c0015515:	e8 90 81 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c001551a:	5b                   	pop    ebx
c001551b:	58                   	pop    eax
c001551c:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0015521:	68 4c 22 02 c0       	push   0xc002224c
c0015526:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001552c:	50                   	push   eax
c001552d:	e8 78 81 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0015532:	58                   	pop    eax
c0015533:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0015538:	5a                   	pop    edx
c0015539:	68 18 23 02 c0       	push   0xc0022318
c001553e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015544:	51                   	push   ecx
c0015545:	e8 60 81 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c001554a:	5b                   	pop    ebx
c001554b:	58                   	pop    eax
c001554c:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0015551:	68 58 23 02 c0       	push   0xc0022358
c0015556:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001555c:	50                   	push   eax
c001555d:	e8 48 81 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0015562:	58                   	pop    eax
c0015563:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0015568:	5a                   	pop    edx
c0015569:	68 38 22 02 c0       	push   0xc0022238
c001556e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015574:	51                   	push   ecx
c0015575:	e8 30 81 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c001557a:	5b                   	pop    ebx
c001557b:	58                   	pop    eax
c001557c:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c001557f:	50                   	push   eax
c0015580:	68 50 22 02 c0       	push   0xc0022250
c0015585:	e8 cf 9b ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001558a:	58                   	pop    eax
c001558b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001558e:	5a                   	pop    edx
c001558f:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015592:	51                   	push   ecx
c0015593:	68 59 22 02 c0       	push   0xc0022259
c0015598:	e8 bc 9b ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001559d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00155a0:	5b                   	pop    ebx
c00155a1:	5a                   	pop    edx
c00155a2:	8b 00                	mov    eax,DWORD PTR [eax]
c00155a4:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00155a7:	51                   	push   ecx
c00155a8:	68 bd 18 02 c0       	push   0xc00218bd
c00155ad:	e8 a7 9b ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00155b2:	5b                   	pop    ebx
c00155b3:	58                   	pop    eax
c00155b4:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c00155b9:	68 9c 23 02 c0       	push   0xc002239c
c00155be:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00155c4:	50                   	push   eax
c00155c5:	e8 e0 80 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00155ca:	58                   	pop    eax
c00155cb:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c00155d0:	5a                   	pop    edx
c00155d1:	68 62 22 02 c0       	push   0xc0022262
c00155d6:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00155dc:	51                   	push   ecx
c00155dd:	e8 c8 80 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00155e2:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c00155e7:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00155ed:	e8 06 9f 00 00       	call   c001f4f8 <CPU::readCR0()>
c00155f2:	5a                   	pop    edx
c00155f3:	59                   	pop    ecx
c00155f4:	50                   	push   eax
c00155f5:	53                   	push   ebx
c00155f6:	e8 d5 80 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c00155fb:	5b                   	pop    ebx
c00155fc:	58                   	pop    eax
c00155fd:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0015602:	68 6c 22 02 c0       	push   0xc002226c
c0015607:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001560d:	50                   	push   eax
c001560e:	e8 97 80 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0015613:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0015618:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001561e:	e8 c3 a1 00 00       	call   c001f7e6 <CPU::readCR2()>
c0015623:	5a                   	pop    edx
c0015624:	59                   	pop    ecx
c0015625:	50                   	push   eax
c0015626:	53                   	push   ebx
c0015627:	e8 a4 80 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c001562c:	5b                   	pop    ebx
c001562d:	58                   	pop    eax
c001562e:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0015633:	68 76 22 02 c0       	push   0xc0022276
c0015638:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001563e:	50                   	push   eax
c001563f:	e8 66 80 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0015644:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0015649:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001564f:	e8 31 9b 00 00       	call   c001f185 <CPU::readCR3()>
c0015654:	5a                   	pop    edx
c0015655:	59                   	pop    ecx
c0015656:	50                   	push   eax
c0015657:	53                   	push   ebx
c0015658:	e8 73 80 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c001565d:	5b                   	pop    ebx
c001565e:	58                   	pop    eax
c001565f:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0015664:	68 89 22 02 c0       	push   0xc0022289
c0015669:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001566f:	50                   	push   eax
c0015670:	e8 35 80 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0015675:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c001567a:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015680:	e8 3d a1 00 00       	call   c001f7c2 <CPU::readCR4()>
c0015685:	5a                   	pop    edx
c0015686:	59                   	pop    ecx
c0015687:	50                   	push   eax
c0015688:	53                   	push   ebx
c0015689:	e8 42 80 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c001568e:	5b                   	pop    ebx
c001568f:	58                   	pop    eax
c0015690:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0015695:	68 93 22 02 c0       	push   0xc0022293
c001569a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00156a0:	50                   	push   eax
c00156a1:	e8 04 80 ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00156a6:	5a                   	pop    edx
c00156a7:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c00156ac:	59                   	pop    ecx
c00156ad:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
c00156b0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00156b6:	53                   	push   ebx
c00156b7:	50                   	push   eax
c00156b8:	e8 13 80 ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c00156bd:	58                   	pop    eax
c00156be:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c00156c3:	5a                   	pop    edx
c00156c4:	68 aa 22 02 c0       	push   0xc00222aa
c00156c9:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00156cf:	51                   	push   ecx
c00156d0:	e8 d5 7f ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c00156d5:	5b                   	pop    ebx
c00156d6:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c00156db:	5a                   	pop    edx
c00156dc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00156df:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00156e5:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00156e8:	51                   	push   ecx
c00156e9:	50                   	push   eax
c00156ea:	e8 e1 7f ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c00156ef:	5b                   	pop    ebx
c00156f0:	58                   	pop    eax
c00156f1:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c00156f6:	68 aa 22 02 c0       	push   0xc00222aa
c00156fb:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015701:	50                   	push   eax
c0015702:	e8 a3 7f ff ff       	call   c000d6aa <VgaText::puts(char const*)>
c0015707:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001570a:	59                   	pop    ecx
c001570b:	a1 74 55 02 c0       	mov    eax,ds:0xc0025574
c0015710:	5b                   	pop    ebx
c0015711:	8b 12                	mov    edx,DWORD PTR [edx]
c0015713:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015719:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001571c:	52                   	push   edx
c001571d:	50                   	push   eax
c001571e:	e8 ad 7f ff ff       	call   c000d6d0 <VgaText::putx(unsigned int)>
c0015723:	83 c4 10             	add    esp,0x10
c0015726:	b2 fe                	mov    dl,0xfe
c0015728:	e4 60                	in     al,0x60
c001572a:	3c 1c                	cmp    al,0x1c
c001572c:	74 04                	je     c0015732 <Krnl::panic(char const*)+0x346>
c001572e:	3c 5a                	cmp    al,0x5a
c0015730:	75 f6                	jne    c0015728 <Krnl::panic(char const*)+0x33c>
c0015732:	e4 64                	in     al,0x64
c0015734:	a8 02                	test   al,0x2
c0015736:	75 fa                	jne    c0015732 <Krnl::panic(char const*)+0x346>
c0015738:	88 d0                	mov    al,dl
c001573a:	e6 64                	out    0x64,al
c001573c:	fa                   	cli    
c001573d:	f4                   	hlt    
c001573e:	eb e8                	jmp    c0015728 <Krnl::panic(char const*)+0x33c>

c0015740 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015740:	55                   	push   ebp
c0015741:	57                   	push   edi
c0015742:	56                   	push   esi
c0015743:	53                   	push   ebx
c0015744:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001574a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015751:	8d 46 01             	lea    eax,[esi+0x1]
c0015754:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015756:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001575a:	80 fb 40             	cmp    bl,0x40
c001575d:	75 19                	jne    c0015778 <Reg::findLineFromLoadedData(char*, char*, char*)+0x38>
c001575f:	8a 06                	mov    al,BYTE PTR [esi]
c0015761:	84 c0                	test   al,al
c0015763:	74 07                	je     c001576c <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015765:	3c 3a                	cmp    al,0x3a
c0015767:	74 03                	je     c001576c <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015769:	46                   	inc    esi
c001576a:	eb f3                	jmp    c001575f <Reg::findLineFromLoadedData(char*, char*, char*)+0x1f>
c001576c:	84 c0                	test   al,al
c001576e:	0f 84 1f 01 00 00    	je     c0015893 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015774:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015777:	46                   	inc    esi
c0015778:	50                   	push   eax
c0015779:	6a 40                	push   0x40
c001577b:	6a 00                	push   0x0
c001577d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015781:	50                   	push   eax
c0015782:	e8 81 ae fe ff       	call   c0000608 <memset>
c0015787:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001578e:	31 d2                	xor    edx,edx
c0015790:	83 c4 10             	add    esp,0x10
c0015793:	8a 07                	mov    al,BYTE PTR [edi]
c0015795:	84 c0                	test   al,al
c0015797:	0f 84 f6 00 00 00    	je     c0015893 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c001579d:	81 fa c7 00 00 00    	cmp    edx,0xc7
c00157a3:	0f 8f ea 00 00 00    	jg     c0015893 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c00157a9:	3c 0a                	cmp    al,0xa
c00157ab:	0f 85 d3 00 00 00    	jne    c0015884 <Reg::findLineFromLoadedData(char*, char*, char*)+0x144>
c00157b1:	c6 44 14 58 00       	mov    BYTE PTR [esp+edx*1+0x58],0x0
c00157b6:	8a 4c 24 58          	mov    cl,BYTE PTR [esp+0x58]
c00157ba:	f6 c1 df             	test   cl,0xdf
c00157bd:	0f 94 c2             	sete   dl
c00157c0:	80 f9 23             	cmp    cl,0x23
c00157c3:	0f 94 c0             	sete   al
c00157c6:	08 c2                	or     dl,al
c00157c8:	75 47                	jne    c0015811 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c00157ca:	8d 41 f7             	lea    eax,[ecx-0x9]
c00157cd:	3c 01                	cmp    al,0x1
c00157cf:	76 40                	jbe    c0015811 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c00157d1:	80 f9 5b             	cmp    cl,0x5b
c00157d4:	75 3f                	jne    c0015815 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd5>
c00157d6:	80 fb 40             	cmp    bl,0x40
c00157d9:	75 36                	jne    c0015811 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c00157db:	83 ec 0c             	sub    esp,0xc
c00157de:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c00157e2:	55                   	push   ebp
c00157e3:	e8 3d ae fe ff       	call   c0000625 <strlen>
c00157e8:	83 c4 10             	add    esp,0x10
c00157eb:	83 f8 3f             	cmp    eax,0x3f
c00157ee:	0f 87 9f 00 00 00    	ja     c0015893 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c00157f4:	50                   	push   eax
c00157f5:	50                   	push   eax
c00157f6:	55                   	push   ebp
c00157f7:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c00157fb:	55                   	push   ebp
c00157fc:	e8 a6 ae fe ff       	call   c00006a7 <strcpy>
c0015801:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015804:	e8 1c ae fe ff       	call   c0000625 <strlen>
c0015809:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001580e:	83 c4 10             	add    esp,0x10
c0015811:	31 c9                	xor    ecx,ecx
c0015813:	eb 76                	jmp    c001588b <Reg::findLineFromLoadedData(char*, char*, char*)+0x14b>
c0015815:	80 fb 40             	cmp    bl,0x40
c0015818:	74 06                	je     c0015820 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe0>
c001581a:	8d 6c 24 58          	lea    ebp,[esp+0x58]
c001581e:	eb 19                	jmp    c0015839 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015820:	51                   	push   ecx
c0015821:	51                   	push   ecx
c0015822:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015826:	8d 44 24 24          	lea    eax,[esp+0x24]
c001582a:	50                   	push   eax
c001582b:	e8 c8 ae fe ff       	call   c00006f8 <strcmp>
c0015830:	83 c4 10             	add    esp,0x10
c0015833:	85 c0                	test   eax,eax
c0015835:	75 da                	jne    c0015811 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015837:	eb e1                	jmp    c001581a <Reg::findLineFromLoadedData(char*, char*, char*)+0xda>
c0015839:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001583c:	84 c0                	test   al,al
c001583e:	0f 94 c1             	sete   cl
c0015841:	3c 3d                	cmp    al,0x3d
c0015843:	0f 94 c2             	sete   dl
c0015846:	08 d1                	or     cl,dl
c0015848:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001584c:	75 03                	jne    c0015851 <Reg::findLineFromLoadedData(char*, char*, char*)+0x111>
c001584e:	45                   	inc    ebp
c001584f:	eb e8                	jmp    c0015839 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015851:	84 c0                	test   al,al
c0015853:	74 3e                	je     c0015893 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015855:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0015859:	52                   	push   edx
c001585a:	52                   	push   edx
c001585b:	8d 44 24 60          	lea    eax,[esp+0x60]
c001585f:	50                   	push   eax
c0015860:	56                   	push   esi
c0015861:	e8 92 ae fe ff       	call   c00006f8 <strcmp>
c0015866:	83 c4 10             	add    esp,0x10
c0015869:	85 c0                	test   eax,eax
c001586b:	75 a4                	jne    c0015811 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c001586d:	50                   	push   eax
c001586e:	8d 55 01             	lea    edx,[ebp+0x1]
c0015871:	50                   	push   eax
c0015872:	52                   	push   edx
c0015873:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001587a:	e8 28 ae fe ff       	call   c00006a7 <strcpy>
c001587f:	83 c4 10             	add    esp,0x10
c0015882:	eb 14                	jmp    c0015898 <Reg::findLineFromLoadedData(char*, char*, char*)+0x158>
c0015884:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015887:	88 44 14 58          	mov    BYTE PTR [esp+edx*1+0x58],al
c001588b:	47                   	inc    edi
c001588c:	89 ca                	mov    edx,ecx
c001588e:	e9 00 ff ff ff       	jmp    c0015793 <Reg::findLineFromLoadedData(char*, char*, char*)+0x53>
c0015893:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0015898:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001589c:	81 c4 2c 01 00 00    	add    esp,0x12c
c00158a2:	5b                   	pop    ebx
c00158a3:	5e                   	pop    esi
c00158a4:	5f                   	pop    edi
c00158a5:	5d                   	pop    ebp
c00158a6:	c3                   	ret    

c00158a7 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00158a7:	57                   	push   edi
c00158a8:	56                   	push   esi
c00158a9:	53                   	push   ebx
c00158aa:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00158b0:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c00158b7:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c00158be:	53                   	push   ebx
c00158bf:	e8 61 ad fe ff       	call   c0000625 <strlen>
c00158c4:	89 34 24             	mov    DWORD PTR [esp],esi
c00158c7:	89 c7                	mov    edi,eax
c00158c9:	e8 57 ad fe ff       	call   c0000625 <strlen>
c00158ce:	83 c4 10             	add    esp,0x10
c00158d1:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00158d5:	31 ff                	xor    edi,edi
c00158d7:	3d ff 00 00 00       	cmp    eax,0xff
c00158dc:	0f 87 18 01 00 00    	ja     c00159fa <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c00158e2:	51                   	push   ecx
c00158e3:	51                   	push   ecx
c00158e4:	56                   	push   esi
c00158e5:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00158e9:	56                   	push   esi
c00158ea:	e8 b8 ad fe ff       	call   c00006a7 <strcpy>
c00158ef:	58                   	pop    eax
c00158f0:	5a                   	pop    edx
c00158f1:	68 d4 27 02 c0       	push   0xc00227d4
c00158f6:	56                   	push   esi
c00158f7:	e8 62 ae fe ff       	call   c000075e <strcat>
c00158fc:	59                   	pop    ecx
c00158fd:	58                   	pop    eax
c00158fe:	53                   	push   ebx
c00158ff:	56                   	push   esi
c0015900:	e8 59 ae fe ff       	call   c000075e <strcat>
c0015905:	58                   	pop    eax
c0015906:	5a                   	pop    edx
c0015907:	68 c2 23 02 c0       	push   0xc00223c2
c001590c:	56                   	push   esi
c001590d:	e8 4c ae fe ff       	call   c000075e <strcat>
c0015912:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015919:	e8 06 97 ff ff       	call   c000f024 <operator new(unsigned long)>
c001591e:	83 c4 0c             	add    esp,0xc
c0015921:	89 c3                	mov    ebx,eax
c0015923:	ff 35 74 55 02 c0    	push   DWORD PTR ds:0xc0025574
c0015929:	56                   	push   esi
c001592a:	50                   	push   eax
c001592b:	e8 60 9d ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0015930:	59                   	pop    ecx
c0015931:	5e                   	pop    esi
c0015932:	6a 01                	push   0x1
c0015934:	53                   	push   ebx
c0015935:	e8 ba 9d ff ff       	call   c000f6f4 <File::open(FileOpenMode)>
c001593a:	83 c4 10             	add    esp,0x10
c001593d:	85 c0                	test   eax,eax
c001593f:	74 08                	je     c0015949 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0015941:	83 ec 0c             	sub    esp,0xc
c0015944:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015946:	53                   	push   ebx
c0015947:	eb 2e                	jmp    c0015977 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0015949:	52                   	push   edx
c001594a:	8d 44 24 07          	lea    eax,[esp+0x7]
c001594e:	50                   	push   eax
c001594f:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015953:	50                   	push   eax
c0015954:	53                   	push   ebx
c0015955:	e8 46 a0 ff ff       	call   c000f9a0 <File::stat(unsigned long long*, bool*)>
c001595a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001595e:	83 c4 10             	add    esp,0x10
c0015961:	89 c1                	mov    ecx,eax
c0015963:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0015967:	75 13                	jne    c001597c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0015969:	83 ec 0c             	sub    esp,0xc
c001596c:	53                   	push   ebx
c001596d:	e8 e0 9d ff ff       	call   c000f752 <File::close()>
c0015972:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015974:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015977:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001597a:	eb 7b                	jmp    c00159f7 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c001597c:	83 ec 0c             	sub    esp,0xc
c001597f:	50                   	push   eax
c0015980:	e8 a2 65 ff ff       	call   c000bf27 <malloc>
c0015985:	89 c6                	mov    esi,eax
c0015987:	58                   	pop    eax
c0015988:	8b 03                	mov    eax,DWORD PTR [ebx]
c001598a:	8d 54 24 10          	lea    edx,[esp+0x10]
c001598e:	52                   	push   edx
c001598f:	56                   	push   esi
c0015990:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015994:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015998:	53                   	push   ebx
c0015999:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001599c:	83 c4 20             	add    esp,0x20
c001599f:	85 c0                	test   eax,eax
c00159a1:	75 0a                	jne    c00159ad <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00159a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00159a7:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00159ab:	74 18                	je     c00159c5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c00159ad:	83 ec 0c             	sub    esp,0xc
c00159b0:	31 ff                	xor    edi,edi
c00159b2:	53                   	push   ebx
c00159b3:	e8 9a 9d ff ff       	call   c000f752 <File::close()>
c00159b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00159bd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00159c0:	83 c4 10             	add    esp,0x10
c00159c3:	eb 35                	jmp    c00159fa <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c00159c5:	83 ec 0c             	sub    esp,0xc
c00159c8:	53                   	push   ebx
c00159c9:	e8 84 9d ff ff       	call   c000f752 <File::close()>
c00159ce:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00159d3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00159d6:	83 c4 0c             	add    esp,0xc
c00159d9:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c00159e0:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c00159e7:	56                   	push   esi
c00159e8:	e8 53 fd ff ff       	call   c0015740 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00159ed:	89 34 24             	mov    DWORD PTR [esp],esi
c00159f0:	89 c7                	mov    edi,eax
c00159f2:	e8 40 65 ff ff       	call   c000bf37 <free>
c00159f7:	83 c4 10             	add    esp,0x10
c00159fa:	81 c4 10 01 00 00    	add    esp,0x110
c0015a00:	89 f8                	mov    eax,edi
c0015a02:	5b                   	pop    ebx
c0015a03:	5e                   	pop    esi
c0015a04:	5f                   	pop    edi
c0015a05:	c3                   	ret    

c0015a06 <Reg::getLine(char*, char*, char*)>:
c0015a06:	57                   	push   edi
c0015a07:	56                   	push   esi
c0015a08:	53                   	push   ebx
c0015a09:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0015a0d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015a11:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015a15:	57                   	push   edi
c0015a16:	56                   	push   esi
c0015a17:	53                   	push   ebx
c0015a18:	68 c7 23 02 c0       	push   0xc00223c7
c0015a1d:	e8 85 fe ff ff       	call   c00158a7 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015a22:	83 c4 10             	add    esp,0x10
c0015a25:	84 c0                	test   al,al
c0015a27:	75 10                	jne    c0015a39 <Reg::getLine(char*, char*, char*)+0x33>
c0015a29:	57                   	push   edi
c0015a2a:	56                   	push   esi
c0015a2b:	53                   	push   ebx
c0015a2c:	68 ec 23 02 c0       	push   0xc00223ec
c0015a31:	e8 71 fe ff ff       	call   c00158a7 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0015a36:	83 c4 10             	add    esp,0x10
c0015a39:	5b                   	pop    ebx
c0015a3a:	5e                   	pop    esi
c0015a3b:	5f                   	pop    edi
c0015a3c:	c3                   	ret    

c0015a3d <Reg::readInt(char*, char*, int*)>:
c0015a3d:	55                   	push   ebp
c0015a3e:	57                   	push   edi
c0015a3f:	56                   	push   esi
c0015a40:	53                   	push   ebx
c0015a41:	81 ec f0 00 00 00    	sub    esp,0xf0
c0015a47:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0015a4b:	57                   	push   edi
c0015a4c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015a53:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0015a5a:	e8 a7 ff ff ff       	call   c0015a06 <Reg::getLine(char*, char*, char*)>
c0015a5f:	83 c4 10             	add    esp,0x10
c0015a62:	84 c0                	test   al,al
c0015a64:	0f 84 b2 00 00 00    	je     c0015b1c <Reg::readInt(char*, char*, int*)+0xdf>
c0015a6a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0015a6e:	80 fa 2b             	cmp    dl,0x2b
c0015a71:	74 0c                	je     c0015a7f <Reg::readInt(char*, char*, int*)+0x42>
c0015a73:	80 fa 2d             	cmp    dl,0x2d
c0015a76:	75 0e                	jne    c0015a86 <Reg::readInt(char*, char*, int*)+0x49>
c0015a78:	ba 01 00 00 00       	mov    edx,0x1
c0015a7d:	eb 0b                	jmp    c0015a8a <Reg::readInt(char*, char*, int*)+0x4d>
c0015a7f:	ba 01 00 00 00       	mov    edx,0x1
c0015a84:	eb 02                	jmp    c0015a88 <Reg::readInt(char*, char*, int*)+0x4b>
c0015a86:	31 d2                	xor    edx,edx
c0015a88:	31 c0                	xor    eax,eax
c0015a8a:	be 0a 00 00 00       	mov    esi,0xa
c0015a8f:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0015a94:	75 20                	jne    c0015ab6 <Reg::readInt(char*, char*, int*)+0x79>
c0015a96:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0015a9a:	80 f9 78             	cmp    cl,0x78
c0015a9d:	75 0a                	jne    c0015aa9 <Reg::readInt(char*, char*, int*)+0x6c>
c0015a9f:	83 c2 02             	add    edx,0x2
c0015aa2:	be 10 00 00 00       	mov    esi,0x10
c0015aa7:	eb 0d                	jmp    c0015ab6 <Reg::readInt(char*, char*, int*)+0x79>
c0015aa9:	80 f9 62             	cmp    cl,0x62
c0015aac:	75 08                	jne    c0015ab6 <Reg::readInt(char*, char*, int*)+0x79>
c0015aae:	83 c2 02             	add    edx,0x2
c0015ab1:	be 02 00 00 00       	mov    esi,0x2
c0015ab6:	01 d7                	add    edi,edx
c0015ab8:	31 d2                	xor    edx,edx
c0015aba:	8a 1f                	mov    bl,BYTE PTR [edi]
c0015abc:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0015ac0:	84 db                	test   bl,bl
c0015ac2:	0f 94 c3             	sete   bl
c0015ac5:	80 7c 24 0f 0d       	cmp    BYTE PTR [esp+0xf],0xd
c0015aca:	0f 94 c1             	sete   cl
c0015acd:	08 cb                	or     bl,cl
c0015acf:	75 3a                	jne    c0015b0b <Reg::readInt(char*, char*, int*)+0xce>
c0015ad1:	0f af d6             	imul   edx,esi
c0015ad4:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0015ad9:	83 fe 10             	cmp    esi,0x10
c0015adc:	75 26                	jne    c0015b04 <Reg::readInt(char*, char*, int*)+0xc7>
c0015ade:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015ae2:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0015ae5:	89 e9                	mov    ecx,ebp
c0015ae7:	80 f9 05             	cmp    cl,0x5
c0015aea:	77 06                	ja     c0015af2 <Reg::readInt(char*, char*, int*)+0xb5>
c0015aec:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015af0:	eb 16                	jmp    c0015b08 <Reg::readInt(char*, char*, int*)+0xcb>
c0015af2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015af6:	83 e9 61             	sub    ecx,0x61
c0015af9:	80 f9 05             	cmp    cl,0x5
c0015afc:	77 06                	ja     c0015b04 <Reg::readInt(char*, char*, int*)+0xc7>
c0015afe:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0015b02:	eb 04                	jmp    c0015b08 <Reg::readInt(char*, char*, int*)+0xcb>
c0015b04:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0015b08:	47                   	inc    edi
c0015b09:	eb af                	jmp    c0015aba <Reg::readInt(char*, char*, int*)+0x7d>
c0015b0b:	84 c0                	test   al,al
c0015b0d:	74 02                	je     c0015b11 <Reg::readInt(char*, char*, int*)+0xd4>
c0015b0f:	f7 da                	neg    edx
c0015b11:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0015b18:	89 10                	mov    DWORD PTR [eax],edx
c0015b1a:	88 d8                	mov    al,bl
c0015b1c:	81 c4 ec 00 00 00    	add    esp,0xec
c0015b22:	5b                   	pop    ebx
c0015b23:	5e                   	pop    esi
c0015b24:	5f                   	pop    edi
c0015b25:	5d                   	pop    ebp
c0015b26:	c3                   	ret    

c0015b27 <Reg::readString(char*, char*, char*, int)>:
c0015b27:	57                   	push   edi
c0015b28:	56                   	push   esi
c0015b29:	53                   	push   ebx
c0015b2a:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015b30:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0015b34:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0015b3b:	57                   	push   edi
c0015b3c:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015b43:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015b4a:	e8 b7 fe ff ff       	call   c0015a06 <Reg::getLine(char*, char*, char*)>
c0015b4f:	83 c4 10             	add    esp,0x10
c0015b52:	89 c6                	mov    esi,eax
c0015b54:	84 c0                	test   al,al
c0015b56:	74 44                	je     c0015b9c <Reg::readString(char*, char*, char*, int)+0x75>
c0015b58:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0015b5f:	31 c0                	xor    eax,eax
c0015b61:	4a                   	dec    edx
c0015b62:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015b65:	84 c9                	test   cl,cl
c0015b67:	74 0f                	je     c0015b78 <Reg::readString(char*, char*, char*, int)+0x51>
c0015b69:	39 c2                	cmp    edx,eax
c0015b6b:	7e 0b                	jle    c0015b78 <Reg::readString(char*, char*, char*, int)+0x51>
c0015b6d:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0015b70:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015b75:	40                   	inc    eax
c0015b76:	eb ea                	jmp    c0015b62 <Reg::readString(char*, char*, char*, int)+0x3b>
c0015b78:	83 ec 0c             	sub    esp,0xc
c0015b7b:	53                   	push   ebx
c0015b7c:	e8 a4 aa fe ff       	call   c0000625 <strlen>
c0015b81:	83 c4 10             	add    esp,0x10
c0015b84:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c0015b89:	75 11                	jne    c0015b9c <Reg::readString(char*, char*, char*, int)+0x75>
c0015b8b:	83 ec 0c             	sub    esp,0xc
c0015b8e:	53                   	push   ebx
c0015b8f:	e8 91 aa fe ff       	call   c0000625 <strlen>
c0015b94:	83 c4 10             	add    esp,0x10
c0015b97:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0015b9c:	81 c4 d0 00 00 00    	add    esp,0xd0
c0015ba2:	89 f0                	mov    eax,esi
c0015ba4:	5b                   	pop    ebx
c0015ba5:	5e                   	pop    esi
c0015ba6:	5f                   	pop    edi
c0015ba7:	c3                   	ret    

c0015ba8 <Reg::readBool(char*, char*, bool*)>:
c0015ba8:	83 ec 20             	sub    esp,0x20
c0015bab:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015baf:	50                   	push   eax
c0015bb0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bb8:	e8 80 fe ff ff       	call   c0015a3d <Reg::readInt(char*, char*, int*)>
c0015bbd:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015bc1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0015bc6:	0f 95 02             	setne  BYTE PTR [edx]
c0015bc9:	83 c4 2c             	add    esp,0x2c
c0015bcc:	c3                   	ret    

c0015bcd <Reg::readBoolWithDefault(char*, char*, bool)>:
c0015bcd:	53                   	push   ebx
c0015bce:	83 ec 1c             	sub    esp,0x1c
c0015bd1:	8d 44 24 13          	lea    eax,[esp+0x13]
c0015bd5:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c0015bd9:	50                   	push   eax
c0015bda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015bde:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015be2:	e8 c1 ff ff ff       	call   c0015ba8 <Reg::readBool(char*, char*, bool*)>
c0015be7:	83 c4 10             	add    esp,0x10
c0015bea:	84 c0                	test   al,al
c0015bec:	74 04                	je     c0015bf2 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0015bee:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0015bf2:	83 c4 18             	add    esp,0x18
c0015bf5:	88 d8                	mov    al,bl
c0015bf7:	5b                   	pop    ebx
c0015bf8:	c3                   	ret    

c0015bf9 <Reg::readIntWithDefault(char*, char*, int)>:
c0015bf9:	53                   	push   ebx
c0015bfa:	83 ec 1c             	sub    esp,0x1c
c0015bfd:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015c01:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015c05:	50                   	push   eax
c0015c06:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c0a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c0e:	e8 2a fe ff ff       	call   c0015a3d <Reg::readInt(char*, char*, int*)>
c0015c13:	83 c4 10             	add    esp,0x10
c0015c16:	84 c0                	test   al,al
c0015c18:	74 04                	je     c0015c1e <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0015c1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0015c1e:	83 c4 18             	add    esp,0x18
c0015c21:	89 d8                	mov    eax,ebx
c0015c23:	5b                   	pop    ebx
c0015c24:	c3                   	ret    

c0015c25 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015c25:	56                   	push   esi
c0015c26:	53                   	push   ebx
c0015c27:	51                   	push   ecx
c0015c28:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0015c2c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015c30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c34:	56                   	push   esi
c0015c35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015c3d:	e8 e5 fe ff ff       	call   c0015b27 <Reg::readString(char*, char*, char*, int)>
c0015c42:	83 c4 10             	add    esp,0x10
c0015c45:	84 c0                	test   al,al
c0015c47:	74 02                	je     c0015c4b <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c0015c49:	89 f3                	mov    ebx,esi
c0015c4b:	5a                   	pop    edx
c0015c4c:	89 d8                	mov    eax,ebx
c0015c4e:	5b                   	pop    ebx
c0015c4f:	5e                   	pop    esi
c0015c50:	c3                   	ret    

c0015c51 <Sys::exit(regs*)>:
c0015c51:	83 ec 18             	sub    esp,0x18
c0015c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015c58:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015c5b:	e8 c2 31 00 00       	call   c0018e22 <terminateTask(int)>
c0015c60:	83 c8 ff             	or     eax,0xffffffff
c0015c63:	89 c2                	mov    edx,eax
c0015c65:	83 c4 1c             	add    esp,0x1c
c0015c68:	c3                   	ret    

c0015c69 <Sys::loadDLL(regs*)>:
c0015c69:	56                   	push   esi
c0015c6a:	31 d2                	xor    edx,edx
c0015c6c:	53                   	push   ebx
c0015c6d:	b8 01 00 00 00       	mov    eax,0x1
c0015c72:	51                   	push   ecx
c0015c73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015c77:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0015c7b:	74 7d                	je     c0015cfa <Sys::loadDLL(regs*)+0x91>
c0015c7d:	83 ec 0c             	sub    esp,0xc
c0015c80:	68 14 01 00 00       	push   0x114
c0015c85:	e8 9a 93 ff ff       	call   c000f024 <operator new(unsigned long)>
c0015c8a:	89 c3                	mov    ebx,eax
c0015c8c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c91:	83 c4 0c             	add    esp,0xc
c0015c94:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015c97:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015c9a:	53                   	push   ebx
c0015c9b:	e8 f0 99 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0015ca0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ca3:	e8 ba 9c ff ff       	call   c000f962 <File::exists()>
c0015ca8:	83 c4 10             	add    esp,0x10
c0015cab:	84 c0                	test   al,al
c0015cad:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015caf:	75 11                	jne    c0015cc2 <Sys::loadDLL(regs*)+0x59>
c0015cb1:	83 ec 0c             	sub    esp,0xc
c0015cb4:	53                   	push   ebx
c0015cb5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015cb8:	83 c4 10             	add    esp,0x10
c0015cbb:	b8 03 00 00 00       	mov    eax,0x3
c0015cc0:	eb 36                	jmp    c0015cf8 <Sys::loadDLL(regs*)+0x8f>
c0015cc2:	83 ec 0c             	sub    esp,0xc
c0015cc5:	53                   	push   ebx
c0015cc6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015cc9:	58                   	pop    eax
c0015cca:	5a                   	pop    edx
c0015ccb:	6a 00                	push   0x0
c0015ccd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0015cd0:	e8 3a 21 00 00       	call   c0017e0f <Thr::loadDLL(char const*, bool)>
c0015cd5:	83 c4 10             	add    esp,0x10
c0015cd8:	89 c1                	mov    ecx,eax
c0015cda:	31 d2                	xor    edx,edx
c0015cdc:	b8 04 00 00 00       	mov    eax,0x4
c0015ce1:	85 c9                	test   ecx,ecx
c0015ce3:	74 15                	je     c0015cfa <Sys::loadDLL(regs*)+0x91>
c0015ce5:	53                   	push   ebx
c0015ce6:	53                   	push   ebx
c0015ce7:	ff 35 28 41 02 c0    	push   DWORD PTR ds:0xc0024128
c0015ced:	51                   	push   ecx
c0015cee:	e8 e2 22 00 00       	call   c0017fd5 <Thr::executeDLL(unsigned long, void*)>
c0015cf3:	83 c4 10             	add    esp,0x10
c0015cf6:	31 c0                	xor    eax,eax
c0015cf8:	31 d2                	xor    edx,edx
c0015cfa:	59                   	pop    ecx
c0015cfb:	5b                   	pop    ebx
c0015cfc:	5e                   	pop    esi
c0015cfd:	c3                   	ret    

c0015cfe <Sys::read(regs*)>:
c0015cfe:	57                   	push   edi
c0015cff:	56                   	push   esi
c0015d00:	53                   	push   ebx
c0015d01:	83 ec 10             	sub    esp,0x10
c0015d04:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015d08:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015d0b:	83 f8 02             	cmp    eax,0x2
c0015d0e:	77 10                	ja     c0015d20 <Sys::read(regs*)+0x22>
c0015d10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d15:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015d18:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015d1e:	eb 0e                	jmp    c0015d2e <Sys::read(regs*)+0x30>
c0015d20:	83 ec 0c             	sub    esp,0xc
c0015d23:	50                   	push   eax
c0015d24:	e8 8c 82 ff ff       	call   c000dfb5 <getFromFileDescriptor(int)>
c0015d29:	83 c4 10             	add    esp,0x10
c0015d2c:	89 c1                	mov    ecx,eax
c0015d2e:	83 c8 ff             	or     eax,0xffffffff
c0015d31:	85 c9                	test   ecx,ecx
c0015d33:	89 c2                	mov    edx,eax
c0015d35:	74 28                	je     c0015d5f <Sys::read(regs*)+0x61>
c0015d37:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015d3f:	83 ec 0c             	sub    esp,0xc
c0015d42:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015d44:	31 ff                	xor    edi,edi
c0015d46:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015d4a:	52                   	push   edx
c0015d4b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015d4e:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015d51:	57                   	push   edi
c0015d52:	56                   	push   esi
c0015d53:	51                   	push   ecx
c0015d54:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015d57:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015d5b:	83 c4 20             	add    esp,0x20
c0015d5e:	99                   	cdq    
c0015d5f:	83 c4 10             	add    esp,0x10
c0015d62:	5b                   	pop    ebx
c0015d63:	5e                   	pop    esi
c0015d64:	5f                   	pop    edi
c0015d65:	c3                   	ret    

c0015d66 <Sys::sbrk(regs*)>:
c0015d66:	56                   	push   esi
c0015d67:	53                   	push   ebx
c0015d68:	50                   	push   eax
c0015d69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d6e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d72:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015d75:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0015d78:	85 db                	test   ebx,ebx
c0015d7a:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c0015d80:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0015d83:	74 02                	je     c0015d87 <Sys::sbrk(regs*)+0x21>
c0015d85:	79 06                	jns    c0015d8d <Sys::sbrk(regs*)+0x27>
c0015d87:	89 f0                	mov    eax,esi
c0015d89:	31 d2                	xor    edx,edx
c0015d8b:	eb 2a                	jmp    c0015db7 <Sys::sbrk(regs*)+0x51>
c0015d8d:	83 c8 ff             	or     eax,0xffffffff
c0015d90:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0015d96:	89 c2                	mov    edx,eax
c0015d98:	77 1d                	ja     c0015db7 <Sys::sbrk(regs*)+0x51>
c0015d9a:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0015da0:	50                   	push   eax
c0015da1:	c1 ea 0c             	shr    edx,0xc
c0015da4:	68 07 04 00 00       	push   0x407
c0015da9:	52                   	push   edx
c0015daa:	51                   	push   ecx
c0015dab:	e8 5c 8b ff ff       	call   c000e90c <VAS::allocatePages(int, int)>
c0015db0:	89 f0                	mov    eax,esi
c0015db2:	31 d2                	xor    edx,edx
c0015db4:	83 c4 10             	add    esp,0x10
c0015db7:	59                   	pop    ecx
c0015db8:	5b                   	pop    ebx
c0015db9:	5e                   	pop    esi
c0015dba:	c3                   	ret    

c0015dbb <Sys::write(regs*)>:
c0015dbb:	57                   	push   edi
c0015dbc:	56                   	push   esi
c0015dbd:	53                   	push   ebx
c0015dbe:	83 ec 18             	sub    esp,0x18
c0015dc1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0015dc5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015dc8:	68 07 24 02 c0       	push   0xc0022407
c0015dcd:	e8 87 93 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0015dd2:	83 c4 10             	add    esp,0x10
c0015dd5:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c0015dd9:	77 10                	ja     c0015deb <Sys::write(regs*)+0x30>
c0015ddb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015de0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015de3:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015de9:	eb 1b                	jmp    c0015e06 <Sys::write(regs*)+0x4b>
c0015deb:	83 ec 0c             	sub    esp,0xc
c0015dee:	68 26 24 02 c0       	push   0xc0022426
c0015df3:	e8 61 93 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0015df8:	58                   	pop    eax
c0015df9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015dfc:	e8 b4 81 ff ff       	call   c000dfb5 <getFromFileDescriptor(int)>
c0015e01:	83 c4 10             	add    esp,0x10
c0015e04:	89 c1                	mov    ecx,eax
c0015e06:	83 c8 ff             	or     eax,0xffffffff
c0015e09:	85 c9                	test   ecx,ecx
c0015e0b:	89 c2                	mov    edx,eax
c0015e0d:	74 28                	je     c0015e37 <Sys::write(regs*)+0x7c>
c0015e0f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015e17:	83 ec 0c             	sub    esp,0xc
c0015e1a:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015e1c:	31 ff                	xor    edi,edi
c0015e1e:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015e22:	52                   	push   edx
c0015e23:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015e26:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015e29:	57                   	push   edi
c0015e2a:	56                   	push   esi
c0015e2b:	51                   	push   ecx
c0015e2c:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015e2f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015e33:	83 c4 20             	add    esp,0x20
c0015e36:	99                   	cdq    
c0015e37:	83 c4 10             	add    esp,0x10
c0015e3a:	5b                   	pop    ebx
c0015e3b:	5e                   	pop    esi
c0015e3c:	5f                   	pop    edi
c0015e3d:	c3                   	ret    

c0015e3e <Sys::yield(regs*)>:
c0015e3e:	83 ec 0c             	sub    esp,0xc
c0015e41:	e8 af 25 00 00       	call   c00183f5 <lockScheduler()>
c0015e46:	e8 f3 28 00 00       	call   c001873e <schedule()>
c0015e4b:	e8 a7 25 00 00       	call   c00183f7 <unlockScheduler()>
c0015e50:	31 c0                	xor    eax,eax
c0015e52:	31 d2                	xor    edx,edx
c0015e54:	83 c4 0c             	add    esp,0xc
c0015e57:	c3                   	ret    

c0015e58 <sysCallGetPID(regs*)>:
c0015e58:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e5d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015e60:	8b 00                	mov    eax,DWORD PTR [eax]
c0015e62:	89 c2                	mov    edx,eax
c0015e64:	c1 fa 1f             	sar    edx,0x1f
c0015e67:	c3                   	ret    

c0015e68 <sysCallSeekDir(regs*)>:
c0015e68:	31 c0                	xor    eax,eax
c0015e6a:	31 d2                	xor    edx,edx
c0015e6c:	c3                   	ret    

c0015e6d <sysCallTellDir(regs*)>:
c0015e6d:	31 c0                	xor    eax,eax
c0015e6f:	31 d2                	xor    edx,edx
c0015e71:	c3                   	ret    

c0015e72 <sysCallVerify(regs*)>:
c0015e72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e76:	31 d2                	xor    edx,edx
c0015e78:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e7b:	c3                   	ret    

c0015e7c <sysCallFork(regs*)>:
c0015e7c:	83 c8 ff             	or     eax,0xffffffff
c0015e7f:	83 ca ff             	or     edx,0xffffffff
c0015e82:	c3                   	ret    

c0015e83 <sysCallExecve(regs*)>:
c0015e83:	83 c8 ff             	or     eax,0xffffffff
c0015e86:	83 ca ff             	or     edx,0xffffffff
c0015e89:	c3                   	ret    

c0015e8a <sysCallGetArgc(regs*)>:
c0015e8a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e8f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015e92:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c0015e98:	89 c2                	mov    edx,eax
c0015e9a:	c1 fa 1f             	sar    edx,0x1f
c0015e9d:	c3                   	ret    

c0015e9e <sysFormatDisk(regs*)>:
c0015e9e:	56                   	push   esi
c0015e9f:	53                   	push   ebx
c0015ea0:	50                   	push   eax
c0015ea1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015ea5:	8b 1d 88 42 02 c0    	mov    ebx,DWORD PTR ds:0xc0024288
c0015eab:	eb 2a                	jmp    c0015ed7 <sysFormatDisk(regs*)+0x39>
c0015ead:	83 ec 0c             	sub    esp,0xc
c0015eb0:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0015eb3:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015eb6:	8b 13                	mov    edx,DWORD PTR [ebx]
c0015eb8:	51                   	push   ecx
c0015eb9:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0015ebc:	51                   	push   ecx
c0015ebd:	50                   	push   eax
c0015ebe:	8b 04 85 20 47 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb8e0]
c0015ec5:	50                   	push   eax
c0015ec6:	53                   	push   ebx
c0015ec7:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0015eca:	83 c4 20             	add    esp,0x20
c0015ecd:	89 c1                	mov    ecx,eax
c0015ecf:	83 f8 08             	cmp    eax,0x8
c0015ed2:	75 12                	jne    c0015ee6 <sysFormatDisk(regs*)+0x48>
c0015ed4:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0015ed7:	85 db                	test   ebx,ebx
c0015ed9:	75 d2                	jne    c0015ead <sysFormatDisk(regs*)+0xf>
c0015edb:	b8 03 00 00 00       	mov    eax,0x3
c0015ee0:	31 d2                	xor    edx,edx
c0015ee2:	59                   	pop    ecx
c0015ee3:	5b                   	pop    ebx
c0015ee4:	5e                   	pop    esi
c0015ee5:	c3                   	ret    
c0015ee6:	85 c0                	test   eax,eax
c0015ee8:	74 13                	je     c0015efd <sysFormatDisk(regs*)+0x5f>
c0015eea:	31 d2                	xor    edx,edx
c0015eec:	b8 01 00 00 00       	mov    eax,0x1
c0015ef1:	83 f9 09             	cmp    ecx,0x9
c0015ef4:	74 ec                	je     c0015ee2 <sysFormatDisk(regs*)+0x44>
c0015ef6:	b8 02 00 00 00       	mov    eax,0x2
c0015efb:	eb e3                	jmp    c0015ee0 <sysFormatDisk(regs*)+0x42>
c0015efd:	31 c0                	xor    eax,eax
c0015eff:	eb df                	jmp    c0015ee0 <sysFormatDisk(regs*)+0x42>

c0015f01 <sysSetDiskVolumeLabel(regs*)>:
c0015f01:	56                   	push   esi
c0015f02:	53                   	push   ebx
c0015f03:	53                   	push   ebx
c0015f04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f08:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015f0b:	83 f8 19             	cmp    eax,0x19
c0015f0e:	77 2d                	ja     c0015f3d <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015f10:	8b 0c 85 20 47 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdb8e0]
c0015f17:	85 c9                	test   ecx,ecx
c0015f19:	74 22                	je     c0015f3d <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015f1b:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0015f1e:	85 d2                	test   edx,edx
c0015f20:	74 1b                	je     c0015f3d <sysSetDiskVolumeLabel(regs*)+0x3c>
c0015f22:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c0015f28:	8b 33                	mov    esi,DWORD PTR [ebx]
c0015f2a:	52                   	push   edx
c0015f2b:	50                   	push   eax
c0015f2c:	51                   	push   ecx
c0015f2d:	53                   	push   ebx
c0015f2e:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015f31:	83 c4 10             	add    esp,0x10
c0015f34:	89 c2                	mov    edx,eax
c0015f36:	c1 fa 1f             	sar    edx,0x1f
c0015f39:	59                   	pop    ecx
c0015f3a:	5b                   	pop    ebx
c0015f3b:	5e                   	pop    esi
c0015f3c:	c3                   	ret    
c0015f3d:	59                   	pop    ecx
c0015f3e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015f43:	5b                   	pop    ebx
c0015f44:	83 ca ff             	or     edx,0xffffffff
c0015f47:	5e                   	pop    esi
c0015f48:	c3                   	ret    

c0015f49 <sysGetDiskVolumeLabel(regs*)>:
c0015f49:	57                   	push   edi
c0015f4a:	56                   	push   esi
c0015f4b:	53                   	push   ebx
c0015f4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f50:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015f53:	83 fa 19             	cmp    edx,0x19
c0015f56:	77 38                	ja     c0015f90 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015f58:	8b 0c 95 20 47 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdb8e0]
c0015f5f:	85 c9                	test   ecx,ecx
c0015f61:	74 2d                	je     c0015f90 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015f63:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015f66:	85 db                	test   ebx,ebx
c0015f68:	74 26                	je     c0015f90 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015f6a:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015f6d:	85 c0                	test   eax,eax
c0015f6f:	74 1f                	je     c0015f90 <sysGetDiskVolumeLabel(regs*)+0x47>
c0015f71:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c0015f77:	83 ec 0c             	sub    esp,0xc
c0015f7a:	8b 3e                	mov    edi,DWORD PTR [esi]
c0015f7c:	50                   	push   eax
c0015f7d:	53                   	push   ebx
c0015f7e:	52                   	push   edx
c0015f7f:	51                   	push   ecx
c0015f80:	56                   	push   esi
c0015f81:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0015f84:	83 c4 20             	add    esp,0x20
c0015f87:	89 c2                	mov    edx,eax
c0015f89:	c1 fa 1f             	sar    edx,0x1f
c0015f8c:	5b                   	pop    ebx
c0015f8d:	5e                   	pop    esi
c0015f8e:	5f                   	pop    edi
c0015f8f:	c3                   	ret    
c0015f90:	5b                   	pop    ebx
c0015f91:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015f96:	5e                   	pop    esi
c0015f97:	83 ca ff             	or     edx,0xffffffff
c0015f9a:	5f                   	pop    edi
c0015f9b:	c3                   	ret    

c0015f9c <sysShutdown(regs*)>:
c0015f9c:	57                   	push   edi
c0015f9d:	56                   	push   esi
c0015f9e:	56                   	push   esi
c0015f9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fa3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015fa6:	85 c0                	test   eax,eax
c0015fa8:	74 18                	je     c0015fc2 <sysShutdown(regs*)+0x26>
c0015faa:	83 f8 01             	cmp    eax,0x1
c0015fad:	74 51                	je     c0016000 <sysShutdown(regs*)+0x64>
c0015faf:	83 ce ff             	or     esi,0xffffffff
c0015fb2:	83 cf ff             	or     edi,0xffffffff
c0015fb5:	83 f8 02             	cmp    eax,0x2
c0015fb8:	74 2a                	je     c0015fe4 <sysShutdown(regs*)+0x48>
c0015fba:	59                   	pop    ecx
c0015fbb:	89 f0                	mov    eax,esi
c0015fbd:	5e                   	pop    esi
c0015fbe:	89 fa                	mov    edx,edi
c0015fc0:	5f                   	pop    edi
c0015fc1:	c3                   	ret    
c0015fc2:	a1 28 41 02 c0       	mov    eax,ds:0xc0024128
c0015fc7:	83 ce ff             	or     esi,0xffffffff
c0015fca:	83 cf ff             	or     edi,0xffffffff
c0015fcd:	8b 10                	mov    edx,DWORD PTR [eax]
c0015fcf:	6a 00                	push   0x0
c0015fd1:	6a 00                	push   0x0
c0015fd3:	6a 00                	push   0x0
c0015fd5:	50                   	push   eax
c0015fd6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015fd9:	83 c4 10             	add    esp,0x10
c0015fdc:	89 f0                	mov    eax,esi
c0015fde:	89 fa                	mov    edx,edi
c0015fe0:	59                   	pop    ecx
c0015fe1:	5e                   	pop    esi
c0015fe2:	5f                   	pop    edi
c0015fe3:	c3                   	ret    
c0015fe4:	a1 28 41 02 c0       	mov    eax,ds:0xc0024128
c0015fe9:	8b 10                	mov    edx,DWORD PTR [eax]
c0015feb:	6a 00                	push   0x0
c0015fed:	6a 00                	push   0x0
c0015fef:	6a 01                	push   0x1
c0015ff1:	50                   	push   eax
c0015ff2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015ff5:	83 c4 10             	add    esp,0x10
c0015ff8:	89 f0                	mov    eax,esi
c0015ffa:	89 fa                	mov    edx,edi
c0015ffc:	59                   	pop    ecx
c0015ffd:	5e                   	pop    esi
c0015ffe:	5f                   	pop    edi
c0015fff:	c3                   	ret    
c0016000:	a1 a0 47 02 c0       	mov    eax,ds:0xc00247a0
c0016005:	85 c0                	test   eax,eax
c0016007:	74 02                	je     c001600b <sysShutdown(regs*)+0x6f>
c0016009:	ff d0                	call   eax
c001600b:	31 f6                	xor    esi,esi
c001600d:	59                   	pop    ecx
c001600e:	31 ff                	xor    edi,edi
c0016010:	89 f0                	mov    eax,esi
c0016012:	5e                   	pop    esi
c0016013:	89 fa                	mov    edx,edi
c0016015:	5f                   	pop    edi
c0016016:	c3                   	ret    

c0016017 <sysCallGetCwd(regs*)>:
c0016017:	83 ec 10             	sub    esp,0x10
c001601a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001601e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016021:	52                   	push   edx
c0016022:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016025:	51                   	push   ecx
c0016026:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001602b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001602e:	50                   	push   eax
c001602f:	e8 cd 99 ff ff       	call   c000fa01 <getcwd(Process*, char*, int)>
c0016034:	89 c2                	mov    edx,eax
c0016036:	83 c4 1c             	add    esp,0x1c
c0016039:	c1 fa 1f             	sar    edx,0x1f
c001603c:	c3                   	ret    

c001603d <sysCallSetCwd(regs*)>:
c001603d:	83 ec 14             	sub    esp,0x14
c0016040:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016044:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016047:	50                   	push   eax
c0016048:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001604d:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0016050:	52                   	push   edx
c0016051:	e8 d5 99 ff ff       	call   c000fa2b <setcwd(Process*, char*)>
c0016056:	89 c2                	mov    edx,eax
c0016058:	83 c4 1c             	add    esp,0x1c
c001605b:	c1 fa 1f             	sar    edx,0x1f
c001605e:	c3                   	ret    

c001605f <sysCallRealpath(regs*)>:
c001605f:	53                   	push   ebx
c0016060:	83 ec 08             	sub    esp,0x8
c0016063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016067:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c001606a:	85 c9                	test   ecx,ecx
c001606c:	74 35                	je     c00160a3 <sysCallRealpath(regs*)+0x44>
c001606e:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0016071:	31 d2                	xor    edx,edx
c0016073:	b8 01 00 00 00       	mov    eax,0x1
c0016078:	85 db                	test   ebx,ebx
c001607a:	75 05                	jne    c0016081 <sysCallRealpath(regs*)+0x22>
c001607c:	83 c4 08             	add    esp,0x8
c001607f:	5b                   	pop    ebx
c0016080:	c3                   	ret    
c0016081:	50                   	push   eax
c0016082:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016087:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001608a:	05 0c 01 00 00       	add    eax,0x10c
c001608f:	50                   	push   eax
c0016090:	51                   	push   ecx
c0016091:	53                   	push   ebx
c0016092:	e8 4f 94 ff ff       	call   c000f4e6 <standardiseFiles(char*, char const*, char const*)>
c0016097:	83 c4 10             	add    esp,0x10
c001609a:	31 c0                	xor    eax,eax
c001609c:	31 d2                	xor    edx,edx
c001609e:	83 c4 08             	add    esp,0x8
c00160a1:	5b                   	pop    ebx
c00160a2:	c3                   	ret    
c00160a3:	b8 01 00 00 00       	mov    eax,0x1
c00160a8:	31 d2                	xor    edx,edx
c00160aa:	eb f2                	jmp    c001609e <sysCallRealpath(regs*)+0x3f>

c00160ac <sysCallReadDir(regs*)>:
c00160ac:	53                   	push   ebx
c00160ad:	83 ec 18             	sub    esp,0x18
c00160b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00160b4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00160b7:	83 f8 02             	cmp    eax,0x2
c00160ba:	76 56                	jbe    c0016112 <sysCallReadDir(regs*)+0x66>
c00160bc:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00160bf:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c00160c5:	77 57                	ja     c001611e <sysCallReadDir(regs*)+0x72>
c00160c7:	83 ec 0c             	sub    esp,0xc
c00160ca:	50                   	push   eax
c00160cb:	e8 e5 7e ff ff       	call   c000dfb5 <getFromFileDescriptor(int)>
c00160d0:	83 c4 10             	add    esp,0x10
c00160d3:	85 c0                	test   eax,eax
c00160d5:	74 57                	je     c001612e <sysCallReadDir(regs*)+0x82>
c00160d7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00160df:	83 ec 0c             	sub    esp,0xc
c00160e2:	8b 10                	mov    edx,DWORD PTR [eax]
c00160e4:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00160e8:	51                   	push   ecx
c00160e9:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00160ec:	51                   	push   ecx
c00160ed:	6a 00                	push   0x0
c00160ef:	68 10 01 00 00       	push   0x110
c00160f4:	50                   	push   eax
c00160f5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00160f8:	83 c4 20             	add    esp,0x20
c00160fb:	89 c1                	mov    ecx,eax
c00160fd:	85 c0                	test   eax,eax
c00160ff:	74 38                	je     c0016139 <sysCallReadDir(regs*)+0x8d>
c0016101:	31 d2                	xor    edx,edx
c0016103:	b8 02 00 00 00       	mov    eax,0x2
c0016108:	83 f9 07             	cmp    ecx,0x7
c001610b:	74 05                	je     c0016112 <sysCallReadDir(regs*)+0x66>
c001610d:	83 c4 18             	add    esp,0x18
c0016110:	5b                   	pop    ebx
c0016111:	c3                   	ret    
c0016112:	b8 01 00 00 00       	mov    eax,0x1
c0016117:	31 d2                	xor    edx,edx
c0016119:	83 c4 18             	add    esp,0x18
c001611c:	5b                   	pop    ebx
c001611d:	c3                   	ret    
c001611e:	53                   	push   ebx
c001611f:	53                   	push   ebx
c0016120:	52                   	push   edx
c0016121:	68 48 24 02 c0       	push   0xc0022448
c0016126:	e8 2e 90 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001612b:	83 c4 10             	add    esp,0x10
c001612e:	83 c4 18             	add    esp,0x18
c0016131:	83 c8 ff             	or     eax,0xffffffff
c0016134:	83 ca ff             	or     edx,0xffffffff
c0016137:	5b                   	pop    ebx
c0016138:	c3                   	ret    
c0016139:	31 c0                	xor    eax,eax
c001613b:	31 d2                	xor    edx,edx
c001613d:	eb da                	jmp    c0016119 <sysCallReadDir(regs*)+0x6d>

c001613f <sysCallIsATTY(regs*)>:
c001613f:	83 ec 0c             	sub    esp,0xc
c0016142:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016146:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016149:	83 f8 02             	cmp    eax,0x2
c001614c:	76 07                	jbe    c0016155 <sysCallIsATTY(regs*)+0x16>
c001614e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016153:	75 28                	jne    c001617d <sysCallIsATTY(regs*)+0x3e>
c0016155:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001615a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001615d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0016163:	85 c0                	test   eax,eax
c0016165:	74 26                	je     c001618d <sysCallIsATTY(regs*)+0x4e>
c0016167:	83 ec 0c             	sub    esp,0xc
c001616a:	8b 10                	mov    edx,DWORD PTR [eax]
c001616c:	50                   	push   eax
c001616d:	ff 12                	call   DWORD PTR [edx]
c001616f:	83 c4 10             	add    esp,0x10
c0016172:	25 ff 00 00 00       	and    eax,0xff
c0016177:	31 d2                	xor    edx,edx
c0016179:	83 c4 0c             	add    esp,0xc
c001617c:	c3                   	ret    
c001617d:	83 ec 0c             	sub    esp,0xc
c0016180:	50                   	push   eax
c0016181:	e8 2f 7e ff ff       	call   c000dfb5 <getFromFileDescriptor(int)>
c0016186:	83 c4 10             	add    esp,0x10
c0016189:	85 c0                	test   eax,eax
c001618b:	75 da                	jne    c0016167 <sysCallIsATTY(regs*)+0x28>
c001618d:	83 c8 ff             	or     eax,0xffffffff
c0016190:	83 ca ff             	or     edx,0xffffffff
c0016193:	83 c4 0c             	add    esp,0xc
c0016196:	c3                   	ret    

c0016197 <sysCallSeek(regs*)>:
c0016197:	53                   	push   ebx
c0016198:	83 ec 08             	sub    esp,0x8
c001619b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001619f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00161a2:	83 f8 02             	cmp    eax,0x2
c00161a5:	76 4b                	jbe    c00161f2 <sysCallSeek(regs*)+0x5b>
c00161a7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00161ac:	77 34                	ja     c00161e2 <sysCallSeek(regs*)+0x4b>
c00161ae:	83 ec 0c             	sub    esp,0xc
c00161b1:	50                   	push   eax
c00161b2:	e8 fe 7d ff ff       	call   c000dfb5 <getFromFileDescriptor(int)>
c00161b7:	83 c4 0c             	add    esp,0xc
c00161ba:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00161bd:	31 db                	xor    ebx,ebx
c00161bf:	53                   	push   ebx
c00161c0:	51                   	push   ecx
c00161c1:	50                   	push   eax
c00161c2:	e8 eb 95 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c00161c7:	83 c4 10             	add    esp,0x10
c00161ca:	85 c0                	test   eax,eax
c00161cc:	0f 95 c0             	setne  al
c00161cf:	25 ff 00 00 00       	and    eax,0xff
c00161d4:	31 d2                	xor    edx,edx
c00161d6:	f7 d8                	neg    eax
c00161d8:	83 d2 00             	adc    edx,0x0
c00161db:	83 c4 08             	add    esp,0x8
c00161de:	f7 da                	neg    edx
c00161e0:	5b                   	pop    ebx
c00161e1:	c3                   	ret    
c00161e2:	52                   	push   edx
c00161e3:	52                   	push   edx
c00161e4:	50                   	push   eax
c00161e5:	68 04 25 02 c0       	push   0xc0022504
c00161ea:	e8 6a 8f ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00161ef:	83 c4 10             	add    esp,0x10
c00161f2:	83 c4 08             	add    esp,0x8
c00161f5:	83 c8 ff             	or     eax,0xffffffff
c00161f8:	83 ca ff             	or     edx,0xffffffff
c00161fb:	5b                   	pop    ebx
c00161fc:	c3                   	ret    

c00161fd <sysCallTell(regs*)>:
c00161fd:	53                   	push   ebx
c00161fe:	83 ec 08             	sub    esp,0x8
c0016201:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016205:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016208:	83 f8 02             	cmp    eax,0x2
c001620b:	76 60                	jbe    c001626d <sysCallTell(regs*)+0x70>
c001620d:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016212:	77 30                	ja     c0016244 <sysCallTell(regs*)+0x47>
c0016214:	83 ec 0c             	sub    esp,0xc
c0016217:	50                   	push   eax
c0016218:	e8 98 7d ff ff       	call   c000dfb5 <getFromFileDescriptor(int)>
c001621d:	5a                   	pop    edx
c001621e:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0016221:	59                   	pop    ecx
c0016222:	53                   	push   ebx
c0016223:	50                   	push   eax
c0016224:	e8 df 95 ff ff       	call   c000f808 <File::tell(unsigned long long*)>
c0016229:	83 c4 10             	add    esp,0x10
c001622c:	85 c0                	test   eax,eax
c001622e:	0f 95 c0             	setne  al
c0016231:	25 ff 00 00 00       	and    eax,0xff
c0016236:	31 d2                	xor    edx,edx
c0016238:	f7 d8                	neg    eax
c001623a:	83 d2 00             	adc    edx,0x0
c001623d:	83 c4 08             	add    esp,0x8
c0016240:	f7 da                	neg    edx
c0016242:	5b                   	pop    ebx
c0016243:	c3                   	ret    
c0016244:	52                   	push   edx
c0016245:	52                   	push   edx
c0016246:	50                   	push   eax
c0016247:	68 1e 25 02 c0       	push   0xc002251e
c001624c:	e8 08 8f ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0016251:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016254:	83 c4 10             	add    esp,0x10
c0016257:	31 d2                	xor    edx,edx
c0016259:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001625f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016266:	83 c4 08             	add    esp,0x8
c0016269:	31 c0                	xor    eax,eax
c001626b:	5b                   	pop    ebx
c001626c:	c3                   	ret    
c001626d:	83 c4 08             	add    esp,0x8
c0016270:	83 c8 ff             	or     eax,0xffffffff
c0016273:	83 ca ff             	or     edx,0xffffffff
c0016276:	5b                   	pop    ebx
c0016277:	c3                   	ret    

c0016278 <sysCallSizeFromFilename(regs*)>:
c0016278:	57                   	push   edi
c0016279:	56                   	push   esi
c001627a:	53                   	push   ebx
c001627b:	83 ec 10             	sub    esp,0x10
c001627e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016282:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0016285:	83 fb 02             	cmp    ebx,0x2
c0016288:	0f 86 8b 00 00 00    	jbe    c0016319 <sysCallSizeFromFilename(regs*)+0xa1>
c001628e:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0016294:	77 58                	ja     c00162ee <sysCallSizeFromFilename(regs*)+0x76>
c0016296:	83 ec 0c             	sub    esp,0xc
c0016299:	68 14 01 00 00       	push   0x114
c001629e:	e8 81 8d ff ff       	call   c000f024 <operator new(unsigned long)>
c00162a3:	89 c7                	mov    edi,eax
c00162a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162aa:	83 c4 0c             	add    esp,0xc
c00162ad:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00162b0:	50                   	push   eax
c00162b1:	53                   	push   ebx
c00162b2:	57                   	push   edi
c00162b3:	e8 d8 93 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c00162b8:	83 c4 0c             	add    esp,0xc
c00162bb:	8d 44 24 13          	lea    eax,[esp+0x13]
c00162bf:	50                   	push   eax
c00162c0:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c00162c3:	52                   	push   edx
c00162c4:	57                   	push   edi
c00162c5:	e8 d6 96 ff ff       	call   c000f9a0 <File::stat(unsigned long long*, bool*)>
c00162ca:	89 c3                	mov    ebx,eax
c00162cc:	8b 07                	mov    eax,DWORD PTR [edi]
c00162ce:	89 3c 24             	mov    DWORD PTR [esp],edi
c00162d1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00162d4:	31 c0                	xor    eax,eax
c00162d6:	83 c4 10             	add    esp,0x10
c00162d9:	85 db                	test   ebx,ebx
c00162db:	0f 95 c0             	setne  al
c00162de:	31 d2                	xor    edx,edx
c00162e0:	f7 d8                	neg    eax
c00162e2:	83 d2 00             	adc    edx,0x0
c00162e5:	83 c4 10             	add    esp,0x10
c00162e8:	f7 da                	neg    edx
c00162ea:	5b                   	pop    ebx
c00162eb:	5e                   	pop    esi
c00162ec:	5f                   	pop    edi
c00162ed:	c3                   	ret    
c00162ee:	51                   	push   ecx
c00162ef:	51                   	push   ecx
c00162f0:	53                   	push   ebx
c00162f1:	68 38 25 02 c0       	push   0xc0022538
c00162f6:	e8 5e 8e ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00162fb:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c00162fe:	83 c4 10             	add    esp,0x10
c0016301:	31 d2                	xor    edx,edx
c0016303:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0016309:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016310:	83 c4 10             	add    esp,0x10
c0016313:	31 c0                	xor    eax,eax
c0016315:	5b                   	pop    ebx
c0016316:	5e                   	pop    esi
c0016317:	5f                   	pop    edi
c0016318:	c3                   	ret    
c0016319:	83 c4 10             	add    esp,0x10
c001631c:	83 c8 ff             	or     eax,0xffffffff
c001631f:	83 ca ff             	or     edx,0xffffffff
c0016322:	5b                   	pop    ebx
c0016323:	5e                   	pop    esi
c0016324:	5f                   	pop    edi
c0016325:	c3                   	ret    

c0016326 <sysCallSize(regs*)>:
c0016326:	53                   	push   ebx
c0016327:	83 ec 18             	sub    esp,0x18
c001632a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001632e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016331:	83 f8 02             	cmp    eax,0x2
c0016334:	76 66                	jbe    c001639c <sysCallSize(regs*)+0x76>
c0016336:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001633b:	77 36                	ja     c0016373 <sysCallSize(regs*)+0x4d>
c001633d:	83 ec 0c             	sub    esp,0xc
c0016340:	50                   	push   eax
c0016341:	e8 6f 7c ff ff       	call   c000dfb5 <getFromFileDescriptor(int)>
c0016346:	83 c4 0c             	add    esp,0xc
c0016349:	8d 54 24 13          	lea    edx,[esp+0x13]
c001634d:	52                   	push   edx
c001634e:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016351:	52                   	push   edx
c0016352:	50                   	push   eax
c0016353:	e8 48 96 ff ff       	call   c000f9a0 <File::stat(unsigned long long*, bool*)>
c0016358:	83 c4 10             	add    esp,0x10
c001635b:	85 c0                	test   eax,eax
c001635d:	0f 95 c0             	setne  al
c0016360:	25 ff 00 00 00       	and    eax,0xff
c0016365:	31 d2                	xor    edx,edx
c0016367:	f7 d8                	neg    eax
c0016369:	83 d2 00             	adc    edx,0x0
c001636c:	83 c4 18             	add    esp,0x18
c001636f:	f7 da                	neg    edx
c0016371:	5b                   	pop    ebx
c0016372:	c3                   	ret    
c0016373:	51                   	push   ecx
c0016374:	51                   	push   ecx
c0016375:	50                   	push   eax
c0016376:	68 38 25 02 c0       	push   0xc0022538
c001637b:	e8 d9 8d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0016380:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016383:	83 c4 10             	add    esp,0x10
c0016386:	31 d2                	xor    edx,edx
c0016388:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001638e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016395:	83 c4 18             	add    esp,0x18
c0016398:	31 c0                	xor    eax,eax
c001639a:	5b                   	pop    ebx
c001639b:	c3                   	ret    
c001639c:	83 c4 18             	add    esp,0x18
c001639f:	83 c8 ff             	or     eax,0xffffffff
c00163a2:	83 ca ff             	or     edx,0xffffffff
c00163a5:	5b                   	pop    ebx
c00163a6:	c3                   	ret    

c00163a7 <sysCallClose(regs*)>:
c00163a7:	53                   	push   ebx
c00163a8:	83 ec 08             	sub    esp,0x8
c00163ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163af:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00163b2:	83 f8 02             	cmp    eax,0x2
c00163b5:	76 4f                	jbe    c0016406 <sysCallClose(regs*)+0x5f>
c00163b7:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00163bc:	74 53                	je     c0016411 <sysCallClose(regs*)+0x6a>
c00163be:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00163c3:	74 5b                	je     c0016420 <sysCallClose(regs*)+0x79>
c00163c5:	77 2f                	ja     c00163f6 <sysCallClose(regs*)+0x4f>
c00163c7:	83 ec 0c             	sub    esp,0xc
c00163ca:	50                   	push   eax
c00163cb:	e8 e5 7b ff ff       	call   c000dfb5 <getFromFileDescriptor(int)>
c00163d0:	89 c3                	mov    ebx,eax
c00163d2:	89 04 24             	mov    DWORD PTR [esp],eax
c00163d5:	e8 78 93 ff ff       	call   c000f752 <File::close()>
c00163da:	83 c4 10             	add    esp,0x10
c00163dd:	85 db                	test   ebx,ebx
c00163df:	74 0c                	je     c00163ed <sysCallClose(regs*)+0x46>
c00163e1:	83 ec 0c             	sub    esp,0xc
c00163e4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00163e6:	53                   	push   ebx
c00163e7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00163ea:	83 c4 10             	add    esp,0x10
c00163ed:	83 c4 08             	add    esp,0x8
c00163f0:	31 c0                	xor    eax,eax
c00163f2:	31 d2                	xor    edx,edx
c00163f4:	5b                   	pop    ebx
c00163f5:	c3                   	ret    
c00163f6:	52                   	push   edx
c00163f7:	52                   	push   edx
c00163f8:	50                   	push   eax
c00163f9:	68 6c 24 02 c0       	push   0xc002246c
c00163fe:	e8 56 8d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0016403:	83 c4 10             	add    esp,0x10
c0016406:	83 c4 08             	add    esp,0x8
c0016409:	83 c8 ff             	or     eax,0xffffffff
c001640c:	83 ca ff             	or     edx,0xffffffff
c001640f:	5b                   	pop    ebx
c0016410:	c3                   	ret    
c0016411:	83 ec 0c             	sub    esp,0xc
c0016414:	68 53 25 02 c0       	push   0xc0022553
c0016419:	e8 3b 8d ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001641e:	eb ca                	jmp    c00163ea <sysCallClose(regs*)+0x43>
c0016420:	83 ec 0c             	sub    esp,0xc
c0016423:	68 61 25 02 c0       	push   0xc0022561
c0016428:	eb ef                	jmp    c0016419 <sysCallClose(regs*)+0x72>

c001642a <sysCallOpenDir(regs*)>:
c001642a:	56                   	push   esi
c001642b:	53                   	push   ebx
c001642c:	50                   	push   eax
c001642d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016431:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016434:	85 c0                	test   eax,eax
c0016436:	74 53                	je     c001648b <sysCallOpenDir(regs*)+0x61>
c0016438:	83 ec 0c             	sub    esp,0xc
c001643b:	68 14 01 00 00       	push   0x114
c0016440:	e8 df 8b ff ff       	call   c000f024 <operator new(unsigned long)>
c0016445:	89 c6                	mov    esi,eax
c0016447:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001644c:	83 c4 0c             	add    esp,0xc
c001644f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016452:	50                   	push   eax
c0016453:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016456:	50                   	push   eax
c0016457:	56                   	push   esi
c0016458:	e8 f5 96 ff ff       	call   c000fb52 <Directory::Directory(char const*, Process*)>
c001645d:	89 34 24             	mov    DWORD PTR [esp],esi
c0016460:	e8 51 97 ff ff       	call   c000fbb6 <Directory::open()>
c0016465:	83 c4 10             	add    esp,0x10
c0016468:	85 c0                	test   eax,eax
c001646a:	75 1f                	jne    c001648b <sysCallOpenDir(regs*)+0x61>
c001646c:	83 ec 0c             	sub    esp,0xc
c001646f:	56                   	push   esi
c0016470:	e8 8b 78 ff ff       	call   c000dd00 <UnixFile::getFileDescriptor()>
c0016475:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016478:	83 c4 10             	add    esp,0x10
c001647b:	89 02                	mov    DWORD PTR [edx],eax
c001647d:	c1 f8 1f             	sar    eax,0x1f
c0016480:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016483:	31 c0                	xor    eax,eax
c0016485:	59                   	pop    ecx
c0016486:	31 d2                	xor    edx,edx
c0016488:	5b                   	pop    ebx
c0016489:	5e                   	pop    esi
c001648a:	c3                   	ret    
c001648b:	59                   	pop    ecx
c001648c:	83 c8 ff             	or     eax,0xffffffff
c001648f:	5b                   	pop    ebx
c0016490:	83 ca ff             	or     edx,0xffffffff
c0016493:	5e                   	pop    esi
c0016494:	c3                   	ret    

c0016495 <sysCallMakeDir(regs*)>:
c0016495:	56                   	push   esi
c0016496:	53                   	push   ebx
c0016497:	83 ec 10             	sub    esp,0x10
c001649a:	68 14 01 00 00       	push   0x114
c001649f:	e8 80 8b ff ff       	call   c000f024 <operator new(unsigned long)>
c00164a4:	89 c3                	mov    ebx,eax
c00164a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164ab:	83 c4 0c             	add    esp,0xc
c00164ae:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00164b1:	50                   	push   eax
c00164b2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00164b6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00164b9:	52                   	push   edx
c00164ba:	53                   	push   ebx
c00164bb:	e8 92 96 ff ff       	call   c000fb52 <Directory::Directory(char const*, Process*)>
c00164c0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00164c3:	e8 ce 98 ff ff       	call   c000fd96 <Directory::create()>
c00164c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00164cb:	89 c6                	mov    esi,eax
c00164cd:	e8 40 97 ff ff       	call   c000fc12 <Directory::close()>
c00164d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00164d4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00164d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00164da:	31 c0                	xor    eax,eax
c00164dc:	85 f6                	test   esi,esi
c00164de:	0f 95 c0             	setne  al
c00164e1:	31 d2                	xor    edx,edx
c00164e3:	f7 d8                	neg    eax
c00164e5:	83 d2 00             	adc    edx,0x0
c00164e8:	83 c4 14             	add    esp,0x14
c00164eb:	f7 da                	neg    edx
c00164ed:	5b                   	pop    ebx
c00164ee:	5e                   	pop    esi
c00164ef:	c3                   	ret    

c00164f0 <sysCallCloseDir(regs*)>:
c00164f0:	53                   	push   ebx
c00164f1:	83 ec 08             	sub    esp,0x8
c00164f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164f8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00164fb:	83 f8 02             	cmp    eax,0x2
c00164fe:	76 46                	jbe    c0016546 <sysCallCloseDir(regs*)+0x56>
c0016500:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016505:	77 2f                	ja     c0016536 <sysCallCloseDir(regs*)+0x46>
c0016507:	83 ec 0c             	sub    esp,0xc
c001650a:	50                   	push   eax
c001650b:	e8 a5 7a ff ff       	call   c000dfb5 <getFromFileDescriptor(int)>
c0016510:	89 c3                	mov    ebx,eax
c0016512:	89 04 24             	mov    DWORD PTR [esp],eax
c0016515:	e8 f8 96 ff ff       	call   c000fc12 <Directory::close()>
c001651a:	83 c4 10             	add    esp,0x10
c001651d:	85 db                	test   ebx,ebx
c001651f:	74 0c                	je     c001652d <sysCallCloseDir(regs*)+0x3d>
c0016521:	83 ec 0c             	sub    esp,0xc
c0016524:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016526:	53                   	push   ebx
c0016527:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001652a:	83 c4 10             	add    esp,0x10
c001652d:	83 c4 08             	add    esp,0x8
c0016530:	31 c0                	xor    eax,eax
c0016532:	31 d2                	xor    edx,edx
c0016534:	5b                   	pop    ebx
c0016535:	c3                   	ret    
c0016536:	52                   	push   edx
c0016537:	52                   	push   edx
c0016538:	50                   	push   eax
c0016539:	68 94 24 02 c0       	push   0xc0022494
c001653e:	e8 16 8c ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0016543:	83 c4 10             	add    esp,0x10
c0016546:	83 c4 08             	add    esp,0x8
c0016549:	83 c8 ff             	or     eax,0xffffffff
c001654c:	83 ca ff             	or     edx,0xffffffff
c001654f:	5b                   	pop    ebx
c0016550:	c3                   	ret    

c0016551 <sysCallWait(regs*)>:
c0016551:	83 ec 10             	sub    esp,0x10
c0016554:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016558:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001655b:	52                   	push   edx
c001655c:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c001655f:	51                   	push   ecx
c0016560:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016563:	50                   	push   eax
c0016564:	e8 4f 23 00 00       	call   c00188b8 <waitTask(int, int*, int)>
c0016569:	89 c2                	mov    edx,eax
c001656b:	83 c4 1c             	add    esp,0x1c
c001656e:	c1 fa 1f             	sar    edx,0x1f
c0016571:	c3                   	ret    

c0016572 <sysCallRmdir(regs*)>:
c0016572:	56                   	push   esi
c0016573:	53                   	push   ebx
c0016574:	83 ec 10             	sub    esp,0x10
c0016577:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001657b:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001657e:	68 14 01 00 00       	push   0x114
c0016583:	e8 9c 8a ff ff       	call   c000f024 <operator new(unsigned long)>
c0016588:	83 c4 0c             	add    esp,0xc
c001658b:	89 c3                	mov    ebx,eax
c001658d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016592:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016595:	50                   	push   eax
c0016596:	56                   	push   esi
c0016597:	53                   	push   ebx
c0016598:	e8 f3 90 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c001659d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00165a0:	e8 c7 92 ff ff       	call   c000f86c <File::unlink()>
c00165a5:	89 c6                	mov    esi,eax
c00165a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00165a9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00165ac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00165af:	31 c0                	xor    eax,eax
c00165b1:	85 f6                	test   esi,esi
c00165b3:	0f 95 c0             	setne  al
c00165b6:	31 d2                	xor    edx,edx
c00165b8:	f7 d8                	neg    eax
c00165ba:	83 d2 00             	adc    edx,0x0
c00165bd:	83 c4 14             	add    esp,0x14
c00165c0:	f7 da                	neg    edx
c00165c2:	5b                   	pop    ebx
c00165c3:	5e                   	pop    esi
c00165c4:	c3                   	ret    

c00165c5 <sysCallUnlink(regs*)>:
c00165c5:	56                   	push   esi
c00165c6:	53                   	push   ebx
c00165c7:	83 ec 10             	sub    esp,0x10
c00165ca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165ce:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00165d1:	68 14 01 00 00       	push   0x114
c00165d6:	e8 49 8a ff ff       	call   c000f024 <operator new(unsigned long)>
c00165db:	83 c4 0c             	add    esp,0xc
c00165de:	89 c3                	mov    ebx,eax
c00165e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00165e5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00165e8:	50                   	push   eax
c00165e9:	56                   	push   esi
c00165ea:	53                   	push   ebx
c00165eb:	e8 a0 90 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c00165f0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00165f3:	e8 74 92 ff ff       	call   c000f86c <File::unlink()>
c00165f8:	89 c6                	mov    esi,eax
c00165fa:	8b 03                	mov    eax,DWORD PTR [ebx]
c00165fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00165ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016602:	31 c0                	xor    eax,eax
c0016604:	85 f6                	test   esi,esi
c0016606:	0f 95 c0             	setne  al
c0016609:	31 d2                	xor    edx,edx
c001660b:	f7 d8                	neg    eax
c001660d:	83 d2 00             	adc    edx,0x0
c0016610:	83 c4 14             	add    esp,0x14
c0016613:	f7 da                	neg    edx
c0016615:	5b                   	pop    ebx
c0016616:	5e                   	pop    esi
c0016617:	c3                   	ret    

c0016618 <sysCallGetArgv(regs*)>:
c0016618:	83 ec 0c             	sub    esp,0xc
c001661b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001661f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016622:	85 c0                	test   eax,eax
c0016624:	78 2b                	js     c0016651 <sysCallGetArgv(regs*)+0x39>
c0016626:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001662c:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001662f:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0016635:	7d 1a                	jge    c0016651 <sysCallGetArgv(regs*)+0x39>
c0016637:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001663e:	85 c0                	test   eax,eax
c0016640:	74 17                	je     c0016659 <sysCallGetArgv(regs*)+0x41>
c0016642:	51                   	push   ecx
c0016643:	51                   	push   ecx
c0016644:	50                   	push   eax
c0016645:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0016648:	50                   	push   eax
c0016649:	e8 59 a0 fe ff       	call   c00006a7 <strcpy>
c001664e:	83 c4 10             	add    esp,0x10
c0016651:	31 c0                	xor    eax,eax
c0016653:	31 d2                	xor    edx,edx
c0016655:	83 c4 0c             	add    esp,0xc
c0016658:	c3                   	ret    
c0016659:	b8 01 00 00 00       	mov    eax,0x1
c001665e:	31 d2                	xor    edx,edx
c0016660:	83 c4 0c             	add    esp,0xc
c0016663:	c3                   	ret    

c0016664 <sysCallTTYName(regs*)>:
c0016664:	56                   	push   esi
c0016665:	53                   	push   ebx
c0016666:	50                   	push   eax
c0016667:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001666b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001666e:	85 c0                	test   eax,eax
c0016670:	74 4d                	je     c00166bf <sysCallTTYName(regs*)+0x5b>
c0016672:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016675:	83 f8 02             	cmp    eax,0x2
c0016678:	76 07                	jbe    c0016681 <sysCallTTYName(regs*)+0x1d>
c001667a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001667f:	75 54                	jne    c00166d5 <sysCallTTYName(regs*)+0x71>
c0016681:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016686:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016689:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001668f:	85 db                	test   ebx,ebx
c0016691:	74 2c                	je     c00166bf <sysCallTTYName(regs*)+0x5b>
c0016693:	83 ec 0c             	sub    esp,0xc
c0016696:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016698:	53                   	push   ebx
c0016699:	ff 10                	call   DWORD PTR [eax]
c001669b:	83 c4 10             	add    esp,0x10
c001669e:	84 c0                	test   al,al
c00166a0:	74 28                	je     c00166ca <sysCallTTYName(regs*)+0x66>
c00166a2:	50                   	push   eax
c00166a3:	81 c3 1e 10 00 00    	add    ebx,0x101e
c00166a9:	50                   	push   eax
c00166aa:	53                   	push   ebx
c00166ab:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00166ae:	50                   	push   eax
c00166af:	e8 f3 9f fe ff       	call   c00006a7 <strcpy>
c00166b4:	83 c4 10             	add    esp,0x10
c00166b7:	31 c0                	xor    eax,eax
c00166b9:	31 d2                	xor    edx,edx
c00166bb:	59                   	pop    ecx
c00166bc:	5b                   	pop    ebx
c00166bd:	5e                   	pop    esi
c00166be:	c3                   	ret    
c00166bf:	59                   	pop    ecx
c00166c0:	b8 01 00 00 00       	mov    eax,0x1
c00166c5:	5b                   	pop    ebx
c00166c6:	31 d2                	xor    edx,edx
c00166c8:	5e                   	pop    esi
c00166c9:	c3                   	ret    
c00166ca:	59                   	pop    ecx
c00166cb:	b8 02 00 00 00       	mov    eax,0x2
c00166d0:	5b                   	pop    ebx
c00166d1:	31 d2                	xor    edx,edx
c00166d3:	5e                   	pop    esi
c00166d4:	c3                   	ret    
c00166d5:	83 ec 0c             	sub    esp,0xc
c00166d8:	50                   	push   eax
c00166d9:	e8 d7 78 ff ff       	call   c000dfb5 <getFromFileDescriptor(int)>
c00166de:	83 c4 10             	add    esp,0x10
c00166e1:	89 c3                	mov    ebx,eax
c00166e3:	eb aa                	jmp    c001668f <sysCallTTYName(regs*)+0x2b>

c00166e5 <sysCallGetEnv(regs*)>:
c00166e5:	83 ec 0c             	sub    esp,0xc
c00166e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166ec:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00166ef:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00166f2:	85 d2                	test   edx,edx
c00166f4:	75 22                	jne    c0016718 <sysCallGetEnv(regs*)+0x33>
c00166f6:	31 c0                	xor    eax,eax
c00166f8:	31 d2                	xor    edx,edx
c00166fa:	85 c9                	test   ecx,ecx
c00166fc:	74 04                	je     c0016702 <sysCallGetEnv(regs*)+0x1d>
c00166fe:	83 c4 0c             	add    esp,0xc
c0016701:	c3                   	ret    
c0016702:	83 ec 0c             	sub    esp,0xc
c0016705:	68 b8 24 02 c0       	push   0xc00224b8
c001670a:	e8 16 9f fe ff       	call   c0000625 <strlen>
c001670f:	83 c4 10             	add    esp,0x10
c0016712:	31 d2                	xor    edx,edx
c0016714:	83 c4 0c             	add    esp,0xc
c0016717:	c3                   	ret    
c0016718:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001671b:	85 c9                	test   ecx,ecx
c001671d:	74 0b                	je     c001672a <sysCallGetEnv(regs*)+0x45>
c001671f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0016722:	31 c0                	xor    eax,eax
c0016724:	31 d2                	xor    edx,edx
c0016726:	83 c4 0c             	add    esp,0xc
c0016729:	c3                   	ret    
c001672a:	52                   	push   edx
c001672b:	52                   	push   edx
c001672c:	68 b8 24 02 c0       	push   0xc00224b8
c0016731:	50                   	push   eax
c0016732:	e8 70 9f fe ff       	call   c00006a7 <strcpy>
c0016737:	83 c4 10             	add    esp,0x10
c001673a:	eb e6                	jmp    c0016722 <sysCallGetEnv(regs*)+0x3d>

c001673c <sysCallUSleep(regs*)>:
c001673c:	57                   	push   edi
c001673d:	56                   	push   esi
c001673e:	53                   	push   ebx
c001673f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016743:	52                   	push   edx
c0016744:	52                   	push   edx
c0016745:	8b 58 28             	mov    ebx,DWORD PTR [eax+0x28]
c0016748:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001674b:	89 c8                	mov    eax,ecx
c001674d:	89 da                	mov    edx,ebx
c001674f:	0f a4 c2 05          	shld   edx,eax,0x5
c0016753:	c1 e0 05             	shl    eax,0x5
c0016756:	29 c8                	sub    eax,ecx
c0016758:	19 da                	sbb    edx,ebx
c001675a:	0f a4 c2 02          	shld   edx,eax,0x2
c001675e:	c1 e0 02             	shl    eax,0x2
c0016761:	01 c8                	add    eax,ecx
c0016763:	11 da                	adc    edx,ebx
c0016765:	0f a4 c2 03          	shld   edx,eax,0x3
c0016769:	c1 e0 03             	shl    eax,0x3
c001676c:	52                   	push   edx
c001676d:	50                   	push   eax
c001676e:	e8 e0 21 00 00       	call   c0018953 <nanoSleep(unsigned long long)>
c0016773:	83 c4 10             	add    esp,0x10
c0016776:	31 c0                	xor    eax,eax
c0016778:	31 d2                	xor    edx,edx
c001677a:	5b                   	pop    ebx
c001677b:	5e                   	pop    esi
c001677c:	5f                   	pop    edi
c001677d:	c3                   	ret    

c001677e <sysCallSpawn(regs*)>:
c001677e:	56                   	push   esi
c001677f:	53                   	push   ebx
c0016780:	50                   	push   eax
c0016781:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016785:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016788:	85 c0                	test   eax,eax
c001678a:	75 08                	jne    c0016794 <sysCallSpawn(regs*)+0x16>
c001678c:	59                   	pop    ecx
c001678d:	31 c0                	xor    eax,eax
c001678f:	5b                   	pop    ebx
c0016790:	31 d2                	xor    edx,edx
c0016792:	5e                   	pop    esi
c0016793:	c3                   	ret    
c0016794:	83 ec 0c             	sub    esp,0xc
c0016797:	68 3b 07 00 00       	push   0x73b
c001679c:	e8 83 88 ff ff       	call   c000f024 <operator new(unsigned long)>
c00167a1:	89 c6                	mov    esi,eax
c00167a3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00167a6:	50                   	push   eax
c00167a7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167ac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00167af:	50                   	push   eax
c00167b0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00167b3:	50                   	push   eax
c00167b4:	56                   	push   esi
c00167b5:	e8 d6 18 00 00       	call   c0018090 <Process::Process(char const*, Process*, char**)>
c00167ba:	83 c4 20             	add    esp,0x20
c00167bd:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c00167c4:	75 c6                	jne    c001678c <sysCallSpawn(regs*)+0xe>
c00167c6:	83 ec 0c             	sub    esp,0xc
c00167c9:	56                   	push   esi
c00167ca:	e8 3d 1e 00 00       	call   c001860c <Process::createUserThread()>
c00167cf:	83 c4 10             	add    esp,0x10
c00167d2:	8b 06                	mov    eax,DWORD PTR [esi]
c00167d4:	89 c2                	mov    edx,eax
c00167d6:	c1 fa 1f             	sar    edx,0x1f
c00167d9:	59                   	pop    ecx
c00167da:	5b                   	pop    ebx
c00167db:	5e                   	pop    esi
c00167dc:	c3                   	ret    

c00167dd <sysAppSettings(regs*)>:
c00167dd:	53                   	push   ebx
c00167de:	31 d2                	xor    edx,edx
c00167e0:	83 ec 08             	sub    esp,0x8
c00167e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00167e7:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00167ea:	b8 01 00 00 00       	mov    eax,0x1
c00167ef:	8b 8b 00 01 00 00    	mov    ecx,DWORD PTR [ebx+0x100]
c00167f5:	81 e1 e0 1f 00 00    	and    ecx,0x1fe0
c00167fb:	66 81 f9 c0 09       	cmp    cx,0x9c0
c0016800:	75 30                	jne    c0016832 <sysAppSettings(regs*)+0x55>
c0016802:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0016808:	83 e0 1f             	and    eax,0x1f
c001680b:	3c 01                	cmp    al,0x1
c001680d:	74 28                	je     c0016837 <sysAppSettings(regs*)+0x5a>
c001680f:	3c 07                	cmp    al,0x7
c0016811:	0f 84 be 00 00 00    	je     c00168d5 <sysAppSettings(regs*)+0xf8>
c0016817:	84 c0                	test   al,al
c0016819:	0f 84 da 00 00 00    	je     c00168f9 <sysAppSettings(regs*)+0x11c>
c001681f:	3c 08                	cmp    al,0x8
c0016821:	74 6d                	je     c0016890 <sysAppSettings(regs*)+0xb3>
c0016823:	25 ff 00 00 00       	and    eax,0xff
c0016828:	05 e8 03 00 00       	add    eax,0x3e8
c001682d:	89 c2                	mov    edx,eax
c001682f:	c1 fa 1f             	sar    edx,0x1f
c0016832:	83 c4 08             	add    esp,0x8
c0016835:	5b                   	pop    ebx
c0016836:	c3                   	ret    
c0016837:	50                   	push   eax
c0016838:	68 00 01 00 00       	push   0x100
c001683d:	6a 00                	push   0x0
c001683f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016844:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016847:	83 c0 0c             	add    eax,0xc
c001684a:	50                   	push   eax
c001684b:	e8 b8 9d fe ff       	call   c0000608 <memset>
c0016850:	83 c4 0c             	add    esp,0xc
c0016853:	68 ff 00 00 00       	push   0xff
c0016858:	53                   	push   ebx
c0016859:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001685e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016861:	83 c0 0c             	add    eax,0xc
c0016864:	50                   	push   eax
c0016865:	e8 68 9d fe ff       	call   c00005d2 <memcpy>
c001686a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001686f:	5a                   	pop    edx
c0016870:	59                   	pop    ecx
c0016871:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016874:	8d 50 0c             	lea    edx,[eax+0xc]
c0016877:	52                   	push   edx
c0016878:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001687e:	53                   	push   ebx
c001687f:	e8 78 68 ff ff       	call   c000d0fc <VgaText::setTitle(char*)>
c0016884:	83 c4 10             	add    esp,0x10
c0016887:	31 c0                	xor    eax,eax
c0016889:	31 d2                	xor    edx,edx
c001688b:	83 c4 08             	add    esp,0x8
c001688e:	5b                   	pop    ebx
c001688f:	c3                   	ret    
c0016890:	50                   	push   eax
c0016891:	50                   	push   eax
c0016892:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016898:	83 e0 0f             	and    eax,0xf
c001689b:	50                   	push   eax
c001689c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168a1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00168a4:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00168aa:	50                   	push   eax
c00168ab:	e8 3c 68 ff ff       	call   c000d0ec <VgaText::setTitleColour(VgaColour)>
c00168b0:	58                   	pop    eax
c00168b1:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c00168b7:	c1 e8 04             	shr    eax,0x4
c00168ba:	5a                   	pop    edx
c00168bb:	83 e0 0f             	and    eax,0xf
c00168be:	50                   	push   eax
c00168bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168c4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00168c7:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00168cd:	51                   	push   ecx
c00168ce:	e8 09 68 ff ff       	call   c000d0dc <VgaText::setTitleTextColour(VgaColour)>
c00168d3:	eb af                	jmp    c0016884 <sysAppSettings(regs*)+0xa7>
c00168d5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168da:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00168dd:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c00168e3:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c00168e9:	c0 e8 06             	shr    al,0x6
c00168ec:	83 e0 01             	and    eax,0x1
c00168ef:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c00168f5:	31 c0                	xor    eax,eax
c00168f7:	eb 90                	jmp    c0016889 <sysAppSettings(regs*)+0xac>
c00168f9:	b8 02 00 00 00       	mov    eax,0x2
c00168fe:	31 d2                	xor    edx,edx
c0016900:	eb 89                	jmp    c001688b <sysAppSettings(regs*)+0xae>

c0016902 <sysSetFatAttrib(regs*)>:
c0016902:	57                   	push   edi
c0016903:	56                   	push   esi
c0016904:	53                   	push   ebx
c0016905:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016909:	83 ec 0c             	sub    esp,0xc
c001690c:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001690f:	68 14 01 00 00       	push   0x114
c0016914:	e8 0b 87 ff ff       	call   c000f024 <operator new(unsigned long)>
c0016919:	83 c4 0c             	add    esp,0xc
c001691c:	89 c3                	mov    ebx,eax
c001691e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016923:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016926:	50                   	push   eax
c0016927:	57                   	push   edi
c0016928:	53                   	push   ebx
c0016929:	e8 62 8d ff ff       	call   c000f690 <File::File(char const*, Process*)>
c001692e:	83 c4 0c             	add    esp,0xc
c0016931:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016934:	0f b6 d4             	movzx  edx,ah
c0016937:	52                   	push   edx
c0016938:	25 ff 00 00 00       	and    eax,0xff
c001693d:	50                   	push   eax
c001693e:	53                   	push   ebx
c001693f:	e8 c2 8f ff ff       	call   c000f906 <File::chfatattr(unsigned char, unsigned char)>
c0016944:	89 c6                	mov    esi,eax
c0016946:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016948:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001694b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001694e:	83 c4 10             	add    esp,0x10
c0016951:	31 c0                	xor    eax,eax
c0016953:	85 f6                	test   esi,esi
c0016955:	0f 95 c0             	setne  al
c0016958:	5b                   	pop    ebx
c0016959:	31 d2                	xor    edx,edx
c001695b:	f7 d8                	neg    eax
c001695d:	83 d2 00             	adc    edx,0x0
c0016960:	5e                   	pop    esi
c0016961:	f7 da                	neg    edx
c0016963:	5f                   	pop    edi
c0016964:	c3                   	ret    

c0016965 <sysPanic(regs*)>:
c0016965:	83 ec 18             	sub    esp,0x18
c0016968:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001696c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001696f:	50                   	push   eax
c0016970:	e8 77 ea ff ff       	call   c00153ec <Krnl::panic(char const*)>
c0016975:	c7 04 24 6f 25 02 c0 	mov    DWORD PTR [esp],0xc002256f
c001697c:	e8 6b ea ff ff       	call   c00153ec <Krnl::panic(char const*)>
c0016981:	b8 01 00 00 00       	mov    eax,0x1
c0016986:	31 d2                	xor    edx,edx
c0016988:	83 c4 1c             	add    esp,0x1c
c001698b:	c3                   	ret    

c001698c <sysPipe(regs*)>:
c001698c:	57                   	push   edi
c001698d:	56                   	push   esi
c001698e:	53                   	push   ebx
c001698f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016993:	83 ec 0c             	sub    esp,0xc
c0016996:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016999:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001699c:	6a 20                	push   0x20
c001699e:	e8 81 86 ff ff       	call   c000f024 <operator new(unsigned long)>
c00169a3:	89 c3                	mov    ebx,eax
c00169a5:	58                   	pop    eax
c00169a6:	5a                   	pop    edx
c00169a7:	68 00 50 00 00       	push   0x5000
c00169ac:	53                   	push   ebx
c00169ad:	e8 88 60 ff ff       	call   c000ca3a <Pipe::Pipe(int)>
c00169b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169b5:	e8 46 73 ff ff       	call   c000dd00 <UnixFile::getFileDescriptor()>
c00169ba:	89 07                	mov    DWORD PTR [edi],eax
c00169bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169bf:	e8 3c 73 ff ff       	call   c000dd00 <UnixFile::getFileDescriptor()>
c00169c4:	83 c4 10             	add    esp,0x10
c00169c7:	89 06                	mov    DWORD PTR [esi],eax
c00169c9:	31 d2                	xor    edx,edx
c00169cb:	5b                   	pop    ebx
c00169cc:	31 c0                	xor    eax,eax
c00169ce:	5e                   	pop    esi
c00169cf:	5f                   	pop    edi
c00169d0:	c3                   	ret    

c00169d1 <sysGetUnixTime(regs*)>:
c00169d1:	a1 28 41 02 c0       	mov    eax,ds:0xc0024128
c00169d6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00169dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00169e0:	e9 73 96 ff ff       	jmp    c0010058 <Clock::timeInSecondsLocal()>

c00169e5 <string_ends_with(char const*, char const*)>:
c00169e5:	57                   	push   edi
c00169e6:	56                   	push   esi
c00169e7:	53                   	push   ebx
c00169e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00169ec:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00169f0:	83 ec 0c             	sub    esp,0xc
c00169f3:	53                   	push   ebx
c00169f4:	e8 2c 9c fe ff       	call   c0000625 <strlen>
c00169f9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00169fc:	89 c6                	mov    esi,eax
c00169fe:	e8 22 9c fe ff       	call   c0000625 <strlen>
c0016a03:	83 c4 10             	add    esp,0x10
c0016a06:	31 d2                	xor    edx,edx
c0016a08:	39 c6                	cmp    esi,eax
c0016a0a:	7d 06                	jge    c0016a12 <string_ends_with(char const*, char const*)+0x2d>
c0016a0c:	5b                   	pop    ebx
c0016a0d:	89 d0                	mov    eax,edx
c0016a0f:	5e                   	pop    esi
c0016a10:	5f                   	pop    edi
c0016a11:	c3                   	ret    
c0016a12:	52                   	push   edx
c0016a13:	29 c6                	sub    esi,eax
c0016a15:	52                   	push   edx
c0016a16:	01 f3                	add    ebx,esi
c0016a18:	57                   	push   edi
c0016a19:	53                   	push   ebx
c0016a1a:	e8 d9 9c fe ff       	call   c00006f8 <strcmp>
c0016a1f:	83 c4 10             	add    esp,0x10
c0016a22:	31 d2                	xor    edx,edx
c0016a24:	85 c0                	test   eax,eax
c0016a26:	5b                   	pop    ebx
c0016a27:	0f 94 c2             	sete   dl
c0016a2a:	5e                   	pop    esi
c0016a2b:	89 d0                	mov    eax,edx
c0016a2d:	5f                   	pop    edi
c0016a2e:	c3                   	ret    

c0016a2f <sysCallOpen(regs*)>:
c0016a2f:	56                   	push   esi
c0016a30:	53                   	push   ebx
c0016a31:	81 ec 04 01 00 00    	sub    esp,0x104
c0016a37:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0016a3e:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0016a41:	85 c9                	test   ecx,ecx
c0016a43:	0f 84 bb 00 00 00    	je     c0016b04 <sysCallOpen(regs*)+0xd5>
c0016a49:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016a4c:	85 c0                	test   eax,eax
c0016a4e:	0f 84 b0 00 00 00    	je     c0016b04 <sysCallOpen(regs*)+0xd5>
c0016a54:	52                   	push   edx
c0016a55:	68 7e 25 02 c0       	push   0xc002257e
c0016a5a:	50                   	push   eax
c0016a5b:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0016a5f:	56                   	push   esi
c0016a60:	e8 81 8a ff ff       	call   c000f4e6 <standardiseFiles(char*, char const*, char const*)>
c0016a65:	89 34 24             	mov    DWORD PTR [esp],esi
c0016a68:	e8 b8 9b fe ff       	call   c0000625 <strlen>
c0016a6d:	83 c4 10             	add    esp,0x10
c0016a70:	48                   	dec    eax
c0016a71:	74 25                	je     c0016a98 <sysCallOpen(regs*)+0x69>
c0016a73:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0016a76:	80 fa 2e             	cmp    dl,0x2e
c0016a79:	74 19                	je     c0016a94 <sysCallOpen(regs*)+0x65>
c0016a7b:	80 fa 3a             	cmp    dl,0x3a
c0016a7e:	74 14                	je     c0016a94 <sysCallOpen(regs*)+0x65>
c0016a80:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0016a84:	48                   	dec    eax
c0016a85:	74 11                	je     c0016a98 <sysCallOpen(regs*)+0x69>
c0016a87:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0016a8a:	80 fa 3a             	cmp    dl,0x3a
c0016a8d:	74 05                	je     c0016a94 <sysCallOpen(regs*)+0x65>
c0016a8f:	80 fa 2e             	cmp    dl,0x2e
c0016a92:	75 ec                	jne    c0016a80 <sysCallOpen(regs*)+0x51>
c0016a94:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0016a98:	51                   	push   ecx
c0016a99:	51                   	push   ecx
c0016a9a:	68 82 25 02 c0       	push   0xc0022582
c0016a9f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016aa2:	50                   	push   eax
c0016aa3:	e8 3d ff ff ff       	call   c00169e5 <string_ends_with(char const*, char const*)>
c0016aa8:	83 c4 10             	add    esp,0x10
c0016aab:	85 c0                	test   eax,eax
c0016aad:	75 17                	jne    c0016ac6 <sysCallOpen(regs*)+0x97>
c0016aaf:	50                   	push   eax
c0016ab0:	50                   	push   eax
c0016ab1:	68 a3 25 02 c0       	push   0xc00225a3
c0016ab6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016ab9:	50                   	push   eax
c0016aba:	e8 26 ff ff ff       	call   c00169e5 <string_ends_with(char const*, char const*)>
c0016abf:	83 c4 10             	add    esp,0x10
c0016ac2:	85 c0                	test   eax,eax
c0016ac4:	74 4d                	je     c0016b13 <sysCallOpen(regs*)+0xe4>
c0016ac6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016ac9:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0016acf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016ad6:	50                   	push   eax
c0016ad7:	50                   	push   eax
c0016ad8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016adb:	8b 10                	mov    edx,DWORD PTR [eax]
c0016add:	52                   	push   edx
c0016ade:	68 87 25 02 c0       	push   0xc0022587
c0016ae3:	e8 71 86 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0016ae8:	c7 04 24 96 25 02 c0 	mov    DWORD PTR [esp],0xc0022596
c0016aef:	e8 65 86 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0016af4:	83 c4 10             	add    esp,0x10
c0016af7:	81 c4 04 01 00 00    	add    esp,0x104
c0016afd:	31 c0                	xor    eax,eax
c0016aff:	31 d2                	xor    edx,edx
c0016b01:	5b                   	pop    ebx
c0016b02:	5e                   	pop    esi
c0016b03:	c3                   	ret    
c0016b04:	81 c4 04 01 00 00    	add    esp,0x104
c0016b0a:	83 c8 ff             	or     eax,0xffffffff
c0016b0d:	83 ca ff             	or     edx,0xffffffff
c0016b10:	5b                   	pop    ebx
c0016b11:	5e                   	pop    esi
c0016b12:	c3                   	ret    
c0016b13:	50                   	push   eax
c0016b14:	50                   	push   eax
c0016b15:	68 83 25 02 c0       	push   0xc0022583
c0016b1a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016b1d:	50                   	push   eax
c0016b1e:	e8 d5 9b fe ff       	call   c00006f8 <strcmp>
c0016b23:	83 c4 10             	add    esp,0x10
c0016b26:	85 c0                	test   eax,eax
c0016b28:	74 9c                	je     c0016ac6 <sysCallOpen(regs*)+0x97>
c0016b2a:	50                   	push   eax
c0016b2b:	50                   	push   eax
c0016b2c:	68 82 25 02 c0       	push   0xc0022582
c0016b31:	56                   	push   esi
c0016b32:	e8 ae fe ff ff       	call   c00169e5 <string_ends_with(char const*, char const*)>
c0016b37:	83 c4 10             	add    esp,0x10
c0016b3a:	85 c0                	test   eax,eax
c0016b3c:	75 88                	jne    c0016ac6 <sysCallOpen(regs*)+0x97>
c0016b3e:	52                   	push   edx
c0016b3f:	52                   	push   edx
c0016b40:	68 a8 25 02 c0       	push   0xc00225a8
c0016b45:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0016b48:	51                   	push   ecx
c0016b49:	e8 97 fe ff ff       	call   c00169e5 <string_ends_with(char const*, char const*)>
c0016b4e:	83 c4 10             	add    esp,0x10
c0016b51:	85 c0                	test   eax,eax
c0016b53:	0f 85 d5 00 00 00    	jne    c0016c2e <sysCallOpen(regs*)+0x1ff>
c0016b59:	50                   	push   eax
c0016b5a:	50                   	push   eax
c0016b5b:	68 ad 25 02 c0       	push   0xc00225ad
c0016b60:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016b63:	50                   	push   eax
c0016b64:	e8 7c fe ff ff       	call   c00169e5 <string_ends_with(char const*, char const*)>
c0016b69:	83 c4 10             	add    esp,0x10
c0016b6c:	85 c0                	test   eax,eax
c0016b6e:	0f 85 ba 00 00 00    	jne    c0016c2e <sysCallOpen(regs*)+0x1ff>
c0016b74:	50                   	push   eax
c0016b75:	50                   	push   eax
c0016b76:	68 a9 25 02 c0       	push   0xc00225a9
c0016b7b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016b7e:	50                   	push   eax
c0016b7f:	e8 74 9b fe ff       	call   c00006f8 <strcmp>
c0016b84:	83 c4 10             	add    esp,0x10
c0016b87:	85 c0                	test   eax,eax
c0016b89:	0f 84 9f 00 00 00    	je     c0016c2e <sysCallOpen(regs*)+0x1ff>
c0016b8f:	50                   	push   eax
c0016b90:	50                   	push   eax
c0016b91:	68 a8 25 02 c0       	push   0xc00225a8
c0016b96:	56                   	push   esi
c0016b97:	e8 49 fe ff ff       	call   c00169e5 <string_ends_with(char const*, char const*)>
c0016b9c:	83 c4 10             	add    esp,0x10
c0016b9f:	85 c0                	test   eax,eax
c0016ba1:	0f 85 87 00 00 00    	jne    c0016c2e <sysCallOpen(regs*)+0x1ff>
c0016ba7:	83 ec 0c             	sub    esp,0xc
c0016baa:	68 14 01 00 00       	push   0x114
c0016baf:	e8 70 84 ff ff       	call   c000f024 <operator new(unsigned long)>
c0016bb4:	89 c6                	mov    esi,eax
c0016bb6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bbb:	83 c4 0c             	add    esp,0xc
c0016bbe:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0016bc1:	51                   	push   ecx
c0016bc2:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016bc5:	50                   	push   eax
c0016bc6:	56                   	push   esi
c0016bc7:	e8 c4 8a ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0016bcc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0016bcf:	83 c4 10             	add    esp,0x10
c0016bd2:	89 d0                	mov    eax,edx
c0016bd4:	25 ff 00 00 00       	and    eax,0xff
c0016bd9:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0016bdc:	89 d0                	mov    eax,edx
c0016bde:	83 e0 01             	and    eax,0x1
c0016be1:	f6 c2 02             	test   dl,0x2
c0016be4:	74 03                	je     c0016be9 <sysCallOpen(regs*)+0x1ba>
c0016be6:	83 c8 02             	or     eax,0x2
c0016be9:	f6 c2 04             	test   dl,0x4
c0016bec:	74 03                	je     c0016bf1 <sysCallOpen(regs*)+0x1c2>
c0016bee:	83 c8 04             	or     eax,0x4
c0016bf1:	f6 c2 08             	test   dl,0x8
c0016bf4:	74 03                	je     c0016bf9 <sysCallOpen(regs*)+0x1ca>
c0016bf6:	83 c8 0a             	or     eax,0xa
c0016bf9:	83 e2 10             	and    edx,0x10
c0016bfc:	74 03                	je     c0016c01 <sysCallOpen(regs*)+0x1d2>
c0016bfe:	83 c8 12             	or     eax,0x12
c0016c01:	52                   	push   edx
c0016c02:	52                   	push   edx
c0016c03:	50                   	push   eax
c0016c04:	56                   	push   esi
c0016c05:	e8 ea 8a ff ff       	call   c000f6f4 <File::open(FileOpenMode)>
c0016c0a:	83 c4 10             	add    esp,0x10
c0016c0d:	85 c0                	test   eax,eax
c0016c0f:	0f 85 ef fe ff ff    	jne    c0016b04 <sysCallOpen(regs*)+0xd5>
c0016c15:	83 ec 0c             	sub    esp,0xc
c0016c18:	56                   	push   esi
c0016c19:	e8 e2 70 ff ff       	call   c000dd00 <UnixFile::getFileDescriptor()>
c0016c1e:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016c21:	89 02                	mov    DWORD PTR [edx],eax
c0016c23:	c1 f8 1f             	sar    eax,0x1f
c0016c26:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016c29:	e9 c6 fe ff ff       	jmp    c0016af4 <sysCallOpen(regs*)+0xc5>
c0016c2e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016c31:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0016c37:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016c3e:	e9 b4 fe ff ff       	jmp    c0016af7 <sysCallOpen(regs*)+0xc8>

c0016c43 <setupSystemCalls()>:
c0016c43:	c7 05 80 4b 02 c0 3e 5e 01 c0 	mov    DWORD PTR ds:0xc0024b80,0xc0015e3e
c0016c4d:	c7 05 84 4b 02 c0 51 5c 01 c0 	mov    DWORD PTR ds:0xc0024b84,0xc0015c51
c0016c57:	c7 05 88 4b 02 c0 66 5d 01 c0 	mov    DWORD PTR ds:0xc0024b88,0xc0015d66
c0016c61:	c7 05 8c 4b 02 c0 bb 5d 01 c0 	mov    DWORD PTR ds:0xc0024b8c,0xc0015dbb
c0016c6b:	c7 05 90 4b 02 c0 fe 5c 01 c0 	mov    DWORD PTR ds:0xc0024b90,0xc0015cfe
c0016c75:	c7 05 94 4b 02 c0 58 5e 01 c0 	mov    DWORD PTR ds:0xc0024b94,0xc0015e58
c0016c7f:	c7 05 98 4b 02 c0 17 60 01 c0 	mov    DWORD PTR ds:0xc0024b98,0xc0016017
c0016c89:	c7 05 9c 4b 02 c0 3d 60 01 c0 	mov    DWORD PTR ds:0xc0024b9c,0xc001603d
c0016c93:	c7 05 a4 4b 02 c0 a7 63 01 c0 	mov    DWORD PTR ds:0xc0024ba4,0xc00163a7
c0016c9d:	c7 05 a0 4b 02 c0 2f 6a 01 c0 	mov    DWORD PTR ds:0xc0024ba0,0xc0016a2f
c0016ca7:	c7 05 a8 4b 02 c0 2a 64 01 c0 	mov    DWORD PTR ds:0xc0024ba8,0xc001642a
c0016cb1:	c7 05 ac 4b 02 c0 ac 60 01 c0 	mov    DWORD PTR ds:0xc0024bac,0xc00160ac
c0016cbb:	c7 05 b0 4b 02 c0 68 5e 01 c0 	mov    DWORD PTR ds:0xc0024bb0,0xc0015e68
c0016cc5:	c7 05 b4 4b 02 c0 6d 5e 01 c0 	mov    DWORD PTR ds:0xc0024bb4,0xc0015e6d
c0016ccf:	c7 05 b8 4b 02 c0 95 64 01 c0 	mov    DWORD PTR ds:0xc0024bb8,0xc0016495
c0016cd9:	c7 05 bc 4b 02 c0 f0 64 01 c0 	mov    DWORD PTR ds:0xc0024bbc,0xc00164f0
c0016ce3:	c7 05 c0 4b 02 c0 97 61 01 c0 	mov    DWORD PTR ds:0xc0024bc0,0xc0016197
c0016ced:	c7 05 c4 4b 02 c0 fd 61 01 c0 	mov    DWORD PTR ds:0xc0024bc4,0xc00161fd
c0016cf7:	c7 05 c8 4b 02 c0 26 63 01 c0 	mov    DWORD PTR ds:0xc0024bc8,0xc0016326
c0016d01:	c7 05 cc 4b 02 c0 72 5e 01 c0 	mov    DWORD PTR ds:0xc0024bcc,0xc0015e72
c0016d0b:	c7 05 d0 4b 02 c0 51 65 01 c0 	mov    DWORD PTR ds:0xc0024bd0,0xc0016551
c0016d15:	c7 05 d4 4b 02 c0 7c 5e 01 c0 	mov    DWORD PTR ds:0xc0024bd4,0xc0015e7c
c0016d1f:	c7 05 d8 4b 02 c0 83 5e 01 c0 	mov    DWORD PTR ds:0xc0024bd8,0xc0015e83
c0016d29:	c7 05 dc 4b 02 c0 72 65 01 c0 	mov    DWORD PTR ds:0xc0024bdc,0xc0016572
c0016d33:	c7 05 e0 4b 02 c0 c5 65 01 c0 	mov    DWORD PTR ds:0xc0024be0,0xc00165c5
c0016d3d:	c7 05 e4 4b 02 c0 8a 5e 01 c0 	mov    DWORD PTR ds:0xc0024be4,0xc0015e8a
c0016d47:	c7 05 e8 4b 02 c0 18 66 01 c0 	mov    DWORD PTR ds:0xc0024be8,0xc0016618
c0016d51:	c7 05 ec 4b 02 c0 5f 60 01 c0 	mov    DWORD PTR ds:0xc0024bec,0xc001605f
c0016d5b:	c7 05 f0 4b 02 c0 64 66 01 c0 	mov    DWORD PTR ds:0xc0024bf0,0xc0016664
c0016d65:	c7 05 f4 4b 02 c0 3f 61 01 c0 	mov    DWORD PTR ds:0xc0024bf4,0xc001613f
c0016d6f:	c7 05 f8 4b 02 c0 3c 67 01 c0 	mov    DWORD PTR ds:0xc0024bf8,0xc001673c
c0016d79:	c7 05 fc 4b 02 c0 78 62 01 c0 	mov    DWORD PTR ds:0xc0024bfc,0xc0016278
c0016d83:	c7 05 00 4c 02 c0 7e 67 01 c0 	mov    DWORD PTR ds:0xc0024c00,0xc001677e
c0016d8d:	c7 05 04 4c 02 c0 e5 66 01 c0 	mov    DWORD PTR ds:0xc0024c04,0xc00166e5
c0016d97:	c7 05 08 4c 02 c0 dd 67 01 c0 	mov    DWORD PTR ds:0xc0024c08,0xc00167dd
c0016da1:	c7 05 0c 4c 02 c0 9e 5e 01 c0 	mov    DWORD PTR ds:0xc0024c0c,0xc0015e9e
c0016dab:	c7 05 10 4c 02 c0 01 5f 01 c0 	mov    DWORD PTR ds:0xc0024c10,0xc0015f01
c0016db5:	c7 05 14 4c 02 c0 49 5f 01 c0 	mov    DWORD PTR ds:0xc0024c14,0xc0015f49
c0016dbf:	c7 05 18 4c 02 c0 02 69 01 c0 	mov    DWORD PTR ds:0xc0024c18,0xc0016902
c0016dc9:	c7 05 1c 4c 02 c0 65 69 01 c0 	mov    DWORD PTR ds:0xc0024c1c,0xc0016965
c0016dd3:	c7 05 20 4c 02 c0 9c 5f 01 c0 	mov    DWORD PTR ds:0xc0024c20,0xc0015f9c
c0016ddd:	c7 05 24 4c 02 c0 8c 69 01 c0 	mov    DWORD PTR ds:0xc0024c24,0xc001698c
c0016de7:	c7 05 28 4c 02 c0 d1 69 01 c0 	mov    DWORD PTR ds:0xc0024c28,0xc00169d1
c0016df1:	c7 05 2c 4c 02 c0 69 5c 01 c0 	mov    DWORD PTR ds:0xc0024c2c,0xc0015c69
c0016dfb:	c3                   	ret    

c0016dfc <systemCall(regs*, void*)>:
c0016dfc:	53                   	push   ebx
c0016dfd:	83 ec 08             	sub    esp,0x8
c0016e00:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016e04:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016e07:	83 f8 7f             	cmp    eax,0x7f
c0016e0a:	77 16                	ja     c0016e22 <systemCall(regs*, void*)+0x26>
c0016e0c:	8b 14 85 80 4b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb480]
c0016e13:	85 d2                	test   edx,edx
c0016e15:	74 0b                	je     c0016e22 <systemCall(regs*, void*)+0x26>
c0016e17:	83 ec 0c             	sub    esp,0xc
c0016e1a:	53                   	push   ebx
c0016e1b:	ff d2                	call   edx
c0016e1d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016e20:	eb 0d                	jmp    c0016e2f <systemCall(regs*, void*)+0x33>
c0016e22:	52                   	push   edx
c0016e23:	52                   	push   edx
c0016e24:	50                   	push   eax
c0016e25:	68 b2 25 02 c0       	push   0xc00225b2
c0016e2a:	e8 2a 83 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0016e2f:	83 c4 10             	add    esp,0x10
c0016e32:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0016e37:	83 c4 08             	add    esp,0x8
c0016e3a:	31 d2                	xor    edx,edx
c0016e3c:	5b                   	pop    ebx
c0016e3d:	c3                   	ret    

c0016e3e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0016e3e:	55                   	push   ebp
c0016e3f:	89 e5                	mov    ebp,esp
c0016e41:	57                   	push   edi
c0016e42:	56                   	push   esi
c0016e43:	53                   	push   ebx
c0016e44:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0016e4a:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0016e4d:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0016e50:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c0016e57:	74 27                	je     c0016e80 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c0016e59:	85 c0                	test   eax,eax
c0016e5b:	74 23                	je     c0016e80 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c0016e5d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0016e61:	75 1d                	jne    c0016e80 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c0016e63:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
c0016e66:	8d 96 00 10 00 00    	lea    edx,[esi+0x1000]
c0016e6c:	89 d1                	mov    ecx,edx
c0016e6e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0016e74:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0016e7a:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0016e7d:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
c0016e80:	83 ec 0c             	sub    esp,0xc
c0016e83:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0016e86:	05 ff 0f 00 00       	add    eax,0xfff
c0016e8b:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c0016e91:	6a 01                	push   0x1
c0016e93:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c0016e99:	e8 a0 72 ff ff       	call   c000e13e <Virt::allocateKernelVirtualPages(int)>
c0016e9e:	83 c4 10             	add    esp,0x10
c0016ea1:	89 c6                	mov    esi,eax
c0016ea3:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c0016ea9:	0f 86 21 01 00 00    	jbe    c0016fd0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c0016eaf:	c1 eb 0c             	shr    ebx,0xc
c0016eb2:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c0016ebc:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c0016ec2:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0016ec5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016ec8:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c0016ece:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c0016ed1:	29 d8                	sub    eax,ebx
c0016ed3:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c0016ed9:	0f 83 f4 00 00 00    	jae    c0016fd3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x195>
c0016edf:	83 ec 0c             	sub    esp,0xc
c0016ee2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0016ee5:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c0016eeb:	3d 00 10 00 00       	cmp    eax,0x1000
c0016ef0:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0016ef2:	52                   	push   edx
c0016ef3:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c0016ef9:	52                   	push   edx
c0016efa:	76 05                	jbe    c0016f01 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0016efc:	b8 00 10 00 00       	mov    eax,0x1000
c0016f01:	31 d2                	xor    edx,edx
c0016f03:	52                   	push   edx
c0016f04:	50                   	push   eax
c0016f05:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0016f08:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016f0b:	83 c4 20             	add    esp,0x20
c0016f0e:	85 c0                	test   eax,eax
c0016f10:	74 1f                	je     c0016f31 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf3>
c0016f12:	51                   	push   ecx
c0016f13:	51                   	push   ecx
c0016f14:	50                   	push   eax
c0016f15:	68 c6 25 02 c0       	push   0xc00225c6
c0016f1a:	e8 3a 82 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0016f1f:	89 34 24             	mov    DWORD PTR [esp],esi
c0016f22:	e8 64 75 ff ff       	call   c000e48b <Virt::freeKernelVirtualPages(unsigned long)>
c0016f27:	83 c4 10             	add    esp,0x10
c0016f2a:	31 c0                	xor    eax,eax
c0016f2c:	e9 7c 01 00 00       	jmp    c00170ad <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26f>
c0016f31:	e8 bf 14 00 00       	call   c00183f5 <lockScheduler()>
c0016f36:	e8 c2 55 ff ff       	call   c000c4fd <Phys::allocatePage()>
c0016f3b:	6a 07                	push   0x7
c0016f3d:	56                   	push   esi
c0016f3e:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c0016f44:	50                   	push   eax
c0016f45:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016f4b:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016f4e:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c0016f54:	e8 b1 78 ff ff       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c0016f59:	83 c4 0c             	add    esp,0xc
c0016f5c:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016f62:	6a 00                	push   0x0
c0016f64:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016f6a:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016f6d:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c0016f73:	e8 f0 76 ff ff       	call   c000e668 <VAS::mapOtherVASIn(bool, VAS*)>
c0016f78:	58                   	pop    eax
c0016f79:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c0016f7f:	5a                   	pop    edx
c0016f80:	68 07 04 00 00       	push   0x407
c0016f85:	53                   	push   ebx
c0016f86:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016f8c:	50                   	push   eax
c0016f8d:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016f93:	6a 00                	push   0x0
c0016f95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f9a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f9d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016fa3:	e8 1e 7c ff ff       	call   c000ebc6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016fa8:	83 c4 1c             	add    esp,0x1c
c0016fab:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c0016fb1:	68 00 10 00 00       	push   0x1000
c0016fb6:	50                   	push   eax
c0016fb7:	56                   	push   esi
c0016fb8:	e8 15 96 fe ff       	call   c00005d2 <memcpy>
c0016fbd:	e8 35 14 00 00       	call   c00183f7 <unlockScheduler()>
c0016fc2:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c0016fc8:	83 c4 10             	add    esp,0x10
c0016fcb:	e9 f5 fe ff ff       	jmp    c0016ec5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x87>
c0016fd0:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0016fd3:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c0016fdd:	0f 86 bc 00 00 00    	jbe    c001709f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x261>
c0016fe3:	e8 0d 14 00 00       	call   c00183f5 <lockScheduler()>
c0016fe8:	51                   	push   ecx
c0016fe9:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016fef:	6a 00                	push   0x0
c0016ff1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ff6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ff9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016fff:	e8 64 76 ff ff       	call   c000e668 <VAS::mapOtherVASIn(bool, VAS*)>
c0017004:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001700a:	c1 e8 0c             	shr    eax,0xc
c001700d:	83 c4 10             	add    esp,0x10
c0017010:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c0017016:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c0017020:	e8 d8 54 ff ff       	call   c000c4fd <Phys::allocatePage()>
c0017025:	6a 07                	push   0x7
c0017027:	56                   	push   esi
c0017028:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c001702e:	50                   	push   eax
c001702f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017035:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0017038:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c001703e:	e8 c7 77 ff ff       	call   c000e80a <VAS::mapPage(unsigned long, unsigned long, int)>
c0017043:	58                   	pop    eax
c0017044:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001704a:	5a                   	pop    edx
c001704b:	68 07 04 00 00       	push   0x407
c0017050:	53                   	push   ebx
c0017051:	81 c3 00 10 00 00    	add    ebx,0x1000
c0017057:	50                   	push   eax
c0017058:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001705e:	6a 00                	push   0x0
c0017060:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017065:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017068:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001706e:	e8 53 7b ff ff       	call   c000ebc6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0017073:	83 c4 1c             	add    esp,0x1c
c0017076:	68 00 10 00 00       	push   0x1000
c001707b:	6a 00                	push   0x0
c001707d:	56                   	push   esi
c001707e:	e8 85 95 fe ff       	call   c0000608 <memset>
c0017083:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c0017089:	83 c4 10             	add    esp,0x10
c001708c:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c0017092:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c0017098:	77 86                	ja     c0017020 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e2>
c001709a:	e8 58 13 00 00       	call   c00183f7 <unlockScheduler()>
c001709f:	83 ec 0c             	sub    esp,0xc
c00170a2:	56                   	push   esi
c00170a3:	e8 e3 73 ff ff       	call   c000e48b <Virt::freeKernelVirtualPages(unsigned long)>
c00170a8:	83 c4 10             	add    esp,0x10
c00170ab:	b0 01                	mov    al,0x1
c00170ad:	8d 65 f4             	lea    esp,[ebp-0xc]
c00170b0:	5b                   	pop    ebx
c00170b1:	5e                   	pop    esi
c00170b2:	5f                   	pop    edi
c00170b3:	5d                   	pop    ebp
c00170b4:	c3                   	ret    

c00170b5 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00170b5:	55                   	push   ebp
c00170b6:	57                   	push   edi
c00170b7:	56                   	push   esi
c00170b8:	53                   	push   ebx
c00170b9:	83 ec 48             	sub    esp,0x48
c00170bc:	68 14 01 00 00       	push   0x114
c00170c1:	e8 5e 7f ff ff       	call   c000f024 <operator new(unsigned long)>
c00170c6:	83 c4 0c             	add    esp,0xc
c00170c9:	89 c6                	mov    esi,eax
c00170cb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00170cf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00170d3:	50                   	push   eax
c00170d4:	e8 b7 85 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c00170d9:	58                   	pop    eax
c00170da:	5a                   	pop    edx
c00170db:	6a 01                	push   0x1
c00170dd:	56                   	push   esi
c00170de:	e8 11 86 ff ff       	call   c000f6f4 <File::open(FileOpenMode)>
c00170e3:	83 c4 10             	add    esp,0x10
c00170e6:	85 c0                	test   eax,eax
c00170e8:	0f 85 47 01 00 00    	jne    c0017235 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00170ee:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00170f6:	83 ec 0c             	sub    esp,0xc
c00170f9:	6a 34                	push   0x34
c00170fb:	e8 27 4e ff ff       	call   c000bf27 <malloc>
c0017100:	89 c3                	mov    ebx,eax
c0017102:	58                   	pop    eax
c0017103:	8b 06                	mov    eax,DWORD PTR [esi]
c0017105:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0017109:	57                   	push   edi
c001710a:	53                   	push   ebx
c001710b:	6a 00                	push   0x0
c001710d:	6a 34                	push   0x34
c001710f:	56                   	push   esi
c0017110:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017113:	83 c4 20             	add    esp,0x20
c0017116:	85 c0                	test   eax,eax
c0017118:	0f 85 17 01 00 00    	jne    c0017235 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001711e:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0017124:	0f 85 0b 01 00 00    	jne    c0017235 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001712a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001712d:	85 c0                	test   eax,eax
c001712f:	0f 84 00 01 00 00    	je     c0017235 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017135:	31 d2                	xor    edx,edx
c0017137:	55                   	push   ebp
c0017138:	52                   	push   edx
c0017139:	50                   	push   eax
c001713a:	56                   	push   esi
c001713b:	e8 72 86 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017140:	83 c4 10             	add    esp,0x10
c0017143:	85 c0                	test   eax,eax
c0017145:	0f 85 ea 00 00 00    	jne    c0017235 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001714b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001714e:	83 ec 0c             	sub    esp,0xc
c0017151:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017155:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0017159:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001715d:	0f af c2             	imul   eax,edx
c0017160:	50                   	push   eax
c0017161:	e8 c1 4d ff ff       	call   c000bf27 <malloc>
c0017166:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001716a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001716d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017171:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0017175:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0017179:	0f af c2             	imul   eax,edx
c001717c:	99                   	cdq    
c001717d:	52                   	push   edx
c001717e:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017180:	50                   	push   eax
c0017181:	56                   	push   esi
c0017182:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017185:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0017188:	83 c4 20             	add    esp,0x20
c001718b:	85 c0                	test   eax,eax
c001718d:	0f 84 a2 00 00 00    	je     c0017235 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017193:	31 d2                	xor    edx,edx
c0017195:	51                   	push   ecx
c0017196:	52                   	push   edx
c0017197:	50                   	push   eax
c0017198:	56                   	push   esi
c0017199:	e8 14 86 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c001719e:	83 c4 10             	add    esp,0x10
c00171a1:	85 c0                	test   eax,eax
c00171a3:	0f 85 8c 00 00 00    	jne    c0017235 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00171a9:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00171ad:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00171b1:	0f af c2             	imul   eax,edx
c00171b4:	83 ec 0c             	sub    esp,0xc
c00171b7:	31 ed                	xor    ebp,ebp
c00171b9:	50                   	push   eax
c00171ba:	e8 68 4d ff ff       	call   c000bf27 <malloc>
c00171bf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00171c3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00171c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171ca:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00171ce:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00171d2:	0f af c2             	imul   eax,edx
c00171d5:	99                   	cdq    
c00171d6:	52                   	push   edx
c00171d7:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00171d9:	50                   	push   eax
c00171da:	56                   	push   esi
c00171db:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00171de:	83 c4 20             	add    esp,0x20
c00171e1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00171e9:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00171ed:	0f 86 80 00 00 00    	jbe    c0017273 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00171f3:	0f b7 fd             	movzx  edi,bp
c00171f6:	c1 e7 05             	shl    edi,0x5
c00171f9:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00171fd:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0017200:	75 6b                	jne    c001726d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017202:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0017205:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017209:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001720c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017210:	52                   	push   edx
c0017211:	31 d2                	xor    edx,edx
c0017213:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0017216:	52                   	push   edx
c0017217:	50                   	push   eax
c0017218:	56                   	push   esi
c0017219:	e8 94 85 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c001721e:	83 c4 10             	add    esp,0x10
c0017221:	85 c0                	test   eax,eax
c0017223:	74 17                	je     c001723c <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0017225:	83 ec 0c             	sub    esp,0xc
c0017228:	68 f1 25 02 c0       	push   0xc00225f1
c001722d:	e8 27 7f ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0017232:	83 c4 10             	add    esp,0x10
c0017235:	31 c0                	xor    eax,eax
c0017237:	e9 87 00 00 00       	jmp    c00172c3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001723c:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001723f:	83 ec 0c             	sub    esp,0xc
c0017242:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0017245:	50                   	push   eax
c0017246:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001724a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001724e:	56                   	push   esi
c001724f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0017253:	e8 e6 fb ff ff       	call   c0016e3e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0017258:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001725c:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0017260:	83 c4 20             	add    esp,0x20
c0017263:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0017267:	73 04                	jae    c001726d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017269:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001726d:	45                   	inc    ebp
c001726e:	e9 76 ff ff ff       	jmp    c00171e9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0017273:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0017277:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001727b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001727f:	83 ec 0c             	sub    esp,0xc
c0017282:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c0017288:	25 00 f0 ff ff       	and    eax,0xfffff000
c001728d:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c0017293:	05 00 10 00 00       	add    eax,0x1000
c0017298:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001729b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001729f:	e8 93 4c ff ff       	call   c000bf37 <free>
c00172a4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00172a7:	e8 8b 4c ff ff       	call   c000bf37 <free>
c00172ac:	58                   	pop    eax
c00172ad:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00172b1:	e8 81 4c ff ff       	call   c000bf37 <free>
c00172b6:	89 34 24             	mov    DWORD PTR [esp],esi
c00172b9:	e8 94 84 ff ff       	call   c000f752 <File::close()>
c00172be:	83 c4 10             	add    esp,0x10
c00172c1:	b0 01                	mov    al,0x1
c00172c3:	83 c4 3c             	add    esp,0x3c
c00172c6:	5b                   	pop    ebx
c00172c7:	5e                   	pop    esi
c00172c8:	5f                   	pop    edi
c00172c9:	5d                   	pop    ebp
c00172ca:	c3                   	ret    

c00172cb <Thr::runtimeReferenceHelper()>:
c00172cb:	83 ec 18             	sub    esp,0x18
c00172ce:	68 f9 25 02 c0       	push   0xc00225f9
c00172d3:	e8 81 7e ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00172d8:	fa                   	cli    
c00172d9:	83 c4 10             	add    esp,0x10
c00172dc:	eb fe                	jmp    c00172dc <Thr::runtimeReferenceHelper()+0x11>

c00172de <Thr::getAddressOfKernelSymbol(char const*)>:
c00172de:	57                   	push   edi
c00172df:	56                   	push   esi
c00172e0:	53                   	push   ebx
c00172e1:	31 db                	xor    ebx,ebx
c00172e3:	39 1d 20 55 02 c0    	cmp    DWORD PTR ds:0xc0025520,ebx
c00172e9:	7e 3c                	jle    c0017327 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00172eb:	8b 34 9d a0 54 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdab60]
c00172f2:	31 ff                	xor    edi,edi
c00172f4:	39 3c 9d a0 53 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdac60],edi
c00172fb:	7e 27                	jle    c0017324 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00172fd:	50                   	push   eax
c00172fe:	50                   	push   eax
c00172ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017303:	8b 06                	mov    eax,DWORD PTR [esi]
c0017305:	03 04 9d 20 54 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdabe0]
c001730c:	50                   	push   eax
c001730d:	e8 e6 93 fe ff       	call   c00006f8 <strcmp>
c0017312:	83 c4 10             	add    esp,0x10
c0017315:	85 c0                	test   eax,eax
c0017317:	75 05                	jne    c001731e <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0017319:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001731c:	eb 0b                	jmp    c0017329 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001731e:	83 c6 10             	add    esi,0x10
c0017321:	47                   	inc    edi
c0017322:	eb d0                	jmp    c00172f4 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0017324:	43                   	inc    ebx
c0017325:	eb bc                	jmp    c00172e3 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0017327:	31 c0                	xor    eax,eax
c0017329:	5b                   	pop    ebx
c001732a:	5e                   	pop    esi
c001732b:	5f                   	pop    edi
c001732c:	c3                   	ret    

c001732d <Thr::loadKernelSymbolTable(char const*)>:
c001732d:	55                   	push   ebp
c001732e:	57                   	push   edi
c001732f:	56                   	push   esi
c0017330:	53                   	push   ebx
c0017331:	83 ec 68             	sub    esp,0x68
c0017334:	8b 35 74 55 02 c0    	mov    esi,DWORD PTR ds:0xc0025574
c001733a:	68 14 01 00 00       	push   0x114
c001733f:	e8 e0 7c ff ff       	call   c000f024 <operator new(unsigned long)>
c0017344:	83 c4 0c             	add    esp,0xc
c0017347:	89 c3                	mov    ebx,eax
c0017349:	56                   	push   esi
c001734a:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001734e:	50                   	push   eax
c001734f:	e8 3c 83 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0017354:	5e                   	pop    esi
c0017355:	5f                   	pop    edi
c0017356:	6a 01                	push   0x1
c0017358:	53                   	push   ebx
c0017359:	e8 96 83 ff ff       	call   c000f6f4 <File::open(FileOpenMode)>
c001735e:	83 c4 10             	add    esp,0x10
c0017361:	31 d2                	xor    edx,edx
c0017363:	85 c0                	test   eax,eax
c0017365:	0f 85 79 02 00 00    	jne    c00175e4 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c001736b:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017373:	83 ec 0c             	sub    esp,0xc
c0017376:	6a 34                	push   0x34
c0017378:	e8 aa 4b ff ff       	call   c000bf27 <malloc>
c001737d:	59                   	pop    ecx
c001737e:	89 c7                	mov    edi,eax
c0017380:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017382:	8d 74 24 34          	lea    esi,[esp+0x34]
c0017386:	56                   	push   esi
c0017387:	57                   	push   edi
c0017388:	6a 00                	push   0x0
c001738a:	6a 34                	push   0x34
c001738c:	53                   	push   ebx
c001738d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017390:	83 c4 20             	add    esp,0x20
c0017393:	85 c0                	test   eax,eax
c0017395:	74 17                	je     c00173ae <Thr::loadKernelSymbolTable(char const*)+0x81>
c0017397:	83 ec 0c             	sub    esp,0xc
c001739a:	68 1b 26 02 c0       	push   0xc002261b
c001739f:	e8 48 e0 ff ff       	call   c00153ec <Krnl::panic(char const*)>
c00173a4:	83 c4 10             	add    esp,0x10
c00173a7:	31 d2                	xor    edx,edx
c00173a9:	e9 36 02 00 00       	jmp    c00175e4 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00173ae:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00173b4:	75 e1                	jne    c0017397 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00173b6:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00173b9:	85 c0                	test   eax,eax
c00173bb:	74 da                	je     c0017397 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00173bd:	52                   	push   edx
c00173be:	31 d2                	xor    edx,edx
c00173c0:	52                   	push   edx
c00173c1:	50                   	push   eax
c00173c2:	53                   	push   ebx
c00173c3:	e8 ea 83 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c00173c8:	83 c4 10             	add    esp,0x10
c00173cb:	85 c0                	test   eax,eax
c00173cd:	75 c8                	jne    c0017397 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c00173cf:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00173d3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00173d7:	0f af c2             	imul   eax,edx
c00173da:	83 ec 0c             	sub    esp,0xc
c00173dd:	31 ed                	xor    ebp,ebp
c00173df:	50                   	push   eax
c00173e0:	e8 42 4b ff ff       	call   c000bf27 <malloc>
c00173e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00173e9:	89 34 24             	mov    DWORD PTR [esp],esi
c00173ec:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00173f0:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00173f4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00173f8:	0f af c2             	imul   eax,edx
c00173fb:	99                   	cdq    
c00173fc:	52                   	push   edx
c00173fd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00173ff:	50                   	push   eax
c0017400:	53                   	push   ebx
c0017401:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017404:	83 c4 20             	add    esp,0x20
c0017407:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001740f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017417:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001741f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017427:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001742b:	0f 86 aa 00 00 00    	jbe    c00174db <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c0017431:	0f b7 f5             	movzx  esi,bp
c0017434:	6b f6 28             	imul   esi,esi,0x28
c0017437:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c001743b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001743e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017442:	50                   	push   eax
c0017443:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0017447:	6b c0 28             	imul   eax,eax,0x28
c001744a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001744e:	8b 16                	mov    edx,DWORD PTR [esi]
c0017450:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0017454:	89 d0                	mov    eax,edx
c0017456:	31 d2                	xor    edx,edx
c0017458:	52                   	push   edx
c0017459:	50                   	push   eax
c001745a:	53                   	push   ebx
c001745b:	e8 52 83 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017460:	83 c4 0c             	add    esp,0xc
c0017463:	6a 20                	push   0x20
c0017465:	6a 00                	push   0x0
c0017467:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001746b:	52                   	push   edx
c001746c:	e8 97 91 fe ff       	call   c0000608 <memset>
c0017471:	58                   	pop    eax
c0017472:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017474:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0017478:	51                   	push   ecx
c0017479:	8d 54 24 40          	lea    edx,[esp+0x40]
c001747d:	52                   	push   edx
c001747e:	6a 00                	push   0x0
c0017480:	6a 1f                	push   0x1f
c0017482:	53                   	push   ebx
c0017483:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017486:	83 c4 18             	add    esp,0x18
c0017489:	68 32 26 02 c0       	push   0xc0022632
c001748e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017492:	52                   	push   edx
c0017493:	e8 60 92 fe ff       	call   c00006f8 <strcmp>
c0017498:	83 c4 10             	add    esp,0x10
c001749b:	85 c0                	test   eax,eax
c001749d:	75 0f                	jne    c00174ae <Thr::loadKernelSymbolTable(char const*)+0x181>
c001749f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00174a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00174a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00174aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00174ae:	50                   	push   eax
c00174af:	50                   	push   eax
c00174b0:	68 3a 26 02 c0       	push   0xc002263a
c00174b5:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00174b9:	50                   	push   eax
c00174ba:	e8 39 92 fe ff       	call   c00006f8 <strcmp>
c00174bf:	83 c4 10             	add    esp,0x10
c00174c2:	85 c0                	test   eax,eax
c00174c4:	75 0f                	jne    c00174d5 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c00174c6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00174c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00174cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00174d1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00174d5:	45                   	inc    ebp
c00174d6:	e9 4c ff ff ff       	jmp    c0017427 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c00174db:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00174e0:	75 10                	jne    c00174f2 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c00174e2:	83 ec 0c             	sub    esp,0xc
c00174e5:	68 42 26 02 c0       	push   0xc0022642
c00174ea:	e8 fd de ff ff       	call   c00153ec <Krnl::panic(char const*)>
c00174ef:	83 c4 10             	add    esp,0x10
c00174f2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00174f7:	75 10                	jne    c0017509 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c00174f9:	83 ec 0c             	sub    esp,0xc
c00174fc:	68 42 26 02 c0       	push   0xc0022642
c0017501:	e8 e6 de ff ff       	call   c00153ec <Krnl::panic(char const*)>
c0017506:	83 c4 10             	add    esp,0x10
c0017509:	31 d2                	xor    edx,edx
c001750b:	50                   	push   eax
c001750c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017510:	52                   	push   edx
c0017511:	50                   	push   eax
c0017512:	53                   	push   ebx
c0017513:	e8 9a 82 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017518:	5a                   	pop    edx
c0017519:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001751d:	e8 05 4a ff ff       	call   c000bf27 <malloc>
c0017522:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001752a:	89 c1                	mov    ecx,eax
c001752c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017534:	5e                   	pop    esi
c0017535:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017537:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001753b:	55                   	push   ebp
c001753c:	51                   	push   ecx
c001753d:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0017541:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017545:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017549:	53                   	push   ebx
c001754a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001754d:	83 c4 14             	add    esp,0x14
c0017550:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017554:	e8 ce 49 ff ff       	call   c000bf27 <malloc>
c0017559:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001755c:	89 c6                	mov    esi,eax
c001755e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017560:	56                   	push   esi
c0017561:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017565:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017569:	53                   	push   ebx
c001756a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001756d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017571:	8b 15 20 55 02 c0    	mov    edx,DWORD PTR ds:0xc0025520
c0017577:	c1 e8 04             	shr    eax,0x4
c001757a:	83 c4 1c             	add    esp,0x1c
c001757d:	89 04 95 a0 53 02 c0 	mov    DWORD PTR [edx*4-0x3ffdac60],eax
c0017584:	31 d2                	xor    edx,edx
c0017586:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001758a:	52                   	push   edx
c001758b:	50                   	push   eax
c001758c:	53                   	push   ebx
c001758d:	e8 20 82 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017592:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017595:	31 d2                	xor    edx,edx
c0017597:	56                   	push   esi
c0017598:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001759c:	52                   	push   edx
c001759d:	50                   	push   eax
c001759e:	8b 03                	mov    eax,DWORD PTR [ebx]
c00175a0:	53                   	push   ebx
c00175a1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00175a4:	83 c4 14             	add    esp,0x14
c00175a7:	53                   	push   ebx
c00175a8:	e8 a5 81 ff ff       	call   c000f752 <File::close()>
c00175ad:	5d                   	pop    ebp
c00175ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175b2:	e8 80 49 ff ff       	call   c000bf37 <free>
c00175b7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00175ba:	e8 78 49 ff ff       	call   c000bf37 <free>
c00175bf:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c00175c4:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00175c8:	8d 50 01             	lea    edx,[eax+0x1]
c00175cb:	89 15 20 55 02 c0    	mov    DWORD PTR ds:0xc0025520,edx
c00175d1:	89 0c 85 a0 54 02 c0 	mov    DWORD PTR [eax*4-0x3ffdab60],ecx
c00175d8:	89 34 85 20 54 02 c0 	mov    DWORD PTR [eax*4-0x3ffdabe0],esi
c00175df:	83 c4 10             	add    esp,0x10
c00175e2:	b2 01                	mov    dl,0x1
c00175e4:	83 c4 5c             	add    esp,0x5c
c00175e7:	88 d0                	mov    al,dl
c00175e9:	5b                   	pop    ebx
c00175ea:	5e                   	pop    esi
c00175eb:	5f                   	pop    edi
c00175ec:	5d                   	pop    ebp
c00175ed:	c3                   	ret    

c00175ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00175ee:	55                   	push   ebp
c00175ef:	57                   	push   edi
c00175f0:	56                   	push   esi
c00175f1:	53                   	push   ebx
c00175f2:	81 ec 68 03 00 00    	sub    esp,0x368
c00175f8:	8b 1d 74 55 02 c0    	mov    ebx,DWORD PTR ds:0xc0025574
c00175fe:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017605:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017609:	68 14 01 00 00       	push   0x114
c001760e:	e8 11 7a ff ff       	call   c000f024 <operator new(unsigned long)>
c0017613:	83 c4 0c             	add    esp,0xc
c0017616:	53                   	push   ebx
c0017617:	89 c7                	mov    edi,eax
c0017619:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017620:	50                   	push   eax
c0017621:	e8 6a 80 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0017626:	5e                   	pop    esi
c0017627:	5d                   	pop    ebp
c0017628:	6a 01                	push   0x1
c001762a:	57                   	push   edi
c001762b:	e8 c4 80 ff ff       	call   c000f6f4 <File::open(FileOpenMode)>
c0017630:	83 c4 10             	add    esp,0x10
c0017633:	85 c0                	test   eax,eax
c0017635:	0f 85 10 07 00 00    	jne    c0017d4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001763b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017643:	83 ec 0c             	sub    esp,0xc
c0017646:	6a 34                	push   0x34
c0017648:	e8 da 48 ff ff       	call   c000bf27 <malloc>
c001764d:	5b                   	pop    ebx
c001764e:	89 c5                	mov    ebp,eax
c0017650:	8b 07                	mov    eax,DWORD PTR [edi]
c0017652:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017656:	53                   	push   ebx
c0017657:	55                   	push   ebp
c0017658:	6a 00                	push   0x0
c001765a:	6a 34                	push   0x34
c001765c:	57                   	push   edi
c001765d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017660:	83 c4 20             	add    esp,0x20
c0017663:	85 c0                	test   eax,eax
c0017665:	0f 85 e0 06 00 00    	jne    c0017d4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001766b:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0017672:	0f 85 d3 06 00 00    	jne    c0017d4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017678:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001767b:	85 c0                	test   eax,eax
c001767d:	0f 84 c8 06 00 00    	je     c0017d4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017683:	31 d2                	xor    edx,edx
c0017685:	51                   	push   ecx
c0017686:	52                   	push   edx
c0017687:	50                   	push   eax
c0017688:	57                   	push   edi
c0017689:	e8 24 81 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c001768e:	83 c4 10             	add    esp,0x10
c0017691:	85 c0                	test   eax,eax
c0017693:	0f 85 b2 06 00 00    	jne    c0017d4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017699:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c001769c:	83 ec 0c             	sub    esp,0xc
c001769f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00176a3:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00176a7:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00176ab:	0f af c2             	imul   eax,edx
c00176ae:	50                   	push   eax
c00176af:	e8 73 48 ff ff       	call   c000bf27 <malloc>
c00176b4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00176b8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00176bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00176bf:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c00176c3:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00176c7:	0f af c2             	imul   eax,edx
c00176ca:	99                   	cdq    
c00176cb:	52                   	push   edx
c00176cc:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00176ce:	50                   	push   eax
c00176cf:	57                   	push   edi
c00176d0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00176d3:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c00176d6:	83 c4 20             	add    esp,0x20
c00176d9:	85 c0                	test   eax,eax
c00176db:	0f 84 6a 06 00 00    	je     c0017d4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c00176e1:	52                   	push   edx
c00176e2:	31 d2                	xor    edx,edx
c00176e4:	52                   	push   edx
c00176e5:	50                   	push   eax
c00176e6:	57                   	push   edi
c00176e7:	e8 c6 80 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c00176ec:	83 c4 10             	add    esp,0x10
c00176ef:	85 c0                	test   eax,eax
c00176f1:	0f 85 54 06 00 00    	jne    c0017d4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c00176f7:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c00176fb:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c00176ff:	0f af c2             	imul   eax,edx
c0017702:	83 ec 0c             	sub    esp,0xc
c0017705:	31 f6                	xor    esi,esi
c0017707:	50                   	push   eax
c0017708:	e8 1a 48 ff ff       	call   c000bf27 <malloc>
c001770d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017711:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017714:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017718:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c001771c:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017720:	0f af c2             	imul   eax,edx
c0017723:	99                   	cdq    
c0017724:	52                   	push   edx
c0017725:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017727:	50                   	push   eax
c0017728:	57                   	push   edi
c0017729:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001772c:	83 c4 20             	add    esp,0x20
c001772f:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c0017733:	0f 86 af 00 00 00    	jbe    c00177e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c0017739:	0f b7 de             	movzx  ebx,si
c001773c:	c1 e3 05             	shl    ebx,0x5
c001773f:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0017743:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017746:	0f 85 96 00 00 00    	jne    c00177e2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c001774c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001774f:	31 d2                	xor    edx,edx
c0017751:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017755:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017758:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001775c:	50                   	push   eax
c001775d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017760:	52                   	push   edx
c0017761:	50                   	push   eax
c0017762:	57                   	push   edi
c0017763:	e8 4a 80 ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017768:	83 c4 10             	add    esp,0x10
c001776b:	85 c0                	test   eax,eax
c001776d:	0f 85 d8 05 00 00    	jne    c0017d4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017773:	52                   	push   edx
c0017774:	52                   	push   edx
c0017775:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017779:	68 5c 26 02 c0       	push   0xc002265c
c001777e:	e8 d6 79 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0017783:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c001778a:	31 d2                	xor    edx,edx
c001778c:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c0017790:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017794:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017798:	59                   	pop    ecx
c0017799:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001779b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00177a2:	50                   	push   eax
c00177a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00177a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00177ab:	52                   	push   edx
c00177ac:	50                   	push   eax
c00177ad:	57                   	push   edi
c00177ae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00177b1:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00177b4:	83 c4 18             	add    esp,0x18
c00177b7:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00177ba:	50                   	push   eax
c00177bb:	68 80 26 02 c0       	push   0xc0022680
c00177c0:	e8 94 79 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c00177c5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00177c8:	83 c4 0c             	add    esp,0xc
c00177cb:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00177ce:	50                   	push   eax
c00177cf:	6a 00                	push   0x0
c00177d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00177d5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00177d9:	50                   	push   eax
c00177da:	e8 29 8e fe ff       	call   c0000608 <memset>
c00177df:	83 c4 10             	add    esp,0x10
c00177e2:	46                   	inc    esi
c00177e3:	e9 47 ff ff ff       	jmp    c001772f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c00177e8:	50                   	push   eax
c00177e9:	31 db                	xor    ebx,ebx
c00177eb:	68 00 01 00 00       	push   0x100
c00177f0:	6a 00                	push   0x0
c00177f2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00177f6:	50                   	push   eax
c00177f7:	e8 0c 8e fe ff       	call   c0000608 <memset>
c00177fc:	83 c4 0c             	add    esp,0xc
c00177ff:	68 00 01 00 00       	push   0x100
c0017804:	6a 00                	push   0x0
c0017806:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001780d:	50                   	push   eax
c001780e:	e8 f5 8d fe ff       	call   c0000608 <memset>
c0017813:	83 c4 10             	add    esp,0x10
c0017816:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001781e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017826:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001782e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017836:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001783e:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c0017842:	0f 86 2f 01 00 00    	jbe    c0017977 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c0017848:	0f b7 f3             	movzx  esi,bx
c001784b:	6b f6 28             	imul   esi,esi,0x28
c001784e:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0017852:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017855:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017859:	50                   	push   eax
c001785a:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c001785e:	6b d2 28             	imul   edx,edx,0x28
c0017861:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017865:	8b 06                	mov    eax,DWORD PTR [esi]
c0017867:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001786b:	31 d2                	xor    edx,edx
c001786d:	52                   	push   edx
c001786e:	50                   	push   eax
c001786f:	57                   	push   edi
c0017870:	e8 3d 7f ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017875:	83 c4 0c             	add    esp,0xc
c0017878:	6a 20                	push   0x20
c001787a:	6a 00                	push   0x0
c001787c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017883:	51                   	push   ecx
c0017884:	e8 7f 8d fe ff       	call   c0000608 <memset>
c0017889:	58                   	pop    eax
c001788a:	8b 07                	mov    eax,DWORD PTR [edi]
c001788c:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017890:	52                   	push   edx
c0017891:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017898:	51                   	push   ecx
c0017899:	6a 00                	push   0x0
c001789b:	6a 1f                	push   0x1f
c001789d:	57                   	push   edi
c001789e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00178a1:	83 c4 1c             	add    esp,0x1c
c00178a4:	6a 09                	push   0x9
c00178a6:	68 9d 26 02 c0       	push   0xc002269d
c00178ab:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00178b2:	51                   	push   ecx
c00178b3:	e8 b7 8c fe ff       	call   c000056f <memcmp>
c00178b8:	83 c4 10             	add    esp,0x10
c00178bb:	85 c0                	test   eax,eax
c00178bd:	75 21                	jne    c00178e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c00178bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00178c3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00178c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00178cb:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00178cf:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00178d2:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c00178d9:	89 c8                	mov    eax,ecx
c00178db:	40                   	inc    eax
c00178dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00178e0:	50                   	push   eax
c00178e1:	6a 09                	push   0x9
c00178e3:	68 a7 26 02 c0       	push   0xc00226a7
c00178e8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00178ef:	50                   	push   eax
c00178f0:	e8 7a 8c fe ff       	call   c000056f <memcmp>
c00178f5:	83 c4 10             	add    esp,0x10
c00178f8:	85 c0                	test   eax,eax
c00178fa:	75 21                	jne    c001791d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c00178fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017900:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017904:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017908:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001790c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001790f:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017916:	89 c8                	mov    eax,ecx
c0017918:	40                   	inc    eax
c0017919:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001791d:	50                   	push   eax
c001791e:	50                   	push   eax
c001791f:	68 32 26 02 c0       	push   0xc0022632
c0017924:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001792b:	50                   	push   eax
c001792c:	e8 c7 8d fe ff       	call   c00006f8 <strcmp>
c0017931:	83 c4 10             	add    esp,0x10
c0017934:	85 c0                	test   eax,eax
c0017936:	75 0f                	jne    c0017947 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c0017938:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001793b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001793f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017943:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017947:	50                   	push   eax
c0017948:	50                   	push   eax
c0017949:	68 3a 26 02 c0       	push   0xc002263a
c001794e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017955:	50                   	push   eax
c0017956:	e8 9d 8d fe ff       	call   c00006f8 <strcmp>
c001795b:	83 c4 10             	add    esp,0x10
c001795e:	85 c0                	test   eax,eax
c0017960:	75 0f                	jne    c0017971 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c0017962:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017965:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017969:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001796d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017971:	43                   	inc    ebx
c0017972:	e9 c7 fe ff ff       	jmp    c001783e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c0017977:	31 d2                	xor    edx,edx
c0017979:	50                   	push   eax
c001797a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001797e:	52                   	push   edx
c001797f:	50                   	push   eax
c0017980:	57                   	push   edi
c0017981:	e8 2c 7e ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017986:	5a                   	pop    edx
c0017987:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001798b:	e8 97 45 ff ff       	call   c000bf27 <malloc>
c0017990:	31 d2                	xor    edx,edx
c0017992:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017996:	59                   	pop    ecx
c0017997:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017999:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001799d:	53                   	push   ebx
c001799e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00179a2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00179a6:	52                   	push   edx
c00179a7:	50                   	push   eax
c00179a8:	57                   	push   edi
c00179a9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00179ac:	83 c4 14             	add    esp,0x14
c00179af:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00179b3:	e8 6f 45 ff ff       	call   c000bf27 <malloc>
c00179b8:	31 d2                	xor    edx,edx
c00179ba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00179be:	83 c4 0c             	add    esp,0xc
c00179c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00179c5:	52                   	push   edx
c00179c6:	50                   	push   eax
c00179c7:	57                   	push   edi
c00179c8:	e8 e5 7d ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c00179cd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00179d0:	31 d2                	xor    edx,edx
c00179d2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00179d6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00179da:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00179dc:	52                   	push   edx
c00179dd:	50                   	push   eax
c00179de:	57                   	push   edi
c00179df:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00179e2:	83 c4 20             	add    esp,0x20
c00179e5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00179ed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00179f1:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c00179f5:	0f 84 54 03 00 00    	je     c0017d4f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c00179fb:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c0017a02:	31 d2                	xor    edx,edx
c0017a04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017a08:	c1 e8 03             	shr    eax,0x3
c0017a0b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017a0f:	50                   	push   eax
c0017a10:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a14:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0017a18:	52                   	push   edx
c0017a19:	50                   	push   eax
c0017a1a:	57                   	push   edi
c0017a1b:	e8 92 7d ff ff       	call   c000f7b2 <File::seek(unsigned long long)>
c0017a20:	58                   	pop    eax
c0017a21:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a25:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0017a2c:	e8 f6 44 ff ff       	call   c000bf27 <malloc>
c0017a31:	31 d2                	xor    edx,edx
c0017a33:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017a37:	58                   	pop    eax
c0017a38:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017a3a:	8d 44 24 58          	lea    eax,[esp+0x58]
c0017a3e:	50                   	push   eax
c0017a3f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017a43:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a47:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0017a4e:	52                   	push   edx
c0017a4f:	50                   	push   eax
c0017a50:	57                   	push   edi
c0017a51:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017a54:	83 c4 20             	add    esp,0x20
c0017a57:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0017a5f:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0017a63:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c0017a67:	0f 8d c6 02 00 00    	jge    c0017d33 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c0017a6d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a75:	31 db                	xor    ebx,ebx
c0017a77:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c0017a7a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017a7e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017a82:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c0017a86:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a8a:	c1 e8 08             	shr    eax,0x8
c0017a8d:	89 c6                	mov    esi,eax
c0017a8f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017a93:	c1 e6 04             	shl    esi,0x4
c0017a96:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c0017a9a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017a9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017aa1:	85 c0                	test   eax,eax
c0017aa3:	0f 85 17 01 00 00    	jne    c0017bc0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0017aa9:	83 ec 0c             	sub    esp,0xc
c0017aac:	b3 01                	mov    bl,0x1
c0017aae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ab2:	03 06                	add    eax,DWORD PTR [esi]
c0017ab4:	50                   	push   eax
c0017ab5:	e8 24 f8 ff ff       	call   c00172de <Thr::getAddressOfKernelSymbol(char const*)>
c0017aba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017abe:	83 c4 10             	add    esp,0x10
c0017ac1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017ac6:	0f 85 f4 00 00 00    	jne    c0017bc0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0017acc:	50                   	push   eax
c0017acd:	50                   	push   eax
c0017ace:	68 b1 26 02 c0       	push   0xc00226b1
c0017ad3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ad7:	03 06                	add    eax,DWORD PTR [esi]
c0017ad9:	50                   	push   eax
c0017ada:	e8 19 8c fe ff       	call   c00006f8 <strcmp>
c0017adf:	83 c4 10             	add    esp,0x10
c0017ae2:	85 c0                	test   eax,eax
c0017ae4:	75 0a                	jne    c0017af0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c0017ae6:	b8 ac ee 01 c0       	mov    eax,0xc001eeac
c0017aeb:	e9 ca 00 00 00       	jmp    c0017bba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0017af0:	50                   	push   eax
c0017af1:	50                   	push   eax
c0017af2:	68 bb 26 02 c0       	push   0xc00226bb
c0017af7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017afb:	03 06                	add    eax,DWORD PTR [esi]
c0017afd:	50                   	push   eax
c0017afe:	e8 f5 8b fe ff       	call   c00006f8 <strcmp>
c0017b03:	83 c4 10             	add    esp,0x10
c0017b06:	85 c0                	test   eax,eax
c0017b08:	75 0a                	jne    c0017b14 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c0017b0a:	b8 e0 eb 01 c0       	mov    eax,0xc001ebe0
c0017b0f:	e9 a6 00 00 00       	jmp    c0017bba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0017b14:	53                   	push   ebx
c0017b15:	53                   	push   ebx
c0017b16:	68 c4 26 02 c0       	push   0xc00226c4
c0017b1b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b1f:	03 06                	add    eax,DWORD PTR [esi]
c0017b21:	50                   	push   eax
c0017b22:	e8 d1 8b fe ff       	call   c00006f8 <strcmp>
c0017b27:	83 c4 10             	add    esp,0x10
c0017b2a:	85 c0                	test   eax,eax
c0017b2c:	75 0a                	jne    c0017b38 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c0017b2e:	b8 ac ef 01 c0       	mov    eax,0xc001efac
c0017b33:	e9 82 00 00 00       	jmp    c0017bba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0017b38:	51                   	push   ecx
c0017b39:	51                   	push   ecx
c0017b3a:	68 ce 26 02 c0       	push   0xc00226ce
c0017b3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b43:	03 06                	add    eax,DWORD PTR [esi]
c0017b45:	50                   	push   eax
c0017b46:	e8 ad 8b fe ff       	call   c00006f8 <strcmp>
c0017b4b:	83 c4 10             	add    esp,0x10
c0017b4e:	85 c0                	test   eax,eax
c0017b50:	74 63                	je     c0017bb5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c0017b52:	50                   	push   eax
c0017b53:	50                   	push   eax
c0017b54:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b58:	03 06                	add    eax,DWORD PTR [esi]
c0017b5a:	50                   	push   eax
c0017b5b:	68 d7 26 02 c0       	push   0xc00226d7
c0017b60:	e8 f4 75 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0017b65:	58                   	pop    eax
c0017b66:	5a                   	pop    edx
c0017b67:	68 f1 26 02 c0       	push   0xc00226f1
c0017b6c:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c0017b73:	53                   	push   ebx
c0017b74:	e8 2e 8b fe ff       	call   c00006a7 <strcpy>
c0017b79:	59                   	pop    ecx
c0017b7a:	58                   	pop    eax
c0017b7b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b7f:	03 06                	add    eax,DWORD PTR [esi]
c0017b81:	50                   	push   eax
c0017b82:	53                   	push   ebx
c0017b83:	e8 d6 8b fe ff       	call   c000075e <strcat>
c0017b88:	58                   	pop    eax
c0017b89:	5a                   	pop    edx
c0017b8a:	68 87 27 02 c0       	push   0xc0022787
c0017b8f:	53                   	push   ebx
c0017b90:	e8 c9 8b fe ff       	call   c000075e <strcat>
c0017b95:	83 c4 10             	add    esp,0x10
c0017b98:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017b9d:	0f 84 4b 01 00 00    	je     c0017cee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0017ba3:	83 ec 0c             	sub    esp,0xc
c0017ba6:	53                   	push   ebx
c0017ba7:	e8 40 d8 ff ff       	call   c00153ec <Krnl::panic(char const*)>
c0017bac:	83 c4 10             	add    esp,0x10
c0017baf:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c0017bb3:	eb 0b                	jmp    c0017bc0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0017bb5:	b8 2c ed 01 c0       	mov    eax,0xc001ed2c
c0017bba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017bbe:	b3 01                	mov    bl,0x1
c0017bc0:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0017bc5:	0f 85 80 00 00 00    	jne    c0017c4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c0017bcb:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0017bd2:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017bd6:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0017bda:	01 ce                	add    esi,ecx
c0017bdc:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0017be4:	0f 94 c2             	sete   dl
c0017be7:	8b 06                	mov    eax,DWORD PTR [esi]
c0017be9:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0017bf1:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c0017bf6:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c0017bfa:	84 db                	test   bl,bl
c0017bfc:	74 31                	je     c0017c2f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c0017bfe:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017c02:	01 c3                	add    ebx,eax
c0017c04:	84 d2                	test   dl,dl
c0017c06:	75 0a                	jne    c0017c12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c0017c08:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017c0c:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0017c10:	76 32                	jbe    c0017c44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0017c12:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017c17:	0f 84 d1 00 00 00    	je     c0017cee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0017c1d:	83 ec 0c             	sub    esp,0xc
c0017c20:	68 08 27 02 c0       	push   0xc0022708
c0017c25:	e8 c2 d7 ff ff       	call   c00153ec <Krnl::panic(char const*)>
c0017c2a:	83 c4 10             	add    esp,0x10
c0017c2d:	eb 15                	jmp    c0017c44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0017c2f:	8d 1c 01             	lea    ebx,[ecx+eax*1]
c0017c32:	84 d2                	test   dl,dl
c0017c34:	75 0e                	jne    c0017c44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0017c36:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017c3a:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0017c3e:	77 04                	ja     c0017c44 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0017c40:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017c44:	89 1e                	mov    DWORD PTR [esi],ebx
c0017c46:	e9 df 00 00 00       	jmp    c0017d2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0017c4b:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0017c50:	75 6e                	jne    c0017cc0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c0017c52:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0017c59:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c0017c5d:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c0017c61:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0017c69:	74 17                	je     c0017c82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c0017c6b:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0017c73:	74 0d                	je     c0017c82 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c0017c75:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017c79:	83 e8 04             	sub    eax,0x4
c0017c7c:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0017c80:	76 17                	jbe    c0017c99 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c0017c82:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017c87:	74 65                	je     c0017cee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0017c89:	83 ec 0c             	sub    esp,0xc
c0017c8c:	68 24 27 02 c0       	push   0xc0022724
c0017c91:	e8 56 d7 ff ff       	call   c00153ec <Krnl::panic(char const*)>
c0017c96:	83 c4 10             	add    esp,0x10
c0017c99:	8b 16                	mov    edx,DWORD PTR [esi]
c0017c9b:	84 db                	test   bl,bl
c0017c9d:	74 13                	je     c0017cb2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c0017c9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ca3:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c0017caa:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0017cae:	01 d0                	add    eax,edx
c0017cb0:	eb 06                	jmp    c0017cb8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c0017cb2:	89 d0                	mov    eax,edx
c0017cb4:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0017cb8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017cbc:	89 06                	mov    DWORD PTR [esi],eax
c0017cbe:	eb 6a                	jmp    c0017d2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0017cc0:	50                   	push   eax
c0017cc1:	50                   	push   eax
c0017cc2:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017cc7:	50                   	push   eax
c0017cc8:	68 40 27 02 c0       	push   0xc0022740
c0017ccd:	e8 87 74 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0017cd2:	83 c4 10             	add    esp,0x10
c0017cd5:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0017cda:	74 12                	je     c0017cee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0017cdc:	83 ec 0c             	sub    esp,0xc
c0017cdf:	68 4b 27 02 c0       	push   0xc002274b
c0017ce4:	e8 03 d7 ff ff       	call   c00153ec <Krnl::panic(char const*)>
c0017ce9:	83 c4 10             	add    esp,0x10
c0017cec:	eb 3c                	jmp    c0017d2a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0017cee:	83 ec 0c             	sub    esp,0xc
c0017cf1:	57                   	push   edi
c0017cf2:	e8 5b 7a ff ff       	call   c000f752 <File::close()>
c0017cf7:	8b 07                	mov    eax,DWORD PTR [edi]
c0017cf9:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017cfc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017cff:	59                   	pop    ecx
c0017d00:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017d04:	e8 2e 42 ff ff       	call   c000bf37 <free>
c0017d09:	5b                   	pop    ebx
c0017d0a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d0e:	e8 24 42 ff ff       	call   c000bf37 <free>
c0017d13:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d16:	e8 1c 42 ff ff       	call   c000bf37 <free>
c0017d1b:	5e                   	pop    esi
c0017d1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017d20:	e8 12 42 ff ff       	call   c000bf37 <free>
c0017d25:	83 c4 10             	add    esp,0x10
c0017d28:	eb 21                	jmp    c0017d4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017d2a:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0017d2e:	e9 2c fd ff ff       	jmp    c0017a5f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c0017d33:	83 ec 0c             	sub    esp,0xc
c0017d36:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017d3a:	e8 f8 41 ff ff       	call   c000bf37 <free>
c0017d3f:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c0017d43:	83 c4 10             	add    esp,0x10
c0017d46:	e9 a2 fc ff ff       	jmp    c00179ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c0017d4b:	31 c0                	xor    eax,eax
c0017d4d:	eb 32                	jmp    c0017d81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c0017d4f:	83 ec 0c             	sub    esp,0xc
c0017d52:	57                   	push   edi
c0017d53:	e8 fa 79 ff ff       	call   c000f752 <File::close()>
c0017d58:	8b 07                	mov    eax,DWORD PTR [edi]
c0017d5a:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017d5d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017d60:	58                   	pop    eax
c0017d61:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017d65:	e8 cd 41 ff ff       	call   c000bf37 <free>
c0017d6a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017d6d:	e8 c5 41 ff ff       	call   c000bf37 <free>
c0017d72:	5a                   	pop    edx
c0017d73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017d77:	e8 bb 41 ff ff       	call   c000bf37 <free>
c0017d7c:	83 c4 10             	add    esp,0x10
c0017d7f:	b0 01                	mov    al,0x1
c0017d81:	81 c4 5c 03 00 00    	add    esp,0x35c
c0017d87:	5b                   	pop    ebx
c0017d88:	5e                   	pop    esi
c0017d89:	5f                   	pop    edi
c0017d8a:	5d                   	pop    ebp
c0017d8b:	c3                   	ret    

c0017d8c <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017d8c:	56                   	push   esi
c0017d8d:	31 d2                	xor    edx,edx
c0017d8f:	53                   	push   ebx
c0017d90:	8b 1d 80 4d 02 c0    	mov    ebx,DWORD PTR ds:0xc0024d80
c0017d96:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017d9a:	39 d3                	cmp    ebx,edx
c0017d9c:	7e 1b                	jle    c0017db9 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017d9e:	8b 04 95 a0 4f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb060]
c0017da5:	39 c8                	cmp    eax,ecx
c0017da7:	77 0d                	ja     c0017db6 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0017da9:	8b 34 95 a0 4d 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdb260]
c0017db0:	01 c6                	add    esi,eax
c0017db2:	39 ce                	cmp    esi,ecx
c0017db4:	77 05                	ja     c0017dbb <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0017db6:	42                   	inc    edx
c0017db7:	eb e1                	jmp    c0017d9a <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0017db9:	31 c0                	xor    eax,eax
c0017dbb:	5b                   	pop    ebx
c0017dbc:	5e                   	pop    esi
c0017dbd:	c3                   	ret    

c0017dbe <Thr::getDriverNameFromAddress(unsigned long)>:
c0017dbe:	53                   	push   ebx
c0017dbf:	31 c0                	xor    eax,eax
c0017dc1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017dc5:	8b 1d 80 4d 02 c0    	mov    ebx,DWORD PTR ds:0xc0024d80
c0017dcb:	39 c3                	cmp    ebx,eax
c0017dcd:	7e 22                	jle    c0017df1 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0017dcf:	8b 14 85 a0 4f 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb060]
c0017dd6:	39 ca                	cmp    edx,ecx
c0017dd8:	77 14                	ja     c0017dee <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017dda:	03 14 85 a0 4d 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdb260]
c0017de1:	39 ca                	cmp    edx,ecx
c0017de3:	76 09                	jbe    c0017dee <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017de5:	8b 04 85 a0 51 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdae60]
c0017dec:	eb 05                	jmp    c0017df3 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0017dee:	40                   	inc    eax
c0017def:	eb da                	jmp    c0017dcb <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0017df1:	31 c0                	xor    eax,eax
c0017df3:	5b                   	pop    ebx
c0017df4:	c3                   	ret    

c0017df5 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017df5:	53                   	push   ebx
c0017df6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017dfa:	53                   	push   ebx
c0017dfb:	e8 8c ff ff ff       	call   c0017d8c <Thr::getDriverBaseFromAddress(unsigned long)>
c0017e00:	5a                   	pop    edx
c0017e01:	31 d2                	xor    edx,edx
c0017e03:	85 c0                	test   eax,eax
c0017e05:	74 04                	je     c0017e0b <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0017e07:	89 da                	mov    edx,ebx
c0017e09:	29 c2                	sub    edx,eax
c0017e0b:	89 d0                	mov    eax,edx
c0017e0d:	5b                   	pop    ebx
c0017e0e:	c3                   	ret    

c0017e0f <Thr::loadDLL(char const*, bool)>:
c0017e0f:	55                   	push   ebp
c0017e10:	57                   	push   edi
c0017e11:	56                   	push   esi
c0017e12:	53                   	push   ebx
c0017e13:	81 ec 34 01 00 00    	sub    esp,0x134
c0017e19:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0017e20:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0017e27:	56                   	push   esi
c0017e28:	68 63 27 02 c0       	push   0xc0022763
c0017e2d:	e8 27 73 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0017e32:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0017e39:	e8 e6 71 ff ff       	call   c000f024 <operator new(unsigned long)>
c0017e3e:	83 c4 0c             	add    esp,0xc
c0017e41:	89 c3                	mov    ebx,eax
c0017e43:	ff 35 74 55 02 c0    	push   DWORD PTR ds:0xc0025574
c0017e49:	56                   	push   esi
c0017e4a:	50                   	push   eax
c0017e4b:	e8 40 78 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c0017e50:	83 c4 0c             	add    esp,0xc
c0017e53:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0017e57:	50                   	push   eax
c0017e58:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017e5c:	50                   	push   eax
c0017e5d:	53                   	push   ebx
c0017e5e:	e8 3d 7b ff ff       	call   c000f9a0 <File::stat(unsigned long long*, bool*)>
c0017e63:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017e65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017e68:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017e6b:	83 c4 10             	add    esp,0x10
c0017e6e:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0017e73:	75 0a                	jne    c0017e7f <Thr::loadDLL(char const*, bool)+0x70>
c0017e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e79:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0017e7d:	75 3c                	jne    c0017ebb <Thr::loadDLL(char const*, bool)+0xac>
c0017e7f:	89 e8                	mov    eax,ebp
c0017e81:	84 c0                	test   al,al
c0017e83:	0f 84 3d 01 00 00    	je     c0017fc6 <Thr::loadDLL(char const*, bool)+0x1b7>
c0017e89:	50                   	push   eax
c0017e8a:	50                   	push   eax
c0017e8b:	68 74 27 02 c0       	push   0xc0022774
c0017e90:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0017e94:	53                   	push   ebx
c0017e95:	e8 0d 88 fe ff       	call   c00006a7 <strcpy>
c0017e9a:	58                   	pop    eax
c0017e9b:	5a                   	pop    edx
c0017e9c:	56                   	push   esi
c0017e9d:	53                   	push   ebx
c0017e9e:	e8 bb 88 fe ff       	call   c000075e <strcat>
c0017ea3:	59                   	pop    ecx
c0017ea4:	5f                   	pop    edi
c0017ea5:	68 87 27 02 c0       	push   0xc0022787
c0017eaa:	53                   	push   ebx
c0017eab:	e8 ae 88 fe ff       	call   c000075e <strcat>
c0017eb0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017eb3:	e8 34 d5 ff ff       	call   c00153ec <Krnl::panic(char const*)>
c0017eb8:	83 c4 10             	add    esp,0x10
c0017ebb:	e8 0b 64 ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c0017ec0:	51                   	push   ecx
c0017ec1:	6a 03                	push   0x3
c0017ec3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017ec7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017ecb:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c0017ed1:	83 d3 00             	adc    ebx,0x0
c0017ed4:	89 ca                	mov    edx,ecx
c0017ed6:	89 d1                	mov    ecx,edx
c0017ed8:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c0017edc:	51                   	push   ecx
c0017edd:	50                   	push   eax
c0017ede:	e8 29 6a ff ff       	call   c000e90c <VAS::allocatePages(int, int)>
c0017ee3:	89 34 24             	mov    DWORD PTR [esp],esi
c0017ee6:	89 c3                	mov    ebx,eax
c0017ee8:	e8 38 87 fe ff       	call   c0000625 <strlen>
c0017eed:	8b 3d 80 4d 02 c0    	mov    edi,DWORD PTR ds:0xc0024d80
c0017ef3:	40                   	inc    eax
c0017ef4:	89 04 24             	mov    DWORD PTR [esp],eax
c0017ef7:	e8 2b 40 ff ff       	call   c000bf27 <malloc>
c0017efc:	89 04 bd a0 51 02 c0 	mov    DWORD PTR [edi*4-0x3ffdae60],eax
c0017f03:	5f                   	pop    edi
c0017f04:	58                   	pop    eax
c0017f05:	a1 80 4d 02 c0       	mov    eax,ds:0xc0024d80
c0017f0a:	56                   	push   esi
c0017f0b:	ff 34 85 a0 51 02 c0 	push   DWORD PTR [eax*4-0x3ffdae60]
c0017f12:	e8 90 87 fe ff       	call   c00006a7 <strcpy>
c0017f17:	a1 80 4d 02 c0       	mov    eax,ds:0xc0024d80
c0017f1c:	8d 50 01             	lea    edx,[eax+0x1]
c0017f1f:	89 1c 85 a0 4f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb060],ebx
c0017f26:	89 15 80 4d 02 c0    	mov    DWORD PTR ds:0xc0024d80,edx
c0017f2c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f30:	83 c4 0c             	add    esp,0xc
c0017f33:	89 14 85 a0 4d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb260],edx
c0017f3a:	6a 01                	push   0x1
c0017f3c:	53                   	push   ebx
c0017f3d:	56                   	push   esi
c0017f3e:	e8 ab f6 ff ff       	call   c00175ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0017f43:	83 c4 10             	add    esp,0x10
c0017f46:	89 c7                	mov    edi,eax
c0017f48:	fe c8                	dec    al
c0017f4a:	74 16                	je     c0017f62 <Thr::loadDLL(char const*, bool)+0x153>
c0017f4c:	89 e8                	mov    eax,ebp
c0017f4e:	84 c0                	test   al,al
c0017f50:	74 10                	je     c0017f62 <Thr::loadDLL(char const*, bool)+0x153>
c0017f52:	83 ec 0c             	sub    esp,0xc
c0017f55:	68 89 27 02 c0       	push   0xc0022789
c0017f5a:	e8 8d d4 ff ff       	call   c00153ec <Krnl::panic(char const*)>
c0017f5f:	83 c4 10             	add    esp,0x10
c0017f62:	31 f6                	xor    esi,esi
c0017f64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017f68:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f6c:	05 ff 0f 00 00       	add    eax,0xfff
c0017f71:	83 d2 00             	adc    edx,0x0
c0017f74:	0f ac d0 0c          	shrd   eax,edx,0xc
c0017f78:	c1 ea 0c             	shr    edx,0xc
c0017f7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017f7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017f83:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0017f87:	ba 00 00 00 00       	mov    edx,0x0
c0017f8c:	89 d0                	mov    eax,edx
c0017f8e:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0017f92:	73 2c                	jae    c0017fc0 <Thr::loadDLL(char const*, bool)+0x1b1>
c0017f94:	e8 32 63 ff ff       	call   c000e2cb <Virt::getAKernelVAS()>
c0017f99:	89 f5                	mov    ebp,esi
c0017f9b:	c1 e5 0c             	shl    ebp,0xc
c0017f9e:	52                   	push   edx
c0017f9f:	52                   	push   edx
c0017fa0:	01 dd                	add    ebp,ebx
c0017fa2:	55                   	push   ebp
c0017fa3:	50                   	push   eax
c0017fa4:	e8 c3 64 ff ff       	call   c000e46c <VAS::getPageTableEntry(unsigned long)>
c0017fa9:	83 c4 10             	add    esp,0x10
c0017fac:	f6 00 60             	test   BYTE PTR [eax],0x60
c0017faf:	75 0c                	jne    c0017fbd <Thr::loadDLL(char const*, bool)+0x1ae>
c0017fb1:	83 ec 0c             	sub    esp,0xc
c0017fb4:	55                   	push   ebp
c0017fb5:	e8 b6 44 ff ff       	call   c000c470 <Phys::freePage(unsigned long)>
c0017fba:	83 c4 10             	add    esp,0x10
c0017fbd:	46                   	inc    esi
c0017fbe:	eb a4                	jmp    c0017f64 <Thr::loadDLL(char const*, bool)+0x155>
c0017fc0:	89 f8                	mov    eax,edi
c0017fc2:	84 c0                	test   al,al
c0017fc4:	75 02                	jne    c0017fc8 <Thr::loadDLL(char const*, bool)+0x1b9>
c0017fc6:	31 db                	xor    ebx,ebx
c0017fc8:	81 c4 2c 01 00 00    	add    esp,0x12c
c0017fce:	89 d8                	mov    eax,ebx
c0017fd0:	5b                   	pop    ebx
c0017fd1:	5e                   	pop    esi
c0017fd2:	5f                   	pop    edi
c0017fd3:	5d                   	pop    ebp
c0017fd4:	c3                   	ret    

c0017fd5 <Thr::executeDLL(unsigned long, void*)>:
c0017fd5:	56                   	push   esi
c0017fd6:	53                   	push   ebx
c0017fd7:	51                   	push   ecx
c0017fd8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017fdc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017fe0:	85 db                	test   ebx,ebx
c0017fe2:	75 10                	jne    c0017ff4 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0017fe4:	83 ec 0c             	sub    esp,0xc
c0017fe7:	68 a8 27 02 c0       	push   0xc00227a8
c0017fec:	e8 fb d3 ff ff       	call   c00153ec <Krnl::panic(char const*)>
c0017ff1:	83 c4 10             	add    esp,0x10
c0017ff4:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0017ff8:	5a                   	pop    edx
c0017ff9:	89 d8                	mov    eax,ebx
c0017ffb:	5b                   	pop    ebx
c0017ffc:	5e                   	pop    esi
c0017ffd:	ff e0                	jmp    eax
c0017fff:	90                   	nop

c0018000 <changeTSS>:
c0018000:	83 ec 0c             	sub    esp,0xc
c0018003:	e8 78 c2 ff ff       	call   c0014280 <thisCPU()>
c0018008:	52                   	push   edx
c0018009:	05 7c 11 00 00       	add    eax,0x117c
c001800e:	52                   	push   edx
c001800f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018015:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0018018:	ba 00 00 e8 01       	mov    edx,0x1e80000
c001801d:	c1 e1 15             	shl    ecx,0x15
c0018020:	29 ca                	sub    edx,ecx
c0018022:	52                   	push   edx
c0018023:	50                   	push   eax
c0018024:	e8 ef 59 ff ff       	call   c000da18 <TSS::setESP(unsigned long)>
c0018029:	83 c4 1c             	add    esp,0x1c
c001802c:	c3                   	ret    
c001802d:	90                   	nop

c001802e <Process::addArgs(char**)>:
c001802e:	57                   	push   edi
c001802f:	56                   	push   esi
c0018030:	53                   	push   ebx
c0018031:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018035:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0018039:	85 ff                	test   edi,edi
c001803b:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c0018045:	74 45                	je     c001808c <Process::addArgs(char**)+0x5e>
c0018047:	8b 07                	mov    eax,DWORD PTR [edi]
c0018049:	85 c0                	test   eax,eax
c001804b:	74 3f                	je     c001808c <Process::addArgs(char**)+0x5e>
c001804d:	31 db                	xor    ebx,ebx
c001804f:	83 ec 0c             	sub    esp,0xc
c0018052:	50                   	push   eax
c0018053:	e8 cd 85 fe ff       	call   c0000625 <strlen>
c0018058:	40                   	inc    eax
c0018059:	89 04 24             	mov    DWORD PTR [esp],eax
c001805c:	e8 c6 3e ff ff       	call   c000bf27 <malloc>
c0018061:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c0018068:	5a                   	pop    edx
c0018069:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001806c:	59                   	pop    ecx
c001806d:	43                   	inc    ebx
c001806e:	52                   	push   edx
c001806f:	50                   	push   eax
c0018070:	e8 32 86 fe ff       	call   c00006a7 <strcpy>
c0018075:	8b 8e 36 05 00 00    	mov    ecx,DWORD PTR [esi+0x536]
c001807b:	83 c4 10             	add    esp,0x10
c001807e:	41                   	inc    ecx
c001807f:	89 8e 36 05 00 00    	mov    DWORD PTR [esi+0x536],ecx
c0018085:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0018088:	85 c0                	test   eax,eax
c001808a:	75 c3                	jne    c001804f <Process::addArgs(char**)+0x21>
c001808c:	5b                   	pop    ebx
c001808d:	5e                   	pop    esi
c001808e:	5f                   	pop    edi
c001808f:	c3                   	ret    

c0018090 <Process::Process(char const*, Process*, char**)>:
c0018090:	56                   	push   esi
c0018091:	53                   	push   ebx
c0018092:	83 ec 14             	sub    esp,0x14
c0018095:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018099:	05 0c 02 00 00       	add    eax,0x20c
c001809e:	bb 07 00 00 00       	mov    ebx,0x7
c00180a3:	89 c6                	mov    esi,eax
c00180a5:	85 db                	test   ebx,ebx
c00180a7:	78 12                	js     c00180bb <Process::Process(char const*, Process*, char**)+0x2b>
c00180a9:	83 ec 0c             	sub    esp,0xc
c00180ac:	56                   	push   esi
c00180ad:	e8 48 77 00 00       	call   c001f7fa <ThreadControlBlock::ThreadControlBlock()>
c00180b2:	83 c4 10             	add    esp,0x10
c00180b5:	83 c6 63             	add    esi,0x63
c00180b8:	4b                   	dec    ebx
c00180b9:	eb ea                	jmp    c00180a5 <Process::Process(char const*, Process*, char**)+0x15>
c00180bb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180bf:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00180c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00180ca:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c00180d3:	a1 44 3b 02 c0       	mov    eax,ds:0xc0023b44
c00180d8:	8d 50 01             	lea    edx,[eax+0x1]
c00180db:	89 15 44 3b 02 c0    	mov    DWORD PTR ds:0xc0023b44,edx
c00180e1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00180e5:	89 02                	mov    DWORD PTR [edx],eax
c00180e7:	83 ec 0c             	sub    esp,0xc
c00180ea:	6a 10                	push   0x10
c00180ec:	e8 33 6f ff ff       	call   c000f024 <operator new(unsigned long)>
c00180f1:	83 c4 10             	add    esp,0x10
c00180f4:	89 c3                	mov    ebx,eax
c00180f6:	83 ec 08             	sub    esp,0x8
c00180f9:	6a 00                	push   0x0
c00180fb:	53                   	push   ebx
c00180fc:	e8 b7 6b ff ff       	call   c000ecb8 <VAS::VAS(bool)>
c0018101:	83 c4 10             	add    esp,0x10
c0018104:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018108:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001810e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018112:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001811c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018120:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018124:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001812a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001812e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018134:	85 c0                	test   eax,eax
c0018136:	74 42                	je     c001817a <Process::Process(char const*, Process*, char**)+0xea>
c0018138:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001813c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018142:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018148:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001814c:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0018152:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018156:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001815c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018162:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018166:	05 0c 01 00 00       	add    eax,0x10c
c001816b:	83 ec 08             	sub    esp,0x8
c001816e:	52                   	push   edx
c001816f:	50                   	push   eax
c0018170:	e8 32 85 fe ff       	call   c00006a7 <strcpy>
c0018175:	83 c4 10             	add    esp,0x10
c0018178:	eb 5c                	jmp    c00181d6 <Process::Process(char const*, Process*, char**)+0x146>
c001817a:	83 ec 0c             	sub    esp,0xc
c001817d:	68 60 12 00 00       	push   0x1260
c0018182:	e8 9d 6e ff ff       	call   c000f024 <operator new(unsigned long)>
c0018187:	83 c4 10             	add    esp,0x10
c001818a:	89 c3                	mov    ebx,eax
c001818c:	83 ec 08             	sub    esp,0x8
c001818f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018193:	53                   	push   ebx
c0018194:	e8 7d 55 ff ff       	call   c000d716 <VgaText::VgaText(char const*)>
c0018199:	83 c4 10             	add    esp,0x10
c001819c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181a0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00181a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181aa:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00181b0:	83 ec 0c             	sub    esp,0xc
c00181b3:	50                   	push   eax
c00181b4:	e8 5c 49 ff ff       	call   c000cb15 <addToTerminalCycle(VgaText*)>
c00181b9:	83 c4 10             	add    esp,0x10
c00181bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181c0:	05 0c 01 00 00       	add    eax,0x10c
c00181c5:	83 ec 08             	sub    esp,0x8
c00181c8:	68 d2 27 02 c0       	push   0xc00227d2
c00181cd:	50                   	push   eax
c00181ce:	e8 d4 84 fe ff       	call   c00006a7 <strcpy>
c00181d3:	83 c4 10             	add    esp,0x10
c00181d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00181da:	83 c0 0c             	add    eax,0xc
c00181dd:	83 ec 08             	sub    esp,0x8
c00181e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00181e4:	50                   	push   eax
c00181e5:	e8 bd 84 fe ff       	call   c00006a7 <strcpy>
c00181ea:	83 c4 10             	add    esp,0x10
c00181ed:	83 ec 08             	sub    esp,0x8
c00181f0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00181f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00181f8:	e8 31 fe ff ff       	call   c001802e <Process::addArgs(char**)>
c00181fd:	83 c4 10             	add    esp,0x10
c0018200:	83 ec 08             	sub    esp,0x8
c0018203:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018207:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001820b:	e8 a5 ee ff ff       	call   c00170b5 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0018210:	83 c4 10             	add    esp,0x10
c0018213:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018217:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001821b:	83 f0 01             	xor    eax,0x1
c001821e:	88 c2                	mov    dl,al
c0018220:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018224:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001822a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001822e:	25 ff 00 00 00       	and    eax,0xff
c0018233:	83 ec 08             	sub    esp,0x8
c0018236:	50                   	push   eax
c0018237:	68 d0 28 02 c0       	push   0xc00228d0
c001823c:	e8 18 6f ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018241:	83 c4 10             	add    esp,0x10
c0018244:	90                   	nop
c0018245:	83 c4 14             	add    esp,0x14
c0018248:	5b                   	pop    ebx
c0018249:	5e                   	pop    esi
c001824a:	c3                   	ret    
c001824b:	90                   	nop

c001824c <Process::Process(bool, char const*, Process*, char**)>:
c001824c:	56                   	push   esi
c001824d:	53                   	push   ebx
c001824e:	83 ec 14             	sub    esp,0x14
c0018251:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018255:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018259:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001825d:	05 0c 02 00 00       	add    eax,0x20c
c0018262:	bb 07 00 00 00       	mov    ebx,0x7
c0018267:	89 c6                	mov    esi,eax
c0018269:	85 db                	test   ebx,ebx
c001826b:	78 12                	js     c001827f <Process::Process(bool, char const*, Process*, char**)+0x33>
c001826d:	83 ec 0c             	sub    esp,0xc
c0018270:	56                   	push   esi
c0018271:	e8 84 75 00 00       	call   c001f7fa <ThreadControlBlock::ThreadControlBlock()>
c0018276:	83 c4 10             	add    esp,0x10
c0018279:	83 c6 63             	add    esi,0x63
c001827c:	4b                   	dec    ebx
c001827d:	eb ea                	jmp    c0018269 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001827f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018283:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001828a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001828e:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0018297:	a1 44 3b 02 c0       	mov    eax,ds:0xc0023b44
c001829c:	8d 50 01             	lea    edx,[eax+0x1]
c001829f:	89 15 44 3b 02 c0    	mov    DWORD PTR ds:0xc0023b44,edx
c00182a5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00182a9:	89 02                	mov    DWORD PTR [edx],eax
c00182ab:	83 ec 0c             	sub    esp,0xc
c00182ae:	6a 10                	push   0x10
c00182b0:	e8 6f 6d ff ff       	call   c000f024 <operator new(unsigned long)>
c00182b5:	83 c4 10             	add    esp,0x10
c00182b8:	89 c3                	mov    ebx,eax
c00182ba:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00182be:	25 ff 00 00 00       	and    eax,0xff
c00182c3:	83 ec 08             	sub    esp,0x8
c00182c6:	50                   	push   eax
c00182c7:	53                   	push   ebx
c00182c8:	e8 eb 69 ff ff       	call   c000ecb8 <VAS::VAS(bool)>
c00182cd:	83 c4 10             	add    esp,0x10
c00182d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182d4:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c00182da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182de:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c00182e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182ec:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00182f0:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c00182f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182fa:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018300:	85 c0                	test   eax,eax
c0018302:	74 42                	je     c0018346 <Process::Process(bool, char const*, Process*, char**)+0xfa>
c0018304:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018308:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001830e:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018314:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018318:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001831e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018322:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018328:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001832e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018332:	05 0c 01 00 00       	add    eax,0x10c
c0018337:	83 ec 08             	sub    esp,0x8
c001833a:	52                   	push   edx
c001833b:	50                   	push   eax
c001833c:	e8 66 83 fe ff       	call   c00006a7 <strcpy>
c0018341:	83 c4 10             	add    esp,0x10
c0018344:	eb 5c                	jmp    c00183a2 <Process::Process(bool, char const*, Process*, char**)+0x156>
c0018346:	83 ec 0c             	sub    esp,0xc
c0018349:	68 60 12 00 00       	push   0x1260
c001834e:	e8 d1 6c ff ff       	call   c000f024 <operator new(unsigned long)>
c0018353:	83 c4 10             	add    esp,0x10
c0018356:	89 c3                	mov    ebx,eax
c0018358:	83 ec 08             	sub    esp,0x8
c001835b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001835f:	53                   	push   ebx
c0018360:	e8 b1 53 ff ff       	call   c000d716 <VgaText::VgaText(char const*)>
c0018365:	83 c4 10             	add    esp,0x10
c0018368:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001836c:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c0018372:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018376:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001837c:	83 ec 0c             	sub    esp,0xc
c001837f:	50                   	push   eax
c0018380:	e8 90 47 ff ff       	call   c000cb15 <addToTerminalCycle(VgaText*)>
c0018385:	83 c4 10             	add    esp,0x10
c0018388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001838c:	05 0c 01 00 00       	add    eax,0x10c
c0018391:	83 ec 08             	sub    esp,0x8
c0018394:	68 d2 27 02 c0       	push   0xc00227d2
c0018399:	50                   	push   eax
c001839a:	e8 08 83 fe ff       	call   c00006a7 <strcpy>
c001839f:	83 c4 10             	add    esp,0x10
c00183a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183a6:	83 c0 0c             	add    eax,0xc
c00183a9:	83 ec 08             	sub    esp,0x8
c00183ac:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00183b0:	50                   	push   eax
c00183b1:	e8 f1 82 fe ff       	call   c00006a7 <strcpy>
c00183b6:	83 c4 10             	add    esp,0x10
c00183b9:	83 ec 08             	sub    esp,0x8
c00183bc:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00183c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00183c4:	e8 65 fc ff ff       	call   c001802e <Process::addArgs(char**)>
c00183c9:	83 c4 10             	add    esp,0x10
c00183cc:	90                   	nop
c00183cd:	83 c4 14             	add    esp,0x14
c00183d0:	5b                   	pop    ebx
c00183d1:	5e                   	pop    esi
c00183d2:	c3                   	ret    

c00183d3 <disableIRQs()>:
c00183d3:	fa                   	cli    
c00183d4:	a1 4c 55 02 c0       	mov    eax,ds:0xc002554c
c00183d9:	40                   	inc    eax
c00183da:	a3 4c 55 02 c0       	mov    ds:0xc002554c,eax
c00183df:	c3                   	ret    

c00183e0 <getIRQNestingLevel()>:
c00183e0:	a1 4c 55 02 c0       	mov    eax,ds:0xc002554c
c00183e5:	c3                   	ret    

c00183e6 <enableIRQs()>:
c00183e6:	a1 4c 55 02 c0       	mov    eax,ds:0xc002554c
c00183eb:	48                   	dec    eax
c00183ec:	a3 4c 55 02 c0       	mov    ds:0xc002554c,eax
c00183f1:	75 01                	jne    c00183f4 <enableIRQs()+0xe>
c00183f3:	fb                   	sti    
c00183f4:	c3                   	ret    

c00183f5 <lockScheduler()>:
c00183f5:	eb dc                	jmp    c00183d3 <disableIRQs()>

c00183f7 <unlockScheduler()>:
c00183f7:	eb ed                	jmp    c00183e6 <enableIRQs()>

c00183f9 <userModeEntryPoint(void*)>:
c00183f9:	83 ec 0c             	sub    esp,0xc
c00183fc:	e8 f6 ff ff ff       	call   c00183f7 <unlockScheduler()>
c0018401:	fb                   	sti    
c0018402:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018407:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001840a:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0018410:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018414:	83 c4 0c             	add    esp,0xc
c0018417:	e9 ca 7d fe ff       	jmp    c00001e6 <goToUsermode>

c001841c <lockStuff()>:
c001841c:	e8 b2 ff ff ff       	call   c00183d3 <disableIRQs()>
c0018421:	a1 48 55 02 c0       	mov    eax,ds:0xc0025548
c0018426:	40                   	inc    eax
c0018427:	a3 48 55 02 c0       	mov    ds:0xc0025548,eax
c001842c:	c3                   	ret    

c001842d <taskStartupFunction>:
c001842d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018432:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018435:	c3                   	ret    

c0018436 <updateTimeUsed()>:
c0018436:	57                   	push   edi
c0018437:	56                   	push   esi
c0018438:	53                   	push   ebx
c0018439:	e8 42 be ff ff       	call   c0014280 <thisCPU()>
c001843e:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0018445:	74 49                	je     c0018490 <updateTimeUsed()+0x5a>
c0018447:	0f 31                	rdtsc  
c0018449:	89 c1                	mov    ecx,eax
c001844b:	a3 88 55 02 c0       	mov    ds:0xc0025588,eax
c0018450:	2b 0d 78 55 02 c0    	sub    ecx,DWORD PTR ds:0xc0025578
c0018456:	a3 78 55 02 c0       	mov    ds:0xc0025578,eax
c001845b:	89 0d 80 55 02 c0    	mov    DWORD PTR ds:0xc0025580,ecx
c0018461:	89 d3                	mov    ebx,edx
c0018463:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018468:	89 15 8c 55 02 c0    	mov    DWORD PTR ds:0xc002558c,edx
c001846e:	1b 1d 7c 55 02 c0    	sbb    ebx,DWORD PTR ds:0xc002557c
c0018474:	89 15 7c 55 02 c0    	mov    DWORD PTR ds:0xc002557c,edx
c001847a:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001847d:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0018480:	01 f1                	add    ecx,esi
c0018482:	89 1d 84 55 02 c0    	mov    DWORD PTR ds:0xc0025584,ebx
c0018488:	11 fb                	adc    ebx,edi
c001848a:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001848d:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0018490:	5b                   	pop    ebx
c0018491:	5e                   	pop    esi
c0018492:	5f                   	pop    edi
c0018493:	c3                   	ret    

c0018494 <switchToThread(ThreadControlBlock*)>:
c0018494:	53                   	push   ebx
c0018495:	83 ec 08             	sub    esp,0x8
c0018498:	a1 48 55 02 c0       	mov    eax,ds:0xc0025548
c001849d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00184a1:	85 c0                	test   eax,eax
c00184a3:	75 36                	jne    c00184db <switchToThread(ThreadControlBlock*)+0x47>
c00184a5:	8a 53 44             	mov    dl,BYTE PTR [ebx+0x44]
c00184a8:	80 fa ff             	cmp    dl,0xff
c00184ab:	74 2a                	je     c00184d7 <switchToThread(ThreadControlBlock*)+0x43>
c00184ad:	81 e2 ff 00 00 00    	and    edx,0xff
c00184b3:	b8 84 03 00 00       	mov    eax,0x384
c00184b8:	29 d0                	sub    eax,edx
c00184ba:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c00184bd:	c1 e0 10             	shl    eax,0x10
c00184c0:	01 c8                	add    eax,ecx
c00184c2:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00184c5:	e8 6c ff ff ff       	call   c0018436 <updateTimeUsed()>
c00184ca:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00184ce:	83 c4 08             	add    esp,0x8
c00184d1:	5b                   	pop    ebx
c00184d2:	e9 48 7d fe ff       	jmp    c000021f <switchToThreadASM>
c00184d7:	31 c0                	xor    eax,eax
c00184d9:	eb e7                	jmp    c00184c2 <switchToThread(ThreadControlBlock*)+0x2e>
c00184db:	c7 05 44 55 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025544,0x1
c00184e5:	83 c4 08             	add    esp,0x8
c00184e8:	5b                   	pop    ebx
c00184e9:	c3                   	ret    

c00184ea <Semaphore::Semaphore(int)>:
c00184ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00184f2:	89 10                	mov    DWORD PTR [eax],edx
c00184f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00184f8:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00184ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018503:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001850a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001850e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018515:	90                   	nop
c0018516:	c3                   	ret    
c0018517:	90                   	nop

c0018518 <Mutex::Mutex()>:
c0018518:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001851c:	6a 01                	push   0x1
c001851e:	50                   	push   eax
c001851f:	e8 c6 ff ff ff       	call   c00184ea <Semaphore::Semaphore(int)>
c0018524:	83 c4 08             	add    esp,0x8
c0018527:	90                   	nop
c0018528:	c3                   	ret    
c0018529:	90                   	nop

c001852a <Process::createThread(void (*)(void*), void*, int)>:
c001852a:	55                   	push   ebp
c001852b:	31 c9                	xor    ecx,ecx
c001852d:	57                   	push   edi
c001852e:	56                   	push   esi
c001852f:	53                   	push   ebx
c0018530:	83 ec 1c             	sub    esp,0x1c
c0018533:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018537:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001853e:	89 f2                	mov    edx,esi
c0018540:	31 c0                	xor    eax,eax
c0018542:	66 89 d0             	mov    ax,dx
c0018545:	83 e2 01             	and    edx,0x1
c0018548:	74 14                	je     c001855e <Process::createThread(void (*)(void*), void*, int)+0x34>
c001854a:	d1 f8                	sar    eax,1
c001854c:	41                   	inc    ecx
c001854d:	89 c2                	mov    edx,eax
c001854f:	83 f9 10             	cmp    ecx,0x10
c0018552:	75 ec                	jne    c0018540 <Process::createThread(void (*)(void*), void*, int)+0x16>
c0018554:	83 c4 1c             	add    esp,0x1c
c0018557:	31 c0                	xor    eax,eax
c0018559:	5b                   	pop    ebx
c001855a:	5e                   	pop    esi
c001855b:	5f                   	pop    edi
c001855c:	5d                   	pop    ebp
c001855d:	c3                   	ret    
c001855e:	b8 01 00 00 00       	mov    eax,0x1
c0018563:	d3 e0                	shl    eax,cl
c0018565:	09 c6                	or     esi,eax
c0018567:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001856d:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0018574:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0018577:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001857a:	89 f0                	mov    eax,esi
c001857c:	c1 e0 05             	shl    eax,0x5
c001857f:	01 c6                	add    esi,eax
c0018581:	8d 04 33             	lea    eax,[ebx+esi*1]
c0018584:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001858a:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001858e:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0018594:	89 ca                	mov    edx,ecx
c0018596:	f7 da                	neg    edx
c0018598:	c1 e2 15             	shl    edx,0x15
c001859b:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c00185a1:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00185a7:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c00185ad:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00185b3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00185b7:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c00185bd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00185c1:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00185cb:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00185d1:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00185db:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00185e5:	52                   	push   edx
c00185e6:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c00185ed:	52                   	push   edx
c00185ee:	50                   	push   eax
c00185ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00185f3:	68 68 55 02 c0       	push   0xc0025568
c00185f8:	e8 55 70 00 00       	call   c001f652 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00185fd:	83 c4 10             	add    esp,0x10
c0018600:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018604:	83 c4 1c             	add    esp,0x1c
c0018607:	5b                   	pop    ebx
c0018608:	5e                   	pop    esi
c0018609:	5f                   	pop    edi
c001860a:	5d                   	pop    ebp
c001860b:	c3                   	ret    

c001860c <Process::createUserThread()>:
c001860c:	83 ec 0c             	sub    esp,0xc
c001860f:	68 80 00 00 00       	push   0x80
c0018614:	6a 00                	push   0x0
c0018616:	68 f9 83 01 c0       	push   0xc00183f9
c001861b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001861f:	50                   	push   eax
c0018620:	e8 05 ff ff ff       	call   c001852a <Process::createThread(void (*)(void*), void*, int)>
c0018625:	83 c4 1c             	add    esp,0x1c
c0018628:	c3                   	ret    

c0018629 <setupMultitasking(void (*)())>:
c0018629:	56                   	push   esi
c001862a:	53                   	push   ebx
c001862b:	51                   	push   ecx
c001862c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018630:	eb 10                	jmp    c0018642 <setupMultitasking(void (*)())+0x19>
c0018632:	83 ec 0c             	sub    esp,0xc
c0018635:	68 68 55 02 c0       	push   0xc0025568
c001863a:	e8 65 6f 00 00       	call   c001f5a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001863f:	83 c4 10             	add    esp,0x10
c0018642:	83 ec 0c             	sub    esp,0xc
c0018645:	68 68 55 02 c0       	push   0xc0025568
c001864a:	e8 39 6f 00 00       	call   c001f588 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001864f:	83 c4 10             	add    esp,0x10
c0018652:	84 c0                	test   al,al
c0018654:	74 dc                	je     c0018632 <setupMultitasking(void (*)())+0x9>
c0018656:	83 ec 0c             	sub    esp,0xc
c0018659:	68 3b 07 00 00       	push   0x73b
c001865e:	e8 c1 69 ff ff       	call   c000f024 <operator new(unsigned long)>
c0018663:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001866a:	6a 00                	push   0x0
c001866c:	68 d6 27 02 c0       	push   0xc00227d6
c0018671:	89 c3                	mov    ebx,eax
c0018673:	6a 01                	push   0x1
c0018675:	50                   	push   eax
c0018676:	e8 d1 fb ff ff       	call   c001824c <Process::Process(bool, char const*, Process*, char**)>
c001867b:	83 c4 18             	add    esp,0x18
c001867e:	8b 83 26 05 00 00    	mov    eax,DWORD PTR [ebx+0x526]
c0018684:	89 1d 74 55 02 c0    	mov    DWORD PTR ds:0xc0025574,ebx
c001868a:	50                   	push   eax
c001868b:	68 f8 28 02 c0       	push   0xc00228f8
c0018690:	e8 c4 6a ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018695:	5a                   	pop    edx
c0018696:	8b 8b 26 05 00 00    	mov    ecx,DWORD PTR [ebx+0x526]
c001869c:	51                   	push   ecx
c001869d:	e8 e7 4b ff ff       	call   c000d289 <setActiveTerminal(VgaText*)>
c00186a2:	66 8b 83 24 05 00 00 	mov    ax,WORD PTR [ebx+0x524]
c00186a9:	83 c8 01             	or     eax,0x1
c00186ac:	66 89 83 24 05 00 00 	mov    WORD PTR [ebx+0x524],ax
c00186b3:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c00186b9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00186bc:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c00186c6:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00186cc:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00186d6:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00186e0:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00186e6:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c00186ec:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c00186f6:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c00186fc:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018706:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0018710:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018716:	58                   	pop    eax
c0018717:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001871d:	5a                   	pop    edx
c001871e:	68 d2 27 02 c0       	push   0xc00227d2
c0018723:	50                   	push   eax
c0018724:	e8 7e 7f fe ff       	call   c00006a7 <strcpy>
c0018729:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0018730:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018734:	83 c4 14             	add    esp,0x14
c0018737:	5b                   	pop    ebx
c0018738:	5e                   	pop    esi
c0018739:	e9 d3 7a fe ff       	jmp    c0000211 <switchToThreadASMFirstTime>

c001873e <schedule()>:
c001873e:	a1 48 55 02 c0       	mov    eax,ds:0xc0025548
c0018743:	85 c0                	test   eax,eax
c0018745:	74 0b                	je     c0018752 <schedule()+0x14>
c0018747:	c7 05 44 55 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025544,0x1
c0018751:	c3                   	ret    
c0018752:	53                   	push   ebx
c0018753:	83 ec 14             	sub    esp,0x14
c0018756:	68 68 55 02 c0       	push   0xc0025568
c001875b:	e8 28 6e 00 00       	call   c001f588 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018760:	83 c4 10             	add    esp,0x10
c0018763:	84 c0                	test   al,al
c0018765:	75 38                	jne    c001879f <schedule()+0x61>
c0018767:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001876c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001876f:	4a                   	dec    edx
c0018770:	74 32                	je     c00187a4 <schedule()+0x66>
c0018772:	83 ec 0c             	sub    esp,0xc
c0018775:	68 68 55 02 c0       	push   0xc0025568
c001877a:	e8 01 6e 00 00       	call   c001f580 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001877f:	89 c3                	mov    ebx,eax
c0018781:	c7 04 24 68 55 02 c0 	mov    DWORD PTR [esp],0xc0025568
c0018788:	e8 17 6e 00 00       	call   c001f5a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001878d:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018794:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018797:	e8 f8 fc ff ff       	call   c0018494 <switchToThread(ThreadControlBlock*)>
c001879c:	83 c4 10             	add    esp,0x10
c001879f:	83 c4 08             	add    esp,0x8
c00187a2:	5b                   	pop    ebx
c00187a3:	c3                   	ret    
c00187a4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00187ab:	51                   	push   ecx
c00187ac:	51                   	push   ecx
c00187ad:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00187b3:	53                   	push   ebx
c00187b4:	68 68 55 02 c0       	push   0xc0025568
c00187b9:	e8 94 6e 00 00       	call   c001f652 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00187be:	83 c4 10             	add    esp,0x10
c00187c1:	eb af                	jmp    c0018772 <schedule()+0x34>

c00187c3 <unlockStuff()>:
c00187c3:	a1 48 55 02 c0       	mov    eax,ds:0xc0025548
c00187c8:	48                   	dec    eax
c00187c9:	a3 48 55 02 c0       	mov    ds:0xc0025548,eax
c00187ce:	75 09                	jne    c00187d9 <unlockStuff()+0x16>
c00187d0:	a1 44 55 02 c0       	mov    eax,ds:0xc0025544
c00187d5:	85 c0                	test   eax,eax
c00187d7:	75 05                	jne    c00187de <unlockStuff()+0x1b>
c00187d9:	e9 08 fc ff ff       	jmp    c00183e6 <enableIRQs()>
c00187de:	83 ec 0c             	sub    esp,0xc
c00187e1:	c7 05 44 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025544,0x0
c00187eb:	e8 4e ff ff ff       	call   c001873e <schedule()>
c00187f0:	83 c4 0c             	add    esp,0xc
c00187f3:	e9 ee fb ff ff       	jmp    c00183e6 <enableIRQs()>

c00187f8 <Semaphore::tryAcquire()>:
c00187f8:	83 ec 0c             	sub    esp,0xc
c00187fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00187ff:	e8 18 fc ff ff       	call   c001841c <lockStuff()>
c0018804:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018807:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018809:	7c 0b                	jl     c0018816 <Semaphore::tryAcquire()+0x1e>
c001880b:	e8 b3 ff ff ff       	call   c00187c3 <unlockStuff()>
c0018810:	31 c0                	xor    eax,eax
c0018812:	83 c4 0c             	add    esp,0xc
c0018815:	c3                   	ret    
c0018816:	40                   	inc    eax
c0018817:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c001881a:	e8 a4 ff ff ff       	call   c00187c3 <unlockStuff()>
c001881f:	b0 01                	mov    al,0x1
c0018821:	83 c4 0c             	add    esp,0xc
c0018824:	c3                   	ret    
c0018825:	90                   	nop

c0018826 <Semaphore::assertLocked(char const*)>:
c0018826:	83 ec 0c             	sub    esp,0xc
c0018829:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001882d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018831:	e8 e6 fb ff ff       	call   c001841c <lockStuff()>
c0018836:	8b 02                	mov    eax,DWORD PTR [edx]
c0018838:	39 42 0c             	cmp    DWORD PTR [edx+0xc],eax
c001883b:	7c 05                	jl     c0018842 <Semaphore::assertLocked(char const*)+0x1c>
c001883d:	83 c4 0c             	add    esp,0xc
c0018840:	eb 81                	jmp    c00187c3 <unlockStuff()>
c0018842:	83 ec 0c             	sub    esp,0xc
c0018845:	51                   	push   ecx
c0018846:	e8 a1 cb ff ff       	call   c00153ec <Krnl::panic(char const*)>
c001884b:	83 c4 10             	add    esp,0x10
c001884e:	83 c4 0c             	add    esp,0xc
c0018851:	e9 6d ff ff ff       	jmp    c00187c3 <unlockStuff()>

c0018856 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018856:	83 ec 0c             	sub    esp,0xc
c0018859:	e8 82 fb ff ff       	call   c00183e0 <getIRQNestingLevel()>
c001885e:	52                   	push   edx
c001885f:	52                   	push   edx
c0018860:	50                   	push   eax
c0018861:	68 2c 29 02 c0       	push   0xc002292c
c0018866:	e8 ee 68 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001886b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018870:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018874:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018877:	e8 c2 fe ff ff       	call   c001873e <schedule()>
c001887c:	e8 76 fb ff ff       	call   c00183f7 <unlockScheduler()>
c0018881:	e8 5a fb ff ff       	call   c00183e0 <getIRQNestingLevel()>
c0018886:	59                   	pop    ecx
c0018887:	5a                   	pop    edx
c0018888:	50                   	push   eax
c0018889:	68 60 29 02 c0       	push   0xc0022960
c001888e:	e8 c6 68 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018893:	83 c4 1c             	add    esp,0x1c
c0018896:	c3                   	ret    

c0018897 <blockTask(TaskState)>:
c0018897:	83 ec 0c             	sub    esp,0xc
c001889a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001889e:	e8 52 fb ff ff       	call   c00183f5 <lockScheduler()>
c00188a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188a8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00188ab:	e8 8e fe ff ff       	call   c001873e <schedule()>
c00188b0:	83 c4 0c             	add    esp,0xc
c00188b3:	e9 3f fb ff ff       	jmp    c00183f7 <unlockScheduler()>

c00188b8 <waitTask(int, int*, int)>:
c00188b8:	83 ec 18             	sub    esp,0x18
c00188bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00188c4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00188c7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00188cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188d0:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c00188d3:	6a 07                	push   0x7
c00188d5:	e8 bd ff ff ff       	call   c0018897 <blockTask(TaskState)>
c00188da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188df:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c00188e2:	83 c4 10             	add    esp,0x10
c00188e5:	85 d2                	test   edx,edx
c00188e7:	74 0a                	je     c00188f3 <waitTask(int, int*, int)+0x3b>
c00188e9:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c00188ec:	89 02                	mov    DWORD PTR [edx],eax
c00188ee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00188f3:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c00188f6:	83 c4 0c             	add    esp,0xc
c00188f9:	c3                   	ret    

c00188fa <nanoSleepUntil(unsigned long long)>:
c00188fa:	53                   	push   ebx
c00188fb:	83 ec 08             	sub    esp,0x8
c00188fe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018902:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018906:	3b 0d 90 47 02 c0    	cmp    ecx,DWORD PTR ds:0xc0024790
c001890c:	89 d8                	mov    eax,ebx
c001890e:	1b 05 94 47 02 c0    	sbb    eax,DWORD PTR ds:0xc0024794
c0018914:	73 05                	jae    c001891b <nanoSleepUntil(unsigned long long)+0x21>
c0018916:	83 c4 08             	add    esp,0x8
c0018919:	5b                   	pop    ebx
c001891a:	c3                   	ret    
c001891b:	e8 fc fa ff ff       	call   c001841c <lockStuff()>
c0018920:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018925:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0018928:	89 58 30             	mov    DWORD PTR [eax+0x30],ebx
c001892b:	51                   	push   ecx
c001892c:	51                   	push   ecx
c001892d:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018933:	53                   	push   ebx
c0018934:	68 5c 55 02 c0       	push   0xc002555c
c0018939:	e8 14 6d 00 00       	call   c001f652 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001893e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018945:	e8 4d ff ff ff       	call   c0018897 <blockTask(TaskState)>
c001894a:	83 c4 18             	add    esp,0x18
c001894d:	5b                   	pop    ebx
c001894e:	e9 70 fe ff ff       	jmp    c00187c3 <unlockStuff()>

c0018953 <nanoSleep(unsigned long long)>:
c0018953:	a1 90 47 02 c0       	mov    eax,ds:0xc0024790
c0018958:	8b 15 94 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024794
c001895e:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018962:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0018966:	eb 92                	jmp    c00188fa <nanoSleepUntil(unsigned long long)>

c0018968 <sleep(unsigned long long)>:
c0018968:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001896d:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0018975:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0018979:	01 ca                	add    edx,ecx
c001897b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001897f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018983:	eb ce                	jmp    c0018953 <nanoSleep(unsigned long long)>
c0018985:	90                   	nop

c0018986 <Semaphore::acquire()>:
c0018986:	83 ec 0c             	sub    esp,0xc
c0018989:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001898d:	e8 8a fa ff ff       	call   c001841c <lockStuff()>
c0018992:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018995:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018997:	7d 0c                	jge    c00189a5 <Semaphore::acquire()+0x1f>
c0018999:	40                   	inc    eax
c001899a:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c001899d:	83 c4 0c             	add    esp,0xc
c00189a0:	e9 1e fe ff ff       	jmp    c00187c3 <unlockStuff()>
c00189a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00189aa:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00189b1:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00189b4:	85 c0                	test   eax,eax
c00189b6:	74 29                	je     c00189e1 <Semaphore::acquire()+0x5b>
c00189b8:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c00189bb:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00189c1:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c00189c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00189c9:	83 ec 0c             	sub    esp,0xc
c00189cc:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00189cf:	6a 05                	push   0x5
c00189d1:	e8 c1 fe ff ff       	call   c0018897 <blockTask(TaskState)>
c00189d6:	83 c4 10             	add    esp,0x10
c00189d9:	83 c4 0c             	add    esp,0xc
c00189dc:	e9 e2 fd ff ff       	jmp    c00187c3 <unlockStuff()>
c00189e1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00189e6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00189e9:	eb d9                	jmp    c00189c4 <Semaphore::acquire()+0x3e>

c00189eb <taskReturned>:
c00189eb:	83 ec 18             	sub    esp,0x18
c00189ee:	68 94 29 02 c0       	push   0xc0022994
c00189f3:	e8 f4 c9 ff ff       	call   c00153ec <Krnl::panic(char const*)>
c00189f8:	83 c4 10             	add    esp,0x10
c00189fb:	83 ec 0c             	sub    esp,0xc
c00189fe:	6a 02                	push   0x2
c0018a00:	e8 92 fe ff ff       	call   c0018897 <blockTask(TaskState)>
c0018a05:	e8 eb f9 ff ff       	call   c00183f5 <lockScheduler()>
c0018a0a:	e8 2f fd ff ff       	call   c001873e <schedule()>
c0018a0f:	e8 e3 f9 ff ff       	call   c00183f7 <unlockScheduler()>
c0018a14:	83 c4 10             	add    esp,0x10
c0018a17:	eb e2                	jmp    c00189fb <taskReturned+0x10>

c0018a19 <unblockTask(ThreadControlBlock*)>:
c0018a19:	53                   	push   ebx
c0018a1a:	83 ec 08             	sub    esp,0x8
c0018a1d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018a21:	e8 cf f9 ff ff       	call   c00183f5 <lockScheduler()>
c0018a26:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018a29:	85 c0                	test   eax,eax
c0018a2b:	74 5b                	je     c0018a88 <unblockTask(ThreadControlBlock*)+0x6f>
c0018a2d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0018a30:	48                   	dec    eax
c0018a31:	74 30                	je     c0018a63 <unblockTask(ThreadControlBlock*)+0x4a>
c0018a33:	83 ec 0c             	sub    esp,0xc
c0018a36:	68 68 55 02 c0       	push   0xc0025568
c0018a3b:	e8 40 6b 00 00       	call   c001f580 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018a40:	83 c4 10             	add    esp,0x10
c0018a43:	85 c0                	test   eax,eax
c0018a45:	75 16                	jne    c0018a5d <unblockTask(ThreadControlBlock*)+0x44>
c0018a47:	eb 64                	jmp    c0018aad <unblockTask(ThreadControlBlock*)+0x94>
c0018a49:	52                   	push   edx
c0018a4a:	52                   	push   edx
c0018a4b:	50                   	push   eax
c0018a4c:	68 68 55 02 c0       	push   0xc0025568
c0018a51:	e8 3a 6e 00 00       	call   c001f890 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0018a56:	83 c4 10             	add    esp,0x10
c0018a59:	85 c0                	test   eax,eax
c0018a5b:	74 50                	je     c0018aad <unblockTask(ThreadControlBlock*)+0x94>
c0018a5d:	39 c3                	cmp    ebx,eax
c0018a5f:	75 e8                	jne    c0018a49 <unblockTask(ThreadControlBlock*)+0x30>
c0018a61:	eb 1c                	jmp    c0018a7f <unblockTask(ThreadControlBlock*)+0x66>
c0018a63:	83 ec 0c             	sub    esp,0xc
c0018a66:	68 84 2a 02 c0       	push   0xc0022a84
c0018a6b:	e8 e9 66 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018a70:	c7 04 24 10 2a 02 c0 	mov    DWORD PTR [esp],0xc0022a10
c0018a77:	e8 dd 66 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018a7c:	83 c4 10             	add    esp,0x10
c0018a7f:	83 c4 08             	add    esp,0x8
c0018a82:	5b                   	pop    ebx
c0018a83:	e9 6f f9 ff ff       	jmp    c00183f7 <unlockScheduler()>
c0018a88:	83 ec 0c             	sub    esp,0xc
c0018a8b:	68 c8 29 02 c0       	push   0xc00229c8
c0018a90:	e8 c4 66 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018a95:	c7 04 24 10 2a 02 c0 	mov    DWORD PTR [esp],0xc0022a10
c0018a9c:	e8 b8 66 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018aa1:	83 c4 10             	add    esp,0x10
c0018aa4:	83 c4 08             	add    esp,0x8
c0018aa7:	5b                   	pop    ebx
c0018aa8:	e9 4a f9 ff ff       	jmp    c00183f7 <unlockScheduler()>
c0018aad:	50                   	push   eax
c0018aae:	50                   	push   eax
c0018aaf:	53                   	push   ebx
c0018ab0:	68 68 55 02 c0       	push   0xc0025568
c0018ab5:	e8 98 6b 00 00       	call   c001f652 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018aba:	83 c4 10             	add    esp,0x10
c0018abd:	83 c4 08             	add    esp,0x8
c0018ac0:	5b                   	pop    ebx
c0018ac1:	e9 31 f9 ff ff       	jmp    c00183f7 <unlockScheduler()>

c0018ac6 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0018ac6:	55                   	push   ebp
c0018ac7:	57                   	push   edi
c0018ac8:	56                   	push   esi
c0018ac9:	53                   	push   ebx
c0018aca:	83 ec 1c             	sub    esp,0x1c
c0018acd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018ad1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018ad4:	8b a8 36 05 00 00    	mov    ebp,DWORD PTR [eax+0x536]
c0018ada:	85 ed                	test   ebp,ebp
c0018adc:	7e 21                	jle    c0018aff <cleanupTerminatedTask(ThreadControlBlock*)+0x39>
c0018ade:	31 f6                	xor    esi,esi
c0018ae0:	83 ec 0c             	sub    esp,0xc
c0018ae3:	8b bc b0 3a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x53a]
c0018aea:	46                   	inc    esi
c0018aeb:	57                   	push   edi
c0018aec:	e8 46 34 ff ff       	call   c000bf37 <free>
c0018af1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018af4:	83 c4 10             	add    esp,0x10
c0018af7:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c0018afd:	7f e1                	jg     c0018ae0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c0018aff:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018b09:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0018b0e:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0018b11:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0018b14:	d3 c0                	rol    eax,cl
c0018b16:	66 8b 8a 24 05 00 00 	mov    cx,WORD PTR [edx+0x524]
c0018b1d:	21 c1                	and    ecx,eax
c0018b1f:	66 89 8a 24 05 00 00 	mov    WORD PTR [edx+0x524],cx
c0018b26:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018b29:	89 f7                	mov    edi,esi
c0018b2b:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c0018b33:	0f 85 4f 01 00 00    	jne    c0018c88 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c2>
c0018b39:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018b3f:	85 c0                	test   eax,eax
c0018b41:	0f 84 aa 00 00 00    	je     c0018bf1 <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c0018b47:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0018b4a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0018b4e:	31 c9                	xor    ecx,ecx
c0018b50:	eb 10                	jmp    c0018b62 <cleanupTerminatedTask(ThreadControlBlock*)+0x9c>
c0018b52:	41                   	inc    ecx
c0018b53:	83 f9 10             	cmp    ecx,0x10
c0018b56:	0f 84 95 00 00 00    	je     c0018bf1 <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c0018b5c:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018b62:	31 d2                	xor    edx,edx
c0018b64:	66 8b 90 24 05 00 00 	mov    dx,WORD PTR [eax+0x524]
c0018b6b:	d3 fa                	sar    edx,cl
c0018b6d:	83 e2 01             	and    edx,0x1
c0018b70:	74 e0                	je     c0018b52 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0018b72:	8d 14 49             	lea    edx,[ecx+ecx*2]
c0018b75:	89 d5                	mov    ebp,edx
c0018b77:	c1 e5 05             	shl    ebp,0x5
c0018b7a:	01 ea                	add    edx,ebp
c0018b7c:	01 d0                	add    eax,edx
c0018b7e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0018b84:	83 fd 07             	cmp    ebp,0x7
c0018b87:	75 c9                	jne    c0018b52 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0018b89:	05 40 02 00 00       	add    eax,0x240
c0018b8e:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0018b91:	83 fd ff             	cmp    ebp,0xffffffff
c0018b94:	0f 8c 07 01 00 00    	jl     c0018ca1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1db>
c0018b9a:	0f 84 b4 01 00 00    	je     c0018d54 <cleanupTerminatedTask(ThreadControlBlock*)+0x28e>
c0018ba0:	85 ed                	test   ebp,ebp
c0018ba2:	0f 84 9b 01 00 00    	je     c0018d43 <cleanupTerminatedTask(ThreadControlBlock*)+0x27d>
c0018ba8:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0018baa:	75 a6                	jne    c0018b52 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0018bac:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0018bb2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018bb6:	01 d0                	add    eax,edx
c0018bb8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0018bbc:	83 ec 0c             	sub    esp,0xc
c0018bbf:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0018bc5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018bc8:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018bce:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0018bd5:	50                   	push   eax
c0018bd6:	e8 3e fe ff ff       	call   c0018a19 <unblockTask(ThreadControlBlock*)>
c0018bdb:	83 c4 10             	add    esp,0x10
c0018bde:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018be2:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018be5:	41                   	inc    ecx
c0018be6:	89 f7                	mov    edi,esi
c0018be8:	83 f9 10             	cmp    ecx,0x10
c0018beb:	0f 85 6b ff ff ff    	jne    c0018b5c <cleanupTerminatedTask(ThreadControlBlock*)+0x96>
c0018bf1:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c0018bf7:	85 c0                	test   eax,eax
c0018bf9:	74 5d                	je     c0018c58 <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c0018bfb:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c0018c01:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c0018c07:	74 4f                	je     c0018c58 <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c0018c09:	83 ec 0c             	sub    esp,0xc
c0018c0c:	68 68 55 02 c0       	push   0xc0025568
c0018c11:	e8 6a 69 00 00       	call   c001f580 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018c16:	c7 04 24 68 55 02 c0 	mov    DWORD PTR [esp],0xc0025568
c0018c1d:	89 c7                	mov    edi,eax
c0018c1f:	e8 64 69 00 00       	call   c001f588 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018c24:	83 c4 10             	add    esp,0x10
c0018c27:	84 c0                	test   al,al
c0018c29:	0f 84 e2 00 00 00    	je     c0018d11 <cleanupTerminatedTask(ThreadControlBlock*)+0x24b>
c0018c2f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018c32:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018c38:	85 d2                	test   edx,edx
c0018c3a:	74 0f                	je     c0018c4b <cleanupTerminatedTask(ThreadControlBlock*)+0x185>
c0018c3c:	83 ec 0c             	sub    esp,0xc
c0018c3f:	8b 02                	mov    eax,DWORD PTR [edx]
c0018c41:	52                   	push   edx
c0018c42:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018c45:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018c48:	83 c4 10             	add    esp,0x10
c0018c4b:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c0018c55:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0018c58:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c0018c5e:	85 db                	test   ebx,ebx
c0018c60:	74 16                	je     c0018c78 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b2>
c0018c62:	83 ec 0c             	sub    esp,0xc
c0018c65:	53                   	push   ebx
c0018c66:	e8 33 5a ff ff       	call   c000e69e <VAS::~VAS()>
c0018c6b:	5a                   	pop    edx
c0018c6c:	59                   	pop    ecx
c0018c6d:	6a 10                	push   0x10
c0018c6f:	53                   	push   ebx
c0018c70:	e8 be 63 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0018c75:	83 c4 10             	add    esp,0x10
c0018c78:	83 ec 0c             	sub    esp,0xc
c0018c7b:	68 dd 27 02 c0       	push   0xc00227dd
c0018c80:	e8 d4 64 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018c85:	83 c4 10             	add    esp,0x10
c0018c88:	50                   	push   eax
c0018c89:	50                   	push   eax
c0018c8a:	68 3b 07 00 00       	push   0x73b
c0018c8f:	68 eb 27 02 c0       	push   0xc00227eb
c0018c94:	e8 c0 64 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018c99:	83 c4 2c             	add    esp,0x2c
c0018c9c:	5b                   	pop    ebx
c0018c9d:	5e                   	pop    esi
c0018c9e:	5f                   	pop    edi
c0018c9f:	5d                   	pop    ebp
c0018ca0:	c3                   	ret    
c0018ca1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018ca5:	83 ec 0c             	sub    esp,0xc
c0018ca8:	68 c8 2a 02 c0       	push   0xc0022ac8
c0018cad:	e8 3a c7 ff ff       	call   c00153ec <Krnl::panic(char const*)>
c0018cb2:	83 c4 10             	add    esp,0x10
c0018cb5:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0018cb8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018cbc:	89 f7                	mov    edi,esi
c0018cbe:	e9 8f fe ff ff       	jmp    c0018b52 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0018cc3:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018cc9:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c0018ccf:	75 1c                	jne    c0018ced <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0018cd1:	83 ec 0c             	sub    esp,0xc
c0018cd4:	68 30 2b 02 c0       	push   0xc0022b30
c0018cd9:	e8 7b 64 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018cde:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018ce5:	e8 ad fb ff ff       	call   c0018897 <blockTask(TaskState)>
c0018cea:	83 c4 10             	add    esp,0x10
c0018ced:	55                   	push   ebp
c0018cee:	55                   	push   ebp
c0018cef:	56                   	push   esi
c0018cf0:	68 68 55 02 c0       	push   0xc0025568
c0018cf5:	e8 58 69 00 00       	call   c001f652 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018cfa:	c7 04 24 68 55 02 c0 	mov    DWORD PTR [esp],0xc0025568
c0018d01:	e8 7a 68 00 00       	call   c001f580 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018d06:	83 c4 10             	add    esp,0x10
c0018d09:	39 f8                	cmp    eax,edi
c0018d0b:	0f 84 1e ff ff ff    	je     c0018c2f <cleanupTerminatedTask(ThreadControlBlock*)+0x169>
c0018d11:	83 ec 0c             	sub    esp,0xc
c0018d14:	68 68 55 02 c0       	push   0xc0025568
c0018d19:	e8 62 68 00 00       	call   c001f580 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018d1e:	89 c6                	mov    esi,eax
c0018d20:	c7 04 24 68 55 02 c0 	mov    DWORD PTR [esp],0xc0025568
c0018d27:	e8 78 68 00 00       	call   c001f5a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018d2c:	83 c4 10             	add    esp,0x10
c0018d2f:	39 f3                	cmp    ebx,esi
c0018d31:	74 ba                	je     c0018ced <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0018d33:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c0018d36:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018d39:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c0018d3f:	75 ac                	jne    c0018ced <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0018d41:	eb 80                	jmp    c0018cc3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1fd>
c0018d43:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018d47:	83 ec 0c             	sub    esp,0xc
c0018d4a:	68 fc 2a 02 c0       	push   0xc0022afc
c0018d4f:	e9 59 ff ff ff       	jmp    c0018cad <cleanupTerminatedTask(ThreadControlBlock*)+0x1e7>
c0018d54:	8b 36                	mov    esi,DWORD PTR [esi]
c0018d56:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018d5a:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0018d5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018d60:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c0018d66:	01 d7                	add    edi,edx
c0018d68:	89 f8                	mov    eax,edi
c0018d6a:	e9 49 fe ff ff       	jmp    c0018bb8 <cleanupTerminatedTask(ThreadControlBlock*)+0xf2>

c0018d6f <cleanerTaskFunction(void*)>:
c0018d6f:	53                   	push   ebx
c0018d70:	83 ec 08             	sub    esp,0x8
c0018d73:	e8 7f f6 ff ff       	call   c00183f7 <unlockScheduler()>
c0018d78:	e8 78 f6 ff ff       	call   c00183f5 <lockScheduler()>
c0018d7d:	80 3d 2c 55 02 c0 00 	cmp    BYTE PTR ds:0xc002552c,0x0
c0018d84:	0f 85 8e 00 00 00    	jne    c0018e18 <cleanerTaskFunction(void*)+0xa9>
c0018d8a:	83 ec 0c             	sub    esp,0xc
c0018d8d:	6a 02                	push   0x2
c0018d8f:	e8 c2 fa ff ff       	call   c0018856 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018d94:	83 c4 10             	add    esp,0x10
c0018d97:	c6 05 2c 55 02 c0 00 	mov    BYTE PTR ds:0xc002552c,0x0
c0018d9e:	e8 79 f6 ff ff       	call   c001841c <lockStuff()>
c0018da3:	e8 4d f6 ff ff       	call   c00183f5 <lockScheduler()>
c0018da8:	83 ec 0c             	sub    esp,0xc
c0018dab:	68 50 55 02 c0       	push   0xc0025550
c0018db0:	e8 d3 67 00 00       	call   c001f588 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018db5:	83 c4 10             	add    esp,0x10
c0018db8:	84 c0                	test   al,al
c0018dba:	75 40                	jne    c0018dfc <cleanerTaskFunction(void*)+0x8d>
c0018dbc:	83 ec 0c             	sub    esp,0xc
c0018dbf:	68 50 55 02 c0       	push   0xc0025550
c0018dc4:	e8 b7 67 00 00       	call   c001f580 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018dc9:	89 c3                	mov    ebx,eax
c0018dcb:	c7 04 24 50 55 02 c0 	mov    DWORD PTR [esp],0xc0025550
c0018dd2:	e8 cd 67 00 00       	call   c001f5a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018dd7:	c7 04 24 01 28 02 c0 	mov    DWORD PTR [esp],0xc0022801
c0018dde:	e8 76 63 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018de3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018de6:	e8 db fc ff ff       	call   c0018ac6 <cleanupTerminatedTask(ThreadControlBlock*)>
c0018deb:	c7 04 24 1a 28 02 c0 	mov    DWORD PTR [esp],0xc002281a
c0018df2:	e8 62 63 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018df7:	83 c4 10             	add    esp,0x10
c0018dfa:	eb ac                	jmp    c0018da8 <cleanerTaskFunction(void*)+0x39>
c0018dfc:	e8 f6 f5 ff ff       	call   c00183f7 <unlockScheduler()>
c0018e01:	e8 bd f9 ff ff       	call   c00187c3 <unlockStuff()>
c0018e06:	e8 ea f5 ff ff       	call   c00183f5 <lockScheduler()>
c0018e0b:	80 3d 2c 55 02 c0 00 	cmp    BYTE PTR ds:0xc002552c,0x0
c0018e12:	0f 84 72 ff ff ff    	je     c0018d8a <cleanerTaskFunction(void*)+0x1b>
c0018e18:	e8 da f5 ff ff       	call   c00183f7 <unlockScheduler()>
c0018e1d:	e9 75 ff ff ff       	jmp    c0018d97 <cleanerTaskFunction(void*)+0x28>

c0018e22 <terminateTask(int)>:
c0018e22:	83 ec 14             	sub    esp,0x14
c0018e25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e2a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018e2d:	83 c0 0c             	add    eax,0xc
c0018e30:	50                   	push   eax
c0018e31:	68 58 2b 02 c0       	push   0xc0022b58
c0018e36:	e8 1e 63 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018e3b:	e8 dc f5 ff ff       	call   c001841c <lockStuff()>
c0018e40:	e8 b0 f5 ff ff       	call   c00183f5 <lockScheduler()>
c0018e45:	c7 04 24 2d 28 02 c0 	mov    DWORD PTR [esp],0xc002282d
c0018e4c:	e8 08 63 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018e51:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e56:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018e5a:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0018e5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e62:	59                   	pop    ecx
c0018e63:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0018e66:	5a                   	pop    edx
c0018e67:	50                   	push   eax
c0018e68:	68 50 55 02 c0       	push   0xc0025550
c0018e6d:	e8 e0 67 00 00       	call   c001f652 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018e72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018e77:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0018e7e:	c7 04 24 47 28 02 c0 	mov    DWORD PTR [esp],0xc0022847
c0018e85:	e8 cf 62 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018e8a:	8b 0d 28 55 02 c0    	mov    ecx,DWORD PTR ds:0xc0025528
c0018e90:	83 c4 10             	add    esp,0x10
c0018e93:	85 c9                	test   ecx,ecx
c0018e95:	74 5b                	je     c0018ef2 <terminateTask(int)+0xd0>
c0018e97:	83 ec 0c             	sub    esp,0xc
c0018e9a:	68 61 28 02 c0       	push   0xc0022861
c0018e9f:	e8 b5 62 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018ea4:	58                   	pop    eax
c0018ea5:	8b 15 28 55 02 c0    	mov    edx,DWORD PTR ds:0xc0025528
c0018eab:	52                   	push   edx
c0018eac:	c6 05 2c 55 02 c0 01 	mov    BYTE PTR ds:0xc002552c,0x1
c0018eb3:	e8 61 fb ff ff       	call   c0018a19 <unblockTask(ThreadControlBlock*)>
c0018eb8:	c7 04 24 7b 28 02 c0 	mov    DWORD PTR [esp],0xc002287b
c0018ebf:	e8 95 62 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018ec4:	83 c4 10             	add    esp,0x10
c0018ec7:	e8 2b f5 ff ff       	call   c00183f7 <unlockScheduler()>
c0018ecc:	e8 f2 f8 ff ff       	call   c00187c3 <unlockStuff()>
c0018ed1:	83 ec 0c             	sub    esp,0xc
c0018ed4:	68 b3 28 02 c0       	push   0xc00228b3
c0018ed9:	e8 7b 62 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018ede:	83 c4 10             	add    esp,0x10
c0018ee1:	e8 0f f5 ff ff       	call   c00183f5 <lockScheduler()>
c0018ee6:	e8 53 f8 ff ff       	call   c001873e <schedule()>
c0018eeb:	e8 07 f5 ff ff       	call   c00183f7 <unlockScheduler()>
c0018ef0:	eb ef                	jmp    c0018ee1 <terminateTask(int)+0xbf>
c0018ef2:	83 ec 0c             	sub    esp,0xc
c0018ef5:	68 95 28 02 c0       	push   0xc0022895
c0018efa:	e8 5a 62 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0018eff:	83 c4 10             	add    esp,0x10
c0018f02:	eb c3                	jmp    c0018ec7 <terminateTask(int)+0xa5>

c0018f04 <Thr::terminateFromIRQ(int)>:
c0018f04:	83 ec 18             	sub    esp,0x18
c0018f07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018f0b:	50                   	push   eax
c0018f0c:	e8 11 ff ff ff       	call   c0018e22 <terminateTask(int)>
c0018f11:	90                   	nop

c0018f12 <Semaphore::release()>:
c0018f12:	83 ec 0c             	sub    esp,0xc
c0018f15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018f19:	e8 fe f4 ff ff       	call   c001841c <lockStuff()>
c0018f1e:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0018f21:	85 c0                	test   eax,eax
c0018f23:	74 1a                	je     c0018f3f <Semaphore::release()+0x2d>
c0018f25:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0018f28:	83 ec 0c             	sub    esp,0xc
c0018f2b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0018f2e:	50                   	push   eax
c0018f2f:	e8 e5 fa ff ff       	call   c0018a19 <unblockTask(ThreadControlBlock*)>
c0018f34:	83 c4 10             	add    esp,0x10
c0018f37:	83 c4 0c             	add    esp,0xc
c0018f3a:	e9 84 f8 ff ff       	jmp    c00187c3 <unlockStuff()>
c0018f3f:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018f42:	48                   	dec    eax
c0018f43:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018f46:	83 c4 0c             	add    esp,0xc
c0018f49:	e9 75 f8 ff ff       	jmp    c00187c3 <unlockStuff()>

c0018f4e <__static_initialization_and_destruction_0(int, int)>:
c0018f4e:	83 ec 0c             	sub    esp,0xc
c0018f51:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0018f56:	0f 85 88 00 00 00    	jne    c0018fe4 <__static_initialization_and_destruction_0(int, int)+0x96>
c0018f5c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0018f64:	75 7e                	jne    c0018fe4 <__static_initialization_and_destruction_0(int, int)+0x96>
c0018f66:	83 ec 0c             	sub    esp,0xc
c0018f69:	68 68 55 02 c0       	push   0xc0025568
c0018f6e:	e8 c5 68 00 00       	call   c001f838 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018f73:	83 c4 10             	add    esp,0x10
c0018f76:	83 ec 04             	sub    esp,0x4
c0018f79:	68 3c 35 02 c0       	push   0xc002353c
c0018f7e:	68 68 55 02 c0       	push   0xc0025568
c0018f83:	68 f8 f7 01 c0       	push   0xc001f7f8
c0018f88:	e8 22 60 ff ff       	call   c000efaf <__cxa_atexit>
c0018f8d:	83 c4 10             	add    esp,0x10
c0018f90:	83 ec 0c             	sub    esp,0xc
c0018f93:	68 5c 55 02 c0       	push   0xc002555c
c0018f98:	e8 9b 68 00 00       	call   c001f838 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018f9d:	83 c4 10             	add    esp,0x10
c0018fa0:	83 ec 04             	sub    esp,0x4
c0018fa3:	68 3c 35 02 c0       	push   0xc002353c
c0018fa8:	68 5c 55 02 c0       	push   0xc002555c
c0018fad:	68 f8 f7 01 c0       	push   0xc001f7f8
c0018fb2:	e8 f8 5f ff ff       	call   c000efaf <__cxa_atexit>
c0018fb7:	83 c4 10             	add    esp,0x10
c0018fba:	83 ec 0c             	sub    esp,0xc
c0018fbd:	68 50 55 02 c0       	push   0xc0025550
c0018fc2:	e8 71 68 00 00       	call   c001f838 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018fc7:	83 c4 10             	add    esp,0x10
c0018fca:	83 ec 04             	sub    esp,0x4
c0018fcd:	68 3c 35 02 c0       	push   0xc002353c
c0018fd2:	68 50 55 02 c0       	push   0xc0025550
c0018fd7:	68 f8 f7 01 c0       	push   0xc001f7f8
c0018fdc:	e8 ce 5f ff ff       	call   c000efaf <__cxa_atexit>
c0018fe1:	83 c4 10             	add    esp,0x10
c0018fe4:	90                   	nop
c0018fe5:	83 c4 0c             	add    esp,0xc
c0018fe8:	c3                   	ret    

c0018fe9 <_GLOBAL__sub_I_kernelProcess>:
c0018fe9:	83 ec 0c             	sub    esp,0xc
c0018fec:	83 ec 08             	sub    esp,0x8
c0018fef:	68 ff ff 00 00       	push   0xffff
c0018ff4:	6a 01                	push   0x1
c0018ff6:	e8 53 ff ff ff       	call   c0018f4e <__static_initialization_and_destruction_0(int, int)>
c0018ffb:	83 c4 10             	add    esp,0x10
c0018ffe:	83 c4 0c             	add    esp,0xc
c0019001:	c3                   	ret    

c0019002 <Vm::vm8086EntryPoint(void*)>:
c0019002:	83 ec 0c             	sub    esp,0xc
c0019005:	e8 ed f3 ff ff       	call   c00183f7 <unlockScheduler()>
c001900a:	fb                   	sti    
c001900b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019010:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0019014:	52                   	push   edx
c0019015:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0019019:	52                   	push   edx
c001901a:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001901e:	52                   	push   edx
c001901f:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0019023:	50                   	push   eax
c0019024:	e8 8c 71 fe ff       	call   c00001b5 <goToVM86>
c0019029:	83 c4 1c             	add    esp,0x1c
c001902c:	c3                   	ret    

c001902d <Vm::inbv(unsigned short)>:
c001902d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019031:	ec                   	in     al,dx
c0019032:	c3                   	ret    

c0019033 <Vm::outbv(unsigned short, unsigned char)>:
c0019033:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019037:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001903b:	ee                   	out    dx,al
c001903c:	c3                   	ret    

c001903d <Vm::realToLinear(unsigned short, unsigned short)>:
c001903d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019042:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019047:	c1 e0 04             	shl    eax,0x4
c001904a:	01 d0                	add    eax,edx
c001904c:	c3                   	ret    

c001904d <Vm::getSegment(unsigned int)>:
c001904d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019051:	c1 e8 10             	shr    eax,0x10
c0019054:	c3                   	ret    

c0019055 <Vm::getOffset(unsigned int)>:
c0019055:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019059:	c3                   	ret    

c001905a <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001905a:	55                   	push   ebp
c001905b:	57                   	push   edi
c001905c:	56                   	push   esi
c001905d:	53                   	push   ebx
c001905e:	83 ec 2c             	sub    esp,0x2c
c0019061:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c0019065:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0019069:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001906d:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019071:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019075:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0019079:	e8 77 f3 ff ff       	call   c00183f5 <lockScheduler()>
c001907e:	68 80 00 00 00       	push   0x80
c0019083:	6a 00                	push   0x0
c0019085:	68 02 90 01 c0       	push   0xc0019002
c001908a:	55                   	push   ebp
c001908b:	e8 9a f4 ff ff       	call   c001852a <Process::createThread(void (*)(void*), void*, int)>
c0019090:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019094:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0019098:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001909c:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c00190a0:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c00190a4:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00190a8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00190af:	e8 70 5f ff ff       	call   c000f024 <operator new(unsigned long)>
c00190b4:	83 c4 0c             	add    esp,0xc
c00190b7:	55                   	push   ebp
c00190b8:	89 c3                	mov    ebx,eax
c00190ba:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00190be:	50                   	push   eax
c00190bf:	e8 cc 65 ff ff       	call   c000f690 <File::File(char const*, Process*)>
c00190c4:	83 c4 0c             	add    esp,0xc
c00190c7:	8d 44 24 17          	lea    eax,[esp+0x17]
c00190cb:	50                   	push   eax
c00190cc:	8d 44 24 20          	lea    eax,[esp+0x20]
c00190d0:	50                   	push   eax
c00190d1:	53                   	push   ebx
c00190d2:	e8 c9 68 ff ff       	call   c000f9a0 <File::stat(unsigned long long*, bool*)>
c00190d7:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c00190db:	83 c4 10             	add    esp,0x10
c00190de:	84 d2                	test   dl,dl
c00190e0:	74 1c                	je     c00190fe <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c00190e2:	83 ec 0c             	sub    esp,0xc
c00190e5:	68 77 2b 02 c0       	push   0xc0022b77
c00190ea:	e8 fd c2 ff ff       	call   c00153ec <Krnl::panic(char const*)>
c00190ef:	e8 03 f3 ff ff       	call   c00183f7 <unlockScheduler()>
c00190f4:	83 c4 10             	add    esp,0x10
c00190f7:	31 d2                	xor    edx,edx
c00190f9:	e9 81 00 00 00       	jmp    c001917f <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c00190fe:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019102:	51                   	push   ecx
c0019103:	51                   	push   ecx
c0019104:	6a 01                	push   0x1
c0019106:	53                   	push   ebx
c0019107:	e8 e8 65 ff ff       	call   c000f6f4 <File::open(FileOpenMode)>
c001910c:	83 c4 10             	add    esp,0x10
c001910f:	85 c0                	test   eax,eax
c0019111:	74 1b                	je     c001912e <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0019113:	83 ec 0c             	sub    esp,0xc
c0019116:	68 90 2b 02 c0       	push   0xc0022b90
c001911b:	e8 cc c2 ff ff       	call   c00153ec <Krnl::panic(char const*)>
c0019120:	e8 d2 f2 ff ff       	call   c00183f7 <unlockScheduler()>
c0019125:	83 c4 10             	add    esp,0x10
c0019128:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001912c:	eb 51                	jmp    c001917f <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c001912e:	83 ec 0c             	sub    esp,0xc
c0019131:	0f b7 ff             	movzx  edi,di
c0019134:	6a 07                	push   0x7
c0019136:	68 00 01 00 00       	push   0x100
c001913b:	6a 00                	push   0x0
c001913d:	6a 00                	push   0x0
c001913f:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c0019145:	e8 b2 59 ff ff       	call   c000eafc <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001914a:	83 c4 18             	add    esp,0x18
c001914d:	0f b7 f6             	movzx  esi,si
c0019150:	57                   	push   edi
c0019151:	56                   	push   esi
c0019152:	e8 e6 fe ff ff       	call   c001903d <Vm::realToLinear(unsigned short, unsigned short)>
c0019157:	5a                   	pop    edx
c0019158:	8b 13                	mov    edx,DWORD PTR [ebx]
c001915a:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001915e:	51                   	push   ecx
c001915f:	50                   	push   eax
c0019160:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019164:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019168:	53                   	push   ebx
c0019169:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001916c:	83 c4 14             	add    esp,0x14
c001916f:	53                   	push   ebx
c0019170:	e8 dd 65 ff ff       	call   c000f752 <File::close()>
c0019175:	e8 7d f2 ff ff       	call   c00183f7 <unlockScheduler()>
c001917a:	83 c4 10             	add    esp,0x10
c001917d:	b2 01                	mov    dl,0x1
c001917f:	83 c4 2c             	add    esp,0x2c
c0019182:	88 d0                	mov    al,dl
c0019184:	5b                   	pop    ebx
c0019185:	5e                   	pop    esi
c0019186:	5f                   	pop    edi
c0019187:	5d                   	pop    ebp
c0019188:	c3                   	ret    

c0019189 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0019189:	57                   	push   edi
c001918a:	56                   	push   esi
c001918b:	53                   	push   ebx
c001918c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019190:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019194:	83 e8 06             	sub    eax,0x6
c0019197:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001919b:	0f b7 c0             	movzx  eax,ax
c001919e:	50                   	push   eax
c001919f:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00191a4:	50                   	push   eax
c00191a5:	e8 93 fe ff ff       	call   c001903d <Vm::realToLinear(unsigned short, unsigned short)>
c00191aa:	5a                   	pop    edx
c00191ab:	5e                   	pop    esi
c00191ac:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00191af:	8d 56 fa             	lea    edx,[esi-0x6]
c00191b2:	81 e2 ff ff 00 00    	and    edx,0xffff
c00191b8:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00191bb:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00191be:	83 c2 02             	add    edx,0x2
c00191c1:	66 89 10             	mov    WORD PTR [eax],dx
c00191c4:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00191c7:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00191cb:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00191ce:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00191d2:	89 d6                	mov    esi,edx
c00191d4:	66 81 e6 ff fd       	and    si,0xfdff
c00191d9:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00191df:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c00191e3:	74 07                	je     c00191ec <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00191e5:	89 d6                	mov    esi,edx
c00191e7:	66 81 ce 00 02       	or     si,0x200
c00191ec:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00191f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00191f5:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00191f9:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019201:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019204:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001920c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001920f:	5b                   	pop    ebx
c0019210:	5e                   	pop    esi
c0019211:	5f                   	pop    edi
c0019212:	c3                   	ret    

c0019213 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019213:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019218:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001921d:	c1 e0 04             	shl    eax,0x4
c0019220:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019223:	c3                   	ret    

c0019224 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019224:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019229:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001922e:	c1 e0 04             	shl    eax,0x4
c0019231:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019235:	c3                   	ret    

c0019236 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0019236:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001923b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019240:	c1 e0 04             	shl    eax,0x4
c0019243:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0019246:	c3                   	ret    

c0019247 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0019247:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001924c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019251:	c1 e0 04             	shl    eax,0x4
c0019254:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019258:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001925b:	c3                   	ret    

c001925c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001925c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019261:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019266:	c1 e0 04             	shl    eax,0x4
c0019269:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001926d:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0019271:	c3                   	ret    

c0019272 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0019272:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019277:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001927c:	c1 e0 04             	shl    eax,0x4
c001927f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019283:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0019286:	c3                   	ret    

c0019287 <Vm::faultHandler(regs*)>:
c0019287:	55                   	push   ebp
c0019288:	57                   	push   edi
c0019289:	56                   	push   esi
c001928a:	53                   	push   ebx
c001928b:	83 ec 1c             	sub    esp,0x1c
c001928e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019292:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0019296:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0019299:	52                   	push   edx
c001929a:	0f b7 f0             	movzx  esi,ax
c001929d:	0f b7 c0             	movzx  eax,ax
c00192a0:	50                   	push   eax
c00192a1:	e8 97 fd ff ff       	call   c001903d <Vm::realToLinear(unsigned short, unsigned short)>
c00192a6:	5a                   	pop    edx
c00192a7:	89 c7                	mov    edi,eax
c00192a9:	59                   	pop    ecx
c00192aa:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00192ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00192b1:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00192b4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00192b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00192bd:	0f b7 c5             	movzx  eax,bp
c00192c0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192c4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00192c8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00192cc:	e8 6c fd ff ff       	call   c001903d <Vm::realToLinear(unsigned short, unsigned short)>
c00192d1:	5a                   	pop    edx
c00192d2:	59                   	pop    ecx
c00192d3:	b1 06                	mov    cl,0x6
c00192d5:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00192da:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00192df:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c00192e2:	80 fa 9d             	cmp    dl,0x9d
c00192e5:	0f 84 1d 02 00 00    	je     c0019508 <Vm::faultHandler(regs*)+0x281>
c00192eb:	0f 87 8e 00 00 00    	ja     c001937f <Vm::faultHandler(regs*)+0xf8>
c00192f1:	80 fa 66             	cmp    dl,0x66
c00192f4:	0f 84 89 01 00 00    	je     c0019483 <Vm::faultHandler(regs*)+0x1fc>
c00192fa:	77 44                	ja     c0019340 <Vm::faultHandler(regs*)+0xb9>
c00192fc:	80 fa 36             	cmp    dl,0x36
c00192ff:	0f 84 74 01 00 00    	je     c0019479 <Vm::faultHandler(regs*)+0x1f2>
c0019305:	77 1a                	ja     c0019321 <Vm::faultHandler(regs*)+0x9a>
c0019307:	80 fa 26             	cmp    dl,0x26
c001930a:	0f 84 4b 01 00 00    	je     c001945b <Vm::faultHandler(regs*)+0x1d4>
c0019310:	80 fa 2e             	cmp    dl,0x2e
c0019313:	0f 85 4a 05 00 00    	jne    c0019863 <Vm::faultHandler(regs*)+0x5dc>
c0019319:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001931c:	31 c9                	xor    ecx,ecx
c001931e:	47                   	inc    edi
c001931f:	eb be                	jmp    c00192df <Vm::faultHandler(regs*)+0x58>
c0019321:	80 fa 64             	cmp    dl,0x64
c0019324:	0f 84 3b 01 00 00    	je     c0019465 <Vm::faultHandler(regs*)+0x1de>
c001932a:	0f 87 3f 01 00 00    	ja     c001946f <Vm::faultHandler(regs*)+0x1e8>
c0019330:	80 fa 3e             	cmp    dl,0x3e
c0019333:	0f 85 2a 05 00 00    	jne    c0019863 <Vm::faultHandler(regs*)+0x5dc>
c0019339:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001933c:	b1 01                	mov    cl,0x1
c001933e:	eb de                	jmp    c001931e <Vm::faultHandler(regs*)+0x97>
c0019340:	80 fa 6d             	cmp    dl,0x6d
c0019343:	0f 84 bf 02 00 00    	je     c0019608 <Vm::faultHandler(regs*)+0x381>
c0019349:	77 17                	ja     c0019362 <Vm::faultHandler(regs*)+0xdb>
c001934b:	80 fa 67             	cmp    dl,0x67
c001934e:	0f 84 3c 01 00 00    	je     c0019490 <Vm::faultHandler(regs*)+0x209>
c0019354:	80 fa 6c             	cmp    dl,0x6c
c0019357:	0f 84 5d 02 00 00    	je     c00195ba <Vm::faultHandler(regs*)+0x333>
c001935d:	e9 01 05 00 00       	jmp    c0019863 <Vm::faultHandler(regs*)+0x5dc>
c0019362:	80 fa 6f             	cmp    dl,0x6f
c0019365:	0f 84 8b 03 00 00    	je     c00196f6 <Vm::faultHandler(regs*)+0x46f>
c001936b:	0f 82 0f 03 00 00    	jb     c0019680 <Vm::faultHandler(regs*)+0x3f9>
c0019371:	80 fa 9c             	cmp    dl,0x9c
c0019374:	0f 84 23 01 00 00    	je     c001949d <Vm::faultHandler(regs*)+0x216>
c001937a:	e9 e4 04 00 00       	jmp    c0019863 <Vm::faultHandler(regs*)+0x5dc>
c001937f:	80 fa ec             	cmp    dl,0xec
c0019382:	0f 84 7f 04 00 00    	je     c0019807 <Vm::faultHandler(regs*)+0x580>
c0019388:	77 7b                	ja     c0019405 <Vm::faultHandler(regs*)+0x17e>
c001938a:	80 fa e4             	cmp    dl,0xe4
c001938d:	0f 84 fe 03 00 00    	je     c0019791 <Vm::faultHandler(regs*)+0x50a>
c0019393:	77 53                	ja     c00193e8 <Vm::faultHandler(regs*)+0x161>
c0019395:	80 fa cd             	cmp    dl,0xcd
c0019398:	0f 84 cd 01 00 00    	je     c001956b <Vm::faultHandler(regs*)+0x2e4>
c001939e:	80 fa cf             	cmp    dl,0xcf
c00193a1:	0f 85 bc 04 00 00    	jne    c0019863 <Vm::faultHandler(regs*)+0x5dc>
c00193a7:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00193aa:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00193ad:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00193b1:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00193b4:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00193b8:	81 ca 00 02 02 00    	or     edx,0x20200
c00193be:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00193c1:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00193c5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00193cb:	66 c1 e8 09          	shr    ax,0x9
c00193cf:	83 e0 01             	and    eax,0x1
c00193d2:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00193d5:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00193d8:	83 c0 06             	add    eax,0x6
c00193db:	25 ff ff 00 00       	and    eax,0xffff
c00193e0:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00193e3:	e9 77 04 00 00       	jmp    c001985f <Vm::faultHandler(regs*)+0x5d8>
c00193e8:	80 fa e6             	cmp    dl,0xe6
c00193eb:	0f 84 ea 03 00 00    	je     c00197db <Vm::faultHandler(regs*)+0x554>
c00193f1:	0f 82 b6 03 00 00    	jb     c00197ad <Vm::faultHandler(regs*)+0x526>
c00193f7:	80 fa e7             	cmp    dl,0xe7
c00193fa:	0f 84 f2 03 00 00    	je     c00197f2 <Vm::faultHandler(regs*)+0x56b>
c0019400:	e9 5e 04 00 00       	jmp    c0019863 <Vm::faultHandler(regs*)+0x5dc>
c0019405:	80 fa ef             	cmp    dl,0xef
c0019408:	0f 84 3c 04 00 00    	je     c001984a <Vm::faultHandler(regs*)+0x5c3>
c001940e:	77 28                	ja     c0019438 <Vm::faultHandler(regs*)+0x1b1>
c0019410:	80 fa ed             	cmp    dl,0xed
c0019413:	0f 84 0a 04 00 00    	je     c0019823 <Vm::faultHandler(regs*)+0x59c>
c0019419:	80 fa ee             	cmp    dl,0xee
c001941c:	0f 85 41 04 00 00    	jne    c0019863 <Vm::faultHandler(regs*)+0x5dc>
c0019422:	50                   	push   eax
c0019423:	50                   	push   eax
c0019424:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019428:	50                   	push   eax
c0019429:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001942d:	50                   	push   eax
c001942e:	e8 00 fc ff ff       	call   c0019033 <Vm::outbv(unsigned short, unsigned char)>
c0019433:	e9 0a 04 00 00       	jmp    c0019842 <Vm::faultHandler(regs*)+0x5bb>
c0019438:	80 fa fa             	cmp    dl,0xfa
c001943b:	0f 84 5d 01 00 00    	je     c001959e <Vm::faultHandler(regs*)+0x317>
c0019441:	80 fa fb             	cmp    dl,0xfb
c0019444:	0f 84 62 01 00 00    	je     c00195ac <Vm::faultHandler(regs*)+0x325>
c001944a:	80 fa f3             	cmp    dl,0xf3
c001944d:	0f 85 10 04 00 00    	jne    c0019863 <Vm::faultHandler(regs*)+0x5dc>
c0019453:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019456:	e9 c3 fe ff ff       	jmp    c001931e <Vm::faultHandler(regs*)+0x97>
c001945b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001945e:	b1 02                	mov    cl,0x2
c0019460:	e9 b9 fe ff ff       	jmp    c001931e <Vm::faultHandler(regs*)+0x97>
c0019465:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019468:	b1 03                	mov    cl,0x3
c001946a:	e9 af fe ff ff       	jmp    c001931e <Vm::faultHandler(regs*)+0x97>
c001946f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019472:	b1 04                	mov    cl,0x4
c0019474:	e9 a5 fe ff ff       	jmp    c001931e <Vm::faultHandler(regs*)+0x97>
c0019479:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001947c:	b1 05                	mov    cl,0x5
c001947e:	e9 9b fe ff ff       	jmp    c001931e <Vm::faultHandler(regs*)+0x97>
c0019483:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019486:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c001948b:	e9 8e fe ff ff       	jmp    c001931e <Vm::faultHandler(regs*)+0x97>
c0019490:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019493:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019498:	e9 81 fe ff ff       	jmp    c001931e <Vm::faultHandler(regs*)+0x97>
c001949d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00194a0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00194a4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00194a9:	74 30                	je     c00194db <Vm::faultHandler(regs*)+0x254>
c00194ab:	83 e9 04             	sub    ecx,0x4
c00194ae:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00194b4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00194ba:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00194bd:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00194c0:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00194c6:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00194ca:	0f 84 8c 03 00 00    	je     c001985c <Vm::faultHandler(regs*)+0x5d5>
c00194d0:	80 ce 02             	or     dh,0x2
c00194d3:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00194d6:	e9 81 03 00 00       	jmp    c001985c <Vm::faultHandler(regs*)+0x5d5>
c00194db:	83 e9 02             	sub    ecx,0x2
c00194de:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00194e4:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00194e7:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00194eb:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00194f1:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c00194f5:	74 05                	je     c00194fc <Vm::faultHandler(regs*)+0x275>
c00194f7:	80 ce 02             	or     dh,0x2
c00194fa:	eb 03                	jmp    c00194ff <Vm::faultHandler(regs*)+0x278>
c00194fc:	80 e6 fd             	and    dh,0xfd
c00194ff:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019503:	e9 54 03 00 00       	jmp    c001985c <Vm::faultHandler(regs*)+0x5d5>
c0019508:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001950d:	74 2a                	je     c0019539 <Vm::faultHandler(regs*)+0x2b2>
c001950f:	8b 10                	mov    edx,DWORD PTR [eax]
c0019511:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019517:	81 ca 00 02 02 00    	or     edx,0x20200
c001951d:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019520:	8b 00                	mov    eax,DWORD PTR [eax]
c0019522:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019528:	c1 e8 09             	shr    eax,0x9
c001952b:	83 e0 01             	and    eax,0x1
c001952e:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019531:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019534:	83 c0 04             	add    eax,0x4
c0019537:	eb 25                	jmp    c001955e <Vm::faultHandler(regs*)+0x2d7>
c0019539:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001953c:	81 ca 00 02 02 00    	or     edx,0x20200
c0019542:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019545:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019548:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001954e:	66 c1 e8 09          	shr    ax,0x9
c0019552:	83 e0 01             	and    eax,0x1
c0019555:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019558:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001955b:	83 c0 02             	add    eax,0x2
c001955e:	25 ff ff 00 00       	and    eax,0xffff
c0019563:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019566:	e9 f1 02 00 00       	jmp    c001985c <Vm::faultHandler(regs*)+0x5d5>
c001956b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001956f:	3c ff                	cmp    al,0xff
c0019571:	75 10                	jne    c0019583 <Vm::faultHandler(regs*)+0x2fc>
c0019573:	83 ec 0c             	sub    esp,0xc
c0019576:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019579:	e8 86 f9 ff ff       	call   c0018f04 <Thr::terminateFromIRQ(int)>
c001957e:	e9 c2 02 00 00       	jmp    c0019845 <Vm::faultHandler(regs*)+0x5be>
c0019583:	83 ec 0c             	sub    esp,0xc
c0019586:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001958a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001958e:	57                   	push   edi
c001958f:	50                   	push   eax
c0019590:	53                   	push   ebx
c0019591:	e8 f3 fb ff ff       	call   c0019189 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0019596:	83 c4 20             	add    esp,0x20
c0019599:	e9 c1 02 00 00       	jmp    c001985f <Vm::faultHandler(regs*)+0x5d8>
c001959e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00195a3:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00195a7:	e9 b0 02 00 00       	jmp    c001985c <Vm::faultHandler(regs*)+0x5d5>
c00195ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00195b1:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c00195b5:	e9 a2 02 00 00       	jmp    c001985c <Vm::faultHandler(regs*)+0x5d5>
c00195ba:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00195bf:	74 0d                	je     c00195ce <Vm::faultHandler(regs*)+0x347>
c00195c1:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00195c8:	0f 87 e9 02 00 00    	ja     c00198b7 <Vm::faultHandler(regs*)+0x630>
c00195ce:	83 ec 0c             	sub    esp,0xc
c00195d1:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00195d4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00195d8:	50                   	push   eax
c00195d9:	e8 4f fa ff ff       	call   c001902d <Vm::inbv(unsigned short)>
c00195de:	83 c4 0c             	add    esp,0xc
c00195e1:	0f b6 c0             	movzx  eax,al
c00195e4:	50                   	push   eax
c00195e5:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00195e9:	0f b7 c9             	movzx  ecx,cx
c00195ec:	50                   	push   eax
c00195ed:	51                   	push   ecx
c00195ee:	e8 54 fc ff ff       	call   c0019247 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00195f3:	83 c4 10             	add    esp,0x10
c00195f6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00195f9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00195fd:	74 03                	je     c0019602 <Vm::faultHandler(regs*)+0x37b>
c00195ff:	48                   	dec    eax
c0019600:	eb 01                	jmp    c0019603 <Vm::faultHandler(regs*)+0x37c>
c0019602:	40                   	inc    eax
c0019603:	0f b7 c0             	movzx  eax,ax
c0019606:	eb 70                	jmp    c0019678 <Vm::faultHandler(regs*)+0x3f1>
c0019608:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001960b:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001960e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019613:	74 0c                	je     c0019621 <Vm::faultHandler(regs*)+0x39a>
c0019615:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001961b:	0f 87 96 02 00 00    	ja     c00198b7 <Vm::faultHandler(regs*)+0x630>
c0019621:	0f b7 c9             	movzx  ecx,cx
c0019624:	0f b7 f6             	movzx  esi,si
c0019627:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001962a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001962f:	74 20                	je     c0019651 <Vm::faultHandler(regs*)+0x3ca>
c0019631:	ed                   	in     eax,dx
c0019632:	55                   	push   ebp
c0019633:	50                   	push   eax
c0019634:	51                   	push   ecx
c0019635:	56                   	push   esi
c0019636:	e8 37 fc ff ff       	call   c0019272 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001963b:	83 c4 10             	add    esp,0x10
c001963e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019641:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019645:	74 05                	je     c001964c <Vm::faultHandler(regs*)+0x3c5>
c0019647:	83 e8 04             	sub    eax,0x4
c001964a:	eb 27                	jmp    c0019673 <Vm::faultHandler(regs*)+0x3ec>
c001964c:	83 c0 04             	add    eax,0x4
c001964f:	eb 22                	jmp    c0019673 <Vm::faultHandler(regs*)+0x3ec>
c0019651:	66 ed                	in     ax,dx
c0019653:	0f b7 c0             	movzx  eax,ax
c0019656:	57                   	push   edi
c0019657:	50                   	push   eax
c0019658:	51                   	push   ecx
c0019659:	56                   	push   esi
c001965a:	e8 fd fb ff ff       	call   c001925c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001965f:	83 c4 10             	add    esp,0x10
c0019662:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019665:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019669:	74 05                	je     c0019670 <Vm::faultHandler(regs*)+0x3e9>
c001966b:	83 e8 02             	sub    eax,0x2
c001966e:	eb 03                	jmp    c0019673 <Vm::faultHandler(regs*)+0x3ec>
c0019670:	83 c0 02             	add    eax,0x2
c0019673:	25 ff ff 00 00       	and    eax,0xffff
c0019678:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001967b:	e9 dc 01 00 00       	jmp    c001985c <Vm::faultHandler(regs*)+0x5d5>
c0019680:	49                   	dec    ecx
c0019681:	80 f9 05             	cmp    cl,0x5
c0019684:	77 24                	ja     c00196aa <Vm::faultHandler(regs*)+0x423>
c0019686:	0f b6 c9             	movzx  ecx,cl
c0019689:	ff 24 8d d8 2b 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdd428]
c0019690:	0f b7 f5             	movzx  esi,bp
c0019693:	eb 15                	jmp    c00196aa <Vm::faultHandler(regs*)+0x423>
c0019695:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0019699:	eb 0f                	jmp    c00196aa <Vm::faultHandler(regs*)+0x423>
c001969b:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c001969f:	eb 09                	jmp    c00196aa <Vm::faultHandler(regs*)+0x423>
c00196a1:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c00196a5:	eb 03                	jmp    c00196aa <Vm::faultHandler(regs*)+0x423>
c00196a7:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c00196aa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00196ad:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00196b2:	74 0b                	je     c00196bf <Vm::faultHandler(regs*)+0x438>
c00196b4:	3d ff ff 00 00       	cmp    eax,0xffff
c00196b9:	0f 87 f8 01 00 00    	ja     c00198b7 <Vm::faultHandler(regs*)+0x630>
c00196bf:	52                   	push   edx
c00196c0:	52                   	push   edx
c00196c1:	0f b7 c0             	movzx  eax,ax
c00196c4:	50                   	push   eax
c00196c5:	56                   	push   esi
c00196c6:	e8 48 fb ff ff       	call   c0019213 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00196cb:	59                   	pop    ecx
c00196cc:	5e                   	pop    esi
c00196cd:	0f b6 c0             	movzx  eax,al
c00196d0:	50                   	push   eax
c00196d1:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00196d5:	50                   	push   eax
c00196d6:	e8 58 f9 ff ff       	call   c0019033 <Vm::outbv(unsigned short, unsigned char)>
c00196db:	83 c4 10             	add    esp,0x10
c00196de:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00196e1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00196e5:	74 03                	je     c00196ea <Vm::faultHandler(regs*)+0x463>
c00196e7:	48                   	dec    eax
c00196e8:	eb 01                	jmp    c00196eb <Vm::faultHandler(regs*)+0x464>
c00196ea:	40                   	inc    eax
c00196eb:	0f b7 c0             	movzx  eax,ax
c00196ee:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00196f1:	e9 66 01 00 00       	jmp    c001985c <Vm::faultHandler(regs*)+0x5d5>
c00196f6:	49                   	dec    ecx
c00196f7:	80 f9 05             	cmp    cl,0x5
c00196fa:	77 1f                	ja     c001971b <Vm::faultHandler(regs*)+0x494>
c00196fc:	0f b6 c9             	movzx  ecx,cl
c00196ff:	ff 24 8d f0 2b 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdd410]
c0019706:	89 ee                	mov    esi,ebp
c0019708:	eb 11                	jmp    c001971b <Vm::faultHandler(regs*)+0x494>
c001970a:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001970d:	eb 0c                	jmp    c001971b <Vm::faultHandler(regs*)+0x494>
c001970f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019712:	eb 07                	jmp    c001971b <Vm::faultHandler(regs*)+0x494>
c0019714:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0019717:	eb 02                	jmp    c001971b <Vm::faultHandler(regs*)+0x494>
c0019719:	8b 33                	mov    esi,DWORD PTR [ebx]
c001971b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001971e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019723:	74 0c                	je     c0019731 <Vm::faultHandler(regs*)+0x4aa>
c0019725:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c001972b:	0f 87 86 01 00 00    	ja     c00198b7 <Vm::faultHandler(regs*)+0x630>
c0019731:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0019734:	0f b7 d6             	movzx  edx,si
c0019737:	81 e7 00 04 00 00    	and    edi,0x400
c001973d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019740:	0f b7 c1             	movzx  eax,cx
c0019743:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019748:	74 1d                	je     c0019767 <Vm::faultHandler(regs*)+0x4e0>
c001974a:	55                   	push   ebp
c001974b:	55                   	push   ebp
c001974c:	50                   	push   eax
c001974d:	52                   	push   edx
c001974e:	e8 e3 fa ff ff       	call   c0019236 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019753:	83 c4 10             	add    esp,0x10
c0019756:	89 f2                	mov    edx,esi
c0019758:	ef                   	out    dx,eax
c0019759:	85 ff                	test   edi,edi
c001975b:	74 05                	je     c0019762 <Vm::faultHandler(regs*)+0x4db>
c001975d:	83 e9 04             	sub    ecx,0x4
c0019760:	eb 21                	jmp    c0019783 <Vm::faultHandler(regs*)+0x4fc>
c0019762:	83 c1 04             	add    ecx,0x4
c0019765:	eb 1c                	jmp    c0019783 <Vm::faultHandler(regs*)+0x4fc>
c0019767:	55                   	push   ebp
c0019768:	55                   	push   ebp
c0019769:	50                   	push   eax
c001976a:	52                   	push   edx
c001976b:	e8 b4 fa ff ff       	call   c0019224 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019770:	83 c4 10             	add    esp,0x10
c0019773:	89 f2                	mov    edx,esi
c0019775:	66 ef                	out    dx,ax
c0019777:	85 ff                	test   edi,edi
c0019779:	74 05                	je     c0019780 <Vm::faultHandler(regs*)+0x4f9>
c001977b:	83 e9 02             	sub    ecx,0x2
c001977e:	eb 03                	jmp    c0019783 <Vm::faultHandler(regs*)+0x4fc>
c0019780:	83 c1 02             	add    ecx,0x2
c0019783:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019789:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c001978c:	e9 cb 00 00 00       	jmp    c001985c <Vm::faultHandler(regs*)+0x5d5>
c0019791:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019798:	83 ec 0c             	sub    esp,0xc
c001979b:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001979f:	50                   	push   eax
c00197a0:	e8 88 f8 ff ff       	call   c001902d <Vm::inbv(unsigned short)>
c00197a5:	0f b6 c0             	movzx  eax,al
c00197a8:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00197ab:	eb 3f                	jmp    c00197ec <Vm::faultHandler(regs*)+0x565>
c00197ad:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00197b2:	74 07                	je     c00197bb <Vm::faultHandler(regs*)+0x534>
c00197b4:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c00197b8:	ed                   	in     eax,dx
c00197b9:	eb 14                	jmp    c00197cf <Vm::faultHandler(regs*)+0x548>
c00197bb:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c00197be:	66 31 c9             	xor    cx,cx
c00197c1:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00197c4:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c00197c8:	66 ed                	in     ax,dx
c00197ca:	0f b7 c0             	movzx  eax,ax
c00197cd:	09 c8                	or     eax,ecx
c00197cf:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00197d2:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00197d6:	e9 84 00 00 00       	jmp    c001985f <Vm::faultHandler(regs*)+0x5d8>
c00197db:	52                   	push   edx
c00197dc:	52                   	push   edx
c00197dd:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00197e1:	50                   	push   eax
c00197e2:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00197e6:	50                   	push   eax
c00197e7:	e8 47 f8 ff ff       	call   c0019033 <Vm::outbv(unsigned short, unsigned char)>
c00197ec:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00197f0:	eb 53                	jmp    c0019845 <Vm::faultHandler(regs*)+0x5be>
c00197f2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00197f5:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c00197f9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00197fe:	74 03                	je     c0019803 <Vm::faultHandler(regs*)+0x57c>
c0019800:	ef                   	out    dx,eax
c0019801:	eb cf                	jmp    c00197d2 <Vm::faultHandler(regs*)+0x54b>
c0019803:	66 ef                	out    dx,ax
c0019805:	eb cb                	jmp    c00197d2 <Vm::faultHandler(regs*)+0x54b>
c0019807:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001980e:	83 ec 0c             	sub    esp,0xc
c0019811:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019815:	50                   	push   eax
c0019816:	e8 12 f8 ff ff       	call   c001902d <Vm::inbv(unsigned short)>
c001981b:	0f b6 c0             	movzx  eax,al
c001981e:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019821:	eb 1f                	jmp    c0019842 <Vm::faultHandler(regs*)+0x5bb>
c0019823:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019826:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001982b:	74 03                	je     c0019830 <Vm::faultHandler(regs*)+0x5a9>
c001982d:	ed                   	in     eax,dx
c001982e:	eb 0d                	jmp    c001983d <Vm::faultHandler(regs*)+0x5b6>
c0019830:	66 ed                	in     ax,dx
c0019832:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019835:	66 31 d2             	xor    dx,dx
c0019838:	0f b7 c0             	movzx  eax,ax
c001983b:	09 d0                	or     eax,edx
c001983d:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019840:	eb 1a                	jmp    c001985c <Vm::faultHandler(regs*)+0x5d5>
c0019842:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019845:	83 c4 10             	add    esp,0x10
c0019848:	eb 15                	jmp    c001985f <Vm::faultHandler(regs*)+0x5d8>
c001984a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001984d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019850:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019855:	74 03                	je     c001985a <Vm::faultHandler(regs*)+0x5d3>
c0019857:	ef                   	out    dx,eax
c0019858:	eb 02                	jmp    c001985c <Vm::faultHandler(regs*)+0x5d5>
c001985a:	66 ef                	out    dx,ax
c001985c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001985f:	b0 01                	mov    al,0x1
c0019861:	eb 56                	jmp    c00198b9 <Vm::faultHandler(regs*)+0x632>
c0019863:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0019867:	50                   	push   eax
c0019868:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c001986c:	50                   	push   eax
c001986d:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0019871:	50                   	push   eax
c0019872:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0019876:	50                   	push   eax
c0019877:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c001987b:	50                   	push   eax
c001987c:	52                   	push   edx
c001987d:	52                   	push   edx
c001987e:	68 a9 2b 02 c0       	push   0xc0022ba9
c0019883:	e8 d1 58 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0019888:	83 c4 20             	add    esp,0x20
c001988b:	83 ec 0c             	sub    esp,0xc
c001988e:	6a 60                	push   0x60
c0019890:	e8 98 f7 ff ff       	call   c001902d <Vm::inbv(unsigned short)>
c0019895:	83 c4 10             	add    esp,0x10
c0019898:	3c 1c                	cmp    al,0x1c
c001989a:	74 04                	je     c00198a0 <Vm::faultHandler(regs*)+0x619>
c001989c:	3c 5a                	cmp    al,0x5a
c001989e:	75 eb                	jne    c001988b <Vm::faultHandler(regs*)+0x604>
c00198a0:	3c 1c                	cmp    al,0x1c
c00198a2:	74 04                	je     c00198a8 <Vm::faultHandler(regs*)+0x621>
c00198a4:	3c 5a                	cmp    al,0x5a
c00198a6:	75 0f                	jne    c00198b7 <Vm::faultHandler(regs*)+0x630>
c00198a8:	83 ec 0c             	sub    esp,0xc
c00198ab:	6a 60                	push   0x60
c00198ad:	e8 7b f7 ff ff       	call   c001902d <Vm::inbv(unsigned short)>
c00198b2:	83 c4 10             	add    esp,0x10
c00198b5:	eb e9                	jmp    c00198a0 <Vm::faultHandler(regs*)+0x619>
c00198b7:	31 c0                	xor    eax,eax
c00198b9:	83 c4 1c             	add    esp,0x1c
c00198bc:	5b                   	pop    ebx
c00198bd:	5e                   	pop    esi
c00198be:	5f                   	pop    edi
c00198bf:	5d                   	pop    ebp
c00198c0:	c3                   	ret    
c00198c1:	90                   	nop

c00198c2 <FAT::getName()>:
c00198c2:	b8 08 2c 02 c0       	mov    eax,0xc0022c08
c00198c7:	c3                   	ret    

c00198c8 <FAT::tell(void*, unsigned long long*)>:
c00198c8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00198cd:	75 06                	jne    c00198d5 <FAT::tell(void*, unsigned long long*)+0xd>
c00198cf:	b8 04 00 00 00       	mov    eax,0x4
c00198d4:	c3                   	ret    
c00198d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00198da:	75 06                	jne    c00198e2 <FAT::tell(void*, unsigned long long*)+0x1a>
c00198dc:	b8 04 00 00 00       	mov    eax,0x4
c00198e1:	c3                   	ret    
c00198e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00198e6:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00198e9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00198ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198f0:	89 01                	mov    DWORD PTR [ecx],eax
c00198f2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00198f5:	b8 00 00 00 00       	mov    eax,0x0
c00198fa:	c3                   	ret    
c00198fb:	90                   	nop

c00198fc <FAT::stat(void*, unsigned long long*)>:
c00198fc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019901:	75 06                	jne    c0019909 <FAT::stat(void*, unsigned long long*)+0xd>
c0019903:	b8 04 00 00 00       	mov    eax,0x4
c0019908:	c3                   	ret    
c0019909:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001990e:	75 06                	jne    c0019916 <FAT::stat(void*, unsigned long long*)+0x1a>
c0019910:	b8 04 00 00 00       	mov    eax,0x4
c0019915:	c3                   	ret    
c0019916:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001991a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001991d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019920:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019924:	89 01                	mov    DWORD PTR [ecx],eax
c0019926:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019929:	b8 00 00 00 00       	mov    eax,0x0
c001992e:	c3                   	ret    
c001992f:	90                   	nop

c0019930 <FAT::~FAT()>:
c0019930:	83 ec 0c             	sub    esp,0xc
c0019933:	ba 8c 2c 02 c0       	mov    edx,0xc0022c8c
c0019938:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001993c:	89 10                	mov    DWORD PTR [eax],edx
c001993e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019942:	83 ec 0c             	sub    esp,0xc
c0019945:	50                   	push   eax
c0019946:	e8 3f 5b ff ff       	call   c000f48a <Filesystem::~Filesystem()>
c001994b:	83 c4 10             	add    esp,0x10
c001994e:	90                   	nop
c001994f:	83 c4 0c             	add    esp,0xc
c0019952:	c3                   	ret    
c0019953:	90                   	nop

c0019954 <FAT::~FAT()>:
c0019954:	83 ec 0c             	sub    esp,0xc
c0019957:	83 ec 0c             	sub    esp,0xc
c001995a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001995e:	e8 cd ff ff ff       	call   c0019930 <FAT::~FAT()>
c0019963:	83 c4 10             	add    esp,0x10
c0019966:	83 ec 08             	sub    esp,0x8
c0019969:	6a 08                	push   0x8
c001996b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001996f:	e8 bf 56 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c0019974:	83 c4 10             	add    esp,0x10
c0019977:	83 c4 0c             	add    esp,0xc
c001997a:	c3                   	ret    
c001997b:	90                   	nop

c001997c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001997c:	83 ec 1c             	sub    esp,0x1c
c001997f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019986:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001998b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001998f:	8b 04 85 c0 55 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaa40]
c0019996:	83 f8 ff             	cmp    eax,0xffffffff
c0019999:	75 34                	jne    c00199cf <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c001999b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001999f:	88 c2                	mov    dl,al
c00199a1:	a1 a0 55 02 c0       	mov    eax,ds:0xc00255a0
c00199a6:	01 d0                	add    eax,edx
c00199a8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00199ac:	8b 15 a0 55 02 c0    	mov    edx,DWORD PTR ds:0xc00255a0
c00199b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00199b6:	89 14 85 c0 55 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaa40],edx
c00199bd:	a1 a0 55 02 c0       	mov    eax,ds:0xc00255a0
c00199c2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00199c6:	89 14 85 40 56 02 c0 	mov    DWORD PTR [eax*4-0x3ffda9c0],edx
c00199cd:	eb 17                	jmp    c00199e6 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00199cf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00199d3:	88 c2                	mov    dl,al
c00199d5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00199d9:	8b 04 85 c0 55 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaa40]
c00199e0:	01 d0                	add    eax,edx
c00199e2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00199e6:	83 ec 04             	sub    esp,0x4
c00199e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00199ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00199f1:	8d 44 24 15          	lea    eax,[esp+0x15]
c00199f5:	50                   	push   eax
c00199f6:	e8 20 d0 fe ff       	call   c0006a1b <f_getlabel>
c00199fb:	83 c4 10             	add    esp,0x10
c00199fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a02:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019a07:	75 07                	jne    c0019a10 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0019a09:	b8 00 00 00 00       	mov    eax,0x0
c0019a0e:	eb 05                	jmp    c0019a15 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0019a10:	b8 01 00 00 00       	mov    eax,0x1
c0019a15:	83 c4 1c             	add    esp,0x1c
c0019a18:	c3                   	ret    
c0019a19:	90                   	nop

c0019a1a <FAT::setlabel(LogicalDisk*, int, char*)>:
c0019a1a:	57                   	push   edi
c0019a1b:	83 ec 58             	sub    esp,0x58
c0019a1e:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0019a26:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019a2a:	b8 00 00 00 00       	mov    eax,0x0
c0019a2f:	b9 0f 00 00 00       	mov    ecx,0xf
c0019a34:	fc                   	cld    
c0019a35:	89 d7                	mov    edi,edx
c0019a37:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019a39:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019a3d:	8b 04 85 c0 55 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaa40]
c0019a44:	83 f8 ff             	cmp    eax,0xffffffff
c0019a47:	75 34                	jne    c0019a7d <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0019a49:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019a4d:	88 c2                	mov    dl,al
c0019a4f:	a1 a0 55 02 c0       	mov    eax,ds:0xc00255a0
c0019a54:	01 d0                	add    eax,edx
c0019a56:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a5a:	8b 15 a0 55 02 c0    	mov    edx,DWORD PTR ds:0xc00255a0
c0019a60:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019a64:	89 14 85 c0 55 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaa40],edx
c0019a6b:	a1 a0 55 02 c0       	mov    eax,ds:0xc00255a0
c0019a70:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0019a74:	89 14 85 40 56 02 c0 	mov    DWORD PTR [eax*4-0x3ffda9c0],edx
c0019a7b:	eb 17                	jmp    c0019a94 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0019a7d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019a81:	88 c2                	mov    dl,al
c0019a83:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019a87:	8b 04 85 c0 55 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaa40]
c0019a8e:	01 d0                	add    eax,edx
c0019a90:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019a94:	83 ec 08             	sub    esp,0x8
c0019a97:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019a9b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a9f:	50                   	push   eax
c0019aa0:	e8 b9 6c fe ff       	call   c000075e <strcat>
c0019aa5:	83 c4 10             	add    esp,0x10
c0019aa8:	83 ec 0c             	sub    esp,0xc
c0019aab:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019aaf:	50                   	push   eax
c0019ab0:	e8 5a d1 fe ff       	call   c0006c0f <f_setlabel>
c0019ab5:	83 c4 10             	add    esp,0x10
c0019ab8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019abc:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0019ac1:	75 07                	jne    c0019aca <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0019ac3:	b8 00 00 00 00       	mov    eax,0x0
c0019ac8:	eb 05                	jmp    c0019acf <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0019aca:	b8 01 00 00 00       	mov    eax,0x1
c0019acf:	83 c4 58             	add    esp,0x58
c0019ad2:	5f                   	pop    edi
c0019ad3:	c3                   	ret    

c0019ad4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0019ad4:	83 ec 2c             	sub    esp,0x2c
c0019ad7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0019adf:	83 ec 08             	sub    esp,0x8
c0019ae2:	68 2c 2c 02 c0       	push   0xc0022c2c
c0019ae7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019aeb:	e8 08 6c fe ff       	call   c00006f8 <strcmp>
c0019af0:	83 c4 10             	add    esp,0x10
c0019af3:	85 c0                	test   eax,eax
c0019af5:	0f 94 c0             	sete   al
c0019af8:	84 c0                	test   al,al
c0019afa:	74 0d                	je     c0019b09 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0019afc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019b04:	e9 a6 00 00 00       	jmp    c0019baf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019b09:	83 ec 08             	sub    esp,0x8
c0019b0c:	68 1e 2c 02 c0       	push   0xc0022c1e
c0019b11:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019b15:	e8 de 6b fe ff       	call   c00006f8 <strcmp>
c0019b1a:	83 c4 10             	add    esp,0x10
c0019b1d:	85 c0                	test   eax,eax
c0019b1f:	0f 94 c0             	sete   al
c0019b22:	84 c0                	test   al,al
c0019b24:	74 0a                	je     c0019b30 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0019b26:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019b2e:	eb 7f                	jmp    c0019baf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019b30:	83 ec 08             	sub    esp,0x8
c0019b33:	68 24 2c 02 c0       	push   0xc0022c24
c0019b38:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019b3c:	e8 b7 6b fe ff       	call   c00006f8 <strcmp>
c0019b41:	83 c4 10             	add    esp,0x10
c0019b44:	85 c0                	test   eax,eax
c0019b46:	0f 94 c0             	sete   al
c0019b49:	84 c0                	test   al,al
c0019b4b:	74 0a                	je     c0019b57 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0019b4d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019b55:	eb 58                	jmp    c0019baf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019b57:	83 ec 08             	sub    esp,0x8
c0019b5a:	68 0c ff 01 c0       	push   0xc001ff0c
c0019b5f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019b63:	e8 90 6b fe ff       	call   c00006f8 <strcmp>
c0019b68:	83 c4 10             	add    esp,0x10
c0019b6b:	85 c0                	test   eax,eax
c0019b6d:	0f 94 c0             	sete   al
c0019b70:	84 c0                	test   al,al
c0019b72:	74 0a                	je     c0019b7e <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0019b74:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019b7c:	eb 31                	jmp    c0019baf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019b7e:	83 ec 08             	sub    esp,0x8
c0019b81:	68 2a 2c 02 c0       	push   0xc0022c2a
c0019b86:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019b8a:	e8 69 6b fe ff       	call   c00006f8 <strcmp>
c0019b8f:	83 c4 10             	add    esp,0x10
c0019b92:	85 c0                	test   eax,eax
c0019b94:	0f 94 c0             	sete   al
c0019b97:	84 c0                	test   al,al
c0019b99:	74 0a                	je     c0019ba5 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0019b9b:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019ba3:	eb 0a                	jmp    c0019baf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0019ba5:	b8 08 00 00 00       	mov    eax,0x8
c0019baa:	e9 04 01 00 00       	jmp    c0019cb3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019baf:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0019bb6:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019bbb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019bbf:	8b 04 85 c0 55 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaa40]
c0019bc6:	83 f8 ff             	cmp    eax,0xffffffff
c0019bc9:	75 34                	jne    c0019bff <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0019bcb:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019bcf:	88 c2                	mov    dl,al
c0019bd1:	a1 a0 55 02 c0       	mov    eax,ds:0xc00255a0
c0019bd6:	01 d0                	add    eax,edx
c0019bd8:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019bdc:	8b 15 a0 55 02 c0    	mov    edx,DWORD PTR ds:0xc00255a0
c0019be2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019be6:	89 14 85 c0 55 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaa40],edx
c0019bed:	a1 a0 55 02 c0       	mov    eax,ds:0xc00255a0
c0019bf2:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019bf6:	89 14 85 40 56 02 c0 	mov    DWORD PTR [eax*4-0x3ffda9c0],edx
c0019bfd:	eb 17                	jmp    c0019c16 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0019bff:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0019c03:	88 c2                	mov    dl,al
c0019c05:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019c09:	8b 04 85 c0 55 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaa40]
c0019c10:	01 d0                	add    eax,edx
c0019c12:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019c16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019c1a:	88 04 24             	mov    BYTE PTR [esp],al
c0019c1d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019c21:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019c25:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019c2d:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019c32:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019c3a:	83 ec 0c             	sub    esp,0xc
c0019c3d:	68 00 20 00 00       	push   0x2000
c0019c42:	e8 e0 22 ff ff       	call   c000bf27 <malloc>
c0019c47:	83 c4 10             	add    esp,0x10
c0019c4a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019c4e:	68 00 20 00 00       	push   0x2000
c0019c53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019c57:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019c5b:	50                   	push   eax
c0019c5c:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019c60:	50                   	push   eax
c0019c61:	e8 f4 d3 fe ff       	call   c000705a <f_mkfs>
c0019c66:	83 c4 10             	add    esp,0x10
c0019c69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019c6d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019c72:	75 07                	jne    c0019c7b <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0019c74:	b8 00 00 00 00       	mov    eax,0x0
c0019c79:	eb 38                	jmp    c0019cb3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019c7b:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019c80:	75 17                	jne    c0019c99 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0019c82:	83 ec 0c             	sub    esp,0xc
c0019c85:	68 5c 2c 02 c0       	push   0xc0022c5c
c0019c8a:	e8 ca 54 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0019c8f:	83 c4 10             	add    esp,0x10
c0019c92:	b8 09 00 00 00       	mov    eax,0x9
c0019c97:	eb 1a                	jmp    c0019cb3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019c99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019c9d:	83 ec 08             	sub    esp,0x8
c0019ca0:	50                   	push   eax
c0019ca1:	68 30 2c 02 c0       	push   0xc0022c30
c0019ca6:	e8 ae 54 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c0019cab:	83 c4 10             	add    esp,0x10
c0019cae:	b8 01 00 00 00       	mov    eax,0x1
c0019cb3:	83 c4 2c             	add    esp,0x2c
c0019cb6:	c3                   	ret    
c0019cb7:	90                   	nop

c0019cb8 <FAT::tryMount(LogicalDisk*, int)>:
c0019cb8:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0019cbe:	a1 a0 55 02 c0       	mov    eax,ds:0xc00255a0
c0019cc3:	83 f8 14             	cmp    eax,0x14
c0019cc6:	75 17                	jne    c0019cdf <FAT::tryMount(LogicalDisk*, int)+0x27>
c0019cc8:	83 ec 0c             	sub    esp,0xc
c0019ccb:	68 42 2c 02 c0       	push   0xc0022c42
c0019cd0:	e8 17 b7 ff ff       	call   c00153ec <Krnl::panic(char const*)>
c0019cd5:	83 c4 10             	add    esp,0x10
c0019cd8:	b0 00                	mov    al,0x0
c0019cda:	e9 d7 01 00 00       	jmp    c0019eb6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019cdf:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0019ce6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019cec:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019cf2:	3d 00 02 00 00       	cmp    eax,0x200
c0019cf7:	74 07                	je     c0019d00 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0019cf9:	b0 00                	mov    al,0x0
c0019cfb:	e9 b6 01 00 00       	jmp    c0019eb6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019d00:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0019d08:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0019d0f:	8b 04 85 c0 55 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaa40]
c0019d16:	83 f8 ff             	cmp    eax,0xffffffff
c0019d19:	74 07                	je     c0019d22 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0019d1b:	b0 01                	mov    al,0x1
c0019d1d:	e9 94 01 00 00       	jmp    c0019eb6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019d22:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0019d2c:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0019d34:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0019d3b:	88 c2                	mov    dl,al
c0019d3d:	a1 a0 55 02 c0       	mov    eax,ds:0xc00255a0
c0019d42:	01 d0                	add    eax,edx
c0019d44:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0019d4b:	8b 15 a0 55 02 c0    	mov    edx,DWORD PTR ds:0xc00255a0
c0019d51:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0019d58:	89 14 85 c0 55 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaa40],edx
c0019d5f:	a1 a0 55 02 c0       	mov    eax,ds:0xc00255a0
c0019d64:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0019d6b:	89 14 85 40 56 02 c0 	mov    DWORD PTR [eax*4-0x3ffda9c0],edx
c0019d72:	83 ec 0c             	sub    esp,0xc
c0019d75:	68 54 02 00 00       	push   0x254
c0019d7a:	e8 a8 21 ff ff       	call   c000bf27 <malloc>
c0019d7f:	83 c4 10             	add    esp,0x10
c0019d82:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0019d89:	83 ec 04             	sub    esp,0x4
c0019d8c:	6a 00                	push   0x0
c0019d8e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019d95:	50                   	push   eax
c0019d96:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019d9d:	e8 a7 ae fe ff       	call   c0004c49 <f_mount>
c0019da2:	83 c4 10             	add    esp,0x10
c0019da5:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019dac:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0019db4:	74 19                	je     c0019dcf <FAT::tryMount(LogicalDisk*, int)+0x117>
c0019db6:	83 ec 0c             	sub    esp,0xc
c0019db9:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019dc0:	e8 82 21 ff ff       	call   c000bf47 <rfree>
c0019dc5:	83 c4 10             	add    esp,0x10
c0019dc8:	b0 00                	mov    al,0x0
c0019dca:	e9 e7 00 00 00       	jmp    c0019eb6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019dcf:	83 ec 04             	sub    esp,0x4
c0019dd2:	68 00 01 00 00       	push   0x100
c0019dd7:	6a 00                	push   0x0
c0019dd9:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019de0:	50                   	push   eax
c0019de1:	e8 22 68 fe ff       	call   c0000608 <memset>
c0019de6:	83 c4 10             	add    esp,0x10
c0019de9:	83 ec 08             	sub    esp,0x8
c0019dec:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019df3:	50                   	push   eax
c0019df4:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019dfb:	50                   	push   eax
c0019dfc:	e8 5d 69 fe ff       	call   c000075e <strcat>
c0019e01:	83 c4 10             	add    esp,0x10
c0019e04:	83 ec 08             	sub    esp,0x8
c0019e07:	68 50 2c 02 c0       	push   0xc0022c50
c0019e0c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019e13:	50                   	push   eax
c0019e14:	e8 45 69 fe ff       	call   c000075e <strcat>
c0019e19:	83 c4 10             	add    esp,0x10
c0019e1c:	83 ec 04             	sub    esp,0x4
c0019e1f:	6a 01                	push   0x1
c0019e21:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0019e28:	50                   	push   eax
c0019e29:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019e2d:	50                   	push   eax
c0019e2e:	e8 78 ae fe ff       	call   c0004cab <f_open>
c0019e33:	83 c4 10             	add    esp,0x10
c0019e36:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0019e3d:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019e44:	85 c0                	test   eax,eax
c0019e46:	74 0a                	je     c0019e52 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0019e48:	78 2d                	js     c0019e77 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0019e4a:	83 e8 04             	sub    eax,0x4
c0019e4d:	83 f8 01             	cmp    eax,0x1
c0019e50:	77 25                	ja     c0019e77 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0019e52:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0019e5a:	83 ec 0c             	sub    esp,0xc
c0019e5d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019e61:	50                   	push   eax
c0019e62:	e8 96 b9 fe ff       	call   c00057fd <f_close>
c0019e67:	83 c4 10             	add    esp,0x10
c0019e6a:	90                   	nop
c0019e6b:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0019e73:	74 3a                	je     c0019eaf <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0019e75:	eb 2d                	jmp    c0019ea4 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0019e77:	83 ec 0c             	sub    esp,0xc
c0019e7a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0019e81:	e8 c1 20 ff ff       	call   c000bf47 <rfree>
c0019e86:	83 c4 10             	add    esp,0x10
c0019e89:	83 ec 04             	sub    esp,0x4
c0019e8c:	6a 00                	push   0x0
c0019e8e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019e95:	50                   	push   eax
c0019e96:	6a 00                	push   0x0
c0019e98:	e8 ac ad fe ff       	call   c0004c49 <f_mount>
c0019e9d:	83 c4 10             	add    esp,0x10
c0019ea0:	b0 00                	mov    al,0x0
c0019ea2:	eb 12                	jmp    c0019eb6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019ea4:	a1 a0 55 02 c0       	mov    eax,ds:0xc00255a0
c0019ea9:	40                   	inc    eax
c0019eaa:	a3 a0 55 02 c0       	mov    ds:0xc00255a0,eax
c0019eaf:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0019eb6:	81 c4 6c 03 00 00    	add    esp,0x36c
c0019ebc:	c3                   	ret    
c0019ebd:	90                   	nop

c0019ebe <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019ebe:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0019ec4:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0019ecc:	74 0a                	je     c0019ed8 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0019ece:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0019ed6:	75 0a                	jne    c0019ee2 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0019ed8:	b8 04 00 00 00       	mov    eax,0x4
c0019edd:	e9 dd 00 00 00       	jmp    c0019fbf <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c0019ee2:	83 ec 08             	sub    esp,0x8
c0019ee5:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019eec:	50                   	push   eax
c0019eed:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0019ef4:	e8 bc be fe ff       	call   c0005db5 <f_readdir>
c0019ef9:	83 c4 10             	add    esp,0x10
c0019efc:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0019f03:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0019f09:	83 ec 0c             	sub    esp,0xc
c0019f0c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0019f13:	83 c0 1a             	add    eax,0x1a
c0019f16:	50                   	push   eax
c0019f17:	e8 09 67 fe ff       	call   c0000625 <strlen>
c0019f1c:	83 c4 10             	add    esp,0x10
c0019f1f:	ba 00 00 00 00       	mov    edx,0x0
c0019f24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019f28:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0019f2c:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0019f33:	25 ff 00 00 00       	and    eax,0xff
c0019f38:	83 e0 10             	and    eax,0x10
c0019f3b:	74 07                	je     c0019f44 <FAT::readDir(void*, unsigned long, void*, int*)+0x86>
c0019f3d:	b8 02 00 00 00       	mov    eax,0x2
c0019f42:	eb 05                	jmp    c0019f49 <FAT::readDir(void*, unsigned long, void*, int*)+0x8b>
c0019f44:	b8 01 00 00 00       	mov    eax,0x1
c0019f49:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019f4d:	83 ec 08             	sub    esp,0x8
c0019f50:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019f57:	83 c0 1a             	add    eax,0x1a
c0019f5a:	50                   	push   eax
c0019f5b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019f5f:	83 c0 10             	add    eax,0x10
c0019f62:	50                   	push   eax
c0019f63:	e8 3f 67 fe ff       	call   c00006a7 <strcpy>
c0019f68:	83 c4 10             	add    esp,0x10
c0019f6b:	83 ec 04             	sub    esp,0x4
c0019f6e:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0019f75:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019f79:	50                   	push   eax
c0019f7a:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0019f81:	e8 4c 66 fe ff       	call   c00005d2 <memcpy>
c0019f86:	83 c4 10             	add    esp,0x10
c0019f89:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0019f90:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019f96:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0019f9d:	84 c0                	test   al,al
c0019f9f:	75 07                	jne    c0019fa8 <FAT::readDir(void*, unsigned long, void*, int*)+0xea>
c0019fa1:	b8 07 00 00 00       	mov    eax,0x7
c0019fa6:	eb 17                	jmp    c0019fbf <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c0019fa8:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0019faf:	85 c0                	test   eax,eax
c0019fb1:	75 07                	jne    c0019fba <FAT::readDir(void*, unsigned long, void*, int*)+0xfc>
c0019fb3:	b8 00 00 00 00       	mov    eax,0x0
c0019fb8:	eb 05                	jmp    c0019fbf <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c0019fba:	b8 01 00 00 00       	mov    eax,0x1
c0019fbf:	81 c4 3c 02 00 00    	add    esp,0x23c
c0019fc5:	c3                   	ret    

c0019fc6 <FAT::read(void*, unsigned long, void*, int*)>:
c0019fc6:	83 ec 1c             	sub    esp,0x1c
c0019fc9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019fce:	74 07                	je     c0019fd7 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0019fd0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019fd5:	75 07                	jne    c0019fde <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0019fd7:	b8 04 00 00 00       	mov    eax,0x4
c0019fdc:	eb 3d                	jmp    c001a01b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0019fde:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019fe2:	50                   	push   eax
c0019fe3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019fe7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019feb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019fef:	e8 f3 b0 fe ff       	call   c00050e7 <f_read>
c0019ff4:	83 c4 10             	add    esp,0x10
c0019ff7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019ffb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019fff:	89 c2                	mov    edx,eax
c001a001:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a005:	89 10                	mov    DWORD PTR [eax],edx
c001a007:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a00b:	85 c0                	test   eax,eax
c001a00d:	75 07                	jne    c001a016 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001a00f:	b8 00 00 00 00       	mov    eax,0x0
c001a014:	eb 05                	jmp    c001a01b <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a016:	b8 01 00 00 00       	mov    eax,0x1
c001a01b:	83 c4 1c             	add    esp,0x1c
c001a01e:	c3                   	ret    
c001a01f:	90                   	nop

c001a020 <FAT::write(void*, unsigned long, void*, int*)>:
c001a020:	83 ec 1c             	sub    esp,0x1c
c001a023:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a028:	74 07                	je     c001a031 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001a02a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a02f:	75 07                	jne    c001a038 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001a031:	b8 04 00 00 00       	mov    eax,0x4
c001a036:	eb 3d                	jmp    c001a075 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a038:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a03c:	50                   	push   eax
c001a03d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a041:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a045:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a049:	e8 19 b3 fe ff       	call   c0005367 <f_write>
c001a04e:	83 c4 10             	add    esp,0x10
c001a051:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a055:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a059:	89 c2                	mov    edx,eax
c001a05b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a05f:	89 10                	mov    DWORD PTR [eax],edx
c001a061:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a065:	85 c0                	test   eax,eax
c001a067:	75 07                	jne    c001a070 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001a069:	b8 00 00 00 00       	mov    eax,0x0
c001a06e:	eb 05                	jmp    c001a075 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a070:	b8 01 00 00 00       	mov    eax,0x1
c001a075:	83 c4 1c             	add    esp,0x1c
c001a078:	c3                   	ret    
c001a079:	90                   	nop

c001a07a <FAT::close(void*)>:
c001a07a:	83 ec 1c             	sub    esp,0x1c
c001a07d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a082:	75 07                	jne    c001a08b <FAT::close(void*)+0x11>
c001a084:	b8 04 00 00 00       	mov    eax,0x4
c001a089:	eb 36                	jmp    c001a0c1 <FAT::close(void*)+0x47>
c001a08b:	83 ec 0c             	sub    esp,0xc
c001a08e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a092:	e8 66 b7 fe ff       	call   c00057fd <f_close>
c001a097:	83 c4 10             	add    esp,0x10
c001a09a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a09e:	83 ec 0c             	sub    esp,0xc
c001a0a1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a0a5:	e8 8d 1e ff ff       	call   c000bf37 <free>
c001a0aa:	83 c4 10             	add    esp,0x10
c001a0ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0b1:	85 c0                	test   eax,eax
c001a0b3:	75 07                	jne    c001a0bc <FAT::close(void*)+0x42>
c001a0b5:	b8 00 00 00 00       	mov    eax,0x0
c001a0ba:	eb 05                	jmp    c001a0c1 <FAT::close(void*)+0x47>
c001a0bc:	b8 01 00 00 00       	mov    eax,0x1
c001a0c1:	83 c4 1c             	add    esp,0x1c
c001a0c4:	c3                   	ret    
c001a0c5:	90                   	nop

c001a0c6 <FAT::closeDir(void*)>:
c001a0c6:	83 ec 1c             	sub    esp,0x1c
c001a0c9:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a0ce:	75 07                	jne    c001a0d7 <FAT::closeDir(void*)+0x11>
c001a0d0:	b8 04 00 00 00       	mov    eax,0x4
c001a0d5:	eb 36                	jmp    c001a10d <FAT::closeDir(void*)+0x47>
c001a0d7:	83 ec 0c             	sub    esp,0xc
c001a0da:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a0de:	e8 b0 bc fe ff       	call   c0005d93 <f_closedir>
c001a0e3:	83 c4 10             	add    esp,0x10
c001a0e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a0ea:	83 ec 0c             	sub    esp,0xc
c001a0ed:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a0f1:	e8 41 1e ff ff       	call   c000bf37 <free>
c001a0f6:	83 c4 10             	add    esp,0x10
c001a0f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0fd:	85 c0                	test   eax,eax
c001a0ff:	75 07                	jne    c001a108 <FAT::closeDir(void*)+0x42>
c001a101:	b8 00 00 00 00       	mov    eax,0x0
c001a106:	eb 05                	jmp    c001a10d <FAT::closeDir(void*)+0x47>
c001a108:	b8 01 00 00 00       	mov    eax,0x1
c001a10d:	83 c4 1c             	add    esp,0x1c
c001a110:	c3                   	ret    
c001a111:	90                   	nop

c001a112 <FAT::seek(void*, unsigned long long)>:
c001a112:	83 ec 2c             	sub    esp,0x2c
c001a115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a119:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a11d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a121:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a125:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a12a:	75 07                	jne    c001a133 <FAT::seek(void*, unsigned long long)+0x21>
c001a12c:	b8 04 00 00 00       	mov    eax,0x4
c001a131:	eb 2f                	jmp    c001a162 <FAT::seek(void*, unsigned long long)+0x50>
c001a133:	83 ec 04             	sub    esp,0x4
c001a136:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a13a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a13e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a142:	e8 e5 b6 fe ff       	call   c000582c <f_lseek>
c001a147:	83 c4 10             	add    esp,0x10
c001a14a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a14e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a152:	85 c0                	test   eax,eax
c001a154:	75 07                	jne    c001a15d <FAT::seek(void*, unsigned long long)+0x4b>
c001a156:	b8 00 00 00 00       	mov    eax,0x0
c001a15b:	eb 05                	jmp    c001a162 <FAT::seek(void*, unsigned long long)+0x50>
c001a15d:	b8 01 00 00 00       	mov    eax,0x1
c001a162:	83 c4 2c             	add    esp,0x2c
c001a165:	c3                   	ret    

c001a166 <fatWrapperReadDisk>:
c001a166:	83 ec 1c             	sub    esp,0x1c
c001a169:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a16d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a171:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a175:	89 04 24             	mov    DWORD PTR [esp],eax
c001a178:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a17c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a180:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a184:	25 ff 00 00 00       	and    eax,0xff
c001a189:	8b 04 85 20 47 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb8e0]
c001a190:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a194:	83 ec 0c             	sub    esp,0xc
c001a197:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a19b:	52                   	push   edx
c001a19c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1a4:	50                   	push   eax
c001a1a5:	e8 6e 80 ff ff       	call   c0012218 <LogicalDisk::read(unsigned long long, int, void*)>
c001a1aa:	83 c4 20             	add    esp,0x20
c001a1ad:	83 c4 1c             	add    esp,0x1c
c001a1b0:	c3                   	ret    

c001a1b1 <fatWrapperWriteDisk>:
c001a1b1:	83 ec 1c             	sub    esp,0x1c
c001a1b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a1b8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a1bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a1c0:	89 04 24             	mov    DWORD PTR [esp],eax
c001a1c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a1c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a1cb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a1cf:	25 ff 00 00 00       	and    eax,0xff
c001a1d4:	8b 04 85 20 47 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb8e0]
c001a1db:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a1df:	83 ec 0c             	sub    esp,0xc
c001a1e2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a1e6:	52                   	push   edx
c001a1e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a1ef:	50                   	push   eax
c001a1f0:	e8 8f 80 ff ff       	call   c0012284 <LogicalDisk::write(unsigned long long, int, void*)>
c001a1f5:	83 c4 20             	add    esp,0x20
c001a1f8:	83 c4 1c             	add    esp,0x1c
c001a1fb:	c3                   	ret    

c001a1fc <fatWrapperIoctl>:
c001a1fc:	53                   	push   ebx
c001a1fd:	83 ec 28             	sub    esp,0x28
c001a200:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a204:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a208:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a20c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a210:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001a215:	75 35                	jne    c001a24c <fatWrapperIoctl+0x50>
c001a217:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a21b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a21f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a223:	25 ff 00 00 00       	and    eax,0xff
c001a228:	8b 04 85 20 47 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb8e0]
c001a22f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a235:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a23b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a23f:	66 89 02             	mov    WORD PTR [edx],ax
c001a242:	b8 00 00 00 00       	mov    eax,0x0
c001a247:	e9 bb 00 00 00       	jmp    c001a307 <fatWrapperIoctl+0x10b>
c001a24c:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001a251:	75 73                	jne    c001a2c6 <fatWrapperIoctl+0xca>
c001a253:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a257:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a25b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a25f:	25 ff 00 00 00       	and    eax,0xff
c001a264:	8b 04 85 20 47 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb8e0]
c001a26b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a271:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a277:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a27d:	89 c8                	mov    eax,ecx
c001a27f:	89 da                	mov    edx,ebx
c001a281:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a285:	c1 e0 0a             	shl    eax,0xa
c001a288:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a28c:	81 e1 ff 00 00 00    	and    ecx,0xff
c001a292:	8b 0c 8d 20 47 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb8e0]
c001a299:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a29f:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a2a5:	89 cb                	mov    ebx,ecx
c001a2a7:	c1 fb 1f             	sar    ebx,0x1f
c001a2aa:	53                   	push   ebx
c001a2ab:	51                   	push   ecx
c001a2ac:	52                   	push   edx
c001a2ad:	50                   	push   eax
c001a2ae:	e8 f9 4b 00 00       	call   c001eeac <__udivdi3>
c001a2b3:	83 c4 10             	add    esp,0x10
c001a2b6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a2ba:	89 01                	mov    DWORD PTR [ecx],eax
c001a2bc:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a2bf:	b8 00 00 00 00       	mov    eax,0x0
c001a2c4:	eb 41                	jmp    c001a307 <fatWrapperIoctl+0x10b>
c001a2c6:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001a2cb:	75 07                	jne    c001a2d4 <fatWrapperIoctl+0xd8>
c001a2cd:	b8 00 00 00 00       	mov    eax,0x0
c001a2d2:	eb 33                	jmp    c001a307 <fatWrapperIoctl+0x10b>
c001a2d4:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001a2d9:	75 19                	jne    c001a2f4 <fatWrapperIoctl+0xf8>
c001a2db:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a2df:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a2e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a2e7:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a2ed:	b8 00 00 00 00       	mov    eax,0x0
c001a2f2:	eb 13                	jmp    c001a307 <fatWrapperIoctl+0x10b>
c001a2f4:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001a2f9:	75 07                	jne    c001a302 <fatWrapperIoctl+0x106>
c001a2fb:	b8 00 00 00 00       	mov    eax,0x0
c001a300:	eb 05                	jmp    c001a307 <fatWrapperIoctl+0x10b>
c001a302:	b8 04 00 00 00       	mov    eax,0x4
c001a307:	83 c4 28             	add    esp,0x28
c001a30a:	5b                   	pop    ebx
c001a30b:	c3                   	ret    

c001a30c <FAT::FAT()>:
c001a30c:	83 ec 1c             	sub    esp,0x1c
c001a30f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a313:	83 ec 0c             	sub    esp,0xc
c001a316:	50                   	push   eax
c001a317:	e8 4a 51 ff ff       	call   c000f466 <Filesystem::Filesystem()>
c001a31c:	83 c4 10             	add    esp,0x10
c001a31f:	ba 8c 2c 02 c0       	mov    edx,0xc0022c8c
c001a324:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a328:	89 10                	mov    DWORD PTR [eax],edx
c001a32a:	c7 05 a0 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00255a0,0x0
c001a334:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a33c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a341:	7f 15                	jg     c001a358 <FAT::FAT()+0x4c>
c001a343:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a347:	c7 04 85 c0 55 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdaa40],0xffffffff
c001a352:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a356:	eb e4                	jmp    c001a33c <FAT::FAT()+0x30>
c001a358:	90                   	nop
c001a359:	83 c4 1c             	add    esp,0x1c
c001a35c:	c3                   	ret    
c001a35d:	90                   	nop

c001a35e <FAT::fixFilepath(char*)>:
c001a35e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a362:	8a 00                	mov    al,BYTE PTR [eax]
c001a364:	3c 40                	cmp    al,0x40
c001a366:	7e 2c                	jle    c001a394 <FAT::fixFilepath(char*)+0x36>
c001a368:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a36c:	8a 00                	mov    al,BYTE PTR [eax]
c001a36e:	83 e8 41             	sub    eax,0x41
c001a371:	88 c2                	mov    dl,al
c001a373:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a377:	88 10                	mov    BYTE PTR [eax],dl
c001a379:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a37d:	8a 00                	mov    al,BYTE PTR [eax]
c001a37f:	0f be c0             	movsx  eax,al
c001a382:	8b 04 85 c0 55 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaa40]
c001a389:	83 c0 30             	add    eax,0x30
c001a38c:	88 c2                	mov    dl,al
c001a38e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a392:	88 10                	mov    BYTE PTR [eax],dl
c001a394:	90                   	nop
c001a395:	c3                   	ret    

c001a396 <FAT::open(char const*, void**, FileOpenMode)>:
c001a396:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a39c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a3a4:	74 0a                	je     c001a3b0 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001a3a6:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a3ae:	75 0a                	jne    c001a3ba <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001a3b0:	b8 04 00 00 00       	mov    eax,0x4
c001a3b5:	e9 00 01 00 00       	jmp    c001a4ba <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001a3ba:	83 ec 08             	sub    esp,0x8
c001a3bd:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a3c4:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a3c8:	50                   	push   eax
c001a3c9:	e8 d9 62 fe ff       	call   c00006a7 <strcpy>
c001a3ce:	83 c4 10             	add    esp,0x10
c001a3d1:	83 ec 08             	sub    esp,0x8
c001a3d4:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a3d8:	50                   	push   eax
c001a3d9:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a3e0:	e8 79 ff ff ff       	call   c001a35e <FAT::fixFilepath(char*)>
c001a3e5:	83 c4 10             	add    esp,0x10
c001a3e8:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001a3f0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a3f7:	83 e0 01             	and    eax,0x1
c001a3fa:	74 08                	je     c001a404 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001a3fc:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001a404:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a40b:	83 e0 04             	and    eax,0x4
c001a40e:	74 10                	je     c001a420 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001a410:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001a418:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001a420:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a427:	83 e0 02             	and    eax,0x2
c001a42a:	74 08                	je     c001a434 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001a42c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001a434:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a43b:	83 e0 08             	and    eax,0x8
c001a43e:	74 08                	je     c001a448 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001a440:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001a448:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a44f:	83 e0 10             	and    eax,0x10
c001a452:	74 08                	je     c001a45c <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001a454:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001a45c:	83 ec 0c             	sub    esp,0xc
c001a45f:	68 50 02 00 00       	push   0x250
c001a464:	e8 be 1a ff ff       	call   c000bf27 <malloc>
c001a469:	83 c4 10             	add    esp,0x10
c001a46c:	89 c2                	mov    edx,eax
c001a46e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a475:	89 10                	mov    DWORD PTR [eax],edx
c001a477:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a47e:	31 d2                	xor    edx,edx
c001a480:	88 c2                	mov    dl,al
c001a482:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a489:	8b 00                	mov    eax,DWORD PTR [eax]
c001a48b:	83 ec 04             	sub    esp,0x4
c001a48e:	52                   	push   edx
c001a48f:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a493:	52                   	push   edx
c001a494:	50                   	push   eax
c001a495:	e8 11 a8 fe ff       	call   c0004cab <f_open>
c001a49a:	83 c4 10             	add    esp,0x10
c001a49d:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001a4a4:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001a4ac:	74 07                	je     c001a4b5 <FAT::open(char const*, void**, FileOpenMode)+0x11f>
c001a4ae:	b8 01 00 00 00       	mov    eax,0x1
c001a4b3:	eb 05                	jmp    c001a4ba <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001a4b5:	b8 00 00 00 00       	mov    eax,0x0
c001a4ba:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a4c0:	c3                   	ret    
c001a4c1:	90                   	nop

c001a4c2 <FAT::openDir(char const*, void**)>:
c001a4c2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a4c8:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a4d0:	74 0a                	je     c001a4dc <FAT::openDir(char const*, void**)+0x1a>
c001a4d2:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a4da:	75 07                	jne    c001a4e3 <FAT::openDir(char const*, void**)+0x21>
c001a4dc:	b8 04 00 00 00       	mov    eax,0x4
c001a4e1:	eb 7d                	jmp    c001a560 <FAT::openDir(char const*, void**)+0x9e>
c001a4e3:	83 ec 08             	sub    esp,0x8
c001a4e6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a4ed:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a4f1:	50                   	push   eax
c001a4f2:	e8 b0 61 fe ff       	call   c00006a7 <strcpy>
c001a4f7:	83 c4 10             	add    esp,0x10
c001a4fa:	83 ec 08             	sub    esp,0x8
c001a4fd:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a501:	50                   	push   eax
c001a502:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a509:	e8 50 fe ff ff       	call   c001a35e <FAT::fixFilepath(char*)>
c001a50e:	83 c4 10             	add    esp,0x10
c001a511:	83 ec 0c             	sub    esp,0xc
c001a514:	6a 4c                	push   0x4c
c001a516:	e8 0c 1a ff ff       	call   c000bf27 <malloc>
c001a51b:	83 c4 10             	add    esp,0x10
c001a51e:	89 c2                	mov    edx,eax
c001a520:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a527:	89 10                	mov    DWORD PTR [eax],edx
c001a529:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a530:	8b 00                	mov    eax,DWORD PTR [eax]
c001a532:	83 ec 08             	sub    esp,0x8
c001a535:	8d 54 24 14          	lea    edx,[esp+0x14]
c001a539:	52                   	push   edx
c001a53a:	50                   	push   eax
c001a53b:	e8 51 b7 fe ff       	call   c0005c91 <f_opendir>
c001a540:	83 c4 10             	add    esp,0x10
c001a543:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a54a:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001a552:	74 07                	je     c001a55b <FAT::openDir(char const*, void**)+0x99>
c001a554:	b8 01 00 00 00       	mov    eax,0x1
c001a559:	eb 05                	jmp    c001a560 <FAT::openDir(char const*, void**)+0x9e>
c001a55b:	b8 00 00 00 00       	mov    eax,0x0
c001a560:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a566:	c3                   	ret    
c001a567:	90                   	nop

c001a568 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001a568:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a56e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001a576:	75 0a                	jne    c001a582 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001a578:	b8 04 00 00 00       	mov    eax,0x4
c001a57d:	e9 cb 00 00 00       	jmp    c001a64d <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001a582:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001a58a:	75 0a                	jne    c001a596 <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001a58c:	b8 04 00 00 00       	mov    eax,0x4
c001a591:	e9 b7 00 00 00       	jmp    c001a64d <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001a596:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001a59e:	75 0a                	jne    c001a5aa <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001a5a0:	b8 04 00 00 00       	mov    eax,0x4
c001a5a5:	e9 a3 00 00 00       	jmp    c001a64d <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001a5aa:	83 ec 08             	sub    esp,0x8
c001a5ad:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a5b4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a5bb:	50                   	push   eax
c001a5bc:	e8 e6 60 fe ff       	call   c00006a7 <strcpy>
c001a5c1:	83 c4 10             	add    esp,0x10
c001a5c4:	83 ec 08             	sub    esp,0x8
c001a5c7:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a5ce:	50                   	push   eax
c001a5cf:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a5d6:	e8 83 fd ff ff       	call   c001a35e <FAT::fixFilepath(char*)>
c001a5db:	83 c4 10             	add    esp,0x10
c001a5de:	83 ec 08             	sub    esp,0x8
c001a5e1:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a5e5:	50                   	push   eax
c001a5e6:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a5ed:	50                   	push   eax
c001a5ee:	e8 5d b8 fe ff       	call   c0005e50 <f_stat>
c001a5f3:	83 c4 10             	add    esp,0x10
c001a5f6:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a5fd:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a604:	85 c0                	test   eax,eax
c001a606:	74 07                	je     c001a60f <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001a608:	83 f8 04             	cmp    eax,0x4
c001a60b:	74 34                	je     c001a641 <FAT::stat(char const*, unsigned long long*, bool*)+0xd9>
c001a60d:	eb 39                	jmp    c001a648 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a60f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a613:	25 ff 00 00 00       	and    eax,0xff
c001a618:	83 e0 10             	and    eax,0x10
c001a61b:	0f 95 c2             	setne  dl
c001a61e:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a625:	88 10                	mov    BYTE PTR [eax],dl
c001a627:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a62a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a62e:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a635:	89 01                	mov    DWORD PTR [ecx],eax
c001a637:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a63a:	b8 00 00 00 00       	mov    eax,0x0
c001a63f:	eb 0c                	jmp    c001a64d <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001a641:	b8 02 00 00 00       	mov    eax,0x2
c001a646:	eb 05                	jmp    c001a64d <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001a648:	b8 01 00 00 00       	mov    eax,0x1
c001a64d:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a653:	c3                   	ret    

c001a654 <FAT::unlink(char const*)>:
c001a654:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a65a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a662:	75 07                	jne    c001a66b <FAT::unlink(char const*)+0x17>
c001a664:	b8 04 00 00 00       	mov    eax,0x4
c001a669:	eb 5c                	jmp    c001a6c7 <FAT::unlink(char const*)+0x73>
c001a66b:	83 ec 08             	sub    esp,0x8
c001a66e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a675:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a679:	50                   	push   eax
c001a67a:	e8 28 60 fe ff       	call   c00006a7 <strcpy>
c001a67f:	83 c4 10             	add    esp,0x10
c001a682:	83 ec 08             	sub    esp,0x8
c001a685:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a689:	50                   	push   eax
c001a68a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a691:	e8 c8 fc ff ff       	call   c001a35e <FAT::fixFilepath(char*)>
c001a696:	83 c4 10             	add    esp,0x10
c001a699:	83 ec 0c             	sub    esp,0xc
c001a69c:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a6a0:	50                   	push   eax
c001a6a1:	e8 19 bb fe ff       	call   c00061bf <f_unlink>
c001a6a6:	83 c4 10             	add    esp,0x10
c001a6a9:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a6b0:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a6b7:	85 c0                	test   eax,eax
c001a6b9:	75 07                	jne    c001a6c2 <FAT::unlink(char const*)+0x6e>
c001a6bb:	b8 00 00 00 00       	mov    eax,0x0
c001a6c0:	eb 05                	jmp    c001a6c7 <FAT::unlink(char const*)+0x73>
c001a6c2:	b8 01 00 00 00       	mov    eax,0x1
c001a6c7:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a6cd:	c3                   	ret    

c001a6ce <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a6ce:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a6d4:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a6db:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a6e2:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a6e6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a6ea:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a6f2:	75 0a                	jne    c001a6fe <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a6f4:	b8 04 00 00 00       	mov    eax,0x4
c001a6f9:	e9 43 01 00 00       	jmp    c001a841 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001a6fe:	83 ec 08             	sub    esp,0x8
c001a701:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a708:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a70c:	50                   	push   eax
c001a70d:	e8 95 5f fe ff       	call   c00006a7 <strcpy>
c001a712:	83 c4 10             	add    esp,0x10
c001a715:	83 ec 08             	sub    esp,0x8
c001a718:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a71c:	50                   	push   eax
c001a71d:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a724:	e8 35 fc ff ff       	call   c001a35e <FAT::fixFilepath(char*)>
c001a729:	83 c4 10             	add    esp,0x10
c001a72c:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a734:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a73c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001a740:	25 ff 00 00 00       	and    eax,0xff
c001a745:	83 e0 01             	and    eax,0x1
c001a748:	74 08                	je     c001a752 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001a74a:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001a752:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001a756:	25 ff 00 00 00       	and    eax,0xff
c001a75b:	83 e0 02             	and    eax,0x2
c001a75e:	74 08                	je     c001a768 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9a>
c001a760:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001a768:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001a76c:	25 ff 00 00 00       	and    eax,0xff
c001a771:	83 e0 04             	and    eax,0x4
c001a774:	74 08                	je     c001a77e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb0>
c001a776:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001a77e:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001a782:	25 ff 00 00 00       	and    eax,0xff
c001a787:	83 e0 08             	and    eax,0x8
c001a78a:	74 08                	je     c001a794 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc6>
c001a78c:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001a794:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a798:	25 ff 00 00 00       	and    eax,0xff
c001a79d:	83 e0 01             	and    eax,0x1
c001a7a0:	74 08                	je     c001a7aa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xdc>
c001a7a2:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001a7aa:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a7ae:	25 ff 00 00 00       	and    eax,0xff
c001a7b3:	83 e0 02             	and    eax,0x2
c001a7b6:	74 08                	je     c001a7c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf2>
c001a7b8:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001a7c0:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a7c4:	25 ff 00 00 00       	and    eax,0xff
c001a7c9:	83 e0 04             	and    eax,0x4
c001a7cc:	74 08                	je     c001a7d6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x108>
c001a7ce:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001a7d6:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a7da:	25 ff 00 00 00       	and    eax,0xff
c001a7df:	83 e0 08             	and    eax,0x8
c001a7e2:	74 08                	je     c001a7ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11e>
c001a7e4:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001a7ec:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a7f3:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001a7fa:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a801:	31 d2                	xor    edx,edx
c001a803:	88 c2                	mov    dl,al
c001a805:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a80c:	25 ff 00 00 00       	and    eax,0xff
c001a811:	83 ec 04             	sub    esp,0x4
c001a814:	52                   	push   edx
c001a815:	50                   	push   eax
c001a816:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a81a:	50                   	push   eax
c001a81b:	e8 3f c0 fe ff       	call   c000685f <f_chmod>
c001a820:	83 c4 10             	add    esp,0x10
c001a823:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a82a:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a831:	85 c0                	test   eax,eax
c001a833:	75 07                	jne    c001a83c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x16e>
c001a835:	b8 00 00 00 00       	mov    eax,0x0
c001a83a:	eb 05                	jmp    c001a841 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001a83c:	b8 01 00 00 00       	mov    eax,0x1
c001a841:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a847:	c3                   	ret    

c001a848 <FAT::rename(char const*, char const*)>:
c001a848:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a84e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a856:	74 0a                	je     c001a862 <FAT::rename(char const*, char const*)+0x1a>
c001a858:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a860:	75 0a                	jne    c001a86c <FAT::rename(char const*, char const*)+0x24>
c001a862:	b8 04 00 00 00       	mov    eax,0x4
c001a867:	e9 98 00 00 00       	jmp    c001a904 <FAT::rename(char const*, char const*)+0xbc>
c001a86c:	83 ec 08             	sub    esp,0x8
c001a86f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a876:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a87d:	50                   	push   eax
c001a87e:	e8 24 5e fe ff       	call   c00006a7 <strcpy>
c001a883:	83 c4 10             	add    esp,0x10
c001a886:	83 ec 08             	sub    esp,0x8
c001a889:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a890:	50                   	push   eax
c001a891:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a898:	e8 c1 fa ff ff       	call   c001a35e <FAT::fixFilepath(char*)>
c001a89d:	83 c4 10             	add    esp,0x10
c001a8a0:	83 ec 08             	sub    esp,0x8
c001a8a3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a8aa:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a8ae:	50                   	push   eax
c001a8af:	e8 f3 5d fe ff       	call   c00006a7 <strcpy>
c001a8b4:	83 c4 10             	add    esp,0x10
c001a8b7:	83 ec 08             	sub    esp,0x8
c001a8ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a8be:	50                   	push   eax
c001a8bf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a8c6:	e8 93 fa ff ff       	call   c001a35e <FAT::fixFilepath(char*)>
c001a8cb:	83 c4 10             	add    esp,0x10
c001a8ce:	83 ec 08             	sub    esp,0x8
c001a8d1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a8d5:	50                   	push   eax
c001a8d6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a8dd:	50                   	push   eax
c001a8de:	e8 89 bc fe ff       	call   c000656c <f_rename>
c001a8e3:	83 c4 10             	add    esp,0x10
c001a8e6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001a8ed:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001a8f4:	85 c0                	test   eax,eax
c001a8f6:	75 07                	jne    c001a8ff <FAT::rename(char const*, char const*)+0xb7>
c001a8f8:	b8 00 00 00 00       	mov    eax,0x0
c001a8fd:	eb 05                	jmp    c001a904 <FAT::rename(char const*, char const*)+0xbc>
c001a8ff:	b8 01 00 00 00       	mov    eax,0x1
c001a904:	81 c4 1c 02 00 00    	add    esp,0x21c
c001a90a:	c3                   	ret    
c001a90b:	90                   	nop

c001a90c <FAT::mkdir(char const*)>:
c001a90c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a912:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a91a:	75 07                	jne    c001a923 <FAT::mkdir(char const*)+0x17>
c001a91c:	b8 04 00 00 00       	mov    eax,0x4
c001a921:	eb 5c                	jmp    c001a97f <FAT::mkdir(char const*)+0x73>
c001a923:	83 ec 08             	sub    esp,0x8
c001a926:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a92d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a931:	50                   	push   eax
c001a932:	e8 70 5d fe ff       	call   c00006a7 <strcpy>
c001a937:	83 c4 10             	add    esp,0x10
c001a93a:	83 ec 08             	sub    esp,0x8
c001a93d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a941:	50                   	push   eax
c001a942:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a949:	e8 10 fa ff ff       	call   c001a35e <FAT::fixFilepath(char*)>
c001a94e:	83 c4 10             	add    esp,0x10
c001a951:	83 ec 0c             	sub    esp,0xc
c001a954:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a958:	50                   	push   eax
c001a959:	e8 e2 b9 fe ff       	call   c0006340 <f_mkdir>
c001a95e:	83 c4 10             	add    esp,0x10
c001a961:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a968:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a96f:	85 c0                	test   eax,eax
c001a971:	75 07                	jne    c001a97a <FAT::mkdir(char const*)+0x6e>
c001a973:	b8 00 00 00 00       	mov    eax,0x0
c001a978:	eb 05                	jmp    c001a97f <FAT::mkdir(char const*)+0x73>
c001a97a:	b8 01 00 00 00       	mov    eax,0x1
c001a97f:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a985:	c3                   	ret    

c001a986 <FAT::exists(char const*)>:
c001a986:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a98c:	83 ec 08             	sub    esp,0x8
c001a98f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a996:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a99a:	50                   	push   eax
c001a99b:	e8 07 5d fe ff       	call   c00006a7 <strcpy>
c001a9a0:	83 c4 10             	add    esp,0x10
c001a9a3:	83 ec 08             	sub    esp,0x8
c001a9a6:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a9aa:	50                   	push   eax
c001a9ab:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a9b2:	e8 a7 f9 ff ff       	call   c001a35e <FAT::fixFilepath(char*)>
c001a9b7:	83 c4 10             	add    esp,0x10
c001a9ba:	83 ec 08             	sub    esp,0x8
c001a9bd:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001a9c4:	50                   	push   eax
c001a9c5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a9c9:	50                   	push   eax
c001a9ca:	e8 81 b4 fe ff       	call   c0005e50 <f_stat>
c001a9cf:	83 c4 10             	add    esp,0x10
c001a9d2:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a9d9:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a9e0:	85 c0                	test   eax,eax
c001a9e2:	75 04                	jne    c001a9e8 <FAT::exists(char const*)+0x62>
c001a9e4:	b0 01                	mov    al,0x1
c001a9e6:	eb 02                	jmp    c001a9ea <FAT::exists(char const*)+0x64>
c001a9e8:	b0 00                	mov    al,0x0
c001a9ea:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a9f0:	c3                   	ret    
c001a9f1:	90                   	nop

c001a9f2 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001a9f2:	b8 08 00 00 00       	mov    eax,0x8
c001a9f7:	c3                   	ret    

c001a9f8 <ISO9660::seek(void*, unsigned long long)>:
c001a9f8:	53                   	push   ebx
c001a9f9:	b8 04 00 00 00       	mov    eax,0x4
c001a9fe:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aa02:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa06:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001aa0a:	85 d2                	test   edx,edx
c001aa0c:	74 17                	je     c001aa25 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001aa0e:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001aa11:	89 c8                	mov    eax,ecx
c001aa13:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001aa16:	b8 01 00 00 00       	mov    eax,0x1
c001aa1b:	73 08                	jae    c001aa25 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001aa1d:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001aa20:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001aa23:	31 c0                	xor    eax,eax
c001aa25:	5b                   	pop    ebx
c001aa26:	c3                   	ret    
c001aa27:	90                   	nop

c001aa28 <ISO9660::tell(void*, unsigned long long*)>:
c001aa28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aa2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aa30:	85 d2                	test   edx,edx
c001aa32:	74 12                	je     c001aa46 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001aa34:	85 c0                	test   eax,eax
c001aa36:	74 0e                	je     c001aa46 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001aa38:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aa3b:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001aa3e:	89 10                	mov    DWORD PTR [eax],edx
c001aa40:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001aa43:	31 c0                	xor    eax,eax
c001aa45:	c3                   	ret    
c001aa46:	b8 04 00 00 00       	mov    eax,0x4
c001aa4b:	c3                   	ret    

c001aa4c <ISO9660::getName()>:
c001aa4c:	b8 e8 2c 02 c0       	mov    eax,0xc0022ce8
c001aa51:	c3                   	ret    

c001aa52 <ISO9660::stat(void*, unsigned long long*)>:
c001aa52:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aa56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aa5a:	85 d2                	test   edx,edx
c001aa5c:	74 12                	je     c001aa70 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001aa5e:	85 c0                	test   eax,eax
c001aa60:	74 0e                	je     c001aa70 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001aa62:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001aa65:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001aa68:	89 10                	mov    DWORD PTR [eax],edx
c001aa6a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001aa6d:	31 c0                	xor    eax,eax
c001aa6f:	c3                   	ret    
c001aa70:	b8 04 00 00 00       	mov    eax,0x4
c001aa75:	c3                   	ret    

c001aa76 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001aa76:	b8 01 00 00 00       	mov    eax,0x1
c001aa7b:	c3                   	ret    

c001aa7c <ISO9660::unlink(char const*)>:
c001aa7c:	b8 01 00 00 00       	mov    eax,0x1
c001aa81:	c3                   	ret    

c001aa82 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001aa82:	b8 01 00 00 00       	mov    eax,0x1
c001aa87:	c3                   	ret    

c001aa88 <ISO9660::rename(char const*, char const*)>:
c001aa88:	b8 01 00 00 00       	mov    eax,0x1
c001aa8d:	c3                   	ret    

c001aa8e <ISO9660::mkdir(char const*)>:
c001aa8e:	b8 01 00 00 00       	mov    eax,0x1
c001aa93:	c3                   	ret    

c001aa94 <ISO9660::close(void*)>:
c001aa94:	83 ec 0c             	sub    esp,0xc
c001aa97:	b8 04 00 00 00       	mov    eax,0x4
c001aa9c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aaa0:	85 d2                	test   edx,edx
c001aaa2:	74 0e                	je     c001aab2 <ISO9660::close(void*)+0x1e>
c001aaa4:	83 ec 0c             	sub    esp,0xc
c001aaa7:	52                   	push   edx
c001aaa8:	e8 8a 14 ff ff       	call   c000bf37 <free>
c001aaad:	83 c4 10             	add    esp,0x10
c001aab0:	31 c0                	xor    eax,eax
c001aab2:	83 c4 0c             	add    esp,0xc
c001aab5:	c3                   	ret    

c001aab6 <ISO9660::closeDir(void*)>:
c001aab6:	83 ec 0c             	sub    esp,0xc
c001aab9:	b8 04 00 00 00       	mov    eax,0x4
c001aabe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001aac2:	85 d2                	test   edx,edx
c001aac4:	74 0e                	je     c001aad4 <ISO9660::closeDir(void*)+0x1e>
c001aac6:	83 ec 0c             	sub    esp,0xc
c001aac9:	52                   	push   edx
c001aaca:	e8 68 14 ff ff       	call   c000bf37 <free>
c001aacf:	83 c4 10             	add    esp,0x10
c001aad2:	31 c0                	xor    eax,eax
c001aad4:	83 c4 0c             	add    esp,0xc
c001aad7:	c3                   	ret    

c001aad8 <ISO9660::~ISO9660()>:
c001aad8:	83 ec 0c             	sub    esp,0xc
c001aadb:	ba 3c 2d 02 c0       	mov    edx,0xc0022d3c
c001aae0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aae4:	89 10                	mov    DWORD PTR [eax],edx
c001aae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aaea:	83 ec 0c             	sub    esp,0xc
c001aaed:	50                   	push   eax
c001aaee:	e8 97 49 ff ff       	call   c000f48a <Filesystem::~Filesystem()>
c001aaf3:	83 c4 10             	add    esp,0x10
c001aaf6:	90                   	nop
c001aaf7:	83 c4 0c             	add    esp,0xc
c001aafa:	c3                   	ret    
c001aafb:	90                   	nop

c001aafc <ISO9660::~ISO9660()>:
c001aafc:	83 ec 0c             	sub    esp,0xc
c001aaff:	83 ec 0c             	sub    esp,0xc
c001ab02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab06:	e8 cd ff ff ff       	call   c001aad8 <ISO9660::~ISO9660()>
c001ab0b:	83 c4 10             	add    esp,0x10
c001ab0e:	83 ec 08             	sub    esp,0x8
c001ab11:	6a 08                	push   0x8
c001ab13:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ab17:	e8 17 45 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001ab1c:	83 c4 10             	add    esp,0x10
c001ab1f:	83 c4 0c             	add    esp,0xc
c001ab22:	c3                   	ret    

c001ab23 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001ab23:	55                   	push   ebp
c001ab24:	31 c9                	xor    ecx,ecx
c001ab26:	57                   	push   edi
c001ab27:	56                   	push   esi
c001ab28:	53                   	push   ebx
c001ab29:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ab2d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001ab31:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001ab35:	89 eb                	mov    ebx,ebp
c001ab37:	39 ce                	cmp    esi,ecx
c001ab39:	7e 17                	jle    c001ab52 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001ab3b:	31 d2                	xor    edx,edx
c001ab3d:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001ab41:	7d 13                	jge    c001ab56 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001ab43:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ab47:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001ab4a:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001ab4d:	75 0d                	jne    c001ab5c <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001ab4f:	42                   	inc    edx
c001ab50:	eb eb                	jmp    c001ab3d <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001ab52:	31 c0                	xor    eax,eax
c001ab54:	eb 0a                	jmp    c001ab60 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ab56:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001ab5a:	eb 04                	jmp    c001ab60 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001ab5c:	41                   	inc    ecx
c001ab5d:	43                   	inc    ebx
c001ab5e:	eb d7                	jmp    c001ab37 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001ab60:	5b                   	pop    ebx
c001ab61:	5e                   	pop    esi
c001ab62:	5f                   	pop    edi
c001ab63:	5d                   	pop    ebp
c001ab64:	c3                   	ret    

c001ab65 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001ab65:	56                   	push   esi
c001ab66:	53                   	push   ebx
c001ab67:	52                   	push   edx
c001ab68:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ab6c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ab70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ab74:	39 0d a0 56 02 c0    	cmp    DWORD PTR ds:0xc00256a0,ecx
c001ab7a:	75 08                	jne    c001ab84 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001ab7c:	38 05 48 3b 02 c0    	cmp    BYTE PTR ds:0xc0023b48,al
c001ab82:	74 2b                	je     c001abaf <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001ab84:	83 ec 0c             	sub    esp,0xc
c001ab87:	31 db                	xor    ebx,ebx
c001ab89:	a2 48 3b 02 c0       	mov    ds:0xc0023b48,al
c001ab8e:	89 0d a0 56 02 c0    	mov    DWORD PTR ds:0xc00256a0,ecx
c001ab94:	68 c0 56 02 c0       	push   0xc00256c0
c001ab99:	6a 01                	push   0x1
c001ab9b:	53                   	push   ebx
c001ab9c:	0f be c0             	movsx  eax,al
c001ab9f:	51                   	push   ecx
c001aba0:	ff 34 85 1c 46 02 c0 	push   DWORD PTR [eax*4-0x3ffdb9e4]
c001aba7:	e8 6c 76 ff ff       	call   c0012218 <LogicalDisk::read(unsigned long long, int, void*)>
c001abac:	83 c4 20             	add    esp,0x20
c001abaf:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001abb7:	c7 44 24 14 c0 56 02 c0 	mov    DWORD PTR [esp+0x14],0xc00256c0
c001abbf:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001abc3:	58                   	pop    eax
c001abc4:	5b                   	pop    ebx
c001abc5:	5e                   	pop    esi
c001abc6:	e9 07 5a fe ff       	jmp    c00005d2 <memcpy>
c001abcb:	90                   	nop

c001abcc <ISO9660::tryMount(LogicalDisk*, int)>:
c001abcc:	81 ec 10 08 00 00    	sub    esp,0x810
c001abd2:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001abd9:	83 c0 41             	add    eax,0x41
c001abdc:	0f be c0             	movsx  eax,al
c001abdf:	50                   	push   eax
c001abe0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001abe4:	50                   	push   eax
c001abe5:	6a 10                	push   0x10
c001abe7:	e8 79 ff ff ff       	call   c001ab65 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001abec:	83 c4 10             	add    esp,0x10
c001abef:	31 c0                	xor    eax,eax
c001abf1:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001abf6:	75 1d                	jne    c001ac15 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001abf8:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001abfd:	75 16                	jne    c001ac15 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001abff:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001ac04:	75 0f                	jne    c001ac15 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ac06:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001ac0b:	75 08                	jne    c001ac15 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001ac0d:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001ac12:	0f 94 c0             	sete   al
c001ac15:	81 c4 0c 08 00 00    	add    esp,0x80c
c001ac1b:	c3                   	ret    

c001ac1c <ISO9660::read(void*, unsigned long, void*, int*)>:
c001ac1c:	55                   	push   ebp
c001ac1d:	57                   	push   edi
c001ac1e:	56                   	push   esi
c001ac1f:	53                   	push   ebx
c001ac20:	81 ec 34 08 00 00    	sub    esp,0x834
c001ac26:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001ac2d:	55                   	push   ebp
c001ac2e:	68 03 2d 02 c0       	push   0xc0022d03
c001ac33:	e8 21 45 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001ac38:	83 c4 10             	add    esp,0x10
c001ac3b:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001ac43:	0f 84 06 02 00 00    	je     c001ae4f <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001ac49:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001ac51:	0f 84 f8 01 00 00    	je     c001ae4f <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001ac57:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001ac5e:	b8 01 00 00 00       	mov    eax,0x1
c001ac63:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001ac67:	0f 85 e7 01 00 00    	jne    c001ae54 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001ac6d:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001ac70:	31 d2                	xor    edx,edx
c001ac72:	89 e9                	mov    ecx,ebp
c001ac74:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001ac77:	01 f1                	add    ecx,esi
c001ac79:	89 d3                	mov    ebx,edx
c001ac7b:	11 fb                	adc    ebx,edi
c001ac7d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001ac81:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ac85:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001ac8c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001ac8f:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001ac92:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ac96:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001ac9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ac9e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001aca2:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001aca6:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001acaa:	72 19                	jb     c001acc5 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001acac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001acb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acb4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001acb8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001acbb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001acbf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001acc3:	eb 13                	jmp    c001acd8 <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001acc5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001acc9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001accd:	29 f0                	sub    eax,esi
c001accf:	19 fa                	sbb    edx,edi
c001acd1:	89 04 24             	mov    DWORD PTR [esp],eax
c001acd4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001acd8:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001acdf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001ace2:	8b 00                	mov    eax,DWORD PTR [eax]
c001ace4:	0f a4 c2 0b          	shld   edx,eax,0xb
c001ace8:	c1 e0 0b             	shl    eax,0xb
c001aceb:	53                   	push   ebx
c001acec:	01 c6                	add    esi,eax
c001acee:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001acf5:	11 d7                	adc    edi,edx
c001acf7:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001acfb:	50                   	push   eax
c001acfc:	89 fa                	mov    edx,edi
c001acfe:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ad02:	50                   	push   eax
c001ad03:	89 f0                	mov    eax,esi
c001ad05:	0f ac d0 0b          	shrd   eax,edx,0xb
c001ad09:	50                   	push   eax
c001ad0a:	e8 56 fe ff ff       	call   c001ab65 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ad0f:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001ad16:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad1a:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001ad1e:	83 c4 10             	add    esp,0x10
c001ad21:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001ad24:	b8 00 08 00 00       	mov    eax,0x800
c001ad29:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001ad2f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001ad33:	29 d0                	sub    eax,edx
c001ad35:	39 c1                	cmp    ecx,eax
c001ad37:	83 db 00             	sbb    ebx,0x0
c001ad3a:	7d 19                	jge    c001ad55 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001ad3c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ad41:	75 16                	jne    c001ad59 <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001ad43:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001ad4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001ad50:	e9 f6 00 00 00       	jmp    c001ae4b <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001ad55:	89 c5                	mov    ebp,eax
c001ad57:	eb 03                	jmp    c001ad5c <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001ad59:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001ad5c:	51                   	push   ecx
c001ad5d:	55                   	push   ebp
c001ad5e:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001ad62:	50                   	push   eax
c001ad63:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001ad6a:	e8 63 58 fe ff       	call   c00005d2 <memcpy>
c001ad6f:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001ad76:	01 e8                	add    eax,ebp
c001ad78:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad7c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ad80:	89 e8                	mov    eax,ebp
c001ad82:	99                   	cdq    
c001ad83:	01 ee                	add    esi,ebp
c001ad85:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ad89:	11 d7                	adc    edi,edx
c001ad8b:	29 e9                	sub    ecx,ebp
c001ad8d:	19 d3                	sbb    ebx,edx
c001ad8f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001ad93:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001ad97:	83 c4 10             	add    esp,0x10
c001ad9a:	b8 ff 07 00 00       	mov    eax,0x7ff
c001ad9f:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001ada2:	b8 00 00 00 00       	mov    eax,0x0
c001ada7:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001adab:	7d 3f                	jge    c001adec <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001adad:	52                   	push   edx
c001adae:	89 fa                	mov    edx,edi
c001adb0:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001adb7:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001adbb:	50                   	push   eax
c001adbc:	89 f0                	mov    eax,esi
c001adbe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001adc2:	0f ac d0 0b          	shrd   eax,edx,0xb
c001adc6:	50                   	push   eax
c001adc7:	e8 99 fd ff ff       	call   c001ab65 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001adcc:	81 c6 00 08 00 00    	add    esi,0x800
c001add2:	83 d7 00             	adc    edi,0x0
c001add5:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001addd:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001ade5:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001adea:	eb ab                	jmp    c001ad97 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001adec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001adf0:	0b 04 24             	or     eax,DWORD PTR [esp]
c001adf3:	74 34                	je     c001ae29 <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001adf5:	50                   	push   eax
c001adf6:	89 fa                	mov    edx,edi
c001adf8:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001adff:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001ae03:	50                   	push   eax
c001ae04:	89 f0                	mov    eax,esi
c001ae06:	0f ac d0 0b          	shrd   eax,edx,0xb
c001ae0a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001ae0e:	55                   	push   ebp
c001ae0f:	50                   	push   eax
c001ae10:	e8 50 fd ff ff       	call   c001ab65 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ae15:	83 c4 0c             	add    esp,0xc
c001ae18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001ae1c:	55                   	push   ebp
c001ae1d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae21:	e8 ac 57 fe ff       	call   c00005d2 <memcpy>
c001ae26:	83 c4 10             	add    esp,0x10
c001ae29:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001ae30:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ae34:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ae38:	89 38                	mov    DWORD PTR [eax],edi
c001ae3a:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001ae41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae45:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001ae48:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001ae4b:	31 c0                	xor    eax,eax
c001ae4d:	eb 05                	jmp    c001ae54 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001ae4f:	b8 04 00 00 00       	mov    eax,0x4
c001ae54:	81 c4 2c 08 00 00    	add    esp,0x82c
c001ae5a:	5b                   	pop    ebx
c001ae5b:	5e                   	pop    esi
c001ae5c:	5f                   	pop    edi
c001ae5d:	5d                   	pop    ebp
c001ae5e:	c3                   	ret    
c001ae5f:	90                   	nop

c001ae60 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001ae60:	55                   	push   ebp
c001ae61:	57                   	push   edi
c001ae62:	56                   	push   esi
c001ae63:	53                   	push   ebx
c001ae64:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001ae6a:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001ae71:	85 f6                	test   esi,esi
c001ae73:	0f 84 62 02 00 00    	je     c001b0db <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001ae79:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001ae81:	0f 84 54 02 00 00    	je     c001b0db <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001ae87:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001ae8a:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001ae8d:	75 0a                	jne    c001ae99 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001ae8f:	b8 07 00 00 00       	mov    eax,0x7
c001ae94:	e9 47 02 00 00       	jmp    c001b0e0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001ae99:	50                   	push   eax
c001ae9a:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001ae9e:	50                   	push   eax
c001ae9f:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001aea6:	53                   	push   ebx
c001aea7:	8b 06                	mov    eax,DWORD PTR [esi]
c001aea9:	c1 e0 0b             	shl    eax,0xb
c001aeac:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001aeaf:	c1 e8 0b             	shr    eax,0xb
c001aeb2:	50                   	push   eax
c001aeb3:	e8 ad fc ff ff       	call   c001ab65 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001aeb8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001aebb:	83 c4 10             	add    esp,0x10
c001aebe:	89 c1                	mov    ecx,eax
c001aec0:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001aec3:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001aec9:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001aecc:	84 db                	test   bl,bl
c001aece:	0f 85 90 00 00 00    	jne    c001af64 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001aed4:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001aeda:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001aee0:	29 c7                	sub    edi,eax
c001aee2:	89 fb                	mov    ebx,edi
c001aee4:	c1 fb 1f             	sar    ebx,0x1f
c001aee7:	01 f8                	add    eax,edi
c001aee9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aeed:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001aef0:	11 da                	adc    edx,ebx
c001aef2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001aef5:	89 04 24             	mov    DWORD PTR [esp],eax
c001aef8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001aefc:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001aeff:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001af02:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001af05:	89 d8                	mov    eax,ebx
c001af07:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001af0b:	ba 00 00 00 00       	mov    edx,0x0
c001af10:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001af14:	b8 00 00 00 00       	mov    eax,0x0
c001af19:	73 0b                	jae    c001af26 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001af1b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001af1e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001af22:	29 f8                	sub    eax,edi
c001af24:	19 da                	sbb    edx,ebx
c001af26:	89 d3                	mov    ebx,edx
c001af28:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001af2b:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001af2e:	09 c3                	or     ebx,eax
c001af30:	0f 84 59 ff ff ff    	je     c001ae8f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001af36:	55                   	push   ebp
c001af37:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001af3b:	50                   	push   eax
c001af3c:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001af43:	53                   	push   ebx
c001af44:	8b 06                	mov    eax,DWORD PTR [esi]
c001af46:	c1 e0 0b             	shl    eax,0xb
c001af49:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001af4d:	c1 e8 0b             	shr    eax,0xb
c001af50:	50                   	push   eax
c001af51:	e8 0f fc ff ff       	call   c001ab65 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001af56:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001af59:	83 c4 10             	add    esp,0x10
c001af5c:	25 ff 07 00 00       	and    eax,0x7ff
c001af61:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001af64:	57                   	push   edi
c001af65:	6a 28                	push   0x28
c001af67:	6a 00                	push   0x0
c001af69:	8d 44 24 24          	lea    eax,[esp+0x24]
c001af6d:	50                   	push   eax
c001af6e:	e8 95 56 fe ff       	call   c0000608 <memset>
c001af73:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001af76:	31 d2                	xor    edx,edx
c001af78:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001af7e:	89 f8                	mov    eax,edi
c001af80:	83 c0 21             	add    eax,0x21
c001af83:	83 d2 00             	adc    edx,0x0
c001af86:	89 c7                	mov    edi,eax
c001af88:	89 d5                	mov    ebp,edx
c001af8a:	83 c4 10             	add    esp,0x10
c001af8d:	31 c9                	xor    ecx,ecx
c001af8f:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001af96:	83 f9 28             	cmp    ecx,0x28
c001af99:	0f 94 c2             	sete   dl
c001af9c:	88 04 24             	mov    BYTE PTR [esp],al
c001af9f:	88 d0                	mov    al,dl
c001afa1:	ba ff 07 00 00       	mov    edx,0x7ff
c001afa6:	39 fa                	cmp    edx,edi
c001afa8:	ba 00 00 00 00       	mov    edx,0x0
c001afad:	19 ea                	sbb    edx,ebp
c001afaf:	0f 92 c2             	setb   dl
c001afb2:	09 c2                	or     edx,eax
c001afb4:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001afb8:	0f 94 c0             	sete   al
c001afbb:	08 d0                	or     al,dl
c001afbd:	75 16                	jne    c001afd5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001afbf:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001afc3:	74 10                	je     c001afd5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001afc5:	8a 04 24             	mov    al,BYTE PTR [esp]
c001afc8:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001afcc:	41                   	inc    ecx
c001afcd:	83 c7 01             	add    edi,0x1
c001afd0:	83 d5 00             	adc    ebp,0x0
c001afd3:	eb ba                	jmp    c001af8f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001afd5:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001afdc:	83 ec 0c             	sub    esp,0xc
c001afdf:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001afe3:	57                   	push   edi
c001afe4:	e8 3c 56 fe ff       	call   c0000625 <strlen>
c001afe9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001afed:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001aff0:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001aff7:	25 ff 07 00 00       	and    eax,0x7ff
c001affc:	01 c8                	add    eax,ecx
c001affe:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001b006:	5a                   	pop    edx
c001b007:	f6 80 19 f8 ff ff 02 	test   BYTE PTR [eax-0x7e7],0x2
c001b00e:	59                   	pop    ecx
c001b00f:	0f 95 c0             	setne  al
c001b012:	0f b6 c0             	movzx  eax,al
c001b015:	40                   	inc    eax
c001b016:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b01a:	57                   	push   edi
c001b01b:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b01f:	50                   	push   eax
c001b020:	e8 82 56 fe ff       	call   c00006a7 <strcpy>
c001b025:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001b029:	83 c4 10             	add    esp,0x10
c001b02c:	84 c0                	test   al,al
c001b02e:	75 21                	jne    c001b051 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f1>
c001b030:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001b038:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b040:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b048:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001b04f:	eb 28                	jmp    c001b079 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b051:	fe c8                	dec    al
c001b053:	75 24                	jne    c001b079 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b055:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001b05d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b065:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b06d:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001b074:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001b079:	50                   	push   eax
c001b07a:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001b081:	0f b6 fb             	movzx  edi,bl
c001b084:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b088:	31 db                	xor    ebx,ebx
c001b08a:	50                   	push   eax
c001b08b:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001b092:	e8 3b 55 fe ff       	call   c00005d2 <memcpy>
c001b097:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001b09e:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b0a4:	89 f9                	mov    ecx,edi
c001b0a6:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001b0a9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b0ac:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001b0af:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b0b2:	83 c4 10             	add    esp,0x10
c001b0b5:	39 c7                	cmp    edi,eax
c001b0b7:	89 df                	mov    edi,ebx
c001b0b9:	19 d7                	sbb    edi,edx
c001b0bb:	72 10                	jb     c001b0cd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c001b0bd:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001b0c4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001b0cb:	eb 0a                	jmp    c001b0d7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x277>
c001b0cd:	29 c8                	sub    eax,ecx
c001b0cf:	19 da                	sbb    edx,ebx
c001b0d1:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b0d4:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b0d7:	31 c0                	xor    eax,eax
c001b0d9:	eb 05                	jmp    c001b0e0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b0db:	b8 04 00 00 00       	mov    eax,0x4
c001b0e0:	81 c4 5c 09 00 00    	add    esp,0x95c
c001b0e6:	5b                   	pop    ebx
c001b0e7:	5e                   	pop    esi
c001b0e8:	5f                   	pop    edi
c001b0e9:	5d                   	pop    ebp
c001b0ea:	c3                   	ret    

c001b0eb <readRoot(unsigned int*, unsigned int*, char)>:
c001b0eb:	81 ec 40 08 00 00    	sub    esp,0x840
c001b0f1:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001b0f9:	50                   	push   eax
c001b0fa:	8d 44 24 38          	lea    eax,[esp+0x38]
c001b0fe:	50                   	push   eax
c001b0ff:	6a 10                	push   0x10
c001b101:	e8 5f fa ff ff       	call   c001ab65 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b106:	83 c4 0c             	add    esp,0xc
c001b109:	6a 22                	push   0x22
c001b10b:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001b112:	50                   	push   eax
c001b113:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001b117:	50                   	push   eax
c001b118:	e8 b5 54 fe ff       	call   c00005d2 <memcpy>
c001b11d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b124:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b128:	89 10                	mov    DWORD PTR [eax],edx
c001b12a:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b131:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b135:	89 10                	mov    DWORD PTR [eax],edx
c001b137:	b0 01                	mov    al,0x1
c001b139:	81 c4 4c 08 00 00    	add    esp,0x84c
c001b13f:	c3                   	ret    

c001b140 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001b140:	55                   	push   ebp
c001b141:	57                   	push   edi
c001b142:	56                   	push   esi
c001b143:	53                   	push   ebx
c001b144:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b14a:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b151:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001b158:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b15c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b160:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b164:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001b168:	75 03                	jne    c001b16d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b16a:	83 c3 02             	add    ebx,0x2
c001b16d:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001b170:	75 03                	jne    c001b175 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001b172:	43                   	inc    ebx
c001b173:	eb f8                	jmp    c001b16d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b175:	51                   	push   ecx
c001b176:	68 00 01 00 00       	push   0x100
c001b17b:	6a 00                	push   0x0
c001b17d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b181:	50                   	push   eax
c001b182:	e8 81 54 fe ff       	call   c0000608 <memset>
c001b187:	83 c4 10             	add    esp,0x10
c001b18a:	31 d2                	xor    edx,edx
c001b18c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b18f:	84 c0                	test   al,al
c001b191:	74 21                	je     c001b1b4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001b193:	3c 2f                	cmp    al,0x2f
c001b195:	75 0b                	jne    c001b1a2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001b197:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001b19b:	bd 01 00 00 00       	mov    ebp,0x1
c001b1a0:	eb 14                	jmp    c001b1b6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001b1a2:	8d 48 9f             	lea    ecx,[eax-0x61]
c001b1a5:	80 f9 19             	cmp    cl,0x19
c001b1a8:	77 03                	ja     c001b1ad <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b1aa:	83 e8 20             	sub    eax,0x20
c001b1ad:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001b1b1:	42                   	inc    edx
c001b1b2:	eb d8                	jmp    c001b18c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001b1b4:	31 ed                	xor    ebp,ebp
c001b1b6:	83 ec 0c             	sub    esp,0xc
c001b1b9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001b1c0:	e8 62 0d ff ff       	call   c000bf27 <malloc>
c001b1c5:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b1cc:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001b1d2:	89 c6                	mov    esi,eax
c001b1d4:	c1 ef 0b             	shr    edi,0xb
c001b1d7:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001b1de:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001b1e2:	83 c4 10             	add    esp,0x10
c001b1e5:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001b1ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b1ee:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001b1f5:	74 28                	je     c001b21f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001b1f7:	52                   	push   edx
c001b1f8:	57                   	push   edi
c001b1f9:	50                   	push   eax
c001b1fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b1fe:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b205:	e8 5b f9 ff ff       	call   c001ab65 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b20a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b20e:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001b215:	05 00 08 00 00       	add    eax,0x800
c001b21a:	83 c4 10             	add    esp,0x10
c001b21d:	eb cb                	jmp    c001b1ea <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001b21f:	83 ec 0c             	sub    esp,0xc
c001b222:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b226:	57                   	push   edi
c001b227:	e8 f9 53 fe ff       	call   c0000625 <strlen>
c001b22c:	50                   	push   eax
c001b22d:	57                   	push   edi
c001b22e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001b235:	56                   	push   esi
c001b236:	e8 e8 f8 ff ff       	call   c001ab23 <__memmem(unsigned char*, int, unsigned char*, int)>
c001b23b:	83 c4 20             	add    esp,0x20
c001b23e:	85 c0                	test   eax,eax
c001b240:	75 13                	jne    c001b255 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001b242:	83 ec 0c             	sub    esp,0xc
c001b245:	56                   	push   esi
c001b246:	e8 ec 0c ff ff       	call   c000bf37 <free>
c001b24b:	83 c4 10             	add    esp,0x10
c001b24e:	31 c0                	xor    eax,eax
c001b250:	e9 b3 00 00 00       	jmp    c001b308 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b255:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001b259:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001b25d:	c1 e7 08             	shl    edi,0x8
c001b260:	c1 e2 10             	shl    edx,0x10
c001b263:	09 d7                	or     edi,edx
c001b265:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001b269:	09 d7                	or     edi,edx
c001b26b:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001b26f:	c1 e2 18             	shl    edx,0x18
c001b272:	09 d7                	or     edi,edx
c001b274:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001b278:	89 d1                	mov    ecx,edx
c001b27a:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001b27e:	c1 e1 08             	shl    ecx,0x8
c001b281:	c1 e2 10             	shl    edx,0x10
c001b284:	09 ca                	or     edx,ecx
c001b286:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001b28a:	09 ca                	or     edx,ecx
c001b28c:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001b290:	c1 e1 18             	shl    ecx,0x18
c001b293:	09 ca                	or     edx,ecx
c001b295:	89 e9                	mov    ecx,ebp
c001b297:	84 c9                	test   cl,cl
c001b299:	74 3c                	je     c001b2d7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001b29b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b29f:	83 ec 0c             	sub    esp,0xc
c001b2a2:	56                   	push   esi
c001b2a3:	e8 8f 0c ff ff       	call   c000bf37 <free>
c001b2a8:	83 c4 0c             	add    esp,0xc
c001b2ab:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b2b2:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001b2b7:	50                   	push   eax
c001b2b8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b2bf:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b2c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b2ca:	52                   	push   edx
c001b2cb:	57                   	push   edi
c001b2cc:	53                   	push   ebx
c001b2cd:	e8 6e fe ff ff       	call   c001b140 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b2d2:	83 c4 20             	add    esp,0x20
c001b2d5:	eb 31                	jmp    c001b308 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b2d7:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001b2de:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001b2e1:	d0 e8                	shr    al,1
c001b2e3:	83 ec 0c             	sub    esp,0xc
c001b2e6:	89 3b                	mov    DWORD PTR [ebx],edi
c001b2e8:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001b2ef:	83 e0 01             	and    eax,0x1
c001b2f2:	89 13                	mov    DWORD PTR [ebx],edx
c001b2f4:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001b2fb:	89 03                	mov    DWORD PTR [ebx],eax
c001b2fd:	56                   	push   esi
c001b2fe:	e8 34 0c ff ff       	call   c000bf37 <free>
c001b303:	83 c4 10             	add    esp,0x10
c001b306:	b0 01                	mov    al,0x1
c001b308:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b30e:	5b                   	pop    ebx
c001b30f:	5e                   	pop    esi
c001b310:	5f                   	pop    edi
c001b311:	5d                   	pop    ebp
c001b312:	c3                   	ret    

c001b313 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001b313:	55                   	push   ebp
c001b314:	57                   	push   edi
c001b315:	56                   	push   esi
c001b316:	53                   	push   ebx
c001b317:	83 ec 20             	sub    esp,0x20
c001b31a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b31e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001b322:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001b327:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b32b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b333:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b33b:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001b341:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001b347:	57                   	push   edi
c001b348:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b34c:	50                   	push   eax
c001b34d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b351:	50                   	push   eax
c001b352:	e8 94 fd ff ff       	call   c001b0eb <readRoot(unsigned int*, unsigned int*, char)>
c001b357:	5a                   	pop    edx
c001b358:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b35c:	e8 c4 52 fe ff       	call   c0000625 <strlen>
c001b361:	83 c4 10             	add    esp,0x10
c001b364:	83 f8 03             	cmp    eax,0x3
c001b367:	77 17                	ja     c001b380 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b369:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b36d:	89 03                	mov    DWORD PTR [ebx],eax
c001b36f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b373:	89 06                	mov    DWORD PTR [esi],eax
c001b375:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001b37c:	b0 01                	mov    al,0x1
c001b37e:	eb 19                	jmp    c001b399 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001b380:	50                   	push   eax
c001b381:	55                   	push   ebp
c001b382:	57                   	push   edi
c001b383:	56                   	push   esi
c001b384:	53                   	push   ebx
c001b385:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b389:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b38d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b391:	e8 aa fd ff ff       	call   c001b140 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b396:	83 c4 20             	add    esp,0x20
c001b399:	83 c4 1c             	add    esp,0x1c
c001b39c:	5b                   	pop    ebx
c001b39d:	5e                   	pop    esi
c001b39e:	5f                   	pop    edi
c001b39f:	5d                   	pop    ebp
c001b3a0:	c3                   	ret    
c001b3a1:	90                   	nop

c001b3a2 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001b3a2:	57                   	push   edi
c001b3a3:	56                   	push   esi
c001b3a4:	53                   	push   ebx
c001b3a5:	83 ec 10             	sub    esp,0x10
c001b3a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b3ac:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b3b0:	85 f6                	test   esi,esi
c001b3b2:	74 7b                	je     c001b42f <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b3b4:	85 ff                	test   edi,edi
c001b3b6:	74 77                	je     c001b42f <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001b3b8:	83 ec 0c             	sub    esp,0xc
c001b3bb:	6a 1c                	push   0x1c
c001b3bd:	e8 65 0b ff ff       	call   c000bf27 <malloc>
c001b3c2:	89 07                	mov    DWORD PTR [edi],eax
c001b3c4:	89 c3                	mov    ebx,eax
c001b3c6:	58                   	pop    eax
c001b3c7:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b3cb:	50                   	push   eax
c001b3cc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001b3cf:	50                   	push   eax
c001b3d0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b3d4:	50                   	push   eax
c001b3d5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b3d9:	50                   	push   eax
c001b3da:	56                   	push   esi
c001b3db:	e8 33 ff ff ff       	call   c001b313 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b3e0:	83 c4 20             	add    esp,0x20
c001b3e3:	84 c0                	test   al,al
c001b3e5:	74 07                	je     c001b3ee <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001b3e7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b3ec:	74 0b                	je     c001b3f9 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001b3ee:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001b3f2:	b8 01 00 00 00       	mov    eax,0x1
c001b3f7:	eb 3b                	jmp    c001b434 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001b3f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b3fd:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001b401:	89 03                	mov    DWORD PTR [ebx],eax
c001b403:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001b40a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b40e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001b415:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b41c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b41f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b426:	8a 06                	mov    al,BYTE PTR [esi]
c001b428:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001b42b:	31 c0                	xor    eax,eax
c001b42d:	eb 05                	jmp    c001b434 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001b42f:	b8 04 00 00 00       	mov    eax,0x4
c001b434:	83 c4 10             	add    esp,0x10
c001b437:	5b                   	pop    ebx
c001b438:	5e                   	pop    esi
c001b439:	5f                   	pop    edi
c001b43a:	c3                   	ret    
c001b43b:	90                   	nop

c001b43c <ISO9660::exists(char const*)>:
c001b43c:	83 ec 28             	sub    esp,0x28
c001b43f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b443:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b447:	52                   	push   edx
c001b448:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001b44b:	52                   	push   edx
c001b44c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001b450:	52                   	push   edx
c001b451:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001b455:	52                   	push   edx
c001b456:	50                   	push   eax
c001b457:	e8 b7 fe ff ff       	call   c001b313 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b45c:	83 c4 3c             	add    esp,0x3c
c001b45f:	c3                   	ret    

c001b460 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001b460:	56                   	push   esi
c001b461:	53                   	push   ebx
c001b462:	83 ec 14             	sub    esp,0x14
c001b465:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001b469:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b46d:	85 db                	test   ebx,ebx
c001b46f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001b473:	0f 94 c2             	sete   dl
c001b476:	85 f6                	test   esi,esi
c001b478:	0f 94 c0             	sete   al
c001b47b:	08 c2                	or     dl,al
c001b47d:	75 68                	jne    c001b4e7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001b47f:	85 c9                	test   ecx,ecx
c001b481:	74 64                	je     c001b4e7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001b483:	83 ec 0c             	sub    esp,0xc
c001b486:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b489:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b48f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b496:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b49a:	50                   	push   eax
c001b49b:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001b49e:	50                   	push   eax
c001b49f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b4a3:	50                   	push   eax
c001b4a4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b4a8:	50                   	push   eax
c001b4a9:	51                   	push   ecx
c001b4aa:	e8 64 fe ff ff       	call   c001b313 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b4af:	83 c4 20             	add    esp,0x20
c001b4b2:	ba 01 00 00 00       	mov    edx,0x1
c001b4b7:	84 c0                	test   al,al
c001b4b9:	74 31                	je     c001b4ec <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b4bb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b4bf:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b4c6:	89 03                	mov    DWORD PTR [ebx],eax
c001b4c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b4cc:	85 c0                	test   eax,eax
c001b4ce:	ba 00 00 00 00       	mov    edx,0x0
c001b4d3:	0f 95 06             	setne  BYTE PTR [esi]
c001b4d6:	74 14                	je     c001b4ec <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b4d8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b4de:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b4e5:	eb 05                	jmp    c001b4ec <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001b4e7:	ba 04 00 00 00       	mov    edx,0x4
c001b4ec:	83 c4 14             	add    esp,0x14
c001b4ef:	89 d0                	mov    eax,edx
c001b4f1:	5b                   	pop    ebx
c001b4f2:	5e                   	pop    esi
c001b4f3:	c3                   	ret    

c001b4f4 <ISO9660::openDir(char const*, void**)>:
c001b4f4:	57                   	push   edi
c001b4f5:	56                   	push   esi
c001b4f6:	53                   	push   ebx
c001b4f7:	83 ec 10             	sub    esp,0x10
c001b4fa:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001b4fe:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001b502:	85 f6                	test   esi,esi
c001b504:	0f 84 95 00 00 00    	je     c001b59f <ISO9660::openDir(char const*, void**)+0xab>
c001b50a:	85 ff                	test   edi,edi
c001b50c:	0f 84 8d 00 00 00    	je     c001b59f <ISO9660::openDir(char const*, void**)+0xab>
c001b512:	83 ec 0c             	sub    esp,0xc
c001b515:	6a 1c                	push   0x1c
c001b517:	e8 0b 0a ff ff       	call   c000bf27 <malloc>
c001b51c:	89 07                	mov    DWORD PTR [edi],eax
c001b51e:	89 c3                	mov    ebx,eax
c001b520:	59                   	pop    ecx
c001b521:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b525:	50                   	push   eax
c001b526:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001b529:	50                   	push   eax
c001b52a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b52e:	50                   	push   eax
c001b52f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b533:	50                   	push   eax
c001b534:	56                   	push   esi
c001b535:	e8 d9 fd ff ff       	call   c001b313 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001b53a:	83 c4 20             	add    esp,0x20
c001b53d:	84 c0                	test   al,al
c001b53f:	74 07                	je     c001b548 <ISO9660::openDir(char const*, void**)+0x54>
c001b541:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001b546:	75 21                	jne    c001b569 <ISO9660::openDir(char const*, void**)+0x75>
c001b548:	52                   	push   edx
c001b549:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001b54d:	0f b6 c0             	movzx  eax,al
c001b550:	50                   	push   eax
c001b551:	68 16 2d 02 c0       	push   0xc0022d16
c001b556:	e8 fe 3b ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001b55b:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001b55f:	83 c4 10             	add    esp,0x10
c001b562:	b8 01 00 00 00       	mov    eax,0x1
c001b567:	eb 3b                	jmp    c001b5a4 <ISO9660::openDir(char const*, void**)+0xb0>
c001b569:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b56d:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001b571:	89 03                	mov    DWORD PTR [ebx],eax
c001b573:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001b57a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b57e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001b585:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001b58c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001b58f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001b596:	8a 06                	mov    al,BYTE PTR [esi]
c001b598:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001b59b:	31 c0                	xor    eax,eax
c001b59d:	eb 05                	jmp    c001b5a4 <ISO9660::openDir(char const*, void**)+0xb0>
c001b59f:	b8 04 00 00 00       	mov    eax,0x4
c001b5a4:	83 c4 10             	add    esp,0x10
c001b5a7:	5b                   	pop    ebx
c001b5a8:	5e                   	pop    esi
c001b5a9:	5f                   	pop    edi
c001b5aa:	c3                   	ret    
c001b5ab:	90                   	nop

c001b5ac <ISO9660::ISO9660()>:
c001b5ac:	83 ec 0c             	sub    esp,0xc
c001b5af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5b3:	83 ec 0c             	sub    esp,0xc
c001b5b6:	50                   	push   eax
c001b5b7:	e8 aa 3e ff ff       	call   c000f466 <Filesystem::Filesystem()>
c001b5bc:	83 c4 10             	add    esp,0x10
c001b5bf:	ba 3c 2d 02 c0       	mov    edx,0xc0022d3c
c001b5c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5c8:	89 10                	mov    DWORD PTR [eax],edx
c001b5ca:	90                   	nop
c001b5cb:	83 c4 0c             	add    esp,0xc
c001b5ce:	c3                   	ret    
c001b5cf:	90                   	nop

c001b5d0 <SoundChannel::~SoundChannel()>:
c001b5d0:	83 ec 0c             	sub    esp,0xc
c001b5d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5d7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b5da:	83 ec 0c             	sub    esp,0xc
c001b5dd:	50                   	push   eax
c001b5de:	e8 54 09 ff ff       	call   c000bf37 <free>
c001b5e3:	83 c4 10             	add    esp,0x10
c001b5e6:	90                   	nop
c001b5e7:	83 c4 0c             	add    esp,0xc
c001b5ea:	c3                   	ret    
c001b5eb:	90                   	nop

c001b5ec <SoundChannel::setSpeed(float)>:
c001b5ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5f0:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001b5f4:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001b5f7:	c3                   	ret    

c001b5f8 <SoundChannel::getSpeed()>:
c001b5f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5fc:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001b5ff:	c3                   	ret    

c001b600 <SoundChannel::setVolume(int)>:
c001b600:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b604:	83 f8 64             	cmp    eax,0x64
c001b607:	7e 05                	jle    c001b60e <SoundChannel::setVolume(int)+0xe>
c001b609:	b8 64 00 00 00       	mov    eax,0x64
c001b60e:	85 c0                	test   eax,eax
c001b610:	79 02                	jns    c001b614 <SoundChannel::setVolume(int)+0x14>
c001b612:	31 c0                	xor    eax,eax
c001b614:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b618:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001b61b:	c3                   	ret    

c001b61c <SoundChannel::getVolume()>:
c001b61c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b620:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b623:	c3                   	ret    

c001b624 <SoundChannel::pause()>:
c001b624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b628:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001b62c:	c3                   	ret    
c001b62d:	90                   	nop

c001b62e <SoundChannel::SoundChannel(int, int, int, int)>:
c001b62e:	83 ec 1c             	sub    esp,0x1c
c001b631:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b635:	e8 ea ff ff ff       	call   c001b624 <SoundChannel::pause()>
c001b63a:	83 c4 04             	add    esp,0x4
c001b63d:	6a 50                	push   0x50
c001b63f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b643:	e8 b8 ff ff ff       	call   c001b600 <SoundChannel::setVolume(int)>
c001b648:	83 c4 08             	add    esp,0x8
c001b64b:	d9 e8                	fld1   
c001b64d:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001b651:	d9 1c 24             	fstp   DWORD PTR [esp]
c001b654:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001b658:	e8 8f ff ff ff       	call   c001b5ec <SoundChannel::setSpeed(float)>
c001b65d:	83 c4 08             	add    esp,0x8
c001b660:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b664:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b668:	89 10                	mov    DWORD PTR [eax],edx
c001b66a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b66e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b672:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b675:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b679:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b67d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b680:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001b685:	75 26                	jne    c001b6ad <SoundChannel::SoundChannel(int, int, int, int)+0x7f>
c001b687:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b68b:	8b 10                	mov    edx,DWORD PTR [eax]
c001b68d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b691:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b694:	0f af c2             	imul   eax,edx
c001b697:	89 c2                	mov    edx,eax
c001b699:	c1 fa 1f             	sar    edx,0x1f
c001b69c:	83 e2 03             	and    edx,0x3
c001b69f:	01 d0                	add    eax,edx
c001b6a1:	c1 f8 02             	sar    eax,0x2
c001b6a4:	05 a0 0f 00 00       	add    eax,0xfa0
c001b6a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b6ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6b1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b6b5:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001b6b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6bc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001b6c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6c7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001b6ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6d2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b6d5:	c1 e0 02             	shl    eax,0x2
c001b6d8:	83 ec 0c             	sub    esp,0xc
c001b6db:	50                   	push   eax
c001b6dc:	e8 46 08 ff ff       	call   c000bf27 <malloc>
c001b6e1:	83 c4 10             	add    esp,0x10
c001b6e4:	89 c2                	mov    edx,eax
c001b6e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6ea:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001b6ed:	83 ec 04             	sub    esp,0x4
c001b6f0:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b6f4:	50                   	push   eax
c001b6f5:	6a 01                	push   0x1
c001b6f7:	6a 04                	push   0x4
c001b6f9:	e8 32 d1 fe ff       	call   c0008830 <src_new>
c001b6fe:	83 c4 10             	add    esp,0x10
c001b701:	89 c2                	mov    edx,eax
c001b703:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b707:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001b70a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b70e:	85 c0                	test   eax,eax
c001b710:	74 10                	je     c001b722 <SoundChannel::SoundChannel(int, int, int, int)+0xf4>
c001b712:	83 ec 0c             	sub    esp,0xc
c001b715:	68 98 2d 02 c0       	push   0xc0022d98
c001b71a:	e8 cd 9c ff ff       	call   c00153ec <Krnl::panic(char const*)>
c001b71f:	83 c4 10             	add    esp,0x10
c001b722:	90                   	nop
c001b723:	83 c4 1c             	add    esp,0x1c
c001b726:	c3                   	ret    
c001b727:	90                   	nop

c001b728 <SoundChannel::play()>:
c001b728:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b72c:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001b730:	c3                   	ret    
c001b731:	90                   	nop

c001b732 <SoundChannel::paused()>:
c001b732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b736:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001b739:	c3                   	ret    

c001b73a <SoundChannel::getSampleRate()>:
c001b73a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b73e:	8b 00                	mov    eax,DWORD PTR [eax]
c001b740:	c3                   	ret    
c001b741:	90                   	nop

c001b742 <SoundChannel::getBits()>:
c001b742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b746:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001b749:	c3                   	ret    

c001b74a <SoundChannel::getBufferUsed()>:
c001b74a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b74e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001b751:	c3                   	ret    

c001b752 <SoundChannel::getBufferSize()>:
c001b752:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b756:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b759:	c3                   	ret    

c001b75a <SoundChannel::unbuffer(float*, int, int)>:
c001b75a:	53                   	push   ebx
c001b75b:	83 ec 40             	sub    esp,0x40
c001b75e:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001b762:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001b76a:	db 03                	fild   DWORD PTR [ebx]
c001b76c:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001b770:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b773:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b777:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001b77a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b77e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001b782:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b786:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b78a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b78e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b792:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001b795:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001b799:	50                   	push   eax
c001b79a:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001b79d:	e8 48 cd fe ff       	call   c00084ea <src_process>
c001b7a2:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b7a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b7a9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001b7ac:	83 c4 0c             	add    esp,0xc
c001b7af:	29 d0                	sub    eax,edx
c001b7b1:	c1 e0 02             	shl    eax,0x2
c001b7b4:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001b7b7:	50                   	push   eax
c001b7b8:	8d 04 91             	lea    eax,[ecx+edx*4]
c001b7bb:	50                   	push   eax
c001b7bc:	51                   	push   ecx
c001b7bd:	e8 d8 4d fe ff       	call   c000059a <memmove>
c001b7c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b7c6:	83 c4 48             	add    esp,0x48
c001b7c9:	5b                   	pop    ebx
c001b7ca:	c3                   	ret    
c001b7cb:	90                   	nop

c001b7cc <SoundChannel::buffer8(unsigned char*, int)>:
c001b7cc:	53                   	push   ebx
c001b7cd:	31 c0                	xor    eax,eax
c001b7cf:	83 ec 08             	sub    esp,0x8
c001b7d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b7d6:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001b7d9:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001b7dc:	74 35                	je     c001b813 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001b7de:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001b7e2:	7d 2f                	jge    c001b813 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001b7e4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b7e8:	d9 05 b4 2d 02 c0    	fld    DWORD PTR ds:0xc0022db4
c001b7ee:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001b7f2:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001b7f7:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001b7fa:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001b7fe:	40                   	inc    eax
c001b7ff:	8d 59 01             	lea    ebx,[ecx+0x1]
c001b802:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001b805:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001b808:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001b80b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b80e:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001b811:	eb c9                	jmp    c001b7dc <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001b813:	83 c4 08             	add    esp,0x8
c001b816:	5b                   	pop    ebx
c001b817:	c3                   	ret    

c001b818 <SoundDevice::SoundDevice(char const*)>:
c001b818:	83 ec 1c             	sub    esp,0x1c
c001b81b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b81f:	83 ec 08             	sub    esp,0x8
c001b822:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b826:	50                   	push   eax
c001b827:	e8 32 4f ff ff       	call   c001075e <Device::Device(char const*)>
c001b82c:	83 c4 10             	add    esp,0x10
c001b82f:	ba c0 2d 02 c0       	mov    edx,0xc0022dc0
c001b834:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b838:	89 10                	mov    DWORD PTR [eax],edx
c001b83a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b83e:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001b848:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b84c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001b856:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b85e:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b863:	7f 19                	jg     c001b87e <SoundDevice::SoundDevice(char const*)+0x66>
c001b865:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b869:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b86d:	83 c2 54             	add    edx,0x54
c001b870:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001b878:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b87c:	eb e0                	jmp    c001b85e <SoundDevice::SoundDevice(char const*)+0x46>
c001b87e:	90                   	nop
c001b87f:	83 c4 1c             	add    esp,0x1c
c001b882:	c3                   	ret    
c001b883:	90                   	nop

c001b884 <SoundDevice::~SoundDevice()>:
c001b884:	53                   	push   ebx
c001b885:	83 ec 18             	sub    esp,0x18
c001b888:	ba c0 2d 02 c0       	mov    edx,0xc0022dc0
c001b88d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b891:	89 10                	mov    DWORD PTR [eax],edx
c001b893:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b89b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b8a0:	7f 46                	jg     c001b8e8 <SoundDevice::~SoundDevice()+0x64>
c001b8a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8a6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b8aa:	83 c2 54             	add    edx,0x54
c001b8ad:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001b8b1:	85 c0                	test   eax,eax
c001b8b3:	74 2d                	je     c001b8e2 <SoundDevice::~SoundDevice()+0x5e>
c001b8b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8b9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b8bd:	83 c2 54             	add    edx,0x54
c001b8c0:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001b8c4:	85 db                	test   ebx,ebx
c001b8c6:	74 1a                	je     c001b8e2 <SoundDevice::~SoundDevice()+0x5e>
c001b8c8:	83 ec 0c             	sub    esp,0xc
c001b8cb:	53                   	push   ebx
c001b8cc:	e8 ff fc ff ff       	call   c001b5d0 <SoundChannel::~SoundChannel()>
c001b8d1:	83 c4 10             	add    esp,0x10
c001b8d4:	83 ec 08             	sub    esp,0x8
c001b8d7:	6a 2c                	push   0x2c
c001b8d9:	53                   	push   ebx
c001b8da:	e8 54 37 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001b8df:	83 c4 10             	add    esp,0x10
c001b8e2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001b8e6:	eb b3                	jmp    c001b89b <SoundDevice::~SoundDevice()+0x17>
c001b8e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b8ec:	83 ec 0c             	sub    esp,0xc
c001b8ef:	50                   	push   eax
c001b8f0:	e8 1f 4b ff ff       	call   c0010414 <Device::~Device()>
c001b8f5:	83 c4 10             	add    esp,0x10
c001b8f8:	90                   	nop
c001b8f9:	83 c4 18             	add    esp,0x18
c001b8fc:	5b                   	pop    ebx
c001b8fd:	c3                   	ret    

c001b8fe <SoundDevice::~SoundDevice()>:
c001b8fe:	83 ec 0c             	sub    esp,0xc
c001b901:	83 ec 0c             	sub    esp,0xc
c001b904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b908:	e8 77 ff ff ff       	call   c001b884 <SoundDevice::~SoundDevice()>
c001b90d:	83 c4 10             	add    esp,0x10
c001b910:	83 ec 08             	sub    esp,0x8
c001b913:	68 e4 01 00 00       	push   0x1e4
c001b918:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b91c:	e8 12 37 ff ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001b921:	83 c4 10             	add    esp,0x10
c001b924:	83 c4 0c             	add    esp,0xc
c001b927:	c3                   	ret    

c001b928 <SoundDevice::getFreeChannelNum()>:
c001b928:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b92c:	31 c0                	xor    eax,eax
c001b92e:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001b936:	74 09                	je     c001b941 <SoundDevice::getFreeChannelNum()+0x19>
c001b938:	40                   	inc    eax
c001b939:	83 f8 20             	cmp    eax,0x20
c001b93c:	75 f0                	jne    c001b92e <SoundDevice::getFreeChannelNum()+0x6>
c001b93e:	83 c8 ff             	or     eax,0xffffffff
c001b941:	c3                   	ret    

c001b942 <SoundDevice::addChannel(SoundChannel*)>:
c001b942:	56                   	push   esi
c001b943:	53                   	push   ebx
c001b944:	51                   	push   ecx
c001b945:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b949:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b94d:	53                   	push   ebx
c001b94e:	e8 d5 ff ff ff       	call   c001b928 <SoundDevice::getFreeChannelNum()>
c001b953:	5a                   	pop    edx
c001b954:	83 f8 ff             	cmp    eax,0xffffffff
c001b957:	74 51                	je     c001b9aa <SoundDevice::addChannel(SoundChannel*)+0x68>
c001b959:	85 f6                	test   esi,esi
c001b95b:	74 4d                	je     c001b9aa <SoundDevice::addChannel(SoundChannel*)+0x68>
c001b95d:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001b964:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001b96b:	75 30                	jne    c001b99d <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001b96d:	83 ec 0c             	sub    esp,0xc
c001b970:	56                   	push   esi
c001b971:	e8 c4 fd ff ff       	call   c001b73a <SoundChannel::getSampleRate()>
c001b976:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001b97c:	89 34 24             	mov    DWORD PTR [esp],esi
c001b97f:	e8 be fd ff ff       	call   c001b742 <SoundChannel::getBits()>
c001b984:	83 c4 0c             	add    esp,0xc
c001b987:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001b98d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b98f:	50                   	push   eax
c001b990:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001b996:	53                   	push   ebx
c001b997:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001b99a:	83 c4 10             	add    esp,0x10
c001b99d:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001b9a3:	b8 01 00 00 00       	mov    eax,0x1
c001b9a8:	eb 03                	jmp    c001b9ad <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001b9aa:	83 c8 ff             	or     eax,0xffffffff
c001b9ad:	5a                   	pop    edx
c001b9ae:	5b                   	pop    ebx
c001b9af:	5e                   	pop    esi
c001b9b0:	c3                   	ret    
c001b9b1:	90                   	nop

c001b9b2 <SoundDevice::removeChannel(int)>:
c001b9b2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b9b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b9ba:	83 fa 1f             	cmp    edx,0x1f
c001b9bd:	77 23                	ja     c001b9e2 <SoundDevice::removeChannel(int)+0x30>
c001b9bf:	8d 14 90             	lea    edx,[eax+edx*4]
c001b9c2:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001b9c9:	74 17                	je     c001b9e2 <SoundDevice::removeChannel(int)+0x30>
c001b9cb:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001b9d5:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001b9db:	75 05                	jne    c001b9e2 <SoundDevice::removeChannel(int)+0x30>
c001b9dd:	8b 00                	mov    eax,DWORD PTR [eax]
c001b9df:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001b9e2:	c3                   	ret    
c001b9e3:	90                   	nop

c001b9e4 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001b9e4:	56                   	push   esi
c001b9e5:	53                   	push   ebx
c001b9e6:	31 db                	xor    ebx,ebx
c001b9e8:	83 ec 14             	sub    esp,0x14
c001b9eb:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b9ef:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001b9f3:	7d 55                	jge    c001ba4a <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001b9f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b9f9:	d9 e8                	fld1   
c001b9fb:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001b9fe:	d8 0d f0 2d 02 c0    	fmul   DWORD PTR ds:0xc0022df0
c001ba04:	d8 0d f4 2d 02 c0    	fmul   DWORD PTR ds:0xc0022df4
c001ba0a:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001ba0e:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001ba12:	d8 15 f8 2d 02 c0    	fcom   DWORD PTR ds:0xc0022df8
c001ba18:	df e0                	fnstsw ax
c001ba1a:	9e                   	sahf   
c001ba1b:	72 08                	jb     c001ba25 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001ba1d:	dd d8                	fstp   st(0)
c001ba1f:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001ba23:	eb 22                	jmp    c001ba47 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001ba25:	d9 ee                	fldz   
c001ba27:	d8 d9                	fcomp  st(1)
c001ba29:	df e0                	fnstsw ax
c001ba2b:	9e                   	sahf   
c001ba2c:	72 08                	jb     c001ba36 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001ba2e:	dd d8                	fstp   st(0)
c001ba30:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001ba34:	eb 11                	jmp    c001ba47 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001ba36:	83 ec 10             	sub    esp,0x10
c001ba39:	d9 1c 24             	fstp   DWORD PTR [esp]
c001ba3c:	e8 bb 36 00 00       	call   c001f0fc <lrintf>
c001ba41:	83 c4 10             	add    esp,0x10
c001ba44:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001ba47:	43                   	inc    ebx
c001ba48:	eb a5                	jmp    c001b9ef <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001ba4a:	83 c4 14             	add    esp,0x14
c001ba4d:	5b                   	pop    ebx
c001ba4e:	5e                   	pop    esi
c001ba4f:	c3                   	ret    

c001ba50 <SoundDevice::getAudio(int, float*, float*)>:
c001ba50:	55                   	push   ebp
c001ba51:	57                   	push   edi
c001ba52:	56                   	push   esi
c001ba53:	53                   	push   ebx
c001ba54:	31 db                	xor    ebx,ebx
c001ba56:	83 ec 20             	sub    esp,0x20
c001ba59:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ba5d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ba61:	c1 e0 02             	shl    eax,0x2
c001ba64:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001ba68:	50                   	push   eax
c001ba69:	6a 00                	push   0x0
c001ba6b:	55                   	push   ebp
c001ba6c:	e8 97 4b fe ff       	call   c0000608 <memset>
c001ba71:	83 c4 10             	add    esp,0x10
c001ba74:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ba78:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001ba7f:	85 c0                	test   eax,eax
c001ba81:	0f 84 8c 00 00 00    	je     c001bb13 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001ba87:	83 ec 0c             	sub    esp,0xc
c001ba8a:	50                   	push   eax
c001ba8b:	e8 a2 fc ff ff       	call   c001b732 <SoundChannel::paused()>
c001ba90:	83 c4 10             	add    esp,0x10
c001ba93:	84 c0                	test   al,al
c001ba95:	75 7c                	jne    c001bb13 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001ba97:	83 ec 0c             	sub    esp,0xc
c001ba9a:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001baa1:	e8 76 fb ff ff       	call   c001b61c <SoundChannel::getVolume()>
c001baa6:	83 c4 10             	add    esp,0x10
c001baa9:	85 c0                	test   eax,eax
c001baab:	74 66                	je     c001bb13 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001baad:	83 ec 0c             	sub    esp,0xc
c001bab0:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001bab7:	e8 60 fb ff ff       	call   c001b61c <SoundChannel::getVolume()>
c001babc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bac0:	d9 05 fc 2d 02 c0    	fld    DWORD PTR ds:0xc0022dfc
c001bac6:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001baca:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001bace:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001bad2:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001bad8:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001badc:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001bae3:	e8 72 fc ff ff       	call   c001b75a <SoundChannel::unbuffer(float*, int, int)>
c001bae8:	83 c4 20             	add    esp,0x20
c001baeb:	31 d2                	xor    edx,edx
c001baed:	39 c2                	cmp    edx,eax
c001baef:	7d 1c                	jge    c001bb0d <SoundDevice::getAudio(int, float*, float*)+0xbd>
c001baf1:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001baf5:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001baf9:	d8 0c 91             	fmul   DWORD PTR [ecx+edx*4]
c001bafc:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001bb02:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001bb06:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001bb0a:	42                   	inc    edx
c001bb0b:	eb e0                	jmp    c001baed <SoundDevice::getAudio(int, float*, float*)+0x9d>
c001bb0d:	39 c7                	cmp    edi,eax
c001bb0f:	7e 02                	jle    c001bb13 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001bb11:	89 c7                	mov    edi,eax
c001bb13:	43                   	inc    ebx
c001bb14:	83 fb 20             	cmp    ebx,0x20
c001bb17:	0f 85 5b ff ff ff    	jne    c001ba78 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001bb1d:	83 c4 1c             	add    esp,0x1c
c001bb20:	89 f8                	mov    eax,edi
c001bb22:	5b                   	pop    ebx
c001bb23:	5e                   	pop    esi
c001bb24:	5f                   	pop    edi
c001bb25:	5d                   	pop    ebp
c001bb26:	c3                   	ret    
c001bb27:	90                   	nop

c001bb28 <PCI::open(int, int, void*)>:
c001bb28:	83 ec 18             	sub    esp,0x18
c001bb2b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001bb2f:	8b 10                	mov    edx,DWORD PTR [eax]
c001bb31:	50                   	push   eax
c001bb32:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001bb35:	31 c0                	xor    eax,eax
c001bb37:	83 c4 1c             	add    esp,0x1c
c001bb3a:	c3                   	ret    
c001bb3b:	90                   	nop

c001bb3c <PCI::close(int, int, void*)>:
c001bb3c:	31 c0                	xor    eax,eax
c001bb3e:	c3                   	ret    
c001bb3f:	90                   	nop

c001bb40 <PCI::PCI()>:
c001bb40:	83 ec 0c             	sub    esp,0xc
c001bb43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb47:	83 ec 08             	sub    esp,0x8
c001bb4a:	68 00 2e 02 c0       	push   0xc0022e00
c001bb4f:	50                   	push   eax
c001bb50:	e8 93 42 ff ff       	call   c000fde8 <Bus::Bus(char const*)>
c001bb55:	83 c4 10             	add    esp,0x10
c001bb58:	ba ac 2e 02 c0       	mov    edx,0xc0022eac
c001bb5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb61:	89 10                	mov    DWORD PTR [eax],edx
c001bb63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bb6d:	31 d2                	xor    edx,edx
c001bb6f:	88 c2                	mov    dl,al
c001bb71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb75:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001bb7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb80:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bb86:	31 d2                	xor    edx,edx
c001bb88:	88 c2                	mov    dl,al
c001bb8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb8e:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001bb93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb97:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001bb9d:	8d 50 01             	lea    edx,[eax+0x1]
c001bba0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bba4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001bbaa:	31 d2                	xor    edx,edx
c001bbac:	88 c2                	mov    dl,al
c001bbae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bbb2:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001bbb6:	83 c9 c0             	or     ecx,0xffffffc0
c001bbb9:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001bbbd:	90                   	nop
c001bbbe:	83 c4 0c             	add    esp,0xc
c001bbc1:	c3                   	ret    

c001bbc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bbc2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001bbc6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bbcb:	c1 e0 10             	shl    eax,0x10
c001bbce:	89 ca                	mov    edx,ecx
c001bbd0:	81 e2 fc 00 00 00    	and    edx,0xfc
c001bbd6:	09 d0                	or     eax,edx
c001bbd8:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001bbdd:	c1 e2 08             	shl    edx,0x8
c001bbe0:	09 d0                	or     eax,edx
c001bbe2:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001bbe7:	c1 e2 0b             	shl    edx,0xb
c001bbea:	09 d0                	or     eax,edx
c001bbec:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bbf1:	0d 00 00 00 80       	or     eax,0x80000000
c001bbf6:	ef                   	out    dx,eax
c001bbf7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bbfc:	ed                   	in     eax,dx
c001bbfd:	83 e1 02             	and    ecx,0x2
c001bc00:	0f b6 c9             	movzx  ecx,cl
c001bc03:	c1 e1 03             	shl    ecx,0x3
c001bc06:	d3 e8                	shr    eax,cl
c001bc08:	c3                   	ret    
c001bc09:	90                   	nop

c001bc0a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001bc0a:	6a 00                	push   0x0
c001bc0c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bc11:	50                   	push   eax
c001bc12:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bc17:	50                   	push   eax
c001bc18:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bc1d:	50                   	push   eax
c001bc1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bc22:	e8 9b ff ff ff       	call   c001bbc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc27:	83 c4 14             	add    esp,0x14
c001bc2a:	c3                   	ret    
c001bc2b:	90                   	nop

c001bc2c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001bc2c:	6a 0e                	push   0xe
c001bc2e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bc33:	50                   	push   eax
c001bc34:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bc39:	50                   	push   eax
c001bc3a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bc3f:	50                   	push   eax
c001bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bc44:	e8 79 ff ff ff       	call   c001bbc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc49:	83 c4 14             	add    esp,0x14
c001bc4c:	0f b6 c0             	movzx  eax,al
c001bc4f:	c3                   	ret    

c001bc50 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001bc50:	55                   	push   ebp
c001bc51:	57                   	push   edi
c001bc52:	56                   	push   esi
c001bc53:	53                   	push   ebx
c001bc54:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001bc59:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001bc5e:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001bc63:	6a 0a                	push   0xa
c001bc65:	56                   	push   esi
c001bc66:	55                   	push   ebp
c001bc67:	57                   	push   edi
c001bc68:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bc6c:	e8 51 ff ff ff       	call   c001bbc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc71:	6a 0a                	push   0xa
c001bc73:	89 c3                	mov    ebx,eax
c001bc75:	56                   	push   esi
c001bc76:	55                   	push   ebp
c001bc77:	57                   	push   edi
c001bc78:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001bc7c:	e8 41 ff ff ff       	call   c001bbc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc81:	83 c4 28             	add    esp,0x28
c001bc84:	0f b6 db             	movzx  ebx,bl
c001bc87:	25 00 ff 00 00       	and    eax,0xff00
c001bc8c:	09 d8                	or     eax,ebx
c001bc8e:	5b                   	pop    ebx
c001bc8f:	5e                   	pop    esi
c001bc90:	5f                   	pop    edi
c001bc91:	5d                   	pop    ebp
c001bc92:	c3                   	ret    
c001bc93:	90                   	nop

c001bc94 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001bc94:	6a 08                	push   0x8
c001bc96:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bc9b:	50                   	push   eax
c001bc9c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bca1:	50                   	push   eax
c001bca2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bca7:	50                   	push   eax
c001bca8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bcac:	e8 11 ff ff ff       	call   c001bbc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bcb1:	83 c4 14             	add    esp,0x14
c001bcb4:	0f b6 c4             	movzx  eax,ah
c001bcb7:	c3                   	ret    

c001bcb8 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001bcb8:	6a 08                	push   0x8
c001bcba:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bcbf:	50                   	push   eax
c001bcc0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bcc5:	50                   	push   eax
c001bcc6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bccb:	50                   	push   eax
c001bccc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bcd0:	e8 ed fe ff ff       	call   c001bbc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bcd5:	83 c4 14             	add    esp,0x14
c001bcd8:	c3                   	ret    
c001bcd9:	90                   	nop

c001bcda <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001bcda:	6a 3c                	push   0x3c
c001bcdc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bce1:	50                   	push   eax
c001bce2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bce7:	50                   	push   eax
c001bce8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bced:	50                   	push   eax
c001bcee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bcf2:	e8 cb fe ff ff       	call   c001bbc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bcf7:	83 c4 14             	add    esp,0x14
c001bcfa:	c3                   	ret    
c001bcfb:	90                   	nop

c001bcfc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001bcfc:	6a 18                	push   0x18
c001bcfe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bd03:	50                   	push   eax
c001bd04:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bd09:	50                   	push   eax
c001bd0a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bd0f:	50                   	push   eax
c001bd10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001bd14:	e8 a9 fe ff ff       	call   c001bbc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bd19:	83 c4 14             	add    esp,0x14
c001bd1c:	0f b6 c4             	movzx  eax,ah
c001bd1f:	c3                   	ret    

c001bd20 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bd20:	55                   	push   ebp
c001bd21:	57                   	push   edi
c001bd22:	56                   	push   esi
c001bd23:	53                   	push   ebx
c001bd24:	50                   	push   eax
c001bd25:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001bd29:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001bd2e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001bd35:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001bd3a:	8d 43 12             	lea    eax,[ebx+0x12]
c001bd3d:	83 c3 10             	add    ebx,0x10
c001bd40:	0f b6 c0             	movzx  eax,al
c001bd43:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001bd48:	50                   	push   eax
c001bd49:	51                   	push   ecx
c001bd4a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001bd4e:	57                   	push   edi
c001bd4f:	55                   	push   ebp
c001bd50:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001bd54:	e8 69 fe ff ff       	call   c001bbc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bd59:	0f b6 db             	movzx  ebx,bl
c001bd5c:	53                   	push   ebx
c001bd5d:	89 c6                	mov    esi,eax
c001bd5f:	c1 e6 10             	shl    esi,0x10
c001bd62:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001bd66:	51                   	push   ecx
c001bd67:	57                   	push   edi
c001bd68:	55                   	push   ebp
c001bd69:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bd6d:	e8 50 fe ff ff       	call   c001bbc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bd72:	83 c4 2c             	add    esp,0x2c
c001bd75:	0f b7 c0             	movzx  eax,ax
c001bd78:	5b                   	pop    ebx
c001bd79:	09 f0                	or     eax,esi
c001bd7b:	5e                   	pop    esi
c001bd7c:	5f                   	pop    edi
c001bd7d:	5d                   	pop    ebp
c001bd7e:	c3                   	ret    
c001bd7f:	90                   	nop

c001bd80 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001bd80:	53                   	push   ebx
c001bd81:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bd86:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001bd8b:	c1 e1 10             	shl    ecx,0x10
c001bd8e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bd92:	25 fc 00 00 00       	and    eax,0xfc
c001bd97:	09 c1                	or     ecx,eax
c001bd99:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001bd9e:	c1 e0 08             	shl    eax,0x8
c001bda1:	09 c1                	or     ecx,eax
c001bda3:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001bda8:	c1 e0 0b             	shl    eax,0xb
c001bdab:	09 c1                	or     ecx,eax
c001bdad:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001bdb3:	89 c8                	mov    eax,ecx
c001bdb5:	ef                   	out    dx,eax
c001bdb6:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bdbb:	ed                   	in     eax,dx
c001bdbc:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001bdc1:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001bdc6:	74 0a                	je     c001bdd2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001bdc8:	0f b7 d8             	movzx  ebx,ax
c001bdcb:	89 d0                	mov    eax,edx
c001bdcd:	c1 e0 10             	shl    eax,0x10
c001bdd0:	eb 05                	jmp    c001bdd7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001bdd2:	66 31 c0             	xor    ax,ax
c001bdd5:	89 d3                	mov    ebx,edx
c001bdd7:	09 c3                	or     ebx,eax
c001bdd9:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bdde:	89 c8                	mov    eax,ecx
c001bde0:	ef                   	out    dx,eax
c001bde1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bde6:	89 d8                	mov    eax,ebx
c001bde8:	ef                   	out    dx,eax
c001bde9:	5b                   	pop    ebx
c001bdea:	c3                   	ret    
c001bdeb:	90                   	nop

c001bdec <PCI::checkBus(unsigned char)>:
c001bdec:	56                   	push   esi
c001bded:	31 f6                	xor    esi,esi
c001bdef:	53                   	push   ebx
c001bdf0:	51                   	push   ecx
c001bdf1:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c001bdf5:	52                   	push   edx
c001bdf6:	56                   	push   esi
c001bdf7:	46                   	inc    esi
c001bdf8:	0f b6 c3             	movzx  eax,bl
c001bdfb:	50                   	push   eax
c001bdfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be00:	e8 4d 03 00 00       	call   c001c152 <PCI::checkDevice(unsigned char, unsigned char)>
c001be05:	83 c4 10             	add    esp,0x10
c001be08:	83 fe 20             	cmp    esi,0x20
c001be0b:	75 e8                	jne    c001bdf5 <PCI::checkBus(unsigned char)+0x9>
c001be0d:	58                   	pop    eax
c001be0e:	5b                   	pop    ebx
c001be0f:	5e                   	pop    esi
c001be10:	c3                   	ret    
c001be11:	90                   	nop

c001be12 <PCI::foundDevice(PCIDeviceInfo)>:
c001be12:	55                   	push   ebp
c001be13:	57                   	push   edi
c001be14:	56                   	push   esi
c001be15:	53                   	push   ebx
c001be16:	83 ec 1c             	sub    esp,0x1c
c001be19:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001be1d:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001be23:	0f 84 51 01 00 00    	je     c001bf7a <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001be29:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001be2d:	66 81 f9 06 04       	cmp    cx,0x406
c001be32:	75 2c                	jne    c001be60 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001be34:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001be39:	50                   	push   eax
c001be3a:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001be3f:	50                   	push   eax
c001be40:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001be45:	50                   	push   eax
c001be46:	56                   	push   esi
c001be47:	e8 b0 fe ff ff       	call   c001bcfc <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001be4c:	0f b6 c0             	movzx  eax,al
c001be4f:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001be53:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001be57:	83 c4 2c             	add    esp,0x2c
c001be5a:	5b                   	pop    ebx
c001be5b:	5e                   	pop    esi
c001be5c:	5f                   	pop    edi
c001be5d:	5d                   	pop    ebp
c001be5e:	eb 8c                	jmp    c001bdec <PCI::checkBus(unsigned char)>
c001be60:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001be64:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001be6a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001be6e:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001be72:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001be76:	88 d3                	mov    bl,dl
c001be78:	85 c0                	test   eax,eax
c001be7a:	74 33                	je     c001beaf <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001be7c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001be7f:	85 d2                	test   edx,edx
c001be81:	74 28                	je     c001beab <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001be83:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001be89:	31 ef                	xor    edi,ebp
c001be8b:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001be91:	75 18                	jne    c001beab <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001be93:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001be97:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001be9d:	75 0c                	jne    c001beab <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001be9f:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001bea5:	0f 84 cf 00 00 00    	je     c001bf7a <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001beab:	8b 00                	mov    eax,DWORD PTR [eax]
c001bead:	eb c9                	jmp    c001be78 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001beaf:	66 81 f9 01 06       	cmp    cx,0x601
c001beb4:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001beb8:	75 18                	jne    c001bed2 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001beba:	83 ec 0c             	sub    esp,0xc
c001bebd:	68 58 01 00 00       	push   0x158
c001bec2:	e8 5d 31 ff ff       	call   c000f024 <operator new(unsigned long)>
c001bec7:	59                   	pop    ecx
c001bec8:	89 c5                	mov    ebp,eax
c001beca:	5f                   	pop    edi
c001becb:	68 08 2e 02 c0       	push   0xc0022e08
c001bed0:	eb 7d                	jmp    c001bf4f <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001bed2:	66 81 f9 01 01       	cmp    cx,0x101
c001bed7:	75 60                	jne    c001bf39 <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001bed9:	83 ec 0c             	sub    esp,0xc
c001bedc:	68 70 02 00 00       	push   0x270
c001bee1:	e8 3e 31 ff ff       	call   c000f024 <operator new(unsigned long)>
c001bee6:	89 04 24             	mov    DWORD PTR [esp],eax
c001bee9:	89 c5                	mov    ebp,eax
c001beeb:	e8 26 03 00 00       	call   c001c216 <IDE::IDE()>
c001bef0:	58                   	pop    eax
c001bef1:	5a                   	pop    edx
c001bef2:	55                   	push   ebp
c001bef3:	56                   	push   esi
c001bef4:	e8 75 46 ff ff       	call   c001056e <Device::addChild(Device*)>
c001bef9:	83 ec 1c             	sub    esp,0x1c
c001befc:	b9 09 00 00 00       	mov    ecx,0x9
c001bf01:	fc                   	cld    
c001bf02:	89 e7                	mov    edi,esp
c001bf04:	89 de                	mov    esi,ebx
c001bf06:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bf08:	55                   	push   ebp
c001bf09:	e8 3e 45 ff ff       	call   c001044c <Device::preOpenPCI(PCIDeviceInfo)>
c001bf0e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001bf11:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001bf15:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001bf1d:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001bf25:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001bf2d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bf30:	83 c4 4c             	add    esp,0x4c
c001bf33:	5b                   	pop    ebx
c001bf34:	5e                   	pop    esi
c001bf35:	5f                   	pop    edi
c001bf36:	5d                   	pop    ebp
c001bf37:	ff e0                	jmp    eax
c001bf39:	83 ec 0c             	sub    esp,0xc
c001bf3c:	68 58 01 00 00       	push   0x158
c001bf41:	e8 de 30 ff ff       	call   c000f024 <operator new(unsigned long)>
c001bf46:	59                   	pop    ecx
c001bf47:	89 c5                	mov    ebp,eax
c001bf49:	5f                   	pop    edi
c001bf4a:	68 27 2e 02 c0       	push   0xc0022e27
c001bf4f:	55                   	push   ebp
c001bf50:	e8 05 49 ff ff       	call   c001085a <DriverlessDevice::DriverlessDevice(char const*)>
c001bf55:	58                   	pop    eax
c001bf56:	5a                   	pop    edx
c001bf57:	55                   	push   ebp
c001bf58:	56                   	push   esi
c001bf59:	e8 10 46 ff ff       	call   c001056e <Device::addChild(Device*)>
c001bf5e:	b9 09 00 00 00       	mov    ecx,0x9
c001bf63:	fc                   	cld    
c001bf64:	89 df                	mov    edi,ebx
c001bf66:	89 de                	mov    esi,ebx
c001bf68:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001bf6a:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001bf6e:	83 c4 2c             	add    esp,0x2c
c001bf71:	5b                   	pop    ebx
c001bf72:	5e                   	pop    esi
c001bf73:	5f                   	pop    edi
c001bf74:	5d                   	pop    ebp
c001bf75:	e9 d2 44 ff ff       	jmp    c001044c <Device::preOpenPCI(PCIDeviceInfo)>
c001bf7a:	83 c4 1c             	add    esp,0x1c
c001bf7d:	5b                   	pop    ebx
c001bf7e:	5e                   	pop    esi
c001bf7f:	5f                   	pop    edi
c001bf80:	5d                   	pop    ebp
c001bf81:	c3                   	ret    

c001bf82 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001bf82:	55                   	push   ebp
c001bf83:	57                   	push   edi
c001bf84:	56                   	push   esi
c001bf85:	53                   	push   ebx
c001bf86:	83 ec 5c             	sub    esp,0x5c
c001bf89:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001bf8d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001bf91:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001bf95:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bf99:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001bf9d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bfa1:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001bfa6:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001bfab:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001bfb0:	6a 0c                	push   0xc
c001bfb2:	55                   	push   ebp
c001bfb3:	53                   	push   ebx
c001bfb4:	57                   	push   edi
c001bfb5:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001bfbc:	e8 01 fc ff ff       	call   c001bbc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bfc1:	83 c4 0c             	add    esp,0xc
c001bfc4:	6a 00                	push   0x0
c001bfc6:	68 41 2e 02 c0       	push   0xc0022e41
c001bfcb:	e8 89 31 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001bfd0:	55                   	push   ebp
c001bfd1:	53                   	push   ebx
c001bfd2:	57                   	push   edi
c001bfd3:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001bfda:	e8 71 fc ff ff       	call   c001bc50 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001bfdf:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001bfe4:	83 c4 20             	add    esp,0x20
c001bfe7:	55                   	push   ebp
c001bfe8:	53                   	push   ebx
c001bfe9:	57                   	push   edi
c001bfea:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001bfee:	e8 e7 fc ff ff       	call   c001bcda <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001bff3:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001bffa:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001bffe:	55                   	push   ebp
c001bfff:	53                   	push   ebx
c001c000:	57                   	push   edi
c001c001:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c008:	e8 b5 fb ff ff       	call   c001bbc2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c00d:	0f b6 c4             	movzx  eax,ah
c001c010:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c014:	83 c4 18             	add    esp,0x18
c001c017:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c01b:	68 55 2e 02 c0       	push   0xc0022e55
c001c020:	e8 34 31 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001c025:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c029:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001c02d:	a1 28 41 02 c0       	mov    eax,ds:0xc0024128
c001c032:	83 c4 10             	add    esp,0x10
c001c035:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001c03b:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001c042:	74 6c                	je     c001c0b0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001c044:	31 f6                	xor    esi,esi
c001c046:	8b 15 28 41 02 c0    	mov    edx,DWORD PTR ds:0xc0024128
c001c04c:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c052:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001c058:	7e 56                	jle    c001c0b0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001c05a:	8d 14 f2             	lea    edx,[edx+esi*8]
c001c05d:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001c064:	39 cb                	cmp    ebx,ecx
c001c066:	75 45                	jne    c001c0ad <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001c068:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001c06f:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001c073:	75 38                	jne    c001c0ad <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001c075:	83 ec 0c             	sub    esp,0xc
c001c078:	68 64 2e 02 c0       	push   0xc0022e64
c001c07d:	e8 d7 30 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001c082:	8b 15 28 41 02 c0    	mov    edx,DWORD PTR ds:0xc0024128
c001c088:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c08e:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001c096:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001c09a:	52                   	push   edx
c001c09b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c09f:	53                   	push   ebx
c001c0a0:	68 89 2e 02 c0       	push   0xc0022e89
c001c0a5:	e8 af 30 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001c0aa:	83 c4 20             	add    esp,0x20
c001c0ad:	46                   	inc    esi
c001c0ae:	eb 96                	jmp    c001c046 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001c0b0:	31 d2                	xor    edx,edx
c001c0b2:	83 ec 0c             	sub    esp,0xc
c001c0b5:	55                   	push   ebp
c001c0b6:	53                   	push   ebx
c001c0b7:	57                   	push   edi
c001c0b8:	52                   	push   edx
c001c0b9:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c0bd:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c0c4:	e8 57 fc ff ff       	call   c001bd20 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c0c9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c0cd:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001c0d1:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c0d5:	42                   	inc    edx
c001c0d6:	83 c4 20             	add    esp,0x20
c001c0d9:	83 fa 06             	cmp    edx,0x6
c001c0dc:	75 d4                	jne    c001c0b2 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001c0de:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c0e2:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001c0e6:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001c0ea:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001c0ee:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c0f2:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001c0f6:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c0fb:	86 e0                	xchg   al,ah
c001c0fd:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001c102:	55                   	push   ebp
c001c103:	53                   	push   ebx
c001c104:	57                   	push   edi
c001c105:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c109:	e8 86 fb ff ff       	call   c001bc94 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c10e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c112:	55                   	push   ebp
c001c113:	53                   	push   ebx
c001c114:	57                   	push   edi
c001c115:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c11c:	e8 e9 fa ff ff       	call   c001bc0a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c121:	83 ec 0c             	sub    esp,0xc
c001c124:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001c129:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001c12d:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001c131:	b9 09 00 00 00       	mov    ecx,0x9
c001c136:	fc                   	cld    
c001c137:	89 e7                	mov    edi,esp
c001c139:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c13b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001c142:	e8 cb fc ff ff       	call   c001be12 <PCI::foundDevice(PCIDeviceInfo)>
c001c147:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c14d:	5b                   	pop    ebx
c001c14e:	5e                   	pop    esi
c001c14f:	5f                   	pop    edi
c001c150:	5d                   	pop    ebp
c001c151:	c3                   	ret    

c001c152 <PCI::checkDevice(unsigned char, unsigned char)>:
c001c152:	55                   	push   ebp
c001c153:	57                   	push   edi
c001c154:	56                   	push   esi
c001c155:	53                   	push   ebx
c001c156:	83 ec 0c             	sub    esp,0xc
c001c159:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c15e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c162:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c167:	6a 00                	push   0x0
c001c169:	56                   	push   esi
c001c16a:	57                   	push   edi
c001c16b:	55                   	push   ebp
c001c16c:	e8 99 fa ff ff       	call   c001bc0a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c171:	6a 00                	push   0x0
c001c173:	56                   	push   esi
c001c174:	57                   	push   edi
c001c175:	55                   	push   ebp
c001c176:	e8 07 fe ff ff       	call   c001bf82 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c17b:	83 c4 20             	add    esp,0x20
c001c17e:	6a 00                	push   0x0
c001c180:	56                   	push   esi
c001c181:	57                   	push   edi
c001c182:	55                   	push   ebp
c001c183:	e8 a4 fa ff ff       	call   c001bc2c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c188:	83 c4 10             	add    esp,0x10
c001c18b:	84 c0                	test   al,al
c001c18d:	79 27                	jns    c001c1b6 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c18f:	bb 01 00 00 00       	mov    ebx,0x1
c001c194:	53                   	push   ebx
c001c195:	56                   	push   esi
c001c196:	57                   	push   edi
c001c197:	55                   	push   ebp
c001c198:	e8 6d fa ff ff       	call   c001bc0a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c19d:	83 c4 10             	add    esp,0x10
c001c1a0:	66 40                	inc    ax
c001c1a2:	74 0c                	je     c001c1b0 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001c1a4:	53                   	push   ebx
c001c1a5:	56                   	push   esi
c001c1a6:	57                   	push   edi
c001c1a7:	55                   	push   ebp
c001c1a8:	e8 d5 fd ff ff       	call   c001bf82 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c1ad:	83 c4 10             	add    esp,0x10
c001c1b0:	43                   	inc    ebx
c001c1b1:	83 fb 08             	cmp    ebx,0x8
c001c1b4:	75 de                	jne    c001c194 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c1b6:	83 c4 0c             	add    esp,0xc
c001c1b9:	5b                   	pop    ebx
c001c1ba:	5e                   	pop    esi
c001c1bb:	5f                   	pop    edi
c001c1bc:	5d                   	pop    ebp
c001c1bd:	c3                   	ret    

c001c1be <PCI::detect()>:
c001c1be:	56                   	push   esi
c001c1bf:	53                   	push   ebx
c001c1c0:	53                   	push   ebx
c001c1c1:	31 db                	xor    ebx,ebx
c001c1c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c1c7:	6a 00                	push   0x0
c001c1c9:	6a 00                	push   0x0
c001c1cb:	6a 00                	push   0x0
c001c1cd:	56                   	push   esi
c001c1ce:	e8 59 fa ff ff       	call   c001bc2c <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c1d3:	83 c4 10             	add    esp,0x10
c001c1d6:	a8 80                	test   al,0x80
c001c1d8:	75 21                	jne    c001c1fb <PCI::detect()+0x3d>
c001c1da:	51                   	push   ecx
c001c1db:	51                   	push   ecx
c001c1dc:	6a 00                	push   0x0
c001c1de:	56                   	push   esi
c001c1df:	e8 08 fc ff ff       	call   c001bdec <PCI::checkBus(unsigned char)>
c001c1e4:	83 c4 10             	add    esp,0x10
c001c1e7:	eb 24                	jmp    c001c20d <PCI::detect()+0x4f>
c001c1e9:	52                   	push   edx
c001c1ea:	52                   	push   edx
c001c1eb:	53                   	push   ebx
c001c1ec:	43                   	inc    ebx
c001c1ed:	56                   	push   esi
c001c1ee:	e8 f9 fb ff ff       	call   c001bdec <PCI::checkBus(unsigned char)>
c001c1f3:	83 c4 10             	add    esp,0x10
c001c1f6:	83 fb 08             	cmp    ebx,0x8
c001c1f9:	74 12                	je     c001c20d <PCI::detect()+0x4f>
c001c1fb:	53                   	push   ebx
c001c1fc:	6a 00                	push   0x0
c001c1fe:	6a 00                	push   0x0
c001c200:	56                   	push   esi
c001c201:	e8 04 fa ff ff       	call   c001bc0a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c206:	83 c4 10             	add    esp,0x10
c001c209:	66 40                	inc    ax
c001c20b:	74 dc                	je     c001c1e9 <PCI::detect()+0x2b>
c001c20d:	58                   	pop    eax
c001c20e:	5b                   	pop    ebx
c001c20f:	5e                   	pop    esi
c001c210:	c3                   	ret    
c001c211:	90                   	nop

c001c212 <IDE::close(int, int, void*)>:
c001c212:	83 c8 ff             	or     eax,0xffffffff
c001c215:	c3                   	ret    

c001c216 <IDE::IDE()>:
c001c216:	83 ec 0c             	sub    esp,0xc
c001c219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c21d:	83 ec 08             	sub    esp,0x8
c001c220:	68 d0 2e 02 c0       	push   0xc0022ed0
c001c225:	50                   	push   eax
c001c226:	e8 c5 46 ff ff       	call   c00108f0 <HardDiskController::HardDiskController(char const*)>
c001c22b:	83 c4 10             	add    esp,0x10
c001c22e:	ba 10 31 02 c0       	mov    edx,0xc0023110
c001c233:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c237:	89 10                	mov    DWORD PTR [eax],edx
c001c239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c23d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c244:	90                   	nop
c001c245:	83 c4 0c             	add    esp,0xc
c001c248:	c3                   	ret    
c001c249:	90                   	nop

c001c24a <IDE::prepareInterrupt(unsigned char)>:
c001c24a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c24f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c253:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c25b:	c3                   	ret    

c001c25c <selectDrive(unsigned char, unsigned char)>:
c001c25c:	c3                   	ret    
c001c25d:	90                   	nop

c001c25e <IDE::getBase(unsigned char)>:
c001c25e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c263:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c267:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c26f:	c3                   	ret    

c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c270:	55                   	push   ebp
c001c271:	57                   	push   edi
c001c272:	56                   	push   esi
c001c273:	53                   	push   ebx
c001c274:	83 ec 1c             	sub    esp,0x1c
c001c277:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c27b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c27f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c283:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c287:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c28a:	80 f9 03             	cmp    cl,0x3
c001c28d:	77 51                	ja     c001c2e0 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001c28f:	0f b6 f2             	movzx  esi,dl
c001c292:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c296:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c299:	0f b6 db             	movzx  ebx,bl
c001c29c:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001c2a0:	83 ca 80             	or     edx,0xffffff80
c001c2a3:	0f b6 d2             	movzx  edx,dl
c001c2a6:	52                   	push   edx
c001c2a7:	6a 0c                	push   0xc
c001c2a9:	56                   	push   esi
c001c2aa:	57                   	push   edi
c001c2ab:	e8 c0 ff ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2b0:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c2b5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c2b9:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c2bd:	ee                   	out    dx,al
c001c2be:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c2c3:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c2c7:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c2cb:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c2cf:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c2d7:	83 c4 2c             	add    esp,0x2c
c001c2da:	5b                   	pop    ebx
c001c2db:	5e                   	pop    esi
c001c2dc:	5f                   	pop    edi
c001c2dd:	5d                   	pop    ebp
c001c2de:	eb 90                	jmp    c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c2e0:	80 fb 07             	cmp    bl,0x7
c001c2e3:	77 12                	ja     c001c2f7 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001c2e5:	0f b6 d2             	movzx  edx,dl
c001c2e8:	0f b6 db             	movzx  ebx,bl
c001c2eb:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001c2f3:	89 da                	mov    edx,ebx
c001c2f5:	eb 2f                	jmp    c001c326 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c2f7:	80 fb 0d             	cmp    bl,0xd
c001c2fa:	77 13                	ja     c001c30f <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001c2fc:	0f b6 d2             	movzx  edx,dl
c001c2ff:	0f b6 db             	movzx  ebx,bl
c001c302:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c309:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c30d:	eb 17                	jmp    c001c326 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c30f:	80 fb 15             	cmp    bl,0x15
c001c312:	77 13                	ja     c001c327 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c314:	0f b6 d2             	movzx  edx,dl
c001c317:	0f b6 db             	movzx  ebx,bl
c001c31a:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c322:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c326:	ee                   	out    dx,al
c001c327:	83 c4 1c             	add    esp,0x1c
c001c32a:	5b                   	pop    ebx
c001c32b:	5e                   	pop    esi
c001c32c:	5f                   	pop    edi
c001c32d:	5d                   	pop    ebp
c001c32e:	c3                   	ret    
c001c32f:	90                   	nop

c001c330 <IDE::read(unsigned char, unsigned char)>:
c001c330:	55                   	push   ebp
c001c331:	57                   	push   edi
c001c332:	56                   	push   esi
c001c333:	53                   	push   ebx
c001c334:	83 ec 1c             	sub    esp,0x1c
c001c337:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c33b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c33f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c343:	8d 43 f8             	lea    eax,[ebx-0x8]
c001c346:	3c 03                	cmp    al,0x3
c001c348:	77 43                	ja     c001c38d <IDE::read(unsigned char, unsigned char)+0x5d>
c001c34a:	0f b6 f2             	movzx  esi,dl
c001c34d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c350:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001c354:	83 c8 80             	or     eax,0xffffff80
c001c357:	0f b6 c0             	movzx  eax,al
c001c35a:	50                   	push   eax
c001c35b:	6a 0c                	push   0xc
c001c35d:	56                   	push   esi
c001c35e:	57                   	push   edi
c001c35f:	e8 0c ff ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c364:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001c369:	0f b6 c3             	movzx  eax,bl
c001c36c:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001c370:	ec                   	in     al,dx
c001c371:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c376:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c37a:	52                   	push   edx
c001c37b:	6a 0c                	push   0xc
c001c37d:	56                   	push   esi
c001c37e:	57                   	push   edi
c001c37f:	e8 ec fe ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c384:	83 c4 20             	add    esp,0x20
c001c387:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c38b:	eb 49                	jmp    c001c3d6 <IDE::read(unsigned char, unsigned char)+0xa6>
c001c38d:	80 fb 07             	cmp    bl,0x7
c001c390:	77 12                	ja     c001c3a4 <IDE::read(unsigned char, unsigned char)+0x74>
c001c392:	0f b6 d2             	movzx  edx,dl
c001c395:	0f b6 c3             	movzx  eax,bl
c001c398:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001c3a0:	89 c2                	mov    edx,eax
c001c3a2:	eb 31                	jmp    c001c3d5 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c3a4:	80 fb 0d             	cmp    bl,0xd
c001c3a7:	77 13                	ja     c001c3bc <IDE::read(unsigned char, unsigned char)+0x8c>
c001c3a9:	0f b6 d2             	movzx  edx,dl
c001c3ac:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001c3b3:	0f b6 d3             	movzx  edx,bl
c001c3b6:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c3ba:	eb 19                	jmp    c001c3d5 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c3bc:	31 c0                	xor    eax,eax
c001c3be:	80 fb 15             	cmp    bl,0x15
c001c3c1:	77 13                	ja     c001c3d6 <IDE::read(unsigned char, unsigned char)+0xa6>
c001c3c3:	0f b6 d2             	movzx  edx,dl
c001c3c6:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001c3ce:	0f b6 d3             	movzx  edx,bl
c001c3d1:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c3d5:	ec                   	in     al,dx
c001c3d6:	83 c4 1c             	add    esp,0x1c
c001c3d9:	5b                   	pop    ebx
c001c3da:	5e                   	pop    esi
c001c3db:	5f                   	pop    edi
c001c3dc:	5d                   	pop    ebp
c001c3dd:	c3                   	ret    

c001c3de <IDE::waitInterrupt(unsigned char)>:
c001c3de:	57                   	push   edi
c001c3df:	56                   	push   esi
c001c3e0:	31 f6                	xor    esi,esi
c001c3e2:	53                   	push   ebx
c001c3e3:	83 ec 10             	sub    esp,0x10
c001c3e6:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001c3ea:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c3ee:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c3f2:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001c3f7:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001c3fe:	84 db                	test   bl,bl
c001c400:	75 37                	jne    c001c439 <IDE::waitInterrupt(unsigned char)+0x5b>
c001c402:	52                   	push   edx
c001c403:	6a 0c                	push   0xc
c001c405:	50                   	push   eax
c001c406:	57                   	push   edi
c001c407:	e8 24 ff ff ff       	call   c001c330 <IDE::read(unsigned char, unsigned char)>
c001c40c:	83 c4 10             	add    esp,0x10
c001c40f:	a8 01                	test   al,0x1
c001c411:	75 2e                	jne    c001c441 <IDE::waitInterrupt(unsigned char)+0x63>
c001c413:	f7 c6 04 00 00 00    	test   esi,0x4
c001c419:	75 16                	jne    c001c431 <IDE::waitInterrupt(unsigned char)+0x53>
c001c41b:	83 fe 32             	cmp    esi,0x32
c001c41e:	7e 11                	jle    c001c431 <IDE::waitInterrupt(unsigned char)+0x53>
c001c420:	50                   	push   eax
c001c421:	50                   	push   eax
c001c422:	6a 00                	push   0x0
c001c424:	68 80 96 98 00       	push   0x989680
c001c429:	e8 25 c5 ff ff       	call   c0018953 <nanoSleep(unsigned long long)>
c001c42e:	83 c4 10             	add    esp,0x10
c001c431:	83 fe 3c             	cmp    esi,0x3c
c001c434:	74 0b                	je     c001c441 <IDE::waitInterrupt(unsigned char)+0x63>
c001c436:	46                   	inc    esi
c001c437:	eb b9                	jmp    c001c3f2 <IDE::waitInterrupt(unsigned char)+0x14>
c001c439:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001c441:	83 c4 10             	add    esp,0x10
c001c444:	88 d8                	mov    al,bl
c001c446:	5b                   	pop    ebx
c001c447:	5e                   	pop    esi
c001c448:	5f                   	pop    edi
c001c449:	c3                   	ret    

c001c44a <ideChannel0IRQHandler(regs*, void*)>:
c001c44a:	83 ec 10             	sub    esp,0x10
c001c44d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c451:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c458:	6a 07                	push   0x7
c001c45a:	6a 00                	push   0x0
c001c45c:	50                   	push   eax
c001c45d:	e8 ce fe ff ff       	call   c001c330 <IDE::read(unsigned char, unsigned char)>
c001c462:	83 c4 1c             	add    esp,0x1c
c001c465:	c3                   	ret    

c001c466 <ideChannel1IRQHandler(regs*, void*)>:
c001c466:	83 ec 10             	sub    esp,0x10
c001c469:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c46d:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c474:	6a 07                	push   0x7
c001c476:	6a 01                	push   0x1
c001c478:	50                   	push   eax
c001c479:	e8 b2 fe ff ff       	call   c001c330 <IDE::read(unsigned char, unsigned char)>
c001c47e:	83 c4 1c             	add    esp,0x1c
c001c481:	c3                   	ret    

c001c482 <IDE::enableIRQs(unsigned char, bool)>:
c001c482:	57                   	push   edi
c001c483:	56                   	push   esi
c001c484:	be 04 00 00 00       	mov    esi,0x4
c001c489:	53                   	push   ebx
c001c48a:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001c48f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c494:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c498:	0f 94 c0             	sete   al
c001c49b:	01 c0                	add    eax,eax
c001c49d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001c4a4:	0f b6 c0             	movzx  eax,al
c001c4a7:	50                   	push   eax
c001c4a8:	6a 0c                	push   0xc
c001c4aa:	57                   	push   edi
c001c4ab:	53                   	push   ebx
c001c4ac:	e8 bf fd ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4b1:	83 c4 10             	add    esp,0x10
c001c4b4:	50                   	push   eax
c001c4b5:	6a 0c                	push   0xc
c001c4b7:	57                   	push   edi
c001c4b8:	53                   	push   ebx
c001c4b9:	e8 72 fe ff ff       	call   c001c330 <IDE::read(unsigned char, unsigned char)>
c001c4be:	83 c4 10             	add    esp,0x10
c001c4c1:	4e                   	dec    esi
c001c4c2:	75 f0                	jne    c001c4b4 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001c4c4:	5b                   	pop    ebx
c001c4c5:	5e                   	pop    esi
c001c4c6:	5f                   	pop    edi
c001c4c7:	c3                   	ret    

c001c4c8 <IDE::open(int, int, void*)>:
c001c4c8:	55                   	push   ebp
c001c4c9:	57                   	push   edi
c001c4ca:	56                   	push   esi
c001c4cb:	53                   	push   ebx
c001c4cc:	83 ec 1c             	sub    esp,0x1c
c001c4cf:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c4d3:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c4dc:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c4e5:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c4ec:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c4f3:	0f 85 b2 02 00 00    	jne    c001c7ab <IDE::open(int, int, void*)+0x2e3>
c001c4f9:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c4ff:	88 04 24             	mov    BYTE PTR [esp],al
c001c502:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c505:	83 e0 7f             	and    eax,0x7f
c001c508:	83 f8 05             	cmp    eax,0x5
c001c50b:	74 05                	je     c001c512 <IDE::open(int, int, void*)+0x4a>
c001c50d:	83 f8 0f             	cmp    eax,0xf
c001c510:	75 32                	jne    c001c544 <IDE::open(int, int, void*)+0x7c>
c001c512:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c518:	83 e0 fc             	and    eax,0xfffffffc
c001c51b:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c522:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c528:	83 e0 fc             	and    eax,0xfffffffc
c001c52b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c532:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c538:	83 e0 fc             	and    eax,0xfffffffc
c001c53b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c542:	eb 14                	jmp    c001c558 <IDE::open(int, int, void*)+0x90>
c001c544:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c54e:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c558:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001c55f:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001c566:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c56a:	89 c6                	mov    esi,eax
c001c56c:	89 e8                	mov    eax,ebp
c001c56e:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c573:	c1 e6 10             	shl    esi,0x10
c001c576:	89 fa                	mov    edx,edi
c001c578:	c1 e0 0b             	shl    eax,0xb
c001c57b:	09 f0                	or     eax,esi
c001c57d:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001c584:	c1 e6 08             	shl    esi,0x8
c001c587:	09 c6                	or     esi,eax
c001c589:	89 f0                	mov    eax,esi
c001c58b:	0d 08 00 00 80       	or     eax,0x80000008
c001c590:	ef                   	out    dx,eax
c001c591:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001c596:	89 ca                	mov    edx,ecx
c001c598:	ed                   	in     eax,dx
c001c599:	c1 e8 10             	shr    eax,0x10
c001c59c:	3d ff ff 00 00       	cmp    eax,0xffff
c001c5a1:	0f 84 f3 00 00 00    	je     c001c69a <IDE::open(int, int, void*)+0x1d2>
c001c5a7:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001c5ad:	89 fa                	mov    edx,edi
c001c5af:	89 f0                	mov    eax,esi
c001c5b1:	ef                   	out    dx,eax
c001c5b2:	b0 fe                	mov    al,0xfe
c001c5b4:	89 ca                	mov    edx,ecx
c001c5b6:	ee                   	out    dx,al
c001c5b7:	89 f0                	mov    eax,esi
c001c5b9:	89 fa                	mov    edx,edi
c001c5bb:	ef                   	out    dx,eax
c001c5bc:	89 ca                	mov    edx,ecx
c001c5be:	ed                   	in     eax,dx
c001c5bf:	3c fe                	cmp    al,0xfe
c001c5c1:	0f 85 a9 00 00 00    	jne    c001c670 <IDE::open(int, int, void*)+0x1a8>
c001c5c7:	8b 15 28 41 02 c0    	mov    edx,DWORD PTR ds:0xc0024128
c001c5cd:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001c5d4:	74 33                	je     c001c609 <IDE::open(int, int, void*)+0x141>
c001c5d6:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001c5dc:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001c5e0:	40                   	inc    eax
c001c5e1:	83 ec 0c             	sub    esp,0xc
c001c5e4:	0f b6 c0             	movzx  eax,al
c001c5e7:	50                   	push   eax
c001c5e8:	55                   	push   ebp
c001c5e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c5ed:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001c5f3:	51                   	push   ecx
c001c5f4:	e8 1d 72 ff ff       	call   c0013816 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001c5f9:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001c5fe:	83 c4 1c             	add    esp,0x1c
c001c601:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c607:	eb 0a                	jmp    c001c613 <IDE::open(int, int, void*)+0x14b>
c001c609:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c613:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c61a:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c621:	c1 e1 10             	shl    ecx,0x10
c001c624:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c629:	c1 e0 08             	shl    eax,0x8
c001c62c:	89 fa                	mov    edx,edi
c001c62e:	09 c1                	or     ecx,eax
c001c630:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c637:	c1 e0 0b             	shl    eax,0xb
c001c63a:	09 c1                	or     ecx,eax
c001c63c:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c642:	89 c8                	mov    eax,ecx
c001c644:	ef                   	out    dx,eax
c001c645:	be fc 0c 00 00       	mov    esi,0xcfc
c001c64a:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001c650:	89 f2                	mov    edx,esi
c001c652:	ee                   	out    dx,al
c001c653:	89 c8                	mov    eax,ecx
c001c655:	89 fa                	mov    edx,edi
c001c657:	ef                   	out    dx,eax
c001c658:	89 f2                	mov    edx,esi
c001c65a:	ed                   	in     eax,dx
c001c65b:	0f b6 c0             	movzx  eax,al
c001c65e:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001c664:	74 44                	je     c001c6aa <IDE::open(int, int, void*)+0x1e2>
c001c666:	83 ec 0c             	sub    esp,0xc
c001c669:	68 e8 2e 02 c0       	push   0xc0022ee8
c001c66e:	eb 32                	jmp    c001c6a2 <IDE::open(int, int, void*)+0x1da>
c001c670:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c679:	75 15                	jne    c001c690 <IDE::open(int, int, void*)+0x1c8>
c001c67b:	80 3c 24 8a          	cmp    BYTE PTR [esp],0x8a
c001c67f:	74 06                	je     c001c687 <IDE::open(int, int, void*)+0x1bf>
c001c681:	80 3c 24 80          	cmp    BYTE PTR [esp],0x80
c001c685:	75 09                	jne    c001c690 <IDE::open(int, int, void*)+0x1c8>
c001c687:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c68e:	eb 1a                	jmp    c001c6aa <IDE::open(int, int, void*)+0x1e2>
c001c690:	83 ec 0c             	sub    esp,0xc
c001c693:	68 f0 2e 02 c0       	push   0xc0022ef0
c001c698:	eb 08                	jmp    c001c6a2 <IDE::open(int, int, void*)+0x1da>
c001c69a:	83 ec 0c             	sub    esp,0xc
c001c69d:	68 21 2f 02 c0       	push   0xc0022f21
c001c6a2:	e8 45 8d ff ff       	call   c00153ec <Krnl::panic(char const*)>
c001c6a7:	83 c4 10             	add    esp,0x10
c001c6aa:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001c6b1:	79 1a                	jns    c001c6cd <IDE::open(int, int, void*)+0x205>
c001c6b3:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c6b9:	83 e0 fc             	and    eax,0xfffffffc
c001c6bc:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c6c3:	83 c0 08             	add    eax,0x8
c001c6c6:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001c6cd:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001c6d3:	89 c2                	mov    edx,eax
c001c6d5:	83 e2 0f             	and    edx,0xf
c001c6d8:	66 83 fa 08          	cmp    dx,0x8
c001c6dc:	75 0a                	jne    c001c6e8 <IDE::open(int, int, void*)+0x220>
c001c6de:	83 e8 02             	sub    eax,0x2
c001c6e1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c6e8:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001c6ee:	89 c2                	mov    edx,eax
c001c6f0:	83 e2 0f             	and    edx,0xf
c001c6f3:	66 83 fa 08          	cmp    dx,0x8
c001c6f7:	75 0a                	jne    c001c703 <IDE::open(int, int, void*)+0x23b>
c001c6f9:	83 e8 02             	sub    eax,0x2
c001c6fc:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001c703:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001c70a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001c711:	89 d0                	mov    eax,edx
c001c713:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c716:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c71a:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001c71e:	8d 4a 01             	lea    ecx,[edx+0x1]
c001c721:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c726:	0f b6 c9             	movzx  ecx,cl
c001c729:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001c730:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c733:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c737:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001c73b:	8d 50 02             	lea    edx,[eax+0x2]
c001c73e:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c743:	0f b6 d2             	movzx  edx,dl
c001c746:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001c74c:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c74f:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c753:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001c757:	8d 48 03             	lea    ecx,[eax+0x3]
c001c75a:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c75f:	0f b6 c9             	movzx  ecx,cl
c001c762:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001c768:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001c76b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001c76f:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001c773:	8d 50 04             	lea    edx,[eax+0x4]
c001c776:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001c77c:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001c781:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001c788:	66 85 f6             	test   si,si
c001c78b:	74 3e                	je     c001c7cb <IDE::open(int, int, void*)+0x303>
c001c78d:	0f b6 d2             	movzx  edx,dl
c001c790:	83 c0 05             	add    eax,0x5
c001c793:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001c796:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001c79a:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001c79e:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001c7a4:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001c7a9:	eb 20                	jmp    c001c7cb <IDE::open(int, int, void*)+0x303>
c001c7ab:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c7b5:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c7bf:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c7c6:	e9 02 ff ff ff       	jmp    c001c6cd <IDE::open(int, int, void*)+0x205>
c001c7cb:	52                   	push   edx
c001c7cc:	52                   	push   edx
c001c7cd:	6a 00                	push   0x0
c001c7cf:	53                   	push   ebx
c001c7d0:	e8 75 fa ff ff       	call   c001c24a <IDE::prepareInterrupt(unsigned char)>
c001c7d5:	59                   	pop    ecx
c001c7d6:	5e                   	pop    esi
c001c7d7:	6a 01                	push   0x1
c001c7d9:	53                   	push   ebx
c001c7da:	e8 6b fa ff ff       	call   c001c24a <IDE::prepareInterrupt(unsigned char)>
c001c7df:	83 c4 0c             	add    esp,0xc
c001c7e2:	6a 00                	push   0x0
c001c7e4:	6a 00                	push   0x0
c001c7e6:	53                   	push   ebx
c001c7e7:	e8 96 fc ff ff       	call   c001c482 <IDE::enableIRQs(unsigned char, bool)>
c001c7ec:	83 c4 0c             	add    esp,0xc
c001c7ef:	6a 00                	push   0x0
c001c7f1:	6a 01                	push   0x1
c001c7f3:	53                   	push   ebx
c001c7f4:	e8 89 fc ff ff       	call   c001c482 <IDE::enableIRQs(unsigned char, bool)>
c001c7f9:	83 c4 10             	add    esp,0x10
c001c7fc:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001c803:	74 40                	je     c001c845 <IDE::open(int, int, void*)+0x37d>
c001c805:	83 ec 0c             	sub    esp,0xc
c001c808:	68 4b 2f 02 c0       	push   0xc0022f4b
c001c80d:	e8 47 29 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001c812:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c815:	6a 01                	push   0x1
c001c817:	68 4a c4 01 c0       	push   0xc001c44a
c001c81c:	6a 0e                	push   0xe
c001c81e:	53                   	push   ebx
c001c81f:	e8 9e 3c ff ff       	call   c00104c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c824:	83 c4 14             	add    esp,0x14
c001c827:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001c82d:	53                   	push   ebx
c001c82e:	6a 01                	push   0x1
c001c830:	68 66 c4 01 c0       	push   0xc001c466
c001c835:	6a 0f                	push   0xf
c001c837:	53                   	push   ebx
c001c838:	e8 85 3c ff ff       	call   c00104c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c83d:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001c843:	eb 4a                	jmp    c001c88f <IDE::open(int, int, void*)+0x3c7>
c001c845:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001c84f:	50                   	push   eax
c001c850:	6a 0f                	push   0xf
c001c852:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c858:	68 67 2f 02 c0       	push   0xc0022f67
c001c85d:	e8 f7 28 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001c862:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c865:	6a 00                	push   0x0
c001c867:	68 4a c4 01 c0       	push   0xc001c44a
c001c86c:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001c872:	53                   	push   ebx
c001c873:	e8 4a 3c ff ff       	call   c00104c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c878:	83 c4 14             	add    esp,0x14
c001c87b:	53                   	push   ebx
c001c87c:	6a 00                	push   0x0
c001c87e:	68 66 c4 01 c0       	push   0xc001c466
c001c883:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001c889:	53                   	push   ebx
c001c88a:	e8 33 3c ff ff       	call   c00104c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001c88f:	83 c4 20             	add    esp,0x20
c001c892:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c894:	83 ec 0c             	sub    esp,0xc
c001c897:	53                   	push   ebx
c001c898:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001c89b:	83 c4 0c             	add    esp,0xc
c001c89e:	6a 07                	push   0x7
c001c8a0:	6a 00                	push   0x0
c001c8a2:	53                   	push   ebx
c001c8a3:	e8 88 fa ff ff       	call   c001c330 <IDE::read(unsigned char, unsigned char)>
c001c8a8:	83 c4 0c             	add    esp,0xc
c001c8ab:	6a 07                	push   0x7
c001c8ad:	6a 01                	push   0x1
c001c8af:	53                   	push   ebx
c001c8b0:	e8 7b fa ff ff       	call   c001c330 <IDE::read(unsigned char, unsigned char)>
c001c8b5:	83 c4 0c             	add    esp,0xc
c001c8b8:	6a 01                	push   0x1
c001c8ba:	6a 00                	push   0x0
c001c8bc:	53                   	push   ebx
c001c8bd:	e8 c0 fb ff ff       	call   c001c482 <IDE::enableIRQs(unsigned char, bool)>
c001c8c2:	83 c4 0c             	add    esp,0xc
c001c8c5:	6a 01                	push   0x1
c001c8c7:	6a 01                	push   0x1
c001c8c9:	53                   	push   ebx
c001c8ca:	e8 b3 fb ff ff       	call   c001c482 <IDE::enableIRQs(unsigned char, bool)>
c001c8cf:	83 c4 2c             	add    esp,0x2c
c001c8d2:	31 c0                	xor    eax,eax
c001c8d4:	5b                   	pop    ebx
c001c8d5:	5e                   	pop    esi
c001c8d6:	5f                   	pop    edi
c001c8d7:	5d                   	pop    ebp
c001c8d8:	c3                   	ret    
c001c8d9:	90                   	nop

c001c8da <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001c8da:	55                   	push   ebp
c001c8db:	57                   	push   edi
c001c8dc:	56                   	push   esi
c001c8dd:	53                   	push   ebx
c001c8de:	83 ec 1c             	sub    esp,0x1c
c001c8e1:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c8e5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c8e9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c8ed:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001c8f1:	8d 50 f8             	lea    edx,[eax-0x8]
c001c8f4:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001c8f8:	80 fa 03             	cmp    dl,0x3
c001c8fb:	77 5d                	ja     c001c95a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001c8fd:	0f b6 db             	movzx  ebx,bl
c001c900:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001c904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c908:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001c90b:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001c90f:	83 ca 80             	or     edx,0xffffff80
c001c912:	0f b6 d2             	movzx  edx,dl
c001c915:	52                   	push   edx
c001c916:	6a 0c                	push   0xc
c001c918:	53                   	push   ebx
c001c919:	56                   	push   esi
c001c91a:	e8 51 f9 ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c91f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c923:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001c928:	0f b6 c0             	movzx  eax,al
c001c92b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c92f:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001c933:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c935:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c93a:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001c93e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c942:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c946:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c94e:	83 c4 2c             	add    esp,0x2c
c001c951:	5b                   	pop    ebx
c001c952:	5e                   	pop    esi
c001c953:	5f                   	pop    edi
c001c954:	5d                   	pop    ebp
c001c955:	e9 16 f9 ff ff       	jmp    c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c95a:	3c 07                	cmp    al,0x7
c001c95c:	77 10                	ja     c001c96e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001c95e:	0f b6 db             	movzx  ebx,bl
c001c961:	0f b6 d0             	movzx  edx,al
c001c964:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001c96c:	eb 2d                	jmp    c001c99b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c96e:	3c 0d                	cmp    al,0xd
c001c970:	77 13                	ja     c001c985 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001c972:	0f b6 db             	movzx  ebx,bl
c001c975:	0f b6 c0             	movzx  eax,al
c001c978:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001c97f:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001c983:	eb 16                	jmp    c001c99b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001c985:	3c 15                	cmp    al,0x15
c001c987:	77 14                	ja     c001c99d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001c989:	0f b6 db             	movzx  ebx,bl
c001c98c:	0f b6 c0             	movzx  eax,al
c001c98f:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001c997:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001c99b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001c99d:	83 c4 1c             	add    esp,0x1c
c001c9a0:	5b                   	pop    ebx
c001c9a1:	5e                   	pop    esi
c001c9a2:	5f                   	pop    edi
c001c9a3:	5d                   	pop    ebp
c001c9a4:	c3                   	ret    
c001c9a5:	90                   	nop

c001c9a6 <IDE::detect()>:
c001c9a6:	55                   	push   ebp
c001c9a7:	57                   	push   edi
c001c9a8:	56                   	push   esi
c001c9a9:	53                   	push   ebx
c001c9aa:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c9b0:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001c9b7:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001c9be:	0f 85 c0 02 00 00    	jne    c001cc84 <IDE::detect()+0x2de>
c001c9c4:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001c9cb:	31 f6                	xor    esi,esi
c001c9cd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001c9d5:	31 ed                	xor    ebp,ebp
c001c9d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c9db:	c1 e0 06             	shl    eax,0x6
c001c9de:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001c9e6:	89 e8                	mov    eax,ebp
c001c9e8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001c9ec:	c1 e0 04             	shl    eax,0x4
c001c9ef:	83 c8 a0             	or     eax,0xffffffa0
c001c9f2:	0f b6 c0             	movzx  eax,al
c001c9f5:	50                   	push   eax
c001c9f6:	6a 06                	push   0x6
c001c9f8:	56                   	push   esi
c001c9f9:	53                   	push   ebx
c001c9fa:	e8 71 f8 ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9ff:	83 c4 0c             	add    esp,0xc
c001ca02:	6a 0c                	push   0xc
c001ca04:	56                   	push   esi
c001ca05:	53                   	push   ebx
c001ca06:	e8 25 f9 ff ff       	call   c001c330 <IDE::read(unsigned char, unsigned char)>
c001ca0b:	83 c4 0c             	add    esp,0xc
c001ca0e:	6a 0c                	push   0xc
c001ca10:	56                   	push   esi
c001ca11:	53                   	push   ebx
c001ca12:	e8 19 f9 ff ff       	call   c001c330 <IDE::read(unsigned char, unsigned char)>
c001ca17:	83 c4 0c             	add    esp,0xc
c001ca1a:	6a 0c                	push   0xc
c001ca1c:	56                   	push   esi
c001ca1d:	53                   	push   ebx
c001ca1e:	e8 0d f9 ff ff       	call   c001c330 <IDE::read(unsigned char, unsigned char)>
c001ca23:	83 c4 0c             	add    esp,0xc
c001ca26:	6a 0c                	push   0xc
c001ca28:	56                   	push   esi
c001ca29:	53                   	push   ebx
c001ca2a:	e8 01 f9 ff ff       	call   c001c330 <IDE::read(unsigned char, unsigned char)>
c001ca2f:	68 ec 00 00 00       	push   0xec
c001ca34:	6a 07                	push   0x7
c001ca36:	56                   	push   esi
c001ca37:	53                   	push   ebx
c001ca38:	e8 33 f8 ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ca3d:	83 c4 1c             	add    esp,0x1c
c001ca40:	6a 0c                	push   0xc
c001ca42:	56                   	push   esi
c001ca43:	53                   	push   ebx
c001ca44:	e8 e7 f8 ff ff       	call   c001c330 <IDE::read(unsigned char, unsigned char)>
c001ca49:	83 c4 0c             	add    esp,0xc
c001ca4c:	6a 0c                	push   0xc
c001ca4e:	56                   	push   esi
c001ca4f:	53                   	push   ebx
c001ca50:	e8 db f8 ff ff       	call   c001c330 <IDE::read(unsigned char, unsigned char)>
c001ca55:	83 c4 0c             	add    esp,0xc
c001ca58:	6a 0c                	push   0xc
c001ca5a:	56                   	push   esi
c001ca5b:	53                   	push   ebx
c001ca5c:	e8 cf f8 ff ff       	call   c001c330 <IDE::read(unsigned char, unsigned char)>
c001ca61:	83 c4 0c             	add    esp,0xc
c001ca64:	6a 0c                	push   0xc
c001ca66:	56                   	push   esi
c001ca67:	53                   	push   ebx
c001ca68:	e8 c3 f8 ff ff       	call   c001c330 <IDE::read(unsigned char, unsigned char)>
c001ca6d:	83 c4 0c             	add    esp,0xc
c001ca70:	6a 0c                	push   0xc
c001ca72:	56                   	push   esi
c001ca73:	53                   	push   ebx
c001ca74:	e8 b7 f8 ff ff       	call   c001c330 <IDE::read(unsigned char, unsigned char)>
c001ca79:	83 c4 10             	add    esp,0x10
c001ca7c:	84 c0                	test   al,al
c001ca7e:	0f 84 8b 01 00 00    	je     c001cc0f <IDE::detect()+0x269>
c001ca84:	31 ff                	xor    edi,edi
c001ca86:	50                   	push   eax
c001ca87:	6a 0c                	push   0xc
c001ca89:	56                   	push   esi
c001ca8a:	53                   	push   ebx
c001ca8b:	e8 a0 f8 ff ff       	call   c001c330 <IDE::read(unsigned char, unsigned char)>
c001ca90:	83 c4 10             	add    esp,0x10
c001ca93:	a8 01                	test   al,0x1
c001ca95:	0f 85 8e 01 00 00    	jne    c001cc29 <IDE::detect()+0x283>
c001ca9b:	84 c0                	test   al,al
c001ca9d:	78 04                	js     c001caa3 <IDE::detect()+0xfd>
c001ca9f:	a8 08                	test   al,0x8
c001caa1:	75 27                	jne    c001caca <IDE::detect()+0x124>
c001caa3:	47                   	inc    edi
c001caa4:	81 ff 17 01 00 00    	cmp    edi,0x117
c001caaa:	7e da                	jle    c001ca86 <IDE::detect()+0xe0>
c001caac:	50                   	push   eax
c001caad:	50                   	push   eax
c001caae:	6a 00                	push   0x0
c001cab0:	68 40 4b 4c 00       	push   0x4c4b40
c001cab5:	e8 99 be ff ff       	call   c0018953 <nanoSleep(unsigned long long)>
c001caba:	83 c4 10             	add    esp,0x10
c001cabd:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001cac3:	75 c1                	jne    c001ca86 <IDE::detect()+0xe0>
c001cac5:	e9 5f 01 00 00       	jmp    c001cc29 <IDE::detect()+0x283>
c001caca:	31 c9                	xor    ecx,ecx
c001cacc:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001cad0:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001cad4:	83 ec 0c             	sub    esp,0xc
c001cad7:	68 80 00 00 00       	push   0x80
c001cadc:	57                   	push   edi
c001cadd:	6a 00                	push   0x0
c001cadf:	56                   	push   esi
c001cae0:	53                   	push   ebx
c001cae1:	e8 f4 fd ff ff       	call   c001c8da <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001cae6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001caea:	c1 e0 06             	shl    eax,0x6
c001caed:	01 d8                	add    eax,ebx
c001caef:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001caf4:	89 d1                	mov    ecx,edx
c001caf6:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001cafd:	89 f2                	mov    edx,esi
c001caff:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001cb06:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001cb0c:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001cb10:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001cb16:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001cb1a:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001cb21:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001cb29:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001cb30:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001cb38:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001cb3e:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001cb45:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001cb4b:	8d 54 24 58          	lea    edx,[esp+0x58]
c001cb4f:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001cb53:	83 c4 20             	add    esp,0x20
c001cb56:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001cb59:	83 c7 02             	add    edi,0x2
c001cb5c:	88 90 80 01 00 00    	mov    BYTE PTR [eax+0x180],dl
c001cb62:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001cb65:	88 90 81 01 00 00    	mov    BYTE PTR [eax+0x181],dl
c001cb6b:	83 c0 02             	add    eax,0x2
c001cb6e:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c001cb72:	75 e2                	jne    c001cb56 <IDE::detect()+0x1b0>
c001cb74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cb78:	c1 e0 06             	shl    eax,0x6
c001cb7b:	01 d8                	add    eax,ebx
c001cb7d:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001cb83:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001cb8a:	66 c1 ea 09          	shr    dx,0x9
c001cb8e:	83 e2 01             	and    edx,0x1
c001cb91:	84 c9                	test   cl,cl
c001cb93:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001cb99:	75 2f                	jne    c001cbca <IDE::detect()+0x224>
c001cb9b:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001cba1:	85 c0                	test   eax,eax
c001cba3:	74 66                	je     c001cc0b <IDE::detect()+0x265>
c001cba5:	50                   	push   eax
c001cba6:	55                   	push   ebp
c001cba7:	56                   	push   esi
c001cba8:	68 83 2f 02 c0       	push   0xc0022f83
c001cbad:	e8 a7 25 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001cbb2:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001cbb9:	e8 66 24 ff ff       	call   c000f024 <operator new(unsigned long)>
c001cbbe:	89 c7                	mov    edi,eax
c001cbc0:	89 04 24             	mov    DWORD PTR [esp],eax
c001cbc3:	e8 f4 02 00 00       	call   c001cebc <ATA::ATA()>
c001cbc8:	eb 28                	jmp    c001cbf2 <IDE::detect()+0x24c>
c001cbca:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001cbd0:	55                   	push   ebp
c001cbd1:	56                   	push   esi
c001cbd2:	68 b2 2f 02 c0       	push   0xc0022fb2
c001cbd7:	e8 7d 25 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001cbdc:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001cbe3:	e8 3c 24 ff ff       	call   c000f024 <operator new(unsigned long)>
c001cbe8:	89 c7                	mov    edi,eax
c001cbea:	89 04 24             	mov    DWORD PTR [esp],eax
c001cbed:	e8 1e 09 00 00       	call   c001d510 <ATAPI::ATAPI()>
c001cbf2:	5a                   	pop    edx
c001cbf3:	59                   	pop    ecx
c001cbf4:	57                   	push   edi
c001cbf5:	53                   	push   ebx
c001cbf6:	e8 73 39 ff ff       	call   c001056e <Device::addChild(Device*)>
c001cbfb:	8b 07                	mov    eax,DWORD PTR [edi]
c001cbfd:	53                   	push   ebx
c001cbfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc02:	6a 00                	push   0x0
c001cc04:	57                   	push   edi
c001cc05:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001cc08:	83 c4 20             	add    esp,0x20
c001cc0b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001cc0f:	4d                   	dec    ebp
c001cc10:	74 0a                	je     c001cc1c <IDE::detect()+0x276>
c001cc12:	bd 01 00 00 00       	mov    ebp,0x1
c001cc17:	e9 bb fd ff ff       	jmp    c001c9d7 <IDE::detect()+0x31>
c001cc1c:	4e                   	dec    esi
c001cc1d:	74 65                	je     c001cc84 <IDE::detect()+0x2de>
c001cc1f:	be 01 00 00 00       	mov    esi,0x1
c001cc24:	e9 ac fd ff ff       	jmp    c001c9d5 <IDE::detect()+0x2f>
c001cc29:	50                   	push   eax
c001cc2a:	6a 04                	push   0x4
c001cc2c:	56                   	push   esi
c001cc2d:	53                   	push   ebx
c001cc2e:	e8 fd f6 ff ff       	call   c001c330 <IDE::read(unsigned char, unsigned char)>
c001cc33:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001cc37:	83 c4 0c             	add    esp,0xc
c001cc3a:	6a 05                	push   0x5
c001cc3c:	56                   	push   esi
c001cc3d:	53                   	push   ebx
c001cc3e:	e8 ed f6 ff ff       	call   c001c330 <IDE::read(unsigned char, unsigned char)>
c001cc43:	83 c4 10             	add    esp,0x10
c001cc46:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001cc4a:	80 fa 14             	cmp    dl,0x14
c001cc4d:	74 2f                	je     c001cc7e <IDE::detect()+0x2d8>
c001cc4f:	80 fa 69             	cmp    dl,0x69
c001cc52:	75 bb                	jne    c001cc0f <IDE::detect()+0x269>
c001cc54:	3c 96                	cmp    al,0x96
c001cc56:	75 b7                	jne    c001cc0f <IDE::detect()+0x269>
c001cc58:	68 a1 00 00 00       	push   0xa1
c001cc5d:	6a 07                	push   0x7
c001cc5f:	56                   	push   esi
c001cc60:	53                   	push   ebx
c001cc61:	e8 0a f6 ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc66:	5f                   	pop    edi
c001cc67:	58                   	pop    eax
c001cc68:	6a 00                	push   0x0
c001cc6a:	68 40 42 0f 00       	push   0xf4240
c001cc6f:	e8 df bc ff ff       	call   c0018953 <nanoSleep(unsigned long long)>
c001cc74:	83 c4 10             	add    esp,0x10
c001cc77:	b1 01                	mov    cl,0x1
c001cc79:	e9 4e fe ff ff       	jmp    c001cacc <IDE::detect()+0x126>
c001cc7e:	3c eb                	cmp    al,0xeb
c001cc80:	75 cd                	jne    c001cc4f <IDE::detect()+0x2a9>
c001cc82:	eb d4                	jmp    c001cc58 <IDE::detect()+0x2b2>
c001cc84:	81 c4 1c 02 00 00    	add    esp,0x21c
c001cc8a:	5b                   	pop    ebx
c001cc8b:	5e                   	pop    esi
c001cc8c:	5f                   	pop    edi
c001cc8d:	5d                   	pop    ebp
c001cc8e:	c3                   	ret    
c001cc8f:	90                   	nop

c001cc90 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001cc90:	55                   	push   ebp
c001cc91:	57                   	push   edi
c001cc92:	56                   	push   esi
c001cc93:	53                   	push   ebx
c001cc94:	83 ec 1c             	sub    esp,0x1c
c001cc97:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001cc9b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001cc9f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001cca3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001cca7:	88 c3                	mov    bl,al
c001cca9:	84 c0                	test   al,al
c001ccab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ccaf:	0f 84 67 01 00 00    	je     c001ce1c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001ccb5:	83 ec 0c             	sub    esp,0xc
c001ccb8:	68 e3 2f 02 c0       	push   0xc0022fe3
c001ccbd:	e8 97 24 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001ccc2:	83 c4 10             	add    esp,0x10
c001ccc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ccc9:	3c 01                	cmp    al,0x1
c001cccb:	75 17                	jne    c001cce4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001cccd:	83 ec 0c             	sub    esp,0xc
c001ccd0:	b3 13                	mov    bl,0x13
c001ccd2:	68 ef 2f 02 c0       	push   0xc0022fef
c001ccd7:	e8 7d 24 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001ccdc:	83 c4 10             	add    esp,0x10
c001ccdf:	e9 25 01 00 00       	jmp    c001ce09 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001cce4:	3c 02                	cmp    al,0x2
c001cce6:	0f 85 ef 00 00 00    	jne    c001cddb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001ccec:	01 f6                	add    esi,esi
c001ccee:	52                   	push   edx
c001ccef:	09 ee                	or     esi,ebp
c001ccf1:	6a 01                	push   0x1
c001ccf3:	89 f0                	mov    eax,esi
c001ccf5:	0f b6 f0             	movzx  esi,al
c001ccf8:	c1 e6 06             	shl    esi,0x6
c001ccfb:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001cd03:	50                   	push   eax
c001cd04:	57                   	push   edi
c001cd05:	e8 26 f6 ff ff       	call   c001c330 <IDE::read(unsigned char, unsigned char)>
c001cd0a:	83 c4 10             	add    esp,0x10
c001cd0d:	89 c6                	mov    esi,eax
c001cd0f:	a8 01                	test   al,0x1
c001cd11:	74 12                	je     c001cd25 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001cd13:	83 ec 0c             	sub    esp,0xc
c001cd16:	b3 07                	mov    bl,0x7
c001cd18:	68 04 30 02 c0       	push   0xc0023004
c001cd1d:	e8 37 24 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001cd22:	83 c4 10             	add    esp,0x10
c001cd25:	f7 c6 02 00 00 00    	test   esi,0x2
c001cd2b:	74 12                	je     c001cd3f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001cd2d:	83 ec 0c             	sub    esp,0xc
c001cd30:	b3 03                	mov    bl,0x3
c001cd32:	68 22 30 02 c0       	push   0xc0023022
c001cd37:	e8 1d 24 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001cd3c:	83 c4 10             	add    esp,0x10
c001cd3f:	f7 c6 04 00 00 00    	test   esi,0x4
c001cd45:	74 12                	je     c001cd59 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001cd47:	83 ec 0c             	sub    esp,0xc
c001cd4a:	b3 14                	mov    bl,0x14
c001cd4c:	68 42 30 02 c0       	push   0xc0023042
c001cd51:	e8 03 24 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001cd56:	83 c4 10             	add    esp,0x10
c001cd59:	f7 c6 08 00 00 00    	test   esi,0x8
c001cd5f:	74 12                	je     c001cd73 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001cd61:	83 ec 0c             	sub    esp,0xc
c001cd64:	b3 03                	mov    bl,0x3
c001cd66:	68 22 30 02 c0       	push   0xc0023022
c001cd6b:	e8 e9 23 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001cd70:	83 c4 10             	add    esp,0x10
c001cd73:	f7 c6 10 00 00 00    	test   esi,0x10
c001cd79:	74 12                	je     c001cd8d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001cd7b:	83 ec 0c             	sub    esp,0xc
c001cd7e:	b3 15                	mov    bl,0x15
c001cd80:	68 5a 30 02 c0       	push   0xc002305a
c001cd85:	e8 cf 23 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001cd8a:	83 c4 10             	add    esp,0x10
c001cd8d:	f7 c6 20 00 00 00    	test   esi,0x20
c001cd93:	74 12                	je     c001cda7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001cd95:	83 ec 0c             	sub    esp,0xc
c001cd98:	b3 03                	mov    bl,0x3
c001cd9a:	68 22 30 02 c0       	push   0xc0023022
c001cd9f:	e8 b5 23 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001cda4:	83 c4 10             	add    esp,0x10
c001cda7:	f7 c6 40 00 00 00    	test   esi,0x40
c001cdad:	74 12                	je     c001cdc1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001cdaf:	83 ec 0c             	sub    esp,0xc
c001cdb2:	b3 16                	mov    bl,0x16
c001cdb4:	68 74 30 02 c0       	push   0xc0023074
c001cdb9:	e8 9b 23 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001cdbe:	83 c4 10             	add    esp,0x10
c001cdc1:	89 f0                	mov    eax,esi
c001cdc3:	84 c0                	test   al,al
c001cdc5:	79 42                	jns    c001ce09 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001cdc7:	83 ec 0c             	sub    esp,0xc
c001cdca:	b3 0d                	mov    bl,0xd
c001cdcc:	68 95 30 02 c0       	push   0xc0023095
c001cdd1:	e8 83 23 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001cdd6:	83 c4 10             	add    esp,0x10
c001cdd9:	eb 2e                	jmp    c001ce09 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001cddb:	3c 03                	cmp    al,0x3
c001cddd:	75 14                	jne    c001cdf3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001cddf:	83 ec 0c             	sub    esp,0xc
c001cde2:	b3 17                	mov    bl,0x17
c001cde4:	68 a9 30 02 c0       	push   0xc00230a9
c001cde9:	e8 6b 23 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001cdee:	83 c4 10             	add    esp,0x10
c001cdf1:	eb 16                	jmp    c001ce09 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001cdf3:	3c 04                	cmp    al,0x4
c001cdf5:	75 12                	jne    c001ce09 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001cdf7:	83 ec 0c             	sub    esp,0xc
c001cdfa:	b3 08                	mov    bl,0x8
c001cdfc:	68 bf 30 02 c0       	push   0xc00230bf
c001ce01:	e8 53 23 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001ce06:	83 c4 10             	add    esp,0x10
c001ce09:	50                   	push   eax
c001ce0a:	50                   	push   eax
c001ce0b:	0f b6 c3             	movzx  eax,bl
c001ce0e:	50                   	push   eax
c001ce0f:	68 d7 30 02 c0       	push   0xc00230d7
c001ce14:	e8 40 23 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001ce19:	83 c4 10             	add    esp,0x10
c001ce1c:	83 c4 1c             	add    esp,0x1c
c001ce1f:	88 d8                	mov    al,bl
c001ce21:	5b                   	pop    ebx
c001ce22:	5e                   	pop    esi
c001ce23:	5f                   	pop    edi
c001ce24:	5d                   	pop    ebp
c001ce25:	c3                   	ret    

c001ce26 <IDE::polling(unsigned char, unsigned int)>:
c001ce26:	55                   	push   ebp
c001ce27:	bd 04 00 00 00       	mov    ebp,0x4
c001ce2c:	57                   	push   edi
c001ce2d:	56                   	push   esi
c001ce2e:	53                   	push   ebx
c001ce2f:	83 ec 0c             	sub    esp,0xc
c001ce32:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ce36:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001ce3a:	52                   	push   edx
c001ce3b:	6a 0c                	push   0xc
c001ce3d:	0f b6 f3             	movzx  esi,bl
c001ce40:	56                   	push   esi
c001ce41:	57                   	push   edi
c001ce42:	e8 e9 f4 ff ff       	call   c001c330 <IDE::read(unsigned char, unsigned char)>
c001ce47:	83 c4 10             	add    esp,0x10
c001ce4a:	4d                   	dec    ebp
c001ce4b:	75 ed                	jne    c001ce3a <IDE::polling(unsigned char, unsigned int)+0x14>
c001ce4d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ce52:	50                   	push   eax
c001ce53:	6a 0c                	push   0xc
c001ce55:	56                   	push   esi
c001ce56:	57                   	push   edi
c001ce57:	e8 d4 f4 ff ff       	call   c001c330 <IDE::read(unsigned char, unsigned char)>
c001ce5c:	83 c4 10             	add    esp,0x10
c001ce5f:	a8 01                	test   al,0x1
c001ce61:	74 12                	je     c001ce75 <IDE::polling(unsigned char, unsigned int)+0x4f>
c001ce63:	83 ec 0c             	sub    esp,0xc
c001ce66:	68 f1 30 02 c0       	push   0xc00230f1
c001ce6b:	e8 e9 22 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001ce70:	83 c4 10             	add    esp,0x10
c001ce73:	eb 17                	jmp    c001ce8c <IDE::polling(unsigned char, unsigned int)+0x66>
c001ce75:	a8 20                	test   al,0x20
c001ce77:	75 0f                	jne    c001ce88 <IDE::polling(unsigned char, unsigned int)+0x62>
c001ce79:	4b                   	dec    ebx
c001ce7a:	74 10                	je     c001ce8c <IDE::polling(unsigned char, unsigned int)+0x66>
c001ce7c:	84 c0                	test   al,al
c001ce7e:	78 d2                	js     c001ce52 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001ce80:	a8 08                	test   al,0x8
c001ce82:	74 ce                	je     c001ce52 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001ce84:	31 c0                	xor    eax,eax
c001ce86:	eb 06                	jmp    c001ce8e <IDE::polling(unsigned char, unsigned int)+0x68>
c001ce88:	b0 01                	mov    al,0x1
c001ce8a:	eb 02                	jmp    c001ce8e <IDE::polling(unsigned char, unsigned int)+0x68>
c001ce8c:	b0 02                	mov    al,0x2
c001ce8e:	83 c4 0c             	add    esp,0xc
c001ce91:	5b                   	pop    ebx
c001ce92:	5e                   	pop    esi
c001ce93:	5f                   	pop    edi
c001ce94:	5d                   	pop    ebp
c001ce95:	c3                   	ret    

c001ce96 <ATA::close(int, int, void*)>:
c001ce96:	83 ec 0c             	sub    esp,0xc
c001ce99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce9d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cea3:	85 c0                	test   eax,eax
c001cea5:	74 0c                	je     c001ceb3 <ATA::close(int, int, void*)+0x1d>
c001cea7:	83 ec 0c             	sub    esp,0xc
c001ceaa:	8b 10                	mov    edx,DWORD PTR [eax]
c001ceac:	50                   	push   eax
c001cead:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ceb0:	83 c4 10             	add    esp,0x10
c001ceb3:	31 c0                	xor    eax,eax
c001ceb5:	83 c4 0c             	add    esp,0xc
c001ceb8:	c3                   	ret    
c001ceb9:	90                   	nop

c001ceba <ATA::powerSaving(PowerSavingLevel)>:
c001ceba:	c3                   	ret    
c001cebb:	90                   	nop

c001cebc <ATA::ATA()>:
c001cebc:	83 ec 0c             	sub    esp,0xc
c001cebf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cec3:	83 ec 04             	sub    esp,0x4
c001cec6:	68 00 02 00 00       	push   0x200
c001cecb:	68 34 31 02 c0       	push   0xc0023134
c001ced0:	50                   	push   eax
c001ced1:	e8 9e 3a ff ff       	call   c0010974 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ced6:	83 c4 10             	add    esp,0x10
c001ced9:	ba 60 31 02 c0       	mov    edx,0xc0023160
c001cede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cee2:	89 10                	mov    DWORD PTR [eax],edx
c001cee4:	90                   	nop
c001cee5:	83 c4 0c             	add    esp,0xc
c001cee8:	c3                   	ret    
c001cee9:	90                   	nop

c001ceea <ATA::flush(bool)>:
c001ceea:	53                   	push   ebx
c001ceeb:	83 ec 08             	sub    esp,0x8
c001ceee:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001cef3:	19 c0                	sbb    eax,eax
c001cef5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cef9:	83 e0 fd             	and    eax,0xfffffffd
c001cefc:	05 ea 00 00 00       	add    eax,0xea
c001cf01:	50                   	push   eax
c001cf02:	6a 07                	push   0x7
c001cf04:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf0b:	50                   	push   eax
c001cf0c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf12:	e8 59 f3 ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf17:	83 c4 0c             	add    esp,0xc
c001cf1a:	6a 00                	push   0x0
c001cf1c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cf23:	50                   	push   eax
c001cf24:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cf2a:	e8 f7 fe ff ff       	call   c001ce26 <IDE::polling(unsigned char, unsigned int)>
c001cf2f:	83 c4 18             	add    esp,0x18
c001cf32:	5b                   	pop    ebx
c001cf33:	c3                   	ret    

c001cf34 <ATA::readyForCommand()>:
c001cf34:	56                   	push   esi
c001cf35:	53                   	push   ebx
c001cf36:	31 db                	xor    ebx,ebx
c001cf38:	50                   	push   eax
c001cf39:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001cf3d:	50                   	push   eax
c001cf3e:	6a 0c                	push   0xc
c001cf40:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001cf47:	50                   	push   eax
c001cf48:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001cf4e:	e8 dd f3 ff ff       	call   c001c330 <IDE::read(unsigned char, unsigned char)>
c001cf53:	83 c4 10             	add    esp,0x10
c001cf56:	a8 88                	test   al,0x88
c001cf58:	74 23                	je     c001cf7d <ATA::readyForCommand()+0x49>
c001cf5a:	43                   	inc    ebx
c001cf5b:	83 fb 63             	cmp    ebx,0x63
c001cf5e:	7e dd                	jle    c001cf3d <ATA::readyForCommand()+0x9>
c001cf60:	51                   	push   ecx
c001cf61:	51                   	push   ecx
c001cf62:	6a 00                	push   0x0
c001cf64:	68 40 42 0f 00       	push   0xf4240
c001cf69:	e8 e5 b9 ff ff       	call   c0018953 <nanoSleep(unsigned long long)>
c001cf6e:	83 c4 10             	add    esp,0x10
c001cf71:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001cf77:	75 c4                	jne    c001cf3d <ATA::readyForCommand()+0x9>
c001cf79:	31 c0                	xor    eax,eax
c001cf7b:	eb 02                	jmp    c001cf7f <ATA::readyForCommand()+0x4b>
c001cf7d:	b0 01                	mov    al,0x1
c001cf7f:	5a                   	pop    edx
c001cf80:	5b                   	pop    ebx
c001cf81:	5e                   	pop    esi
c001cf82:	c3                   	ret    
c001cf83:	90                   	nop

c001cf84 <ATA::access(unsigned long long, int, void*, bool)>:
c001cf84:	55                   	push   ebp
c001cf85:	57                   	push   edi
c001cf86:	56                   	push   esi
c001cf87:	53                   	push   ebx
c001cf88:	83 ec 2c             	sub    esp,0x2c
c001cf8b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001cf8f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001cf93:	89 04 24             	mov    DWORD PTR [esp],eax
c001cf96:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001cf9a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001cf9d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001cfa1:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001cfa5:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001cfab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cfaf:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cfb5:	c1 e0 06             	shl    eax,0x6
c001cfb8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001cfbc:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001cfc4:	74 5d                	je     c001d023 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001cfc6:	89 fa                	mov    edx,edi
c001cfc8:	89 f0                	mov    eax,esi
c001cfca:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001cfce:	c1 ea 1c             	shr    edx,0x1c
c001cfd1:	89 d1                	mov    ecx,edx
c001cfd3:	09 c1                	or     ecx,eax
c001cfd5:	74 25                	je     c001cffc <ATA::access(unsigned long long, int, void*, bool)+0x78>
c001cfd7:	31 ed                	xor    ebp,ebp
c001cfd9:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001cfe0:	89 fa                	mov    edx,edi
c001cfe2:	89 f0                	mov    eax,esi
c001cfe4:	0f ad d0             	shrd   eax,edx,cl
c001cfe7:	d3 ea                	shr    edx,cl
c001cfe9:	f6 c1 20             	test   cl,0x20
c001cfec:	74 02                	je     c001cff0 <ATA::access(unsigned long long, int, void*, bool)+0x6c>
c001cfee:	89 d0                	mov    eax,edx
c001cff0:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001cff4:	45                   	inc    ebp
c001cff5:	83 fd 06             	cmp    ebp,0x6
c001cff8:	75 df                	jne    c001cfd9 <ATA::access(unsigned long long, int, void*, bool)+0x55>
c001cffa:	eb 73                	jmp    c001d06f <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001cffc:	89 f0                	mov    eax,esi
c001cffe:	89 fa                	mov    edx,edi
c001d000:	0f ac d0 10          	shrd   eax,edx,0x10
c001d004:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d009:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d00d:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d014:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d019:	c1 ee 18             	shr    esi,0x18
c001d01c:	bf 01 00 00 00       	mov    edi,0x1
c001d021:	eb 53                	jmp    c001d076 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d023:	6a 00                	push   0x0
c001d025:	6a 3f                	push   0x3f
c001d027:	57                   	push   edi
c001d028:	56                   	push   esi
c001d029:	e8 7e 1f 00 00       	call   c001efac <__umoddi3>
c001d02e:	83 c4 10             	add    esp,0x10
c001d031:	40                   	inc    eax
c001d032:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d036:	6a 00                	push   0x0
c001d038:	68 f0 03 00 00       	push   0x3f0
c001d03d:	57                   	push   edi
c001d03e:	56                   	push   esi
c001d03f:	e8 68 1e 00 00       	call   c001eeac <__udivdi3>
c001d044:	83 c4 10             	add    esp,0x10
c001d047:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d04c:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d053:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d058:	6a 00                	push   0x0
c001d05a:	6a 3f                	push   0x3f
c001d05c:	57                   	push   edi
c001d05d:	31 ff                	xor    edi,edi
c001d05f:	56                   	push   esi
c001d060:	e8 47 1e 00 00       	call   c001eeac <__udivdi3>
c001d065:	89 c6                	mov    esi,eax
c001d067:	83 c4 10             	add    esp,0x10
c001d06a:	83 e6 0f             	and    esi,0xf
c001d06d:	eb 07                	jmp    c001d076 <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d06f:	31 f6                	xor    esi,esi
c001d071:	bf 02 00 00 00       	mov    edi,0x2
c001d076:	50                   	push   eax
c001d077:	6a 00                	push   0x0
c001d079:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d080:	50                   	push   eax
c001d081:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d085:	e8 f8 f3 ff ff       	call   c001c482 <IDE::enableIRQs(unsigned char, bool)>
c001d08a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d08d:	e8 a2 fe ff ff       	call   c001cf34 <ATA::readyForCommand()>
c001d092:	83 c4 10             	add    esp,0x10
c001d095:	84 c0                	test   al,al
c001d097:	75 0a                	jne    c001d0a3 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001d099:	be 01 00 00 00       	mov    esi,0x1
c001d09e:	e9 79 02 00 00       	jmp    c001d31c <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d0a3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d0a9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d0af:	c1 e0 04             	shl    eax,0x4
c001d0b2:	09 c6                	or     esi,eax
c001d0b4:	89 f8                	mov    eax,edi
c001d0b6:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001d0bd:	84 c0                	test   al,al
c001d0bf:	75 05                	jne    c001d0c6 <ATA::access(unsigned long long, int, void*, bool)+0x142>
c001d0c1:	83 ce a0             	or     esi,0xffffffa0
c001d0c4:	eb 03                	jmp    c001d0c9 <ATA::access(unsigned long long, int, void*, bool)+0x145>
c001d0c6:	83 ce e0             	or     esi,0xffffffe0
c001d0c9:	89 f0                	mov    eax,esi
c001d0cb:	0f b6 f0             	movzx  esi,al
c001d0ce:	56                   	push   esi
c001d0cf:	6a 06                	push   0x6
c001d0d1:	51                   	push   ecx
c001d0d2:	52                   	push   edx
c001d0d3:	e8 98 f1 ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0d8:	83 c4 10             	add    esp,0x10
c001d0db:	6a 00                	push   0x0
c001d0dd:	6a 01                	push   0x1
c001d0df:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d0e6:	50                   	push   eax
c001d0e7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d0ed:	e8 7e f1 ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0f2:	89 f8                	mov    eax,edi
c001d0f4:	83 c4 10             	add    esp,0x10
c001d0f7:	3c 02                	cmp    al,0x2
c001d0f9:	75 6e                	jne    c001d169 <ATA::access(unsigned long long, int, void*, bool)+0x1e5>
c001d0fb:	6a 00                	push   0x0
c001d0fd:	6a 08                	push   0x8
c001d0ff:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d106:	50                   	push   eax
c001d107:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d10d:	e8 5e f1 ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d112:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d117:	50                   	push   eax
c001d118:	6a 09                	push   0x9
c001d11a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d121:	50                   	push   eax
c001d122:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d128:	e8 43 f1 ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d12d:	83 c4 20             	add    esp,0x20
c001d130:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d135:	50                   	push   eax
c001d136:	6a 0a                	push   0xa
c001d138:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d13f:	50                   	push   eax
c001d140:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d146:	e8 25 f1 ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d14b:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d150:	50                   	push   eax
c001d151:	6a 0b                	push   0xb
c001d153:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d15a:	50                   	push   eax
c001d15b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d161:	e8 0a f1 ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d166:	83 c4 20             	add    esp,0x20
c001d169:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d16e:	50                   	push   eax
c001d16f:	6a 02                	push   0x2
c001d171:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d178:	50                   	push   eax
c001d179:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d17f:	e8 ec f0 ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d184:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d189:	50                   	push   eax
c001d18a:	6a 03                	push   0x3
c001d18c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d193:	50                   	push   eax
c001d194:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d19a:	e8 d1 f0 ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d19f:	83 c4 20             	add    esp,0x20
c001d1a2:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d1a7:	50                   	push   eax
c001d1a8:	6a 04                	push   0x4
c001d1aa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d1b1:	50                   	push   eax
c001d1b2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d1b8:	e8 b3 f0 ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1bd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d1c2:	50                   	push   eax
c001d1c3:	6a 05                	push   0x5
c001d1c5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d1cc:	50                   	push   eax
c001d1cd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d1d3:	e8 98 f0 ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d1d8:	83 c4 20             	add    esp,0x20
c001d1db:	89 f8                	mov    eax,edi
c001d1dd:	3c 02                	cmp    al,0x2
c001d1df:	0f 94 44 24 04       	sete   BYTE PTR [esp+0x4]
c001d1e4:	75 06                	jne    c001d1ec <ATA::access(unsigned long long, int, void*, bool)+0x268>
c001d1e6:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d1ea:	75 40                	jne    c001d22c <ATA::access(unsigned long long, int, void*, bool)+0x2a8>
c001d1ec:	89 f8                	mov    eax,edi
c001d1ee:	3c 02                	cmp    al,0x2
c001d1f0:	0f 95 c1             	setne  cl
c001d1f3:	74 0b                	je     c001d200 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001d1f5:	b8 30 00 00 00       	mov    eax,0x30
c001d1fa:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d1fe:	75 31                	jne    c001d231 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d200:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001d203:	83 f2 01             	xor    edx,0x1
c001d206:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d20b:	74 09                	je     c001d216 <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001d20d:	b8 24 00 00 00       	mov    eax,0x24
c001d212:	84 d2                	test   dl,dl
c001d214:	75 1b                	jne    c001d231 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d216:	84 c9                	test   cl,cl
c001d218:	0f 84 7b fe ff ff    	je     c001d099 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d21e:	b8 20 00 00 00       	mov    eax,0x20
c001d223:	84 d2                	test   dl,dl
c001d225:	75 0a                	jne    c001d231 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d227:	e9 6d fe ff ff       	jmp    c001d099 <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d22c:	b8 34 00 00 00       	mov    eax,0x34
c001d231:	50                   	push   eax
c001d232:	6a 07                	push   0x7
c001d234:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d23b:	50                   	push   eax
c001d23c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d242:	e8 29 f0 ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d247:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d24b:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d24f:	83 c4 10             	add    esp,0x10
c001d252:	85 f6                	test   esi,esi
c001d254:	0f 84 a9 00 00 00    	je     c001d303 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001d25a:	50                   	push   eax
c001d25b:	6a 01                	push   0x1
c001d25d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d264:	50                   	push   eax
c001d265:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d26b:	e8 b6 fb ff ff       	call   c001ce26 <IDE::polling(unsigned char, unsigned int)>
c001d270:	83 c4 10             	add    esp,0x10
c001d273:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d279:	84 c0                	test   al,al
c001d27b:	74 1d                	je     c001d29a <ATA::access(unsigned long long, int, void*, bool)+0x316>
c001d27d:	0f b6 f0             	movzx  esi,al
c001d280:	56                   	push   esi
c001d281:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d288:	0f b6 d2             	movzx  edx,dl
c001d28b:	50                   	push   eax
c001d28c:	52                   	push   edx
c001d28d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d293:	e8 f8 f9 ff ff       	call   c001cc90 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d298:	eb 7f                	jmp    c001d319 <ATA::access(unsigned long long, int, void*, bool)+0x395>
c001d29a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d29f:	74 41                	je     c001d2e2 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c001d2a1:	31 c9                	xor    ecx,ecx
c001d2a3:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001d2a7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d2ab:	50                   	push   eax
c001d2ac:	50                   	push   eax
c001d2ad:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d2b4:	50                   	push   eax
c001d2b5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d2bb:	e8 9e ef ff ff       	call   c001c25e <IDE::getBase(unsigned char)>
c001d2c0:	89 c2                	mov    edx,eax
c001d2c2:	89 e8                	mov    eax,ebp
c001d2c4:	66 ef                	out    dx,ax
c001d2c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d2ca:	83 c4 10             	add    esp,0x10
c001d2cd:	41                   	inc    ecx
c001d2ce:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d2d4:	75 cd                	jne    c001d2a3 <ATA::access(unsigned long long, int, void*, bool)+0x31f>
c001d2d6:	4e                   	dec    esi
c001d2d7:	81 c7 00 02 00 00    	add    edi,0x200
c001d2dd:	e9 70 ff ff ff       	jmp    c001d252 <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001d2e2:	51                   	push   ecx
c001d2e3:	51                   	push   ecx
c001d2e4:	0f b6 d2             	movzx  edx,dl
c001d2e7:	52                   	push   edx
c001d2e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d2ee:	e8 6b ef ff ff       	call   c001c25e <IDE::getBase(unsigned char)>
c001d2f3:	b9 00 01 00 00       	mov    ecx,0x100
c001d2f8:	89 c2                	mov    edx,eax
c001d2fa:	fc                   	cld    
c001d2fb:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d2fe:	83 c4 10             	add    esp,0x10
c001d301:	eb d3                	jmp    c001d2d6 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001d303:	31 f6                	xor    esi,esi
c001d305:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d309:	74 11                	je     c001d31c <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d30b:	50                   	push   eax
c001d30c:	50                   	push   eax
c001d30d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d312:	50                   	push   eax
c001d313:	53                   	push   ebx
c001d314:	e8 d1 fb ff ff       	call   c001ceea <ATA::flush(bool)>
c001d319:	83 c4 10             	add    esp,0x10
c001d31c:	83 c4 2c             	add    esp,0x2c
c001d31f:	89 f0                	mov    eax,esi
c001d321:	5b                   	pop    ebx
c001d322:	5e                   	pop    esi
c001d323:	5f                   	pop    edi
c001d324:	5d                   	pop    ebp
c001d325:	c3                   	ret    

c001d326 <ATA::read(unsigned long long, int, void*)>:
c001d326:	57                   	push   edi
c001d327:	b8 04 00 00 00       	mov    eax,0x4
c001d32c:	56                   	push   esi
c001d32d:	53                   	push   ebx
c001d32e:	83 ec 10             	sub    esp,0x10
c001d331:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d335:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d339:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d33d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d341:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d344:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d34a:	77 3b                	ja     c001d387 <ATA::read(unsigned long long, int, void*)+0x61>
c001d34c:	b8 06 00 00 00       	mov    eax,0x6
c001d351:	85 d2                	test   edx,edx
c001d353:	74 32                	je     c001d387 <ATA::read(unsigned long long, int, void*)+0x61>
c001d355:	50                   	push   eax
c001d356:	50                   	push   eax
c001d357:	6a 00                	push   0x0
c001d359:	52                   	push   edx
c001d35a:	53                   	push   ebx
c001d35b:	57                   	push   edi
c001d35c:	56                   	push   esi
c001d35d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d361:	e8 1e fc ff ff       	call   c001cf84 <ATA::access(unsigned long long, int, void*, bool)>
c001d366:	83 c4 20             	add    esp,0x20
c001d369:	85 c0                	test   eax,eax
c001d36b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d36f:	75 11                	jne    c001d382 <ATA::read(unsigned long long, int, void*)+0x5c>
c001d371:	01 1d c4 5e 02 c0    	add    DWORD PTR ds:0xc0025ec4,ebx
c001d377:	e8 b4 fb fe ff       	call   c000cf30 <VgaText::updateDiskUsage()>
c001d37c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d380:	eb 05                	jmp    c001d387 <ATA::read(unsigned long long, int, void*)+0x61>
c001d382:	b8 01 00 00 00       	mov    eax,0x1
c001d387:	83 c4 10             	add    esp,0x10
c001d38a:	5b                   	pop    ebx
c001d38b:	5e                   	pop    esi
c001d38c:	5f                   	pop    edi
c001d38d:	c3                   	ret    

c001d38e <ATA::write(unsigned long long, int, void*)>:
c001d38e:	57                   	push   edi
c001d38f:	b8 04 00 00 00       	mov    eax,0x4
c001d394:	56                   	push   esi
c001d395:	53                   	push   ebx
c001d396:	83 ec 10             	sub    esp,0x10
c001d399:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d39d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d3a1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d3a5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d3a9:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d3ac:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d3b2:	77 3b                	ja     c001d3ef <ATA::write(unsigned long long, int, void*)+0x61>
c001d3b4:	b8 06 00 00 00       	mov    eax,0x6
c001d3b9:	85 d2                	test   edx,edx
c001d3bb:	74 32                	je     c001d3ef <ATA::write(unsigned long long, int, void*)+0x61>
c001d3bd:	50                   	push   eax
c001d3be:	50                   	push   eax
c001d3bf:	6a 01                	push   0x1
c001d3c1:	52                   	push   edx
c001d3c2:	53                   	push   ebx
c001d3c3:	57                   	push   edi
c001d3c4:	56                   	push   esi
c001d3c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d3c9:	e8 b6 fb ff ff       	call   c001cf84 <ATA::access(unsigned long long, int, void*, bool)>
c001d3ce:	83 c4 20             	add    esp,0x20
c001d3d1:	85 c0                	test   eax,eax
c001d3d3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d3d7:	75 11                	jne    c001d3ea <ATA::write(unsigned long long, int, void*)+0x5c>
c001d3d9:	01 1d c0 5e 02 c0    	add    DWORD PTR ds:0xc0025ec0,ebx
c001d3df:	e8 4c fb fe ff       	call   c000cf30 <VgaText::updateDiskUsage()>
c001d3e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d3e8:	eb 05                	jmp    c001d3ef <ATA::write(unsigned long long, int, void*)+0x61>
c001d3ea:	b8 01 00 00 00       	mov    eax,0x1
c001d3ef:	83 c4 10             	add    esp,0x10
c001d3f2:	5b                   	pop    ebx
c001d3f3:	5e                   	pop    esi
c001d3f4:	5f                   	pop    edi
c001d3f5:	c3                   	ret    

c001d3f6 <ATA::detectCHS()>:
c001d3f6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d3fa:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001d400:	c1 e0 06             	shl    eax,0x6
c001d403:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001d409:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001d413:	c7 44 24 04 43 31 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023143
c001d41b:	e9 cc 7f ff ff       	jmp    c00153ec <Krnl::panic(char const*)>

c001d420 <ATA::open(int, int, void*)>:
c001d420:	53                   	push   ebx
c001d421:	83 ec 08             	sub    esp,0x8
c001d424:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d428:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d42c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d430:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d436:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d43c:	c1 e0 06             	shl    eax,0x6
c001d43f:	01 d0                	add    eax,edx
c001d441:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001d448:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001d44e:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001d455:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d45f:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001d465:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001d46c:	75 0c                	jne    c001d47a <ATA::open(int, int, void*)+0x5a>
c001d46e:	83 ec 0c             	sub    esp,0xc
c001d471:	53                   	push   ebx
c001d472:	e8 7f ff ff ff       	call   c001d3f6 <ATA::detectCHS()>
c001d477:	83 c4 10             	add    esp,0x10
c001d47a:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d480:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d486:	c1 e0 06             	shl    eax,0x6
c001d489:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001d490:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d49a:	d1 e8                	shr    eax,1
c001d49c:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d4a2:	6a 04                	push   0x4
c001d4a4:	6a 0c                	push   0xc
c001d4a6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d4ad:	50                   	push   eax
c001d4ae:	52                   	push   edx
c001d4af:	e8 bc ed ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4b4:	90                   	nop
c001d4b5:	90                   	nop
c001d4b6:	6a 00                	push   0x0
c001d4b8:	6a 0c                	push   0xc
c001d4ba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d4c1:	50                   	push   eax
c001d4c2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d4c8:	e8 a3 ed ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4cd:	83 c4 14             	add    esp,0x14
c001d4d0:	53                   	push   ebx
c001d4d1:	e8 06 35 ff ff       	call   c00109dc <PhysicalDisk::startCache()>
c001d4d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d4d9:	e8 3e 4f ff ff       	call   c001241c <createPartitionsForDisk(PhysicalDisk*)>
c001d4de:	83 c4 18             	add    esp,0x18
c001d4e1:	31 c0                	xor    eax,eax
c001d4e3:	5b                   	pop    ebx
c001d4e4:	c3                   	ret    
c001d4e5:	90                   	nop

c001d4e6 <ATAPI::write(unsigned long long, int, void*)>:
c001d4e6:	b8 03 00 00 00       	mov    eax,0x3
c001d4eb:	c3                   	ret    

c001d4ec <ATAPI::close(int, int, void*)>:
c001d4ec:	83 ec 0c             	sub    esp,0xc
c001d4ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4f3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d4f9:	85 c0                	test   eax,eax
c001d4fb:	74 0c                	je     c001d509 <ATAPI::close(int, int, void*)+0x1d>
c001d4fd:	83 ec 0c             	sub    esp,0xc
c001d500:	8b 10                	mov    edx,DWORD PTR [eax]
c001d502:	50                   	push   eax
c001d503:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d506:	83 c4 10             	add    esp,0x10
c001d509:	31 c0                	xor    eax,eax
c001d50b:	83 c4 0c             	add    esp,0xc
c001d50e:	c3                   	ret    
c001d50f:	90                   	nop

c001d510 <ATAPI::ATAPI()>:
c001d510:	83 ec 0c             	sub    esp,0xc
c001d513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d517:	83 ec 04             	sub    esp,0x4
c001d51a:	68 00 08 00 00       	push   0x800
c001d51f:	68 8c 31 02 c0       	push   0xc002318c
c001d524:	50                   	push   eax
c001d525:	e8 4a 34 ff ff       	call   c0010974 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d52a:	83 c4 10             	add    esp,0x10
c001d52d:	ba cc 31 02 c0       	mov    edx,0xc00231cc
c001d532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d536:	89 10                	mov    DWORD PTR [eax],edx
c001d538:	90                   	nop
c001d539:	83 c4 0c             	add    esp,0xc
c001d53c:	c3                   	ret    
c001d53d:	90                   	nop

c001d53e <ATAPI::readyForCommand()>:
c001d53e:	56                   	push   esi
c001d53f:	53                   	push   ebx
c001d540:	31 db                	xor    ebx,ebx
c001d542:	50                   	push   eax
c001d543:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d547:	50                   	push   eax
c001d548:	6a 0c                	push   0xc
c001d54a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d551:	50                   	push   eax
c001d552:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d558:	e8 d3 ed ff ff       	call   c001c330 <IDE::read(unsigned char, unsigned char)>
c001d55d:	83 c4 10             	add    esp,0x10
c001d560:	a8 88                	test   al,0x88
c001d562:	74 23                	je     c001d587 <ATAPI::readyForCommand()+0x49>
c001d564:	43                   	inc    ebx
c001d565:	83 fb 63             	cmp    ebx,0x63
c001d568:	7e dd                	jle    c001d547 <ATAPI::readyForCommand()+0x9>
c001d56a:	51                   	push   ecx
c001d56b:	51                   	push   ecx
c001d56c:	6a 00                	push   0x0
c001d56e:	68 40 42 0f 00       	push   0xf4240
c001d573:	e8 db b3 ff ff       	call   c0018953 <nanoSleep(unsigned long long)>
c001d578:	83 c4 10             	add    esp,0x10
c001d57b:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d581:	75 c4                	jne    c001d547 <ATAPI::readyForCommand()+0x9>
c001d583:	31 c0                	xor    eax,eax
c001d585:	eb 02                	jmp    c001d589 <ATAPI::readyForCommand()+0x4b>
c001d587:	b0 01                	mov    al,0x1
c001d589:	5a                   	pop    edx
c001d58a:	5b                   	pop    ebx
c001d58b:	5e                   	pop    esi
c001d58c:	c3                   	ret    
c001d58d:	90                   	nop

c001d58e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d58e:	55                   	push   ebp
c001d58f:	57                   	push   edi
c001d590:	56                   	push   esi
c001d591:	53                   	push   ebx
c001d592:	83 ec 20             	sub    esp,0x20
c001d595:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d599:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d59d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d5a1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d5a5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d5a9:	6a 01                	push   0x1
c001d5ab:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d5b2:	50                   	push   eax
c001d5b3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d5b9:	e8 c4 ee ff ff       	call   c001c482 <IDE::enableIRQs(unsigned char, bool)>
c001d5be:	5e                   	pop    esi
c001d5bf:	58                   	pop    eax
c001d5c0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d5c7:	50                   	push   eax
c001d5c8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d5ce:	e8 77 ec ff ff       	call   c001c24a <IDE::prepareInterrupt(unsigned char)>
c001d5d3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d5d6:	e8 63 ff ff ff       	call   c001d53e <ATAPI::readyForCommand()>
c001d5db:	83 c4 10             	add    esp,0x10
c001d5de:	84 c0                	test   al,al
c001d5e0:	75 0a                	jne    c001d5ec <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d5e2:	bb 01 00 00 00       	mov    ebx,0x1
c001d5e7:	e9 57 02 00 00       	jmp    c001d843 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d5ec:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001d5f2:	c1 e0 04             	shl    eax,0x4
c001d5f5:	0f b6 c0             	movzx  eax,al
c001d5f8:	50                   	push   eax
c001d5f9:	6a 06                	push   0x6
c001d5fb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d602:	50                   	push   eax
c001d603:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d609:	e8 62 ec ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d60e:	6a 00                	push   0x0
c001d610:	6a 01                	push   0x1
c001d612:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d619:	50                   	push   eax
c001d61a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d620:	e8 4b ec ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d625:	83 c4 20             	add    esp,0x20
c001d628:	0f b6 c3             	movzx  eax,bl
c001d62b:	50                   	push   eax
c001d62c:	6a 04                	push   0x4
c001d62e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d635:	50                   	push   eax
c001d636:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d63c:	0f b6 df             	movzx  ebx,bh
c001d63f:	e8 2c ec ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d644:	53                   	push   ebx
c001d645:	6a 05                	push   0x5
c001d647:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d64e:	50                   	push   eax
c001d64f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d655:	e8 16 ec ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d65a:	83 c4 20             	add    esp,0x20
c001d65d:	68 a0 00 00 00       	push   0xa0
c001d662:	6a 07                	push   0x7
c001d664:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d66b:	50                   	push   eax
c001d66c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d672:	e8 f9 eb ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d677:	83 c4 0c             	add    esp,0xc
c001d67a:	6a 01                	push   0x1
c001d67c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d683:	50                   	push   eax
c001d684:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d68a:	e8 97 f7 ff ff       	call   c001ce26 <IDE::polling(unsigned char, unsigned int)>
c001d68f:	83 c4 10             	add    esp,0x10
c001d692:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001d698:	84 c0                	test   al,al
c001d69a:	74 23                	je     c001d6bf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d69c:	0f b6 d8             	movzx  ebx,al
c001d69f:	53                   	push   ebx
c001d6a0:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001d6a7:	0f b6 d2             	movzx  edx,dl
c001d6aa:	50                   	push   eax
c001d6ab:	52                   	push   edx
c001d6ac:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6b2:	e8 d9 f5 ff ff       	call   c001cc90 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d6b7:	83 c4 10             	add    esp,0x10
c001d6ba:	e9 84 01 00 00       	jmp    c001d843 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d6bf:	53                   	push   ebx
c001d6c0:	53                   	push   ebx
c001d6c1:	0f b6 d2             	movzx  edx,dl
c001d6c4:	52                   	push   edx
c001d6c5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d6cb:	e8 8e eb ff ff       	call   c001c25e <IDE::getBase(unsigned char)>
c001d6d0:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d6d4:	b9 06 00 00 00       	mov    ecx,0x6
c001d6d9:	89 c2                	mov    edx,eax
c001d6db:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d6de:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d6e2:	83 c4 10             	add    esp,0x10
c001d6e5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d6eb:	85 db                	test   ebx,ebx
c001d6ed:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d6f4:	0f 84 ec 00 00 00    	je     c001d7e6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001d6fa:	51                   	push   ecx
c001d6fb:	51                   	push   ecx
c001d6fc:	52                   	push   edx
c001d6fd:	50                   	push   eax
c001d6fe:	e8 db ec ff ff       	call   c001c3de <IDE::waitInterrupt(unsigned char)>
c001d703:	83 c4 10             	add    esp,0x10
c001d706:	84 c0                	test   al,al
c001d708:	0f 84 d4 fe ff ff    	je     c001d5e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d70e:	56                   	push   esi
c001d70f:	56                   	push   esi
c001d710:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d717:	50                   	push   eax
c001d718:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d71e:	e8 27 eb ff ff       	call   c001c24a <IDE::prepareInterrupt(unsigned char)>
c001d723:	83 c4 0c             	add    esp,0xc
c001d726:	6a 04                	push   0x4
c001d728:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d72f:	50                   	push   eax
c001d730:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d736:	e8 f5 eb ff ff       	call   c001c330 <IDE::read(unsigned char, unsigned char)>
c001d73b:	83 c4 0c             	add    esp,0xc
c001d73e:	6a 05                	push   0x5
c001d740:	89 c6                	mov    esi,eax
c001d742:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d749:	50                   	push   eax
c001d74a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d750:	e8 db eb ff ff       	call   c001c330 <IDE::read(unsigned char, unsigned char)>
c001d755:	89 f1                	mov    ecx,esi
c001d757:	0f b6 c0             	movzx  eax,al
c001d75a:	c1 e0 08             	shl    eax,0x8
c001d75d:	0f b6 f1             	movzx  esi,cl
c001d760:	09 c6                	or     esi,eax
c001d762:	d1 fe                	sar    esi,1
c001d764:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d768:	83 c4 10             	add    esp,0x10
c001d76b:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d770:	74 41                	je     c001d7b3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001d772:	31 c9                	xor    ecx,ecx
c001d774:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d77a:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d77e:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d785:	75 0a                	jne    c001d791 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001d787:	01 c9                	add    ecx,ecx
c001d789:	01 cd                	add    ebp,ecx
c001d78b:	4b                   	dec    ebx
c001d78c:	e9 54 ff ff ff       	jmp    c001d6e5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001d791:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d796:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d79a:	51                   	push   ecx
c001d79b:	51                   	push   ecx
c001d79c:	52                   	push   edx
c001d79d:	50                   	push   eax
c001d79e:	e8 bb ea ff ff       	call   c001c25e <IDE::getBase(unsigned char)>
c001d7a3:	89 c2                	mov    edx,eax
c001d7a5:	89 f0                	mov    eax,esi
c001d7a7:	66 ef                	out    dx,ax
c001d7a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d7ad:	83 c4 10             	add    esp,0x10
c001d7b0:	41                   	inc    ecx
c001d7b1:	eb c1                	jmp    c001d774 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001d7b3:	31 f6                	xor    esi,esi
c001d7b5:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d7bb:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d7bf:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d7c6:	75 06                	jne    c001d7ce <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001d7c8:	01 f6                	add    esi,esi
c001d7ca:	01 f5                	add    ebp,esi
c001d7cc:	eb bd                	jmp    c001d78b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001d7ce:	51                   	push   ecx
c001d7cf:	51                   	push   ecx
c001d7d0:	52                   	push   edx
c001d7d1:	50                   	push   eax
c001d7d2:	e8 87 ea ff ff       	call   c001c25e <IDE::getBase(unsigned char)>
c001d7d7:	89 c2                	mov    edx,eax
c001d7d9:	66 ed                	in     ax,dx
c001d7db:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d7e0:	83 c4 10             	add    esp,0x10
c001d7e3:	46                   	inc    esi
c001d7e4:	eb cf                	jmp    c001d7b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001d7e6:	51                   	push   ecx
c001d7e7:	51                   	push   ecx
c001d7e8:	52                   	push   edx
c001d7e9:	50                   	push   eax
c001d7ea:	e8 ef eb ff ff       	call   c001c3de <IDE::waitInterrupt(unsigned char)>
c001d7ef:	83 c4 10             	add    esp,0x10
c001d7f2:	84 c0                	test   al,al
c001d7f4:	0f 84 e8 fd ff ff    	je     c001d5e2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d7fa:	52                   	push   edx
c001d7fb:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d800:	52                   	push   edx
c001d801:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d808:	50                   	push   eax
c001d809:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d80f:	e8 36 ea ff ff       	call   c001c24a <IDE::prepareInterrupt(unsigned char)>
c001d814:	83 c4 10             	add    esp,0x10
c001d817:	50                   	push   eax
c001d818:	50                   	push   eax
c001d819:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d820:	50                   	push   eax
c001d821:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d827:	e8 32 ea ff ff       	call   c001c25e <IDE::getBase(unsigned char)>
c001d82c:	8d 50 07             	lea    edx,[eax+0x7]
c001d82f:	ec                   	in     al,dx
c001d830:	83 c4 10             	add    esp,0x10
c001d833:	a8 88                	test   al,0x88
c001d835:	74 0a                	je     c001d841 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001d837:	4b                   	dec    ebx
c001d838:	75 dd                	jne    c001d817 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001d83a:	bb 02 00 00 00       	mov    ebx,0x2
c001d83f:	eb 02                	jmp    c001d843 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001d841:	31 db                	xor    ebx,ebx
c001d843:	83 c4 1c             	add    esp,0x1c
c001d846:	89 d8                	mov    eax,ebx
c001d848:	5b                   	pop    ebx
c001d849:	5e                   	pop    esi
c001d84a:	5f                   	pop    edi
c001d84b:	5d                   	pop    ebp
c001d84c:	c3                   	ret    
c001d84d:	90                   	nop

c001d84e <ATAPI::diskRemoved()>:
c001d84e:	83 ec 18             	sub    esp,0x18
c001d851:	68 97 31 02 c0       	push   0xc0023197
c001d856:	e8 fe 18 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d85b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d85f:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001d866:	83 c4 1c             	add    esp,0x1c
c001d869:	c3                   	ret    

c001d86a <ATAPI::eject()>:
c001d86a:	57                   	push   edi
c001d86b:	b9 03 00 00 00       	mov    ecx,0x3
c001d870:	53                   	push   ebx
c001d871:	83 ec 14             	sub    esp,0x14
c001d874:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d878:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d87c:	fc                   	cld    
c001d87d:	31 c0                	xor    eax,eax
c001d87f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d881:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d886:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d88b:	50                   	push   eax
c001d88c:	50                   	push   eax
c001d88d:	6a 00                	push   0x0
c001d88f:	6a 00                	push   0x0
c001d891:	6a 00                	push   0x0
c001d893:	6a 02                	push   0x2
c001d895:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d899:	50                   	push   eax
c001d89a:	53                   	push   ebx
c001d89b:	e8 ee fc ff ff       	call   c001d58e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d8a0:	83 c4 14             	add    esp,0x14
c001d8a3:	53                   	push   ebx
c001d8a4:	e8 a5 ff ff ff       	call   c001d84e <ATAPI::diskRemoved()>
c001d8a9:	83 c4 24             	add    esp,0x24
c001d8ac:	5b                   	pop    ebx
c001d8ad:	5f                   	pop    edi
c001d8ae:	c3                   	ret    
c001d8af:	90                   	nop

c001d8b0 <ATAPI::diskInserted()>:
c001d8b0:	53                   	push   ebx
c001d8b1:	83 ec 14             	sub    esp,0x14
c001d8b4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d8b8:	68 ad 31 02 c0       	push   0xc00231ad
c001d8bd:	e8 97 18 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001d8c2:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001d8c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d8cc:	e8 0b 31 ff ff       	call   c00109dc <PhysicalDisk::startCache()>
c001d8d1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001d8d5:	83 c4 18             	add    esp,0x18
c001d8d8:	5b                   	pop    ebx
c001d8d9:	e9 3e 4b ff ff       	jmp    c001241c <createPartitionsForDisk(PhysicalDisk*)>

c001d8de <ATAPI::detectMedia()>:
c001d8de:	56                   	push   esi
c001d8df:	53                   	push   ebx
c001d8e0:	83 ec 28             	sub    esp,0x28
c001d8e3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d8e7:	6a 0c                	push   0xc
c001d8e9:	6a 00                	push   0x0
c001d8eb:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d8ef:	56                   	push   esi
c001d8f0:	e8 13 2d fe ff       	call   c0000608 <memset>
c001d8f5:	58                   	pop    eax
c001d8f6:	5a                   	pop    edx
c001d8f7:	6a 00                	push   0x0
c001d8f9:	6a 00                	push   0x0
c001d8fb:	6a 00                	push   0x0
c001d8fd:	6a 00                	push   0x0
c001d8ff:	56                   	push   esi
c001d900:	53                   	push   ebx
c001d901:	e8 88 fc ff ff       	call   c001d58e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d906:	83 c4 1c             	add    esp,0x1c
c001d909:	6a 0c                	push   0xc
c001d90b:	6a 00                	push   0x0
c001d90d:	56                   	push   esi
c001d90e:	e8 f5 2c fe ff       	call   c0000608 <memset>
c001d913:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d918:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d91d:	59                   	pop    ecx
c001d91e:	58                   	pop    eax
c001d91f:	6a 01                	push   0x1
c001d921:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d925:	50                   	push   eax
c001d926:	6a 00                	push   0x0
c001d928:	6a 12                	push   0x12
c001d92a:	56                   	push   esi
c001d92b:	53                   	push   ebx
c001d92c:	e8 5d fc ff ff       	call   c001d58e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d931:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d935:	83 c4 20             	add    esp,0x20
c001d938:	83 e0 7f             	and    eax,0x7f
c001d93b:	3c 70                	cmp    al,0x70
c001d93d:	74 15                	je     c001d954 <ATAPI::detectMedia()+0x76>
c001d93f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d946:	75 0c                	jne    c001d954 <ATAPI::detectMedia()+0x76>
c001d948:	83 ec 0c             	sub    esp,0xc
c001d94b:	53                   	push   ebx
c001d94c:	e8 5f ff ff ff       	call   c001d8b0 <ATAPI::diskInserted()>
c001d951:	83 c4 10             	add    esp,0x10
c001d954:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d958:	83 e0 0f             	and    eax,0xf
c001d95b:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d960:	75 18                	jne    c001d97a <ATAPI::detectMedia()+0x9c>
c001d962:	3c 02                	cmp    al,0x2
c001d964:	75 14                	jne    c001d97a <ATAPI::detectMedia()+0x9c>
c001d966:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d96d:	74 24                	je     c001d993 <ATAPI::detectMedia()+0xb5>
c001d96f:	83 ec 0c             	sub    esp,0xc
c001d972:	53                   	push   ebx
c001d973:	e8 d6 fe ff ff       	call   c001d84e <ATAPI::diskRemoved()>
c001d978:	eb 16                	jmp    c001d990 <ATAPI::detectMedia()+0xb2>
c001d97a:	84 c0                	test   al,al
c001d97c:	75 15                	jne    c001d993 <ATAPI::detectMedia()+0xb5>
c001d97e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d985:	75 0c                	jne    c001d993 <ATAPI::detectMedia()+0xb5>
c001d987:	83 ec 0c             	sub    esp,0xc
c001d98a:	53                   	push   ebx
c001d98b:	e8 20 ff ff ff       	call   c001d8b0 <ATAPI::diskInserted()>
c001d990:	83 c4 10             	add    esp,0x10
c001d993:	83 c4 24             	add    esp,0x24
c001d996:	5b                   	pop    ebx
c001d997:	5e                   	pop    esi
c001d998:	c3                   	ret    
c001d999:	90                   	nop

c001d99a <ATAPI::open(int, int, void*)>:
c001d99a:	53                   	push   ebx
c001d99b:	83 ec 08             	sub    esp,0x8
c001d99e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d9a2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d9a6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d9aa:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d9b0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d9b6:	c1 e0 06             	shl    eax,0x6
c001d9b9:	01 d0                	add    eax,edx
c001d9bb:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d9c2:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d9c8:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d9cf:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d9d9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d9df:	6a 04                	push   0x4
c001d9e1:	6a 0c                	push   0xc
c001d9e3:	51                   	push   ecx
c001d9e4:	52                   	push   edx
c001d9e5:	e8 86 e8 ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9ea:	90                   	nop
c001d9eb:	90                   	nop
c001d9ec:	6a 00                	push   0x0
c001d9ee:	6a 0c                	push   0xc
c001d9f0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9f7:	50                   	push   eax
c001d9f8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9fe:	e8 6d e8 ff ff       	call   c001c270 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001da03:	83 c4 14             	add    esp,0x14
c001da06:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001da0d:	53                   	push   ebx
c001da0e:	e8 cb fe ff ff       	call   c001d8de <ATAPI::detectMedia()>
c001da13:	83 c4 18             	add    esp,0x18
c001da16:	31 c0                	xor    eax,eax
c001da18:	5b                   	pop    ebx
c001da19:	c3                   	ret    

c001da1a <ATAPI::read(unsigned long long, int, void*)>:
c001da1a:	55                   	push   ebp
c001da1b:	57                   	push   edi
c001da1c:	56                   	push   esi
c001da1d:	53                   	push   ebx
c001da1e:	83 ec 1c             	sub    esp,0x1c
c001da21:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001da25:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001da29:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001da2d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da34:	74 3c                	je     c001da72 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001da36:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001da3a:	b9 03 00 00 00       	mov    ecx,0x3
c001da3f:	fc                   	cld    
c001da40:	31 c0                	xor    eax,eax
c001da42:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001da44:	0f ce                	bswap  esi
c001da46:	89 e8                	mov    eax,ebp
c001da48:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001da4d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001da51:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001da55:	50                   	push   eax
c001da56:	50                   	push   eax
c001da57:	55                   	push   ebp
c001da58:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001da5c:	c1 e5 0b             	shl    ebp,0xb
c001da5f:	6a 00                	push   0x0
c001da61:	55                   	push   ebp
c001da62:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001da66:	50                   	push   eax
c001da67:	53                   	push   ebx
c001da68:	e8 21 fb ff ff       	call   c001d58e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001da6d:	83 c4 20             	add    esp,0x20
c001da70:	eb 1a                	jmp    c001da8c <ATAPI::read(unsigned long long, int, void*)+0x72>
c001da72:	83 ec 0c             	sub    esp,0xc
c001da75:	53                   	push   ebx
c001da76:	e8 63 fe ff ff       	call   c001d8de <ATAPI::detectMedia()>
c001da7b:	83 c4 10             	add    esp,0x10
c001da7e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001da85:	75 af                	jne    c001da36 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001da87:	b8 02 00 00 00       	mov    eax,0x2
c001da8c:	83 c4 1c             	add    esp,0x1c
c001da8f:	5b                   	pop    ebx
c001da90:	5e                   	pop    esi
c001da91:	5f                   	pop    edi
c001da92:	5d                   	pop    ebp
c001da93:	c3                   	ret    

c001da94 <AVX::open(int, int, void*)>:
c001da94:	83 ec 0c             	sub    esp,0xc
c001da97:	e8 8c 10 00 00       	call   c001eb28 <avxInit>
c001da9c:	b8 00 00 00 00       	mov    eax,0x0
c001daa1:	83 c4 0c             	add    esp,0xc
c001daa4:	c3                   	ret    
c001daa5:	90                   	nop

c001daa6 <AVX::close(int, int, void*)>:
c001daa6:	83 ec 0c             	sub    esp,0xc
c001daa9:	e8 7b 10 00 00       	call   c001eb29 <avxClose>
c001daae:	b8 00 00 00 00       	mov    eax,0x0
c001dab3:	83 c4 0c             	add    esp,0xc
c001dab6:	c3                   	ret    
c001dab7:	90                   	nop

c001dab8 <AVX::available()>:
c001dab8:	83 ec 0c             	sub    esp,0xc
c001dabb:	e8 60 10 00 00       	call   c001eb20 <avxDetect>
c001dac0:	85 c0                	test   eax,eax
c001dac2:	0f 95 c0             	setne  al
c001dac5:	83 c4 0c             	add    esp,0xc
c001dac8:	c3                   	ret    
c001dac9:	90                   	nop

c001daca <AVX::save(void*)>:
c001daca:	83 ec 0c             	sub    esp,0xc
c001dacd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dad1:	83 ec 0c             	sub    esp,0xc
c001dad4:	50                   	push   eax
c001dad5:	e8 4c 10 00 00       	call   c001eb26 <avxSave>
c001dada:	83 c4 10             	add    esp,0x10
c001dadd:	90                   	nop
c001dade:	83 c4 0c             	add    esp,0xc
c001dae1:	c3                   	ret    

c001dae2 <AVX::load(void*)>:
c001dae2:	83 ec 0c             	sub    esp,0xc
c001dae5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dae9:	83 ec 0c             	sub    esp,0xc
c001daec:	50                   	push   eax
c001daed:	e8 35 10 00 00       	call   c001eb27 <avxLoad>
c001daf2:	83 c4 10             	add    esp,0x10
c001daf5:	90                   	nop
c001daf6:	83 c4 0c             	add    esp,0xc
c001daf9:	c3                   	ret    

c001dafa <AVX::AVX()>:
c001dafa:	83 ec 0c             	sub    esp,0xc
c001dafd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db01:	83 ec 08             	sub    esp,0x8
c001db04:	68 f8 31 02 c0       	push   0xc00231f8
c001db09:	50                   	push   eax
c001db0a:	e8 43 2f ff ff       	call   c0010a52 <FPU::FPU(char const*)>
c001db0f:	83 c4 10             	add    esp,0x10
c001db12:	ba 08 32 02 c0       	mov    edx,0xc0023208
c001db17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db1b:	89 10                	mov    DWORD PTR [eax],edx
c001db1d:	90                   	nop
c001db1e:	83 c4 0c             	add    esp,0xc
c001db21:	c3                   	ret    

c001db22 <MMX::available()>:
c001db22:	a1 28 41 02 c0       	mov    eax,ds:0xc0024128
c001db27:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001db2d:	83 e0 20             	and    eax,0x20
c001db30:	84 c0                	test   al,al
c001db32:	0f 95 c0             	setne  al
c001db35:	c3                   	ret    

c001db36 <MMX::open(int, int, void*)>:
c001db36:	83 ec 0c             	sub    esp,0xc
c001db39:	e8 5e 10 00 00       	call   c001eb9c <x87Init>
c001db3e:	b8 00 00 00 00       	mov    eax,0x0
c001db43:	83 c4 0c             	add    esp,0xc
c001db46:	c3                   	ret    
c001db47:	90                   	nop

c001db48 <MMX::close(int, int, void*)>:
c001db48:	83 ec 0c             	sub    esp,0xc
c001db4b:	e8 66 10 00 00       	call   c001ebb6 <x87Close>
c001db50:	b8 00 00 00 00       	mov    eax,0x0
c001db55:	83 c4 0c             	add    esp,0xc
c001db58:	c3                   	ret    
c001db59:	90                   	nop

c001db5a <MMX::save(void*)>:
c001db5a:	83 ec 0c             	sub    esp,0xc
c001db5d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db61:	83 ec 0c             	sub    esp,0xc
c001db64:	50                   	push   eax
c001db65:	e8 27 10 00 00       	call   c001eb91 <x87Save>
c001db6a:	83 c4 10             	add    esp,0x10
c001db6d:	90                   	nop
c001db6e:	83 c4 0c             	add    esp,0xc
c001db71:	c3                   	ret    

c001db72 <MMX::load(void*)>:
c001db72:	83 ec 0c             	sub    esp,0xc
c001db75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db79:	83 ec 0c             	sub    esp,0xc
c001db7c:	50                   	push   eax
c001db7d:	e8 15 10 00 00       	call   c001eb97 <x87Load>
c001db82:	83 c4 10             	add    esp,0x10
c001db85:	90                   	nop
c001db86:	83 c4 0c             	add    esp,0xc
c001db89:	c3                   	ret    

c001db8a <MMX::MMX()>:
c001db8a:	83 ec 0c             	sub    esp,0xc
c001db8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db91:	83 ec 08             	sub    esp,0x8
c001db94:	68 38 32 02 c0       	push   0xc0023238
c001db99:	50                   	push   eax
c001db9a:	e8 b3 2e ff ff       	call   c0010a52 <FPU::FPU(char const*)>
c001db9f:	83 c4 10             	add    esp,0x10
c001dba2:	ba 48 32 02 c0       	mov    edx,0xc0023248
c001dba7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dbab:	89 10                	mov    DWORD PTR [eax],edx
c001dbad:	90                   	nop
c001dbae:	83 c4 0c             	add    esp,0xc
c001dbb1:	c3                   	ret    

c001dbb2 <SSE::open(int, int, void*)>:
c001dbb2:	83 ec 0c             	sub    esp,0xc
c001dbb5:	e8 9d 0f 00 00       	call   c001eb57 <sseInit>
c001dbba:	b8 00 00 00 00       	mov    eax,0x0
c001dbbf:	83 c4 0c             	add    esp,0xc
c001dbc2:	c3                   	ret    
c001dbc3:	90                   	nop

c001dbc4 <SSE::close(int, int, void*)>:
c001dbc4:	83 ec 0c             	sub    esp,0xc
c001dbc7:	e8 9b 0f 00 00       	call   c001eb67 <sseClose>
c001dbcc:	b8 00 00 00 00       	mov    eax,0x0
c001dbd1:	83 c4 0c             	add    esp,0xc
c001dbd4:	c3                   	ret    
c001dbd5:	90                   	nop

c001dbd6 <SSE::available()>:
c001dbd6:	83 ec 1c             	sub    esp,0x1c
c001dbd9:	e8 52 0f 00 00       	call   c001eb30 <sseDetect>
c001dbde:	85 c0                	test   eax,eax
c001dbe0:	0f 95 c0             	setne  al
c001dbe3:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dbe7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dbeb:	83 c4 1c             	add    esp,0x1c
c001dbee:	c3                   	ret    
c001dbef:	90                   	nop

c001dbf0 <SSE::save(void*)>:
c001dbf0:	83 ec 0c             	sub    esp,0xc
c001dbf3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dbf7:	83 ec 0c             	sub    esp,0xc
c001dbfa:	50                   	push   eax
c001dbfb:	e8 4b 0f 00 00       	call   c001eb4b <sseSave>
c001dc00:	83 c4 10             	add    esp,0x10
c001dc03:	90                   	nop
c001dc04:	83 c4 0c             	add    esp,0xc
c001dc07:	c3                   	ret    

c001dc08 <SSE::load(void*)>:
c001dc08:	83 ec 0c             	sub    esp,0xc
c001dc0b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc0f:	83 ec 0c             	sub    esp,0xc
c001dc12:	50                   	push   eax
c001dc13:	e8 39 0f 00 00       	call   c001eb51 <sseLoad>
c001dc18:	83 c4 10             	add    esp,0x10
c001dc1b:	90                   	nop
c001dc1c:	83 c4 0c             	add    esp,0xc
c001dc1f:	c3                   	ret    

c001dc20 <SSE::SSE()>:
c001dc20:	83 ec 0c             	sub    esp,0xc
c001dc23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc27:	83 ec 08             	sub    esp,0x8
c001dc2a:	68 78 32 02 c0       	push   0xc0023278
c001dc2f:	50                   	push   eax
c001dc30:	e8 1d 2e ff ff       	call   c0010a52 <FPU::FPU(char const*)>
c001dc35:	83 c4 10             	add    esp,0x10
c001dc38:	ba 88 32 02 c0       	mov    edx,0xc0023288
c001dc3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc41:	89 10                	mov    DWORD PTR [eax],edx
c001dc43:	90                   	nop
c001dc44:	83 c4 0c             	add    esp,0xc
c001dc47:	c3                   	ret    

c001dc48 <x87::open(int, int, void*)>:
c001dc48:	83 ec 0c             	sub    esp,0xc
c001dc4b:	e8 4c 0f 00 00       	call   c001eb9c <x87Init>
c001dc50:	b8 00 00 00 00       	mov    eax,0x0
c001dc55:	83 c4 0c             	add    esp,0xc
c001dc58:	c3                   	ret    
c001dc59:	90                   	nop

c001dc5a <x87::close(int, int, void*)>:
c001dc5a:	83 ec 0c             	sub    esp,0xc
c001dc5d:	e8 54 0f 00 00       	call   c001ebb6 <x87Close>
c001dc62:	b8 00 00 00 00       	mov    eax,0x0
c001dc67:	83 c4 0c             	add    esp,0xc
c001dc6a:	c3                   	ret    
c001dc6b:	90                   	nop

c001dc6c <x87::available()>:
c001dc6c:	83 ec 0c             	sub    esp,0xc
c001dc6f:	e8 02 0f 00 00       	call   c001eb76 <x87Detect>
c001dc74:	85 c0                	test   eax,eax
c001dc76:	0f 95 c0             	setne  al
c001dc79:	83 c4 0c             	add    esp,0xc
c001dc7c:	c3                   	ret    
c001dc7d:	90                   	nop

c001dc7e <x87::save(void*)>:
c001dc7e:	83 ec 0c             	sub    esp,0xc
c001dc81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc85:	83 ec 0c             	sub    esp,0xc
c001dc88:	50                   	push   eax
c001dc89:	e8 03 0f 00 00       	call   c001eb91 <x87Save>
c001dc8e:	83 c4 10             	add    esp,0x10
c001dc91:	90                   	nop
c001dc92:	83 c4 0c             	add    esp,0xc
c001dc95:	c3                   	ret    

c001dc96 <x87::load(void*)>:
c001dc96:	83 ec 0c             	sub    esp,0xc
c001dc99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001dc9d:	83 ec 0c             	sub    esp,0xc
c001dca0:	50                   	push   eax
c001dca1:	e8 f1 0e 00 00       	call   c001eb97 <x87Load>
c001dca6:	83 c4 10             	add    esp,0x10
c001dca9:	90                   	nop
c001dcaa:	83 c4 0c             	add    esp,0xc
c001dcad:	c3                   	ret    

c001dcae <x87::x87()>:
c001dcae:	83 ec 0c             	sub    esp,0xc
c001dcb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcb5:	83 ec 08             	sub    esp,0x8
c001dcb8:	68 b8 32 02 c0       	push   0xc00232b8
c001dcbd:	50                   	push   eax
c001dcbe:	e8 8f 2d ff ff       	call   c0010a52 <FPU::FPU(char const*)>
c001dcc3:	83 c4 10             	add    esp,0x10
c001dcc6:	ba c8 32 02 c0       	mov    edx,0xc00232c8
c001dccb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dccf:	89 10                	mov    DWORD PTR [eax],edx
c001dcd1:	90                   	nop
c001dcd2:	83 c4 0c             	add    esp,0xc
c001dcd5:	c3                   	ret    

c001dcd6 <APIC::disable()>:
c001dcd6:	90                   	nop
c001dcd7:	c3                   	ret    

c001dcd8 <APIC::close(int, int, void*)>:
c001dcd8:	55                   	push   ebp
c001dcd9:	89 e5                	mov    ebp,esp
c001dcdb:	83 ec 08             	sub    esp,0x8
c001dcde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dce1:	8b 00                	mov    eax,DWORD PTR [eax]
c001dce3:	83 c0 3c             	add    eax,0x3c
c001dce6:	8b 00                	mov    eax,DWORD PTR [eax]
c001dce8:	83 ec 0c             	sub    esp,0xc
c001dceb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dcee:	ff d0                	call   eax
c001dcf0:	83 c4 10             	add    esp,0x10
c001dcf3:	b8 00 00 00 00       	mov    eax,0x0
c001dcf8:	c9                   	leave  
c001dcf9:	c3                   	ret    

c001dcfa <IOAPIC::close(int, int, void*)>:
c001dcfa:	b8 00 00 00 00       	mov    eax,0x0
c001dcff:	c3                   	ret    

c001dd00 <APIC::io_wait()>:
c001dd00:	eb 00                	jmp    c001dd02 <APIC::io_wait()+0x2>
c001dd02:	eb 00                	jmp    c001dd04 <APIC::io_wait()+0x4>
c001dd04:	90                   	nop
c001dd05:	c3                   	ret    

c001dd06 <APIC::getBase()>:
c001dd06:	55                   	push   ebp
c001dd07:	89 e5                	mov    ebp,esp
c001dd09:	83 ec 18             	sub    esp,0x18
c001dd0c:	a1 28 41 02 c0       	mov    eax,ds:0xc0024128
c001dd11:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001dd17:	83 e0 08             	and    eax,0x8
c001dd1a:	84 c0                	test   al,al
c001dd1c:	75 07                	jne    c001dd25 <APIC::getBase()+0x1f>
c001dd1e:	b8 00 00 00 00       	mov    eax,0x0
c001dd23:	eb 21                	jmp    c001dd46 <APIC::getBase()+0x40>
c001dd25:	a1 28 41 02 c0       	mov    eax,ds:0xc0024128
c001dd2a:	83 ec 08             	sub    esp,0x8
c001dd2d:	6a 1b                	push   0x1b
c001dd2f:	50                   	push   eax
c001dd30:	e8 8f d7 fe ff       	call   c000b4c4 <Computer::rdmsr(unsigned int)>
c001dd35:	83 c4 10             	add    esp,0x10
c001dd38:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001dd3b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001dd3e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001dd41:	25 00 f0 ff ff       	and    eax,0xfffff000
c001dd46:	c9                   	leave  
c001dd47:	c3                   	ret    

c001dd48 <APIC::eoi(unsigned char)>:
c001dd48:	55                   	push   ebp
c001dd49:	89 e5                	mov    ebp,esp
c001dd4b:	83 ec 28             	sub    esp,0x28
c001dd4e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001dd51:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001dd54:	83 ec 0c             	sub    esp,0xc
c001dd57:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dd5a:	e8 a7 ff ff ff       	call   c001dd06 <APIC::getBase()>
c001dd5f:	83 c4 10             	add    esp,0x10
c001dd62:	05 b0 00 00 00       	add    eax,0xb0
c001dd67:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001dd6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001dd6d:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001dd73:	90                   	nop
c001dd74:	c9                   	leave  
c001dd75:	c3                   	ret    

c001dd76 <APIC::open(int, int, void*)>:
c001dd76:	55                   	push   ebp
c001dd77:	89 e5                	mov    ebp,esp
c001dd79:	57                   	push   edi
c001dd7a:	56                   	push   esi
c001dd7b:	53                   	push   ebx
c001dd7c:	83 ec 1c             	sub    esp,0x1c
c001dd7f:	83 ec 0c             	sub    esp,0xc
c001dd82:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dd85:	e8 7c ff ff ff       	call   c001dd06 <APIC::getBase()>
c001dd8a:	83 c4 10             	add    esp,0x10
c001dd8d:	05 f0 00 00 00       	add    eax,0xf0
c001dd92:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001dd95:	83 ec 0c             	sub    esp,0xc
c001dd98:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001dd9b:	e8 66 ff ff ff       	call   c001dd06 <APIC::getBase()>
c001dda0:	83 c4 10             	add    esp,0x10
c001dda3:	89 c2                	mov    edx,eax
c001dda5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dda8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ddae:	89 c7                	mov    edi,eax
c001ddb0:	81 e7 ff 00 00 00    	and    edi,0xff
c001ddb6:	89 d0                	mov    eax,edx
c001ddb8:	ba 00 00 00 00       	mov    edx,0x0
c001ddbd:	89 c1                	mov    ecx,eax
c001ddbf:	80 e5 ff             	and    ch,0xff
c001ddc2:	89 cb                	mov    ebx,ecx
c001ddc4:	89 d0                	mov    eax,edx
c001ddc6:	25 ff 00 00 00       	and    eax,0xff
c001ddcb:	89 c6                	mov    esi,eax
c001ddcd:	89 d8                	mov    eax,ebx
c001ddcf:	89 f2                	mov    edx,esi
c001ddd1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ddd4:	8d 5f 08             	lea    ebx,[edi+0x8]
c001ddd7:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001dddb:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001dddf:	83 e0 00             	and    eax,0x0
c001dde2:	09 d0                	or     eax,edx
c001dde4:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001dde8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ddeb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ddf1:	8d 50 01             	lea    edx,[eax+0x1]
c001ddf4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ddf7:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001ddfd:	31 d2                	xor    edx,edx
c001ddff:	88 c2                	mov    dl,al
c001de01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001de04:	83 c2 08             	add    edx,0x8
c001de07:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001de0b:	81 e1 ff 00 00 00    	and    ecx,0xff
c001de11:	81 c9 00 00 01 00    	or     ecx,0x10000
c001de17:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001de1b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001de1e:	8b 00                	mov    eax,DWORD PTR [eax]
c001de20:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001de23:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001de2a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001de2d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001de30:	89 10                	mov    DWORD PTR [eax],edx
c001de32:	b8 00 00 00 00       	mov    eax,0x0
c001de37:	8d 65 f4             	lea    esp,[ebp-0xc]
c001de3a:	5b                   	pop    ebx
c001de3b:	5e                   	pop    esi
c001de3c:	5f                   	pop    edi
c001de3d:	5d                   	pop    ebp
c001de3e:	c3                   	ret    
c001de3f:	90                   	nop

c001de40 <IOAPIC::IOAPIC()>:
c001de40:	83 ec 0c             	sub    esp,0xc
c001de43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de47:	83 ec 08             	sub    esp,0x8
c001de4a:	68 f8 32 02 c0       	push   0xc00232f8
c001de4f:	50                   	push   eax
c001de50:	e8 09 29 ff ff       	call   c001075e <Device::Device(char const*)>
c001de55:	83 c4 10             	add    esp,0x10
c001de58:	ba 20 34 02 c0       	mov    edx,0xc0023420
c001de5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de61:	89 10                	mov    DWORD PTR [eax],edx
c001de63:	90                   	nop
c001de64:	83 c4 0c             	add    esp,0xc
c001de67:	c3                   	ret    

c001de68 <APIC::APIC()>:
c001de68:	53                   	push   ebx
c001de69:	83 ec 18             	sub    esp,0x18
c001de6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de70:	83 ec 08             	sub    esp,0x8
c001de73:	68 00 33 02 c0       	push   0xc0023300
c001de78:	50                   	push   eax
c001de79:	e8 2c 30 ff ff       	call   c0010eaa <InterruptController::InterruptController(char const*)>
c001de7e:	83 c4 10             	add    esp,0x10
c001de81:	ba d8 33 02 c0       	mov    edx,0xc00233d8
c001de86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de8a:	89 10                	mov    DWORD PTR [eax],edx
c001de8c:	a0 20 5f 02 c0       	mov    al,ds:0xc0025f20
c001de91:	83 f0 01             	xor    eax,0x1
c001de94:	84 c0                	test   al,al
c001de96:	0f 84 a2 00 00 00    	je     c001df3e <APIC::APIC()+0xd6>
c001de9c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001dea1:	a0 d0 49 02 c0       	mov    al,ds:0xc00249d0
c001dea6:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001deaa:	0f 83 87 00 00 00    	jae    c001df37 <APIC::APIC()+0xcf>
c001deb0:	83 ec 0c             	sub    esp,0xc
c001deb3:	68 68 01 00 00       	push   0x168
c001deb8:	e8 67 11 ff ff       	call   c000f024 <operator new(unsigned long)>
c001debd:	83 c4 10             	add    esp,0x10
c001dec0:	89 c3                	mov    ebx,eax
c001dec2:	83 ec 0c             	sub    esp,0xc
c001dec5:	53                   	push   ebx
c001dec6:	e8 75 ff ff ff       	call   c001de40 <IOAPIC::IOAPIC()>
c001decb:	83 c4 10             	add    esp,0x10
c001dece:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001ded2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ded6:	25 ff 00 00 00       	and    eax,0xff
c001dedb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001dedf:	89 14 85 00 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda100],edx
c001dee6:	a1 e0 5e 02 c0       	mov    eax,ds:0xc0025ee0
c001deeb:	40                   	inc    eax
c001deec:	a3 e0 5e 02 c0       	mov    ds:0xc0025ee0,eax
c001def1:	a1 28 41 02 c0       	mov    eax,ds:0xc0024128
c001def6:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001defc:	83 ec 08             	sub    esp,0x8
c001deff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001df03:	50                   	push   eax
c001df04:	e8 65 26 ff ff       	call   c001056e <Device::addChild(Device*)>
c001df09:	83 c4 10             	add    esp,0x10
c001df0c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001df10:	8b 00                	mov    eax,DWORD PTR [eax]
c001df12:	83 c0 08             	add    eax,0x8
c001df15:	8b 10                	mov    edx,DWORD PTR [eax]
c001df17:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001df1b:	25 ff 00 00 00       	and    eax,0xff
c001df20:	6a 00                	push   0x0
c001df22:	6a 00                	push   0x0
c001df24:	50                   	push   eax
c001df25:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001df29:	ff d2                	call   edx
c001df2b:	83 c4 10             	add    esp,0x10
c001df2e:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001df32:	e9 6a ff ff ff       	jmp    c001dea1 <APIC::APIC()+0x39>
c001df37:	c6 05 20 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f20,0x1
c001df3e:	90                   	nop
c001df3f:	83 c4 18             	add    esp,0x18
c001df42:	5b                   	pop    ebx
c001df43:	c3                   	ret    

c001df44 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001df44:	55                   	push   ebp
c001df45:	89 e5                	mov    ebp,esp
c001df47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df4a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001df50:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001df53:	72 1d                	jb     c001df72 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001df55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df58:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001df5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df61:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001df67:	01 d0                	add    eax,edx
c001df69:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001df6c:	73 04                	jae    c001df72 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001df6e:	b0 01                	mov    al,0x1
c001df70:	eb 02                	jmp    c001df74 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001df72:	b0 00                	mov    al,0x0
c001df74:	5d                   	pop    ebp
c001df75:	c3                   	ret    

c001df76 <IOAPIC::read(int)>:
c001df76:	55                   	push   ebp
c001df77:	89 e5                	mov    ebp,esp
c001df79:	83 ec 10             	sub    esp,0x10
c001df7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001df7f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001df85:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001df88:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001df8b:	31 d2                	xor    edx,edx
c001df8d:	88 c2                	mov    dl,al
c001df8f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001df92:	89 10                	mov    DWORD PTR [eax],edx
c001df94:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001df97:	83 c0 10             	add    eax,0x10
c001df9a:	8b 00                	mov    eax,DWORD PTR [eax]
c001df9c:	c9                   	leave  
c001df9d:	c3                   	ret    

c001df9e <IOAPIC::open(int, int, void*)>:
c001df9e:	55                   	push   ebp
c001df9f:	89 e5                	mov    ebp,esp
c001dfa1:	57                   	push   edi
c001dfa2:	56                   	push   esi
c001dfa3:	53                   	push   ebx
c001dfa4:	83 ec 0c             	sub    esp,0xc
c001dfa7:	83 ec 0c             	sub    esp,0xc
c001dfaa:	68 2b 33 02 c0       	push   0xc002332b
c001dfaf:	e8 a5 11 ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001dfb4:	83 c4 10             	add    esp,0x10
c001dfb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dfba:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001dfbd:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dfc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dfc6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dfcc:	8b 14 85 00 4a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb600]
c001dfd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dfd6:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001dfdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dfdf:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dfe5:	8b 14 85 80 4a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb580]
c001dfec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dfef:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001dff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001dff8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001dffe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e001:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e007:	89 c7                	mov    edi,eax
c001e009:	81 e7 ff 00 00 00    	and    edi,0xff
c001e00f:	89 d0                	mov    eax,edx
c001e011:	ba 00 00 00 00       	mov    edx,0x0
c001e016:	89 c1                	mov    ecx,eax
c001e018:	80 e5 ff             	and    ch,0xff
c001e01b:	89 cb                	mov    ebx,ecx
c001e01d:	89 d0                	mov    eax,edx
c001e01f:	25 ff 00 00 00       	and    eax,0xff
c001e024:	89 c6                	mov    esi,eax
c001e026:	89 d8                	mov    eax,ebx
c001e028:	89 f2                	mov    edx,esi
c001e02a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e02d:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e030:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e034:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e038:	83 e0 00             	and    eax,0x0
c001e03b:	09 d0                	or     eax,edx
c001e03d:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e041:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e044:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e04a:	8d 50 01             	lea    edx,[eax+0x1]
c001e04d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e050:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e056:	31 d2                	xor    edx,edx
c001e058:	88 c2                	mov    dl,al
c001e05a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e05d:	83 c2 08             	add    edx,0x8
c001e060:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e064:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e06a:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e070:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e074:	83 ec 08             	sub    esp,0x8
c001e077:	6a 01                	push   0x1
c001e079:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e07c:	e8 f5 fe ff ff       	call   c001df76 <IOAPIC::read(int)>
c001e081:	83 c4 10             	add    esp,0x10
c001e084:	c1 f8 10             	sar    eax,0x10
c001e087:	25 ff 00 00 00       	and    eax,0xff
c001e08c:	8d 50 01             	lea    edx,[eax+0x1]
c001e08f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e092:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e098:	b8 00 00 00 00       	mov    eax,0x0
c001e09d:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e0a0:	5b                   	pop    ebx
c001e0a1:	5e                   	pop    esi
c001e0a2:	5f                   	pop    edi
c001e0a3:	5d                   	pop    ebp
c001e0a4:	c3                   	ret    
c001e0a5:	90                   	nop

c001e0a6 <IOAPIC::write(int, int)>:
c001e0a6:	55                   	push   ebp
c001e0a7:	89 e5                	mov    ebp,esp
c001e0a9:	83 ec 10             	sub    esp,0x10
c001e0ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e0af:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e0b5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e0b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e0bb:	31 d2                	xor    edx,edx
c001e0bd:	88 c2                	mov    dl,al
c001e0bf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e0c2:	89 10                	mov    DWORD PTR [eax],edx
c001e0c4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e0c7:	8d 50 10             	lea    edx,[eax+0x10]
c001e0ca:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e0cd:	89 02                	mov    DWORD PTR [edx],eax
c001e0cf:	90                   	nop
c001e0d0:	c9                   	leave  
c001e0d1:	c3                   	ret    

c001e0d2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001e0d2:	55                   	push   ebp
c001e0d3:	89 e5                	mov    ebp,esp
c001e0d5:	83 ec 20             	sub    esp,0x20
c001e0d8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e0db:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e0de:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e0e1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e0e4:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e0e7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e0ea:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e0ed:	88 d0                	mov    al,dl
c001e0ef:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001e0f2:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e0f5:	25 ff 00 00 00       	and    eax,0xff
c001e0fa:	83 c0 08             	add    eax,0x8
c001e0fd:	01 c0                	add    eax,eax
c001e0ff:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e102:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e105:	25 ff 00 00 00       	and    eax,0xff
c001e10a:	83 c0 08             	add    eax,0x8
c001e10d:	01 c0                	add    eax,eax
c001e10f:	40                   	inc    eax
c001e110:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001e113:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e116:	50                   	push   eax
c001e117:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e11a:	e8 57 fe ff ff       	call   c001df76 <IOAPIC::read(int)>
c001e11f:	83 c4 08             	add    esp,0x8
c001e122:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e125:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001e12c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001e12f:	c1 e0 18             	shl    eax,0x18
c001e132:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e135:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e138:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e13b:	52                   	push   edx
c001e13c:	50                   	push   eax
c001e13d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e140:	e8 61 ff ff ff       	call   c001e0a6 <IOAPIC::write(int, int)>
c001e145:	83 c4 0c             	add    esp,0xc
c001e148:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e14b:	50                   	push   eax
c001e14c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e14f:	e8 22 fe ff ff       	call   c001df76 <IOAPIC::read(int)>
c001e154:	83 c4 08             	add    esp,0x8
c001e157:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e15a:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001e161:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001e168:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001e16f:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001e176:	8a 45 e8             	mov    al,BYTE PTR [ebp-0x18]
c001e179:	25 ff 00 00 00       	and    eax,0xff
c001e17e:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001e181:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001e184:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e187:	52                   	push   edx
c001e188:	50                   	push   eax
c001e189:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e18c:	e8 15 ff ff ff       	call   c001e0a6 <IOAPIC::write(int, int)>
c001e191:	83 c4 0c             	add    esp,0xc
c001e194:	90                   	nop
c001e195:	c9                   	leave  
c001e196:	c3                   	ret    
c001e197:	90                   	nop

c001e198 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001e198:	55                   	push   ebp
c001e199:	89 e5                	mov    ebp,esp
c001e19b:	56                   	push   esi
c001e19c:	53                   	push   ebx
c001e19d:	83 ec 20             	sub    esp,0x20
c001e1a0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e1a3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e1a6:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001e1aa:	74 2a                	je     c001e1d6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e1ac:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001e1b0:	7f 14                	jg     c001e1c6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2e>
c001e1b2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e1b5:	05 80 38 02 c0       	add    eax,0xc0023880
c001e1ba:	8a 00                	mov    al,BYTE PTR [eax]
c001e1bc:	25 ff 00 00 00       	and    eax,0xff
c001e1c1:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001e1c4:	eb 10                	jmp    c001e1d6 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e1c6:	83 ec 0c             	sub    esp,0xc
c001e1c9:	68 3c 33 02 c0       	push   0xc002333c
c001e1ce:	e8 19 72 ff ff       	call   c00153ec <Krnl::panic(char const*)>
c001e1d3:	83 c4 10             	add    esp,0x10
c001e1d6:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e1da:	a1 e0 5e 02 c0       	mov    eax,ds:0xc0025ee0
c001e1df:	83 ec 08             	sub    esp,0x8
c001e1e2:	50                   	push   eax
c001e1e3:	68 74 33 02 c0       	push   0xc0023374
c001e1e8:	e8 6c 0f ff ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001e1ed:	83 c4 10             	add    esp,0x10
c001e1f0:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e1f7:	a1 e0 5e 02 c0       	mov    eax,ds:0xc0025ee0
c001e1fc:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e1ff:	7d 64                	jge    c001e265 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e201:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e204:	8b 04 85 00 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda100]
c001e20b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e20e:	83 ec 08             	sub    esp,0x8
c001e211:	52                   	push   edx
c001e212:	50                   	push   eax
c001e213:	e8 2c fd ff ff       	call   c001df44 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001e218:	83 c4 10             	add    esp,0x10
c001e21b:	84 c0                	test   al,al
c001e21d:	74 41                	je     c001e260 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xc8>
c001e21f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e222:	8b 1c 85 00 5f 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffda100]
c001e229:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e22c:	83 c0 20             	add    eax,0x20
c001e22f:	89 c6                	mov    esi,eax
c001e231:	81 e6 ff 00 00 00    	and    esi,0xff
c001e237:	e8 41 60 ff ff       	call   c001427d <getCPUNumber()>
c001e23c:	89 c2                	mov    edx,eax
c001e23e:	c1 fa 1f             	sar    edx,0x1f
c001e241:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001e244:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e24a:	83 ec 0c             	sub    esp,0xc
c001e24d:	56                   	push   esi
c001e24e:	52                   	push   edx
c001e24f:	50                   	push   eax
c001e250:	51                   	push   ecx
c001e251:	53                   	push   ebx
c001e252:	e8 7b fe ff ff       	call   c001e0d2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001e257:	83 c4 20             	add    esp,0x20
c001e25a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001e25e:	eb 05                	jmp    c001e265 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e260:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001e263:	eb 92                	jmp    c001e1f7 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001e265:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e268:	83 f0 01             	xor    eax,0x1
c001e26b:	84 c0                	test   al,al
c001e26d:	74 10                	je     c001e27f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe7>
c001e26f:	83 ec 0c             	sub    esp,0xc
c001e272:	68 8b 33 02 c0       	push   0xc002338b
c001e277:	e8 70 71 ff ff       	call   c00153ec <Krnl::panic(char const*)>
c001e27c:	83 c4 10             	add    esp,0x10
c001e27f:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001e283:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e28a:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001e28e:	7f 65                	jg     c001e2f5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x15d>
c001e290:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e293:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e296:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e29d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e2a0:	01 ca                	add    edx,ecx
c001e2a2:	83 c2 54             	add    edx,0x54
c001e2a5:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001e2a9:	85 c0                	test   eax,eax
c001e2ab:	75 43                	jne    c001e2f0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x158>
c001e2ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e2b0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e2b3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e2ba:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e2bd:	01 ca                	add    edx,ecx
c001e2bf:	8d 4a 54             	lea    ecx,[edx+0x54]
c001e2c2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001e2c5:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e2c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e2cc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e2cf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e2d6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e2d9:	01 ca                	add    edx,ecx
c001e2db:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001e2e1:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e2e4:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e2e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e2eb:	83 e8 20             	sub    eax,0x20
c001e2ee:	eb 1a                	jmp    c001e30a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x172>
c001e2f0:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001e2f3:	eb 95                	jmp    c001e28a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf2>
c001e2f5:	83 ec 0c             	sub    esp,0xc
c001e2f8:	68 98 33 02 c0       	push   0xc0023398
c001e2fd:	e8 ea 70 ff ff       	call   c00153ec <Krnl::panic(char const*)>
c001e302:	83 c4 10             	add    esp,0x10
c001e305:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001e30a:	8d 65 f8             	lea    esp,[ebp-0x8]
c001e30d:	5b                   	pop    ebx
c001e30e:	5e                   	pop    esi
c001e30f:	5d                   	pop    ebp
c001e310:	c3                   	ret    
c001e311:	90                   	nop

c001e312 <PIC::disable()>:
c001e312:	55                   	push   ebp
c001e313:	89 e5                	mov    ebp,esp
c001e315:	83 ec 10             	sub    esp,0x10
c001e318:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001e31e:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001e322:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e325:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e329:	ee                   	out    dx,al
c001e32a:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001e330:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001e334:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e337:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001e33b:	ee                   	out    dx,al
c001e33c:	90                   	nop
c001e33d:	c9                   	leave  
c001e33e:	c3                   	ret    
c001e33f:	90                   	nop

c001e340 <PIC::close(int, int, void*)>:
c001e340:	55                   	push   ebp
c001e341:	89 e5                	mov    ebp,esp
c001e343:	83 ec 08             	sub    esp,0x8
c001e346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e349:	8b 00                	mov    eax,DWORD PTR [eax]
c001e34b:	83 c0 3c             	add    eax,0x3c
c001e34e:	8b 00                	mov    eax,DWORD PTR [eax]
c001e350:	83 ec 0c             	sub    esp,0xc
c001e353:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e356:	ff d0                	call   eax
c001e358:	83 c4 10             	add    esp,0x10
c001e35b:	b8 00 00 00 00       	mov    eax,0x0
c001e360:	c9                   	leave  
c001e361:	c3                   	ret    

c001e362 <PIC::PIC()>:
c001e362:	83 ec 0c             	sub    esp,0xc
c001e365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e369:	83 ec 08             	sub    esp,0x8
c001e36c:	68 44 34 02 c0       	push   0xc0023444
c001e371:	50                   	push   eax
c001e372:	e8 33 2b ff ff       	call   c0010eaa <InterruptController::InterruptController(char const*)>
c001e377:	83 c4 10             	add    esp,0x10
c001e37a:	ba 70 34 02 c0       	mov    edx,0xc0023470
c001e37f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e383:	89 10                	mov    DWORD PTR [eax],edx
c001e385:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e389:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e38f:	31 d2                	xor    edx,edx
c001e391:	88 c2                	mov    dl,al
c001e393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e397:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001e39e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3a2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e3a8:	31 d2                	xor    edx,edx
c001e3aa:	88 c2                	mov    dl,al
c001e3ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3b0:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001e3b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e3bf:	8d 50 01             	lea    edx,[eax+0x1]
c001e3c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e3c6:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e3cc:	31 d2                	xor    edx,edx
c001e3ce:	88 c2                	mov    dl,al
c001e3d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3d4:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e3d8:	83 e1 3f             	and    ecx,0x3f
c001e3db:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e3df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3e3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e3e9:	31 d2                	xor    edx,edx
c001e3eb:	88 c2                	mov    dl,al
c001e3ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3f1:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001e3f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3fc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e402:	31 d2                	xor    edx,edx
c001e404:	88 c2                	mov    dl,al
c001e406:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e40a:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001e40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e413:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e419:	8d 50 01             	lea    edx,[eax+0x1]
c001e41c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e420:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001e426:	31 d2                	xor    edx,edx
c001e428:	88 c2                	mov    dl,al
c001e42a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e42e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001e432:	83 e1 3f             	and    ecx,0x3f
c001e435:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001e439:	90                   	nop
c001e43a:	83 c4 0c             	add    esp,0xc
c001e43d:	c3                   	ret    

c001e43e <PIC::ioWait()>:
c001e43e:	eb 00                	jmp    c001e440 <PIC::ioWait()+0x2>
c001e440:	eb 00                	jmp    c001e442 <PIC::ioWait()+0x4>
c001e442:	90                   	nop
c001e443:	c3                   	ret    

c001e444 <PIC::getIRQReg(int)>:
c001e444:	55                   	push   ebp
c001e445:	89 e5                	mov    ebp,esp
c001e447:	83 ec 10             	sub    esp,0x10
c001e44a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e44d:	25 ff 00 00 00       	and    eax,0xff
c001e452:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001e458:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001e45b:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001e45e:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001e462:	ee                   	out    dx,al
c001e463:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e466:	25 ff 00 00 00       	and    eax,0xff
c001e46b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001e471:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001e474:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001e477:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001e47b:	ee                   	out    dx,al
c001e47c:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001e482:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001e486:	89 c2                	mov    edx,eax
c001e488:	ec                   	in     al,dx
c001e489:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001e48c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e48f:	25 ff 00 00 00       	and    eax,0xff
c001e494:	c1 e0 08             	shl    eax,0x8
c001e497:	89 c1                	mov    ecx,eax
c001e499:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001e49f:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001e4a3:	89 c2                	mov    edx,eax
c001e4a5:	ec                   	in     al,dx
c001e4a6:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001e4a9:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e4ac:	25 ff 00 00 00       	and    eax,0xff
c001e4b1:	09 c8                	or     eax,ecx
c001e4b3:	c9                   	leave  
c001e4b4:	c3                   	ret    
c001e4b5:	90                   	nop

c001e4b6 <PIC::eoi(unsigned char)>:
c001e4b6:	55                   	push   ebp
c001e4b7:	89 e5                	mov    ebp,esp
c001e4b9:	83 ec 14             	sub    esp,0x14
c001e4bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e4bf:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e4c2:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001e4c6:	75 23                	jne    c001e4eb <PIC::eoi(unsigned char)+0x35>
c001e4c8:	6a 0b                	push   0xb
c001e4ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e4cd:	e8 72 ff ff ff       	call   c001e444 <PIC::getIRQReg(int)>
c001e4d2:	83 c4 08             	add    esp,0x8
c001e4d5:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001e4d9:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001e4dd:	25 ff ff 00 00       	and    eax,0xffff
c001e4e2:	25 80 00 00 00       	and    eax,0x80
c001e4e7:	85 c0                	test   eax,eax
c001e4e9:	74 5f                	je     c001e54a <PIC::eoi(unsigned char)+0x94>
c001e4eb:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001e4ef:	75 2d                	jne    c001e51e <PIC::eoi(unsigned char)+0x68>
c001e4f1:	6a 0b                	push   0xb
c001e4f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e4f6:	e8 49 ff ff ff       	call   c001e444 <PIC::getIRQReg(int)>
c001e4fb:	83 c4 08             	add    esp,0x8
c001e4fe:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001e502:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e505:	66 85 c0             	test   ax,ax
c001e508:	78 14                	js     c001e51e <PIC::eoi(unsigned char)+0x68>
c001e50a:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001e510:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001e514:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e517:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e51b:	ee                   	out    dx,al
c001e51c:	eb 2d                	jmp    c001e54b <PIC::eoi(unsigned char)+0x95>
c001e51e:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001e522:	76 12                	jbe    c001e536 <PIC::eoi(unsigned char)+0x80>
c001e524:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001e52a:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001e52e:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001e531:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001e535:	ee                   	out    dx,al
c001e536:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001e53c:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001e540:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001e543:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001e547:	ee                   	out    dx,al
c001e548:	eb 01                	jmp    c001e54b <PIC::eoi(unsigned char)+0x95>
c001e54a:	90                   	nop
c001e54b:	c9                   	leave  
c001e54c:	c3                   	ret    
c001e54d:	90                   	nop

c001e54e <PIC::remap()>:
c001e54e:	55                   	push   ebp
c001e54f:	89 e5                	mov    ebp,esp
c001e551:	83 ec 48             	sub    esp,0x48
c001e554:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001e55b:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001e562:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001e568:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001e56b:	89 c2                	mov    edx,eax
c001e56d:	ec                   	in     al,dx
c001e56e:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001e571:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001e574:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001e577:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001e57d:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001e580:	89 c2                	mov    edx,eax
c001e582:	ec                   	in     al,dx
c001e583:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001e586:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001e589:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001e58c:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001e592:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001e596:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001e599:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001e59c:	ee                   	out    dx,al
c001e59d:	83 ec 0c             	sub    esp,0xc
c001e5a0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e5a3:	e8 96 fe ff ff       	call   c001e43e <PIC::ioWait()>
c001e5a8:	83 c4 10             	add    esp,0x10
c001e5ab:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001e5b1:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001e5b5:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001e5b8:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001e5bb:	ee                   	out    dx,al
c001e5bc:	83 ec 0c             	sub    esp,0xc
c001e5bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e5c2:	e8 77 fe ff ff       	call   c001e43e <PIC::ioWait()>
c001e5c7:	83 c4 10             	add    esp,0x10
c001e5ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001e5cd:	25 ff 00 00 00       	and    eax,0xff
c001e5d2:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001e5d8:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001e5db:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001e5de:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001e5e1:	ee                   	out    dx,al
c001e5e2:	83 ec 0c             	sub    esp,0xc
c001e5e5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e5e8:	e8 51 fe ff ff       	call   c001e43e <PIC::ioWait()>
c001e5ed:	83 c4 10             	add    esp,0x10
c001e5f0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e5f3:	25 ff 00 00 00       	and    eax,0xff
c001e5f8:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001e5fe:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001e601:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001e604:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e607:	ee                   	out    dx,al
c001e608:	83 ec 0c             	sub    esp,0xc
c001e60b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e60e:	e8 2b fe ff ff       	call   c001e43e <PIC::ioWait()>
c001e613:	83 c4 10             	add    esp,0x10
c001e616:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001e61c:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001e620:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001e623:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001e626:	ee                   	out    dx,al
c001e627:	83 ec 0c             	sub    esp,0xc
c001e62a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e62d:	e8 0c fe ff ff       	call   c001e43e <PIC::ioWait()>
c001e632:	83 c4 10             	add    esp,0x10
c001e635:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001e63b:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001e63f:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001e642:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001e645:	ee                   	out    dx,al
c001e646:	83 ec 0c             	sub    esp,0xc
c001e649:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e64c:	e8 ed fd ff ff       	call   c001e43e <PIC::ioWait()>
c001e651:	83 c4 10             	add    esp,0x10
c001e654:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001e65a:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001e65e:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001e661:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001e664:	ee                   	out    dx,al
c001e665:	83 ec 0c             	sub    esp,0xc
c001e668:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e66b:	e8 ce fd ff ff       	call   c001e43e <PIC::ioWait()>
c001e670:	83 c4 10             	add    esp,0x10
c001e673:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001e679:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001e67d:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001e680:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e683:	ee                   	out    dx,al
c001e684:	83 ec 0c             	sub    esp,0xc
c001e687:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e68a:	e8 af fd ff ff       	call   c001e43e <PIC::ioWait()>
c001e68f:	83 c4 10             	add    esp,0x10
c001e692:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
c001e695:	25 ff 00 00 00       	and    eax,0xff
c001e69a:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001e6a0:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001e6a3:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001e6a6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e6a9:	ee                   	out    dx,al
c001e6aa:	8a 45 ee             	mov    al,BYTE PTR [ebp-0x12]
c001e6ad:	25 ff 00 00 00       	and    eax,0xff
c001e6b2:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001e6b8:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001e6bb:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001e6be:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e6c1:	ee                   	out    dx,al
c001e6c2:	90                   	nop
c001e6c3:	c9                   	leave  
c001e6c4:	c3                   	ret    
c001e6c5:	90                   	nop

c001e6c6 <PIC::open(int, int, void*)>:
c001e6c6:	55                   	push   ebp
c001e6c7:	89 e5                	mov    ebp,esp
c001e6c9:	83 ec 18             	sub    esp,0x18
c001e6cc:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001e6d2:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001e6d6:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001e6d9:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001e6dd:	ee                   	out    dx,al
c001e6de:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001e6e4:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001e6e8:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001e6eb:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001e6ef:	ee                   	out    dx,al
c001e6f0:	83 ec 0c             	sub    esp,0xc
c001e6f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6f6:	e8 53 fe ff ff       	call   c001e54e <PIC::remap()>
c001e6fb:	83 c4 10             	add    esp,0x10
c001e6fe:	b8 00 00 00 00       	mov    eax,0x0
c001e703:	c9                   	leave  
c001e704:	c3                   	ret    
c001e705:	90                   	nop

c001e706 <APICTimer::close(int, int, void*)>:
c001e706:	b8 00 00 00 00       	mov    eax,0x0
c001e70b:	c3                   	ret    

c001e70c <apicTimerHandler(regs*, void*)>:
c001e70c:	83 ec 0c             	sub    esp,0xc
c001e70f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e713:	8b 00                	mov    eax,DWORD PTR [eax]
c001e715:	89 c2                	mov    edx,eax
c001e717:	c1 fa 1f             	sar    edx,0x1f
c001e71a:	52                   	push   edx
c001e71b:	50                   	push   eax
c001e71c:	6a 00                	push   0x0
c001e71e:	68 00 ca 9a 3b       	push   0x3b9aca00
c001e723:	e8 84 07 00 00       	call   c001eeac <__udivdi3>
c001e728:	83 c4 10             	add    esp,0x10
c001e72b:	83 ec 08             	sub    esp,0x8
c001e72e:	52                   	push   edx
c001e72f:	50                   	push   eax
c001e730:	e8 08 40 ff ff       	call   c001273d <timerHandler(unsigned long long)>
c001e735:	83 c4 10             	add    esp,0x10
c001e738:	90                   	nop
c001e739:	83 c4 0c             	add    esp,0xc
c001e73c:	c3                   	ret    
c001e73d:	90                   	nop

c001e73e <APICTimer::write(int)>:
c001e73e:	53                   	push   ebx
c001e73f:	83 ec 28             	sub    esp,0x28
c001e742:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e746:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001e74a:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e750:	e8 2b 5b ff ff       	call   c0014280 <thisCPU()>
c001e755:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001e75b:	83 ec 0c             	sub    esp,0xc
c001e75e:	50                   	push   eax
c001e75f:	e8 a2 f5 ff ff       	call   c001dd06 <APIC::getBase()>
c001e764:	83 c4 10             	add    esp,0x10
c001e767:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e76b:	a1 90 47 02 c0       	mov    eax,ds:0xc0024790
c001e770:	8b 15 94 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024794
c001e776:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e77a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001e77e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e782:	05 e0 03 00 00       	add    eax,0x3e0
c001e787:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001e78d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e791:	05 80 03 00 00       	add    eax,0x380
c001e796:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001e79c:	fb                   	sti    
c001e79d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e7a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e7a5:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001e7aa:	83 d2 00             	adc    edx,0x0
c001e7ad:	89 c1                	mov    ecx,eax
c001e7af:	89 d3                	mov    ebx,edx
c001e7b1:	a1 90 47 02 c0       	mov    eax,ds:0xc0024790
c001e7b6:	8b 15 94 47 02 c0    	mov    edx,DWORD PTR ds:0xc0024794
c001e7bc:	39 c8                	cmp    eax,ecx
c001e7be:	89 d0                	mov    eax,edx
c001e7c0:	19 d8                	sbb    eax,ebx
c001e7c2:	73 02                	jae    c001e7c6 <APICTimer::write(int)+0x88>
c001e7c4:	eb d7                	jmp    c001e79d <APICTimer::write(int)+0x5f>
c001e7c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e7ca:	05 20 03 00 00       	add    eax,0x320
c001e7cf:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001e7d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e7d9:	05 90 03 00 00       	add    eax,0x390
c001e7de:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7e0:	f7 d0                	not    eax
c001e7e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e7e6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e7ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e7ee:	ba 00 00 00 00       	mov    edx,0x0
c001e7f3:	f7 f3                	div    ebx
c001e7f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e7f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e7fd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e803:	0d 00 00 02 00       	or     eax,0x20000
c001e808:	89 c2                	mov    edx,eax
c001e80a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e80e:	05 20 03 00 00       	add    eax,0x320
c001e813:	89 10                	mov    DWORD PTR [eax],edx
c001e815:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e819:	05 e0 03 00 00       	add    eax,0x3e0
c001e81e:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001e824:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e828:	05 80 03 00 00       	add    eax,0x380
c001e82d:	89 c2                	mov    edx,eax
c001e82f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e833:	89 02                	mov    DWORD PTR [edx],eax
c001e835:	90                   	nop
c001e836:	83 c4 28             	add    esp,0x28
c001e839:	5b                   	pop    ebx
c001e83a:	c3                   	ret    
c001e83b:	90                   	nop

c001e83c <APICTimer::open(int, int, void*)>:
c001e83c:	57                   	push   edi
c001e83d:	56                   	push   esi
c001e83e:	53                   	push   ebx
c001e83f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e843:	8b 00                	mov    eax,DWORD PTR [eax]
c001e845:	83 c0 24             	add    eax,0x24
c001e848:	8b 00                	mov    eax,DWORD PTR [eax]
c001e84a:	83 ec 08             	sub    esp,0x8
c001e84d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e851:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e855:	ff d0                	call   eax
c001e857:	83 c4 10             	add    esp,0x10
c001e85a:	e8 21 5a ff ff       	call   c0014280 <thisCPU()>
c001e85f:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001e865:	83 ec 0c             	sub    esp,0xc
c001e868:	50                   	push   eax
c001e869:	e8 98 f4 ff ff       	call   c001dd06 <APIC::getBase()>
c001e86e:	83 c4 10             	add    esp,0x10
c001e871:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001e877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e87b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e881:	89 c7                	mov    edi,eax
c001e883:	81 e7 ff 00 00 00    	and    edi,0xff
c001e889:	89 d0                	mov    eax,edx
c001e88b:	ba 00 00 00 00       	mov    edx,0x0
c001e890:	89 c1                	mov    ecx,eax
c001e892:	80 e5 ff             	and    ch,0xff
c001e895:	89 cb                	mov    ebx,ecx
c001e897:	89 d0                	mov    eax,edx
c001e899:	25 ff 00 00 00       	and    eax,0xff
c001e89e:	89 c6                	mov    esi,eax
c001e8a0:	89 d8                	mov    eax,ebx
c001e8a2:	89 f2                	mov    edx,esi
c001e8a4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e8a8:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e8ab:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e8af:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e8b3:	83 e0 00             	and    eax,0x0
c001e8b6:	09 d0                	or     eax,edx
c001e8b8:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e8bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8c0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e8c6:	8d 50 01             	lea    edx,[eax+0x1]
c001e8c9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e8cd:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e8d3:	31 d2                	xor    edx,edx
c001e8d5:	88 c2                	mov    dl,al
c001e8d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8db:	83 c2 08             	add    edx,0x8
c001e8de:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e8e2:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e8e8:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e8ee:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8f6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e8fa:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e904:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e908:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e90e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e912:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e918:	83 ec 0c             	sub    esp,0xc
c001e91b:	51                   	push   ecx
c001e91c:	6a 01                	push   0x1
c001e91e:	68 0c e7 01 c0       	push   0xc001e70c
c001e923:	52                   	push   edx
c001e924:	50                   	push   eax
c001e925:	e8 98 1b ff ff       	call   c00104c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e92a:	83 c4 20             	add    esp,0x20
c001e92d:	89 c2                	mov    edx,eax
c001e92f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e933:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e939:	b8 00 00 00 00       	mov    eax,0x0
c001e93e:	5b                   	pop    ebx
c001e93f:	5e                   	pop    esi
c001e940:	5f                   	pop    edi
c001e941:	c3                   	ret    

c001e942 <APICTimer::APICTimer()>:
c001e942:	83 ec 0c             	sub    esp,0xc
c001e945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e949:	83 ec 08             	sub    esp,0x8
c001e94c:	68 b0 34 02 c0       	push   0xc00234b0
c001e951:	50                   	push   eax
c001e952:	e8 57 3d ff ff       	call   c00126ae <Timer::Timer(char const*)>
c001e957:	83 c4 10             	add    esp,0x10
c001e95a:	ba c4 34 02 c0       	mov    edx,0xc00234c4
c001e95f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e963:	89 10                	mov    DWORD PTR [eax],edx
c001e965:	90                   	nop
c001e966:	83 c4 0c             	add    esp,0xc
c001e969:	c3                   	ret    

c001e96a <PIT::write(int)>:
c001e96a:	83 ec 10             	sub    esp,0x10
c001e96d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e971:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e975:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e97b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e97f:	a3 24 5f 02 c0       	mov    ds:0xc0025f24,eax
c001e984:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e989:	89 c2                	mov    edx,eax
c001e98b:	c1 fa 1f             	sar    edx,0x1f
c001e98e:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e992:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e996:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e99d:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e9a2:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e9a6:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e9ab:	ee                   	out    dx,al
c001e9ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9b0:	25 ff 00 00 00       	and    eax,0xff
c001e9b5:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e9bc:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e9c0:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e9c4:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e9c9:	ee                   	out    dx,al
c001e9ca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e9ce:	c1 f8 08             	sar    eax,0x8
c001e9d1:	25 ff 00 00 00       	and    eax,0xff
c001e9d6:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e9dd:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e9e1:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e9e5:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e9ea:	ee                   	out    dx,al
c001e9eb:	90                   	nop
c001e9ec:	83 c4 10             	add    esp,0x10
c001e9ef:	c3                   	ret    

c001e9f0 <pitHandler(regs*, void*)>:
c001e9f0:	83 ec 0c             	sub    esp,0xc
c001e9f3:	a1 24 5f 02 c0       	mov    eax,ds:0xc0025f24
c001e9f8:	89 c2                	mov    edx,eax
c001e9fa:	c1 fa 1f             	sar    edx,0x1f
c001e9fd:	52                   	push   edx
c001e9fe:	50                   	push   eax
c001e9ff:	6a 00                	push   0x0
c001ea01:	68 00 ca 9a 3b       	push   0x3b9aca00
c001ea06:	e8 a1 04 00 00       	call   c001eeac <__udivdi3>
c001ea0b:	83 c4 10             	add    esp,0x10
c001ea0e:	83 ec 08             	sub    esp,0x8
c001ea11:	52                   	push   edx
c001ea12:	50                   	push   eax
c001ea13:	e8 25 3d ff ff       	call   c001273d <timerHandler(unsigned long long)>
c001ea18:	83 c4 10             	add    esp,0x10
c001ea1b:	90                   	nop
c001ea1c:	83 c4 0c             	add    esp,0xc
c001ea1f:	c3                   	ret    

c001ea20 <PIT::open(int, int, void*)>:
c001ea20:	83 ec 0c             	sub    esp,0xc
c001ea23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea27:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea29:	83 c0 24             	add    eax,0x24
c001ea2c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ea2e:	83 ec 08             	sub    esp,0x8
c001ea31:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea39:	ff d0                	call   eax
c001ea3b:	83 c4 10             	add    esp,0x10
c001ea3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea42:	83 ec 0c             	sub    esp,0xc
c001ea45:	6a 00                	push   0x0
c001ea47:	6a 01                	push   0x1
c001ea49:	68 f0 e9 01 c0       	push   0xc001e9f0
c001ea4e:	6a 00                	push   0x0
c001ea50:	50                   	push   eax
c001ea51:	e8 6c 1a ff ff       	call   c00104c2 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ea56:	83 c4 20             	add    esp,0x20
c001ea59:	89 c2                	mov    edx,eax
c001ea5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea5f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ea65:	b8 00 00 00 00       	mov    eax,0x0
c001ea6a:	83 c4 0c             	add    esp,0xc
c001ea6d:	c3                   	ret    

c001ea6e <PIT::close(int, int, void*)>:
c001ea6e:	83 ec 0c             	sub    esp,0xc
c001ea71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea75:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001ea7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea83:	6a 01                	push   0x1
c001ea85:	68 f0 e9 01 c0       	push   0xc001e9f0
c001ea8a:	6a 00                	push   0x0
c001ea8c:	50                   	push   eax
c001ea8d:	e8 8e 1a ff ff       	call   c0010520 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ea92:	83 c4 10             	add    esp,0x10
c001ea95:	b8 00 00 00 00       	mov    eax,0x0
c001ea9a:	83 c4 0c             	add    esp,0xc
c001ea9d:	c3                   	ret    

c001ea9e <PIT::PIT()>:
c001ea9e:	83 ec 0c             	sub    esp,0xc
c001eaa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaa5:	83 ec 08             	sub    esp,0x8
c001eaa8:	68 ec 34 02 c0       	push   0xc00234ec
c001eaad:	50                   	push   eax
c001eaae:	e8 fb 3b ff ff       	call   c00126ae <Timer::Timer(char const*)>
c001eab3:	83 c4 10             	add    esp,0x10
c001eab6:	ba 14 35 02 c0       	mov    edx,0xc0023514
c001eabb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eabf:	89 10                	mov    DWORD PTR [eax],edx
c001eac1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eac5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eacb:	31 d2                	xor    edx,edx
c001eacd:	88 c2                	mov    dl,al
c001eacf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ead3:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001eada:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eade:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eae4:	31 d2                	xor    edx,edx
c001eae6:	88 c2                	mov    dl,al
c001eae8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaec:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001eaf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eaf5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001eafb:	8d 50 01             	lea    edx,[eax+0x1]
c001eafe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eb02:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001eb08:	31 d2                	xor    edx,edx
c001eb0a:	88 c2                	mov    dl,al
c001eb0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb10:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001eb14:	83 e1 3f             	and    ecx,0x3f
c001eb17:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001eb1b:	90                   	nop
c001eb1c:	83 c4 0c             	add    esp,0xc
c001eb1f:	c3                   	ret    

c001eb20 <avxDetect>:
c001eb20:	b8 00 00 00 00       	mov    eax,0x0
c001eb25:	c3                   	ret    

c001eb26 <avxSave>:
c001eb26:	c3                   	ret    

c001eb27 <avxLoad>:
c001eb27:	c3                   	ret    

c001eb28 <avxInit>:
c001eb28:	c3                   	ret    

c001eb29 <avxClose>:
c001eb29:	c3                   	ret    
c001eb2a:	66 90                	xchg   ax,ax
c001eb2c:	66 90                	xchg   ax,ax
c001eb2e:	66 90                	xchg   ax,ax

c001eb30 <sseDetect>:
c001eb30:	b8 01 00 00 00       	mov    eax,0x1
c001eb35:	0f a2                	cpuid  
c001eb37:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001eb3d:	74 06                	je     c001eb45 <sseDetect.noSSE>
c001eb3f:	b8 01 00 00 00       	mov    eax,0x1
c001eb44:	c3                   	ret    

c001eb45 <sseDetect.noSSE>:
c001eb45:	b8 00 00 00 00       	mov    eax,0x0
c001eb4a:	c3                   	ret    

c001eb4b <sseSave>:
c001eb4b:	0f ae 44 24 08       	fxsave [esp+0x8]
c001eb50:	c3                   	ret    

c001eb51 <sseLoad>:
c001eb51:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001eb56:	c3                   	ret    

c001eb57 <sseInit>:
c001eb57:	e8 40 00 00 00       	call   c001eb9c <x87Init>
c001eb5c:	0f 20 e0             	mov    eax,cr4
c001eb5f:	66 0d 00 06          	or     ax,0x600
c001eb63:	0f 22 e0             	mov    cr4,eax
c001eb66:	c3                   	ret    

c001eb67 <sseClose>:
c001eb67:	c3                   	ret    
c001eb68:	66 90                	xchg   ax,ax
c001eb6a:	66 90                	xchg   ax,ax
c001eb6c:	66 90                	xchg   ax,ax
c001eb6e:	66 90                	xchg   ax,ax

c001eb70 <value_37F>:
c001eb70:	7f 03                	jg     c001eb75 <value_37A+0x1>

c001eb72 <value_37E>:
c001eb72:	7e 03                	jle    c001eb77 <x87Detect+0x1>

c001eb74 <value_37A>:
c001eb74:	7a 03                	jp     c001eb79 <x87Detect+0x3>

c001eb76 <x87Detect>:
c001eb76:	b8 01 00 00 00       	mov    eax,0x1
c001eb7b:	0f a2                	cpuid  
c001eb7d:	f7 c2 01 00 00 00    	test   edx,0x1
c001eb83:	74 06                	je     c001eb8b <x87Detect.nox87>
c001eb85:	b8 01 00 00 00       	mov    eax,0x1
c001eb8a:	c3                   	ret    

c001eb8b <x87Detect.nox87>:
c001eb8b:	b8 00 00 00 00       	mov    eax,0x0
c001eb90:	c3                   	ret    

c001eb91 <x87Save>:
c001eb91:	9b dd 74 24 08       	fsave  [esp+0x8]
c001eb96:	c3                   	ret    

c001eb97 <x87Load>:
c001eb97:	dd 64 24 08          	frstor [esp+0x8]
c001eb9b:	c3                   	ret    

c001eb9c <x87Init>:
c001eb9c:	9b db e3             	finit  
c001eb9f:	0f 20 c0             	mov    eax,cr0
c001eba2:	66 25 fb ff          	and    ax,0xfffb
c001eba6:	66 0d 22 00          	or     ax,0x22
c001ebaa:	0f 22 c0             	mov    cr0,eax
c001ebad:	0f 06                	clts   
c001ebaf:	d9 2d 74 eb 01 c0    	fldcw  WORD PTR ds:0xc001eb74
c001ebb5:	c3                   	ret    

c001ebb6 <x87Close>:
c001ebb6:	c3                   	ret    
c001ebb7:	90                   	nop

c001ebb8 <__do_global_ctors_aux>:
c001ebb8:	a1 98 fc 01 c0       	mov    eax,ds:0xc001fc98
c001ebbd:	83 f8 ff             	cmp    eax,0xffffffff
c001ebc0:	74 1a                	je     c001ebdc <__do_global_ctors_aux+0x24>
c001ebc2:	55                   	push   ebp
c001ebc3:	89 e5                	mov    ebp,esp
c001ebc5:	53                   	push   ebx
c001ebc6:	52                   	push   edx
c001ebc7:	bb 98 fc 01 c0       	mov    ebx,0xc001fc98
c001ebcc:	ff d0                	call   eax
c001ebce:	83 eb 04             	sub    ebx,0x4
c001ebd1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ebd3:	83 f8 ff             	cmp    eax,0xffffffff
c001ebd6:	75 f4                	jne    c001ebcc <__do_global_ctors_aux+0x14>
c001ebd8:	58                   	pop    eax
c001ebd9:	5b                   	pop    ebx
c001ebda:	5d                   	pop    ebp
c001ebdb:	c3                   	ret    
c001ebdc:	c3                   	ret    
c001ebdd:	66 90                	xchg   ax,ax
c001ebdf:	90                   	nop

c001ebe0 <__divdi3>:
c001ebe0:	55                   	push   ebp
c001ebe1:	57                   	push   edi
c001ebe2:	56                   	push   esi
c001ebe3:	53                   	push   ebx
c001ebe4:	83 ec 1c             	sub    esp,0x1c
c001ebe7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001ebeb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ebef:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ebf2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ebf6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ebfa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ebfe:	85 db                	test   ebx,ebx
c001ec00:	0f 88 8e 00 00 00    	js     c001ec94 <__divdi3+0xb4>
c001ec06:	89 dd                	mov    ebp,ebx
c001ec08:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ec10:	89 d3                	mov    ebx,edx
c001ec12:	85 d2                	test   edx,edx
c001ec14:	79 0d                	jns    c001ec23 <__divdi3+0x43>
c001ec16:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001ec1a:	f7 d8                	neg    eax
c001ec1c:	83 d2 00             	adc    edx,0x0
c001ec1f:	f7 da                	neg    edx
c001ec21:	89 d3                	mov    ebx,edx
c001ec23:	89 c7                	mov    edi,eax
c001ec25:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ec28:	85 db                	test   ebx,ebx
c001ec2a:	75 48                	jne    c001ec74 <__divdi3+0x94>
c001ec2c:	39 ef                	cmp    edi,ebp
c001ec2e:	76 24                	jbe    c001ec54 <__divdi3+0x74>
c001ec30:	89 ea                	mov    edx,ebp
c001ec32:	f7 f7                	div    edi
c001ec34:	89 c1                	mov    ecx,eax
c001ec36:	31 f6                	xor    esi,esi
c001ec38:	89 c8                	mov    eax,ecx
c001ec3a:	89 f2                	mov    edx,esi
c001ec3c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ec40:	85 c9                	test   ecx,ecx
c001ec42:	74 07                	je     c001ec4b <__divdi3+0x6b>
c001ec44:	f7 d8                	neg    eax
c001ec46:	83 d2 00             	adc    edx,0x0
c001ec49:	f7 da                	neg    edx
c001ec4b:	83 c4 1c             	add    esp,0x1c
c001ec4e:	5b                   	pop    ebx
c001ec4f:	5e                   	pop    esi
c001ec50:	5f                   	pop    edi
c001ec51:	5d                   	pop    ebp
c001ec52:	c3                   	ret    
c001ec53:	90                   	nop
c001ec54:	85 ff                	test   edi,edi
c001ec56:	75 0b                	jne    c001ec63 <__divdi3+0x83>
c001ec58:	b8 01 00 00 00       	mov    eax,0x1
c001ec5d:	31 d2                	xor    edx,edx
c001ec5f:	f7 f3                	div    ebx
c001ec61:	89 c7                	mov    edi,eax
c001ec63:	31 d2                	xor    edx,edx
c001ec65:	89 e8                	mov    eax,ebp
c001ec67:	f7 f7                	div    edi
c001ec69:	89 c6                	mov    esi,eax
c001ec6b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ec6e:	f7 f7                	div    edi
c001ec70:	89 c1                	mov    ecx,eax
c001ec72:	eb c4                	jmp    c001ec38 <__divdi3+0x58>
c001ec74:	39 eb                	cmp    ebx,ebp
c001ec76:	77 3c                	ja     c001ecb4 <__divdi3+0xd4>
c001ec78:	0f bd f3             	bsr    esi,ebx
c001ec7b:	83 f6 1f             	xor    esi,0x1f
c001ec7e:	75 40                	jne    c001ecc0 <__divdi3+0xe0>
c001ec80:	39 eb                	cmp    ebx,ebp
c001ec82:	72 09                	jb     c001ec8d <__divdi3+0xad>
c001ec84:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001ec87:	0f 87 97 00 00 00    	ja     c001ed24 <__divdi3+0x144>
c001ec8d:	b9 01 00 00 00       	mov    ecx,0x1
c001ec92:	eb a4                	jmp    c001ec38 <__divdi3+0x58>
c001ec94:	f7 d9                	neg    ecx
c001ec96:	83 d3 00             	adc    ebx,0x0
c001ec99:	f7 db                	neg    ebx
c001ec9b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ec9e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001eca2:	89 dd                	mov    ebp,ebx
c001eca4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001ecac:	e9 5f ff ff ff       	jmp    c001ec10 <__divdi3+0x30>
c001ecb1:	8d 76 00             	lea    esi,[esi+0x0]
c001ecb4:	31 f6                	xor    esi,esi
c001ecb6:	31 c9                	xor    ecx,ecx
c001ecb8:	e9 7b ff ff ff       	jmp    c001ec38 <__divdi3+0x58>
c001ecbd:	8d 76 00             	lea    esi,[esi+0x0]
c001ecc0:	b8 20 00 00 00       	mov    eax,0x20
c001ecc5:	29 f0                	sub    eax,esi
c001ecc7:	89 f1                	mov    ecx,esi
c001ecc9:	d3 e3                	shl    ebx,cl
c001eccb:	89 fa                	mov    edx,edi
c001eccd:	88 c1                	mov    cl,al
c001eccf:	d3 ea                	shr    edx,cl
c001ecd1:	09 da                	or     edx,ebx
c001ecd3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ecd7:	89 f1                	mov    ecx,esi
c001ecd9:	d3 e7                	shl    edi,cl
c001ecdb:	89 eb                	mov    ebx,ebp
c001ecdd:	88 c1                	mov    cl,al
c001ecdf:	d3 eb                	shr    ebx,cl
c001ece1:	89 f1                	mov    ecx,esi
c001ece3:	d3 e5                	shl    ebp,cl
c001ece5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001ece8:	88 c1                	mov    cl,al
c001ecea:	d3 ea                	shr    edx,cl
c001ecec:	09 d5                	or     ebp,edx
c001ecee:	89 e8                	mov    eax,ebp
c001ecf0:	89 da                	mov    edx,ebx
c001ecf2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001ecf6:	89 d3                	mov    ebx,edx
c001ecf8:	89 c5                	mov    ebp,eax
c001ecfa:	f7 e7                	mul    edi
c001ecfc:	39 d3                	cmp    ebx,edx
c001ecfe:	72 18                	jb     c001ed18 <__divdi3+0x138>
c001ed00:	74 0a                	je     c001ed0c <__divdi3+0x12c>
c001ed02:	89 e9                	mov    ecx,ebp
c001ed04:	31 f6                	xor    esi,esi
c001ed06:	e9 2d ff ff ff       	jmp    c001ec38 <__divdi3+0x58>
c001ed0b:	90                   	nop
c001ed0c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001ed0f:	89 f1                	mov    ecx,esi
c001ed11:	d3 e7                	shl    edi,cl
c001ed13:	39 c7                	cmp    edi,eax
c001ed15:	73 eb                	jae    c001ed02 <__divdi3+0x122>
c001ed17:	90                   	nop
c001ed18:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001ed1b:	31 f6                	xor    esi,esi
c001ed1d:	e9 16 ff ff ff       	jmp    c001ec38 <__divdi3+0x58>
c001ed22:	66 90                	xchg   ax,ax
c001ed24:	31 c9                	xor    ecx,ecx
c001ed26:	e9 0d ff ff ff       	jmp    c001ec38 <__divdi3+0x58>
c001ed2b:	90                   	nop

c001ed2c <__moddi3>:
c001ed2c:	55                   	push   ebp
c001ed2d:	57                   	push   edi
c001ed2e:	56                   	push   esi
c001ed2f:	53                   	push   ebx
c001ed30:	83 ec 2c             	sub    esp,0x2c
c001ed33:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ed37:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001ed3b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ed3f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001ed43:	85 db                	test   ebx,ebx
c001ed45:	0f 88 85 00 00 00    	js     c001edd0 <__moddi3+0xa4>
c001ed4b:	89 de                	mov    esi,ebx
c001ed4d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ed55:	89 d7                	mov    edi,edx
c001ed57:	85 d2                	test   edx,edx
c001ed59:	79 09                	jns    c001ed64 <__moddi3+0x38>
c001ed5b:	f7 d8                	neg    eax
c001ed5d:	83 d2 00             	adc    edx,0x0
c001ed60:	f7 da                	neg    edx
c001ed62:	89 d7                	mov    edi,edx
c001ed64:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ed68:	89 cd                	mov    ebp,ecx
c001ed6a:	85 ff                	test   edi,edi
c001ed6c:	75 52                	jne    c001edc0 <__moddi3+0x94>
c001ed6e:	89 c3                	mov    ebx,eax
c001ed70:	39 f0                	cmp    eax,esi
c001ed72:	76 24                	jbe    c001ed98 <__moddi3+0x6c>
c001ed74:	89 c8                	mov    eax,ecx
c001ed76:	89 f2                	mov    edx,esi
c001ed78:	f7 f3                	div    ebx
c001ed7a:	89 d6                	mov    esi,edx
c001ed7c:	89 f0                	mov    eax,esi
c001ed7e:	31 d2                	xor    edx,edx
c001ed80:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ed84:	85 c9                	test   ecx,ecx
c001ed86:	74 07                	je     c001ed8f <__moddi3+0x63>
c001ed88:	f7 d8                	neg    eax
c001ed8a:	83 d2 00             	adc    edx,0x0
c001ed8d:	f7 da                	neg    edx
c001ed8f:	83 c4 2c             	add    esp,0x2c
c001ed92:	5b                   	pop    ebx
c001ed93:	5e                   	pop    esi
c001ed94:	5f                   	pop    edi
c001ed95:	5d                   	pop    ebp
c001ed96:	c3                   	ret    
c001ed97:	90                   	nop
c001ed98:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ed9c:	85 db                	test   ebx,ebx
c001ed9e:	75 0d                	jne    c001edad <__moddi3+0x81>
c001eda0:	b8 01 00 00 00       	mov    eax,0x1
c001eda5:	31 d2                	xor    edx,edx
c001eda7:	f7 f7                	div    edi
c001eda9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001edad:	89 f0                	mov    eax,esi
c001edaf:	31 d2                	xor    edx,edx
c001edb1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001edb5:	f7 f7                	div    edi
c001edb7:	89 e8                	mov    eax,ebp
c001edb9:	f7 f7                	div    edi
c001edbb:	89 d6                	mov    esi,edx
c001edbd:	eb bd                	jmp    c001ed7c <__moddi3+0x50>
c001edbf:	90                   	nop
c001edc0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001edc4:	39 f7                	cmp    edi,esi
c001edc6:	76 20                	jbe    c001ede8 <__moddi3+0xbc>
c001edc8:	89 c8                	mov    eax,ecx
c001edca:	89 f2                	mov    edx,esi
c001edcc:	eb b2                	jmp    c001ed80 <__moddi3+0x54>
c001edce:	66 90                	xchg   ax,ax
c001edd0:	f7 d9                	neg    ecx
c001edd2:	83 d3 00             	adc    ebx,0x0
c001edd5:	f7 db                	neg    ebx
c001edd7:	89 de                	mov    esi,ebx
c001edd9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001ede1:	e9 6f ff ff ff       	jmp    c001ed55 <__moddi3+0x29>
c001ede6:	66 90                	xchg   ax,ax
c001ede8:	0f bd c7             	bsr    eax,edi
c001edeb:	83 f0 1f             	xor    eax,0x1f
c001edee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001edf2:	75 24                	jne    c001ee18 <__moddi3+0xec>
c001edf4:	39 f7                	cmp    edi,esi
c001edf6:	72 06                	jb     c001edfe <__moddi3+0xd2>
c001edf8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001edfc:	77 0c                	ja     c001ee0a <__moddi3+0xde>
c001edfe:	89 e9                	mov    ecx,ebp
c001ee00:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001ee04:	19 fe                	sbb    esi,edi
c001ee06:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001ee0a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ee0e:	89 f2                	mov    edx,esi
c001ee10:	e9 6b ff ff ff       	jmp    c001ed80 <__moddi3+0x54>
c001ee15:	8d 76 00             	lea    esi,[esi+0x0]
c001ee18:	b8 20 00 00 00       	mov    eax,0x20
c001ee1d:	89 c2                	mov    edx,eax
c001ee1f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ee23:	29 da                	sub    edx,ebx
c001ee25:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001ee29:	88 d9                	mov    cl,bl
c001ee2b:	d3 e7                	shl    edi,cl
c001ee2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee31:	88 d1                	mov    cl,dl
c001ee33:	d3 e8                	shr    eax,cl
c001ee35:	09 c7                	or     edi,eax
c001ee37:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001ee3b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ee3f:	89 d8                	mov    eax,ebx
c001ee41:	88 d9                	mov    cl,bl
c001ee43:	d3 e7                	shl    edi,cl
c001ee45:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ee49:	89 f3                	mov    ebx,esi
c001ee4b:	88 d1                	mov    cl,dl
c001ee4d:	d3 eb                	shr    ebx,cl
c001ee4f:	89 c7                	mov    edi,eax
c001ee51:	88 c1                	mov    cl,al
c001ee53:	d3 e6                	shl    esi,cl
c001ee55:	89 e8                	mov    eax,ebp
c001ee57:	88 d1                	mov    cl,dl
c001ee59:	d3 e8                	shr    eax,cl
c001ee5b:	09 f0                	or     eax,esi
c001ee5d:	89 f9                	mov    ecx,edi
c001ee5f:	d3 e5                	shl    ebp,cl
c001ee61:	89 da                	mov    edx,ebx
c001ee63:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001ee67:	89 d3                	mov    ebx,edx
c001ee69:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001ee6d:	89 c6                	mov    esi,eax
c001ee6f:	89 d1                	mov    ecx,edx
c001ee71:	39 d3                	cmp    ebx,edx
c001ee73:	72 27                	jb     c001ee9c <__moddi3+0x170>
c001ee75:	74 21                	je     c001ee98 <__moddi3+0x16c>
c001ee77:	29 f5                	sub    ebp,esi
c001ee79:	19 cb                	sbb    ebx,ecx
c001ee7b:	89 de                	mov    esi,ebx
c001ee7d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001ee81:	d3 e6                	shl    esi,cl
c001ee83:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ee87:	89 f9                	mov    ecx,edi
c001ee89:	d3 ed                	shr    ebp,cl
c001ee8b:	09 ee                	or     esi,ebp
c001ee8d:	89 f0                	mov    eax,esi
c001ee8f:	d3 eb                	shr    ebx,cl
c001ee91:	89 da                	mov    edx,ebx
c001ee93:	e9 e8 fe ff ff       	jmp    c001ed80 <__moddi3+0x54>
c001ee98:	39 c5                	cmp    ebp,eax
c001ee9a:	73 db                	jae    c001ee77 <__moddi3+0x14b>
c001ee9c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001eea0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001eea4:	89 d1                	mov    ecx,edx
c001eea6:	89 c6                	mov    esi,eax
c001eea8:	eb cd                	jmp    c001ee77 <__moddi3+0x14b>
c001eeaa:	66 90                	xchg   ax,ax

c001eeac <__udivdi3>:
c001eeac:	55                   	push   ebp
c001eead:	57                   	push   edi
c001eeae:	56                   	push   esi
c001eeaf:	53                   	push   ebx
c001eeb0:	83 ec 1c             	sub    esp,0x1c
c001eeb3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001eeb7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001eebb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001eebf:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001eec3:	85 d2                	test   edx,edx
c001eec5:	75 41                	jne    c001ef08 <__udivdi3+0x5c>
c001eec7:	39 f7                	cmp    edi,esi
c001eec9:	76 15                	jbe    c001eee0 <__udivdi3+0x34>
c001eecb:	89 e8                	mov    eax,ebp
c001eecd:	89 f2                	mov    edx,esi
c001eecf:	f7 f7                	div    edi
c001eed1:	31 db                	xor    ebx,ebx
c001eed3:	89 da                	mov    edx,ebx
c001eed5:	83 c4 1c             	add    esp,0x1c
c001eed8:	5b                   	pop    ebx
c001eed9:	5e                   	pop    esi
c001eeda:	5f                   	pop    edi
c001eedb:	5d                   	pop    ebp
c001eedc:	c3                   	ret    
c001eedd:	8d 76 00             	lea    esi,[esi+0x0]
c001eee0:	89 f9                	mov    ecx,edi
c001eee2:	85 ff                	test   edi,edi
c001eee4:	75 0b                	jne    c001eef1 <__udivdi3+0x45>
c001eee6:	b8 01 00 00 00       	mov    eax,0x1
c001eeeb:	31 d2                	xor    edx,edx
c001eeed:	f7 f7                	div    edi
c001eeef:	89 c1                	mov    ecx,eax
c001eef1:	31 d2                	xor    edx,edx
c001eef3:	89 f0                	mov    eax,esi
c001eef5:	f7 f1                	div    ecx
c001eef7:	89 c3                	mov    ebx,eax
c001eef9:	89 e8                	mov    eax,ebp
c001eefb:	f7 f1                	div    ecx
c001eefd:	89 da                	mov    edx,ebx
c001eeff:	83 c4 1c             	add    esp,0x1c
c001ef02:	5b                   	pop    ebx
c001ef03:	5e                   	pop    esi
c001ef04:	5f                   	pop    edi
c001ef05:	5d                   	pop    ebp
c001ef06:	c3                   	ret    
c001ef07:	90                   	nop
c001ef08:	39 f2                	cmp    edx,esi
c001ef0a:	77 1c                	ja     c001ef28 <__udivdi3+0x7c>
c001ef0c:	0f bd da             	bsr    ebx,edx
c001ef0f:	83 f3 1f             	xor    ebx,0x1f
c001ef12:	75 24                	jne    c001ef38 <__udivdi3+0x8c>
c001ef14:	39 f2                	cmp    edx,esi
c001ef16:	72 08                	jb     c001ef20 <__udivdi3+0x74>
c001ef18:	39 ef                	cmp    edi,ebp
c001ef1a:	0f 87 84 00 00 00    	ja     c001efa4 <__udivdi3+0xf8>
c001ef20:	b8 01 00 00 00       	mov    eax,0x1
c001ef25:	eb ac                	jmp    c001eed3 <__udivdi3+0x27>
c001ef27:	90                   	nop
c001ef28:	31 db                	xor    ebx,ebx
c001ef2a:	31 c0                	xor    eax,eax
c001ef2c:	89 da                	mov    edx,ebx
c001ef2e:	83 c4 1c             	add    esp,0x1c
c001ef31:	5b                   	pop    ebx
c001ef32:	5e                   	pop    esi
c001ef33:	5f                   	pop    edi
c001ef34:	5d                   	pop    ebp
c001ef35:	c3                   	ret    
c001ef36:	66 90                	xchg   ax,ax
c001ef38:	b8 20 00 00 00       	mov    eax,0x20
c001ef3d:	29 d8                	sub    eax,ebx
c001ef3f:	88 d9                	mov    cl,bl
c001ef41:	d3 e2                	shl    edx,cl
c001ef43:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ef47:	89 fa                	mov    edx,edi
c001ef49:	88 c1                	mov    cl,al
c001ef4b:	d3 ea                	shr    edx,cl
c001ef4d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ef51:	09 d1                	or     ecx,edx
c001ef53:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ef57:	88 d9                	mov    cl,bl
c001ef59:	d3 e7                	shl    edi,cl
c001ef5b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001ef5f:	89 f7                	mov    edi,esi
c001ef61:	88 c1                	mov    cl,al
c001ef63:	d3 ef                	shr    edi,cl
c001ef65:	88 d9                	mov    cl,bl
c001ef67:	d3 e6                	shl    esi,cl
c001ef69:	89 ea                	mov    edx,ebp
c001ef6b:	88 c1                	mov    cl,al
c001ef6d:	d3 ea                	shr    edx,cl
c001ef6f:	09 d6                	or     esi,edx
c001ef71:	89 f0                	mov    eax,esi
c001ef73:	89 fa                	mov    edx,edi
c001ef75:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001ef79:	89 d7                	mov    edi,edx
c001ef7b:	89 c6                	mov    esi,eax
c001ef7d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001ef81:	39 d7                	cmp    edi,edx
c001ef83:	72 13                	jb     c001ef98 <__udivdi3+0xec>
c001ef85:	74 09                	je     c001ef90 <__udivdi3+0xe4>
c001ef87:	89 f0                	mov    eax,esi
c001ef89:	31 db                	xor    ebx,ebx
c001ef8b:	e9 43 ff ff ff       	jmp    c001eed3 <__udivdi3+0x27>
c001ef90:	88 d9                	mov    cl,bl
c001ef92:	d3 e5                	shl    ebp,cl
c001ef94:	39 c5                	cmp    ebp,eax
c001ef96:	73 ef                	jae    c001ef87 <__udivdi3+0xdb>
c001ef98:	8d 46 ff             	lea    eax,[esi-0x1]
c001ef9b:	31 db                	xor    ebx,ebx
c001ef9d:	e9 31 ff ff ff       	jmp    c001eed3 <__udivdi3+0x27>
c001efa2:	66 90                	xchg   ax,ax
c001efa4:	31 c0                	xor    eax,eax
c001efa6:	e9 28 ff ff ff       	jmp    c001eed3 <__udivdi3+0x27>
c001efab:	90                   	nop

c001efac <__umoddi3>:
c001efac:	55                   	push   ebp
c001efad:	57                   	push   edi
c001efae:	56                   	push   esi
c001efaf:	53                   	push   ebx
c001efb0:	83 ec 1c             	sub    esp,0x1c
c001efb3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001efb7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001efbb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001efbf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001efc3:	89 da                	mov    edx,ebx
c001efc5:	85 c0                	test   eax,eax
c001efc7:	75 37                	jne    c001f000 <__umoddi3+0x54>
c001efc9:	39 df                	cmp    edi,ebx
c001efcb:	76 13                	jbe    c001efe0 <__umoddi3+0x34>
c001efcd:	89 f0                	mov    eax,esi
c001efcf:	f7 f7                	div    edi
c001efd1:	89 d0                	mov    eax,edx
c001efd3:	31 d2                	xor    edx,edx
c001efd5:	83 c4 1c             	add    esp,0x1c
c001efd8:	5b                   	pop    ebx
c001efd9:	5e                   	pop    esi
c001efda:	5f                   	pop    edi
c001efdb:	5d                   	pop    ebp
c001efdc:	c3                   	ret    
c001efdd:	8d 76 00             	lea    esi,[esi+0x0]
c001efe0:	89 fd                	mov    ebp,edi
c001efe2:	85 ff                	test   edi,edi
c001efe4:	75 0b                	jne    c001eff1 <__umoddi3+0x45>
c001efe6:	b8 01 00 00 00       	mov    eax,0x1
c001efeb:	31 d2                	xor    edx,edx
c001efed:	f7 f7                	div    edi
c001efef:	89 c5                	mov    ebp,eax
c001eff1:	89 d8                	mov    eax,ebx
c001eff3:	31 d2                	xor    edx,edx
c001eff5:	f7 f5                	div    ebp
c001eff7:	89 f0                	mov    eax,esi
c001eff9:	f7 f5                	div    ebp
c001effb:	89 d0                	mov    eax,edx
c001effd:	eb d4                	jmp    c001efd3 <__umoddi3+0x27>
c001efff:	90                   	nop
c001f000:	89 f1                	mov    ecx,esi
c001f002:	39 d8                	cmp    eax,ebx
c001f004:	76 0a                	jbe    c001f010 <__umoddi3+0x64>
c001f006:	89 f0                	mov    eax,esi
c001f008:	83 c4 1c             	add    esp,0x1c
c001f00b:	5b                   	pop    ebx
c001f00c:	5e                   	pop    esi
c001f00d:	5f                   	pop    edi
c001f00e:	5d                   	pop    ebp
c001f00f:	c3                   	ret    
c001f010:	0f bd e8             	bsr    ebp,eax
c001f013:	83 f5 1f             	xor    ebp,0x1f
c001f016:	75 1c                	jne    c001f034 <__umoddi3+0x88>
c001f018:	39 d8                	cmp    eax,ebx
c001f01a:	72 04                	jb     c001f020 <__umoddi3+0x74>
c001f01c:	39 f7                	cmp    edi,esi
c001f01e:	77 08                	ja     c001f028 <__umoddi3+0x7c>
c001f020:	89 da                	mov    edx,ebx
c001f022:	29 fe                	sub    esi,edi
c001f024:	19 c2                	sbb    edx,eax
c001f026:	89 f1                	mov    ecx,esi
c001f028:	89 c8                	mov    eax,ecx
c001f02a:	83 c4 1c             	add    esp,0x1c
c001f02d:	5b                   	pop    ebx
c001f02e:	5e                   	pop    esi
c001f02f:	5f                   	pop    edi
c001f030:	5d                   	pop    ebp
c001f031:	c3                   	ret    
c001f032:	66 90                	xchg   ax,ax
c001f034:	ba 20 00 00 00       	mov    edx,0x20
c001f039:	29 ea                	sub    edx,ebp
c001f03b:	89 e9                	mov    ecx,ebp
c001f03d:	d3 e0                	shl    eax,cl
c001f03f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f043:	89 f8                	mov    eax,edi
c001f045:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f049:	88 d1                	mov    cl,dl
c001f04b:	d3 e8                	shr    eax,cl
c001f04d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f051:	09 c1                	or     ecx,eax
c001f053:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f057:	89 e9                	mov    ecx,ebp
c001f059:	d3 e7                	shl    edi,cl
c001f05b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f05f:	89 d8                	mov    eax,ebx
c001f061:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f065:	88 d1                	mov    cl,dl
c001f067:	d3 e8                	shr    eax,cl
c001f069:	89 c7                	mov    edi,eax
c001f06b:	89 e9                	mov    ecx,ebp
c001f06d:	d3 e3                	shl    ebx,cl
c001f06f:	89 f0                	mov    eax,esi
c001f071:	88 d1                	mov    cl,dl
c001f073:	d3 e8                	shr    eax,cl
c001f075:	09 d8                	or     eax,ebx
c001f077:	89 e9                	mov    ecx,ebp
c001f079:	d3 e6                	shl    esi,cl
c001f07b:	89 f3                	mov    ebx,esi
c001f07d:	89 fa                	mov    edx,edi
c001f07f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f083:	89 d1                	mov    ecx,edx
c001f085:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f089:	89 c6                	mov    esi,eax
c001f08b:	89 d7                	mov    edi,edx
c001f08d:	39 d1                	cmp    ecx,edx
c001f08f:	72 27                	jb     c001f0b8 <__umoddi3+0x10c>
c001f091:	74 21                	je     c001f0b4 <__umoddi3+0x108>
c001f093:	89 ca                	mov    edx,ecx
c001f095:	29 f3                	sub    ebx,esi
c001f097:	19 fa                	sbb    edx,edi
c001f099:	89 d0                	mov    eax,edx
c001f09b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f09f:	d3 e0                	shl    eax,cl
c001f0a1:	89 e9                	mov    ecx,ebp
c001f0a3:	d3 eb                	shr    ebx,cl
c001f0a5:	09 d8                	or     eax,ebx
c001f0a7:	d3 ea                	shr    edx,cl
c001f0a9:	83 c4 1c             	add    esp,0x1c
c001f0ac:	5b                   	pop    ebx
c001f0ad:	5e                   	pop    esi
c001f0ae:	5f                   	pop    edi
c001f0af:	5d                   	pop    ebp
c001f0b0:	c3                   	ret    
c001f0b1:	8d 76 00             	lea    esi,[esi+0x0]
c001f0b4:	39 c3                	cmp    ebx,eax
c001f0b6:	73 db                	jae    c001f093 <__umoddi3+0xe7>
c001f0b8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f0bc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f0c0:	89 d7                	mov    edi,edx
c001f0c2:	89 c6                	mov    esi,eax
c001f0c4:	eb cd                	jmp    c001f093 <__umoddi3+0xe7>
c001f0c6:	66 90                	xchg   ax,ax
c001f0c8:	66 90                	xchg   ax,ax
c001f0ca:	66 90                	xchg   ax,ax
c001f0cc:	66 90                	xchg   ax,ax
c001f0ce:	66 90                	xchg   ax,ax

c001f0d0 <fabs>:
c001f0d0:	83 ec 0c             	sub    esp,0xc
c001f0d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0d7:	89 04 24             	mov    DWORD PTR [esp],eax
c001f0da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f0de:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001f0e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f0e7:	dd 04 24             	fld    QWORD PTR [esp]
c001f0ea:	83 c4 0c             	add    esp,0xc
c001f0ed:	c3                   	ret    
c001f0ee:	66 90                	xchg   ax,ax

c001f0f0 <lrint>:
c001f0f0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001f0f4:	83 ec 04             	sub    esp,0x4
c001f0f7:	db 1c 24             	fistp  DWORD PTR [esp]
c001f0fa:	58                   	pop    eax
c001f0fb:	c3                   	ret    

c001f0fc <lrintf>:
c001f0fc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001f100:	83 ec 04             	sub    esp,0x4
c001f103:	db 1c 24             	fistp  DWORD PTR [esp]
c001f106:	58                   	pop    eax
c001f107:	c3                   	ret    

Disassembly of section .init:

c001f108 <_init>:
c001f108:	55                   	push   ebp
c001f109:	89 e5                	mov    ebp,esp
c001f10b:	e8 08 10 fe ff       	call   c0000118 <frame_dummy>
c001f110:	e8 a3 fa ff ff       	call   c001ebb8 <__do_global_ctors_aux>
c001f115:	5d                   	pop    ebp
c001f116:	c3                   	ret    

Disassembly of section .fini:

c001f117 <_fini>:
c001f117:	55                   	push   ebp
c001f118:	89 e5                	mov    ebp,esp
c001f11a:	e8 89 0f fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001f11f:	5d                   	pop    ebp
c001f120:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f122 <Computer::~Computer()>:
c001f122:	83 ec 0c             	sub    esp,0xc
c001f125:	ba 44 0c 02 c0       	mov    edx,0xc0020c44
c001f12a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f12e:	89 10                	mov    DWORD PTR [eax],edx
c001f130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f134:	83 ec 0c             	sub    esp,0xc
c001f137:	50                   	push   eax
c001f138:	e8 d7 12 ff ff       	call   c0010414 <Device::~Device()>
c001f13d:	83 c4 10             	add    esp,0x10
c001f140:	90                   	nop
c001f141:	83 c4 0c             	add    esp,0xc
c001f144:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f146 <Computer::~Computer()>:
c001f146:	83 ec 0c             	sub    esp,0xc
c001f149:	83 ec 0c             	sub    esp,0xc
c001f14c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f150:	e8 cd ff ff ff       	call   c001f122 <Computer::~Computer()>
c001f155:	83 c4 10             	add    esp,0x10
c001f158:	83 ec 08             	sub    esp,0x8
c001f15b:	68 ec 01 00 00       	push   0x1ec
c001f160:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f164:	e8 ca fe fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001f169:	83 c4 10             	add    esp,0x10
c001f16c:	83 c4 0c             	add    esp,0xc
c001f16f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f170 <idleCommon()>:
c001f170:	83 ec 0c             	sub    esp,0xc
c001f173:	e8 7d 92 ff ff       	call   c00183f5 <lockScheduler()>
c001f178:	e8 c1 95 ff ff       	call   c001873e <schedule()>
c001f17d:	83 c4 0c             	add    esp,0xc
c001f180:	e9 72 92 ff ff       	jmp    c00183f7 <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001f185 <CPU::readCR3()>:
c001f185:	83 ec 10             	sub    esp,0x10
c001f188:	0f 20 d8             	mov    eax,cr3
c001f18b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f18f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f193:	83 c4 10             	add    esp,0x10
c001f196:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001f197 <CPU::writeCR3(unsigned long)>:
c001f197:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f19b:	0f 22 d8             	mov    cr3,eax
c001f19e:	90                   	nop
c001f19f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f1a0 <LinkedList<UnixFile>::~LinkedList()>:
c001f1a0:	90                   	nop
c001f1a1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f1a2 <LinkedList<UnixFile>::LinkedList()>:
c001f1a2:	83 ec 0c             	sub    esp,0xc
c001f1a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1a9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f1af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f1ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1be:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f1c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1c9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f1cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f1da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1de:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f1e5:	83 ec 0c             	sub    esp,0xc
c001f1e8:	68 3d 0f 02 c0       	push   0xc0020f3d
c001f1ed:	e8 67 ff fe ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001f1f2:	83 c4 10             	add    esp,0x10
c001f1f5:	90                   	nop
c001f1f6:	83 c4 0c             	add    esp,0xc
c001f1f9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f1fa <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f1fa:	83 ec 0c             	sub    esp,0xc
c001f1fd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f202:	75 10                	jne    c001f214 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f204:	83 ec 0c             	sub    esp,0xc
c001f207:	68 58 0f 02 c0       	push   0xc0020f58
c001f20c:	e8 db 61 ff ff       	call   c00153ec <Krnl::panic(char const*)>
c001f211:	83 c4 10             	add    esp,0x10
c001f214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f218:	8b 00                	mov    eax,DWORD PTR [eax]
c001f21a:	85 c0                	test   eax,eax
c001f21c:	74 34                	je     c001f252 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f21e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f222:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f225:	85 c0                	test   eax,eax
c001f227:	74 29                	je     c001f252 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f229:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f22d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f230:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f234:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f23b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f23f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f246:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f249:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f250:	eb 65                	jmp    c001f2b7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f256:	8b 00                	mov    eax,DWORD PTR [eax]
c001f258:	85 c0                	test   eax,eax
c001f25a:	75 4b                	jne    c001f2a7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f25c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f260:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f263:	85 c0                	test   eax,eax
c001f265:	75 40                	jne    c001f2a7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f267:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f26b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f26f:	89 10                	mov    DWORD PTR [eax],edx
c001f271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f279:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f27c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f280:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f283:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f28a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f28e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f291:	85 c0                	test   eax,eax
c001f293:	74 22                	je     c001f2b7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f295:	83 ec 0c             	sub    esp,0xc
c001f298:	68 7a 0f 02 c0       	push   0xc0020f7a
c001f29d:	e8 4a 61 ff ff       	call   c00153ec <Krnl::panic(char const*)>
c001f2a2:	83 c4 10             	add    esp,0x10
c001f2a5:	eb 10                	jmp    c001f2b7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f2a7:	83 ec 0c             	sub    esp,0xc
c001f2aa:	68 84 0f 02 c0       	push   0xc0020f84
c001f2af:	e8 38 61 ff ff       	call   c00153ec <Krnl::panic(char const*)>
c001f2b4:	83 c4 10             	add    esp,0x10
c001f2b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2bb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f2be:	8d 50 01             	lea    edx,[eax+0x1]
c001f2c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2c5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f2c8:	90                   	nop
c001f2c9:	83 c4 0c             	add    esp,0xc
c001f2cc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f2ce <LinkedList<UnixFile>::getFirstElement()>:
c001f2ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2d2:	8b 00                	mov    eax,DWORD PTR [eax]
c001f2d4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f2d6 <LinkedList<UnixFile>::removeFirst()>:
c001f2d6:	83 ec 0c             	sub    esp,0xc
c001f2d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2dd:	8b 00                	mov    eax,DWORD PTR [eax]
c001f2df:	85 c0                	test   eax,eax
c001f2e1:	75 12                	jne    c001f2f5 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f2e3:	83 ec 0c             	sub    esp,0xc
c001f2e6:	68 90 0f 02 c0       	push   0xc0020f90
c001f2eb:	e8 fc 60 ff ff       	call   c00153ec <Krnl::panic(char const*)>
c001f2f0:	83 c4 10             	add    esp,0x10
c001f2f3:	eb 7e                	jmp    c001f373 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f2f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f2fc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f2ff:	85 c0                	test   eax,eax
c001f301:	74 10                	je     c001f313 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f303:	83 ec 0c             	sub    esp,0xc
c001f306:	68 db 0f 02 c0       	push   0xc0020fdb
c001f30b:	e8 dc 60 ff ff       	call   c00153ec <Krnl::panic(char const*)>
c001f310:	83 c4 10             	add    esp,0x10
c001f313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f317:	8b 00                	mov    eax,DWORD PTR [eax]
c001f319:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f31c:	85 c0                	test   eax,eax
c001f31e:	75 33                	jne    c001f353 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f324:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f32a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f32e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f339:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f33c:	83 f8 01             	cmp    eax,0x1
c001f33f:	74 21                	je     c001f362 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f341:	83 ec 0c             	sub    esp,0xc
c001f344:	68 b4 0f 02 c0       	push   0xc0020fb4
c001f349:	e8 9e 60 ff ff       	call   c00153ec <Krnl::panic(char const*)>
c001f34e:	83 c4 10             	add    esp,0x10
c001f351:	eb 0f                	jmp    c001f362 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f353:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f357:	8b 00                	mov    eax,DWORD PTR [eax]
c001f359:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f35c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f360:	89 10                	mov    DWORD PTR [eax],edx
c001f362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f366:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f369:	8d 50 ff             	lea    edx,[eax-0x1]
c001f36c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f370:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f373:	83 c4 0c             	add    esp,0xc
c001f376:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f378 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f378:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f37c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f37f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f380 <DriverlessDevice::~DriverlessDevice()>:
c001f380:	ba 44 16 02 c0       	mov    edx,0xc0021644
c001f385:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f389:	89 10                	mov    DWORD PTR [eax],edx
c001f38b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f38f:	50                   	push   eax
c001f390:	e8 7f 10 ff ff       	call   c0010414 <Device::~Device()>
c001f395:	83 c4 04             	add    esp,0x4
c001f398:	90                   	nop
c001f399:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f39a <DriverlessDevice::~DriverlessDevice()>:
c001f39a:	83 ec 0c             	sub    esp,0xc
c001f39d:	83 ec 0c             	sub    esp,0xc
c001f3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3a4:	e8 d7 ff ff ff       	call   c001f380 <DriverlessDevice::~DriverlessDevice()>
c001f3a9:	83 c4 10             	add    esp,0x10
c001f3ac:	83 ec 08             	sub    esp,0x8
c001f3af:	68 58 01 00 00       	push   0x158
c001f3b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f3b8:	e8 76 fc fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001f3bd:	83 c4 10             	add    esp,0x10
c001f3c0:	83 c4 0c             	add    esp,0xc
c001f3c3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f3c4 <LinkedList<Device>::addElement(Device*)>:
c001f3c4:	83 ec 0c             	sub    esp,0xc
c001f3c7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f3cc:	75 10                	jne    c001f3de <LinkedList<Device>::addElement(Device*)+0x1a>
c001f3ce:	83 ec 0c             	sub    esp,0xc
c001f3d1:	68 58 0f 02 c0       	push   0xc0020f58
c001f3d6:	e8 11 60 ff ff       	call   c00153ec <Krnl::panic(char const*)>
c001f3db:	83 c4 10             	add    esp,0x10
c001f3de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3e2:	8b 00                	mov    eax,DWORD PTR [eax]
c001f3e4:	85 c0                	test   eax,eax
c001f3e6:	74 3a                	je     c001f422 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f3e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f3ef:	85 c0                	test   eax,eax
c001f3f1:	74 2f                	je     c001f422 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f3f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f3fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f3fe:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f408:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f40c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f40f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f413:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f416:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f420:	eb 68                	jmp    c001f48a <LinkedList<Device>::addElement(Device*)+0xc6>
c001f422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f426:	8b 00                	mov    eax,DWORD PTR [eax]
c001f428:	85 c0                	test   eax,eax
c001f42a:	75 4e                	jne    c001f47a <LinkedList<Device>::addElement(Device*)+0xb6>
c001f42c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f430:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f433:	85 c0                	test   eax,eax
c001f435:	75 43                	jne    c001f47a <LinkedList<Device>::addElement(Device*)+0xb6>
c001f437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f43b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f43f:	89 10                	mov    DWORD PTR [eax],edx
c001f441:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f445:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f449:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f44c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f450:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f453:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f45d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f461:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f464:	85 c0                	test   eax,eax
c001f466:	74 22                	je     c001f48a <LinkedList<Device>::addElement(Device*)+0xc6>
c001f468:	83 ec 0c             	sub    esp,0xc
c001f46b:	68 7a 0f 02 c0       	push   0xc0020f7a
c001f470:	e8 77 5f ff ff       	call   c00153ec <Krnl::panic(char const*)>
c001f475:	83 c4 10             	add    esp,0x10
c001f478:	eb 10                	jmp    c001f48a <LinkedList<Device>::addElement(Device*)+0xc6>
c001f47a:	83 ec 0c             	sub    esp,0xc
c001f47d:	68 84 0f 02 c0       	push   0xc0020f84
c001f482:	e8 65 5f ff ff       	call   c00153ec <Krnl::panic(char const*)>
c001f487:	83 c4 10             	add    esp,0x10
c001f48a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f48e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f491:	8d 50 01             	lea    edx,[eax+0x1]
c001f494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f498:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f49b:	90                   	nop
c001f49c:	83 c4 0c             	add    esp,0xc
c001f49f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f4a0 <LinkedList<Device>::LinkedList()>:
c001f4a0:	83 ec 0c             	sub    esp,0xc
c001f4a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4a7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f4ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f4b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4bc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f4c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4c7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f4cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4d1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f4d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4dc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f4e3:	83 ec 0c             	sub    esp,0xc
c001f4e6:	68 3d 0f 02 c0       	push   0xc0020f3d
c001f4eb:	e8 69 fc fe ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001f4f0:	83 c4 10             	add    esp,0x10
c001f4f3:	90                   	nop
c001f4f4:	83 c4 0c             	add    esp,0xc
c001f4f7:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001f4f8 <CPU::readCR0()>:
c001f4f8:	83 ec 10             	sub    esp,0x10
c001f4fb:	0f 20 c0             	mov    eax,cr0
c001f4fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f502:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f506:	83 c4 10             	add    esp,0x10
c001f509:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001f50a <CPU::writeCR0(unsigned long)>:
c001f50a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f50e:	0f 22 c0             	mov    cr0,eax
c001f511:	90                   	nop
c001f512:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001f513 <CPU::readDR0()>:
c001f513:	83 ec 10             	sub    esp,0x10
c001f516:	0f 21 c0             	mov    eax,db0
c001f519:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f51d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f521:	83 c4 10             	add    esp,0x10
c001f524:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001f525 <CPU::readDR1()>:
c001f525:	83 ec 10             	sub    esp,0x10
c001f528:	0f 21 c8             	mov    eax,db1
c001f52b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f52f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f533:	83 c4 10             	add    esp,0x10
c001f536:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001f537 <CPU::readDR2()>:
c001f537:	83 ec 10             	sub    esp,0x10
c001f53a:	0f 21 d0             	mov    eax,db2
c001f53d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f541:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f545:	83 c4 10             	add    esp,0x10
c001f548:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001f549 <CPU::readDR3()>:
c001f549:	83 ec 10             	sub    esp,0x10
c001f54c:	0f 21 d8             	mov    eax,db3
c001f54f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f553:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f557:	83 c4 10             	add    esp,0x10
c001f55a:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001f55b <CPU::readDR6()>:
c001f55b:	83 ec 10             	sub    esp,0x10
c001f55e:	0f 21 f0             	mov    eax,db6
c001f561:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f565:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f569:	83 c4 10             	add    esp,0x10
c001f56c:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001f56d <CPU::readDR7()>:
c001f56d:	83 ec 10             	sub    esp,0x10
c001f570:	0f 21 f8             	mov    eax,db7
c001f573:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f577:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f57b:	83 c4 10             	add    esp,0x10
c001f57e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f580 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f580:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f584:	8b 00                	mov    eax,DWORD PTR [eax]
c001f586:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f588 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f588:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f58c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f58e:	85 c0                	test   eax,eax
c001f590:	75 0e                	jne    c001f5a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f592:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f596:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f599:	85 c0                	test   eax,eax
c001f59b:	75 03                	jne    c001f5a0 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f59d:	b0 01                	mov    al,0x1
c001f59f:	c3                   	ret    
c001f5a0:	b0 00                	mov    al,0x0
c001f5a2:	90                   	nop
c001f5a3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f5a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f5a4:	83 ec 0c             	sub    esp,0xc
c001f5a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5ad:	85 c0                	test   eax,eax
c001f5af:	75 15                	jne    c001f5c6 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001f5b1:	83 ec 0c             	sub    esp,0xc
c001f5b4:	68 90 0f 02 c0       	push   0xc0020f90
c001f5b9:	e8 2e 5e ff ff       	call   c00153ec <Krnl::panic(char const*)>
c001f5be:	83 c4 10             	add    esp,0x10
c001f5c1:	e9 88 00 00 00       	jmp    c001f64e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001f5c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f5cd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f5d0:	85 c0                	test   eax,eax
c001f5d2:	0f 95 c0             	setne  al
c001f5d5:	84 c0                	test   al,al
c001f5d7:	74 10                	je     c001f5e9 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001f5d9:	83 ec 0c             	sub    esp,0xc
c001f5dc:	68 db 0f 02 c0       	push   0xc0020fdb
c001f5e1:	e8 06 5e ff ff       	call   c00153ec <Krnl::panic(char const*)>
c001f5e6:	83 c4 10             	add    esp,0x10
c001f5e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5ed:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5ef:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f5f2:	85 c0                	test   eax,eax
c001f5f4:	0f 94 c0             	sete   al
c001f5f7:	84 c0                	test   al,al
c001f5f9:	74 33                	je     c001f62e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001f5fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f605:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f609:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f610:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f614:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f617:	83 f8 01             	cmp    eax,0x1
c001f61a:	74 21                	je     c001f63d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001f61c:	83 ec 0c             	sub    esp,0xc
c001f61f:	68 b4 0f 02 c0       	push   0xc0020fb4
c001f624:	e8 c3 5d ff ff       	call   c00153ec <Krnl::panic(char const*)>
c001f629:	83 c4 10             	add    esp,0x10
c001f62c:	eb 0f                	jmp    c001f63d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001f62e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f632:	8b 00                	mov    eax,DWORD PTR [eax]
c001f634:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f637:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f63b:	89 10                	mov    DWORD PTR [eax],edx
c001f63d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f641:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f644:	8d 50 ff             	lea    edx,[eax-0x1]
c001f647:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f64b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f64e:	83 c4 0c             	add    esp,0xc
c001f651:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f652 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f652:	83 ec 0c             	sub    esp,0xc
c001f655:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f65a:	75 10                	jne    c001f66c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001f65c:	83 ec 0c             	sub    esp,0xc
c001f65f:	68 58 0f 02 c0       	push   0xc0020f58
c001f664:	e8 83 5d ff ff       	call   c00153ec <Krnl::panic(char const*)>
c001f669:	83 c4 10             	add    esp,0x10
c001f66c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f670:	8b 00                	mov    eax,DWORD PTR [eax]
c001f672:	85 c0                	test   eax,eax
c001f674:	74 34                	je     c001f6aa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001f676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f67a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f67d:	85 c0                	test   eax,eax
c001f67f:	74 29                	je     c001f6aa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001f681:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f685:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f688:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f68c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f68f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f693:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f697:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f69a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f69e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6a1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f6a8:	eb 65                	jmp    c001f70f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001f6aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6ae:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6b0:	85 c0                	test   eax,eax
c001f6b2:	75 4b                	jne    c001f6ff <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001f6b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6bb:	85 c0                	test   eax,eax
c001f6bd:	75 40                	jne    c001f6ff <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001f6bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6c7:	89 10                	mov    DWORD PTR [eax],edx
c001f6c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6cd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6d1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f6d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6db:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6e6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f6e9:	85 c0                	test   eax,eax
c001f6eb:	74 22                	je     c001f70f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001f6ed:	83 ec 0c             	sub    esp,0xc
c001f6f0:	68 7a 0f 02 c0       	push   0xc0020f7a
c001f6f5:	e8 f2 5c ff ff       	call   c00153ec <Krnl::panic(char const*)>
c001f6fa:	83 c4 10             	add    esp,0x10
c001f6fd:	eb 10                	jmp    c001f70f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001f6ff:	83 ec 0c             	sub    esp,0xc
c001f702:	68 84 0f 02 c0       	push   0xc0020f84
c001f707:	e8 e0 5c ff ff       	call   c00153ec <Krnl::panic(char const*)>
c001f70c:	83 c4 10             	add    esp,0x10
c001f70f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f713:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f716:	8d 50 01             	lea    edx,[eax+0x1]
c001f719:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f71d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f720:	90                   	nop
c001f721:	83 c4 0c             	add    esp,0xc
c001f724:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f726 <ACPI::~ACPI()>:
c001f726:	83 ec 0c             	sub    esp,0xc
c001f729:	ba e4 1d 02 c0       	mov    edx,0xc0021de4
c001f72e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f732:	89 10                	mov    DWORD PTR [eax],edx
c001f734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f738:	83 ec 0c             	sub    esp,0xc
c001f73b:	50                   	push   eax
c001f73c:	e8 d3 0c ff ff       	call   c0010414 <Device::~Device()>
c001f741:	83 c4 10             	add    esp,0x10
c001f744:	90                   	nop
c001f745:	83 c4 0c             	add    esp,0xc
c001f748:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f74a <ACPI::~ACPI()>:
c001f74a:	83 ec 0c             	sub    esp,0xc
c001f74d:	83 ec 0c             	sub    esp,0xc
c001f750:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f754:	e8 cd ff ff ff       	call   c001f726 <ACPI::~ACPI()>
c001f759:	83 c4 10             	add    esp,0x10
c001f75c:	83 ec 08             	sub    esp,0x8
c001f75f:	68 68 22 00 00       	push   0x2268
c001f764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f768:	e8 c6 f8 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001f76d:	83 c4 10             	add    esp,0x10
c001f770:	83 c4 0c             	add    esp,0xc
c001f773:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001f774 <CPU::~CPU()>:
c001f774:	83 ec 0c             	sub    esp,0xc
c001f777:	ba d4 21 02 c0       	mov    edx,0xc00221d4
c001f77c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f780:	89 10                	mov    DWORD PTR [eax],edx
c001f782:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f786:	83 ec 0c             	sub    esp,0xc
c001f789:	50                   	push   eax
c001f78a:	e8 85 0c ff ff       	call   c0010414 <Device::~Device()>
c001f78f:	83 c4 10             	add    esp,0x10
c001f792:	90                   	nop
c001f793:	83 c4 0c             	add    esp,0xc
c001f796:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001f798 <CPU::~CPU()>:
c001f798:	83 ec 0c             	sub    esp,0xc
c001f79b:	83 ec 0c             	sub    esp,0xc
c001f79e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7a2:	e8 cd ff ff ff       	call   c001f774 <CPU::~CPU()>
c001f7a7:	83 c4 10             	add    esp,0x10
c001f7aa:	83 ec 08             	sub    esp,0x8
c001f7ad:	68 98 11 00 00       	push   0x1198
c001f7b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7b6:	e8 78 f8 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001f7bb:	83 c4 10             	add    esp,0x10
c001f7be:	83 c4 0c             	add    esp,0xc
c001f7c1:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001f7c2 <CPU::readCR4()>:
c001f7c2:	83 ec 10             	sub    esp,0x10
c001f7c5:	0f 20 e0             	mov    eax,cr4
c001f7c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f7cc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7d0:	83 c4 10             	add    esp,0x10
c001f7d3:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001f7d4 <CPU::writeDR7(unsigned long)>:
c001f7d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7d8:	0f 23 f8             	mov    db7,eax
c001f7db:	90                   	nop
c001f7dc:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001f7dd <CPU::writeCR4(unsigned long)>:
c001f7dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7e1:	0f 22 e0             	mov    cr4,eax
c001f7e4:	90                   	nop
c001f7e5:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001f7e6 <CPU::readCR2()>:
c001f7e6:	83 ec 10             	sub    esp,0x10
c001f7e9:	0f 20 d0             	mov    eax,cr2
c001f7ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f7f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7f4:	83 c4 10             	add    esp,0x10
c001f7f7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001f7f8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001f7f8:	90                   	nop
c001f7f9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001f7fa <ThreadControlBlock::ThreadControlBlock()>:
c001f7fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7fe:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f809:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001f810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f814:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001f81b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f81f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001f826:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f82a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f82e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f832:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001f836:	90                   	nop
c001f837:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001f838 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001f838:	83 ec 0c             	sub    esp,0xc
c001f83b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f83f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f845:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f849:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f854:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f85b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f85f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f865:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f869:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f874:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f87b:	83 ec 0c             	sub    esp,0xc
c001f87e:	68 3d 0f 02 c0       	push   0xc0020f3d
c001f883:	e8 d1 f8 fe ff       	call   c000f159 <Dbg::kprintf(char const*, ...)>
c001f888:	83 c4 10             	add    esp,0x10
c001f88b:	90                   	nop
c001f88c:	83 c4 0c             	add    esp,0xc
c001f88f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001f890 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001f890:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f894:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f897:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001f898 <PCI::~PCI()>:
c001f898:	83 ec 0c             	sub    esp,0xc
c001f89b:	ba ac 2e 02 c0       	mov    edx,0xc0022eac
c001f8a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a4:	89 10                	mov    DWORD PTR [eax],edx
c001f8a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8aa:	83 ec 0c             	sub    esp,0xc
c001f8ad:	50                   	push   eax
c001f8ae:	e8 6b 05 ff ff       	call   c000fe1e <Bus::~Bus()>
c001f8b3:	83 c4 10             	add    esp,0x10
c001f8b6:	90                   	nop
c001f8b7:	83 c4 0c             	add    esp,0xc
c001f8ba:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001f8bc <PCI::~PCI()>:
c001f8bc:	83 ec 0c             	sub    esp,0xc
c001f8bf:	83 ec 0c             	sub    esp,0xc
c001f8c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8c6:	e8 cd ff ff ff       	call   c001f898 <PCI::~PCI()>
c001f8cb:	83 c4 10             	add    esp,0x10
c001f8ce:	83 ec 08             	sub    esp,0x8
c001f8d1:	68 58 01 00 00       	push   0x158
c001f8d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f8da:	e8 54 f7 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001f8df:	83 c4 10             	add    esp,0x10
c001f8e2:	83 c4 0c             	add    esp,0xc
c001f8e5:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001f8e6 <IDE::~IDE()>:
c001f8e6:	83 ec 0c             	sub    esp,0xc
c001f8e9:	ba 10 31 02 c0       	mov    edx,0xc0023110
c001f8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8f2:	89 10                	mov    DWORD PTR [eax],edx
c001f8f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8f8:	83 ec 0c             	sub    esp,0xc
c001f8fb:	50                   	push   eax
c001f8fc:	e8 25 10 ff ff       	call   c0010926 <HardDiskController::~HardDiskController()>
c001f901:	83 c4 10             	add    esp,0x10
c001f904:	90                   	nop
c001f905:	83 c4 0c             	add    esp,0xc
c001f908:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001f90a <IDE::~IDE()>:
c001f90a:	83 ec 0c             	sub    esp,0xc
c001f90d:	83 ec 0c             	sub    esp,0xc
c001f910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f914:	e8 cd ff ff ff       	call   c001f8e6 <IDE::~IDE()>
c001f919:	83 c4 10             	add    esp,0x10
c001f91c:	83 ec 08             	sub    esp,0x8
c001f91f:	68 70 02 00 00       	push   0x270
c001f924:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f928:	e8 06 f7 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001f92d:	83 c4 10             	add    esp,0x10
c001f930:	83 c4 0c             	add    esp,0xc
c001f933:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001f934 <ATA::~ATA()>:
c001f934:	83 ec 0c             	sub    esp,0xc
c001f937:	ba 60 31 02 c0       	mov    edx,0xc0023160
c001f93c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f940:	89 10                	mov    DWORD PTR [eax],edx
c001f942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f946:	83 ec 0c             	sub    esp,0xc
c001f949:	50                   	push   eax
c001f94a:	e8 b5 10 ff ff       	call   c0010a04 <PhysicalDisk::~PhysicalDisk()>
c001f94f:	83 c4 10             	add    esp,0x10
c001f952:	90                   	nop
c001f953:	83 c4 0c             	add    esp,0xc
c001f956:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001f958 <ATA::~ATA()>:
c001f958:	83 ec 0c             	sub    esp,0xc
c001f95b:	83 ec 0c             	sub    esp,0xc
c001f95e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f962:	e8 cd ff ff ff       	call   c001f934 <ATA::~ATA()>
c001f967:	83 c4 10             	add    esp,0x10
c001f96a:	83 ec 08             	sub    esp,0x8
c001f96d:	68 7c 01 00 00       	push   0x17c
c001f972:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f976:	e8 b8 f6 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001f97b:	83 c4 10             	add    esp,0x10
c001f97e:	83 c4 0c             	add    esp,0xc
c001f981:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001f982 <ATAPI::~ATAPI()>:
c001f982:	83 ec 0c             	sub    esp,0xc
c001f985:	ba cc 31 02 c0       	mov    edx,0xc00231cc
c001f98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f98e:	89 10                	mov    DWORD PTR [eax],edx
c001f990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f994:	83 ec 0c             	sub    esp,0xc
c001f997:	50                   	push   eax
c001f998:	e8 67 10 ff ff       	call   c0010a04 <PhysicalDisk::~PhysicalDisk()>
c001f99d:	83 c4 10             	add    esp,0x10
c001f9a0:	90                   	nop
c001f9a1:	83 c4 0c             	add    esp,0xc
c001f9a4:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001f9a6 <ATAPI::~ATAPI()>:
c001f9a6:	83 ec 0c             	sub    esp,0xc
c001f9a9:	83 ec 0c             	sub    esp,0xc
c001f9ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9b0:	e8 cd ff ff ff       	call   c001f982 <ATAPI::~ATAPI()>
c001f9b5:	83 c4 10             	add    esp,0x10
c001f9b8:	83 ec 08             	sub    esp,0x8
c001f9bb:	68 80 01 00 00       	push   0x180
c001f9c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9c4:	e8 6a f6 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001f9c9:	83 c4 10             	add    esp,0x10
c001f9cc:	83 c4 0c             	add    esp,0xc
c001f9cf:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001f9d0 <AVX::~AVX()>:
c001f9d0:	83 ec 0c             	sub    esp,0xc
c001f9d3:	ba 08 32 02 c0       	mov    edx,0xc0023208
c001f9d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9dc:	89 10                	mov    DWORD PTR [eax],edx
c001f9de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9e2:	83 ec 0c             	sub    esp,0xc
c001f9e5:	50                   	push   eax
c001f9e6:	e8 9d 10 ff ff       	call   c0010a88 <FPU::~FPU()>
c001f9eb:	83 c4 10             	add    esp,0x10
c001f9ee:	90                   	nop
c001f9ef:	83 c4 0c             	add    esp,0xc
c001f9f2:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001f9f4 <AVX::~AVX()>:
c001f9f4:	83 ec 0c             	sub    esp,0xc
c001f9f7:	83 ec 0c             	sub    esp,0xc
c001f9fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9fe:	e8 cd ff ff ff       	call   c001f9d0 <AVX::~AVX()>
c001fa03:	83 c4 10             	add    esp,0x10
c001fa06:	83 ec 08             	sub    esp,0x8
c001fa09:	68 58 01 00 00       	push   0x158
c001fa0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa12:	e8 1c f6 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fa17:	83 c4 10             	add    esp,0x10
c001fa1a:	83 c4 0c             	add    esp,0xc
c001fa1d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001fa1e <MMX::~MMX()>:
c001fa1e:	83 ec 0c             	sub    esp,0xc
c001fa21:	ba 48 32 02 c0       	mov    edx,0xc0023248
c001fa26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa2a:	89 10                	mov    DWORD PTR [eax],edx
c001fa2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa30:	83 ec 0c             	sub    esp,0xc
c001fa33:	50                   	push   eax
c001fa34:	e8 4f 10 ff ff       	call   c0010a88 <FPU::~FPU()>
c001fa39:	83 c4 10             	add    esp,0x10
c001fa3c:	90                   	nop
c001fa3d:	83 c4 0c             	add    esp,0xc
c001fa40:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001fa42 <MMX::~MMX()>:
c001fa42:	83 ec 0c             	sub    esp,0xc
c001fa45:	83 ec 0c             	sub    esp,0xc
c001fa48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa4c:	e8 cd ff ff ff       	call   c001fa1e <MMX::~MMX()>
c001fa51:	83 c4 10             	add    esp,0x10
c001fa54:	83 ec 08             	sub    esp,0x8
c001fa57:	68 58 01 00 00       	push   0x158
c001fa5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa60:	e8 ce f5 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fa65:	83 c4 10             	add    esp,0x10
c001fa68:	83 c4 0c             	add    esp,0xc
c001fa6b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001fa6c <SSE::~SSE()>:
c001fa6c:	83 ec 0c             	sub    esp,0xc
c001fa6f:	ba 88 32 02 c0       	mov    edx,0xc0023288
c001fa74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa78:	89 10                	mov    DWORD PTR [eax],edx
c001fa7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa7e:	83 ec 0c             	sub    esp,0xc
c001fa81:	50                   	push   eax
c001fa82:	e8 01 10 ff ff       	call   c0010a88 <FPU::~FPU()>
c001fa87:	83 c4 10             	add    esp,0x10
c001fa8a:	90                   	nop
c001fa8b:	83 c4 0c             	add    esp,0xc
c001fa8e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001fa90 <SSE::~SSE()>:
c001fa90:	83 ec 0c             	sub    esp,0xc
c001fa93:	83 ec 0c             	sub    esp,0xc
c001fa96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa9a:	e8 cd ff ff ff       	call   c001fa6c <SSE::~SSE()>
c001fa9f:	83 c4 10             	add    esp,0x10
c001faa2:	83 ec 08             	sub    esp,0x8
c001faa5:	68 58 01 00 00       	push   0x158
c001faaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001faae:	e8 80 f5 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fab3:	83 c4 10             	add    esp,0x10
c001fab6:	83 c4 0c             	add    esp,0xc
c001fab9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001faba <x87::~x87()>:
c001faba:	83 ec 0c             	sub    esp,0xc
c001fabd:	ba c8 32 02 c0       	mov    edx,0xc00232c8
c001fac2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac6:	89 10                	mov    DWORD PTR [eax],edx
c001fac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001facc:	83 ec 0c             	sub    esp,0xc
c001facf:	50                   	push   eax
c001fad0:	e8 b3 0f ff ff       	call   c0010a88 <FPU::~FPU()>
c001fad5:	83 c4 10             	add    esp,0x10
c001fad8:	90                   	nop
c001fad9:	83 c4 0c             	add    esp,0xc
c001fadc:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001fade <x87::~x87()>:
c001fade:	83 ec 0c             	sub    esp,0xc
c001fae1:	83 ec 0c             	sub    esp,0xc
c001fae4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fae8:	e8 cd ff ff ff       	call   c001faba <x87::~x87()>
c001faed:	83 c4 10             	add    esp,0x10
c001faf0:	83 ec 08             	sub    esp,0x8
c001faf3:	68 58 01 00 00       	push   0x158
c001faf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fafc:	e8 32 f5 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fb01:	83 c4 10             	add    esp,0x10
c001fb04:	83 c4 0c             	add    esp,0xc
c001fb07:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fb08 <IOAPIC::~IOAPIC()>:
c001fb08:	83 ec 0c             	sub    esp,0xc
c001fb0b:	ba 20 34 02 c0       	mov    edx,0xc0023420
c001fb10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb14:	89 10                	mov    DWORD PTR [eax],edx
c001fb16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb1a:	83 ec 0c             	sub    esp,0xc
c001fb1d:	50                   	push   eax
c001fb1e:	e8 f1 08 ff ff       	call   c0010414 <Device::~Device()>
c001fb23:	83 c4 10             	add    esp,0x10
c001fb26:	90                   	nop
c001fb27:	83 c4 0c             	add    esp,0xc
c001fb2a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001fb2c <IOAPIC::~IOAPIC()>:
c001fb2c:	83 ec 0c             	sub    esp,0xc
c001fb2f:	83 ec 0c             	sub    esp,0xc
c001fb32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb36:	e8 cd ff ff ff       	call   c001fb08 <IOAPIC::~IOAPIC()>
c001fb3b:	83 c4 10             	add    esp,0x10
c001fb3e:	83 ec 08             	sub    esp,0x8
c001fb41:	68 68 01 00 00       	push   0x168
c001fb46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb4a:	e8 e4 f4 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fb4f:	83 c4 10             	add    esp,0x10
c001fb52:	83 c4 0c             	add    esp,0xc
c001fb55:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001fb56 <APIC::~APIC()>:
c001fb56:	83 ec 0c             	sub    esp,0xc
c001fb59:	ba d8 33 02 c0       	mov    edx,0xc00233d8
c001fb5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb62:	89 10                	mov    DWORD PTR [eax],edx
c001fb64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb68:	83 ec 0c             	sub    esp,0xc
c001fb6b:	50                   	push   eax
c001fb6c:	e8 df 13 ff ff       	call   c0010f50 <InterruptController::~InterruptController()>
c001fb71:	83 c4 10             	add    esp,0x10
c001fb74:	90                   	nop
c001fb75:	83 c4 0c             	add    esp,0xc
c001fb78:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001fb7a <APIC::~APIC()>:
c001fb7a:	83 ec 0c             	sub    esp,0xc
c001fb7d:	83 ec 0c             	sub    esp,0xc
c001fb80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb84:	e8 cd ff ff ff       	call   c001fb56 <APIC::~APIC()>
c001fb89:	83 c4 10             	add    esp,0x10
c001fb8c:	83 ec 08             	sub    esp,0x8
c001fb8f:	68 58 21 00 00       	push   0x2158
c001fb94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb98:	e8 96 f4 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fb9d:	83 c4 10             	add    esp,0x10
c001fba0:	83 c4 0c             	add    esp,0xc
c001fba3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001fba4 <PIC::~PIC()>:
c001fba4:	83 ec 0c             	sub    esp,0xc
c001fba7:	ba 70 34 02 c0       	mov    edx,0xc0023470
c001fbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb0:	89 10                	mov    DWORD PTR [eax],edx
c001fbb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb6:	83 ec 0c             	sub    esp,0xc
c001fbb9:	50                   	push   eax
c001fbba:	e8 91 13 ff ff       	call   c0010f50 <InterruptController::~InterruptController()>
c001fbbf:	83 c4 10             	add    esp,0x10
c001fbc2:	90                   	nop
c001fbc3:	83 c4 0c             	add    esp,0xc
c001fbc6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001fbc8 <PIC::~PIC()>:
c001fbc8:	83 ec 0c             	sub    esp,0xc
c001fbcb:	83 ec 0c             	sub    esp,0xc
c001fbce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbd2:	e8 cd ff ff ff       	call   c001fba4 <PIC::~PIC()>
c001fbd7:	83 c4 10             	add    esp,0x10
c001fbda:	83 ec 08             	sub    esp,0x8
c001fbdd:	68 58 21 00 00       	push   0x2158
c001fbe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbe6:	e8 48 f4 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fbeb:	83 c4 10             	add    esp,0x10
c001fbee:	83 c4 0c             	add    esp,0xc
c001fbf1:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001fbf2 <APICTimer::~APICTimer()>:
c001fbf2:	83 ec 0c             	sub    esp,0xc
c001fbf5:	ba c4 34 02 c0       	mov    edx,0xc00234c4
c001fbfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbfe:	89 10                	mov    DWORD PTR [eax],edx
c001fc00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc04:	83 ec 0c             	sub    esp,0xc
c001fc07:	50                   	push   eax
c001fc08:	e8 d7 2a ff ff       	call   c00126e4 <Timer::~Timer()>
c001fc0d:	83 c4 10             	add    esp,0x10
c001fc10:	90                   	nop
c001fc11:	83 c4 0c             	add    esp,0xc
c001fc14:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001fc16 <APICTimer::~APICTimer()>:
c001fc16:	83 ec 0c             	sub    esp,0xc
c001fc19:	83 ec 0c             	sub    esp,0xc
c001fc1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc20:	e8 cd ff ff ff       	call   c001fbf2 <APICTimer::~APICTimer()>
c001fc25:	83 c4 10             	add    esp,0x10
c001fc28:	83 ec 08             	sub    esp,0x8
c001fc2b:	68 60 01 00 00       	push   0x160
c001fc30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc34:	e8 fa f3 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fc39:	83 c4 10             	add    esp,0x10
c001fc3c:	83 c4 0c             	add    esp,0xc
c001fc3f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001fc40 <PIT::~PIT()>:
c001fc40:	83 ec 0c             	sub    esp,0xc
c001fc43:	ba 14 35 02 c0       	mov    edx,0xc0023514
c001fc48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc4c:	89 10                	mov    DWORD PTR [eax],edx
c001fc4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc52:	83 ec 0c             	sub    esp,0xc
c001fc55:	50                   	push   eax
c001fc56:	e8 89 2a ff ff       	call   c00126e4 <Timer::~Timer()>
c001fc5b:	83 c4 10             	add    esp,0x10
c001fc5e:	90                   	nop
c001fc5f:	83 c4 0c             	add    esp,0xc
c001fc62:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001fc64 <PIT::~PIT()>:
c001fc64:	83 ec 0c             	sub    esp,0xc
c001fc67:	83 ec 0c             	sub    esp,0xc
c001fc6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc6e:	e8 cd ff ff ff       	call   c001fc40 <PIT::~PIT()>
c001fc73:	83 c4 10             	add    esp,0x10
c001fc76:	83 ec 08             	sub    esp,0x8
c001fc79:	68 5c 01 00 00       	push   0x15c
c001fc7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc82:	e8 ac f3 fe ff       	call   c000f033 <operator delete(void*, unsigned long)>
c001fc87:	83 c4 10             	add    esp,0x10
c001fc8a:	83 c4 0c             	add    esp,0xc
c001fc8d:	c3                   	ret    
