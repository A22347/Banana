
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 00 c4 00 00       	call   c000c420 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 03 e3 01 00       	call   c001e328 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 60 ef 01 c0       	mov    ebx,0xc001ef60
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 68 ef 01 c0    	cmp    ebx,0xc001ef68
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 ec 28 02 c0       	mov    eax,0xc00228ec
c0000049:	3d ec 28 02 c0       	cmp    eax,0xc00228ec
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 ec 28 02 c0       	push   0xc00228ec
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 ec 28 02 c0       	mov    eax,0xc00228ec
c0000075:	2d ec 28 02 c0       	sub    eax,0xc00228ec
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 ec 28 02 c0       	push   0xc00228ec
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 8c 2a 02 c0 00 	cmp    BYTE PTR ds:0xc0022a8c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 70 ef 01 c0       	mov    ebx,0xc001ef70
c00000bb:	81 eb 6c ef 01 c0    	sub    ebx,0xc001ef6c
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 6c ef 01 c0       	mov    esi,0xc001ef6c
c00000ca:	a1 90 2a 02 c0       	mov    eax,ds:0xc0022a90
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 90 2a 02 c0       	mov    ds:0xc0022a90,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 90 2a 02 c0       	mov    eax,ds:0xc0022a90
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 ec 28 02 c0       	push   0xc00228ec
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 8c 2a 02 c0 01 	mov    BYTE PTR ds:0xc0022a8c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 94 2a 02 c0       	push   0xc0022a94
c000012c:	68 ec 28 02 c0       	push   0xc00228ec
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <doTPAUSE>:
c0000150:	fb                   	sti    
c0000151:	31 c0                	xor    eax,eax
c0000153:	31 d2                	xor    edx,edx
c0000155:	66 0f ae f0          	tpause eax
c0000159:	c3                   	ret    

c000015a <hasLegacyFPU>:
c000015a:	0f 20 c2             	mov    edx,cr0
c000015d:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000163:	0f 22 c2             	mov    cr0,edx
c0000166:	db e3                	fninit 
c0000168:	dd 3d 7d 01 00 c0    	fnstsw WORD PTR ds:0xc000017d
c000016e:	31 c0                	xor    eax,eax
c0000170:	66 81 3d 7d 01 00 c0 00 00 	cmp    WORD PTR ds:0xc000017d,0x0
c0000179:	75 01                	jne    c000017c <hasLegacyFPU.nofpu>

c000017b <hasLegacyFPU.hasfpu>:
c000017b:	40                   	inc    eax

c000017c <hasLegacyFPU.nofpu>:
c000017c:	c3                   	ret    

c000017d <testword>:
c000017d:	aa                   	stos   BYTE PTR es:[edi],al
c000017e:	55                   	push   ebp

c000017f <is486>:
c000017f:	0f 09                	wbinvd 
c0000181:	31 c0                	xor    eax,eax
c0000183:	40                   	inc    eax
c0000184:	c3                   	ret    
c0000185:	90                   	nop
c0000186:	90                   	nop
c0000187:	90                   	nop
c0000188:	90                   	nop
c0000189:	90                   	nop
c000018a:	90                   	nop
c000018b:	90                   	nop
c000018c:	90                   	nop
c000018d:	90                   	nop
c000018e:	90                   	nop
c000018f:	90                   	nop
c0000190:	90                   	nop
c0000191:	90                   	nop
c0000192:	90                   	nop
c0000193:	90                   	nop
c0000194:	90                   	nop
c0000195:	90                   	nop
c0000196:	90                   	nop
c0000197:	90                   	nop
c0000198:	90                   	nop
c0000199:	90                   	nop
c000019a:	90                   	nop
c000019b:	90                   	nop
c000019c:	90                   	nop
c000019d:	90                   	nop
c000019e:	90                   	nop
c000019f:	90                   	nop
c00001a0:	90                   	nop
c00001a1:	90                   	nop
c00001a2:	90                   	nop
c00001a3:	90                   	nop
c00001a4:	90                   	nop
c00001a5:	90                   	nop
c00001a6:	90                   	nop
c00001a7:	90                   	nop
c00001a8:	90                   	nop
c00001a9:	90                   	nop
c00001aa:	90                   	nop
c00001ab:	90                   	nop
c00001ac:	90                   	nop
c00001ad:	90                   	nop
c00001ae:	90                   	nop
c00001af:	90                   	nop
c00001b0:	90                   	nop
c00001b1:	90                   	nop
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	c3                   	ret    

c00001b5 <goToVM86>:
c00001b5:	fa                   	cli    
c00001b6:	55                   	push   ebp
c00001b7:	89 e5                	mov    ebp,esp
c00001b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bc:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00001bf:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00001c2:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00001c5:	25 ff ff 00 00       	and    eax,0xffff
c00001ca:	81 e3 ff ff 00 00    	and    ebx,0xffff
c00001d0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00001d6:	81 e2 ff ff 00 00    	and    edx,0xffff
c00001dc:	52                   	push   edx
c00001dd:	51                   	push   ecx
c00001de:	68 02 02 02 00       	push   0x20202
c00001e3:	53                   	push   ebx
c00001e4:	50                   	push   eax
c00001e5:	cf                   	iret   

c00001e6 <goToUsermode>:
c00001e6:	fa                   	cli    
c00001e7:	55                   	push   ebp
c00001e8:	89 e5                	mov    ebp,esp
c00001ea:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00001ed:	66 b8 23 00          	mov    ax,0x23
c00001f1:	66 8e d8             	mov    ds,ax
c00001f4:	66 8e c0             	mov    es,ax
c00001f7:	66 8e e0             	mov    fs,ax
c00001fa:	66 8e e8             	mov    gs,ax
c00001fd:	89 e0                	mov    eax,esp
c00001ff:	68 23 00 00 00       	push   0x23
c0000204:	50                   	push   eax
c0000205:	68 02 02 00 00       	push   0x202
c000020a:	68 1b 00 00 00       	push   0x1b
c000020f:	53                   	push   ebx
c0000210:	cf                   	iret   

c0000211 <switchToThreadASMFirstTime>:
c0000211:	9c                   	pushf  
c0000212:	fa                   	cli    
c0000213:	50                   	push   eax
c0000214:	53                   	push   ebx
c0000215:	51                   	push   ecx
c0000216:	52                   	push   edx
c0000217:	56                   	push   esi
c0000218:	57                   	push   edi
c0000219:	55                   	push   ebp
c000021a:	e9 11 00 00 00       	jmp    c0000230 <commonThreadSwitch>

c000021f <switchToThreadASM>:
c000021f:	9c                   	pushf  
c0000220:	50                   	push   eax
c0000221:	53                   	push   ebx
c0000222:	51                   	push   ecx
c0000223:	52                   	push   edx
c0000224:	56                   	push   esi
c0000225:	57                   	push   edi
c0000226:	55                   	push   ebp
c0000227:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c000022d:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000230 <commonThreadSwitch>:
c0000230:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000234:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000023a:	8b 06                	mov    eax,DWORD PTR [esi]
c000023c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000023f:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000242:	0f 20 d9             	mov    ecx,cr3
c0000245:	39 c8                	cmp    eax,ecx
c0000247:	74 03                	je     c000024c <commonThreadSwitch.doneVAS>
c0000249:	0f 22 d8             	mov    cr3,eax

c000024c <commonThreadSwitch.doneVAS>:
c000024c:	85 d2                	test   edx,edx
c000024e:	74 4e                	je     c000029e <commonThreadSwitch.notFirstTime>
c0000250:	fa                   	cli    
c0000251:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0000254:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000259:	60                   	pusha  
c000025a:	e8 6d ee 00 00       	call   c000f0cc <mapVASFirstTime>
c000025f:	61                   	popa   
c0000260:	89 c4                	mov    esp,eax
c0000262:	56                   	push   esi
c0000263:	52                   	push   edx
c0000264:	e8 bf 6f 01 00       	call   c0017228 <changeTSS>
c0000269:	5a                   	pop    edx
c000026a:	5e                   	pop    esi
c000026b:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0000272:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000278:	74 39                	je     c00002b3 <commonThreadSwitch.cameOffAFork>
c000027a:	5d                   	pop    ebp
c000027b:	5f                   	pop    edi
c000027c:	5e                   	pop    esi
c000027d:	59                   	pop    ecx
c000027e:	59                   	pop    ecx
c000027f:	5b                   	pop    ebx
c0000280:	58                   	pop    eax
c0000281:	81 c4 04 00 00 00    	add    esp,0x4
c0000287:	6a 02                	push   0x2
c0000289:	9d                   	popf   
c000028a:	52                   	push   edx
c000028b:	e8 ab 73 01 00       	call   c001763b <taskStartupFunction>
c0000290:	5a                   	pop    edx
c0000291:	50                   	push   eax
c0000292:	ff d2                	call   edx
c0000294:	e8 51 7b 01 00       	call   c0017dea <taskReturned>
c0000299:	e9 fb ff ff ff       	jmp    c0000299 <commonThreadSwitch.doneVAS+0x4d>

c000029e <commonThreadSwitch.notFirstTime>:
c000029e:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a1:	56                   	push   esi
c00002a2:	52                   	push   edx
c00002a3:	e8 80 6f 01 00       	call   c0017228 <changeTSS>
c00002a8:	5a                   	pop    edx
c00002a9:	5e                   	pop    esi
c00002aa:	5d                   	pop    ebp
c00002ab:	5f                   	pop    edi
c00002ac:	5e                   	pop    esi
c00002ad:	5a                   	pop    edx
c00002ae:	59                   	pop    ecx
c00002af:	5b                   	pop    ebx
c00002b0:	58                   	pop    eax
c00002b1:	9d                   	popf   
c00002b2:	c3                   	ret    

c00002b3 <commonThreadSwitch.cameOffAFork>:
c00002b3:	31 c0                	xor    eax,eax
c00002b5:	31 d2                	xor    edx,edx
c00002b7:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c00002ba:	e9 a2 02 00 00       	jmp    c0000561 <offAForkJumpThingy>

c00002bf <detectCPUID>:
c00002bf:	9c                   	pushf  
c00002c0:	9c                   	pushf  
c00002c1:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002c8:	9d                   	popf   
c00002c9:	9c                   	pushf  
c00002ca:	58                   	pop    eax
c00002cb:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002ce:	9d                   	popf   
c00002cf:	25 00 00 20 00       	and    eax,0x200000
c00002d4:	c3                   	ret    

c00002d5 <asmQuickAcquireLock>:
c00002d5:	55                   	push   ebp
c00002d6:	89 e5                	mov    ebp,esp
c00002d8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00002db <asmQuickAcquireLock.retry>:
c00002db:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00002e0:	72 02                	jb     c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002e2:	fa                   	cli    
c00002e3:	c3                   	ret    

c00002e4 <asmQuickAcquireLock.spin_with_pause>:
c00002e4:	f3 90                	pause  
c00002e6:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00002ec:	75 f6                	jne    c00002e4 <asmQuickAcquireLock.spin_with_pause>
c00002ee:	e9 e8 ff ff ff       	jmp    c00002db <asmQuickAcquireLock.retry>

c00002f3 <asmQuickReleaseLock>:
c00002f3:	55                   	push   ebp
c00002f4:	89 e5                	mov    ebp,esp
c00002f6:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00002fd:	5d                   	pop    ebp
c00002fe:	c3                   	ret    

c00002ff <asmAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 05                	jb     c0000311 <asmAcquireLock.spin_with_pause>
c000030c:	9c                   	pushf  
c000030d:	58                   	pop    eax
c000030e:	fa                   	cli    
c000030f:	5d                   	pop    ebp
c0000310:	c3                   	ret    

c0000311 <asmAcquireLock.spin_with_pause>:
c0000311:	f3 90                	pause  
c0000313:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000319:	75 f6                	jne    c0000311 <asmAcquireLock.spin_with_pause>
c000031b:	e9 e5 ff ff ff       	jmp    c0000305 <asmAcquireLock.retry>

c0000320 <asmReleaseLock>:
c0000320:	55                   	push   ebp
c0000321:	89 e5                	mov    ebp,esp
c0000323:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000326:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000329:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000032f:	52                   	push   edx
c0000330:	9d                   	popf   
c0000331:	5d                   	pop    ebp
c0000332:	c3                   	ret    

c0000333 <loadGDT>:
c0000333:	0f 01 15 d0 2e 02 c0 	lgdtd  ds:0xc0022ed0
c000033a:	66 b8 10 00          	mov    ax,0x10
c000033e:	66 8e d8             	mov    ds,ax
c0000341:	66 8e c0             	mov    es,ax
c0000344:	66 8e e0             	mov    fs,ax
c0000347:	66 8e e8             	mov    gs,ax
c000034a:	66 8e d0             	mov    ss,ax
c000034d:	e9 00 00 00 00       	jmp    c0000352 <flush2>

c0000352 <flush2>:
c0000352:	c3                   	ret    

c0000353 <isr0>:
c0000353:	fa                   	cli    
c0000354:	68 00 00 00 00       	push   0x0
c0000359:	68 00 00 00 00       	push   0x0
c000035e:	e9 a2 01 00 00       	jmp    c0000505 <int_common_stub>

c0000363 <isr1>:
c0000363:	fa                   	cli    
c0000364:	6a 00                	push   0x0
c0000366:	6a 01                	push   0x1
c0000368:	e9 98 01 00 00       	jmp    c0000505 <int_common_stub>

c000036d <isr2>:
c000036d:	fa                   	cli    
c000036e:	6a 00                	push   0x0
c0000370:	6a 02                	push   0x2
c0000372:	e9 8e 01 00 00       	jmp    c0000505 <int_common_stub>

c0000377 <isr3>:
c0000377:	fa                   	cli    
c0000378:	6a 00                	push   0x0
c000037a:	6a 03                	push   0x3
c000037c:	e9 84 01 00 00       	jmp    c0000505 <int_common_stub>

c0000381 <isr4>:
c0000381:	fa                   	cli    
c0000382:	6a 00                	push   0x0
c0000384:	6a 04                	push   0x4
c0000386:	e9 7a 01 00 00       	jmp    c0000505 <int_common_stub>

c000038b <isr5>:
c000038b:	fa                   	cli    
c000038c:	6a 00                	push   0x0
c000038e:	6a 05                	push   0x5
c0000390:	e9 70 01 00 00       	jmp    c0000505 <int_common_stub>

c0000395 <isr6>:
c0000395:	fa                   	cli    
c0000396:	6a 00                	push   0x0
c0000398:	6a 06                	push   0x6
c000039a:	e9 66 01 00 00       	jmp    c0000505 <int_common_stub>

c000039f <isr7>:
c000039f:	fa                   	cli    
c00003a0:	6a 00                	push   0x0
c00003a2:	6a 07                	push   0x7
c00003a4:	e9 5c 01 00 00       	jmp    c0000505 <int_common_stub>

c00003a9 <isr8>:
c00003a9:	fa                   	cli    
c00003aa:	6a 08                	push   0x8
c00003ac:	e9 54 01 00 00       	jmp    c0000505 <int_common_stub>

c00003b1 <isr9>:
c00003b1:	fa                   	cli    
c00003b2:	6a 00                	push   0x0
c00003b4:	6a 09                	push   0x9
c00003b6:	e9 4a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003bb <isr10>:
c00003bb:	fa                   	cli    
c00003bc:	6a 0a                	push   0xa
c00003be:	e9 42 01 00 00       	jmp    c0000505 <int_common_stub>

c00003c3 <isr11>:
c00003c3:	fa                   	cli    
c00003c4:	6a 0b                	push   0xb
c00003c6:	e9 3a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003cb <isr12>:
c00003cb:	fa                   	cli    
c00003cc:	6a 0c                	push   0xc
c00003ce:	e9 32 01 00 00       	jmp    c0000505 <int_common_stub>

c00003d3 <isr13>:
c00003d3:	fa                   	cli    
c00003d4:	6a 0d                	push   0xd
c00003d6:	e9 2a 01 00 00       	jmp    c0000505 <int_common_stub>

c00003db <isr14>:
c00003db:	fa                   	cli    
c00003dc:	6a 0e                	push   0xe
c00003de:	e9 22 01 00 00       	jmp    c0000505 <int_common_stub>

c00003e3 <isr15>:
c00003e3:	fa                   	cli    
c00003e4:	6a 00                	push   0x0
c00003e6:	6a 0f                	push   0xf
c00003e8:	e9 18 01 00 00       	jmp    c0000505 <int_common_stub>

c00003ed <isr16>:
c00003ed:	fa                   	cli    
c00003ee:	6a 00                	push   0x0
c00003f0:	6a 10                	push   0x10
c00003f2:	e9 0e 01 00 00       	jmp    c0000505 <int_common_stub>

c00003f7 <isr17>:
c00003f7:	fa                   	cli    
c00003f8:	6a 00                	push   0x0
c00003fa:	6a 11                	push   0x11
c00003fc:	e9 04 01 00 00       	jmp    c0000505 <int_common_stub>

c0000401 <isr18>:
c0000401:	fa                   	cli    
c0000402:	6a 00                	push   0x0
c0000404:	6a 12                	push   0x12
c0000406:	e9 fa 00 00 00       	jmp    c0000505 <int_common_stub>

c000040b <isr96>:
c000040b:	fa                   	cli    
c000040c:	6a 00                	push   0x0
c000040e:	6a 60                	push   0x60
c0000410:	e9 20 01 00 00       	jmp    c0000535 <syscall_common_stub>

c0000415 <irq0>:
c0000415:	fa                   	cli    
c0000416:	6a 00                	push   0x0
c0000418:	6a 20                	push   0x20
c000041a:	e9 e6 00 00 00       	jmp    c0000505 <int_common_stub>

c000041f <irq1>:
c000041f:	fa                   	cli    
c0000420:	6a 00                	push   0x0
c0000422:	6a 21                	push   0x21
c0000424:	e9 dc 00 00 00       	jmp    c0000505 <int_common_stub>

c0000429 <irq2>:
c0000429:	fa                   	cli    
c000042a:	6a 00                	push   0x0
c000042c:	6a 22                	push   0x22
c000042e:	e9 d2 00 00 00       	jmp    c0000505 <int_common_stub>

c0000433 <irq3>:
c0000433:	fa                   	cli    
c0000434:	6a 00                	push   0x0
c0000436:	6a 23                	push   0x23
c0000438:	e9 c8 00 00 00       	jmp    c0000505 <int_common_stub>

c000043d <irq4>:
c000043d:	fa                   	cli    
c000043e:	6a 00                	push   0x0
c0000440:	6a 24                	push   0x24
c0000442:	e9 be 00 00 00       	jmp    c0000505 <int_common_stub>

c0000447 <irq5>:
c0000447:	fa                   	cli    
c0000448:	6a 00                	push   0x0
c000044a:	6a 25                	push   0x25
c000044c:	e9 b4 00 00 00       	jmp    c0000505 <int_common_stub>

c0000451 <irq6>:
c0000451:	fa                   	cli    
c0000452:	6a 00                	push   0x0
c0000454:	6a 26                	push   0x26
c0000456:	e9 aa 00 00 00       	jmp    c0000505 <int_common_stub>

c000045b <irq7>:
c000045b:	fa                   	cli    
c000045c:	6a 00                	push   0x0
c000045e:	6a 27                	push   0x27
c0000460:	e9 a0 00 00 00       	jmp    c0000505 <int_common_stub>

c0000465 <irq8>:
c0000465:	fa                   	cli    
c0000466:	6a 00                	push   0x0
c0000468:	6a 28                	push   0x28
c000046a:	e9 96 00 00 00       	jmp    c0000505 <int_common_stub>

c000046f <irq9>:
c000046f:	fa                   	cli    
c0000470:	6a 00                	push   0x0
c0000472:	6a 29                	push   0x29
c0000474:	e9 8c 00 00 00       	jmp    c0000505 <int_common_stub>

c0000479 <irq10>:
c0000479:	fa                   	cli    
c000047a:	6a 00                	push   0x0
c000047c:	6a 2a                	push   0x2a
c000047e:	e9 82 00 00 00       	jmp    c0000505 <int_common_stub>

c0000483 <irq11>:
c0000483:	fa                   	cli    
c0000484:	6a 00                	push   0x0
c0000486:	6a 2b                	push   0x2b
c0000488:	e9 78 00 00 00       	jmp    c0000505 <int_common_stub>

c000048d <irq12>:
c000048d:	fa                   	cli    
c000048e:	6a 00                	push   0x0
c0000490:	6a 2c                	push   0x2c
c0000492:	e9 6e 00 00 00       	jmp    c0000505 <int_common_stub>

c0000497 <irq13>:
c0000497:	fa                   	cli    
c0000498:	6a 00                	push   0x0
c000049a:	6a 2d                	push   0x2d
c000049c:	e9 64 00 00 00       	jmp    c0000505 <int_common_stub>

c00004a1 <irq14>:
c00004a1:	fa                   	cli    
c00004a2:	6a 00                	push   0x0
c00004a4:	6a 2e                	push   0x2e
c00004a6:	e9 5a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004ab <irq15>:
c00004ab:	fa                   	cli    
c00004ac:	6a 00                	push   0x0
c00004ae:	6a 2f                	push   0x2f
c00004b0:	e9 50 00 00 00       	jmp    c0000505 <int_common_stub>

c00004b5 <irq16>:
c00004b5:	fa                   	cli    
c00004b6:	6a 00                	push   0x0
c00004b8:	6a 30                	push   0x30
c00004ba:	e9 46 00 00 00       	jmp    c0000505 <int_common_stub>

c00004bf <irq17>:
c00004bf:	fa                   	cli    
c00004c0:	6a 00                	push   0x0
c00004c2:	6a 31                	push   0x31
c00004c4:	e9 3c 00 00 00       	jmp    c0000505 <int_common_stub>

c00004c9 <irq18>:
c00004c9:	fa                   	cli    
c00004ca:	6a 00                	push   0x0
c00004cc:	6a 32                	push   0x32
c00004ce:	e9 32 00 00 00       	jmp    c0000505 <int_common_stub>

c00004d3 <irq19>:
c00004d3:	fa                   	cli    
c00004d4:	6a 00                	push   0x0
c00004d6:	6a 33                	push   0x33
c00004d8:	e9 28 00 00 00       	jmp    c0000505 <int_common_stub>

c00004dd <irq20>:
c00004dd:	fa                   	cli    
c00004de:	6a 00                	push   0x0
c00004e0:	6a 34                	push   0x34
c00004e2:	e9 1e 00 00 00       	jmp    c0000505 <int_common_stub>

c00004e7 <irq21>:
c00004e7:	fa                   	cli    
c00004e8:	6a 00                	push   0x0
c00004ea:	6a 35                	push   0x35
c00004ec:	e9 14 00 00 00       	jmp    c0000505 <int_common_stub>

c00004f1 <irq22>:
c00004f1:	fa                   	cli    
c00004f2:	6a 00                	push   0x0
c00004f4:	6a 36                	push   0x36
c00004f6:	e9 0a 00 00 00       	jmp    c0000505 <int_common_stub>

c00004fb <irq23>:
c00004fb:	fa                   	cli    
c00004fc:	6a 00                	push   0x0
c00004fe:	6a 37                	push   0x37
c0000500:	e9 00 00 00 00       	jmp    c0000505 <int_common_stub>

c0000505 <int_common_stub>:
c0000505:	60                   	pusha  
c0000506:	1e                   	push   ds
c0000507:	06                   	push   es
c0000508:	0f a0                	push   fs
c000050a:	0f a8                	push   gs
c000050c:	66 b8 10 00          	mov    ax,0x10
c0000510:	66 8e d8             	mov    ds,ax
c0000513:	66 8e c0             	mov    es,ax
c0000516:	66 8e e0             	mov    fs,ax
c0000519:	66 8e e8             	mov    gs,ax
c000051c:	89 e1                	mov    ecx,esp
c000051e:	51                   	push   ecx
c000051f:	b9 8f 0d 01 c0       	mov    ecx,0xc0010d8f
c0000524:	ff d1                	call   ecx
c0000526:	59                   	pop    ecx
c0000527:	0f a9                	pop    gs
c0000529:	0f a1                	pop    fs
c000052b:	07                   	pop    es
c000052c:	1f                   	pop    ds
c000052d:	61                   	popa   
c000052e:	81 c4 08 00 00 00    	add    esp,0x8
c0000534:	cf                   	iret   

c0000535 <syscall_common_stub>:
c0000535:	60                   	pusha  
c0000536:	1e                   	push   ds
c0000537:	06                   	push   es
c0000538:	0f a0                	push   fs
c000053a:	0f a8                	push   gs
c000053c:	66 b8 10 00          	mov    ax,0x10
c0000540:	66 8e d8             	mov    ds,ax
c0000543:	66 8e c0             	mov    es,ax
c0000546:	66 8e e0             	mov    fs,ax
c0000549:	66 8e e8             	mov    gs,ax
c000054c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0000552:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c0000555:	89 e1                	mov    ecx,esp
c0000557:	51                   	push   ecx
c0000558:	fb                   	sti    
c0000559:	b9 8f 0d 01 c0       	mov    ecx,0xc0010d8f
c000055e:	ff d1                	call   ecx
c0000560:	59                   	pop    ecx

c0000561 <offAForkJumpThingy>:
c0000561:	0f a9                	pop    gs
c0000563:	0f a1                	pop    fs
c0000565:	07                   	pop    es
c0000566:	1f                   	pop    ds
c0000567:	61                   	popa   
c0000568:	81 c4 08 00 00 00    	add    esp,0x8
c000056e:	cf                   	iret   

c000056f <memcmp>:
c000056f:	56                   	push   esi
c0000570:	53                   	push   ebx
c0000571:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000575:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000579:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000057d:	01 d6                	add    esi,edx
c000057f:	39 f2                	cmp    edx,esi
c0000581:	74 0e                	je     c0000591 <memcmp+0x22>
c0000583:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000586:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000589:	38 c8                	cmp    al,cl
c000058b:	75 08                	jne    c0000595 <memcmp+0x26>
c000058d:	42                   	inc    edx
c000058e:	43                   	inc    ebx
c000058f:	eb ee                	jmp    c000057f <memcmp+0x10>
c0000591:	31 c0                	xor    eax,eax
c0000593:	eb 02                	jmp    c0000597 <memcmp+0x28>
c0000595:	29 c8                	sub    eax,ecx
c0000597:	5b                   	pop    ebx
c0000598:	5e                   	pop    esi
c0000599:	c3                   	ret    

c000059a <memmove>:
c000059a:	56                   	push   esi
c000059b:	53                   	push   ebx
c000059c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00005a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00005a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00005a8:	39 c8                	cmp    eax,ecx
c00005aa:	73 12                	jae    c00005be <memmove+0x24>
c00005ac:	8d 34 0a             	lea    esi,[edx+ecx*1]
c00005af:	89 c3                	mov    ebx,eax
c00005b1:	39 f1                	cmp    ecx,esi
c00005b3:	74 1a                	je     c00005cf <memmove+0x35>
c00005b5:	8a 11                	mov    dl,BYTE PTR [ecx]
c00005b7:	43                   	inc    ebx
c00005b8:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00005bb:	41                   	inc    ecx
c00005bc:	eb f3                	jmp    c00005b1 <memmove+0x17>
c00005be:	76 0f                	jbe    c00005cf <memmove+0x35>
c00005c0:	85 d2                	test   edx,edx
c00005c2:	74 0b                	je     c00005cf <memmove+0x35>
c00005c4:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c00005c8:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c00005cc:	4a                   	dec    edx
c00005cd:	eb f1                	jmp    c00005c0 <memmove+0x26>
c00005cf:	5b                   	pop    ebx
c00005d0:	5e                   	pop    esi
c00005d1:	c3                   	ret    

c00005d2 <memcpy>:
c00005d2:	57                   	push   edi
c00005d3:	56                   	push   esi
c00005d4:	53                   	push   ebx
c00005d5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00005d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005dd:	89 da                	mov    edx,ebx
c00005df:	89 d9                	mov    ecx,ebx
c00005e1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00005e5:	83 e2 fc             	and    edx,0xfffffffc
c00005e8:	c1 e9 02             	shr    ecx,0x2
c00005eb:	89 c7                	mov    edi,eax
c00005ed:	fc                   	cld    
c00005ee:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00005f0:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00005f3:	01 c2                	add    edx,eax
c00005f5:	01 de                	add    esi,ebx
c00005f7:	39 f1                	cmp    ecx,esi
c00005f9:	74 09                	je     c0000604 <memcpy+0x32>
c00005fb:	8a 19                	mov    bl,BYTE PTR [ecx]
c00005fd:	42                   	inc    edx
c00005fe:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000601:	41                   	inc    ecx
c0000602:	eb f3                	jmp    c00005f7 <memcpy+0x25>
c0000604:	5b                   	pop    ebx
c0000605:	5e                   	pop    esi
c0000606:	5f                   	pop    edi
c0000607:	c3                   	ret    

c0000608 <memset>:
c0000608:	53                   	push   ebx
c0000609:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000060d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000611:	89 c2                	mov    edx,eax
c0000613:	01 c1                	add    ecx,eax
c0000615:	39 ca                	cmp    edx,ecx
c0000617:	74 0a                	je     c0000623 <memset+0x1b>
c0000619:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c000061d:	42                   	inc    edx
c000061e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000621:	eb f2                	jmp    c0000615 <memset+0xd>
c0000623:	5b                   	pop    ebx
c0000624:	c3                   	ret    

c0000625 <strlen>:
c0000625:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000629:	31 c0                	xor    eax,eax
c000062b:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c000062f:	74 03                	je     c0000634 <strlen+0xf>
c0000631:	40                   	inc    eax
c0000632:	eb f7                	jmp    c000062b <strlen+0x6>
c0000634:	c3                   	ret    

c0000635 <strpbrk>:
c0000635:	53                   	push   ebx
c0000636:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000063a:	8a 08                	mov    cl,BYTE PTR [eax]
c000063c:	84 c9                	test   cl,cl
c000063e:	74 14                	je     c0000654 <strpbrk+0x1f>
c0000640:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000644:	8a 1a                	mov    bl,BYTE PTR [edx]
c0000646:	84 db                	test   bl,bl
c0000648:	74 07                	je     c0000651 <strpbrk+0x1c>
c000064a:	38 cb                	cmp    bl,cl
c000064c:	74 08                	je     c0000656 <strpbrk+0x21>
c000064e:	42                   	inc    edx
c000064f:	eb f3                	jmp    c0000644 <strpbrk+0xf>
c0000651:	40                   	inc    eax
c0000652:	eb e6                	jmp    c000063a <strpbrk+0x5>
c0000654:	31 c0                	xor    eax,eax
c0000656:	5b                   	pop    ebx
c0000657:	c3                   	ret    

c0000658 <strtok>:
c0000658:	56                   	push   esi
c0000659:	53                   	push   ebx
c000065a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000065e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000662:	85 db                	test   ebx,ebx
c0000664:	75 0e                	jne    c0000674 <strtok+0x1c>
c0000666:	8b 1d ac 2a 02 c0    	mov    ebx,DWORD PTR ds:0xc0022aac
c000066c:	85 db                	test   ebx,ebx
c000066e:	75 04                	jne    c0000674 <strtok+0x1c>
c0000670:	31 db                	xor    ebx,ebx
c0000672:	eb 2e                	jmp    c00006a2 <strtok+0x4a>
c0000674:	56                   	push   esi
c0000675:	53                   	push   ebx
c0000676:	e8 ba ff ff ff       	call   c0000635 <strpbrk>
c000067b:	5a                   	pop    edx
c000067c:	a3 ac 2a 02 c0       	mov    ds:0xc0022aac,eax
c0000681:	59                   	pop    ecx
c0000682:	a1 ac 2a 02 c0       	mov    eax,ds:0xc0022aac
c0000687:	39 d8                	cmp    eax,ebx
c0000689:	75 07                	jne    c0000692 <strtok+0x3a>
c000068b:	43                   	inc    ebx
c000068c:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000690:	eb e2                	jmp    c0000674 <strtok+0x1c>
c0000692:	85 c0                	test   eax,eax
c0000694:	74 da                	je     c0000670 <strtok+0x18>
c0000696:	8d 50 01             	lea    edx,[eax+0x1]
c0000699:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000069c:	89 15 ac 2a 02 c0    	mov    DWORD PTR ds:0xc0022aac,edx
c00006a2:	89 d8                	mov    eax,ebx
c00006a4:	5b                   	pop    ebx
c00006a5:	5e                   	pop    esi
c00006a6:	c3                   	ret    

c00006a7 <strcpy>:
c00006a7:	53                   	push   ebx
c00006a8:	31 d2                	xor    edx,edx
c00006aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006ae:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00006b2:	8d 1c 10             	lea    ebx,[eax+edx*1]
c00006b5:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00006b8:	84 c9                	test   cl,cl
c00006ba:	74 06                	je     c00006c2 <strcpy+0x1b>
c00006bc:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00006bf:	42                   	inc    edx
c00006c0:	eb ec                	jmp    c00006ae <strcpy+0x7>
c00006c2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00006c5:	5b                   	pop    ebx
c00006c6:	c3                   	ret    

c00006c7 <strncpy>:
c00006c7:	56                   	push   esi
c00006c8:	53                   	push   ebx
c00006c9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00006cd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00006d1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00006d5:	89 c3                	mov    ebx,eax
c00006d7:	85 c9                	test   ecx,ecx
c00006d9:	74 1a                	je     c00006f5 <strncpy+0x2e>
c00006db:	46                   	inc    esi
c00006dc:	43                   	inc    ebx
c00006dd:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c00006e0:	49                   	dec    ecx
c00006e1:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c00006e4:	84 d2                	test   dl,dl
c00006e6:	75 ef                	jne    c00006d7 <strncpy+0x10>
c00006e8:	31 d2                	xor    edx,edx
c00006ea:	39 d1                	cmp    ecx,edx
c00006ec:	74 07                	je     c00006f5 <strncpy+0x2e>
c00006ee:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00006f2:	42                   	inc    edx
c00006f3:	eb f5                	jmp    c00006ea <strncpy+0x23>
c00006f5:	5b                   	pop    ebx
c00006f6:	5e                   	pop    esi
c00006f7:	c3                   	ret    

c00006f8 <strcmp>:
c00006f8:	31 c9                	xor    ecx,ecx
c00006fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00006fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000702:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0000706:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c000070a:	38 d0                	cmp    al,dl
c000070c:	75 08                	jne    c0000716 <strcmp+0x1e>
c000070e:	41                   	inc    ecx
c000070f:	84 c0                	test   al,al
c0000711:	75 e7                	jne    c00006fa <strcmp+0x2>
c0000713:	31 c0                	xor    eax,eax
c0000715:	c3                   	ret    
c0000716:	29 d0                	sub    eax,edx
c0000718:	c3                   	ret    

c0000719 <strchr>:
c0000719:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000071d:	8a 10                	mov    dl,BYTE PTR [eax]
c000071f:	84 d2                	test   dl,dl
c0000721:	74 09                	je     c000072c <strchr+0x13>
c0000723:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c0000727:	74 05                	je     c000072e <strchr+0x15>
c0000729:	40                   	inc    eax
c000072a:	eb f1                	jmp    c000071d <strchr+0x4>
c000072c:	31 c0                	xor    eax,eax
c000072e:	c3                   	ret    

c000072f <strncmp>:
c000072f:	56                   	push   esi
c0000730:	53                   	push   ebx
c0000731:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000735:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000739:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000073d:	01 d6                	add    esi,edx
c000073f:	39 f2                	cmp    edx,esi
c0000741:	74 12                	je     c0000755 <strncmp+0x26>
c0000743:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0000746:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000749:	38 c8                	cmp    al,cl
c000074b:	75 0c                	jne    c0000759 <strncmp+0x2a>
c000074d:	42                   	inc    edx
c000074e:	84 c0                	test   al,al
c0000750:	74 03                	je     c0000755 <strncmp+0x26>
c0000752:	43                   	inc    ebx
c0000753:	eb ea                	jmp    c000073f <strncmp+0x10>
c0000755:	31 c0                	xor    eax,eax
c0000757:	eb 02                	jmp    c000075b <strncmp+0x2c>
c0000759:	29 c8                	sub    eax,ecx
c000075b:	5b                   	pop    ebx
c000075c:	5e                   	pop    esi
c000075d:	c3                   	ret    

c000075e <strcat>:
c000075e:	53                   	push   ebx
c000075f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000763:	89 c1                	mov    ecx,eax
c0000765:	8d 51 01             	lea    edx,[ecx+0x1]
c0000768:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000076c:	74 04                	je     c0000772 <strcat+0x14>
c000076e:	89 d1                	mov    ecx,edx
c0000770:	eb f3                	jmp    c0000765 <strcat+0x7>
c0000772:	31 d2                	xor    edx,edx
c0000774:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000778:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c000077b:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c000077e:	42                   	inc    edx
c000077f:	84 db                	test   bl,bl
c0000781:	75 f1                	jne    c0000774 <strcat+0x16>
c0000783:	5b                   	pop    ebx
c0000784:	c3                   	ret    

c0000785 <strncat>:
c0000785:	56                   	push   esi
c0000786:	53                   	push   ebx
c0000787:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000793:	89 c2                	mov    edx,eax
c0000795:	85 db                	test   ebx,ebx
c0000797:	74 23                	je     c00007bc <strncat+0x37>
c0000799:	8d 72 01             	lea    esi,[edx+0x1]
c000079c:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c00007a0:	74 04                	je     c00007a6 <strncat+0x21>
c00007a2:	89 f2                	mov    edx,esi
c00007a4:	eb f3                	jmp    c0000799 <strncat+0x14>
c00007a6:	8d 34 19             	lea    esi,[ecx+ebx*1]
c00007a9:	41                   	inc    ecx
c00007aa:	42                   	inc    edx
c00007ab:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00007ae:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00007b1:	84 db                	test   bl,bl
c00007b3:	74 07                	je     c00007bc <strncat+0x37>
c00007b5:	39 f1                	cmp    ecx,esi
c00007b7:	75 f0                	jne    c00007a9 <strncat+0x24>
c00007b9:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00007bc:	5b                   	pop    ebx
c00007bd:	5e                   	pop    esi
c00007be:	c3                   	ret    

c00007bf <strstr>:
c00007bf:	57                   	push   edi
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007c6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ca:	57                   	push   edi
c00007cb:	e8 55 fe ff ff       	call   c0000625 <strlen>
c00007d0:	59                   	pop    ecx
c00007d1:	89 c6                	mov    esi,eax
c00007d3:	85 c0                	test   eax,eax
c00007d5:	74 1f                	je     c00007f6 <strstr+0x37>
c00007d7:	53                   	push   ebx
c00007d8:	e8 48 fe ff ff       	call   c0000625 <strlen>
c00007dd:	5a                   	pop    edx
c00007de:	39 f0                	cmp    eax,esi
c00007e0:	72 12                	jb     c00007f4 <strstr+0x35>
c00007e2:	56                   	push   esi
c00007e3:	57                   	push   edi
c00007e4:	53                   	push   ebx
c00007e5:	e8 85 fd ff ff       	call   c000056f <memcmp>
c00007ea:	83 c4 0c             	add    esp,0xc
c00007ed:	85 c0                	test   eax,eax
c00007ef:	74 05                	je     c00007f6 <strstr+0x37>
c00007f1:	43                   	inc    ebx
c00007f2:	eb e3                	jmp    c00007d7 <strstr+0x18>
c00007f4:	31 db                	xor    ebx,ebx
c00007f6:	89 d8                	mov    eax,ebx
c00007f8:	5b                   	pop    ebx
c00007f9:	5e                   	pop    esi
c00007fa:	5f                   	pop    edi
c00007fb:	c3                   	ret    

c00007fc <toupper>:
c00007fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000800:	0f b6 d0             	movzx  edx,al
c0000803:	f6 82 80 ef 01 c0 02 	test   BYTE PTR [edx-0x3ffe1080],0x2
c000080a:	74 03                	je     c000080f <toupper+0x13>
c000080c:	83 e8 20             	sub    eax,0x20
c000080f:	c3                   	ret    

c0000810 <tolower>:
c0000810:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000814:	0f b6 d0             	movzx  edx,al
c0000817:	f6 82 80 ef 01 c0 01 	test   BYTE PTR [edx-0x3ffe1080],0x1
c000081e:	74 03                	je     c0000823 <tolower+0x13>
c0000820:	83 c0 20             	add    eax,0x20
c0000823:	c3                   	ret    

c0000824 <simple_strtoul>:
c0000824:	55                   	push   ebp
c0000825:	57                   	push   edi
c0000826:	56                   	push   esi
c0000827:	53                   	push   ebx
c0000828:	83 ec 08             	sub    esp,0x8
c000082b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000082f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000833:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000836:	f6 82 80 ef 01 c0 08 	test   BYTE PTR [edx-0x3ffe1080],0x8
c000083d:	74 03                	je     c0000842 <simple_strtoul+0x1e>
c000083f:	41                   	inc    ecx
c0000840:	eb f1                	jmp    c0000833 <simple_strtoul+0xf>
c0000842:	80 fa 09             	cmp    dl,0x9
c0000845:	74 f8                	je     c000083f <simple_strtoul+0x1b>
c0000847:	80 fa 2d             	cmp    dl,0x2d
c000084a:	75 0b                	jne    c0000857 <simple_strtoul+0x33>
c000084c:	41                   	inc    ecx
c000084d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000855:	eb 0e                	jmp    c0000865 <simple_strtoul+0x41>
c0000857:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000085f:	80 fa 2b             	cmp    dl,0x2b
c0000862:	75 01                	jne    c0000865 <simple_strtoul+0x41>
c0000864:	41                   	inc    ecx
c0000865:	85 f6                	test   esi,esi
c0000867:	75 22                	jne    c000088b <simple_strtoul+0x67>
c0000869:	be 0a 00 00 00       	mov    esi,0xa
c000086e:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c0000871:	75 5a                	jne    c00008cd <simple_strtoul+0xa9>
c0000873:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000877:	50                   	push   eax
c0000878:	e8 93 ff ff ff       	call   c0000810 <tolower>
c000087d:	5a                   	pop    edx
c000087e:	83 f8 78             	cmp    eax,0x78
c0000881:	74 03                	je     c0000886 <simple_strtoul+0x62>
c0000883:	41                   	inc    ecx
c0000884:	eb 16                	jmp    c000089c <simple_strtoul+0x78>
c0000886:	83 c1 02             	add    ecx,0x2
c0000889:	eb 22                	jmp    c00008ad <simple_strtoul+0x89>
c000088b:	8d 46 fe             	lea    eax,[esi-0x2]
c000088e:	83 f8 22             	cmp    eax,0x22
c0000891:	0f 87 b7 00 00 00    	ja     c000094e <simple_strtoul+0x12a>
c0000897:	83 fe 08             	cmp    esi,0x8
c000089a:	75 0c                	jne    c00008a8 <simple_strtoul+0x84>
c000089c:	be 08 00 00 00       	mov    esi,0x8
c00008a1:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008a4:	75 27                	jne    c00008cd <simple_strtoul+0xa9>
c00008a6:	eb 1f                	jmp    c00008c7 <simple_strtoul+0xa3>
c00008a8:	83 fe 10             	cmp    esi,0x10
c00008ab:	75 20                	jne    c00008cd <simple_strtoul+0xa9>
c00008ad:	be 10 00 00 00       	mov    esi,0x10
c00008b2:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c00008b5:	75 16                	jne    c00008cd <simple_strtoul+0xa9>
c00008b7:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c00008bb:	50                   	push   eax
c00008bc:	e8 4f ff ff ff       	call   c0000810 <tolower>
c00008c1:	5d                   	pop    ebp
c00008c2:	83 f8 78             	cmp    eax,0x78
c00008c5:	74 03                	je     c00008ca <simple_strtoul+0xa6>
c00008c7:	41                   	inc    ecx
c00008c8:	eb 03                	jmp    c00008cd <simple_strtoul+0xa9>
c00008ca:	83 c1 02             	add    ecx,0x2
c00008cd:	31 ed                	xor    ebp,ebp
c00008cf:	31 db                	xor    ebx,ebx
c00008d1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00008d8:	8a 11                	mov    dl,BYTE PTR [ecx]
c00008da:	84 d2                	test   dl,dl
c00008dc:	74 27                	je     c0000905 <simple_strtoul+0xe1>
c00008de:	0f b6 fa             	movzx  edi,dl
c00008e1:	f6 87 80 ef 01 c0 04 	test   BYTE PTR [edi-0x3ffe1080],0x4
c00008e8:	74 05                	je     c00008ef <simple_strtoul+0xcb>
c00008ea:	83 ef 30             	sub    edi,0x30
c00008ed:	eb 22                	jmp    c0000911 <simple_strtoul+0xed>
c00008ef:	0f be d2             	movsx  edx,dl
c00008f2:	52                   	push   edx
c00008f3:	e8 04 ff ff ff       	call   c00007fc <toupper>
c00008f8:	5f                   	pop    edi
c00008f9:	0f b6 d0             	movzx  edx,al
c00008fc:	f6 82 80 ef 01 c0 01 	test   BYTE PTR [edx-0x3ffe1080],0x1
c0000903:	75 09                	jne    c000090e <simple_strtoul+0xea>
c0000905:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000090a:	75 2d                	jne    c0000939 <simple_strtoul+0x115>
c000090c:	eb 57                	jmp    c0000965 <simple_strtoul+0x141>
c000090e:	8d 78 c9             	lea    edi,[eax-0x37]
c0000911:	39 f7                	cmp    edi,esi
c0000913:	73 f0                	jae    c0000905 <simple_strtoul+0xe1>
c0000915:	31 d2                	xor    edx,edx
c0000917:	89 f8                	mov    eax,edi
c0000919:	f7 d0                	not    eax
c000091b:	f7 f6                	div    esi
c000091d:	39 d8                	cmp    eax,ebx
c000091f:	72 0e                	jb     c000092f <simple_strtoul+0x10b>
c0000921:	0f af de             	imul   ebx,esi
c0000924:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000092b:	01 fb                	add    ebx,edi
c000092d:	eb 07                	jmp    c0000936 <simple_strtoul+0x112>
c000092f:	bd 01 00 00 00       	mov    ebp,0x1
c0000934:	31 db                	xor    ebx,ebx
c0000936:	41                   	inc    ecx
c0000937:	eb 9f                	jmp    c00008d8 <simple_strtoul+0xb4>
c0000939:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000093c:	09 d8                	or     eax,ebx
c000093e:	75 1f                	jne    c000095f <simple_strtoul+0x13b>
c0000940:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000944:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000948:	31 db                	xor    ebx,ebx
c000094a:	89 38                	mov    DWORD PTR [eax],edi
c000094c:	eb 17                	jmp    c0000965 <simple_strtoul+0x141>
c000094e:	31 db                	xor    ebx,ebx
c0000950:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000955:	74 14                	je     c000096b <simple_strtoul+0x147>
c0000957:	31 ed                	xor    ebp,ebp
c0000959:	85 c9                	test   ecx,ecx
c000095b:	75 e3                	jne    c0000940 <simple_strtoul+0x11c>
c000095d:	31 db                	xor    ebx,ebx
c000095f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000963:	89 08                	mov    DWORD PTR [eax],ecx
c0000965:	4d                   	dec    ebp
c0000966:	75 03                	jne    c000096b <simple_strtoul+0x147>
c0000968:	83 cb ff             	or     ebx,0xffffffff
c000096b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000970:	75 02                	jne    c0000974 <simple_strtoul+0x150>
c0000972:	f7 db                	neg    ebx
c0000974:	83 c4 08             	add    esp,0x8
c0000977:	89 d8                	mov    eax,ebx
c0000979:	5b                   	pop    ebx
c000097a:	5e                   	pop    esi
c000097b:	5f                   	pop    edi
c000097c:	5d                   	pop    ebp
c000097d:	c3                   	ret    

c000097e <largebin_index>:
c000097e:	89 c2                	mov    edx,eax
c0000980:	c1 ea 08             	shr    edx,0x8
c0000983:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000989:	77 10                	ja     c000099b <largebin_index+0x1d>
c000098b:	0f bd d2             	bsr    edx,edx
c000098e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000991:	d3 e8                	shr    eax,cl
c0000993:	83 e0 03             	and    eax,0x3
c0000996:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c000099a:	c3                   	ret    
c000099b:	b8 5f 00 00 00       	mov    eax,0x5f
c00009a0:	c3                   	ret    

c00009a1 <malloc_init_state>:
c00009a1:	53                   	push   ebx
c00009a2:	8d 50 34             	lea    edx,[eax+0x34]
c00009a5:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c00009ab:	89 d1                	mov    ecx,edx
c00009ad:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c00009b0:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c00009b3:	83 c2 08             	add    edx,0x8
c00009b6:	39 da                	cmp    edx,ebx
c00009b8:	75 f3                	jne    c00009ad <malloc_init_state+0xc>
c00009ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00009bc:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c00009c6:	83 e2 03             	and    edx,0x3
c00009c9:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c00009d3:	83 ca 48             	or     edx,0x48
c00009d6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c00009e0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c00009ea:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c00009f1:	89 10                	mov    DWORD PTR [eax],edx
c00009f3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c00009f6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000a00:	5b                   	pop    ebx
c0000a01:	c3                   	ret    

c0000a02 <malloc_consolidate>:
c0000a02:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a04:	85 d2                	test   edx,edx
c0000a06:	0f 84 d8 00 00 00    	je     c0000ae4 <malloc_consolidate+0xe2>
c0000a0c:	55                   	push   ebp
c0000a0d:	83 e2 fd             	and    edx,0xfffffffd
c0000a10:	57                   	push   edi
c0000a11:	89 c5                	mov    ebp,eax
c0000a13:	56                   	push   esi
c0000a14:	8d 78 34             	lea    edi,[eax+0x34]
c0000a17:	53                   	push   ebx
c0000a18:	83 ec 10             	sub    esp,0x10
c0000a1b:	89 10                	mov    DWORD PTR [eax],edx
c0000a1d:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000a21:	c1 ea 03             	shr    edx,0x3
c0000a24:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000a28:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000a2c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000a2f:	85 d2                	test   edx,edx
c0000a31:	0f 84 98 00 00 00    	je     c0000acf <malloc_consolidate+0xcd>
c0000a37:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000a3e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000a41:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000a44:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000a48:	89 f9                	mov    ecx,edi
c0000a4a:	83 e1 fe             	and    ecx,0xfffffffe
c0000a4d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000a50:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000a53:	83 e3 fc             	and    ebx,0xfffffffc
c0000a56:	83 e7 01             	and    edi,0x1
c0000a59:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000a5c:	75 14                	jne    c0000a72 <malloc_consolidate+0x70>
c0000a5e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000a60:	29 fa                	sub    edx,edi
c0000a62:	01 f9                	add    ecx,edi
c0000a64:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000a67:	89 fb                	mov    ebx,edi
c0000a69:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000a6c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000a6f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000a72:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000a75:	74 40                	je     c0000ab7 <malloc_consolidate+0xb5>
c0000a77:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000a7a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000a7d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000a81:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000a84:	83 e7 01             	and    edi,0x1
c0000a87:	75 0e                	jne    c0000a97 <malloc_consolidate+0x95>
c0000a89:	01 d9                	add    ecx,ebx
c0000a8b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000a8e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000a91:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000a94:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000a97:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000a9a:	89 ce                	mov    esi,ecx
c0000a9c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000a9f:	83 ce 01             	or     esi,0x1
c0000aa2:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000aa5:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000aa8:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000aab:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000aaf:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000ab2:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000ab5:	eb 0c                	jmp    c0000ac3 <malloc_consolidate+0xc1>
c0000ab7:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000aba:	83 c9 01             	or     ecx,0x1
c0000abd:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ac0:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000ac3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000ac7:	85 d2                	test   edx,edx
c0000ac9:	0f 85 6f ff ff ff    	jne    c0000a3e <malloc_consolidate+0x3c>
c0000acf:	83 c5 04             	add    ebp,0x4
c0000ad2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ad6:	0f 85 50 ff ff ff    	jne    c0000a2c <malloc_consolidate+0x2a>
c0000adc:	83 c4 10             	add    esp,0x10
c0000adf:	5b                   	pop    ebx
c0000ae0:	5e                   	pop    esi
c0000ae1:	5f                   	pop    edi
c0000ae2:	5d                   	pop    ebp
c0000ae3:	c3                   	ret    
c0000ae4:	e9 b8 fe ff ff       	jmp    c00009a1 <malloc_init_state>

c0000ae9 <dlfree>:
c0000ae9:	57                   	push   edi
c0000aea:	56                   	push   esi
c0000aeb:	53                   	push   ebx
c0000aec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000af0:	85 db                	test   ebx,ebx
c0000af2:	0f 84 e2 00 00 00    	je     c0000bda <dlfree+0xf1>
c0000af8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000afb:	8b 0d c0 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022ac0
c0000b01:	89 f0                	mov    eax,esi
c0000b03:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000b06:	83 e0 fc             	and    eax,0xfffffffc
c0000b09:	39 c1                	cmp    ecx,eax
c0000b0b:	72 24                	jb     c0000b31 <dlfree+0x48>
c0000b0d:	83 c9 03             	or     ecx,0x3
c0000b10:	c1 e8 03             	shr    eax,0x3
c0000b13:	89 0d c0 2a 02 c0    	mov    DWORD PTR ds:0xc0022ac0,ecx
c0000b19:	83 e8 02             	sub    eax,0x2
c0000b1c:	8b 0c 85 c4 2a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd53c]
c0000b23:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000b25:	89 14 85 c4 2a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd53c],edx
c0000b2c:	e9 a9 00 00 00       	jmp    c0000bda <dlfree+0xf1>
c0000b31:	83 e6 02             	and    esi,0x2
c0000b34:	0f 85 a0 00 00 00    	jne    c0000bda <dlfree+0xf1>
c0000b3a:	83 c9 01             	or     ecx,0x1
c0000b3d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000b40:	89 0d c0 2a 02 c0    	mov    DWORD PTR ds:0xc0022ac0,ecx
c0000b46:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000b49:	83 e1 fc             	and    ecx,0xfffffffc
c0000b4c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000b50:	75 13                	jne    c0000b65 <dlfree+0x7c>
c0000b52:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000b55:	29 da                	sub    edx,ebx
c0000b57:	01 d8                	add    eax,ebx
c0000b59:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b5c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000b5f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b62:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b65:	39 35 ec 2a 02 c0    	cmp    DWORD PTR ds:0xc0022aec,esi
c0000b6b:	74 40                	je     c0000bad <dlfree+0xc4>
c0000b6d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000b71:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000b74:	80 e3 01             	and    bl,0x1
c0000b77:	75 0e                	jne    c0000b87 <dlfree+0x9e>
c0000b79:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000b7c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000b7f:	01 c8                	add    eax,ecx
c0000b81:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000b84:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000b87:	8b 0d fc 2a 02 c0    	mov    ecx,DWORD PTR ds:0xc0022afc
c0000b8d:	c7 42 0c f4 2a 02 c0 	mov    DWORD PTR [edx+0xc],0xc0022af4
c0000b94:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000b97:	89 15 fc 2a 02 c0    	mov    DWORD PTR ds:0xc0022afc,edx
c0000b9d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000ba0:	89 c1                	mov    ecx,eax
c0000ba2:	83 c9 01             	or     ecx,0x1
c0000ba5:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000ba8:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000bab:	eb 10                	jmp    c0000bbd <dlfree+0xd4>
c0000bad:	01 c8                	add    eax,ecx
c0000baf:	89 c1                	mov    ecx,eax
c0000bb1:	83 c9 01             	or     ecx,0x1
c0000bb4:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000bb7:	89 15 ec 2a 02 c0    	mov    DWORD PTR ds:0xc0022aec,edx
c0000bbd:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000bc2:	76 16                	jbe    c0000bda <dlfree+0xf1>
c0000bc4:	f6 05 c0 2a 02 c0 02 	test   BYTE PTR ds:0xc0022ac0,0x2
c0000bcb:	74 0d                	je     c0000bda <dlfree+0xf1>
c0000bcd:	5b                   	pop    ebx
c0000bce:	b8 c0 2a 02 c0       	mov    eax,0xc0022ac0
c0000bd3:	5e                   	pop    esi
c0000bd4:	5f                   	pop    edi
c0000bd5:	e9 28 fe ff ff       	jmp    c0000a02 <malloc_consolidate>
c0000bda:	5b                   	pop    ebx
c0000bdb:	5e                   	pop    esi
c0000bdc:	5f                   	pop    edi
c0000bdd:	c3                   	ret    

c0000bde <sYSMALLOc>:
c0000bde:	55                   	push   ebp
c0000bdf:	57                   	push   edi
c0000be0:	56                   	push   esi
c0000be1:	53                   	push   ebx
c0000be2:	89 d3                	mov    ebx,edx
c0000be4:	83 ec 2c             	sub    esp,0x2c
c0000be7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000beb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000bf1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000bf4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000bf7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000bfb:	74 1f                	je     c0000c1c <sYSMALLOc+0x3e>
c0000bfd:	89 d8                	mov    eax,ebx
c0000bff:	e8 fe fd ff ff       	call   c0000a02 <malloc_consolidate>
c0000c04:	83 ec 0c             	sub    esp,0xc
c0000c07:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000c0b:	83 e8 07             	sub    eax,0x7
c0000c0e:	50                   	push   eax
c0000c0f:	e8 30 02 00 00       	call   c0000e44 <dlmalloc>
c0000c14:	83 c4 10             	add    esp,0x10
c0000c17:	e9 20 02 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c1c:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000c1f:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000c25:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000c28:	83 e0 fc             	and    eax,0xfffffffc
c0000c2b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000c2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000c33:	83 c0 10             	add    eax,0x10
c0000c36:	01 c1                	add    ecx,eax
c0000c38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000c3c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000c43:	74 04                	je     c0000c49 <sYSMALLOc+0x6b>
c0000c45:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000c49:	f7 da                	neg    edx
c0000c4b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000c4f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000c53:	21 d1                	and    ecx,edx
c0000c55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000c59:	7f 07                	jg     c0000c62 <sYSMALLOc+0x84>
c0000c5b:	31 c0                	xor    eax,eax
c0000c5d:	e9 da 01 00 00       	jmp    c0000e3c <sYSMALLOc+0x25e>
c0000c62:	83 ec 0c             	sub    esp,0xc
c0000c65:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000c69:	e8 10 b3 00 00       	call   c000bf7e <sbrk>
c0000c6e:	83 c4 10             	add    esp,0x10
c0000c71:	89 c6                	mov    esi,eax
c0000c73:	83 f8 ff             	cmp    eax,0xffffffff
c0000c76:	74 e3                	je     c0000c5b <sYSMALLOc+0x7d>
c0000c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000c7c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000c80:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000c83:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000c89:	39 f1                	cmp    ecx,esi
c0000c8b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000c91:	75 13                	jne    c0000ca6 <sYSMALLOc+0xc8>
c0000c93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000c97:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000c9b:	83 c8 01             	or     eax,0x1
c0000c9e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000ca1:	e9 3e 01 00 00       	jmp    c0000de4 <sYSMALLOc+0x206>
c0000ca6:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000cac:	88 d0                	mov    al,dl
c0000cae:	83 e0 01             	and    eax,0x1
c0000cb1:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000cb6:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000cba:	0f 95 c0             	setne  al
c0000cbd:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000cc1:	39 f1                	cmp    ecx,esi
c0000cc3:	76 12                	jbe    c0000cd7 <sYSMALLOc+0xf9>
c0000cc5:	84 c0                	test   al,al
c0000cc7:	74 0e                	je     c0000cd7 <sYSMALLOc+0xf9>
c0000cc9:	83 e2 fe             	and    edx,0xfffffffe
c0000ccc:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000cd2:	e9 83 00 00 00       	jmp    c0000d5a <sYSMALLOc+0x17c>
c0000cd7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000cdc:	74 7c                	je     c0000d5a <sYSMALLOc+0x17c>
c0000cde:	84 c0                	test   al,al
c0000ce0:	74 0c                	je     c0000cee <sYSMALLOc+0x110>
c0000ce2:	89 f0                	mov    eax,esi
c0000ce4:	29 c8                	sub    eax,ecx
c0000ce6:	01 e8                	add    eax,ebp
c0000ce8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000cee:	89 f2                	mov    edx,esi
c0000cf0:	83 e2 07             	and    edx,0x7
c0000cf3:	74 0c                	je     c0000d01 <sYSMALLOc+0x123>
c0000cf5:	b8 08 00 00 00       	mov    eax,0x8
c0000cfa:	29 d0                	sub    eax,edx
c0000cfc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000cff:	eb 04                	jmp    c0000d05 <sYSMALLOc+0x127>
c0000d01:	89 f5                	mov    ebp,esi
c0000d03:	31 c0                	xor    eax,eax
c0000d05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000d09:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d11:	01 c1                	add    ecx,eax
c0000d13:	83 ec 0c             	sub    esp,0xc
c0000d16:	01 f1                	add    ecx,esi
c0000d18:	01 ca                	add    edx,ecx
c0000d1a:	29 c8                	sub    eax,ecx
c0000d1c:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000d20:	01 c2                	add    edx,eax
c0000d22:	52                   	push   edx
c0000d23:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000d27:	e8 52 b2 00 00       	call   c000bf7e <sbrk>
c0000d2c:	83 c4 10             	add    esp,0x10
c0000d2f:	83 f8 ff             	cmp    eax,0xffffffff
c0000d32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000d36:	75 0f                	jne    c0000d47 <sYSMALLOc+0x169>
c0000d38:	83 ec 0c             	sub    esp,0xc
c0000d3b:	6a 00                	push   0x0
c0000d3d:	e8 3c b2 00 00       	call   c000bf7e <sbrk>
c0000d42:	83 c4 10             	add    esp,0x10
c0000d45:	eb 30                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d47:	39 c6                	cmp    esi,eax
c0000d49:	76 33                	jbe    c0000d7e <sYSMALLOc+0x1a0>
c0000d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d4f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000d56:	01 f0                	add    eax,esi
c0000d58:	eb 1d                	jmp    c0000d77 <sYSMALLOc+0x199>
c0000d5a:	83 ec 0c             	sub    esp,0xc
c0000d5d:	89 f5                	mov    ebp,esi
c0000d5f:	6a 00                	push   0x0
c0000d61:	e8 18 b2 00 00       	call   c000bf7e <sbrk>
c0000d66:	89 c2                	mov    edx,eax
c0000d68:	29 f2                	sub    edx,esi
c0000d6a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000d6e:	83 c4 10             	add    esp,0x10
c0000d71:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d77:	31 d2                	xor    edx,edx
c0000d79:	83 f8 ff             	cmp    eax,0xffffffff
c0000d7c:	74 66                	je     c0000de4 <sYSMALLOc+0x206>
c0000d7e:	29 e8                	sub    eax,ebp
c0000d80:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000d83:	01 d0                	add    eax,edx
c0000d85:	83 c8 01             	or     eax,0x1
c0000d88:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000d8b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000d91:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000d96:	74 4c                	je     c0000de4 <sYSMALLOc+0x206>
c0000d98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000d9c:	83 e8 0c             	sub    eax,0xc
c0000d9f:	83 e0 f8             	and    eax,0xfffffff8
c0000da2:	89 c2                	mov    edx,eax
c0000da4:	83 ca 01             	or     edx,0x1
c0000da7:	83 f8 0f             	cmp    eax,0xf
c0000daa:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000dad:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000db5:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000dbd:	76 25                	jbe    c0000de4 <sYSMALLOc+0x206>
c0000dbf:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000dc5:	83 ec 0c             	sub    esp,0xc
c0000dc8:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000dd2:	83 c7 08             	add    edi,0x8
c0000dd5:	57                   	push   edi
c0000dd6:	e8 0e fd ff ff       	call   c0000ae9 <dlfree>
c0000ddb:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000de1:	83 c4 10             	add    esp,0x10
c0000de4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000dea:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000df0:	73 06                	jae    c0000df8 <sYSMALLOc+0x21a>
c0000df2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000df8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000dfe:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e04:	73 06                	jae    c0000e0c <sYSMALLOc+0x22e>
c0000e06:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e0c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e0f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e12:	83 e2 fc             	and    edx,0xfffffffc
c0000e15:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000e19:	0f 82 3c fe ff ff    	jb     c0000c5b <sYSMALLOc+0x7d>
c0000e1f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000e23:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e26:	29 fa                	sub    edx,edi
c0000e28:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e2b:	83 ca 01             	or     edx,0x1
c0000e2e:	89 fb                	mov    ebx,edi
c0000e30:	83 c0 08             	add    eax,0x8
c0000e33:	83 cb 01             	or     ebx,0x1
c0000e36:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e39:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e3c:	83 c4 2c             	add    esp,0x2c
c0000e3f:	5b                   	pop    ebx
c0000e40:	5e                   	pop    esi
c0000e41:	5f                   	pop    edi
c0000e42:	5d                   	pop    ebp
c0000e43:	c3                   	ret    

c0000e44 <dlmalloc>:
c0000e44:	55                   	push   ebp
c0000e45:	57                   	push   edi
c0000e46:	56                   	push   esi
c0000e47:	53                   	push   ebx
c0000e48:	83 ec 1c             	sub    esp,0x1c
c0000e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000e4f:	83 f8 df             	cmp    eax,0xffffffdf
c0000e52:	0f 87 70 03 00 00    	ja     c00011c8 <dlmalloc+0x384>
c0000e58:	83 c0 0b             	add    eax,0xb
c0000e5b:	be 10 00 00 00       	mov    esi,0x10
c0000e60:	83 f8 0f             	cmp    eax,0xf
c0000e63:	76 05                	jbe    c0000e6a <dlmalloc+0x26>
c0000e65:	83 e0 f8             	and    eax,0xfffffff8
c0000e68:	89 c6                	mov    esi,eax
c0000e6a:	8b 3d c0 2a 02 c0    	mov    edi,DWORD PTR ds:0xc0022ac0
c0000e70:	f7 c7 01 00 00 00    	test   edi,0x1
c0000e76:	75 17                	jne    c0000e8f <dlmalloc+0x4b>
c0000e78:	85 ff                	test   edi,edi
c0000e7a:	0f 85 05 03 00 00    	jne    c0001185 <dlmalloc+0x341>
c0000e80:	b8 c0 2a 02 c0       	mov    eax,0xc0022ac0
c0000e85:	e8 78 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000e8a:	e9 f6 02 00 00       	jmp    c0001185 <dlmalloc+0x341>
c0000e8f:	39 f7                	cmp    edi,esi
c0000e91:	72 1f                	jb     c0000eb2 <dlmalloc+0x6e>
c0000e93:	89 f2                	mov    edx,esi
c0000e95:	c1 ea 03             	shr    edx,0x3
c0000e98:	83 ea 02             	sub    edx,0x2
c0000e9b:	8b 04 95 c4 2a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd53c]
c0000ea2:	85 c0                	test   eax,eax
c0000ea4:	74 0c                	je     c0000eb2 <dlmalloc+0x6e>
c0000ea6:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000ea9:	89 0c 95 c4 2a 02 c0 	mov    DWORD PTR [edx*4-0x3ffdd53c],ecx
c0000eb0:	eb 30                	jmp    c0000ee2 <dlmalloc+0x9e>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000eba:	77 2e                	ja     c0000eea <dlmalloc+0xa6>
c0000ebc:	c1 e8 03             	shr    eax,0x3
c0000ebf:	8d 14 c5 f4 2a 02 c0 	lea    edx,[eax*8-0x3ffdd50c]
c0000ec6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000eca:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000ecd:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000ed0:	39 c3                	cmp    ebx,eax
c0000ed2:	74 2e                	je     c0000f02 <dlmalloc+0xbe>
c0000ed4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000ed7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000edc:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000edf:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000ee2:	83 c0 08             	add    eax,0x8
c0000ee5:	e9 e0 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000eea:	e8 8f fa ff ff       	call   c000097e <largebin_index>
c0000eef:	83 e7 02             	and    edi,0x2
c0000ef2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef6:	74 0a                	je     c0000f02 <dlmalloc+0xbe>
c0000ef8:	b8 c0 2a 02 c0       	mov    eax,0xc0022ac0
c0000efd:	e8 00 fb ff ff       	call   c0000a02 <malloc_consolidate>
c0000f02:	8d 46 10             	lea    eax,[esi+0x10]
c0000f05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000f09:	8b 1d 00 2b 02 c0    	mov    ebx,DWORD PTR ds:0xc0022b00
c0000f0f:	81 fb f4 2a 02 c0    	cmp    ebx,0xc0022af4
c0000f15:	0f 84 13 01 00 00    	je     c000102e <dlmalloc+0x1ea>
c0000f1b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000f1e:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000f21:	83 e7 fc             	and    edi,0xfffffffc
c0000f24:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f2a:	77 4c                	ja     c0000f78 <dlmalloc+0x134>
c0000f2c:	3d f4 2a 02 c0       	cmp    eax,0xc0022af4
c0000f31:	75 45                	jne    c0000f78 <dlmalloc+0x134>
c0000f33:	39 1d f0 2a 02 c0    	cmp    DWORD PTR ds:0xc0022af0,ebx
c0000f39:	75 3d                	jne    c0000f78 <dlmalloc+0x134>
c0000f3b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000f3f:	73 37                	jae    c0000f78 <dlmalloc+0x134>
c0000f41:	8d 04 33             	lea    eax,[ebx+esi*1]
c0000f44:	89 fa                	mov    edx,edi
c0000f46:	a3 fc 2a 02 c0       	mov    ds:0xc0022afc,eax
c0000f4b:	a3 00 2b 02 c0       	mov    ds:0xc0022b00,eax
c0000f50:	a3 f0 2a 02 c0       	mov    ds:0xc0022af0,eax
c0000f55:	29 f2                	sub    edx,esi
c0000f57:	c7 40 08 f4 2a 02 c0 	mov    DWORD PTR [eax+0x8],0xc0022af4
c0000f5e:	c7 40 0c f4 2a 02 c0 	mov    DWORD PTR [eax+0xc],0xc0022af4
c0000f65:	83 ce 01             	or     esi,0x1
c0000f68:	89 d1                	mov    ecx,edx
c0000f6a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0000f6d:	83 c9 01             	or     ecx,0x1
c0000f70:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0000f73:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0000f76:	eb 15                	jmp    c0000f8d <dlmalloc+0x149>
c0000f78:	a3 00 2b 02 c0       	mov    ds:0xc0022b00,eax
c0000f7d:	39 fe                	cmp    esi,edi
c0000f7f:	c7 40 08 f4 2a 02 c0 	mov    DWORD PTR [eax+0x8],0xc0022af4
c0000f86:	75 0d                	jne    c0000f95 <dlmalloc+0x151>
c0000f88:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0000f8d:	8d 43 08             	lea    eax,[ebx+0x8]
c0000f90:	e9 35 02 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0000f95:	89 f8                	mov    eax,edi
c0000f97:	81 ff ff 00 00 00    	cmp    edi,0xff
c0000f9d:	77 19                	ja     c0000fb8 <dlmalloc+0x174>
c0000f9f:	c1 e8 03             	shr    eax,0x3
c0000fa2:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fa5:	83 c2 0d             	add    edx,0xd
c0000fa8:	8d 2c 95 b8 2a 02 c0 	lea    ebp,[edx*4-0x3ffdd548]
c0000faf:	8b 14 95 c0 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd540]
c0000fb6:	eb 46                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000fb8:	e8 c1 f9 ff ff       	call   c000097e <largebin_index>
c0000fbd:	8d 14 00             	lea    edx,[eax+eax*1]
c0000fc0:	83 c2 0d             	add    edx,0xd
c0000fc3:	8d 0c 95 c0 2a 02 c0 	lea    ecx,[edx*4-0x3ffdd540]
c0000fca:	8b 14 95 c0 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd540]
c0000fd1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0000fd4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0000fd8:	89 d5                	mov    ebp,edx
c0000fda:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0000fde:	74 1e                	je     c0000ffe <dlmalloc+0x1ba>
c0000fe0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0000fe3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0000fe6:	77 12                	ja     c0000ffa <dlmalloc+0x1b6>
c0000fe8:	83 cf 01             	or     edi,0x1
c0000feb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0000fee:	76 05                	jbe    c0000ff5 <dlmalloc+0x1b1>
c0000ff0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0000ff3:	eb f6                	jmp    c0000feb <dlmalloc+0x1a7>
c0000ff5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0000ff8:	eb 04                	jmp    c0000ffe <dlmalloc+0x1ba>
c0000ffa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0000ffe:	89 c7                	mov    edi,eax
c0001000:	88 c1                	mov    cl,al
c0001002:	c1 ff 05             	sar    edi,0x5
c0001005:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001009:	bf 01 00 00 00       	mov    edi,0x1
c000100e:	d3 e7                	shl    edi,cl
c0001010:	89 f8                	mov    eax,edi
c0001012:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0001016:	09 04 bd f4 2d 02 c0 	or     DWORD PTR [edi*4-0x3ffdd20c],eax
c000101d:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001020:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0001023:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c0001026:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001029:	e9 db fe ff ff       	jmp    c0000f09 <dlmalloc+0xc5>
c000102e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001034:	76 78                	jbe    c00010ae <dlmalloc+0x26a>
c0001036:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000103a:	8d 04 c5 f4 2a 02 c0 	lea    eax,[eax*8-0x3ffdd50c]
c0001041:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001044:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001047:	39 ca                	cmp    edx,ecx
c0001049:	74 63                	je     c00010ae <dlmalloc+0x26a>
c000104b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000104e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001051:	83 e3 fc             	and    ebx,0xfffffffc
c0001054:	39 de                	cmp    esi,ebx
c0001056:	77 52                	ja     c00010aa <dlmalloc+0x266>
c0001058:	89 df                	mov    edi,ebx
c000105a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000105d:	29 f7                	sub    edi,esi
c000105f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001062:	01 d3                	add    ebx,edx
c0001064:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001067:	83 ff 0f             	cmp    edi,0xf
c000106a:	8d 42 08             	lea    eax,[edx+0x8]
c000106d:	77 09                	ja     c0001078 <dlmalloc+0x234>
c000106f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001073:	e9 52 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001078:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000107b:	83 ce 01             	or     esi,0x1
c000107e:	89 0d fc 2a 02 c0    	mov    DWORD PTR ds:0xc0022afc,ecx
c0001084:	89 0d 00 2b 02 c0    	mov    DWORD PTR ds:0xc0022b00,ecx
c000108a:	c7 41 08 f4 2a 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0022af4
c0001091:	c7 41 0c f4 2a 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0022af4
c0001098:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000109b:	89 fa                	mov    edx,edi
c000109d:	83 ca 01             	or     edx,0x1
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	89 3b                	mov    DWORD PTR [ebx],edi
c00010a5:	e9 20 01 00 00       	jmp    c00011ca <dlmalloc+0x386>
c00010aa:	89 c2                	mov    edx,eax
c00010ac:	eb 99                	jmp    c0001047 <dlmalloc+0x203>
c00010ae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00010b2:	b8 01 00 00 00       	mov    eax,0x1
c00010b7:	41                   	inc    ecx
c00010b8:	89 cb                	mov    ebx,ecx
c00010ba:	8d 14 cd ec 2a 02 c0 	lea    edx,[ecx*8-0x3ffdd514]
c00010c1:	c1 eb 05             	shr    ebx,0x5
c00010c4:	d3 e0                	shl    eax,cl
c00010c6:	8b 3c 9d f4 2d 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdd20c]
c00010cd:	39 f8                	cmp    eax,edi
c00010cf:	77 04                	ja     c00010d5 <dlmalloc+0x291>
c00010d1:	85 c0                	test   eax,eax
c00010d3:	75 26                	jne    c00010fb <dlmalloc+0x2b7>
c00010d5:	43                   	inc    ebx
c00010d6:	83 fb 02             	cmp    ebx,0x2
c00010d9:	0f 87 a6 00 00 00    	ja     c0001185 <dlmalloc+0x341>
c00010df:	8b 3c 9d f4 2d 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdd20c]
c00010e6:	85 ff                	test   edi,edi
c00010e8:	74 eb                	je     c00010d5 <dlmalloc+0x291>
c00010ea:	89 d8                	mov    eax,ebx
c00010ec:	c1 e0 06             	shl    eax,0x6
c00010ef:	8d 14 85 ec 2a 02 c0 	lea    edx,[eax*4-0x3ffdd514]
c00010f6:	b8 01 00 00 00       	mov    eax,0x1
c00010fb:	85 f8                	test   eax,edi
c00010fd:	75 07                	jne    c0001106 <dlmalloc+0x2c2>
c00010ff:	83 c2 08             	add    edx,0x8
c0001102:	01 c0                	add    eax,eax
c0001104:	eb f5                	jmp    c00010fb <dlmalloc+0x2b7>
c0001106:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001109:	39 ca                	cmp    edx,ecx
c000110b:	75 14                	jne    c0001121 <dlmalloc+0x2dd>
c000110d:	89 c1                	mov    ecx,eax
c000110f:	83 c2 08             	add    edx,0x8
c0001112:	f7 d1                	not    ecx
c0001114:	01 c0                	add    eax,eax
c0001116:	21 cf                	and    edi,ecx
c0001118:	89 3c 9d f4 2d 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdd20c],edi
c000111f:	eb ac                	jmp    c00010cd <dlmalloc+0x289>
c0001121:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0001124:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c0001127:	83 e0 fc             	and    eax,0xfffffffc
c000112a:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c000112d:	89 c3                	mov    ebx,eax
c000112f:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001132:	29 f3                	sub    ebx,esi
c0001134:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001137:	83 fb 0f             	cmp    ebx,0xf
c000113a:	8d 41 08             	lea    eax,[ecx+0x8]
c000113d:	77 09                	ja     c0001148 <dlmalloc+0x304>
c000113f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001143:	e9 82 00 00 00       	jmp    c00011ca <dlmalloc+0x386>
c0001148:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000114b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001151:	89 3d fc 2a 02 c0    	mov    DWORD PTR ds:0xc0022afc,edi
c0001157:	89 3d 00 2b 02 c0    	mov    DWORD PTR ds:0xc0022b00,edi
c000115d:	c7 47 08 f4 2a 02 c0 	mov    DWORD PTR [edi+0x8],0xc0022af4
c0001164:	c7 47 0c f4 2a 02 c0 	mov    DWORD PTR [edi+0xc],0xc0022af4
c000116b:	77 06                	ja     c0001173 <dlmalloc+0x32f>
c000116d:	89 3d f0 2a 02 c0    	mov    DWORD PTR ds:0xc0022af0,edi
c0001173:	83 ce 01             	or     esi,0x1
c0001176:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001179:	89 d9                	mov    ecx,ebx
c000117b:	83 c9 01             	or     ecx,0x1
c000117e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001181:	89 1a                	mov    DWORD PTR [edx],ebx
c0001183:	eb 45                	jmp    c00011ca <dlmalloc+0x386>
c0001185:	a1 ec 2a 02 c0       	mov    eax,ds:0xc0022aec
c000118a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000118d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001190:	83 e2 fc             	and    edx,0xfffffffc
c0001193:	39 d1                	cmp    ecx,edx
c0001195:	77 1e                	ja     c00011b5 <dlmalloc+0x371>
c0001197:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000119a:	89 f3                	mov    ebx,esi
c000119c:	89 0d ec 2a 02 c0    	mov    DWORD PTR ds:0xc0022aec,ecx
c00011a2:	83 cb 01             	or     ebx,0x1
c00011a5:	29 f2                	sub    edx,esi
c00011a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00011aa:	83 ca 01             	or     edx,0x1
c00011ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00011b0:	e9 2d fd ff ff       	jmp    c0000ee2 <dlmalloc+0x9e>
c00011b5:	83 c4 1c             	add    esp,0x1c
c00011b8:	89 f0                	mov    eax,esi
c00011ba:	5b                   	pop    ebx
c00011bb:	ba c0 2a 02 c0       	mov    edx,0xc0022ac0
c00011c0:	5e                   	pop    esi
c00011c1:	5f                   	pop    edi
c00011c2:	5d                   	pop    ebp
c00011c3:	e9 16 fa ff ff       	jmp    c0000bde <sYSMALLOc>
c00011c8:	31 c0                	xor    eax,eax
c00011ca:	83 c4 1c             	add    esp,0x1c
c00011cd:	5b                   	pop    ebx
c00011ce:	5e                   	pop    esi
c00011cf:	5f                   	pop    edi
c00011d0:	5d                   	pop    ebp
c00011d1:	c3                   	ret    

c00011d2 <iALLOc>:
c00011d2:	55                   	push   ebp
c00011d3:	89 c5                	mov    ebp,eax
c00011d5:	57                   	push   edi
c00011d6:	56                   	push   esi
c00011d7:	53                   	push   ebx
c00011d8:	83 ec 2c             	sub    esp,0x2c
c00011db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00011df:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00011e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011e7:	83 3d c0 2a 02 c0 00 	cmp    DWORD PTR ds:0xc0022ac0,0x0
c00011ee:	75 12                	jne    c0001202 <iALLOc+0x30>
c00011f0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00011f4:	b8 c0 2a 02 c0       	mov    eax,0xc0022ac0
c00011f9:	e8 04 f8 ff ff       	call   c0000a02 <malloc_consolidate>
c00011fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001202:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001207:	74 12                	je     c000121b <iALLOc+0x49>
c0001209:	85 ed                	test   ebp,ebp
c000120b:	0f 84 64 01 00 00    	je     c0001375 <iALLOc+0x1a3>
c0001211:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001219:	eb 33                	jmp    c000124e <iALLOc+0x7c>
c000121b:	85 ed                	test   ebp,ebp
c000121d:	75 14                	jne    c0001233 <iALLOc+0x61>
c000121f:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0001227:	83 c4 2c             	add    esp,0x2c
c000122a:	5b                   	pop    ebx
c000122b:	5e                   	pop    esi
c000122c:	5f                   	pop    edi
c000122d:	5d                   	pop    ebp
c000122e:	e9 11 fc ff ff       	jmp    c0000e44 <dlmalloc>
c0001233:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000123a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001242:	83 f8 0f             	cmp    eax,0xf
c0001245:	76 07                	jbe    c000124e <iALLOc+0x7c>
c0001247:	83 e0 f8             	and    eax,0xfffffff8
c000124a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000124e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001253:	75 09                	jne    c000125e <iALLOc+0x8c>
c0001255:	89 d0                	mov    eax,edx
c0001257:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000125a:	31 f6                	xor    esi,esi
c000125c:	eb 3b                	jmp    c0001299 <iALLOc+0xc7>
c000125e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001260:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001268:	83 c0 0b             	add    eax,0xb
c000126b:	83 f8 0f             	cmp    eax,0xf
c000126e:	76 07                	jbe    c0001277 <iALLOc+0xa5>
c0001270:	83 e0 f8             	and    eax,0xfffffff8
c0001273:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001277:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000127b:	0f af f5             	imul   esi,ebp
c000127e:	eb 25                	jmp    c00012a5 <iALLOc+0xd3>
c0001280:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001282:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001285:	bb 10 00 00 00       	mov    ebx,0x10
c000128a:	83 f9 0f             	cmp    ecx,0xf
c000128d:	76 05                	jbe    c0001294 <iALLOc+0xc2>
c000128f:	83 e1 f8             	and    ecx,0xfffffff8
c0001292:	89 cb                	mov    ebx,ecx
c0001294:	01 de                	add    esi,ebx
c0001296:	83 c0 04             	add    eax,0x4
c0001299:	39 c7                	cmp    edi,eax
c000129b:	75 e3                	jne    c0001280 <iALLOc+0xae>
c000129d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00012a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00012a9:	8b 1d 14 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022e14
c00012af:	83 ec 0c             	sub    esp,0xc
c00012b2:	c7 05 14 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e14,0x0
c00012bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00012c0:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c00012c4:	50                   	push   eax
c00012c5:	e8 7a fb ff ff       	call   c0000e44 <dlmalloc>
c00012ca:	83 c4 10             	add    esp,0x10
c00012cd:	89 1d 14 2e 02 c0    	mov    DWORD PTR ds:0xc0022e14,ebx
c00012d3:	85 c0                	test   eax,eax
c00012d5:	0f 84 92 00 00 00    	je     c000136d <iALLOc+0x19b>
c00012db:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00012de:	8d 78 f8             	lea    edi,[eax-0x8]
c00012e1:	83 e3 fc             	and    ebx,0xfffffffc
c00012e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00012e8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00012ed:	74 1e                	je     c000130d <iALLOc+0x13b>
c00012ef:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00012f3:	89 d9                	mov    ecx,ebx
c00012f5:	52                   	push   edx
c00012f6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00012fa:	83 e9 04             	sub    ecx,0x4
c00012fd:	51                   	push   ecx
c00012fe:	6a 00                	push   0x0
c0001300:	50                   	push   eax
c0001301:	e8 02 f3 ff ff       	call   c0000608 <memset>
c0001306:	83 c4 10             	add    esp,0x10
c0001309:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000130d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001312:	75 14                	jne    c0001328 <iALLOc+0x156>
c0001314:	8d 04 37             	lea    eax,[edi+esi*1]
c0001317:	29 f3                	sub    ebx,esi
c0001319:	8d 48 08             	lea    ecx,[eax+0x8]
c000131c:	83 cb 01             	or     ebx,0x1
c000131f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001323:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001326:	89 f3                	mov    ebx,esi
c0001328:	31 c0                	xor    eax,eax
c000132a:	4d                   	dec    ebp
c000132b:	8d 4f 08             	lea    ecx,[edi+0x8]
c000132e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001332:	39 c5                	cmp    ebp,eax
c0001334:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001337:	74 2c                	je     c0001365 <iALLOc+0x193>
c0001339:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000133d:	85 c9                	test   ecx,ecx
c000133f:	75 15                	jne    c0001356 <iALLOc+0x184>
c0001341:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001344:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001347:	b9 10 00 00 00       	mov    ecx,0x10
c000134c:	83 fe 0f             	cmp    esi,0xf
c000134f:	76 05                	jbe    c0001356 <iALLOc+0x184>
c0001351:	83 e6 f8             	and    esi,0xfffffff8
c0001354:	89 f1                	mov    ecx,esi
c0001356:	89 ce                	mov    esi,ecx
c0001358:	29 cb                	sub    ebx,ecx
c000135a:	83 ce 01             	or     esi,0x1
c000135d:	40                   	inc    eax
c000135e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001361:	01 cf                	add    edi,ecx
c0001363:	eb c6                	jmp    c000132b <iALLOc+0x159>
c0001365:	83 cb 01             	or     ebx,0x1
c0001368:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000136b:	eb 08                	jmp    c0001375 <iALLOc+0x1a3>
c000136d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001375:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001379:	83 c4 2c             	add    esp,0x2c
c000137c:	5b                   	pop    ebx
c000137d:	5e                   	pop    esi
c000137e:	5f                   	pop    edi
c000137f:	5d                   	pop    ebp
c0001380:	c3                   	ret    

c0001381 <dlrealloc>:
c0001381:	55                   	push   ebp
c0001382:	57                   	push   edi
c0001383:	56                   	push   esi
c0001384:	53                   	push   ebx
c0001385:	83 ec 1c             	sub    esp,0x1c
c0001388:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000138c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001390:	85 db                	test   ebx,ebx
c0001392:	75 10                	jne    c00013a4 <dlrealloc+0x23>
c0001394:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001398:	83 c4 1c             	add    esp,0x1c
c000139b:	5b                   	pop    ebx
c000139c:	5e                   	pop    esi
c000139d:	5f                   	pop    edi
c000139e:	5d                   	pop    ebp
c000139f:	e9 a0 fa ff ff       	jmp    c0000e44 <dlmalloc>
c00013a4:	83 f8 df             	cmp    eax,0xffffffdf
c00013a7:	76 07                	jbe    c00013b0 <dlrealloc+0x2f>
c00013a9:	31 db                	xor    ebx,ebx
c00013ab:	e9 7c 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c00013b0:	83 c0 0b             	add    eax,0xb
c00013b3:	bf 10 00 00 00       	mov    edi,0x10
c00013b8:	83 f8 0f             	cmp    eax,0xf
c00013bb:	76 05                	jbe    c00013c2 <dlrealloc+0x41>
c00013bd:	83 e0 f8             	and    eax,0xfffffff8
c00013c0:	89 c7                	mov    edi,eax
c00013c2:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c00013c5:	8d 6b f8             	lea    ebp,[ebx-0x8]
c00013c8:	89 c6                	mov    esi,eax
c00013ca:	83 e6 fc             	and    esi,0xfffffffc
c00013cd:	a8 02                	test   al,0x2
c00013cf:	75 d8                	jne    c00013a9 <dlrealloc+0x28>
c00013d1:	39 f7                	cmp    edi,esi
c00013d3:	0f 86 15 01 00 00    	jbe    c00014ee <dlrealloc+0x16d>
c00013d9:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00013dd:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00013e0:	39 15 ec 2a 02 c0    	cmp    DWORD PTR ds:0xc0022aec,edx
c00013e6:	75 33                	jne    c000141b <dlrealloc+0x9a>
c00013e8:	83 e1 fc             	and    ecx,0xfffffffc
c00013eb:	01 f1                	add    ecx,esi
c00013ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013f1:	8d 4f 10             	lea    ecx,[edi+0x10]
c00013f4:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00013f8:	77 49                	ja     c0001443 <dlrealloc+0xc2>
c00013fa:	01 fd                	add    ebp,edi
c00013fc:	83 e0 01             	and    eax,0x1
c00013ff:	09 f8                	or     eax,edi
c0001401:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c0001404:	89 2d ec 2a 02 c0    	mov    DWORD PTR ds:0xc0022aec,ebp
c000140a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000140e:	29 f8                	sub    eax,edi
c0001410:	83 c8 01             	or     eax,0x1
c0001413:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001416:	e9 11 01 00 00       	jmp    c000152c <dlrealloc+0x1ab>
c000141b:	89 c8                	mov    eax,ecx
c000141d:	83 e0 fe             	and    eax,0xfffffffe
c0001420:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c0001425:	75 1c                	jne    c0001443 <dlrealloc+0xc2>
c0001427:	83 e1 fc             	and    ecx,0xfffffffc
c000142a:	01 f1                	add    ecx,esi
c000142c:	39 cf                	cmp    edi,ecx
c000142e:	77 13                	ja     c0001443 <dlrealloc+0xc2>
c0001430:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001433:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001436:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001439:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000143c:	89 ce                	mov    esi,ecx
c000143e:	e9 ab 00 00 00       	jmp    c00014ee <dlrealloc+0x16d>
c0001443:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001447:	8d 47 f9             	lea    eax,[edi-0x7]
c000144a:	83 ec 0c             	sub    esp,0xc
c000144d:	50                   	push   eax
c000144e:	e8 f1 f9 ff ff       	call   c0000e44 <dlmalloc>
c0001453:	83 c4 10             	add    esp,0x10
c0001456:	89 c1                	mov    ecx,eax
c0001458:	85 c0                	test   eax,eax
c000145a:	0f 84 49 ff ff ff    	je     c00013a9 <dlrealloc+0x28>
c0001460:	8d 40 f8             	lea    eax,[eax-0x8]
c0001463:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001467:	39 c2                	cmp    edx,eax
c0001469:	75 0a                	jne    c0001475 <dlrealloc+0xf4>
c000146b:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000146e:	83 e0 fc             	and    eax,0xfffffffc
c0001471:	01 c6                	add    esi,eax
c0001473:	eb 79                	jmp    c00014ee <dlrealloc+0x16d>
c0001475:	83 ee 04             	sub    esi,0x4
c0001478:	83 fe 27             	cmp    esi,0x27
c000147b:	76 16                	jbe    c0001493 <dlrealloc+0x112>
c000147d:	50                   	push   eax
c000147e:	56                   	push   esi
c000147f:	53                   	push   ebx
c0001480:	51                   	push   ecx
c0001481:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001485:	e8 48 f1 ff ff       	call   c00005d2 <memcpy>
c000148a:	83 c4 10             	add    esp,0x10
c000148d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001491:	eb 43                	jmp    c00014d6 <dlrealloc+0x155>
c0001493:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001495:	83 fe 13             	cmp    esi,0x13
c0001498:	89 01                	mov    DWORD PTR [ecx],eax
c000149a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000149d:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c00014a0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00014a3:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00014a6:	76 2e                	jbe    c00014d6 <dlrealloc+0x155>
c00014a8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00014ab:	83 fe 1b             	cmp    esi,0x1b
c00014ae:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00014b1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00014b4:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c00014b7:	76 1d                	jbe    c00014d6 <dlrealloc+0x155>
c00014b9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00014bc:	83 fe 23             	cmp    esi,0x23
c00014bf:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00014c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00014c5:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c00014c8:	76 0c                	jbe    c00014d6 <dlrealloc+0x155>
c00014ca:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00014cd:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00014d0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00014d3:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00014d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014da:	83 ec 0c             	sub    esp,0xc
c00014dd:	53                   	push   ebx
c00014de:	e8 06 f6 ff ff       	call   c0000ae9 <dlfree>
c00014e3:	83 c4 10             	add    esp,0x10
c00014e6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00014ea:	89 cb                	mov    ebx,ecx
c00014ec:	eb 3e                	jmp    c000152c <dlrealloc+0x1ab>
c00014ee:	89 f2                	mov    edx,esi
c00014f0:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00014f3:	29 fa                	sub    edx,edi
c00014f5:	83 e1 01             	and    ecx,0x1
c00014f8:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00014fc:	83 fa 0f             	cmp    edx,0xf
c00014ff:	77 0b                	ja     c000150c <dlrealloc+0x18b>
c0001501:	09 ce                	or     esi,ecx
c0001503:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c0001506:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000150a:	eb 20                	jmp    c000152c <dlrealloc+0x1ab>
c000150c:	01 fd                	add    ebp,edi
c000150e:	83 ec 0c             	sub    esp,0xc
c0001511:	09 cf                	or     edi,ecx
c0001513:	83 ca 01             	or     edx,0x1
c0001516:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c0001519:	83 c5 08             	add    ebp,0x8
c000151c:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c000151f:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001523:	55                   	push   ebp
c0001524:	e8 c0 f5 ff ff       	call   c0000ae9 <dlfree>
c0001529:	83 c4 10             	add    esp,0x10
c000152c:	83 c4 1c             	add    esp,0x1c
c000152f:	89 d8                	mov    eax,ebx
c0001531:	5b                   	pop    ebx
c0001532:	5e                   	pop    esi
c0001533:	5f                   	pop    edi
c0001534:	5d                   	pop    ebp
c0001535:	c3                   	ret    

c0001536 <dlmemalign>:
c0001536:	55                   	push   ebp
c0001537:	57                   	push   edi
c0001538:	56                   	push   esi
c0001539:	53                   	push   ebx
c000153a:	83 ec 0c             	sub    esp,0xc
c000153d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001541:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001545:	83 fa 08             	cmp    edx,0x8
c0001548:	77 10                	ja     c000155a <dlmemalign+0x24>
c000154a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000154e:	83 c4 0c             	add    esp,0xc
c0001551:	5b                   	pop    ebx
c0001552:	5e                   	pop    esi
c0001553:	5f                   	pop    edi
c0001554:	5d                   	pop    ebp
c0001555:	e9 ea f8 ff ff       	jmp    c0000e44 <dlmalloc>
c000155a:	bf 10 00 00 00       	mov    edi,0x10
c000155f:	83 fa 0f             	cmp    edx,0xf
c0001562:	76 13                	jbe    c0001577 <dlmemalign+0x41>
c0001564:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001567:	85 d1                	test   ecx,edx
c0001569:	75 04                	jne    c000156f <dlmemalign+0x39>
c000156b:	89 d7                	mov    edi,edx
c000156d:	eb 08                	jmp    c0001577 <dlmemalign+0x41>
c000156f:	39 d7                	cmp    edi,edx
c0001571:	73 04                	jae    c0001577 <dlmemalign+0x41>
c0001573:	01 ff                	add    edi,edi
c0001575:	eb f8                	jmp    c000156f <dlmemalign+0x39>
c0001577:	83 f8 df             	cmp    eax,0xffffffdf
c000157a:	76 07                	jbe    c0001583 <dlmemalign+0x4d>
c000157c:	31 c0                	xor    eax,eax
c000157e:	e9 ce 00 00 00       	jmp    c0001651 <dlmemalign+0x11b>
c0001583:	83 c0 0b             	add    eax,0xb
c0001586:	bd 10 00 00 00       	mov    ebp,0x10
c000158b:	83 f8 0f             	cmp    eax,0xf
c000158e:	76 05                	jbe    c0001595 <dlmemalign+0x5f>
c0001590:	83 e0 f8             	and    eax,0xfffffff8
c0001593:	89 c5                	mov    ebp,eax
c0001595:	83 ec 0c             	sub    esp,0xc
c0001598:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000159c:	50                   	push   eax
c000159d:	e8 a2 f8 ff ff       	call   c0000e44 <dlmalloc>
c00015a2:	83 c4 10             	add    esp,0x10
c00015a5:	89 c1                	mov    ecx,eax
c00015a7:	85 c0                	test   eax,eax
c00015a9:	74 d1                	je     c000157c <dlmemalign+0x46>
c00015ab:	31 d2                	xor    edx,edx
c00015ad:	8d 70 f8             	lea    esi,[eax-0x8]
c00015b0:	f7 f7                	div    edi
c00015b2:	85 d2                	test   edx,edx
c00015b4:	74 62                	je     c0001618 <dlmemalign+0xe2>
c00015b6:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00015ba:	89 f8                	mov    eax,edi
c00015bc:	f7 d8                	neg    eax
c00015be:	21 c3                	and    ebx,eax
c00015c0:	83 eb 08             	sub    ebx,0x8
c00015c3:	89 d8                	mov    eax,ebx
c00015c5:	29 f0                	sub    eax,esi
c00015c7:	83 f8 0f             	cmp    eax,0xf
c00015ca:	77 02                	ja     c00015ce <dlmemalign+0x98>
c00015cc:	01 fb                	add    ebx,edi
c00015ce:	89 d8                	mov    eax,ebx
c00015d0:	29 f0                	sub    eax,esi
c00015d2:	89 c6                	mov    esi,eax
c00015d4:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00015d7:	89 c2                	mov    edx,eax
c00015d9:	83 e2 fc             	and    edx,0xfffffffc
c00015dc:	29 f2                	sub    edx,esi
c00015de:	a8 02                	test   al,0x2
c00015e0:	74 10                	je     c00015f2 <dlmemalign+0xbc>
c00015e2:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00015e5:	83 ca 02             	or     edx,0x2
c00015e8:	8d 43 08             	lea    eax,[ebx+0x8]
c00015eb:	89 33                	mov    DWORD PTR [ebx],esi
c00015ed:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00015f0:	eb 5f                	jmp    c0001651 <dlmemalign+0x11b>
c00015f2:	83 ec 0c             	sub    esp,0xc
c00015f5:	89 d0                	mov    eax,edx
c00015f7:	83 c8 01             	or     eax,0x1
c00015fa:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00015fd:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001602:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001605:	83 e0 01             	and    eax,0x1
c0001608:	09 f0                	or     eax,esi
c000160a:	89 de                	mov    esi,ebx
c000160c:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c000160f:	51                   	push   ecx
c0001610:	e8 d4 f4 ff ff       	call   c0000ae9 <dlfree>
c0001615:	83 c4 10             	add    esp,0x10
c0001618:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000161b:	a8 02                	test   al,0x2
c000161d:	75 2f                	jne    c000164e <dlmemalign+0x118>
c000161f:	83 e0 fc             	and    eax,0xfffffffc
c0001622:	8d 55 10             	lea    edx,[ebp+0x10]
c0001625:	39 c2                	cmp    edx,eax
c0001627:	73 25                	jae    c000164e <dlmemalign+0x118>
c0001629:	8d 14 2e             	lea    edx,[esi+ebp*1]
c000162c:	83 ec 0c             	sub    esp,0xc
c000162f:	29 e8                	sub    eax,ebp
c0001631:	83 c2 08             	add    edx,0x8
c0001634:	83 c8 01             	or     eax,0x1
c0001637:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000163a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000163d:	83 e0 01             	and    eax,0x1
c0001640:	09 c5                	or     ebp,eax
c0001642:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001645:	52                   	push   edx
c0001646:	e8 9e f4 ff ff       	call   c0000ae9 <dlfree>
c000164b:	83 c4 10             	add    esp,0x10
c000164e:	8d 46 08             	lea    eax,[esi+0x8]
c0001651:	83 c4 0c             	add    esp,0xc
c0001654:	5b                   	pop    ebx
c0001655:	5e                   	pop    esi
c0001656:	5f                   	pop    edi
c0001657:	5d                   	pop    ebp
c0001658:	c3                   	ret    

c0001659 <dlcalloc>:
c0001659:	53                   	push   ebx
c000165a:	83 ec 14             	sub    esp,0x14
c000165d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001661:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001666:	50                   	push   eax
c0001667:	e8 d8 f7 ff ff       	call   c0000e44 <dlmalloc>
c000166c:	83 c4 10             	add    esp,0x10
c000166f:	89 c3                	mov    ebx,eax
c0001671:	85 c0                	test   eax,eax
c0001673:	74 77                	je     c00016ec <dlcalloc+0x93>
c0001675:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001678:	89 d0                	mov    eax,edx
c000167a:	83 e0 fc             	and    eax,0xfffffffc
c000167d:	80 e2 02             	and    dl,0x2
c0001680:	75 5a                	jne    c00016dc <dlcalloc+0x83>
c0001682:	83 e8 04             	sub    eax,0x4
c0001685:	83 f8 27             	cmp    eax,0x27
c0001688:	76 03                	jbe    c000168d <dlcalloc+0x34>
c000168a:	51                   	push   ecx
c000168b:	eb 53                	jmp    c00016e0 <dlcalloc+0x87>
c000168d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001693:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000169a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00016a1:	83 f8 13             	cmp    eax,0x13
c00016a4:	76 46                	jbe    c00016ec <dlcalloc+0x93>
c00016a6:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00016ad:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00016b4:	83 f8 1b             	cmp    eax,0x1b
c00016b7:	76 33                	jbe    c00016ec <dlcalloc+0x93>
c00016b9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00016c0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00016c7:	83 f8 23             	cmp    eax,0x23
c00016ca:	76 20                	jbe    c00016ec <dlcalloc+0x93>
c00016cc:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00016d3:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00016da:	eb 10                	jmp    c00016ec <dlcalloc+0x93>
c00016dc:	83 e8 08             	sub    eax,0x8
c00016df:	52                   	push   edx
c00016e0:	50                   	push   eax
c00016e1:	6a 00                	push   0x0
c00016e3:	53                   	push   ebx
c00016e4:	e8 1f ef ff ff       	call   c0000608 <memset>
c00016e9:	83 c4 10             	add    esp,0x10
c00016ec:	89 d8                	mov    eax,ebx
c00016ee:	83 c4 08             	add    esp,0x8
c00016f1:	5b                   	pop    ebx
c00016f2:	c3                   	ret    

c00016f3 <dlcfree>:
c00016f3:	e9 f1 f3 ff ff       	jmp    c0000ae9 <dlfree>

c00016f8 <dlindependent_calloc>:
c00016f8:	83 ec 28             	sub    esp,0x28
c00016fb:	b9 03 00 00 00       	mov    ecx,0x3
c0001700:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001704:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001708:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000170c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001710:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001714:	e8 b9 fa ff ff       	call   c00011d2 <iALLOc>
c0001719:	83 c4 2c             	add    esp,0x2c
c000171c:	c3                   	ret    

c000171d <dlindependent_comalloc>:
c000171d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001721:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001725:	31 c9                	xor    ecx,ecx
c0001727:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000172b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000172f:	e9 9e fa ff ff       	jmp    c00011d2 <iALLOc>

c0001734 <dlvalloc>:
c0001734:	83 ec 0c             	sub    esp,0xc
c0001737:	83 3d c0 2a 02 c0 00 	cmp    DWORD PTR ds:0xc0022ac0,0x0
c000173e:	75 0a                	jne    c000174a <dlvalloc+0x16>
c0001740:	b8 c0 2a 02 c0       	mov    eax,0xc0022ac0
c0001745:	e8 b8 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000174a:	50                   	push   eax
c000174b:	50                   	push   eax
c000174c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001750:	ff 35 1c 2e 02 c0    	push   DWORD PTR ds:0xc0022e1c
c0001756:	e8 db fd ff ff       	call   c0001536 <dlmemalign>
c000175b:	83 c4 1c             	add    esp,0x1c
c000175e:	c3                   	ret    

c000175f <dlpvalloc>:
c000175f:	83 ec 0c             	sub    esp,0xc
c0001762:	83 3d c0 2a 02 c0 00 	cmp    DWORD PTR ds:0xc0022ac0,0x0
c0001769:	75 0a                	jne    c0001775 <dlpvalloc+0x16>
c000176b:	b8 c0 2a 02 c0       	mov    eax,0xc0022ac0
c0001770:	e8 8d f2 ff ff       	call   c0000a02 <malloc_consolidate>
c0001775:	a1 1c 2e 02 c0       	mov    eax,ds:0xc0022e1c
c000177a:	89 c1                	mov    ecx,eax
c000177c:	52                   	push   edx
c000177d:	f7 d9                	neg    ecx
c000177f:	52                   	push   edx
c0001780:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001784:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001788:	21 ca                	and    edx,ecx
c000178a:	52                   	push   edx
c000178b:	50                   	push   eax
c000178c:	e8 a5 fd ff ff       	call   c0001536 <dlmemalign>
c0001791:	83 c4 1c             	add    esp,0x1c
c0001794:	c3                   	ret    

c0001795 <dlmalloc_trim>:
c0001795:	b8 c0 2a 02 c0       	mov    eax,0xc0022ac0
c000179a:	e8 63 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c000179f:	31 c0                	xor    eax,eax
c00017a1:	c3                   	ret    

c00017a2 <dlmalloc_usable_size>:
c00017a2:	53                   	push   ebx
c00017a3:	31 c0                	xor    eax,eax
c00017a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00017a9:	85 c9                	test   ecx,ecx
c00017ab:	74 24                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017ad:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c00017b0:	f6 c2 02             	test   dl,0x2
c00017b3:	74 08                	je     c00017bd <dlmalloc_usable_size+0x1b>
c00017b5:	83 e2 fc             	and    edx,0xfffffffc
c00017b8:	8d 42 f8             	lea    eax,[edx-0x8]
c00017bb:	eb 14                	jmp    c00017d1 <dlmalloc_usable_size+0x2f>
c00017bd:	89 d3                	mov    ebx,edx
c00017bf:	31 c0                	xor    eax,eax
c00017c1:	83 e3 fe             	and    ebx,0xfffffffe
c00017c4:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c00017c9:	74 06                	je     c00017d1 <dlmalloc_usable_size+0x2f>
c00017cb:	83 e2 fc             	and    edx,0xfffffffc
c00017ce:	8d 42 fc             	lea    eax,[edx-0x4]
c00017d1:	5b                   	pop    ebx
c00017d2:	c3                   	ret    

c00017d3 <dlmallinfo>:
c00017d3:	55                   	push   ebp
c00017d4:	57                   	push   edi
c00017d5:	56                   	push   esi
c00017d6:	53                   	push   ebx
c00017d7:	83 ec 08             	sub    esp,0x8
c00017da:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00017de:	83 3d ec 2a 02 c0 00 	cmp    DWORD PTR ds:0xc0022aec,0x0
c00017e5:	75 0a                	jne    c00017f1 <dlmallinfo+0x1e>
c00017e7:	b8 c0 2a 02 c0       	mov    eax,0xc0022ac0
c00017ec:	e8 11 f2 ff ff       	call   c0000a02 <malloc_consolidate>
c00017f1:	a1 ec 2a 02 c0       	mov    eax,ds:0xc0022aec
c00017f6:	31 ed                	xor    ebp,ebp
c00017f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00017fb:	31 c9                	xor    ecx,ecx
c00017fd:	83 e0 fc             	and    eax,0xfffffffc
c0001800:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001804:	31 c0                	xor    eax,eax
c0001806:	8b 14 85 c4 2a 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd53c]
c000180d:	85 d2                	test   edx,edx
c000180f:	74 0e                	je     c000181f <dlmallinfo+0x4c>
c0001811:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001814:	45                   	inc    ebp
c0001815:	83 e6 fc             	and    esi,0xfffffffc
c0001818:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000181b:	01 f1                	add    ecx,esi
c000181d:	eb ee                	jmp    c000180d <dlmallinfo+0x3a>
c000181f:	40                   	inc    eax
c0001820:	83 f8 0a             	cmp    eax,0xa
c0001823:	75 e1                	jne    c0001806 <dlmallinfo+0x33>
c0001825:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001829:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001830:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001833:	b8 f4 2a 02 c0       	mov    eax,0xc0022af4
c0001838:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c000183b:	39 f0                	cmp    eax,esi
c000183d:	74 10                	je     c000184f <dlmallinfo+0x7c>
c000183f:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001842:	ff 04 24             	inc    DWORD PTR [esp]
c0001845:	83 e7 fc             	and    edi,0xfffffffc
c0001848:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c000184b:	01 fa                	add    edx,edi
c000184d:	eb ec                	jmp    c000183b <dlmallinfo+0x68>
c000184f:	83 c0 08             	add    eax,0x8
c0001852:	3d ec 2d 02 c0       	cmp    eax,0xc0022dec
c0001857:	75 df                	jne    c0001838 <dlmallinfo+0x65>
c0001859:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000185c:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c000185f:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001862:	a1 28 2e 02 c0       	mov    eax,ds:0xc0022e28
c0001867:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000186a:	89 03                	mov    DWORD PTR [ebx],eax
c000186c:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c000186f:	8b 35 10 2e 02 c0    	mov    esi,DWORD PTR ds:0xc0022e10
c0001875:	29 d0                	sub    eax,edx
c0001877:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c000187a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000187d:	8b 35 24 2e 02 c0    	mov    esi,DWORD PTR ds:0xc0022e24
c0001883:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001887:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c000188a:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000188d:	8b 35 34 2e 02 c0    	mov    esi,DWORD PTR ds:0xc0022e34
c0001893:	89 d8                	mov    eax,ebx
c0001895:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001898:	83 c4 08             	add    esp,0x8
c000189b:	5b                   	pop    ebx
c000189c:	5e                   	pop    esi
c000189d:	5f                   	pop    edi
c000189e:	5d                   	pop    ebp
c000189f:	c2 04 00             	ret    0x4

c00018a2 <dlmalloc_stats>:
c00018a2:	83 ec 30             	sub    esp,0x30
c00018a5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00018a9:	50                   	push   eax
c00018aa:	e8 24 ff ff ff       	call   c00017d3 <dlmallinfo>
c00018af:	83 c4 30             	add    esp,0x30
c00018b2:	c3                   	ret    

c00018b3 <dlmallopt>:
c00018b3:	56                   	push   esi
c00018b4:	b8 c0 2a 02 c0       	mov    eax,0xc0022ac0
c00018b9:	53                   	push   ebx
c00018ba:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00018be:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00018c2:	e8 3b f1 ff ff       	call   c0000a02 <malloc_consolidate>
c00018c7:	8d 46 04             	lea    eax,[esi+0x4]
c00018ca:	83 f8 05             	cmp    eax,0x5
c00018cd:	77 67                	ja     c0001936 <dlmallopt+0x83>
c00018cf:	ff 24 85 84 f0 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe0f7c]
c00018d6:	83 fb 50             	cmp    ebx,0x50
c00018d9:	77 5b                	ja     c0001936 <dlmallopt+0x83>
c00018db:	ba 08 00 00 00       	mov    edx,0x8
c00018e0:	85 db                	test   ebx,ebx
c00018e2:	74 12                	je     c00018f6 <dlmallopt+0x43>
c00018e4:	83 c3 0b             	add    ebx,0xb
c00018e7:	ba 10 00 00 00       	mov    edx,0x10
c00018ec:	83 fb 0f             	cmp    ebx,0xf
c00018ef:	76 05                	jbe    c00018f6 <dlmallopt+0x43>
c00018f1:	89 da                	mov    edx,ebx
c00018f3:	83 e2 f8             	and    edx,0xfffffff8
c00018f6:	a1 c0 2a 02 c0       	mov    eax,ds:0xc0022ac0
c00018fb:	83 e0 03             	and    eax,0x3
c00018fe:	09 d0                	or     eax,edx
c0001900:	a3 c0 2a 02 c0       	mov    ds:0xc0022ac0,eax
c0001905:	eb 31                	jmp    c0001938 <dlmallopt+0x85>
c0001907:	89 1d 04 2e 02 c0    	mov    DWORD PTR ds:0xc0022e04,ebx
c000190d:	eb 06                	jmp    c0001915 <dlmallopt+0x62>
c000190f:	89 1d 08 2e 02 c0    	mov    DWORD PTR ds:0xc0022e08,ebx
c0001915:	be 01 00 00 00       	mov    esi,0x1
c000191a:	eb 1c                	jmp    c0001938 <dlmallopt+0x85>
c000191c:	89 1d 0c 2e 02 c0    	mov    DWORD PTR ds:0xc0022e0c,ebx
c0001922:	eb f1                	jmp    c0001915 <dlmallopt+0x62>
c0001924:	31 f6                	xor    esi,esi
c0001926:	85 db                	test   ebx,ebx
c0001928:	75 0e                	jne    c0001938 <dlmallopt+0x85>
c000192a:	c7 05 14 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e14,0x0
c0001934:	eb df                	jmp    c0001915 <dlmallopt+0x62>
c0001936:	31 f6                	xor    esi,esi
c0001938:	89 f0                	mov    eax,esi
c000193a:	5b                   	pop    ebx
c000193b:	5e                   	pop    esi
c000193c:	c3                   	ret    

c000193d <disk_status>:
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <disk_initialize>:
c0001940:	31 c0                	xor    eax,eax
c0001942:	c3                   	ret    

c0001943 <disk_read>:
c0001943:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001948:	0f b6 04 85 60 43 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdbca0]
c0001950:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001954:	e9 8b 7b 01 00       	jmp    c00194e4 <fatWrapperReadDisk>

c0001959 <disk_write>:
c0001959:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000195e:	0f b6 04 85 60 43 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdbca0]
c0001966:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000196a:	e9 bc 7b 01 00       	jmp    c001952b <fatWrapperWriteDisk>

c000196f <disk_ioctl>:
c000196f:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001978:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000197d:	0f b6 04 85 60 43 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdbca0]
c0001985:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001989:	e9 e4 7b 01 00       	jmp    c0019572 <fatWrapperIoctl>

c000198e <ld_word>:
c000198e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001992:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001995:	c1 e2 08             	shl    edx,0x8
c0001998:	09 d0                	or     eax,edx
c000199a:	c3                   	ret    

c000199b <ld_dword>:
c000199b:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c000199f:	89 d1                	mov    ecx,edx
c00019a1:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019a5:	c1 e1 08             	shl    ecx,0x8
c00019a8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019ab:	09 ca                	or     edx,ecx
c00019ad:	c1 e2 08             	shl    edx,0x8
c00019b0:	09 d0                	or     eax,edx
c00019b2:	c3                   	ret    

c00019b3 <ld_qword>:
c00019b3:	57                   	push   edi
c00019b4:	56                   	push   esi
c00019b5:	53                   	push   ebx
c00019b6:	31 db                	xor    ebx,ebx
c00019b8:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00019bb:	89 df                	mov    edi,ebx
c00019bd:	89 ce                	mov    esi,ecx
c00019bf:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00019c3:	0f a4 f7 08          	shld   edi,esi,0x8
c00019c7:	c1 e6 08             	shl    esi,0x8
c00019ca:	09 f2                	or     edx,esi
c00019cc:	89 d6                	mov    esi,edx
c00019ce:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00019d2:	0f a4 f7 08          	shld   edi,esi,0x8
c00019d6:	c1 e6 08             	shl    esi,0x8
c00019d9:	09 f2                	or     edx,esi
c00019db:	89 d6                	mov    esi,edx
c00019dd:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00019e1:	0f a4 f7 08          	shld   edi,esi,0x8
c00019e5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00019e8:	c1 e6 08             	shl    esi,0x8
c00019eb:	89 fb                	mov    ebx,edi
c00019ed:	09 f2                	or     edx,esi
c00019ef:	89 d1                	mov    ecx,edx
c00019f1:	0f a4 cb 08          	shld   ebx,ecx,0x8
c00019f5:	c1 e1 08             	shl    ecx,0x8
c00019f8:	89 da                	mov    edx,ebx
c00019fa:	09 c8                	or     eax,ecx
c00019fc:	5b                   	pop    ebx
c00019fd:	5e                   	pop    esi
c00019fe:	5f                   	pop    edi
c00019ff:	c3                   	ret    

c0001a00 <st_word>:
c0001a00:	66 89 10             	mov    WORD PTR [eax],dx
c0001a03:	c3                   	ret    

c0001a04 <st_dword>:
c0001a04:	89 10                	mov    DWORD PTR [eax],edx
c0001a06:	c3                   	ret    

c0001a07 <st_qword>:
c0001a07:	89 10                	mov    DWORD PTR [eax],edx
c0001a09:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001a0c:	c3                   	ret    

c0001a0d <mem_cpy>:
c0001a0d:	85 c9                	test   ecx,ecx
c0001a0f:	74 10                	je     c0001a21 <mem_cpy+0x14>
c0001a11:	57                   	push   edi
c0001a12:	01 c1                	add    ecx,eax
c0001a14:	56                   	push   esi
c0001a15:	89 c7                	mov    edi,eax
c0001a17:	89 d6                	mov    esi,edx
c0001a19:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001a1a:	39 f9                	cmp    ecx,edi
c0001a1c:	75 fb                	jne    c0001a19 <mem_cpy+0xc>
c0001a1e:	5e                   	pop    esi
c0001a1f:	5f                   	pop    edi
c0001a20:	c3                   	ret    
c0001a21:	c3                   	ret    

c0001a22 <mem_set>:
c0001a22:	01 c1                	add    ecx,eax
c0001a24:	40                   	inc    eax
c0001a25:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001a28:	39 c8                	cmp    eax,ecx
c0001a2a:	75 f8                	jne    c0001a24 <mem_set+0x2>
c0001a2c:	c3                   	ret    

c0001a2d <mem_cmp>:
c0001a2d:	57                   	push   edi
c0001a2e:	56                   	push   esi
c0001a2f:	89 c6                	mov    esi,eax
c0001a31:	53                   	push   ebx
c0001a32:	46                   	inc    esi
c0001a33:	42                   	inc    edx
c0001a34:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001a38:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001a3c:	29 fb                	sub    ebx,edi
c0001a3e:	89 cf                	mov    edi,ecx
c0001a40:	29 f7                	sub    edi,esi
c0001a42:	01 c7                	add    edi,eax
c0001a44:	74 04                	je     c0001a4a <mem_cmp+0x1d>
c0001a46:	85 db                	test   ebx,ebx
c0001a48:	74 e8                	je     c0001a32 <mem_cmp+0x5>
c0001a4a:	89 d8                	mov    eax,ebx
c0001a4c:	5b                   	pop    ebx
c0001a4d:	5e                   	pop    esi
c0001a4e:	5f                   	pop    edi
c0001a4f:	c3                   	ret    

c0001a50 <chk_chr>:
c0001a50:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001a53:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001a56:	74 07                	je     c0001a5f <chk_chr+0xf>
c0001a58:	39 d1                	cmp    ecx,edx
c0001a5a:	74 03                	je     c0001a5f <chk_chr+0xf>
c0001a5c:	40                   	inc    eax
c0001a5d:	eb f1                	jmp    c0001a50 <chk_chr>
c0001a5f:	89 c8                	mov    eax,ecx
c0001a61:	c3                   	ret    

c0001a62 <dbc_1st>:
c0001a62:	31 c0                	xor    eax,eax
c0001a64:	c3                   	ret    

c0001a65 <dbc_2nd>:
c0001a65:	31 c0                	xor    eax,eax
c0001a67:	c3                   	ret    

c0001a68 <tchar2uni>:
c0001a68:	57                   	push   edi
c0001a69:	89 c7                	mov    edi,eax
c0001a6b:	56                   	push   esi
c0001a6c:	53                   	push   ebx
c0001a6d:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001a6f:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001a71:	8d 73 01             	lea    esi,[ebx+0x1]
c0001a74:	84 c9                	test   cl,cl
c0001a76:	78 0a                	js     c0001a82 <tchar2uni+0x1a>
c0001a78:	0f b6 d1             	movzx  edx,cl
c0001a7b:	89 f3                	mov    ebx,esi
c0001a7d:	e9 9f 00 00 00       	jmp    c0001b21 <tchar2uni+0xb9>
c0001a82:	88 ca                	mov    dl,cl
c0001a84:	83 e2 e0             	and    edx,0xffffffe0
c0001a87:	80 fa c0             	cmp    dl,0xc0
c0001a8a:	75 0c                	jne    c0001a98 <tchar2uni+0x30>
c0001a8c:	89 ca                	mov    edx,ecx
c0001a8e:	b9 01 00 00 00       	mov    ecx,0x1
c0001a93:	83 e2 1f             	and    edx,0x1f
c0001a96:	eb 2e                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001a98:	88 ca                	mov    dl,cl
c0001a9a:	83 e2 f0             	and    edx,0xfffffff0
c0001a9d:	80 fa e0             	cmp    dl,0xe0
c0001aa0:	75 0c                	jne    c0001aae <tchar2uni+0x46>
c0001aa2:	89 ca                	mov    edx,ecx
c0001aa4:	b9 02 00 00 00       	mov    ecx,0x2
c0001aa9:	83 e2 0f             	and    edx,0xf
c0001aac:	eb 18                	jmp    c0001ac6 <tchar2uni+0x5e>
c0001aae:	88 ca                	mov    dl,cl
c0001ab0:	83 e2 f8             	and    edx,0xfffffff8
c0001ab3:	88 d0                	mov    al,dl
c0001ab5:	83 ca ff             	or     edx,0xffffffff
c0001ab8:	3c f0                	cmp    al,0xf0
c0001aba:	75 6c                	jne    c0001b28 <tchar2uni+0xc0>
c0001abc:	89 ca                	mov    edx,ecx
c0001abe:	b9 03 00 00 00       	mov    ecx,0x3
c0001ac3:	83 e2 07             	and    edx,0x7
c0001ac6:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001aca:	46                   	inc    esi
c0001acb:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ace:	88 c8                	mov    al,cl
c0001ad0:	83 e0 c0             	and    eax,0xffffffc0
c0001ad3:	3c 80                	cmp    al,0x80
c0001ad5:	75 4e                	jne    c0001b25 <tchar2uni+0xbd>
c0001ad7:	c1 e2 06             	shl    edx,0x6
c0001ada:	83 e1 3f             	and    ecx,0x3f
c0001add:	09 ca                	or     edx,ecx
c0001adf:	39 de                	cmp    esi,ebx
c0001ae1:	75 e7                	jne    c0001aca <tchar2uni+0x62>
c0001ae3:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001ae6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001aec:	77 37                	ja     c0001b25 <tchar2uni+0xbd>
c0001aee:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001af4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001afa:	76 29                	jbe    c0001b25 <tchar2uni+0xbd>
c0001afc:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001b02:	76 1d                	jbe    c0001b21 <tchar2uni+0xb9>
c0001b04:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001b0a:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001b10:	c1 e1 06             	shl    ecx,0x6
c0001b13:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001b19:	09 ca                	or     edx,ecx
c0001b1b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001b21:	89 1f                	mov    DWORD PTR [edi],ebx
c0001b23:	eb 03                	jmp    c0001b28 <tchar2uni+0xc0>
c0001b25:	83 ca ff             	or     edx,0xffffffff
c0001b28:	5b                   	pop    ebx
c0001b29:	89 d0                	mov    eax,edx
c0001b2b:	5e                   	pop    esi
c0001b2c:	5f                   	pop    edi
c0001b2d:	c3                   	ret    

c0001b2e <put_utf>:
c0001b2e:	53                   	push   ebx
c0001b2f:	83 f8 7f             	cmp    eax,0x7f
c0001b32:	89 c3                	mov    ebx,eax
c0001b34:	b0 00                	mov    al,0x0
c0001b36:	77 11                	ja     c0001b49 <put_utf+0x1b>
c0001b38:	85 c9                	test   ecx,ecx
c0001b3a:	0f 84 e5 00 00 00    	je     c0001c25 <put_utf+0xf7>
c0001b40:	88 1a                	mov    BYTE PTR [edx],bl
c0001b42:	b0 01                	mov    al,0x1
c0001b44:	e9 dc 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b49:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001b4f:	77 23                	ja     c0001b74 <put_utf+0x46>
c0001b51:	83 f9 01             	cmp    ecx,0x1
c0001b54:	0f 86 cb 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b5a:	89 d8                	mov    eax,ebx
c0001b5c:	83 e3 3f             	and    ebx,0x3f
c0001b5f:	c1 e8 06             	shr    eax,0x6
c0001b62:	83 cb 80             	or     ebx,0xffffff80
c0001b65:	83 c8 c0             	or     eax,0xffffffc0
c0001b68:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001b6b:	88 02                	mov    BYTE PTR [edx],al
c0001b6d:	b0 02                	mov    al,0x2
c0001b6f:	e9 b1 00 00 00       	jmp    c0001c25 <put_utf+0xf7>
c0001b74:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001b7a:	77 40                	ja     c0001bbc <put_utf+0x8e>
c0001b7c:	83 f9 02             	cmp    ecx,0x2
c0001b7f:	0f 86 a0 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b85:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001b8b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001b91:	0f 86 8e 00 00 00    	jbe    c0001c25 <put_utf+0xf7>
c0001b97:	89 d8                	mov    eax,ebx
c0001b99:	c1 e8 0c             	shr    eax,0xc
c0001b9c:	83 c8 e0             	or     eax,0xffffffe0
c0001b9f:	88 02                	mov    BYTE PTR [edx],al
c0001ba1:	89 d8                	mov    eax,ebx
c0001ba3:	83 e3 3f             	and    ebx,0x3f
c0001ba6:	c1 e8 06             	shr    eax,0x6
c0001ba9:	83 cb 80             	or     ebx,0xffffff80
c0001bac:	83 e0 3f             	and    eax,0x3f
c0001baf:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001bb2:	83 c8 80             	or     eax,0xffffff80
c0001bb5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001bb8:	b0 03                	mov    al,0x3
c0001bba:	eb 69                	jmp    c0001c25 <put_utf+0xf7>
c0001bbc:	83 f9 03             	cmp    ecx,0x3
c0001bbf:	76 64                	jbe    c0001c25 <put_utf+0xf7>
c0001bc1:	89 d9                	mov    ecx,ebx
c0001bc3:	0f b7 c3             	movzx  eax,bx
c0001bc6:	66 31 c9             	xor    cx,cx
c0001bc9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001bcf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001bd5:	c1 e9 06             	shr    ecx,0x6
c0001bd8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001bde:	77 43                	ja     c0001c23 <put_utf+0xf5>
c0001be0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001be6:	77 3b                	ja     c0001c23 <put_utf+0xf5>
c0001be8:	09 cb                	or     ebx,ecx
c0001bea:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001bf0:	89 d8                	mov    eax,ebx
c0001bf2:	c1 e8 12             	shr    eax,0x12
c0001bf5:	83 c8 f0             	or     eax,0xfffffff0
c0001bf8:	88 02                	mov    BYTE PTR [edx],al
c0001bfa:	89 d8                	mov    eax,ebx
c0001bfc:	c1 e8 0c             	shr    eax,0xc
c0001bff:	83 e0 3f             	and    eax,0x3f
c0001c02:	83 c8 80             	or     eax,0xffffff80
c0001c05:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c08:	89 d8                	mov    eax,ebx
c0001c0a:	83 e3 3f             	and    ebx,0x3f
c0001c0d:	c1 e8 06             	shr    eax,0x6
c0001c10:	83 cb 80             	or     ebx,0xffffff80
c0001c13:	83 e0 3f             	and    eax,0x3f
c0001c16:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001c19:	83 c8 80             	or     eax,0xffffff80
c0001c1c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001c1f:	b0 04                	mov    al,0x4
c0001c21:	eb 02                	jmp    c0001c25 <put_utf+0xf7>
c0001c23:	31 c0                	xor    eax,eax
c0001c25:	5b                   	pop    ebx
c0001c26:	c3                   	ret    

c0001c27 <clst2sect>:
c0001c27:	89 c1                	mov    ecx,eax
c0001c29:	83 ea 02             	sub    edx,0x2
c0001c2c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001c2f:	83 e8 02             	sub    eax,0x2
c0001c32:	39 d0                	cmp    eax,edx
c0001c34:	76 0d                	jbe    c0001c43 <clst2sect+0x1c>
c0001c36:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001c3a:	f7 e2                	mul    edx
c0001c3c:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001c3f:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001c42:	c3                   	ret    
c0001c43:	31 c0                	xor    eax,eax
c0001c45:	31 d2                	xor    edx,edx
c0001c47:	c3                   	ret    

c0001c48 <clmt_clust>:
c0001c48:	57                   	push   edi
c0001c49:	89 cf                	mov    edi,ecx
c0001c4b:	56                   	push   esi
c0001c4c:	89 d6                	mov    esi,edx
c0001c4e:	53                   	push   ebx
c0001c4f:	0f ac fe 09          	shrd   esi,edi,0x9
c0001c53:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001c56:	89 f2                	mov    edx,esi
c0001c58:	8b 00                	mov    eax,DWORD PTR [eax]
c0001c5a:	c1 ef 09             	shr    edi,0x9
c0001c5d:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001c61:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001c64:	89 f9                	mov    ecx,edi
c0001c66:	31 ff                	xor    edi,edi
c0001c68:	57                   	push   edi
c0001c69:	56                   	push   esi
c0001c6a:	51                   	push   ecx
c0001c6b:	52                   	push   edx
c0001c6c:	e8 5b c4 01 00       	call   c001e0cc <__udivdi3>
c0001c71:	83 c4 10             	add    esp,0x10
c0001c74:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001c76:	85 d2                	test   edx,edx
c0001c78:	74 10                	je     c0001c8a <clmt_clust+0x42>
c0001c7a:	39 d0                	cmp    eax,edx
c0001c7c:	72 07                	jb     c0001c85 <clmt_clust+0x3d>
c0001c7e:	29 d0                	sub    eax,edx
c0001c80:	83 c3 08             	add    ebx,0x8
c0001c83:	eb ef                	jmp    c0001c74 <clmt_clust+0x2c>
c0001c85:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001c88:	89 c2                	mov    edx,eax
c0001c8a:	5b                   	pop    ebx
c0001c8b:	89 d0                	mov    eax,edx
c0001c8d:	5e                   	pop    esi
c0001c8e:	5f                   	pop    edi
c0001c8f:	c3                   	ret    

c0001c90 <pick_lfn>:
c0001c90:	55                   	push   ebp
c0001c91:	57                   	push   edi
c0001c92:	56                   	push   esi
c0001c93:	89 d6                	mov    esi,edx
c0001c95:	53                   	push   ebx
c0001c96:	89 c3                	mov    ebx,eax
c0001c98:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001c9b:	e8 ee fc ff ff       	call   c000198e <ld_word>
c0001ca0:	66 85 c0             	test   ax,ax
c0001ca3:	74 04                	je     c0001ca9 <pick_lfn+0x19>
c0001ca5:	31 c0                	xor    eax,eax
c0001ca7:	eb 5c                	jmp    c0001d05 <pick_lfn+0x75>
c0001ca9:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001cac:	bd 01 00 00 00       	mov    ebp,0x1
c0001cb1:	83 e1 bf             	and    ecx,0xffffffbf
c0001cb4:	31 ff                	xor    edi,edi
c0001cb6:	49                   	dec    ecx
c0001cb7:	6b c9 0d             	imul   ecx,ecx,0xd
c0001cba:	0f b6 87 a0 f1 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe0e60]
c0001cc1:	01 f0                	add    eax,esi
c0001cc3:	e8 c6 fc ff ff       	call   c000198e <ld_word>
c0001cc8:	66 85 ed             	test   bp,bp
c0001ccb:	74 11                	je     c0001cde <pick_lfn+0x4e>
c0001ccd:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cd3:	77 d0                	ja     c0001ca5 <pick_lfn+0x15>
c0001cd5:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001cd9:	89 c5                	mov    ebp,eax
c0001cdb:	41                   	inc    ecx
c0001cdc:	eb 04                	jmp    c0001ce2 <pick_lfn+0x52>
c0001cde:	66 40                	inc    ax
c0001ce0:	75 c3                	jne    c0001ca5 <pick_lfn+0x15>
c0001ce2:	47                   	inc    edi
c0001ce3:	83 ff 0d             	cmp    edi,0xd
c0001ce6:	75 d2                	jne    c0001cba <pick_lfn+0x2a>
c0001ce8:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ceb:	74 13                	je     c0001d00 <pick_lfn+0x70>
c0001ced:	66 85 ed             	test   bp,bp
c0001cf0:	74 0e                	je     c0001d00 <pick_lfn+0x70>
c0001cf2:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001cf8:	77 ab                	ja     c0001ca5 <pick_lfn+0x15>
c0001cfa:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001d00:	b8 01 00 00 00       	mov    eax,0x1
c0001d05:	5b                   	pop    ebx
c0001d06:	5e                   	pop    esi
c0001d07:	5f                   	pop    edi
c0001d08:	5d                   	pop    ebp
c0001d09:	c3                   	ret    

c0001d0a <put_lfn>:
c0001d0a:	55                   	push   ebp
c0001d0b:	31 ed                	xor    ebp,ebp
c0001d0d:	57                   	push   edi
c0001d0e:	89 d7                	mov    edi,edx
c0001d10:	56                   	push   esi
c0001d11:	31 f6                	xor    esi,esi
c0001d13:	53                   	push   ebx
c0001d14:	83 ec 08             	sub    esp,0x8
c0001d17:	89 04 24             	mov    DWORD PTR [esp],eax
c0001d1a:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001d1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001d22:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001d28:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001d2b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d2e:	31 d2                	xor    edx,edx
c0001d30:	e8 cb fc ff ff       	call   c0001a00 <st_word>
c0001d35:	0f b6 d9             	movzx  ebx,cl
c0001d38:	4b                   	dec    ebx
c0001d39:	6b db 0d             	imul   ebx,ebx,0xd
c0001d3c:	66 83 fe ff          	cmp    si,0xffff
c0001d40:	74 08                	je     c0001d4a <put_lfn+0x40>
c0001d42:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d45:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001d49:	43                   	inc    ebx
c0001d4a:	0f b6 85 a0 f1 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe0e60]
c0001d51:	0f b7 d6             	movzx  edx,si
c0001d54:	01 f8                	add    eax,edi
c0001d56:	e8 a5 fc ff ff       	call   c0001a00 <st_word>
c0001d5b:	66 85 f6             	test   si,si
c0001d5e:	75 03                	jne    c0001d63 <put_lfn+0x59>
c0001d60:	83 ce ff             	or     esi,0xffffffff
c0001d63:	45                   	inc    ebp
c0001d64:	83 fd 0d             	cmp    ebp,0xd
c0001d67:	75 d3                	jne    c0001d3c <put_lfn+0x32>
c0001d69:	66 46                	inc    si
c0001d6b:	74 0a                	je     c0001d77 <put_lfn+0x6d>
c0001d6d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001d70:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001d75:	75 09                	jne    c0001d80 <put_lfn+0x76>
c0001d77:	88 c8                	mov    al,cl
c0001d79:	83 c8 40             	or     eax,0x40
c0001d7c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001d80:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001d84:	88 07                	mov    BYTE PTR [edi],al
c0001d86:	83 c4 08             	add    esp,0x8
c0001d89:	5b                   	pop    ebx
c0001d8a:	5e                   	pop    esi
c0001d8b:	5f                   	pop    edi
c0001d8c:	5d                   	pop    ebp
c0001d8d:	c3                   	ret    

c0001d8e <gen_numname>:
c0001d8e:	57                   	push   edi
c0001d8f:	89 cf                	mov    edi,ecx
c0001d91:	56                   	push   esi
c0001d92:	b9 0b 00 00 00       	mov    ecx,0xb
c0001d97:	53                   	push   ebx
c0001d98:	89 c6                	mov    esi,eax
c0001d9a:	83 ec 10             	sub    esp,0x10
c0001d9d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001da1:	e8 67 fc ff ff       	call   c0001a0d <mem_cpy>
c0001da6:	83 fb 05             	cmp    ebx,0x5
c0001da9:	76 2d                	jbe    c0001dd8 <gen_numname+0x4a>
c0001dab:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001dae:	66 85 c0             	test   ax,ax
c0001db1:	74 25                	je     c0001dd8 <gen_numname+0x4a>
c0001db3:	83 c7 02             	add    edi,0x2
c0001db6:	ba 10 00 00 00       	mov    edx,0x10
c0001dbb:	01 db                	add    ebx,ebx
c0001dbd:	89 c1                	mov    ecx,eax
c0001dbf:	66 d1 e8             	shr    ax,1
c0001dc2:	83 e1 01             	and    ecx,0x1
c0001dc5:	01 cb                	add    ebx,ecx
c0001dc7:	0f ba e3 10          	bt     ebx,0x10
c0001dcb:	73 06                	jae    c0001dd3 <gen_numname+0x45>
c0001dcd:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001dd3:	4a                   	dec    edx
c0001dd4:	75 e5                	jne    c0001dbb <gen_numname+0x2d>
c0001dd6:	eb d3                	jmp    c0001dab <gen_numname+0x1d>
c0001dd8:	b8 07 00 00 00       	mov    eax,0x7
c0001ddd:	88 d9                	mov    cl,bl
c0001ddf:	83 e1 0f             	and    ecx,0xf
c0001de2:	8d 51 30             	lea    edx,[ecx+0x30]
c0001de5:	80 fa 39             	cmp    dl,0x39
c0001de8:	76 03                	jbe    c0001ded <gen_numname+0x5f>
c0001dea:	8d 51 37             	lea    edx,[ecx+0x37]
c0001ded:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001df0:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001df4:	89 da                	mov    edx,ebx
c0001df6:	c1 ea 04             	shr    edx,0x4
c0001df9:	83 fb 0f             	cmp    ebx,0xf
c0001dfc:	76 06                	jbe    c0001e04 <gen_numname+0x76>
c0001dfe:	89 c8                	mov    eax,ecx
c0001e00:	89 d3                	mov    ebx,edx
c0001e02:	eb d9                	jmp    c0001ddd <gen_numname+0x4f>
c0001e04:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001e09:	31 d2                	xor    edx,edx
c0001e0b:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001e0e:	8d 04 16             	lea    eax,[esi+edx*1]
c0001e11:	39 ca                	cmp    edx,ecx
c0001e13:	73 18                	jae    c0001e2d <gen_numname+0x9f>
c0001e15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001e18:	3c 20                	cmp    al,0x20
c0001e1a:	74 11                	je     c0001e2d <gen_numname+0x9f>
c0001e1c:	e8 41 fc ff ff       	call   c0001a62 <dbc_1st>
c0001e21:	85 c0                	test   eax,eax
c0001e23:	74 05                	je     c0001e2a <gen_numname+0x9c>
c0001e25:	39 d3                	cmp    ebx,edx
c0001e27:	74 04                	je     c0001e2d <gen_numname+0x9f>
c0001e29:	42                   	inc    edx
c0001e2a:	42                   	inc    edx
c0001e2b:	eb e1                	jmp    c0001e0e <gen_numname+0x80>
c0001e2d:	b0 20                	mov    al,0x20
c0001e2f:	83 f9 07             	cmp    ecx,0x7
c0001e32:	77 05                	ja     c0001e39 <gen_numname+0xab>
c0001e34:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001e38:	41                   	inc    ecx
c0001e39:	42                   	inc    edx
c0001e3a:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001e3e:	83 fa 07             	cmp    edx,0x7
c0001e41:	76 ea                	jbe    c0001e2d <gen_numname+0x9f>
c0001e43:	83 c4 10             	add    esp,0x10
c0001e46:	5b                   	pop    ebx
c0001e47:	5e                   	pop    esi
c0001e48:	5f                   	pop    edi
c0001e49:	c3                   	ret    

c0001e4a <sum_sfn>:
c0001e4a:	31 c9                	xor    ecx,ecx
c0001e4c:	31 d2                	xor    edx,edx
c0001e4e:	d0 ca                	ror    dl,1
c0001e50:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001e53:	41                   	inc    ecx
c0001e54:	83 f9 0b             	cmp    ecx,0xb
c0001e57:	75 f5                	jne    c0001e4e <sum_sfn+0x4>
c0001e59:	88 d0                	mov    al,dl
c0001e5b:	c3                   	ret    

c0001e5c <xdir_sum>:
c0001e5c:	56                   	push   esi
c0001e5d:	31 c9                	xor    ecx,ecx
c0001e5f:	53                   	push   ebx
c0001e60:	31 d2                	xor    edx,edx
c0001e62:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001e66:	43                   	inc    ebx
c0001e67:	c1 e3 05             	shl    ebx,0x5
c0001e6a:	83 fa 02             	cmp    edx,0x2
c0001e6d:	74 0b                	je     c0001e7a <xdir_sum+0x1e>
c0001e6f:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001e73:	66 d1 c9             	ror    cx,1
c0001e76:	01 f1                	add    ecx,esi
c0001e78:	eb 05                	jmp    c0001e7f <xdir_sum+0x23>
c0001e7a:	ba 03 00 00 00       	mov    edx,0x3
c0001e7f:	42                   	inc    edx
c0001e80:	39 d3                	cmp    ebx,edx
c0001e82:	77 e6                	ja     c0001e6a <xdir_sum+0xe>
c0001e84:	89 c8                	mov    eax,ecx
c0001e86:	5b                   	pop    ebx
c0001e87:	5e                   	pop    esi
c0001e88:	c3                   	ret    

c0001e89 <xsum32>:
c0001e89:	d1 ca                	ror    edx,1
c0001e8b:	0f b6 c0             	movzx  eax,al
c0001e8e:	01 d0                	add    eax,edx
c0001e90:	c3                   	ret    

c0001e91 <get_xfileinfo>:
c0001e91:	55                   	push   ebp
c0001e92:	31 c9                	xor    ecx,ecx
c0001e94:	57                   	push   edi
c0001e95:	bd 40 00 00 00       	mov    ebp,0x40
c0001e9a:	56                   	push   esi
c0001e9b:	31 ff                	xor    edi,edi
c0001e9d:	53                   	push   ebx
c0001e9e:	89 c6                	mov    esi,eax
c0001ea0:	83 ec 0c             	sub    esp,0xc
c0001ea3:	89 d3                	mov    ebx,edx
c0001ea5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001eac:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001eb0:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001eb3:	76 6d                	jbe    c0001f22 <get_xfileinfo+0x91>
c0001eb5:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001ebb:	76 0b                	jbe    c0001ec8 <get_xfileinfo+0x37>
c0001ebd:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001ec1:	bf 01 00 00 00       	mov    edi,0x1
c0001ec6:	eb 63                	jmp    c0001f2b <get_xfileinfo+0x9a>
c0001ec8:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001ece:	75 03                	jne    c0001ed3 <get_xfileinfo+0x42>
c0001ed0:	83 c5 02             	add    ebp,0x2
c0001ed3:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001ed6:	83 c5 02             	add    ebp,0x2
c0001ed9:	e8 b0 fa ff ff       	call   c000198e <ld_word>
c0001ede:	ff 04 24             	inc    DWORD PTR [esp]
c0001ee1:	66 85 c9             	test   cx,cx
c0001ee4:	75 0d                	jne    c0001ef3 <get_xfileinfo+0x62>
c0001ee6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001eec:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001ef1:	76 2b                	jbe    c0001f1e <get_xfileinfo+0x8d>
c0001ef3:	c1 e1 10             	shl    ecx,0x10
c0001ef6:	ba ff 00 00 00       	mov    edx,0xff
c0001efb:	0f b7 c0             	movzx  eax,ax
c0001efe:	29 fa                	sub    edx,edi
c0001f00:	09 c8                	or     eax,ecx
c0001f02:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001f06:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001f0a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001f0e:	e8 1b fc ff ff       	call   c0001b2e <put_utf>
c0001f13:	84 c0                	test   al,al
c0001f15:	74 a6                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f17:	0f b6 c0             	movzx  eax,al
c0001f1a:	01 c7                	add    edi,eax
c0001f1c:	31 c0                	xor    eax,eax
c0001f1e:	89 c1                	mov    ecx,eax
c0001f20:	eb 8a                	jmp    c0001eac <get_xfileinfo+0x1b>
c0001f22:	85 ff                	test   edi,edi
c0001f24:	74 97                	je     c0001ebd <get_xfileinfo+0x2c>
c0001f26:	66 85 c9             	test   cx,cx
c0001f29:	75 92                	jne    c0001ebd <get_xfileinfo+0x2c>
c0001f2b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001f30:	31 c0                	xor    eax,eax
c0001f32:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001f36:	31 d2                	xor    edx,edx
c0001f38:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001f3b:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001f3e:	80 e1 10             	and    cl,0x10
c0001f41:	75 08                	jne    c0001f4b <get_xfileinfo+0xba>
c0001f43:	8d 46 38             	lea    eax,[esi+0x38]
c0001f46:	e8 68 fa ff ff       	call   c00019b3 <ld_qword>
c0001f4b:	89 03                	mov    DWORD PTR [ebx],eax
c0001f4d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001f50:	8d 46 0c             	lea    eax,[esi+0xc]
c0001f53:	e8 36 fa ff ff       	call   c000198e <ld_word>
c0001f58:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0001f5c:	8d 46 0e             	lea    eax,[esi+0xe]
c0001f5f:	e8 2a fa ff ff       	call   c000198e <ld_word>
c0001f64:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0001f68:	83 c4 0c             	add    esp,0xc
c0001f6b:	5b                   	pop    ebx
c0001f6c:	5e                   	pop    esi
c0001f6d:	5f                   	pop    edi
c0001f6e:	5d                   	pop    ebp
c0001f6f:	c3                   	ret    

c0001f70 <get_ldnumber>:
c0001f70:	8b 10                	mov    edx,DWORD PTR [eax]
c0001f72:	85 d2                	test   edx,edx
c0001f74:	74 14                	je     c0001f8a <get_ldnumber+0x1a>
c0001f76:	56                   	push   esi
c0001f77:	53                   	push   ebx
c0001f78:	89 d3                	mov    ebx,edx
c0001f7a:	43                   	inc    ebx
c0001f7b:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0001f7e:	80 f9 1f             	cmp    cl,0x1f
c0001f81:	76 0d                	jbe    c0001f90 <get_ldnumber+0x20>
c0001f83:	80 f9 3a             	cmp    cl,0x3a
c0001f86:	75 f2                	jne    c0001f7a <get_ldnumber+0xa>
c0001f88:	eb 0a                	jmp    c0001f94 <get_ldnumber+0x24>
c0001f8a:	83 c9 ff             	or     ecx,0xffffffff
c0001f8d:	89 c8                	mov    eax,ecx
c0001f8f:	c3                   	ret    
c0001f90:	31 c9                	xor    ecx,ecx
c0001f92:	eb 24                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001f94:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0001f97:	8d 4e d0             	lea    ecx,[esi-0x30]
c0001f9a:	80 f9 09             	cmp    cl,0x9
c0001f9d:	77 16                	ja     c0001fb5 <get_ldnumber+0x45>
c0001f9f:	83 c2 02             	add    edx,0x2
c0001fa2:	83 c9 ff             	or     ecx,0xffffffff
c0001fa5:	39 d3                	cmp    ebx,edx
c0001fa7:	75 0f                	jne    c0001fb8 <get_ldnumber+0x48>
c0001fa9:	89 f2                	mov    edx,esi
c0001fab:	89 18                	mov    DWORD PTR [eax],ebx
c0001fad:	0f be ca             	movsx  ecx,dl
c0001fb0:	83 e9 30             	sub    ecx,0x30
c0001fb3:	eb 03                	jmp    c0001fb8 <get_ldnumber+0x48>
c0001fb5:	83 c9 ff             	or     ecx,0xffffffff
c0001fb8:	89 c8                	mov    eax,ecx
c0001fba:	5b                   	pop    ebx
c0001fbb:	5e                   	pop    esi
c0001fbc:	c3                   	ret    

c0001fbd <crc32>:
c0001fbd:	56                   	push   esi
c0001fbe:	89 d6                	mov    esi,edx
c0001fc0:	53                   	push   ebx
c0001fc1:	b2 01                	mov    dl,0x1
c0001fc3:	bb 08 00 00 00       	mov    ebx,0x8
c0001fc8:	89 f1                	mov    ecx,esi
c0001fca:	84 d1                	test   cl,dl
c0001fcc:	0f 95 c1             	setne  cl
c0001fcf:	0f b6 c9             	movzx  ecx,cl
c0001fd2:	31 c1                	xor    ecx,eax
c0001fd4:	89 c8                	mov    eax,ecx
c0001fd6:	d1 e8                	shr    eax,1
c0001fd8:	80 e1 01             	and    cl,0x1
c0001fdb:	74 05                	je     c0001fe2 <crc32+0x25>
c0001fdd:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0001fe2:	d1 e2                	shl    edx,1
c0001fe4:	4b                   	dec    ebx
c0001fe5:	75 e1                	jne    c0001fc8 <crc32+0xb>
c0001fe7:	5b                   	pop    ebx
c0001fe8:	5e                   	pop    esi
c0001fe9:	c3                   	ret    

c0001fea <test_gpt_header>:
c0001fea:	55                   	push   ebp
c0001feb:	b9 10 00 00 00       	mov    ecx,0x10
c0001ff0:	57                   	push   edi
c0001ff1:	ba a0 f0 01 c0       	mov    edx,0xc001f0a0
c0001ff6:	56                   	push   esi
c0001ff7:	31 ff                	xor    edi,edi
c0001ff9:	53                   	push   ebx
c0001ffa:	89 c3                	mov    ebx,eax
c0001ffc:	e8 2c fa ff ff       	call   c0001a2d <mem_cmp>
c0002001:	85 c0                	test   eax,eax
c0002003:	75 55                	jne    c000205a <test_gpt_header+0x70>
c0002005:	89 c7                	mov    edi,eax
c0002007:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c000200c:	83 ce ff             	or     esi,0xffffffff
c000200f:	31 d2                	xor    edx,edx
c0002011:	83 fd 03             	cmp    ebp,0x3
c0002014:	76 05                	jbe    c000201b <test_gpt_header+0x31>
c0002016:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c000201b:	89 f0                	mov    eax,esi
c000201d:	45                   	inc    ebp
c000201e:	e8 9a ff ff ff       	call   c0001fbd <crc32>
c0002023:	83 fd 4c             	cmp    ebp,0x4c
c0002026:	89 c6                	mov    esi,eax
c0002028:	75 e5                	jne    c000200f <test_gpt_header+0x25>
c000202a:	8d 43 10             	lea    eax,[ebx+0x10]
c000202d:	f7 d6                	not    esi
c000202f:	e8 67 f9 ff ff       	call   c000199b <ld_dword>
c0002034:	39 c6                	cmp    esi,eax
c0002036:	75 22                	jne    c000205a <test_gpt_header+0x70>
c0002038:	8d 43 54             	lea    eax,[ebx+0x54]
c000203b:	e8 5b f9 ff ff       	call   c000199b <ld_dword>
c0002040:	83 c0 80             	add    eax,0xffffff80
c0002043:	75 15                	jne    c000205a <test_gpt_header+0x70>
c0002045:	8d 43 50             	lea    eax,[ebx+0x50]
c0002048:	e8 4e f9 ff ff       	call   c000199b <ld_dword>
c000204d:	3d 80 00 00 00       	cmp    eax,0x80
c0002052:	0f 96 c0             	setbe  al
c0002055:	0f b6 c0             	movzx  eax,al
c0002058:	89 c7                	mov    edi,eax
c000205a:	5b                   	pop    ebx
c000205b:	89 f8                	mov    eax,edi
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <make_rand>:
c0002061:	56                   	push   esi
c0002062:	85 c0                	test   eax,eax
c0002064:	53                   	push   ebx
c0002065:	75 05                	jne    c000206c <make_rand+0xb>
c0002067:	b8 01 00 00 00       	mov    eax,0x1
c000206c:	01 d1                	add    ecx,edx
c000206e:	bb 08 00 00 00       	mov    ebx,0x8
c0002073:	89 c6                	mov    esi,eax
c0002075:	d1 e8                	shr    eax,1
c0002077:	83 e6 01             	and    esi,0x1
c000207a:	85 f6                	test   esi,esi
c000207c:	74 05                	je     c0002083 <make_rand+0x22>
c000207e:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002083:	4b                   	dec    ebx
c0002084:	75 ed                	jne    c0002073 <make_rand+0x12>
c0002086:	42                   	inc    edx
c0002087:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000208a:	39 ca                	cmp    edx,ecx
c000208c:	75 e0                	jne    c000206e <make_rand+0xd>
c000208e:	5b                   	pop    ebx
c000208f:	5e                   	pop    esi
c0002090:	c3                   	ret    

c0002091 <validate>:
c0002091:	56                   	push   esi
c0002092:	53                   	push   ebx
c0002093:	89 d6                	mov    esi,edx
c0002095:	51                   	push   ecx
c0002096:	85 c0                	test   eax,eax
c0002098:	75 09                	jne    c00020a3 <validate+0x12>
c000209a:	b8 09 00 00 00       	mov    eax,0x9
c000209f:	31 c9                	xor    ecx,ecx
c00020a1:	eb 2f                	jmp    c00020d2 <validate+0x41>
c00020a3:	89 c3                	mov    ebx,eax
c00020a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00020a7:	85 c0                	test   eax,eax
c00020a9:	74 ef                	je     c000209a <validate+0x9>
c00020ab:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00020ae:	74 ea                	je     c000209a <validate+0x9>
c00020b0:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00020b4:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00020b8:	75 e0                	jne    c000209a <validate+0x9>
c00020ba:	83 ec 0c             	sub    esp,0xc
c00020bd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020c1:	50                   	push   eax
c00020c2:	e8 76 f8 ff ff       	call   c000193d <disk_status>
c00020c7:	83 c4 10             	add    esp,0x10
c00020ca:	a8 01                	test   al,0x1
c00020cc:	75 cc                	jne    c000209a <validate+0x9>
c00020ce:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00020d0:	31 c0                	xor    eax,eax
c00020d2:	89 0e                	mov    DWORD PTR [esi],ecx
c00020d4:	5a                   	pop    edx
c00020d5:	5b                   	pop    ebx
c00020d6:	5e                   	pop    esi
c00020d7:	c3                   	ret    

c00020d8 <sync_window>:
c00020d8:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00020dc:	0f 84 85 00 00 00    	je     c0002167 <sync_window+0x8f>
c00020e2:	55                   	push   ebp
c00020e3:	8d 68 54             	lea    ebp,[eax+0x54]
c00020e6:	57                   	push   edi
c00020e7:	56                   	push   esi
c00020e8:	53                   	push   ebx
c00020e9:	89 c3                	mov    ebx,eax
c00020eb:	83 ec 28             	sub    esp,0x28
c00020ee:	6a 01                	push   0x1
c00020f0:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00020f3:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00020f6:	55                   	push   ebp
c00020f7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00020fb:	50                   	push   eax
c00020fc:	e8 58 f8 ff ff       	call   c0001959 <disk_write>
c0002101:	83 c4 20             	add    esp,0x20
c0002104:	ba 01 00 00 00       	mov    edx,0x1
c0002109:	85 c0                	test   eax,eax
c000210b:	75 50                	jne    c000215d <sync_window+0x85>
c000210d:	31 ff                	xor    edi,edi
c000210f:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c0002112:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0002116:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000211a:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000211d:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c0002120:	89 c6                	mov    esi,eax
c0002122:	89 d7                	mov    edi,edx
c0002124:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c0002127:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000212b:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c000212e:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002132:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002136:	73 23                	jae    c000215b <sync_window+0x83>
c0002138:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000213c:	75 1d                	jne    c000215b <sync_window+0x83>
c000213e:	83 ec 0c             	sub    esp,0xc
c0002141:	6a 01                	push   0x1
c0002143:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0002147:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000214b:	52                   	push   edx
c000214c:	50                   	push   eax
c000214d:	55                   	push   ebp
c000214e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002152:	50                   	push   eax
c0002153:	e8 01 f8 ff ff       	call   c0001959 <disk_write>
c0002158:	83 c4 20             	add    esp,0x20
c000215b:	31 d2                	xor    edx,edx
c000215d:	83 c4 1c             	add    esp,0x1c
c0002160:	89 d0                	mov    eax,edx
c0002162:	5b                   	pop    ebx
c0002163:	5e                   	pop    esi
c0002164:	5f                   	pop    edi
c0002165:	5d                   	pop    ebp
c0002166:	c3                   	ret    
c0002167:	31 d2                	xor    edx,edx
c0002169:	89 d0                	mov    eax,edx
c000216b:	c3                   	ret    

c000216c <move_window>:
c000216c:	56                   	push   esi
c000216d:	53                   	push   ebx
c000216e:	89 c3                	mov    ebx,eax
c0002170:	83 ec 14             	sub    esp,0x14
c0002173:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002176:	75 07                	jne    c000217f <move_window+0x13>
c0002178:	31 f6                	xor    esi,esi
c000217a:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c000217d:	74 59                	je     c00021d8 <move_window+0x6c>
c000217f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002183:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002187:	89 d8                	mov    eax,ebx
c0002189:	e8 4a ff ff ff       	call   c00020d8 <sync_window>
c000218e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002192:	89 c6                	mov    esi,eax
c0002194:	85 c0                	test   eax,eax
c0002196:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000219a:	75 3c                	jne    c00021d8 <move_window+0x6c>
c000219c:	83 ec 0c             	sub    esp,0xc
c000219f:	8d 43 54             	lea    eax,[ebx+0x54]
c00021a2:	6a 01                	push   0x1
c00021a4:	51                   	push   ecx
c00021a5:	52                   	push   edx
c00021a6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00021aa:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00021ae:	50                   	push   eax
c00021af:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00021b3:	50                   	push   eax
c00021b4:	e8 8a f7 ff ff       	call   c0001943 <disk_read>
c00021b9:	83 c4 20             	add    esp,0x20
c00021bc:	85 c0                	test   eax,eax
c00021be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00021c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00021c6:	74 0a                	je     c00021d2 <move_window+0x66>
c00021c8:	83 ca ff             	or     edx,0xffffffff
c00021cb:	be 01 00 00 00       	mov    esi,0x1
c00021d0:	89 d1                	mov    ecx,edx
c00021d2:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00021d5:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00021d8:	89 f0                	mov    eax,esi
c00021da:	83 c4 14             	add    esp,0x14
c00021dd:	5b                   	pop    ebx
c00021de:	5e                   	pop    esi
c00021df:	c3                   	ret    

c00021e0 <check_fs>:
c00021e0:	53                   	push   ebx
c00021e1:	89 c3                	mov    ebx,eax
c00021e3:	83 ec 08             	sub    esp,0x8
c00021e6:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00021ea:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00021f1:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00021f8:	e8 6f ff ff ff       	call   c000216c <move_window>
c00021fd:	ba 04 00 00 00       	mov    edx,0x4
c0002202:	85 c0                	test   eax,eax
c0002204:	0f 85 89 00 00 00    	jne    c0002293 <check_fs+0xb3>
c000220a:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0002210:	e8 79 f7 ff ff       	call   c000198e <ld_word>
c0002215:	ba 03 00 00 00       	mov    edx,0x3
c000221a:	66 3d 55 aa          	cmp    ax,0xaa55
c000221e:	75 73                	jne    c0002293 <check_fs+0xb3>
c0002220:	ba c0 f1 01 c0       	mov    edx,0xc001f1c0
c0002225:	8d 43 54             	lea    eax,[ebx+0x54]
c0002228:	b9 0b 00 00 00       	mov    ecx,0xb
c000222d:	e8 fb f7 ff ff       	call   c0001a2d <mem_cmp>
c0002232:	ba 01 00 00 00       	mov    edx,0x1
c0002237:	85 c0                	test   eax,eax
c0002239:	74 58                	je     c0002293 <check_fs+0xb3>
c000223b:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c000223e:	8d 50 18             	lea    edx,[eax+0x18]
c0002241:	80 fa 01             	cmp    dl,0x1
c0002244:	76 09                	jbe    c000224f <check_fs+0x6f>
c0002246:	ba 02 00 00 00       	mov    edx,0x2
c000224b:	3c eb                	cmp    al,0xeb
c000224d:	75 44                	jne    c0002293 <check_fs+0xb3>
c000224f:	ba e0 19 02 c0       	mov    edx,0xc00219e0
c0002254:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000225a:	b9 03 00 00 00       	mov    ecx,0x3
c000225f:	e8 c9 f7 ff ff       	call   c0001a2d <mem_cmp>
c0002264:	31 d2                	xor    edx,edx
c0002266:	85 c0                	test   eax,eax
c0002268:	74 29                	je     c0002293 <check_fs+0xb3>
c000226a:	ba cc f1 01 c0       	mov    edx,0xc001f1cc
c000226f:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002275:	b9 05 00 00 00       	mov    ecx,0x5
c000227a:	e8 ae f7 ff ff       	call   c0001a2d <mem_cmp>
c000227f:	31 d2                	xor    edx,edx
c0002281:	85 c0                	test   eax,eax
c0002283:	74 0e                	je     c0002293 <check_fs+0xb3>
c0002285:	31 d2                	xor    edx,edx
c0002287:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c000228e:	0f 95 c2             	setne  dl
c0002291:	01 d2                	add    edx,edx
c0002293:	89 d0                	mov    eax,edx
c0002295:	83 c4 08             	add    esp,0x8
c0002298:	5b                   	pop    ebx
c0002299:	c3                   	ret    

c000229a <find_volume>:
c000229a:	55                   	push   ebp
c000229b:	31 c9                	xor    ecx,ecx
c000229d:	57                   	push   edi
c000229e:	56                   	push   esi
c000229f:	89 d6                	mov    esi,edx
c00022a1:	53                   	push   ebx
c00022a2:	31 d2                	xor    edx,edx
c00022a4:	83 ec 3c             	sub    esp,0x3c
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	e8 32 ff ff ff       	call   c00021e0 <check_fs>
c00022ae:	83 f8 02             	cmp    eax,0x2
c00022b1:	74 0e                	je     c00022c1 <find_volume+0x27>
c00022b3:	0f 87 5d 01 00 00    	ja     c0002416 <find_volume+0x17c>
c00022b9:	85 f6                	test   esi,esi
c00022bb:	0f 84 55 01 00 00    	je     c0002416 <find_volume+0x17c>
c00022c1:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c00022c8:	0f 85 dd 00 00 00    	jne    c00023ab <find_volume+0x111>
c00022ce:	31 c9                	xor    ecx,ecx
c00022d0:	ba 01 00 00 00       	mov    edx,0x1
c00022d5:	89 d8                	mov    eax,ebx
c00022d7:	e8 90 fe ff ff       	call   c000216c <move_window>
c00022dc:	85 c0                	test   eax,eax
c00022de:	74 0a                	je     c00022ea <find_volume+0x50>
c00022e0:	b8 04 00 00 00       	mov    eax,0x4
c00022e5:	e9 2c 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c00022ea:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00022ed:	89 e8                	mov    eax,ebp
c00022ef:	e8 f6 fc ff ff       	call   c0001fea <test_gpt_header>
c00022f4:	85 c0                	test   eax,eax
c00022f6:	75 0a                	jne    c0002302 <find_volume+0x68>
c00022f8:	b8 03 00 00 00       	mov    eax,0x3
c00022fd:	e9 14 01 00 00       	jmp    c0002416 <find_volume+0x17c>
c0002302:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c0002308:	e8 8e f6 ff ff       	call   c000199b <ld_dword>
c000230d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002311:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c0002317:	e8 97 f6 ff ff       	call   c00019b3 <ld_qword>
c000231c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0002324:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002328:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000232c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002334:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0002338:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000233c:	74 ba                	je     c00022f8 <find_volume+0x5e>
c000233e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002342:	31 c9                	xor    ecx,ecx
c0002344:	c1 e7 07             	shl    edi,0x7
c0002347:	89 d8                	mov    eax,ebx
c0002349:	89 fa                	mov    edx,edi
c000234b:	c1 ea 09             	shr    edx,0x9
c000234e:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002352:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002356:	e8 11 fe ff ff       	call   c000216c <move_window>
c000235b:	85 c0                	test   eax,eax
c000235d:	75 81                	jne    c00022e0 <find_volume+0x46>
c000235f:	81 e7 80 01 00 00    	and    edi,0x180
c0002365:	b9 10 00 00 00       	mov    ecx,0x10
c000236a:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000236e:	ba b0 f1 01 c0       	mov    edx,0xc001f1b0
c0002373:	e8 b5 f6 ff ff       	call   c0001a2d <mem_cmp>
c0002378:	85 c0                	test   eax,eax
c000237a:	75 29                	jne    c00023a5 <find_volume+0x10b>
c000237c:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002380:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002384:	e8 2a f6 ff ff       	call   c00019b3 <ld_qword>
c0002389:	89 d1                	mov    ecx,edx
c000238b:	89 c2                	mov    edx,eax
c000238d:	89 d8                	mov    eax,ebx
c000238f:	e8 4c fe ff ff       	call   c00021e0 <check_fs>
c0002394:	85 f6                	test   esi,esi
c0002396:	75 07                	jne    c000239f <find_volume+0x105>
c0002398:	83 f8 01             	cmp    eax,0x1
c000239b:	77 08                	ja     c00023a5 <find_volume+0x10b>
c000239d:	eb 77                	jmp    c0002416 <find_volume+0x17c>
c000239f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00023a3:	74 71                	je     c0002416 <find_volume+0x17c>
c00023a5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00023a9:	eb 89                	jmp    c0002334 <find_volume+0x9a>
c00023ab:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00023af:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c00023b5:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c00023bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023bf:	89 cd                	mov    ebp,ecx
c00023c1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00023c5:	89 f8                	mov    eax,edi
c00023c7:	83 c7 10             	add    edi,0x10
c00023ca:	e8 cc f5 ff ff       	call   c000199b <ld_dword>
c00023cf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00023d3:	89 01                	mov    DWORD PTR [ecx],eax
c00023d5:	83 c1 04             	add    ecx,0x4
c00023d8:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00023dc:	75 e3                	jne    c00023c1 <find_volume+0x127>
c00023de:	31 ff                	xor    edi,edi
c00023e0:	85 f6                	test   esi,esi
c00023e2:	74 03                	je     c00023e7 <find_volume+0x14d>
c00023e4:	8d 7e ff             	lea    edi,[esi-0x1]
c00023e7:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00023eb:	85 d2                	test   edx,edx
c00023ed:	74 14                	je     c0002403 <find_volume+0x169>
c00023ef:	31 c9                	xor    ecx,ecx
c00023f1:	89 d8                	mov    eax,ebx
c00023f3:	e8 e8 fd ff ff       	call   c00021e0 <check_fs>
c00023f8:	83 f8 01             	cmp    eax,0x1
c00023fb:	76 19                	jbe    c0002416 <find_volume+0x17c>
c00023fd:	85 f6                	test   esi,esi
c00023ff:	74 0f                	je     c0002410 <find_volume+0x176>
c0002401:	eb 13                	jmp    c0002416 <find_volume+0x17c>
c0002403:	85 f6                	test   esi,esi
c0002405:	0f 85 ed fe ff ff    	jne    c00022f8 <find_volume+0x5e>
c000240b:	b8 03 00 00 00       	mov    eax,0x3
c0002410:	47                   	inc    edi
c0002411:	83 ff 03             	cmp    edi,0x3
c0002414:	76 d1                	jbe    c00023e7 <find_volume+0x14d>
c0002416:	83 c4 3c             	add    esp,0x3c
c0002419:	5b                   	pop    ebx
c000241a:	5e                   	pop    esi
c000241b:	5f                   	pop    edi
c000241c:	5d                   	pop    ebp
c000241d:	c3                   	ret    

c000241e <mount_volume>:
c000241e:	55                   	push   ebp
c000241f:	57                   	push   edi
c0002420:	89 cf                	mov    edi,ecx
c0002422:	56                   	push   esi
c0002423:	53                   	push   ebx
c0002424:	bb 0b 00 00 00       	mov    ebx,0xb
c0002429:	83 ec 3c             	sub    esp,0x3c
c000242c:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002432:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002436:	e8 35 fb ff ff       	call   c0001f70 <get_ldnumber>
c000243b:	85 c0                	test   eax,eax
c000243d:	0f 88 3a 05 00 00    	js     c000297d <mount_volume+0x55f>
c0002443:	8b 2c 85 60 2e 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdd1a0]
c000244a:	89 c6                	mov    esi,eax
c000244c:	bb 0c 00 00 00       	mov    ebx,0xc
c0002451:	85 ed                	test   ebp,ebp
c0002453:	0f 84 24 05 00 00    	je     c000297d <mount_volume+0x55f>
c0002459:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000245d:	83 e7 fe             	and    edi,0xfffffffe
c0002460:	89 2a                	mov    DWORD PTR [edx],ebp
c0002462:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002466:	74 32                	je     c000249a <mount_volume+0x7c>
c0002468:	83 ec 0c             	sub    esp,0xc
c000246b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000246f:	50                   	push   eax
c0002470:	e8 c8 f4 ff ff       	call   c000193d <disk_status>
c0002475:	83 c4 10             	add    esp,0x10
c0002478:	a8 01                	test   al,0x1
c000247a:	75 1e                	jne    c000249a <mount_volume+0x7c>
c000247c:	31 db                	xor    ebx,ebx
c000247e:	89 f9                	mov    ecx,edi
c0002480:	84 c9                	test   cl,cl
c0002482:	0f 84 f5 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002488:	a8 04                	test   al,0x4
c000248a:	0f 84 ed 04 00 00    	je     c000297d <mount_volume+0x55f>
c0002490:	bb 0a 00 00 00       	mov    ebx,0xa
c0002495:	e9 e3 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c000249a:	83 ec 0c             	sub    esp,0xc
c000249d:	89 f0                	mov    eax,esi
c000249f:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00024a3:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c00024a6:	0f b6 f0             	movzx  esi,al
c00024a9:	bb 03 00 00 00       	mov    ebx,0x3
c00024ae:	56                   	push   esi
c00024af:	e8 8c f4 ff ff       	call   c0001940 <disk_initialize>
c00024b4:	83 c4 10             	add    esp,0x10
c00024b7:	a8 01                	test   al,0x1
c00024b9:	0f 85 be 04 00 00    	jne    c000297d <mount_volume+0x55f>
c00024bf:	89 f9                	mov    ecx,edi
c00024c1:	84 c9                	test   cl,cl
c00024c3:	74 04                	je     c00024c9 <mount_volume+0xab>
c00024c5:	a8 04                	test   al,0x4
c00024c7:	75 c7                	jne    c0002490 <mount_volume+0x72>
c00024c9:	31 d2                	xor    edx,edx
c00024cb:	89 e8                	mov    eax,ebp
c00024cd:	e8 c8 fd ff ff       	call   c000229a <find_volume>
c00024d2:	83 f8 04             	cmp    eax,0x4
c00024d5:	75 0a                	jne    c00024e1 <mount_volume+0xc3>
c00024d7:	bb 01 00 00 00       	mov    ebx,0x1
c00024dc:	e9 9c 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024e1:	83 f8 01             	cmp    eax,0x1
c00024e4:	76 0a                	jbe    c00024f0 <mount_volume+0xd2>
c00024e6:	bb 0d 00 00 00       	mov    ebx,0xd
c00024eb:	e9 8d 04 00 00       	jmp    c000297d <mount_volume+0x55f>
c00024f0:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00024f3:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00024f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00024fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00024fe:	75 17                	jne    c0002517 <mount_volume+0xf9>
c0002500:	b8 0b 00 00 00       	mov    eax,0xb
c0002505:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c000250a:	75 da                	jne    c00024e6 <mount_volume+0xc8>
c000250c:	40                   	inc    eax
c000250d:	83 f8 40             	cmp    eax,0x40
c0002510:	75 f3                	jne    c0002505 <mount_volume+0xe7>
c0002512:	e9 5a 02 00 00       	jmp    c0002771 <mount_volume+0x353>
c0002517:	8d 45 5f             	lea    eax,[ebp+0x5f]
c000251a:	e8 6f f4 ff ff       	call   c000198e <ld_word>
c000251f:	66 3d 00 02          	cmp    ax,0x200
c0002523:	75 c1                	jne    c00024e6 <mount_volume+0xc8>
c0002525:	8d 45 6a             	lea    eax,[ebp+0x6a]
c0002528:	e8 61 f4 ff ff       	call   c000198e <ld_word>
c000252d:	0f b7 c0             	movzx  eax,ax
c0002530:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002534:	85 c0                	test   eax,eax
c0002536:	75 0c                	jne    c0002544 <mount_volume+0x126>
c0002538:	8d 45 78             	lea    eax,[ebp+0x78]
c000253b:	e8 5b f4 ff ff       	call   c000199b <ld_dword>
c0002540:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002548:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000254b:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c000254e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002552:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002555:	48                   	dec    eax
c0002556:	3c 01                	cmp    al,0x1
c0002558:	77 8c                	ja     c00024e6 <mount_volume+0xc8>
c000255a:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000255e:	89 c3                	mov    ebx,eax
c0002560:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002564:	66 85 c0             	test   ax,ax
c0002567:	0f 84 79 ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c000256d:	8d 40 ff             	lea    eax,[eax-0x1]
c0002570:	85 d8                	test   eax,ebx
c0002572:	0f 85 6e ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002578:	8d 45 65             	lea    eax,[ebp+0x65]
c000257b:	e8 0e f4 ff ff       	call   c000198e <ld_word>
c0002580:	89 c7                	mov    edi,eax
c0002582:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002586:	a8 0f                	test   al,0xf
c0002588:	0f 85 58 ff ff ff    	jne    c00024e6 <mount_volume+0xc8>
c000258e:	8d 45 67             	lea    eax,[ebp+0x67]
c0002591:	e8 f8 f3 ff ff       	call   c000198e <ld_word>
c0002596:	0f b7 f0             	movzx  esi,ax
c0002599:	85 f6                	test   esi,esi
c000259b:	75 0a                	jne    c00025a7 <mount_volume+0x189>
c000259d:	8d 45 74             	lea    eax,[ebp+0x74]
c00025a0:	e8 f6 f3 ff ff       	call   c000199b <ld_dword>
c00025a5:	89 c6                	mov    esi,eax
c00025a7:	8d 45 62             	lea    eax,[ebp+0x62]
c00025aa:	e8 df f3 ff ff       	call   c000198e <ld_word>
c00025af:	66 85 c0             	test   ax,ax
c00025b2:	0f 84 2e ff ff ff    	je     c00024e6 <mount_volume+0xc8>
c00025b8:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00025bd:	0f b7 c8             	movzx  ecx,ax
c00025c0:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c00025c5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00025c9:	89 fa                	mov    edx,edi
c00025cb:	66 c1 ea 04          	shr    dx,0x4
c00025cf:	0f b7 d2             	movzx  edx,dx
c00025d2:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00025d6:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00025d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025dd:	39 c6                	cmp    esi,eax
c00025df:	0f 82 01 ff ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025e5:	29 c6                	sub    esi,eax
c00025e7:	31 d2                	xor    edx,edx
c00025e9:	89 f0                	mov    eax,esi
c00025eb:	f7 f3                	div    ebx
c00025ed:	39 de                	cmp    esi,ebx
c00025ef:	0f 82 f1 fe ff ff    	jb     c00024e6 <mount_volume+0xc8>
c00025f5:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00025fa:	0f 87 e6 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c0002600:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002605:	0f 86 63 03 00 00    	jbe    c000296e <mount_volume+0x550>
c000260b:	bb 03 00 00 00       	mov    ebx,0x3
c0002610:	8d 70 02             	lea    esi,[eax+0x2]
c0002613:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002617:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000261b:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c000261e:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002621:	31 d2                	xor    edx,edx
c0002623:	89 c8                	mov    eax,ecx
c0002625:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c0002628:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000262c:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002630:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002634:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0002638:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000263b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000263e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002642:	31 d2                	xor    edx,edx
c0002644:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002648:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000264c:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000264f:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002652:	83 fb 03             	cmp    ebx,0x3
c0002655:	75 2b                	jne    c0002682 <mount_volume+0x264>
c0002657:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000265a:	e8 2f f3 ff ff       	call   c000198e <ld_word>
c000265f:	66 09 c7             	or     di,ax
c0002662:	0f 85 7e fe ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002668:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c000266e:	c1 e6 02             	shl    esi,0x2
c0002671:	e8 25 f3 ff ff       	call   c000199b <ld_dword>
c0002676:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000267d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002680:	eb 30                	jmp    c00026b2 <mount_volume+0x294>
c0002682:	66 85 ff             	test   di,di
c0002685:	0f 84 5b fe ff ff    	je     c00024e6 <mount_volume+0xc8>
c000268b:	31 d2                	xor    edx,edx
c000268d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002691:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002695:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002699:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000269c:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000269f:	83 fb 02             	cmp    ebx,0x2
c00026a2:	75 04                	jne    c00026a8 <mount_volume+0x28a>
c00026a4:	01 f6                	add    esi,esi
c00026a6:	eb 0a                	jmp    c00026b2 <mount_volume+0x294>
c00026a8:	8d 04 76             	lea    eax,[esi+esi*2]
c00026ab:	83 e6 01             	and    esi,0x1
c00026ae:	d1 e8                	shr    eax,1
c00026b0:	01 c6                	add    esi,eax
c00026b2:	81 c6 ff 01 00 00    	add    esi,0x1ff
c00026b8:	c1 ee 09             	shr    esi,0x9
c00026bb:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00026bf:	0f 87 21 fe ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00026c5:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c00026cc:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00026d3:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00026d7:	83 fb 03             	cmp    ebx,0x3
c00026da:	75 7a                	jne    c0002756 <mount_volume+0x338>
c00026dc:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00026e2:	e8 a7 f2 ff ff       	call   c000198e <ld_word>
c00026e7:	66 48                	dec    ax
c00026e9:	75 6b                	jne    c0002756 <mount_volume+0x338>
c00026eb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00026ef:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00026f3:	83 c2 01             	add    edx,0x1
c00026f6:	89 e8                	mov    eax,ebp
c00026f8:	83 d1 00             	adc    ecx,0x0
c00026fb:	e8 6c fa ff ff       	call   c000216c <move_window>
c0002700:	85 c0                	test   eax,eax
c0002702:	75 52                	jne    c0002756 <mount_volume+0x338>
c0002704:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c0002708:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c000270e:	e8 7b f2 ff ff       	call   c000198e <ld_word>
c0002713:	66 3d 55 aa          	cmp    ax,0xaa55
c0002717:	75 3d                	jne    c0002756 <mount_volume+0x338>
c0002719:	8d 45 54             	lea    eax,[ebp+0x54]
c000271c:	e8 7a f2 ff ff       	call   c000199b <ld_dword>
c0002721:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002726:	75 2e                	jne    c0002756 <mount_volume+0x338>
c0002728:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c000272e:	e8 68 f2 ff ff       	call   c000199b <ld_dword>
c0002733:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002738:	75 1c                	jne    c0002756 <mount_volume+0x338>
c000273a:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002740:	e8 56 f2 ff ff       	call   c000199b <ld_dword>
c0002745:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002748:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c000274e:	e8 48 f2 ff ff       	call   c000199b <ld_dword>
c0002753:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002756:	66 a1 40 2e 02 c0    	mov    ax,ds:0xc0022e40
c000275c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000275f:	40                   	inc    eax
c0002760:	31 db                	xor    ebx,ebx
c0002762:	66 a3 40 2e 02 c0    	mov    ds:0xc0022e40,ax
c0002768:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000276c:	e9 0c 02 00 00       	jmp    c000297d <mount_volume+0x55f>
c0002771:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002777:	e8 12 f2 ff ff       	call   c000198e <ld_word>
c000277c:	66 3d 00 01          	cmp    ax,0x100
c0002780:	0f 85 60 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002786:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000278d:	0f 85 53 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c0002793:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002799:	e8 15 f2 ff ff       	call   c00019b3 <ld_qword>
c000279e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00027a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00027a6:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c00027ac:	e8 ea f1 ff ff       	call   c000199b <ld_dword>
c00027b1:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027b4:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c00027ba:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c00027bd:	fe c8                	dec    al
c00027bf:	0f 85 21 fd ff ff    	jne    c00024e6 <mount_volume+0xc8>
c00027c5:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c00027cc:	bb 01 00 00 00       	mov    ebx,0x1
c00027d1:	d3 e3                	shl    ebx,cl
c00027d3:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c00027d7:	66 85 db             	test   bx,bx
c00027da:	0f 84 06 fd ff ff    	je     c00024e6 <mount_volume+0xc8>
c00027e0:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c00027e6:	e8 b0 f1 ff ff       	call   c000199b <ld_dword>
c00027eb:	89 c6                	mov    esi,eax
c00027ed:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00027f2:	0f 87 ee fc ff ff    	ja     c00024e6 <mount_volume+0xc8>
c00027f8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00027fc:	8d 40 02             	lea    eax,[eax+0x2]
c00027ff:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002802:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002805:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002809:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000280c:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002812:	e8 84 f1 ff ff       	call   c000199b <ld_dword>
c0002817:	31 d2                	xor    edx,edx
c0002819:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000281d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002821:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002825:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002829:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c000282c:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c000282f:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002835:	e8 61 f1 ff ff       	call   c000199b <ld_dword>
c000283a:	31 d2                	xor    edx,edx
c000283c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002840:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002844:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002848:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000284b:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c000284e:	0f b7 c3             	movzx  eax,bx
c0002851:	31 d2                	xor    edx,edx
c0002853:	0f af f0             	imul   esi,eax
c0002856:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000285a:	89 f0                	mov    eax,esi
c000285c:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002860:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002864:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002868:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000286c:	39 c1                	cmp    ecx,eax
c000286e:	89 df                	mov    edi,ebx
c0002870:	19 d7                	sbb    edi,edx
c0002872:	0f 82 6e fc ff ff    	jb     c00024e6 <mount_volume+0xc8>
c0002878:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000287e:	31 db                	xor    ebx,ebx
c0002880:	e8 16 f1 ff ff       	call   c000199b <ld_dword>
c0002885:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000288c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000288f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002897:	85 db                	test   ebx,ebx
c0002899:	75 39                	jne    c00028d4 <mount_volume+0x4b6>
c000289b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000289f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00028a3:	0f 86 3d fc ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028a9:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c00028ac:	31 ff                	xor    edi,edi
c00028ae:	89 e8                	mov    eax,ebp
c00028b0:	e8 72 f3 ff ff       	call   c0001c27 <clst2sect>
c00028b5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00028b9:	01 c6                	add    esi,eax
c00028bb:	89 e8                	mov    eax,ebp
c00028bd:	11 d7                	adc    edi,edx
c00028bf:	89 f2                	mov    edx,esi
c00028c1:	89 f9                	mov    ecx,edi
c00028c3:	e8 a4 f8 ff ff       	call   c000216c <move_window>
c00028c8:	85 c0                	test   eax,eax
c00028ca:	0f 85 07 fc ff ff    	jne    c00024d7 <mount_volume+0xb9>
c00028d0:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00028d4:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c00028d9:	74 0b                	je     c00028e6 <mount_volume+0x4c8>
c00028db:	83 c3 20             	add    ebx,0x20
c00028de:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00028e4:	eb b1                	jmp    c0002897 <mount_volume+0x479>
c00028e6:	8d 75 54             	lea    esi,[ebp+0x54]
c00028e9:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c00028ed:	e8 a9 f0 ff ff       	call   c000199b <ld_dword>
c00028f2:	89 c3                	mov    ebx,eax
c00028f4:	83 f8 01             	cmp    eax,0x1
c00028f7:	0f 86 e9 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c00028fd:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002900:	0f 86 e0 fb ff ff    	jbe    c00024e6 <mount_volume+0xc8>
c0002906:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002909:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000290d:	0f af c2             	imul   eax,edx
c0002910:	31 d2                	xor    edx,edx
c0002912:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002915:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002918:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c000291b:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c000291e:	31 c9                	xor    ecx,ecx
c0002920:	89 da                	mov    edx,ebx
c0002922:	89 e8                	mov    eax,ebp
c0002924:	c1 ea 07             	shr    edx,0x7
c0002927:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c000292a:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c000292d:	e8 3a f8 ff ff       	call   c000216c <move_window>
c0002932:	85 c0                	test   eax,eax
c0002934:	0f 85 9d fb ff ff    	jne    c00024d7 <mount_volume+0xb9>
c000293a:	89 d8                	mov    eax,ebx
c000293c:	83 e0 7f             	and    eax,0x7f
c000293f:	8d 04 86             	lea    eax,[esi+eax*4]
c0002942:	e8 54 f0 ff ff       	call   c000199b <ld_dword>
c0002947:	83 f8 ff             	cmp    eax,0xffffffff
c000294a:	74 0a                	je     c0002956 <mount_volume+0x538>
c000294c:	43                   	inc    ebx
c000294d:	39 d8                	cmp    eax,ebx
c000294f:	74 cd                	je     c000291e <mount_volume+0x500>
c0002951:	e9 90 fb ff ff       	jmp    c00024e6 <mount_volume+0xc8>
c0002956:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000295d:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002964:	bb 04 00 00 00       	mov    ebx,0x4
c0002969:	e9 e8 fd ff ff       	jmp    c0002756 <mount_volume+0x338>
c000296e:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002973:	19 db                	sbb    ebx,ebx
c0002975:	83 c3 02             	add    ebx,0x2
c0002978:	e9 93 fc ff ff       	jmp    c0002610 <mount_volume+0x1f2>
c000297d:	83 c4 3c             	add    esp,0x3c
c0002980:	89 d8                	mov    eax,ebx
c0002982:	5b                   	pop    ebx
c0002983:	5e                   	pop    esi
c0002984:	5f                   	pop    edi
c0002985:	5d                   	pop    ebp
c0002986:	c3                   	ret    

c0002987 <find_bitmap>:
c0002987:	55                   	push   ebp
c0002988:	57                   	push   edi
c0002989:	89 c7                	mov    edi,eax
c000298b:	56                   	push   esi
c000298c:	8d 72 fe             	lea    esi,[edx-0x2]
c000298f:	53                   	push   ebx
c0002990:	83 ec 1c             	sub    esp,0x1c
c0002993:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002996:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000299a:	83 e8 02             	sub    eax,0x2
c000299d:	39 f0                	cmp    eax,esi
c000299f:	77 02                	ja     c00029a3 <find_bitmap+0x1c>
c00029a1:	31 f6                	xor    esi,esi
c00029a3:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00029a7:	89 f3                	mov    ebx,esi
c00029a9:	31 ed                	xor    ebp,ebp
c00029ab:	31 c9                	xor    ecx,ecx
c00029ad:	89 da                	mov    edx,ebx
c00029af:	89 f8                	mov    eax,edi
c00029b1:	c1 ea 0c             	shr    edx,0xc
c00029b4:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c00029b7:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c00029ba:	e8 ad f7 ff ff       	call   c000216c <move_window>
c00029bf:	85 c0                	test   eax,eax
c00029c1:	75 68                	jne    c0002a2b <find_bitmap+0xa4>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	89 d9                	mov    ecx,ebx
c00029c7:	c1 ea 03             	shr    edx,0x3
c00029ca:	83 e1 07             	and    ecx,0x7
c00029cd:	b8 01 00 00 00       	mov    eax,0x1
c00029d2:	81 e2 ff 01 00 00    	and    edx,0x1ff
c00029d8:	d3 e0                	shl    eax,cl
c00029da:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c00029dd:	83 e9 02             	sub    ecx,0x2
c00029e0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00029e4:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c00029e8:	43                   	inc    ebx
c00029e9:	21 c1                	and    ecx,eax
c00029eb:	d1 e0                	shl    eax,1
c00029ed:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c00029f1:	77 09                	ja     c00029fc <find_bitmap+0x75>
c00029f3:	31 db                	xor    ebx,ebx
c00029f5:	ba 00 02 00 00       	mov    edx,0x200
c00029fa:	31 c0                	xor    eax,eax
c00029fc:	84 c9                	test   cl,cl
c00029fe:	75 10                	jne    c0002a10 <find_bitmap+0x89>
c0002a00:	45                   	inc    ebp
c0002a01:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002a05:	75 0f                	jne    c0002a16 <find_bitmap+0x8f>
c0002a07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002a0b:	83 c0 02             	add    eax,0x2
c0002a0e:	eb 22                	jmp    c0002a32 <find_bitmap+0xab>
c0002a10:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002a14:	31 ed                	xor    ebp,ebp
c0002a16:	39 de                	cmp    esi,ebx
c0002a18:	74 16                	je     c0002a30 <find_bitmap+0xa9>
c0002a1a:	84 c0                	test   al,al
c0002a1c:	75 c6                	jne    c00029e4 <find_bitmap+0x5d>
c0002a1e:	42                   	inc    edx
c0002a1f:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002a25:	77 84                	ja     c00029ab <find_bitmap+0x24>
c0002a27:	b0 01                	mov    al,0x1
c0002a29:	eb b9                	jmp    c00029e4 <find_bitmap+0x5d>
c0002a2b:	83 c8 ff             	or     eax,0xffffffff
c0002a2e:	eb 02                	jmp    c0002a32 <find_bitmap+0xab>
c0002a30:	31 c0                	xor    eax,eax
c0002a32:	83 c4 1c             	add    esp,0x1c
c0002a35:	5b                   	pop    ebx
c0002a36:	5e                   	pop    esi
c0002a37:	5f                   	pop    edi
c0002a38:	5d                   	pop    ebp
c0002a39:	c3                   	ret    

c0002a3a <change_bitmap>:
c0002a3a:	55                   	push   ebp
c0002a3b:	89 cd                	mov    ebp,ecx
c0002a3d:	57                   	push   edi
c0002a3e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002a41:	56                   	push   esi
c0002a42:	89 c7                	mov    edi,eax
c0002a44:	53                   	push   ebx
c0002a45:	89 c8                	mov    eax,ecx
c0002a47:	83 ec 1c             	sub    esp,0x1c
c0002a4a:	31 d2                	xor    edx,edx
c0002a4c:	89 ce                	mov    esi,ecx
c0002a4e:	c1 e8 0c             	shr    eax,0xc
c0002a51:	bb 01 00 00 00       	mov    ebx,0x1
c0002a56:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002a59:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002a5c:	c1 ee 03             	shr    esi,0x3
c0002a5f:	83 e1 07             	and    ecx,0x7
c0002a62:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002a68:	d3 e3                	shl    ebx,cl
c0002a6a:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002a6e:	89 c1                	mov    ecx,eax
c0002a70:	89 d3                	mov    ebx,edx
c0002a72:	83 c1 01             	add    ecx,0x1
c0002a75:	83 d3 00             	adc    ebx,0x0
c0002a78:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a7c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002a80:	89 d1                	mov    ecx,edx
c0002a82:	89 c2                	mov    edx,eax
c0002a84:	89 f8                	mov    eax,edi
c0002a86:	e8 e1 f6 ff ff       	call   c000216c <move_window>
c0002a8b:	89 c1                	mov    ecx,eax
c0002a8d:	85 c0                	test   eax,eax
c0002a8f:	75 48                	jne    c0002ad9 <change_bitmap+0x9f>
c0002a91:	31 d2                	xor    edx,edx
c0002a93:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002a97:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002a9b:	0f 95 c2             	setne  dl
c0002a9e:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002aa2:	74 3c                	je     c0002ae0 <change_bitmap+0xa6>
c0002aa4:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002aa8:	4d                   	dec    ebp
c0002aa9:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002ab1:	74 32                	je     c0002ae5 <change_bitmap+0xab>
c0002ab3:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002ab7:	75 d8                	jne    c0002a91 <change_bitmap+0x57>
c0002ab9:	8d 46 01             	lea    eax,[esi+0x1]
c0002abc:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002ac1:	89 c3                	mov    ebx,eax
c0002ac3:	31 f6                	xor    esi,esi
c0002ac5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ac9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acd:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002ad3:	74 99                	je     c0002a6e <change_bitmap+0x34>
c0002ad5:	89 de                	mov    esi,ebx
c0002ad7:	eb b8                	jmp    c0002a91 <change_bitmap+0x57>
c0002ad9:	b9 01 00 00 00       	mov    ecx,0x1
c0002ade:	eb 05                	jmp    c0002ae5 <change_bitmap+0xab>
c0002ae0:	b9 02 00 00 00       	mov    ecx,0x2
c0002ae5:	83 c4 1c             	add    esp,0x1c
c0002ae8:	89 c8                	mov    eax,ecx
c0002aea:	5b                   	pop    ebx
c0002aeb:	5e                   	pop    esi
c0002aec:	5f                   	pop    edi
c0002aed:	5d                   	pop    ebp
c0002aee:	c3                   	ret    

c0002aef <put_fat>:
c0002aef:	83 fa 01             	cmp    edx,0x1
c0002af2:	0f 86 7b 01 00 00    	jbe    c0002c73 <put_fat+0x184>
c0002af8:	55                   	push   ebp
c0002af9:	57                   	push   edi
c0002afa:	89 cf                	mov    edi,ecx
c0002afc:	56                   	push   esi
c0002afd:	b9 02 00 00 00       	mov    ecx,0x2
c0002b02:	53                   	push   ebx
c0002b03:	89 c6                	mov    esi,eax
c0002b05:	83 ec 1c             	sub    esp,0x1c
c0002b08:	89 d3                	mov    ebx,edx
c0002b0a:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002b0d:	0f 86 68 01 00 00    	jbe    c0002c7b <put_fat+0x18c>
c0002b13:	8a 00                	mov    al,BYTE PTR [eax]
c0002b15:	3c 02                	cmp    al,0x2
c0002b17:	0f 84 c7 00 00 00    	je     c0002be4 <put_fat+0xf5>
c0002b1d:	77 09                	ja     c0002b28 <put_fat+0x39>
c0002b1f:	fe c8                	dec    al
c0002b21:	74 17                	je     c0002b3a <put_fat+0x4b>
c0002b23:	e9 53 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b28:	b9 02 00 00 00       	mov    ecx,0x2
c0002b2d:	3c 04                	cmp    al,0x4
c0002b2f:	0f 86 e1 00 00 00    	jbe    c0002c16 <put_fat+0x127>
c0002b35:	e9 41 01 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002b3a:	89 d5                	mov    ebp,edx
c0002b3c:	31 c9                	xor    ecx,ecx
c0002b3e:	d1 ed                	shr    ebp,1
c0002b40:	89 f0                	mov    eax,esi
c0002b42:	01 d5                	add    ebp,edx
c0002b44:	89 ea                	mov    edx,ebp
c0002b46:	c1 ea 09             	shr    edx,0x9
c0002b49:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b4c:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002b4f:	e8 18 f6 ff ff       	call   c000216c <move_window>
c0002b54:	89 c1                	mov    ecx,eax
c0002b56:	85 c0                	test   eax,eax
c0002b58:	0f 85 1d 01 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002b5e:	8d 46 54             	lea    eax,[esi+0x54]
c0002b61:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002b65:	8d 45 01             	lea    eax,[ebp+0x1]
c0002b68:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002b6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002b72:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002b76:	89 f8                	mov    eax,edi
c0002b78:	83 e3 01             	and    ebx,0x1
c0002b7b:	74 0d                	je     c0002b8a <put_fat+0x9b>
c0002b7d:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002b80:	89 fa                	mov    edx,edi
c0002b82:	83 e0 0f             	and    eax,0xf
c0002b85:	c1 e2 04             	shl    edx,0x4
c0002b88:	09 d0                	or     eax,edx
c0002b8a:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002b8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b91:	31 c9                	xor    ecx,ecx
c0002b93:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002b97:	c1 ea 09             	shr    edx,0x9
c0002b9a:	89 f0                	mov    eax,esi
c0002b9c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002b9f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ba2:	e8 c5 f5 ff ff       	call   c000216c <move_window>
c0002ba7:	89 c1                	mov    ecx,eax
c0002ba9:	85 c0                	test   eax,eax
c0002bab:	0f 85 ca 00 00 00    	jne    c0002c7b <put_fat+0x18c>
c0002bb1:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002bb5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002bbb:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002bbf:	85 db                	test   ebx,ebx
c0002bc1:	74 07                	je     c0002bca <put_fat+0xdb>
c0002bc3:	c1 ef 04             	shr    edi,0x4
c0002bc6:	89 fa                	mov    edx,edi
c0002bc8:	eb 0e                	jmp    c0002bd8 <put_fat+0xe9>
c0002bca:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002bcd:	c1 ef 08             	shr    edi,0x8
c0002bd0:	83 e2 f0             	and    edx,0xfffffff0
c0002bd3:	83 e7 0f             	and    edi,0xf
c0002bd6:	09 fa                	or     edx,edi
c0002bd8:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002bdb:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002bdf:	e9 97 00 00 00       	jmp    c0002c7b <put_fat+0x18c>
c0002be4:	31 c9                	xor    ecx,ecx
c0002be6:	c1 ea 08             	shr    edx,0x8
c0002be9:	89 f0                	mov    eax,esi
c0002beb:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bee:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002bf1:	e8 76 f5 ff ff       	call   c000216c <move_window>
c0002bf6:	89 c1                	mov    ecx,eax
c0002bf8:	85 c0                	test   eax,eax
c0002bfa:	75 7f                	jne    c0002c7b <put_fat+0x18c>
c0002bfc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c00:	01 db                	add    ebx,ebx
c0002c02:	0f b7 d7             	movzx  edx,di
c0002c05:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002c0b:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002c0f:	e8 ec ed ff ff       	call   c0001a00 <st_word>
c0002c14:	eb 53                	jmp    c0002c69 <put_fat+0x17a>
c0002c16:	31 c9                	xor    ecx,ecx
c0002c18:	c1 ea 07             	shr    edx,0x7
c0002c1b:	89 f0                	mov    eax,esi
c0002c1d:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c20:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c23:	e8 44 f5 ff ff       	call   c000216c <move_window>
c0002c28:	89 c1                	mov    ecx,eax
c0002c2a:	85 c0                	test   eax,eax
c0002c2c:	75 4d                	jne    c0002c7b <put_fat+0x18c>
c0002c2e:	c1 e3 02             	shl    ebx,0x2
c0002c31:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002c37:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002c3a:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002c3e:	74 1c                	je     c0002c5c <put_fat+0x16d>
c0002c40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c44:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002c4a:	89 d8                	mov    eax,ebx
c0002c4c:	e8 4a ed ff ff       	call   c000199b <ld_dword>
c0002c51:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c55:	25 00 00 00 f0       	and    eax,0xf0000000
c0002c5a:	09 c7                	or     edi,eax
c0002c5c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c60:	89 fa                	mov    edx,edi
c0002c62:	89 d8                	mov    eax,ebx
c0002c64:	e8 9b ed ff ff       	call   c0001a04 <st_dword>
c0002c69:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c6d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002c71:	eb 08                	jmp    c0002c7b <put_fat+0x18c>
c0002c73:	b9 02 00 00 00       	mov    ecx,0x2
c0002c78:	89 c8                	mov    eax,ecx
c0002c7a:	c3                   	ret    
c0002c7b:	83 c4 1c             	add    esp,0x1c
c0002c7e:	89 c8                	mov    eax,ecx
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <fill_last_frag>:
c0002c85:	57                   	push   edi
c0002c86:	89 cf                	mov    edi,ecx
c0002c88:	56                   	push   esi
c0002c89:	89 d6                	mov    esi,edx
c0002c8b:	53                   	push   ebx
c0002c8c:	89 c3                	mov    ebx,eax
c0002c8e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002c91:	85 c0                	test   eax,eax
c0002c93:	74 21                	je     c0002cb6 <fill_last_frag+0x31>
c0002c95:	89 f9                	mov    ecx,edi
c0002c97:	83 f8 01             	cmp    eax,0x1
c0002c9a:	76 05                	jbe    c0002ca1 <fill_last_frag+0x1c>
c0002c9c:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002c9f:	29 c1                	sub    ecx,eax
c0002ca1:	8d 56 01             	lea    edx,[esi+0x1]
c0002ca4:	29 c2                	sub    edx,eax
c0002ca6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002ca8:	e8 42 fe ff ff       	call   c0002aef <put_fat>
c0002cad:	85 c0                	test   eax,eax
c0002caf:	75 05                	jne    c0002cb6 <fill_last_frag+0x31>
c0002cb1:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002cb4:	eb d8                	jmp    c0002c8e <fill_last_frag+0x9>
c0002cb6:	5b                   	pop    ebx
c0002cb7:	5e                   	pop    esi
c0002cb8:	5f                   	pop    edi
c0002cb9:	c3                   	ret    

c0002cba <fill_first_frag>:
c0002cba:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002cbe:	75 2d                	jne    c0002ced <fill_first_frag+0x33>
c0002cc0:	57                   	push   edi
c0002cc1:	56                   	push   esi
c0002cc2:	53                   	push   ebx
c0002cc3:	89 c3                	mov    ebx,eax
c0002cc5:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002cc8:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002ccb:	01 d7                	add    edi,edx
c0002ccd:	39 fa                	cmp    edx,edi
c0002ccf:	74 14                	je     c0002ce5 <fill_first_frag+0x2b>
c0002cd1:	8d 72 01             	lea    esi,[edx+0x1]
c0002cd4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002cd6:	89 f1                	mov    ecx,esi
c0002cd8:	e8 12 fe ff ff       	call   c0002aef <put_fat>
c0002cdd:	89 f2                	mov    edx,esi
c0002cdf:	85 c0                	test   eax,eax
c0002ce1:	74 ea                	je     c0002ccd <fill_first_frag+0x13>
c0002ce3:	eb 0b                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ce5:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002ce9:	31 c0                	xor    eax,eax
c0002ceb:	eb 03                	jmp    c0002cf0 <fill_first_frag+0x36>
c0002ced:	31 c0                	xor    eax,eax
c0002cef:	c3                   	ret    
c0002cf0:	5b                   	pop    ebx
c0002cf1:	5e                   	pop    esi
c0002cf2:	5f                   	pop    edi
c0002cf3:	c3                   	ret    

c0002cf4 <get_fat>:
c0002cf4:	83 fa 01             	cmp    edx,0x1
c0002cf7:	0f 86 db 01 00 00    	jbe    c0002ed8 <get_fat+0x1e4>
c0002cfd:	55                   	push   ebp
c0002cfe:	b9 01 00 00 00       	mov    ecx,0x1
c0002d03:	57                   	push   edi
c0002d04:	56                   	push   esi
c0002d05:	53                   	push   ebx
c0002d06:	83 ec 1c             	sub    esp,0x1c
c0002d09:	8b 38                	mov    edi,DWORD PTR [eax]
c0002d0b:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002d0e:	0f 86 cc 01 00 00    	jbe    c0002ee0 <get_fat+0x1ec>
c0002d14:	89 c3                	mov    ebx,eax
c0002d16:	89 d6                	mov    esi,edx
c0002d18:	8a 07                	mov    al,BYTE PTR [edi]
c0002d1a:	3c 02                	cmp    al,0x2
c0002d1c:	0f 84 99 00 00 00    	je     c0002dbb <get_fat+0xc7>
c0002d22:	77 09                	ja     c0002d2d <get_fat+0x39>
c0002d24:	fe c8                	dec    al
c0002d26:	74 1a                	je     c0002d42 <get_fat+0x4e>
c0002d28:	e9 b3 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d2d:	3c 03                	cmp    al,0x3
c0002d2f:	0f 84 b5 00 00 00    	je     c0002dea <get_fat+0xf6>
c0002d35:	3c 04                	cmp    al,0x4
c0002d37:	0f 84 e3 00 00 00    	je     c0002e20 <get_fat+0x12c>
c0002d3d:	e9 9e 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d42:	89 d3                	mov    ebx,edx
c0002d44:	31 c9                	xor    ecx,ecx
c0002d46:	d1 eb                	shr    ebx,1
c0002d48:	89 f8                	mov    eax,edi
c0002d4a:	01 d3                	add    ebx,edx
c0002d4c:	89 da                	mov    edx,ebx
c0002d4e:	c1 ea 09             	shr    edx,0x9
c0002d51:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d54:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d57:	e8 10 f4 ff ff       	call   c000216c <move_window>
c0002d5c:	85 c0                	test   eax,eax
c0002d5e:	74 08                	je     c0002d68 <get_fat+0x74>
c0002d60:	83 c9 ff             	or     ecx,0xffffffff
c0002d63:	e9 78 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002d68:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002d6b:	31 c9                	xor    ecx,ecx
c0002d6d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002d73:	89 ea                	mov    edx,ebp
c0002d75:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002d79:	c1 ea 09             	shr    edx,0x9
c0002d7c:	89 f8                	mov    eax,edi
c0002d7e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002d81:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002d84:	e8 e3 f3 ff ff       	call   c000216c <move_window>
c0002d89:	85 c0                	test   eax,eax
c0002d8b:	75 d3                	jne    c0002d60 <get_fat+0x6c>
c0002d8d:	0f b6 c3             	movzx  eax,bl
c0002d90:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002d96:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002d9b:	c1 e3 08             	shl    ebx,0x8
c0002d9e:	09 c3                	or     ebx,eax
c0002da0:	89 d9                	mov    ecx,ebx
c0002da2:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002da8:	83 e6 01             	and    esi,0x1
c0002dab:	0f 84 2f 01 00 00    	je     c0002ee0 <get_fat+0x1ec>
c0002db1:	89 d9                	mov    ecx,ebx
c0002db3:	c1 e9 04             	shr    ecx,0x4
c0002db6:	e9 25 01 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dbb:	31 c9                	xor    ecx,ecx
c0002dbd:	c1 ea 08             	shr    edx,0x8
c0002dc0:	89 f8                	mov    eax,edi
c0002dc2:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002dc5:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002dc8:	e8 9f f3 ff ff       	call   c000216c <move_window>
c0002dcd:	85 c0                	test   eax,eax
c0002dcf:	75 8f                	jne    c0002d60 <get_fat+0x6c>
c0002dd1:	01 f6                	add    esi,esi
c0002dd3:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002dd9:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ddd:	e8 ac eb ff ff       	call   c000198e <ld_word>
c0002de2:	0f b7 c8             	movzx  ecx,ax
c0002de5:	e9 f6 00 00 00       	jmp    c0002ee0 <get_fat+0x1ec>
c0002dea:	31 c9                	xor    ecx,ecx
c0002dec:	c1 ea 07             	shr    edx,0x7
c0002def:	89 f8                	mov    eax,edi
c0002df1:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002df4:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002df7:	e8 70 f3 ff ff       	call   c000216c <move_window>
c0002dfc:	85 c0                	test   eax,eax
c0002dfe:	0f 85 5c ff ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002e04:	c1 e6 02             	shl    esi,0x2
c0002e07:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002e0d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e11:	e8 85 eb ff ff       	call   c000199b <ld_dword>
c0002e16:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002e1b:	e9 b4 00 00 00       	jmp    c0002ed4 <get_fat+0x1e0>
c0002e20:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002e23:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002e26:	89 d1                	mov    ecx,edx
c0002e28:	09 c1                	or     ecx,eax
c0002e2a:	74 06                	je     c0002e32 <get_fat+0x13e>
c0002e2c:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002e30:	75 0f                	jne    c0002e41 <get_fat+0x14d>
c0002e32:	b9 01 00 00 00       	mov    ecx,0x1
c0002e37:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002e3b:	0f 85 9f 00 00 00    	jne    c0002ee0 <get_fat+0x1ec>
c0002e41:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002e45:	89 f5                	mov    ebp,esi
c0002e47:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002e4c:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002e4f:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002e52:	80 f9 02             	cmp    cl,0x2
c0002e55:	75 35                	jne    c0002e8c <get_fat+0x198>
c0002e57:	83 c0 ff             	add    eax,0xffffffff
c0002e5a:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002e5f:	83 d2 ff             	adc    edx,0xffffffff
c0002e62:	31 db                	xor    ebx,ebx
c0002e64:	0f ac d0 09          	shrd   eax,edx,0x9
c0002e68:	53                   	push   ebx
c0002e69:	c1 ea 09             	shr    edx,0x9
c0002e6c:	51                   	push   ecx
c0002e6d:	52                   	push   edx
c0002e6e:	50                   	push   eax
c0002e6f:	e8 58 b2 01 00       	call   c001e0cc <__udivdi3>
c0002e74:	83 c4 10             	add    esp,0x10
c0002e77:	b9 01 00 00 00       	mov    ecx,0x1
c0002e7c:	39 c5                	cmp    ebp,eax
c0002e7e:	77 60                	ja     c0002ee0 <get_fat+0x1ec>
c0002e80:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e85:	74 59                	je     c0002ee0 <get_fat+0x1ec>
c0002e87:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002e8a:	eb 54                	jmp    c0002ee0 <get_fat+0x1ec>
c0002e8c:	80 f9 03             	cmp    cl,0x3
c0002e8f:	75 05                	jne    c0002e96 <get_fat+0x1a2>
c0002e91:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002e94:	77 f1                	ja     c0002e87 <get_fat+0x193>
c0002e96:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002e9b:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002e9f:	75 3f                	jne    c0002ee0 <get_fat+0x1ec>
c0002ea1:	31 c9                	xor    ecx,ecx
c0002ea3:	89 f2                	mov    edx,esi
c0002ea5:	89 f8                	mov    eax,edi
c0002ea7:	c1 ea 07             	shr    edx,0x7
c0002eaa:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ead:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002eb0:	e8 b7 f2 ff ff       	call   c000216c <move_window>
c0002eb5:	85 c0                	test   eax,eax
c0002eb7:	0f 85 a3 fe ff ff    	jne    c0002d60 <get_fat+0x6c>
c0002ebd:	c1 e6 02             	shl    esi,0x2
c0002ec0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ec6:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002eca:	e8 cc ea ff ff       	call   c000199b <ld_dword>
c0002ecf:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002ed4:	89 c1                	mov    ecx,eax
c0002ed6:	eb 08                	jmp    c0002ee0 <get_fat+0x1ec>
c0002ed8:	b9 01 00 00 00       	mov    ecx,0x1
c0002edd:	89 c8                	mov    eax,ecx
c0002edf:	c3                   	ret    
c0002ee0:	83 c4 1c             	add    esp,0x1c
c0002ee3:	89 c8                	mov    eax,ecx
c0002ee5:	5b                   	pop    ebx
c0002ee6:	5e                   	pop    esi
c0002ee7:	5f                   	pop    edi
c0002ee8:	5d                   	pop    ebp
c0002ee9:	c3                   	ret    

c0002eea <dir_sdi>:
c0002eea:	55                   	push   ebp
c0002eeb:	57                   	push   edi
c0002eec:	56                   	push   esi
c0002eed:	53                   	push   ebx
c0002eee:	89 c3                	mov    ebx,eax
c0002ef0:	83 ec 1c             	sub    esp,0x1c
c0002ef3:	8b 38                	mov    edi,DWORD PTR [eax]
c0002ef5:	31 c0                	xor    eax,eax
c0002ef7:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002efa:	0f 94 c0             	sete   al
c0002efd:	48                   	dec    eax
c0002efe:	25 00 00 20 f0       	and    eax,0xf0200000
c0002f03:	05 00 00 00 10       	add    eax,0x10000000
c0002f08:	39 d0                	cmp    eax,edx
c0002f0a:	77 0a                	ja     c0002f16 <dir_sdi+0x2c>
c0002f0c:	b8 02 00 00 00       	mov    eax,0x2
c0002f11:	e9 c4 00 00 00       	jmp    c0002fda <dir_sdi+0xf0>
c0002f16:	89 d6                	mov    esi,edx
c0002f18:	f6 c2 1f             	test   dl,0x1f
c0002f1b:	75 ef                	jne    c0002f0c <dir_sdi+0x22>
c0002f1d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002f20:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002f23:	85 c9                	test   ecx,ecx
c0002f25:	75 2d                	jne    c0002f54 <dir_sdi+0x6a>
c0002f27:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002f2a:	77 1b                	ja     c0002f47 <dir_sdi+0x5d>
c0002f2c:	89 f2                	mov    edx,esi
c0002f2e:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002f32:	c1 ea 05             	shr    edx,0x5
c0002f35:	39 c2                	cmp    edx,eax
c0002f37:	73 d3                	jae    c0002f0c <dir_sdi+0x22>
c0002f39:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f3c:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002f3f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f42:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f45:	eb 4b                	jmp    c0002f92 <dir_sdi+0xa8>
c0002f47:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002f4a:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f4e:	85 c0                	test   eax,eax
c0002f50:	74 da                	je     c0002f2c <dir_sdi+0x42>
c0002f52:	89 c1                	mov    ecx,eax
c0002f54:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0002f58:	c1 e5 09             	shl    ebp,0x9
c0002f5b:	89 ca                	mov    edx,ecx
c0002f5d:	39 ee                	cmp    esi,ebp
c0002f5f:	72 1c                	jb     c0002f7d <dir_sdi+0x93>
c0002f61:	89 d8                	mov    eax,ebx
c0002f63:	e8 8c fd ff ff       	call   c0002cf4 <get_fat>
c0002f68:	89 c1                	mov    ecx,eax
c0002f6a:	83 f8 ff             	cmp    eax,0xffffffff
c0002f6d:	74 66                	je     c0002fd5 <dir_sdi+0xeb>
c0002f6f:	83 f8 01             	cmp    eax,0x1
c0002f72:	76 98                	jbe    c0002f0c <dir_sdi+0x22>
c0002f74:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0002f77:	76 93                	jbe    c0002f0c <dir_sdi+0x22>
c0002f79:	29 ee                	sub    esi,ebp
c0002f7b:	eb de                	jmp    c0002f5b <dir_sdi+0x71>
c0002f7d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f81:	89 f8                	mov    eax,edi
c0002f83:	e8 9f ec ff ff       	call   c0001c27 <clst2sect>
c0002f88:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f8c:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002f8f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002f92:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0002f95:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002f98:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0002f9b:	89 d1                	mov    ecx,edx
c0002f9d:	09 c1                	or     ecx,eax
c0002f9f:	0f 84 67 ff ff ff    	je     c0002f0c <dir_sdi+0x22>
c0002fa5:	89 f1                	mov    ecx,esi
c0002fa7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002faf:	c1 e9 09             	shr    ecx,0x9
c0002fb2:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002fb6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002fba:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002fbe:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fc1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002fc7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002fca:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002fce:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0002fd1:	31 c0                	xor    eax,eax
c0002fd3:	eb 05                	jmp    c0002fda <dir_sdi+0xf0>
c0002fd5:	b8 01 00 00 00       	mov    eax,0x1
c0002fda:	83 c4 1c             	add    esp,0x1c
c0002fdd:	5b                   	pop    ebx
c0002fde:	5e                   	pop    esi
c0002fdf:	5f                   	pop    edi
c0002fe0:	5d                   	pop    ebp
c0002fe1:	c3                   	ret    

c0002fe2 <create_chain>:
c0002fe2:	55                   	push   ebp
c0002fe3:	89 c5                	mov    ebp,eax
c0002fe5:	57                   	push   edi
c0002fe6:	56                   	push   esi
c0002fe7:	53                   	push   ebx
c0002fe8:	83 ec 1c             	sub    esp,0x1c
c0002feb:	85 d2                	test   edx,edx
c0002fed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002ff1:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ff3:	75 0e                	jne    c0003003 <create_chain+0x21>
c0002ff5:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0002ff8:	85 ff                	test   edi,edi
c0002ffa:	74 39                	je     c0003035 <create_chain+0x53>
c0002ffc:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c0002fff:	77 39                	ja     c000303a <create_chain+0x58>
c0003001:	eb 32                	jmp    c0003035 <create_chain+0x53>
c0003003:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003007:	e8 e8 fc ff ff       	call   c0002cf4 <get_fat>
c000300c:	89 c3                	mov    ebx,eax
c000300e:	83 f8 01             	cmp    eax,0x1
c0003011:	77 0a                	ja     c000301d <create_chain+0x3b>
c0003013:	bb 01 00 00 00       	mov    ebx,0x1
c0003018:	e9 ba 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c000301d:	83 f8 ff             	cmp    eax,0xffffffff
c0003020:	0f 84 62 01 00 00    	je     c0003188 <create_chain+0x1a6>
c0003026:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c0003029:	0f 87 a8 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c000302f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003033:	eb 05                	jmp    c000303a <create_chain+0x58>
c0003035:	bf 01 00 00 00       	mov    edi,0x1
c000303a:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c000303e:	75 07                	jne    c0003047 <create_chain+0x65>
c0003040:	31 db                	xor    ebx,ebx
c0003042:	e9 90 01 00 00       	jmp    c00031d7 <create_chain+0x1f5>
c0003047:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000304a:	75 74                	jne    c00030c0 <create_chain+0xde>
c000304c:	b9 01 00 00 00       	mov    ecx,0x1
c0003051:	89 fa                	mov    edx,edi
c0003053:	89 f0                	mov    eax,esi
c0003055:	e8 2d f9 ff ff       	call   c0002987 <find_bitmap>
c000305a:	89 c3                	mov    ebx,eax
c000305c:	8d 40 ff             	lea    eax,[eax-0x1]
c000305f:	83 f8 fd             	cmp    eax,0xfffffffd
c0003062:	0f 87 6f 01 00 00    	ja     c00031d7 <create_chain+0x1f5>
c0003068:	83 ec 0c             	sub    esp,0xc
c000306b:	b9 01 00 00 00       	mov    ecx,0x1
c0003070:	6a 01                	push   0x1
c0003072:	89 da                	mov    edx,ebx
c0003074:	89 f0                	mov    eax,esi
c0003076:	e8 bf f9 ff ff       	call   c0002a3a <change_bitmap>
c000307b:	83 c4 10             	add    esp,0x10
c000307e:	83 f8 02             	cmp    eax,0x2
c0003081:	74 90                	je     c0003013 <create_chain+0x31>
c0003083:	83 f8 01             	cmp    eax,0x1
c0003086:	0f 84 fc 00 00 00    	je     c0003188 <create_chain+0x1a6>
c000308c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003091:	75 09                	jne    c000309c <create_chain+0xba>
c0003093:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003097:	e9 0c 01 00 00       	jmp    c00031a8 <create_chain+0x1c6>
c000309c:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c00030a0:	0f 85 e7 00 00 00    	jne    c000318d <create_chain+0x1ab>
c00030a6:	8d 57 01             	lea    edx,[edi+0x1]
c00030a9:	39 da                	cmp    edx,ebx
c00030ab:	0f 84 f7 00 00 00    	je     c00031a8 <create_chain+0x1c6>
c00030b1:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c00030b4:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c00030b8:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c00030bb:	e9 cd 00 00 00       	jmp    c000318d <create_chain+0x1ab>
c00030c0:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00030c4:	75 41                	jne    c0003107 <create_chain+0x125>
c00030c6:	8d 5f 01             	lea    ebx,[edi+0x1]
c00030c9:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00030cc:	77 05                	ja     c00030d3 <create_chain+0xf1>
c00030ce:	bb 02 00 00 00       	mov    ebx,0x2
c00030d3:	89 da                	mov    edx,ebx
c00030d5:	89 e8                	mov    eax,ebp
c00030d7:	e8 18 fc ff ff       	call   c0002cf4 <get_fat>
c00030dc:	83 f8 01             	cmp    eax,0x1
c00030df:	0f 84 2e ff ff ff    	je     c0003013 <create_chain+0x31>
c00030e5:	83 f8 ff             	cmp    eax,0xffffffff
c00030e8:	0f 84 9a 00 00 00    	je     c0003188 <create_chain+0x1a6>
c00030ee:	85 c0                	test   eax,eax
c00030f0:	74 11                	je     c0003103 <create_chain+0x121>
c00030f2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00030f5:	83 f8 01             	cmp    eax,0x1
c00030f8:	76 0d                	jbe    c0003107 <create_chain+0x125>
c00030fa:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030fd:	76 08                	jbe    c0003107 <create_chain+0x125>
c00030ff:	89 c7                	mov    edi,eax
c0003101:	eb 04                	jmp    c0003107 <create_chain+0x125>
c0003103:	85 db                	test   ebx,ebx
c0003105:	75 38                	jne    c000313f <create_chain+0x15d>
c0003107:	89 fb                	mov    ebx,edi
c0003109:	43                   	inc    ebx
c000310a:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000310d:	77 0e                	ja     c000311d <create_chain+0x13b>
c000310f:	83 ff 01             	cmp    edi,0x1
c0003112:	0f 86 28 ff ff ff    	jbe    c0003040 <create_chain+0x5e>
c0003118:	bb 02 00 00 00       	mov    ebx,0x2
c000311d:	89 da                	mov    edx,ebx
c000311f:	89 e8                	mov    eax,ebp
c0003121:	e8 ce fb ff ff       	call   c0002cf4 <get_fat>
c0003126:	85 c0                	test   eax,eax
c0003128:	74 15                	je     c000313f <create_chain+0x15d>
c000312a:	83 f8 01             	cmp    eax,0x1
c000312d:	0f 84 e0 fe ff ff    	je     c0003013 <create_chain+0x31>
c0003133:	40                   	inc    eax
c0003134:	74 52                	je     c0003188 <create_chain+0x1a6>
c0003136:	39 fb                	cmp    ebx,edi
c0003138:	75 cf                	jne    c0003109 <create_chain+0x127>
c000313a:	e9 01 ff ff ff       	jmp    c0003040 <create_chain+0x5e>
c000313f:	83 c9 ff             	or     ecx,0xffffffff
c0003142:	89 da                	mov    edx,ebx
c0003144:	89 f0                	mov    eax,esi
c0003146:	e8 a4 f9 ff ff       	call   c0002aef <put_fat>
c000314b:	85 c0                	test   eax,eax
c000314d:	75 32                	jne    c0003181 <create_chain+0x19f>
c000314f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003154:	74 11                	je     c0003167 <create_chain+0x185>
c0003156:	89 d9                	mov    ecx,ebx
c0003158:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000315c:	89 f0                	mov    eax,esi
c000315e:	e8 8c f9 ff ff       	call   c0002aef <put_fat>
c0003163:	85 c0                	test   eax,eax
c0003165:	75 1a                	jne    c0003181 <create_chain+0x19f>
c0003167:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000316a:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000316d:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003170:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003173:	39 d0                	cmp    eax,edx
c0003175:	77 04                	ja     c000317b <create_chain+0x199>
c0003177:	48                   	dec    eax
c0003178:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000317b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000317f:	eb 56                	jmp    c00031d7 <create_chain+0x1f5>
c0003181:	48                   	dec    eax
c0003182:	0f 85 8b fe ff ff    	jne    c0003013 <create_chain+0x31>
c0003188:	83 cb ff             	or     ebx,0xffffffff
c000318b:	eb 4a                	jmp    c00031d7 <create_chain+0x1f5>
c000318d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003191:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003194:	41                   	inc    ecx
c0003195:	39 d9                	cmp    ecx,ebx
c0003197:	75 19                	jne    c00031b2 <create_chain+0x1d0>
c0003199:	b9 02 00 00 00       	mov    ecx,0x2
c000319e:	85 d2                	test   edx,edx
c00031a0:	74 03                	je     c00031a5 <create_chain+0x1c3>
c00031a2:	8d 4a 01             	lea    ecx,[edx+0x1]
c00031a5:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c00031a8:	85 c0                	test   eax,eax
c00031aa:	0f 85 63 fe ff ff    	jne    c0003013 <create_chain+0x31>
c00031b0:	eb b5                	jmp    c0003167 <create_chain+0x185>
c00031b2:	85 d2                	test   edx,edx
c00031b4:	75 07                	jne    c00031bd <create_chain+0x1db>
c00031b6:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00031c3:	89 e8                	mov    eax,ebp
c00031c5:	e8 bb fa ff ff       	call   c0002c85 <fill_last_frag>
c00031ca:	85 c0                	test   eax,eax
c00031cc:	75 b3                	jne    c0003181 <create_chain+0x19f>
c00031ce:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00031d5:	eb 90                	jmp    c0003167 <create_chain+0x185>
c00031d7:	83 c4 1c             	add    esp,0x1c
c00031da:	89 d8                	mov    eax,ebx
c00031dc:	5b                   	pop    ebx
c00031dd:	5e                   	pop    esi
c00031de:	5f                   	pop    edi
c00031df:	5d                   	pop    ebp
c00031e0:	c3                   	ret    

c00031e1 <remove_chain>:
c00031e1:	55                   	push   ebp
c00031e2:	57                   	push   edi
c00031e3:	56                   	push   esi
c00031e4:	53                   	push   ebx
c00031e5:	83 ec 1c             	sub    esp,0x1c
c00031e8:	83 fa 01             	cmp    edx,0x1
c00031eb:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00031ef:	8b 18                	mov    ebx,DWORD PTR [eax]
c00031f1:	77 0a                	ja     c00031fd <remove_chain+0x1c>
c00031f3:	b8 02 00 00 00       	mov    eax,0x2
c00031f8:	e9 24 01 00 00       	jmp    c0003321 <remove_chain+0x140>
c00031fd:	89 d6                	mov    esi,edx
c00031ff:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c0003202:	76 ef                	jbe    c00031f3 <remove_chain+0x12>
c0003204:	89 c7                	mov    edi,eax
c0003206:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000320b:	75 06                	jne    c0003213 <remove_chain+0x32>
c000320d:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0003211:	eb 54                	jmp    c0003267 <remove_chain+0x86>
c0003213:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003216:	75 06                	jne    c000321e <remove_chain+0x3d>
c0003218:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c000321c:	74 ef                	je     c000320d <remove_chain+0x2c>
c000321e:	83 c9 ff             	or     ecx,0xffffffff
c0003221:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003225:	89 d8                	mov    eax,ebx
c0003227:	e8 c3 f8 ff ff       	call   c0002aef <put_fat>
c000322c:	85 c0                	test   eax,eax
c000322e:	74 dd                	je     c000320d <remove_chain+0x2c>
c0003230:	e9 ec 00 00 00       	jmp    c0003321 <remove_chain+0x140>
c0003235:	83 f8 01             	cmp    eax,0x1
c0003238:	74 b9                	je     c00031f3 <remove_chain+0x12>
c000323a:	83 f8 ff             	cmp    eax,0xffffffff
c000323d:	74 6d                	je     c00032ac <remove_chain+0xcb>
c000323f:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003242:	75 6f                	jne    c00032b3 <remove_chain+0xd2>
c0003244:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0003247:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000324a:	8d 51 fe             	lea    edx,[ecx-0x2]
c000324d:	39 d0                	cmp    eax,edx
c000324f:	73 08                	jae    c0003259 <remove_chain+0x78>
c0003251:	40                   	inc    eax
c0003252:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003256:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003259:	8d 4e 01             	lea    ecx,[esi+0x1]
c000325c:	39 e9                	cmp    ecx,ebp
c000325e:	75 64                	jne    c00032c4 <remove_chain+0xe3>
c0003260:	89 ee                	mov    esi,ebp
c0003262:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003265:	76 0f                	jbe    c0003276 <remove_chain+0x95>
c0003267:	89 f2                	mov    edx,esi
c0003269:	89 f8                	mov    eax,edi
c000326b:	e8 84 fa ff ff       	call   c0002cf4 <get_fat>
c0003270:	89 c5                	mov    ebp,eax
c0003272:	85 c0                	test   eax,eax
c0003274:	75 bf                	jne    c0003235 <remove_chain+0x54>
c0003276:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003279:	0f 85 a0 00 00 00    	jne    c000331f <remove_chain+0x13e>
c000327f:	eb 6c                	jmp    c00032ed <remove_chain+0x10c>
c0003281:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003284:	84 c0                	test   al,al
c0003286:	75 7d                	jne    c0003305 <remove_chain+0x124>
c0003288:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000328b:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c000328f:	0f 84 86 00 00 00    	je     c000331b <remove_chain+0x13a>
c0003295:	89 da                	mov    edx,ebx
c0003297:	89 f8                	mov    eax,edi
c0003299:	e8 56 fa ff ff       	call   c0002cf4 <get_fat>
c000329e:	83 f8 01             	cmp    eax,0x1
c00032a1:	0f 86 4c ff ff ff    	jbe    c00031f3 <remove_chain+0x12>
c00032a7:	83 f8 ff             	cmp    eax,0xffffffff
c00032aa:	75 4e                	jne    c00032fa <remove_chain+0x119>
c00032ac:	b8 01 00 00 00       	mov    eax,0x1
c00032b1:	eb 6e                	jmp    c0003321 <remove_chain+0x140>
c00032b3:	31 c9                	xor    ecx,ecx
c00032b5:	89 f2                	mov    edx,esi
c00032b7:	89 d8                	mov    eax,ebx
c00032b9:	e8 31 f8 ff ff       	call   c0002aef <put_fat>
c00032be:	85 c0                	test   eax,eax
c00032c0:	74 82                	je     c0003244 <remove_chain+0x63>
c00032c2:	eb 5d                	jmp    c0003321 <remove_chain+0x140>
c00032c4:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c7:	75 1b                	jne    c00032e4 <remove_chain+0x103>
c00032c9:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	83 ec 0c             	sub    esp,0xc
c00032d2:	6a 00                	push   0x0
c00032d4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00032d8:	e8 5d f7 ff ff       	call   c0002a3a <change_bitmap>
c00032dd:	83 c4 10             	add    esp,0x10
c00032e0:	85 c0                	test   eax,eax
c00032e2:	75 3d                	jne    c0003321 <remove_chain+0x140>
c00032e4:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00032e8:	e9 73 ff ff ff       	jmp    c0003260 <remove_chain+0x7f>
c00032ed:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032f2:	75 8d                	jne    c0003281 <remove_chain+0xa0>
c00032f4:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00032f8:	eb 25                	jmp    c000331f <remove_chain+0x13e>
c00032fa:	8d 53 01             	lea    edx,[ebx+0x1]
c00032fd:	89 c3                	mov    ebx,eax
c00032ff:	39 c2                	cmp    edx,eax
c0003301:	74 88                	je     c000328b <remove_chain+0xaa>
c0003303:	eb 1a                	jmp    c000331f <remove_chain+0x13e>
c0003305:	3c 03                	cmp    al,0x3
c0003307:	75 16                	jne    c000331f <remove_chain+0x13e>
c0003309:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000330c:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003310:	77 0d                	ja     c000331f <remove_chain+0x13e>
c0003312:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c0003315:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0003319:	72 04                	jb     c000331f <remove_chain+0x13e>
c000331b:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c000331f:	31 c0                	xor    eax,eax
c0003321:	83 c4 1c             	add    esp,0x1c
c0003324:	5b                   	pop    ebx
c0003325:	5e                   	pop    esi
c0003326:	5f                   	pop    edi
c0003327:	5d                   	pop    ebp
c0003328:	c3                   	ret    

c0003329 <dir_clear>:
c0003329:	55                   	push   ebp
c000332a:	57                   	push   edi
c000332b:	56                   	push   esi
c000332c:	89 c6                	mov    esi,eax
c000332e:	53                   	push   ebx
c000332f:	83 ec 1c             	sub    esp,0x1c
c0003332:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003336:	e8 9d ed ff ff       	call   c00020d8 <sync_window>
c000333b:	85 c0                	test   eax,eax
c000333d:	0f 85 de 00 00 00    	jne    c0003421 <dir_clear+0xf8>
c0003343:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003347:	89 f0                	mov    eax,esi
c0003349:	8d 6e 54             	lea    ebp,[esi+0x54]
c000334c:	e8 d6 e8 ff ff       	call   c0001c27 <clst2sect>
c0003351:	b9 00 02 00 00       	mov    ecx,0x200
c0003356:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000335a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000335e:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003361:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003364:	89 e8                	mov    eax,ebp
c0003366:	31 d2                	xor    edx,edx
c0003368:	e8 b5 e6 ff ff       	call   c0001a22 <mem_set>
c000336d:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003371:	c1 e3 09             	shl    ebx,0x9
c0003374:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000337a:	76 1f                	jbe    c000339b <dir_clear+0x72>
c000337c:	bb 00 80 00 00       	mov    ebx,0x8000
c0003381:	eb 18                	jmp    c000339b <dir_clear+0x72>
c0003383:	83 ec 0c             	sub    esp,0xc
c0003386:	53                   	push   ebx
c0003387:	e8 35 4e 00 00       	call   c00081c1 <ff_memalloc>
c000338c:	83 c4 10             	add    esp,0x10
c000338f:	89 c7                	mov    edi,eax
c0003391:	85 c0                	test   eax,eax
c0003393:	0f 85 8f 00 00 00    	jne    c0003428 <dir_clear+0xff>
c0003399:	d1 eb                	shr    ebx,1
c000339b:	81 fb 00 02 00 00    	cmp    ebx,0x200
c00033a1:	77 e0                	ja     c0003383 <dir_clear+0x5a>
c00033a3:	31 db                	xor    ebx,ebx
c00033a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00033a9:	39 d8                	cmp    eax,ebx
c00033ab:	76 66                	jbe    c0003413 <dir_clear+0xea>
c00033ad:	83 ec 0c             	sub    esp,0xc
c00033b0:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033b4:	6a 01                	push   0x1
c00033b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00033be:	55                   	push   ebp
c00033bf:	50                   	push   eax
c00033c0:	e8 94 e5 ff ff       	call   c0001959 <disk_write>
c00033c5:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c00033ca:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00033cf:	83 c4 20             	add    esp,0x20
c00033d2:	85 c0                	test   eax,eax
c00033d4:	75 3d                	jne    c0003413 <dir_clear+0xea>
c00033d6:	43                   	inc    ebx
c00033d7:	eb cc                	jmp    c00033a5 <dir_clear+0x7c>
c00033d9:	83 ec 0c             	sub    esp,0xc
c00033dc:	31 d2                	xor    edx,edx
c00033de:	55                   	push   ebp
c00033df:	89 d8                	mov    eax,ebx
c00033e1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00033e5:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00033e9:	52                   	push   edx
c00033ea:	50                   	push   eax
c00033eb:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00033ef:	57                   	push   edi
c00033f0:	50                   	push   eax
c00033f1:	e8 63 e5 ff ff       	call   c0001959 <disk_write>
c00033f6:	83 c4 20             	add    esp,0x20
c00033f9:	85 c0                	test   eax,eax
c00033fb:	75 0a                	jne    c0003407 <dir_clear+0xde>
c00033fd:	01 eb                	add    ebx,ebp
c00033ff:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003403:	39 d8                	cmp    eax,ebx
c0003405:	77 d2                	ja     c00033d9 <dir_clear+0xb0>
c0003407:	83 ec 0c             	sub    esp,0xc
c000340a:	57                   	push   edi
c000340b:	e8 c7 4d 00 00       	call   c00081d7 <ff_memfree>
c0003410:	83 c4 10             	add    esp,0x10
c0003413:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0003417:	39 d8                	cmp    eax,ebx
c0003419:	0f 95 c0             	setne  al
c000341c:	0f b6 c0             	movzx  eax,al
c000341f:	eb 19                	jmp    c000343a <dir_clear+0x111>
c0003421:	b8 01 00 00 00       	mov    eax,0x1
c0003426:	eb 12                	jmp    c000343a <dir_clear+0x111>
c0003428:	89 d9                	mov    ecx,ebx
c000342a:	31 d2                	xor    edx,edx
c000342c:	c1 eb 09             	shr    ebx,0x9
c000342f:	e8 ee e5 ff ff       	call   c0001a22 <mem_set>
c0003434:	89 dd                	mov    ebp,ebx
c0003436:	31 db                	xor    ebx,ebx
c0003438:	eb c5                	jmp    c00033ff <dir_clear+0xd6>
c000343a:	83 c4 1c             	add    esp,0x1c
c000343d:	5b                   	pop    ebx
c000343e:	5e                   	pop    esi
c000343f:	5f                   	pop    edi
c0003440:	5d                   	pop    ebp
c0003441:	c3                   	ret    

c0003442 <dir_next>:
c0003442:	55                   	push   ebp
c0003443:	57                   	push   edi
c0003444:	56                   	push   esi
c0003445:	53                   	push   ebx
c0003446:	89 c3                	mov    ebx,eax
c0003448:	83 ec 1c             	sub    esp,0x1c
c000344b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000344d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003451:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003454:	8d 78 20             	lea    edi,[eax+0x20]
c0003457:	31 c0                	xor    eax,eax
c0003459:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c000345d:	0f 94 c0             	sete   al
c0003460:	48                   	dec    eax
c0003461:	25 00 00 20 f0       	and    eax,0xf0200000
c0003466:	05 00 00 00 10       	add    eax,0x10000000
c000346b:	39 f8                	cmp    eax,edi
c000346d:	77 0e                	ja     c000347d <dir_next+0x3b>
c000346f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003476:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000347d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003480:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003483:	b8 04 00 00 00       	mov    eax,0x4
c0003488:	89 ce                	mov    esi,ecx
c000348a:	09 d6                	or     esi,edx
c000348c:	0f 84 da 00 00 00    	je     c000356c <dir_next+0x12a>
c0003492:	89 f8                	mov    eax,edi
c0003494:	25 ff 01 00 00       	and    eax,0x1ff
c0003499:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000349d:	0f 85 b9 00 00 00    	jne    c000355c <dir_next+0x11a>
c00034a3:	83 c2 01             	add    edx,0x1
c00034a6:	83 d1 00             	adc    ecx,0x0
c00034a9:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00034ac:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c00034af:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00034b2:	85 d2                	test   edx,edx
c00034b4:	75 29                	jne    c00034df <dir_next+0x9d>
c00034b6:	89 fa                	mov    edx,edi
c00034b8:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034bc:	c1 ea 05             	shr    edx,0x5
c00034bf:	39 c2                	cmp    edx,eax
c00034c1:	0f 82 95 00 00 00    	jb     c000355c <dir_next+0x11a>
c00034c7:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00034ce:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00034d5:	b8 04 00 00 00       	mov    eax,0x4
c00034da:	e9 8d 00 00 00       	jmp    c000356c <dir_next+0x12a>
c00034df:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00034e3:	89 f9                	mov    ecx,edi
c00034e5:	48                   	dec    eax
c00034e6:	c1 e9 09             	shr    ecx,0x9
c00034e9:	85 c8                	test   eax,ecx
c00034eb:	75 6f                	jne    c000355c <dir_next+0x11a>
c00034ed:	89 d8                	mov    eax,ebx
c00034ef:	e8 00 f8 ff ff       	call   c0002cf4 <get_fat>
c00034f4:	89 c6                	mov    esi,eax
c00034f6:	83 f8 01             	cmp    eax,0x1
c00034f9:	77 07                	ja     c0003502 <dir_next+0xc0>
c00034fb:	b8 02 00 00 00       	mov    eax,0x2
c0003500:	eb 6a                	jmp    c000356c <dir_next+0x12a>
c0003502:	83 f8 ff             	cmp    eax,0xffffffff
c0003505:	75 07                	jne    c000350e <dir_next+0xcc>
c0003507:	b8 01 00 00 00       	mov    eax,0x1
c000350c:	eb 5e                	jmp    c000356c <dir_next+0x12a>
c000350e:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0003511:	77 37                	ja     c000354a <dir_next+0x108>
c0003513:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003518:	74 ad                	je     c00034c7 <dir_next+0x85>
c000351a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000351d:	89 d8                	mov    eax,ebx
c000351f:	e8 be fa ff ff       	call   c0002fe2 <create_chain>
c0003524:	89 c6                	mov    esi,eax
c0003526:	b8 07 00 00 00       	mov    eax,0x7
c000352b:	85 f6                	test   esi,esi
c000352d:	74 3d                	je     c000356c <dir_next+0x12a>
c000352f:	83 fe 01             	cmp    esi,0x1
c0003532:	74 c7                	je     c00034fb <dir_next+0xb9>
c0003534:	83 fe ff             	cmp    esi,0xffffffff
c0003537:	74 ce                	je     c0003507 <dir_next+0xc5>
c0003539:	89 f2                	mov    edx,esi
c000353b:	89 e8                	mov    eax,ebp
c000353d:	e8 e7 fd ff ff       	call   c0003329 <dir_clear>
c0003542:	85 c0                	test   eax,eax
c0003544:	75 c1                	jne    c0003507 <dir_next+0xc5>
c0003546:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000354a:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000354d:	89 f2                	mov    edx,esi
c000354f:	89 e8                	mov    eax,ebp
c0003551:	e8 d1 e6 ff ff       	call   c0001c27 <clst2sect>
c0003556:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003559:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000355c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003560:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003563:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c0003567:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000356a:	31 c0                	xor    eax,eax
c000356c:	83 c4 1c             	add    esp,0x1c
c000356f:	5b                   	pop    ebx
c0003570:	5e                   	pop    esi
c0003571:	5f                   	pop    edi
c0003572:	5d                   	pop    ebp
c0003573:	c3                   	ret    

c0003574 <load_xdir>:
c0003574:	55                   	push   ebp
c0003575:	57                   	push   edi
c0003576:	56                   	push   esi
c0003577:	89 c6                	mov    esi,eax
c0003579:	53                   	push   ebx
c000357a:	83 ec 1c             	sub    esp,0x1c
c000357d:	8b 00                	mov    eax,DWORD PTR [eax]
c000357f:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003582:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003585:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003588:	e8 df eb ff ff       	call   c000216c <move_window>
c000358d:	89 c3                	mov    ebx,eax
c000358f:	85 c0                	test   eax,eax
c0003591:	0f 85 0c 01 00 00    	jne    c00036a3 <load_xdir+0x12f>
c0003597:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000359a:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c000359d:	0f 85 fb 00 00 00    	jne    c000369e <load_xdir+0x12a>
c00035a3:	89 f8                	mov    eax,edi
c00035a5:	b9 20 00 00 00       	mov    ecx,0x20
c00035aa:	e8 5e e4 ff ff       	call   c0001a0d <mem_cpy>
c00035af:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00035b3:	40                   	inc    eax
c00035b4:	c1 e0 05             	shl    eax,0x5
c00035b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00035bb:	83 e8 60             	sub    eax,0x60
c00035be:	3d 00 02 00 00       	cmp    eax,0x200
c00035c3:	0f 87 d5 00 00 00    	ja     c000369e <load_xdir+0x12a>
c00035c9:	31 d2                	xor    edx,edx
c00035cb:	89 f0                	mov    eax,esi
c00035cd:	e8 70 fe ff ff       	call   c0003442 <dir_next>
c00035d2:	89 c3                	mov    ebx,eax
c00035d4:	83 f8 04             	cmp    eax,0x4
c00035d7:	0f 84 c1 00 00 00    	je     c000369e <load_xdir+0x12a>
c00035dd:	85 c0                	test   eax,eax
c00035df:	0f 85 be 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035e5:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00035e8:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00035eb:	8b 06                	mov    eax,DWORD PTR [esi]
c00035ed:	e8 7a eb ff ff       	call   c000216c <move_window>
c00035f2:	89 c3                	mov    ebx,eax
c00035f4:	85 c0                	test   eax,eax
c00035f6:	0f 85 a7 00 00 00    	jne    c00036a3 <load_xdir+0x12f>
c00035fc:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00035ff:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c0003602:	0f 85 96 00 00 00    	jne    c000369e <load_xdir+0x12a>
c0003608:	8d 47 20             	lea    eax,[edi+0x20]
c000360b:	b9 20 00 00 00       	mov    ecx,0x20
c0003610:	e8 f8 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003615:	31 d2                	xor    edx,edx
c0003617:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c000361b:	b9 0f 00 00 00       	mov    ecx,0xf
c0003620:	83 c0 2c             	add    eax,0x2c
c0003623:	f7 f1                	div    ecx
c0003625:	c1 e0 05             	shl    eax,0x5
c0003628:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000362c:	77 70                	ja     c000369e <load_xdir+0x12a>
c000362e:	bd 40 00 00 00       	mov    ebp,0x40
c0003633:	31 d2                	xor    edx,edx
c0003635:	89 f0                	mov    eax,esi
c0003637:	e8 06 fe ff ff       	call   c0003442 <dir_next>
c000363c:	89 c3                	mov    ebx,eax
c000363e:	83 f8 04             	cmp    eax,0x4
c0003641:	74 5b                	je     c000369e <load_xdir+0x12a>
c0003643:	85 c0                	test   eax,eax
c0003645:	75 5c                	jne    c00036a3 <load_xdir+0x12f>
c0003647:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000364a:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000364d:	8b 06                	mov    eax,DWORD PTR [esi]
c000364f:	e8 18 eb ff ff       	call   c000216c <move_window>
c0003654:	89 c3                	mov    ebx,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	75 49                	jne    c00036a3 <load_xdir+0x12f>
c000365a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000365d:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003660:	75 3c                	jne    c000369e <load_xdir+0x12a>
c0003662:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0003668:	77 0d                	ja     c0003677 <load_xdir+0x103>
c000366a:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000366d:	b9 20 00 00 00       	mov    ecx,0x20
c0003672:	e8 96 e3 ff ff       	call   c0001a0d <mem_cpy>
c0003677:	83 c5 20             	add    ebp,0x20
c000367a:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c000367e:	77 b3                	ja     c0003633 <load_xdir+0xbf>
c0003680:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003686:	77 1b                	ja     c00036a3 <load_xdir+0x12f>
c0003688:	89 f8                	mov    eax,edi
c000368a:	e8 cd e7 ff ff       	call   c0001e5c <xdir_sum>
c000368f:	89 c1                	mov    ecx,eax
c0003691:	8d 47 02             	lea    eax,[edi+0x2]
c0003694:	e8 f5 e2 ff ff       	call   c000198e <ld_word>
c0003699:	66 39 c1             	cmp    cx,ax
c000369c:	74 05                	je     c00036a3 <load_xdir+0x12f>
c000369e:	bb 02 00 00 00       	mov    ebx,0x2
c00036a3:	83 c4 1c             	add    esp,0x1c
c00036a6:	89 d8                	mov    eax,ebx
c00036a8:	5b                   	pop    ebx
c00036a9:	5e                   	pop    esi
c00036aa:	5f                   	pop    edi
c00036ab:	5d                   	pop    ebp
c00036ac:	c3                   	ret    

c00036ad <load_obj_xdir>:
c00036ad:	53                   	push   ebx
c00036ae:	89 c3                	mov    ebx,eax
c00036b0:	83 ec 08             	sub    esp,0x8
c00036b3:	8b 02                	mov    eax,DWORD PTR [edx]
c00036b5:	89 03                	mov    DWORD PTR [ebx],eax
c00036b7:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00036ba:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00036bd:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c0:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c00036c3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00036c6:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00036cd:	30 c0                	xor    al,al
c00036cf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00036d6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00036d9:	89 d8                	mov    eax,ebx
c00036db:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00036de:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00036e1:	e8 04 f8 ff ff       	call   c0002eea <dir_sdi>
c00036e6:	85 c0                	test   eax,eax
c00036e8:	75 0b                	jne    c00036f5 <load_obj_xdir+0x48>
c00036ea:	89 d8                	mov    eax,ebx
c00036ec:	83 c4 08             	add    esp,0x8
c00036ef:	5b                   	pop    ebx
c00036f0:	e9 7f fe ff ff       	jmp    c0003574 <load_xdir>
c00036f5:	83 c4 08             	add    esp,0x8
c00036f8:	5b                   	pop    ebx
c00036f9:	c3                   	ret    

c00036fa <dir_read>:
c00036fa:	55                   	push   ebp
c00036fb:	bd 04 00 00 00       	mov    ebp,0x4
c0003700:	57                   	push   edi
c0003701:	56                   	push   esi
c0003702:	be ff ff ff ff       	mov    esi,0xffffffff
c0003707:	53                   	push   ebx
c0003708:	89 c3                	mov    ebx,eax
c000370a:	83 ec 1c             	sub    esp,0x1c
c000370d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003711:	8b 38                	mov    edi,DWORD PTR [eax]
c0003713:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003718:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000371b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000371e:	89 c8                	mov    eax,ecx
c0003720:	09 d0                	or     eax,edx
c0003722:	0f 84 25 01 00 00    	je     c000384d <dir_read+0x153>
c0003728:	89 f8                	mov    eax,edi
c000372a:	e8 3d ea ff ff       	call   c000216c <move_window>
c000372f:	89 c5                	mov    ebp,eax
c0003731:	85 c0                	test   eax,eax
c0003733:	0f 85 23 01 00 00    	jne    c000385c <dir_read+0x162>
c0003739:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000373c:	8a 0a                	mov    cl,BYTE PTR [edx]
c000373e:	84 c9                	test   cl,cl
c0003740:	0f 84 11 01 00 00    	je     c0003857 <dir_read+0x15d>
c0003746:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003749:	75 48                	jne    c0003793 <dir_read+0x99>
c000374b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003750:	74 10                	je     c0003762 <dir_read+0x68>
c0003752:	80 f9 83             	cmp    cl,0x83
c0003755:	0f 85 dd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000375b:	31 ed                	xor    ebp,ebp
c000375d:	e9 08 01 00 00       	jmp    c000386a <dir_read+0x170>
c0003762:	80 f9 85             	cmp    cl,0x85
c0003765:	0f 85 cd 00 00 00    	jne    c0003838 <dir_read+0x13e>
c000376b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000376e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003771:	89 d8                	mov    eax,ebx
c0003773:	e8 fc fd ff ff       	call   c0003574 <load_xdir>
c0003778:	89 c5                	mov    ebp,eax
c000377a:	85 c0                	test   eax,eax
c000377c:	0f 85 da 00 00 00    	jne    c000385c <dir_read+0x162>
c0003782:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003785:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003788:	83 e0 3f             	and    eax,0x3f
c000378b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000378e:	e9 d7 00 00 00       	jmp    c000386a <dir_read+0x170>
c0003793:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003796:	83 e0 3f             	and    eax,0x3f
c0003799:	80 f9 2e             	cmp    cl,0x2e
c000379c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00037a0:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037a3:	0f 84 8a 00 00 00    	je     c0003833 <dir_read+0x139>
c00037a9:	80 f9 e5             	cmp    cl,0xe5
c00037ac:	0f 84 81 00 00 00    	je     c0003833 <dir_read+0x139>
c00037b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037b6:	83 e0 1f             	and    eax,0x1f
c00037b9:	83 f8 08             	cmp    eax,0x8
c00037bc:	0f 94 c0             	sete   al
c00037bf:	0f b6 c0             	movzx  eax,al
c00037c2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00037c6:	75 6b                	jne    c0003833 <dir_read+0x139>
c00037c8:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00037cd:	75 44                	jne    c0003813 <dir_read+0x119>
c00037cf:	f6 c1 40             	test   cl,0x40
c00037d2:	74 12                	je     c00037e6 <dir_read+0xec>
c00037d4:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037d7:	83 e1 bf             	and    ecx,0xffffffbf
c00037da:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037de:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00037e1:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c00037e4:	eb 06                	jmp    c00037ec <dir_read+0xf2>
c00037e6:	89 f0                	mov    eax,esi
c00037e8:	38 c8                	cmp    al,cl
c00037ea:	75 47                	jne    c0003833 <dir_read+0x139>
c00037ec:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037f0:	be ff ff ff ff       	mov    esi,0xffffffff
c00037f5:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00037f8:	75 3e                	jne    c0003838 <dir_read+0x13e>
c00037fa:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00037fe:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003801:	e8 8a e4 ff ff       	call   c0001c90 <pick_lfn>
c0003806:	85 c0                	test   eax,eax
c0003808:	74 2e                	je     c0003838 <dir_read+0x13e>
c000380a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000380e:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003811:	eb 25                	jmp    c0003838 <dir_read+0x13e>
c0003813:	89 f0                	mov    eax,esi
c0003815:	84 c0                	test   al,al
c0003817:	75 11                	jne    c000382a <dir_read+0x130>
c0003819:	89 d0                	mov    eax,edx
c000381b:	e8 2a e6 ff ff       	call   c0001e4a <sum_sfn>
c0003820:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003824:	0f 84 31 ff ff ff    	je     c000375b <dir_read+0x61>
c000382a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003831:	eb 37                	jmp    c000386a <dir_read+0x170>
c0003833:	be ff ff ff ff       	mov    esi,0xffffffff
c0003838:	31 d2                	xor    edx,edx
c000383a:	89 d8                	mov    eax,ebx
c000383c:	e8 01 fc ff ff       	call   c0003442 <dir_next>
c0003841:	89 c5                	mov    ebp,eax
c0003843:	85 c0                	test   eax,eax
c0003845:	0f 84 cd fe ff ff    	je     c0003718 <dir_read+0x1e>
c000384b:	eb 0f                	jmp    c000385c <dir_read+0x162>
c000384d:	85 ed                	test   ebp,ebp
c000384f:	0f 84 06 ff ff ff    	je     c000375b <dir_read+0x61>
c0003855:	eb 05                	jmp    c000385c <dir_read+0x162>
c0003857:	bd 04 00 00 00       	mov    ebp,0x4
c000385c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003863:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000386a:	83 c4 1c             	add    esp,0x1c
c000386d:	89 e8                	mov    eax,ebp
c000386f:	5b                   	pop    ebx
c0003870:	5e                   	pop    esi
c0003871:	5f                   	pop    edi
c0003872:	5d                   	pop    ebp
c0003873:	c3                   	ret    

c0003874 <dir_alloc>:
c0003874:	55                   	push   ebp
c0003875:	89 d5                	mov    ebp,edx
c0003877:	57                   	push   edi
c0003878:	31 d2                	xor    edx,edx
c000387a:	56                   	push   esi
c000387b:	53                   	push   ebx
c000387c:	89 c3                	mov    ebx,eax
c000387e:	83 ec 0c             	sub    esp,0xc
c0003881:	8b 38                	mov    edi,DWORD PTR [eax]
c0003883:	e8 62 f6 ff ff       	call   c0002eea <dir_sdi>
c0003888:	85 c0                	test   eax,eax
c000388a:	75 4e                	jne    c00038da <dir_alloc+0x66>
c000388c:	31 f6                	xor    esi,esi
c000388e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003891:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003894:	89 f8                	mov    eax,edi
c0003896:	e8 d1 e8 ff ff       	call   c000216c <move_window>
c000389b:	85 c0                	test   eax,eax
c000389d:	75 3b                	jne    c00038da <dir_alloc+0x66>
c000389f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00038a2:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00038a5:	8a 12                	mov    dl,BYTE PTR [edx]
c00038a7:	75 07                	jne    c00038b0 <dir_alloc+0x3c>
c00038a9:	f7 d2                	not    edx
c00038ab:	c0 ea 07             	shr    dl,0x7
c00038ae:	eb 0d                	jmp    c00038bd <dir_alloc+0x49>
c00038b0:	84 d2                	test   dl,dl
c00038b2:	0f 94 c1             	sete   cl
c00038b5:	80 fa e5             	cmp    dl,0xe5
c00038b8:	0f 94 c2             	sete   dl
c00038bb:	09 ca                	or     edx,ecx
c00038bd:	84 d2                	test   dl,dl
c00038bf:	74 07                	je     c00038c8 <dir_alloc+0x54>
c00038c1:	46                   	inc    esi
c00038c2:	39 ee                	cmp    esi,ebp
c00038c4:	75 04                	jne    c00038ca <dir_alloc+0x56>
c00038c6:	eb 1c                	jmp    c00038e4 <dir_alloc+0x70>
c00038c8:	31 f6                	xor    esi,esi
c00038ca:	ba 01 00 00 00       	mov    edx,0x1
c00038cf:	89 d8                	mov    eax,ebx
c00038d1:	e8 6c fb ff ff       	call   c0003442 <dir_next>
c00038d6:	85 c0                	test   eax,eax
c00038d8:	74 b4                	je     c000388e <dir_alloc+0x1a>
c00038da:	83 f8 04             	cmp    eax,0x4
c00038dd:	75 05                	jne    c00038e4 <dir_alloc+0x70>
c00038df:	b8 07 00 00 00       	mov    eax,0x7
c00038e4:	83 c4 0c             	add    esp,0xc
c00038e7:	5b                   	pop    ebx
c00038e8:	5e                   	pop    esi
c00038e9:	5f                   	pop    edi
c00038ea:	5d                   	pop    ebp
c00038eb:	c3                   	ret    

c00038ec <store_xdir>:
c00038ec:	55                   	push   ebp
c00038ed:	57                   	push   edi
c00038ee:	89 c7                	mov    edi,eax
c00038f0:	56                   	push   esi
c00038f1:	53                   	push   ebx
c00038f2:	83 ec 0c             	sub    esp,0xc
c00038f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00038f7:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00038fa:	89 e8                	mov    eax,ebp
c00038fc:	e8 5b e5 ff ff       	call   c0001e5c <xdir_sum>
c0003901:	0f b7 d0             	movzx  edx,ax
c0003904:	8d 45 02             	lea    eax,[ebp+0x2]
c0003907:	e8 f4 e0 ff ff       	call   c0001a00 <st_word>
c000390c:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003910:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003913:	89 f8                	mov    eax,edi
c0003915:	e8 d0 f5 ff ff       	call   c0002eea <dir_sdi>
c000391a:	89 c6                	mov    esi,eax
c000391c:	85 f6                	test   esi,esi
c000391e:	75 3d                	jne    c000395d <store_xdir+0x71>
c0003920:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003923:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003926:	8b 07                	mov    eax,DWORD PTR [edi]
c0003928:	e8 3f e8 ff ff       	call   c000216c <move_window>
c000392d:	89 c6                	mov    esi,eax
c000392f:	85 c0                	test   eax,eax
c0003931:	75 2a                	jne    c000395d <store_xdir+0x71>
c0003933:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003936:	b9 20 00 00 00       	mov    ecx,0x20
c000393b:	89 ea                	mov    edx,ebp
c000393d:	e8 cb e0 ff ff       	call   c0001a0d <mem_cpy>
c0003942:	8b 07                	mov    eax,DWORD PTR [edi]
c0003944:	85 db                	test   ebx,ebx
c0003946:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000394a:	74 11                	je     c000395d <store_xdir+0x71>
c000394c:	31 d2                	xor    edx,edx
c000394e:	89 f8                	mov    eax,edi
c0003950:	83 c5 20             	add    ebp,0x20
c0003953:	e8 ea fa ff ff       	call   c0003442 <dir_next>
c0003958:	4b                   	dec    ebx
c0003959:	89 c6                	mov    esi,eax
c000395b:	eb bf                	jmp    c000391c <store_xdir+0x30>
c000395d:	89 f0                	mov    eax,esi
c000395f:	83 fe 02             	cmp    esi,0x2
c0003962:	76 05                	jbe    c0003969 <store_xdir+0x7d>
c0003964:	b8 02 00 00 00       	mov    eax,0x2
c0003969:	83 c4 0c             	add    esp,0xc
c000396c:	5b                   	pop    ebx
c000396d:	5e                   	pop    esi
c000396e:	5f                   	pop    edi
c000396f:	5d                   	pop    ebp
c0003970:	c3                   	ret    

c0003971 <dir_remove>:
c0003971:	57                   	push   edi
c0003972:	56                   	push   esi
c0003973:	53                   	push   ebx
c0003974:	89 c3                	mov    ebx,eax
c0003976:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003979:	8b 30                	mov    esi,DWORD PTR [eax]
c000397b:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c000397e:	83 fa ff             	cmp    edx,0xffffffff
c0003981:	74 09                	je     c000398c <dir_remove+0x1b>
c0003983:	e8 62 f5 ff ff       	call   c0002eea <dir_sdi>
c0003988:	85 c0                	test   eax,eax
c000398a:	75 41                	jne    c00039cd <dir_remove+0x5c>
c000398c:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000398f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003992:	89 f0                	mov    eax,esi
c0003994:	e8 d3 e7 ff ff       	call   c000216c <move_window>
c0003999:	85 c0                	test   eax,eax
c000399b:	75 26                	jne    c00039c3 <dir_remove+0x52>
c000399d:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039a0:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00039a3:	75 05                	jne    c00039aa <dir_remove+0x39>
c00039a5:	80 22 7f             	and    BYTE PTR [edx],0x7f
c00039a8:	eb 03                	jmp    c00039ad <dir_remove+0x3c>
c00039aa:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c00039ad:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00039b1:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c00039b4:	73 17                	jae    c00039cd <dir_remove+0x5c>
c00039b6:	31 d2                	xor    edx,edx
c00039b8:	89 d8                	mov    eax,ebx
c00039ba:	e8 83 fa ff ff       	call   c0003442 <dir_next>
c00039bf:	85 c0                	test   eax,eax
c00039c1:	74 c9                	je     c000398c <dir_remove+0x1b>
c00039c3:	83 f8 04             	cmp    eax,0x4
c00039c6:	75 05                	jne    c00039cd <dir_remove+0x5c>
c00039c8:	b8 02 00 00 00       	mov    eax,0x2
c00039cd:	5b                   	pop    ebx
c00039ce:	5e                   	pop    esi
c00039cf:	5f                   	pop    edi
c00039d0:	c3                   	ret    

c00039d1 <create_name>:
c00039d1:	55                   	push   ebp
c00039d2:	89 d5                	mov    ebp,edx
c00039d4:	57                   	push   edi
c00039d5:	89 c7                	mov    edi,eax
c00039d7:	56                   	push   esi
c00039d8:	31 f6                	xor    esi,esi
c00039da:	53                   	push   ebx
c00039db:	83 ec 3c             	sub    esp,0x3c
c00039de:	8b 02                	mov    eax,DWORD PTR [edx]
c00039e0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00039e4:	8b 07                	mov    eax,DWORD PTR [edi]
c00039e6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00039e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00039ed:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00039f1:	e8 72 e0 ff ff       	call   c0001a68 <tchar2uni>
c00039f6:	89 c3                	mov    ebx,eax
c00039f8:	83 f8 ff             	cmp    eax,0xffffffff
c00039fb:	75 0a                	jne    c0003a07 <create_name+0x36>
c00039fd:	b8 06 00 00 00       	mov    eax,0x6
c0003a02:	e9 9e 02 00 00       	jmp    c0003ca5 <create_name+0x2d4>
c0003a07:	3d ff ff 00 00       	cmp    eax,0xffff
c0003a0c:	76 0c                	jbe    c0003a1a <create_name+0x49>
c0003a0e:	c1 e8 10             	shr    eax,0x10
c0003a11:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003a15:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003a19:	46                   	inc    esi
c0003a1a:	66 83 fb 1f          	cmp    bx,0x1f
c0003a1e:	76 4f                	jbe    c0003a6f <create_name+0x9e>
c0003a20:	66 83 fb 5c          	cmp    bx,0x5c
c0003a24:	74 35                	je     c0003a5b <create_name+0x8a>
c0003a26:	66 83 fb 2f          	cmp    bx,0x2f
c0003a2a:	74 2f                	je     c0003a5b <create_name+0x8a>
c0003a2c:	66 83 fb 7f          	cmp    bx,0x7f
c0003a30:	77 11                	ja     c0003a43 <create_name+0x72>
c0003a32:	0f b7 d3             	movzx  edx,bx
c0003a35:	b8 d2 f1 01 c0       	mov    eax,0xc001f1d2
c0003a3a:	e8 11 e0 ff ff       	call   c0001a50 <chk_chr>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 ba                	jne    c00039fd <create_name+0x2c>
c0003a43:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003a49:	77 b2                	ja     c00039fd <create_name+0x2c>
c0003a4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a4f:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003a53:	46                   	inc    esi
c0003a54:	eb 97                	jmp    c00039ed <create_name+0x1c>
c0003a56:	40                   	inc    eax
c0003a57:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a5b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a5f:	8a 10                	mov    dl,BYTE PTR [eax]
c0003a61:	80 fa 2f             	cmp    dl,0x2f
c0003a64:	74 f0                	je     c0003a56 <create_name+0x85>
c0003a66:	80 fa 5c             	cmp    dl,0x5c
c0003a69:	74 eb                	je     c0003a56 <create_name+0x85>
c0003a6b:	31 db                	xor    ebx,ebx
c0003a6d:	eb 02                	jmp    c0003a71 <create_name+0xa0>
c0003a6f:	b3 04                	mov    bl,0x4
c0003a71:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003a75:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003a78:	85 f6                	test   esi,esi
c0003a7a:	74 18                	je     c0003a94 <create_name+0xc3>
c0003a7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a80:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003a85:	66 83 f8 20          	cmp    ax,0x20
c0003a89:	74 06                	je     c0003a91 <create_name+0xc0>
c0003a8b:	66 83 f8 2e          	cmp    ax,0x2e
c0003a8f:	75 03                	jne    c0003a94 <create_name+0xc3>
c0003a91:	4e                   	dec    esi
c0003a92:	eb e4                	jmp    c0003a78 <create_name+0xa7>
c0003a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003a98:	31 ed                	xor    ebp,ebp
c0003a9a:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003aa0:	85 f6                	test   esi,esi
c0003aa2:	0f 84 55 ff ff ff    	je     c00039fd <create_name+0x2c>
c0003aa8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003aac:	8d 55 01             	lea    edx,[ebp+0x1]
c0003aaf:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003ab3:	66 83 f8 20          	cmp    ax,0x20
c0003ab7:	75 04                	jne    c0003abd <create_name+0xec>
c0003ab9:	89 d5                	mov    ebp,edx
c0003abb:	eb eb                	jmp    c0003aa8 <create_name+0xd7>
c0003abd:	85 ed                	test   ebp,ebp
c0003abf:	75 06                	jne    c0003ac7 <create_name+0xf6>
c0003ac1:	66 83 f8 2e          	cmp    ax,0x2e
c0003ac5:	75 08                	jne    c0003acf <create_name+0xfe>
c0003ac7:	83 cb 03             	or     ebx,0x3
c0003aca:	eb 03                	jmp    c0003acf <create_name+0xfe>
c0003acc:	4e                   	dec    esi
c0003acd:	74 0c                	je     c0003adb <create_name+0x10a>
c0003acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003ad3:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003ad9:	75 f1                	jne    c0003acc <create_name+0xfb>
c0003adb:	b9 0b 00 00 00       	mov    ecx,0xb
c0003ae0:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003ae3:	ba 20 00 00 00       	mov    edx,0x20
c0003ae8:	e8 35 df ff ff       	call   c0001a22 <mem_set>
c0003aed:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003af5:	31 c9                	xor    ecx,ecx
c0003af7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003afc:	8d 45 01             	lea    eax,[ebp+0x1]
c0003aff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003b03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003b07:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003b0b:	66 85 ed             	test   bp,bp
c0003b0e:	0f 84 30 01 00 00    	je     c0003c44 <create_name+0x273>
c0003b14:	66 83 fd 20          	cmp    bp,0x20
c0003b18:	74 10                	je     c0003b2a <create_name+0x159>
c0003b1a:	66 83 fd 2e          	cmp    bp,0x2e
c0003b1e:	75 13                	jne    c0003b33 <create_name+0x162>
c0003b20:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b24:	0f 84 6b 01 00 00    	je     c0003c95 <create_name+0x2c4>
c0003b2a:	83 cb 03             	or     ebx,0x3
c0003b2d:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003b31:	eb c9                	jmp    c0003afc <create_name+0x12b>
c0003b33:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003b37:	73 0b                	jae    c0003b44 <create_name+0x173>
c0003b39:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b3d:	75 47                	jne    c0003b86 <create_name+0x1b5>
c0003b3f:	e9 51 01 00 00       	jmp    c0003c95 <create_name+0x2c4>
c0003b44:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003b49:	75 10                	jne    c0003b5b <create_name+0x18a>
c0003b4b:	83 cb 03             	or     ebx,0x3
c0003b4e:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b56:	e9 e9 00 00 00       	jmp    c0003c44 <create_name+0x273>
c0003b5b:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b5f:	74 0d                	je     c0003b6e <create_name+0x19d>
c0003b61:	83 cb 03             	or     ebx,0x3
c0003b64:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003b68:	0f 87 d6 00 00 00    	ja     c0003c44 <create_name+0x273>
c0003b6e:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003b73:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003b77:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003b7f:	b9 08 00 00 00       	mov    ecx,0x8
c0003b84:	eb a7                	jmp    c0003b2d <create_name+0x15c>
c0003b86:	66 83 fd 7f          	cmp    bp,0x7f
c0003b8a:	76 68                	jbe    c0003bf4 <create_name+0x223>
c0003b8c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003b90:	88 da                	mov    dl,bl
c0003b92:	83 ca 02             	or     edx,0x2
c0003b95:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003b99:	50                   	push   eax
c0003b9a:	50                   	push   eax
c0003b9b:	68 b5 01 00 00       	push   0x1b5
c0003ba0:	55                   	push   ebp
c0003ba1:	e8 48 46 00 00       	call   c00081ee <ff_uni2oem>
c0003ba6:	83 c4 10             	add    esp,0x10
c0003ba9:	89 c5                	mov    ebp,eax
c0003bab:	a8 80                	test   al,0x80
c0003bad:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003bb1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003bb5:	74 0c                	je     c0003bc3 <create_name+0x1f2>
c0003bb7:	83 e5 7f             	and    ebp,0x7f
c0003bba:	0f b6 ad 20 f1 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe0ee0]
c0003bc1:	eb 2a                	jmp    c0003bed <create_name+0x21c>
c0003bc3:	66 3d ff 00          	cmp    ax,0xff
c0003bc7:	76 24                	jbe    c0003bed <create_name+0x21c>
c0003bc9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003bcd:	48                   	dec    eax
c0003bce:	39 c8                	cmp    eax,ecx
c0003bd0:	77 0c                	ja     c0003bde <create_name+0x20d>
c0003bd2:	83 cb 03             	or     ebx,0x3
c0003bd5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003bd9:	e9 4f ff ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003bde:	89 e8                	mov    eax,ebp
c0003be0:	88 d3                	mov    bl,dl
c0003be2:	66 c1 e8 08          	shr    ax,0x8
c0003be6:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003bea:	41                   	inc    ecx
c0003beb:	eb 4b                	jmp    c0003c38 <create_name+0x267>
c0003bed:	88 d3                	mov    bl,dl
c0003bef:	66 85 ed             	test   bp,bp
c0003bf2:	74 19                	je     c0003c0d <create_name+0x23c>
c0003bf4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003bf8:	0f b7 d5             	movzx  edx,bp
c0003bfb:	b8 db f1 01 c0       	mov    eax,0xc001f1db
c0003c00:	e8 4b de ff ff       	call   c0001a50 <chk_chr>
c0003c05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003c09:	85 c0                	test   eax,eax
c0003c0b:	74 0a                	je     c0003c17 <create_name+0x246>
c0003c0d:	83 cb 03             	or     ebx,0x3
c0003c10:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003c15:	eb 21                	jmp    c0003c38 <create_name+0x267>
c0003c17:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003c1a:	66 83 f8 19          	cmp    ax,0x19
c0003c1e:	77 07                	ja     c0003c27 <create_name+0x256>
c0003c20:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003c25:	eb 11                	jmp    c0003c38 <create_name+0x267>
c0003c27:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003c2a:	66 83 f8 19          	cmp    ax,0x19
c0003c2e:	77 08                	ja     c0003c38 <create_name+0x267>
c0003c30:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003c35:	83 ed 20             	sub    ebp,0x20
c0003c38:	89 e8                	mov    eax,ebp
c0003c3a:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c3e:	41                   	inc    ecx
c0003c3f:	e9 e9 fe ff ff       	jmp    c0003b2d <create_name+0x15c>
c0003c44:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003c48:	75 04                	jne    c0003c4e <create_name+0x27d>
c0003c4a:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003c4e:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003c53:	75 05                	jne    c0003c5a <create_name+0x289>
c0003c55:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003c5a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c5e:	83 e0 0c             	and    eax,0xc
c0003c61:	3c 0c                	cmp    al,0xc
c0003c63:	74 0b                	je     c0003c70 <create_name+0x29f>
c0003c65:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003c69:	83 e0 03             	and    eax,0x3
c0003c6c:	3c 03                	cmp    al,0x3
c0003c6e:	75 05                	jne    c0003c75 <create_name+0x2a4>
c0003c70:	83 cb 02             	or     ebx,0x2
c0003c73:	eb 19                	jmp    c0003c8e <create_name+0x2bd>
c0003c75:	f6 c3 02             	test   bl,0x2
c0003c78:	75 14                	jne    c0003c8e <create_name+0x2bd>
c0003c7a:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003c7f:	74 03                	je     c0003c84 <create_name+0x2b3>
c0003c81:	83 cb 10             	or     ebx,0x10
c0003c84:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003c89:	74 03                	je     c0003c8e <create_name+0x2bd>
c0003c8b:	83 cb 08             	or     ebx,0x8
c0003c8e:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003c91:	31 c0                	xor    eax,eax
c0003c93:	eb 10                	jmp    c0003ca5 <create_name+0x2d4>
c0003c95:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003c9a:	0f 85 ce fe ff ff    	jne    c0003b6e <create_name+0x19d>
c0003ca0:	e9 a6 fe ff ff       	jmp    c0003b4b <create_name+0x17a>
c0003ca5:	83 c4 3c             	add    esp,0x3c
c0003ca8:	5b                   	pop    ebx
c0003ca9:	5e                   	pop    esi
c0003caa:	5f                   	pop    edi
c0003cab:	5d                   	pop    ebp
c0003cac:	c3                   	ret    

c0003cad <xname_sum>:
c0003cad:	56                   	push   esi
c0003cae:	53                   	push   ebx
c0003caf:	89 c6                	mov    esi,eax
c0003cb1:	51                   	push   ecx
c0003cb2:	31 db                	xor    ebx,ebx
c0003cb4:	83 c6 02             	add    esi,0x2
c0003cb7:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003cbb:	66 85 c0             	test   ax,ax
c0003cbe:	74 1f                	je     c0003cdf <xname_sum+0x32>
c0003cc0:	83 ec 0c             	sub    esp,0xc
c0003cc3:	66 d1 cb             	ror    bx,1
c0003cc6:	50                   	push   eax
c0003cc7:	e8 1e 46 00 00       	call   c00082ea <ff_wtoupper>
c0003ccc:	83 c4 10             	add    esp,0x10
c0003ccf:	0f b6 d0             	movzx  edx,al
c0003cd2:	66 c1 e8 08          	shr    ax,0x8
c0003cd6:	01 d3                	add    ebx,edx
c0003cd8:	66 d1 cb             	ror    bx,1
c0003cdb:	01 c3                	add    ebx,eax
c0003cdd:	eb d5                	jmp    c0003cb4 <xname_sum+0x7>
c0003cdf:	89 d8                	mov    eax,ebx
c0003ce1:	5a                   	pop    edx
c0003ce2:	5b                   	pop    ebx
c0003ce3:	5e                   	pop    esi
c0003ce4:	c3                   	ret    

c0003ce5 <create_xdir>:
c0003ce5:	55                   	push   ebp
c0003ce6:	b9 40 00 00 00       	mov    ecx,0x40
c0003ceb:	57                   	push   edi
c0003cec:	bd 01 00 00 00       	mov    ebp,0x1
c0003cf1:	56                   	push   esi
c0003cf2:	31 ff                	xor    edi,edi
c0003cf4:	53                   	push   ebx
c0003cf5:	be 40 00 00 00       	mov    esi,0x40
c0003cfa:	89 c3                	mov    ebx,eax
c0003cfc:	83 ec 1c             	sub    esp,0x1c
c0003cff:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d03:	31 d2                	xor    edx,edx
c0003d05:	e8 18 dd ff ff       	call   c0001a22 <mem_set>
c0003d0a:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003d0d:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003d11:	31 c9                	xor    ecx,ecx
c0003d13:	8d 46 01             	lea    eax,[esi+0x1]
c0003d16:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003d1a:	83 c6 02             	add    esi,0x2
c0003d1d:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003d21:	66 85 ed             	test   bp,bp
c0003d24:	74 12                	je     c0003d38 <create_xdir+0x53>
c0003d26:	0f b6 c1             	movzx  eax,cl
c0003d29:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d2d:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003d31:	66 83 fd 01          	cmp    bp,0x1
c0003d35:	80 d9 ff             	sbb    cl,0xff
c0003d38:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003d3b:	0f b7 d5             	movzx  edx,bp
c0003d3e:	83 c6 02             	add    esi,0x2
c0003d41:	e8 ba dc ff ff       	call   c0001a00 <st_word>
c0003d46:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003d4c:	75 d3                	jne    c0003d21 <create_xdir+0x3c>
c0003d4e:	8d 47 01             	lea    eax,[edi+0x1]
c0003d51:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003d55:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003d59:	0f b6 c1             	movzx  eax,cl
c0003d5c:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003d61:	74 07                	je     c0003d6a <create_xdir+0x85>
c0003d63:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003d68:	eb a9                	jmp    c0003d13 <create_xdir+0x2e>
c0003d6a:	8d 47 02             	lea    eax,[edi+0x2]
c0003d6d:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003d70:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003d73:	89 d0                	mov    eax,edx
c0003d75:	e8 33 ff ff ff       	call   c0003cad <xname_sum>
c0003d7a:	83 c4 1c             	add    esp,0x1c
c0003d7d:	0f b7 d0             	movzx  edx,ax
c0003d80:	8d 43 24             	lea    eax,[ebx+0x24]
c0003d83:	5b                   	pop    ebx
c0003d84:	5e                   	pop    esi
c0003d85:	5f                   	pop    edi
c0003d86:	5d                   	pop    ebp
c0003d87:	e9 74 dc ff ff       	jmp    c0001a00 <st_word>

c0003d8c <cmp_lfn>:
c0003d8c:	55                   	push   ebp
c0003d8d:	57                   	push   edi
c0003d8e:	89 d7                	mov    edi,edx
c0003d90:	56                   	push   esi
c0003d91:	53                   	push   ebx
c0003d92:	83 ec 1c             	sub    esp,0x1c
c0003d95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003d99:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003d9c:	e8 ed db ff ff       	call   c000198e <ld_word>
c0003da1:	66 85 c0             	test   ax,ax
c0003da4:	74 07                	je     c0003dad <cmp_lfn+0x21>
c0003da6:	31 c0                	xor    eax,eax
c0003da8:	e9 9a 00 00 00       	jmp    c0003e47 <cmp_lfn+0xbb>
c0003dad:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003daf:	bd 01 00 00 00       	mov    ebp,0x1
c0003db4:	83 e3 3f             	and    ebx,0x3f
c0003db7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003dbf:	4b                   	dec    ebx
c0003dc0:	6b db 0d             	imul   ebx,ebx,0xd
c0003dc3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003dc7:	0f b6 80 a0 f1 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe0e60]
c0003dce:	01 f8                	add    eax,edi
c0003dd0:	e8 b9 db ff ff       	call   c000198e <ld_word>
c0003dd5:	66 85 ed             	test   bp,bp
c0003dd8:	89 c6                	mov    esi,eax
c0003dda:	74 3c                	je     c0003e18 <cmp_lfn+0x8c>
c0003ddc:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003de2:	77 c2                	ja     c0003da6 <cmp_lfn+0x1a>
c0003de4:	83 ec 0c             	sub    esp,0xc
c0003de7:	0f b7 c0             	movzx  eax,ax
c0003dea:	50                   	push   eax
c0003deb:	e8 fa 44 00 00       	call   c00082ea <ff_wtoupper>
c0003df0:	89 c5                	mov    ebp,eax
c0003df2:	8d 43 01             	lea    eax,[ebx+0x1]
c0003df5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003df9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003dfd:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e01:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e04:	e8 e1 44 00 00       	call   c00082ea <ff_wtoupper>
c0003e09:	83 c4 10             	add    esp,0x10
c0003e0c:	39 c5                	cmp    ebp,eax
c0003e0e:	75 96                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e10:	89 f5                	mov    ebp,esi
c0003e12:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003e16:	eb 04                	jmp    c0003e1c <cmp_lfn+0x90>
c0003e18:	66 46                	inc    si
c0003e1a:	75 8a                	jne    c0003da6 <cmp_lfn+0x1a>
c0003e1c:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003e20:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003e25:	75 9c                	jne    c0003dc3 <cmp_lfn+0x37>
c0003e27:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003e2a:	74 16                	je     c0003e42 <cmp_lfn+0xb6>
c0003e2c:	66 85 ed             	test   bp,bp
c0003e2f:	74 11                	je     c0003e42 <cmp_lfn+0xb6>
c0003e31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e35:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003e3a:	0f 94 c0             	sete   al
c0003e3d:	0f b6 c0             	movzx  eax,al
c0003e40:	eb 05                	jmp    c0003e47 <cmp_lfn+0xbb>
c0003e42:	b8 01 00 00 00       	mov    eax,0x1
c0003e47:	83 c4 1c             	add    esp,0x1c
c0003e4a:	5b                   	pop    ebx
c0003e4b:	5e                   	pop    esi
c0003e4c:	5f                   	pop    edi
c0003e4d:	5d                   	pop    ebp
c0003e4e:	c3                   	ret    

c0003e4f <dir_find>:
c0003e4f:	55                   	push   ebp
c0003e50:	31 d2                	xor    edx,edx
c0003e52:	57                   	push   edi
c0003e53:	56                   	push   esi
c0003e54:	53                   	push   ebx
c0003e55:	89 c3                	mov    ebx,eax
c0003e57:	83 ec 1c             	sub    esp,0x1c
c0003e5a:	8b 30                	mov    esi,DWORD PTR [eax]
c0003e5c:	e8 89 f0 ff ff       	call   c0002eea <dir_sdi>
c0003e61:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e64:	85 c0                	test   eax,eax
c0003e66:	0f 85 9e 01 00 00    	jne    c000400a <dir_find+0x1bb>
c0003e6c:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003e6f:	0f 85 8d 00 00 00    	jne    c0003f02 <dir_find+0xb3>
c0003e75:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003e78:	e8 30 fe ff ff       	call   c0003cad <xname_sum>
c0003e7d:	89 c7                	mov    edi,eax
c0003e7f:	31 d2                	xor    edx,edx
c0003e81:	89 d8                	mov    eax,ebx
c0003e83:	e8 72 f8 ff ff       	call   c00036fa <dir_read>
c0003e88:	85 c0                	test   eax,eax
c0003e8a:	0f 85 5e 01 00 00    	jne    c0003fee <dir_find+0x19f>
c0003e90:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003e93:	8d 41 24             	lea    eax,[ecx+0x24]
c0003e96:	e8 f3 da ff ff       	call   c000198e <ld_word>
c0003e9b:	66 39 f8             	cmp    ax,di
c0003e9e:	75 df                	jne    c0003e7f <dir_find+0x30>
c0003ea0:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0003ea3:	31 ed                	xor    ebp,ebp
c0003ea5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003ea9:	ba 40 00 00 00       	mov    edx,0x40
c0003eae:	89 e9                	mov    ecx,ebp
c0003eb0:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0003eb4:	0f 84 42 01 00 00    	je     c0003ffc <dir_find+0x1ad>
c0003eba:	f6 c2 1f             	test   dl,0x1f
c0003ebd:	75 03                	jne    c0003ec2 <dir_find+0x73>
c0003ebf:	83 c2 02             	add    edx,0x2
c0003ec2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003ec6:	89 d0                	mov    eax,edx
c0003ec8:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003ecb:	e8 be da ff ff       	call   c000198e <ld_word>
c0003ed0:	83 ec 0c             	sub    esp,0xc
c0003ed3:	0f b7 c0             	movzx  eax,ax
c0003ed6:	50                   	push   eax
c0003ed7:	e8 0e 44 00 00       	call   c00082ea <ff_wtoupper>
c0003edc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003ee0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003ee3:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c0003ee7:	89 04 24             	mov    DWORD PTR [esp],eax
c0003eea:	e8 fb 43 00 00       	call   c00082ea <ff_wtoupper>
c0003eef:	83 c4 10             	add    esp,0x10
c0003ef2:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003ef6:	75 87                	jne    c0003e7f <dir_find+0x30>
c0003ef8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003efc:	45                   	inc    ebp
c0003efd:	83 c2 02             	add    edx,0x2
c0003f00:	eb ac                	jmp    c0003eae <dir_find+0x5f>
c0003f02:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003f09:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003f0e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f13:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003f16:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003f19:	89 f0                	mov    eax,esi
c0003f1b:	e8 4c e2 ff ff       	call   c000216c <move_window>
c0003f20:	85 c0                	test   eax,eax
c0003f22:	0f 85 c6 00 00 00    	jne    c0003fee <dir_find+0x19f>
c0003f28:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003f2b:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003f2e:	84 c9                	test   cl,cl
c0003f30:	0f 84 bd 00 00 00    	je     c0003ff3 <dir_find+0x1a4>
c0003f36:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003f39:	88 d0                	mov    al,dl
c0003f3b:	83 e0 3f             	and    eax,0x3f
c0003f3e:	80 f9 e5             	cmp    cl,0xe5
c0003f41:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003f44:	0f 84 87 00 00 00    	je     c0003fd1 <dir_find+0x182>
c0003f4a:	80 e2 08             	and    dl,0x8
c0003f4d:	74 06                	je     c0003f55 <dir_find+0x106>
c0003f4f:	3c 0f                	cmp    al,0xf
c0003f51:	75 7e                	jne    c0003fd1 <dir_find+0x182>
c0003f53:	eb 04                	jmp    c0003f59 <dir_find+0x10a>
c0003f55:	3c 0f                	cmp    al,0xf
c0003f57:	75 4c                	jne    c0003fa5 <dir_find+0x156>
c0003f59:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003f5d:	75 7e                	jne    c0003fdd <dir_find+0x18e>
c0003f5f:	f6 c1 40             	test   cl,0x40
c0003f62:	74 12                	je     c0003f76 <dir_find+0x127>
c0003f64:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003f67:	83 e1 bf             	and    ecx,0xffffffbf
c0003f6a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0003f6e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003f71:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003f74:	eb 06                	jmp    c0003f7c <dir_find+0x12d>
c0003f76:	89 f8                	mov    eax,edi
c0003f78:	38 c8                	cmp    al,cl
c0003f7a:	75 5c                	jne    c0003fd8 <dir_find+0x189>
c0003f7c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0003f80:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003f85:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003f88:	75 53                	jne    c0003fdd <dir_find+0x18e>
c0003f8a:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0003f8e:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f91:	89 ea                	mov    edx,ebp
c0003f93:	e8 f4 fd ff ff       	call   c0003d8c <cmp_lfn>
c0003f98:	85 c0                	test   eax,eax
c0003f9a:	74 41                	je     c0003fdd <dir_find+0x18e>
c0003f9c:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0003fa0:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003fa3:	eb 38                	jmp    c0003fdd <dir_find+0x18e>
c0003fa5:	89 f8                	mov    eax,edi
c0003fa7:	84 c0                	test   al,al
c0003fa9:	75 0d                	jne    c0003fb8 <dir_find+0x169>
c0003fab:	89 e8                	mov    eax,ebp
c0003fad:	e8 98 de ff ff       	call   c0001e4a <sum_sfn>
c0003fb2:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0003fb6:	74 52                	je     c000400a <dir_find+0x1bb>
c0003fb8:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0003fbc:	75 13                	jne    c0003fd1 <dir_find+0x182>
c0003fbe:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0003fc1:	b9 0b 00 00 00       	mov    ecx,0xb
c0003fc6:	89 e8                	mov    eax,ebp
c0003fc8:	e8 60 da ff ff       	call   c0001a2d <mem_cmp>
c0003fcd:	85 c0                	test   eax,eax
c0003fcf:	74 39                	je     c000400a <dir_find+0x1bb>
c0003fd1:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fd8:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fdd:	31 d2                	xor    edx,edx
c0003fdf:	89 d8                	mov    eax,ebx
c0003fe1:	e8 5c f4 ff ff       	call   c0003442 <dir_next>
c0003fe6:	85 c0                	test   eax,eax
c0003fe8:	0f 84 25 ff ff ff    	je     c0003f13 <dir_find+0xc4>
c0003fee:	89 04 24             	mov    DWORD PTR [esp],eax
c0003ff1:	eb 17                	jmp    c000400a <dir_find+0x1bb>
c0003ff3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0003ffa:	eb 0e                	jmp    c000400a <dir_find+0x1bb>
c0003ffc:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003fff:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c0004004:	0f 85 75 fe ff ff    	jne    c0003e7f <dir_find+0x30>
c000400a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000400d:	83 c4 1c             	add    esp,0x1c
c0004010:	5b                   	pop    ebx
c0004011:	5e                   	pop    esi
c0004012:	5f                   	pop    edi
c0004013:	5d                   	pop    ebp
c0004014:	c3                   	ret    

c0004015 <dir_register>:
c0004015:	55                   	push   ebp
c0004016:	57                   	push   edi
c0004017:	56                   	push   esi
c0004018:	be 06 00 00 00       	mov    esi,0x6
c000401d:	53                   	push   ebx
c000401e:	83 ec 6c             	sub    esp,0x6c
c0004021:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c0004025:	0f 85 62 02 00 00    	jne    c000428d <dir_register+0x278>
c000402b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000402d:	31 ff                	xor    edi,edi
c000402f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004032:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c0004037:	74 03                	je     c000403c <dir_register+0x27>
c0004039:	47                   	inc    edi
c000403a:	eb f6                	jmp    c0004032 <dir_register+0x1d>
c000403c:	89 c3                	mov    ebx,eax
c000403e:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004042:	0f 85 e1 00 00 00    	jne    c0004129 <dir_register+0x114>
c0004048:	83 c7 0e             	add    edi,0xe
c000404b:	b9 0f 00 00 00       	mov    ecx,0xf
c0004050:	89 f8                	mov    eax,edi
c0004052:	31 d2                	xor    edx,edx
c0004054:	f7 f1                	div    ecx
c0004056:	8d 50 02             	lea    edx,[eax+0x2]
c0004059:	89 c7                	mov    edi,eax
c000405b:	89 d8                	mov    eax,ebx
c000405d:	e8 12 f8 ff ff       	call   c0003874 <dir_alloc>
c0004062:	89 c6                	mov    esi,eax
c0004064:	85 c0                	test   eax,eax
c0004066:	0f 85 21 02 00 00    	jne    c000428d <dir_register+0x278>
c000406c:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004072:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004075:	c1 e7 05             	shl    edi,0x5
c0004078:	29 f8                	sub    eax,edi
c000407a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000407d:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004080:	a8 04                	test   al,0x4
c0004082:	0f 84 91 00 00 00    	je     c0004119 <dir_register+0x104>
c0004088:	83 e0 fb             	and    eax,0xfffffffb
c000408b:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c000408e:	89 d8                	mov    eax,ebx
c0004090:	e8 25 ec ff ff       	call   c0002cba <fill_first_frag>
c0004095:	85 c0                	test   eax,eax
c0004097:	0f 85 ee 01 00 00    	jne    c000428b <dir_register+0x276>
c000409d:	83 c9 ff             	or     ecx,0xffffffff
c00040a0:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00040a3:	89 d8                	mov    eax,ebx
c00040a5:	e8 db eb ff ff       	call   c0002c85 <fill_last_frag>
c00040aa:	85 c0                	test   eax,eax
c00040ac:	0f 85 d9 01 00 00    	jne    c000428b <dir_register+0x276>
c00040b2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00040b6:	74 61                	je     c0004119 <dir_register+0x104>
c00040b8:	89 da                	mov    edx,ebx
c00040ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c00040be:	e8 ea f5 ff ff       	call   c00036ad <load_obj_xdir>
c00040c3:	85 c0                	test   eax,eax
c00040c5:	0f 85 c0 01 00 00    	jne    c000428b <dir_register+0x276>
c00040cb:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00040cf:	31 c9                	xor    ecx,ecx
c00040d1:	c1 e2 09             	shl    edx,0x9
c00040d4:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00040d7:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00040da:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00040dd:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00040e0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040e3:	83 c0 38             	add    eax,0x38
c00040e6:	e8 1c d9 ff ff       	call   c0001a07 <st_qword>
c00040eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00040ee:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00040f1:	83 c0 28             	add    eax,0x28
c00040f4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00040f7:	e8 0b d9 ff ff       	call   c0001a07 <st_qword>
c00040fc:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00040ff:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0004102:	83 c8 01             	or     eax,0x1
c0004105:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c0004108:	8d 44 24 14          	lea    eax,[esp+0x14]
c000410c:	e8 db f7 ff ff       	call   c00038ec <store_xdir>
c0004111:	85 c0                	test   eax,eax
c0004113:	0f 85 72 01 00 00    	jne    c000428b <dir_register+0x276>
c0004119:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000411c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000411f:	e8 c1 fb ff ff       	call   c0003ce5 <create_xdir>
c0004124:	e9 64 01 00 00       	jmp    c000428d <dir_register+0x278>
c0004129:	8d 40 3c             	lea    eax,[eax+0x3c]
c000412c:	b9 0c 00 00 00       	mov    ecx,0xc
c0004131:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004135:	89 c2                	mov    edx,eax
c0004137:	8d 44 24 14          	lea    eax,[esp+0x14]
c000413b:	e8 cd d8 ff ff       	call   c0001a0d <mem_cpy>
c0004140:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004145:	74 58                	je     c000419f <dir_register+0x18a>
c0004147:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000414b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004153:	83 ec 0c             	sub    esp,0xc
c0004156:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0004159:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000415d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004161:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004165:	e8 24 dc ff ff       	call   c0001d8e <gen_numname>
c000416a:	89 d8                	mov    eax,ebx
c000416c:	e8 de fc ff ff       	call   c0003e4f <dir_find>
c0004171:	83 c4 10             	add    esp,0x10
c0004174:	89 c6                	mov    esi,eax
c0004176:	85 c0                	test   eax,eax
c0004178:	75 15                	jne    c000418f <dir_register+0x17a>
c000417a:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000417e:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004183:	75 ce                	jne    c0004153 <dir_register+0x13e>
c0004185:	be 07 00 00 00       	mov    esi,0x7
c000418a:	e9 fe 00 00 00       	jmp    c000428d <dir_register+0x278>
c000418f:	83 f8 04             	cmp    eax,0x4
c0004192:	0f 85 f5 00 00 00    	jne    c000428d <dir_register+0x278>
c0004198:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000419c:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c000419f:	b9 01 00 00 00       	mov    ecx,0x1
c00041a4:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00041a9:	74 0f                	je     c00041ba <dir_register+0x1a5>
c00041ab:	b9 0d 00 00 00       	mov    ecx,0xd
c00041b0:	8d 47 0c             	lea    eax,[edi+0xc]
c00041b3:	31 d2                	xor    edx,edx
c00041b5:	f7 f1                	div    ecx
c00041b7:	8d 48 01             	lea    ecx,[eax+0x1]
c00041ba:	89 ca                	mov    edx,ecx
c00041bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041c0:	89 d8                	mov    eax,ebx
c00041c2:	e8 ad f6 ff ff       	call   c0003874 <dir_alloc>
c00041c7:	89 c6                	mov    esi,eax
c00041c9:	85 c0                	test   eax,eax
c00041cb:	0f 85 bc 00 00 00    	jne    c000428d <dir_register+0x278>
c00041d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041d5:	49                   	dec    ecx
c00041d6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041da:	74 6a                	je     c0004246 <dir_register+0x231>
c00041dc:	89 c8                	mov    eax,ecx
c00041de:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00041e1:	c1 e0 05             	shl    eax,0x5
c00041e4:	29 c2                	sub    edx,eax
c00041e6:	89 d8                	mov    eax,ebx
c00041e8:	e8 fd ec ff ff       	call   c0002eea <dir_sdi>
c00041ed:	89 c6                	mov    esi,eax
c00041ef:	85 c0                	test   eax,eax
c00041f1:	0f 85 96 00 00 00    	jne    c000428d <dir_register+0x278>
c00041f7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00041fb:	e8 4a dc ff ff       	call   c0001e4a <sum_sfn>
c0004200:	0f b6 f8             	movzx  edi,al
c0004203:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004206:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004209:	89 e8                	mov    eax,ebp
c000420b:	e8 5c df ff ff       	call   c000216c <move_window>
c0004210:	89 c6                	mov    esi,eax
c0004212:	85 c0                	test   eax,eax
c0004214:	75 77                	jne    c000428d <dir_register+0x278>
c0004216:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c000421b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000421e:	83 ec 0c             	sub    esp,0xc
c0004221:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0004224:	57                   	push   edi
c0004225:	e8 e0 da ff ff       	call   c0001d0a <put_lfn>
c000422a:	31 d2                	xor    edx,edx
c000422c:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004230:	89 d8                	mov    eax,ebx
c0004232:	e8 0b f2 ff ff       	call   c0003442 <dir_next>
c0004237:	83 c4 10             	add    esp,0x10
c000423a:	89 c6                	mov    esi,eax
c000423c:	85 c0                	test   eax,eax
c000423e:	75 4d                	jne    c000428d <dir_register+0x278>
c0004240:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004244:	75 bd                	jne    c0004203 <dir_register+0x1ee>
c0004246:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0004249:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000424c:	89 e8                	mov    eax,ebp
c000424e:	e8 19 df ff ff       	call   c000216c <move_window>
c0004253:	89 c6                	mov    esi,eax
c0004255:	85 c0                	test   eax,eax
c0004257:	75 34                	jne    c000428d <dir_register+0x278>
c0004259:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000425c:	b9 20 00 00 00       	mov    ecx,0x20
c0004261:	31 d2                	xor    edx,edx
c0004263:	e8 ba d7 ff ff       	call   c0001a22 <mem_set>
c0004268:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000426b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000426f:	b9 0b 00 00 00       	mov    ecx,0xb
c0004274:	e8 94 d7 ff ff       	call   c0001a0d <mem_cpy>
c0004279:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000427c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000427f:	83 e0 18             	and    eax,0x18
c0004282:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004285:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004289:	eb 02                	jmp    c000428d <dir_register+0x278>
c000428b:	89 c6                	mov    esi,eax
c000428d:	83 c4 6c             	add    esp,0x6c
c0004290:	89 f0                	mov    eax,esi
c0004292:	5b                   	pop    ebx
c0004293:	5e                   	pop    esi
c0004294:	5f                   	pop    edi
c0004295:	5d                   	pop    ebp
c0004296:	c3                   	ret    

c0004297 <sync_fs>:
c0004297:	56                   	push   esi
c0004298:	53                   	push   ebx
c0004299:	53                   	push   ebx
c000429a:	89 c3                	mov    ebx,eax
c000429c:	e8 37 de ff ff       	call   c00020d8 <sync_window>
c00042a1:	85 c0                	test   eax,eax
c00042a3:	0f 85 b1 00 00 00    	jne    c000435a <sync_fs+0xc3>
c00042a9:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c00042ac:	0f 85 8e 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042b2:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c00042b6:	0f 85 84 00 00 00    	jne    c0004340 <sync_fs+0xa9>
c00042bc:	b9 00 02 00 00       	mov    ecx,0x200
c00042c1:	8d 73 54             	lea    esi,[ebx+0x54]
c00042c4:	31 d2                	xor    edx,edx
c00042c6:	89 f0                	mov    eax,esi
c00042c8:	e8 55 d7 ff ff       	call   c0001a22 <mem_set>
c00042cd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00042d3:	ba 55 aa 00 00       	mov    edx,0xaa55
c00042d8:	e8 23 d7 ff ff       	call   c0001a00 <st_word>
c00042dd:	ba 52 52 61 41       	mov    edx,0x41615252
c00042e2:	89 f0                	mov    eax,esi
c00042e4:	e8 1b d7 ff ff       	call   c0001a04 <st_dword>
c00042e9:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00042ef:	ba 72 72 41 61       	mov    edx,0x61417272
c00042f4:	e8 0b d7 ff ff       	call   c0001a04 <st_dword>
c00042f9:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00042fc:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c0004302:	e8 fd d6 ff ff       	call   c0001a04 <st_dword>
c0004307:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000430a:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c0004310:	e8 ef d6 ff ff       	call   c0001a04 <st_dword>
c0004315:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0004318:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c000431b:	83 c0 01             	add    eax,0x1
c000431e:	83 d2 00             	adc    edx,0x0
c0004321:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c0004324:	83 ec 0c             	sub    esp,0xc
c0004327:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c000432a:	6a 01                	push   0x1
c000432c:	52                   	push   edx
c000432d:	50                   	push   eax
c000432e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004332:	56                   	push   esi
c0004333:	50                   	push   eax
c0004334:	e8 20 d6 ff ff       	call   c0001959 <disk_write>
c0004339:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c000433d:	83 c4 20             	add    esp,0x20
c0004340:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004344:	51                   	push   ecx
c0004345:	6a 00                	push   0x0
c0004347:	6a 00                	push   0x0
c0004349:	50                   	push   eax
c000434a:	e8 20 d6 ff ff       	call   c000196f <disk_ioctl>
c000434f:	83 c4 10             	add    esp,0x10
c0004352:	85 c0                	test   eax,eax
c0004354:	0f 95 c0             	setne  al
c0004357:	0f b6 c0             	movzx  eax,al
c000435a:	5a                   	pop    edx
c000435b:	5b                   	pop    ebx
c000435c:	5e                   	pop    esi
c000435d:	c3                   	ret    

c000435e <create_partition>:
c000435e:	55                   	push   ebp
c000435f:	0f b6 c0             	movzx  eax,al
c0004362:	57                   	push   edi
c0004363:	56                   	push   esi
c0004364:	53                   	push   ebx
c0004365:	83 ec 60             	sub    esp,0x60
c0004368:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000436c:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004370:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004374:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004378:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000437c:	50                   	push   eax
c000437d:	6a 01                	push   0x1
c000437f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004383:	e8 e7 d5 ff ff       	call   c000196f <disk_ioctl>
c0004388:	83 c4 10             	add    esp,0x10
c000438b:	85 c0                	test   eax,eax
c000438d:	74 0a                	je     c0004399 <create_partition+0x3b>
c000438f:	b8 01 00 00 00       	mov    eax,0x1
c0004394:	e9 67 05 00 00       	jmp    c0004900 <create_partition+0x5a2>
c0004399:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000439d:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00043a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00043a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00043a9:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00043ae:	0f 86 ed 03 00 00    	jbe    c00047a1 <create_partition+0x443>
c00043b4:	83 c0 df             	add    eax,0xffffffdf
c00043b7:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00043bf:	83 d2 ff             	adc    edx,0xffffffff
c00043c2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00043c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00043ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00043ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00043d2:	83 c0 bd             	add    eax,0xffffffbd
c00043d5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00043dc:	83 d2 ff             	adc    edx,0xffffffff
c00043df:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00043e3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00043e7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00043ef:	be 22 00 00 00       	mov    esi,0x22
c00043f4:	31 ff                	xor    edi,edi
c00043f6:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00043fe:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c0004406:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000440e:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004412:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004418:	75 0e                	jne    c0004428 <create_partition+0xca>
c000441a:	b9 00 02 00 00       	mov    ecx,0x200
c000441f:	31 d2                	xor    edx,edx
c0004421:	89 d8                	mov    eax,ebx
c0004423:	e8 fa d5 ff ff       	call   c0001a22 <mem_set>
c0004428:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000442c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004430:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004434:	0b 04 24             	or     eax,DWORD PTR [esp]
c0004437:	0f 84 23 01 00 00    	je     c0004560 <create_partition+0x202>
c000443d:	89 f0                	mov    eax,esi
c000443f:	89 fa                	mov    edx,edi
c0004441:	05 ff 07 00 00       	add    eax,0x7ff
c0004446:	83 d2 00             	adc    edx,0x0
c0004449:	89 c1                	mov    ecx,eax
c000444b:	89 d7                	mov    edi,edx
c000444d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004453:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004457:	89 ce                	mov    esi,ecx
c0004459:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c000445d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004461:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004465:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004468:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000446c:	89 04 24             	mov    DWORD PTR [esp],eax
c000446f:	b8 64 00 00 00       	mov    eax,0x64
c0004474:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004477:	b8 00 00 00 00       	mov    eax,0x0
c000447c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004480:	72 41                	jb     c00044c3 <create_partition+0x165>
c0004482:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004486:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000448a:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000448e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004493:	01 c1                	add    ecx,eax
c0004495:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004499:	f7 24 24             	mul    DWORD PTR [esp]
c000449c:	6a 00                	push   0x0
c000449e:	01 ca                	add    edx,ecx
c00044a0:	6a 64                	push   0x64
c00044a2:	52                   	push   edx
c00044a3:	50                   	push   eax
c00044a4:	e8 23 9c 01 00       	call   c001e0cc <__udivdi3>
c00044a9:	83 c4 10             	add    esp,0x10
c00044ac:	05 ff 07 00 00       	add    eax,0x7ff
c00044b1:	83 d2 00             	adc    edx,0x0
c00044b4:	89 c1                	mov    ecx,eax
c00044b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00044ba:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044c0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00044c3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00044c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00044ca:	01 f0                	add    eax,esi
c00044cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00044d0:	11 fa                	adc    edx,edi
c00044d2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00044d6:	19 d1                	sbb    ecx,edx
c00044d8:	73 2e                	jae    c0004508 <create_partition+0x1aa>
c00044da:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00044de:	89 f8                	mov    eax,edi
c00044e0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00044e7:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00044eb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00044f3:	73 6b                	jae    c0004560 <create_partition+0x202>
c00044f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00044f9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00044fd:	29 f0                	sub    eax,esi
c00044ff:	19 fa                	sbb    edx,edi
c0004501:	89 04 24             	mov    DWORD PTR [esp],eax
c0004504:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000450c:	0b 04 24             	or     eax,DWORD PTR [esp]
c000450f:	74 4f                	je     c0004560 <create_partition+0x202>
c0004511:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0004514:	b9 10 00 00 00       	mov    ecx,0x10
c0004519:	ba b0 f1 01 c0       	mov    edx,0xc001f1b0
c000451e:	e8 ea d4 ff ff       	call   c0001a0d <mem_cpy>
c0004523:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c0004527:	b9 10 00 00 00       	mov    ecx,0x10
c000452c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004530:	e8 2c db ff ff       	call   c0002061 <make_rand>
c0004535:	89 f2                	mov    edx,esi
c0004537:	89 f9                	mov    ecx,edi
c0004539:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000453d:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004541:	e8 c1 d4 ff ff       	call   c0001a07 <st_qword>
c0004546:	03 34 24             	add    esi,DWORD PTR [esp]
c0004549:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c000454d:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004551:	89 f2                	mov    edx,esi
c0004553:	89 f9                	mov    ecx,edi
c0004555:	83 c2 ff             	add    edx,0xffffffff
c0004558:	83 d1 ff             	adc    ecx,0xffffffff
c000455b:	e8 a7 d4 ff ff       	call   c0001a07 <st_qword>
c0004560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004564:	83 e8 80             	sub    eax,0xffffff80
c0004567:	89 c5                	mov    ebp,eax
c0004569:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000456d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004573:	75 6b                	jne    c00045e0 <create_partition+0x282>
c0004575:	45                   	inc    ebp
c0004576:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000457a:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c000457f:	e8 39 da ff ff       	call   c0001fbd <crc32>
c0004584:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000458a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000458e:	75 e5                	jne    c0004575 <create_partition+0x217>
c0004590:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004594:	31 d2                	xor    edx,edx
c0004596:	83 ec 0c             	sub    esp,0xc
c0004599:	c1 ed 09             	shr    ebp,0x9
c000459c:	6a 01                	push   0x1
c000459e:	8d 45 02             	lea    eax,[ebp+0x2]
c00045a1:	52                   	push   edx
c00045a2:	50                   	push   eax
c00045a3:	53                   	push   ebx
c00045a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045a8:	e8 ac d3 ff ff       	call   c0001959 <disk_write>
c00045ad:	83 c4 20             	add    esp,0x20
c00045b0:	85 c0                	test   eax,eax
c00045b2:	0f 85 d7 fd ff ff    	jne    c000438f <create_partition+0x31>
c00045b8:	83 ec 0c             	sub    esp,0xc
c00045bb:	31 d2                	xor    edx,edx
c00045bd:	6a 01                	push   0x1
c00045bf:	89 e8                	mov    eax,ebp
c00045c1:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c00045c5:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c00045c9:	52                   	push   edx
c00045ca:	50                   	push   eax
c00045cb:	53                   	push   ebx
c00045cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00045d0:	e8 84 d3 ff ff       	call   c0001959 <disk_write>
c00045d5:	83 c4 20             	add    esp,0x20
c00045d8:	85 c0                	test   eax,eax
c00045da:	0f 85 af fd ff ff    	jne    c000438f <create_partition+0x31>
c00045e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00045e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00045e8:	3d 00 40 00 00       	cmp    eax,0x4000
c00045ed:	74 0d                	je     c00045fc <create_partition+0x29e>
c00045ef:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00045f3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00045f7:	e9 12 fe ff ff       	jmp    c000440e <create_partition+0xb0>
c00045fc:	31 d2                	xor    edx,edx
c00045fe:	b9 00 02 00 00       	mov    ecx,0x200
c0004603:	89 d8                	mov    eax,ebx
c0004605:	8d 6b 20             	lea    ebp,[ebx+0x20]
c0004608:	e8 15 d4 ff ff       	call   c0001a22 <mem_set>
c000460d:	8d 7b 48             	lea    edi,[ebx+0x48]
c0004610:	b9 10 00 00 00       	mov    ecx,0x10
c0004615:	ba a0 f0 01 c0       	mov    edx,0xc001f0a0
c000461a:	89 d8                	mov    eax,ebx
c000461c:	e8 ec d3 ff ff       	call   c0001a0d <mem_cpy>
c0004621:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0004625:	8d 43 58             	lea    eax,[ebx+0x58]
c0004628:	f7 d2                	not    edx
c000462a:	e8 d5 d3 ff ff       	call   c0001a04 <st_dword>
c000462f:	8d 43 18             	lea    eax,[ebx+0x18]
c0004632:	31 c9                	xor    ecx,ecx
c0004634:	89 04 24             	mov    DWORD PTR [esp],eax
c0004637:	ba 01 00 00 00       	mov    edx,0x1
c000463c:	e8 c6 d3 ff ff       	call   c0001a07 <st_qword>
c0004641:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004645:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004649:	83 c2 ff             	add    edx,0xffffffff
c000464c:	89 e8                	mov    eax,ebp
c000464e:	83 d1 ff             	adc    ecx,0xffffffff
c0004651:	e8 b1 d3 ff ff       	call   c0001a07 <st_qword>
c0004656:	31 c9                	xor    ecx,ecx
c0004658:	8d 43 28             	lea    eax,[ebx+0x28]
c000465b:	ba 22 00 00 00       	mov    edx,0x22
c0004660:	e8 a2 d3 ff ff       	call   c0001a07 <st_qword>
c0004665:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004669:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000466d:	83 c2 de             	add    edx,0xffffffde
c0004670:	8d 43 30             	lea    eax,[ebx+0x30]
c0004673:	83 d1 ff             	adc    ecx,0xffffffff
c0004676:	31 f6                	xor    esi,esi
c0004678:	e8 8a d3 ff ff       	call   c0001a07 <st_qword>
c000467d:	8d 43 54             	lea    eax,[ebx+0x54]
c0004680:	ba 80 00 00 00       	mov    edx,0x80
c0004685:	e8 7a d3 ff ff       	call   c0001a04 <st_dword>
c000468a:	8d 43 50             	lea    eax,[ebx+0x50]
c000468d:	ba 80 00 00 00       	mov    edx,0x80
c0004692:	e8 6d d3 ff ff       	call   c0001a04 <st_dword>
c0004697:	ba 02 00 00 00       	mov    edx,0x2
c000469c:	89 f8                	mov    eax,edi
c000469e:	e8 61 d3 ff ff       	call   c0001a04 <st_dword>
c00046a3:	8d 53 38             	lea    edx,[ebx+0x38]
c00046a6:	b9 10 00 00 00       	mov    ecx,0x10
c00046ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00046af:	e8 ad d9 ff ff       	call   c0002061 <make_rand>
c00046b4:	83 c8 ff             	or     eax,0xffffffff
c00046b7:	46                   	inc    esi
c00046b8:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c00046bd:	e8 fb d8 ff ff       	call   c0001fbd <crc32>
c00046c2:	83 fe 5c             	cmp    esi,0x5c
c00046c5:	75 f0                	jne    c00046b7 <create_partition+0x359>
c00046c7:	f7 d0                	not    eax
c00046c9:	8d 73 10             	lea    esi,[ebx+0x10]
c00046cc:	89 c2                	mov    edx,eax
c00046ce:	89 f0                	mov    eax,esi
c00046d0:	e8 2f d3 ff ff       	call   c0001a04 <st_dword>
c00046d5:	83 ec 0c             	sub    esp,0xc
c00046d8:	6a 01                	push   0x1
c00046da:	6a 00                	push   0x0
c00046dc:	6a 01                	push   0x1
c00046de:	53                   	push   ebx
c00046df:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00046e3:	e8 71 d2 ff ff       	call   c0001959 <disk_write>
c00046e8:	83 c4 20             	add    esp,0x20
c00046eb:	85 c0                	test   eax,eax
c00046ed:	0f 85 9c fc ff ff    	jne    c000438f <create_partition+0x31>
c00046f3:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046f7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046fb:	83 c2 ff             	add    edx,0xffffffff
c00046fe:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004701:	83 d1 ff             	adc    ecx,0xffffffff
c0004704:	e8 fe d2 ff ff       	call   c0001a07 <st_qword>
c0004709:	ba 01 00 00 00       	mov    edx,0x1
c000470e:	31 c9                	xor    ecx,ecx
c0004710:	89 e8                	mov    eax,ebp
c0004712:	e8 f0 d2 ff ff       	call   c0001a07 <st_qword>
c0004717:	89 f8                	mov    eax,edi
c0004719:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000471d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004721:	31 ff                	xor    edi,edi
c0004723:	e8 df d2 ff ff       	call   c0001a07 <st_qword>
c0004728:	89 f0                	mov    eax,esi
c000472a:	31 d2                	xor    edx,edx
c000472c:	e8 d3 d2 ff ff       	call   c0001a04 <st_dword>
c0004731:	83 c8 ff             	or     eax,0xffffffff
c0004734:	47                   	inc    edi
c0004735:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c000473a:	e8 7e d8 ff ff       	call   c0001fbd <crc32>
c000473f:	83 ff 5c             	cmp    edi,0x5c
c0004742:	75 f0                	jne    c0004734 <create_partition+0x3d6>
c0004744:	f7 d0                	not    eax
c0004746:	89 c2                	mov    edx,eax
c0004748:	89 f0                	mov    eax,esi
c000474a:	e8 b5 d2 ff ff       	call   c0001a04 <st_dword>
c000474f:	83 ec 0c             	sub    esp,0xc
c0004752:	6a 01                	push   0x1
c0004754:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004758:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c000475c:	83 c0 ff             	add    eax,0xffffffff
c000475f:	83 d2 ff             	adc    edx,0xffffffff
c0004762:	52                   	push   edx
c0004763:	50                   	push   eax
c0004764:	53                   	push   ebx
c0004765:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004769:	e8 eb d1 ff ff       	call   c0001959 <disk_write>
c000476e:	83 c4 20             	add    esp,0x20
c0004771:	85 c0                	test   eax,eax
c0004773:	0f 85 16 fc ff ff    	jne    c000438f <create_partition+0x31>
c0004779:	31 d2                	xor    edx,edx
c000477b:	89 d8                	mov    eax,ebx
c000477d:	b9 00 02 00 00       	mov    ecx,0x200
c0004782:	e8 9b d2 ff ff       	call   c0001a22 <mem_set>
c0004787:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c000478d:	b9 10 00 00 00       	mov    ecx,0x10
c0004792:	ba b0 f0 01 c0       	mov    edx,0xc001f0b0
c0004797:	e8 71 d2 ff ff       	call   c0001a0d <mem_cpy>
c000479c:	e9 21 01 00 00       	jmp    c00048c2 <create_partition+0x564>
c00047a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00047a5:	b9 05 00 00 00       	mov    ecx,0x5
c00047aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00047ad:	bf 08 00 00 00       	mov    edi,0x8
c00047b2:	89 f8                	mov    eax,edi
c00047b4:	31 d2                	xor    edx,edx
c00047b6:	0f b6 f0             	movzx  esi,al
c00047b9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047bc:	f7 f6                	div    esi
c00047be:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c00047c3:	76 0a                	jbe    c00047cf <create_partition+0x471>
c00047c5:	d1 e7                	shl    edi,1
c00047c7:	49                   	dec    ecx
c00047c8:	75 e8                	jne    c00047b2 <create_partition+0x454>
c00047ca:	bf ff ff ff ff       	mov    edi,0xffffffff
c00047cf:	b9 00 02 00 00       	mov    ecx,0x200
c00047d4:	31 d2                	xor    edx,edx
c00047d6:	89 d8                	mov    eax,ebx
c00047d8:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c00047de:	e8 3f d2 ff ff       	call   c0001a22 <mem_set>
c00047e3:	b9 64 00 00 00       	mov    ecx,0x64
c00047e8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047eb:	31 d2                	xor    edx,edx
c00047ed:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00047f5:	f7 f1                	div    ecx
c00047f7:	b9 3f 00 00 00       	mov    ecx,0x3f
c00047fc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004800:	89 f8                	mov    eax,edi
c0004802:	0f b6 c0             	movzx  eax,al
c0004805:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004809:	e9 80 00 00 00       	jmp    c000488e <create_partition+0x530>
c000480e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004811:	29 cf                	sub    edi,ecx
c0004813:	89 ca                	mov    edx,ecx
c0004815:	89 f0                	mov    eax,esi
c0004817:	bd 3f 00 00 00       	mov    ebp,0x3f
c000481c:	e8 e3 d1 ff ff       	call   c0001a04 <st_dword>
c0004821:	8d 46 04             	lea    eax,[esi+0x4]
c0004824:	89 fa                	mov    edx,edi
c0004826:	83 c6 10             	add    esi,0x10
c0004829:	e8 d6 d1 ff ff       	call   c0001a04 <st_dword>
c000482e:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004832:	31 d2                	xor    edx,edx
c0004834:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004837:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000483b:	89 c8                	mov    eax,ecx
c000483d:	01 f9                	add    ecx,edi
c000483f:	f7 f5                	div    ebp
c0004841:	89 d5                	mov    ebp,edx
c0004843:	31 d2                	xor    edx,edx
c0004845:	45                   	inc    ebp
c0004846:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c000484a:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c000484d:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004850:	89 c2                	mov    edx,eax
c0004852:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004855:	c1 ea 02             	shr    edx,0x2
c0004858:	83 e2 c0             	and    edx,0xffffffc0
c000485b:	09 ea                	or     edx,ebp
c000485d:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004862:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004865:	31 d2                	xor    edx,edx
c0004867:	f7 f5                	div    ebp
c0004869:	89 d7                	mov    edi,edx
c000486b:	31 d2                	xor    edx,edx
c000486d:	47                   	inc    edi
c000486e:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004872:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004875:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004878:	89 c5                	mov    ebp,eax
c000487a:	c1 ed 02             	shr    ebp,0x2
c000487d:	83 e5 c0             	and    ebp,0xffffffc0
c0004880:	09 ef                	or     edi,ebp
c0004882:	89 fa                	mov    edx,edi
c0004884:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004887:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c000488c:	74 34                	je     c00048c2 <create_partition+0x564>
c000488e:	85 c9                	test   ecx,ecx
c0004890:	74 30                	je     c00048c2 <create_partition+0x564>
c0004892:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004895:	76 2b                	jbe    c00048c2 <create_partition+0x564>
c0004897:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000489b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000489f:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c00048a2:	83 ff 64             	cmp    edi,0x64
c00048a5:	76 4b                	jbe    c00048f2 <create_partition+0x594>
c00048a7:	89 f8                	mov    eax,edi
c00048a9:	01 c8                	add    eax,ecx
c00048ab:	0f 82 5d ff ff ff    	jb     c000480e <create_partition+0x4b0>
c00048b1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048b4:	0f 87 54 ff ff ff    	ja     c000480e <create_partition+0x4b0>
c00048ba:	85 ff                	test   edi,edi
c00048bc:	0f 85 51 ff ff ff    	jne    c0004813 <create_partition+0x4b5>
c00048c2:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00048c8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00048cd:	e8 2e d1 ff ff       	call   c0001a00 <st_word>
c00048d2:	83 ec 0c             	sub    esp,0xc
c00048d5:	6a 01                	push   0x1
c00048d7:	6a 00                	push   0x0
c00048d9:	6a 00                	push   0x0
c00048db:	53                   	push   ebx
c00048dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048e0:	e8 74 d0 ff ff       	call   c0001959 <disk_write>
c00048e5:	83 c4 20             	add    esp,0x20
c00048e8:	85 c0                	test   eax,eax
c00048ea:	0f 95 c0             	setne  al
c00048ed:	0f b6 c0             	movzx  eax,al
c00048f0:	eb 0e                	jmp    c0004900 <create_partition+0x5a2>
c00048f2:	74 07                	je     c00048fb <create_partition+0x59d>
c00048f4:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c00048f9:	eb ac                	jmp    c00048a7 <create_partition+0x549>
c00048fb:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00048fe:	eb a7                	jmp    c00048a7 <create_partition+0x549>
c0004900:	83 c4 5c             	add    esp,0x5c
c0004903:	5b                   	pop    ebx
c0004904:	5e                   	pop    esi
c0004905:	5f                   	pop    edi
c0004906:	5d                   	pop    ebp
c0004907:	c3                   	ret    

c0004908 <get_fileinfo>:
c0004908:	55                   	push   ebp
c0004909:	57                   	push   edi
c000490a:	56                   	push   esi
c000490b:	53                   	push   ebx
c000490c:	83 ec 1c             	sub    esp,0x1c
c000490f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004911:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004915:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004919:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c000491c:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c000491f:	0f 84 dc 01 00 00    	je     c0004b01 <get_fileinfo+0x1f9>
c0004925:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004928:	75 0f                	jne    c0004939 <get_fileinfo+0x31>
c000492a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000492d:	83 c4 1c             	add    esp,0x1c
c0004930:	5b                   	pop    ebx
c0004931:	5e                   	pop    esi
c0004932:	5f                   	pop    edi
c0004933:	5d                   	pop    ebp
c0004934:	e9 58 d5 ff ff       	jmp    c0001e91 <get_xfileinfo>
c0004939:	89 d3                	mov    ebx,edx
c000493b:	89 c6                	mov    esi,eax
c000493d:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004941:	74 6a                	je     c00049ad <get_fileinfo+0xa5>
c0004943:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000494b:	31 ed                	xor    ebp,ebp
c000494d:	31 ff                	xor    edi,edi
c000494f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004953:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004957:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000495a:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c000495e:	66 85 d2             	test   dx,dx
c0004961:	74 3e                	je     c00049a1 <get_fileinfo+0x99>
c0004963:	66 85 ed             	test   bp,bp
c0004966:	75 0c                	jne    c0004974 <get_fileinfo+0x6c>
c0004968:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c000496e:	66 3d ff 07          	cmp    ax,0x7ff
c0004972:	76 22                	jbe    c0004996 <get_fileinfo+0x8e>
c0004974:	b9 ff 00 00 00       	mov    ecx,0xff
c0004979:	89 e8                	mov    eax,ebp
c000497b:	29 f9                	sub    ecx,edi
c000497d:	c1 e0 10             	shl    eax,0x10
c0004980:	09 d0                	or     eax,edx
c0004982:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004986:	e8 a3 d1 ff ff       	call   c0001b2e <put_utf>
c000498b:	84 c0                	test   al,al
c000498d:	74 10                	je     c000499f <get_fileinfo+0x97>
c000498f:	0f b6 c0             	movzx  eax,al
c0004992:	31 d2                	xor    edx,edx
c0004994:	01 c7                	add    edi,eax
c0004996:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c000499b:	89 d5                	mov    ebp,edx
c000499d:	eb b0                	jmp    c000494f <get_fileinfo+0x47>
c000499f:	31 ff                	xor    edi,edi
c00049a1:	66 85 ed             	test   bp,bp
c00049a4:	74 02                	je     c00049a8 <get_fileinfo+0xa0>
c00049a6:	31 ff                	xor    edi,edi
c00049a8:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00049ad:	31 ff                	xor    edi,edi
c00049af:	31 c9                	xor    ecx,ecx
c00049b1:	83 f9 0a             	cmp    ecx,0xa
c00049b4:	0f 87 ad 00 00 00    	ja     c0004a67 <get_fileinfo+0x15f>
c00049ba:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c00049bd:	8d 69 01             	lea    ebp,[ecx+0x1]
c00049c0:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c00049c4:	66 83 fa 20          	cmp    dx,0x20
c00049c8:	0f 84 92 00 00 00    	je     c0004a60 <get_fileinfo+0x158>
c00049ce:	66 83 fa 05          	cmp    dx,0x5
c00049d2:	75 05                	jne    c00049d9 <get_fileinfo+0xd1>
c00049d4:	ba e5 00 00 00       	mov    edx,0xe5
c00049d9:	83 ff 0b             	cmp    edi,0xb
c00049dc:	77 0b                	ja     c00049e9 <get_fileinfo+0xe1>
c00049de:	83 fd 09             	cmp    ebp,0x9
c00049e1:	75 06                	jne    c00049e9 <get_fileinfo+0xe1>
c00049e3:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c00049e8:	47                   	inc    edi
c00049e9:	0f b7 c2             	movzx  eax,dx
c00049ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049f0:	e8 6d d0 ff ff       	call   c0001a62 <dbc_1st>
c00049f5:	85 c0                	test   eax,eax
c00049f7:	74 2f                	je     c0004a28 <get_fileinfo+0x120>
c00049f9:	83 fd 08             	cmp    ebp,0x8
c00049fc:	74 2a                	je     c0004a28 <get_fileinfo+0x120>
c00049fe:	83 fd 0b             	cmp    ebp,0xb
c0004a01:	74 25                	je     c0004a28 <get_fileinfo+0x120>
c0004a03:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a06:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004a0a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004a0e:	e8 52 d0 ff ff       	call   c0001a65 <dbc_2nd>
c0004a13:	85 c0                	test   eax,eax
c0004a15:	74 11                	je     c0004a28 <get_fileinfo+0x120>
c0004a17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a1b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004a20:	c1 e2 08             	shl    edx,0x8
c0004a23:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004a26:	09 c2                	or     edx,eax
c0004a28:	0f b7 d2             	movzx  edx,dx
c0004a2b:	50                   	push   eax
c0004a2c:	50                   	push   eax
c0004a2d:	68 b5 01 00 00       	push   0x1b5
c0004a32:	52                   	push   edx
c0004a33:	e8 46 38 00 00       	call   c000827e <ff_oem2uni>
c0004a38:	83 c4 10             	add    esp,0x10
c0004a3b:	66 85 c0             	test   ax,ax
c0004a3e:	75 04                	jne    c0004a44 <get_fileinfo+0x13c>
c0004a40:	31 ff                	xor    edi,edi
c0004a42:	eb 23                	jmp    c0004a67 <get_fileinfo+0x15f>
c0004a44:	b9 0c 00 00 00       	mov    ecx,0xc
c0004a49:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004a4d:	29 f9                	sub    ecx,edi
c0004a4f:	0f b7 c0             	movzx  eax,ax
c0004a52:	e8 d7 d0 ff ff       	call   c0001b2e <put_utf>
c0004a57:	84 c0                	test   al,al
c0004a59:	74 e5                	je     c0004a40 <get_fileinfo+0x138>
c0004a5b:	0f b6 c0             	movzx  eax,al
c0004a5e:	01 c7                	add    edi,eax
c0004a60:	89 e9                	mov    ecx,ebp
c0004a62:	e9 4a ff ff ff       	jmp    c00049b1 <get_fileinfo+0xa9>
c0004a67:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004a6c:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004a70:	75 54                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004a72:	85 ff                	test   edi,edi
c0004a74:	75 0b                	jne    c0004a81 <get_fileinfo+0x179>
c0004a76:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004a7a:	ba 01 00 00 00       	mov    edx,0x1
c0004a7f:	eb 33                	jmp    c0004ab4 <get_fileinfo+0x1ac>
c0004a81:	b1 08                	mov    cl,0x8
c0004a83:	31 d2                	xor    edx,edx
c0004a85:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004a8b:	84 c0                	test   al,al
c0004a8d:	74 25                	je     c0004ab4 <get_fileinfo+0x1ac>
c0004a8f:	66 83 f8 2e          	cmp    ax,0x2e
c0004a93:	74 16                	je     c0004aab <get_fileinfo+0x1a3>
c0004a95:	8d 78 bf             	lea    edi,[eax-0x41]
c0004a98:	66 83 ff 19          	cmp    di,0x19
c0004a9c:	77 0f                	ja     c0004aad <get_fileinfo+0x1a5>
c0004a9e:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004aa1:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004aa4:	74 07                	je     c0004aad <get_fileinfo+0x1a5>
c0004aa6:	83 c0 20             	add    eax,0x20
c0004aa9:	eb 02                	jmp    c0004aad <get_fileinfo+0x1a5>
c0004aab:	b1 10                	mov    cl,0x10
c0004aad:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004ab1:	42                   	inc    edx
c0004ab2:	eb d1                	jmp    c0004a85 <get_fileinfo+0x17d>
c0004ab4:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004ab9:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004abc:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004ac0:	75 04                	jne    c0004ac6 <get_fileinfo+0x1be>
c0004ac2:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004ac6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ac9:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004acc:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004acf:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ad2:	83 c0 1c             	add    eax,0x1c
c0004ad5:	e8 c1 ce ff ff       	call   c000199b <ld_dword>
c0004ada:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004ae1:	89 03                	mov    DWORD PTR [ebx],eax
c0004ae3:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004ae6:	83 c0 16             	add    eax,0x16
c0004ae9:	e8 a0 ce ff ff       	call   c000198e <ld_word>
c0004aee:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004af2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004af5:	83 c0 18             	add    eax,0x18
c0004af8:	e8 91 ce ff ff       	call   c000198e <ld_word>
c0004afd:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004b01:	83 c4 1c             	add    esp,0x1c
c0004b04:	5b                   	pop    ebx
c0004b05:	5e                   	pop    esi
c0004b06:	5f                   	pop    edi
c0004b07:	5d                   	pop    ebp
c0004b08:	c3                   	ret    

c0004b09 <ld_clust.isra.0>:
c0004b09:	56                   	push   esi
c0004b0a:	89 c6                	mov    esi,eax
c0004b0c:	53                   	push   ebx
c0004b0d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004b10:	89 d3                	mov    ebx,edx
c0004b12:	e8 77 ce ff ff       	call   c000198e <ld_word>
c0004b17:	0f b7 c8             	movzx  ecx,ax
c0004b1a:	89 f0                	mov    eax,esi
c0004b1c:	3c 03                	cmp    al,0x3
c0004b1e:	75 0d                	jne    c0004b2d <ld_clust.isra.0+0x24>
c0004b20:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b23:	e8 66 ce ff ff       	call   c000198e <ld_word>
c0004b28:	c1 e0 10             	shl    eax,0x10
c0004b2b:	09 c1                	or     ecx,eax
c0004b2d:	89 c8                	mov    eax,ecx
c0004b2f:	5b                   	pop    ebx
c0004b30:	5e                   	pop    esi
c0004b31:	c3                   	ret    

c0004b32 <st_clust.isra.1>:
c0004b32:	56                   	push   esi
c0004b33:	89 c6                	mov    esi,eax
c0004b35:	53                   	push   ebx
c0004b36:	89 d3                	mov    ebx,edx
c0004b38:	0f b7 d1             	movzx  edx,cx
c0004b3b:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004b3e:	e8 bd ce ff ff       	call   c0001a00 <st_word>
c0004b43:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004b46:	75 0f                	jne    c0004b57 <st_clust.isra.1+0x25>
c0004b48:	c1 e9 10             	shr    ecx,0x10
c0004b4b:	8d 43 14             	lea    eax,[ebx+0x14]
c0004b4e:	89 ca                	mov    edx,ecx
c0004b50:	5b                   	pop    ebx
c0004b51:	5e                   	pop    esi
c0004b52:	e9 a9 ce ff ff       	jmp    c0001a00 <st_word>
c0004b57:	5b                   	pop    ebx
c0004b58:	5e                   	pop    esi
c0004b59:	c3                   	ret    

c0004b5a <init_alloc_info.isra.2>:
c0004b5a:	56                   	push   esi
c0004b5b:	53                   	push   ebx
c0004b5c:	89 c6                	mov    esi,eax
c0004b5e:	89 d3                	mov    ebx,edx
c0004b60:	51                   	push   ecx
c0004b61:	8b 00                	mov    eax,DWORD PTR [eax]
c0004b63:	83 c0 34             	add    eax,0x34
c0004b66:	e8 30 ce ff ff       	call   c000199b <ld_dword>
c0004b6b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004b6e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b70:	83 c0 38             	add    eax,0x38
c0004b73:	e8 3b ce ff ff       	call   c00019b3 <ld_qword>
c0004b78:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004b7b:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004b7e:	8b 06                	mov    eax,DWORD PTR [esi]
c0004b80:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004b83:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004b8a:	83 e0 02             	and    eax,0x2
c0004b8d:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004b90:	5b                   	pop    ebx
c0004b91:	5b                   	pop    ebx
c0004b92:	5e                   	pop    esi
c0004b93:	c3                   	ret    

c0004b94 <follow_path>:
c0004b94:	56                   	push   esi
c0004b95:	53                   	push   ebx
c0004b96:	89 c3                	mov    ebx,eax
c0004b98:	83 ec 14             	sub    esp,0x14
c0004b9b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004b9f:	8b 30                	mov    esi,DWORD PTR [eax]
c0004ba1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ba5:	8a 10                	mov    dl,BYTE PTR [eax]
c0004ba7:	80 fa 5c             	cmp    dl,0x5c
c0004baa:	75 07                	jne    c0004bb3 <follow_path+0x1f>
c0004bac:	40                   	inc    eax
c0004bad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004bb1:	eb ee                	jmp    c0004ba1 <follow_path+0xd>
c0004bb3:	80 fa 2f             	cmp    dl,0x2f
c0004bb6:	74 f4                	je     c0004bac <follow_path+0x18>
c0004bb8:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004bbf:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004bc6:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004bc9:	77 52                	ja     c0004c1d <follow_path+0x89>
c0004bcb:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004bcf:	31 d2                	xor    edx,edx
c0004bd1:	89 d8                	mov    eax,ebx
c0004bd3:	e8 12 e3 ff ff       	call   c0002eea <dir_sdi>
c0004bd8:	eb 7c                	jmp    c0004c56 <follow_path+0xc2>
c0004bda:	89 d8                	mov    eax,ebx
c0004bdc:	e8 6e f2 ff ff       	call   c0003e4f <dir_find>
c0004be1:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004be4:	85 c0                	test   eax,eax
c0004be6:	75 46                	jne    c0004c2e <follow_path+0x9a>
c0004be8:	80 e2 04             	and    dl,0x4
c0004beb:	75 69                	jne    c0004c56 <follow_path+0xc2>
c0004bed:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004bf1:	74 5e                	je     c0004c51 <follow_path+0xbd>
c0004bf3:	8a 06                	mov    al,BYTE PTR [esi]
c0004bf5:	3c 04                	cmp    al,0x4
c0004bf7:	75 41                	jne    c0004c3a <follow_path+0xa6>
c0004bf9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004bfc:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004c00:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004c03:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004c06:	30 c0                	xor    al,al
c0004c08:	09 d0                	or     eax,edx
c0004c0a:	89 da                	mov    edx,ebx
c0004c0c:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004c0f:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004c12:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004c15:	8d 46 10             	lea    eax,[esi+0x10]
c0004c18:	e8 3d ff ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004c1d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004c21:	89 d8                	mov    eax,ebx
c0004c23:	e8 a9 ed ff ff       	call   c00039d1 <create_name>
c0004c28:	85 c0                	test   eax,eax
c0004c2a:	74 ae                	je     c0004bda <follow_path+0x46>
c0004c2c:	eb 28                	jmp    c0004c56 <follow_path+0xc2>
c0004c2e:	83 f8 04             	cmp    eax,0x4
c0004c31:	75 23                	jne    c0004c56 <follow_path+0xc2>
c0004c33:	80 e2 04             	and    dl,0x4
c0004c36:	74 19                	je     c0004c51 <follow_path+0xbd>
c0004c38:	eb 1c                	jmp    c0004c56 <follow_path+0xc2>
c0004c3a:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004c3d:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004c43:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004c47:	e8 bd fe ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004c4c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c4f:	eb cc                	jmp    c0004c1d <follow_path+0x89>
c0004c51:	b8 05 00 00 00       	mov    eax,0x5
c0004c56:	83 c4 14             	add    esp,0x14
c0004c59:	5b                   	pop    ebx
c0004c5a:	5e                   	pop    esi
c0004c5b:	c3                   	ret    

c0004c5c <f_mount>:
c0004c5c:	53                   	push   ebx
c0004c5d:	83 ec 18             	sub    esp,0x18
c0004c60:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004c64:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004c68:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c6c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004c70:	e8 fb d2 ff ff       	call   c0001f70 <get_ldnumber>
c0004c75:	89 c2                	mov    edx,eax
c0004c77:	b8 0b 00 00 00       	mov    eax,0xb
c0004c7c:	85 d2                	test   edx,edx
c0004c7e:	78 39                	js     c0004cb9 <f_mount+0x5d>
c0004c80:	8b 04 95 60 2e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd1a0]
c0004c87:	85 c0                	test   eax,eax
c0004c89:	74 03                	je     c0004c8e <f_mount+0x32>
c0004c8b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c92:	85 c0                	test   eax,eax
c0004c94:	74 03                	je     c0004c99 <f_mount+0x3d>
c0004c96:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004c99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004c9d:	89 04 95 60 2e 02 c0 	mov    DWORD PTR [edx*4-0x3ffdd1a0],eax
c0004ca4:	31 c0                	xor    eax,eax
c0004ca6:	84 db                	test   bl,bl
c0004ca8:	74 0f                	je     c0004cb9 <f_mount+0x5d>
c0004caa:	31 c9                	xor    ecx,ecx
c0004cac:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004cb0:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004cb4:	e8 65 d7 ff ff       	call   c000241e <mount_volume>
c0004cb9:	83 c4 18             	add    esp,0x18
c0004cbc:	5b                   	pop    ebx
c0004cbd:	c3                   	ret    

c0004cbe <f_open>:
c0004cbe:	55                   	push   ebp
c0004cbf:	bd 09 00 00 00       	mov    ebp,0x9
c0004cc4:	57                   	push   edi
c0004cc5:	56                   	push   esi
c0004cc6:	53                   	push   ebx
c0004cc7:	83 ec 7c             	sub    esp,0x7c
c0004cca:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004cd1:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004cd8:	85 db                	test   ebx,ebx
c0004cda:	0f 84 10 04 00 00    	je     c00050f0 <f_open+0x432>
c0004ce0:	89 fe                	mov    esi,edi
c0004ce2:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004ce6:	83 e6 3f             	and    esi,0x3f
c0004ce9:	89 f0                	mov    eax,esi
c0004ceb:	0f b6 c8             	movzx  ecx,al
c0004cee:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004cf5:	e8 24 d7 ff ff       	call   c000241e <mount_volume>
c0004cfa:	89 c5                	mov    ebp,eax
c0004cfc:	85 c0                	test   eax,eax
c0004cfe:	0f 85 e6 03 00 00    	jne    c00050ea <f_open+0x42c>
c0004d04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d08:	bd 11 00 00 00       	mov    ebp,0x11
c0004d0d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d11:	83 ec 0c             	sub    esp,0xc
c0004d14:	68 60 04 00 00       	push   0x460
c0004d19:	e8 a3 34 00 00       	call   c00081c1 <ff_memalloc>
c0004d1e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004d22:	83 c4 10             	add    esp,0x10
c0004d25:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004d2a:	0f 84 c0 03 00 00    	je     c00050f0 <f_open+0x432>
c0004d30:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004d38:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004d3e:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004d41:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004d44:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004d4b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d4f:	e8 40 fe ff ff       	call   c0004b94 <follow_path>
c0004d54:	89 c5                	mov    ebp,eax
c0004d56:	85 c0                	test   eax,eax
c0004d58:	75 0c                	jne    c0004d66 <f_open+0xa8>
c0004d5a:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004d5f:	79 05                	jns    c0004d66 <f_open+0xa8>
c0004d61:	bd 06 00 00 00       	mov    ebp,0x6
c0004d66:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004d6c:	0f 84 84 01 00 00    	je     c0004ef6 <f_open+0x238>
c0004d72:	85 ed                	test   ebp,ebp
c0004d74:	74 20                	je     c0004d96 <f_open+0xd8>
c0004d76:	83 fd 04             	cmp    ebp,0x4
c0004d79:	0f 85 58 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004d7f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d83:	83 ce 08             	or     esi,0x8
c0004d86:	e8 8a f2 ff ff       	call   c0004015 <dir_register>
c0004d8b:	89 c5                	mov    ebp,eax
c0004d8d:	85 c0                	test   eax,eax
c0004d8f:	74 2f                	je     c0004dc0 <f_open+0x102>
c0004d91:	e9 41 03 00 00       	jmp    c00050d7 <f_open+0x419>
c0004d96:	bd 07 00 00 00       	mov    ebp,0x7
c0004d9b:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004da0:	0f 85 31 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004da6:	bd 08 00 00 00       	mov    ebp,0x8
c0004dab:	f7 c7 04 00 00 00    	test   edi,0x4
c0004db1:	0f 85 20 03 00 00    	jne    c00050d7 <f_open+0x419>
c0004db7:	83 e7 08             	and    edi,0x8
c0004dba:	0f 84 65 01 00 00    	je     c0004f25 <f_open+0x267>
c0004dc0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004dc4:	8a 02                	mov    al,BYTE PTR [edx]
c0004dc6:	3c 04                	cmp    al,0x4
c0004dc8:	0f 85 97 00 00 00    	jne    c0004e65 <f_open+0x1a7>
c0004dce:	8d 42 10             	lea    eax,[edx+0x10]
c0004dd1:	89 13                	mov    DWORD PTR [ebx],edx
c0004dd3:	89 da                	mov    edx,ebx
c0004dd5:	e8 80 fd ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004dda:	31 d2                	xor    edx,edx
c0004ddc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004de0:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004de5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004de8:	83 c0 02             	add    eax,0x2
c0004deb:	e8 32 cc ff ff       	call   c0001a22 <mem_set>
c0004df0:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004df5:	31 d2                	xor    edx,edx
c0004df7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dfb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004dfe:	83 c0 26             	add    eax,0x26
c0004e01:	e8 1c cc ff ff       	call   c0001a22 <mem_set>
c0004e06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e0a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004e0d:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004e11:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e16:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e19:	83 c0 08             	add    eax,0x8
c0004e1c:	e8 e3 cb ff ff       	call   c0001a04 <st_dword>
c0004e21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e25:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e28:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004e2c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e30:	e8 b7 ea ff ff       	call   c00038ec <store_xdir>
c0004e35:	89 c5                	mov    ebp,eax
c0004e37:	85 c0                	test   eax,eax
c0004e39:	0f 85 98 02 00 00    	jne    c00050d7 <f_open+0x419>
c0004e3f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004e42:	85 d2                	test   edx,edx
c0004e44:	0f 84 db 00 00 00    	je     c0004f25 <f_open+0x267>
c0004e4a:	31 c9                	xor    ecx,ecx
c0004e4c:	89 d8                	mov    eax,ebx
c0004e4e:	e8 8e e3 ff ff       	call   c00031e1 <remove_chain>
c0004e53:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e57:	89 c5                	mov    ebp,eax
c0004e59:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004e5c:	48                   	dec    eax
c0004e5d:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004e60:	e9 b8 00 00 00       	jmp    c0004f1d <f_open+0x25f>
c0004e65:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004e69:	89 ea                	mov    edx,ebp
c0004e6b:	e8 99 fc ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004e70:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e75:	89 c7                	mov    edi,eax
c0004e77:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004e7a:	e8 85 cb ff ff       	call   c0001a04 <st_dword>
c0004e7f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e83:	31 c9                	xor    ecx,ecx
c0004e85:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004e89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e8d:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004e91:	e8 9c fc ff ff       	call   c0004b32 <st_clust.isra.1>
c0004e96:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004e9a:	31 d2                	xor    edx,edx
c0004e9c:	83 c0 1c             	add    eax,0x1c
c0004e9f:	e8 60 cb ff ff       	call   c0001a04 <st_dword>
c0004ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ea8:	85 ff                	test   edi,edi
c0004eaa:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004eae:	74 75                	je     c0004f25 <f_open+0x267>
c0004eb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb4:	31 c9                	xor    ecx,ecx
c0004eb6:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004eb9:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ec0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ec4:	89 fa                	mov    edx,edi
c0004ec6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004eca:	e8 12 e3 ff ff       	call   c00031e1 <remove_chain>
c0004ecf:	89 c5                	mov    ebp,eax
c0004ed1:	85 c0                	test   eax,eax
c0004ed3:	0f 85 fe 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004ed9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004edd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ee5:	4f                   	dec    edi
c0004ee6:	e8 81 d2 ff ff       	call   c000216c <move_window>
c0004eeb:	89 c5                	mov    ebp,eax
c0004eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ef1:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004ef4:	eb 27                	jmp    c0004f1d <f_open+0x25f>
c0004ef6:	85 ed                	test   ebp,ebp
c0004ef8:	0f 85 d9 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004efe:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004f02:	bd 04 00 00 00       	mov    ebp,0x4
c0004f07:	a8 10                	test   al,0x10
c0004f09:	0f 85 c8 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f0f:	83 e7 02             	and    edi,0x2
c0004f12:	74 11                	je     c0004f25 <f_open+0x267>
c0004f14:	bd 07 00 00 00       	mov    ebp,0x7
c0004f19:	a8 01                	test   al,0x1
c0004f1b:	eb 02                	jmp    c0004f1f <f_open+0x261>
c0004f1d:	85 ed                	test   ebp,ebp
c0004f1f:	0f 85 b2 01 00 00    	jne    c00050d7 <f_open+0x419>
c0004f25:	f7 c6 08 00 00 00    	test   esi,0x8
c0004f2b:	74 03                	je     c0004f30 <f_open+0x272>
c0004f2d:	83 ce 40             	or     esi,0x40
c0004f30:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004f34:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004f37:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004f3a:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004f3d:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004f40:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004f44:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004f47:	8a 02                	mov    al,BYTE PTR [edx]
c0004f49:	3c 04                	cmp    al,0x4
c0004f4b:	75 2a                	jne    c0004f77 <f_open+0x2b9>
c0004f4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004f51:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0004f56:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004f59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004f5d:	30 c0                	xor    al,al
c0004f5f:	09 c8                	or     eax,ecx
c0004f61:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004f64:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0004f68:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004f6b:	8d 42 10             	lea    eax,[edx+0x10]
c0004f6e:	89 da                	mov    edx,ebx
c0004f70:	e8 e5 fb ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0004f75:	eb 1c                	jmp    c0004f93 <f_open+0x2d5>
c0004f77:	89 fa                	mov    edx,edi
c0004f79:	e8 8b fb ff ff       	call   c0004b09 <ld_clust.isra.0>
c0004f7e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f81:	8d 47 1c             	lea    eax,[edi+0x1c]
c0004f84:	e8 12 ca ff ff       	call   c000199b <ld_dword>
c0004f89:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0004f90:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004f93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f97:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0004f9e:	89 03                	mov    DWORD PTR [ebx],eax
c0004fa0:	31 d2                	xor    edx,edx
c0004fa2:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004fa6:	b9 00 02 00 00       	mov    ecx,0x200
c0004fab:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004faf:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0004fb3:	89 f0                	mov    eax,esi
c0004fb5:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0004fbc:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0004fbf:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0004fc6:	8d 43 50             	lea    eax,[ebx+0x50]
c0004fc9:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0004fd0:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0004fd7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004fdb:	e8 42 ca ff ff       	call   c0001a22 <mem_set>
c0004fe0:	83 e6 20             	and    esi,0x20
c0004fe3:	75 07                	jne    c0004fec <f_open+0x32e>
c0004fe5:	31 ed                	xor    ebp,ebp
c0004fe7:	e9 eb 00 00 00       	jmp    c00050d7 <f_open+0x419>
c0004fec:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004fef:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0004ff2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004ff6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004ffa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ffe:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005002:	74 e1                	je     c0004fe5 <f_open+0x327>
c0005004:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005008:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000500c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000500f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005012:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005016:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005019:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c000501d:	31 ff                	xor    edi,edi
c000501f:	c1 e5 09             	shl    ebp,0x9
c0005022:	89 ee                	mov    esi,ebp
c0005024:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0005028:	89 f8                	mov    eax,edi
c000502a:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c000502e:	73 22                	jae    c0005052 <f_open+0x394>
c0005030:	89 d8                	mov    eax,ebx
c0005032:	e8 bd dc ff ff       	call   c0002cf4 <get_fat>
c0005037:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000503b:	89 c2                	mov    edx,eax
c000503d:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005041:	83 f8 01             	cmp    eax,0x1
c0005044:	76 10                	jbe    c0005056 <f_open+0x398>
c0005046:	83 f8 ff             	cmp    eax,0xffffffff
c0005049:	75 d9                	jne    c0005024 <f_open+0x366>
c000504b:	bd 01 00 00 00       	mov    ebp,0x1
c0005050:	eb 09                	jmp    c000505b <f_open+0x39d>
c0005052:	31 ed                	xor    ebp,ebp
c0005054:	eb 05                	jmp    c000505b <f_open+0x39d>
c0005056:	bd 02 00 00 00       	mov    ebp,0x2
c000505b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000505e:	85 ed                	test   ebp,ebp
c0005060:	75 75                	jne    c00050d7 <f_open+0x419>
c0005062:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005066:	25 ff 01 00 00       	and    eax,0x1ff
c000506b:	0f 84 74 ff ff ff    	je     c0004fe5 <f_open+0x327>
c0005071:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005075:	bd 02 00 00 00       	mov    ebp,0x2
c000507a:	89 c8                	mov    eax,ecx
c000507c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005080:	e8 a2 cb ff ff       	call   c0001c27 <clst2sect>
c0005085:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005089:	89 d7                	mov    edi,edx
c000508b:	09 c7                	or     edi,eax
c000508d:	74 48                	je     c00050d7 <f_open+0x419>
c000508f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005093:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005097:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000509f:	0f ac fe 09          	shrd   esi,edi,0x9
c00050a3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00050a7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00050ab:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00050ae:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00050b2:	83 ec 0c             	sub    esp,0xc
c00050b5:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00050b8:	6a 01                	push   0x1
c00050ba:	52                   	push   edx
c00050bb:	50                   	push   eax
c00050bc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00050c0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00050c4:	50                   	push   eax
c00050c5:	e8 79 c8 ff ff       	call   c0001943 <disk_read>
c00050ca:	83 c4 20             	add    esp,0x20
c00050cd:	85 c0                	test   eax,eax
c00050cf:	0f 95 c0             	setne  al
c00050d2:	0f b6 c0             	movzx  eax,al
c00050d5:	89 c5                	mov    ebp,eax
c00050d7:	83 ec 0c             	sub    esp,0xc
c00050da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00050de:	e8 f4 30 00 00       	call   c00081d7 <ff_memfree>
c00050e3:	83 c4 10             	add    esp,0x10
c00050e6:	85 ed                	test   ebp,ebp
c00050e8:	74 06                	je     c00050f0 <f_open+0x432>
c00050ea:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00050f0:	83 c4 7c             	add    esp,0x7c
c00050f3:	89 e8                	mov    eax,ebp
c00050f5:	5b                   	pop    ebx
c00050f6:	5e                   	pop    esi
c00050f7:	5f                   	pop    edi
c00050f8:	5d                   	pop    ebp
c00050f9:	c3                   	ret    

c00050fa <f_read>:
c00050fa:	55                   	push   ebp
c00050fb:	57                   	push   edi
c00050fc:	56                   	push   esi
c00050fd:	53                   	push   ebx
c00050fe:	83 ec 2c             	sub    esp,0x2c
c0005101:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005105:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005109:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000510f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005113:	89 d8                	mov    eax,ebx
c0005115:	e8 77 cf ff ff       	call   c0002091 <validate>
c000511a:	89 c5                	mov    ebp,eax
c000511c:	85 c0                	test   eax,eax
c000511e:	0f 85 4c 02 00 00    	jne    c0005370 <f_read+0x276>
c0005124:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0005128:	85 ed                	test   ebp,ebp
c000512a:	0f 85 40 02 00 00    	jne    c0005370 <f_read+0x276>
c0005130:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005134:	0f 84 31 02 00 00    	je     c000536b <f_read+0x271>
c000513a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000513d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005140:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005143:	bf 00 00 00 00       	mov    edi,0x0
c0005148:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000514b:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c000514f:	89 d1                	mov    ecx,edx
c0005151:	19 f9                	sbb    ecx,edi
c0005153:	0f 83 cf 00 00 00    	jae    c0005228 <f_read+0x12e>
c0005159:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000515d:	e9 c6 00 00 00       	jmp    c0005228 <f_read+0x12e>
c0005162:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005165:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005168:	89 d0                	mov    eax,edx
c000516a:	25 ff 01 00 00       	and    eax,0x1ff
c000516f:	0f 85 c9 01 00 00    	jne    c000533e <f_read+0x244>
c0005175:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005179:	89 d6                	mov    esi,edx
c000517b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000517f:	89 cf                	mov    edi,ecx
c0005181:	48                   	dec    eax
c0005182:	0f ac fe 09          	shrd   esi,edi,0x9
c0005186:	21 f0                	and    eax,esi
c0005188:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000518c:	0f 84 a6 00 00 00    	je     c0005238 <f_read+0x13e>
c0005192:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005196:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005199:	89 c8                	mov    eax,ecx
c000519b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000519e:	e8 84 ca ff ff       	call   c0001c27 <clst2sect>
c00051a3:	89 d7                	mov    edi,edx
c00051a5:	09 c7                	or     edi,eax
c00051a7:	0f 84 b4 00 00 00    	je     c0005261 <f_read+0x167>
c00051ad:	31 ff                	xor    edi,edi
c00051af:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00051b3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00051b6:	01 c6                	add    esi,eax
c00051b8:	11 d7                	adc    edi,edx
c00051ba:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00051c2:	0f 86 fd 00 00 00    	jbe    c00052c5 <f_read+0x1cb>
c00051c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00051cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00051d0:	c1 e8 09             	shr    eax,0x9
c00051d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00051d6:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00051da:	03 14 24             	add    edx,DWORD PTR [esp]
c00051dd:	39 c2                	cmp    edx,eax
c00051df:	76 07                	jbe    c00051e8 <f_read+0xee>
c00051e1:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00051e5:	89 04 24             	mov    DWORD PTR [esp],eax
c00051e8:	83 ec 0c             	sub    esp,0xc
c00051eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00051ef:	57                   	push   edi
c00051f0:	56                   	push   esi
c00051f1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00051f5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00051f9:	50                   	push   eax
c00051fa:	e8 44 c7 ff ff       	call   c0001943 <disk_read>
c00051ff:	83 c4 20             	add    esp,0x20
c0005202:	85 c0                	test   eax,eax
c0005204:	75 6e                	jne    c0005274 <f_read+0x17a>
c0005206:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000520a:	78 7e                	js     c000528a <f_read+0x190>
c000520c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000520f:	c1 e6 09             	shl    esi,0x9
c0005212:	31 ff                	xor    edi,edi
c0005214:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005218:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000521c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0005220:	01 30                	add    DWORD PTR [eax],esi
c0005222:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c0005225:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0005228:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000522d:	0f 85 2f ff ff ff    	jne    c0005162 <f_read+0x68>
c0005233:	e9 38 01 00 00       	jmp    c0005370 <f_read+0x276>
c0005238:	89 c8                	mov    eax,ecx
c000523a:	09 d0                	or     eax,edx
c000523c:	75 05                	jne    c0005243 <f_read+0x149>
c000523e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005241:	eb 19                	jmp    c000525c <f_read+0x162>
c0005243:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c0005247:	74 09                	je     c0005252 <f_read+0x158>
c0005249:	89 d8                	mov    eax,ebx
c000524b:	e8 f8 c9 ff ff       	call   c0001c48 <clmt_clust>
c0005250:	eb 0a                	jmp    c000525c <f_read+0x162>
c0005252:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005255:	89 d8                	mov    eax,ebx
c0005257:	e8 98 da ff ff       	call   c0002cf4 <get_fat>
c000525c:	83 f8 01             	cmp    eax,0x1
c000525f:	77 0e                	ja     c000526f <f_read+0x175>
c0005261:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005265:	bd 02 00 00 00       	mov    ebp,0x2
c000526a:	e9 01 01 00 00       	jmp    c0005370 <f_read+0x276>
c000526f:	83 f8 ff             	cmp    eax,0xffffffff
c0005272:	75 0e                	jne    c0005282 <f_read+0x188>
c0005274:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005278:	bd 01 00 00 00       	mov    ebp,0x1
c000527d:	e9 ee 00 00 00       	jmp    c0005370 <f_read+0x276>
c0005282:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005285:	e9 08 ff ff ff       	jmp    c0005192 <f_read+0x98>
c000528a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000528d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005290:	29 f0                	sub    eax,esi
c0005292:	19 fa                	sbb    edx,edi
c0005294:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0005297:	89 d7                	mov    edi,edx
c0005299:	ba 00 00 00 00       	mov    edx,0x0
c000529e:	89 f9                	mov    ecx,edi
c00052a0:	19 d1                	sbb    ecx,edx
c00052a2:	0f 83 64 ff ff ff    	jae    c000520c <f_read+0x112>
c00052a8:	89 c7                	mov    edi,eax
c00052aa:	8d 53 50             	lea    edx,[ebx+0x50]
c00052ad:	c1 e7 09             	shl    edi,0x9
c00052b0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00052b4:	b9 00 02 00 00       	mov    ecx,0x200
c00052b9:	01 f8                	add    eax,edi
c00052bb:	e8 4d c7 ff ff       	call   c0001a0d <mem_cpy>
c00052c0:	e9 47 ff ff ff       	jmp    c000520c <f_read+0x112>
c00052c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00052c8:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c00052cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00052ce:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00052d2:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00052d6:	75 05                	jne    c00052dd <f_read+0x1e3>
c00052d8:	39 34 24             	cmp    DWORD PTR [esp],esi
c00052db:	74 5b                	je     c0005338 <f_read+0x23e>
c00052dd:	8d 43 50             	lea    eax,[ebx+0x50]
c00052e0:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00052e8:	79 2a                	jns    c0005314 <f_read+0x21a>
c00052ea:	83 ec 0c             	sub    esp,0xc
c00052ed:	6a 01                	push   0x1
c00052ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00052f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00052fb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00052ff:	50                   	push   eax
c0005300:	e8 54 c6 ff ff       	call   c0001959 <disk_write>
c0005305:	83 c4 20             	add    esp,0x20
c0005308:	85 c0                	test   eax,eax
c000530a:	0f 85 64 ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005310:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005314:	83 ec 0c             	sub    esp,0xc
c0005317:	6a 01                	push   0x1
c0005319:	57                   	push   edi
c000531a:	56                   	push   esi
c000531b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000531f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005323:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005327:	50                   	push   eax
c0005328:	e8 16 c6 ff ff       	call   c0001943 <disk_read>
c000532d:	83 c4 20             	add    esp,0x20
c0005330:	85 c0                	test   eax,eax
c0005332:	0f 85 3c ff ff ff    	jne    c0005274 <f_read+0x17a>
c0005338:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000533b:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000533e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005341:	ba 00 02 00 00       	mov    edx,0x200
c0005346:	25 ff 01 00 00       	and    eax,0x1ff
c000534b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000534f:	29 c2                	sub    edx,eax
c0005351:	39 d6                	cmp    esi,edx
c0005353:	76 02                	jbe    c0005357 <f_read+0x25d>
c0005355:	89 d6                	mov    esi,edx
c0005357:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000535b:	89 f1                	mov    ecx,esi
c000535d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005361:	e8 a7 c6 ff ff       	call   c0001a0d <mem_cpy>
c0005366:	e9 a7 fe ff ff       	jmp    c0005212 <f_read+0x118>
c000536b:	bd 07 00 00 00       	mov    ebp,0x7
c0005370:	83 c4 2c             	add    esp,0x2c
c0005373:	89 e8                	mov    eax,ebp
c0005375:	5b                   	pop    ebx
c0005376:	5e                   	pop    esi
c0005377:	5f                   	pop    edi
c0005378:	5d                   	pop    ebp
c0005379:	c3                   	ret    

c000537a <f_write>:
c000537a:	55                   	push   ebp
c000537b:	57                   	push   edi
c000537c:	56                   	push   esi
c000537d:	53                   	push   ebx
c000537e:	83 ec 2c             	sub    esp,0x2c
c0005381:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005385:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005389:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000538f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005393:	89 d8                	mov    eax,ebx
c0005395:	e8 f7 cc ff ff       	call   c0002091 <validate>
c000539a:	89 c5                	mov    ebp,eax
c000539c:	85 c0                	test   eax,eax
c000539e:	0f 85 86 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053a4:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053a8:	85 ed                	test   ebp,ebp
c00053aa:	0f 85 7a 02 00 00    	jne    c000562a <f_write+0x2b0>
c00053b0:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00053b4:	0f 84 6b 02 00 00    	je     c0005625 <f_write+0x2ab>
c00053ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053be:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00053c1:	0f 84 43 01 00 00    	je     c000550a <f_write+0x190>
c00053c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053ca:	89 c1                	mov    ecx,eax
c00053cc:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00053d0:	0f 83 34 01 00 00    	jae    c000550a <f_write+0x190>
c00053d6:	f7 d0                	not    eax
c00053d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00053dc:	e9 29 01 00 00       	jmp    c000550a <f_write+0x190>
c00053e1:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00053e4:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00053e7:	89 d0                	mov    eax,edx
c00053e9:	25 ff 01 00 00       	and    eax,0x1ff
c00053ee:	0f 85 00 02 00 00    	jne    c00055f4 <f_write+0x27a>
c00053f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053f8:	89 d6                	mov    esi,edx
c00053fa:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00053fe:	89 cf                	mov    edi,ecx
c0005400:	48                   	dec    eax
c0005401:	0f ac fe 09          	shrd   esi,edi,0x9
c0005405:	21 f0                	and    eax,esi
c0005407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000540b:	0f 84 06 01 00 00    	je     c0005517 <f_write+0x19d>
c0005411:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005415:	0f 88 6e 01 00 00    	js     c0005589 <f_write+0x20f>
c000541b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000541f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005422:	89 c8                	mov    eax,ecx
c0005424:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0005428:	e8 fa c7 ff ff       	call   c0001c27 <clst2sect>
c000542d:	89 d1                	mov    ecx,edx
c000542f:	09 c1                	or     ecx,eax
c0005431:	0f 84 1c 01 00 00    	je     c0005553 <f_write+0x1d9>
c0005437:	31 ff                	xor    edi,edi
c0005439:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000543d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005441:	01 c6                	add    esi,eax
c0005443:	11 d7                	adc    edi,edx
c0005445:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c000544d:	0f 86 63 01 00 00    	jbe    c00055b6 <f_write+0x23c>
c0005453:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000545b:	c1 e8 09             	shr    eax,0x9
c000545e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005462:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005466:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000546a:	39 c2                	cmp    edx,eax
c000546c:	76 08                	jbe    c0005476 <f_write+0xfc>
c000546e:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005472:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005476:	83 ec 0c             	sub    esp,0xc
c0005479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000547d:	57                   	push   edi
c000547e:	56                   	push   esi
c000547f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005483:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005487:	50                   	push   eax
c0005488:	e8 cc c4 ff ff       	call   c0001959 <disk_write>
c000548d:	83 c4 20             	add    esp,0x20
c0005490:	85 c0                	test   eax,eax
c0005492:	0f 85 ce 00 00 00    	jne    c0005566 <f_write+0x1ec>
c0005498:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000549b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000549e:	29 f0                	sub    eax,esi
c00054a0:	19 fa                	sbb    edx,edi
c00054a2:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00054a6:	89 d7                	mov    edi,edx
c00054a8:	ba 00 00 00 00       	mov    edx,0x0
c00054ad:	89 f9                	mov    ecx,edi
c00054af:	19 d1                	sbb    ecx,edx
c00054b1:	73 1c                	jae    c00054cf <f_write+0x155>
c00054b3:	89 c7                	mov    edi,eax
c00054b5:	b9 00 02 00 00       	mov    ecx,0x200
c00054ba:	c1 e7 09             	shl    edi,0x9
c00054bd:	8d 43 50             	lea    eax,[ebx+0x50]
c00054c0:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c00054c4:	89 fa                	mov    edx,edi
c00054c6:	e8 42 c5 ff ff       	call   c0001a0d <mem_cpy>
c00054cb:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00054cf:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00054d3:	c1 e6 09             	shl    esi,0x9
c00054d6:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054da:	31 ff                	xor    edi,edi
c00054dc:	01 30                	add    DWORD PTR [eax],esi
c00054de:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054e2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054e6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00054e9:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00054ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00054ef:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00054f2:	89 c1                	mov    ecx,eax
c00054f4:	39 f2                	cmp    edx,esi
c00054f6:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00054f9:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00054fc:	19 f9                	sbb    ecx,edi
c00054fe:	73 04                	jae    c0005504 <f_write+0x18a>
c0005500:	89 f2                	mov    edx,esi
c0005502:	89 f8                	mov    eax,edi
c0005504:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0005507:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000550a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000550f:	0f 85 cc fe ff ff    	jne    c00053e1 <f_write+0x67>
c0005515:	eb 2e                	jmp    c0005545 <f_write+0x1cb>
c0005517:	89 c8                	mov    eax,ecx
c0005519:	09 d0                	or     eax,edx
c000551b:	75 0b                	jne    c0005528 <f_write+0x1ae>
c000551d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005520:	31 d2                	xor    edx,edx
c0005522:	85 c0                	test   eax,eax
c0005524:	75 28                	jne    c000554e <f_write+0x1d4>
c0005526:	eb 12                	jmp    c000553a <f_write+0x1c0>
c0005528:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000552c:	74 09                	je     c0005537 <f_write+0x1bd>
c000552e:	89 d8                	mov    eax,ebx
c0005530:	e8 13 c7 ff ff       	call   c0001c48 <clmt_clust>
c0005535:	eb 0a                	jmp    c0005541 <f_write+0x1c7>
c0005537:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000553a:	89 d8                	mov    eax,ebx
c000553c:	e8 a1 da ff ff       	call   c0002fe2 <create_chain>
c0005541:	85 c0                	test   eax,eax
c0005543:	75 09                	jne    c000554e <f_write+0x1d4>
c0005545:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005549:	e9 dc 00 00 00       	jmp    c000562a <f_write+0x2b0>
c000554e:	83 f8 01             	cmp    eax,0x1
c0005551:	75 0e                	jne    c0005561 <f_write+0x1e7>
c0005553:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005557:	bd 02 00 00 00       	mov    ebp,0x2
c000555c:	e9 c9 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005561:	83 f8 ff             	cmp    eax,0xffffffff
c0005564:	75 0e                	jne    c0005574 <f_write+0x1fa>
c0005566:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000556a:	bd 01 00 00 00       	mov    ebp,0x1
c000556f:	e9 b6 00 00 00       	jmp    c000562a <f_write+0x2b0>
c0005574:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005577:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000557b:	0f 85 90 fe ff ff    	jne    c0005411 <f_write+0x97>
c0005581:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005584:	e9 88 fe ff ff       	jmp    c0005411 <f_write+0x97>
c0005589:	83 ec 0c             	sub    esp,0xc
c000558c:	8d 43 50             	lea    eax,[ebx+0x50]
c000558f:	6a 01                	push   0x1
c0005591:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005594:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005597:	50                   	push   eax
c0005598:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000559c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055a0:	50                   	push   eax
c00055a1:	e8 b3 c3 ff ff       	call   c0001959 <disk_write>
c00055a6:	83 c4 20             	add    esp,0x20
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 b9                	jne    c0005566 <f_write+0x1ec>
c00055ad:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055b1:	e9 65 fe ff ff       	jmp    c000541b <f_write+0xa1>
c00055b6:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c00055b9:	75 05                	jne    c00055c0 <f_write+0x246>
c00055bb:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c00055be:	74 2e                	je     c00055ee <f_write+0x274>
c00055c0:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00055c3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00055c6:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c00055c9:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c00055cc:	73 20                	jae    c00055ee <f_write+0x274>
c00055ce:	83 ec 0c             	sub    esp,0xc
c00055d1:	8d 43 50             	lea    eax,[ebx+0x50]
c00055d4:	6a 01                	push   0x1
c00055d6:	57                   	push   edi
c00055d7:	56                   	push   esi
c00055d8:	50                   	push   eax
c00055d9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055dd:	50                   	push   eax
c00055de:	e8 60 c3 ff ff       	call   c0001943 <disk_read>
c00055e3:	83 c4 20             	add    esp,0x20
c00055e6:	85 c0                	test   eax,eax
c00055e8:	0f 85 78 ff ff ff    	jne    c0005566 <f_write+0x1ec>
c00055ee:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055f1:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055f4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055f7:	ba 00 02 00 00       	mov    edx,0x200
c00055fc:	25 ff 01 00 00       	and    eax,0x1ff
c0005601:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005605:	29 c2                	sub    edx,eax
c0005607:	39 d6                	cmp    esi,edx
c0005609:	76 02                	jbe    c000560d <f_write+0x293>
c000560b:	89 d6                	mov    esi,edx
c000560d:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c0005611:	89 f1                	mov    ecx,esi
c0005613:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005617:	e8 f1 c3 ff ff       	call   c0001a0d <mem_cpy>
c000561c:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c0005620:	e9 b1 fe ff ff       	jmp    c00054d6 <f_write+0x15c>
c0005625:	bd 07 00 00 00       	mov    ebp,0x7
c000562a:	83 c4 2c             	add    esp,0x2c
c000562d:	89 e8                	mov    eax,ebp
c000562f:	5b                   	pop    ebx
c0005630:	5e                   	pop    esi
c0005631:	5f                   	pop    edi
c0005632:	5d                   	pop    ebp
c0005633:	c3                   	ret    

c0005634 <f_sync>:
c0005634:	56                   	push   esi
c0005635:	53                   	push   ebx
c0005636:	83 ec 64             	sub    esp,0x64
c0005639:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c000563d:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005641:	89 d8                	mov    eax,ebx
c0005643:	e8 49 ca ff ff       	call   c0002091 <validate>
c0005648:	85 c0                	test   eax,eax
c000564a:	0f 85 ba 01 00 00    	jne    c000580a <f_sync+0x1d6>
c0005650:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005653:	f6 c2 40             	test   dl,0x40
c0005656:	0f 84 ae 01 00 00    	je     c000580a <f_sync+0x1d6>
c000565c:	84 d2                	test   dl,dl
c000565e:	79 33                	jns    c0005693 <f_sync+0x5f>
c0005660:	83 ec 0c             	sub    esp,0xc
c0005663:	8d 43 50             	lea    eax,[ebx+0x50]
c0005666:	6a 01                	push   0x1
c0005668:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000566b:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000566e:	50                   	push   eax
c000566f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005673:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005677:	50                   	push   eax
c0005678:	e8 dc c2 ff ff       	call   c0001959 <disk_write>
c000567d:	83 c4 20             	add    esp,0x20
c0005680:	89 c2                	mov    edx,eax
c0005682:	b8 01 00 00 00       	mov    eax,0x1
c0005687:	85 d2                	test   edx,edx
c0005689:	0f 85 7b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c000568f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005697:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000569a:	0f 85 11 01 00 00    	jne    c00057b1 <f_sync+0x17d>
c00056a0:	89 d8                	mov    eax,ebx
c00056a2:	e8 13 d6 ff ff       	call   c0002cba <fill_first_frag>
c00056a7:	85 c0                	test   eax,eax
c00056a9:	0f 85 5b 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056af:	83 c9 ff             	or     ecx,0xffffffff
c00056b2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056b5:	89 d8                	mov    eax,ebx
c00056b7:	e8 c9 d5 ff ff       	call   c0002c85 <fill_last_frag>
c00056bc:	85 c0                	test   eax,eax
c00056be:	0f 85 46 01 00 00    	jne    c000580a <f_sync+0x1d6>
c00056c4:	83 ec 0c             	sub    esp,0xc
c00056c7:	68 60 04 00 00       	push   0x460
c00056cc:	e8 f0 2a 00 00       	call   c00081c1 <ff_memalloc>
c00056d1:	83 c4 10             	add    esp,0x10
c00056d4:	89 c6                	mov    esi,eax
c00056d6:	b8 11 00 00 00       	mov    eax,0x11
c00056db:	85 f6                	test   esi,esi
c00056dd:	0f 84 27 01 00 00    	je     c000580a <f_sync+0x1d6>
c00056e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00056e7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00056ed:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00056f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00056f3:	89 da                	mov    edx,ebx
c00056f5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00056f9:	e8 af df ff ff       	call   c00036ad <load_obj_xdir>
c00056fe:	85 c0                	test   eax,eax
c0005700:	0f 85 95 00 00 00    	jne    c000579b <f_sync+0x167>
c0005706:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000570a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000570d:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c0005711:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c0005714:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c0005717:	83 ca 01             	or     edx,0x1
c000571a:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c000571d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005720:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005723:	83 c0 34             	add    eax,0x34
c0005726:	e8 d9 c2 ff ff       	call   c0001a04 <st_dword>
c000572b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000572f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005732:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005735:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005738:	83 c0 38             	add    eax,0x38
c000573b:	e8 c7 c2 ff ff       	call   c0001a07 <st_qword>
c0005740:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005743:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005747:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000574a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000574d:	83 c0 28             	add    eax,0x28
c0005750:	e8 b2 c2 ff ff       	call   c0001a07 <st_qword>
c0005755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005759:	ba 00 00 21 50       	mov    edx,0x50210000
c000575e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005761:	83 c0 0c             	add    eax,0xc
c0005764:	e8 9b c2 ff ff       	call   c0001a04 <st_dword>
c0005769:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000576d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005770:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005774:	31 d2                	xor    edx,edx
c0005776:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005779:	83 c0 10             	add    eax,0x10
c000577c:	e8 83 c2 ff ff       	call   c0001a04 <st_dword>
c0005781:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005785:	e8 62 e1 ff ff       	call   c00038ec <store_xdir>
c000578a:	85 c0                	test   eax,eax
c000578c:	75 0d                	jne    c000579b <f_sync+0x167>
c000578e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005792:	e8 00 eb ff ff       	call   c0004297 <sync_fs>
c0005797:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000579b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000579f:	83 ec 0c             	sub    esp,0xc
c00057a2:	56                   	push   esi
c00057a3:	e8 2f 2a 00 00       	call   c00081d7 <ff_memfree>
c00057a8:	83 c4 10             	add    esp,0x10
c00057ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057af:	eb 59                	jmp    c000580a <f_sync+0x1d6>
c00057b1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00057b4:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00057b7:	e8 b0 c9 ff ff       	call   c000216c <move_window>
c00057bc:	85 c0                	test   eax,eax
c00057be:	75 4a                	jne    c000580a <f_sync+0x1d6>
c00057c0:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c00057c3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00057c7:	89 f2                	mov    edx,esi
c00057c9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00057cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00057ce:	e8 5f f3 ff ff       	call   c0004b32 <st_clust.isra.1>
c00057d3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057d6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00057d9:	e8 26 c2 ff ff       	call   c0001a04 <st_dword>
c00057de:	8d 46 16             	lea    eax,[esi+0x16]
c00057e1:	ba 00 00 21 50       	mov    edx,0x50210000
c00057e6:	e8 19 c2 ff ff       	call   c0001a04 <st_dword>
c00057eb:	8d 46 12             	lea    eax,[esi+0x12]
c00057ee:	31 d2                	xor    edx,edx
c00057f0:	e8 0b c2 ff ff       	call   c0001a00 <st_word>
c00057f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057f9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00057fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005801:	e8 91 ea ff ff       	call   c0004297 <sync_fs>
c0005806:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c000580a:	83 c4 64             	add    esp,0x64
c000580d:	5b                   	pop    ebx
c000580e:	5e                   	pop    esi
c000580f:	c3                   	ret    

c0005810 <f_close>:
c0005810:	53                   	push   ebx
c0005811:	83 ec 24             	sub    esp,0x24
c0005814:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005818:	53                   	push   ebx
c0005819:	e8 16 fe ff ff       	call   c0005634 <f_sync>
c000581e:	83 c4 10             	add    esp,0x10
c0005821:	85 c0                	test   eax,eax
c0005823:	75 15                	jne    c000583a <f_close+0x2a>
c0005825:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005829:	89 d8                	mov    eax,ebx
c000582b:	e8 61 c8 ff ff       	call   c0002091 <validate>
c0005830:	85 c0                	test   eax,eax
c0005832:	75 06                	jne    c000583a <f_close+0x2a>
c0005834:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000583a:	83 c4 18             	add    esp,0x18
c000583d:	5b                   	pop    ebx
c000583e:	c3                   	ret    

c000583f <f_lseek>:
c000583f:	55                   	push   ebp
c0005840:	57                   	push   edi
c0005841:	56                   	push   esi
c0005842:	53                   	push   ebx
c0005843:	83 ec 3c             	sub    esp,0x3c
c0005846:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000584a:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c000584e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005852:	89 04 24             	mov    DWORD PTR [esp],eax
c0005855:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005859:	89 d8                	mov    eax,ebx
c000585b:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c000585f:	e8 2d c8 ff ff       	call   c0002091 <validate>
c0005864:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005868:	85 c0                	test   eax,eax
c000586a:	0f 85 7a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005870:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005874:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005878:	85 c0                	test   eax,eax
c000587a:	0f 85 6a 04 00 00    	jne    c0005cea <f_lseek+0x4ab>
c0005880:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005884:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005887:	74 0c                	je     c0005895 <f_lseek+0x56>
c0005889:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000588c:	85 c0                	test   eax,eax
c000588e:	75 1f                	jne    c00058af <f_lseek+0x70>
c0005890:	e9 b5 01 00 00       	jmp    c0005a4a <f_lseek+0x20b>
c0005895:	83 c9 ff             	or     ecx,0xffffffff
c0005898:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000589b:	89 d8                	mov    eax,ebx
c000589d:	e8 e3 d3 ff ff       	call   c0002c85 <fill_last_frag>
c00058a2:	85 c0                	test   eax,eax
c00058a4:	74 e3                	je     c0005889 <f_lseek+0x4a>
c00058a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00058aa:	e9 3b 04 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c00058af:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c00058b4:	0f 85 ac 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058ba:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c00058be:	0f 85 a2 00 00 00    	jne    c0005966 <f_lseek+0x127>
c00058c4:	8d 78 04             	lea    edi,[eax+0x4]
c00058c7:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c00058ca:	8b 00                	mov    eax,DWORD PTR [eax]
c00058cc:	be 02 00 00 00       	mov    esi,0x2
c00058d1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058d5:	85 ed                	test   ebp,ebp
c00058d7:	74 73                	je     c000594c <f_lseek+0x10d>
c00058d9:	89 e9                	mov    ecx,ebp
c00058db:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00058e2:	ff 04 24             	inc    DWORD PTR [esp]
c00058e5:	89 ca                	mov    edx,ecx
c00058e7:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00058eb:	89 d8                	mov    eax,ebx
c00058ed:	e8 02 d4 ff ff       	call   c0002cf4 <get_fat>
c00058f2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00058f6:	83 f8 01             	cmp    eax,0x1
c00058f9:	77 11                	ja     c000590c <f_lseek+0xcd>
c00058fb:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00058ff:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005907:	e9 de 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c000590c:	83 f8 ff             	cmp    eax,0xffffffff
c000590f:	75 11                	jne    c0005922 <f_lseek+0xe3>
c0005911:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005915:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c000591d:	e9 c8 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005922:	8d 51 01             	lea    edx,[ecx+0x1]
c0005925:	89 c1                	mov    ecx,eax
c0005927:	39 c2                	cmp    edx,eax
c0005929:	74 b7                	je     c00058e2 <f_lseek+0xa3>
c000592b:	83 c6 02             	add    esi,0x2
c000592e:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005932:	72 0b                	jb     c000593f <f_lseek+0x100>
c0005934:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005937:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c000593a:	89 0f                	mov    DWORD PTR [edi],ecx
c000593c:	83 c7 08             	add    edi,0x8
c000593f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005943:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005946:	76 04                	jbe    c000594c <f_lseek+0x10d>
c0005948:	89 c5                	mov    ebp,eax
c000594a:	eb 8d                	jmp    c00058d9 <f_lseek+0x9a>
c000594c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c000594f:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005953:	89 30                	mov    DWORD PTR [eax],esi
c0005955:	0f 87 87 03 00 00    	ja     c0005ce2 <f_lseek+0x4a3>
c000595b:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005961:	e9 84 03 00 00       	jmp    c0005cea <f_lseek+0x4ab>
c0005966:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005969:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000596c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005970:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005974:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005978:	39 04 24             	cmp    DWORD PTR [esp],eax
c000597b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000597f:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005983:	73 0f                	jae    c0005994 <f_lseek+0x155>
c0005985:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005988:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000598c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005990:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005998:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000599c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000599f:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00059a2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00059a6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00059aa:	0f 84 3a 03 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059b0:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00059b4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00059b8:	83 c6 ff             	add    esi,0xffffffff
c00059bb:	89 d8                	mov    eax,ebx
c00059bd:	83 d7 ff             	adc    edi,0xffffffff
c00059c0:	89 f2                	mov    edx,esi
c00059c2:	89 f9                	mov    ecx,edi
c00059c4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00059c8:	89 34 24             	mov    DWORD PTR [esp],esi
c00059cb:	e8 78 c2 ff ff       	call   c0001c48 <clmt_clust>
c00059d0:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00059d4:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00059d7:	89 c2                	mov    edx,eax
c00059d9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00059dd:	89 c8                	mov    eax,ecx
c00059df:	e8 43 c2 ff ff       	call   c0001c27 <clst2sect>
c00059e4:	89 d7                	mov    edi,edx
c00059e6:	09 c7                	or     edi,eax
c00059e8:	0f 84 0d ff ff ff    	je     c00058fb <f_lseek+0xbc>
c00059ee:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00059f2:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00059f8:	0f 84 ec 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c00059fe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005a06:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a09:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a0d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a11:	4d                   	dec    ebp
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	21 ee                	and    esi,ebp
c0005a16:	01 c6                	add    esi,eax
c0005a18:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a1b:	11 d7                	adc    edi,edx
c0005a1d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a20:	39 fa                	cmp    edx,edi
c0005a22:	75 08                	jne    c0005a2c <f_lseek+0x1ed>
c0005a24:	39 f0                	cmp    eax,esi
c0005a26:	0f 84 be 02 00 00    	je     c0005cea <f_lseek+0x4ab>
c0005a2c:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005a2f:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005a33:	0f 89 80 02 00 00    	jns    c0005cb9 <f_lseek+0x47a>
c0005a39:	83 ec 0c             	sub    esp,0xc
c0005a3c:	6a 01                	push   0x1
c0005a3e:	52                   	push   edx
c0005a3f:	50                   	push   eax
c0005a40:	55                   	push   ebp
c0005a41:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005a45:	e9 5a 02 00 00       	jmp    c0005ca4 <f_lseek+0x465>
c0005a4a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a4e:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005a51:	74 16                	je     c0005a69 <f_lseek+0x22a>
c0005a53:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005a58:	76 0f                	jbe    c0005a69 <f_lseek+0x22a>
c0005a5a:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005a61:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005a69:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a6c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005a6f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005a72:	89 c7                	mov    edi,eax
c0005a74:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005a78:	73 0d                	jae    c0005a87 <f_lseek+0x248>
c0005a7a:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005a7e:	75 07                	jne    c0005a87 <f_lseek+0x248>
c0005a80:	89 14 24             	mov    DWORD PTR [esp],edx
c0005a83:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005a87:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005a8a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005a8d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a91:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005a98:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005a9f:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005aa2:	75 09                	jne    c0005aad <f_lseek+0x26e>
c0005aa4:	31 f6                	xor    esi,esi
c0005aa6:	31 ff                	xor    edi,edi
c0005aa8:	e9 af 01 00 00       	jmp    c0005c5c <f_lseek+0x41d>
c0005aad:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005ab1:	89 d7                	mov    edi,edx
c0005ab3:	c1 e1 09             	shl    ecx,0x9
c0005ab6:	09 c7                	or     edi,eax
c0005ab8:	89 cd                	mov    ebp,ecx
c0005aba:	74 6d                	je     c0005b29 <f_lseek+0x2ea>
c0005abc:	83 c0 ff             	add    eax,0xffffffff
c0005abf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ac3:	83 d2 ff             	adc    edx,0xffffffff
c0005ac6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005ac9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005acd:	83 c0 ff             	add    eax,0xffffffff
c0005ad0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005ad4:	83 d2 ff             	adc    edx,0xffffffff
c0005ad7:	31 ff                	xor    edi,edi
c0005ad9:	57                   	push   edi
c0005ada:	51                   	push   ecx
c0005adb:	52                   	push   edx
c0005adc:	50                   	push   eax
c0005add:	e8 ea 85 01 00       	call   c001e0cc <__udivdi3>
c0005ae2:	83 c4 10             	add    esp,0x10
c0005ae5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005ae9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005aed:	57                   	push   edi
c0005aee:	55                   	push   ebp
c0005aef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005af7:	e8 d0 85 01 00       	call   c001e0cc <__udivdi3>
c0005afc:	83 c4 10             	add    esp,0x10
c0005aff:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005b03:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005b07:	19 d1                	sbb    ecx,edx
c0005b09:	72 1e                	jb     c0005b29 <f_lseek+0x2ea>
c0005b0b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005b0f:	89 e9                	mov    ecx,ebp
c0005b11:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b14:	f7 d9                	neg    ecx
c0005b16:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005b19:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005b1d:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b20:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b23:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005b27:	eb 28                	jmp    c0005b51 <f_lseek+0x312>
c0005b29:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005b2c:	85 c0                	test   eax,eax
c0005b2e:	75 1e                	jne    c0005b4e <f_lseek+0x30f>
c0005b30:	31 d2                	xor    edx,edx
c0005b32:	89 d8                	mov    eax,ebx
c0005b34:	e8 a9 d4 ff ff       	call   c0002fe2 <create_chain>
c0005b39:	83 f8 01             	cmp    eax,0x1
c0005b3c:	0f 84 b9 fd ff ff    	je     c00058fb <f_lseek+0xbc>
c0005b42:	83 f8 ff             	cmp    eax,0xffffffff
c0005b45:	0f 84 c6 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005b4b:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005b4e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005b51:	85 c0                	test   eax,eax
c0005b53:	0f 84 4b ff ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005b59:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005b5d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005b65:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005b68:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b6c:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005b6f:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005b72:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005b76:	0f 83 9d 00 00 00    	jae    c0005c19 <f_lseek+0x3da>
c0005b7c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b80:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005b84:	29 34 24             	sub    DWORD PTR [esp],esi
c0005b87:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005b8b:	01 f2                	add    edx,esi
c0005b8d:	11 f9                	adc    ecx,edi
c0005b8f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005b93:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005b97:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005b9a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005b9d:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005ba0:	f6 c1 02             	test   cl,0x2
c0005ba3:	74 35                	je     c0005bda <f_lseek+0x39b>
c0005ba5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005ba9:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005bac:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005baf:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005bb3:	73 16                	jae    c0005bcb <f_lseek+0x38c>
c0005bb5:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005bb9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005bbd:	88 ca                	mov    dl,cl
c0005bbf:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005bc2:	83 ca 40             	or     edx,0x40
c0005bc5:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005bc8:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005bcb:	89 c2                	mov    edx,eax
c0005bcd:	89 d8                	mov    eax,ebx
c0005bcf:	e8 0e d4 ff ff       	call   c0002fe2 <create_chain>
c0005bd4:	85 c0                	test   eax,eax
c0005bd6:	75 0b                	jne    c0005be3 <f_lseek+0x3a4>
c0005bd8:	eb 30                	jmp    c0005c0a <f_lseek+0x3cb>
c0005bda:	89 c2                	mov    edx,eax
c0005bdc:	89 d8                	mov    eax,ebx
c0005bde:	e8 11 d1 ff ff       	call   c0002cf4 <get_fat>
c0005be3:	83 f8 ff             	cmp    eax,0xffffffff
c0005be6:	0f 84 25 fd ff ff    	je     c0005911 <f_lseek+0xd2>
c0005bec:	83 f8 01             	cmp    eax,0x1
c0005bef:	0f 86 06 fd ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005bf5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bf9:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bfc:	0f 86 f9 fc ff ff    	jbe    c00058fb <f_lseek+0xbc>
c0005c02:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c05:	e9 5b ff ff ff       	jmp    c0005b65 <f_lseek+0x326>
c0005c0a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c19:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c1c:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c20:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c23:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c26:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c29:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c2f:	0f 84 6f fe ff ff    	je     c0005aa4 <f_lseek+0x265>
c0005c35:	89 c2                	mov    edx,eax
c0005c37:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c3b:	e8 e7 bf ff ff       	call   c0001c27 <clst2sect>
c0005c40:	89 d7                	mov    edi,edx
c0005c42:	09 c7                	or     edi,eax
c0005c44:	0f 84 b1 fc ff ff    	je     c00058fb <f_lseek+0xbc>
c0005c4a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005c4e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005c51:	0f ac fe 09          	shrd   esi,edi,0x9
c0005c55:	c1 ef 09             	shr    edi,0x9
c0005c58:	01 c6                	add    esi,eax
c0005c5a:	11 d7                	adc    edi,edx
c0005c5c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005c62:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c65:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005c68:	19 d1                	sbb    ecx,edx
c0005c6a:	73 0a                	jae    c0005c76 <f_lseek+0x437>
c0005c6c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005c6f:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005c72:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005c76:	a9 ff 01 00 00       	test   eax,0x1ff
c0005c7b:	74 6d                	je     c0005cea <f_lseek+0x4ab>
c0005c7d:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005c80:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005c83:	39 fa                	cmp    edx,edi
c0005c85:	75 04                	jne    c0005c8b <f_lseek+0x44c>
c0005c87:	39 f0                	cmp    eax,esi
c0005c89:	74 5f                	je     c0005cea <f_lseek+0x4ab>
c0005c8b:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005c8e:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005c92:	79 25                	jns    c0005cb9 <f_lseek+0x47a>
c0005c94:	83 ec 0c             	sub    esp,0xc
c0005c97:	6a 01                	push   0x1
c0005c99:	52                   	push   edx
c0005c9a:	50                   	push   eax
c0005c9b:	55                   	push   ebp
c0005c9c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005ca0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005ca4:	50                   	push   eax
c0005ca5:	e8 af bc ff ff       	call   c0001959 <disk_write>
c0005caa:	83 c4 20             	add    esp,0x20
c0005cad:	85 c0                	test   eax,eax
c0005caf:	0f 85 5c fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cb5:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005cb9:	83 ec 0c             	sub    esp,0xc
c0005cbc:	6a 01                	push   0x1
c0005cbe:	57                   	push   edi
c0005cbf:	56                   	push   esi
c0005cc0:	55                   	push   ebp
c0005cc1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cc5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cc9:	50                   	push   eax
c0005cca:	e8 74 bc ff ff       	call   c0001943 <disk_read>
c0005ccf:	83 c4 20             	add    esp,0x20
c0005cd2:	85 c0                	test   eax,eax
c0005cd4:	0f 85 37 fc ff ff    	jne    c0005911 <f_lseek+0xd2>
c0005cda:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005cdd:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005ce0:	eb 08                	jmp    c0005cea <f_lseek+0x4ab>
c0005ce2:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005cea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005cee:	83 c4 3c             	add    esp,0x3c
c0005cf1:	5b                   	pop    ebx
c0005cf2:	5e                   	pop    esi
c0005cf3:	5f                   	pop    edi
c0005cf4:	5d                   	pop    ebp
c0005cf5:	c3                   	ret    

c0005cf6 <f_opendir>:
c0005cf6:	56                   	push   esi
c0005cf7:	b8 09 00 00 00       	mov    eax,0x9
c0005cfc:	53                   	push   ebx
c0005cfd:	83 ec 24             	sub    esp,0x24
c0005d00:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d04:	85 db                	test   ebx,ebx
c0005d06:	0f 84 e6 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d0c:	31 c9                	xor    ecx,ecx
c0005d0e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d12:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d16:	e8 03 c7 ff ff       	call   c000241e <mount_volume>
c0005d1b:	85 c0                	test   eax,eax
c0005d1d:	0f 85 c9 00 00 00    	jne    c0005dec <f_opendir+0xf6>
c0005d23:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d27:	83 ec 0c             	sub    esp,0xc
c0005d2a:	89 03                	mov    DWORD PTR [ebx],eax
c0005d2c:	68 60 04 00 00       	push   0x460
c0005d31:	e8 8b 24 00 00       	call   c00081c1 <ff_memalloc>
c0005d36:	83 c4 10             	add    esp,0x10
c0005d39:	89 c6                	mov    esi,eax
c0005d3b:	b8 11 00 00 00       	mov    eax,0x11
c0005d40:	85 f6                	test   esi,esi
c0005d42:	0f 84 aa 00 00 00    	je     c0005df2 <f_opendir+0xfc>
c0005d48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d4c:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005d52:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005d55:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005d58:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005d5c:	89 d8                	mov    eax,ebx
c0005d5e:	e8 31 ee ff ff       	call   c0004b94 <follow_path>
c0005d63:	85 c0                	test   eax,eax
c0005d65:	75 61                	jne    c0005dc8 <f_opendir+0xd2>
c0005d67:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005d6b:	78 46                	js     c0005db3 <f_opendir+0xbd>
c0005d6d:	b8 05 00 00 00       	mov    eax,0x5
c0005d72:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005d76:	74 50                	je     c0005dc8 <f_opendir+0xd2>
c0005d78:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005d7c:	8a 01                	mov    al,BYTE PTR [ecx]
c0005d7e:	3c 04                	cmp    al,0x4
c0005d80:	75 26                	jne    c0005da8 <f_opendir+0xb2>
c0005d82:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005d85:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d88:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005d8b:	30 d2                	xor    dl,dl
c0005d8d:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005d91:	09 c2                	or     edx,eax
c0005d93:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005d96:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005d99:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005d9c:	89 da                	mov    edx,ebx
c0005d9e:	8d 41 10             	lea    eax,[ecx+0x10]
c0005da1:	e8 b4 ed ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c0005da6:	eb 0b                	jmp    c0005db3 <f_opendir+0xbd>
c0005da8:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005dab:	e8 59 ed ff ff       	call   c0004b09 <ld_clust.isra.0>
c0005db0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005db3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005db7:	31 d2                	xor    edx,edx
c0005db9:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005dbd:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005dc1:	89 d8                	mov    eax,ebx
c0005dc3:	e8 22 d1 ff ff       	call   c0002eea <dir_sdi>
c0005dc8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005dcc:	83 ec 0c             	sub    esp,0xc
c0005dcf:	56                   	push   esi
c0005dd0:	e8 02 24 00 00       	call   c00081d7 <ff_memfree>
c0005dd5:	83 c4 10             	add    esp,0x10
c0005dd8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ddc:	83 f8 04             	cmp    eax,0x4
c0005ddf:	74 06                	je     c0005de7 <f_opendir+0xf1>
c0005de1:	85 c0                	test   eax,eax
c0005de3:	74 0d                	je     c0005df2 <f_opendir+0xfc>
c0005de5:	eb 05                	jmp    c0005dec <f_opendir+0xf6>
c0005de7:	b8 05 00 00 00       	mov    eax,0x5
c0005dec:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005df2:	83 c4 24             	add    esp,0x24
c0005df5:	5b                   	pop    ebx
c0005df6:	5e                   	pop    esi
c0005df7:	c3                   	ret    

c0005df8 <f_closedir>:
c0005df8:	53                   	push   ebx
c0005df9:	83 ec 18             	sub    esp,0x18
c0005dfc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e00:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e04:	89 d8                	mov    eax,ebx
c0005e06:	e8 86 c2 ff ff       	call   c0002091 <validate>
c0005e0b:	85 c0                	test   eax,eax
c0005e0d:	75 06                	jne    c0005e15 <f_closedir+0x1d>
c0005e0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e15:	83 c4 18             	add    esp,0x18
c0005e18:	5b                   	pop    ebx
c0005e19:	c3                   	ret    

c0005e1a <f_readdir>:
c0005e1a:	57                   	push   edi
c0005e1b:	56                   	push   esi
c0005e1c:	53                   	push   ebx
c0005e1d:	83 ec 20             	sub    esp,0x20
c0005e20:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e24:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e28:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e2c:	89 d8                	mov    eax,ebx
c0005e2e:	e8 5e c2 ff ff       	call   c0002091 <validate>
c0005e33:	85 c0                	test   eax,eax
c0005e35:	75 77                	jne    c0005eae <f_readdir+0x94>
c0005e37:	85 ff                	test   edi,edi
c0005e39:	75 0b                	jne    c0005e46 <f_readdir+0x2c>
c0005e3b:	31 d2                	xor    edx,edx
c0005e3d:	89 d8                	mov    eax,ebx
c0005e3f:	e8 a6 d0 ff ff       	call   c0002eea <dir_sdi>
c0005e44:	eb 68                	jmp    c0005eae <f_readdir+0x94>
c0005e46:	83 ec 0c             	sub    esp,0xc
c0005e49:	68 60 04 00 00       	push   0x460
c0005e4e:	e8 6e 23 00 00       	call   c00081c1 <ff_memalloc>
c0005e53:	83 c4 10             	add    esp,0x10
c0005e56:	89 c6                	mov    esi,eax
c0005e58:	b8 11 00 00 00       	mov    eax,0x11
c0005e5d:	85 f6                	test   esi,esi
c0005e5f:	74 4d                	je     c0005eae <f_readdir+0x94>
c0005e61:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e65:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005e6b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005e6e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005e71:	31 d2                	xor    edx,edx
c0005e73:	89 d8                	mov    eax,ebx
c0005e75:	e8 80 d8 ff ff       	call   c00036fa <dir_read>
c0005e7a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005e7f:	75 19                	jne    c0005e9a <f_readdir+0x80>
c0005e81:	89 fa                	mov    edx,edi
c0005e83:	89 d8                	mov    eax,ebx
c0005e85:	e8 7e ea ff ff       	call   c0004908 <get_fileinfo>
c0005e8a:	31 d2                	xor    edx,edx
c0005e8c:	89 d8                	mov    eax,ebx
c0005e8e:	e8 af d5 ff ff       	call   c0003442 <dir_next>
c0005e93:	83 f8 04             	cmp    eax,0x4
c0005e96:	75 02                	jne    c0005e9a <f_readdir+0x80>
c0005e98:	31 c0                	xor    eax,eax
c0005e9a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e9e:	83 ec 0c             	sub    esp,0xc
c0005ea1:	56                   	push   esi
c0005ea2:	e8 30 23 00 00       	call   c00081d7 <ff_memfree>
c0005ea7:	83 c4 10             	add    esp,0x10
c0005eaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eae:	83 c4 20             	add    esp,0x20
c0005eb1:	5b                   	pop    ebx
c0005eb2:	5e                   	pop    esi
c0005eb3:	5f                   	pop    edi
c0005eb4:	c3                   	ret    

c0005eb5 <f_stat>:
c0005eb5:	57                   	push   edi
c0005eb6:	31 c9                	xor    ecx,ecx
c0005eb8:	56                   	push   esi
c0005eb9:	53                   	push   ebx
c0005eba:	83 ec 50             	sub    esp,0x50
c0005ebd:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005ec1:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005ec5:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005ec9:	e8 50 c5 ff ff       	call   c000241e <mount_volume>
c0005ece:	89 c3                	mov    ebx,eax
c0005ed0:	85 c0                	test   eax,eax
c0005ed2:	75 67                	jne    c0005f3b <f_stat+0x86>
c0005ed4:	83 ec 0c             	sub    esp,0xc
c0005ed7:	bb 11 00 00 00       	mov    ebx,0x11
c0005edc:	68 60 04 00 00       	push   0x460
c0005ee1:	e8 db 22 00 00       	call   c00081c1 <ff_memalloc>
c0005ee6:	83 c4 10             	add    esp,0x10
c0005ee9:	89 c6                	mov    esi,eax
c0005eeb:	85 c0                	test   eax,eax
c0005eed:	74 4c                	je     c0005f3b <f_stat+0x86>
c0005eef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ef3:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ef9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005efc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005eff:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f03:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f07:	e8 88 ec ff ff       	call   c0004b94 <follow_path>
c0005f0c:	89 c3                	mov    ebx,eax
c0005f0e:	85 c0                	test   eax,eax
c0005f10:	75 1d                	jne    c0005f2f <f_stat+0x7a>
c0005f12:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f17:	78 11                	js     c0005f2a <f_stat+0x75>
c0005f19:	85 ff                	test   edi,edi
c0005f1b:	74 12                	je     c0005f2f <f_stat+0x7a>
c0005f1d:	89 fa                	mov    edx,edi
c0005f1f:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f23:	e8 e0 e9 ff ff       	call   c0004908 <get_fileinfo>
c0005f28:	eb 05                	jmp    c0005f2f <f_stat+0x7a>
c0005f2a:	bb 06 00 00 00       	mov    ebx,0x6
c0005f2f:	83 ec 0c             	sub    esp,0xc
c0005f32:	56                   	push   esi
c0005f33:	e8 9f 22 00 00       	call   c00081d7 <ff_memfree>
c0005f38:	83 c4 10             	add    esp,0x10
c0005f3b:	83 c4 50             	add    esp,0x50
c0005f3e:	89 d8                	mov    eax,ebx
c0005f40:	5b                   	pop    ebx
c0005f41:	5e                   	pop    esi
c0005f42:	5f                   	pop    edi
c0005f43:	c3                   	ret    

c0005f44 <f_getfree>:
c0005f44:	55                   	push   ebp
c0005f45:	31 c9                	xor    ecx,ecx
c0005f47:	57                   	push   edi
c0005f48:	56                   	push   esi
c0005f49:	53                   	push   ebx
c0005f4a:	83 ec 5c             	sub    esp,0x5c
c0005f4d:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005f51:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005f55:	e8 c4 c4 ff ff       	call   c000241e <mount_volume>
c0005f5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f5e:	85 c0                	test   eax,eax
c0005f60:	0f 85 9d 01 00 00    	jne    c0006103 <f_getfree+0x1bf>
c0005f66:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005f6a:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005f6e:	89 02                	mov    DWORD PTR [edx],eax
c0005f70:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0005f73:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005f76:	8d 71 fe             	lea    esi,[ecx-0x2]
c0005f79:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005f7d:	39 f2                	cmp    edx,esi
c0005f7f:	77 0b                	ja     c0005f8c <f_getfree+0x48>
c0005f81:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005f85:	89 10                	mov    DWORD PTR [eax],edx
c0005f87:	e9 77 01 00 00       	jmp    c0006103 <f_getfree+0x1bf>
c0005f8c:	8a 10                	mov    dl,BYTE PTR [eax]
c0005f8e:	80 fa 01             	cmp    dl,0x1
c0005f91:	75 3a                	jne    c0005fcd <f_getfree+0x89>
c0005f93:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005f97:	be 02 00 00 00       	mov    esi,0x2
c0005f9c:	31 db                	xor    ebx,ebx
c0005f9e:	89 f2                	mov    edx,esi
c0005fa0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005fa4:	e8 4b cd ff ff       	call   c0002cf4 <get_fat>
c0005fa9:	83 f8 ff             	cmp    eax,0xffffffff
c0005fac:	0f 84 28 01 00 00    	je     c00060da <f_getfree+0x196>
c0005fb2:	83 f8 01             	cmp    eax,0x1
c0005fb5:	0f 84 29 01 00 00    	je     c00060e4 <f_getfree+0x1a0>
c0005fbb:	83 d3 00             	adc    ebx,0x0
c0005fbe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fc2:	46                   	inc    esi
c0005fc3:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0005fc6:	77 d6                	ja     c0005f9e <f_getfree+0x5a>
c0005fc8:	e9 25 01 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c0005fcd:	80 fa 04             	cmp    dl,0x4
c0005fd0:	0f 85 88 00 00 00    	jne    c000605e <f_getfree+0x11a>
c0005fd6:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0005fd9:	31 ed                	xor    ebp,ebp
c0005fdb:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0005fde:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005fe2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005fe6:	31 db                	xor    ebx,ebx
c0005fe8:	85 ed                	test   ebp,ebp
c0005fea:	75 3f                	jne    c000602b <f_getfree+0xe7>
c0005fec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ff0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005ff4:	83 c0 01             	add    eax,0x1
c0005ff7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0005ffb:	83 d2 00             	adc    edx,0x0
c0005ffe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0006002:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0006006:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000600a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000600e:	e8 59 c1 ff ff       	call   c000216c <move_window>
c0006013:	85 c0                	test   eax,eax
c0006015:	0f 85 d3 00 00 00    	jne    c00060ee <f_getfree+0x1aa>
c000601b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000601f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006023:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006027:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000602b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000602f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006032:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006036:	89 cf                	mov    edi,ecx
c0006038:	85 f6                	test   esi,esi
c000603a:	74 12                	je     c000604e <f_getfree+0x10a>
c000603c:	88 c1                	mov    cl,al
c000603e:	83 e1 01             	and    ecx,0x1
c0006041:	80 f9 01             	cmp    cl,0x1
c0006044:	83 d3 00             	adc    ebx,0x0
c0006047:	d0 e8                	shr    al,1
c0006049:	4e                   	dec    esi
c000604a:	39 fe                	cmp    esi,edi
c000604c:	75 ea                	jne    c0006038 <f_getfree+0xf4>
c000604e:	45                   	inc    ebp
c000604f:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006055:	85 f6                	test   esi,esi
c0006057:	75 8f                	jne    c0005fe8 <f_getfree+0xa4>
c0006059:	e9 94 00 00 00       	jmp    c00060f2 <f_getfree+0x1ae>
c000605e:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006061:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006064:	31 f6                	xor    esi,esi
c0006066:	31 db                	xor    ebx,ebx
c0006068:	85 f6                	test   esi,esi
c000606a:	75 1b                	jne    c0006087 <f_getfree+0x143>
c000606c:	89 d7                	mov    edi,edx
c000606e:	89 cd                	mov    ebp,ecx
c0006070:	83 c7 01             	add    edi,0x1
c0006073:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006077:	83 d5 00             	adc    ebp,0x0
c000607a:	e8 ed c0 ff ff       	call   c000216c <move_window>
c000607f:	85 c0                	test   eax,eax
c0006081:	75 6b                	jne    c00060ee <f_getfree+0x1aa>
c0006083:	89 fa                	mov    edx,edi
c0006085:	89 e9                	mov    ecx,ebp
c0006087:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000608b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000608f:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006093:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006096:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000609a:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000609e:	75 11                	jne    c00060b1 <f_getfree+0x16d>
c00060a0:	e8 e9 b8 ff ff       	call   c000198e <ld_word>
c00060a5:	66 83 f8 01          	cmp    ax,0x1
c00060a9:	83 d3 00             	adc    ebx,0x0
c00060ac:	83 c6 02             	add    esi,0x2
c00060af:	eb 13                	jmp    c00060c4 <f_getfree+0x180>
c00060b1:	e8 e5 b8 ff ff       	call   c000199b <ld_dword>
c00060b6:	25 ff ff ff 0f       	and    eax,0xfffffff
c00060bb:	83 f8 01             	cmp    eax,0x1
c00060be:	83 d3 00             	adc    ebx,0x0
c00060c1:	83 c6 04             	add    esi,0x4
c00060c4:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00060ca:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00060ce:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00060d2:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00060d6:	75 90                	jne    c0006068 <f_getfree+0x124>
c00060d8:	eb 18                	jmp    c00060f2 <f_getfree+0x1ae>
c00060da:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00060e2:	eb 0e                	jmp    c00060f2 <f_getfree+0x1ae>
c00060e4:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00060ec:	eb 04                	jmp    c00060f2 <f_getfree+0x1ae>
c00060ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00060f2:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00060f6:	89 18                	mov    DWORD PTR [eax],ebx
c00060f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060fc:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00060ff:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006103:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006107:	83 c4 5c             	add    esp,0x5c
c000610a:	5b                   	pop    ebx
c000610b:	5e                   	pop    esi
c000610c:	5f                   	pop    edi
c000610d:	5d                   	pop    ebp
c000610e:	c3                   	ret    

c000610f <f_truncate>:
c000610f:	56                   	push   esi
c0006110:	53                   	push   ebx
c0006111:	83 ec 14             	sub    esp,0x14
c0006114:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006118:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000611c:	89 d8                	mov    eax,ebx
c000611e:	e8 6e bf ff ff       	call   c0002091 <validate>
c0006123:	89 c6                	mov    esi,eax
c0006125:	85 c0                	test   eax,eax
c0006127:	0f 85 d2 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c000612d:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006131:	85 f6                	test   esi,esi
c0006133:	0f 85 c6 00 00 00    	jne    c00061ff <f_truncate+0xf0>
c0006139:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000613d:	0f 84 b7 00 00 00    	je     c00061fa <f_truncate+0xeb>
c0006143:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006146:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006149:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000614c:	89 d1                	mov    ecx,edx
c000614e:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006151:	0f 83 a8 00 00 00    	jae    c00061ff <f_truncate+0xf0>
c0006157:	09 c2                	or     edx,eax
c0006159:	75 15                	jne    c0006170 <f_truncate+0x61>
c000615b:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000615e:	31 c9                	xor    ecx,ecx
c0006160:	89 d8                	mov    eax,ebx
c0006162:	e8 7a d0 ff ff       	call   c00031e1 <remove_chain>
c0006167:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000616e:	eb 35                	jmp    c00061a5 <f_truncate+0x96>
c0006170:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006173:	89 d8                	mov    eax,ebx
c0006175:	e8 7a cb ff ff       	call   c0002cf4 <get_fat>
c000617a:	89 c2                	mov    edx,eax
c000617c:	b8 01 00 00 00       	mov    eax,0x1
c0006181:	83 fa ff             	cmp    edx,0xffffffff
c0006184:	74 1f                	je     c00061a5 <f_truncate+0x96>
c0006186:	b8 02 00 00 00       	mov    eax,0x2
c000618b:	83 fa 01             	cmp    edx,0x1
c000618e:	74 15                	je     c00061a5 <f_truncate+0x96>
c0006190:	31 c0                	xor    eax,eax
c0006192:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006196:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c0006199:	76 0a                	jbe    c00061a5 <f_truncate+0x96>
c000619b:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000619e:	89 d8                	mov    eax,ebx
c00061a0:	e8 3c d0 ff ff       	call   c00031e1 <remove_chain>
c00061a5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00061a8:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00061ab:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00061ae:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00061b1:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00061b4:	83 ca 40             	or     edx,0x40
c00061b7:	85 c0                	test   eax,eax
c00061b9:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c00061bc:	75 35                	jne    c00061f3 <f_truncate+0xe4>
c00061be:	84 d2                	test   dl,dl
c00061c0:	79 3d                	jns    c00061ff <f_truncate+0xf0>
c00061c2:	83 ec 0c             	sub    esp,0xc
c00061c5:	8d 43 50             	lea    eax,[ebx+0x50]
c00061c8:	6a 01                	push   0x1
c00061ca:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00061cd:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00061d0:	50                   	push   eax
c00061d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00061d5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00061d9:	50                   	push   eax
c00061da:	e8 7a b7 ff ff       	call   c0001959 <disk_write>
c00061df:	83 c4 20             	add    esp,0x20
c00061e2:	85 c0                	test   eax,eax
c00061e4:	75 08                	jne    c00061ee <f_truncate+0xdf>
c00061e6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00061ea:	31 f6                	xor    esi,esi
c00061ec:	eb 11                	jmp    c00061ff <f_truncate+0xf0>
c00061ee:	b8 01 00 00 00       	mov    eax,0x1
c00061f3:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00061f6:	89 c6                	mov    esi,eax
c00061f8:	eb 05                	jmp    c00061ff <f_truncate+0xf0>
c00061fa:	be 07 00 00 00       	mov    esi,0x7
c00061ff:	89 f0                	mov    eax,esi
c0006201:	83 c4 14             	add    esp,0x14
c0006204:	5b                   	pop    ebx
c0006205:	5e                   	pop    esi
c0006206:	c3                   	ret    

c0006207 <f_unlink>:
c0006207:	56                   	push   esi
c0006208:	b9 02 00 00 00       	mov    ecx,0x2
c000620d:	53                   	push   ebx
c000620e:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006214:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006218:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c000621f:	e8 fa c1 ff ff       	call   c000241e <mount_volume>
c0006224:	85 c0                	test   eax,eax
c0006226:	0f 85 55 01 00 00    	jne    c0006381 <f_unlink+0x17a>
c000622c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006230:	83 ec 0c             	sub    esp,0xc
c0006233:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0006237:	68 60 04 00 00       	push   0x460
c000623c:	e8 80 1f 00 00       	call   c00081c1 <ff_memalloc>
c0006241:	83 c4 10             	add    esp,0x10
c0006244:	89 c3                	mov    ebx,eax
c0006246:	b8 11 00 00 00       	mov    eax,0x11
c000624b:	85 db                	test   ebx,ebx
c000624d:	0f 84 2e 01 00 00    	je     c0006381 <f_unlink+0x17a>
c0006253:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006257:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000625d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006260:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006263:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000626a:	8d 44 24 48          	lea    eax,[esp+0x48]
c000626e:	e8 21 e9 ff ff       	call   c0004b94 <follow_path>
c0006273:	85 c0                	test   eax,eax
c0006275:	0f 85 f2 00 00 00    	jne    c000636d <f_unlink+0x166>
c000627b:	b8 06 00 00 00       	mov    eax,0x6
c0006280:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c0006288:	0f 88 df 00 00 00    	js     c000636d <f_unlink+0x166>
c000628e:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006293:	74 0a                	je     c000629f <f_unlink+0x98>
c0006295:	b8 07 00 00 00       	mov    eax,0x7
c000629a:	e9 ce 00 00 00       	jmp    c000636d <f_unlink+0x166>
c000629f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062a3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00062a7:	8a 02                	mov    al,BYTE PTR [edx]
c00062a9:	3c 04                	cmp    al,0x4
c00062ab:	75 12                	jne    c00062bf <f_unlink+0xb8>
c00062ad:	8d 42 10             	lea    eax,[edx+0x10]
c00062b0:	8d 54 24 20          	lea    edx,[esp+0x20]
c00062b4:	e8 a1 e8 ff ff       	call   c0004b5a <init_alloc_info.isra.2>
c00062b9:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c00062bd:	eb 0e                	jmp    c00062cd <f_unlink+0xc6>
c00062bf:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c00062c6:	e8 3e e8 ff ff       	call   c0004b09 <ld_clust.isra.0>
c00062cb:	89 c6                	mov    esi,eax
c00062cd:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00062d2:	75 12                	jne    c00062e6 <f_unlink+0xdf>
c00062d4:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062d8:	e8 94 d6 ff ff       	call   c0003971 <dir_remove>
c00062dd:	85 c0                	test   eax,eax
c00062df:	74 6c                	je     c000634d <f_unlink+0x146>
c00062e1:	e9 87 00 00 00       	jmp    c000636d <f_unlink+0x166>
c00062e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062ea:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00062f1:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00062f8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00062fb:	75 21                	jne    c000631e <f_unlink+0x117>
c00062fd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006301:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006305:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000630c:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006313:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0006317:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000631e:	31 d2                	xor    edx,edx
c0006320:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006327:	e8 be cb ff ff       	call   c0002eea <dir_sdi>
c000632c:	85 c0                	test   eax,eax
c000632e:	75 3d                	jne    c000636d <f_unlink+0x166>
c0006330:	31 d2                	xor    edx,edx
c0006332:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0006339:	e8 bc d3 ff ff       	call   c00036fa <dir_read>
c000633e:	85 c0                	test   eax,eax
c0006340:	0f 84 4f ff ff ff    	je     c0006295 <f_unlink+0x8e>
c0006346:	83 f8 04             	cmp    eax,0x4
c0006349:	75 22                	jne    c000636d <f_unlink+0x166>
c000634b:	eb 87                	jmp    c00062d4 <f_unlink+0xcd>
c000634d:	85 f6                	test   esi,esi
c000634f:	75 0b                	jne    c000635c <f_unlink+0x155>
c0006351:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006355:	e8 3d df ff ff       	call   c0004297 <sync_fs>
c000635a:	eb 11                	jmp    c000636d <f_unlink+0x166>
c000635c:	31 c9                	xor    ecx,ecx
c000635e:	89 f2                	mov    edx,esi
c0006360:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006364:	e8 78 ce ff ff       	call   c00031e1 <remove_chain>
c0006369:	85 c0                	test   eax,eax
c000636b:	74 e4                	je     c0006351 <f_unlink+0x14a>
c000636d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006371:	83 ec 0c             	sub    esp,0xc
c0006374:	53                   	push   ebx
c0006375:	e8 5d 1e 00 00       	call   c00081d7 <ff_memfree>
c000637a:	83 c4 10             	add    esp,0x10
c000637d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006381:	81 c4 e4 00 00 00    	add    esp,0xe4
c0006387:	5b                   	pop    ebx
c0006388:	5e                   	pop    esi
c0006389:	c3                   	ret    

c000638a <f_mkdir>:
c000638a:	57                   	push   edi
c000638b:	b9 02 00 00 00       	mov    ecx,0x2
c0006390:	56                   	push   esi
c0006391:	53                   	push   ebx
c0006392:	83 c4 80             	add    esp,0xffffff80
c0006395:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006399:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c00063a0:	e8 79 c0 ff ff       	call   c000241e <mount_volume>
c00063a5:	89 c3                	mov    ebx,eax
c00063a7:	85 c0                	test   eax,eax
c00063a9:	0f 85 fe 01 00 00    	jne    c00065ad <f_mkdir+0x223>
c00063af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063b3:	bb 11 00 00 00       	mov    ebx,0x11
c00063b8:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00063bc:	83 ec 0c             	sub    esp,0xc
c00063bf:	68 60 04 00 00       	push   0x460
c00063c4:	e8 f8 1d 00 00       	call   c00081c1 <ff_memalloc>
c00063c9:	83 c4 10             	add    esp,0x10
c00063cc:	89 c7                	mov    edi,eax
c00063ce:	85 c0                	test   eax,eax
c00063d0:	0f 84 d7 01 00 00    	je     c00065ad <f_mkdir+0x223>
c00063d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00063da:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00063e0:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00063e3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00063e6:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00063ed:	8d 44 24 34          	lea    eax,[esp+0x34]
c00063f1:	e8 9e e7 ff ff       	call   c0004b94 <follow_path>
c00063f6:	89 c3                	mov    ebx,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	74 3e                	je     c000643a <f_mkdir+0xb0>
c00063fc:	83 f8 04             	cmp    eax,0x4
c00063ff:	75 3e                	jne    c000643f <f_mkdir+0xb5>
c0006401:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006405:	31 d2                	xor    edx,edx
c0006407:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000640b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000640f:	e8 ce cb ff ff       	call   c0002fe2 <create_chain>
c0006414:	89 c6                	mov    esi,eax
c0006416:	85 c0                	test   eax,eax
c0006418:	74 0c                	je     c0006426 <f_mkdir+0x9c>
c000641a:	bb 02 00 00 00       	mov    ebx,0x2
c000641f:	83 f8 01             	cmp    eax,0x1
c0006422:	74 07                	je     c000642b <f_mkdir+0xa1>
c0006424:	eb 2a                	jmp    c0006450 <f_mkdir+0xc6>
c0006426:	bb 07 00 00 00       	mov    ebx,0x7
c000642b:	31 c9                	xor    ecx,ecx
c000642d:	89 f2                	mov    edx,esi
c000642f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006433:	e8 a9 cd ff ff       	call   c00031e1 <remove_chain>
c0006438:	eb 05                	jmp    c000643f <f_mkdir+0xb5>
c000643a:	bb 08 00 00 00       	mov    ebx,0x8
c000643f:	83 ec 0c             	sub    esp,0xc
c0006442:	57                   	push   edi
c0006443:	e8 8f 1d 00 00       	call   c00081d7 <ff_memfree>
c0006448:	83 c4 10             	add    esp,0x10
c000644b:	e9 5d 01 00 00       	jmp    c00065ad <f_mkdir+0x223>
c0006450:	bb 01 00 00 00       	mov    ebx,0x1
c0006455:	83 f8 ff             	cmp    eax,0xffffffff
c0006458:	74 d1                	je     c000642b <f_mkdir+0xa1>
c000645a:	89 f2                	mov    edx,esi
c000645c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006460:	e8 c4 ce ff ff       	call   c0003329 <dir_clear>
c0006465:	89 c3                	mov    ebx,eax
c0006467:	85 c0                	test   eax,eax
c0006469:	75 c0                	jne    c000642b <f_mkdir+0xa1>
c000646b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000646f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006472:	74 69                	je     c00064dd <f_mkdir+0x153>
c0006474:	b9 0b 00 00 00       	mov    ecx,0xb
c0006479:	83 c0 54             	add    eax,0x54
c000647c:	ba 20 00 00 00       	mov    edx,0x20
c0006481:	e8 9c b5 ff ff       	call   c0001a22 <mem_set>
c0006486:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000648a:	ba 00 00 21 50       	mov    edx,0x50210000
c000648f:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006493:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c0006497:	83 c0 6a             	add    eax,0x6a
c000649a:	e8 65 b5 ff ff       	call   c0001a04 <st_dword>
c000649f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064a3:	89 f1                	mov    ecx,esi
c00064a5:	8d 50 54             	lea    edx,[eax+0x54]
c00064a8:	e8 85 e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064b1:	b9 20 00 00 00       	mov    ecx,0x20
c00064b6:	8d 50 54             	lea    edx,[eax+0x54]
c00064b9:	83 c0 74             	add    eax,0x74
c00064bc:	e8 4c b5 ff ff       	call   c0001a0d <mem_cpy>
c00064c1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064c5:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00064c9:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00064cd:	8d 50 74             	lea    edx,[eax+0x74]
c00064d0:	e8 5d e6 ff ff       	call   c0004b32 <st_clust.isra.1>
c00064d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00064dd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00064e1:	e8 2f db ff ff       	call   c0004015 <dir_register>
c00064e6:	89 c3                	mov    ebx,eax
c00064e8:	85 c0                	test   eax,eax
c00064ea:	0f 85 3b ff ff ff    	jne    c000642b <f_mkdir+0xa1>
c00064f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f4:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064f7:	75 74                	jne    c000656d <f_mkdir+0x1e3>
c00064f9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00064fc:	ba 00 00 21 50       	mov    edx,0x50210000
c0006501:	83 c0 0c             	add    eax,0xc
c0006504:	e8 fb b4 ff ff       	call   c0001a04 <st_dword>
c0006509:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000650d:	89 f2                	mov    edx,esi
c000650f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006512:	83 c0 34             	add    eax,0x34
c0006515:	e8 ea b4 ff ff       	call   c0001a04 <st_dword>
c000651a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000651e:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006522:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006525:	c1 e2 09             	shl    edx,0x9
c0006528:	83 c0 38             	add    eax,0x38
c000652b:	e8 d4 b4 ff ff       	call   c0001a04 <st_dword>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006538:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000653b:	c1 e2 09             	shl    edx,0x9
c000653e:	83 c0 28             	add    eax,0x28
c0006541:	e8 be b4 ff ff       	call   c0001a04 <st_dword>
c0006546:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000654a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000654d:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006551:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006554:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c0006558:	8d 44 24 34          	lea    eax,[esp+0x34]
c000655c:	e8 8b d3 ff ff       	call   c00038ec <store_xdir>
c0006561:	89 c3                	mov    ebx,eax
c0006563:	85 c0                	test   eax,eax
c0006565:	0f 85 d4 fe ff ff    	jne    c000643f <f_mkdir+0xb5>
c000656b:	eb 30                	jmp    c000659d <f_mkdir+0x213>
c000656d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006571:	ba 00 00 21 50       	mov    edx,0x50210000
c0006576:	83 c0 16             	add    eax,0x16
c0006579:	e8 86 b4 ff ff       	call   c0001a04 <st_dword>
c000657e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006582:	89 f1                	mov    ecx,esi
c0006584:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0006588:	e8 a5 e5 ff ff       	call   c0004b32 <st_clust.isra.1>
c000658d:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006591:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006595:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006599:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000659d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a1:	e8 f1 dc ff ff       	call   c0004297 <sync_fs>
c00065a6:	89 c3                	mov    ebx,eax
c00065a8:	e9 92 fe ff ff       	jmp    c000643f <f_mkdir+0xb5>
c00065ad:	83 ec 80             	sub    esp,0xffffff80
c00065b0:	89 d8                	mov    eax,ebx
c00065b2:	5b                   	pop    ebx
c00065b3:	5e                   	pop    esi
c00065b4:	5f                   	pop    edi
c00065b5:	c3                   	ret    

c00065b6 <f_rename>:
c00065b6:	55                   	push   ebp
c00065b7:	57                   	push   edi
c00065b8:	56                   	push   esi
c00065b9:	53                   	push   ebx
c00065ba:	81 ec fc 00 00 00    	sub    esp,0xfc
c00065c0:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00065c7:	e8 a4 b9 ff ff       	call   c0001f70 <get_ldnumber>
c00065cc:	b9 02 00 00 00       	mov    ecx,0x2
c00065d1:	8d 54 24 14          	lea    edx,[esp+0x14]
c00065d5:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00065dc:	e8 3d be ff ff       	call   c000241e <mount_volume>
c00065e1:	85 c0                	test   eax,eax
c00065e3:	0f 85 b5 02 00 00    	jne    c000689e <f_rename+0x2e8>
c00065e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00065ed:	83 ec 0c             	sub    esp,0xc
c00065f0:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00065f4:	68 60 04 00 00       	push   0x460
c00065f9:	e8 c3 1b 00 00       	call   c00081c1 <ff_memalloc>
c00065fe:	83 c4 10             	add    esp,0x10
c0006601:	89 c3                	mov    ebx,eax
c0006603:	b8 11 00 00 00       	mov    eax,0x11
c0006608:	85 db                	test   ebx,ebx
c000660a:	0f 84 8e 02 00 00    	je     c000689e <f_rename+0x2e8>
c0006610:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006614:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c000661a:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000661d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006620:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006627:	8d 44 24 58          	lea    eax,[esp+0x58]
c000662b:	e8 64 e5 ff ff       	call   c0004b94 <follow_path>
c0006630:	85 c0                	test   eax,eax
c0006632:	0f 85 52 02 00 00    	jne    c000688a <f_rename+0x2d4>
c0006638:	b8 06 00 00 00       	mov    eax,0x6
c000663d:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006645:	0f 85 3f 02 00 00    	jne    c000688a <f_rename+0x2d4>
c000664b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000664f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006652:	0f 85 05 01 00 00    	jne    c000675d <f_rename+0x1a7>
c0006658:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000665b:	b9 40 00 00 00       	mov    ecx,0x40
c0006660:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006664:	e8 a4 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006669:	b9 4c 00 00 00       	mov    ecx,0x4c
c000666e:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006672:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006679:	e8 8f b3 ff ff       	call   c0001a0d <mem_cpy>
c000667e:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006685:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000668c:	e8 03 e5 ff ff       	call   c0004b94 <follow_path>
c0006691:	85 c0                	test   eax,eax
c0006693:	75 29                	jne    c00066be <f_rename+0x108>
c0006695:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006699:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00066a0:	74 0a                	je     c00066ac <f_rename+0xf6>
c00066a2:	b8 08 00 00 00       	mov    eax,0x8
c00066a7:	e9 de 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c00066ac:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00066b3:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00066ba:	75 e6                	jne    c00066a2 <f_rename+0xec>
c00066bc:	eb 09                	jmp    c00066c7 <f_rename+0x111>
c00066be:	83 f8 04             	cmp    eax,0x4
c00066c1:	0f 85 c3 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066c7:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066ce:	e8 42 d9 ff ff       	call   c0004015 <dir_register>
c00066d3:	85 c0                	test   eax,eax
c00066d5:	0f 85 af 01 00 00    	jne    c000688a <f_rename+0x2d4>
c00066db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066df:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00066e2:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00066e5:	89 c5                	mov    ebp,eax
c00066e7:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00066ea:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00066ee:	8d 46 24             	lea    eax,[esi+0x24]
c00066f1:	e8 98 b2 ff ff       	call   c000198e <ld_word>
c00066f6:	b9 40 00 00 00       	mov    ecx,0x40
c00066fb:	89 c7                	mov    edi,eax
c00066fd:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006701:	89 f0                	mov    eax,esi
c0006703:	e8 05 b3 ff ff       	call   c0001a0d <mem_cpy>
c0006708:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000670c:	89 e9                	mov    ecx,ebp
c000670e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006711:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006714:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006718:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000671c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000671f:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006722:	0f b7 d7             	movzx  edx,di
c0006725:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006728:	83 c0 24             	add    eax,0x24
c000672b:	e8 d0 b2 ff ff       	call   c0001a00 <st_word>
c0006730:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006734:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006737:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c000673a:	a8 10                	test   al,0x10
c000673c:	75 06                	jne    c0006744 <f_rename+0x18e>
c000673e:	83 c8 20             	or     eax,0x20
c0006741:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006744:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000674b:	e8 9c d1 ff ff       	call   c00038ec <store_xdir>
c0006750:	85 c0                	test   eax,eax
c0006752:	0f 84 1c 01 00 00    	je     c0006874 <f_rename+0x2be>
c0006758:	e9 2d 01 00 00       	jmp    c000688a <f_rename+0x2d4>
c000675d:	b9 20 00 00 00       	mov    ecx,0x20
c0006762:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006769:	8d 44 24 18          	lea    eax,[esp+0x18]
c000676d:	e8 9b b2 ff ff       	call   c0001a0d <mem_cpy>
c0006772:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006777:	8d 54 24 58          	lea    edx,[esp+0x58]
c000677b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006782:	e8 86 b2 ff ff       	call   c0001a0d <mem_cpy>
c0006787:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c000678e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006795:	e8 fa e3 ff ff       	call   c0004b94 <follow_path>
c000679a:	85 c0                	test   eax,eax
c000679c:	75 27                	jne    c00067c5 <f_rename+0x20f>
c000679e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00067a2:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c00067a9:	0f 85 f3 fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067af:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c00067b6:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c00067bd:	0f 85 df fe ff ff    	jne    c00066a2 <f_rename+0xec>
c00067c3:	eb 09                	jmp    c00067ce <f_rename+0x218>
c00067c5:	83 f8 04             	cmp    eax,0x4
c00067c8:	0f 85 bc 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067ce:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067d5:	e8 3b d8 ff ff       	call   c0004015 <dir_register>
c00067da:	85 c0                	test   eax,eax
c00067dc:	0f 85 a8 00 00 00    	jne    c000688a <f_rename+0x2d4>
c00067e2:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c00067e9:	b9 13 00 00 00       	mov    ecx,0x13
c00067ee:	8d 46 0d             	lea    eax,[esi+0xd]
c00067f1:	8d 54 24 25          	lea    edx,[esp+0x25]
c00067f5:	e8 13 b2 ff ff       	call   c0001a0d <mem_cpy>
c00067fa:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00067fe:	a8 10                	test   al,0x10
c0006800:	75 03                	jne    c0006805 <f_rename+0x24f>
c0006802:	83 c8 20             	or     eax,0x20
c0006805:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006808:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000680c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006810:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006814:	74 5e                	je     c0006874 <f_rename+0x2be>
c0006816:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c000681d:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006821:	74 51                	je     c0006874 <f_rename+0x2be>
c0006823:	89 f2                	mov    edx,esi
c0006825:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006829:	8a 07                	mov    al,BYTE PTR [edi]
c000682b:	e8 d9 e2 ff ff       	call   c0004b09 <ld_clust.isra.0>
c0006830:	89 c2                	mov    edx,eax
c0006832:	89 f8                	mov    eax,edi
c0006834:	e8 ee b3 ff ff       	call   c0001c27 <clst2sect>
c0006839:	89 c6                	mov    esi,eax
c000683b:	89 d1                	mov    ecx,edx
c000683d:	b8 02 00 00 00       	mov    eax,0x2
c0006842:	09 f2                	or     edx,esi
c0006844:	74 44                	je     c000688a <f_rename+0x2d4>
c0006846:	89 f2                	mov    edx,esi
c0006848:	89 f8                	mov    eax,edi
c000684a:	e8 1d b9 ff ff       	call   c000216c <move_window>
c000684f:	85 c0                	test   eax,eax
c0006851:	75 37                	jne    c000688a <f_rename+0x2d4>
c0006853:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006857:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c000685b:	75 17                	jne    c0006874 <f_rename+0x2be>
c000685d:	8d 50 74             	lea    edx,[eax+0x74]
c0006860:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006867:	e8 c6 e2 ff ff       	call   c0004b32 <st_clust.isra.1>
c000686c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006870:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006874:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006878:	e8 f4 d0 ff ff       	call   c0003971 <dir_remove>
c000687d:	85 c0                	test   eax,eax
c000687f:	75 09                	jne    c000688a <f_rename+0x2d4>
c0006881:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006885:	e8 0d da ff ff       	call   c0004297 <sync_fs>
c000688a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000688e:	83 ec 0c             	sub    esp,0xc
c0006891:	53                   	push   ebx
c0006892:	e8 40 19 00 00       	call   c00081d7 <ff_memfree>
c0006897:	83 c4 10             	add    esp,0x10
c000689a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000689e:	81 c4 fc 00 00 00    	add    esp,0xfc
c00068a4:	5b                   	pop    ebx
c00068a5:	5e                   	pop    esi
c00068a6:	5f                   	pop    edi
c00068a7:	5d                   	pop    ebp
c00068a8:	c3                   	ret    

c00068a9 <f_chmod>:
c00068a9:	57                   	push   edi
c00068aa:	b9 02 00 00 00       	mov    ecx,0x2
c00068af:	56                   	push   esi
c00068b0:	53                   	push   ebx
c00068b1:	83 ec 60             	sub    esp,0x60
c00068b4:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c00068b8:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00068bc:	8d 54 24 10          	lea    edx,[esp+0x10]
c00068c0:	8d 44 24 70          	lea    eax,[esp+0x70]
c00068c4:	e8 55 bb ff ff       	call   c000241e <mount_volume>
c00068c9:	85 c0                	test   eax,eax
c00068cb:	0f 85 af 00 00 00    	jne    c0006980 <f_chmod+0xd7>
c00068d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068d5:	83 ec 0c             	sub    esp,0xc
c00068d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00068dc:	68 60 04 00 00       	push   0x460
c00068e1:	e8 db 18 00 00       	call   c00081c1 <ff_memalloc>
c00068e6:	83 c4 10             	add    esp,0x10
c00068e9:	89 c6                	mov    esi,eax
c00068eb:	b8 11 00 00 00       	mov    eax,0x11
c00068f0:	85 f6                	test   esi,esi
c00068f2:	0f 84 88 00 00 00    	je     c0006980 <f_chmod+0xd7>
c00068f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00068fc:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006902:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006905:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006908:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000690c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006910:	e8 7f e2 ff ff       	call   c0004b94 <follow_path>
c0006915:	85 c0                	test   eax,eax
c0006917:	75 53                	jne    c000696c <f_chmod+0xc3>
c0006919:	b8 06 00 00 00       	mov    eax,0x6
c000691e:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006923:	75 47                	jne    c000696c <f_chmod+0xc3>
c0006925:	89 f9                	mov    ecx,edi
c0006927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000692b:	83 e1 27             	and    ecx,0x27
c000692e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006931:	75 1d                	jne    c0006950 <f_chmod+0xa7>
c0006933:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006936:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006939:	21 cb                	and    ebx,ecx
c000693b:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c000693e:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006941:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006945:	e8 a2 cf ff ff       	call   c00038ec <store_xdir>
c000694a:	85 c0                	test   eax,eax
c000694c:	75 1e                	jne    c000696c <f_chmod+0xc3>
c000694e:	eb 13                	jmp    c0006963 <f_chmod+0xba>
c0006950:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006954:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006957:	21 cb                	and    ebx,ecx
c0006959:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c000695c:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c000695f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006967:	e8 2b d9 ff ff       	call   c0004297 <sync_fs>
c000696c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006970:	83 ec 0c             	sub    esp,0xc
c0006973:	56                   	push   esi
c0006974:	e8 5e 18 00 00       	call   c00081d7 <ff_memfree>
c0006979:	83 c4 10             	add    esp,0x10
c000697c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006980:	83 c4 60             	add    esp,0x60
c0006983:	5b                   	pop    ebx
c0006984:	5e                   	pop    esi
c0006985:	5f                   	pop    edi
c0006986:	c3                   	ret    

c0006987 <f_utime>:
c0006987:	56                   	push   esi
c0006988:	b9 02 00 00 00       	mov    ecx,0x2
c000698d:	53                   	push   ebx
c000698e:	83 ec 64             	sub    esp,0x64
c0006991:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006995:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006999:	8d 44 24 70          	lea    eax,[esp+0x70]
c000699d:	e8 7c ba ff ff       	call   c000241e <mount_volume>
c00069a2:	85 c0                	test   eax,eax
c00069a4:	0f 85 b5 00 00 00    	jne    c0006a5f <f_utime+0xd8>
c00069aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069ae:	83 ec 0c             	sub    esp,0xc
c00069b1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00069b5:	68 60 04 00 00       	push   0x460
c00069ba:	e8 02 18 00 00       	call   c00081c1 <ff_memalloc>
c00069bf:	83 c4 10             	add    esp,0x10
c00069c2:	89 c3                	mov    ebx,eax
c00069c4:	b8 11 00 00 00       	mov    eax,0x11
c00069c9:	85 db                	test   ebx,ebx
c00069cb:	0f 84 8e 00 00 00    	je     c0006a5f <f_utime+0xd8>
c00069d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069d5:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00069db:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00069de:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00069e1:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c00069e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069e9:	e8 a6 e1 ff ff       	call   c0004b94 <follow_path>
c00069ee:	85 c0                	test   eax,eax
c00069f0:	75 59                	jne    c0006a4b <f_utime+0xc4>
c00069f2:	b8 06 00 00 00       	mov    eax,0x6
c00069f7:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c00069fc:	75 4d                	jne    c0006a4b <f_utime+0xc4>
c00069fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a02:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a06:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a0a:	c1 e2 10             	shl    edx,0x10
c0006a0d:	09 ca                	or     edx,ecx
c0006a0f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a12:	75 1a                	jne    c0006a2e <f_utime+0xa7>
c0006a14:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a17:	83 c0 0c             	add    eax,0xc
c0006a1a:	e8 e5 af ff ff       	call   c0001a04 <st_dword>
c0006a1f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a23:	e8 c4 ce ff ff       	call   c00038ec <store_xdir>
c0006a28:	85 c0                	test   eax,eax
c0006a2a:	75 1f                	jne    c0006a4b <f_utime+0xc4>
c0006a2c:	eb 14                	jmp    c0006a42 <f_utime+0xbb>
c0006a2e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006a32:	83 c0 16             	add    eax,0x16
c0006a35:	e8 ca af ff ff       	call   c0001a04 <st_dword>
c0006a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a3e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a46:	e8 4c d8 ff ff       	call   c0004297 <sync_fs>
c0006a4b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006a4f:	83 ec 0c             	sub    esp,0xc
c0006a52:	53                   	push   ebx
c0006a53:	e8 7f 17 00 00       	call   c00081d7 <ff_memfree>
c0006a58:	83 c4 10             	add    esp,0x10
c0006a5b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a5f:	83 c4 64             	add    esp,0x64
c0006a62:	5b                   	pop    ebx
c0006a63:	5e                   	pop    esi
c0006a64:	c3                   	ret    

c0006a65 <f_getlabel>:
c0006a65:	55                   	push   ebp
c0006a66:	31 c9                	xor    ecx,ecx
c0006a68:	57                   	push   edi
c0006a69:	56                   	push   esi
c0006a6a:	53                   	push   ebx
c0006a6b:	83 ec 6c             	sub    esp,0x6c
c0006a6e:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a72:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006a79:	e8 a0 b9 ff ff       	call   c000241e <mount_volume>
c0006a7e:	89 c6                	mov    esi,eax
c0006a80:	85 c0                	test   eax,eax
c0006a82:	0f 85 c1 01 00 00    	jne    c0006c49 <f_getlabel+0x1e4>
c0006a88:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006a90:	0f 84 5f 01 00 00    	je     c0006bf5 <f_getlabel+0x190>
c0006a96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a9a:	31 d2                	xor    edx,edx
c0006a9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006aa0:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006aa8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006aac:	e8 39 c4 ff ff       	call   c0002eea <dir_sdi>
c0006ab1:	85 c0                	test   eax,eax
c0006ab3:	0f 85 2d 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006ab9:	ba 01 00 00 00       	mov    edx,0x1
c0006abe:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006ac2:	e8 33 cc ff ff       	call   c00036fa <dir_read>
c0006ac7:	85 c0                	test   eax,eax
c0006ac9:	0f 85 17 01 00 00    	jne    c0006be6 <f_getlabel+0x181>
c0006acf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ad3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ad6:	74 09                	je     c0006ae1 <f_getlabel+0x7c>
c0006ad8:	31 db                	xor    ebx,ebx
c0006ada:	31 c9                	xor    ecx,ecx
c0006adc:	e9 c8 00 00 00       	jmp    c0006ba9 <f_getlabel+0x144>
c0006ae1:	31 ed                	xor    ebp,ebp
c0006ae3:	31 db                	xor    ebx,ebx
c0006ae5:	31 ff                	xor    edi,edi
c0006ae7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aeb:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006aef:	39 fa                	cmp    edx,edi
c0006af1:	76 4b                	jbe    c0006b3e <f_getlabel+0xd9>
c0006af3:	47                   	inc    edi
c0006af4:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006af7:	01 d0                	add    eax,edx
c0006af9:	e8 90 ae ff ff       	call   c000198e <ld_word>
c0006afe:	66 85 ed             	test   bp,bp
c0006b01:	75 0d                	jne    c0006b10 <f_getlabel+0xab>
c0006b03:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b09:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b0e:	76 28                	jbe    c0006b38 <f_getlabel+0xd3>
c0006b10:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b17:	89 e9                	mov    ecx,ebp
c0006b19:	01 da                	add    edx,ebx
c0006b1b:	c1 e1 10             	shl    ecx,0x10
c0006b1e:	0f b7 c0             	movzx  eax,ax
c0006b21:	09 c8                	or     eax,ecx
c0006b23:	b9 04 00 00 00       	mov    ecx,0x4
c0006b28:	e8 01 b0 ff ff       	call   c0001b2e <put_utf>
c0006b2d:	84 c0                	test   al,al
c0006b2f:	74 0b                	je     c0006b3c <f_getlabel+0xd7>
c0006b31:	0f b6 c0             	movzx  eax,al
c0006b34:	01 c3                	add    ebx,eax
c0006b36:	31 c0                	xor    eax,eax
c0006b38:	89 c5                	mov    ebp,eax
c0006b3a:	eb ab                	jmp    c0006ae7 <f_getlabel+0x82>
c0006b3c:	31 db                	xor    ebx,ebx
c0006b3e:	66 85 ed             	test   bp,bp
c0006b41:	74 02                	je     c0006b45 <f_getlabel+0xe0>
c0006b43:	31 db                	xor    ebx,ebx
c0006b45:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006b4c:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006b50:	e9 a0 00 00 00       	jmp    c0006bf5 <f_getlabel+0x190>
c0006b55:	83 ff 0b             	cmp    edi,0xb
c0006b58:	74 11                	je     c0006b6b <f_getlabel+0x106>
c0006b5a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006b5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b63:	8d 79 02             	lea    edi,[ecx+0x2]
c0006b66:	c1 e0 08             	shl    eax,0x8
c0006b69:	09 c2                	or     edx,eax
c0006b6b:	0f b7 d2             	movzx  edx,dx
c0006b6e:	50                   	push   eax
c0006b6f:	50                   	push   eax
c0006b70:	68 b5 01 00 00       	push   0x1b5
c0006b75:	52                   	push   edx
c0006b76:	e8 03 17 00 00       	call   c000827e <ff_oem2uni>
c0006b7b:	83 c4 10             	add    esp,0x10
c0006b7e:	66 85 c0             	test   ax,ax
c0006b81:	74 46                	je     c0006bc9 <f_getlabel+0x164>
c0006b83:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8a:	0f b7 c0             	movzx  eax,ax
c0006b8d:	01 da                	add    edx,ebx
c0006b8f:	b9 04 00 00 00       	mov    ecx,0x4
c0006b94:	e8 95 af ff ff       	call   c0001b2e <put_utf>
c0006b99:	84 c0                	test   al,al
c0006b9b:	74 2c                	je     c0006bc9 <f_getlabel+0x164>
c0006b9d:	0f b6 c0             	movzx  eax,al
c0006ba0:	01 c3                	add    ebx,eax
c0006ba2:	83 ff 0b             	cmp    edi,0xb
c0006ba5:	74 24                	je     c0006bcb <f_getlabel+0x166>
c0006ba7:	89 f9                	mov    ecx,edi
c0006ba9:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006bad:	8d 79 01             	lea    edi,[ecx+0x1]
c0006bb0:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006bb5:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006bba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006bbe:	e8 9f ae ff ff       	call   c0001a62 <dbc_1st>
c0006bc3:	85 c0                	test   eax,eax
c0006bc5:	74 a4                	je     c0006b6b <f_getlabel+0x106>
c0006bc7:	eb 8c                	jmp    c0006b55 <f_getlabel+0xf0>
c0006bc9:	31 db                	xor    ebx,ebx
c0006bcb:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006bd2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006bd5:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006bdc:	74 17                	je     c0006bf5 <f_getlabel+0x190>
c0006bde:	4b                   	dec    ebx
c0006bdf:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006be2:	74 ee                	je     c0006bd2 <f_getlabel+0x16d>
c0006be4:	eb 0f                	jmp    c0006bf5 <f_getlabel+0x190>
c0006be6:	83 f8 04             	cmp    eax,0x4
c0006be9:	75 5c                	jne    c0006c47 <f_getlabel+0x1e2>
c0006beb:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bf2:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006bf5:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006bfd:	74 4a                	je     c0006c49 <f_getlabel+0x1e4>
c0006bff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c03:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c06:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c09:	e8 5e b5 ff ff       	call   c000216c <move_window>
c0006c0e:	89 c6                	mov    esi,eax
c0006c10:	85 c0                	test   eax,eax
c0006c12:	75 35                	jne    c0006c49 <f_getlabel+0x1e4>
c0006c14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c18:	b8 43 00 00 00       	mov    eax,0x43
c0006c1d:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c1f:	80 f9 03             	cmp    cl,0x3
c0006c22:	74 0f                	je     c0006c33 <f_getlabel+0x1ce>
c0006c24:	31 c0                	xor    eax,eax
c0006c26:	80 f9 04             	cmp    cl,0x4
c0006c29:	0f 94 c0             	sete   al
c0006c2c:	48                   	dec    eax
c0006c2d:	83 e0 c3             	and    eax,0xffffffc3
c0006c30:	83 c0 64             	add    eax,0x64
c0006c33:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006c37:	e8 5f ad ff ff       	call   c000199b <ld_dword>
c0006c3c:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006c43:	89 07                	mov    DWORD PTR [edi],eax
c0006c45:	eb 02                	jmp    c0006c49 <f_getlabel+0x1e4>
c0006c47:	89 c6                	mov    esi,eax
c0006c49:	83 c4 6c             	add    esp,0x6c
c0006c4c:	89 f0                	mov    eax,esi
c0006c4e:	5b                   	pop    ebx
c0006c4f:	5e                   	pop    esi
c0006c50:	5f                   	pop    edi
c0006c51:	5d                   	pop    ebp
c0006c52:	c3                   	ret    

c0006c53 <f_setlabel>:
c0006c53:	56                   	push   esi
c0006c54:	b9 02 00 00 00       	mov    ecx,0x2
c0006c59:	53                   	push   ebx
c0006c5a:	83 ec 74             	sub    esp,0x74
c0006c5d:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006c61:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006c68:	e8 b1 b7 ff ff       	call   c000241e <mount_volume>
c0006c6d:	89 c6                	mov    esi,eax
c0006c6f:	85 c0                	test   eax,eax
c0006c71:	0f 85 41 02 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006c77:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c7b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c7e:	0f 85 8e 00 00 00    	jne    c0006d12 <f_setlabel+0xbf>
c0006c84:	b9 16 00 00 00       	mov    ecx,0x16
c0006c89:	31 d2                	xor    edx,edx
c0006c8b:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006c8f:	31 db                	xor    ebx,ebx
c0006c91:	e8 8c ad ff ff       	call   c0001a22 <mem_set>
c0006c96:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006c9d:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006ca0:	0f 86 0a 01 00 00    	jbe    c0006db0 <f_setlabel+0x15d>
c0006ca6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cad:	e8 b6 ad ff ff       	call   c0001a68 <tchar2uni>
c0006cb2:	89 c6                	mov    esi,eax
c0006cb4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006cb9:	76 2a                	jbe    c0006ce5 <f_setlabel+0x92>
c0006cbb:	83 f8 ff             	cmp    eax,0xffffffff
c0006cbe:	74 05                	je     c0006cc5 <f_setlabel+0x72>
c0006cc0:	83 fb 09             	cmp    ebx,0x9
c0006cc3:	76 0a                	jbe    c0006ccf <f_setlabel+0x7c>
c0006cc5:	be 06 00 00 00       	mov    esi,0x6
c0006cca:	e9 e9 01 00 00       	jmp    c0006eb8 <f_setlabel+0x265>
c0006ccf:	89 c2                	mov    edx,eax
c0006cd1:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006cd5:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006cd8:	c1 ea 10             	shr    edx,0x10
c0006cdb:	01 c8                	add    eax,ecx
c0006cdd:	43                   	inc    ebx
c0006cde:	e8 1d ad ff ff       	call   c0001a00 <st_word>
c0006ce3:	eb 04                	jmp    c0006ce9 <f_setlabel+0x96>
c0006ce5:	85 c0                	test   eax,eax
c0006ce7:	74 dc                	je     c0006cc5 <f_setlabel+0x72>
c0006ce9:	89 f2                	mov    edx,esi
c0006ceb:	b8 f7 f0 01 c0       	mov    eax,0xc001f0f7
c0006cf0:	e8 5b ad ff ff       	call   c0001a50 <chk_chr>
c0006cf5:	85 c0                	test   eax,eax
c0006cf7:	75 cc                	jne    c0006cc5 <f_setlabel+0x72>
c0006cf9:	83 fb 0a             	cmp    ebx,0xa
c0006cfc:	77 c7                	ja     c0006cc5 <f_setlabel+0x72>
c0006cfe:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d01:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d05:	0f b7 d6             	movzx  edx,si
c0006d08:	01 c8                	add    eax,ecx
c0006d0a:	43                   	inc    ebx
c0006d0b:	e8 f0 ac ff ff       	call   c0001a00 <st_word>
c0006d10:	eb 84                	jmp    c0006c96 <f_setlabel+0x43>
c0006d12:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d17:	ba 20 00 00 00       	mov    edx,0x20
c0006d1c:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d20:	31 db                	xor    ebx,ebx
c0006d22:	e8 fb ac ff ff       	call   c0001a22 <mem_set>
c0006d27:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d2e:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d31:	76 60                	jbe    c0006d93 <f_setlabel+0x140>
c0006d33:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d3a:	e8 29 ad ff ff       	call   c0001a68 <tchar2uni>
c0006d3f:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d44:	0f 87 7b ff ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006d4a:	83 ec 0c             	sub    esp,0xc
c0006d4d:	50                   	push   eax
c0006d4e:	e8 97 15 00 00       	call   c00082ea <ff_wtoupper>
c0006d53:	5a                   	pop    edx
c0006d54:	59                   	pop    ecx
c0006d55:	68 b5 01 00 00       	push   0x1b5
c0006d5a:	50                   	push   eax
c0006d5b:	e8 8e 14 00 00       	call   c00081ee <ff_uni2oem>
c0006d60:	83 c4 10             	add    esp,0x10
c0006d63:	89 c6                	mov    esi,eax
c0006d65:	66 85 c0             	test   ax,ax
c0006d68:	0f 84 57 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d6e:	0f b7 d0             	movzx  edx,ax
c0006d71:	b8 f0 f0 01 c0       	mov    eax,0xc001f0f0
c0006d76:	e8 d5 ac ff ff       	call   c0001a50 <chk_chr>
c0006d7b:	85 c0                	test   eax,eax
c0006d7d:	0f 85 42 ff ff ff    	jne    c0006cc5 <f_setlabel+0x72>
c0006d83:	66 81 fe ff 00       	cmp    si,0xff
c0006d88:	0f 87 14 01 00 00    	ja     c0006ea2 <f_setlabel+0x24f>
c0006d8e:	e9 fa 00 00 00       	jmp    c0006e8d <f_setlabel+0x23a>
c0006d93:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006d98:	0f 84 27 ff ff ff    	je     c0006cc5 <f_setlabel+0x72>
c0006d9e:	85 db                	test   ebx,ebx
c0006da0:	74 0e                	je     c0006db0 <f_setlabel+0x15d>
c0006da2:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006da5:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006daa:	75 04                	jne    c0006db0 <f_setlabel+0x15d>
c0006dac:	89 c3                	mov    ebx,eax
c0006dae:	eb ee                	jmp    c0006d9e <f_setlabel+0x14b>
c0006db0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006db4:	31 d2                	xor    edx,edx
c0006db6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006dba:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006dc2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dc6:	e8 1f c1 ff ff       	call   c0002eea <dir_sdi>
c0006dcb:	89 c6                	mov    esi,eax
c0006dcd:	85 c0                	test   eax,eax
c0006dcf:	0f 85 e3 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006dd5:	ba 01 00 00 00       	mov    edx,0x1
c0006dda:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006dde:	e8 17 c9 ff ff       	call   c00036fa <dir_read>
c0006de3:	85 c0                	test   eax,eax
c0006de5:	75 21                	jne    c0006e08 <f_setlabel+0x1b5>
c0006de7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006deb:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006def:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006df2:	74 5d                	je     c0006e51 <f_setlabel+0x1fe>
c0006df4:	85 db                	test   ebx,ebx
c0006df6:	74 0b                	je     c0006e03 <f_setlabel+0x1b0>
c0006df8:	b9 0b 00 00 00       	mov    ecx,0xb
c0006dfd:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e01:	eb 70                	jmp    c0006e73 <f_setlabel+0x220>
c0006e03:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e06:	eb 70                	jmp    c0006e78 <f_setlabel+0x225>
c0006e08:	83 f8 04             	cmp    eax,0x4
c0006e0b:	75 7c                	jne    c0006e89 <f_setlabel+0x236>
c0006e0d:	85 db                	test   ebx,ebx
c0006e0f:	0f 84 a3 00 00 00    	je     c0006eb8 <f_setlabel+0x265>
c0006e15:	ba 01 00 00 00       	mov    edx,0x1
c0006e1a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e1e:	e8 51 ca ff ff       	call   c0003874 <dir_alloc>
c0006e23:	89 c6                	mov    esi,eax
c0006e25:	85 c0                	test   eax,eax
c0006e27:	0f 85 8b 00 00 00    	jne    c0006eb8 <f_setlabel+0x265>
c0006e2d:	31 d2                	xor    edx,edx
c0006e2f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e33:	b9 20 00 00 00       	mov    ecx,0x20
c0006e38:	e8 e5 ab ff ff       	call   c0001a22 <mem_set>
c0006e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e41:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006e44:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e48:	75 18                	jne    c0006e62 <f_setlabel+0x20f>
c0006e4a:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006e4d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e51:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006e54:	b9 16 00 00 00       	mov    ecx,0x16
c0006e59:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e5d:	83 c0 02             	add    eax,0x2
c0006e60:	eb 9b                	jmp    c0006dfd <f_setlabel+0x1aa>
c0006e62:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006e66:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e6b:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e6f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e73:	e8 95 ab ff ff       	call   c0001a0d <mem_cpy>
c0006e78:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006e80:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e84:	e8 0e d4 ff ff       	call   c0004297 <sync_fs>
c0006e89:	89 c6                	mov    esi,eax
c0006e8b:	eb 2b                	jmp    c0006eb8 <f_setlabel+0x265>
c0006e8d:	83 fb 0a             	cmp    ebx,0xa
c0006e90:	0f 87 2f fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006e96:	89 f0                	mov    eax,esi
c0006e98:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006e9c:	43                   	inc    ebx
c0006e9d:	e9 85 fe ff ff       	jmp    c0006d27 <f_setlabel+0xd4>
c0006ea2:	83 fb 09             	cmp    ebx,0x9
c0006ea5:	0f 87 1a fe ff ff    	ja     c0006cc5 <f_setlabel+0x72>
c0006eab:	89 f0                	mov    eax,esi
c0006ead:	66 c1 e8 08          	shr    ax,0x8
c0006eb1:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006eb5:	43                   	inc    ebx
c0006eb6:	eb de                	jmp    c0006e96 <f_setlabel+0x243>
c0006eb8:	89 f0                	mov    eax,esi
c0006eba:	83 c4 74             	add    esp,0x74
c0006ebd:	5b                   	pop    ebx
c0006ebe:	5e                   	pop    esi
c0006ebf:	c3                   	ret    

c0006ec0 <f_forward>:
c0006ec0:	55                   	push   ebp
c0006ec1:	57                   	push   edi
c0006ec2:	56                   	push   esi
c0006ec3:	53                   	push   ebx
c0006ec4:	83 ec 2c             	sub    esp,0x2c
c0006ec7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ecb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006ecf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006ed5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006ed9:	89 d8                	mov    eax,ebx
c0006edb:	e8 b1 b1 ff ff       	call   c0002091 <validate>
c0006ee0:	89 c5                	mov    ebp,eax
c0006ee2:	85 c0                	test   eax,eax
c0006ee4:	0f 85 aa 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006eea:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006eee:	85 ed                	test   ebp,ebp
c0006ef0:	0f 85 9e 01 00 00    	jne    c0007094 <f_forward+0x1d4>
c0006ef6:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006efa:	0f 84 8f 01 00 00    	je     c000708f <f_forward+0x1cf>
c0006f00:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f03:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f06:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f09:	bf 00 00 00 00       	mov    edi,0x0
c0006f0e:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f11:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f15:	89 d1                	mov    ecx,edx
c0006f17:	19 f9                	sbb    ecx,edi
c0006f19:	0f 83 cf 00 00 00    	jae    c0006fee <f_forward+0x12e>
c0006f1f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f23:	e9 c6 00 00 00       	jmp    c0006fee <f_forward+0x12e>
c0006f28:	50                   	push   eax
c0006f29:	50                   	push   eax
c0006f2a:	6a 00                	push   0x0
c0006f2c:	6a 00                	push   0x0
c0006f2e:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006f32:	83 c4 10             	add    esp,0x10
c0006f35:	85 c0                	test   eax,eax
c0006f37:	0f 84 57 01 00 00    	je     c0007094 <f_forward+0x1d4>
c0006f3d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006f40:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f44:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006f47:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006f4b:	89 d7                	mov    edi,edx
c0006f4d:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006f50:	89 c6                	mov    esi,eax
c0006f52:	0f ac fe 09          	shrd   esi,edi,0x9
c0006f56:	21 ce                	and    esi,ecx
c0006f58:	89 c1                	mov    ecx,eax
c0006f5a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006f60:	0f 84 98 00 00 00    	je     c0006ffe <f_forward+0x13e>
c0006f66:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006f6a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006f6d:	89 c8                	mov    eax,ecx
c0006f6f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006f73:	e8 af ac ff ff       	call   c0001c27 <clst2sect>
c0006f78:	89 d7                	mov    edi,edx
c0006f7a:	09 c7                	or     edi,eax
c0006f7c:	0f 84 9e 00 00 00    	je     c0007020 <f_forward+0x160>
c0006f82:	31 ff                	xor    edi,edi
c0006f84:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0006f87:	01 c6                	add    esi,eax
c0006f89:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0006f8d:	11 d7                	adc    edi,edx
c0006f8f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0006f92:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0006f95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006f99:	39 fa                	cmp    edx,edi
c0006f9b:	0f 85 a2 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa1:	39 f0                	cmp    eax,esi
c0006fa3:	0f 85 9a 00 00 00    	jne    c0007043 <f_forward+0x183>
c0006fa9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fac:	ba 00 02 00 00       	mov    edx,0x200
c0006fb1:	25 ff 01 00 00       	and    eax,0x1ff
c0006fb6:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0006fba:	29 c2                	sub    edx,eax
c0006fbc:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0006fbf:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0006fc2:	39 d1                	cmp    ecx,edx
c0006fc4:	76 02                	jbe    c0006fc8 <f_forward+0x108>
c0006fc6:	89 d1                	mov    ecx,edx
c0006fc8:	8d 73 50             	lea    esi,[ebx+0x50]
c0006fcb:	52                   	push   edx
c0006fcc:	01 c6                	add    esi,eax
c0006fce:	52                   	push   edx
c0006fcf:	51                   	push   ecx
c0006fd0:	56                   	push   esi
c0006fd1:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fd5:	83 c4 10             	add    esp,0x10
c0006fd8:	85 c0                	test   eax,eax
c0006fda:	74 44                	je     c0007020 <f_forward+0x160>
c0006fdc:	31 ff                	xor    edi,edi
c0006fde:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0006fe1:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0006fe4:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0006fe8:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0006fec:	01 07                	add    DWORD PTR [edi],eax
c0006fee:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0006ff3:	0f 85 2f ff ff ff    	jne    c0006f28 <f_forward+0x68>
c0006ff9:	e9 96 00 00 00       	jmp    c0007094 <f_forward+0x1d4>
c0006ffe:	85 f6                	test   esi,esi
c0007000:	0f 85 60 ff ff ff    	jne    c0006f66 <f_forward+0xa6>
c0007006:	89 d7                	mov    edi,edx
c0007008:	09 c7                	or     edi,eax
c000700a:	75 05                	jne    c0007011 <f_forward+0x151>
c000700c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000700f:	eb 0a                	jmp    c000701b <f_forward+0x15b>
c0007011:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007014:	89 d8                	mov    eax,ebx
c0007016:	e8 d9 bc ff ff       	call   c0002cf4 <get_fat>
c000701b:	83 f8 01             	cmp    eax,0x1
c000701e:	77 0b                	ja     c000702b <f_forward+0x16b>
c0007020:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007024:	bd 02 00 00 00       	mov    ebp,0x2
c0007029:	eb 69                	jmp    c0007094 <f_forward+0x1d4>
c000702b:	83 f8 ff             	cmp    eax,0xffffffff
c000702e:	75 0b                	jne    c000703b <f_forward+0x17b>
c0007030:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007034:	bd 01 00 00 00       	mov    ebp,0x1
c0007039:	eb 59                	jmp    c0007094 <f_forward+0x1d4>
c000703b:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000703e:	e9 23 ff ff ff       	jmp    c0006f66 <f_forward+0xa6>
c0007043:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0007047:	79 20                	jns    c0007069 <f_forward+0x1a9>
c0007049:	83 ec 0c             	sub    esp,0xc
c000704c:	6a 01                	push   0x1
c000704e:	52                   	push   edx
c000704f:	50                   	push   eax
c0007050:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007054:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0007058:	50                   	push   eax
c0007059:	e8 fb a8 ff ff       	call   c0001959 <disk_write>
c000705e:	83 c4 20             	add    esp,0x20
c0007061:	85 c0                	test   eax,eax
c0007063:	75 cb                	jne    c0007030 <f_forward+0x170>
c0007065:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0007069:	83 ec 0c             	sub    esp,0xc
c000706c:	6a 01                	push   0x1
c000706e:	57                   	push   edi
c000706f:	56                   	push   esi
c0007070:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007074:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007078:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000707c:	50                   	push   eax
c000707d:	e8 c1 a8 ff ff       	call   c0001943 <disk_read>
c0007082:	83 c4 20             	add    esp,0x20
c0007085:	85 c0                	test   eax,eax
c0007087:	0f 84 1c ff ff ff    	je     c0006fa9 <f_forward+0xe9>
c000708d:	eb a1                	jmp    c0007030 <f_forward+0x170>
c000708f:	bd 07 00 00 00       	mov    ebp,0x7
c0007094:	83 c4 2c             	add    esp,0x2c
c0007097:	89 e8                	mov    eax,ebp
c0007099:	5b                   	pop    ebx
c000709a:	5e                   	pop    esi
c000709b:	5f                   	pop    edi
c000709c:	5d                   	pop    ebp
c000709d:	c3                   	ret    

c000709e <f_mkfs>:
c000709e:	55                   	push   ebp
c000709f:	57                   	push   edi
c00070a0:	56                   	push   esi
c00070a1:	53                   	push   ebx
c00070a2:	bb 0b 00 00 00       	mov    ebx,0xb
c00070a7:	81 ec 9c 00 00 00    	sub    esp,0x9c
c00070ad:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c00070b4:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c00070bb:	e8 b0 ae ff ff       	call   c0001f70 <get_ldnumber>
c00070c0:	85 c0                	test   eax,eax
c00070c2:	0f 88 ec 10 00 00    	js     c00081b4 <f_mkfs+0x1116>
c00070c8:	8b 14 85 60 2e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd1a0]
c00070cf:	85 d2                	test   edx,edx
c00070d1:	74 03                	je     c00070d6 <f_mkfs+0x38>
c00070d3:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00070d6:	85 f6                	test   esi,esi
c00070d8:	75 05                	jne    c00070df <f_mkfs+0x41>
c00070da:	be e0 f0 01 c0       	mov    esi,0xc001f0e0
c00070df:	83 ec 0c             	sub    esp,0xc
c00070e2:	0f b6 c0             	movzx  eax,al
c00070e5:	bb 03 00 00 00       	mov    ebx,0x3
c00070ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00070ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00070f2:	e8 49 a8 ff ff       	call   c0001940 <disk_initialize>
c00070f7:	83 c4 10             	add    esp,0x10
c00070fa:	a8 01                	test   al,0x1
c00070fc:	0f 85 b2 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c0007102:	bb 0a 00 00 00       	mov    ebx,0xa
c0007107:	a8 04                	test   al,0x4
c0007109:	0f 85 a5 10 00 00    	jne    c00081b4 <f_mkfs+0x1116>
c000710f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007112:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0007116:	85 c0                	test   eax,eax
c0007118:	75 20                	jne    c000713a <f_mkfs+0x9c>
c000711a:	51                   	push   ecx
c000711b:	8d 44 24 78          	lea    eax,[esp+0x78]
c000711f:	50                   	push   eax
c0007120:	6a 03                	push   0x3
c0007122:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007126:	e8 44 a8 ff ff       	call   c000196f <disk_ioctl>
c000712b:	83 c4 10             	add    esp,0x10
c000712e:	85 c0                	test   eax,eax
c0007130:	74 08                	je     c000713a <f_mkfs+0x9c>
c0007132:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000713a:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c000713e:	8d 42 ff             	lea    eax,[edx-0x1]
c0007141:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007146:	77 04                	ja     c000714c <f_mkfs+0xae>
c0007148:	85 c2                	test   edx,eax
c000714a:	74 08                	je     c0007154 <f_mkfs+0xb6>
c000714c:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007154:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0007157:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000715b:	48                   	dec    eax
c000715c:	3c 01                	cmp    al,0x1
c000715e:	76 05                	jbe    c0007165 <f_mkfs+0xc7>
c0007160:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007165:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0007168:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000716c:	48                   	dec    eax
c000716d:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007172:	77 07                	ja     c000717b <f_mkfs+0xdd>
c0007174:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c0007179:	74 08                	je     c0007183 <f_mkfs+0xe5>
c000717b:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007183:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007186:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000718c:	77 07                	ja     c0007195 <f_mkfs+0xf7>
c000718e:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007191:	85 d8                	test   eax,ebx
c0007193:	74 02                	je     c0007197 <f_mkfs+0xf9>
c0007195:	31 db                	xor    ebx,ebx
c0007197:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c00071a2:	77 0a                	ja     c00071ae <f_mkfs+0x110>
c00071a4:	bb 11 00 00 00       	mov    ebx,0x11
c00071a9:	e9 06 10 00 00       	jmp    c00081b4 <f_mkfs+0x1116>
c00071ae:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c00071b5:	8b 36                	mov    esi,DWORD PTR [esi]
c00071b7:	85 ed                	test   ebp,ebp
c00071b9:	75 1e                	jne    c00071d9 <f_mkfs+0x13b>
c00071bb:	83 ec 0c             	sub    esp,0xc
c00071be:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c00071c5:	25 00 fe ff ff       	and    eax,0xfffffe00
c00071ca:	50                   	push   eax
c00071cb:	e8 f1 0f 00 00       	call   c00081c1 <ff_memalloc>
c00071d0:	83 c4 10             	add    esp,0x10
c00071d3:	89 c5                	mov    ebp,eax
c00071d5:	85 c0                	test   eax,eax
c00071d7:	74 cb                	je     c00071a4 <f_mkfs+0x106>
c00071d9:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00071e1:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00071e9:	52                   	push   edx
c00071ea:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00071ee:	50                   	push   eax
c00071ef:	6a 01                	push   0x1
c00071f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071f5:	e8 75 a7 ff ff       	call   c000196f <disk_ioctl>
c00071fa:	83 c4 10             	add    esp,0x10
c00071fd:	85 c0                	test   eax,eax
c00071ff:	0f 85 4a 0f 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007205:	89 f1                	mov    ecx,esi
c0007207:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000720f:	83 e1 0f             	and    ecx,0xf
c0007212:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000721a:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c000721e:	83 e6 08             	and    esi,0x8
c0007221:	75 56                	jne    c0007279 <f_mkfs+0x1db>
c0007223:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c0007227:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c000722b:	83 ff 00             	cmp    edi,0x0
c000722e:	76 20                	jbe    c0007250 <f_mkfs+0x1b2>
c0007230:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007235:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c000723d:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007243:	83 d7 ff             	adc    edi,0xffffffff
c0007246:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000724a:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c000724e:	eb 21                	jmp    c0007271 <f_mkfs+0x1d3>
c0007250:	ba 3f 00 00 00       	mov    edx,0x3f
c0007255:	39 f2                	cmp    edx,esi
c0007257:	19 f8                	sbb    eax,edi
c0007259:	73 1e                	jae    c0007279 <f_mkfs+0x1db>
c000725b:	83 c6 c1             	add    esi,0xffffffc1
c000725e:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007266:	83 d7 ff             	adc    edi,0xffffffff
c0007269:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000726d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007271:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007279:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000727d:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007281:	89 04 24             	mov    DWORD PTR [esp],eax
c0007284:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007288:	31 c0                	xor    eax,eax
c000728a:	ba 7f 00 00 00       	mov    edx,0x7f
c000728f:	89 c7                	mov    edi,eax
c0007291:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007294:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007298:	0f 83 c5 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c000729e:	89 df                	mov    edi,ebx
c00072a0:	c1 ef 09             	shr    edi,0x9
c00072a3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00072a7:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c00072ae:	c1 ef 09             	shr    edi,0x9
c00072b1:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c00072b6:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c00072ba:	74 29                	je     c00072e5 <f_mkfs+0x247>
c00072bc:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072c2:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c00072c7:	0f 97 c2             	seta   dl
c00072ca:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00072cd:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00072d1:	0f 92 c0             	setb   al
c00072d4:	08 c2                	or     dl,al
c00072d6:	75 5b                	jne    c0007333 <f_mkfs+0x295>
c00072d8:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00072dc:	83 e0 07             	and    eax,0x7
c00072df:	3c 04                	cmp    al,0x4
c00072e1:	74 50                	je     c0007333 <f_mkfs+0x295>
c00072e3:	eb 1b                	jmp    c0007300 <f_mkfs+0x262>
c00072e5:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00072ea:	0f 87 73 0a 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c00072f0:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00072f6:	76 08                	jbe    c0007300 <f_mkfs+0x262>
c00072f8:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007300:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007304:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c0007308:	83 e0 01             	and    eax,0x1
c000730b:	80 e1 02             	and    cl,0x2
c000730e:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007312:	74 0d                	je     c0007321 <f_mkfs+0x283>
c0007314:	84 c0                	test   al,al
c0007316:	0f 84 53 09 00 00    	je     c0007c6f <f_mkfs+0xbd1>
c000731c:	e9 12 08 00 00       	jmp    c0007b33 <f_mkfs+0xa95>
c0007321:	bb 13 00 00 00       	mov    ebx,0x13
c0007326:	84 c0                	test   al,al
c0007328:	0f 85 05 08 00 00    	jne    c0007b33 <f_mkfs+0xa95>
c000732e:	e9 39 0e 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007333:	31 c0                	xor    eax,eax
c0007335:	ba ff 0f 00 00       	mov    edx,0xfff
c000733a:	89 c7                	mov    edi,eax
c000733c:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c000733f:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007343:	0f 83 1a 0a 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007349:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c000734f:	77 39                	ja     c000738a <f_mkfs+0x2ec>
c0007351:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007356:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c000735e:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007361:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007365:	73 08                	jae    c000736f <f_mkfs+0x2d1>
c0007367:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c000736f:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007374:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0007377:	b8 00 00 00 00       	mov    eax,0x0
c000737c:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007380:	73 08                	jae    c000738a <f_mkfs+0x2ec>
c0007382:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000738a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000738e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007392:	83 c0 20             	add    eax,0x20
c0007395:	83 d2 00             	adc    edx,0x0
c0007398:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000739c:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c00073a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00073a4:	31 d2                	xor    edx,edx
c00073a6:	31 ff                	xor    edi,edi
c00073a8:	52                   	push   edx
c00073a9:	89 fb                	mov    ebx,edi
c00073ab:	50                   	push   eax
c00073ac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00073b4:	e8 13 6d 01 00       	call   c001e0cc <__udivdi3>
c00073b9:	83 c4 10             	add    esp,0x10
c00073bc:	c1 e0 02             	shl    eax,0x2
c00073bf:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c00073c3:	05 07 02 00 00       	add    eax,0x207
c00073c8:	89 f1                	mov    ecx,esi
c00073ca:	c1 e8 09             	shr    eax,0x9
c00073cd:	83 c1 ff             	add    ecx,0xffffffff
c00073d0:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00073d4:	83 d3 ff             	adc    ebx,0xffffffff
c00073d7:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00073db:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00073df:	31 d2                	xor    edx,edx
c00073e1:	01 c8                	add    eax,ecx
c00073e3:	11 da                	adc    edx,ebx
c00073e5:	89 c1                	mov    ecx,eax
c00073e7:	f7 de                	neg    esi
c00073e9:	89 d0                	mov    eax,edx
c00073eb:	83 d7 00             	adc    edi,0x0
c00073ee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00073f2:	f7 df                	neg    edi
c00073f4:	21 f1                	and    ecx,esi
c00073f6:	21 f8                	and    eax,edi
c00073f8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00073fc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007400:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007404:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0007408:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c000740c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000740f:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007413:	0f ac d0 01          	shrd   eax,edx,0x1
c0007417:	89 df                	mov    edi,ebx
c0007419:	d1 ea                	shr    edx,1
c000741b:	39 c1                	cmp    ecx,eax
c000741d:	19 d7                	sbb    edi,edx
c000741f:	0f 83 3e 09 00 00    	jae    c0007d63 <f_mkfs+0xcc5>
c0007425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007429:	31 d2                	xor    edx,edx
c000742b:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c000742f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007433:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c0007437:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000743a:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c000743e:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007442:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007446:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000744a:	83 f8 0f             	cmp    eax,0xf
c000744d:	0f 86 10 09 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007453:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000745b:	0f 87 02 09 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007461:	31 d2                	xor    edx,edx
c0007463:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007467:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000746f:	83 c0 07             	add    eax,0x7
c0007472:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000747a:	c1 e8 03             	shr    eax,0x3
c000747d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007484:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0007488:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000748c:	c1 e0 09             	shl    eax,0x9
c000748f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007493:	48                   	dec    eax
c0007494:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007498:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000749c:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c00074a0:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00074a4:	31 d2                	xor    edx,edx
c00074a6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00074aa:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00074b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074b5:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00074ba:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00074be:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00074c2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00074c6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c00074ca:	31 ff                	xor    edi,edi
c00074cc:	31 f6                	xor    esi,esi
c00074ce:	31 db                	xor    ebx,ebx
c00074d0:	85 ff                	test   edi,edi
c00074d2:	74 05                	je     c00074d9 <f_mkfs+0x43b>
c00074d4:	4f                   	dec    edi
c00074d5:	74 44                	je     c000751b <f_mkfs+0x47d>
c00074d7:	eb 4f                	jmp    c0007528 <f_mkfs+0x48a>
c00074d9:	83 ec 0c             	sub    esp,0xc
c00074dc:	0f b7 c3             	movzx  eax,bx
c00074df:	50                   	push   eax
c00074e0:	e8 05 0e 00 00       	call   c00082ea <ff_wtoupper>
c00074e5:	83 c4 10             	add    esp,0x10
c00074e8:	89 c1                	mov    ecx,eax
c00074ea:	8d 53 01             	lea    edx,[ebx+0x1]
c00074ed:	66 39 c3             	cmp    bx,ax
c00074f0:	75 3e                	jne    c0007530 <f_mkfs+0x492>
c00074f2:	be 01 00 00 00       	mov    esi,0x1
c00074f7:	89 df                	mov    edi,ebx
c00074f9:	66 01 f7             	add    di,si
c00074fc:	75 07                	jne    c0007505 <f_mkfs+0x467>
c00074fe:	83 fe 7f             	cmp    esi,0x7f
c0007501:	77 31                	ja     c0007534 <f_mkfs+0x496>
c0007503:	eb 16                	jmp    c000751b <f_mkfs+0x47d>
c0007505:	83 ec 0c             	sub    esp,0xc
c0007508:	0f b7 ff             	movzx  edi,di
c000750b:	57                   	push   edi
c000750c:	e8 d9 0d 00 00       	call   c00082ea <ff_wtoupper>
c0007511:	83 c4 10             	add    esp,0x10
c0007514:	39 c7                	cmp    edi,eax
c0007516:	75 e6                	jne    c00074fe <f_mkfs+0x460>
c0007518:	46                   	inc    esi
c0007519:	eb dc                	jmp    c00074f7 <f_mkfs+0x459>
c000751b:	31 c0                	xor    eax,eax
c000751d:	89 d9                	mov    ecx,ebx
c000751f:	4e                   	dec    esi
c0007520:	0f 95 c0             	setne  al
c0007523:	43                   	inc    ebx
c0007524:	89 c7                	mov    edi,eax
c0007526:	eb 14                	jmp    c000753c <f_mkfs+0x49e>
c0007528:	89 f1                	mov    ecx,esi
c000752a:	01 f3                	add    ebx,esi
c000752c:	31 ff                	xor    edi,edi
c000752e:	eb 0c                	jmp    c000753c <f_mkfs+0x49e>
c0007530:	89 d3                	mov    ebx,edx
c0007532:	eb 08                	jmp    c000753c <f_mkfs+0x49e>
c0007534:	bf 02 00 00 00       	mov    edi,0x2
c0007539:	83 c9 ff             	or     ecx,0xffffffff
c000753c:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007540:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007543:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c0007547:	0f b6 c1             	movzx  eax,cl
c000754a:	e8 3a a9 ff ff       	call   c0001e89 <xsum32>
c000754f:	66 c1 e9 08          	shr    cx,0x8
c0007553:	89 c2                	mov    edx,eax
c0007555:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007558:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000755c:	0f b7 c1             	movzx  eax,cx
c000755f:	e8 25 a9 ff ff       	call   c0001e89 <xsum32>
c0007564:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c0007569:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000756d:	66 85 db             	test   bx,bx
c0007570:	74 1f                	je     c0007591 <f_mkfs+0x4f3>
c0007572:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007575:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000757c:	83 c0 02             	add    eax,0x2
c000757f:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007585:	39 c2                	cmp    edx,eax
c0007587:	74 08                	je     c0007591 <f_mkfs+0x4f3>
c0007589:	89 04 24             	mov    DWORD PTR [esp],eax
c000758c:	e9 3f ff ff ff       	jmp    c00074d0 <f_mkfs+0x432>
c0007591:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007594:	83 ec 0c             	sub    esp,0xc
c0007597:	05 01 02 00 00       	add    eax,0x201
c000759c:	c1 e8 09             	shr    eax,0x9
c000759f:	50                   	push   eax
c00075a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00075a4:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075a8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00075ac:	55                   	push   ebp
c00075ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075b1:	e8 a3 a3 ff ff       	call   c0001959 <disk_write>
c00075b6:	83 c4 20             	add    esp,0x20
c00075b9:	85 c0                	test   eax,eax
c00075bb:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00075be:	0f 85 8b 0b 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00075c4:	89 d0                	mov    eax,edx
c00075c6:	31 d2                	xor    edx,edx
c00075c8:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c00075cc:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00075d0:	66 85 db             	test   bx,bx
c00075d3:	74 04                	je     c00075d9 <f_mkfs+0x53b>
c00075d5:	31 c0                	xor    eax,eax
c00075d7:	eb b0                	jmp    c0007589 <f_mkfs+0x4eb>
c00075d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00075dd:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00075e1:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00075e5:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00075eb:	31 d2                	xor    edx,edx
c00075ed:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00075f8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00075fc:	c1 eb 09             	shr    ebx,0x9
c00075ff:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007606:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000760a:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000760e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007612:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007616:	8d 70 01             	lea    esi,[eax+0x1]
c0007619:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000761d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007621:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007628:	31 d2                	xor    edx,edx
c000762a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000762f:	89 04 24             	mov    DWORD PTR [esp],eax
c0007632:	89 c1                	mov    ecx,eax
c0007634:	89 e8                	mov    eax,ebp
c0007636:	e8 e7 a3 ff ff       	call   c0001a22 <mem_set>
c000763b:	31 c0                	xor    eax,eax
c000763d:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007640:	76 10                	jbe    c0007652 <f_mkfs+0x5b4>
c0007642:	83 fe 07             	cmp    esi,0x7
c0007645:	76 0b                	jbe    c0007652 <f_mkfs+0x5b4>
c0007647:	40                   	inc    eax
c0007648:	83 ee 08             	sub    esi,0x8
c000764b:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007650:	eb eb                	jmp    c000763d <f_mkfs+0x59f>
c0007652:	b2 01                	mov    dl,0x1
c0007654:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c0007658:	85 f6                	test   esi,esi
c000765a:	74 0c                	je     c0007668 <f_mkfs+0x5ca>
c000765c:	39 04 24             	cmp    DWORD PTR [esp],eax
c000765f:	76 07                	jbe    c0007668 <f_mkfs+0x5ca>
c0007661:	08 11                	or     BYTE PTR [ecx],dl
c0007663:	4e                   	dec    esi
c0007664:	d1 e2                	shl    edx,1
c0007666:	eb f0                	jmp    c0007658 <f_mkfs+0x5ba>
c0007668:	89 df                	mov    edi,ebx
c000766a:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c000766e:	76 04                	jbe    c0007674 <f_mkfs+0x5d6>
c0007670:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007674:	83 ec 0c             	sub    esp,0xc
c0007677:	57                   	push   edi
c0007678:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000767c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007680:	55                   	push   ebp
c0007681:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007685:	e8 cf a2 ff ff       	call   c0001959 <disk_write>
c000768a:	83 c4 20             	add    esp,0x20
c000768d:	85 c0                	test   eax,eax
c000768f:	0f 85 ba 0a 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007695:	31 d2                	xor    edx,edx
c0007697:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000769b:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c000769f:	29 fb                	sub    ebx,edi
c00076a1:	0f 85 7a ff ff ff    	jne    c0007621 <f_mkfs+0x583>
c00076a7:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00076ab:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00076b3:	31 f6                	xor    esi,esi
c00076b5:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00076b9:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00076bc:	31 d2                	xor    edx,edx
c00076be:	89 e8                	mov    eax,ebp
c00076c0:	e8 5d a3 ff ff       	call   c0001a22 <mem_set>
c00076c5:	31 c9                	xor    ecx,ecx
c00076c7:	85 db                	test   ebx,ebx
c00076c9:	75 40                	jne    c000770b <f_mkfs+0x66d>
c00076cb:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00076d0:	89 e8                	mov    eax,ebp
c00076d2:	bb 02 00 00 00       	mov    ebx,0x2
c00076d7:	e8 28 a3 ff ff       	call   c0001a04 <st_dword>
c00076dc:	8d 45 04             	lea    eax,[ebp+0x4]
c00076df:	83 ca ff             	or     edx,0xffffffff
c00076e2:	e8 1d a3 ff ff       	call   c0001a04 <st_dword>
c00076e7:	b9 08 00 00 00       	mov    ecx,0x8
c00076ec:	eb 1d                	jmp    c000770b <f_mkfs+0x66d>
c00076ee:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00076f1:	76 3b                	jbe    c000772e <f_mkfs+0x690>
c00076f3:	43                   	inc    ebx
c00076f4:	83 fe 01             	cmp    esi,0x1
c00076f7:	89 da                	mov    edx,ebx
c00076f9:	77 03                	ja     c00076fe <f_mkfs+0x660>
c00076fb:	83 ca ff             	or     edx,0xffffffff
c00076fe:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007702:	4e                   	dec    esi
c0007703:	e8 fc a2 ff ff       	call   c0001a04 <st_dword>
c0007708:	83 c1 04             	add    ecx,0x4
c000770b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000770f:	85 f6                	test   esi,esi
c0007711:	75 db                	jne    c00076ee <f_mkfs+0x650>
c0007713:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007718:	77 14                	ja     c000772e <f_mkfs+0x690>
c000771a:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000771e:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007725:	85 f6                	test   esi,esi
c0007727:	74 05                	je     c000772e <f_mkfs+0x690>
c0007729:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000772c:	77 dd                	ja     c000770b <f_mkfs+0x66d>
c000772e:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007732:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007736:	39 cf                	cmp    edi,ecx
c0007738:	76 02                	jbe    c000773c <f_mkfs+0x69e>
c000773a:	89 cf                	mov    edi,ecx
c000773c:	83 ec 0c             	sub    esp,0xc
c000773f:	57                   	push   edi
c0007740:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007744:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007748:	55                   	push   ebp
c0007749:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000774d:	e8 07 a2 ff ff       	call   c0001959 <disk_write>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	85 c0                	test   eax,eax
c0007757:	0f 85 f2 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c000775d:	31 d2                	xor    edx,edx
c000775f:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007763:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007767:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c000776b:	0f 85 48 ff ff ff    	jne    c00076b9 <f_mkfs+0x61b>
c0007771:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007774:	31 d2                	xor    edx,edx
c0007776:	89 e8                	mov    eax,ebp
c0007778:	31 ff                	xor    edi,edi
c000777a:	e8 a3 a2 ff ff       	call   c0001a22 <mem_set>
c000777f:	8d 45 34             	lea    eax,[ebp+0x34]
c0007782:	ba 02 00 00 00       	mov    edx,0x2
c0007787:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c000778b:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c000778f:	e8 70 a2 ff ff       	call   c0001a04 <st_dword>
c0007794:	8d 45 38             	lea    eax,[ebp+0x38]
c0007797:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000779b:	e8 64 a2 ff ff       	call   c0001a04 <st_dword>
c00077a0:	8d 45 44             	lea    eax,[ebp+0x44]
c00077a3:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077a7:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c00077ab:	e8 54 a2 ff ff       	call   c0001a04 <st_dword>
c00077b0:	8d 45 54             	lea    eax,[ebp+0x54]
c00077b3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00077b7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c00077bb:	83 c2 02             	add    edx,0x2
c00077be:	e8 41 a2 ff ff       	call   c0001a04 <st_dword>
c00077c3:	8d 45 58             	lea    eax,[ebp+0x58]
c00077c6:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00077ca:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00077ce:	e8 31 a2 ff ff       	call   c0001a04 <st_dword>
c00077d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077d7:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c00077dc:	89 c6                	mov    esi,eax
c00077de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00077e2:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c00077e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00077e9:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c00077ed:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00077f0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077f4:	39 cb                	cmp    ebx,ecx
c00077f6:	76 02                	jbe    c00077fa <f_mkfs+0x75c>
c00077f8:	89 cb                	mov    ebx,ecx
c00077fa:	83 ec 0c             	sub    esp,0xc
c00077fd:	53                   	push   ebx
c00077fe:	57                   	push   edi
c00077ff:	56                   	push   esi
c0007800:	55                   	push   ebp
c0007801:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007805:	e8 4f a1 ff ff       	call   c0001959 <disk_write>
c000780a:	83 c4 20             	add    esp,0x20
c000780d:	85 c0                	test   eax,eax
c000780f:	0f 85 3a 09 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007815:	31 d2                	xor    edx,edx
c0007817:	b9 00 02 00 00       	mov    ecx,0x200
c000781c:	89 e8                	mov    eax,ebp
c000781e:	e8 ff a1 ff ff       	call   c0001a22 <mem_set>
c0007823:	31 d2                	xor    edx,edx
c0007825:	01 de                	add    esi,ebx
c0007827:	11 d7                	adc    edi,edx
c0007829:	29 1c 24             	sub    DWORD PTR [esp],ebx
c000782c:	75 bf                	jne    c00077ed <f_mkfs+0x74f>
c000782e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007832:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007836:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c000783e:	b9 00 02 00 00       	mov    ecx,0x200
c0007843:	31 d2                	xor    edx,edx
c0007845:	89 e8                	mov    eax,ebp
c0007847:	e8 d6 a1 ff ff       	call   c0001a22 <mem_set>
c000784c:	b9 0b 00 00 00       	mov    ecx,0xb
c0007851:	ba c0 f1 01 c0       	mov    edx,0xc001f1c0
c0007856:	89 e8                	mov    eax,ebp
c0007858:	e8 b0 a1 ff ff       	call   c0001a0d <mem_cpy>
c000785d:	8d 45 40             	lea    eax,[ebp+0x40]
c0007860:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007864:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007868:	e8 9a a1 ff ff       	call   c0001a07 <st_qword>
c000786d:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007871:	8d 45 48             	lea    eax,[ebp+0x48]
c0007874:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007878:	e8 8a a1 ff ff       	call   c0001a07 <st_qword>
c000787d:	8d 45 50             	lea    eax,[ebp+0x50]
c0007880:	ba 20 00 00 00       	mov    edx,0x20
c0007885:	e8 7a a1 ff ff       	call   c0001a04 <st_dword>
c000788a:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000788e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007892:	e8 6d a1 ff ff       	call   c0001a04 <st_dword>
c0007897:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000789b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000789f:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c00078a3:	e8 5c a1 ff ff       	call   c0001a04 <st_dword>
c00078a8:	8d 45 5c             	lea    eax,[ebp+0x5c]
c00078ab:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00078af:	e8 50 a1 ff ff       	call   c0001a04 <st_dword>
c00078b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b8:	8d 50 02             	lea    edx,[eax+0x2]
c00078bb:	8d 45 60             	lea    eax,[ebp+0x60]
c00078be:	e8 41 a1 ff ff       	call   c0001a04 <st_dword>
c00078c3:	8d 45 64             	lea    eax,[ebp+0x64]
c00078c6:	ba 00 00 21 50       	mov    edx,0x50210000
c00078cb:	e8 34 a1 ff ff       	call   c0001a04 <st_dword>
c00078d0:	8d 45 68             	lea    eax,[ebp+0x68]
c00078d3:	ba 00 01 00 00       	mov    edx,0x100
c00078d8:	e8 23 a1 ff ff       	call   c0001a00 <st_word>
c00078dd:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c00078e1:	b8 0a 00 00 00       	mov    eax,0xa
c00078e6:	48                   	dec    eax
c00078e7:	74 05                	je     c00078ee <f_mkfs+0x850>
c00078e9:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c00078ec:	eb f8                	jmp    c00078e6 <f_mkfs+0x848>
c00078ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00078f2:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c00078f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00078fa:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c00078fe:	74 05                	je     c0007905 <f_mkfs+0x867>
c0007900:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007903:	eb f5                	jmp    c00078fa <f_mkfs+0x85c>
c0007905:	8d 45 78             	lea    eax,[ebp+0x78]
c0007908:	ba eb fe 00 00       	mov    edx,0xfeeb
c000790d:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007913:	31 db                	xor    ebx,ebx
c0007915:	e8 e6 a0 ff ff       	call   c0001a00 <st_word>
c000791a:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007920:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	e8 d3 a0 ff ff       	call   c0001a00 <st_word>
c000792d:	31 c9                	xor    ecx,ecx
c000792f:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007932:	83 f8 01             	cmp    eax,0x1
c0007935:	76 13                	jbe    c000794a <f_mkfs+0x8ac>
c0007937:	83 f9 70             	cmp    ecx,0x70
c000793a:	74 0e                	je     c000794a <f_mkfs+0x8ac>
c000793c:	89 da                	mov    edx,ebx
c000793e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007943:	e8 41 a5 ff ff       	call   c0001e89 <xsum32>
c0007948:	89 c3                	mov    ebx,eax
c000794a:	41                   	inc    ecx
c000794b:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007951:	75 dc                	jne    c000792f <f_mkfs+0x891>
c0007953:	89 f0                	mov    eax,esi
c0007955:	89 fa                	mov    edx,edi
c0007957:	83 c0 01             	add    eax,0x1
c000795a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000795e:	83 d2 00             	adc    edx,0x0
c0007961:	83 ec 0c             	sub    esp,0xc
c0007964:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007968:	6a 01                	push   0x1
c000796a:	57                   	push   edi
c000796b:	56                   	push   esi
c000796c:	55                   	push   ebp
c000796d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007971:	e8 e3 9f ff ff       	call   c0001959 <disk_write>
c0007976:	83 c4 20             	add    esp,0x20
c0007979:	85 c0                	test   eax,eax
c000797b:	0f 85 ce 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007981:	31 d2                	xor    edx,edx
c0007983:	b9 00 02 00 00       	mov    ecx,0x200
c0007988:	89 e8                	mov    eax,ebp
c000798a:	e8 93 a0 ff ff       	call   c0001a22 <mem_set>
c000798f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007994:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007997:	e8 64 a0 ff ff       	call   c0001a00 <st_word>
c000799c:	89 f0                	mov    eax,esi
c000799e:	89 fa                	mov    edx,edi
c00079a0:	83 c0 09             	add    eax,0x9
c00079a3:	83 d2 00             	adc    edx,0x0
c00079a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00079a9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00079ad:	31 c9                	xor    ecx,ecx
c00079af:	41                   	inc    ecx
c00079b0:	89 da                	mov    edx,ebx
c00079b2:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c00079b7:	e8 cd a4 ff ff       	call   c0001e89 <xsum32>
c00079bc:	89 c3                	mov    ebx,eax
c00079be:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c4:	75 e9                	jne    c00079af <f_mkfs+0x911>
c00079c6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079ca:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00079ce:	83 c0 01             	add    eax,0x1
c00079d1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00079d5:	83 d2 00             	adc    edx,0x0
c00079d8:	83 ec 0c             	sub    esp,0xc
c00079db:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00079df:	6a 01                	push   0x1
c00079e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00079e9:	55                   	push   ebp
c00079ea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079ee:	e8 66 9f ff ff       	call   c0001959 <disk_write>
c00079f3:	83 c4 20             	add    esp,0x20
c00079f6:	85 c0                	test   eax,eax
c00079f8:	0f 85 51 07 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00079fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a02:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a06:	75 09                	jne    c0007a11 <f_mkfs+0x973>
c0007a08:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a0b:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a0f:	74 12                	je     c0007a23 <f_mkfs+0x985>
c0007a11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a15:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a19:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a1d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a21:	eb 8a                	jmp    c00079ad <f_mkfs+0x90f>
c0007a23:	31 d2                	xor    edx,edx
c0007a25:	b9 00 02 00 00       	mov    ecx,0x200
c0007a2a:	89 e8                	mov    eax,ebp
c0007a2c:	e8 f1 9f ff ff       	call   c0001a22 <mem_set>
c0007a31:	83 c6 0b             	add    esi,0xb
c0007a34:	83 d7 00             	adc    edi,0x0
c0007a37:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007a3b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007a3f:	31 c9                	xor    ecx,ecx
c0007a41:	41                   	inc    ecx
c0007a42:	89 da                	mov    edx,ebx
c0007a44:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a49:	e8 3b a4 ff ff       	call   c0001e89 <xsum32>
c0007a4e:	89 c3                	mov    ebx,eax
c0007a50:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a56:	75 e9                	jne    c0007a41 <f_mkfs+0x9a3>
c0007a58:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007a5b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007a5f:	83 c6 01             	add    esi,0x1
c0007a62:	83 d7 00             	adc    edi,0x0
c0007a65:	83 ec 0c             	sub    esp,0xc
c0007a68:	6a 01                	push   0x1
c0007a6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007a72:	55                   	push   ebp
c0007a73:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a77:	e8 dd 9e ff ff       	call   c0001959 <disk_write>
c0007a7c:	83 c4 20             	add    esp,0x20
c0007a7f:	85 c0                	test   eax,eax
c0007a81:	0f 85 c8 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007a87:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007a8b:	75 06                	jne    c0007a93 <f_mkfs+0x9f5>
c0007a8d:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007a91:	74 09                	je     c0007a9c <f_mkfs+0x9fe>
c0007a93:	89 34 24             	mov    DWORD PTR [esp],esi
c0007a96:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007a9a:	eb a3                	jmp    c0007a3f <f_mkfs+0x9a1>
c0007a9c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007aa0:	89 da                	mov    edx,ebx
c0007aa2:	01 e8                	add    eax,ebp
c0007aa4:	e8 5b 9f ff ff       	call   c0001a04 <st_dword>
c0007aa9:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007aae:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007ab6:	75 e4                	jne    c0007a9c <f_mkfs+0x9fe>
c0007ab8:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007abb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007abf:	83 c6 02             	add    esi,0x2
c0007ac2:	83 d7 00             	adc    edi,0x0
c0007ac5:	83 ec 0c             	sub    esp,0xc
c0007ac8:	6a 01                	push   0x1
c0007aca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ace:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007ad2:	55                   	push   ebp
c0007ad3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad7:	e8 7d 9e ff ff       	call   c0001959 <disk_write>
c0007adc:	83 c4 20             	add    esp,0x20
c0007adf:	85 c0                	test   eax,eax
c0007ae1:	0f 85 68 06 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ae7:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007aec:	74 0d                	je     c0007afb <f_mkfs+0xa5d>
c0007aee:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007af6:	e9 43 fd ff ff       	jmp    c000783e <f_mkfs+0x7a0>
c0007afb:	b1 07                	mov    cl,0x7
c0007afd:	e9 e3 05 00 00       	jmp    c00080e5 <f_mkfs+0x1047>
c0007b02:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b07:	0f 85 4f 02 00 00    	jne    c0007d5c <f_mkfs+0xcbe>
c0007b0d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b12:	0f 86 22 02 00 00    	jbe    c0007d3a <f_mkfs+0xc9c>
c0007b18:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b1d:	0f 85 81 06 00 00    	jne    c00081a4 <f_mkfs+0x1106>
c0007b23:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b26:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b2a:	83 f8 40             	cmp    eax,0x40
c0007b2d:	0f 87 51 06 00 00    	ja     c0008184 <f_mkfs+0x10e6>
c0007b33:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007b37:	85 ff                	test   edi,edi
c0007b39:	75 1c                	jne    c0007b57 <f_mkfs+0xab9>
c0007b3b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007b3e:	ba c0 f0 01 c0       	mov    edx,0xc001f0c0
c0007b43:	c1 e9 0c             	shr    ecx,0xc
c0007b46:	bf 01 00 00 00       	mov    edi,0x1
c0007b4b:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007b4e:	66 85 c0             	test   ax,ax
c0007b51:	0f 85 95 01 00 00    	jne    c0007cec <f_mkfs+0xc4e>
c0007b57:	31 d2                	xor    edx,edx
c0007b59:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007b5c:	f7 f7                	div    edi
c0007b5e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007b63:	0f 86 95 01 00 00    	jbe    c0007cfe <f_mkfs+0xc60>
c0007b69:	83 c0 02             	add    eax,0x2
c0007b6c:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007b71:	01 c0                	add    eax,eax
c0007b73:	05 ff 01 00 00       	add    eax,0x1ff
c0007b78:	be 01 00 00 00       	mov    esi,0x1
c0007b7d:	c1 e8 09             	shr    eax,0x9
c0007b80:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007b84:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007b88:	c1 e0 05             	shl    eax,0x5
c0007b8b:	c1 e8 09             	shr    eax,0x9
c0007b8e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007b92:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007b97:	31 d2                	xor    edx,edx
c0007b99:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007b9d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007ba1:	89 f0                	mov    eax,esi
c0007ba3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007ba7:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007bab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007baf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007bb3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007bb7:	31 d2                	xor    edx,edx
c0007bb9:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007bbe:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007bc2:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007bc6:	31 db                	xor    ebx,ebx
c0007bc8:	01 c8                	add    eax,ecx
c0007bca:	11 da                	adc    edx,ebx
c0007bcc:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007bd0:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007bd4:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007bd8:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007bdc:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007be0:	f7 da                	neg    edx
c0007be2:	21 d1                	and    ecx,edx
c0007be4:	29 d9                	sub    ecx,ebx
c0007be6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007beb:	0f 85 20 01 00 00    	jne    c0007d11 <f_mkfs+0xc73>
c0007bf1:	31 db                	xor    ebx,ebx
c0007bf3:	01 ce                	add    esi,ecx
c0007bf5:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007bf9:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007bfd:	31 d2                	xor    edx,edx
c0007bff:	89 f8                	mov    eax,edi
c0007c01:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c05:	c1 e0 04             	shl    eax,0x4
c0007c08:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c0c:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c10:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c14:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c18:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c1b:	19 d3                	sbb    ebx,edx
c0007c1d:	0f 82 40 01 00 00    	jb     c0007d63 <f_mkfs+0xcc5>
c0007c23:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c26:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c2a:	89 c8                	mov    eax,ecx
c0007c2c:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007c31:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007c35:	29 f0                	sub    eax,esi
c0007c37:	29 d0                	sub    eax,edx
c0007c39:	31 d2                	xor    edx,edx
c0007c3b:	f7 f7                	div    edi
c0007c3d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c42:	89 c3                	mov    ebx,eax
c0007c44:	0f 85 b8 fe ff ff    	jne    c0007b02 <f_mkfs+0xa64>
c0007c4a:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007c4f:	0f 87 1d 01 00 00    	ja     c0007d72 <f_mkfs+0xcd4>
c0007c55:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007c5a:	0f 85 03 01 00 00    	jne    c0007d63 <f_mkfs+0xcc5>
c0007c60:	83 ff 01             	cmp    edi,0x1
c0007c63:	0f 86 fa 00 00 00    	jbe    c0007d63 <f_mkfs+0xcc5>
c0007c69:	d1 ef                	shr    edi,1
c0007c6b:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007c6f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c73:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c76:	85 db                	test   ebx,ebx
c0007c78:	75 2d                	jne    c0007ca7 <f_mkfs+0xc09>
c0007c7a:	89 cb                	mov    ebx,ecx
c0007c7c:	ba d0 f0 01 c0       	mov    edx,0xc001f0d0
c0007c81:	c1 eb 11             	shr    ebx,0x11
c0007c84:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007c8c:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007c8f:	66 85 c0             	test   ax,ax
c0007c92:	74 11                	je     c0007ca5 <f_mkfs+0xc07>
c0007c94:	83 c2 02             	add    edx,0x2
c0007c97:	39 d8                	cmp    eax,ebx
c0007c99:	77 0a                	ja     c0007ca5 <f_mkfs+0xc07>
c0007c9b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007c9f:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007ca3:	eb e7                	jmp    c0007c8c <f_mkfs+0xbee>
c0007ca5:	31 db                	xor    ebx,ebx
c0007ca7:	31 d2                	xor    edx,edx
c0007ca9:	89 c8                	mov    eax,ecx
c0007cab:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007caf:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007cb6:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007cbb:	c1 ea 09             	shr    edx,0x9
c0007cbe:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007cc3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007cc7:	0f 87 96 00 00 00    	ja     c0007d63 <f_mkfs+0xcc5>
c0007ccd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cd1:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007cd9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007cdd:	be 20 00 00 00       	mov    esi,0x20
c0007ce2:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007ce7:	e9 a6 fe ff ff       	jmp    c0007b92 <f_mkfs+0xaf4>
c0007cec:	83 c2 02             	add    edx,0x2
c0007cef:	39 c8                	cmp    eax,ecx
c0007cf1:	0f 87 60 fe ff ff    	ja     c0007b57 <f_mkfs+0xab9>
c0007cf7:	01 ff                	add    edi,edi
c0007cf9:	e9 4d fe ff ff       	jmp    c0007b4b <f_mkfs+0xaad>
c0007cfe:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d01:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d06:	40                   	inc    eax
c0007d07:	d1 e8                	shr    eax,1
c0007d09:	83 c0 03             	add    eax,0x3
c0007d0c:	e9 62 fe ff ff       	jmp    c0007b73 <f_mkfs+0xad5>
c0007d11:	31 d2                	xor    edx,edx
c0007d13:	89 c8                	mov    eax,ecx
c0007d15:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d19:	85 d2                	test   edx,edx
c0007d1b:	74 0c                	je     c0007d29 <f_mkfs+0xc8b>
c0007d1d:	49                   	dec    ecx
c0007d1e:	46                   	inc    esi
c0007d1f:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d24:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d29:	89 c8                	mov    eax,ecx
c0007d2b:	31 d2                	xor    edx,edx
c0007d2d:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007d31:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007d35:	e9 c3 fe ff ff       	jmp    c0007bfd <f_mkfs+0xb5f>
c0007d3a:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d3f:	77 31                	ja     c0007d72 <f_mkfs+0xcd4>
c0007d41:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007d46:	75 1b                	jne    c0007d63 <f_mkfs+0xcc5>
c0007d48:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007d4b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007d4f:	3d 80 00 00 00       	cmp    eax,0x80
c0007d54:	0f 86 d9 fd ff ff    	jbe    c0007b33 <f_mkfs+0xa95>
c0007d5a:	eb 07                	jmp    c0007d63 <f_mkfs+0xcc5>
c0007d5c:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007d61:	76 0a                	jbe    c0007d6d <f_mkfs+0xccf>
c0007d63:	bb 0e 00 00 00       	mov    ebx,0xe
c0007d68:	e9 ff 03 00 00       	jmp    c000816c <f_mkfs+0x10ce>
c0007d6d:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d72:	31 d2                	xor    edx,edx
c0007d74:	b9 00 02 00 00       	mov    ecx,0x200
c0007d79:	89 e8                	mov    eax,ebp
c0007d7b:	e8 a2 9c ff ff       	call   c0001a22 <mem_set>
c0007d80:	b9 0b 00 00 00       	mov    ecx,0xb
c0007d85:	ba e2 f1 01 c0       	mov    edx,0xc001f1e2
c0007d8a:	89 e8                	mov    eax,ebp
c0007d8c:	e8 7c 9c ff ff       	call   c0001a0d <mem_cpy>
c0007d91:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007d94:	ba 00 02 00 00       	mov    edx,0x200
c0007d99:	e8 62 9c ff ff       	call   c0001a00 <st_word>
c0007d9e:	89 f8                	mov    eax,edi
c0007da0:	0f b7 d6             	movzx  edx,si
c0007da3:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007da6:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007da9:	e8 52 9c ff ff       	call   c0001a00 <st_word>
c0007dae:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0007db2:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007db7:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007dba:	75 08                	jne    c0007dc4 <f_mkfs+0xd26>
c0007dbc:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007dc4:	8d 45 11             	lea    eax,[ebp+0x11]
c0007dc7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007dcb:	e8 30 9c ff ff       	call   c0001a00 <st_word>
c0007dd0:	b8 ff ff 00 00       	mov    eax,0xffff
c0007dd5:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007dd9:	39 d0                	cmp    eax,edx
c0007ddb:	b8 00 00 00 00       	mov    eax,0x0
c0007de0:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007de4:	72 0a                	jb     c0007df0 <f_mkfs+0xd52>
c0007de6:	8d 45 13             	lea    eax,[ebp+0x13]
c0007de9:	e8 12 9c ff ff       	call   c0001a00 <st_word>
c0007dee:	eb 08                	jmp    c0007df8 <f_mkfs+0xd5a>
c0007df0:	8d 45 20             	lea    eax,[ebp+0x20]
c0007df3:	e8 0c 9c ff ff       	call   c0001a04 <st_dword>
c0007df8:	8d 45 18             	lea    eax,[ebp+0x18]
c0007dfb:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e00:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e04:	e8 f7 9b ff ff       	call   c0001a00 <st_word>
c0007e09:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e0c:	ba ff 00 00 00       	mov    edx,0xff
c0007e11:	e8 ea 9b ff ff       	call   c0001a00 <st_word>
c0007e16:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e19:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e1d:	e8 e2 9b ff ff       	call   c0001a04 <st_dword>
c0007e22:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e27:	75 57                	jne    c0007e80 <f_mkfs+0xde2>
c0007e29:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e31:	e8 ce 9b ff ff       	call   c0001a04 <st_dword>
c0007e36:	8d 45 24             	lea    eax,[ebp+0x24]
c0007e39:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007e3d:	e8 c2 9b ff ff       	call   c0001a04 <st_dword>
c0007e42:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007e45:	ba 02 00 00 00       	mov    edx,0x2
c0007e4a:	e8 b5 9b ff ff       	call   c0001a04 <st_dword>
c0007e4f:	8d 45 30             	lea    eax,[ebp+0x30]
c0007e52:	ba 01 00 00 00       	mov    edx,0x1
c0007e57:	e8 a4 9b ff ff       	call   c0001a00 <st_word>
c0007e5c:	8d 45 32             	lea    eax,[ebp+0x32]
c0007e5f:	ba 06 00 00 00       	mov    edx,0x6
c0007e64:	e8 97 9b ff ff       	call   c0001a00 <st_word>
c0007e69:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007e6d:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007e71:	8d 45 47             	lea    eax,[ebp+0x47]
c0007e74:	b9 13 00 00 00       	mov    ecx,0x13
c0007e79:	ba ee f1 01 c0       	mov    edx,0xc001f1ee
c0007e7e:	eb 2f                	jmp    c0007eaf <f_mkfs+0xe11>
c0007e80:	8d 45 27             	lea    eax,[ebp+0x27]
c0007e83:	ba 00 00 21 50       	mov    edx,0x50210000
c0007e88:	e8 77 9b ff ff       	call   c0001a04 <st_dword>
c0007e8d:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007e92:	8d 45 16             	lea    eax,[ebp+0x16]
c0007e95:	e8 66 9b ff ff       	call   c0001a00 <st_word>
c0007e9a:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007e9e:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007ea2:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007ea5:	b9 13 00 00 00       	mov    ecx,0x13
c0007eaa:	ba 02 f2 01 c0       	mov    edx,0xc001f202
c0007eaf:	e8 59 9b ff ff       	call   c0001a0d <mem_cpy>
c0007eb4:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007eba:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007ebf:	89 f0                	mov    eax,esi
c0007ec1:	e8 3a 9b ff ff       	call   c0001a00 <st_word>
c0007ec6:	83 ec 0c             	sub    esp,0xc
c0007ec9:	6a 01                	push   0x1
c0007ecb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ecf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007ed3:	55                   	push   ebp
c0007ed4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ed8:	e8 7c 9a ff ff       	call   c0001959 <disk_write>
c0007edd:	83 c4 20             	add    esp,0x20
c0007ee0:	85 c0                	test   eax,eax
c0007ee2:	0f 85 67 02 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0007ee8:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007eed:	0f 85 b7 00 00 00    	jne    c0007faa <f_mkfs+0xf0c>
c0007ef3:	83 ec 0c             	sub    esp,0xc
c0007ef6:	6a 01                	push   0x1
c0007ef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007efc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f00:	83 c0 06             	add    eax,0x6
c0007f03:	83 d2 00             	adc    edx,0x0
c0007f06:	52                   	push   edx
c0007f07:	50                   	push   eax
c0007f08:	55                   	push   ebp
c0007f09:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f0d:	e8 47 9a ff ff       	call   c0001959 <disk_write>
c0007f12:	83 c4 20             	add    esp,0x20
c0007f15:	b9 00 02 00 00       	mov    ecx,0x200
c0007f1a:	31 d2                	xor    edx,edx
c0007f1c:	89 e8                	mov    eax,ebp
c0007f1e:	e8 ff 9a ff ff       	call   c0001a22 <mem_set>
c0007f23:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f28:	89 e8                	mov    eax,ebp
c0007f2a:	e8 d5 9a ff ff       	call   c0001a04 <st_dword>
c0007f2f:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007f35:	ba 72 72 41 61       	mov    edx,0x61417272
c0007f3a:	e8 c5 9a ff ff       	call   c0001a04 <st_dword>
c0007f3f:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007f42:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007f48:	e8 b7 9a ff ff       	call   c0001a04 <st_dword>
c0007f4d:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007f53:	ba 02 00 00 00       	mov    edx,0x2
c0007f58:	e8 a7 9a ff ff       	call   c0001a04 <st_dword>
c0007f5d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f62:	89 f0                	mov    eax,esi
c0007f64:	e8 97 9a ff ff       	call   c0001a00 <st_word>
c0007f69:	83 ec 0c             	sub    esp,0xc
c0007f6c:	6a 01                	push   0x1
c0007f6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f72:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f76:	83 c0 07             	add    eax,0x7
c0007f79:	83 d2 00             	adc    edx,0x0
c0007f7c:	52                   	push   edx
c0007f7d:	50                   	push   eax
c0007f7e:	55                   	push   ebp
c0007f7f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f83:	e8 d1 99 ff ff       	call   c0001959 <disk_write>
c0007f88:	83 c4 14             	add    esp,0x14
c0007f8b:	6a 01                	push   0x1
c0007f8d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f91:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f95:	83 c0 01             	add    eax,0x1
c0007f98:	83 d2 00             	adc    edx,0x0
c0007f9b:	52                   	push   edx
c0007f9c:	50                   	push   eax
c0007f9d:	55                   	push   ebp
c0007f9e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007fa2:	e8 b2 99 ff ff       	call   c0001959 <disk_write>
c0007fa7:	83 c4 20             	add    esp,0x20
c0007faa:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0007fb1:	31 d2                	xor    edx,edx
c0007fb3:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0007fb9:	31 db                	xor    ebx,ebx
c0007fbb:	89 e8                	mov    eax,ebp
c0007fbd:	e8 60 9a ff ff       	call   c0001a22 <mem_set>
c0007fc2:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0007fc7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007fce:	0f 94 c3             	sete   bl
c0007fd1:	4b                   	dec    ebx
c0007fd2:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0007fd8:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0007fde:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007fe3:	75 21                	jne    c0008006 <f_mkfs+0xf68>
c0007fe5:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007fea:	89 e8                	mov    eax,ebp
c0007fec:	e8 13 9a ff ff       	call   c0001a04 <st_dword>
c0007ff1:	8d 45 04             	lea    eax,[ebp+0x4]
c0007ff4:	83 ca ff             	or     edx,0xffffffff
c0007ff7:	e8 08 9a ff ff       	call   c0001a04 <st_dword>
c0007ffc:	8d 45 08             	lea    eax,[ebp+0x8]
c0007fff:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008004:	eb 04                	jmp    c000800a <f_mkfs+0xf6c>
c0008006:	89 da                	mov    edx,ebx
c0008008:	89 e8                	mov    eax,ebp
c000800a:	e8 f5 99 ff ff       	call   c0001a04 <st_dword>
c000800f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008013:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008017:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000801b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000801f:	39 ce                	cmp    esi,ecx
c0008021:	76 02                	jbe    c0008025 <f_mkfs+0xf87>
c0008023:	89 ce                	mov    esi,ecx
c0008025:	83 ec 0c             	sub    esp,0xc
c0008028:	56                   	push   esi
c0008029:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000802d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008031:	55                   	push   ebp
c0008032:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008036:	e8 1e 99 ff ff       	call   c0001959 <disk_write>
c000803b:	83 c4 20             	add    esp,0x20
c000803e:	85 c0                	test   eax,eax
c0008040:	0f 85 09 01 00 00    	jne    c000814f <f_mkfs+0x10b1>
c0008046:	31 d2                	xor    edx,edx
c0008048:	b9 00 02 00 00       	mov    ecx,0x200
c000804d:	89 e8                	mov    eax,ebp
c000804f:	e8 ce 99 ff ff       	call   c0001a22 <mem_set>
c0008054:	31 d2                	xor    edx,edx
c0008056:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000805a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000805e:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008062:	75 b3                	jne    c0008017 <f_mkfs+0xf79>
c0008064:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008067:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000806e:	40                   	inc    eax
c000806f:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008073:	0f 87 65 ff ff ff    	ja     c0007fde <f_mkfs+0xf40>
c0008079:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000807e:	74 04                	je     c0008084 <f_mkfs+0xfe6>
c0008080:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008084:	89 fb                	mov    ebx,edi
c0008086:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000808a:	76 04                	jbe    c0008090 <f_mkfs+0xff2>
c000808c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008090:	83 ec 0c             	sub    esp,0xc
c0008093:	53                   	push   ebx
c0008094:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008098:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000809c:	55                   	push   ebp
c000809d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080a1:	e8 b3 98 ff ff       	call   c0001959 <disk_write>
c00080a6:	83 c4 20             	add    esp,0x20
c00080a9:	85 c0                	test   eax,eax
c00080ab:	0f 85 9e 00 00 00    	jne    c000814f <f_mkfs+0x10b1>
c00080b1:	31 d2                	xor    edx,edx
c00080b3:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c00080b7:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080bb:	29 df                	sub    edi,ebx
c00080bd:	75 c5                	jne    c0008084 <f_mkfs+0xfe6>
c00080bf:	b1 0c                	mov    cl,0xc
c00080c1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080c6:	74 1d                	je     c00080e5 <f_mkfs+0x1047>
c00080c8:	b8 ff ff 00 00       	mov    eax,0xffff
c00080cd:	b1 06                	mov    cl,0x6
c00080cf:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00080d3:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00080d7:	72 0c                	jb     c00080e5 <f_mkfs+0x1047>
c00080d9:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00080de:	0f 94 c1             	sete   cl
c00080e1:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00080e5:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00080ea:	75 4c                	jne    c0008138 <f_mkfs+0x109a>
c00080ec:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00080f0:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00080f4:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00080fb:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008102:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c000810d:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008118:	0f b6 c9             	movzx  ecx,cl
c000811b:	83 ec 0c             	sub    esp,0xc
c000811e:	55                   	push   ebp
c000811f:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c0008126:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000812a:	e8 2f c2 ff ff       	call   c000435e <create_partition>
c000812f:	83 c4 10             	add    esp,0x10
c0008132:	89 c3                	mov    ebx,eax
c0008134:	85 c0                	test   eax,eax
c0008136:	75 34                	jne    c000816c <f_mkfs+0x10ce>
c0008138:	31 db                	xor    ebx,ebx
c000813a:	50                   	push   eax
c000813b:	6a 00                	push   0x0
c000813d:	6a 00                	push   0x0
c000813f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008143:	e8 27 98 ff ff       	call   c000196f <disk_ioctl>
c0008148:	83 c4 10             	add    esp,0x10
c000814b:	85 c0                	test   eax,eax
c000814d:	74 1d                	je     c000816c <f_mkfs+0x10ce>
c000814f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008157:	75 0c                	jne    c0008165 <f_mkfs+0x10c7>
c0008159:	83 ec 0c             	sub    esp,0xc
c000815c:	55                   	push   ebp
c000815d:	e8 75 00 00 00       	call   c00081d7 <ff_memfree>
c0008162:	83 c4 10             	add    esp,0x10
c0008165:	bb 01 00 00 00       	mov    ebx,0x1
c000816a:	eb 48                	jmp    c00081b4 <f_mkfs+0x1116>
c000816c:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008174:	75 3e                	jne    c00081b4 <f_mkfs+0x1116>
c0008176:	83 ec 0c             	sub    esp,0xc
c0008179:	55                   	push   ebp
c000817a:	e8 58 00 00 00       	call   c00081d7 <ff_memfree>
c000817f:	83 c4 10             	add    esp,0x10
c0008182:	eb 30                	jmp    c00081b4 <f_mkfs+0x1116>
c0008184:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c0008189:	0f 85 eb fa ff ff    	jne    c0007c7a <f_mkfs+0xbdc>
c000818f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008193:	81 ff 80 00 00 00    	cmp    edi,0x80
c0008199:	0f 86 b8 f9 ff ff    	jbe    c0007b57 <f_mkfs+0xab9>
c000819f:	e9 bf fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081a4:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081a9:	0f 85 c0 fa ff ff    	jne    c0007c6f <f_mkfs+0xbd1>
c00081af:	e9 af fb ff ff       	jmp    c0007d63 <f_mkfs+0xcc5>
c00081b4:	81 c4 9c 00 00 00    	add    esp,0x9c
c00081ba:	89 d8                	mov    eax,ebx
c00081bc:	5b                   	pop    ebx
c00081bd:	5e                   	pop    esi
c00081be:	5f                   	pop    edi
c00081bf:	5d                   	pop    ebp
c00081c0:	c3                   	ret    

c00081c1 <ff_memalloc>:
c00081c1:	83 ec 0c             	sub    esp,0xc
c00081c4:	83 ec 0c             	sub    esp,0xc
c00081c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081cb:	e8 61 3f 00 00       	call   c000c131 <malloc>
c00081d0:	83 c4 10             	add    esp,0x10
c00081d3:	83 c4 0c             	add    esp,0xc
c00081d6:	c3                   	ret    

c00081d7 <ff_memfree>:
c00081d7:	83 ec 0c             	sub    esp,0xc
c00081da:	83 ec 0c             	sub    esp,0xc
c00081dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081e1:	e8 5b 3f 00 00       	call   c000c141 <free>
c00081e6:	83 c4 10             	add    esp,0x10
c00081e9:	90                   	nop
c00081ea:	83 c4 0c             	add    esp,0xc
c00081ed:	c3                   	ret    

c00081ee <ff_uni2oem>:
c00081ee:	83 ec 14             	sub    esp,0x14
c00081f1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00081f5:	66 89 04 24          	mov    WORD PTR [esp],ax
c00081f9:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008200:	c7 44 24 0c 20 f5 01 c0 	mov    DWORD PTR [esp+0xc],0xc001f520
c0008208:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000820d:	77 0b                	ja     c000821a <ff_uni2oem+0x2c>
c000820f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008213:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008218:	eb 5b                	jmp    c0008275 <ff_uni2oem+0x87>
c000821a:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008222:	77 51                	ja     c0008275 <ff_uni2oem+0x87>
c0008224:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000822a:	75 49                	jne    c0008275 <ff_uni2oem+0x87>
c000822c:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008233:	eb 0b                	jmp    c0008240 <ff_uni2oem+0x52>
c0008235:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000823a:	40                   	inc    eax
c000823b:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008240:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008246:	77 1b                	ja     c0008263 <ff_uni2oem+0x75>
c0008248:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c000824d:	01 c0                	add    eax,eax
c000824f:	89 c2                	mov    edx,eax
c0008251:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008255:	01 d0                	add    eax,edx
c0008257:	66 8b 00             	mov    ax,WORD PTR [eax]
c000825a:	0f b7 c0             	movzx  eax,ax
c000825d:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008261:	75 d2                	jne    c0008235 <ff_uni2oem+0x47>
c0008263:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0008268:	83 e8 80             	sub    eax,0xffffff80
c000826b:	25 ff 00 00 00       	and    eax,0xff
c0008270:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008275:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000827a:	83 c4 14             	add    esp,0x14
c000827d:	c3                   	ret    

c000827e <ff_oem2uni>:
c000827e:	83 ec 18             	sub    esp,0x18
c0008281:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008285:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008289:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c000828e:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008292:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008299:	c7 44 24 10 20 f5 01 c0 	mov    DWORD PTR [esp+0x10],0xc001f520
c00082a1:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c00082a7:	77 0b                	ja     c00082b4 <ff_oem2uni+0x36>
c00082a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082ad:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082b2:	eb 2d                	jmp    c00082e1 <ff_oem2uni+0x63>
c00082b4:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00082ba:	75 25                	jne    c00082e1 <ff_oem2uni+0x63>
c00082bc:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c00082c3:	77 1c                	ja     c00082e1 <ff_oem2uni+0x63>
c00082c5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00082ca:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00082cf:	01 c0                	add    eax,eax
c00082d1:	89 c2                	mov    edx,eax
c00082d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00082d7:	01 d0                	add    eax,edx
c00082d9:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082dc:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00082e1:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00082e6:	83 c4 18             	add    esp,0x18
c00082e9:	c3                   	ret    

c00082ea <ff_wtoupper>:
c00082ea:	83 ec 10             	sub    esp,0x10
c00082ed:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00082f5:	0f 87 3e 01 00 00    	ja     c0008439 <ff_wtoupper+0x14f>
c00082fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00082ff:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008304:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c000830b:	77 07                	ja     c0008314 <ff_wtoupper+0x2a>
c000830d:	b8 20 f3 01 c0       	mov    eax,0xc001f320
c0008312:	eb 05                	jmp    c0008319 <ff_wtoupper+0x2f>
c0008314:	b8 60 f2 01 c0       	mov    eax,0xc001f260
c0008319:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000831d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008321:	8d 50 02             	lea    edx,[eax+0x2]
c0008324:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008328:	66 8b 00             	mov    ax,WORD PTR [eax]
c000832b:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008330:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008336:	0f 84 f4 00 00 00    	je     c0008430 <ff_wtoupper+0x146>
c000833c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008341:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008346:	0f 82 e4 00 00 00    	jb     c0008430 <ff_wtoupper+0x146>
c000834c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008350:	8d 50 02             	lea    edx,[eax+0x2]
c0008353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008357:	66 8b 00             	mov    ax,WORD PTR [eax]
c000835a:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c000835f:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008364:	66 c1 e8 08          	shr    ax,0x8
c0008368:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c000836d:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008374:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008379:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c000837e:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008383:	01 ca                	add    edx,ecx
c0008385:	39 d0                	cmp    eax,edx
c0008387:	0f 8d 86 00 00 00    	jge    c0008413 <ff_wtoupper+0x129>
c000838d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008392:	83 f8 08             	cmp    eax,0x8
c0008395:	0f 87 94 00 00 00    	ja     c000842f <ff_wtoupper+0x145>
c000839b:	8b 04 85 20 f2 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0de0]
c00083a2:	ff e0                	jmp    eax
c00083a4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c00083a9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c00083ae:	29 c2                	sub    edx,eax
c00083b0:	89 d0                	mov    eax,edx
c00083b2:	01 c0                	add    eax,eax
c00083b4:	89 c2                	mov    edx,eax
c00083b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083ba:	01 d0                	add    eax,edx
c00083bc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083bf:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00083c4:	eb 4b                	jmp    c0008411 <ff_wtoupper+0x127>
c00083c6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083cb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00083cf:	83 e0 01             	and    eax,0x1
c00083d2:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00083d7:	eb 38                	jmp    c0008411 <ff_wtoupper+0x127>
c00083d9:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00083df:	eb 30                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e1:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00083e7:	eb 28                	jmp    c0008411 <ff_wtoupper+0x127>
c00083e9:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00083ef:	eb 20                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f1:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00083f7:	eb 18                	jmp    c0008411 <ff_wtoupper+0x127>
c00083f9:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00083ff:	eb 10                	jmp    c0008411 <ff_wtoupper+0x127>
c0008401:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0008407:	eb 08                	jmp    c0008411 <ff_wtoupper+0x127>
c0008409:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0008410:	90                   	nop
c0008411:	eb 1c                	jmp    c000842f <ff_wtoupper+0x145>
c0008413:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0008419:	0f 85 fe fe ff ff    	jne    c000831d <ff_wtoupper+0x33>
c000841f:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0008424:	01 c0                	add    eax,eax
c0008426:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000842a:	e9 ee fe ff ff       	jmp    c000831d <ff_wtoupper+0x33>
c000842f:	90                   	nop
c0008430:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008435:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008439:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000843d:	83 c4 10             	add    esp,0x10
c0008440:	c3                   	ret    

c0008441 <is_bad_src_ratio>:
c0008441:	83 ec 0c             	sub    esp,0xc
c0008444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008448:	89 04 24             	mov    DWORD PTR [esp],eax
c000844b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000844f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008453:	dd 04 24             	fld    QWORD PTR [esp]
c0008456:	dd 05 e0 fa 01 c0    	fld    QWORD PTR ds:0xc001fae0
c000845c:	de d9                	fcompp 
c000845e:	df e0                	fnstsw ax
c0008460:	f6 c4 45             	test   ah,0x45
c0008463:	74 10                	je     c0008475 <is_bad_src_ratio+0x34>
c0008465:	dd 04 24             	fld    QWORD PTR [esp]
c0008468:	dc 1d e8 fa 01 c0    	fcomp  QWORD PTR ds:0xc001fae8
c000846e:	df e0                	fnstsw ax
c0008470:	f6 c4 45             	test   ah,0x45
c0008473:	75 07                	jne    c000847c <is_bad_src_ratio+0x3b>
c0008475:	b8 01 00 00 00       	mov    eax,0x1
c000847a:	eb 05                	jmp    c0008481 <is_bad_src_ratio+0x40>
c000847c:	b8 00 00 00 00       	mov    eax,0x0
c0008481:	83 c4 0c             	add    esp,0xc
c0008484:	c3                   	ret    

c0008485 <psrc_set_converter>:
c0008485:	56                   	push   esi
c0008486:	89 d6                	mov    esi,edx
c0008488:	53                   	push   ebx
c0008489:	89 c3                	mov    ebx,eax
c000848b:	83 ec 0c             	sub    esp,0xc
c000848e:	52                   	push   edx
c000848f:	50                   	push   eax
c0008490:	e8 33 24 00 00       	call   c000a8c8 <sinc_set_converter>
c0008495:	83 c4 10             	add    esp,0x10
c0008498:	85 c0                	test   eax,eax
c000849a:	74 25                	je     c00084c1 <psrc_set_converter+0x3c>
c000849c:	50                   	push   eax
c000849d:	50                   	push   eax
c000849e:	56                   	push   esi
c000849f:	53                   	push   ebx
c00084a0:	e8 32 28 00 00       	call   c000acd7 <zoh_set_converter>
c00084a5:	83 c4 10             	add    esp,0x10
c00084a8:	85 c0                	test   eax,eax
c00084aa:	74 15                	je     c00084c1 <psrc_set_converter+0x3c>
c00084ac:	51                   	push   ecx
c00084ad:	51                   	push   ecx
c00084ae:	56                   	push   esi
c00084af:	53                   	push   ebx
c00084b0:	e8 10 0a 00 00       	call   c0008ec5 <linear_set_converter>
c00084b5:	83 c4 10             	add    esp,0x10
c00084b8:	ba 0a 00 00 00       	mov    edx,0xa
c00084bd:	85 c0                	test   eax,eax
c00084bf:	75 02                	jne    c00084c3 <psrc_set_converter+0x3e>
c00084c1:	31 d2                	xor    edx,edx
c00084c3:	89 d0                	mov    eax,edx
c00084c5:	5a                   	pop    edx
c00084c6:	5b                   	pop    ebx
c00084c7:	5e                   	pop    esi
c00084c8:	c3                   	ret    

c00084c9 <src_delete>:
c00084c9:	53                   	push   ebx
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084d1:	85 db                	test   ebx,ebx
c00084d3:	74 29                	je     c00084fe <src_delete+0x35>
c00084d5:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00084d8:	85 c0                	test   eax,eax
c00084da:	74 0c                	je     c00084e8 <src_delete+0x1f>
c00084dc:	83 ec 0c             	sub    esp,0xc
c00084df:	50                   	push   eax
c00084e0:	e8 5c 3c 00 00       	call   c000c141 <free>
c00084e5:	83 c4 10             	add    esp,0x10
c00084e8:	50                   	push   eax
c00084e9:	6a 3c                	push   0x3c
c00084eb:	6a 00                	push   0x0
c00084ed:	53                   	push   ebx
c00084ee:	e8 15 81 ff ff       	call   c0000608 <memset>
c00084f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00084f6:	e8 46 3c 00 00       	call   c000c141 <free>
c00084fb:	83 c4 10             	add    esp,0x10
c00084fe:	31 c0                	xor    eax,eax
c0008500:	83 c4 08             	add    esp,0x8
c0008503:	5b                   	pop    ebx
c0008504:	c3                   	ret    

c0008505 <src_process>:
c0008505:	56                   	push   esi
c0008506:	53                   	push   ebx
c0008507:	53                   	push   ebx
c0008508:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000850c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008510:	85 f6                	test   esi,esi
c0008512:	0f 84 e2 00 00 00    	je     c00085fa <src_process+0xf5>
c0008518:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c000851c:	0f 84 df 00 00 00    	je     c0008601 <src_process+0xfc>
c0008522:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c0008526:	0f 84 d5 00 00 00    	je     c0008601 <src_process+0xfc>
c000852c:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c0008533:	0f 85 cf 00 00 00    	jne    c0008608 <src_process+0x103>
c0008539:	85 db                	test   ebx,ebx
c000853b:	0f 84 ce 00 00 00    	je     c000860f <src_process+0x10a>
c0008541:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0008544:	0f 84 cc 00 00 00    	je     c0008616 <src_process+0x111>
c000854a:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c000854e:	0f 84 c2 00 00 00    	je     c0008616 <src_process+0x111>
c0008554:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008557:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000855a:	e8 e2 fe ff ff       	call   c0008441 <is_bad_src_ratio>
c000855f:	5a                   	pop    edx
c0008560:	85 c0                	test   eax,eax
c0008562:	59                   	pop    ecx
c0008563:	0f 85 b4 00 00 00    	jne    c000861d <src_process+0x118>
c0008569:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000856d:	79 07                	jns    c0008576 <src_process+0x71>
c000856f:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008576:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000857a:	79 07                	jns    c0008583 <src_process+0x7e>
c000857c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008583:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008585:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008588:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000858b:	39 ca                	cmp    edx,ecx
c000858d:	73 0b                	jae    c000859a <src_process+0x95>
c000858f:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008593:	8d 04 82             	lea    eax,[edx+eax*4]
c0008596:	39 c1                	cmp    ecx,eax
c0008598:	eb 09                	jmp    c00085a3 <src_process+0x9e>
c000859a:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c000859e:	8d 04 81             	lea    eax,[ecx+eax*4]
c00085a1:	39 c2                	cmp    edx,eax
c00085a3:	72 7f                	jb     c0008624 <src_process+0x11f>
c00085a5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00085ac:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00085b3:	d9 05 00 fb 01 c0    	fld    DWORD PTR ds:0xc001fb00
c00085b9:	dc 1e                	fcomp  QWORD PTR [esi]
c00085bb:	df e0                	fnstsw ax
c00085bd:	9e                   	sahf   
c00085be:	76 05                	jbe    c00085c5 <src_process+0xc0>
c00085c0:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c00085c3:	dd 1e                	fstp   QWORD PTR [esi]
c00085c5:	83 ec 10             	sub    esp,0x10
c00085c8:	dd 06                	fld    QWORD PTR [esi]
c00085ca:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c00085cd:	dd 1c 24             	fstp   QWORD PTR [esp]
c00085d0:	e8 1b 5d 01 00       	call   c001e2f0 <fabs>
c00085d5:	83 c4 10             	add    esp,0x10
c00085d8:	dd 05 f0 fa 01 c0    	fld    QWORD PTR ds:0xc001faf0
c00085de:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00085e2:	de d9                	fcompp 
c00085e4:	df e0                	fnstsw ax
c00085e6:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00085ea:	9e                   	sahf   
c00085eb:	76 05                	jbe    c00085f2 <src_process+0xed>
c00085ed:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c00085f0:	eb 03                	jmp    c00085f5 <src_process+0xf0>
c00085f2:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00085f5:	59                   	pop    ecx
c00085f6:	5b                   	pop    ebx
c00085f7:	5e                   	pop    esi
c00085f8:	ff e0                	jmp    eax
c00085fa:	b8 02 00 00 00       	mov    eax,0x2
c00085ff:	eb 28                	jmp    c0008629 <src_process+0x124>
c0008601:	b8 07 00 00 00       	mov    eax,0x7
c0008606:	eb 21                	jmp    c0008629 <src_process+0x124>
c0008608:	b8 12 00 00 00       	mov    eax,0x12
c000860d:	eb 1a                	jmp    c0008629 <src_process+0x124>
c000860f:	b8 03 00 00 00       	mov    eax,0x3
c0008614:	eb 13                	jmp    c0008629 <src_process+0x124>
c0008616:	b8 04 00 00 00       	mov    eax,0x4
c000861b:	eb 0c                	jmp    c0008629 <src_process+0x124>
c000861d:	b8 06 00 00 00       	mov    eax,0x6
c0008622:	eb 05                	jmp    c0008629 <src_process+0x124>
c0008624:	b8 10 00 00 00       	mov    eax,0x10
c0008629:	5a                   	pop    edx
c000862a:	5b                   	pop    ebx
c000862b:	5e                   	pop    esi
c000862c:	c3                   	ret    

c000862d <src_callback_read>:
c000862d:	55                   	push   ebp
c000862e:	57                   	push   edi
c000862f:	56                   	push   esi
c0008630:	53                   	push   ebx
c0008631:	83 ec 4c             	sub    esp,0x4c
c0008634:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0008638:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c000863c:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c0008640:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008644:	85 ff                	test   edi,edi
c0008646:	0f 8e 36 01 00 00    	jle    c0008782 <src_callback_read+0x155>
c000864c:	85 db                	test   ebx,ebx
c000864e:	0f 84 2e 01 00 00    	je     c0008782 <src_callback_read+0x155>
c0008654:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c000865b:	74 0c                	je     c0008669 <src_callback_read+0x3c>
c000865d:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008664:	e9 19 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c0008669:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000866d:	75 0c                	jne    c000867b <src_callback_read+0x4e>
c000866f:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008676:	e9 07 01 00 00       	jmp    c0008782 <src_callback_read+0x155>
c000867b:	51                   	push   ecx
c000867c:	6a 24                	push   0x24
c000867e:	6a 00                	push   0x0
c0008680:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008684:	50                   	push   eax
c0008685:	e8 7e 7f ff ff       	call   c0000608 <memset>
c000868a:	5e                   	pop    esi
c000868b:	5d                   	pop    ebp
c000868c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008694:	e8 a8 fd ff ff       	call   c0008441 <is_bad_src_ratio>
c0008699:	83 c4 10             	add    esp,0x10
c000869c:	85 c0                	test   eax,eax
c000869e:	74 0c                	je     c00086ac <src_callback_read+0x7f>
c00086a0:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00086a7:	e9 d6 00 00 00       	jmp    c0008782 <src_callback_read+0x155>
c00086ac:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00086b0:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c00086b4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00086b8:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00086bc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00086bf:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00086c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00086c7:	31 f6                	xor    esi,esi
c00086c9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00086cc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00086d0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00086d5:	75 30                	jne    c0008707 <src_callback_read+0xda>
c00086d7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00086db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00086df:	52                   	push   edx
c00086e0:	52                   	push   edx
c00086e1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00086e5:	50                   	push   eax
c00086e6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086e9:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00086ec:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00086f0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00086f4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00086f8:	83 c4 10             	add    esp,0x10
c00086fb:	85 c0                	test   eax,eax
c00086fd:	75 08                	jne    c0008707 <src_callback_read+0xda>
c00086ff:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0008707:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c000870e:	50                   	push   eax
c000870f:	50                   	push   eax
c0008710:	8d 44 24 24          	lea    eax,[esp+0x24]
c0008714:	50                   	push   eax
c0008715:	53                   	push   ebx
c0008716:	e8 ea fd ff ff       	call   c0008505 <src_process>
c000871b:	83 c4 10             	add    esp,0x10
c000871e:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008725:	85 c0                	test   eax,eax
c0008727:	75 42                	jne    c000876b <src_callback_read+0x13e>
c0008729:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000872d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008730:	89 e9                	mov    ecx,ebp
c0008732:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c0008736:	0f af ca             	imul   ecx,edx
c0008739:	c1 e1 02             	shl    ecx,0x2
c000873c:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c0008740:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0008744:	0f af d1             	imul   edx,ecx
c0008747:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c000874b:	c1 e2 02             	shl    edx,0x2
c000874e:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c0008752:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008755:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c000875a:	75 04                	jne    c0008760 <src_callback_read+0x133>
c000875c:	85 c9                	test   ecx,ecx
c000875e:	74 0b                	je     c000876b <src_callback_read+0x13e>
c0008760:	39 d7                	cmp    edi,edx
c0008762:	7e 09                	jle    c000876d <src_callback_read+0x140>
c0008764:	89 d6                	mov    esi,edx
c0008766:	e9 65 ff ff ff       	jmp    c00086d0 <src_callback_read+0xa3>
c000876b:	89 f2                	mov    edx,esi
c000876d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0008771:	85 c0                	test   eax,eax
c0008773:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008776:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000877a:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000877d:	74 05                	je     c0008784 <src_callback_read+0x157>
c000877f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008782:	31 d2                	xor    edx,edx
c0008784:	83 c4 4c             	add    esp,0x4c
c0008787:	89 d0                	mov    eax,edx
c0008789:	5b                   	pop    ebx
c000878a:	5e                   	pop    esi
c000878b:	5f                   	pop    edi
c000878c:	5d                   	pop    ebp
c000878d:	c3                   	ret    

c000878e <src_set_ratio>:
c000878e:	53                   	push   ebx
c000878f:	b8 02 00 00 00       	mov    eax,0x2
c0008794:	83 ec 08             	sub    esp,0x8
c0008797:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000879b:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c000879f:	85 db                	test   ebx,ebx
c00087a1:	74 33                	je     c00087d6 <src_set_ratio+0x48>
c00087a3:	b8 07 00 00 00       	mov    eax,0x7
c00087a8:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c00087ac:	74 2c                	je     c00087da <src_set_ratio+0x4c>
c00087ae:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00087b2:	74 2a                	je     c00087de <src_set_ratio+0x50>
c00087b4:	50                   	push   eax
c00087b5:	50                   	push   eax
c00087b6:	dd 14 24             	fst    QWORD PTR [esp]
c00087b9:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00087bd:	e8 7f fc ff ff       	call   c0008441 <is_bad_src_ratio>
c00087c2:	5a                   	pop    edx
c00087c3:	85 c0                	test   eax,eax
c00087c5:	59                   	pop    ecx
c00087c6:	75 07                	jne    c00087cf <src_set_ratio+0x41>
c00087c8:	dd 04 24             	fld    QWORD PTR [esp]
c00087cb:	dd 1b                	fstp   QWORD PTR [ebx]
c00087cd:	eb 11                	jmp    c00087e0 <src_set_ratio+0x52>
c00087cf:	b8 06 00 00 00       	mov    eax,0x6
c00087d4:	eb 0a                	jmp    c00087e0 <src_set_ratio+0x52>
c00087d6:	dd d8                	fstp   st(0)
c00087d8:	eb 06                	jmp    c00087e0 <src_set_ratio+0x52>
c00087da:	dd d8                	fstp   st(0)
c00087dc:	eb 02                	jmp    c00087e0 <src_set_ratio+0x52>
c00087de:	dd d8                	fstp   st(0)
c00087e0:	83 c4 08             	add    esp,0x8
c00087e3:	5b                   	pop    ebx
c00087e4:	c3                   	ret    

c00087e5 <src_get_channels>:
c00087e5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00087e9:	b8 02 00 00 00       	mov    eax,0x2
c00087ee:	85 d2                	test   edx,edx
c00087f0:	74 14                	je     c0008806 <src_get_channels+0x21>
c00087f2:	b8 07 00 00 00       	mov    eax,0x7
c00087f7:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c00087fb:	74 09                	je     c0008806 <src_get_channels+0x21>
c00087fd:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008801:	74 03                	je     c0008806 <src_get_channels+0x21>
c0008803:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008806:	c3                   	ret    

c0008807 <src_reset>:
c0008807:	53                   	push   ebx
c0008808:	b8 02 00 00 00       	mov    eax,0x2
c000880d:	83 ec 08             	sub    esp,0x8
c0008810:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008814:	85 db                	test   ebx,ebx
c0008816:	74 2e                	je     c0008846 <src_reset+0x3f>
c0008818:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000881b:	85 c0                	test   eax,eax
c000881d:	74 09                	je     c0008828 <src_reset+0x21>
c000881f:	83 ec 0c             	sub    esp,0xc
c0008822:	53                   	push   ebx
c0008823:	ff d0                	call   eax
c0008825:	83 c4 10             	add    esp,0x10
c0008828:	d9 ee                	fldz   
c000882a:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008831:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c0008834:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000883b:	dd 1b                	fstp   QWORD PTR [ebx]
c000883d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008844:	31 c0                	xor    eax,eax
c0008846:	83 c4 08             	add    esp,0x8
c0008849:	5b                   	pop    ebx
c000884a:	c3                   	ret    

c000884b <src_new>:
c000884b:	57                   	push   edi
c000884c:	56                   	push   esi
c000884d:	53                   	push   ebx
c000884e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008852:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008856:	85 f6                	test   esi,esi
c0008858:	74 73                	je     c00088cd <src_new+0x82>
c000885a:	85 ff                	test   edi,edi
c000885c:	7f 08                	jg     c0008866 <src_new+0x1b>
c000885e:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008864:	eb 1e                	jmp    c0008884 <src_new+0x39>
c0008866:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c000886c:	50                   	push   eax
c000886d:	50                   	push   eax
c000886e:	6a 3c                	push   0x3c
c0008870:	6a 01                	push   0x1
c0008872:	e8 ea 38 00 00       	call   c000c161 <calloc>
c0008877:	83 c4 10             	add    esp,0x10
c000887a:	89 c3                	mov    ebx,eax
c000887c:	85 c0                	test   eax,eax
c000887e:	75 10                	jne    c0008890 <src_new+0x45>
c0008880:	85 f6                	test   esi,esi
c0008882:	75 04                	jne    c0008888 <src_new+0x3d>
c0008884:	31 db                	xor    ebx,ebx
c0008886:	eb 4b                	jmp    c00088d3 <src_new+0x88>
c0008888:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c000888e:	eb 43                	jmp    c00088d3 <src_new+0x88>
c0008890:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008893:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c000889a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000889e:	e8 e2 fb ff ff       	call   c0008485 <psrc_set_converter>
c00088a3:	85 c0                	test   eax,eax
c00088a5:	74 18                	je     c00088bf <src_new+0x74>
c00088a7:	85 f6                	test   esi,esi
c00088a9:	74 06                	je     c00088b1 <src_new+0x66>
c00088ab:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c00088b1:	83 ec 0c             	sub    esp,0xc
c00088b4:	53                   	push   ebx
c00088b5:	31 db                	xor    ebx,ebx
c00088b7:	e8 85 38 00 00       	call   c000c141 <free>
c00088bc:	83 c4 10             	add    esp,0x10
c00088bf:	83 ec 0c             	sub    esp,0xc
c00088c2:	53                   	push   ebx
c00088c3:	e8 3f ff ff ff       	call   c0008807 <src_reset>
c00088c8:	83 c4 10             	add    esp,0x10
c00088cb:	eb 06                	jmp    c00088d3 <src_new+0x88>
c00088cd:	85 ff                	test   edi,edi
c00088cf:	7f 9b                	jg     c000886c <src_new+0x21>
c00088d1:	eb b1                	jmp    c0008884 <src_new+0x39>
c00088d3:	89 d8                	mov    eax,ebx
c00088d5:	5b                   	pop    ebx
c00088d6:	5e                   	pop    esi
c00088d7:	5f                   	pop    edi
c00088d8:	c3                   	ret    

c00088d9 <src_callback_new>:
c00088d9:	56                   	push   esi
c00088da:	53                   	push   ebx
c00088db:	53                   	push   ebx
c00088dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00088e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00088e4:	85 f6                	test   esi,esi
c00088e6:	75 0e                	jne    c00088f6 <src_callback_new+0x1d>
c00088e8:	31 db                	xor    ebx,ebx
c00088ea:	85 c0                	test   eax,eax
c00088ec:	74 47                	je     c0008935 <src_callback_new+0x5c>
c00088ee:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c00088f4:	eb 3f                	jmp    c0008935 <src_callback_new+0x5c>
c00088f6:	85 c0                	test   eax,eax
c00088f8:	74 06                	je     c0008900 <src_callback_new+0x27>
c00088fa:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008900:	51                   	push   ecx
c0008901:	50                   	push   eax
c0008902:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008906:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000890a:	e8 3c ff ff ff       	call   c000884b <src_new>
c000890f:	83 c4 10             	add    esp,0x10
c0008912:	89 c3                	mov    ebx,eax
c0008914:	85 c0                	test   eax,eax
c0008916:	74 1d                	je     c0008935 <src_callback_new+0x5c>
c0008918:	83 ec 0c             	sub    esp,0xc
c000891b:	50                   	push   eax
c000891c:	e8 e6 fe ff ff       	call   c0008807 <src_reset>
c0008921:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008925:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c000892c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000892f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008932:	83 c4 10             	add    esp,0x10
c0008935:	89 d8                	mov    eax,ebx
c0008937:	5a                   	pop    edx
c0008938:	5b                   	pop    ebx
c0008939:	5e                   	pop    esi
c000893a:	c3                   	ret    

c000893b <src_get_name>:
c000893b:	53                   	push   ebx
c000893c:	83 ec 14             	sub    esp,0x14
c000893f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008943:	53                   	push   ebx
c0008944:	e8 59 1f 00 00       	call   c000a8a2 <sinc_get_name>
c0008949:	83 c4 10             	add    esp,0x10
c000894c:	85 c0                	test   eax,eax
c000894e:	75 1d                	jne    c000896d <src_get_name+0x32>
c0008950:	83 ec 0c             	sub    esp,0xc
c0008953:	53                   	push   ebx
c0008954:	e8 60 23 00 00       	call   c000acb9 <zoh_get_name>
c0008959:	83 c4 10             	add    esp,0x10
c000895c:	85 c0                	test   eax,eax
c000895e:	75 0d                	jne    c000896d <src_get_name+0x32>
c0008960:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008964:	83 c4 08             	add    esp,0x8
c0008967:	5b                   	pop    ebx
c0008968:	e9 3a 05 00 00       	jmp    c0008ea7 <linear_get_name>
c000896d:	83 c4 08             	add    esp,0x8
c0008970:	5b                   	pop    ebx
c0008971:	c3                   	ret    

c0008972 <src_get_description>:
c0008972:	53                   	push   ebx
c0008973:	83 ec 14             	sub    esp,0x14
c0008976:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000897a:	53                   	push   ebx
c000897b:	e8 35 1f 00 00       	call   c000a8b5 <sinc_get_description>
c0008980:	83 c4 10             	add    esp,0x10
c0008983:	85 c0                	test   eax,eax
c0008985:	75 1d                	jne    c00089a4 <src_get_description+0x32>
c0008987:	83 ec 0c             	sub    esp,0xc
c000898a:	53                   	push   ebx
c000898b:	e8 38 23 00 00       	call   c000acc8 <zoh_get_description>
c0008990:	83 c4 10             	add    esp,0x10
c0008993:	85 c0                	test   eax,eax
c0008995:	75 0d                	jne    c00089a4 <src_get_description+0x32>
c0008997:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000899b:	83 c4 08             	add    esp,0x8
c000899e:	5b                   	pop    ebx
c000899f:	e9 12 05 00 00       	jmp    c0008eb6 <linear_get_description>
c00089a4:	83 c4 08             	add    esp,0x8
c00089a7:	5b                   	pop    ebx
c00089a8:	c3                   	ret    

c00089a9 <src_get_version>:
c00089a9:	b8 20 f6 01 c0       	mov    eax,0xc001f620
c00089ae:	c3                   	ret    

c00089af <src_is_valid_ratio>:
c00089af:	50                   	push   eax
c00089b0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00089b8:	e8 84 fa ff ff       	call   c0008441 <is_bad_src_ratio>
c00089bd:	85 c0                	test   eax,eax
c00089bf:	0f 94 c0             	sete   al
c00089c2:	83 c4 0c             	add    esp,0xc
c00089c5:	0f b6 c0             	movzx  eax,al
c00089c8:	c3                   	ret    

c00089c9 <src_error>:
c00089c9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089cd:	31 c0                	xor    eax,eax
c00089cf:	85 d2                	test   edx,edx
c00089d1:	74 03                	je     c00089d6 <src_error+0xd>
c00089d3:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00089d6:	c3                   	ret    

c00089d7 <src_strerror>:
c00089d7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00089db:	31 c0                	xor    eax,eax
c00089dd:	83 fa 17             	cmp    edx,0x17
c00089e0:	77 07                	ja     c00089e9 <src_strerror+0x12>
c00089e2:	8b 04 95 80 fa 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0580]
c00089e9:	c3                   	ret    

c00089ea <src_simple>:
c00089ea:	56                   	push   esi
c00089eb:	53                   	push   ebx
c00089ec:	83 ec 18             	sub    esp,0x18
c00089ef:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089f3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089f7:	50                   	push   eax
c00089f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00089fc:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a00:	e8 46 fe ff ff       	call   c000884b <src_new>
c0008a05:	83 c4 10             	add    esp,0x10
c0008a08:	85 c0                	test   eax,eax
c0008a0a:	75 06                	jne    c0008a12 <src_simple+0x28>
c0008a0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008a10:	eb 25                	jmp    c0008a37 <src_simple+0x4d>
c0008a12:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008a19:	89 c3                	mov    ebx,eax
c0008a1b:	50                   	push   eax
c0008a1c:	50                   	push   eax
c0008a1d:	56                   	push   esi
c0008a1e:	53                   	push   ebx
c0008a1f:	e8 e1 fa ff ff       	call   c0008505 <src_process>
c0008a24:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008a27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008a2b:	e8 99 fa ff ff       	call   c00084c9 <src_delete>
c0008a30:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008a34:	83 c4 10             	add    esp,0x10
c0008a37:	83 c4 14             	add    esp,0x14
c0008a3a:	5b                   	pop    ebx
c0008a3b:	5e                   	pop    esi
c0008a3c:	c3                   	ret    

c0008a3d <src_short_to_float_array>:
c0008a3d:	83 ec 0c             	sub    esp,0xc
c0008a40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008a44:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a48:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008a4c:	85 c0                	test   eax,eax
c0008a4e:	74 0f                	je     c0008a5f <src_short_to_float_array+0x22>
c0008a50:	48                   	dec    eax
c0008a51:	d9 05 04 fb 01 c0    	fld    DWORD PTR ds:0xc001fb04
c0008a57:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008a5a:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008a5d:	eb ed                	jmp    c0008a4c <src_short_to_float_array+0xf>
c0008a5f:	83 c4 0c             	add    esp,0xc
c0008a62:	c3                   	ret    

c0008a63 <src_float_to_short_array>:
c0008a63:	56                   	push   esi
c0008a64:	53                   	push   ebx
c0008a65:	52                   	push   edx
c0008a66:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008a6a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008a6e:	85 db                	test   ebx,ebx
c0008a70:	74 51                	je     c0008ac3 <src_float_to_short_array+0x60>
c0008a72:	4b                   	dec    ebx
c0008a73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a77:	d9 05 08 fb 01 c0    	fld    DWORD PTR ds:0xc001fb08
c0008a7d:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008a80:	dc 15 f8 fa 01 c0    	fcom   QWORD PTR ds:0xc001faf8
c0008a86:	df e0                	fnstsw ax
c0008a88:	9e                   	sahf   
c0008a89:	72 0a                	jb     c0008a95 <src_float_to_short_array+0x32>
c0008a8b:	dd d8                	fstp   st(0)
c0008a8d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008a93:	eb d9                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008a95:	d9 05 0c fb 01 c0    	fld    DWORD PTR ds:0xc001fb0c
c0008a9b:	d8 d9                	fcomp  st(1)
c0008a9d:	df e0                	fnstsw ax
c0008a9f:	9e                   	sahf   
c0008aa0:	72 0a                	jb     c0008aac <src_float_to_short_array+0x49>
c0008aa2:	dd d8                	fstp   st(0)
c0008aa4:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008aaa:	eb c2                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008aac:	83 ec 10             	sub    esp,0x10
c0008aaf:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008ab2:	e8 59 58 01 00       	call   c001e310 <lrint>
c0008ab7:	83 c4 10             	add    esp,0x10
c0008aba:	c1 f8 10             	sar    eax,0x10
c0008abd:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ac1:	eb ab                	jmp    c0008a6e <src_float_to_short_array+0xb>
c0008ac3:	58                   	pop    eax
c0008ac4:	5b                   	pop    ebx
c0008ac5:	5e                   	pop    esi
c0008ac6:	c3                   	ret    

c0008ac7 <src_int_to_float_array>:
c0008ac7:	83 ec 0c             	sub    esp,0xc
c0008aca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ace:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ad2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008ad6:	85 c0                	test   eax,eax
c0008ad8:	74 0f                	je     c0008ae9 <src_int_to_float_array+0x22>
c0008ada:	48                   	dec    eax
c0008adb:	d9 05 10 fb 01 c0    	fld    DWORD PTR ds:0xc001fb10
c0008ae1:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008ae4:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008ae7:	eb ed                	jmp    c0008ad6 <src_int_to_float_array+0xf>
c0008ae9:	83 c4 0c             	add    esp,0xc
c0008aec:	c3                   	ret    

c0008aed <src_float_to_int_array>:
c0008aed:	56                   	push   esi
c0008aee:	53                   	push   ebx
c0008aef:	52                   	push   edx
c0008af0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008af4:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008af8:	85 db                	test   ebx,ebx
c0008afa:	74 4f                	je     c0008b4b <src_float_to_int_array+0x5e>
c0008afc:	4b                   	dec    ebx
c0008afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b01:	d9 05 08 fb 01 c0    	fld    DWORD PTR ds:0xc001fb08
c0008b07:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b0a:	dc 15 f8 fa 01 c0    	fcom   QWORD PTR ds:0xc001faf8
c0008b10:	df e0                	fnstsw ax
c0008b12:	9e                   	sahf   
c0008b13:	72 0b                	jb     c0008b20 <src_float_to_int_array+0x33>
c0008b15:	dd d8                	fstp   st(0)
c0008b17:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008b1e:	eb d8                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b20:	d9 05 0c fb 01 c0    	fld    DWORD PTR ds:0xc001fb0c
c0008b26:	d8 d9                	fcomp  st(1)
c0008b28:	df e0                	fnstsw ax
c0008b2a:	9e                   	sahf   
c0008b2b:	72 0b                	jb     c0008b38 <src_float_to_int_array+0x4b>
c0008b2d:	dd d8                	fstp   st(0)
c0008b2f:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008b36:	eb c0                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b38:	83 ec 10             	sub    esp,0x10
c0008b3b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b3e:	e8 cd 57 01 00       	call   c001e310 <lrint>
c0008b43:	83 c4 10             	add    esp,0x10
c0008b46:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008b49:	eb ad                	jmp    c0008af8 <src_float_to_int_array+0xb>
c0008b4b:	58                   	pop    eax
c0008b4c:	5b                   	pop    ebx
c0008b4d:	5e                   	pop    esi
c0008b4e:	c3                   	ret    

c0008b4f <is_bad_src_ratio>:
c0008b4f:	83 ec 0c             	sub    esp,0xc
c0008b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b56:	89 04 24             	mov    DWORD PTR [esp],eax
c0008b59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008b5d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008b61:	dd 04 24             	fld    QWORD PTR [esp]
c0008b64:	dd 05 e0 fa 01 c0    	fld    QWORD PTR ds:0xc001fae0
c0008b6a:	de d9                	fcompp 
c0008b6c:	df e0                	fnstsw ax
c0008b6e:	f6 c4 45             	test   ah,0x45
c0008b71:	74 10                	je     c0008b83 <is_bad_src_ratio+0x34>
c0008b73:	dd 04 24             	fld    QWORD PTR [esp]
c0008b76:	dc 1d e8 fa 01 c0    	fcomp  QWORD PTR ds:0xc001fae8
c0008b7c:	df e0                	fnstsw ax
c0008b7e:	f6 c4 45             	test   ah,0x45
c0008b81:	75 07                	jne    c0008b8a <is_bad_src_ratio+0x3b>
c0008b83:	b8 01 00 00 00       	mov    eax,0x1
c0008b88:	eb 05                	jmp    c0008b8f <is_bad_src_ratio+0x40>
c0008b8a:	b8 00 00 00 00       	mov    eax,0x0
c0008b8f:	83 c4 0c             	add    esp,0xc
c0008b92:	c3                   	ret    

c0008b93 <fmod_one>:
c0008b93:	83 ec 2c             	sub    esp,0x2c
c0008b96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b9a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008b9e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008ba2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ba6:	83 ec 08             	sub    esp,0x8
c0008ba9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008bb1:	e8 5a 57 01 00       	call   c001e310 <lrint>
c0008bb6:	83 c4 10             	add    esp,0x10
c0008bb9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008bbd:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008bc1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008bc5:	de e1                	fsubrp st(1),st
c0008bc7:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008bcb:	d9 ee                	fldz   
c0008bcd:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008bd1:	df e0                	fnstsw ax
c0008bd3:	f6 c4 45             	test   ah,0x45
c0008bd6:	75 0a                	jne    c0008be2 <fmod_one+0x4f>
c0008bd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008bdc:	d9 e8                	fld1   
c0008bde:	de c1                	faddp  st(1),st
c0008be0:	eb 04                	jmp    c0008be6 <fmod_one+0x53>
c0008be2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008be6:	83 c4 2c             	add    esp,0x2c
c0008be9:	c3                   	ret    

c0008bea <linear_vari_process>:
c0008bea:	55                   	push   ebp
c0008beb:	57                   	push   edi
c0008bec:	56                   	push   esi
c0008bed:	53                   	push   ebx
c0008bee:	83 ec 2c             	sub    esp,0x2c
c0008bf1:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008bf5:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008bf9:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c01:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008c05:	0f 8e 5e 02 00 00    	jle    c0008e69 <linear_vari_process+0x27f>
c0008c0b:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008c0e:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008c16:	85 db                	test   ebx,ebx
c0008c18:	0f 84 4b 02 00 00    	je     c0008e69 <linear_vari_process+0x27f>
c0008c1e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008c21:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008c25:	74 19                	je     c0008c40 <linear_vari_process+0x56>
c0008c27:	31 d2                	xor    edx,edx
c0008c29:	39 c2                	cmp    edx,eax
c0008c2b:	7d 0c                	jge    c0008c39 <linear_vari_process+0x4f>
c0008c2d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008c2f:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008c32:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008c36:	42                   	inc    edx
c0008c37:	eb f0                	jmp    c0008c29 <linear_vari_process+0x3f>
c0008c39:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008c40:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008c43:	0f af d0             	imul   edx,eax
c0008c46:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008c49:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008c4d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008c54:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008c57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008c5e:	dd 07                	fld    QWORD PTR [edi]
c0008c60:	dd 14 24             	fst    QWORD PTR [esp]
c0008c63:	50                   	push   eax
c0008c64:	50                   	push   eax
c0008c65:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008c68:	e8 e2 fe ff ff       	call   c0008b4f <is_bad_src_ratio>
c0008c6d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008c71:	5a                   	pop    edx
c0008c72:	59                   	pop    ecx
c0008c73:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008c78:	0f 85 e3 01 00 00    	jne    c0008e61 <linear_vari_process+0x277>
c0008c7e:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008c81:	d9 e8                	fld1   
c0008c83:	d8 d1                	fcom   st(1)
c0008c85:	df e0                	fnstsw ax
c0008c87:	9e                   	sahf   
c0008c88:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008c8c:	0f 86 99 00 00 00    	jbe    c0008d2b <linear_vari_process+0x141>
c0008c92:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008c95:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008c98:	0f 8d 8d 00 00 00    	jge    c0008d2b <linear_vari_process+0x141>
c0008c9e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008ca2:	d8 c1                	fadd   st,st(1)
c0008ca4:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008ca7:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008caa:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008cad:	df e0                	fnstsw ax
c0008caf:	9e                   	sahf   
c0008cb0:	73 79                	jae    c0008d2b <linear_vari_process+0x141>
c0008cb2:	85 d2                	test   edx,edx
c0008cb4:	7e 38                	jle    c0008cee <linear_vari_process+0x104>
c0008cb6:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008cba:	83 ec 10             	sub    esp,0x10
c0008cbd:	dd 07                	fld    QWORD PTR [edi]
c0008cbf:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cc5:	e8 26 56 01 00       	call   c001e2f0 <fabs>
c0008cca:	83 c4 10             	add    esp,0x10
c0008ccd:	dc 1d 58 fb 01 c0    	fcomp  QWORD PTR ds:0xc001fb58
c0008cd3:	df e0                	fnstsw ax
c0008cd5:	9e                   	sahf   
c0008cd6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008cda:	76 12                	jbe    c0008cee <linear_vari_process+0x104>
c0008cdc:	dd 07                	fld    QWORD PTR [edi]
c0008cde:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008ce1:	d8 e1                	fsub   st,st(1)
c0008ce3:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008ce6:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008ce9:	de c1                	faddp  st(1),st
c0008ceb:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008cee:	31 c0                	xor    eax,eax
c0008cf0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008cf3:	7e 1f                	jle    c0008d14 <linear_vari_process+0x12a>
c0008cf5:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008cf9:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008cfb:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008cfe:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008d02:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008d05:	d8 e1                	fsub   st,st(1)
c0008d07:	40                   	inc    eax
c0008d08:	d8 ca                	fmul   st,st(2)
c0008d0a:	de c1                	faddp  st(1),st
c0008d0c:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008d0f:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008d12:	eb dc                	jmp    c0008cf0 <linear_vari_process+0x106>
c0008d14:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d18:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d1b:	de c1                	faddp  st(1),st
c0008d1d:	e9 5f ff ff ff       	jmp    c0008c81 <linear_vari_process+0x97>
c0008d22:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d26:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008d29:	de c1                	faddp  st(1),st
c0008d2b:	83 ec 10             	sub    esp,0x10
c0008d2e:	dd 14 24             	fst    QWORD PTR [esp]
c0008d31:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d35:	e8 59 fe ff ff       	call   c0008b93 <fmod_one>
c0008d3a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008d3d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008d41:	d8 e1                	fsub   st,st(1)
c0008d43:	d9 c9                	fxch   st(1)
c0008d45:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008d49:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d4c:	e8 bf 55 01 00       	call   c001e310 <lrint>
c0008d51:	83 c4 10             	add    esp,0x10
c0008d54:	0f af e8             	imul   ebp,eax
c0008d57:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d5b:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008d5e:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008d61:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008d64:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008d67:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008d6a:	0f 8d 97 00 00 00    	jge    c0008e07 <linear_vari_process+0x21d>
c0008d70:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008d74:	d9 c0                	fld    st(0)
c0008d76:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d79:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008d7d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008d81:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008d85:	de d9                	fcompp 
c0008d87:	df e0                	fnstsw ax
c0008d89:	9e                   	sahf   
c0008d8a:	76 7b                	jbe    c0008e07 <linear_vari_process+0x21d>
c0008d8c:	85 ed                	test   ebp,ebp
c0008d8e:	7e 38                	jle    c0008dc8 <linear_vari_process+0x1de>
c0008d90:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d94:	83 ec 10             	sub    esp,0x10
c0008d97:	dd 07                	fld    QWORD PTR [edi]
c0008d99:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d9c:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d9f:	e8 4c 55 01 00       	call   c001e2f0 <fabs>
c0008da4:	83 c4 10             	add    esp,0x10
c0008da7:	dc 1d 58 fb 01 c0    	fcomp  QWORD PTR ds:0xc001fb58
c0008dad:	df e0                	fnstsw ax
c0008daf:	9e                   	sahf   
c0008db0:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008db4:	76 12                	jbe    c0008dc8 <linear_vari_process+0x1de>
c0008db6:	dd 07                	fld    QWORD PTR [edi]
c0008db8:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008dbb:	d8 e1                	fsub   st,st(1)
c0008dbd:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008dc0:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008dc3:	de c1                	faddp  st(1),st
c0008dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008dc8:	31 c0                	xor    eax,eax
c0008dca:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008dcd:	39 c2                	cmp    edx,eax
c0008dcf:	0f 8e 4d ff ff ff    	jle    c0008d22 <linear_vari_process+0x138>
c0008dd5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008dd7:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008dda:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008dde:	89 e9                	mov    ecx,ebp
c0008de0:	01 c5                	add    ebp,eax
c0008de2:	29 d1                	sub    ecx,edx
c0008de4:	89 ca                	mov    edx,ecx
c0008de6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008dea:	01 c2                	add    edx,eax
c0008dec:	40                   	inc    eax
c0008ded:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008df0:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008df3:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008df6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008df9:	d8 e1                	fsub   st,st(1)
c0008dfb:	d8 ca                	fmul   st,st(2)
c0008dfd:	de c1                	faddp  st(1),st
c0008dff:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e02:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008e05:	eb c3                	jmp    c0008dca <linear_vari_process+0x1e0>
c0008e07:	39 d1                	cmp    ecx,edx
c0008e09:	7d 13                	jge    c0008e1e <linear_vari_process+0x234>
c0008e0b:	89 d0                	mov    eax,edx
c0008e0d:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008e10:	29 c8                	sub    eax,ecx
c0008e12:	99                   	cdq    
c0008e13:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e1a:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008e1e:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008e21:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e24:	85 c0                	test   eax,eax
c0008e26:	7f 1b                	jg     c0008e43 <linear_vari_process+0x259>
c0008e28:	dd 04 24             	fld    QWORD PTR [esp]
c0008e2b:	dd 1f                	fstp   QWORD PTR [edi]
c0008e2d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008e30:	99                   	cdq    
c0008e31:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e34:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008e37:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008e3a:	99                   	cdq    
c0008e3b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008e3e:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008e41:	eb 26                	jmp    c0008e69 <linear_vari_process+0x27f>
c0008e43:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008e46:	31 d2                	xor    edx,edx
c0008e48:	29 c8                	sub    eax,ecx
c0008e4a:	c1 e0 02             	shl    eax,0x2
c0008e4d:	39 d1                	cmp    ecx,edx
c0008e4f:	7e d7                	jle    c0008e28 <linear_vari_process+0x23e>
c0008e51:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008e53:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008e57:	83 c0 04             	add    eax,0x4
c0008e5a:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008e5e:	42                   	inc    edx
c0008e5f:	eb ec                	jmp    c0008e4d <linear_vari_process+0x263>
c0008e61:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008e69:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008e6d:	83 c4 2c             	add    esp,0x2c
c0008e70:	5b                   	pop    ebx
c0008e71:	5e                   	pop    esi
c0008e72:	5f                   	pop    edi
c0008e73:	5d                   	pop    ebp
c0008e74:	c3                   	ret    

c0008e75 <linear_reset>:
c0008e75:	83 ec 0c             	sub    esp,0xc
c0008e78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008e7c:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008e7f:	85 c0                	test   eax,eax
c0008e81:	74 20                	je     c0008ea3 <linear_reset+0x2e>
c0008e83:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008e86:	83 c0 1c             	add    eax,0x1c
c0008e89:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c0008e8c:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0008e93:	c1 e2 02             	shl    edx,0x2
c0008e96:	51                   	push   ecx
c0008e97:	52                   	push   edx
c0008e98:	6a 00                	push   0x0
c0008e9a:	50                   	push   eax
c0008e9b:	e8 68 77 ff ff       	call   c0000608 <memset>
c0008ea0:	83 c4 10             	add    esp,0x10
c0008ea3:	83 c4 0c             	add    esp,0xc
c0008ea6:	c3                   	ret    

c0008ea7 <linear_get_name>:
c0008ea7:	31 c0                	xor    eax,eax
c0008ea9:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008eae:	75 05                	jne    c0008eb5 <linear_get_name+0xe>
c0008eb0:	b8 14 fb 01 c0       	mov    eax,0xc001fb14
c0008eb5:	c3                   	ret    

c0008eb6 <linear_get_description>:
c0008eb6:	31 c0                	xor    eax,eax
c0008eb8:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008ebd:	75 05                	jne    c0008ec4 <linear_get_description+0xe>
c0008ebf:	b8 28 fb 01 c0       	mov    eax,0xc001fb28
c0008ec4:	c3                   	ret    

c0008ec5 <linear_set_converter>:
c0008ec5:	53                   	push   ebx
c0008ec6:	b8 0a 00 00 00       	mov    eax,0xa
c0008ecb:	83 ec 08             	sub    esp,0x8
c0008ece:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ed2:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008ed7:	75 6e                	jne    c0008f47 <linear_set_converter+0x82>
c0008ed9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008edc:	85 c0                	test   eax,eax
c0008ede:	74 13                	je     c0008ef3 <linear_set_converter+0x2e>
c0008ee0:	83 ec 0c             	sub    esp,0xc
c0008ee3:	50                   	push   eax
c0008ee4:	e8 58 32 00 00       	call   c000c141 <free>
c0008ee9:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008ef0:	83 c4 10             	add    esp,0x10
c0008ef3:	50                   	push   eax
c0008ef4:	50                   	push   eax
c0008ef5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008ef8:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008eff:	50                   	push   eax
c0008f00:	6a 01                	push   0x1
c0008f02:	e8 5a 32 00 00       	call   c000c161 <calloc>
c0008f07:	83 c4 10             	add    esp,0x10
c0008f0a:	89 c2                	mov    edx,eax
c0008f0c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008f0f:	85 d2                	test   edx,edx
c0008f11:	b8 01 00 00 00       	mov    eax,0x1
c0008f16:	74 2f                	je     c0008f47 <linear_set_converter+0x82>
c0008f18:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008f1e:	83 ec 0c             	sub    esp,0xc
c0008f21:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f24:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008f27:	c7 43 24 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008bea
c0008f2e:	c7 43 20 ea 8b 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008bea
c0008f35:	c7 43 28 75 8e 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008e75
c0008f3c:	53                   	push   ebx
c0008f3d:	e8 33 ff ff ff       	call   c0008e75 <linear_reset>
c0008f42:	83 c4 10             	add    esp,0x10
c0008f45:	31 c0                	xor    eax,eax
c0008f47:	83 c4 08             	add    esp,0x8
c0008f4a:	5b                   	pop    ebx
c0008f4b:	c3                   	ret    

c0008f4c <is_bad_src_ratio>:
c0008f4c:	83 ec 0c             	sub    esp,0xc
c0008f4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008f53:	89 04 24             	mov    DWORD PTR [esp],eax
c0008f56:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008f5a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008f5e:	dd 04 24             	fld    QWORD PTR [esp]
c0008f61:	dd 05 e0 fa 01 c0    	fld    QWORD PTR ds:0xc001fae0
c0008f67:	de d9                	fcompp 
c0008f69:	df e0                	fnstsw ax
c0008f6b:	f6 c4 45             	test   ah,0x45
c0008f6e:	74 10                	je     c0008f80 <is_bad_src_ratio+0x34>
c0008f70:	dd 04 24             	fld    QWORD PTR [esp]
c0008f73:	dc 1d e8 fa 01 c0    	fcomp  QWORD PTR ds:0xc001fae8
c0008f79:	df e0                	fnstsw ax
c0008f7b:	f6 c4 45             	test   ah,0x45
c0008f7e:	75 07                	jne    c0008f87 <is_bad_src_ratio+0x3b>
c0008f80:	b8 01 00 00 00       	mov    eax,0x1
c0008f85:	eb 05                	jmp    c0008f8c <is_bad_src_ratio+0x40>
c0008f87:	b8 00 00 00 00       	mov    eax,0x0
c0008f8c:	83 c4 0c             	add    esp,0xc
c0008f8f:	c3                   	ret    

c0008f90 <int_to_fp>:
c0008f90:	c1 e0 0c             	shl    eax,0xc
c0008f93:	c3                   	ret    

c0008f94 <fp_to_int>:
c0008f94:	c1 f8 0c             	sar    eax,0xc
c0008f97:	c3                   	ret    

c0008f98 <fp_fraction_part>:
c0008f98:	25 ff 0f 00 00       	and    eax,0xfff
c0008f9d:	c3                   	ret    

c0008f9e <fp_to_double>:
c0008f9e:	83 ec 0c             	sub    esp,0xc
c0008fa1:	e8 f2 ff ff ff       	call   c0008f98 <fp_fraction_part>
c0008fa6:	d9 05 e8 fc 01 c0    	fld    DWORD PTR ds:0xc001fce8
c0008fac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fb0:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c0008fb4:	83 c4 0c             	add    esp,0xc
c0008fb7:	c3                   	ret    

c0008fb8 <calc_output_single>:
c0008fb8:	55                   	push   ebp
c0008fb9:	57                   	push   edi
c0008fba:	89 c7                	mov    edi,eax
c0008fbc:	56                   	push   esi
c0008fbd:	53                   	push   ebx
c0008fbe:	89 d3                	mov    ebx,edx
c0008fc0:	83 ec 24             	sub    esp,0x24
c0008fc3:	89 de                	mov    esi,ebx
c0008fc5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008fc8:	e8 c3 ff ff ff       	call   c0008f90 <int_to_fp>
c0008fcd:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0008fd0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008fd4:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008fdb:	29 c8                	sub    eax,ecx
c0008fdd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0008fe5:	99                   	cdq    
c0008fe6:	f7 fb                	idiv   ebx
c0008fe8:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0008feb:	0f af f0             	imul   esi,eax
c0008fee:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0008ff2:	01 ce                	add    esi,ecx
c0008ff4:	29 c2                	sub    edx,eax
c0008ff6:	8d 14 97             	lea    edx,[edi+edx*4]
c0008ff9:	89 f0                	mov    eax,esi
c0008ffb:	e8 9e ff ff ff       	call   c0008f9e <fp_to_double>
c0009000:	89 f0                	mov    eax,esi
c0009002:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009006:	e8 89 ff ff ff       	call   c0008f94 <fp_to_int>
c000900b:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000900f:	83 c2 04             	add    edx,0x4
c0009012:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009016:	d8 e1                	fsub   st,st(1)
c0009018:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000901c:	de c9                	fmulp  st(1),st
c000901e:	de c1                	faddp  st(1),st
c0009020:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009026:	29 de                	sub    esi,ebx
c0009028:	dc 04 24             	fadd   QWORD PTR [esp]
c000902b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000902e:	79 c9                	jns    c0008ff9 <calc_output_single+0x41>
c0009030:	89 d8                	mov    eax,ebx
c0009032:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0009036:	29 c8                	sub    eax,ecx
c0009038:	d9 ee                	fldz   
c000903a:	89 c1                	mov    ecx,eax
c000903c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009040:	29 c8                	sub    eax,ecx
c0009042:	99                   	cdq    
c0009043:	f7 fb                	idiv   ebx
c0009045:	89 da                	mov    edx,ebx
c0009047:	0f af d0             	imul   edx,eax
c000904a:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c000904e:	01 d1                	add    ecx,edx
c0009050:	8d 14 87             	lea    edx,[edi+eax*4]
c0009053:	89 c8                	mov    eax,ecx
c0009055:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009059:	e8 40 ff ff ff       	call   c0008f9e <fp_to_double>
c000905e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009062:	89 c8                	mov    eax,ecx
c0009064:	e8 2b ff ff ff       	call   c0008f94 <fp_to_int>
c0009069:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000906d:	29 d9                	sub    ecx,ebx
c000906f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009073:	83 ea 04             	sub    edx,0x4
c0009076:	d8 e1                	fsub   st,st(1)
c0009078:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000907c:	de c9                	fmulp  st(1),st
c000907e:	de c1                	faddp  st(1),st
c0009080:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009086:	85 c9                	test   ecx,ecx
c0009088:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000908c:	de c1                	faddp  st(1),st
c000908e:	7f c3                	jg     c0009053 <calc_output_single+0x9b>
c0009090:	dd 04 24             	fld    QWORD PTR [esp]
c0009093:	83 c4 24             	add    esp,0x24
c0009096:	de c1                	faddp  st(1),st
c0009098:	5b                   	pop    ebx
c0009099:	5e                   	pop    esi
c000909a:	5f                   	pop    edi
c000909b:	5d                   	pop    ebp
c000909c:	c3                   	ret    

c000909d <calc_output_stereo>:
c000909d:	55                   	push   ebp
c000909e:	57                   	push   edi
c000909f:	89 c7                	mov    edi,eax
c00090a1:	56                   	push   esi
c00090a2:	53                   	push   ebx
c00090a3:	89 d3                	mov    ebx,edx
c00090a5:	83 ec 44             	sub    esp,0x44
c00090a8:	89 de                	mov    esi,ebx
c00090aa:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00090ae:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00090b1:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00090b5:	e8 d6 fe ff ff       	call   c0008f90 <int_to_fp>
c00090ba:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00090bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00090c1:	d9 ee                	fldz   
c00090c3:	29 c8                	sub    eax,ecx
c00090c5:	dd 14 24             	fst    QWORD PTR [esp]
c00090c8:	99                   	cdq    
c00090c9:	f7 fb                	idiv   ebx
c00090cb:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00090ce:	0f af f0             	imul   esi,eax
c00090d1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00090d5:	01 ce                	add    esi,ecx
c00090d7:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00090da:	0f af c2             	imul   eax,edx
c00090dd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00090e1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00090e5:	29 c2                	sub    edx,eax
c00090e7:	8d 14 97             	lea    edx,[edi+edx*4]
c00090ea:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00090ee:	89 f0                	mov    eax,esi
c00090f0:	e8 a9 fe ff ff       	call   c0008f9e <fp_to_double>
c00090f5:	89 f0                	mov    eax,esi
c00090f7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00090fb:	e8 94 fe ff ff       	call   c0008f94 <fp_to_int>
c0009100:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009104:	83 c2 08             	add    edx,0x8
c0009107:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000910b:	d8 e1                	fsub   st,st(1)
c000910d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009111:	de c9                	fmulp  st(1),st
c0009113:	de c1                	faddp  st(1),st
c0009115:	d9 c0                	fld    st(0)
c0009117:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000911d:	dc 04 24             	fadd   QWORD PTR [esp]
c0009120:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009123:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009129:	29 de                	sub    esi,ebx
c000912b:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000912f:	de c1                	faddp  st(1),st
c0009131:	79 b7                	jns    c00090ea <calc_output_stereo+0x4d>
c0009133:	89 d8                	mov    eax,ebx
c0009135:	d9 ee                	fldz   
c0009137:	d9 ee                	fldz   
c0009139:	29 c8                	sub    eax,ecx
c000913b:	89 c1                	mov    ecx,eax
c000913d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009141:	29 c8                	sub    eax,ecx
c0009143:	99                   	cdq    
c0009144:	f7 fb                	idiv   ebx
c0009146:	89 da                	mov    edx,ebx
c0009148:	0f af d0             	imul   edx,eax
c000914b:	40                   	inc    eax
c000914c:	01 d1                	add    ecx,edx
c000914e:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
c0009153:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0009157:	8d 14 87             	lea    edx,[edi+eax*4]
c000915a:	eb 04                	jmp    c0009160 <calc_output_stereo+0xc3>
c000915c:	d9 ca                	fxch   st(2)
c000915e:	d9 c9                	fxch   st(1)
c0009160:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009164:	d9 c9                	fxch   st(1)
c0009166:	89 c8                	mov    eax,ecx
c0009168:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000916c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009170:	e8 29 fe ff ff       	call   c0008f9e <fp_to_double>
c0009175:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009179:	89 c8                	mov    eax,ecx
c000917b:	e8 14 fe ff ff       	call   c0008f94 <fp_to_int>
c0009180:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009184:	29 d9                	sub    ecx,ebx
c0009186:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000918a:	83 ea 08             	sub    edx,0x8
c000918d:	d8 e1                	fsub   st,st(1)
c000918f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009193:	de c9                	fmulp  st(1),st
c0009195:	de c1                	faddp  st(1),st
c0009197:	d9 c0                	fld    st(0)
c0009199:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c000919f:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c00091a3:	de c1                	faddp  st(1),st
c00091a5:	d9 c9                	fxch   st(1)
c00091a7:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c00091ad:	85 c9                	test   ecx,ecx
c00091af:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00091b3:	de c1                	faddp  st(1),st
c00091b5:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00091b9:	7f a1                	jg     c000915c <calc_output_stereo+0xbf>
c00091bb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00091bf:	dd 04 24             	fld    QWORD PTR [esp]
c00091c2:	de c3                	faddp  st(3),st
c00091c4:	d9 ca                	fxch   st(2)
c00091c6:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091ca:	d9 18                	fstp   DWORD PTR [eax]
c00091cc:	de c1                	faddp  st(1),st
c00091ce:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c00091d2:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c00091d5:	83 c4 44             	add    esp,0x44
c00091d8:	5b                   	pop    ebx
c00091d9:	5e                   	pop    esi
c00091da:	5f                   	pop    edi
c00091db:	5d                   	pop    ebp
c00091dc:	c3                   	ret    

c00091dd <calc_output_quad>:
c00091dd:	55                   	push   ebp
c00091de:	57                   	push   edi
c00091df:	56                   	push   esi
c00091e0:	89 c6                	mov    esi,eax
c00091e2:	53                   	push   ebx
c00091e3:	89 d3                	mov    ebx,edx
c00091e5:	83 ec 5c             	sub    esp,0x5c
c00091e8:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c00091ec:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00091ef:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091f2:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00091f6:	e8 95 fd ff ff       	call   c0008f90 <int_to_fp>
c00091fb:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c00091fe:	d9 ee                	fldz   
c0009200:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009204:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c0009208:	29 c8                	sub    eax,ecx
c000920a:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c000920e:	99                   	cdq    
c000920f:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009213:	f7 fb                	idiv   ebx
c0009215:	89 da                	mov    edx,ebx
c0009217:	0f af d0             	imul   edx,eax
c000921a:	01 ca                	add    edx,ecx
c000921c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009220:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c0009223:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009227:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000922a:	0f af c2             	imul   eax,edx
c000922d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0009231:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009235:	29 c2                	sub    edx,eax
c0009237:	8d 14 96             	lea    edx,[esi+edx*4]
c000923a:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c000923e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009242:	e8 57 fd ff ff       	call   c0008f9e <fp_to_double>
c0009247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000924b:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000924f:	e8 40 fd ff ff       	call   c0008f94 <fp_to_int>
c0009254:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009258:	83 c2 10             	add    edx,0x10
c000925b:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c000925f:	d8 e1                	fsub   st,st(1)
c0009261:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009265:	de c9                	fmulp  st(1),st
c0009267:	de c1                	faddp  st(1),st
c0009269:	d9 c0                	fld    st(0)
c000926b:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009271:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009275:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009279:	d9 c0                	fld    st(0)
c000927b:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009281:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009285:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009289:	d9 c0                	fld    st(0)
c000928b:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009291:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009295:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009299:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000929f:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c00092a3:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00092a7:	de c1                	faddp  st(1),st
c00092a9:	79 8f                	jns    c000923a <calc_output_quad+0x5d>
c00092ab:	89 d8                	mov    eax,ebx
c00092ad:	d9 ee                	fldz   
c00092af:	29 c8                	sub    eax,ecx
c00092b1:	d9 ee                	fldz   
c00092b3:	89 c1                	mov    ecx,eax
c00092b5:	d9 ee                	fldz   
c00092b7:	d9 ee                	fldz   
c00092b9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00092bd:	29 c8                	sub    eax,ecx
c00092bf:	99                   	cdq    
c00092c0:	f7 fb                	idiv   ebx
c00092c2:	89 da                	mov    edx,ebx
c00092c4:	0f af d0             	imul   edx,eax
c00092c7:	40                   	inc    eax
c00092c8:	01 d1                	add    ecx,edx
c00092ca:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c00092cf:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c00092d3:	8d 14 86             	lea    edx,[esi+eax*4]
c00092d6:	eb 0a                	jmp    c00092e2 <calc_output_quad+0x105>
c00092d8:	d9 cc                	fxch   st(4)
c00092da:	d9 ca                	fxch   st(2)
c00092dc:	d9 c9                	fxch   st(1)
c00092de:	d9 cb                	fxch   st(3)
c00092e0:	d9 c9                	fxch   st(1)
c00092e2:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092e6:	d9 c9                	fxch   st(1)
c00092e8:	89 c8                	mov    eax,ecx
c00092ea:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092ee:	d9 c9                	fxch   st(1)
c00092f0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c00092f4:	d9 c9                	fxch   st(1)
c00092f6:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00092fa:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00092fe:	e8 9b fc ff ff       	call   c0008f9e <fp_to_double>
c0009303:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009307:	89 c8                	mov    eax,ecx
c0009309:	e8 86 fc ff ff       	call   c0008f94 <fp_to_int>
c000930e:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009312:	29 d9                	sub    ecx,ebx
c0009314:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009318:	83 ea 10             	sub    edx,0x10
c000931b:	d8 e1                	fsub   st,st(1)
c000931d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009321:	de c9                	fmulp  st(1),st
c0009323:	de c1                	faddp  st(1),st
c0009325:	d9 c0                	fld    st(0)
c0009327:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c000932d:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009331:	de c1                	faddp  st(1),st
c0009333:	d9 c1                	fld    st(1)
c0009335:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c000933b:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000933f:	de c1                	faddp  st(1),st
c0009341:	d9 c2                	fld    st(2)
c0009343:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009349:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000934d:	de c1                	faddp  st(1),st
c000934f:	d9 cb                	fxch   st(3)
c0009351:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009357:	85 c9                	test   ecx,ecx
c0009359:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000935d:	de c1                	faddp  st(1),st
c000935f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009363:	0f 8f 6f ff ff ff    	jg     c00092d8 <calc_output_quad+0xfb>
c0009369:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000936d:	de c4                	faddp  st(4),st
c000936f:	d9 cb                	fxch   st(3)
c0009371:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009374:	d9 1f                	fstp   DWORD PTR [edi]
c0009376:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000937a:	de c2                	faddp  st(2),st
c000937c:	d9 c9                	fxch   st(1)
c000937e:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009381:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009384:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009388:	de c3                	faddp  st(3),st
c000938a:	d9 ca                	fxch   st(2)
c000938c:	dc 0c 24             	fmul   QWORD PTR [esp]
c000938f:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c0009392:	de c1                	faddp  st(1),st
c0009394:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009397:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c000939a:	83 c4 5c             	add    esp,0x5c
c000939d:	5b                   	pop    ebx
c000939e:	5e                   	pop    esi
c000939f:	5f                   	pop    edi
c00093a0:	5d                   	pop    ebp
c00093a1:	c3                   	ret    

c00093a2 <calc_output_hex>:
c00093a2:	55                   	push   ebp
c00093a3:	57                   	push   edi
c00093a4:	89 c7                	mov    edi,eax
c00093a6:	56                   	push   esi
c00093a7:	53                   	push   ebx
c00093a8:	89 d3                	mov    ebx,edx
c00093aa:	83 ec 7c             	sub    esp,0x7c
c00093ad:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c00093b4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00093b7:	dd 1c 24             	fstp   QWORD PTR [esp]
c00093ba:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c00093c1:	e8 ca fb ff ff       	call   c0008f90 <int_to_fp>
c00093c6:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c00093c9:	d9 ee                	fldz   
c00093cb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00093cf:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00093d3:	29 c8                	sub    eax,ecx
c00093d5:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00093d9:	99                   	cdq    
c00093da:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00093de:	f7 fb                	idiv   ebx
c00093e0:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00093e4:	89 da                	mov    edx,ebx
c00093e6:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00093ea:	0f af d0             	imul   edx,eax
c00093ed:	01 ca                	add    edx,ecx
c00093ef:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00093f3:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c00093f6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00093fa:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c00093fd:	0f af c2             	imul   eax,edx
c0009400:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009404:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009408:	29 c2                	sub    edx,eax
c000940a:	8d 14 97             	lea    edx,[edi+edx*4]
c000940d:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c0009411:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009415:	e8 84 fb ff ff       	call   c0008f9e <fp_to_double>
c000941a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000941e:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c0009422:	e8 6d fb ff ff       	call   c0008f94 <fp_to_int>
c0009427:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000942b:	83 c2 18             	add    edx,0x18
c000942e:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009432:	d8 e1                	fsub   st,st(1)
c0009434:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009438:	de c9                	fmulp  st(1),st
c000943a:	de c1                	faddp  st(1),st
c000943c:	d9 c0                	fld    st(0)
c000943e:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c0009444:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009448:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000944c:	d9 c0                	fld    st(0)
c000944e:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c0009454:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009458:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000945c:	d9 c0                	fld    st(0)
c000945e:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c0009464:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009468:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000946c:	d9 c0                	fld    st(0)
c000946e:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c0009474:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009478:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000947c:	d9 c0                	fld    st(0)
c000947e:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c0009484:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009488:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000948c:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c0009492:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c0009496:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000949a:	de c1                	faddp  st(1),st
c000949c:	0f 89 6b ff ff ff    	jns    c000940d <calc_output_hex+0x6b>
c00094a2:	d9 ee                	fldz   
c00094a4:	d9 ee                	fldz   
c00094a6:	89 d8                	mov    eax,ebx
c00094a8:	29 c8                	sub    eax,ecx
c00094aa:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c00094ae:	89 c1                	mov    ecx,eax
c00094b0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00094b4:	29 c8                	sub    eax,ecx
c00094b6:	99                   	cdq    
c00094b7:	f7 fb                	idiv   ebx
c00094b9:	89 da                	mov    edx,ebx
c00094bb:	0f af d0             	imul   edx,eax
c00094be:	40                   	inc    eax
c00094bf:	01 d1                	add    ecx,edx
c00094c1:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c00094c6:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00094ca:	dd 54 24 38          	fst    QWORD PTR [esp+0x38]
c00094ce:	8d 14 87             	lea    edx,[edi+eax*4]
c00094d1:	d9 ee                	fldz   
c00094d3:	d9 ee                	fldz   
c00094d5:	d9 ca                	fxch   st(2)
c00094d7:	eb 08                	jmp    c00094e1 <calc_output_hex+0x13f>
c00094d9:	d9 cc                	fxch   st(4)
c00094db:	d9 cb                	fxch   st(3)
c00094dd:	d9 ca                	fxch   st(2)
c00094df:	d9 c9                	fxch   st(1)
c00094e1:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c00094e5:	89 c8                	mov    eax,ecx
c00094e7:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c00094eb:	d9 ca                	fxch   st(2)
c00094ed:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094f1:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00094f5:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00094f9:	e8 a0 fa ff ff       	call   c0008f9e <fp_to_double>
c00094fe:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c0009502:	89 c8                	mov    eax,ecx
c0009504:	e8 8b fa ff ff       	call   c0008f94 <fp_to_int>
c0009509:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000950d:	29 d9                	sub    ecx,ebx
c000950f:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009513:	83 ea 18             	sub    edx,0x18
c0009516:	d8 e1                	fsub   st,st(1)
c0009518:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c000951c:	de c9                	fmulp  st(1),st
c000951e:	de c1                	faddp  st(1),st
c0009520:	d9 c0                	fld    st(0)
c0009522:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c0009528:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c000952c:	de c1                	faddp  st(1),st
c000952e:	d9 c1                	fld    st(1)
c0009530:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c0009536:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c000953a:	de c1                	faddp  st(1),st
c000953c:	d9 c2                	fld    st(2)
c000953e:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c0009544:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009548:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000954c:	d9 c2                	fld    st(2)
c000954e:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009554:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009558:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000955c:	d9 c2                	fld    st(2)
c000955e:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c0009564:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009568:	de c1                	faddp  st(1),st
c000956a:	d9 cb                	fxch   st(3)
c000956c:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c0009572:	85 c9                	test   ecx,ecx
c0009574:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009578:	de c1                	faddp  st(1),st
c000957a:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000957e:	0f 8f 55 ff ff ff    	jg     c00094d9 <calc_output_hex+0x137>
c0009584:	d9 cb                	fxch   st(3)
c0009586:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c000958a:	dc 0c 24             	fmul   QWORD PTR [esp]
c000958d:	d9 1e                	fstp   DWORD PTR [esi]
c000958f:	d9 c9                	fxch   st(1)
c0009591:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009595:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009598:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c000959b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000959f:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c00095a3:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095a6:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c00095a9:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00095ad:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095b1:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095b4:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c00095b7:	d9 ca                	fxch   st(2)
c00095b9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c00095bd:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c0:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c00095c3:	de c1                	faddp  st(1),st
c00095c5:	dc 0c 24             	fmul   QWORD PTR [esp]
c00095c8:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c00095cb:	83 c4 7c             	add    esp,0x7c
c00095ce:	5b                   	pop    ebx
c00095cf:	5e                   	pop    esi
c00095d0:	5f                   	pop    edi
c00095d1:	5d                   	pop    ebp
c00095d2:	c3                   	ret    

c00095d3 <sinc_reset>:
c00095d3:	56                   	push   esi
c00095d4:	53                   	push   ebx
c00095d5:	51                   	push   ecx
c00095d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00095da:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c00095dd:	85 db                	test   ebx,ebx
c00095df:	74 51                	je     c0009632 <sinc_reset+0x5f>
c00095e1:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00095e8:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00095ef:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c00095f6:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00095fc:	d9 ee                	fldz   
c00095fe:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009601:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c0009604:	52                   	push   edx
c0009605:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009608:	c1 e0 02             	shl    eax,0x2
c000960b:	50                   	push   eax
c000960c:	6a 00                	push   0x0
c000960e:	56                   	push   esi
c000960f:	e8 f4 6f ff ff       	call   c0000608 <memset>
c0009614:	83 c4 0c             	add    esp,0xc
c0009617:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000961a:	c1 e0 02             	shl    eax,0x2
c000961d:	50                   	push   eax
c000961e:	68 aa 00 00 00       	push   0xaa
c0009623:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009626:	8d 04 86             	lea    eax,[esi+eax*4]
c0009629:	50                   	push   eax
c000962a:	e8 d9 6f ff ff       	call   c0000608 <memset>
c000962f:	83 c4 10             	add    esp,0x10
c0009632:	58                   	pop    eax
c0009633:	5b                   	pop    ebx
c0009634:	5e                   	pop    esi
c0009635:	c3                   	ret    

c0009636 <calc_output_multi>:
c0009636:	55                   	push   ebp
c0009637:	57                   	push   edi
c0009638:	8d 78 44             	lea    edi,[eax+0x44]
c000963b:	56                   	push   esi
c000963c:	89 c6                	mov    esi,eax
c000963e:	53                   	push   ebx
c000963f:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c0009645:	83 ec 4c             	sub    esp,0x4c
c0009648:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000964c:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c0009650:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009654:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0009658:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000965c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009660:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009663:	e8 28 f9 ff ff       	call   c0008f90 <int_to_fp>
c0009668:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c000966b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000966f:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009673:	99                   	cdq    
c0009674:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c0009678:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000967c:	0f af d0             	imul   edx,eax
c000967f:	0f af c3             	imul   eax,ebx
c0009682:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009686:	29 c5                	sub    ebp,eax
c0009688:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000968c:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0009690:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009697:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000969b:	52                   	push   edx
c000969c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096a0:	6a 00                	push   0x0
c00096a2:	57                   	push   edi
c00096a3:	e8 60 6f ff ff       	call   c0000608 <memset>
c00096a8:	83 c4 10             	add    esp,0x10
c00096ab:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096af:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00096b3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096b7:	e8 e2 f8 ff ff       	call   c0008f9e <fp_to_double>
c00096bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00096c0:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00096c4:	e8 cb f8 ff ff       	call   c0008f94 <fp_to_int>
c00096c9:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00096cc:	89 d9                	mov    ecx,ebx
c00096ce:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00096d1:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00096d5:	d8 e1                	fsub   st,st(1)
c00096d7:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00096db:	de c9                	fmulp  st(1),st
c00096dd:	de c1                	faddp  st(1),st
c00096df:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00096e3:	89 c8                	mov    eax,ecx
c00096e5:	bd 08 00 00 00       	mov    ebp,0x8
c00096ea:	99                   	cdq    
c00096eb:	f7 fd                	idiv   ebp
c00096ed:	4a                   	dec    edx
c00096ee:	83 fa 06             	cmp    edx,0x6
c00096f1:	77 07                	ja     c00096fa <calc_output_multi+0xc4>
c00096f3:	ff 24 95 60 fb 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe04a0]
c00096fa:	49                   	dec    ecx
c00096fb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00096ff:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009702:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009709:	d9 c1                	fld    st(1)
c000970b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000970f:	dc 00                	fadd   QWORD PTR [eax]
c0009711:	dd 18                	fstp   QWORD PTR [eax]
c0009713:	49                   	dec    ecx
c0009714:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009718:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000971b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009722:	d9 c1                	fld    st(1)
c0009724:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009728:	dc 00                	fadd   QWORD PTR [eax]
c000972a:	dd 18                	fstp   QWORD PTR [eax]
c000972c:	49                   	dec    ecx
c000972d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009731:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009734:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000973b:	d9 c1                	fld    st(1)
c000973d:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009741:	dc 00                	fadd   QWORD PTR [eax]
c0009743:	dd 18                	fstp   QWORD PTR [eax]
c0009745:	49                   	dec    ecx
c0009746:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000974a:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000974d:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009754:	d9 c1                	fld    st(1)
c0009756:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000975a:	dc 00                	fadd   QWORD PTR [eax]
c000975c:	dd 18                	fstp   QWORD PTR [eax]
c000975e:	49                   	dec    ecx
c000975f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009763:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009766:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000976d:	d9 c1                	fld    st(1)
c000976f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009773:	dc 00                	fadd   QWORD PTR [eax]
c0009775:	dd 18                	fstp   QWORD PTR [eax]
c0009777:	49                   	dec    ecx
c0009778:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000977c:	8d 04 cf             	lea    eax,[edi+ecx*8]
c000977f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009786:	d9 c1                	fld    st(1)
c0009788:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000978c:	dc 00                	fadd   QWORD PTR [eax]
c000978e:	dd 18                	fstp   QWORD PTR [eax]
c0009790:	49                   	dec    ecx
c0009791:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009795:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009798:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000979f:	d9 c1                	fld    st(1)
c00097a1:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097a5:	dc 00                	fadd   QWORD PTR [eax]
c00097a7:	dd 18                	fstp   QWORD PTR [eax]
c00097a9:	49                   	dec    ecx
c00097aa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00097ae:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097b1:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097b8:	d9 c1                	fld    st(1)
c00097ba:	85 c9                	test   ecx,ecx
c00097bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097c0:	dc 00                	fadd   QWORD PTR [eax]
c00097c2:	dd 18                	fstp   QWORD PTR [eax]
c00097c4:	0f 8f 19 ff ff ff    	jg     c00096e3 <calc_output_multi+0xad>
c00097ca:	dd d9                	fstp   st(1)
c00097cc:	01 5c 24 0c          	add    DWORD PTR [esp+0xc],ebx
c00097d0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097d4:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c00097d8:	0f 89 d1 fe ff ff    	jns    c00096af <calc_output_multi+0x79>
c00097de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00097e2:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c00097e6:	89 d1                	mov    ecx,edx
c00097e8:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00097ec:	29 c8                	sub    eax,ecx
c00097ee:	99                   	cdq    
c00097ef:	f7 7c 24 10          	idiv   DWORD PTR [esp+0x10]
c00097f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097f7:	0f af d0             	imul   edx,eax
c00097fa:	40                   	inc    eax
c00097fb:	01 d1                	add    ecx,edx
c00097fd:	0f af c3             	imul   eax,ebx
c0009800:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009804:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009807:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000980b:	50                   	push   eax
c000980c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009810:	6a 00                	push   0x0
c0009812:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009816:	e8 ed 6d ff ff       	call   c0000608 <memset>
c000981b:	83 c4 10             	add    esp,0x10
c000981e:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c0009822:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009826:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000982a:	e8 6f f7 ff ff       	call   c0008f9e <fp_to_double>
c000982f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009833:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009837:	e8 58 f7 ff ff       	call   c0008f94 <fp_to_int>
c000983c:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000983f:	89 d9                	mov    ecx,ebx
c0009841:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c0009844:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009848:	d8 e1                	fsub   st,st(1)
c000984a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000984e:	de c9                	fmulp  st(1),st
c0009850:	de c1                	faddp  st(1),st
c0009852:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009856:	89 c8                	mov    eax,ecx
c0009858:	bd 08 00 00 00       	mov    ebp,0x8
c000985d:	99                   	cdq    
c000985e:	f7 fd                	idiv   ebp
c0009860:	4a                   	dec    edx
c0009861:	83 fa 06             	cmp    edx,0x6
c0009864:	77 07                	ja     c000986d <calc_output_multi+0x237>
c0009866:	ff 24 95 7c fb 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe0484]
c000986d:	49                   	dec    ecx
c000986e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009872:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009876:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009879:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009880:	d9 c1                	fld    st(1)
c0009882:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009886:	dc 00                	fadd   QWORD PTR [eax]
c0009888:	dd 18                	fstp   QWORD PTR [eax]
c000988a:	49                   	dec    ecx
c000988b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000988f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009893:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009896:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000989d:	d9 c1                	fld    st(1)
c000989f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098a3:	dc 00                	fadd   QWORD PTR [eax]
c00098a5:	dd 18                	fstp   QWORD PTR [eax]
c00098a7:	49                   	dec    ecx
c00098a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098b0:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098b3:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098ba:	d9 c1                	fld    st(1)
c00098bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098c0:	dc 00                	fadd   QWORD PTR [eax]
c00098c2:	dd 18                	fstp   QWORD PTR [eax]
c00098c4:	49                   	dec    ecx
c00098c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098cd:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098d0:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098d7:	d9 c1                	fld    st(1)
c00098d9:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098dd:	dc 00                	fadd   QWORD PTR [eax]
c00098df:	dd 18                	fstp   QWORD PTR [eax]
c00098e1:	49                   	dec    ecx
c00098e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00098e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00098ea:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00098ed:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00098f4:	d9 c1                	fld    st(1)
c00098f6:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00098fa:	dc 00                	fadd   QWORD PTR [eax]
c00098fc:	dd 18                	fstp   QWORD PTR [eax]
c00098fe:	49                   	dec    ecx
c00098ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009903:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009907:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000990a:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009911:	d9 c1                	fld    st(1)
c0009913:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009917:	dc 00                	fadd   QWORD PTR [eax]
c0009919:	dd 18                	fstp   QWORD PTR [eax]
c000991b:	49                   	dec    ecx
c000991c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009920:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009924:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009927:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000992e:	d9 c1                	fld    st(1)
c0009930:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009934:	dc 00                	fadd   QWORD PTR [eax]
c0009936:	dd 18                	fstp   QWORD PTR [eax]
c0009938:	49                   	dec    ecx
c0009939:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000993d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009941:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009944:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000994b:	d9 c1                	fld    st(1)
c000994d:	85 c9                	test   ecx,ecx
c000994f:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009953:	dc 00                	fadd   QWORD PTR [eax]
c0009955:	dd 18                	fstp   QWORD PTR [eax]
c0009957:	0f 8f f9 fe ff ff    	jg     c0009856 <calc_output_multi+0x220>
c000995d:	dd d9                	fstp   st(1)
c000995f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009963:	29 5c 24 0c          	sub    DWORD PTR [esp+0xc],ebx
c0009967:	29 54 24 14          	sub    DWORD PTR [esp+0x14],edx
c000996b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0009970:	0f 8f ac fe ff ff    	jg     c0009822 <calc_output_multi+0x1ec>
c0009976:	b9 08 00 00 00       	mov    ecx,0x8
c000997b:	89 d8                	mov    eax,ebx
c000997d:	99                   	cdq    
c000997e:	f7 f9                	idiv   ecx
c0009980:	4a                   	dec    edx
c0009981:	83 fa 06             	cmp    edx,0x6
c0009984:	77 07                	ja     c000998d <calc_output_multi+0x357>
c0009986:	ff 24 95 98 fb 01 c0 	jmp    DWORD PTR [edx*4-0x3ffe0468]
c000998d:	4b                   	dec    ebx
c000998e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009992:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009995:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009998:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000999c:	d8 c9                	fmul   st,st(1)
c000999e:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099a1:	4b                   	dec    ebx
c00099a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099a6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099a9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099b0:	d8 c9                	fmul   st,st(1)
c00099b2:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099b5:	4b                   	dec    ebx
c00099b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ba:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099bd:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099c0:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099c4:	d8 c9                	fmul   st,st(1)
c00099c6:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099c9:	4b                   	dec    ebx
c00099ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099ce:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099d1:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099d4:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099d8:	d8 c9                	fmul   st,st(1)
c00099da:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099dd:	4b                   	dec    ebx
c00099de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099e2:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099e5:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099e8:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00099ec:	d8 c9                	fmul   st,st(1)
c00099ee:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c00099f1:	4b                   	dec    ebx
c00099f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099f6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c00099f9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c00099fc:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a00:	d8 c9                	fmul   st,st(1)
c0009a02:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a05:	4b                   	dec    ebx
c0009a06:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a0a:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a0d:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a10:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a14:	d8 c9                	fmul   st,st(1)
c0009a16:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a19:	4b                   	dec    ebx
c0009a1a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a1e:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a21:	85 db                	test   ebx,ebx
c0009a23:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a26:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a2a:	d8 c9                	fmul   st,st(1)
c0009a2c:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a2f:	0f 8f 46 ff ff ff    	jg     c000997b <calc_output_multi+0x345>
c0009a35:	dd d8                	fstp   st(0)
c0009a37:	83 c4 4c             	add    esp,0x4c
c0009a3a:	5b                   	pop    ebx
c0009a3b:	5e                   	pop    esi
c0009a3c:	5f                   	pop    edi
c0009a3d:	5d                   	pop    ebp
c0009a3e:	c3                   	ret    

c0009a3f <double_to_fp>:
c0009a3f:	d9 05 ec fc 01 c0    	fld    DWORD PTR ds:0xc001fcec
c0009a45:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009a49:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009a4d:	e9 be 48 01 00       	jmp    c001e310 <lrint>

c0009a52 <fmod_one>:
c0009a52:	83 ec 2c             	sub    esp,0x2c
c0009a55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a5d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a65:	83 ec 08             	sub    esp,0x8
c0009a68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a6c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a70:	e8 9b 48 01 00       	call   c001e310 <lrint>
c0009a75:	83 c4 10             	add    esp,0x10
c0009a78:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009a7c:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009a80:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009a84:	de e1                	fsubrp st(1),st
c0009a86:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009a8a:	d9 ee                	fldz   
c0009a8c:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009a90:	df e0                	fnstsw ax
c0009a92:	f6 c4 45             	test   ah,0x45
c0009a95:	75 0a                	jne    c0009aa1 <fmod_one+0x4f>
c0009a97:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009a9b:	d9 e8                	fld1   
c0009a9d:	de c1                	faddp  st(1),st
c0009a9f:	eb 04                	jmp    c0009aa5 <fmod_one+0x53>
c0009aa1:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009aa5:	83 c4 2c             	add    esp,0x2c
c0009aa8:	c3                   	ret    

c0009aa9 <prepare_data>:
c0009aa9:	55                   	push   ebp
c0009aaa:	57                   	push   edi
c0009aab:	56                   	push   esi
c0009aac:	53                   	push   ebx
c0009aad:	83 ec 1c             	sub    esp,0x1c
c0009ab0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009ab4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009ab8:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009abc:	0f 89 57 01 00 00    	jns    c0009c19 <prepare_data+0x170>
c0009ac2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009ac5:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009ac8:	85 d2                	test   edx,edx
c0009aca:	75 0d                	jne    c0009ad9 <prepare_data+0x30>
c0009acc:	8d 14 36             	lea    edx,[esi+esi*1]
c0009acf:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009ad2:	29 d0                	sub    eax,edx
c0009ad4:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009ad7:	eb 44                	jmp    c0009b1d <prepare_data+0x74>
c0009ad9:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009adc:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009adf:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009ae2:	39 c1                	cmp    ecx,eax
c0009ae4:	7d 04                	jge    c0009aea <prepare_data+0x41>
c0009ae6:	29 d0                	sub    eax,edx
c0009ae8:	eb 2d                	jmp    c0009b17 <prepare_data+0x6e>
c0009aea:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009af0:	29 d7                	sub    edi,edx
c0009af2:	01 f7                	add    edi,esi
c0009af4:	51                   	push   ecx
c0009af5:	29 f2                	sub    edx,esi
c0009af7:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009afe:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b01:	51                   	push   ecx
c0009b02:	52                   	push   edx
c0009b03:	50                   	push   eax
c0009b04:	e8 91 6a ff ff       	call   c000059a <memmove>
c0009b09:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b0c:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b0f:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009b12:	29 f0                	sub    eax,esi
c0009b14:	83 c4 10             	add    esp,0x10
c0009b17:	29 f0                	sub    eax,esi
c0009b19:	79 02                	jns    c0009b1d <prepare_data+0x74>
c0009b1b:	31 c0                	xor    eax,eax
c0009b1d:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009b20:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009b23:	29 ef                	sub    edi,ebp
c0009b25:	39 c7                	cmp    edi,eax
c0009b27:	7e 02                	jle    c0009b2b <prepare_data+0x82>
c0009b29:	89 c7                	mov    edi,eax
c0009b2b:	89 f8                	mov    eax,edi
c0009b2d:	99                   	cdq    
c0009b2e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009b31:	b8 15 00 00 00       	mov    eax,0x15
c0009b36:	29 d7                	sub    edi,edx
c0009b38:	0f 88 dd 00 00 00    	js     c0009c1b <prepare_data+0x172>
c0009b3e:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009b41:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009b44:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009b47:	0f 8f ce 00 00 00    	jg     c0009c1b <prepare_data+0x172>
c0009b4d:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009b53:	50                   	push   eax
c0009b54:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009b5b:	50                   	push   eax
c0009b5c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0009b62:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009b65:	50                   	push   eax
c0009b66:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009b69:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009b6d:	50                   	push   eax
c0009b6e:	e8 5f 6a ff ff       	call   c00005d2 <memcpy>
c0009b73:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009b76:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009b79:	01 fd                	add    ebp,edi
c0009b7b:	01 f9                	add    ecx,edi
c0009b7d:	83 c4 10             	add    esp,0x10
c0009b80:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009b83:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009b86:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009b89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b8d:	0f 85 86 00 00 00    	jne    c0009c19 <prepare_data+0x170>
c0009b93:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009b96:	89 e8                	mov    eax,ebp
c0009b98:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009b9b:	29 c8                	sub    eax,ecx
c0009b9d:	39 f8                	cmp    eax,edi
c0009b9f:	7d 78                	jge    c0009c19 <prepare_data+0x170>
c0009ba1:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009ba5:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009ba9:	74 6e                	je     c0009c19 <prepare_data+0x170>
c0009bab:	8d 7e 04             	lea    edi,[esi+0x4]
c0009bae:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009bb2:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009bb5:	29 ef                	sub    edi,ebp
c0009bb7:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009bbb:	7c 29                	jl     c0009be6 <prepare_data+0x13d>
c0009bbd:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bc0:	29 f1                	sub    ecx,esi
c0009bc2:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009bc9:	55                   	push   ebp
c0009bca:	50                   	push   eax
c0009bcb:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bce:	50                   	push   eax
c0009bcf:	52                   	push   edx
c0009bd0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009bd4:	e8 c1 69 ff ff       	call   c000059a <memmove>
c0009bd9:	83 c4 10             	add    esp,0x10
c0009bdc:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009bdf:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009be2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009be6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009be9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009bec:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009bef:	83 c6 05             	add    esi,0x5
c0009bf2:	78 07                	js     c0009bfb <prepare_data+0x152>
c0009bf4:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009bf7:	39 cf                	cmp    edi,ecx
c0009bf9:	7e 04                	jle    c0009bff <prepare_data+0x156>
c0009bfb:	89 ce                	mov    esi,ecx
c0009bfd:	29 c6                	sub    esi,eax
c0009bff:	8d 04 82             	lea    eax,[edx+eax*4]
c0009c02:	51                   	push   ecx
c0009c03:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009c0a:	51                   	push   ecx
c0009c0b:	6a 00                	push   0x0
c0009c0d:	50                   	push   eax
c0009c0e:	e8 f5 69 ff ff       	call   c0000608 <memset>
c0009c13:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009c16:	83 c4 10             	add    esp,0x10
c0009c19:	31 c0                	xor    eax,eax
c0009c1b:	83 c4 1c             	add    esp,0x1c
c0009c1e:	5b                   	pop    ebx
c0009c1f:	5e                   	pop    esi
c0009c20:	5f                   	pop    edi
c0009c21:	5d                   	pop    ebp
c0009c22:	c3                   	ret    

c0009c23 <sinc_multichan_vari_process>:
c0009c23:	55                   	push   ebp
c0009c24:	b8 05 00 00 00       	mov    eax,0x5
c0009c29:	57                   	push   edi
c0009c2a:	56                   	push   esi
c0009c2b:	53                   	push   ebx
c0009c2c:	83 ec 3c             	sub    esp,0x3c
c0009c2f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009c33:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009c37:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009c3a:	85 db                	test   ebx,ebx
c0009c3c:	0f 84 5d 02 00 00    	je     c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c42:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009c45:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009c48:	0f af d0             	imul   edx,eax
c0009c4b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009c4e:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009c52:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009c59:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009c5c:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009c63:	dd 06                	fld    QWORD PTR [esi]
c0009c65:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009c69:	55                   	push   ebp
c0009c6a:	55                   	push   ebp
c0009c6b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009c6e:	e8 d9 f2 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009c73:	89 c2                	mov    edx,eax
c0009c75:	58                   	pop    eax
c0009c76:	85 d2                	test   edx,edx
c0009c78:	59                   	pop    ecx
c0009c79:	b8 16 00 00 00       	mov    eax,0x16
c0009c7e:	0f 85 1b 02 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009c84:	d9 05 f0 fc 01 c0    	fld    DWORD PTR ds:0xc001fcf0
c0009c8a:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009c8d:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009c90:	dd 06                	fld    QWORD PTR [esi]
c0009c92:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009c95:	d8 d1                	fcom   st(1)
c0009c97:	df e0                	fnstsw ax
c0009c99:	9e                   	sahf   
c0009c9a:	76 0f                	jbe    c0009cab <sinc_multichan_vari_process+0x88>
c0009c9c:	dd d8                	fstp   st(0)
c0009c9e:	d9 e8                	fld1   
c0009ca0:	d8 d9                	fcomp  st(1)
c0009ca2:	df e0                	fnstsw ax
c0009ca4:	9e                   	sahf   
c0009ca5:	77 0f                	ja     c0009cb6 <sinc_multichan_vari_process+0x93>
c0009ca7:	dd d8                	fstp   st(0)
c0009ca9:	eb 11                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cab:	dd d9                	fstp   st(1)
c0009cad:	d9 e8                	fld1   
c0009caf:	d8 d9                	fcomp  st(1)
c0009cb1:	df e0                	fnstsw ax
c0009cb3:	9e                   	sahf   
c0009cb4:	76 04                	jbe    c0009cba <sinc_multichan_vari_process+0x97>
c0009cb6:	de f9                	fdivp  st(1),st
c0009cb8:	eb 02                	jmp    c0009cbc <sinc_multichan_vari_process+0x99>
c0009cba:	dd d8                	fstp   st(0)
c0009cbc:	83 ec 10             	sub    esp,0x10
c0009cbf:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009cc2:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cc5:	e8 46 46 01 00       	call   c001e310 <lrint>
c0009cca:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009ccd:	40                   	inc    eax
c0009cce:	dd 14 24             	fst    QWORD PTR [esp]
c0009cd1:	0f af c5             	imul   eax,ebp
c0009cd4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009cd8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009cdc:	e8 71 fd ff ff       	call   c0009a52 <fmod_one>
c0009ce1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009ce4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009ce8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009ceb:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009cef:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009cf3:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009cf7:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009cfa:	e8 11 46 01 00       	call   c001e310 <lrint>
c0009cff:	0f af e8             	imul   ebp,eax
c0009d02:	d9 e8                	fld1   
c0009d04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009d08:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d0c:	01 e8                	add    eax,ebp
c0009d0e:	dc 05 58 fb 01 c0    	fadd   QWORD PTR ds:0xc001fb58
c0009d14:	99                   	cdq    
c0009d15:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d19:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009d1c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009d1f:	83 c4 10             	add    esp,0x10
c0009d22:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009d25:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009d28:	7d 4b                	jge    c0009d75 <sinc_multichan_vari_process+0x152>
c0009d2a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d2d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d30:	01 c8                	add    eax,ecx
c0009d32:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d35:	99                   	cdq    
c0009d36:	f7 f9                	idiv   ecx
c0009d38:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d3c:	7d 09                	jge    c0009d47 <sinc_multichan_vari_process+0x124>
c0009d3e:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009d41:	85 c0                	test   eax,eax
c0009d43:	79 57                	jns    c0009d9c <sinc_multichan_vari_process+0x179>
c0009d45:	eb 70                	jmp    c0009db7 <sinc_multichan_vari_process+0x194>
c0009d47:	51                   	push   ecx
c0009d48:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d4c:	57                   	push   edi
c0009d4d:	53                   	push   ebx
c0009d4e:	e8 56 fd ff ff       	call   c0009aa9 <prepare_data>
c0009d53:	83 c4 10             	add    esp,0x10
c0009d56:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009d59:	85 c0                	test   eax,eax
c0009d5b:	0f 85 3e 01 00 00    	jne    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d61:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009d64:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009d67:	01 c8                	add    eax,ecx
c0009d69:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009d6c:	99                   	cdq    
c0009d6d:	f7 f9                	idiv   ecx
c0009d6f:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009d73:	7c c9                	jl     c0009d3e <sinc_multichan_vari_process+0x11b>
c0009d75:	dd 04 24             	fld    QWORD PTR [esp]
c0009d78:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009d7b:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009d7f:	dd 1e                	fstp   QWORD PTR [esi]
c0009d81:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009d84:	99                   	cdq    
c0009d85:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d88:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009d8b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009d8e:	99                   	cdq    
c0009d8f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009d92:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009d95:	31 c0                	xor    eax,eax
c0009d97:	e9 03 01 00 00       	jmp    c0009e9f <sinc_multichan_vari_process+0x27c>
c0009d9c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009da0:	dd 04 24             	fld    QWORD PTR [esp]
c0009da3:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009da6:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009daa:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009dae:	d9 c9                	fxch   st(1)
c0009db0:	de d9                	fcompp 
c0009db2:	df e0                	fnstsw ax
c0009db4:	9e                   	sahf   
c0009db5:	73 be                	jae    c0009d75 <sinc_multichan_vari_process+0x152>
c0009db7:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009dbb:	7e 31                	jle    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009dbd:	83 ec 10             	sub    esp,0x10
c0009dc0:	dd 06                	fld    QWORD PTR [esi]
c0009dc2:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009dc5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009dc8:	e8 23 45 01 00       	call   c001e2f0 <fabs>
c0009dcd:	83 c4 10             	add    esp,0x10
c0009dd0:	dc 1d e0 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fce0
c0009dd6:	df e0                	fnstsw ax
c0009dd8:	9e                   	sahf   
c0009dd9:	76 13                	jbe    c0009dee <sinc_multichan_vari_process+0x1cb>
c0009ddb:	dd 06                	fld    QWORD PTR [esi]
c0009ddd:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009de0:	d8 e1                	fsub   st,st(1)
c0009de2:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009de5:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009de8:	de c1                	faddp  st(1),st
c0009dea:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009dee:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009df1:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009df5:	d9 e8                	fld1   
c0009df7:	d8 d9                	fcomp  st(1)
c0009df9:	df e0                	fnstsw ax
c0009dfb:	9e                   	sahf   
c0009dfc:	77 04                	ja     c0009e02 <sinc_multichan_vari_process+0x1df>
c0009dfe:	dd d8                	fstp   st(0)
c0009e00:	d9 e8                	fld1   
c0009e02:	de c9                	fmulp  st(1),st
c0009e04:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e08:	50                   	push   eax
c0009e09:	50                   	push   eax
c0009e0a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e0e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e12:	e8 28 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e17:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009e1b:	89 c5                	mov    ebp,eax
c0009e1d:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009e21:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e24:	e8 16 fc ff ff       	call   c0009a3f <double_to_fp>
c0009e29:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009e2c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009e2f:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009e32:	89 c1                	mov    ecx,eax
c0009e34:	52                   	push   edx
c0009e35:	89 d8                	mov    eax,ebx
c0009e37:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009e3b:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009e3e:	52                   	push   edx
c0009e3f:	52                   	push   edx
c0009e40:	89 ea                	mov    edx,ebp
c0009e42:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e45:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009e48:	e8 e9 f7 ff ff       	call   c0009636 <calc_output_multi>
c0009e4d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009e50:	d9 e8                	fld1   
c0009e52:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009e55:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009e59:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e5d:	83 c4 10             	add    esp,0x10
c0009e60:	dd 14 24             	fst    QWORD PTR [esp]
c0009e63:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009e67:	e8 e6 fb ff ff       	call   c0009a52 <fmod_one>
c0009e6c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009e6f:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009e73:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009e76:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009e7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e7e:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009e82:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e85:	e8 86 44 01 00       	call   c001e310 <lrint>
c0009e8a:	0f af e8             	imul   ebp,eax
c0009e8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009e91:	01 e8                	add    eax,ebp
c0009e93:	99                   	cdq    
c0009e94:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009e97:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009e9a:	e9 80 fe ff ff       	jmp    c0009d1f <sinc_multichan_vari_process+0xfc>
c0009e9f:	83 c4 3c             	add    esp,0x3c
c0009ea2:	5b                   	pop    ebx
c0009ea3:	5e                   	pop    esi
c0009ea4:	5f                   	pop    edi
c0009ea5:	5d                   	pop    ebp
c0009ea6:	c3                   	ret    

c0009ea7 <sinc_hex_vari_process>:
c0009ea7:	55                   	push   ebp
c0009ea8:	b8 05 00 00 00       	mov    eax,0x5
c0009ead:	57                   	push   edi
c0009eae:	56                   	push   esi
c0009eaf:	53                   	push   ebx
c0009eb0:	83 ec 3c             	sub    esp,0x3c
c0009eb3:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009eb7:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009ebb:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009ebe:	85 db                	test   ebx,ebx
c0009ec0:	0f 84 58 02 00 00    	je     c000a11e <sinc_hex_vari_process+0x277>
c0009ec6:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009ec9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009ecc:	0f af d0             	imul   edx,eax
c0009ecf:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009ed2:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009ed6:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009edd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009ee0:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009ee7:	dd 06                	fld    QWORD PTR [esi]
c0009ee9:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009eed:	55                   	push   ebp
c0009eee:	55                   	push   ebp
c0009eef:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ef2:	e8 55 f0 ff ff       	call   c0008f4c <is_bad_src_ratio>
c0009ef7:	89 c2                	mov    edx,eax
c0009ef9:	58                   	pop    eax
c0009efa:	85 d2                	test   edx,edx
c0009efc:	59                   	pop    ecx
c0009efd:	b8 16 00 00 00       	mov    eax,0x16
c0009f02:	0f 85 16 02 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009f08:	d9 05 f0 fc 01 c0    	fld    DWORD PTR ds:0xc001fcf0
c0009f0e:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009f11:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009f14:	dd 06                	fld    QWORD PTR [esi]
c0009f16:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009f19:	d8 d1                	fcom   st(1)
c0009f1b:	df e0                	fnstsw ax
c0009f1d:	9e                   	sahf   
c0009f1e:	76 0f                	jbe    c0009f2f <sinc_hex_vari_process+0x88>
c0009f20:	dd d8                	fstp   st(0)
c0009f22:	d9 e8                	fld1   
c0009f24:	d8 d9                	fcomp  st(1)
c0009f26:	df e0                	fnstsw ax
c0009f28:	9e                   	sahf   
c0009f29:	77 0f                	ja     c0009f3a <sinc_hex_vari_process+0x93>
c0009f2b:	dd d8                	fstp   st(0)
c0009f2d:	eb 11                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f2f:	dd d9                	fstp   st(1)
c0009f31:	d9 e8                	fld1   
c0009f33:	d8 d9                	fcomp  st(1)
c0009f35:	df e0                	fnstsw ax
c0009f37:	9e                   	sahf   
c0009f38:	76 04                	jbe    c0009f3e <sinc_hex_vari_process+0x97>
c0009f3a:	de f9                	fdivp  st(1),st
c0009f3c:	eb 02                	jmp    c0009f40 <sinc_hex_vari_process+0x99>
c0009f3e:	dd d8                	fstp   st(0)
c0009f40:	83 ec 10             	sub    esp,0x10
c0009f43:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f46:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f49:	e8 c2 43 01 00       	call   c001e310 <lrint>
c0009f4e:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009f51:	40                   	inc    eax
c0009f52:	dd 14 24             	fst    QWORD PTR [esp]
c0009f55:	0f af c5             	imul   eax,ebp
c0009f58:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f5c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009f60:	e8 ed fa ff ff       	call   c0009a52 <fmod_one>
c0009f65:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f68:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f6c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f6f:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009f73:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f77:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f7b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f7e:	e8 8d 43 01 00       	call   c001e310 <lrint>
c0009f83:	0f af e8             	imul   ebp,eax
c0009f86:	d9 e8                	fld1   
c0009f88:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f8c:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009f90:	01 e8                	add    eax,ebp
c0009f92:	dc 05 58 fb 01 c0    	fadd   QWORD PTR ds:0xc001fb58
c0009f98:	99                   	cdq    
c0009f99:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009f9d:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009fa0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009fa3:	83 c4 10             	add    esp,0x10
c0009fa6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009fa9:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009fac:	7d 4b                	jge    c0009ff9 <sinc_hex_vari_process+0x152>
c0009fae:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fb1:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009fb4:	01 c8                	add    eax,ecx
c0009fb6:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009fb9:	99                   	cdq    
c0009fba:	f7 f9                	idiv   ecx
c0009fbc:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009fc0:	7d 09                	jge    c0009fcb <sinc_hex_vari_process+0x124>
c0009fc2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009fc5:	85 c0                	test   eax,eax
c0009fc7:	79 57                	jns    c000a020 <sinc_hex_vari_process+0x179>
c0009fc9:	eb 70                	jmp    c000a03b <sinc_hex_vari_process+0x194>
c0009fcb:	51                   	push   ecx
c0009fcc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009fd0:	57                   	push   edi
c0009fd1:	53                   	push   ebx
c0009fd2:	e8 d2 fa ff ff       	call   c0009aa9 <prepare_data>
c0009fd7:	83 c4 10             	add    esp,0x10
c0009fda:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009fdd:	85 c0                	test   eax,eax
c0009fdf:	0f 85 39 01 00 00    	jne    c000a11e <sinc_hex_vari_process+0x277>
c0009fe5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009fe8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009feb:	01 c8                	add    eax,ecx
c0009fed:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009ff0:	99                   	cdq    
c0009ff1:	f7 f9                	idiv   ecx
c0009ff3:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009ff7:	7c c9                	jl     c0009fc2 <sinc_hex_vari_process+0x11b>
c0009ff9:	dd 04 24             	fld    QWORD PTR [esp]
c0009ffc:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009fff:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a003:	dd 1e                	fstp   QWORD PTR [esi]
c000a005:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a008:	99                   	cdq    
c000a009:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a00c:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a00f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a012:	99                   	cdq    
c000a013:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a016:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a019:	31 c0                	xor    eax,eax
c000a01b:	e9 fe 00 00 00       	jmp    c000a11e <sinc_hex_vari_process+0x277>
c000a020:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a024:	dd 04 24             	fld    QWORD PTR [esp]
c000a027:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a02a:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a02e:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a032:	d9 c9                	fxch   st(1)
c000a034:	de d9                	fcompp 
c000a036:	df e0                	fnstsw ax
c000a038:	9e                   	sahf   
c000a039:	73 be                	jae    c0009ff9 <sinc_hex_vari_process+0x152>
c000a03b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a03f:	7e 31                	jle    c000a072 <sinc_hex_vari_process+0x1cb>
c000a041:	83 ec 10             	sub    esp,0x10
c000a044:	dd 06                	fld    QWORD PTR [esi]
c000a046:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a049:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a04c:	e8 9f 42 01 00       	call   c001e2f0 <fabs>
c000a051:	83 c4 10             	add    esp,0x10
c000a054:	dc 1d e0 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fce0
c000a05a:	df e0                	fnstsw ax
c000a05c:	9e                   	sahf   
c000a05d:	76 13                	jbe    c000a072 <sinc_hex_vari_process+0x1cb>
c000a05f:	dd 06                	fld    QWORD PTR [esi]
c000a061:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a064:	d8 e1                	fsub   st,st(1)
c000a066:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a069:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a06c:	de c1                	faddp  st(1),st
c000a06e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a072:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a075:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a079:	d9 e8                	fld1   
c000a07b:	d8 d9                	fcomp  st(1)
c000a07d:	df e0                	fnstsw ax
c000a07f:	9e                   	sahf   
c000a080:	77 04                	ja     c000a086 <sinc_hex_vari_process+0x1df>
c000a082:	dd d8                	fstp   st(0)
c000a084:	d9 e8                	fld1   
c000a086:	de c9                	fmulp  st(1),st
c000a088:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a08c:	50                   	push   eax
c000a08d:	50                   	push   eax
c000a08e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a092:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a096:	e8 a4 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a09b:	89 c5                	mov    ebp,eax
c000a09d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a0a1:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a0a5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0a8:	e8 92 f9 ff ff       	call   c0009a3f <double_to_fp>
c000a0ad:	83 c4 0c             	add    esp,0xc
c000a0b0:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a0b3:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a0b6:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a0b9:	89 c1                	mov    ecx,eax
c000a0bb:	52                   	push   edx
c000a0bc:	89 d8                	mov    eax,ebx
c000a0be:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a0c2:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a0c5:	52                   	push   edx
c000a0c6:	52                   	push   edx
c000a0c7:	89 ea                	mov    edx,ebp
c000a0c9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0cc:	e8 d1 f2 ff ff       	call   c00093a2 <calc_output_hex>
c000a0d1:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a0d5:	d9 e8                	fld1   
c000a0d7:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a0db:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a0df:	dd 14 24             	fst    QWORD PTR [esp]
c000a0e2:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a0e6:	e8 67 f9 ff ff       	call   c0009a52 <fmod_one>
c000a0eb:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a0ee:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a0f2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a0f5:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a0f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a0fd:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a101:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a104:	e8 07 42 01 00       	call   c001e310 <lrint>
c000a109:	0f af e8             	imul   ebp,eax
c000a10c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a110:	01 e8                	add    eax,ebp
c000a112:	99                   	cdq    
c000a113:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a116:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a119:	e9 85 fe ff ff       	jmp    c0009fa3 <sinc_hex_vari_process+0xfc>
c000a11e:	83 c4 3c             	add    esp,0x3c
c000a121:	5b                   	pop    ebx
c000a122:	5e                   	pop    esi
c000a123:	5f                   	pop    edi
c000a124:	5d                   	pop    ebp
c000a125:	c3                   	ret    

c000a126 <sinc_quad_vari_process>:
c000a126:	55                   	push   ebp
c000a127:	b8 05 00 00 00       	mov    eax,0x5
c000a12c:	57                   	push   edi
c000a12d:	56                   	push   esi
c000a12e:	53                   	push   ebx
c000a12f:	83 ec 3c             	sub    esp,0x3c
c000a132:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a136:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a13a:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a13d:	85 db                	test   ebx,ebx
c000a13f:	0f 84 58 02 00 00    	je     c000a39d <sinc_quad_vari_process+0x277>
c000a145:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a148:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a14b:	0f af d0             	imul   edx,eax
c000a14e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a151:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a155:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a15c:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a15f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a166:	dd 06                	fld    QWORD PTR [esi]
c000a168:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a16c:	55                   	push   ebp
c000a16d:	55                   	push   ebp
c000a16e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a171:	e8 d6 ed ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a176:	89 c2                	mov    edx,eax
c000a178:	58                   	pop    eax
c000a179:	85 d2                	test   edx,edx
c000a17b:	59                   	pop    ecx
c000a17c:	b8 16 00 00 00       	mov    eax,0x16
c000a181:	0f 85 16 02 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a187:	d9 05 f0 fc 01 c0    	fld    DWORD PTR ds:0xc001fcf0
c000a18d:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a190:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a193:	dd 06                	fld    QWORD PTR [esi]
c000a195:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a198:	d8 d1                	fcom   st(1)
c000a19a:	df e0                	fnstsw ax
c000a19c:	9e                   	sahf   
c000a19d:	76 0f                	jbe    c000a1ae <sinc_quad_vari_process+0x88>
c000a19f:	dd d8                	fstp   st(0)
c000a1a1:	d9 e8                	fld1   
c000a1a3:	d8 d9                	fcomp  st(1)
c000a1a5:	df e0                	fnstsw ax
c000a1a7:	9e                   	sahf   
c000a1a8:	77 0f                	ja     c000a1b9 <sinc_quad_vari_process+0x93>
c000a1aa:	dd d8                	fstp   st(0)
c000a1ac:	eb 11                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1ae:	dd d9                	fstp   st(1)
c000a1b0:	d9 e8                	fld1   
c000a1b2:	d8 d9                	fcomp  st(1)
c000a1b4:	df e0                	fnstsw ax
c000a1b6:	9e                   	sahf   
c000a1b7:	76 04                	jbe    c000a1bd <sinc_quad_vari_process+0x97>
c000a1b9:	de f9                	fdivp  st(1),st
c000a1bb:	eb 02                	jmp    c000a1bf <sinc_quad_vari_process+0x99>
c000a1bd:	dd d8                	fstp   st(0)
c000a1bf:	83 ec 10             	sub    esp,0x10
c000a1c2:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1c5:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1c8:	e8 43 41 01 00       	call   c001e310 <lrint>
c000a1cd:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a1d0:	40                   	inc    eax
c000a1d1:	dd 14 24             	fst    QWORD PTR [esp]
c000a1d4:	0f af c5             	imul   eax,ebp
c000a1d7:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a1db:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a1df:	e8 6e f8 ff ff       	call   c0009a52 <fmod_one>
c000a1e4:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a1e7:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a1eb:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a1ee:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a1f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1f6:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a1fa:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a1fd:	e8 0e 41 01 00       	call   c001e310 <lrint>
c000a202:	0f af e8             	imul   ebp,eax
c000a205:	d9 e8                	fld1   
c000a207:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a20b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a20f:	01 e8                	add    eax,ebp
c000a211:	dc 05 58 fb 01 c0    	fadd   QWORD PTR ds:0xc001fb58
c000a217:	99                   	cdq    
c000a218:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a21c:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a21f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a222:	83 c4 10             	add    esp,0x10
c000a225:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a228:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a22b:	7d 4b                	jge    c000a278 <sinc_quad_vari_process+0x152>
c000a22d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a230:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a233:	01 c8                	add    eax,ecx
c000a235:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a238:	99                   	cdq    
c000a239:	f7 f9                	idiv   ecx
c000a23b:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a23f:	7d 09                	jge    c000a24a <sinc_quad_vari_process+0x124>
c000a241:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a244:	85 c0                	test   eax,eax
c000a246:	79 57                	jns    c000a29f <sinc_quad_vari_process+0x179>
c000a248:	eb 70                	jmp    c000a2ba <sinc_quad_vari_process+0x194>
c000a24a:	51                   	push   ecx
c000a24b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a24f:	57                   	push   edi
c000a250:	53                   	push   ebx
c000a251:	e8 53 f8 ff ff       	call   c0009aa9 <prepare_data>
c000a256:	83 c4 10             	add    esp,0x10
c000a259:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a25c:	85 c0                	test   eax,eax
c000a25e:	0f 85 39 01 00 00    	jne    c000a39d <sinc_quad_vari_process+0x277>
c000a264:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a267:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a26a:	01 c8                	add    eax,ecx
c000a26c:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a26f:	99                   	cdq    
c000a270:	f7 f9                	idiv   ecx
c000a272:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a276:	7c c9                	jl     c000a241 <sinc_quad_vari_process+0x11b>
c000a278:	dd 04 24             	fld    QWORD PTR [esp]
c000a27b:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a27e:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a282:	dd 1e                	fstp   QWORD PTR [esi]
c000a284:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a287:	99                   	cdq    
c000a288:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a28b:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a28e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a291:	99                   	cdq    
c000a292:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a295:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a298:	31 c0                	xor    eax,eax
c000a29a:	e9 fe 00 00 00       	jmp    c000a39d <sinc_quad_vari_process+0x277>
c000a29f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a2a3:	dd 04 24             	fld    QWORD PTR [esp]
c000a2a6:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a2a9:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a2ad:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a2b1:	d9 c9                	fxch   st(1)
c000a2b3:	de d9                	fcompp 
c000a2b5:	df e0                	fnstsw ax
c000a2b7:	9e                   	sahf   
c000a2b8:	73 be                	jae    c000a278 <sinc_quad_vari_process+0x152>
c000a2ba:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a2be:	7e 31                	jle    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2c0:	83 ec 10             	sub    esp,0x10
c000a2c3:	dd 06                	fld    QWORD PTR [esi]
c000a2c5:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a2c8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a2cb:	e8 20 40 01 00       	call   c001e2f0 <fabs>
c000a2d0:	83 c4 10             	add    esp,0x10
c000a2d3:	dc 1d e0 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fce0
c000a2d9:	df e0                	fnstsw ax
c000a2db:	9e                   	sahf   
c000a2dc:	76 13                	jbe    c000a2f1 <sinc_quad_vari_process+0x1cb>
c000a2de:	dd 06                	fld    QWORD PTR [esi]
c000a2e0:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a2e3:	d8 e1                	fsub   st,st(1)
c000a2e5:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a2e8:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a2eb:	de c1                	faddp  st(1),st
c000a2ed:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a2f1:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a2f4:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a2f8:	d9 e8                	fld1   
c000a2fa:	d8 d9                	fcomp  st(1)
c000a2fc:	df e0                	fnstsw ax
c000a2fe:	9e                   	sahf   
c000a2ff:	77 04                	ja     c000a305 <sinc_quad_vari_process+0x1df>
c000a301:	dd d8                	fstp   st(0)
c000a303:	d9 e8                	fld1   
c000a305:	de c9                	fmulp  st(1),st
c000a307:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a30b:	50                   	push   eax
c000a30c:	50                   	push   eax
c000a30d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a311:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a315:	e8 25 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a31a:	89 c5                	mov    ebp,eax
c000a31c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a320:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a324:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a327:	e8 13 f7 ff ff       	call   c0009a3f <double_to_fp>
c000a32c:	83 c4 0c             	add    esp,0xc
c000a32f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a332:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a335:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a338:	89 c1                	mov    ecx,eax
c000a33a:	52                   	push   edx
c000a33b:	89 d8                	mov    eax,ebx
c000a33d:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a341:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a344:	52                   	push   edx
c000a345:	52                   	push   edx
c000a346:	89 ea                	mov    edx,ebp
c000a348:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a34b:	e8 8d ee ff ff       	call   c00091dd <calc_output_quad>
c000a350:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a354:	d9 e8                	fld1   
c000a356:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a35a:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a35e:	dd 14 24             	fst    QWORD PTR [esp]
c000a361:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a365:	e8 e8 f6 ff ff       	call   c0009a52 <fmod_one>
c000a36a:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a36d:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a371:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a374:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a378:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a37c:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a380:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a383:	e8 88 3f 01 00       	call   c001e310 <lrint>
c000a388:	0f af e8             	imul   ebp,eax
c000a38b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a38f:	01 e8                	add    eax,ebp
c000a391:	99                   	cdq    
c000a392:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a395:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a398:	e9 85 fe ff ff       	jmp    c000a222 <sinc_quad_vari_process+0xfc>
c000a39d:	83 c4 3c             	add    esp,0x3c
c000a3a0:	5b                   	pop    ebx
c000a3a1:	5e                   	pop    esi
c000a3a2:	5f                   	pop    edi
c000a3a3:	5d                   	pop    ebp
c000a3a4:	c3                   	ret    

c000a3a5 <sinc_stereo_vari_process>:
c000a3a5:	55                   	push   ebp
c000a3a6:	b8 05 00 00 00       	mov    eax,0x5
c000a3ab:	57                   	push   edi
c000a3ac:	56                   	push   esi
c000a3ad:	53                   	push   ebx
c000a3ae:	83 ec 3c             	sub    esp,0x3c
c000a3b1:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a3b5:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a3b9:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a3bc:	85 db                	test   ebx,ebx
c000a3be:	0f 84 58 02 00 00    	je     c000a61c <sinc_stereo_vari_process+0x277>
c000a3c4:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a3c7:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a3ca:	0f af d0             	imul   edx,eax
c000a3cd:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a3d0:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a3d4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a3db:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a3de:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a3e5:	dd 06                	fld    QWORD PTR [esi]
c000a3e7:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a3eb:	55                   	push   ebp
c000a3ec:	55                   	push   ebp
c000a3ed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3f0:	e8 57 eb ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a3f5:	89 c2                	mov    edx,eax
c000a3f7:	58                   	pop    eax
c000a3f8:	85 d2                	test   edx,edx
c000a3fa:	59                   	pop    ecx
c000a3fb:	b8 16 00 00 00       	mov    eax,0x16
c000a400:	0f 85 16 02 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a406:	d9 05 f0 fc 01 c0    	fld    DWORD PTR ds:0xc001fcf0
c000a40c:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a40f:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a412:	dd 06                	fld    QWORD PTR [esi]
c000a414:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a417:	d8 d1                	fcom   st(1)
c000a419:	df e0                	fnstsw ax
c000a41b:	9e                   	sahf   
c000a41c:	76 0f                	jbe    c000a42d <sinc_stereo_vari_process+0x88>
c000a41e:	dd d8                	fstp   st(0)
c000a420:	d9 e8                	fld1   
c000a422:	d8 d9                	fcomp  st(1)
c000a424:	df e0                	fnstsw ax
c000a426:	9e                   	sahf   
c000a427:	77 0f                	ja     c000a438 <sinc_stereo_vari_process+0x93>
c000a429:	dd d8                	fstp   st(0)
c000a42b:	eb 11                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a42d:	dd d9                	fstp   st(1)
c000a42f:	d9 e8                	fld1   
c000a431:	d8 d9                	fcomp  st(1)
c000a433:	df e0                	fnstsw ax
c000a435:	9e                   	sahf   
c000a436:	76 04                	jbe    c000a43c <sinc_stereo_vari_process+0x97>
c000a438:	de f9                	fdivp  st(1),st
c000a43a:	eb 02                	jmp    c000a43e <sinc_stereo_vari_process+0x99>
c000a43c:	dd d8                	fstp   st(0)
c000a43e:	83 ec 10             	sub    esp,0x10
c000a441:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a444:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a447:	e8 c4 3e 01 00       	call   c001e310 <lrint>
c000a44c:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a44f:	40                   	inc    eax
c000a450:	dd 14 24             	fst    QWORD PTR [esp]
c000a453:	0f af c5             	imul   eax,ebp
c000a456:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a45a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a45e:	e8 ef f5 ff ff       	call   c0009a52 <fmod_one>
c000a463:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a466:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a46a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a46d:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a471:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a475:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a479:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a47c:	e8 8f 3e 01 00       	call   c001e310 <lrint>
c000a481:	0f af e8             	imul   ebp,eax
c000a484:	d9 e8                	fld1   
c000a486:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a48a:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a48e:	01 e8                	add    eax,ebp
c000a490:	dc 05 58 fb 01 c0    	fadd   QWORD PTR ds:0xc001fb58
c000a496:	99                   	cdq    
c000a497:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a49b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a49e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a4a1:	83 c4 10             	add    esp,0x10
c000a4a4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a4a7:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a4aa:	7d 4b                	jge    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a4ac:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4af:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4b2:	01 c8                	add    eax,ecx
c000a4b4:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4b7:	99                   	cdq    
c000a4b8:	f7 f9                	idiv   ecx
c000a4ba:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4be:	7d 09                	jge    c000a4c9 <sinc_stereo_vari_process+0x124>
c000a4c0:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a4c3:	85 c0                	test   eax,eax
c000a4c5:	79 57                	jns    c000a51e <sinc_stereo_vari_process+0x179>
c000a4c7:	eb 70                	jmp    c000a539 <sinc_stereo_vari_process+0x194>
c000a4c9:	51                   	push   ecx
c000a4ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a4ce:	57                   	push   edi
c000a4cf:	53                   	push   ebx
c000a4d0:	e8 d4 f5 ff ff       	call   c0009aa9 <prepare_data>
c000a4d5:	83 c4 10             	add    esp,0x10
c000a4d8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a4db:	85 c0                	test   eax,eax
c000a4dd:	0f 85 39 01 00 00    	jne    c000a61c <sinc_stereo_vari_process+0x277>
c000a4e3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a4e6:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a4e9:	01 c8                	add    eax,ecx
c000a4eb:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a4ee:	99                   	cdq    
c000a4ef:	f7 f9                	idiv   ecx
c000a4f1:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a4f5:	7c c9                	jl     c000a4c0 <sinc_stereo_vari_process+0x11b>
c000a4f7:	dd 04 24             	fld    QWORD PTR [esp]
c000a4fa:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a4fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a501:	dd 1e                	fstp   QWORD PTR [esi]
c000a503:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a506:	99                   	cdq    
c000a507:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a50a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a50d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a510:	99                   	cdq    
c000a511:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a514:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a517:	31 c0                	xor    eax,eax
c000a519:	e9 fe 00 00 00       	jmp    c000a61c <sinc_stereo_vari_process+0x277>
c000a51e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a522:	dd 04 24             	fld    QWORD PTR [esp]
c000a525:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a528:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a52c:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a530:	d9 c9                	fxch   st(1)
c000a532:	de d9                	fcompp 
c000a534:	df e0                	fnstsw ax
c000a536:	9e                   	sahf   
c000a537:	73 be                	jae    c000a4f7 <sinc_stereo_vari_process+0x152>
c000a539:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a53d:	7e 31                	jle    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a53f:	83 ec 10             	sub    esp,0x10
c000a542:	dd 06                	fld    QWORD PTR [esi]
c000a544:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a547:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a54a:	e8 a1 3d 01 00       	call   c001e2f0 <fabs>
c000a54f:	83 c4 10             	add    esp,0x10
c000a552:	dc 1d e0 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fce0
c000a558:	df e0                	fnstsw ax
c000a55a:	9e                   	sahf   
c000a55b:	76 13                	jbe    c000a570 <sinc_stereo_vari_process+0x1cb>
c000a55d:	dd 06                	fld    QWORD PTR [esi]
c000a55f:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a562:	d8 e1                	fsub   st,st(1)
c000a564:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a567:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a56a:	de c1                	faddp  st(1),st
c000a56c:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a570:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a573:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a577:	d9 e8                	fld1   
c000a579:	d8 d9                	fcomp  st(1)
c000a57b:	df e0                	fnstsw ax
c000a57d:	9e                   	sahf   
c000a57e:	77 04                	ja     c000a584 <sinc_stereo_vari_process+0x1df>
c000a580:	dd d8                	fstp   st(0)
c000a582:	d9 e8                	fld1   
c000a584:	de c9                	fmulp  st(1),st
c000a586:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a58a:	50                   	push   eax
c000a58b:	50                   	push   eax
c000a58c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a590:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a594:	e8 a6 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a599:	89 c5                	mov    ebp,eax
c000a59b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a59f:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a5a3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5a6:	e8 94 f4 ff ff       	call   c0009a3f <double_to_fp>
c000a5ab:	83 c4 0c             	add    esp,0xc
c000a5ae:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a5b1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a5b4:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a5b7:	89 c1                	mov    ecx,eax
c000a5b9:	52                   	push   edx
c000a5ba:	89 d8                	mov    eax,ebx
c000a5bc:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a5c0:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a5c3:	52                   	push   edx
c000a5c4:	52                   	push   edx
c000a5c5:	89 ea                	mov    edx,ebp
c000a5c7:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5ca:	e8 ce ea ff ff       	call   c000909d <calc_output_stereo>
c000a5cf:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a5d3:	d9 e8                	fld1   
c000a5d5:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a5d9:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a5dd:	dd 14 24             	fst    QWORD PTR [esp]
c000a5e0:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a5e4:	e8 69 f4 ff ff       	call   c0009a52 <fmod_one>
c000a5e9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a5ec:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a5f0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a5f3:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a5f7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5fb:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a5ff:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a602:	e8 09 3d 01 00       	call   c001e310 <lrint>
c000a607:	0f af e8             	imul   ebp,eax
c000a60a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a60e:	01 e8                	add    eax,ebp
c000a610:	99                   	cdq    
c000a611:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a614:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a617:	e9 85 fe ff ff       	jmp    c000a4a1 <sinc_stereo_vari_process+0xfc>
c000a61c:	83 c4 3c             	add    esp,0x3c
c000a61f:	5b                   	pop    ebx
c000a620:	5e                   	pop    esi
c000a621:	5f                   	pop    edi
c000a622:	5d                   	pop    ebp
c000a623:	c3                   	ret    

c000a624 <sinc_mono_vari_process>:
c000a624:	55                   	push   ebp
c000a625:	b8 05 00 00 00       	mov    eax,0x5
c000a62a:	57                   	push   edi
c000a62b:	56                   	push   esi
c000a62c:	53                   	push   ebx
c000a62d:	83 ec 3c             	sub    esp,0x3c
c000a630:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a634:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a638:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a63b:	85 db                	test   ebx,ebx
c000a63d:	0f 84 57 02 00 00    	je     c000a89a <sinc_mono_vari_process+0x276>
c000a643:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a646:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a649:	0f af d0             	imul   edx,eax
c000a64c:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a64f:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a653:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a65a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a65d:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a664:	dd 06                	fld    QWORD PTR [esi]
c000a666:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a66a:	51                   	push   ecx
c000a66b:	51                   	push   ecx
c000a66c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a66f:	e8 d8 e8 ff ff       	call   c0008f4c <is_bad_src_ratio>
c000a674:	5d                   	pop    ebp
c000a675:	89 c2                	mov    edx,eax
c000a677:	58                   	pop    eax
c000a678:	85 d2                	test   edx,edx
c000a67a:	b8 16 00 00 00       	mov    eax,0x16
c000a67f:	0f 85 15 02 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a685:	d9 05 f0 fc 01 c0    	fld    DWORD PTR ds:0xc001fcf0
c000a68b:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a68e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a691:	dd 06                	fld    QWORD PTR [esi]
c000a693:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a696:	d8 d1                	fcom   st(1)
c000a698:	df e0                	fnstsw ax
c000a69a:	9e                   	sahf   
c000a69b:	76 0f                	jbe    c000a6ac <sinc_mono_vari_process+0x88>
c000a69d:	dd d8                	fstp   st(0)
c000a69f:	d9 e8                	fld1   
c000a6a1:	d8 d9                	fcomp  st(1)
c000a6a3:	df e0                	fnstsw ax
c000a6a5:	9e                   	sahf   
c000a6a6:	77 0f                	ja     c000a6b7 <sinc_mono_vari_process+0x93>
c000a6a8:	dd d8                	fstp   st(0)
c000a6aa:	eb 11                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6ac:	dd d9                	fstp   st(1)
c000a6ae:	d9 e8                	fld1   
c000a6b0:	d8 d9                	fcomp  st(1)
c000a6b2:	df e0                	fnstsw ax
c000a6b4:	9e                   	sahf   
c000a6b5:	76 04                	jbe    c000a6bb <sinc_mono_vari_process+0x97>
c000a6b7:	de f9                	fdivp  st(1),st
c000a6b9:	eb 02                	jmp    c000a6bd <sinc_mono_vari_process+0x99>
c000a6bb:	dd d8                	fstp   st(0)
c000a6bd:	83 ec 10             	sub    esp,0x10
c000a6c0:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a6c3:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6c6:	e8 45 3c 01 00       	call   c001e310 <lrint>
c000a6cb:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a6ce:	40                   	inc    eax
c000a6cf:	dd 14 24             	fst    QWORD PTR [esp]
c000a6d2:	0f af e8             	imul   ebp,eax
c000a6d5:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a6d9:	e8 74 f3 ff ff       	call   c0009a52 <fmod_one>
c000a6de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a6e1:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a6e5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a6e9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a6ed:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6f0:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a6f4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a6f8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6fb:	e8 10 3c 01 00       	call   c001e310 <lrint>
c000a700:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a705:	d9 e8                	fld1   
c000a707:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a70b:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a70f:	99                   	cdq    
c000a710:	dc 05 58 fb 01 c0    	fadd   QWORD PTR ds:0xc001fb58
c000a716:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a719:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a71d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a720:	83 c4 10             	add    esp,0x10
c000a723:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a726:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a729:	7d 44                	jge    c000a76f <sinc_mono_vari_process+0x14b>
c000a72b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a72e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a731:	01 c8                	add    eax,ecx
c000a733:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a736:	99                   	cdq    
c000a737:	f7 f9                	idiv   ecx
c000a739:	39 d5                	cmp    ebp,edx
c000a73b:	7d 09                	jge    c000a746 <sinc_mono_vari_process+0x122>
c000a73d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a740:	85 c0                	test   eax,eax
c000a742:	79 52                	jns    c000a796 <sinc_mono_vari_process+0x172>
c000a744:	eb 6b                	jmp    c000a7b1 <sinc_mono_vari_process+0x18d>
c000a746:	52                   	push   edx
c000a747:	55                   	push   ebp
c000a748:	57                   	push   edi
c000a749:	53                   	push   ebx
c000a74a:	e8 5a f3 ff ff       	call   c0009aa9 <prepare_data>
c000a74f:	83 c4 10             	add    esp,0x10
c000a752:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a755:	85 c0                	test   eax,eax
c000a757:	0f 85 3d 01 00 00    	jne    c000a89a <sinc_mono_vari_process+0x276>
c000a75d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a760:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a763:	01 c8                	add    eax,ecx
c000a765:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a768:	99                   	cdq    
c000a769:	f7 f9                	idiv   ecx
c000a76b:	39 d5                	cmp    ebp,edx
c000a76d:	7c ce                	jl     c000a73d <sinc_mono_vari_process+0x119>
c000a76f:	dd 04 24             	fld    QWORD PTR [esp]
c000a772:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a775:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a779:	dd 1e                	fstp   QWORD PTR [esi]
c000a77b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a77e:	99                   	cdq    
c000a77f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a782:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a785:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a788:	99                   	cdq    
c000a789:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a78c:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a78f:	31 c0                	xor    eax,eax
c000a791:	e9 04 01 00 00       	jmp    c000a89a <sinc_mono_vari_process+0x276>
c000a796:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a79a:	dd 04 24             	fld    QWORD PTR [esp]
c000a79d:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a7a0:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a7a4:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a7a8:	d9 c9                	fxch   st(1)
c000a7aa:	de d9                	fcompp 
c000a7ac:	df e0                	fnstsw ax
c000a7ae:	9e                   	sahf   
c000a7af:	77 be                	ja     c000a76f <sinc_mono_vari_process+0x14b>
c000a7b1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a7b5:	7e 31                	jle    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7b7:	83 ec 10             	sub    esp,0x10
c000a7ba:	dd 06                	fld    QWORD PTR [esi]
c000a7bc:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a7bf:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a7c2:	e8 29 3b 01 00       	call   c001e2f0 <fabs>
c000a7c7:	83 c4 10             	add    esp,0x10
c000a7ca:	dc 1d e0 fc 01 c0    	fcomp  QWORD PTR ds:0xc001fce0
c000a7d0:	df e0                	fnstsw ax
c000a7d2:	9e                   	sahf   
c000a7d3:	76 13                	jbe    c000a7e8 <sinc_mono_vari_process+0x1c4>
c000a7d5:	dd 06                	fld    QWORD PTR [esi]
c000a7d7:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a7da:	d8 e1                	fsub   st,st(1)
c000a7dc:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a7df:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a7e2:	de c1                	faddp  st(1),st
c000a7e4:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a7e8:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a7eb:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a7ef:	d9 e8                	fld1   
c000a7f1:	d8 d9                	fcomp  st(1)
c000a7f3:	df e0                	fnstsw ax
c000a7f5:	9e                   	sahf   
c000a7f6:	77 04                	ja     c000a7fc <sinc_mono_vari_process+0x1d8>
c000a7f8:	dd d8                	fstp   st(0)
c000a7fa:	d9 e8                	fld1   
c000a7fc:	de c9                	fmulp  st(1),st
c000a7fe:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a802:	50                   	push   eax
c000a803:	50                   	push   eax
c000a804:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a80c:	e8 2e f2 ff ff       	call   c0009a3f <double_to_fp>
c000a811:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a815:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a819:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a81d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a820:	e8 1a f2 ff ff       	call   c0009a3f <double_to_fp>
c000a825:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a829:	89 c1                	mov    ecx,eax
c000a82b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a82f:	89 d8                	mov    eax,ebx
c000a831:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a834:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a838:	e8 7b e7 ff ff       	call   c0008fb8 <calc_output_single>
c000a83d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a840:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a843:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a847:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a84a:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a84d:	d9 e8                	fld1   
c000a84f:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a853:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a857:	dd 14 24             	fst    QWORD PTR [esp]
c000a85a:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a85e:	e8 ef f1 ff ff       	call   c0009a52 <fmod_one>
c000a863:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a866:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a86a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a86e:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a872:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a875:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a879:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a87d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a880:	e8 8b 3a 01 00       	call   c001e310 <lrint>
c000a885:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a88a:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88e:	99                   	cdq    
c000a88f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a892:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a895:	e9 86 fe ff ff       	jmp    c000a720 <sinc_mono_vari_process+0xfc>
c000a89a:	83 c4 3c             	add    esp,0x3c
c000a89d:	5b                   	pop    ebx
c000a89e:	5e                   	pop    esi
c000a89f:	5f                   	pop    edi
c000a8a0:	5d                   	pop    ebp
c000a8a1:	c3                   	ret    

c000a8a2 <sinc_get_name>:
c000a8a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8a6:	31 c0                	xor    eax,eax
c000a8a8:	83 fa 02             	cmp    edx,0x2
c000a8ab:	77 07                	ja     c000a8b4 <sinc_get_name+0x12>
c000a8ad:	8b 04 95 c0 fb 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0440]
c000a8b4:	c3                   	ret    

c000a8b5 <sinc_get_description>:
c000a8b5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8b9:	31 c0                	xor    eax,eax
c000a8bb:	83 fa 02             	cmp    edx,0x2
c000a8be:	77 07                	ja     c000a8c7 <sinc_get_description+0x12>
c000a8c0:	8b 04 95 b4 fb 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe044c]
c000a8c7:	c3                   	ret    

c000a8c8 <sinc_set_converter>:
c000a8c8:	53                   	push   ebx
c000a8c9:	81 ec 58 08 00 00    	sub    esp,0x858
c000a8cf:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a8d6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a8d9:	85 c0                	test   eax,eax
c000a8db:	74 13                	je     c000a8f0 <sinc_set_converter+0x28>
c000a8dd:	83 ec 0c             	sub    esp,0xc
c000a8e0:	50                   	push   eax
c000a8e1:	e8 5b 18 00 00       	call   c000c141 <free>
c000a8e6:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a8ed:	83 c4 10             	add    esp,0x10
c000a8f0:	50                   	push   eax
c000a8f1:	68 44 08 00 00       	push   0x844
c000a8f6:	6a 00                	push   0x0
c000a8f8:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a8fc:	50                   	push   eax
c000a8fd:	e8 06 5d ff ff       	call   c0000608 <memset>
c000a902:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a905:	83 c4 10             	add    esp,0x10
c000a908:	b8 0b 00 00 00       	mov    eax,0xb
c000a90d:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a913:	7f 6e                	jg     c000a983 <sinc_set_converter+0xbb>
c000a915:	83 fa 01             	cmp    edx,0x1
c000a918:	75 10                	jne    c000a92a <sinc_set_converter+0x62>
c000a91a:	c7 43 24 24 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a624
c000a921:	c7 43 20 24 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a624
c000a928:	eb 4d                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a92a:	83 fa 02             	cmp    edx,0x2
c000a92d:	75 10                	jne    c000a93f <sinc_set_converter+0x77>
c000a92f:	c7 43 24 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a3a5
c000a936:	c7 43 20 a5 a3 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a3a5
c000a93d:	eb 38                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a93f:	83 fa 04             	cmp    edx,0x4
c000a942:	75 10                	jne    c000a954 <sinc_set_converter+0x8c>
c000a944:	c7 43 24 26 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a126
c000a94b:	c7 43 20 26 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a126
c000a952:	eb 23                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a954:	83 fa 06             	cmp    edx,0x6
c000a957:	75 10                	jne    c000a969 <sinc_set_converter+0xa1>
c000a959:	c7 43 24 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009ea7
c000a960:	c7 43 20 a7 9e 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009ea7
c000a967:	eb 0e                	jmp    c000a977 <sinc_set_converter+0xaf>
c000a969:	c7 43 24 23 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009c23
c000a970:	c7 43 20 23 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009c23
c000a977:	c7 43 28 d3 95 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00095d3
c000a97e:	b8 0a 00 00 00       	mov    eax,0xa
c000a983:	81 c4 58 08 00 00    	add    esp,0x858
c000a989:	5b                   	pop    ebx
c000a98a:	c3                   	ret    

c000a98b <is_bad_src_ratio>:
c000a98b:	83 ec 0c             	sub    esp,0xc
c000a98e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a992:	89 04 24             	mov    DWORD PTR [esp],eax
c000a995:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a999:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a99d:	dd 04 24             	fld    QWORD PTR [esp]
c000a9a0:	dd 05 e0 fa 01 c0    	fld    QWORD PTR ds:0xc001fae0
c000a9a6:	de d9                	fcompp 
c000a9a8:	df e0                	fnstsw ax
c000a9aa:	f6 c4 45             	test   ah,0x45
c000a9ad:	74 10                	je     c000a9bf <is_bad_src_ratio+0x34>
c000a9af:	dd 04 24             	fld    QWORD PTR [esp]
c000a9b2:	dc 1d e8 fa 01 c0    	fcomp  QWORD PTR ds:0xc001fae8
c000a9b8:	df e0                	fnstsw ax
c000a9ba:	f6 c4 45             	test   ah,0x45
c000a9bd:	75 07                	jne    c000a9c6 <is_bad_src_ratio+0x3b>
c000a9bf:	b8 01 00 00 00       	mov    eax,0x1
c000a9c4:	eb 05                	jmp    c000a9cb <is_bad_src_ratio+0x40>
c000a9c6:	b8 00 00 00 00       	mov    eax,0x0
c000a9cb:	83 c4 0c             	add    esp,0xc
c000a9ce:	c3                   	ret    

c000a9cf <fmod_one>:
c000a9cf:	83 ec 2c             	sub    esp,0x2c
c000a9d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a9d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a9da:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a9de:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a9e2:	83 ec 08             	sub    esp,0x8
c000a9e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ed:	e8 1e 39 01 00       	call   c001e310 <lrint>
c000a9f2:	83 c4 10             	add    esp,0x10
c000a9f5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9f9:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000a9fd:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa01:	de e1                	fsubrp st(1),st
c000aa03:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa07:	d9 ee                	fldz   
c000aa09:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aa0d:	df e0                	fnstsw ax
c000aa0f:	f6 c4 45             	test   ah,0x45
c000aa12:	75 0a                	jne    c000aa1e <fmod_one+0x4f>
c000aa14:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa18:	d9 e8                	fld1   
c000aa1a:	de c1                	faddp  st(1),st
c000aa1c:	eb 04                	jmp    c000aa22 <fmod_one+0x53>
c000aa1e:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aa22:	83 c4 2c             	add    esp,0x2c
c000aa25:	c3                   	ret    

c000aa26 <zoh_vari_process>:
c000aa26:	55                   	push   ebp
c000aa27:	57                   	push   edi
c000aa28:	56                   	push   esi
c000aa29:	53                   	push   ebx
c000aa2a:	83 ec 2c             	sub    esp,0x2c
c000aa2d:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aa31:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aa35:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aa3d:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aa41:	0f 8e 34 02 00 00    	jle    c000ac7b <zoh_vari_process+0x255>
c000aa47:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aa4a:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aa52:	85 db                	test   ebx,ebx
c000aa54:	0f 84 21 02 00 00    	je     c000ac7b <zoh_vari_process+0x255>
c000aa5a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aa5d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aa61:	74 19                	je     c000aa7c <zoh_vari_process+0x56>
c000aa63:	31 d2                	xor    edx,edx
c000aa65:	39 c2                	cmp    edx,eax
c000aa67:	7d 0c                	jge    c000aa75 <zoh_vari_process+0x4f>
c000aa69:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aa6b:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aa6e:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aa72:	42                   	inc    edx
c000aa73:	eb f0                	jmp    c000aa65 <zoh_vari_process+0x3f>
c000aa75:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000aa7c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000aa7f:	0f af d0             	imul   edx,eax
c000aa82:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000aa85:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000aa89:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000aa90:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000aa93:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000aa9a:	dd 07                	fld    QWORD PTR [edi]
c000aa9c:	dd 14 24             	fst    QWORD PTR [esp]
c000aa9f:	50                   	push   eax
c000aaa0:	50                   	push   eax
c000aaa1:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaa4:	e8 e2 fe ff ff       	call   c000a98b <is_bad_src_ratio>
c000aaa9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000aaad:	5a                   	pop    edx
c000aaae:	59                   	pop    ecx
c000aaaf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000aab4:	0f 85 b9 01 00 00    	jne    c000ac73 <zoh_vari_process+0x24d>
c000aaba:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000aabd:	d9 e8                	fld1   
c000aabf:	d8 d1                	fcom   st(1)
c000aac1:	df e0                	fnstsw ax
c000aac3:	9e                   	sahf   
c000aac4:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000aac8:	0f 86 85 00 00 00    	jbe    c000ab53 <zoh_vari_process+0x12d>
c000aace:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000aad1:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000aad4:	7d 7d                	jge    c000ab53 <zoh_vari_process+0x12d>
c000aad6:	d9 c0                	fld    st(0)
c000aad8:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aadb:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000aade:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000aae1:	df e0                	fnstsw ax
c000aae3:	9e                   	sahf   
c000aae4:	73 6d                	jae    c000ab53 <zoh_vari_process+0x12d>
c000aae6:	85 d2                	test   edx,edx
c000aae8:	7e 38                	jle    c000ab22 <zoh_vari_process+0xfc>
c000aaea:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aaee:	83 ec 10             	sub    esp,0x10
c000aaf1:	dd 07                	fld    QWORD PTR [edi]
c000aaf3:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000aaf6:	dd 1c 24             	fstp   QWORD PTR [esp]
c000aaf9:	e8 f2 37 01 00       	call   c001e2f0 <fabs>
c000aafe:	83 c4 10             	add    esp,0x10
c000ab01:	dc 1d 58 fb 01 c0    	fcomp  QWORD PTR ds:0xc001fb58
c000ab07:	df e0                	fnstsw ax
c000ab09:	9e                   	sahf   
c000ab0a:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab0e:	76 12                	jbe    c000ab22 <zoh_vari_process+0xfc>
c000ab10:	dd 07                	fld    QWORD PTR [edi]
c000ab12:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ab15:	d8 e1                	fsub   st,st(1)
c000ab17:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ab1a:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ab1d:	de c1                	faddp  st(1),st
c000ab1f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab22:	31 c0                	xor    eax,eax
c000ab24:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000ab27:	7e 13                	jle    c000ab3c <zoh_vari_process+0x116>
c000ab29:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000ab2d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ab30:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ab33:	40                   	inc    eax
c000ab34:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000ab37:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ab3a:	eb e8                	jmp    c000ab24 <zoh_vari_process+0xfe>
c000ab3c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab40:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab43:	de c1                	faddp  st(1),st
c000ab45:	e9 73 ff ff ff       	jmp    c000aabd <zoh_vari_process+0x97>
c000ab4a:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000ab4e:	dc 34 24             	fdiv   QWORD PTR [esp]
c000ab51:	de c1                	faddp  st(1),st
c000ab53:	83 ec 10             	sub    esp,0x10
c000ab56:	dd 14 24             	fst    QWORD PTR [esp]
c000ab59:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab5d:	e8 6d fe ff ff       	call   c000a9cf <fmod_one>
c000ab62:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ab65:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000ab69:	d8 e1                	fsub   st,st(1)
c000ab6b:	d9 c9                	fxch   st(1)
c000ab6d:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000ab71:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab74:	e8 97 37 01 00       	call   c001e310 <lrint>
c000ab79:	83 c4 10             	add    esp,0x10
c000ab7c:	0f af e8             	imul   ebp,eax
c000ab7f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab82:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ab85:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ab8c:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ab8f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab92:	0f 8d 82 00 00 00    	jge    c000ac1a <zoh_vari_process+0x1f4>
c000ab98:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ab9c:	d9 c0                	fld    st(0)
c000ab9e:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000aba1:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000aba5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000aba9:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000abad:	de d9                	fcompp 
c000abaf:	df e0                	fnstsw ax
c000abb1:	9e                   	sahf   
c000abb2:	72 66                	jb     c000ac1a <zoh_vari_process+0x1f4>
c000abb4:	85 d2                	test   edx,edx
c000abb6:	7e 38                	jle    c000abf0 <zoh_vari_process+0x1ca>
c000abb8:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000abbc:	83 ec 10             	sub    esp,0x10
c000abbf:	dd 07                	fld    QWORD PTR [edi]
c000abc1:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000abc4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abc7:	e8 24 37 01 00       	call   c001e2f0 <fabs>
c000abcc:	83 c4 10             	add    esp,0x10
c000abcf:	dc 1d 58 fb 01 c0    	fcomp  QWORD PTR ds:0xc001fb58
c000abd5:	df e0                	fnstsw ax
c000abd7:	9e                   	sahf   
c000abd8:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000abdc:	76 12                	jbe    c000abf0 <zoh_vari_process+0x1ca>
c000abde:	dd 07                	fld    QWORD PTR [edi]
c000abe0:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000abe3:	d8 e1                	fsub   st,st(1)
c000abe5:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000abe8:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000abeb:	de c1                	faddp  st(1),st
c000abed:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abf0:	31 d2                	xor    edx,edx
c000abf2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000abf5:	39 d0                	cmp    eax,edx
c000abf7:	0f 8e 4d ff ff ff    	jle    c000ab4a <zoh_vari_process+0x124>
c000abfd:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac00:	29 c1                	sub    ecx,eax
c000ac02:	89 c8                	mov    eax,ecx
c000ac04:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac06:	01 d0                	add    eax,edx
c000ac08:	42                   	inc    edx
c000ac09:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ac0c:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac0f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ac12:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ac15:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000ac18:	eb d8                	jmp    c000abf2 <zoh_vari_process+0x1cc>
c000ac1a:	39 e9                	cmp    ecx,ebp
c000ac1c:	7d 13                	jge    c000ac31 <zoh_vari_process+0x20b>
c000ac1e:	89 e8                	mov    eax,ebp
c000ac20:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000ac23:	29 c8                	sub    eax,ecx
c000ac25:	99                   	cdq    
c000ac26:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ac2d:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000ac31:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000ac34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac37:	85 c0                	test   eax,eax
c000ac39:	7f 1b                	jg     c000ac56 <zoh_vari_process+0x230>
c000ac3b:	dd 04 24             	fld    QWORD PTR [esp]
c000ac3e:	dd 1f                	fstp   QWORD PTR [edi]
c000ac40:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ac43:	99                   	cdq    
c000ac44:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac47:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000ac4a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000ac4d:	99                   	cdq    
c000ac4e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000ac51:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000ac54:	eb 25                	jmp    c000ac7b <zoh_vari_process+0x255>
c000ac56:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ac59:	31 d2                	xor    edx,edx
c000ac5b:	29 e8                	sub    eax,ebp
c000ac5d:	c1 e0 02             	shl    eax,0x2
c000ac60:	39 d5                	cmp    ebp,edx
c000ac62:	7e d7                	jle    c000ac3b <zoh_vari_process+0x215>
c000ac64:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac66:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000ac69:	83 c0 04             	add    eax,0x4
c000ac6c:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000ac70:	42                   	inc    edx
c000ac71:	eb ed                	jmp    c000ac60 <zoh_vari_process+0x23a>
c000ac73:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ac7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ac7f:	83 c4 2c             	add    esp,0x2c
c000ac82:	5b                   	pop    ebx
c000ac83:	5e                   	pop    esi
c000ac84:	5f                   	pop    edi
c000ac85:	5d                   	pop    ebp
c000ac86:	c3                   	ret    

c000ac87 <zoh_reset>:
c000ac87:	83 ec 0c             	sub    esp,0xc
c000ac8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac8e:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ac91:	85 c0                	test   eax,eax
c000ac93:	74 20                	je     c000acb5 <zoh_reset+0x2e>
c000ac95:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ac98:	83 c0 1c             	add    eax,0x1c
c000ac9b:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000ac9e:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000aca5:	c1 e2 02             	shl    edx,0x2
c000aca8:	51                   	push   ecx
c000aca9:	52                   	push   edx
c000acaa:	6a 00                	push   0x0
c000acac:	50                   	push   eax
c000acad:	e8 56 59 ff ff       	call   c0000608 <memset>
c000acb2:	83 c4 10             	add    esp,0x10
c000acb5:	83 c4 0c             	add    esp,0xc
c000acb8:	c3                   	ret    

c000acb9 <zoh_get_name>:
c000acb9:	31 c0                	xor    eax,eax
c000acbb:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000acc0:	75 05                	jne    c000acc7 <zoh_get_name+0xe>
c000acc2:	b8 f4 fc 01 c0       	mov    eax,0xc001fcf4
c000acc7:	c3                   	ret    

c000acc8 <zoh_get_description>:
c000acc8:	31 c0                	xor    eax,eax
c000acca:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000accf:	75 05                	jne    c000acd6 <zoh_get_description+0xe>
c000acd1:	b8 05 fd 01 c0       	mov    eax,0xc001fd05
c000acd6:	c3                   	ret    

c000acd7 <zoh_set_converter>:
c000acd7:	53                   	push   ebx
c000acd8:	b8 0a 00 00 00       	mov    eax,0xa
c000acdd:	83 ec 08             	sub    esp,0x8
c000ace0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ace4:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ace9:	75 6e                	jne    c000ad59 <zoh_set_converter+0x82>
c000aceb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000acee:	85 c0                	test   eax,eax
c000acf0:	74 13                	je     c000ad05 <zoh_set_converter+0x2e>
c000acf2:	83 ec 0c             	sub    esp,0xc
c000acf5:	50                   	push   eax
c000acf6:	e8 46 14 00 00       	call   c000c141 <free>
c000acfb:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad02:	83 c4 10             	add    esp,0x10
c000ad05:	50                   	push   eax
c000ad06:	50                   	push   eax
c000ad07:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad0a:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ad11:	50                   	push   eax
c000ad12:	6a 01                	push   0x1
c000ad14:	e8 48 14 00 00       	call   c000c161 <calloc>
c000ad19:	83 c4 10             	add    esp,0x10
c000ad1c:	89 c2                	mov    edx,eax
c000ad1e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ad21:	85 d2                	test   edx,edx
c000ad23:	b8 01 00 00 00       	mov    eax,0x1
c000ad28:	74 2f                	je     c000ad59 <zoh_set_converter+0x82>
c000ad2a:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000ad30:	83 ec 0c             	sub    esp,0xc
c000ad33:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad36:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ad39:	c7 43 24 26 aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aa26
c000ad40:	c7 43 20 26 aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aa26
c000ad47:	c7 43 28 87 ac 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ac87
c000ad4e:	53                   	push   ebx
c000ad4f:	e8 33 ff ff ff       	call   c000ac87 <zoh_reset>
c000ad54:	83 c4 10             	add    esp,0x10
c000ad57:	31 c0                	xor    eax,eax
c000ad59:	83 c4 08             	add    esp,0x8
c000ad5c:	5b                   	pop    ebx
c000ad5d:	c3                   	ret    

c000ad5e <Computer::close(int, int, void*)>:
c000ad5e:	57                   	push   edi
c000ad5f:	56                   	push   esi
c000ad60:	53                   	push   ebx
c000ad61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000ad69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ad6d:	83 ec 0c             	sub    esp,0xc
c000ad70:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000ad76:	e8 0d 59 00 00       	call   c0010688 <Device::closeAll()>
c000ad7b:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ad81:	83 c4 10             	add    esp,0x10
c000ad84:	8b 10                	mov    edx,DWORD PTR [eax]
c000ad86:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ad8a:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ad92:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ad96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ad9a:	5b                   	pop    ebx
c000ad9b:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ad9e:	5e                   	pop    esi
c000ad9f:	5f                   	pop    edi
c000ada0:	ff e0                	jmp    eax

c000ada2 <Computer::Computer()>:
c000ada2:	83 ec 0c             	sub    esp,0xc
c000ada5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ada9:	83 ec 08             	sub    esp,0x8
c000adac:	68 3c fd 01 c0       	push   0xc001fd3c
c000adb1:	50                   	push   eax
c000adb2:	e8 4b 59 00 00       	call   c0010702 <Device::Device(char const*)>
c000adb7:	83 c4 10             	add    esp,0x10
c000adba:	ba b8 fd 01 c0       	mov    edx,0xc001fdb8
c000adbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc3:	89 10                	mov    DWORD PTR [eax],edx
c000adc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adc9:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000add3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000add7:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ade1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ade5:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000adeb:	83 ca 04             	or     edx,0x4
c000adee:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000adf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000adf8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000adfe:	0f b6 d0             	movzx  edx,al
c000ae01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae05:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ae0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae10:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae16:	0f b6 d0             	movzx  edx,al
c000ae19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae1d:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000ae22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae26:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae2c:	8d 50 01             	lea    edx,[eax+0x1]
c000ae2f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae33:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae39:	0f b6 d0             	movzx  edx,al
c000ae3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae40:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae44:	83 e1 3f             	and    ecx,0x3f
c000ae47:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000ae4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae55:	0f b6 d0             	movzx  edx,al
c000ae58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae5c:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000ae63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae6d:	0f b6 d0             	movzx  edx,al
c000ae70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae74:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000ae79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae7d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae83:	8d 50 01             	lea    edx,[eax+0x1]
c000ae86:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae8a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000ae90:	0f b6 d0             	movzx  edx,al
c000ae93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae97:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000ae9b:	83 e1 3f             	and    ecx,0x3f
c000ae9e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeac:	0f b6 d0             	movzx  edx,al
c000aeaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb3:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000aeba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aebe:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aec4:	0f b6 d0             	movzx  edx,al
c000aec7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aecb:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000aed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeda:	8d 50 01             	lea    edx,[eax+0x1]
c000aedd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aee1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aee7:	0f b6 d0             	movzx  edx,al
c000aeea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeee:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aef2:	83 e1 3f             	and    ecx,0x3f
c000aef5:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aef9:	90                   	nop
c000aefa:	83 c4 0c             	add    esp,0xc
c000aefd:	c3                   	ret    

c000aefe <Computer::setBootMessage(char const*)>:
c000aefe:	c3                   	ret    
c000aeff:	90                   	nop

c000af00 <Computer::start()>:
c000af00:	56                   	push   esi
c000af01:	53                   	push   ebx
c000af02:	50                   	push   eax
c000af03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000af07:	e8 fc c6 00 00       	call   c0017608 <lockScheduler()>
c000af0c:	e8 2b ca 00 00       	call   c001793c <schedule()>
c000af11:	e8 f4 c6 00 00       	call   c001760a <unlockScheduler()>
c000af16:	fb                   	sti    
c000af17:	83 ec 0c             	sub    esp,0xc
c000af1a:	68 3b 07 00 00       	push   0x73b
c000af1f:	e8 e4 42 00 00       	call   c000f208 <operator new(unsigned long)>
c000af24:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000af2b:	89 c6                	mov    esi,eax
c000af2d:	ff 35 94 42 02 c0    	push   DWORD PTR ds:0xc0024294
c000af33:	68 45 fd 01 c0       	push   0xc001fd45
c000af38:	6a 01                	push   0x1
c000af3a:	50                   	push   eax
c000af3b:	e8 28 c5 00 00       	call   c0017468 <Process::Process(bool, char const*, Process*, char**)>
c000af40:	83 c4 20             	add    esp,0x20
c000af43:	68 ff 00 00 00       	push   0xff
c000af48:	6a 00                	push   0x0
c000af4a:	68 a5 b5 00 c0       	push   0xc000b5a5
c000af4f:	56                   	push   esi
c000af50:	e8 dd c7 00 00       	call   c0017732 <Process::createThread(void (*)(void*), void*, int)>
c000af55:	6a 7a                	push   0x7a
c000af57:	6a 00                	push   0x0
c000af59:	68 78 81 01 c0       	push   0xc0018178
c000af5e:	ff 35 94 42 02 c0    	push   DWORD PTR ds:0xc0024294
c000af64:	e8 c9 c7 00 00       	call   c0017732 <Process::createThread(void (*)(void*), void*, int)>
c000af69:	83 c4 20             	add    esp,0x20
c000af6c:	a3 48 42 02 c0       	mov    ds:0xc0024248,eax
c000af71:	c6 05 cd 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022ecd,0x1
c000af78:	e8 e5 44 00 00       	call   c000f462 <initVFS()>
c000af7d:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000af83:	8b 10                	mov    edx,DWORD PTR [eax]
c000af85:	6a 00                	push   0x0
c000af87:	6a 00                	push   0x0
c000af89:	6a 00                	push   0x0
c000af8b:	50                   	push   eax
c000af8c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000af8f:	e8 64 af 00 00       	call   c0015ef8 <setupSystemCalls()>
c000af94:	e8 c7 4f 00 00       	call   c000ff60 <loadClockSettings()>
c000af99:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000af9c:	e8 bb 56 00 00       	call   c001065c <Device::loadDriversForAll()>
c000afa1:	5a                   	pop    edx
c000afa2:	8b 1d c8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022ec8
c000afa8:	59                   	pop    ecx
c000afa9:	6a 01                	push   0x1
c000afab:	68 52 fd 01 c0       	push   0xc001fd52
c000afb0:	e8 f5 c0 00 00       	call   c00170aa <Thr::loadDLL(char const*, bool)>
c000afb5:	5e                   	pop    esi
c000afb6:	5a                   	pop    edx
c000afb7:	53                   	push   ebx
c000afb8:	50                   	push   eax
c000afb9:	e8 3f c2 00 00       	call   c00171fd <Thr::executeDLL(unsigned long, void*)>
c000afbe:	c7 04 24 94 0f 02 c0 	mov    DWORD PTR [esp],0xc0020f94
c000afc5:	e8 6c 0b 00 00       	call   c000bb36 <kprintf(char const*, ...)>
c000afca:	83 c4 10             	add    esp,0x10
c000afcd:	83 ec 0c             	sub    esp,0xc
c000afd0:	6a 02                	push   0x2
c000afd2:	e8 30 cc 00 00       	call   c0017c07 <blockTask(TaskState)>
c000afd7:	83 c4 10             	add    esp,0x10
c000afda:	eb f1                	jmp    c000afcd <Computer::start()+0xcd>

c000afdc <firstTask()>:
c000afdc:	83 ec 18             	sub    esp,0x18
c000afdf:	ff 35 c8 2e 02 c0    	push   DWORD PTR ds:0xc0022ec8
c000afe5:	e8 16 ff ff ff       	call   c000af00 <Computer::start()>

c000afea <Computer::detectFeatures()>:
c000afea:	55                   	push   ebp
c000afeb:	57                   	push   edi
c000afec:	56                   	push   esi
c000afed:	53                   	push   ebx
c000afee:	83 ec 1c             	sub    esp,0x1c
c000aff1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000aff5:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000afff:	e8 bb 52 ff ff       	call   c00002bf <detectCPUID>
c000b004:	85 c0                	test   eax,eax
c000b006:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b00c:	0f 95 c2             	setne  dl
c000b00f:	83 e0 fd             	and    eax,0xfffffffd
c000b012:	d1 e2                	shl    edx,1
c000b014:	09 d0                	or     eax,edx
c000b016:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b01c:	a8 02                	test   al,0x2
c000b01e:	75 46                	jne    c000b066 <Computer::detectFeatures()+0x7c>
c000b020:	f6 05 e1 2e 02 c0 04 	test   BYTE PTR ds:0xc0022ee1,0x4
c000b027:	74 07                	je     c000b030 <Computer::detectFeatures()+0x46>
c000b029:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000b030:	e8 61 2d 01 00       	call   c001dd96 <x87Detect>
c000b035:	83 e0 01             	and    eax,0x1
c000b038:	c1 e0 04             	shl    eax,0x4
c000b03b:	88 c2                	mov    dl,al
c000b03d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b043:	83 e0 ef             	and    eax,0xffffffef
c000b046:	09 d0                	or     eax,edx
c000b048:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b04e:	a8 10                	test   al,0x10
c000b050:	0f 85 10 01 00 00    	jne    c000b166 <Computer::detectFeatures()+0x17c>
c000b056:	84 c0                	test   al,al
c000b058:	0f 88 2b 01 00 00    	js     c000b189 <Computer::detectFeatures()+0x19f>
c000b05e:	83 c4 1c             	add    esp,0x1c
c000b061:	5b                   	pop    ebx
c000b062:	5e                   	pop    esi
c000b063:	5f                   	pop    edi
c000b064:	5d                   	pop    ebp
c000b065:	c3                   	ret    
c000b066:	83 ec 0c             	sub    esp,0xc
c000b069:	6a 20                	push   0x20
c000b06b:	e8 43 8e 00 00       	call   c0013eb3 <cpuidCheckEDX(unsigned int)>
c000b070:	83 e0 01             	and    eax,0x1
c000b073:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b07a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b080:	83 e0 f7             	and    eax,0xfffffff7
c000b083:	09 d0                	or     eax,edx
c000b085:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b08b:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b092:	e8 1c 8e 00 00       	call   c0013eb3 <cpuidCheckEDX(unsigned int)>
c000b097:	83 e0 01             	and    eax,0x1
c000b09a:	88 c2                	mov    dl,al
c000b09c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0a2:	83 e0 fe             	and    eax,0xfffffffe
c000b0a5:	09 d0                	or     eax,edx
c000b0a7:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0ad:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b0b4:	e8 fa 8d 00 00       	call   c0013eb3 <cpuidCheckEDX(unsigned int)>
c000b0b9:	c1 e0 07             	shl    eax,0x7
c000b0bc:	88 c2                	mov    dl,al
c000b0be:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b0c4:	83 e0 7f             	and    eax,0x7f
c000b0c7:	09 d0                	or     eax,edx
c000b0c9:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b0cf:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b0d6:	e8 d8 8d 00 00       	call   c0013eb3 <cpuidCheckEDX(unsigned int)>
c000b0db:	83 c4 10             	add    esp,0x10
c000b0de:	83 e0 01             	and    eax,0x1
c000b0e1:	c1 e0 05             	shl    eax,0x5
c000b0e4:	88 c2                	mov    dl,al
c000b0e6:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0ec:	83 e0 df             	and    eax,0xffffffdf
c000b0ef:	09 d0                	or     eax,edx
c000b0f1:	f7 05 e0 2e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0022ee0,0x401
c000b0fb:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b101:	0f 84 a8 00 00 00    	je     c000b1af <Computer::detectFeatures()+0x1c5>
c000b107:	83 ec 0c             	sub    esp,0xc
c000b10a:	80 a3 e8 01 00 00 fe 	and    BYTE PTR [ebx+0x1e8],0xfe
c000b111:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b115:	50                   	push   eax
c000b116:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b11a:	55                   	push   ebp
c000b11b:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b11f:	57                   	push   edi
c000b120:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b124:	56                   	push   esi
c000b125:	68 00 00 00 80       	push   0x80000000
c000b12a:	e8 01 8d 00 00       	call   c0013e30 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b12f:	83 c4 20             	add    esp,0x20
c000b132:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b139:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b13d:	0f 86 dd fe ff ff    	jbe    c000b020 <Computer::detectFeatures()+0x36>
c000b143:	83 ec 0c             	sub    esp,0xc
c000b146:	50                   	push   eax
c000b147:	55                   	push   ebp
c000b148:	57                   	push   edi
c000b149:	56                   	push   esi
c000b14a:	68 01 00 00 80       	push   0x80000001
c000b14f:	e8 dc 8c 00 00       	call   c0013e30 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b154:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000b15e:	83 c4 20             	add    esp,0x20
c000b161:	e9 ba fe ff ff       	jmp    c000b020 <Computer::detectFeatures()+0x36>
c000b166:	e8 e5 2b 01 00       	call   c001dd50 <sseDetect>
c000b16b:	88 c2                	mov    dl,al
c000b16d:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b173:	c1 e2 07             	shl    edx,0x7
c000b176:	83 e0 7f             	and    eax,0x7f
c000b179:	09 d0                	or     eax,edx
c000b17b:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b181:	84 c0                	test   al,al
c000b183:	0f 89 d5 fe ff ff    	jns    c000b05e <Computer::detectFeatures()+0x74>
c000b189:	e8 b2 2b 01 00       	call   c001dd40 <avxDetect>
c000b18e:	83 e0 01             	and    eax,0x1
c000b191:	c1 e0 05             	shl    eax,0x5
c000b194:	88 c2                	mov    dl,al
c000b196:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b19c:	83 e0 df             	and    eax,0xffffffdf
c000b19f:	09 d0                	or     eax,edx
c000b1a1:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b1a7:	83 c4 1c             	add    esp,0x1c
c000b1aa:	5b                   	pop    ebx
c000b1ab:	5e                   	pop    esi
c000b1ac:	5f                   	pop    edi
c000b1ad:	5d                   	pop    ebp
c000b1ae:	c3                   	ret    
c000b1af:	83 ec 0c             	sub    esp,0xc
c000b1b2:	68 00 02 00 00       	push   0x200
c000b1b7:	e8 f7 8c 00 00       	call   c0013eb3 <cpuidCheckEDX(unsigned int)>
c000b1bc:	83 c4 10             	add    esp,0x10
c000b1bf:	e9 43 ff ff ff       	jmp    c000b107 <Computer::detectFeatures()+0x11d>

c000b1c4 <Computer::displayFeatures()>:
c000b1c4:	c3                   	ret    
c000b1c5:	90                   	nop

c000b1c6 <Computer::rdmsr(unsigned int)>:
c000b1c6:	83 ec 0c             	sub    esp,0xc
c000b1c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1cd:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b1d4:	74 0a                	je     c000b1e0 <Computer::rdmsr(unsigned int)+0x1a>
c000b1d6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b1da:	0f 32                	rdmsr  
c000b1dc:	83 c4 0c             	add    esp,0xc
c000b1df:	c3                   	ret    
c000b1e0:	83 ec 0c             	sub    esp,0xc
c000b1e3:	68 6e fd 01 c0       	push   0xc001fd6e
c000b1e8:	e8 67 0a 00 00       	call   c000bc54 <panic(char const*)>
c000b1ed:	83 c4 10             	add    esp,0x10
c000b1f0:	eb e4                	jmp    c000b1d6 <Computer::rdmsr(unsigned int)+0x10>

c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b1f2:	57                   	push   edi
c000b1f3:	56                   	push   esi
c000b1f4:	52                   	push   edx
c000b1f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b1fd:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b201:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b208:	74 0e                	je     c000b218 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b20a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b20e:	89 f0                	mov    eax,esi
c000b210:	89 fa                	mov    edx,edi
c000b212:	0f 30                	wrmsr  
c000b214:	58                   	pop    eax
c000b215:	5e                   	pop    esi
c000b216:	5f                   	pop    edi
c000b217:	c3                   	ret    
c000b218:	83 ec 0c             	sub    esp,0xc
c000b21b:	68 74 fd 01 c0       	push   0xc001fd74
c000b220:	e8 2f 0a 00 00       	call   c000bc54 <panic(char const*)>
c000b225:	83 c4 10             	add    esp,0x10
c000b228:	eb e0                	jmp    c000b20a <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b22a <Computer::nmiEnabled()>:
c000b22a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b22e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b234:	c3                   	ret    
c000b235:	90                   	nop

c000b236 <Computer::readCMOS(unsigned char)>:
c000b236:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b23a:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b241:	19 c0                	sbb    eax,eax
c000b243:	83 e0 80             	and    eax,0xffffff80
c000b246:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b24a:	e6 70                	out    0x70,al
c000b24c:	e4 71                	in     al,0x71
c000b24e:	c3                   	ret    
c000b24f:	90                   	nop

c000b250 <Computer::enableNMI(bool)>:
c000b250:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b254:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b258:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b25e:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b266:	eb ce                	jmp    c000b236 <Computer::readCMOS(unsigned char)>

c000b268 <Computer::open(int, int, void*)>:
c000b268:	56                   	push   esi
c000b269:	53                   	push   ebx
c000b26a:	83 ec 10             	sub    esp,0x10
c000b26d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b271:	f6 05 e0 2e 02 c0 04 	test   BYTE PTR ds:0xc0022ee0,0x4
c000b278:	68 68 22 00 00       	push   0x2268
c000b27d:	0f 94 05 00 23 02 c0 	sete   BYTE PTR ds:0xc0022300
c000b284:	e8 7f 3f 00 00       	call   c000f208 <operator new(unsigned long)>
c000b289:	89 04 24             	mov    DWORD PTR [esp],eax
c000b28c:	89 c6                	mov    esi,eax
c000b28e:	e8 b7 82 00 00       	call   c001354a <ACPI::ACPI()>
c000b293:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b299:	58                   	pop    eax
c000b29a:	5a                   	pop    edx
c000b29b:	56                   	push   esi
c000b29c:	53                   	push   ebx
c000b29d:	e8 70 52 00 00       	call   c0010512 <Device::addChild(Device*)>
c000b2a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b2a5:	e8 40 fd ff ff       	call   c000afea <Computer::detectFeatures()>
c000b2aa:	59                   	pop    ecx
c000b2ab:	5e                   	pop    esi
c000b2ac:	6a 01                	push   0x1
c000b2ae:	53                   	push   ebx
c000b2af:	e8 9c ff ff ff       	call   c000b250 <Computer::enableNMI(bool)>
c000b2b4:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b2bb:	e8 48 3f 00 00       	call   c000f208 <operator new(unsigned long)>
c000b2c0:	89 04 24             	mov    DWORD PTR [esp],eax
c000b2c3:	89 c6                	mov    esi,eax
c000b2c5:	e8 b4 8c 00 00       	call   c0013f7e <CPU::CPU()>
c000b2ca:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b2d0:	58                   	pop    eax
c000b2d1:	5a                   	pop    edx
c000b2d2:	56                   	push   esi
c000b2d3:	53                   	push   ebx
c000b2d4:	e8 39 52 00 00       	call   c0010512 <Device::addChild(Device*)>
c000b2d9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b2df:	8b 10                	mov    edx,DWORD PTR [eax]
c000b2e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b2e5:	6a 00                	push   0x0
c000b2e7:	6a 00                	push   0x0
c000b2e9:	50                   	push   eax
c000b2ea:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b2ed:	83 c4 20             	add    esp,0x20
c000b2f0:	e8 85 57 00 00       	call   c0010a7a <setupFPU()>
c000b2f5:	83 ec 08             	sub    esp,0x8
c000b2f8:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b2fe:	50                   	push   eax
c000b2ff:	53                   	push   ebx
c000b300:	e8 0d 52 00 00       	call   c0010512 <Device::addChild(Device*)>
c000b305:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b30b:	8b 10                	mov    edx,DWORD PTR [eax]
c000b30d:	6a 00                	push   0x0
c000b30f:	6a 00                	push   0x0
c000b311:	6a 00                	push   0x0
c000b313:	50                   	push   eax
c000b314:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b317:	83 c4 14             	add    esp,0x14
c000b31a:	68 dc af 00 c0       	push   0xc000afdc
c000b31f:	e8 0e c5 00 00       	call   c0017832 <setupMultitasking(void (*)())>
c000b324:	83 c4 14             	add    esp,0x14
c000b327:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b32c:	5b                   	pop    ebx
c000b32d:	5e                   	pop    esi
c000b32e:	c3                   	ret    
c000b32f:	90                   	nop

c000b330 <Computer::disableNMI()>:
c000b330:	6a 00                	push   0x0
c000b332:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000b336:	e8 15 ff ff ff       	call   c000b250 <Computer::enableNMI(bool)>
c000b33b:	58                   	pop    eax
c000b33c:	5a                   	pop    edx
c000b33d:	c3                   	ret    

c000b33e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b33e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b342:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b349:	19 c0                	sbb    eax,eax
c000b34b:	83 e0 80             	and    eax,0xffffff80
c000b34e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000b352:	e6 70                	out    0x70,al
c000b354:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b358:	e6 71                	out    0x71,al
c000b35a:	c3                   	ret    
c000b35b:	90                   	nop

c000b35c <Computer::handleNMI()>:
c000b35c:	56                   	push   esi
c000b35d:	53                   	push   ebx
c000b35e:	83 ec 10             	sub    esp,0x10
c000b361:	e4 92                	in     al,0x92
c000b363:	89 c6                	mov    esi,eax
c000b365:	e4 61                	in     al,0x61
c000b367:	68 7a fd 01 c0       	push   0xc001fd7a
c000b36c:	88 c3                	mov    bl,al
c000b36e:	e8 c3 07 00 00       	call   c000bb36 <kprintf(char const*, ...)>
c000b373:	83 c4 10             	add    esp,0x10
c000b376:	83 e6 10             	and    esi,0x10
c000b379:	75 0d                	jne    c000b388 <Computer::handleNMI()+0x2c>
c000b37b:	f6 c3 40             	test   bl,0x40
c000b37e:	75 1d                	jne    c000b39d <Computer::handleNMI()+0x41>
c000b380:	84 db                	test   bl,bl
c000b382:	78 2d                	js     c000b3b1 <Computer::handleNMI()+0x55>
c000b384:	58                   	pop    eax
c000b385:	5b                   	pop    ebx
c000b386:	5e                   	pop    esi
c000b387:	c3                   	ret    
c000b388:	83 ec 0c             	sub    esp,0xc
c000b38b:	68 8b fd 01 c0       	push   0xc001fd8b
c000b390:	e8 bf 08 00 00       	call   c000bc54 <panic(char const*)>
c000b395:	83 c4 10             	add    esp,0x10
c000b398:	f6 c3 40             	test   bl,0x40
c000b39b:	74 e3                	je     c000b380 <Computer::handleNMI()+0x24>
c000b39d:	83 ec 0c             	sub    esp,0xc
c000b3a0:	68 98 fd 01 c0       	push   0xc001fd98
c000b3a5:	e8 aa 08 00 00       	call   c000bc54 <panic(char const*)>
c000b3aa:	83 c4 10             	add    esp,0x10
c000b3ad:	84 db                	test   bl,bl
c000b3af:	79 d3                	jns    c000b384 <Computer::handleNMI()+0x28>
c000b3b1:	c7 44 24 10 a2 fd 01 c0 	mov    DWORD PTR [esp+0x10],0xc001fda2
c000b3b9:	5a                   	pop    edx
c000b3ba:	5b                   	pop    ebx
c000b3bb:	5e                   	pop    esi
c000b3bc:	e9 93 08 00 00       	jmp    c000bc54 <panic(char const*)>
c000b3c1:	90                   	nop

c000b3c2 <Computer::setDiskActivityLight(int, bool)>:
c000b3c2:	56                   	push   esi
c000b3c3:	53                   	push   ebx
c000b3c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b3c8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b3cd:	77 1b                	ja     c000b3ea <Computer::setDiskActivityLight(int, bool)+0x28>
c000b3cf:	e4 92                	in     al,0x92
c000b3d1:	bb 40 00 00 00       	mov    ebx,0x40
c000b3d6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b3da:	89 da                	mov    edx,ebx
c000b3dc:	d3 e2                	shl    edx,cl
c000b3de:	89 f1                	mov    ecx,esi
c000b3e0:	f7 d2                	not    edx
c000b3e2:	d3 e3                	shl    ebx,cl
c000b3e4:	21 d0                	and    eax,edx
c000b3e6:	09 d8                	or     eax,ebx
c000b3e8:	e6 92                	out    0x92,al
c000b3ea:	5b                   	pop    ebx
c000b3eb:	5e                   	pop    esi
c000b3ec:	c3                   	ret    
c000b3ed:	90                   	nop

c000b3ee <GDTEntry::setBase(unsigned int)>:
c000b3ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b3f2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b3f6:	89 c1                	mov    ecx,eax
c000b3f8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b3fc:	c1 e9 10             	shr    ecx,0x10
c000b3ff:	c1 e8 18             	shr    eax,0x18
c000b402:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b405:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b408:	c3                   	ret    
c000b409:	90                   	nop

c000b40a <GDTEntry::setLimit(unsigned int)>:
c000b40a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b40e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b412:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b415:	66 89 01             	mov    WORD PTR [ecx],ax
c000b418:	83 e2 f0             	and    edx,0xfffffff0
c000b41b:	c1 e8 10             	shr    eax,0x10
c000b41e:	83 e0 0f             	and    eax,0xf
c000b421:	09 d0                	or     eax,edx
c000b423:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b426:	c3                   	ret    
c000b427:	90                   	nop

c000b428 <GDT::GDT()>:
c000b428:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b42c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b432:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b436:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b43c:	90                   	nop
c000b43d:	c3                   	ret    

c000b43e <GDT::addEntry(GDTEntry)>:
c000b43e:	53                   	push   ebx
c000b43f:	83 ec 0c             	sub    esp,0xc
c000b442:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b446:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b448:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b44f:	52                   	push   edx
c000b450:	50                   	push   eax
c000b451:	68 dc fd 01 c0       	push   0xc001fddc
c000b456:	e8 db 06 00 00       	call   c000bb36 <kprintf(char const*, ...)>
c000b45b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b45d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b461:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b465:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b469:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b46d:	8d 50 01             	lea    edx,[eax+0x1]
c000b470:	c1 e0 03             	shl    eax,0x3
c000b473:	89 13                	mov    DWORD PTR [ebx],edx
c000b475:	83 c4 18             	add    esp,0x18
c000b478:	5b                   	pop    ebx
c000b479:	c3                   	ret    

c000b47a <GDT::getNumberOfEntries()>:
c000b47a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b47e:	8b 00                	mov    eax,DWORD PTR [eax]
c000b480:	c3                   	ret    
c000b481:	90                   	nop

c000b482 <GDT::flush()>:
c000b482:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b486:	8b 10                	mov    edx,DWORD PTR [eax]
c000b488:	83 c0 04             	add    eax,0x4
c000b48b:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b492:	a3 d2 2e 02 c0       	mov    ds:0xc0022ed2,eax
c000b497:	66 89 15 d0 2e 02 c0 	mov    WORD PTR ds:0xc0022ed0,dx
c000b49e:	e9 90 4e ff ff       	jmp    c0000333 <loadGDT>
c000b4a3:	90                   	nop

c000b4a4 <GDT::setup()>:
c000b4a4:	55                   	push   ebp
c000b4a5:	57                   	push   edi
c000b4a6:	56                   	push   esi
c000b4a7:	53                   	push   ebx
c000b4a8:	83 ec 3c             	sub    esp,0x3c
c000b4ab:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b4af:	6a 00                	push   0x0
c000b4b1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b4b5:	53                   	push   ebx
c000b4b6:	e8 33 ff ff ff       	call   c000b3ee <GDTEntry::setBase(unsigned int)>
c000b4bb:	6a 00                	push   0x0
c000b4bd:	53                   	push   ebx
c000b4be:	e8 47 ff ff ff       	call   c000b40a <GDTEntry::setLimit(unsigned int)>
c000b4c3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b4cb:	6a 00                	push   0x0
c000b4cd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b4d1:	53                   	push   ebx
c000b4d2:	e8 17 ff ff ff       	call   c000b3ee <GDTEntry::setBase(unsigned int)>
c000b4d7:	68 ff ff ff 00       	push   0xffffff
c000b4dc:	53                   	push   ebx
c000b4dd:	e8 28 ff ff ff       	call   c000b40a <GDTEntry::setLimit(unsigned int)>
c000b4e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b4e6:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b4eb:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b4f0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b4f4:	83 c4 20             	add    esp,0x20
c000b4f7:	6a 00                	push   0x0
c000b4f9:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b4fd:	53                   	push   ebx
c000b4fe:	e8 eb fe ff ff       	call   c000b3ee <GDTEntry::setBase(unsigned int)>
c000b503:	68 ff ff ff 00       	push   0xffffff
c000b508:	53                   	push   ebx
c000b509:	e8 fc fe ff ff       	call   c000b40a <GDTEntry::setLimit(unsigned int)>
c000b50e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b512:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b516:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b51a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b51e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b522:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b527:	0d 00 92 c0 00       	or     eax,0xc09200
c000b52c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b530:	89 d8                	mov    eax,ebx
c000b532:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b536:	80 cc 60             	or     ah,0x60
c000b539:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b53d:	83 c4 0c             	add    esp,0xc
c000b540:	89 f8                	mov    eax,edi
c000b542:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b546:	80 cc 60             	or     ah,0x60
c000b549:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b54d:	89 c7                	mov    edi,eax
c000b54f:	55                   	push   ebp
c000b550:	e8 e9 fe ff ff       	call   c000b43e <GDT::addEntry(GDTEntry)>
c000b555:	83 c4 0c             	add    esp,0xc
c000b558:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b55c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b560:	55                   	push   ebp
c000b561:	e8 d8 fe ff ff       	call   c000b43e <GDT::addEntry(GDTEntry)>
c000b566:	83 c4 0c             	add    esp,0xc
c000b569:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b56d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b571:	55                   	push   ebp
c000b572:	e8 c7 fe ff ff       	call   c000b43e <GDT::addEntry(GDTEntry)>
c000b577:	83 c4 0c             	add    esp,0xc
c000b57a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b57e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b582:	53                   	push   ebx
c000b583:	51                   	push   ecx
c000b584:	55                   	push   ebp
c000b585:	e8 b4 fe ff ff       	call   c000b43e <GDT::addEntry(GDTEntry)>
c000b58a:	83 c4 0c             	add    esp,0xc
c000b58d:	57                   	push   edi
c000b58e:	56                   	push   esi
c000b58f:	55                   	push   ebp
c000b590:	e8 a9 fe ff ff       	call   c000b43e <GDT::addEntry(GDTEntry)>
c000b595:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b598:	e8 e5 fe ff ff       	call   c000b482 <GDT::flush()>
c000b59d:	83 c4 4c             	add    esp,0x4c
c000b5a0:	5b                   	pop    ebx
c000b5a1:	5e                   	pop    esi
c000b5a2:	5f                   	pop    edi
c000b5a3:	5d                   	pop    ebp
c000b5a4:	c3                   	ret    

c000b5a5 <idleFunction(void*)>:
c000b5a5:	53                   	push   ebx
c000b5a6:	83 ec 08             	sub    esp,0x8
c000b5a9:	e8 5c c0 00 00       	call   c001760a <unlockScheduler()>
c000b5ae:	e8 b7 89 00 00       	call   c0013f6a <thisCPU()>
c000b5b3:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b5ba:	74 41                	je     c000b5fd <idleFunction(void*)+0x58>
c000b5bc:	a1 c8 2e 02 c0       	mov    eax,ds:0xc0022ec8
c000b5c1:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5c8:	74 33                	je     c000b5fd <idleFunction(void*)+0x58>
c000b5ca:	31 db                	xor    ebx,ebx
c000b5cc:	52                   	push   edx
c000b5cd:	52                   	push   edx
c000b5ce:	68 e1 00 00 00       	push   0xe1
c000b5d3:	50                   	push   eax
c000b5d4:	e8 ed fb ff ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c000b5d9:	53                   	push   ebx
c000b5da:	83 e0 02             	and    eax,0x2
c000b5dd:	50                   	push   eax
c000b5de:	68 e1 00 00 00       	push   0xe1
c000b5e3:	ff 35 c8 2e 02 c0    	push   DWORD PTR ds:0xc0022ec8
c000b5e9:	e8 04 fc ff ff       	call   c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>
c000b5ee:	83 c4 20             	add    esp,0x20
c000b5f1:	e8 5a 4b ff ff       	call   c0000150 <doTPAUSE>
c000b5f6:	e8 95 2d 01 00       	call   c001e390 <idleCommon()>
c000b5fb:	eb f4                	jmp    c000b5f1 <idleFunction(void*)+0x4c>
c000b5fd:	fb                   	sti    
c000b5fe:	f4                   	hlt    
c000b5ff:	e8 8c 2d 01 00       	call   c001e390 <idleCommon()>
c000b604:	eb f7                	jmp    c000b5fd <idleFunction(void*)+0x58>

c000b606 <IDTEntry::IDTEntry(bool)>:
c000b606:	83 ec 04             	sub    esp,0x4
c000b609:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b60d:	88 04 24             	mov    BYTE PTR [esp],al
c000b610:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b614:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b61a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b61e:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b622:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b626:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b629:	83 e2 f0             	and    edx,0xfffffff0
c000b62c:	83 ca 0e             	or     edx,0xe
c000b62f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b632:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b636:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b639:	83 e2 ef             	and    edx,0xffffffef
c000b63c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b63f:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000b643:	74 04                	je     c000b649 <IDTEntry::IDTEntry(bool)+0x43>
c000b645:	b2 03                	mov    dl,0x3
c000b647:	eb 02                	jmp    c000b64b <IDTEntry::IDTEntry(bool)+0x45>
c000b649:	b2 00                	mov    dl,0x0
c000b64b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b64f:	83 e2 03             	and    edx,0x3
c000b652:	88 d1                	mov    cl,dl
c000b654:	c1 e1 05             	shl    ecx,0x5
c000b657:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b65a:	83 e2 9f             	and    edx,0xffffff9f
c000b65d:	09 ca                	or     edx,ecx
c000b65f:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b662:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b666:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b669:	83 ca 80             	or     edx,0xffffff80
c000b66c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b66f:	90                   	nop
c000b670:	83 c4 04             	add    esp,0x4
c000b673:	c3                   	ret    

c000b674 <IDTEntry::setOffset(unsigned int)>:
c000b674:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b678:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b67c:	66 89 02             	mov    WORD PTR [edx],ax
c000b67f:	c1 e8 10             	shr    eax,0x10
c000b682:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000b686:	c3                   	ret    
c000b687:	90                   	nop

c000b688 <IDT::IDT()>:
c000b688:	90                   	nop
c000b689:	c3                   	ret    

c000b68a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000b68a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b68e:	83 c0 30             	add    eax,0x30
c000b691:	c3                   	ret    

c000b692 <IDT::addEntry(IDTEntry, int)>:
c000b692:	53                   	push   ebx
c000b693:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b697:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b69b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b69f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b6a3:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000b6a6:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000b6aa:	5b                   	pop    ebx
c000b6ab:	c3                   	ret    

c000b6ac <IDT::addEntry(int, void (*)(), bool)>:
c000b6ac:	53                   	push   ebx
c000b6ad:	83 ec 10             	sub    esp,0x10
c000b6b0:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000b6b5:	50                   	push   eax
c000b6b6:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000b6ba:	53                   	push   ebx
c000b6bb:	e8 46 ff ff ff       	call   c000b606 <IDTEntry::IDTEntry(bool)>
c000b6c0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b6c4:	53                   	push   ebx
c000b6c5:	e8 aa ff ff ff       	call   c000b674 <IDTEntry::setOffset(unsigned int)>
c000b6ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b6ce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b6d2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b6d6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b6da:	e8 b3 ff ff ff       	call   c000b692 <IDT::addEntry(IDTEntry, int)>
c000b6df:	83 c4 30             	add    esp,0x30
c000b6e2:	5b                   	pop    ebx
c000b6e3:	c3                   	ret    

c000b6e4 <IDT::flush()>:
c000b6e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6e8:	66 c7 05 d8 2e 02 c0 ff 07 	mov    WORD PTR ds:0xc0022ed8,0x7ff
c000b6f1:	a3 da 2e 02 c0       	mov    ds:0xc0022eda,eax
c000b6f6:	0f 01 1d d8 2e 02 c0 	lidtd  ds:0xc0022ed8
c000b6fd:	c3                   	ret    

c000b6fe <IDT::setup()>:
c000b6fe:	57                   	push   edi
c000b6ff:	56                   	push   esi
c000b700:	53                   	push   ebx
c000b701:	83 ec 10             	sub    esp,0x10
c000b704:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b708:	6a 00                	push   0x0
c000b70a:	68 53 03 00 c0       	push   0xc0000353
c000b70f:	6a 00                	push   0x0
c000b711:	53                   	push   ebx
c000b712:	e8 95 ff ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b717:	6a 00                	push   0x0
c000b719:	68 63 03 00 c0       	push   0xc0000363
c000b71e:	6a 01                	push   0x1
c000b720:	53                   	push   ebx
c000b721:	e8 86 ff ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b726:	83 c4 20             	add    esp,0x20
c000b729:	6a 00                	push   0x0
c000b72b:	68 6d 03 00 c0       	push   0xc000036d
c000b730:	6a 02                	push   0x2
c000b732:	53                   	push   ebx
c000b733:	e8 74 ff ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b738:	6a 00                	push   0x0
c000b73a:	68 77 03 00 c0       	push   0xc0000377
c000b73f:	6a 03                	push   0x3
c000b741:	53                   	push   ebx
c000b742:	e8 65 ff ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b747:	83 c4 20             	add    esp,0x20
c000b74a:	6a 00                	push   0x0
c000b74c:	68 81 03 00 c0       	push   0xc0000381
c000b751:	6a 04                	push   0x4
c000b753:	53                   	push   ebx
c000b754:	e8 53 ff ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b759:	6a 00                	push   0x0
c000b75b:	68 8b 03 00 c0       	push   0xc000038b
c000b760:	6a 05                	push   0x5
c000b762:	53                   	push   ebx
c000b763:	e8 44 ff ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b768:	83 c4 20             	add    esp,0x20
c000b76b:	6a 00                	push   0x0
c000b76d:	68 95 03 00 c0       	push   0xc0000395
c000b772:	6a 06                	push   0x6
c000b774:	53                   	push   ebx
c000b775:	e8 32 ff ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b77a:	6a 00                	push   0x0
c000b77c:	68 9f 03 00 c0       	push   0xc000039f
c000b781:	6a 07                	push   0x7
c000b783:	53                   	push   ebx
c000b784:	e8 23 ff ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b789:	83 c4 20             	add    esp,0x20
c000b78c:	6a 00                	push   0x0
c000b78e:	68 a9 03 00 c0       	push   0xc00003a9
c000b793:	6a 08                	push   0x8
c000b795:	53                   	push   ebx
c000b796:	e8 11 ff ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b79b:	6a 00                	push   0x0
c000b79d:	68 b1 03 00 c0       	push   0xc00003b1
c000b7a2:	6a 09                	push   0x9
c000b7a4:	53                   	push   ebx
c000b7a5:	e8 02 ff ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b7aa:	83 c4 20             	add    esp,0x20
c000b7ad:	6a 00                	push   0x0
c000b7af:	68 bb 03 00 c0       	push   0xc00003bb
c000b7b4:	6a 0a                	push   0xa
c000b7b6:	53                   	push   ebx
c000b7b7:	e8 f0 fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b7bc:	6a 00                	push   0x0
c000b7be:	68 c3 03 00 c0       	push   0xc00003c3
c000b7c3:	6a 0b                	push   0xb
c000b7c5:	53                   	push   ebx
c000b7c6:	e8 e1 fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b7cb:	83 c4 20             	add    esp,0x20
c000b7ce:	6a 00                	push   0x0
c000b7d0:	68 cb 03 00 c0       	push   0xc00003cb
c000b7d5:	6a 0c                	push   0xc
c000b7d7:	53                   	push   ebx
c000b7d8:	e8 cf fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b7dd:	6a 00                	push   0x0
c000b7df:	68 d3 03 00 c0       	push   0xc00003d3
c000b7e4:	6a 0d                	push   0xd
c000b7e6:	53                   	push   ebx
c000b7e7:	e8 c0 fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b7ec:	83 c4 20             	add    esp,0x20
c000b7ef:	6a 00                	push   0x0
c000b7f1:	68 db 03 00 c0       	push   0xc00003db
c000b7f6:	6a 0e                	push   0xe
c000b7f8:	53                   	push   ebx
c000b7f9:	e8 ae fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b7fe:	6a 00                	push   0x0
c000b800:	68 e3 03 00 c0       	push   0xc00003e3
c000b805:	6a 0f                	push   0xf
c000b807:	53                   	push   ebx
c000b808:	e8 9f fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b80d:	83 c4 20             	add    esp,0x20
c000b810:	6a 00                	push   0x0
c000b812:	68 ed 03 00 c0       	push   0xc00003ed
c000b817:	6a 10                	push   0x10
c000b819:	53                   	push   ebx
c000b81a:	e8 8d fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b81f:	6a 00                	push   0x0
c000b821:	68 f7 03 00 c0       	push   0xc00003f7
c000b826:	6a 11                	push   0x11
c000b828:	53                   	push   ebx
c000b829:	e8 7e fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b82e:	83 c4 20             	add    esp,0x20
c000b831:	6a 00                	push   0x0
c000b833:	68 01 04 00 c0       	push   0xc0000401
c000b838:	6a 12                	push   0x12
c000b83a:	53                   	push   ebx
c000b83b:	e8 6c fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b840:	6a 01                	push   0x1
c000b842:	68 0b 04 00 c0       	push   0xc000040b
c000b847:	6a 60                	push   0x60
c000b849:	53                   	push   ebx
c000b84a:	e8 5d fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b84f:	83 c4 20             	add    esp,0x20
c000b852:	6a 00                	push   0x0
c000b854:	68 15 04 00 c0       	push   0xc0000415
c000b859:	6a 20                	push   0x20
c000b85b:	53                   	push   ebx
c000b85c:	e8 4b fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b861:	6a 00                	push   0x0
c000b863:	68 1f 04 00 c0       	push   0xc000041f
c000b868:	6a 21                	push   0x21
c000b86a:	53                   	push   ebx
c000b86b:	e8 3c fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b870:	83 c4 20             	add    esp,0x20
c000b873:	6a 00                	push   0x0
c000b875:	68 29 04 00 c0       	push   0xc0000429
c000b87a:	6a 22                	push   0x22
c000b87c:	53                   	push   ebx
c000b87d:	e8 2a fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b882:	6a 00                	push   0x0
c000b884:	68 33 04 00 c0       	push   0xc0000433
c000b889:	6a 23                	push   0x23
c000b88b:	53                   	push   ebx
c000b88c:	e8 1b fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b891:	83 c4 20             	add    esp,0x20
c000b894:	6a 00                	push   0x0
c000b896:	68 3d 04 00 c0       	push   0xc000043d
c000b89b:	6a 24                	push   0x24
c000b89d:	53                   	push   ebx
c000b89e:	e8 09 fe ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b8a3:	6a 00                	push   0x0
c000b8a5:	68 47 04 00 c0       	push   0xc0000447
c000b8aa:	6a 25                	push   0x25
c000b8ac:	53                   	push   ebx
c000b8ad:	e8 fa fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b8b2:	83 c4 20             	add    esp,0x20
c000b8b5:	6a 00                	push   0x0
c000b8b7:	68 51 04 00 c0       	push   0xc0000451
c000b8bc:	6a 26                	push   0x26
c000b8be:	53                   	push   ebx
c000b8bf:	e8 e8 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b8c4:	6a 00                	push   0x0
c000b8c6:	68 5b 04 00 c0       	push   0xc000045b
c000b8cb:	6a 27                	push   0x27
c000b8cd:	53                   	push   ebx
c000b8ce:	e8 d9 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b8d3:	83 c4 20             	add    esp,0x20
c000b8d6:	6a 00                	push   0x0
c000b8d8:	68 65 04 00 c0       	push   0xc0000465
c000b8dd:	6a 28                	push   0x28
c000b8df:	53                   	push   ebx
c000b8e0:	e8 c7 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b8e5:	6a 00                	push   0x0
c000b8e7:	68 6f 04 00 c0       	push   0xc000046f
c000b8ec:	6a 29                	push   0x29
c000b8ee:	53                   	push   ebx
c000b8ef:	e8 b8 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b8f4:	83 c4 20             	add    esp,0x20
c000b8f7:	6a 00                	push   0x0
c000b8f9:	68 79 04 00 c0       	push   0xc0000479
c000b8fe:	6a 2a                	push   0x2a
c000b900:	53                   	push   ebx
c000b901:	e8 a6 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b906:	6a 00                	push   0x0
c000b908:	68 83 04 00 c0       	push   0xc0000483
c000b90d:	6a 2b                	push   0x2b
c000b90f:	53                   	push   ebx
c000b910:	e8 97 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b915:	83 c4 20             	add    esp,0x20
c000b918:	6a 00                	push   0x0
c000b91a:	68 8d 04 00 c0       	push   0xc000048d
c000b91f:	6a 2c                	push   0x2c
c000b921:	53                   	push   ebx
c000b922:	e8 85 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b927:	6a 00                	push   0x0
c000b929:	68 97 04 00 c0       	push   0xc0000497
c000b92e:	6a 2d                	push   0x2d
c000b930:	53                   	push   ebx
c000b931:	e8 76 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b936:	83 c4 20             	add    esp,0x20
c000b939:	6a 00                	push   0x0
c000b93b:	68 a1 04 00 c0       	push   0xc00004a1
c000b940:	6a 2e                	push   0x2e
c000b942:	53                   	push   ebx
c000b943:	e8 64 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b948:	6a 00                	push   0x0
c000b94a:	68 ab 04 00 c0       	push   0xc00004ab
c000b94f:	6a 2f                	push   0x2f
c000b951:	53                   	push   ebx
c000b952:	e8 55 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b957:	83 c4 20             	add    esp,0x20
c000b95a:	6a 00                	push   0x0
c000b95c:	68 b5 04 00 c0       	push   0xc00004b5
c000b961:	6a 30                	push   0x30
c000b963:	53                   	push   ebx
c000b964:	e8 43 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b969:	6a 00                	push   0x0
c000b96b:	68 bf 04 00 c0       	push   0xc00004bf
c000b970:	6a 31                	push   0x31
c000b972:	53                   	push   ebx
c000b973:	e8 34 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b978:	83 c4 20             	add    esp,0x20
c000b97b:	6a 00                	push   0x0
c000b97d:	68 c9 04 00 c0       	push   0xc00004c9
c000b982:	6a 32                	push   0x32
c000b984:	53                   	push   ebx
c000b985:	e8 22 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b98a:	6a 00                	push   0x0
c000b98c:	68 d3 04 00 c0       	push   0xc00004d3
c000b991:	6a 33                	push   0x33
c000b993:	53                   	push   ebx
c000b994:	e8 13 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b999:	83 c4 20             	add    esp,0x20
c000b99c:	6a 00                	push   0x0
c000b99e:	68 dd 04 00 c0       	push   0xc00004dd
c000b9a3:	6a 34                	push   0x34
c000b9a5:	53                   	push   ebx
c000b9a6:	e8 01 fd ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b9ab:	6a 00                	push   0x0
c000b9ad:	68 e7 04 00 c0       	push   0xc00004e7
c000b9b2:	6a 35                	push   0x35
c000b9b4:	53                   	push   ebx
c000b9b5:	e8 f2 fc ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b9ba:	83 c4 20             	add    esp,0x20
c000b9bd:	6a 00                	push   0x0
c000b9bf:	68 f1 04 00 c0       	push   0xc00004f1
c000b9c4:	6a 36                	push   0x36
c000b9c6:	53                   	push   ebx
c000b9c7:	e8 e0 fc ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b9cc:	6a 00                	push   0x0
c000b9ce:	68 fb 04 00 c0       	push   0xc00004fb
c000b9d3:	6a 37                	push   0x37
c000b9d5:	53                   	push   ebx
c000b9d6:	e8 d1 fc ff ff       	call   c000b6ac <IDT::addEntry(int, void (*)(), bool)>
c000b9db:	83 c4 20             	add    esp,0x20
c000b9de:	e8 24 28 00 00       	call   c000e207 <Virt::getAKernelVAS()>
c000b9e3:	52                   	push   edx
c000b9e4:	6a 03                	push   0x3
c000b9e6:	6a 02                	push   0x2
c000b9e8:	50                   	push   eax
c000b9e9:	e8 c0 2d 00 00       	call   c000e7ae <VAS::allocatePages(int, int)>
c000b9ee:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b9f5:	89 c6                	mov    esi,eax
c000b9f7:	e8 0c 38 00 00       	call   c000f208 <operator new(unsigned long)>
c000b9fc:	81 c6 00 20 00 00    	add    esi,0x2000
c000ba02:	89 04 24             	mov    DWORD PTR [esp],eax
c000ba05:	89 c7                	mov    edi,eax
c000ba07:	e8 52 21 00 00       	call   c000db5e <TSS::TSS()>
c000ba0c:	83 c4 0c             	add    esp,0xc
c000ba0f:	68 a9 03 00 c0       	push   0xc00003a9
c000ba14:	56                   	push   esi
c000ba15:	57                   	push   edi
c000ba16:	e8 83 21 00 00       	call   c000db9e <TSS::setup(unsigned long, unsigned long)>
c000ba1b:	59                   	pop    ecx
c000ba1c:	89 c6                	mov    esi,eax
c000ba1e:	5f                   	pop    edi
c000ba1f:	6a 00                	push   0x0
c000ba21:	8d 44 24 14          	lea    eax,[esp+0x14]
c000ba25:	50                   	push   eax
c000ba26:	e8 db fb ff ff       	call   c000b606 <IDTEntry::IDTEntry(bool)>
c000ba2b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ba2f:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000ba34:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000ba3b:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000ba41:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ba45:	80 ce 05             	or     dh,0x5
c000ba48:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000ba4b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba4f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ba53:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000ba56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ba59:	e8 86 fc ff ff       	call   c000b6e4 <IDT::flush()>
c000ba5e:	83 c4 20             	add    esp,0x20
c000ba61:	5b                   	pop    ebx
c000ba62:	5e                   	pop    esi
c000ba63:	5f                   	pop    edi
c000ba64:	c3                   	ret    

c000ba65 <stringifyxWithBase(unsigned int, char*, int)>:
c000ba65:	57                   	push   edi
c000ba66:	b9 3f 00 00 00       	mov    ecx,0x3f
c000ba6b:	56                   	push   esi
c000ba6c:	be f8 fd 01 c0       	mov    esi,0xc001fdf8
c000ba71:	53                   	push   ebx
c000ba72:	83 ec 40             	sub    esp,0x40
c000ba75:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000ba79:	8d 7c 24 01          	lea    edi,[esp+0x1]
c000ba7d:	fc                   	cld    
c000ba7e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ba80:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000ba84:	83 f9 3e             	cmp    ecx,0x3e
c000ba87:	7e 05                	jle    c000ba8e <stringifyxWithBase(unsigned int, char*, int)+0x29>
c000ba89:	b9 3e 00 00 00       	mov    ecx,0x3e
c000ba8e:	89 df                	mov    edi,ebx
c000ba90:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000ba94:	eb 02                	jmp    c000ba98 <stringifyxWithBase(unsigned int, char*, int)+0x33>
c000ba96:	89 c7                	mov    edi,eax
c000ba98:	31 d2                	xor    edx,edx
c000ba9a:	46                   	inc    esi
c000ba9b:	89 f8                	mov    eax,edi
c000ba9d:	f7 f1                	div    ecx
c000ba9f:	39 cf                	cmp    edi,ecx
c000baa1:	73 f3                	jae    c000ba96 <stringifyxWithBase(unsigned int, char*, int)+0x31>
c000baa3:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000baa6:	eb 02                	jmp    c000baaa <stringifyxWithBase(unsigned int, char*, int)+0x45>
c000baa8:	89 c3                	mov    ebx,eax
c000baaa:	31 d2                	xor    edx,edx
c000baac:	4e                   	dec    esi
c000baad:	89 d8                	mov    eax,ebx
c000baaf:	f7 f1                	div    ecx
c000bab1:	39 cb                	cmp    ebx,ecx
c000bab3:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000bab7:	88 16                	mov    BYTE PTR [esi],dl
c000bab9:	73 ed                	jae    c000baa8 <stringifyxWithBase(unsigned int, char*, int)+0x43>
c000babb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000babf:	83 c4 40             	add    esp,0x40
c000bac2:	5b                   	pop    ebx
c000bac3:	5e                   	pop    esi
c000bac4:	5f                   	pop    edi
c000bac5:	c3                   	ret    

c000bac6 <logc(char)>:
c000bac6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000baca:	ba fd 03 00 00       	mov    edx,0x3fd
c000bacf:	ec                   	in     al,dx
c000bad0:	a8 20                	test   al,0x20
c000bad2:	74 fb                	je     c000bacf <logc(char)+0x9>
c000bad4:	ba f8 03 00 00       	mov    edx,0x3f8
c000bad9:	88 c8                	mov    al,cl
c000badb:	ee                   	out    dx,al
c000badc:	c3                   	ret    

c000badd <logs(char*)>:
c000badd:	53                   	push   ebx
c000bade:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000bae2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000bae5:	84 c0                	test   al,al
c000bae7:	74 0f                	je     c000baf8 <logs(char*)+0x1b>
c000bae9:	50                   	push   eax
c000baea:	43                   	inc    ebx
c000baeb:	e8 d6 ff ff ff       	call   c000bac6 <logc(char)>
c000baf0:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000baf3:	5a                   	pop    edx
c000baf4:	84 c0                	test   al,al
c000baf6:	75 f1                	jne    c000bae9 <logs(char*)+0xc>
c000baf8:	5b                   	pop    ebx
c000baf9:	c3                   	ret    

c000bafa <logWriteInt(unsigned int)>:
c000bafa:	83 ec 10             	sub    esp,0x10
c000bafd:	6a 0a                	push   0xa
c000baff:	8d 44 24 08          	lea    eax,[esp+0x8]
c000bb03:	50                   	push   eax
c000bb04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb08:	e8 58 ff ff ff       	call   c000ba65 <stringifyxWithBase(unsigned int, char*, int)>
c000bb0d:	50                   	push   eax
c000bb0e:	e8 ca ff ff ff       	call   c000badd <logs(char*)>
c000bb13:	83 c4 20             	add    esp,0x20
c000bb16:	c3                   	ret    

c000bb17 <logWriteIntBase(unsigned int, int)>:
c000bb17:	83 ec 10             	sub    esp,0x10
c000bb1a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb1e:	8d 44 24 08          	lea    eax,[esp+0x8]
c000bb22:	50                   	push   eax
c000bb23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb27:	e8 39 ff ff ff       	call   c000ba65 <stringifyxWithBase(unsigned int, char*, int)>
c000bb2c:	50                   	push   eax
c000bb2d:	e8 ab ff ff ff       	call   c000badd <logs(char*)>
c000bb32:	83 c4 20             	add    esp,0x20
c000bb35:	c3                   	ret    

c000bb36 <kprintf(char const*, ...)>:
c000bb36:	55                   	push   ebp
c000bb37:	57                   	push   edi
c000bb38:	56                   	push   esi
c000bb39:	53                   	push   ebx
c000bb3a:	83 ec 0c             	sub    esp,0xc
c000bb3d:	8d 44 24 24          	lea    eax,[esp+0x24]
c000bb41:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000bb45:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bb49:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000bb4c:	84 c0                	test   al,al
c000bb4e:	74 4a                	je     c000bb9a <kprintf(char const*, ...)+0x64>
c000bb50:	31 db                	xor    ebx,ebx
c000bb52:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000bb55:	3c 25                	cmp    al,0x25
c000bb57:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c000bb5a:	0f 85 e4 00 00 00    	jne    c000bc44 <kprintf(char const*, ...)+0x10e>
c000bb60:	83 c3 02             	add    ebx,0x2
c000bb63:	8a 07                	mov    al,BYTE PTR [edi]
c000bb65:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c000bb68:	83 e8 25             	sub    eax,0x25
c000bb6b:	3c 53                	cmp    al,0x53
c000bb6d:	0f 87 ba 00 00 00    	ja     c000bc2d <kprintf(char const*, ...)+0xf7>
c000bb73:	0f b6 c0             	movzx  eax,al
c000bb76:	ff 24 85 4c ff 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe00b4]
c000bb7d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000bb81:	89 c8                	mov    eax,ecx
c000bb83:	83 c1 04             	add    ecx,0x4
c000bb86:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000bb8a:	ff 30                	push   DWORD PTR [eax]
c000bb8c:	e8 4c ff ff ff       	call   c000badd <logs(char*)>
c000bb91:	58                   	pop    eax
c000bb92:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000bb96:	84 c0                	test   al,al
c000bb98:	75 b8                	jne    c000bb52 <kprintf(char const*, ...)+0x1c>
c000bb9a:	83 c4 0c             	add    esp,0xc
c000bb9d:	5b                   	pop    ebx
c000bb9e:	5e                   	pop    esi
c000bb9f:	5f                   	pop    edi
c000bba0:	5d                   	pop    ebp
c000bba1:	c3                   	ret    
c000bba2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bba6:	89 d0                	mov    eax,edx
c000bba8:	83 c2 04             	add    edx,0x4
c000bbab:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bbaf:	ff 30                	push   DWORD PTR [eax]
c000bbb1:	e8 44 ff ff ff       	call   c000bafa <logWriteInt(unsigned int)>
c000bbb6:	58                   	pop    eax
c000bbb7:	eb d9                	jmp    c000bb92 <kprintf(char const*, ...)+0x5c>
c000bbb9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bbbd:	89 d0                	mov    eax,edx
c000bbbf:	83 c2 04             	add    edx,0x4
c000bbc2:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000bbc5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bbc9:	50                   	push   eax
c000bbca:	e8 f7 fe ff ff       	call   c000bac6 <logc(char)>
c000bbcf:	58                   	pop    eax
c000bbd0:	eb c0                	jmp    c000bb92 <kprintf(char const*, ...)+0x5c>
c000bbd2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000bbd6:	89 c8                	mov    eax,ecx
c000bbd8:	83 c1 04             	add    ecx,0x4
c000bbdb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000bbdf:	ff 30                	push   DWORD PTR [eax]
c000bbe1:	e8 14 ff ff ff       	call   c000bafa <logWriteInt(unsigned int)>
c000bbe6:	5f                   	pop    edi
c000bbe7:	eb a9                	jmp    c000bb92 <kprintf(char const*, ...)+0x5c>
c000bbe9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000bbed:	89 c8                	mov    eax,ecx
c000bbef:	83 c1 04             	add    ecx,0x4
c000bbf2:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000bbf6:	6a 10                	push   0x10
c000bbf8:	ff 30                	push   DWORD PTR [eax]
c000bbfa:	e8 18 ff ff ff       	call   c000bb17 <logWriteIntBase(unsigned int, int)>
c000bbff:	59                   	pop    ecx
c000bc00:	5f                   	pop    edi
c000bc01:	eb 8f                	jmp    c000bb92 <kprintf(char const*, ...)+0x5c>
c000bc03:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bc07:	89 d0                	mov    eax,edx
c000bc09:	83 c2 08             	add    edx,0x8
c000bc0c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000bc10:	6a 10                	push   0x10
c000bc12:	ff 30                	push   DWORD PTR [eax]
c000bc14:	e8 fe fe ff ff       	call   c000bb17 <logWriteIntBase(unsigned int, int)>
c000bc19:	58                   	pop    eax
c000bc1a:	5a                   	pop    edx
c000bc1b:	e9 72 ff ff ff       	jmp    c000bb92 <kprintf(char const*, ...)+0x5c>
c000bc20:	6a 25                	push   0x25
c000bc22:	e8 9f fe ff ff       	call   c000bac6 <logc(char)>
c000bc27:	58                   	pop    eax
c000bc28:	e9 65 ff ff ff       	jmp    c000bb92 <kprintf(char const*, ...)+0x5c>
c000bc2d:	6a 25                	push   0x25
c000bc2f:	e8 92 fe ff ff       	call   c000bac6 <logc(char)>
c000bc34:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000bc37:	50                   	push   eax
c000bc38:	e8 89 fe ff ff       	call   c000bac6 <logc(char)>
c000bc3d:	5a                   	pop    edx
c000bc3e:	59                   	pop    ecx
c000bc3f:	e9 4e ff ff ff       	jmp    c000bb92 <kprintf(char const*, ...)+0x5c>
c000bc44:	50                   	push   eax
c000bc45:	89 eb                	mov    ebx,ebp
c000bc47:	e8 7a fe ff ff       	call   c000bac6 <logc(char)>
c000bc4c:	89 fd                	mov    ebp,edi
c000bc4e:	58                   	pop    eax
c000bc4f:	e9 3e ff ff ff       	jmp    c000bb92 <kprintf(char const*, ...)+0x5c>

c000bc54 <panic(char const*)>:
c000bc54:	55                   	push   ebp
c000bc55:	89 e5                	mov    ebp,esp
c000bc57:	53                   	push   ebx
c000bc58:	50                   	push   eax
c000bc59:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000bc5c:	fa                   	cli    
c000bc5d:	c6 05 de 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022ede,0x1
c000bc64:	53                   	push   ebx
c000bc65:	c6 05 00 23 02 c0 00 	mov    BYTE PTR ds:0xc0022300,0x0
c000bc6c:	68 9c 00 02 c0       	push   0xc002009c
c000bc71:	e8 c0 fe ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000bc76:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000bc7b:	52                   	push   edx
c000bc7c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000bc82:	e8 58 17 00 00       	call   c000d3df <setActiveTerminal(VgaText*)>
c000bc87:	83 c4 0c             	add    esp,0xc
c000bc8a:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000bc8f:	6a 01                	push   0x1
c000bc91:	6a 0f                	push   0xf
c000bc93:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000bc99:	e8 80 11 00 00       	call   c000ce1e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000bc9e:	59                   	pop    ecx
c000bc9f:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000bca4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000bcaa:	e8 d1 19 00 00       	call   c000d680 <VgaText::clearScreen()>
c000bcaf:	58                   	pop    eax
c000bcb0:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000bcb5:	5a                   	pop    edx
c000bcb6:	68 b5 00 02 c0       	push   0xc00200b5
c000bcbb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000bcc1:	e8 38 1b 00 00       	call   c000d7fe <VgaText::puts(char const*)>
c000bcc6:	59                   	pop    ecx
c000bcc7:	58                   	pop    eax
c000bcc8:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000bccd:	68 38 fe 01 c0       	push   0xc001fe38
c000bcd2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000bcd8:	e8 21 1b 00 00       	call   c000d7fe <VgaText::puts(char const*)>
c000bcdd:	58                   	pop    eax
c000bcde:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000bce3:	5a                   	pop    edx
c000bce4:	68 d1 00 02 c0       	push   0xc00200d1
c000bce9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000bcef:	e8 0a 1b 00 00       	call   c000d7fe <VgaText::puts(char const*)>
c000bcf4:	59                   	pop    ecx
c000bcf5:	58                   	pop    eax
c000bcf6:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000bcfb:	53                   	push   ebx
c000bcfc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000bd02:	e8 f7 1a 00 00       	call   c000d7fe <VgaText::puts(char const*)>
c000bd07:	58                   	pop    eax
c000bd08:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000bd0d:	5a                   	pop    edx
c000bd0e:	68 f1 00 02 c0       	push   0xc00200f1
c000bd13:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000bd19:	e8 e0 1a 00 00       	call   c000d7fe <VgaText::puts(char const*)>
c000bd1e:	59                   	pop    ecx
c000bd1f:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000bd24:	5b                   	pop    ebx
c000bd25:	68 74 fe 01 c0       	push   0xc001fe74
c000bd2a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000bd30:	e8 c9 1a 00 00       	call   c000d7fe <VgaText::puts(char const*)>
c000bd35:	58                   	pop    eax
c000bd36:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000bd3b:	5a                   	pop    edx
c000bd3c:	68 d1 00 02 c0       	push   0xc00200d1
c000bd41:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000bd47:	e8 b2 1a 00 00       	call   c000d7fe <VgaText::puts(char const*)>
c000bd4c:	59                   	pop    ecx
c000bd4d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000bd52:	5b                   	pop    ebx
c000bd53:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000bd56:	83 c0 0c             	add    eax,0xc
c000bd59:	50                   	push   eax
c000bd5a:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000bd5f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000bd65:	e8 94 1a 00 00       	call   c000d7fe <VgaText::puts(char const*)>
c000bd6a:	58                   	pop    eax
c000bd6b:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000bd70:	5a                   	pop    edx
c000bd71:	68 f0 00 02 c0       	push   0xc00200f0
c000bd76:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000bd7c:	e8 7d 1a 00 00       	call   c000d7fe <VgaText::puts(char const*)>
c000bd81:	59                   	pop    ecx
c000bd82:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000bd87:	5b                   	pop    ebx
c000bd88:	68 a0 fe 01 c0       	push   0xc001fea0
c000bd8d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000bd93:	e8 66 1a 00 00       	call   c000d7fe <VgaText::puts(char const*)>
c000bd98:	58                   	pop    eax
c000bd99:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000bd9e:	5a                   	pop    edx
c000bd9f:	68 e0 fe 01 c0       	push   0xc001fee0
c000bda4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000bdaa:	e8 4f 1a 00 00       	call   c000d7fe <VgaText::puts(char const*)>
c000bdaf:	59                   	pop    ecx
c000bdb0:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000bdb5:	5b                   	pop    ebx
c000bdb6:	68 dc 00 02 c0       	push   0xc00200dc
c000bdbb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000bdc1:	e8 38 1a 00 00       	call   c000d7fe <VgaText::puts(char const*)>
c000bdc6:	58                   	pop    eax
c000bdc7:	5a                   	pop    edx
c000bdc8:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000bdcb:	68 f4 00 02 c0       	push   0xc00200f4
c000bdd0:	e8 61 fd ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000bdd5:	59                   	pop    ecx
c000bdd6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bdd9:	5b                   	pop    ebx
c000bdda:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000bddd:	68 fd 00 02 c0       	push   0xc00200fd
c000bde2:	e8 4f fd ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000bde7:	5a                   	pop    edx
c000bde8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000bdeb:	59                   	pop    ecx
c000bdec:	8b 00                	mov    eax,DWORD PTR [eax]
c000bdee:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000bdf1:	68 19 0c 02 c0       	push   0xc0020c19
c000bdf6:	e8 3b fd ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000bdfb:	5b                   	pop    ebx
c000bdfc:	58                   	pop    eax
c000bdfd:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000be02:	68 24 ff 01 c0       	push   0xc001ff24
c000be07:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000be0d:	e8 ec 19 00 00       	call   c000d7fe <VgaText::puts(char const*)>
c000be12:	58                   	pop    eax
c000be13:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000be18:	5a                   	pop    edx
c000be19:	68 06 01 02 c0       	push   0xc0020106
c000be1e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000be24:	e8 d5 19 00 00       	call   c000d7fe <VgaText::puts(char const*)>
c000be29:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000be2e:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000be34:	e8 6c 25 01 00       	call   c001e3a5 <CPU::readCR0()>
c000be39:	59                   	pop    ecx
c000be3a:	5a                   	pop    edx
c000be3b:	50                   	push   eax
c000be3c:	53                   	push   ebx
c000be3d:	e8 e2 19 00 00       	call   c000d824 <VgaText::putx(unsigned int)>
c000be42:	59                   	pop    ecx
c000be43:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000be48:	5b                   	pop    ebx
c000be49:	68 10 01 02 c0       	push   0xc0020110
c000be4e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000be54:	e8 a5 19 00 00       	call   c000d7fe <VgaText::puts(char const*)>
c000be59:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000be5e:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000be64:	e8 4e 25 01 00       	call   c001e3b7 <CPU::readCR2()>
c000be69:	5a                   	pop    edx
c000be6a:	59                   	pop    ecx
c000be6b:	50                   	push   eax
c000be6c:	53                   	push   ebx
c000be6d:	e8 b2 19 00 00       	call   c000d824 <VgaText::putx(unsigned int)>
c000be72:	5b                   	pop    ebx
c000be73:	58                   	pop    eax
c000be74:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000be79:	68 1a 01 02 c0       	push   0xc002011a
c000be7e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000be84:	e8 75 19 00 00       	call   c000d7fe <VgaText::puts(char const*)>
c000be89:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000be8e:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000be94:	e8 30 25 01 00       	call   c001e3c9 <CPU::readCR3()>
c000be99:	5a                   	pop    edx
c000be9a:	59                   	pop    ecx
c000be9b:	50                   	push   eax
c000be9c:	53                   	push   ebx
c000be9d:	e8 82 19 00 00       	call   c000d824 <VgaText::putx(unsigned int)>
c000bea2:	5b                   	pop    ebx
c000bea3:	58                   	pop    eax
c000bea4:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000bea9:	68 2d 01 02 c0       	push   0xc002012d
c000beae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000beb4:	e8 45 19 00 00       	call   c000d7fe <VgaText::puts(char const*)>
c000beb9:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000bebe:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c000bec4:	e8 12 25 01 00       	call   c001e3db <CPU::readCR4()>
c000bec9:	5a                   	pop    edx
c000beca:	59                   	pop    ecx
c000becb:	50                   	push   eax
c000becc:	53                   	push   ebx
c000becd:	e8 52 19 00 00       	call   c000d824 <VgaText::putx(unsigned int)>
c000bed2:	5b                   	pop    ebx
c000bed3:	58                   	pop    eax
c000bed4:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000bed9:	68 37 01 02 c0       	push   0xc0020137
c000bede:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000bee4:	e8 15 19 00 00       	call   c000d7fe <VgaText::puts(char const*)>
c000bee9:	5a                   	pop    edx
c000beea:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000beef:	59                   	pop    ecx
c000bef0:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000bef6:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000bef9:	50                   	push   eax
c000befa:	e8 25 19 00 00       	call   c000d824 <VgaText::putx(unsigned int)>
c000beff:	5b                   	pop    ebx
c000bf00:	58                   	pop    eax
c000bf01:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000bf06:	68 4e 01 02 c0       	push   0xc002014e
c000bf0b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000bf11:	e8 e8 18 00 00       	call   c000d7fe <VgaText::puts(char const*)>
c000bf16:	5a                   	pop    edx
c000bf17:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000bf1c:	59                   	pop    ecx
c000bf1d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000bf23:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000bf26:	ff 72 04             	push   DWORD PTR [edx+0x4]
c000bf29:	50                   	push   eax
c000bf2a:	e8 f5 18 00 00       	call   c000d824 <VgaText::putx(unsigned int)>
c000bf2f:	5b                   	pop    ebx
c000bf30:	58                   	pop    eax
c000bf31:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000bf36:	68 4e 01 02 c0       	push   0xc002014e
c000bf3b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c000bf41:	e8 b8 18 00 00       	call   c000d7fe <VgaText::puts(char const*)>
c000bf46:	59                   	pop    ecx
c000bf47:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000bf4c:	5b                   	pop    ebx
c000bf4d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000bf53:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000bf56:	8b 12                	mov    edx,DWORD PTR [edx]
c000bf58:	ff 72 04             	push   DWORD PTR [edx+0x4]
c000bf5b:	50                   	push   eax
c000bf5c:	e8 c3 18 00 00       	call   c000d824 <VgaText::putx(unsigned int)>
c000bf61:	83 c4 10             	add    esp,0x10
c000bf64:	b2 fe                	mov    dl,0xfe
c000bf66:	e4 60                	in     al,0x60
c000bf68:	3c 1c                	cmp    al,0x1c
c000bf6a:	74 04                	je     c000bf70 <panic(char const*)+0x31c>
c000bf6c:	3c 5a                	cmp    al,0x5a
c000bf6e:	75 f6                	jne    c000bf66 <panic(char const*)+0x312>
c000bf70:	e4 64                	in     al,0x64
c000bf72:	a8 02                	test   al,0x2
c000bf74:	75 fa                	jne    c000bf70 <panic(char const*)+0x31c>
c000bf76:	88 d0                	mov    al,dl
c000bf78:	e6 64                	out    0x64,al
c000bf7a:	fa                   	cli    
c000bf7b:	f4                   	hlt    
c000bf7c:	eb e8                	jmp    c000bf66 <panic(char const*)+0x312>

c000bf7e <sbrk>:
c000bf7e:	55                   	push   ebp
c000bf7f:	57                   	push   edi
c000bf80:	56                   	push   esi
c000bf81:	53                   	push   ebx
c000bf82:	83 ec 1c             	sub    esp,0x1c
c000bf85:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000bf89:	85 db                	test   ebx,ebx
c000bf8b:	74 37                	je     c000bfc4 <sbrk+0x46>
c000bf8d:	78 3f                	js     c000bfce <sbrk+0x50>
c000bf8f:	e8 d6 7f 00 00       	call   c0013f6a <thisCPU()>
c000bf94:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000bf9a:	83 e0 01             	and    eax,0x1
c000bf9d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000bfa1:	a1 f4 22 02 c0       	mov    eax,ds:0xc00222f4
c000bfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bfaa:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000bfb0:	89 d8                	mov    eax,ebx
c000bfb2:	78 35                	js     c000bfe9 <sbrk+0x6b>
c000bfb4:	c1 f8 0c             	sar    eax,0xc
c000bfb7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bfbb:	89 c7                	mov    edi,eax
c000bfbd:	be 00 00 00 00       	mov    esi,0x0
c000bfc2:	eb 3c                	jmp    c000c000 <sbrk+0x82>
c000bfc4:	a1 f4 22 02 c0       	mov    eax,ds:0xc00222f4
c000bfc9:	e9 ad 00 00 00       	jmp    c000c07b <sbrk+0xfd>
c000bfce:	83 ec 08             	sub    esp,0x8
c000bfd1:	53                   	push   ebx
c000bfd2:	68 54 01 02 c0       	push   0xc0020154
c000bfd7:	e8 5a fb ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000bfdc:	83 c4 10             	add    esp,0x10
c000bfdf:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bfe4:	e9 92 00 00 00       	jmp    c000c07b <sbrk+0xfd>
c000bfe9:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000bfef:	eb c3                	jmp    c000bfb4 <sbrk+0x36>
c000bff1:	81 05 f4 22 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00222f4,0x1000
c000bffb:	46                   	inc    esi
c000bffc:	39 f7                	cmp    edi,esi
c000bffe:	74 34                	je     c000c034 <sbrk+0xb6>
c000c000:	e8 02 22 00 00       	call   c000e207 <Virt::getAKernelVAS()>
c000c005:	89 c3                	mov    ebx,eax
c000c007:	8b 2d f4 22 02 c0    	mov    ebp,DWORD PTR ds:0xc00222f4
c000c00d:	e8 c9 06 00 00       	call   c000c6db <Phys::allocatePage()>
c000c012:	68 01 04 00 00       	push   0x401
c000c017:	55                   	push   ebp
c000c018:	50                   	push   eax
c000c019:	53                   	push   ebx
c000c01a:	e8 8f 26 00 00       	call   c000e6ae <VAS::mapPage(unsigned long, unsigned long, int)>
c000c01f:	83 c4 10             	add    esp,0x10
c000c022:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c027:	74 c8                	je     c000bff1 <sbrk+0x73>
c000c029:	8b 1d f4 22 02 c0    	mov    ebx,DWORD PTR ds:0xc00222f4
c000c02f:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c032:	eb bd                	jmp    c000bff1 <sbrk+0x73>
c000c034:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000c039:	74 48                	je     c000c083 <sbrk+0x105>
c000c03b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c03f:	89 d3                	mov    ebx,edx
c000c041:	c1 eb 0a             	shr    ebx,0xa
c000c044:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000c04a:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000c050:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c054:	c1 e0 0c             	shl    eax,0xc
c000c057:	01 d0                	add    eax,edx
c000c059:	c1 e8 0a             	shr    eax,0xa
c000c05c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c061:	2d 00 00 40 00       	sub    eax,0x400000
c000c066:	39 c3                	cmp    ebx,eax
c000c068:	77 0d                	ja     c000c077 <sbrk+0xf9>
c000c06a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000c06d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000c073:	39 d8                	cmp    eax,ebx
c000c075:	73 f3                	jae    c000c06a <sbrk+0xec>
c000c077:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c07b:	83 c4 1c             	add    esp,0x1c
c000c07e:	5b                   	pop    ebx
c000c07f:	5e                   	pop    esi
c000c080:	5f                   	pop    edi
c000c081:	5d                   	pop    ebp
c000c082:	c3                   	ret    
c000c083:	e8 41 23 01 00       	call   c001e3c9 <CPU::readCR3()>
c000c088:	83 ec 0c             	sub    esp,0xc
c000c08b:	50                   	push   eax
c000c08c:	e8 5c 23 01 00       	call   c001e3ed <CPU::writeCR3(unsigned long)>
c000c091:	83 c4 10             	add    esp,0x10
c000c094:	eb e1                	jmp    c000c077 <sbrk+0xf9>

c000c096 <mmap>:
c000c096:	83 ec 18             	sub    esp,0x18
c000c099:	68 84 01 02 c0       	push   0xc0020184
c000c09e:	e8 b1 fb ff ff       	call   c000bc54 <panic(char const*)>
c000c0a3:	b8 00 00 00 00       	mov    eax,0x0
c000c0a8:	83 c4 1c             	add    esp,0x1c
c000c0ab:	c3                   	ret    

c000c0ac <munmap>:
c000c0ac:	83 ec 18             	sub    esp,0x18
c000c0af:	68 89 01 02 c0       	push   0xc0020189
c000c0b4:	e8 9b fb ff ff       	call   c000bc54 <panic(char const*)>
c000c0b9:	b8 00 00 00 00       	mov    eax,0x0
c000c0be:	83 c4 1c             	add    esp,0x1c
c000c0c1:	c3                   	ret    

c000c0c2 <liballoc_lock()>:
c000c0c2:	83 ec 0c             	sub    esp,0xc
c000c0c5:	e8 3e b5 00 00       	call   c0017608 <lockScheduler()>
c000c0ca:	b8 00 00 00 00       	mov    eax,0x0
c000c0cf:	83 c4 0c             	add    esp,0xc
c000c0d2:	c3                   	ret    

c000c0d3 <liballoc_unlock()>:
c000c0d3:	83 ec 0c             	sub    esp,0xc
c000c0d6:	e8 2f b5 00 00       	call   c001760a <unlockScheduler()>
c000c0db:	b8 00 00 00 00       	mov    eax,0x0
c000c0e0:	83 c4 0c             	add    esp,0xc
c000c0e3:	c3                   	ret    

c000c0e4 <liballoc_alloc(int)>:
c000c0e4:	83 ec 0c             	sub    esp,0xc
c000c0e7:	e8 1b 21 00 00       	call   c000e207 <Virt::getAKernelVAS()>
c000c0ec:	83 ec 04             	sub    esp,0x4
c000c0ef:	6a 01                	push   0x1
c000c0f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c0f5:	50                   	push   eax
c000c0f6:	e8 b3 26 00 00       	call   c000e7ae <VAS::allocatePages(int, int)>
c000c0fb:	83 c4 1c             	add    esp,0x1c
c000c0fe:	c3                   	ret    

c000c0ff <liballoc_free(void*, int)>:
c000c0ff:	83 ec 0c             	sub    esp,0xc
c000c102:	e8 00 21 00 00       	call   c000e207 <Virt::getAKernelVAS()>
c000c107:	83 ec 08             	sub    esp,0x8
c000c10a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c10e:	50                   	push   eax
c000c10f:	e8 bc 23 00 00       	call   c000e4d0 <VAS::freeAllocatedPages(unsigned long)>
c000c114:	b8 00 00 00 00       	mov    eax,0x0
c000c119:	83 c4 1c             	add    esp,0x1c
c000c11c:	c3                   	ret    

c000c11d <realloc>:
c000c11d:	83 ec 14             	sub    esp,0x14
c000c120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c128:	e8 54 52 ff ff       	call   c0001381 <dlrealloc>
c000c12d:	83 c4 1c             	add    esp,0x1c
c000c130:	c3                   	ret    

c000c131 <malloc>:
c000c131:	83 ec 18             	sub    esp,0x18
c000c134:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c138:	e8 07 4d ff ff       	call   c0000e44 <dlmalloc>
c000c13d:	83 c4 1c             	add    esp,0x1c
c000c140:	c3                   	ret    

c000c141 <free>:
c000c141:	83 ec 18             	sub    esp,0x18
c000c144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c148:	e8 9c 49 ff ff       	call   c0000ae9 <dlfree>
c000c14d:	83 c4 1c             	add    esp,0x1c
c000c150:	c3                   	ret    

c000c151 <rfree>:
c000c151:	83 ec 18             	sub    esp,0x18
c000c154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c158:	e8 e4 ff ff ff       	call   c000c141 <free>
c000c15d:	83 c4 1c             	add    esp,0x1c
c000c160:	c3                   	ret    

c000c161 <calloc>:
c000c161:	56                   	push   esi
c000c162:	53                   	push   ebx
c000c163:	83 ec 10             	sub    esp,0x10
c000c166:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c16a:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000c16f:	53                   	push   ebx
c000c170:	e8 bc ff ff ff       	call   c000c131 <malloc>
c000c175:	89 c6                	mov    esi,eax
c000c177:	83 c4 0c             	add    esp,0xc
c000c17a:	53                   	push   ebx
c000c17b:	6a 00                	push   0x0
c000c17d:	50                   	push   eax
c000c17e:	e8 85 44 ff ff       	call   c0000608 <memset>
c000c183:	89 f0                	mov    eax,esi
c000c185:	83 c4 14             	add    esp,0x14
c000c188:	5b                   	pop    ebx
c000c189:	5e                   	pop    esi
c000c18a:	c3                   	ret    

c000c18b <hwTextMode_loadInData(VgaText*)>:
c000c18b:	57                   	push   edi
c000c18c:	56                   	push   esi
c000c18d:	53                   	push   ebx
c000c18e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000c192:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000c198:	85 c0                	test   eax,eax
c000c19a:	7e 30                	jle    c000c1cc <hwTextMode_loadInData(VgaText*)+0x41>
c000c19c:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000c19f:	31 f6                	xor    esi,esi
c000c1a1:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000c1a4:	31 c0                	xor    eax,eax
c000c1a6:	c1 e1 05             	shl    ecx,0x5
c000c1a9:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000c1af:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000c1b3:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000c1b7:	40                   	inc    eax
c000c1b8:	83 f8 50             	cmp    eax,0x50
c000c1bb:	75 f2                	jne    c000c1af <hwTextMode_loadInData(VgaText*)+0x24>
c000c1bd:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000c1c3:	46                   	inc    esi
c000c1c4:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000c1ca:	7f d5                	jg     c000c1a1 <hwTextMode_loadInData(VgaText*)+0x16>
c000c1cc:	5b                   	pop    ebx
c000c1cd:	5e                   	pop    esi
c000c1ce:	5f                   	pop    edi
c000c1cf:	c3                   	ret    

c000c1d0 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000c1d0:	56                   	push   esi
c000c1d1:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000c1d6:	53                   	push   ebx
c000c1d7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1db:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c1df:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000c1e5:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000c1eb:	c1 e0 04             	shl    eax,0x4
c000c1ee:	83 e6 0f             	and    esi,0xf
c000c1f1:	0f b6 c0             	movzx  eax,al
c000c1f4:	41                   	inc    ecx
c000c1f5:	09 f0                	or     eax,esi
c000c1f7:	83 c2 02             	add    edx,0x2
c000c1fa:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000c1fe:	c1 e0 08             	shl    eax,0x8
c000c201:	09 f0                	or     eax,esi
c000c203:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000c207:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000c20d:	75 d0                	jne    c000c1df <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000c20f:	5b                   	pop    ebx
c000c210:	5e                   	pop    esi
c000c211:	c3                   	ret    

c000c212 <hwTextMode_showCursor(VgaText*, bool)>:
c000c212:	56                   	push   esi
c000c213:	53                   	push   ebx
c000c214:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000c219:	74 38                	je     c000c253 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000c21b:	bb d4 03 00 00       	mov    ebx,0x3d4
c000c220:	b0 0a                	mov    al,0xa
c000c222:	89 da                	mov    edx,ebx
c000c224:	ee                   	out    dx,al
c000c225:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000c22a:	89 ca                	mov    edx,ecx
c000c22c:	ec                   	in     al,dx
c000c22d:	b2 0f                	mov    dl,0xf
c000c22f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c233:	83 e0 c0             	and    eax,0xffffffc0
c000c236:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000c23c:	09 d0                	or     eax,edx
c000c23e:	89 ca                	mov    edx,ecx
c000c240:	ee                   	out    dx,al
c000c241:	b0 0b                	mov    al,0xb
c000c243:	89 da                	mov    edx,ebx
c000c245:	ee                   	out    dx,al
c000c246:	89 ca                	mov    edx,ecx
c000c248:	ec                   	in     al,dx
c000c249:	83 e0 e0             	and    eax,0xffffffe0
c000c24c:	83 c8 0f             	or     eax,0xf
c000c24f:	ee                   	out    dx,al
c000c250:	5b                   	pop    ebx
c000c251:	5e                   	pop    esi
c000c252:	c3                   	ret    
c000c253:	b0 0a                	mov    al,0xa
c000c255:	ba d4 03 00 00       	mov    edx,0x3d4
c000c25a:	ee                   	out    dx,al
c000c25b:	b0 20                	mov    al,0x20
c000c25d:	ba d5 03 00 00       	mov    edx,0x3d5
c000c262:	ee                   	out    dx,al
c000c263:	5b                   	pop    ebx
c000c264:	5e                   	pop    esi
c000c265:	c3                   	ret    

c000c266 <hwTextMode_update(VgaText*)>:
c000c266:	c3                   	ret    

c000c267 <hwTextMode_updateCursor(VgaText*)>:
c000c267:	56                   	push   esi
c000c268:	b9 19 00 00 00       	mov    ecx,0x19
c000c26d:	53                   	push   ebx
c000c26e:	be d4 03 00 00       	mov    esi,0x3d4
c000c273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c277:	89 f2                	mov    edx,esi
c000c279:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000c27f:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000c285:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000c288:	c1 e1 04             	shl    ecx,0x4
c000c28b:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000c291:	b0 0f                	mov    al,0xf
c000c293:	ee                   	out    dx,al
c000c294:	bb d5 03 00 00       	mov    ebx,0x3d5
c000c299:	88 c8                	mov    al,cl
c000c29b:	89 da                	mov    edx,ebx
c000c29d:	ee                   	out    dx,al
c000c29e:	b0 0e                	mov    al,0xe
c000c2a0:	89 f2                	mov    edx,esi
c000c2a2:	ee                   	out    dx,al
c000c2a3:	89 c8                	mov    eax,ecx
c000c2a5:	89 da                	mov    edx,ebx
c000c2a7:	66 c1 e8 08          	shr    ax,0x8
c000c2ab:	ee                   	out    dx,al
c000c2ac:	5b                   	pop    ebx
c000c2ad:	5e                   	pop    esi
c000c2ae:	c3                   	ret    

c000c2af <hwTextMode_disableBlink(VgaText*, bool)>:
c000c2af:	ba da 03 00 00       	mov    edx,0x3da
c000c2b4:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000c2b9:	75 18                	jne    c000c2d3 <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000c2bb:	ec                   	in     al,dx
c000c2bc:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c2c1:	b0 30                	mov    al,0x30
c000c2c3:	89 ca                	mov    edx,ecx
c000c2c5:	ee                   	out    dx,al
c000c2c6:	ba c1 03 00 00       	mov    edx,0x3c1
c000c2cb:	ec                   	in     al,dx
c000c2cc:	83 c8 08             	or     eax,0x8
c000c2cf:	89 ca                	mov    edx,ecx
c000c2d1:	ee                   	out    dx,al
c000c2d2:	c3                   	ret    
c000c2d3:	ec                   	in     al,dx
c000c2d4:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c2d9:	b0 30                	mov    al,0x30
c000c2db:	89 ca                	mov    edx,ecx
c000c2dd:	ee                   	out    dx,al
c000c2de:	ba c1 03 00 00       	mov    edx,0x3c1
c000c2e3:	ec                   	in     al,dx
c000c2e4:	83 e0 f7             	and    eax,0xfffffff7
c000c2e7:	89 ca                	mov    edx,ecx
c000c2e9:	ee                   	out    dx,al
c000c2ea:	c3                   	ret    

c000c2eb <hwTextMode_scrollScreen(VgaText*)>:
c000c2eb:	55                   	push   ebp
c000c2ec:	bd 02 00 00 00       	mov    ebp,0x2
c000c2f1:	57                   	push   edi
c000c2f2:	56                   	push   esi
c000c2f3:	53                   	push   ebx
c000c2f4:	83 ec 1c             	sub    esp,0x1c
c000c2f7:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000c2ff:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c303:	31 c0                	xor    eax,eax
c000c305:	eb 0b                	jmp    c000c312 <hwTextMode_scrollScreen(VgaText*)+0x27>
c000c307:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c30d:	74 57                	je     c000c366 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000c30f:	43                   	inc    ebx
c000c310:	89 f0                	mov    eax,esi
c000c312:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000c318:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000c31e:	88 13                	mov    BYTE PTR [ebx],dl
c000c320:	8d 70 01             	lea    esi,[eax+0x1]
c000c323:	83 fd 18             	cmp    ebp,0x18
c000c326:	75 df                	jne    c000c307 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000c328:	a8 01                	test   al,0x1
c000c32a:	75 13                	jne    c000c33f <hwTextMode_scrollScreen(VgaText*)+0x54>
c000c32c:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000c32f:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c335:	75 d8                	jne    c000c30f <hwTextMode_scrollScreen(VgaText*)+0x24>
c000c337:	83 c4 1c             	add    esp,0x1c
c000c33a:	5b                   	pop    ebx
c000c33b:	5e                   	pop    esi
c000c33c:	5f                   	pop    edi
c000c33d:	5d                   	pop    ebp
c000c33e:	c3                   	ret    
c000c33f:	83 ec 08             	sub    esp,0x8
c000c342:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c346:	0f b6 80 cc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfcc]
c000c34d:	50                   	push   eax
c000c34e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c352:	0f b6 80 d0 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfd0]
c000c359:	50                   	push   eax
c000c35a:	e8 df 0a 00 00       	call   c000ce3e <VgaText::combineColours(unsigned char, unsigned char)>
c000c35f:	83 c4 10             	add    esp,0x10
c000c362:	88 07                	mov    BYTE PTR [edi],al
c000c364:	eb c9                	jmp    c000c32f <hwTextMode_scrollScreen(VgaText*)+0x44>
c000c366:	45                   	inc    ebp
c000c367:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000c36f:	eb 8e                	jmp    c000c2ff <hwTextMode_scrollScreen(VgaText*)+0x14>

c000c371 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000c371:	56                   	push   esi
c000c372:	53                   	push   ebx
c000c373:	83 ec 0c             	sub    esp,0xc
c000c376:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c37a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000c37e:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000c383:	50                   	push   eax
c000c384:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000c389:	50                   	push   eax
c000c38a:	e8 af 0a 00 00       	call   c000ce3e <VgaText::combineColours(unsigned char, unsigned char)>
c000c38f:	5a                   	pop    edx
c000c390:	0f b6 c0             	movzx  eax,al
c000c393:	59                   	pop    ecx
c000c394:	50                   	push   eax
c000c395:	89 f0                	mov    eax,esi
c000c397:	0f be f0             	movsx  esi,al
c000c39a:	56                   	push   esi
c000c39b:	e8 44 0b 00 00       	call   c000cee4 <VgaText::combineCharAndColour(char, unsigned char)>
c000c3a0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c3a4:	ba 19 00 00 00       	mov    edx,0x19
c000c3a9:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000c3af:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c3b2:	8d 14 92             	lea    edx,[edx+edx*4]
c000c3b5:	c1 e1 04             	shl    ecx,0x4
c000c3b8:	c1 e2 04             	shl    edx,0x4
c000c3bb:	03 4c 24 30          	add    ecx,DWORD PTR [esp+0x30]
c000c3bf:	01 ca                	add    edx,ecx
c000c3c1:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000c3c9:	83 c4 14             	add    esp,0x14
c000c3cc:	5b                   	pop    ebx
c000c3cd:	5e                   	pop    esi
c000c3ce:	c3                   	ret    

c000c3cf <setupTextMode()>:
c000c3cf:	c7 05 78 2f 02 c0 af c2 00 c0 	mov    DWORD PTR ds:0xc0022f78,0xc000c2af
c000c3d9:	c7 05 64 2f 02 c0 8b c1 00 c0 	mov    DWORD PTR ds:0xc0022f64,0xc000c18b
c000c3e3:	c7 05 60 2f 02 c0 d0 c1 00 c0 	mov    DWORD PTR ds:0xc0022f60,0xc000c1d0
c000c3ed:	c7 05 6c 2f 02 c0 eb c2 00 c0 	mov    DWORD PTR ds:0xc0022f6c,0xc000c2eb
c000c3f7:	c7 05 74 2f 02 c0 12 c2 00 c0 	mov    DWORD PTR ds:0xc0022f74,0xc000c212
c000c401:	c7 05 68 2f 02 c0 66 c2 00 c0 	mov    DWORD PTR ds:0xc0022f68,0xc000c266
c000c40b:	c7 05 70 2f 02 c0 67 c2 00 c0 	mov    DWORD PTR ds:0xc0022f70,0xc000c267
c000c415:	c7 05 7c 2f 02 c0 71 c3 00 c0 	mov    DWORD PTR ds:0xc0022f7c,0xc000c371
c000c41f:	c3                   	ret    

c000c420 <kernel_main>:
c000c420:	57                   	push   edi
c000c421:	bf f9 03 00 00       	mov    edi,0x3f9
c000c426:	56                   	push   esi
c000c427:	31 f6                	xor    esi,esi
c000c429:	53                   	push   ebx
c000c42a:	83 ec 10             	sub    esp,0x10
c000c42d:	e8 66 08 00 00       	call   c000cc98 <installVgaTextImplementation()>
c000c432:	e8 98 ff ff ff       	call   c000c3cf <setupTextMode()>
c000c437:	89 f0                	mov    eax,esi
c000c439:	89 fa                	mov    edx,edi
c000c43b:	ee                   	out    dx,al
c000c43c:	bb fb 03 00 00       	mov    ebx,0x3fb
c000c441:	b0 80                	mov    al,0x80
c000c443:	89 da                	mov    edx,ebx
c000c445:	ee                   	out    dx,al
c000c446:	b1 03                	mov    cl,0x3
c000c448:	ba f8 03 00 00       	mov    edx,0x3f8
c000c44d:	88 c8                	mov    al,cl
c000c44f:	ee                   	out    dx,al
c000c450:	89 f0                	mov    eax,esi
c000c452:	89 fa                	mov    edx,edi
c000c454:	ee                   	out    dx,al
c000c455:	88 c8                	mov    al,cl
c000c457:	89 da                	mov    edx,ebx
c000c459:	ee                   	out    dx,al
c000c45a:	b0 c7                	mov    al,0xc7
c000c45c:	ba fa 03 00 00       	mov    edx,0x3fa
c000c461:	ee                   	out    dx,al
c000c462:	b0 0b                	mov    al,0xb
c000c464:	ba fc 03 00 00       	mov    edx,0x3fc
c000c469:	ee                   	out    dx,al
c000c46a:	a1 24 05 00 00       	mov    eax,ds:0x524
c000c46f:	83 ec 0c             	sub    esp,0xc
c000c472:	05 ff 0f 00 00       	add    eax,0xfff
c000c477:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c47c:	50                   	push   eax
c000c47d:	e8 4d 03 00 00       	call   c000c7cf <Phys::physicalMemorySetup(unsigned int)>
c000c482:	e8 01 1d 00 00       	call   c000e188 <Virt::virtualMemorySetup()>
c000c487:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000c48d:	83 c4 10             	add    esp,0x10
c000c490:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000c496:	75 0e                	jne    c000c4a6 <kernel_main+0x86>
c000c498:	89 d8                	mov    eax,ebx
c000c49a:	25 48 03 00 00       	and    eax,0x348
c000c49f:	3d 00 03 00 00       	cmp    eax,0x300
c000c4a4:	74 10                	je     c000c4b6 <kernel_main+0x96>
c000c4a6:	83 ec 0c             	sub    esp,0xc
c000c4a9:	68 f3 00 02 c0       	push   0xc00200f3
c000c4ae:	e8 a1 f7 ff ff       	call   c000bc54 <panic(char const*)>
c000c4b3:	83 c4 10             	add    esp,0x10
c000c4b6:	83 ec 0c             	sub    esp,0xc
c000c4b9:	89 1d e0 2e 02 c0    	mov    DWORD PTR ds:0xc0022ee0,ebx
c000c4bf:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c4c3:	53                   	push   ebx
c000c4c4:	e8 69 1e 00 00       	call   c000e332 <VAS::VAS()>
c000c4c9:	89 1d 9c 2f 02 c0    	mov    DWORD PTR ds:0xc0022f9c,ebx
c000c4cf:	e8 4c 3b ff ff       	call   c0000020 <callGlobalConstructors>
c000c4d4:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000c4db:	e8 28 2d 00 00       	call   c000f208 <operator new(unsigned long)>
c000c4e0:	89 04 24             	mov    DWORD PTR [esp],eax
c000c4e3:	89 c6                	mov    esi,eax
c000c4e5:	e8 b8 e8 ff ff       	call   c000ada2 <Computer::Computer()>
c000c4ea:	6a 00                	push   0x0
c000c4ec:	89 35 c8 2e 02 c0    	mov    DWORD PTR ds:0xc0022ec8,esi
c000c4f2:	6a 00                	push   0x0
c000c4f4:	6a 00                	push   0x0
c000c4f6:	56                   	push   esi
c000c4f7:	e8 6c ed ff ff       	call   c000b268 <Computer::open(int, int, void*)>
c000c4fc:	83 c4 14             	add    esp,0x14
c000c4ff:	53                   	push   ebx
c000c500:	e8 3d 20 00 00       	call   c000e542 <VAS::~VAS()>
c000c505:	c7 04 24 90 01 02 c0 	mov    DWORD PTR [esp],0xc0020190
c000c50c:	e8 43 f7 ff ff       	call   c000bc54 <panic(char const*)>
c000c511:	83 c4 20             	add    esp,0x20
c000c514:	5b                   	pop    ebx
c000c515:	5e                   	pop    esi
c000c516:	5f                   	pop    edi
c000c517:	c3                   	ret    

c000c518 <Phys::allocateDMA(unsigned long)>:
c000c518:	55                   	push   ebp
c000c519:	31 d2                	xor    edx,edx
c000c51b:	57                   	push   edi
c000c51c:	31 ed                	xor    ebp,ebp
c000c51e:	56                   	push   esi
c000c51f:	31 c9                	xor    ecx,ecx
c000c521:	53                   	push   ebx
c000c522:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c526:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000c52c:	31 c0                	xor    eax,eax
c000c52e:	c1 ee 0c             	shr    esi,0xc
c000c531:	eb 17                	jmp    c000c54a <Phys::allocateDMA(unsigned long)+0x32>
c000c533:	85 c9                	test   ecx,ecx
c000c535:	75 04                	jne    c000c53b <Phys::allocateDMA(unsigned long)+0x23>
c000c537:	89 d5                	mov    ebp,edx
c000c539:	89 d0                	mov    eax,edx
c000c53b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c53e:	39 de                	cmp    esi,ebx
c000c540:	74 20                	je     c000c562 <Phys::allocateDMA(unsigned long)+0x4a>
c000c542:	42                   	inc    edx
c000c543:	89 d9                	mov    ecx,ebx
c000c545:	83 fa 2f             	cmp    edx,0x2f
c000c548:	7f 11                	jg     c000c55b <Phys::allocateDMA(unsigned long)+0x43>
c000c54a:	80 ba 20 2f 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdd0e0],0x0
c000c551:	74 e0                	je     c000c533 <Phys::allocateDMA(unsigned long)+0x1b>
c000c553:	31 c9                	xor    ecx,ecx
c000c555:	42                   	inc    edx
c000c556:	83 fa 2f             	cmp    edx,0x2f
c000c559:	7e ef                	jle    c000c54a <Phys::allocateDMA(unsigned long)+0x32>
c000c55b:	5b                   	pop    ebx
c000c55c:	31 c0                	xor    eax,eax
c000c55e:	5e                   	pop    esi
c000c55f:	5f                   	pop    edi
c000c560:	5d                   	pop    ebp
c000c561:	c3                   	ret    
c000c562:	8d 14 30             	lea    edx,[eax+esi*1]
c000c565:	89 d7                	mov    edi,edx
c000c567:	4f                   	dec    edi
c000c568:	79 03                	jns    c000c56d <Phys::allocateDMA(unsigned long)+0x55>
c000c56a:	8d 7a 0e             	lea    edi,[edx+0xe]
c000c56d:	c1 ff 04             	sar    edi,0x4
c000c570:	89 c2                	mov    edx,eax
c000c572:	c1 fa 04             	sar    edx,0x4
c000c575:	39 fa                	cmp    edx,edi
c000c577:	75 2f                	jne    c000c5a8 <Phys::allocateDMA(unsigned long)+0x90>
c000c579:	85 db                	test   ebx,ebx
c000c57b:	74 1a                	je     c000c597 <Phys::allocateDMA(unsigned long)+0x7f>
c000c57d:	be 20 2f 02 c0       	mov    esi,0xc0022f20
c000c582:	8d 90 20 2f 02 c0    	lea    edx,[eax-0x3ffdd0e0]
c000c588:	f7 d6                	not    esi
c000c58a:	29 c6                	sub    esi,eax
c000c58c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c58f:	42                   	inc    edx
c000c590:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000c593:	39 d9                	cmp    ecx,ebx
c000c595:	7f f5                	jg     c000c58c <Phys::allocateDMA(unsigned long)+0x74>
c000c597:	85 ff                	test   edi,edi
c000c599:	74 13                	je     c000c5ae <Phys::allocateDMA(unsigned long)+0x96>
c000c59b:	5b                   	pop    ebx
c000c59c:	05 50 20 0c 00       	add    eax,0xc2050
c000c5a1:	5e                   	pop    esi
c000c5a2:	c1 e0 0c             	shl    eax,0xc
c000c5a5:	5f                   	pop    edi
c000c5a6:	5d                   	pop    ebp
c000c5a7:	c3                   	ret    
c000c5a8:	89 ea                	mov    edx,ebp
c000c5aa:	31 c9                	xor    ecx,ecx
c000c5ac:	eb a7                	jmp    c000c555 <Phys::allocateDMA(unsigned long)+0x3d>
c000c5ae:	5b                   	pop    ebx
c000c5af:	c1 e0 0c             	shl    eax,0xc
c000c5b2:	5e                   	pop    esi
c000c5b3:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000c5b8:	5f                   	pop    edi
c000c5b9:	5d                   	pop    ebp
c000c5ba:	c3                   	ret    

c000c5bb <Phys::freeDMA(unsigned long, unsigned long)>:
c000c5bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c5bf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c5c3:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c5c9:	c1 e9 0c             	shr    ecx,0xc
c000c5cc:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c5d1:	76 25                	jbe    c000c5f8 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c5d3:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c5d8:	c1 e8 0c             	shr    eax,0xc
c000c5db:	8d 50 10             	lea    edx,[eax+0x10]
c000c5de:	85 c9                	test   ecx,ecx
c000c5e0:	74 15                	je     c000c5f7 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c5e2:	8d 82 20 2f 02 c0    	lea    eax,[edx-0x3ffdd0e0]
c000c5e8:	8d 94 11 20 2f 02 c0 	lea    edx,[ecx+edx*1-0x3ffdd0e0]
c000c5ef:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c5f2:	40                   	inc    eax
c000c5f3:	39 d0                	cmp    eax,edx
c000c5f5:	75 f8                	jne    c000c5ef <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c5f7:	c3                   	ret    
c000c5f8:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c5fe:	c1 ea 0c             	shr    edx,0xc
c000c601:	eb db                	jmp    c000c5de <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c603 <Phys::setPageState(unsigned long, bool)>:
c000c603:	56                   	push   esi
c000c604:	ba 01 00 00 00       	mov    edx,0x1
c000c609:	53                   	push   ebx
c000c60a:	8b 35 f8 22 02 c0    	mov    esi,DWORD PTR ds:0xc00222f8
c000c610:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c614:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c618:	89 c8                	mov    eax,ecx
c000c61a:	83 e1 07             	and    ecx,0x7
c000c61d:	c1 e8 03             	shr    eax,0x3
c000c620:	d3 e3                	shl    ebx,cl
c000c622:	01 c6                	add    esi,eax
c000c624:	d3 e2                	shl    edx,cl
c000c626:	f7 d2                	not    edx
c000c628:	20 16                	and    BYTE PTR [esi],dl
c000c62a:	03 05 f8 22 02 c0    	add    eax,DWORD PTR ds:0xc00222f8
c000c630:	08 18                	or     BYTE PTR [eax],bl
c000c632:	5b                   	pop    ebx
c000c633:	5e                   	pop    esi
c000c634:	c3                   	ret    

c000c635 <Phys::getPageState(unsigned long)>:
c000c635:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000c639:	8b 15 f8 22 02 c0    	mov    edx,DWORD PTR ds:0xc00222f8
c000c63f:	89 c8                	mov    eax,ecx
c000c641:	83 e1 07             	and    ecx,0x7
c000c644:	c1 e8 03             	shr    eax,0x3
c000c647:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000c64b:	d3 f8                	sar    eax,cl
c000c64d:	83 e0 01             	and    eax,0x1
c000c650:	c3                   	ret    

c000c651 <Phys::freePage(unsigned long)>:
c000c651:	53                   	push   ebx
c000c652:	83 ec 08             	sub    esp,0x8
c000c655:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c659:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c65f:	76 57                	jbe    c000c6b8 <Phys::freePage(unsigned long)+0x67>
c000c661:	c1 eb 0c             	shr    ebx,0xc
c000c664:	53                   	push   ebx
c000c665:	e8 cb ff ff ff       	call   c000c635 <Phys::getPageState(unsigned long)>
c000c66a:	5a                   	pop    edx
c000c66b:	84 c0                	test   al,al
c000c66d:	74 5b                	je     c000c6ca <Phys::freePage(unsigned long)+0x79>
c000c66f:	a1 0c 2f 02 c0       	mov    eax,ds:0xc0022f0c
c000c674:	48                   	dec    eax
c000c675:	a3 0c 2f 02 c0       	mov    ds:0xc0022f0c,eax
c000c67a:	8d 04 80             	lea    eax,[eax+eax*4]
c000c67d:	8d 04 80             	lea    eax,[eax+eax*4]
c000c680:	c1 e0 02             	shl    eax,0x2
c000c683:	99                   	cdq    
c000c684:	f7 3d 10 2f 02 c0    	idiv   DWORD PTR ds:0xc0022f10
c000c68a:	39 05 08 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f08,eax
c000c690:	75 13                	jne    c000c6a5 <Phys::freePage(unsigned long)+0x54>
c000c692:	83 ec 08             	sub    esp,0x8
c000c695:	6a 00                	push   0x0
c000c697:	53                   	push   ebx
c000c698:	e8 66 ff ff ff       	call   c000c603 <Phys::setPageState(unsigned long, bool)>
c000c69d:	83 c4 10             	add    esp,0x10
c000c6a0:	83 c4 08             	add    esp,0x8
c000c6a3:	5b                   	pop    ebx
c000c6a4:	c3                   	ret    
c000c6a5:	83 ec 0c             	sub    esp,0xc
c000c6a8:	a3 08 2f 02 c0       	mov    ds:0xc0022f08,eax
c000c6ad:	50                   	push   eax
c000c6ae:	e8 79 09 00 00       	call   c000d02c <VgaText::updateRAMUsageDisplay(int)>
c000c6b3:	83 c4 10             	add    esp,0x10
c000c6b6:	eb da                	jmp    c000c692 <Phys::freePage(unsigned long)+0x41>
c000c6b8:	68 00 10 00 00       	push   0x1000
c000c6bd:	53                   	push   ebx
c000c6be:	e8 f8 fe ff ff       	call   c000c5bb <Phys::freeDMA(unsigned long, unsigned long)>
c000c6c3:	59                   	pop    ecx
c000c6c4:	5b                   	pop    ebx
c000c6c5:	83 c4 08             	add    esp,0x8
c000c6c8:	5b                   	pop    ebx
c000c6c9:	c3                   	ret    
c000c6ca:	c7 44 24 10 ab 01 02 c0 	mov    DWORD PTR [esp+0x10],0xc00201ab
c000c6d2:	83 c4 08             	add    esp,0x8
c000c6d5:	5b                   	pop    ebx
c000c6d6:	e9 79 f5 ff ff       	jmp    c000bc54 <panic(char const*)>

c000c6db <Phys::allocatePage()>:
c000c6db:	56                   	push   esi
c000c6dc:	53                   	push   ebx
c000c6dd:	51                   	push   ecx
c000c6de:	8b 35 00 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022f00
c000c6e4:	89 f3                	mov    ebx,esi
c000c6e6:	eb 0a                	jmp    c000c6f2 <Phys::allocatePage()+0x17>
c000c6e8:	89 1d 00 2f 02 c0    	mov    DWORD PTR ds:0xc0022f00,ebx
c000c6ee:	39 de                	cmp    esi,ebx
c000c6f0:	74 24                	je     c000c716 <Phys::allocatePage()+0x3b>
c000c6f2:	53                   	push   ebx
c000c6f3:	e8 3d ff ff ff       	call   c000c635 <Phys::getPageState(unsigned long)>
c000c6f8:	5a                   	pop    edx
c000c6f9:	84 c0                	test   al,al
c000c6fb:	74 4e                	je     c000c74b <Phys::allocatePage()+0x70>
c000c6fd:	43                   	inc    ebx
c000c6fe:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c704:	75 e2                	jne    c000c6e8 <Phys::allocatePage()+0xd>
c000c706:	31 db                	xor    ebx,ebx
c000c708:	c7 05 00 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f00,0x0
c000c712:	39 de                	cmp    esi,ebx
c000c714:	75 dc                	jne    c000c6f2 <Phys::allocatePage()+0x17>
c000c716:	83 ec 0c             	sub    esp,0xc
c000c719:	68 00 10 00 00       	push   0x1000
c000c71e:	e8 f5 fd ff ff       	call   c000c518 <Phys::allocateDMA(unsigned long)>
c000c723:	83 c4 10             	add    esp,0x10
c000c726:	85 c0                	test   eax,eax
c000c728:	75 56                	jne    c000c780 <Phys::allocatePage()+0xa5>
c000c72a:	83 ec 0c             	sub    esp,0xc
c000c72d:	68 c1 01 02 c0       	push   0xc00201c1
c000c732:	e8 1d f5 ff ff       	call   c000bc54 <panic(char const*)>
c000c737:	83 c4 10             	add    esp,0x10
c000c73a:	8b 1d 00 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f00
c000c740:	53                   	push   ebx
c000c741:	e8 ef fe ff ff       	call   c000c635 <Phys::getPageState(unsigned long)>
c000c746:	5a                   	pop    edx
c000c747:	84 c0                	test   al,al
c000c749:	75 b2                	jne    c000c6fd <Phys::allocatePage()+0x22>
c000c74b:	6a 01                	push   0x1
c000c74d:	53                   	push   ebx
c000c74e:	e8 b0 fe ff ff       	call   c000c603 <Phys::setPageState(unsigned long, bool)>
c000c753:	a1 0c 2f 02 c0       	mov    eax,ds:0xc0022f0c
c000c758:	59                   	pop    ecx
c000c759:	40                   	inc    eax
c000c75a:	5b                   	pop    ebx
c000c75b:	a3 0c 2f 02 c0       	mov    ds:0xc0022f0c,eax
c000c760:	8d 04 80             	lea    eax,[eax+eax*4]
c000c763:	8d 04 80             	lea    eax,[eax+eax*4]
c000c766:	c1 e0 02             	shl    eax,0x2
c000c769:	99                   	cdq    
c000c76a:	f7 3d 10 2f 02 c0    	idiv   DWORD PTR ds:0xc0022f10
c000c770:	39 05 08 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f08,eax
c000c776:	75 0c                	jne    c000c784 <Phys::allocatePage()+0xa9>
c000c778:	a1 00 2f 02 c0       	mov    eax,ds:0xc0022f00
c000c77d:	c1 e0 0c             	shl    eax,0xc
c000c780:	5a                   	pop    edx
c000c781:	5b                   	pop    ebx
c000c782:	5e                   	pop    esi
c000c783:	c3                   	ret    
c000c784:	83 ec 0c             	sub    esp,0xc
c000c787:	a3 08 2f 02 c0       	mov    ds:0xc0022f08,eax
c000c78c:	50                   	push   eax
c000c78d:	e8 9a 08 00 00       	call   c000d02c <VgaText::updateRAMUsageDisplay(int)>
c000c792:	83 c4 10             	add    esp,0x10
c000c795:	eb e1                	jmp    c000c778 <Phys::allocatePage()+0x9d>

c000c797 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c797:	56                   	push   esi
c000c798:	53                   	push   ebx
c000c799:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c79d:	39 1d 04 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f04,ebx
c000c7a3:	73 06                	jae    c000c7ab <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c7a5:	89 1d 04 2f 02 c0    	mov    DWORD PTR ds:0xc0022f04,ebx
c000c7ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c7af:	c1 eb 0c             	shr    ebx,0xc
c000c7b2:	c1 e8 0c             	shr    eax,0xc
c000c7b5:	39 d8                	cmp    eax,ebx
c000c7b7:	73 13                	jae    c000c7cc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c7b9:	6a 00                	push   0x0
c000c7bb:	8d 70 01             	lea    esi,[eax+0x1]
c000c7be:	50                   	push   eax
c000c7bf:	e8 3f fe ff ff       	call   c000c603 <Phys::setPageState(unsigned long, bool)>
c000c7c4:	5a                   	pop    edx
c000c7c5:	89 f0                	mov    eax,esi
c000c7c7:	59                   	pop    ecx
c000c7c8:	39 f3                	cmp    ebx,esi
c000c7ca:	75 ed                	jne    c000c7b9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c7cc:	5b                   	pop    ebx
c000c7cd:	5e                   	pop    esi
c000c7ce:	c3                   	ret    

c000c7cf <Phys::physicalMemorySetup(unsigned int)>:
c000c7cf:	55                   	push   ebp
c000c7d0:	57                   	push   edi
c000c7d1:	56                   	push   esi
c000c7d2:	53                   	push   ebx
c000c7d3:	31 db                	xor    ebx,ebx
c000c7d5:	83 ec 30             	sub    esp,0x30
c000c7d8:	6a 30                	push   0x30
c000c7da:	6a 00                	push   0x0
c000c7dc:	68 20 2f 02 c0       	push   0xc0022f20
c000c7e1:	e8 22 3e ff ff       	call   c0000608 <memset>
c000c7e6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000c7ea:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c7ef:	05 00 10 00 00       	add    eax,0x1000
c000c7f4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c7f8:	83 c4 10             	add    esp,0x10
c000c7fb:	83 ec 08             	sub    esp,0x8
c000c7fe:	6a 01                	push   0x1
c000c800:	53                   	push   ebx
c000c801:	43                   	inc    ebx
c000c802:	e8 fc fd ff ff       	call   c000c603 <Phys::setPageState(unsigned long, bool)>
c000c807:	83 c4 10             	add    esp,0x10
c000c80a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c810:	75 e9                	jne    c000c7fb <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c812:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c000c819:	66 85 c0             	test   ax,ax
c000c81c:	0f 84 28 01 00 00    	je     c000c94a <Phys::physicalMemorySetup(unsigned int)+0x17b>
c000c822:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c826:	8b 15 04 06 00 c2    	mov    edx,DWORD PTR ds:0xc2000604
c000c82c:	a1 00 06 00 c2       	mov    eax,ds:0xc2000600
c000c831:	8b 35 08 06 00 c2    	mov    esi,DWORD PTR ds:0xc2000608
c000c837:	8b 3d 0c 06 00 c2    	mov    edi,DWORD PTR ds:0xc200060c
c000c83d:	89 f1                	mov    ecx,esi
c000c83f:	89 fb                	mov    ebx,edi
c000c841:	01 c1                	add    ecx,eax
c000c843:	89 d5                	mov    ebp,edx
c000c845:	11 d3                	adc    ebx,edx
c000c847:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c84a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c84e:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c852:	8b 0d 10 06 00 c2    	mov    ecx,DWORD PTR ds:0xc2000610
c000c858:	09 dd                	or     ebp,ebx
c000c85a:	0f 85 fa 00 00 00    	jne    c000c95a <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c860:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c864:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000c86c:	c7 44 24 0c 00 06 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000600
c000c874:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000c878:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000c880:	eb 45                	jmp    c000c8c7 <Phys::physicalMemorySetup(unsigned int)+0xf8>
c000c882:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c000c886:	83 44 24 0c 18       	add    DWORD PTR [esp+0xc],0x18
c000c88b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c88f:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c000c893:	0f 84 c1 00 00 00    	je     c000c95a <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c899:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c89d:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c8a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c8a3:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c000c8a6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000c8a9:	89 c1                	mov    ecx,eax
c000c8ab:	89 d3                	mov    ebx,edx
c000c8ad:	01 f1                	add    ecx,esi
c000c8af:	11 fb                	adc    ebx,edi
c000c8b1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000c8b4:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c000c8b8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000c8bb:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c8bf:	09 d3                	or     ebx,edx
c000c8c1:	0f 85 93 00 00 00    	jne    c000c95a <Phys::physicalMemorySetup(unsigned int)+0x18b>
c000c8c7:	49                   	dec    ecx
c000c8c8:	75 b8                	jne    c000c882 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c8ca:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000c8cd:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000c8d1:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000c8d5:	39 e9                	cmp    ecx,ebp
c000c8d7:	89 d9                	mov    ecx,ebx
c000c8d9:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c8dd:	72 a3                	jb     c000c882 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c8df:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000c8e4:	39 f1                	cmp    ecx,esi
c000c8e6:	b9 00 00 00 00       	mov    ecx,0x0
c000c8eb:	19 f9                	sbb    ecx,edi
c000c8ed:	73 93                	jae    c000c882 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c8ef:	39 e8                	cmp    eax,ebp
c000c8f1:	89 d1                	mov    ecx,edx
c000c8f3:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c8f7:	73 13                	jae    c000c90c <Phys::physicalMemorySetup(unsigned int)+0x13d>
c000c8f9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000c8fc:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000c900:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000c904:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c908:	1b 7c 24 1c          	sbb    edi,DWORD PTR [esp+0x1c]
c000c90c:	83 ec 08             	sub    esp,0x8
c000c90f:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000c913:	50                   	push   eax
c000c914:	e8 7e fe ff ff       	call   c000c797 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c919:	83 c4 0c             	add    esp,0xc
c000c91c:	89 fa                	mov    edx,edi
c000c91e:	89 f0                	mov    eax,esi
c000c920:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c924:	03 05 10 2f 02 c0    	add    eax,DWORD PTR ds:0xc0022f10
c000c92a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c931:	a3 10 2f 02 c0       	mov    ds:0xc0022f10,eax
c000c936:	52                   	push   edx
c000c937:	50                   	push   eax
c000c938:	68 dd 01 02 c0       	push   0xc00201dd
c000c93d:	e8 f4 f1 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000c942:	83 c4 10             	add    esp,0x10
c000c945:	e9 38 ff ff ff       	jmp    c000c882 <Phys::physicalMemorySetup(unsigned int)+0xb3>
c000c94a:	83 ec 0c             	sub    esp,0xc
c000c94d:	68 cf 01 02 c0       	push   0xc00201cf
c000c952:	e8 fd f2 ff ff       	call   c000bc54 <panic(char const*)>
c000c957:	83 c4 10             	add    esp,0x10
c000c95a:	bb 40 01 00 00       	mov    ebx,0x140
c000c95f:	83 ec 08             	sub    esp,0x8
c000c962:	6a 00                	push   0x0
c000c964:	53                   	push   ebx
c000c965:	43                   	inc    ebx
c000c966:	e8 98 fc ff ff       	call   c000c603 <Phys::setPageState(unsigned long, bool)>
c000c96b:	ff 05 10 2f 02 c0    	inc    DWORD PTR ds:0xc0022f10
c000c971:	83 c4 10             	add    esp,0x10
c000c974:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c97a:	75 e3                	jne    c000c95f <Phys::physicalMemorySetup(unsigned int)+0x190>
c000c97c:	83 c4 2c             	add    esp,0x2c
c000c97f:	5b                   	pop    ebx
c000c980:	5e                   	pop    esi
c000c981:	5f                   	pop    edi
c000c982:	5d                   	pop    ebp
c000c983:	c3                   	ret    

c000c984 <Pipe::isAtty()>:
c000c984:	31 c0                	xor    eax,eax
c000c986:	c3                   	ret    
c000c987:	90                   	nop

c000c988 <Pipe::~Pipe()>:
c000c988:	83 ec 0c             	sub    esp,0xc
c000c98b:	ba 3c 02 02 c0       	mov    edx,0xc002023c
c000c990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c994:	89 10                	mov    DWORD PTR [eax],edx
c000c996:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c99a:	83 ec 0c             	sub    esp,0xc
c000c99d:	50                   	push   eax
c000c99e:	e8 f5 14 00 00       	call   c000de98 <UnixFile::~UnixFile()>
c000c9a3:	83 c4 10             	add    esp,0x10
c000c9a6:	90                   	nop
c000c9a7:	83 c4 0c             	add    esp,0xc
c000c9aa:	c3                   	ret    
c000c9ab:	90                   	nop

c000c9ac <Pipe::~Pipe()>:
c000c9ac:	83 ec 0c             	sub    esp,0xc
c000c9af:	83 ec 0c             	sub    esp,0xc
c000c9b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9b6:	e8 cd ff ff ff       	call   c000c988 <Pipe::~Pipe()>
c000c9bb:	83 c4 10             	add    esp,0x10
c000c9be:	83 ec 08             	sub    esp,0x8
c000c9c1:	6a 20                	push   0x20
c000c9c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9c7:	e8 4b 28 00 00       	call   c000f217 <operator delete(void*, unsigned long)>
c000c9cc:	83 c4 10             	add    esp,0x10
c000c9cf:	83 c4 0c             	add    esp,0xc
c000c9d2:	c3                   	ret    
c000c9d3:	90                   	nop

c000c9d4 <Pipe::read(unsigned long long, void*, int*)>:
c000c9d4:	55                   	push   ebp
c000c9d5:	57                   	push   edi
c000c9d6:	56                   	push   esi
c000c9d7:	53                   	push   ebx
c000c9d8:	83 ec 1c             	sub    esp,0x1c
c000c9db:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c9df:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c9e3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c9e7:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c9ea:	89 c8                	mov    eax,ecx
c000c9ec:	99                   	cdq    
c000c9ed:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c9f1:	74 19                	je     c000ca0c <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c9f3:	39 f9                	cmp    ecx,edi
c000c9f5:	89 d1                	mov    ecx,edx
c000c9f7:	19 f1                	sbb    ecx,esi
c000c9f9:	73 11                	jae    c000ca0c <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c9fb:	e8 08 ac 00 00       	call   c0017608 <lockScheduler()>
c000ca00:	e8 37 af 00 00       	call   c001793c <schedule()>
c000ca05:	e8 00 ac 00 00       	call   c001760a <unlockScheduler()>
c000ca0a:	eb db                	jmp    c000c9e7 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000ca0c:	39 f8                	cmp    eax,edi
c000ca0e:	89 d1                	mov    ecx,edx
c000ca10:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000ca14:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000ca18:	19 f1                	sbb    ecx,esi
c000ca1a:	73 08                	jae    c000ca24 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000ca1c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca20:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca24:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca27:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ca2a:	29 c6                	sub    esi,eax
c000ca2c:	89 f1                	mov    ecx,esi
c000ca2e:	c1 f9 1f             	sar    ecx,0x1f
c000ca31:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000ca35:	89 ca                	mov    edx,ecx
c000ca37:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ca3b:	19 d1                	sbb    ecx,edx
c000ca3d:	73 04                	jae    c000ca43 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000ca3f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000ca43:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000ca47:	89 fd                	mov    ebp,edi
c000ca49:	29 f5                	sub    ebp,esi
c000ca4b:	85 f6                	test   esi,esi
c000ca4d:	74 12                	je     c000ca61 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000ca4f:	52                   	push   edx
c000ca50:	56                   	push   esi
c000ca51:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000ca54:	50                   	push   eax
c000ca55:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ca59:	e8 74 3b ff ff       	call   c00005d2 <memcpy>
c000ca5e:	83 c4 10             	add    esp,0x10
c000ca61:	85 ed                	test   ebp,ebp
c000ca63:	74 12                	je     c000ca77 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000ca65:	50                   	push   eax
c000ca66:	55                   	push   ebp
c000ca67:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000ca6a:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000ca6e:	56                   	push   esi
c000ca6f:	e8 5e 3b ff ff       	call   c00005d2 <memcpy>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000ca7a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca7d:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000ca80:	99                   	cdq    
c000ca81:	89 f7                	mov    edi,esi
c000ca83:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000ca87:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000ca8b:	c1 ff 1f             	sar    edi,0x1f
c000ca8e:	57                   	push   edi
c000ca8f:	56                   	push   esi
c000ca90:	52                   	push   edx
c000ca91:	50                   	push   eax
c000ca92:	e8 35 17 01 00       	call   c001e1cc <__umoddi3>
c000ca97:	83 c4 10             	add    esp,0x10
c000ca9a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ca9d:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000caa2:	75 10                	jne    c000cab4 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000caa4:	83 ec 0c             	sub    esp,0xc
c000caa7:	68 f9 01 02 c0       	push   0xc00201f9
c000caac:	e8 a3 f1 ff ff       	call   c000bc54 <panic(char const*)>
c000cab1:	83 c4 10             	add    esp,0x10
c000cab4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cab8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cabc:	89 10                	mov    DWORD PTR [eax],edx
c000cabe:	83 c4 1c             	add    esp,0x1c
c000cac1:	31 c0                	xor    eax,eax
c000cac3:	5b                   	pop    ebx
c000cac4:	5e                   	pop    esi
c000cac5:	5f                   	pop    edi
c000cac6:	5d                   	pop    ebp
c000cac7:	c3                   	ret    

c000cac8 <Pipe::write(unsigned long long, void*, int*)>:
c000cac8:	55                   	push   ebp
c000cac9:	57                   	push   edi
c000caca:	56                   	push   esi
c000cacb:	53                   	push   ebx
c000cacc:	83 ec 1c             	sub    esp,0x1c
c000cacf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cad3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000cad7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000cadb:	89 04 24             	mov    DWORD PTR [esp],eax
c000cade:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000cae1:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000cae4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000cae8:	89 de                	mov    esi,ebx
c000caea:	89 df                	mov    edi,ebx
c000caec:	c1 ff 1f             	sar    edi,0x1f
c000caef:	01 c6                	add    esi,eax
c000caf1:	89 c8                	mov    eax,ecx
c000caf3:	11 d7                	adc    edi,edx
c000caf5:	99                   	cdq    
c000caf6:	39 f1                	cmp    ecx,esi
c000caf8:	89 d0                	mov    eax,edx
c000cafa:	19 f8                	sbb    eax,edi
c000cafc:	b8 01 00 00 00       	mov    eax,0x1
c000cb01:	0f 82 80 00 00 00    	jb     c000cb87 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000cb07:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000cb0a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000cb0d:	01 d8                	add    eax,ebx
c000cb0f:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000cb13:	99                   	cdq    
c000cb14:	f7 f9                	idiv   ecx
c000cb16:	29 d1                	sub    ecx,edx
c000cb18:	89 d7                	mov    edi,edx
c000cb1a:	89 c8                	mov    eax,ecx
c000cb1c:	99                   	cdq    
c000cb1d:	39 ce                	cmp    esi,ecx
c000cb1f:	19 d3                	sbb    ebx,edx
c000cb21:	bb 00 00 00 00       	mov    ebx,0x0
c000cb26:	72 04                	jb     c000cb2c <Pipe::write(unsigned long long, void*, int*)+0x64>
c000cb28:	89 f3                	mov    ebx,esi
c000cb2a:	29 cb                	sub    ebx,ecx
c000cb2c:	89 f1                	mov    ecx,esi
c000cb2e:	29 d9                	sub    ecx,ebx
c000cb30:	74 1a                	je     c000cb4c <Pipe::write(unsigned long long, void*, int*)+0x84>
c000cb32:	52                   	push   edx
c000cb33:	51                   	push   ecx
c000cb34:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cb38:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000cb3c:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000cb3f:	57                   	push   edi
c000cb40:	e8 8d 3a ff ff       	call   c00005d2 <memcpy>
c000cb45:	83 c4 10             	add    esp,0x10
c000cb48:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cb4c:	85 db                	test   ebx,ebx
c000cb4e:	74 12                	je     c000cb62 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000cb50:	50                   	push   eax
c000cb51:	53                   	push   ebx
c000cb52:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000cb56:	51                   	push   ecx
c000cb57:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000cb5a:	e8 73 3a ff ff       	call   c00005d2 <memcpy>
c000cb5f:	83 c4 10             	add    esp,0x10
c000cb62:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000cb65:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000cb6a:	75 10                	jne    c000cb7c <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000cb6c:	83 ec 0c             	sub    esp,0xc
c000cb6f:	68 15 02 02 c0       	push   0xc0020215
c000cb74:	e8 db f0 ff ff       	call   c000bc54 <panic(char const*)>
c000cb79:	83 c4 10             	add    esp,0x10
c000cb7c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cb80:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000cb83:	89 38                	mov    DWORD PTR [eax],edi
c000cb85:	31 c0                	xor    eax,eax
c000cb87:	83 c4 1c             	add    esp,0x1c
c000cb8a:	5b                   	pop    ebx
c000cb8b:	5e                   	pop    esi
c000cb8c:	5f                   	pop    edi
c000cb8d:	5d                   	pop    ebp
c000cb8e:	c3                   	ret    
c000cb8f:	90                   	nop

c000cb90 <Pipe::Pipe(int)>:
c000cb90:	83 ec 0c             	sub    esp,0xc
c000cb93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb97:	83 ec 08             	sub    esp,0x8
c000cb9a:	6a 00                	push   0x0
c000cb9c:	50                   	push   eax
c000cb9d:	e8 92 12 00 00       	call   c000de34 <UnixFile::UnixFile(int)>
c000cba2:	83 c4 10             	add    esp,0x10
c000cba5:	ba 3c 02 02 c0       	mov    edx,0xc002023c
c000cbaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbae:	89 10                	mov    DWORD PTR [eax],edx
c000cbb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbb4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cbb8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000cbbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbbf:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000cbc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbca:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000cbd1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cbd5:	83 ec 0c             	sub    esp,0xc
c000cbd8:	50                   	push   eax
c000cbd9:	e8 53 f5 ff ff       	call   c000c131 <malloc>
c000cbde:	83 c4 10             	add    esp,0x10
c000cbe1:	89 c2                	mov    edx,eax
c000cbe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbe7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000cbea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cbee:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000cbf2:	90                   	nop
c000cbf3:	83 c4 0c             	add    esp,0xc
c000cbf6:	c3                   	ret    
c000cbf7:	90                   	nop

c000cbf8 <VgaText::isAtty()>:
c000cbf8:	b0 01                	mov    al,0x1
c000cbfa:	c3                   	ret    
c000cbfb:	90                   	nop

c000cbfc <VgaText::~VgaText()>:
c000cbfc:	83 ec 0c             	sub    esp,0xc
c000cbff:	ba f8 02 02 c0       	mov    edx,0xc00202f8
c000cc04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc08:	89 10                	mov    DWORD PTR [eax],edx
c000cc0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cc0e:	83 ec 0c             	sub    esp,0xc
c000cc11:	50                   	push   eax
c000cc12:	e8 81 12 00 00       	call   c000de98 <UnixFile::~UnixFile()>
c000cc17:	83 c4 10             	add    esp,0x10
c000cc1a:	90                   	nop
c000cc1b:	83 c4 0c             	add    esp,0xc
c000cc1e:	c3                   	ret    
c000cc1f:	90                   	nop

c000cc20 <VgaText::~VgaText()>:
c000cc20:	83 ec 0c             	sub    esp,0xc
c000cc23:	83 ec 0c             	sub    esp,0xc
c000cc26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc2a:	e8 cd ff ff ff       	call   c000cbfc <VgaText::~VgaText()>
c000cc2f:	83 c4 10             	add    esp,0x10
c000cc32:	83 ec 08             	sub    esp,0x8
c000cc35:	68 60 12 00 00       	push   0x1260
c000cc3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc3e:	e8 d4 25 00 00       	call   c000f217 <operator delete(void*, unsigned long)>
c000cc43:	83 c4 10             	add    esp,0x10
c000cc46:	83 c4 0c             	add    esp,0xc
c000cc49:	c3                   	ret    

c000cc4a <VgaText::read(unsigned long long, void*, int*)>:
c000cc4a:	83 ec 10             	sub    esp,0x10
c000cc4d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cc51:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cc55:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cc59:	e8 38 4f 00 00       	call   c0011b96 <readKeyboard(VgaText*, char*, unsigned long)>
c000cc5e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cc62:	89 02                	mov    DWORD PTR [edx],eax
c000cc64:	31 c0                	xor    eax,eax
c000cc66:	83 c4 1c             	add    esp,0x1c
c000cc69:	c3                   	ret    

c000cc6a <setTerminalScrollLock(bool)>:
c000cc6a:	c3                   	ret    

c000cc6b <addToTerminalCycle(VgaText*)>:
c000cc6b:	8b 15 80 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f80
c000cc71:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc75:	85 d2                	test   edx,edx
c000cc77:	75 0c                	jne    c000cc85 <addToTerminalCycle(VgaText*)+0x1a>
c000cc79:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000cc7f:	a3 80 2f 02 c0       	mov    ds:0xc0022f80,eax
c000cc84:	c3                   	ret    
c000cc85:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000cc8b:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000cc91:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000cc97:	c3                   	ret    

c000cc98 <installVgaTextImplementation()>:
c000cc98:	83 ec 10             	sub    esp,0x10
c000cc9b:	6a 20                	push   0x20
c000cc9d:	6a 00                	push   0x0
c000cc9f:	68 60 2f 02 c0       	push   0xc0022f60
c000cca4:	e8 5f 39 ff ff       	call   c0000608 <memset>
c000cca9:	83 c4 1c             	add    esp,0x1c
c000ccac:	c3                   	ret    

c000ccad <scrollTerminalScrollLock(int)>:
c000ccad:	c3                   	ret    

c000ccae <VgaText::load()>:
c000ccae:	53                   	push   ebx
c000ccaf:	31 c0                	xor    eax,eax
c000ccb1:	83 ec 58             	sub    esp,0x58
c000ccb4:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ccb8:	89 e2                	mov    edx,esp
c000ccba:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000ccbe:	40                   	inc    eax
c000ccbf:	83 f8 50             	cmp    eax,0x50
c000ccc2:	75 f6                	jne    c000ccba <VgaText::load()+0xc>
c000ccc4:	31 c0                	xor    eax,eax
c000ccc6:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000cccd:	84 c9                	test   cl,cl
c000cccf:	74 06                	je     c000ccd7 <VgaText::load()+0x29>
c000ccd1:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000ccd4:	40                   	inc    eax
c000ccd5:	eb ef                	jmp    c000ccc6 <VgaText::load()+0x18>
c000ccd7:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000ccdd:	85 c0                	test   eax,eax
c000ccdf:	74 09                	je     c000ccea <VgaText::load()+0x3c>
c000cce1:	51                   	push   ecx
c000cce2:	51                   	push   ecx
c000cce3:	52                   	push   edx
c000cce4:	53                   	push   ebx
c000cce5:	ff d0                	call   eax
c000cce7:	83 c4 10             	add    esp,0x10
c000ccea:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000ccf0:	85 c0                	test   eax,eax
c000ccf2:	74 09                	je     c000ccfd <VgaText::load()+0x4f>
c000ccf4:	83 ec 0c             	sub    esp,0xc
c000ccf7:	53                   	push   ebx
c000ccf8:	ff d0                	call   eax
c000ccfa:	83 c4 10             	add    esp,0x10
c000ccfd:	83 c4 58             	add    esp,0x58
c000cd00:	5b                   	pop    ebx
c000cd01:	c3                   	ret    

c000cd02 <VgaText::updateCursor()>:
c000cd02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd06:	39 05 84 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f84,eax
c000cd0c:	75 0c                	jne    c000cd1a <VgaText::updateCursor()+0x18>
c000cd0e:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000cd14:	85 c0                	test   eax,eax
c000cd16:	74 02                	je     c000cd1a <VgaText::updateCursor()+0x18>
c000cd18:	ff e0                	jmp    eax
c000cd1a:	c3                   	ret    
c000cd1b:	90                   	nop

c000cd1c <VgaText::showCursor(bool)>:
c000cd1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd24:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000cd2a:	c3                   	ret    
c000cd2b:	90                   	nop

c000cd2c <VgaText::disableBlink(bool)>:
c000cd2c:	56                   	push   esi
c000cd2d:	53                   	push   ebx
c000cd2e:	51                   	push   ecx
c000cd2f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cd33:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cd37:	39 1d 84 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f84,ebx
c000cd3d:	75 18                	jne    c000cd57 <VgaText::disableBlink(bool)+0x2b>
c000cd3f:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000cd45:	85 c0                	test   eax,eax
c000cd47:	74 0e                	je     c000cd57 <VgaText::disableBlink(bool)+0x2b>
c000cd49:	89 f1                	mov    ecx,esi
c000cd4b:	52                   	push   edx
c000cd4c:	52                   	push   edx
c000cd4d:	0f b6 d1             	movzx  edx,cl
c000cd50:	52                   	push   edx
c000cd51:	53                   	push   ebx
c000cd52:	ff d0                	call   eax
c000cd54:	83 c4 10             	add    esp,0x10
c000cd57:	89 f0                	mov    eax,esi
c000cd59:	83 f0 01             	xor    eax,0x1
c000cd5c:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000cd62:	58                   	pop    eax
c000cd63:	5b                   	pop    ebx
c000cd64:	5e                   	pop    esi
c000cd65:	c3                   	ret    

c000cd66 <VgaText::doANSI_SGR(int)>:
c000cd66:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd6e:	85 d2                	test   edx,edx
c000cd70:	75 14                	jne    c000cd86 <VgaText::doANSI_SGR(int)+0x20>
c000cd72:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000cd78:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd7e:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000cd84:	eb 65                	jmp    c000cdeb <VgaText::doANSI_SGR(int)+0x85>
c000cd86:	83 fa 07             	cmp    edx,0x7
c000cd89:	75 14                	jne    c000cd9f <VgaText::doANSI_SGR(int)+0x39>
c000cd8b:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000cd91:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000cd97:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000cd9d:	eb 4c                	jmp    c000cdeb <VgaText::doANSI_SGR(int)+0x85>
c000cd9f:	83 fa 1b             	cmp    edx,0x1b
c000cda2:	74 ce                	je     c000cd72 <VgaText::doANSI_SGR(int)+0xc>
c000cda4:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000cda7:	83 f9 07             	cmp    ecx,0x7
c000cdaa:	77 09                	ja     c000cdb5 <VgaText::doANSI_SGR(int)+0x4f>
c000cdac:	8b 14 8d 20 23 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffddce0]
c000cdb3:	eb 20                	jmp    c000cdd5 <VgaText::doANSI_SGR(int)+0x6f>
c000cdb5:	8d 4a d8             	lea    ecx,[edx-0x28]
c000cdb8:	83 f9 07             	cmp    ecx,0x7
c000cdbb:	77 09                	ja     c000cdc6 <VgaText::doANSI_SGR(int)+0x60>
c000cdbd:	8b 14 8d 20 23 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffddce0]
c000cdc4:	eb 25                	jmp    c000cdeb <VgaText::doANSI_SGR(int)+0x85>
c000cdc6:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000cdc9:	83 f9 07             	cmp    ecx,0x7
c000cdcc:	77 0e                	ja     c000cddc <VgaText::doANSI_SGR(int)+0x76>
c000cdce:	8b 14 95 d8 21 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdde28]
c000cdd5:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cddb:	c3                   	ret    
c000cddc:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000cddf:	83 f9 07             	cmp    ecx,0x7
c000cde2:	77 0d                	ja     c000cdf1 <VgaText::doANSI_SGR(int)+0x8b>
c000cde4:	8b 14 95 b0 21 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdde50]
c000cdeb:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cdf1:	c3                   	ret    

c000cdf2 <VgaText::setDefaultBgColour(VgaColour)>:
c000cdf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cdf6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cdfa:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000ce00:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000ce06:	c3                   	ret    
c000ce07:	90                   	nop

c000ce08 <VgaText::setDefaultFgColour(VgaColour)>:
c000ce08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ce0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ce10:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000ce16:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000ce1c:	c3                   	ret    
c000ce1d:	90                   	nop

c000ce1e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000ce1e:	53                   	push   ebx
c000ce1f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000ce23:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ce27:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ce2b:	51                   	push   ecx
c000ce2c:	e8 c1 ff ff ff       	call   c000cdf2 <VgaText::setDefaultBgColour(VgaColour)>
c000ce31:	58                   	pop    eax
c000ce32:	5a                   	pop    edx
c000ce33:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ce37:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ce3b:	5b                   	pop    ebx
c000ce3c:	eb ca                	jmp    c000ce08 <VgaText::setDefaultFgColour(VgaColour)>

c000ce3e <VgaText::combineColours(unsigned char, unsigned char)>:
c000ce3e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000ce42:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000ce47:	83 e0 0f             	and    eax,0xf
c000ce4a:	c1 e2 04             	shl    edx,0x4
c000ce4d:	09 d0                	or     eax,edx
c000ce4f:	c3                   	ret    

c000ce50 <VgaText::scrollScreen()>:
c000ce50:	57                   	push   edi
c000ce51:	56                   	push   esi
c000ce52:	be 01 00 00 00       	mov    esi,0x1
c000ce57:	53                   	push   ebx
c000ce58:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ce5c:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000ce62:	31 ff                	xor    edi,edi
c000ce64:	01 d9                	add    ecx,ebx
c000ce66:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000ce69:	83 fe 17             	cmp    esi,0x17
c000ce6c:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000ce72:	75 28                	jne    c000ce9c <VgaText::scrollScreen()+0x4c>
c000ce74:	f7 c7 01 00 00 00    	test   edi,0x1
c000ce7a:	74 1c                	je     c000ce98 <VgaText::scrollScreen()+0x48>
c000ce7c:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000ce83:	50                   	push   eax
c000ce84:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000ce8b:	50                   	push   eax
c000ce8c:	e8 ad ff ff ff       	call   c000ce3e <VgaText::combineColours(unsigned char, unsigned char)>
c000ce91:	5a                   	pop    edx
c000ce92:	5a                   	pop    edx
c000ce93:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000ce96:	eb 04                	jmp    c000ce9c <VgaText::scrollScreen()+0x4c>
c000ce98:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000ce9c:	47                   	inc    edi
c000ce9d:	41                   	inc    ecx
c000ce9e:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000cea4:	75 c0                	jne    c000ce66 <VgaText::scrollScreen()+0x16>
c000cea6:	46                   	inc    esi
c000cea7:	83 fe 18             	cmp    esi,0x18
c000ceaa:	75 b0                	jne    c000ce5c <VgaText::scrollScreen()+0xc>
c000ceac:	39 1d 84 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f84,ebx
c000ceb2:	75 24                	jne    c000ced8 <VgaText::scrollScreen()+0x88>
c000ceb4:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000cebb:	74 08                	je     c000cec5 <VgaText::scrollScreen()+0x75>
c000cebd:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000cec3:	eb 13                	jmp    c000ced8 <VgaText::scrollScreen()+0x88>
c000cec5:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000cecb:	85 c0                	test   eax,eax
c000cecd:	74 09                	je     c000ced8 <VgaText::scrollScreen()+0x88>
c000cecf:	83 ec 0c             	sub    esp,0xc
c000ced2:	53                   	push   ebx
c000ced3:	ff d0                	call   eax
c000ced5:	83 c4 10             	add    esp,0x10
c000ced8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cedc:	5b                   	pop    ebx
c000cedd:	5e                   	pop    esi
c000cede:	5f                   	pop    edi
c000cedf:	e9 1e fe ff ff       	jmp    c000cd02 <VgaText::updateCursor()>

c000cee4 <VgaText::combineCharAndColour(char, unsigned char)>:
c000cee4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000cee9:	c1 e0 08             	shl    eax,0x8
c000ceec:	89 c2                	mov    edx,eax
c000ceee:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000cef3:	09 d0                	or     eax,edx
c000cef5:	c3                   	ret    

c000cef6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000cef6:	53                   	push   ebx
c000cef7:	83 ec 08             	sub    esp,0x8
c000cefa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cefe:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000cf03:	50                   	push   eax
c000cf04:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000cf09:	50                   	push   eax
c000cf0a:	e8 2f ff ff ff       	call   c000ce3e <VgaText::combineColours(unsigned char, unsigned char)>
c000cf0f:	5a                   	pop    edx
c000cf10:	0f b6 c0             	movzx  eax,al
c000cf13:	5b                   	pop    ebx
c000cf14:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000cf19:	50                   	push   eax
c000cf1a:	53                   	push   ebx
c000cf1b:	e8 c4 ff ff ff       	call   c000cee4 <VgaText::combineCharAndColour(char, unsigned char)>
c000cf20:	5a                   	pop    edx
c000cf21:	5a                   	pop    edx
c000cf22:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000cf28:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000cf2c:	0f b7 d2             	movzx  edx,dx
c000cf2f:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000cf34:	39 0d 84 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f84,ecx
c000cf3a:	75 14                	jne    c000cf50 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000cf3c:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000cf42:	85 c0                	test   eax,eax
c000cf44:	74 0a                	je     c000cf50 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000cf46:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000cf4a:	83 c4 08             	add    esp,0x8
c000cf4d:	5b                   	pop    ebx
c000cf4e:	ff e0                	jmp    eax
c000cf50:	83 c4 08             	add    esp,0x8
c000cf53:	5b                   	pop    ebx
c000cf54:	c3                   	ret    
c000cf55:	90                   	nop

c000cf56 <VgaText::getCursorX()>:
c000cf56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf5a:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000cf60:	c3                   	ret    
c000cf61:	90                   	nop

c000cf62 <VgaText::getCursorY()>:
c000cf62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf66:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000cf6c:	c3                   	ret    
c000cf6d:	90                   	nop

c000cf6e <VgaText::setCursor(int, int)>:
c000cf6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cf72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cf76:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000cf7c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cf80:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000cf86:	e9 77 fd ff ff       	jmp    c000cd02 <VgaText::updateCursor()>
c000cf8b:	90                   	nop

c000cf8c <VgaText::setCursorX(int)>:
c000cf8c:	83 ec 10             	sub    esp,0x10
c000cf8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf93:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000cf99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf9d:	50                   	push   eax
c000cf9e:	e8 cb ff ff ff       	call   c000cf6e <VgaText::setCursor(int, int)>
c000cfa3:	83 c4 1c             	add    esp,0x1c
c000cfa6:	c3                   	ret    
c000cfa7:	90                   	nop

c000cfa8 <VgaText::setCursorY(int)>:
c000cfa8:	83 ec 10             	sub    esp,0x10
c000cfab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cfaf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cfb3:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000cfb9:	50                   	push   eax
c000cfba:	e8 af ff ff ff       	call   c000cf6e <VgaText::setCursor(int, int)>
c000cfbf:	83 c4 1c             	add    esp,0x1c
c000cfc2:	c3                   	ret    
c000cfc3:	90                   	nop

c000cfc4 <VgaText::incrementCursor(bool)>:
c000cfc4:	56                   	push   esi
c000cfc5:	53                   	push   ebx
c000cfc6:	51                   	push   ecx
c000cfc7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cfcb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cfcf:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cfd5:	40                   	inc    eax
c000cfd6:	83 f8 50             	cmp    eax,0x50
c000cfd9:	74 08                	je     c000cfe3 <VgaText::incrementCursor(bool)+0x1f>
c000cfdb:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cfe1:	eb 33                	jmp    c000d016 <VgaText::incrementCursor(bool)+0x52>
c000cfe3:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cfe9:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cff3:	8d 50 01             	lea    edx,[eax+0x1]
c000cff6:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cffc:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000d002:	75 12                	jne    c000d016 <VgaText::incrementCursor(bool)+0x52>
c000d004:	83 ec 0c             	sub    esp,0xc
c000d007:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000d00d:	53                   	push   ebx
c000d00e:	e8 3d fe ff ff       	call   c000ce50 <VgaText::scrollScreen()>
c000d013:	83 c4 10             	add    esp,0x10
c000d016:	89 f0                	mov    eax,esi
c000d018:	84 c0                	test   al,al
c000d01a:	74 0c                	je     c000d028 <VgaText::incrementCursor(bool)+0x64>
c000d01c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d020:	5a                   	pop    edx
c000d021:	5b                   	pop    ebx
c000d022:	5e                   	pop    esi
c000d023:	e9 da fc ff ff       	jmp    c000cd02 <VgaText::updateCursor()>
c000d028:	58                   	pop    eax
c000d029:	5b                   	pop    ebx
c000d02a:	5e                   	pop    esi
c000d02b:	c3                   	ret    

c000d02c <VgaText::updateRAMUsageDisplay(int)>:
c000d02c:	53                   	push   ebx
c000d02d:	bb 0a 00 00 00       	mov    ebx,0xa
c000d032:	6a 0f                	push   0xf
c000d034:	6a 00                	push   0x0
c000d036:	e8 03 fe ff ff       	call   c000ce3e <VgaText::combineColours(unsigned char, unsigned char)>
c000d03b:	5a                   	pop    edx
c000d03c:	59                   	pop    ecx
c000d03d:	0f b6 c8             	movzx  ecx,al
c000d040:	51                   	push   ecx
c000d041:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d045:	99                   	cdq    
c000d046:	f7 fb                	idiv   ebx
c000d048:	89 d3                	mov    ebx,edx
c000d04a:	83 c0 30             	add    eax,0x30
c000d04d:	83 c3 30             	add    ebx,0x30
c000d050:	0f be c0             	movsx  eax,al
c000d053:	0f b6 db             	movzx  ebx,bl
c000d056:	50                   	push   eax
c000d057:	e8 88 fe ff ff       	call   c000cee4 <VgaText::combineCharAndColour(char, unsigned char)>
c000d05c:	5a                   	pop    edx
c000d05d:	5a                   	pop    edx
c000d05e:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000d064:	51                   	push   ecx
c000d065:	53                   	push   ebx
c000d066:	e8 79 fe ff ff       	call   c000cee4 <VgaText::combineCharAndColour(char, unsigned char)>
c000d06b:	5b                   	pop    ebx
c000d06c:	5a                   	pop    edx
c000d06d:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000d073:	51                   	push   ecx
c000d074:	6a 25                	push   0x25
c000d076:	e8 69 fe ff ff       	call   c000cee4 <VgaText::combineCharAndColour(char, unsigned char)>
c000d07b:	59                   	pop    ecx
c000d07c:	5b                   	pop    ebx
c000d07d:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000d083:	5b                   	pop    ebx
c000d084:	c3                   	ret    
c000d085:	90                   	nop

c000d086 <VgaText::updateDiskUsage()>:
c000d086:	55                   	push   ebp
c000d087:	bd 10 27 00 00       	mov    ebp,0x2710
c000d08c:	57                   	push   edi
c000d08d:	56                   	push   esi
c000d08e:	53                   	push   ebx
c000d08f:	6a 0f                	push   0xf
c000d091:	6a 00                	push   0x0
c000d093:	e8 a6 fd ff ff       	call   c000ce3e <VgaText::combineColours(unsigned char, unsigned char)>
c000d098:	5a                   	pop    edx
c000d099:	0f b6 d8             	movzx  ebx,al
c000d09c:	59                   	pop    ecx
c000d09d:	a1 e4 4b 02 c0       	mov    eax,ds:0xc0024be4
c000d0a2:	53                   	push   ebx
c000d0a3:	b9 0a 00 00 00       	mov    ecx,0xa
c000d0a8:	99                   	cdq    
c000d0a9:	f7 fd                	idiv   ebp
c000d0ab:	99                   	cdq    
c000d0ac:	f7 f9                	idiv   ecx
c000d0ae:	8d 42 30             	lea    eax,[edx+0x30]
c000d0b1:	0f b6 c0             	movzx  eax,al
c000d0b4:	50                   	push   eax
c000d0b5:	e8 2a fe ff ff       	call   c000cee4 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0ba:	5e                   	pop    esi
c000d0bb:	5f                   	pop    edi
c000d0bc:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000d0c2:	bf e8 03 00 00       	mov    edi,0x3e8
c000d0c7:	53                   	push   ebx
c000d0c8:	a1 e4 4b 02 c0       	mov    eax,ds:0xc0024be4
c000d0cd:	99                   	cdq    
c000d0ce:	f7 ff                	idiv   edi
c000d0d0:	99                   	cdq    
c000d0d1:	f7 f9                	idiv   ecx
c000d0d3:	8d 42 30             	lea    eax,[edx+0x30]
c000d0d6:	0f b6 c0             	movzx  eax,al
c000d0d9:	50                   	push   eax
c000d0da:	e8 05 fe ff ff       	call   c000cee4 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0df:	5a                   	pop    edx
c000d0e0:	5e                   	pop    esi
c000d0e1:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000d0e7:	be 64 00 00 00       	mov    esi,0x64
c000d0ec:	53                   	push   ebx
c000d0ed:	a1 e4 4b 02 c0       	mov    eax,ds:0xc0024be4
c000d0f2:	99                   	cdq    
c000d0f3:	f7 fe                	idiv   esi
c000d0f5:	99                   	cdq    
c000d0f6:	f7 f9                	idiv   ecx
c000d0f8:	8d 42 30             	lea    eax,[edx+0x30]
c000d0fb:	0f b6 c0             	movzx  eax,al
c000d0fe:	50                   	push   eax
c000d0ff:	e8 e0 fd ff ff       	call   c000cee4 <VgaText::combineCharAndColour(char, unsigned char)>
c000d104:	5a                   	pop    edx
c000d105:	5a                   	pop    edx
c000d106:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000d10c:	53                   	push   ebx
c000d10d:	a1 e4 4b 02 c0       	mov    eax,ds:0xc0024be4
c000d112:	99                   	cdq    
c000d113:	f7 f9                	idiv   ecx
c000d115:	99                   	cdq    
c000d116:	f7 f9                	idiv   ecx
c000d118:	8d 42 30             	lea    eax,[edx+0x30]
c000d11b:	0f b6 c0             	movzx  eax,al
c000d11e:	50                   	push   eax
c000d11f:	e8 c0 fd ff ff       	call   c000cee4 <VgaText::combineCharAndColour(char, unsigned char)>
c000d124:	5a                   	pop    edx
c000d125:	5a                   	pop    edx
c000d126:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000d12c:	53                   	push   ebx
c000d12d:	a1 e4 4b 02 c0       	mov    eax,ds:0xc0024be4
c000d132:	99                   	cdq    
c000d133:	f7 f9                	idiv   ecx
c000d135:	8d 42 30             	lea    eax,[edx+0x30]
c000d138:	0f b6 c0             	movzx  eax,al
c000d13b:	50                   	push   eax
c000d13c:	e8 a3 fd ff ff       	call   c000cee4 <VgaText::combineCharAndColour(char, unsigned char)>
c000d141:	5a                   	pop    edx
c000d142:	5a                   	pop    edx
c000d143:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000d149:	53                   	push   ebx
c000d14a:	a1 e0 4b 02 c0       	mov    eax,ds:0xc0024be0
c000d14f:	99                   	cdq    
c000d150:	f7 fd                	idiv   ebp
c000d152:	99                   	cdq    
c000d153:	f7 f9                	idiv   ecx
c000d155:	8d 42 30             	lea    eax,[edx+0x30]
c000d158:	0f b6 c0             	movzx  eax,al
c000d15b:	50                   	push   eax
c000d15c:	e8 83 fd ff ff       	call   c000cee4 <VgaText::combineCharAndColour(char, unsigned char)>
c000d161:	5d                   	pop    ebp
c000d162:	5a                   	pop    edx
c000d163:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000d169:	53                   	push   ebx
c000d16a:	a1 e0 4b 02 c0       	mov    eax,ds:0xc0024be0
c000d16f:	99                   	cdq    
c000d170:	f7 ff                	idiv   edi
c000d172:	99                   	cdq    
c000d173:	f7 f9                	idiv   ecx
c000d175:	8d 42 30             	lea    eax,[edx+0x30]
c000d178:	0f b6 c0             	movzx  eax,al
c000d17b:	50                   	push   eax
c000d17c:	e8 63 fd ff ff       	call   c000cee4 <VgaText::combineCharAndColour(char, unsigned char)>
c000d181:	5f                   	pop    edi
c000d182:	5d                   	pop    ebp
c000d183:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000d189:	53                   	push   ebx
c000d18a:	a1 e0 4b 02 c0       	mov    eax,ds:0xc0024be0
c000d18f:	99                   	cdq    
c000d190:	f7 fe                	idiv   esi
c000d192:	99                   	cdq    
c000d193:	f7 f9                	idiv   ecx
c000d195:	8d 42 30             	lea    eax,[edx+0x30]
c000d198:	0f b6 c0             	movzx  eax,al
c000d19b:	50                   	push   eax
c000d19c:	e8 43 fd ff ff       	call   c000cee4 <VgaText::combineCharAndColour(char, unsigned char)>
c000d1a1:	5a                   	pop    edx
c000d1a2:	5e                   	pop    esi
c000d1a3:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000d1a9:	53                   	push   ebx
c000d1aa:	a1 e0 4b 02 c0       	mov    eax,ds:0xc0024be0
c000d1af:	99                   	cdq    
c000d1b0:	f7 f9                	idiv   ecx
c000d1b2:	99                   	cdq    
c000d1b3:	f7 f9                	idiv   ecx
c000d1b5:	8d 42 30             	lea    eax,[edx+0x30]
c000d1b8:	0f b6 c0             	movzx  eax,al
c000d1bb:	50                   	push   eax
c000d1bc:	e8 23 fd ff ff       	call   c000cee4 <VgaText::combineCharAndColour(char, unsigned char)>
c000d1c1:	5f                   	pop    edi
c000d1c2:	5d                   	pop    ebp
c000d1c3:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000d1c9:	53                   	push   ebx
c000d1ca:	a1 e0 4b 02 c0       	mov    eax,ds:0xc0024be0
c000d1cf:	99                   	cdq    
c000d1d0:	f7 f9                	idiv   ecx
c000d1d2:	83 c2 30             	add    edx,0x30
c000d1d5:	0f b6 d2             	movzx  edx,dl
c000d1d8:	52                   	push   edx
c000d1d9:	e8 06 fd ff ff       	call   c000cee4 <VgaText::combineCharAndColour(char, unsigned char)>
c000d1de:	5a                   	pop    edx
c000d1df:	59                   	pop    ecx
c000d1e0:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000d1e6:	5b                   	pop    ebx
c000d1e7:	5e                   	pop    esi
c000d1e8:	5f                   	pop    edi
c000d1e9:	5d                   	pop    ebp
c000d1ea:	c3                   	ret    
c000d1eb:	90                   	nop

c000d1ec <VgaText::updateTitle()>:
c000d1ec:	53                   	push   ebx
c000d1ed:	31 c0                	xor    eax,eax
c000d1ef:	83 ec 58             	sub    esp,0x58
c000d1f2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000d1f6:	89 e1                	mov    ecx,esp
c000d1f8:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000d1fc:	40                   	inc    eax
c000d1fd:	83 f8 50             	cmp    eax,0x50
c000d200:	75 f6                	jne    c000d1f8 <VgaText::updateTitle()+0xc>
c000d202:	31 c0                	xor    eax,eax
c000d204:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000d20b:	84 db                	test   bl,bl
c000d20d:	74 06                	je     c000d215 <VgaText::updateTitle()+0x29>
c000d20f:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000d212:	40                   	inc    eax
c000d213:	eb ef                	jmp    c000d204 <VgaText::updateTitle()+0x18>
c000d215:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000d21b:	85 c0                	test   eax,eax
c000d21d:	74 09                	je     c000d228 <VgaText::updateTitle()+0x3c>
c000d21f:	53                   	push   ebx
c000d220:	53                   	push   ebx
c000d221:	51                   	push   ecx
c000d222:	52                   	push   edx
c000d223:	ff d0                	call   eax
c000d225:	83 c4 10             	add    esp,0x10
c000d228:	e8 59 fe ff ff       	call   c000d086 <VgaText::updateDiskUsage()>
c000d22d:	83 c4 58             	add    esp,0x58
c000d230:	5b                   	pop    ebx
c000d231:	c3                   	ret    

c000d232 <VgaText::setTitleTextColour(VgaColour)>:
c000d232:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d236:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d23a:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000d240:	eb aa                	jmp    c000d1ec <VgaText::updateTitle()>

c000d242 <VgaText::setTitleColour(VgaColour)>:
c000d242:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d246:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d24a:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000d250:	eb 9a                	jmp    c000d1ec <VgaText::updateTitle()>

c000d252 <VgaText::setTitle(char*)>:
c000d252:	53                   	push   ebx
c000d253:	83 ec 10             	sub    esp,0x10
c000d256:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d25a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d25e:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000d264:	50                   	push   eax
c000d265:	e8 3d 34 ff ff       	call   c00006a7 <strcpy>
c000d26a:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000d26e:	83 c4 18             	add    esp,0x18
c000d271:	5b                   	pop    ebx
c000d272:	e9 75 ff ff ff       	jmp    c000d1ec <VgaText::updateTitle()>
c000d277:	90                   	nop

c000d278 <VgaText::decrementCursor(bool)>:
c000d278:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d27c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d280:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000d286:	85 c0                	test   eax,eax
c000d288:	74 07                	je     c000d291 <VgaText::decrementCursor(bool)+0x19>
c000d28a:	48                   	dec    eax
c000d28b:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000d291:	84 c9                	test   cl,cl
c000d293:	74 09                	je     c000d29e <VgaText::decrementCursor(bool)+0x26>
c000d295:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d299:	e9 64 fa ff ff       	jmp    c000cd02 <VgaText::updateCursor()>
c000d29e:	c3                   	ret    
c000d29f:	90                   	nop

c000d2a0 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000d2a0:	53                   	push   ebx
c000d2a1:	83 ec 08             	sub    esp,0x8
c000d2a4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d2a8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d2ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d2b0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d2b4:	3c 07                	cmp    al,0x7
c000d2b6:	75 2a                	jne    c000d2e2 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000d2b8:	a1 a4 2f 02 c0       	mov    eax,ds:0xc0022fa4
c000d2bd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000d2c5:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000d2cd:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000d2d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2d9:	83 c4 08             	add    esp,0x8
c000d2dc:	5b                   	pop    ebx
c000d2dd:	e9 10 2c 00 00       	jmp    c000fef2 <Buzzer::beep(int, int, bool)>
c000d2e2:	3c 0d                	cmp    al,0xd
c000d2e4:	75 0c                	jne    c000d2f2 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000d2e6:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d2f0:	eb 3b                	jmp    c000d32d <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000d2f2:	3c 0a                	cmp    al,0xa
c000d2f4:	75 40                	jne    c000d336 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000d2f6:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000d2fc:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d306:	8d 50 01             	lea    edx,[eax+0x1]
c000d309:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000d30f:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000d315:	75 12                	jne    c000d329 <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000d317:	83 ec 0c             	sub    esp,0xc
c000d31a:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000d320:	53                   	push   ebx
c000d321:	e8 2a fb ff ff       	call   c000ce50 <VgaText::scrollScreen()>
c000d326:	83 c4 10             	add    esp,0x10
c000d329:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d32d:	83 c4 08             	add    esp,0x8
c000d330:	5b                   	pop    ebx
c000d331:	e9 cc f9 ff ff       	jmp    c000cd02 <VgaText::updateCursor()>
c000d336:	3c 08                	cmp    al,0x8
c000d338:	75 31                	jne    c000d36b <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000d33a:	50                   	push   eax
c000d33b:	50                   	push   eax
c000d33c:	6a 01                	push   0x1
c000d33e:	53                   	push   ebx
c000d33f:	e8 34 ff ff ff       	call   c000d278 <VgaText::decrementCursor(bool)>
c000d344:	5a                   	pop    edx
c000d345:	59                   	pop    ecx
c000d346:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d34c:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d352:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d358:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d35e:	6a 20                	push   0x20
c000d360:	53                   	push   ebx
c000d361:	e8 90 fb ff ff       	call   c000cef6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d366:	83 c4 28             	add    esp,0x28
c000d369:	5b                   	pop    ebx
c000d36a:	c3                   	ret    
c000d36b:	83 ec 08             	sub    esp,0x8
c000d36e:	0f be c0             	movsx  eax,al
c000d371:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d377:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d37d:	51                   	push   ecx
c000d37e:	52                   	push   edx
c000d37f:	50                   	push   eax
c000d380:	53                   	push   ebx
c000d381:	e8 70 fb ff ff       	call   c000cef6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d386:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000d38a:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000d392:	83 c4 28             	add    esp,0x28
c000d395:	5b                   	pop    ebx
c000d396:	e9 29 fc ff ff       	jmp    c000cfc4 <VgaText::incrementCursor(bool)>
c000d39b:	90                   	nop

c000d39c <VgaText::isShowingCursor()>:
c000d39c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3a0:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000d3a6:	c3                   	ret    
c000d3a7:	90                   	nop

c000d3a8 <VgaText::isBlinkDisabled()>:
c000d3a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3ac:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000d3b2:	83 f0 01             	xor    eax,0x1
c000d3b5:	c3                   	ret    

c000d3b6 <VgaText::setCursorHeight(int)>:
c000d3b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d3be:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000d3c4:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000d3cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d3cf:	e9 48 f9 ff ff       	jmp    c000cd1c <VgaText::showCursor(bool)>

c000d3d4 <VgaText::getCursorHeight()>:
c000d3d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3d8:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000d3de:	c3                   	ret    

c000d3df <setActiveTerminal(VgaText*)>:
c000d3df:	53                   	push   ebx
c000d3e0:	83 ec 08             	sub    esp,0x8
c000d3e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d3e7:	85 db                	test   ebx,ebx
c000d3e9:	75 11                	jne    c000d3fc <setActiveTerminal(VgaText*)+0x1d>
c000d3eb:	c7 44 24 10 50 02 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020250
c000d3f3:	83 c4 08             	add    esp,0x8
c000d3f6:	5b                   	pop    ebx
c000d3f7:	e9 58 e8 ff ff       	jmp    c000bc54 <panic(char const*)>
c000d3fc:	50                   	push   eax
c000d3fd:	50                   	push   eax
c000d3fe:	53                   	push   ebx
c000d3ff:	68 5e 02 02 c0       	push   0xc002025e
c000d404:	e8 2d e7 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000d409:	a1 84 2f 02 c0       	mov    eax,ds:0xc0022f84
c000d40e:	83 c4 10             	add    esp,0x10
c000d411:	85 c0                	test   eax,eax
c000d413:	74 0c                	je     c000d421 <setActiveTerminal(VgaText*)+0x42>
c000d415:	83 ec 0c             	sub    esp,0xc
c000d418:	50                   	push   eax
c000d419:	e8 e4 f8 ff ff       	call   c000cd02 <VgaText::updateCursor()>
c000d41e:	83 c4 10             	add    esp,0x10
c000d421:	89 1d 84 2f 02 c0    	mov    DWORD PTR ds:0xc0022f84,ebx
c000d427:	51                   	push   ecx
c000d428:	51                   	push   ecx
c000d429:	53                   	push   ebx
c000d42a:	68 76 02 02 c0       	push   0xc0020276
c000d42f:	e8 02 e7 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000d434:	83 c4 0c             	add    esp,0xc
c000d437:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d43d:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d443:	53                   	push   ebx
c000d444:	e8 25 fb ff ff       	call   c000cf6e <VgaText::setCursor(int, int)>
c000d449:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d44c:	e8 57 ff ff ff       	call   c000d3a8 <VgaText::isBlinkDisabled()>
c000d451:	5a                   	pop    edx
c000d452:	0f b6 c0             	movzx  eax,al
c000d455:	59                   	pop    ecx
c000d456:	50                   	push   eax
c000d457:	53                   	push   ebx
c000d458:	e8 cf f8 ff ff       	call   c000cd2c <VgaText::disableBlink(bool)>
c000d45d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d460:	e8 6f ff ff ff       	call   c000d3d4 <VgaText::getCursorHeight()>
c000d465:	5a                   	pop    edx
c000d466:	59                   	pop    ecx
c000d467:	50                   	push   eax
c000d468:	53                   	push   ebx
c000d469:	e8 48 ff ff ff       	call   c000d3b6 <VgaText::setCursorHeight(int)>
c000d46e:	83 c4 10             	add    esp,0x10
c000d471:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000d478:	75 0a                	jne    c000d484 <setActiveTerminal(VgaText*)+0xa5>
c000d47a:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000d484:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d488:	83 c4 08             	add    esp,0x8
c000d48b:	5b                   	pop    ebx
c000d48c:	e9 1d f8 ff ff       	jmp    c000ccae <VgaText::load()>

c000d491 <doTerminalCycle()>:
c000d491:	83 ec 18             	sub    esp,0x18
c000d494:	a1 80 2f 02 c0       	mov    eax,ds:0xc0022f80
c000d499:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000d49f:	50                   	push   eax
c000d4a0:	a3 80 2f 02 c0       	mov    ds:0xc0022f80,eax
c000d4a5:	e8 35 ff ff ff       	call   c000d3df <setActiveTerminal(VgaText*)>
c000d4aa:	83 c4 1c             	add    esp,0x1c
c000d4ad:	c3                   	ret    

c000d4ae <VgaText::doUpdate()>:
c000d4ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d4b2:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000d4b8:	85 c0                	test   eax,eax
c000d4ba:	74 02                	je     c000d4be <VgaText::doUpdate()+0x10>
c000d4bc:	ff e0                	jmp    eax
c000d4be:	c3                   	ret    
c000d4bf:	90                   	nop

c000d4c0 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000d4c0:	55                   	push   ebp
c000d4c1:	57                   	push   edi
c000d4c2:	56                   	push   esi
c000d4c3:	53                   	push   ebx
c000d4c4:	83 ec 1c             	sub    esp,0x1c
c000d4c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d4cb:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d4d0:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000d4d7:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000d4da:	50                   	push   eax
c000d4db:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d4e0:	50                   	push   eax
c000d4e1:	e8 58 f9 ff ff       	call   c000ce3e <VgaText::combineColours(unsigned char, unsigned char)>
c000d4e6:	59                   	pop    ecx
c000d4e7:	0f b6 c0             	movzx  eax,al
c000d4ea:	5b                   	pop    ebx
c000d4eb:	31 c9                	xor    ecx,ecx
c000d4ed:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d4f5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d4f9:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d4ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d503:	0f b7 db             	movzx  ebx,bx
c000d506:	01 db                	add    ebx,ebx
c000d508:	01 fb                	add    ebx,edi
c000d50a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000d50d:	84 c0                	test   al,al
c000d50f:	0f 84 38 01 00 00    	je     c000d64d <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c000d515:	3c 0d                	cmp    al,0xd
c000d517:	75 0f                	jne    c000d528 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c000d519:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d523:	e9 1f 01 00 00       	jmp    c000d647 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d528:	3c 0a                	cmp    al,0xa
c000d52a:	75 5b                	jne    c000d587 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c000d52c:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d532:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d53c:	8d 48 01             	lea    ecx,[eax+0x1]
c000d53f:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d545:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d54b:	75 12                	jne    c000d55f <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c000d54d:	83 ec 0c             	sub    esp,0xc
c000d550:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d556:	55                   	push   ebp
c000d557:	e8 f4 f8 ff ff       	call   c000ce50 <VgaText::scrollScreen()>
c000d55c:	83 c4 10             	add    esp,0x10
c000d55f:	83 ec 0c             	sub    esp,0xc
c000d562:	55                   	push   ebp
c000d563:	e8 9a f7 ff ff       	call   c000cd02 <VgaText::updateCursor()>
c000d568:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d570:	83 c4 10             	add    esp,0x10
c000d573:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d579:	31 c9                	xor    ecx,ecx
c000d57b:	0f b7 db             	movzx  ebx,bx
c000d57e:	01 db                	add    ebx,ebx
c000d580:	01 fb                	add    ebx,edi
c000d582:	e9 c0 00 00 00       	jmp    c000d647 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d587:	3c 08                	cmp    al,0x8
c000d589:	75 4e                	jne    c000d5d9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d58b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d58f:	53                   	push   ebx
c000d590:	53                   	push   ebx
c000d591:	6a 01                	push   0x1
c000d593:	55                   	push   ebp
c000d594:	e8 df fc ff ff       	call   c000d278 <VgaText::decrementCursor(bool)>
c000d599:	58                   	pop    eax
c000d59a:	5a                   	pop    edx
c000d59b:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d5a1:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d5a7:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d5ad:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d5b3:	6a 20                	push   0x20
c000d5b5:	55                   	push   ebp
c000d5b6:	e8 3b f9 ff ff       	call   c000cef6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d5bb:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d5c3:	83 c4 20             	add    esp,0x20
c000d5c6:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d5cc:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d5d0:	0f b7 db             	movzx  ebx,bx
c000d5d3:	01 db                	add    ebx,ebx
c000d5d5:	01 fb                	add    ebx,edi
c000d5d7:	eb 6e                	jmp    c000d647 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d5d9:	51                   	push   ecx
c000d5da:	51                   	push   ecx
c000d5db:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d5df:	50                   	push   eax
c000d5e0:	e8 ff f8 ff ff       	call   c000cee4 <VgaText::combineCharAndColour(char, unsigned char)>
c000d5e5:	83 c4 10             	add    esp,0x10
c000d5e8:	66 89 03             	mov    WORD PTR [ebx],ax
c000d5eb:	39 2d 84 2f 02 c0    	cmp    DWORD PTR ds:0xc0022f84,ebp
c000d5f1:	75 2a                	jne    c000d61d <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d5f3:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d5f9:	85 c0                	test   eax,eax
c000d5fb:	74 20                	je     c000d61d <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c000d5fd:	52                   	push   edx
c000d5fe:	52                   	push   edx
c000d5ff:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d605:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d60b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d60f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d613:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d616:	51                   	push   ecx
c000d617:	55                   	push   ebp
c000d618:	ff d0                	call   eax
c000d61a:	83 c4 20             	add    esp,0x20
c000d61d:	83 c3 02             	add    ebx,0x2
c000d620:	50                   	push   eax
c000d621:	50                   	push   eax
c000d622:	6a 00                	push   0x0
c000d624:	55                   	push   ebp
c000d625:	e8 9a f9 ff ff       	call   c000cfc4 <VgaText::incrementCursor(bool)>
c000d62a:	83 c4 10             	add    esp,0x10
c000d62d:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d634:	75 0f                	jne    c000d645 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c000d636:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d63e:	0f b7 db             	movzx  ebx,bx
c000d641:	01 db                	add    ebx,ebx
c000d643:	01 fb                	add    ebx,edi
c000d645:	b1 01                	mov    cl,0x1
c000d647:	46                   	inc    esi
c000d648:	e9 bd fe ff ff       	jmp    c000d50a <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c000d64d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d651:	83 ec 0c             	sub    esp,0xc
c000d654:	55                   	push   ebp
c000d655:	e8 a8 f6 ff ff       	call   c000cd02 <VgaText::updateCursor()>
c000d65a:	83 c4 10             	add    esp,0x10
c000d65d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d661:	84 c9                	test   cl,cl
c000d663:	74 0c                	je     c000d671 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c000d665:	83 ec 0c             	sub    esp,0xc
c000d668:	55                   	push   ebp
c000d669:	e8 40 fe ff ff       	call   c000d4ae <VgaText::doUpdate()>
c000d66e:	83 c4 10             	add    esp,0x10
c000d671:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d678:	83 c4 1c             	add    esp,0x1c
c000d67b:	5b                   	pop    ebx
c000d67c:	5e                   	pop    esi
c000d67d:	5f                   	pop    edi
c000d67e:	5d                   	pop    ebp
c000d67f:	c3                   	ret    

c000d680 <VgaText::clearScreen()>:
c000d680:	57                   	push   edi
c000d681:	56                   	push   esi
c000d682:	31 f6                	xor    esi,esi
c000d684:	53                   	push   ebx
c000d685:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d689:	52                   	push   edx
c000d68a:	6a 00                	push   0x0
c000d68c:	6a 00                	push   0x0
c000d68e:	53                   	push   ebx
c000d68f:	e8 da f8 ff ff       	call   c000cf6e <VgaText::setCursor(int, int)>
c000d694:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d69b:	83 c4 10             	add    esp,0x10
c000d69e:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d6a4:	7e 26                	jle    c000d6cc <VgaText::clearScreen()+0x4c>
c000d6a6:	31 ff                	xor    edi,edi
c000d6a8:	50                   	push   eax
c000d6a9:	50                   	push   eax
c000d6aa:	56                   	push   esi
c000d6ab:	57                   	push   edi
c000d6ac:	47                   	inc    edi
c000d6ad:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d6b3:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d6b9:	6a 20                	push   0x20
c000d6bb:	53                   	push   ebx
c000d6bc:	e8 35 f8 ff ff       	call   c000cef6 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d6c1:	83 c4 20             	add    esp,0x20
c000d6c4:	83 ff 50             	cmp    edi,0x50
c000d6c7:	75 df                	jne    c000d6a8 <VgaText::clearScreen()+0x28>
c000d6c9:	46                   	inc    esi
c000d6ca:	eb d2                	jmp    c000d69e <VgaText::clearScreen()+0x1e>
c000d6cc:	83 ec 0c             	sub    esp,0xc
c000d6cf:	53                   	push   ebx
c000d6d0:	e8 d9 fd ff ff       	call   c000d4ae <VgaText::doUpdate()>
c000d6d5:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d6dc:	83 c4 10             	add    esp,0x10
c000d6df:	5b                   	pop    ebx
c000d6e0:	5e                   	pop    esi
c000d6e1:	5f                   	pop    edi
c000d6e2:	c3                   	ret    
c000d6e3:	90                   	nop

c000d6e4 <VgaText::putchar(char)>:
c000d6e4:	56                   	push   esi
c000d6e5:	53                   	push   ebx
c000d6e6:	83 ec 14             	sub    esp,0x14
c000d6e9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d6ed:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d6f1:	3c 5b                	cmp    al,0x5b
c000d6f3:	75 21                	jne    c000d716 <VgaText::putchar(char)+0x32>
c000d6f5:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d6fc:	74 28                	je     c000d726 <VgaText::putchar(char)+0x42>
c000d6fe:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d707:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d711:	e9 e2 00 00 00       	jmp    c000d7f8 <VgaText::putchar(char)+0x114>
c000d716:	3c 1b                	cmp    al,0x1b
c000d718:	75 0c                	jne    c000d726 <VgaText::putchar(char)+0x42>
c000d71a:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d721:	e9 d2 00 00 00       	jmp    c000d7f8 <VgaText::putchar(char)+0x114>
c000d726:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d72c:	84 c9                	test   cl,cl
c000d72e:	0f 84 ab 00 00 00    	je     c000d7df <VgaText::putchar(char)+0xfb>
c000d734:	8d 50 c0             	lea    edx,[eax-0x40]
c000d737:	80 fa 3e             	cmp    dl,0x3e
c000d73a:	0f 87 82 00 00 00    	ja     c000d7c2 <VgaText::putchar(char)+0xde>
c000d740:	3c 6d                	cmp    al,0x6d
c000d742:	75 4d                	jne    c000d791 <VgaText::putchar(char)+0xad>
c000d744:	31 f6                	xor    esi,esi
c000d746:	31 d2                	xor    edx,edx
c000d748:	31 c0                	xor    eax,eax
c000d74a:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d750:	7e 30                	jle    c000d782 <VgaText::putchar(char)+0x9e>
c000d752:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d75a:	80 fa 3b             	cmp    dl,0x3b
c000d75d:	75 17                	jne    c000d776 <VgaText::putchar(char)+0x92>
c000d75f:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d763:	50                   	push   eax
c000d764:	53                   	push   ebx
c000d765:	e8 fc f5 ff ff       	call   c000cd66 <VgaText::doANSI_SGR(int)>
c000d76a:	59                   	pop    ecx
c000d76b:	31 d2                	xor    edx,edx
c000d76d:	58                   	pop    eax
c000d76e:	31 c0                	xor    eax,eax
c000d770:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d774:	eb 09                	jmp    c000d77f <VgaText::putchar(char)+0x9b>
c000d776:	6b c0 0a             	imul   eax,eax,0xa
c000d779:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d77d:	88 ca                	mov    dl,cl
c000d77f:	46                   	inc    esi
c000d780:	eb c8                	jmp    c000d74a <VgaText::putchar(char)+0x66>
c000d782:	84 d2                	test   dl,dl
c000d784:	74 31                	je     c000d7b7 <VgaText::putchar(char)+0xd3>
c000d786:	50                   	push   eax
c000d787:	53                   	push   ebx
c000d788:	e8 d9 f5 ff ff       	call   c000cd66 <VgaText::doANSI_SGR(int)>
c000d78d:	58                   	pop    eax
c000d78e:	5a                   	pop    edx
c000d78f:	eb 26                	jmp    c000d7b7 <VgaText::putchar(char)+0xd3>
c000d791:	3c 4a                	cmp    al,0x4a
c000d793:	75 22                	jne    c000d7b7 <VgaText::putchar(char)+0xd3>
c000d795:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d79c:	75 19                	jne    c000d7b7 <VgaText::putchar(char)+0xd3>
c000d79e:	83 ec 0c             	sub    esp,0xc
c000d7a1:	53                   	push   ebx
c000d7a2:	e8 d9 fe ff ff       	call   c000d680 <VgaText::clearScreen()>
c000d7a7:	83 c4 0c             	add    esp,0xc
c000d7aa:	6a 00                	push   0x0
c000d7ac:	6a 00                	push   0x0
c000d7ae:	53                   	push   ebx
c000d7af:	e8 ba f7 ff ff       	call   c000cf6e <VgaText::setCursor(int, int)>
c000d7b4:	83 c4 10             	add    esp,0x10
c000d7b7:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d7c0:	eb 36                	jmp    c000d7f8 <VgaText::putchar(char)+0x114>
c000d7c2:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d7c8:	83 fa 0e             	cmp    edx,0xe
c000d7cb:	7f 2b                	jg     c000d7f8 <VgaText::putchar(char)+0x114>
c000d7cd:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d7d0:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d7d6:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d7dd:	eb 19                	jmp    c000d7f8 <VgaText::putchar(char)+0x114>
c000d7df:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d7e5:	0f be c0             	movsx  eax,al
c000d7e8:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d7ee:	50                   	push   eax
c000d7ef:	53                   	push   ebx
c000d7f0:	e8 ab fa ff ff       	call   c000d2a0 <VgaText::putchar(char, VgaColour, VgaColour)>
c000d7f5:	83 c4 10             	add    esp,0x10
c000d7f8:	83 c4 14             	add    esp,0x14
c000d7fb:	5b                   	pop    ebx
c000d7fc:	5e                   	pop    esi
c000d7fd:	c3                   	ret    

c000d7fe <VgaText::puts(char const*)>:
c000d7fe:	53                   	push   ebx
c000d7ff:	83 ec 08             	sub    esp,0x8
c000d802:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d806:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d809:	84 c0                	test   al,al
c000d80b:	74 12                	je     c000d81f <VgaText::puts(char const*)+0x21>
c000d80d:	43                   	inc    ebx
c000d80e:	51                   	push   ecx
c000d80f:	51                   	push   ecx
c000d810:	50                   	push   eax
c000d811:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d815:	e8 ca fe ff ff       	call   c000d6e4 <VgaText::putchar(char)>
c000d81a:	83 c4 10             	add    esp,0x10
c000d81d:	eb e7                	jmp    c000d806 <VgaText::puts(char const*)+0x8>
c000d81f:	83 c4 08             	add    esp,0x8
c000d822:	5b                   	pop    ebx
c000d823:	c3                   	ret    

c000d824 <VgaText::putx(unsigned int)>:
c000d824:	57                   	push   edi
c000d825:	b9 11 00 00 00       	mov    ecx,0x11
c000d82a:	56                   	push   esi
c000d82b:	be 92 02 02 c0       	mov    esi,0xc0020292
c000d830:	53                   	push   ebx
c000d831:	83 ec 20             	sub    esp,0x20
c000d834:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d838:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d83c:	fc                   	cld    
c000d83d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d83f:	be 08 00 00 00       	mov    esi,0x8
c000d844:	50                   	push   eax
c000d845:	50                   	push   eax
c000d846:	89 d8                	mov    eax,ebx
c000d848:	c1 e3 04             	shl    ebx,0x4
c000d84b:	c1 e8 1c             	shr    eax,0x1c
c000d84e:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d853:	50                   	push   eax
c000d854:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d858:	e8 87 fe ff ff       	call   c000d6e4 <VgaText::putchar(char)>
c000d85d:	83 c4 10             	add    esp,0x10
c000d860:	4e                   	dec    esi
c000d861:	75 e1                	jne    c000d844 <VgaText::putx(unsigned int)+0x20>
c000d863:	83 c4 20             	add    esp,0x20
c000d866:	5b                   	pop    ebx
c000d867:	5e                   	pop    esi
c000d868:	5f                   	pop    edi
c000d869:	c3                   	ret    

c000d86a <VgaText::VgaText(char const*)>:
c000d86a:	57                   	push   edi
c000d86b:	56                   	push   esi
c000d86c:	53                   	push   ebx
c000d86d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d871:	83 ec 08             	sub    esp,0x8
c000d874:	6a 00                	push   0x0
c000d876:	50                   	push   eax
c000d877:	e8 b8 05 00 00       	call   c000de34 <UnixFile::UnixFile(int)>
c000d87c:	83 c4 10             	add    esp,0x10
c000d87f:	ba f8 02 02 c0       	mov    edx,0xc00202f8
c000d884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d888:	89 10                	mov    DWORD PTR [eax],edx
c000d88a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d88e:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d89c:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d8a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8aa:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d8b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8b5:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d8bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8c0:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d8ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8ce:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d8d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8dc:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d8e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8e7:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d8ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8f2:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d8f8:	bb 60 2f 02 c0       	mov    ebx,0xc0022f60
c000d8fd:	b8 08 00 00 00       	mov    eax,0x8
c000d902:	fc                   	cld    
c000d903:	89 d7                	mov    edi,edx
c000d905:	89 de                	mov    esi,ebx
c000d907:	89 c1                	mov    ecx,eax
c000d909:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d90b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d90f:	05 1e 10 00 00       	add    eax,0x101e
c000d914:	83 ec 08             	sub    esp,0x8
c000d917:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d91b:	50                   	push   eax
c000d91c:	e8 86 2d ff ff       	call   c00006a7 <strcpy>
c000d921:	83 c4 10             	add    esp,0x10
c000d924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d928:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d936:	83 c0 0c             	add    eax,0xc
c000d939:	83 ec 04             	sub    esp,0x4
c000d93c:	68 00 0f 00 00       	push   0xf00
c000d941:	6a 00                	push   0x0
c000d943:	50                   	push   eax
c000d944:	e8 bf 2c ff ff       	call   c0000608 <memset>
c000d949:	83 c4 10             	add    esp,0x10
c000d94c:	83 ec 04             	sub    esp,0x4
c000d94f:	6a 00                	push   0x0
c000d951:	6a 07                	push   0x7
c000d953:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d957:	e8 c2 f4 ff ff       	call   c000ce1e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d95c:	83 c4 10             	add    esp,0x10
c000d95f:	83 ec 08             	sub    esp,0x8
c000d962:	6a 02                	push   0x2
c000d964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d968:	e8 49 fa ff ff       	call   c000d3b6 <VgaText::setCursorHeight(int)>
c000d96d:	83 c4 10             	add    esp,0x10
c000d970:	83 ec 04             	sub    esp,0x4
c000d973:	6a 00                	push   0x0
c000d975:	6a 00                	push   0x0
c000d977:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d97b:	e8 ee f5 ff ff       	call   c000cf6e <VgaText::setCursor(int, int)>
c000d980:	83 c4 10             	add    esp,0x10
c000d983:	83 ec 08             	sub    esp,0x8
c000d986:	6a 01                	push   0x1
c000d988:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d98c:	e8 8b f3 ff ff       	call   c000cd1c <VgaText::showCursor(bool)>
c000d991:	83 c4 10             	add    esp,0x10
c000d994:	83 ec 08             	sub    esp,0x8
c000d997:	6a 01                	push   0x1
c000d999:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d99d:	e8 8a f3 ff ff       	call   c000cd2c <VgaText::disableBlink(bool)>
c000d9a2:	83 c4 10             	add    esp,0x10
c000d9a5:	83 ec 0c             	sub    esp,0xc
c000d9a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d9ac:	e8 cf fc ff ff       	call   c000d680 <VgaText::clearScreen()>
c000d9b1:	83 c4 10             	add    esp,0x10
c000d9b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9b8:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d9bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9c3:	05 9e 10 00 00       	add    eax,0x109e
c000d9c8:	83 ec 04             	sub    esp,0x4
c000d9cb:	68 96 00 00 00       	push   0x96
c000d9d0:	6a 00                	push   0x0
c000d9d2:	50                   	push   eax
c000d9d3:	e8 30 2c ff ff       	call   c0000608 <memset>
c000d9d8:	83 c4 10             	add    esp,0x10
c000d9db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d9df:	05 34 11 00 00       	add    eax,0x1134
c000d9e4:	83 ec 04             	sub    esp,0x4
c000d9e7:	68 2c 01 00 00       	push   0x12c
c000d9ec:	6a 00                	push   0x0
c000d9ee:	50                   	push   eax
c000d9ef:	e8 14 2c ff ff       	call   c0000608 <memset>
c000d9f4:	83 c4 10             	add    esp,0x10
c000d9f7:	90                   	nop
c000d9f8:	5b                   	pop    ebx
c000d9f9:	5e                   	pop    esi
c000d9fa:	5f                   	pop    edi
c000d9fb:	c3                   	ret    

c000d9fc <VgaText::receiveKey(unsigned char)>:
c000d9fc:	55                   	push   ebp
c000d9fd:	57                   	push   edi
c000d9fe:	56                   	push   esi
c000d9ff:	53                   	push   ebx
c000da00:	83 ec 1c             	sub    esp,0x1c
c000da03:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000da07:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000da0b:	84 db                	test   bl,bl
c000da0d:	0f 84 c9 00 00 00    	je     c000dadc <VgaText::receiveKey(unsigned char)+0xe0>
c000da13:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000da19:	80 fb 08             	cmp    bl,0x8
c000da1c:	75 2c                	jne    c000da4a <VgaText::receiveKey(unsigned char)+0x4e>
c000da1e:	83 ec 0c             	sub    esp,0xc
c000da21:	57                   	push   edi
c000da22:	e8 fe 2b ff ff       	call   c0000625 <strlen>
c000da27:	83 c4 10             	add    esp,0x10
c000da2a:	85 c0                	test   eax,eax
c000da2c:	74 41                	je     c000da6f <VgaText::receiveKey(unsigned char)+0x73>
c000da2e:	50                   	push   eax
c000da2f:	50                   	push   eax
c000da30:	6a 08                	push   0x8
c000da32:	56                   	push   esi
c000da33:	e8 ac fc ff ff       	call   c000d6e4 <VgaText::putchar(char)>
c000da38:	89 3c 24             	mov    DWORD PTR [esp],edi
c000da3b:	e8 e5 2b ff ff       	call   c0000625 <strlen>
c000da40:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000da48:	eb 22                	jmp    c000da6c <VgaText::receiveKey(unsigned char)+0x70>
c000da4a:	0f be c3             	movsx  eax,bl
c000da4d:	52                   	push   edx
c000da4e:	52                   	push   edx
c000da4f:	50                   	push   eax
c000da50:	56                   	push   esi
c000da51:	e8 8e fc ff ff       	call   c000d6e4 <VgaText::putchar(char)>
c000da56:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000da5a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000da5f:	59                   	pop    ecx
c000da60:	5d                   	pop    ebp
c000da61:	8d 44 24 16          	lea    eax,[esp+0x16]
c000da65:	50                   	push   eax
c000da66:	57                   	push   edi
c000da67:	e8 f2 2c ff ff       	call   c000075e <strcat>
c000da6c:	83 c4 10             	add    esp,0x10
c000da6f:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000da76:	75 05                	jne    c000da7d <VgaText::receiveKey(unsigned char)+0x81>
c000da78:	80 fb 0a             	cmp    bl,0xa
c000da7b:	75 53                	jne    c000dad0 <VgaText::receiveKey(unsigned char)+0xd4>
c000da7d:	83 ec 0c             	sub    esp,0xc
c000da80:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000da86:	53                   	push   ebx
c000da87:	e8 99 2b ff ff       	call   c0000625 <strlen>
c000da8c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000da8f:	89 c5                	mov    ebp,eax
c000da91:	e8 8f 2b ff ff       	call   c0000625 <strlen>
c000da96:	83 c4 10             	add    esp,0x10
c000da99:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000da9d:	3d 2c 01 00 00       	cmp    eax,0x12c
c000daa2:	76 10                	jbe    c000dab4 <VgaText::receiveKey(unsigned char)+0xb8>
c000daa4:	83 ec 0c             	sub    esp,0xc
c000daa7:	68 a3 02 02 c0       	push   0xc00202a3
c000daac:	e8 a3 e1 ff ff       	call   c000bc54 <panic(char const*)>
c000dab1:	83 c4 10             	add    esp,0x10
c000dab4:	50                   	push   eax
c000dab5:	50                   	push   eax
c000dab6:	57                   	push   edi
c000dab7:	53                   	push   ebx
c000dab8:	e8 a1 2c ff ff       	call   c000075e <strcat>
c000dabd:	83 c4 0c             	add    esp,0xc
c000dac0:	68 96 00 00 00       	push   0x96
c000dac5:	6a 00                	push   0x0
c000dac7:	57                   	push   edi
c000dac8:	e8 3b 2b ff ff       	call   c0000608 <memset>
c000dacd:	83 c4 10             	add    esp,0x10
c000dad0:	83 ec 0c             	sub    esp,0xc
c000dad3:	56                   	push   esi
c000dad4:	e8 d5 f9 ff ff       	call   c000d4ae <VgaText::doUpdate()>
c000dad9:	83 c4 10             	add    esp,0x10
c000dadc:	83 c4 1c             	add    esp,0x1c
c000dadf:	5b                   	pop    ebx
c000dae0:	5e                   	pop    esi
c000dae1:	5f                   	pop    edi
c000dae2:	5d                   	pop    ebp
c000dae3:	c3                   	ret    

c000dae4 <VgaText::write(unsigned long long, void*, int*)>:
c000dae4:	55                   	push   ebp
c000dae5:	57                   	push   edi
c000dae6:	56                   	push   esi
c000dae7:	53                   	push   ebx
c000dae8:	83 ec 0c             	sub    esp,0xc
c000daeb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000daef:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000daf3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000daf7:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000dafe:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000db01:	39 eb                	cmp    ebx,ebp
c000db03:	74 13                	je     c000db18 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000db05:	43                   	inc    ebx
c000db06:	50                   	push   eax
c000db07:	50                   	push   eax
c000db08:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000db0c:	50                   	push   eax
c000db0d:	56                   	push   esi
c000db0e:	e8 d1 fb ff ff       	call   c000d6e4 <VgaText::putchar(char)>
c000db13:	83 c4 10             	add    esp,0x10
c000db16:	eb e9                	jmp    c000db01 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000db18:	83 ec 0c             	sub    esp,0xc
c000db1b:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000db22:	56                   	push   esi
c000db23:	e8 86 f9 ff ff       	call   c000d4ae <VgaText::doUpdate()>
c000db28:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000db2c:	89 38                	mov    DWORD PTR [eax],edi
c000db2e:	83 c4 1c             	add    esp,0x1c
c000db31:	31 c0                	xor    eax,eax
c000db33:	5b                   	pop    ebx
c000db34:	5e                   	pop    esi
c000db35:	5f                   	pop    edi
c000db36:	5d                   	pop    ebp
c000db37:	c3                   	ret    

c000db38 <newTerminal(char*)>:
c000db38:	83 ec 28             	sub    esp,0x28
c000db3b:	68 60 12 00 00       	push   0x1260
c000db40:	e8 c3 16 00 00       	call   c000f208 <operator new(unsigned long)>
c000db45:	5a                   	pop    edx
c000db46:	59                   	pop    ecx
c000db47:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000db4b:	50                   	push   eax
c000db4c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000db50:	e8 15 fd ff ff       	call   c000d86a <VgaText::VgaText(char const*)>
c000db55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000db59:	83 c4 2c             	add    esp,0x2c
c000db5c:	c3                   	ret    
c000db5d:	90                   	nop

c000db5e <TSS::TSS()>:
c000db5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db62:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000db69:	90                   	nop
c000db6a:	c3                   	ret    
c000db6b:	90                   	nop

c000db6c <TSS::setESP(unsigned long)>:
c000db6c:	55                   	push   ebp
c000db6d:	89 e5                	mov    ebp,esp
c000db6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db72:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db75:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db78:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db7b:	90                   	nop
c000db7c:	5d                   	pop    ebp
c000db7d:	c3                   	ret    

c000db7e <TSS::flush()>:
c000db7e:	55                   	push   ebp
c000db7f:	89 e5                	mov    ebp,esp
c000db81:	83 ec 10             	sub    esp,0x10
c000db84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db87:	8b 00                	mov    eax,DWORD PTR [eax]
c000db89:	83 c8 03             	or     eax,0x3
c000db8c:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000db90:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000db94:	66 89 d0             	mov    ax,dx
c000db97:	0f 00 d8             	ltr    ax
c000db9a:	90                   	nop
c000db9b:	c9                   	leave  
c000db9c:	c3                   	ret    
c000db9d:	90                   	nop

c000db9e <TSS::setup(unsigned long, unsigned long)>:
c000db9e:	55                   	push   ebp
c000db9f:	89 e5                	mov    ebp,esp
c000dba1:	53                   	push   ebx
c000dba2:	83 ec 14             	sub    esp,0x14
c000dba5:	83 ec 0c             	sub    esp,0xc
c000dba8:	6a 68                	push   0x68
c000dbaa:	e8 82 e5 ff ff       	call   c000c131 <malloc>
c000dbaf:	83 c4 10             	add    esp,0x10
c000dbb2:	89 c2                	mov    edx,eax
c000dbb4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbb7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000dbba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbbd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbc0:	83 ec 04             	sub    esp,0x4
c000dbc3:	6a 68                	push   0x68
c000dbc5:	6a 00                	push   0x0
c000dbc7:	50                   	push   eax
c000dbc8:	e8 3b 2a ff ff       	call   c0000608 <memset>
c000dbcd:	83 c4 10             	add    esp,0x10
c000dbd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbd3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbd6:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000dbdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbdf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbe2:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000dbe8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbeb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbee:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000dbf1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000dbf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbf7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbfa:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000dc00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc06:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000dc0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc0f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc12:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000dc18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc1e:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000dc24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc27:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc2a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000dc2d:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000dc30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc36:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000dc39:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dc3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc3f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc42:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000dc49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc4c:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000dc4f:	e8 75 07 01 00       	call   c001e3c9 <CPU::readCR3()>
c000dc54:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000dc57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc5d:	83 ec 08             	sub    esp,0x8
c000dc60:	50                   	push   eax
c000dc61:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dc64:	50                   	push   eax
c000dc65:	e8 84 d7 ff ff       	call   c000b3ee <GDTEntry::setBase(unsigned int)>
c000dc6a:	83 c4 10             	add    esp,0x10
c000dc6d:	83 ec 08             	sub    esp,0x8
c000dc70:	6a 68                	push   0x68
c000dc72:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dc75:	50                   	push   eax
c000dc76:	e8 8f d7 ff ff       	call   c000b40a <GDTEntry::setLimit(unsigned int)>
c000dc7b:	83 c4 10             	add    esp,0x10
c000dc7e:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000dc82:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dc85:	83 e0 0f             	and    eax,0xf
c000dc88:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dc8b:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dc8e:	83 c8 40             	or     eax,0x40
c000dc91:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dc94:	e8 d1 62 00 00       	call   c0013f6a <thisCPU()>
c000dc99:	05 78 01 00 00       	add    eax,0x178
c000dc9e:	83 ec 04             	sub    esp,0x4
c000dca1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000dca4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000dca7:	50                   	push   eax
c000dca8:	e8 91 d7 ff ff       	call   c000b43e <GDT::addEntry(GDTEntry)>
c000dcad:	83 c4 10             	add    esp,0x10
c000dcb0:	89 c2                	mov    edx,eax
c000dcb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dcb5:	89 10                	mov    DWORD PTR [eax],edx
c000dcb7:	e8 ae 62 00 00       	call   c0013f6a <thisCPU()>
c000dcbc:	05 78 01 00 00       	add    eax,0x178
c000dcc1:	83 ec 0c             	sub    esp,0xc
c000dcc4:	50                   	push   eax
c000dcc5:	e8 b8 d7 ff ff       	call   c000b482 <GDT::flush()>
c000dcca:	83 c4 10             	add    esp,0x10
c000dccd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dcd0:	8b 00                	mov    eax,DWORD PTR [eax]
c000dcd2:	83 ec 08             	sub    esp,0x8
c000dcd5:	50                   	push   eax
c000dcd6:	68 0c 03 02 c0       	push   0xc002030c
c000dcdb:	e8 56 de ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000dce0:	83 c4 10             	add    esp,0x10
c000dce3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dce6:	8b 00                	mov    eax,DWORD PTR [eax]
c000dce8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000dceb:	c9                   	leave  
c000dcec:	c3                   	ret    
c000dced:	90                   	nop

c000dcee <ReservedFilename::isAtty()>:
c000dcee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcf2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dcf5:	31 c0                	xor    eax,eax
c000dcf7:	83 fa 08             	cmp    edx,0x8
c000dcfa:	74 06                	je     c000dd02 <ReservedFilename::isAtty()+0x14>
c000dcfc:	83 fa 06             	cmp    edx,0x6
c000dcff:	0f 94 c0             	sete   al
c000dd02:	c3                   	ret    
c000dd03:	90                   	nop

c000dd04 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000dd04:	55                   	push   ebp
c000dd05:	57                   	push   edi
c000dd06:	56                   	push   esi
c000dd07:	53                   	push   ebx
c000dd08:	83 ec 0c             	sub    esp,0xc
c000dd0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd0f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dd13:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd16:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dd1a:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000dd1e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dd22:	83 f8 08             	cmp    eax,0x8
c000dd25:	75 08                	jne    c000dd2f <ReservedFilename::read(unsigned long long, void*, int*)+0x2b>
c000dd27:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dd2d:	eb 5c                	jmp    c000dd8b <ReservedFilename::read(unsigned long long, void*, int*)+0x87>
c000dd2f:	83 f8 06             	cmp    eax,0x6
c000dd32:	75 3d                	jne    c000dd71 <ReservedFilename::read(unsigned long long, void*, int*)+0x6d>
c000dd34:	83 ec 0c             	sub    esp,0xc
c000dd37:	68 2a 03 02 c0       	push   0xc002032a
c000dd3c:	e8 f5 dd ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000dd41:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dd46:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dd49:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dd4f:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd51:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000dd55:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dd59:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dd5d:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000dd61:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dd65:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000dd68:	83 c4 1c             	add    esp,0x1c
c000dd6b:	5b                   	pop    ebx
c000dd6c:	5e                   	pop    esi
c000dd6d:	5f                   	pop    edi
c000dd6e:	5d                   	pop    ebp
c000dd6f:	ff e0                	jmp    eax
c000dd71:	89 c2                	mov    edx,eax
c000dd73:	83 e2 fd             	and    edx,0xfffffffd
c000dd76:	83 fa 05             	cmp    edx,0x5
c000dd79:	74 ac                	je     c000dd27 <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c000dd7b:	8d 50 f5             	lea    edx,[eax-0xb]
c000dd7e:	83 fa 08             	cmp    edx,0x8
c000dd81:	76 a4                	jbe    c000dd27 <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c000dd83:	83 e8 15             	sub    eax,0x15
c000dd86:	83 f8 08             	cmp    eax,0x8
c000dd89:	76 9c                	jbe    c000dd27 <ReservedFilename::read(unsigned long long, void*, int*)+0x23>
c000dd8b:	83 c4 0c             	add    esp,0xc
c000dd8e:	31 c0                	xor    eax,eax
c000dd90:	5b                   	pop    ebx
c000dd91:	5e                   	pop    esi
c000dd92:	5f                   	pop    edi
c000dd93:	5d                   	pop    ebp
c000dd94:	c3                   	ret    
c000dd95:	90                   	nop

c000dd96 <ReservedFilename::write(unsigned long long, void*, int*)>:
c000dd96:	55                   	push   ebp
c000dd97:	57                   	push   edi
c000dd98:	56                   	push   esi
c000dd99:	53                   	push   ebx
c000dd9a:	83 ec 0c             	sub    esp,0xc
c000dd9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dda1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dda5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dda8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000ddac:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000ddb0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ddb4:	83 f8 08             	cmp    eax,0x8
c000ddb7:	75 08                	jne    c000ddc1 <ReservedFilename::write(unsigned long long, void*, int*)+0x2b>
c000ddb9:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000ddbf:	eb 60                	jmp    c000de21 <ReservedFilename::write(unsigned long long, void*, int*)+0x8b>
c000ddc1:	83 f8 06             	cmp    eax,0x6
c000ddc4:	75 3d                	jne    c000de03 <ReservedFilename::write(unsigned long long, void*, int*)+0x6d>
c000ddc6:	83 ec 0c             	sub    esp,0xc
c000ddc9:	68 37 03 02 c0       	push   0xc0020337
c000ddce:	e8 63 dd ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000ddd3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ddd8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dddb:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dde1:	8b 10                	mov    edx,DWORD PTR [eax]
c000dde3:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000dde7:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000ddeb:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000ddef:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000ddf3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ddf7:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c000ddfa:	83 c4 1c             	add    esp,0x1c
c000ddfd:	5b                   	pop    ebx
c000ddfe:	5e                   	pop    esi
c000ddff:	5f                   	pop    edi
c000de00:	5d                   	pop    ebp
c000de01:	ff e0                	jmp    eax
c000de03:	83 f8 05             	cmp    eax,0x5
c000de06:	75 04                	jne    c000de0c <ReservedFilename::write(unsigned long long, void*, int*)+0x76>
c000de08:	89 33                	mov    DWORD PTR [ebx],esi
c000de0a:	eb 15                	jmp    c000de21 <ReservedFilename::write(unsigned long long, void*, int*)+0x8b>
c000de0c:	83 f8 07             	cmp    eax,0x7
c000de0f:	74 a8                	je     c000ddb9 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c000de11:	8d 50 f5             	lea    edx,[eax-0xb]
c000de14:	83 fa 08             	cmp    edx,0x8
c000de17:	76 a0                	jbe    c000ddb9 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c000de19:	83 e8 15             	sub    eax,0x15
c000de1c:	83 f8 08             	cmp    eax,0x8
c000de1f:	76 98                	jbe    c000ddb9 <ReservedFilename::write(unsigned long long, void*, int*)+0x23>
c000de21:	83 c4 0c             	add    esp,0xc
c000de24:	31 c0                	xor    eax,eax
c000de26:	5b                   	pop    ebx
c000de27:	5e                   	pop    esi
c000de28:	5f                   	pop    edi
c000de29:	5d                   	pop    ebp
c000de2a:	c3                   	ret    
c000de2b:	90                   	nop

c000de2c <UnixFile::getFileDescriptor()>:
c000de2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000de33:	c3                   	ret    

c000de34 <UnixFile::UnixFile(int)>:
c000de34:	83 ec 0c             	sub    esp,0xc
c000de37:	ba 44 04 02 c0       	mov    edx,0xc0020444
c000de3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de40:	89 10                	mov    DWORD PTR [eax],edx
c000de42:	a1 60 23 02 c0       	mov    eax,ds:0xc0022360
c000de47:	8d 50 01             	lea    edx,[eax+0x1]
c000de4a:	89 15 60 23 02 c0    	mov    DWORD PTR ds:0xc0022360,edx
c000de50:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000de54:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000de57:	83 ec 08             	sub    esp,0x8
c000de5a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de5e:	68 90 2f 02 c0       	push   0xc0022f90
c000de63:	e8 9a 06 01 00       	call   c001e502 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000de68:	83 c4 10             	add    esp,0x10
c000de6b:	90                   	nop
c000de6c:	83 c4 0c             	add    esp,0xc
c000de6f:	c3                   	ret    

c000de70 <ReservedFilename::ReservedFilename(int)>:
c000de70:	83 ec 0c             	sub    esp,0xc
c000de73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de77:	83 ec 08             	sub    esp,0x8
c000de7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de7e:	50                   	push   eax
c000de7f:	e8 b0 ff ff ff       	call   c000de34 <UnixFile::UnixFile(int)>
c000de84:	83 c4 10             	add    esp,0x10
c000de87:	ba 60 04 02 c0       	mov    edx,0xc0020460
c000de8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de90:	89 10                	mov    DWORD PTR [eax],edx
c000de92:	90                   	nop
c000de93:	83 c4 0c             	add    esp,0xc
c000de96:	c3                   	ret    
c000de97:	90                   	nop

c000de98 <UnixFile::~UnixFile()>:
c000de98:	83 ec 1c             	sub    esp,0x1c
c000de9b:	ba 44 04 02 c0       	mov    edx,0xc0020444
c000dea0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dea4:	89 10                	mov    DWORD PTR [eax],edx
c000dea6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000deae:	83 ec 0c             	sub    esp,0xc
c000deb1:	68 90 2f 02 c0       	push   0xc0022f90
c000deb6:	e8 95 05 01 00       	call   c001e450 <LinkedList<UnixFile>::getFirstElement()>
c000debb:	83 c4 10             	add    esp,0x10
c000debe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dec2:	83 ec 0c             	sub    esp,0xc
c000dec5:	68 90 2f 02 c0       	push   0xc0022f90
c000deca:	e8 89 05 01 00       	call   c001e458 <LinkedList<UnixFile>::removeFirst()>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ded6:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000deda:	74 3d                	je     c000df19 <UnixFile::~UnixFile()+0x81>
c000dedc:	83 ec 08             	sub    esp,0x8
c000dedf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dee3:	68 90 2f 02 c0       	push   0xc0022f90
c000dee8:	e8 15 06 01 00       	call   c001e502 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000deed:	83 c4 10             	add    esp,0x10
c000def0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000def4:	8d 50 01             	lea    edx,[eax+0x1]
c000def7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000defb:	3d 88 13 00 00       	cmp    eax,0x1388
c000df00:	0f 94 c0             	sete   al
c000df03:	84 c0                	test   al,al
c000df05:	74 a7                	je     c000deae <UnixFile::~UnixFile()+0x16>
c000df07:	83 ec 0c             	sub    esp,0xc
c000df0a:	68 1c 04 02 c0       	push   0xc002041c
c000df0f:	e8 40 dd ff ff       	call   c000bc54 <panic(char const*)>
c000df14:	83 c4 10             	add    esp,0x10
c000df17:	eb 95                	jmp    c000deae <UnixFile::~UnixFile()+0x16>
c000df19:	90                   	nop
c000df1a:	83 c4 1c             	add    esp,0x1c
c000df1d:	c3                   	ret    

c000df1e <UnixFile::~UnixFile()>:
c000df1e:	83 ec 0c             	sub    esp,0xc
c000df21:	83 ec 0c             	sub    esp,0xc
c000df24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df28:	e8 6b ff ff ff       	call   c000de98 <UnixFile::~UnixFile()>
c000df2d:	83 c4 10             	add    esp,0x10
c000df30:	83 ec 08             	sub    esp,0x8
c000df33:	6a 0c                	push   0xc
c000df35:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df39:	e8 d9 12 00 00       	call   c000f217 <operator delete(void*, unsigned long)>
c000df3e:	83 c4 10             	add    esp,0x10
c000df41:	83 c4 0c             	add    esp,0xc
c000df44:	c3                   	ret    
c000df45:	90                   	nop

c000df46 <ReservedFilename::~ReservedFilename()>:
c000df46:	83 ec 0c             	sub    esp,0xc
c000df49:	ba 60 04 02 c0       	mov    edx,0xc0020460
c000df4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df52:	89 10                	mov    DWORD PTR [eax],edx
c000df54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df58:	83 ec 0c             	sub    esp,0xc
c000df5b:	50                   	push   eax
c000df5c:	e8 37 ff ff ff       	call   c000de98 <UnixFile::~UnixFile()>
c000df61:	83 c4 10             	add    esp,0x10
c000df64:	90                   	nop
c000df65:	83 c4 0c             	add    esp,0xc
c000df68:	c3                   	ret    
c000df69:	90                   	nop

c000df6a <ReservedFilename::~ReservedFilename()>:
c000df6a:	83 ec 0c             	sub    esp,0xc
c000df6d:	83 ec 0c             	sub    esp,0xc
c000df70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df74:	e8 cd ff ff ff       	call   c000df46 <ReservedFilename::~ReservedFilename()>
c000df79:	83 c4 10             	add    esp,0x10
c000df7c:	83 ec 08             	sub    esp,0x8
c000df7f:	6a 0c                	push   0xc
c000df81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df85:	e8 8d 12 00 00       	call   c000f217 <operator delete(void*, unsigned long)>
c000df8a:	83 c4 10             	add    esp,0x10
c000df8d:	83 c4 0c             	add    esp,0xc
c000df90:	c3                   	ret    

c000df91 <getFromFileDescriptor(int)>:
c000df91:	83 ec 18             	sub    esp,0x18
c000df94:	68 90 2f 02 c0       	push   0xc0022f90
c000df99:	e8 b2 04 01 00       	call   c001e450 <LinkedList<UnixFile>::getFirstElement()>
c000df9e:	83 c4 10             	add    esp,0x10
c000dfa1:	85 c0                	test   eax,eax
c000dfa3:	74 18                	je     c000dfbd <getFromFileDescriptor(int)+0x2c>
c000dfa5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dfa9:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
c000dfac:	74 0f                	je     c000dfbd <getFromFileDescriptor(int)+0x2c>
c000dfae:	52                   	push   edx
c000dfaf:	52                   	push   edx
c000dfb0:	50                   	push   eax
c000dfb1:	68 90 2f 02 c0       	push   0xc0022f90
c000dfb6:	e8 3f 05 01 00       	call   c001e4fa <LinkedList<UnixFile>::getNext(UnixFile*)>
c000dfbb:	eb e1                	jmp    c000df9e <getFromFileDescriptor(int)+0xd>
c000dfbd:	83 c4 0c             	add    esp,0xc
c000dfc0:	c3                   	ret    

c000dfc1 <__static_initialization_and_destruction_0(int, int)>:
c000dfc1:	83 ec 0c             	sub    esp,0xc
c000dfc4:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000dfc9:	75 34                	jne    c000dfff <__static_initialization_and_destruction_0(int, int)+0x3e>
c000dfcb:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000dfd3:	75 2a                	jne    c000dfff <__static_initialization_and_destruction_0(int, int)+0x3e>
c000dfd5:	83 ec 0c             	sub    esp,0xc
c000dfd8:	68 90 2f 02 c0       	push   0xc0022f90
c000dfdd:	e8 16 04 01 00       	call   c001e3f8 <LinkedList<UnixFile>::LinkedList()>
c000dfe2:	83 c4 10             	add    esp,0x10
c000dfe5:	83 ec 04             	sub    esp,0x4
c000dfe8:	68 f0 22 02 c0       	push   0xc00222f0
c000dfed:	68 90 2f 02 c0       	push   0xc0022f90
c000dff2:	68 f6 e3 01 c0       	push   0xc001e3f6
c000dff7:	e8 97 11 00 00       	call   c000f193 <__cxa_atexit>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	90                   	nop
c000e000:	83 c4 0c             	add    esp,0xc
c000e003:	c3                   	ret    

c000e004 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000e004:	83 ec 0c             	sub    esp,0xc
c000e007:	83 ec 08             	sub    esp,0x8
c000e00a:	68 ff ff 00 00       	push   0xffff
c000e00f:	6a 01                	push   0x1
c000e011:	e8 ab ff ff ff       	call   c000dfc1 <__static_initialization_and_destruction_0(int, int)>
c000e016:	83 c4 10             	add    esp,0x10
c000e019:	83 c4 0c             	add    esp,0xc
c000e01c:	c3                   	ret    
c000e01d:	90                   	nop

c000e01e <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000e01e:	53                   	push   ebx
c000e01f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e023:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e027:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000e02d:	89 c8                	mov    eax,ecx
c000e02f:	d1 e8                	shr    eax,1
c000e031:	03 05 68 23 02 c0    	add    eax,DWORD PTR ds:0xc0022368
c000e037:	83 e1 01             	and    ecx,0x1
c000e03a:	8a 10                	mov    dl,BYTE PTR [eax]
c000e03c:	75 09                	jne    c000e047 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000e03e:	83 e2 f0             	and    edx,0xfffffff0
c000e041:	09 da                	or     edx,ebx
c000e043:	88 10                	mov    BYTE PTR [eax],dl
c000e045:	5b                   	pop    ebx
c000e046:	c3                   	ret    
c000e047:	c1 e3 04             	shl    ebx,0x4
c000e04a:	83 e2 0f             	and    edx,0xf
c000e04d:	09 da                	or     edx,ebx
c000e04f:	88 10                	mov    BYTE PTR [eax],dl
c000e051:	5b                   	pop    ebx
c000e052:	c3                   	ret    

c000e053 <Virt::getPageState(unsigned long)>:
c000e053:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e057:	8b 0d 68 23 02 c0    	mov    ecx,DWORD PTR ds:0xc0022368
c000e05d:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000e063:	89 d0                	mov    eax,edx
c000e065:	d1 e8                	shr    eax,1
c000e067:	83 e2 01             	and    edx,0x1
c000e06a:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c000e06d:	75 04                	jne    c000e073 <Virt::getPageState(unsigned long)+0x20>
c000e06f:	83 e0 0f             	and    eax,0xf
c000e072:	c3                   	ret    
c000e073:	c0 e8 04             	shr    al,0x4
c000e076:	c3                   	ret    

c000e077 <Virt::allocateKernelVirtualPages(int)>:
c000e077:	55                   	push   ebp
c000e078:	31 ed                	xor    ebp,ebp
c000e07a:	57                   	push   edi
c000e07b:	56                   	push   esi
c000e07c:	53                   	push   ebx
c000e07d:	31 db                	xor    ebx,ebx
c000e07f:	83 ec 1c             	sub    esp,0x1c
c000e082:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e086:	8b 3d 64 23 02 c0    	mov    edi,DWORD PTR ds:0xc0022364
c000e08c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e091:	57                   	push   edi
c000e092:	e8 bc ff ff ff       	call   c000e053 <Virt::getPageState(unsigned long)>
c000e097:	5a                   	pop    edx
c000e098:	84 c0                	test   al,al
c000e09a:	75 3a                	jne    c000e0d6 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000e09c:	85 db                	test   ebx,ebx
c000e09e:	75 02                	jne    c000e0a2 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000e0a0:	89 fd                	mov    ebp,edi
c000e0a2:	43                   	inc    ebx
c000e0a3:	39 f3                	cmp    ebx,esi
c000e0a5:	74 5a                	je     c000e101 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000e0a7:	47                   	inc    edi
c000e0a8:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e0ae:	76 31                	jbe    c000e0e1 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000e0b0:	c7 05 64 23 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0022364,0xc8000
c000e0ba:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e0bf:	75 28                	jne    c000e0e9 <Virt::allocateKernelVirtualPages(int)+0x72>
c000e0c1:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e0c6:	bf 00 80 0c 00       	mov    edi,0xc8000
c000e0cb:	57                   	push   edi
c000e0cc:	e8 82 ff ff ff       	call   c000e053 <Virt::getPageState(unsigned long)>
c000e0d1:	5a                   	pop    edx
c000e0d2:	84 c0                	test   al,al
c000e0d4:	74 c6                	je     c000e09c <Virt::allocateKernelVirtualPages(int)+0x25>
c000e0d6:	31 db                	xor    ebx,ebx
c000e0d8:	47                   	inc    edi
c000e0d9:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e0df:	77 cf                	ja     c000e0b0 <Virt::allocateKernelVirtualPages(int)+0x39>
c000e0e1:	89 3d 64 23 02 c0    	mov    DWORD PTR ds:0xc0022364,edi
c000e0e7:	eb a8                	jmp    c000e091 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e0e9:	83 ec 0c             	sub    esp,0xc
c000e0ec:	68 74 04 02 c0       	push   0xc0020474
c000e0f1:	e8 5e db ff ff       	call   c000bc54 <panic(char const*)>
c000e0f6:	8b 3d 64 23 02 c0    	mov    edi,DWORD PTR ds:0xc0022364
c000e0fc:	83 c4 10             	add    esp,0x10
c000e0ff:	eb 90                	jmp    c000e091 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e101:	89 2d 64 23 02 c0    	mov    DWORD PTR ds:0xc0022364,ebp
c000e107:	4b                   	dec    ebx
c000e108:	74 5f                	je     c000e169 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000e10a:	85 f6                	test   esi,esi
c000e10c:	74 3d                	je     c000e14b <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e10e:	89 e8                	mov    eax,ebp
c000e110:	31 db                	xor    ebx,ebx
c000e112:	8d 7e ff             	lea    edi,[esi-0x1]
c000e115:	eb 14                	jmp    c000e12b <Virt::allocateKernelVirtualPages(int)+0xb4>
c000e117:	6a 01                	push   0x1
c000e119:	43                   	inc    ebx
c000e11a:	50                   	push   eax
c000e11b:	e8 fe fe ff ff       	call   c000e01e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e120:	58                   	pop    eax
c000e121:	39 f3                	cmp    ebx,esi
c000e123:	5a                   	pop    edx
c000e124:	74 25                	je     c000e14b <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e126:	a1 64 23 02 c0       	mov    eax,ds:0xc0022364
c000e12b:	8d 50 01             	lea    edx,[eax+0x1]
c000e12e:	85 db                	test   ebx,ebx
c000e130:	89 15 64 23 02 c0    	mov    DWORD PTR ds:0xc0022364,edx
c000e136:	74 20                	je     c000e158 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000e138:	39 df                	cmp    edi,ebx
c000e13a:	75 db                	jne    c000e117 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000e13c:	6a 03                	push   0x3
c000e13e:	43                   	inc    ebx
c000e13f:	50                   	push   eax
c000e140:	e8 d9 fe ff ff       	call   c000e01e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e145:	59                   	pop    ecx
c000e146:	39 f3                	cmp    ebx,esi
c000e148:	58                   	pop    eax
c000e149:	75 db                	jne    c000e126 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e14b:	83 c4 1c             	add    esp,0x1c
c000e14e:	89 e8                	mov    eax,ebp
c000e150:	5b                   	pop    ebx
c000e151:	c1 e0 0c             	shl    eax,0xc
c000e154:	5e                   	pop    esi
c000e155:	5f                   	pop    edi
c000e156:	5d                   	pop    ebp
c000e157:	c3                   	ret    
c000e158:	6a 02                	push   0x2
c000e15a:	bb 01 00 00 00       	mov    ebx,0x1
c000e15f:	50                   	push   eax
c000e160:	e8 b9 fe ff ff       	call   c000e01e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e165:	58                   	pop    eax
c000e166:	5a                   	pop    edx
c000e167:	eb bd                	jmp    c000e126 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e169:	6a 04                	push   0x4
c000e16b:	8d 45 01             	lea    eax,[ebp+0x1]
c000e16e:	55                   	push   ebp
c000e16f:	a3 64 23 02 c0       	mov    ds:0xc0022364,eax
c000e174:	e8 a5 fe ff ff       	call   c000e01e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e179:	59                   	pop    ecx
c000e17a:	89 e8                	mov    eax,ebp
c000e17c:	5b                   	pop    ebx
c000e17d:	c1 e0 0c             	shl    eax,0xc
c000e180:	83 c4 1c             	add    esp,0x1c
c000e183:	5b                   	pop    ebx
c000e184:	5e                   	pop    esi
c000e185:	5f                   	pop    edi
c000e186:	5d                   	pop    ebp
c000e187:	c3                   	ret    

c000e188 <Virt::virtualMemorySetup()>:
c000e188:	53                   	push   ebx
c000e189:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e18e:	83 ec 08             	sub    esp,0x8
c000e191:	6a 0f                	push   0xf
c000e193:	53                   	push   ebx
c000e194:	43                   	inc    ebx
c000e195:	e8 84 fe ff ff       	call   c000e01e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e19a:	59                   	pop    ecx
c000e19b:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e1a1:	58                   	pop    eax
c000e1a2:	75 ed                	jne    c000e191 <Virt::virtualMemorySetup()+0x9>
c000e1a4:	83 ec 08             	sub    esp,0x8
c000e1a7:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e1ac:	68 00 00 00 c8       	push   0xc8000000
c000e1b1:	68 1f 06 02 c0       	push   0xc002061f
c000e1b6:	e8 7b d9 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000e1bb:	58                   	pop    eax
c000e1bc:	5a                   	pop    edx
c000e1bd:	68 00 f0 ff ef       	push   0xeffff000
c000e1c2:	68 33 06 02 c0       	push   0xc0020633
c000e1c7:	e8 6a d9 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000e1cc:	83 c4 10             	add    esp,0x10
c000e1cf:	83 ec 08             	sub    esp,0x8
c000e1d2:	6a 00                	push   0x0
c000e1d4:	53                   	push   ebx
c000e1d5:	43                   	inc    ebx
c000e1d6:	e8 43 fe ff ff       	call   c000e01e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e1db:	83 c4 10             	add    esp,0x10
c000e1de:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e1e4:	75 e9                	jne    c000e1cf <Virt::virtualMemorySetup()+0x47>
c000e1e6:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000e1eb:	83 ec 08             	sub    esp,0x8
c000e1ee:	6a 0f                	push   0xf
c000e1f0:	53                   	push   ebx
c000e1f1:	43                   	inc    ebx
c000e1f2:	e8 27 fe ff ff       	call   c000e01e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e1f7:	83 c4 10             	add    esp,0x10
c000e1fa:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000e200:	75 e9                	jne    c000e1eb <Virt::virtualMemorySetup()+0x63>
c000e202:	83 c4 08             	add    esp,0x8
c000e205:	5b                   	pop    ebx
c000e206:	c3                   	ret    

c000e207 <Virt::getAKernelVAS()>:
c000e207:	a1 9c 2f 02 c0       	mov    eax,ds:0xc0022f9c
c000e20c:	c3                   	ret    

c000e20d <Virt::setupPageSwapping(int)>:
c000e20d:	57                   	push   edi
c000e20e:	56                   	push   esi
c000e20f:	53                   	push   ebx
c000e210:	83 ec 1c             	sub    esp,0x1c
c000e213:	68 14 01 00 00       	push   0x114
c000e218:	e8 eb 0f 00 00       	call   c000f208 <operator new(unsigned long)>
c000e21d:	83 c4 0c             	add    esp,0xc
c000e220:	89 c6                	mov    esi,eax
c000e222:	ff 35 94 42 02 c0    	push   DWORD PTR ds:0xc0024294
c000e228:	68 47 06 02 c0       	push   0xc0020647
c000e22d:	50                   	push   eax
c000e22e:	e8 03 14 00 00       	call   c000f636 <File::File(char const*, Process*)>
c000e233:	89 34 24             	mov    DWORD PTR [esp],esi
c000e236:	e8 d7 15 00 00       	call   c000f812 <File::unlink()>
c000e23b:	58                   	pop    eax
c000e23c:	5a                   	pop    edx
c000e23d:	6a 12                	push   0x12
c000e23f:	56                   	push   esi
c000e240:	e8 55 14 00 00       	call   c000f69a <File::open(FileOpenMode)>
c000e245:	83 c4 10             	add    esp,0x10
c000e248:	85 c0                	test   eax,eax
c000e24a:	0f 85 bf 00 00 00    	jne    c000e30f <Virt::setupPageSwapping(int)+0x102>
c000e250:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e254:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e25c:	c1 e3 08             	shl    ebx,0x8
c000e25f:	83 ec 0c             	sub    esp,0xc
c000e262:	68 00 00 01 00       	push   0x10000
c000e267:	e8 c5 de ff ff       	call   c000c131 <malloc>
c000e26c:	83 c4 0c             	add    esp,0xc
c000e26f:	89 c7                	mov    edi,eax
c000e271:	68 00 00 01 00       	push   0x10000
c000e276:	6a 00                	push   0x0
c000e278:	50                   	push   eax
c000e279:	e8 8a 23 ff ff       	call   c0000608 <memset>
c000e27e:	83 c4 10             	add    esp,0x10
c000e281:	85 db                	test   ebx,ebx
c000e283:	79 03                	jns    c000e288 <Virt::setupPageSwapping(int)+0x7b>
c000e285:	83 c3 0f             	add    ebx,0xf
c000e288:	c1 fb 04             	sar    ebx,0x4
c000e28b:	4b                   	dec    ebx
c000e28c:	83 fb ff             	cmp    ebx,0xffffffff
c000e28f:	74 4b                	je     c000e2dc <Virt::setupPageSwapping(int)+0xcf>
c000e291:	83 ec 0c             	sub    esp,0xc
c000e294:	8b 06                	mov    eax,DWORD PTR [esi]
c000e296:	8d 54 24 18          	lea    edx,[esp+0x18]
c000e29a:	52                   	push   edx
c000e29b:	57                   	push   edi
c000e29c:	6a 00                	push   0x0
c000e29e:	68 00 00 01 00       	push   0x10000
c000e2a3:	56                   	push   esi
c000e2a4:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e2a7:	83 c4 20             	add    esp,0x20
c000e2aa:	85 c0                	test   eax,eax
c000e2ac:	75 4e                	jne    c000e2fc <Virt::setupPageSwapping(int)+0xef>
c000e2ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2b2:	3d 00 00 01 00       	cmp    eax,0x10000
c000e2b7:	74 d2                	je     c000e28b <Virt::setupPageSwapping(int)+0x7e>
c000e2b9:	83 ec 08             	sub    esp,0x8
c000e2bc:	4b                   	dec    ebx
c000e2bd:	50                   	push   eax
c000e2be:	68 9a 06 02 c0       	push   0xc002069a
c000e2c3:	e8 6e d8 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000e2c8:	c7 04 24 a3 06 02 c0 	mov    DWORD PTR [esp],0xc00206a3
c000e2cf:	e8 80 d9 ff ff       	call   c000bc54 <panic(char const*)>
c000e2d4:	83 c4 10             	add    esp,0x10
c000e2d7:	83 fb ff             	cmp    ebx,0xffffffff
c000e2da:	75 b5                	jne    c000e291 <Virt::setupPageSwapping(int)+0x84>
c000e2dc:	83 ec 0c             	sub    esp,0xc
c000e2df:	56                   	push   esi
c000e2e0:	e8 13 14 00 00       	call   c000f6f8 <File::close()>
c000e2e5:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e2e8:	e8 64 de ff ff       	call   c000c151 <rfree>
c000e2ed:	89 34 24             	mov    DWORD PTR [esp],esi
c000e2f0:	8b 06                	mov    eax,DWORD PTR [esi]
c000e2f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e2f5:	83 c4 20             	add    esp,0x20
c000e2f8:	5b                   	pop    ebx
c000e2f9:	5e                   	pop    esi
c000e2fa:	5f                   	pop    edi
c000e2fb:	c3                   	ret    
c000e2fc:	83 ec 08             	sub    esp,0x8
c000e2ff:	50                   	push   eax
c000e300:	68 82 06 02 c0       	push   0xc0020682
c000e305:	e8 2c d8 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000e30a:	83 c4 10             	add    esp,0x10
c000e30d:	eb 9f                	jmp    c000e2ae <Virt::setupPageSwapping(int)+0xa1>
c000e30f:	83 ec 08             	sub    esp,0x8
c000e312:	50                   	push   eax
c000e313:	68 5e 06 02 c0       	push   0xc002065e
c000e318:	e8 19 d8 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000e31d:	c7 04 24 67 06 02 c0 	mov    DWORD PTR [esp],0xc0020667
c000e324:	e8 2b d9 ff ff       	call   c000bc54 <panic(char const*)>
c000e329:	83 c4 10             	add    esp,0x10
c000e32c:	e9 1f ff ff ff       	jmp    c000e250 <Virt::setupPageSwapping(int)+0x43>
c000e331:	90                   	nop

c000e332 <VAS::VAS()>:
c000e332:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e336:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e33d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e341:	a3 9c 2f 02 c0       	mov    ds:0xc0022f9c,eax
c000e346:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e34a:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e34e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e352:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e355:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e359:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e360:	90                   	nop
c000e361:	c3                   	ret    

c000e362 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e362:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e366:	89 c2                	mov    edx,eax
c000e368:	c1 e8 0a             	shr    eax,0xa
c000e36b:	c1 ea 16             	shr    edx,0x16
c000e36e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e373:	19 c9                	sbb    ecx,ecx
c000e375:	c1 e2 0c             	shl    edx,0xc
c000e378:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e37e:	25 fc 0f 00 00       	and    eax,0xffc
c000e383:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e38a:	01 d0                	add    eax,edx
c000e38c:	c3                   	ret    
c000e38d:	90                   	nop

c000e38e <VAS::getPageTableEntry(unsigned long)>:
c000e38e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e392:	89 ca                	mov    edx,ecx
c000e394:	c1 e9 0a             	shr    ecx,0xa
c000e397:	c1 ea 16             	shr    edx,0x16
c000e39a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e3a0:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e3a6:	c1 e0 0c             	shl    eax,0xc
c000e3a9:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e3ac:	c3                   	ret    

c000e3ad <Virt::freeKernelVirtualPages(unsigned long)>:
c000e3ad:	57                   	push   edi
c000e3ae:	56                   	push   esi
c000e3af:	be 01 00 00 00       	mov    esi,0x1
c000e3b4:	53                   	push   ebx
c000e3b5:	83 ec 10             	sub    esp,0x10
c000e3b8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e3bc:	c1 eb 0c             	shr    ebx,0xc
c000e3bf:	eb 3f                	jmp    c000e400 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c000e3c1:	e8 41 fe ff ff       	call   c000e207 <Virt::getAKernelVAS()>
c000e3c6:	83 ec 08             	sub    esp,0x8
c000e3c9:	57                   	push   edi
c000e3ca:	50                   	push   eax
c000e3cb:	e8 be ff ff ff       	call   c000e38e <VAS::getPageTableEntry(unsigned long)>
c000e3d0:	83 c4 10             	add    esp,0x10
c000e3d3:	8b 00                	mov    eax,DWORD PTR [eax]
c000e3d5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e3d9:	f6 c4 04             	test   ah,0x4
c000e3dc:	75 5f                	jne    c000e43d <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c000e3de:	80 fa 04             	cmp    dl,0x4
c000e3e1:	74 78                	je     c000e45b <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c000e3e3:	80 fa 02             	cmp    dl,0x2
c000e3e6:	0f 84 88 00 00 00    	je     c000e474 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c000e3ec:	80 fa 03             	cmp    dl,0x3
c000e3ef:	0f 84 ad 00 00 00    	je     c000e4a2 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c000e3f5:	fe ca                	dec    dl
c000e3f7:	0f 84 92 00 00 00    	je     c000e48f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e3fd:	43                   	inc    ebx
c000e3fe:	31 f6                	xor    esi,esi
c000e400:	53                   	push   ebx
c000e401:	e8 4d fc ff ff       	call   c000e053 <Virt::getPageState(unsigned long)>
c000e406:	5f                   	pop    edi
c000e407:	89 df                	mov    edi,ebx
c000e409:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e40d:	c1 e7 0c             	shl    edi,0xc
c000e410:	84 c0                	test   al,al
c000e412:	75 ad                	jne    c000e3c1 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e414:	83 ec 0c             	sub    esp,0xc
c000e417:	68 a9 06 02 c0       	push   0xc00206a9
c000e41c:	e8 33 d8 ff ff       	call   c000bc54 <panic(char const*)>
c000e421:	e8 e1 fd ff ff       	call   c000e207 <Virt::getAKernelVAS()>
c000e426:	5a                   	pop    edx
c000e427:	59                   	pop    ecx
c000e428:	57                   	push   edi
c000e429:	50                   	push   eax
c000e42a:	e8 5f ff ff ff       	call   c000e38e <VAS::getPageTableEntry(unsigned long)>
c000e42f:	83 c4 10             	add    esp,0x10
c000e432:	8b 00                	mov    eax,DWORD PTR [eax]
c000e434:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e438:	f6 c4 04             	test   ah,0x4
c000e43b:	74 c0                	je     c000e3fd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e43d:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e441:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e446:	83 ec 0c             	sub    esp,0xc
c000e449:	50                   	push   eax
c000e44a:	e8 02 e2 ff ff       	call   c000c651 <Phys::freePage(unsigned long)>
c000e44f:	83 c4 10             	add    esp,0x10
c000e452:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e456:	80 fa 04             	cmp    dl,0x4
c000e459:	75 88                	jne    c000e3e3 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000e45b:	89 f0                	mov    eax,esi
c000e45d:	84 c0                	test   al,al
c000e45f:	75 47                	jne    c000e4a8 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c000e461:	c7 44 24 20 94 04 02 c0 	mov    DWORD PTR [esp+0x20],0xc0020494
c000e469:	83 c4 10             	add    esp,0x10
c000e46c:	5b                   	pop    ebx
c000e46d:	5e                   	pop    esi
c000e46e:	5f                   	pop    edi
c000e46f:	e9 e0 d7 ff ff       	jmp    c000bc54 <panic(char const*)>
c000e474:	89 f0                	mov    eax,esi
c000e476:	84 c0                	test   al,al
c000e478:	75 15                	jne    c000e48f <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c000e47a:	83 ec 0c             	sub    esp,0xc
c000e47d:	68 c5 06 02 c0       	push   0xc00206c5
c000e482:	e8 cd d7 ff ff       	call   c000bc54 <panic(char const*)>
c000e487:	83 c4 10             	add    esp,0x10
c000e48a:	e9 6e ff ff ff       	jmp    c000e3fd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e48f:	83 ec 08             	sub    esp,0x8
c000e492:	6a 00                	push   0x0
c000e494:	53                   	push   ebx
c000e495:	e8 84 fb ff ff       	call   c000e01e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e49a:	83 c4 10             	add    esp,0x10
c000e49d:	e9 5b ff ff ff       	jmp    c000e3fd <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000e4a2:	89 f0                	mov    eax,esi
c000e4a4:	84 c0                	test   al,al
c000e4a6:	75 15                	jne    c000e4bd <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c000e4a8:	83 ec 08             	sub    esp,0x8
c000e4ab:	6a 00                	push   0x0
c000e4ad:	53                   	push   ebx
c000e4ae:	e8 6b fb ff ff       	call   c000e01e <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e4b3:	83 c4 10             	add    esp,0x10
c000e4b6:	83 c4 10             	add    esp,0x10
c000e4b9:	5b                   	pop    ebx
c000e4ba:	5e                   	pop    esi
c000e4bb:	5f                   	pop    edi
c000e4bc:	c3                   	ret    
c000e4bd:	c7 44 24 20 e1 06 02 c0 	mov    DWORD PTR [esp+0x20],0xc00206e1
c000e4c5:	83 c4 10             	add    esp,0x10
c000e4c8:	5b                   	pop    ebx
c000e4c9:	5e                   	pop    esi
c000e4ca:	5f                   	pop    edi
c000e4cb:	e9 84 d7 ff ff       	jmp    c000bc54 <panic(char const*)>

c000e4d0 <VAS::freeAllocatedPages(unsigned long)>:
c000e4d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e4d8:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e4dc:	74 09                	je     c000e4e7 <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e4de:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e4e2:	e9 c6 fe ff ff       	jmp    c000e3ad <Virt::freeKernelVirtualPages(unsigned long)>
c000e4e7:	c7 44 24 04 b8 04 02 c0 	mov    DWORD PTR [esp+0x4],0xc00204b8
c000e4ef:	e9 42 d6 ff ff       	jmp    c000bb36 <kprintf(char const*, ...)>

c000e4f4 <VAS::virtualToPhysical(unsigned long)>:
c000e4f4:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e4f8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e4fc:	e8 8d fe ff ff       	call   c000e38e <VAS::getPageTableEntry(unsigned long)>
c000e501:	5a                   	pop    edx
c000e502:	8b 00                	mov    eax,DWORD PTR [eax]
c000e504:	59                   	pop    ecx
c000e505:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e50a:	c3                   	ret    
c000e50b:	90                   	nop

c000e50c <VAS::mapOtherVASIn(bool, VAS*)>:
c000e50c:	83 ec 0c             	sub    esp,0xc
c000e50f:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e514:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e518:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e51b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e51f:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e522:	19 c0                	sbb    eax,eax
c000e524:	83 ca 03             	or     edx,0x3
c000e527:	83 e0 fc             	and    eax,0xfffffffc
c000e52a:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e531:	e8 93 fe 00 00       	call   c001e3c9 <CPU::readCR3()>
c000e536:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e53a:	83 c4 0c             	add    esp,0xc
c000e53d:	e9 ab fe 00 00       	jmp    c001e3ed <CPU::writeCR3(unsigned long)>

c000e542 <VAS::~VAS()>:
c000e542:	83 ec 2c             	sub    esp,0x2c
c000e545:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e54d:	e8 b6 90 00 00       	call   c0017608 <lockScheduler()>
c000e552:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e557:	8b 00                	mov    eax,DWORD PTR [eax]
c000e559:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e55c:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e562:	83 ec 04             	sub    esp,0x4
c000e565:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e569:	6a 01                	push   0x1
c000e56b:	50                   	push   eax
c000e56c:	e8 9b ff ff ff       	call   c000e50c <VAS::mapOtherVASIn(bool, VAS*)>
c000e571:	83 c4 10             	add    esp,0x10
c000e574:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e57c:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e584:	0f 8f d7 00 00 00    	jg     c000e661 <VAS::~VAS()+0x11f>
c000e58a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e58e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e591:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e595:	c1 e2 02             	shl    edx,0x2
c000e598:	01 d0                	add    eax,edx
c000e59a:	8b 00                	mov    eax,DWORD PTR [eax]
c000e59c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e5a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5a4:	83 e0 01             	and    eax,0x1
c000e5a7:	0f 84 ab 00 00 00    	je     c000e658 <VAS::~VAS()+0x116>
c000e5ad:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e5b5:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e5bd:	7f 75                	jg     c000e634 <VAS::~VAS()+0xf2>
c000e5bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e5c3:	c1 e0 0a             	shl    eax,0xa
c000e5c6:	89 c2                	mov    edx,eax
c000e5c8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e5cc:	01 d0                	add    eax,edx
c000e5ce:	c1 e0 0c             	shl    eax,0xc
c000e5d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5d5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e5da:	8b 00                	mov    eax,DWORD PTR [eax]
c000e5dc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e5df:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e5e5:	83 ec 04             	sub    esp,0x4
c000e5e8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e5ec:	6a 01                	push   0x1
c000e5ee:	50                   	push   eax
c000e5ef:	e8 6e fd ff ff       	call   c000e362 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e5f4:	83 c4 10             	add    esp,0x10
c000e5f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e5fb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e5ff:	8b 00                	mov    eax,DWORD PTR [eax]
c000e601:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e605:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e609:	25 01 04 00 00       	and    eax,0x401
c000e60e:	3d 01 04 00 00       	cmp    eax,0x401
c000e613:	75 19                	jne    c000e62e <VAS::~VAS()+0xec>
c000e615:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e619:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e61e:	83 ec 0c             	sub    esp,0xc
c000e621:	50                   	push   eax
c000e622:	e8 2a e0 ff ff       	call   c000c651 <Phys::freePage(unsigned long)>
c000e627:	83 c4 10             	add    esp,0x10
c000e62a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e62e:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e632:	eb 81                	jmp    c000e5b5 <VAS::~VAS()+0x73>
c000e634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e638:	25 00 04 00 00       	and    eax,0x400
c000e63d:	74 19                	je     c000e658 <VAS::~VAS()+0x116>
c000e63f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e643:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e648:	83 ec 0c             	sub    esp,0xc
c000e64b:	50                   	push   eax
c000e64c:	e8 00 e0 ff ff       	call   c000c651 <Phys::freePage(unsigned long)>
c000e651:	83 c4 10             	add    esp,0x10
c000e654:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e658:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e65c:	e9 1b ff ff ff       	jmp    c000e57c <VAS::~VAS()+0x3a>
c000e661:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e665:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e668:	83 ec 0c             	sub    esp,0xc
c000e66b:	50                   	push   eax
c000e66c:	e8 3c fd ff ff       	call   c000e3ad <Virt::freeKernelVirtualPages(unsigned long)>
c000e671:	83 c4 10             	add    esp,0x10
c000e674:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e678:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e67b:	83 ec 0c             	sub    esp,0xc
c000e67e:	50                   	push   eax
c000e67f:	e8 cd df ff ff       	call   c000c651 <Phys::freePage(unsigned long)>
c000e684:	83 c4 10             	add    esp,0x10
c000e687:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e68b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e68f:	c1 e0 02             	shl    eax,0x2
c000e692:	83 ec 08             	sub    esp,0x8
c000e695:	50                   	push   eax
c000e696:	68 dc 04 02 c0       	push   0xc00204dc
c000e69b:	e8 96 d4 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000e6a0:	83 c4 10             	add    esp,0x10
c000e6a3:	e8 62 8f 00 00       	call   c001760a <unlockScheduler()>
c000e6a8:	90                   	nop
c000e6a9:	83 c4 2c             	add    esp,0x2c
c000e6ac:	c3                   	ret    
c000e6ad:	90                   	nop

c000e6ae <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e6ae:	55                   	push   ebp
c000e6af:	57                   	push   edi
c000e6b0:	56                   	push   esi
c000e6b1:	53                   	push   ebx
c000e6b2:	83 ec 1c             	sub    esp,0x1c
c000e6b5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e6b9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e6bd:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e6c3:	77 08                	ja     c000e6cd <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e6c5:	0f 20 d8             	mov    eax,cr3
c000e6c8:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e6cb:	75 47                	jne    c000e714 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c000e6cd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6d1:	09 d8                	or     eax,ebx
c000e6d3:	a9 ff 0f 00 00       	test   eax,0xfff
c000e6d8:	75 57                	jne    c000e731 <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c000e6da:	89 de                	mov    esi,ebx
c000e6dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e6df:	c1 ee 16             	shr    esi,0x16
c000e6e2:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e6e9:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e6ed:	74 54                	je     c000e743 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c000e6ef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e6f3:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e6f9:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000e6fd:	c1 e6 0c             	shl    esi,0xc
c000e700:	c1 eb 0a             	shr    ebx,0xa
c000e703:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e709:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e70c:	83 c4 1c             	add    esp,0x1c
c000e70f:	5b                   	pop    ebx
c000e710:	5e                   	pop    esi
c000e711:	5f                   	pop    edi
c000e712:	5d                   	pop    ebp
c000e713:	c3                   	ret    
c000e714:	83 ec 0c             	sub    esp,0xc
c000e717:	68 fc 04 02 c0       	push   0xc00204fc
c000e71c:	e8 15 d4 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000e721:	83 c4 10             	add    esp,0x10
c000e724:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e728:	09 d8                	or     eax,ebx
c000e72a:	a9 ff 0f 00 00       	test   eax,0xfff
c000e72f:	74 a9                	je     c000e6da <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e731:	83 ec 0c             	sub    esp,0xc
c000e734:	68 64 05 02 c0       	push   0xc0020564
c000e739:	e8 16 d5 ff ff       	call   c000bc54 <panic(char const*)>
c000e73e:	83 c4 10             	add    esp,0x10
c000e741:	eb 97                	jmp    c000e6da <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e743:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e747:	e8 8f df ff ff       	call   c000c6db <Phys::allocatePage()>
c000e74c:	89 c5                	mov    ebp,eax
c000e74e:	e8 b4 fa ff ff       	call   c000e207 <Virt::getAKernelVAS()>
c000e753:	83 ec 0c             	sub    esp,0xc
c000e756:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e75a:	6a 01                	push   0x1
c000e75c:	e8 16 f9 ff ff       	call   c000e077 <Virt::allocateKernelVirtualPages(int)>
c000e761:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e768:	6a 01                	push   0x1
c000e76a:	50                   	push   eax
c000e76b:	55                   	push   ebp
c000e76c:	81 cd 07 04 00 00    	or     ebp,0x407
c000e772:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e776:	51                   	push   ecx
c000e777:	e8 1e 02 00 00       	call   c000e99a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e77c:	83 c4 1c             	add    esp,0x1c
c000e77f:	68 00 10 00 00       	push   0x1000
c000e784:	6a 00                	push   0x0
c000e786:	50                   	push   eax
c000e787:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e78b:	e8 78 1e ff ff       	call   c0000608 <memset>
c000e790:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e794:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e797:	e8 11 fc ff ff       	call   c000e3ad <Virt::freeKernelVirtualPages(unsigned long)>
c000e79c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e7a0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e7a3:	83 c4 10             	add    esp,0x10
c000e7a6:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e7a9:	e9 41 ff ff ff       	jmp    c000e6ef <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e7ae <VAS::allocatePages(int, int)>:
c000e7ae:	55                   	push   ebp
c000e7af:	57                   	push   edi
c000e7b0:	56                   	push   esi
c000e7b1:	53                   	push   ebx
c000e7b2:	83 ec 1c             	sub    esp,0x1c
c000e7b5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e7b9:	e8 ac 57 00 00       	call   c0013f6a <thisCPU()>
c000e7be:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e7c4:	83 e0 01             	and    eax,0x1
c000e7c7:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e7cb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e7cf:	0f 85 d7 00 00 00    	jne    c000e8ac <VAS::allocatePages(int, int)+0xfe>
c000e7d5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e7d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e7dc:	85 c0                	test   eax,eax
c000e7de:	0f 84 ac 00 00 00    	je     c000e890 <VAS::allocatePages(int, int)+0xe2>
c000e7e4:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e7e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e7ec:	c1 e6 0c             	shl    esi,0xc
c000e7ef:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c000e7f3:	85 c0                	test   eax,eax
c000e7f5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000e7f8:	7e 33                	jle    c000e82d <VAS::allocatePages(int, int)+0x7f>
c000e7fa:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e7fe:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e802:	81 cd 00 04 00 00    	or     ebp,0x400
c000e808:	e8 ce de ff ff       	call   c000c6db <Phys::allocatePage()>
c000e80d:	55                   	push   ebp
c000e80e:	53                   	push   ebx
c000e80f:	50                   	push   eax
c000e810:	57                   	push   edi
c000e811:	e8 98 fe ff ff       	call   c000e6ae <VAS::mapPage(unsigned long, unsigned long, int)>
c000e816:	83 c4 10             	add    esp,0x10
c000e819:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e81e:	74 03                	je     c000e823 <VAS::allocatePages(int, int)+0x75>
c000e820:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e823:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e829:	39 de                	cmp    esi,ebx
c000e82b:	75 db                	jne    c000e808 <VAS::allocatePages(int, int)+0x5a>
c000e82d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e832:	74 3f                	je     c000e873 <VAS::allocatePages(int, int)+0xc5>
c000e834:	c1 ee 0a             	shr    esi,0xa
c000e837:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e83b:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000e841:	c1 eb 0a             	shr    ebx,0xa
c000e844:	81 ee 00 00 40 00    	sub    esi,0x400000
c000e84a:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e850:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e856:	39 f3                	cmp    ebx,esi
c000e858:	77 0d                	ja     c000e867 <VAS::allocatePages(int, int)+0xb9>
c000e85a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e85d:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e863:	39 de                	cmp    esi,ebx
c000e865:	73 f3                	jae    c000e85a <VAS::allocatePages(int, int)+0xac>
c000e867:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e86b:	83 c4 1c             	add    esp,0x1c
c000e86e:	5b                   	pop    ebx
c000e86f:	5e                   	pop    esi
c000e870:	5f                   	pop    edi
c000e871:	5d                   	pop    ebp
c000e872:	c3                   	ret    
c000e873:	e8 51 fb 00 00       	call   c001e3c9 <CPU::readCR3()>
c000e878:	83 ec 0c             	sub    esp,0xc
c000e87b:	50                   	push   eax
c000e87c:	e8 6c fb 00 00       	call   c001e3ed <CPU::writeCR3(unsigned long)>
c000e881:	83 c4 10             	add    esp,0x10
c000e884:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e888:	83 c4 1c             	add    esp,0x1c
c000e88b:	5b                   	pop    ebx
c000e88c:	5e                   	pop    esi
c000e88d:	5f                   	pop    edi
c000e88e:	5d                   	pop    ebp
c000e88f:	c3                   	ret    
c000e890:	83 ec 0c             	sub    esp,0xc
c000e893:	68 88 05 02 c0       	push   0xc0020588
c000e898:	e8 b7 d3 ff ff       	call   c000bc54 <panic(char const*)>
c000e89d:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e8a0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e8a4:	83 c4 10             	add    esp,0x10
c000e8a7:	e9 38 ff ff ff       	jmp    c000e7e4 <VAS::allocatePages(int, int)+0x36>
c000e8ac:	83 ec 0c             	sub    esp,0xc
c000e8af:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e8b3:	e8 bf f7 ff ff       	call   c000e077 <Virt::allocateKernelVirtualPages(int)>
c000e8b8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e8bc:	83 c4 10             	add    esp,0x10
c000e8bf:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000e8c4:	0f 87 94 00 00 00    	ja     c000e95e <VAS::allocatePages(int, int)+0x1b0>
c000e8ca:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e8ce:	85 d2                	test   edx,edx
c000e8d0:	7e 3c                	jle    c000e90e <VAS::allocatePages(int, int)+0x160>
c000e8d2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e8d6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e8da:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e8de:	c1 e5 0c             	shl    ebp,0xc
c000e8e1:	81 ce 00 04 00 00    	or     esi,0x400
c000e8e7:	01 dd                	add    ebp,ebx
c000e8e9:	e8 ed dd ff ff       	call   c000c6db <Phys::allocatePage()>
c000e8ee:	56                   	push   esi
c000e8ef:	53                   	push   ebx
c000e8f0:	50                   	push   eax
c000e8f1:	57                   	push   edi
c000e8f2:	e8 b7 fd ff ff       	call   c000e6ae <VAS::mapPage(unsigned long, unsigned long, int)>
c000e8f7:	83 c4 10             	add    esp,0x10
c000e8fa:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e8ff:	74 03                	je     c000e904 <VAS::allocatePages(int, int)+0x156>
c000e901:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e904:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e90a:	39 dd                	cmp    ebp,ebx
c000e90c:	75 db                	jne    c000e8e9 <VAS::allocatePages(int, int)+0x13b>
c000e90e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e913:	0f 84 5a ff ff ff    	je     c000e873 <VAS::allocatePages(int, int)+0xc5>
c000e919:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e91d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e921:	89 d3                	mov    ebx,edx
c000e923:	c1 e0 0c             	shl    eax,0xc
c000e926:	c1 eb 0a             	shr    ebx,0xa
c000e929:	01 d0                	add    eax,edx
c000e92b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000e931:	c1 e8 0a             	shr    eax,0xa
c000e934:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000e93a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e93f:	2d 00 00 40 00       	sub    eax,0x400000
c000e944:	39 c3                	cmp    ebx,eax
c000e946:	0f 87 1b ff ff ff    	ja     c000e867 <VAS::allocatePages(int, int)+0xb9>
c000e94c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e94f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e955:	39 d8                	cmp    eax,ebx
c000e957:	73 f3                	jae    c000e94c <VAS::allocatePages(int, int)+0x19e>
c000e959:	e9 09 ff ff ff       	jmp    c000e867 <VAS::allocatePages(int, int)+0xb9>
c000e95e:	e8 07 56 00 00       	call   c0013f6a <thisCPU()>
c000e963:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000e96a:	0f 84 5a ff ff ff    	je     c000e8ca <VAS::allocatePages(int, int)+0x11c>
c000e970:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c000e978:	e9 4d ff ff ff       	jmp    c000e8ca <VAS::allocatePages(int, int)+0x11c>
c000e97d:	90                   	nop

c000e97e <VAS::setCPUSpecific(unsigned long)>:
c000e97e:	83 ec 0c             	sub    esp,0xc
c000e981:	6a 05                	push   0x5
c000e983:	68 00 00 40 c2       	push   0xc2400000
c000e988:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e98c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e990:	e8 19 fd ff ff       	call   c000e6ae <VAS::mapPage(unsigned long, unsigned long, int)>
c000e995:	83 c4 1c             	add    esp,0x1c
c000e998:	c3                   	ret    
c000e999:	90                   	nop

c000e99a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000e99a:	55                   	push   ebp
c000e99b:	57                   	push   edi
c000e99c:	56                   	push   esi
c000e99d:	53                   	push   ebx
c000e99e:	83 ec 1c             	sub    esp,0x1c
c000e9a1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e9a5:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e9a9:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000e9ad:	e8 b8 55 00 00       	call   c0013f6a <thisCPU()>
c000e9b2:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e9b8:	83 e0 01             	and    eax,0x1
c000e9bb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e9bf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e9c3:	85 c0                	test   eax,eax
c000e9c5:	7e 39                	jle    c000ea00 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000e9c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e9cb:	89 f3                	mov    ebx,esi
c000e9cd:	c1 e0 0c             	shl    eax,0xc
c000e9d0:	01 f0                	add    eax,esi
c000e9d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9d6:	55                   	push   ebp
c000e9d7:	53                   	push   ebx
c000e9d8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e9dc:	29 f0                	sub    eax,esi
c000e9de:	01 d8                	add    eax,ebx
c000e9e0:	50                   	push   eax
c000e9e1:	57                   	push   edi
c000e9e2:	e8 c7 fc ff ff       	call   c000e6ae <VAS::mapPage(unsigned long, unsigned long, int)>
c000e9e7:	83 c4 10             	add    esp,0x10
c000e9ea:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000e9ef:	74 03                	je     c000e9f4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000e9f1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000e9f4:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e9fa:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000e9fe:	75 d6                	jne    c000e9d6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000ea00:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea05:	74 42                	je     c000ea49 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000ea07:	89 f3                	mov    ebx,esi
c000ea09:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea0d:	c1 eb 0a             	shr    ebx,0xa
c000ea10:	c1 e0 0c             	shl    eax,0xc
c000ea13:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000ea19:	01 f0                	add    eax,esi
c000ea1b:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ea21:	c1 e8 0a             	shr    eax,0xa
c000ea24:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ea29:	2d 00 00 40 00       	sub    eax,0x400000
c000ea2e:	39 c3                	cmp    ebx,eax
c000ea30:	77 0d                	ja     c000ea3f <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000ea32:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea35:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea3b:	39 d8                	cmp    eax,ebx
c000ea3d:	73 f3                	jae    c000ea32 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000ea3f:	83 c4 1c             	add    esp,0x1c
c000ea42:	89 f0                	mov    eax,esi
c000ea44:	5b                   	pop    ebx
c000ea45:	5e                   	pop    esi
c000ea46:	5f                   	pop    edi
c000ea47:	5d                   	pop    ebp
c000ea48:	c3                   	ret    
c000ea49:	e8 7b f9 00 00       	call   c001e3c9 <CPU::readCR3()>
c000ea4e:	83 ec 0c             	sub    esp,0xc
c000ea51:	50                   	push   eax
c000ea52:	e8 96 f9 00 00       	call   c001e3ed <CPU::writeCR3(unsigned long)>
c000ea57:	89 f0                	mov    eax,esi
c000ea59:	83 c4 10             	add    esp,0x10
c000ea5c:	83 c4 1c             	add    esp,0x1c
c000ea5f:	5b                   	pop    ebx
c000ea60:	5e                   	pop    esi
c000ea61:	5f                   	pop    edi
c000ea62:	5d                   	pop    ebp
c000ea63:	c3                   	ret    

c000ea64 <VAS::VAS(VAS*)>:
c000ea64:	53                   	push   ebx
c000ea65:	83 ec 38             	sub    esp,0x38
c000ea68:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea6c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ea73:	e8 b7 8b 00 00       	call   c001762f <lockStuff()>
c000ea78:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ea7c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000ea7f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea83:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ea86:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ea8a:	8a 50 01             	mov    dl,BYTE PTR [eax+0x1]
c000ea8d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea91:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000ea94:	e8 42 dc ff ff       	call   c000c6db <Phys::allocatePage()>
c000ea99:	89 c2                	mov    edx,eax
c000ea9b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ea9f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000eaa2:	e8 60 f7 ff ff       	call   c000e207 <Virt::getAKernelVAS()>
c000eaa7:	89 c3                	mov    ebx,eax
c000eaa9:	83 ec 0c             	sub    esp,0xc
c000eaac:	6a 01                	push   0x1
c000eaae:	e8 c4 f5 ff ff       	call   c000e077 <Virt::allocateKernelVirtualPages(int)>
c000eab3:	83 c4 10             	add    esp,0x10
c000eab6:	89 c2                	mov    edx,eax
c000eab8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eabc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000eabf:	83 ec 0c             	sub    esp,0xc
c000eac2:	6a 03                	push   0x3
c000eac4:	6a 01                	push   0x1
c000eac6:	52                   	push   edx
c000eac7:	50                   	push   eax
c000eac8:	53                   	push   ebx
c000eac9:	e8 cc fe ff ff       	call   c000e99a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eace:	83 c4 20             	add    esp,0x20
c000ead1:	89 c2                	mov    edx,eax
c000ead3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ead7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000eada:	83 ec 04             	sub    esp,0x4
c000eadd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000eae1:	6a 01                	push   0x1
c000eae3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000eae7:	e8 20 fa ff ff       	call   c000e50c <VAS::mapOtherVASIn(bool, VAS*)>
c000eaec:	83 c4 10             	add    esp,0x10
c000eaef:	83 ec 0c             	sub    esp,0xc
c000eaf2:	6a 01                	push   0x1
c000eaf4:	e8 7e f5 ff ff       	call   c000e077 <Virt::allocateKernelVirtualPages(int)>
c000eaf9:	83 c4 10             	add    esp,0x10
c000eafc:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000eb00:	83 ec 0c             	sub    esp,0xc
c000eb03:	6a 01                	push   0x1
c000eb05:	e8 6d f5 ff ff       	call   c000e077 <Virt::allocateKernelVirtualPages(int)>
c000eb0a:	83 c4 10             	add    esp,0x10
c000eb0d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000eb11:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000eb19:	81 7c 24 2c ff 03 00 00 	cmp    DWORD PTR [esp+0x2c],0x3ff
c000eb21:	0f 8f 5e 02 00 00    	jg     c000ed85 <VAS::VAS(VAS*)+0x321>
c000eb27:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000eb2c:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb2e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000eb31:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000eb37:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000eb3a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000eb3e:	c1 e2 02             	shl    edx,0x2
c000eb41:	01 d0                	add    eax,edx
c000eb43:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb45:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eb49:	83 ec 08             	sub    esp,0x8
c000eb4c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eb50:	68 fb 06 02 c0       	push   0xc00206fb
c000eb55:	e8 dc cf ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000eb5a:	83 c4 10             	add    esp,0x10
c000eb5d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eb61:	25 01 04 00 00       	and    eax,0x401
c000eb66:	3d 01 04 00 00       	cmp    eax,0x401
c000eb6b:	0f 85 e5 01 00 00    	jne    c000ed56 <VAS::VAS(VAS*)+0x2f2>
c000eb71:	83 ec 0c             	sub    esp,0xc
c000eb74:	68 0c 07 02 c0       	push   0xc002070c
c000eb79:	e8 b8 cf ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000eb7e:	83 c4 10             	add    esp,0x10
c000eb81:	e8 55 db ff ff       	call   c000c6db <Phys::allocatePage()>
c000eb86:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eb8a:	83 ec 08             	sub    esp,0x8
c000eb8d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000eb91:	68 22 07 02 c0       	push   0xc0020722
c000eb96:	e8 9b cf ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000eb9b:	83 c4 10             	add    esp,0x10
c000eb9e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eba2:	25 ff 0f 00 00       	and    eax,0xfff
c000eba7:	89 c1                	mov    ecx,eax
c000eba9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ebad:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ebb0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ebb4:	c1 e2 02             	shl    edx,0x2
c000ebb7:	01 c2                	add    edx,eax
c000ebb9:	89 c8                	mov    eax,ecx
c000ebbb:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c000ebbf:	89 02                	mov    DWORD PTR [edx],eax
c000ebc1:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000ebc9:	81 7c 24 28 ff 03 00 00 	cmp    DWORD PTR [esp+0x28],0x3ff
c000ebd1:	0f 8f a5 01 00 00    	jg     c000ed7c <VAS::VAS(VAS*)+0x318>
c000ebd7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ebdb:	c1 e0 0a             	shl    eax,0xa
c000ebde:	89 c2                	mov    edx,eax
c000ebe0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ebe4:	01 d0                	add    eax,edx
c000ebe6:	c1 e0 0c             	shl    eax,0xc
c000ebe9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ebed:	83 ec 08             	sub    esp,0x8
c000ebf0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebf4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ebf8:	e8 91 f7 ff ff       	call   c000e38e <VAS::getPageTableEntry(unsigned long)>
c000ebfd:	83 c4 10             	add    esp,0x10
c000ec00:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec02:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ec06:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000ec0b:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec0d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ec10:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000ec16:	83 ec 04             	sub    esp,0x4
c000ec19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ec1d:	6a 01                	push   0x1
c000ec1f:	50                   	push   eax
c000ec20:	e8 3d f7 ff ff       	call   c000e362 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000ec25:	83 c4 10             	add    esp,0x10
c000ec28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ec2c:	83 ec 04             	sub    esp,0x4
c000ec2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ec33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec37:	68 b4 05 02 c0       	push   0xc00205b4
c000ec3c:	e8 f5 ce ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000ec41:	83 c4 10             	add    esp,0x10
c000ec44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec48:	25 01 04 00 00       	and    eax,0x401
c000ec4d:	3d 01 04 00 00       	cmp    eax,0x401
c000ec52:	0f 85 db 00 00 00    	jne    c000ed33 <VAS::VAS(VAS*)+0x2cf>
c000ec58:	83 ec 0c             	sub    esp,0xc
c000ec5b:	68 31 07 02 c0       	push   0xc0020731
c000ec60:	e8 d1 ce ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000ec65:	83 c4 10             	add    esp,0x10
c000ec68:	e8 6e da ff ff       	call   c000c6db <Phys::allocatePage()>
c000ec6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ec71:	83 ec 08             	sub    esp,0x8
c000ec74:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ec78:	68 40 07 02 c0       	push   0xc0020740
c000ec7d:	e8 b4 ce ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000ec82:	83 c4 10             	add    esp,0x10
c000ec85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ec89:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ec8e:	83 ec 08             	sub    esp,0x8
c000ec91:	50                   	push   eax
c000ec92:	68 54 07 02 c0       	push   0xc0020754
c000ec97:	e8 9a ce ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000ec9c:	83 c4 10             	add    esp,0x10
c000ec9f:	e8 63 f5 ff ff       	call   c000e207 <Virt::getAKernelVAS()>
c000eca4:	83 ec 0c             	sub    esp,0xc
c000eca7:	6a 03                	push   0x3
c000eca9:	6a 01                	push   0x1
c000ecab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ecaf:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ecb3:	50                   	push   eax
c000ecb4:	e8 e1 fc ff ff       	call   c000e99a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ecb9:	83 c4 20             	add    esp,0x20
c000ecbc:	e8 46 f5 ff ff       	call   c000e207 <Virt::getAKernelVAS()>
c000ecc1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ecc5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000eccb:	83 ec 0c             	sub    esp,0xc
c000ecce:	6a 03                	push   0x3
c000ecd0:	6a 01                	push   0x1
c000ecd2:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000ecd6:	52                   	push   edx
c000ecd7:	50                   	push   eax
c000ecd8:	e8 bd fc ff ff       	call   c000e99a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ecdd:	83 c4 20             	add    esp,0x20
c000ece0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ece4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ece8:	83 ec 04             	sub    esp,0x4
c000eceb:	68 00 10 00 00       	push   0x1000
c000ecf0:	52                   	push   edx
c000ecf1:	50                   	push   eax
c000ecf2:	e8 db 18 ff ff       	call   c00005d2 <memcpy>
c000ecf7:	83 c4 10             	add    esp,0x10
c000ecfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecfe:	25 ff 0f 00 00       	and    eax,0xfff
c000ed03:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ed07:	89 c2                	mov    edx,eax
c000ed09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed0d:	89 10                	mov    DWORD PTR [eax],edx
c000ed0f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ed13:	25 ff 0f 00 00       	and    eax,0xfff
c000ed18:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ed1c:	83 ec 04             	sub    esp,0x4
c000ed1f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ed23:	50                   	push   eax
c000ed24:	68 d8 05 02 c0       	push   0xc00205d8
c000ed29:	e8 08 ce ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000ed2e:	83 c4 10             	add    esp,0x10
c000ed31:	eb 1a                	jmp    c000ed4d <VAS::VAS(VAS*)+0x2e9>
c000ed33:	83 ec 0c             	sub    esp,0xc
c000ed36:	68 68 07 02 c0       	push   0xc0020768
c000ed3b:	e8 f6 cd ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000ed40:	83 c4 10             	add    esp,0x10
c000ed43:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ed47:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ed4b:	89 10                	mov    DWORD PTR [eax],edx
c000ed4d:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c000ed51:	e9 73 fe ff ff       	jmp    c000ebc9 <VAS::VAS(VAS*)+0x165>
c000ed56:	83 ec 0c             	sub    esp,0xc
c000ed59:	68 6c 07 02 c0       	push   0xc002076c
c000ed5e:	e8 d3 cd ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000ed63:	83 c4 10             	add    esp,0x10
c000ed66:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ed6a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ed6d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ed71:	c1 e2 02             	shl    edx,0x2
c000ed74:	01 c2                	add    edx,eax
c000ed76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ed7a:	89 02                	mov    DWORD PTR [edx],eax
c000ed7c:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000ed80:	e9 94 fd ff ff       	jmp    c000eb19 <VAS::VAS(VAS*)+0xb5>
c000ed85:	83 ec 0c             	sub    esp,0xc
c000ed88:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ed8c:	e8 1c f6 ff ff       	call   c000e3ad <Virt::freeKernelVirtualPages(unsigned long)>
c000ed91:	83 c4 10             	add    esp,0x10
c000ed94:	83 ec 0c             	sub    esp,0xc
c000ed97:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ed9b:	e8 0d f6 ff ff       	call   c000e3ad <Virt::freeKernelVirtualPages(unsigned long)>
c000eda0:	83 c4 10             	add    esp,0x10
c000eda3:	e8 19 8c 00 00       	call   c00179c1 <unlockStuff()>
c000eda8:	90                   	nop
c000eda9:	83 c4 38             	add    esp,0x38
c000edac:	5b                   	pop    ebx
c000edad:	c3                   	ret    

c000edae <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000edae:	55                   	push   ebp
c000edaf:	57                   	push   edi
c000edb0:	56                   	push   esi
c000edb1:	53                   	push   ebx
c000edb2:	83 ec 1c             	sub    esp,0x1c
c000edb5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000edb9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000edbd:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c000edc1:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000edc5:	a9 ff 0f 00 00       	test   eax,0xfff
c000edca:	75 4a                	jne    c000ee16 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c000edcc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000edd0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000edd3:	c1 eb 16             	shr    ebx,0x16
c000edd6:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000eddd:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000ede1:	74 4d                	je     c000ee30 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c000ede3:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ede7:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000edeb:	c1 e8 0a             	shr    eax,0xa
c000edee:	80 fa 01             	cmp    dl,0x1
c000edf1:	19 d2                	sbb    edx,edx
c000edf3:	c1 e3 0c             	shl    ebx,0xc
c000edf6:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c000edfa:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000ee00:	25 fc 0f 00 00       	and    eax,0xffc
c000ee05:	01 d8                	add    eax,ebx
c000ee07:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000ee0e:	83 c4 1c             	add    esp,0x1c
c000ee11:	5b                   	pop    ebx
c000ee12:	5e                   	pop    esi
c000ee13:	5f                   	pop    edi
c000ee14:	5d                   	pop    ebp
c000ee15:	c3                   	ret    
c000ee16:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ee1a:	83 ec 0c             	sub    esp,0xc
c000ee1d:	68 fc 05 02 c0       	push   0xc00205fc
c000ee22:	e8 2d ce ff ff       	call   c000bc54 <panic(char const*)>
c000ee27:	83 c4 10             	add    esp,0x10
c000ee2a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee2e:	eb 9c                	jmp    c000edcc <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c000ee30:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ee34:	e8 a2 d8 ff ff       	call   c000c6db <Phys::allocatePage()>
c000ee39:	89 c5                	mov    ebp,eax
c000ee3b:	e8 c7 f3 ff ff       	call   c000e207 <Virt::getAKernelVAS()>
c000ee40:	83 ec 0c             	sub    esp,0xc
c000ee43:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ee47:	6a 01                	push   0x1
c000ee49:	e8 29 f2 ff ff       	call   c000e077 <Virt::allocateKernelVirtualPages(int)>
c000ee4e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000ee55:	6a 01                	push   0x1
c000ee57:	50                   	push   eax
c000ee58:	55                   	push   ebp
c000ee59:	81 cd 07 04 00 00    	or     ebp,0x407
c000ee5f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000ee63:	51                   	push   ecx
c000ee64:	e8 31 fb ff ff       	call   c000e99a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ee69:	83 c4 1c             	add    esp,0x1c
c000ee6c:	68 00 10 00 00       	push   0x1000
c000ee71:	6a 00                	push   0x0
c000ee73:	50                   	push   eax
c000ee74:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ee78:	e8 8b 17 ff ff       	call   c0000608 <memset>
c000ee7d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ee81:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ee84:	e8 24 f5 ff ff       	call   c000e3ad <Virt::freeKernelVirtualPages(unsigned long)>
c000ee89:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ee8c:	83 c4 10             	add    esp,0x10
c000ee8f:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000ee92:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ee96:	e9 48 ff ff ff       	jmp    c000ede3 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c000ee9b:	90                   	nop

c000ee9c <VAS::VAS(bool)>:
c000ee9c:	53                   	push   ebx
c000ee9d:	83 ec 28             	sub    esp,0x28
c000eea0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eea4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000eea8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eeac:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000eeb3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eeb7:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000eebb:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000eebe:	e8 18 d8 ff ff       	call   c000c6db <Phys::allocatePage()>
c000eec3:	89 c2                	mov    edx,eax
c000eec5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eec9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000eecc:	e8 36 f3 ff ff       	call   c000e207 <Virt::getAKernelVAS()>
c000eed1:	89 c3                	mov    ebx,eax
c000eed3:	83 ec 0c             	sub    esp,0xc
c000eed6:	6a 01                	push   0x1
c000eed8:	e8 9a f1 ff ff       	call   c000e077 <Virt::allocateKernelVirtualPages(int)>
c000eedd:	83 c4 10             	add    esp,0x10
c000eee0:	89 c2                	mov    edx,eax
c000eee2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eee6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000eee9:	83 ec 0c             	sub    esp,0xc
c000eeec:	6a 03                	push   0x3
c000eeee:	6a 01                	push   0x1
c000eef0:	52                   	push   edx
c000eef1:	50                   	push   eax
c000eef2:	53                   	push   ebx
c000eef3:	e8 a2 fa ff ff       	call   c000e99a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eef8:	83 c4 20             	add    esp,0x20
c000eefb:	89 c2                	mov    edx,eax
c000eefd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef01:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000ef04:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ef0c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000ef14:	7f 1c                	jg     c000ef32 <VAS::VAS(bool)+0x96>
c000ef16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef1a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ef1d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef21:	c1 e2 02             	shl    edx,0x2
c000ef24:	01 d0                	add    eax,edx
c000ef26:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ef2c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ef30:	eb da                	jmp    c000ef0c <VAS::VAS(bool)+0x70>
c000ef32:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ef3a:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ef42:	7f 71                	jg     c000efb5 <VAS::VAS(bool)+0x119>
c000ef44:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef48:	2d 00 02 00 00       	sub    eax,0x200
c000ef4d:	c1 e0 0c             	shl    eax,0xc
c000ef50:	83 c8 03             	or     eax,0x3
c000ef53:	89 c3                	mov    ebx,eax
c000ef55:	e8 10 50 00 00       	call   c0013f6a <thisCPU()>
c000ef5a:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ef60:	83 e0 10             	and    eax,0x10
c000ef63:	84 c0                	test   al,al
c000ef65:	74 07                	je     c000ef6e <VAS::VAS(bool)+0xd2>
c000ef67:	b8 00 01 00 00       	mov    eax,0x100
c000ef6c:	eb 05                	jmp    c000ef73 <VAS::VAS(bool)+0xd7>
c000ef6e:	b8 00 00 00 00       	mov    eax,0x0
c000ef73:	09 d8                	or     eax,ebx
c000ef75:	89 c1                	mov    ecx,eax
c000ef77:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef7b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ef7e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ef82:	c1 e2 02             	shl    edx,0x2
c000ef85:	01 d0                	add    eax,edx
c000ef87:	89 ca                	mov    edx,ecx
c000ef89:	89 10                	mov    DWORD PTR [eax],edx
c000ef8b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef8f:	2d 40 03 00 00       	sub    eax,0x340
c000ef94:	83 f8 7f             	cmp    eax,0x7f
c000ef97:	77 16                	ja     c000efaf <VAS::VAS(bool)+0x113>
c000ef99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ef9d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000efa0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000efa4:	c1 e2 02             	shl    edx,0x2
c000efa7:	01 d0                	add    eax,edx
c000efa9:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000efaf:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000efb3:	eb 85                	jmp    c000ef3a <VAS::VAS(bool)+0x9e>
c000efb5:	e8 b0 4f 00 00       	call   c0013f6a <thisCPU()>
c000efba:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000efc0:	83 e0 10             	and    eax,0x10
c000efc3:	84 c0                	test   al,al
c000efc5:	74 07                	je     c000efce <VAS::VAS(bool)+0x132>
c000efc7:	b8 03 41 00 00       	mov    eax,0x4103
c000efcc:	eb 05                	jmp    c000efd3 <VAS::VAS(bool)+0x137>
c000efce:	b8 03 40 00 00       	mov    eax,0x4003
c000efd3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000efd7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000efda:	81 c2 20 0c 00 00    	add    edx,0xc20
c000efe0:	89 02                	mov    DWORD PTR [edx],eax
c000efe2:	e8 83 4f 00 00       	call   c0013f6a <thisCPU()>
c000efe7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000efed:	83 ec 08             	sub    esp,0x8
c000eff0:	50                   	push   eax
c000eff1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eff5:	e8 84 f9 ff ff       	call   c000e97e <VAS::setCPUSpecific(unsigned long)>
c000effa:	83 c4 10             	add    esp,0x10
c000effd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f001:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000f004:	e8 61 4f 00 00       	call   c0013f6a <thisCPU()>
c000f009:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000f00f:	83 e0 10             	and    eax,0x10
c000f012:	84 c0                	test   al,al
c000f014:	74 07                	je     c000f01d <VAS::VAS(bool)+0x181>
c000f016:	b8 00 01 00 00       	mov    eax,0x100
c000f01b:	eb 05                	jmp    c000f022 <VAS::VAS(bool)+0x186>
c000f01d:	b8 00 00 00 00       	mov    eax,0x0
c000f022:	09 d8                	or     eax,ebx
c000f024:	89 c2                	mov    edx,eax
c000f026:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f02a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000f02d:	05 fc 0f 00 00       	add    eax,0xffc
c000f032:	83 ca 03             	or     edx,0x3
c000f035:	89 10                	mov    DWORD PTR [eax],edx
c000f037:	e8 2e 4f 00 00       	call   c0013f6a <thisCPU()>
c000f03c:	83 ec 0c             	sub    esp,0xc
c000f03f:	50                   	push   eax
c000f040:	e8 af 17 00 00       	call   c00107f4 <Device::getName()>
c000f045:	83 c4 10             	add    esp,0x10
c000f048:	83 ec 08             	sub    esp,0x8
c000f04b:	68 7c 07 02 c0       	push   0xc002077c
c000f050:	50                   	push   eax
c000f051:	e8 a2 16 ff ff       	call   c00006f8 <strcmp>
c000f056:	83 c4 10             	add    esp,0x10
c000f059:	85 c0                	test   eax,eax
c000f05b:	0f 94 c0             	sete   al
c000f05e:	84 c0                	test   al,al
c000f060:	74 64                	je     c000f0c6 <VAS::VAS(bool)+0x22a>
c000f062:	e8 84 85 00 00       	call   c00175eb <disableIRQs()>
c000f067:	e8 fe 4e 00 00       	call   c0013f6a <thisCPU()>
c000f06c:	05 7c 09 00 00       	add    eax,0x97c
c000f071:	83 ec 0c             	sub    esp,0xc
c000f074:	50                   	push   eax
c000f075:	e8 10 c6 ff ff       	call   c000b68a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000f07a:	83 c4 10             	add    esp,0x10
c000f07d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f082:	89 c3                	mov    ebx,eax
c000f084:	e8 e1 4e 00 00       	call   c0013f6a <thisCPU()>
c000f089:	05 7c 09 00 00       	add    eax,0x97c
c000f08e:	83 ec 0c             	sub    esp,0xc
c000f091:	50                   	push   eax
c000f092:	e8 f3 c5 ff ff       	call   c000b68a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000f097:	83 c4 10             	add    esp,0x10
c000f09a:	83 ec 08             	sub    esp,0x8
c000f09d:	50                   	push   eax
c000f09e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f0a2:	e8 e7 f2 ff ff       	call   c000e38e <VAS::getPageTableEntry(unsigned long)>
c000f0a7:	83 c4 10             	add    esp,0x10
c000f0aa:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0ac:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f0b1:	6a 11                	push   0x11
c000f0b3:	53                   	push   ebx
c000f0b4:	50                   	push   eax
c000f0b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000f0b9:	e8 f0 f5 ff ff       	call   c000e6ae <VAS::mapPage(unsigned long, unsigned long, int)>
c000f0be:	83 c4 10             	add    esp,0x10
c000f0c1:	e8 33 85 00 00       	call   c00175f9 <enableIRQs()>
c000f0c6:	90                   	nop
c000f0c7:	83 c4 28             	add    esp,0x28
c000f0ca:	5b                   	pop    ebx
c000f0cb:	c3                   	ret    

c000f0cc <mapVASFirstTime>:
c000f0cc:	55                   	push   ebp
c000f0cd:	57                   	push   edi
c000f0ce:	56                   	push   esi
c000f0cf:	53                   	push   ebx
c000f0d0:	83 ec 0c             	sub    esp,0xc
c000f0d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f0d8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f0db:	4a                   	dec    edx
c000f0dc:	0f 84 99 00 00 00    	je     c000f17b <mapVASFirstTime+0xaf>
c000f0e2:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000f0e5:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000f0e8:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000f0ed:	c1 e5 15             	shl    ebp,0x15
c000f0f0:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000f0f5:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000f0fb:	29 eb                	sub    ebx,ebp
c000f0fd:	29 ee                	sub    esi,ebp
c000f0ff:	e8 d7 d5 ff ff       	call   c000c6db <Phys::allocatePage()>
c000f104:	83 ec 0c             	sub    esp,0xc
c000f107:	68 03 04 00 00       	push   0x403
c000f10c:	6a 01                	push   0x1
c000f10e:	53                   	push   ebx
c000f10f:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000f115:	50                   	push   eax
c000f116:	57                   	push   edi
c000f117:	e8 7e f8 ff ff       	call   c000e99a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f11c:	83 c4 20             	add    esp,0x20
c000f11f:	39 f3                	cmp    ebx,esi
c000f121:	75 dc                	jne    c000f0ff <mapVASFirstTime+0x33>
c000f123:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000f128:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000f12d:	29 ee                	sub    esi,ebp
c000f12f:	29 e8                	sub    eax,ebp
c000f131:	89 c5                	mov    ebp,eax
c000f133:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000f137:	19 db                	sbb    ebx,ebx
c000f139:	e8 9d d5 ff ff       	call   c000c6db <Phys::allocatePage()>
c000f13e:	83 e3 04             	and    ebx,0x4
c000f141:	83 ec 0c             	sub    esp,0xc
c000f144:	81 c3 03 04 00 00    	add    ebx,0x403
c000f14a:	53                   	push   ebx
c000f14b:	6a 01                	push   0x1
c000f14d:	56                   	push   esi
c000f14e:	81 ee 00 10 00 00    	sub    esi,0x1000
c000f154:	50                   	push   eax
c000f155:	57                   	push   edi
c000f156:	e8 3f f8 ff ff       	call   c000e99a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f15b:	83 c4 20             	add    esp,0x20
c000f15e:	39 f5                	cmp    ebp,esi
c000f160:	75 d1                	jne    c000f133 <mapVASFirstTime+0x67>
c000f162:	e8 62 f2 00 00       	call   c001e3c9 <CPU::readCR3()>
c000f167:	83 ec 0c             	sub    esp,0xc
c000f16a:	50                   	push   eax
c000f16b:	e8 7d f2 00 00       	call   c001e3ed <CPU::writeCR3(unsigned long)>
c000f170:	83 c4 10             	add    esp,0x10
c000f173:	83 c4 0c             	add    esp,0xc
c000f176:	5b                   	pop    ebx
c000f177:	5e                   	pop    esi
c000f178:	5f                   	pop    edi
c000f179:	5d                   	pop    ebp
c000f17a:	c3                   	ret    
c000f17b:	83 ec 0c             	sub    esp,0xc
c000f17e:	68 8a 07 02 c0       	push   0xc002078a
c000f183:	e8 ae c9 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000f188:	83 c4 10             	add    esp,0x10
c000f18b:	83 c4 0c             	add    esp,0xc
c000f18e:	5b                   	pop    ebx
c000f18f:	5e                   	pop    esi
c000f190:	5f                   	pop    edi
c000f191:	5d                   	pop    ebp
c000f192:	c3                   	ret    

c000f193 <__cxa_atexit>:
c000f193:	31 c0                	xor    eax,eax
c000f195:	c3                   	ret    

c000f196 <__cxa_finalize>:
c000f196:	c3                   	ret    

c000f197 <__stack_chk_fail>:
c000f197:	55                   	push   ebp
c000f198:	89 e5                	mov    ebp,esp
c000f19a:	83 ec 10             	sub    esp,0x10
c000f19d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000f1a0:	68 a3 07 02 c0       	push   0xc00207a3
c000f1a5:	e8 8c c9 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000f1aa:	58                   	pop    eax
c000f1ab:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f1ae:	5a                   	pop    edx
c000f1af:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f1b2:	68 a3 07 02 c0       	push   0xc00207a3
c000f1b7:	e8 7a c9 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000f1bc:	59                   	pop    ecx
c000f1bd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f1c0:	5a                   	pop    edx
c000f1c1:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1c3:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f1c6:	68 a3 07 02 c0       	push   0xc00207a3
c000f1cb:	e8 66 c9 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000f1d0:	59                   	pop    ecx
c000f1d1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f1d4:	5a                   	pop    edx
c000f1d5:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1d7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f1d9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f1dc:	68 a3 07 02 c0       	push   0xc00207a3
c000f1e1:	e8 50 c9 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c000f1e6:	c7 04 24 ab 07 02 c0 	mov    DWORD PTR [esp],0xc00207ab
c000f1ed:	e8 62 ca ff ff       	call   c000bc54 <panic(char const*)>
c000f1f2:	83 c4 10             	add    esp,0x10
c000f1f5:	c9                   	leave  
c000f1f6:	c3                   	ret    

c000f1f7 <__cxa_pure_virtual>:
c000f1f7:	83 ec 18             	sub    esp,0x18
c000f1fa:	68 c3 07 02 c0       	push   0xc00207c3
c000f1ff:	e8 50 ca ff ff       	call   c000bc54 <panic(char const*)>
c000f204:	83 c4 1c             	add    esp,0x1c
c000f207:	c3                   	ret    

c000f208 <operator new(unsigned long)>:
c000f208:	e9 24 cf ff ff       	jmp    c000c131 <malloc>

c000f20d <operator new[](unsigned long)>:
c000f20d:	e9 1f cf ff ff       	jmp    c000c131 <malloc>

c000f212 <operator delete(void*)>:
c000f212:	e9 3a cf ff ff       	jmp    c000c151 <rfree>

c000f217 <operator delete(void*, unsigned long)>:
c000f217:	e9 35 cf ff ff       	jmp    c000c151 <rfree>

c000f21c <operator delete[](void*)>:
c000f21c:	e9 30 cf ff ff       	jmp    c000c151 <rfree>

c000f221 <operator delete[](void*, unsigned long)>:
c000f221:	e9 2b cf ff ff       	jmp    c000c151 <rfree>

c000f226 <File::read(unsigned long long, void*, int*)>:
c000f226:	53                   	push   ebx
c000f227:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f22b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f22f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f236:	3c 19                	cmp    al,0x19
c000f238:	77 35                	ja     c000f26f <File::read(unsigned long long, void*, int*)+0x49>
c000f23a:	8b 04 85 40 34 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcbc0]
c000f241:	85 c0                	test   eax,eax
c000f243:	74 2a                	je     c000f26f <File::read(unsigned long long, void*, int*)+0x49>
c000f245:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f24b:	85 c0                	test   eax,eax
c000f24d:	74 20                	je     c000f26f <File::read(unsigned long long, void*, int*)+0x49>
c000f24f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f253:	74 21                	je     c000f276 <File::read(unsigned long long, void*, int*)+0x50>
c000f255:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f257:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f25b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f261:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f265:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f269:	5b                   	pop    ebx
c000f26a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f26d:	ff e0                	jmp    eax
c000f26f:	b8 0b 00 00 00       	mov    eax,0xb
c000f274:	eb 05                	jmp    c000f27b <File::read(unsigned long long, void*, int*)+0x55>
c000f276:	b8 05 00 00 00       	mov    eax,0x5
c000f27b:	5b                   	pop    ebx
c000f27c:	c3                   	ret    
c000f27d:	90                   	nop

c000f27e <File::write(unsigned long long, void*, int*)>:
c000f27e:	53                   	push   ebx
c000f27f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f283:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f287:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f28e:	3c 19                	cmp    al,0x19
c000f290:	77 35                	ja     c000f2c7 <File::write(unsigned long long, void*, int*)+0x49>
c000f292:	8b 04 85 40 34 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcbc0]
c000f299:	85 c0                	test   eax,eax
c000f29b:	74 2a                	je     c000f2c7 <File::write(unsigned long long, void*, int*)+0x49>
c000f29d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f2a3:	85 c0                	test   eax,eax
c000f2a5:	74 20                	je     c000f2c7 <File::write(unsigned long long, void*, int*)+0x49>
c000f2a7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f2ab:	74 21                	je     c000f2ce <File::write(unsigned long long, void*, int*)+0x50>
c000f2ad:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f2af:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f2b3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f2b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f2bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f2c1:	5b                   	pop    ebx
c000f2c2:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f2c5:	ff e0                	jmp    eax
c000f2c7:	b8 0b 00 00 00       	mov    eax,0xb
c000f2cc:	eb 05                	jmp    c000f2d3 <File::write(unsigned long long, void*, int*)+0x55>
c000f2ce:	b8 05 00 00 00       	mov    eax,0x5
c000f2d3:	5b                   	pop    ebx
c000f2d4:	c3                   	ret    
c000f2d5:	90                   	nop

c000f2d6 <Directory::read(unsigned long long, void*, int*)>:
c000f2d6:	53                   	push   ebx
c000f2d7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f2db:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f2df:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f2e6:	3c 19                	cmp    al,0x19
c000f2e8:	77 35                	ja     c000f31f <Directory::read(unsigned long long, void*, int*)+0x49>
c000f2ea:	8b 04 85 40 34 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcbc0]
c000f2f1:	85 c0                	test   eax,eax
c000f2f3:	74 2a                	je     c000f31f <Directory::read(unsigned long long, void*, int*)+0x49>
c000f2f5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f2fb:	85 c0                	test   eax,eax
c000f2fd:	74 20                	je     c000f31f <Directory::read(unsigned long long, void*, int*)+0x49>
c000f2ff:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f303:	74 21                	je     c000f326 <Directory::read(unsigned long long, void*, int*)+0x50>
c000f305:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f307:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f30b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f311:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f315:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f319:	5b                   	pop    ebx
c000f31a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f31d:	ff e0                	jmp    eax
c000f31f:	b8 0b 00 00 00       	mov    eax,0xb
c000f324:	eb 05                	jmp    c000f32b <Directory::read(unsigned long long, void*, int*)+0x55>
c000f326:	b8 05 00 00 00       	mov    eax,0x5
c000f32b:	5b                   	pop    ebx
c000f32c:	c3                   	ret    
c000f32d:	90                   	nop

c000f32e <Directory::write(unsigned long long, void*, int*)>:
c000f32e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f332:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f339:	b8 0b 00 00 00       	mov    eax,0xb
c000f33e:	80 fa 19             	cmp    dl,0x19
c000f341:	77 18                	ja     c000f35b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f343:	8b 14 95 40 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcbc0]
c000f34a:	85 d2                	test   edx,edx
c000f34c:	74 0d                	je     c000f35b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f34e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f355:	19 c0                	sbb    eax,eax
c000f357:	83 e0 0a             	and    eax,0xa
c000f35a:	40                   	inc    eax
c000f35b:	c3                   	ret    

c000f35c <File::isAtty()>:
c000f35c:	31 c0                	xor    eax,eax
c000f35e:	c3                   	ret    
c000f35f:	90                   	nop

c000f360 <Directory::isAtty()>:
c000f360:	31 c0                	xor    eax,eax
c000f362:	c3                   	ret    
c000f363:	90                   	nop

c000f364 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f364:	b8 0a 00 00 00       	mov    eax,0xa
c000f369:	c3                   	ret    

c000f36a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f36a:	b8 0a 00 00 00       	mov    eax,0xa
c000f36f:	c3                   	ret    

c000f370 <File::~File()>:
c000f370:	83 ec 0c             	sub    esp,0xc
c000f373:	ba 44 08 02 c0       	mov    edx,0xc0020844
c000f378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f37c:	89 10                	mov    DWORD PTR [eax],edx
c000f37e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f382:	83 ec 0c             	sub    esp,0xc
c000f385:	50                   	push   eax
c000f386:	e8 0d eb ff ff       	call   c000de98 <UnixFile::~UnixFile()>
c000f38b:	83 c4 10             	add    esp,0x10
c000f38e:	90                   	nop
c000f38f:	83 c4 0c             	add    esp,0xc
c000f392:	c3                   	ret    
c000f393:	90                   	nop

c000f394 <File::~File()>:
c000f394:	83 ec 0c             	sub    esp,0xc
c000f397:	83 ec 0c             	sub    esp,0xc
c000f39a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f39e:	e8 cd ff ff ff       	call   c000f370 <File::~File()>
c000f3a3:	83 c4 10             	add    esp,0x10
c000f3a6:	83 ec 08             	sub    esp,0x8
c000f3a9:	68 14 01 00 00       	push   0x114
c000f3ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3b2:	e8 60 fe ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c000f3b7:	83 c4 10             	add    esp,0x10
c000f3ba:	83 c4 0c             	add    esp,0xc
c000f3bd:	c3                   	ret    

c000f3be <Directory::~Directory()>:
c000f3be:	83 ec 0c             	sub    esp,0xc
c000f3c1:	ba 60 08 02 c0       	mov    edx,0xc0020860
c000f3c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3ca:	89 10                	mov    DWORD PTR [eax],edx
c000f3cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3d0:	83 ec 0c             	sub    esp,0xc
c000f3d3:	50                   	push   eax
c000f3d4:	e8 bf ea ff ff       	call   c000de98 <UnixFile::~UnixFile()>
c000f3d9:	83 c4 10             	add    esp,0x10
c000f3dc:	90                   	nop
c000f3dd:	83 c4 0c             	add    esp,0xc
c000f3e0:	c3                   	ret    
c000f3e1:	90                   	nop

c000f3e2 <Directory::~Directory()>:
c000f3e2:	83 ec 0c             	sub    esp,0xc
c000f3e5:	83 ec 0c             	sub    esp,0xc
c000f3e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f3ec:	e8 cd ff ff ff       	call   c000f3be <Directory::~Directory()>
c000f3f1:	83 c4 10             	add    esp,0x10
c000f3f4:	83 ec 08             	sub    esp,0x8
c000f3f7:	68 14 01 00 00       	push   0x114
c000f3fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f400:	e8 12 fe ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c000f405:	83 c4 10             	add    esp,0x10
c000f408:	83 c4 0c             	add    esp,0xc
c000f40b:	c3                   	ret    

c000f40c <Filesystem::Filesystem()>:
c000f40c:	ba e0 07 02 c0       	mov    edx,0xc00207e0
c000f411:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f415:	89 10                	mov    DWORD PTR [eax],edx
c000f417:	8b 15 a0 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022fa0
c000f41d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f421:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f424:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f428:	a3 a0 2f 02 c0       	mov    ds:0xc0022fa0,eax
c000f42d:	90                   	nop
c000f42e:	c3                   	ret    
c000f42f:	90                   	nop

c000f430 <Filesystem::~Filesystem()>:
c000f430:	ba e0 07 02 c0       	mov    edx,0xc00207e0
c000f435:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f439:	89 10                	mov    DWORD PTR [eax],edx
c000f43b:	90                   	nop
c000f43c:	c3                   	ret    
c000f43d:	90                   	nop

c000f43e <Filesystem::~Filesystem()>:
c000f43e:	83 ec 0c             	sub    esp,0xc
c000f441:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f445:	e8 e6 ff ff ff       	call   c000f430 <Filesystem::~Filesystem()>
c000f44a:	83 c4 04             	add    esp,0x4
c000f44d:	83 ec 08             	sub    esp,0x8
c000f450:	6a 08                	push   0x8
c000f452:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f456:	e8 bc fd ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c000f45b:	83 c4 10             	add    esp,0x10
c000f45e:	83 c4 0c             	add    esp,0xc
c000f461:	c3                   	ret    

c000f462 <initVFS()>:
c000f462:	83 ec 18             	sub    esp,0x18
c000f465:	6a 08                	push   0x8
c000f467:	e8 9c fd ff ff       	call   c000f208 <operator new(unsigned long)>
c000f46c:	89 04 24             	mov    DWORD PTR [esp],eax
c000f46f:	e8 02 a2 00 00       	call   c0019676 <FAT::FAT()>
c000f474:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f47b:	e8 88 fd ff ff       	call   c000f208 <operator new(unsigned long)>
c000f480:	89 04 24             	mov    DWORD PTR [esp],eax
c000f483:	e8 f8 b3 00 00       	call   c001a880 <ISO9660::ISO9660()>
c000f488:	83 c4 1c             	add    esp,0x1c
c000f48b:	c3                   	ret    

c000f48c <standardiseFiles(char*, char const*, char const*)>:
c000f48c:	55                   	push   ebp
c000f48d:	57                   	push   edi
c000f48e:	56                   	push   esi
c000f48f:	53                   	push   ebx
c000f490:	81 ec 10 04 00 00    	sub    esp,0x410
c000f496:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f49d:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f4a4:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f4ab:	68 00 04 00 00       	push   0x400
c000f4b0:	6a 00                	push   0x0
c000f4b2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f4b6:	56                   	push   esi
c000f4b7:	e8 4c 11 ff ff       	call   c0000608 <memset>
c000f4bc:	83 c4 10             	add    esp,0x10
c000f4bf:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f4c3:	75 0b                	jne    c000f4d0 <standardiseFiles(char*, char const*, char const*)+0x44>
c000f4c5:	50                   	push   eax
c000f4c6:	50                   	push   eax
c000f4c7:	57                   	push   edi
c000f4c8:	56                   	push   esi
c000f4c9:	e8 d9 11 ff ff       	call   c00006a7 <strcpy>
c000f4ce:	eb 41                	jmp    c000f511 <standardiseFiles(char*, char const*, char const*)+0x85>
c000f4d0:	8a 07                	mov    al,BYTE PTR [edi]
c000f4d2:	3c 5c                	cmp    al,0x5c
c000f4d4:	74 04                	je     c000f4da <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f4d6:	3c 2f                	cmp    al,0x2f
c000f4d8:	75 18                	jne    c000f4f2 <standardiseFiles(char*, char const*, char const*)+0x66>
c000f4da:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f4dd:	3c 60                	cmp    al,0x60
c000f4df:	7e 03                	jle    c000f4e4 <standardiseFiles(char*, char const*, char const*)+0x58>
c000f4e1:	83 e8 20             	sub    eax,0x20
c000f4e4:	88 04 24             	mov    BYTE PTR [esp],al
c000f4e7:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f4ee:	50                   	push   eax
c000f4ef:	50                   	push   eax
c000f4f0:	eb 18                	jmp    c000f50a <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f4f2:	50                   	push   eax
c000f4f3:	50                   	push   eax
c000f4f4:	55                   	push   ebp
c000f4f5:	56                   	push   esi
c000f4f6:	e8 ac 11 ff ff       	call   c00006a7 <strcpy>
c000f4fb:	5a                   	pop    edx
c000f4fc:	59                   	pop    ecx
c000f4fd:	68 58 16 02 c0       	push   0xc0021658
c000f502:	56                   	push   esi
c000f503:	e8 56 12 ff ff       	call   c000075e <strcat>
c000f508:	5d                   	pop    ebp
c000f509:	58                   	pop    eax
c000f50a:	57                   	push   edi
c000f50b:	56                   	push   esi
c000f50c:	e8 4d 12 ff ff       	call   c000075e <strcat>
c000f511:	83 c4 10             	add    esp,0x10
c000f514:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f517:	3c 60                	cmp    al,0x60
c000f519:	7e 03                	jle    c000f51e <standardiseFiles(char*, char const*, char const*)+0x92>
c000f51b:	83 e8 20             	sub    eax,0x20
c000f51e:	88 04 24             	mov    BYTE PTR [esp],al
c000f521:	88 03                	mov    BYTE PTR [ebx],al
c000f523:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f52a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f530:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f534:	bf 03 00 00 00       	mov    edi,0x3
c000f539:	b8 03 00 00 00       	mov    eax,0x3
c000f53e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f541:	84 d2                	test   dl,dl
c000f543:	0f 84 91 00 00 00    	je     c000f5da <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f549:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f54c:	80 fa 5c             	cmp    dl,0x5c
c000f54f:	74 05                	je     c000f556 <standardiseFiles(char*, char const*, char const*)+0xca>
c000f551:	80 fa 2f             	cmp    dl,0x2f
c000f554:	75 12                	jne    c000f568 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f556:	89 c5                	mov    ebp,eax
c000f558:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f55d:	74 09                	je     c000f568 <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f55f:	40                   	inc    eax
c000f560:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f564:	89 cf                	mov    edi,ecx
c000f566:	eb d6                	jmp    c000f53e <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f568:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f56d:	75 5b                	jne    c000f5ca <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f56f:	80 fa 2e             	cmp    dl,0x2e
c000f572:	75 56                	jne    c000f5ca <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f574:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f578:	74 19                	je     c000f593 <standardiseFiles(char*, char const*, char const*)+0x107>
c000f57a:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f57f:	74 53                	je     c000f5d4 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f581:	89 f9                	mov    ecx,edi
c000f583:	41                   	inc    ecx
c000f584:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f587:	80 fa 2f             	cmp    dl,0x2f
c000f58a:	74 f7                	je     c000f583 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f58c:	80 fa 5c             	cmp    dl,0x5c
c000f58f:	74 f2                	je     c000f583 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f591:	eb d1                	jmp    c000f564 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f593:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f598:	74 3a                	je     c000f5d4 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f59a:	83 f8 03             	cmp    eax,0x3
c000f59d:	74 c5                	je     c000f564 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f59f:	41                   	inc    ecx
c000f5a0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f5a3:	80 fa 2f             	cmp    dl,0x2f
c000f5a6:	74 f7                	je     c000f59f <standardiseFiles(char*, char const*, char const*)+0x113>
c000f5a8:	80 fa 5c             	cmp    dl,0x5c
c000f5ab:	74 f2                	je     c000f59f <standardiseFiles(char*, char const*, char const*)+0x113>
c000f5ad:	48                   	dec    eax
c000f5ae:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f5b2:	75 06                	jne    c000f5ba <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f5b4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f5b8:	eb f3                	jmp    c000f5ad <standardiseFiles(char*, char const*, char const*)+0x121>
c000f5ba:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f5be:	74 07                	je     c000f5c7 <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f5c0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f5c4:	48                   	dec    eax
c000f5c5:	eb f3                	jmp    c000f5ba <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f5c7:	40                   	inc    eax
c000f5c8:	eb 9a                	jmp    c000f564 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5ca:	80 fa 2f             	cmp    dl,0x2f
c000f5cd:	74 95                	je     c000f564 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5cf:	80 fa 5c             	cmp    dl,0x5c
c000f5d2:	74 90                	je     c000f564 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5d4:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f5d7:	40                   	inc    eax
c000f5d8:	eb 8a                	jmp    c000f564 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f5da:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f5de:	83 ec 0c             	sub    esp,0xc
c000f5e1:	53                   	push   ebx
c000f5e2:	e8 3e 10 ff ff       	call   c0000625 <strlen>
c000f5e7:	83 c4 10             	add    esp,0x10
c000f5ea:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f5ef:	75 26                	jne    c000f617 <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f5f1:	83 ec 0c             	sub    esp,0xc
c000f5f4:	53                   	push   ebx
c000f5f5:	e8 2b 10 ff ff       	call   c0000625 <strlen>
c000f5fa:	83 c4 10             	add    esp,0x10
c000f5fd:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f602:	74 26                	je     c000f62a <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f604:	83 ec 0c             	sub    esp,0xc
c000f607:	53                   	push   ebx
c000f608:	e8 18 10 ff ff       	call   c0000625 <strlen>
c000f60d:	83 c4 10             	add    esp,0x10
c000f610:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f615:	eb c7                	jmp    c000f5de <standardiseFiles(char*, char const*, char const*)+0x152>
c000f617:	83 ec 0c             	sub    esp,0xc
c000f61a:	53                   	push   ebx
c000f61b:	e8 05 10 ff ff       	call   c0000625 <strlen>
c000f620:	83 c4 10             	add    esp,0x10
c000f623:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f628:	74 c7                	je     c000f5f1 <standardiseFiles(char*, char const*, char const*)+0x165>
c000f62a:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f630:	5b                   	pop    ebx
c000f631:	5e                   	pop    esi
c000f632:	5f                   	pop    edi
c000f633:	5d                   	pop    ebp
c000f634:	c3                   	ret    
c000f635:	90                   	nop

c000f636 <File::File(char const*, Process*)>:
c000f636:	83 ec 0c             	sub    esp,0xc
c000f639:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f63d:	83 ec 08             	sub    esp,0x8
c000f640:	6a 00                	push   0x0
c000f642:	50                   	push   eax
c000f643:	e8 ec e7 ff ff       	call   c000de34 <UnixFile::UnixFile(int)>
c000f648:	83 c4 10             	add    esp,0x10
c000f64b:	ba 44 08 02 c0       	mov    edx,0xc0020844
c000f650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f654:	89 10                	mov    DWORD PTR [eax],edx
c000f656:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f65a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f664:	83 c0 0d             	add    eax,0xd
c000f667:	83 ec 04             	sub    esp,0x4
c000f66a:	52                   	push   edx
c000f66b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f66f:	50                   	push   eax
c000f670:	e8 17 fe ff ff       	call   c000f48c <standardiseFiles(char*, char const*, char const*)>
c000f675:	83 c4 10             	add    esp,0x10
c000f678:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f67c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f67f:	8d 50 bf             	lea    edx,[eax-0x41]
c000f682:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f686:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f68c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f690:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f694:	90                   	nop
c000f695:	83 c4 0c             	add    esp,0xc
c000f698:	c3                   	ret    
c000f699:	90                   	nop

c000f69a <File::open(FileOpenMode)>:
c000f69a:	53                   	push   ebx
c000f69b:	b8 0b 00 00 00       	mov    eax,0xb
c000f6a0:	83 ec 08             	sub    esp,0x8
c000f6a3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f6a7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f6ae:	80 fa 19             	cmp    dl,0x19
c000f6b1:	77 40                	ja     c000f6f3 <File::open(FileOpenMode)+0x59>
c000f6b3:	8b 14 95 40 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcbc0]
c000f6ba:	85 d2                	test   edx,edx
c000f6bc:	74 35                	je     c000f6f3 <File::open(FileOpenMode)+0x59>
c000f6be:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f6c4:	85 d2                	test   edx,edx
c000f6c6:	74 2b                	je     c000f6f3 <File::open(FileOpenMode)+0x59>
c000f6c8:	b8 06 00 00 00       	mov    eax,0x6
c000f6cd:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f6d1:	75 20                	jne    c000f6f3 <File::open(FileOpenMode)+0x59>
c000f6d3:	8b 02                	mov    eax,DWORD PTR [edx]
c000f6d5:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f6df:	51                   	push   ecx
c000f6e0:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f6e3:	51                   	push   ecx
c000f6e4:	52                   	push   edx
c000f6e5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f6e8:	83 c4 10             	add    esp,0x10
c000f6eb:	85 c0                	test   eax,eax
c000f6ed:	75 04                	jne    c000f6f3 <File::open(FileOpenMode)+0x59>
c000f6ef:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f6f3:	83 c4 08             	add    esp,0x8
c000f6f6:	5b                   	pop    ebx
c000f6f7:	c3                   	ret    

c000f6f8 <File::close()>:
c000f6f8:	53                   	push   ebx
c000f6f9:	b8 0b 00 00 00       	mov    eax,0xb
c000f6fe:	83 ec 08             	sub    esp,0x8
c000f701:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f705:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f70c:	80 fa 19             	cmp    dl,0x19
c000f70f:	77 41                	ja     c000f752 <File::close()+0x5a>
c000f711:	8b 1c 95 40 34 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdcbc0]
c000f718:	85 db                	test   ebx,ebx
c000f71a:	74 36                	je     c000f752 <File::close()+0x5a>
c000f71c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f723:	74 2d                	je     c000f752 <File::close()+0x5a>
c000f725:	b8 05 00 00 00       	mov    eax,0x5
c000f72a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f72e:	74 22                	je     c000f752 <File::close()+0x5a>
c000f730:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f734:	8b 04 95 40 34 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcbc0]
c000f73b:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f741:	53                   	push   ebx
c000f742:	53                   	push   ebx
c000f743:	8b 10                	mov    edx,DWORD PTR [eax]
c000f745:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f74b:	50                   	push   eax
c000f74c:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f74f:	83 c4 10             	add    esp,0x10
c000f752:	83 c4 08             	add    esp,0x8
c000f755:	5b                   	pop    ebx
c000f756:	c3                   	ret    
c000f757:	90                   	nop

c000f758 <File::seek(unsigned long long)>:
c000f758:	56                   	push   esi
c000f759:	53                   	push   ebx
c000f75a:	b8 0b 00 00 00       	mov    eax,0xb
c000f75f:	51                   	push   ecx
c000f760:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f764:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f768:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f76f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f773:	80 fa 19             	cmp    dl,0x19
c000f776:	77 31                	ja     c000f7a9 <File::seek(unsigned long long)+0x51>
c000f778:	8b 14 95 40 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcbc0]
c000f77f:	85 d2                	test   edx,edx
c000f781:	74 26                	je     c000f7a9 <File::seek(unsigned long long)+0x51>
c000f783:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f789:	85 d2                	test   edx,edx
c000f78b:	74 1c                	je     c000f7a9 <File::seek(unsigned long long)+0x51>
c000f78d:	b8 05 00 00 00       	mov    eax,0x5
c000f792:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f796:	74 11                	je     c000f7a9 <File::seek(unsigned long long)+0x51>
c000f798:	8b 02                	mov    eax,DWORD PTR [edx]
c000f79a:	53                   	push   ebx
c000f79b:	51                   	push   ecx
c000f79c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f7a2:	52                   	push   edx
c000f7a3:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f7a6:	83 c4 10             	add    esp,0x10
c000f7a9:	5a                   	pop    edx
c000f7aa:	5b                   	pop    ebx
c000f7ab:	5e                   	pop    esi
c000f7ac:	c3                   	ret    
c000f7ad:	90                   	nop

c000f7ae <File::tell(unsigned long long*)>:
c000f7ae:	83 ec 0c             	sub    esp,0xc
c000f7b1:	b8 0b 00 00 00       	mov    eax,0xb
c000f7b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f7ba:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f7c1:	80 fa 19             	cmp    dl,0x19
c000f7c4:	77 34                	ja     c000f7fa <File::tell(unsigned long long*)+0x4c>
c000f7c6:	8b 14 95 40 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcbc0]
c000f7cd:	85 d2                	test   edx,edx
c000f7cf:	74 29                	je     c000f7fa <File::tell(unsigned long long*)+0x4c>
c000f7d1:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f7d7:	85 d2                	test   edx,edx
c000f7d9:	74 1f                	je     c000f7fa <File::tell(unsigned long long*)+0x4c>
c000f7db:	b8 05 00 00 00       	mov    eax,0x5
c000f7e0:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f7e4:	74 14                	je     c000f7fa <File::tell(unsigned long long*)+0x4c>
c000f7e6:	50                   	push   eax
c000f7e7:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7e9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f7ed:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f7f3:	52                   	push   edx
c000f7f4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f7f7:	83 c4 10             	add    esp,0x10
c000f7fa:	83 c4 0c             	add    esp,0xc
c000f7fd:	c3                   	ret    

c000f7fe <File::rewind()>:
c000f7fe:	83 ec 10             	sub    esp,0x10
c000f801:	6a 00                	push   0x0
c000f803:	6a 00                	push   0x0
c000f805:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f809:	e8 4a ff ff ff       	call   c000f758 <File::seek(unsigned long long)>
c000f80e:	83 c4 1c             	add    esp,0x1c
c000f811:	c3                   	ret    

c000f812 <File::unlink()>:
c000f812:	83 ec 0c             	sub    esp,0xc
c000f815:	b8 0b 00 00 00       	mov    eax,0xb
c000f81a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f81e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f825:	80 f9 19             	cmp    cl,0x19
c000f828:	77 2f                	ja     c000f859 <File::unlink()+0x47>
c000f82a:	8b 0c 8d 40 34 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcbc0]
c000f831:	85 c9                	test   ecx,ecx
c000f833:	74 24                	je     c000f859 <File::unlink()+0x47>
c000f835:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f83b:	85 c9                	test   ecx,ecx
c000f83d:	74 1a                	je     c000f859 <File::unlink()+0x47>
c000f83f:	b8 06 00 00 00       	mov    eax,0x6
c000f844:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f848:	75 0f                	jne    c000f859 <File::unlink()+0x47>
c000f84a:	83 c2 0d             	add    edx,0xd
c000f84d:	50                   	push   eax
c000f84e:	50                   	push   eax
c000f84f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f851:	52                   	push   edx
c000f852:	51                   	push   ecx
c000f853:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f856:	83 c4 10             	add    esp,0x10
c000f859:	83 c4 0c             	add    esp,0xc
c000f85c:	c3                   	ret    
c000f85d:	90                   	nop

c000f85e <File::rename(char const*)>:
c000f85e:	83 ec 0c             	sub    esp,0xc
c000f861:	b8 0b 00 00 00       	mov    eax,0xb
c000f866:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f86a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f871:	80 f9 19             	cmp    cl,0x19
c000f874:	77 32                	ja     c000f8a8 <File::rename(char const*)+0x4a>
c000f876:	8b 0c 8d 40 34 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcbc0]
c000f87d:	85 c9                	test   ecx,ecx
c000f87f:	74 27                	je     c000f8a8 <File::rename(char const*)+0x4a>
c000f881:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f887:	85 c9                	test   ecx,ecx
c000f889:	74 1d                	je     c000f8a8 <File::rename(char const*)+0x4a>
c000f88b:	b8 06 00 00 00       	mov    eax,0x6
c000f890:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f894:	75 12                	jne    c000f8a8 <File::rename(char const*)+0x4a>
c000f896:	83 c2 0d             	add    edx,0xd
c000f899:	50                   	push   eax
c000f89a:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f89c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8a0:	52                   	push   edx
c000f8a1:	51                   	push   ecx
c000f8a2:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f8a5:	83 c4 10             	add    esp,0x10
c000f8a8:	83 c4 0c             	add    esp,0xc
c000f8ab:	c3                   	ret    

c000f8ac <File::chfatattr(unsigned char, unsigned char)>:
c000f8ac:	57                   	push   edi
c000f8ad:	b8 0b 00 00 00       	mov    eax,0xb
c000f8b2:	56                   	push   esi
c000f8b3:	53                   	push   ebx
c000f8b4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f8b8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f8bc:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f8c3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f8c7:	80 f9 19             	cmp    cl,0x19
c000f8ca:	77 37                	ja     c000f903 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f8cc:	8b 0c 8d 40 34 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcbc0]
c000f8d3:	85 c9                	test   ecx,ecx
c000f8d5:	74 2c                	je     c000f903 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f8d7:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f8dd:	85 c9                	test   ecx,ecx
c000f8df:	74 22                	je     c000f903 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f8e1:	b8 06 00 00 00       	mov    eax,0x6
c000f8e6:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f8ea:	75 17                	jne    c000f903 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f8ec:	8b 39                	mov    edi,DWORD PTR [ecx]
c000f8ee:	89 f0                	mov    eax,esi
c000f8f0:	83 c2 0d             	add    edx,0xd
c000f8f3:	0f b6 f0             	movzx  esi,al
c000f8f6:	0f b6 db             	movzx  ebx,bl
c000f8f9:	56                   	push   esi
c000f8fa:	53                   	push   ebx
c000f8fb:	52                   	push   edx
c000f8fc:	51                   	push   ecx
c000f8fd:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000f900:	83 c4 10             	add    esp,0x10
c000f903:	5b                   	pop    ebx
c000f904:	5e                   	pop    esi
c000f905:	5f                   	pop    edi
c000f906:	c3                   	ret    
c000f907:	90                   	nop

c000f908 <File::exists()>:
c000f908:	83 ec 0c             	sub    esp,0xc
c000f90b:	31 c0                	xor    eax,eax
c000f90d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f911:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f918:	80 f9 19             	cmp    cl,0x19
c000f91b:	77 24                	ja     c000f941 <File::exists()+0x39>
c000f91d:	8b 0c 8d 40 34 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcbc0]
c000f924:	85 c9                	test   ecx,ecx
c000f926:	74 19                	je     c000f941 <File::exists()+0x39>
c000f928:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f92e:	85 c9                	test   ecx,ecx
c000f930:	74 0f                	je     c000f941 <File::exists()+0x39>
c000f932:	83 c2 0d             	add    edx,0xd
c000f935:	50                   	push   eax
c000f936:	50                   	push   eax
c000f937:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f939:	52                   	push   edx
c000f93a:	51                   	push   ecx
c000f93b:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000f93e:	83 c4 10             	add    esp,0x10
c000f941:	83 c4 0c             	add    esp,0xc
c000f944:	c3                   	ret    
c000f945:	90                   	nop

c000f946 <File::stat(unsigned long long*, bool*)>:
c000f946:	56                   	push   esi
c000f947:	53                   	push   ebx
c000f948:	50                   	push   eax
c000f949:	b8 0b 00 00 00       	mov    eax,0xb
c000f94e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f952:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f956:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f95d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f961:	80 f9 19             	cmp    cl,0x19
c000f964:	77 3d                	ja     c000f9a3 <File::stat(unsigned long long*, bool*)+0x5d>
c000f966:	8b 0c 8d 40 34 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcbc0]
c000f96d:	85 c9                	test   ecx,ecx
c000f96f:	74 32                	je     c000f9a3 <File::stat(unsigned long long*, bool*)+0x5d>
c000f971:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f977:	85 c9                	test   ecx,ecx
c000f979:	74 28                	je     c000f9a3 <File::stat(unsigned long long*, bool*)+0x5d>
c000f97b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f97d:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f981:	74 13                	je     c000f996 <File::stat(unsigned long long*, bool*)+0x50>
c000f983:	83 ec 04             	sub    esp,0x4
c000f986:	56                   	push   esi
c000f987:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000f98d:	51                   	push   ecx
c000f98e:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000f991:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000f994:	eb 0a                	jmp    c000f9a0 <File::stat(unsigned long long*, bool*)+0x5a>
c000f996:	53                   	push   ebx
c000f997:	83 c2 0d             	add    edx,0xd
c000f99a:	56                   	push   esi
c000f99b:	52                   	push   edx
c000f99c:	51                   	push   ecx
c000f99d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000f9a0:	83 c4 10             	add    esp,0x10
c000f9a3:	5a                   	pop    edx
c000f9a4:	5b                   	pop    ebx
c000f9a5:	5e                   	pop    esi
c000f9a6:	c3                   	ret    

c000f9a7 <getcwd(Process*, char*, int)>:
c000f9a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f9ab:	31 c0                	xor    eax,eax
c000f9ad:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000f9b0:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000f9b4:	7d 15                	jge    c000f9cb <getcwd(Process*, char*, int)+0x24>
c000f9b6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f9ba:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000f9c1:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000f9c4:	84 c9                	test   cl,cl
c000f9c6:	74 06                	je     c000f9ce <getcwd(Process*, char*, int)+0x27>
c000f9c8:	40                   	inc    eax
c000f9c9:	eb e2                	jmp    c000f9ad <getcwd(Process*, char*, int)+0x6>
c000f9cb:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000f9ce:	31 c0                	xor    eax,eax
c000f9d0:	c3                   	ret    

c000f9d1 <setcwd(Process*, char*)>:
c000f9d1:	55                   	push   ebp
c000f9d2:	57                   	push   edi
c000f9d3:	56                   	push   esi
c000f9d4:	53                   	push   ebx
c000f9d5:	81 ec 20 02 00 00    	sub    esp,0x220
c000f9db:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000f9e2:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000f9e8:	57                   	push   edi
c000f9e9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000f9f0:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000f9f4:	56                   	push   esi
c000f9f5:	e8 92 fa ff ff       	call   c000f48c <standardiseFiles(char*, char const*, char const*)>
c000f9fa:	89 34 24             	mov    DWORD PTR [esp],esi
c000f9fd:	e8 23 0c ff ff       	call   c0000625 <strlen>
c000fa02:	83 c4 10             	add    esp,0x10
c000fa05:	83 f8 02             	cmp    eax,0x2
c000fa08:	77 17                	ja     c000fa21 <setcwd(Process*, char*)+0x50>
c000fa0a:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000fa0f:	83 e8 41             	sub    eax,0x41
c000fa12:	83 f8 19             	cmp    eax,0x19
c000fa15:	76 24                	jbe    c000fa3b <setcwd(Process*, char*)+0x6a>
c000fa17:	b8 03 00 00 00       	mov    eax,0x3
c000fa1c:	e9 cb 00 00 00       	jmp    c000faec <setcwd(Process*, char*)+0x11b>
c000fa21:	83 ec 0c             	sub    esp,0xc
c000fa24:	56                   	push   esi
c000fa25:	e8 fb 0b ff ff       	call   c0000625 <strlen>
c000fa2a:	83 c4 10             	add    esp,0x10
c000fa2d:	83 f8 03             	cmp    eax,0x3
c000fa30:	75 33                	jne    c000fa65 <setcwd(Process*, char*)+0x94>
c000fa32:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000fa37:	75 2c                	jne    c000fa65 <setcwd(Process*, char*)+0x94>
c000fa39:	eb cf                	jmp    c000fa0a <setcwd(Process*, char*)+0x39>
c000fa3b:	8b 14 85 40 34 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcbc0]
c000fa42:	b8 05 00 00 00       	mov    eax,0x5
c000fa47:	85 d2                	test   edx,edx
c000fa49:	0f 84 9d 00 00 00    	je     c000faec <setcwd(Process*, char*)+0x11b>
c000fa4f:	b8 06 00 00 00       	mov    eax,0x6
c000fa54:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fa5b:	0f 84 8b 00 00 00    	je     c000faec <setcwd(Process*, char*)+0x11b>
c000fa61:	51                   	push   ecx
c000fa62:	51                   	push   ecx
c000fa63:	eb 7b                	jmp    c000fae0 <setcwd(Process*, char*)+0x10f>
c000fa65:	83 ec 0c             	sub    esp,0xc
c000fa68:	68 14 01 00 00       	push   0x114
c000fa6d:	e8 96 f7 ff ff       	call   c000f208 <operator new(unsigned long)>
c000fa72:	83 c4 0c             	add    esp,0xc
c000fa75:	89 c3                	mov    ebx,eax
c000fa77:	55                   	push   ebp
c000fa78:	56                   	push   esi
c000fa79:	50                   	push   eax
c000fa7a:	e8 b7 fb ff ff       	call   c000f636 <File::File(char const*, Process*)>
c000fa7f:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000fa84:	83 c4 0c             	add    esp,0xc
c000fa87:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000fa8b:	50                   	push   eax
c000fa8c:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fa90:	50                   	push   eax
c000fa91:	53                   	push   ebx
c000fa92:	e8 af fe ff ff       	call   c000f946 <File::stat(unsigned long long*, bool*)>
c000fa97:	83 c4 10             	add    esp,0x10
c000fa9a:	8b 13                	mov    edx,DWORD PTR [ebx]
c000fa9c:	83 f8 02             	cmp    eax,0x2
c000fa9f:	75 09                	jne    c000faaa <setcwd(Process*, char*)+0xd9>
c000faa1:	83 ec 0c             	sub    esp,0xc
c000faa4:	53                   	push   ebx
c000faa5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000faa8:	eb 0d                	jmp    c000fab7 <setcwd(Process*, char*)+0xe6>
c000faaa:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000faad:	85 c0                	test   eax,eax
c000faaf:	74 10                	je     c000fac1 <setcwd(Process*, char*)+0xf0>
c000fab1:	83 ec 0c             	sub    esp,0xc
c000fab4:	53                   	push   ebx
c000fab5:	ff d2                	call   edx
c000fab7:	83 c4 10             	add    esp,0x10
c000faba:	b8 01 00 00 00       	mov    eax,0x1
c000fabf:	eb 2b                	jmp    c000faec <setcwd(Process*, char*)+0x11b>
c000fac1:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000fac6:	75 10                	jne    c000fad8 <setcwd(Process*, char*)+0x107>
c000fac8:	83 ec 0c             	sub    esp,0xc
c000facb:	53                   	push   ebx
c000facc:	ff d2                	call   edx
c000face:	83 c4 10             	add    esp,0x10
c000fad1:	b8 02 00 00 00       	mov    eax,0x2
c000fad6:	eb 14                	jmp    c000faec <setcwd(Process*, char*)+0x11b>
c000fad8:	83 ec 0c             	sub    esp,0xc
c000fadb:	53                   	push   ebx
c000fadc:	ff d2                	call   edx
c000fade:	58                   	pop    eax
c000fadf:	5a                   	pop    edx
c000fae0:	56                   	push   esi
c000fae1:	57                   	push   edi
c000fae2:	e8 c0 0b ff ff       	call   c00006a7 <strcpy>
c000fae7:	83 c4 10             	add    esp,0x10
c000faea:	31 c0                	xor    eax,eax
c000faec:	81 c4 1c 02 00 00    	add    esp,0x21c
c000faf2:	5b                   	pop    ebx
c000faf3:	5e                   	pop    esi
c000faf4:	5f                   	pop    edi
c000faf5:	5d                   	pop    ebp
c000faf6:	c3                   	ret    
c000faf7:	90                   	nop

c000faf8 <Directory::Directory(char const*, Process*)>:
c000faf8:	83 ec 0c             	sub    esp,0xc
c000fafb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000faff:	83 ec 08             	sub    esp,0x8
c000fb02:	6a 00                	push   0x0
c000fb04:	50                   	push   eax
c000fb05:	e8 2a e3 ff ff       	call   c000de34 <UnixFile::UnixFile(int)>
c000fb0a:	83 c4 10             	add    esp,0x10
c000fb0d:	ba 60 08 02 c0       	mov    edx,0xc0020860
c000fb12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb16:	89 10                	mov    DWORD PTR [eax],edx
c000fb18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fb1c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000fb22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb26:	83 c0 0d             	add    eax,0xd
c000fb29:	83 ec 04             	sub    esp,0x4
c000fb2c:	52                   	push   edx
c000fb2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fb31:	50                   	push   eax
c000fb32:	e8 55 f9 ff ff       	call   c000f48c <standardiseFiles(char*, char const*, char const*)>
c000fb37:	83 c4 10             	add    esp,0x10
c000fb3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb3e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000fb41:	8d 50 bf             	lea    edx,[eax-0x41]
c000fb44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb48:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000fb4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb52:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000fb56:	90                   	nop
c000fb57:	83 c4 0c             	add    esp,0xc
c000fb5a:	c3                   	ret    
c000fb5b:	90                   	nop

c000fb5c <Directory::open()>:
c000fb5c:	53                   	push   ebx
c000fb5d:	b8 0b 00 00 00       	mov    eax,0xb
c000fb62:	83 ec 08             	sub    esp,0x8
c000fb65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb69:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fb70:	80 fa 19             	cmp    dl,0x19
c000fb73:	77 3d                	ja     c000fbb2 <Directory::open()+0x56>
c000fb75:	8b 14 95 40 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcbc0]
c000fb7c:	85 d2                	test   edx,edx
c000fb7e:	74 32                	je     c000fbb2 <Directory::open()+0x56>
c000fb80:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000fb86:	85 d2                	test   edx,edx
c000fb88:	74 28                	je     c000fbb2 <Directory::open()+0x56>
c000fb8a:	b8 06 00 00 00       	mov    eax,0x6
c000fb8f:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fb93:	75 1d                	jne    c000fbb2 <Directory::open()+0x56>
c000fb95:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fb9b:	50                   	push   eax
c000fb9c:	8b 02                	mov    eax,DWORD PTR [edx]
c000fb9e:	51                   	push   ecx
c000fb9f:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000fba2:	51                   	push   ecx
c000fba3:	52                   	push   edx
c000fba4:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fba7:	83 c4 10             	add    esp,0x10
c000fbaa:	85 c0                	test   eax,eax
c000fbac:	75 04                	jne    c000fbb2 <Directory::open()+0x56>
c000fbae:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000fbb2:	83 c4 08             	add    esp,0x8
c000fbb5:	5b                   	pop    ebx
c000fbb6:	c3                   	ret    
c000fbb7:	90                   	nop

c000fbb8 <Directory::close()>:
c000fbb8:	53                   	push   ebx
c000fbb9:	b8 0b 00 00 00       	mov    eax,0xb
c000fbbe:	83 ec 08             	sub    esp,0x8
c000fbc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fbc5:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fbcc:	80 fa 19             	cmp    dl,0x19
c000fbcf:	77 41                	ja     c000fc12 <Directory::close()+0x5a>
c000fbd1:	8b 1c 95 40 34 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdcbc0]
c000fbd8:	85 db                	test   ebx,ebx
c000fbda:	74 36                	je     c000fc12 <Directory::close()+0x5a>
c000fbdc:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fbe3:	74 2d                	je     c000fc12 <Directory::close()+0x5a>
c000fbe5:	b8 05 00 00 00       	mov    eax,0x5
c000fbea:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000fbee:	74 22                	je     c000fc12 <Directory::close()+0x5a>
c000fbf0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fbf4:	8b 04 95 40 34 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcbc0]
c000fbfb:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000fc01:	53                   	push   ebx
c000fc02:	53                   	push   ebx
c000fc03:	8b 10                	mov    edx,DWORD PTR [eax]
c000fc05:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000fc0b:	50                   	push   eax
c000fc0c:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000fc0f:	83 c4 10             	add    esp,0x10
c000fc12:	83 c4 08             	add    esp,0x8
c000fc15:	5b                   	pop    ebx
c000fc16:	c3                   	ret    
c000fc17:	90                   	nop

c000fc18 <Directory::unlink()>:
c000fc18:	83 ec 0c             	sub    esp,0xc
c000fc1b:	b8 0b 00 00 00       	mov    eax,0xb
c000fc20:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fc24:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fc2b:	80 f9 19             	cmp    cl,0x19
c000fc2e:	77 2f                	ja     c000fc5f <Directory::unlink()+0x47>
c000fc30:	8b 0c 8d 40 34 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcbc0]
c000fc37:	85 c9                	test   ecx,ecx
c000fc39:	74 24                	je     c000fc5f <Directory::unlink()+0x47>
c000fc3b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fc41:	85 c9                	test   ecx,ecx
c000fc43:	74 1a                	je     c000fc5f <Directory::unlink()+0x47>
c000fc45:	b8 06 00 00 00       	mov    eax,0x6
c000fc4a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fc4e:	75 0f                	jne    c000fc5f <Directory::unlink()+0x47>
c000fc50:	83 c2 0d             	add    edx,0xd
c000fc53:	50                   	push   eax
c000fc54:	50                   	push   eax
c000fc55:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fc57:	52                   	push   edx
c000fc58:	51                   	push   ecx
c000fc59:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fc5c:	83 c4 10             	add    esp,0x10
c000fc5f:	83 c4 0c             	add    esp,0xc
c000fc62:	c3                   	ret    
c000fc63:	90                   	nop

c000fc64 <Directory::rename(char const*)>:
c000fc64:	83 ec 0c             	sub    esp,0xc
c000fc67:	b8 0b 00 00 00       	mov    eax,0xb
c000fc6c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fc70:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fc77:	80 f9 19             	cmp    cl,0x19
c000fc7a:	77 32                	ja     c000fcae <Directory::rename(char const*)+0x4a>
c000fc7c:	8b 0c 8d 40 34 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcbc0]
c000fc83:	85 c9                	test   ecx,ecx
c000fc85:	74 27                	je     c000fcae <Directory::rename(char const*)+0x4a>
c000fc87:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fc8d:	85 c9                	test   ecx,ecx
c000fc8f:	74 1d                	je     c000fcae <Directory::rename(char const*)+0x4a>
c000fc91:	b8 06 00 00 00       	mov    eax,0x6
c000fc96:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fc9a:	75 12                	jne    c000fcae <Directory::rename(char const*)+0x4a>
c000fc9c:	83 c2 0d             	add    edx,0xd
c000fc9f:	50                   	push   eax
c000fca0:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fca2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fca6:	52                   	push   edx
c000fca7:	51                   	push   ecx
c000fca8:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fcab:	83 c4 10             	add    esp,0x10
c000fcae:	83 c4 0c             	add    esp,0xc
c000fcb1:	c3                   	ret    

c000fcb2 <Directory::exists()>:
c000fcb2:	83 ec 0c             	sub    esp,0xc
c000fcb5:	31 c0                	xor    eax,eax
c000fcb7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fcbb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fcc2:	80 f9 19             	cmp    cl,0x19
c000fcc5:	77 24                	ja     c000fceb <Directory::exists()+0x39>
c000fcc7:	8b 0c 8d 40 34 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcbc0]
c000fcce:	85 c9                	test   ecx,ecx
c000fcd0:	74 19                	je     c000fceb <Directory::exists()+0x39>
c000fcd2:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fcd8:	85 c9                	test   ecx,ecx
c000fcda:	74 0f                	je     c000fceb <Directory::exists()+0x39>
c000fcdc:	83 c2 0d             	add    edx,0xd
c000fcdf:	50                   	push   eax
c000fce0:	50                   	push   eax
c000fce1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fce3:	52                   	push   edx
c000fce4:	51                   	push   ecx
c000fce5:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fce8:	83 c4 10             	add    esp,0x10
c000fceb:	83 c4 0c             	add    esp,0xc
c000fcee:	c3                   	ret    
c000fcef:	90                   	nop

c000fcf0 <Directory::read(dirent*)>:
c000fcf0:	83 ec 1c             	sub    esp,0x1c
c000fcf3:	b8 0b 00 00 00       	mov    eax,0xb
c000fcf8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fcfc:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fd03:	80 fa 19             	cmp    dl,0x19
c000fd06:	77 30                	ja     c000fd38 <Directory::read(dirent*)+0x48>
c000fd08:	8b 14 95 40 34 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdcbc0]
c000fd0f:	85 d2                	test   edx,edx
c000fd11:	74 25                	je     c000fd38 <Directory::read(dirent*)+0x48>
c000fd13:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fd1a:	74 1c                	je     c000fd38 <Directory::read(dirent*)+0x48>
c000fd1c:	83 ec 0c             	sub    esp,0xc
c000fd1f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd21:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fd25:	52                   	push   edx
c000fd26:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fd2a:	6a 00                	push   0x0
c000fd2c:	68 10 01 00 00       	push   0x110
c000fd31:	51                   	push   ecx
c000fd32:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fd35:	83 c4 20             	add    esp,0x20
c000fd38:	83 c4 1c             	add    esp,0x1c
c000fd3b:	c3                   	ret    

c000fd3c <Directory::create()>:
c000fd3c:	83 ec 0c             	sub    esp,0xc
c000fd3f:	b8 0b 00 00 00       	mov    eax,0xb
c000fd44:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd48:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd4f:	80 f9 19             	cmp    cl,0x19
c000fd52:	77 2f                	ja     c000fd83 <Directory::create()+0x47>
c000fd54:	8b 0c 8d 40 34 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcbc0]
c000fd5b:	85 c9                	test   ecx,ecx
c000fd5d:	74 24                	je     c000fd83 <Directory::create()+0x47>
c000fd5f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd65:	85 c9                	test   ecx,ecx
c000fd67:	74 1a                	je     c000fd83 <Directory::create()+0x47>
c000fd69:	b8 06 00 00 00       	mov    eax,0x6
c000fd6e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fd72:	75 0f                	jne    c000fd83 <Directory::create()+0x47>
c000fd74:	83 c2 0d             	add    edx,0xd
c000fd77:	50                   	push   eax
c000fd78:	50                   	push   eax
c000fd79:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd7b:	52                   	push   edx
c000fd7c:	51                   	push   ecx
c000fd7d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fd80:	83 c4 10             	add    esp,0x10
c000fd83:	83 c4 0c             	add    esp,0xc
c000fd86:	c3                   	ret    
c000fd87:	90                   	nop

c000fd88 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fd88:	b8 0a 00 00 00       	mov    eax,0xa
c000fd8d:	c3                   	ret    

c000fd8e <Bus::Bus(char const*)>:
c000fd8e:	83 ec 0c             	sub    esp,0xc
c000fd91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fd95:	83 ec 08             	sub    esp,0x8
c000fd98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd9c:	50                   	push   eax
c000fd9d:	e8 60 09 00 00       	call   c0010702 <Device::Device(char const*)>
c000fda2:	83 c4 10             	add    esp,0x10
c000fda5:	ba 7c 08 02 c0       	mov    edx,0xc002087c
c000fdaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdae:	89 10                	mov    DWORD PTR [eax],edx
c000fdb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdb4:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fdbe:	90                   	nop
c000fdbf:	83 c4 0c             	add    esp,0xc
c000fdc2:	c3                   	ret    
c000fdc3:	90                   	nop

c000fdc4 <Bus::~Bus()>:
c000fdc4:	83 ec 0c             	sub    esp,0xc
c000fdc7:	ba 7c 08 02 c0       	mov    edx,0xc002087c
c000fdcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdd0:	89 10                	mov    DWORD PTR [eax],edx
c000fdd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdd6:	83 ec 0c             	sub    esp,0xc
c000fdd9:	50                   	push   eax
c000fdda:	e8 d5 05 00 00       	call   c00103b4 <Device::~Device()>
c000fddf:	83 c4 10             	add    esp,0x10
c000fde2:	90                   	nop
c000fde3:	83 c4 0c             	add    esp,0xc
c000fde6:	c3                   	ret    
c000fde7:	90                   	nop

c000fde8 <Bus::~Bus()>:
c000fde8:	83 ec 0c             	sub    esp,0xc
c000fdeb:	83 ec 0c             	sub    esp,0xc
c000fdee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fdf2:	e8 cd ff ff ff       	call   c000fdc4 <Bus::~Bus()>
c000fdf7:	83 c4 10             	add    esp,0x10
c000fdfa:	83 ec 08             	sub    esp,0x8
c000fdfd:	68 58 01 00 00       	push   0x158
c000fe02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe06:	e8 0c f4 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c000fe0b:	83 c4 10             	add    esp,0x10
c000fe0e:	83 c4 0c             	add    esp,0xc
c000fe11:	c3                   	ret    

c000fe12 <Buzzer::Buzzer(char const*)>:
c000fe12:	83 ec 0c             	sub    esp,0xc
c000fe15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe19:	83 ec 08             	sub    esp,0x8
c000fe1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe20:	50                   	push   eax
c000fe21:	e8 dc 08 00 00       	call   c0010702 <Device::Device(char const*)>
c000fe26:	83 c4 10             	add    esp,0x10
c000fe29:	ba a8 08 02 c0       	mov    edx,0xc00208a8
c000fe2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe32:	89 10                	mov    DWORD PTR [eax],edx
c000fe34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe38:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000fe42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe46:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000fe50:	90                   	nop
c000fe51:	83 c4 0c             	add    esp,0xc
c000fe54:	c3                   	ret    
c000fe55:	90                   	nop

c000fe56 <Buzzer::~Buzzer()>:
c000fe56:	83 ec 0c             	sub    esp,0xc
c000fe59:	ba a8 08 02 c0       	mov    edx,0xc00208a8
c000fe5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe62:	89 10                	mov    DWORD PTR [eax],edx
c000fe64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe68:	83 ec 0c             	sub    esp,0xc
c000fe6b:	50                   	push   eax
c000fe6c:	e8 43 05 00 00       	call   c00103b4 <Device::~Device()>
c000fe71:	83 c4 10             	add    esp,0x10
c000fe74:	90                   	nop
c000fe75:	83 c4 0c             	add    esp,0xc
c000fe78:	c3                   	ret    
c000fe79:	90                   	nop

c000fe7a <Buzzer::~Buzzer()>:
c000fe7a:	83 ec 0c             	sub    esp,0xc
c000fe7d:	83 ec 0c             	sub    esp,0xc
c000fe80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe84:	e8 cd ff ff ff       	call   c000fe56 <Buzzer::~Buzzer()>
c000fe89:	83 c4 10             	add    esp,0x10
c000fe8c:	83 ec 08             	sub    esp,0x8
c000fe8f:	68 5c 01 00 00       	push   0x15c
c000fe94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe98:	e8 7a f3 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c000fe9d:	83 c4 10             	add    esp,0x10
c000fea0:	83 c4 0c             	add    esp,0xc
c000fea3:	c3                   	ret    

c000fea4 <Buzzer::stop()>:
c000fea4:	83 ec 14             	sub    esp,0x14
c000fea7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000feab:	8b 10                	mov    edx,DWORD PTR [eax]
c000fead:	6a 00                	push   0x0
c000feaf:	50                   	push   eax
c000feb0:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000feb3:	83 c4 1c             	add    esp,0x1c
c000feb6:	c3                   	ret    

c000feb7 <beepThread(void*)>:
c000feb7:	53                   	push   ebx
c000feb8:	83 ec 08             	sub    esp,0x8
c000febb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000febf:	e8 46 77 00 00       	call   c001760a <unlockScheduler()>
c000fec4:	b8 40 42 0f 00       	mov    eax,0xf4240
c000fec9:	52                   	push   edx
c000feca:	52                   	push   edx
c000fecb:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000fed1:	52                   	push   edx
c000fed2:	50                   	push   eax
c000fed3:	e8 e9 7d 00 00       	call   c0017cc1 <nanoSleep(unsigned long long)>
c000fed8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fedb:	e8 c4 ff ff ff       	call   c000fea4 <Buzzer::stop()>
c000fee0:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000fee8:	83 c4 18             	add    esp,0x18
c000feeb:	5b                   	pop    ebx
c000feec:	e9 16 7d 00 00       	jmp    c0017c07 <blockTask(TaskState)>
c000fef1:	90                   	nop

c000fef2 <Buzzer::beep(int, int, bool)>:
c000fef2:	57                   	push   edi
c000fef3:	56                   	push   esi
c000fef4:	53                   	push   ebx
c000fef5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fef9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fefd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ff01:	52                   	push   edx
c000ff02:	52                   	push   edx
c000ff03:	8b 06                	mov    eax,DWORD PTR [esi]
c000ff05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff09:	56                   	push   esi
c000ff0a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ff0d:	83 c4 10             	add    esp,0x10
c000ff10:	89 f8                	mov    eax,edi
c000ff12:	84 c0                	test   al,al
c000ff14:	74 1f                	je     c000ff35 <Buzzer::beep(int, int, bool)+0x43>
c000ff16:	50                   	push   eax
c000ff17:	50                   	push   eax
c000ff18:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c000ff1e:	99                   	cdq    
c000ff1f:	52                   	push   edx
c000ff20:	50                   	push   eax
c000ff21:	e8 9b 7d 00 00       	call   c0017cc1 <nanoSleep(unsigned long long)>
c000ff26:	83 c4 10             	add    esp,0x10
c000ff29:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000ff2d:	5b                   	pop    ebx
c000ff2e:	5e                   	pop    esi
c000ff2f:	5f                   	pop    edi
c000ff30:	e9 6f ff ff ff       	jmp    c000fea4 <Buzzer::stop()>
c000ff35:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c000ff3b:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c000ff40:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c000ff48:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000ff4c:	c7 44 24 14 b7 fe 00 c0 	mov    DWORD PTR [esp+0x14],0xc000feb7
c000ff54:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ff58:	5b                   	pop    ebx
c000ff59:	5e                   	pop    esi
c000ff5a:	5f                   	pop    edi
c000ff5b:	e9 d2 77 00 00       	jmp    c0017732 <Process::createThread(void (*)(void*), void*, int)>

c000ff60 <loadClockSettings()>:
c000ff60:	c7 05 ac 2f 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0022fac,0xa
c000ff6a:	c6 05 a9 2f 02 c0 00 	mov    BYTE PTR ds:0xc0022fa9,0x0
c000ff71:	c6 05 a8 2f 02 c0 01 	mov    BYTE PTR ds:0xc0022fa8,0x1
c000ff78:	c3                   	ret    
c000ff79:	90                   	nop

c000ff7a <Clock::Clock(char const*)>:
c000ff7a:	83 ec 0c             	sub    esp,0xc
c000ff7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff81:	83 ec 08             	sub    esp,0x8
c000ff84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff88:	50                   	push   eax
c000ff89:	e8 74 07 00 00       	call   c0010702 <Device::Device(char const*)>
c000ff8e:	83 c4 10             	add    esp,0x10
c000ff91:	ba d8 08 02 c0       	mov    edx,0xc00208d8
c000ff96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff9a:	89 10                	mov    DWORD PTR [eax],edx
c000ff9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffa0:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000ffaa:	90                   	nop
c000ffab:	83 c4 0c             	add    esp,0xc
c000ffae:	c3                   	ret    
c000ffaf:	90                   	nop

c000ffb0 <Clock::~Clock()>:
c000ffb0:	83 ec 0c             	sub    esp,0xc
c000ffb3:	ba d8 08 02 c0       	mov    edx,0xc00208d8
c000ffb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffbc:	89 10                	mov    DWORD PTR [eax],edx
c000ffbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ffc2:	83 ec 0c             	sub    esp,0xc
c000ffc5:	50                   	push   eax
c000ffc6:	e8 e9 03 00 00       	call   c00103b4 <Device::~Device()>
c000ffcb:	83 c4 10             	add    esp,0x10
c000ffce:	90                   	nop
c000ffcf:	83 c4 0c             	add    esp,0xc
c000ffd2:	c3                   	ret    
c000ffd3:	90                   	nop

c000ffd4 <Clock::~Clock()>:
c000ffd4:	83 ec 0c             	sub    esp,0xc
c000ffd7:	83 ec 0c             	sub    esp,0xc
c000ffda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffde:	e8 cd ff ff ff       	call   c000ffb0 <Clock::~Clock()>
c000ffe3:	83 c4 10             	add    esp,0x10
c000ffe6:	83 ec 08             	sub    esp,0x8
c000ffe9:	68 58 01 00 00       	push   0x158
c000ffee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fff2:	e8 20 f2 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c000fff7:	83 c4 10             	add    esp,0x10
c000fffa:	83 c4 0c             	add    esp,0xc
c000fffd:	c3                   	ret    

c000fffe <Clock::timeInSecondsLocal()>:
c000fffe:	53                   	push   ebx
c000ffff:	83 ec 14             	sub    esp,0x14
c0010002:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010006:	8b 10                	mov    edx,DWORD PTR [eax]
c0010008:	50                   	push   eax
c0010009:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001000c:	0f b6 0d a8 2f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0022fa8
c0010013:	03 0d ac 2f 02 c0    	add    ecx,DWORD PTR ds:0xc0022fac
c0010019:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001001f:	89 cb                	mov    ebx,ecx
c0010021:	c1 fb 1f             	sar    ebx,0x1f
c0010024:	01 c8                	add    eax,ecx
c0010026:	11 da                	adc    edx,ebx
c0010028:	83 c4 10             	add    esp,0x10
c001002b:	31 c9                	xor    ecx,ecx
c001002d:	80 3d a9 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022fa9,0x0
c0010034:	74 05                	je     c001003b <Clock::timeInSecondsLocal()+0x3d>
c0010036:	b9 08 07 00 00       	mov    ecx,0x708
c001003b:	31 db                	xor    ebx,ebx
c001003d:	01 c8                	add    eax,ecx
c001003f:	11 da                	adc    edx,ebx
c0010041:	83 c4 08             	add    esp,0x8
c0010044:	5b                   	pop    ebx
c0010045:	c3                   	ret    

c0010046 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0010046:	57                   	push   edi
c0010047:	56                   	push   esi
c0010048:	53                   	push   ebx
c0010049:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001004d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010051:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010053:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010057:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001005a:	0f b6 05 a8 2f 02 c0 	movzx  eax,BYTE PTR ds:0xc0022fa8
c0010061:	03 05 ac 2f 02 c0    	add    eax,DWORD PTR ds:0xc0022fac
c0010067:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001006d:	99                   	cdq    
c001006e:	29 c6                	sub    esi,eax
c0010070:	19 d7                	sbb    edi,edx
c0010072:	89 f0                	mov    eax,esi
c0010074:	89 fa                	mov    edx,edi
c0010076:	31 f6                	xor    esi,esi
c0010078:	80 3d a9 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022fa9,0x0
c001007f:	74 05                	je     c0010086 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0010081:	be 08 07 00 00       	mov    esi,0x708
c0010086:	31 ff                	xor    edi,edi
c0010088:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001008c:	29 f0                	sub    eax,esi
c001008e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010092:	19 fa                	sbb    edx,edi
c0010094:	89 d8                	mov    eax,ebx
c0010096:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001009a:	5b                   	pop    ebx
c001009b:	5e                   	pop    esi
c001009c:	5f                   	pop    edi
c001009d:	ff e0                	jmp    eax

c001009f <datetimeToSeconds(datetime_t)>:
c001009f:	55                   	push   ebp
c00100a0:	57                   	push   edi
c00100a1:	56                   	push   esi
c00100a2:	53                   	push   ebx
c00100a3:	83 ec 14             	sub    esp,0x14
c00100a6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00100aa:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00100ae:	89 d3                	mov    ebx,edx
c00100b0:	0f b6 c6             	movzx  eax,dh
c00100b3:	c1 eb 10             	shr    ebx,0x10
c00100b6:	48                   	dec    eax
c00100b7:	66 81 eb 6c 07       	sub    bx,0x76c
c00100bc:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00100c0:	0f b6 f5             	movzx  esi,ch
c00100c3:	89 cf                	mov    edi,ecx
c00100c5:	6b f6 3c             	imul   esi,esi,0x3c
c00100c8:	c1 ef 10             	shr    edi,0x10
c00100cb:	0f b6 c9             	movzx  ecx,cl
c00100ce:	89 f8                	mov    eax,edi
c00100d0:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00100d6:	0f b6 f8             	movzx  edi,al
c00100d9:	0f b6 d2             	movzx  edx,dl
c00100dc:	01 fe                	add    esi,edi
c00100de:	01 f1                	add    ecx,esi
c00100e0:	0f b7 f3             	movzx  esi,bx
c00100e3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00100e7:	c1 f9 1f             	sar    ecx,0x1f
c00100ea:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c00100ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00100f3:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00100f8:	8b 0c 8d 20 09 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdf6e0]
c00100ff:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0010103:	76 29                	jbe    c001012e <datetimeToSeconds(datetime_t)+0x8f>
c0010105:	f6 c3 03             	test   bl,0x3
c0010108:	75 24                	jne    c001012e <datetimeToSeconds(datetime_t)+0x8f>
c001010a:	31 d2                	xor    edx,edx
c001010c:	bf 64 00 00 00       	mov    edi,0x64
c0010111:	89 d8                	mov    eax,ebx
c0010113:	66 f7 f7             	div    di
c0010116:	66 85 d2             	test   dx,dx
c0010119:	75 12                	jne    c001012d <datetimeToSeconds(datetime_t)+0x8e>
c001011b:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0010121:	bf 90 01 00 00       	mov    edi,0x190
c0010126:	99                   	cdq    
c0010127:	f7 ff                	idiv   edi
c0010129:	85 d2                	test   edx,edx
c001012b:	75 01                	jne    c001012e <datetimeToSeconds(datetime_t)+0x8f>
c001012d:	41                   	inc    ecx
c001012e:	66 83 fb 46          	cmp    bx,0x46
c0010132:	76 45                	jbe    c0010179 <datetimeToSeconds(datetime_t)+0xda>
c0010134:	bb 46 00 00 00       	mov    ebx,0x46
c0010139:	bf 64 00 00 00       	mov    edi,0x64
c001013e:	bd 90 01 00 00       	mov    ebp,0x190
c0010143:	b8 6d 01 00 00       	mov    eax,0x16d
c0010148:	f6 c3 03             	test   bl,0x3
c001014b:	75 23                	jne    c0010170 <datetimeToSeconds(datetime_t)+0xd1>
c001014d:	89 d8                	mov    eax,ebx
c001014f:	99                   	cdq    
c0010150:	f7 ff                	idiv   edi
c0010152:	b8 6e 01 00 00       	mov    eax,0x16e
c0010157:	85 d2                	test   edx,edx
c0010159:	75 15                	jne    c0010170 <datetimeToSeconds(datetime_t)+0xd1>
c001015b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0010161:	99                   	cdq    
c0010162:	f7 fd                	idiv   ebp
c0010164:	83 fa 01             	cmp    edx,0x1
c0010167:	19 c0                	sbb    eax,eax
c0010169:	f7 d0                	not    eax
c001016b:	05 6e 01 00 00       	add    eax,0x16e
c0010170:	01 c1                	add    ecx,eax
c0010172:	43                   	inc    ebx
c0010173:	39 f3                	cmp    ebx,esi
c0010175:	7c cc                	jl     c0010143 <datetimeToSeconds(datetime_t)+0xa4>
c0010177:	eb 35                	jmp    c00101ae <datetimeToSeconds(datetime_t)+0x10f>
c0010179:	74 33                	je     c00101ae <datetimeToSeconds(datetime_t)+0x10f>
c001017b:	b8 45 00 00 00       	mov    eax,0x45
c0010180:	89 c2                	mov    edx,eax
c0010182:	83 e2 03             	and    edx,0x3
c0010185:	39 f0                	cmp    eax,esi
c0010187:	7e 0f                	jle    c0010198 <datetimeToSeconds(datetime_t)+0xf9>
c0010189:	83 fa 01             	cmp    edx,0x1
c001018c:	19 d2                	sbb    edx,edx
c001018e:	48                   	dec    eax
c001018f:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0010196:	eb e8                	jmp    c0010180 <datetimeToSeconds(datetime_t)+0xe1>
c0010198:	b8 6d 01 00 00       	mov    eax,0x16d
c001019d:	85 d2                	test   edx,edx
c001019f:	75 0b                	jne    c00101ac <datetimeToSeconds(datetime_t)+0x10d>
c00101a1:	66 83 fb 01          	cmp    bx,0x1
c00101a5:	19 c0                	sbb    eax,eax
c00101a7:	05 6e 01 00 00       	add    eax,0x16e
c00101ac:	29 c1                	sub    ecx,eax
c00101ae:	b8 80 51 01 00       	mov    eax,0x15180
c00101b3:	f7 e9                	imul   ecx
c00101b5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00101b9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00101bd:	83 c4 14             	add    esp,0x14
c00101c0:	5b                   	pop    ebx
c00101c1:	5e                   	pop    esi
c00101c2:	5f                   	pop    edi
c00101c3:	5d                   	pop    ebp
c00101c4:	c3                   	ret    
c00101c5:	90                   	nop

c00101c6 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00101c6:	57                   	push   edi
c00101c7:	56                   	push   esi
c00101c8:	53                   	push   ebx
c00101c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00101cd:	8b 06                	mov    eax,DWORD PTR [esi]
c00101cf:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00101d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00101da:	e8 c0 fe ff ff       	call   c001009f <datetimeToSeconds(datetime_t)>
c00101df:	59                   	pop    ecx
c00101e0:	0f b6 0d a8 2f 02 c0 	movzx  ecx,BYTE PTR ds:0xc0022fa8
c00101e7:	5b                   	pop    ebx
c00101e8:	03 0d ac 2f 02 c0    	add    ecx,DWORD PTR ds:0xc0022fac
c00101ee:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00101f4:	89 cb                	mov    ebx,ecx
c00101f6:	c1 fb 1f             	sar    ebx,0x1f
c00101f9:	29 c8                	sub    eax,ecx
c00101fb:	19 da                	sbb    edx,ebx
c00101fd:	31 c9                	xor    ecx,ecx
c00101ff:	80 3d a9 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022fa9,0x0
c0010206:	74 05                	je     c001020d <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0010208:	b9 08 07 00 00       	mov    ecx,0x708
c001020d:	31 db                	xor    ebx,ebx
c001020f:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0010213:	29 c8                	sub    eax,ecx
c0010215:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010219:	19 da                	sbb    edx,ebx
c001021b:	89 f8                	mov    eax,edi
c001021d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010221:	5b                   	pop    ebx
c0010222:	5e                   	pop    esi
c0010223:	5f                   	pop    edi
c0010224:	ff e0                	jmp    eax

c0010226 <secondsToDatetime(unsigned long long)>:
c0010226:	55                   	push   ebp
c0010227:	57                   	push   edi
c0010228:	56                   	push   esi
c0010229:	53                   	push   ebx
c001022a:	83 ec 1c             	sub    esp,0x1c
c001022d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010231:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010235:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0010239:	6a 00                	push   0x0
c001023b:	68 80 51 01 00       	push   0x15180
c0010240:	55                   	push   ebp
c0010241:	57                   	push   edi
c0010242:	e8 85 de 00 00       	call   c001e0cc <__udivdi3>
c0010247:	83 c4 10             	add    esp,0x10
c001024a:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0010250:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010254:	6a 00                	push   0x0
c0010256:	68 80 51 01 00       	push   0x15180
c001025b:	55                   	push   ebp
c001025c:	57                   	push   edi
c001025d:	bf 10 0e 00 00       	mov    edi,0xe10
c0010262:	e8 65 df 00 00       	call   c001e1cc <__umoddi3>
c0010267:	83 c4 10             	add    esp,0x10
c001026a:	99                   	cdq    
c001026b:	f7 ff                	idiv   edi
c001026d:	bf 3c 00 00 00       	mov    edi,0x3c
c0010272:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0010275:	89 d0                	mov    eax,edx
c0010277:	99                   	cdq    
c0010278:	f7 ff                	idiv   edi
c001027a:	85 db                	test   ebx,ebx
c001027c:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c001027f:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0010282:	79 11                	jns    c0010295 <secondsToDatetime(unsigned long long)+0x6f>
c0010284:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010288:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c001028e:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0010293:	eb 07                	jmp    c001029c <secondsToDatetime(unsigned long long)+0x76>
c0010295:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001029a:	89 d8                	mov    eax,ebx
c001029c:	bf b4 05 00 00       	mov    edi,0x5b4
c00102a1:	99                   	cdq    
c00102a2:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00102a7:	f7 f9                	idiv   ecx
c00102a9:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00102ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00102b2:	31 d2                	xor    edx,edx
c00102b4:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00102bc:	01 c3                	add    ebx,eax
c00102be:	89 d8                	mov    eax,ebx
c00102c0:	f7 f1                	div    ecx
c00102c2:	31 d2                	xor    edx,edx
c00102c4:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00102c7:	89 d8                	mov    eax,ebx
c00102c9:	f7 f7                	div    edi
c00102cb:	31 d2                	xor    edx,edx
c00102cd:	29 c1                	sub    ecx,eax
c00102cf:	89 d8                	mov    eax,ebx
c00102d1:	f7 f5                	div    ebp
c00102d3:	bd 6d 01 00 00       	mov    ebp,0x16d
c00102d8:	29 c1                	sub    ecx,eax
c00102da:	31 d2                	xor    edx,edx
c00102dc:	89 c8                	mov    eax,ecx
c00102de:	f7 f5                	div    ebp
c00102e0:	bd 94 8e 00 00       	mov    ebp,0x8e94
c00102e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00102e9:	31 d2                	xor    edx,edx
c00102eb:	89 c8                	mov    eax,ecx
c00102ed:	f7 f5                	div    ebp
c00102ef:	31 d2                	xor    edx,edx
c00102f1:	01 c3                	add    ebx,eax
c00102f3:	89 c8                	mov    eax,ecx
c00102f5:	f7 f7                	div    edi
c00102f7:	bf 99 00 00 00       	mov    edi,0x99
c00102fc:	29 c3                	sub    ebx,eax
c00102fe:	31 d2                	xor    edx,edx
c0010300:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0010308:	29 c3                	sub    ebx,eax
c001030a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001030d:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0010310:	bb 05 00 00 00       	mov    ebx,0x5
c0010315:	83 c1 02             	add    ecx,0x2
c0010318:	89 c8                	mov    eax,ecx
c001031a:	f7 f7                	div    edi
c001031c:	31 d2                	xor    edx,edx
c001031e:	89 c7                	mov    edi,eax
c0010320:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0010326:	83 c0 02             	add    eax,0x2
c0010329:	f7 f3                	div    ebx
c001032b:	89 eb                	mov    ebx,ebp
c001032d:	29 c3                	sub    ebx,eax
c001032f:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0010335:	88 1e                	mov    BYTE PTR [esi],bl
c0010337:	19 c0                	sbb    eax,eax
c0010339:	31 d2                	xor    edx,edx
c001033b:	83 e0 0c             	and    eax,0xc
c001033e:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0010342:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001034a:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c001034e:	83 f9 01             	cmp    ecx,0x1
c0010351:	0f 96 c2             	setbe  dl
c0010354:	41                   	inc    ecx
c0010355:	01 d0                	add    eax,edx
c0010357:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001035a:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c001035e:	83 c4 1c             	add    esp,0x1c
c0010361:	89 f0                	mov    eax,esi
c0010363:	5b                   	pop    ebx
c0010364:	5e                   	pop    esi
c0010365:	5f                   	pop    edi
c0010366:	5d                   	pop    ebp
c0010367:	c2 04 00             	ret    0x4

c001036a <Clock::timeInDatetimeLocal()>:
c001036a:	53                   	push   ebx
c001036b:	83 ec 14             	sub    esp,0x14
c001036e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010372:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010376:	e8 83 fc ff ff       	call   c000fffe <Clock::timeInSecondsLocal()>
c001037b:	83 c4 0c             	add    esp,0xc
c001037e:	52                   	push   edx
c001037f:	50                   	push   eax
c0010380:	53                   	push   ebx
c0010381:	e8 a0 fe ff ff       	call   c0010226 <secondsToDatetime(unsigned long long)>
c0010386:	89 d8                	mov    eax,ebx
c0010388:	83 c4 14             	add    esp,0x14
c001038b:	5b                   	pop    ebx
c001038c:	c2 04 00             	ret    0x4
c001038f:	90                   	nop

c0010390 <Device::hibernate()>:
c0010390:	c3                   	ret    
c0010391:	90                   	nop

c0010392 <Device::wake()>:
c0010392:	c3                   	ret    
c0010393:	90                   	nop

c0010394 <Device::detect()>:
c0010394:	c3                   	ret    
c0010395:	90                   	nop

c0010396 <Device::disableLegacy()>:
c0010396:	c3                   	ret    
c0010397:	90                   	nop

c0010398 <Device::powerSaving(PowerSavingLevel)>:
c0010398:	c3                   	ret    
c0010399:	90                   	nop

c001039a <DriverlessDevice::close(int, int, void*)>:
c001039a:	31 c0                	xor    eax,eax
c001039c:	c3                   	ret    
c001039d:	90                   	nop

c001039e <DriverlessDevice::detect()>:
c001039e:	c3                   	ret    
c001039f:	90                   	nop

c00103a0 <DriverlessDevice::open(int, int, void*)>:
c00103a0:	83 ec 18             	sub    esp,0x18
c00103a3:	68 50 09 02 c0       	push   0xc0020950
c00103a8:	e8 a7 b8 ff ff       	call   c000bc54 <panic(char const*)>
c00103ad:	83 c8 ff             	or     eax,0xffffffff
c00103b0:	83 c4 1c             	add    esp,0x1c
c00103b3:	c3                   	ret    

c00103b4 <Device::~Device()>:
c00103b4:	ba 78 09 02 c0       	mov    edx,0xc0020978
c00103b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00103bd:	89 10                	mov    DWORD PTR [eax],edx
c00103bf:	90                   	nop
c00103c0:	c3                   	ret    
c00103c1:	90                   	nop

c00103c2 <Device::~Device()>:
c00103c2:	83 ec 0c             	sub    esp,0xc
c00103c5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00103c9:	e8 e6 ff ff ff       	call   c00103b4 <Device::~Device()>
c00103ce:	83 c4 04             	add    esp,0x4
c00103d1:	83 ec 08             	sub    esp,0x8
c00103d4:	68 58 01 00 00       	push   0x158
c00103d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103dd:	e8 35 ee ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c00103e2:	83 c4 10             	add    esp,0x10
c00103e5:	83 c4 0c             	add    esp,0xc
c00103e8:	c3                   	ret    
c00103e9:	90                   	nop

c00103ea <Device::findAndLoadDriver()>:
c00103ea:	c3                   	ret    
c00103eb:	90                   	nop

c00103ec <Device::preOpenPCI(PCIDeviceInfo)>:
c00103ec:	57                   	push   edi
c00103ed:	b9 09 00 00 00       	mov    ecx,0x9
c00103f2:	56                   	push   esi
c00103f3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00103f7:	8d 74 24 10          	lea    esi,[esp+0x10]
c00103fb:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0010405:	81 c7 18 01 00 00    	add    edi,0x118
c001040b:	fc                   	cld    
c001040c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001040e:	5e                   	pop    esi
c001040f:	5f                   	pop    edi
c0010410:	c3                   	ret    
c0010411:	90                   	nop

c0010412 <Device::preOpenACPI(void*, char*, char*)>:
c0010412:	56                   	push   esi
c0010413:	53                   	push   ebx
c0010414:	83 ec 08             	sub    esp,0x8
c0010417:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001041b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001041f:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0010429:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001042d:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0010433:	6a 1e                	push   0x1e
c0010435:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001043b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001043f:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0010445:	50                   	push   eax
c0010446:	e8 87 01 ff ff       	call   c00005d2 <memcpy>
c001044b:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c001044f:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010453:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c001045b:	83 c4 14             	add    esp,0x14
c001045e:	5b                   	pop    ebx
c001045f:	5e                   	pop    esi
c0010460:	e9 6d 01 ff ff       	jmp    c00005d2 <memcpy>
c0010465:	90                   	nop

c0010466 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010466:	55                   	push   ebp
c0010467:	57                   	push   edi
c0010468:	56                   	push   esi
c0010469:	53                   	push   ebx
c001046a:	83 ec 0c             	sub    esp,0xc
c001046d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010471:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010475:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010479:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001047d:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c0010482:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0010489:	75 0b                	jne    c0010496 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c001048b:	8b 00                	mov    eax,DWORD PTR [eax]
c001048d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0010491:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0010494:	eb 24                	jmp    c00104ba <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c0010496:	e8 cf 3a 00 00       	call   c0013f6a <thisCPU()>
c001049b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00104a1:	8b 10                	mov    edx,DWORD PTR [eax]
c00104a3:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00104a7:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00104ab:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00104af:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00104b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00104b7:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00104ba:	83 c4 0c             	add    esp,0xc
c00104bd:	5b                   	pop    ebx
c00104be:	5e                   	pop    esi
c00104bf:	5f                   	pop    edi
c00104c0:	5d                   	pop    ebp
c00104c1:	ff e0                	jmp    eax
c00104c3:	90                   	nop

c00104c4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00104c4:	57                   	push   edi
c00104c5:	56                   	push   esi
c00104c6:	53                   	push   ebx
c00104c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104cb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00104cf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00104d3:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00104d8:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00104df:	75 0b                	jne    c00104ec <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c00104e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00104e3:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00104e7:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00104ea:	eb 20                	jmp    c001050c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c00104ec:	e8 79 3a 00 00       	call   c0013f6a <thisCPU()>
c00104f1:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00104f7:	8b 10                	mov    edx,DWORD PTR [eax]
c00104f9:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00104fd:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010501:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010505:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010509:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c001050c:	5b                   	pop    ebx
c001050d:	5e                   	pop    esi
c001050e:	5f                   	pop    edi
c001050f:	ff e0                	jmp    eax
c0010511:	90                   	nop

c0010512 <Device::addChild(Device*)>:
c0010512:	53                   	push   ebx
c0010513:	83 ec 08             	sub    esp,0x8
c0010516:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001051a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001051e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0010524:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001052a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001052c:	85 d2                	test   edx,edx
c001052e:	74 04                	je     c0010534 <Device::addChild(Device*)+0x22>
c0010530:	89 d3                	mov    ebx,edx
c0010532:	eb f6                	jmp    c001052a <Device::addChild(Device*)+0x18>
c0010534:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010537:	83 ec 0c             	sub    esp,0xc
c001053a:	6a 08                	push   0x8
c001053c:	e8 c7 ec ff ff       	call   c000f208 <operator new(unsigned long)>
c0010541:	89 03                	mov    DWORD PTR [ebx],eax
c0010543:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010549:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010550:	83 c4 18             	add    esp,0x18
c0010553:	5b                   	pop    ebx
c0010554:	c3                   	ret    
c0010555:	90                   	nop

c0010556 <Device::removeAllChildren()>:
c0010556:	56                   	push   esi
c0010557:	53                   	push   ebx
c0010558:	52                   	push   edx
c0010559:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001055d:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0010563:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010566:	74 17                	je     c001057f <Device::removeAllChildren()+0x29>
c0010568:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001056b:	85 c0                	test   eax,eax
c001056d:	74 0c                	je     c001057b <Device::removeAllChildren()+0x25>
c001056f:	83 ec 0c             	sub    esp,0xc
c0010572:	8b 10                	mov    edx,DWORD PTR [eax]
c0010574:	50                   	push   eax
c0010575:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0010578:	83 c4 10             	add    esp,0x10
c001057b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001057d:	eb e4                	jmp    c0010563 <Device::removeAllChildren()+0xd>
c001057f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0010585:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001058b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0010591:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010598:	58                   	pop    eax
c0010599:	5b                   	pop    ebx
c001059a:	5e                   	pop    esi
c001059b:	c3                   	ret    

c001059c <Device::hibernateAll()>:
c001059c:	53                   	push   ebx
c001059d:	83 ec 14             	sub    esp,0x14
c00105a0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00105a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105a6:	53                   	push   ebx
c00105a7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00105aa:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00105b0:	83 c4 10             	add    esp,0x10
c00105b3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00105b6:	74 0f                	je     c00105c7 <Device::hibernateAll()+0x2b>
c00105b8:	83 ec 0c             	sub    esp,0xc
c00105bb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00105be:	e8 d9 ff ff ff       	call   c001059c <Device::hibernateAll()>
c00105c3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00105c5:	eb e9                	jmp    c00105b0 <Device::hibernateAll()+0x14>
c00105c7:	83 c4 08             	add    esp,0x8
c00105ca:	5b                   	pop    ebx
c00105cb:	c3                   	ret    

c00105cc <Device::wakeAll()>:
c00105cc:	53                   	push   ebx
c00105cd:	83 ec 14             	sub    esp,0x14
c00105d0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00105d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00105d6:	53                   	push   ebx
c00105d7:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00105da:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00105e0:	83 c4 10             	add    esp,0x10
c00105e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00105e6:	74 0f                	je     c00105f7 <Device::wakeAll()+0x2b>
c00105e8:	83 ec 0c             	sub    esp,0xc
c00105eb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00105ee:	e8 d9 ff ff ff       	call   c00105cc <Device::wakeAll()>
c00105f3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00105f5:	eb e9                	jmp    c00105e0 <Device::wakeAll()+0x14>
c00105f7:	83 c4 08             	add    esp,0x8
c00105fa:	5b                   	pop    ebx
c00105fb:	c3                   	ret    

c00105fc <Device::detectAll()>:
c00105fc:	53                   	push   ebx
c00105fd:	83 ec 14             	sub    esp,0x14
c0010600:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010604:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010606:	53                   	push   ebx
c0010607:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001060a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010610:	83 c4 10             	add    esp,0x10
c0010613:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010616:	74 0f                	je     c0010627 <Device::detectAll()+0x2b>
c0010618:	83 ec 0c             	sub    esp,0xc
c001061b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001061e:	e8 d9 ff ff ff       	call   c00105fc <Device::detectAll()>
c0010623:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010625:	eb e9                	jmp    c0010610 <Device::detectAll()+0x14>
c0010627:	83 c4 08             	add    esp,0x8
c001062a:	5b                   	pop    ebx
c001062b:	c3                   	ret    

c001062c <Device::disableLegacyAll()>:
c001062c:	53                   	push   ebx
c001062d:	83 ec 14             	sub    esp,0x14
c0010630:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010634:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010636:	53                   	push   ebx
c0010637:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001063a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010640:	83 c4 10             	add    esp,0x10
c0010643:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010646:	74 0f                	je     c0010657 <Device::disableLegacyAll()+0x2b>
c0010648:	83 ec 0c             	sub    esp,0xc
c001064b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001064e:	e8 d9 ff ff ff       	call   c001062c <Device::disableLegacyAll()>
c0010653:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010655:	eb e9                	jmp    c0010640 <Device::disableLegacyAll()+0x14>
c0010657:	83 c4 08             	add    esp,0x8
c001065a:	5b                   	pop    ebx
c001065b:	c3                   	ret    

c001065c <Device::loadDriversForAll()>:
c001065c:	53                   	push   ebx
c001065d:	83 ec 08             	sub    esp,0x8
c0010660:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010664:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001066a:	8b 18                	mov    ebx,DWORD PTR [eax]
c001066c:	85 db                	test   ebx,ebx
c001066e:	74 12                	je     c0010682 <Device::loadDriversForAll()+0x26>
c0010670:	83 ec 0c             	sub    esp,0xc
c0010673:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0010676:	e8 e1 ff ff ff       	call   c001065c <Device::loadDriversForAll()>
c001067b:	83 c4 10             	add    esp,0x10
c001067e:	89 d8                	mov    eax,ebx
c0010680:	eb e8                	jmp    c001066a <Device::loadDriversForAll()+0xe>
c0010682:	83 c4 08             	add    esp,0x8
c0010685:	5b                   	pop    ebx
c0010686:	c3                   	ret    
c0010687:	90                   	nop

c0010688 <Device::closeAll()>:
c0010688:	53                   	push   ebx
c0010689:	83 ec 08             	sub    esp,0x8
c001068c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010690:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010692:	6a 00                	push   0x0
c0010694:	6a 00                	push   0x0
c0010696:	6a 00                	push   0x0
c0010698:	53                   	push   ebx
c0010699:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001069c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106a2:	83 c4 10             	add    esp,0x10
c00106a5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106a8:	74 0f                	je     c00106b9 <Device::closeAll()+0x31>
c00106aa:	83 ec 0c             	sub    esp,0xc
c00106ad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106b0:	e8 d3 ff ff ff       	call   c0010688 <Device::closeAll()>
c00106b5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106b7:	eb e9                	jmp    c00106a2 <Device::closeAll()+0x1a>
c00106b9:	83 c4 08             	add    esp,0x8
c00106bc:	5b                   	pop    ebx
c00106bd:	c3                   	ret    

c00106be <Device::powerSavingAll(PowerSavingLevel)>:
c00106be:	56                   	push   esi
c00106bf:	53                   	push   ebx
c00106c0:	83 ec 0c             	sub    esp,0xc
c00106c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00106c7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00106cb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106cd:	56                   	push   esi
c00106ce:	53                   	push   ebx
c00106cf:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00106d2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106d8:	83 c4 10             	add    esp,0x10
c00106db:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106de:	74 0f                	je     c00106ef <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00106e0:	52                   	push   edx
c00106e1:	52                   	push   edx
c00106e2:	56                   	push   esi
c00106e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106e6:	e8 d3 ff ff ff       	call   c00106be <Device::powerSavingAll(PowerSavingLevel)>
c00106eb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106ed:	eb e9                	jmp    c00106d8 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00106ef:	58                   	pop    eax
c00106f0:	5b                   	pop    ebx
c00106f1:	5e                   	pop    esi
c00106f2:	c3                   	ret    
c00106f3:	90                   	nop

c00106f4 <Device::setName(char const*)>:
c00106f4:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00106fc:	e9 a6 ff fe ff       	jmp    c00006a7 <strcpy>
c0010701:	90                   	nop

c0010702 <Device::Device(char const*)>:
c0010702:	83 ec 0c             	sub    esp,0xc
c0010705:	ba 78 09 02 c0       	mov    edx,0xc0020978
c001070a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001070e:	89 10                	mov    DWORD PTR [eax],edx
c0010710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010714:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c001071e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010722:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c001072c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010730:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001073a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001073e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0010748:	83 ec 08             	sub    esp,0x8
c001074b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001074f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010753:	e8 9c ff ff ff       	call   c00106f4 <Device::setName(char const*)>
c0010758:	83 c4 10             	add    esp,0x10
c001075b:	83 ec 0c             	sub    esp,0xc
c001075e:	6a 08                	push   0x8
c0010760:	e8 a3 ea ff ff       	call   c000f208 <operator new(unsigned long)>
c0010765:	83 c4 10             	add    esp,0x10
c0010768:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001076e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010775:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010779:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001077f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010783:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010789:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001078f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010793:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0010799:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107a4:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00107ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107af:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00107b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107ba:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00107c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107c8:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00107d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107d6:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00107e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107e4:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00107ee:	90                   	nop
c00107ef:	83 c4 0c             	add    esp,0xc
c00107f2:	c3                   	ret    
c00107f3:	90                   	nop

c00107f4 <Device::getName()>:
c00107f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00107f8:	05 d0 00 00 00       	add    eax,0xd0
c00107fd:	c3                   	ret    

c00107fe <DriverlessDevice::DriverlessDevice(char const*)>:
c00107fe:	83 ec 0c             	sub    esp,0xc
c0010801:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010805:	83 ec 08             	sub    esp,0x8
c0010808:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001080c:	50                   	push   eax
c001080d:	e8 f0 fe ff ff       	call   c0010702 <Device::Device(char const*)>
c0010812:	83 c4 10             	add    esp,0x10
c0010815:	ba a4 09 02 c0       	mov    edx,0xc00209a4
c001081a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001081e:	89 10                	mov    DWORD PTR [eax],edx
c0010820:	90                   	nop
c0010821:	83 c4 0c             	add    esp,0xc
c0010824:	c3                   	ret    
c0010825:	90                   	nop

c0010826 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0010826:	57                   	push   edi
c0010827:	56                   	push   esi
c0010828:	53                   	push   ebx
c0010829:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001082d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010831:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010835:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001083b:	75 0c                	jne    c0010849 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001083d:	52                   	push   edx
c001083e:	52                   	push   edx
c001083f:	53                   	push   ebx
c0010840:	56                   	push   esi
c0010841:	e8 30 de 00 00       	call   c001e676 <LinkedList<Device>::addElement(Device*)>
c0010846:	83 c4 10             	add    esp,0x10
c0010849:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001084f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010852:	74 12                	je     c0010866 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0010854:	50                   	push   eax
c0010855:	57                   	push   edi
c0010856:	56                   	push   esi
c0010857:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001085a:	e8 c7 ff ff ff       	call   c0010826 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001085f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010861:	83 c4 10             	add    esp,0x10
c0010864:	eb e9                	jmp    c001084f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0010866:	5b                   	pop    ebx
c0010867:	5e                   	pop    esi
c0010868:	5f                   	pop    edi
c0010869:	c3                   	ret    

c001086a <getDevicesOfType(DeviceType)>:
c001086a:	53                   	push   ebx
c001086b:	83 ec 14             	sub    esp,0x14
c001086e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010872:	53                   	push   ebx
c0010873:	e8 da de 00 00       	call   c001e752 <LinkedList<Device>::LinkedList()>
c0010878:	83 c4 0c             	add    esp,0xc
c001087b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001087f:	53                   	push   ebx
c0010880:	ff 35 c8 2e 02 c0    	push   DWORD PTR ds:0xc0022ec8
c0010886:	e8 9b ff ff ff       	call   c0010826 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001088b:	89 d8                	mov    eax,ebx
c001088d:	83 c4 18             	add    esp,0x18
c0010890:	5b                   	pop    ebx
c0010891:	c2 04 00             	ret    0x4

c0010894 <HardDiskController::HardDiskController(char const*)>:
c0010894:	83 ec 0c             	sub    esp,0xc
c0010897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001089b:	83 ec 08             	sub    esp,0x8
c001089e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108a2:	50                   	push   eax
c00108a3:	e8 5a fe ff ff       	call   c0010702 <Device::Device(char const*)>
c00108a8:	83 c4 10             	add    esp,0x10
c00108ab:	ba d0 09 02 c0       	mov    edx,0xc00209d0
c00108b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b4:	89 10                	mov    DWORD PTR [eax],edx
c00108b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ba:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00108c4:	90                   	nop
c00108c5:	83 c4 0c             	add    esp,0xc
c00108c8:	c3                   	ret    
c00108c9:	90                   	nop

c00108ca <HardDiskController::~HardDiskController()>:
c00108ca:	83 ec 0c             	sub    esp,0xc
c00108cd:	ba d0 09 02 c0       	mov    edx,0xc00209d0
c00108d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108d6:	89 10                	mov    DWORD PTR [eax],edx
c00108d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108dc:	83 ec 0c             	sub    esp,0xc
c00108df:	50                   	push   eax
c00108e0:	e8 cf fa ff ff       	call   c00103b4 <Device::~Device()>
c00108e5:	83 c4 10             	add    esp,0x10
c00108e8:	90                   	nop
c00108e9:	83 c4 0c             	add    esp,0xc
c00108ec:	c3                   	ret    
c00108ed:	90                   	nop

c00108ee <HardDiskController::~HardDiskController()>:
c00108ee:	83 ec 0c             	sub    esp,0xc
c00108f1:	83 ec 0c             	sub    esp,0xc
c00108f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108f8:	e8 cd ff ff ff       	call   c00108ca <HardDiskController::~HardDiskController()>
c00108fd:	83 c4 10             	add    esp,0x10
c0010900:	83 ec 08             	sub    esp,0x8
c0010903:	68 58 01 00 00       	push   0x158
c0010908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001090c:	e8 06 e9 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c0010911:	83 c4 10             	add    esp,0x10
c0010914:	83 c4 0c             	add    esp,0xc
c0010917:	c3                   	ret    

c0010918 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0010918:	83 ec 0c             	sub    esp,0xc
c001091b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001091f:	83 ec 08             	sub    esp,0x8
c0010922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010926:	50                   	push   eax
c0010927:	e8 d6 fd ff ff       	call   c0010702 <Device::Device(char const*)>
c001092c:	83 c4 10             	add    esp,0x10
c001092f:	ba fc 09 02 c0       	mov    edx,0xc00209fc
c0010934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010938:	89 10                	mov    DWORD PTR [eax],edx
c001093a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001093e:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010945:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010949:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0010950:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010954:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c001095e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010962:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010966:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001096c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010970:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001097a:	90                   	nop
c001097b:	83 c4 0c             	add    esp,0xc
c001097e:	c3                   	ret    
c001097f:	90                   	nop

c0010980 <PhysicalDisk::startCache()>:
c0010980:	56                   	push   esi
c0010981:	53                   	push   ebx
c0010982:	83 ec 10             	sub    esp,0x10
c0010985:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010989:	6a 30                	push   0x30
c001098b:	e8 78 e8 ff ff       	call   c000f208 <operator new(unsigned long)>
c0010990:	89 c6                	mov    esi,eax
c0010992:	58                   	pop    eax
c0010993:	5a                   	pop    edx
c0010994:	53                   	push   ebx
c0010995:	56                   	push   esi
c0010996:	e8 bb 1d 00 00       	call   c0012756 <VCache::VCache(PhysicalDisk*)>
c001099b:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00109a1:	83 c4 14             	add    esp,0x14
c00109a4:	5b                   	pop    ebx
c00109a5:	5e                   	pop    esi
c00109a6:	c3                   	ret    
c00109a7:	90                   	nop

c00109a8 <PhysicalDisk::~PhysicalDisk()>:
c00109a8:	83 ec 0c             	sub    esp,0xc
c00109ab:	ba fc 09 02 c0       	mov    edx,0xc00209fc
c00109b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109b4:	89 10                	mov    DWORD PTR [eax],edx
c00109b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ba:	83 ec 0c             	sub    esp,0xc
c00109bd:	50                   	push   eax
c00109be:	e8 f1 f9 ff ff       	call   c00103b4 <Device::~Device()>
c00109c3:	83 c4 10             	add    esp,0x10
c00109c6:	90                   	nop
c00109c7:	83 c4 0c             	add    esp,0xc
c00109ca:	c3                   	ret    
c00109cb:	90                   	nop

c00109cc <PhysicalDisk::~PhysicalDisk()>:
c00109cc:	83 ec 0c             	sub    esp,0xc
c00109cf:	83 ec 0c             	sub    esp,0xc
c00109d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109d6:	e8 cd ff ff ff       	call   c00109a8 <PhysicalDisk::~PhysicalDisk()>
c00109db:	83 c4 10             	add    esp,0x10
c00109de:	83 ec 08             	sub    esp,0x8
c00109e1:	68 6c 01 00 00       	push   0x16c
c00109e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109ea:	e8 28 e8 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c00109ef:	83 c4 10             	add    esp,0x10
c00109f2:	83 c4 0c             	add    esp,0xc
c00109f5:	c3                   	ret    

c00109f6 <FPU::FPU(char const*)>:
c00109f6:	83 ec 0c             	sub    esp,0xc
c00109f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109fd:	83 ec 08             	sub    esp,0x8
c0010a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a04:	50                   	push   eax
c0010a05:	e8 f8 fc ff ff       	call   c0010702 <Device::Device(char const*)>
c0010a0a:	83 c4 10             	add    esp,0x10
c0010a0d:	ba 38 0a 02 c0       	mov    edx,0xc0020a38
c0010a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a16:	89 10                	mov    DWORD PTR [eax],edx
c0010a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a1c:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0010a26:	90                   	nop
c0010a27:	83 c4 0c             	add    esp,0xc
c0010a2a:	c3                   	ret    
c0010a2b:	90                   	nop

c0010a2c <FPU::~FPU()>:
c0010a2c:	83 ec 0c             	sub    esp,0xc
c0010a2f:	ba 38 0a 02 c0       	mov    edx,0xc0020a38
c0010a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a38:	89 10                	mov    DWORD PTR [eax],edx
c0010a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a3e:	83 ec 0c             	sub    esp,0xc
c0010a41:	50                   	push   eax
c0010a42:	e8 6d f9 ff ff       	call   c00103b4 <Device::~Device()>
c0010a47:	83 c4 10             	add    esp,0x10
c0010a4a:	90                   	nop
c0010a4b:	83 c4 0c             	add    esp,0xc
c0010a4e:	c3                   	ret    
c0010a4f:	90                   	nop

c0010a50 <FPU::~FPU()>:
c0010a50:	83 ec 0c             	sub    esp,0xc
c0010a53:	83 ec 0c             	sub    esp,0xc
c0010a56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a5a:	e8 cd ff ff ff       	call   c0010a2c <FPU::~FPU()>
c0010a5f:	83 c4 10             	add    esp,0x10
c0010a62:	83 ec 08             	sub    esp,0x8
c0010a65:	68 58 01 00 00       	push   0x158
c0010a6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a6e:	e8 a4 e7 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c0010a73:	83 c4 10             	add    esp,0x10
c0010a76:	83 c4 0c             	add    esp,0xc
c0010a79:	c3                   	ret    

c0010a7a <setupFPU()>:
c0010a7a:	53                   	push   ebx
c0010a7b:	83 ec 08             	sub    esp,0x8
c0010a7e:	a1 c8 2e 02 c0       	mov    eax,ds:0xc0022ec8
c0010a83:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010a8a:	74 19                	je     c0010aa5 <setupFPU()+0x2b>
c0010a8c:	83 ec 0c             	sub    esp,0xc
c0010a8f:	68 58 01 00 00       	push   0x158
c0010a94:	e8 6f e7 ff ff       	call   c000f208 <operator new(unsigned long)>
c0010a99:	89 c3                	mov    ebx,eax
c0010a9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a9e:	e8 f9 c2 00 00       	call   c001cd9c <AVX::AVX()>
c0010aa3:	eb 5b                	jmp    c0010b00 <setupFPU()+0x86>
c0010aa5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010aab:	84 c0                	test   al,al
c0010aad:	79 19                	jns    c0010ac8 <setupFPU()+0x4e>
c0010aaf:	83 ec 0c             	sub    esp,0xc
c0010ab2:	68 58 01 00 00       	push   0x158
c0010ab7:	e8 4c e7 ff ff       	call   c000f208 <operator new(unsigned long)>
c0010abc:	89 c3                	mov    ebx,eax
c0010abe:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ac1:	e8 fc c3 00 00       	call   c001cec2 <SSE::SSE()>
c0010ac6:	eb 38                	jmp    c0010b00 <setupFPU()+0x86>
c0010ac8:	a8 20                	test   al,0x20
c0010aca:	74 19                	je     c0010ae5 <setupFPU()+0x6b>
c0010acc:	83 ec 0c             	sub    esp,0xc
c0010acf:	68 58 01 00 00       	push   0x158
c0010ad4:	e8 2f e7 ff ff       	call   c000f208 <operator new(unsigned long)>
c0010ad9:	89 c3                	mov    ebx,eax
c0010adb:	89 04 24             	mov    DWORD PTR [esp],eax
c0010ade:	e8 49 c3 00 00       	call   c001ce2c <MMX::MMX()>
c0010ae3:	eb 1b                	jmp    c0010b00 <setupFPU()+0x86>
c0010ae5:	a8 10                	test   al,0x10
c0010ae7:	74 1c                	je     c0010b05 <setupFPU()+0x8b>
c0010ae9:	83 ec 0c             	sub    esp,0xc
c0010aec:	68 58 01 00 00       	push   0x158
c0010af1:	e8 12 e7 ff ff       	call   c000f208 <operator new(unsigned long)>
c0010af6:	89 c3                	mov    ebx,eax
c0010af8:	89 04 24             	mov    DWORD PTR [esp],eax
c0010afb:	e8 50 c4 00 00       	call   c001cf50 <x87::x87()>
c0010b00:	83 c4 10             	add    esp,0x10
c0010b03:	eb 12                	jmp    c0010b17 <setupFPU()+0x9d>
c0010b05:	83 ec 0c             	sub    esp,0xc
c0010b08:	31 db                	xor    ebx,ebx
c0010b0a:	68 28 0a 02 c0       	push   0xc0020a28
c0010b0f:	e8 40 b1 ff ff       	call   c000bc54 <panic(char const*)>
c0010b14:	83 c4 10             	add    esp,0x10
c0010b17:	89 d8                	mov    eax,ebx
c0010b19:	83 c4 08             	add    esp,0x8
c0010b1c:	5b                   	pop    ebx
c0010b1d:	c3                   	ret    

c0010b1e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010b1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010b22:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010b26:	c1 e0 04             	shl    eax,0x4
c0010b29:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0010b2d:	8d 50 10             	lea    edx,[eax+0x10]
c0010b30:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010b36:	74 08                	je     c0010b40 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0010b38:	83 c0 04             	add    eax,0x4
c0010b3b:	39 d0                	cmp    eax,edx
c0010b3d:	75 f1                	jne    c0010b30 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010b3f:	c3                   	ret    
c0010b40:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010b4a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010b54:	eb e2                	jmp    c0010b38 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0010b56 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010b56:	57                   	push   edi
c0010b57:	31 c0                	xor    eax,eax
c0010b59:	56                   	push   esi
c0010b5a:	53                   	push   ebx
c0010b5b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010b5f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010b63:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010b67:	89 da                	mov    edx,ebx
c0010b69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010b6d:	c1 e2 04             	shl    edx,0x4
c0010b70:	01 ca                	add    edx,ecx
c0010b72:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010b7a:	74 16                	je     c0010b92 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010b7c:	40                   	inc    eax
c0010b7d:	83 f8 04             	cmp    eax,0x4
c0010b80:	75 f0                	jne    c0010b72 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010b82:	c7 44 24 10 68 0a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020a68
c0010b8a:	5b                   	pop    ebx
c0010b8b:	5e                   	pop    esi
c0010b8c:	5f                   	pop    edi
c0010b8d:	e9 c2 b0 ff ff       	jmp    c000bc54 <panic(char const*)>
c0010b92:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010b95:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010b98:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010b9e:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010ba4:	5b                   	pop    ebx
c0010ba5:	5e                   	pop    esi
c0010ba6:	5f                   	pop    edi
c0010ba7:	c3                   	ret    

c0010ba8 <doubleFault(regs*, void*)>:
c0010ba8:	c7 44 24 04 98 0b 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020b98
c0010bb0:	e9 9f b0 ff ff       	jmp    c000bc54 <panic(char const*)>
c0010bb5:	90                   	nop

c0010bb6 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010bb6:	56                   	push   esi
c0010bb7:	53                   	push   ebx
c0010bb8:	50                   	push   eax
c0010bb9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010bbd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010bc1:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010bc6:	75 35                	jne    c0010bfd <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0010bc8:	8d 43 20             	lea    eax,[ebx+0x20]
c0010bcb:	31 d2                	xor    edx,edx
c0010bcd:	89 c1                	mov    ecx,eax
c0010bcf:	c1 e1 04             	shl    ecx,0x4
c0010bd2:	01 f1                	add    ecx,esi
c0010bd4:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010bdc:	74 3e                	je     c0010c1c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0010bde:	42                   	inc    edx
c0010bdf:	83 fa 04             	cmp    edx,0x4
c0010be2:	75 f0                	jne    c0010bd4 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010be4:	83 ec 0c             	sub    esp,0xc
c0010be7:	68 dc 0a 02 c0       	push   0xc0020adc
c0010bec:	e8 63 b0 ff ff       	call   c000bc54 <panic(char const*)>
c0010bf1:	83 c4 10             	add    esp,0x10
c0010bf4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010bf9:	5a                   	pop    edx
c0010bfa:	5b                   	pop    ebx
c0010bfb:	5e                   	pop    esi
c0010bfc:	c3                   	ret    
c0010bfd:	83 ec 0c             	sub    esp,0xc
c0010c00:	56                   	push   esi
c0010c01:	e8 ee fb ff ff       	call   c00107f4 <Device::getName()>
c0010c06:	83 c4 10             	add    esp,0x10
c0010c09:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010c0c:	75 ba                	jne    c0010bc8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c0e:	83 fb 0f             	cmp    ebx,0xf
c0010c11:	7f 29                	jg     c0010c3c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010c13:	0f b6 9b 20 26 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd9e0]
c0010c1a:	eb ac                	jmp    c0010bc8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c1c:	8d 04 82             	lea    eax,[edx+eax*4]
c0010c1f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c23:	8d 04 86             	lea    eax,[esi+eax*4]
c0010c26:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010c2c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010c30:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010c36:	89 d8                	mov    eax,ebx
c0010c38:	5a                   	pop    edx
c0010c39:	5b                   	pop    ebx
c0010c3a:	5e                   	pop    esi
c0010c3b:	c3                   	ret    
c0010c3c:	83 ec 0c             	sub    esp,0xc
c0010c3f:	68 a4 0a 02 c0       	push   0xc0020aa4
c0010c44:	e8 0b b0 ff ff       	call   c000bc54 <panic(char const*)>
c0010c49:	83 c4 10             	add    esp,0x10
c0010c4c:	e9 77 ff ff ff       	jmp    c0010bc8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010c51:	90                   	nop

c0010c52 <InterruptController::clearAllHandlers(int, bool)>:
c0010c52:	56                   	push   esi
c0010c53:	53                   	push   ebx
c0010c54:	52                   	push   edx
c0010c55:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c59:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010c5d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010c62:	75 61                	jne    c0010cc5 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010c64:	8d 46 20             	lea    eax,[esi+0x20]
c0010c67:	c1 e6 04             	shl    esi,0x4
c0010c6a:	c1 e0 04             	shl    eax,0x4
c0010c6d:	01 de                	add    esi,ebx
c0010c6f:	01 d8                	add    eax,ebx
c0010c71:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010c7b:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010c85:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010c8f:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010c99:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010ca3:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010cad:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010cb7:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010cc1:	58                   	pop    eax
c0010cc2:	5b                   	pop    ebx
c0010cc3:	5e                   	pop    esi
c0010cc4:	c3                   	ret    
c0010cc5:	83 ec 0c             	sub    esp,0xc
c0010cc8:	53                   	push   ebx
c0010cc9:	e8 26 fb ff ff       	call   c00107f4 <Device::getName()>
c0010cce:	83 c4 10             	add    esp,0x10
c0010cd1:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010cd4:	75 8e                	jne    c0010c64 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010cd6:	83 fe 0f             	cmp    esi,0xf
c0010cd9:	7f 09                	jg     c0010ce4 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0010cdb:	0f b6 b6 20 26 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdd9e0]
c0010ce2:	eb 80                	jmp    c0010c64 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010ce4:	83 ec 0c             	sub    esp,0xc
c0010ce7:	68 18 0b 02 c0       	push   0xc0020b18
c0010cec:	e8 63 af ff ff       	call   c000bc54 <panic(char const*)>
c0010cf1:	83 c4 10             	add    esp,0x10
c0010cf4:	e9 6b ff ff ff       	jmp    c0010c64 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010cf9:	90                   	nop

c0010cfa <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010cfa:	56                   	push   esi
c0010cfb:	53                   	push   ebx
c0010cfc:	52                   	push   edx
c0010cfd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010d01:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010d05:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010d0a:	75 3a                	jne    c0010d46 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010d0c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d10:	8d 50 20             	lea    edx,[eax+0x20]
c0010d13:	c1 e2 04             	shl    edx,0x4
c0010d16:	8d 04 16             	lea    eax,[esi+edx*1]
c0010d19:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010d1d:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010d23:	74 0b                	je     c0010d30 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010d25:	83 c0 04             	add    eax,0x4
c0010d28:	39 d0                	cmp    eax,edx
c0010d2a:	75 f1                	jne    c0010d1d <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010d2c:	58                   	pop    eax
c0010d2d:	5b                   	pop    ebx
c0010d2e:	5e                   	pop    esi
c0010d2f:	c3                   	ret    
c0010d30:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010d3a:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010d44:	eb df                	jmp    c0010d25 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010d46:	83 ec 0c             	sub    esp,0xc
c0010d49:	56                   	push   esi
c0010d4a:	e8 a5 fa ff ff       	call   c00107f4 <Device::getName()>
c0010d4f:	83 c4 10             	add    esp,0x10
c0010d52:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010d55:	75 b5                	jne    c0010d0c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010d57:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010d5c:	7f 11                	jg     c0010d6f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010d5e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010d62:	0f b6 80 20 26 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdd9e0]
c0010d69:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010d6d:	eb 9d                	jmp    c0010d0c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010d6f:	83 ec 0c             	sub    esp,0xc
c0010d72:	68 18 0b 02 c0       	push   0xc0020b18
c0010d77:	e8 d8 ae ff ff       	call   c000bc54 <panic(char const*)>
c0010d7c:	83 c4 10             	add    esp,0x10
c0010d7f:	eb 8b                	jmp    c0010d0c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010d81 <nmiHandler(regs*, void*)>:
c0010d81:	a1 c8 2e 02 c0       	mov    eax,ds:0xc0022ec8
c0010d86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010d8a:	e9 cd a5 ff ff       	jmp    c000b35c <Computer::handleNMI()>

c0010d8f <int_handler>:
c0010d8f:	55                   	push   ebp
c0010d90:	57                   	push   edi
c0010d91:	56                   	push   esi
c0010d92:	53                   	push   ebx
c0010d93:	83 ec 0c             	sub    esp,0xc
c0010d96:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010d9a:	80 3d de 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022ede,0x0
c0010da1:	74 0b                	je     c0010dae <int_handler+0x1f>
c0010da3:	fa                   	cli    
c0010da4:	f4                   	hlt    
c0010da5:	80 3d de 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022ede,0x0
c0010dac:	75 f5                	jne    c0010da3 <int_handler+0x14>
c0010dae:	e8 b7 31 00 00       	call   c0013f6a <thisCPU()>
c0010db3:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010db6:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010dbc:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010dbf:	83 f8 17             	cmp    eax,0x17
c0010dc2:	77 13                	ja     c0010dd7 <int_handler+0x48>
c0010dc4:	83 ec 08             	sub    esp,0x8
c0010dc7:	8b 17                	mov    edx,DWORD PTR [edi]
c0010dc9:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010dcc:	0f b6 c0             	movzx  eax,al
c0010dcf:	50                   	push   eax
c0010dd0:	57                   	push   edi
c0010dd1:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010dd4:	83 c4 10             	add    esp,0x10
c0010dd7:	83 c3 15             	add    ebx,0x15
c0010dda:	c1 e3 04             	shl    ebx,0x4
c0010ddd:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010de1:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010de8:	31 db                	xor    ebx,ebx
c0010dea:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010dee:	85 c0                	test   eax,eax
c0010df0:	74 13                	je     c0010e05 <int_handler+0x76>
c0010df2:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010df5:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010df9:	74 1c                	je     c0010e17 <int_handler+0x88>
c0010dfb:	83 ec 08             	sub    esp,0x8
c0010dfe:	52                   	push   edx
c0010dff:	56                   	push   esi
c0010e00:	ff d0                	call   eax
c0010e02:	83 c4 10             	add    esp,0x10
c0010e05:	43                   	inc    ebx
c0010e06:	83 fb 04             	cmp    ebx,0x4
c0010e09:	75 df                	jne    c0010dea <int_handler+0x5b>
c0010e0b:	83 c4 0c             	add    esp,0xc
c0010e0e:	31 c0                	xor    eax,eax
c0010e10:	5b                   	pop    ebx
c0010e11:	31 d2                	xor    edx,edx
c0010e13:	5e                   	pop    esi
c0010e14:	5f                   	pop    edi
c0010e15:	5d                   	pop    ebp
c0010e16:	c3                   	ret    
c0010e17:	83 ec 08             	sub    esp,0x8
c0010e1a:	52                   	push   edx
c0010e1b:	56                   	push   esi
c0010e1c:	ff d0                	call   eax
c0010e1e:	83 c4 10             	add    esp,0x10
c0010e21:	83 c4 0c             	add    esp,0xc
c0010e24:	5b                   	pop    ebx
c0010e25:	5e                   	pop    esi
c0010e26:	5f                   	pop    edi
c0010e27:	5d                   	pop    ebp
c0010e28:	c3                   	ret    
c0010e29:	90                   	nop

c0010e2a <InterruptController::InterruptController(char const*)>:
c0010e2a:	83 ec 1c             	sub    esp,0x1c
c0010e2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e31:	83 ec 08             	sub    esp,0x8
c0010e34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010e38:	50                   	push   eax
c0010e39:	e8 c4 f8 ff ff       	call   c0010702 <Device::Device(char const*)>
c0010e3e:	83 c4 10             	add    esp,0x10
c0010e41:	ba 10 0d 02 c0       	mov    edx,0xc0020d10
c0010e46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e4a:	89 10                	mov    DWORD PTR [eax],edx
c0010e4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e50:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010e5a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010e62:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010e6a:	7f 5e                	jg     c0010eca <InterruptController::InterruptController(char const*)+0xa0>
c0010e6c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010e74:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010e79:	7f 49                	jg     c0010ec4 <InterruptController::InterruptController(char const*)+0x9a>
c0010e7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010e83:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010e8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010e8e:	01 ca                	add    edx,ecx
c0010e90:	83 c2 54             	add    edx,0x54
c0010e93:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010e9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e9f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010ea3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010eaa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010eae:	01 ca                	add    edx,ecx
c0010eb0:	81 c2 54 04 00 00    	add    edx,0x454
c0010eb6:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010ebe:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010ec2:	eb b0                	jmp    c0010e74 <InterruptController::InterruptController(char const*)+0x4a>
c0010ec4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0010ec8:	eb 98                	jmp    c0010e62 <InterruptController::InterruptController(char const*)+0x38>
c0010eca:	90                   	nop
c0010ecb:	83 c4 1c             	add    esp,0x1c
c0010ece:	c3                   	ret    
c0010ecf:	90                   	nop

c0010ed0 <InterruptController::~InterruptController()>:
c0010ed0:	83 ec 0c             	sub    esp,0xc
c0010ed3:	ba 10 0d 02 c0       	mov    edx,0xc0020d10
c0010ed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010edc:	89 10                	mov    DWORD PTR [eax],edx
c0010ede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ee2:	83 ec 0c             	sub    esp,0xc
c0010ee5:	50                   	push   eax
c0010ee6:	e8 c9 f4 ff ff       	call   c00103b4 <Device::~Device()>
c0010eeb:	83 c4 10             	add    esp,0x10
c0010eee:	90                   	nop
c0010eef:	83 c4 0c             	add    esp,0xc
c0010ef2:	c3                   	ret    
c0010ef3:	90                   	nop

c0010ef4 <InterruptController::~InterruptController()>:
c0010ef4:	83 ec 0c             	sub    esp,0xc
c0010ef7:	83 ec 0c             	sub    esp,0xc
c0010efa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010efe:	e8 cd ff ff ff       	call   c0010ed0 <InterruptController::~InterruptController()>
c0010f03:	83 c4 10             	add    esp,0x10
c0010f06:	83 ec 08             	sub    esp,0x8
c0010f09:	68 58 21 00 00       	push   0x2158
c0010f0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f12:	e8 00 e3 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c0010f17:	83 c4 10             	add    esp,0x10
c0010f1a:	83 c4 0c             	add    esp,0xc
c0010f1d:	c3                   	ret    

c0010f1e <displayDebugInfo(regs*)>:
c0010f1e:	55                   	push   ebp
c0010f1f:	57                   	push   edi
c0010f20:	56                   	push   esi
c0010f21:	53                   	push   ebx
c0010f22:	83 ec 24             	sub    esp,0x24
c0010f25:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0010f29:	0f 20 c2             	mov    edx,cr0
c0010f2c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0010f30:	0f 20 d7             	mov    edi,cr2
c0010f33:	0f 20 de             	mov    esi,cr3
c0010f36:	0f 20 e5             	mov    ebp,cr4
c0010f39:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0010f3c:	68 a5 0b 02 c0       	push   0xc0020ba5
c0010f41:	e8 f0 ab ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0010f46:	58                   	pop    eax
c0010f47:	5a                   	pop    edx
c0010f48:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010f4b:	68 b0 0b 02 c0       	push   0xc0020bb0
c0010f50:	e8 e1 ab ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0010f55:	59                   	pop    ecx
c0010f56:	58                   	pop    eax
c0010f57:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010f5a:	68 bb 0b 02 c0       	push   0xc0020bbb
c0010f5f:	e8 d2 ab ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0010f64:	58                   	pop    eax
c0010f65:	5a                   	pop    edx
c0010f66:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010f69:	68 c6 0b 02 c0       	push   0xc0020bc6
c0010f6e:	e8 c3 ab ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0010f73:	59                   	pop    ecx
c0010f74:	58                   	pop    eax
c0010f75:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010f78:	68 d1 0b 02 c0       	push   0xc0020bd1
c0010f7d:	e8 b4 ab ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0010f82:	58                   	pop    eax
c0010f83:	5a                   	pop    edx
c0010f84:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0010f87:	68 dc 0b 02 c0       	push   0xc0020bdc
c0010f8c:	e8 a5 ab ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0010f91:	59                   	pop    ecx
c0010f92:	58                   	pop    eax
c0010f93:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0010f96:	68 f6 0b 02 c0       	push   0xc0020bf6
c0010f9b:	e8 96 ab ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0010fa0:	58                   	pop    eax
c0010fa1:	5a                   	pop    edx
c0010fa2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010fa5:	68 e7 0b 02 c0       	push   0xc0020be7
c0010faa:	e8 87 ab ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0010faf:	59                   	pop    ecx
c0010fb0:	58                   	pop    eax
c0010fb1:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0010fb4:	68 f2 0b 02 c0       	push   0xc0020bf2
c0010fb9:	e8 78 ab ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0010fbe:	58                   	pop    eax
c0010fbf:	5a                   	pop    edx
c0010fc0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0010fc3:	68 01 0c 02 c0       	push   0xc0020c01
c0010fc8:	e8 69 ab ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0010fcd:	59                   	pop    ecx
c0010fce:	58                   	pop    eax
c0010fcf:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010fd2:	68 0c 0c 02 c0       	push   0xc0020c0c
c0010fd7:	e8 5a ab ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0010fdc:	58                   	pop    eax
c0010fdd:	5a                   	pop    edx
c0010fde:	57                   	push   edi
c0010fdf:	68 17 0c 02 c0       	push   0xc0020c17
c0010fe4:	e8 4d ab ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0010fe9:	59                   	pop    ecx
c0010fea:	58                   	pop    eax
c0010feb:	56                   	push   esi
c0010fec:	68 22 0c 02 c0       	push   0xc0020c22
c0010ff1:	e8 40 ab ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0010ff6:	58                   	pop    eax
c0010ff7:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c0010ffc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011002:	e8 d8 c3 ff ff       	call   c000d3df <setActiveTerminal(VgaText*)>
c0011007:	58                   	pop    eax
c0011008:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001100b:	5a                   	pop    edx
c001100c:	c1 e0 05             	shl    eax,0x5
c001100f:	05 80 23 02 c0       	add    eax,0xc0022380
c0011014:	50                   	push   eax
c0011015:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c001101a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011020:	e8 d9 c7 ff ff       	call   c000d7fe <VgaText::puts(char const*)>
c0011025:	59                   	pop    ecx
c0011026:	58                   	pop    eax
c0011027:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c001102c:	68 2d 0c 02 c0       	push   0xc0020c2d
c0011031:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011037:	e8 c2 c7 ff ff       	call   c000d7fe <VgaText::puts(char const*)>
c001103c:	58                   	pop    eax
c001103d:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c0011042:	5a                   	pop    edx
c0011043:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0011046:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001104c:	e8 d3 c7 ff ff       	call   c000d824 <VgaText::putx(unsigned int)>
c0011051:	59                   	pop    ecx
c0011052:	58                   	pop    eax
c0011053:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c0011058:	68 35 0c 02 c0       	push   0xc0020c35
c001105d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011063:	e8 96 c7 ff ff       	call   c000d7fe <VgaText::puts(char const*)>
c0011068:	58                   	pop    eax
c0011069:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c001106e:	5a                   	pop    edx
c001106f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0011072:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011078:	e8 a7 c7 ff ff       	call   c000d824 <VgaText::putx(unsigned int)>
c001107d:	59                   	pop    ecx
c001107e:	58                   	pop    eax
c001107f:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c0011084:	68 3d 0c 02 c0       	push   0xc0020c3d
c0011089:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001108f:	e8 6a c7 ff ff       	call   c000d7fe <VgaText::puts(char const*)>
c0011094:	58                   	pop    eax
c0011095:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c001109a:	5a                   	pop    edx
c001109b:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001109e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110a4:	e8 7b c7 ff ff       	call   c000d824 <VgaText::putx(unsigned int)>
c00110a9:	59                   	pop    ecx
c00110aa:	58                   	pop    eax
c00110ab:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c00110b0:	68 45 0c 02 c0       	push   0xc0020c45
c00110b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110bb:	e8 3e c7 ff ff       	call   c000d7fe <VgaText::puts(char const*)>
c00110c0:	58                   	pop    eax
c00110c1:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c00110c6:	5a                   	pop    edx
c00110c7:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00110ca:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110d0:	e8 4f c7 ff ff       	call   c000d824 <VgaText::putx(unsigned int)>
c00110d5:	59                   	pop    ecx
c00110d6:	58                   	pop    eax
c00110d7:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c00110dc:	68 4d 0c 02 c0       	push   0xc0020c4d
c00110e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110e7:	e8 12 c7 ff ff       	call   c000d7fe <VgaText::puts(char const*)>
c00110ec:	58                   	pop    eax
c00110ed:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c00110f2:	5a                   	pop    edx
c00110f3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00110f6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00110fc:	e8 23 c7 ff ff       	call   c000d824 <VgaText::putx(unsigned int)>
c0011101:	59                   	pop    ecx
c0011102:	58                   	pop    eax
c0011103:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c0011108:	68 55 0c 02 c0       	push   0xc0020c55
c001110d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011113:	e8 e6 c6 ff ff       	call   c000d7fe <VgaText::puts(char const*)>
c0011118:	58                   	pop    eax
c0011119:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c001111e:	5a                   	pop    edx
c001111f:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0011122:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011128:	e8 f7 c6 ff ff       	call   c000d824 <VgaText::putx(unsigned int)>
c001112d:	59                   	pop    ecx
c001112e:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c0011133:	5b                   	pop    ebx
c0011134:	68 5d 0c 02 c0       	push   0xc0020c5d
c0011139:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001113f:	e8 ba c6 ff ff       	call   c000d7fe <VgaText::puts(char const*)>
c0011144:	58                   	pop    eax
c0011145:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c001114a:	5a                   	pop    edx
c001114b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001114f:	52                   	push   edx
c0011150:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011156:	e8 c9 c6 ff ff       	call   c000d824 <VgaText::putx(unsigned int)>
c001115b:	59                   	pop    ecx
c001115c:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c0011161:	5b                   	pop    ebx
c0011162:	68 66 0c 02 c0       	push   0xc0020c66
c0011167:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001116d:	e8 8c c6 ff ff       	call   c000d7fe <VgaText::puts(char const*)>
c0011172:	58                   	pop    eax
c0011173:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c0011178:	5a                   	pop    edx
c0011179:	57                   	push   edi
c001117a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011180:	e8 9f c6 ff ff       	call   c000d824 <VgaText::putx(unsigned int)>
c0011185:	59                   	pop    ecx
c0011186:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c001118b:	5b                   	pop    ebx
c001118c:	68 6e 0c 02 c0       	push   0xc0020c6e
c0011191:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011197:	e8 62 c6 ff ff       	call   c000d7fe <VgaText::puts(char const*)>
c001119c:	5f                   	pop    edi
c001119d:	58                   	pop    eax
c001119e:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c00111a3:	56                   	push   esi
c00111a4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111aa:	e8 75 c6 ff ff       	call   c000d824 <VgaText::putx(unsigned int)>
c00111af:	58                   	pop    eax
c00111b0:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c00111b5:	5a                   	pop    edx
c00111b6:	68 76 0c 02 c0       	push   0xc0020c76
c00111bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111c1:	e8 38 c6 ff ff       	call   c000d7fe <VgaText::puts(char const*)>
c00111c6:	59                   	pop    ecx
c00111c7:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c00111cc:	5b                   	pop    ebx
c00111cd:	55                   	push   ebp
c00111ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111d4:	e8 4b c6 ff ff       	call   c000d824 <VgaText::putx(unsigned int)>
c00111d9:	5e                   	pop    esi
c00111da:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c00111df:	5f                   	pop    edi
c00111e0:	68 7e 0c 02 c0       	push   0xc0020c7e
c00111e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111eb:	e8 0e c6 ff ff       	call   c000d7fe <VgaText::puts(char const*)>
c00111f0:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c00111f5:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00111fb:	e8 aa d5 00 00       	call   c001e7aa <CPU::readDR0()>
c0011200:	5d                   	pop    ebp
c0011201:	5a                   	pop    edx
c0011202:	50                   	push   eax
c0011203:	53                   	push   ebx
c0011204:	e8 1b c6 ff ff       	call   c000d824 <VgaText::putx(unsigned int)>
c0011209:	59                   	pop    ecx
c001120a:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c001120f:	5b                   	pop    ebx
c0011210:	68 87 0c 02 c0       	push   0xc0020c87
c0011215:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001121b:	e8 de c5 ff ff       	call   c000d7fe <VgaText::puts(char const*)>
c0011220:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c0011225:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001122b:	e8 8c d5 00 00       	call   c001e7bc <CPU::readDR1()>
c0011230:	5e                   	pop    esi
c0011231:	5f                   	pop    edi
c0011232:	50                   	push   eax
c0011233:	53                   	push   ebx
c0011234:	e8 eb c5 ff ff       	call   c000d824 <VgaText::putx(unsigned int)>
c0011239:	5d                   	pop    ebp
c001123a:	58                   	pop    eax
c001123b:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c0011240:	68 8f 0c 02 c0       	push   0xc0020c8f
c0011245:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001124b:	e8 ae c5 ff ff       	call   c000d7fe <VgaText::puts(char const*)>
c0011250:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c0011255:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001125b:	e8 6e d5 00 00       	call   c001e7ce <CPU::readDR2()>
c0011260:	5a                   	pop    edx
c0011261:	59                   	pop    ecx
c0011262:	50                   	push   eax
c0011263:	53                   	push   ebx
c0011264:	e8 bb c5 ff ff       	call   c000d824 <VgaText::putx(unsigned int)>
c0011269:	5b                   	pop    ebx
c001126a:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c001126f:	5e                   	pop    esi
c0011270:	68 97 0c 02 c0       	push   0xc0020c97
c0011275:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001127b:	e8 7e c5 ff ff       	call   c000d7fe <VgaText::puts(char const*)>
c0011280:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c0011285:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001128b:	e8 50 d5 00 00       	call   c001e7e0 <CPU::readDR3()>
c0011290:	5f                   	pop    edi
c0011291:	5d                   	pop    ebp
c0011292:	50                   	push   eax
c0011293:	53                   	push   ebx
c0011294:	e8 8b c5 ff ff       	call   c000d824 <VgaText::putx(unsigned int)>
c0011299:	58                   	pop    eax
c001129a:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c001129f:	5a                   	pop    edx
c00112a0:	68 9f 0c 02 c0       	push   0xc0020c9f
c00112a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112ab:	e8 4e c5 ff ff       	call   c000d7fe <VgaText::puts(char const*)>
c00112b0:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c00112b5:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00112bb:	e8 32 d5 00 00       	call   c001e7f2 <CPU::readDR6()>
c00112c0:	59                   	pop    ecx
c00112c1:	5e                   	pop    esi
c00112c2:	50                   	push   eax
c00112c3:	53                   	push   ebx
c00112c4:	e8 5b c5 ff ff       	call   c000d824 <VgaText::putx(unsigned int)>
c00112c9:	5f                   	pop    edi
c00112ca:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c00112cf:	5d                   	pop    ebp
c00112d0:	68 a7 0c 02 c0       	push   0xc0020ca7
c00112d5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112db:	e8 1e c5 ff ff       	call   c000d7fe <VgaText::puts(char const*)>
c00112e0:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c00112e5:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00112eb:	e8 14 d5 00 00       	call   c001e804 <CPU::readDR7()>
c00112f0:	5a                   	pop    edx
c00112f1:	59                   	pop    ecx
c00112f2:	50                   	push   eax
c00112f3:	53                   	push   ebx
c00112f4:	e8 2b c5 ff ff       	call   c000d824 <VgaText::putx(unsigned int)>
c00112f9:	fa                   	cli    
c00112fa:	f4                   	hlt    
c00112fb:	83 c4 10             	add    esp,0x10
c00112fe:	eb fe                	jmp    c00112fe <displayDebugInfo(regs*)+0x3e0>

c0011300 <gpFault(regs*, void*)>:
c0011300:	53                   	push   ebx
c0011301:	83 ec 14             	sub    esp,0x14
c0011304:	c7 05 c8 2f 02 c0 01 86 01 c0 	mov    DWORD PTR ds:0xc0022fc8,0xc0018601
c001130e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0011312:	53                   	push   ebx
c0011313:	e8 e9 72 00 00       	call   c0018601 <vm8086FaultHandler(regs*)>
c0011318:	83 c4 10             	add    esp,0x10
c001131b:	84 c0                	test   al,al
c001131d:	74 05                	je     c0011324 <gpFault(regs*, void*)+0x24>
c001131f:	83 c4 08             	add    esp,0x8
c0011322:	5b                   	pop    ebx
c0011323:	c3                   	ret    
c0011324:	83 ec 0c             	sub    esp,0xc
c0011327:	68 af 0c 02 c0       	push   0xc0020caf
c001132c:	e8 05 a8 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0011331:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011334:	e8 e5 fb ff ff       	call   c0010f1e <displayDebugInfo(regs*)>

c0011339 <pgFault(regs*, void*)>:
c0011339:	83 ec 18             	sub    esp,0x18
c001133c:	68 ca 0c 02 c0       	push   0xc0020cca
c0011341:	e8 f0 a7 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0011346:	58                   	pop    eax
c0011347:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001134b:	e8 ce fb ff ff       	call   c0010f1e <displayDebugInfo(regs*)>

c0011350 <otherISRHandler(regs*, void*)>:
c0011350:	53                   	push   ebx
c0011351:	83 ec 0c             	sub    esp,0xc
c0011354:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011358:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001135b:	50                   	push   eax
c001135c:	50                   	push   eax
c001135d:	68 d7 0c 02 c0       	push   0xc0020cd7
c0011362:	e8 cf a7 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0011367:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001136a:	e8 af fb ff ff       	call   c0010f1e <displayDebugInfo(regs*)>

c001136f <opcodeFault(regs*, void*)>:
c001136f:	53                   	push   ebx
c0011370:	83 ec 08             	sub    esp,0x8
c0011373:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011377:	e8 ee 2b 00 00       	call   c0013f6a <thisCPU()>
c001137c:	80 b8 94 11 00 00 00 	cmp    BYTE PTR [eax+0x1194],0x0
c0011383:	74 16                	je     c001139b <opcodeFault(regs*, void*)+0x2c>
c0011385:	83 ec 0c             	sub    esp,0xc
c0011388:	68 54 0b 02 c0       	push   0xc0020b54
c001138d:	e8 a4 a7 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0011392:	83 43 38 19          	add    DWORD PTR [ebx+0x38],0x19
c0011396:	83 c4 18             	add    esp,0x18
c0011399:	5b                   	pop    ebx
c001139a:	c3                   	ret    
c001139b:	83 ec 0c             	sub    esp,0xc
c001139e:	68 f4 0c 02 c0       	push   0xc0020cf4
c00113a3:	e8 8e a7 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c00113a8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00113ab:	c1 e0 04             	shl    eax,0x4
c00113ae:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00113b1:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00113b5:	89 14 24             	mov    DWORD PTR [esp],edx
c00113b8:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00113bc:	52                   	push   edx
c00113bd:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00113c1:	52                   	push   edx
c00113c2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00113c5:	50                   	push   eax
c00113c6:	68 78 0b 02 c0       	push   0xc0020b78
c00113cb:	e8 66 a7 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c00113d0:	83 c4 14             	add    esp,0x14
c00113d3:	53                   	push   ebx
c00113d4:	e8 45 fb ff ff       	call   c0010f1e <displayDebugInfo(regs*)>

c00113d9 <displayProgramFault(char const*)>:
c00113d9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00113de:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00113e1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00113e7:	85 c0                	test   eax,eax
c00113e9:	74 15                	je     c0011400 <displayProgramFault(char const*)+0x27>
c00113eb:	83 ec 0c             	sub    esp,0xc
c00113ee:	6a 04                	push   0x4
c00113f0:	6a 0f                	push   0xf
c00113f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00113f6:	50                   	push   eax
c00113f7:	e8 c4 c0 ff ff       	call   c000d4c0 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00113fc:	83 c4 1c             	add    esp,0x1c
c00113ff:	c3                   	ret    
c0011400:	c3                   	ret    
c0011401:	90                   	nop

c0011402 <InterruptController::convertLegacyIRQNumber(int)>:
c0011402:	53                   	push   ebx
c0011403:	83 ec 14             	sub    esp,0x14
c0011406:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001140a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001140e:	e8 e1 f3 ff ff       	call   c00107f4 <Device::getName()>
c0011413:	83 c4 10             	add    esp,0x10
c0011416:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0011419:	74 07                	je     c0011422 <InterruptController::convertLegacyIRQNumber(int)+0x20>
c001141b:	89 d8                	mov    eax,ebx
c001141d:	83 c4 08             	add    esp,0x8
c0011420:	5b                   	pop    ebx
c0011421:	c3                   	ret    
c0011422:	83 fb 0f             	cmp    ebx,0xf
c0011425:	7f 0e                	jg     c0011435 <InterruptController::convertLegacyIRQNumber(int)+0x33>
c0011427:	0f b6 9b 20 26 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdd9e0]
c001142e:	83 c4 08             	add    esp,0x8
c0011431:	89 d8                	mov    eax,ebx
c0011433:	5b                   	pop    ebx
c0011434:	c3                   	ret    
c0011435:	83 ec 0c             	sub    esp,0xc
c0011438:	68 a4 0a 02 c0       	push   0xc0020aa4
c001143d:	e8 12 a8 ff ff       	call   c000bc54 <panic(char const*)>
c0011442:	89 d8                	mov    eax,ebx
c0011444:	83 c4 10             	add    esp,0x10
c0011447:	83 c4 08             	add    esp,0x8
c001144a:	5b                   	pop    ebx
c001144b:	c3                   	ret    

c001144c <setupInterruptController()>:
c001144c:	56                   	push   esi
c001144d:	53                   	push   ebx
c001144e:	51                   	push   ecx
c001144f:	e8 13 2b 00 00       	call   c0013f67 <getCPUNumber()>
c0011454:	85 c0                	test   eax,eax
c0011456:	0f 85 10 02 00 00    	jne    c001166c <setupInterruptController()+0x220>
c001145c:	83 ec 0c             	sub    esp,0xc
c001145f:	a1 c8 2e 02 c0       	mov    eax,ds:0xc0022ec8
c0011464:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001146a:	68 58 21 00 00       	push   0x2158
c001146f:	83 e0 01             	and    eax,0x1
c0011472:	89 c6                	mov    esi,eax
c0011474:	e8 8f dd ff ff       	call   c000f208 <operator new(unsigned long)>
c0011479:	89 04 24             	mov    DWORD PTR [esp],eax
c001147c:	89 c3                	mov    ebx,eax
c001147e:	e8 39 c1 00 00       	call   c001d5bc <PIC::PIC()>
c0011483:	6a 00                	push   0x0
c0011485:	6a 00                	push   0x0
c0011487:	6a 00                	push   0x0
c0011489:	53                   	push   ebx
c001148a:	e8 71 c4 00 00       	call   c001d900 <PIC::open(int, int, void*)>
c001148f:	83 c4 20             	add    esp,0x20
c0011492:	89 f0                	mov    eax,esi
c0011494:	84 c0                	test   al,al
c0011496:	0f 85 92 01 00 00    	jne    c001162e <setupInterruptController()+0x1e2>
c001149c:	83 ec 08             	sub    esp,0x8
c001149f:	53                   	push   ebx
c00114a0:	ff 35 c8 2e 02 c0    	push   DWORD PTR ds:0xc0022ec8
c00114a6:	e8 67 f0 ff ff       	call   c0010512 <Device::addChild(Device*)>
c00114ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114ad:	6a 00                	push   0x0
c00114af:	68 50 13 01 c0       	push   0xc0011350
c00114b4:	6a 00                	push   0x0
c00114b6:	53                   	push   ebx
c00114b7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114ba:	83 c4 20             	add    esp,0x20
c00114bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114bf:	6a 00                	push   0x0
c00114c1:	68 50 13 01 c0       	push   0xc0011350
c00114c6:	6a 01                	push   0x1
c00114c8:	53                   	push   ebx
c00114c9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114cc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114ce:	6a 00                	push   0x0
c00114d0:	68 81 0d 01 c0       	push   0xc0010d81
c00114d5:	6a 02                	push   0x2
c00114d7:	53                   	push   ebx
c00114d8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114db:	83 c4 20             	add    esp,0x20
c00114de:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114e0:	6a 00                	push   0x0
c00114e2:	68 50 13 01 c0       	push   0xc0011350
c00114e7:	6a 03                	push   0x3
c00114e9:	53                   	push   ebx
c00114ea:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00114ef:	6a 00                	push   0x0
c00114f1:	68 50 13 01 c0       	push   0xc0011350
c00114f6:	6a 04                	push   0x4
c00114f8:	53                   	push   ebx
c00114f9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00114fc:	83 c4 20             	add    esp,0x20
c00114ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011501:	6a 00                	push   0x0
c0011503:	68 50 13 01 c0       	push   0xc0011350
c0011508:	6a 05                	push   0x5
c001150a:	53                   	push   ebx
c001150b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001150e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011510:	6a 00                	push   0x0
c0011512:	68 6f 13 01 c0       	push   0xc001136f
c0011517:	6a 06                	push   0x6
c0011519:	53                   	push   ebx
c001151a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001151d:	83 c4 20             	add    esp,0x20
c0011520:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011522:	6a 00                	push   0x0
c0011524:	68 50 13 01 c0       	push   0xc0011350
c0011529:	6a 07                	push   0x7
c001152b:	53                   	push   ebx
c001152c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001152f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011531:	6a 00                	push   0x0
c0011533:	68 a8 0b 01 c0       	push   0xc0010ba8
c0011538:	6a 08                	push   0x8
c001153a:	53                   	push   ebx
c001153b:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001153e:	83 c4 20             	add    esp,0x20
c0011541:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011543:	6a 00                	push   0x0
c0011545:	68 50 13 01 c0       	push   0xc0011350
c001154a:	6a 09                	push   0x9
c001154c:	53                   	push   ebx
c001154d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011550:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011552:	6a 00                	push   0x0
c0011554:	68 50 13 01 c0       	push   0xc0011350
c0011559:	6a 0a                	push   0xa
c001155b:	53                   	push   ebx
c001155c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001155f:	83 c4 20             	add    esp,0x20
c0011562:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011564:	6a 00                	push   0x0
c0011566:	68 50 13 01 c0       	push   0xc0011350
c001156b:	6a 0b                	push   0xb
c001156d:	53                   	push   ebx
c001156e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011571:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011573:	6a 00                	push   0x0
c0011575:	68 50 13 01 c0       	push   0xc0011350
c001157a:	6a 0c                	push   0xc
c001157c:	53                   	push   ebx
c001157d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011580:	83 c4 20             	add    esp,0x20
c0011583:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011585:	6a 00                	push   0x0
c0011587:	68 00 13 01 c0       	push   0xc0011300
c001158c:	6a 0d                	push   0xd
c001158e:	53                   	push   ebx
c001158f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011592:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011594:	6a 00                	push   0x0
c0011596:	68 39 13 01 c0       	push   0xc0011339
c001159b:	6a 0e                	push   0xe
c001159d:	53                   	push   ebx
c001159e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115a1:	83 c4 20             	add    esp,0x20
c00115a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115a6:	6a 00                	push   0x0
c00115a8:	68 50 13 01 c0       	push   0xc0011350
c00115ad:	6a 0f                	push   0xf
c00115af:	53                   	push   ebx
c00115b0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115b5:	6a 00                	push   0x0
c00115b7:	68 50 13 01 c0       	push   0xc0011350
c00115bc:	6a 10                	push   0x10
c00115be:	53                   	push   ebx
c00115bf:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115c2:	83 c4 20             	add    esp,0x20
c00115c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115c7:	6a 00                	push   0x0
c00115c9:	68 50 13 01 c0       	push   0xc0011350
c00115ce:	6a 11                	push   0x11
c00115d0:	53                   	push   ebx
c00115d1:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115d6:	6a 00                	push   0x0
c00115d8:	68 50 13 01 c0       	push   0xc0011350
c00115dd:	6a 12                	push   0x12
c00115df:	53                   	push   ebx
c00115e0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115e3:	83 c4 20             	add    esp,0x20
c00115e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115e8:	6a 00                	push   0x0
c00115ea:	68 50 13 01 c0       	push   0xc0011350
c00115ef:	6a 13                	push   0x13
c00115f1:	53                   	push   ebx
c00115f2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00115f5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00115f7:	6a 00                	push   0x0
c00115f9:	68 50 13 01 c0       	push   0xc0011350
c00115fe:	6a 14                	push   0x14
c0011600:	53                   	push   ebx
c0011601:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011604:	83 c4 20             	add    esp,0x20
c0011607:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011609:	6a 00                	push   0x0
c001160b:	68 50 13 01 c0       	push   0xc0011350
c0011610:	6a 1e                	push   0x1e
c0011612:	53                   	push   ebx
c0011613:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011616:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011618:	6a 00                	push   0x0
c001161a:	68 b1 60 01 c0       	push   0xc00160b1
c001161f:	6a 60                	push   0x60
c0011621:	53                   	push   ebx
c0011622:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0011625:	83 c4 20             	add    esp,0x20
c0011628:	89 d8                	mov    eax,ebx
c001162a:	5a                   	pop    edx
c001162b:	5b                   	pop    ebx
c001162c:	5e                   	pop    esi
c001162d:	c3                   	ret    
c001162e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011630:	6a 00                	push   0x0
c0011632:	6a 00                	push   0x0
c0011634:	6a 00                	push   0x0
c0011636:	53                   	push   ebx
c0011637:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001163a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001163c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001163f:	ff 50 04             	call   DWORD PTR [eax+0x4]
c0011642:	c7 04 24 58 21 00 00 	mov    DWORD PTR [esp],0x2158
c0011649:	e8 ba db ff ff       	call   c000f208 <operator new(unsigned long)>
c001164e:	89 04 24             	mov    DWORD PTR [esp],eax
c0011651:	89 c3                	mov    ebx,eax
c0011653:	e8 a2 ba 00 00       	call   c001d0fa <APIC::APIC()>
c0011658:	6a 00                	push   0x0
c001165a:	6a 00                	push   0x0
c001165c:	6a 00                	push   0x0
c001165e:	53                   	push   ebx
c001165f:	e8 b4 b9 00 00       	call   c001d018 <APIC::open(int, int, void*)>
c0011664:	83 c4 20             	add    esp,0x20
c0011667:	e9 30 fe ff ff       	jmp    c001149c <setupInterruptController()+0x50>
c001166c:	83 ec 0c             	sub    esp,0xc
c001166f:	68 58 21 00 00       	push   0x2158
c0011674:	e8 8f db ff ff       	call   c000f208 <operator new(unsigned long)>
c0011679:	89 04 24             	mov    DWORD PTR [esp],eax
c001167c:	89 c3                	mov    ebx,eax
c001167e:	e8 77 ba 00 00       	call   c001d0fa <APIC::APIC()>
c0011683:	6a 00                	push   0x0
c0011685:	6a 00                	push   0x0
c0011687:	6a 00                	push   0x0
c0011689:	53                   	push   ebx
c001168a:	e8 89 b9 00 00       	call   c001d018 <APIC::open(int, int, void*)>
c001168f:	83 c4 18             	add    esp,0x18
c0011692:	53                   	push   ebx
c0011693:	ff 35 c8 2e 02 c0    	push   DWORD PTR ds:0xc0022ec8
c0011699:	e8 74 ee ff ff       	call   c0010512 <Device::addChild(Device*)>
c001169e:	83 c4 10             	add    esp,0x10
c00116a1:	89 d8                	mov    eax,ebx
c00116a3:	5a                   	pop    edx
c00116a4:	5b                   	pop    ebx
c00116a5:	5e                   	pop    esi
c00116a6:	c3                   	ret    
c00116a7:	90                   	nop

c00116a8 <startGUI(void*)>:
c00116a8:	55                   	push   ebp
c00116a9:	89 e5                	mov    ebp,esp
c00116ab:	53                   	push   ebx
c00116ac:	83 ec 04             	sub    esp,0x4
c00116af:	e8 56 5f 00 00       	call   c001760a <unlockScheduler()>
c00116b4:	e8 3a 5f 00 00       	call   c00175f3 <getIRQNestingLevel()>
c00116b9:	83 ec 08             	sub    esp,0x8
c00116bc:	50                   	push   eax
c00116bd:	68 50 0d 02 c0       	push   0xc0020d50
c00116c2:	e8 6f a4 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c00116c7:	83 c4 10             	add    esp,0x10
c00116ca:	8b 1d c8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022ec8
c00116d0:	83 ec 08             	sub    esp,0x8
c00116d3:	6a 01                	push   0x1
c00116d5:	68 6a 0d 02 c0       	push   0xc0020d6a
c00116da:	e8 cb 59 00 00       	call   c00170aa <Thr::loadDLL(char const*, bool)>
c00116df:	83 c4 10             	add    esp,0x10
c00116e2:	83 ec 08             	sub    esp,0x8
c00116e5:	53                   	push   ebx
c00116e6:	50                   	push   eax
c00116e7:	e8 11 5b 00 00       	call   c00171fd <Thr::executeDLL(unsigned long, void*)>
c00116ec:	83 c4 10             	add    esp,0x10
c00116ef:	8b 1d c8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022ec8
c00116f5:	83 ec 08             	sub    esp,0x8
c00116f8:	6a 01                	push   0x1
c00116fa:	68 84 0d 02 c0       	push   0xc0020d84
c00116ff:	e8 a6 59 00 00       	call   c00170aa <Thr::loadDLL(char const*, bool)>
c0011704:	83 c4 10             	add    esp,0x10
c0011707:	83 ec 08             	sub    esp,0x8
c001170a:	53                   	push   ebx
c001170b:	50                   	push   eax
c001170c:	e8 ec 5a 00 00       	call   c00171fd <Thr::executeDLL(unsigned long, void*)>
c0011711:	83 c4 10             	add    esp,0x10
c0011714:	90                   	nop
c0011715:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011718:	c9                   	leave  
c0011719:	c3                   	ret    

c001171a <sendKeyToTerminal(unsigned char)>:
c001171a:	55                   	push   ebp
c001171b:	89 e5                	mov    ebp,esp
c001171d:	83 ec 28             	sub    esp,0x28
c0011720:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011723:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0011726:	a1 84 2f 02 c0       	mov    eax,ds:0xc0022f84
c001172b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c001172f:	83 ec 08             	sub    esp,0x8
c0011732:	52                   	push   edx
c0011733:	50                   	push   eax
c0011734:	e8 c3 c2 ff ff       	call   c000d9fc <VgaText::receiveKey(unsigned char)>
c0011739:	83 c4 10             	add    esp,0x10
c001173c:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0011740:	75 41                	jne    c0011783 <sendKeyToTerminal(unsigned char)+0x69>
c0011742:	e8 e8 5e 00 00       	call   c001762f <lockStuff()>
c0011747:	a1 e0 2f 02 c0       	mov    eax,ds:0xc0022fe0
c001174c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001174f:	c7 05 e0 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022fe0,0x0
c0011759:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001175d:	74 1f                	je     c001177e <sendKeyToTerminal(unsigned char)+0x64>
c001175f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011762:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0011765:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011768:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001176b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001176e:	83 ec 0c             	sub    esp,0xc
c0011771:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011774:	e8 b3 66 00 00       	call   c0017e2c <unblockTask(ThreadControlBlock*)>
c0011779:	83 c4 10             	add    esp,0x10
c001177c:	eb db                	jmp    c0011759 <sendKeyToTerminal(unsigned char)+0x3f>
c001177e:	e8 3e 62 00 00       	call   c00179c1 <unlockStuff()>
c0011783:	90                   	nop
c0011784:	c9                   	leave  
c0011785:	c3                   	ret    

c0011786 <sendKeyboardToken(KeyboardToken)>:
c0011786:	55                   	push   ebp
c0011787:	89 e5                	mov    ebp,esp
c0011789:	83 ec 18             	sub    esp,0x18
c001178c:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c001178f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011792:	0f b7 c0             	movzx  eax,ax
c0011795:	83 f2 01             	xor    edx,0x1
c0011798:	88 90 00 30 02 c0    	mov    BYTE PTR [eax-0x3ffdd000],dl
c001179e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117a1:	66 3d 03 02          	cmp    ax,0x203
c00117a5:	75 07                	jne    c00117ae <sendKeyboardToken(KeyboardToken)+0x28>
c00117a7:	a0 00 31 02 c0       	mov    al,ds:0xc0023100
c00117ac:	84 c0                	test   al,al
c00117ae:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00117b2:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c00117b5:	a0 08 34 02 c0       	mov    al,ds:0xc0023408
c00117ba:	38 c2                	cmp    dl,al
c00117bc:	74 1c                	je     c00117da <sendKeyboardToken(KeyboardToken)+0x54>
c00117be:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c00117c1:	a2 08 34 02 c0       	mov    ds:0xc0023408,al
c00117c6:	a0 08 34 02 c0       	mov    al,ds:0xc0023408
c00117cb:	0f b6 c0             	movzx  eax,al
c00117ce:	83 ec 0c             	sub    esp,0xc
c00117d1:	50                   	push   eax
c00117d2:	e8 93 b4 ff ff       	call   c000cc6a <setTerminalScrollLock(bool)>
c00117d7:	83 c4 10             	add    esp,0x10
c00117da:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c00117dd:	84 c0                	test   al,al
c00117df:	0f 84 ae 00 00 00    	je     c0011893 <sendKeyboardToken(KeyboardToken)+0x10d>
c00117e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117e8:	66 3d 10 03          	cmp    ax,0x310
c00117ec:	75 06                	jne    c00117f4 <sendKeyboardToken(KeyboardToken)+0x6e>
c00117ee:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c00117f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117f7:	66 3d 11 03          	cmp    ax,0x311
c00117fb:	75 06                	jne    c0011803 <sendKeyboardToken(KeyboardToken)+0x7d>
c00117fd:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0011803:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011806:	66 3d 12 03          	cmp    ax,0x312
c001180a:	75 06                	jne    c0011812 <sendKeyboardToken(KeyboardToken)+0x8c>
c001180c:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0011812:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011815:	66 3d 13 03          	cmp    ax,0x313
c0011819:	75 06                	jne    c0011821 <sendKeyboardToken(KeyboardToken)+0x9b>
c001181b:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0011821:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011824:	66 3d 14 03          	cmp    ax,0x314
c0011828:	75 06                	jne    c0011830 <sendKeyboardToken(KeyboardToken)+0xaa>
c001182a:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0011830:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011833:	66 3d 15 03          	cmp    ax,0x315
c0011837:	75 06                	jne    c001183f <sendKeyboardToken(KeyboardToken)+0xb9>
c0011839:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001183f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011842:	66 3d 16 03          	cmp    ax,0x316
c0011846:	75 06                	jne    c001184e <sendKeyboardToken(KeyboardToken)+0xc8>
c0011848:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c001184e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011851:	66 3d 17 03          	cmp    ax,0x317
c0011855:	75 06                	jne    c001185d <sendKeyboardToken(KeyboardToken)+0xd7>
c0011857:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c001185d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011860:	66 3d 18 03          	cmp    ax,0x318
c0011864:	75 06                	jne    c001186c <sendKeyboardToken(KeyboardToken)+0xe6>
c0011866:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001186c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001186f:	66 3d 19 03          	cmp    ax,0x319
c0011873:	75 06                	jne    c001187b <sendKeyboardToken(KeyboardToken)+0xf5>
c0011875:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001187b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001187e:	66 3d 1a 03          	cmp    ax,0x31a
c0011882:	0f 85 c9 00 00 00    	jne    c0011951 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0011888:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c001188e:	e9 be 00 00 00       	jmp    c0011951 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0011893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011896:	66 3d 10 03          	cmp    ax,0x310
c001189a:	75 0a                	jne    c00118a6 <sendKeyboardToken(KeyboardToken)+0x120>
c001189c:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00118a2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118a9:	66 3d 11 03          	cmp    ax,0x311
c00118ad:	75 0a                	jne    c00118b9 <sendKeyboardToken(KeyboardToken)+0x133>
c00118af:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c00118b5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118bc:	66 3d 12 03          	cmp    ax,0x312
c00118c0:	75 0a                	jne    c00118cc <sendKeyboardToken(KeyboardToken)+0x146>
c00118c2:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c00118c8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118cf:	66 3d 13 03          	cmp    ax,0x313
c00118d3:	75 0a                	jne    c00118df <sendKeyboardToken(KeyboardToken)+0x159>
c00118d5:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00118db:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118e2:	66 3d 14 03          	cmp    ax,0x314
c00118e6:	75 0a                	jne    c00118f2 <sendKeyboardToken(KeyboardToken)+0x16c>
c00118e8:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00118ee:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00118f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118f5:	66 3d 15 03          	cmp    ax,0x315
c00118f9:	75 0a                	jne    c0011905 <sendKeyboardToken(KeyboardToken)+0x17f>
c00118fb:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0011901:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011905:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011908:	66 3d 16 03          	cmp    ax,0x316
c001190c:	75 0a                	jne    c0011918 <sendKeyboardToken(KeyboardToken)+0x192>
c001190e:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0011914:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011918:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001191b:	66 3d 17 03          	cmp    ax,0x317
c001191f:	75 0a                	jne    c001192b <sendKeyboardToken(KeyboardToken)+0x1a5>
c0011921:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0011927:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001192b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001192e:	66 3d 18 03          	cmp    ax,0x318
c0011932:	75 0a                	jne    c001193e <sendKeyboardToken(KeyboardToken)+0x1b8>
c0011934:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001193a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001193e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011941:	66 3d 19 03          	cmp    ax,0x319
c0011945:	75 0a                	jne    c0011951 <sendKeyboardToken(KeyboardToken)+0x1cb>
c0011947:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001194d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0011951:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011954:	66 3d 00 02          	cmp    ax,0x200
c0011958:	75 2a                	jne    c0011984 <sendKeyboardToken(KeyboardToken)+0x1fe>
c001195a:	a0 00 34 02 c0       	mov    al,ds:0xc0023400
c001195f:	83 f0 01             	xor    eax,0x1
c0011962:	84 c0                	test   al,al
c0011964:	74 1e                	je     c0011984 <sendKeyboardToken(KeyboardToken)+0x1fe>
c0011966:	a1 94 42 02 c0       	mov    eax,ds:0xc0024294
c001196b:	6a 01                	push   0x1
c001196d:	6a 00                	push   0x0
c001196f:	68 a8 16 01 c0       	push   0xc00116a8
c0011974:	50                   	push   eax
c0011975:	e8 b8 5d 00 00       	call   c0017732 <Process::createThread(void (*)(void*), void*, int)>
c001197a:	83 c4 10             	add    esp,0x10
c001197d:	c6 05 00 34 02 c0 01 	mov    BYTE PTR ds:0xc0023400,0x1
c0011984:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011987:	66 3d 1d 03          	cmp    ax,0x31d
c001198b:	75 06                	jne    c0011993 <sendKeyboardToken(KeyboardToken)+0x20d>
c001198d:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0011993:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011996:	66 3d 1c 03          	cmp    ax,0x31c
c001199a:	75 06                	jne    c00119a2 <sendKeyboardToken(KeyboardToken)+0x21c>
c001199c:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00119a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119a5:	66 3d 1b 03          	cmp    ax,0x31b
c00119a9:	75 06                	jne    c00119b1 <sendKeyboardToken(KeyboardToken)+0x22b>
c00119ab:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00119b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119b4:	66 3d 1e 03          	cmp    ax,0x31e
c00119b8:	75 06                	jne    c00119c0 <sendKeyboardToken(KeyboardToken)+0x23a>
c00119ba:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00119c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119c3:	66 3d 1f 03          	cmp    ax,0x31f
c00119c7:	75 06                	jne    c00119cf <sendKeyboardToken(KeyboardToken)+0x249>
c00119c9:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00119cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119d2:	66 3d 1a 03          	cmp    ax,0x31a
c00119d6:	75 06                	jne    c00119de <sendKeyboardToken(KeyboardToken)+0x258>
c00119d8:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00119de:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00119e2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00119e5:	83 f0 01             	xor    eax,0x1
c00119e8:	84 c0                	test   al,al
c00119ea:	74 77                	je     c0011a63 <sendKeyboardToken(KeyboardToken)+0x2dd>
c00119ec:	a0 01 31 02 c0       	mov    al,ds:0xc0023101
c00119f1:	84 c0                	test   al,al
c00119f3:	74 41                	je     c0011a36 <sendKeyboardToken(KeyboardToken)+0x2b0>
c00119f5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00119f9:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c00119fd:	74 2b                	je     c0011a2a <sendKeyboardToken(KeyboardToken)+0x2a4>
c00119ff:	8b 15 04 34 02 c0    	mov    edx,DWORD PTR ds:0xc0023404
c0011a05:	89 d0                	mov    eax,edx
c0011a07:	c1 e0 02             	shl    eax,0x2
c0011a0a:	01 d0                	add    eax,edx
c0011a0c:	01 c0                	add    eax,eax
c0011a0e:	a3 04 34 02 c0       	mov    ds:0xc0023404,eax
c0011a13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a16:	0f b7 c0             	movzx  eax,ax
c0011a19:	8d 50 d0             	lea    edx,[eax-0x30]
c0011a1c:	a1 04 34 02 c0       	mov    eax,ds:0xc0023404
c0011a21:	01 d0                	add    eax,edx
c0011a23:	a3 04 34 02 c0       	mov    ds:0xc0023404,eax
c0011a28:	eb 6d                	jmp    c0011a97 <sendKeyboardToken(KeyboardToken)+0x311>
c0011a2a:	c7 05 04 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023404,0x0
c0011a34:	eb 61                	jmp    c0011a97 <sendKeyboardToken(KeyboardToken)+0x311>
c0011a36:	a1 04 34 02 c0       	mov    eax,ds:0xc0023404
c0011a3b:	85 c0                	test   eax,eax
c0011a3d:	74 18                	je     c0011a57 <sendKeyboardToken(KeyboardToken)+0x2d1>
c0011a3f:	a1 04 34 02 c0       	mov    eax,ds:0xc0023404
c0011a44:	0f b6 c0             	movzx  eax,al
c0011a47:	83 ec 0c             	sub    esp,0xc
c0011a4a:	50                   	push   eax
c0011a4b:	e8 ca fc ff ff       	call   c001171a <sendKeyToTerminal(unsigned char)>
c0011a50:	83 c4 10             	add    esp,0x10
c0011a53:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011a57:	c7 05 04 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023404,0x0
c0011a61:	eb 34                	jmp    c0011a97 <sendKeyboardToken(KeyboardToken)+0x311>
c0011a63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a66:	66 3d 01 01          	cmp    ax,0x101
c0011a6a:	75 2b                	jne    c0011a97 <sendKeyboardToken(KeyboardToken)+0x311>
c0011a6c:	a1 04 34 02 c0       	mov    eax,ds:0xc0023404
c0011a71:	85 c0                	test   eax,eax
c0011a73:	74 18                	je     c0011a8d <sendKeyboardToken(KeyboardToken)+0x307>
c0011a75:	a1 04 34 02 c0       	mov    eax,ds:0xc0023404
c0011a7a:	0f b6 c0             	movzx  eax,al
c0011a7d:	83 ec 0c             	sub    esp,0xc
c0011a80:	50                   	push   eax
c0011a81:	e8 94 fc ff ff       	call   c001171a <sendKeyToTerminal(unsigned char)>
c0011a86:	83 c4 10             	add    esp,0x10
c0011a89:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0011a8d:	c7 05 04 34 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023404,0x0
c0011a97:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0011a9a:	83 f0 01             	xor    eax,0x1
c0011a9d:	84 c0                	test   al,al
c0011a9f:	74 4c                	je     c0011aed <sendKeyboardToken(KeyboardToken)+0x367>
c0011aa1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011aa4:	83 f0 01             	xor    eax,0x1
c0011aa7:	84 c0                	test   al,al
c0011aa9:	74 42                	je     c0011aed <sendKeyboardToken(KeyboardToken)+0x367>
c0011aab:	a0 00 31 02 c0       	mov    al,ds:0xc0023100
c0011ab0:	83 f0 01             	xor    eax,0x1
c0011ab3:	84 c0                	test   al,al
c0011ab5:	74 36                	je     c0011aed <sendKeyboardToken(KeyboardToken)+0x367>
c0011ab7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aba:	66 83 f8 1f          	cmp    ax,0x1f
c0011abe:	76 09                	jbe    c0011ac9 <sendKeyboardToken(KeyboardToken)+0x343>
c0011ac0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ac3:	66 83 f8 7e          	cmp    ax,0x7e
c0011ac7:	76 12                	jbe    c0011adb <sendKeyboardToken(KeyboardToken)+0x355>
c0011ac9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011acc:	66 83 f8 0a          	cmp    ax,0xa
c0011ad0:	74 09                	je     c0011adb <sendKeyboardToken(KeyboardToken)+0x355>
c0011ad2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ad5:	66 83 f8 08          	cmp    ax,0x8
c0011ad9:	75 12                	jne    c0011aed <sendKeyboardToken(KeyboardToken)+0x367>
c0011adb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ade:	0f b6 c0             	movzx  eax,al
c0011ae1:	83 ec 0c             	sub    esp,0xc
c0011ae4:	50                   	push   eax
c0011ae5:	e8 30 fc ff ff       	call   c001171a <sendKeyToTerminal(unsigned char)>
c0011aea:	83 c4 10             	add    esp,0x10
c0011aed:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0011af0:	83 f0 01             	xor    eax,0x1
c0011af3:	84 c0                	test   al,al
c0011af5:	74 4f                	je     c0011b46 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011af7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011afa:	83 f0 01             	xor    eax,0x1
c0011afd:	84 c0                	test   al,al
c0011aff:	74 45                	je     c0011b46 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011b01:	a0 00 31 02 c0       	mov    al,ds:0xc0023100
c0011b06:	84 c0                	test   al,al
c0011b08:	74 3c                	je     c0011b46 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011b0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b0d:	66 83 f8 3f          	cmp    ax,0x3f
c0011b11:	76 33                	jbe    c0011b46 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011b13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b16:	66 83 f8 7f          	cmp    ax,0x7f
c0011b1a:	77 2a                	ja     c0011b46 <sendKeyboardToken(KeyboardToken)+0x3c0>
c0011b1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b1f:	88 c2                	mov    dl,al
c0011b21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b24:	66 83 f8 5f          	cmp    ax,0x5f
c0011b28:	76 04                	jbe    c0011b2e <sendKeyboardToken(KeyboardToken)+0x3a8>
c0011b2a:	b0 20                	mov    al,0x20
c0011b2c:	eb 02                	jmp    c0011b30 <sendKeyboardToken(KeyboardToken)+0x3aa>
c0011b2e:	b0 00                	mov    al,0x0
c0011b30:	29 c2                	sub    edx,eax
c0011b32:	88 d0                	mov    al,dl
c0011b34:	83 e8 40             	sub    eax,0x40
c0011b37:	0f b6 c0             	movzx  eax,al
c0011b3a:	83 ec 0c             	sub    esp,0xc
c0011b3d:	50                   	push   eax
c0011b3e:	e8 d7 fb ff ff       	call   c001171a <sendKeyToTerminal(unsigned char)>
c0011b43:	83 c4 10             	add    esp,0x10
c0011b46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b49:	66 3d 00 03          	cmp    ax,0x300
c0011b4d:	75 0f                	jne    c0011b5e <sendKeyboardToken(KeyboardToken)+0x3d8>
c0011b4f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0011b52:	83 f0 01             	xor    eax,0x1
c0011b55:	84 c0                	test   al,al
c0011b57:	74 05                	je     c0011b5e <sendKeyboardToken(KeyboardToken)+0x3d8>
c0011b59:	e8 33 b9 ff ff       	call   c000d491 <doTerminalCycle()>
c0011b5e:	90                   	nop
c0011b5f:	c9                   	leave  
c0011b60:	c3                   	ret    

c0011b61 <clearInternalKeybuffer(VgaText*)>:
c0011b61:	55                   	push   ebp
c0011b62:	89 e5                	mov    ebp,esp
c0011b64:	83 ec 08             	sub    esp,0x8
c0011b67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b6a:	05 34 11 00 00       	add    eax,0x1134
c0011b6f:	83 ec 0c             	sub    esp,0xc
c0011b72:	50                   	push   eax
c0011b73:	e8 ad ea fe ff       	call   c0000625 <strlen>
c0011b78:	83 c4 10             	add    esp,0x10
c0011b7b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011b7e:	81 c2 34 11 00 00    	add    edx,0x1134
c0011b84:	83 ec 04             	sub    esp,0x4
c0011b87:	50                   	push   eax
c0011b88:	6a 00                	push   0x0
c0011b8a:	52                   	push   edx
c0011b8b:	e8 78 ea fe ff       	call   c0000608 <memset>
c0011b90:	83 c4 10             	add    esp,0x10
c0011b93:	90                   	nop
c0011b94:	c9                   	leave  
c0011b95:	c3                   	ret    

c0011b96 <readKeyboard(VgaText*, char*, unsigned long)>:
c0011b96:	55                   	push   ebp
c0011b97:	89 e5                	mov    ebp,esp
c0011b99:	83 ec 18             	sub    esp,0x18
c0011b9c:	fb                   	sti    
c0011b9d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0011ba4:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0011ba8:	74 77                	je     c0011c21 <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c0011baa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011bad:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0011bb3:	84 c0                	test   al,al
c0011bb5:	75 02                	jne    c0011bb9 <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c0011bb7:	eb f1                	jmp    c0011baa <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c0011bb9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011bbc:	8d 50 01             	lea    edx,[eax+0x1]
c0011bbf:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0011bc2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011bc5:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0011bcb:	88 10                	mov    BYTE PTR [eax],dl
c0011bcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011bd0:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0011bd6:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0011bd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011bdc:	05 34 11 00 00       	add    eax,0x1134
c0011be1:	83 ec 0c             	sub    esp,0xc
c0011be4:	50                   	push   eax
c0011be5:	e8 3b ea fe ff       	call   c0000625 <strlen>
c0011bea:	83 c4 10             	add    esp,0x10
c0011bed:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011bf0:	81 c2 34 11 00 00    	add    edx,0x1134
c0011bf6:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011bf9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0011bfc:	81 c2 34 11 00 00    	add    edx,0x1134
c0011c02:	83 ec 04             	sub    esp,0x4
c0011c05:	50                   	push   eax
c0011c06:	51                   	push   ecx
c0011c07:	52                   	push   edx
c0011c08:	e8 8d e9 fe ff       	call   c000059a <memmove>
c0011c0d:	83 c4 10             	add    esp,0x10
c0011c10:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0011c13:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011c16:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0011c1a:	75 88                	jne    c0011ba4 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0011c1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c1f:	eb 03                	jmp    c0011c24 <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c0011c21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c24:	c9                   	leave  
c0011c25:	c3                   	ret    

c0011c26 <Keyboard::Keyboard(char const*)>:
c0011c26:	83 ec 0c             	sub    esp,0xc
c0011c29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c2d:	83 ec 08             	sub    esp,0x8
c0011c30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c34:	50                   	push   eax
c0011c35:	e8 c8 ea ff ff       	call   c0010702 <Device::Device(char const*)>
c0011c3a:	83 c4 10             	add    esp,0x10
c0011c3d:	ba a8 0d 02 c0       	mov    edx,0xc0020da8
c0011c42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c46:	89 10                	mov    DWORD PTR [eax],edx
c0011c48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c4c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0011c56:	c6 05 e4 2f 02 c0 01 	mov    BYTE PTR ds:0xc0022fe4,0x1
c0011c5d:	90                   	nop
c0011c5e:	83 c4 0c             	add    esp,0xc
c0011c61:	c3                   	ret    

c0011c62 <Keyboard::~Keyboard()>:
c0011c62:	83 ec 0c             	sub    esp,0xc
c0011c65:	ba a8 0d 02 c0       	mov    edx,0xc0020da8
c0011c6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c6e:	89 10                	mov    DWORD PTR [eax],edx
c0011c70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011c74:	83 ec 0c             	sub    esp,0xc
c0011c77:	50                   	push   eax
c0011c78:	e8 37 e7 ff ff       	call   c00103b4 <Device::~Device()>
c0011c7d:	83 c4 10             	add    esp,0x10
c0011c80:	90                   	nop
c0011c81:	83 c4 0c             	add    esp,0xc
c0011c84:	c3                   	ret    
c0011c85:	90                   	nop

c0011c86 <Keyboard::~Keyboard()>:
c0011c86:	83 ec 0c             	sub    esp,0xc
c0011c89:	83 ec 0c             	sub    esp,0xc
c0011c8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c90:	e8 cd ff ff ff       	call   c0011c62 <Keyboard::~Keyboard()>
c0011c95:	83 c4 10             	add    esp,0x10
c0011c98:	83 ec 08             	sub    esp,0x8
c0011c9b:	68 5c 01 00 00       	push   0x15c
c0011ca0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ca4:	e8 6e d5 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c0011ca9:	83 c4 10             	add    esp,0x10
c0011cac:	83 c4 0c             	add    esp,0xc
c0011caf:	c3                   	ret    

c0011cb0 <LogicalDisk::close(int, int, void*)>:
c0011cb0:	83 c8 ff             	or     eax,0xffffffff
c0011cb3:	c3                   	ret    

c0011cb4 <LogicalDisk::~LogicalDisk()>:
c0011cb4:	83 ec 0c             	sub    esp,0xc
c0011cb7:	ba 58 0e 02 c0       	mov    edx,0xc0020e58
c0011cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cc0:	89 10                	mov    DWORD PTR [eax],edx
c0011cc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011cc6:	83 ec 0c             	sub    esp,0xc
c0011cc9:	50                   	push   eax
c0011cca:	e8 e5 e6 ff ff       	call   c00103b4 <Device::~Device()>
c0011ccf:	83 c4 10             	add    esp,0x10
c0011cd2:	90                   	nop
c0011cd3:	83 c4 0c             	add    esp,0xc
c0011cd6:	c3                   	ret    
c0011cd7:	90                   	nop

c0011cd8 <LogicalDisk::~LogicalDisk()>:
c0011cd8:	83 ec 0c             	sub    esp,0xc
c0011cdb:	83 ec 0c             	sub    esp,0xc
c0011cde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ce2:	e8 cd ff ff ff       	call   c0011cb4 <LogicalDisk::~LogicalDisk()>
c0011ce7:	83 c4 10             	add    esp,0x10
c0011cea:	83 ec 08             	sub    esp,0x8
c0011ced:	68 74 01 00 00       	push   0x174
c0011cf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011cf6:	e8 1c d5 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c0011cfb:	83 c4 10             	add    esp,0x10
c0011cfe:	83 c4 0c             	add    esp,0xc
c0011d01:	c3                   	ret    

c0011d02 <LogicalDisk::open(int, int, void*)>:
c0011d02:	83 ec 18             	sub    esp,0x18
c0011d05:	68 d4 0d 02 c0       	push   0xc0020dd4
c0011d0a:	e8 45 9f ff ff       	call   c000bc54 <panic(char const*)>
c0011d0f:	83 c8 ff             	or     eax,0xffffffff
c0011d12:	83 c4 1c             	add    esp,0x1c
c0011d15:	c3                   	ret    

c0011d16 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0011d16:	53                   	push   ebx
c0011d17:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011d1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d1f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011d23:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0011d29:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0011d2f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0011d35:	77 10                	ja     c0011d47 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0011d37:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0011d3d:	89 d3                	mov    ebx,edx
c0011d3f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0011d45:	72 05                	jb     c0011d4c <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0011d47:	83 c8 ff             	or     eax,0xffffffff
c0011d4a:	89 c2                	mov    edx,eax
c0011d4c:	5b                   	pop    ebx
c0011d4d:	c3                   	ret    

c0011d4e <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0011d4e:	56                   	push   esi
c0011d4f:	83 c8 ff             	or     eax,0xffffffff
c0011d52:	53                   	push   ebx
c0011d53:	89 c2                	mov    edx,eax
c0011d55:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011d59:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0011d5d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0011d61:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011d67:	77 27                	ja     c0011d90 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011d69:	89 d8                	mov    eax,ebx
c0011d6b:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0011d71:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0011d77:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d7c:	89 c2                	mov    edx,eax
c0011d7e:	73 10                	jae    c0011d90 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0011d80:	89 c8                	mov    eax,ecx
c0011d82:	89 da                	mov    edx,ebx
c0011d84:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0011d8a:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0011d90:	5b                   	pop    ebx
c0011d91:	5e                   	pop    esi
c0011d92:	c3                   	ret    
c0011d93:	90                   	nop

c0011d94 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0011d94:	83 ec 1c             	sub    esp,0x1c
c0011d97:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011d9b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011d9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011da3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011da7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011dab:	89 04 24             	mov    DWORD PTR [esp],eax
c0011dae:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011db2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011db6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011dba:	83 ec 08             	sub    esp,0x8
c0011dbd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011dc1:	50                   	push   eax
c0011dc2:	e8 3b e9 ff ff       	call   c0010702 <Device::Device(char const*)>
c0011dc7:	83 c4 10             	add    esp,0x10
c0011dca:	ba 58 0e 02 c0       	mov    edx,0xc0020e58
c0011dcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011dd3:	89 10                	mov    DWORD PTR [eax],edx
c0011dd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011dd9:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011de0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011de4:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0011deb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011def:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0011df9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011dfd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011e01:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e05:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0011e0b:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0011e11:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011e15:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011e18:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011e1c:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0011e22:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0011e28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011e2c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0011e30:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0011e36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011e3a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0011e44:	90                   	nop
c0011e45:	83 c4 1c             	add    esp,0x1c
c0011e48:	c3                   	ret    
c0011e49:	90                   	nop

c0011e4a <LogicalDisk::assignDriveLetter()>:
c0011e4a:	55                   	push   ebp
c0011e4b:	57                   	push   edi
c0011e4c:	56                   	push   esi
c0011e4d:	53                   	push   ebx
c0011e4e:	83 ec 14             	sub    esp,0x14
c0011e51:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0011e55:	8b 3d 20 34 02 c0    	mov    edi,DWORD PTR ds:0xc0023420
c0011e5b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0011e61:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0011e65:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0011e6b:	8b 3d 24 34 02 c0    	mov    edi,DWORD PTR ds:0xc0023424
c0011e71:	3c 01                	cmp    al,0x1
c0011e73:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0011e77:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0011e7b:	19 c0                	sbb    eax,eax
c0011e7d:	83 e0 02             	and    eax,0x2
c0011e80:	83 c0 41             	add    eax,0x41
c0011e83:	0f be e8             	movsx  ebp,al
c0011e86:	3c 43                	cmp    al,0x43
c0011e88:	75 10                	jne    c0011e9a <LogicalDisk::assignDriveLetter()+0x50>
c0011e8a:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0011e91:	75 5d                	jne    c0011ef0 <LogicalDisk::assignDriveLetter()+0xa6>
c0011e93:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0011e98:	75 56                	jne    c0011ef0 <LogicalDisk::assignDriveLetter()+0xa6>
c0011e9a:	8d 75 bf             	lea    esi,[ebp-0x41]
c0011e9d:	ba 01 00 00 00       	mov    edx,0x1
c0011ea2:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0011ea6:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0011eaa:	d3 e2                	shl    edx,cl
c0011eac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011eb0:	89 d7                	mov    edi,edx
c0011eb2:	89 d6                	mov    esi,edx
c0011eb4:	c1 ff 1f             	sar    edi,0x1f
c0011eb7:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c0011ebb:	21 f9                	and    ecx,edi
c0011ebd:	09 d1                	or     ecx,edx
c0011ebf:	75 2f                	jne    c0011ef0 <LogicalDisk::assignDriveLetter()+0xa6>
c0011ec1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0011ec5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011ec9:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0011ecf:	09 f2                	or     edx,esi
c0011ed1:	89 15 20 34 02 c0    	mov    DWORD PTR ds:0xc0023420,edx
c0011ed7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011edb:	09 fa                	or     edx,edi
c0011edd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0011ee1:	89 15 24 34 02 c0    	mov    DWORD PTR ds:0xc0023424,edx
c0011ee7:	89 1c bd 40 34 02 c0 	mov    DWORD PTR [edi*4-0x3ffdcbc0],ebx
c0011eee:	eb 08                	jmp    c0011ef8 <LogicalDisk::assignDriveLetter()+0xae>
c0011ef0:	45                   	inc    ebp
c0011ef1:	40                   	inc    eax
c0011ef2:	3c 5b                	cmp    al,0x5b
c0011ef4:	75 90                	jne    c0011e86 <LogicalDisk::assignDriveLetter()+0x3c>
c0011ef6:	31 c0                	xor    eax,eax
c0011ef8:	83 c4 14             	add    esp,0x14
c0011efb:	5b                   	pop    ebx
c0011efc:	5e                   	pop    esi
c0011efd:	5f                   	pop    edi
c0011efe:	5d                   	pop    ebp
c0011eff:	c3                   	ret    

c0011f00 <LogicalDisk::mount()>:
c0011f00:	56                   	push   esi
c0011f01:	53                   	push   ebx
c0011f02:	51                   	push   ecx
c0011f03:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011f07:	8b 1d a0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fa0
c0011f0d:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0011f17:	85 db                	test   ebx,ebx
c0011f19:	74 50                	je     c0011f6b <LogicalDisk::mount()+0x6b>
c0011f1b:	e8 d3 56 00 00       	call   c00175f3 <getIRQNestingLevel()>
c0011f20:	52                   	push   edx
c0011f21:	52                   	push   edx
c0011f22:	50                   	push   eax
c0011f23:	68 f8 0d 02 c0       	push   0xc0020df8
c0011f28:	e8 09 9c ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0011f2d:	83 c4 0c             	add    esp,0xc
c0011f30:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0011f37:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011f39:	83 e8 41             	sub    eax,0x41
c0011f3c:	50                   	push   eax
c0011f3d:	56                   	push   esi
c0011f3e:	53                   	push   ebx
c0011f3f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011f42:	83 c4 10             	add    esp,0x10
c0011f45:	84 c0                	test   al,al
c0011f47:	74 08                	je     c0011f51 <LogicalDisk::mount()+0x51>
c0011f49:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0011f4f:	eb 1c                	jmp    c0011f6d <LogicalDisk::mount()+0x6d>
c0011f51:	e8 9d 56 00 00       	call   c00175f3 <getIRQNestingLevel()>
c0011f56:	51                   	push   ecx
c0011f57:	51                   	push   ecx
c0011f58:	50                   	push   eax
c0011f59:	68 13 0e 02 c0       	push   0xc0020e13
c0011f5e:	e8 d3 9b ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0011f63:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0011f66:	83 c4 10             	add    esp,0x10
c0011f69:	eb ac                	jmp    c0011f17 <LogicalDisk::mount()+0x17>
c0011f6b:	31 c0                	xor    eax,eax
c0011f6d:	5a                   	pop    edx
c0011f6e:	5b                   	pop    ebx
c0011f6f:	5e                   	pop    esi
c0011f70:	c3                   	ret    
c0011f71:	90                   	nop

c0011f72 <LogicalDisk::unmount()>:
c0011f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f76:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0011f80:	c3                   	ret    
c0011f81:	90                   	nop

c0011f82 <LogicalDisk::unassignDriveLetter()>:
c0011f82:	57                   	push   edi
c0011f83:	56                   	push   esi
c0011f84:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011f88:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0011f8f:	84 c9                	test   cl,cl
c0011f91:	75 0f                	jne    c0011fa2 <LogicalDisk::unassignDriveLetter()+0x20>
c0011f93:	c7 44 24 0c 2e 0e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020e2e
c0011f9b:	5e                   	pop    esi
c0011f9c:	5f                   	pop    edi
c0011f9d:	e9 b2 9c ff ff       	jmp    c000bc54 <panic(char const*)>
c0011fa2:	83 e9 41             	sub    ecx,0x41
c0011fa5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0011fac:	b8 01 00 00 00       	mov    eax,0x1
c0011fb1:	c7 04 8d 40 34 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdcbc0],0x0
c0011fbc:	d3 e0                	shl    eax,cl
c0011fbe:	89 c7                	mov    edi,eax
c0011fc0:	f7 d0                	not    eax
c0011fc2:	c1 ff 1f             	sar    edi,0x1f
c0011fc5:	21 05 20 34 02 c0    	and    DWORD PTR ds:0xc0023420,eax
c0011fcb:	89 fe                	mov    esi,edi
c0011fcd:	f7 d6                	not    esi
c0011fcf:	21 35 24 34 02 c0    	and    DWORD PTR ds:0xc0023424,esi
c0011fd5:	5e                   	pop    esi
c0011fd6:	5f                   	pop    edi
c0011fd7:	c3                   	ret    

c0011fd8 <LogicalDisk::read(unsigned long long, int, void*)>:
c0011fd8:	57                   	push   edi
c0011fd9:	56                   	push   esi
c0011fda:	53                   	push   ebx
c0011fdb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011fdf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0011fe3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011fe7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011feb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0011ff1:	77 41                	ja     c0012034 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0011ff3:	99                   	cdq    
c0011ff4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0011ffa:	01 c8                	add    eax,ecx
c0011ffc:	11 da                	adc    edx,ebx
c0011ffe:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0012004:	19 d7                	sbb    edi,edx
c0012006:	72 33                	jb     c001203b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c0012008:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001200e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0012014:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012018:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001201c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0012022:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012028:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001202c:	5b                   	pop    ebx
c001202d:	5e                   	pop    esi
c001202e:	5f                   	pop    edi
c001202f:	e9 9a 09 00 00       	jmp    c00129ce <VCache::read(unsigned long long, int, void*)>
c0012034:	b8 05 00 00 00       	mov    eax,0x5
c0012039:	eb 05                	jmp    c0012040 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001203b:	b8 07 00 00 00       	mov    eax,0x7
c0012040:	5b                   	pop    ebx
c0012041:	5e                   	pop    esi
c0012042:	5f                   	pop    edi
c0012043:	c3                   	ret    

c0012044 <LogicalDisk::write(unsigned long long, int, void*)>:
c0012044:	57                   	push   edi
c0012045:	56                   	push   esi
c0012046:	53                   	push   ebx
c0012047:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001204b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001204f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012053:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012057:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001205d:	77 41                	ja     c00120a0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c001205f:	99                   	cdq    
c0012060:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0012066:	01 c8                	add    eax,ecx
c0012068:	11 da                	adc    edx,ebx
c001206a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0012070:	19 d7                	sbb    edi,edx
c0012072:	72 33                	jb     c00120a7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0012074:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001207a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0012080:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012084:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0012088:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001208e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012094:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012098:	5b                   	pop    ebx
c0012099:	5e                   	pop    esi
c001209a:	5f                   	pop    edi
c001209b:	e9 4a 08 00 00       	jmp    c00128ea <VCache::write(unsigned long long, int, void*)>
c00120a0:	b8 05 00 00 00       	mov    eax,0x5
c00120a5:	eb 05                	jmp    c00120ac <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00120a7:	b8 07 00 00 00       	mov    eax,0x7
c00120ac:	5b                   	pop    ebx
c00120ad:	5e                   	pop    esi
c00120ae:	5f                   	pop    edi
c00120af:	c3                   	ret    

c00120b0 <Mouse::Mouse(char const*)>:
c00120b0:	83 ec 0c             	sub    esp,0xc
c00120b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120b7:	83 ec 08             	sub    esp,0x8
c00120ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120be:	50                   	push   eax
c00120bf:	e8 3e e6 ff ff       	call   c0010702 <Device::Device(char const*)>
c00120c4:	83 c4 10             	add    esp,0x10
c00120c7:	ba 84 0e 02 c0       	mov    edx,0xc0020e84
c00120cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120d0:	89 10                	mov    DWORD PTR [eax],edx
c00120d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120d6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00120e0:	90                   	nop
c00120e1:	83 c4 0c             	add    esp,0xc
c00120e4:	c3                   	ret    
c00120e5:	90                   	nop

c00120e6 <Mouse::~Mouse()>:
c00120e6:	83 ec 0c             	sub    esp,0xc
c00120e9:	ba 84 0e 02 c0       	mov    edx,0xc0020e84
c00120ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120f2:	89 10                	mov    DWORD PTR [eax],edx
c00120f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120f8:	83 ec 0c             	sub    esp,0xc
c00120fb:	50                   	push   eax
c00120fc:	e8 b3 e2 ff ff       	call   c00103b4 <Device::~Device()>
c0012101:	83 c4 10             	add    esp,0x10
c0012104:	90                   	nop
c0012105:	83 c4 0c             	add    esp,0xc
c0012108:	c3                   	ret    
c0012109:	90                   	nop

c001210a <Mouse::~Mouse()>:
c001210a:	83 ec 0c             	sub    esp,0xc
c001210d:	83 ec 0c             	sub    esp,0xc
c0012110:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012114:	e8 cd ff ff ff       	call   c00120e6 <Mouse::~Mouse()>
c0012119:	83 c4 10             	add    esp,0x10
c001211c:	83 ec 08             	sub    esp,0x8
c001211f:	68 58 01 00 00       	push   0x158
c0012124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012128:	e8 ea d0 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c001212d:	83 c4 10             	add    esp,0x10
c0012130:	83 c4 0c             	add    esp,0xc
c0012133:	c3                   	ret    

c0012134 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0012134:	55                   	push   ebp
c0012135:	57                   	push   edi
c0012136:	56                   	push   esi
c0012137:	53                   	push   ebx
c0012138:	81 ec 28 01 00 00    	sub    esp,0x128
c001213e:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012145:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001214c:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0012153:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001215a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001215e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012162:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012169:	e8 86 e6 ff ff       	call   c00107f4 <Device::getName()>
c001216e:	5a                   	pop    edx
c001216f:	59                   	pop    ecx
c0012170:	50                   	push   eax
c0012171:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012175:	55                   	push   ebp
c0012176:	e8 2c e5 fe ff       	call   c00006a7 <strcpy>
c001217b:	5b                   	pop    ebx
c001217c:	58                   	pop    eax
c001217d:	68 a8 0e 02 c0       	push   0xc0020ea8
c0012182:	55                   	push   ebp
c0012183:	e8 d6 e5 fe ff       	call   c000075e <strcat>
c0012188:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c001218f:	e8 74 d0 ff ff       	call   c000f208 <operator new(unsigned long)>
c0012194:	83 c4 0c             	add    esp,0xc
c0012197:	89 c3                	mov    ebx,eax
c0012199:	57                   	push   edi
c001219a:	56                   	push   esi
c001219b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001219f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00121a3:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00121aa:	55                   	push   ebp
c00121ab:	50                   	push   eax
c00121ac:	e8 e3 fb ff ff       	call   c0011d94 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00121b1:	83 c4 14             	add    esp,0x14
c00121b4:	53                   	push   ebx
c00121b5:	e8 90 fc ff ff       	call   c0011e4a <LogicalDisk::assignDriveLetter()>
c00121ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00121bd:	e8 3e fd ff ff       	call   c0011f00 <LogicalDisk::mount()>
c00121c2:	58                   	pop    eax
c00121c3:	5a                   	pop    edx
c00121c4:	53                   	push   ebx
c00121c5:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00121cc:	e8 41 e3 ff ff       	call   c0010512 <Device::addChild(Device*)>
c00121d1:	81 c4 2c 01 00 00    	add    esp,0x12c
c00121d7:	5b                   	pop    ebx
c00121d8:	5e                   	pop    esi
c00121d9:	5f                   	pop    edi
c00121da:	5d                   	pop    ebp
c00121db:	c3                   	ret    

c00121dc <createPartitionsForDisk(PhysicalDisk*)>:
c00121dc:	55                   	push   ebp
c00121dd:	57                   	push   edi
c00121de:	56                   	push   esi
c00121df:	53                   	push   ebx
c00121e0:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00121e6:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00121ed:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00121f3:	3d 00 02 00 00       	cmp    eax,0x200
c00121f8:	74 27                	je     c0012221 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c00121fa:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0012200:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0012206:	83 ec 10             	sub    esp,0x10
c0012209:	0f a4 f7 0a          	shld   edi,esi,0xa
c001220d:	99                   	cdq    
c001220e:	c1 e6 0a             	shl    esi,0xa
c0012211:	52                   	push   edx
c0012212:	89 fd                	mov    ebp,edi
c0012214:	50                   	push   eax
c0012215:	55                   	push   ebp
c0012216:	56                   	push   esi
c0012217:	e8 b0 be 00 00       	call   c001e0cc <__udivdi3>
c001221c:	e9 b1 00 00 00       	jmp    c00122d2 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012221:	83 ec 0c             	sub    esp,0xc
c0012224:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012226:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c001222a:	56                   	push   esi
c001222b:	6a 01                	push   0x1
c001222d:	6a 00                	push   0x0
c001222f:	6a 00                	push   0x0
c0012231:	53                   	push   ebx
c0012232:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012235:	83 c4 20             	add    esp,0x20
c0012238:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0012240:	75 0a                	jne    c001224c <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0012242:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c001224a:	74 2c                	je     c0012278 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c001224c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012252:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012258:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001225e:	83 ec 10             	sub    esp,0x10
c0012261:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012265:	89 f7                	mov    edi,esi
c0012267:	c1 e0 0a             	shl    eax,0xa
c001226a:	c1 ff 1f             	sar    edi,0x1f
c001226d:	57                   	push   edi
c001226e:	56                   	push   esi
c001226f:	52                   	push   edx
c0012270:	50                   	push   eax
c0012271:	e8 56 be 00 00       	call   c001e0cc <__udivdi3>
c0012276:	eb 5a                	jmp    c00122d2 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012278:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c001227f:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0012286:	83 e1 7f             	and    ecx,0x7f
c0012289:	83 e0 7f             	and    eax,0x7f
c001228c:	01 c1                	add    ecx,eax
c001228e:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0012295:	83 e0 7f             	and    eax,0x7f
c0012298:	01 c1                	add    ecx,eax
c001229a:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c00122a1:	83 e0 7f             	and    eax,0x7f
c00122a4:	00 c1                	add    cl,al
c00122a6:	74 41                	je     c00122e9 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c00122a8:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00122ae:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00122b4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00122ba:	83 ec 10             	sub    esp,0x10
c00122bd:	0f a4 c2 0a          	shld   edx,eax,0xa
c00122c1:	89 f7                	mov    edi,esi
c00122c3:	c1 e0 0a             	shl    eax,0xa
c00122c6:	c1 ff 1f             	sar    edi,0x1f
c00122c9:	57                   	push   edi
c00122ca:	56                   	push   esi
c00122cb:	52                   	push   edx
c00122cc:	50                   	push   eax
c00122cd:	e8 fa bd 00 00       	call   c001e0cc <__udivdi3>
c00122d2:	83 c4 14             	add    esp,0x14
c00122d5:	52                   	push   edx
c00122d6:	50                   	push   eax
c00122d7:	6a 00                	push   0x0
c00122d9:	6a 00                	push   0x0
c00122db:	53                   	push   ebx
c00122dc:	e8 53 fe ff ff       	call   c0012134 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00122e1:	83 c4 20             	add    esp,0x20
c00122e4:	e9 79 01 00 00       	jmp    c0012462 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c00122e9:	89 f0                	mov    eax,esi
c00122eb:	31 f6                	xor    esi,esi
c00122ed:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c00122f4:	75 02                	jne    c00122f8 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c00122f6:	89 f1                	mov    ecx,esi
c00122f8:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c00122ff:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0012306:	c1 e2 08             	shl    edx,0x8
c0012309:	c1 e7 10             	shl    edi,0x10
c001230c:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0012314:	09 fa                	or     edx,edi
c0012316:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c001231e:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0012325:	83 c0 10             	add    eax,0x10
c0012328:	09 fa                	or     edx,edi
c001232a:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0012331:	c1 e7 18             	shl    edi,0x18
c0012334:	09 fa                	or     edx,edi
c0012336:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c001233d:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0012341:	c1 e7 10             	shl    edi,0x10
c0012344:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c001234b:	c1 e2 08             	shl    edx,0x8
c001234e:	09 fa                	or     edx,edi
c0012350:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0012357:	09 fa                	or     edx,edi
c0012359:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0012360:	c1 e7 18             	shl    edi,0x18
c0012363:	09 fa                	or     edx,edi
c0012365:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0012369:	46                   	inc    esi
c001236a:	83 fe 04             	cmp    esi,0x4
c001236d:	0f 85 7a ff ff ff    	jne    c00122ed <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0012373:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012377:	83 f0 01             	xor    eax,0x1
c001237a:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001237e:	75 57                	jne    c00123d7 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012380:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012384:	83 f0 01             	xor    eax,0x1
c0012387:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001238b:	75 4a                	jne    c00123d7 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c001238d:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0012391:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012399:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00123a1:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00123a7:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00123ad:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00123b3:	0f a4 c2 0a          	shld   edx,eax,0xa
c00123b7:	89 f7                	mov    edi,esi
c00123b9:	c1 e0 0a             	shl    eax,0xa
c00123bc:	c1 ff 1f             	sar    edi,0x1f
c00123bf:	57                   	push   edi
c00123c0:	56                   	push   esi
c00123c1:	52                   	push   edx
c00123c2:	50                   	push   eax
c00123c3:	e8 04 bd 00 00       	call   c001e0cc <__udivdi3>
c00123c8:	83 c4 10             	add    esp,0x10
c00123cb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00123cf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00123d3:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00123d7:	84 c9                	test   cl,cl
c00123d9:	74 53                	je     c001242e <createPartitionsForDisk(PhysicalDisk*)+0x252>
c00123db:	0f b6 c9             	movzx  ecx,cl
c00123de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00123e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00123e6:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00123ea:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00123ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00123f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00123f6:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c00123fa:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c00123fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012402:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0012406:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001240a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001240e:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0012412:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0012416:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c001241a:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c001241e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012422:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012426:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c001242a:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c001242e:	31 ed                	xor    ebp,ebp
c0012430:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0012434:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0012438:	89 f8                	mov    eax,edi
c001243a:	09 f0                	or     eax,esi
c001243c:	74 1e                	je     c001245c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001243e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0012442:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0012446:	89 d1                	mov    ecx,edx
c0012448:	09 c1                	or     ecx,eax
c001244a:	74 10                	je     c001245c <createPartitionsForDisk(PhysicalDisk*)+0x280>
c001244c:	83 ec 0c             	sub    esp,0xc
c001244f:	57                   	push   edi
c0012450:	56                   	push   esi
c0012451:	52                   	push   edx
c0012452:	50                   	push   eax
c0012453:	53                   	push   ebx
c0012454:	e8 db fc ff ff       	call   c0012134 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012459:	83 c4 20             	add    esp,0x20
c001245c:	45                   	inc    ebp
c001245d:	83 fd 04             	cmp    ebp,0x4
c0012460:	75 ce                	jne    c0012430 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0012462:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012468:	5b                   	pop    ebx
c0012469:	5e                   	pop    esi
c001246a:	5f                   	pop    edi
c001246b:	5d                   	pop    ebp
c001246c:	c3                   	ret    
c001246d:	90                   	nop

c001246e <Timer::Timer(char const*)>:
c001246e:	83 ec 0c             	sub    esp,0xc
c0012471:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012475:	83 ec 08             	sub    esp,0x8
c0012478:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001247c:	50                   	push   eax
c001247d:	e8 80 e2 ff ff       	call   c0010702 <Device::Device(char const*)>
c0012482:	83 c4 10             	add    esp,0x10
c0012485:	ba bc 0e 02 c0       	mov    edx,0xc0020ebc
c001248a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001248e:	89 10                	mov    DWORD PTR [eax],edx
c0012490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012494:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c001249e:	90                   	nop
c001249f:	83 c4 0c             	add    esp,0xc
c00124a2:	c3                   	ret    
c00124a3:	90                   	nop

c00124a4 <Timer::~Timer()>:
c00124a4:	83 ec 0c             	sub    esp,0xc
c00124a7:	ba bc 0e 02 c0       	mov    edx,0xc0020ebc
c00124ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124b0:	89 10                	mov    DWORD PTR [eax],edx
c00124b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124b6:	83 ec 0c             	sub    esp,0xc
c00124b9:	50                   	push   eax
c00124ba:	e8 f5 de ff ff       	call   c00103b4 <Device::~Device()>
c00124bf:	83 c4 10             	add    esp,0x10
c00124c2:	90                   	nop
c00124c3:	83 c4 0c             	add    esp,0xc
c00124c6:	c3                   	ret    
c00124c7:	90                   	nop

c00124c8 <Timer::~Timer()>:
c00124c8:	83 ec 0c             	sub    esp,0xc
c00124cb:	83 ec 0c             	sub    esp,0xc
c00124ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124d2:	e8 cd ff ff ff       	call   c00124a4 <Timer::~Timer()>
c00124d7:	83 c4 10             	add    esp,0x10
c00124da:	83 ec 08             	sub    esp,0x8
c00124dd:	68 5c 01 00 00       	push   0x15c
c00124e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124e6:	e8 2c cd ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c00124eb:	83 c4 10             	add    esp,0x10
c00124ee:	83 c4 0c             	add    esp,0xc
c00124f1:	c3                   	ret    

c00124f2 <Timer::read()>:
c00124f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124f6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00124fc:	c3                   	ret    

c00124fd <timerHandler(unsigned long long)>:
c00124fd:	55                   	push   ebp
c00124fe:	57                   	push   edi
c00124ff:	56                   	push   esi
c0012500:	53                   	push   ebx
c0012501:	83 ec 0c             	sub    esp,0xc
c0012504:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012508:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001250c:	01 35 b0 34 02 c0    	add    DWORD PTR ds:0xc00234b0,esi
c0012512:	11 3d b4 34 02 c0    	adc    DWORD PTR ds:0xc00234b4,edi
c0012518:	80 3d cd 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022ecd,0x0
c001251f:	0f 84 07 01 00 00    	je     c001262c <timerHandler(unsigned long long)+0x12f>
c0012525:	e8 05 51 00 00       	call   c001762f <lockStuff()>
c001252a:	83 ec 0c             	sub    esp,0xc
c001252d:	68 7c 42 02 c0       	push   0xc002427c
c0012532:	e8 df c2 00 00       	call   c001e816 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012537:	c7 04 24 7c 42 02 c0 	mov    DWORD PTR [esp],0xc002427c
c001253e:	89 c3                	mov    ebx,eax
c0012540:	e8 d9 c2 00 00       	call   c001e81e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012545:	83 c4 10             	add    esp,0x10
c0012548:	84 c0                	test   al,al
c001254a:	74 60                	je     c00125ac <timerHandler(unsigned long long)+0xaf>
c001254c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012552:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0012555:	85 c0                	test   eax,eax
c0012557:	0f 85 91 00 00 00    	jne    c00125ee <timerHandler(unsigned long long)+0xf1>
c001255d:	e9 be 00 00 00       	jmp    c0012620 <timerHandler(unsigned long long)+0x123>
c0012562:	83 ec 0c             	sub    esp,0xc
c0012565:	55                   	push   ebp
c0012566:	e8 c1 58 00 00       	call   c0017e2c <unblockTask(ThreadControlBlock*)>
c001256b:	83 c4 10             	add    esp,0x10
c001256e:	39 eb                	cmp    ebx,ebp
c0012570:	75 12                	jne    c0012584 <timerHandler(unsigned long long)+0x87>
c0012572:	83 ec 0c             	sub    esp,0xc
c0012575:	68 7c 42 02 c0       	push   0xc002427c
c001257a:	e8 97 c2 00 00       	call   c001e816 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001257f:	89 c3                	mov    ebx,eax
c0012581:	83 c4 10             	add    esp,0x10
c0012584:	83 ec 0c             	sub    esp,0xc
c0012587:	68 7c 42 02 c0       	push   0xc002427c
c001258c:	e8 8d c2 00 00       	call   c001e81e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012591:	83 c4 10             	add    esp,0x10
c0012594:	84 c0                	test   al,al
c0012596:	75 b4                	jne    c001254c <timerHandler(unsigned long long)+0x4f>
c0012598:	83 ec 0c             	sub    esp,0xc
c001259b:	68 7c 42 02 c0       	push   0xc002427c
c00125a0:	e8 71 c2 00 00       	call   c001e816 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00125a5:	83 c4 10             	add    esp,0x10
c00125a8:	39 d8                	cmp    eax,ebx
c00125aa:	74 a0                	je     c001254c <timerHandler(unsigned long long)+0x4f>
c00125ac:	83 ec 0c             	sub    esp,0xc
c00125af:	68 7c 42 02 c0       	push   0xc002427c
c00125b4:	e8 5d c2 00 00       	call   c001e816 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00125b9:	c7 04 24 7c 42 02 c0 	mov    DWORD PTR [esp],0xc002427c
c00125c0:	89 c5                	mov    ebp,eax
c00125c2:	e8 73 c2 00 00       	call   c001e83a <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00125c7:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c00125ca:	83 c4 10             	add    esp,0x10
c00125cd:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00125d0:	39 15 b0 34 02 c0    	cmp    DWORD PTR ds:0xc00234b0,edx
c00125d6:	a1 b4 34 02 c0       	mov    eax,ds:0xc00234b4
c00125db:	19 c8                	sbb    eax,ecx
c00125dd:	73 83                	jae    c0012562 <timerHandler(unsigned long long)+0x65>
c00125df:	50                   	push   eax
c00125e0:	50                   	push   eax
c00125e1:	55                   	push   ebp
c00125e2:	68 7c 42 02 c0       	push   0xc002427c
c00125e7:	e8 04 c3 00 00       	call   c001e8f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00125ec:	eb 93                	jmp    c0012581 <timerHandler(unsigned long long)+0x84>
c00125ee:	80 3d cc 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022ecc,0x0
c00125f5:	74 29                	je     c0012620 <timerHandler(unsigned long long)+0x123>
c00125f7:	39 c6                	cmp    esi,eax
c00125f9:	bb 00 00 00 00       	mov    ebx,0x0
c00125fe:	19 df                	sbb    edi,ebx
c0012600:	72 19                	jb     c001261b <timerHandler(unsigned long long)+0x11e>
c0012602:	e8 01 50 00 00       	call   c0017608 <lockScheduler()>
c0012607:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001260c:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c001260f:	e8 28 53 00 00       	call   c001793c <schedule()>
c0012614:	e8 f1 4f 00 00       	call   c001760a <unlockScheduler()>
c0012619:	eb 05                	jmp    c0012620 <timerHandler(unsigned long long)+0x123>
c001261b:	29 f0                	sub    eax,esi
c001261d:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0012620:	83 c4 0c             	add    esp,0xc
c0012623:	5b                   	pop    ebx
c0012624:	5e                   	pop    esi
c0012625:	5f                   	pop    edi
c0012626:	5d                   	pop    ebp
c0012627:	e9 95 53 00 00       	jmp    c00179c1 <unlockStuff()>
c001262c:	83 c4 0c             	add    esp,0xc
c001262f:	5b                   	pop    ebx
c0012630:	5e                   	pop    esi
c0012631:	5f                   	pop    edi
c0012632:	5d                   	pop    ebp
c0012633:	c3                   	ret    

c0012634 <setupTimer(int)>:
c0012634:	57                   	push   edi
c0012635:	56                   	push   esi
c0012636:	53                   	push   ebx
c0012637:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001263b:	e8 27 19 00 00       	call   c0013f67 <getCPUNumber()>
c0012640:	85 c0                	test   eax,eax
c0012642:	74 32                	je     c0012676 <setupTimer(int)+0x42>
c0012644:	83 ec 0c             	sub    esp,0xc
c0012647:	68 60 01 00 00       	push   0x160
c001264c:	e8 b7 cb ff ff       	call   c000f208 <operator new(unsigned long)>
c0012651:	89 04 24             	mov    DWORD PTR [esp],eax
c0012654:	89 c3                	mov    ebx,eax
c0012656:	e8 0f b5 00 00       	call   c001db6a <APICTimer::APICTimer()>
c001265b:	6a 00                	push   0x0
c001265d:	6a 00                	push   0x0
c001265f:	56                   	push   esi
c0012660:	53                   	push   ebx
c0012661:	e8 0c b4 00 00       	call   c001da72 <APICTimer::open(int, int, void*)>
c0012666:	83 c4 20             	add    esp,0x20
c0012669:	e8 fc 18 00 00       	call   c0013f6a <thisCPU()>
c001266e:	56                   	push   esi
c001266f:	56                   	push   esi
c0012670:	53                   	push   ebx
c0012671:	e9 96 00 00 00       	jmp    c001270c <setupTimer(int)+0xd8>
c0012676:	e8 ef 18 00 00       	call   c0013f6a <thisCPU()>
c001267b:	83 ec 0c             	sub    esp,0xc
c001267e:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012684:	e8 6b e1 ff ff       	call   c00107f4 <Device::getName()>
c0012689:	83 c4 10             	add    esp,0x10
c001268c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c001268f:	0f 85 87 00 00 00    	jne    c001271c <setupTimer(int)+0xe8>
c0012695:	a1 c8 2e 02 c0       	mov    eax,ds:0xc0022ec8
c001269a:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c00126a1:	74 79                	je     c001271c <setupTimer(int)+0xe8>
c00126a3:	83 ec 0c             	sub    esp,0xc
c00126a6:	68 5c 01 00 00       	push   0x15c
c00126ab:	e8 58 cb ff ff       	call   c000f208 <operator new(unsigned long)>
c00126b0:	89 04 24             	mov    DWORD PTR [esp],eax
c00126b3:	89 c3                	mov    ebx,eax
c00126b5:	e8 00 b6 00 00       	call   c001dcba <PIT::PIT()>
c00126ba:	59                   	pop    ecx
c00126bb:	5f                   	pop    edi
c00126bc:	53                   	push   ebx
c00126bd:	ff 35 c8 2e 02 c0    	push   DWORD PTR ds:0xc0022ec8
c00126c3:	e8 4a de ff ff       	call   c0010512 <Device::addChild(Device*)>
c00126c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126ca:	6a 00                	push   0x0
c00126cc:	6a 00                	push   0x0
c00126ce:	56                   	push   esi
c00126cf:	53                   	push   ebx
c00126d0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00126d3:	83 c4 14             	add    esp,0x14
c00126d6:	68 60 01 00 00       	push   0x160
c00126db:	e8 28 cb ff ff       	call   c000f208 <operator new(unsigned long)>
c00126e0:	89 04 24             	mov    DWORD PTR [esp],eax
c00126e3:	89 c7                	mov    edi,eax
c00126e5:	e8 80 b4 00 00       	call   c001db6a <APICTimer::APICTimer()>
c00126ea:	6a 00                	push   0x0
c00126ec:	6a 00                	push   0x0
c00126ee:	56                   	push   esi
c00126ef:	57                   	push   edi
c00126f0:	e8 7d b3 00 00       	call   c001da72 <APICTimer::open(int, int, void*)>
c00126f5:	83 c4 20             	add    esp,0x20
c00126f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00126fa:	6a 00                	push   0x0
c00126fc:	6a 00                	push   0x0
c00126fe:	6a 00                	push   0x0
c0012700:	53                   	push   ebx
c0012701:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012704:	e8 61 18 00 00       	call   c0013f6a <thisCPU()>
c0012709:	5a                   	pop    edx
c001270a:	59                   	pop    ecx
c001270b:	57                   	push   edi
c001270c:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012712:	e8 fb dd ff ff       	call   c0010512 <Device::addChild(Device*)>
c0012717:	83 c4 10             	add    esp,0x10
c001271a:	eb 33                	jmp    c001274f <setupTimer(int)+0x11b>
c001271c:	83 ec 0c             	sub    esp,0xc
c001271f:	68 5c 01 00 00       	push   0x15c
c0012724:	e8 df ca ff ff       	call   c000f208 <operator new(unsigned long)>
c0012729:	89 04 24             	mov    DWORD PTR [esp],eax
c001272c:	89 c3                	mov    ebx,eax
c001272e:	e8 87 b5 00 00       	call   c001dcba <PIT::PIT()>
c0012733:	58                   	pop    eax
c0012734:	5a                   	pop    edx
c0012735:	53                   	push   ebx
c0012736:	ff 35 c8 2e 02 c0    	push   DWORD PTR ds:0xc0022ec8
c001273c:	e8 d1 dd ff ff       	call   c0010512 <Device::addChild(Device*)>
c0012741:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012743:	6a 00                	push   0x0
c0012745:	6a 00                	push   0x0
c0012747:	56                   	push   esi
c0012748:	53                   	push   ebx
c0012749:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001274c:	83 c4 20             	add    esp,0x20
c001274f:	89 d8                	mov    eax,ebx
c0012751:	5b                   	pop    ebx
c0012752:	5e                   	pop    esi
c0012753:	5f                   	pop    edi
c0012754:	c3                   	ret    
c0012755:	90                   	nop

c0012756 <VCache::VCache(PhysicalDisk*)>:
c0012756:	53                   	push   ebx
c0012757:	83 ec 08             	sub    esp,0x8
c001275a:	ba ec 0e 02 c0       	mov    edx,0xc0020eec
c001275f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012763:	89 10                	mov    DWORD PTR [eax],edx
c0012765:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012769:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0012770:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012774:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001277b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001277f:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0012786:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001278d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012791:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0012798:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001279f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127a3:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00127aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127ae:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00127b2:	83 ec 0c             	sub    esp,0xc
c00127b5:	6a 10                	push   0x10
c00127b7:	e8 4c ca ff ff       	call   c000f208 <operator new(unsigned long)>
c00127bc:	83 c4 10             	add    esp,0x10
c00127bf:	89 c3                	mov    ebx,eax
c00127c1:	83 ec 0c             	sub    esp,0xc
c00127c4:	53                   	push   ebx
c00127c5:	e8 56 4f 00 00       	call   c0017720 <Mutex::Mutex()>
c00127ca:	83 c4 10             	add    esp,0x10
c00127cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127d1:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00127d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00127dc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00127df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127e3:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00127ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127ee:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00127f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127f8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00127fb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00127ff:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0012805:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001280b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001280f:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0012812:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0012815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012819:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001281d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012821:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012827:	c1 e0 06             	shl    eax,0x6
c001282a:	83 ec 0c             	sub    esp,0xc
c001282d:	50                   	push   eax
c001282e:	e8 fe 98 ff ff       	call   c000c131 <malloc>
c0012833:	83 c4 10             	add    esp,0x10
c0012836:	89 c2                	mov    edx,eax
c0012838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001283c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001283f:	90                   	nop
c0012840:	83 c4 08             	add    esp,0x8
c0012843:	5b                   	pop    ebx
c0012844:	c3                   	ret    
c0012845:	90                   	nop

c0012846 <VCache::writeWriteBuffer()>:
c0012846:	53                   	push   ebx
c0012847:	83 ec 14             	sub    esp,0x14
c001284a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001284e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012851:	8b 10                	mov    edx,DWORD PTR [eax]
c0012853:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0012856:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0012859:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001285c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001285f:	50                   	push   eax
c0012860:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0012863:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001286a:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0012871:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0012875:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001287c:	83 c4 28             	add    esp,0x28
c001287f:	5b                   	pop    ebx
c0012880:	c3                   	ret    
c0012881:	90                   	nop

c0012882 <VCache::~VCache()>:
c0012882:	83 ec 0c             	sub    esp,0xc
c0012885:	ba ec 0e 02 c0       	mov    edx,0xc0020eec
c001288a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001288e:	89 10                	mov    DWORD PTR [eax],edx
c0012890:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012894:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0012897:	84 c0                	test   al,al
c0012899:	74 0f                	je     c00128aa <VCache::~VCache()+0x28>
c001289b:	83 ec 0c             	sub    esp,0xc
c001289e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128a2:	e8 9f ff ff ff       	call   c0012846 <VCache::writeWriteBuffer()>
c00128a7:	83 c4 10             	add    esp,0x10
c00128aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128ae:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00128b1:	83 ec 0c             	sub    esp,0xc
c00128b4:	50                   	push   eax
c00128b5:	e8 87 98 ff ff       	call   c000c141 <free>
c00128ba:	83 c4 10             	add    esp,0x10
c00128bd:	90                   	nop
c00128be:	83 c4 0c             	add    esp,0xc
c00128c1:	c3                   	ret    

c00128c2 <VCache::~VCache()>:
c00128c2:	83 ec 0c             	sub    esp,0xc
c00128c5:	83 ec 0c             	sub    esp,0xc
c00128c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128cc:	e8 b1 ff ff ff       	call   c0012882 <VCache::~VCache()>
c00128d1:	83 c4 10             	add    esp,0x10
c00128d4:	83 ec 08             	sub    esp,0x8
c00128d7:	6a 30                	push   0x30
c00128d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128dd:	e8 35 c9 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c00128e2:	83 c4 10             	add    esp,0x10
c00128e5:	83 c4 0c             	add    esp,0xc
c00128e8:	c3                   	ret    
c00128e9:	90                   	nop

c00128ea <VCache::write(unsigned long long, int, void*)>:
c00128ea:	55                   	push   ebp
c00128eb:	57                   	push   edi
c00128ec:	56                   	push   esi
c00128ed:	53                   	push   ebx
c00128ee:	83 ec 28             	sub    esp,0x28
c00128f1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00128f5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00128f9:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00128fd:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0012901:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012904:	e8 eb 53 00 00       	call   c0017cf4 <Semaphore::acquire()>
c0012909:	83 c4 10             	add    esp,0x10
c001290c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0012910:	74 66                	je     c0012978 <VCache::write(unsigned long long, int, void*)+0x8e>
c0012912:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012915:	99                   	cdq    
c0012916:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001291a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001291d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0012920:	89 c1                	mov    ecx,eax
c0012922:	89 d0                	mov    eax,edx
c0012924:	31 f1                	xor    ecx,esi
c0012926:	31 f8                	xor    eax,edi
c0012928:	89 ca                	mov    edx,ecx
c001292a:	09 c2                	or     edx,eax
c001292c:	75 3e                	jne    c001296c <VCache::write(unsigned long long, int, void*)+0x82>
c001292e:	83 fd 01             	cmp    ebp,0x1
c0012931:	75 39                	jne    c001296c <VCache::write(unsigned long long, int, void*)+0x82>
c0012933:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012936:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001293c:	51                   	push   ecx
c001293d:	50                   	push   eax
c001293e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012942:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012946:	0f af c8             	imul   ecx,eax
c0012949:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c001294c:	51                   	push   ecx
c001294d:	e8 80 dc fe ff       	call   c00005d2 <memcpy>
c0012952:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012955:	83 c4 10             	add    esp,0x10
c0012958:	40                   	inc    eax
c0012959:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c001295c:	83 f8 40             	cmp    eax,0x40
c001295f:	75 57                	jne    c00129b8 <VCache::write(unsigned long long, int, void*)+0xce>
c0012961:	83 ec 0c             	sub    esp,0xc
c0012964:	53                   	push   ebx
c0012965:	e8 dc fe ff ff       	call   c0012846 <VCache::writeWriteBuffer()>
c001296a:	eb 34                	jmp    c00129a0 <VCache::write(unsigned long long, int, void*)+0xb6>
c001296c:	83 ec 0c             	sub    esp,0xc
c001296f:	53                   	push   ebx
c0012970:	e8 d1 fe ff ff       	call   c0012846 <VCache::writeWriteBuffer()>
c0012975:	83 c4 10             	add    esp,0x10
c0012978:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001297b:	83 fd 3f             	cmp    ebp,0x3f
c001297e:	7f 25                	jg     c00129a5 <VCache::write(unsigned long long, int, void*)+0xbb>
c0012980:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0012983:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0012986:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0012989:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c001298d:	52                   	push   edx
c001298e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0012994:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0012998:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001299b:	e8 32 dc fe ff       	call   c00005d2 <memcpy>
c00129a0:	83 c4 10             	add    esp,0x10
c00129a3:	eb 13                	jmp    c00129b8 <VCache::write(unsigned long long, int, void*)+0xce>
c00129a5:	83 ec 0c             	sub    esp,0xc
c00129a8:	8b 10                	mov    edx,DWORD PTR [eax]
c00129aa:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00129ae:	55                   	push   ebp
c00129af:	57                   	push   edi
c00129b0:	56                   	push   esi
c00129b1:	50                   	push   eax
c00129b2:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00129b5:	83 c4 20             	add    esp,0x20
c00129b8:	83 ec 0c             	sub    esp,0xc
c00129bb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00129be:	e8 cd 58 00 00       	call   c0018290 <Semaphore::release()>
c00129c3:	83 c4 2c             	add    esp,0x2c
c00129c6:	31 c0                	xor    eax,eax
c00129c8:	5b                   	pop    ebx
c00129c9:	5e                   	pop    esi
c00129ca:	5f                   	pop    edi
c00129cb:	5d                   	pop    ebp
c00129cc:	c3                   	ret    
c00129cd:	90                   	nop

c00129ce <VCache::read(unsigned long long, int, void*)>:
c00129ce:	57                   	push   edi
c00129cf:	56                   	push   esi
c00129d0:	53                   	push   ebx
c00129d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00129d5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00129d9:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00129dd:	83 ec 0c             	sub    esp,0xc
c00129e0:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00129e3:	e8 0c 53 00 00       	call   c0017cf4 <Semaphore::acquire()>
c00129e8:	83 c4 10             	add    esp,0x10
c00129eb:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00129ef:	74 0c                	je     c00129fd <VCache::read(unsigned long long, int, void*)+0x2f>
c00129f1:	83 ec 0c             	sub    esp,0xc
c00129f4:	53                   	push   ebx
c00129f5:	e8 4c fe ff ff       	call   c0012846 <VCache::writeWriteBuffer()>
c00129fa:	83 c4 10             	add    esp,0x10
c00129fd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012a00:	83 ec 0c             	sub    esp,0xc
c0012a03:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012a0d:	57                   	push   edi
c0012a0e:	56                   	push   esi
c0012a0f:	50                   	push   eax
c0012a10:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012a13:	83 c4 14             	add    esp,0x14
c0012a16:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0012a19:	e8 72 58 00 00       	call   c0018290 <Semaphore::release()>
c0012a1e:	83 c4 10             	add    esp,0x10
c0012a21:	31 c0                	xor    eax,eax
c0012a23:	5b                   	pop    ebx
c0012a24:	5e                   	pop    esi
c0012a25:	5f                   	pop    edi
c0012a26:	c3                   	ret    
c0012a27:	90                   	nop

c0012a28 <Video::putrect(int, int, int, int, unsigned int)>:
c0012a28:	55                   	push   ebp
c0012a29:	57                   	push   edi
c0012a2a:	56                   	push   esi
c0012a2b:	53                   	push   ebx
c0012a2c:	83 ec 1c             	sub    esp,0x1c
c0012a2f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012a33:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012a37:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012a3b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0012a3f:	01 e8                	add    eax,ebp
c0012a41:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012a45:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a49:	01 df                	add    edi,ebx
c0012a4b:	39 fb                	cmp    ebx,edi
c0012a4d:	7d 1b                	jge    c0012a6a <Video::putrect(int, int, int, int, unsigned int)+0x42>
c0012a4f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0012a53:	7d 12                	jge    c0012a67 <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c0012a55:	8b 16                	mov    edx,DWORD PTR [esi]
c0012a57:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012a5b:	53                   	push   ebx
c0012a5c:	55                   	push   ebp
c0012a5d:	45                   	inc    ebp
c0012a5e:	56                   	push   esi
c0012a5f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0012a62:	83 c4 10             	add    esp,0x10
c0012a65:	eb e8                	jmp    c0012a4f <Video::putrect(int, int, int, int, unsigned int)+0x27>
c0012a67:	43                   	inc    ebx
c0012a68:	eb e1                	jmp    c0012a4b <Video::putrect(int, int, int, int, unsigned int)+0x23>
c0012a6a:	83 c4 1c             	add    esp,0x1c
c0012a6d:	5b                   	pop    ebx
c0012a6e:	5e                   	pop    esi
c0012a6f:	5f                   	pop    edi
c0012a70:	5d                   	pop    ebp
c0012a71:	c3                   	ret    

c0012a72 <Video::blit(unsigned int*, int, int, int, int)>:
c0012a72:	55                   	push   ebp
c0012a73:	57                   	push   edi
c0012a74:	56                   	push   esi
c0012a75:	53                   	push   ebx
c0012a76:	83 ec 1c             	sub    esp,0x1c
c0012a79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012a7d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012a81:	85 c0                	test   eax,eax
c0012a83:	79 02                	jns    c0012a87 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0012a85:	31 c0                	xor    eax,eax
c0012a87:	c1 e0 02             	shl    eax,0x2
c0012a8a:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0012a8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012a92:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012a96:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0012a9a:	39 d8                	cmp    eax,ebx
c0012a9c:	7e 49                	jle    c0012ae7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0012a9e:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0012aa4:	7c 41                	jl     c0012ae7 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0012aa6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0012aaa:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012aae:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0012ab2:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0012ab6:	39 f9                	cmp    ecx,edi
c0012ab8:	7e 22                	jle    c0012adc <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c0012aba:	83 c5 04             	add    ebp,0x4
c0012abd:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0012ac3:	7c 14                	jl     c0012ad9 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0012ac5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0012ac7:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c0012aca:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012ace:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0012ad2:	56                   	push   esi
c0012ad3:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0012ad6:	83 c4 10             	add    esp,0x10
c0012ad9:	47                   	inc    edi
c0012ada:	eb d2                	jmp    c0012aae <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0012adc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012ae0:	43                   	inc    ebx
c0012ae1:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0012ae5:	eb ab                	jmp    c0012a92 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0012ae7:	83 c4 1c             	add    esp,0x1c
c0012aea:	5b                   	pop    ebx
c0012aeb:	5e                   	pop    esi
c0012aec:	5f                   	pop    edi
c0012aed:	5d                   	pop    ebp
c0012aee:	c3                   	ret    
c0012aef:	90                   	nop

c0012af0 <Video::clearScreen(unsigned int)>:
c0012af0:	57                   	push   edi
c0012af1:	56                   	push   esi
c0012af2:	53                   	push   ebx
c0012af3:	31 db                	xor    ebx,ebx
c0012af5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012af9:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0012aff:	7e 1f                	jle    c0012b20 <Video::clearScreen(unsigned int)+0x30>
c0012b01:	31 ff                	xor    edi,edi
c0012b03:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0012b09:	7e 12                	jle    c0012b1d <Video::clearScreen(unsigned int)+0x2d>
c0012b0b:	8b 06                	mov    eax,DWORD PTR [esi]
c0012b0d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012b11:	53                   	push   ebx
c0012b12:	57                   	push   edi
c0012b13:	47                   	inc    edi
c0012b14:	56                   	push   esi
c0012b15:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012b18:	83 c4 10             	add    esp,0x10
c0012b1b:	eb e6                	jmp    c0012b03 <Video::clearScreen(unsigned int)+0x13>
c0012b1d:	43                   	inc    ebx
c0012b1e:	eb d9                	jmp    c0012af9 <Video::clearScreen(unsigned int)+0x9>
c0012b20:	5b                   	pop    ebx
c0012b21:	5e                   	pop    esi
c0012b22:	5f                   	pop    edi
c0012b23:	c3                   	ret    

c0012b24 <Video::putpixel(int, int, unsigned int)>:
c0012b24:	c7 44 24 04 f4 0e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020ef4
c0012b2c:	e9 05 90 ff ff       	jmp    c000bb36 <kprintf(char const*, ...)>
c0012b31:	90                   	nop

c0012b32 <Video::Video(char const*)>:
c0012b32:	83 ec 0c             	sub    esp,0xc
c0012b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b39:	83 ec 08             	sub    esp,0x8
c0012b3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b40:	50                   	push   eax
c0012b41:	e8 bc db ff ff       	call   c0010702 <Device::Device(char const*)>
c0012b46:	83 c4 10             	add    esp,0x10
c0012b49:	ba 0c 0f 02 c0       	mov    edx,0xc0020f0c
c0012b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b52:	89 10                	mov    DWORD PTR [eax],edx
c0012b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b58:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0012b62:	90                   	nop
c0012b63:	83 c4 0c             	add    esp,0xc
c0012b66:	c3                   	ret    
c0012b67:	90                   	nop

c0012b68 <Video::~Video()>:
c0012b68:	83 ec 0c             	sub    esp,0xc
c0012b6b:	ba 0c 0f 02 c0       	mov    edx,0xc0020f0c
c0012b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b74:	89 10                	mov    DWORD PTR [eax],edx
c0012b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012b7a:	83 ec 0c             	sub    esp,0xc
c0012b7d:	50                   	push   eax
c0012b7e:	e8 31 d8 ff ff       	call   c00103b4 <Device::~Device()>
c0012b83:	83 c4 10             	add    esp,0x10
c0012b86:	90                   	nop
c0012b87:	83 c4 0c             	add    esp,0xc
c0012b8a:	c3                   	ret    
c0012b8b:	90                   	nop

c0012b8c <Video::~Video()>:
c0012b8c:	83 ec 0c             	sub    esp,0xc
c0012b8f:	83 ec 0c             	sub    esp,0xc
c0012b92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b96:	e8 cd ff ff ff       	call   c0012b68 <Video::~Video()>
c0012b9b:	83 c4 10             	add    esp,0x10
c0012b9e:	83 ec 08             	sub    esp,0x8
c0012ba1:	68 64 01 00 00       	push   0x164
c0012ba6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012baa:	e8 68 c6 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c0012baf:	83 c4 10             	add    esp,0x10
c0012bb2:	83 c4 0c             	add    esp,0xc
c0012bb5:	c3                   	ret    

c0012bb6 <Video::isMonochrome()>:
c0012bb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bba:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0012bc0:	c3                   	ret    
c0012bc1:	90                   	nop

c0012bc2 <Video::getWidth()>:
c0012bc2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bc6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012bcc:	c3                   	ret    
c0012bcd:	90                   	nop

c0012bce <Video::getHeight()>:
c0012bce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012bd2:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012bd8:	c3                   	ret    
c0012bd9:	90                   	nop

c0012bda <Video::drawCursor(int, int, unsigned char*, int)>:
c0012bda:	55                   	push   ebp
c0012bdb:	57                   	push   edi
c0012bdc:	56                   	push   esi
c0012bdd:	53                   	push   ebx
c0012bde:	83 ec 2c             	sub    esp,0x2c
c0012be1:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012be5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0012be9:	83 f8 01             	cmp    eax,0x1
c0012bec:	19 c9                	sbb    ecx,ecx
c0012bee:	31 db                	xor    ebx,ebx
c0012bf0:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0012bf4:	89 cd                	mov    ebp,ecx
c0012bf6:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0012bfe:	f7 d5                	not    ebp
c0012c00:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0012c06:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0012c0a:	01 d8                	add    eax,ebx
c0012c0c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012c10:	56                   	push   esi
c0012c11:	e8 b8 ff ff ff       	call   c0012bce <Video::getHeight()>
c0012c16:	59                   	pop    ecx
c0012c17:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012c1b:	7e 70                	jle    c0012c8d <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0012c1d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012c21:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0012c25:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c0012c28:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012c2c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0012c30:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0012c37:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012c3b:	89 f8                	mov    eax,edi
c0012c3d:	83 c0 20             	add    eax,0x20
c0012c40:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012c44:	56                   	push   esi
c0012c45:	e8 78 ff ff ff       	call   c0012bc2 <Video::getWidth()>
c0012c4a:	5a                   	pop    edx
c0012c4b:	39 c7                	cmp    edi,eax
c0012c4d:	7d 34                	jge    c0012c83 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0012c4f:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0012c54:	74 05                	je     c0012c5b <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0012c56:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c58:	55                   	push   ebp
c0012c59:	eb 0d                	jmp    c0012c68 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c0012c5b:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0012c60:	74 12                	je     c0012c74 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0012c62:	8b 06                	mov    eax,DWORD PTR [esi]
c0012c64:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012c68:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012c6c:	57                   	push   edi
c0012c6d:	56                   	push   esi
c0012c6e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012c71:	83 c4 10             	add    esp,0x10
c0012c74:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c0012c78:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0012c7c:	47                   	inc    edi
c0012c7d:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0012c81:	75 c1                	jne    c0012c44 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0012c83:	43                   	inc    ebx
c0012c84:	83 fb 20             	cmp    ebx,0x20
c0012c87:	0f 85 79 ff ff ff    	jne    c0012c06 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0012c8d:	83 c4 2c             	add    esp,0x2c
c0012c90:	5b                   	pop    ebx
c0012c91:	5e                   	pop    esi
c0012c92:	5f                   	pop    edi
c0012c93:	5d                   	pop    ebp
c0012c94:	c3                   	ret    
c0012c95:	90                   	nop

c0012c96 <ACPI::close(int, int, void*)>:
c0012c96:	83 ec 1c             	sub    esp,0x1c
c0012c99:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0012ca1:	74 0a                	je     c0012cad <ACPI::close(int, int, void*)+0x17>
c0012ca3:	b8 00 00 00 00       	mov    eax,0x0
c0012ca8:	e9 9a 00 00 00       	jmp    c0012d47 <ACPI::close(int, int, void*)+0xb1>
c0012cad:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0012cb2:	75 37                	jne    c0012ceb <ACPI::close(int, int, void*)+0x55>
c0012cb4:	83 ec 0c             	sub    esp,0xc
c0012cb7:	68 44 0f 02 c0       	push   0xc0020f44
c0012cbc:	e8 75 8e ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0012cc1:	83 c4 10             	add    esp,0x10
c0012cc4:	a1 c8 34 02 c0       	mov    eax,ds:0xc00234c8
c0012cc9:	85 c0                	test   eax,eax
c0012ccb:	74 07                	je     c0012cd4 <ACPI::close(int, int, void*)+0x3e>
c0012ccd:	a1 c8 34 02 c0       	mov    eax,ds:0xc00234c8
c0012cd2:	ff d0                	call   eax
c0012cd4:	83 ec 0c             	sub    esp,0xc
c0012cd7:	68 18 10 02 c0       	push   0xc0021018
c0012cdc:	e8 73 8f ff ff       	call   c000bc54 <panic(char const*)>
c0012ce1:	83 c4 10             	add    esp,0x10
c0012ce4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012ce9:	eb 5c                	jmp    c0012d47 <ACPI::close(int, int, void*)+0xb1>
c0012ceb:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0012cf0:	75 50                	jne    c0012d42 <ACPI::close(int, int, void*)+0xac>
c0012cf2:	a1 c4 34 02 c0       	mov    eax,ds:0xc00234c4
c0012cf7:	85 c0                	test   eax,eax
c0012cf9:	74 07                	je     c0012d02 <ACPI::close(int, int, void*)+0x6c>
c0012cfb:	a1 c4 34 02 c0       	mov    eax,ds:0xc00234c4
c0012d00:	ff d0                	call   eax
c0012d02:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0012d07:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0012d0c:	83 e0 02             	and    eax,0x2
c0012d0f:	74 1c                	je     c0012d2d <ACPI::close(int, int, void*)+0x97>
c0012d11:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0012d18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d1c:	89 c2                	mov    edx,eax
c0012d1e:	ec                   	in     al,dx
c0012d1f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012d23:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0012d27:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012d2b:	eb da                	jmp    c0012d07 <ACPI::close(int, int, void*)+0x71>
c0012d2d:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0012d34:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0012d39:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0012d3d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012d41:	ee                   	out    dx,al
c0012d42:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012d47:	83 c4 1c             	add    esp,0x1c
c0012d4a:	c3                   	ret    

c0012d4b <findRSDP()>:
c0012d4b:	83 ec 1c             	sub    esp,0x1c
c0012d4e:	a1 c8 2e 02 c0       	mov    eax,ds:0xc0022ec8
c0012d53:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012d59:	83 e0 04             	and    eax,0x4
c0012d5c:	84 c0                	test   al,al
c0012d5e:	75 07                	jne    c0012d67 <findRSDP()+0x1c>
c0012d60:	b8 00 00 00 00       	mov    eax,0x0
c0012d65:	eb 6a                	jmp    c0012dd1 <findRSDP()+0x86>
c0012d67:	a1 10 2f 02 c0       	mov    eax,ds:0xc0022f10
c0012d6c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0012d71:	7f 1b                	jg     c0012d8e <findRSDP()+0x43>
c0012d73:	a1 c8 2e 02 c0       	mov    eax,ds:0xc0022ec8
c0012d78:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0012d7e:	83 e2 fb             	and    edx,0xfffffffb
c0012d81:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0012d87:	b8 00 00 00 00       	mov    eax,0x0
c0012d8c:	eb 43                	jmp    c0012dd1 <findRSDP()+0x86>
c0012d8e:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0012d96:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0012d9e:	77 2c                	ja     c0012dcc <findRSDP()+0x81>
c0012da0:	83 ec 04             	sub    esp,0x4
c0012da3:	6a 08                	push   0x8
c0012da5:	68 51 0f 02 c0       	push   0xc0020f51
c0012daa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012dae:	e8 bc d7 fe ff       	call   c000056f <memcmp>
c0012db3:	83 c4 10             	add    esp,0x10
c0012db6:	85 c0                	test   eax,eax
c0012db8:	0f 94 c0             	sete   al
c0012dbb:	84 c0                	test   al,al
c0012dbd:	74 06                	je     c0012dc5 <findRSDP()+0x7a>
c0012dbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012dc3:	eb 0c                	jmp    c0012dd1 <findRSDP()+0x86>
c0012dc5:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0012dca:	eb ca                	jmp    c0012d96 <findRSDP()+0x4b>
c0012dcc:	b8 00 00 00 00       	mov    eax,0x0
c0012dd1:	83 c4 1c             	add    esp,0x1c
c0012dd4:	c3                   	ret    

c0012dd5 <loadACPITables(unsigned char*)>:
c0012dd5:	56                   	push   esi
c0012dd6:	53                   	push   ebx
c0012dd7:	83 ec 44             	sub    esp,0x44
c0012dda:	a1 c8 2e 02 c0       	mov    eax,ds:0xc0022ec8
c0012ddf:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0012de5:	83 e0 04             	and    eax,0x4
c0012de8:	84 c0                	test   al,al
c0012dea:	0f 84 05 02 00 00    	je     c0012ff5 <loadACPITables(unsigned char*)+0x220>
c0012df0:	a0 e0 36 02 c0       	mov    al,ds:0xc00236e0
c0012df5:	84 c0                	test   al,al
c0012df7:	74 75                	je     c0012e6e <loadACPITables(unsigned char*)+0x99>
c0012df9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012dfd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012e01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012e05:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e08:	83 e8 24             	sub    eax,0x24
c0012e0b:	c1 e8 03             	shr    eax,0x3
c0012e0e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012e12:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0012e1a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012e1e:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0012e22:	0f 8d b2 00 00 00    	jge    c0012eda <loadACPITables(unsigned char*)+0x105>
c0012e28:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012e2c:	83 c0 24             	add    eax,0x24
c0012e2f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012e33:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012e37:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012e3b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012e3f:	c1 e0 03             	shl    eax,0x3
c0012e42:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0012e46:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012e4a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012e4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e4f:	89 c1                	mov    ecx,eax
c0012e51:	a1 cc 34 02 c0       	mov    eax,ds:0xc00234cc
c0012e56:	8d 50 01             	lea    edx,[eax+0x1]
c0012e59:	89 15 cc 34 02 c0    	mov    DWORD PTR ds:0xc00234cc,edx
c0012e5f:	89 ca                	mov    edx,ecx
c0012e61:	89 14 c5 e4 34 02 c0 	mov    DWORD PTR [eax*8-0x3ffdcb1c],edx
c0012e68:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0012e6c:	eb ac                	jmp    c0012e1a <loadACPITables(unsigned char*)+0x45>
c0012e6e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012e72:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012e76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e7d:	83 e8 24             	sub    eax,0x24
c0012e80:	c1 e8 02             	shr    eax,0x2
c0012e83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012e87:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0012e8f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012e93:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0012e97:	7d 41                	jge    c0012eda <loadACPITables(unsigned char*)+0x105>
c0012e99:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0012e9d:	83 c0 24             	add    eax,0x24
c0012ea0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012ea4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012ea8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012eac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012eb0:	c1 e0 02             	shl    eax,0x2
c0012eb3:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0012eb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012ebb:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012ebd:	a1 cc 34 02 c0       	mov    eax,ds:0xc00234cc
c0012ec2:	8d 50 01             	lea    edx,[eax+0x1]
c0012ec5:	89 15 cc 34 02 c0    	mov    DWORD PTR ds:0xc00234cc,edx
c0012ecb:	89 ca                	mov    edx,ecx
c0012ecd:	89 14 c5 e4 34 02 c0 	mov    DWORD PTR [eax*8-0x3ffdcb1c],edx
c0012ed4:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0012ed8:	eb b5                	jmp    c0012e8f <loadACPITables(unsigned char*)+0xba>
c0012eda:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0012ee2:	a1 cc 34 02 c0       	mov    eax,ds:0xc00234cc
c0012ee7:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0012eeb:	0f 8d 05 01 00 00    	jge    c0012ff6 <loadACPITables(unsigned char*)+0x221>
c0012ef1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012ef5:	8b 04 c5 e4 34 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdcb1c]
c0012efc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012f00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012f08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f0c:	25 ff 0f 00 00       	and    eax,0xfff
c0012f11:	89 c6                	mov    esi,eax
c0012f13:	e8 ef b2 ff ff       	call   c000e207 <Virt::getAKernelVAS()>
c0012f18:	89 c3                	mov    ebx,eax
c0012f1a:	83 ec 0c             	sub    esp,0xc
c0012f1d:	6a 01                	push   0x1
c0012f1f:	e8 53 b1 ff ff       	call   c000e077 <Virt::allocateKernelVirtualPages(int)>
c0012f24:	83 c4 10             	add    esp,0x10
c0012f27:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012f2b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012f31:	83 ec 0c             	sub    esp,0xc
c0012f34:	6a 01                	push   0x1
c0012f36:	6a 01                	push   0x1
c0012f38:	50                   	push   eax
c0012f39:	52                   	push   edx
c0012f3a:	53                   	push   ebx
c0012f3b:	e8 5a ba ff ff       	call   c000e99a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012f40:	83 c4 20             	add    esp,0x20
c0012f43:	09 f0                	or     eax,esi
c0012f45:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012f49:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012f4d:	c1 e0 03             	shl    eax,0x3
c0012f50:	05 e0 34 02 c0       	add    eax,0xc00234e0
c0012f55:	83 ec 04             	sub    esp,0x4
c0012f58:	6a 04                	push   0x4
c0012f5a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012f5e:	50                   	push   eax
c0012f5f:	e8 6e d6 fe ff       	call   c00005d2 <memcpy>
c0012f64:	83 c4 10             	add    esp,0x10
c0012f67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f6b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012f72:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012f76:	05 00 10 00 00       	add    eax,0x1000
c0012f7b:	c1 e8 0c             	shr    eax,0xc
c0012f7e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f86:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012f8d:	25 ff 0f 00 00       	and    eax,0xfff
c0012f92:	89 c6                	mov    esi,eax
c0012f94:	e8 6e b2 ff ff       	call   c000e207 <Virt::getAKernelVAS()>
c0012f99:	89 c3                	mov    ebx,eax
c0012f9b:	83 ec 0c             	sub    esp,0xc
c0012f9e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012fa2:	e8 d0 b0 ff ff       	call   c000e077 <Virt::allocateKernelVirtualPages(int)>
c0012fa7:	83 c4 10             	add    esp,0x10
c0012faa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012fae:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012fb4:	83 ec 0c             	sub    esp,0xc
c0012fb7:	6a 01                	push   0x1
c0012fb9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012fbd:	50                   	push   eax
c0012fbe:	52                   	push   edx
c0012fbf:	53                   	push   ebx
c0012fc0:	e8 d5 b9 ff ff       	call   c000e99a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012fc5:	83 c4 20             	add    esp,0x20
c0012fc8:	09 f0                	or     eax,esi
c0012fca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012fce:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0012fd1:	83 ec 0c             	sub    esp,0xc
c0012fd4:	50                   	push   eax
c0012fd5:	e8 d3 b3 ff ff       	call   c000e3ad <Virt::freeKernelVirtualPages(unsigned long)>
c0012fda:	83 c4 10             	add    esp,0x10
c0012fdd:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012fe1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0012fe5:	89 14 c5 e4 34 02 c0 	mov    DWORD PTR [eax*8-0x3ffdcb1c],edx
c0012fec:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0012ff0:	e9 ed fe ff ff       	jmp    c0012ee2 <loadACPITables(unsigned char*)+0x10d>
c0012ff5:	90                   	nop
c0012ff6:	83 c4 44             	add    esp,0x44
c0012ff9:	5b                   	pop    ebx
c0012ffa:	5e                   	pop    esi
c0012ffb:	c3                   	ret    

c0012ffc <findRSDT(unsigned char*)>:
c0012ffc:	56                   	push   esi
c0012ffd:	53                   	push   ebx
c0012ffe:	83 ec 44             	sub    esp,0x44
c0013001:	a1 c8 2e 02 c0       	mov    eax,ds:0xc0022ec8
c0013006:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001300c:	83 e0 04             	and    eax,0x4
c001300f:	84 c0                	test   al,al
c0013011:	75 0a                	jne    c001301d <findRSDT(unsigned char*)+0x21>
c0013013:	b8 00 00 00 00       	mov    eax,0x0
c0013018:	e9 f7 00 00 00       	jmp    c0013114 <findRSDT(unsigned char*)+0x118>
c001301d:	83 ec 04             	sub    esp,0x4
c0013020:	6a 24                	push   0x24
c0013022:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0013026:	8d 44 24 18          	lea    eax,[esp+0x18]
c001302a:	50                   	push   eax
c001302b:	e8 a2 d5 fe ff       	call   c00005d2 <memcpy>
c0013030:	83 c4 10             	add    esp,0x10
c0013033:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0013037:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c001303b:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0013043:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013047:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001304b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001304f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013053:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013057:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001305b:	25 ff 0f 00 00       	and    eax,0xfff
c0013060:	89 c6                	mov    esi,eax
c0013062:	e8 a0 b1 ff ff       	call   c000e207 <Virt::getAKernelVAS()>
c0013067:	89 c3                	mov    ebx,eax
c0013069:	83 ec 0c             	sub    esp,0xc
c001306c:	6a 02                	push   0x2
c001306e:	e8 04 b0 ff ff       	call   c000e077 <Virt::allocateKernelVirtualPages(int)>
c0013073:	83 c4 10             	add    esp,0x10
c0013076:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001307a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013080:	83 ec 0c             	sub    esp,0xc
c0013083:	6a 01                	push   0x1
c0013085:	6a 02                	push   0x2
c0013087:	50                   	push   eax
c0013088:	52                   	push   edx
c0013089:	53                   	push   ebx
c001308a:	e8 0b b9 ff ff       	call   c000e99a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001308f:	83 c4 20             	add    esp,0x20
c0013092:	09 f0                	or     eax,esi
c0013094:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0013098:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001309c:	25 ff 0f 00 00       	and    eax,0xfff
c00130a1:	89 c6                	mov    esi,eax
c00130a3:	e8 5f b1 ff ff       	call   c000e207 <Virt::getAKernelVAS()>
c00130a8:	89 c3                	mov    ebx,eax
c00130aa:	83 ec 0c             	sub    esp,0xc
c00130ad:	6a 02                	push   0x2
c00130af:	e8 c3 af ff ff       	call   c000e077 <Virt::allocateKernelVirtualPages(int)>
c00130b4:	83 c4 10             	add    esp,0x10
c00130b7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00130bb:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00130c1:	83 ec 0c             	sub    esp,0xc
c00130c4:	6a 01                	push   0x1
c00130c6:	6a 02                	push   0x2
c00130c8:	50                   	push   eax
c00130c9:	52                   	push   edx
c00130ca:	53                   	push   ebx
c00130cb:	e8 ca b8 ff ff       	call   c000e99a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00130d0:	83 c4 20             	add    esp,0x20
c00130d3:	09 f0                	or     eax,esi
c00130d5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00130d9:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c00130de:	75 11                	jne    c00130f1 <findRSDT(unsigned char*)+0xf5>
c00130e0:	c6 05 e0 36 02 c0 00 	mov    BYTE PTR ds:0xc00236e0,0x0
c00130e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00130eb:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00130ef:	eb 1f                	jmp    c0013110 <findRSDT(unsigned char*)+0x114>
c00130f1:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c00130f6:	75 11                	jne    c0013109 <findRSDT(unsigned char*)+0x10d>
c00130f8:	c6 05 e0 36 02 c0 01 	mov    BYTE PTR ds:0xc00236e0,0x1
c00130ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013103:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013107:	eb 07                	jmp    c0013110 <findRSDT(unsigned char*)+0x114>
c0013109:	b8 00 00 00 00       	mov    eax,0x0
c001310e:	eb 04                	jmp    c0013114 <findRSDT(unsigned char*)+0x118>
c0013110:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013114:	83 c4 44             	add    esp,0x44
c0013117:	5b                   	pop    ebx
c0013118:	5e                   	pop    esi
c0013119:	c3                   	ret    

c001311a <findDataTable(unsigned char*, char*)>:
c001311a:	83 ec 1c             	sub    esp,0x1c
c001311d:	a1 c8 2e 02 c0       	mov    eax,ds:0xc0022ec8
c0013122:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013128:	83 e0 04             	and    eax,0x4
c001312b:	84 c0                	test   al,al
c001312d:	75 07                	jne    c0013136 <findDataTable(unsigned char*, char*)+0x1c>
c001312f:	b8 00 00 00 00       	mov    eax,0x0
c0013134:	eb 7c                	jmp    c00131b2 <findDataTable(unsigned char*, char*)+0x98>
c0013136:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001313e:	a1 cc 34 02 c0       	mov    eax,ds:0xc00234cc
c0013143:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0013147:	7d 3a                	jge    c0013183 <findDataTable(unsigned char*, char*)+0x69>
c0013149:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001314d:	c1 e0 03             	shl    eax,0x3
c0013150:	05 e0 34 02 c0       	add    eax,0xc00234e0
c0013155:	83 ec 04             	sub    esp,0x4
c0013158:	6a 04                	push   0x4
c001315a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001315e:	50                   	push   eax
c001315f:	e8 0b d4 fe ff       	call   c000056f <memcmp>
c0013164:	83 c4 10             	add    esp,0x10
c0013167:	85 c0                	test   eax,eax
c0013169:	0f 94 c0             	sete   al
c001316c:	84 c0                	test   al,al
c001316e:	74 0d                	je     c001317d <findDataTable(unsigned char*, char*)+0x63>
c0013170:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013174:	8b 04 c5 e4 34 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdcb1c]
c001317b:	eb 35                	jmp    c00131b2 <findDataTable(unsigned char*, char*)+0x98>
c001317d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0013181:	eb bb                	jmp    c001313e <findDataTable(unsigned char*, char*)+0x24>
c0013183:	a0 e0 36 02 c0       	mov    al,ds:0xc00236e0
c0013188:	84 c0                	test   al,al
c001318a:	74 07                	je     c0013193 <findDataTable(unsigned char*, char*)+0x79>
c001318c:	b8 58 00 00 00       	mov    eax,0x58
c0013191:	eb 05                	jmp    c0013198 <findDataTable(unsigned char*, char*)+0x7e>
c0013193:	b8 52 00 00 00       	mov    eax,0x52
c0013198:	83 ec 04             	sub    esp,0x4
c001319b:	50                   	push   eax
c001319c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00131a0:	68 3c 10 02 c0       	push   0xc002103c
c00131a5:	e8 8c 89 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c00131aa:	83 c4 10             	add    esp,0x10
c00131ad:	b8 00 00 00 00       	mov    eax,0x0
c00131b2:	83 c4 1c             	add    esp,0x1c
c00131b5:	c3                   	ret    

c00131b6 <scanMADT()>:
c00131b6:	83 ec 2c             	sub    esp,0x2c
c00131b9:	a1 c8 2e 02 c0       	mov    eax,ds:0xc0022ec8
c00131be:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00131c4:	83 e0 04             	and    eax,0x4
c00131c7:	84 c0                	test   al,al
c00131c9:	0f 84 73 03 00 00    	je     c0013542 <scanMADT()+0x38c>
c00131cf:	e8 77 fb ff ff       	call   c0012d4b <findRSDP()>
c00131d4:	a3 ec 36 02 c0       	mov    ds:0xc00236ec,eax
c00131d9:	a1 ec 36 02 c0       	mov    eax,ds:0xc00236ec
c00131de:	85 c0                	test   eax,eax
c00131e0:	75 19                	jne    c00131fb <scanMADT()+0x45>
c00131e2:	a1 c8 2e 02 c0       	mov    eax,ds:0xc0022ec8
c00131e7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00131ed:	83 e2 fb             	and    edx,0xfffffffb
c00131f0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00131f6:	e9 4b 03 00 00       	jmp    c0013546 <scanMADT()+0x390>
c00131fb:	a1 ec 36 02 c0       	mov    eax,ds:0xc00236ec
c0013200:	83 ec 0c             	sub    esp,0xc
c0013203:	50                   	push   eax
c0013204:	e8 f3 fd ff ff       	call   c0012ffc <findRSDT(unsigned char*)>
c0013209:	83 c4 10             	add    esp,0x10
c001320c:	a3 e8 36 02 c0       	mov    ds:0xc00236e8,eax
c0013211:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0013216:	85 c0                	test   eax,eax
c0013218:	75 19                	jne    c0013233 <scanMADT()+0x7d>
c001321a:	a1 c8 2e 02 c0       	mov    eax,ds:0xc0022ec8
c001321f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013225:	83 e2 fb             	and    edx,0xfffffffb
c0013228:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001322e:	e9 13 03 00 00       	jmp    c0013546 <scanMADT()+0x390>
c0013233:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0013238:	83 ec 0c             	sub    esp,0xc
c001323b:	50                   	push   eax
c001323c:	e8 94 fb ff ff       	call   c0012dd5 <loadACPITables(unsigned char*)>
c0013241:	83 c4 10             	add    esp,0x10
c0013244:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c0013249:	83 ec 08             	sub    esp,0x8
c001324c:	68 5a 0f 02 c0       	push   0xc0020f5a
c0013251:	50                   	push   eax
c0013252:	e8 c3 fe ff ff       	call   c001311a <findDataTable(unsigned char*, char*)>
c0013257:	83 c4 10             	add    esp,0x10
c001325a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001325e:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013263:	75 19                	jne    c001327e <scanMADT()+0xc8>
c0013265:	a1 c8 2e 02 c0       	mov    eax,ds:0xc0022ec8
c001326a:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013270:	83 e2 fe             	and    edx,0xfffffffe
c0013273:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013279:	e9 c8 02 00 00       	jmp    c0013546 <scanMADT()+0x390>
c001327e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013286:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001328a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001328d:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0013291:	0f 87 af 02 00 00    	ja     c0013546 <scanMADT()+0x390>
c0013297:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c001329f:	0f 87 a1 02 00 00    	ja     c0013546 <scanMADT()+0x390>
c00132a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132a9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00132ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132b1:	8d 50 01             	lea    edx,[eax+0x1]
c00132b4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00132b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00132bc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00132c0:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c00132c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132c8:	8d 50 01             	lea    edx,[eax+0x1]
c00132cb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00132cf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00132d3:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00132d7:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c00132db:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c00132e0:	0f 86 5f 02 00 00    	jbe    c0013545 <scanMADT()+0x38f>
c00132e6:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00132eb:	75 57                	jne    c0013344 <scanMADT()+0x18e>
c00132ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00132f1:	8d 50 01             	lea    edx,[eax+0x1]
c00132f4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00132f8:	8a 15 20 38 02 c0    	mov    dl,BYTE PTR ds:0xc0023820
c00132fe:	0f b6 d2             	movzx  edx,dl
c0013301:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013305:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013309:	88 82 60 38 02 c0    	mov    BYTE PTR [edx-0x3ffdc7a0],al
c001330f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013313:	8d 50 01             	lea    edx,[eax+0x1]
c0013316:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001331a:	8a 15 20 38 02 c0    	mov    dl,BYTE PTR ds:0xc0023820
c0013320:	8d 4a 01             	lea    ecx,[edx+0x1]
c0013323:	88 0d 20 38 02 c0    	mov    BYTE PTR ds:0xc0023820,cl
c0013329:	0f b6 d2             	movzx  edx,dl
c001332c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013330:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013334:	88 82 40 38 02 c0    	mov    BYTE PTR [edx-0x3ffdc7c0],al
c001333a:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c001333f:	e9 ea 01 00 00       	jmp    c001352e <scanMADT()+0x378>
c0013344:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0013349:	0f 85 14 01 00 00    	jne    c0013463 <scanMADT()+0x2ad>
c001334f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013353:	8d 50 01             	lea    edx,[eax+0x1]
c0013356:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001335a:	8a 15 f0 36 02 c0    	mov    dl,BYTE PTR ds:0xc00236f0
c0013360:	0f b6 d2             	movzx  edx,dl
c0013363:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013367:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c001336b:	88 82 00 37 02 c0    	mov    BYTE PTR [edx-0x3ffdc900],al
c0013371:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0013375:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013379:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001337d:	01 d0                	add    eax,edx
c001337f:	83 c0 2c             	add    eax,0x2c
c0013382:	8a 00                	mov    al,BYTE PTR [eax]
c0013384:	0f b6 d0             	movzx  edx,al
c0013387:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001338b:	8d 48 01             	lea    ecx,[eax+0x1]
c001338e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013392:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013396:	0f b6 c0             	movzx  eax,al
c0013399:	c1 e0 08             	shl    eax,0x8
c001339c:	89 d1                	mov    ecx,edx
c001339e:	09 c1                	or     ecx,eax
c00133a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133a4:	8d 50 02             	lea    edx,[eax+0x2]
c00133a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133ab:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00133af:	0f b6 c0             	movzx  eax,al
c00133b2:	c1 e0 10             	shl    eax,0x10
c00133b5:	09 c1                	or     ecx,eax
c00133b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133bb:	8d 50 03             	lea    edx,[eax+0x3]
c00133be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133c2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00133c6:	0f b6 c0             	movzx  eax,al
c00133c9:	c1 e0 18             	shl    eax,0x18
c00133cc:	09 c1                	or     ecx,eax
c00133ce:	89 ca                	mov    edx,ecx
c00133d0:	a0 f0 36 02 c0       	mov    al,ds:0xc00236f0
c00133d5:	0f b6 c0             	movzx  eax,al
c00133d8:	89 14 85 20 37 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc8e0],edx
c00133df:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00133e4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00133e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133ec:	01 d0                	add    eax,edx
c00133ee:	83 c0 2c             	add    eax,0x2c
c00133f1:	8a 00                	mov    al,BYTE PTR [eax]
c00133f3:	0f b6 d0             	movzx  edx,al
c00133f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00133fa:	8d 48 01             	lea    ecx,[eax+0x1]
c00133fd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013401:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013405:	0f b6 c0             	movzx  eax,al
c0013408:	c1 e0 08             	shl    eax,0x8
c001340b:	89 d1                	mov    ecx,edx
c001340d:	09 c1                	or     ecx,eax
c001340f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013413:	8d 50 02             	lea    edx,[eax+0x2]
c0013416:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001341a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001341e:	0f b6 c0             	movzx  eax,al
c0013421:	c1 e0 10             	shl    eax,0x10
c0013424:	09 c1                	or     ecx,eax
c0013426:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001342a:	8d 50 03             	lea    edx,[eax+0x3]
c001342d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013431:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013435:	0f b6 c0             	movzx  eax,al
c0013438:	c1 e0 18             	shl    eax,0x18
c001343b:	09 c1                	or     ecx,eax
c001343d:	89 ca                	mov    edx,ecx
c001343f:	a0 f0 36 02 c0       	mov    al,ds:0xc00236f0
c0013444:	0f b6 c0             	movzx  eax,al
c0013447:	89 14 85 a0 37 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc860],edx
c001344e:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013453:	a0 f0 36 02 c0       	mov    al,ds:0xc00236f0
c0013458:	40                   	inc    eax
c0013459:	a2 f0 36 02 c0       	mov    ds:0xc00236f0,al
c001345e:	e9 cb 00 00 00       	jmp    c001352e <scanMADT()+0x378>
c0013463:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0013468:	0f 85 a6 00 00 00    	jne    c0013514 <scanMADT()+0x35e>
c001346e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013472:	8d 50 01             	lea    edx,[eax+0x1]
c0013475:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013479:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001347d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013481:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0013485:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013489:	8d 50 01             	lea    edx,[eax+0x1]
c001348c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013490:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013494:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013498:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c001349c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00134a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134a4:	01 d0                	add    eax,edx
c00134a6:	83 c0 2c             	add    eax,0x2c
c00134a9:	8a 00                	mov    al,BYTE PTR [eax]
c00134ab:	0f b6 d0             	movzx  edx,al
c00134ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134b2:	8d 48 01             	lea    ecx,[eax+0x1]
c00134b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134b9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00134bd:	0f b6 c0             	movzx  eax,al
c00134c0:	c1 e0 08             	shl    eax,0x8
c00134c3:	89 d1                	mov    ecx,edx
c00134c5:	09 c1                	or     ecx,eax
c00134c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134cb:	8d 50 02             	lea    edx,[eax+0x2]
c00134ce:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134d2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00134d6:	0f b6 c0             	movzx  eax,al
c00134d9:	c1 e0 10             	shl    eax,0x10
c00134dc:	09 c1                	or     ecx,eax
c00134de:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134e2:	8d 50 03             	lea    edx,[eax+0x3]
c00134e5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134e9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00134ed:	0f b6 c0             	movzx  eax,al
c00134f0:	c1 e0 18             	shl    eax,0x18
c00134f3:	09 c8                	or     eax,ecx
c00134f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00134f9:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c00134fe:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0013503:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0013508:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001350c:	88 90 20 26 02 c0    	mov    BYTE PTR [eax-0x3ffdd9e0],dl
c0013512:	eb 1a                	jmp    c001352e <scanMADT()+0x378>
c0013514:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0013519:	75 07                	jne    c0013522 <scanMADT()+0x36c>
c001351b:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013520:	eb 0c                	jmp    c001352e <scanMADT()+0x378>
c0013522:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0013527:	75 05                	jne    c001352e <scanMADT()+0x378>
c0013529:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c001352e:	0f b6 54 24 12       	movzx  edx,BYTE PTR [esp+0x12]
c0013533:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013537:	01 d0                	add    eax,edx
c0013539:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001353d:	e9 44 fd ff ff       	jmp    c0013286 <scanMADT()+0xd0>
c0013542:	90                   	nop
c0013543:	eb 01                	jmp    c0013546 <scanMADT()+0x390>
c0013545:	90                   	nop
c0013546:	83 c4 2c             	add    esp,0x2c
c0013549:	c3                   	ret    

c001354a <ACPI::ACPI()>:
c001354a:	83 ec 0c             	sub    esp,0xc
c001354d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013551:	83 ec 08             	sub    esp,0x8
c0013554:	68 5f 0f 02 c0       	push   0xc0020f5f
c0013559:	50                   	push   eax
c001355a:	e8 a3 d1 ff ff       	call   c0010702 <Device::Device(char const*)>
c001355f:	83 c4 10             	add    esp,0x10
c0013562:	ba 08 11 02 c0       	mov    edx,0xc0021108
c0013567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001356b:	89 10                	mov    DWORD PTR [eax],edx
c001356d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013571:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0013578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001357c:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0013586:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001358a:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0013594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013598:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c001359f:	e8 12 fc ff ff       	call   c00131b6 <scanMADT()>
c00135a4:	90                   	nop
c00135a5:	83 c4 0c             	add    esp,0xc
c00135a8:	c3                   	ret    
c00135a9:	90                   	nop

c00135aa <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00135aa:	83 ec 2c             	sub    esp,0x2c
c00135ad:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00135b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00135b5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00135b9:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00135bd:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00135c2:	88 d0                	mov    al,dl
c00135c4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00135c8:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00135cd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00135d5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00135d9:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c00135df:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00135e3:	0f 8d 97 00 00 00    	jge    c0013680 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c00135e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00135ed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00135f1:	83 c2 2a             	add    edx,0x2a
c00135f4:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c00135f8:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c00135fd:	75 78                	jne    c0013677 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c00135ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013603:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013607:	83 c2 2a             	add    edx,0x2a
c001360a:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001360e:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0013612:	75 63                	jne    c0013677 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013614:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013619:	74 3a                	je     c0013655 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c001361b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001361f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013623:	83 c2 2a             	add    edx,0x2a
c0013626:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c001362a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001362e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013631:	39 c2                	cmp    edx,eax
c0013633:	74 10                	je     c0013645 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0013635:	83 ec 0c             	sub    esp,0xc
c0013638:	68 6c 10 02 c0       	push   0xc002106c
c001363d:	e8 12 86 ff ff       	call   c000bc54 <panic(char const*)>
c0013642:	83 c4 10             	add    esp,0x10
c0013645:	83 ec 0c             	sub    esp,0xc
c0013648:	68 64 0f 02 c0       	push   0xc0020f64
c001364d:	e8 02 86 ff ff       	call   c000bc54 <panic(char const*)>
c0013652:	83 c4 10             	add    esp,0x10
c0013655:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013659:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001365d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013661:	83 c2 2a             	add    edx,0x2a
c0013664:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0013668:	8b 02                	mov    eax,DWORD PTR [edx]
c001366a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001366d:	89 01                	mov    DWORD PTR [ecx],eax
c001366f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0013672:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0013677:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001367b:	e9 55 ff ff ff       	jmp    c00135d5 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0013680:	90                   	nop
c0013681:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013685:	83 c4 2c             	add    esp,0x2c
c0013688:	c2 04 00             	ret    0x4
c001368b:	90                   	nop

c001368c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c001368c:	56                   	push   esi
c001368d:	53                   	push   ebx
c001368e:	83 ec 14             	sub    esp,0x14
c0013691:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013695:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013699:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001369d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00136a2:	88 c8                	mov    al,cl
c00136a4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00136a8:	88 d0                	mov    al,dl
c00136aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00136ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136b2:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c00136b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136bc:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c00136c2:	0f b6 4c 24 04       	movzx  ecx,BYTE PTR [esp+0x4]
c00136c7:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00136cc:	0f b7 44 24 0c       	movzx  eax,WORD PTR [esp+0xc]
c00136d1:	83 ec 04             	sub    esp,0x4
c00136d4:	56                   	push   esi
c00136d5:	53                   	push   ebx
c00136d6:	51                   	push   ecx
c00136d7:	52                   	push   edx
c00136d8:	50                   	push   eax
c00136d9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00136dd:	68 9c 10 02 c0       	push   0xc002109c
c00136e2:	e8 4f 84 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c00136e7:	83 c4 20             	add    esp,0x20
c00136ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136ee:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c00136f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00136f8:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c00136fb:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c00136ff:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0013703:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013707:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001370d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013711:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0013714:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013718:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001371d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013721:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013727:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001372b:	8d 48 01             	lea    ecx,[eax+0x1]
c001372e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013732:	83 c2 2a             	add    edx,0x2a
c0013735:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0013739:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001373d:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013743:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013747:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c001374a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001374e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0013752:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013756:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001375c:	8d 50 01             	lea    edx,[eax+0x1]
c001375f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013763:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0013769:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001376d:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013773:	3d 00 08 00 00       	cmp    eax,0x800
c0013778:	75 10                	jne    c001378a <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xfe>
c001377a:	83 ec 0c             	sub    esp,0xc
c001377d:	68 73 0f 02 c0       	push   0xc0020f73
c0013782:	e8 cd 84 ff ff       	call   c000bc54 <panic(char const*)>
c0013787:	83 c4 10             	add    esp,0x10
c001378a:	90                   	nop
c001378b:	83 c4 14             	add    esp,0x14
c001378e:	5b                   	pop    ebx
c001378f:	5e                   	pop    esi
c0013790:	c3                   	ret    
c0013791:	90                   	nop

c0013792 <ACPI::setScreenBrightnessLevel(void*, int)>:
c0013792:	b8 00 00 00 00       	mov    eax,0x0
c0013797:	c3                   	ret    

c0013798 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0013798:	83 ec 1c             	sub    esp,0x1c
c001379b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001379f:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00137a2:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00137a6:	a1 c8 2e 02 c0       	mov    eax,ds:0xc0022ec8
c00137ab:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00137b0:	83 ec 08             	sub    esp,0x8
c00137b3:	52                   	push   edx
c00137b4:	50                   	push   eax
c00137b5:	e8 7c 7a ff ff       	call   c000b236 <Computer::readCMOS(unsigned char)>
c00137ba:	83 c4 10             	add    esp,0x10
c00137bd:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00137c1:	a1 c8 2e 02 c0       	mov    eax,ds:0xc0022ec8
c00137c6:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00137cb:	83 ec 04             	sub    esp,0x4
c00137ce:	6a 01                	push   0x1
c00137d0:	52                   	push   edx
c00137d1:	50                   	push   eax
c00137d2:	e8 67 7b ff ff       	call   c000b33e <Computer::writeCMOS(unsigned char, unsigned char)>
c00137d7:	83 c4 10             	add    esp,0x10
c00137da:	90                   	nop
c00137db:	83 c4 1c             	add    esp,0x1c
c00137de:	c3                   	ret    
c00137df:	90                   	nop

c00137e0 <ACPI::open(int, int, void*)>:
c00137e0:	53                   	push   ebx
c00137e1:	83 ec 18             	sub    esp,0x18
c00137e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00137e8:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00137ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00137f3:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00137f9:	84 c0                	test   al,al
c00137fb:	74 60                	je     c001385d <ACPI::open(int, int, void*)+0x7d>
c00137fd:	83 ec 0c             	sub    esp,0xc
c0013800:	68 58 01 00 00       	push   0x158
c0013805:	e8 fe b9 ff ff       	call   c000f208 <operator new(unsigned long)>
c001380a:	83 c4 10             	add    esp,0x10
c001380d:	89 c3                	mov    ebx,eax
c001380f:	83 ec 0c             	sub    esp,0xc
c0013812:	53                   	push   ebx
c0013813:	e8 00 76 00 00       	call   c001ae18 <PCI::PCI()>
c0013818:	83 c4 10             	add    esp,0x10
c001381b:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001381f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013823:	83 ec 08             	sub    esp,0x8
c0013826:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001382a:	50                   	push   eax
c001382b:	e8 e2 cc ff ff       	call   c0010512 <Device::addChild(Device*)>
c0013830:	83 c4 10             	add    esp,0x10
c0013833:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013837:	8b 00                	mov    eax,DWORD PTR [eax]
c0013839:	83 c0 08             	add    eax,0x8
c001383c:	8b 00                	mov    eax,DWORD PTR [eax]
c001383e:	6a 00                	push   0x0
c0013840:	6a 00                	push   0x0
c0013842:	6a 00                	push   0x0
c0013844:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013848:	ff d0                	call   eax
c001384a:	83 c4 10             	add    esp,0x10
c001384d:	83 ec 0c             	sub    esp,0xc
c0013850:	68 90 0f 02 c0       	push   0xc0020f90
c0013855:	e8 dc 82 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c001385a:	83 c4 10             	add    esp,0x10
c001385d:	83 ec 0c             	sub    esp,0xc
c0013860:	68 9b 0f 02 c0       	push   0xc0020f9b
c0013865:	e8 7e 2d 00 00       	call   c00165e8 <Thr::loadKernelSymbolTable(char const*)>
c001386a:	83 c4 10             	add    esp,0x10
c001386d:	8b 1d c8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022ec8
c0013873:	83 ec 08             	sub    esp,0x8
c0013876:	6a 01                	push   0x1
c0013878:	68 b9 0f 02 c0       	push   0xc0020fb9
c001387d:	e8 28 38 00 00       	call   c00170aa <Thr::loadDLL(char const*, bool)>
c0013882:	83 c4 10             	add    esp,0x10
c0013885:	83 ec 08             	sub    esp,0x8
c0013888:	53                   	push   ebx
c0013889:	50                   	push   eax
c001388a:	e8 6e 39 00 00       	call   c00171fd <Thr::executeDLL(unsigned long, void*)>
c001388f:	83 c4 10             	add    esp,0x10
c0013892:	8b 1d c8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022ec8
c0013898:	83 ec 08             	sub    esp,0x8
c001389b:	6a 01                	push   0x1
c001389d:	68 d6 0f 02 c0       	push   0xc0020fd6
c00138a2:	e8 03 38 00 00       	call   c00170aa <Thr::loadDLL(char const*, bool)>
c00138a7:	83 c4 10             	add    esp,0x10
c00138aa:	83 ec 08             	sub    esp,0x8
c00138ad:	53                   	push   ebx
c00138ae:	50                   	push   eax
c00138af:	e8 49 39 00 00       	call   c00171fd <Thr::executeDLL(unsigned long, void*)>
c00138b4:	83 c4 10             	add    esp,0x10
c00138b7:	a1 c8 2e 02 c0       	mov    eax,ds:0xc0022ec8
c00138bc:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00138c2:	83 e0 04             	and    eax,0x4
c00138c5:	84 c0                	test   al,al
c00138c7:	74 59                	je     c0013922 <ACPI::open(int, int, void*)+0x142>
c00138c9:	8b 1d c8 2e 02 c0    	mov    ebx,DWORD PTR ds:0xc0022ec8
c00138cf:	83 ec 08             	sub    esp,0x8
c00138d2:	6a 01                	push   0x1
c00138d4:	68 f3 0f 02 c0       	push   0xc0020ff3
c00138d9:	e8 cc 37 00 00       	call   c00170aa <Thr::loadDLL(char const*, bool)>
c00138de:	83 c4 10             	add    esp,0x10
c00138e1:	83 ec 08             	sub    esp,0x8
c00138e4:	53                   	push   ebx
c00138e5:	50                   	push   eax
c00138e6:	e8 12 39 00 00       	call   c00171fd <Thr::executeDLL(unsigned long, void*)>
c00138eb:	83 c4 10             	add    esp,0x10
c00138ee:	a1 e8 36 02 c0       	mov    eax,ds:0xc00236e8
c00138f3:	83 ec 08             	sub    esp,0x8
c00138f6:	68 10 10 02 c0       	push   0xc0021010
c00138fb:	50                   	push   eax
c00138fc:	e8 19 f8 ff ff       	call   c001311a <findDataTable(unsigned char*, char*)>
c0013901:	83 c4 10             	add    esp,0x10
c0013904:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013908:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001390d:	74 13                	je     c0013922 <ACPI::open(int, int, void*)+0x142>
c001390f:	83 ec 08             	sub    esp,0x8
c0013912:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013916:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001391a:	e8 79 fe ff ff       	call   c0013798 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001391f:	83 c4 10             	add    esp,0x10
c0013922:	b8 00 00 00 00       	mov    eax,0x0
c0013927:	83 c4 18             	add    esp,0x18
c001392a:	5b                   	pop    ebx
c001392b:	c3                   	ret    

c001392c <ACPI::sleep()>:
c001392c:	83 ec 0c             	sub    esp,0xc
c001392f:	a1 c0 34 02 c0       	mov    eax,ds:0xc00234c0
c0013934:	85 c0                	test   eax,eax
c0013936:	74 07                	je     c001393f <ACPI::sleep()+0x13>
c0013938:	a1 c0 34 02 c0       	mov    eax,ds:0xc00234c0
c001393d:	ff d0                	call   eax
c001393f:	90                   	nop
c0013940:	83 c4 0c             	add    esp,0xc
c0013943:	c3                   	ret    

c0013944 <CPU::close(int, int, void*)>:
c0013944:	31 c0                	xor    eax,eax
c0013946:	c3                   	ret    

c0013947 <lookupAMDCPUName(unsigned char, unsigned char)>:
c0013947:	55                   	push   ebp
c0013948:	57                   	push   edi
c0013949:	56                   	push   esi
c001394a:	53                   	push   ebx
c001394b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001394f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013953:	89 ce                	mov    esi,ecx
c0013955:	89 d5                	mov    ebp,edx
c0013957:	80 f9 04             	cmp    cl,0x4
c001395a:	75 28                	jne    c0013984 <lookupAMDCPUName(unsigned char, unsigned char)+0x3d>
c001395c:	8d 42 f9             	lea    eax,[edx-0x7]
c001395f:	3c 03                	cmp    al,0x3
c0013961:	0f 86 63 01 00 00    	jbe    c0013aca <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0013967:	80 fa 03             	cmp    dl,0x3
c001396a:	0f 84 5a 01 00 00    	je     c0013aca <lookupAMDCPUName(unsigned char, unsigned char)+0x183>
c0013970:	8d 7a f2             	lea    edi,[edx-0xe]
c0013973:	b8 f0 27 02 c0       	mov    eax,0xc00227f0
c0013978:	89 fb                	mov    ebx,edi
c001397a:	80 fb 01             	cmp    bl,0x1
c001397d:	77 4e                	ja     c00139cd <lookupAMDCPUName(unsigned char, unsigned char)+0x86>
c001397f:	e9 52 01 00 00       	jmp    c0013ad6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013984:	80 f9 05             	cmp    cl,0x5
c0013987:	75 4d                	jne    c00139d6 <lookupAMDCPUName(unsigned char, unsigned char)+0x8f>
c0013989:	b8 00 28 02 c0       	mov    eax,0xc0022800
c001398e:	80 fa 03             	cmp    dl,0x3
c0013991:	0f 86 3f 01 00 00    	jbe    c0013ad6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013997:	8d 7a fa             	lea    edi,[edx-0x6]
c001399a:	b8 10 28 02 c0       	mov    eax,0xc0022810
c001399f:	89 fb                	mov    ebx,edi
c00139a1:	80 fb 01             	cmp    bl,0x1
c00139a4:	0f 86 2c 01 00 00    	jbe    c0013ad6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139aa:	b8 20 28 02 c0       	mov    eax,0xc0022820
c00139af:	80 fa 08             	cmp    dl,0x8
c00139b2:	0f 84 1e 01 00 00    	je     c0013ad6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139b8:	89 d7                	mov    edi,edx
c00139ba:	b8 30 28 02 c0       	mov    eax,0xc0022830
c00139bf:	83 e7 fb             	and    edi,0xfffffffb
c00139c2:	89 fb                	mov    ebx,edi
c00139c4:	80 fb 09             	cmp    bl,0x9
c00139c7:	0f 84 09 01 00 00    	je     c0013ad6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139cd:	31 c0                	xor    eax,eax
c00139cf:	89 eb                	mov    ebx,ebp
c00139d1:	0f b6 fb             	movzx  edi,bl
c00139d4:	eb 30                	jmp    c0013a06 <lookupAMDCPUName(unsigned char, unsigned char)+0xbf>
c00139d6:	31 c0                	xor    eax,eax
c00139d8:	80 f9 06             	cmp    cl,0x6
c00139db:	75 f2                	jne    c00139cf <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00139dd:	80 fa 0a             	cmp    dl,0xa
c00139e0:	77 ed                	ja     c00139cf <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00139e2:	bf de 05 00 00       	mov    edi,0x5de
c00139e7:	0f a3 d7             	bt     edi,edx
c00139ea:	73 e3                	jae    c00139cf <lookupAMDCPUName(unsigned char, unsigned char)+0x88>
c00139ec:	b8 40 28 02 c0       	mov    eax,0xc0022840
c00139f1:	e9 e0 00 00 00       	jmp    c0013ad6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c00139f6:	39 c7                	cmp    edi,eax
c00139f8:	0f 84 d3 00 00 00    	je     c0013ad1 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c00139fe:	40                   	inc    eax
c00139ff:	3d d0 00 00 00       	cmp    eax,0xd0
c0013a04:	74 09                	je     c0013a0f <lookupAMDCPUName(unsigned char, unsigned char)+0xc8>
c0013a06:	89 f3                	mov    ebx,esi
c0013a08:	80 fb 0f             	cmp    bl,0xf
c0013a0b:	75 f1                	jne    c00139fe <lookupAMDCPUName(unsigned char, unsigned char)+0xb7>
c0013a0d:	eb e7                	jmp    c00139f6 <lookupAMDCPUName(unsigned char, unsigned char)+0xaf>
c0013a0f:	80 f9 10             	cmp    cl,0x10
c0013a12:	75 14                	jne    c0013a28 <lookupAMDCPUName(unsigned char, unsigned char)+0xe1>
c0013a14:	8d 42 fc             	lea    eax,[edx-0x4]
c0013a17:	83 e0 fb             	and    eax,0xfffffffb
c0013a1a:	3c 02                	cmp    al,0x2
c0013a1c:	76 34                	jbe    c0013a52 <lookupAMDCPUName(unsigned char, unsigned char)+0x10b>
c0013a1e:	b8 81 12 02 c0       	mov    eax,0xc0021281
c0013a23:	80 fa 02             	cmp    dl,0x2
c0013a26:	eb 24                	jmp    c0013a4c <lookupAMDCPUName(unsigned char, unsigned char)+0x105>
c0013a28:	80 f9 11             	cmp    cl,0x11
c0013a2b:	75 13                	jne    c0013a40 <lookupAMDCPUName(unsigned char, unsigned char)+0xf9>
c0013a2d:	b8 81 12 02 c0       	mov    eax,0xc0021281
c0013a32:	80 fa 03             	cmp    dl,0x3
c0013a35:	0f 85 9b 00 00 00    	jne    c0013ad6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a3b:	e9 91 00 00 00       	jmp    c0013ad1 <lookupAMDCPUName(unsigned char, unsigned char)+0x18a>
c0013a40:	80 f9 12             	cmp    cl,0x12
c0013a43:	75 14                	jne    c0013a59 <lookupAMDCPUName(unsigned char, unsigned char)+0x112>
c0013a45:	b8 81 12 02 c0       	mov    eax,0xc0021281
c0013a4a:	fe ca                	dec    dl
c0013a4c:	0f 85 84 00 00 00    	jne    c0013ad6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a52:	b8 60 28 02 c0       	mov    eax,0xc0022860
c0013a57:	eb 7d                	jmp    c0013ad6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a59:	80 f9 14             	cmp    cl,0x14
c0013a5c:	75 12                	jne    c0013a70 <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c0013a5e:	4a                   	dec    edx
c0013a5f:	b8 81 12 02 c0       	mov    eax,0xc0021281
c0013a64:	80 fa 01             	cmp    dl,0x1
c0013a67:	77 6d                	ja     c0013ad6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a69:	b8 70 28 02 c0       	mov    eax,0xc0022870
c0013a6e:	eb 66                	jmp    c0013ad6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a70:	80 f9 15             	cmp    cl,0x15
c0013a73:	75 31                	jne    c0013aa6 <lookupAMDCPUName(unsigned char, unsigned char)+0x15f>
c0013a75:	b8 80 28 02 c0       	mov    eax,0xc0022880
c0013a7a:	80 fa 01             	cmp    dl,0x1
c0013a7d:	74 57                	je     c0013ad6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a7f:	b8 81 12 02 c0       	mov    eax,0xc0021281
c0013a84:	80 fa 13             	cmp    dl,0x13
c0013a87:	76 0c                	jbe    c0013a95 <lookupAMDCPUName(unsigned char, unsigned char)+0x14e>
c0013a89:	80 fa 30             	cmp    dl,0x30
c0013a8c:	75 48                	jne    c0013ad6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a8e:	b8 a0 28 02 c0       	mov    eax,0xc00228a0
c0013a93:	eb 41                	jmp    c0013ad6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a95:	b9 04 00 09 00       	mov    ecx,0x90004
c0013a9a:	0f a3 d1             	bt     ecx,edx
c0013a9d:	73 37                	jae    c0013ad6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013a9f:	b8 90 28 02 c0       	mov    eax,0xc0022890
c0013aa4:	eb 30                	jmp    c0013ad6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013aa6:	b8 81 12 02 c0       	mov    eax,0xc0021281
c0013aab:	80 f9 16             	cmp    cl,0x16
c0013aae:	75 26                	jne    c0013ad6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013ab0:	b8 b0 28 02 c0       	mov    eax,0xc00228b0
c0013ab5:	84 d2                	test   dl,dl
c0013ab7:	74 1d                	je     c0013ad6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013ab9:	b8 81 12 02 c0       	mov    eax,0xc0021281
c0013abe:	80 fa 30             	cmp    dl,0x30
c0013ac1:	75 13                	jne    c0013ad6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013ac3:	b8 c0 28 02 c0       	mov    eax,0xc00228c0
c0013ac8:	eb 0c                	jmp    c0013ad6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013aca:	b8 e0 27 02 c0       	mov    eax,0xc00227e0
c0013acf:	eb 05                	jmp    c0013ad6 <lookupAMDCPUName(unsigned char, unsigned char)+0x18f>
c0013ad1:	b8 50 28 02 c0       	mov    eax,0xc0022850
c0013ad6:	5b                   	pop    ebx
c0013ad7:	5e                   	pop    esi
c0013ad8:	5f                   	pop    edi
c0013ad9:	5d                   	pop    ebp
c0013ada:	c3                   	ret    

c0013adb <lookupIntelCPUName(unsigned char, unsigned char)>:
c0013adb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013adf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013ae3:	80 f9 04             	cmp    cl,0x4
c0013ae6:	75 6b                	jne    c0013b53 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0013ae8:	b8 40 26 02 c0       	mov    eax,0xc0022640
c0013aed:	80 fa 01             	cmp    dl,0x1
c0013af0:	0f 86 92 02 00 00    	jbe    c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013af6:	b8 50 26 02 c0       	mov    eax,0xc0022650
c0013afb:	80 fa 02             	cmp    dl,0x2
c0013afe:	0f 84 84 02 00 00    	je     c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b04:	b8 60 26 02 c0       	mov    eax,0xc0022660
c0013b09:	80 fa 03             	cmp    dl,0x3
c0013b0c:	0f 84 76 02 00 00    	je     c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b12:	b8 70 26 02 c0       	mov    eax,0xc0022670
c0013b17:	80 fa 04             	cmp    dl,0x4
c0013b1a:	0f 84 68 02 00 00    	je     c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b20:	b8 80 26 02 c0       	mov    eax,0xc0022680
c0013b25:	80 fa 05             	cmp    dl,0x5
c0013b28:	0f 84 5a 02 00 00    	je     c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b2e:	b8 60 26 02 c0       	mov    eax,0xc0022660
c0013b33:	80 fa 07             	cmp    dl,0x7
c0013b36:	0f 84 4c 02 00 00    	je     c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b3c:	83 ea 08             	sub    edx,0x8
c0013b3f:	b8 81 12 02 c0       	mov    eax,0xc0021281
c0013b44:	80 fa 01             	cmp    dl,0x1
c0013b47:	0f 87 3b 02 00 00    	ja     c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b4d:	b8 90 26 02 c0       	mov    eax,0xc0022690
c0013b52:	c3                   	ret    
c0013b53:	80 f9 05             	cmp    cl,0x5
c0013b56:	75 45                	jne    c0013b9d <lookupIntelCPUName(unsigned char, unsigned char)+0xc2>
c0013b58:	8d 4a ff             	lea    ecx,[edx-0x1]
c0013b5b:	b8 a0 26 02 c0       	mov    eax,0xc00226a0
c0013b60:	80 f9 02             	cmp    cl,0x2
c0013b63:	0f 86 1f 02 00 00    	jbe    c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b69:	80 fa 04             	cmp    dl,0x4
c0013b6c:	0f 84 f3 01 00 00    	je     c0013d65 <lookupIntelCPUName(unsigned char, unsigned char)+0x28a>
c0013b72:	80 fa 07             	cmp    dl,0x7
c0013b75:	0f 84 0d 02 00 00    	je     c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b7b:	b8 b0 26 02 c0       	mov    eax,0xc00226b0
c0013b80:	80 fa 08             	cmp    dl,0x8
c0013b83:	0f 84 ff 01 00 00    	je     c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b89:	b8 81 12 02 c0       	mov    eax,0xc0021281
c0013b8e:	80 fa 09             	cmp    dl,0x9
c0013b91:	0f 85 f1 01 00 00    	jne    c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013b97:	b8 c0 26 02 c0       	mov    eax,0xc00226c0
c0013b9c:	c3                   	ret    
c0013b9d:	80 f9 06             	cmp    cl,0x6
c0013ba0:	0f 85 85 01 00 00    	jne    c0013d2b <lookupIntelCPUName(unsigned char, unsigned char)+0x250>
c0013ba6:	b8 d0 26 02 c0       	mov    eax,0xc00226d0
c0013bab:	80 fa 01             	cmp    dl,0x1
c0013bae:	0f 84 d4 01 00 00    	je     c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013bb4:	8d 42 fb             	lea    eax,[edx-0x5]
c0013bb7:	3c 01                	cmp    al,0x1
c0013bb9:	0f 86 ac 01 00 00    	jbe    c0013d6b <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0013bbf:	80 fa 03             	cmp    dl,0x3
c0013bc2:	0f 84 a3 01 00 00    	je     c0013d6b <lookupIntelCPUName(unsigned char, unsigned char)+0x290>
c0013bc8:	8d 4a f9             	lea    ecx,[edx-0x7]
c0013bcb:	b8 f0 26 02 c0       	mov    eax,0xc00226f0
c0013bd0:	80 f9 01             	cmp    cl,0x1
c0013bd3:	0f 86 af 01 00 00    	jbe    c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013bd9:	80 fa 09             	cmp    dl,0x9
c0013bdc:	0f 84 8f 01 00 00    	je     c0013d71 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c0013be2:	8d 4a f6             	lea    ecx,[edx-0xa]
c0013be5:	80 f9 01             	cmp    cl,0x1
c0013be8:	0f 86 9a 01 00 00    	jbe    c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013bee:	b8 00 27 02 c0       	mov    eax,0xc0022700
c0013bf3:	80 fa 0d             	cmp    dl,0xd
c0013bf6:	0f 84 8c 01 00 00    	je     c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013bfc:	b8 10 27 02 c0       	mov    eax,0xc0022710
c0013c01:	80 fa 0e             	cmp    dl,0xe
c0013c04:	0f 84 7e 01 00 00    	je     c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c0a:	b8 20 27 02 c0       	mov    eax,0xc0022720
c0013c0f:	80 fa 0f             	cmp    dl,0xf
c0013c12:	0f 84 70 01 00 00    	je     c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c18:	b8 00 27 02 c0       	mov    eax,0xc0022700
c0013c1d:	80 fa 15             	cmp    dl,0x15
c0013c20:	0f 84 62 01 00 00    	je     c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c26:	8d 4a ea             	lea    ecx,[edx-0x16]
c0013c29:	b8 20 27 02 c0       	mov    eax,0xc0022720
c0013c2e:	80 f9 01             	cmp    cl,0x1
c0013c31:	0f 86 51 01 00 00    	jbe    c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c37:	80 fa 1a             	cmp    dl,0x1a
c0013c3a:	0f 84 37 01 00 00    	je     c0013d77 <lookupIntelCPUName(unsigned char, unsigned char)+0x29c>
c0013c40:	80 fa 1c             	cmp    dl,0x1c
c0013c43:	0f 84 34 01 00 00    	je     c0013d7d <lookupIntelCPUName(unsigned char, unsigned char)+0x2a2>
c0013c49:	80 fa 1d             	cmp    dl,0x1d
c0013c4c:	0f 84 36 01 00 00    	je     c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c52:	b8 50 27 02 c0       	mov    eax,0xc0022750
c0013c57:	80 fa 25             	cmp    dl,0x25
c0013c5a:	0f 84 28 01 00 00    	je     c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c60:	8d 4a da             	lea    ecx,[edx-0x26]
c0013c63:	b8 40 27 02 c0       	mov    eax,0xc0022740
c0013c68:	80 f9 01             	cmp    cl,0x1
c0013c6b:	0f 86 17 01 00 00    	jbe    c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c71:	b8 60 27 02 c0       	mov    eax,0xc0022760
c0013c76:	80 fa 2a             	cmp    dl,0x2a
c0013c79:	0f 84 09 01 00 00    	je     c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c7f:	b8 50 27 02 c0       	mov    eax,0xc0022750
c0013c84:	80 fa 2c             	cmp    dl,0x2c
c0013c87:	0f 84 fb 00 00 00    	je     c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c8d:	b8 60 27 02 c0       	mov    eax,0xc0022760
c0013c92:	80 fa 2d             	cmp    dl,0x2d
c0013c95:	0f 84 ed 00 00 00    	je     c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013c9b:	b8 30 27 02 c0       	mov    eax,0xc0022730
c0013ca0:	80 fa 2e             	cmp    dl,0x2e
c0013ca3:	0f 84 df 00 00 00    	je     c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ca9:	b8 50 27 02 c0       	mov    eax,0xc0022750
c0013cae:	80 fa 2f             	cmp    dl,0x2f
c0013cb1:	0f 84 d1 00 00 00    	je     c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cb7:	8d 4a cb             	lea    ecx,[edx-0x35]
c0013cba:	b8 40 27 02 c0       	mov    eax,0xc0022740
c0013cbf:	80 f9 01             	cmp    cl,0x1
c0013cc2:	0f 86 c0 00 00 00    	jbe    c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cc8:	b8 70 27 02 c0       	mov    eax,0xc0022770
c0013ccd:	80 fa 37             	cmp    dl,0x37
c0013cd0:	0f 84 b2 00 00 00    	je     c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cd6:	b8 80 27 02 c0       	mov    eax,0xc0022780
c0013cdb:	80 fa 3a             	cmp    dl,0x3a
c0013cde:	0f 84 a4 00 00 00    	je     c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013ce4:	b8 90 27 02 c0       	mov    eax,0xc0022790
c0013ce9:	80 fa 3c             	cmp    dl,0x3c
c0013cec:	0f 84 96 00 00 00    	je     c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013cf2:	b8 a0 27 02 c0       	mov    eax,0xc00227a0
c0013cf7:	80 fa 3d             	cmp    dl,0x3d
c0013cfa:	0f 84 88 00 00 00    	je     c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d00:	b8 80 27 02 c0       	mov    eax,0xc0022780
c0013d05:	80 fa 3e             	cmp    dl,0x3e
c0013d08:	74 7e                	je     c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d0a:	8d 42 bb             	lea    eax,[edx-0x45]
c0013d0d:	3c 01                	cmp    al,0x1
c0013d0f:	76 72                	jbe    c0013d83 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0013d11:	80 fa 3f             	cmp    dl,0x3f
c0013d14:	74 6d                	je     c0013d83 <lookupIntelCPUName(unsigned char, unsigned char)+0x2a8>
c0013d16:	80 fa 4a             	cmp    dl,0x4a
c0013d19:	74 0a                	je     c0013d25 <lookupIntelCPUName(unsigned char, unsigned char)+0x24a>
c0013d1b:	b8 81 12 02 c0       	mov    eax,0xc0021281
c0013d20:	80 fa 4d             	cmp    dl,0x4d
c0013d23:	75 63                	jne    c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d25:	b8 70 27 02 c0       	mov    eax,0xc0022770
c0013d2a:	c3                   	ret    
c0013d2b:	b8 81 12 02 c0       	mov    eax,0xc0021281
c0013d30:	80 f9 0b             	cmp    cl,0xb
c0013d33:	75 0a                	jne    c0013d3f <lookupIntelCPUName(unsigned char, unsigned char)+0x264>
c0013d35:	fe ca                	dec    dl
c0013d37:	75 4f                	jne    c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d39:	b8 b0 27 02 c0       	mov    eax,0xc00227b0
c0013d3e:	c3                   	ret    
c0013d3f:	80 f9 0f             	cmp    cl,0xf
c0013d42:	75 44                	jne    c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d44:	b8 c0 27 02 c0       	mov    eax,0xc00227c0
c0013d49:	80 fa 02             	cmp    dl,0x2
c0013d4c:	76 3a                	jbe    c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d4e:	8d 42 fd             	lea    eax,[edx-0x3]
c0013d51:	3c 01                	cmp    al,0x1
c0013d53:	76 0a                	jbe    c0013d5f <lookupIntelCPUName(unsigned char, unsigned char)+0x284>
c0013d55:	b8 81 12 02 c0       	mov    eax,0xc0021281
c0013d5a:	80 fa 06             	cmp    dl,0x6
c0013d5d:	75 29                	jne    c0013d88 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ad>
c0013d5f:	b8 d0 27 02 c0       	mov    eax,0xc00227d0
c0013d64:	c3                   	ret    
c0013d65:	b8 b0 26 02 c0       	mov    eax,0xc00226b0
c0013d6a:	c3                   	ret    
c0013d6b:	b8 e0 26 02 c0       	mov    eax,0xc00226e0
c0013d70:	c3                   	ret    
c0013d71:	b8 00 27 02 c0       	mov    eax,0xc0022700
c0013d76:	c3                   	ret    
c0013d77:	b8 30 27 02 c0       	mov    eax,0xc0022730
c0013d7c:	c3                   	ret    
c0013d7d:	b8 40 27 02 c0       	mov    eax,0xc0022740
c0013d82:	c3                   	ret    
c0013d83:	b8 90 27 02 c0       	mov    eax,0xc0022790
c0013d88:	c3                   	ret    

c0013d89 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0013d89:	60                   	pusha  
c0013d8a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013d8e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013d92:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013d96:	9c                   	pushf  
c0013d97:	fa                   	cli    
c0013d98:	0f 09                	wbinvd 
c0013d9a:	0f 30                	wrmsr  
c0013d9c:	9d                   	popf   
c0013d9d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013da1:	89 02                	mov    DWORD PTR [edx],eax
c0013da3:	61                   	popa   
c0013da4:	c3                   	ret    

c0013da5 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0013da5:	60                   	pusha  
c0013da6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0013daa:	9c                   	pushf  
c0013dab:	fa                   	cli    
c0013dac:	0f 09                	wbinvd 
c0013dae:	31 c0                	xor    eax,eax
c0013db0:	31 d2                	xor    edx,edx
c0013db2:	0f 32                	rdmsr  
c0013db4:	9d                   	popf   
c0013db5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013db9:	89 02                	mov    DWORD PTR [edx],eax
c0013dbb:	61                   	popa   
c0013dbc:	c3                   	ret    

c0013dbd <AMD_K6_writeback(int, int, int)>:
c0013dbd:	56                   	push   esi
c0013dbe:	53                   	push   ebx
c0013dbf:	83 ec 10             	sub    esp,0x10
c0013dc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013dc6:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0013dcb:	75 5d                	jne    c0013e2a <AMD_K6_writeback(int, int, int)+0x6d>
c0013dcd:	83 f8 08             	cmp    eax,0x8
c0013dd0:	75 09                	jne    c0013ddb <AMD_K6_writeback(int, int, int)+0x1e>
c0013dd2:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0013dd7:	7e 13                	jle    c0013dec <AMD_K6_writeback(int, int, int)+0x2f>
c0013dd9:	eb 30                	jmp    c0013e0b <AMD_K6_writeback(int, int, int)+0x4e>
c0013ddb:	83 f8 06             	cmp    eax,0x6
c0013dde:	7c 4a                	jl     c0013e2a <AMD_K6_writeback(int, int, int)+0x6d>
c0013de0:	83 f8 07             	cmp    eax,0x7
c0013de3:	7e 07                	jle    c0013dec <AMD_K6_writeback(int, int, int)+0x2f>
c0013de5:	83 f8 09             	cmp    eax,0x9
c0013de8:	74 21                	je     c0013e0b <AMD_K6_writeback(int, int, int)+0x4e>
c0013dea:	eb 3e                	jmp    c0013e2a <AMD_K6_writeback(int, int, int)+0x6d>
c0013dec:	89 e6                	mov    esi,esp
c0013dee:	8b 1d 04 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f04
c0013df4:	56                   	push   esi
c0013df5:	c1 eb 15             	shr    ebx,0x15
c0013df8:	68 82 00 00 c0       	push   0xc0000082
c0013dfd:	83 e3 7e             	and    ebx,0x7e
c0013e00:	e8 a0 ff ff ff       	call   c0013da5 <AMD_K6_read_msr(unsigned int, REGS*)>
c0013e05:	56                   	push   esi
c0013e06:	6a 00                	push   0x0
c0013e08:	53                   	push   ebx
c0013e09:	eb 12                	jmp    c0013e1d <AMD_K6_writeback(int, int, int)+0x60>
c0013e0b:	89 e3                	mov    ebx,esp
c0013e0d:	53                   	push   ebx
c0013e0e:	68 82 00 00 c0       	push   0xc0000082
c0013e13:	e8 8d ff ff ff       	call   c0013da5 <AMD_K6_read_msr(unsigned int, REGS*)>
c0013e18:	53                   	push   ebx
c0013e19:	6a 00                	push   0x0
c0013e1b:	6a 00                	push   0x0
c0013e1d:	68 82 00 00 c0       	push   0xc0000082
c0013e22:	e8 62 ff ff ff       	call   c0013d89 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0013e27:	83 c4 18             	add    esp,0x18
c0013e2a:	83 c4 10             	add    esp,0x10
c0013e2d:	5b                   	pop    ebx
c0013e2e:	5e                   	pop    esi
c0013e2f:	c3                   	ret    

c0013e30 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0013e30:	55                   	push   ebp
c0013e31:	57                   	push   edi
c0013e32:	56                   	push   esi
c0013e33:	53                   	push   ebx
c0013e34:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e38:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013e3c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013e40:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013e44:	39 05 e0 28 02 c0    	cmp    DWORD PTR ds:0xc00228e0,eax
c0013e4a:	75 23                	jne    c0013e6f <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0013e4c:	a1 8c 38 02 c0       	mov    eax,ds:0xc002388c
c0013e51:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013e55:	89 06                	mov    DWORD PTR [esi],eax
c0013e57:	a1 88 38 02 c0       	mov    eax,ds:0xc0023888
c0013e5c:	89 07                	mov    DWORD PTR [edi],eax
c0013e5e:	a1 84 38 02 c0       	mov    eax,ds:0xc0023884
c0013e63:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0013e66:	a1 80 38 02 c0       	mov    eax,ds:0xc0023880
c0013e6b:	89 02                	mov    DWORD PTR [edx],eax
c0013e6d:	eb 3f                	jmp    c0013eae <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0013e6f:	31 c9                	xor    ecx,ecx
c0013e71:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e75:	0f a2                	cpuid  
c0013e77:	89 06                	mov    DWORD PTR [esi],eax
c0013e79:	89 1f                	mov    DWORD PTR [edi],ebx
c0013e7b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013e7f:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0013e82:	89 10                	mov    DWORD PTR [eax],edx
c0013e84:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013e88:	a3 e0 28 02 c0       	mov    ds:0xc00228e0,eax
c0013e8d:	8b 06                	mov    eax,DWORD PTR [esi]
c0013e8f:	a3 8c 38 02 c0       	mov    ds:0xc002388c,eax
c0013e94:	8b 07                	mov    eax,DWORD PTR [edi]
c0013e96:	a3 88 38 02 c0       	mov    ds:0xc0023888,eax
c0013e9b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0013e9e:	a3 84 38 02 c0       	mov    ds:0xc0023884,eax
c0013ea3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013ea7:	8b 00                	mov    eax,DWORD PTR [eax]
c0013ea9:	a3 80 38 02 c0       	mov    ds:0xc0023880,eax
c0013eae:	5b                   	pop    ebx
c0013eaf:	5e                   	pop    esi
c0013eb0:	5f                   	pop    edi
c0013eb1:	5d                   	pop    ebp
c0013eb2:	c3                   	ret    

c0013eb3 <cpuidCheckEDX(unsigned int)>:
c0013eb3:	83 ec 10             	sub    esp,0x10
c0013eb6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013eba:	50                   	push   eax
c0013ebb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013ebf:	50                   	push   eax
c0013ec0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013ec4:	50                   	push   eax
c0013ec5:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013ec9:	50                   	push   eax
c0013eca:	6a 01                	push   0x1
c0013ecc:	e8 5f ff ff ff       	call   c0013e30 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013ed1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013ed5:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0013ed9:	0f 95 c0             	setne  al
c0013edc:	83 c4 24             	add    esp,0x24
c0013edf:	c3                   	ret    

c0013ee0 <cpuidCheckECX(unsigned int)>:
c0013ee0:	83 ec 10             	sub    esp,0x10
c0013ee3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013ee7:	50                   	push   eax
c0013ee8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013eec:	50                   	push   eax
c0013eed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013ef1:	50                   	push   eax
c0013ef2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013ef6:	50                   	push   eax
c0013ef7:	6a 01                	push   0x1
c0013ef9:	e8 32 ff ff ff       	call   c0013e30 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013efe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f02:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013f06:	0f 95 c0             	setne  al
c0013f09:	83 c4 24             	add    esp,0x24
c0013f0c:	c3                   	ret    

c0013f0d <cpuidCheckExtendedEBX(unsigned int)>:
c0013f0d:	83 ec 10             	sub    esp,0x10
c0013f10:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f14:	50                   	push   eax
c0013f15:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f19:	50                   	push   eax
c0013f1a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f1e:	50                   	push   eax
c0013f1f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f23:	50                   	push   eax
c0013f24:	6a 07                	push   0x7
c0013f26:	e8 05 ff ff ff       	call   c0013e30 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013f2b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f2f:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0013f33:	0f 95 c0             	setne  al
c0013f36:	83 c4 24             	add    esp,0x24
c0013f39:	c3                   	ret    

c0013f3a <cpuidCheckExtendedECX(unsigned int)>:
c0013f3a:	83 ec 10             	sub    esp,0x10
c0013f3d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f41:	50                   	push   eax
c0013f42:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f46:	50                   	push   eax
c0013f47:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f4b:	50                   	push   eax
c0013f4c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0013f50:	50                   	push   eax
c0013f51:	6a 07                	push   0x7
c0013f53:	e8 d8 fe ff ff       	call   c0013e30 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0013f58:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f5c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0013f60:	0f 95 c0             	setne  al
c0013f63:	83 c4 24             	add    esp,0x24
c0013f66:	c3                   	ret    

c0013f67 <getCPUNumber()>:
c0013f67:	31 c0                	xor    eax,eax
c0013f69:	c3                   	ret    

c0013f6a <thisCPU()>:
c0013f6a:	e8 f8 ff ff ff       	call   c0013f67 <getCPUNumber()>
c0013f6f:	8b 15 c8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022ec8
c0013f75:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c0013f7c:	c3                   	ret    
c0013f7d:	90                   	nop

c0013f7e <CPU::CPU()>:
c0013f7e:	83 ec 0c             	sub    esp,0xc
c0013f81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f85:	83 ec 08             	sub    esp,0x8
c0013f88:	68 81 12 02 c0       	push   0xc0021281
c0013f8d:	50                   	push   eax
c0013f8e:	e8 6f c7 ff ff       	call   c0010702 <Device::Device(char const*)>
c0013f93:	83 c4 10             	add    esp,0x10
c0013f96:	ba 58 13 02 c0       	mov    edx,0xc0021358
c0013f9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013f9f:	89 10                	mov    DWORD PTR [eax],edx
c0013fa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fa5:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0013faf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fb3:	05 78 01 00 00       	add    eax,0x178
c0013fb8:	83 ec 0c             	sub    esp,0xc
c0013fbb:	50                   	push   eax
c0013fbc:	e8 67 74 ff ff       	call   c000b428 <GDT::GDT()>
c0013fc1:	83 c4 10             	add    esp,0x10
c0013fc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fc8:	05 7c 09 00 00       	add    eax,0x97c
c0013fcd:	83 ec 0c             	sub    esp,0xc
c0013fd0:	50                   	push   eax
c0013fd1:	e8 b2 76 ff ff       	call   c000b688 <IDT::IDT()>
c0013fd6:	83 c4 10             	add    esp,0x10
c0013fd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013fdd:	05 7c 11 00 00       	add    eax,0x117c
c0013fe2:	83 ec 0c             	sub    esp,0xc
c0013fe5:	50                   	push   eax
c0013fe6:	e8 73 9b ff ff       	call   c000db5e <TSS::TSS()>
c0013feb:	83 c4 10             	add    esp,0x10
c0013fee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ff2:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0013ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ffd:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0014007:	90                   	nop
c0014008:	83 c4 0c             	add    esp,0xc
c001400b:	c3                   	ret    

c001400c <CPU::displayFeatures()>:
c001400c:	c3                   	ret    
c001400d:	90                   	nop

c001400e <CPU::detectFeatures()>:
c001400e:	55                   	push   ebp
c001400f:	57                   	push   edi
c0014010:	56                   	push   esi
c0014011:	53                   	push   ebx
c0014012:	83 ec 50             	sub    esp,0x50
c0014015:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0014019:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0014023:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001402a:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0014030:	6a 0d                	push   0xd
c0014032:	6a 00                	push   0x0
c0014034:	57                   	push   edi
c0014035:	e8 ce c5 fe ff       	call   c0000608 <memset>
c001403a:	83 c4 10             	add    esp,0x10
c001403d:	a1 c8 2e 02 c0       	mov    eax,ds:0xc0022ec8
c0014042:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0014049:	0f 84 20 09 00 00    	je     c001496f <CPU::detectFeatures()+0x961>
c001404f:	83 ec 0c             	sub    esp,0xc
c0014052:	6a 10                	push   0x10
c0014054:	e8 5a fe ff ff       	call   c0013eb3 <cpuidCheckEDX(unsigned int)>
c0014059:	83 e0 01             	and    eax,0x1
c001405c:	8d 14 00             	lea    edx,[eax+eax*1]
c001405f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014065:	83 e0 fd             	and    eax,0xfffffffd
c0014068:	09 d0                	or     eax,edx
c001406a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014070:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0014077:	e8 37 fe ff ff       	call   c0013eb3 <cpuidCheckEDX(unsigned int)>
c001407c:	83 e0 01             	and    eax,0x1
c001407f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014086:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001408c:	83 e0 fb             	and    eax,0xfffffffb
c001408f:	09 d0                	or     eax,edx
c0014091:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014097:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001409e:	e8 10 fe ff ff       	call   c0013eb3 <cpuidCheckEDX(unsigned int)>
c00140a3:	83 e0 01             	and    eax,0x1
c00140a6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00140ad:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00140b3:	83 e0 f7             	and    eax,0xfffffff7
c00140b6:	09 d0                	or     eax,edx
c00140b8:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00140be:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00140c5:	e8 e9 fd ff ff       	call   c0013eb3 <cpuidCheckEDX(unsigned int)>
c00140ca:	83 e0 01             	and    eax,0x1
c00140cd:	c1 e0 04             	shl    eax,0x4
c00140d0:	88 c2                	mov    dl,al
c00140d2:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00140d8:	83 e0 ef             	and    eax,0xffffffef
c00140db:	09 d0                	or     eax,edx
c00140dd:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00140e3:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00140ea:	e8 c4 fd ff ff       	call   c0013eb3 <cpuidCheckEDX(unsigned int)>
c00140ef:	83 e0 01             	and    eax,0x1
c00140f2:	c1 e0 05             	shl    eax,0x5
c00140f5:	88 c2                	mov    dl,al
c00140f7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00140fd:	83 e0 df             	and    eax,0xffffffdf
c0014100:	09 d0                	or     eax,edx
c0014102:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014108:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001410f:	e8 9f fd ff ff       	call   c0013eb3 <cpuidCheckEDX(unsigned int)>
c0014114:	83 e0 01             	and    eax,0x1
c0014117:	8d 14 00             	lea    edx,[eax+eax*1]
c001411a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014120:	83 e0 fd             	and    eax,0xfffffffd
c0014123:	09 d0                	or     eax,edx
c0014125:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001412b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0014132:	e8 7c fd ff ff       	call   c0013eb3 <cpuidCheckEDX(unsigned int)>
c0014137:	83 e0 01             	and    eax,0x1
c001413a:	c1 e0 06             	shl    eax,0x6
c001413d:	88 c2                	mov    dl,al
c001413f:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014145:	83 e0 bf             	and    eax,0xffffffbf
c0014148:	09 d0                	or     eax,edx
c001414a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014150:	58                   	pop    eax
c0014151:	8d 74 24 28          	lea    esi,[esp+0x28]
c0014155:	56                   	push   esi
c0014156:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001415a:	55                   	push   ebp
c001415b:	8d 44 24 28          	lea    eax,[esp+0x28]
c001415f:	50                   	push   eax
c0014160:	8d 54 24 28          	lea    edx,[esp+0x28]
c0014164:	52                   	push   edx
c0014165:	6a 00                	push   0x0
c0014167:	e8 c4 fc ff ff       	call   c0013e30 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001416c:	83 c4 1c             	add    esp,0x1c
c001416f:	6a 04                	push   0x4
c0014171:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0014175:	50                   	push   eax
c0014176:	57                   	push   edi
c0014177:	e8 56 c4 fe ff       	call   c00005d2 <memcpy>
c001417c:	83 c4 0c             	add    esp,0xc
c001417f:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0014185:	6a 04                	push   0x4
c0014187:	56                   	push   esi
c0014188:	50                   	push   eax
c0014189:	e8 44 c4 fe ff       	call   c00005d2 <memcpy>
c001418e:	83 c4 0c             	add    esp,0xc
c0014191:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0014197:	6a 04                	push   0x4
c0014199:	55                   	push   ebp
c001419a:	50                   	push   eax
c001419b:	e8 32 c4 fe ff       	call   c00005d2 <memcpy>
c00141a0:	58                   	pop    eax
c00141a1:	5a                   	pop    edx
c00141a2:	68 2c 11 02 c0       	push   0xc002112c
c00141a7:	57                   	push   edi
c00141a8:	e8 4b c5 fe ff       	call   c00006f8 <strcmp>
c00141ad:	83 c4 10             	add    esp,0x10
c00141b0:	85 c0                	test   eax,eax
c00141b2:	75 0f                	jne    c00141c3 <CPU::detectFeatures()+0x1b5>
c00141b4:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00141be:	e9 22 02 00 00       	jmp    c00143e5 <CPU::detectFeatures()+0x3d7>
c00141c3:	50                   	push   eax
c00141c4:	50                   	push   eax
c00141c5:	68 39 11 02 c0       	push   0xc0021139
c00141ca:	57                   	push   edi
c00141cb:	e8 28 c5 fe ff       	call   c00006f8 <strcmp>
c00141d0:	83 c4 10             	add    esp,0x10
c00141d3:	85 c0                	test   eax,eax
c00141d5:	74 dd                	je     c00141b4 <CPU::detectFeatures()+0x1a6>
c00141d7:	51                   	push   ecx
c00141d8:	51                   	push   ecx
c00141d9:	68 46 11 02 c0       	push   0xc0021146
c00141de:	57                   	push   edi
c00141df:	e8 14 c5 fe ff       	call   c00006f8 <strcmp>
c00141e4:	83 c4 10             	add    esp,0x10
c00141e7:	85 c0                	test   eax,eax
c00141e9:	74 2a                	je     c0014215 <CPU::detectFeatures()+0x207>
c00141eb:	52                   	push   edx
c00141ec:	52                   	push   edx
c00141ed:	68 53 11 02 c0       	push   0xc0021153
c00141f2:	57                   	push   edi
c00141f3:	e8 00 c5 fe ff       	call   c00006f8 <strcmp>
c00141f8:	83 c4 10             	add    esp,0x10
c00141fb:	85 c0                	test   eax,eax
c00141fd:	74 16                	je     c0014215 <CPU::detectFeatures()+0x207>
c00141ff:	50                   	push   eax
c0014200:	50                   	push   eax
c0014201:	68 60 11 02 c0       	push   0xc0021160
c0014206:	57                   	push   edi
c0014207:	e8 ec c4 fe ff       	call   c00006f8 <strcmp>
c001420c:	83 c4 10             	add    esp,0x10
c001420f:	85 c0                	test   eax,eax
c0014211:	74 48                	je     c001425b <CPU::detectFeatures()+0x24d>
c0014213:	eb 0f                	jmp    c0014224 <CPU::detectFeatures()+0x216>
c0014215:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001421f:	e9 c1 01 00 00       	jmp    c00143e5 <CPU::detectFeatures()+0x3d7>
c0014224:	50                   	push   eax
c0014225:	50                   	push   eax
c0014226:	68 6d 11 02 c0       	push   0xc002116d
c001422b:	57                   	push   edi
c001422c:	e8 c7 c4 fe ff       	call   c00006f8 <strcmp>
c0014231:	83 c4 10             	add    esp,0x10
c0014234:	85 c0                	test   eax,eax
c0014236:	74 23                	je     c001425b <CPU::detectFeatures()+0x24d>
c0014238:	50                   	push   eax
c0014239:	50                   	push   eax
c001423a:	68 7a 11 02 c0       	push   0xc002117a
c001423f:	57                   	push   edi
c0014240:	e8 b3 c4 fe ff       	call   c00006f8 <strcmp>
c0014245:	83 c4 10             	add    esp,0x10
c0014248:	85 c0                	test   eax,eax
c001424a:	75 1e                	jne    c001426a <CPU::detectFeatures()+0x25c>
c001424c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014256:	e9 8a 01 00 00       	jmp    c00143e5 <CPU::detectFeatures()+0x3d7>
c001425b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0014265:	e9 7b 01 00 00       	jmp    c00143e5 <CPU::detectFeatures()+0x3d7>
c001426a:	50                   	push   eax
c001426b:	50                   	push   eax
c001426c:	68 87 11 02 c0       	push   0xc0021187
c0014271:	57                   	push   edi
c0014272:	e8 81 c4 fe ff       	call   c00006f8 <strcmp>
c0014277:	83 c4 10             	add    esp,0x10
c001427a:	85 c0                	test   eax,eax
c001427c:	75 0f                	jne    c001428d <CPU::detectFeatures()+0x27f>
c001427e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0014288:	e9 58 01 00 00       	jmp    c00143e5 <CPU::detectFeatures()+0x3d7>
c001428d:	50                   	push   eax
c001428e:	50                   	push   eax
c001428f:	68 46 11 02 c0       	push   0xc0021146
c0014294:	57                   	push   edi
c0014295:	e8 5e c4 fe ff       	call   c00006f8 <strcmp>
c001429a:	83 c4 10             	add    esp,0x10
c001429d:	85 c0                	test   eax,eax
c001429f:	75 0f                	jne    c00142b0 <CPU::detectFeatures()+0x2a2>
c00142a1:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00142ab:	e9 35 01 00 00       	jmp    c00143e5 <CPU::detectFeatures()+0x3d7>
c00142b0:	50                   	push   eax
c00142b1:	50                   	push   eax
c00142b2:	68 94 11 02 c0       	push   0xc0021194
c00142b7:	57                   	push   edi
c00142b8:	e8 3b c4 fe ff       	call   c00006f8 <strcmp>
c00142bd:	83 c4 10             	add    esp,0x10
c00142c0:	85 c0                	test   eax,eax
c00142c2:	75 0f                	jne    c00142d3 <CPU::detectFeatures()+0x2c5>
c00142c4:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00142ce:	e9 12 01 00 00       	jmp    c00143e5 <CPU::detectFeatures()+0x3d7>
c00142d3:	51                   	push   ecx
c00142d4:	51                   	push   ecx
c00142d5:	68 a1 11 02 c0       	push   0xc00211a1
c00142da:	57                   	push   edi
c00142db:	e8 18 c4 fe ff       	call   c00006f8 <strcmp>
c00142e0:	83 c4 10             	add    esp,0x10
c00142e3:	85 c0                	test   eax,eax
c00142e5:	75 0f                	jne    c00142f6 <CPU::detectFeatures()+0x2e8>
c00142e7:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00142f1:	e9 ef 00 00 00       	jmp    c00143e5 <CPU::detectFeatures()+0x3d7>
c00142f6:	52                   	push   edx
c00142f7:	52                   	push   edx
c00142f8:	68 ae 11 02 c0       	push   0xc00211ae
c00142fd:	57                   	push   edi
c00142fe:	e8 f5 c3 fe ff       	call   c00006f8 <strcmp>
c0014303:	83 c4 10             	add    esp,0x10
c0014306:	85 c0                	test   eax,eax
c0014308:	75 0f                	jne    c0014319 <CPU::detectFeatures()+0x30b>
c001430a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0014314:	e9 cc 00 00 00       	jmp    c00143e5 <CPU::detectFeatures()+0x3d7>
c0014319:	50                   	push   eax
c001431a:	50                   	push   eax
c001431b:	68 bb 11 02 c0       	push   0xc00211bb
c0014320:	57                   	push   edi
c0014321:	e8 d2 c3 fe ff       	call   c00006f8 <strcmp>
c0014326:	83 c4 10             	add    esp,0x10
c0014329:	85 c0                	test   eax,eax
c001432b:	75 0f                	jne    c001433c <CPU::detectFeatures()+0x32e>
c001432d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0014337:	e9 a9 00 00 00       	jmp    c00143e5 <CPU::detectFeatures()+0x3d7>
c001433c:	50                   	push   eax
c001433d:	50                   	push   eax
c001433e:	68 c8 11 02 c0       	push   0xc00211c8
c0014343:	57                   	push   edi
c0014344:	e8 af c3 fe ff       	call   c00006f8 <strcmp>
c0014349:	83 c4 10             	add    esp,0x10
c001434c:	85 c0                	test   eax,eax
c001434e:	75 0f                	jne    c001435f <CPU::detectFeatures()+0x351>
c0014350:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001435a:	e9 86 00 00 00       	jmp    c00143e5 <CPU::detectFeatures()+0x3d7>
c001435f:	50                   	push   eax
c0014360:	50                   	push   eax
c0014361:	68 d5 11 02 c0       	push   0xc00211d5
c0014366:	57                   	push   edi
c0014367:	e8 8c c3 fe ff       	call   c00006f8 <strcmp>
c001436c:	83 c4 10             	add    esp,0x10
c001436f:	85 c0                	test   eax,eax
c0014371:	75 0c                	jne    c001437f <CPU::detectFeatures()+0x371>
c0014373:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001437d:	eb 66                	jmp    c00143e5 <CPU::detectFeatures()+0x3d7>
c001437f:	50                   	push   eax
c0014380:	50                   	push   eax
c0014381:	68 e2 11 02 c0       	push   0xc00211e2
c0014386:	57                   	push   edi
c0014387:	e8 6c c3 fe ff       	call   c00006f8 <strcmp>
c001438c:	83 c4 10             	add    esp,0x10
c001438f:	85 c0                	test   eax,eax
c0014391:	75 0c                	jne    c001439f <CPU::detectFeatures()+0x391>
c0014393:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001439d:	eb 46                	jmp    c00143e5 <CPU::detectFeatures()+0x3d7>
c001439f:	50                   	push   eax
c00143a0:	50                   	push   eax
c00143a1:	68 ef 11 02 c0       	push   0xc00211ef
c00143a6:	57                   	push   edi
c00143a7:	e8 4c c3 fe ff       	call   c00006f8 <strcmp>
c00143ac:	83 c4 10             	add    esp,0x10
c00143af:	85 c0                	test   eax,eax
c00143b1:	74 e0                	je     c0014393 <CPU::detectFeatures()+0x385>
c00143b3:	50                   	push   eax
c00143b4:	50                   	push   eax
c00143b5:	68 fc 11 02 c0       	push   0xc00211fc
c00143ba:	57                   	push   edi
c00143bb:	e8 38 c3 fe ff       	call   c00006f8 <strcmp>
c00143c0:	83 c4 10             	add    esp,0x10
c00143c3:	85 c0                	test   eax,eax
c00143c5:	74 cc                	je     c0014393 <CPU::detectFeatures()+0x385>
c00143c7:	51                   	push   ecx
c00143c8:	51                   	push   ecx
c00143c9:	68 09 12 02 c0       	push   0xc0021209
c00143ce:	57                   	push   edi
c00143cf:	e8 24 c3 fe ff       	call   c00006f8 <strcmp>
c00143d4:	83 c4 10             	add    esp,0x10
c00143d7:	85 c0                	test   eax,eax
c00143d9:	74 b8                	je     c0014393 <CPU::detectFeatures()+0x385>
c00143db:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00143e5:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00143ea:	0f 86 be 00 00 00    	jbe    c00144ae <CPU::detectFeatures()+0x4a0>
c00143f0:	83 ec 0c             	sub    esp,0xc
c00143f3:	68 80 00 00 00       	push   0x80
c00143f8:	e8 10 fb ff ff       	call   c0013f0d <cpuidCheckExtendedEBX(unsigned int)>
c00143fd:	83 e0 01             	and    eax,0x1
c0014400:	c1 e0 06             	shl    eax,0x6
c0014403:	88 c2                	mov    dl,al
c0014405:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001440b:	83 e0 bf             	and    eax,0xffffffbf
c001440e:	09 d0                	or     eax,edx
c0014410:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014416:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001441d:	e8 eb fa ff ff       	call   c0013f0d <cpuidCheckExtendedEBX(unsigned int)>
c0014422:	83 e0 01             	and    eax,0x1
c0014425:	c1 e0 04             	shl    eax,0x4
c0014428:	88 c2                	mov    dl,al
c001442a:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014430:	83 e0 ef             	and    eax,0xffffffef
c0014433:	09 d0                	or     eax,edx
c0014435:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001443b:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0014442:	e8 c6 fa ff ff       	call   c0013f0d <cpuidCheckExtendedEBX(unsigned int)>
c0014447:	c1 e0 07             	shl    eax,0x7
c001444a:	88 c2                	mov    dl,al
c001444c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014452:	83 e0 7f             	and    eax,0x7f
c0014455:	09 d0                	or     eax,edx
c0014457:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001445d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0014464:	e8 d1 fa ff ff       	call   c0013f3a <cpuidCheckExtendedECX(unsigned int)>
c0014469:	83 e0 01             	and    eax,0x1
c001446c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014473:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014479:	83 e0 f7             	and    eax,0xfffffff7
c001447c:	09 d0                	or     eax,edx
c001447e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014484:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001448b:	e8 aa fa ff ff       	call   c0013f3a <cpuidCheckExtendedECX(unsigned int)>
c0014490:	83 c4 10             	add    esp,0x10
c0014493:	83 e0 01             	and    eax,0x1
c0014496:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001449d:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00144a3:	83 e0 fb             	and    eax,0xfffffffb
c00144a6:	09 d0                	or     eax,edx
c00144a8:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00144ae:	83 ec 0c             	sub    esp,0xc
c00144b1:	56                   	push   esi
c00144b2:	55                   	push   ebp
c00144b3:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00144b7:	57                   	push   edi
c00144b8:	8d 44 24 28          	lea    eax,[esp+0x28]
c00144bc:	50                   	push   eax
c00144bd:	6a 01                	push   0x1
c00144bf:	e8 6c f9 ff ff       	call   c0013e30 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00144c4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00144c8:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00144ce:	88 ca                	mov    dl,cl
c00144d0:	83 e0 f0             	and    eax,0xfffffff0
c00144d3:	83 e2 0f             	and    edx,0xf
c00144d6:	09 d0                	or     eax,edx
c00144d8:	88 ca                	mov    dl,cl
c00144da:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00144e0:	c0 ea 04             	shr    dl,0x4
c00144e3:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00144e7:	0f b6 c2             	movzx  eax,dl
c00144ea:	83 c4 20             	add    esp,0x20
c00144ed:	c1 e0 06             	shl    eax,0x6
c00144f0:	89 c5                	mov    ebp,eax
c00144f2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00144f8:	66 25 3f c0          	and    ax,0xc03f
c00144fc:	09 e8                	or     eax,ebp
c00144fe:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0014505:	89 c8                	mov    eax,ecx
c0014507:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001450d:	c1 e8 08             	shr    eax,0x8
c0014510:	83 e2 3f             	and    edx,0x3f
c0014513:	83 e0 0f             	and    eax,0xf
c0014516:	89 c5                	mov    ebp,eax
c0014518:	c1 e5 06             	shl    ebp,0x6
c001451b:	09 d5                	or     ebp,edx
c001451d:	89 ea                	mov    edx,ebp
c001451f:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0014525:	88 c2                	mov    dl,al
c0014527:	c0 ea 02             	shr    dl,0x2
c001452a:	89 d5                	mov    ebp,edx
c001452c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c0014532:	83 e2 c0             	and    edx,0xffffffc0
c0014535:	09 d5                	or     ebp,edx
c0014537:	89 ea                	mov    edx,ebp
c0014539:	89 cd                	mov    ebp,ecx
c001453b:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0014541:	c1 ed 0c             	shr    ebp,0xc
c0014544:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001454a:	83 e5 03             	and    ebp,0x3
c001454d:	83 e2 cf             	and    edx,0xffffffcf
c0014550:	c1 e5 04             	shl    ebp,0x4
c0014553:	09 d5                	or     ebp,edx
c0014555:	3c 06                	cmp    al,0x6
c0014557:	89 ea                	mov    edx,ebp
c0014559:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001455f:	74 04                	je     c0014565 <CPU::detectFeatures()+0x557>
c0014561:	3c 0f                	cmp    al,0xf
c0014563:	75 5c                	jne    c00145c1 <CPU::detectFeatures()+0x5b3>
c0014565:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0014569:	89 cd                	mov    ebp,ecx
c001456b:	c1 ed 10             	shr    ebp,0x10
c001456e:	c1 e5 04             	shl    ebp,0x4
c0014571:	09 ea                	or     edx,ebp
c0014573:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0014579:	0f b6 d2             	movzx  edx,dl
c001457c:	66 81 e5 3f c0       	and    bp,0xc03f
c0014581:	c1 e2 06             	shl    edx,0x6
c0014584:	09 ea                	or     edx,ebp
c0014586:	3c 0f                	cmp    al,0xf
c0014588:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001458f:	75 30                	jne    c00145c1 <CPU::detectFeatures()+0x5b3>
c0014591:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0014597:	c1 e9 14             	shr    ecx,0x14
c001459a:	83 e0 3f             	and    eax,0x3f
c001459d:	83 c1 0f             	add    ecx,0xf
c00145a0:	88 ca                	mov    dl,cl
c00145a2:	c0 e9 02             	shr    cl,0x2
c00145a5:	c1 e2 06             	shl    edx,0x6
c00145a8:	09 d0                	or     eax,edx
c00145aa:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c00145b0:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c00145b6:	83 e0 c0             	and    eax,0xffffffc0
c00145b9:	09 c1                	or     ecx,eax
c00145bb:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c00145c1:	83 ec 0c             	sub    esp,0xc
c00145c4:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00145cb:	56                   	push   esi
c00145cc:	8d 44 24 28          	lea    eax,[esp+0x28]
c00145d0:	50                   	push   eax
c00145d1:	57                   	push   edi
c00145d2:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00145d6:	55                   	push   ebp
c00145d7:	68 00 00 00 80       	push   0x80000000
c00145dc:	e8 4f f8 ff ff       	call   c0013e30 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00145e1:	83 c4 20             	add    esp,0x20
c00145e4:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00145ec:	8d 44 24 18          	lea    eax,[esp+0x18]
c00145f0:	76 1e                	jbe    c0014610 <CPU::detectFeatures()+0x602>
c00145f2:	83 ec 0c             	sub    esp,0xc
c00145f5:	56                   	push   esi
c00145f6:	50                   	push   eax
c00145f7:	57                   	push   edi
c00145f8:	55                   	push   ebp
c00145f9:	68 01 00 00 80       	push   0x80000001
c00145fe:	e8 2d f8 ff ff       	call   c0013e30 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014603:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001460d:	83 c4 20             	add    esp,0x20
c0014610:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0014616:	83 f8 01             	cmp    eax,0x1
c0014619:	75 6f                	jne    c001468a <CPU::detectFeatures()+0x67c>
c001461b:	51                   	push   ecx
c001461c:	51                   	push   ecx
c001461d:	68 15 12 02 c0       	push   0xc0021215
c0014622:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0014626:	56                   	push   esi
c0014627:	e8 7b c0 fe ff       	call   c00006a7 <strcpy>
c001462c:	5f                   	pop    edi
c001462d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014633:	5d                   	pop    ebp
c0014634:	66 c1 e8 06          	shr    ax,0x6
c0014638:	0f b6 c0             	movzx  eax,al
c001463b:	50                   	push   eax
c001463c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014642:	c1 e8 0e             	shr    eax,0xe
c0014645:	0f b6 c0             	movzx  eax,al
c0014648:	50                   	push   eax
c0014649:	e8 8d f4 ff ff       	call   c0013adb <lookupIntelCPUName(unsigned char, unsigned char)>
c001464e:	5a                   	pop    edx
c001464f:	59                   	pop    ecx
c0014650:	50                   	push   eax
c0014651:	56                   	push   esi
c0014652:	e8 07 c1 fe ff       	call   c000075e <strcat>
c0014657:	5f                   	pop    edi
c0014658:	5d                   	pop    ebp
c0014659:	56                   	push   esi
c001465a:	53                   	push   ebx
c001465b:	e8 94 c0 ff ff       	call   c00106f4 <Device::setName(char const*)>
c0014660:	58                   	pop    eax
c0014661:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0014667:	5a                   	pop    edx
c0014668:	68 1c 12 02 c0       	push   0xc002121c
c001466d:	50                   	push   eax
c001466e:	e8 85 c0 fe ff       	call   c00006f8 <strcmp>
c0014673:	83 c4 10             	add    esp,0x10
c0014676:	85 c0                	test   eax,eax
c0014678:	0f 85 73 03 00 00    	jne    c00149f1 <CPU::detectFeatures()+0x9e3>
c001467e:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0014685:	e9 67 03 00 00       	jmp    c00149f1 <CPU::detectFeatures()+0x9e3>
c001468a:	83 f8 02             	cmp    eax,0x2
c001468d:	0f 85 b5 00 00 00    	jne    c0014748 <CPU::detectFeatures()+0x73a>
c0014693:	57                   	push   edi
c0014694:	57                   	push   edi
c0014695:	68 2e 12 02 c0       	push   0xc002122e
c001469a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001469e:	56                   	push   esi
c001469f:	e8 03 c0 fe ff       	call   c00006a7 <strcpy>
c00146a4:	5d                   	pop    ebp
c00146a5:	58                   	pop    eax
c00146a6:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00146ac:	66 c1 e8 06          	shr    ax,0x6
c00146b0:	0f b6 c0             	movzx  eax,al
c00146b3:	50                   	push   eax
c00146b4:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00146ba:	c1 e8 0e             	shr    eax,0xe
c00146bd:	0f b6 c0             	movzx  eax,al
c00146c0:	50                   	push   eax
c00146c1:	e8 81 f2 ff ff       	call   c0013947 <lookupAMDCPUName(unsigned char, unsigned char)>
c00146c6:	5a                   	pop    edx
c00146c7:	59                   	pop    ecx
c00146c8:	50                   	push   eax
c00146c9:	56                   	push   esi
c00146ca:	e8 8f c0 fe ff       	call   c000075e <strcat>
c00146cf:	5f                   	pop    edi
c00146d0:	5d                   	pop    ebp
c00146d1:	56                   	push   esi
c00146d2:	53                   	push   ebx
c00146d3:	e8 1c c0 ff ff       	call   c00106f4 <Device::setName(char const*)>
c00146d8:	58                   	pop    eax
c00146d9:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00146df:	5a                   	pop    edx
c00146e0:	68 33 12 02 c0       	push   0xc0021233
c00146e5:	50                   	push   eax
c00146e6:	e8 0d c0 fe ff       	call   c00006f8 <strcmp>
c00146eb:	83 c4 10             	add    esp,0x10
c00146ee:	85 c0                	test   eax,eax
c00146f0:	75 20                	jne    c0014712 <CPU::detectFeatures()+0x704>
c00146f2:	8b 15 c8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022ec8
c00146f8:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00146fe:	a8 01                	test   al,0x1
c0014700:	74 10                	je     c0014712 <CPU::detectFeatures()+0x704>
c0014702:	83 e0 fe             	and    eax,0xfffffffe
c0014705:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001470b:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0014712:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014718:	c1 e8 0e             	shr    eax,0xe
c001471b:	3c 05                	cmp    al,0x5
c001471d:	0f 85 ce 02 00 00    	jne    c00149f1 <CPU::detectFeatures()+0x9e3>
c0014723:	56                   	push   esi
c0014724:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001472a:	83 e0 0f             	and    eax,0xf
c001472d:	50                   	push   eax
c001472e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0014734:	66 c1 e8 06          	shr    ax,0x6
c0014738:	0f b6 c0             	movzx  eax,al
c001473b:	50                   	push   eax
c001473c:	6a 05                	push   0x5
c001473e:	e8 7a f6 ff ff       	call   c0013dbd <AMD_K6_writeback(int, int, int)>
c0014743:	e9 1f 02 00 00       	jmp    c0014967 <CPU::detectFeatures()+0x959>
c0014748:	8d 50 fd             	lea    edx,[eax-0x3]
c001474b:	83 fa 01             	cmp    edx,0x1
c001474e:	76 09                	jbe    c0014759 <CPU::detectFeatures()+0x74b>
c0014750:	83 f8 06             	cmp    eax,0x6
c0014753:	0f 85 91 01 00 00    	jne    c00148ea <CPU::detectFeatures()+0x8dc>
c0014759:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001475f:	c1 ea 0e             	shr    edx,0xe
c0014762:	80 fa 05             	cmp    dl,0x5
c0014765:	75 7b                	jne    c00147e2 <CPU::detectFeatures()+0x7d4>
c0014767:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001476d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0014772:	66 81 fa 00 01       	cmp    dx,0x100
c0014777:	75 0c                	jne    c0014785 <CPU::detectFeatures()+0x777>
c0014779:	51                   	push   ecx
c001477a:	51                   	push   ecx
c001477b:	68 3a 12 02 c0       	push   0xc002123a
c0014780:	e9 dc 01 00 00       	jmp    c0014961 <CPU::detectFeatures()+0x953>
c0014785:	66 81 fa 00 02       	cmp    dx,0x200
c001478a:	75 0c                	jne    c0014798 <CPU::detectFeatures()+0x78a>
c001478c:	52                   	push   edx
c001478d:	52                   	push   edx
c001478e:	68 4d 12 02 c0       	push   0xc002124d
c0014793:	e9 c9 01 00 00       	jmp    c0014961 <CPU::detectFeatures()+0x953>
c0014798:	66 81 fa 40 02       	cmp    dx,0x240
c001479d:	75 0c                	jne    c00147ab <CPU::detectFeatures()+0x79d>
c001479f:	50                   	push   eax
c00147a0:	50                   	push   eax
c00147a1:	68 5f 12 02 c0       	push   0xc002125f
c00147a6:	e9 b6 01 00 00       	jmp    c0014961 <CPU::detectFeatures()+0x953>
c00147ab:	83 f8 06             	cmp    eax,0x6
c00147ae:	75 0c                	jne    c00147bc <CPU::detectFeatures()+0x7ae>
c00147b0:	50                   	push   eax
c00147b1:	50                   	push   eax
c00147b2:	68 71 12 02 c0       	push   0xc0021271
c00147b7:	e9 a5 01 00 00       	jmp    c0014961 <CPU::detectFeatures()+0x953>
c00147bc:	83 f8 04             	cmp    eax,0x4
c00147bf:	75 0c                	jne    c00147cd <CPU::detectFeatures()+0x7bf>
c00147c1:	50                   	push   eax
c00147c2:	50                   	push   eax
c00147c3:	68 7d 12 02 c0       	push   0xc002127d
c00147c8:	e9 94 01 00 00       	jmp    c0014961 <CPU::detectFeatures()+0x953>
c00147cd:	83 f8 03             	cmp    eax,0x3
c00147d0:	0f 85 1b 02 00 00    	jne    c00149f1 <CPU::detectFeatures()+0x9e3>
c00147d6:	50                   	push   eax
c00147d7:	50                   	push   eax
c00147d8:	68 85 12 02 c0       	push   0xc0021285
c00147dd:	e9 7f 01 00 00       	jmp    c0014961 <CPU::detectFeatures()+0x953>
c00147e2:	80 fa 06             	cmp    dl,0x6
c00147e5:	0f 85 db 00 00 00    	jne    c00148c6 <CPU::detectFeatures()+0x8b8>
c00147eb:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00147f1:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00147f6:	66 81 fa 80 01       	cmp    dx,0x180
c00147fb:	75 0c                	jne    c0014809 <CPU::detectFeatures()+0x7fb>
c00147fd:	50                   	push   eax
c00147fe:	50                   	push   eax
c00147ff:	68 90 12 02 c0       	push   0xc0021290
c0014804:	e9 58 01 00 00       	jmp    c0014961 <CPU::detectFeatures()+0x953>
c0014809:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001480f:	66 f7 c1 80 ff       	test   cx,0xff80
c0014814:	75 0c                	jne    c0014822 <CPU::detectFeatures()+0x814>
c0014816:	50                   	push   eax
c0014817:	50                   	push   eax
c0014818:	68 a0 12 02 c0       	push   0xc00212a0
c001481d:	e9 3f 01 00 00       	jmp    c0014961 <CPU::detectFeatures()+0x953>
c0014822:	66 81 fa 40 02       	cmp    dx,0x240
c0014827:	75 0c                	jne    c0014835 <CPU::detectFeatures()+0x827>
c0014829:	55                   	push   ebp
c001482a:	55                   	push   ebp
c001482b:	68 a7 12 02 c0       	push   0xc00212a7
c0014830:	e9 2c 01 00 00       	jmp    c0014961 <CPU::detectFeatures()+0x953>
c0014835:	66 81 fa 80 02       	cmp    dx,0x280
c001483a:	75 0c                	jne    c0014848 <CPU::detectFeatures()+0x83a>
c001483c:	57                   	push   edi
c001483d:	57                   	push   edi
c001483e:	68 b0 12 02 c0       	push   0xc00212b0
c0014843:	e9 19 01 00 00       	jmp    c0014961 <CPU::detectFeatures()+0x953>
c0014848:	66 81 fa 40 03       	cmp    dx,0x340
c001484d:	74 ed                	je     c001483c <CPU::detectFeatures()+0x82e>
c001484f:	66 81 fa c0 03       	cmp    dx,0x3c0
c0014854:	75 0c                	jne    c0014862 <CPU::detectFeatures()+0x854>
c0014856:	56                   	push   esi
c0014857:	56                   	push   esi
c0014858:	68 b7 12 02 c0       	push   0xc00212b7
c001485d:	e9 ff 00 00 00       	jmp    c0014961 <CPU::detectFeatures()+0x953>
c0014862:	83 f8 06             	cmp    eax,0x6
c0014865:	0f 84 45 ff ff ff    	je     c00147b0 <CPU::detectFeatures()+0x7a2>
c001486b:	83 f8 04             	cmp    eax,0x4
c001486e:	0f 84 4d ff ff ff    	je     c00147c1 <CPU::detectFeatures()+0x7b3>
c0014874:	83 f8 03             	cmp    eax,0x3
c0014877:	0f 85 74 01 00 00    	jne    c00149f1 <CPU::detectFeatures()+0x9e3>
c001487d:	51                   	push   ecx
c001487e:	51                   	push   ecx
c001487f:	68 c0 12 02 c0       	push   0xc00212c0
c0014884:	53                   	push   ebx
c0014885:	e8 6a be ff ff       	call   c00106f4 <Device::setName(char const*)>
c001488a:	b1 c1                	mov    cl,0xc1
c001488c:	88 c8                	mov    al,cl
c001488e:	e6 22                	out    0x22,al
c0014890:	e4 23                	in     al,0x23
c0014892:	88 c2                	mov    dl,al
c0014894:	88 c8                	mov    al,cl
c0014896:	e6 22                	out    0x22,al
c0014898:	88 d0                	mov    al,dl
c001489a:	83 c8 10             	or     eax,0x10
c001489d:	e6 23                	out    0x23,al
c001489f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00148a6:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00148a9:	89 d0                	mov    eax,edx
c00148ab:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c00148b1:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c00148b5:	40                   	inc    eax
c00148b6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00148bc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00148c1:	e9 a1 00 00 00       	jmp    c0014967 <CPU::detectFeatures()+0x959>
c00148c6:	83 f8 06             	cmp    eax,0x6
c00148c9:	0f 84 e1 fe ff ff    	je     c00147b0 <CPU::detectFeatures()+0x7a2>
c00148cf:	83 f8 04             	cmp    eax,0x4
c00148d2:	0f 84 e9 fe ff ff    	je     c00147c1 <CPU::detectFeatures()+0x7b3>
c00148d8:	83 f8 03             	cmp    eax,0x3
c00148db:	0f 85 10 01 00 00    	jne    c00149f1 <CPU::detectFeatures()+0x9e3>
c00148e1:	52                   	push   edx
c00148e2:	52                   	push   edx
c00148e3:	68 cb 12 02 c0       	push   0xc00212cb
c00148e8:	eb 77                	jmp    c0014961 <CPU::detectFeatures()+0x953>
c00148ea:	83 f8 07             	cmp    eax,0x7
c00148ed:	75 09                	jne    c00148f8 <CPU::detectFeatures()+0x8ea>
c00148ef:	50                   	push   eax
c00148f0:	50                   	push   eax
c00148f1:	68 d5 12 02 c0       	push   0xc00212d5
c00148f6:	eb 69                	jmp    c0014961 <CPU::detectFeatures()+0x953>
c00148f8:	83 f8 0a             	cmp    eax,0xa
c00148fb:	75 09                	jne    c0014906 <CPU::detectFeatures()+0x8f8>
c00148fd:	50                   	push   eax
c00148fe:	50                   	push   eax
c00148ff:	68 e0 12 02 c0       	push   0xc00212e0
c0014904:	eb 5b                	jmp    c0014961 <CPU::detectFeatures()+0x953>
c0014906:	83 f8 0b             	cmp    eax,0xb
c0014909:	75 09                	jne    c0014914 <CPU::detectFeatures()+0x906>
c001490b:	50                   	push   eax
c001490c:	50                   	push   eax
c001490d:	68 e8 12 02 c0       	push   0xc00212e8
c0014912:	eb 4d                	jmp    c0014961 <CPU::detectFeatures()+0x953>
c0014914:	83 f8 08             	cmp    eax,0x8
c0014917:	75 09                	jne    c0014922 <CPU::detectFeatures()+0x914>
c0014919:	50                   	push   eax
c001491a:	50                   	push   eax
c001491b:	68 f1 12 02 c0       	push   0xc00212f1
c0014920:	eb 3f                	jmp    c0014961 <CPU::detectFeatures()+0x953>
c0014922:	83 f8 09             	cmp    eax,0x9
c0014925:	75 09                	jne    c0014930 <CPU::detectFeatures()+0x922>
c0014927:	50                   	push   eax
c0014928:	50                   	push   eax
c0014929:	68 f9 12 02 c0       	push   0xc00212f9
c001492e:	eb 31                	jmp    c0014961 <CPU::detectFeatures()+0x953>
c0014930:	83 f8 05             	cmp    eax,0x5
c0014933:	75 09                	jne    c001493e <CPU::detectFeatures()+0x930>
c0014935:	50                   	push   eax
c0014936:	50                   	push   eax
c0014937:	68 01 13 02 c0       	push   0xc0021301
c001493c:	eb 23                	jmp    c0014961 <CPU::detectFeatures()+0x953>
c001493e:	83 f8 0c             	cmp    eax,0xc
c0014941:	75 09                	jne    c001494c <CPU::detectFeatures()+0x93e>
c0014943:	55                   	push   ebp
c0014944:	55                   	push   ebp
c0014945:	68 0f 13 02 c0       	push   0xc002130f
c001494a:	eb 15                	jmp    c0014961 <CPU::detectFeatures()+0x953>
c001494c:	83 f8 0d             	cmp    eax,0xd
c001494f:	75 09                	jne    c001495a <CPU::detectFeatures()+0x94c>
c0014951:	57                   	push   edi
c0014952:	57                   	push   edi
c0014953:	68 1a 13 02 c0       	push   0xc002131a
c0014958:	eb 07                	jmp    c0014961 <CPU::detectFeatures()+0x953>
c001495a:	56                   	push   esi
c001495b:	56                   	push   esi
c001495c:	68 2e 13 02 c0       	push   0xc002132e
c0014961:	53                   	push   ebx
c0014962:	e8 8d bd ff ff       	call   c00106f4 <Device::setName(char const*)>
c0014967:	83 c4 10             	add    esp,0x10
c001496a:	e9 82 00 00 00       	jmp    c00149f1 <CPU::detectFeatures()+0x9e3>
c001496f:	51                   	push   ecx
c0014970:	51                   	push   ecx
c0014971:	68 7a 11 02 c0       	push   0xc002117a
c0014976:	57                   	push   edi
c0014977:	e8 2b bd fe ff       	call   c00006a7 <strcpy>
c001497c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014986:	e8 f4 b7 fe ff       	call   c000017f <is486>
c001498b:	83 c4 10             	add    esp,0x10
c001498e:	85 c0                	test   eax,eax
c0014990:	74 2d                	je     c00149bf <CPU::detectFeatures()+0x9b1>
c0014992:	52                   	push   edx
c0014993:	52                   	push   edx
c0014994:	68 3a 13 02 c0       	push   0xc002133a
c0014999:	53                   	push   ebx
c001499a:	e8 55 bd ff ff       	call   c00106f4 <Device::setName(char const*)>
c001499f:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00149a6:	e8 fa 99 00 00       	call   c001e3a5 <CPU::readCR0()>
c00149ab:	83 c4 10             	add    esp,0x10
c00149ae:	83 e0 14             	and    eax,0x14
c00149b1:	83 f8 04             	cmp    eax,0x4
c00149b4:	75 1f                	jne    c00149d5 <CPU::detectFeatures()+0x9c7>
c00149b6:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c00149bd:	eb 32                	jmp    c00149f1 <CPU::detectFeatures()+0x9e3>
c00149bf:	50                   	push   eax
c00149c0:	50                   	push   eax
c00149c1:	68 45 13 02 c0       	push   0xc0021345
c00149c6:	53                   	push   ebx
c00149c7:	e8 28 bd ff ff       	call   c00106f4 <Device::setName(char const*)>
c00149cc:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c00149d3:	eb d1                	jmp    c00149a6 <CPU::detectFeatures()+0x998>
c00149d5:	e8 80 b7 fe ff       	call   c000015a <hasLegacyFPU>
c00149da:	83 e0 01             	and    eax,0x1
c00149dd:	8d 14 00             	lea    edx,[eax+eax*1]
c00149e0:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00149e6:	83 e0 fd             	and    eax,0xfffffffd
c00149e9:	09 d0                	or     eax,edx
c00149eb:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00149f1:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00149f8:	83 c4 4c             	add    esp,0x4c
c00149fb:	5b                   	pop    ebx
c00149fc:	5e                   	pop    esi
c00149fd:	5f                   	pop    edi
c00149fe:	5d                   	pop    ebp
c00149ff:	c3                   	ret    

c0014a00 <CPU::setupSMEP()>:
c0014a00:	83 ec 0c             	sub    esp,0xc
c0014a03:	e8 d3 99 00 00       	call   c001e3db <CPU::readCR4()>
c0014a08:	0d 00 00 10 00       	or     eax,0x100000
c0014a0d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a11:	83 c4 0c             	add    esp,0xc
c0014a14:	e9 ac a0 00 00       	jmp    c001eac5 <CPU::writeCR4(unsigned long)>
c0014a19:	90                   	nop

c0014a1a <CPU::setupUMIP()>:
c0014a1a:	83 ec 0c             	sub    esp,0xc
c0014a1d:	e8 b9 99 00 00       	call   c001e3db <CPU::readCR4()>
c0014a22:	80 cc 08             	or     ah,0x8
c0014a25:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a29:	83 c4 0c             	add    esp,0xc
c0014a2c:	e9 94 a0 00 00       	jmp    c001eac5 <CPU::writeCR4(unsigned long)>
c0014a31:	90                   	nop

c0014a32 <CPU::setupTSC()>:
c0014a32:	83 ec 0c             	sub    esp,0xc
c0014a35:	e8 a1 99 00 00       	call   c001e3db <CPU::readCR4()>
c0014a3a:	83 c8 04             	or     eax,0x4
c0014a3d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a41:	83 c4 0c             	add    esp,0xc
c0014a44:	e9 7c a0 00 00       	jmp    c001eac5 <CPU::writeCR4(unsigned long)>
c0014a49:	90                   	nop

c0014a4a <CPU::setupLargePages()>:
c0014a4a:	83 ec 0c             	sub    esp,0xc
c0014a4d:	e8 89 99 00 00       	call   c001e3db <CPU::readCR4()>
c0014a52:	83 c8 10             	or     eax,0x10
c0014a55:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014a59:	83 c4 0c             	add    esp,0xc
c0014a5c:	e9 64 a0 00 00       	jmp    c001eac5 <CPU::writeCR4(unsigned long)>
c0014a61:	90                   	nop

c0014a62 <CPU::setupPAT()>:
c0014a62:	a1 c8 2e 02 c0       	mov    eax,ds:0xc0022ec8
c0014a67:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0014a6e:	74 2c                	je     c0014a9c <CPU::setupPAT()+0x3a>
c0014a70:	53                   	push   ebx
c0014a71:	83 ec 10             	sub    esp,0x10
c0014a74:	68 77 02 00 00       	push   0x277
c0014a79:	50                   	push   eax
c0014a7a:	e8 47 67 ff ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c0014a7f:	83 e2 f8             	and    edx,0xfffffff8
c0014a82:	83 ca 01             	or     edx,0x1
c0014a85:	52                   	push   edx
c0014a86:	50                   	push   eax
c0014a87:	68 77 02 00 00       	push   0x277
c0014a8c:	ff 35 c8 2e 02 c0    	push   DWORD PTR ds:0xc0022ec8
c0014a92:	e8 5b 67 ff ff       	call   c000b1f2 <Computer::wrmsr(unsigned int, unsigned long long)>
c0014a97:	83 c4 28             	add    esp,0x28
c0014a9a:	5b                   	pop    ebx
c0014a9b:	c3                   	ret    
c0014a9c:	c3                   	ret    
c0014a9d:	90                   	nop

c0014a9e <CPU::setupMTRR()>:
c0014a9e:	c3                   	ret    
c0014a9f:	90                   	nop

c0014aa0 <CPU::setupGlobalPages()>:
c0014aa0:	83 ec 0c             	sub    esp,0xc
c0014aa3:	e8 33 99 00 00       	call   c001e3db <CPU::readCR4()>
c0014aa8:	0c 80                	or     al,0x80
c0014aaa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014aae:	83 c4 0c             	add    esp,0xc
c0014ab1:	e9 0f a0 00 00       	jmp    c001eac5 <CPU::writeCR4(unsigned long)>

c0014ab6 <CPU::allowUsermodeDataAccess()>:
c0014ab6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014aba:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014ac1:	74 03                	je     c0014ac6 <CPU::allowUsermodeDataAccess()+0x10>
c0014ac3:	0f 01 cb             	stac   
c0014ac6:	c3                   	ret    
c0014ac7:	90                   	nop

c0014ac8 <CPU::prohibitUsermodeDataAccess()>:
c0014ac8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014acc:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0014ad3:	74 03                	je     c0014ad8 <CPU::prohibitUsermodeDataAccess()+0x10>
c0014ad5:	0f 01 ca             	clac   
c0014ad8:	c3                   	ret    
c0014ad9:	90                   	nop

c0014ada <CPU::setupSMAP()>:
c0014ada:	53                   	push   ebx
c0014adb:	83 ec 08             	sub    esp,0x8
c0014ade:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014ae2:	e8 f4 98 00 00       	call   c001e3db <CPU::readCR4()>
c0014ae7:	83 ec 0c             	sub    esp,0xc
c0014aea:	0d 00 00 20 00       	or     eax,0x200000
c0014aef:	50                   	push   eax
c0014af0:	e8 d0 9f 00 00       	call   c001eac5 <CPU::writeCR4(unsigned long)>
c0014af5:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014af9:	83 c4 18             	add    esp,0x18
c0014afc:	5b                   	pop    ebx
c0014afd:	eb c9                	jmp    c0014ac8 <CPU::prohibitUsermodeDataAccess()>
c0014aff:	90                   	nop

c0014b00 <CPU::setupFeatures()>:
c0014b00:	53                   	push   ebx
c0014b01:	83 ec 08             	sub    esp,0x8
c0014b04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b08:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0014b0f:	74 0c                	je     c0014b1d <CPU::setupFeatures()+0x1d>
c0014b11:	83 ec 0c             	sub    esp,0xc
c0014b14:	53                   	push   ebx
c0014b15:	e8 e6 fe ff ff       	call   c0014a00 <CPU::setupSMEP()>
c0014b1a:	83 c4 10             	add    esp,0x10
c0014b1d:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0014b24:	74 0c                	je     c0014b32 <CPU::setupFeatures()+0x32>
c0014b26:	83 ec 0c             	sub    esp,0xc
c0014b29:	53                   	push   ebx
c0014b2a:	e8 ab ff ff ff       	call   c0014ada <CPU::setupSMAP()>
c0014b2f:	83 c4 10             	add    esp,0x10
c0014b32:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014b39:	74 0c                	je     c0014b47 <CPU::setupFeatures()+0x47>
c0014b3b:	83 ec 0c             	sub    esp,0xc
c0014b3e:	53                   	push   ebx
c0014b3f:	e8 d6 fe ff ff       	call   c0014a1a <CPU::setupUMIP()>
c0014b44:	83 c4 10             	add    esp,0x10
c0014b47:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014b4e:	74 0c                	je     c0014b5c <CPU::setupFeatures()+0x5c>
c0014b50:	83 ec 0c             	sub    esp,0xc
c0014b53:	53                   	push   ebx
c0014b54:	e8 d9 fe ff ff       	call   c0014a32 <CPU::setupTSC()>
c0014b59:	83 c4 10             	add    esp,0x10
c0014b5c:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014b63:	74 0c                	je     c0014b71 <CPU::setupFeatures()+0x71>
c0014b65:	83 ec 0c             	sub    esp,0xc
c0014b68:	53                   	push   ebx
c0014b69:	e8 dc fe ff ff       	call   c0014a4a <CPU::setupLargePages()>
c0014b6e:	83 c4 10             	add    esp,0x10
c0014b71:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014b78:	74 0c                	je     c0014b86 <CPU::setupFeatures()+0x86>
c0014b7a:	83 ec 0c             	sub    esp,0xc
c0014b7d:	53                   	push   ebx
c0014b7e:	e8 1d ff ff ff       	call   c0014aa0 <CPU::setupGlobalPages()>
c0014b83:	83 c4 10             	add    esp,0x10
c0014b86:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014b8d:	74 0d                	je     c0014b9c <CPU::setupFeatures()+0x9c>
c0014b8f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0014b93:	83 c4 08             	add    esp,0x8
c0014b96:	5b                   	pop    ebx
c0014b97:	e9 c6 fe ff ff       	jmp    c0014a62 <CPU::setupPAT()>
c0014b9c:	83 c4 08             	add    esp,0x8
c0014b9f:	5b                   	pop    ebx
c0014ba0:	c3                   	ret    
c0014ba1:	90                   	nop

c0014ba2 <CPU::open(int, int, void*)>:
c0014ba2:	57                   	push   edi
c0014ba3:	56                   	push   esi
c0014ba4:	53                   	push   ebx
c0014ba5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014ba9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014bad:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0014bb3:	83 ec 0c             	sub    esp,0xc
c0014bb6:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0014bbc:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0014bc2:	50                   	push   eax
c0014bc3:	e8 dc 68 ff ff       	call   c000b4a4 <GDT::setup()>
c0014bc8:	83 c4 0c             	add    esp,0xc
c0014bcb:	6a 00                	push   0x0
c0014bcd:	68 ef be ad de       	push   0xdeadbeef
c0014bd2:	57                   	push   edi
c0014bd3:	e8 c6 8f ff ff       	call   c000db9e <TSS::setup(unsigned long, unsigned long)>
c0014bd8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014bdb:	e8 9e 8f ff ff       	call   c000db7e <TSS::flush()>
c0014be0:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0014be6:	89 04 24             	mov    DWORD PTR [esp],eax
c0014be9:	e8 10 6b ff ff       	call   c000b6fe <IDT::setup()>
c0014bee:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c0014bf5:	e8 c2 9e 00 00       	call   c001eabc <CPU::writeDR7(unsigned long)>
c0014bfa:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0014c04:	e8 d2 7a ff ff       	call   c000c6db <Phys::allocatePage()>
c0014c09:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0014c0f:	89 30                	mov    DWORD PTR [eax],esi
c0014c11:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0014c17:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0014c1a:	58                   	pop    eax
c0014c1b:	5a                   	pop    edx
c0014c1c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0014c22:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0014c26:	e8 53 9d ff ff       	call   c000e97e <VAS::setCPUSpecific(unsigned long)>
c0014c2b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c2e:	e8 db f3 ff ff       	call   c001400e <CPU::detectFeatures()>
c0014c33:	e8 14 c8 ff ff       	call   c001144c <setupInterruptController()>
c0014c38:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0014c3e:	a1 e0 2e 02 c0       	mov    eax,ds:0xc0022ee0
c0014c43:	83 e0 10             	and    eax,0x10
c0014c46:	83 f8 01             	cmp    eax,0x1
c0014c49:	19 c0                	sbb    eax,eax
c0014c4b:	83 e0 46             	and    eax,0x46
c0014c4e:	83 c0 1e             	add    eax,0x1e
c0014c51:	89 04 24             	mov    DWORD PTR [esp],eax
c0014c54:	e8 db d9 ff ff       	call   c0012634 <setupTimer(int)>
c0014c59:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0014c5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c62:	e8 99 fe ff ff       	call   c0014b00 <CPU::setupFeatures()>
c0014c67:	83 c4 10             	add    esp,0x10
c0014c6a:	31 c0                	xor    eax,eax
c0014c6c:	5b                   	pop    ebx
c0014c6d:	5e                   	pop    esi
c0014c6e:	5f                   	pop    edi
c0014c6f:	c3                   	ret    

c0014c70 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0014c70:	55                   	push   ebp
c0014c71:	57                   	push   edi
c0014c72:	56                   	push   esi
c0014c73:	53                   	push   ebx
c0014c74:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0014c7a:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014c81:	8a 1e                	mov    bl,BYTE PTR [esi]
c0014c83:	8d 6e 01             	lea    ebp,[esi+0x1]
c0014c86:	80 fb 40             	cmp    bl,0x40
c0014c89:	75 1b                	jne    c0014ca6 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c0014c8b:	8a 16                	mov    dl,BYTE PTR [esi]
c0014c8d:	84 d2                	test   dl,dl
c0014c8f:	0f 84 f1 00 00 00    	je     c0014d86 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014c95:	8d 46 01             	lea    eax,[esi+0x1]
c0014c98:	80 fa 3a             	cmp    dl,0x3a
c0014c9b:	74 04                	je     c0014ca1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c0014c9d:	89 c6                	mov    esi,eax
c0014c9f:	eb ea                	jmp    c0014c8b <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0014ca1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0014ca4:	89 c6                	mov    esi,eax
c0014ca6:	50                   	push   eax
c0014ca7:	6a 40                	push   0x40
c0014ca9:	6a 00                	push   0x0
c0014cab:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014caf:	50                   	push   eax
c0014cb0:	e8 53 b9 fe ff       	call   c0000608 <memset>
c0014cb5:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0014cbc:	31 c0                	xor    eax,eax
c0014cbe:	83 c4 10             	add    esp,0x10
c0014cc1:	8a 0f                	mov    cl,BYTE PTR [edi]
c0014cc3:	84 c9                	test   cl,cl
c0014cc5:	0f 84 bb 00 00 00    	je     c0014d86 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014ccb:	3d c7 00 00 00       	cmp    eax,0xc7
c0014cd0:	0f 8f b0 00 00 00    	jg     c0014d86 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014cd6:	80 f9 0a             	cmp    cl,0xa
c0014cd9:	0f 85 98 00 00 00    	jne    c0014d77 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0014cdf:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0014ce4:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0014ce8:	a8 df                	test   al,0xdf
c0014cea:	0f 94 c1             	sete   cl
c0014ced:	3c 23                	cmp    al,0x23
c0014cef:	0f 94 c2             	sete   dl
c0014cf2:	08 d1                	or     cl,dl
c0014cf4:	75 4a                	jne    c0014d40 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014cf6:	8d 50 f7             	lea    edx,[eax-0x9]
c0014cf9:	80 fa 01             	cmp    dl,0x1
c0014cfc:	76 42                	jbe    c0014d40 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014cfe:	3c 5b                	cmp    al,0x5b
c0014d00:	75 42                	jne    c0014d44 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0014d02:	80 fb 40             	cmp    bl,0x40
c0014d05:	75 39                	jne    c0014d40 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d07:	83 ec 0c             	sub    esp,0xc
c0014d0a:	8d 54 24 65          	lea    edx,[esp+0x65]
c0014d0e:	52                   	push   edx
c0014d0f:	e8 11 b9 fe ff       	call   c0000625 <strlen>
c0014d14:	83 c4 10             	add    esp,0x10
c0014d17:	83 f8 3f             	cmp    eax,0x3f
c0014d1a:	77 6a                	ja     c0014d86 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d1c:	50                   	push   eax
c0014d1d:	50                   	push   eax
c0014d1e:	8d 54 24 61          	lea    edx,[esp+0x61]
c0014d22:	52                   	push   edx
c0014d23:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014d27:	52                   	push   edx
c0014d28:	e8 7a b9 fe ff       	call   c00006a7 <strcpy>
c0014d2d:	58                   	pop    eax
c0014d2e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0014d32:	52                   	push   edx
c0014d33:	e8 ed b8 fe ff       	call   c0000625 <strlen>
c0014d38:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0014d3d:	83 c4 10             	add    esp,0x10
c0014d40:	31 d2                	xor    edx,edx
c0014d42:	eb 3a                	jmp    c0014d7e <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0014d44:	80 fb 40             	cmp    bl,0x40
c0014d47:	74 06                	je     c0014d4f <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0014d49:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014d4d:	eb 20                	jmp    c0014d6f <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c0014d4f:	50                   	push   eax
c0014d50:	50                   	push   eax
c0014d51:	55                   	push   ebp
c0014d52:	8d 44 24 24          	lea    eax,[esp+0x24]
c0014d56:	50                   	push   eax
c0014d57:	e8 9c b9 fe ff       	call   c00006f8 <strcmp>
c0014d5c:	83 c4 10             	add    esp,0x10
c0014d5f:	85 c0                	test   eax,eax
c0014d61:	75 dd                	jne    c0014d40 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014d63:	eb e4                	jmp    c0014d49 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0014d65:	8d 50 01             	lea    edx,[eax+0x1]
c0014d68:	80 f9 3d             	cmp    cl,0x3d
c0014d6b:	74 1d                	je     c0014d8a <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c0014d6d:	89 d0                	mov    eax,edx
c0014d6f:	8a 08                	mov    cl,BYTE PTR [eax]
c0014d71:	84 c9                	test   cl,cl
c0014d73:	75 f0                	jne    c0014d65 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0014d75:	eb 0f                	jmp    c0014d86 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0014d77:	8d 50 01             	lea    edx,[eax+0x1]
c0014d7a:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c0014d7e:	47                   	inc    edi
c0014d7f:	89 d0                	mov    eax,edx
c0014d81:	e9 3b ff ff ff       	jmp    c0014cc1 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c0014d86:	31 c0                	xor    eax,eax
c0014d88:	eb 33                	jmp    c0014dbd <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c0014d8a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014d8e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0014d91:	50                   	push   eax
c0014d92:	50                   	push   eax
c0014d93:	8d 44 24 60          	lea    eax,[esp+0x60]
c0014d97:	50                   	push   eax
c0014d98:	56                   	push   esi
c0014d99:	e8 5a b9 fe ff       	call   c00006f8 <strcmp>
c0014d9e:	83 c4 10             	add    esp,0x10
c0014da1:	85 c0                	test   eax,eax
c0014da3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014da7:	75 97                	jne    c0014d40 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0014da9:	51                   	push   ecx
c0014daa:	51                   	push   ecx
c0014dab:	52                   	push   edx
c0014dac:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0014db3:	e8 ef b8 fe ff       	call   c00006a7 <strcpy>
c0014db8:	83 c4 10             	add    esp,0x10
c0014dbb:	b0 01                	mov    al,0x1
c0014dbd:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014dc3:	5b                   	pop    ebx
c0014dc4:	5e                   	pop    esi
c0014dc5:	5f                   	pop    edi
c0014dc6:	5d                   	pop    ebp
c0014dc7:	c3                   	ret    

c0014dc8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0014dc8:	57                   	push   edi
c0014dc9:	56                   	push   esi
c0014dca:	53                   	push   ebx
c0014dcb:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0014dd1:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0014dd8:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0014ddf:	53                   	push   ebx
c0014de0:	e8 40 b8 fe ff       	call   c0000625 <strlen>
c0014de5:	89 34 24             	mov    DWORD PTR [esp],esi
c0014de8:	89 c7                	mov    edi,eax
c0014dea:	e8 36 b8 fe ff       	call   c0000625 <strlen>
c0014def:	83 c4 10             	add    esp,0x10
c0014df2:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0014df6:	31 ff                	xor    edi,edi
c0014df8:	3d ff 00 00 00       	cmp    eax,0xff
c0014dfd:	0f 87 18 01 00 00    	ja     c0014f1b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0014e03:	51                   	push   ecx
c0014e04:	51                   	push   ecx
c0014e05:	56                   	push   esi
c0014e06:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0014e0a:	56                   	push   esi
c0014e0b:	e8 97 b8 fe ff       	call   c00006a7 <strcpy>
c0014e10:	58                   	pop    eax
c0014e11:	5a                   	pop    edx
c0014e12:	68 58 16 02 c0       	push   0xc0021658
c0014e17:	56                   	push   esi
c0014e18:	e8 41 b9 fe ff       	call   c000075e <strcat>
c0014e1d:	59                   	pop    ecx
c0014e1e:	58                   	pop    eax
c0014e1f:	53                   	push   ebx
c0014e20:	56                   	push   esi
c0014e21:	e8 38 b9 fe ff       	call   c000075e <strcat>
c0014e26:	58                   	pop    eax
c0014e27:	5a                   	pop    edx
c0014e28:	68 7c 13 02 c0       	push   0xc002137c
c0014e2d:	56                   	push   esi
c0014e2e:	e8 2b b9 fe ff       	call   c000075e <strcat>
c0014e33:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0014e3a:	e8 c9 a3 ff ff       	call   c000f208 <operator new(unsigned long)>
c0014e3f:	83 c4 0c             	add    esp,0xc
c0014e42:	89 c3                	mov    ebx,eax
c0014e44:	ff 35 94 42 02 c0    	push   DWORD PTR ds:0xc0024294
c0014e4a:	56                   	push   esi
c0014e4b:	50                   	push   eax
c0014e4c:	e8 e5 a7 ff ff       	call   c000f636 <File::File(char const*, Process*)>
c0014e51:	59                   	pop    ecx
c0014e52:	5e                   	pop    esi
c0014e53:	6a 01                	push   0x1
c0014e55:	53                   	push   ebx
c0014e56:	e8 3f a8 ff ff       	call   c000f69a <File::open(FileOpenMode)>
c0014e5b:	83 c4 10             	add    esp,0x10
c0014e5e:	85 c0                	test   eax,eax
c0014e60:	74 08                	je     c0014e6a <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0014e62:	83 ec 0c             	sub    esp,0xc
c0014e65:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e67:	53                   	push   ebx
c0014e68:	eb 2e                	jmp    c0014e98 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0014e6a:	52                   	push   edx
c0014e6b:	8d 44 24 07          	lea    eax,[esp+0x7]
c0014e6f:	50                   	push   eax
c0014e70:	8d 44 24 10          	lea    eax,[esp+0x10]
c0014e74:	50                   	push   eax
c0014e75:	53                   	push   ebx
c0014e76:	e8 cb aa ff ff       	call   c000f946 <File::stat(unsigned long long*, bool*)>
c0014e7b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e7f:	83 c4 10             	add    esp,0x10
c0014e82:	89 c1                	mov    ecx,eax
c0014e84:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0014e88:	75 13                	jne    c0014e9d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0014e8a:	83 ec 0c             	sub    esp,0xc
c0014e8d:	53                   	push   ebx
c0014e8e:	e8 65 a8 ff ff       	call   c000f6f8 <File::close()>
c0014e93:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014e98:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014e9b:	eb 7b                	jmp    c0014f18 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0014e9d:	83 ec 0c             	sub    esp,0xc
c0014ea0:	50                   	push   eax
c0014ea1:	e8 8b 72 ff ff       	call   c000c131 <malloc>
c0014ea6:	89 c6                	mov    esi,eax
c0014ea8:	58                   	pop    eax
c0014ea9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014eab:	8d 54 24 10          	lea    edx,[esp+0x10]
c0014eaf:	52                   	push   edx
c0014eb0:	56                   	push   esi
c0014eb1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014eb5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014eb9:	53                   	push   ebx
c0014eba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ebd:	83 c4 20             	add    esp,0x20
c0014ec0:	85 c0                	test   eax,eax
c0014ec2:	75 0a                	jne    c0014ece <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0014ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014ec8:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014ecc:	74 18                	je     c0014ee6 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0014ece:	83 ec 0c             	sub    esp,0xc
c0014ed1:	31 ff                	xor    edi,edi
c0014ed3:	53                   	push   ebx
c0014ed4:	e8 1f a8 ff ff       	call   c000f6f8 <File::close()>
c0014ed9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014edb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ede:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014ee1:	83 c4 10             	add    esp,0x10
c0014ee4:	eb 35                	jmp    c0014f1b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0014ee6:	83 ec 0c             	sub    esp,0xc
c0014ee9:	53                   	push   ebx
c0014eea:	e8 09 a8 ff ff       	call   c000f6f8 <File::close()>
c0014eef:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ef1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ef4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014ef7:	83 c4 0c             	add    esp,0xc
c0014efa:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0014f01:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0014f08:	56                   	push   esi
c0014f09:	e8 62 fd ff ff       	call   c0014c70 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0014f0e:	89 34 24             	mov    DWORD PTR [esp],esi
c0014f11:	89 c7                	mov    edi,eax
c0014f13:	e8 29 72 ff ff       	call   c000c141 <free>
c0014f18:	83 c4 10             	add    esp,0x10
c0014f1b:	81 c4 10 01 00 00    	add    esp,0x110
c0014f21:	89 f8                	mov    eax,edi
c0014f23:	5b                   	pop    ebx
c0014f24:	5e                   	pop    esi
c0014f25:	5f                   	pop    edi
c0014f26:	c3                   	ret    

c0014f27 <Reg::getLine(char*, char*, char*)>:
c0014f27:	57                   	push   edi
c0014f28:	56                   	push   esi
c0014f29:	53                   	push   ebx
c0014f2a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014f2e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014f32:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0014f36:	57                   	push   edi
c0014f37:	56                   	push   esi
c0014f38:	53                   	push   ebx
c0014f39:	68 81 13 02 c0       	push   0xc0021381
c0014f3e:	e8 85 fe ff ff       	call   c0014dc8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014f43:	83 c4 10             	add    esp,0x10
c0014f46:	84 c0                	test   al,al
c0014f48:	75 10                	jne    c0014f5a <Reg::getLine(char*, char*, char*)+0x33>
c0014f4a:	57                   	push   edi
c0014f4b:	56                   	push   esi
c0014f4c:	53                   	push   ebx
c0014f4d:	68 a6 13 02 c0       	push   0xc00213a6
c0014f52:	e8 71 fe ff ff       	call   c0014dc8 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0014f57:	83 c4 10             	add    esp,0x10
c0014f5a:	5b                   	pop    ebx
c0014f5b:	5e                   	pop    esi
c0014f5c:	5f                   	pop    edi
c0014f5d:	c3                   	ret    

c0014f5e <Reg::readInt(char*, char*, int*)>:
c0014f5e:	55                   	push   ebp
c0014f5f:	57                   	push   edi
c0014f60:	56                   	push   esi
c0014f61:	53                   	push   ebx
c0014f62:	81 ec f0 00 00 00    	sub    esp,0xf0
c0014f68:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0014f6c:	57                   	push   edi
c0014f6d:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014f74:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0014f7b:	e8 a7 ff ff ff       	call   c0014f27 <Reg::getLine(char*, char*, char*)>
c0014f80:	83 c4 10             	add    esp,0x10
c0014f83:	84 c0                	test   al,al
c0014f85:	0f 84 b3 00 00 00    	je     c001503e <Reg::readInt(char*, char*, int*)+0xe0>
c0014f8b:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0014f8f:	80 fa 2b             	cmp    dl,0x2b
c0014f92:	74 0c                	je     c0014fa0 <Reg::readInt(char*, char*, int*)+0x42>
c0014f94:	80 fa 2d             	cmp    dl,0x2d
c0014f97:	75 0e                	jne    c0014fa7 <Reg::readInt(char*, char*, int*)+0x49>
c0014f99:	ba 01 00 00 00       	mov    edx,0x1
c0014f9e:	eb 0b                	jmp    c0014fab <Reg::readInt(char*, char*, int*)+0x4d>
c0014fa0:	ba 01 00 00 00       	mov    edx,0x1
c0014fa5:	eb 02                	jmp    c0014fa9 <Reg::readInt(char*, char*, int*)+0x4b>
c0014fa7:	31 d2                	xor    edx,edx
c0014fa9:	31 c0                	xor    eax,eax
c0014fab:	be 0a 00 00 00       	mov    esi,0xa
c0014fb0:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c0014fb5:	75 20                	jne    c0014fd7 <Reg::readInt(char*, char*, int*)+0x79>
c0014fb7:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0014fbb:	80 f9 78             	cmp    cl,0x78
c0014fbe:	75 0a                	jne    c0014fca <Reg::readInt(char*, char*, int*)+0x6c>
c0014fc0:	83 c2 02             	add    edx,0x2
c0014fc3:	be 10 00 00 00       	mov    esi,0x10
c0014fc8:	eb 0d                	jmp    c0014fd7 <Reg::readInt(char*, char*, int*)+0x79>
c0014fca:	80 f9 62             	cmp    cl,0x62
c0014fcd:	75 08                	jne    c0014fd7 <Reg::readInt(char*, char*, int*)+0x79>
c0014fcf:	83 c2 02             	add    edx,0x2
c0014fd2:	be 02 00 00 00       	mov    esi,0x2
c0014fd7:	01 d7                	add    edi,edx
c0014fd9:	31 d2                	xor    edx,edx
c0014fdb:	8a 1f                	mov    bl,BYTE PTR [edi]
c0014fdd:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0014fe1:	80 fb 0d             	cmp    bl,0xd
c0014fe4:	0f 94 c3             	sete   bl
c0014fe7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014fec:	0f 94 c1             	sete   cl
c0014fef:	08 cb                	or     bl,cl
c0014ff1:	75 3a                	jne    c001502d <Reg::readInt(char*, char*, int*)+0xcf>
c0014ff3:	0f af d6             	imul   edx,esi
c0014ff6:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0014ffb:	83 fe 10             	cmp    esi,0x10
c0014ffe:	75 26                	jne    c0015026 <Reg::readInt(char*, char*, int*)+0xc8>
c0015000:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015004:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0015007:	89 e9                	mov    ecx,ebp
c0015009:	80 f9 05             	cmp    cl,0x5
c001500c:	77 06                	ja     c0015014 <Reg::readInt(char*, char*, int*)+0xb6>
c001500e:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0015012:	eb 16                	jmp    c001502a <Reg::readInt(char*, char*, int*)+0xcc>
c0015014:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015018:	83 e9 61             	sub    ecx,0x61
c001501b:	80 f9 05             	cmp    cl,0x5
c001501e:	77 06                	ja     c0015026 <Reg::readInt(char*, char*, int*)+0xc8>
c0015020:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0015024:	eb 04                	jmp    c001502a <Reg::readInt(char*, char*, int*)+0xcc>
c0015026:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001502a:	47                   	inc    edi
c001502b:	eb ae                	jmp    c0014fdb <Reg::readInt(char*, char*, int*)+0x7d>
c001502d:	84 c0                	test   al,al
c001502f:	74 02                	je     c0015033 <Reg::readInt(char*, char*, int*)+0xd5>
c0015031:	f7 da                	neg    edx
c0015033:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001503a:	89 10                	mov    DWORD PTR [eax],edx
c001503c:	88 d8                	mov    al,bl
c001503e:	81 c4 ec 00 00 00    	add    esp,0xec
c0015044:	5b                   	pop    ebx
c0015045:	5e                   	pop    esi
c0015046:	5f                   	pop    edi
c0015047:	5d                   	pop    ebp
c0015048:	c3                   	ret    

c0015049 <Reg::readString(char*, char*, char*, int)>:
c0015049:	57                   	push   edi
c001504a:	56                   	push   esi
c001504b:	53                   	push   ebx
c001504c:	81 ec d4 00 00 00    	sub    esp,0xd4
c0015052:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c0015059:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001505d:	57                   	push   edi
c001505e:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0015065:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001506c:	e8 b6 fe ff ff       	call   c0014f27 <Reg::getLine(char*, char*, char*)>
c0015071:	83 c4 10             	add    esp,0x10
c0015074:	89 c6                	mov    esi,eax
c0015076:	84 c0                	test   al,al
c0015078:	74 44                	je     c00150be <Reg::readString(char*, char*, char*, int)+0x75>
c001507a:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0015081:	31 c0                	xor    eax,eax
c0015083:	4a                   	dec    edx
c0015084:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c0015087:	84 c9                	test   cl,cl
c0015089:	74 0f                	je     c001509a <Reg::readString(char*, char*, char*, int)+0x51>
c001508b:	39 c2                	cmp    edx,eax
c001508d:	7e 0b                	jle    c001509a <Reg::readString(char*, char*, char*, int)+0x51>
c001508f:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0015092:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c0015097:	40                   	inc    eax
c0015098:	eb ea                	jmp    c0015084 <Reg::readString(char*, char*, char*, int)+0x3b>
c001509a:	83 ec 0c             	sub    esp,0xc
c001509d:	53                   	push   ebx
c001509e:	e8 82 b5 fe ff       	call   c0000625 <strlen>
c00150a3:	83 c4 10             	add    esp,0x10
c00150a6:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00150ab:	75 11                	jne    c00150be <Reg::readString(char*, char*, char*, int)+0x75>
c00150ad:	83 ec 0c             	sub    esp,0xc
c00150b0:	53                   	push   ebx
c00150b1:	e8 6f b5 fe ff       	call   c0000625 <strlen>
c00150b6:	83 c4 10             	add    esp,0x10
c00150b9:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00150be:	81 c4 d0 00 00 00    	add    esp,0xd0
c00150c4:	89 f0                	mov    eax,esi
c00150c6:	5b                   	pop    ebx
c00150c7:	5e                   	pop    esi
c00150c8:	5f                   	pop    edi
c00150c9:	c3                   	ret    

c00150ca <Reg::readBool(char*, char*, bool*)>:
c00150ca:	83 ec 20             	sub    esp,0x20
c00150cd:	8d 44 24 10          	lea    eax,[esp+0x10]
c00150d1:	50                   	push   eax
c00150d2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150da:	e8 7f fe ff ff       	call   c0014f5e <Reg::readInt(char*, char*, int*)>
c00150df:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00150e4:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00150e8:	0f 95 02             	setne  BYTE PTR [edx]
c00150eb:	83 c4 2c             	add    esp,0x2c
c00150ee:	c3                   	ret    

c00150ef <Reg::readBoolWithDefault(char*, char*, bool)>:
c00150ef:	53                   	push   ebx
c00150f0:	83 ec 1c             	sub    esp,0x1c
c00150f3:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00150f7:	8d 44 24 13          	lea    eax,[esp+0x13]
c00150fb:	50                   	push   eax
c00150fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015100:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015104:	e8 c1 ff ff ff       	call   c00150ca <Reg::readBool(char*, char*, bool*)>
c0015109:	83 c4 10             	add    esp,0x10
c001510c:	84 c0                	test   al,al
c001510e:	74 04                	je     c0015114 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0015110:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0015114:	88 d8                	mov    al,bl
c0015116:	83 c4 18             	add    esp,0x18
c0015119:	5b                   	pop    ebx
c001511a:	c3                   	ret    

c001511b <Reg::readIntWithDefault(char*, char*, int)>:
c001511b:	53                   	push   ebx
c001511c:	83 ec 1c             	sub    esp,0x1c
c001511f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0015123:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015127:	50                   	push   eax
c0015128:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001512c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015130:	e8 29 fe ff ff       	call   c0014f5e <Reg::readInt(char*, char*, int*)>
c0015135:	83 c4 10             	add    esp,0x10
c0015138:	84 c0                	test   al,al
c001513a:	74 04                	je     c0015140 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001513c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0015140:	89 d8                	mov    eax,ebx
c0015142:	83 c4 18             	add    esp,0x18
c0015145:	5b                   	pop    ebx
c0015146:	c3                   	ret    

c0015147 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0015147:	56                   	push   esi
c0015148:	53                   	push   ebx
c0015149:	51                   	push   ecx
c001514a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001514e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015156:	56                   	push   esi
c0015157:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001515b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001515f:	e8 e5 fe ff ff       	call   c0015049 <Reg::readString(char*, char*, char*, int)>
c0015164:	83 c4 10             	add    esp,0x10
c0015167:	84 c0                	test   al,al
c0015169:	74 02                	je     c001516d <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c001516b:	89 f3                	mov    ebx,esi
c001516d:	89 d8                	mov    eax,ebx
c001516f:	5a                   	pop    edx
c0015170:	5b                   	pop    ebx
c0015171:	5e                   	pop    esi
c0015172:	c3                   	ret    

c0015173 <Sys::exit(regs*)>:
c0015173:	83 ec 18             	sub    esp,0x18
c0015176:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001517a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001517d:	e8 86 30 00 00       	call   c0018208 <terminateTask(int)>
c0015182:	83 c8 ff             	or     eax,0xffffffff
c0015185:	83 c4 1c             	add    esp,0x1c
c0015188:	89 c2                	mov    edx,eax
c001518a:	c3                   	ret    

c001518b <Sys::loadDLL(regs*)>:
c001518b:	56                   	push   esi
c001518c:	53                   	push   ebx
c001518d:	31 d2                	xor    edx,edx
c001518f:	51                   	push   ecx
c0015190:	b8 01 00 00 00       	mov    eax,0x1
c0015195:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015199:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001519d:	74 7d                	je     c001521c <Sys::loadDLL(regs*)+0x91>
c001519f:	83 ec 0c             	sub    esp,0xc
c00151a2:	68 14 01 00 00       	push   0x114
c00151a7:	e8 5c a0 ff ff       	call   c000f208 <operator new(unsigned long)>
c00151ac:	83 c4 0c             	add    esp,0xc
c00151af:	89 c3                	mov    ebx,eax
c00151b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151b6:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00151b9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00151bc:	53                   	push   ebx
c00151bd:	e8 74 a4 ff ff       	call   c000f636 <File::File(char const*, Process*)>
c00151c2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151c5:	e8 3e a7 ff ff       	call   c000f908 <File::exists()>
c00151ca:	83 c4 10             	add    esp,0x10
c00151cd:	84 c0                	test   al,al
c00151cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00151d1:	75 11                	jne    c00151e4 <Sys::loadDLL(regs*)+0x59>
c00151d3:	83 ec 0c             	sub    esp,0xc
c00151d6:	53                   	push   ebx
c00151d7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00151da:	83 c4 10             	add    esp,0x10
c00151dd:	b8 03 00 00 00       	mov    eax,0x3
c00151e2:	eb 36                	jmp    c001521a <Sys::loadDLL(regs*)+0x8f>
c00151e4:	83 ec 0c             	sub    esp,0xc
c00151e7:	53                   	push   ebx
c00151e8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00151eb:	58                   	pop    eax
c00151ec:	5a                   	pop    edx
c00151ed:	6a 00                	push   0x0
c00151ef:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00151f2:	e8 b3 1e 00 00       	call   c00170aa <Thr::loadDLL(char const*, bool)>
c00151f7:	83 c4 10             	add    esp,0x10
c00151fa:	89 c1                	mov    ecx,eax
c00151fc:	31 d2                	xor    edx,edx
c00151fe:	b8 04 00 00 00       	mov    eax,0x4
c0015203:	85 c9                	test   ecx,ecx
c0015205:	74 15                	je     c001521c <Sys::loadDLL(regs*)+0x91>
c0015207:	53                   	push   ebx
c0015208:	53                   	push   ebx
c0015209:	ff 35 c8 2e 02 c0    	push   DWORD PTR ds:0xc0022ec8
c001520f:	51                   	push   ecx
c0015210:	e8 e8 1f 00 00       	call   c00171fd <Thr::executeDLL(unsigned long, void*)>
c0015215:	83 c4 10             	add    esp,0x10
c0015218:	31 c0                	xor    eax,eax
c001521a:	31 d2                	xor    edx,edx
c001521c:	59                   	pop    ecx
c001521d:	5b                   	pop    ebx
c001521e:	5e                   	pop    esi
c001521f:	c3                   	ret    

c0015220 <Sys::read(regs*)>:
c0015220:	57                   	push   edi
c0015221:	56                   	push   esi
c0015222:	53                   	push   ebx
c0015223:	83 ec 10             	sub    esp,0x10
c0015226:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001522a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001522d:	83 f8 02             	cmp    eax,0x2
c0015230:	77 10                	ja     c0015242 <Sys::read(regs*)+0x22>
c0015232:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015237:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001523a:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015240:	eb 0e                	jmp    c0015250 <Sys::read(regs*)+0x30>
c0015242:	83 ec 0c             	sub    esp,0xc
c0015245:	50                   	push   eax
c0015246:	e8 46 8d ff ff       	call   c000df91 <getFromFileDescriptor(int)>
c001524b:	83 c4 10             	add    esp,0x10
c001524e:	89 c1                	mov    ecx,eax
c0015250:	83 c8 ff             	or     eax,0xffffffff
c0015253:	85 c9                	test   ecx,ecx
c0015255:	89 c2                	mov    edx,eax
c0015257:	74 28                	je     c0015281 <Sys::read(regs*)+0x61>
c0015259:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015261:	31 ff                	xor    edi,edi
c0015263:	83 ec 0c             	sub    esp,0xc
c0015266:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015268:	8d 54 24 18          	lea    edx,[esp+0x18]
c001526c:	52                   	push   edx
c001526d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015270:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015273:	57                   	push   edi
c0015274:	56                   	push   esi
c0015275:	51                   	push   ecx
c0015276:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015279:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001527d:	83 c4 20             	add    esp,0x20
c0015280:	99                   	cdq    
c0015281:	83 c4 10             	add    esp,0x10
c0015284:	5b                   	pop    ebx
c0015285:	5e                   	pop    esi
c0015286:	5f                   	pop    edi
c0015287:	c3                   	ret    

c0015288 <Sys::sbrk(regs*)>:
c0015288:	56                   	push   esi
c0015289:	53                   	push   ebx
c001528a:	50                   	push   eax
c001528b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015290:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015294:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015297:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001529a:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c00152a0:	85 db                	test   ebx,ebx
c00152a2:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00152a5:	74 02                	je     c00152a9 <Sys::sbrk(regs*)+0x21>
c00152a7:	79 06                	jns    c00152af <Sys::sbrk(regs*)+0x27>
c00152a9:	89 f0                	mov    eax,esi
c00152ab:	31 d2                	xor    edx,edx
c00152ad:	eb 2a                	jmp    c00152d9 <Sys::sbrk(regs*)+0x51>
c00152af:	83 c8 ff             	or     eax,0xffffffff
c00152b2:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00152b8:	89 c2                	mov    edx,eax
c00152ba:	77 1d                	ja     c00152d9 <Sys::sbrk(regs*)+0x51>
c00152bc:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00152c2:	50                   	push   eax
c00152c3:	c1 ea 0c             	shr    edx,0xc
c00152c6:	68 07 04 00 00       	push   0x407
c00152cb:	52                   	push   edx
c00152cc:	51                   	push   ecx
c00152cd:	e8 dc 94 ff ff       	call   c000e7ae <VAS::allocatePages(int, int)>
c00152d2:	89 f0                	mov    eax,esi
c00152d4:	31 d2                	xor    edx,edx
c00152d6:	83 c4 10             	add    esp,0x10
c00152d9:	59                   	pop    ecx
c00152da:	5b                   	pop    ebx
c00152db:	5e                   	pop    esi
c00152dc:	c3                   	ret    

c00152dd <Sys::write(regs*)>:
c00152dd:	57                   	push   edi
c00152de:	56                   	push   esi
c00152df:	53                   	push   ebx
c00152e0:	83 ec 10             	sub    esp,0x10
c00152e3:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00152e7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00152ea:	83 f8 02             	cmp    eax,0x2
c00152ed:	77 10                	ja     c00152ff <Sys::write(regs*)+0x22>
c00152ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00152f4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00152f7:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c00152fd:	eb 0e                	jmp    c001530d <Sys::write(regs*)+0x30>
c00152ff:	83 ec 0c             	sub    esp,0xc
c0015302:	50                   	push   eax
c0015303:	e8 89 8c ff ff       	call   c000df91 <getFromFileDescriptor(int)>
c0015308:	83 c4 10             	add    esp,0x10
c001530b:	89 c1                	mov    ecx,eax
c001530d:	83 c8 ff             	or     eax,0xffffffff
c0015310:	85 c9                	test   ecx,ecx
c0015312:	89 c2                	mov    edx,eax
c0015314:	74 28                	je     c001533e <Sys::write(regs*)+0x61>
c0015316:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001531e:	31 ff                	xor    edi,edi
c0015320:	83 ec 0c             	sub    esp,0xc
c0015323:	8b 01                	mov    eax,DWORD PTR [ecx]
c0015325:	8d 54 24 18          	lea    edx,[esp+0x18]
c0015329:	52                   	push   edx
c001532a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001532d:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015330:	57                   	push   edi
c0015331:	56                   	push   esi
c0015332:	51                   	push   ecx
c0015333:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015336:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001533a:	83 c4 20             	add    esp,0x20
c001533d:	99                   	cdq    
c001533e:	83 c4 10             	add    esp,0x10
c0015341:	5b                   	pop    ebx
c0015342:	5e                   	pop    esi
c0015343:	5f                   	pop    edi
c0015344:	c3                   	ret    

c0015345 <Sys::yield(regs*)>:
c0015345:	83 ec 0c             	sub    esp,0xc
c0015348:	e8 bb 22 00 00       	call   c0017608 <lockScheduler()>
c001534d:	e8 ea 25 00 00       	call   c001793c <schedule()>
c0015352:	e8 b3 22 00 00       	call   c001760a <unlockScheduler()>
c0015357:	31 c0                	xor    eax,eax
c0015359:	31 d2                	xor    edx,edx
c001535b:	83 c4 0c             	add    esp,0xc
c001535e:	c3                   	ret    

c001535f <sysCallGetPID(regs*)>:
c001535f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015364:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015367:	8b 00                	mov    eax,DWORD PTR [eax]
c0015369:	99                   	cdq    
c001536a:	c3                   	ret    

c001536b <sysCallSeekDir(regs*)>:
c001536b:	31 c0                	xor    eax,eax
c001536d:	31 d2                	xor    edx,edx
c001536f:	c3                   	ret    

c0015370 <sysCallTellDir(regs*)>:
c0015370:	31 c0                	xor    eax,eax
c0015372:	31 d2                	xor    edx,edx
c0015374:	c3                   	ret    

c0015375 <sysCallVerify(regs*)>:
c0015375:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015379:	31 d2                	xor    edx,edx
c001537b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001537e:	c3                   	ret    

c001537f <sysCallGetArgc(regs*)>:
c001537f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015384:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015387:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001538d:	99                   	cdq    
c001538e:	c3                   	ret    

c001538f <sysFormatDisk(regs*)>:
c001538f:	56                   	push   esi
c0015390:	53                   	push   ebx
c0015391:	53                   	push   ebx
c0015392:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015396:	8b 1d a0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fa0
c001539c:	eb 25                	jmp    c00153c3 <sysFormatDisk(regs*)+0x34>
c001539e:	83 ec 0c             	sub    esp,0xc
c00153a1:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c00153a4:	8b 13                	mov    edx,DWORD PTR [ebx]
c00153a6:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00153a9:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00153ac:	50                   	push   eax
c00153ad:	ff 34 85 40 34 02 c0 	push   DWORD PTR [eax*4-0x3ffdcbc0]
c00153b4:	53                   	push   ebx
c00153b5:	ff 52 48             	call   DWORD PTR [edx+0x48]
c00153b8:	83 c4 20             	add    esp,0x20
c00153bb:	83 f8 08             	cmp    eax,0x8
c00153be:	75 12                	jne    c00153d2 <sysFormatDisk(regs*)+0x43>
c00153c0:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00153c3:	85 db                	test   ebx,ebx
c00153c5:	75 d7                	jne    c001539e <sysFormatDisk(regs*)+0xf>
c00153c7:	59                   	pop    ecx
c00153c8:	b8 03 00 00 00       	mov    eax,0x3
c00153cd:	31 d2                	xor    edx,edx
c00153cf:	5b                   	pop    ebx
c00153d0:	5e                   	pop    esi
c00153d1:	c3                   	ret    
c00153d2:	85 c0                	test   eax,eax
c00153d4:	74 1b                	je     c00153f1 <sysFormatDisk(regs*)+0x62>
c00153d6:	83 f8 09             	cmp    eax,0x9
c00153d9:	74 0b                	je     c00153e6 <sysFormatDisk(regs*)+0x57>
c00153db:	59                   	pop    ecx
c00153dc:	b8 02 00 00 00       	mov    eax,0x2
c00153e1:	31 d2                	xor    edx,edx
c00153e3:	5b                   	pop    ebx
c00153e4:	5e                   	pop    esi
c00153e5:	c3                   	ret    
c00153e6:	59                   	pop    ecx
c00153e7:	b8 01 00 00 00       	mov    eax,0x1
c00153ec:	31 d2                	xor    edx,edx
c00153ee:	5b                   	pop    ebx
c00153ef:	5e                   	pop    esi
c00153f0:	c3                   	ret    
c00153f1:	59                   	pop    ecx
c00153f2:	31 c0                	xor    eax,eax
c00153f4:	31 d2                	xor    edx,edx
c00153f6:	5b                   	pop    ebx
c00153f7:	5e                   	pop    esi
c00153f8:	c3                   	ret    

c00153f9 <sysSetDiskVolumeLabel(regs*)>:
c00153f9:	56                   	push   esi
c00153fa:	53                   	push   ebx
c00153fb:	53                   	push   ebx
c00153fc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015400:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015403:	83 f8 19             	cmp    eax,0x19
c0015406:	77 29                	ja     c0015431 <sysSetDiskVolumeLabel(regs*)+0x38>
c0015408:	8b 0c 85 40 34 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdcbc0]
c001540f:	85 c9                	test   ecx,ecx
c0015411:	74 1e                	je     c0015431 <sysSetDiskVolumeLabel(regs*)+0x38>
c0015413:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0015416:	85 d2                	test   edx,edx
c0015418:	74 17                	je     c0015431 <sysSetDiskVolumeLabel(regs*)+0x38>
c001541a:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c0015420:	8b 33                	mov    esi,DWORD PTR [ebx]
c0015422:	52                   	push   edx
c0015423:	50                   	push   eax
c0015424:	51                   	push   ecx
c0015425:	53                   	push   ebx
c0015426:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0015429:	83 c4 10             	add    esp,0x10
c001542c:	99                   	cdq    
c001542d:	59                   	pop    ecx
c001542e:	5b                   	pop    ebx
c001542f:	5e                   	pop    esi
c0015430:	c3                   	ret    
c0015431:	59                   	pop    ecx
c0015432:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015437:	ba ff ff ff ff       	mov    edx,0xffffffff
c001543c:	5b                   	pop    ebx
c001543d:	5e                   	pop    esi
c001543e:	c3                   	ret    

c001543f <sysGetDiskVolumeLabel(regs*)>:
c001543f:	57                   	push   edi
c0015440:	56                   	push   esi
c0015441:	53                   	push   ebx
c0015442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015446:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015449:	83 fa 19             	cmp    edx,0x19
c001544c:	77 34                	ja     c0015482 <sysGetDiskVolumeLabel(regs*)+0x43>
c001544e:	8b 0c 95 40 34 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdcbc0]
c0015455:	85 c9                	test   ecx,ecx
c0015457:	74 29                	je     c0015482 <sysGetDiskVolumeLabel(regs*)+0x43>
c0015459:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001545c:	85 db                	test   ebx,ebx
c001545e:	74 22                	je     c0015482 <sysGetDiskVolumeLabel(regs*)+0x43>
c0015460:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015463:	85 c0                	test   eax,eax
c0015465:	74 1b                	je     c0015482 <sysGetDiskVolumeLabel(regs*)+0x43>
c0015467:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001546d:	83 ec 0c             	sub    esp,0xc
c0015470:	8b 3e                	mov    edi,DWORD PTR [esi]
c0015472:	50                   	push   eax
c0015473:	53                   	push   ebx
c0015474:	52                   	push   edx
c0015475:	51                   	push   ecx
c0015476:	56                   	push   esi
c0015477:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001547a:	83 c4 20             	add    esp,0x20
c001547d:	99                   	cdq    
c001547e:	5b                   	pop    ebx
c001547f:	5e                   	pop    esi
c0015480:	5f                   	pop    edi
c0015481:	c3                   	ret    
c0015482:	5b                   	pop    ebx
c0015483:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0015488:	ba ff ff ff ff       	mov    edx,0xffffffff
c001548d:	5e                   	pop    esi
c001548e:	5f                   	pop    edi
c001548f:	c3                   	ret    

c0015490 <sysShutdown(regs*)>:
c0015490:	83 ec 0c             	sub    esp,0xc
c0015493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015497:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001549a:	85 c0                	test   eax,eax
c001549c:	74 24                	je     c00154c2 <sysShutdown(regs*)+0x32>
c001549e:	48                   	dec    eax
c001549f:	74 0e                	je     c00154af <sysShutdown(regs*)+0x1f>
c00154a1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00154a6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00154ab:	83 c4 0c             	add    esp,0xc
c00154ae:	c3                   	ret    
c00154af:	a1 c0 34 02 c0       	mov    eax,ds:0xc00234c0
c00154b4:	85 c0                	test   eax,eax
c00154b6:	74 02                	je     c00154ba <sysShutdown(regs*)+0x2a>
c00154b8:	ff d0                	call   eax
c00154ba:	31 c0                	xor    eax,eax
c00154bc:	31 d2                	xor    edx,edx
c00154be:	83 c4 0c             	add    esp,0xc
c00154c1:	c3                   	ret    
c00154c2:	a1 c8 2e 02 c0       	mov    eax,ds:0xc0022ec8
c00154c7:	8b 10                	mov    edx,DWORD PTR [eax]
c00154c9:	6a 00                	push   0x0
c00154cb:	6a 00                	push   0x0
c00154cd:	6a 00                	push   0x0
c00154cf:	50                   	push   eax
c00154d0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00154d3:	83 c4 10             	add    esp,0x10
c00154d6:	eb c9                	jmp    c00154a1 <sysShutdown(regs*)+0x11>

c00154d8 <sysCallGetCwd(regs*)>:
c00154d8:	83 ec 10             	sub    esp,0x10
c00154db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00154df:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00154e2:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00154e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154ea:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00154ed:	e8 b5 a4 ff ff       	call   c000f9a7 <getcwd(Process*, char*, int)>
c00154f2:	83 c4 1c             	add    esp,0x1c
c00154f5:	99                   	cdq    
c00154f6:	c3                   	ret    

c00154f7 <sysCallSetCwd(regs*)>:
c00154f7:	83 ec 14             	sub    esp,0x14
c00154fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00154fe:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0015501:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015506:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015509:	e8 c3 a4 ff ff       	call   c000f9d1 <setcwd(Process*, char*)>
c001550e:	83 c4 1c             	add    esp,0x1c
c0015511:	99                   	cdq    
c0015512:	c3                   	ret    

c0015513 <sysCallRealpath(regs*)>:
c0015513:	83 ec 0c             	sub    esp,0xc
c0015516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001551a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001551d:	85 d2                	test   edx,edx
c001551f:	74 07                	je     c0015528 <sysCallRealpath(regs*)+0x15>
c0015521:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015524:	85 c0                	test   eax,eax
c0015526:	75 0b                	jne    c0015533 <sysCallRealpath(regs*)+0x20>
c0015528:	b8 01 00 00 00       	mov    eax,0x1
c001552d:	31 d2                	xor    edx,edx
c001552f:	83 c4 0c             	add    esp,0xc
c0015532:	c3                   	ret    
c0015533:	51                   	push   ecx
c0015534:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001553a:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001553d:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0015543:	51                   	push   ecx
c0015544:	52                   	push   edx
c0015545:	50                   	push   eax
c0015546:	e8 41 9f ff ff       	call   c000f48c <standardiseFiles(char*, char const*, char const*)>
c001554b:	83 c4 10             	add    esp,0x10
c001554e:	31 c0                	xor    eax,eax
c0015550:	31 d2                	xor    edx,edx
c0015552:	83 c4 0c             	add    esp,0xc
c0015555:	c3                   	ret    

c0015556 <sysCallOpen(regs*)>:
c0015556:	56                   	push   esi
c0015557:	53                   	push   ebx
c0015558:	81 ec 04 01 00 00    	sub    esp,0x104
c001555e:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0015565:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0015568:	85 d2                	test   edx,edx
c001556a:	0f 84 c3 00 00 00    	je     c0015633 <sysCallOpen(regs*)+0xdd>
c0015570:	50                   	push   eax
c0015571:	68 c1 13 02 c0       	push   0xc00213c1
c0015576:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015579:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001557d:	56                   	push   esi
c001557e:	e8 09 9f ff ff       	call   c000f48c <standardiseFiles(char*, char const*, char const*)>
c0015583:	89 34 24             	mov    DWORD PTR [esp],esi
c0015586:	e8 9a b0 fe ff       	call   c0000625 <strlen>
c001558b:	83 c4 10             	add    esp,0x10
c001558e:	48                   	dec    eax
c001558f:	74 1d                	je     c00155ae <sysCallOpen(regs*)+0x58>
c0015591:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0015594:	eb 0f                	jmp    c00155a5 <sysCallOpen(regs*)+0x4f>
c0015596:	80 fa 3a             	cmp    dl,0x3a
c0015599:	74 0f                	je     c00155aa <sysCallOpen(regs*)+0x54>
c001559b:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001559f:	48                   	dec    eax
c00155a0:	74 0c                	je     c00155ae <sysCallOpen(regs*)+0x58>
c00155a2:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00155a5:	80 fa 2e             	cmp    dl,0x2e
c00155a8:	75 ec                	jne    c0015596 <sysCallOpen(regs*)+0x40>
c00155aa:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00155ae:	83 ec 0c             	sub    esp,0xc
c00155b1:	68 14 01 00 00       	push   0x114
c00155b6:	e8 4d 9c ff ff       	call   c000f208 <operator new(unsigned long)>
c00155bb:	83 c4 0c             	add    esp,0xc
c00155be:	89 c6                	mov    esi,eax
c00155c0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155c5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00155c8:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00155cb:	56                   	push   esi
c00155cc:	e8 65 a0 ff ff       	call   c000f636 <File::File(char const*, Process*)>
c00155d1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00155d4:	83 c4 10             	add    esp,0x10
c00155d7:	0f b6 d0             	movzx  edx,al
c00155da:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00155dd:	89 c2                	mov    edx,eax
c00155df:	83 e2 01             	and    edx,0x1
c00155e2:	a8 02                	test   al,0x2
c00155e4:	74 03                	je     c00155e9 <sysCallOpen(regs*)+0x93>
c00155e6:	83 ca 02             	or     edx,0x2
c00155e9:	a8 04                	test   al,0x4
c00155eb:	74 03                	je     c00155f0 <sysCallOpen(regs*)+0x9a>
c00155ed:	83 ca 04             	or     edx,0x4
c00155f0:	a8 08                	test   al,0x8
c00155f2:	74 03                	je     c00155f7 <sysCallOpen(regs*)+0xa1>
c00155f4:	83 ca 0a             	or     edx,0xa
c00155f7:	a8 10                	test   al,0x10
c00155f9:	74 03                	je     c00155fe <sysCallOpen(regs*)+0xa8>
c00155fb:	83 ca 12             	or     edx,0x12
c00155fe:	83 ec 08             	sub    esp,0x8
c0015601:	52                   	push   edx
c0015602:	56                   	push   esi
c0015603:	e8 92 a0 ff ff       	call   c000f69a <File::open(FileOpenMode)>
c0015608:	83 c4 10             	add    esp,0x10
c001560b:	85 c0                	test   eax,eax
c001560d:	75 24                	jne    c0015633 <sysCallOpen(regs*)+0xdd>
c001560f:	83 ec 0c             	sub    esp,0xc
c0015612:	56                   	push   esi
c0015613:	e8 14 88 ff ff       	call   c000de2c <UnixFile::getFileDescriptor()>
c0015618:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001561b:	83 c4 10             	add    esp,0x10
c001561e:	89 02                	mov    DWORD PTR [edx],eax
c0015620:	c1 f8 1f             	sar    eax,0x1f
c0015623:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015626:	81 c4 04 01 00 00    	add    esp,0x104
c001562c:	31 c0                	xor    eax,eax
c001562e:	31 d2                	xor    edx,edx
c0015630:	5b                   	pop    ebx
c0015631:	5e                   	pop    esi
c0015632:	c3                   	ret    
c0015633:	81 c4 04 01 00 00    	add    esp,0x104
c0015639:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001563e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015643:	5b                   	pop    ebx
c0015644:	5e                   	pop    esi
c0015645:	c3                   	ret    

c0015646 <sysCallReadDir(regs*)>:
c0015646:	53                   	push   ebx
c0015647:	83 ec 18             	sub    esp,0x18
c001564a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001564e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0015651:	83 f8 02             	cmp    eax,0x2
c0015654:	77 0c                	ja     c0015662 <sysCallReadDir(regs*)+0x1c>
c0015656:	b8 01 00 00 00       	mov    eax,0x1
c001565b:	31 d2                	xor    edx,edx
c001565d:	83 c4 18             	add    esp,0x18
c0015660:	5b                   	pop    ebx
c0015661:	c3                   	ret    
c0015662:	83 ec 0c             	sub    esp,0xc
c0015665:	50                   	push   eax
c0015666:	e8 26 89 ff ff       	call   c000df91 <getFromFileDescriptor(int)>
c001566b:	83 c4 10             	add    esp,0x10
c001566e:	85 c0                	test   eax,eax
c0015670:	74 37                	je     c00156a9 <sysCallReadDir(regs*)+0x63>
c0015672:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001567a:	83 ec 0c             	sub    esp,0xc
c001567d:	8b 10                	mov    edx,DWORD PTR [eax]
c001567f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0015683:	51                   	push   ecx
c0015684:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015687:	6a 00                	push   0x0
c0015689:	68 10 01 00 00       	push   0x110
c001568e:	50                   	push   eax
c001568f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0015692:	83 c4 20             	add    esp,0x20
c0015695:	85 c0                	test   eax,eax
c0015697:	74 0c                	je     c00156a5 <sysCallReadDir(regs*)+0x5f>
c0015699:	83 f8 07             	cmp    eax,0x7
c001569c:	74 b8                	je     c0015656 <sysCallReadDir(regs*)+0x10>
c001569e:	b8 02 00 00 00       	mov    eax,0x2
c00156a3:	eb b6                	jmp    c001565b <sysCallReadDir(regs*)+0x15>
c00156a5:	31 c0                	xor    eax,eax
c00156a7:	eb b2                	jmp    c001565b <sysCallReadDir(regs*)+0x15>
c00156a9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00156ae:	ba ff ff ff ff       	mov    edx,0xffffffff
c00156b3:	eb a8                	jmp    c001565d <sysCallReadDir(regs*)+0x17>

c00156b5 <sysCallIsATTY(regs*)>:
c00156b5:	83 ec 0c             	sub    esp,0xc
c00156b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00156bc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156bf:	83 f8 02             	cmp    eax,0x2
c00156c2:	77 26                	ja     c00156ea <sysCallIsATTY(regs*)+0x35>
c00156c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00156c9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00156cc:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00156d2:	85 c0                	test   eax,eax
c00156d4:	74 24                	je     c00156fa <sysCallIsATTY(regs*)+0x45>
c00156d6:	83 ec 0c             	sub    esp,0xc
c00156d9:	8b 10                	mov    edx,DWORD PTR [eax]
c00156db:	50                   	push   eax
c00156dc:	ff 12                	call   DWORD PTR [edx]
c00156de:	31 d2                	xor    edx,edx
c00156e0:	0f b6 c0             	movzx  eax,al
c00156e3:	83 c4 10             	add    esp,0x10
c00156e6:	83 c4 0c             	add    esp,0xc
c00156e9:	c3                   	ret    
c00156ea:	83 ec 0c             	sub    esp,0xc
c00156ed:	50                   	push   eax
c00156ee:	e8 9e 88 ff ff       	call   c000df91 <getFromFileDescriptor(int)>
c00156f3:	83 c4 10             	add    esp,0x10
c00156f6:	85 c0                	test   eax,eax
c00156f8:	75 dc                	jne    c00156d6 <sysCallIsATTY(regs*)+0x21>
c00156fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00156ff:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015704:	83 c4 0c             	add    esp,0xc
c0015707:	c3                   	ret    

c0015708 <sysCallSeek(regs*)>:
c0015708:	53                   	push   ebx
c0015709:	83 ec 08             	sub    esp,0x8
c001570c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015710:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015713:	83 f8 02             	cmp    eax,0x2
c0015716:	76 32                	jbe    c001574a <sysCallSeek(regs*)+0x42>
c0015718:	83 ec 0c             	sub    esp,0xc
c001571b:	50                   	push   eax
c001571c:	e8 70 88 ff ff       	call   c000df91 <getFromFileDescriptor(int)>
c0015721:	83 c4 0c             	add    esp,0xc
c0015724:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0015727:	31 db                	xor    ebx,ebx
c0015729:	53                   	push   ebx
c001572a:	51                   	push   ecx
c001572b:	50                   	push   eax
c001572c:	e8 27 a0 ff ff       	call   c000f758 <File::seek(unsigned long long)>
c0015731:	83 c4 10             	add    esp,0x10
c0015734:	85 c0                	test   eax,eax
c0015736:	0f 95 c0             	setne  al
c0015739:	31 d2                	xor    edx,edx
c001573b:	0f b6 c0             	movzx  eax,al
c001573e:	f7 d8                	neg    eax
c0015740:	83 d2 00             	adc    edx,0x0
c0015743:	83 c4 08             	add    esp,0x8
c0015746:	f7 da                	neg    edx
c0015748:	5b                   	pop    ebx
c0015749:	c3                   	ret    
c001574a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001574f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015754:	83 c4 08             	add    esp,0x8
c0015757:	5b                   	pop    ebx
c0015758:	c3                   	ret    

c0015759 <sysCallTell(regs*)>:
c0015759:	53                   	push   ebx
c001575a:	83 ec 08             	sub    esp,0x8
c001575d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015761:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015764:	83 f8 02             	cmp    eax,0x2
c0015767:	76 2d                	jbe    c0015796 <sysCallTell(regs*)+0x3d>
c0015769:	83 ec 0c             	sub    esp,0xc
c001576c:	50                   	push   eax
c001576d:	e8 1f 88 ff ff       	call   c000df91 <getFromFileDescriptor(int)>
c0015772:	5a                   	pop    edx
c0015773:	59                   	pop    ecx
c0015774:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015777:	50                   	push   eax
c0015778:	e8 31 a0 ff ff       	call   c000f7ae <File::tell(unsigned long long*)>
c001577d:	83 c4 10             	add    esp,0x10
c0015780:	85 c0                	test   eax,eax
c0015782:	0f 95 c0             	setne  al
c0015785:	31 d2                	xor    edx,edx
c0015787:	0f b6 c0             	movzx  eax,al
c001578a:	f7 d8                	neg    eax
c001578c:	83 d2 00             	adc    edx,0x0
c001578f:	83 c4 08             	add    esp,0x8
c0015792:	f7 da                	neg    edx
c0015794:	5b                   	pop    ebx
c0015795:	c3                   	ret    
c0015796:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001579b:	ba ff ff ff ff       	mov    edx,0xffffffff
c00157a0:	83 c4 08             	add    esp,0x8
c00157a3:	5b                   	pop    ebx
c00157a4:	c3                   	ret    

c00157a5 <sysCallSizeFromFilename(regs*)>:
c00157a5:	57                   	push   edi
c00157a6:	56                   	push   esi
c00157a7:	53                   	push   ebx
c00157a8:	83 ec 10             	sub    esp,0x10
c00157ab:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00157af:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00157b2:	83 ff 02             	cmp    edi,0x2
c00157b5:	76 56                	jbe    c001580d <sysCallSizeFromFilename(regs*)+0x68>
c00157b7:	83 ec 0c             	sub    esp,0xc
c00157ba:	68 14 01 00 00       	push   0x114
c00157bf:	e8 44 9a ff ff       	call   c000f208 <operator new(unsigned long)>
c00157c4:	83 c4 0c             	add    esp,0xc
c00157c7:	89 c3                	mov    ebx,eax
c00157c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00157ce:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00157d1:	57                   	push   edi
c00157d2:	53                   	push   ebx
c00157d3:	e8 5e 9e ff ff       	call   c000f636 <File::File(char const*, Process*)>
c00157d8:	83 c4 0c             	add    esp,0xc
c00157db:	8d 44 24 13          	lea    eax,[esp+0x13]
c00157df:	50                   	push   eax
c00157e0:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00157e3:	53                   	push   ebx
c00157e4:	e8 5d a1 ff ff       	call   c000f946 <File::stat(unsigned long long*, bool*)>
c00157e9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00157ec:	89 c6                	mov    esi,eax
c00157ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c00157f0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00157f3:	83 c4 10             	add    esp,0x10
c00157f6:	31 c0                	xor    eax,eax
c00157f8:	85 f6                	test   esi,esi
c00157fa:	0f 95 c0             	setne  al
c00157fd:	31 d2                	xor    edx,edx
c00157ff:	f7 d8                	neg    eax
c0015801:	83 d2 00             	adc    edx,0x0
c0015804:	83 c4 10             	add    esp,0x10
c0015807:	f7 da                	neg    edx
c0015809:	5b                   	pop    ebx
c001580a:	5e                   	pop    esi
c001580b:	5f                   	pop    edi
c001580c:	c3                   	ret    
c001580d:	83 c4 10             	add    esp,0x10
c0015810:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015815:	5b                   	pop    ebx
c0015816:	ba ff ff ff ff       	mov    edx,0xffffffff
c001581b:	5e                   	pop    esi
c001581c:	5f                   	pop    edi
c001581d:	c3                   	ret    

c001581e <sysCallSize(regs*)>:
c001581e:	53                   	push   ebx
c001581f:	83 ec 18             	sub    esp,0x18
c0015822:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0015826:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015829:	83 f8 02             	cmp    eax,0x2
c001582c:	76 33                	jbe    c0015861 <sysCallSize(regs*)+0x43>
c001582e:	83 ec 0c             	sub    esp,0xc
c0015831:	50                   	push   eax
c0015832:	e8 5a 87 ff ff       	call   c000df91 <getFromFileDescriptor(int)>
c0015837:	83 c4 0c             	add    esp,0xc
c001583a:	8d 54 24 13          	lea    edx,[esp+0x13]
c001583e:	52                   	push   edx
c001583f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015842:	50                   	push   eax
c0015843:	e8 fe a0 ff ff       	call   c000f946 <File::stat(unsigned long long*, bool*)>
c0015848:	83 c4 10             	add    esp,0x10
c001584b:	85 c0                	test   eax,eax
c001584d:	0f 95 c0             	setne  al
c0015850:	31 d2                	xor    edx,edx
c0015852:	0f b6 c0             	movzx  eax,al
c0015855:	f7 d8                	neg    eax
c0015857:	83 d2 00             	adc    edx,0x0
c001585a:	83 c4 18             	add    esp,0x18
c001585d:	f7 da                	neg    edx
c001585f:	5b                   	pop    ebx
c0015860:	c3                   	ret    
c0015861:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015866:	ba ff ff ff ff       	mov    edx,0xffffffff
c001586b:	83 c4 18             	add    esp,0x18
c001586e:	5b                   	pop    ebx
c001586f:	c3                   	ret    

c0015870 <sysCallClose(regs*)>:
c0015870:	53                   	push   ebx
c0015871:	83 ec 08             	sub    esp,0x8
c0015874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015878:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001587b:	83 f8 02             	cmp    eax,0x2
c001587e:	76 2f                	jbe    c00158af <sysCallClose(regs*)+0x3f>
c0015880:	83 ec 0c             	sub    esp,0xc
c0015883:	50                   	push   eax
c0015884:	e8 08 87 ff ff       	call   c000df91 <getFromFileDescriptor(int)>
c0015889:	89 c3                	mov    ebx,eax
c001588b:	89 04 24             	mov    DWORD PTR [esp],eax
c001588e:	e8 65 9e ff ff       	call   c000f6f8 <File::close()>
c0015893:	83 c4 10             	add    esp,0x10
c0015896:	85 db                	test   ebx,ebx
c0015898:	74 0c                	je     c00158a6 <sysCallClose(regs*)+0x36>
c001589a:	83 ec 0c             	sub    esp,0xc
c001589d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001589f:	53                   	push   ebx
c00158a0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00158a3:	83 c4 10             	add    esp,0x10
c00158a6:	31 c0                	xor    eax,eax
c00158a8:	31 d2                	xor    edx,edx
c00158aa:	83 c4 08             	add    esp,0x8
c00158ad:	5b                   	pop    ebx
c00158ae:	c3                   	ret    
c00158af:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00158b4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00158b9:	83 c4 08             	add    esp,0x8
c00158bc:	5b                   	pop    ebx
c00158bd:	c3                   	ret    

c00158be <sysCallOpenDir(regs*)>:
c00158be:	56                   	push   esi
c00158bf:	53                   	push   ebx
c00158c0:	53                   	push   ebx
c00158c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158c5:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00158c8:	85 f6                	test   esi,esi
c00158ca:	74 51                	je     c001591d <sysCallOpenDir(regs*)+0x5f>
c00158cc:	83 ec 0c             	sub    esp,0xc
c00158cf:	68 14 01 00 00       	push   0x114
c00158d4:	e8 2f 99 ff ff       	call   c000f208 <operator new(unsigned long)>
c00158d9:	83 c4 0c             	add    esp,0xc
c00158dc:	89 c6                	mov    esi,eax
c00158de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00158e3:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00158e6:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00158e9:	56                   	push   esi
c00158ea:	e8 09 a2 ff ff       	call   c000faf8 <Directory::Directory(char const*, Process*)>
c00158ef:	89 34 24             	mov    DWORD PTR [esp],esi
c00158f2:	e8 65 a2 ff ff       	call   c000fb5c <Directory::open()>
c00158f7:	83 c4 10             	add    esp,0x10
c00158fa:	85 c0                	test   eax,eax
c00158fc:	75 1f                	jne    c001591d <sysCallOpenDir(regs*)+0x5f>
c00158fe:	83 ec 0c             	sub    esp,0xc
c0015901:	56                   	push   esi
c0015902:	e8 25 85 ff ff       	call   c000de2c <UnixFile::getFileDescriptor()>
c0015907:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001590a:	83 c4 10             	add    esp,0x10
c001590d:	89 02                	mov    DWORD PTR [edx],eax
c001590f:	c1 f8 1f             	sar    eax,0x1f
c0015912:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015915:	31 c0                	xor    eax,eax
c0015917:	59                   	pop    ecx
c0015918:	31 d2                	xor    edx,edx
c001591a:	5b                   	pop    ebx
c001591b:	5e                   	pop    esi
c001591c:	c3                   	ret    
c001591d:	59                   	pop    ecx
c001591e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015923:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015928:	5b                   	pop    ebx
c0015929:	5e                   	pop    esi
c001592a:	c3                   	ret    

c001592b <sysCallMakeDir(regs*)>:
c001592b:	56                   	push   esi
c001592c:	53                   	push   ebx
c001592d:	83 ec 10             	sub    esp,0x10
c0015930:	68 14 01 00 00       	push   0x114
c0015935:	e8 ce 98 ff ff       	call   c000f208 <operator new(unsigned long)>
c001593a:	83 c4 0c             	add    esp,0xc
c001593d:	89 c3                	mov    ebx,eax
c001593f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015944:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015947:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001594b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001594e:	53                   	push   ebx
c001594f:	e8 a4 a1 ff ff       	call   c000faf8 <Directory::Directory(char const*, Process*)>
c0015954:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015957:	e8 e0 a3 ff ff       	call   c000fd3c <Directory::create()>
c001595c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001595f:	89 c6                	mov    esi,eax
c0015961:	e8 52 a2 ff ff       	call   c000fbb8 <Directory::close()>
c0015966:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015968:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001596b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001596e:	31 c0                	xor    eax,eax
c0015970:	85 f6                	test   esi,esi
c0015972:	0f 95 c0             	setne  al
c0015975:	31 d2                	xor    edx,edx
c0015977:	f7 d8                	neg    eax
c0015979:	83 d2 00             	adc    edx,0x0
c001597c:	83 c4 14             	add    esp,0x14
c001597f:	f7 da                	neg    edx
c0015981:	5b                   	pop    ebx
c0015982:	5e                   	pop    esi
c0015983:	c3                   	ret    

c0015984 <sysCallCloseDir(regs*)>:
c0015984:	53                   	push   ebx
c0015985:	83 ec 08             	sub    esp,0x8
c0015988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001598c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001598f:	83 f8 02             	cmp    eax,0x2
c0015992:	76 2f                	jbe    c00159c3 <sysCallCloseDir(regs*)+0x3f>
c0015994:	83 ec 0c             	sub    esp,0xc
c0015997:	50                   	push   eax
c0015998:	e8 f4 85 ff ff       	call   c000df91 <getFromFileDescriptor(int)>
c001599d:	89 c3                	mov    ebx,eax
c001599f:	89 04 24             	mov    DWORD PTR [esp],eax
c00159a2:	e8 11 a2 ff ff       	call   c000fbb8 <Directory::close()>
c00159a7:	83 c4 10             	add    esp,0x10
c00159aa:	85 db                	test   ebx,ebx
c00159ac:	74 0c                	je     c00159ba <sysCallCloseDir(regs*)+0x36>
c00159ae:	83 ec 0c             	sub    esp,0xc
c00159b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00159b3:	53                   	push   ebx
c00159b4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00159b7:	83 c4 10             	add    esp,0x10
c00159ba:	31 c0                	xor    eax,eax
c00159bc:	31 d2                	xor    edx,edx
c00159be:	83 c4 08             	add    esp,0x8
c00159c1:	5b                   	pop    ebx
c00159c2:	c3                   	ret    
c00159c3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00159c8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00159cd:	83 c4 08             	add    esp,0x8
c00159d0:	5b                   	pop    ebx
c00159d1:	c3                   	ret    

c00159d2 <sysCallWait(regs*)>:
c00159d2:	83 ec 10             	sub    esp,0x10
c00159d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00159d9:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00159dc:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00159df:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00159e2:	e8 41 22 00 00       	call   c0017c28 <waitTask(int, int*, int)>
c00159e7:	83 c4 1c             	add    esp,0x1c
c00159ea:	99                   	cdq    
c00159eb:	c3                   	ret    

c00159ec <sysCallFork(regs*)>:
c00159ec:	83 ec 18             	sub    esp,0x18
c00159ef:	68 c5 13 02 c0       	push   0xc00213c5
c00159f4:	e8 3d 61 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c00159f9:	58                   	pop    eax
c00159fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00159fe:	e8 f3 1f 00 00       	call   c00179f6 <forkProcess(regs*)>
c0015a03:	83 c4 1c             	add    esp,0x1c
c0015a06:	99                   	cdq    
c0015a07:	c3                   	ret    

c0015a08 <sysCallExecve(regs*)>:
c0015a08:	53                   	push   ebx
c0015a09:	81 ec 24 01 00 00    	sub    esp,0x124
c0015a0f:	8b 9c 24 2c 01 00 00 	mov    ebx,DWORD PTR [esp+0x12c]
c0015a16:	68 d3 13 02 c0       	push   0xc00213d3
c0015a1b:	e8 16 61 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0015a20:	83 c4 0c             	add    esp,0xc
c0015a23:	68 00 01 00 00       	push   0x100
c0015a28:	8d 44 24 17          	lea    eax,[esp+0x17]
c0015a2c:	50                   	push   eax
c0015a2d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a32:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015a35:	e8 6d 9f ff ff       	call   c000f9a7 <getcwd(Process*, char*, int)>
c0015a3a:	83 c4 0c             	add    esp,0xc
c0015a3d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015a40:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015a43:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0015a46:	e8 11 23 00 00       	call   c0017d5c <execveProcess(char const*, char* const*, char* const*)>
c0015a4b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0015a50:	ba ff ff ff ff       	mov    edx,0xffffffff
c0015a55:	81 c4 28 01 00 00    	add    esp,0x128
c0015a5b:	5b                   	pop    ebx
c0015a5c:	c3                   	ret    

c0015a5d <sysCallRmdir(regs*)>:
c0015a5d:	56                   	push   esi
c0015a5e:	53                   	push   ebx
c0015a5f:	83 ec 10             	sub    esp,0x10
c0015a62:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015a66:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015a69:	68 14 01 00 00       	push   0x114
c0015a6e:	e8 95 97 ff ff       	call   c000f208 <operator new(unsigned long)>
c0015a73:	83 c4 0c             	add    esp,0xc
c0015a76:	89 c3                	mov    ebx,eax
c0015a78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a7d:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015a80:	56                   	push   esi
c0015a81:	53                   	push   ebx
c0015a82:	e8 af 9b ff ff       	call   c000f636 <File::File(char const*, Process*)>
c0015a87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015a8a:	e8 83 9d ff ff       	call   c000f812 <File::unlink()>
c0015a8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015a92:	89 c6                	mov    esi,eax
c0015a94:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015a96:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015a99:	31 c0                	xor    eax,eax
c0015a9b:	85 f6                	test   esi,esi
c0015a9d:	0f 95 c0             	setne  al
c0015aa0:	31 d2                	xor    edx,edx
c0015aa2:	f7 d8                	neg    eax
c0015aa4:	83 d2 00             	adc    edx,0x0
c0015aa7:	83 c4 14             	add    esp,0x14
c0015aaa:	f7 da                	neg    edx
c0015aac:	5b                   	pop    ebx
c0015aad:	5e                   	pop    esi
c0015aae:	c3                   	ret    

c0015aaf <sysCallUnlink(regs*)>:
c0015aaf:	56                   	push   esi
c0015ab0:	53                   	push   ebx
c0015ab1:	83 ec 10             	sub    esp,0x10
c0015ab4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015ab8:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0015abb:	68 14 01 00 00       	push   0x114
c0015ac0:	e8 43 97 ff ff       	call   c000f208 <operator new(unsigned long)>
c0015ac5:	83 c4 0c             	add    esp,0xc
c0015ac8:	89 c3                	mov    ebx,eax
c0015aca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015acf:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015ad2:	56                   	push   esi
c0015ad3:	53                   	push   ebx
c0015ad4:	e8 5d 9b ff ff       	call   c000f636 <File::File(char const*, Process*)>
c0015ad9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015adc:	e8 31 9d ff ff       	call   c000f812 <File::unlink()>
c0015ae1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015ae4:	89 c6                	mov    esi,eax
c0015ae6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015ae8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015aeb:	31 c0                	xor    eax,eax
c0015aed:	85 f6                	test   esi,esi
c0015aef:	0f 95 c0             	setne  al
c0015af2:	31 d2                	xor    edx,edx
c0015af4:	f7 d8                	neg    eax
c0015af6:	83 d2 00             	adc    edx,0x0
c0015af9:	83 c4 14             	add    esp,0x14
c0015afc:	f7 da                	neg    edx
c0015afe:	5b                   	pop    ebx
c0015aff:	5e                   	pop    esi
c0015b00:	c3                   	ret    

c0015b01 <sysCallGetArgv(regs*)>:
c0015b01:	83 ec 0c             	sub    esp,0xc
c0015b04:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015b08:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0015b0b:	85 c0                	test   eax,eax
c0015b0d:	78 2b                	js     c0015b3a <sysCallGetArgv(regs*)+0x39>
c0015b0f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015b15:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0015b18:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0015b1e:	7d 1a                	jge    c0015b3a <sysCallGetArgv(regs*)+0x39>
c0015b20:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0015b27:	85 c0                	test   eax,eax
c0015b29:	74 17                	je     c0015b42 <sysCallGetArgv(regs*)+0x41>
c0015b2b:	83 ec 08             	sub    esp,0x8
c0015b2e:	50                   	push   eax
c0015b2f:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0015b32:	e8 70 ab fe ff       	call   c00006a7 <strcpy>
c0015b37:	83 c4 10             	add    esp,0x10
c0015b3a:	31 c0                	xor    eax,eax
c0015b3c:	31 d2                	xor    edx,edx
c0015b3e:	83 c4 0c             	add    esp,0xc
c0015b41:	c3                   	ret    
c0015b42:	b8 01 00 00 00       	mov    eax,0x1
c0015b47:	31 d2                	xor    edx,edx
c0015b49:	83 c4 0c             	add    esp,0xc
c0015b4c:	c3                   	ret    

c0015b4d <sysCallTTYName(regs*)>:
c0015b4d:	56                   	push   esi
c0015b4e:	53                   	push   ebx
c0015b4f:	53                   	push   ebx
c0015b50:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015b54:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0015b57:	85 c0                	test   eax,eax
c0015b59:	74 58                	je     c0015bb3 <sysCallTTYName(regs*)+0x66>
c0015b5b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0015b5e:	83 f8 02             	cmp    eax,0x2
c0015b61:	77 3e                	ja     c0015ba1 <sysCallTTYName(regs*)+0x54>
c0015b63:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b68:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015b6b:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015b71:	85 db                	test   ebx,ebx
c0015b73:	74 3e                	je     c0015bb3 <sysCallTTYName(regs*)+0x66>
c0015b75:	83 ec 0c             	sub    esp,0xc
c0015b78:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015b7a:	53                   	push   ebx
c0015b7b:	ff 10                	call   DWORD PTR [eax]
c0015b7d:	83 c4 10             	add    esp,0x10
c0015b80:	84 c0                	test   al,al
c0015b82:	74 3a                	je     c0015bbe <sysCallTTYName(regs*)+0x71>
c0015b84:	83 ec 08             	sub    esp,0x8
c0015b87:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0015b8d:	53                   	push   ebx
c0015b8e:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0015b91:	e8 11 ab fe ff       	call   c00006a7 <strcpy>
c0015b96:	83 c4 10             	add    esp,0x10
c0015b99:	31 c0                	xor    eax,eax
c0015b9b:	59                   	pop    ecx
c0015b9c:	31 d2                	xor    edx,edx
c0015b9e:	5b                   	pop    ebx
c0015b9f:	5e                   	pop    esi
c0015ba0:	c3                   	ret    
c0015ba1:	83 ec 0c             	sub    esp,0xc
c0015ba4:	50                   	push   eax
c0015ba5:	e8 e7 83 ff ff       	call   c000df91 <getFromFileDescriptor(int)>
c0015baa:	83 c4 10             	add    esp,0x10
c0015bad:	89 c3                	mov    ebx,eax
c0015baf:	85 db                	test   ebx,ebx
c0015bb1:	75 c2                	jne    c0015b75 <sysCallTTYName(regs*)+0x28>
c0015bb3:	59                   	pop    ecx
c0015bb4:	b8 01 00 00 00       	mov    eax,0x1
c0015bb9:	31 d2                	xor    edx,edx
c0015bbb:	5b                   	pop    ebx
c0015bbc:	5e                   	pop    esi
c0015bbd:	c3                   	ret    
c0015bbe:	59                   	pop    ecx
c0015bbf:	b8 02 00 00 00       	mov    eax,0x2
c0015bc4:	31 d2                	xor    edx,edx
c0015bc6:	5b                   	pop    ebx
c0015bc7:	5e                   	pop    esi
c0015bc8:	c3                   	ret    

c0015bc9 <sysCallGetEnv(regs*)>:
c0015bc9:	83 ec 0c             	sub    esp,0xc
c0015bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015bd0:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0015bd3:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015bd6:	85 c9                	test   ecx,ecx
c0015bd8:	75 0c                	jne    c0015be6 <sysCallGetEnv(regs*)+0x1d>
c0015bda:	85 d2                	test   edx,edx
c0015bdc:	74 14                	je     c0015bf2 <sysCallGetEnv(regs*)+0x29>
c0015bde:	31 c0                	xor    eax,eax
c0015be0:	31 d2                	xor    edx,edx
c0015be2:	83 c4 0c             	add    esp,0xc
c0015be5:	c3                   	ret    
c0015be6:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015be9:	85 d2                	test   edx,edx
c0015beb:	74 1b                	je     c0015c08 <sysCallGetEnv(regs*)+0x3f>
c0015bed:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0015bf0:	eb ec                	jmp    c0015bde <sysCallGetEnv(regs*)+0x15>
c0015bf2:	83 ec 0c             	sub    esp,0xc
c0015bf5:	68 20 14 02 c0       	push   0xc0021420
c0015bfa:	e8 26 aa fe ff       	call   c0000625 <strlen>
c0015bff:	83 c4 10             	add    esp,0x10
c0015c02:	31 d2                	xor    edx,edx
c0015c04:	83 c4 0c             	add    esp,0xc
c0015c07:	c3                   	ret    
c0015c08:	83 ec 08             	sub    esp,0x8
c0015c0b:	68 20 14 02 c0       	push   0xc0021420
c0015c10:	50                   	push   eax
c0015c11:	e8 91 aa fe ff       	call   c00006a7 <strcpy>
c0015c16:	83 c4 10             	add    esp,0x10
c0015c19:	eb c3                	jmp    c0015bde <sysCallGetEnv(regs*)+0x15>

c0015c1b <sysCallUSleep(regs*)>:
c0015c1b:	83 ec 14             	sub    esp,0x14
c0015c1e:	b8 e8 03 00 00       	mov    eax,0x3e8
c0015c23:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015c27:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c0015c2e:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c0015c31:	01 ca                	add    edx,ecx
c0015c33:	52                   	push   edx
c0015c34:	50                   	push   eax
c0015c35:	e8 87 20 00 00       	call   c0017cc1 <nanoSleep(unsigned long long)>
c0015c3a:	31 c0                	xor    eax,eax
c0015c3c:	31 d2                	xor    edx,edx
c0015c3e:	83 c4 1c             	add    esp,0x1c
c0015c41:	c3                   	ret    

c0015c42 <sysCallSpawn(regs*)>:
c0015c42:	56                   	push   esi
c0015c43:	53                   	push   ebx
c0015c44:	53                   	push   ebx
c0015c45:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015c49:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0015c4c:	85 f6                	test   esi,esi
c0015c4e:	75 08                	jne    c0015c58 <sysCallSpawn(regs*)+0x16>
c0015c50:	59                   	pop    ecx
c0015c51:	31 c0                	xor    eax,eax
c0015c53:	31 d2                	xor    edx,edx
c0015c55:	5b                   	pop    ebx
c0015c56:	5e                   	pop    esi
c0015c57:	c3                   	ret    
c0015c58:	83 ec 0c             	sub    esp,0xc
c0015c5b:	68 e3 13 02 c0       	push   0xc00213e3
c0015c60:	e8 d1 5e ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0015c65:	c7 04 24 3b 07 00 00 	mov    DWORD PTR [esp],0x73b
c0015c6c:	e8 97 95 ff ff       	call   c000f208 <operator new(unsigned long)>
c0015c71:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0015c74:	89 c6                	mov    esi,eax
c0015c76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c7b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015c7e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015c81:	56                   	push   esi
c0015c82:	e8 29 16 00 00       	call   c00172b0 <Process::Process(char const*, Process*, char**)>
c0015c87:	83 c4 20             	add    esp,0x20
c0015c8a:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0015c91:	75 bd                	jne    c0015c50 <sysCallSpawn(regs*)+0xe>
c0015c93:	83 ec 0c             	sub    esp,0xc
c0015c96:	68 ee 13 02 c0       	push   0xc00213ee
c0015c9b:	e8 96 5e ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0015ca0:	89 34 24             	mov    DWORD PTR [esp],esi
c0015ca3:	e8 6e 1b 00 00       	call   c0017816 <Process::createUserThread()>
c0015ca8:	8b 06                	mov    eax,DWORD PTR [esi]
c0015caa:	83 c4 10             	add    esp,0x10
c0015cad:	99                   	cdq    
c0015cae:	59                   	pop    ecx
c0015caf:	5b                   	pop    ebx
c0015cb0:	5e                   	pop    esi
c0015cb1:	c3                   	ret    

c0015cb2 <sysAppSettings(regs*)>:
c0015cb2:	53                   	push   ebx
c0015cb3:	83 ec 08             	sub    esp,0x8
c0015cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015cba:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0015cbd:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c0015cc3:	25 e0 1f 00 00       	and    eax,0x1fe0
c0015cc8:	66 3d c0 09          	cmp    ax,0x9c0
c0015ccc:	75 2f                	jne    c0015cfd <sysAppSettings(regs*)+0x4b>
c0015cce:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0015cd4:	83 e0 1f             	and    eax,0x1f
c0015cd7:	3c 01                	cmp    al,0x1
c0015cd9:	74 2e                	je     c0015d09 <sysAppSettings(regs*)+0x57>
c0015cdb:	3c 07                	cmp    al,0x7
c0015cdd:	0f 84 bd 00 00 00    	je     c0015da0 <sysAppSettings(regs*)+0xee>
c0015ce3:	84 c0                	test   al,al
c0015ce5:	0f 84 dc 00 00 00    	je     c0015dc7 <sysAppSettings(regs*)+0x115>
c0015ceb:	3c 08                	cmp    al,0x8
c0015ced:	74 6d                	je     c0015d5c <sysAppSettings(regs*)+0xaa>
c0015cef:	0f b6 c0             	movzx  eax,al
c0015cf2:	83 c4 08             	add    esp,0x8
c0015cf5:	05 e8 03 00 00       	add    eax,0x3e8
c0015cfa:	5b                   	pop    ebx
c0015cfb:	99                   	cdq    
c0015cfc:	c3                   	ret    
c0015cfd:	b8 01 00 00 00       	mov    eax,0x1
c0015d02:	31 d2                	xor    edx,edx
c0015d04:	83 c4 08             	add    esp,0x8
c0015d07:	5b                   	pop    ebx
c0015d08:	c3                   	ret    
c0015d09:	51                   	push   ecx
c0015d0a:	68 00 01 00 00       	push   0x100
c0015d0f:	6a 00                	push   0x0
c0015d11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d16:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015d19:	83 c0 0c             	add    eax,0xc
c0015d1c:	50                   	push   eax
c0015d1d:	e8 e6 a8 fe ff       	call   c0000608 <memset>
c0015d22:	83 c4 0c             	add    esp,0xc
c0015d25:	68 ff 00 00 00       	push   0xff
c0015d2a:	53                   	push   ebx
c0015d2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d30:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015d33:	83 c0 0c             	add    eax,0xc
c0015d36:	50                   	push   eax
c0015d37:	e8 96 a8 fe ff       	call   c00005d2 <memcpy>
c0015d3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d41:	5b                   	pop    ebx
c0015d42:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015d45:	5a                   	pop    edx
c0015d46:	8d 50 0c             	lea    edx,[eax+0xc]
c0015d49:	52                   	push   edx
c0015d4a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015d50:	e8 fd 74 ff ff       	call   c000d252 <VgaText::setTitle(char*)>
c0015d55:	83 c4 10             	add    esp,0x10
c0015d58:	31 c0                	xor    eax,eax
c0015d5a:	eb a6                	jmp    c0015d02 <sysAppSettings(regs*)+0x50>
c0015d5c:	83 ec 08             	sub    esp,0x8
c0015d5f:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0015d65:	83 e0 0f             	and    eax,0xf
c0015d68:	50                   	push   eax
c0015d69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d6e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015d71:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015d77:	e8 c6 74 ff ff       	call   c000d242 <VgaText::setTitleColour(VgaColour)>
c0015d7c:	58                   	pop    eax
c0015d7d:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0015d83:	5a                   	pop    edx
c0015d84:	c1 e8 04             	shr    eax,0x4
c0015d87:	83 e0 0f             	and    eax,0xf
c0015d8a:	50                   	push   eax
c0015d8b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d90:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015d93:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015d99:	e8 94 74 ff ff       	call   c000d232 <VgaText::setTitleTextColour(VgaColour)>
c0015d9e:	eb b5                	jmp    c0015d55 <sysAppSettings(regs*)+0xa3>
c0015da0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015da5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015da8:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0015dae:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0015db4:	c0 e8 06             	shr    al,0x6
c0015db7:	83 e0 01             	and    eax,0x1
c0015dba:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0015dc0:	31 c0                	xor    eax,eax
c0015dc2:	e9 3b ff ff ff       	jmp    c0015d02 <sysAppSettings(regs*)+0x50>
c0015dc7:	b8 02 00 00 00       	mov    eax,0x2
c0015dcc:	e9 31 ff ff ff       	jmp    c0015d02 <sysAppSettings(regs*)+0x50>

c0015dd1 <sysSetFatAttrib(regs*)>:
c0015dd1:	57                   	push   edi
c0015dd2:	56                   	push   esi
c0015dd3:	53                   	push   ebx
c0015dd4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015dd8:	83 ec 0c             	sub    esp,0xc
c0015ddb:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0015dde:	68 14 01 00 00       	push   0x114
c0015de3:	e8 20 94 ff ff       	call   c000f208 <operator new(unsigned long)>
c0015de8:	83 c4 0c             	add    esp,0xc
c0015deb:	89 c3                	mov    ebx,eax
c0015ded:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015df2:	ff 70 40             	push   DWORD PTR [eax+0x40]
c0015df5:	57                   	push   edi
c0015df6:	53                   	push   ebx
c0015df7:	e8 3a 98 ff ff       	call   c000f636 <File::File(char const*, Process*)>
c0015dfc:	83 c4 0c             	add    esp,0xc
c0015dff:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0015e02:	0f b6 d4             	movzx  edx,ah
c0015e05:	0f b6 c0             	movzx  eax,al
c0015e08:	52                   	push   edx
c0015e09:	50                   	push   eax
c0015e0a:	53                   	push   ebx
c0015e0b:	e8 9c 9a ff ff       	call   c000f8ac <File::chfatattr(unsigned char, unsigned char)>
c0015e10:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e13:	89 c6                	mov    esi,eax
c0015e15:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015e17:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015e1a:	83 c4 10             	add    esp,0x10
c0015e1d:	31 c0                	xor    eax,eax
c0015e1f:	5b                   	pop    ebx
c0015e20:	85 f6                	test   esi,esi
c0015e22:	5e                   	pop    esi
c0015e23:	0f 95 c0             	setne  al
c0015e26:	5f                   	pop    edi
c0015e27:	31 d2                	xor    edx,edx
c0015e29:	f7 d8                	neg    eax
c0015e2b:	83 d2 00             	adc    edx,0x0
c0015e2e:	f7 da                	neg    edx
c0015e30:	c3                   	ret    

c0015e31 <sysPanic(regs*)>:
c0015e31:	83 ec 18             	sub    esp,0x18
c0015e34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e38:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0015e3b:	e8 14 5e ff ff       	call   c000bc54 <panic(char const*)>
c0015e40:	c7 04 24 fb 13 02 c0 	mov    DWORD PTR [esp],0xc00213fb
c0015e47:	e8 08 5e ff ff       	call   c000bc54 <panic(char const*)>
c0015e4c:	b8 01 00 00 00       	mov    eax,0x1
c0015e51:	31 d2                	xor    edx,edx
c0015e53:	83 c4 1c             	add    esp,0x1c
c0015e56:	c3                   	ret    

c0015e57 <sysPipe(regs*)>:
c0015e57:	57                   	push   edi
c0015e58:	56                   	push   esi
c0015e59:	53                   	push   ebx
c0015e5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015e5e:	83 ec 0c             	sub    esp,0xc
c0015e61:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0015e64:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0015e67:	6a 20                	push   0x20
c0015e69:	e8 9a 93 ff ff       	call   c000f208 <operator new(unsigned long)>
c0015e6e:	89 c3                	mov    ebx,eax
c0015e70:	58                   	pop    eax
c0015e71:	5a                   	pop    edx
c0015e72:	68 00 50 00 00       	push   0x5000
c0015e77:	53                   	push   ebx
c0015e78:	e8 13 6d ff ff       	call   c000cb90 <Pipe::Pipe(int)>
c0015e7d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e80:	e8 a7 7f ff ff       	call   c000de2c <UnixFile::getFileDescriptor()>
c0015e85:	89 07                	mov    DWORD PTR [edi],eax
c0015e87:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015e8a:	e8 9d 7f ff ff       	call   c000de2c <UnixFile::getFileDescriptor()>
c0015e8f:	83 c4 10             	add    esp,0x10
c0015e92:	89 06                	mov    DWORD PTR [esi],eax
c0015e94:	31 d2                	xor    edx,edx
c0015e96:	5b                   	pop    ebx
c0015e97:	31 c0                	xor    eax,eax
c0015e99:	5e                   	pop    esi
c0015e9a:	5f                   	pop    edi
c0015e9b:	c3                   	ret    

c0015e9c <sysGetUnixTime(regs*)>:
c0015e9c:	a1 c8 2e 02 c0       	mov    eax,ds:0xc0022ec8
c0015ea1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0015ea7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015eab:	e9 4e a1 ff ff       	jmp    c000fffe <Clock::timeInSecondsLocal()>

c0015eb0 <string_ends_with(char const*, char const*)>:
c0015eb0:	57                   	push   edi
c0015eb1:	56                   	push   esi
c0015eb2:	53                   	push   ebx
c0015eb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015eb7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0015ebb:	83 ec 0c             	sub    esp,0xc
c0015ebe:	53                   	push   ebx
c0015ebf:	e8 61 a7 fe ff       	call   c0000625 <strlen>
c0015ec4:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015ec7:	89 c6                	mov    esi,eax
c0015ec9:	e8 57 a7 fe ff       	call   c0000625 <strlen>
c0015ece:	83 c4 10             	add    esp,0x10
c0015ed1:	39 c6                	cmp    esi,eax
c0015ed3:	7d 06                	jge    c0015edb <string_ends_with(char const*, char const*)+0x2b>
c0015ed5:	5b                   	pop    ebx
c0015ed6:	31 c0                	xor    eax,eax
c0015ed8:	5e                   	pop    esi
c0015ed9:	5f                   	pop    edi
c0015eda:	c3                   	ret    
c0015edb:	83 ec 08             	sub    esp,0x8
c0015ede:	29 c6                	sub    esi,eax
c0015ee0:	57                   	push   edi
c0015ee1:	01 f3                	add    ebx,esi
c0015ee3:	53                   	push   ebx
c0015ee4:	e8 0f a8 fe ff       	call   c00006f8 <strcmp>
c0015ee9:	83 c4 10             	add    esp,0x10
c0015eec:	85 c0                	test   eax,eax
c0015eee:	5b                   	pop    ebx
c0015eef:	0f 94 c0             	sete   al
c0015ef2:	5e                   	pop    esi
c0015ef3:	0f b6 c0             	movzx  eax,al
c0015ef6:	5f                   	pop    edi
c0015ef7:	c3                   	ret    

c0015ef8 <setupSystemCalls()>:
c0015ef8:	c7 05 a0 38 02 c0 45 53 01 c0 	mov    DWORD PTR ds:0xc00238a0,0xc0015345
c0015f02:	c7 05 a4 38 02 c0 73 51 01 c0 	mov    DWORD PTR ds:0xc00238a4,0xc0015173
c0015f0c:	c7 05 a8 38 02 c0 88 52 01 c0 	mov    DWORD PTR ds:0xc00238a8,0xc0015288
c0015f16:	c7 05 ac 38 02 c0 dd 52 01 c0 	mov    DWORD PTR ds:0xc00238ac,0xc00152dd
c0015f20:	c7 05 b0 38 02 c0 20 52 01 c0 	mov    DWORD PTR ds:0xc00238b0,0xc0015220
c0015f2a:	c7 05 b4 38 02 c0 5f 53 01 c0 	mov    DWORD PTR ds:0xc00238b4,0xc001535f
c0015f34:	c7 05 b8 38 02 c0 d8 54 01 c0 	mov    DWORD PTR ds:0xc00238b8,0xc00154d8
c0015f3e:	c7 05 bc 38 02 c0 f7 54 01 c0 	mov    DWORD PTR ds:0xc00238bc,0xc00154f7
c0015f48:	c7 05 c4 38 02 c0 70 58 01 c0 	mov    DWORD PTR ds:0xc00238c4,0xc0015870
c0015f52:	c7 05 c0 38 02 c0 56 55 01 c0 	mov    DWORD PTR ds:0xc00238c0,0xc0015556
c0015f5c:	c7 05 c8 38 02 c0 be 58 01 c0 	mov    DWORD PTR ds:0xc00238c8,0xc00158be
c0015f66:	c7 05 cc 38 02 c0 46 56 01 c0 	mov    DWORD PTR ds:0xc00238cc,0xc0015646
c0015f70:	c7 05 d0 38 02 c0 6b 53 01 c0 	mov    DWORD PTR ds:0xc00238d0,0xc001536b
c0015f7a:	c7 05 d4 38 02 c0 70 53 01 c0 	mov    DWORD PTR ds:0xc00238d4,0xc0015370
c0015f84:	c7 05 d8 38 02 c0 2b 59 01 c0 	mov    DWORD PTR ds:0xc00238d8,0xc001592b
c0015f8e:	c7 05 dc 38 02 c0 84 59 01 c0 	mov    DWORD PTR ds:0xc00238dc,0xc0015984
c0015f98:	c7 05 e0 38 02 c0 08 57 01 c0 	mov    DWORD PTR ds:0xc00238e0,0xc0015708
c0015fa2:	c7 05 e4 38 02 c0 59 57 01 c0 	mov    DWORD PTR ds:0xc00238e4,0xc0015759
c0015fac:	c7 05 e8 38 02 c0 1e 58 01 c0 	mov    DWORD PTR ds:0xc00238e8,0xc001581e
c0015fb6:	c7 05 ec 38 02 c0 75 53 01 c0 	mov    DWORD PTR ds:0xc00238ec,0xc0015375
c0015fc0:	c7 05 f0 38 02 c0 d2 59 01 c0 	mov    DWORD PTR ds:0xc00238f0,0xc00159d2
c0015fca:	c7 05 f4 38 02 c0 ec 59 01 c0 	mov    DWORD PTR ds:0xc00238f4,0xc00159ec
c0015fd4:	c7 05 f8 38 02 c0 08 5a 01 c0 	mov    DWORD PTR ds:0xc00238f8,0xc0015a08
c0015fde:	c7 05 fc 38 02 c0 5d 5a 01 c0 	mov    DWORD PTR ds:0xc00238fc,0xc0015a5d
c0015fe8:	c7 05 00 39 02 c0 af 5a 01 c0 	mov    DWORD PTR ds:0xc0023900,0xc0015aaf
c0015ff2:	c7 05 04 39 02 c0 7f 53 01 c0 	mov    DWORD PTR ds:0xc0023904,0xc001537f
c0015ffc:	c7 05 08 39 02 c0 01 5b 01 c0 	mov    DWORD PTR ds:0xc0023908,0xc0015b01
c0016006:	c7 05 0c 39 02 c0 13 55 01 c0 	mov    DWORD PTR ds:0xc002390c,0xc0015513
c0016010:	c7 05 10 39 02 c0 4d 5b 01 c0 	mov    DWORD PTR ds:0xc0023910,0xc0015b4d
c001601a:	c7 05 14 39 02 c0 b5 56 01 c0 	mov    DWORD PTR ds:0xc0023914,0xc00156b5
c0016024:	c7 05 18 39 02 c0 1b 5c 01 c0 	mov    DWORD PTR ds:0xc0023918,0xc0015c1b
c001602e:	c7 05 1c 39 02 c0 a5 57 01 c0 	mov    DWORD PTR ds:0xc002391c,0xc00157a5
c0016038:	c7 05 20 39 02 c0 42 5c 01 c0 	mov    DWORD PTR ds:0xc0023920,0xc0015c42
c0016042:	c7 05 24 39 02 c0 c9 5b 01 c0 	mov    DWORD PTR ds:0xc0023924,0xc0015bc9
c001604c:	c7 05 28 39 02 c0 b2 5c 01 c0 	mov    DWORD PTR ds:0xc0023928,0xc0015cb2
c0016056:	c7 05 2c 39 02 c0 8f 53 01 c0 	mov    DWORD PTR ds:0xc002392c,0xc001538f
c0016060:	c7 05 30 39 02 c0 f9 53 01 c0 	mov    DWORD PTR ds:0xc0023930,0xc00153f9
c001606a:	c7 05 34 39 02 c0 3f 54 01 c0 	mov    DWORD PTR ds:0xc0023934,0xc001543f
c0016074:	c7 05 38 39 02 c0 d1 5d 01 c0 	mov    DWORD PTR ds:0xc0023938,0xc0015dd1
c001607e:	c7 05 3c 39 02 c0 31 5e 01 c0 	mov    DWORD PTR ds:0xc002393c,0xc0015e31
c0016088:	c7 05 40 39 02 c0 90 54 01 c0 	mov    DWORD PTR ds:0xc0023940,0xc0015490
c0016092:	c7 05 44 39 02 c0 57 5e 01 c0 	mov    DWORD PTR ds:0xc0023944,0xc0015e57
c001609c:	c7 05 48 39 02 c0 9c 5e 01 c0 	mov    DWORD PTR ds:0xc0023948,0xc0015e9c
c00160a6:	c7 05 4c 39 02 c0 8b 51 01 c0 	mov    DWORD PTR ds:0xc002394c,0xc001518b
c00160b0:	c3                   	ret    

c00160b1 <systemCall(regs*, void*)>:
c00160b1:	53                   	push   ebx
c00160b2:	83 ec 08             	sub    esp,0x8
c00160b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00160b9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00160bc:	83 f8 7f             	cmp    eax,0x7f
c00160bf:	77 16                	ja     c00160d7 <systemCall(regs*, void*)+0x26>
c00160c1:	8b 14 85 a0 38 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc760]
c00160c8:	85 d2                	test   edx,edx
c00160ca:	74 0b                	je     c00160d7 <systemCall(regs*, void*)+0x26>
c00160cc:	83 ec 0c             	sub    esp,0xc
c00160cf:	53                   	push   ebx
c00160d0:	ff d2                	call   edx
c00160d2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00160d5:	eb 0d                	jmp    c00160e4 <systemCall(regs*, void*)+0x33>
c00160d7:	52                   	push   edx
c00160d8:	52                   	push   edx
c00160d9:	50                   	push   eax
c00160da:	68 0a 14 02 c0       	push   0xc002140a
c00160df:	e8 52 5a ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c00160e4:	83 c4 10             	add    esp,0x10
c00160e7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00160ec:	31 d2                	xor    edx,edx
c00160ee:	83 c4 08             	add    esp,0x8
c00160f1:	5b                   	pop    ebx
c00160f2:	c3                   	ret    

c00160f3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00160f3:	55                   	push   ebp
c00160f4:	89 e5                	mov    ebp,esp
c00160f6:	57                   	push   edi
c00160f7:	56                   	push   esi
c00160f8:	53                   	push   ebx
c00160f9:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00160ff:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0016102:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0016105:	85 c0                	test   eax,eax
c0016107:	0f 95 c1             	setne  cl
c001610a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001610e:	0f 94 c2             	sete   dl
c0016111:	84 d1                	test   cl,dl
c0016113:	74 26                	je     c001613b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c0016115:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c001611c:	74 1d                	je     c001613b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x48>
c001611e:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0016121:	8d 91 00 10 00 00    	lea    edx,[ecx+0x1000]
c0016127:	89 d6                	mov    esi,edx
c0016129:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001612f:	81 ce 00 f0 ff ff    	or     esi,0xfffff000
c0016135:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0016138:	89 75 10             	mov    DWORD PTR [ebp+0x10],esi
c001613b:	83 ec 0c             	sub    esp,0xc
c001613e:	05 ff 0f 00 00       	add    eax,0xfff
c0016143:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0016146:	6a 01                	push   0x1
c0016148:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c001614e:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c0016154:	e8 1e 7f ff ff       	call   c000e077 <Virt::allocateKernelVirtualPages(int)>
c0016159:	83 c4 10             	add    esp,0x10
c001615c:	89 c6                	mov    esi,eax
c001615e:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c0016164:	0f 86 21 01 00 00    	jbe    c001628b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c001616a:	c1 eb 0c             	shr    ebx,0xc
c001616d:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c0016177:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c001617d:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0016180:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0016183:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c0016189:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c001618c:	29 d8                	sub    eax,ebx
c001618e:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c0016194:	0f 83 f4 00 00 00    	jae    c001628e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x19b>
c001619a:	83 ec 0c             	sub    esp,0xc
c001619d:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c00161a3:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00161a6:	3d 00 10 00 00       	cmp    eax,0x1000
c00161ab:	8b 09                	mov    ecx,DWORD PTR [ecx]
c00161ad:	52                   	push   edx
c00161ae:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c00161b4:	52                   	push   edx
c00161b5:	76 05                	jbe    c00161bc <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc9>
c00161b7:	b8 00 10 00 00       	mov    eax,0x1000
c00161bc:	31 d2                	xor    edx,edx
c00161be:	52                   	push   edx
c00161bf:	50                   	push   eax
c00161c0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00161c3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00161c6:	83 c4 20             	add    esp,0x20
c00161c9:	85 c0                	test   eax,eax
c00161cb:	74 1f                	je     c00161ec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf9>
c00161cd:	51                   	push   ecx
c00161ce:	51                   	push   ecx
c00161cf:	50                   	push   eax
c00161d0:	68 6c 14 02 c0       	push   0xc002146c
c00161d5:	e8 5c 59 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c00161da:	89 34 24             	mov    DWORD PTR [esp],esi
c00161dd:	e8 cb 81 ff ff       	call   c000e3ad <Virt::freeKernelVirtualPages(unsigned long)>
c00161e2:	83 c4 10             	add    esp,0x10
c00161e5:	31 c0                	xor    eax,eax
c00161e7:	e9 7c 01 00 00       	jmp    c0016368 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00161ec:	e8 17 14 00 00       	call   c0017608 <lockScheduler()>
c00161f1:	e8 e5 64 ff ff       	call   c000c6db <Phys::allocatePage()>
c00161f6:	6a 07                	push   0x7
c00161f8:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c00161fe:	56                   	push   esi
c00161ff:	50                   	push   eax
c0016200:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016206:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016209:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001620f:	e8 9a 84 ff ff       	call   c000e6ae <VAS::mapPage(unsigned long, unsigned long, int)>
c0016214:	83 c4 0c             	add    esp,0xc
c0016217:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001621d:	6a 00                	push   0x0
c001621f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016225:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0016228:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c001622e:	e8 d9 82 ff ff       	call   c000e50c <VAS::mapOtherVASIn(bool, VAS*)>
c0016233:	58                   	pop    eax
c0016234:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c001623a:	5a                   	pop    edx
c001623b:	68 07 04 00 00       	push   0x407
c0016240:	53                   	push   ebx
c0016241:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016247:	50                   	push   eax
c0016248:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c001624e:	6a 00                	push   0x0
c0016250:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016255:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016258:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001625e:	e8 4b 8b ff ff       	call   c000edae <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0016263:	83 c4 1c             	add    esp,0x1c
c0016266:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c001626c:	68 00 10 00 00       	push   0x1000
c0016271:	50                   	push   eax
c0016272:	56                   	push   esi
c0016273:	e8 5a a3 fe ff       	call   c00005d2 <memcpy>
c0016278:	e8 8d 13 00 00       	call   c001760a <unlockScheduler()>
c001627d:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c0016283:	83 c4 10             	add    esp,0x10
c0016286:	e9 f5 fe ff ff       	jmp    c0016180 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x8d>
c001628b:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c001628e:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c0016298:	0f 86 bc 00 00 00    	jbe    c001635a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x267>
c001629e:	e8 65 13 00 00       	call   c0017608 <lockScheduler()>
c00162a3:	51                   	push   ecx
c00162a4:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00162aa:	6a 00                	push   0x0
c00162ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00162b4:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00162ba:	e8 4d 82 ff ff       	call   c000e50c <VAS::mapOtherVASIn(bool, VAS*)>
c00162bf:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c00162c5:	83 c4 10             	add    esp,0x10
c00162c8:	c1 e8 0c             	shr    eax,0xc
c00162cb:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c00162d5:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c00162db:	e8 fb 63 ff ff       	call   c000c6db <Phys::allocatePage()>
c00162e0:	6a 07                	push   0x7
c00162e2:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c00162e8:	56                   	push   esi
c00162e9:	50                   	push   eax
c00162ea:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00162f0:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c00162f3:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c00162f9:	e8 b0 83 ff ff       	call   c000e6ae <VAS::mapPage(unsigned long, unsigned long, int)>
c00162fe:	58                   	pop    eax
c00162ff:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c0016305:	5a                   	pop    edx
c0016306:	68 07 04 00 00       	push   0x407
c001630b:	53                   	push   ebx
c001630c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0016312:	50                   	push   eax
c0016313:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0016319:	6a 00                	push   0x0
c001631b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016320:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016323:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0016329:	e8 80 8a ff ff       	call   c000edae <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001632e:	83 c4 1c             	add    esp,0x1c
c0016331:	68 00 10 00 00       	push   0x1000
c0016336:	6a 00                	push   0x0
c0016338:	56                   	push   esi
c0016339:	e8 ca a2 fe ff       	call   c0000608 <memset>
c001633e:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c0016344:	83 c4 10             	add    esp,0x10
c0016347:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c001634d:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c0016353:	77 86                	ja     c00162db <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e8>
c0016355:	e8 b0 12 00 00       	call   c001760a <unlockScheduler()>
c001635a:	83 ec 0c             	sub    esp,0xc
c001635d:	56                   	push   esi
c001635e:	e8 4a 80 ff ff       	call   c000e3ad <Virt::freeKernelVirtualPages(unsigned long)>
c0016363:	83 c4 10             	add    esp,0x10
c0016366:	b0 01                	mov    al,0x1
c0016368:	8d 65 f4             	lea    esp,[ebp-0xc]
c001636b:	5b                   	pop    ebx
c001636c:	5e                   	pop    esi
c001636d:	5f                   	pop    edi
c001636e:	5d                   	pop    ebp
c001636f:	c3                   	ret    

c0016370 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0016370:	55                   	push   ebp
c0016371:	57                   	push   edi
c0016372:	56                   	push   esi
c0016373:	53                   	push   ebx
c0016374:	83 ec 48             	sub    esp,0x48
c0016377:	68 14 01 00 00       	push   0x114
c001637c:	e8 87 8e ff ff       	call   c000f208 <operator new(unsigned long)>
c0016381:	83 c4 0c             	add    esp,0xc
c0016384:	89 c6                	mov    esi,eax
c0016386:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001638a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001638e:	50                   	push   eax
c001638f:	e8 a2 92 ff ff       	call   c000f636 <File::File(char const*, Process*)>
c0016394:	58                   	pop    eax
c0016395:	5a                   	pop    edx
c0016396:	6a 01                	push   0x1
c0016398:	56                   	push   esi
c0016399:	e8 fc 92 ff ff       	call   c000f69a <File::open(FileOpenMode)>
c001639e:	83 c4 10             	add    esp,0x10
c00163a1:	85 c0                	test   eax,eax
c00163a3:	0f 85 47 01 00 00    	jne    c00164f0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00163a9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00163b1:	83 ec 0c             	sub    esp,0xc
c00163b4:	6a 34                	push   0x34
c00163b6:	e8 76 5d ff ff       	call   c000c131 <malloc>
c00163bb:	89 c3                	mov    ebx,eax
c00163bd:	58                   	pop    eax
c00163be:	8b 06                	mov    eax,DWORD PTR [esi]
c00163c0:	8d 7c 24 38          	lea    edi,[esp+0x38]
c00163c4:	57                   	push   edi
c00163c5:	53                   	push   ebx
c00163c6:	6a 00                	push   0x0
c00163c8:	6a 34                	push   0x34
c00163ca:	56                   	push   esi
c00163cb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00163ce:	83 c4 20             	add    esp,0x20
c00163d1:	85 c0                	test   eax,eax
c00163d3:	0f 85 17 01 00 00    	jne    c00164f0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00163d9:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c00163df:	0f 85 0b 01 00 00    	jne    c00164f0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00163e5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00163e8:	85 c0                	test   eax,eax
c00163ea:	0f 84 00 01 00 00    	je     c00164f0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00163f0:	31 d2                	xor    edx,edx
c00163f2:	55                   	push   ebp
c00163f3:	52                   	push   edx
c00163f4:	50                   	push   eax
c00163f5:	56                   	push   esi
c00163f6:	e8 5d 93 ff ff       	call   c000f758 <File::seek(unsigned long long)>
c00163fb:	83 c4 10             	add    esp,0x10
c00163fe:	85 c0                	test   eax,eax
c0016400:	0f 85 ea 00 00 00    	jne    c00164f0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016406:	83 ec 0c             	sub    esp,0xc
c0016409:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001640c:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016410:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0016414:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016418:	0f af c2             	imul   eax,edx
c001641b:	50                   	push   eax
c001641c:	e8 10 5d ff ff       	call   c000c131 <malloc>
c0016421:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016424:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016428:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001642a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001642e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0016432:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0016436:	0f af c2             	imul   eax,edx
c0016439:	99                   	cdq    
c001643a:	52                   	push   edx
c001643b:	50                   	push   eax
c001643c:	56                   	push   esi
c001643d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016440:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0016443:	83 c4 20             	add    esp,0x20
c0016446:	85 c0                	test   eax,eax
c0016448:	0f 84 a2 00 00 00    	je     c00164f0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001644e:	31 d2                	xor    edx,edx
c0016450:	51                   	push   ecx
c0016451:	52                   	push   edx
c0016452:	50                   	push   eax
c0016453:	56                   	push   esi
c0016454:	e8 ff 92 ff ff       	call   c000f758 <File::seek(unsigned long long)>
c0016459:	83 c4 10             	add    esp,0x10
c001645c:	85 c0                	test   eax,eax
c001645e:	0f 85 8c 00 00 00    	jne    c00164f0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0016464:	83 ec 0c             	sub    esp,0xc
c0016467:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001646b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001646f:	31 ed                	xor    ebp,ebp
c0016471:	0f af c2             	imul   eax,edx
c0016474:	50                   	push   eax
c0016475:	e8 b7 5c ff ff       	call   c000c131 <malloc>
c001647a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001647d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016481:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0016483:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016487:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001648b:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001648f:	0f af c2             	imul   eax,edx
c0016492:	99                   	cdq    
c0016493:	52                   	push   edx
c0016494:	50                   	push   eax
c0016495:	56                   	push   esi
c0016496:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016499:	83 c4 20             	add    esp,0x20
c001649c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00164a4:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c00164a8:	0f 86 80 00 00 00    	jbe    c001652e <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c00164ae:	0f b7 fd             	movzx  edi,bp
c00164b1:	c1 e7 05             	shl    edi,0x5
c00164b4:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00164b8:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00164bb:	75 6b                	jne    c0016528 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00164bd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00164c0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00164c4:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c00164c7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00164cb:	52                   	push   edx
c00164cc:	31 d2                	xor    edx,edx
c00164ce:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00164d1:	52                   	push   edx
c00164d2:	50                   	push   eax
c00164d3:	56                   	push   esi
c00164d4:	e8 7f 92 ff ff       	call   c000f758 <File::seek(unsigned long long)>
c00164d9:	83 c4 10             	add    esp,0x10
c00164dc:	85 c0                	test   eax,eax
c00164de:	74 17                	je     c00164f7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c00164e0:	83 ec 0c             	sub    esp,0xc
c00164e3:	68 97 14 02 c0       	push   0xc0021497
c00164e8:	e8 49 56 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c00164ed:	83 c4 10             	add    esp,0x10
c00164f0:	31 c0                	xor    eax,eax
c00164f2:	e9 87 00 00 00       	jmp    c001657e <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c00164f7:	83 ec 0c             	sub    esp,0xc
c00164fa:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c00164fd:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0016500:	50                   	push   eax
c0016501:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016505:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016509:	56                   	push   esi
c001650a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001650e:	e8 e0 fb ff ff       	call   c00160f3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0016513:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016517:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001651b:	83 c4 20             	add    esp,0x20
c001651e:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0016522:	73 04                	jae    c0016528 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0016524:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016528:	45                   	inc    ebp
c0016529:	e9 76 ff ff ff       	jmp    c00164a4 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001652e:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0016532:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016536:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001653a:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c0016540:	83 ec 0c             	sub    esp,0xc
c0016543:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c0016549:	25 00 f0 ff ff       	and    eax,0xfffff000
c001654e:	05 00 10 00 00       	add    eax,0x1000
c0016553:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016556:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001655a:	e8 e2 5b ff ff       	call   c000c141 <free>
c001655f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016562:	e8 da 5b ff ff       	call   c000c141 <free>
c0016567:	58                   	pop    eax
c0016568:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001656c:	e8 d0 5b ff ff       	call   c000c141 <free>
c0016571:	89 34 24             	mov    DWORD PTR [esp],esi
c0016574:	e8 7f 91 ff ff       	call   c000f6f8 <File::close()>
c0016579:	83 c4 10             	add    esp,0x10
c001657c:	b0 01                	mov    al,0x1
c001657e:	83 c4 3c             	add    esp,0x3c
c0016581:	5b                   	pop    ebx
c0016582:	5e                   	pop    esi
c0016583:	5f                   	pop    edi
c0016584:	5d                   	pop    ebp
c0016585:	c3                   	ret    

c0016586 <Thr::runtimeReferenceHelper()>:
c0016586:	83 ec 18             	sub    esp,0x18
c0016589:	68 9f 14 02 c0       	push   0xc002149f
c001658e:	e8 a3 55 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0016593:	fa                   	cli    
c0016594:	83 c4 10             	add    esp,0x10
c0016597:	eb fe                	jmp    c0016597 <Thr::runtimeReferenceHelper()+0x11>

c0016599 <Thr::getAddressOfKernelSymbol(char const*)>:
c0016599:	57                   	push   edi
c001659a:	56                   	push   esi
c001659b:	53                   	push   ebx
c001659c:	31 db                	xor    ebx,ebx
c001659e:	39 1d 40 42 02 c0    	cmp    DWORD PTR ds:0xc0024240,ebx
c00165a4:	7e 3c                	jle    c00165e2 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00165a6:	8b 34 9d c0 41 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdbe40]
c00165ad:	31 ff                	xor    edi,edi
c00165af:	39 3c 9d c0 40 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdbf40],edi
c00165b6:	7e 27                	jle    c00165df <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00165b8:	50                   	push   eax
c00165b9:	50                   	push   eax
c00165ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00165be:	8b 06                	mov    eax,DWORD PTR [esi]
c00165c0:	03 04 9d 40 41 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdbec0]
c00165c7:	50                   	push   eax
c00165c8:	e8 2b a1 fe ff       	call   c00006f8 <strcmp>
c00165cd:	83 c4 10             	add    esp,0x10
c00165d0:	85 c0                	test   eax,eax
c00165d2:	75 05                	jne    c00165d9 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c00165d4:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00165d7:	eb 0b                	jmp    c00165e4 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c00165d9:	83 c6 10             	add    esi,0x10
c00165dc:	47                   	inc    edi
c00165dd:	eb d0                	jmp    c00165af <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c00165df:	43                   	inc    ebx
c00165e0:	eb bc                	jmp    c001659e <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c00165e2:	31 c0                	xor    eax,eax
c00165e4:	5b                   	pop    ebx
c00165e5:	5e                   	pop    esi
c00165e6:	5f                   	pop    edi
c00165e7:	c3                   	ret    

c00165e8 <Thr::loadKernelSymbolTable(char const*)>:
c00165e8:	55                   	push   ebp
c00165e9:	57                   	push   edi
c00165ea:	56                   	push   esi
c00165eb:	53                   	push   ebx
c00165ec:	83 ec 68             	sub    esp,0x68
c00165ef:	8b 35 94 42 02 c0    	mov    esi,DWORD PTR ds:0xc0024294
c00165f5:	68 14 01 00 00       	push   0x114
c00165fa:	e8 09 8c ff ff       	call   c000f208 <operator new(unsigned long)>
c00165ff:	83 c4 0c             	add    esp,0xc
c0016602:	89 c3                	mov    ebx,eax
c0016604:	56                   	push   esi
c0016605:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0016609:	50                   	push   eax
c001660a:	e8 27 90 ff ff       	call   c000f636 <File::File(char const*, Process*)>
c001660f:	5e                   	pop    esi
c0016610:	5f                   	pop    edi
c0016611:	6a 01                	push   0x1
c0016613:	53                   	push   ebx
c0016614:	e8 81 90 ff ff       	call   c000f69a <File::open(FileOpenMode)>
c0016619:	83 c4 10             	add    esp,0x10
c001661c:	31 d2                	xor    edx,edx
c001661e:	85 c0                	test   eax,eax
c0016620:	0f 85 79 02 00 00    	jne    c001689f <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0016626:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001662e:	83 ec 0c             	sub    esp,0xc
c0016631:	6a 34                	push   0x34
c0016633:	e8 f9 5a ff ff       	call   c000c131 <malloc>
c0016638:	59                   	pop    ecx
c0016639:	89 c7                	mov    edi,eax
c001663b:	8d 74 24 34          	lea    esi,[esp+0x34]
c001663f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016641:	56                   	push   esi
c0016642:	57                   	push   edi
c0016643:	6a 00                	push   0x0
c0016645:	6a 34                	push   0x34
c0016647:	53                   	push   ebx
c0016648:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001664b:	83 c4 20             	add    esp,0x20
c001664e:	85 c0                	test   eax,eax
c0016650:	74 17                	je     c0016669 <Thr::loadKernelSymbolTable(char const*)+0x81>
c0016652:	83 ec 0c             	sub    esp,0xc
c0016655:	68 c1 14 02 c0       	push   0xc00214c1
c001665a:	e8 f5 55 ff ff       	call   c000bc54 <panic(char const*)>
c001665f:	83 c4 10             	add    esp,0x10
c0016662:	31 d2                	xor    edx,edx
c0016664:	e9 36 02 00 00       	jmp    c001689f <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0016669:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001666f:	75 e1                	jne    c0016652 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0016671:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016674:	85 c0                	test   eax,eax
c0016676:	74 da                	je     c0016652 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0016678:	52                   	push   edx
c0016679:	31 d2                	xor    edx,edx
c001667b:	52                   	push   edx
c001667c:	50                   	push   eax
c001667d:	53                   	push   ebx
c001667e:	e8 d5 90 ff ff       	call   c000f758 <File::seek(unsigned long long)>
c0016683:	83 c4 10             	add    esp,0x10
c0016686:	85 c0                	test   eax,eax
c0016688:	75 c8                	jne    c0016652 <Thr::loadKernelSymbolTable(char const*)+0x6a>
c001668a:	83 ec 0c             	sub    esp,0xc
c001668d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016691:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016695:	31 ed                	xor    ebp,ebp
c0016697:	0f af c2             	imul   eax,edx
c001669a:	50                   	push   eax
c001669b:	e8 91 5a ff ff       	call   c000c131 <malloc>
c00166a0:	89 34 24             	mov    DWORD PTR [esp],esi
c00166a3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00166a7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00166a9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00166ad:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00166b1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00166b5:	0f af c2             	imul   eax,edx
c00166b8:	99                   	cdq    
c00166b9:	52                   	push   edx
c00166ba:	50                   	push   eax
c00166bb:	53                   	push   ebx
c00166bc:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00166bf:	83 c4 20             	add    esp,0x20
c00166c2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00166ca:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00166d2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00166da:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00166e2:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c00166e6:	0f 86 aa 00 00 00    	jbe    c0016796 <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c00166ec:	0f b7 f5             	movzx  esi,bp
c00166ef:	6b f6 28             	imul   esi,esi,0x28
c00166f2:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c00166f6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00166f9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00166fd:	50                   	push   eax
c00166fe:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016702:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0016706:	8b 16                	mov    edx,DWORD PTR [esi]
c0016708:	6b c0 28             	imul   eax,eax,0x28
c001670b:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001670f:	89 d0                	mov    eax,edx
c0016711:	31 d2                	xor    edx,edx
c0016713:	52                   	push   edx
c0016714:	50                   	push   eax
c0016715:	53                   	push   ebx
c0016716:	e8 3d 90 ff ff       	call   c000f758 <File::seek(unsigned long long)>
c001671b:	83 c4 0c             	add    esp,0xc
c001671e:	6a 20                	push   0x20
c0016720:	6a 00                	push   0x0
c0016722:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0016726:	52                   	push   edx
c0016727:	e8 dc 9e fe ff       	call   c0000608 <memset>
c001672c:	58                   	pop    eax
c001672d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001672f:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0016733:	51                   	push   ecx
c0016734:	8d 54 24 40          	lea    edx,[esp+0x40]
c0016738:	52                   	push   edx
c0016739:	6a 00                	push   0x0
c001673b:	6a 1f                	push   0x1f
c001673d:	53                   	push   ebx
c001673e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016741:	83 c4 18             	add    esp,0x18
c0016744:	68 d8 14 02 c0       	push   0xc00214d8
c0016749:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001674d:	52                   	push   edx
c001674e:	e8 a5 9f fe ff       	call   c00006f8 <strcmp>
c0016753:	83 c4 10             	add    esp,0x10
c0016756:	85 c0                	test   eax,eax
c0016758:	75 0f                	jne    c0016769 <Thr::loadKernelSymbolTable(char const*)+0x181>
c001675a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001675d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016765:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016769:	50                   	push   eax
c001676a:	50                   	push   eax
c001676b:	68 e0 14 02 c0       	push   0xc00214e0
c0016770:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0016774:	50                   	push   eax
c0016775:	e8 7e 9f fe ff       	call   c00006f8 <strcmp>
c001677a:	83 c4 10             	add    esp,0x10
c001677d:	85 c0                	test   eax,eax
c001677f:	75 0f                	jne    c0016790 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c0016781:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016784:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016788:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001678c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016790:	45                   	inc    ebp
c0016791:	e9 4c ff ff ff       	jmp    c00166e2 <Thr::loadKernelSymbolTable(char const*)+0xfa>
c0016796:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001679b:	75 10                	jne    c00167ad <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c001679d:	83 ec 0c             	sub    esp,0xc
c00167a0:	68 e8 14 02 c0       	push   0xc00214e8
c00167a5:	e8 aa 54 ff ff       	call   c000bc54 <panic(char const*)>
c00167aa:	83 c4 10             	add    esp,0x10
c00167ad:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00167b2:	75 10                	jne    c00167c4 <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c00167b4:	83 ec 0c             	sub    esp,0xc
c00167b7:	68 e8 14 02 c0       	push   0xc00214e8
c00167bc:	e8 93 54 ff ff       	call   c000bc54 <panic(char const*)>
c00167c1:	83 c4 10             	add    esp,0x10
c00167c4:	31 d2                	xor    edx,edx
c00167c6:	50                   	push   eax
c00167c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00167cb:	52                   	push   edx
c00167cc:	50                   	push   eax
c00167cd:	53                   	push   ebx
c00167ce:	e8 85 8f ff ff       	call   c000f758 <File::seek(unsigned long long)>
c00167d3:	5a                   	pop    edx
c00167d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00167d8:	e8 54 59 ff ff       	call   c000c131 <malloc>
c00167dd:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00167e5:	89 c1                	mov    ecx,eax
c00167e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00167eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00167ef:	5e                   	pop    esi
c00167f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00167f2:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c00167f6:	55                   	push   ebp
c00167f7:	51                   	push   ecx
c00167f8:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c00167fc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016800:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016804:	53                   	push   ebx
c0016805:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016808:	83 c4 14             	add    esp,0x14
c001680b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001680f:	e8 1d 59 ff ff       	call   c000c131 <malloc>
c0016814:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016817:	89 c6                	mov    esi,eax
c0016819:	8b 03                	mov    eax,DWORD PTR [ebx]
c001681b:	56                   	push   esi
c001681c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016820:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016824:	53                   	push   ebx
c0016825:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016828:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001682c:	8b 15 40 42 02 c0    	mov    edx,DWORD PTR ds:0xc0024240
c0016832:	83 c4 1c             	add    esp,0x1c
c0016835:	c1 e8 04             	shr    eax,0x4
c0016838:	89 04 95 c0 40 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbf40],eax
c001683f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016843:	31 d2                	xor    edx,edx
c0016845:	52                   	push   edx
c0016846:	50                   	push   eax
c0016847:	53                   	push   ebx
c0016848:	e8 0b 8f ff ff       	call   c000f758 <File::seek(unsigned long long)>
c001684d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016850:	31 d2                	xor    edx,edx
c0016852:	56                   	push   esi
c0016853:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016857:	52                   	push   edx
c0016858:	50                   	push   eax
c0016859:	8b 03                	mov    eax,DWORD PTR [ebx]
c001685b:	53                   	push   ebx
c001685c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001685f:	83 c4 14             	add    esp,0x14
c0016862:	53                   	push   ebx
c0016863:	e8 90 8e ff ff       	call   c000f6f8 <File::close()>
c0016868:	5d                   	pop    ebp
c0016869:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001686d:	e8 cf 58 ff ff       	call   c000c141 <free>
c0016872:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016875:	e8 c7 58 ff ff       	call   c000c141 <free>
c001687a:	a1 40 42 02 c0       	mov    eax,ds:0xc0024240
c001687f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0016883:	8d 50 01             	lea    edx,[eax+0x1]
c0016886:	89 0c 85 c0 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbe40],ecx
c001688d:	89 15 40 42 02 c0    	mov    DWORD PTR ds:0xc0024240,edx
c0016893:	89 34 85 40 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbec0],esi
c001689a:	83 c4 10             	add    esp,0x10
c001689d:	b2 01                	mov    dl,0x1
c001689f:	83 c4 5c             	add    esp,0x5c
c00168a2:	88 d0                	mov    al,dl
c00168a4:	5b                   	pop    ebx
c00168a5:	5e                   	pop    esi
c00168a6:	5f                   	pop    edi
c00168a7:	5d                   	pop    ebp
c00168a8:	c3                   	ret    

c00168a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00168a9:	55                   	push   ebp
c00168aa:	57                   	push   edi
c00168ab:	56                   	push   esi
c00168ac:	53                   	push   ebx
c00168ad:	81 ec 68 03 00 00    	sub    esp,0x368
c00168b3:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00168ba:	8b 1d 94 42 02 c0    	mov    ebx,DWORD PTR ds:0xc0024294
c00168c0:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c00168c4:	68 14 01 00 00       	push   0x114
c00168c9:	e8 3a 89 ff ff       	call   c000f208 <operator new(unsigned long)>
c00168ce:	83 c4 0c             	add    esp,0xc
c00168d1:	89 c5                	mov    ebp,eax
c00168d3:	53                   	push   ebx
c00168d4:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00168db:	50                   	push   eax
c00168dc:	e8 55 8d ff ff       	call   c000f636 <File::File(char const*, Process*)>
c00168e1:	58                   	pop    eax
c00168e2:	5a                   	pop    edx
c00168e3:	6a 01                	push   0x1
c00168e5:	55                   	push   ebp
c00168e6:	e8 af 8d ff ff       	call   c000f69a <File::open(FileOpenMode)>
c00168eb:	83 c4 10             	add    esp,0x10
c00168ee:	85 c0                	test   eax,eax
c00168f0:	0f 85 ef 06 00 00    	jne    c0016fe5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c00168f6:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c00168fe:	83 ec 0c             	sub    esp,0xc
c0016901:	6a 34                	push   0x34
c0016903:	e8 29 58 ff ff       	call   c000c131 <malloc>
c0016908:	89 c7                	mov    edi,eax
c001690a:	58                   	pop    eax
c001690b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001690e:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016912:	53                   	push   ebx
c0016913:	57                   	push   edi
c0016914:	6a 00                	push   0x0
c0016916:	6a 34                	push   0x34
c0016918:	55                   	push   ebp
c0016919:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001691c:	83 c4 20             	add    esp,0x20
c001691f:	85 c0                	test   eax,eax
c0016921:	0f 85 be 06 00 00    	jne    c0016fe5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0016927:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001692d:	0f 85 b2 06 00 00    	jne    c0016fe5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0016933:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0016936:	85 c0                	test   eax,eax
c0016938:	0f 84 a7 06 00 00    	je     c0016fe5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001693e:	31 d2                	xor    edx,edx
c0016940:	56                   	push   esi
c0016941:	52                   	push   edx
c0016942:	50                   	push   eax
c0016943:	55                   	push   ebp
c0016944:	e8 0f 8e ff ff       	call   c000f758 <File::seek(unsigned long long)>
c0016949:	83 c4 10             	add    esp,0x10
c001694c:	85 c0                	test   eax,eax
c001694e:	0f 85 91 06 00 00    	jne    c0016fe5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0016954:	83 ec 0c             	sub    esp,0xc
c0016957:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001695a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001695e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0016962:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016966:	0f af c2             	imul   eax,edx
c0016969:	50                   	push   eax
c001696a:	e8 c2 57 ff ff       	call   c000c131 <malloc>
c001696f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016972:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016976:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016979:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001697d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0016981:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016985:	0f af c2             	imul   eax,edx
c0016988:	99                   	cdq    
c0016989:	52                   	push   edx
c001698a:	50                   	push   eax
c001698b:	55                   	push   ebp
c001698c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001698f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0016992:	83 c4 20             	add    esp,0x20
c0016995:	85 c0                	test   eax,eax
c0016997:	0f 84 48 06 00 00    	je     c0016fe5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001699d:	31 d2                	xor    edx,edx
c001699f:	51                   	push   ecx
c00169a0:	52                   	push   edx
c00169a1:	50                   	push   eax
c00169a2:	55                   	push   ebp
c00169a3:	e8 b0 8d ff ff       	call   c000f758 <File::seek(unsigned long long)>
c00169a8:	83 c4 10             	add    esp,0x10
c00169ab:	85 c0                	test   eax,eax
c00169ad:	0f 85 32 06 00 00    	jne    c0016fe5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c00169b3:	83 ec 0c             	sub    esp,0xc
c00169b6:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00169ba:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00169be:	31 f6                	xor    esi,esi
c00169c0:	0f af c2             	imul   eax,edx
c00169c3:	50                   	push   eax
c00169c4:	e8 68 57 ff ff       	call   c000c131 <malloc>
c00169c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169cc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00169d0:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00169d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169d7:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00169db:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00169df:	0f af c2             	imul   eax,edx
c00169e2:	99                   	cdq    
c00169e3:	52                   	push   edx
c00169e4:	50                   	push   eax
c00169e5:	55                   	push   ebp
c00169e6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00169e9:	83 c4 20             	add    esp,0x20
c00169ec:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c00169f0:	0f 86 8a 00 00 00    	jbe    c0016a80 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00169f6:	0f b7 de             	movzx  ebx,si
c00169f9:	c1 e3 05             	shl    ebx,0x5
c00169fc:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0016a00:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0016a03:	75 75                	jne    c0016a7a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0016a05:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016a08:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016a0c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016a0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016a13:	52                   	push   edx
c0016a14:	31 d2                	xor    edx,edx
c0016a16:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0016a19:	52                   	push   edx
c0016a1a:	50                   	push   eax
c0016a1b:	55                   	push   ebp
c0016a1c:	e8 37 8d ff ff       	call   c000f758 <File::seek(unsigned long long)>
c0016a21:	83 c4 10             	add    esp,0x10
c0016a24:	85 c0                	test   eax,eax
c0016a26:	0f 85 b9 05 00 00    	jne    c0016fe5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0016a2c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0016a33:	31 d2                	xor    edx,edx
c0016a35:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0016a39:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016a3c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0016a40:	83 ec 0c             	sub    esp,0xc
c0016a43:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016a47:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016a4e:	50                   	push   eax
c0016a4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016a53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a57:	52                   	push   edx
c0016a58:	50                   	push   eax
c0016a59:	55                   	push   ebp
c0016a5a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016a5d:	83 c4 1c             	add    esp,0x1c
c0016a60:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016a63:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0016a66:	50                   	push   eax
c0016a67:	6a 00                	push   0x0
c0016a69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a6d:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0016a71:	50                   	push   eax
c0016a72:	e8 91 9b fe ff       	call   c0000608 <memset>
c0016a77:	83 c4 10             	add    esp,0x10
c0016a7a:	46                   	inc    esi
c0016a7b:	e9 6c ff ff ff       	jmp    c00169ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0016a80:	31 db                	xor    ebx,ebx
c0016a82:	50                   	push   eax
c0016a83:	68 00 01 00 00       	push   0x100
c0016a88:	6a 00                	push   0x0
c0016a8a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0016a8e:	50                   	push   eax
c0016a8f:	e8 74 9b fe ff       	call   c0000608 <memset>
c0016a94:	83 c4 0c             	add    esp,0xc
c0016a97:	68 00 01 00 00       	push   0x100
c0016a9c:	6a 00                	push   0x0
c0016a9e:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0016aa5:	50                   	push   eax
c0016aa6:	e8 5d 9b fe ff       	call   c0000608 <memset>
c0016aab:	83 c4 10             	add    esp,0x10
c0016aae:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0016ab6:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016abe:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016ac6:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016ace:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0016ad6:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0016ada:	0f 86 30 01 00 00    	jbe    c0016c10 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0016ae0:	0f b7 f3             	movzx  esi,bx
c0016ae3:	6b f6 28             	imul   esi,esi,0x28
c0016ae6:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0016aea:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0016aed:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016af1:	50                   	push   eax
c0016af2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016af6:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0016afa:	8b 06                	mov    eax,DWORD PTR [esi]
c0016afc:	6b d2 28             	imul   edx,edx,0x28
c0016aff:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0016b03:	31 d2                	xor    edx,edx
c0016b05:	52                   	push   edx
c0016b06:	50                   	push   eax
c0016b07:	55                   	push   ebp
c0016b08:	e8 4b 8c ff ff       	call   c000f758 <File::seek(unsigned long long)>
c0016b0d:	83 c4 0c             	add    esp,0xc
c0016b10:	6a 20                	push   0x20
c0016b12:	6a 00                	push   0x0
c0016b14:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016b1b:	51                   	push   ecx
c0016b1c:	e8 e7 9a fe ff       	call   c0000608 <memset>
c0016b21:	58                   	pop    eax
c0016b22:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016b25:	8d 54 24 58          	lea    edx,[esp+0x58]
c0016b29:	52                   	push   edx
c0016b2a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0016b31:	51                   	push   ecx
c0016b32:	6a 00                	push   0x0
c0016b34:	6a 1f                	push   0x1f
c0016b36:	55                   	push   ebp
c0016b37:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016b3a:	83 c4 1c             	add    esp,0x1c
c0016b3d:	6a 09                	push   0x9
c0016b3f:	68 02 15 02 c0       	push   0xc0021502
c0016b44:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0016b4b:	51                   	push   ecx
c0016b4c:	e8 1e 9a fe ff       	call   c000056f <memcmp>
c0016b51:	83 c4 10             	add    esp,0x10
c0016b54:	85 c0                	test   eax,eax
c0016b56:	75 21                	jne    c0016b79 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0016b58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b5c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016b60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016b64:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0016b68:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016b6b:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0016b72:	89 c8                	mov    eax,ecx
c0016b74:	40                   	inc    eax
c0016b75:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016b79:	50                   	push   eax
c0016b7a:	6a 09                	push   0x9
c0016b7c:	68 0c 15 02 c0       	push   0xc002150c
c0016b81:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016b88:	50                   	push   eax
c0016b89:	e8 e1 99 fe ff       	call   c000056f <memcmp>
c0016b8e:	83 c4 10             	add    esp,0x10
c0016b91:	85 c0                	test   eax,eax
c0016b93:	75 21                	jne    c0016bb6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0016b95:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b99:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016b9d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016ba1:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0016ba5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016ba8:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0016baf:	89 c8                	mov    eax,ecx
c0016bb1:	40                   	inc    eax
c0016bb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016bb6:	50                   	push   eax
c0016bb7:	50                   	push   eax
c0016bb8:	68 d8 14 02 c0       	push   0xc00214d8
c0016bbd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016bc4:	50                   	push   eax
c0016bc5:	e8 2e 9b fe ff       	call   c00006f8 <strcmp>
c0016bca:	83 c4 10             	add    esp,0x10
c0016bcd:	85 c0                	test   eax,eax
c0016bcf:	75 0f                	jne    c0016be0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0016bd1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016bd4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016bd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016bdc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016be0:	50                   	push   eax
c0016be1:	50                   	push   eax
c0016be2:	68 e0 14 02 c0       	push   0xc00214e0
c0016be7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0016bee:	50                   	push   eax
c0016bef:	e8 04 9b fe ff       	call   c00006f8 <strcmp>
c0016bf4:	83 c4 10             	add    esp,0x10
c0016bf7:	85 c0                	test   eax,eax
c0016bf9:	75 0f                	jne    c0016c0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0016bfb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0016bfe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c02:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c06:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016c0a:	43                   	inc    ebx
c0016c0b:	e9 c6 fe ff ff       	jmp    c0016ad6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0016c10:	31 d2                	xor    edx,edx
c0016c12:	50                   	push   eax
c0016c13:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c17:	52                   	push   edx
c0016c18:	50                   	push   eax
c0016c19:	55                   	push   ebp
c0016c1a:	e8 39 8b ff ff       	call   c000f758 <File::seek(unsigned long long)>
c0016c1f:	5a                   	pop    edx
c0016c20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c24:	e8 08 55 ff ff       	call   c000c131 <malloc>
c0016c29:	31 d2                	xor    edx,edx
c0016c2b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0016c2f:	59                   	pop    ecx
c0016c30:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016c33:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0016c37:	53                   	push   ebx
c0016c38:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016c3c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c40:	52                   	push   edx
c0016c41:	50                   	push   eax
c0016c42:	55                   	push   ebp
c0016c43:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016c46:	83 c4 14             	add    esp,0x14
c0016c49:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016c4d:	e8 df 54 ff ff       	call   c000c131 <malloc>
c0016c52:	31 d2                	xor    edx,edx
c0016c54:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0016c58:	83 c4 0c             	add    esp,0xc
c0016c5b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c5f:	52                   	push   edx
c0016c60:	50                   	push   eax
c0016c61:	55                   	push   ebp
c0016c62:	e8 f1 8a ff ff       	call   c000f758 <File::seek(unsigned long long)>
c0016c67:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c6a:	31 d2                	xor    edx,edx
c0016c6c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016c70:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016c73:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016c77:	52                   	push   edx
c0016c78:	50                   	push   eax
c0016c79:	55                   	push   ebp
c0016c7a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016c7d:	83 c4 20             	add    esp,0x20
c0016c80:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0016c88:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016c8c:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c0016c90:	0f 84 53 03 00 00    	je     c0016fe9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x740>
c0016c96:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c0016c9d:	31 d2                	xor    edx,edx
c0016c9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016ca3:	c1 e8 03             	shr    eax,0x3
c0016ca6:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0016caa:	50                   	push   eax
c0016cab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016caf:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0016cb3:	52                   	push   edx
c0016cb4:	50                   	push   eax
c0016cb5:	55                   	push   ebp
c0016cb6:	e8 9d 8a ff ff       	call   c000f758 <File::seek(unsigned long long)>
c0016cbb:	58                   	pop    eax
c0016cbc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016cc0:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0016cc7:	e8 65 54 ff ff       	call   c000c131 <malloc>
c0016ccc:	31 d2                	xor    edx,edx
c0016cce:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0016cd2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0016cd5:	58                   	pop    eax
c0016cd6:	8d 44 24 58          	lea    eax,[esp+0x58]
c0016cda:	50                   	push   eax
c0016cdb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016cdf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016ce3:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0016cea:	52                   	push   edx
c0016ceb:	50                   	push   eax
c0016cec:	55                   	push   ebp
c0016ced:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0016cf0:	83 c4 20             	add    esp,0x20
c0016cf3:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0016cfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0016cff:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c0016d03:	0f 8d c4 02 00 00    	jge    c0016fcd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x724>
c0016d09:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016d0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d11:	31 db                	xor    ebx,ebx
c0016d13:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c0016d16:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016d1a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d1e:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c0016d22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016d26:	c1 e8 08             	shr    eax,0x8
c0016d29:	89 c6                	mov    esi,eax
c0016d2b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0016d2f:	c1 e6 04             	shl    esi,0x4
c0016d32:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c0016d36:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0016d39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016d3d:	85 c0                	test   eax,eax
c0016d3f:	0f 85 17 01 00 00    	jne    c0016e5c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0016d45:	83 ec 0c             	sub    esp,0xc
c0016d48:	b3 01                	mov    bl,0x1
c0016d4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d4e:	03 06                	add    eax,DWORD PTR [esi]
c0016d50:	50                   	push   eax
c0016d51:	e8 43 f8 ff ff       	call   c0016599 <Thr::getAddressOfKernelSymbol(char const*)>
c0016d56:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016d5a:	83 c4 10             	add    esp,0x10
c0016d5d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016d62:	0f 85 f4 00 00 00    	jne    c0016e5c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0016d68:	50                   	push   eax
c0016d69:	50                   	push   eax
c0016d6a:	68 16 15 02 c0       	push   0xc0021516
c0016d6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d73:	03 06                	add    eax,DWORD PTR [esi]
c0016d75:	50                   	push   eax
c0016d76:	e8 7d 99 fe ff       	call   c00006f8 <strcmp>
c0016d7b:	83 c4 10             	add    esp,0x10
c0016d7e:	85 c0                	test   eax,eax
c0016d80:	75 0a                	jne    c0016d8c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x4e3>
c0016d82:	b8 cc e0 01 c0       	mov    eax,0xc001e0cc
c0016d87:	e9 ca 00 00 00       	jmp    c0016e56 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0016d8c:	50                   	push   eax
c0016d8d:	50                   	push   eax
c0016d8e:	68 20 15 02 c0       	push   0xc0021520
c0016d93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d97:	03 06                	add    eax,DWORD PTR [esi]
c0016d99:	50                   	push   eax
c0016d9a:	e8 59 99 fe ff       	call   c00006f8 <strcmp>
c0016d9f:	83 c4 10             	add    esp,0x10
c0016da2:	85 c0                	test   eax,eax
c0016da4:	75 0a                	jne    c0016db0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x507>
c0016da6:	b8 00 de 01 c0       	mov    eax,0xc001de00
c0016dab:	e9 a6 00 00 00       	jmp    c0016e56 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0016db0:	53                   	push   ebx
c0016db1:	53                   	push   ebx
c0016db2:	68 29 15 02 c0       	push   0xc0021529
c0016db7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016dbb:	03 06                	add    eax,DWORD PTR [esi]
c0016dbd:	50                   	push   eax
c0016dbe:	e8 35 99 fe ff       	call   c00006f8 <strcmp>
c0016dc3:	83 c4 10             	add    esp,0x10
c0016dc6:	85 c0                	test   eax,eax
c0016dc8:	75 0a                	jne    c0016dd4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x52b>
c0016dca:	b8 cc e1 01 c0       	mov    eax,0xc001e1cc
c0016dcf:	e9 82 00 00 00       	jmp    c0016e56 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ad>
c0016dd4:	51                   	push   ecx
c0016dd5:	51                   	push   ecx
c0016dd6:	68 33 15 02 c0       	push   0xc0021533
c0016ddb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ddf:	03 06                	add    eax,DWORD PTR [esi]
c0016de1:	50                   	push   eax
c0016de2:	e8 11 99 fe ff       	call   c00006f8 <strcmp>
c0016de7:	83 c4 10             	add    esp,0x10
c0016dea:	85 c0                	test   eax,eax
c0016dec:	74 63                	je     c0016e51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a8>
c0016dee:	50                   	push   eax
c0016def:	50                   	push   eax
c0016df0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016df4:	03 06                	add    eax,DWORD PTR [esi]
c0016df6:	50                   	push   eax
c0016df7:	68 3c 15 02 c0       	push   0xc002153c
c0016dfc:	e8 35 4d ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0016e01:	58                   	pop    eax
c0016e02:	5a                   	pop    edx
c0016e03:	68 56 15 02 c0       	push   0xc0021556
c0016e08:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c0016e0f:	53                   	push   ebx
c0016e10:	e8 92 98 fe ff       	call   c00006a7 <strcpy>
c0016e15:	59                   	pop    ecx
c0016e16:	58                   	pop    eax
c0016e17:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016e1b:	03 06                	add    eax,DWORD PTR [esi]
c0016e1d:	50                   	push   eax
c0016e1e:	53                   	push   ebx
c0016e1f:	e8 3a 99 fe ff       	call   c000075e <strcat>
c0016e24:	58                   	pop    eax
c0016e25:	5a                   	pop    edx
c0016e26:	68 ec 15 02 c0       	push   0xc00215ec
c0016e2b:	53                   	push   ebx
c0016e2c:	e8 2d 99 fe ff       	call   c000075e <strcat>
c0016e31:	83 c4 10             	add    esp,0x10
c0016e34:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0016e39:	0f 84 48 01 00 00    	je     c0016f87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c0016e3f:	83 ec 0c             	sub    esp,0xc
c0016e42:	53                   	push   ebx
c0016e43:	e8 0c 4e ff ff       	call   c000bc54 <panic(char const*)>
c0016e48:	83 c4 10             	add    esp,0x10
c0016e4b:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c0016e4f:	eb 0b                	jmp    c0016e5c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b3>
c0016e51:	b8 4c df 01 c0       	mov    eax,0xc001df4c
c0016e56:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016e5a:	b3 01                	mov    bl,0x1
c0016e5c:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0016e61:	0f 85 80 00 00 00    	jne    c0016ee7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x63e>
c0016e67:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0016e6e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016e72:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0016e76:	01 ce                	add    esi,ecx
c0016e78:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0016e80:	8b 06                	mov    eax,DWORD PTR [esi]
c0016e82:	0f 94 c2             	sete   dl
c0016e85:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0016e8d:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c0016e92:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c0016e96:	84 db                	test   bl,bl
c0016e98:	74 31                	je     c0016ecb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x622>
c0016e9a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0016e9e:	01 c3                	add    ebx,eax
c0016ea0:	84 d2                	test   dl,dl
c0016ea2:	75 0a                	jne    c0016eae <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x605>
c0016ea4:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016ea8:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0016eac:	76 32                	jbe    c0016ee0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c0016eae:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0016eb3:	0f 84 ce 00 00 00    	je     c0016f87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c0016eb9:	83 ec 0c             	sub    esp,0xc
c0016ebc:	68 6d 15 02 c0       	push   0xc002156d
c0016ec1:	e8 8e 4d ff ff       	call   c000bc54 <panic(char const*)>
c0016ec6:	83 c4 10             	add    esp,0x10
c0016ec9:	eb 15                	jmp    c0016ee0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c0016ecb:	8d 1c 08             	lea    ebx,[eax+ecx*1]
c0016ece:	84 d2                	test   dl,dl
c0016ed0:	75 0e                	jne    c0016ee0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c0016ed2:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016ed6:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0016eda:	77 04                	ja     c0016ee0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x637>
c0016edc:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0016ee0:	89 1e                	mov    DWORD PTR [esi],ebx
c0016ee2:	e9 dd 00 00 00       	jmp    c0016fc4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71b>
c0016ee7:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0016eec:	75 6b                	jne    c0016f59 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b0>
c0016eee:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0016ef5:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c0016ef9:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c0016efd:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0016f05:	74 14                	je     c0016f1b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x672>
c0016f07:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0016f0f:	74 0a                	je     c0016f1b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x672>
c0016f11:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0016f15:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0016f19:	76 17                	jbe    c0016f32 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x689>
c0016f1b:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0016f20:	74 65                	je     c0016f87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c0016f22:	83 ec 0c             	sub    esp,0xc
c0016f25:	68 89 15 02 c0       	push   0xc0021589
c0016f2a:	e8 25 4d ff ff       	call   c000bc54 <panic(char const*)>
c0016f2f:	83 c4 10             	add    esp,0x10
c0016f32:	8b 16                	mov    edx,DWORD PTR [esi]
c0016f34:	84 db                	test   bl,bl
c0016f36:	74 13                	je     c0016f4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a2>
c0016f38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016f3c:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c0016f43:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0016f47:	01 d0                	add    eax,edx
c0016f49:	eb 06                	jmp    c0016f51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6a8>
c0016f4b:	89 d0                	mov    eax,edx
c0016f4d:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0016f51:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0016f55:	89 06                	mov    DWORD PTR [esi],eax
c0016f57:	eb 6b                	jmp    c0016fc4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71b>
c0016f59:	50                   	push   eax
c0016f5a:	50                   	push   eax
c0016f5b:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0016f60:	50                   	push   eax
c0016f61:	68 a5 15 02 c0       	push   0xc00215a5
c0016f66:	e8 cb 4b ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0016f6b:	83 c4 10             	add    esp,0x10
c0016f6e:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c0016f73:	74 12                	je     c0016f87 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c0016f75:	83 ec 0c             	sub    esp,0xc
c0016f78:	68 b0 15 02 c0       	push   0xc00215b0
c0016f7d:	e8 d2 4c ff ff       	call   c000bc54 <panic(char const*)>
c0016f82:	83 c4 10             	add    esp,0x10
c0016f85:	eb 3d                	jmp    c0016fc4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x71b>
c0016f87:	83 ec 0c             	sub    esp,0xc
c0016f8a:	55                   	push   ebp
c0016f8b:	e8 68 87 ff ff       	call   c000f6f8 <File::close()>
c0016f90:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016f93:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016f96:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f99:	59                   	pop    ecx
c0016f9a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016f9e:	e8 9e 51 ff ff       	call   c000c141 <free>
c0016fa3:	5b                   	pop    ebx
c0016fa4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016fa8:	e8 94 51 ff ff       	call   c000c141 <free>
c0016fad:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016fb0:	e8 8c 51 ff ff       	call   c000c141 <free>
c0016fb5:	5e                   	pop    esi
c0016fb6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0016fba:	e8 82 51 ff ff       	call   c000c141 <free>
c0016fbf:	83 c4 10             	add    esp,0x10
c0016fc2:	eb 21                	jmp    c0016fe5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0016fc4:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0016fc8:	e9 2e fd ff ff       	jmp    c0016cfb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0016fcd:	83 ec 0c             	sub    esp,0xc
c0016fd0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016fd4:	e8 68 51 ff ff       	call   c000c141 <free>
c0016fd9:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c0016fdd:	83 c4 10             	add    esp,0x10
c0016fe0:	e9 a3 fc ff ff       	jmp    c0016c88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0016fe5:	31 c0                	xor    eax,eax
c0016fe7:	eb 33                	jmp    c001701c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x773>
c0016fe9:	83 ec 0c             	sub    esp,0xc
c0016fec:	55                   	push   ebp
c0016fed:	e8 06 87 ff ff       	call   c000f6f8 <File::close()>
c0016ff2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016ff5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016ff8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016ffb:	58                   	pop    eax
c0016ffc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017000:	e8 3c 51 ff ff       	call   c000c141 <free>
c0017005:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017008:	e8 34 51 ff ff       	call   c000c141 <free>
c001700d:	5a                   	pop    edx
c001700e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017012:	e8 2a 51 ff ff       	call   c000c141 <free>
c0017017:	83 c4 10             	add    esp,0x10
c001701a:	b0 01                	mov    al,0x1
c001701c:	81 c4 5c 03 00 00    	add    esp,0x35c
c0017022:	5b                   	pop    ebx
c0017023:	5e                   	pop    esi
c0017024:	5f                   	pop    edi
c0017025:	5d                   	pop    ebp
c0017026:	c3                   	ret    

c0017027 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0017027:	56                   	push   esi
c0017028:	31 d2                	xor    edx,edx
c001702a:	53                   	push   ebx
c001702b:	8b 1d a0 3a 02 c0    	mov    ebx,DWORD PTR ds:0xc0023aa0
c0017031:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017035:	39 d3                	cmp    ebx,edx
c0017037:	7e 1b                	jle    c0017054 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0017039:	8b 04 95 c0 3c 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdc340]
c0017040:	39 c8                	cmp    eax,ecx
c0017042:	77 0d                	ja     c0017051 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0017044:	8b 34 95 c0 3a 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdc540]
c001704b:	01 c6                	add    esi,eax
c001704d:	39 ce                	cmp    esi,ecx
c001704f:	77 05                	ja     c0017056 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0017051:	42                   	inc    edx
c0017052:	eb e1                	jmp    c0017035 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0017054:	31 c0                	xor    eax,eax
c0017056:	5b                   	pop    ebx
c0017057:	5e                   	pop    esi
c0017058:	c3                   	ret    

c0017059 <Thr::getDriverNameFromAddress(unsigned long)>:
c0017059:	53                   	push   ebx
c001705a:	31 c0                	xor    eax,eax
c001705c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0017060:	8b 1d a0 3a 02 c0    	mov    ebx,DWORD PTR ds:0xc0023aa0
c0017066:	39 c3                	cmp    ebx,eax
c0017068:	7e 22                	jle    c001708c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001706a:	8b 14 85 c0 3c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc340]
c0017071:	39 ca                	cmp    edx,ecx
c0017073:	77 14                	ja     c0017089 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017075:	03 14 85 c0 3a 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdc540]
c001707c:	39 ca                	cmp    edx,ecx
c001707e:	76 09                	jbe    c0017089 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0017080:	8b 04 85 c0 3e 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc140]
c0017087:	eb 05                	jmp    c001708e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0017089:	40                   	inc    eax
c001708a:	eb da                	jmp    c0017066 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001708c:	31 c0                	xor    eax,eax
c001708e:	5b                   	pop    ebx
c001708f:	c3                   	ret    

c0017090 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0017090:	53                   	push   ebx
c0017091:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017095:	53                   	push   ebx
c0017096:	e8 8c ff ff ff       	call   c0017027 <Thr::getDriverBaseFromAddress(unsigned long)>
c001709b:	5a                   	pop    edx
c001709c:	31 d2                	xor    edx,edx
c001709e:	85 c0                	test   eax,eax
c00170a0:	74 04                	je     c00170a6 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00170a2:	89 da                	mov    edx,ebx
c00170a4:	29 c2                	sub    edx,eax
c00170a6:	89 d0                	mov    eax,edx
c00170a8:	5b                   	pop    ebx
c00170a9:	c3                   	ret    

c00170aa <Thr::loadDLL(char const*, bool)>:
c00170aa:	55                   	push   ebp
c00170ab:	57                   	push   edi
c00170ac:	56                   	push   esi
c00170ad:	53                   	push   ebx
c00170ae:	81 ec 24 01 00 00    	sub    esp,0x124
c00170b4:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c00170bb:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c00170c2:	56                   	push   esi
c00170c3:	68 c8 15 02 c0       	push   0xc00215c8
c00170c8:	e8 69 4a ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c00170cd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00170d4:	e8 2f 81 ff ff       	call   c000f208 <operator new(unsigned long)>
c00170d9:	83 c4 0c             	add    esp,0xc
c00170dc:	89 c3                	mov    ebx,eax
c00170de:	ff 35 94 42 02 c0    	push   DWORD PTR ds:0xc0024294
c00170e4:	56                   	push   esi
c00170e5:	50                   	push   eax
c00170e6:	e8 4b 85 ff ff       	call   c000f636 <File::File(char const*, Process*)>
c00170eb:	83 c4 0c             	add    esp,0xc
c00170ee:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00170f2:	50                   	push   eax
c00170f3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00170f7:	50                   	push   eax
c00170f8:	53                   	push   ebx
c00170f9:	e8 48 88 ff ff       	call   c000f946 <File::stat(unsigned long long*, bool*)>
c00170fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017100:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017103:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017106:	83 c4 10             	add    esp,0x10
c0017109:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001710e:	75 0a                	jne    c001711a <Thr::loadDLL(char const*, bool)+0x70>
c0017110:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017114:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0017118:	75 3e                	jne    c0017158 <Thr::loadDLL(char const*, bool)+0xae>
c001711a:	89 f8                	mov    eax,edi
c001711c:	31 db                	xor    ebx,ebx
c001711e:	84 c0                	test   al,al
c0017120:	0f 84 ca 00 00 00    	je     c00171f0 <Thr::loadDLL(char const*, bool)+0x146>
c0017126:	50                   	push   eax
c0017127:	50                   	push   eax
c0017128:	68 d9 15 02 c0       	push   0xc00215d9
c001712d:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0017131:	53                   	push   ebx
c0017132:	e8 70 95 fe ff       	call   c00006a7 <strcpy>
c0017137:	58                   	pop    eax
c0017138:	5a                   	pop    edx
c0017139:	56                   	push   esi
c001713a:	53                   	push   ebx
c001713b:	e8 1e 96 fe ff       	call   c000075e <strcat>
c0017140:	59                   	pop    ecx
c0017141:	5d                   	pop    ebp
c0017142:	68 ec 15 02 c0       	push   0xc00215ec
c0017147:	53                   	push   ebx
c0017148:	e8 11 96 fe ff       	call   c000075e <strcat>
c001714d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017150:	e8 ff 4a ff ff       	call   c000bc54 <panic(char const*)>
c0017155:	83 c4 10             	add    esp,0x10
c0017158:	83 ec 0c             	sub    esp,0xc
c001715b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001715f:	e8 cd 4f ff ff       	call   c000c131 <malloc>
c0017164:	89 34 24             	mov    DWORD PTR [esp],esi
c0017167:	89 c3                	mov    ebx,eax
c0017169:	e8 b7 94 fe ff       	call   c0000625 <strlen>
c001716e:	8b 2d a0 3a 02 c0    	mov    ebp,DWORD PTR ds:0xc0023aa0
c0017174:	40                   	inc    eax
c0017175:	89 04 24             	mov    DWORD PTR [esp],eax
c0017178:	e8 b4 4f ff ff       	call   c000c131 <malloc>
c001717d:	89 04 ad c0 3e 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdc140],eax
c0017184:	58                   	pop    eax
c0017185:	a1 a0 3a 02 c0       	mov    eax,ds:0xc0023aa0
c001718a:	5a                   	pop    edx
c001718b:	56                   	push   esi
c001718c:	ff 34 85 c0 3e 02 c0 	push   DWORD PTR [eax*4-0x3ffdc140]
c0017193:	e8 0f 95 fe ff       	call   c00006a7 <strcpy>
c0017198:	a1 a0 3a 02 c0       	mov    eax,ds:0xc0023aa0
c001719d:	8d 50 01             	lea    edx,[eax+0x1]
c00171a0:	89 1c 85 c0 3c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc340],ebx
c00171a7:	89 15 a0 3a 02 c0    	mov    DWORD PTR ds:0xc0023aa0,edx
c00171ad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00171b1:	59                   	pop    ecx
c00171b2:	89 14 85 c0 3a 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc540],edx
c00171b9:	5d                   	pop    ebp
c00171ba:	53                   	push   ebx
c00171bb:	68 ee 15 02 c0       	push   0xc00215ee
c00171c0:	e8 71 49 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c00171c5:	83 c4 0c             	add    esp,0xc
c00171c8:	6a 01                	push   0x1
c00171ca:	53                   	push   ebx
c00171cb:	56                   	push   esi
c00171cc:	e8 d8 f6 ff ff       	call   c00168a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c00171d1:	83 c4 10             	add    esp,0x10
c00171d4:	84 c0                	test   al,al
c00171d6:	75 18                	jne    c00171f0 <Thr::loadDLL(char const*, bool)+0x146>
c00171d8:	31 db                	xor    ebx,ebx
c00171da:	89 f8                	mov    eax,edi
c00171dc:	84 c0                	test   al,al
c00171de:	74 10                	je     c00171f0 <Thr::loadDLL(char const*, bool)+0x146>
c00171e0:	83 ec 0c             	sub    esp,0xc
c00171e3:	68 0d 16 02 c0       	push   0xc002160d
c00171e8:	e8 67 4a ff ff       	call   c000bc54 <panic(char const*)>
c00171ed:	83 c4 10             	add    esp,0x10
c00171f0:	81 c4 1c 01 00 00    	add    esp,0x11c
c00171f6:	89 d8                	mov    eax,ebx
c00171f8:	5b                   	pop    ebx
c00171f9:	5e                   	pop    esi
c00171fa:	5f                   	pop    edi
c00171fb:	5d                   	pop    ebp
c00171fc:	c3                   	ret    

c00171fd <Thr::executeDLL(unsigned long, void*)>:
c00171fd:	56                   	push   esi
c00171fe:	53                   	push   ebx
c00171ff:	51                   	push   ecx
c0017200:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017204:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017208:	85 db                	test   ebx,ebx
c001720a:	75 10                	jne    c001721c <Thr::executeDLL(unsigned long, void*)+0x1f>
c001720c:	83 ec 0c             	sub    esp,0xc
c001720f:	68 2c 16 02 c0       	push   0xc002162c
c0017214:	e8 3b 4a ff ff       	call   c000bc54 <panic(char const*)>
c0017219:	83 c4 10             	add    esp,0x10
c001721c:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0017220:	89 d8                	mov    eax,ebx
c0017222:	5a                   	pop    edx
c0017223:	5b                   	pop    ebx
c0017224:	5e                   	pop    esi
c0017225:	ff e0                	jmp    eax
c0017227:	90                   	nop

c0017228 <changeTSS>:
c0017228:	83 ec 0c             	sub    esp,0xc
c001722b:	e8 3a cd ff ff       	call   c0013f6a <thisCPU()>
c0017230:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017236:	83 ec 08             	sub    esp,0x8
c0017239:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001723c:	05 7c 11 00 00       	add    eax,0x117c
c0017241:	c1 e1 15             	shl    ecx,0x15
c0017244:	ba 00 00 e8 01       	mov    edx,0x1e80000
c0017249:	29 ca                	sub    edx,ecx
c001724b:	52                   	push   edx
c001724c:	50                   	push   eax
c001724d:	e8 1a 69 ff ff       	call   c000db6c <TSS::setESP(unsigned long)>
c0017252:	83 c4 1c             	add    esp,0x1c
c0017255:	c3                   	ret    

c0017256 <Process::addArgs(char**)>:
c0017256:	57                   	push   edi
c0017257:	56                   	push   esi
c0017258:	53                   	push   ebx
c0017259:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001725d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017261:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001726b:	85 ff                	test   edi,edi
c001726d:	74 3d                	je     c00172ac <Process::addArgs(char**)+0x56>
c001726f:	8b 07                	mov    eax,DWORD PTR [edi]
c0017271:	85 c0                	test   eax,eax
c0017273:	74 37                	je     c00172ac <Process::addArgs(char**)+0x56>
c0017275:	31 db                	xor    ebx,ebx
c0017277:	83 ec 0c             	sub    esp,0xc
c001727a:	50                   	push   eax
c001727b:	e8 a5 93 fe ff       	call   c0000625 <strlen>
c0017280:	40                   	inc    eax
c0017281:	89 04 24             	mov    DWORD PTR [esp],eax
c0017284:	e8 a8 4e ff ff       	call   c000c131 <malloc>
c0017289:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c0017290:	5a                   	pop    edx
c0017291:	59                   	pop    ecx
c0017292:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c0017295:	43                   	inc    ebx
c0017296:	50                   	push   eax
c0017297:	e8 0b 94 fe ff       	call   c00006a7 <strcpy>
c001729c:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c00172a2:	83 c4 10             	add    esp,0x10
c00172a5:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00172a8:	85 c0                	test   eax,eax
c00172aa:	75 cb                	jne    c0017277 <Process::addArgs(char**)+0x21>
c00172ac:	5b                   	pop    ebx
c00172ad:	5e                   	pop    esi
c00172ae:	5f                   	pop    edi
c00172af:	c3                   	ret    

c00172b0 <Process::Process(char const*, Process*, char**)>:
c00172b0:	56                   	push   esi
c00172b1:	53                   	push   ebx
c00172b2:	83 ec 14             	sub    esp,0x14
c00172b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172b9:	05 0c 02 00 00       	add    eax,0x20c
c00172be:	bb 07 00 00 00       	mov    ebx,0x7
c00172c3:	89 c6                	mov    esi,eax
c00172c5:	85 db                	test   ebx,ebx
c00172c7:	78 12                	js     c00172db <Process::Process(char const*, Process*, char**)+0x2b>
c00172c9:	83 ec 0c             	sub    esp,0xc
c00172cc:	56                   	push   esi
c00172cd:	e8 fe 77 00 00       	call   c001ead0 <ThreadControlBlock::ThreadControlBlock()>
c00172d2:	83 c4 10             	add    esp,0x10
c00172d5:	83 c6 63             	add    esi,0x63
c00172d8:	4b                   	dec    ebx
c00172d9:	eb ea                	jmp    c00172c5 <Process::Process(char const*, Process*, char**)+0x15>
c00172db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172df:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00172e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00172ea:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c00172f3:	a1 e4 28 02 c0       	mov    eax,ds:0xc00228e4
c00172f8:	8d 50 01             	lea    edx,[eax+0x1]
c00172fb:	89 15 e4 28 02 c0    	mov    DWORD PTR ds:0xc00228e4,edx
c0017301:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017305:	89 02                	mov    DWORD PTR [edx],eax
c0017307:	83 ec 0c             	sub    esp,0xc
c001730a:	6a 10                	push   0x10
c001730c:	e8 f7 7e ff ff       	call   c000f208 <operator new(unsigned long)>
c0017311:	83 c4 10             	add    esp,0x10
c0017314:	89 c3                	mov    ebx,eax
c0017316:	83 ec 08             	sub    esp,0x8
c0017319:	6a 00                	push   0x0
c001731b:	53                   	push   ebx
c001731c:	e8 7b 7b ff ff       	call   c000ee9c <VAS::VAS(bool)>
c0017321:	83 c4 10             	add    esp,0x10
c0017324:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017328:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001732e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017332:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001733c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017340:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017344:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001734a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001734e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017354:	85 c0                	test   eax,eax
c0017356:	74 42                	je     c001739a <Process::Process(char const*, Process*, char**)+0xea>
c0017358:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001735c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017362:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0017368:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001736c:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0017372:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017376:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001737c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017382:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017386:	05 0c 01 00 00       	add    eax,0x10c
c001738b:	83 ec 08             	sub    esp,0x8
c001738e:	52                   	push   edx
c001738f:	50                   	push   eax
c0017390:	e8 12 93 fe ff       	call   c00006a7 <strcpy>
c0017395:	83 c4 10             	add    esp,0x10
c0017398:	eb 5c                	jmp    c00173f6 <Process::Process(char const*, Process*, char**)+0x146>
c001739a:	83 ec 0c             	sub    esp,0xc
c001739d:	68 60 12 00 00       	push   0x1260
c00173a2:	e8 61 7e ff ff       	call   c000f208 <operator new(unsigned long)>
c00173a7:	83 c4 10             	add    esp,0x10
c00173aa:	89 c3                	mov    ebx,eax
c00173ac:	83 ec 08             	sub    esp,0x8
c00173af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00173b3:	53                   	push   ebx
c00173b4:	e8 b1 64 ff ff       	call   c000d86a <VgaText::VgaText(char const*)>
c00173b9:	83 c4 10             	add    esp,0x10
c00173bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173c0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00173c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173ca:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00173d0:	83 ec 0c             	sub    esp,0xc
c00173d3:	50                   	push   eax
c00173d4:	e8 92 58 ff ff       	call   c000cc6b <addToTerminalCycle(VgaText*)>
c00173d9:	83 c4 10             	add    esp,0x10
c00173dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173e0:	05 0c 01 00 00       	add    eax,0x10c
c00173e5:	83 ec 08             	sub    esp,0x8
c00173e8:	68 56 16 02 c0       	push   0xc0021656
c00173ed:	50                   	push   eax
c00173ee:	e8 b4 92 fe ff       	call   c00006a7 <strcpy>
c00173f3:	83 c4 10             	add    esp,0x10
c00173f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173fa:	83 c0 0c             	add    eax,0xc
c00173fd:	83 ec 08             	sub    esp,0x8
c0017400:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017404:	50                   	push   eax
c0017405:	e8 9d 92 fe ff       	call   c00006a7 <strcpy>
c001740a:	83 c4 10             	add    esp,0x10
c001740d:	83 ec 08             	sub    esp,0x8
c0017410:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0017414:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017418:	e8 39 fe ff ff       	call   c0017256 <Process::addArgs(char**)>
c001741d:	83 c4 10             	add    esp,0x10
c0017420:	83 ec 08             	sub    esp,0x8
c0017423:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017427:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001742b:	e8 40 ef ff ff       	call   c0016370 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0017430:	83 c4 10             	add    esp,0x10
c0017433:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0017437:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001743b:	83 f0 01             	xor    eax,0x1
c001743e:	88 c2                	mov    dl,al
c0017440:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017444:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001744a:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001744f:	83 ec 08             	sub    esp,0x8
c0017452:	50                   	push   eax
c0017453:	68 ac 16 02 c0       	push   0xc00216ac
c0017458:	e8 d9 46 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c001745d:	83 c4 10             	add    esp,0x10
c0017460:	90                   	nop
c0017461:	83 c4 14             	add    esp,0x14
c0017464:	5b                   	pop    ebx
c0017465:	5e                   	pop    esi
c0017466:	c3                   	ret    
c0017467:	90                   	nop

c0017468 <Process::Process(bool, char const*, Process*, char**)>:
c0017468:	56                   	push   esi
c0017469:	53                   	push   ebx
c001746a:	83 ec 14             	sub    esp,0x14
c001746d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017471:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0017475:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017479:	05 0c 02 00 00       	add    eax,0x20c
c001747e:	bb 07 00 00 00       	mov    ebx,0x7
c0017483:	89 c6                	mov    esi,eax
c0017485:	85 db                	test   ebx,ebx
c0017487:	78 12                	js     c001749b <Process::Process(bool, char const*, Process*, char**)+0x33>
c0017489:	83 ec 0c             	sub    esp,0xc
c001748c:	56                   	push   esi
c001748d:	e8 3e 76 00 00       	call   c001ead0 <ThreadControlBlock::ThreadControlBlock()>
c0017492:	83 c4 10             	add    esp,0x10
c0017495:	83 c6 63             	add    esi,0x63
c0017498:	4b                   	dec    ebx
c0017499:	eb ea                	jmp    c0017485 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001749b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001749f:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00174a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174aa:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c00174b3:	a1 e4 28 02 c0       	mov    eax,ds:0xc00228e4
c00174b8:	8d 50 01             	lea    edx,[eax+0x1]
c00174bb:	89 15 e4 28 02 c0    	mov    DWORD PTR ds:0xc00228e4,edx
c00174c1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00174c5:	89 02                	mov    DWORD PTR [edx],eax
c00174c7:	83 ec 0c             	sub    esp,0xc
c00174ca:	6a 10                	push   0x10
c00174cc:	e8 37 7d ff ff       	call   c000f208 <operator new(unsigned long)>
c00174d1:	83 c4 10             	add    esp,0x10
c00174d4:	89 c3                	mov    ebx,eax
c00174d6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00174db:	83 ec 08             	sub    esp,0x8
c00174de:	50                   	push   eax
c00174df:	53                   	push   ebx
c00174e0:	e8 b7 79 ff ff       	call   c000ee9c <VAS::VAS(bool)>
c00174e5:	83 c4 10             	add    esp,0x10
c00174e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174ec:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c00174f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00174f6:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0017500:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017504:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017508:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001750e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017512:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017518:	85 c0                	test   eax,eax
c001751a:	74 42                	je     c001755e <Process::Process(bool, char const*, Process*, char**)+0xf6>
c001751c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017520:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017526:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001752c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017530:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0017536:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001753a:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017540:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0017546:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001754a:	05 0c 01 00 00       	add    eax,0x10c
c001754f:	83 ec 08             	sub    esp,0x8
c0017552:	52                   	push   edx
c0017553:	50                   	push   eax
c0017554:	e8 4e 91 fe ff       	call   c00006a7 <strcpy>
c0017559:	83 c4 10             	add    esp,0x10
c001755c:	eb 5c                	jmp    c00175ba <Process::Process(bool, char const*, Process*, char**)+0x152>
c001755e:	83 ec 0c             	sub    esp,0xc
c0017561:	68 60 12 00 00       	push   0x1260
c0017566:	e8 9d 7c ff ff       	call   c000f208 <operator new(unsigned long)>
c001756b:	83 c4 10             	add    esp,0x10
c001756e:	89 c3                	mov    ebx,eax
c0017570:	83 ec 08             	sub    esp,0x8
c0017573:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0017577:	53                   	push   ebx
c0017578:	e8 ed 62 ff ff       	call   c000d86a <VgaText::VgaText(char const*)>
c001757d:	83 c4 10             	add    esp,0x10
c0017580:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017584:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001758a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001758e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0017594:	83 ec 0c             	sub    esp,0xc
c0017597:	50                   	push   eax
c0017598:	e8 ce 56 ff ff       	call   c000cc6b <addToTerminalCycle(VgaText*)>
c001759d:	83 c4 10             	add    esp,0x10
c00175a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175a4:	05 0c 01 00 00       	add    eax,0x10c
c00175a9:	83 ec 08             	sub    esp,0x8
c00175ac:	68 56 16 02 c0       	push   0xc0021656
c00175b1:	50                   	push   eax
c00175b2:	e8 f0 90 fe ff       	call   c00006a7 <strcpy>
c00175b7:	83 c4 10             	add    esp,0x10
c00175ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00175be:	83 c0 0c             	add    eax,0xc
c00175c1:	83 ec 08             	sub    esp,0x8
c00175c4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00175c8:	50                   	push   eax
c00175c9:	e8 d9 90 fe ff       	call   c00006a7 <strcpy>
c00175ce:	83 c4 10             	add    esp,0x10
c00175d1:	83 ec 08             	sub    esp,0x8
c00175d4:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00175d8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00175dc:	e8 75 fc ff ff       	call   c0017256 <Process::addArgs(char**)>
c00175e1:	83 c4 10             	add    esp,0x10
c00175e4:	90                   	nop
c00175e5:	83 c4 14             	add    esp,0x14
c00175e8:	5b                   	pop    ebx
c00175e9:	5e                   	pop    esi
c00175ea:	c3                   	ret    

c00175eb <disableIRQs()>:
c00175eb:	fa                   	cli    
c00175ec:	ff 05 6c 42 02 c0    	inc    DWORD PTR ds:0xc002426c
c00175f2:	c3                   	ret    

c00175f3 <getIRQNestingLevel()>:
c00175f3:	a1 6c 42 02 c0       	mov    eax,ds:0xc002426c
c00175f8:	c3                   	ret    

c00175f9 <enableIRQs()>:
c00175f9:	a1 6c 42 02 c0       	mov    eax,ds:0xc002426c
c00175fe:	48                   	dec    eax
c00175ff:	a3 6c 42 02 c0       	mov    ds:0xc002426c,eax
c0017604:	75 01                	jne    c0017607 <enableIRQs()+0xe>
c0017606:	fb                   	sti    
c0017607:	c3                   	ret    

c0017608 <lockScheduler()>:
c0017608:	eb e1                	jmp    c00175eb <disableIRQs()>

c001760a <unlockScheduler()>:
c001760a:	eb ed                	jmp    c00175f9 <enableIRQs()>

c001760c <userModeEntryPoint(void*)>:
c001760c:	83 ec 0c             	sub    esp,0xc
c001760f:	e8 f6 ff ff ff       	call   c001760a <unlockScheduler()>
c0017614:	fb                   	sti    
c0017615:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001761a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001761d:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0017623:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017627:	83 c4 0c             	add    esp,0xc
c001762a:	e9 b7 8b fe ff       	jmp    c00001e6 <goToUsermode>

c001762f <lockStuff()>:
c001762f:	e8 b7 ff ff ff       	call   c00175eb <disableIRQs()>
c0017634:	ff 05 68 42 02 c0    	inc    DWORD PTR ds:0xc0024268
c001763a:	c3                   	ret    

c001763b <taskStartupFunction>:
c001763b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017640:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0017643:	c3                   	ret    

c0017644 <updateTimeUsed()>:
c0017644:	57                   	push   edi
c0017645:	56                   	push   esi
c0017646:	53                   	push   ebx
c0017647:	e8 1e c9 ff ff       	call   c0013f6a <thisCPU()>
c001764c:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0017653:	74 49                	je     c001769e <updateTimeUsed()+0x5a>
c0017655:	0f 31                	rdtsc  
c0017657:	89 c1                	mov    ecx,eax
c0017659:	a3 a8 42 02 c0       	mov    ds:0xc00242a8,eax
c001765e:	2b 0d 98 42 02 c0    	sub    ecx,DWORD PTR ds:0xc0024298
c0017664:	89 d3                	mov    ebx,edx
c0017666:	89 0d a0 42 02 c0    	mov    DWORD PTR ds:0xc00242a0,ecx
c001766c:	1b 1d 9c 42 02 c0    	sbb    ebx,DWORD PTR ds:0xc002429c
c0017672:	a3 98 42 02 c0       	mov    ds:0xc0024298,eax
c0017677:	89 1d a4 42 02 c0    	mov    DWORD PTR ds:0xc00242a4,ebx
c001767d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017682:	89 15 ac 42 02 c0    	mov    DWORD PTR ds:0xc00242ac,edx
c0017688:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001768b:	89 15 9c 42 02 c0    	mov    DWORD PTR ds:0xc002429c,edx
c0017691:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0017694:	01 f1                	add    ecx,esi
c0017696:	11 fb                	adc    ebx,edi
c0017698:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001769b:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001769e:	5b                   	pop    ebx
c001769f:	5e                   	pop    esi
c00176a0:	5f                   	pop    edi
c00176a1:	c3                   	ret    

c00176a2 <switchToThread(ThreadControlBlock*)>:
c00176a2:	53                   	push   ebx
c00176a3:	83 ec 08             	sub    esp,0x8
c00176a6:	a1 68 42 02 c0       	mov    eax,ds:0xc0024268
c00176ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00176af:	85 c0                	test   eax,eax
c00176b1:	75 30                	jne    c00176e3 <switchToThread(ThreadControlBlock*)+0x41>
c00176b3:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c00176b6:	3c ff                	cmp    al,0xff
c00176b8:	74 25                	je     c00176df <switchToThread(ThreadControlBlock*)+0x3d>
c00176ba:	0f b6 d0             	movzx  edx,al
c00176bd:	b8 84 03 00 00       	mov    eax,0x384
c00176c2:	29 d0                	sub    eax,edx
c00176c4:	c1 e0 10             	shl    eax,0x10
c00176c7:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00176ca:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00176cd:	e8 72 ff ff ff       	call   c0017644 <updateTimeUsed()>
c00176d2:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00176d6:	83 c4 08             	add    esp,0x8
c00176d9:	5b                   	pop    ebx
c00176da:	e9 40 8b fe ff       	jmp    c000021f <switchToThreadASM>
c00176df:	31 c0                	xor    eax,eax
c00176e1:	eb e7                	jmp    c00176ca <switchToThread(ThreadControlBlock*)+0x28>
c00176e3:	c7 05 64 42 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024264,0x1
c00176ed:	83 c4 08             	add    esp,0x8
c00176f0:	5b                   	pop    ebx
c00176f1:	c3                   	ret    

c00176f2 <Semaphore::Semaphore(int)>:
c00176f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00176f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00176fa:	89 10                	mov    DWORD PTR [eax],edx
c00176fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017700:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017707:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001770b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017712:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017716:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001771d:	90                   	nop
c001771e:	c3                   	ret    
c001771f:	90                   	nop

c0017720 <Mutex::Mutex()>:
c0017720:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017724:	6a 01                	push   0x1
c0017726:	50                   	push   eax
c0017727:	e8 c6 ff ff ff       	call   c00176f2 <Semaphore::Semaphore(int)>
c001772c:	83 c4 08             	add    esp,0x8
c001772f:	90                   	nop
c0017730:	c3                   	ret    
c0017731:	90                   	nop

c0017732 <Process::createThread(void (*)(void*), void*, int)>:
c0017732:	55                   	push   ebp
c0017733:	31 c9                	xor    ecx,ecx
c0017735:	57                   	push   edi
c0017736:	56                   	push   esi
c0017737:	53                   	push   ebx
c0017738:	83 ec 1c             	sub    esp,0x1c
c001773b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001773f:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0017746:	89 f2                	mov    edx,esi
c0017748:	0f b7 c2             	movzx  eax,dx
c001774b:	83 e2 01             	and    edx,0x1
c001774e:	74 14                	je     c0017764 <Process::createThread(void (*)(void*), void*, int)+0x32>
c0017750:	d1 f8                	sar    eax,1
c0017752:	41                   	inc    ecx
c0017753:	89 c2                	mov    edx,eax
c0017755:	83 f9 10             	cmp    ecx,0x10
c0017758:	75 ee                	jne    c0017748 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001775a:	83 c4 1c             	add    esp,0x1c
c001775d:	31 c0                	xor    eax,eax
c001775f:	5b                   	pop    ebx
c0017760:	5e                   	pop    esi
c0017761:	5f                   	pop    edi
c0017762:	5d                   	pop    ebp
c0017763:	c3                   	ret    
c0017764:	83 ec 08             	sub    esp,0x8
c0017767:	b8 01 00 00 00       	mov    eax,0x1
c001776c:	d3 e0                	shl    eax,cl
c001776e:	09 c6                	or     esi,eax
c0017770:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0017776:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001777d:	8d 34 09             	lea    esi,[ecx+ecx*1]
c0017780:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0017783:	01 ce                	add    esi,ecx
c0017785:	89 f0                	mov    eax,esi
c0017787:	c1 e0 05             	shl    eax,0x5
c001778a:	01 c6                	add    esi,eax
c001778c:	8d 04 33             	lea    eax,[ebx+esi*1]
c001778f:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0017795:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001779b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001779f:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c00177a5:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c00177ab:	89 ca                	mov    edx,ecx
c00177ad:	f7 da                	neg    edx
c00177af:	c1 e2 15             	shl    edx,0x15
c00177b2:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00177b8:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00177be:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00177c2:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00177cc:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c00177d2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00177d6:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00177dc:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00177e6:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00177f0:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c00177f7:	50                   	push   eax
c00177f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00177fc:	68 88 42 02 c0       	push   0xc0024288
c0017801:	e8 ea 70 00 00       	call   c001e8f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017806:	83 c4 10             	add    esp,0x10
c0017809:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001780d:	83 c4 1c             	add    esp,0x1c
c0017810:	5b                   	pop    ebx
c0017811:	5e                   	pop    esi
c0017812:	5f                   	pop    edi
c0017813:	5d                   	pop    ebp
c0017814:	c3                   	ret    
c0017815:	90                   	nop

c0017816 <Process::createUserThread()>:
c0017816:	83 ec 0c             	sub    esp,0xc
c0017819:	68 80 00 00 00       	push   0x80
c001781e:	6a 00                	push   0x0
c0017820:	68 0c 76 01 c0       	push   0xc001760c
c0017825:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017829:	e8 04 ff ff ff       	call   c0017732 <Process::createThread(void (*)(void*), void*, int)>
c001782e:	83 c4 1c             	add    esp,0x1c
c0017831:	c3                   	ret    

c0017832 <setupMultitasking(void (*)())>:
c0017832:	56                   	push   esi
c0017833:	53                   	push   ebx
c0017834:	53                   	push   ebx
c0017835:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017839:	eb 10                	jmp    c001784b <setupMultitasking(void (*)())+0x19>
c001783b:	83 ec 0c             	sub    esp,0xc
c001783e:	68 88 42 02 c0       	push   0xc0024288
c0017843:	e8 f2 6f 00 00       	call   c001e83a <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0017848:	83 c4 10             	add    esp,0x10
c001784b:	83 ec 0c             	sub    esp,0xc
c001784e:	68 88 42 02 c0       	push   0xc0024288
c0017853:	e8 c6 6f 00 00       	call   c001e81e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017858:	83 c4 10             	add    esp,0x10
c001785b:	84 c0                	test   al,al
c001785d:	74 dc                	je     c001783b <setupMultitasking(void (*)())+0x9>
c001785f:	83 ec 0c             	sub    esp,0xc
c0017862:	68 3b 07 00 00       	push   0x73b
c0017867:	e8 9c 79 ff ff       	call   c000f208 <operator new(unsigned long)>
c001786c:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017873:	89 c3                	mov    ebx,eax
c0017875:	6a 00                	push   0x0
c0017877:	68 5a 16 02 c0       	push   0xc002165a
c001787c:	6a 01                	push   0x1
c001787e:	50                   	push   eax
c001787f:	e8 e4 fb ff ff       	call   c0017468 <Process::Process(bool, char const*, Process*, char**)>
c0017884:	83 c4 18             	add    esp,0x18
c0017887:	89 1d 94 42 02 c0    	mov    DWORD PTR ds:0xc0024294,ebx
c001788d:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c0017893:	68 d4 16 02 c0       	push   0xc00216d4
c0017898:	e8 99 42 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c001789d:	58                   	pop    eax
c001789e:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c00178a4:	e8 36 5b ff ff       	call   c000d3df <setActiveTerminal(VgaText*)>
c00178a9:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c00178b1:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c00178b7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00178ba:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c00178c4:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00178ca:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c00178d0:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c00178da:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c00178e4:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c00178ee:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c00178f4:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c00178fa:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0017904:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001790a:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0017914:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001791a:	5a                   	pop    edx
c001791b:	59                   	pop    ecx
c001791c:	68 56 16 02 c0       	push   0xc0021656
c0017921:	50                   	push   eax
c0017922:	e8 80 8d fe ff       	call   c00006a7 <strcpy>
c0017927:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001792e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0017932:	83 c4 14             	add    esp,0x14
c0017935:	5b                   	pop    ebx
c0017936:	5e                   	pop    esi
c0017937:	e9 d5 88 fe ff       	jmp    c0000211 <switchToThreadASMFirstTime>

c001793c <schedule()>:
c001793c:	a1 68 42 02 c0       	mov    eax,ds:0xc0024268
c0017941:	85 c0                	test   eax,eax
c0017943:	74 0b                	je     c0017950 <schedule()+0x14>
c0017945:	c7 05 64 42 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0024264,0x1
c001794f:	c3                   	ret    
c0017950:	53                   	push   ebx
c0017951:	83 ec 14             	sub    esp,0x14
c0017954:	68 88 42 02 c0       	push   0xc0024288
c0017959:	e8 c0 6e 00 00       	call   c001e81e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001795e:	83 c4 10             	add    esp,0x10
c0017961:	84 c0                	test   al,al
c0017963:	75 38                	jne    c001799d <schedule()+0x61>
c0017965:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001796a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001796d:	4a                   	dec    edx
c001796e:	74 32                	je     c00179a2 <schedule()+0x66>
c0017970:	83 ec 0c             	sub    esp,0xc
c0017973:	68 88 42 02 c0       	push   0xc0024288
c0017978:	e8 99 6e 00 00       	call   c001e816 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001797d:	c7 04 24 88 42 02 c0 	mov    DWORD PTR [esp],0xc0024288
c0017984:	89 c3                	mov    ebx,eax
c0017986:	e8 af 6e 00 00       	call   c001e83a <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001798b:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0017992:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017995:	e8 08 fd ff ff       	call   c00176a2 <switchToThread(ThreadControlBlock*)>
c001799a:	83 c4 10             	add    esp,0x10
c001799d:	83 c4 08             	add    esp,0x8
c00179a0:	5b                   	pop    ebx
c00179a1:	c3                   	ret    
c00179a2:	83 ec 08             	sub    esp,0x8
c00179a5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00179ac:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c00179b2:	68 88 42 02 c0       	push   0xc0024288
c00179b7:	e8 34 6f 00 00       	call   c001e8f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00179bc:	83 c4 10             	add    esp,0x10
c00179bf:	eb af                	jmp    c0017970 <schedule()+0x34>

c00179c1 <unlockStuff()>:
c00179c1:	a1 68 42 02 c0       	mov    eax,ds:0xc0024268
c00179c6:	48                   	dec    eax
c00179c7:	a3 68 42 02 c0       	mov    ds:0xc0024268,eax
c00179cc:	75 09                	jne    c00179d7 <unlockStuff()+0x16>
c00179ce:	a1 64 42 02 c0       	mov    eax,ds:0xc0024264
c00179d3:	85 c0                	test   eax,eax
c00179d5:	75 05                	jne    c00179dc <unlockStuff()+0x1b>
c00179d7:	e9 1d fc ff ff       	jmp    c00175f9 <enableIRQs()>
c00179dc:	83 ec 0c             	sub    esp,0xc
c00179df:	c7 05 64 42 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024264,0x0
c00179e9:	e8 4e ff ff ff       	call   c001793c <schedule()>
c00179ee:	83 c4 0c             	add    esp,0xc
c00179f1:	e9 03 fc ff ff       	jmp    c00175f9 <enableIRQs()>

c00179f6 <forkProcess(regs*)>:
c00179f6:	56                   	push   esi
c00179f7:	53                   	push   ebx
c00179f8:	50                   	push   eax
c00179f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00179fe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017a01:	66 83 b8 24 05 00 00 01 	cmp    WORD PTR [eax+0x524],0x1
c0017a09:	0f 85 3e 01 00 00    	jne    c0017b4d <forkProcess(regs*)+0x157>
c0017a0f:	e8 1b fc ff ff       	call   c001762f <lockStuff()>
c0017a14:	83 ec 0c             	sub    esp,0xc
c0017a17:	68 3b 07 00 00       	push   0x73b
c0017a1c:	e8 e7 77 ff ff       	call   c000f208 <operator new(unsigned long)>
c0017a21:	89 c3                	mov    ebx,eax
c0017a23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a28:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017a2b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0017a32:	50                   	push   eax
c0017a33:	83 c0 0c             	add    eax,0xc
c0017a36:	50                   	push   eax
c0017a37:	6a 00                	push   0x0
c0017a39:	53                   	push   ebx
c0017a3a:	e8 29 fa ff ff       	call   c0017468 <Process::Process(bool, char const*, Process*, char**)>
c0017a3f:	8b b3 32 05 00 00    	mov    esi,DWORD PTR [ebx+0x532]
c0017a45:	83 c4 20             	add    esp,0x20
c0017a48:	85 f6                	test   esi,esi
c0017a4a:	74 16                	je     c0017a62 <forkProcess(regs*)+0x6c>
c0017a4c:	83 ec 0c             	sub    esp,0xc
c0017a4f:	56                   	push   esi
c0017a50:	e8 ed 6a ff ff       	call   c000e542 <VAS::~VAS()>
c0017a55:	59                   	pop    ecx
c0017a56:	58                   	pop    eax
c0017a57:	6a 10                	push   0x10
c0017a59:	56                   	push   esi
c0017a5a:	e8 b8 77 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c0017a5f:	83 c4 10             	add    esp,0x10
c0017a62:	83 ec 0c             	sub    esp,0xc
c0017a65:	66 c7 83 24 05 00 00 01 00 	mov    WORD PTR [ebx+0x524],0x1
c0017a6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a73:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017a76:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0017a7c:	89 83 2e 05 00 00    	mov    DWORD PTR [ebx+0x52e],eax
c0017a82:	6a 10                	push   0x10
c0017a84:	e8 7f 77 ff ff       	call   c000f208 <operator new(unsigned long)>
c0017a89:	59                   	pop    ecx
c0017a8a:	89 c6                	mov    esi,eax
c0017a8c:	58                   	pop    eax
c0017a8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a92:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017a95:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0017a9b:	56                   	push   esi
c0017a9c:	e8 c3 6f ff ff       	call   c000ea64 <VAS::VAS(VAS*)>
c0017aa1:	89 b3 32 05 00 00    	mov    DWORD PTR [ebx+0x532],esi
c0017aa7:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0017aaa:	8b 13                	mov    edx,DWORD PTR [ebx]
c0017aac:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0017ab2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ab7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017aba:	89 83 44 02 00 00    	mov    DWORD PTR [ebx+0x244],eax
c0017ac0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ac5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ac8:	89 83 10 02 00 00    	mov    DWORD PTR [ebx+0x210],eax
c0017ace:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ad3:	8a 40 44             	mov    al,BYTE PTR [eax+0x44]
c0017ad6:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0017ae0:	88 83 50 02 00 00    	mov    BYTE PTR [ebx+0x250],al
c0017ae6:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0017aec:	81 c3 0c 02 00 00    	add    ebx,0x20c
c0017af2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017af7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017afa:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0017b01:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0017b04:	c7 43 0c 01 00 00 00 	mov    DWORD PTR [ebx+0xc],0x1
c0017b0b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0017b12:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0017b19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017b1e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017b21:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0017b24:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017b29:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0017b2c:	58                   	pop    eax
c0017b2d:	5a                   	pop    edx
c0017b2e:	53                   	push   ebx
c0017b2f:	68 88 42 02 c0       	push   0xc0024288
c0017b34:	e8 b7 6d 00 00       	call   c001e8f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017b39:	e8 83 fe ff ff       	call   c00179c1 <unlockStuff()>
c0017b3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017b43:	83 c4 10             	add    esp,0x10
c0017b46:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017b49:	5a                   	pop    edx
c0017b4a:	5b                   	pop    ebx
c0017b4b:	5e                   	pop    esi
c0017b4c:	c3                   	ret    
c0017b4d:	83 ec 0c             	sub    esp,0xc
c0017b50:	68 08 17 02 c0       	push   0xc0021708
c0017b55:	e8 dc 3f ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0017b5a:	83 c4 10             	add    esp,0x10
c0017b5d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017b62:	eb e5                	jmp    c0017b49 <forkProcess(regs*)+0x153>

c0017b64 <Semaphore::tryAcquire()>:
c0017b64:	83 ec 0c             	sub    esp,0xc
c0017b67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b6b:	e8 bf fa ff ff       	call   c001762f <lockStuff()>
c0017b70:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0017b73:	3b 10                	cmp    edx,DWORD PTR [eax]
c0017b75:	7c 0b                	jl     c0017b82 <Semaphore::tryAcquire()+0x1e>
c0017b77:	e8 45 fe ff ff       	call   c00179c1 <unlockStuff()>
c0017b7c:	31 c0                	xor    eax,eax
c0017b7e:	83 c4 0c             	add    esp,0xc
c0017b81:	c3                   	ret    
c0017b82:	42                   	inc    edx
c0017b83:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017b86:	e8 36 fe ff ff       	call   c00179c1 <unlockStuff()>
c0017b8b:	b0 01                	mov    al,0x1
c0017b8d:	83 c4 0c             	add    esp,0xc
c0017b90:	c3                   	ret    
c0017b91:	90                   	nop

c0017b92 <Semaphore::assertLocked(char const*)>:
c0017b92:	83 ec 0c             	sub    esp,0xc
c0017b95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b99:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017b9d:	e8 8d fa ff ff       	call   c001762f <lockStuff()>
c0017ba2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017ba4:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c0017ba7:	7c 08                	jl     c0017bb1 <Semaphore::assertLocked(char const*)+0x1f>
c0017ba9:	83 c4 0c             	add    esp,0xc
c0017bac:	e9 10 fe ff ff       	jmp    c00179c1 <unlockStuff()>
c0017bb1:	83 ec 0c             	sub    esp,0xc
c0017bb4:	52                   	push   edx
c0017bb5:	e8 9a 40 ff ff       	call   c000bc54 <panic(char const*)>
c0017bba:	83 c4 10             	add    esp,0x10
c0017bbd:	83 c4 0c             	add    esp,0xc
c0017bc0:	e9 fc fd ff ff       	jmp    c00179c1 <unlockStuff()>

c0017bc5 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0017bc5:	83 ec 0c             	sub    esp,0xc
c0017bc8:	e8 26 fa ff ff       	call   c00175f3 <getIRQNestingLevel()>
c0017bcd:	83 ec 08             	sub    esp,0x8
c0017bd0:	50                   	push   eax
c0017bd1:	68 34 17 02 c0       	push   0xc0021734
c0017bd6:	e8 5b 3f ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0017bdb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017bdf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017be4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017be7:	e8 50 fd ff ff       	call   c001793c <schedule()>
c0017bec:	e8 19 fa ff ff       	call   c001760a <unlockScheduler()>
c0017bf1:	e8 fd f9 ff ff       	call   c00175f3 <getIRQNestingLevel()>
c0017bf6:	5a                   	pop    edx
c0017bf7:	59                   	pop    ecx
c0017bf8:	50                   	push   eax
c0017bf9:	68 68 17 02 c0       	push   0xc0021768
c0017bfe:	e8 33 3f ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0017c03:	83 c4 1c             	add    esp,0x1c
c0017c06:	c3                   	ret    

c0017c07 <blockTask(TaskState)>:
c0017c07:	83 ec 0c             	sub    esp,0xc
c0017c0a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017c0e:	e8 f5 f9 ff ff       	call   c0017608 <lockScheduler()>
c0017c13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c18:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0017c1b:	e8 1c fd ff ff       	call   c001793c <schedule()>
c0017c20:	83 c4 0c             	add    esp,0xc
c0017c23:	e9 e2 f9 ff ff       	jmp    c001760a <unlockScheduler()>

c0017c28 <waitTask(int, int*, int)>:
c0017c28:	83 ec 18             	sub    esp,0x18
c0017c2b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c30:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c34:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0017c37:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c40:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0017c43:	6a 07                	push   0x7
c0017c45:	e8 bd ff ff ff       	call   c0017c07 <blockTask(TaskState)>
c0017c4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c4f:	83 c4 10             	add    esp,0x10
c0017c52:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0017c55:	85 d2                	test   edx,edx
c0017c57:	74 0a                	je     c0017c63 <waitTask(int, int*, int)+0x3b>
c0017c59:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0017c5c:	89 02                	mov    DWORD PTR [edx],eax
c0017c5e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017c63:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0017c66:	83 c4 0c             	add    esp,0xc
c0017c69:	c3                   	ret    

c0017c6a <nanoSleepUntil(unsigned long long)>:
c0017c6a:	83 ec 0c             	sub    esp,0xc
c0017c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c71:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c75:	3b 05 b0 34 02 c0    	cmp    eax,DWORD PTR ds:0xc00234b0
c0017c7b:	89 d1                	mov    ecx,edx
c0017c7d:	1b 0d b4 34 02 c0    	sbb    ecx,DWORD PTR ds:0xc00234b4
c0017c83:	73 04                	jae    c0017c89 <nanoSleepUntil(unsigned long long)+0x1f>
c0017c85:	83 c4 0c             	add    esp,0xc
c0017c88:	c3                   	ret    
c0017c89:	e8 a1 f9 ff ff       	call   c001762f <lockStuff()>
c0017c8e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017c94:	83 ec 08             	sub    esp,0x8
c0017c97:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c0017c9a:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c0017c9d:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c0017ca3:	68 7c 42 02 c0       	push   0xc002427c
c0017ca8:	e8 43 6c 00 00       	call   c001e8f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017cad:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0017cb4:	e8 4e ff ff ff       	call   c0017c07 <blockTask(TaskState)>
c0017cb9:	83 c4 1c             	add    esp,0x1c
c0017cbc:	e9 00 fd ff ff       	jmp    c00179c1 <unlockStuff()>

c0017cc1 <nanoSleep(unsigned long long)>:
c0017cc1:	a1 b0 34 02 c0       	mov    eax,ds:0xc00234b0
c0017cc6:	8b 15 b4 34 02 c0    	mov    edx,DWORD PTR ds:0xc00234b4
c0017ccc:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0017cd0:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0017cd4:	eb 94                	jmp    c0017c6a <nanoSleepUntil(unsigned long long)>

c0017cd6 <sleep(unsigned long long)>:
c0017cd6:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0017cde:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0017ce3:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0017ce7:	01 ca                	add    edx,ecx
c0017ce9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017ced:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0017cf1:	eb ce                	jmp    c0017cc1 <nanoSleep(unsigned long long)>
c0017cf3:	90                   	nop

c0017cf4 <Semaphore::acquire()>:
c0017cf4:	83 ec 0c             	sub    esp,0xc
c0017cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cfb:	e8 2f f9 ff ff       	call   c001762f <lockStuff()>
c0017d00:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0017d03:	3b 10                	cmp    edx,DWORD PTR [eax]
c0017d05:	7d 0c                	jge    c0017d13 <Semaphore::acquire()+0x1f>
c0017d07:	42                   	inc    edx
c0017d08:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017d0b:	83 c4 0c             	add    esp,0xc
c0017d0e:	e9 ae fc ff ff       	jmp    c00179c1 <unlockStuff()>
c0017d13:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017d19:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c0017d20:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017d23:	85 d2                	test   edx,edx
c0017d25:	74 2a                	je     c0017d51 <Semaphore::acquire()+0x5d>
c0017d27:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0017d2a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017d30:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c0017d33:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017d39:	83 ec 0c             	sub    esp,0xc
c0017d3c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017d3f:	6a 05                	push   0x5
c0017d41:	e8 c1 fe ff ff       	call   c0017c07 <blockTask(TaskState)>
c0017d46:	83 c4 10             	add    esp,0x10
c0017d49:	83 c4 0c             	add    esp,0xc
c0017d4c:	e9 70 fc ff ff       	jmp    c00179c1 <unlockStuff()>
c0017d51:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017d57:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017d5a:	eb d7                	jmp    c0017d33 <Semaphore::acquire()+0x3f>

c0017d5c <execveProcess(char const*, char* const*, char* const*)>:
c0017d5c:	56                   	push   esi
c0017d5d:	53                   	push   ebx
c0017d5e:	50                   	push   eax
c0017d5f:	e8 cb f8 ff ff       	call   c001762f <lockStuff()>
c0017d64:	83 ec 0c             	sub    esp,0xc
c0017d67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017d6c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017d6f:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c0017d75:	68 3b 07 00 00       	push   0x73b
c0017d7a:	e8 89 74 ff ff       	call   c000f208 <operator new(unsigned long)>
c0017d7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017d83:	89 c3                	mov    ebx,eax
c0017d85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017d8a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017d8d:	ff b0 2a 05 00 00    	push   DWORD PTR [eax+0x52a]
c0017d93:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0017d97:	53                   	push   ebx
c0017d98:	e8 13 f5 ff ff       	call   c00172b0 <Process::Process(char const*, Process*, char**)>
c0017d9d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017da2:	83 c4 20             	add    esp,0x20
c0017da5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017da8:	85 f6                	test   esi,esi
c0017daa:	8b 00                	mov    eax,DWORD PTR [eax]
c0017dac:	89 03                	mov    DWORD PTR [ebx],eax
c0017dae:	74 06                	je     c0017db6 <execveProcess(char const*, char* const*, char* const*)+0x5a>
c0017db0:	89 b3 26 05 00 00    	mov    DWORD PTR [ebx+0x526],esi
c0017db6:	83 ec 0c             	sub    esp,0xc
c0017db9:	53                   	push   ebx
c0017dba:	e8 57 fa ff ff       	call   c0017816 <Process::createUserThread()>
c0017dbf:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0017dc6:	e8 3c fe ff ff       	call   c0017c07 <blockTask(TaskState)>
c0017dcb:	e8 f1 fb ff ff       	call   c00179c1 <unlockStuff()>
c0017dd0:	e8 33 f8 ff ff       	call   c0017608 <lockScheduler()>
c0017dd5:	e8 62 fb ff ff       	call   c001793c <schedule()>
c0017dda:	e8 2b f8 ff ff       	call   c001760a <unlockScheduler()>
c0017ddf:	83 c4 14             	add    esp,0x14
c0017de2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017de7:	5b                   	pop    ebx
c0017de8:	5e                   	pop    esi
c0017de9:	c3                   	ret    

c0017dea <taskReturned>:
c0017dea:	83 ec 0c             	sub    esp,0xc
c0017ded:	e8 18 f8 ff ff       	call   c001760a <unlockScheduler()>
c0017df2:	83 ec 08             	sub    esp,0x8
c0017df5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017dfa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0017dfd:	83 c0 0c             	add    eax,0xc
c0017e00:	50                   	push   eax
c0017e01:	68 61 16 02 c0       	push   0xc0021661
c0017e06:	e8 2b 3d ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0017e0b:	83 c4 10             	add    esp,0x10
c0017e0e:	83 ec 0c             	sub    esp,0xc
c0017e11:	6a 02                	push   0x2
c0017e13:	e8 ef fd ff ff       	call   c0017c07 <blockTask(TaskState)>
c0017e18:	e8 eb f7 ff ff       	call   c0017608 <lockScheduler()>
c0017e1d:	e8 1a fb ff ff       	call   c001793c <schedule()>
c0017e22:	e8 e3 f7 ff ff       	call   c001760a <unlockScheduler()>
c0017e27:	83 c4 10             	add    esp,0x10
c0017e2a:	eb e2                	jmp    c0017e0e <taskReturned+0x24>

c0017e2c <unblockTask(ThreadControlBlock*)>:
c0017e2c:	53                   	push   ebx
c0017e2d:	83 ec 08             	sub    esp,0x8
c0017e30:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017e34:	e8 cf f7 ff ff       	call   c0017608 <lockScheduler()>
c0017e39:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017e3c:	85 c0                	test   eax,eax
c0017e3e:	74 5c                	je     c0017e9c <unblockTask(ThreadControlBlock*)+0x70>
c0017e40:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0017e43:	48                   	dec    eax
c0017e44:	74 31                	je     c0017e77 <unblockTask(ThreadControlBlock*)+0x4b>
c0017e46:	83 ec 0c             	sub    esp,0xc
c0017e49:	68 88 42 02 c0       	push   0xc0024288
c0017e4e:	e8 c3 69 00 00       	call   c001e816 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017e53:	83 c4 10             	add    esp,0x10
c0017e56:	85 c0                	test   eax,eax
c0017e58:	75 17                	jne    c0017e71 <unblockTask(ThreadControlBlock*)+0x45>
c0017e5a:	eb 65                	jmp    c0017ec1 <unblockTask(ThreadControlBlock*)+0x95>
c0017e5c:	83 ec 08             	sub    esp,0x8
c0017e5f:	50                   	push   eax
c0017e60:	68 88 42 02 c0       	push   0xc0024288
c0017e65:	e8 7e 6a 00 00       	call   c001e8e8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0017e6a:	83 c4 10             	add    esp,0x10
c0017e6d:	85 c0                	test   eax,eax
c0017e6f:	74 50                	je     c0017ec1 <unblockTask(ThreadControlBlock*)+0x95>
c0017e71:	39 c3                	cmp    ebx,eax
c0017e73:	75 e7                	jne    c0017e5c <unblockTask(ThreadControlBlock*)+0x30>
c0017e75:	eb 1c                	jmp    c0017e93 <unblockTask(ThreadControlBlock*)+0x67>
c0017e77:	83 ec 0c             	sub    esp,0xc
c0017e7a:	68 58 18 02 c0       	push   0xc0021858
c0017e7f:	e8 b2 3c ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0017e84:	c7 04 24 e4 17 02 c0 	mov    DWORD PTR [esp],0xc00217e4
c0017e8b:	e8 a6 3c ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0017e90:	83 c4 10             	add    esp,0x10
c0017e93:	83 c4 08             	add    esp,0x8
c0017e96:	5b                   	pop    ebx
c0017e97:	e9 6e f7 ff ff       	jmp    c001760a <unlockScheduler()>
c0017e9c:	83 ec 0c             	sub    esp,0xc
c0017e9f:	68 9c 17 02 c0       	push   0xc002179c
c0017ea4:	e8 8d 3c ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0017ea9:	c7 04 24 e4 17 02 c0 	mov    DWORD PTR [esp],0xc00217e4
c0017eb0:	e8 81 3c ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0017eb5:	83 c4 10             	add    esp,0x10
c0017eb8:	83 c4 08             	add    esp,0x8
c0017ebb:	5b                   	pop    ebx
c0017ebc:	e9 49 f7 ff ff       	jmp    c001760a <unlockScheduler()>
c0017ec1:	83 ec 08             	sub    esp,0x8
c0017ec4:	53                   	push   ebx
c0017ec5:	68 88 42 02 c0       	push   0xc0024288
c0017eca:	e8 21 6a 00 00       	call   c001e8f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0017ecf:	83 c4 10             	add    esp,0x10
c0017ed2:	83 c4 08             	add    esp,0x8
c0017ed5:	5b                   	pop    ebx
c0017ed6:	e9 2f f7 ff ff       	jmp    c001760a <unlockScheduler()>

c0017edb <cleanupTerminatedTask(ThreadControlBlock*)>:
c0017edb:	55                   	push   ebp
c0017edc:	57                   	push   edi
c0017edd:	56                   	push   esi
c0017ede:	53                   	push   ebx
c0017edf:	83 ec 1c             	sub    esp,0x1c
c0017ee2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0017ee6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017ee9:	8b 88 36 05 00 00    	mov    ecx,DWORD PTR [eax+0x536]
c0017eef:	85 c9                	test   ecx,ecx
c0017ef1:	7e 20                	jle    c0017f13 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c0017ef3:	31 f6                	xor    esi,esi
c0017ef5:	83 ec 0c             	sub    esp,0xc
c0017ef8:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c0017eff:	46                   	inc    esi
c0017f00:	e8 3c 42 ff ff       	call   c000c141 <free>
c0017f05:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017f08:	83 c4 10             	add    esp,0x10
c0017f0b:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c0017f11:	7f e2                	jg     c0017ef5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c0017f13:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0017f1d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0017f22:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0017f25:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017f28:	d3 c0                	rol    eax,cl
c0017f2a:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c0017f31:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017f34:	89 f7                	mov    edi,esi
c0017f36:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c0017f3e:	0f 85 4f 01 00 00    	jne    c0018093 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b8>
c0017f44:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0017f4a:	85 c0                	test   eax,eax
c0017f4c:	0f 84 aa 00 00 00    	je     c0017ffc <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c0017f52:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c0017f55:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017f59:	31 c9                	xor    ecx,ecx
c0017f5b:	eb 10                	jmp    c0017f6d <cleanupTerminatedTask(ThreadControlBlock*)+0x92>
c0017f5d:	41                   	inc    ecx
c0017f5e:	83 f9 10             	cmp    ecx,0x10
c0017f61:	0f 84 95 00 00 00    	je     c0017ffc <cleanupTerminatedTask(ThreadControlBlock*)+0x121>
c0017f67:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0017f6d:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c0017f74:	d3 fa                	sar    edx,cl
c0017f76:	83 e2 01             	and    edx,0x1
c0017f79:	74 e2                	je     c0017f5d <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0017f7b:	8d 14 09             	lea    edx,[ecx+ecx*1]
c0017f7e:	01 ca                	add    edx,ecx
c0017f80:	89 d5                	mov    ebp,edx
c0017f82:	c1 e5 05             	shl    ebp,0x5
c0017f85:	01 ea                	add    edx,ebp
c0017f87:	01 d0                	add    eax,edx
c0017f89:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0017f8f:	83 fd 07             	cmp    ebp,0x7
c0017f92:	75 c9                	jne    c0017f5d <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0017f94:	05 40 02 00 00       	add    eax,0x240
c0017f99:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c0017f9c:	83 fd ff             	cmp    ebp,0xffffffff
c0017f9f:	0f 8c 01 01 00 00    	jl     c00180a6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cb>
c0017fa5:	0f 84 b2 01 00 00    	je     c001815d <cleanupTerminatedTask(ThreadControlBlock*)+0x282>
c0017fab:	85 ed                	test   ebp,ebp
c0017fad:	0f 84 99 01 00 00    	je     c001814c <cleanupTerminatedTask(ThreadControlBlock*)+0x271>
c0017fb3:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0017fb5:	75 a6                	jne    c0017f5d <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c0017fb7:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0017fbd:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017fc1:	01 d0                	add    eax,edx
c0017fc3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0017fc7:	83 ec 0c             	sub    esp,0xc
c0017fca:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0017fd0:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0017fd3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0017fd9:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0017fe0:	50                   	push   eax
c0017fe1:	e8 46 fe ff ff       	call   c0017e2c <unblockTask(ThreadControlBlock*)>
c0017fe6:	83 c4 10             	add    esp,0x10
c0017fe9:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0017fec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017ff0:	89 f7                	mov    edi,esi
c0017ff2:	41                   	inc    ecx
c0017ff3:	83 f9 10             	cmp    ecx,0x10
c0017ff6:	0f 85 6b ff ff ff    	jne    c0017f67 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0017ffc:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c0018002:	85 c0                	test   eax,eax
c0018004:	74 5d                	je     c0018063 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c0018006:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001800c:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c0018012:	74 4f                	je     c0018063 <cleanupTerminatedTask(ThreadControlBlock*)+0x188>
c0018014:	83 ec 0c             	sub    esp,0xc
c0018017:	68 88 42 02 c0       	push   0xc0024288
c001801c:	e8 f5 67 00 00       	call   c001e816 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018021:	c7 04 24 88 42 02 c0 	mov    DWORD PTR [esp],0xc0024288
c0018028:	89 c7                	mov    edi,eax
c001802a:	e8 ef 67 00 00       	call   c001e81e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001802f:	83 c4 10             	add    esp,0x10
c0018032:	84 c0                	test   al,al
c0018034:	0f 84 dd 00 00 00    	je     c0018117 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c001803a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001803d:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018043:	85 d2                	test   edx,edx
c0018045:	74 0f                	je     c0018056 <cleanupTerminatedTask(ThreadControlBlock*)+0x17b>
c0018047:	83 ec 0c             	sub    esp,0xc
c001804a:	8b 02                	mov    eax,DWORD PTR [edx]
c001804c:	52                   	push   edx
c001804d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018050:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018053:	83 c4 10             	add    esp,0x10
c0018056:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c0018060:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0018063:	8b b7 32 05 00 00    	mov    esi,DWORD PTR [edi+0x532]
c0018069:	85 f6                	test   esi,esi
c001806b:	74 16                	je     c0018083 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a8>
c001806d:	83 ec 0c             	sub    esp,0xc
c0018070:	56                   	push   esi
c0018071:	e8 cc 64 ff ff       	call   c000e542 <VAS::~VAS()>
c0018076:	58                   	pop    eax
c0018077:	5a                   	pop    edx
c0018078:	6a 10                	push   0x10
c001807a:	56                   	push   esi
c001807b:	e8 97 71 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c0018080:	83 c4 10             	add    esp,0x10
c0018083:	83 ec 0c             	sub    esp,0xc
c0018086:	68 7d 16 02 c0       	push   0xc002167d
c001808b:	e8 a6 3a ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0018090:	83 c4 10             	add    esp,0x10
c0018093:	83 ec 08             	sub    esp,0x8
c0018096:	6a 63                	push   0x63
c0018098:	53                   	push   ebx
c0018099:	e8 79 71 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c001809e:	83 c4 2c             	add    esp,0x2c
c00180a1:	5b                   	pop    ebx
c00180a2:	5e                   	pop    esi
c00180a3:	5f                   	pop    edi
c00180a4:	5d                   	pop    ebp
c00180a5:	c3                   	ret    
c00180a6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00180aa:	83 ec 0c             	sub    esp,0xc
c00180ad:	68 9c 18 02 c0       	push   0xc002189c
c00180b2:	e8 9d 3b ff ff       	call   c000bc54 <panic(char const*)>
c00180b7:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c00180ba:	83 c4 10             	add    esp,0x10
c00180bd:	89 f7                	mov    edi,esi
c00180bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00180c3:	e9 95 fe ff ff       	jmp    c0017f5d <cleanupTerminatedTask(ThreadControlBlock*)+0x82>
c00180c8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00180ce:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c00180d4:	75 1c                	jne    c00180f2 <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c00180d6:	83 ec 0c             	sub    esp,0xc
c00180d9:	68 04 19 02 c0       	push   0xc0021904
c00180de:	e8 53 3a ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c00180e3:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00180ea:	e8 18 fb ff ff       	call   c0017c07 <blockTask(TaskState)>
c00180ef:	83 c4 10             	add    esp,0x10
c00180f2:	83 ec 08             	sub    esp,0x8
c00180f5:	56                   	push   esi
c00180f6:	68 88 42 02 c0       	push   0xc0024288
c00180fb:	e8 f0 67 00 00       	call   c001e8f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018100:	c7 04 24 88 42 02 c0 	mov    DWORD PTR [esp],0xc0024288
c0018107:	e8 0a 67 00 00       	call   c001e816 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001810c:	83 c4 10             	add    esp,0x10
c001810f:	39 f8                	cmp    eax,edi
c0018111:	0f 84 23 ff ff ff    	je     c001803a <cleanupTerminatedTask(ThreadControlBlock*)+0x15f>
c0018117:	83 ec 0c             	sub    esp,0xc
c001811a:	68 88 42 02 c0       	push   0xc0024288
c001811f:	e8 f2 66 00 00       	call   c001e816 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018124:	c7 04 24 88 42 02 c0 	mov    DWORD PTR [esp],0xc0024288
c001812b:	89 c6                	mov    esi,eax
c001812d:	e8 08 67 00 00       	call   c001e83a <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018132:	83 c4 10             	add    esp,0x10
c0018135:	39 f3                	cmp    ebx,esi
c0018137:	74 b9                	je     c00180f2 <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c0018139:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001813c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001813f:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c0018145:	75 ab                	jne    c00180f2 <cleanupTerminatedTask(ThreadControlBlock*)+0x217>
c0018147:	e9 7c ff ff ff       	jmp    c00180c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ed>
c001814c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018150:	83 ec 0c             	sub    esp,0xc
c0018153:	68 d0 18 02 c0       	push   0xc00218d0
c0018158:	e9 55 ff ff ff       	jmp    c00180b2 <cleanupTerminatedTask(ThreadControlBlock*)+0x1d7>
c001815d:	8b 36                	mov    esi,DWORD PTR [esi]
c001815f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0018163:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c0018166:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0018169:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001816f:	01 d7                	add    edi,edx
c0018171:	89 f8                	mov    eax,edi
c0018173:	e9 4b fe ff ff       	jmp    c0017fc3 <cleanupTerminatedTask(ThreadControlBlock*)+0xe8>

c0018178 <cleanerTaskFunction(void*)>:
c0018178:	53                   	push   ebx
c0018179:	83 ec 08             	sub    esp,0x8
c001817c:	e8 89 f4 ff ff       	call   c001760a <unlockScheduler()>
c0018181:	e8 82 f4 ff ff       	call   c0017608 <lockScheduler()>
c0018186:	80 3d 4c 42 02 c0 00 	cmp    BYTE PTR ds:0xc002424c,0x0
c001818d:	75 72                	jne    c0018201 <cleanerTaskFunction(void*)+0x89>
c001818f:	83 ec 0c             	sub    esp,0xc
c0018192:	6a 02                	push   0x2
c0018194:	e8 2c fa ff ff       	call   c0017bc5 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0018199:	83 c4 10             	add    esp,0x10
c001819c:	c6 05 4c 42 02 c0 00 	mov    BYTE PTR ds:0xc002424c,0x0
c00181a3:	e8 87 f4 ff ff       	call   c001762f <lockStuff()>
c00181a8:	e8 5b f4 ff ff       	call   c0017608 <lockScheduler()>
c00181ad:	83 ec 0c             	sub    esp,0xc
c00181b0:	68 70 42 02 c0       	push   0xc0024270
c00181b5:	e8 64 66 00 00       	call   c001e81e <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00181ba:	83 c4 10             	add    esp,0x10
c00181bd:	84 c0                	test   al,al
c00181bf:	75 28                	jne    c00181e9 <cleanerTaskFunction(void*)+0x71>
c00181c1:	83 ec 0c             	sub    esp,0xc
c00181c4:	68 70 42 02 c0       	push   0xc0024270
c00181c9:	e8 48 66 00 00       	call   c001e816 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00181ce:	c7 04 24 70 42 02 c0 	mov    DWORD PTR [esp],0xc0024270
c00181d5:	89 c3                	mov    ebx,eax
c00181d7:	e8 5e 66 00 00       	call   c001e83a <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00181dc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00181df:	e8 f7 fc ff ff       	call   c0017edb <cleanupTerminatedTask(ThreadControlBlock*)>
c00181e4:	83 c4 10             	add    esp,0x10
c00181e7:	eb c4                	jmp    c00181ad <cleanerTaskFunction(void*)+0x35>
c00181e9:	e8 1c f4 ff ff       	call   c001760a <unlockScheduler()>
c00181ee:	e8 ce f7 ff ff       	call   c00179c1 <unlockStuff()>
c00181f3:	e8 10 f4 ff ff       	call   c0017608 <lockScheduler()>
c00181f8:	80 3d 4c 42 02 c0 00 	cmp    BYTE PTR ds:0xc002424c,0x0
c00181ff:	74 8e                	je     c001818f <cleanerTaskFunction(void*)+0x17>
c0018201:	e8 04 f4 ff ff       	call   c001760a <unlockScheduler()>
c0018206:	eb 94                	jmp    c001819c <cleanerTaskFunction(void*)+0x24>

c0018208 <terminateTask(int)>:
c0018208:	83 ec 0c             	sub    esp,0xc
c001820b:	e8 1f f4 ff ff       	call   c001762f <lockStuff()>
c0018210:	e8 f3 f3 ff ff       	call   c0017608 <lockScheduler()>
c0018215:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018219:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001821e:	83 ec 08             	sub    esp,0x8
c0018221:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c0018224:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018229:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001822c:	50                   	push   eax
c001822d:	68 70 42 02 c0       	push   0xc0024270
c0018232:	e8 b9 66 00 00       	call   c001e8f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018237:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001823c:	83 c4 10             	add    esp,0x10
c001823f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0018246:	a1 48 42 02 c0       	mov    eax,ds:0xc0024248
c001824b:	85 c0                	test   eax,eax
c001824d:	74 2e                	je     c001827d <terminateTask(int)+0x75>
c001824f:	83 ec 0c             	sub    esp,0xc
c0018252:	c6 05 4c 42 02 c0 01 	mov    BYTE PTR ds:0xc002424c,0x1
c0018259:	50                   	push   eax
c001825a:	e8 cd fb ff ff       	call   c0017e2c <unblockTask(ThreadControlBlock*)>
c001825f:	83 c4 10             	add    esp,0x10
c0018262:	e8 a3 f3 ff ff       	call   c001760a <unlockScheduler()>
c0018267:	e8 55 f7 ff ff       	call   c00179c1 <unlockStuff()>
c001826c:	e8 97 f3 ff ff       	call   c0017608 <lockScheduler()>
c0018271:	e8 c6 f6 ff ff       	call   c001793c <schedule()>
c0018276:	e8 8f f3 ff ff       	call   c001760a <unlockScheduler()>
c001827b:	eb ef                	jmp    c001826c <terminateTask(int)+0x64>
c001827d:	83 ec 0c             	sub    esp,0xc
c0018280:	68 8b 16 02 c0       	push   0xc002168b
c0018285:	e8 ac 38 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c001828a:	83 c4 10             	add    esp,0x10
c001828d:	eb d3                	jmp    c0018262 <terminateTask(int)+0x5a>
c001828f:	90                   	nop

c0018290 <Semaphore::release()>:
c0018290:	83 ec 0c             	sub    esp,0xc
c0018293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018297:	e8 93 f3 ff ff       	call   c001762f <lockStuff()>
c001829c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001829f:	85 d2                	test   edx,edx
c00182a1:	74 1a                	je     c00182bd <Semaphore::release()+0x2d>
c00182a3:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00182a6:	83 ec 0c             	sub    esp,0xc
c00182a9:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00182ac:	52                   	push   edx
c00182ad:	e8 7a fb ff ff       	call   c0017e2c <unblockTask(ThreadControlBlock*)>
c00182b2:	83 c4 10             	add    esp,0x10
c00182b5:	83 c4 0c             	add    esp,0xc
c00182b8:	e9 04 f7 ff ff       	jmp    c00179c1 <unlockStuff()>
c00182bd:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c00182c0:	83 c4 0c             	add    esp,0xc
c00182c3:	e9 f9 f6 ff ff       	jmp    c00179c1 <unlockStuff()>

c00182c8 <__static_initialization_and_destruction_0(int, int)>:
c00182c8:	83 ec 0c             	sub    esp,0xc
c00182cb:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00182d0:	0f 85 88 00 00 00    	jne    c001835e <__static_initialization_and_destruction_0(int, int)+0x96>
c00182d6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00182de:	75 7e                	jne    c001835e <__static_initialization_and_destruction_0(int, int)+0x96>
c00182e0:	83 ec 0c             	sub    esp,0xc
c00182e3:	68 88 42 02 c0       	push   0xc0024288
c00182e8:	e8 21 68 00 00       	call   c001eb0e <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00182ed:	83 c4 10             	add    esp,0x10
c00182f0:	83 ec 04             	sub    esp,0x4
c00182f3:	68 f0 22 02 c0       	push   0xc00222f0
c00182f8:	68 88 42 02 c0       	push   0xc0024288
c00182fd:	68 ce ea 01 c0       	push   0xc001eace
c0018302:	e8 8c 6e ff ff       	call   c000f193 <__cxa_atexit>
c0018307:	83 c4 10             	add    esp,0x10
c001830a:	83 ec 0c             	sub    esp,0xc
c001830d:	68 7c 42 02 c0       	push   0xc002427c
c0018312:	e8 f7 67 00 00       	call   c001eb0e <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018317:	83 c4 10             	add    esp,0x10
c001831a:	83 ec 04             	sub    esp,0x4
c001831d:	68 f0 22 02 c0       	push   0xc00222f0
c0018322:	68 7c 42 02 c0       	push   0xc002427c
c0018327:	68 ce ea 01 c0       	push   0xc001eace
c001832c:	e8 62 6e ff ff       	call   c000f193 <__cxa_atexit>
c0018331:	83 c4 10             	add    esp,0x10
c0018334:	83 ec 0c             	sub    esp,0xc
c0018337:	68 70 42 02 c0       	push   0xc0024270
c001833c:	e8 cd 67 00 00       	call   c001eb0e <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0018341:	83 c4 10             	add    esp,0x10
c0018344:	83 ec 04             	sub    esp,0x4
c0018347:	68 f0 22 02 c0       	push   0xc00222f0
c001834c:	68 70 42 02 c0       	push   0xc0024270
c0018351:	68 ce ea 01 c0       	push   0xc001eace
c0018356:	e8 38 6e ff ff       	call   c000f193 <__cxa_atexit>
c001835b:	83 c4 10             	add    esp,0x10
c001835e:	90                   	nop
c001835f:	83 c4 0c             	add    esp,0xc
c0018362:	c3                   	ret    

c0018363 <_GLOBAL__sub_I_kernelProcess>:
c0018363:	83 ec 0c             	sub    esp,0xc
c0018366:	83 ec 08             	sub    esp,0x8
c0018369:	68 ff ff 00 00       	push   0xffff
c001836e:	6a 01                	push   0x1
c0018370:	e8 53 ff ff ff       	call   c00182c8 <__static_initialization_and_destruction_0(int, int)>
c0018375:	83 c4 10             	add    esp,0x10
c0018378:	83 c4 0c             	add    esp,0xc
c001837b:	c3                   	ret    

c001837c <vm8086EntryPoint(void*)>:
c001837c:	83 ec 0c             	sub    esp,0xc
c001837f:	e8 86 f2 ff ff       	call   c001760a <unlockScheduler()>
c0018384:	fb                   	sti    
c0018385:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001838a:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001838e:	52                   	push   edx
c001838f:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c0018393:	52                   	push   edx
c0018394:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0018398:	52                   	push   edx
c0018399:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001839d:	50                   	push   eax
c001839e:	e8 12 7e fe ff       	call   c00001b5 <goToVM86>
c00183a3:	83 c4 1c             	add    esp,0x1c
c00183a6:	c3                   	ret    

c00183a7 <inbv(unsigned short)>:
c00183a7:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00183ab:	ec                   	in     al,dx
c00183ac:	c3                   	ret    

c00183ad <outbv(unsigned short, unsigned char)>:
c00183ad:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00183b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00183b5:	ee                   	out    dx,al
c00183b6:	c3                   	ret    

c00183b7 <realToLinear(unsigned short, unsigned short)>:
c00183b7:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00183bc:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00183c1:	c1 e0 04             	shl    eax,0x4
c00183c4:	01 d0                	add    eax,edx
c00183c6:	c3                   	ret    

c00183c7 <getSegment(unsigned int)>:
c00183c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183cb:	c1 e8 10             	shr    eax,0x10
c00183ce:	c3                   	ret    

c00183cf <getOffset(unsigned int)>:
c00183cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00183d3:	c3                   	ret    

c00183d4 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00183d4:	55                   	push   ebp
c00183d5:	57                   	push   edi
c00183d6:	56                   	push   esi
c00183d7:	53                   	push   ebx
c00183d8:	83 ec 2c             	sub    esp,0x2c
c00183db:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00183df:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00183e3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00183e7:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00183eb:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00183ef:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00183f3:	e8 10 f2 ff ff       	call   c0017608 <lockScheduler()>
c00183f8:	68 80 00 00 00       	push   0x80
c00183fd:	6a 00                	push   0x0
c00183ff:	68 7c 83 01 c0       	push   0xc001837c
c0018404:	55                   	push   ebp
c0018405:	e8 28 f3 ff ff       	call   c0017732 <Process::createThread(void (*)(void*), void*, int)>
c001840a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001840e:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c0018412:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c0018416:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c001841a:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c001841e:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c0018422:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0018429:	e8 da 6d ff ff       	call   c000f208 <operator new(unsigned long)>
c001842e:	83 c4 0c             	add    esp,0xc
c0018431:	89 c3                	mov    ebx,eax
c0018433:	55                   	push   ebp
c0018434:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018438:	50                   	push   eax
c0018439:	e8 f8 71 ff ff       	call   c000f636 <File::File(char const*, Process*)>
c001843e:	83 c4 0c             	add    esp,0xc
c0018441:	8d 44 24 17          	lea    eax,[esp+0x17]
c0018445:	50                   	push   eax
c0018446:	8d 44 24 20          	lea    eax,[esp+0x20]
c001844a:	50                   	push   eax
c001844b:	53                   	push   ebx
c001844c:	e8 f5 74 ff ff       	call   c000f946 <File::stat(unsigned long long*, bool*)>
c0018451:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c0018455:	83 c4 10             	add    esp,0x10
c0018458:	84 d2                	test   dl,dl
c001845a:	74 1c                	je     c0018478 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c001845c:	83 ec 0c             	sub    esp,0xc
c001845f:	68 2c 19 02 c0       	push   0xc002192c
c0018464:	e8 eb 37 ff ff       	call   c000bc54 <panic(char const*)>
c0018469:	e8 9c f1 ff ff       	call   c001760a <unlockScheduler()>
c001846e:	83 c4 10             	add    esp,0x10
c0018471:	31 d2                	xor    edx,edx
c0018473:	e9 81 00 00 00       	jmp    c00184f9 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0018478:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001847c:	51                   	push   ecx
c001847d:	51                   	push   ecx
c001847e:	6a 01                	push   0x1
c0018480:	53                   	push   ebx
c0018481:	e8 14 72 ff ff       	call   c000f69a <File::open(FileOpenMode)>
c0018486:	83 c4 10             	add    esp,0x10
c0018489:	85 c0                	test   eax,eax
c001848b:	74 1b                	je     c00184a8 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c001848d:	83 ec 0c             	sub    esp,0xc
c0018490:	68 45 19 02 c0       	push   0xc0021945
c0018495:	e8 ba 37 ff ff       	call   c000bc54 <panic(char const*)>
c001849a:	e8 6b f1 ff ff       	call   c001760a <unlockScheduler()>
c001849f:	83 c4 10             	add    esp,0x10
c00184a2:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00184a6:	eb 51                	jmp    c00184f9 <loadVM8086FileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c00184a8:	83 ec 0c             	sub    esp,0xc
c00184ab:	0f b7 ff             	movzx  edi,di
c00184ae:	6a 07                	push   0x7
c00184b0:	0f b7 f6             	movzx  esi,si
c00184b3:	68 00 01 00 00       	push   0x100
c00184b8:	6a 00                	push   0x0
c00184ba:	6a 00                	push   0x0
c00184bc:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c00184c2:	e8 d3 64 ff ff       	call   c000e99a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00184c7:	83 c4 18             	add    esp,0x18
c00184ca:	57                   	push   edi
c00184cb:	56                   	push   esi
c00184cc:	e8 e6 fe ff ff       	call   c00183b7 <realToLinear(unsigned short, unsigned short)>
c00184d1:	5a                   	pop    edx
c00184d2:	8b 13                	mov    edx,DWORD PTR [ebx]
c00184d4:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00184d8:	51                   	push   ecx
c00184d9:	50                   	push   eax
c00184da:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00184de:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00184e2:	53                   	push   ebx
c00184e3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00184e6:	83 c4 14             	add    esp,0x14
c00184e9:	53                   	push   ebx
c00184ea:	e8 09 72 ff ff       	call   c000f6f8 <File::close()>
c00184ef:	e8 16 f1 ff ff       	call   c001760a <unlockScheduler()>
c00184f4:	83 c4 10             	add    esp,0x10
c00184f7:	b2 01                	mov    dl,0x1
c00184f9:	83 c4 2c             	add    esp,0x2c
c00184fc:	88 d0                	mov    al,dl
c00184fe:	5b                   	pop    ebx
c00184ff:	5e                   	pop    esi
c0018500:	5f                   	pop    edi
c0018501:	5d                   	pop    ebp
c0018502:	c3                   	ret    

c0018503 <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0018503:	57                   	push   edi
c0018504:	56                   	push   esi
c0018505:	53                   	push   ebx
c0018506:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001850a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001850e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018512:	83 e8 06             	sub    eax,0x6
c0018515:	0f b7 c0             	movzx  eax,ax
c0018518:	50                   	push   eax
c0018519:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001851e:	50                   	push   eax
c001851f:	e8 93 fe ff ff       	call   c00183b7 <realToLinear(unsigned short, unsigned short)>
c0018524:	5a                   	pop    edx
c0018525:	5e                   	pop    esi
c0018526:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0018529:	8d 56 fa             	lea    edx,[esi-0x6]
c001852c:	81 e2 ff ff 00 00    	and    edx,0xffff
c0018532:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c0018535:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0018538:	83 c2 02             	add    edx,0x2
c001853b:	66 89 10             	mov    WORD PTR [eax],dx
c001853e:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0018541:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0018545:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0018548:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001854c:	89 d6                	mov    esi,edx
c001854e:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0018554:	66 81 e6 ff fd       	and    si,0xfdff
c0018559:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001855d:	74 07                	je     c0018566 <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001855f:	89 d6                	mov    esi,edx
c0018561:	66 81 ce 00 02       	or     si,0x200
c0018566:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001856a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001856f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018573:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001857b:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001857e:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0018586:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0018589:	5b                   	pop    ebx
c001858a:	5e                   	pop    esi
c001858b:	5f                   	pop    edi
c001858c:	c3                   	ret    

c001858d <readByteFromReal(unsigned short, unsigned short)>:
c001858d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018592:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0018597:	c1 e0 04             	shl    eax,0x4
c001859a:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001859d:	c3                   	ret    

c001859e <readWordFromReal(unsigned short, unsigned short)>:
c001859e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00185a3:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00185a8:	c1 e0 04             	shl    eax,0x4
c00185ab:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00185af:	c3                   	ret    

c00185b0 <readDwordFromReal(unsigned short, unsigned short)>:
c00185b0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00185b5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00185ba:	c1 e0 04             	shl    eax,0x4
c00185bd:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00185c0:	c3                   	ret    

c00185c1 <writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00185c1:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00185c6:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00185cb:	c1 e0 04             	shl    eax,0x4
c00185ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00185d2:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00185d5:	c3                   	ret    

c00185d6 <writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00185d6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00185db:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00185e0:	c1 e0 04             	shl    eax,0x4
c00185e3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00185e7:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00185eb:	c3                   	ret    

c00185ec <writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00185ec:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00185f1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00185f6:	c1 e0 04             	shl    eax,0x4
c00185f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00185fd:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0018600:	c3                   	ret    

c0018601 <vm8086FaultHandler(regs*)>:
c0018601:	55                   	push   ebp
c0018602:	57                   	push   edi
c0018603:	56                   	push   esi
c0018604:	53                   	push   ebx
c0018605:	83 ec 1c             	sub    esp,0x1c
c0018608:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001860c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001860f:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0018613:	0f b7 f0             	movzx  esi,ax
c0018616:	52                   	push   edx
c0018617:	0f b7 c0             	movzx  eax,ax
c001861a:	50                   	push   eax
c001861b:	e8 97 fd ff ff       	call   c00183b7 <realToLinear(unsigned short, unsigned short)>
c0018620:	5a                   	pop    edx
c0018621:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0018624:	59                   	pop    ecx
c0018625:	89 c7                	mov    edi,eax
c0018627:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001862a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001862e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0018633:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018637:	0f b7 c5             	movzx  eax,bp
c001863a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001863e:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0018642:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0018646:	e8 6c fd ff ff       	call   c00183b7 <realToLinear(unsigned short, unsigned short)>
c001864b:	5a                   	pop    edx
c001864c:	59                   	pop    ecx
c001864d:	b1 06                	mov    cl,0x6
c001864f:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c0018654:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0018659:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c001865c:	80 fa 9d             	cmp    dl,0x9d
c001865f:	0f 84 1d 02 00 00    	je     c0018882 <vm8086FaultHandler(regs*)+0x281>
c0018665:	0f 87 8e 00 00 00    	ja     c00186f9 <vm8086FaultHandler(regs*)+0xf8>
c001866b:	80 fa 66             	cmp    dl,0x66
c001866e:	0f 84 89 01 00 00    	je     c00187fd <vm8086FaultHandler(regs*)+0x1fc>
c0018674:	77 44                	ja     c00186ba <vm8086FaultHandler(regs*)+0xb9>
c0018676:	80 fa 36             	cmp    dl,0x36
c0018679:	0f 84 74 01 00 00    	je     c00187f3 <vm8086FaultHandler(regs*)+0x1f2>
c001867f:	77 1a                	ja     c001869b <vm8086FaultHandler(regs*)+0x9a>
c0018681:	80 fa 26             	cmp    dl,0x26
c0018684:	0f 84 4b 01 00 00    	je     c00187d5 <vm8086FaultHandler(regs*)+0x1d4>
c001868a:	80 fa 2e             	cmp    dl,0x2e
c001868d:	0f 85 4a 05 00 00    	jne    c0018bdd <vm8086FaultHandler(regs*)+0x5dc>
c0018693:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018696:	31 c9                	xor    ecx,ecx
c0018698:	47                   	inc    edi
c0018699:	eb be                	jmp    c0018659 <vm8086FaultHandler(regs*)+0x58>
c001869b:	80 fa 64             	cmp    dl,0x64
c001869e:	0f 84 3b 01 00 00    	je     c00187df <vm8086FaultHandler(regs*)+0x1de>
c00186a4:	0f 87 3f 01 00 00    	ja     c00187e9 <vm8086FaultHandler(regs*)+0x1e8>
c00186aa:	80 fa 3e             	cmp    dl,0x3e
c00186ad:	0f 85 2a 05 00 00    	jne    c0018bdd <vm8086FaultHandler(regs*)+0x5dc>
c00186b3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00186b6:	b1 01                	mov    cl,0x1
c00186b8:	eb de                	jmp    c0018698 <vm8086FaultHandler(regs*)+0x97>
c00186ba:	80 fa 6d             	cmp    dl,0x6d
c00186bd:	0f 84 bf 02 00 00    	je     c0018982 <vm8086FaultHandler(regs*)+0x381>
c00186c3:	77 17                	ja     c00186dc <vm8086FaultHandler(regs*)+0xdb>
c00186c5:	80 fa 67             	cmp    dl,0x67
c00186c8:	0f 84 3c 01 00 00    	je     c001880a <vm8086FaultHandler(regs*)+0x209>
c00186ce:	80 fa 6c             	cmp    dl,0x6c
c00186d1:	0f 84 5d 02 00 00    	je     c0018934 <vm8086FaultHandler(regs*)+0x333>
c00186d7:	e9 01 05 00 00       	jmp    c0018bdd <vm8086FaultHandler(regs*)+0x5dc>
c00186dc:	80 fa 6f             	cmp    dl,0x6f
c00186df:	0f 84 8b 03 00 00    	je     c0018a70 <vm8086FaultHandler(regs*)+0x46f>
c00186e5:	0f 82 0f 03 00 00    	jb     c00189fa <vm8086FaultHandler(regs*)+0x3f9>
c00186eb:	80 fa 9c             	cmp    dl,0x9c
c00186ee:	0f 84 23 01 00 00    	je     c0018817 <vm8086FaultHandler(regs*)+0x216>
c00186f4:	e9 e4 04 00 00       	jmp    c0018bdd <vm8086FaultHandler(regs*)+0x5dc>
c00186f9:	80 fa ec             	cmp    dl,0xec
c00186fc:	0f 84 7f 04 00 00    	je     c0018b81 <vm8086FaultHandler(regs*)+0x580>
c0018702:	77 7b                	ja     c001877f <vm8086FaultHandler(regs*)+0x17e>
c0018704:	80 fa e4             	cmp    dl,0xe4
c0018707:	0f 84 fe 03 00 00    	je     c0018b0b <vm8086FaultHandler(regs*)+0x50a>
c001870d:	77 53                	ja     c0018762 <vm8086FaultHandler(regs*)+0x161>
c001870f:	80 fa cd             	cmp    dl,0xcd
c0018712:	0f 84 cd 01 00 00    	je     c00188e5 <vm8086FaultHandler(regs*)+0x2e4>
c0018718:	80 fa cf             	cmp    dl,0xcf
c001871b:	0f 85 bc 04 00 00    	jne    c0018bdd <vm8086FaultHandler(regs*)+0x5dc>
c0018721:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0018724:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0018727:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c001872b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001872e:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0018732:	81 ca 00 02 02 00    	or     edx,0x20200
c0018738:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001873b:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001873f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018745:	66 c1 e8 09          	shr    ax,0x9
c0018749:	83 e0 01             	and    eax,0x1
c001874c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001874f:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0018752:	83 c0 06             	add    eax,0x6
c0018755:	25 ff ff 00 00       	and    eax,0xffff
c001875a:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001875d:	e9 77 04 00 00       	jmp    c0018bd9 <vm8086FaultHandler(regs*)+0x5d8>
c0018762:	80 fa e6             	cmp    dl,0xe6
c0018765:	0f 84 ea 03 00 00    	je     c0018b55 <vm8086FaultHandler(regs*)+0x554>
c001876b:	0f 82 b6 03 00 00    	jb     c0018b27 <vm8086FaultHandler(regs*)+0x526>
c0018771:	80 fa e7             	cmp    dl,0xe7
c0018774:	0f 84 f2 03 00 00    	je     c0018b6c <vm8086FaultHandler(regs*)+0x56b>
c001877a:	e9 5e 04 00 00       	jmp    c0018bdd <vm8086FaultHandler(regs*)+0x5dc>
c001877f:	80 fa ef             	cmp    dl,0xef
c0018782:	0f 84 3c 04 00 00    	je     c0018bc4 <vm8086FaultHandler(regs*)+0x5c3>
c0018788:	77 28                	ja     c00187b2 <vm8086FaultHandler(regs*)+0x1b1>
c001878a:	80 fa ed             	cmp    dl,0xed
c001878d:	0f 84 0a 04 00 00    	je     c0018b9d <vm8086FaultHandler(regs*)+0x59c>
c0018793:	80 fa ee             	cmp    dl,0xee
c0018796:	0f 85 41 04 00 00    	jne    c0018bdd <vm8086FaultHandler(regs*)+0x5dc>
c001879c:	50                   	push   eax
c001879d:	50                   	push   eax
c001879e:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00187a2:	50                   	push   eax
c00187a3:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00187a7:	50                   	push   eax
c00187a8:	e8 00 fc ff ff       	call   c00183ad <outbv(unsigned short, unsigned char)>
c00187ad:	e9 0a 04 00 00       	jmp    c0018bbc <vm8086FaultHandler(regs*)+0x5bb>
c00187b2:	80 fa fa             	cmp    dl,0xfa
c00187b5:	0f 84 5d 01 00 00    	je     c0018918 <vm8086FaultHandler(regs*)+0x317>
c00187bb:	80 fa fb             	cmp    dl,0xfb
c00187be:	0f 84 62 01 00 00    	je     c0018926 <vm8086FaultHandler(regs*)+0x325>
c00187c4:	80 fa f3             	cmp    dl,0xf3
c00187c7:	0f 85 10 04 00 00    	jne    c0018bdd <vm8086FaultHandler(regs*)+0x5dc>
c00187cd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00187d0:	e9 c3 fe ff ff       	jmp    c0018698 <vm8086FaultHandler(regs*)+0x97>
c00187d5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00187d8:	b1 02                	mov    cl,0x2
c00187da:	e9 b9 fe ff ff       	jmp    c0018698 <vm8086FaultHandler(regs*)+0x97>
c00187df:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00187e2:	b1 03                	mov    cl,0x3
c00187e4:	e9 af fe ff ff       	jmp    c0018698 <vm8086FaultHandler(regs*)+0x97>
c00187e9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00187ec:	b1 04                	mov    cl,0x4
c00187ee:	e9 a5 fe ff ff       	jmp    c0018698 <vm8086FaultHandler(regs*)+0x97>
c00187f3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00187f6:	b1 05                	mov    cl,0x5
c00187f8:	e9 9b fe ff ff       	jmp    c0018698 <vm8086FaultHandler(regs*)+0x97>
c00187fd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018800:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0018805:	e9 8e fe ff ff       	jmp    c0018698 <vm8086FaultHandler(regs*)+0x97>
c001880a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001880d:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0018812:	e9 81 fe ff ff       	jmp    c0018698 <vm8086FaultHandler(regs*)+0x97>
c0018817:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001881a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001881e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018823:	74 30                	je     c0018855 <vm8086FaultHandler(regs*)+0x254>
c0018825:	83 e9 04             	sub    ecx,0x4
c0018828:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001882e:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018834:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018837:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001883a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0018840:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0018844:	0f 84 8c 03 00 00    	je     c0018bd6 <vm8086FaultHandler(regs*)+0x5d5>
c001884a:	80 ce 02             	or     dh,0x2
c001884d:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0018850:	e9 81 03 00 00       	jmp    c0018bd6 <vm8086FaultHandler(regs*)+0x5d5>
c0018855:	83 e9 02             	sub    ecx,0x2
c0018858:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001885e:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0018861:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0018865:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001886b:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c001886f:	74 05                	je     c0018876 <vm8086FaultHandler(regs*)+0x275>
c0018871:	80 ce 02             	or     dh,0x2
c0018874:	eb 03                	jmp    c0018879 <vm8086FaultHandler(regs*)+0x278>
c0018876:	80 e6 fd             	and    dh,0xfd
c0018879:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001887d:	e9 54 03 00 00       	jmp    c0018bd6 <vm8086FaultHandler(regs*)+0x5d5>
c0018882:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018887:	74 2a                	je     c00188b3 <vm8086FaultHandler(regs*)+0x2b2>
c0018889:	8b 10                	mov    edx,DWORD PTR [eax]
c001888b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0018891:	81 ca 00 02 02 00    	or     edx,0x20200
c0018897:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001889a:	8b 00                	mov    eax,DWORD PTR [eax]
c001889c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00188a2:	c1 e8 09             	shr    eax,0x9
c00188a5:	83 e0 01             	and    eax,0x1
c00188a8:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00188ab:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00188ae:	83 c0 04             	add    eax,0x4
c00188b1:	eb 25                	jmp    c00188d8 <vm8086FaultHandler(regs*)+0x2d7>
c00188b3:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00188b6:	81 ca 00 02 02 00    	or     edx,0x20200
c00188bc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00188bf:	66 8b 00             	mov    ax,WORD PTR [eax]
c00188c2:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00188c8:	66 c1 e8 09          	shr    ax,0x9
c00188cc:	83 e0 01             	and    eax,0x1
c00188cf:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c00188d2:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00188d5:	83 c0 02             	add    eax,0x2
c00188d8:	25 ff ff 00 00       	and    eax,0xffff
c00188dd:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00188e0:	e9 f1 02 00 00       	jmp    c0018bd6 <vm8086FaultHandler(regs*)+0x5d5>
c00188e5:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c00188e9:	3c ff                	cmp    al,0xff
c00188eb:	75 10                	jne    c00188fd <vm8086FaultHandler(regs*)+0x2fc>
c00188ed:	83 ec 0c             	sub    esp,0xc
c00188f0:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00188f3:	e8 10 f9 ff ff       	call   c0018208 <terminateTask(int)>
c00188f8:	e9 c2 02 00 00       	jmp    c0018bbf <vm8086FaultHandler(regs*)+0x5be>
c00188fd:	83 ec 0c             	sub    esp,0xc
c0018900:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018904:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018908:	57                   	push   edi
c0018909:	50                   	push   eax
c001890a:	53                   	push   ebx
c001890b:	e8 f3 fb ff ff       	call   c0018503 <vm8086DoISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0018910:	83 c4 20             	add    esp,0x20
c0018913:	e9 c1 02 00 00       	jmp    c0018bd9 <vm8086FaultHandler(regs*)+0x5d8>
c0018918:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001891d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0018921:	e9 b0 02 00 00       	jmp    c0018bd6 <vm8086FaultHandler(regs*)+0x5d5>
c0018926:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001892b:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001892f:	e9 a2 02 00 00       	jmp    c0018bd6 <vm8086FaultHandler(regs*)+0x5d5>
c0018934:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018939:	74 0d                	je     c0018948 <vm8086FaultHandler(regs*)+0x347>
c001893b:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0018942:	0f 87 e9 02 00 00    	ja     c0018c31 <vm8086FaultHandler(regs*)+0x630>
c0018948:	83 ec 0c             	sub    esp,0xc
c001894b:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001894e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018952:	50                   	push   eax
c0018953:	e8 4f fa ff ff       	call   c00183a7 <inbv(unsigned short)>
c0018958:	83 c4 0c             	add    esp,0xc
c001895b:	0f b6 c0             	movzx  eax,al
c001895e:	0f b7 c9             	movzx  ecx,cx
c0018961:	50                   	push   eax
c0018962:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0018966:	50                   	push   eax
c0018967:	51                   	push   ecx
c0018968:	e8 54 fc ff ff       	call   c00185c1 <writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001896d:	83 c4 10             	add    esp,0x10
c0018970:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0018973:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018977:	74 03                	je     c001897c <vm8086FaultHandler(regs*)+0x37b>
c0018979:	48                   	dec    eax
c001897a:	eb 01                	jmp    c001897d <vm8086FaultHandler(regs*)+0x37c>
c001897c:	40                   	inc    eax
c001897d:	0f b7 c0             	movzx  eax,ax
c0018980:	eb 70                	jmp    c00189f2 <vm8086FaultHandler(regs*)+0x3f1>
c0018982:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018985:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0018988:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001898d:	74 0c                	je     c001899b <vm8086FaultHandler(regs*)+0x39a>
c001898f:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018995:	0f 87 96 02 00 00    	ja     c0018c31 <vm8086FaultHandler(regs*)+0x630>
c001899b:	0f b7 c9             	movzx  ecx,cx
c001899e:	0f b7 f6             	movzx  esi,si
c00189a1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00189a4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00189a9:	74 20                	je     c00189cb <vm8086FaultHandler(regs*)+0x3ca>
c00189ab:	ed                   	in     eax,dx
c00189ac:	55                   	push   ebp
c00189ad:	50                   	push   eax
c00189ae:	51                   	push   ecx
c00189af:	56                   	push   esi
c00189b0:	e8 37 fc ff ff       	call   c00185ec <writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00189b5:	83 c4 10             	add    esp,0x10
c00189b8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00189bb:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00189bf:	74 05                	je     c00189c6 <vm8086FaultHandler(regs*)+0x3c5>
c00189c1:	83 e8 04             	sub    eax,0x4
c00189c4:	eb 27                	jmp    c00189ed <vm8086FaultHandler(regs*)+0x3ec>
c00189c6:	83 c0 04             	add    eax,0x4
c00189c9:	eb 22                	jmp    c00189ed <vm8086FaultHandler(regs*)+0x3ec>
c00189cb:	66 ed                	in     ax,dx
c00189cd:	0f b7 c0             	movzx  eax,ax
c00189d0:	57                   	push   edi
c00189d1:	50                   	push   eax
c00189d2:	51                   	push   ecx
c00189d3:	56                   	push   esi
c00189d4:	e8 fd fb ff ff       	call   c00185d6 <writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00189d9:	83 c4 10             	add    esp,0x10
c00189dc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00189df:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00189e3:	74 05                	je     c00189ea <vm8086FaultHandler(regs*)+0x3e9>
c00189e5:	83 e8 02             	sub    eax,0x2
c00189e8:	eb 03                	jmp    c00189ed <vm8086FaultHandler(regs*)+0x3ec>
c00189ea:	83 c0 02             	add    eax,0x2
c00189ed:	25 ff ff 00 00       	and    eax,0xffff
c00189f2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00189f5:	e9 dc 01 00 00       	jmp    c0018bd6 <vm8086FaultHandler(regs*)+0x5d5>
c00189fa:	49                   	dec    ecx
c00189fb:	80 f9 05             	cmp    cl,0x5
c00189fe:	77 24                	ja     c0018a24 <vm8086FaultHandler(regs*)+0x423>
c0018a00:	0f b6 c9             	movzx  ecx,cl
c0018a03:	ff 24 8d 8c 19 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffde674]
c0018a0a:	0f b7 f5             	movzx  esi,bp
c0018a0d:	eb 15                	jmp    c0018a24 <vm8086FaultHandler(regs*)+0x423>
c0018a0f:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0018a13:	eb 0f                	jmp    c0018a24 <vm8086FaultHandler(regs*)+0x423>
c0018a15:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0018a19:	eb 09                	jmp    c0018a24 <vm8086FaultHandler(regs*)+0x423>
c0018a1b:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0018a1f:	eb 03                	jmp    c0018a24 <vm8086FaultHandler(regs*)+0x423>
c0018a21:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0018a24:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018a27:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018a2c:	74 0b                	je     c0018a39 <vm8086FaultHandler(regs*)+0x438>
c0018a2e:	3d ff ff 00 00       	cmp    eax,0xffff
c0018a33:	0f 87 f8 01 00 00    	ja     c0018c31 <vm8086FaultHandler(regs*)+0x630>
c0018a39:	0f b7 c0             	movzx  eax,ax
c0018a3c:	52                   	push   edx
c0018a3d:	52                   	push   edx
c0018a3e:	50                   	push   eax
c0018a3f:	56                   	push   esi
c0018a40:	e8 48 fb ff ff       	call   c001858d <readByteFromReal(unsigned short, unsigned short)>
c0018a45:	59                   	pop    ecx
c0018a46:	0f b6 c0             	movzx  eax,al
c0018a49:	5e                   	pop    esi
c0018a4a:	50                   	push   eax
c0018a4b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018a4f:	50                   	push   eax
c0018a50:	e8 58 f9 ff ff       	call   c00183ad <outbv(unsigned short, unsigned char)>
c0018a55:	83 c4 10             	add    esp,0x10
c0018a58:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018a5b:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018a5f:	74 03                	je     c0018a64 <vm8086FaultHandler(regs*)+0x463>
c0018a61:	48                   	dec    eax
c0018a62:	eb 01                	jmp    c0018a65 <vm8086FaultHandler(regs*)+0x464>
c0018a64:	40                   	inc    eax
c0018a65:	0f b7 c0             	movzx  eax,ax
c0018a68:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018a6b:	e9 66 01 00 00       	jmp    c0018bd6 <vm8086FaultHandler(regs*)+0x5d5>
c0018a70:	49                   	dec    ecx
c0018a71:	80 f9 05             	cmp    cl,0x5
c0018a74:	77 1f                	ja     c0018a95 <vm8086FaultHandler(regs*)+0x494>
c0018a76:	0f b6 c9             	movzx  ecx,cl
c0018a79:	ff 24 8d a4 19 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffde65c]
c0018a80:	89 ee                	mov    esi,ebp
c0018a82:	eb 11                	jmp    c0018a95 <vm8086FaultHandler(regs*)+0x494>
c0018a84:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0018a87:	eb 0c                	jmp    c0018a95 <vm8086FaultHandler(regs*)+0x494>
c0018a89:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0018a8c:	eb 07                	jmp    c0018a95 <vm8086FaultHandler(regs*)+0x494>
c0018a8e:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0018a91:	eb 02                	jmp    c0018a95 <vm8086FaultHandler(regs*)+0x494>
c0018a93:	8b 33                	mov    esi,DWORD PTR [ebx]
c0018a95:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0018a98:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0018a9d:	74 0c                	je     c0018aab <vm8086FaultHandler(regs*)+0x4aa>
c0018a9f:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0018aa5:	0f 87 86 01 00 00    	ja     c0018c31 <vm8086FaultHandler(regs*)+0x630>
c0018aab:	0f b7 d6             	movzx  edx,si
c0018aae:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0018ab1:	0f b7 c1             	movzx  eax,cx
c0018ab4:	81 e7 00 04 00 00    	and    edi,0x400
c0018aba:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0018abd:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018ac2:	74 1d                	je     c0018ae1 <vm8086FaultHandler(regs*)+0x4e0>
c0018ac4:	55                   	push   ebp
c0018ac5:	55                   	push   ebp
c0018ac6:	50                   	push   eax
c0018ac7:	52                   	push   edx
c0018ac8:	e8 e3 fa ff ff       	call   c00185b0 <readDwordFromReal(unsigned short, unsigned short)>
c0018acd:	83 c4 10             	add    esp,0x10
c0018ad0:	89 f2                	mov    edx,esi
c0018ad2:	ef                   	out    dx,eax
c0018ad3:	85 ff                	test   edi,edi
c0018ad5:	74 05                	je     c0018adc <vm8086FaultHandler(regs*)+0x4db>
c0018ad7:	83 e9 04             	sub    ecx,0x4
c0018ada:	eb 21                	jmp    c0018afd <vm8086FaultHandler(regs*)+0x4fc>
c0018adc:	83 c1 04             	add    ecx,0x4
c0018adf:	eb 1c                	jmp    c0018afd <vm8086FaultHandler(regs*)+0x4fc>
c0018ae1:	55                   	push   ebp
c0018ae2:	55                   	push   ebp
c0018ae3:	50                   	push   eax
c0018ae4:	52                   	push   edx
c0018ae5:	e8 b4 fa ff ff       	call   c001859e <readWordFromReal(unsigned short, unsigned short)>
c0018aea:	83 c4 10             	add    esp,0x10
c0018aed:	89 f2                	mov    edx,esi
c0018aef:	66 ef                	out    dx,ax
c0018af1:	85 ff                	test   edi,edi
c0018af3:	74 05                	je     c0018afa <vm8086FaultHandler(regs*)+0x4f9>
c0018af5:	83 e9 02             	sub    ecx,0x2
c0018af8:	eb 03                	jmp    c0018afd <vm8086FaultHandler(regs*)+0x4fc>
c0018afa:	83 c1 02             	add    ecx,0x2
c0018afd:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0018b03:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0018b06:	e9 cb 00 00 00       	jmp    c0018bd6 <vm8086FaultHandler(regs*)+0x5d5>
c0018b0b:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018b12:	83 ec 0c             	sub    esp,0xc
c0018b15:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018b19:	50                   	push   eax
c0018b1a:	e8 88 f8 ff ff       	call   c00183a7 <inbv(unsigned short)>
c0018b1f:	0f b6 c0             	movzx  eax,al
c0018b22:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018b25:	eb 3f                	jmp    c0018b66 <vm8086FaultHandler(regs*)+0x565>
c0018b27:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018b2c:	74 07                	je     c0018b35 <vm8086FaultHandler(regs*)+0x534>
c0018b2e:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018b32:	ed                   	in     eax,dx
c0018b33:	eb 14                	jmp    c0018b49 <vm8086FaultHandler(regs*)+0x548>
c0018b35:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0018b38:	66 31 c9             	xor    cx,cx
c0018b3b:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0018b3e:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018b42:	66 ed                	in     ax,dx
c0018b44:	0f b7 c0             	movzx  eax,ax
c0018b47:	09 c8                	or     eax,ecx
c0018b49:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018b4c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018b50:	e9 84 00 00 00       	jmp    c0018bd9 <vm8086FaultHandler(regs*)+0x5d8>
c0018b55:	52                   	push   edx
c0018b56:	52                   	push   edx
c0018b57:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018b5b:	50                   	push   eax
c0018b5c:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018b60:	50                   	push   eax
c0018b61:	e8 47 f8 ff ff       	call   c00183ad <outbv(unsigned short, unsigned char)>
c0018b66:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018b6a:	eb 53                	jmp    c0018bbf <vm8086FaultHandler(regs*)+0x5be>
c0018b6c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018b6f:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0018b73:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018b78:	74 03                	je     c0018b7d <vm8086FaultHandler(regs*)+0x57c>
c0018b7a:	ef                   	out    dx,eax
c0018b7b:	eb cf                	jmp    c0018b4c <vm8086FaultHandler(regs*)+0x54b>
c0018b7d:	66 ef                	out    dx,ax
c0018b7f:	eb cb                	jmp    c0018b4c <vm8086FaultHandler(regs*)+0x54b>
c0018b81:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018b88:	83 ec 0c             	sub    esp,0xc
c0018b8b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018b8f:	50                   	push   eax
c0018b90:	e8 12 f8 ff ff       	call   c00183a7 <inbv(unsigned short)>
c0018b95:	0f b6 c0             	movzx  eax,al
c0018b98:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018b9b:	eb 1f                	jmp    c0018bbc <vm8086FaultHandler(regs*)+0x5bb>
c0018b9d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018ba0:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018ba5:	74 03                	je     c0018baa <vm8086FaultHandler(regs*)+0x5a9>
c0018ba7:	ed                   	in     eax,dx
c0018ba8:	eb 0d                	jmp    c0018bb7 <vm8086FaultHandler(regs*)+0x5b6>
c0018baa:	66 ed                	in     ax,dx
c0018bac:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0018baf:	0f b7 c0             	movzx  eax,ax
c0018bb2:	66 31 d2             	xor    dx,dx
c0018bb5:	09 d0                	or     eax,edx
c0018bb7:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0018bba:	eb 1a                	jmp    c0018bd6 <vm8086FaultHandler(regs*)+0x5d5>
c0018bbc:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018bbf:	83 c4 10             	add    esp,0x10
c0018bc2:	eb 15                	jmp    c0018bd9 <vm8086FaultHandler(regs*)+0x5d8>
c0018bc4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0018bc7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0018bca:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0018bcf:	74 03                	je     c0018bd4 <vm8086FaultHandler(regs*)+0x5d3>
c0018bd1:	ef                   	out    dx,eax
c0018bd2:	eb 02                	jmp    c0018bd6 <vm8086FaultHandler(regs*)+0x5d5>
c0018bd4:	66 ef                	out    dx,ax
c0018bd6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0018bd9:	b0 01                	mov    al,0x1
c0018bdb:	eb 56                	jmp    c0018c33 <vm8086FaultHandler(regs*)+0x632>
c0018bdd:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0018be1:	50                   	push   eax
c0018be2:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0018be6:	50                   	push   eax
c0018be7:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0018beb:	50                   	push   eax
c0018bec:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0018bf0:	50                   	push   eax
c0018bf1:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0018bf5:	50                   	push   eax
c0018bf6:	52                   	push   edx
c0018bf7:	52                   	push   edx
c0018bf8:	68 5e 19 02 c0       	push   0xc002195e
c0018bfd:	e8 34 2f ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0018c02:	83 c4 20             	add    esp,0x20
c0018c05:	83 ec 0c             	sub    esp,0xc
c0018c08:	6a 60                	push   0x60
c0018c0a:	e8 98 f7 ff ff       	call   c00183a7 <inbv(unsigned short)>
c0018c0f:	83 c4 10             	add    esp,0x10
c0018c12:	3c 1c                	cmp    al,0x1c
c0018c14:	74 04                	je     c0018c1a <vm8086FaultHandler(regs*)+0x619>
c0018c16:	3c 5a                	cmp    al,0x5a
c0018c18:	75 eb                	jne    c0018c05 <vm8086FaultHandler(regs*)+0x604>
c0018c1a:	3c 5a                	cmp    al,0x5a
c0018c1c:	74 04                	je     c0018c22 <vm8086FaultHandler(regs*)+0x621>
c0018c1e:	3c 1c                	cmp    al,0x1c
c0018c20:	75 0f                	jne    c0018c31 <vm8086FaultHandler(regs*)+0x630>
c0018c22:	83 ec 0c             	sub    esp,0xc
c0018c25:	6a 60                	push   0x60
c0018c27:	e8 7b f7 ff ff       	call   c00183a7 <inbv(unsigned short)>
c0018c2c:	83 c4 10             	add    esp,0x10
c0018c2f:	eb e9                	jmp    c0018c1a <vm8086FaultHandler(regs*)+0x619>
c0018c31:	31 c0                	xor    eax,eax
c0018c33:	83 c4 1c             	add    esp,0x1c
c0018c36:	5b                   	pop    ebx
c0018c37:	5e                   	pop    esi
c0018c38:	5f                   	pop    edi
c0018c39:	5d                   	pop    ebp
c0018c3a:	c3                   	ret    
c0018c3b:	90                   	nop

c0018c3c <FAT::getName()>:
c0018c3c:	b8 bc 19 02 c0       	mov    eax,0xc00219bc
c0018c41:	c3                   	ret    

c0018c42 <FAT::tell(void*, unsigned long long*)>:
c0018c42:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018c47:	75 06                	jne    c0018c4f <FAT::tell(void*, unsigned long long*)+0xd>
c0018c49:	b8 04 00 00 00       	mov    eax,0x4
c0018c4e:	c3                   	ret    
c0018c4f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018c54:	75 06                	jne    c0018c5c <FAT::tell(void*, unsigned long long*)+0x1a>
c0018c56:	b8 04 00 00 00       	mov    eax,0x4
c0018c5b:	c3                   	ret    
c0018c5c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c60:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0018c63:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0018c66:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018c6a:	89 01                	mov    DWORD PTR [ecx],eax
c0018c6c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018c6f:	b8 00 00 00 00       	mov    eax,0x0
c0018c74:	c3                   	ret    
c0018c75:	90                   	nop

c0018c76 <FAT::stat(void*, unsigned long long*)>:
c0018c76:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018c7b:	75 06                	jne    c0018c83 <FAT::stat(void*, unsigned long long*)+0xd>
c0018c7d:	b8 04 00 00 00       	mov    eax,0x4
c0018c82:	c3                   	ret    
c0018c83:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018c88:	75 06                	jne    c0018c90 <FAT::stat(void*, unsigned long long*)+0x1a>
c0018c8a:	b8 04 00 00 00       	mov    eax,0x4
c0018c8f:	c3                   	ret    
c0018c90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c94:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0018c97:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018c9a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018c9e:	89 01                	mov    DWORD PTR [ecx],eax
c0018ca0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0018ca3:	b8 00 00 00 00       	mov    eax,0x0
c0018ca8:	c3                   	ret    
c0018ca9:	90                   	nop

c0018caa <FAT::exists(char const*)>:
c0018caa:	b0 00                	mov    al,0x0
c0018cac:	c3                   	ret    
c0018cad:	90                   	nop

c0018cae <FAT::~FAT()>:
c0018cae:	83 ec 0c             	sub    esp,0xc
c0018cb1:	ba 40 1a 02 c0       	mov    edx,0xc0021a40
c0018cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cba:	89 10                	mov    DWORD PTR [eax],edx
c0018cbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018cc0:	83 ec 0c             	sub    esp,0xc
c0018cc3:	50                   	push   eax
c0018cc4:	e8 67 67 ff ff       	call   c000f430 <Filesystem::~Filesystem()>
c0018cc9:	83 c4 10             	add    esp,0x10
c0018ccc:	90                   	nop
c0018ccd:	83 c4 0c             	add    esp,0xc
c0018cd0:	c3                   	ret    
c0018cd1:	90                   	nop

c0018cd2 <FAT::~FAT()>:
c0018cd2:	83 ec 0c             	sub    esp,0xc
c0018cd5:	83 ec 0c             	sub    esp,0xc
c0018cd8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018cdc:	e8 cd ff ff ff       	call   c0018cae <FAT::~FAT()>
c0018ce1:	83 c4 10             	add    esp,0x10
c0018ce4:	83 ec 08             	sub    esp,0x8
c0018ce7:	6a 08                	push   0x8
c0018ce9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ced:	e8 25 65 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c0018cf2:	83 c4 10             	add    esp,0x10
c0018cf5:	83 c4 0c             	add    esp,0xc
c0018cf8:	c3                   	ret    
c0018cf9:	90                   	nop

c0018cfa <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018cfa:	83 ec 1c             	sub    esp,0x1c
c0018cfd:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018d04:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018d09:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d0d:	8b 04 85 e0 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbd20]
c0018d14:	83 f8 ff             	cmp    eax,0xffffffff
c0018d17:	75 34                	jne    c0018d4d <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0018d19:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018d1d:	88 c2                	mov    dl,al
c0018d1f:	a1 c0 42 02 c0       	mov    eax,ds:0xc00242c0
c0018d24:	01 d0                	add    eax,edx
c0018d26:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018d2a:	8b 15 c0 42 02 c0    	mov    edx,DWORD PTR ds:0xc00242c0
c0018d30:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d34:	89 14 85 e0 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbd20],edx
c0018d3b:	a1 c0 42 02 c0       	mov    eax,ds:0xc00242c0
c0018d40:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018d44:	89 14 85 60 43 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbca0],edx
c0018d4b:	eb 17                	jmp    c0018d64 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0018d4d:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018d51:	88 c2                	mov    dl,al
c0018d53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018d57:	8b 04 85 e0 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbd20]
c0018d5e:	01 d0                	add    eax,edx
c0018d60:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018d64:	83 ec 04             	sub    esp,0x4
c0018d67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018d6b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018d6f:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018d73:	50                   	push   eax
c0018d74:	e8 ec dc fe ff       	call   c0006a65 <f_getlabel>
c0018d79:	83 c4 10             	add    esp,0x10
c0018d7c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018d80:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018d85:	75 07                	jne    c0018d8e <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0018d87:	b8 00 00 00 00       	mov    eax,0x0
c0018d8c:	eb 05                	jmp    c0018d93 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0018d8e:	b8 01 00 00 00       	mov    eax,0x1
c0018d93:	83 c4 1c             	add    esp,0x1c
c0018d96:	c3                   	ret    
c0018d97:	90                   	nop

c0018d98 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018d98:	57                   	push   edi
c0018d99:	83 ec 58             	sub    esp,0x58
c0018d9c:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018da4:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018da8:	b9 0f 00 00 00       	mov    ecx,0xf
c0018dad:	b8 00 00 00 00       	mov    eax,0x0
c0018db2:	fc                   	cld    
c0018db3:	89 d7                	mov    edi,edx
c0018db5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018db7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018dbb:	8b 04 85 e0 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbd20]
c0018dc2:	83 f8 ff             	cmp    eax,0xffffffff
c0018dc5:	75 34                	jne    c0018dfb <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0018dc7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018dcb:	88 c2                	mov    dl,al
c0018dcd:	a1 c0 42 02 c0       	mov    eax,ds:0xc00242c0
c0018dd2:	01 d0                	add    eax,edx
c0018dd4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018dd8:	8b 15 c0 42 02 c0    	mov    edx,DWORD PTR ds:0xc00242c0
c0018dde:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018de2:	89 14 85 e0 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbd20],edx
c0018de9:	a1 c0 42 02 c0       	mov    eax,ds:0xc00242c0
c0018dee:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018df2:	89 14 85 60 43 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbca0],edx
c0018df9:	eb 17                	jmp    c0018e12 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0018dfb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018dff:	88 c2                	mov    dl,al
c0018e01:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018e05:	8b 04 85 e0 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbd20]
c0018e0c:	01 d0                	add    eax,edx
c0018e0e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018e12:	83 ec 08             	sub    esp,0x8
c0018e15:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018e19:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018e1d:	50                   	push   eax
c0018e1e:	e8 3b 79 fe ff       	call   c000075e <strcat>
c0018e23:	83 c4 10             	add    esp,0x10
c0018e26:	83 ec 0c             	sub    esp,0xc
c0018e29:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018e2d:	50                   	push   eax
c0018e2e:	e8 20 de fe ff       	call   c0006c53 <f_setlabel>
c0018e33:	83 c4 10             	add    esp,0x10
c0018e36:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018e3a:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018e3f:	75 07                	jne    c0018e48 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0018e41:	b8 00 00 00 00       	mov    eax,0x0
c0018e46:	eb 05                	jmp    c0018e4d <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0018e48:	b8 01 00 00 00       	mov    eax,0x1
c0018e4d:	83 c4 58             	add    esp,0x58
c0018e50:	5f                   	pop    edi
c0018e51:	c3                   	ret    

c0018e52 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018e52:	83 ec 2c             	sub    esp,0x2c
c0018e55:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018e5d:	83 ec 08             	sub    esp,0x8
c0018e60:	68 e0 19 02 c0       	push   0xc00219e0
c0018e65:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018e69:	e8 8a 78 fe ff       	call   c00006f8 <strcmp>
c0018e6e:	83 c4 10             	add    esp,0x10
c0018e71:	85 c0                	test   eax,eax
c0018e73:	0f 94 c0             	sete   al
c0018e76:	84 c0                	test   al,al
c0018e78:	74 0d                	je     c0018e87 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0018e7a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018e82:	e9 a6 00 00 00       	jmp    c0018f2d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018e87:	83 ec 08             	sub    esp,0x8
c0018e8a:	68 d2 19 02 c0       	push   0xc00219d2
c0018e8f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018e93:	e8 60 78 fe ff       	call   c00006f8 <strcmp>
c0018e98:	83 c4 10             	add    esp,0x10
c0018e9b:	85 c0                	test   eax,eax
c0018e9d:	0f 94 c0             	sete   al
c0018ea0:	84 c0                	test   al,al
c0018ea2:	74 0a                	je     c0018eae <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0018ea4:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018eac:	eb 7f                	jmp    c0018f2d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018eae:	83 ec 08             	sub    esp,0x8
c0018eb1:	68 d8 19 02 c0       	push   0xc00219d8
c0018eb6:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018eba:	e8 39 78 fe ff       	call   c00006f8 <strcmp>
c0018ebf:	83 c4 10             	add    esp,0x10
c0018ec2:	85 c0                	test   eax,eax
c0018ec4:	0f 94 c0             	sete   al
c0018ec7:	84 c0                	test   al,al
c0018ec9:	74 0a                	je     c0018ed5 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0018ecb:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018ed3:	eb 58                	jmp    c0018f2d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018ed5:	83 ec 08             	sub    esp,0x8
c0018ed8:	68 cc f1 01 c0       	push   0xc001f1cc
c0018edd:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018ee1:	e8 12 78 fe ff       	call   c00006f8 <strcmp>
c0018ee6:	83 c4 10             	add    esp,0x10
c0018ee9:	85 c0                	test   eax,eax
c0018eeb:	0f 94 c0             	sete   al
c0018eee:	84 c0                	test   al,al
c0018ef0:	74 0a                	je     c0018efc <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0018ef2:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018efa:	eb 31                	jmp    c0018f2d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018efc:	83 ec 08             	sub    esp,0x8
c0018eff:	68 de 19 02 c0       	push   0xc00219de
c0018f04:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018f08:	e8 eb 77 fe ff       	call   c00006f8 <strcmp>
c0018f0d:	83 c4 10             	add    esp,0x10
c0018f10:	85 c0                	test   eax,eax
c0018f12:	0f 94 c0             	sete   al
c0018f15:	84 c0                	test   al,al
c0018f17:	74 0a                	je     c0018f23 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0018f19:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018f21:	eb 0a                	jmp    c0018f2d <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0018f23:	b8 08 00 00 00       	mov    eax,0x8
c0018f28:	e9 04 01 00 00       	jmp    c0019031 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0018f2d:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018f34:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018f39:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018f3d:	8b 04 85 e0 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbd20]
c0018f44:	83 f8 ff             	cmp    eax,0xffffffff
c0018f47:	75 34                	jne    c0018f7d <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0018f49:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018f4d:	88 c2                	mov    dl,al
c0018f4f:	a1 c0 42 02 c0       	mov    eax,ds:0xc00242c0
c0018f54:	01 d0                	add    eax,edx
c0018f56:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018f5a:	8b 15 c0 42 02 c0    	mov    edx,DWORD PTR ds:0xc00242c0
c0018f60:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018f64:	89 14 85 e0 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbd20],edx
c0018f6b:	a1 c0 42 02 c0       	mov    eax,ds:0xc00242c0
c0018f70:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018f74:	89 14 85 60 43 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbca0],edx
c0018f7b:	eb 17                	jmp    c0018f94 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0018f7d:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018f81:	88 c2                	mov    dl,al
c0018f83:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018f87:	8b 04 85 e0 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbd20]
c0018f8e:	01 d0                	add    eax,edx
c0018f90:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018f94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018f98:	88 04 24             	mov    BYTE PTR [esp],al
c0018f9b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018f9f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018fa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018fab:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018fb0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018fb8:	83 ec 0c             	sub    esp,0xc
c0018fbb:	68 00 20 00 00       	push   0x2000
c0018fc0:	e8 6c 31 ff ff       	call   c000c131 <malloc>
c0018fc5:	83 c4 10             	add    esp,0x10
c0018fc8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018fcc:	68 00 20 00 00       	push   0x2000
c0018fd1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018fd5:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018fd9:	50                   	push   eax
c0018fda:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018fde:	50                   	push   eax
c0018fdf:	e8 ba e0 fe ff       	call   c000709e <f_mkfs>
c0018fe4:	83 c4 10             	add    esp,0x10
c0018fe7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018feb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018ff0:	75 07                	jne    c0018ff9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0018ff2:	b8 00 00 00 00       	mov    eax,0x0
c0018ff7:	eb 38                	jmp    c0019031 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0018ff9:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018ffe:	75 17                	jne    c0019017 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0019000:	83 ec 0c             	sub    esp,0xc
c0019003:	68 10 1a 02 c0       	push   0xc0021a10
c0019008:	e8 29 2b ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c001900d:	83 c4 10             	add    esp,0x10
c0019010:	b8 09 00 00 00       	mov    eax,0x9
c0019015:	eb 1a                	jmp    c0019031 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0019017:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001901b:	83 ec 08             	sub    esp,0x8
c001901e:	50                   	push   eax
c001901f:	68 e4 19 02 c0       	push   0xc00219e4
c0019024:	e8 0d 2b ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0019029:	83 c4 10             	add    esp,0x10
c001902c:	b8 01 00 00 00       	mov    eax,0x1
c0019031:	83 c4 2c             	add    esp,0x2c
c0019034:	c3                   	ret    
c0019035:	90                   	nop

c0019036 <FAT::tryMount(LogicalDisk*, int)>:
c0019036:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001903c:	a1 c0 42 02 c0       	mov    eax,ds:0xc00242c0
c0019041:	83 f8 14             	cmp    eax,0x14
c0019044:	75 17                	jne    c001905d <FAT::tryMount(LogicalDisk*, int)+0x27>
c0019046:	83 ec 0c             	sub    esp,0xc
c0019049:	68 f6 19 02 c0       	push   0xc00219f6
c001904e:	e8 01 2c ff ff       	call   c000bc54 <panic(char const*)>
c0019053:	83 c4 10             	add    esp,0x10
c0019056:	b0 00                	mov    al,0x0
c0019058:	e9 d7 01 00 00       	jmp    c0019234 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001905d:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0019064:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001906a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019070:	3d 00 02 00 00       	cmp    eax,0x200
c0019075:	74 07                	je     c001907e <FAT::tryMount(LogicalDisk*, int)+0x48>
c0019077:	b0 00                	mov    al,0x0
c0019079:	e9 b6 01 00 00       	jmp    c0019234 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001907e:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0019086:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001908d:	8b 04 85 e0 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbd20]
c0019094:	83 f8 ff             	cmp    eax,0xffffffff
c0019097:	74 07                	je     c00190a0 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0019099:	b0 01                	mov    al,0x1
c001909b:	e9 94 01 00 00       	jmp    c0019234 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00190a0:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00190aa:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00190b2:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00190b9:	88 c2                	mov    dl,al
c00190bb:	a1 c0 42 02 c0       	mov    eax,ds:0xc00242c0
c00190c0:	01 d0                	add    eax,edx
c00190c2:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00190c9:	8b 15 c0 42 02 c0    	mov    edx,DWORD PTR ds:0xc00242c0
c00190cf:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00190d6:	89 14 85 e0 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbd20],edx
c00190dd:	a1 c0 42 02 c0       	mov    eax,ds:0xc00242c0
c00190e2:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00190e9:	89 14 85 60 43 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbca0],edx
c00190f0:	83 ec 0c             	sub    esp,0xc
c00190f3:	68 54 02 00 00       	push   0x254
c00190f8:	e8 34 30 ff ff       	call   c000c131 <malloc>
c00190fd:	83 c4 10             	add    esp,0x10
c0019100:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0019107:	83 ec 04             	sub    esp,0x4
c001910a:	6a 00                	push   0x0
c001910c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019113:	50                   	push   eax
c0019114:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001911b:	e8 3c bb fe ff       	call   c0004c5c <f_mount>
c0019120:	83 c4 10             	add    esp,0x10
c0019123:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001912a:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0019132:	74 19                	je     c001914d <FAT::tryMount(LogicalDisk*, int)+0x117>
c0019134:	83 ec 0c             	sub    esp,0xc
c0019137:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001913e:	e8 0e 30 ff ff       	call   c000c151 <rfree>
c0019143:	83 c4 10             	add    esp,0x10
c0019146:	b0 00                	mov    al,0x0
c0019148:	e9 e7 00 00 00       	jmp    c0019234 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001914d:	83 ec 04             	sub    esp,0x4
c0019150:	68 00 01 00 00       	push   0x100
c0019155:	6a 00                	push   0x0
c0019157:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001915e:	50                   	push   eax
c001915f:	e8 a4 74 fe ff       	call   c0000608 <memset>
c0019164:	83 c4 10             	add    esp,0x10
c0019167:	83 ec 08             	sub    esp,0x8
c001916a:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019171:	50                   	push   eax
c0019172:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019179:	50                   	push   eax
c001917a:	e8 df 75 fe ff       	call   c000075e <strcat>
c001917f:	83 c4 10             	add    esp,0x10
c0019182:	83 ec 08             	sub    esp,0x8
c0019185:	68 04 1a 02 c0       	push   0xc0021a04
c001918a:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0019191:	50                   	push   eax
c0019192:	e8 c7 75 fe ff       	call   c000075e <strcat>
c0019197:	83 c4 10             	add    esp,0x10
c001919a:	83 ec 04             	sub    esp,0x4
c001919d:	6a 01                	push   0x1
c001919f:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00191a6:	50                   	push   eax
c00191a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00191ab:	50                   	push   eax
c00191ac:	e8 0d bb fe ff       	call   c0004cbe <f_open>
c00191b1:	83 c4 10             	add    esp,0x10
c00191b4:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00191bb:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00191c2:	85 c0                	test   eax,eax
c00191c4:	74 0a                	je     c00191d0 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00191c6:	78 2d                	js     c00191f5 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00191c8:	83 e8 04             	sub    eax,0x4
c00191cb:	83 f8 01             	cmp    eax,0x1
c00191ce:	77 25                	ja     c00191f5 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00191d0:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00191d8:	83 ec 0c             	sub    esp,0xc
c00191db:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00191df:	50                   	push   eax
c00191e0:	e8 2b c6 fe ff       	call   c0005810 <f_close>
c00191e5:	83 c4 10             	add    esp,0x10
c00191e8:	90                   	nop
c00191e9:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c00191f1:	74 3a                	je     c001922d <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c00191f3:	eb 2d                	jmp    c0019222 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c00191f5:	83 ec 0c             	sub    esp,0xc
c00191f8:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c00191ff:	e8 4d 2f ff ff       	call   c000c151 <rfree>
c0019204:	83 c4 10             	add    esp,0x10
c0019207:	83 ec 04             	sub    esp,0x4
c001920a:	6a 00                	push   0x0
c001920c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0019213:	50                   	push   eax
c0019214:	6a 00                	push   0x0
c0019216:	e8 41 ba fe ff       	call   c0004c5c <f_mount>
c001921b:	83 c4 10             	add    esp,0x10
c001921e:	b0 00                	mov    al,0x0
c0019220:	eb 12                	jmp    c0019234 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0019222:	a1 c0 42 02 c0       	mov    eax,ds:0xc00242c0
c0019227:	40                   	inc    eax
c0019228:	a3 c0 42 02 c0       	mov    ds:0xc00242c0,eax
c001922d:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0019234:	81 c4 6c 03 00 00    	add    esp,0x36c
c001923a:	c3                   	ret    
c001923b:	90                   	nop

c001923c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001923c:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0019242:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001924a:	74 0a                	je     c0019256 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001924c:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0019254:	75 0a                	jne    c0019260 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0019256:	b8 04 00 00 00       	mov    eax,0x4
c001925b:	e9 dc 00 00 00       	jmp    c001933c <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c0019260:	83 ec 08             	sub    esp,0x8
c0019263:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001926a:	50                   	push   eax
c001926b:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0019272:	e8 a3 cb fe ff       	call   c0005e1a <f_readdir>
c0019277:	83 c4 10             	add    esp,0x10
c001927a:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0019281:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0019288:	83 ec 0c             	sub    esp,0xc
c001928b:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0019292:	83 c0 1a             	add    eax,0x1a
c0019295:	50                   	push   eax
c0019296:	e8 8a 73 fe ff       	call   c0000625 <strlen>
c001929b:	83 c4 10             	add    esp,0x10
c001929e:	ba 00 00 00 00       	mov    edx,0x0
c00192a3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00192a7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00192ab:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c00192b2:	0f b6 c0             	movzx  eax,al
c00192b5:	83 e0 10             	and    eax,0x10
c00192b8:	74 07                	je     c00192c1 <FAT::readDir(void*, unsigned long, void*, int*)+0x85>
c00192ba:	b8 02 00 00 00       	mov    eax,0x2
c00192bf:	eb 05                	jmp    c00192c6 <FAT::readDir(void*, unsigned long, void*, int*)+0x8a>
c00192c1:	b8 01 00 00 00       	mov    eax,0x1
c00192c6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192ca:	83 ec 08             	sub    esp,0x8
c00192cd:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00192d4:	83 c0 1a             	add    eax,0x1a
c00192d7:	50                   	push   eax
c00192d8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00192dc:	83 c0 10             	add    eax,0x10
c00192df:	50                   	push   eax
c00192e0:	e8 c2 73 fe ff       	call   c00006a7 <strcpy>
c00192e5:	83 c4 10             	add    esp,0x10
c00192e8:	83 ec 04             	sub    esp,0x4
c00192eb:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c00192f2:	8d 44 24 08          	lea    eax,[esp+0x8]
c00192f6:	50                   	push   eax
c00192f7:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c00192fe:	e8 cf 72 fe ff       	call   c00005d2 <memcpy>
c0019303:	83 c4 10             	add    esp,0x10
c0019306:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001930d:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019313:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001931a:	84 c0                	test   al,al
c001931c:	75 07                	jne    c0019325 <FAT::readDir(void*, unsigned long, void*, int*)+0xe9>
c001931e:	b8 07 00 00 00       	mov    eax,0x7
c0019323:	eb 17                	jmp    c001933c <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c0019325:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001932c:	85 c0                	test   eax,eax
c001932e:	75 07                	jne    c0019337 <FAT::readDir(void*, unsigned long, void*, int*)+0xfb>
c0019330:	b8 00 00 00 00       	mov    eax,0x0
c0019335:	eb 05                	jmp    c001933c <FAT::readDir(void*, unsigned long, void*, int*)+0x100>
c0019337:	b8 01 00 00 00       	mov    eax,0x1
c001933c:	81 c4 3c 02 00 00    	add    esp,0x23c
c0019342:	c3                   	ret    
c0019343:	90                   	nop

c0019344 <FAT::read(void*, unsigned long, void*, int*)>:
c0019344:	83 ec 1c             	sub    esp,0x1c
c0019347:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001934c:	74 07                	je     c0019355 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001934e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019353:	75 07                	jne    c001935c <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0019355:	b8 04 00 00 00       	mov    eax,0x4
c001935a:	eb 3d                	jmp    c0019399 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001935c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019360:	50                   	push   eax
c0019361:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019365:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019369:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001936d:	e8 88 bd fe ff       	call   c00050fa <f_read>
c0019372:	83 c4 10             	add    esp,0x10
c0019375:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019379:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001937d:	89 c2                	mov    edx,eax
c001937f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019383:	89 10                	mov    DWORD PTR [eax],edx
c0019385:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019389:	85 c0                	test   eax,eax
c001938b:	75 07                	jne    c0019394 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001938d:	b8 00 00 00 00       	mov    eax,0x0
c0019392:	eb 05                	jmp    c0019399 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0019394:	b8 01 00 00 00       	mov    eax,0x1
c0019399:	83 c4 1c             	add    esp,0x1c
c001939c:	c3                   	ret    
c001939d:	90                   	nop

c001939e <FAT::write(void*, unsigned long, void*, int*)>:
c001939e:	83 ec 1c             	sub    esp,0x1c
c00193a1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00193a6:	74 07                	je     c00193af <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00193a8:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00193ad:	75 07                	jne    c00193b6 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00193af:	b8 04 00 00 00       	mov    eax,0x4
c00193b4:	eb 3d                	jmp    c00193f3 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00193b6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00193ba:	50                   	push   eax
c00193bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00193bf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00193c3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193c7:	e8 ae bf fe ff       	call   c000537a <f_write>
c00193cc:	83 c4 10             	add    esp,0x10
c00193cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00193d7:	89 c2                	mov    edx,eax
c00193d9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00193dd:	89 10                	mov    DWORD PTR [eax],edx
c00193df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193e3:	85 c0                	test   eax,eax
c00193e5:	75 07                	jne    c00193ee <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00193e7:	b8 00 00 00 00       	mov    eax,0x0
c00193ec:	eb 05                	jmp    c00193f3 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00193ee:	b8 01 00 00 00       	mov    eax,0x1
c00193f3:	83 c4 1c             	add    esp,0x1c
c00193f6:	c3                   	ret    
c00193f7:	90                   	nop

c00193f8 <FAT::close(void*)>:
c00193f8:	83 ec 1c             	sub    esp,0x1c
c00193fb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019400:	75 07                	jne    c0019409 <FAT::close(void*)+0x11>
c0019402:	b8 04 00 00 00       	mov    eax,0x4
c0019407:	eb 36                	jmp    c001943f <FAT::close(void*)+0x47>
c0019409:	83 ec 0c             	sub    esp,0xc
c001940c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019410:	e8 fb c3 fe ff       	call   c0005810 <f_close>
c0019415:	83 c4 10             	add    esp,0x10
c0019418:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001941c:	83 ec 0c             	sub    esp,0xc
c001941f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019423:	e8 19 2d ff ff       	call   c000c141 <free>
c0019428:	83 c4 10             	add    esp,0x10
c001942b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001942f:	85 c0                	test   eax,eax
c0019431:	75 07                	jne    c001943a <FAT::close(void*)+0x42>
c0019433:	b8 00 00 00 00       	mov    eax,0x0
c0019438:	eb 05                	jmp    c001943f <FAT::close(void*)+0x47>
c001943a:	b8 01 00 00 00       	mov    eax,0x1
c001943f:	83 c4 1c             	add    esp,0x1c
c0019442:	c3                   	ret    
c0019443:	90                   	nop

c0019444 <FAT::closeDir(void*)>:
c0019444:	83 ec 1c             	sub    esp,0x1c
c0019447:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001944c:	75 07                	jne    c0019455 <FAT::closeDir(void*)+0x11>
c001944e:	b8 04 00 00 00       	mov    eax,0x4
c0019453:	eb 36                	jmp    c001948b <FAT::closeDir(void*)+0x47>
c0019455:	83 ec 0c             	sub    esp,0xc
c0019458:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001945c:	e8 97 c9 fe ff       	call   c0005df8 <f_closedir>
c0019461:	83 c4 10             	add    esp,0x10
c0019464:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019468:	83 ec 0c             	sub    esp,0xc
c001946b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001946f:	e8 cd 2c ff ff       	call   c000c141 <free>
c0019474:	83 c4 10             	add    esp,0x10
c0019477:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001947b:	85 c0                	test   eax,eax
c001947d:	75 07                	jne    c0019486 <FAT::closeDir(void*)+0x42>
c001947f:	b8 00 00 00 00       	mov    eax,0x0
c0019484:	eb 05                	jmp    c001948b <FAT::closeDir(void*)+0x47>
c0019486:	b8 01 00 00 00       	mov    eax,0x1
c001948b:	83 c4 1c             	add    esp,0x1c
c001948e:	c3                   	ret    
c001948f:	90                   	nop

c0019490 <FAT::seek(void*, unsigned long long)>:
c0019490:	83 ec 2c             	sub    esp,0x2c
c0019493:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019497:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001949b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001949f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00194a3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00194a8:	75 07                	jne    c00194b1 <FAT::seek(void*, unsigned long long)+0x21>
c00194aa:	b8 04 00 00 00       	mov    eax,0x4
c00194af:	eb 2f                	jmp    c00194e0 <FAT::seek(void*, unsigned long long)+0x50>
c00194b1:	83 ec 04             	sub    esp,0x4
c00194b4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00194b8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00194bc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00194c0:	e8 7a c3 fe ff       	call   c000583f <f_lseek>
c00194c5:	83 c4 10             	add    esp,0x10
c00194c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00194cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00194d0:	85 c0                	test   eax,eax
c00194d2:	75 07                	jne    c00194db <FAT::seek(void*, unsigned long long)+0x4b>
c00194d4:	b8 00 00 00 00       	mov    eax,0x0
c00194d9:	eb 05                	jmp    c00194e0 <FAT::seek(void*, unsigned long long)+0x50>
c00194db:	b8 01 00 00 00       	mov    eax,0x1
c00194e0:	83 c4 2c             	add    esp,0x2c
c00194e3:	c3                   	ret    

c00194e4 <fatWrapperReadDisk>:
c00194e4:	83 ec 1c             	sub    esp,0x1c
c00194e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00194eb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00194ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00194f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00194f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00194fa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00194fe:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019503:	8b 04 85 40 34 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcbc0]
c001950a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001950e:	83 ec 0c             	sub    esp,0xc
c0019511:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019515:	52                   	push   edx
c0019516:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001951a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001951e:	50                   	push   eax
c001951f:	e8 b4 8a ff ff       	call   c0011fd8 <LogicalDisk::read(unsigned long long, int, void*)>
c0019524:	83 c4 20             	add    esp,0x20
c0019527:	83 c4 1c             	add    esp,0x1c
c001952a:	c3                   	ret    

c001952b <fatWrapperWriteDisk>:
c001952b:	83 ec 1c             	sub    esp,0x1c
c001952e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019532:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019536:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001953a:	89 04 24             	mov    DWORD PTR [esp],eax
c001953d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0019541:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019545:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001954a:	8b 04 85 40 34 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcbc0]
c0019551:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019555:	83 ec 0c             	sub    esp,0xc
c0019558:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001955c:	52                   	push   edx
c001955d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019561:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019565:	50                   	push   eax
c0019566:	e8 d9 8a ff ff       	call   c0012044 <LogicalDisk::write(unsigned long long, int, void*)>
c001956b:	83 c4 20             	add    esp,0x20
c001956e:	83 c4 1c             	add    esp,0x1c
c0019571:	c3                   	ret    

c0019572 <fatWrapperIoctl>:
c0019572:	53                   	push   ebx
c0019573:	83 ec 28             	sub    esp,0x28
c0019576:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001957a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001957e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019582:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019586:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001958b:	75 31                	jne    c00195be <fatWrapperIoctl+0x4c>
c001958d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019591:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019595:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001959a:	8b 04 85 40 34 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcbc0]
c00195a1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00195a7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00195ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00195b1:	66 89 02             	mov    WORD PTR [edx],ax
c00195b4:	b8 00 00 00 00       	mov    eax,0x0
c00195b9:	e9 b2 00 00 00       	jmp    c0019670 <fatWrapperIoctl+0xfe>
c00195be:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00195c3:	75 6a                	jne    c001962f <fatWrapperIoctl+0xbd>
c00195c5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195c9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00195cd:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00195d2:	8b 04 85 40 34 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcbc0]
c00195d9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00195df:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c00195e5:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c00195eb:	89 c8                	mov    eax,ecx
c00195ed:	89 da                	mov    edx,ebx
c00195ef:	0f a4 c2 0a          	shld   edx,eax,0xa
c00195f3:	c1 e0 0a             	shl    eax,0xa
c00195f6:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00195fb:	8b 0c 8d 40 34 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdcbc0]
c0019602:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019608:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001960e:	89 cb                	mov    ebx,ecx
c0019610:	c1 fb 1f             	sar    ebx,0x1f
c0019613:	53                   	push   ebx
c0019614:	51                   	push   ecx
c0019615:	52                   	push   edx
c0019616:	50                   	push   eax
c0019617:	e8 b0 4a 00 00       	call   c001e0cc <__udivdi3>
c001961c:	83 c4 10             	add    esp,0x10
c001961f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0019623:	89 01                	mov    DWORD PTR [ecx],eax
c0019625:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019628:	b8 00 00 00 00       	mov    eax,0x0
c001962d:	eb 41                	jmp    c0019670 <fatWrapperIoctl+0xfe>
c001962f:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0019634:	75 07                	jne    c001963d <fatWrapperIoctl+0xcb>
c0019636:	b8 00 00 00 00       	mov    eax,0x0
c001963b:	eb 33                	jmp    c0019670 <fatWrapperIoctl+0xfe>
c001963d:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0019642:	75 19                	jne    c001965d <fatWrapperIoctl+0xeb>
c0019644:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019648:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001964c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019650:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019656:	b8 00 00 00 00       	mov    eax,0x0
c001965b:	eb 13                	jmp    c0019670 <fatWrapperIoctl+0xfe>
c001965d:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0019662:	75 07                	jne    c001966b <fatWrapperIoctl+0xf9>
c0019664:	b8 00 00 00 00       	mov    eax,0x0
c0019669:	eb 05                	jmp    c0019670 <fatWrapperIoctl+0xfe>
c001966b:	b8 04 00 00 00       	mov    eax,0x4
c0019670:	83 c4 28             	add    esp,0x28
c0019673:	5b                   	pop    ebx
c0019674:	c3                   	ret    
c0019675:	90                   	nop

c0019676 <FAT::FAT()>:
c0019676:	83 ec 1c             	sub    esp,0x1c
c0019679:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001967d:	83 ec 0c             	sub    esp,0xc
c0019680:	50                   	push   eax
c0019681:	e8 86 5d ff ff       	call   c000f40c <Filesystem::Filesystem()>
c0019686:	83 c4 10             	add    esp,0x10
c0019689:	ba 40 1a 02 c0       	mov    edx,0xc0021a40
c001968e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019692:	89 10                	mov    DWORD PTR [eax],edx
c0019694:	c7 05 c0 42 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00242c0,0x0
c001969e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00196a6:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00196ab:	7f 15                	jg     c00196c2 <FAT::FAT()+0x4c>
c00196ad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00196b1:	c7 04 85 e0 42 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdbd20],0xffffffff
c00196bc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00196c0:	eb e4                	jmp    c00196a6 <FAT::FAT()+0x30>
c00196c2:	90                   	nop
c00196c3:	83 c4 1c             	add    esp,0x1c
c00196c6:	c3                   	ret    
c00196c7:	90                   	nop

c00196c8 <FAT::fixFilepath(char*)>:
c00196c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196cc:	8a 00                	mov    al,BYTE PTR [eax]
c00196ce:	3c 40                	cmp    al,0x40
c00196d0:	7e 2c                	jle    c00196fe <FAT::fixFilepath(char*)+0x36>
c00196d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196d6:	8a 00                	mov    al,BYTE PTR [eax]
c00196d8:	83 e8 41             	sub    eax,0x41
c00196db:	88 c2                	mov    dl,al
c00196dd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196e1:	88 10                	mov    BYTE PTR [eax],dl
c00196e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196e7:	8a 00                	mov    al,BYTE PTR [eax]
c00196e9:	0f be c0             	movsx  eax,al
c00196ec:	8b 04 85 e0 42 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdbd20]
c00196f3:	83 c0 30             	add    eax,0x30
c00196f6:	88 c2                	mov    dl,al
c00196f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196fc:	88 10                	mov    BYTE PTR [eax],dl
c00196fe:	90                   	nop
c00196ff:	c3                   	ret    

c0019700 <FAT::open(char const*, void**, FileOpenMode)>:
c0019700:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019706:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001970e:	74 0a                	je     c001971a <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0019710:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019718:	75 0a                	jne    c0019724 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001971a:	b8 04 00 00 00       	mov    eax,0x4
c001971f:	e9 fd 00 00 00       	jmp    c0019821 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0019724:	83 ec 08             	sub    esp,0x8
c0019727:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001972e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019732:	50                   	push   eax
c0019733:	e8 6f 6f fe ff       	call   c00006a7 <strcpy>
c0019738:	83 c4 10             	add    esp,0x10
c001973b:	83 ec 08             	sub    esp,0x8
c001973e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019742:	50                   	push   eax
c0019743:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001974a:	e8 79 ff ff ff       	call   c00196c8 <FAT::fixFilepath(char*)>
c001974f:	83 c4 10             	add    esp,0x10
c0019752:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001975a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019761:	83 e0 01             	and    eax,0x1
c0019764:	74 08                	je     c001976e <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0019766:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001976e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019775:	83 e0 04             	and    eax,0x4
c0019778:	74 10                	je     c001978a <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001977a:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0019782:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001978a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0019791:	83 e0 02             	and    eax,0x2
c0019794:	74 08                	je     c001979e <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0019796:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001979e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00197a5:	83 e0 08             	and    eax,0x8
c00197a8:	74 08                	je     c00197b2 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00197aa:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00197b2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00197b9:	83 e0 10             	and    eax,0x10
c00197bc:	74 08                	je     c00197c6 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00197be:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00197c6:	83 ec 0c             	sub    esp,0xc
c00197c9:	68 50 02 00 00       	push   0x250
c00197ce:	e8 5e 29 ff ff       	call   c000c131 <malloc>
c00197d3:	83 c4 10             	add    esp,0x10
c00197d6:	89 c2                	mov    edx,eax
c00197d8:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00197df:	89 10                	mov    DWORD PTR [eax],edx
c00197e1:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c00197e9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00197f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00197f2:	83 ec 04             	sub    esp,0x4
c00197f5:	52                   	push   edx
c00197f6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00197fa:	52                   	push   edx
c00197fb:	50                   	push   eax
c00197fc:	e8 bd b4 fe ff       	call   c0004cbe <f_open>
c0019801:	83 c4 10             	add    esp,0x10
c0019804:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001980b:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019813:	74 07                	je     c001981c <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0019815:	b8 01 00 00 00       	mov    eax,0x1
c001981a:	eb 05                	jmp    c0019821 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c001981c:	b8 00 00 00 00       	mov    eax,0x0
c0019821:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019827:	c3                   	ret    

c0019828 <FAT::openDir(char const*, void**)>:
c0019828:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001982e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019836:	74 0a                	je     c0019842 <FAT::openDir(char const*, void**)+0x1a>
c0019838:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019840:	75 07                	jne    c0019849 <FAT::openDir(char const*, void**)+0x21>
c0019842:	b8 04 00 00 00       	mov    eax,0x4
c0019847:	eb 7d                	jmp    c00198c6 <FAT::openDir(char const*, void**)+0x9e>
c0019849:	83 ec 08             	sub    esp,0x8
c001984c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019853:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019857:	50                   	push   eax
c0019858:	e8 4a 6e fe ff       	call   c00006a7 <strcpy>
c001985d:	83 c4 10             	add    esp,0x10
c0019860:	83 ec 08             	sub    esp,0x8
c0019863:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019867:	50                   	push   eax
c0019868:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001986f:	e8 54 fe ff ff       	call   c00196c8 <FAT::fixFilepath(char*)>
c0019874:	83 c4 10             	add    esp,0x10
c0019877:	83 ec 0c             	sub    esp,0xc
c001987a:	6a 4c                	push   0x4c
c001987c:	e8 b0 28 ff ff       	call   c000c131 <malloc>
c0019881:	83 c4 10             	add    esp,0x10
c0019884:	89 c2                	mov    edx,eax
c0019886:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001988d:	89 10                	mov    DWORD PTR [eax],edx
c001988f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019896:	8b 00                	mov    eax,DWORD PTR [eax]
c0019898:	83 ec 08             	sub    esp,0x8
c001989b:	8d 54 24 14          	lea    edx,[esp+0x14]
c001989f:	52                   	push   edx
c00198a0:	50                   	push   eax
c00198a1:	e8 50 c4 fe ff       	call   c0005cf6 <f_opendir>
c00198a6:	83 c4 10             	add    esp,0x10
c00198a9:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00198b0:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00198b8:	74 07                	je     c00198c1 <FAT::openDir(char const*, void**)+0x99>
c00198ba:	b8 01 00 00 00       	mov    eax,0x1
c00198bf:	eb 05                	jmp    c00198c6 <FAT::openDir(char const*, void**)+0x9e>
c00198c1:	b8 00 00 00 00       	mov    eax,0x0
c00198c6:	81 c4 1c 01 00 00    	add    esp,0x11c
c00198cc:	c3                   	ret    
c00198cd:	90                   	nop

c00198ce <FAT::stat(char const*, unsigned long long*, bool*)>:
c00198ce:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00198d4:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c00198dc:	75 0a                	jne    c00198e8 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c00198de:	b8 04 00 00 00       	mov    eax,0x4
c00198e3:	e9 c9 00 00 00       	jmp    c00199b1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00198e8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c00198f0:	75 0a                	jne    c00198fc <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c00198f2:	b8 04 00 00 00       	mov    eax,0x4
c00198f7:	e9 b5 00 00 00       	jmp    c00199b1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00198fc:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019904:	75 0a                	jne    c0019910 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0019906:	b8 04 00 00 00       	mov    eax,0x4
c001990b:	e9 a1 00 00 00       	jmp    c00199b1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0019910:	83 ec 08             	sub    esp,0x8
c0019913:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001991a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019921:	50                   	push   eax
c0019922:	e8 80 6d fe ff       	call   c00006a7 <strcpy>
c0019927:	83 c4 10             	add    esp,0x10
c001992a:	83 ec 08             	sub    esp,0x8
c001992d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019934:	50                   	push   eax
c0019935:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001993c:	e8 87 fd ff ff       	call   c00196c8 <FAT::fixFilepath(char*)>
c0019941:	83 c4 10             	add    esp,0x10
c0019944:	83 ec 08             	sub    esp,0x8
c0019947:	8d 44 24 08          	lea    eax,[esp+0x8]
c001994b:	50                   	push   eax
c001994c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0019953:	50                   	push   eax
c0019954:	e8 5c c5 fe ff       	call   c0005eb5 <f_stat>
c0019959:	83 c4 10             	add    esp,0x10
c001995c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019963:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001996a:	85 c0                	test   eax,eax
c001996c:	74 07                	je     c0019975 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001996e:	83 f8 04             	cmp    eax,0x4
c0019971:	74 32                	je     c00199a5 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0019973:	eb 37                	jmp    c00199ac <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0019975:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019979:	0f b6 c0             	movzx  eax,al
c001997c:	83 e0 10             	and    eax,0x10
c001997f:	0f 95 c2             	setne  dl
c0019982:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019989:	88 10                	mov    BYTE PTR [eax],dl
c001998b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001998e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019992:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019999:	89 01                	mov    DWORD PTR [ecx],eax
c001999b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001999e:	b8 00 00 00 00       	mov    eax,0x0
c00199a3:	eb 0c                	jmp    c00199b1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00199a5:	b8 02 00 00 00       	mov    eax,0x2
c00199aa:	eb 05                	jmp    c00199b1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00199ac:	b8 01 00 00 00       	mov    eax,0x1
c00199b1:	81 c4 2c 02 00 00    	add    esp,0x22c
c00199b7:	c3                   	ret    

c00199b8 <FAT::unlink(char const*)>:
c00199b8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00199be:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00199c6:	75 07                	jne    c00199cf <FAT::unlink(char const*)+0x17>
c00199c8:	b8 04 00 00 00       	mov    eax,0x4
c00199cd:	eb 5c                	jmp    c0019a2b <FAT::unlink(char const*)+0x73>
c00199cf:	83 ec 08             	sub    esp,0x8
c00199d2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00199dd:	50                   	push   eax
c00199de:	e8 c4 6c fe ff       	call   c00006a7 <strcpy>
c00199e3:	83 c4 10             	add    esp,0x10
c00199e6:	83 ec 08             	sub    esp,0x8
c00199e9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00199ed:	50                   	push   eax
c00199ee:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00199f5:	e8 ce fc ff ff       	call   c00196c8 <FAT::fixFilepath(char*)>
c00199fa:	83 c4 10             	add    esp,0x10
c00199fd:	83 ec 0c             	sub    esp,0xc
c0019a00:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a04:	50                   	push   eax
c0019a05:	e8 fd c7 fe ff       	call   c0006207 <f_unlink>
c0019a0a:	83 c4 10             	add    esp,0x10
c0019a0d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019a14:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019a1b:	85 c0                	test   eax,eax
c0019a1d:	75 07                	jne    c0019a26 <FAT::unlink(char const*)+0x6e>
c0019a1f:	b8 00 00 00 00       	mov    eax,0x0
c0019a24:	eb 05                	jmp    c0019a2b <FAT::unlink(char const*)+0x73>
c0019a26:	b8 01 00 00 00       	mov    eax,0x1
c0019a2b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019a31:	c3                   	ret    

c0019a32 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019a32:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019a38:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019a3f:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019a46:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019a4a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019a4e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019a56:	75 0a                	jne    c0019a62 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019a58:	b8 04 00 00 00       	mov    eax,0x4
c0019a5d:	e9 1c 01 00 00       	jmp    c0019b7e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019a62:	83 ec 08             	sub    esp,0x8
c0019a65:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019a6c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019a70:	50                   	push   eax
c0019a71:	e8 31 6c fe ff       	call   c00006a7 <strcpy>
c0019a76:	83 c4 10             	add    esp,0x10
c0019a79:	83 ec 08             	sub    esp,0x8
c0019a7c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019a80:	50                   	push   eax
c0019a81:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019a88:	e8 3b fc ff ff       	call   c00196c8 <FAT::fixFilepath(char*)>
c0019a8d:	83 c4 10             	add    esp,0x10
c0019a90:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019a98:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019aa0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019aa5:	83 e0 01             	and    eax,0x1
c0019aa8:	74 08                	je     c0019ab2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0019aaa:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0019ab2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ab7:	83 e0 02             	and    eax,0x2
c0019aba:	74 08                	je     c0019ac4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0019abc:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0019ac4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ac9:	83 e0 04             	and    eax,0x4
c0019acc:	74 08                	je     c0019ad6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0019ace:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0019ad6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019adb:	83 e0 08             	and    eax,0x8
c0019ade:	74 08                	je     c0019ae8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0019ae0:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0019ae8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019aed:	83 e0 01             	and    eax,0x1
c0019af0:	74 08                	je     c0019afa <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0019af2:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0019afa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019aff:	83 e0 02             	and    eax,0x2
c0019b02:	74 08                	je     c0019b0c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0019b04:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0019b0c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b11:	83 e0 04             	and    eax,0x4
c0019b14:	74 08                	je     c0019b1e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0019b16:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0019b1e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019b23:	83 e0 08             	and    eax,0x8
c0019b26:	74 08                	je     c0019b30 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0019b28:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0019b30:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b37:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0019b3e:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019b46:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019b4e:	83 ec 04             	sub    esp,0x4
c0019b51:	52                   	push   edx
c0019b52:	50                   	push   eax
c0019b53:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019b57:	50                   	push   eax
c0019b58:	e8 4c cd fe ff       	call   c00068a9 <f_chmod>
c0019b5d:	83 c4 10             	add    esp,0x10
c0019b60:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019b67:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019b6e:	85 c0                	test   eax,eax
c0019b70:	75 07                	jne    c0019b79 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0019b72:	b8 00 00 00 00       	mov    eax,0x0
c0019b77:	eb 05                	jmp    c0019b7e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0019b79:	b8 01 00 00 00       	mov    eax,0x1
c0019b7e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019b84:	c3                   	ret    
c0019b85:	90                   	nop

c0019b86 <FAT::rename(char const*, char const*)>:
c0019b86:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019b8c:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019b94:	74 0a                	je     c0019ba0 <FAT::rename(char const*, char const*)+0x1a>
c0019b96:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019b9e:	75 0a                	jne    c0019baa <FAT::rename(char const*, char const*)+0x24>
c0019ba0:	b8 04 00 00 00       	mov    eax,0x4
c0019ba5:	e9 98 00 00 00       	jmp    c0019c42 <FAT::rename(char const*, char const*)+0xbc>
c0019baa:	83 ec 08             	sub    esp,0x8
c0019bad:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019bb4:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019bbb:	50                   	push   eax
c0019bbc:	e8 e6 6a fe ff       	call   c00006a7 <strcpy>
c0019bc1:	83 c4 10             	add    esp,0x10
c0019bc4:	83 ec 08             	sub    esp,0x8
c0019bc7:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019bce:	50                   	push   eax
c0019bcf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019bd6:	e8 ed fa ff ff       	call   c00196c8 <FAT::fixFilepath(char*)>
c0019bdb:	83 c4 10             	add    esp,0x10
c0019bde:	83 ec 08             	sub    esp,0x8
c0019be1:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019be8:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019bec:	50                   	push   eax
c0019bed:	e8 b5 6a fe ff       	call   c00006a7 <strcpy>
c0019bf2:	83 c4 10             	add    esp,0x10
c0019bf5:	83 ec 08             	sub    esp,0x8
c0019bf8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019bfc:	50                   	push   eax
c0019bfd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019c04:	e8 bf fa ff ff       	call   c00196c8 <FAT::fixFilepath(char*)>
c0019c09:	83 c4 10             	add    esp,0x10
c0019c0c:	83 ec 08             	sub    esp,0x8
c0019c0f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c13:	50                   	push   eax
c0019c14:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019c1b:	50                   	push   eax
c0019c1c:	e8 95 c9 fe ff       	call   c00065b6 <f_rename>
c0019c21:	83 c4 10             	add    esp,0x10
c0019c24:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019c2b:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019c32:	85 c0                	test   eax,eax
c0019c34:	75 07                	jne    c0019c3d <FAT::rename(char const*, char const*)+0xb7>
c0019c36:	b8 00 00 00 00       	mov    eax,0x0
c0019c3b:	eb 05                	jmp    c0019c42 <FAT::rename(char const*, char const*)+0xbc>
c0019c3d:	b8 01 00 00 00       	mov    eax,0x1
c0019c42:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019c48:	c3                   	ret    
c0019c49:	90                   	nop

c0019c4a <FAT::mkdir(char const*)>:
c0019c4a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019c50:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019c58:	75 07                	jne    c0019c61 <FAT::mkdir(char const*)+0x17>
c0019c5a:	b8 04 00 00 00       	mov    eax,0x4
c0019c5f:	eb 5c                	jmp    c0019cbd <FAT::mkdir(char const*)+0x73>
c0019c61:	83 ec 08             	sub    esp,0x8
c0019c64:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c6b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c6f:	50                   	push   eax
c0019c70:	e8 32 6a fe ff       	call   c00006a7 <strcpy>
c0019c75:	83 c4 10             	add    esp,0x10
c0019c78:	83 ec 08             	sub    esp,0x8
c0019c7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c7f:	50                   	push   eax
c0019c80:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019c87:	e8 3c fa ff ff       	call   c00196c8 <FAT::fixFilepath(char*)>
c0019c8c:	83 c4 10             	add    esp,0x10
c0019c8f:	83 ec 0c             	sub    esp,0xc
c0019c92:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019c96:	50                   	push   eax
c0019c97:	e8 ee c6 fe ff       	call   c000638a <f_mkdir>
c0019c9c:	83 c4 10             	add    esp,0x10
c0019c9f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019ca6:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019cad:	85 c0                	test   eax,eax
c0019caf:	75 07                	jne    c0019cb8 <FAT::mkdir(char const*)+0x6e>
c0019cb1:	b8 00 00 00 00       	mov    eax,0x0
c0019cb6:	eb 05                	jmp    c0019cbd <FAT::mkdir(char const*)+0x73>
c0019cb8:	b8 01 00 00 00       	mov    eax,0x1
c0019cbd:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019cc3:	c3                   	ret    

c0019cc4 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019cc4:	b8 08 00 00 00       	mov    eax,0x8
c0019cc9:	c3                   	ret    

c0019cca <ISO9660::seek(void*, unsigned long long)>:
c0019cca:	53                   	push   ebx
c0019ccb:	b8 04 00 00 00       	mov    eax,0x4
c0019cd0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019cd4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019cd8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019cdc:	85 d2                	test   edx,edx
c0019cde:	74 17                	je     c0019cf7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019ce0:	89 c8                	mov    eax,ecx
c0019ce2:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0019ce5:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0019ce8:	b8 01 00 00 00       	mov    eax,0x1
c0019ced:	73 08                	jae    c0019cf7 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0019cef:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0019cf2:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0019cf5:	31 c0                	xor    eax,eax
c0019cf7:	5b                   	pop    ebx
c0019cf8:	c3                   	ret    
c0019cf9:	90                   	nop

c0019cfa <ISO9660::tell(void*, unsigned long long*)>:
c0019cfa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019cfe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d02:	85 d2                	test   edx,edx
c0019d04:	74 12                	je     c0019d18 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019d06:	85 c0                	test   eax,eax
c0019d08:	74 0e                	je     c0019d18 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0019d0a:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0019d0d:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0019d10:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019d13:	89 10                	mov    DWORD PTR [eax],edx
c0019d15:	31 c0                	xor    eax,eax
c0019d17:	c3                   	ret    
c0019d18:	b8 04 00 00 00       	mov    eax,0x4
c0019d1d:	c3                   	ret    

c0019d1e <ISO9660::getName()>:
c0019d1e:	b8 9c 1a 02 c0       	mov    eax,0xc0021a9c
c0019d23:	c3                   	ret    

c0019d24 <ISO9660::stat(void*, unsigned long long*)>:
c0019d24:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019d28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019d2c:	85 d2                	test   edx,edx
c0019d2e:	74 12                	je     c0019d42 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019d30:	85 c0                	test   eax,eax
c0019d32:	74 0e                	je     c0019d42 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0019d34:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0019d37:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0019d3a:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0019d3d:	89 10                	mov    DWORD PTR [eax],edx
c0019d3f:	31 c0                	xor    eax,eax
c0019d41:	c3                   	ret    
c0019d42:	b8 04 00 00 00       	mov    eax,0x4
c0019d47:	c3                   	ret    

c0019d48 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019d48:	b8 01 00 00 00       	mov    eax,0x1
c0019d4d:	c3                   	ret    

c0019d4e <ISO9660::unlink(char const*)>:
c0019d4e:	b8 01 00 00 00       	mov    eax,0x1
c0019d53:	c3                   	ret    

c0019d54 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019d54:	b8 01 00 00 00       	mov    eax,0x1
c0019d59:	c3                   	ret    

c0019d5a <ISO9660::rename(char const*, char const*)>:
c0019d5a:	b8 01 00 00 00       	mov    eax,0x1
c0019d5f:	c3                   	ret    

c0019d60 <ISO9660::mkdir(char const*)>:
c0019d60:	b8 01 00 00 00       	mov    eax,0x1
c0019d65:	c3                   	ret    

c0019d66 <ISO9660::close(void*)>:
c0019d66:	83 ec 0c             	sub    esp,0xc
c0019d69:	b8 04 00 00 00       	mov    eax,0x4
c0019d6e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d72:	85 d2                	test   edx,edx
c0019d74:	74 0e                	je     c0019d84 <ISO9660::close(void*)+0x1e>
c0019d76:	83 ec 0c             	sub    esp,0xc
c0019d79:	52                   	push   edx
c0019d7a:	e8 c2 23 ff ff       	call   c000c141 <free>
c0019d7f:	83 c4 10             	add    esp,0x10
c0019d82:	31 c0                	xor    eax,eax
c0019d84:	83 c4 0c             	add    esp,0xc
c0019d87:	c3                   	ret    

c0019d88 <ISO9660::closeDir(void*)>:
c0019d88:	83 ec 0c             	sub    esp,0xc
c0019d8b:	b8 04 00 00 00       	mov    eax,0x4
c0019d90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d94:	85 d2                	test   edx,edx
c0019d96:	74 0e                	je     c0019da6 <ISO9660::closeDir(void*)+0x1e>
c0019d98:	83 ec 0c             	sub    esp,0xc
c0019d9b:	52                   	push   edx
c0019d9c:	e8 a0 23 ff ff       	call   c000c141 <free>
c0019da1:	83 c4 10             	add    esp,0x10
c0019da4:	31 c0                	xor    eax,eax
c0019da6:	83 c4 0c             	add    esp,0xc
c0019da9:	c3                   	ret    

c0019daa <ISO9660::~ISO9660()>:
c0019daa:	83 ec 0c             	sub    esp,0xc
c0019dad:	ba f0 1a 02 c0       	mov    edx,0xc0021af0
c0019db2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019db6:	89 10                	mov    DWORD PTR [eax],edx
c0019db8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dbc:	83 ec 0c             	sub    esp,0xc
c0019dbf:	50                   	push   eax
c0019dc0:	e8 6b 56 ff ff       	call   c000f430 <Filesystem::~Filesystem()>
c0019dc5:	83 c4 10             	add    esp,0x10
c0019dc8:	90                   	nop
c0019dc9:	83 c4 0c             	add    esp,0xc
c0019dcc:	c3                   	ret    
c0019dcd:	90                   	nop

c0019dce <ISO9660::~ISO9660()>:
c0019dce:	83 ec 0c             	sub    esp,0xc
c0019dd1:	83 ec 0c             	sub    esp,0xc
c0019dd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019dd8:	e8 cd ff ff ff       	call   c0019daa <ISO9660::~ISO9660()>
c0019ddd:	83 c4 10             	add    esp,0x10
c0019de0:	83 ec 08             	sub    esp,0x8
c0019de3:	6a 08                	push   0x8
c0019de5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019de9:	e8 29 54 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c0019dee:	83 c4 10             	add    esp,0x10
c0019df1:	83 c4 0c             	add    esp,0xc
c0019df4:	c3                   	ret    

c0019df5 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0019df5:	55                   	push   ebp
c0019df6:	31 c9                	xor    ecx,ecx
c0019df8:	57                   	push   edi
c0019df9:	56                   	push   esi
c0019dfa:	53                   	push   ebx
c0019dfb:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0019dff:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019e03:	89 eb                	mov    ebx,ebp
c0019e05:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0019e09:	39 ce                	cmp    esi,ecx
c0019e0b:	7e 17                	jle    c0019e24 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0019e0d:	31 d2                	xor    edx,edx
c0019e0f:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0019e13:	7d 13                	jge    c0019e28 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0019e15:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0019e19:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0019e1c:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0019e1f:	75 0d                	jne    c0019e2e <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0019e21:	42                   	inc    edx
c0019e22:	eb eb                	jmp    c0019e0f <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0019e24:	31 c0                	xor    eax,eax
c0019e26:	eb 0a                	jmp    c0019e32 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0019e28:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0019e2c:	eb 04                	jmp    c0019e32 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0019e2e:	41                   	inc    ecx
c0019e2f:	43                   	inc    ebx
c0019e30:	eb d7                	jmp    c0019e09 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0019e32:	5b                   	pop    ebx
c0019e33:	5e                   	pop    esi
c0019e34:	5f                   	pop    edi
c0019e35:	5d                   	pop    ebp
c0019e36:	c3                   	ret    

c0019e37 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0019e37:	56                   	push   esi
c0019e38:	53                   	push   ebx
c0019e39:	52                   	push   edx
c0019e3a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019e3e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019e42:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e46:	39 0d c0 43 02 c0    	cmp    DWORD PTR ds:0xc00243c0,ecx
c0019e4c:	75 08                	jne    c0019e56 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0019e4e:	38 05 e8 28 02 c0    	cmp    BYTE PTR ds:0xc00228e8,al
c0019e54:	74 2b                	je     c0019e81 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0019e56:	83 ec 0c             	sub    esp,0xc
c0019e59:	a2 e8 28 02 c0       	mov    ds:0xc00228e8,al
c0019e5e:	68 e0 43 02 c0       	push   0xc00243e0
c0019e63:	0f be c0             	movsx  eax,al
c0019e66:	6a 01                	push   0x1
c0019e68:	89 0d c0 43 02 c0    	mov    DWORD PTR ds:0xc00243c0,ecx
c0019e6e:	31 db                	xor    ebx,ebx
c0019e70:	53                   	push   ebx
c0019e71:	51                   	push   ecx
c0019e72:	ff 34 85 3c 33 02 c0 	push   DWORD PTR [eax*4-0x3ffdccc4]
c0019e79:	e8 5a 81 ff ff       	call   c0011fd8 <LogicalDisk::read(unsigned long long, int, void*)>
c0019e7e:	83 c4 20             	add    esp,0x20
c0019e81:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0019e89:	c7 44 24 14 e0 43 02 c0 	mov    DWORD PTR [esp+0x14],0xc00243e0
c0019e91:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0019e95:	58                   	pop    eax
c0019e96:	5b                   	pop    ebx
c0019e97:	5e                   	pop    esi
c0019e98:	e9 35 67 fe ff       	jmp    c00005d2 <memcpy>
c0019e9d:	90                   	nop

c0019e9e <ISO9660::tryMount(LogicalDisk*, int)>:
c0019e9e:	81 ec 10 08 00 00    	sub    esp,0x810
c0019ea4:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0019eab:	83 c0 41             	add    eax,0x41
c0019eae:	0f be c0             	movsx  eax,al
c0019eb1:	50                   	push   eax
c0019eb2:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019eb6:	50                   	push   eax
c0019eb7:	6a 10                	push   0x10
c0019eb9:	e8 79 ff ff ff       	call   c0019e37 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019ebe:	83 c4 10             	add    esp,0x10
c0019ec1:	31 c0                	xor    eax,eax
c0019ec3:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0019ec8:	75 1d                	jne    c0019ee7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019eca:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0019ecf:	75 16                	jne    c0019ee7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019ed1:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0019ed6:	75 0f                	jne    c0019ee7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019ed8:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0019edd:	75 08                	jne    c0019ee7 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0019edf:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0019ee4:	0f 94 c0             	sete   al
c0019ee7:	81 c4 0c 08 00 00    	add    esp,0x80c
c0019eed:	c3                   	ret    

c0019eee <ISO9660::read(void*, unsigned long, void*, int*)>:
c0019eee:	55                   	push   ebp
c0019eef:	57                   	push   edi
c0019ef0:	56                   	push   esi
c0019ef1:	53                   	push   ebx
c0019ef2:	81 ec 34 08 00 00    	sub    esp,0x834
c0019ef8:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c0019eff:	55                   	push   ebp
c0019f00:	68 b7 1a 02 c0       	push   0xc0021ab7
c0019f05:	e8 2c 1c ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c0019f0a:	83 c4 10             	add    esp,0x10
c0019f0d:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c0019f15:	0f 84 06 02 00 00    	je     c001a121 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c0019f1b:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0019f23:	0f 84 f8 01 00 00    	je     c001a121 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c0019f29:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c0019f30:	b8 01 00 00 00       	mov    eax,0x1
c0019f35:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c0019f39:	0f 85 e7 01 00 00    	jne    c001a126 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c0019f3f:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c0019f42:	31 d2                	xor    edx,edx
c0019f44:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c0019f47:	89 e9                	mov    ecx,ebp
c0019f49:	89 d3                	mov    ebx,edx
c0019f4b:	01 f1                	add    ecx,esi
c0019f4d:	11 fb                	adc    ebx,edi
c0019f4f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0019f53:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019f57:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c0019f5e:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0019f61:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c0019f64:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0019f68:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0019f6c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019f70:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0019f74:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c0019f78:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0019f7c:	72 19                	jb     c0019f97 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c0019f7e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019f82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f86:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019f8a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019f8d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019f91:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019f95:	eb 13                	jmp    c0019faa <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c0019f97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f9b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019f9f:	29 f0                	sub    eax,esi
c0019fa1:	19 fa                	sbb    edx,edi
c0019fa3:	89 04 24             	mov    DWORD PTR [esp],eax
c0019fa6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0019faa:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c0019fb1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0019fb4:	8b 00                	mov    eax,DWORD PTR [eax]
c0019fb6:	53                   	push   ebx
c0019fb7:	0f a4 c2 0b          	shld   edx,eax,0xb
c0019fbb:	c1 e0 0b             	shl    eax,0xb
c0019fbe:	01 c6                	add    esi,eax
c0019fc0:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0019fc7:	11 d7                	adc    edi,edx
c0019fc9:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c0019fcd:	89 fa                	mov    edx,edi
c0019fcf:	50                   	push   eax
c0019fd0:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019fd4:	50                   	push   eax
c0019fd5:	89 f0                	mov    eax,esi
c0019fd7:	0f ac d0 0b          	shrd   eax,edx,0xb
c0019fdb:	50                   	push   eax
c0019fdc:	e8 56 fe ff ff       	call   c0019e37 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0019fe1:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0019fe8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019fec:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019fef:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0019ff3:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0019ff9:	83 c4 10             	add    esp,0x10
c0019ffc:	b8 00 08 00 00       	mov    eax,0x800
c001a001:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001a005:	29 d0                	sub    eax,edx
c001a007:	39 c1                	cmp    ecx,eax
c001a009:	83 db 00             	sbb    ebx,0x0
c001a00c:	7d 19                	jge    c001a027 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001a00e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001a013:	75 16                	jne    c001a02b <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001a015:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a01c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a022:	e9 f6 00 00 00       	jmp    c001a11d <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001a027:	89 c5                	mov    ebp,eax
c001a029:	eb 03                	jmp    c001a02e <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001a02b:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001a02e:	51                   	push   ecx
c001a02f:	55                   	push   ebp
c001a030:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001a034:	50                   	push   eax
c001a035:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001a03c:	e8 91 65 fe ff       	call   c00005d2 <memcpy>
c001a041:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a045:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a049:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001a050:	01 e8                	add    eax,ebp
c001a052:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a056:	89 e8                	mov    eax,ebp
c001a058:	99                   	cdq    
c001a059:	01 ee                	add    esi,ebp
c001a05b:	11 d7                	adc    edi,edx
c001a05d:	29 e9                	sub    ecx,ebp
c001a05f:	19 d3                	sbb    ebx,edx
c001a061:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001a065:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a069:	83 c4 10             	add    esp,0x10
c001a06c:	b8 ff 07 00 00       	mov    eax,0x7ff
c001a071:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001a074:	b8 00 00 00 00       	mov    eax,0x0
c001a079:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a07d:	7d 3f                	jge    c001a0be <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001a07f:	52                   	push   edx
c001a080:	89 fa                	mov    edx,edi
c001a082:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a089:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a08d:	50                   	push   eax
c001a08e:	89 f0                	mov    eax,esi
c001a090:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a094:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a098:	50                   	push   eax
c001a099:	e8 99 fd ff ff       	call   c0019e37 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a09e:	81 c6 00 08 00 00    	add    esi,0x800
c001a0a4:	83 d7 00             	adc    edi,0x0
c001a0a7:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001a0af:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001a0b7:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001a0bc:	eb ab                	jmp    c001a069 <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001a0be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a0c2:	0b 04 24             	or     eax,DWORD PTR [esp]
c001a0c5:	74 34                	je     c001a0fb <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001a0c7:	89 fa                	mov    edx,edi
c001a0c9:	50                   	push   eax
c001a0ca:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001a0d1:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001a0d5:	50                   	push   eax
c001a0d6:	89 f0                	mov    eax,esi
c001a0d8:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a0dc:	0f ac d0 0b          	shrd   eax,edx,0xb
c001a0e0:	55                   	push   ebp
c001a0e1:	50                   	push   eax
c001a0e2:	e8 50 fd ff ff       	call   c0019e37 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a0e7:	83 c4 0c             	add    esp,0xc
c001a0ea:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001a0ee:	55                   	push   ebp
c001a0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a0f3:	e8 da 64 fe ff       	call   c00005d2 <memcpy>
c001a0f8:	83 c4 10             	add    esp,0x10
c001a0fb:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a102:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a106:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a10a:	89 38                	mov    DWORD PTR [eax],edi
c001a10c:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001a113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a117:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001a11a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001a11d:	31 c0                	xor    eax,eax
c001a11f:	eb 05                	jmp    c001a126 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001a121:	b8 04 00 00 00       	mov    eax,0x4
c001a126:	81 c4 2c 08 00 00    	add    esp,0x82c
c001a12c:	5b                   	pop    ebx
c001a12d:	5e                   	pop    esi
c001a12e:	5f                   	pop    edi
c001a12f:	5d                   	pop    ebp
c001a130:	c3                   	ret    
c001a131:	90                   	nop

c001a132 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a132:	55                   	push   ebp
c001a133:	57                   	push   edi
c001a134:	56                   	push   esi
c001a135:	53                   	push   ebx
c001a136:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001a13c:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001a143:	85 f6                	test   esi,esi
c001a145:	0f 84 65 02 00 00    	je     c001a3b0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27e>
c001a14b:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001a153:	0f 84 57 02 00 00    	je     c001a3b0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27e>
c001a159:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001a15c:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001a15f:	75 0a                	jne    c001a16b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001a161:	b8 07 00 00 00       	mov    eax,0x7
c001a166:	e9 4a 02 00 00       	jmp    c001a3b5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x283>
c001a16b:	50                   	push   eax
c001a16c:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a170:	50                   	push   eax
c001a171:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a178:	53                   	push   ebx
c001a179:	8b 06                	mov    eax,DWORD PTR [esi]
c001a17b:	c1 e0 0b             	shl    eax,0xb
c001a17e:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001a181:	c1 e8 0b             	shr    eax,0xb
c001a184:	50                   	push   eax
c001a185:	e8 ad fc ff ff       	call   c0019e37 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a18a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a18d:	83 c4 10             	add    esp,0x10
c001a190:	89 c1                	mov    ecx,eax
c001a192:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001a195:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001a19b:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001a19e:	84 db                	test   bl,bl
c001a1a0:	0f 85 90 00 00 00    	jne    c001a236 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001a1a6:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001a1ac:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a1b2:	29 c7                	sub    edi,eax
c001a1b4:	89 fb                	mov    ebx,edi
c001a1b6:	c1 fb 1f             	sar    ebx,0x1f
c001a1b9:	01 f8                	add    eax,edi
c001a1bb:	11 da                	adc    edx,ebx
c001a1bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a1c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001a1c5:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001a1c8:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001a1cb:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a1ce:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a1d1:	89 04 24             	mov    DWORD PTR [esp],eax
c001a1d4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001a1d8:	89 d8                	mov    eax,ebx
c001a1da:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001a1dd:	ba 00 00 00 00       	mov    edx,0x0
c001a1e2:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001a1e6:	b8 00 00 00 00       	mov    eax,0x0
c001a1eb:	73 0b                	jae    c001a1f8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a1ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001a1f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a1f4:	29 f8                	sub    eax,edi
c001a1f6:	19 da                	sbb    edx,ebx
c001a1f8:	89 d3                	mov    ebx,edx
c001a1fa:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a1fd:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a200:	09 c3                	or     ebx,eax
c001a202:	0f 84 59 ff ff ff    	je     c001a161 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001a208:	55                   	push   ebp
c001a209:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001a20d:	50                   	push   eax
c001a20e:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001a215:	53                   	push   ebx
c001a216:	8b 06                	mov    eax,DWORD PTR [esi]
c001a218:	c1 e0 0b             	shl    eax,0xb
c001a21b:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001a21f:	c1 e8 0b             	shr    eax,0xb
c001a222:	50                   	push   eax
c001a223:	e8 0f fc ff ff       	call   c0019e37 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a228:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a22b:	83 c4 10             	add    esp,0x10
c001a22e:	25 ff 07 00 00       	and    eax,0x7ff
c001a233:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001a236:	57                   	push   edi
c001a237:	6a 28                	push   0x28
c001a239:	6a 00                	push   0x0
c001a23b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a23f:	50                   	push   eax
c001a240:	e8 c3 63 fe ff       	call   c0000608 <memset>
c001a245:	31 d2                	xor    edx,edx
c001a247:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a24a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001a250:	89 f8                	mov    eax,edi
c001a252:	83 c0 21             	add    eax,0x21
c001a255:	83 d2 00             	adc    edx,0x0
c001a258:	89 c7                	mov    edi,eax
c001a25a:	89 d5                	mov    ebp,edx
c001a25c:	83 c4 10             	add    esp,0x10
c001a25f:	31 c9                	xor    ecx,ecx
c001a261:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001a268:	83 f9 28             	cmp    ecx,0x28
c001a26b:	88 04 24             	mov    BYTE PTR [esp],al
c001a26e:	0f 94 c2             	sete   dl
c001a271:	88 d0                	mov    al,dl
c001a273:	ba ff 07 00 00       	mov    edx,0x7ff
c001a278:	39 fa                	cmp    edx,edi
c001a27a:	ba 00 00 00 00       	mov    edx,0x0
c001a27f:	19 ea                	sbb    edx,ebp
c001a281:	0f 92 c2             	setb   dl
c001a284:	09 c2                	or     edx,eax
c001a286:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001a28a:	0f 94 c0             	sete   al
c001a28d:	08 d0                	or     al,dl
c001a28f:	75 16                	jne    c001a2a7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a291:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001a295:	74 10                	je     c001a2a7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001a297:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a29a:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001a29e:	41                   	inc    ecx
c001a29f:	83 c7 01             	add    edi,0x1
c001a2a2:	83 d5 00             	adc    ebp,0x0
c001a2a5:	eb ba                	jmp    c001a261 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001a2a7:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c001a2af:	83 ec 0c             	sub    esp,0xc
c001a2b2:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001a2b6:	57                   	push   edi
c001a2b7:	e8 69 63 fe ff       	call   c0000625 <strlen>
c001a2bc:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001a2c4:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a2c8:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001a2cf:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a2d2:	5a                   	pop    edx
c001a2d3:	25 ff 07 00 00       	and    eax,0x7ff
c001a2d8:	01 c8                	add    eax,ecx
c001a2da:	59                   	pop    ecx
c001a2db:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c001a2e1:	83 e0 02             	and    eax,0x2
c001a2e4:	3c 01                	cmp    al,0x1
c001a2e6:	19 c0                	sbb    eax,eax
c001a2e8:	83 c0 02             	add    eax,0x2
c001a2eb:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001a2ef:	57                   	push   edi
c001a2f0:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001a2f4:	50                   	push   eax
c001a2f5:	e8 ad 63 fe ff       	call   c00006a7 <strcpy>
c001a2fa:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001a2fe:	83 c4 10             	add    esp,0x10
c001a301:	84 c0                	test   al,al
c001a303:	75 21                	jne    c001a326 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f4>
c001a305:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001a30d:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a315:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a31d:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001a324:	eb 28                	jmp    c001a34e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21c>
c001a326:	fe c8                	dec    al
c001a328:	75 24                	jne    c001a34e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21c>
c001a32a:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001a332:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001a33a:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001a342:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001a349:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001a34e:	0f b6 fb             	movzx  edi,bl
c001a351:	31 db                	xor    ebx,ebx
c001a353:	50                   	push   eax
c001a354:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001a35b:	8d 44 24 48          	lea    eax,[esp+0x48]
c001a35f:	50                   	push   eax
c001a360:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001a367:	e8 66 62 fe ff       	call   c00005d2 <memcpy>
c001a36c:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001a373:	89 f9                	mov    ecx,edi
c001a375:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a37b:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001a37e:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001a381:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001a384:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001a387:	83 c4 10             	add    esp,0x10
c001a38a:	39 c7                	cmp    edi,eax
c001a38c:	89 df                	mov    edi,ebx
c001a38e:	19 d7                	sbb    edi,edx
c001a390:	72 10                	jb     c001a3a2 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x270>
c001a392:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001a399:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001a3a0:	eb 0a                	jmp    c001a3ac <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27a>
c001a3a2:	29 c8                	sub    eax,ecx
c001a3a4:	19 da                	sbb    edx,ebx
c001a3a6:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001a3a9:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001a3ac:	31 c0                	xor    eax,eax
c001a3ae:	eb 05                	jmp    c001a3b5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x283>
c001a3b0:	b8 04 00 00 00       	mov    eax,0x4
c001a3b5:	81 c4 5c 09 00 00    	add    esp,0x95c
c001a3bb:	5b                   	pop    ebx
c001a3bc:	5e                   	pop    esi
c001a3bd:	5f                   	pop    edi
c001a3be:	5d                   	pop    ebp
c001a3bf:	c3                   	ret    

c001a3c0 <readRoot(unsigned int*, unsigned int*, char)>:
c001a3c0:	81 ec 40 08 00 00    	sub    esp,0x840
c001a3c6:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001a3ce:	50                   	push   eax
c001a3cf:	8d 44 24 38          	lea    eax,[esp+0x38]
c001a3d3:	50                   	push   eax
c001a3d4:	6a 10                	push   0x10
c001a3d6:	e8 5c fa ff ff       	call   c0019e37 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a3db:	83 c4 0c             	add    esp,0xc
c001a3de:	6a 22                	push   0x22
c001a3e0:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001a3e7:	50                   	push   eax
c001a3e8:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a3ec:	50                   	push   eax
c001a3ed:	e8 e0 61 fe ff       	call   c00005d2 <memcpy>
c001a3f2:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001a3f9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a3fd:	89 10                	mov    DWORD PTR [eax],edx
c001a3ff:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001a406:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a40a:	89 10                	mov    DWORD PTR [eax],edx
c001a40c:	b0 01                	mov    al,0x1
c001a40e:	81 c4 4c 08 00 00    	add    esp,0x84c
c001a414:	c3                   	ret    

c001a415 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001a415:	55                   	push   ebp
c001a416:	57                   	push   edi
c001a417:	56                   	push   esi
c001a418:	53                   	push   ebx
c001a419:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a41f:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a426:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001a42d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a431:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001a435:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001a439:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a43d:	75 03                	jne    c001a442 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a43f:	83 c3 02             	add    ebx,0x2
c001a442:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001a445:	75 03                	jne    c001a44a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001a447:	43                   	inc    ebx
c001a448:	eb f8                	jmp    c001a442 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001a44a:	51                   	push   ecx
c001a44b:	68 00 01 00 00       	push   0x100
c001a450:	6a 00                	push   0x0
c001a452:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a456:	50                   	push   eax
c001a457:	e8 ac 61 fe ff       	call   c0000608 <memset>
c001a45c:	83 c4 10             	add    esp,0x10
c001a45f:	31 d2                	xor    edx,edx
c001a461:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001a464:	84 c0                	test   al,al
c001a466:	74 21                	je     c001a489 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001a468:	3c 2f                	cmp    al,0x2f
c001a46a:	75 0b                	jne    c001a477 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001a46c:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001a470:	bd 01 00 00 00       	mov    ebp,0x1
c001a475:	eb 14                	jmp    c001a48b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001a477:	8d 48 9f             	lea    ecx,[eax-0x61]
c001a47a:	80 f9 19             	cmp    cl,0x19
c001a47d:	77 03                	ja     c001a482 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a47f:	83 e8 20             	sub    eax,0x20
c001a482:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001a486:	42                   	inc    edx
c001a487:	eb d8                	jmp    c001a461 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001a489:	31 ed                	xor    ebp,ebp
c001a48b:	83 ec 0c             	sub    esp,0xc
c001a48e:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001a495:	e8 97 1c ff ff       	call   c000c131 <malloc>
c001a49a:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a4a1:	89 c6                	mov    esi,eax
c001a4a3:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001a4a9:	c1 ef 0b             	shr    edi,0xb
c001a4ac:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001a4b3:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001a4b7:	83 c4 10             	add    esp,0x10
c001a4ba:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001a4bf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a4c3:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001a4ca:	74 28                	je     c001a4f4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001a4cc:	52                   	push   edx
c001a4cd:	57                   	push   edi
c001a4ce:	50                   	push   eax
c001a4cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a4d3:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001a4da:	e8 58 f9 ff ff       	call   c0019e37 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a4df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4e3:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001a4ea:	05 00 08 00 00       	add    eax,0x800
c001a4ef:	83 c4 10             	add    esp,0x10
c001a4f2:	eb cb                	jmp    c001a4bf <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001a4f4:	83 ec 0c             	sub    esp,0xc
c001a4f7:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001a4fb:	57                   	push   edi
c001a4fc:	e8 24 61 fe ff       	call   c0000625 <strlen>
c001a501:	50                   	push   eax
c001a502:	57                   	push   edi
c001a503:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001a50a:	56                   	push   esi
c001a50b:	e8 e5 f8 ff ff       	call   c0019df5 <__memmem(unsigned char*, int, unsigned char*, int)>
c001a510:	83 c4 20             	add    esp,0x20
c001a513:	85 c0                	test   eax,eax
c001a515:	75 13                	jne    c001a52a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001a517:	83 ec 0c             	sub    esp,0xc
c001a51a:	56                   	push   esi
c001a51b:	e8 21 1c ff ff       	call   c000c141 <free>
c001a520:	83 c4 10             	add    esp,0x10
c001a523:	31 c0                	xor    eax,eax
c001a525:	e9 b3 00 00 00       	jmp    c001a5dd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a52a:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001a52e:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001a532:	c1 e7 08             	shl    edi,0x8
c001a535:	c1 e2 10             	shl    edx,0x10
c001a538:	09 d7                	or     edi,edx
c001a53a:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001a53e:	09 d7                	or     edi,edx
c001a540:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001a544:	c1 e2 18             	shl    edx,0x18
c001a547:	09 d7                	or     edi,edx
c001a549:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001a54d:	89 d1                	mov    ecx,edx
c001a54f:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001a553:	c1 e1 08             	shl    ecx,0x8
c001a556:	c1 e2 10             	shl    edx,0x10
c001a559:	09 ca                	or     edx,ecx
c001a55b:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001a55f:	09 ca                	or     edx,ecx
c001a561:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001a565:	c1 e1 18             	shl    ecx,0x18
c001a568:	09 ca                	or     edx,ecx
c001a56a:	89 e9                	mov    ecx,ebp
c001a56c:	84 c9                	test   cl,cl
c001a56e:	74 3c                	je     c001a5ac <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001a570:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a574:	83 ec 0c             	sub    esp,0xc
c001a577:	56                   	push   esi
c001a578:	e8 c4 1b ff ff       	call   c000c141 <free>
c001a57d:	83 c4 0c             	add    esp,0xc
c001a580:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a587:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001a58c:	50                   	push   eax
c001a58d:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a594:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a59b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a59f:	52                   	push   edx
c001a5a0:	57                   	push   edi
c001a5a1:	53                   	push   ebx
c001a5a2:	e8 6e fe ff ff       	call   c001a415 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a5a7:	83 c4 20             	add    esp,0x20
c001a5aa:	eb 31                	jmp    c001a5dd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001a5ac:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001a5af:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001a5b6:	d0 e8                	shr    al,1
c001a5b8:	89 3b                	mov    DWORD PTR [ebx],edi
c001a5ba:	83 e0 01             	and    eax,0x1
c001a5bd:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a5c4:	83 ec 0c             	sub    esp,0xc
c001a5c7:	89 13                	mov    DWORD PTR [ebx],edx
c001a5c9:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001a5d0:	89 03                	mov    DWORD PTR [ebx],eax
c001a5d2:	56                   	push   esi
c001a5d3:	e8 69 1b ff ff       	call   c000c141 <free>
c001a5d8:	83 c4 10             	add    esp,0x10
c001a5db:	b0 01                	mov    al,0x1
c001a5dd:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a5e3:	5b                   	pop    ebx
c001a5e4:	5e                   	pop    esi
c001a5e5:	5f                   	pop    edi
c001a5e6:	5d                   	pop    ebp
c001a5e7:	c3                   	ret    

c001a5e8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001a5e8:	55                   	push   ebp
c001a5e9:	57                   	push   edi
c001a5ea:	56                   	push   esi
c001a5eb:	53                   	push   ebx
c001a5ec:	83 ec 20             	sub    esp,0x20
c001a5ef:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001a5f3:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001a5f7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a5fb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a603:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001a60b:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001a610:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001a616:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001a61c:	57                   	push   edi
c001a61d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a621:	50                   	push   eax
c001a622:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a626:	50                   	push   eax
c001a627:	e8 94 fd ff ff       	call   c001a3c0 <readRoot(unsigned int*, unsigned int*, char)>
c001a62c:	5a                   	pop    edx
c001a62d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a631:	e8 ef 5f fe ff       	call   c0000625 <strlen>
c001a636:	83 c4 10             	add    esp,0x10
c001a639:	83 f8 03             	cmp    eax,0x3
c001a63c:	77 17                	ja     c001a655 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001a63e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a642:	89 03                	mov    DWORD PTR [ebx],eax
c001a644:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a648:	89 06                	mov    DWORD PTR [esi],eax
c001a64a:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001a651:	b0 01                	mov    al,0x1
c001a653:	eb 19                	jmp    c001a66e <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001a655:	50                   	push   eax
c001a656:	55                   	push   ebp
c001a657:	57                   	push   edi
c001a658:	56                   	push   esi
c001a659:	53                   	push   ebx
c001a65a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a65e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a662:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a666:	e8 aa fd ff ff       	call   c001a415 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001a66b:	83 c4 20             	add    esp,0x20
c001a66e:	83 c4 1c             	add    esp,0x1c
c001a671:	5b                   	pop    ebx
c001a672:	5e                   	pop    esi
c001a673:	5f                   	pop    edi
c001a674:	5d                   	pop    ebp
c001a675:	c3                   	ret    

c001a676 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001a676:	57                   	push   edi
c001a677:	56                   	push   esi
c001a678:	53                   	push   ebx
c001a679:	83 ec 10             	sub    esp,0x10
c001a67c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a680:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a684:	85 ff                	test   edi,edi
c001a686:	74 7b                	je     c001a703 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a688:	85 f6                	test   esi,esi
c001a68a:	74 77                	je     c001a703 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001a68c:	83 ec 0c             	sub    esp,0xc
c001a68f:	6a 1c                	push   0x1c
c001a691:	e8 9b 1a ff ff       	call   c000c131 <malloc>
c001a696:	89 07                	mov    DWORD PTR [edi],eax
c001a698:	89 c3                	mov    ebx,eax
c001a69a:	58                   	pop    eax
c001a69b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a69f:	50                   	push   eax
c001a6a0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a6a3:	50                   	push   eax
c001a6a4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a6a8:	50                   	push   eax
c001a6a9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a6ad:	50                   	push   eax
c001a6ae:	56                   	push   esi
c001a6af:	e8 34 ff ff ff       	call   c001a5e8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a6b4:	83 c4 20             	add    esp,0x20
c001a6b7:	84 c0                	test   al,al
c001a6b9:	74 07                	je     c001a6c2 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001a6bb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a6c0:	74 0b                	je     c001a6cd <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001a6c2:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a6c6:	b8 01 00 00 00       	mov    eax,0x1
c001a6cb:	eb 3b                	jmp    c001a708 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a6cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a6d1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a6d5:	89 03                	mov    DWORD PTR [ebx],eax
c001a6d7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a6de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6e2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a6e9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a6f0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a6f3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a6fa:	8a 06                	mov    al,BYTE PTR [esi]
c001a6fc:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a6ff:	31 c0                	xor    eax,eax
c001a701:	eb 05                	jmp    c001a708 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001a703:	b8 04 00 00 00       	mov    eax,0x4
c001a708:	83 c4 10             	add    esp,0x10
c001a70b:	5b                   	pop    ebx
c001a70c:	5e                   	pop    esi
c001a70d:	5f                   	pop    edi
c001a70e:	c3                   	ret    
c001a70f:	90                   	nop

c001a710 <ISO9660::exists(char const*)>:
c001a710:	83 ec 28             	sub    esp,0x28
c001a713:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a717:	8d 54 24 18          	lea    edx,[esp+0x18]
c001a71b:	52                   	push   edx
c001a71c:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001a71f:	52                   	push   edx
c001a720:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a724:	52                   	push   edx
c001a725:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001a729:	52                   	push   edx
c001a72a:	50                   	push   eax
c001a72b:	e8 b8 fe ff ff       	call   c001a5e8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a730:	83 c4 3c             	add    esp,0x3c
c001a733:	c3                   	ret    

c001a734 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a734:	56                   	push   esi
c001a735:	53                   	push   ebx
c001a736:	83 ec 14             	sub    esp,0x14
c001a739:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001a73d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001a741:	85 db                	test   ebx,ebx
c001a743:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001a747:	0f 94 c2             	sete   dl
c001a74a:	85 f6                	test   esi,esi
c001a74c:	0f 94 c0             	sete   al
c001a74f:	08 c2                	or     dl,al
c001a751:	75 68                	jne    c001a7bb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a753:	85 c9                	test   ecx,ecx
c001a755:	74 64                	je     c001a7bb <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001a757:	83 ec 0c             	sub    esp,0xc
c001a75a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a75d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a761:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a767:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a76e:	50                   	push   eax
c001a76f:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001a772:	50                   	push   eax
c001a773:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a777:	50                   	push   eax
c001a778:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a77c:	50                   	push   eax
c001a77d:	51                   	push   ecx
c001a77e:	e8 65 fe ff ff       	call   c001a5e8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a783:	83 c4 20             	add    esp,0x20
c001a786:	ba 01 00 00 00       	mov    edx,0x1
c001a78b:	84 c0                	test   al,al
c001a78d:	74 31                	je     c001a7c0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a78f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a793:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a79a:	89 03                	mov    DWORD PTR [ebx],eax
c001a79c:	ba 00 00 00 00       	mov    edx,0x0
c001a7a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a7a5:	85 c0                	test   eax,eax
c001a7a7:	0f 95 06             	setne  BYTE PTR [esi]
c001a7aa:	74 14                	je     c001a7c0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a7ac:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a7b2:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a7b9:	eb 05                	jmp    c001a7c0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001a7bb:	ba 04 00 00 00       	mov    edx,0x4
c001a7c0:	83 c4 14             	add    esp,0x14
c001a7c3:	89 d0                	mov    eax,edx
c001a7c5:	5b                   	pop    ebx
c001a7c6:	5e                   	pop    esi
c001a7c7:	c3                   	ret    

c001a7c8 <ISO9660::openDir(char const*, void**)>:
c001a7c8:	57                   	push   edi
c001a7c9:	56                   	push   esi
c001a7ca:	53                   	push   ebx
c001a7cb:	83 ec 10             	sub    esp,0x10
c001a7ce:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a7d2:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001a7d6:	85 ff                	test   edi,edi
c001a7d8:	0f 84 95 00 00 00    	je     c001a873 <ISO9660::openDir(char const*, void**)+0xab>
c001a7de:	85 f6                	test   esi,esi
c001a7e0:	0f 84 8d 00 00 00    	je     c001a873 <ISO9660::openDir(char const*, void**)+0xab>
c001a7e6:	83 ec 0c             	sub    esp,0xc
c001a7e9:	6a 1c                	push   0x1c
c001a7eb:	e8 41 19 ff ff       	call   c000c131 <malloc>
c001a7f0:	89 07                	mov    DWORD PTR [edi],eax
c001a7f2:	89 c3                	mov    ebx,eax
c001a7f4:	59                   	pop    ecx
c001a7f5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a7f9:	50                   	push   eax
c001a7fa:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001a7fd:	50                   	push   eax
c001a7fe:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a802:	50                   	push   eax
c001a803:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a807:	50                   	push   eax
c001a808:	56                   	push   esi
c001a809:	e8 da fd ff ff       	call   c001a5e8 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001a80e:	83 c4 20             	add    esp,0x20
c001a811:	84 c0                	test   al,al
c001a813:	74 07                	je     c001a81c <ISO9660::openDir(char const*, void**)+0x54>
c001a815:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a81a:	75 21                	jne    c001a83d <ISO9660::openDir(char const*, void**)+0x75>
c001a81c:	0f b6 c0             	movzx  eax,al
c001a81f:	52                   	push   edx
c001a820:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a824:	50                   	push   eax
c001a825:	68 ca 1a 02 c0       	push   0xc0021aca
c001a82a:	e8 07 13 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c001a82f:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001a833:	83 c4 10             	add    esp,0x10
c001a836:	b8 01 00 00 00       	mov    eax,0x1
c001a83b:	eb 3b                	jmp    c001a878 <ISO9660::openDir(char const*, void**)+0xb0>
c001a83d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a841:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001a845:	89 03                	mov    DWORD PTR [ebx],eax
c001a847:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001a84e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a852:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001a859:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a860:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001a863:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001a86a:	8a 06                	mov    al,BYTE PTR [esi]
c001a86c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001a86f:	31 c0                	xor    eax,eax
c001a871:	eb 05                	jmp    c001a878 <ISO9660::openDir(char const*, void**)+0xb0>
c001a873:	b8 04 00 00 00       	mov    eax,0x4
c001a878:	83 c4 10             	add    esp,0x10
c001a87b:	5b                   	pop    ebx
c001a87c:	5e                   	pop    esi
c001a87d:	5f                   	pop    edi
c001a87e:	c3                   	ret    
c001a87f:	90                   	nop

c001a880 <ISO9660::ISO9660()>:
c001a880:	83 ec 0c             	sub    esp,0xc
c001a883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a887:	83 ec 0c             	sub    esp,0xc
c001a88a:	50                   	push   eax
c001a88b:	e8 7c 4b ff ff       	call   c000f40c <Filesystem::Filesystem()>
c001a890:	83 c4 10             	add    esp,0x10
c001a893:	ba f0 1a 02 c0       	mov    edx,0xc0021af0
c001a898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a89c:	89 10                	mov    DWORD PTR [eax],edx
c001a89e:	90                   	nop
c001a89f:	83 c4 0c             	add    esp,0xc
c001a8a2:	c3                   	ret    
c001a8a3:	90                   	nop

c001a8a4 <SoundChannel::~SoundChannel()>:
c001a8a4:	83 ec 0c             	sub    esp,0xc
c001a8a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8ab:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a8ae:	83 ec 0c             	sub    esp,0xc
c001a8b1:	50                   	push   eax
c001a8b2:	e8 8a 18 ff ff       	call   c000c141 <free>
c001a8b7:	83 c4 10             	add    esp,0x10
c001a8ba:	90                   	nop
c001a8bb:	83 c4 0c             	add    esp,0xc
c001a8be:	c3                   	ret    
c001a8bf:	90                   	nop

c001a8c0 <SoundChannel::setSpeed(float)>:
c001a8c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8c4:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001a8c8:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001a8cb:	c3                   	ret    

c001a8cc <SoundChannel::getSpeed()>:
c001a8cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8d0:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001a8d3:	c3                   	ret    

c001a8d4 <SoundChannel::setVolume(int)>:
c001a8d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a8d8:	83 f8 64             	cmp    eax,0x64
c001a8db:	7e 05                	jle    c001a8e2 <SoundChannel::setVolume(int)+0xe>
c001a8dd:	b8 64 00 00 00       	mov    eax,0x64
c001a8e2:	85 c0                	test   eax,eax
c001a8e4:	79 02                	jns    c001a8e8 <SoundChannel::setVolume(int)+0x14>
c001a8e6:	31 c0                	xor    eax,eax
c001a8e8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a8ec:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001a8ef:	c3                   	ret    

c001a8f0 <SoundChannel::getVolume()>:
c001a8f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8f4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001a8f7:	c3                   	ret    

c001a8f8 <SoundChannel::pause()>:
c001a8f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a8fc:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001a900:	c3                   	ret    
c001a901:	90                   	nop

c001a902 <SoundChannel::SoundChannel(int, int, int, int)>:
c001a902:	83 ec 1c             	sub    esp,0x1c
c001a905:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a909:	e8 ea ff ff ff       	call   c001a8f8 <SoundChannel::pause()>
c001a90e:	83 c4 04             	add    esp,0x4
c001a911:	6a 50                	push   0x50
c001a913:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a917:	e8 b8 ff ff ff       	call   c001a8d4 <SoundChannel::setVolume(int)>
c001a91c:	83 c4 08             	add    esp,0x8
c001a91f:	d9 e8                	fld1   
c001a921:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001a925:	d9 1c 24             	fstp   DWORD PTR [esp]
c001a928:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a92c:	e8 8f ff ff ff       	call   c001a8c0 <SoundChannel::setSpeed(float)>
c001a931:	83 c4 08             	add    esp,0x8
c001a934:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a938:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a93c:	89 10                	mov    DWORD PTR [eax],edx
c001a93e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a942:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a946:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a949:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a94d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a951:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a954:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001a959:	75 23                	jne    c001a97e <SoundChannel::SoundChannel(int, int, int, int)+0x7c>
c001a95b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a95f:	8b 10                	mov    edx,DWORD PTR [eax]
c001a961:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a965:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a968:	0f af c2             	imul   eax,edx
c001a96b:	85 c0                	test   eax,eax
c001a96d:	79 03                	jns    c001a972 <SoundChannel::SoundChannel(int, int, int, int)+0x70>
c001a96f:	83 c0 03             	add    eax,0x3
c001a972:	c1 f8 02             	sar    eax,0x2
c001a975:	05 a0 0f 00 00       	add    eax,0xfa0
c001a97a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a97e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a982:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a986:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001a989:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a98d:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001a994:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a998:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001a99f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9a3:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a9a6:	c1 e0 02             	shl    eax,0x2
c001a9a9:	83 ec 0c             	sub    esp,0xc
c001a9ac:	50                   	push   eax
c001a9ad:	e8 7f 17 ff ff       	call   c000c131 <malloc>
c001a9b2:	83 c4 10             	add    esp,0x10
c001a9b5:	89 c2                	mov    edx,eax
c001a9b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9bb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a9be:	83 ec 04             	sub    esp,0x4
c001a9c1:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a9c5:	50                   	push   eax
c001a9c6:	6a 01                	push   0x1
c001a9c8:	6a 04                	push   0x4
c001a9ca:	e8 7c de fe ff       	call   c000884b <src_new>
c001a9cf:	83 c4 10             	add    esp,0x10
c001a9d2:	89 c2                	mov    edx,eax
c001a9d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9d8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a9db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a9df:	85 c0                	test   eax,eax
c001a9e1:	74 10                	je     c001a9f3 <SoundChannel::SoundChannel(int, int, int, int)+0xf1>
c001a9e3:	83 ec 0c             	sub    esp,0xc
c001a9e6:	68 4c 1b 02 c0       	push   0xc0021b4c
c001a9eb:	e8 64 12 ff ff       	call   c000bc54 <panic(char const*)>
c001a9f0:	83 c4 10             	add    esp,0x10
c001a9f3:	90                   	nop
c001a9f4:	83 c4 1c             	add    esp,0x1c
c001a9f7:	c3                   	ret    

c001a9f8 <SoundChannel::play()>:
c001a9f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a9fc:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001aa00:	c3                   	ret    
c001aa01:	90                   	nop

c001aa02 <SoundChannel::paused()>:
c001aa02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa06:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001aa09:	c3                   	ret    

c001aa0a <SoundChannel::getSampleRate()>:
c001aa0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa0e:	8b 00                	mov    eax,DWORD PTR [eax]
c001aa10:	c3                   	ret    
c001aa11:	90                   	nop

c001aa12 <SoundChannel::getBits()>:
c001aa12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001aa19:	c3                   	ret    

c001aa1a <SoundChannel::getBufferUsed()>:
c001aa1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa1e:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001aa21:	c3                   	ret    

c001aa22 <SoundChannel::getBufferSize()>:
c001aa22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa26:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aa29:	c3                   	ret    

c001aa2a <SoundChannel::unbuffer(float*, int, int)>:
c001aa2a:	53                   	push   ebx
c001aa2b:	83 ec 40             	sub    esp,0x40
c001aa2e:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001aa32:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001aa3a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001aa3d:	db 03                	fild   DWORD PTR [ebx]
c001aa3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aa43:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001aa47:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001aa4a:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001aa4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aa51:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001aa55:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001aa59:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aa5d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001aa61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aa65:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa69:	50                   	push   eax
c001aa6a:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001aa6d:	e8 93 da fe ff       	call   c0008505 <src_process>
c001aa72:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001aa76:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001aa79:	83 c4 0c             	add    esp,0xc
c001aa7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001aa7f:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001aa82:	29 d0                	sub    eax,edx
c001aa84:	c1 e0 02             	shl    eax,0x2
c001aa87:	50                   	push   eax
c001aa88:	8d 04 91             	lea    eax,[ecx+edx*4]
c001aa8b:	50                   	push   eax
c001aa8c:	51                   	push   ecx
c001aa8d:	e8 08 5b fe ff       	call   c000059a <memmove>
c001aa92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aa96:	83 c4 48             	add    esp,0x48
c001aa99:	5b                   	pop    ebx
c001aa9a:	c3                   	ret    
c001aa9b:	90                   	nop

c001aa9c <SoundChannel::buffer8(unsigned char*, int)>:
c001aa9c:	53                   	push   ebx
c001aa9d:	31 c0                	xor    eax,eax
c001aa9f:	83 ec 08             	sub    esp,0x8
c001aaa2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001aaa6:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001aaa9:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001aaac:	74 35                	je     c001aae3 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001aaae:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aab2:	7d 2f                	jge    c001aae3 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001aab4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001aab8:	d9 05 68 1b 02 c0    	fld    DWORD PTR ds:0xc0021b68
c001aabe:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001aac2:	40                   	inc    eax
c001aac3:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001aac8:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001aacb:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001aacf:	8d 59 01             	lea    ebx,[ecx+0x1]
c001aad2:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001aad5:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001aad8:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001aadb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aade:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001aae1:	eb c9                	jmp    c001aaac <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001aae3:	83 c4 08             	add    esp,0x8
c001aae6:	5b                   	pop    ebx
c001aae7:	c3                   	ret    

c001aae8 <SoundDevice::SoundDevice(char const*)>:
c001aae8:	83 ec 1c             	sub    esp,0x1c
c001aaeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aaef:	83 ec 08             	sub    esp,0x8
c001aaf2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aaf6:	50                   	push   eax
c001aaf7:	e8 06 5c ff ff       	call   c0010702 <Device::Device(char const*)>
c001aafc:	83 c4 10             	add    esp,0x10
c001aaff:	ba 74 1b 02 c0       	mov    edx,0xc0021b74
c001ab04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab08:	89 10                	mov    DWORD PTR [eax],edx
c001ab0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab0e:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001ab18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab1c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001ab26:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ab2e:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ab33:	7f 19                	jg     c001ab4e <SoundDevice::SoundDevice(char const*)+0x66>
c001ab35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab39:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ab3d:	83 c2 54             	add    edx,0x54
c001ab40:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001ab48:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ab4c:	eb e0                	jmp    c001ab2e <SoundDevice::SoundDevice(char const*)+0x46>
c001ab4e:	90                   	nop
c001ab4f:	83 c4 1c             	add    esp,0x1c
c001ab52:	c3                   	ret    
c001ab53:	90                   	nop

c001ab54 <SoundDevice::~SoundDevice()>:
c001ab54:	53                   	push   ebx
c001ab55:	83 ec 18             	sub    esp,0x18
c001ab58:	ba 74 1b 02 c0       	mov    edx,0xc0021b74
c001ab5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab61:	89 10                	mov    DWORD PTR [eax],edx
c001ab63:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ab6b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001ab70:	7f 46                	jg     c001abb8 <SoundDevice::~SoundDevice()+0x64>
c001ab72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab76:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ab7a:	83 c2 54             	add    edx,0x54
c001ab7d:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001ab81:	85 c0                	test   eax,eax
c001ab83:	74 2d                	je     c001abb2 <SoundDevice::~SoundDevice()+0x5e>
c001ab85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ab89:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ab8d:	83 c2 54             	add    edx,0x54
c001ab90:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001ab94:	85 db                	test   ebx,ebx
c001ab96:	74 1a                	je     c001abb2 <SoundDevice::~SoundDevice()+0x5e>
c001ab98:	83 ec 0c             	sub    esp,0xc
c001ab9b:	53                   	push   ebx
c001ab9c:	e8 03 fd ff ff       	call   c001a8a4 <SoundChannel::~SoundChannel()>
c001aba1:	83 c4 10             	add    esp,0x10
c001aba4:	83 ec 08             	sub    esp,0x8
c001aba7:	6a 2c                	push   0x2c
c001aba9:	53                   	push   ebx
c001abaa:	e8 68 46 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c001abaf:	83 c4 10             	add    esp,0x10
c001abb2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001abb6:	eb b3                	jmp    c001ab6b <SoundDevice::~SoundDevice()+0x17>
c001abb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abbc:	83 ec 0c             	sub    esp,0xc
c001abbf:	50                   	push   eax
c001abc0:	e8 ef 57 ff ff       	call   c00103b4 <Device::~Device()>
c001abc5:	83 c4 10             	add    esp,0x10
c001abc8:	90                   	nop
c001abc9:	83 c4 18             	add    esp,0x18
c001abcc:	5b                   	pop    ebx
c001abcd:	c3                   	ret    

c001abce <SoundDevice::~SoundDevice()>:
c001abce:	83 ec 0c             	sub    esp,0xc
c001abd1:	83 ec 0c             	sub    esp,0xc
c001abd4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abd8:	e8 77 ff ff ff       	call   c001ab54 <SoundDevice::~SoundDevice()>
c001abdd:	83 c4 10             	add    esp,0x10
c001abe0:	83 ec 08             	sub    esp,0x8
c001abe3:	68 e4 01 00 00       	push   0x1e4
c001abe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001abec:	e8 26 46 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c001abf1:	83 c4 10             	add    esp,0x10
c001abf4:	83 c4 0c             	add    esp,0xc
c001abf7:	c3                   	ret    

c001abf8 <SoundDevice::getFreeChannelNum()>:
c001abf8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001abfc:	31 c0                	xor    eax,eax
c001abfe:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001ac06:	74 09                	je     c001ac11 <SoundDevice::getFreeChannelNum()+0x19>
c001ac08:	40                   	inc    eax
c001ac09:	83 f8 20             	cmp    eax,0x20
c001ac0c:	75 f0                	jne    c001abfe <SoundDevice::getFreeChannelNum()+0x6>
c001ac0e:	83 c8 ff             	or     eax,0xffffffff
c001ac11:	c3                   	ret    

c001ac12 <SoundDevice::addChannel(SoundChannel*)>:
c001ac12:	56                   	push   esi
c001ac13:	53                   	push   ebx
c001ac14:	51                   	push   ecx
c001ac15:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ac19:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ac1d:	53                   	push   ebx
c001ac1e:	e8 d5 ff ff ff       	call   c001abf8 <SoundDevice::getFreeChannelNum()>
c001ac23:	5a                   	pop    edx
c001ac24:	83 f8 ff             	cmp    eax,0xffffffff
c001ac27:	74 51                	je     c001ac7a <SoundDevice::addChannel(SoundChannel*)+0x68>
c001ac29:	85 f6                	test   esi,esi
c001ac2b:	74 4d                	je     c001ac7a <SoundDevice::addChannel(SoundChannel*)+0x68>
c001ac2d:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001ac34:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001ac3b:	75 30                	jne    c001ac6d <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001ac3d:	83 ec 0c             	sub    esp,0xc
c001ac40:	56                   	push   esi
c001ac41:	e8 c4 fd ff ff       	call   c001aa0a <SoundChannel::getSampleRate()>
c001ac46:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001ac4c:	89 34 24             	mov    DWORD PTR [esp],esi
c001ac4f:	e8 be fd ff ff       	call   c001aa12 <SoundChannel::getBits()>
c001ac54:	83 c4 0c             	add    esp,0xc
c001ac57:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001ac5d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ac5f:	50                   	push   eax
c001ac60:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001ac66:	53                   	push   ebx
c001ac67:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001ac6a:	83 c4 10             	add    esp,0x10
c001ac6d:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001ac73:	b8 01 00 00 00       	mov    eax,0x1
c001ac78:	eb 03                	jmp    c001ac7d <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001ac7a:	83 c8 ff             	or     eax,0xffffffff
c001ac7d:	5a                   	pop    edx
c001ac7e:	5b                   	pop    ebx
c001ac7f:	5e                   	pop    esi
c001ac80:	c3                   	ret    
c001ac81:	90                   	nop

c001ac82 <SoundDevice::removeChannel(int)>:
c001ac82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac8a:	83 fa 1f             	cmp    edx,0x1f
c001ac8d:	77 23                	ja     c001acb2 <SoundDevice::removeChannel(int)+0x30>
c001ac8f:	8d 14 90             	lea    edx,[eax+edx*4]
c001ac92:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001ac99:	74 17                	je     c001acb2 <SoundDevice::removeChannel(int)+0x30>
c001ac9b:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001aca5:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001acab:	75 05                	jne    c001acb2 <SoundDevice::removeChannel(int)+0x30>
c001acad:	8b 00                	mov    eax,DWORD PTR [eax]
c001acaf:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001acb2:	c3                   	ret    
c001acb3:	90                   	nop

c001acb4 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001acb4:	56                   	push   esi
c001acb5:	53                   	push   ebx
c001acb6:	31 db                	xor    ebx,ebx
c001acb8:	83 ec 14             	sub    esp,0x14
c001acbb:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001acbf:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001acc3:	7d 55                	jge    c001ad1a <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001acc5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001acc9:	d9 e8                	fld1   
c001accb:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001acce:	d8 0d a4 1b 02 c0    	fmul   DWORD PTR ds:0xc0021ba4
c001acd4:	d8 0d a8 1b 02 c0    	fmul   DWORD PTR ds:0xc0021ba8
c001acda:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001acde:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001ace2:	d8 15 ac 1b 02 c0    	fcom   DWORD PTR ds:0xc0021bac
c001ace8:	df e0                	fnstsw ax
c001acea:	9e                   	sahf   
c001aceb:	72 08                	jb     c001acf5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001aced:	dd d8                	fstp   st(0)
c001acef:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001acf3:	eb 22                	jmp    c001ad17 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001acf5:	d9 ee                	fldz   
c001acf7:	d8 d9                	fcomp  st(1)
c001acf9:	df e0                	fnstsw ax
c001acfb:	9e                   	sahf   
c001acfc:	72 08                	jb     c001ad06 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001acfe:	dd d8                	fstp   st(0)
c001ad00:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001ad04:	eb 11                	jmp    c001ad17 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001ad06:	83 ec 10             	sub    esp,0x10
c001ad09:	d9 1c 24             	fstp   DWORD PTR [esp]
c001ad0c:	e8 0b 36 00 00       	call   c001e31c <lrintf>
c001ad11:	83 c4 10             	add    esp,0x10
c001ad14:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001ad17:	43                   	inc    ebx
c001ad18:	eb a5                	jmp    c001acbf <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001ad1a:	83 c4 14             	add    esp,0x14
c001ad1d:	5b                   	pop    ebx
c001ad1e:	5e                   	pop    esi
c001ad1f:	c3                   	ret    

c001ad20 <SoundDevice::getAudio(int, float*, float*)>:
c001ad20:	55                   	push   ebp
c001ad21:	57                   	push   edi
c001ad22:	56                   	push   esi
c001ad23:	53                   	push   ebx
c001ad24:	31 db                	xor    ebx,ebx
c001ad26:	83 ec 20             	sub    esp,0x20
c001ad29:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad2d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001ad31:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001ad35:	c1 e0 02             	shl    eax,0x2
c001ad38:	50                   	push   eax
c001ad39:	6a 00                	push   0x0
c001ad3b:	55                   	push   ebp
c001ad3c:	e8 c7 58 fe ff       	call   c0000608 <memset>
c001ad41:	83 c4 10             	add    esp,0x10
c001ad44:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ad48:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001ad4f:	85 c0                	test   eax,eax
c001ad51:	0f 84 94 00 00 00    	je     c001adeb <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ad57:	83 ec 0c             	sub    esp,0xc
c001ad5a:	50                   	push   eax
c001ad5b:	e8 a2 fc ff ff       	call   c001aa02 <SoundChannel::paused()>
c001ad60:	83 c4 10             	add    esp,0x10
c001ad63:	84 c0                	test   al,al
c001ad65:	0f 85 80 00 00 00    	jne    c001adeb <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ad6b:	83 ec 0c             	sub    esp,0xc
c001ad6e:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001ad75:	e8 76 fb ff ff       	call   c001a8f0 <SoundChannel::getVolume()>
c001ad7a:	83 c4 10             	add    esp,0x10
c001ad7d:	85 c0                	test   eax,eax
c001ad7f:	74 6a                	je     c001adeb <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ad81:	83 ec 0c             	sub    esp,0xc
c001ad84:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001ad8b:	e8 60 fb ff ff       	call   c001a8f0 <SoundChannel::getVolume()>
c001ad90:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ad94:	d9 05 b0 1b 02 c0    	fld    DWORD PTR ds:0xc0021bb0
c001ad9a:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001ad9e:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001ada2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ada6:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001adac:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001adb0:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001adb7:	e8 6e fc ff ff       	call   c001aa2a <SoundChannel::unbuffer(float*, int, int)>
c001adbc:	83 c4 20             	add    esp,0x20
c001adbf:	31 d2                	xor    edx,edx
c001adc1:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001adc5:	39 c2                	cmp    edx,eax
c001adc7:	7d 1a                	jge    c001ade3 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001adc9:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001adcd:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c001add0:	d8 c9                	fmul   st,st(1)
c001add2:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001add8:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001addc:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001ade0:	42                   	inc    edx
c001ade1:	eb e2                	jmp    c001adc5 <SoundDevice::getAudio(int, float*, float*)+0xa5>
c001ade3:	dd d8                	fstp   st(0)
c001ade5:	39 c7                	cmp    edi,eax
c001ade7:	7e 02                	jle    c001adeb <SoundDevice::getAudio(int, float*, float*)+0xcb>
c001ade9:	89 c7                	mov    edi,eax
c001adeb:	43                   	inc    ebx
c001adec:	83 fb 20             	cmp    ebx,0x20
c001adef:	0f 85 53 ff ff ff    	jne    c001ad48 <SoundDevice::getAudio(int, float*, float*)+0x28>
c001adf5:	83 c4 1c             	add    esp,0x1c
c001adf8:	89 f8                	mov    eax,edi
c001adfa:	5b                   	pop    ebx
c001adfb:	5e                   	pop    esi
c001adfc:	5f                   	pop    edi
c001adfd:	5d                   	pop    ebp
c001adfe:	c3                   	ret    
c001adff:	90                   	nop

c001ae00 <PCI::open(int, int, void*)>:
c001ae00:	83 ec 18             	sub    esp,0x18
c001ae03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae07:	8b 10                	mov    edx,DWORD PTR [eax]
c001ae09:	50                   	push   eax
c001ae0a:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ae0d:	31 c0                	xor    eax,eax
c001ae0f:	83 c4 1c             	add    esp,0x1c
c001ae12:	c3                   	ret    
c001ae13:	90                   	nop

c001ae14 <PCI::close(int, int, void*)>:
c001ae14:	31 c0                	xor    eax,eax
c001ae16:	c3                   	ret    
c001ae17:	90                   	nop

c001ae18 <PCI::PCI()>:
c001ae18:	83 ec 0c             	sub    esp,0xc
c001ae1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae1f:	83 ec 08             	sub    esp,0x8
c001ae22:	68 b4 1b 02 c0       	push   0xc0021bb4
c001ae27:	50                   	push   eax
c001ae28:	e8 61 4f ff ff       	call   c000fd8e <Bus::Bus(char const*)>
c001ae2d:	83 c4 10             	add    esp,0x10
c001ae30:	ba 60 1c 02 c0       	mov    edx,0xc0021c60
c001ae35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae39:	89 10                	mov    DWORD PTR [eax],edx
c001ae3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae3f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ae45:	0f b6 d0             	movzx  edx,al
c001ae48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae4c:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001ae53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae57:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ae5d:	0f b6 d0             	movzx  edx,al
c001ae60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae64:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ae69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae6d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ae73:	8d 50 01             	lea    edx,[eax+0x1]
c001ae76:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ae7a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ae80:	0f b6 d0             	movzx  edx,al
c001ae83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae87:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ae8b:	83 c9 c0             	or     ecx,0xffffffc0
c001ae8e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ae92:	90                   	nop
c001ae93:	83 c4 0c             	add    esp,0xc
c001ae96:	c3                   	ret    
c001ae97:	90                   	nop

c001ae98 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ae98:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001ae9c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001aea1:	89 ca                	mov    edx,ecx
c001aea3:	c1 e0 10             	shl    eax,0x10
c001aea6:	81 e2 fc 00 00 00    	and    edx,0xfc
c001aeac:	09 d0                	or     eax,edx
c001aeae:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001aeb3:	c1 e2 08             	shl    edx,0x8
c001aeb6:	09 d0                	or     eax,edx
c001aeb8:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001aebd:	c1 e2 0b             	shl    edx,0xb
c001aec0:	09 d0                	or     eax,edx
c001aec2:	ba f8 0c 00 00       	mov    edx,0xcf8
c001aec7:	0d 00 00 00 80       	or     eax,0x80000000
c001aecc:	ef                   	out    dx,eax
c001aecd:	ba fc 0c 00 00       	mov    edx,0xcfc
c001aed2:	ed                   	in     eax,dx
c001aed3:	83 e1 02             	and    ecx,0x2
c001aed6:	0f b6 c9             	movzx  ecx,cl
c001aed9:	c1 e1 03             	shl    ecx,0x3
c001aedc:	d3 e8                	shr    eax,cl
c001aede:	c3                   	ret    
c001aedf:	90                   	nop

c001aee0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001aee0:	6a 00                	push   0x0
c001aee2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001aee7:	50                   	push   eax
c001aee8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001aeed:	50                   	push   eax
c001aeee:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001aef3:	50                   	push   eax
c001aef4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001aef8:	e8 9b ff ff ff       	call   c001ae98 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aefd:	83 c4 14             	add    esp,0x14
c001af00:	c3                   	ret    
c001af01:	90                   	nop

c001af02 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001af02:	6a 0e                	push   0xe
c001af04:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001af09:	50                   	push   eax
c001af0a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001af0f:	50                   	push   eax
c001af10:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001af15:	50                   	push   eax
c001af16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001af1a:	e8 79 ff ff ff       	call   c001ae98 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af1f:	83 c4 14             	add    esp,0x14
c001af22:	0f b6 c0             	movzx  eax,al
c001af25:	c3                   	ret    

c001af26 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001af26:	55                   	push   ebp
c001af27:	57                   	push   edi
c001af28:	56                   	push   esi
c001af29:	53                   	push   ebx
c001af2a:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001af2f:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001af34:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001af39:	6a 0a                	push   0xa
c001af3b:	56                   	push   esi
c001af3c:	55                   	push   ebp
c001af3d:	57                   	push   edi
c001af3e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001af42:	e8 51 ff ff ff       	call   c001ae98 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af47:	6a 0a                	push   0xa
c001af49:	89 c3                	mov    ebx,eax
c001af4b:	56                   	push   esi
c001af4c:	0f b6 db             	movzx  ebx,bl
c001af4f:	55                   	push   ebp
c001af50:	57                   	push   edi
c001af51:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001af55:	e8 3e ff ff ff       	call   c001ae98 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af5a:	83 c4 28             	add    esp,0x28
c001af5d:	25 00 ff 00 00       	and    eax,0xff00
c001af62:	09 d8                	or     eax,ebx
c001af64:	5b                   	pop    ebx
c001af65:	5e                   	pop    esi
c001af66:	5f                   	pop    edi
c001af67:	5d                   	pop    ebp
c001af68:	c3                   	ret    
c001af69:	90                   	nop

c001af6a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001af6a:	6a 08                	push   0x8
c001af6c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001af71:	50                   	push   eax
c001af72:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001af77:	50                   	push   eax
c001af78:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001af7d:	50                   	push   eax
c001af7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001af82:	e8 11 ff ff ff       	call   c001ae98 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af87:	83 c4 14             	add    esp,0x14
c001af8a:	0f b6 c4             	movzx  eax,ah
c001af8d:	c3                   	ret    

c001af8e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001af8e:	6a 08                	push   0x8
c001af90:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001af95:	50                   	push   eax
c001af96:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001af9b:	50                   	push   eax
c001af9c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001afa1:	50                   	push   eax
c001afa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001afa6:	e8 ed fe ff ff       	call   c001ae98 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afab:	83 c4 14             	add    esp,0x14
c001afae:	c3                   	ret    
c001afaf:	90                   	nop

c001afb0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001afb0:	6a 3c                	push   0x3c
c001afb2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001afb7:	50                   	push   eax
c001afb8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001afbd:	50                   	push   eax
c001afbe:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001afc3:	50                   	push   eax
c001afc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001afc8:	e8 cb fe ff ff       	call   c001ae98 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afcd:	83 c4 14             	add    esp,0x14
c001afd0:	c3                   	ret    
c001afd1:	90                   	nop

c001afd2 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001afd2:	6a 18                	push   0x18
c001afd4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001afd9:	50                   	push   eax
c001afda:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001afdf:	50                   	push   eax
c001afe0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001afe5:	50                   	push   eax
c001afe6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001afea:	e8 a9 fe ff ff       	call   c001ae98 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afef:	83 c4 14             	add    esp,0x14
c001aff2:	0f b6 c4             	movzx  eax,ah
c001aff5:	c3                   	ret    

c001aff6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001aff6:	55                   	push   ebp
c001aff7:	57                   	push   edi
c001aff8:	56                   	push   esi
c001aff9:	53                   	push   ebx
c001affa:	50                   	push   eax
c001affb:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001afff:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001b004:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b009:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001b00e:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001b015:	8d 43 12             	lea    eax,[ebx+0x12]
c001b018:	83 c3 10             	add    ebx,0x10
c001b01b:	0f b6 c0             	movzx  eax,al
c001b01e:	0f b6 db             	movzx  ebx,bl
c001b021:	50                   	push   eax
c001b022:	51                   	push   ecx
c001b023:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b027:	57                   	push   edi
c001b028:	55                   	push   ebp
c001b029:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001b02d:	e8 66 fe ff ff       	call   c001ae98 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b032:	53                   	push   ebx
c001b033:	89 c6                	mov    esi,eax
c001b035:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001b039:	c1 e6 10             	shl    esi,0x10
c001b03c:	51                   	push   ecx
c001b03d:	57                   	push   edi
c001b03e:	55                   	push   ebp
c001b03f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b043:	e8 50 fe ff ff       	call   c001ae98 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b048:	83 c4 2c             	add    esp,0x2c
c001b04b:	0f b7 c0             	movzx  eax,ax
c001b04e:	5b                   	pop    ebx
c001b04f:	09 f0                	or     eax,esi
c001b051:	5e                   	pop    esi
c001b052:	5f                   	pop    edi
c001b053:	5d                   	pop    ebp
c001b054:	c3                   	ret    
c001b055:	90                   	nop

c001b056 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b056:	53                   	push   ebx
c001b057:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b05c:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b061:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b065:	c1 e1 10             	shl    ecx,0x10
c001b068:	25 fc 00 00 00       	and    eax,0xfc
c001b06d:	09 c1                	or     ecx,eax
c001b06f:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001b074:	c1 e0 08             	shl    eax,0x8
c001b077:	09 c1                	or     ecx,eax
c001b079:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001b07e:	c1 e0 0b             	shl    eax,0xb
c001b081:	09 c1                	or     ecx,eax
c001b083:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b089:	89 c8                	mov    eax,ecx
c001b08b:	ef                   	out    dx,eax
c001b08c:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b091:	ed                   	in     eax,dx
c001b092:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001b097:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001b09c:	74 0a                	je     c001b0a8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001b09e:	0f b7 d8             	movzx  ebx,ax
c001b0a1:	89 d0                	mov    eax,edx
c001b0a3:	c1 e0 10             	shl    eax,0x10
c001b0a6:	eb 05                	jmp    c001b0ad <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001b0a8:	66 31 c0             	xor    ax,ax
c001b0ab:	89 d3                	mov    ebx,edx
c001b0ad:	09 c3                	or     ebx,eax
c001b0af:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b0b4:	89 c8                	mov    eax,ecx
c001b0b6:	ef                   	out    dx,eax
c001b0b7:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b0bc:	89 d8                	mov    eax,ebx
c001b0be:	ef                   	out    dx,eax
c001b0bf:	5b                   	pop    ebx
c001b0c0:	c3                   	ret    
c001b0c1:	90                   	nop

c001b0c2 <PCI::checkBus(unsigned char)>:
c001b0c2:	56                   	push   esi
c001b0c3:	53                   	push   ebx
c001b0c4:	31 db                	xor    ebx,ebx
c001b0c6:	51                   	push   ecx
c001b0c7:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b0cc:	52                   	push   edx
c001b0cd:	53                   	push   ebx
c001b0ce:	43                   	inc    ebx
c001b0cf:	56                   	push   esi
c001b0d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b0d4:	e8 4d 03 00 00       	call   c001b426 <PCI::checkDevice(unsigned char, unsigned char)>
c001b0d9:	83 c4 10             	add    esp,0x10
c001b0dc:	83 fb 20             	cmp    ebx,0x20
c001b0df:	75 eb                	jne    c001b0cc <PCI::checkBus(unsigned char)+0xa>
c001b0e1:	58                   	pop    eax
c001b0e2:	5b                   	pop    ebx
c001b0e3:	5e                   	pop    esi
c001b0e4:	c3                   	ret    
c001b0e5:	90                   	nop

c001b0e6 <PCI::foundDevice(PCIDeviceInfo)>:
c001b0e6:	55                   	push   ebp
c001b0e7:	57                   	push   edi
c001b0e8:	56                   	push   esi
c001b0e9:	53                   	push   ebx
c001b0ea:	83 ec 1c             	sub    esp,0x1c
c001b0ed:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b0f1:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001b0f7:	0f 84 51 01 00 00    	je     c001b24e <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b0fd:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b101:	66 81 f9 06 04       	cmp    cx,0x406
c001b106:	75 2c                	jne    c001b134 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001b108:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b10d:	50                   	push   eax
c001b10e:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b113:	50                   	push   eax
c001b114:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b119:	50                   	push   eax
c001b11a:	56                   	push   esi
c001b11b:	e8 b2 fe ff ff       	call   c001afd2 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b120:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b124:	0f b6 c0             	movzx  eax,al
c001b127:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b12b:	83 c4 2c             	add    esp,0x2c
c001b12e:	5b                   	pop    ebx
c001b12f:	5e                   	pop    esi
c001b130:	5f                   	pop    edi
c001b131:	5d                   	pop    ebp
c001b132:	eb 8e                	jmp    c001b0c2 <PCI::checkBus(unsigned char)>
c001b134:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b138:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001b13e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b142:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b146:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001b14a:	88 d3                	mov    bl,dl
c001b14c:	85 c0                	test   eax,eax
c001b14e:	74 33                	je     c001b183 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001b150:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b153:	85 d2                	test   edx,edx
c001b155:	74 28                	je     c001b17f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b157:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001b15d:	31 ef                	xor    edi,ebp
c001b15f:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001b165:	75 18                	jne    c001b17f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b167:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001b16b:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001b171:	75 0c                	jne    c001b17f <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001b173:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001b179:	0f 84 cf 00 00 00    	je     c001b24e <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001b17f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b181:	eb c9                	jmp    c001b14c <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001b183:	66 81 f9 01 06       	cmp    cx,0x601
c001b188:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001b18c:	75 18                	jne    c001b1a6 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001b18e:	83 ec 0c             	sub    esp,0xc
c001b191:	68 58 01 00 00       	push   0x158
c001b196:	e8 6d 40 ff ff       	call   c000f208 <operator new(unsigned long)>
c001b19b:	59                   	pop    ecx
c001b19c:	89 c5                	mov    ebp,eax
c001b19e:	5f                   	pop    edi
c001b19f:	68 bc 1b 02 c0       	push   0xc0021bbc
c001b1a4:	eb 7d                	jmp    c001b223 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001b1a6:	66 81 f9 01 01       	cmp    cx,0x101
c001b1ab:	75 60                	jne    c001b20d <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001b1ad:	83 ec 0c             	sub    esp,0xc
c001b1b0:	68 70 02 00 00       	push   0x270
c001b1b5:	e8 4e 40 ff ff       	call   c000f208 <operator new(unsigned long)>
c001b1ba:	89 04 24             	mov    DWORD PTR [esp],eax
c001b1bd:	89 c5                	mov    ebp,eax
c001b1bf:	e8 26 03 00 00       	call   c001b4ea <IDE::IDE()>
c001b1c4:	58                   	pop    eax
c001b1c5:	5a                   	pop    edx
c001b1c6:	55                   	push   ebp
c001b1c7:	56                   	push   esi
c001b1c8:	e8 45 53 ff ff       	call   c0010512 <Device::addChild(Device*)>
c001b1cd:	83 ec 1c             	sub    esp,0x1c
c001b1d0:	b9 09 00 00 00       	mov    ecx,0x9
c001b1d5:	fc                   	cld    
c001b1d6:	89 e7                	mov    edi,esp
c001b1d8:	89 de                	mov    esi,ebx
c001b1da:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b1dc:	55                   	push   ebp
c001b1dd:	e8 0a 52 ff ff       	call   c00103ec <Device::preOpenPCI(PCIDeviceInfo)>
c001b1e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001b1e5:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b1e9:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b1f1:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b1f9:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b201:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001b204:	83 c4 4c             	add    esp,0x4c
c001b207:	5b                   	pop    ebx
c001b208:	5e                   	pop    esi
c001b209:	5f                   	pop    edi
c001b20a:	5d                   	pop    ebp
c001b20b:	ff e0                	jmp    eax
c001b20d:	83 ec 0c             	sub    esp,0xc
c001b210:	68 58 01 00 00       	push   0x158
c001b215:	e8 ee 3f ff ff       	call   c000f208 <operator new(unsigned long)>
c001b21a:	59                   	pop    ecx
c001b21b:	89 c5                	mov    ebp,eax
c001b21d:	5f                   	pop    edi
c001b21e:	68 db 1b 02 c0       	push   0xc0021bdb
c001b223:	55                   	push   ebp
c001b224:	e8 d5 55 ff ff       	call   c00107fe <DriverlessDevice::DriverlessDevice(char const*)>
c001b229:	58                   	pop    eax
c001b22a:	5a                   	pop    edx
c001b22b:	55                   	push   ebp
c001b22c:	56                   	push   esi
c001b22d:	e8 e0 52 ff ff       	call   c0010512 <Device::addChild(Device*)>
c001b232:	b9 09 00 00 00       	mov    ecx,0x9
c001b237:	fc                   	cld    
c001b238:	89 df                	mov    edi,ebx
c001b23a:	89 de                	mov    esi,ebx
c001b23c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b23e:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001b242:	83 c4 2c             	add    esp,0x2c
c001b245:	5b                   	pop    ebx
c001b246:	5e                   	pop    esi
c001b247:	5f                   	pop    edi
c001b248:	5d                   	pop    ebp
c001b249:	e9 9e 51 ff ff       	jmp    c00103ec <Device::preOpenPCI(PCIDeviceInfo)>
c001b24e:	83 c4 1c             	add    esp,0x1c
c001b251:	5b                   	pop    ebx
c001b252:	5e                   	pop    esi
c001b253:	5f                   	pop    edi
c001b254:	5d                   	pop    ebp
c001b255:	c3                   	ret    

c001b256 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b256:	55                   	push   ebp
c001b257:	57                   	push   edi
c001b258:	56                   	push   esi
c001b259:	53                   	push   ebx
c001b25a:	83 ec 5c             	sub    esp,0x5c
c001b25d:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001b261:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001b265:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001b269:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001b26e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b272:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001b276:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001b27b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b27f:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001b284:	6a 0c                	push   0xc
c001b286:	55                   	push   ebp
c001b287:	53                   	push   ebx
c001b288:	57                   	push   edi
c001b289:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001b290:	e8 03 fc ff ff       	call   c001ae98 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b295:	83 c4 0c             	add    esp,0xc
c001b298:	6a 00                	push   0x0
c001b29a:	68 f5 1b 02 c0       	push   0xc0021bf5
c001b29f:	e8 92 08 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c001b2a4:	55                   	push   ebp
c001b2a5:	53                   	push   ebx
c001b2a6:	57                   	push   edi
c001b2a7:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b2ae:	e8 73 fc ff ff       	call   c001af26 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b2b3:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001b2b8:	83 c4 20             	add    esp,0x20
c001b2bb:	55                   	push   ebp
c001b2bc:	53                   	push   ebx
c001b2bd:	57                   	push   edi
c001b2be:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b2c2:	e8 e9 fc ff ff       	call   c001afb0 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b2c7:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001b2ce:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001b2d2:	55                   	push   ebp
c001b2d3:	53                   	push   ebx
c001b2d4:	57                   	push   edi
c001b2d5:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b2dc:	e8 b7 fb ff ff       	call   c001ae98 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b2e1:	0f b6 c4             	movzx  eax,ah
c001b2e4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b2e8:	83 c4 18             	add    esp,0x18
c001b2eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001b2ef:	68 09 1c 02 c0       	push   0xc0021c09
c001b2f4:	e8 3d 08 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c001b2f9:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001b2fd:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001b301:	a1 c8 2e 02 c0       	mov    eax,ds:0xc0022ec8
c001b306:	83 c4 10             	add    esp,0x10
c001b309:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001b30f:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001b316:	74 6c                	je     c001b384 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b318:	31 f6                	xor    esi,esi
c001b31a:	8b 15 c8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022ec8
c001b320:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b326:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001b32c:	7e 56                	jle    c001b384 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001b32e:	8d 14 f2             	lea    edx,[edx+esi*8]
c001b331:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001b338:	39 cb                	cmp    ebx,ecx
c001b33a:	75 45                	jne    c001b381 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b33c:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001b343:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001b347:	75 38                	jne    c001b381 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001b349:	83 ec 0c             	sub    esp,0xc
c001b34c:	68 18 1c 02 c0       	push   0xc0021c18
c001b351:	e8 e0 07 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c001b356:	8b 15 c8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022ec8
c001b35c:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001b362:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001b36a:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001b36e:	52                   	push   edx
c001b36f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b373:	53                   	push   ebx
c001b374:	68 3d 1c 02 c0       	push   0xc0021c3d
c001b379:	e8 b8 07 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c001b37e:	83 c4 20             	add    esp,0x20
c001b381:	46                   	inc    esi
c001b382:	eb 96                	jmp    c001b31a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001b384:	31 d2                	xor    edx,edx
c001b386:	83 ec 0c             	sub    esp,0xc
c001b389:	55                   	push   ebp
c001b38a:	53                   	push   ebx
c001b38b:	57                   	push   edi
c001b38c:	52                   	push   edx
c001b38d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001b391:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b398:	e8 59 fc ff ff       	call   c001aff6 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b39d:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001b3a1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001b3a5:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b3a9:	42                   	inc    edx
c001b3aa:	83 c4 20             	add    esp,0x20
c001b3ad:	83 fa 06             	cmp    edx,0x6
c001b3b0:	75 d4                	jne    c001b386 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001b3b2:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001b3b6:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001b3ba:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001b3be:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001b3c2:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001b3c6:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001b3ca:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001b3cf:	86 e0                	xchg   al,ah
c001b3d1:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001b3d6:	55                   	push   ebp
c001b3d7:	53                   	push   ebx
c001b3d8:	57                   	push   edi
c001b3d9:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001b3dd:	e8 88 fb ff ff       	call   c001af6a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b3e2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b3e6:	55                   	push   ebp
c001b3e7:	53                   	push   ebx
c001b3e8:	57                   	push   edi
c001b3e9:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001b3f0:	e8 eb fa ff ff       	call   c001aee0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b3f5:	83 ec 0c             	sub    esp,0xc
c001b3f8:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001b3fd:	b9 09 00 00 00       	mov    ecx,0x9
c001b402:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001b406:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001b40a:	fc                   	cld    
c001b40b:	89 e7                	mov    edi,esp
c001b40d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b40f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001b416:	e8 cb fc ff ff       	call   c001b0e6 <PCI::foundDevice(PCIDeviceInfo)>
c001b41b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b421:	5b                   	pop    ebx
c001b422:	5e                   	pop    esi
c001b423:	5f                   	pop    edi
c001b424:	5d                   	pop    ebp
c001b425:	c3                   	ret    

c001b426 <PCI::checkDevice(unsigned char, unsigned char)>:
c001b426:	55                   	push   ebp
c001b427:	57                   	push   edi
c001b428:	56                   	push   esi
c001b429:	53                   	push   ebx
c001b42a:	83 ec 0c             	sub    esp,0xc
c001b42d:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b431:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b436:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b43b:	6a 00                	push   0x0
c001b43d:	56                   	push   esi
c001b43e:	57                   	push   edi
c001b43f:	55                   	push   ebp
c001b440:	e8 9b fa ff ff       	call   c001aee0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b445:	6a 00                	push   0x0
c001b447:	56                   	push   esi
c001b448:	57                   	push   edi
c001b449:	55                   	push   ebp
c001b44a:	e8 07 fe ff ff       	call   c001b256 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b44f:	83 c4 20             	add    esp,0x20
c001b452:	6a 00                	push   0x0
c001b454:	56                   	push   esi
c001b455:	57                   	push   edi
c001b456:	55                   	push   ebp
c001b457:	e8 a6 fa ff ff       	call   c001af02 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b45c:	83 c4 10             	add    esp,0x10
c001b45f:	84 c0                	test   al,al
c001b461:	79 27                	jns    c001b48a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b463:	bb 01 00 00 00       	mov    ebx,0x1
c001b468:	53                   	push   ebx
c001b469:	56                   	push   esi
c001b46a:	57                   	push   edi
c001b46b:	55                   	push   ebp
c001b46c:	e8 6f fa ff ff       	call   c001aee0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b471:	83 c4 10             	add    esp,0x10
c001b474:	66 40                	inc    ax
c001b476:	74 0c                	je     c001b484 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001b478:	53                   	push   ebx
c001b479:	56                   	push   esi
c001b47a:	57                   	push   edi
c001b47b:	55                   	push   ebp
c001b47c:	e8 d5 fd ff ff       	call   c001b256 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b481:	83 c4 10             	add    esp,0x10
c001b484:	43                   	inc    ebx
c001b485:	83 fb 08             	cmp    ebx,0x8
c001b488:	75 de                	jne    c001b468 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b48a:	83 c4 0c             	add    esp,0xc
c001b48d:	5b                   	pop    ebx
c001b48e:	5e                   	pop    esi
c001b48f:	5f                   	pop    edi
c001b490:	5d                   	pop    ebp
c001b491:	c3                   	ret    

c001b492 <PCI::detect()>:
c001b492:	56                   	push   esi
c001b493:	53                   	push   ebx
c001b494:	53                   	push   ebx
c001b495:	31 db                	xor    ebx,ebx
c001b497:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b49b:	6a 00                	push   0x0
c001b49d:	6a 00                	push   0x0
c001b49f:	6a 00                	push   0x0
c001b4a1:	56                   	push   esi
c001b4a2:	e8 5b fa ff ff       	call   c001af02 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b4a7:	83 c4 10             	add    esp,0x10
c001b4aa:	a8 80                	test   al,0x80
c001b4ac:	75 21                	jne    c001b4cf <PCI::detect()+0x3d>
c001b4ae:	51                   	push   ecx
c001b4af:	51                   	push   ecx
c001b4b0:	6a 00                	push   0x0
c001b4b2:	56                   	push   esi
c001b4b3:	e8 0a fc ff ff       	call   c001b0c2 <PCI::checkBus(unsigned char)>
c001b4b8:	83 c4 10             	add    esp,0x10
c001b4bb:	eb 24                	jmp    c001b4e1 <PCI::detect()+0x4f>
c001b4bd:	52                   	push   edx
c001b4be:	52                   	push   edx
c001b4bf:	53                   	push   ebx
c001b4c0:	43                   	inc    ebx
c001b4c1:	56                   	push   esi
c001b4c2:	e8 fb fb ff ff       	call   c001b0c2 <PCI::checkBus(unsigned char)>
c001b4c7:	83 c4 10             	add    esp,0x10
c001b4ca:	83 fb 08             	cmp    ebx,0x8
c001b4cd:	74 12                	je     c001b4e1 <PCI::detect()+0x4f>
c001b4cf:	53                   	push   ebx
c001b4d0:	6a 00                	push   0x0
c001b4d2:	6a 00                	push   0x0
c001b4d4:	56                   	push   esi
c001b4d5:	e8 06 fa ff ff       	call   c001aee0 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b4da:	83 c4 10             	add    esp,0x10
c001b4dd:	66 40                	inc    ax
c001b4df:	74 dc                	je     c001b4bd <PCI::detect()+0x2b>
c001b4e1:	58                   	pop    eax
c001b4e2:	5b                   	pop    ebx
c001b4e3:	5e                   	pop    esi
c001b4e4:	c3                   	ret    
c001b4e5:	90                   	nop

c001b4e6 <IDE::close(int, int, void*)>:
c001b4e6:	83 c8 ff             	or     eax,0xffffffff
c001b4e9:	c3                   	ret    

c001b4ea <IDE::IDE()>:
c001b4ea:	83 ec 0c             	sub    esp,0xc
c001b4ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4f1:	83 ec 08             	sub    esp,0x8
c001b4f4:	68 84 1c 02 c0       	push   0xc0021c84
c001b4f9:	50                   	push   eax
c001b4fa:	e8 95 53 ff ff       	call   c0010894 <HardDiskController::HardDiskController(char const*)>
c001b4ff:	83 c4 10             	add    esp,0x10
c001b502:	ba c4 1e 02 c0       	mov    edx,0xc0021ec4
c001b507:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b50b:	89 10                	mov    DWORD PTR [eax],edx
c001b50d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b511:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b518:	90                   	nop
c001b519:	83 c4 0c             	add    esp,0xc
c001b51c:	c3                   	ret    
c001b51d:	90                   	nop

c001b51e <IDE::prepareInterrupt(unsigned char)>:
c001b51e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b523:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b527:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b52f:	c3                   	ret    

c001b530 <selectDrive(unsigned char, unsigned char)>:
c001b530:	c3                   	ret    
c001b531:	90                   	nop

c001b532 <IDE::getBase(unsigned char)>:
c001b532:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b537:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b53b:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b543:	c3                   	ret    

c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b544:	55                   	push   ebp
c001b545:	57                   	push   edi
c001b546:	56                   	push   esi
c001b547:	53                   	push   ebx
c001b548:	83 ec 1c             	sub    esp,0x1c
c001b54b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b54f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b553:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b556:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b55a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b55e:	80 f9 03             	cmp    cl,0x3
c001b561:	77 51                	ja     c001b5b4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001b563:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b567:	0f b6 f2             	movzx  esi,dl
c001b56a:	0f b6 db             	movzx  ebx,bl
c001b56d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b570:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001b574:	83 ca 80             	or     edx,0xffffff80
c001b577:	0f b6 d2             	movzx  edx,dl
c001b57a:	52                   	push   edx
c001b57b:	6a 0c                	push   0xc
c001b57d:	56                   	push   esi
c001b57e:	57                   	push   edi
c001b57f:	e8 c0 ff ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b584:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001b589:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b58d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b591:	ee                   	out    dx,al
c001b592:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001b597:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001b59b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001b59f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b5a3:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b5ab:	83 c4 2c             	add    esp,0x2c
c001b5ae:	5b                   	pop    ebx
c001b5af:	5e                   	pop    esi
c001b5b0:	5f                   	pop    edi
c001b5b1:	5d                   	pop    ebp
c001b5b2:	eb 90                	jmp    c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b5b4:	80 fb 07             	cmp    bl,0x7
c001b5b7:	77 12                	ja     c001b5cb <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001b5b9:	0f b6 d2             	movzx  edx,dl
c001b5bc:	0f b6 db             	movzx  ebx,bl
c001b5bf:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001b5c7:	89 da                	mov    edx,ebx
c001b5c9:	eb 2f                	jmp    c001b5fa <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001b5cb:	80 fb 0d             	cmp    bl,0xd
c001b5ce:	77 13                	ja     c001b5e3 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001b5d0:	0f b6 d2             	movzx  edx,dl
c001b5d3:	0f b6 db             	movzx  ebx,bl
c001b5d6:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001b5dd:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b5e1:	eb 17                	jmp    c001b5fa <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001b5e3:	80 fb 15             	cmp    bl,0x15
c001b5e6:	77 13                	ja     c001b5fb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b5e8:	0f b6 d2             	movzx  edx,dl
c001b5eb:	0f b6 db             	movzx  ebx,bl
c001b5ee:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001b5f6:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b5fa:	ee                   	out    dx,al
c001b5fb:	83 c4 1c             	add    esp,0x1c
c001b5fe:	5b                   	pop    ebx
c001b5ff:	5e                   	pop    esi
c001b600:	5f                   	pop    edi
c001b601:	5d                   	pop    ebp
c001b602:	c3                   	ret    
c001b603:	90                   	nop

c001b604 <IDE::read(unsigned char, unsigned char)>:
c001b604:	55                   	push   ebp
c001b605:	57                   	push   edi
c001b606:	56                   	push   esi
c001b607:	53                   	push   ebx
c001b608:	83 ec 1c             	sub    esp,0x1c
c001b60b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b60f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b613:	8d 43 f8             	lea    eax,[ebx-0x8]
c001b616:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b61a:	3c 03                	cmp    al,0x3
c001b61c:	77 43                	ja     c001b661 <IDE::read(unsigned char, unsigned char)+0x5d>
c001b61e:	0f b6 f2             	movzx  esi,dl
c001b621:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001b624:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001b628:	83 c8 80             	or     eax,0xffffff80
c001b62b:	0f b6 c0             	movzx  eax,al
c001b62e:	50                   	push   eax
c001b62f:	6a 0c                	push   0xc
c001b631:	56                   	push   esi
c001b632:	57                   	push   edi
c001b633:	e8 0c ff ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b638:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001b63d:	0f b6 c3             	movzx  eax,bl
c001b640:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001b644:	ec                   	in     al,dx
c001b645:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b649:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001b64e:	52                   	push   edx
c001b64f:	6a 0c                	push   0xc
c001b651:	56                   	push   esi
c001b652:	57                   	push   edi
c001b653:	e8 ec fe ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b658:	83 c4 20             	add    esp,0x20
c001b65b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b65f:	eb 49                	jmp    c001b6aa <IDE::read(unsigned char, unsigned char)+0xa6>
c001b661:	80 fb 07             	cmp    bl,0x7
c001b664:	77 12                	ja     c001b678 <IDE::read(unsigned char, unsigned char)+0x74>
c001b666:	0f b6 d2             	movzx  edx,dl
c001b669:	0f b6 c3             	movzx  eax,bl
c001b66c:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001b674:	89 c2                	mov    edx,eax
c001b676:	eb 31                	jmp    c001b6a9 <IDE::read(unsigned char, unsigned char)+0xa5>
c001b678:	80 fb 0d             	cmp    bl,0xd
c001b67b:	77 13                	ja     c001b690 <IDE::read(unsigned char, unsigned char)+0x8c>
c001b67d:	0f b6 d2             	movzx  edx,dl
c001b680:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001b687:	0f b6 d3             	movzx  edx,bl
c001b68a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b68e:	eb 19                	jmp    c001b6a9 <IDE::read(unsigned char, unsigned char)+0xa5>
c001b690:	31 c0                	xor    eax,eax
c001b692:	80 fb 15             	cmp    bl,0x15
c001b695:	77 13                	ja     c001b6aa <IDE::read(unsigned char, unsigned char)+0xa6>
c001b697:	0f b6 d2             	movzx  edx,dl
c001b69a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001b6a2:	0f b6 d3             	movzx  edx,bl
c001b6a5:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b6a9:	ec                   	in     al,dx
c001b6aa:	83 c4 1c             	add    esp,0x1c
c001b6ad:	5b                   	pop    ebx
c001b6ae:	5e                   	pop    esi
c001b6af:	5f                   	pop    edi
c001b6b0:	5d                   	pop    ebp
c001b6b1:	c3                   	ret    

c001b6b2 <IDE::waitInterrupt(unsigned char)>:
c001b6b2:	55                   	push   ebp
c001b6b3:	57                   	push   edi
c001b6b4:	56                   	push   esi
c001b6b5:	53                   	push   ebx
c001b6b6:	31 db                	xor    ebx,ebx
c001b6b8:	83 ec 0c             	sub    esp,0xc
c001b6bb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b6bf:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b6c4:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b6cc:	89 e8                	mov    eax,ebp
c001b6ce:	84 c0                	test   al,al
c001b6d0:	75 34                	jne    c001b706 <IDE::waitInterrupt(unsigned char)+0x54>
c001b6d2:	52                   	push   edx
c001b6d3:	6a 0c                	push   0xc
c001b6d5:	56                   	push   esi
c001b6d6:	57                   	push   edi
c001b6d7:	e8 28 ff ff ff       	call   c001b604 <IDE::read(unsigned char, unsigned char)>
c001b6dc:	83 c4 10             	add    esp,0x10
c001b6df:	a8 01                	test   al,0x1
c001b6e1:	75 2b                	jne    c001b70e <IDE::waitInterrupt(unsigned char)+0x5c>
c001b6e3:	f6 c3 04             	test   bl,0x4
c001b6e6:	75 16                	jne    c001b6fe <IDE::waitInterrupt(unsigned char)+0x4c>
c001b6e8:	83 fb 32             	cmp    ebx,0x32
c001b6eb:	7e 11                	jle    c001b6fe <IDE::waitInterrupt(unsigned char)+0x4c>
c001b6ed:	50                   	push   eax
c001b6ee:	50                   	push   eax
c001b6ef:	6a 00                	push   0x0
c001b6f1:	68 80 96 98 00       	push   0x989680
c001b6f6:	e8 c6 c5 ff ff       	call   c0017cc1 <nanoSleep(unsigned long long)>
c001b6fb:	83 c4 10             	add    esp,0x10
c001b6fe:	83 fb 3c             	cmp    ebx,0x3c
c001b701:	74 0b                	je     c001b70e <IDE::waitInterrupt(unsigned char)+0x5c>
c001b703:	43                   	inc    ebx
c001b704:	eb be                	jmp    c001b6c4 <IDE::waitInterrupt(unsigned char)+0x12>
c001b706:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b70e:	83 c4 0c             	add    esp,0xc
c001b711:	89 e8                	mov    eax,ebp
c001b713:	5b                   	pop    ebx
c001b714:	5e                   	pop    esi
c001b715:	5f                   	pop    edi
c001b716:	5d                   	pop    ebp
c001b717:	c3                   	ret    

c001b718 <ideChannel0IRQHandler(regs*, void*)>:
c001b718:	83 ec 10             	sub    esp,0x10
c001b71b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b71f:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001b726:	6a 07                	push   0x7
c001b728:	6a 00                	push   0x0
c001b72a:	50                   	push   eax
c001b72b:	e8 d4 fe ff ff       	call   c001b604 <IDE::read(unsigned char, unsigned char)>
c001b730:	83 c4 1c             	add    esp,0x1c
c001b733:	c3                   	ret    

c001b734 <ideChannel1IRQHandler(regs*, void*)>:
c001b734:	83 ec 10             	sub    esp,0x10
c001b737:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b73b:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001b742:	6a 07                	push   0x7
c001b744:	6a 01                	push   0x1
c001b746:	50                   	push   eax
c001b747:	e8 b8 fe ff ff       	call   c001b604 <IDE::read(unsigned char, unsigned char)>
c001b74c:	83 c4 1c             	add    esp,0x1c
c001b74f:	c3                   	ret    

c001b750 <IDE::enableIRQs(unsigned char, bool)>:
c001b750:	57                   	push   edi
c001b751:	56                   	push   esi
c001b752:	be 04 00 00 00       	mov    esi,0x4
c001b757:	53                   	push   ebx
c001b758:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001b75d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b761:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001b766:	0f 94 c0             	sete   al
c001b769:	d1 e0                	shl    eax,1
c001b76b:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001b772:	0f b6 c0             	movzx  eax,al
c001b775:	50                   	push   eax
c001b776:	6a 0c                	push   0xc
c001b778:	57                   	push   edi
c001b779:	53                   	push   ebx
c001b77a:	e8 c5 fd ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b77f:	83 c4 10             	add    esp,0x10
c001b782:	50                   	push   eax
c001b783:	6a 0c                	push   0xc
c001b785:	57                   	push   edi
c001b786:	53                   	push   ebx
c001b787:	e8 78 fe ff ff       	call   c001b604 <IDE::read(unsigned char, unsigned char)>
c001b78c:	83 c4 10             	add    esp,0x10
c001b78f:	4e                   	dec    esi
c001b790:	75 f0                	jne    c001b782 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001b792:	5b                   	pop    ebx
c001b793:	5e                   	pop    esi
c001b794:	5f                   	pop    edi
c001b795:	c3                   	ret    

c001b796 <IDE::open(int, int, void*)>:
c001b796:	55                   	push   ebp
c001b797:	57                   	push   edi
c001b798:	56                   	push   esi
c001b799:	53                   	push   ebx
c001b79a:	83 ec 1c             	sub    esp,0x1c
c001b79d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b7a1:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001b7aa:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001b7b3:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001b7ba:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001b7c1:	0f 85 b0 02 00 00    	jne    c001ba77 <IDE::open(int, int, void*)+0x2e1>
c001b7c7:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001b7cd:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001b7d1:	83 e0 7f             	and    eax,0x7f
c001b7d4:	3c 05                	cmp    al,0x5
c001b7d6:	74 04                	je     c001b7dc <IDE::open(int, int, void*)+0x46>
c001b7d8:	3c 0f                	cmp    al,0xf
c001b7da:	75 32                	jne    c001b80e <IDE::open(int, int, void*)+0x78>
c001b7dc:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001b7e2:	83 e0 fc             	and    eax,0xfffffffc
c001b7e5:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001b7ec:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001b7f2:	83 e0 fc             	and    eax,0xfffffffc
c001b7f5:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001b7fc:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001b802:	83 e0 fc             	and    eax,0xfffffffc
c001b805:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b80c:	eb 14                	jmp    c001b822 <IDE::open(int, int, void*)+0x8c>
c001b80e:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001b818:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001b822:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001b829:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001b830:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b834:	89 c6                	mov    esi,eax
c001b836:	bf f8 0c 00 00       	mov    edi,0xcf8
c001b83b:	c1 e6 10             	shl    esi,0x10
c001b83e:	89 e8                	mov    eax,ebp
c001b840:	89 fa                	mov    edx,edi
c001b842:	c1 e0 0b             	shl    eax,0xb
c001b845:	09 f0                	or     eax,esi
c001b847:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001b84e:	c1 e6 08             	shl    esi,0x8
c001b851:	09 c6                	or     esi,eax
c001b853:	89 f0                	mov    eax,esi
c001b855:	0d 08 00 00 80       	or     eax,0x80000008
c001b85a:	ef                   	out    dx,eax
c001b85b:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001b860:	89 ca                	mov    edx,ecx
c001b862:	ed                   	in     eax,dx
c001b863:	c1 e8 10             	shr    eax,0x10
c001b866:	3d ff ff 00 00       	cmp    eax,0xffff
c001b86b:	0f 84 f5 00 00 00    	je     c001b966 <IDE::open(int, int, void*)+0x1d0>
c001b871:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001b877:	89 fa                	mov    edx,edi
c001b879:	89 f0                	mov    eax,esi
c001b87b:	ef                   	out    dx,eax
c001b87c:	b0 fe                	mov    al,0xfe
c001b87e:	89 ca                	mov    edx,ecx
c001b880:	ee                   	out    dx,al
c001b881:	89 f0                	mov    eax,esi
c001b883:	89 fa                	mov    edx,edi
c001b885:	ef                   	out    dx,eax
c001b886:	89 ca                	mov    edx,ecx
c001b888:	ed                   	in     eax,dx
c001b889:	3c fe                	cmp    al,0xfe
c001b88b:	0f 85 a9 00 00 00    	jne    c001b93a <IDE::open(int, int, void*)+0x1a4>
c001b891:	8b 15 c8 2e 02 c0    	mov    edx,DWORD PTR ds:0xc0022ec8
c001b897:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001b89e:	74 33                	je     c001b8d3 <IDE::open(int, int, void*)+0x13d>
c001b8a0:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001b8a6:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001b8aa:	40                   	inc    eax
c001b8ab:	83 ec 0c             	sub    esp,0xc
c001b8ae:	0f b6 c0             	movzx  eax,al
c001b8b1:	50                   	push   eax
c001b8b2:	55                   	push   ebp
c001b8b3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b8b7:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001b8bd:	51                   	push   ecx
c001b8be:	e8 e7 7c ff ff       	call   c00135aa <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001b8c3:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001b8c8:	83 c4 1c             	add    esp,0x1c
c001b8cb:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001b8d1:	eb 0a                	jmp    c001b8dd <IDE::open(int, int, void*)+0x147>
c001b8d3:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001b8dd:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001b8e4:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001b8eb:	c1 e1 10             	shl    ecx,0x10
c001b8ee:	c1 e0 08             	shl    eax,0x8
c001b8f1:	bf f8 0c 00 00       	mov    edi,0xcf8
c001b8f6:	09 c1                	or     ecx,eax
c001b8f8:	89 fa                	mov    edx,edi
c001b8fa:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001b901:	c1 e0 0b             	shl    eax,0xb
c001b904:	09 c1                	or     ecx,eax
c001b906:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001b90c:	89 c8                	mov    eax,ecx
c001b90e:	ef                   	out    dx,eax
c001b90f:	be fc 0c 00 00       	mov    esi,0xcfc
c001b914:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001b91a:	89 f2                	mov    edx,esi
c001b91c:	ee                   	out    dx,al
c001b91d:	89 c8                	mov    eax,ecx
c001b91f:	89 fa                	mov    edx,edi
c001b921:	ef                   	out    dx,eax
c001b922:	89 f2                	mov    edx,esi
c001b924:	ed                   	in     eax,dx
c001b925:	0f b6 c0             	movzx  eax,al
c001b928:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001b92e:	74 46                	je     c001b976 <IDE::open(int, int, void*)+0x1e0>
c001b930:	83 ec 0c             	sub    esp,0xc
c001b933:	68 9c 1c 02 c0       	push   0xc0021c9c
c001b938:	eb 34                	jmp    c001b96e <IDE::open(int, int, void*)+0x1d8>
c001b93a:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001b943:	75 17                	jne    c001b95c <IDE::open(int, int, void*)+0x1c6>
c001b945:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c001b94a:	74 07                	je     c001b953 <IDE::open(int, int, void*)+0x1bd>
c001b94c:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c001b951:	75 09                	jne    c001b95c <IDE::open(int, int, void*)+0x1c6>
c001b953:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001b95a:	eb 1a                	jmp    c001b976 <IDE::open(int, int, void*)+0x1e0>
c001b95c:	83 ec 0c             	sub    esp,0xc
c001b95f:	68 a4 1c 02 c0       	push   0xc0021ca4
c001b964:	eb 08                	jmp    c001b96e <IDE::open(int, int, void*)+0x1d8>
c001b966:	83 ec 0c             	sub    esp,0xc
c001b969:	68 d5 1c 02 c0       	push   0xc0021cd5
c001b96e:	e8 e1 02 ff ff       	call   c000bc54 <panic(char const*)>
c001b973:	83 c4 10             	add    esp,0x10
c001b976:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001b97d:	79 1a                	jns    c001b999 <IDE::open(int, int, void*)+0x203>
c001b97f:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001b985:	83 e0 fc             	and    eax,0xfffffffc
c001b988:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001b98f:	83 c0 08             	add    eax,0x8
c001b992:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001b999:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001b99f:	89 c2                	mov    edx,eax
c001b9a1:	83 e2 0f             	and    edx,0xf
c001b9a4:	66 83 fa 08          	cmp    dx,0x8
c001b9a8:	75 0a                	jne    c001b9b4 <IDE::open(int, int, void*)+0x21e>
c001b9aa:	83 e8 02             	sub    eax,0x2
c001b9ad:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001b9b4:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001b9ba:	89 c2                	mov    edx,eax
c001b9bc:	83 e2 0f             	and    edx,0xf
c001b9bf:	66 83 fa 08          	cmp    dx,0x8
c001b9c3:	75 0a                	jne    c001b9cf <IDE::open(int, int, void*)+0x239>
c001b9c5:	83 e8 02             	sub    eax,0x2
c001b9c8:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001b9cf:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001b9d6:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001b9dd:	89 d0                	mov    eax,edx
c001b9df:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001b9e2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001b9e6:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001b9ea:	8d 4a 01             	lea    ecx,[edx+0x1]
c001b9ed:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001b9f2:	0f b6 c9             	movzx  ecx,cl
c001b9f5:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001b9fc:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001b9ff:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ba03:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001ba07:	8d 50 02             	lea    edx,[eax+0x2]
c001ba0a:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ba0f:	0f b6 d2             	movzx  edx,dl
c001ba12:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001ba18:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ba1b:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ba1f:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001ba23:	8d 48 03             	lea    ecx,[eax+0x3]
c001ba26:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ba2b:	0f b6 c9             	movzx  ecx,cl
c001ba2e:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001ba34:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001ba37:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001ba3b:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001ba3f:	8d 50 04             	lea    edx,[eax+0x4]
c001ba42:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001ba48:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001ba4d:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001ba54:	66 85 f6             	test   si,si
c001ba57:	74 3e                	je     c001ba97 <IDE::open(int, int, void*)+0x301>
c001ba59:	0f b6 d2             	movzx  edx,dl
c001ba5c:	83 c0 05             	add    eax,0x5
c001ba5f:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ba62:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ba66:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001ba6a:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001ba70:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001ba75:	eb 20                	jmp    c001ba97 <IDE::open(int, int, void*)+0x301>
c001ba77:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ba81:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ba8b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ba92:	e9 02 ff ff ff       	jmp    c001b999 <IDE::open(int, int, void*)+0x203>
c001ba97:	52                   	push   edx
c001ba98:	52                   	push   edx
c001ba99:	6a 00                	push   0x0
c001ba9b:	53                   	push   ebx
c001ba9c:	e8 7d fa ff ff       	call   c001b51e <IDE::prepareInterrupt(unsigned char)>
c001baa1:	59                   	pop    ecx
c001baa2:	5e                   	pop    esi
c001baa3:	6a 01                	push   0x1
c001baa5:	53                   	push   ebx
c001baa6:	e8 73 fa ff ff       	call   c001b51e <IDE::prepareInterrupt(unsigned char)>
c001baab:	83 c4 0c             	add    esp,0xc
c001baae:	6a 00                	push   0x0
c001bab0:	6a 00                	push   0x0
c001bab2:	53                   	push   ebx
c001bab3:	e8 98 fc ff ff       	call   c001b750 <IDE::enableIRQs(unsigned char, bool)>
c001bab8:	83 c4 0c             	add    esp,0xc
c001babb:	6a 00                	push   0x0
c001babd:	6a 01                	push   0x1
c001babf:	53                   	push   ebx
c001bac0:	e8 8b fc ff ff       	call   c001b750 <IDE::enableIRQs(unsigned char, bool)>
c001bac5:	83 c4 10             	add    esp,0x10
c001bac8:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bacf:	74 40                	je     c001bb11 <IDE::open(int, int, void*)+0x37b>
c001bad1:	83 ec 0c             	sub    esp,0xc
c001bad4:	68 ff 1c 02 c0       	push   0xc0021cff
c001bad9:	e8 58 00 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c001bade:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bae1:	6a 01                	push   0x1
c001bae3:	68 18 b7 01 c0       	push   0xc001b718
c001bae8:	6a 0e                	push   0xe
c001baea:	53                   	push   ebx
c001baeb:	e8 76 49 ff ff       	call   c0010466 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001baf0:	83 c4 14             	add    esp,0x14
c001baf3:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001baf9:	53                   	push   ebx
c001bafa:	6a 01                	push   0x1
c001bafc:	68 34 b7 01 c0       	push   0xc001b734
c001bb01:	6a 0f                	push   0xf
c001bb03:	53                   	push   ebx
c001bb04:	e8 5d 49 ff ff       	call   c0010466 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bb09:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001bb0f:	eb 4a                	jmp    c001bb5b <IDE::open(int, int, void*)+0x3c5>
c001bb11:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001bb1b:	50                   	push   eax
c001bb1c:	6a 0f                	push   0xf
c001bb1e:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bb24:	68 1b 1d 02 c0       	push   0xc0021d1b
c001bb29:	e8 08 00 ff ff       	call   c000bb36 <kprintf(char const*, ...)>
c001bb2e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bb31:	6a 00                	push   0x0
c001bb33:	68 18 b7 01 c0       	push   0xc001b718
c001bb38:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001bb3e:	53                   	push   ebx
c001bb3f:	e8 22 49 ff ff       	call   c0010466 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bb44:	83 c4 14             	add    esp,0x14
c001bb47:	53                   	push   ebx
c001bb48:	6a 00                	push   0x0
c001bb4a:	68 34 b7 01 c0       	push   0xc001b734
c001bb4f:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001bb55:	53                   	push   ebx
c001bb56:	e8 0b 49 ff ff       	call   c0010466 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bb5b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb5d:	83 c4 20             	add    esp,0x20
c001bb60:	83 ec 0c             	sub    esp,0xc
c001bb63:	53                   	push   ebx
c001bb64:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001bb67:	83 c4 0c             	add    esp,0xc
c001bb6a:	6a 07                	push   0x7
c001bb6c:	6a 00                	push   0x0
c001bb6e:	53                   	push   ebx
c001bb6f:	e8 90 fa ff ff       	call   c001b604 <IDE::read(unsigned char, unsigned char)>
c001bb74:	83 c4 0c             	add    esp,0xc
c001bb77:	6a 07                	push   0x7
c001bb79:	6a 01                	push   0x1
c001bb7b:	53                   	push   ebx
c001bb7c:	e8 83 fa ff ff       	call   c001b604 <IDE::read(unsigned char, unsigned char)>
c001bb81:	83 c4 0c             	add    esp,0xc
c001bb84:	6a 01                	push   0x1
c001bb86:	6a 00                	push   0x0
c001bb88:	53                   	push   ebx
c001bb89:	e8 c2 fb ff ff       	call   c001b750 <IDE::enableIRQs(unsigned char, bool)>
c001bb8e:	83 c4 0c             	add    esp,0xc
c001bb91:	6a 01                	push   0x1
c001bb93:	6a 01                	push   0x1
c001bb95:	53                   	push   ebx
c001bb96:	e8 b5 fb ff ff       	call   c001b750 <IDE::enableIRQs(unsigned char, bool)>
c001bb9b:	83 c4 2c             	add    esp,0x2c
c001bb9e:	31 c0                	xor    eax,eax
c001bba0:	5b                   	pop    ebx
c001bba1:	5e                   	pop    esi
c001bba2:	5f                   	pop    edi
c001bba3:	5d                   	pop    ebp
c001bba4:	c3                   	ret    
c001bba5:	90                   	nop

c001bba6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001bba6:	55                   	push   ebp
c001bba7:	57                   	push   edi
c001bba8:	56                   	push   esi
c001bba9:	53                   	push   ebx
c001bbaa:	83 ec 1c             	sub    esp,0x1c
c001bbad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bbb1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bbb5:	8d 50 f8             	lea    edx,[eax-0x8]
c001bbb8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bbbc:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001bbc0:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bbc4:	80 fa 03             	cmp    dl,0x3
c001bbc7:	77 5d                	ja     c001bc26 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001bbc9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001bbcd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bbd1:	0f b6 db             	movzx  ebx,bl
c001bbd4:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001bbd7:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001bbdb:	83 ca 80             	or     edx,0xffffff80
c001bbde:	0f b6 d2             	movzx  edx,dl
c001bbe1:	52                   	push   edx
c001bbe2:	6a 0c                	push   0xc
c001bbe4:	53                   	push   ebx
c001bbe5:	56                   	push   esi
c001bbe6:	e8 59 f9 ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bbeb:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001bbf0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bbf4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bbf8:	0f b6 c0             	movzx  eax,al
c001bbfb:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001bbff:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bc01:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bc06:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001bc0a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bc0e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001bc12:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bc1a:	83 c4 2c             	add    esp,0x2c
c001bc1d:	5b                   	pop    ebx
c001bc1e:	5e                   	pop    esi
c001bc1f:	5f                   	pop    edi
c001bc20:	5d                   	pop    ebp
c001bc21:	e9 1e f9 ff ff       	jmp    c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bc26:	3c 07                	cmp    al,0x7
c001bc28:	77 10                	ja     c001bc3a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001bc2a:	0f b6 db             	movzx  ebx,bl
c001bc2d:	0f b6 d0             	movzx  edx,al
c001bc30:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001bc38:	eb 2d                	jmp    c001bc67 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001bc3a:	3c 0d                	cmp    al,0xd
c001bc3c:	77 13                	ja     c001bc51 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001bc3e:	0f b6 db             	movzx  ebx,bl
c001bc41:	0f b6 c0             	movzx  eax,al
c001bc44:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001bc4b:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001bc4f:	eb 16                	jmp    c001bc67 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001bc51:	3c 15                	cmp    al,0x15
c001bc53:	77 14                	ja     c001bc69 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001bc55:	0f b6 db             	movzx  ebx,bl
c001bc58:	0f b6 c0             	movzx  eax,al
c001bc5b:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001bc63:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001bc67:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bc69:	83 c4 1c             	add    esp,0x1c
c001bc6c:	5b                   	pop    ebx
c001bc6d:	5e                   	pop    esi
c001bc6e:	5f                   	pop    edi
c001bc6f:	5d                   	pop    ebp
c001bc70:	c3                   	ret    
c001bc71:	90                   	nop

c001bc72 <IDE::detect()>:
c001bc72:	55                   	push   ebp
c001bc73:	57                   	push   edi
c001bc74:	56                   	push   esi
c001bc75:	53                   	push   ebx
c001bc76:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bc7c:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001bc83:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001bc8a:	0f 85 be 02 00 00    	jne    c001bf4e <IDE::detect()+0x2dc>
c001bc90:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001bc97:	31 f6                	xor    esi,esi
c001bc99:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bca1:	31 ed                	xor    ebp,ebp
c001bca3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bca7:	c1 e0 06             	shl    eax,0x6
c001bcaa:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001bcb2:	89 e8                	mov    eax,ebp
c001bcb4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bcb8:	c1 e0 04             	shl    eax,0x4
c001bcbb:	83 c8 a0             	or     eax,0xffffffa0
c001bcbe:	0f b6 c0             	movzx  eax,al
c001bcc1:	50                   	push   eax
c001bcc2:	6a 06                	push   0x6
c001bcc4:	56                   	push   esi
c001bcc5:	53                   	push   ebx
c001bcc6:	e8 79 f8 ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bccb:	83 c4 0c             	add    esp,0xc
c001bcce:	6a 0c                	push   0xc
c001bcd0:	56                   	push   esi
c001bcd1:	53                   	push   ebx
c001bcd2:	e8 2d f9 ff ff       	call   c001b604 <IDE::read(unsigned char, unsigned char)>
c001bcd7:	83 c4 0c             	add    esp,0xc
c001bcda:	6a 0c                	push   0xc
c001bcdc:	56                   	push   esi
c001bcdd:	53                   	push   ebx
c001bcde:	e8 21 f9 ff ff       	call   c001b604 <IDE::read(unsigned char, unsigned char)>
c001bce3:	83 c4 0c             	add    esp,0xc
c001bce6:	6a 0c                	push   0xc
c001bce8:	56                   	push   esi
c001bce9:	53                   	push   ebx
c001bcea:	e8 15 f9 ff ff       	call   c001b604 <IDE::read(unsigned char, unsigned char)>
c001bcef:	83 c4 0c             	add    esp,0xc
c001bcf2:	6a 0c                	push   0xc
c001bcf4:	56                   	push   esi
c001bcf5:	53                   	push   ebx
c001bcf6:	e8 09 f9 ff ff       	call   c001b604 <IDE::read(unsigned char, unsigned char)>
c001bcfb:	68 ec 00 00 00       	push   0xec
c001bd00:	6a 07                	push   0x7
c001bd02:	56                   	push   esi
c001bd03:	53                   	push   ebx
c001bd04:	e8 3b f8 ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bd09:	83 c4 1c             	add    esp,0x1c
c001bd0c:	6a 0c                	push   0xc
c001bd0e:	56                   	push   esi
c001bd0f:	53                   	push   ebx
c001bd10:	e8 ef f8 ff ff       	call   c001b604 <IDE::read(unsigned char, unsigned char)>
c001bd15:	83 c4 0c             	add    esp,0xc
c001bd18:	6a 0c                	push   0xc
c001bd1a:	56                   	push   esi
c001bd1b:	53                   	push   ebx
c001bd1c:	e8 e3 f8 ff ff       	call   c001b604 <IDE::read(unsigned char, unsigned char)>
c001bd21:	83 c4 0c             	add    esp,0xc
c001bd24:	6a 0c                	push   0xc
c001bd26:	56                   	push   esi
c001bd27:	53                   	push   ebx
c001bd28:	e8 d7 f8 ff ff       	call   c001b604 <IDE::read(unsigned char, unsigned char)>
c001bd2d:	83 c4 0c             	add    esp,0xc
c001bd30:	6a 0c                	push   0xc
c001bd32:	56                   	push   esi
c001bd33:	53                   	push   ebx
c001bd34:	e8 cb f8 ff ff       	call   c001b604 <IDE::read(unsigned char, unsigned char)>
c001bd39:	83 c4 0c             	add    esp,0xc
c001bd3c:	6a 0c                	push   0xc
c001bd3e:	56                   	push   esi
c001bd3f:	53                   	push   ebx
c001bd40:	e8 bf f8 ff ff       	call   c001b604 <IDE::read(unsigned char, unsigned char)>
c001bd45:	83 c4 10             	add    esp,0x10
c001bd48:	84 c0                	test   al,al
c001bd4a:	0f 84 8b 01 00 00    	je     c001bedb <IDE::detect()+0x269>
c001bd50:	31 ff                	xor    edi,edi
c001bd52:	50                   	push   eax
c001bd53:	6a 0c                	push   0xc
c001bd55:	56                   	push   esi
c001bd56:	53                   	push   ebx
c001bd57:	e8 a8 f8 ff ff       	call   c001b604 <IDE::read(unsigned char, unsigned char)>
c001bd5c:	83 c4 10             	add    esp,0x10
c001bd5f:	a8 01                	test   al,0x1
c001bd61:	0f 85 8e 01 00 00    	jne    c001bef5 <IDE::detect()+0x283>
c001bd67:	84 c0                	test   al,al
c001bd69:	78 04                	js     c001bd6f <IDE::detect()+0xfd>
c001bd6b:	a8 08                	test   al,0x8
c001bd6d:	75 27                	jne    c001bd96 <IDE::detect()+0x124>
c001bd6f:	47                   	inc    edi
c001bd70:	81 ff 17 01 00 00    	cmp    edi,0x117
c001bd76:	7e da                	jle    c001bd52 <IDE::detect()+0xe0>
c001bd78:	50                   	push   eax
c001bd79:	50                   	push   eax
c001bd7a:	6a 00                	push   0x0
c001bd7c:	68 40 4b 4c 00       	push   0x4c4b40
c001bd81:	e8 3b bf ff ff       	call   c0017cc1 <nanoSleep(unsigned long long)>
c001bd86:	83 c4 10             	add    esp,0x10
c001bd89:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001bd8f:	75 c1                	jne    c001bd52 <IDE::detect()+0xe0>
c001bd91:	e9 5f 01 00 00       	jmp    c001bef5 <IDE::detect()+0x283>
c001bd96:	31 c9                	xor    ecx,ecx
c001bd98:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001bd9c:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001bda0:	83 ec 0c             	sub    esp,0xc
c001bda3:	68 80 00 00 00       	push   0x80
c001bda8:	57                   	push   edi
c001bda9:	6a 00                	push   0x0
c001bdab:	56                   	push   esi
c001bdac:	53                   	push   ebx
c001bdad:	e8 f4 fd ff ff       	call   c001bba6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001bdb2:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001bdb7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bdbb:	89 d1                	mov    ecx,edx
c001bdbd:	c1 e0 06             	shl    eax,0x6
c001bdc0:	01 d8                	add    eax,ebx
c001bdc2:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001bdc9:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001bdd0:	89 f2                	mov    edx,esi
c001bdd2:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001bdd8:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001bddc:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001bde2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bde6:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001bded:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001bdf5:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001bdfc:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001be04:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001be0a:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001be11:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001be17:	8d 54 24 58          	lea    edx,[esp+0x58]
c001be1b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001be1f:	83 c4 20             	add    esp,0x20
c001be22:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001be25:	83 c0 02             	add    eax,0x2
c001be28:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001be2e:	83 c7 02             	add    edi,0x2
c001be31:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001be34:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001be3a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001be3e:	75 e2                	jne    c001be22 <IDE::detect()+0x1b0>
c001be40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be44:	c1 e0 06             	shl    eax,0x6
c001be47:	01 d8                	add    eax,ebx
c001be49:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001be4f:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001be56:	66 c1 ea 09          	shr    dx,0x9
c001be5a:	83 e2 01             	and    edx,0x1
c001be5d:	84 c9                	test   cl,cl
c001be5f:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001be65:	75 2f                	jne    c001be96 <IDE::detect()+0x224>
c001be67:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001be6d:	85 c0                	test   eax,eax
c001be6f:	74 66                	je     c001bed7 <IDE::detect()+0x265>
c001be71:	50                   	push   eax
c001be72:	55                   	push   ebp
c001be73:	56                   	push   esi
c001be74:	68 37 1d 02 c0       	push   0xc0021d37
c001be79:	e8 b8 fc fe ff       	call   c000bb36 <kprintf(char const*, ...)>
c001be7e:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001be85:	e8 7e 33 ff ff       	call   c000f208 <operator new(unsigned long)>
c001be8a:	89 c7                	mov    edi,eax
c001be8c:	89 04 24             	mov    DWORD PTR [esp],eax
c001be8f:	e8 e8 02 00 00       	call   c001c17c <ATA::ATA()>
c001be94:	eb 28                	jmp    c001bebe <IDE::detect()+0x24c>
c001be96:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001be9c:	55                   	push   ebp
c001be9d:	56                   	push   esi
c001be9e:	68 66 1d 02 c0       	push   0xc0021d66
c001bea3:	e8 8e fc fe ff       	call   c000bb36 <kprintf(char const*, ...)>
c001bea8:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001beaf:	e8 54 33 ff ff       	call   c000f208 <operator new(unsigned long)>
c001beb4:	89 c7                	mov    edi,eax
c001beb6:	89 04 24             	mov    DWORD PTR [esp],eax
c001beb9:	e8 ee 08 00 00       	call   c001c7ac <ATAPI::ATAPI()>
c001bebe:	5a                   	pop    edx
c001bebf:	59                   	pop    ecx
c001bec0:	57                   	push   edi
c001bec1:	53                   	push   ebx
c001bec2:	e8 4b 46 ff ff       	call   c0010512 <Device::addChild(Device*)>
c001bec7:	8b 07                	mov    eax,DWORD PTR [edi]
c001bec9:	53                   	push   ebx
c001beca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bece:	6a 00                	push   0x0
c001bed0:	57                   	push   edi
c001bed1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bed4:	83 c4 20             	add    esp,0x20
c001bed7:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001bedb:	4d                   	dec    ebp
c001bedc:	74 0a                	je     c001bee8 <IDE::detect()+0x276>
c001bede:	bd 01 00 00 00       	mov    ebp,0x1
c001bee3:	e9 bb fd ff ff       	jmp    c001bca3 <IDE::detect()+0x31>
c001bee8:	4e                   	dec    esi
c001bee9:	74 63                	je     c001bf4e <IDE::detect()+0x2dc>
c001beeb:	be 01 00 00 00       	mov    esi,0x1
c001bef0:	e9 ac fd ff ff       	jmp    c001bca1 <IDE::detect()+0x2f>
c001bef5:	50                   	push   eax
c001bef6:	6a 04                	push   0x4
c001bef8:	56                   	push   esi
c001bef9:	53                   	push   ebx
c001befa:	e8 05 f7 ff ff       	call   c001b604 <IDE::read(unsigned char, unsigned char)>
c001beff:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001bf03:	83 c4 0c             	add    esp,0xc
c001bf06:	6a 05                	push   0x5
c001bf08:	56                   	push   esi
c001bf09:	53                   	push   ebx
c001bf0a:	e8 f5 f6 ff ff       	call   c001b604 <IDE::read(unsigned char, unsigned char)>
c001bf0f:	83 c4 10             	add    esp,0x10
c001bf12:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001bf16:	80 fa 14             	cmp    dl,0x14
c001bf19:	75 04                	jne    c001bf1f <IDE::detect()+0x2ad>
c001bf1b:	3c eb                	cmp    al,0xeb
c001bf1d:	eb 07                	jmp    c001bf26 <IDE::detect()+0x2b4>
c001bf1f:	3c 96                	cmp    al,0x96
c001bf21:	75 b8                	jne    c001bedb <IDE::detect()+0x269>
c001bf23:	80 fa 69             	cmp    dl,0x69
c001bf26:	75 b3                	jne    c001bedb <IDE::detect()+0x269>
c001bf28:	68 a1 00 00 00       	push   0xa1
c001bf2d:	6a 07                	push   0x7
c001bf2f:	56                   	push   esi
c001bf30:	53                   	push   ebx
c001bf31:	e8 0e f6 ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf36:	5f                   	pop    edi
c001bf37:	58                   	pop    eax
c001bf38:	6a 00                	push   0x0
c001bf3a:	68 40 42 0f 00       	push   0xf4240
c001bf3f:	e8 7d bd ff ff       	call   c0017cc1 <nanoSleep(unsigned long long)>
c001bf44:	83 c4 10             	add    esp,0x10
c001bf47:	b1 01                	mov    cl,0x1
c001bf49:	e9 4a fe ff ff       	jmp    c001bd98 <IDE::detect()+0x126>
c001bf4e:	81 c4 1c 02 00 00    	add    esp,0x21c
c001bf54:	5b                   	pop    ebx
c001bf55:	5e                   	pop    esi
c001bf56:	5f                   	pop    edi
c001bf57:	5d                   	pop    ebp
c001bf58:	c3                   	ret    
c001bf59:	90                   	nop

c001bf5a <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001bf5a:	55                   	push   ebp
c001bf5b:	57                   	push   edi
c001bf5c:	56                   	push   esi
c001bf5d:	53                   	push   ebx
c001bf5e:	83 ec 1c             	sub    esp,0x1c
c001bf61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bf65:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bf69:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001bf6d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001bf71:	88 c3                	mov    bl,al
c001bf73:	84 c0                	test   al,al
c001bf75:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf79:	0f 84 67 01 00 00    	je     c001c0e6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001bf7f:	83 ec 0c             	sub    esp,0xc
c001bf82:	68 97 1d 02 c0       	push   0xc0021d97
c001bf87:	e8 aa fb fe ff       	call   c000bb36 <kprintf(char const*, ...)>
c001bf8c:	83 c4 10             	add    esp,0x10
c001bf8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf93:	3c 01                	cmp    al,0x1
c001bf95:	75 17                	jne    c001bfae <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001bf97:	83 ec 0c             	sub    esp,0xc
c001bf9a:	b3 13                	mov    bl,0x13
c001bf9c:	68 a3 1d 02 c0       	push   0xc0021da3
c001bfa1:	e8 90 fb fe ff       	call   c000bb36 <kprintf(char const*, ...)>
c001bfa6:	83 c4 10             	add    esp,0x10
c001bfa9:	e9 25 01 00 00       	jmp    c001c0d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001bfae:	3c 02                	cmp    al,0x2
c001bfb0:	0f 85 ef 00 00 00    	jne    c001c0a5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001bfb6:	d1 e6                	shl    esi,1
c001bfb8:	09 ee                	or     esi,ebp
c001bfba:	52                   	push   edx
c001bfbb:	89 f0                	mov    eax,esi
c001bfbd:	6a 01                	push   0x1
c001bfbf:	0f b6 f0             	movzx  esi,al
c001bfc2:	c1 e6 06             	shl    esi,0x6
c001bfc5:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001bfcd:	50                   	push   eax
c001bfce:	57                   	push   edi
c001bfcf:	e8 30 f6 ff ff       	call   c001b604 <IDE::read(unsigned char, unsigned char)>
c001bfd4:	83 c4 10             	add    esp,0x10
c001bfd7:	89 c6                	mov    esi,eax
c001bfd9:	a8 01                	test   al,0x1
c001bfdb:	74 12                	je     c001bfef <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001bfdd:	83 ec 0c             	sub    esp,0xc
c001bfe0:	b3 07                	mov    bl,0x7
c001bfe2:	68 b8 1d 02 c0       	push   0xc0021db8
c001bfe7:	e8 4a fb fe ff       	call   c000bb36 <kprintf(char const*, ...)>
c001bfec:	83 c4 10             	add    esp,0x10
c001bfef:	f7 c6 02 00 00 00    	test   esi,0x2
c001bff5:	74 12                	je     c001c009 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001bff7:	83 ec 0c             	sub    esp,0xc
c001bffa:	b3 03                	mov    bl,0x3
c001bffc:	68 d6 1d 02 c0       	push   0xc0021dd6
c001c001:	e8 30 fb fe ff       	call   c000bb36 <kprintf(char const*, ...)>
c001c006:	83 c4 10             	add    esp,0x10
c001c009:	f7 c6 04 00 00 00    	test   esi,0x4
c001c00f:	74 12                	je     c001c023 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001c011:	83 ec 0c             	sub    esp,0xc
c001c014:	b3 14                	mov    bl,0x14
c001c016:	68 f6 1d 02 c0       	push   0xc0021df6
c001c01b:	e8 16 fb fe ff       	call   c000bb36 <kprintf(char const*, ...)>
c001c020:	83 c4 10             	add    esp,0x10
c001c023:	f7 c6 08 00 00 00    	test   esi,0x8
c001c029:	74 12                	je     c001c03d <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001c02b:	83 ec 0c             	sub    esp,0xc
c001c02e:	b3 03                	mov    bl,0x3
c001c030:	68 d6 1d 02 c0       	push   0xc0021dd6
c001c035:	e8 fc fa fe ff       	call   c000bb36 <kprintf(char const*, ...)>
c001c03a:	83 c4 10             	add    esp,0x10
c001c03d:	f7 c6 10 00 00 00    	test   esi,0x10
c001c043:	74 12                	je     c001c057 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001c045:	83 ec 0c             	sub    esp,0xc
c001c048:	b3 15                	mov    bl,0x15
c001c04a:	68 0e 1e 02 c0       	push   0xc0021e0e
c001c04f:	e8 e2 fa fe ff       	call   c000bb36 <kprintf(char const*, ...)>
c001c054:	83 c4 10             	add    esp,0x10
c001c057:	f7 c6 20 00 00 00    	test   esi,0x20
c001c05d:	74 12                	je     c001c071 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001c05f:	83 ec 0c             	sub    esp,0xc
c001c062:	b3 03                	mov    bl,0x3
c001c064:	68 d6 1d 02 c0       	push   0xc0021dd6
c001c069:	e8 c8 fa fe ff       	call   c000bb36 <kprintf(char const*, ...)>
c001c06e:	83 c4 10             	add    esp,0x10
c001c071:	f7 c6 40 00 00 00    	test   esi,0x40
c001c077:	74 12                	je     c001c08b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001c079:	83 ec 0c             	sub    esp,0xc
c001c07c:	b3 16                	mov    bl,0x16
c001c07e:	68 28 1e 02 c0       	push   0xc0021e28
c001c083:	e8 ae fa fe ff       	call   c000bb36 <kprintf(char const*, ...)>
c001c088:	83 c4 10             	add    esp,0x10
c001c08b:	89 f0                	mov    eax,esi
c001c08d:	84 c0                	test   al,al
c001c08f:	79 42                	jns    c001c0d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c091:	83 ec 0c             	sub    esp,0xc
c001c094:	b3 0d                	mov    bl,0xd
c001c096:	68 49 1e 02 c0       	push   0xc0021e49
c001c09b:	e8 96 fa fe ff       	call   c000bb36 <kprintf(char const*, ...)>
c001c0a0:	83 c4 10             	add    esp,0x10
c001c0a3:	eb 2e                	jmp    c001c0d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c0a5:	3c 03                	cmp    al,0x3
c001c0a7:	75 14                	jne    c001c0bd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001c0a9:	83 ec 0c             	sub    esp,0xc
c001c0ac:	b3 17                	mov    bl,0x17
c001c0ae:	68 5d 1e 02 c0       	push   0xc0021e5d
c001c0b3:	e8 7e fa fe ff       	call   c000bb36 <kprintf(char const*, ...)>
c001c0b8:	83 c4 10             	add    esp,0x10
c001c0bb:	eb 16                	jmp    c001c0d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c0bd:	3c 04                	cmp    al,0x4
c001c0bf:	75 12                	jne    c001c0d3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001c0c1:	83 ec 0c             	sub    esp,0xc
c001c0c4:	b3 08                	mov    bl,0x8
c001c0c6:	68 73 1e 02 c0       	push   0xc0021e73
c001c0cb:	e8 66 fa fe ff       	call   c000bb36 <kprintf(char const*, ...)>
c001c0d0:	83 c4 10             	add    esp,0x10
c001c0d3:	50                   	push   eax
c001c0d4:	50                   	push   eax
c001c0d5:	0f b6 c3             	movzx  eax,bl
c001c0d8:	50                   	push   eax
c001c0d9:	68 8b 1e 02 c0       	push   0xc0021e8b
c001c0de:	e8 53 fa fe ff       	call   c000bb36 <kprintf(char const*, ...)>
c001c0e3:	83 c4 10             	add    esp,0x10
c001c0e6:	83 c4 1c             	add    esp,0x1c
c001c0e9:	88 d8                	mov    al,bl
c001c0eb:	5b                   	pop    ebx
c001c0ec:	5e                   	pop    esi
c001c0ed:	5f                   	pop    edi
c001c0ee:	5d                   	pop    ebp
c001c0ef:	c3                   	ret    

c001c0f0 <IDE::polling(unsigned char, unsigned int)>:
c001c0f0:	57                   	push   edi
c001c0f1:	56                   	push   esi
c001c0f2:	53                   	push   ebx
c001c0f3:	bb 04 00 00 00       	mov    ebx,0x4
c001c0f8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c0fc:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c101:	52                   	push   edx
c001c102:	6a 0c                	push   0xc
c001c104:	56                   	push   esi
c001c105:	57                   	push   edi
c001c106:	e8 f9 f4 ff ff       	call   c001b604 <IDE::read(unsigned char, unsigned char)>
c001c10b:	83 c4 10             	add    esp,0x10
c001c10e:	4b                   	dec    ebx
c001c10f:	75 f0                	jne    c001c101 <IDE::polling(unsigned char, unsigned int)+0x11>
c001c111:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c116:	50                   	push   eax
c001c117:	6a 0c                	push   0xc
c001c119:	56                   	push   esi
c001c11a:	57                   	push   edi
c001c11b:	e8 e4 f4 ff ff       	call   c001b604 <IDE::read(unsigned char, unsigned char)>
c001c120:	83 c4 10             	add    esp,0x10
c001c123:	a8 01                	test   al,0x1
c001c125:	74 12                	je     c001c139 <IDE::polling(unsigned char, unsigned int)+0x49>
c001c127:	83 ec 0c             	sub    esp,0xc
c001c12a:	68 a5 1e 02 c0       	push   0xc0021ea5
c001c12f:	e8 02 fa fe ff       	call   c000bb36 <kprintf(char const*, ...)>
c001c134:	83 c4 10             	add    esp,0x10
c001c137:	eb 17                	jmp    c001c150 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c139:	a8 20                	test   al,0x20
c001c13b:	75 0f                	jne    c001c14c <IDE::polling(unsigned char, unsigned int)+0x5c>
c001c13d:	4b                   	dec    ebx
c001c13e:	74 10                	je     c001c150 <IDE::polling(unsigned char, unsigned int)+0x60>
c001c140:	84 c0                	test   al,al
c001c142:	78 d2                	js     c001c116 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c144:	a8 08                	test   al,0x8
c001c146:	74 ce                	je     c001c116 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c148:	31 c0                	xor    eax,eax
c001c14a:	eb 06                	jmp    c001c152 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c14c:	b0 01                	mov    al,0x1
c001c14e:	eb 02                	jmp    c001c152 <IDE::polling(unsigned char, unsigned int)+0x62>
c001c150:	b0 02                	mov    al,0x2
c001c152:	5b                   	pop    ebx
c001c153:	5e                   	pop    esi
c001c154:	5f                   	pop    edi
c001c155:	c3                   	ret    

c001c156 <ATA::close(int, int, void*)>:
c001c156:	83 ec 0c             	sub    esp,0xc
c001c159:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c15d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c163:	85 c0                	test   eax,eax
c001c165:	74 0c                	je     c001c173 <ATA::close(int, int, void*)+0x1d>
c001c167:	83 ec 0c             	sub    esp,0xc
c001c16a:	8b 10                	mov    edx,DWORD PTR [eax]
c001c16c:	50                   	push   eax
c001c16d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c170:	83 c4 10             	add    esp,0x10
c001c173:	31 c0                	xor    eax,eax
c001c175:	83 c4 0c             	add    esp,0xc
c001c178:	c3                   	ret    
c001c179:	90                   	nop

c001c17a <ATA::powerSaving(PowerSavingLevel)>:
c001c17a:	c3                   	ret    
c001c17b:	90                   	nop

c001c17c <ATA::ATA()>:
c001c17c:	83 ec 0c             	sub    esp,0xc
c001c17f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c183:	83 ec 04             	sub    esp,0x4
c001c186:	68 00 02 00 00       	push   0x200
c001c18b:	68 e8 1e 02 c0       	push   0xc0021ee8
c001c190:	50                   	push   eax
c001c191:	e8 82 47 ff ff       	call   c0010918 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c196:	83 c4 10             	add    esp,0x10
c001c199:	ba 14 1f 02 c0       	mov    edx,0xc0021f14
c001c19e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1a2:	89 10                	mov    DWORD PTR [eax],edx
c001c1a4:	90                   	nop
c001c1a5:	83 c4 0c             	add    esp,0xc
c001c1a8:	c3                   	ret    
c001c1a9:	90                   	nop

c001c1aa <ATA::flush(bool)>:
c001c1aa:	53                   	push   ebx
c001c1ab:	83 ec 08             	sub    esp,0x8
c001c1ae:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001c1b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c1b7:	19 c0                	sbb    eax,eax
c001c1b9:	83 e0 fd             	and    eax,0xfffffffd
c001c1bc:	05 ea 00 00 00       	add    eax,0xea
c001c1c1:	50                   	push   eax
c001c1c2:	6a 07                	push   0x7
c001c1c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c1cb:	50                   	push   eax
c001c1cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c1d2:	e8 6d f3 ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c1d7:	83 c4 0c             	add    esp,0xc
c001c1da:	6a 00                	push   0x0
c001c1dc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c1e3:	50                   	push   eax
c001c1e4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c1ea:	e8 01 ff ff ff       	call   c001c0f0 <IDE::polling(unsigned char, unsigned int)>
c001c1ef:	83 c4 18             	add    esp,0x18
c001c1f2:	5b                   	pop    ebx
c001c1f3:	c3                   	ret    

c001c1f4 <ATA::readyForCommand()>:
c001c1f4:	56                   	push   esi
c001c1f5:	53                   	push   ebx
c001c1f6:	31 db                	xor    ebx,ebx
c001c1f8:	50                   	push   eax
c001c1f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c1fd:	50                   	push   eax
c001c1fe:	6a 0c                	push   0xc
c001c200:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c207:	50                   	push   eax
c001c208:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c20e:	e8 f1 f3 ff ff       	call   c001b604 <IDE::read(unsigned char, unsigned char)>
c001c213:	83 c4 10             	add    esp,0x10
c001c216:	a8 88                	test   al,0x88
c001c218:	74 23                	je     c001c23d <ATA::readyForCommand()+0x49>
c001c21a:	43                   	inc    ebx
c001c21b:	83 fb 63             	cmp    ebx,0x63
c001c21e:	7e dd                	jle    c001c1fd <ATA::readyForCommand()+0x9>
c001c220:	51                   	push   ecx
c001c221:	51                   	push   ecx
c001c222:	6a 00                	push   0x0
c001c224:	68 40 42 0f 00       	push   0xf4240
c001c229:	e8 93 ba ff ff       	call   c0017cc1 <nanoSleep(unsigned long long)>
c001c22e:	83 c4 10             	add    esp,0x10
c001c231:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c237:	75 c4                	jne    c001c1fd <ATA::readyForCommand()+0x9>
c001c239:	31 c0                	xor    eax,eax
c001c23b:	eb 02                	jmp    c001c23f <ATA::readyForCommand()+0x4b>
c001c23d:	b0 01                	mov    al,0x1
c001c23f:	5a                   	pop    edx
c001c240:	5b                   	pop    ebx
c001c241:	5e                   	pop    esi
c001c242:	c3                   	ret    
c001c243:	90                   	nop

c001c244 <ATA::access(unsigned long long, int, void*, bool)>:
c001c244:	55                   	push   ebp
c001c245:	57                   	push   edi
c001c246:	56                   	push   esi
c001c247:	53                   	push   ebx
c001c248:	83 ec 2c             	sub    esp,0x2c
c001c24b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c24f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c253:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c257:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c25b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c25f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c263:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c267:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c26d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c271:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c277:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c27b:	c1 e0 06             	shl    eax,0x6
c001c27e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c286:	74 5d                	je     c001c2e5 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c288:	89 fa                	mov    edx,edi
c001c28a:	89 f0                	mov    eax,esi
c001c28c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c290:	c1 ea 1c             	shr    edx,0x1c
c001c293:	89 d1                	mov    ecx,edx
c001c295:	09 c1                	or     ecx,eax
c001c297:	74 25                	je     c001c2be <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c299:	31 ed                	xor    ebp,ebp
c001c29b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c2a2:	89 fa                	mov    edx,edi
c001c2a4:	89 f0                	mov    eax,esi
c001c2a6:	0f ad d0             	shrd   eax,edx,cl
c001c2a9:	d3 ea                	shr    edx,cl
c001c2ab:	f6 c1 20             	test   cl,0x20
c001c2ae:	74 02                	je     c001c2b2 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c2b0:	89 d0                	mov    eax,edx
c001c2b2:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c2b6:	45                   	inc    ebp
c001c2b7:	83 fd 06             	cmp    ebp,0x6
c001c2ba:	75 df                	jne    c001c29b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c2bc:	eb 76                	jmp    c001c334 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c2be:	89 f0                	mov    eax,esi
c001c2c0:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c2c5:	89 fa                	mov    edx,edi
c001c2c7:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c2ce:	0f ac d0 10          	shrd   eax,edx,0x10
c001c2d2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c2d7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c2db:	c1 ee 18             	shr    esi,0x18
c001c2de:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c2e3:	eb 56                	jmp    c001c33b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c2e5:	6a 00                	push   0x0
c001c2e7:	6a 3f                	push   0x3f
c001c2e9:	57                   	push   edi
c001c2ea:	56                   	push   esi
c001c2eb:	e8 dc 1e 00 00       	call   c001e1cc <__umoddi3>
c001c2f0:	83 c4 10             	add    esp,0x10
c001c2f3:	40                   	inc    eax
c001c2f4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c2f8:	6a 00                	push   0x0
c001c2fa:	68 f0 03 00 00       	push   0x3f0
c001c2ff:	57                   	push   edi
c001c300:	56                   	push   esi
c001c301:	e8 c6 1d 00 00       	call   c001e0cc <__udivdi3>
c001c306:	83 c4 10             	add    esp,0x10
c001c309:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c30e:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c315:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c31a:	6a 00                	push   0x0
c001c31c:	6a 3f                	push   0x3f
c001c31e:	57                   	push   edi
c001c31f:	56                   	push   esi
c001c320:	e8 a7 1d 00 00       	call   c001e0cc <__udivdi3>
c001c325:	83 c4 10             	add    esp,0x10
c001c328:	89 c6                	mov    esi,eax
c001c32a:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c32f:	83 e6 0f             	and    esi,0xf
c001c332:	eb 07                	jmp    c001c33b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c334:	31 f6                	xor    esi,esi
c001c336:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c33b:	bf 01 00 00 00       	mov    edi,0x1
c001c340:	50                   	push   eax
c001c341:	6a 00                	push   0x0
c001c343:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c34a:	50                   	push   eax
c001c34b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c34f:	e8 fc f3 ff ff       	call   c001b750 <IDE::enableIRQs(unsigned char, bool)>
c001c354:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c357:	e8 98 fe ff ff       	call   c001c1f4 <ATA::readyForCommand()>
c001c35c:	83 c4 10             	add    esp,0x10
c001c35f:	84 c0                	test   al,al
c001c361:	0f 84 50 02 00 00    	je     c001c5b7 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c367:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c36d:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c373:	c1 e0 04             	shl    eax,0x4
c001c376:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c37d:	09 c6                	or     esi,eax
c001c37f:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001c384:	75 05                	jne    c001c38b <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c386:	83 ce a0             	or     esi,0xffffffa0
c001c389:	eb 03                	jmp    c001c38e <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c38b:	83 ce e0             	or     esi,0xffffffe0
c001c38e:	89 f0                	mov    eax,esi
c001c390:	0f b6 f0             	movzx  esi,al
c001c393:	56                   	push   esi
c001c394:	6a 06                	push   0x6
c001c396:	51                   	push   ecx
c001c397:	52                   	push   edx
c001c398:	e8 a7 f1 ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c39d:	83 c4 10             	add    esp,0x10
c001c3a0:	6a 00                	push   0x0
c001c3a2:	6a 01                	push   0x1
c001c3a4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c3ab:	50                   	push   eax
c001c3ac:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c3b2:	e8 8d f1 ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3b7:	83 c4 10             	add    esp,0x10
c001c3ba:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001c3bf:	75 6e                	jne    c001c42f <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c001c3c1:	6a 00                	push   0x0
c001c3c3:	6a 08                	push   0x8
c001c3c5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c3cc:	50                   	push   eax
c001c3cd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c3d3:	e8 6c f1 ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3d8:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c3dd:	50                   	push   eax
c001c3de:	6a 09                	push   0x9
c001c3e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c3e7:	50                   	push   eax
c001c3e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c3ee:	e8 51 f1 ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c3f3:	83 c4 20             	add    esp,0x20
c001c3f6:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c3fb:	50                   	push   eax
c001c3fc:	6a 0a                	push   0xa
c001c3fe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c405:	50                   	push   eax
c001c406:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c40c:	e8 33 f1 ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c411:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c416:	50                   	push   eax
c001c417:	6a 0b                	push   0xb
c001c419:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c420:	50                   	push   eax
c001c421:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c427:	e8 18 f1 ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c42c:	83 c4 20             	add    esp,0x20
c001c42f:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c434:	50                   	push   eax
c001c435:	6a 02                	push   0x2
c001c437:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c43e:	50                   	push   eax
c001c43f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c445:	e8 fa f0 ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c44a:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c44f:	50                   	push   eax
c001c450:	6a 03                	push   0x3
c001c452:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c459:	50                   	push   eax
c001c45a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c460:	e8 df f0 ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c465:	83 c4 20             	add    esp,0x20
c001c468:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c46d:	50                   	push   eax
c001c46e:	6a 04                	push   0x4
c001c470:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c477:	50                   	push   eax
c001c478:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c47e:	e8 c1 f0 ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c483:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c488:	50                   	push   eax
c001c489:	6a 05                	push   0x5
c001c48b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c492:	50                   	push   eax
c001c493:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c499:	e8 a6 f0 ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c49e:	83 c4 20             	add    esp,0x20
c001c4a1:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c001c4a6:	0f 94 c0             	sete   al
c001c4a9:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c4ae:	74 09                	je     c001c4b9 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c001c4b0:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c001c4b7:	eb 07                	jmp    c001c4c0 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001c4b9:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c001c4c0:	0f b6 c0             	movzx  eax,al
c001c4c3:	50                   	push   eax
c001c4c4:	6a 07                	push   0x7
c001c4c6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c4cd:	50                   	push   eax
c001c4ce:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c4d4:	e8 6b f0 ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c4d9:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c4dd:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001c4e1:	83 c4 10             	add    esp,0x10
c001c4e4:	85 f6                	test   esi,esi
c001c4e6:	0f 84 ac 00 00 00    	je     c001c598 <ATA::access(unsigned long long, int, void*, bool)+0x354>
c001c4ec:	50                   	push   eax
c001c4ed:	6a 01                	push   0x1
c001c4ef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c4f6:	50                   	push   eax
c001c4f7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c4fd:	e8 ee fb ff ff       	call   c001c0f0 <IDE::polling(unsigned char, unsigned int)>
c001c502:	83 c4 10             	add    esp,0x10
c001c505:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001c50b:	84 c0                	test   al,al
c001c50d:	74 20                	je     c001c52f <ATA::access(unsigned long long, int, void*, bool)+0x2eb>
c001c50f:	0f b6 f8             	movzx  edi,al
c001c512:	0f b6 d2             	movzx  edx,dl
c001c515:	57                   	push   edi
c001c516:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001c51d:	50                   	push   eax
c001c51e:	52                   	push   edx
c001c51f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c525:	e8 30 fa ff ff       	call   c001bf5a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c52a:	e9 85 00 00 00       	jmp    c001c5b4 <ATA::access(unsigned long long, int, void*, bool)+0x370>
c001c52f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001c534:	74 41                	je     c001c577 <ATA::access(unsigned long long, int, void*, bool)+0x333>
c001c536:	31 c9                	xor    ecx,ecx
c001c538:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001c53c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c540:	50                   	push   eax
c001c541:	50                   	push   eax
c001c542:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c549:	50                   	push   eax
c001c54a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c550:	e8 dd ef ff ff       	call   c001b532 <IDE::getBase(unsigned char)>
c001c555:	89 c2                	mov    edx,eax
c001c557:	89 e8                	mov    eax,ebp
c001c559:	66 ef                	out    dx,ax
c001c55b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c55f:	83 c4 10             	add    esp,0x10
c001c562:	41                   	inc    ecx
c001c563:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001c569:	75 cd                	jne    c001c538 <ATA::access(unsigned long long, int, void*, bool)+0x2f4>
c001c56b:	4e                   	dec    esi
c001c56c:	81 c7 00 02 00 00    	add    edi,0x200
c001c572:	e9 6d ff ff ff       	jmp    c001c4e4 <ATA::access(unsigned long long, int, void*, bool)+0x2a0>
c001c577:	0f b6 d2             	movzx  edx,dl
c001c57a:	51                   	push   ecx
c001c57b:	51                   	push   ecx
c001c57c:	52                   	push   edx
c001c57d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c583:	e8 aa ef ff ff       	call   c001b532 <IDE::getBase(unsigned char)>
c001c588:	b9 00 01 00 00       	mov    ecx,0x100
c001c58d:	89 c2                	mov    edx,eax
c001c58f:	fc                   	cld    
c001c590:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001c593:	83 c4 10             	add    esp,0x10
c001c596:	eb d3                	jmp    c001c56b <ATA::access(unsigned long long, int, void*, bool)+0x327>
c001c598:	31 ff                	xor    edi,edi
c001c59a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c59f:	74 16                	je     c001c5b7 <ATA::access(unsigned long long, int, void*, bool)+0x373>
c001c5a1:	50                   	push   eax
c001c5a2:	50                   	push   eax
c001c5a3:	31 c0                	xor    eax,eax
c001c5a5:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c001c5aa:	0f 94 c0             	sete   al
c001c5ad:	50                   	push   eax
c001c5ae:	53                   	push   ebx
c001c5af:	e8 f6 fb ff ff       	call   c001c1aa <ATA::flush(bool)>
c001c5b4:	83 c4 10             	add    esp,0x10
c001c5b7:	83 c4 2c             	add    esp,0x2c
c001c5ba:	89 f8                	mov    eax,edi
c001c5bc:	5b                   	pop    ebx
c001c5bd:	5e                   	pop    esi
c001c5be:	5f                   	pop    edi
c001c5bf:	5d                   	pop    ebp
c001c5c0:	c3                   	ret    
c001c5c1:	90                   	nop

c001c5c2 <ATA::read(unsigned long long, int, void*)>:
c001c5c2:	57                   	push   edi
c001c5c3:	b8 04 00 00 00       	mov    eax,0x4
c001c5c8:	56                   	push   esi
c001c5c9:	53                   	push   ebx
c001c5ca:	83 ec 10             	sub    esp,0x10
c001c5cd:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c5d1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c5d5:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001c5d8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c5dc:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c5e0:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001c5e6:	77 3b                	ja     c001c623 <ATA::read(unsigned long long, int, void*)+0x61>
c001c5e8:	b8 06 00 00 00       	mov    eax,0x6
c001c5ed:	85 d2                	test   edx,edx
c001c5ef:	74 32                	je     c001c623 <ATA::read(unsigned long long, int, void*)+0x61>
c001c5f1:	50                   	push   eax
c001c5f2:	50                   	push   eax
c001c5f3:	6a 00                	push   0x0
c001c5f5:	52                   	push   edx
c001c5f6:	53                   	push   ebx
c001c5f7:	57                   	push   edi
c001c5f8:	56                   	push   esi
c001c5f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c5fd:	e8 42 fc ff ff       	call   c001c244 <ATA::access(unsigned long long, int, void*, bool)>
c001c602:	83 c4 20             	add    esp,0x20
c001c605:	85 c0                	test   eax,eax
c001c607:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c60b:	75 11                	jne    c001c61e <ATA::read(unsigned long long, int, void*)+0x5c>
c001c60d:	01 1d e4 4b 02 c0    	add    DWORD PTR ds:0xc0024be4,ebx
c001c613:	e8 6e 0a ff ff       	call   c000d086 <VgaText::updateDiskUsage()>
c001c618:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c61c:	eb 05                	jmp    c001c623 <ATA::read(unsigned long long, int, void*)+0x61>
c001c61e:	b8 01 00 00 00       	mov    eax,0x1
c001c623:	83 c4 10             	add    esp,0x10
c001c626:	5b                   	pop    ebx
c001c627:	5e                   	pop    esi
c001c628:	5f                   	pop    edi
c001c629:	c3                   	ret    

c001c62a <ATA::write(unsigned long long, int, void*)>:
c001c62a:	57                   	push   edi
c001c62b:	b8 04 00 00 00       	mov    eax,0x4
c001c630:	56                   	push   esi
c001c631:	53                   	push   ebx
c001c632:	83 ec 10             	sub    esp,0x10
c001c635:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001c639:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001c63d:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001c640:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001c644:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c648:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001c64e:	77 3b                	ja     c001c68b <ATA::write(unsigned long long, int, void*)+0x61>
c001c650:	b8 06 00 00 00       	mov    eax,0x6
c001c655:	85 d2                	test   edx,edx
c001c657:	74 32                	je     c001c68b <ATA::write(unsigned long long, int, void*)+0x61>
c001c659:	50                   	push   eax
c001c65a:	50                   	push   eax
c001c65b:	6a 01                	push   0x1
c001c65d:	52                   	push   edx
c001c65e:	53                   	push   ebx
c001c65f:	57                   	push   edi
c001c660:	56                   	push   esi
c001c661:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c665:	e8 da fb ff ff       	call   c001c244 <ATA::access(unsigned long long, int, void*, bool)>
c001c66a:	83 c4 20             	add    esp,0x20
c001c66d:	85 c0                	test   eax,eax
c001c66f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c673:	75 11                	jne    c001c686 <ATA::write(unsigned long long, int, void*)+0x5c>
c001c675:	01 1d e0 4b 02 c0    	add    DWORD PTR ds:0xc0024be0,ebx
c001c67b:	e8 06 0a ff ff       	call   c000d086 <VgaText::updateDiskUsage()>
c001c680:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c684:	eb 05                	jmp    c001c68b <ATA::write(unsigned long long, int, void*)+0x61>
c001c686:	b8 01 00 00 00       	mov    eax,0x1
c001c68b:	83 c4 10             	add    esp,0x10
c001c68e:	5b                   	pop    ebx
c001c68f:	5e                   	pop    esi
c001c690:	5f                   	pop    edi
c001c691:	c3                   	ret    

c001c692 <ATA::detectCHS()>:
c001c692:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c696:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001c69c:	c1 e0 06             	shl    eax,0x6
c001c69f:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001c6a5:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001c6af:	c7 44 24 04 f7 1e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021ef7
c001c6b7:	e9 98 f5 fe ff       	jmp    c000bc54 <panic(char const*)>

c001c6bc <ATA::open(int, int, void*)>:
c001c6bc:	53                   	push   ebx
c001c6bd:	83 ec 08             	sub    esp,0x8
c001c6c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c6c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c6c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c6cc:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001c6d2:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001c6d8:	c1 e0 06             	shl    eax,0x6
c001c6db:	01 d0                	add    eax,edx
c001c6dd:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001c6e4:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001c6ea:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001c6f1:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001c6fb:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001c701:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001c708:	75 0c                	jne    c001c716 <ATA::open(int, int, void*)+0x5a>
c001c70a:	83 ec 0c             	sub    esp,0xc
c001c70d:	53                   	push   ebx
c001c70e:	e8 7f ff ff ff       	call   c001c692 <ATA::detectCHS()>
c001c713:	83 c4 10             	add    esp,0x10
c001c716:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c71c:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c722:	c1 e0 06             	shl    eax,0x6
c001c725:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001c72c:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001c736:	d1 e8                	shr    eax,1
c001c738:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001c73e:	6a 04                	push   0x4
c001c740:	6a 0c                	push   0xc
c001c742:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c749:	50                   	push   eax
c001c74a:	52                   	push   edx
c001c74b:	e8 f4 ed ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c750:	90                   	nop
c001c751:	90                   	nop
c001c752:	6a 00                	push   0x0
c001c754:	6a 0c                	push   0xc
c001c756:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c75d:	50                   	push   eax
c001c75e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c764:	e8 db ed ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c769:	83 c4 14             	add    esp,0x14
c001c76c:	53                   	push   ebx
c001c76d:	e8 0e 42 ff ff       	call   c0010980 <PhysicalDisk::startCache()>
c001c772:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c775:	e8 62 5a ff ff       	call   c00121dc <createPartitionsForDisk(PhysicalDisk*)>
c001c77a:	31 c0                	xor    eax,eax
c001c77c:	83 c4 18             	add    esp,0x18
c001c77f:	5b                   	pop    ebx
c001c780:	c3                   	ret    
c001c781:	90                   	nop

c001c782 <ATAPI::write(unsigned long long, int, void*)>:
c001c782:	b8 03 00 00 00       	mov    eax,0x3
c001c787:	c3                   	ret    

c001c788 <ATAPI::close(int, int, void*)>:
c001c788:	83 ec 0c             	sub    esp,0xc
c001c78b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c78f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c795:	85 c0                	test   eax,eax
c001c797:	74 0c                	je     c001c7a5 <ATAPI::close(int, int, void*)+0x1d>
c001c799:	83 ec 0c             	sub    esp,0xc
c001c79c:	8b 10                	mov    edx,DWORD PTR [eax]
c001c79e:	50                   	push   eax
c001c79f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c7a2:	83 c4 10             	add    esp,0x10
c001c7a5:	31 c0                	xor    eax,eax
c001c7a7:	83 c4 0c             	add    esp,0xc
c001c7aa:	c3                   	ret    
c001c7ab:	90                   	nop

c001c7ac <ATAPI::ATAPI()>:
c001c7ac:	83 ec 0c             	sub    esp,0xc
c001c7af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b3:	83 ec 04             	sub    esp,0x4
c001c7b6:	68 00 08 00 00       	push   0x800
c001c7bb:	68 40 1f 02 c0       	push   0xc0021f40
c001c7c0:	50                   	push   eax
c001c7c1:	e8 52 41 ff ff       	call   c0010918 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c7c6:	83 c4 10             	add    esp,0x10
c001c7c9:	ba 80 1f 02 c0       	mov    edx,0xc0021f80
c001c7ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7d2:	89 10                	mov    DWORD PTR [eax],edx
c001c7d4:	90                   	nop
c001c7d5:	83 c4 0c             	add    esp,0xc
c001c7d8:	c3                   	ret    
c001c7d9:	90                   	nop

c001c7da <ATAPI::readyForCommand()>:
c001c7da:	56                   	push   esi
c001c7db:	53                   	push   ebx
c001c7dc:	31 db                	xor    ebx,ebx
c001c7de:	50                   	push   eax
c001c7df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c7e3:	50                   	push   eax
c001c7e4:	6a 0c                	push   0xc
c001c7e6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c7ed:	50                   	push   eax
c001c7ee:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c7f4:	e8 0b ee ff ff       	call   c001b604 <IDE::read(unsigned char, unsigned char)>
c001c7f9:	83 c4 10             	add    esp,0x10
c001c7fc:	a8 88                	test   al,0x88
c001c7fe:	74 23                	je     c001c823 <ATAPI::readyForCommand()+0x49>
c001c800:	43                   	inc    ebx
c001c801:	83 fb 63             	cmp    ebx,0x63
c001c804:	7e dd                	jle    c001c7e3 <ATAPI::readyForCommand()+0x9>
c001c806:	51                   	push   ecx
c001c807:	51                   	push   ecx
c001c808:	6a 00                	push   0x0
c001c80a:	68 40 42 0f 00       	push   0xf4240
c001c80f:	e8 ad b4 ff ff       	call   c0017cc1 <nanoSleep(unsigned long long)>
c001c814:	83 c4 10             	add    esp,0x10
c001c817:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c81d:	75 c4                	jne    c001c7e3 <ATAPI::readyForCommand()+0x9>
c001c81f:	31 c0                	xor    eax,eax
c001c821:	eb 02                	jmp    c001c825 <ATAPI::readyForCommand()+0x4b>
c001c823:	b0 01                	mov    al,0x1
c001c825:	5a                   	pop    edx
c001c826:	5b                   	pop    ebx
c001c827:	5e                   	pop    esi
c001c828:	c3                   	ret    
c001c829:	90                   	nop

c001c82a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001c82a:	55                   	push   ebp
c001c82b:	57                   	push   edi
c001c82c:	56                   	push   esi
c001c82d:	53                   	push   ebx
c001c82e:	83 ec 20             	sub    esp,0x20
c001c831:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c835:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001c839:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001c83d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c841:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001c845:	6a 01                	push   0x1
c001c847:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c84e:	50                   	push   eax
c001c84f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c855:	e8 f6 ee ff ff       	call   c001b750 <IDE::enableIRQs(unsigned char, bool)>
c001c85a:	5e                   	pop    esi
c001c85b:	58                   	pop    eax
c001c85c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c863:	50                   	push   eax
c001c864:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c86a:	e8 af ec ff ff       	call   c001b51e <IDE::prepareInterrupt(unsigned char)>
c001c86f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c872:	e8 63 ff ff ff       	call   c001c7da <ATAPI::readyForCommand()>
c001c877:	83 c4 10             	add    esp,0x10
c001c87a:	84 c0                	test   al,al
c001c87c:	75 0a                	jne    c001c888 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001c87e:	bb 01 00 00 00       	mov    ebx,0x1
c001c883:	e9 57 02 00 00       	jmp    c001cadf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c888:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001c88e:	c1 e0 04             	shl    eax,0x4
c001c891:	0f b6 c0             	movzx  eax,al
c001c894:	50                   	push   eax
c001c895:	6a 06                	push   0x6
c001c897:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c89e:	50                   	push   eax
c001c89f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c8a5:	e8 9a ec ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8aa:	6a 00                	push   0x0
c001c8ac:	6a 01                	push   0x1
c001c8ae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c8b5:	50                   	push   eax
c001c8b6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c8bc:	e8 83 ec ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8c1:	83 c4 20             	add    esp,0x20
c001c8c4:	0f b6 c3             	movzx  eax,bl
c001c8c7:	0f b6 df             	movzx  ebx,bh
c001c8ca:	50                   	push   eax
c001c8cb:	6a 04                	push   0x4
c001c8cd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c8d4:	50                   	push   eax
c001c8d5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c8db:	e8 64 ec ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8e0:	53                   	push   ebx
c001c8e1:	6a 05                	push   0x5
c001c8e3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c8ea:	50                   	push   eax
c001c8eb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c8f1:	e8 4e ec ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8f6:	83 c4 20             	add    esp,0x20
c001c8f9:	68 a0 00 00 00       	push   0xa0
c001c8fe:	6a 07                	push   0x7
c001c900:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c907:	50                   	push   eax
c001c908:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c90e:	e8 31 ec ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c913:	83 c4 0c             	add    esp,0xc
c001c916:	6a 01                	push   0x1
c001c918:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c91f:	50                   	push   eax
c001c920:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c926:	e8 c5 f7 ff ff       	call   c001c0f0 <IDE::polling(unsigned char, unsigned int)>
c001c92b:	83 c4 10             	add    esp,0x10
c001c92e:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001c934:	84 c0                	test   al,al
c001c936:	74 23                	je     c001c95b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001c938:	0f b6 d8             	movzx  ebx,al
c001c93b:	0f b6 d2             	movzx  edx,dl
c001c93e:	53                   	push   ebx
c001c93f:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001c946:	50                   	push   eax
c001c947:	52                   	push   edx
c001c948:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c94e:	e8 07 f6 ff ff       	call   c001bf5a <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001c953:	83 c4 10             	add    esp,0x10
c001c956:	e9 84 01 00 00       	jmp    c001cadf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001c95b:	0f b6 d2             	movzx  edx,dl
c001c95e:	53                   	push   ebx
c001c95f:	53                   	push   ebx
c001c960:	52                   	push   edx
c001c961:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c967:	e8 c6 eb ff ff       	call   c001b532 <IDE::getBase(unsigned char)>
c001c96c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c970:	b9 06 00 00 00       	mov    ecx,0x6
c001c975:	89 c2                	mov    edx,eax
c001c977:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001c97a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001c97e:	83 c4 10             	add    esp,0x10
c001c981:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001c987:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001c98e:	85 db                	test   ebx,ebx
c001c990:	0f 84 ec 00 00 00    	je     c001ca82 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001c996:	51                   	push   ecx
c001c997:	51                   	push   ecx
c001c998:	52                   	push   edx
c001c999:	50                   	push   eax
c001c99a:	e8 13 ed ff ff       	call   c001b6b2 <IDE::waitInterrupt(unsigned char)>
c001c99f:	83 c4 10             	add    esp,0x10
c001c9a2:	84 c0                	test   al,al
c001c9a4:	0f 84 d4 fe ff ff    	je     c001c87e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001c9aa:	56                   	push   esi
c001c9ab:	56                   	push   esi
c001c9ac:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c9b3:	50                   	push   eax
c001c9b4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c9ba:	e8 5f eb ff ff       	call   c001b51e <IDE::prepareInterrupt(unsigned char)>
c001c9bf:	83 c4 0c             	add    esp,0xc
c001c9c2:	6a 04                	push   0x4
c001c9c4:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c9cb:	50                   	push   eax
c001c9cc:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c9d2:	e8 2d ec ff ff       	call   c001b604 <IDE::read(unsigned char, unsigned char)>
c001c9d7:	83 c4 0c             	add    esp,0xc
c001c9da:	89 c6                	mov    esi,eax
c001c9dc:	6a 05                	push   0x5
c001c9de:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001c9e5:	50                   	push   eax
c001c9e6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001c9ec:	e8 13 ec ff ff       	call   c001b604 <IDE::read(unsigned char, unsigned char)>
c001c9f1:	89 f1                	mov    ecx,esi
c001c9f3:	0f b6 c0             	movzx  eax,al
c001c9f6:	0f b6 f1             	movzx  esi,cl
c001c9f9:	c1 e0 08             	shl    eax,0x8
c001c9fc:	09 c6                	or     esi,eax
c001c9fe:	d1 fe                	sar    esi,1
c001ca00:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001ca04:	83 c4 10             	add    esp,0x10
c001ca07:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ca0c:	74 41                	je     c001ca4f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ca0e:	31 c9                	xor    ecx,ecx
c001ca10:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ca16:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ca1d:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ca21:	75 0a                	jne    c001ca2d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001ca23:	01 c9                	add    ecx,ecx
c001ca25:	01 cd                	add    ebp,ecx
c001ca27:	4b                   	dec    ebx
c001ca28:	e9 54 ff ff ff       	jmp    c001c981 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001ca2d:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001ca32:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ca36:	51                   	push   ecx
c001ca37:	51                   	push   ecx
c001ca38:	52                   	push   edx
c001ca39:	50                   	push   eax
c001ca3a:	e8 f3 ea ff ff       	call   c001b532 <IDE::getBase(unsigned char)>
c001ca3f:	89 c2                	mov    edx,eax
c001ca41:	89 f0                	mov    eax,esi
c001ca43:	66 ef                	out    dx,ax
c001ca45:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ca49:	83 c4 10             	add    esp,0x10
c001ca4c:	41                   	inc    ecx
c001ca4d:	eb c1                	jmp    c001ca10 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001ca4f:	31 f6                	xor    esi,esi
c001ca51:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ca57:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ca5e:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001ca62:	75 06                	jne    c001ca6a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001ca64:	01 f6                	add    esi,esi
c001ca66:	01 f5                	add    ebp,esi
c001ca68:	eb bd                	jmp    c001ca27 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001ca6a:	51                   	push   ecx
c001ca6b:	51                   	push   ecx
c001ca6c:	52                   	push   edx
c001ca6d:	50                   	push   eax
c001ca6e:	e8 bf ea ff ff       	call   c001b532 <IDE::getBase(unsigned char)>
c001ca73:	89 c2                	mov    edx,eax
c001ca75:	66 ed                	in     ax,dx
c001ca77:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001ca7c:	83 c4 10             	add    esp,0x10
c001ca7f:	46                   	inc    esi
c001ca80:	eb cf                	jmp    c001ca51 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001ca82:	51                   	push   ecx
c001ca83:	51                   	push   ecx
c001ca84:	52                   	push   edx
c001ca85:	50                   	push   eax
c001ca86:	e8 27 ec ff ff       	call   c001b6b2 <IDE::waitInterrupt(unsigned char)>
c001ca8b:	83 c4 10             	add    esp,0x10
c001ca8e:	84 c0                	test   al,al
c001ca90:	0f 84 e8 fd ff ff    	je     c001c87e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001ca96:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ca9b:	52                   	push   edx
c001ca9c:	52                   	push   edx
c001ca9d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001caa4:	50                   	push   eax
c001caa5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001caab:	e8 6e ea ff ff       	call   c001b51e <IDE::prepareInterrupt(unsigned char)>
c001cab0:	83 c4 10             	add    esp,0x10
c001cab3:	50                   	push   eax
c001cab4:	50                   	push   eax
c001cab5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001cabc:	50                   	push   eax
c001cabd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001cac3:	e8 6a ea ff ff       	call   c001b532 <IDE::getBase(unsigned char)>
c001cac8:	8d 50 07             	lea    edx,[eax+0x7]
c001cacb:	ec                   	in     al,dx
c001cacc:	83 c4 10             	add    esp,0x10
c001cacf:	a8 88                	test   al,0x88
c001cad1:	74 0a                	je     c001cadd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001cad3:	4b                   	dec    ebx
c001cad4:	75 dd                	jne    c001cab3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001cad6:	bb 02 00 00 00       	mov    ebx,0x2
c001cadb:	eb 02                	jmp    c001cadf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001cadd:	31 db                	xor    ebx,ebx
c001cadf:	83 c4 1c             	add    esp,0x1c
c001cae2:	89 d8                	mov    eax,ebx
c001cae4:	5b                   	pop    ebx
c001cae5:	5e                   	pop    esi
c001cae6:	5f                   	pop    edi
c001cae7:	5d                   	pop    ebp
c001cae8:	c3                   	ret    
c001cae9:	90                   	nop

c001caea <ATAPI::diskRemoved()>:
c001caea:	83 ec 18             	sub    esp,0x18
c001caed:	68 4b 1f 02 c0       	push   0xc0021f4b
c001caf2:	e8 3f f0 fe ff       	call   c000bb36 <kprintf(char const*, ...)>
c001caf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cafb:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001cb02:	83 c4 1c             	add    esp,0x1c
c001cb05:	c3                   	ret    

c001cb06 <ATAPI::eject()>:
c001cb06:	57                   	push   edi
c001cb07:	b9 03 00 00 00       	mov    ecx,0x3
c001cb0c:	53                   	push   ebx
c001cb0d:	83 ec 14             	sub    esp,0x14
c001cb10:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001cb14:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001cb18:	fc                   	cld    
c001cb19:	31 c0                	xor    eax,eax
c001cb1b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cb1d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001cb22:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001cb27:	50                   	push   eax
c001cb28:	50                   	push   eax
c001cb29:	6a 00                	push   0x0
c001cb2b:	6a 00                	push   0x0
c001cb2d:	6a 00                	push   0x0
c001cb2f:	6a 02                	push   0x2
c001cb31:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cb35:	50                   	push   eax
c001cb36:	53                   	push   ebx
c001cb37:	e8 ee fc ff ff       	call   c001c82a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cb3c:	83 c4 14             	add    esp,0x14
c001cb3f:	53                   	push   ebx
c001cb40:	e8 a5 ff ff ff       	call   c001caea <ATAPI::diskRemoved()>
c001cb45:	83 c4 24             	add    esp,0x24
c001cb48:	5b                   	pop    ebx
c001cb49:	5f                   	pop    edi
c001cb4a:	c3                   	ret    
c001cb4b:	90                   	nop

c001cb4c <ATAPI::diskInserted()>:
c001cb4c:	53                   	push   ebx
c001cb4d:	83 ec 14             	sub    esp,0x14
c001cb50:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001cb54:	68 61 1f 02 c0       	push   0xc0021f61
c001cb59:	e8 d8 ef fe ff       	call   c000bb36 <kprintf(char const*, ...)>
c001cb5e:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001cb65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cb68:	e8 13 3e ff ff       	call   c0010980 <PhysicalDisk::startCache()>
c001cb6d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001cb71:	83 c4 18             	add    esp,0x18
c001cb74:	5b                   	pop    ebx
c001cb75:	e9 62 56 ff ff       	jmp    c00121dc <createPartitionsForDisk(PhysicalDisk*)>

c001cb7a <ATAPI::detectMedia()>:
c001cb7a:	56                   	push   esi
c001cb7b:	53                   	push   ebx
c001cb7c:	83 ec 28             	sub    esp,0x28
c001cb7f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cb83:	6a 0c                	push   0xc
c001cb85:	6a 00                	push   0x0
c001cb87:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001cb8b:	56                   	push   esi
c001cb8c:	e8 77 3a fe ff       	call   c0000608 <memset>
c001cb91:	58                   	pop    eax
c001cb92:	5a                   	pop    edx
c001cb93:	6a 00                	push   0x0
c001cb95:	6a 00                	push   0x0
c001cb97:	6a 00                	push   0x0
c001cb99:	6a 00                	push   0x0
c001cb9b:	56                   	push   esi
c001cb9c:	53                   	push   ebx
c001cb9d:	e8 88 fc ff ff       	call   c001c82a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cba2:	83 c4 1c             	add    esp,0x1c
c001cba5:	6a 0c                	push   0xc
c001cba7:	6a 00                	push   0x0
c001cba9:	56                   	push   esi
c001cbaa:	e8 59 3a fe ff       	call   c0000608 <memset>
c001cbaf:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001cbb4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001cbb9:	59                   	pop    ecx
c001cbba:	58                   	pop    eax
c001cbbb:	6a 01                	push   0x1
c001cbbd:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001cbc1:	50                   	push   eax
c001cbc2:	6a 00                	push   0x0
c001cbc4:	6a 12                	push   0x12
c001cbc6:	56                   	push   esi
c001cbc7:	53                   	push   ebx
c001cbc8:	e8 5d fc ff ff       	call   c001c82a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cbcd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001cbd1:	83 c4 20             	add    esp,0x20
c001cbd4:	83 e0 7f             	and    eax,0x7f
c001cbd7:	3c 70                	cmp    al,0x70
c001cbd9:	74 15                	je     c001cbf0 <ATAPI::detectMedia()+0x76>
c001cbdb:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cbe2:	75 0c                	jne    c001cbf0 <ATAPI::detectMedia()+0x76>
c001cbe4:	83 ec 0c             	sub    esp,0xc
c001cbe7:	53                   	push   ebx
c001cbe8:	e8 5f ff ff ff       	call   c001cb4c <ATAPI::diskInserted()>
c001cbed:	83 c4 10             	add    esp,0x10
c001cbf0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001cbf4:	83 e0 0f             	and    eax,0xf
c001cbf7:	3c 02                	cmp    al,0x2
c001cbf9:	75 1b                	jne    c001cc16 <ATAPI::detectMedia()+0x9c>
c001cbfb:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001cc00:	75 2d                	jne    c001cc2f <ATAPI::detectMedia()+0xb5>
c001cc02:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cc09:	74 24                	je     c001cc2f <ATAPI::detectMedia()+0xb5>
c001cc0b:	83 ec 0c             	sub    esp,0xc
c001cc0e:	53                   	push   ebx
c001cc0f:	e8 d6 fe ff ff       	call   c001caea <ATAPI::diskRemoved()>
c001cc14:	eb 16                	jmp    c001cc2c <ATAPI::detectMedia()+0xb2>
c001cc16:	84 c0                	test   al,al
c001cc18:	75 15                	jne    c001cc2f <ATAPI::detectMedia()+0xb5>
c001cc1a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001cc21:	75 0c                	jne    c001cc2f <ATAPI::detectMedia()+0xb5>
c001cc23:	83 ec 0c             	sub    esp,0xc
c001cc26:	53                   	push   ebx
c001cc27:	e8 20 ff ff ff       	call   c001cb4c <ATAPI::diskInserted()>
c001cc2c:	83 c4 10             	add    esp,0x10
c001cc2f:	83 c4 24             	add    esp,0x24
c001cc32:	5b                   	pop    ebx
c001cc33:	5e                   	pop    esi
c001cc34:	c3                   	ret    
c001cc35:	90                   	nop

c001cc36 <ATAPI::open(int, int, void*)>:
c001cc36:	53                   	push   ebx
c001cc37:	83 ec 08             	sub    esp,0x8
c001cc3a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cc3e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cc42:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cc46:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cc4c:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cc52:	c1 e0 06             	shl    eax,0x6
c001cc55:	01 d0                	add    eax,edx
c001cc57:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001cc5e:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001cc64:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001cc6b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001cc75:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001cc7b:	6a 04                	push   0x4
c001cc7d:	6a 0c                	push   0xc
c001cc7f:	51                   	push   ecx
c001cc80:	52                   	push   edx
c001cc81:	e8 be e8 ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc86:	90                   	nop
c001cc87:	90                   	nop
c001cc88:	6a 00                	push   0x0
c001cc8a:	6a 0c                	push   0xc
c001cc8c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cc93:	50                   	push   eax
c001cc94:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cc9a:	e8 a5 e8 ff ff       	call   c001b544 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cc9f:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001cca6:	83 c4 14             	add    esp,0x14
c001cca9:	53                   	push   ebx
c001ccaa:	e8 cb fe ff ff       	call   c001cb7a <ATAPI::detectMedia()>
c001ccaf:	31 c0                	xor    eax,eax
c001ccb1:	83 c4 18             	add    esp,0x18
c001ccb4:	5b                   	pop    ebx
c001ccb5:	c3                   	ret    

c001ccb6 <ATAPI::read(unsigned long long, int, void*)>:
c001ccb6:	55                   	push   ebp
c001ccb7:	57                   	push   edi
c001ccb8:	56                   	push   esi
c001ccb9:	53                   	push   ebx
c001ccba:	83 ec 1c             	sub    esp,0x1c
c001ccbd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ccc1:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ccc5:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001ccc9:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001ccd0:	74 41                	je     c001cd13 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c001ccd2:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ccd6:	b9 03 00 00 00       	mov    ecx,0x3
c001ccdb:	fc                   	cld    
c001ccdc:	31 c0                	xor    eax,eax
c001ccde:	86 fb                	xchg   bl,bh
c001cce0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001cce2:	c1 c3 10             	rol    ebx,0x10
c001cce5:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001ccea:	89 e8                	mov    eax,ebp
c001ccec:	86 fb                	xchg   bl,bh
c001ccee:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001ccf2:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c001ccf6:	50                   	push   eax
c001ccf7:	50                   	push   eax
c001ccf8:	55                   	push   ebp
c001ccf9:	c1 e5 0b             	shl    ebp,0xb
c001ccfc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cd00:	6a 00                	push   0x0
c001cd02:	55                   	push   ebp
c001cd03:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001cd07:	50                   	push   eax
c001cd08:	56                   	push   esi
c001cd09:	e8 1c fb ff ff       	call   c001c82a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001cd0e:	83 c4 20             	add    esp,0x20
c001cd11:	eb 1a                	jmp    c001cd2d <ATAPI::read(unsigned long long, int, void*)+0x77>
c001cd13:	83 ec 0c             	sub    esp,0xc
c001cd16:	56                   	push   esi
c001cd17:	e8 5e fe ff ff       	call   c001cb7a <ATAPI::detectMedia()>
c001cd1c:	83 c4 10             	add    esp,0x10
c001cd1f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c001cd26:	75 aa                	jne    c001ccd2 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001cd28:	b8 02 00 00 00       	mov    eax,0x2
c001cd2d:	83 c4 1c             	add    esp,0x1c
c001cd30:	5b                   	pop    ebx
c001cd31:	5e                   	pop    esi
c001cd32:	5f                   	pop    edi
c001cd33:	5d                   	pop    ebp
c001cd34:	c3                   	ret    
c001cd35:	90                   	nop

c001cd36 <AVX::open(int, int, void*)>:
c001cd36:	83 ec 0c             	sub    esp,0xc
c001cd39:	e8 0a 10 00 00       	call   c001dd48 <avxInit>
c001cd3e:	b8 00 00 00 00       	mov    eax,0x0
c001cd43:	83 c4 0c             	add    esp,0xc
c001cd46:	c3                   	ret    
c001cd47:	90                   	nop

c001cd48 <AVX::close(int, int, void*)>:
c001cd48:	83 ec 0c             	sub    esp,0xc
c001cd4b:	e8 f9 0f 00 00       	call   c001dd49 <avxClose>
c001cd50:	b8 00 00 00 00       	mov    eax,0x0
c001cd55:	83 c4 0c             	add    esp,0xc
c001cd58:	c3                   	ret    
c001cd59:	90                   	nop

c001cd5a <AVX::available()>:
c001cd5a:	83 ec 0c             	sub    esp,0xc
c001cd5d:	e8 de 0f 00 00       	call   c001dd40 <avxDetect>
c001cd62:	85 c0                	test   eax,eax
c001cd64:	0f 95 c0             	setne  al
c001cd67:	83 c4 0c             	add    esp,0xc
c001cd6a:	c3                   	ret    
c001cd6b:	90                   	nop

c001cd6c <AVX::save(void*)>:
c001cd6c:	83 ec 0c             	sub    esp,0xc
c001cd6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cd73:	83 ec 0c             	sub    esp,0xc
c001cd76:	50                   	push   eax
c001cd77:	e8 ca 0f 00 00       	call   c001dd46 <avxSave>
c001cd7c:	83 c4 10             	add    esp,0x10
c001cd7f:	90                   	nop
c001cd80:	83 c4 0c             	add    esp,0xc
c001cd83:	c3                   	ret    

c001cd84 <AVX::load(void*)>:
c001cd84:	83 ec 0c             	sub    esp,0xc
c001cd87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cd8b:	83 ec 0c             	sub    esp,0xc
c001cd8e:	50                   	push   eax
c001cd8f:	e8 b3 0f 00 00       	call   c001dd47 <avxLoad>
c001cd94:	83 c4 10             	add    esp,0x10
c001cd97:	90                   	nop
c001cd98:	83 c4 0c             	add    esp,0xc
c001cd9b:	c3                   	ret    

c001cd9c <AVX::AVX()>:
c001cd9c:	83 ec 0c             	sub    esp,0xc
c001cd9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cda3:	83 ec 08             	sub    esp,0x8
c001cda6:	68 ac 1f 02 c0       	push   0xc0021fac
c001cdab:	50                   	push   eax
c001cdac:	e8 45 3c ff ff       	call   c00109f6 <FPU::FPU(char const*)>
c001cdb1:	83 c4 10             	add    esp,0x10
c001cdb4:	ba bc 1f 02 c0       	mov    edx,0xc0021fbc
c001cdb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdbd:	89 10                	mov    DWORD PTR [eax],edx
c001cdbf:	90                   	nop
c001cdc0:	83 c4 0c             	add    esp,0xc
c001cdc3:	c3                   	ret    

c001cdc4 <MMX::available()>:
c001cdc4:	a1 c8 2e 02 c0       	mov    eax,ds:0xc0022ec8
c001cdc9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001cdcf:	83 e0 20             	and    eax,0x20
c001cdd2:	84 c0                	test   al,al
c001cdd4:	0f 95 c0             	setne  al
c001cdd7:	c3                   	ret    

c001cdd8 <MMX::open(int, int, void*)>:
c001cdd8:	83 ec 0c             	sub    esp,0xc
c001cddb:	e8 dc 0f 00 00       	call   c001ddbc <x87Init>
c001cde0:	b8 00 00 00 00       	mov    eax,0x0
c001cde5:	83 c4 0c             	add    esp,0xc
c001cde8:	c3                   	ret    
c001cde9:	90                   	nop

c001cdea <MMX::close(int, int, void*)>:
c001cdea:	83 ec 0c             	sub    esp,0xc
c001cded:	e8 e4 0f 00 00       	call   c001ddd6 <x87Close>
c001cdf2:	b8 00 00 00 00       	mov    eax,0x0
c001cdf7:	83 c4 0c             	add    esp,0xc
c001cdfa:	c3                   	ret    
c001cdfb:	90                   	nop

c001cdfc <MMX::save(void*)>:
c001cdfc:	83 ec 0c             	sub    esp,0xc
c001cdff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ce03:	83 ec 0c             	sub    esp,0xc
c001ce06:	50                   	push   eax
c001ce07:	e8 a5 0f 00 00       	call   c001ddb1 <x87Save>
c001ce0c:	83 c4 10             	add    esp,0x10
c001ce0f:	90                   	nop
c001ce10:	83 c4 0c             	add    esp,0xc
c001ce13:	c3                   	ret    

c001ce14 <MMX::load(void*)>:
c001ce14:	83 ec 0c             	sub    esp,0xc
c001ce17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ce1b:	83 ec 0c             	sub    esp,0xc
c001ce1e:	50                   	push   eax
c001ce1f:	e8 93 0f 00 00       	call   c001ddb7 <x87Load>
c001ce24:	83 c4 10             	add    esp,0x10
c001ce27:	90                   	nop
c001ce28:	83 c4 0c             	add    esp,0xc
c001ce2b:	c3                   	ret    

c001ce2c <MMX::MMX()>:
c001ce2c:	83 ec 0c             	sub    esp,0xc
c001ce2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce33:	83 ec 08             	sub    esp,0x8
c001ce36:	68 ec 1f 02 c0       	push   0xc0021fec
c001ce3b:	50                   	push   eax
c001ce3c:	e8 b5 3b ff ff       	call   c00109f6 <FPU::FPU(char const*)>
c001ce41:	83 c4 10             	add    esp,0x10
c001ce44:	ba fc 1f 02 c0       	mov    edx,0xc0021ffc
c001ce49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce4d:	89 10                	mov    DWORD PTR [eax],edx
c001ce4f:	90                   	nop
c001ce50:	83 c4 0c             	add    esp,0xc
c001ce53:	c3                   	ret    

c001ce54 <SSE::open(int, int, void*)>:
c001ce54:	83 ec 0c             	sub    esp,0xc
c001ce57:	e8 1b 0f 00 00       	call   c001dd77 <sseInit>
c001ce5c:	b8 00 00 00 00       	mov    eax,0x0
c001ce61:	83 c4 0c             	add    esp,0xc
c001ce64:	c3                   	ret    
c001ce65:	90                   	nop

c001ce66 <SSE::close(int, int, void*)>:
c001ce66:	83 ec 0c             	sub    esp,0xc
c001ce69:	e8 19 0f 00 00       	call   c001dd87 <sseClose>
c001ce6e:	b8 00 00 00 00       	mov    eax,0x0
c001ce73:	83 c4 0c             	add    esp,0xc
c001ce76:	c3                   	ret    
c001ce77:	90                   	nop

c001ce78 <SSE::available()>:
c001ce78:	83 ec 1c             	sub    esp,0x1c
c001ce7b:	e8 d0 0e 00 00       	call   c001dd50 <sseDetect>
c001ce80:	85 c0                	test   eax,eax
c001ce82:	0f 95 c0             	setne  al
c001ce85:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ce89:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ce8d:	83 c4 1c             	add    esp,0x1c
c001ce90:	c3                   	ret    
c001ce91:	90                   	nop

c001ce92 <SSE::save(void*)>:
c001ce92:	83 ec 0c             	sub    esp,0xc
c001ce95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ce99:	83 ec 0c             	sub    esp,0xc
c001ce9c:	50                   	push   eax
c001ce9d:	e8 c9 0e 00 00       	call   c001dd6b <sseSave>
c001cea2:	83 c4 10             	add    esp,0x10
c001cea5:	90                   	nop
c001cea6:	83 c4 0c             	add    esp,0xc
c001cea9:	c3                   	ret    

c001ceaa <SSE::load(void*)>:
c001ceaa:	83 ec 0c             	sub    esp,0xc
c001cead:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ceb1:	83 ec 0c             	sub    esp,0xc
c001ceb4:	50                   	push   eax
c001ceb5:	e8 b7 0e 00 00       	call   c001dd71 <sseLoad>
c001ceba:	83 c4 10             	add    esp,0x10
c001cebd:	90                   	nop
c001cebe:	83 c4 0c             	add    esp,0xc
c001cec1:	c3                   	ret    

c001cec2 <SSE::SSE()>:
c001cec2:	83 ec 0c             	sub    esp,0xc
c001cec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cec9:	83 ec 08             	sub    esp,0x8
c001cecc:	68 2c 20 02 c0       	push   0xc002202c
c001ced1:	50                   	push   eax
c001ced2:	e8 1f 3b ff ff       	call   c00109f6 <FPU::FPU(char const*)>
c001ced7:	83 c4 10             	add    esp,0x10
c001ceda:	ba 3c 20 02 c0       	mov    edx,0xc002203c
c001cedf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cee3:	89 10                	mov    DWORD PTR [eax],edx
c001cee5:	90                   	nop
c001cee6:	83 c4 0c             	add    esp,0xc
c001cee9:	c3                   	ret    

c001ceea <x87::open(int, int, void*)>:
c001ceea:	83 ec 0c             	sub    esp,0xc
c001ceed:	e8 ca 0e 00 00       	call   c001ddbc <x87Init>
c001cef2:	b8 00 00 00 00       	mov    eax,0x0
c001cef7:	83 c4 0c             	add    esp,0xc
c001cefa:	c3                   	ret    
c001cefb:	90                   	nop

c001cefc <x87::close(int, int, void*)>:
c001cefc:	83 ec 0c             	sub    esp,0xc
c001ceff:	e8 d2 0e 00 00       	call   c001ddd6 <x87Close>
c001cf04:	b8 00 00 00 00       	mov    eax,0x0
c001cf09:	83 c4 0c             	add    esp,0xc
c001cf0c:	c3                   	ret    
c001cf0d:	90                   	nop

c001cf0e <x87::available()>:
c001cf0e:	83 ec 0c             	sub    esp,0xc
c001cf11:	e8 80 0e 00 00       	call   c001dd96 <x87Detect>
c001cf16:	85 c0                	test   eax,eax
c001cf18:	0f 95 c0             	setne  al
c001cf1b:	83 c4 0c             	add    esp,0xc
c001cf1e:	c3                   	ret    
c001cf1f:	90                   	nop

c001cf20 <x87::save(void*)>:
c001cf20:	83 ec 0c             	sub    esp,0xc
c001cf23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf27:	83 ec 0c             	sub    esp,0xc
c001cf2a:	50                   	push   eax
c001cf2b:	e8 81 0e 00 00       	call   c001ddb1 <x87Save>
c001cf30:	83 c4 10             	add    esp,0x10
c001cf33:	90                   	nop
c001cf34:	83 c4 0c             	add    esp,0xc
c001cf37:	c3                   	ret    

c001cf38 <x87::load(void*)>:
c001cf38:	83 ec 0c             	sub    esp,0xc
c001cf3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cf3f:	83 ec 0c             	sub    esp,0xc
c001cf42:	50                   	push   eax
c001cf43:	e8 6f 0e 00 00       	call   c001ddb7 <x87Load>
c001cf48:	83 c4 10             	add    esp,0x10
c001cf4b:	90                   	nop
c001cf4c:	83 c4 0c             	add    esp,0xc
c001cf4f:	c3                   	ret    

c001cf50 <x87::x87()>:
c001cf50:	83 ec 0c             	sub    esp,0xc
c001cf53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf57:	83 ec 08             	sub    esp,0x8
c001cf5a:	68 6c 20 02 c0       	push   0xc002206c
c001cf5f:	50                   	push   eax
c001cf60:	e8 91 3a ff ff       	call   c00109f6 <FPU::FPU(char const*)>
c001cf65:	83 c4 10             	add    esp,0x10
c001cf68:	ba 7c 20 02 c0       	mov    edx,0xc002207c
c001cf6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf71:	89 10                	mov    DWORD PTR [eax],edx
c001cf73:	90                   	nop
c001cf74:	83 c4 0c             	add    esp,0xc
c001cf77:	c3                   	ret    

c001cf78 <APIC::disable()>:
c001cf78:	90                   	nop
c001cf79:	c3                   	ret    

c001cf7a <APIC::close(int, int, void*)>:
c001cf7a:	55                   	push   ebp
c001cf7b:	89 e5                	mov    ebp,esp
c001cf7d:	83 ec 08             	sub    esp,0x8
c001cf80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001cf83:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf85:	83 c0 3c             	add    eax,0x3c
c001cf88:	8b 00                	mov    eax,DWORD PTR [eax]
c001cf8a:	83 ec 0c             	sub    esp,0xc
c001cf8d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001cf90:	ff d0                	call   eax
c001cf92:	83 c4 10             	add    esp,0x10
c001cf95:	b8 00 00 00 00       	mov    eax,0x0
c001cf9a:	c9                   	leave  
c001cf9b:	c3                   	ret    

c001cf9c <IOAPIC::close(int, int, void*)>:
c001cf9c:	b8 00 00 00 00       	mov    eax,0x0
c001cfa1:	c3                   	ret    

c001cfa2 <APIC::io_wait()>:
c001cfa2:	eb 00                	jmp    c001cfa4 <APIC::io_wait()+0x2>
c001cfa4:	eb 00                	jmp    c001cfa6 <APIC::io_wait()+0x4>
c001cfa6:	90                   	nop
c001cfa7:	c3                   	ret    

c001cfa8 <APIC::getBase()>:
c001cfa8:	55                   	push   ebp
c001cfa9:	89 e5                	mov    ebp,esp
c001cfab:	83 ec 18             	sub    esp,0x18
c001cfae:	a1 c8 2e 02 c0       	mov    eax,ds:0xc0022ec8
c001cfb3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001cfb9:	83 e0 08             	and    eax,0x8
c001cfbc:	84 c0                	test   al,al
c001cfbe:	75 07                	jne    c001cfc7 <APIC::getBase()+0x1f>
c001cfc0:	b8 00 00 00 00       	mov    eax,0x0
c001cfc5:	eb 21                	jmp    c001cfe8 <APIC::getBase()+0x40>
c001cfc7:	a1 c8 2e 02 c0       	mov    eax,ds:0xc0022ec8
c001cfcc:	83 ec 08             	sub    esp,0x8
c001cfcf:	6a 1b                	push   0x1b
c001cfd1:	50                   	push   eax
c001cfd2:	e8 ef e1 fe ff       	call   c000b1c6 <Computer::rdmsr(unsigned int)>
c001cfd7:	83 c4 10             	add    esp,0x10
c001cfda:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001cfdd:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001cfe0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001cfe3:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cfe8:	c9                   	leave  
c001cfe9:	c3                   	ret    

c001cfea <APIC::eoi(unsigned char)>:
c001cfea:	55                   	push   ebp
c001cfeb:	89 e5                	mov    ebp,esp
c001cfed:	83 ec 28             	sub    esp,0x28
c001cff0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001cff3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001cff6:	83 ec 0c             	sub    esp,0xc
c001cff9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001cffc:	e8 a7 ff ff ff       	call   c001cfa8 <APIC::getBase()>
c001d001:	83 c4 10             	add    esp,0x10
c001d004:	05 b0 00 00 00       	add    eax,0xb0
c001d009:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d00c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001d00f:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001d015:	90                   	nop
c001d016:	c9                   	leave  
c001d017:	c3                   	ret    

c001d018 <APIC::open(int, int, void*)>:
c001d018:	55                   	push   ebp
c001d019:	89 e5                	mov    ebp,esp
c001d01b:	57                   	push   edi
c001d01c:	56                   	push   esi
c001d01d:	53                   	push   ebx
c001d01e:	83 ec 1c             	sub    esp,0x1c
c001d021:	83 ec 0c             	sub    esp,0xc
c001d024:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d027:	e8 7c ff ff ff       	call   c001cfa8 <APIC::getBase()>
c001d02c:	83 c4 10             	add    esp,0x10
c001d02f:	05 f0 00 00 00       	add    eax,0xf0
c001d034:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d037:	83 ec 0c             	sub    esp,0xc
c001d03a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d03d:	e8 66 ff ff ff       	call   c001cfa8 <APIC::getBase()>
c001d042:	83 c4 10             	add    esp,0x10
c001d045:	89 c2                	mov    edx,eax
c001d047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d04a:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d050:	0f b6 f8             	movzx  edi,al
c001d053:	89 d0                	mov    eax,edx
c001d055:	ba 00 00 00 00       	mov    edx,0x0
c001d05a:	89 c1                	mov    ecx,eax
c001d05c:	80 e5 ff             	and    ch,0xff
c001d05f:	89 cb                	mov    ebx,ecx
c001d061:	0f b6 f2             	movzx  esi,dl
c001d064:	89 d8                	mov    eax,ebx
c001d066:	89 f2                	mov    edx,esi
c001d068:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d06b:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d06e:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d072:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d076:	83 e0 00             	and    eax,0x0
c001d079:	09 d0                	or     eax,edx
c001d07b:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d07f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d082:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d088:	8d 50 01             	lea    edx,[eax+0x1]
c001d08b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d08e:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d094:	0f b6 d0             	movzx  edx,al
c001d097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d09a:	83 c2 08             	add    edx,0x8
c001d09d:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d0a1:	0f b6 c9             	movzx  ecx,cl
c001d0a4:	81 c9 00 00 01 00    	or     ecx,0x10000
c001d0aa:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d0ae:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d0b1:	8b 00                	mov    eax,DWORD PTR [eax]
c001d0b3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d0b6:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001d0bd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001d0c0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001d0c3:	89 10                	mov    DWORD PTR [eax],edx
c001d0c5:	b8 00 00 00 00       	mov    eax,0x0
c001d0ca:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d0cd:	5b                   	pop    ebx
c001d0ce:	5e                   	pop    esi
c001d0cf:	5f                   	pop    edi
c001d0d0:	5d                   	pop    ebp
c001d0d1:	c3                   	ret    

c001d0d2 <IOAPIC::IOAPIC()>:
c001d0d2:	83 ec 0c             	sub    esp,0xc
c001d0d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0d9:	83 ec 08             	sub    esp,0x8
c001d0dc:	68 ac 20 02 c0       	push   0xc00220ac
c001d0e1:	50                   	push   eax
c001d0e2:	e8 1b 36 ff ff       	call   c0010702 <Device::Device(char const*)>
c001d0e7:	83 c4 10             	add    esp,0x10
c001d0ea:	ba d4 21 02 c0       	mov    edx,0xc00221d4
c001d0ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d0f3:	89 10                	mov    DWORD PTR [eax],edx
c001d0f5:	90                   	nop
c001d0f6:	83 c4 0c             	add    esp,0xc
c001d0f9:	c3                   	ret    

c001d0fa <APIC::APIC()>:
c001d0fa:	53                   	push   ebx
c001d0fb:	83 ec 18             	sub    esp,0x18
c001d0fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d102:	83 ec 08             	sub    esp,0x8
c001d105:	68 b4 20 02 c0       	push   0xc00220b4
c001d10a:	50                   	push   eax
c001d10b:	e8 1a 3d ff ff       	call   c0010e2a <InterruptController::InterruptController(char const*)>
c001d110:	83 c4 10             	add    esp,0x10
c001d113:	ba 8c 21 02 c0       	mov    edx,0xc002218c
c001d118:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d11c:	89 10                	mov    DWORD PTR [eax],edx
c001d11e:	a0 40 4c 02 c0       	mov    al,ds:0xc0024c40
c001d123:	83 f0 01             	xor    eax,0x1
c001d126:	84 c0                	test   al,al
c001d128:	0f 84 96 00 00 00    	je     c001d1c4 <APIC::APIC()+0xca>
c001d12e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001d133:	a0 f0 36 02 c0       	mov    al,ds:0xc00236f0
c001d138:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001d13c:	73 7f                	jae    c001d1bd <APIC::APIC()+0xc3>
c001d13e:	83 ec 0c             	sub    esp,0xc
c001d141:	68 68 01 00 00       	push   0x168
c001d146:	e8 bd 20 ff ff       	call   c000f208 <operator new(unsigned long)>
c001d14b:	83 c4 10             	add    esp,0x10
c001d14e:	89 c3                	mov    ebx,eax
c001d150:	83 ec 0c             	sub    esp,0xc
c001d153:	53                   	push   ebx
c001d154:	e8 79 ff ff ff       	call   c001d0d2 <IOAPIC::IOAPIC()>
c001d159:	83 c4 10             	add    esp,0x10
c001d15c:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001d160:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d165:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d169:	89 14 85 20 4c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb3e0],edx
c001d170:	a1 00 4c 02 c0       	mov    eax,ds:0xc0024c00
c001d175:	40                   	inc    eax
c001d176:	a3 00 4c 02 c0       	mov    ds:0xc0024c00,eax
c001d17b:	a1 c8 2e 02 c0       	mov    eax,ds:0xc0022ec8
c001d180:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001d186:	83 ec 08             	sub    esp,0x8
c001d189:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d18d:	50                   	push   eax
c001d18e:	e8 7f 33 ff ff       	call   c0010512 <Device::addChild(Device*)>
c001d193:	83 c4 10             	add    esp,0x10
c001d196:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d19a:	8b 00                	mov    eax,DWORD PTR [eax]
c001d19c:	83 c0 08             	add    eax,0x8
c001d19f:	8b 00                	mov    eax,DWORD PTR [eax]
c001d1a1:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001d1a6:	6a 00                	push   0x0
c001d1a8:	6a 00                	push   0x0
c001d1aa:	52                   	push   edx
c001d1ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d1af:	ff d0                	call   eax
c001d1b1:	83 c4 10             	add    esp,0x10
c001d1b4:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001d1b8:	e9 76 ff ff ff       	jmp    c001d133 <APIC::APIC()+0x39>
c001d1bd:	c6 05 40 4c 02 c0 01 	mov    BYTE PTR ds:0xc0024c40,0x1
c001d1c4:	90                   	nop
c001d1c5:	83 c4 18             	add    esp,0x18
c001d1c8:	5b                   	pop    ebx
c001d1c9:	c3                   	ret    

c001d1ca <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001d1ca:	55                   	push   ebp
c001d1cb:	89 e5                	mov    ebp,esp
c001d1cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d1d0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d1d6:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d1d9:	72 1d                	jb     c001d1f8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d1db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d1de:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001d1e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d1e7:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001d1ed:	01 d0                	add    eax,edx
c001d1ef:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001d1f2:	73 04                	jae    c001d1f8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001d1f4:	b0 01                	mov    al,0x1
c001d1f6:	eb 02                	jmp    c001d1fa <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001d1f8:	b0 00                	mov    al,0x0
c001d1fa:	5d                   	pop    ebp
c001d1fb:	c3                   	ret    

c001d1fc <IOAPIC::read(int)>:
c001d1fc:	55                   	push   ebp
c001d1fd:	89 e5                	mov    ebp,esp
c001d1ff:	83 ec 10             	sub    esp,0x10
c001d202:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d205:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d20b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d20e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d211:	0f b6 d0             	movzx  edx,al
c001d214:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d217:	89 10                	mov    DWORD PTR [eax],edx
c001d219:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d21c:	83 c0 10             	add    eax,0x10
c001d21f:	8b 00                	mov    eax,DWORD PTR [eax]
c001d221:	c9                   	leave  
c001d222:	c3                   	ret    
c001d223:	90                   	nop

c001d224 <IOAPIC::open(int, int, void*)>:
c001d224:	55                   	push   ebp
c001d225:	89 e5                	mov    ebp,esp
c001d227:	57                   	push   edi
c001d228:	56                   	push   esi
c001d229:	53                   	push   ebx
c001d22a:	83 ec 0c             	sub    esp,0xc
c001d22d:	83 ec 0c             	sub    esp,0xc
c001d230:	68 df 20 02 c0       	push   0xc00220df
c001d235:	e8 fc e8 fe ff       	call   c000bb36 <kprintf(char const*, ...)>
c001d23a:	83 c4 10             	add    esp,0x10
c001d23d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d240:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d243:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d249:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d24c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d252:	8b 14 85 20 37 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc8e0]
c001d259:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d25c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d262:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d265:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d26b:	8b 14 85 a0 37 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdc860]
c001d272:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d275:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001d27b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d27e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001d284:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d287:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d28d:	0f b6 f8             	movzx  edi,al
c001d290:	89 d0                	mov    eax,edx
c001d292:	ba 00 00 00 00       	mov    edx,0x0
c001d297:	89 c1                	mov    ecx,eax
c001d299:	80 e5 ff             	and    ch,0xff
c001d29c:	89 cb                	mov    ebx,ecx
c001d29e:	0f b6 f2             	movzx  esi,dl
c001d2a1:	89 d8                	mov    eax,ebx
c001d2a3:	89 f2                	mov    edx,esi
c001d2a5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d2a8:	8d 5f 08             	lea    ebx,[edi+0x8]
c001d2ab:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001d2af:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001d2b3:	83 e0 00             	and    eax,0x0
c001d2b6:	09 d0                	or     eax,edx
c001d2b8:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001d2bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d2bf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001d2c5:	8d 50 01             	lea    edx,[eax+0x1]
c001d2c8:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001d2cb:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001d2d1:	0f b6 d0             	movzx  edx,al
c001d2d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d2d7:	83 c2 08             	add    edx,0x8
c001d2da:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001d2de:	0f b6 c9             	movzx  ecx,cl
c001d2e1:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001d2e7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001d2eb:	83 ec 08             	sub    esp,0x8
c001d2ee:	6a 01                	push   0x1
c001d2f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d2f3:	e8 04 ff ff ff       	call   c001d1fc <IOAPIC::read(int)>
c001d2f8:	83 c4 10             	add    esp,0x10
c001d2fb:	c1 f8 10             	sar    eax,0x10
c001d2fe:	0f b6 c0             	movzx  eax,al
c001d301:	8d 50 01             	lea    edx,[eax+0x1]
c001d304:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d307:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001d30d:	b8 00 00 00 00       	mov    eax,0x0
c001d312:	8d 65 f4             	lea    esp,[ebp-0xc]
c001d315:	5b                   	pop    ebx
c001d316:	5e                   	pop    esi
c001d317:	5f                   	pop    edi
c001d318:	5d                   	pop    ebp
c001d319:	c3                   	ret    

c001d31a <IOAPIC::write(int, int)>:
c001d31a:	55                   	push   ebp
c001d31b:	89 e5                	mov    ebp,esp
c001d31d:	83 ec 10             	sub    esp,0x10
c001d320:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d323:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001d329:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d32c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d32f:	0f b6 d0             	movzx  edx,al
c001d332:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d335:	89 10                	mov    DWORD PTR [eax],edx
c001d337:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d33a:	8d 50 10             	lea    edx,[eax+0x10]
c001d33d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d340:	89 02                	mov    DWORD PTR [edx],eax
c001d342:	90                   	nop
c001d343:	c9                   	leave  
c001d344:	c3                   	ret    
c001d345:	90                   	nop

c001d346 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001d346:	55                   	push   ebp
c001d347:	89 e5                	mov    ebp,esp
c001d349:	83 ec 20             	sub    esp,0x20
c001d34c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d34f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d352:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d355:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001d358:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001d35b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d35e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001d361:	88 d0                	mov    al,dl
c001d363:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001d366:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d36a:	83 c0 08             	add    eax,0x8
c001d36d:	01 c0                	add    eax,eax
c001d36f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001d372:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
c001d376:	83 c0 08             	add    eax,0x8
c001d379:	01 c0                	add    eax,eax
c001d37b:	40                   	inc    eax
c001d37c:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001d37f:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d382:	50                   	push   eax
c001d383:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d386:	e8 71 fe ff ff       	call   c001d1fc <IOAPIC::read(int)>
c001d38b:	83 c4 08             	add    esp,0x8
c001d38e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001d391:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001d398:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001d39b:	c1 e0 18             	shl    eax,0x18
c001d39e:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001d3a1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001d3a4:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001d3a7:	52                   	push   edx
c001d3a8:	50                   	push   eax
c001d3a9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d3ac:	e8 69 ff ff ff       	call   c001d31a <IOAPIC::write(int, int)>
c001d3b1:	83 c4 0c             	add    esp,0xc
c001d3b4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d3b7:	50                   	push   eax
c001d3b8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d3bb:	e8 3c fe ff ff       	call   c001d1fc <IOAPIC::read(int)>
c001d3c0:	83 c4 08             	add    esp,0x8
c001d3c3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001d3c6:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001d3cd:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001d3d4:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001d3db:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001d3e2:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
c001d3e6:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001d3e9:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001d3ec:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d3ef:	52                   	push   edx
c001d3f0:	50                   	push   eax
c001d3f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d3f4:	e8 21 ff ff ff       	call   c001d31a <IOAPIC::write(int, int)>
c001d3f9:	83 c4 0c             	add    esp,0xc
c001d3fc:	90                   	nop
c001d3fd:	c9                   	leave  
c001d3fe:	c3                   	ret    
c001d3ff:	90                   	nop

c001d400 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001d400:	55                   	push   ebp
c001d401:	89 e5                	mov    ebp,esp
c001d403:	56                   	push   esi
c001d404:	53                   	push   ebx
c001d405:	83 ec 20             	sub    esp,0x20
c001d408:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001d40b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001d40e:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001d412:	74 28                	je     c001d43c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001d414:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001d418:	7f 12                	jg     c001d42c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2c>
c001d41a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d41d:	05 20 26 02 c0       	add    eax,0xc0022620
c001d422:	8a 00                	mov    al,BYTE PTR [eax]
c001d424:	0f b6 c0             	movzx  eax,al
c001d427:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001d42a:	eb 10                	jmp    c001d43c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3c>
c001d42c:	83 ec 0c             	sub    esp,0xc
c001d42f:	68 f0 20 02 c0       	push   0xc00220f0
c001d434:	e8 1b e8 fe ff       	call   c000bc54 <panic(char const*)>
c001d439:	83 c4 10             	add    esp,0x10
c001d43c:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001d440:	a1 00 4c 02 c0       	mov    eax,ds:0xc0024c00
c001d445:	83 ec 08             	sub    esp,0x8
c001d448:	50                   	push   eax
c001d449:	68 28 21 02 c0       	push   0xc0022128
c001d44e:	e8 e3 e6 fe ff       	call   c000bb36 <kprintf(char const*, ...)>
c001d453:	83 c4 10             	add    esp,0x10
c001d456:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001d45d:	a1 00 4c 02 c0       	mov    eax,ds:0xc0024c00
c001d462:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001d465:	7d 58                	jge    c001d4bf <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001d467:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d46a:	8b 04 85 20 4c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb3e0]
c001d471:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d474:	83 ec 08             	sub    esp,0x8
c001d477:	52                   	push   edx
c001d478:	50                   	push   eax
c001d479:	e8 4c fd ff ff       	call   c001d1ca <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001d47e:	83 c4 10             	add    esp,0x10
c001d481:	84 c0                	test   al,al
c001d483:	74 35                	je     c001d4ba <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xba>
c001d485:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d488:	8b 1c 85 20 4c 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdb3e0]
c001d48f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d492:	83 c0 20             	add    eax,0x20
c001d495:	0f b6 f0             	movzx  esi,al
c001d498:	e8 ca 6a ff ff       	call   c0013f67 <getCPUNumber()>
c001d49d:	99                   	cdq    
c001d49e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001d4a1:	0f b6 c9             	movzx  ecx,cl
c001d4a4:	83 ec 0c             	sub    esp,0xc
c001d4a7:	56                   	push   esi
c001d4a8:	52                   	push   edx
c001d4a9:	50                   	push   eax
c001d4aa:	51                   	push   ecx
c001d4ab:	53                   	push   ebx
c001d4ac:	e8 95 fe ff ff       	call   c001d346 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001d4b1:	83 c4 20             	add    esp,0x20
c001d4b4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001d4b8:	eb 05                	jmp    c001d4bf <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xbf>
c001d4ba:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001d4bd:	eb 9e                	jmp    c001d45d <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5d>
c001d4bf:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001d4c2:	83 f0 01             	xor    eax,0x1
c001d4c5:	84 c0                	test   al,al
c001d4c7:	74 10                	je     c001d4d9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xd9>
c001d4c9:	83 ec 0c             	sub    esp,0xc
c001d4cc:	68 3f 21 02 c0       	push   0xc002213f
c001d4d1:	e8 7e e7 fe ff       	call   c000bc54 <panic(char const*)>
c001d4d6:	83 c4 10             	add    esp,0x10
c001d4d9:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001d4dd:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001d4e4:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001d4e8:	7f 65                	jg     c001d54f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14f>
c001d4ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d4ed:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d4f0:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d4f7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d4fa:	01 ca                	add    edx,ecx
c001d4fc:	83 c2 54             	add    edx,0x54
c001d4ff:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001d503:	85 c0                	test   eax,eax
c001d505:	75 43                	jne    c001d54a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x14a>
c001d507:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d50a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d50d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d514:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d517:	01 ca                	add    edx,ecx
c001d519:	8d 4a 54             	lea    ecx,[edx+0x54]
c001d51c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001d51f:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001d523:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d526:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001d529:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001d530:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d533:	01 ca                	add    edx,ecx
c001d535:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001d53b:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001d53e:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001d542:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d545:	83 e8 20             	sub    eax,0x20
c001d548:	eb 1a                	jmp    c001d564 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x164>
c001d54a:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001d54d:	eb 95                	jmp    c001d4e4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe4>
c001d54f:	83 ec 0c             	sub    esp,0xc
c001d552:	68 4c 21 02 c0       	push   0xc002214c
c001d557:	e8 f8 e6 fe ff       	call   c000bc54 <panic(char const*)>
c001d55c:	83 c4 10             	add    esp,0x10
c001d55f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001d564:	8d 65 f8             	lea    esp,[ebp-0x8]
c001d567:	5b                   	pop    ebx
c001d568:	5e                   	pop    esi
c001d569:	5d                   	pop    ebp
c001d56a:	c3                   	ret    
c001d56b:	90                   	nop

c001d56c <PIC::disable()>:
c001d56c:	55                   	push   ebp
c001d56d:	89 e5                	mov    ebp,esp
c001d56f:	83 ec 10             	sub    esp,0x10
c001d572:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001d578:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001d57c:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001d57f:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001d583:	ee                   	out    dx,al
c001d584:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001d58a:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001d58e:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001d591:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001d595:	ee                   	out    dx,al
c001d596:	90                   	nop
c001d597:	c9                   	leave  
c001d598:	c3                   	ret    
c001d599:	90                   	nop

c001d59a <PIC::close(int, int, void*)>:
c001d59a:	55                   	push   ebp
c001d59b:	89 e5                	mov    ebp,esp
c001d59d:	83 ec 08             	sub    esp,0x8
c001d5a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001d5a3:	8b 00                	mov    eax,DWORD PTR [eax]
c001d5a5:	83 c0 3c             	add    eax,0x3c
c001d5a8:	8b 00                	mov    eax,DWORD PTR [eax]
c001d5aa:	83 ec 0c             	sub    esp,0xc
c001d5ad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d5b0:	ff d0                	call   eax
c001d5b2:	83 c4 10             	add    esp,0x10
c001d5b5:	b8 00 00 00 00       	mov    eax,0x0
c001d5ba:	c9                   	leave  
c001d5bb:	c3                   	ret    

c001d5bc <PIC::PIC()>:
c001d5bc:	83 ec 0c             	sub    esp,0xc
c001d5bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5c3:	83 ec 08             	sub    esp,0x8
c001d5c6:	68 f8 21 02 c0       	push   0xc00221f8
c001d5cb:	50                   	push   eax
c001d5cc:	e8 59 38 ff ff       	call   c0010e2a <InterruptController::InterruptController(char const*)>
c001d5d1:	83 c4 10             	add    esp,0x10
c001d5d4:	ba 24 22 02 c0       	mov    edx,0xc0022224
c001d5d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5dd:	89 10                	mov    DWORD PTR [eax],edx
c001d5df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5e3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d5e9:	0f b6 d0             	movzx  edx,al
c001d5ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5f0:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001d5f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5fb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d601:	0f b6 d0             	movzx  edx,al
c001d604:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d608:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001d60d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d611:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d617:	8d 50 01             	lea    edx,[eax+0x1]
c001d61a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d61e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d624:	0f b6 d0             	movzx  edx,al
c001d627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d62b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d62f:	83 e1 3f             	and    ecx,0x3f
c001d632:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d63a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d640:	0f b6 d0             	movzx  edx,al
c001d643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d647:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001d64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d652:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d658:	0f b6 d0             	movzx  edx,al
c001d65b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d65f:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001d664:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d668:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d66e:	8d 50 01             	lea    edx,[eax+0x1]
c001d671:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d675:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001d67b:	0f b6 d0             	movzx  edx,al
c001d67e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d682:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d686:	83 e1 3f             	and    ecx,0x3f
c001d689:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d68d:	90                   	nop
c001d68e:	83 c4 0c             	add    esp,0xc
c001d691:	c3                   	ret    

c001d692 <PIC::ioWait()>:
c001d692:	eb 00                	jmp    c001d694 <PIC::ioWait()+0x2>
c001d694:	eb 00                	jmp    c001d696 <PIC::ioWait()+0x4>
c001d696:	90                   	nop
c001d697:	c3                   	ret    

c001d698 <PIC::getIRQReg(int)>:
c001d698:	55                   	push   ebp
c001d699:	89 e5                	mov    ebp,esp
c001d69b:	83 ec 10             	sub    esp,0x10
c001d69e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d6a1:	0f b6 c0             	movzx  eax,al
c001d6a4:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001d6aa:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001d6ad:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001d6b0:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001d6b4:	ee                   	out    dx,al
c001d6b5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d6b8:	0f b6 c0             	movzx  eax,al
c001d6bb:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001d6c1:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001d6c4:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001d6c7:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001d6cb:	ee                   	out    dx,al
c001d6cc:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001d6d2:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001d6d6:	89 c2                	mov    edx,eax
c001d6d8:	ec                   	in     al,dx
c001d6d9:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001d6dc:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001d6df:	0f b6 c0             	movzx  eax,al
c001d6e2:	c1 e0 08             	shl    eax,0x8
c001d6e5:	89 c1                	mov    ecx,eax
c001d6e7:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001d6ed:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001d6f1:	89 c2                	mov    edx,eax
c001d6f3:	ec                   	in     al,dx
c001d6f4:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001d6f7:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001d6fa:	0f b6 c0             	movzx  eax,al
c001d6fd:	09 c8                	or     eax,ecx
c001d6ff:	c9                   	leave  
c001d700:	c3                   	ret    
c001d701:	90                   	nop

c001d702 <PIC::eoi(unsigned char)>:
c001d702:	55                   	push   ebp
c001d703:	89 e5                	mov    ebp,esp
c001d705:	83 ec 14             	sub    esp,0x14
c001d708:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001d70b:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001d70e:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001d712:	75 1e                	jne    c001d732 <PIC::eoi(unsigned char)+0x30>
c001d714:	6a 0b                	push   0xb
c001d716:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d719:	e8 7a ff ff ff       	call   c001d698 <PIC::getIRQReg(int)>
c001d71e:	83 c4 08             	add    esp,0x8
c001d721:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001d725:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c001d729:	25 80 00 00 00       	and    eax,0x80
c001d72e:	85 c0                	test   eax,eax
c001d730:	74 5f                	je     c001d791 <PIC::eoi(unsigned char)+0x8f>
c001d732:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001d736:	75 2d                	jne    c001d765 <PIC::eoi(unsigned char)+0x63>
c001d738:	6a 0b                	push   0xb
c001d73a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d73d:	e8 56 ff ff ff       	call   c001d698 <PIC::getIRQReg(int)>
c001d742:	83 c4 08             	add    esp,0x8
c001d745:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001d749:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001d74c:	66 85 c0             	test   ax,ax
c001d74f:	78 14                	js     c001d765 <PIC::eoi(unsigned char)+0x63>
c001d751:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001d757:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001d75b:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001d75e:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001d762:	ee                   	out    dx,al
c001d763:	eb 2d                	jmp    c001d792 <PIC::eoi(unsigned char)+0x90>
c001d765:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001d769:	76 12                	jbe    c001d77d <PIC::eoi(unsigned char)+0x7b>
c001d76b:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001d771:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001d775:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001d778:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001d77c:	ee                   	out    dx,al
c001d77d:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001d783:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001d787:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001d78a:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001d78e:	ee                   	out    dx,al
c001d78f:	eb 01                	jmp    c001d792 <PIC::eoi(unsigned char)+0x90>
c001d791:	90                   	nop
c001d792:	c9                   	leave  
c001d793:	c3                   	ret    

c001d794 <PIC::remap()>:
c001d794:	55                   	push   ebp
c001d795:	89 e5                	mov    ebp,esp
c001d797:	83 ec 48             	sub    esp,0x48
c001d79a:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001d7a1:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001d7a8:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001d7ae:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001d7b1:	89 c2                	mov    edx,eax
c001d7b3:	ec                   	in     al,dx
c001d7b4:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001d7b7:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001d7ba:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001d7bd:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001d7c3:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001d7c6:	89 c2                	mov    edx,eax
c001d7c8:	ec                   	in     al,dx
c001d7c9:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001d7cc:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001d7cf:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001d7d2:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001d7d8:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001d7dc:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001d7df:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001d7e2:	ee                   	out    dx,al
c001d7e3:	83 ec 0c             	sub    esp,0xc
c001d7e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d7e9:	e8 a4 fe ff ff       	call   c001d692 <PIC::ioWait()>
c001d7ee:	83 c4 10             	add    esp,0x10
c001d7f1:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001d7f7:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001d7fb:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001d7fe:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001d801:	ee                   	out    dx,al
c001d802:	83 ec 0c             	sub    esp,0xc
c001d805:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d808:	e8 85 fe ff ff       	call   c001d692 <PIC::ioWait()>
c001d80d:	83 c4 10             	add    esp,0x10
c001d810:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001d813:	0f b6 c0             	movzx  eax,al
c001d816:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001d81c:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001d81f:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001d822:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001d825:	ee                   	out    dx,al
c001d826:	83 ec 0c             	sub    esp,0xc
c001d829:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d82c:	e8 61 fe ff ff       	call   c001d692 <PIC::ioWait()>
c001d831:	83 c4 10             	add    esp,0x10
c001d834:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001d837:	0f b6 c0             	movzx  eax,al
c001d83a:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001d840:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001d843:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001d846:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001d849:	ee                   	out    dx,al
c001d84a:	83 ec 0c             	sub    esp,0xc
c001d84d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d850:	e8 3d fe ff ff       	call   c001d692 <PIC::ioWait()>
c001d855:	83 c4 10             	add    esp,0x10
c001d858:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001d85e:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001d862:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001d865:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001d868:	ee                   	out    dx,al
c001d869:	83 ec 0c             	sub    esp,0xc
c001d86c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d86f:	e8 1e fe ff ff       	call   c001d692 <PIC::ioWait()>
c001d874:	83 c4 10             	add    esp,0x10
c001d877:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001d87d:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001d881:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001d884:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001d887:	ee                   	out    dx,al
c001d888:	83 ec 0c             	sub    esp,0xc
c001d88b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d88e:	e8 ff fd ff ff       	call   c001d692 <PIC::ioWait()>
c001d893:	83 c4 10             	add    esp,0x10
c001d896:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001d89c:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001d8a0:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001d8a3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001d8a6:	ee                   	out    dx,al
c001d8a7:	83 ec 0c             	sub    esp,0xc
c001d8aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d8ad:	e8 e0 fd ff ff       	call   c001d692 <PIC::ioWait()>
c001d8b2:	83 c4 10             	add    esp,0x10
c001d8b5:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001d8bb:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001d8bf:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001d8c2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001d8c5:	ee                   	out    dx,al
c001d8c6:	83 ec 0c             	sub    esp,0xc
c001d8c9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d8cc:	e8 c1 fd ff ff       	call   c001d692 <PIC::ioWait()>
c001d8d1:	83 c4 10             	add    esp,0x10
c001d8d4:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c001d8d8:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001d8de:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001d8e1:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001d8e4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001d8e7:	ee                   	out    dx,al
c001d8e8:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c001d8ec:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001d8f2:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001d8f5:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001d8f8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001d8fb:	ee                   	out    dx,al
c001d8fc:	90                   	nop
c001d8fd:	c9                   	leave  
c001d8fe:	c3                   	ret    
c001d8ff:	90                   	nop

c001d900 <PIC::open(int, int, void*)>:
c001d900:	55                   	push   ebp
c001d901:	89 e5                	mov    ebp,esp
c001d903:	83 ec 18             	sub    esp,0x18
c001d906:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001d90c:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001d910:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001d913:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001d917:	ee                   	out    dx,al
c001d918:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001d91e:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001d922:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001d925:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001d929:	ee                   	out    dx,al
c001d92a:	83 ec 0c             	sub    esp,0xc
c001d92d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001d930:	e8 5f fe ff ff       	call   c001d794 <PIC::remap()>
c001d935:	83 c4 10             	add    esp,0x10
c001d938:	b8 00 00 00 00       	mov    eax,0x0
c001d93d:	c9                   	leave  
c001d93e:	c3                   	ret    
c001d93f:	90                   	nop

c001d940 <APICTimer::close(int, int, void*)>:
c001d940:	b8 00 00 00 00       	mov    eax,0x0
c001d945:	c3                   	ret    

c001d946 <apicTimerHandler(regs*, void*)>:
c001d946:	83 ec 0c             	sub    esp,0xc
c001d949:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d94d:	8b 00                	mov    eax,DWORD PTR [eax]
c001d94f:	99                   	cdq    
c001d950:	52                   	push   edx
c001d951:	50                   	push   eax
c001d952:	6a 00                	push   0x0
c001d954:	68 00 ca 9a 3b       	push   0x3b9aca00
c001d959:	e8 6e 07 00 00       	call   c001e0cc <__udivdi3>
c001d95e:	83 c4 10             	add    esp,0x10
c001d961:	83 ec 08             	sub    esp,0x8
c001d964:	52                   	push   edx
c001d965:	50                   	push   eax
c001d966:	e8 92 4b ff ff       	call   c00124fd <timerHandler(unsigned long long)>
c001d96b:	83 c4 10             	add    esp,0x10
c001d96e:	90                   	nop
c001d96f:	83 c4 0c             	add    esp,0xc
c001d972:	c3                   	ret    
c001d973:	90                   	nop

c001d974 <APICTimer::write(int)>:
c001d974:	53                   	push   ebx
c001d975:	83 ec 28             	sub    esp,0x28
c001d978:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d97c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d980:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d986:	e8 df 65 ff ff       	call   c0013f6a <thisCPU()>
c001d98b:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001d991:	83 ec 0c             	sub    esp,0xc
c001d994:	50                   	push   eax
c001d995:	e8 0e f6 ff ff       	call   c001cfa8 <APIC::getBase()>
c001d99a:	83 c4 10             	add    esp,0x10
c001d99d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d9a1:	a1 b0 34 02 c0       	mov    eax,ds:0xc00234b0
c001d9a6:	8b 15 b4 34 02 c0    	mov    edx,DWORD PTR ds:0xc00234b4
c001d9ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d9b0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001d9b4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d9b8:	05 e0 03 00 00       	add    eax,0x3e0
c001d9bd:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001d9c3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d9c7:	05 80 03 00 00       	add    eax,0x380
c001d9cc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001d9d2:	fb                   	sti    
c001d9d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d9d7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d9db:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001d9e0:	83 d2 00             	adc    edx,0x0
c001d9e3:	89 c1                	mov    ecx,eax
c001d9e5:	89 d3                	mov    ebx,edx
c001d9e7:	a1 b0 34 02 c0       	mov    eax,ds:0xc00234b0
c001d9ec:	8b 15 b4 34 02 c0    	mov    edx,DWORD PTR ds:0xc00234b4
c001d9f2:	39 c8                	cmp    eax,ecx
c001d9f4:	89 d0                	mov    eax,edx
c001d9f6:	19 d8                	sbb    eax,ebx
c001d9f8:	73 02                	jae    c001d9fc <APICTimer::write(int)+0x88>
c001d9fa:	eb d7                	jmp    c001d9d3 <APICTimer::write(int)+0x5f>
c001d9fc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001da00:	05 20 03 00 00       	add    eax,0x320
c001da05:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001da0b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001da0f:	05 90 03 00 00       	add    eax,0x390
c001da14:	8b 00                	mov    eax,DWORD PTR [eax]
c001da16:	f7 d0                	not    eax
c001da18:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001da1c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001da20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da24:	ba 00 00 00 00       	mov    edx,0x0
c001da29:	f7 f3                	div    ebx
c001da2b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001da2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001da33:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001da39:	0d 00 00 02 00       	or     eax,0x20000
c001da3e:	89 c2                	mov    edx,eax
c001da40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001da44:	05 20 03 00 00       	add    eax,0x320
c001da49:	89 10                	mov    DWORD PTR [eax],edx
c001da4b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001da4f:	05 e0 03 00 00       	add    eax,0x3e0
c001da54:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001da5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001da5e:	05 80 03 00 00       	add    eax,0x380
c001da63:	89 c2                	mov    edx,eax
c001da65:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001da69:	89 02                	mov    DWORD PTR [edx],eax
c001da6b:	90                   	nop
c001da6c:	83 c4 28             	add    esp,0x28
c001da6f:	5b                   	pop    ebx
c001da70:	c3                   	ret    
c001da71:	90                   	nop

c001da72 <APICTimer::open(int, int, void*)>:
c001da72:	57                   	push   edi
c001da73:	56                   	push   esi
c001da74:	53                   	push   ebx
c001da75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001da79:	8b 00                	mov    eax,DWORD PTR [eax]
c001da7b:	83 c0 24             	add    eax,0x24
c001da7e:	8b 00                	mov    eax,DWORD PTR [eax]
c001da80:	83 ec 08             	sub    esp,0x8
c001da83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001da87:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001da8b:	ff d0                	call   eax
c001da8d:	83 c4 10             	add    esp,0x10
c001da90:	e8 d5 64 ff ff       	call   c0013f6a <thisCPU()>
c001da95:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001da9b:	83 ec 0c             	sub    esp,0xc
c001da9e:	50                   	push   eax
c001da9f:	e8 04 f5 ff ff       	call   c001cfa8 <APIC::getBase()>
c001daa4:	83 c4 10             	add    esp,0x10
c001daa7:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001daad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dab1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001dab7:	0f b6 f8             	movzx  edi,al
c001daba:	89 d0                	mov    eax,edx
c001dabc:	ba 00 00 00 00       	mov    edx,0x0
c001dac1:	89 c1                	mov    ecx,eax
c001dac3:	80 e5 ff             	and    ch,0xff
c001dac6:	89 cb                	mov    ebx,ecx
c001dac8:	0f b6 f2             	movzx  esi,dl
c001dacb:	89 d8                	mov    eax,ebx
c001dacd:	89 f2                	mov    edx,esi
c001dacf:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dad3:	8d 5f 08             	lea    ebx,[edi+0x8]
c001dad6:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001dada:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001dade:	83 e0 00             	and    eax,0x0
c001dae1:	09 d0                	or     eax,edx
c001dae3:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001dae7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001daeb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001daf1:	8d 50 01             	lea    edx,[eax+0x1]
c001daf4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001daf8:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001dafe:	0f b6 d0             	movzx  edx,al
c001db01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db05:	83 c2 08             	add    edx,0x8
c001db08:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001db0c:	0f b6 c9             	movzx  ecx,cl
c001db0f:	81 c9 00 00 01 00    	or     ecx,0x10000
c001db15:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001db19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db1d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001db21:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001db27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db2b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db2f:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001db35:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001db39:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001db3f:	83 ec 0c             	sub    esp,0xc
c001db42:	51                   	push   ecx
c001db43:	6a 01                	push   0x1
c001db45:	68 46 d9 01 c0       	push   0xc001d946
c001db4a:	52                   	push   edx
c001db4b:	50                   	push   eax
c001db4c:	e8 15 29 ff ff       	call   c0010466 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001db51:	83 c4 20             	add    esp,0x20
c001db54:	89 c2                	mov    edx,eax
c001db56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db5a:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001db60:	b8 00 00 00 00       	mov    eax,0x0
c001db65:	5b                   	pop    ebx
c001db66:	5e                   	pop    esi
c001db67:	5f                   	pop    edi
c001db68:	c3                   	ret    
c001db69:	90                   	nop

c001db6a <APICTimer::APICTimer()>:
c001db6a:	83 ec 0c             	sub    esp,0xc
c001db6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db71:	83 ec 08             	sub    esp,0x8
c001db74:	68 64 22 02 c0       	push   0xc0022264
c001db79:	50                   	push   eax
c001db7a:	e8 ef 48 ff ff       	call   c001246e <Timer::Timer(char const*)>
c001db7f:	83 c4 10             	add    esp,0x10
c001db82:	ba 78 22 02 c0       	mov    edx,0xc0022278
c001db87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db8b:	89 10                	mov    DWORD PTR [eax],edx
c001db8d:	90                   	nop
c001db8e:	83 c4 0c             	add    esp,0xc
c001db91:	c3                   	ret    

c001db92 <PIT::write(int)>:
c001db92:	83 ec 10             	sub    esp,0x10
c001db95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001db99:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001db9d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001dba3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dba7:	a3 44 4c 02 c0       	mov    ds:0xc0024c44,eax
c001dbac:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001dbb1:	99                   	cdq    
c001dbb2:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001dbb6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dbba:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001dbc1:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001dbc6:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001dbca:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001dbcf:	ee                   	out    dx,al
c001dbd0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dbd4:	0f b6 c0             	movzx  eax,al
c001dbd7:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001dbde:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001dbe2:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001dbe6:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001dbeb:	ee                   	out    dx,al
c001dbec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dbf0:	c1 f8 08             	sar    eax,0x8
c001dbf3:	0f b6 c0             	movzx  eax,al
c001dbf6:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001dbfd:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001dc01:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001dc05:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001dc0a:	ee                   	out    dx,al
c001dc0b:	90                   	nop
c001dc0c:	83 c4 10             	add    esp,0x10
c001dc0f:	c3                   	ret    

c001dc10 <pitHandler(regs*, void*)>:
c001dc10:	83 ec 0c             	sub    esp,0xc
c001dc13:	a1 44 4c 02 c0       	mov    eax,ds:0xc0024c44
c001dc18:	99                   	cdq    
c001dc19:	52                   	push   edx
c001dc1a:	50                   	push   eax
c001dc1b:	6a 00                	push   0x0
c001dc1d:	68 00 ca 9a 3b       	push   0x3b9aca00
c001dc22:	e8 a5 04 00 00       	call   c001e0cc <__udivdi3>
c001dc27:	83 c4 10             	add    esp,0x10
c001dc2a:	83 ec 08             	sub    esp,0x8
c001dc2d:	52                   	push   edx
c001dc2e:	50                   	push   eax
c001dc2f:	e8 c9 48 ff ff       	call   c00124fd <timerHandler(unsigned long long)>
c001dc34:	83 c4 10             	add    esp,0x10
c001dc37:	90                   	nop
c001dc38:	83 c4 0c             	add    esp,0xc
c001dc3b:	c3                   	ret    

c001dc3c <PIT::open(int, int, void*)>:
c001dc3c:	83 ec 0c             	sub    esp,0xc
c001dc3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc43:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc45:	83 c0 24             	add    eax,0x24
c001dc48:	8b 00                	mov    eax,DWORD PTR [eax]
c001dc4a:	83 ec 08             	sub    esp,0x8
c001dc4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc55:	ff d0                	call   eax
c001dc57:	83 c4 10             	add    esp,0x10
c001dc5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc5e:	83 ec 0c             	sub    esp,0xc
c001dc61:	6a 00                	push   0x0
c001dc63:	6a 01                	push   0x1
c001dc65:	68 10 dc 01 c0       	push   0xc001dc10
c001dc6a:	6a 00                	push   0x0
c001dc6c:	50                   	push   eax
c001dc6d:	e8 f4 27 ff ff       	call   c0010466 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dc72:	83 c4 20             	add    esp,0x20
c001dc75:	89 c2                	mov    edx,eax
c001dc77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc7b:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001dc81:	b8 00 00 00 00       	mov    eax,0x0
c001dc86:	83 c4 0c             	add    esp,0xc
c001dc89:	c3                   	ret    

c001dc8a <PIT::close(int, int, void*)>:
c001dc8a:	83 ec 0c             	sub    esp,0xc
c001dc8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc91:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001dc9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc9f:	6a 01                	push   0x1
c001dca1:	68 10 dc 01 c0       	push   0xc001dc10
c001dca6:	6a 00                	push   0x0
c001dca8:	50                   	push   eax
c001dca9:	e8 16 28 ff ff       	call   c00104c4 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001dcae:	83 c4 10             	add    esp,0x10
c001dcb1:	b8 00 00 00 00       	mov    eax,0x0
c001dcb6:	83 c4 0c             	add    esp,0xc
c001dcb9:	c3                   	ret    

c001dcba <PIT::PIT()>:
c001dcba:	83 ec 0c             	sub    esp,0xc
c001dcbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcc1:	83 ec 08             	sub    esp,0x8
c001dcc4:	68 a0 22 02 c0       	push   0xc00222a0
c001dcc9:	50                   	push   eax
c001dcca:	e8 9f 47 ff ff       	call   c001246e <Timer::Timer(char const*)>
c001dccf:	83 c4 10             	add    esp,0x10
c001dcd2:	ba c8 22 02 c0       	mov    edx,0xc00222c8
c001dcd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcdb:	89 10                	mov    DWORD PTR [eax],edx
c001dcdd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dce1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dce7:	0f b6 d0             	movzx  edx,al
c001dcea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcee:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001dcf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcf9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dcff:	0f b6 d0             	movzx  edx,al
c001dd02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd06:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001dd0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd0f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001dd15:	8d 50 01             	lea    edx,[eax+0x1]
c001dd18:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd1c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001dd22:	0f b6 d0             	movzx  edx,al
c001dd25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dd29:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001dd2d:	83 e1 3f             	and    ecx,0x3f
c001dd30:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001dd34:	90                   	nop
c001dd35:	83 c4 0c             	add    esp,0xc
c001dd38:	c3                   	ret    
c001dd39:	66 90                	xchg   ax,ax
c001dd3b:	66 90                	xchg   ax,ax
c001dd3d:	66 90                	xchg   ax,ax
c001dd3f:	90                   	nop

c001dd40 <avxDetect>:
c001dd40:	b8 00 00 00 00       	mov    eax,0x0
c001dd45:	c3                   	ret    

c001dd46 <avxSave>:
c001dd46:	c3                   	ret    

c001dd47 <avxLoad>:
c001dd47:	c3                   	ret    

c001dd48 <avxInit>:
c001dd48:	c3                   	ret    

c001dd49 <avxClose>:
c001dd49:	c3                   	ret    
c001dd4a:	66 90                	xchg   ax,ax
c001dd4c:	66 90                	xchg   ax,ax
c001dd4e:	66 90                	xchg   ax,ax

c001dd50 <sseDetect>:
c001dd50:	b8 01 00 00 00       	mov    eax,0x1
c001dd55:	0f a2                	cpuid  
c001dd57:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001dd5d:	74 06                	je     c001dd65 <sseDetect.noSSE>
c001dd5f:	b8 01 00 00 00       	mov    eax,0x1
c001dd64:	c3                   	ret    

c001dd65 <sseDetect.noSSE>:
c001dd65:	b8 00 00 00 00       	mov    eax,0x0
c001dd6a:	c3                   	ret    

c001dd6b <sseSave>:
c001dd6b:	0f ae 44 24 08       	fxsave [esp+0x8]
c001dd70:	c3                   	ret    

c001dd71 <sseLoad>:
c001dd71:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001dd76:	c3                   	ret    

c001dd77 <sseInit>:
c001dd77:	e8 40 00 00 00       	call   c001ddbc <x87Init>
c001dd7c:	0f 20 e0             	mov    eax,cr4
c001dd7f:	66 0d 00 06          	or     ax,0x600
c001dd83:	0f 22 e0             	mov    cr4,eax
c001dd86:	c3                   	ret    

c001dd87 <sseClose>:
c001dd87:	c3                   	ret    
c001dd88:	66 90                	xchg   ax,ax
c001dd8a:	66 90                	xchg   ax,ax
c001dd8c:	66 90                	xchg   ax,ax
c001dd8e:	66 90                	xchg   ax,ax

c001dd90 <value_37F>:
c001dd90:	7f 03                	jg     c001dd95 <value_37A+0x1>

c001dd92 <value_37E>:
c001dd92:	7e 03                	jle    c001dd97 <x87Detect+0x1>

c001dd94 <value_37A>:
c001dd94:	7a 03                	jp     c001dd99 <x87Detect+0x3>

c001dd96 <x87Detect>:
c001dd96:	b8 01 00 00 00       	mov    eax,0x1
c001dd9b:	0f a2                	cpuid  
c001dd9d:	f7 c2 01 00 00 00    	test   edx,0x1
c001dda3:	74 06                	je     c001ddab <x87Detect.nox87>
c001dda5:	b8 01 00 00 00       	mov    eax,0x1
c001ddaa:	c3                   	ret    

c001ddab <x87Detect.nox87>:
c001ddab:	b8 00 00 00 00       	mov    eax,0x0
c001ddb0:	c3                   	ret    

c001ddb1 <x87Save>:
c001ddb1:	9b dd 74 24 08       	fsave  [esp+0x8]
c001ddb6:	c3                   	ret    

c001ddb7 <x87Load>:
c001ddb7:	dd 64 24 08          	frstor [esp+0x8]
c001ddbb:	c3                   	ret    

c001ddbc <x87Init>:
c001ddbc:	9b db e3             	finit  
c001ddbf:	0f 20 c0             	mov    eax,cr0
c001ddc2:	66 25 fb ff          	and    ax,0xfffb
c001ddc6:	66 0d 22 00          	or     ax,0x22
c001ddca:	0f 22 c0             	mov    cr0,eax
c001ddcd:	0f 06                	clts   
c001ddcf:	d9 2d 94 dd 01 c0    	fldcw  WORD PTR ds:0xc001dd94
c001ddd5:	c3                   	ret    

c001ddd6 <x87Close>:
c001ddd6:	c3                   	ret    
c001ddd7:	90                   	nop

c001ddd8 <__do_global_ctors_aux>:
c001ddd8:	a1 64 ef 01 c0       	mov    eax,ds:0xc001ef64
c001dddd:	83 f8 ff             	cmp    eax,0xffffffff
c001dde0:	74 1a                	je     c001ddfc <__do_global_ctors_aux+0x24>
c001dde2:	55                   	push   ebp
c001dde3:	89 e5                	mov    ebp,esp
c001dde5:	53                   	push   ebx
c001dde6:	52                   	push   edx
c001dde7:	bb 64 ef 01 c0       	mov    ebx,0xc001ef64
c001ddec:	ff d0                	call   eax
c001ddee:	83 eb 04             	sub    ebx,0x4
c001ddf1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ddf3:	83 f8 ff             	cmp    eax,0xffffffff
c001ddf6:	75 f4                	jne    c001ddec <__do_global_ctors_aux+0x14>
c001ddf8:	58                   	pop    eax
c001ddf9:	5b                   	pop    ebx
c001ddfa:	5d                   	pop    ebp
c001ddfb:	c3                   	ret    
c001ddfc:	c3                   	ret    
c001ddfd:	66 90                	xchg   ax,ax
c001ddff:	90                   	nop

c001de00 <__divdi3>:
c001de00:	55                   	push   ebp
c001de01:	57                   	push   edi
c001de02:	56                   	push   esi
c001de03:	53                   	push   ebx
c001de04:	83 ec 1c             	sub    esp,0x1c
c001de07:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001de0b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001de0f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001de12:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001de16:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001de1a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001de1e:	85 db                	test   ebx,ebx
c001de20:	0f 88 8e 00 00 00    	js     c001deb4 <__divdi3+0xb4>
c001de26:	89 dd                	mov    ebp,ebx
c001de28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001de30:	89 d3                	mov    ebx,edx
c001de32:	85 d2                	test   edx,edx
c001de34:	79 0d                	jns    c001de43 <__divdi3+0x43>
c001de36:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001de3a:	f7 d8                	neg    eax
c001de3c:	83 d2 00             	adc    edx,0x0
c001de3f:	f7 da                	neg    edx
c001de41:	89 d3                	mov    ebx,edx
c001de43:	89 c7                	mov    edi,eax
c001de45:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001de48:	85 db                	test   ebx,ebx
c001de4a:	75 48                	jne    c001de94 <__divdi3+0x94>
c001de4c:	39 ef                	cmp    edi,ebp
c001de4e:	76 24                	jbe    c001de74 <__divdi3+0x74>
c001de50:	89 ea                	mov    edx,ebp
c001de52:	f7 f7                	div    edi
c001de54:	89 c1                	mov    ecx,eax
c001de56:	31 f6                	xor    esi,esi
c001de58:	89 c8                	mov    eax,ecx
c001de5a:	89 f2                	mov    edx,esi
c001de5c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001de60:	85 c9                	test   ecx,ecx
c001de62:	74 07                	je     c001de6b <__divdi3+0x6b>
c001de64:	f7 d8                	neg    eax
c001de66:	83 d2 00             	adc    edx,0x0
c001de69:	f7 da                	neg    edx
c001de6b:	83 c4 1c             	add    esp,0x1c
c001de6e:	5b                   	pop    ebx
c001de6f:	5e                   	pop    esi
c001de70:	5f                   	pop    edi
c001de71:	5d                   	pop    ebp
c001de72:	c3                   	ret    
c001de73:	90                   	nop
c001de74:	85 ff                	test   edi,edi
c001de76:	75 0b                	jne    c001de83 <__divdi3+0x83>
c001de78:	b8 01 00 00 00       	mov    eax,0x1
c001de7d:	31 d2                	xor    edx,edx
c001de7f:	f7 f3                	div    ebx
c001de81:	89 c7                	mov    edi,eax
c001de83:	31 d2                	xor    edx,edx
c001de85:	89 e8                	mov    eax,ebp
c001de87:	f7 f7                	div    edi
c001de89:	89 c6                	mov    esi,eax
c001de8b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001de8e:	f7 f7                	div    edi
c001de90:	89 c1                	mov    ecx,eax
c001de92:	eb c4                	jmp    c001de58 <__divdi3+0x58>
c001de94:	39 eb                	cmp    ebx,ebp
c001de96:	77 3c                	ja     c001ded4 <__divdi3+0xd4>
c001de98:	0f bd f3             	bsr    esi,ebx
c001de9b:	83 f6 1f             	xor    esi,0x1f
c001de9e:	75 40                	jne    c001dee0 <__divdi3+0xe0>
c001dea0:	39 eb                	cmp    ebx,ebp
c001dea2:	72 09                	jb     c001dead <__divdi3+0xad>
c001dea4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001dea7:	0f 87 97 00 00 00    	ja     c001df44 <__divdi3+0x144>
c001dead:	b9 01 00 00 00       	mov    ecx,0x1
c001deb2:	eb a4                	jmp    c001de58 <__divdi3+0x58>
c001deb4:	f7 d9                	neg    ecx
c001deb6:	83 d3 00             	adc    ebx,0x0
c001deb9:	f7 db                	neg    ebx
c001debb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001debe:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001dec2:	89 dd                	mov    ebp,ebx
c001dec4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001decc:	e9 5f ff ff ff       	jmp    c001de30 <__divdi3+0x30>
c001ded1:	8d 76 00             	lea    esi,[esi+0x0]
c001ded4:	31 f6                	xor    esi,esi
c001ded6:	31 c9                	xor    ecx,ecx
c001ded8:	e9 7b ff ff ff       	jmp    c001de58 <__divdi3+0x58>
c001dedd:	8d 76 00             	lea    esi,[esi+0x0]
c001dee0:	b8 20 00 00 00       	mov    eax,0x20
c001dee5:	29 f0                	sub    eax,esi
c001dee7:	89 f1                	mov    ecx,esi
c001dee9:	d3 e3                	shl    ebx,cl
c001deeb:	89 fa                	mov    edx,edi
c001deed:	88 c1                	mov    cl,al
c001deef:	d3 ea                	shr    edx,cl
c001def1:	09 da                	or     edx,ebx
c001def3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001def7:	89 f1                	mov    ecx,esi
c001def9:	d3 e7                	shl    edi,cl
c001defb:	89 eb                	mov    ebx,ebp
c001defd:	88 c1                	mov    cl,al
c001deff:	d3 eb                	shr    ebx,cl
c001df01:	89 f1                	mov    ecx,esi
c001df03:	d3 e5                	shl    ebp,cl
c001df05:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001df08:	88 c1                	mov    cl,al
c001df0a:	d3 ea                	shr    edx,cl
c001df0c:	09 d5                	or     ebp,edx
c001df0e:	89 e8                	mov    eax,ebp
c001df10:	89 da                	mov    edx,ebx
c001df12:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001df16:	89 d3                	mov    ebx,edx
c001df18:	89 c5                	mov    ebp,eax
c001df1a:	f7 e7                	mul    edi
c001df1c:	39 d3                	cmp    ebx,edx
c001df1e:	72 18                	jb     c001df38 <__divdi3+0x138>
c001df20:	74 0a                	je     c001df2c <__divdi3+0x12c>
c001df22:	89 e9                	mov    ecx,ebp
c001df24:	31 f6                	xor    esi,esi
c001df26:	e9 2d ff ff ff       	jmp    c001de58 <__divdi3+0x58>
c001df2b:	90                   	nop
c001df2c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001df2f:	89 f1                	mov    ecx,esi
c001df31:	d3 e7                	shl    edi,cl
c001df33:	39 c7                	cmp    edi,eax
c001df35:	73 eb                	jae    c001df22 <__divdi3+0x122>
c001df37:	90                   	nop
c001df38:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001df3b:	31 f6                	xor    esi,esi
c001df3d:	e9 16 ff ff ff       	jmp    c001de58 <__divdi3+0x58>
c001df42:	66 90                	xchg   ax,ax
c001df44:	31 c9                	xor    ecx,ecx
c001df46:	e9 0d ff ff ff       	jmp    c001de58 <__divdi3+0x58>
c001df4b:	90                   	nop

c001df4c <__moddi3>:
c001df4c:	55                   	push   ebp
c001df4d:	57                   	push   edi
c001df4e:	56                   	push   esi
c001df4f:	53                   	push   ebx
c001df50:	83 ec 2c             	sub    esp,0x2c
c001df53:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001df57:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001df5b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001df5f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001df63:	85 db                	test   ebx,ebx
c001df65:	0f 88 85 00 00 00    	js     c001dff0 <__moddi3+0xa4>
c001df6b:	89 de                	mov    esi,ebx
c001df6d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001df75:	89 d7                	mov    edi,edx
c001df77:	85 d2                	test   edx,edx
c001df79:	79 09                	jns    c001df84 <__moddi3+0x38>
c001df7b:	f7 d8                	neg    eax
c001df7d:	83 d2 00             	adc    edx,0x0
c001df80:	f7 da                	neg    edx
c001df82:	89 d7                	mov    edi,edx
c001df84:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001df88:	89 cd                	mov    ebp,ecx
c001df8a:	85 ff                	test   edi,edi
c001df8c:	75 52                	jne    c001dfe0 <__moddi3+0x94>
c001df8e:	89 c3                	mov    ebx,eax
c001df90:	39 f0                	cmp    eax,esi
c001df92:	76 24                	jbe    c001dfb8 <__moddi3+0x6c>
c001df94:	89 c8                	mov    eax,ecx
c001df96:	89 f2                	mov    edx,esi
c001df98:	f7 f3                	div    ebx
c001df9a:	89 d6                	mov    esi,edx
c001df9c:	89 f0                	mov    eax,esi
c001df9e:	31 d2                	xor    edx,edx
c001dfa0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dfa4:	85 c9                	test   ecx,ecx
c001dfa6:	74 07                	je     c001dfaf <__moddi3+0x63>
c001dfa8:	f7 d8                	neg    eax
c001dfaa:	83 d2 00             	adc    edx,0x0
c001dfad:	f7 da                	neg    edx
c001dfaf:	83 c4 2c             	add    esp,0x2c
c001dfb2:	5b                   	pop    ebx
c001dfb3:	5e                   	pop    esi
c001dfb4:	5f                   	pop    edi
c001dfb5:	5d                   	pop    ebp
c001dfb6:	c3                   	ret    
c001dfb7:	90                   	nop
c001dfb8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001dfbc:	85 db                	test   ebx,ebx
c001dfbe:	75 0d                	jne    c001dfcd <__moddi3+0x81>
c001dfc0:	b8 01 00 00 00       	mov    eax,0x1
c001dfc5:	31 d2                	xor    edx,edx
c001dfc7:	f7 f7                	div    edi
c001dfc9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001dfcd:	89 f0                	mov    eax,esi
c001dfcf:	31 d2                	xor    edx,edx
c001dfd1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001dfd5:	f7 f7                	div    edi
c001dfd7:	89 e8                	mov    eax,ebp
c001dfd9:	f7 f7                	div    edi
c001dfdb:	89 d6                	mov    esi,edx
c001dfdd:	eb bd                	jmp    c001df9c <__moddi3+0x50>
c001dfdf:	90                   	nop
c001dfe0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001dfe4:	39 f7                	cmp    edi,esi
c001dfe6:	76 20                	jbe    c001e008 <__moddi3+0xbc>
c001dfe8:	89 c8                	mov    eax,ecx
c001dfea:	89 f2                	mov    edx,esi
c001dfec:	eb b2                	jmp    c001dfa0 <__moddi3+0x54>
c001dfee:	66 90                	xchg   ax,ax
c001dff0:	f7 d9                	neg    ecx
c001dff2:	83 d3 00             	adc    ebx,0x0
c001dff5:	f7 db                	neg    ebx
c001dff7:	89 de                	mov    esi,ebx
c001dff9:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001e001:	e9 6f ff ff ff       	jmp    c001df75 <__moddi3+0x29>
c001e006:	66 90                	xchg   ax,ax
c001e008:	0f bd c7             	bsr    eax,edi
c001e00b:	83 f0 1f             	xor    eax,0x1f
c001e00e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e012:	75 24                	jne    c001e038 <__moddi3+0xec>
c001e014:	39 f7                	cmp    edi,esi
c001e016:	72 06                	jb     c001e01e <__moddi3+0xd2>
c001e018:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001e01c:	77 0c                	ja     c001e02a <__moddi3+0xde>
c001e01e:	89 e9                	mov    ecx,ebp
c001e020:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001e024:	19 fe                	sbb    esi,edi
c001e026:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001e02a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e02e:	89 f2                	mov    edx,esi
c001e030:	e9 6b ff ff ff       	jmp    c001dfa0 <__moddi3+0x54>
c001e035:	8d 76 00             	lea    esi,[esi+0x0]
c001e038:	b8 20 00 00 00       	mov    eax,0x20
c001e03d:	89 c2                	mov    edx,eax
c001e03f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e043:	29 da                	sub    edx,ebx
c001e045:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e049:	88 d9                	mov    cl,bl
c001e04b:	d3 e7                	shl    edi,cl
c001e04d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e051:	88 d1                	mov    cl,dl
c001e053:	d3 e8                	shr    eax,cl
c001e055:	09 c7                	or     edi,eax
c001e057:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001e05b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e05f:	89 d8                	mov    eax,ebx
c001e061:	88 d9                	mov    cl,bl
c001e063:	d3 e7                	shl    edi,cl
c001e065:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e069:	89 f3                	mov    ebx,esi
c001e06b:	88 d1                	mov    cl,dl
c001e06d:	d3 eb                	shr    ebx,cl
c001e06f:	89 c7                	mov    edi,eax
c001e071:	88 c1                	mov    cl,al
c001e073:	d3 e6                	shl    esi,cl
c001e075:	89 e8                	mov    eax,ebp
c001e077:	88 d1                	mov    cl,dl
c001e079:	d3 e8                	shr    eax,cl
c001e07b:	09 f0                	or     eax,esi
c001e07d:	89 f9                	mov    ecx,edi
c001e07f:	d3 e5                	shl    ebp,cl
c001e081:	89 da                	mov    edx,ebx
c001e083:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001e087:	89 d3                	mov    ebx,edx
c001e089:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e08d:	89 c6                	mov    esi,eax
c001e08f:	89 d1                	mov    ecx,edx
c001e091:	39 d3                	cmp    ebx,edx
c001e093:	72 27                	jb     c001e0bc <__moddi3+0x170>
c001e095:	74 21                	je     c001e0b8 <__moddi3+0x16c>
c001e097:	29 f5                	sub    ebp,esi
c001e099:	19 cb                	sbb    ebx,ecx
c001e09b:	89 de                	mov    esi,ebx
c001e09d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001e0a1:	d3 e6                	shl    esi,cl
c001e0a3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001e0a7:	89 f9                	mov    ecx,edi
c001e0a9:	d3 ed                	shr    ebp,cl
c001e0ab:	09 ee                	or     esi,ebp
c001e0ad:	89 f0                	mov    eax,esi
c001e0af:	d3 eb                	shr    ebx,cl
c001e0b1:	89 da                	mov    edx,ebx
c001e0b3:	e9 e8 fe ff ff       	jmp    c001dfa0 <__moddi3+0x54>
c001e0b8:	39 c5                	cmp    ebp,eax
c001e0ba:	73 db                	jae    c001e097 <__moddi3+0x14b>
c001e0bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e0c0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001e0c4:	89 d1                	mov    ecx,edx
c001e0c6:	89 c6                	mov    esi,eax
c001e0c8:	eb cd                	jmp    c001e097 <__moddi3+0x14b>
c001e0ca:	66 90                	xchg   ax,ax

c001e0cc <__udivdi3>:
c001e0cc:	55                   	push   ebp
c001e0cd:	57                   	push   edi
c001e0ce:	56                   	push   esi
c001e0cf:	53                   	push   ebx
c001e0d0:	83 ec 1c             	sub    esp,0x1c
c001e0d3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e0d7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e0db:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e0df:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e0e3:	85 d2                	test   edx,edx
c001e0e5:	75 41                	jne    c001e128 <__udivdi3+0x5c>
c001e0e7:	39 f7                	cmp    edi,esi
c001e0e9:	76 15                	jbe    c001e100 <__udivdi3+0x34>
c001e0eb:	89 e8                	mov    eax,ebp
c001e0ed:	89 f2                	mov    edx,esi
c001e0ef:	f7 f7                	div    edi
c001e0f1:	31 db                	xor    ebx,ebx
c001e0f3:	89 da                	mov    edx,ebx
c001e0f5:	83 c4 1c             	add    esp,0x1c
c001e0f8:	5b                   	pop    ebx
c001e0f9:	5e                   	pop    esi
c001e0fa:	5f                   	pop    edi
c001e0fb:	5d                   	pop    ebp
c001e0fc:	c3                   	ret    
c001e0fd:	8d 76 00             	lea    esi,[esi+0x0]
c001e100:	89 f9                	mov    ecx,edi
c001e102:	85 ff                	test   edi,edi
c001e104:	75 0b                	jne    c001e111 <__udivdi3+0x45>
c001e106:	b8 01 00 00 00       	mov    eax,0x1
c001e10b:	31 d2                	xor    edx,edx
c001e10d:	f7 f7                	div    edi
c001e10f:	89 c1                	mov    ecx,eax
c001e111:	31 d2                	xor    edx,edx
c001e113:	89 f0                	mov    eax,esi
c001e115:	f7 f1                	div    ecx
c001e117:	89 c3                	mov    ebx,eax
c001e119:	89 e8                	mov    eax,ebp
c001e11b:	f7 f1                	div    ecx
c001e11d:	89 da                	mov    edx,ebx
c001e11f:	83 c4 1c             	add    esp,0x1c
c001e122:	5b                   	pop    ebx
c001e123:	5e                   	pop    esi
c001e124:	5f                   	pop    edi
c001e125:	5d                   	pop    ebp
c001e126:	c3                   	ret    
c001e127:	90                   	nop
c001e128:	39 f2                	cmp    edx,esi
c001e12a:	77 1c                	ja     c001e148 <__udivdi3+0x7c>
c001e12c:	0f bd da             	bsr    ebx,edx
c001e12f:	83 f3 1f             	xor    ebx,0x1f
c001e132:	75 24                	jne    c001e158 <__udivdi3+0x8c>
c001e134:	39 f2                	cmp    edx,esi
c001e136:	72 08                	jb     c001e140 <__udivdi3+0x74>
c001e138:	39 ef                	cmp    edi,ebp
c001e13a:	0f 87 84 00 00 00    	ja     c001e1c4 <__udivdi3+0xf8>
c001e140:	b8 01 00 00 00       	mov    eax,0x1
c001e145:	eb ac                	jmp    c001e0f3 <__udivdi3+0x27>
c001e147:	90                   	nop
c001e148:	31 db                	xor    ebx,ebx
c001e14a:	31 c0                	xor    eax,eax
c001e14c:	89 da                	mov    edx,ebx
c001e14e:	83 c4 1c             	add    esp,0x1c
c001e151:	5b                   	pop    ebx
c001e152:	5e                   	pop    esi
c001e153:	5f                   	pop    edi
c001e154:	5d                   	pop    ebp
c001e155:	c3                   	ret    
c001e156:	66 90                	xchg   ax,ax
c001e158:	b8 20 00 00 00       	mov    eax,0x20
c001e15d:	29 d8                	sub    eax,ebx
c001e15f:	88 d9                	mov    cl,bl
c001e161:	d3 e2                	shl    edx,cl
c001e163:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e167:	89 fa                	mov    edx,edi
c001e169:	88 c1                	mov    cl,al
c001e16b:	d3 ea                	shr    edx,cl
c001e16d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e171:	09 d1                	or     ecx,edx
c001e173:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e177:	88 d9                	mov    cl,bl
c001e179:	d3 e7                	shl    edi,cl
c001e17b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e17f:	89 f7                	mov    edi,esi
c001e181:	88 c1                	mov    cl,al
c001e183:	d3 ef                	shr    edi,cl
c001e185:	88 d9                	mov    cl,bl
c001e187:	d3 e6                	shl    esi,cl
c001e189:	89 ea                	mov    edx,ebp
c001e18b:	88 c1                	mov    cl,al
c001e18d:	d3 ea                	shr    edx,cl
c001e18f:	09 d6                	or     esi,edx
c001e191:	89 f0                	mov    eax,esi
c001e193:	89 fa                	mov    edx,edi
c001e195:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e199:	89 d7                	mov    edi,edx
c001e19b:	89 c6                	mov    esi,eax
c001e19d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e1a1:	39 d7                	cmp    edi,edx
c001e1a3:	72 13                	jb     c001e1b8 <__udivdi3+0xec>
c001e1a5:	74 09                	je     c001e1b0 <__udivdi3+0xe4>
c001e1a7:	89 f0                	mov    eax,esi
c001e1a9:	31 db                	xor    ebx,ebx
c001e1ab:	e9 43 ff ff ff       	jmp    c001e0f3 <__udivdi3+0x27>
c001e1b0:	88 d9                	mov    cl,bl
c001e1b2:	d3 e5                	shl    ebp,cl
c001e1b4:	39 c5                	cmp    ebp,eax
c001e1b6:	73 ef                	jae    c001e1a7 <__udivdi3+0xdb>
c001e1b8:	8d 46 ff             	lea    eax,[esi-0x1]
c001e1bb:	31 db                	xor    ebx,ebx
c001e1bd:	e9 31 ff ff ff       	jmp    c001e0f3 <__udivdi3+0x27>
c001e1c2:	66 90                	xchg   ax,ax
c001e1c4:	31 c0                	xor    eax,eax
c001e1c6:	e9 28 ff ff ff       	jmp    c001e0f3 <__udivdi3+0x27>
c001e1cb:	90                   	nop

c001e1cc <__umoddi3>:
c001e1cc:	55                   	push   ebp
c001e1cd:	57                   	push   edi
c001e1ce:	56                   	push   esi
c001e1cf:	53                   	push   ebx
c001e1d0:	83 ec 1c             	sub    esp,0x1c
c001e1d3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e1d7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e1db:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001e1df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e1e3:	89 da                	mov    edx,ebx
c001e1e5:	85 c0                	test   eax,eax
c001e1e7:	75 37                	jne    c001e220 <__umoddi3+0x54>
c001e1e9:	39 df                	cmp    edi,ebx
c001e1eb:	76 13                	jbe    c001e200 <__umoddi3+0x34>
c001e1ed:	89 f0                	mov    eax,esi
c001e1ef:	f7 f7                	div    edi
c001e1f1:	89 d0                	mov    eax,edx
c001e1f3:	31 d2                	xor    edx,edx
c001e1f5:	83 c4 1c             	add    esp,0x1c
c001e1f8:	5b                   	pop    ebx
c001e1f9:	5e                   	pop    esi
c001e1fa:	5f                   	pop    edi
c001e1fb:	5d                   	pop    ebp
c001e1fc:	c3                   	ret    
c001e1fd:	8d 76 00             	lea    esi,[esi+0x0]
c001e200:	89 fd                	mov    ebp,edi
c001e202:	85 ff                	test   edi,edi
c001e204:	75 0b                	jne    c001e211 <__umoddi3+0x45>
c001e206:	b8 01 00 00 00       	mov    eax,0x1
c001e20b:	31 d2                	xor    edx,edx
c001e20d:	f7 f7                	div    edi
c001e20f:	89 c5                	mov    ebp,eax
c001e211:	89 d8                	mov    eax,ebx
c001e213:	31 d2                	xor    edx,edx
c001e215:	f7 f5                	div    ebp
c001e217:	89 f0                	mov    eax,esi
c001e219:	f7 f5                	div    ebp
c001e21b:	89 d0                	mov    eax,edx
c001e21d:	eb d4                	jmp    c001e1f3 <__umoddi3+0x27>
c001e21f:	90                   	nop
c001e220:	89 f1                	mov    ecx,esi
c001e222:	39 d8                	cmp    eax,ebx
c001e224:	76 0a                	jbe    c001e230 <__umoddi3+0x64>
c001e226:	89 f0                	mov    eax,esi
c001e228:	83 c4 1c             	add    esp,0x1c
c001e22b:	5b                   	pop    ebx
c001e22c:	5e                   	pop    esi
c001e22d:	5f                   	pop    edi
c001e22e:	5d                   	pop    ebp
c001e22f:	c3                   	ret    
c001e230:	0f bd e8             	bsr    ebp,eax
c001e233:	83 f5 1f             	xor    ebp,0x1f
c001e236:	75 1c                	jne    c001e254 <__umoddi3+0x88>
c001e238:	39 d8                	cmp    eax,ebx
c001e23a:	72 04                	jb     c001e240 <__umoddi3+0x74>
c001e23c:	39 f7                	cmp    edi,esi
c001e23e:	77 08                	ja     c001e248 <__umoddi3+0x7c>
c001e240:	89 da                	mov    edx,ebx
c001e242:	29 fe                	sub    esi,edi
c001e244:	19 c2                	sbb    edx,eax
c001e246:	89 f1                	mov    ecx,esi
c001e248:	89 c8                	mov    eax,ecx
c001e24a:	83 c4 1c             	add    esp,0x1c
c001e24d:	5b                   	pop    ebx
c001e24e:	5e                   	pop    esi
c001e24f:	5f                   	pop    edi
c001e250:	5d                   	pop    ebp
c001e251:	c3                   	ret    
c001e252:	66 90                	xchg   ax,ax
c001e254:	ba 20 00 00 00       	mov    edx,0x20
c001e259:	29 ea                	sub    edx,ebp
c001e25b:	89 e9                	mov    ecx,ebp
c001e25d:	d3 e0                	shl    eax,cl
c001e25f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e263:	89 f8                	mov    eax,edi
c001e265:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001e269:	88 d1                	mov    cl,dl
c001e26b:	d3 e8                	shr    eax,cl
c001e26d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e271:	09 c1                	or     ecx,eax
c001e273:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e277:	89 e9                	mov    ecx,ebp
c001e279:	d3 e7                	shl    edi,cl
c001e27b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001e27f:	89 d8                	mov    eax,ebx
c001e281:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e285:	88 d1                	mov    cl,dl
c001e287:	d3 e8                	shr    eax,cl
c001e289:	89 c7                	mov    edi,eax
c001e28b:	89 e9                	mov    ecx,ebp
c001e28d:	d3 e3                	shl    ebx,cl
c001e28f:	89 f0                	mov    eax,esi
c001e291:	88 d1                	mov    cl,dl
c001e293:	d3 e8                	shr    eax,cl
c001e295:	09 d8                	or     eax,ebx
c001e297:	89 e9                	mov    ecx,ebp
c001e299:	d3 e6                	shl    esi,cl
c001e29b:	89 f3                	mov    ebx,esi
c001e29d:	89 fa                	mov    edx,edi
c001e29f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001e2a3:	89 d1                	mov    ecx,edx
c001e2a5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001e2a9:	89 c6                	mov    esi,eax
c001e2ab:	89 d7                	mov    edi,edx
c001e2ad:	39 d1                	cmp    ecx,edx
c001e2af:	72 27                	jb     c001e2d8 <__umoddi3+0x10c>
c001e2b1:	74 21                	je     c001e2d4 <__umoddi3+0x108>
c001e2b3:	89 ca                	mov    edx,ecx
c001e2b5:	29 f3                	sub    ebx,esi
c001e2b7:	19 fa                	sbb    edx,edi
c001e2b9:	89 d0                	mov    eax,edx
c001e2bb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001e2bf:	d3 e0                	shl    eax,cl
c001e2c1:	89 e9                	mov    ecx,ebp
c001e2c3:	d3 eb                	shr    ebx,cl
c001e2c5:	09 d8                	or     eax,ebx
c001e2c7:	d3 ea                	shr    edx,cl
c001e2c9:	83 c4 1c             	add    esp,0x1c
c001e2cc:	5b                   	pop    ebx
c001e2cd:	5e                   	pop    esi
c001e2ce:	5f                   	pop    edi
c001e2cf:	5d                   	pop    ebp
c001e2d0:	c3                   	ret    
c001e2d1:	8d 76 00             	lea    esi,[esi+0x0]
c001e2d4:	39 c3                	cmp    ebx,eax
c001e2d6:	73 db                	jae    c001e2b3 <__umoddi3+0xe7>
c001e2d8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001e2dc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001e2e0:	89 d7                	mov    edi,edx
c001e2e2:	89 c6                	mov    esi,eax
c001e2e4:	eb cd                	jmp    c001e2b3 <__umoddi3+0xe7>
c001e2e6:	66 90                	xchg   ax,ax
c001e2e8:	66 90                	xchg   ax,ax
c001e2ea:	66 90                	xchg   ax,ax
c001e2ec:	66 90                	xchg   ax,ax
c001e2ee:	66 90                	xchg   ax,ax

c001e2f0 <fabs>:
c001e2f0:	83 ec 0c             	sub    esp,0xc
c001e2f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2f7:	89 04 24             	mov    DWORD PTR [esp],eax
c001e2fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2fe:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001e303:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e307:	dd 04 24             	fld    QWORD PTR [esp]
c001e30a:	83 c4 0c             	add    esp,0xc
c001e30d:	c3                   	ret    
c001e30e:	66 90                	xchg   ax,ax

c001e310 <lrint>:
c001e310:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001e314:	83 ec 04             	sub    esp,0x4
c001e317:	db 1c 24             	fistp  DWORD PTR [esp]
c001e31a:	58                   	pop    eax
c001e31b:	c3                   	ret    

c001e31c <lrintf>:
c001e31c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001e320:	83 ec 04             	sub    esp,0x4
c001e323:	db 1c 24             	fistp  DWORD PTR [esp]
c001e326:	58                   	pop    eax
c001e327:	c3                   	ret    

Disassembly of section .init:

c001e328 <_init>:
c001e328:	55                   	push   ebp
c001e329:	89 e5                	mov    ebp,esp
c001e32b:	e8 e8 1d fe ff       	call   c0000118 <frame_dummy>
c001e330:	e8 a3 fa ff ff       	call   c001ddd8 <__do_global_ctors_aux>
c001e335:	5d                   	pop    ebp
c001e336:	c3                   	ret    

Disassembly of section .fini:

c001e337 <_fini>:
c001e337:	55                   	push   ebp
c001e338:	89 e5                	mov    ebp,esp
c001e33a:	e8 69 1d fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001e33f:	5d                   	pop    ebp
c001e340:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001e342 <Computer::~Computer()>:
c001e342:	83 ec 0c             	sub    esp,0xc
c001e345:	ba b8 fd 01 c0       	mov    edx,0xc001fdb8
c001e34a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e34e:	89 10                	mov    DWORD PTR [eax],edx
c001e350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e354:	83 ec 0c             	sub    esp,0xc
c001e357:	50                   	push   eax
c001e358:	e8 57 20 ff ff       	call   c00103b4 <Device::~Device()>
c001e35d:	83 c4 10             	add    esp,0x10
c001e360:	90                   	nop
c001e361:	83 c4 0c             	add    esp,0xc
c001e364:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001e366 <Computer::~Computer()>:
c001e366:	83 ec 0c             	sub    esp,0xc
c001e369:	83 ec 0c             	sub    esp,0xc
c001e36c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e370:	e8 cd ff ff ff       	call   c001e342 <Computer::~Computer()>
c001e375:	83 c4 10             	add    esp,0x10
c001e378:	83 ec 08             	sub    esp,0x8
c001e37b:	68 ec 01 00 00       	push   0x1ec
c001e380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e384:	e8 8e 0e ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c001e389:	83 c4 10             	add    esp,0x10
c001e38c:	83 c4 0c             	add    esp,0xc
c001e38f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001e390 <idleCommon()>:
c001e390:	83 ec 0c             	sub    esp,0xc
c001e393:	e8 70 92 ff ff       	call   c0017608 <lockScheduler()>
c001e398:	e8 9f 95 ff ff       	call   c001793c <schedule()>
c001e39d:	83 c4 0c             	add    esp,0xc
c001e3a0:	e9 65 92 ff ff       	jmp    c001760a <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001e3a5 <CPU::readCR0()>:
c001e3a5:	83 ec 10             	sub    esp,0x10
c001e3a8:	0f 20 c0             	mov    eax,cr0
c001e3ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e3af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e3b3:	83 c4 10             	add    esp,0x10
c001e3b6:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001e3b7 <CPU::readCR2()>:
c001e3b7:	83 ec 10             	sub    esp,0x10
c001e3ba:	0f 20 d0             	mov    eax,cr2
c001e3bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e3c1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e3c5:	83 c4 10             	add    esp,0x10
c001e3c8:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001e3c9 <CPU::readCR3()>:
c001e3c9:	83 ec 10             	sub    esp,0x10
c001e3cc:	0f 20 d8             	mov    eax,cr3
c001e3cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e3d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e3d7:	83 c4 10             	add    esp,0x10
c001e3da:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001e3db <CPU::readCR4()>:
c001e3db:	83 ec 10             	sub    esp,0x10
c001e3de:	0f 20 e0             	mov    eax,cr4
c001e3e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e3e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e3e9:	83 c4 10             	add    esp,0x10
c001e3ec:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001e3ed <CPU::writeCR3(unsigned long)>:
c001e3ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e3f1:	0f 22 d8             	mov    cr3,eax
c001e3f4:	90                   	nop
c001e3f5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001e3f6 <LinkedList<UnixFile>::~LinkedList()>:
c001e3f6:	90                   	nop
c001e3f7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001e3f8 <LinkedList<UnixFile>::LinkedList()>:
c001e3f8:	83 ec 0c             	sub    esp,0xc
c001e3fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e405:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e409:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e414:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e41b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e41f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e429:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e430:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e434:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e43b:	83 ec 0c             	sub    esp,0xc
c001e43e:	68 44 03 02 c0       	push   0xc0020344
c001e443:	e8 ee d6 fe ff       	call   c000bb36 <kprintf(char const*, ...)>
c001e448:	83 c4 10             	add    esp,0x10
c001e44b:	90                   	nop
c001e44c:	83 c4 0c             	add    esp,0xc
c001e44f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001e450 <LinkedList<UnixFile>::getFirstElement()>:
c001e450:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e454:	8b 00                	mov    eax,DWORD PTR [eax]
c001e456:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001e458 <LinkedList<UnixFile>::removeFirst()>:
c001e458:	83 ec 0c             	sub    esp,0xc
c001e45b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e45f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e461:	85 c0                	test   eax,eax
c001e463:	75 12                	jne    c001e477 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001e465:	83 ec 0c             	sub    esp,0xc
c001e468:	68 60 03 02 c0       	push   0xc0020360
c001e46d:	e8 e2 d7 fe ff       	call   c000bc54 <panic(char const*)>
c001e472:	83 c4 10             	add    esp,0x10
c001e475:	eb 7e                	jmp    c001e4f5 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001e477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e47b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e47e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e481:	85 c0                	test   eax,eax
c001e483:	74 10                	je     c001e495 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001e485:	83 ec 0c             	sub    esp,0xc
c001e488:	68 ab 03 02 c0       	push   0xc00203ab
c001e48d:	e8 c2 d7 fe ff       	call   c000bc54 <panic(char const*)>
c001e492:	83 c4 10             	add    esp,0x10
c001e495:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e499:	8b 00                	mov    eax,DWORD PTR [eax]
c001e49b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e49e:	85 c0                	test   eax,eax
c001e4a0:	75 33                	jne    c001e4d5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001e4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4a6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e4ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4b0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e4b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4bb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e4be:	83 f8 01             	cmp    eax,0x1
c001e4c1:	74 21                	je     c001e4e4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e4c3:	83 ec 0c             	sub    esp,0xc
c001e4c6:	68 84 03 02 c0       	push   0xc0020384
c001e4cb:	e8 84 d7 fe ff       	call   c000bc54 <panic(char const*)>
c001e4d0:	83 c4 10             	add    esp,0x10
c001e4d3:	eb 0f                	jmp    c001e4e4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001e4d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4d9:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4db:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e4de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4e2:	89 10                	mov    DWORD PTR [eax],edx
c001e4e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4e8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e4eb:	8d 50 ff             	lea    edx,[eax-0x1]
c001e4ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4f2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e4f5:	83 c4 0c             	add    esp,0xc
c001e4f8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001e4fa <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001e4fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e4fe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e501:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001e502 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001e502:	83 ec 1c             	sub    esp,0x1c
c001e505:	83 ec 0c             	sub    esp,0xc
c001e508:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e50c:	e8 3f ff ff ff       	call   c001e450 <LinkedList<UnixFile>::getFirstElement()>
c001e511:	83 c4 10             	add    esp,0x10
c001e514:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e518:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e51d:	74 43                	je     c001e562 <LinkedList<UnixFile>::addElement(UnixFile*)+0x60>
c001e51f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e523:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c001e527:	75 20                	jne    c001e549 <LinkedList<UnixFile>::addElement(UnixFile*)+0x47>
c001e529:	83 ec 0c             	sub    esp,0xc
c001e52c:	68 b3 03 02 c0       	push   0xc00203b3
c001e531:	e8 00 d6 fe ff       	call   c000bb36 <kprintf(char const*, ...)>
c001e536:	83 c4 10             	add    esp,0x10
c001e539:	83 ec 0c             	sub    esp,0xc
c001e53c:	68 ca 03 02 c0       	push   0xc00203ca
c001e541:	e8 0e d7 fe ff       	call   c000bc54 <panic(char const*)>
c001e546:	83 c4 10             	add    esp,0x10
c001e549:	83 ec 08             	sub    esp,0x8
c001e54c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e550:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e554:	e8 a1 ff ff ff       	call   c001e4fa <LinkedList<UnixFile>::getNext(UnixFile*)>
c001e559:	83 c4 10             	add    esp,0x10
c001e55c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e560:	eb b6                	jmp    c001e518 <LinkedList<UnixFile>::addElement(UnixFile*)+0x16>
c001e562:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e567:	75 10                	jne    c001e579 <LinkedList<UnixFile>::addElement(UnixFile*)+0x77>
c001e569:	83 ec 0c             	sub    esp,0xc
c001e56c:	68 f8 03 02 c0       	push   0xc00203f8
c001e571:	e8 de d6 fe ff       	call   c000bc54 <panic(char const*)>
c001e576:	83 c4 10             	add    esp,0x10
c001e579:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e57d:	8b 00                	mov    eax,DWORD PTR [eax]
c001e57f:	85 c0                	test   eax,eax
c001e581:	74 34                	je     c001e5b7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xb5>
c001e583:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e587:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e58a:	85 c0                	test   eax,eax
c001e58c:	74 29                	je     c001e5b7 <LinkedList<UnixFile>::addElement(UnixFile*)+0xb5>
c001e58e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e592:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e595:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e599:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e59c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5a0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e5a4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e5a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5ab:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e5ae:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e5b5:	eb 65                	jmp    c001e61c <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001e5b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5bb:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5bd:	85 c0                	test   eax,eax
c001e5bf:	75 4b                	jne    c001e60c <LinkedList<UnixFile>::addElement(UnixFile*)+0x10a>
c001e5c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e5c8:	85 c0                	test   eax,eax
c001e5ca:	75 40                	jne    c001e60c <LinkedList<UnixFile>::addElement(UnixFile*)+0x10a>
c001e5cc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5d0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e5d4:	89 10                	mov    DWORD PTR [eax],edx
c001e5d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5da:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e5de:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e5e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5e5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e5e8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e5ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e5f3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e5f6:	85 c0                	test   eax,eax
c001e5f8:	74 22                	je     c001e61c <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001e5fa:	83 ec 0c             	sub    esp,0xc
c001e5fd:	68 e2 03 02 c0       	push   0xc00203e2
c001e602:	e8 4d d6 fe ff       	call   c000bc54 <panic(char const*)>
c001e607:	83 c4 10             	add    esp,0x10
c001e60a:	eb 10                	jmp    c001e61c <LinkedList<UnixFile>::addElement(UnixFile*)+0x11a>
c001e60c:	83 ec 0c             	sub    esp,0xc
c001e60f:	68 ec 03 02 c0       	push   0xc00203ec
c001e614:	e8 3b d6 fe ff       	call   c000bc54 <panic(char const*)>
c001e619:	83 c4 10             	add    esp,0x10
c001e61c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e620:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e623:	8d 50 01             	lea    edx,[eax+0x1]
c001e626:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e62a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e62d:	90                   	nop
c001e62e:	83 c4 1c             	add    esp,0x1c
c001e631:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001e632 <DriverlessDevice::~DriverlessDevice()>:
c001e632:	ba a4 09 02 c0       	mov    edx,0xc00209a4
c001e637:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e63b:	89 10                	mov    DWORD PTR [eax],edx
c001e63d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e641:	50                   	push   eax
c001e642:	e8 6d 1d ff ff       	call   c00103b4 <Device::~Device()>
c001e647:	83 c4 04             	add    esp,0x4
c001e64a:	90                   	nop
c001e64b:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001e64c <DriverlessDevice::~DriverlessDevice()>:
c001e64c:	83 ec 0c             	sub    esp,0xc
c001e64f:	83 ec 0c             	sub    esp,0xc
c001e652:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e656:	e8 d7 ff ff ff       	call   c001e632 <DriverlessDevice::~DriverlessDevice()>
c001e65b:	83 c4 10             	add    esp,0x10
c001e65e:	83 ec 08             	sub    esp,0x8
c001e661:	68 58 01 00 00       	push   0x158
c001e666:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e66a:	e8 a8 0b ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c001e66f:	83 c4 10             	add    esp,0x10
c001e672:	83 c4 0c             	add    esp,0xc
c001e675:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001e676 <LinkedList<Device>::addElement(Device*)>:
c001e676:	83 ec 0c             	sub    esp,0xc
c001e679:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001e67e:	75 10                	jne    c001e690 <LinkedList<Device>::addElement(Device*)+0x1a>
c001e680:	83 ec 0c             	sub    esp,0xc
c001e683:	68 f8 03 02 c0       	push   0xc00203f8
c001e688:	e8 c7 d5 fe ff       	call   c000bc54 <panic(char const*)>
c001e68d:	83 c4 10             	add    esp,0x10
c001e690:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e694:	8b 00                	mov    eax,DWORD PTR [eax]
c001e696:	85 c0                	test   eax,eax
c001e698:	74 3a                	je     c001e6d4 <LinkedList<Device>::addElement(Device*)+0x5e>
c001e69a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e69e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e6a1:	85 c0                	test   eax,eax
c001e6a3:	74 2f                	je     c001e6d4 <LinkedList<Device>::addElement(Device*)+0x5e>
c001e6a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e6ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e6b0:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001e6b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6ba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e6be:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e6c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6c5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e6c8:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e6d2:	eb 68                	jmp    c001e73c <LinkedList<Device>::addElement(Device*)+0xc6>
c001e6d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6d8:	8b 00                	mov    eax,DWORD PTR [eax]
c001e6da:	85 c0                	test   eax,eax
c001e6dc:	75 4e                	jne    c001e72c <LinkedList<Device>::addElement(Device*)+0xb6>
c001e6de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e6e5:	85 c0                	test   eax,eax
c001e6e7:	75 43                	jne    c001e72c <LinkedList<Device>::addElement(Device*)+0xb6>
c001e6e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e6f1:	89 10                	mov    DWORD PTR [eax],edx
c001e6f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6f7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e6fb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e6fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e702:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e705:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001e70f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e713:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e716:	85 c0                	test   eax,eax
c001e718:	74 22                	je     c001e73c <LinkedList<Device>::addElement(Device*)+0xc6>
c001e71a:	83 ec 0c             	sub    esp,0xc
c001e71d:	68 e2 03 02 c0       	push   0xc00203e2
c001e722:	e8 2d d5 fe ff       	call   c000bc54 <panic(char const*)>
c001e727:	83 c4 10             	add    esp,0x10
c001e72a:	eb 10                	jmp    c001e73c <LinkedList<Device>::addElement(Device*)+0xc6>
c001e72c:	83 ec 0c             	sub    esp,0xc
c001e72f:	68 ec 03 02 c0       	push   0xc00203ec
c001e734:	e8 1b d5 fe ff       	call   c000bc54 <panic(char const*)>
c001e739:	83 c4 10             	add    esp,0x10
c001e73c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e740:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e743:	8d 50 01             	lea    edx,[eax+0x1]
c001e746:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e74a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e74d:	90                   	nop
c001e74e:	83 c4 0c             	add    esp,0xc
c001e751:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001e752 <LinkedList<Device>::LinkedList()>:
c001e752:	83 ec 0c             	sub    esp,0xc
c001e755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e759:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e75f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e763:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e76a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e76e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e775:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e779:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e77f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e783:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e78a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e78e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e795:	83 ec 0c             	sub    esp,0xc
c001e798:	68 44 03 02 c0       	push   0xc0020344
c001e79d:	e8 94 d3 fe ff       	call   c000bb36 <kprintf(char const*, ...)>
c001e7a2:	83 c4 10             	add    esp,0x10
c001e7a5:	90                   	nop
c001e7a6:	83 c4 0c             	add    esp,0xc
c001e7a9:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001e7aa <CPU::readDR0()>:
c001e7aa:	83 ec 10             	sub    esp,0x10
c001e7ad:	0f 21 c0             	mov    eax,db0
c001e7b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e7b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e7b8:	83 c4 10             	add    esp,0x10
c001e7bb:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001e7bc <CPU::readDR1()>:
c001e7bc:	83 ec 10             	sub    esp,0x10
c001e7bf:	0f 21 c8             	mov    eax,db1
c001e7c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e7c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e7ca:	83 c4 10             	add    esp,0x10
c001e7cd:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001e7ce <CPU::readDR2()>:
c001e7ce:	83 ec 10             	sub    esp,0x10
c001e7d1:	0f 21 d0             	mov    eax,db2
c001e7d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e7d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e7dc:	83 c4 10             	add    esp,0x10
c001e7df:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001e7e0 <CPU::readDR3()>:
c001e7e0:	83 ec 10             	sub    esp,0x10
c001e7e3:	0f 21 d8             	mov    eax,db3
c001e7e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e7ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e7ee:	83 c4 10             	add    esp,0x10
c001e7f1:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001e7f2 <CPU::readDR6()>:
c001e7f2:	83 ec 10             	sub    esp,0x10
c001e7f5:	0f 21 f0             	mov    eax,db6
c001e7f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e7fc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e800:	83 c4 10             	add    esp,0x10
c001e803:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001e804 <CPU::readDR7()>:
c001e804:	83 ec 10             	sub    esp,0x10
c001e807:	0f 21 f8             	mov    eax,db7
c001e80a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e80e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e812:	83 c4 10             	add    esp,0x10
c001e815:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001e816 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001e816:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e81a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e81c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001e81e <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001e81e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e822:	8b 00                	mov    eax,DWORD PTR [eax]
c001e824:	85 c0                	test   eax,eax
c001e826:	75 0e                	jne    c001e836 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e828:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e82c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e82f:	85 c0                	test   eax,eax
c001e831:	75 03                	jne    c001e836 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001e833:	b0 01                	mov    al,0x1
c001e835:	c3                   	ret    
c001e836:	b0 00                	mov    al,0x0
c001e838:	90                   	nop
c001e839:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001e83a <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001e83a:	83 ec 0c             	sub    esp,0xc
c001e83d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e841:	8b 00                	mov    eax,DWORD PTR [eax]
c001e843:	85 c0                	test   eax,eax
c001e845:	75 15                	jne    c001e85c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001e847:	83 ec 0c             	sub    esp,0xc
c001e84a:	68 60 03 02 c0       	push   0xc0020360
c001e84f:	e8 00 d4 fe ff       	call   c000bc54 <panic(char const*)>
c001e854:	83 c4 10             	add    esp,0x10
c001e857:	e9 88 00 00 00       	jmp    c001e8e4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001e85c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e860:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e863:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e866:	85 c0                	test   eax,eax
c001e868:	0f 95 c0             	setne  al
c001e86b:	84 c0                	test   al,al
c001e86d:	74 10                	je     c001e87f <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001e86f:	83 ec 0c             	sub    esp,0xc
c001e872:	68 ab 03 02 c0       	push   0xc00203ab
c001e877:	e8 d8 d3 fe ff       	call   c000bc54 <panic(char const*)>
c001e87c:	83 c4 10             	add    esp,0x10
c001e87f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e883:	8b 00                	mov    eax,DWORD PTR [eax]
c001e885:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e888:	85 c0                	test   eax,eax
c001e88a:	0f 94 c0             	sete   al
c001e88d:	84 c0                	test   al,al
c001e88f:	74 33                	je     c001e8c4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001e891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e895:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001e89b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e89f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e8a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8aa:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e8ad:	83 f8 01             	cmp    eax,0x1
c001e8b0:	74 21                	je     c001e8d3 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001e8b2:	83 ec 0c             	sub    esp,0xc
c001e8b5:	68 84 03 02 c0       	push   0xc0020384
c001e8ba:	e8 95 d3 fe ff       	call   c000bc54 <panic(char const*)>
c001e8bf:	83 c4 10             	add    esp,0x10
c001e8c2:	eb 0f                	jmp    c001e8d3 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001e8c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8c8:	8b 00                	mov    eax,DWORD PTR [eax]
c001e8ca:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e8cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8d1:	89 10                	mov    DWORD PTR [eax],edx
c001e8d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e8da:	8d 50 ff             	lea    edx,[eax-0x1]
c001e8dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8e1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e8e4:	83 c4 0c             	add    esp,0xc
c001e8e7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001e8e8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001e8e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e8ec:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001e8ef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001e8f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001e8f0:	83 ec 1c             	sub    esp,0x1c
c001e8f3:	83 ec 0c             	sub    esp,0xc
c001e8f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e8fa:	e8 17 ff ff ff       	call   c001e816 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8ff:	83 c4 10             	add    esp,0x10
c001e902:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e906:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001e90b:	74 43                	je     c001e950 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x60>
c001e90d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e911:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
c001e915:	75 20                	jne    c001e937 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x47>
c001e917:	83 ec 0c             	sub    esp,0xc
c001e91a:	68 b3 03 02 c0       	push   0xc00203b3
c001e91f:	e8 12 d2 fe ff       	call   c000bb36 <kprintf(char const*, ...)>
c001e924:	83 c4 10             	add    esp,0x10
c001e927:	83 ec 0c             	sub    esp,0xc
c001e92a:	68 ca 03 02 c0       	push   0xc00203ca
c001e92f:	e8 20 d3 fe ff       	call   c000bc54 <panic(char const*)>
c001e934:	83 c4 10             	add    esp,0x10
c001e937:	83 ec 08             	sub    esp,0x8
c001e93a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e93e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e942:	e8 a1 ff ff ff       	call   c001e8e8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e947:	83 c4 10             	add    esp,0x10
c001e94a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e94e:	eb b6                	jmp    c001e906 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x16>
c001e950:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001e955:	75 10                	jne    c001e967 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x77>
c001e957:	83 ec 0c             	sub    esp,0xc
c001e95a:	68 f8 03 02 c0       	push   0xc00203f8
c001e95f:	e8 f0 d2 fe ff       	call   c000bc54 <panic(char const*)>
c001e964:	83 c4 10             	add    esp,0x10
c001e967:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e96b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e96d:	85 c0                	test   eax,eax
c001e96f:	74 34                	je     c001e9a5 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb5>
c001e971:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e975:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e978:	85 c0                	test   eax,eax
c001e97a:	74 29                	je     c001e9a5 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb5>
c001e97c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e980:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e983:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e987:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001e98a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e98e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e992:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e995:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e999:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e99c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e9a3:	eb 65                	jmp    c001ea0a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x11a>
c001e9a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9a9:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9ab:	85 c0                	test   eax,eax
c001e9ad:	75 4b                	jne    c001e9fa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x10a>
c001e9af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9b6:	85 c0                	test   eax,eax
c001e9b8:	75 40                	jne    c001e9fa <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x10a>
c001e9ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9be:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e9c2:	89 10                	mov    DWORD PTR [eax],edx
c001e9c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9c8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e9cc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e9cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001e9d6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e9dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e9e1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001e9e4:	85 c0                	test   eax,eax
c001e9e6:	74 22                	je     c001ea0a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x11a>
c001e9e8:	83 ec 0c             	sub    esp,0xc
c001e9eb:	68 e2 03 02 c0       	push   0xc00203e2
c001e9f0:	e8 5f d2 fe ff       	call   c000bc54 <panic(char const*)>
c001e9f5:	83 c4 10             	add    esp,0x10
c001e9f8:	eb 10                	jmp    c001ea0a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x11a>
c001e9fa:	83 ec 0c             	sub    esp,0xc
c001e9fd:	68 ec 03 02 c0       	push   0xc00203ec
c001ea02:	e8 4d d2 fe ff       	call   c000bc54 <panic(char const*)>
c001ea07:	83 c4 10             	add    esp,0x10
c001ea0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea0e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ea11:	8d 50 01             	lea    edx,[eax+0x1]
c001ea14:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ea18:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ea1b:	90                   	nop
c001ea1c:	83 c4 1c             	add    esp,0x1c
c001ea1f:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ea20 <ACPI::~ACPI()>:
c001ea20:	83 ec 0c             	sub    esp,0xc
c001ea23:	ba 08 11 02 c0       	mov    edx,0xc0021108
c001ea28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea2c:	89 10                	mov    DWORD PTR [eax],edx
c001ea2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea32:	83 ec 0c             	sub    esp,0xc
c001ea35:	50                   	push   eax
c001ea36:	e8 79 19 ff ff       	call   c00103b4 <Device::~Device()>
c001ea3b:	83 c4 10             	add    esp,0x10
c001ea3e:	90                   	nop
c001ea3f:	83 c4 0c             	add    esp,0xc
c001ea42:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001ea44 <ACPI::~ACPI()>:
c001ea44:	83 ec 0c             	sub    esp,0xc
c001ea47:	83 ec 0c             	sub    esp,0xc
c001ea4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea4e:	e8 cd ff ff ff       	call   c001ea20 <ACPI::~ACPI()>
c001ea53:	83 c4 10             	add    esp,0x10
c001ea56:	83 ec 08             	sub    esp,0x8
c001ea59:	68 68 22 00 00       	push   0x2268
c001ea5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea62:	e8 b0 07 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c001ea67:	83 c4 10             	add    esp,0x10
c001ea6a:	83 c4 0c             	add    esp,0xc
c001ea6d:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001ea6e <CPU::~CPU()>:
c001ea6e:	83 ec 0c             	sub    esp,0xc
c001ea71:	ba 58 13 02 c0       	mov    edx,0xc0021358
c001ea76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea7a:	89 10                	mov    DWORD PTR [eax],edx
c001ea7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea80:	83 ec 0c             	sub    esp,0xc
c001ea83:	50                   	push   eax
c001ea84:	e8 2b 19 ff ff       	call   c00103b4 <Device::~Device()>
c001ea89:	83 c4 10             	add    esp,0x10
c001ea8c:	90                   	nop
c001ea8d:	83 c4 0c             	add    esp,0xc
c001ea90:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001ea92 <CPU::~CPU()>:
c001ea92:	83 ec 0c             	sub    esp,0xc
c001ea95:	83 ec 0c             	sub    esp,0xc
c001ea98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ea9c:	e8 cd ff ff ff       	call   c001ea6e <CPU::~CPU()>
c001eaa1:	83 c4 10             	add    esp,0x10
c001eaa4:	83 ec 08             	sub    esp,0x8
c001eaa7:	68 98 11 00 00       	push   0x1198
c001eaac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eab0:	e8 62 07 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c001eab5:	83 c4 10             	add    esp,0x10
c001eab8:	83 c4 0c             	add    esp,0xc
c001eabb:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001eabc <CPU::writeDR7(unsigned long)>:
c001eabc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eac0:	0f 23 f8             	mov    db7,eax
c001eac3:	90                   	nop
c001eac4:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001eac5 <CPU::writeCR4(unsigned long)>:
c001eac5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eac9:	0f 22 e0             	mov    cr4,eax
c001eacc:	90                   	nop
c001eacd:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001eace <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001eace:	90                   	nop
c001eacf:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001ead0 <ThreadControlBlock::ThreadControlBlock()>:
c001ead0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ead4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001eadb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eadf:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001eae6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eaea:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001eaf1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eaf5:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001eafc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb00:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001eb04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb08:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001eb0c:	90                   	nop
c001eb0d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001eb0e <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001eb0e:	83 ec 0c             	sub    esp,0xc
c001eb11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb15:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eb1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb1f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eb26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb2a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eb31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb35:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001eb3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb3f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001eb46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb4a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001eb51:	83 ec 0c             	sub    esp,0xc
c001eb54:	68 44 03 02 c0       	push   0xc0020344
c001eb59:	e8 d8 cf fe ff       	call   c000bb36 <kprintf(char const*, ...)>
c001eb5e:	83 c4 10             	add    esp,0x10
c001eb61:	90                   	nop
c001eb62:	83 c4 0c             	add    esp,0xc
c001eb65:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001eb66 <PCI::~PCI()>:
c001eb66:	83 ec 0c             	sub    esp,0xc
c001eb69:	ba 60 1c 02 c0       	mov    edx,0xc0021c60
c001eb6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb72:	89 10                	mov    DWORD PTR [eax],edx
c001eb74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eb78:	83 ec 0c             	sub    esp,0xc
c001eb7b:	50                   	push   eax
c001eb7c:	e8 43 12 ff ff       	call   c000fdc4 <Bus::~Bus()>
c001eb81:	83 c4 10             	add    esp,0x10
c001eb84:	90                   	nop
c001eb85:	83 c4 0c             	add    esp,0xc
c001eb88:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001eb8a <PCI::~PCI()>:
c001eb8a:	83 ec 0c             	sub    esp,0xc
c001eb8d:	83 ec 0c             	sub    esp,0xc
c001eb90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eb94:	e8 cd ff ff ff       	call   c001eb66 <PCI::~PCI()>
c001eb99:	83 c4 10             	add    esp,0x10
c001eb9c:	83 ec 08             	sub    esp,0x8
c001eb9f:	68 58 01 00 00       	push   0x158
c001eba4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eba8:	e8 6a 06 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c001ebad:	83 c4 10             	add    esp,0x10
c001ebb0:	83 c4 0c             	add    esp,0xc
c001ebb3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001ebb4 <IDE::~IDE()>:
c001ebb4:	83 ec 0c             	sub    esp,0xc
c001ebb7:	ba c4 1e 02 c0       	mov    edx,0xc0021ec4
c001ebbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebc0:	89 10                	mov    DWORD PTR [eax],edx
c001ebc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ebc6:	83 ec 0c             	sub    esp,0xc
c001ebc9:	50                   	push   eax
c001ebca:	e8 fb 1c ff ff       	call   c00108ca <HardDiskController::~HardDiskController()>
c001ebcf:	83 c4 10             	add    esp,0x10
c001ebd2:	90                   	nop
c001ebd3:	83 c4 0c             	add    esp,0xc
c001ebd6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001ebd8 <IDE::~IDE()>:
c001ebd8:	83 ec 0c             	sub    esp,0xc
c001ebdb:	83 ec 0c             	sub    esp,0xc
c001ebde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebe2:	e8 cd ff ff ff       	call   c001ebb4 <IDE::~IDE()>
c001ebe7:	83 c4 10             	add    esp,0x10
c001ebea:	83 ec 08             	sub    esp,0x8
c001ebed:	68 70 02 00 00       	push   0x270
c001ebf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ebf6:	e8 1c 06 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c001ebfb:	83 c4 10             	add    esp,0x10
c001ebfe:	83 c4 0c             	add    esp,0xc
c001ec01:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001ec02 <ATA::~ATA()>:
c001ec02:	83 ec 0c             	sub    esp,0xc
c001ec05:	ba 14 1f 02 c0       	mov    edx,0xc0021f14
c001ec0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec0e:	89 10                	mov    DWORD PTR [eax],edx
c001ec10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec14:	83 ec 0c             	sub    esp,0xc
c001ec17:	50                   	push   eax
c001ec18:	e8 8b 1d ff ff       	call   c00109a8 <PhysicalDisk::~PhysicalDisk()>
c001ec1d:	83 c4 10             	add    esp,0x10
c001ec20:	90                   	nop
c001ec21:	83 c4 0c             	add    esp,0xc
c001ec24:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ec26 <ATA::~ATA()>:
c001ec26:	83 ec 0c             	sub    esp,0xc
c001ec29:	83 ec 0c             	sub    esp,0xc
c001ec2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec30:	e8 cd ff ff ff       	call   c001ec02 <ATA::~ATA()>
c001ec35:	83 c4 10             	add    esp,0x10
c001ec38:	83 ec 08             	sub    esp,0x8
c001ec3b:	68 7c 01 00 00       	push   0x17c
c001ec40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec44:	e8 ce 05 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c001ec49:	83 c4 10             	add    esp,0x10
c001ec4c:	83 c4 0c             	add    esp,0xc
c001ec4f:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ec50 <ATAPI::~ATAPI()>:
c001ec50:	83 ec 0c             	sub    esp,0xc
c001ec53:	ba 80 1f 02 c0       	mov    edx,0xc0021f80
c001ec58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec5c:	89 10                	mov    DWORD PTR [eax],edx
c001ec5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec62:	83 ec 0c             	sub    esp,0xc
c001ec65:	50                   	push   eax
c001ec66:	e8 3d 1d ff ff       	call   c00109a8 <PhysicalDisk::~PhysicalDisk()>
c001ec6b:	83 c4 10             	add    esp,0x10
c001ec6e:	90                   	nop
c001ec6f:	83 c4 0c             	add    esp,0xc
c001ec72:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001ec74 <ATAPI::~ATAPI()>:
c001ec74:	83 ec 0c             	sub    esp,0xc
c001ec77:	83 ec 0c             	sub    esp,0xc
c001ec7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec7e:	e8 cd ff ff ff       	call   c001ec50 <ATAPI::~ATAPI()>
c001ec83:	83 c4 10             	add    esp,0x10
c001ec86:	83 ec 08             	sub    esp,0x8
c001ec89:	68 80 01 00 00       	push   0x180
c001ec8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec92:	e8 80 05 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c001ec97:	83 c4 10             	add    esp,0x10
c001ec9a:	83 c4 0c             	add    esp,0xc
c001ec9d:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c001ec9e <AVX::~AVX()>:
c001ec9e:	83 ec 0c             	sub    esp,0xc
c001eca1:	ba bc 1f 02 c0       	mov    edx,0xc0021fbc
c001eca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecaa:	89 10                	mov    DWORD PTR [eax],edx
c001ecac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecb0:	83 ec 0c             	sub    esp,0xc
c001ecb3:	50                   	push   eax
c001ecb4:	e8 73 1d ff ff       	call   c0010a2c <FPU::~FPU()>
c001ecb9:	83 c4 10             	add    esp,0x10
c001ecbc:	90                   	nop
c001ecbd:	83 c4 0c             	add    esp,0xc
c001ecc0:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c001ecc2 <AVX::~AVX()>:
c001ecc2:	83 ec 0c             	sub    esp,0xc
c001ecc5:	83 ec 0c             	sub    esp,0xc
c001ecc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eccc:	e8 cd ff ff ff       	call   c001ec9e <AVX::~AVX()>
c001ecd1:	83 c4 10             	add    esp,0x10
c001ecd4:	83 ec 08             	sub    esp,0x8
c001ecd7:	68 58 01 00 00       	push   0x158
c001ecdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ece0:	e8 32 05 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c001ece5:	83 c4 10             	add    esp,0x10
c001ece8:	83 c4 0c             	add    esp,0xc
c001eceb:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c001ecec <MMX::~MMX()>:
c001ecec:	83 ec 0c             	sub    esp,0xc
c001ecef:	ba fc 1f 02 c0       	mov    edx,0xc0021ffc
c001ecf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf8:	89 10                	mov    DWORD PTR [eax],edx
c001ecfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecfe:	83 ec 0c             	sub    esp,0xc
c001ed01:	50                   	push   eax
c001ed02:	e8 25 1d ff ff       	call   c0010a2c <FPU::~FPU()>
c001ed07:	83 c4 10             	add    esp,0x10
c001ed0a:	90                   	nop
c001ed0b:	83 c4 0c             	add    esp,0xc
c001ed0e:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c001ed10 <MMX::~MMX()>:
c001ed10:	83 ec 0c             	sub    esp,0xc
c001ed13:	83 ec 0c             	sub    esp,0xc
c001ed16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed1a:	e8 cd ff ff ff       	call   c001ecec <MMX::~MMX()>
c001ed1f:	83 c4 10             	add    esp,0x10
c001ed22:	83 ec 08             	sub    esp,0x8
c001ed25:	68 58 01 00 00       	push   0x158
c001ed2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed2e:	e8 e4 04 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c001ed33:	83 c4 10             	add    esp,0x10
c001ed36:	83 c4 0c             	add    esp,0xc
c001ed39:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c001ed3a <SSE::~SSE()>:
c001ed3a:	83 ec 0c             	sub    esp,0xc
c001ed3d:	ba 3c 20 02 c0       	mov    edx,0xc002203c
c001ed42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed46:	89 10                	mov    DWORD PTR [eax],edx
c001ed48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed4c:	83 ec 0c             	sub    esp,0xc
c001ed4f:	50                   	push   eax
c001ed50:	e8 d7 1c ff ff       	call   c0010a2c <FPU::~FPU()>
c001ed55:	83 c4 10             	add    esp,0x10
c001ed58:	90                   	nop
c001ed59:	83 c4 0c             	add    esp,0xc
c001ed5c:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c001ed5e <SSE::~SSE()>:
c001ed5e:	83 ec 0c             	sub    esp,0xc
c001ed61:	83 ec 0c             	sub    esp,0xc
c001ed64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed68:	e8 cd ff ff ff       	call   c001ed3a <SSE::~SSE()>
c001ed6d:	83 c4 10             	add    esp,0x10
c001ed70:	83 ec 08             	sub    esp,0x8
c001ed73:	68 58 01 00 00       	push   0x158
c001ed78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ed7c:	e8 96 04 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c001ed81:	83 c4 10             	add    esp,0x10
c001ed84:	83 c4 0c             	add    esp,0xc
c001ed87:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c001ed88 <x87::~x87()>:
c001ed88:	83 ec 0c             	sub    esp,0xc
c001ed8b:	ba 7c 20 02 c0       	mov    edx,0xc002207c
c001ed90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed94:	89 10                	mov    DWORD PTR [eax],edx
c001ed96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ed9a:	83 ec 0c             	sub    esp,0xc
c001ed9d:	50                   	push   eax
c001ed9e:	e8 89 1c ff ff       	call   c0010a2c <FPU::~FPU()>
c001eda3:	83 c4 10             	add    esp,0x10
c001eda6:	90                   	nop
c001eda7:	83 c4 0c             	add    esp,0xc
c001edaa:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c001edac <x87::~x87()>:
c001edac:	83 ec 0c             	sub    esp,0xc
c001edaf:	83 ec 0c             	sub    esp,0xc
c001edb2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edb6:	e8 cd ff ff ff       	call   c001ed88 <x87::~x87()>
c001edbb:	83 c4 10             	add    esp,0x10
c001edbe:	83 ec 08             	sub    esp,0x8
c001edc1:	68 58 01 00 00       	push   0x158
c001edc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001edca:	e8 48 04 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c001edcf:	83 c4 10             	add    esp,0x10
c001edd2:	83 c4 0c             	add    esp,0xc
c001edd5:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001edd6 <IOAPIC::~IOAPIC()>:
c001edd6:	83 ec 0c             	sub    esp,0xc
c001edd9:	ba d4 21 02 c0       	mov    edx,0xc00221d4
c001edde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ede2:	89 10                	mov    DWORD PTR [eax],edx
c001ede4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ede8:	83 ec 0c             	sub    esp,0xc
c001edeb:	50                   	push   eax
c001edec:	e8 c3 15 ff ff       	call   c00103b4 <Device::~Device()>
c001edf1:	83 c4 10             	add    esp,0x10
c001edf4:	90                   	nop
c001edf5:	83 c4 0c             	add    esp,0xc
c001edf8:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001edfa <IOAPIC::~IOAPIC()>:
c001edfa:	83 ec 0c             	sub    esp,0xc
c001edfd:	83 ec 0c             	sub    esp,0xc
c001ee00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee04:	e8 cd ff ff ff       	call   c001edd6 <IOAPIC::~IOAPIC()>
c001ee09:	83 c4 10             	add    esp,0x10
c001ee0c:	83 ec 08             	sub    esp,0x8
c001ee0f:	68 68 01 00 00       	push   0x168
c001ee14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee18:	e8 fa 03 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c001ee1d:	83 c4 10             	add    esp,0x10
c001ee20:	83 c4 0c             	add    esp,0xc
c001ee23:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c001ee24 <APIC::~APIC()>:
c001ee24:	83 ec 0c             	sub    esp,0xc
c001ee27:	ba 8c 21 02 c0       	mov    edx,0xc002218c
c001ee2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee30:	89 10                	mov    DWORD PTR [eax],edx
c001ee32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee36:	83 ec 0c             	sub    esp,0xc
c001ee39:	50                   	push   eax
c001ee3a:	e8 91 20 ff ff       	call   c0010ed0 <InterruptController::~InterruptController()>
c001ee3f:	83 c4 10             	add    esp,0x10
c001ee42:	90                   	nop
c001ee43:	83 c4 0c             	add    esp,0xc
c001ee46:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c001ee48 <APIC::~APIC()>:
c001ee48:	83 ec 0c             	sub    esp,0xc
c001ee4b:	83 ec 0c             	sub    esp,0xc
c001ee4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee52:	e8 cd ff ff ff       	call   c001ee24 <APIC::~APIC()>
c001ee57:	83 c4 10             	add    esp,0x10
c001ee5a:	83 ec 08             	sub    esp,0x8
c001ee5d:	68 58 21 00 00       	push   0x2158
c001ee62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ee66:	e8 ac 03 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c001ee6b:	83 c4 10             	add    esp,0x10
c001ee6e:	83 c4 0c             	add    esp,0xc
c001ee71:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c001ee72 <PIC::~PIC()>:
c001ee72:	83 ec 0c             	sub    esp,0xc
c001ee75:	ba 24 22 02 c0       	mov    edx,0xc0022224
c001ee7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee7e:	89 10                	mov    DWORD PTR [eax],edx
c001ee80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee84:	83 ec 0c             	sub    esp,0xc
c001ee87:	50                   	push   eax
c001ee88:	e8 43 20 ff ff       	call   c0010ed0 <InterruptController::~InterruptController()>
c001ee8d:	83 c4 10             	add    esp,0x10
c001ee90:	90                   	nop
c001ee91:	83 c4 0c             	add    esp,0xc
c001ee94:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c001ee96 <PIC::~PIC()>:
c001ee96:	83 ec 0c             	sub    esp,0xc
c001ee99:	83 ec 0c             	sub    esp,0xc
c001ee9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eea0:	e8 cd ff ff ff       	call   c001ee72 <PIC::~PIC()>
c001eea5:	83 c4 10             	add    esp,0x10
c001eea8:	83 ec 08             	sub    esp,0x8
c001eeab:	68 58 21 00 00       	push   0x2158
c001eeb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeb4:	e8 5e 03 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c001eeb9:	83 c4 10             	add    esp,0x10
c001eebc:	83 c4 0c             	add    esp,0xc
c001eebf:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001eec0 <APICTimer::~APICTimer()>:
c001eec0:	83 ec 0c             	sub    esp,0xc
c001eec3:	ba 78 22 02 c0       	mov    edx,0xc0022278
c001eec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eecc:	89 10                	mov    DWORD PTR [eax],edx
c001eece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eed2:	83 ec 0c             	sub    esp,0xc
c001eed5:	50                   	push   eax
c001eed6:	e8 c9 35 ff ff       	call   c00124a4 <Timer::~Timer()>
c001eedb:	83 c4 10             	add    esp,0x10
c001eede:	90                   	nop
c001eedf:	83 c4 0c             	add    esp,0xc
c001eee2:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001eee4 <APICTimer::~APICTimer()>:
c001eee4:	83 ec 0c             	sub    esp,0xc
c001eee7:	83 ec 0c             	sub    esp,0xc
c001eeea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eeee:	e8 cd ff ff ff       	call   c001eec0 <APICTimer::~APICTimer()>
c001eef3:	83 c4 10             	add    esp,0x10
c001eef6:	83 ec 08             	sub    esp,0x8
c001eef9:	68 60 01 00 00       	push   0x160
c001eefe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef02:	e8 10 03 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c001ef07:	83 c4 10             	add    esp,0x10
c001ef0a:	83 c4 0c             	add    esp,0xc
c001ef0d:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001ef0e <PIT::~PIT()>:
c001ef0e:	83 ec 0c             	sub    esp,0xc
c001ef11:	ba c8 22 02 c0       	mov    edx,0xc00222c8
c001ef16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef1a:	89 10                	mov    DWORD PTR [eax],edx
c001ef1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef20:	83 ec 0c             	sub    esp,0xc
c001ef23:	50                   	push   eax
c001ef24:	e8 7b 35 ff ff       	call   c00124a4 <Timer::~Timer()>
c001ef29:	83 c4 10             	add    esp,0x10
c001ef2c:	90                   	nop
c001ef2d:	83 c4 0c             	add    esp,0xc
c001ef30:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001ef32 <PIT::~PIT()>:
c001ef32:	83 ec 0c             	sub    esp,0xc
c001ef35:	83 ec 0c             	sub    esp,0xc
c001ef38:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef3c:	e8 cd ff ff ff       	call   c001ef0e <PIT::~PIT()>
c001ef41:	83 c4 10             	add    esp,0x10
c001ef44:	83 ec 08             	sub    esp,0x8
c001ef47:	68 5c 01 00 00       	push   0x15c
c001ef4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ef50:	e8 c2 02 ff ff       	call   c000f217 <operator delete(void*, unsigned long)>
c001ef55:	83 c4 10             	add    esp,0x10
c001ef58:	83 c4 0c             	add    esp,0xc
c001ef5b:	c3                   	ret    
