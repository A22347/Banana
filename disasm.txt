
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 ca c2 00 00       	call   c000c2ea <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 43 f7 01 00       	call   c001f768 <_init>
c0000025:	c3                   	ret    
c0000026:	bb f2 02 02 c0       	mov    ebx,0xc00202f2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb fc 02 02 c0    	cmp    ebx,0xc00202fc
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 cc 41 02 c0       	mov    eax,0xc00241cc
c0000049:	3d cc 41 02 c0       	cmp    eax,0xc00241cc
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 cc 41 02 c0       	push   0xc00241cc
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 cc 41 02 c0       	mov    eax,0xc00241cc
c0000075:	2d cc 41 02 c0       	sub    eax,0xc00241cc
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 cc 41 02 c0       	push   0xc00241cc
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 6c 43 02 c0 00 	cmp    BYTE PTR ds:0xc002436c,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 04 03 02 c0       	mov    ebx,0xc0020304
c00000bb:	81 eb 00 03 02 c0    	sub    ebx,0xc0020300
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 00 03 02 c0       	mov    esi,0xc0020300
c00000ca:	a1 70 43 02 c0       	mov    eax,ds:0xc0024370
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 70 43 02 c0       	mov    ds:0xc0024370,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 70 43 02 c0       	mov    eax,ds:0xc0024370
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 cc 41 02 c0       	push   0xc00241cc
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 6c 43 02 c0 01 	mov    BYTE PTR ds:0xc002436c,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 74 43 02 c0       	push   0xc0024374
c000012c:	68 cc 41 02 c0       	push   0xc00241cc
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <voodooXADD>:
c0000150:	55                   	push   ebp
c0000151:	89 e5                	mov    ebp,esp
c0000153:	60                   	pusha  
c0000154:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000157:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000015a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c000015d:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0000160:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c0000163:	89 35 fe 01 00 c0    	mov    DWORD PTR ds:0xc00001fe,esi
c0000169:	89 25 fa 01 00 c0    	mov    DWORD PTR ds:0xc00001fa,esp
c000016f:	60                   	pusha  
c0000170:	b0 90                	mov    al,0x90
c0000172:	b9 20 00 00 00       	mov    ecx,0x20
c0000177:	bf d1 01 00 c0       	mov    edi,0xc00001d1
c000017c:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000017e:	61                   	popa   
c000017f:	60                   	pusha  
c0000180:	89 d6                	mov    esi,edx
c0000182:	bf d1 01 00 c0       	mov    edi,0xc00001d1
c0000187:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000189:	61                   	popa   
c000018a:	60                   	pusha  
c000018b:	89 d6                	mov    esi,edx
c000018d:	bf e1 01 00 c0       	mov    edi,0xc00001e1
c0000192:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000194:	61                   	popa   
c0000195:	b1 90                	mov    cl,0x90
c0000197:	85 db                	test   ebx,ebx
c0000199:	74 06                	je     c00001a1 <voodooXADD.skipChange>
c000019b:	8a 8b d0 01 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffe30]

c00001a1 <voodooXADD.skipChange>:
c00001a1:	88 8b d1 01 00 c0    	mov    BYTE PTR [ebx-0x3ffffe2f],cl
c00001a7:	80 ab d2 01 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffe2e],0x3a
c00001ae:	88 8b e1 01 00 c0    	mov    BYTE PTR [ebx-0x3ffffe1f],cl
c00001b4:	80 ab e2 01 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffe1e],0xbe
c00001bb:	89 c4                	mov    esp,eax
c00001bd:	81 c4 10 00 00 00    	add    esp,0x10
c00001c3:	5f                   	pop    edi
c00001c4:	5e                   	pop    esi
c00001c5:	5d                   	pop    ebp
c00001c6:	5b                   	pop    ebx
c00001c7:	5b                   	pop    ebx
c00001c8:	5a                   	pop    edx
c00001c9:	59                   	pop    ecx
c00001ca:	58                   	pop    eax
c00001cb:	8b 25 fe 01 00 c0    	mov    esp,DWORD PTR ds:0xc00001fe

c00001d1 <voodooXADD.helper>:
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	8b 25 fa 01 00 c0    	mov    esp,DWORD PTR ds:0xc00001fa
c00001f7:	61                   	popa   
c00001f8:	c9                   	leave  
c00001f9:	c3                   	ret    

c00001fa <voodooXADD.oldStack>:
c00001fa:	00 00                	add    BYTE PTR [eax],al
	...

c00001fe <voodooXADD.newStack>:
c00001fe:	00 00                	add    BYTE PTR [eax],al
	...

c0000202 <doTPAUSE>:
c0000202:	fb                   	sti    
c0000203:	31 c0                	xor    eax,eax
c0000205:	31 d2                	xor    edx,edx
c0000207:	66 0f ae f0          	tpause eax
c000020b:	c3                   	ret    

c000020c <hasLegacyFPU>:
c000020c:	0f 20 c2             	mov    edx,cr0
c000020f:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000215:	0f 22 c2             	mov    cr0,edx
c0000218:	db e3                	fninit 
c000021a:	dd 3d 2f 02 00 c0    	fnstsw WORD PTR ds:0xc000022f
c0000220:	31 c0                	xor    eax,eax
c0000222:	66 81 3d 2f 02 00 c0 00 00 	cmp    WORD PTR ds:0xc000022f,0x0
c000022b:	75 01                	jne    c000022e <hasLegacyFPU.nofpu>

c000022d <hasLegacyFPU.hasfpu>:
c000022d:	40                   	inc    eax

c000022e <hasLegacyFPU.nofpu>:
c000022e:	c3                   	ret    

c000022f <testword>:
c000022f:	aa                   	stos   BYTE PTR es:[edi],al
c0000230:	55                   	push   ebp

c0000231 <is486>:
c0000231:	0f 09                	wbinvd 
c0000233:	31 c0                	xor    eax,eax
c0000235:	40                   	inc    eax
c0000236:	c3                   	ret    
c0000237:	90                   	nop
c0000238:	90                   	nop
c0000239:	90                   	nop
c000023a:	90                   	nop
c000023b:	90                   	nop
c000023c:	90                   	nop
c000023d:	90                   	nop
c000023e:	90                   	nop
c000023f:	90                   	nop
c0000240:	90                   	nop
c0000241:	90                   	nop
c0000242:	90                   	nop
c0000243:	90                   	nop
c0000244:	90                   	nop
c0000245:	90                   	nop
c0000246:	90                   	nop
c0000247:	90                   	nop
c0000248:	90                   	nop
c0000249:	90                   	nop
c000024a:	90                   	nop
c000024b:	90                   	nop
c000024c:	90                   	nop
c000024d:	90                   	nop
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	31 c0                	xor    eax,eax
c0000266:	c3                   	ret    

c0000267 <goToVM86>:
c0000267:	fa                   	cli    
c0000268:	55                   	push   ebp
c0000269:	89 e5                	mov    ebp,esp
c000026b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000026e:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000271:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000274:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000277:	25 ff ff 00 00       	and    eax,0xffff
c000027c:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000282:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0000288:	81 e2 ff ff 00 00    	and    edx,0xffff
c000028e:	52                   	push   edx
c000028f:	51                   	push   ecx
c0000290:	68 02 02 02 00       	push   0x20202
c0000295:	53                   	push   ebx
c0000296:	50                   	push   eax
c0000297:	cf                   	iret   

c0000298 <goToUsermode>:
c0000298:	0f c3 1d 00 00 00 c0 	movnti DWORD PTR ds:0xc0000000,ebx
c000029f:	fa                   	cli    
c00002a0:	55                   	push   ebp
c00002a1:	89 e5                	mov    ebp,esp
c00002a3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00002a6:	66 b8 23 00          	mov    ax,0x23
c00002aa:	66 8e d8             	mov    ds,ax
c00002ad:	66 8e c0             	mov    es,ax
c00002b0:	66 8e e0             	mov    fs,ax
c00002b3:	66 8e e8             	mov    gs,ax
c00002b6:	89 e0                	mov    eax,esp
c00002b8:	68 23 00 00 00       	push   0x23
c00002bd:	50                   	push   eax
c00002be:	68 02 02 00 00       	push   0x202
c00002c3:	68 1b 00 00 00       	push   0x1b
c00002c8:	53                   	push   ebx
c00002c9:	cf                   	iret   

c00002ca <switchToThreadASMFirstTime>:
c00002ca:	9c                   	pushf  
c00002cb:	fa                   	cli    
c00002cc:	50                   	push   eax
c00002cd:	53                   	push   ebx
c00002ce:	51                   	push   ecx
c00002cf:	52                   	push   edx
c00002d0:	56                   	push   esi
c00002d1:	57                   	push   edi
c00002d2:	55                   	push   ebp
c00002d3:	e9 11 00 00 00       	jmp    c00002e9 <commonThreadSwitch>

c00002d8 <switchToThreadASM>:
c00002d8:	9c                   	pushf  
c00002d9:	50                   	push   eax
c00002da:	53                   	push   ebx
c00002db:	51                   	push   ecx
c00002dc:	52                   	push   edx
c00002dd:	56                   	push   esi
c00002de:	57                   	push   edi
c00002df:	55                   	push   ebp
c00002e0:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002e6:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002e9 <commonThreadSwitch>:
c00002e9:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ed:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002f3:	8b 06                	mov    eax,DWORD PTR [esi]
c00002f5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002f8:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002fb:	0f 20 d9             	mov    ecx,cr3
c00002fe:	39 c8                	cmp    eax,ecx
c0000300:	74 03                	je     c0000305 <commonThreadSwitch.doneVAS>
c0000302:	0f 22 d8             	mov    cr3,eax

c0000305 <commonThreadSwitch.doneVAS>:
c0000305:	85 d2                	test   edx,edx
c0000307:	74 4e                	je     c0000357 <commonThreadSwitch.notFirstTime>
c0000309:	fa                   	cli    
c000030a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000030d:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c0000312:	60                   	pusha  
c0000313:	e8 88 ec 00 00       	call   c000efa0 <mapVASFirstTime>
c0000318:	61                   	popa   
c0000319:	89 c4                	mov    esp,eax
c000031b:	56                   	push   esi
c000031c:	52                   	push   edx
c000031d:	e8 32 83 01 00       	call   c0018654 <changeTSS>
c0000322:	5a                   	pop    edx
c0000323:	5e                   	pop    esi
c0000324:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c000032b:	81 fa 01 00 00 00    	cmp    edx,0x1
c0000331:	74 39                	je     c000036c <commonThreadSwitch.cameOffAFork>
c0000333:	5d                   	pop    ebp
c0000334:	5f                   	pop    edi
c0000335:	5e                   	pop    esi
c0000336:	59                   	pop    ecx
c0000337:	59                   	pop    ecx
c0000338:	5b                   	pop    ebx
c0000339:	58                   	pop    eax
c000033a:	81 c4 04 00 00 00    	add    esp,0x4
c0000340:	6a 02                	push   0x2
c0000342:	9d                   	popf   
c0000343:	52                   	push   edx
c0000344:	e8 38 87 01 00       	call   c0018a81 <taskStartupFunction>
c0000349:	5a                   	pop    edx
c000034a:	50                   	push   eax
c000034b:	ff d2                	call   edx
c000034d:	e8 ed 8c 01 00       	call   c001903f <taskReturned>
c0000352:	e9 fb ff ff ff       	jmp    c0000352 <commonThreadSwitch.doneVAS+0x4d>

c0000357 <commonThreadSwitch.notFirstTime>:
c0000357:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000035a:	56                   	push   esi
c000035b:	52                   	push   edx
c000035c:	e8 f3 82 01 00       	call   c0018654 <changeTSS>
c0000361:	5a                   	pop    edx
c0000362:	5e                   	pop    esi
c0000363:	5d                   	pop    ebp
c0000364:	5f                   	pop    edi
c0000365:	5e                   	pop    esi
c0000366:	5a                   	pop    edx
c0000367:	59                   	pop    ecx
c0000368:	5b                   	pop    ebx
c0000369:	58                   	pop    eax
c000036a:	9d                   	popf   
c000036b:	c3                   	ret    

c000036c <commonThreadSwitch.cameOffAFork>:
c000036c:	31 c0                	xor    eax,eax
c000036e:	31 d2                	xor    edx,edx
c0000370:	8b 66 1c             	mov    esp,DWORD PTR [esi+0x1c]
c0000373:	e9 a2 02 00 00       	jmp    c000061a <offAForkJumpThingy>

c0000378 <detectCPUID>:
c0000378:	9c                   	pushf  
c0000379:	9c                   	pushf  
c000037a:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000381:	9d                   	popf   
c0000382:	9c                   	pushf  
c0000383:	58                   	pop    eax
c0000384:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000387:	9d                   	popf   
c0000388:	25 00 00 20 00       	and    eax,0x200000
c000038d:	c3                   	ret    

c000038e <asmQuickAcquireLock>:
c000038e:	55                   	push   ebp
c000038f:	89 e5                	mov    ebp,esp
c0000391:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000394 <asmQuickAcquireLock.retry>:
c0000394:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000399:	72 02                	jb     c000039d <asmQuickAcquireLock.spin_with_pause>
c000039b:	fa                   	cli    
c000039c:	c3                   	ret    

c000039d <asmQuickAcquireLock.spin_with_pause>:
c000039d:	f3 90                	pause  
c000039f:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003a5:	75 f6                	jne    c000039d <asmQuickAcquireLock.spin_with_pause>
c00003a7:	e9 e8 ff ff ff       	jmp    c0000394 <asmQuickAcquireLock.retry>

c00003ac <asmQuickReleaseLock>:
c00003ac:	55                   	push   ebp
c00003ad:	89 e5                	mov    ebp,esp
c00003af:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00003b6:	5d                   	pop    ebp
c00003b7:	c3                   	ret    

c00003b8 <asmAcquireLock>:
c00003b8:	55                   	push   ebp
c00003b9:	89 e5                	mov    ebp,esp
c00003bb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003be <asmAcquireLock.retry>:
c00003be:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003c3:	72 05                	jb     c00003ca <asmAcquireLock.spin_with_pause>
c00003c5:	9c                   	pushf  
c00003c6:	58                   	pop    eax
c00003c7:	fa                   	cli    
c00003c8:	5d                   	pop    ebp
c00003c9:	c3                   	ret    

c00003ca <asmAcquireLock.spin_with_pause>:
c00003ca:	f3 90                	pause  
c00003cc:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c00003d2:	75 f6                	jne    c00003ca <asmAcquireLock.spin_with_pause>
c00003d4:	e9 e5 ff ff ff       	jmp    c00003be <asmAcquireLock.retry>

c00003d9 <asmReleaseLock>:
c00003d9:	55                   	push   ebp
c00003da:	89 e5                	mov    ebp,esp
c00003dc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00003df:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00003e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00003e8:	52                   	push   edx
c00003e9:	9d                   	popf   
c00003ea:	5d                   	pop    ebp
c00003eb:	c3                   	ret    

c00003ec <loadGDT>:
c00003ec:	0f 01 15 b0 47 02 c0 	lgdtd  ds:0xc00247b0
c00003f3:	66 b8 10 00          	mov    ax,0x10
c00003f7:	66 8e d8             	mov    ds,ax
c00003fa:	66 8e c0             	mov    es,ax
c00003fd:	66 8e e0             	mov    fs,ax
c0000400:	66 8e e8             	mov    gs,ax
c0000403:	66 8e d0             	mov    ss,ax
c0000406:	e9 00 00 00 00       	jmp    c000040b <flush2>

c000040b <flush2>:
c000040b:	c3                   	ret    

c000040c <isr0>:
c000040c:	fa                   	cli    
c000040d:	68 00 00 00 00       	push   0x0
c0000412:	68 00 00 00 00       	push   0x0
c0000417:	e9 a2 01 00 00       	jmp    c00005be <int_common_stub>

c000041c <isr1>:
c000041c:	fa                   	cli    
c000041d:	6a 00                	push   0x0
c000041f:	6a 01                	push   0x1
c0000421:	e9 98 01 00 00       	jmp    c00005be <int_common_stub>

c0000426 <isr2>:
c0000426:	fa                   	cli    
c0000427:	6a 00                	push   0x0
c0000429:	6a 02                	push   0x2
c000042b:	e9 8e 01 00 00       	jmp    c00005be <int_common_stub>

c0000430 <isr3>:
c0000430:	fa                   	cli    
c0000431:	6a 00                	push   0x0
c0000433:	6a 03                	push   0x3
c0000435:	e9 84 01 00 00       	jmp    c00005be <int_common_stub>

c000043a <isr4>:
c000043a:	fa                   	cli    
c000043b:	6a 00                	push   0x0
c000043d:	6a 04                	push   0x4
c000043f:	e9 7a 01 00 00       	jmp    c00005be <int_common_stub>

c0000444 <isr5>:
c0000444:	fa                   	cli    
c0000445:	6a 00                	push   0x0
c0000447:	6a 05                	push   0x5
c0000449:	e9 70 01 00 00       	jmp    c00005be <int_common_stub>

c000044e <isr6>:
c000044e:	fa                   	cli    
c000044f:	6a 00                	push   0x0
c0000451:	6a 06                	push   0x6
c0000453:	e9 66 01 00 00       	jmp    c00005be <int_common_stub>

c0000458 <isr7>:
c0000458:	fa                   	cli    
c0000459:	6a 00                	push   0x0
c000045b:	6a 07                	push   0x7
c000045d:	e9 5c 01 00 00       	jmp    c00005be <int_common_stub>

c0000462 <isr8>:
c0000462:	fa                   	cli    
c0000463:	6a 08                	push   0x8
c0000465:	e9 54 01 00 00       	jmp    c00005be <int_common_stub>

c000046a <isr9>:
c000046a:	fa                   	cli    
c000046b:	6a 00                	push   0x0
c000046d:	6a 09                	push   0x9
c000046f:	e9 4a 01 00 00       	jmp    c00005be <int_common_stub>

c0000474 <isr10>:
c0000474:	fa                   	cli    
c0000475:	6a 0a                	push   0xa
c0000477:	e9 42 01 00 00       	jmp    c00005be <int_common_stub>

c000047c <isr11>:
c000047c:	fa                   	cli    
c000047d:	6a 0b                	push   0xb
c000047f:	e9 3a 01 00 00       	jmp    c00005be <int_common_stub>

c0000484 <isr12>:
c0000484:	fa                   	cli    
c0000485:	6a 0c                	push   0xc
c0000487:	e9 32 01 00 00       	jmp    c00005be <int_common_stub>

c000048c <isr13>:
c000048c:	fa                   	cli    
c000048d:	6a 0d                	push   0xd
c000048f:	e9 2a 01 00 00       	jmp    c00005be <int_common_stub>

c0000494 <isr14>:
c0000494:	fa                   	cli    
c0000495:	6a 0e                	push   0xe
c0000497:	e9 22 01 00 00       	jmp    c00005be <int_common_stub>

c000049c <isr15>:
c000049c:	fa                   	cli    
c000049d:	6a 00                	push   0x0
c000049f:	6a 0f                	push   0xf
c00004a1:	e9 18 01 00 00       	jmp    c00005be <int_common_stub>

c00004a6 <isr16>:
c00004a6:	fa                   	cli    
c00004a7:	6a 00                	push   0x0
c00004a9:	6a 10                	push   0x10
c00004ab:	e9 0e 01 00 00       	jmp    c00005be <int_common_stub>

c00004b0 <isr17>:
c00004b0:	fa                   	cli    
c00004b1:	6a 00                	push   0x0
c00004b3:	6a 11                	push   0x11
c00004b5:	e9 04 01 00 00       	jmp    c00005be <int_common_stub>

c00004ba <isr18>:
c00004ba:	fa                   	cli    
c00004bb:	6a 00                	push   0x0
c00004bd:	6a 12                	push   0x12
c00004bf:	e9 fa 00 00 00       	jmp    c00005be <int_common_stub>

c00004c4 <isr96>:
c00004c4:	fa                   	cli    
c00004c5:	6a 00                	push   0x0
c00004c7:	6a 60                	push   0x60
c00004c9:	e9 20 01 00 00       	jmp    c00005ee <syscall_common_stub>

c00004ce <irq0>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 20                	push   0x20
c00004d3:	e9 e6 00 00 00       	jmp    c00005be <int_common_stub>

c00004d8 <irq1>:
c00004d8:	fa                   	cli    
c00004d9:	6a 00                	push   0x0
c00004db:	6a 21                	push   0x21
c00004dd:	e9 dc 00 00 00       	jmp    c00005be <int_common_stub>

c00004e2 <irq2>:
c00004e2:	fa                   	cli    
c00004e3:	6a 00                	push   0x0
c00004e5:	6a 22                	push   0x22
c00004e7:	e9 d2 00 00 00       	jmp    c00005be <int_common_stub>

c00004ec <irq3>:
c00004ec:	fa                   	cli    
c00004ed:	6a 00                	push   0x0
c00004ef:	6a 23                	push   0x23
c00004f1:	e9 c8 00 00 00       	jmp    c00005be <int_common_stub>

c00004f6 <irq4>:
c00004f6:	fa                   	cli    
c00004f7:	6a 00                	push   0x0
c00004f9:	6a 24                	push   0x24
c00004fb:	e9 be 00 00 00       	jmp    c00005be <int_common_stub>

c0000500 <irq5>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 25                	push   0x25
c0000505:	e9 b4 00 00 00       	jmp    c00005be <int_common_stub>

c000050a <irq6>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 26                	push   0x26
c000050f:	e9 aa 00 00 00       	jmp    c00005be <int_common_stub>

c0000514 <irq7>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 27                	push   0x27
c0000519:	e9 a0 00 00 00       	jmp    c00005be <int_common_stub>

c000051e <irq8>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 28                	push   0x28
c0000523:	e9 96 00 00 00       	jmp    c00005be <int_common_stub>

c0000528 <irq9>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 29                	push   0x29
c000052d:	e9 8c 00 00 00       	jmp    c00005be <int_common_stub>

c0000532 <irq10>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 2a                	push   0x2a
c0000537:	e9 82 00 00 00       	jmp    c00005be <int_common_stub>

c000053c <irq11>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 2b                	push   0x2b
c0000541:	e9 78 00 00 00       	jmp    c00005be <int_common_stub>

c0000546 <irq12>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 2c                	push   0x2c
c000054b:	e9 6e 00 00 00       	jmp    c00005be <int_common_stub>

c0000550 <irq13>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 2d                	push   0x2d
c0000555:	e9 64 00 00 00       	jmp    c00005be <int_common_stub>

c000055a <irq14>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 2e                	push   0x2e
c000055f:	e9 5a 00 00 00       	jmp    c00005be <int_common_stub>

c0000564 <irq15>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 2f                	push   0x2f
c0000569:	e9 50 00 00 00       	jmp    c00005be <int_common_stub>

c000056e <irq16>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 30                	push   0x30
c0000573:	e9 46 00 00 00       	jmp    c00005be <int_common_stub>

c0000578 <irq17>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 31                	push   0x31
c000057d:	e9 3c 00 00 00       	jmp    c00005be <int_common_stub>

c0000582 <irq18>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 32                	push   0x32
c0000587:	e9 32 00 00 00       	jmp    c00005be <int_common_stub>

c000058c <irq19>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 33                	push   0x33
c0000591:	e9 28 00 00 00       	jmp    c00005be <int_common_stub>

c0000596 <irq20>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 34                	push   0x34
c000059b:	e9 1e 00 00 00       	jmp    c00005be <int_common_stub>

c00005a0 <irq21>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 35                	push   0x35
c00005a5:	e9 14 00 00 00       	jmp    c00005be <int_common_stub>

c00005aa <irq22>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 36                	push   0x36
c00005af:	e9 0a 00 00 00       	jmp    c00005be <int_common_stub>

c00005b4 <irq23>:
c00005b4:	fa                   	cli    
c00005b5:	6a 00                	push   0x0
c00005b7:	6a 37                	push   0x37
c00005b9:	e9 00 00 00 00       	jmp    c00005be <int_common_stub>

c00005be <int_common_stub>:
c00005be:	60                   	pusha  
c00005bf:	1e                   	push   ds
c00005c0:	06                   	push   es
c00005c1:	0f a0                	push   fs
c00005c3:	0f a8                	push   gs
c00005c5:	66 b8 10 00          	mov    ax,0x10
c00005c9:	66 8e d8             	mov    ds,ax
c00005cc:	66 8e c0             	mov    es,ax
c00005cf:	66 8e e0             	mov    fs,ax
c00005d2:	66 8e e8             	mov    gs,ax
c00005d5:	89 e1                	mov    ecx,esp
c00005d7:	51                   	push   ecx
c00005d8:	b9 c9 0e 01 c0       	mov    ecx,0xc0010ec9
c00005dd:	ff d1                	call   ecx
c00005df:	59                   	pop    ecx
c00005e0:	0f a9                	pop    gs
c00005e2:	0f a1                	pop    fs
c00005e4:	07                   	pop    es
c00005e5:	1f                   	pop    ds
c00005e6:	61                   	popa   
c00005e7:	81 c4 08 00 00 00    	add    esp,0x8
c00005ed:	cf                   	iret   

c00005ee <syscall_common_stub>:
c00005ee:	60                   	pusha  
c00005ef:	1e                   	push   ds
c00005f0:	06                   	push   es
c00005f1:	0f a0                	push   fs
c00005f3:	0f a8                	push   gs
c00005f5:	66 b8 10 00          	mov    ax,0x10
c00005f9:	66 8e d8             	mov    ds,ax
c00005fc:	66 8e c0             	mov    es,ax
c00005ff:	66 8e e0             	mov    fs,ax
c0000602:	66 8e e8             	mov    gs,ax
c0000605:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c000060b:	89 61 1c             	mov    DWORD PTR [ecx+0x1c],esp
c000060e:	89 e1                	mov    ecx,esp
c0000610:	51                   	push   ecx
c0000611:	fb                   	sti    
c0000612:	b9 c9 0e 01 c0       	mov    ecx,0xc0010ec9
c0000617:	ff d1                	call   ecx
c0000619:	59                   	pop    ecx

c000061a <offAForkJumpThingy>:
c000061a:	0f a9                	pop    gs
c000061c:	0f a1                	pop    fs
c000061e:	07                   	pop    es
c000061f:	1f                   	pop    ds
c0000620:	61                   	popa   
c0000621:	81 c4 08 00 00 00    	add    esp,0x8
c0000627:	cf                   	iret   

c0000628 <memcmp>:
c0000628:	56                   	push   esi
c0000629:	53                   	push   ebx
c000062a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000062e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000632:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000636:	01 d6                	add    esi,edx
c0000638:	39 f2                	cmp    edx,esi
c000063a:	74 0e                	je     c000064a <memcmp+0x22>
c000063c:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c000063f:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000642:	38 c8                	cmp    al,cl
c0000644:	75 08                	jne    c000064e <memcmp+0x26>
c0000646:	42                   	inc    edx
c0000647:	43                   	inc    ebx
c0000648:	eb ee                	jmp    c0000638 <memcmp+0x10>
c000064a:	31 c0                	xor    eax,eax
c000064c:	eb 02                	jmp    c0000650 <memcmp+0x28>
c000064e:	29 c8                	sub    eax,ecx
c0000650:	5b                   	pop    ebx
c0000651:	5e                   	pop    esi
c0000652:	c3                   	ret    

c0000653 <memmove>:
c0000653:	56                   	push   esi
c0000654:	53                   	push   ebx
c0000655:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000659:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000065d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000661:	39 c8                	cmp    eax,ecx
c0000663:	73 12                	jae    c0000677 <memmove+0x24>
c0000665:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000668:	89 c3                	mov    ebx,eax
c000066a:	39 f1                	cmp    ecx,esi
c000066c:	74 1a                	je     c0000688 <memmove+0x35>
c000066e:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000670:	43                   	inc    ebx
c0000671:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c0000674:	41                   	inc    ecx
c0000675:	eb f3                	jmp    c000066a <memmove+0x17>
c0000677:	76 0f                	jbe    c0000688 <memmove+0x35>
c0000679:	85 d2                	test   edx,edx
c000067b:	74 0b                	je     c0000688 <memmove+0x35>
c000067d:	8a 5c 11 ff          	mov    bl,BYTE PTR [ecx+edx*1-0x1]
c0000681:	88 5c 10 ff          	mov    BYTE PTR [eax+edx*1-0x1],bl
c0000685:	4a                   	dec    edx
c0000686:	eb f1                	jmp    c0000679 <memmove+0x26>
c0000688:	5b                   	pop    ebx
c0000689:	5e                   	pop    esi
c000068a:	c3                   	ret    

c000068b <memcpy>:
c000068b:	57                   	push   edi
c000068c:	56                   	push   esi
c000068d:	53                   	push   ebx
c000068e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000692:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000696:	89 da                	mov    edx,ebx
c0000698:	89 d9                	mov    ecx,ebx
c000069a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000069e:	83 e2 fc             	and    edx,0xfffffffc
c00006a1:	c1 e9 02             	shr    ecx,0x2
c00006a4:	89 c7                	mov    edi,eax
c00006a6:	fc                   	cld    
c00006a7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00006a9:	8d 0c 16             	lea    ecx,[esi+edx*1]
c00006ac:	01 c2                	add    edx,eax
c00006ae:	01 de                	add    esi,ebx
c00006b0:	39 f1                	cmp    ecx,esi
c00006b2:	74 09                	je     c00006bd <memcpy+0x32>
c00006b4:	8a 19                	mov    bl,BYTE PTR [ecx]
c00006b6:	42                   	inc    edx
c00006b7:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006ba:	41                   	inc    ecx
c00006bb:	eb f3                	jmp    c00006b0 <memcpy+0x25>
c00006bd:	5b                   	pop    ebx
c00006be:	5e                   	pop    esi
c00006bf:	5f                   	pop    edi
c00006c0:	c3                   	ret    

c00006c1 <memset>:
c00006c1:	53                   	push   ebx
c00006c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006c6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00006ca:	01 c1                	add    ecx,eax
c00006cc:	89 c2                	mov    edx,eax
c00006ce:	39 ca                	cmp    edx,ecx
c00006d0:	74 0a                	je     c00006dc <memset+0x1b>
c00006d2:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c00006d6:	42                   	inc    edx
c00006d7:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00006da:	eb f2                	jmp    c00006ce <memset+0xd>
c00006dc:	5b                   	pop    ebx
c00006dd:	c3                   	ret    

c00006de <strlen>:
c00006de:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00006e2:	31 c0                	xor    eax,eax
c00006e4:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00006e8:	74 03                	je     c00006ed <strlen+0xf>
c00006ea:	40                   	inc    eax
c00006eb:	eb f7                	jmp    c00006e4 <strlen+0x6>
c00006ed:	c3                   	ret    

c00006ee <strpbrk>:
c00006ee:	53                   	push   ebx
c00006ef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00006f3:	8a 08                	mov    cl,BYTE PTR [eax]
c00006f5:	84 c9                	test   cl,cl
c00006f7:	74 14                	je     c000070d <strpbrk+0x1f>
c00006f9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00006fd:	8a 1a                	mov    bl,BYTE PTR [edx]
c00006ff:	84 db                	test   bl,bl
c0000701:	74 07                	je     c000070a <strpbrk+0x1c>
c0000703:	38 cb                	cmp    bl,cl
c0000705:	74 08                	je     c000070f <strpbrk+0x21>
c0000707:	42                   	inc    edx
c0000708:	eb f3                	jmp    c00006fd <strpbrk+0xf>
c000070a:	40                   	inc    eax
c000070b:	eb e6                	jmp    c00006f3 <strpbrk+0x5>
c000070d:	31 c0                	xor    eax,eax
c000070f:	5b                   	pop    ebx
c0000710:	c3                   	ret    

c0000711 <strtok>:
c0000711:	56                   	push   esi
c0000712:	53                   	push   ebx
c0000713:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000717:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000071b:	85 db                	test   ebx,ebx
c000071d:	75 0e                	jne    c000072d <strtok+0x1c>
c000071f:	8b 1d 8c 43 02 c0    	mov    ebx,DWORD PTR ds:0xc002438c
c0000725:	85 db                	test   ebx,ebx
c0000727:	75 04                	jne    c000072d <strtok+0x1c>
c0000729:	31 db                	xor    ebx,ebx
c000072b:	eb 2e                	jmp    c000075b <strtok+0x4a>
c000072d:	56                   	push   esi
c000072e:	53                   	push   ebx
c000072f:	e8 ba ff ff ff       	call   c00006ee <strpbrk>
c0000734:	a3 8c 43 02 c0       	mov    ds:0xc002438c,eax
c0000739:	5a                   	pop    edx
c000073a:	a1 8c 43 02 c0       	mov    eax,ds:0xc002438c
c000073f:	59                   	pop    ecx
c0000740:	39 d8                	cmp    eax,ebx
c0000742:	75 07                	jne    c000074b <strtok+0x3a>
c0000744:	43                   	inc    ebx
c0000745:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000749:	eb e2                	jmp    c000072d <strtok+0x1c>
c000074b:	85 c0                	test   eax,eax
c000074d:	74 da                	je     c0000729 <strtok+0x18>
c000074f:	8d 50 01             	lea    edx,[eax+0x1]
c0000752:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000755:	89 15 8c 43 02 c0    	mov    DWORD PTR ds:0xc002438c,edx
c000075b:	89 d8                	mov    eax,ebx
c000075d:	5b                   	pop    ebx
c000075e:	5e                   	pop    esi
c000075f:	c3                   	ret    

c0000760 <strcpy>:
c0000760:	53                   	push   ebx
c0000761:	31 d2                	xor    edx,edx
c0000763:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000767:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000076b:	8d 1c 10             	lea    ebx,[eax+edx*1]
c000076e:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0000771:	84 c9                	test   cl,cl
c0000773:	74 06                	je     c000077b <strcpy+0x1b>
c0000775:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0000778:	42                   	inc    edx
c0000779:	eb ec                	jmp    c0000767 <strcpy+0x7>
c000077b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000077e:	5b                   	pop    ebx
c000077f:	c3                   	ret    

c0000780 <strncpy>:
c0000780:	56                   	push   esi
c0000781:	53                   	push   ebx
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000078e:	89 c3                	mov    ebx,eax
c0000790:	85 c9                	test   ecx,ecx
c0000792:	74 1a                	je     c00007ae <strncpy+0x2e>
c0000794:	46                   	inc    esi
c0000795:	43                   	inc    ebx
c0000796:	8a 56 ff             	mov    dl,BYTE PTR [esi-0x1]
c0000799:	49                   	dec    ecx
c000079a:	88 53 ff             	mov    BYTE PTR [ebx-0x1],dl
c000079d:	84 d2                	test   dl,dl
c000079f:	75 ef                	jne    c0000790 <strncpy+0x10>
c00007a1:	31 d2                	xor    edx,edx
c00007a3:	39 d1                	cmp    ecx,edx
c00007a5:	74 07                	je     c00007ae <strncpy+0x2e>
c00007a7:	c6 04 13 00          	mov    BYTE PTR [ebx+edx*1],0x0
c00007ab:	42                   	inc    edx
c00007ac:	eb f5                	jmp    c00007a3 <strncpy+0x23>
c00007ae:	5b                   	pop    ebx
c00007af:	5e                   	pop    esi
c00007b0:	c3                   	ret    

c00007b1 <strcmp>:
c00007b1:	31 c9                	xor    ecx,ecx
c00007b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007b7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00007bb:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c00007bf:	0f b6 14 0a          	movzx  edx,BYTE PTR [edx+ecx*1]
c00007c3:	38 d0                	cmp    al,dl
c00007c5:	75 08                	jne    c00007cf <strcmp+0x1e>
c00007c7:	41                   	inc    ecx
c00007c8:	84 c0                	test   al,al
c00007ca:	75 e7                	jne    c00007b3 <strcmp+0x2>
c00007cc:	31 c0                	xor    eax,eax
c00007ce:	c3                   	ret    
c00007cf:	29 d0                	sub    eax,edx
c00007d1:	c3                   	ret    

c00007d2 <strchr>:
c00007d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00007d6:	8a 10                	mov    dl,BYTE PTR [eax]
c00007d8:	84 d2                	test   dl,dl
c00007da:	74 09                	je     c00007e5 <strchr+0x13>
c00007dc:	3a 54 24 08          	cmp    dl,BYTE PTR [esp+0x8]
c00007e0:	74 05                	je     c00007e7 <strchr+0x15>
c00007e2:	40                   	inc    eax
c00007e3:	eb f1                	jmp    c00007d6 <strchr+0x4>
c00007e5:	31 c0                	xor    eax,eax
c00007e7:	c3                   	ret    

c00007e8 <strncmp>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00007f6:	01 d6                	add    esi,edx
c00007f8:	39 f2                	cmp    edx,esi
c00007fa:	74 12                	je     c000080e <strncmp+0x26>
c00007fc:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c00007ff:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000802:	38 c8                	cmp    al,cl
c0000804:	75 0c                	jne    c0000812 <strncmp+0x2a>
c0000806:	42                   	inc    edx
c0000807:	84 c0                	test   al,al
c0000809:	74 03                	je     c000080e <strncmp+0x26>
c000080b:	43                   	inc    ebx
c000080c:	eb ea                	jmp    c00007f8 <strncmp+0x10>
c000080e:	31 c0                	xor    eax,eax
c0000810:	eb 02                	jmp    c0000814 <strncmp+0x2c>
c0000812:	29 c8                	sub    eax,ecx
c0000814:	5b                   	pop    ebx
c0000815:	5e                   	pop    esi
c0000816:	c3                   	ret    

c0000817 <strcat>:
c0000817:	53                   	push   ebx
c0000818:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000081c:	89 c1                	mov    ecx,eax
c000081e:	8d 51 01             	lea    edx,[ecx+0x1]
c0000821:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000825:	74 04                	je     c000082b <strcat+0x14>
c0000827:	89 d1                	mov    ecx,edx
c0000829:	eb f3                	jmp    c000081e <strcat+0x7>
c000082b:	31 d2                	xor    edx,edx
c000082d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0000831:	8a 1c 13             	mov    bl,BYTE PTR [ebx+edx*1]
c0000834:	88 1c 11             	mov    BYTE PTR [ecx+edx*1],bl
c0000837:	42                   	inc    edx
c0000838:	84 db                	test   bl,bl
c000083a:	75 f1                	jne    c000082d <strcat+0x16>
c000083c:	5b                   	pop    ebx
c000083d:	c3                   	ret    

c000083e <strncat>:
c000083e:	56                   	push   esi
c000083f:	53                   	push   ebx
c0000840:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000844:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000848:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000084c:	89 c2                	mov    edx,eax
c000084e:	85 db                	test   ebx,ebx
c0000850:	74 23                	je     c0000875 <strncat+0x37>
c0000852:	8d 72 01             	lea    esi,[edx+0x1]
c0000855:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
c0000859:	74 04                	je     c000085f <strncat+0x21>
c000085b:	89 f2                	mov    edx,esi
c000085d:	eb f3                	jmp    c0000852 <strncat+0x14>
c000085f:	8d 34 19             	lea    esi,[ecx+ebx*1]
c0000862:	41                   	inc    ecx
c0000863:	42                   	inc    edx
c0000864:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000867:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000086a:	84 db                	test   bl,bl
c000086c:	74 07                	je     c0000875 <strncat+0x37>
c000086e:	39 f1                	cmp    ecx,esi
c0000870:	75 f0                	jne    c0000862 <strncat+0x24>
c0000872:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000875:	5b                   	pop    ebx
c0000876:	5e                   	pop    esi
c0000877:	c3                   	ret    

c0000878 <strstr>:
c0000878:	57                   	push   edi
c0000879:	56                   	push   esi
c000087a:	53                   	push   ebx
c000087b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000087f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000883:	57                   	push   edi
c0000884:	e8 55 fe ff ff       	call   c00006de <strlen>
c0000889:	59                   	pop    ecx
c000088a:	89 c6                	mov    esi,eax
c000088c:	85 c0                	test   eax,eax
c000088e:	74 1f                	je     c00008af <strstr+0x37>
c0000890:	53                   	push   ebx
c0000891:	e8 48 fe ff ff       	call   c00006de <strlen>
c0000896:	5a                   	pop    edx
c0000897:	39 f0                	cmp    eax,esi
c0000899:	72 12                	jb     c00008ad <strstr+0x35>
c000089b:	56                   	push   esi
c000089c:	57                   	push   edi
c000089d:	53                   	push   ebx
c000089e:	e8 85 fd ff ff       	call   c0000628 <memcmp>
c00008a3:	83 c4 0c             	add    esp,0xc
c00008a6:	85 c0                	test   eax,eax
c00008a8:	74 05                	je     c00008af <strstr+0x37>
c00008aa:	43                   	inc    ebx
c00008ab:	eb e3                	jmp    c0000890 <strstr+0x18>
c00008ad:	31 db                	xor    ebx,ebx
c00008af:	89 d8                	mov    eax,ebx
c00008b1:	5b                   	pop    ebx
c00008b2:	5e                   	pop    esi
c00008b3:	5f                   	pop    edi
c00008b4:	c3                   	ret    

c00008b5 <toupper>:
c00008b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b9:	0f b6 d0             	movzx  edx,al
c00008bc:	f6 82 20 03 02 c0 02 	test   BYTE PTR [edx-0x3ffdfce0],0x2
c00008c3:	74 03                	je     c00008c8 <toupper+0x13>
c00008c5:	83 e8 20             	sub    eax,0x20
c00008c8:	c3                   	ret    

c00008c9 <tolower>:
c00008c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008cd:	0f b6 d0             	movzx  edx,al
c00008d0:	f6 82 20 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfce0],0x1
c00008d7:	74 03                	je     c00008dc <tolower+0x13>
c00008d9:	83 c0 20             	add    eax,0x20
c00008dc:	c3                   	ret    

c00008dd <simple_strtoul>:
c00008dd:	55                   	push   ebp
c00008de:	57                   	push   edi
c00008df:	56                   	push   esi
c00008e0:	53                   	push   ebx
c00008e1:	83 ec 08             	sub    esp,0x8
c00008e4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008e8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ec:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00008ef:	f6 82 20 03 02 c0 08 	test   BYTE PTR [edx-0x3ffdfce0],0x8
c00008f6:	74 03                	je     c00008fb <simple_strtoul+0x1e>
c00008f8:	41                   	inc    ecx
c00008f9:	eb f1                	jmp    c00008ec <simple_strtoul+0xf>
c00008fb:	80 fa 09             	cmp    dl,0x9
c00008fe:	74 f8                	je     c00008f8 <simple_strtoul+0x1b>
c0000900:	80 fa 2d             	cmp    dl,0x2d
c0000903:	75 0b                	jne    c0000910 <simple_strtoul+0x33>
c0000905:	41                   	inc    ecx
c0000906:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c000090e:	eb 0e                	jmp    c000091e <simple_strtoul+0x41>
c0000910:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000918:	80 fa 2b             	cmp    dl,0x2b
c000091b:	75 01                	jne    c000091e <simple_strtoul+0x41>
c000091d:	41                   	inc    ecx
c000091e:	85 f6                	test   esi,esi
c0000920:	75 22                	jne    c0000944 <simple_strtoul+0x67>
c0000922:	be 0a 00 00 00       	mov    esi,0xa
c0000927:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000092a:	75 5a                	jne    c0000986 <simple_strtoul+0xa9>
c000092c:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000930:	50                   	push   eax
c0000931:	e8 93 ff ff ff       	call   c00008c9 <tolower>
c0000936:	5a                   	pop    edx
c0000937:	83 f8 78             	cmp    eax,0x78
c000093a:	74 03                	je     c000093f <simple_strtoul+0x62>
c000093c:	41                   	inc    ecx
c000093d:	eb 16                	jmp    c0000955 <simple_strtoul+0x78>
c000093f:	83 c1 02             	add    ecx,0x2
c0000942:	eb 22                	jmp    c0000966 <simple_strtoul+0x89>
c0000944:	8d 46 fe             	lea    eax,[esi-0x2]
c0000947:	83 f8 22             	cmp    eax,0x22
c000094a:	0f 87 ab 00 00 00    	ja     c00009fb <simple_strtoul+0x11e>
c0000950:	83 fe 08             	cmp    esi,0x8
c0000953:	75 0c                	jne    c0000961 <simple_strtoul+0x84>
c0000955:	be 08 00 00 00       	mov    esi,0x8
c000095a:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000095d:	75 27                	jne    c0000986 <simple_strtoul+0xa9>
c000095f:	eb 1f                	jmp    c0000980 <simple_strtoul+0xa3>
c0000961:	83 fe 10             	cmp    esi,0x10
c0000964:	75 20                	jne    c0000986 <simple_strtoul+0xa9>
c0000966:	be 10 00 00 00       	mov    esi,0x10
c000096b:	80 39 30             	cmp    BYTE PTR [ecx],0x30
c000096e:	75 16                	jne    c0000986 <simple_strtoul+0xa9>
c0000970:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000974:	50                   	push   eax
c0000975:	e8 4f ff ff ff       	call   c00008c9 <tolower>
c000097a:	5d                   	pop    ebp
c000097b:	83 f8 78             	cmp    eax,0x78
c000097e:	74 03                	je     c0000983 <simple_strtoul+0xa6>
c0000980:	41                   	inc    ecx
c0000981:	eb 03                	jmp    c0000986 <simple_strtoul+0xa9>
c0000983:	83 c1 02             	add    ecx,0x2
c0000986:	31 ed                	xor    ebp,ebp
c0000988:	31 db                	xor    ebx,ebx
c000098a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000991:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000993:	84 d2                	test   dl,dl
c0000995:	74 27                	je     c00009be <simple_strtoul+0xe1>
c0000997:	0f b6 fa             	movzx  edi,dl
c000099a:	f6 87 20 03 02 c0 04 	test   BYTE PTR [edi-0x3ffdfce0],0x4
c00009a1:	74 05                	je     c00009a8 <simple_strtoul+0xcb>
c00009a3:	83 ef 30             	sub    edi,0x30
c00009a6:	eb 22                	jmp    c00009ca <simple_strtoul+0xed>
c00009a8:	0f be d2             	movsx  edx,dl
c00009ab:	52                   	push   edx
c00009ac:	e8 04 ff ff ff       	call   c00008b5 <toupper>
c00009b1:	0f b6 d0             	movzx  edx,al
c00009b4:	5f                   	pop    edi
c00009b5:	f6 82 20 03 02 c0 01 	test   BYTE PTR [edx-0x3ffdfce0],0x1
c00009bc:	75 09                	jne    c00009c7 <simple_strtoul+0xea>
c00009be:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c00009c3:	75 2d                	jne    c00009f2 <simple_strtoul+0x115>
c00009c5:	eb 59                	jmp    c0000a20 <simple_strtoul+0x143>
c00009c7:	8d 78 c9             	lea    edi,[eax-0x37]
c00009ca:	39 f7                	cmp    edi,esi
c00009cc:	73 f0                	jae    c00009be <simple_strtoul+0xe1>
c00009ce:	89 f8                	mov    eax,edi
c00009d0:	31 d2                	xor    edx,edx
c00009d2:	f7 d0                	not    eax
c00009d4:	f7 f6                	div    esi
c00009d6:	39 d8                	cmp    eax,ebx
c00009d8:	72 0e                	jb     c00009e8 <simple_strtoul+0x10b>
c00009da:	0f af de             	imul   ebx,esi
c00009dd:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009e4:	01 fb                	add    ebx,edi
c00009e6:	eb 07                	jmp    c00009ef <simple_strtoul+0x112>
c00009e8:	bd 01 00 00 00       	mov    ebp,0x1
c00009ed:	31 db                	xor    ebx,ebx
c00009ef:	41                   	inc    ecx
c00009f0:	eb 9f                	jmp    c0000991 <simple_strtoul+0xb4>
c00009f2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009f5:	09 d8                	or     eax,ebx
c00009f7:	75 21                	jne    c0000a1a <simple_strtoul+0x13d>
c00009f9:	eb 11                	jmp    c0000a0c <simple_strtoul+0x12f>
c00009fb:	31 db                	xor    ebx,ebx
c00009fd:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0000a02:	74 22                	je     c0000a26 <simple_strtoul+0x149>
c0000a04:	31 ed                	xor    ebp,ebp
c0000a06:	31 db                	xor    ebx,ebx
c0000a08:	85 c9                	test   ecx,ecx
c0000a0a:	74 0e                	je     c0000a1a <simple_strtoul+0x13d>
c0000a0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a10:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0000a14:	31 db                	xor    ebx,ebx
c0000a16:	89 38                	mov    DWORD PTR [eax],edi
c0000a18:	eb 06                	jmp    c0000a20 <simple_strtoul+0x143>
c0000a1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a1e:	89 08                	mov    DWORD PTR [eax],ecx
c0000a20:	4d                   	dec    ebp
c0000a21:	75 03                	jne    c0000a26 <simple_strtoul+0x149>
c0000a23:	83 cb ff             	or     ebx,0xffffffff
c0000a26:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a2b:	75 02                	jne    c0000a2f <simple_strtoul+0x152>
c0000a2d:	f7 db                	neg    ebx
c0000a2f:	83 c4 08             	add    esp,0x8
c0000a32:	89 d8                	mov    eax,ebx
c0000a34:	5b                   	pop    ebx
c0000a35:	5e                   	pop    esi
c0000a36:	5f                   	pop    edi
c0000a37:	5d                   	pop    ebp
c0000a38:	c3                   	ret    

c0000a39 <largebin_index>:
c0000a39:	89 c2                	mov    edx,eax
c0000a3b:	c1 ea 08             	shr    edx,0x8
c0000a3e:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000a44:	77 10                	ja     c0000a56 <largebin_index+0x1d>
c0000a46:	0f bd d2             	bsr    edx,edx
c0000a49:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000a4c:	d3 e8                	shr    eax,cl
c0000a4e:	83 e0 03             	and    eax,0x3
c0000a51:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000a55:	c3                   	ret    
c0000a56:	b8 5f 00 00 00       	mov    eax,0x5f
c0000a5b:	c3                   	ret    

c0000a5c <malloc_init_state>:
c0000a5c:	8d 50 34             	lea    edx,[eax+0x34]
c0000a5f:	53                   	push   ebx
c0000a60:	89 d1                	mov    ecx,edx
c0000a62:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000a68:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000a6b:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000a6e:	83 c2 08             	add    edx,0x8
c0000a71:	39 da                	cmp    edx,ebx
c0000a73:	75 f3                	jne    c0000a68 <malloc_init_state+0xc>
c0000a75:	8b 10                	mov    edx,DWORD PTR [eax]
c0000a77:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000a81:	83 e2 03             	and    edx,0x3
c0000a84:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000a8e:	83 ca 48             	or     edx,0x48
c0000a91:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000a9b:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000aa5:	89 10                	mov    DWORD PTR [eax],edx
c0000aa7:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000aae:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ab1:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000abb:	5b                   	pop    ebx
c0000abc:	c3                   	ret    

c0000abd <malloc_consolidate>:
c0000abd:	8b 10                	mov    edx,DWORD PTR [eax]
c0000abf:	85 d2                	test   edx,edx
c0000ac1:	0f 84 d8 00 00 00    	je     c0000b9f <malloc_consolidate+0xe2>
c0000ac7:	55                   	push   ebp
c0000ac8:	83 e2 fd             	and    edx,0xfffffffd
c0000acb:	57                   	push   edi
c0000acc:	8d 78 34             	lea    edi,[eax+0x34]
c0000acf:	56                   	push   esi
c0000ad0:	89 c5                	mov    ebp,eax
c0000ad2:	53                   	push   ebx
c0000ad3:	83 ec 10             	sub    esp,0x10
c0000ad6:	89 10                	mov    DWORD PTR [eax],edx
c0000ad8:	c1 ea 03             	shr    edx,0x3
c0000adb:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000adf:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000ae3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000ae7:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000aea:	85 d2                	test   edx,edx
c0000aec:	0f 84 98 00 00 00    	je     c0000b8a <malloc_consolidate+0xcd>
c0000af2:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000af9:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000afc:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000aff:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000b03:	89 f9                	mov    ecx,edi
c0000b05:	83 e1 fe             	and    ecx,0xfffffffe
c0000b08:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000b0b:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000b0e:	83 e3 fc             	and    ebx,0xfffffffc
c0000b11:	83 e7 01             	and    edi,0x1
c0000b14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000b17:	75 14                	jne    c0000b2d <malloc_consolidate+0x70>
c0000b19:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000b1b:	29 fa                	sub    edx,edi
c0000b1d:	01 f9                	add    ecx,edi
c0000b1f:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000b22:	89 fb                	mov    ebx,edi
c0000b24:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000b27:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000b2a:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000b2d:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000b30:	74 40                	je     c0000b72 <malloc_consolidate+0xb5>
c0000b32:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000b35:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000b38:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000b3c:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000b3f:	83 e7 01             	and    edi,0x1
c0000b42:	75 0e                	jne    c0000b52 <malloc_consolidate+0x95>
c0000b44:	01 d9                	add    ecx,ebx
c0000b46:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000b49:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000b4c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000b4f:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000b52:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000b55:	89 ce                	mov    esi,ecx
c0000b57:	83 ce 01             	or     esi,0x1
c0000b5a:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000b5d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000b60:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000b63:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000b67:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000b6a:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000b6d:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000b70:	eb 0c                	jmp    c0000b7e <malloc_consolidate+0xc1>
c0000b72:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000b75:	83 c9 01             	or     ecx,0x1
c0000b78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000b7b:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000b7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000b82:	85 d2                	test   edx,edx
c0000b84:	0f 85 6f ff ff ff    	jne    c0000af9 <malloc_consolidate+0x3c>
c0000b8a:	83 c5 04             	add    ebp,0x4
c0000b8d:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000b91:	0f 85 50 ff ff ff    	jne    c0000ae7 <malloc_consolidate+0x2a>
c0000b97:	83 c4 10             	add    esp,0x10
c0000b9a:	5b                   	pop    ebx
c0000b9b:	5e                   	pop    esi
c0000b9c:	5f                   	pop    edi
c0000b9d:	5d                   	pop    ebp
c0000b9e:	c3                   	ret    
c0000b9f:	e9 b8 fe ff ff       	jmp    c0000a5c <malloc_init_state>

c0000ba4 <dlfree>:
c0000ba4:	57                   	push   edi
c0000ba5:	56                   	push   esi
c0000ba6:	53                   	push   ebx
c0000ba7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000bab:	85 db                	test   ebx,ebx
c0000bad:	0f 84 e2 00 00 00    	je     c0000c95 <dlfree+0xf1>
c0000bb3:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000bb6:	8b 0d a0 43 02 c0    	mov    ecx,DWORD PTR ds:0xc00243a0
c0000bbc:	89 f0                	mov    eax,esi
c0000bbe:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000bc1:	83 e0 fc             	and    eax,0xfffffffc
c0000bc4:	39 c1                	cmp    ecx,eax
c0000bc6:	72 24                	jb     c0000bec <dlfree+0x48>
c0000bc8:	c1 e8 03             	shr    eax,0x3
c0000bcb:	83 c9 03             	or     ecx,0x3
c0000bce:	83 e8 02             	sub    eax,0x2
c0000bd1:	89 0d a0 43 02 c0    	mov    DWORD PTR ds:0xc00243a0,ecx
c0000bd7:	8b 0c 85 a4 43 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdbc5c]
c0000bde:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000be0:	89 14 85 a4 43 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbc5c],edx
c0000be7:	e9 a9 00 00 00       	jmp    c0000c95 <dlfree+0xf1>
c0000bec:	83 e6 02             	and    esi,0x2
c0000bef:	0f 85 a0 00 00 00    	jne    c0000c95 <dlfree+0xf1>
c0000bf5:	8d 34 02             	lea    esi,[edx+eax*1]
c0000bf8:	83 c9 01             	or     ecx,0x1
c0000bfb:	89 0d a0 43 02 c0    	mov    DWORD PTR ds:0xc00243a0,ecx
c0000c01:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000c04:	83 e1 fc             	and    ecx,0xfffffffc
c0000c07:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000c0b:	75 13                	jne    c0000c20 <dlfree+0x7c>
c0000c0d:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000c10:	29 da                	sub    edx,ebx
c0000c12:	01 d8                	add    eax,ebx
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000c1a:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c1d:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c20:	39 35 cc 43 02 c0    	cmp    DWORD PTR ds:0xc00243cc,esi
c0000c26:	74 40                	je     c0000c68 <dlfree+0xc4>
c0000c28:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000c2c:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000c2f:	80 e3 01             	and    bl,0x1
c0000c32:	75 0e                	jne    c0000c42 <dlfree+0x9e>
c0000c34:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000c37:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000c3a:	01 c8                	add    eax,ecx
c0000c3c:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000c3f:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000c42:	8b 0d dc 43 02 c0    	mov    ecx,DWORD PTR ds:0xc00243dc
c0000c48:	c7 42 0c d4 43 02 c0 	mov    DWORD PTR [edx+0xc],0xc00243d4
c0000c4f:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000c52:	89 15 dc 43 02 c0    	mov    DWORD PTR ds:0xc00243dc,edx
c0000c58:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000c5b:	89 c1                	mov    ecx,eax
c0000c5d:	83 c9 01             	or     ecx,0x1
c0000c60:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c63:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000c66:	eb 10                	jmp    c0000c78 <dlfree+0xd4>
c0000c68:	01 c8                	add    eax,ecx
c0000c6a:	89 c1                	mov    ecx,eax
c0000c6c:	83 c9 01             	or     ecx,0x1
c0000c6f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c72:	89 15 cc 43 02 c0    	mov    DWORD PTR ds:0xc00243cc,edx
c0000c78:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000c7d:	76 16                	jbe    c0000c95 <dlfree+0xf1>
c0000c7f:	f6 05 a0 43 02 c0 02 	test   BYTE PTR ds:0xc00243a0,0x2
c0000c86:	74 0d                	je     c0000c95 <dlfree+0xf1>
c0000c88:	5b                   	pop    ebx
c0000c89:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0000c8e:	5e                   	pop    esi
c0000c8f:	5f                   	pop    edi
c0000c90:	e9 28 fe ff ff       	jmp    c0000abd <malloc_consolidate>
c0000c95:	5b                   	pop    ebx
c0000c96:	5e                   	pop    esi
c0000c97:	5f                   	pop    edi
c0000c98:	c3                   	ret    

c0000c99 <sYSMALLOc>:
c0000c99:	55                   	push   ebp
c0000c9a:	57                   	push   edi
c0000c9b:	56                   	push   esi
c0000c9c:	53                   	push   ebx
c0000c9d:	89 d3                	mov    ebx,edx
c0000c9f:	83 ec 2c             	sub    esp,0x2c
c0000ca2:	8b 8a 5c 03 00 00    	mov    ecx,DWORD PTR [edx+0x35c]
c0000ca8:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000cab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000caf:	8d 41 ff             	lea    eax,[ecx-0x1]
c0000cb2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000cb6:	74 1f                	je     c0000cd7 <sYSMALLOc+0x3e>
c0000cb8:	89 d0                	mov    eax,edx
c0000cba:	e8 fe fd ff ff       	call   c0000abd <malloc_consolidate>
c0000cbf:	83 ec 0c             	sub    esp,0xc
c0000cc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000cc6:	83 e8 07             	sub    eax,0x7
c0000cc9:	50                   	push   eax
c0000cca:	e8 33 02 00 00       	call   c0000f02 <dlmalloc>
c0000ccf:	83 c4 10             	add    esp,0x10
c0000cd2:	e9 23 02 00 00       	jmp    c0000efa <sYSMALLOc+0x261>
c0000cd7:	8b 7a 2c             	mov    edi,DWORD PTR [edx+0x2c]
c0000cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000cde:	83 c0 10             	add    eax,0x10
c0000ce1:	8b 92 48 03 00 00    	mov    edx,DWORD PTR [edx+0x348]
c0000ce7:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
c0000cea:	01 c2                	add    edx,eax
c0000cec:	83 e5 fc             	and    ebp,0xfffffffc
c0000cef:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000cf3:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000cfa:	74 02                	je     c0000cfe <sYSMALLOc+0x65>
c0000cfc:	29 ea                	sub    edx,ebp
c0000cfe:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0000d02:	f7 d9                	neg    ecx
c0000d04:	21 ca                	and    edx,ecx
c0000d06:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0000d0a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0000d0e:	7f 07                	jg     c0000d17 <sYSMALLOc+0x7e>
c0000d10:	31 c0                	xor    eax,eax
c0000d12:	e9 e3 01 00 00       	jmp    c0000efa <sYSMALLOc+0x261>
c0000d17:	83 ec 0c             	sub    esp,0xc
c0000d1a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000d1e:	e8 0a b1 00 00       	call   c000be2d <sbrk>
c0000d23:	83 c4 10             	add    esp,0x10
c0000d26:	89 c6                	mov    esi,eax
c0000d28:	83 f8 ff             	cmp    eax,0xffffffff
c0000d2b:	74 e3                	je     c0000d10 <sYSMALLOc+0x77>
c0000d2d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000d31:	8d 14 2f             	lea    edx,[edi+ebp*1]
c0000d34:	03 8b 68 03 00 00    	add    ecx,DWORD PTR [ebx+0x368]
c0000d3a:	39 c2                	cmp    edx,eax
c0000d3c:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000d42:	75 11                	jne    c0000d55 <sYSMALLOc+0xbc>
c0000d44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000d48:	01 e8                	add    eax,ebp
c0000d4a:	83 c8 01             	or     eax,0x1
c0000d4d:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000d50:	e9 93 00 00 00       	jmp    c0000de8 <sYSMALLOc+0x14f>
c0000d55:	8b 83 60 03 00 00    	mov    eax,DWORD PTR [ebx+0x360]
c0000d5b:	a8 01                	test   al,0x1
c0000d5d:	0f 84 73 01 00 00    	je     c0000ed6 <sYSMALLOc+0x23d>
c0000d63:	85 ed                	test   ebp,ebp
c0000d65:	74 12                	je     c0000d79 <sYSMALLOc+0xe0>
c0000d67:	39 f2                	cmp    edx,esi
c0000d69:	76 0e                	jbe    c0000d79 <sYSMALLOc+0xe0>
c0000d6b:	83 e0 fe             	and    eax,0xfffffffe
c0000d6e:	89 83 60 03 00 00    	mov    DWORD PTR [ebx+0x360],eax
c0000d74:	e9 5d 01 00 00       	jmp    c0000ed6 <sYSMALLOc+0x23d>
c0000d79:	85 ed                	test   ebp,ebp
c0000d7b:	74 0c                	je     c0000d89 <sYSMALLOc+0xf0>
c0000d7d:	89 f0                	mov    eax,esi
c0000d7f:	29 d0                	sub    eax,edx
c0000d81:	01 c1                	add    ecx,eax
c0000d83:	89 8b 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ecx
c0000d89:	89 f2                	mov    edx,esi
c0000d8b:	83 e2 07             	and    edx,0x7
c0000d8e:	0f 84 b1 00 00 00    	je     c0000e45 <sYSMALLOc+0x1ac>
c0000d94:	b8 08 00 00 00       	mov    eax,0x8
c0000d99:	29 d0                	sub    eax,edx
c0000d9b:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0000d9e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000da2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000da6:	01 e8                	add    eax,ebp
c0000da8:	83 ec 0c             	sub    esp,0xc
c0000dab:	8d 14 01             	lea    edx,[ecx+eax*1]
c0000dae:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0000db2:	01 f2                	add    edx,esi
c0000db4:	01 d1                	add    ecx,edx
c0000db6:	29 d0                	sub    eax,edx
c0000db8:	23 4c 24 28          	and    ecx,DWORD PTR [esp+0x28]
c0000dbc:	01 c1                	add    ecx,eax
c0000dbe:	51                   	push   ecx
c0000dbf:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0000dc3:	e8 65 b0 00 00       	call   c000be2d <sbrk>
c0000dc8:	83 c4 10             	add    esp,0x10
c0000dcb:	83 f8 ff             	cmp    eax,0xffffffff
c0000dce:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0000dd2:	75 7c                	jne    c0000e50 <sYSMALLOc+0x1b7>
c0000dd4:	83 ec 0c             	sub    esp,0xc
c0000dd7:	6a 00                	push   0x0
c0000dd9:	e8 4f b0 00 00       	call   c000be2d <sbrk>
c0000dde:	83 c4 10             	add    esp,0x10
c0000de1:	31 c9                	xor    ecx,ecx
c0000de3:	83 f8 ff             	cmp    eax,0xffffffff
c0000de6:	75 7e                	jne    c0000e66 <sYSMALLOc+0x1cd>
c0000de8:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000dee:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000df4:	73 06                	jae    c0000dfc <sYSMALLOc+0x163>
c0000df6:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000dfc:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000e02:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000e08:	73 06                	jae    c0000e10 <sYSMALLOc+0x177>
c0000e0a:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000e10:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000e13:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000e16:	83 e2 fc             	and    edx,0xfffffffc
c0000e19:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0000e1d:	0f 87 ed fe ff ff    	ja     c0000d10 <sYSMALLOc+0x77>
c0000e23:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000e27:	29 fa                	sub    edx,edi
c0000e29:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000e2c:	83 ca 01             	or     edx,0x1
c0000e2f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000e32:	89 fb                	mov    ebx,edi
c0000e34:	83 cb 01             	or     ebx,0x1
c0000e37:	83 c0 08             	add    eax,0x8
c0000e3a:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000e3d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000e40:	e9 b5 00 00 00       	jmp    c0000efa <sYSMALLOc+0x261>
c0000e45:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000e49:	31 c0                	xor    eax,eax
c0000e4b:	e9 52 ff ff ff       	jmp    c0000da2 <sYSMALLOc+0x109>
c0000e50:	39 c6                	cmp    esi,eax
c0000e52:	76 12                	jbe    c0000e66 <sYSMALLOc+0x1cd>
c0000e54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e58:	01 f0                	add    eax,esi
c0000e5a:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000e61:	e9 7b ff ff ff       	jmp    c0000de1 <sYSMALLOc+0x148>
c0000e66:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000e6a:	29 f0                	sub    eax,esi
c0000e6c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0000e6f:	01 c8                	add    eax,ecx
c0000e71:	83 c8 01             	or     eax,0x1
c0000e74:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0000e77:	01 8b 68 03 00 00    	add    DWORD PTR [ebx+0x368],ecx
c0000e7d:	85 ed                	test   ebp,ebp
c0000e7f:	0f 84 63 ff ff ff    	je     c0000de8 <sYSMALLOc+0x14f>
c0000e85:	8d 45 f4             	lea    eax,[ebp-0xc]
c0000e88:	83 e0 f8             	and    eax,0xfffffff8
c0000e8b:	89 c2                	mov    edx,eax
c0000e8d:	83 ca 01             	or     edx,0x1
c0000e90:	83 f8 0f             	cmp    eax,0xf
c0000e93:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000e96:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000e9e:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000ea6:	0f 86 3c ff ff ff    	jbe    c0000de8 <sYSMALLOc+0x14f>
c0000eac:	83 ec 0c             	sub    esp,0xc
c0000eaf:	83 c7 08             	add    edi,0x8
c0000eb2:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000eb8:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000ec2:	57                   	push   edi
c0000ec3:	e8 dc fc ff ff       	call   c0000ba4 <dlfree>
c0000ec8:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000ece:	83 c4 10             	add    esp,0x10
c0000ed1:	e9 12 ff ff ff       	jmp    c0000de8 <sYSMALLOc+0x14f>
c0000ed6:	83 ec 0c             	sub    esp,0xc
c0000ed9:	6a 00                	push   0x0
c0000edb:	e8 4d af 00 00       	call   c000be2d <sbrk>
c0000ee0:	89 c2                	mov    edx,eax
c0000ee2:	29 f2                	sub    edx,esi
c0000ee4:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000ee8:	83 c4 10             	add    esp,0x10
c0000eeb:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ef1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0000ef5:	e9 e7 fe ff ff       	jmp    c0000de1 <sYSMALLOc+0x148>
c0000efa:	83 c4 2c             	add    esp,0x2c
c0000efd:	5b                   	pop    ebx
c0000efe:	5e                   	pop    esi
c0000eff:	5f                   	pop    edi
c0000f00:	5d                   	pop    ebp
c0000f01:	c3                   	ret    

c0000f02 <dlmalloc>:
c0000f02:	55                   	push   ebp
c0000f03:	57                   	push   edi
c0000f04:	56                   	push   esi
c0000f05:	53                   	push   ebx
c0000f06:	83 ec 1c             	sub    esp,0x1c
c0000f09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000f0d:	83 f8 df             	cmp    eax,0xffffffdf
c0000f10:	0f 87 70 03 00 00    	ja     c0001286 <dlmalloc+0x384>
c0000f16:	83 c0 0b             	add    eax,0xb
c0000f19:	be 10 00 00 00       	mov    esi,0x10
c0000f1e:	83 f8 0f             	cmp    eax,0xf
c0000f21:	76 05                	jbe    c0000f28 <dlmalloc+0x26>
c0000f23:	83 e0 f8             	and    eax,0xfffffff8
c0000f26:	89 c6                	mov    esi,eax
c0000f28:	8b 3d a0 43 02 c0    	mov    edi,DWORD PTR ds:0xc00243a0
c0000f2e:	f7 c7 01 00 00 00    	test   edi,0x1
c0000f34:	75 17                	jne    c0000f4d <dlmalloc+0x4b>
c0000f36:	85 ff                	test   edi,edi
c0000f38:	0f 85 05 03 00 00    	jne    c0001243 <dlmalloc+0x341>
c0000f3e:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0000f43:	e8 75 fb ff ff       	call   c0000abd <malloc_consolidate>
c0000f48:	e9 f6 02 00 00       	jmp    c0001243 <dlmalloc+0x341>
c0000f4d:	39 f7                	cmp    edi,esi
c0000f4f:	72 1f                	jb     c0000f70 <dlmalloc+0x6e>
c0000f51:	89 f2                	mov    edx,esi
c0000f53:	c1 ea 03             	shr    edx,0x3
c0000f56:	83 ea 02             	sub    edx,0x2
c0000f59:	8b 04 95 a4 43 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdbc5c]
c0000f60:	85 c0                	test   eax,eax
c0000f62:	74 0c                	je     c0000f70 <dlmalloc+0x6e>
c0000f64:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0000f67:	89 0c 95 a4 43 02 c0 	mov    DWORD PTR [edx*4-0x3ffdbc5c],ecx
c0000f6e:	eb 30                	jmp    c0000fa0 <dlmalloc+0x9e>
c0000f70:	89 f0                	mov    eax,esi
c0000f72:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000f78:	77 2e                	ja     c0000fa8 <dlmalloc+0xa6>
c0000f7a:	c1 e8 03             	shr    eax,0x3
c0000f7d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f81:	8d 14 c5 d4 43 02 c0 	lea    edx,[eax*8-0x3ffdbc2c]
c0000f88:	8d 5a f8             	lea    ebx,[edx-0x8]
c0000f8b:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0000f8e:	39 c3                	cmp    ebx,eax
c0000f90:	74 2e                	je     c0000fc0 <dlmalloc+0xbe>
c0000f92:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0000f95:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0000f9a:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000f9d:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0000fa0:	83 c0 08             	add    eax,0x8
c0000fa3:	e9 e0 02 00 00       	jmp    c0001288 <dlmalloc+0x386>
c0000fa8:	e8 8c fa ff ff       	call   c0000a39 <largebin_index>
c0000fad:	83 e7 02             	and    edi,0x2
c0000fb0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000fb4:	74 0a                	je     c0000fc0 <dlmalloc+0xbe>
c0000fb6:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0000fbb:	e8 fd fa ff ff       	call   c0000abd <malloc_consolidate>
c0000fc0:	8d 46 10             	lea    eax,[esi+0x10]
c0000fc3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000fc7:	8b 1d e0 43 02 c0    	mov    ebx,DWORD PTR ds:0xc00243e0
c0000fcd:	81 fb d4 43 02 c0    	cmp    ebx,0xc00243d4
c0000fd3:	0f 84 13 01 00 00    	je     c00010ec <dlmalloc+0x1ea>
c0000fd9:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0000fdc:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0000fdf:	83 e7 fc             	and    edi,0xfffffffc
c0000fe2:	81 fe ff 00 00 00    	cmp    esi,0xff
c0000fe8:	77 4c                	ja     c0001036 <dlmalloc+0x134>
c0000fea:	3d d4 43 02 c0       	cmp    eax,0xc00243d4
c0000fef:	75 45                	jne    c0001036 <dlmalloc+0x134>
c0000ff1:	39 1d d0 43 02 c0    	cmp    DWORD PTR ds:0xc00243d0,ebx
c0000ff7:	75 3d                	jne    c0001036 <dlmalloc+0x134>
c0000ff9:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0000ffd:	73 37                	jae    c0001036 <dlmalloc+0x134>
c0000fff:	89 fa                	mov    edx,edi
c0001001:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001004:	29 f2                	sub    edx,esi
c0001006:	83 ce 01             	or     esi,0x1
c0001009:	89 d1                	mov    ecx,edx
c000100b:	a3 dc 43 02 c0       	mov    ds:0xc00243dc,eax
c0001010:	83 c9 01             	or     ecx,0x1
c0001013:	a3 e0 43 02 c0       	mov    ds:0xc00243e0,eax
c0001018:	a3 d0 43 02 c0       	mov    ds:0xc00243d0,eax
c000101d:	c7 40 08 d4 43 02 c0 	mov    DWORD PTR [eax+0x8],0xc00243d4
c0001024:	c7 40 0c d4 43 02 c0 	mov    DWORD PTR [eax+0xc],0xc00243d4
c000102b:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000102e:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001031:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001034:	eb 15                	jmp    c000104b <dlmalloc+0x149>
c0001036:	a3 e0 43 02 c0       	mov    ds:0xc00243e0,eax
c000103b:	39 fe                	cmp    esi,edi
c000103d:	c7 40 08 d4 43 02 c0 	mov    DWORD PTR [eax+0x8],0xc00243d4
c0001044:	75 0d                	jne    c0001053 <dlmalloc+0x151>
c0001046:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000104b:	8d 43 08             	lea    eax,[ebx+0x8]
c000104e:	e9 35 02 00 00       	jmp    c0001288 <dlmalloc+0x386>
c0001053:	89 f8                	mov    eax,edi
c0001055:	81 ff ff 00 00 00    	cmp    edi,0xff
c000105b:	77 19                	ja     c0001076 <dlmalloc+0x174>
c000105d:	c1 e8 03             	shr    eax,0x3
c0001060:	8d 14 00             	lea    edx,[eax+eax*1]
c0001063:	83 c2 0d             	add    edx,0xd
c0001066:	8d 2c 95 98 43 02 c0 	lea    ebp,[edx*4-0x3ffdbc68]
c000106d:	8b 14 95 a0 43 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbc60]
c0001074:	eb 46                	jmp    c00010bc <dlmalloc+0x1ba>
c0001076:	e8 be f9 ff ff       	call   c0000a39 <largebin_index>
c000107b:	8d 14 00             	lea    edx,[eax+eax*1]
c000107e:	83 c2 0d             	add    edx,0xd
c0001081:	8d 0c 95 a0 43 02 c0 	lea    ecx,[edx*4-0x3ffdbc60]
c0001088:	8b 14 95 a0 43 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbc60]
c000108f:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001092:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001096:	89 d5                	mov    ebp,edx
c0001098:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000109c:	74 1e                	je     c00010bc <dlmalloc+0x1ba>
c000109e:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00010a1:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00010a4:	77 12                	ja     c00010b8 <dlmalloc+0x1b6>
c00010a6:	83 cf 01             	or     edi,0x1
c00010a9:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00010ac:	76 05                	jbe    c00010b3 <dlmalloc+0x1b1>
c00010ae:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00010b1:	eb f6                	jmp    c00010a9 <dlmalloc+0x1a7>
c00010b3:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00010b6:	eb 04                	jmp    c00010bc <dlmalloc+0x1ba>
c00010b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00010bc:	89 c7                	mov    edi,eax
c00010be:	88 c1                	mov    cl,al
c00010c0:	c1 ff 05             	sar    edi,0x5
c00010c3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00010c7:	bf 01 00 00 00       	mov    edi,0x1
c00010cc:	d3 e7                	shl    edi,cl
c00010ce:	89 f8                	mov    eax,edi
c00010d0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00010d4:	09 04 bd d4 46 02 c0 	or     DWORD PTR [edi*4-0x3ffdb92c],eax
c00010db:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00010de:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00010e1:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00010e4:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00010e7:	e9 db fe ff ff       	jmp    c0000fc7 <dlmalloc+0xc5>
c00010ec:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010f2:	76 78                	jbe    c000116c <dlmalloc+0x26a>
c00010f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00010f8:	8d 04 c5 d4 43 02 c0 	lea    eax,[eax*8-0x3ffdbc2c]
c00010ff:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001102:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001105:	39 ca                	cmp    edx,ecx
c0001107:	74 63                	je     c000116c <dlmalloc+0x26a>
c0001109:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000110c:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000110f:	83 e3 fc             	and    ebx,0xfffffffc
c0001112:	39 de                	cmp    esi,ebx
c0001114:	77 52                	ja     c0001168 <dlmalloc+0x266>
c0001116:	89 df                	mov    edi,ebx
c0001118:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000111b:	29 f7                	sub    edi,esi
c000111d:	01 d3                	add    ebx,edx
c000111f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001122:	83 ff 0f             	cmp    edi,0xf
c0001125:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001128:	8d 42 08             	lea    eax,[edx+0x8]
c000112b:	77 09                	ja     c0001136 <dlmalloc+0x234>
c000112d:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001131:	e9 52 01 00 00       	jmp    c0001288 <dlmalloc+0x386>
c0001136:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001139:	83 ce 01             	or     esi,0x1
c000113c:	89 0d dc 43 02 c0    	mov    DWORD PTR ds:0xc00243dc,ecx
c0001142:	89 0d e0 43 02 c0    	mov    DWORD PTR ds:0xc00243e0,ecx
c0001148:	c7 41 08 d4 43 02 c0 	mov    DWORD PTR [ecx+0x8],0xc00243d4
c000114f:	c7 41 0c d4 43 02 c0 	mov    DWORD PTR [ecx+0xc],0xc00243d4
c0001156:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001159:	89 fa                	mov    edx,edi
c000115b:	83 ca 01             	or     edx,0x1
c000115e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001161:	89 3b                	mov    DWORD PTR [ebx],edi
c0001163:	e9 20 01 00 00       	jmp    c0001288 <dlmalloc+0x386>
c0001168:	89 c2                	mov    edx,eax
c000116a:	eb 99                	jmp    c0001105 <dlmalloc+0x203>
c000116c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001170:	b8 01 00 00 00       	mov    eax,0x1
c0001175:	41                   	inc    ecx
c0001176:	89 cb                	mov    ebx,ecx
c0001178:	c1 eb 05             	shr    ebx,0x5
c000117b:	8d 14 cd cc 43 02 c0 	lea    edx,[ecx*8-0x3ffdbc34]
c0001182:	d3 e0                	shl    eax,cl
c0001184:	8b 3c 9d d4 46 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdb92c]
c000118b:	39 f8                	cmp    eax,edi
c000118d:	77 04                	ja     c0001193 <dlmalloc+0x291>
c000118f:	85 c0                	test   eax,eax
c0001191:	75 26                	jne    c00011b9 <dlmalloc+0x2b7>
c0001193:	43                   	inc    ebx
c0001194:	83 fb 02             	cmp    ebx,0x2
c0001197:	0f 87 a6 00 00 00    	ja     c0001243 <dlmalloc+0x341>
c000119d:	8b 3c 9d d4 46 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdb92c]
c00011a4:	85 ff                	test   edi,edi
c00011a6:	74 eb                	je     c0001193 <dlmalloc+0x291>
c00011a8:	89 d8                	mov    eax,ebx
c00011aa:	c1 e0 06             	shl    eax,0x6
c00011ad:	8d 14 85 cc 43 02 c0 	lea    edx,[eax*4-0x3ffdbc34]
c00011b4:	b8 01 00 00 00       	mov    eax,0x1
c00011b9:	85 f8                	test   eax,edi
c00011bb:	75 07                	jne    c00011c4 <dlmalloc+0x2c2>
c00011bd:	83 c2 08             	add    edx,0x8
c00011c0:	01 c0                	add    eax,eax
c00011c2:	eb f5                	jmp    c00011b9 <dlmalloc+0x2b7>
c00011c4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00011c7:	39 ca                	cmp    edx,ecx
c00011c9:	75 14                	jne    c00011df <dlmalloc+0x2dd>
c00011cb:	89 c1                	mov    ecx,eax
c00011cd:	83 c2 08             	add    edx,0x8
c00011d0:	f7 d1                	not    ecx
c00011d2:	21 cf                	and    edi,ecx
c00011d4:	01 c0                	add    eax,eax
c00011d6:	89 3c 9d d4 46 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdb92c],edi
c00011dd:	eb ac                	jmp    c000118b <dlmalloc+0x289>
c00011df:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00011e2:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00011e5:	83 e0 fc             	and    eax,0xfffffffc
c00011e8:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00011eb:	89 c3                	mov    ebx,eax
c00011ed:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00011f0:	29 f3                	sub    ebx,esi
c00011f2:	8d 14 01             	lea    edx,[ecx+eax*1]
c00011f5:	83 fb 0f             	cmp    ebx,0xf
c00011f8:	8d 41 08             	lea    eax,[ecx+0x8]
c00011fb:	77 09                	ja     c0001206 <dlmalloc+0x304>
c00011fd:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001201:	e9 82 00 00 00       	jmp    c0001288 <dlmalloc+0x386>
c0001206:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001209:	81 fe ff 00 00 00    	cmp    esi,0xff
c000120f:	89 3d dc 43 02 c0    	mov    DWORD PTR ds:0xc00243dc,edi
c0001215:	89 3d e0 43 02 c0    	mov    DWORD PTR ds:0xc00243e0,edi
c000121b:	c7 47 08 d4 43 02 c0 	mov    DWORD PTR [edi+0x8],0xc00243d4
c0001222:	c7 47 0c d4 43 02 c0 	mov    DWORD PTR [edi+0xc],0xc00243d4
c0001229:	77 06                	ja     c0001231 <dlmalloc+0x32f>
c000122b:	89 3d d0 43 02 c0    	mov    DWORD PTR ds:0xc00243d0,edi
c0001231:	83 ce 01             	or     esi,0x1
c0001234:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001237:	89 d9                	mov    ecx,ebx
c0001239:	83 c9 01             	or     ecx,0x1
c000123c:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c000123f:	89 1a                	mov    DWORD PTR [edx],ebx
c0001241:	eb 45                	jmp    c0001288 <dlmalloc+0x386>
c0001243:	a1 cc 43 02 c0       	mov    eax,ds:0xc00243cc
c0001248:	8d 4e 10             	lea    ecx,[esi+0x10]
c000124b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000124e:	83 e2 fc             	and    edx,0xfffffffc
c0001251:	39 d1                	cmp    ecx,edx
c0001253:	77 1e                	ja     c0001273 <dlmalloc+0x371>
c0001255:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001258:	89 f3                	mov    ebx,esi
c000125a:	29 f2                	sub    edx,esi
c000125c:	83 cb 01             	or     ebx,0x1
c000125f:	83 ca 01             	or     edx,0x1
c0001262:	89 0d cc 43 02 c0    	mov    DWORD PTR ds:0xc00243cc,ecx
c0001268:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000126b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000126e:	e9 2d fd ff ff       	jmp    c0000fa0 <dlmalloc+0x9e>
c0001273:	83 c4 1c             	add    esp,0x1c
c0001276:	89 f0                	mov    eax,esi
c0001278:	ba a0 43 02 c0       	mov    edx,0xc00243a0
c000127d:	5b                   	pop    ebx
c000127e:	5e                   	pop    esi
c000127f:	5f                   	pop    edi
c0001280:	5d                   	pop    ebp
c0001281:	e9 13 fa ff ff       	jmp    c0000c99 <sYSMALLOc>
c0001286:	31 c0                	xor    eax,eax
c0001288:	83 c4 1c             	add    esp,0x1c
c000128b:	5b                   	pop    ebx
c000128c:	5e                   	pop    esi
c000128d:	5f                   	pop    edi
c000128e:	5d                   	pop    ebp
c000128f:	c3                   	ret    

c0001290 <iALLOc>:
c0001290:	55                   	push   ebp
c0001291:	89 c5                	mov    ebp,eax
c0001293:	57                   	push   edi
c0001294:	56                   	push   esi
c0001295:	53                   	push   ebx
c0001296:	83 ec 2c             	sub    esp,0x2c
c0001299:	83 3d a0 43 02 c0 00 	cmp    DWORD PTR ds:0xc00243a0,0x0
c00012a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00012a4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00012a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012ac:	75 12                	jne    c00012c0 <iALLOc+0x30>
c00012ae:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c00012b3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00012b7:	e8 01 f8 ff ff       	call   c0000abd <malloc_consolidate>
c00012bc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00012c0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00012c5:	74 12                	je     c00012d9 <iALLOc+0x49>
c00012c7:	85 ed                	test   ebp,ebp
c00012c9:	0f 84 64 01 00 00    	je     c0001433 <iALLOc+0x1a3>
c00012cf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00012d7:	eb 33                	jmp    c000130c <iALLOc+0x7c>
c00012d9:	85 ed                	test   ebp,ebp
c00012db:	75 14                	jne    c00012f1 <iALLOc+0x61>
c00012dd:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00012e5:	83 c4 2c             	add    esp,0x2c
c00012e8:	5b                   	pop    ebx
c00012e9:	5e                   	pop    esi
c00012ea:	5f                   	pop    edi
c00012eb:	5d                   	pop    ebp
c00012ec:	e9 11 fc ff ff       	jmp    c0000f02 <dlmalloc>
c00012f1:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00012f8:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001300:	83 f8 0f             	cmp    eax,0xf
c0001303:	76 07                	jbe    c000130c <iALLOc+0x7c>
c0001305:	83 e0 f8             	and    eax,0xfffffff8
c0001308:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000130c:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001311:	75 09                	jne    c000131c <iALLOc+0x8c>
c0001313:	89 d0                	mov    eax,edx
c0001315:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001318:	31 f6                	xor    esi,esi
c000131a:	eb 3b                	jmp    c0001357 <iALLOc+0xc7>
c000131c:	8b 02                	mov    eax,DWORD PTR [edx]
c000131e:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001326:	83 c0 0b             	add    eax,0xb
c0001329:	83 f8 0f             	cmp    eax,0xf
c000132c:	76 07                	jbe    c0001335 <iALLOc+0xa5>
c000132e:	83 e0 f8             	and    eax,0xfffffff8
c0001331:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001335:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001339:	0f af f5             	imul   esi,ebp
c000133c:	eb 25                	jmp    c0001363 <iALLOc+0xd3>
c000133e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001340:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001343:	bb 10 00 00 00       	mov    ebx,0x10
c0001348:	83 f9 0f             	cmp    ecx,0xf
c000134b:	76 05                	jbe    c0001352 <iALLOc+0xc2>
c000134d:	83 e1 f8             	and    ecx,0xfffffff8
c0001350:	89 cb                	mov    ebx,ecx
c0001352:	01 de                	add    esi,ebx
c0001354:	83 c0 04             	add    eax,0x4
c0001357:	39 c7                	cmp    edi,eax
c0001359:	75 e3                	jne    c000133e <iALLOc+0xae>
c000135b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001363:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001367:	83 ec 0c             	sub    esp,0xc
c000136a:	8b 1d f4 46 02 c0    	mov    ebx,DWORD PTR ds:0xc00246f4
c0001370:	c7 05 f4 46 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00246f4,0x0
c000137a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000137e:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001382:	50                   	push   eax
c0001383:	e8 7a fb ff ff       	call   c0000f02 <dlmalloc>
c0001388:	83 c4 10             	add    esp,0x10
c000138b:	89 1d f4 46 02 c0    	mov    DWORD PTR ds:0xc00246f4,ebx
c0001391:	85 c0                	test   eax,eax
c0001393:	0f 84 92 00 00 00    	je     c000142b <iALLOc+0x19b>
c0001399:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000139c:	8d 78 f8             	lea    edi,[eax-0x8]
c000139f:	83 e3 fc             	and    ebx,0xfffffffc
c00013a2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00013a6:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00013ab:	74 1e                	je     c00013cb <iALLOc+0x13b>
c00013ad:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00013b1:	89 d9                	mov    ecx,ebx
c00013b3:	52                   	push   edx
c00013b4:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00013b8:	83 e9 04             	sub    ecx,0x4
c00013bb:	51                   	push   ecx
c00013bc:	6a 00                	push   0x0
c00013be:	50                   	push   eax
c00013bf:	e8 fd f2 ff ff       	call   c00006c1 <memset>
c00013c4:	83 c4 10             	add    esp,0x10
c00013c7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00013cb:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013d0:	75 14                	jne    c00013e6 <iALLOc+0x156>
c00013d2:	8d 04 37             	lea    eax,[edi+esi*1]
c00013d5:	29 f3                	sub    ebx,esi
c00013d7:	83 cb 01             	or     ebx,0x1
c00013da:	8d 48 08             	lea    ecx,[eax+0x8]
c00013dd:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00013e0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00013e4:	89 f3                	mov    ebx,esi
c00013e6:	31 c0                	xor    eax,eax
c00013e8:	4d                   	dec    ebp
c00013e9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00013ed:	8d 4f 08             	lea    ecx,[edi+0x8]
c00013f0:	39 c5                	cmp    ebp,eax
c00013f2:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00013f5:	74 2c                	je     c0001423 <iALLOc+0x193>
c00013f7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00013fb:	85 c9                	test   ecx,ecx
c00013fd:	75 15                	jne    c0001414 <iALLOc+0x184>
c00013ff:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001402:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001405:	b9 10 00 00 00       	mov    ecx,0x10
c000140a:	83 fe 0f             	cmp    esi,0xf
c000140d:	76 05                	jbe    c0001414 <iALLOc+0x184>
c000140f:	83 e6 f8             	and    esi,0xfffffff8
c0001412:	89 f1                	mov    ecx,esi
c0001414:	89 ce                	mov    esi,ecx
c0001416:	29 cb                	sub    ebx,ecx
c0001418:	83 ce 01             	or     esi,0x1
c000141b:	40                   	inc    eax
c000141c:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000141f:	01 cf                	add    edi,ecx
c0001421:	eb c6                	jmp    c00013e9 <iALLOc+0x159>
c0001423:	83 cb 01             	or     ebx,0x1
c0001426:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001429:	eb 08                	jmp    c0001433 <iALLOc+0x1a3>
c000142b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001433:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001437:	83 c4 2c             	add    esp,0x2c
c000143a:	5b                   	pop    ebx
c000143b:	5e                   	pop    esi
c000143c:	5f                   	pop    edi
c000143d:	5d                   	pop    ebp
c000143e:	c3                   	ret    

c000143f <dlrealloc>:
c000143f:	55                   	push   ebp
c0001440:	57                   	push   edi
c0001441:	56                   	push   esi
c0001442:	53                   	push   ebx
c0001443:	83 ec 1c             	sub    esp,0x1c
c0001446:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000144a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000144e:	85 db                	test   ebx,ebx
c0001450:	75 10                	jne    c0001462 <dlrealloc+0x23>
c0001452:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001456:	83 c4 1c             	add    esp,0x1c
c0001459:	5b                   	pop    ebx
c000145a:	5e                   	pop    esi
c000145b:	5f                   	pop    edi
c000145c:	5d                   	pop    ebp
c000145d:	e9 a0 fa ff ff       	jmp    c0000f02 <dlmalloc>
c0001462:	83 f8 df             	cmp    eax,0xffffffdf
c0001465:	76 07                	jbe    c000146e <dlrealloc+0x2f>
c0001467:	31 db                	xor    ebx,ebx
c0001469:	e9 7c 01 00 00       	jmp    c00015ea <dlrealloc+0x1ab>
c000146e:	83 c0 0b             	add    eax,0xb
c0001471:	bf 10 00 00 00       	mov    edi,0x10
c0001476:	83 f8 0f             	cmp    eax,0xf
c0001479:	76 05                	jbe    c0001480 <dlrealloc+0x41>
c000147b:	83 e0 f8             	and    eax,0xfffffff8
c000147e:	89 c7                	mov    edi,eax
c0001480:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001483:	8d 6b f8             	lea    ebp,[ebx-0x8]
c0001486:	89 c6                	mov    esi,eax
c0001488:	83 e6 fc             	and    esi,0xfffffffc
c000148b:	a8 02                	test   al,0x2
c000148d:	75 d8                	jne    c0001467 <dlrealloc+0x28>
c000148f:	39 f7                	cmp    edi,esi
c0001491:	0f 86 15 01 00 00    	jbe    c00015ac <dlrealloc+0x16d>
c0001497:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c000149b:	39 15 cc 43 02 c0    	cmp    DWORD PTR ds:0xc00243cc,edx
c00014a1:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00014a4:	75 33                	jne    c00014d9 <dlrealloc+0x9a>
c00014a6:	83 e1 fc             	and    ecx,0xfffffffc
c00014a9:	01 f1                	add    ecx,esi
c00014ab:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014af:	8d 4f 10             	lea    ecx,[edi+0x10]
c00014b2:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00014b6:	77 49                	ja     c0001501 <dlrealloc+0xc2>
c00014b8:	83 e0 01             	and    eax,0x1
c00014bb:	01 fd                	add    ebp,edi
c00014bd:	09 f8                	or     eax,edi
c00014bf:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00014c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00014c6:	29 f8                	sub    eax,edi
c00014c8:	89 2d cc 43 02 c0    	mov    DWORD PTR ds:0xc00243cc,ebp
c00014ce:	83 c8 01             	or     eax,0x1
c00014d1:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00014d4:	e9 11 01 00 00       	jmp    c00015ea <dlrealloc+0x1ab>
c00014d9:	89 c8                	mov    eax,ecx
c00014db:	83 e0 fe             	and    eax,0xfffffffe
c00014de:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00014e3:	75 1c                	jne    c0001501 <dlrealloc+0xc2>
c00014e5:	83 e1 fc             	and    ecx,0xfffffffc
c00014e8:	01 f1                	add    ecx,esi
c00014ea:	39 cf                	cmp    edi,ecx
c00014ec:	77 13                	ja     c0001501 <dlrealloc+0xc2>
c00014ee:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00014f1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00014f4:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00014f7:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00014fa:	89 ce                	mov    esi,ecx
c00014fc:	e9 ab 00 00 00       	jmp    c00015ac <dlrealloc+0x16d>
c0001501:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001505:	83 ec 0c             	sub    esp,0xc
c0001508:	8d 47 f9             	lea    eax,[edi-0x7]
c000150b:	50                   	push   eax
c000150c:	e8 f1 f9 ff ff       	call   c0000f02 <dlmalloc>
c0001511:	83 c4 10             	add    esp,0x10
c0001514:	89 c1                	mov    ecx,eax
c0001516:	85 c0                	test   eax,eax
c0001518:	0f 84 49 ff ff ff    	je     c0001467 <dlrealloc+0x28>
c000151e:	8d 40 f8             	lea    eax,[eax-0x8]
c0001521:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001525:	39 c2                	cmp    edx,eax
c0001527:	75 0a                	jne    c0001533 <dlrealloc+0xf4>
c0001529:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000152c:	83 e0 fc             	and    eax,0xfffffffc
c000152f:	01 c6                	add    esi,eax
c0001531:	eb 79                	jmp    c00015ac <dlrealloc+0x16d>
c0001533:	83 ee 04             	sub    esi,0x4
c0001536:	83 fe 27             	cmp    esi,0x27
c0001539:	76 16                	jbe    c0001551 <dlrealloc+0x112>
c000153b:	50                   	push   eax
c000153c:	56                   	push   esi
c000153d:	53                   	push   ebx
c000153e:	51                   	push   ecx
c000153f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001543:	e8 43 f1 ff ff       	call   c000068b <memcpy>
c0001548:	83 c4 10             	add    esp,0x10
c000154b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000154f:	eb 43                	jmp    c0001594 <dlrealloc+0x155>
c0001551:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001553:	83 fe 13             	cmp    esi,0x13
c0001556:	89 01                	mov    DWORD PTR [ecx],eax
c0001558:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000155b:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c000155e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001561:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001564:	76 2e                	jbe    c0001594 <dlrealloc+0x155>
c0001566:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001569:	83 fe 1b             	cmp    esi,0x1b
c000156c:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000156f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001572:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c0001575:	76 1d                	jbe    c0001594 <dlrealloc+0x155>
c0001577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000157a:	83 fe 23             	cmp    esi,0x23
c000157d:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001580:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001583:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c0001586:	76 0c                	jbe    c0001594 <dlrealloc+0x155>
c0001588:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000158b:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c000158e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0001591:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c0001594:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001598:	83 ec 0c             	sub    esp,0xc
c000159b:	53                   	push   ebx
c000159c:	e8 03 f6 ff ff       	call   c0000ba4 <dlfree>
c00015a1:	83 c4 10             	add    esp,0x10
c00015a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00015a8:	89 cb                	mov    ebx,ecx
c00015aa:	eb 3e                	jmp    c00015ea <dlrealloc+0x1ab>
c00015ac:	89 f2                	mov    edx,esi
c00015ae:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00015b1:	29 fa                	sub    edx,edi
c00015b3:	83 e1 01             	and    ecx,0x1
c00015b6:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00015ba:	83 fa 0f             	cmp    edx,0xf
c00015bd:	77 0b                	ja     c00015ca <dlrealloc+0x18b>
c00015bf:	09 ce                	or     esi,ecx
c00015c1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00015c4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015c8:	eb 20                	jmp    c00015ea <dlrealloc+0x1ab>
c00015ca:	01 fd                	add    ebp,edi
c00015cc:	83 ca 01             	or     edx,0x1
c00015cf:	09 cf                	or     edi,ecx
c00015d1:	83 ec 0c             	sub    esp,0xc
c00015d4:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00015d7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c00015da:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00015de:	83 c5 08             	add    ebp,0x8
c00015e1:	55                   	push   ebp
c00015e2:	e8 bd f5 ff ff       	call   c0000ba4 <dlfree>
c00015e7:	83 c4 10             	add    esp,0x10
c00015ea:	83 c4 1c             	add    esp,0x1c
c00015ed:	89 d8                	mov    eax,ebx
c00015ef:	5b                   	pop    ebx
c00015f0:	5e                   	pop    esi
c00015f1:	5f                   	pop    edi
c00015f2:	5d                   	pop    ebp
c00015f3:	c3                   	ret    

c00015f4 <dlmemalign>:
c00015f4:	55                   	push   ebp
c00015f5:	57                   	push   edi
c00015f6:	56                   	push   esi
c00015f7:	53                   	push   ebx
c00015f8:	83 ec 0c             	sub    esp,0xc
c00015fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00015ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001603:	83 fa 08             	cmp    edx,0x8
c0001606:	77 10                	ja     c0001618 <dlmemalign+0x24>
c0001608:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000160c:	83 c4 0c             	add    esp,0xc
c000160f:	5b                   	pop    ebx
c0001610:	5e                   	pop    esi
c0001611:	5f                   	pop    edi
c0001612:	5d                   	pop    ebp
c0001613:	e9 ea f8 ff ff       	jmp    c0000f02 <dlmalloc>
c0001618:	bf 10 00 00 00       	mov    edi,0x10
c000161d:	83 fa 0f             	cmp    edx,0xf
c0001620:	76 13                	jbe    c0001635 <dlmemalign+0x41>
c0001622:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001625:	85 d1                	test   ecx,edx
c0001627:	75 04                	jne    c000162d <dlmemalign+0x39>
c0001629:	89 d7                	mov    edi,edx
c000162b:	eb 08                	jmp    c0001635 <dlmemalign+0x41>
c000162d:	39 d7                	cmp    edi,edx
c000162f:	73 04                	jae    c0001635 <dlmemalign+0x41>
c0001631:	01 ff                	add    edi,edi
c0001633:	eb f8                	jmp    c000162d <dlmemalign+0x39>
c0001635:	83 f8 df             	cmp    eax,0xffffffdf
c0001638:	76 07                	jbe    c0001641 <dlmemalign+0x4d>
c000163a:	31 c0                	xor    eax,eax
c000163c:	e9 ce 00 00 00       	jmp    c000170f <dlmemalign+0x11b>
c0001641:	83 c0 0b             	add    eax,0xb
c0001644:	bd 10 00 00 00       	mov    ebp,0x10
c0001649:	83 f8 0f             	cmp    eax,0xf
c000164c:	76 05                	jbe    c0001653 <dlmemalign+0x5f>
c000164e:	83 e0 f8             	and    eax,0xfffffff8
c0001651:	89 c5                	mov    ebp,eax
c0001653:	83 ec 0c             	sub    esp,0xc
c0001656:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000165a:	50                   	push   eax
c000165b:	e8 a2 f8 ff ff       	call   c0000f02 <dlmalloc>
c0001660:	83 c4 10             	add    esp,0x10
c0001663:	89 c1                	mov    ecx,eax
c0001665:	85 c0                	test   eax,eax
c0001667:	74 d1                	je     c000163a <dlmemalign+0x46>
c0001669:	31 d2                	xor    edx,edx
c000166b:	8d 70 f8             	lea    esi,[eax-0x8]
c000166e:	f7 f7                	div    edi
c0001670:	85 d2                	test   edx,edx
c0001672:	74 62                	je     c00016d6 <dlmemalign+0xe2>
c0001674:	89 f8                	mov    eax,edi
c0001676:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000167a:	f7 d8                	neg    eax
c000167c:	21 c3                	and    ebx,eax
c000167e:	83 eb 08             	sub    ebx,0x8
c0001681:	89 d8                	mov    eax,ebx
c0001683:	29 f0                	sub    eax,esi
c0001685:	83 f8 0f             	cmp    eax,0xf
c0001688:	77 02                	ja     c000168c <dlmemalign+0x98>
c000168a:	01 fb                	add    ebx,edi
c000168c:	89 d8                	mov    eax,ebx
c000168e:	29 f0                	sub    eax,esi
c0001690:	89 c6                	mov    esi,eax
c0001692:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001695:	89 c2                	mov    edx,eax
c0001697:	83 e2 fc             	and    edx,0xfffffffc
c000169a:	29 f2                	sub    edx,esi
c000169c:	a8 02                	test   al,0x2
c000169e:	74 10                	je     c00016b0 <dlmemalign+0xbc>
c00016a0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00016a3:	83 ca 02             	or     edx,0x2
c00016a6:	8d 43 08             	lea    eax,[ebx+0x8]
c00016a9:	89 33                	mov    DWORD PTR [ebx],esi
c00016ab:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00016ae:	eb 5f                	jmp    c000170f <dlmemalign+0x11b>
c00016b0:	89 d0                	mov    eax,edx
c00016b2:	83 ec 0c             	sub    esp,0xc
c00016b5:	83 c8 01             	or     eax,0x1
c00016b8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00016bb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00016c0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00016c3:	83 e0 01             	and    eax,0x1
c00016c6:	09 f0                	or     eax,esi
c00016c8:	89 de                	mov    esi,ebx
c00016ca:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00016cd:	51                   	push   ecx
c00016ce:	e8 d1 f4 ff ff       	call   c0000ba4 <dlfree>
c00016d3:	83 c4 10             	add    esp,0x10
c00016d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016d9:	a8 02                	test   al,0x2
c00016db:	75 2f                	jne    c000170c <dlmemalign+0x118>
c00016dd:	83 e0 fc             	and    eax,0xfffffffc
c00016e0:	8d 55 10             	lea    edx,[ebp+0x10]
c00016e3:	39 c2                	cmp    edx,eax
c00016e5:	73 25                	jae    c000170c <dlmemalign+0x118>
c00016e7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00016ea:	29 e8                	sub    eax,ebp
c00016ec:	83 c8 01             	or     eax,0x1
c00016ef:	83 ec 0c             	sub    esp,0xc
c00016f2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00016f5:	83 c2 08             	add    edx,0x8
c00016f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00016fb:	83 e0 01             	and    eax,0x1
c00016fe:	09 c5                	or     ebp,eax
c0001700:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001703:	52                   	push   edx
c0001704:	e8 9b f4 ff ff       	call   c0000ba4 <dlfree>
c0001709:	83 c4 10             	add    esp,0x10
c000170c:	8d 46 08             	lea    eax,[esi+0x8]
c000170f:	83 c4 0c             	add    esp,0xc
c0001712:	5b                   	pop    ebx
c0001713:	5e                   	pop    esi
c0001714:	5f                   	pop    edi
c0001715:	5d                   	pop    ebp
c0001716:	c3                   	ret    

c0001717 <dlcalloc>:
c0001717:	53                   	push   ebx
c0001718:	83 ec 14             	sub    esp,0x14
c000171b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000171f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001724:	50                   	push   eax
c0001725:	e8 d8 f7 ff ff       	call   c0000f02 <dlmalloc>
c000172a:	83 c4 10             	add    esp,0x10
c000172d:	89 c3                	mov    ebx,eax
c000172f:	85 c0                	test   eax,eax
c0001731:	74 77                	je     c00017aa <dlcalloc+0x93>
c0001733:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001736:	89 d0                	mov    eax,edx
c0001738:	83 e0 fc             	and    eax,0xfffffffc
c000173b:	80 e2 02             	and    dl,0x2
c000173e:	75 5a                	jne    c000179a <dlcalloc+0x83>
c0001740:	83 e8 04             	sub    eax,0x4
c0001743:	83 f8 27             	cmp    eax,0x27
c0001746:	76 03                	jbe    c000174b <dlcalloc+0x34>
c0001748:	51                   	push   ecx
c0001749:	eb 53                	jmp    c000179e <dlcalloc+0x87>
c000174b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001751:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001758:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000175f:	83 f8 13             	cmp    eax,0x13
c0001762:	76 46                	jbe    c00017aa <dlcalloc+0x93>
c0001764:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000176b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001772:	83 f8 1b             	cmp    eax,0x1b
c0001775:	76 33                	jbe    c00017aa <dlcalloc+0x93>
c0001777:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000177e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001785:	83 f8 23             	cmp    eax,0x23
c0001788:	76 20                	jbe    c00017aa <dlcalloc+0x93>
c000178a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001791:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001798:	eb 10                	jmp    c00017aa <dlcalloc+0x93>
c000179a:	83 e8 08             	sub    eax,0x8
c000179d:	52                   	push   edx
c000179e:	50                   	push   eax
c000179f:	6a 00                	push   0x0
c00017a1:	53                   	push   ebx
c00017a2:	e8 1a ef ff ff       	call   c00006c1 <memset>
c00017a7:	83 c4 10             	add    esp,0x10
c00017aa:	83 c4 08             	add    esp,0x8
c00017ad:	89 d8                	mov    eax,ebx
c00017af:	5b                   	pop    ebx
c00017b0:	c3                   	ret    

c00017b1 <dlcfree>:
c00017b1:	e9 ee f3 ff ff       	jmp    c0000ba4 <dlfree>

c00017b6 <dlindependent_calloc>:
c00017b6:	83 ec 28             	sub    esp,0x28
c00017b9:	b9 03 00 00 00       	mov    ecx,0x3
c00017be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00017c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00017ca:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00017ce:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00017d2:	e8 b9 fa ff ff       	call   c0001290 <iALLOc>
c00017d7:	83 c4 2c             	add    esp,0x2c
c00017da:	c3                   	ret    

c00017db <dlindependent_comalloc>:
c00017db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00017df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00017e3:	31 c9                	xor    ecx,ecx
c00017e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00017e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00017ed:	e9 9e fa ff ff       	jmp    c0001290 <iALLOc>

c00017f2 <dlvalloc>:
c00017f2:	83 ec 0c             	sub    esp,0xc
c00017f5:	83 3d a0 43 02 c0 00 	cmp    DWORD PTR ds:0xc00243a0,0x0
c00017fc:	75 0a                	jne    c0001808 <dlvalloc+0x16>
c00017fe:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0001803:	e8 b5 f2 ff ff       	call   c0000abd <malloc_consolidate>
c0001808:	50                   	push   eax
c0001809:	50                   	push   eax
c000180a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000180e:	ff 35 fc 46 02 c0    	push   DWORD PTR ds:0xc00246fc
c0001814:	e8 db fd ff ff       	call   c00015f4 <dlmemalign>
c0001819:	83 c4 1c             	add    esp,0x1c
c000181c:	c3                   	ret    

c000181d <dlpvalloc>:
c000181d:	83 ec 0c             	sub    esp,0xc
c0001820:	83 3d a0 43 02 c0 00 	cmp    DWORD PTR ds:0xc00243a0,0x0
c0001827:	75 0a                	jne    c0001833 <dlpvalloc+0x16>
c0001829:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c000182e:	e8 8a f2 ff ff       	call   c0000abd <malloc_consolidate>
c0001833:	52                   	push   edx
c0001834:	a1 fc 46 02 c0       	mov    eax,ds:0xc00246fc
c0001839:	52                   	push   edx
c000183a:	89 c1                	mov    ecx,eax
c000183c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001840:	f7 d9                	neg    ecx
c0001842:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001846:	21 ca                	and    edx,ecx
c0001848:	52                   	push   edx
c0001849:	50                   	push   eax
c000184a:	e8 a5 fd ff ff       	call   c00015f4 <dlmemalign>
c000184f:	83 c4 1c             	add    esp,0x1c
c0001852:	c3                   	ret    

c0001853 <dlmalloc_trim>:
c0001853:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0001858:	e8 60 f2 ff ff       	call   c0000abd <malloc_consolidate>
c000185d:	31 c0                	xor    eax,eax
c000185f:	c3                   	ret    

c0001860 <dlmalloc_usable_size>:
c0001860:	53                   	push   ebx
c0001861:	31 c0                	xor    eax,eax
c0001863:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001867:	85 c9                	test   ecx,ecx
c0001869:	74 24                	je     c000188f <dlmalloc_usable_size+0x2f>
c000186b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000186e:	f6 c2 02             	test   dl,0x2
c0001871:	74 08                	je     c000187b <dlmalloc_usable_size+0x1b>
c0001873:	83 e2 fc             	and    edx,0xfffffffc
c0001876:	8d 42 f8             	lea    eax,[edx-0x8]
c0001879:	eb 14                	jmp    c000188f <dlmalloc_usable_size+0x2f>
c000187b:	89 d3                	mov    ebx,edx
c000187d:	31 c0                	xor    eax,eax
c000187f:	83 e3 fe             	and    ebx,0xfffffffe
c0001882:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001887:	74 06                	je     c000188f <dlmalloc_usable_size+0x2f>
c0001889:	83 e2 fc             	and    edx,0xfffffffc
c000188c:	8d 42 fc             	lea    eax,[edx-0x4]
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlmallinfo>:
c0001891:	55                   	push   ebp
c0001892:	57                   	push   edi
c0001893:	56                   	push   esi
c0001894:	53                   	push   ebx
c0001895:	83 ec 08             	sub    esp,0x8
c0001898:	83 3d cc 43 02 c0 00 	cmp    DWORD PTR ds:0xc00243cc,0x0
c000189f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00018a3:	75 0a                	jne    c00018af <dlmallinfo+0x1e>
c00018a5:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c00018aa:	e8 0e f2 ff ff       	call   c0000abd <malloc_consolidate>
c00018af:	a1 cc 43 02 c0       	mov    eax,ds:0xc00243cc
c00018b4:	31 ed                	xor    ebp,ebp
c00018b6:	31 c9                	xor    ecx,ecx
c00018b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00018bb:	83 e0 fc             	and    eax,0xfffffffc
c00018be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00018c2:	31 c0                	xor    eax,eax
c00018c4:	8b 14 85 a4 43 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdbc5c]
c00018cb:	85 d2                	test   edx,edx
c00018cd:	74 0e                	je     c00018dd <dlmallinfo+0x4c>
c00018cf:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00018d2:	45                   	inc    ebp
c00018d3:	83 e6 fc             	and    esi,0xfffffffc
c00018d6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00018d9:	01 f1                	add    ecx,esi
c00018db:	eb ee                	jmp    c00018cb <dlmallinfo+0x3a>
c00018dd:	40                   	inc    eax
c00018de:	83 f8 0a             	cmp    eax,0xa
c00018e1:	75 e1                	jne    c00018c4 <dlmallinfo+0x33>
c00018e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00018ee:	8d 14 01             	lea    edx,[ecx+eax*1]
c00018f1:	b8 d4 43 02 c0       	mov    eax,0xc00243d4
c00018f6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00018f9:	39 f0                	cmp    eax,esi
c00018fb:	74 10                	je     c000190d <dlmallinfo+0x7c>
c00018fd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001900:	ff 04 24             	inc    DWORD PTR [esp]
c0001903:	83 e7 fc             	and    edi,0xfffffffc
c0001906:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001909:	01 fa                	add    edx,edi
c000190b:	eb ec                	jmp    c00018f9 <dlmallinfo+0x68>
c000190d:	83 c0 08             	add    eax,0x8
c0001910:	3d cc 46 02 c0       	cmp    eax,0xc00246cc
c0001915:	75 df                	jne    c00018f6 <dlmallinfo+0x65>
c0001917:	a1 08 47 02 c0       	mov    eax,ds:0xc0024708
c000191c:	8b 35 f0 46 02 c0    	mov    esi,DWORD PTR ds:0xc00246f0
c0001922:	89 03                	mov    DWORD PTR [ebx],eax
c0001924:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001927:	29 d0                	sub    eax,edx
c0001929:	8b 35 04 47 02 c0    	mov    esi,DWORD PTR ds:0xc0024704
c000192f:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001932:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001935:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001938:	8b 35 14 47 02 c0    	mov    esi,DWORD PTR ds:0xc0024714
c000193e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001942:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001945:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001948:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c000194b:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000194e:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001951:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001954:	83 c4 08             	add    esp,0x8
c0001957:	89 d8                	mov    eax,ebx
c0001959:	5b                   	pop    ebx
c000195a:	5e                   	pop    esi
c000195b:	5f                   	pop    edi
c000195c:	5d                   	pop    ebp
c000195d:	c2 04 00             	ret    0x4

c0001960 <dlmalloc_stats>:
c0001960:	83 ec 30             	sub    esp,0x30
c0001963:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001967:	50                   	push   eax
c0001968:	e8 24 ff ff ff       	call   c0001891 <dlmallinfo>
c000196d:	83 c4 30             	add    esp,0x30
c0001970:	c3                   	ret    

c0001971 <dlmallopt>:
c0001971:	56                   	push   esi
c0001972:	b8 a0 43 02 c0       	mov    eax,0xc00243a0
c0001977:	53                   	push   ebx
c0001978:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000197c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001980:	e8 38 f1 ff ff       	call   c0000abd <malloc_consolidate>
c0001985:	8d 46 04             	lea    eax,[esi+0x4]
c0001988:	83 f8 05             	cmp    eax,0x5
c000198b:	77 67                	ja     c00019f4 <dlmallopt+0x83>
c000198d:	ff 24 85 24 04 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdfbdc]
c0001994:	83 fb 50             	cmp    ebx,0x50
c0001997:	77 5b                	ja     c00019f4 <dlmallopt+0x83>
c0001999:	ba 08 00 00 00       	mov    edx,0x8
c000199e:	85 db                	test   ebx,ebx
c00019a0:	74 12                	je     c00019b4 <dlmallopt+0x43>
c00019a2:	83 c3 0b             	add    ebx,0xb
c00019a5:	ba 10 00 00 00       	mov    edx,0x10
c00019aa:	83 fb 0f             	cmp    ebx,0xf
c00019ad:	76 05                	jbe    c00019b4 <dlmallopt+0x43>
c00019af:	89 da                	mov    edx,ebx
c00019b1:	83 e2 f8             	and    edx,0xfffffff8
c00019b4:	a1 a0 43 02 c0       	mov    eax,ds:0xc00243a0
c00019b9:	83 e0 03             	and    eax,0x3
c00019bc:	09 d0                	or     eax,edx
c00019be:	a3 a0 43 02 c0       	mov    ds:0xc00243a0,eax
c00019c3:	eb 31                	jmp    c00019f6 <dlmallopt+0x85>
c00019c5:	89 1d e4 46 02 c0    	mov    DWORD PTR ds:0xc00246e4,ebx
c00019cb:	eb 06                	jmp    c00019d3 <dlmallopt+0x62>
c00019cd:	89 1d e8 46 02 c0    	mov    DWORD PTR ds:0xc00246e8,ebx
c00019d3:	be 01 00 00 00       	mov    esi,0x1
c00019d8:	eb 1c                	jmp    c00019f6 <dlmallopt+0x85>
c00019da:	89 1d ec 46 02 c0    	mov    DWORD PTR ds:0xc00246ec,ebx
c00019e0:	eb f1                	jmp    c00019d3 <dlmallopt+0x62>
c00019e2:	31 f6                	xor    esi,esi
c00019e4:	85 db                	test   ebx,ebx
c00019e6:	75 0e                	jne    c00019f6 <dlmallopt+0x85>
c00019e8:	c7 05 f4 46 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00246f4,0x0
c00019f2:	eb df                	jmp    c00019d3 <dlmallopt+0x62>
c00019f4:	31 f6                	xor    esi,esi
c00019f6:	5b                   	pop    ebx
c00019f7:	89 f0                	mov    eax,esi
c00019f9:	5e                   	pop    esi
c00019fa:	c3                   	ret    

c00019fb <disk_status>:
c00019fb:	31 c0                	xor    eax,eax
c00019fd:	c3                   	ret    

c00019fe <disk_initialize>:
c00019fe:	31 c0                	xor    eax,eax
c0001a00:	c3                   	ret    

c0001a01 <disk_read>:
c0001a01:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a06:	0f b6 04 85 c0 5c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda340]
c0001a0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a12:	e9 a3 8d 01 00       	jmp    c001a7ba <fatWrapperReadDisk>

c0001a17 <disk_write>:
c0001a17:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a1c:	0f b6 04 85 c0 5c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda340]
c0001a24:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a28:	e9 d8 8d 01 00       	jmp    c001a805 <fatWrapperWriteDisk>

c0001a2d <disk_ioctl>:
c0001a2d:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001a32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001a36:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001a3b:	0f b6 04 85 c0 5c 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffda340]
c0001a43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a47:	e9 04 8e 01 00       	jmp    c001a850 <fatWrapperIoctl>

c0001a4c <ld_word>:
c0001a4c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a50:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a53:	c1 e2 08             	shl    edx,0x8
c0001a56:	09 d0                	or     eax,edx
c0001a58:	c3                   	ret    

c0001a59 <ld_dword>:
c0001a59:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001a5d:	89 d1                	mov    ecx,edx
c0001a5f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a63:	c1 e1 08             	shl    ecx,0x8
c0001a66:	09 ca                	or     edx,ecx
c0001a68:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001a6b:	c1 e2 08             	shl    edx,0x8
c0001a6e:	09 d0                	or     eax,edx
c0001a70:	c3                   	ret    

c0001a71 <ld_qword>:
c0001a71:	57                   	push   edi
c0001a72:	56                   	push   esi
c0001a73:	53                   	push   ebx
c0001a74:	31 db                	xor    ebx,ebx
c0001a76:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001a79:	89 df                	mov    edi,ebx
c0001a7b:	89 ce                	mov    esi,ecx
c0001a7d:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001a81:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a85:	c1 e6 08             	shl    esi,0x8
c0001a88:	09 f2                	or     edx,esi
c0001a8a:	89 d6                	mov    esi,edx
c0001a8c:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001a90:	0f a4 f7 08          	shld   edi,esi,0x8
c0001a94:	c1 e6 08             	shl    esi,0x8
c0001a97:	09 f2                	or     edx,esi
c0001a99:	89 d6                	mov    esi,edx
c0001a9b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001a9f:	0f a4 f7 08          	shld   edi,esi,0x8
c0001aa3:	c1 e6 08             	shl    esi,0x8
c0001aa6:	89 fb                	mov    ebx,edi
c0001aa8:	09 f2                	or     edx,esi
c0001aaa:	89 d1                	mov    ecx,edx
c0001aac:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001ab0:	89 da                	mov    edx,ebx
c0001ab2:	5b                   	pop    ebx
c0001ab3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ab6:	c1 e1 08             	shl    ecx,0x8
c0001ab9:	5e                   	pop    esi
c0001aba:	09 c8                	or     eax,ecx
c0001abc:	5f                   	pop    edi
c0001abd:	c3                   	ret    

c0001abe <st_word>:
c0001abe:	66 89 10             	mov    WORD PTR [eax],dx
c0001ac1:	c3                   	ret    

c0001ac2 <st_dword>:
c0001ac2:	89 10                	mov    DWORD PTR [eax],edx
c0001ac4:	c3                   	ret    

c0001ac5 <st_qword>:
c0001ac5:	89 10                	mov    DWORD PTR [eax],edx
c0001ac7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001aca:	c3                   	ret    

c0001acb <mem_cpy>:
c0001acb:	85 c9                	test   ecx,ecx
c0001acd:	74 10                	je     c0001adf <mem_cpy+0x14>
c0001acf:	57                   	push   edi
c0001ad0:	01 c1                	add    ecx,eax
c0001ad2:	56                   	push   esi
c0001ad3:	89 c7                	mov    edi,eax
c0001ad5:	89 d6                	mov    esi,edx
c0001ad7:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ad8:	39 f9                	cmp    ecx,edi
c0001ada:	75 fb                	jne    c0001ad7 <mem_cpy+0xc>
c0001adc:	5e                   	pop    esi
c0001add:	5f                   	pop    edi
c0001ade:	c3                   	ret    
c0001adf:	c3                   	ret    

c0001ae0 <mem_set>:
c0001ae0:	01 c1                	add    ecx,eax
c0001ae2:	40                   	inc    eax
c0001ae3:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001ae6:	39 c8                	cmp    eax,ecx
c0001ae8:	75 f8                	jne    c0001ae2 <mem_set+0x2>
c0001aea:	c3                   	ret    

c0001aeb <mem_cmp>:
c0001aeb:	57                   	push   edi
c0001aec:	56                   	push   esi
c0001aed:	89 c6                	mov    esi,eax
c0001aef:	53                   	push   ebx
c0001af0:	46                   	inc    esi
c0001af1:	42                   	inc    edx
c0001af2:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001af6:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001afa:	29 fb                	sub    ebx,edi
c0001afc:	89 cf                	mov    edi,ecx
c0001afe:	29 f7                	sub    edi,esi
c0001b00:	01 c7                	add    edi,eax
c0001b02:	74 04                	je     c0001b08 <mem_cmp+0x1d>
c0001b04:	85 db                	test   ebx,ebx
c0001b06:	74 e8                	je     c0001af0 <mem_cmp+0x5>
c0001b08:	89 d8                	mov    eax,ebx
c0001b0a:	5b                   	pop    ebx
c0001b0b:	5e                   	pop    esi
c0001b0c:	5f                   	pop    edi
c0001b0d:	c3                   	ret    

c0001b0e <chk_chr>:
c0001b0e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001b11:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001b14:	74 07                	je     c0001b1d <chk_chr+0xf>
c0001b16:	39 d1                	cmp    ecx,edx
c0001b18:	74 03                	je     c0001b1d <chk_chr+0xf>
c0001b1a:	40                   	inc    eax
c0001b1b:	eb f1                	jmp    c0001b0e <chk_chr>
c0001b1d:	89 c8                	mov    eax,ecx
c0001b1f:	c3                   	ret    

c0001b20 <dbc_1st>:
c0001b20:	31 c0                	xor    eax,eax
c0001b22:	c3                   	ret    

c0001b23 <dbc_2nd>:
c0001b23:	31 c0                	xor    eax,eax
c0001b25:	c3                   	ret    

c0001b26 <tchar2uni>:
c0001b26:	57                   	push   edi
c0001b27:	89 c7                	mov    edi,eax
c0001b29:	56                   	push   esi
c0001b2a:	53                   	push   ebx
c0001b2b:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001b2d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001b2f:	8d 73 01             	lea    esi,[ebx+0x1]
c0001b32:	84 c9                	test   cl,cl
c0001b34:	78 0a                	js     c0001b40 <tchar2uni+0x1a>
c0001b36:	0f b6 d1             	movzx  edx,cl
c0001b39:	89 f3                	mov    ebx,esi
c0001b3b:	e9 9f 00 00 00       	jmp    c0001bdf <tchar2uni+0xb9>
c0001b40:	88 ca                	mov    dl,cl
c0001b42:	83 e2 e0             	and    edx,0xffffffe0
c0001b45:	80 fa c0             	cmp    dl,0xc0
c0001b48:	75 0c                	jne    c0001b56 <tchar2uni+0x30>
c0001b4a:	89 ca                	mov    edx,ecx
c0001b4c:	b9 01 00 00 00       	mov    ecx,0x1
c0001b51:	83 e2 1f             	and    edx,0x1f
c0001b54:	eb 2e                	jmp    c0001b84 <tchar2uni+0x5e>
c0001b56:	88 ca                	mov    dl,cl
c0001b58:	83 e2 f0             	and    edx,0xfffffff0
c0001b5b:	80 fa e0             	cmp    dl,0xe0
c0001b5e:	75 0c                	jne    c0001b6c <tchar2uni+0x46>
c0001b60:	89 ca                	mov    edx,ecx
c0001b62:	b9 02 00 00 00       	mov    ecx,0x2
c0001b67:	83 e2 0f             	and    edx,0xf
c0001b6a:	eb 18                	jmp    c0001b84 <tchar2uni+0x5e>
c0001b6c:	88 ca                	mov    dl,cl
c0001b6e:	83 e2 f8             	and    edx,0xfffffff8
c0001b71:	88 d0                	mov    al,dl
c0001b73:	83 ca ff             	or     edx,0xffffffff
c0001b76:	3c f0                	cmp    al,0xf0
c0001b78:	75 6c                	jne    c0001be6 <tchar2uni+0xc0>
c0001b7a:	89 ca                	mov    edx,ecx
c0001b7c:	b9 03 00 00 00       	mov    ecx,0x3
c0001b81:	83 e2 07             	and    edx,0x7
c0001b84:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001b88:	46                   	inc    esi
c0001b89:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001b8c:	88 c8                	mov    al,cl
c0001b8e:	83 e0 c0             	and    eax,0xffffffc0
c0001b91:	3c 80                	cmp    al,0x80
c0001b93:	75 4e                	jne    c0001be3 <tchar2uni+0xbd>
c0001b95:	c1 e2 06             	shl    edx,0x6
c0001b98:	83 e1 3f             	and    ecx,0x3f
c0001b9b:	09 ca                	or     edx,ecx
c0001b9d:	39 de                	cmp    esi,ebx
c0001b9f:	75 e7                	jne    c0001b88 <tchar2uni+0x62>
c0001ba1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001ba7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001bad:	76 34                	jbe    c0001be3 <tchar2uni+0xbd>
c0001baf:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001bb2:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001bb8:	77 29                	ja     c0001be3 <tchar2uni+0xbd>
c0001bba:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001bc0:	76 1d                	jbe    c0001bdf <tchar2uni+0xb9>
c0001bc2:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001bc8:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001bce:	c1 e1 06             	shl    ecx,0x6
c0001bd1:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001bd7:	09 ca                	or     edx,ecx
c0001bd9:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001bdf:	89 1f                	mov    DWORD PTR [edi],ebx
c0001be1:	eb 03                	jmp    c0001be6 <tchar2uni+0xc0>
c0001be3:	83 ca ff             	or     edx,0xffffffff
c0001be6:	5b                   	pop    ebx
c0001be7:	89 d0                	mov    eax,edx
c0001be9:	5e                   	pop    esi
c0001bea:	5f                   	pop    edi
c0001beb:	c3                   	ret    

c0001bec <put_utf>:
c0001bec:	53                   	push   ebx
c0001bed:	83 f8 7f             	cmp    eax,0x7f
c0001bf0:	89 c3                	mov    ebx,eax
c0001bf2:	b0 00                	mov    al,0x0
c0001bf4:	77 11                	ja     c0001c07 <put_utf+0x1b>
c0001bf6:	85 c9                	test   ecx,ecx
c0001bf8:	0f 84 e5 00 00 00    	je     c0001ce3 <put_utf+0xf7>
c0001bfe:	88 1a                	mov    BYTE PTR [edx],bl
c0001c00:	b0 01                	mov    al,0x1
c0001c02:	e9 dc 00 00 00       	jmp    c0001ce3 <put_utf+0xf7>
c0001c07:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001c0d:	77 23                	ja     c0001c32 <put_utf+0x46>
c0001c0f:	83 f9 01             	cmp    ecx,0x1
c0001c12:	0f 86 cb 00 00 00    	jbe    c0001ce3 <put_utf+0xf7>
c0001c18:	89 d8                	mov    eax,ebx
c0001c1a:	83 e3 3f             	and    ebx,0x3f
c0001c1d:	c1 e8 06             	shr    eax,0x6
c0001c20:	83 cb 80             	or     ebx,0xffffff80
c0001c23:	83 c8 c0             	or     eax,0xffffffc0
c0001c26:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001c29:	88 02                	mov    BYTE PTR [edx],al
c0001c2b:	b0 02                	mov    al,0x2
c0001c2d:	e9 b1 00 00 00       	jmp    c0001ce3 <put_utf+0xf7>
c0001c32:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001c38:	77 40                	ja     c0001c7a <put_utf+0x8e>
c0001c3a:	83 f9 02             	cmp    ecx,0x2
c0001c3d:	0f 86 a0 00 00 00    	jbe    c0001ce3 <put_utf+0xf7>
c0001c43:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001c49:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001c4f:	0f 86 8e 00 00 00    	jbe    c0001ce3 <put_utf+0xf7>
c0001c55:	89 d8                	mov    eax,ebx
c0001c57:	c1 e8 0c             	shr    eax,0xc
c0001c5a:	83 c8 e0             	or     eax,0xffffffe0
c0001c5d:	88 02                	mov    BYTE PTR [edx],al
c0001c5f:	89 d8                	mov    eax,ebx
c0001c61:	c1 e8 06             	shr    eax,0x6
c0001c64:	83 e3 3f             	and    ebx,0x3f
c0001c67:	83 e0 3f             	and    eax,0x3f
c0001c6a:	83 cb 80             	or     ebx,0xffffff80
c0001c6d:	83 c8 80             	or     eax,0xffffff80
c0001c70:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001c73:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001c76:	b0 03                	mov    al,0x3
c0001c78:	eb 69                	jmp    c0001ce3 <put_utf+0xf7>
c0001c7a:	83 f9 03             	cmp    ecx,0x3
c0001c7d:	76 64                	jbe    c0001ce3 <put_utf+0xf7>
c0001c7f:	89 d9                	mov    ecx,ebx
c0001c81:	66 31 c9             	xor    cx,cx
c0001c84:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001c8a:	0f b7 c3             	movzx  eax,bx
c0001c8d:	c1 e9 06             	shr    ecx,0x6
c0001c90:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001c96:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001c9c:	77 43                	ja     c0001ce1 <put_utf+0xf5>
c0001c9e:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001ca4:	77 3b                	ja     c0001ce1 <put_utf+0xf5>
c0001ca6:	09 cb                	or     ebx,ecx
c0001ca8:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001cae:	89 d8                	mov    eax,ebx
c0001cb0:	c1 e8 12             	shr    eax,0x12
c0001cb3:	83 c8 f0             	or     eax,0xfffffff0
c0001cb6:	88 02                	mov    BYTE PTR [edx],al
c0001cb8:	89 d8                	mov    eax,ebx
c0001cba:	c1 e8 0c             	shr    eax,0xc
c0001cbd:	83 e0 3f             	and    eax,0x3f
c0001cc0:	83 c8 80             	or     eax,0xffffff80
c0001cc3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001cc6:	89 d8                	mov    eax,ebx
c0001cc8:	c1 e8 06             	shr    eax,0x6
c0001ccb:	83 e3 3f             	and    ebx,0x3f
c0001cce:	83 e0 3f             	and    eax,0x3f
c0001cd1:	83 cb 80             	or     ebx,0xffffff80
c0001cd4:	83 c8 80             	or     eax,0xffffff80
c0001cd7:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001cda:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001cdd:	b0 04                	mov    al,0x4
c0001cdf:	eb 02                	jmp    c0001ce3 <put_utf+0xf7>
c0001ce1:	31 c0                	xor    eax,eax
c0001ce3:	5b                   	pop    ebx
c0001ce4:	c3                   	ret    

c0001ce5 <clst2sect>:
c0001ce5:	89 c1                	mov    ecx,eax
c0001ce7:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001cea:	83 ea 02             	sub    edx,0x2
c0001ced:	83 e8 02             	sub    eax,0x2
c0001cf0:	39 d0                	cmp    eax,edx
c0001cf2:	76 0d                	jbe    c0001d01 <clst2sect+0x1c>
c0001cf4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001cf8:	f7 e2                	mul    edx
c0001cfa:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001cfd:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001d00:	c3                   	ret    
c0001d01:	31 c0                	xor    eax,eax
c0001d03:	31 d2                	xor    edx,edx
c0001d05:	c3                   	ret    

c0001d06 <clmt_clust>:
c0001d06:	57                   	push   edi
c0001d07:	89 cf                	mov    edi,ecx
c0001d09:	56                   	push   esi
c0001d0a:	89 d6                	mov    esi,edx
c0001d0c:	53                   	push   ebx
c0001d0d:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001d10:	8b 00                	mov    eax,DWORD PTR [eax]
c0001d12:	0f ac fe 09          	shrd   esi,edi,0x9
c0001d16:	c1 ef 09             	shr    edi,0x9
c0001d19:	89 f2                	mov    edx,esi
c0001d1b:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001d1e:	89 f9                	mov    ecx,edi
c0001d20:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001d24:	31 ff                	xor    edi,edi
c0001d26:	57                   	push   edi
c0001d27:	56                   	push   esi
c0001d28:	51                   	push   ecx
c0001d29:	52                   	push   edx
c0001d2a:	e8 dd d7 01 00       	call   c001f50c <__udivdi3>
c0001d2f:	83 c4 10             	add    esp,0x10
c0001d32:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001d34:	85 d2                	test   edx,edx
c0001d36:	74 10                	je     c0001d48 <clmt_clust+0x42>
c0001d38:	39 d0                	cmp    eax,edx
c0001d3a:	72 07                	jb     c0001d43 <clmt_clust+0x3d>
c0001d3c:	29 d0                	sub    eax,edx
c0001d3e:	83 c3 08             	add    ebx,0x8
c0001d41:	eb ef                	jmp    c0001d32 <clmt_clust+0x2c>
c0001d43:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001d46:	89 c2                	mov    edx,eax
c0001d48:	5b                   	pop    ebx
c0001d49:	89 d0                	mov    eax,edx
c0001d4b:	5e                   	pop    esi
c0001d4c:	5f                   	pop    edi
c0001d4d:	c3                   	ret    

c0001d4e <pick_lfn>:
c0001d4e:	55                   	push   ebp
c0001d4f:	57                   	push   edi
c0001d50:	56                   	push   esi
c0001d51:	89 d6                	mov    esi,edx
c0001d53:	53                   	push   ebx
c0001d54:	89 c3                	mov    ebx,eax
c0001d56:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001d59:	e8 ee fc ff ff       	call   c0001a4c <ld_word>
c0001d5e:	66 85 c0             	test   ax,ax
c0001d61:	74 04                	je     c0001d67 <pick_lfn+0x19>
c0001d63:	31 c0                	xor    eax,eax
c0001d65:	eb 5c                	jmp    c0001dc3 <pick_lfn+0x75>
c0001d67:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001d6a:	83 e1 bf             	and    ecx,0xffffffbf
c0001d6d:	bd 01 00 00 00       	mov    ebp,0x1
c0001d72:	49                   	dec    ecx
c0001d73:	31 ff                	xor    edi,edi
c0001d75:	6b c9 0d             	imul   ecx,ecx,0xd
c0001d78:	0f b6 87 40 05 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffdfac0]
c0001d7f:	01 f0                	add    eax,esi
c0001d81:	e8 c6 fc ff ff       	call   c0001a4c <ld_word>
c0001d86:	66 85 ed             	test   bp,bp
c0001d89:	74 11                	je     c0001d9c <pick_lfn+0x4e>
c0001d8b:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001d91:	77 d0                	ja     c0001d63 <pick_lfn+0x15>
c0001d93:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001d97:	89 c5                	mov    ebp,eax
c0001d99:	41                   	inc    ecx
c0001d9a:	eb 04                	jmp    c0001da0 <pick_lfn+0x52>
c0001d9c:	66 40                	inc    ax
c0001d9e:	75 c3                	jne    c0001d63 <pick_lfn+0x15>
c0001da0:	47                   	inc    edi
c0001da1:	83 ff 0d             	cmp    edi,0xd
c0001da4:	75 d2                	jne    c0001d78 <pick_lfn+0x2a>
c0001da6:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001da9:	74 13                	je     c0001dbe <pick_lfn+0x70>
c0001dab:	66 85 ed             	test   bp,bp
c0001dae:	74 0e                	je     c0001dbe <pick_lfn+0x70>
c0001db0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001db6:	77 ab                	ja     c0001d63 <pick_lfn+0x15>
c0001db8:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001dbe:	b8 01 00 00 00       	mov    eax,0x1
c0001dc3:	5b                   	pop    ebx
c0001dc4:	5e                   	pop    esi
c0001dc5:	5f                   	pop    edi
c0001dc6:	5d                   	pop    ebp
c0001dc7:	c3                   	ret    

c0001dc8 <put_lfn>:
c0001dc8:	55                   	push   ebp
c0001dc9:	31 ed                	xor    ebp,ebp
c0001dcb:	57                   	push   edi
c0001dcc:	89 d7                	mov    edi,edx
c0001dce:	56                   	push   esi
c0001dcf:	31 f6                	xor    esi,esi
c0001dd1:	53                   	push   ebx
c0001dd2:	83 ec 08             	sub    esp,0x8
c0001dd5:	89 04 24             	mov    DWORD PTR [esp],eax
c0001dd8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ddc:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ddf:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001de5:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001de8:	31 d2                	xor    edx,edx
c0001dea:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001dee:	e8 cb fc ff ff       	call   c0001abe <st_word>
c0001df3:	0f b6 d9             	movzx  ebx,cl
c0001df6:	4b                   	dec    ebx
c0001df7:	6b db 0d             	imul   ebx,ebx,0xd
c0001dfa:	66 83 fe ff          	cmp    si,0xffff
c0001dfe:	74 08                	je     c0001e08 <put_lfn+0x40>
c0001e00:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e03:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001e07:	43                   	inc    ebx
c0001e08:	0f b6 85 40 05 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffdfac0]
c0001e0f:	0f b7 d6             	movzx  edx,si
c0001e12:	01 f8                	add    eax,edi
c0001e14:	e8 a5 fc ff ff       	call   c0001abe <st_word>
c0001e19:	66 85 f6             	test   si,si
c0001e1c:	75 03                	jne    c0001e21 <put_lfn+0x59>
c0001e1e:	83 ce ff             	or     esi,0xffffffff
c0001e21:	45                   	inc    ebp
c0001e22:	83 fd 0d             	cmp    ebp,0xd
c0001e25:	75 d3                	jne    c0001dfa <put_lfn+0x32>
c0001e27:	66 46                	inc    si
c0001e29:	74 0a                	je     c0001e35 <put_lfn+0x6d>
c0001e2b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001e2e:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0001e33:	75 09                	jne    c0001e3e <put_lfn+0x76>
c0001e35:	88 c8                	mov    al,cl
c0001e37:	83 c8 40             	or     eax,0x40
c0001e3a:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0001e3e:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0001e42:	88 07                	mov    BYTE PTR [edi],al
c0001e44:	83 c4 08             	add    esp,0x8
c0001e47:	5b                   	pop    ebx
c0001e48:	5e                   	pop    esi
c0001e49:	5f                   	pop    edi
c0001e4a:	5d                   	pop    ebp
c0001e4b:	c3                   	ret    

c0001e4c <gen_numname>:
c0001e4c:	57                   	push   edi
c0001e4d:	89 cf                	mov    edi,ecx
c0001e4f:	56                   	push   esi
c0001e50:	b9 0b 00 00 00       	mov    ecx,0xb
c0001e55:	53                   	push   ebx
c0001e56:	89 c6                	mov    esi,eax
c0001e58:	83 ec 10             	sub    esp,0x10
c0001e5b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0001e5f:	e8 67 fc ff ff       	call   c0001acb <mem_cpy>
c0001e64:	83 fb 05             	cmp    ebx,0x5
c0001e67:	76 2d                	jbe    c0001e96 <gen_numname+0x4a>
c0001e69:	66 8b 07             	mov    ax,WORD PTR [edi]
c0001e6c:	66 85 c0             	test   ax,ax
c0001e6f:	74 25                	je     c0001e96 <gen_numname+0x4a>
c0001e71:	83 c7 02             	add    edi,0x2
c0001e74:	ba 10 00 00 00       	mov    edx,0x10
c0001e79:	89 c1                	mov    ecx,eax
c0001e7b:	01 db                	add    ebx,ebx
c0001e7d:	66 d1 e8             	shr    ax,1
c0001e80:	83 e1 01             	and    ecx,0x1
c0001e83:	01 cb                	add    ebx,ecx
c0001e85:	0f ba e3 10          	bt     ebx,0x10
c0001e89:	73 06                	jae    c0001e91 <gen_numname+0x45>
c0001e8b:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0001e91:	4a                   	dec    edx
c0001e92:	75 e5                	jne    c0001e79 <gen_numname+0x2d>
c0001e94:	eb d3                	jmp    c0001e69 <gen_numname+0x1d>
c0001e96:	b8 07 00 00 00       	mov    eax,0x7
c0001e9b:	88 d9                	mov    cl,bl
c0001e9d:	83 e1 0f             	and    ecx,0xf
c0001ea0:	8d 51 30             	lea    edx,[ecx+0x30]
c0001ea3:	80 fa 39             	cmp    dl,0x39
c0001ea6:	76 03                	jbe    c0001eab <gen_numname+0x5f>
c0001ea8:	8d 51 37             	lea    edx,[ecx+0x37]
c0001eab:	8d 48 ff             	lea    ecx,[eax-0x1]
c0001eae:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0001eb2:	89 da                	mov    edx,ebx
c0001eb4:	c1 ea 04             	shr    edx,0x4
c0001eb7:	83 fb 0f             	cmp    ebx,0xf
c0001eba:	76 06                	jbe    c0001ec2 <gen_numname+0x76>
c0001ebc:	89 c8                	mov    eax,ecx
c0001ebe:	89 d3                	mov    ebx,edx
c0001ec0:	eb d9                	jmp    c0001e9b <gen_numname+0x4f>
c0001ec2:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c0001ec7:	31 d2                	xor    edx,edx
c0001ec9:	8d 58 fe             	lea    ebx,[eax-0x2]
c0001ecc:	8d 04 16             	lea    eax,[esi+edx*1]
c0001ecf:	39 ca                	cmp    edx,ecx
c0001ed1:	73 18                	jae    c0001eeb <gen_numname+0x9f>
c0001ed3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001ed6:	3c 20                	cmp    al,0x20
c0001ed8:	74 11                	je     c0001eeb <gen_numname+0x9f>
c0001eda:	e8 41 fc ff ff       	call   c0001b20 <dbc_1st>
c0001edf:	85 c0                	test   eax,eax
c0001ee1:	74 05                	je     c0001ee8 <gen_numname+0x9c>
c0001ee3:	39 d3                	cmp    ebx,edx
c0001ee5:	74 04                	je     c0001eeb <gen_numname+0x9f>
c0001ee7:	42                   	inc    edx
c0001ee8:	42                   	inc    edx
c0001ee9:	eb e1                	jmp    c0001ecc <gen_numname+0x80>
c0001eeb:	b0 20                	mov    al,0x20
c0001eed:	83 f9 07             	cmp    ecx,0x7
c0001ef0:	77 05                	ja     c0001ef7 <gen_numname+0xab>
c0001ef2:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0001ef6:	41                   	inc    ecx
c0001ef7:	42                   	inc    edx
c0001ef8:	83 fa 07             	cmp    edx,0x7
c0001efb:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0001eff:	76 ea                	jbe    c0001eeb <gen_numname+0x9f>
c0001f01:	83 c4 10             	add    esp,0x10
c0001f04:	5b                   	pop    ebx
c0001f05:	5e                   	pop    esi
c0001f06:	5f                   	pop    edi
c0001f07:	c3                   	ret    

c0001f08 <sum_sfn>:
c0001f08:	31 c9                	xor    ecx,ecx
c0001f0a:	31 d2                	xor    edx,edx
c0001f0c:	d0 ca                	ror    dl,1
c0001f0e:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0001f11:	41                   	inc    ecx
c0001f12:	83 f9 0b             	cmp    ecx,0xb
c0001f15:	75 f5                	jne    c0001f0c <sum_sfn+0x4>
c0001f17:	88 d0                	mov    al,dl
c0001f19:	c3                   	ret    

c0001f1a <xdir_sum>:
c0001f1a:	56                   	push   esi
c0001f1b:	31 c9                	xor    ecx,ecx
c0001f1d:	53                   	push   ebx
c0001f1e:	31 d2                	xor    edx,edx
c0001f20:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0001f24:	43                   	inc    ebx
c0001f25:	c1 e3 05             	shl    ebx,0x5
c0001f28:	83 fa 02             	cmp    edx,0x2
c0001f2b:	74 0b                	je     c0001f38 <xdir_sum+0x1e>
c0001f2d:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0001f31:	66 d1 c9             	ror    cx,1
c0001f34:	01 f1                	add    ecx,esi
c0001f36:	eb 05                	jmp    c0001f3d <xdir_sum+0x23>
c0001f38:	ba 03 00 00 00       	mov    edx,0x3
c0001f3d:	42                   	inc    edx
c0001f3e:	39 d3                	cmp    ebx,edx
c0001f40:	77 e6                	ja     c0001f28 <xdir_sum+0xe>
c0001f42:	5b                   	pop    ebx
c0001f43:	89 c8                	mov    eax,ecx
c0001f45:	5e                   	pop    esi
c0001f46:	c3                   	ret    

c0001f47 <xsum32>:
c0001f47:	d1 ca                	ror    edx,1
c0001f49:	0f b6 c0             	movzx  eax,al
c0001f4c:	01 d0                	add    eax,edx
c0001f4e:	c3                   	ret    

c0001f4f <get_xfileinfo>:
c0001f4f:	55                   	push   ebp
c0001f50:	31 c9                	xor    ecx,ecx
c0001f52:	57                   	push   edi
c0001f53:	bd 40 00 00 00       	mov    ebp,0x40
c0001f58:	56                   	push   esi
c0001f59:	31 ff                	xor    edi,edi
c0001f5b:	53                   	push   ebx
c0001f5c:	89 c6                	mov    esi,eax
c0001f5e:	83 ec 0c             	sub    esp,0xc
c0001f61:	89 d3                	mov    ebx,edx
c0001f63:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0001f6a:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0001f6e:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0001f71:	76 6d                	jbe    c0001fe0 <get_xfileinfo+0x91>
c0001f73:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c0001f79:	76 0b                	jbe    c0001f86 <get_xfileinfo+0x37>
c0001f7b:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0001f7f:	bf 01 00 00 00       	mov    edi,0x1
c0001f84:	eb 63                	jmp    c0001fe9 <get_xfileinfo+0x9a>
c0001f86:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0001f8c:	75 03                	jne    c0001f91 <get_xfileinfo+0x42>
c0001f8e:	83 c5 02             	add    ebp,0x2
c0001f91:	8d 04 2e             	lea    eax,[esi+ebp*1]
c0001f94:	83 c5 02             	add    ebp,0x2
c0001f97:	e8 b0 fa ff ff       	call   c0001a4c <ld_word>
c0001f9c:	ff 04 24             	inc    DWORD PTR [esp]
c0001f9f:	66 85 c9             	test   cx,cx
c0001fa2:	75 0d                	jne    c0001fb1 <get_xfileinfo+0x62>
c0001fa4:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0001faa:	66 81 fa ff 07       	cmp    dx,0x7ff
c0001faf:	76 2b                	jbe    c0001fdc <get_xfileinfo+0x8d>
c0001fb1:	c1 e1 10             	shl    ecx,0x10
c0001fb4:	ba ff 00 00 00       	mov    edx,0xff
c0001fb9:	29 fa                	sub    edx,edi
c0001fbb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001fbf:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0001fc3:	0f b7 c0             	movzx  eax,ax
c0001fc6:	09 c8                	or     eax,ecx
c0001fc8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001fcc:	e8 1b fc ff ff       	call   c0001bec <put_utf>
c0001fd1:	84 c0                	test   al,al
c0001fd3:	74 a6                	je     c0001f7b <get_xfileinfo+0x2c>
c0001fd5:	0f b6 c0             	movzx  eax,al
c0001fd8:	01 c7                	add    edi,eax
c0001fda:	31 c0                	xor    eax,eax
c0001fdc:	89 c1                	mov    ecx,eax
c0001fde:	eb 8a                	jmp    c0001f6a <get_xfileinfo+0x1b>
c0001fe0:	85 ff                	test   edi,edi
c0001fe2:	74 97                	je     c0001f7b <get_xfileinfo+0x2c>
c0001fe4:	66 85 c9             	test   cx,cx
c0001fe7:	75 92                	jne    c0001f7b <get_xfileinfo+0x2c>
c0001fe9:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0001fee:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0001ff2:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c0001ff5:	31 c0                	xor    eax,eax
c0001ff7:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0001ffa:	31 d2                	xor    edx,edx
c0001ffc:	80 e1 10             	and    cl,0x10
c0001fff:	75 08                	jne    c0002009 <get_xfileinfo+0xba>
c0002001:	8d 46 38             	lea    eax,[esi+0x38]
c0002004:	e8 68 fa ff ff       	call   c0001a71 <ld_qword>
c0002009:	89 03                	mov    DWORD PTR [ebx],eax
c000200b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000200e:	8d 46 0c             	lea    eax,[esi+0xc]
c0002011:	e8 36 fa ff ff       	call   c0001a4c <ld_word>
c0002016:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000201a:	8d 46 0e             	lea    eax,[esi+0xe]
c000201d:	e8 2a fa ff ff       	call   c0001a4c <ld_word>
c0002022:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0002026:	83 c4 0c             	add    esp,0xc
c0002029:	5b                   	pop    ebx
c000202a:	5e                   	pop    esi
c000202b:	5f                   	pop    edi
c000202c:	5d                   	pop    ebp
c000202d:	c3                   	ret    

c000202e <get_ldnumber>:
c000202e:	57                   	push   edi
c000202f:	56                   	push   esi
c0002030:	53                   	push   ebx
c0002031:	83 cb ff             	or     ebx,0xffffffff
c0002034:	8b 10                	mov    edx,DWORD PTR [eax]
c0002036:	85 d2                	test   edx,edx
c0002038:	74 34                	je     c000206e <get_ldnumber+0x40>
c000203a:	89 c7                	mov    edi,eax
c000203c:	89 d1                	mov    ecx,edx
c000203e:	41                   	inc    ecx
c000203f:	8a 41 ff             	mov    al,BYTE PTR [ecx-0x1]
c0002042:	3c 1f                	cmp    al,0x1f
c0002044:	76 04                	jbe    c000204a <get_ldnumber+0x1c>
c0002046:	3c 3a                	cmp    al,0x3a
c0002048:	75 f4                	jne    c000203e <get_ldnumber+0x10>
c000204a:	31 db                	xor    ebx,ebx
c000204c:	3c 3a                	cmp    al,0x3a
c000204e:	75 1e                	jne    c000206e <get_ldnumber+0x40>
c0002050:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002053:	83 cb ff             	or     ebx,0xffffffff
c0002056:	8d 46 d0             	lea    eax,[esi-0x30]
c0002059:	3c 09                	cmp    al,0x9
c000205b:	77 11                	ja     c000206e <get_ldnumber+0x40>
c000205d:	83 c2 02             	add    edx,0x2
c0002060:	39 d1                	cmp    ecx,edx
c0002062:	75 0a                	jne    c000206e <get_ldnumber+0x40>
c0002064:	89 f0                	mov    eax,esi
c0002066:	89 0f                	mov    DWORD PTR [edi],ecx
c0002068:	0f be d8             	movsx  ebx,al
c000206b:	83 eb 30             	sub    ebx,0x30
c000206e:	89 d8                	mov    eax,ebx
c0002070:	5b                   	pop    ebx
c0002071:	5e                   	pop    esi
c0002072:	5f                   	pop    edi
c0002073:	c3                   	ret    

c0002074 <crc32>:
c0002074:	56                   	push   esi
c0002075:	89 d6                	mov    esi,edx
c0002077:	53                   	push   ebx
c0002078:	b2 01                	mov    dl,0x1
c000207a:	bb 08 00 00 00       	mov    ebx,0x8
c000207f:	89 f1                	mov    ecx,esi
c0002081:	84 d1                	test   cl,dl
c0002083:	0f 95 c1             	setne  cl
c0002086:	0f b6 c9             	movzx  ecx,cl
c0002089:	31 c1                	xor    ecx,eax
c000208b:	89 c8                	mov    eax,ecx
c000208d:	d1 e8                	shr    eax,1
c000208f:	80 e1 01             	and    cl,0x1
c0002092:	74 05                	je     c0002099 <crc32+0x25>
c0002094:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002099:	01 d2                	add    edx,edx
c000209b:	4b                   	dec    ebx
c000209c:	75 e1                	jne    c000207f <crc32+0xb>
c000209e:	5b                   	pop    ebx
c000209f:	5e                   	pop    esi
c00020a0:	c3                   	ret    

c00020a1 <test_gpt_header>:
c00020a1:	55                   	push   ebp
c00020a2:	b9 10 00 00 00       	mov    ecx,0x10
c00020a7:	57                   	push   edi
c00020a8:	ba 40 04 02 c0       	mov    edx,0xc0020440
c00020ad:	56                   	push   esi
c00020ae:	31 ff                	xor    edi,edi
c00020b0:	53                   	push   ebx
c00020b1:	89 c3                	mov    ebx,eax
c00020b3:	e8 33 fa ff ff       	call   c0001aeb <mem_cmp>
c00020b8:	85 c0                	test   eax,eax
c00020ba:	75 55                	jne    c0002111 <test_gpt_header+0x70>
c00020bc:	89 c7                	mov    edi,eax
c00020be:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00020c3:	83 ce ff             	or     esi,0xffffffff
c00020c6:	31 d2                	xor    edx,edx
c00020c8:	83 fd 03             	cmp    ebp,0x3
c00020cb:	76 05                	jbe    c00020d2 <test_gpt_header+0x31>
c00020cd:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00020d2:	89 f0                	mov    eax,esi
c00020d4:	45                   	inc    ebp
c00020d5:	e8 9a ff ff ff       	call   c0002074 <crc32>
c00020da:	83 fd 4c             	cmp    ebp,0x4c
c00020dd:	89 c6                	mov    esi,eax
c00020df:	75 e5                	jne    c00020c6 <test_gpt_header+0x25>
c00020e1:	8d 43 10             	lea    eax,[ebx+0x10]
c00020e4:	e8 70 f9 ff ff       	call   c0001a59 <ld_dword>
c00020e9:	f7 d6                	not    esi
c00020eb:	39 c6                	cmp    esi,eax
c00020ed:	75 22                	jne    c0002111 <test_gpt_header+0x70>
c00020ef:	8d 43 54             	lea    eax,[ebx+0x54]
c00020f2:	e8 62 f9 ff ff       	call   c0001a59 <ld_dword>
c00020f7:	83 c0 80             	add    eax,0xffffff80
c00020fa:	75 15                	jne    c0002111 <test_gpt_header+0x70>
c00020fc:	8d 43 50             	lea    eax,[ebx+0x50]
c00020ff:	e8 55 f9 ff ff       	call   c0001a59 <ld_dword>
c0002104:	3d 80 00 00 00       	cmp    eax,0x80
c0002109:	0f 96 c0             	setbe  al
c000210c:	0f b6 c0             	movzx  eax,al
c000210f:	89 c7                	mov    edi,eax
c0002111:	5b                   	pop    ebx
c0002112:	89 f8                	mov    eax,edi
c0002114:	5e                   	pop    esi
c0002115:	5f                   	pop    edi
c0002116:	5d                   	pop    ebp
c0002117:	c3                   	ret    

c0002118 <make_rand>:
c0002118:	56                   	push   esi
c0002119:	85 c0                	test   eax,eax
c000211b:	53                   	push   ebx
c000211c:	75 05                	jne    c0002123 <make_rand+0xb>
c000211e:	b8 01 00 00 00       	mov    eax,0x1
c0002123:	01 d1                	add    ecx,edx
c0002125:	bb 08 00 00 00       	mov    ebx,0x8
c000212a:	89 c6                	mov    esi,eax
c000212c:	d1 e8                	shr    eax,1
c000212e:	83 e6 01             	and    esi,0x1
c0002131:	85 f6                	test   esi,esi
c0002133:	74 05                	je     c000213a <make_rand+0x22>
c0002135:	35 00 00 00 a3       	xor    eax,0xa3000000
c000213a:	4b                   	dec    ebx
c000213b:	75 ed                	jne    c000212a <make_rand+0x12>
c000213d:	42                   	inc    edx
c000213e:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c0002141:	39 ca                	cmp    edx,ecx
c0002143:	75 e0                	jne    c0002125 <make_rand+0xd>
c0002145:	5b                   	pop    ebx
c0002146:	5e                   	pop    esi
c0002147:	c3                   	ret    

c0002148 <validate>:
c0002148:	56                   	push   esi
c0002149:	89 d6                	mov    esi,edx
c000214b:	53                   	push   ebx
c000214c:	85 c0                	test   eax,eax
c000214e:	51                   	push   ecx
c000214f:	75 09                	jne    c000215a <validate+0x12>
c0002151:	b8 09 00 00 00       	mov    eax,0x9
c0002156:	31 c9                	xor    ecx,ecx
c0002158:	eb 2f                	jmp    c0002189 <validate+0x41>
c000215a:	89 c3                	mov    ebx,eax
c000215c:	8b 00                	mov    eax,DWORD PTR [eax]
c000215e:	85 c0                	test   eax,eax
c0002160:	74 ef                	je     c0002151 <validate+0x9>
c0002162:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002165:	74 ea                	je     c0002151 <validate+0x9>
c0002167:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c000216b:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000216f:	75 e0                	jne    c0002151 <validate+0x9>
c0002171:	83 ec 0c             	sub    esp,0xc
c0002174:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002178:	50                   	push   eax
c0002179:	e8 7d f8 ff ff       	call   c00019fb <disk_status>
c000217e:	83 c4 10             	add    esp,0x10
c0002181:	a8 01                	test   al,0x1
c0002183:	75 cc                	jne    c0002151 <validate+0x9>
c0002185:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002187:	31 c0                	xor    eax,eax
c0002189:	89 0e                	mov    DWORD PTR [esi],ecx
c000218b:	5a                   	pop    edx
c000218c:	5b                   	pop    ebx
c000218d:	5e                   	pop    esi
c000218e:	c3                   	ret    

c000218f <sync_window>:
c000218f:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002193:	0f 84 85 00 00 00    	je     c000221e <sync_window+0x8f>
c0002199:	55                   	push   ebp
c000219a:	8d 68 54             	lea    ebp,[eax+0x54]
c000219d:	57                   	push   edi
c000219e:	56                   	push   esi
c000219f:	53                   	push   ebx
c00021a0:	89 c3                	mov    ebx,eax
c00021a2:	83 ec 28             	sub    esp,0x28
c00021a5:	6a 01                	push   0x1
c00021a7:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00021aa:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00021ad:	55                   	push   ebp
c00021ae:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021b2:	50                   	push   eax
c00021b3:	e8 5f f8 ff ff       	call   c0001a17 <disk_write>
c00021b8:	83 c4 20             	add    esp,0x20
c00021bb:	ba 01 00 00 00       	mov    edx,0x1
c00021c0:	85 c0                	test   eax,eax
c00021c2:	75 50                	jne    c0002214 <sync_window+0x85>
c00021c4:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00021c7:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00021ca:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00021ce:	89 c6                	mov    esi,eax
c00021d0:	31 ff                	xor    edi,edi
c00021d2:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00021d5:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00021d8:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00021dc:	89 d7                	mov    edi,edx
c00021de:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00021e2:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00021e5:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00021e9:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00021ed:	73 23                	jae    c0002212 <sync_window+0x83>
c00021ef:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00021f3:	75 1d                	jne    c0002212 <sync_window+0x83>
c00021f5:	83 ec 0c             	sub    esp,0xc
c00021f8:	6a 01                	push   0x1
c00021fa:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00021fe:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0002202:	52                   	push   edx
c0002203:	50                   	push   eax
c0002204:	55                   	push   ebp
c0002205:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002209:	50                   	push   eax
c000220a:	e8 08 f8 ff ff       	call   c0001a17 <disk_write>
c000220f:	83 c4 20             	add    esp,0x20
c0002212:	31 d2                	xor    edx,edx
c0002214:	83 c4 1c             	add    esp,0x1c
c0002217:	89 d0                	mov    eax,edx
c0002219:	5b                   	pop    ebx
c000221a:	5e                   	pop    esi
c000221b:	5f                   	pop    edi
c000221c:	5d                   	pop    ebp
c000221d:	c3                   	ret    
c000221e:	31 d2                	xor    edx,edx
c0002220:	89 d0                	mov    eax,edx
c0002222:	c3                   	ret    

c0002223 <move_window>:
c0002223:	56                   	push   esi
c0002224:	53                   	push   ebx
c0002225:	89 c3                	mov    ebx,eax
c0002227:	83 ec 14             	sub    esp,0x14
c000222a:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000222d:	75 07                	jne    c0002236 <move_window+0x13>
c000222f:	31 f6                	xor    esi,esi
c0002231:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002234:	74 59                	je     c000228f <move_window+0x6c>
c0002236:	89 d8                	mov    eax,ebx
c0002238:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000223c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002240:	e8 4a ff ff ff       	call   c000218f <sync_window>
c0002245:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002249:	89 c6                	mov    esi,eax
c000224b:	85 c0                	test   eax,eax
c000224d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002251:	75 3c                	jne    c000228f <move_window+0x6c>
c0002253:	83 ec 0c             	sub    esp,0xc
c0002256:	8d 43 54             	lea    eax,[ebx+0x54]
c0002259:	6a 01                	push   0x1
c000225b:	51                   	push   ecx
c000225c:	52                   	push   edx
c000225d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0002261:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002265:	50                   	push   eax
c0002266:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000226a:	50                   	push   eax
c000226b:	e8 91 f7 ff ff       	call   c0001a01 <disk_read>
c0002270:	83 c4 20             	add    esp,0x20
c0002273:	85 c0                	test   eax,eax
c0002275:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002279:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000227d:	74 0a                	je     c0002289 <move_window+0x66>
c000227f:	83 ca ff             	or     edx,0xffffffff
c0002282:	be 01 00 00 00       	mov    esi,0x1
c0002287:	89 d1                	mov    ecx,edx
c0002289:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c000228c:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000228f:	83 c4 14             	add    esp,0x14
c0002292:	89 f0                	mov    eax,esi
c0002294:	5b                   	pop    ebx
c0002295:	5e                   	pop    esi
c0002296:	c3                   	ret    

c0002297 <check_fs>:
c0002297:	53                   	push   ebx
c0002298:	89 c3                	mov    ebx,eax
c000229a:	83 ec 08             	sub    esp,0x8
c000229d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022a1:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00022a8:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00022af:	e8 6f ff ff ff       	call   c0002223 <move_window>
c00022b4:	ba 04 00 00 00       	mov    edx,0x4
c00022b9:	85 c0                	test   eax,eax
c00022bb:	0f 85 89 00 00 00    	jne    c000234a <check_fs+0xb3>
c00022c1:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00022c7:	e8 80 f7 ff ff       	call   c0001a4c <ld_word>
c00022cc:	ba 03 00 00 00       	mov    edx,0x3
c00022d1:	66 3d 55 aa          	cmp    ax,0xaa55
c00022d5:	75 73                	jne    c000234a <check_fs+0xb3>
c00022d7:	ba 60 05 02 c0       	mov    edx,0xc0020560
c00022dc:	8d 43 54             	lea    eax,[ebx+0x54]
c00022df:	b9 0b 00 00 00       	mov    ecx,0xb
c00022e4:	e8 02 f8 ff ff       	call   c0001aeb <mem_cmp>
c00022e9:	ba 01 00 00 00       	mov    edx,0x1
c00022ee:	85 c0                	test   eax,eax
c00022f0:	74 58                	je     c000234a <check_fs+0xb3>
c00022f2:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00022f5:	8d 50 18             	lea    edx,[eax+0x18]
c00022f8:	80 fa 01             	cmp    dl,0x1
c00022fb:	76 09                	jbe    c0002306 <check_fs+0x6f>
c00022fd:	ba 02 00 00 00       	mov    edx,0x2
c0002302:	3c eb                	cmp    al,0xeb
c0002304:	75 44                	jne    c000234a <check_fs+0xb3>
c0002306:	ba ac 32 02 c0       	mov    edx,0xc00232ac
c000230b:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c0002311:	b9 03 00 00 00       	mov    ecx,0x3
c0002316:	e8 d0 f7 ff ff       	call   c0001aeb <mem_cmp>
c000231b:	31 d2                	xor    edx,edx
c000231d:	85 c0                	test   eax,eax
c000231f:	74 29                	je     c000234a <check_fs+0xb3>
c0002321:	ba 6c 05 02 c0       	mov    edx,0xc002056c
c0002326:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c000232c:	b9 05 00 00 00       	mov    ecx,0x5
c0002331:	e8 b5 f7 ff ff       	call   c0001aeb <mem_cmp>
c0002336:	31 d2                	xor    edx,edx
c0002338:	85 c0                	test   eax,eax
c000233a:	74 0e                	je     c000234a <check_fs+0xb3>
c000233c:	31 d2                	xor    edx,edx
c000233e:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002345:	0f 95 c2             	setne  dl
c0002348:	01 d2                	add    edx,edx
c000234a:	83 c4 08             	add    esp,0x8
c000234d:	89 d0                	mov    eax,edx
c000234f:	5b                   	pop    ebx
c0002350:	c3                   	ret    

c0002351 <find_volume>:
c0002351:	55                   	push   ebp
c0002352:	31 c9                	xor    ecx,ecx
c0002354:	57                   	push   edi
c0002355:	56                   	push   esi
c0002356:	89 d6                	mov    esi,edx
c0002358:	53                   	push   ebx
c0002359:	31 d2                	xor    edx,edx
c000235b:	83 ec 3c             	sub    esp,0x3c
c000235e:	89 c3                	mov    ebx,eax
c0002360:	e8 32 ff ff ff       	call   c0002297 <check_fs>
c0002365:	83 f8 02             	cmp    eax,0x2
c0002368:	74 0e                	je     c0002378 <find_volume+0x27>
c000236a:	0f 87 56 01 00 00    	ja     c00024c6 <find_volume+0x175>
c0002370:	85 f6                	test   esi,esi
c0002372:	0f 84 4e 01 00 00    	je     c00024c6 <find_volume+0x175>
c0002378:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000237f:	0f 85 df 00 00 00    	jne    c0002464 <find_volume+0x113>
c0002385:	31 c9                	xor    ecx,ecx
c0002387:	ba 01 00 00 00       	mov    edx,0x1
c000238c:	89 d8                	mov    eax,ebx
c000238e:	e8 90 fe ff ff       	call   c0002223 <move_window>
c0002393:	85 c0                	test   eax,eax
c0002395:	74 0a                	je     c00023a1 <find_volume+0x50>
c0002397:	b8 04 00 00 00       	mov    eax,0x4
c000239c:	e9 25 01 00 00       	jmp    c00024c6 <find_volume+0x175>
c00023a1:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00023a4:	89 e8                	mov    eax,ebp
c00023a6:	e8 f6 fc ff ff       	call   c00020a1 <test_gpt_header>
c00023ab:	85 c0                	test   eax,eax
c00023ad:	75 0a                	jne    c00023b9 <find_volume+0x68>
c00023af:	b8 03 00 00 00       	mov    eax,0x3
c00023b4:	e9 0d 01 00 00       	jmp    c00024c6 <find_volume+0x175>
c00023b9:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00023bf:	e8 95 f6 ff ff       	call   c0001a59 <ld_dword>
c00023c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00023c8:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00023ce:	e8 9e f6 ff ff       	call   c0001a71 <ld_qword>
c00023d3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00023db:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00023df:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00023e3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00023eb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00023ef:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00023f3:	74 ba                	je     c00023af <find_volume+0x5e>
c00023f5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00023f9:	31 c9                	xor    ecx,ecx
c00023fb:	c1 e7 07             	shl    edi,0x7
c00023fe:	89 d8                	mov    eax,ebx
c0002400:	89 fa                	mov    edx,edi
c0002402:	c1 ea 09             	shr    edx,0x9
c0002405:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002409:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c000240d:	e8 11 fe ff ff       	call   c0002223 <move_window>
c0002412:	85 c0                	test   eax,eax
c0002414:	75 81                	jne    c0002397 <find_volume+0x46>
c0002416:	81 e7 80 01 00 00    	and    edi,0x180
c000241c:	b9 10 00 00 00       	mov    ecx,0x10
c0002421:	ba 50 05 02 c0       	mov    edx,0xc0020550
c0002426:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000242a:	e8 bc f6 ff ff       	call   c0001aeb <mem_cmp>
c000242f:	85 c0                	test   eax,eax
c0002431:	75 2b                	jne    c000245e <find_volume+0x10d>
c0002433:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002437:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c000243b:	e8 31 f6 ff ff       	call   c0001a71 <ld_qword>
c0002440:	89 d1                	mov    ecx,edx
c0002442:	89 c2                	mov    edx,eax
c0002444:	89 d8                	mov    eax,ebx
c0002446:	e8 4c fe ff ff       	call   c0002297 <check_fs>
c000244b:	85 f6                	test   esi,esi
c000244d:	75 05                	jne    c0002454 <find_volume+0x103>
c000244f:	83 f8 01             	cmp    eax,0x1
c0002452:	76 72                	jbe    c00024c6 <find_volume+0x175>
c0002454:	85 f6                	test   esi,esi
c0002456:	74 06                	je     c000245e <find_volume+0x10d>
c0002458:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000245c:	74 68                	je     c00024c6 <find_volume+0x175>
c000245e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002462:	eb 87                	jmp    c00023eb <find_volume+0x9a>
c0002464:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002468:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c000246e:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c0002474:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002478:	89 cd                	mov    ebp,ecx
c000247a:	89 f8                	mov    eax,edi
c000247c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002480:	e8 d4 f5 ff ff       	call   c0001a59 <ld_dword>
c0002485:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002489:	83 c7 10             	add    edi,0x10
c000248c:	83 c1 04             	add    ecx,0x4
c000248f:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0002492:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002496:	75 e2                	jne    c000247a <find_volume+0x129>
c0002498:	31 ff                	xor    edi,edi
c000249a:	85 f6                	test   esi,esi
c000249c:	74 03                	je     c00024a1 <find_volume+0x150>
c000249e:	8d 7e ff             	lea    edi,[esi-0x1]
c00024a1:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00024a5:	b8 03 00 00 00       	mov    eax,0x3
c00024aa:	85 d2                	test   edx,edx
c00024ac:	74 09                	je     c00024b7 <find_volume+0x166>
c00024ae:	31 c9                	xor    ecx,ecx
c00024b0:	89 d8                	mov    eax,ebx
c00024b2:	e8 e0 fd ff ff       	call   c0002297 <check_fs>
c00024b7:	85 f6                	test   esi,esi
c00024b9:	75 0b                	jne    c00024c6 <find_volume+0x175>
c00024bb:	83 f8 01             	cmp    eax,0x1
c00024be:	76 06                	jbe    c00024c6 <find_volume+0x175>
c00024c0:	47                   	inc    edi
c00024c1:	83 ff 03             	cmp    edi,0x3
c00024c4:	76 db                	jbe    c00024a1 <find_volume+0x150>
c00024c6:	83 c4 3c             	add    esp,0x3c
c00024c9:	5b                   	pop    ebx
c00024ca:	5e                   	pop    esi
c00024cb:	5f                   	pop    edi
c00024cc:	5d                   	pop    ebp
c00024cd:	c3                   	ret    

c00024ce <mount_volume>:
c00024ce:	55                   	push   ebp
c00024cf:	57                   	push   edi
c00024d0:	89 cf                	mov    edi,ecx
c00024d2:	56                   	push   esi
c00024d3:	53                   	push   ebx
c00024d4:	bb 0b 00 00 00       	mov    ebx,0xb
c00024d9:	83 ec 3c             	sub    esp,0x3c
c00024dc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024e2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00024e6:	e8 43 fb ff ff       	call   c000202e <get_ldnumber>
c00024eb:	85 c0                	test   eax,eax
c00024ed:	0f 88 3b 05 00 00    	js     c0002a2e <mount_volume+0x560>
c00024f3:	8b 2c 85 40 47 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffdb8c0]
c00024fa:	89 c6                	mov    esi,eax
c00024fc:	bb 0c 00 00 00       	mov    ebx,0xc
c0002501:	85 ed                	test   ebp,ebp
c0002503:	0f 84 25 05 00 00    	je     c0002a2e <mount_volume+0x560>
c0002509:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000250d:	83 e7 fe             	and    edi,0xfffffffe
c0002510:	89 2a                	mov    DWORD PTR [edx],ebp
c0002512:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002516:	74 32                	je     c000254a <mount_volume+0x7c>
c0002518:	83 ec 0c             	sub    esp,0xc
c000251b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c000251f:	50                   	push   eax
c0002520:	e8 d6 f4 ff ff       	call   c00019fb <disk_status>
c0002525:	83 c4 10             	add    esp,0x10
c0002528:	a8 01                	test   al,0x1
c000252a:	75 1e                	jne    c000254a <mount_volume+0x7c>
c000252c:	89 f9                	mov    ecx,edi
c000252e:	31 db                	xor    ebx,ebx
c0002530:	84 c9                	test   cl,cl
c0002532:	0f 84 f6 04 00 00    	je     c0002a2e <mount_volume+0x560>
c0002538:	a8 04                	test   al,0x4
c000253a:	0f 84 ee 04 00 00    	je     c0002a2e <mount_volume+0x560>
c0002540:	bb 0a 00 00 00       	mov    ebx,0xa
c0002545:	e9 e4 04 00 00       	jmp    c0002a2e <mount_volume+0x560>
c000254a:	83 ec 0c             	sub    esp,0xc
c000254d:	89 f0                	mov    eax,esi
c000254f:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002553:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002556:	0f b6 f0             	movzx  esi,al
c0002559:	56                   	push   esi
c000255a:	e8 9f f4 ff ff       	call   c00019fe <disk_initialize>
c000255f:	bb 03 00 00 00       	mov    ebx,0x3
c0002564:	83 c4 10             	add    esp,0x10
c0002567:	a8 01                	test   al,0x1
c0002569:	0f 85 bf 04 00 00    	jne    c0002a2e <mount_volume+0x560>
c000256f:	89 f9                	mov    ecx,edi
c0002571:	84 c9                	test   cl,cl
c0002573:	74 04                	je     c0002579 <mount_volume+0xab>
c0002575:	a8 04                	test   al,0x4
c0002577:	75 c7                	jne    c0002540 <mount_volume+0x72>
c0002579:	31 d2                	xor    edx,edx
c000257b:	89 e8                	mov    eax,ebp
c000257d:	e8 cf fd ff ff       	call   c0002351 <find_volume>
c0002582:	83 f8 04             	cmp    eax,0x4
c0002585:	75 0a                	jne    c0002591 <mount_volume+0xc3>
c0002587:	bb 01 00 00 00       	mov    ebx,0x1
c000258c:	e9 9d 04 00 00       	jmp    c0002a2e <mount_volume+0x560>
c0002591:	83 f8 01             	cmp    eax,0x1
c0002594:	76 0a                	jbe    c00025a0 <mount_volume+0xd2>
c0002596:	bb 0d 00 00 00       	mov    ebx,0xd
c000259b:	e9 8e 04 00 00       	jmp    c0002a2e <mount_volume+0x560>
c00025a0:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00025a3:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00025a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00025aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00025ae:	75 17                	jne    c00025c7 <mount_volume+0xf9>
c00025b0:	b8 0b 00 00 00       	mov    eax,0xb
c00025b5:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00025ba:	75 da                	jne    c0002596 <mount_volume+0xc8>
c00025bc:	40                   	inc    eax
c00025bd:	83 f8 40             	cmp    eax,0x40
c00025c0:	75 f3                	jne    c00025b5 <mount_volume+0xe7>
c00025c2:	e9 5a 02 00 00       	jmp    c0002821 <mount_volume+0x353>
c00025c7:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00025ca:	e8 7d f4 ff ff       	call   c0001a4c <ld_word>
c00025cf:	66 3d 00 02          	cmp    ax,0x200
c00025d3:	75 c1                	jne    c0002596 <mount_volume+0xc8>
c00025d5:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00025d8:	e8 6f f4 ff ff       	call   c0001a4c <ld_word>
c00025dd:	0f b7 c0             	movzx  eax,ax
c00025e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025e4:	85 c0                	test   eax,eax
c00025e6:	75 0c                	jne    c00025f4 <mount_volume+0x126>
c00025e8:	8d 45 78             	lea    eax,[ebp+0x78]
c00025eb:	e8 69 f4 ff ff       	call   c0001a59 <ld_dword>
c00025f0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00025f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00025f8:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00025fb:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c00025fe:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002602:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002605:	48                   	dec    eax
c0002606:	3c 01                	cmp    al,0x1
c0002608:	77 8c                	ja     c0002596 <mount_volume+0xc8>
c000260a:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c000260e:	89 c3                	mov    ebx,eax
c0002610:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002614:	66 85 c0             	test   ax,ax
c0002617:	0f 84 79 ff ff ff    	je     c0002596 <mount_volume+0xc8>
c000261d:	8d 40 ff             	lea    eax,[eax-0x1]
c0002620:	85 d8                	test   eax,ebx
c0002622:	0f 85 6e ff ff ff    	jne    c0002596 <mount_volume+0xc8>
c0002628:	8d 45 65             	lea    eax,[ebp+0x65]
c000262b:	e8 1c f4 ff ff       	call   c0001a4c <ld_word>
c0002630:	89 c7                	mov    edi,eax
c0002632:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002636:	a8 0f                	test   al,0xf
c0002638:	0f 85 58 ff ff ff    	jne    c0002596 <mount_volume+0xc8>
c000263e:	8d 45 67             	lea    eax,[ebp+0x67]
c0002641:	e8 06 f4 ff ff       	call   c0001a4c <ld_word>
c0002646:	0f b7 f0             	movzx  esi,ax
c0002649:	85 f6                	test   esi,esi
c000264b:	75 0a                	jne    c0002657 <mount_volume+0x189>
c000264d:	8d 45 74             	lea    eax,[ebp+0x74]
c0002650:	e8 04 f4 ff ff       	call   c0001a59 <ld_dword>
c0002655:	89 c6                	mov    esi,eax
c0002657:	8d 45 62             	lea    eax,[ebp+0x62]
c000265a:	e8 ed f3 ff ff       	call   c0001a4c <ld_word>
c000265f:	66 85 c0             	test   ax,ax
c0002662:	0f 84 2e ff ff ff    	je     c0002596 <mount_volume+0xc8>
c0002668:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c000266d:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002672:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0002676:	89 fa                	mov    edx,edi
c0002678:	66 c1 ea 04          	shr    dx,0x4
c000267c:	0f b7 d2             	movzx  edx,dx
c000267f:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c0002683:	0f b7 c8             	movzx  ecx,ax
c0002686:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0002689:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000268d:	39 c6                	cmp    esi,eax
c000268f:	0f 82 01 ff ff ff    	jb     c0002596 <mount_volume+0xc8>
c0002695:	29 c6                	sub    esi,eax
c0002697:	31 d2                	xor    edx,edx
c0002699:	89 f0                	mov    eax,esi
c000269b:	f7 f3                	div    ebx
c000269d:	39 de                	cmp    esi,ebx
c000269f:	0f 82 f1 fe ff ff    	jb     c0002596 <mount_volume+0xc8>
c00026a5:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00026aa:	0f 87 e6 fe ff ff    	ja     c0002596 <mount_volume+0xc8>
c00026b0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00026b5:	0f 86 63 03 00 00    	jbe    c0002a1e <mount_volume+0x550>
c00026bb:	bb 03 00 00 00       	mov    ebx,0x3
c00026c0:	8d 70 02             	lea    esi,[eax+0x2]
c00026c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00026c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00026cb:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00026ce:	89 c8                	mov    eax,ecx
c00026d0:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00026d3:	31 d2                	xor    edx,edx
c00026d5:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026d9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026dd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00026e1:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00026e4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00026e8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00026ec:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00026ef:	31 d2                	xor    edx,edx
c00026f1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00026f5:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00026f9:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00026fc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00026ff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002702:	83 fb 03             	cmp    ebx,0x3
c0002705:	75 2b                	jne    c0002732 <mount_volume+0x264>
c0002707:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000270a:	e8 3d f3 ff ff       	call   c0001a4c <ld_word>
c000270f:	66 09 c7             	or     di,ax
c0002712:	0f 85 7e fe ff ff    	jne    c0002596 <mount_volume+0xc8>
c0002718:	c1 e6 02             	shl    esi,0x2
c000271b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002721:	e8 33 f3 ff ff       	call   c0001a59 <ld_dword>
c0002726:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000272d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002730:	eb 30                	jmp    c0002762 <mount_volume+0x294>
c0002732:	66 85 ff             	test   di,di
c0002735:	0f 84 5b fe ff ff    	je     c0002596 <mount_volume+0xc8>
c000273b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000273f:	31 d2                	xor    edx,edx
c0002741:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002745:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0002749:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000274c:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c000274f:	83 fb 02             	cmp    ebx,0x2
c0002752:	75 04                	jne    c0002758 <mount_volume+0x28a>
c0002754:	01 f6                	add    esi,esi
c0002756:	eb 0a                	jmp    c0002762 <mount_volume+0x294>
c0002758:	8d 04 76             	lea    eax,[esi+esi*2]
c000275b:	83 e6 01             	and    esi,0x1
c000275e:	d1 e8                	shr    eax,1
c0002760:	01 c6                	add    esi,eax
c0002762:	81 c6 ff 01 00 00    	add    esi,0x1ff
c0002768:	c1 ee 09             	shr    esi,0x9
c000276b:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c000276f:	0f 87 21 fe ff ff    	ja     c0002596 <mount_volume+0xc8>
c0002775:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000277c:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002783:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c0002787:	83 fb 03             	cmp    ebx,0x3
c000278a:	75 7a                	jne    c0002806 <mount_volume+0x338>
c000278c:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002792:	e8 b5 f2 ff ff       	call   c0001a4c <ld_word>
c0002797:	66 48                	dec    ax
c0002799:	75 6b                	jne    c0002806 <mount_volume+0x338>
c000279b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000279f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027a3:	83 c2 01             	add    edx,0x1
c00027a6:	89 e8                	mov    eax,ebp
c00027a8:	83 d1 00             	adc    ecx,0x0
c00027ab:	e8 73 fa ff ff       	call   c0002223 <move_window>
c00027b0:	85 c0                	test   eax,eax
c00027b2:	75 52                	jne    c0002806 <mount_volume+0x338>
c00027b4:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00027b8:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00027be:	e8 89 f2 ff ff       	call   c0001a4c <ld_word>
c00027c3:	66 3d 55 aa          	cmp    ax,0xaa55
c00027c7:	75 3d                	jne    c0002806 <mount_volume+0x338>
c00027c9:	8d 45 54             	lea    eax,[ebp+0x54]
c00027cc:	e8 88 f2 ff ff       	call   c0001a59 <ld_dword>
c00027d1:	3d 52 52 61 41       	cmp    eax,0x41615252
c00027d6:	75 2e                	jne    c0002806 <mount_volume+0x338>
c00027d8:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00027de:	e8 76 f2 ff ff       	call   c0001a59 <ld_dword>
c00027e3:	3d 72 72 41 61       	cmp    eax,0x61417272
c00027e8:	75 1c                	jne    c0002806 <mount_volume+0x338>
c00027ea:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00027f0:	e8 64 f2 ff ff       	call   c0001a59 <ld_dword>
c00027f5:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00027f8:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c00027fe:	e8 56 f2 ff ff       	call   c0001a59 <ld_dword>
c0002803:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002806:	66 a1 20 47 02 c0    	mov    ax,ds:0xc0024720
c000280c:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000280f:	40                   	inc    eax
c0002810:	31 db                	xor    ebx,ebx
c0002812:	66 a3 20 47 02 c0    	mov    ds:0xc0024720,ax
c0002818:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c000281c:	e9 0d 02 00 00       	jmp    c0002a2e <mount_volume+0x560>
c0002821:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002827:	e8 20 f2 ff ff       	call   c0001a4c <ld_word>
c000282c:	66 3d 00 01          	cmp    ax,0x100
c0002830:	0f 85 60 fd ff ff    	jne    c0002596 <mount_volume+0xc8>
c0002836:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c000283d:	0f 85 53 fd ff ff    	jne    c0002596 <mount_volume+0xc8>
c0002843:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002849:	e8 23 f2 ff ff       	call   c0001a71 <ld_qword>
c000284e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002852:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002858:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000285c:	e8 f8 f1 ff ff       	call   c0001a59 <ld_dword>
c0002861:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002864:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c000286a:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c000286d:	fe c8                	dec    al
c000286f:	0f 85 21 fd ff ff    	jne    c0002596 <mount_volume+0xc8>
c0002875:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c000287c:	bb 01 00 00 00       	mov    ebx,0x1
c0002881:	d3 e3                	shl    ebx,cl
c0002883:	66 85 db             	test   bx,bx
c0002886:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c000288a:	0f 84 06 fd ff ff    	je     c0002596 <mount_volume+0xc8>
c0002890:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002896:	e8 be f1 ff ff       	call   c0001a59 <ld_dword>
c000289b:	89 c6                	mov    esi,eax
c000289d:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c00028a2:	0f 87 ee fc ff ff    	ja     c0002596 <mount_volume+0xc8>
c00028a8:	8d 40 02             	lea    eax,[eax+0x2]
c00028ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028af:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c00028b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028b6:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028b9:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028bc:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c00028c2:	e8 92 f1 ff ff       	call   c0001a59 <ld_dword>
c00028c7:	31 d2                	xor    edx,edx
c00028c9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028cd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00028d5:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c00028d8:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c00028db:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c00028e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00028e5:	e8 6f f1 ff ff       	call   c0001a59 <ld_dword>
c00028ea:	31 d2                	xor    edx,edx
c00028ec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028f0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00028f4:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028f8:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028fb:	0f b7 c3             	movzx  eax,bx
c00028fe:	0f af f0             	imul   esi,eax
c0002901:	89 f0                	mov    eax,esi
c0002903:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002906:	31 d2                	xor    edx,edx
c0002908:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c000290c:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002910:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002914:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002918:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c000291c:	39 c1                	cmp    ecx,eax
c000291e:	89 df                	mov    edi,ebx
c0002920:	19 d7                	sbb    edi,edx
c0002922:	0f 82 6e fc ff ff    	jb     c0002596 <mount_volume+0xc8>
c0002928:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c000292e:	31 db                	xor    ebx,ebx
c0002930:	e8 24 f1 ff ff       	call   c0001a59 <ld_dword>
c0002935:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c000293c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000293f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002947:	85 db                	test   ebx,ebx
c0002949:	75 39                	jne    c0002984 <mount_volume+0x4b6>
c000294b:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000294f:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002953:	0f 86 3d fc ff ff    	jbe    c0002596 <mount_volume+0xc8>
c0002959:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c000295c:	89 e8                	mov    eax,ebp
c000295e:	e8 82 f3 ff ff       	call   c0001ce5 <clst2sect>
c0002963:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002967:	31 ff                	xor    edi,edi
c0002969:	01 c6                	add    esi,eax
c000296b:	11 d7                	adc    edi,edx
c000296d:	89 e8                	mov    eax,ebp
c000296f:	89 f2                	mov    edx,esi
c0002971:	89 f9                	mov    ecx,edi
c0002973:	e8 ab f8 ff ff       	call   c0002223 <move_window>
c0002978:	85 c0                	test   eax,eax
c000297a:	0f 85 07 fc ff ff    	jne    c0002587 <mount_volume+0xb9>
c0002980:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002984:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002989:	74 0b                	je     c0002996 <mount_volume+0x4c8>
c000298b:	83 c3 20             	add    ebx,0x20
c000298e:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002994:	eb b1                	jmp    c0002947 <mount_volume+0x479>
c0002996:	8d 75 54             	lea    esi,[ebp+0x54]
c0002999:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c000299d:	e8 b7 f0 ff ff       	call   c0001a59 <ld_dword>
c00029a2:	89 c3                	mov    ebx,eax
c00029a4:	83 f8 01             	cmp    eax,0x1
c00029a7:	0f 86 e9 fb ff ff    	jbe    c0002596 <mount_volume+0xc8>
c00029ad:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00029b0:	0f 86 e0 fb ff ff    	jbe    c0002596 <mount_volume+0xc8>
c00029b6:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00029ba:	8d 53 fe             	lea    edx,[ebx-0x2]
c00029bd:	0f af c2             	imul   eax,edx
c00029c0:	31 d2                	xor    edx,edx
c00029c2:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c00029c5:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c00029c8:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c00029cb:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c00029ce:	89 da                	mov    edx,ebx
c00029d0:	31 c9                	xor    ecx,ecx
c00029d2:	c1 ea 07             	shr    edx,0x7
c00029d5:	89 e8                	mov    eax,ebp
c00029d7:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c00029da:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c00029dd:	e8 41 f8 ff ff       	call   c0002223 <move_window>
c00029e2:	85 c0                	test   eax,eax
c00029e4:	0f 85 9d fb ff ff    	jne    c0002587 <mount_volume+0xb9>
c00029ea:	89 d8                	mov    eax,ebx
c00029ec:	83 e0 7f             	and    eax,0x7f
c00029ef:	8d 04 86             	lea    eax,[esi+eax*4]
c00029f2:	e8 62 f0 ff ff       	call   c0001a59 <ld_dword>
c00029f7:	83 f8 ff             	cmp    eax,0xffffffff
c00029fa:	74 0a                	je     c0002a06 <mount_volume+0x538>
c00029fc:	43                   	inc    ebx
c00029fd:	39 d8                	cmp    eax,ebx
c00029ff:	74 cd                	je     c00029ce <mount_volume+0x500>
c0002a01:	e9 90 fb ff ff       	jmp    c0002596 <mount_volume+0xc8>
c0002a06:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002a0d:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002a14:	bb 04 00 00 00       	mov    ebx,0x4
c0002a19:	e9 e8 fd ff ff       	jmp    c0002806 <mount_volume+0x338>
c0002a1e:	31 db                	xor    ebx,ebx
c0002a20:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002a25:	0f 97 c3             	seta   bl
c0002a28:	43                   	inc    ebx
c0002a29:	e9 92 fc ff ff       	jmp    c00026c0 <mount_volume+0x1f2>
c0002a2e:	83 c4 3c             	add    esp,0x3c
c0002a31:	89 d8                	mov    eax,ebx
c0002a33:	5b                   	pop    ebx
c0002a34:	5e                   	pop    esi
c0002a35:	5f                   	pop    edi
c0002a36:	5d                   	pop    ebp
c0002a37:	c3                   	ret    

c0002a38 <find_bitmap>:
c0002a38:	55                   	push   ebp
c0002a39:	57                   	push   edi
c0002a3a:	89 c7                	mov    edi,eax
c0002a3c:	56                   	push   esi
c0002a3d:	8d 72 fe             	lea    esi,[edx-0x2]
c0002a40:	53                   	push   ebx
c0002a41:	83 ec 1c             	sub    esp,0x1c
c0002a44:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002a47:	83 e8 02             	sub    eax,0x2
c0002a4a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002a4e:	39 f0                	cmp    eax,esi
c0002a50:	77 02                	ja     c0002a54 <find_bitmap+0x1c>
c0002a52:	31 f6                	xor    esi,esi
c0002a54:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002a58:	89 f3                	mov    ebx,esi
c0002a5a:	31 ed                	xor    ebp,ebp
c0002a5c:	89 da                	mov    edx,ebx
c0002a5e:	31 c9                	xor    ecx,ecx
c0002a60:	c1 ea 0c             	shr    edx,0xc
c0002a63:	89 f8                	mov    eax,edi
c0002a65:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002a68:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002a6b:	e8 b3 f7 ff ff       	call   c0002223 <move_window>
c0002a70:	85 c0                	test   eax,eax
c0002a72:	75 68                	jne    c0002adc <find_bitmap+0xa4>
c0002a74:	89 d9                	mov    ecx,ebx
c0002a76:	b8 01 00 00 00       	mov    eax,0x1
c0002a7b:	83 e1 07             	and    ecx,0x7
c0002a7e:	89 da                	mov    edx,ebx
c0002a80:	d3 e0                	shl    eax,cl
c0002a82:	c1 ea 03             	shr    edx,0x3
c0002a85:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002a88:	83 e9 02             	sub    ecx,0x2
c0002a8b:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002a91:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002a95:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002a99:	43                   	inc    ebx
c0002a9a:	21 c1                	and    ecx,eax
c0002a9c:	01 c0                	add    eax,eax
c0002a9e:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002aa2:	77 09                	ja     c0002aad <find_bitmap+0x75>
c0002aa4:	31 db                	xor    ebx,ebx
c0002aa6:	ba 00 02 00 00       	mov    edx,0x200
c0002aab:	31 c0                	xor    eax,eax
c0002aad:	84 c9                	test   cl,cl
c0002aaf:	75 10                	jne    c0002ac1 <find_bitmap+0x89>
c0002ab1:	45                   	inc    ebp
c0002ab2:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002ab6:	75 0f                	jne    c0002ac7 <find_bitmap+0x8f>
c0002ab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002abc:	83 c0 02             	add    eax,0x2
c0002abf:	eb 22                	jmp    c0002ae3 <find_bitmap+0xab>
c0002ac1:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ac5:	31 ed                	xor    ebp,ebp
c0002ac7:	39 de                	cmp    esi,ebx
c0002ac9:	74 16                	je     c0002ae1 <find_bitmap+0xa9>
c0002acb:	84 c0                	test   al,al
c0002acd:	75 c6                	jne    c0002a95 <find_bitmap+0x5d>
c0002acf:	42                   	inc    edx
c0002ad0:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002ad6:	77 84                	ja     c0002a5c <find_bitmap+0x24>
c0002ad8:	b0 01                	mov    al,0x1
c0002ada:	eb b9                	jmp    c0002a95 <find_bitmap+0x5d>
c0002adc:	83 c8 ff             	or     eax,0xffffffff
c0002adf:	eb 02                	jmp    c0002ae3 <find_bitmap+0xab>
c0002ae1:	31 c0                	xor    eax,eax
c0002ae3:	83 c4 1c             	add    esp,0x1c
c0002ae6:	5b                   	pop    ebx
c0002ae7:	5e                   	pop    esi
c0002ae8:	5f                   	pop    edi
c0002ae9:	5d                   	pop    ebp
c0002aea:	c3                   	ret    

c0002aeb <change_bitmap>:
c0002aeb:	55                   	push   ebp
c0002aec:	89 cd                	mov    ebp,ecx
c0002aee:	57                   	push   edi
c0002aef:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002af2:	56                   	push   esi
c0002af3:	89 c7                	mov    edi,eax
c0002af5:	53                   	push   ebx
c0002af6:	89 c8                	mov    eax,ecx
c0002af8:	83 ec 1c             	sub    esp,0x1c
c0002afb:	31 d2                	xor    edx,edx
c0002afd:	c1 e8 0c             	shr    eax,0xc
c0002b00:	89 ce                	mov    esi,ecx
c0002b02:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002b05:	bb 01 00 00 00       	mov    ebx,0x1
c0002b0a:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002b0d:	83 e1 07             	and    ecx,0x7
c0002b10:	c1 ee 03             	shr    esi,0x3
c0002b13:	d3 e3                	shl    ebx,cl
c0002b15:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002b1b:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002b1f:	89 c1                	mov    ecx,eax
c0002b21:	89 d3                	mov    ebx,edx
c0002b23:	83 c1 01             	add    ecx,0x1
c0002b26:	83 d3 00             	adc    ebx,0x0
c0002b29:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002b2d:	89 d1                	mov    ecx,edx
c0002b2f:	89 c2                	mov    edx,eax
c0002b31:	89 f8                	mov    eax,edi
c0002b33:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002b37:	e8 e7 f6 ff ff       	call   c0002223 <move_window>
c0002b3c:	89 c1                	mov    ecx,eax
c0002b3e:	85 c0                	test   eax,eax
c0002b40:	75 48                	jne    c0002b8a <change_bitmap+0x9f>
c0002b42:	31 d2                	xor    edx,edx
c0002b44:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002b48:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002b4c:	0f 95 c2             	setne  dl
c0002b4f:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002b53:	74 3c                	je     c0002b91 <change_bitmap+0xa6>
c0002b55:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002b59:	4d                   	dec    ebp
c0002b5a:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002b5e:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002b62:	74 32                	je     c0002b96 <change_bitmap+0xab>
c0002b64:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002b68:	75 d8                	jne    c0002b42 <change_bitmap+0x57>
c0002b6a:	8d 46 01             	lea    eax,[esi+0x1]
c0002b6d:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002b72:	89 c3                	mov    ebx,eax
c0002b74:	31 f6                	xor    esi,esi
c0002b76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b7a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b7e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b84:	74 99                	je     c0002b1f <change_bitmap+0x34>
c0002b86:	89 de                	mov    esi,ebx
c0002b88:	eb b8                	jmp    c0002b42 <change_bitmap+0x57>
c0002b8a:	b9 01 00 00 00       	mov    ecx,0x1
c0002b8f:	eb 05                	jmp    c0002b96 <change_bitmap+0xab>
c0002b91:	b9 02 00 00 00       	mov    ecx,0x2
c0002b96:	83 c4 1c             	add    esp,0x1c
c0002b99:	89 c8                	mov    eax,ecx
c0002b9b:	5b                   	pop    ebx
c0002b9c:	5e                   	pop    esi
c0002b9d:	5f                   	pop    edi
c0002b9e:	5d                   	pop    ebp
c0002b9f:	c3                   	ret    

c0002ba0 <put_fat>:
c0002ba0:	83 fa 01             	cmp    edx,0x1
c0002ba3:	0f 86 7b 01 00 00    	jbe    c0002d24 <put_fat+0x184>
c0002ba9:	55                   	push   ebp
c0002baa:	57                   	push   edi
c0002bab:	89 cf                	mov    edi,ecx
c0002bad:	56                   	push   esi
c0002bae:	b9 02 00 00 00       	mov    ecx,0x2
c0002bb3:	53                   	push   ebx
c0002bb4:	89 c6                	mov    esi,eax
c0002bb6:	83 ec 1c             	sub    esp,0x1c
c0002bb9:	89 d3                	mov    ebx,edx
c0002bbb:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002bbe:	0f 86 68 01 00 00    	jbe    c0002d2c <put_fat+0x18c>
c0002bc4:	8a 00                	mov    al,BYTE PTR [eax]
c0002bc6:	3c 02                	cmp    al,0x2
c0002bc8:	0f 84 c7 00 00 00    	je     c0002c95 <put_fat+0xf5>
c0002bce:	77 09                	ja     c0002bd9 <put_fat+0x39>
c0002bd0:	fe c8                	dec    al
c0002bd2:	74 17                	je     c0002beb <put_fat+0x4b>
c0002bd4:	e9 53 01 00 00       	jmp    c0002d2c <put_fat+0x18c>
c0002bd9:	b9 02 00 00 00       	mov    ecx,0x2
c0002bde:	3c 04                	cmp    al,0x4
c0002be0:	0f 86 e1 00 00 00    	jbe    c0002cc7 <put_fat+0x127>
c0002be6:	e9 41 01 00 00       	jmp    c0002d2c <put_fat+0x18c>
c0002beb:	89 d5                	mov    ebp,edx
c0002bed:	31 c9                	xor    ecx,ecx
c0002bef:	d1 ed                	shr    ebp,1
c0002bf1:	89 f0                	mov    eax,esi
c0002bf3:	01 d5                	add    ebp,edx
c0002bf5:	89 ea                	mov    edx,ebp
c0002bf7:	c1 ea 09             	shr    edx,0x9
c0002bfa:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002bfd:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c00:	e8 1e f6 ff ff       	call   c0002223 <move_window>
c0002c05:	89 c1                	mov    ecx,eax
c0002c07:	85 c0                	test   eax,eax
c0002c09:	0f 85 1d 01 00 00    	jne    c0002d2c <put_fat+0x18c>
c0002c0f:	8d 46 54             	lea    eax,[esi+0x54]
c0002c12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002c16:	8d 45 01             	lea    eax,[ebp+0x1]
c0002c19:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002c23:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c27:	83 e3 01             	and    ebx,0x1
c0002c2a:	89 f8                	mov    eax,edi
c0002c2c:	74 0d                	je     c0002c3b <put_fat+0x9b>
c0002c2e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002c31:	89 fa                	mov    edx,edi
c0002c33:	c1 e2 04             	shl    edx,0x4
c0002c36:	83 e0 0f             	and    eax,0xf
c0002c39:	09 d0                	or     eax,edx
c0002c3b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c3f:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002c42:	c1 ea 09             	shr    edx,0x9
c0002c45:	31 c9                	xor    ecx,ecx
c0002c47:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c4a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c4e:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002c51:	89 f0                	mov    eax,esi
c0002c53:	e8 cb f5 ff ff       	call   c0002223 <move_window>
c0002c58:	89 c1                	mov    ecx,eax
c0002c5a:	85 c0                	test   eax,eax
c0002c5c:	0f 85 ca 00 00 00    	jne    c0002d2c <put_fat+0x18c>
c0002c62:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002c66:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002c6c:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002c70:	85 db                	test   ebx,ebx
c0002c72:	74 07                	je     c0002c7b <put_fat+0xdb>
c0002c74:	c1 ef 04             	shr    edi,0x4
c0002c77:	89 fa                	mov    edx,edi
c0002c79:	eb 0e                	jmp    c0002c89 <put_fat+0xe9>
c0002c7b:	c1 ef 08             	shr    edi,0x8
c0002c7e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002c81:	83 e2 f0             	and    edx,0xfffffff0
c0002c84:	83 e7 0f             	and    edi,0xf
c0002c87:	09 fa                	or     edx,edi
c0002c89:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002c8c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002c90:	e9 97 00 00 00       	jmp    c0002d2c <put_fat+0x18c>
c0002c95:	c1 ea 08             	shr    edx,0x8
c0002c98:	31 c9                	xor    ecx,ecx
c0002c9a:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002c9d:	89 f0                	mov    eax,esi
c0002c9f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ca2:	e8 7c f5 ff ff       	call   c0002223 <move_window>
c0002ca7:	89 c1                	mov    ecx,eax
c0002ca9:	85 c0                	test   eax,eax
c0002cab:	75 7f                	jne    c0002d2c <put_fat+0x18c>
c0002cad:	01 db                	add    ebx,ebx
c0002caf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb3:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002cb9:	0f b7 d7             	movzx  edx,di
c0002cbc:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002cc0:	e8 f9 ed ff ff       	call   c0001abe <st_word>
c0002cc5:	eb 53                	jmp    c0002d1a <put_fat+0x17a>
c0002cc7:	c1 ea 07             	shr    edx,0x7
c0002cca:	31 c9                	xor    ecx,ecx
c0002ccc:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ccf:	89 f0                	mov    eax,esi
c0002cd1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002cd4:	e8 4a f5 ff ff       	call   c0002223 <move_window>
c0002cd9:	89 c1                	mov    ecx,eax
c0002cdb:	85 c0                	test   eax,eax
c0002cdd:	75 4d                	jne    c0002d2c <put_fat+0x18c>
c0002cdf:	c1 e3 02             	shl    ebx,0x2
c0002ce2:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002ce8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002ceb:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002cef:	74 1c                	je     c0002d0d <put_fat+0x16d>
c0002cf1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cf5:	89 d8                	mov    eax,ebx
c0002cf7:	e8 5d ed ff ff       	call   c0001a59 <ld_dword>
c0002cfc:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002d02:	25 00 00 00 f0       	and    eax,0xf0000000
c0002d07:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d0b:	09 c7                	or     edi,eax
c0002d0d:	89 fa                	mov    edx,edi
c0002d0f:	89 d8                	mov    eax,ebx
c0002d11:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d15:	e8 a8 ed ff ff       	call   c0001ac2 <st_dword>
c0002d1a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002d22:	eb 08                	jmp    c0002d2c <put_fat+0x18c>
c0002d24:	b9 02 00 00 00       	mov    ecx,0x2
c0002d29:	89 c8                	mov    eax,ecx
c0002d2b:	c3                   	ret    
c0002d2c:	83 c4 1c             	add    esp,0x1c
c0002d2f:	89 c8                	mov    eax,ecx
c0002d31:	5b                   	pop    ebx
c0002d32:	5e                   	pop    esi
c0002d33:	5f                   	pop    edi
c0002d34:	5d                   	pop    ebp
c0002d35:	c3                   	ret    

c0002d36 <fill_last_frag>:
c0002d36:	57                   	push   edi
c0002d37:	89 cf                	mov    edi,ecx
c0002d39:	56                   	push   esi
c0002d3a:	89 d6                	mov    esi,edx
c0002d3c:	53                   	push   ebx
c0002d3d:	89 c3                	mov    ebx,eax
c0002d3f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002d42:	85 c0                	test   eax,eax
c0002d44:	74 21                	je     c0002d67 <fill_last_frag+0x31>
c0002d46:	89 f9                	mov    ecx,edi
c0002d48:	83 f8 01             	cmp    eax,0x1
c0002d4b:	76 05                	jbe    c0002d52 <fill_last_frag+0x1c>
c0002d4d:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002d50:	29 c1                	sub    ecx,eax
c0002d52:	8d 56 01             	lea    edx,[esi+0x1]
c0002d55:	29 c2                	sub    edx,eax
c0002d57:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d59:	e8 42 fe ff ff       	call   c0002ba0 <put_fat>
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	75 05                	jne    c0002d67 <fill_last_frag+0x31>
c0002d62:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002d65:	eb d8                	jmp    c0002d3f <fill_last_frag+0x9>
c0002d67:	5b                   	pop    ebx
c0002d68:	5e                   	pop    esi
c0002d69:	5f                   	pop    edi
c0002d6a:	c3                   	ret    

c0002d6b <fill_first_frag>:
c0002d6b:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002d6f:	75 2d                	jne    c0002d9e <fill_first_frag+0x33>
c0002d71:	57                   	push   edi
c0002d72:	56                   	push   esi
c0002d73:	53                   	push   ebx
c0002d74:	89 c3                	mov    ebx,eax
c0002d76:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002d79:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002d7c:	01 d7                	add    edi,edx
c0002d7e:	39 fa                	cmp    edx,edi
c0002d80:	74 14                	je     c0002d96 <fill_first_frag+0x2b>
c0002d82:	8d 72 01             	lea    esi,[edx+0x1]
c0002d85:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002d87:	89 f1                	mov    ecx,esi
c0002d89:	e8 12 fe ff ff       	call   c0002ba0 <put_fat>
c0002d8e:	89 f2                	mov    edx,esi
c0002d90:	85 c0                	test   eax,eax
c0002d92:	74 ea                	je     c0002d7e <fill_first_frag+0x13>
c0002d94:	eb 0b                	jmp    c0002da1 <fill_first_frag+0x36>
c0002d96:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002d9a:	31 c0                	xor    eax,eax
c0002d9c:	eb 03                	jmp    c0002da1 <fill_first_frag+0x36>
c0002d9e:	31 c0                	xor    eax,eax
c0002da0:	c3                   	ret    
c0002da1:	5b                   	pop    ebx
c0002da2:	5e                   	pop    esi
c0002da3:	5f                   	pop    edi
c0002da4:	c3                   	ret    

c0002da5 <get_fat>:
c0002da5:	83 fa 01             	cmp    edx,0x1
c0002da8:	0f 86 db 01 00 00    	jbe    c0002f89 <get_fat+0x1e4>
c0002dae:	55                   	push   ebp
c0002daf:	b9 01 00 00 00       	mov    ecx,0x1
c0002db4:	57                   	push   edi
c0002db5:	56                   	push   esi
c0002db6:	53                   	push   ebx
c0002db7:	83 ec 1c             	sub    esp,0x1c
c0002dba:	8b 38                	mov    edi,DWORD PTR [eax]
c0002dbc:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002dbf:	0f 86 cc 01 00 00    	jbe    c0002f91 <get_fat+0x1ec>
c0002dc5:	89 c3                	mov    ebx,eax
c0002dc7:	8a 07                	mov    al,BYTE PTR [edi]
c0002dc9:	89 d6                	mov    esi,edx
c0002dcb:	3c 02                	cmp    al,0x2
c0002dcd:	0f 84 99 00 00 00    	je     c0002e6c <get_fat+0xc7>
c0002dd3:	77 09                	ja     c0002dde <get_fat+0x39>
c0002dd5:	fe c8                	dec    al
c0002dd7:	74 1a                	je     c0002df3 <get_fat+0x4e>
c0002dd9:	e9 b3 01 00 00       	jmp    c0002f91 <get_fat+0x1ec>
c0002dde:	3c 03                	cmp    al,0x3
c0002de0:	0f 84 b5 00 00 00    	je     c0002e9b <get_fat+0xf6>
c0002de6:	3c 04                	cmp    al,0x4
c0002de8:	0f 84 e3 00 00 00    	je     c0002ed1 <get_fat+0x12c>
c0002dee:	e9 9e 01 00 00       	jmp    c0002f91 <get_fat+0x1ec>
c0002df3:	89 d3                	mov    ebx,edx
c0002df5:	31 c9                	xor    ecx,ecx
c0002df7:	d1 eb                	shr    ebx,1
c0002df9:	89 f8                	mov    eax,edi
c0002dfb:	01 d3                	add    ebx,edx
c0002dfd:	89 da                	mov    edx,ebx
c0002dff:	c1 ea 09             	shr    edx,0x9
c0002e02:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e05:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e08:	e8 16 f4 ff ff       	call   c0002223 <move_window>
c0002e0d:	85 c0                	test   eax,eax
c0002e0f:	74 08                	je     c0002e19 <get_fat+0x74>
c0002e11:	83 c9 ff             	or     ecx,0xffffffff
c0002e14:	e9 78 01 00 00       	jmp    c0002f91 <get_fat+0x1ec>
c0002e19:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0002e1c:	31 c9                	xor    ecx,ecx
c0002e1e:	89 ea                	mov    edx,ebp
c0002e20:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002e26:	c1 ea 09             	shr    edx,0x9
c0002e29:	89 f8                	mov    eax,edi
c0002e2b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e2e:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c0002e32:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e35:	e8 e9 f3 ff ff       	call   c0002223 <move_window>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	75 d3                	jne    c0002e11 <get_fat+0x6c>
c0002e3e:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e44:	0f b6 c3             	movzx  eax,bl
c0002e47:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c0002e4c:	c1 e3 08             	shl    ebx,0x8
c0002e4f:	09 c3                	or     ebx,eax
c0002e51:	89 d9                	mov    ecx,ebx
c0002e53:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0002e59:	83 e6 01             	and    esi,0x1
c0002e5c:	0f 84 2f 01 00 00    	je     c0002f91 <get_fat+0x1ec>
c0002e62:	89 d9                	mov    ecx,ebx
c0002e64:	c1 e9 04             	shr    ecx,0x4
c0002e67:	e9 25 01 00 00       	jmp    c0002f91 <get_fat+0x1ec>
c0002e6c:	c1 ea 08             	shr    edx,0x8
c0002e6f:	31 c9                	xor    ecx,ecx
c0002e71:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002e74:	89 f8                	mov    eax,edi
c0002e76:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002e79:	e8 a5 f3 ff ff       	call   c0002223 <move_window>
c0002e7e:	85 c0                	test   eax,eax
c0002e80:	75 8f                	jne    c0002e11 <get_fat+0x6c>
c0002e82:	01 f6                	add    esi,esi
c0002e84:	81 e6 fe 01 00 00    	and    esi,0x1fe
c0002e8a:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002e8e:	e8 b9 eb ff ff       	call   c0001a4c <ld_word>
c0002e93:	0f b7 c8             	movzx  ecx,ax
c0002e96:	e9 f6 00 00 00       	jmp    c0002f91 <get_fat+0x1ec>
c0002e9b:	c1 ea 07             	shr    edx,0x7
c0002e9e:	31 c9                	xor    ecx,ecx
c0002ea0:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002ea3:	89 f8                	mov    eax,edi
c0002ea5:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002ea8:	e8 76 f3 ff ff       	call   c0002223 <move_window>
c0002ead:	85 c0                	test   eax,eax
c0002eaf:	0f 85 5c ff ff ff    	jne    c0002e11 <get_fat+0x6c>
c0002eb5:	c1 e6 02             	shl    esi,0x2
c0002eb8:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002ebe:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002ec2:	e8 92 eb ff ff       	call   c0001a59 <ld_dword>
c0002ec7:	25 ff ff ff 0f       	and    eax,0xfffffff
c0002ecc:	e9 b4 00 00 00       	jmp    c0002f85 <get_fat+0x1e0>
c0002ed1:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002ed4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0002ed7:	89 d1                	mov    ecx,edx
c0002ed9:	09 c1                	or     ecx,eax
c0002edb:	74 06                	je     c0002ee3 <get_fat+0x13e>
c0002edd:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0002ee1:	75 0f                	jne    c0002ef2 <get_fat+0x14d>
c0002ee3:	b9 01 00 00 00       	mov    ecx,0x1
c0002ee8:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c0002eec:	0f 85 9f 00 00 00    	jne    c0002f91 <get_fat+0x1ec>
c0002ef2:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0002ef6:	89 f5                	mov    ebp,esi
c0002ef8:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0002efd:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0002f00:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0002f03:	80 f9 02             	cmp    cl,0x2
c0002f06:	75 35                	jne    c0002f3d <get_fat+0x198>
c0002f08:	83 c0 ff             	add    eax,0xffffffff
c0002f0b:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0002f10:	83 d2 ff             	adc    edx,0xffffffff
c0002f13:	31 db                	xor    ebx,ebx
c0002f15:	53                   	push   ebx
c0002f16:	51                   	push   ecx
c0002f17:	0f ac d0 09          	shrd   eax,edx,0x9
c0002f1b:	c1 ea 09             	shr    edx,0x9
c0002f1e:	52                   	push   edx
c0002f1f:	50                   	push   eax
c0002f20:	e8 e7 c5 01 00       	call   c001f50c <__udivdi3>
c0002f25:	83 c4 10             	add    esp,0x10
c0002f28:	b9 01 00 00 00       	mov    ecx,0x1
c0002f2d:	39 c5                	cmp    ebp,eax
c0002f2f:	77 60                	ja     c0002f91 <get_fat+0x1ec>
c0002f31:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f36:	74 59                	je     c0002f91 <get_fat+0x1ec>
c0002f38:	8d 4e 01             	lea    ecx,[esi+0x1]
c0002f3b:	eb 54                	jmp    c0002f91 <get_fat+0x1ec>
c0002f3d:	80 f9 03             	cmp    cl,0x3
c0002f40:	75 05                	jne    c0002f47 <get_fat+0x1a2>
c0002f42:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0002f45:	77 f1                	ja     c0002f38 <get_fat+0x193>
c0002f47:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0002f4c:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0002f50:	75 3f                	jne    c0002f91 <get_fat+0x1ec>
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	31 c9                	xor    ecx,ecx
c0002f56:	c1 ea 07             	shr    edx,0x7
c0002f59:	89 f8                	mov    eax,edi
c0002f5b:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0002f5e:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0002f61:	e8 bd f2 ff ff       	call   c0002223 <move_window>
c0002f66:	85 c0                	test   eax,eax
c0002f68:	0f 85 a3 fe ff ff    	jne    c0002e11 <get_fat+0x6c>
c0002f6e:	c1 e6 02             	shl    esi,0x2
c0002f71:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0002f77:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0002f7b:	e8 d9 ea ff ff       	call   c0001a59 <ld_dword>
c0002f80:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0002f85:	89 c1                	mov    ecx,eax
c0002f87:	eb 08                	jmp    c0002f91 <get_fat+0x1ec>
c0002f89:	b9 01 00 00 00       	mov    ecx,0x1
c0002f8e:	89 c8                	mov    eax,ecx
c0002f90:	c3                   	ret    
c0002f91:	83 c4 1c             	add    esp,0x1c
c0002f94:	89 c8                	mov    eax,ecx
c0002f96:	5b                   	pop    ebx
c0002f97:	5e                   	pop    esi
c0002f98:	5f                   	pop    edi
c0002f99:	5d                   	pop    ebp
c0002f9a:	c3                   	ret    

c0002f9b <dir_sdi>:
c0002f9b:	55                   	push   ebp
c0002f9c:	57                   	push   edi
c0002f9d:	56                   	push   esi
c0002f9e:	53                   	push   ebx
c0002f9f:	89 c3                	mov    ebx,eax
c0002fa1:	83 ec 1c             	sub    esp,0x1c
c0002fa4:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fa6:	31 c0                	xor    eax,eax
c0002fa8:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0002fab:	0f 94 c0             	sete   al
c0002fae:	48                   	dec    eax
c0002faf:	25 00 00 20 f0       	and    eax,0xf0200000
c0002fb4:	05 00 00 00 10       	add    eax,0x10000000
c0002fb9:	39 d0                	cmp    eax,edx
c0002fbb:	77 0a                	ja     c0002fc7 <dir_sdi+0x2c>
c0002fbd:	b8 02 00 00 00       	mov    eax,0x2
c0002fc2:	e9 c4 00 00 00       	jmp    c000308b <dir_sdi+0xf0>
c0002fc7:	89 d6                	mov    esi,edx
c0002fc9:	f6 c2 1f             	test   dl,0x1f
c0002fcc:	75 ef                	jne    c0002fbd <dir_sdi+0x22>
c0002fce:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0002fd1:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c0002fd4:	85 c9                	test   ecx,ecx
c0002fd6:	75 2d                	jne    c0003005 <dir_sdi+0x6a>
c0002fd8:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0002fdb:	77 1b                	ja     c0002ff8 <dir_sdi+0x5d>
c0002fdd:	89 f2                	mov    edx,esi
c0002fdf:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0002fe3:	c1 ea 05             	shr    edx,0x5
c0002fe6:	39 c2                	cmp    edx,eax
c0002fe8:	73 d3                	jae    c0002fbd <dir_sdi+0x22>
c0002fea:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002fed:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0002ff0:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0002ff3:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002ff6:	eb 4b                	jmp    c0003043 <dir_sdi+0xa8>
c0002ff8:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c0002ffb:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fff:	85 c0                	test   eax,eax
c0003001:	74 da                	je     c0002fdd <dir_sdi+0x42>
c0003003:	89 c1                	mov    ecx,eax
c0003005:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003009:	c1 e5 09             	shl    ebp,0x9
c000300c:	89 ca                	mov    edx,ecx
c000300e:	39 ee                	cmp    esi,ebp
c0003010:	72 1c                	jb     c000302e <dir_sdi+0x93>
c0003012:	89 d8                	mov    eax,ebx
c0003014:	e8 8c fd ff ff       	call   c0002da5 <get_fat>
c0003019:	89 c1                	mov    ecx,eax
c000301b:	83 f8 ff             	cmp    eax,0xffffffff
c000301e:	74 66                	je     c0003086 <dir_sdi+0xeb>
c0003020:	83 f8 01             	cmp    eax,0x1
c0003023:	76 98                	jbe    c0002fbd <dir_sdi+0x22>
c0003025:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c0003028:	76 93                	jbe    c0002fbd <dir_sdi+0x22>
c000302a:	29 ee                	sub    esi,ebp
c000302c:	eb de                	jmp    c000300c <dir_sdi+0x71>
c000302e:	89 f8                	mov    eax,edi
c0003030:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003034:	e8 ac ec ff ff       	call   c0001ce5 <clst2sect>
c0003039:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000303d:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003040:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003043:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0003046:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003049:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000304c:	89 d1                	mov    ecx,edx
c000304e:	09 c1                	or     ecx,eax
c0003050:	0f 84 67 ff ff ff    	je     c0002fbd <dir_sdi+0x22>
c0003056:	89 f1                	mov    ecx,esi
c0003058:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003060:	c1 e9 09             	shr    ecx,0x9
c0003063:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003067:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000306b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000306f:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0003075:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003078:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000307c:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000307f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003082:	31 c0                	xor    eax,eax
c0003084:	eb 05                	jmp    c000308b <dir_sdi+0xf0>
c0003086:	b8 01 00 00 00       	mov    eax,0x1
c000308b:	83 c4 1c             	add    esp,0x1c
c000308e:	5b                   	pop    ebx
c000308f:	5e                   	pop    esi
c0003090:	5f                   	pop    edi
c0003091:	5d                   	pop    ebp
c0003092:	c3                   	ret    

c0003093 <create_chain>:
c0003093:	55                   	push   ebp
c0003094:	89 c5                	mov    ebp,eax
c0003096:	57                   	push   edi
c0003097:	56                   	push   esi
c0003098:	53                   	push   ebx
c0003099:	83 ec 1c             	sub    esp,0x1c
c000309c:	85 d2                	test   edx,edx
c000309e:	8b 30                	mov    esi,DWORD PTR [eax]
c00030a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00030a4:	75 0e                	jne    c00030b4 <create_chain+0x21>
c00030a6:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00030a9:	85 ff                	test   edi,edi
c00030ab:	74 39                	je     c00030e6 <create_chain+0x53>
c00030ad:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00030b0:	77 39                	ja     c00030eb <create_chain+0x58>
c00030b2:	eb 32                	jmp    c00030e6 <create_chain+0x53>
c00030b4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00030b8:	e8 e8 fc ff ff       	call   c0002da5 <get_fat>
c00030bd:	89 c3                	mov    ebx,eax
c00030bf:	83 f8 01             	cmp    eax,0x1
c00030c2:	77 0a                	ja     c00030ce <create_chain+0x3b>
c00030c4:	bb 01 00 00 00       	mov    ebx,0x1
c00030c9:	e9 bc 01 00 00       	jmp    c000328a <create_chain+0x1f7>
c00030ce:	83 f8 ff             	cmp    eax,0xffffffff
c00030d1:	0f 84 60 01 00 00    	je     c0003237 <create_chain+0x1a4>
c00030d7:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00030da:	0f 87 aa 01 00 00    	ja     c000328a <create_chain+0x1f7>
c00030e0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00030e4:	eb 05                	jmp    c00030eb <create_chain+0x58>
c00030e6:	bf 01 00 00 00       	mov    edi,0x1
c00030eb:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00030ef:	75 07                	jne    c00030f8 <create_chain+0x65>
c00030f1:	31 db                	xor    ebx,ebx
c00030f3:	e9 92 01 00 00       	jmp    c000328a <create_chain+0x1f7>
c00030f8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00030fb:	75 74                	jne    c0003171 <create_chain+0xde>
c00030fd:	b9 01 00 00 00       	mov    ecx,0x1
c0003102:	89 fa                	mov    edx,edi
c0003104:	89 f0                	mov    eax,esi
c0003106:	e8 2d f9 ff ff       	call   c0002a38 <find_bitmap>
c000310b:	89 c3                	mov    ebx,eax
c000310d:	8d 40 ff             	lea    eax,[eax-0x1]
c0003110:	83 f8 fd             	cmp    eax,0xfffffffd
c0003113:	0f 87 71 01 00 00    	ja     c000328a <create_chain+0x1f7>
c0003119:	83 ec 0c             	sub    esp,0xc
c000311c:	b9 01 00 00 00       	mov    ecx,0x1
c0003121:	89 da                	mov    edx,ebx
c0003123:	89 f0                	mov    eax,esi
c0003125:	6a 01                	push   0x1
c0003127:	e8 bf f9 ff ff       	call   c0002aeb <change_bitmap>
c000312c:	83 c4 10             	add    esp,0x10
c000312f:	83 f8 02             	cmp    eax,0x2
c0003132:	74 90                	je     c00030c4 <create_chain+0x31>
c0003134:	83 f8 01             	cmp    eax,0x1
c0003137:	0f 84 fa 00 00 00    	je     c0003237 <create_chain+0x1a4>
c000313d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003142:	75 09                	jne    c000314d <create_chain+0xba>
c0003144:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c0003148:	e9 0e 01 00 00       	jmp    c000325b <create_chain+0x1c8>
c000314d:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003151:	0f 85 e9 00 00 00    	jne    c0003240 <create_chain+0x1ad>
c0003157:	8d 57 01             	lea    edx,[edi+0x1]
c000315a:	39 da                	cmp    edx,ebx
c000315c:	0f 84 f9 00 00 00    	je     c000325b <create_chain+0x1c8>
c0003162:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003165:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c0003169:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000316c:	e9 cf 00 00 00       	jmp    c0003240 <create_chain+0x1ad>
c0003171:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003175:	75 41                	jne    c00031b8 <create_chain+0x125>
c0003177:	8d 5f 01             	lea    ebx,[edi+0x1]
c000317a:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000317d:	77 05                	ja     c0003184 <create_chain+0xf1>
c000317f:	bb 02 00 00 00       	mov    ebx,0x2
c0003184:	89 da                	mov    edx,ebx
c0003186:	89 e8                	mov    eax,ebp
c0003188:	e8 18 fc ff ff       	call   c0002da5 <get_fat>
c000318d:	83 f8 01             	cmp    eax,0x1
c0003190:	0f 84 a6 00 00 00    	je     c000323c <create_chain+0x1a9>
c0003196:	83 f8 ff             	cmp    eax,0xffffffff
c0003199:	0f 84 9d 00 00 00    	je     c000323c <create_chain+0x1a9>
c000319f:	85 c0                	test   eax,eax
c00031a1:	74 11                	je     c00031b4 <create_chain+0x121>
c00031a3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00031a6:	83 f8 01             	cmp    eax,0x1
c00031a9:	76 0d                	jbe    c00031b8 <create_chain+0x125>
c00031ab:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00031ae:	76 08                	jbe    c00031b8 <create_chain+0x125>
c00031b0:	89 c7                	mov    edi,eax
c00031b2:	eb 04                	jmp    c00031b8 <create_chain+0x125>
c00031b4:	85 db                	test   ebx,ebx
c00031b6:	75 36                	jne    c00031ee <create_chain+0x15b>
c00031b8:	89 fb                	mov    ebx,edi
c00031ba:	43                   	inc    ebx
c00031bb:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00031be:	77 0e                	ja     c00031ce <create_chain+0x13b>
c00031c0:	83 ff 01             	cmp    edi,0x1
c00031c3:	0f 86 28 ff ff ff    	jbe    c00030f1 <create_chain+0x5e>
c00031c9:	bb 02 00 00 00       	mov    ebx,0x2
c00031ce:	89 da                	mov    edx,ebx
c00031d0:	89 e8                	mov    eax,ebp
c00031d2:	e8 ce fb ff ff       	call   c0002da5 <get_fat>
c00031d7:	85 c0                	test   eax,eax
c00031d9:	74 13                	je     c00031ee <create_chain+0x15b>
c00031db:	83 f8 01             	cmp    eax,0x1
c00031de:	74 5c                	je     c000323c <create_chain+0x1a9>
c00031e0:	83 f8 ff             	cmp    eax,0xffffffff
c00031e3:	74 57                	je     c000323c <create_chain+0x1a9>
c00031e5:	39 fb                	cmp    ebx,edi
c00031e7:	75 d1                	jne    c00031ba <create_chain+0x127>
c00031e9:	e9 03 ff ff ff       	jmp    c00030f1 <create_chain+0x5e>
c00031ee:	83 c9 ff             	or     ecx,0xffffffff
c00031f1:	89 da                	mov    edx,ebx
c00031f3:	89 f0                	mov    eax,esi
c00031f5:	e8 a6 f9 ff ff       	call   c0002ba0 <put_fat>
c00031fa:	85 c0                	test   eax,eax
c00031fc:	75 14                	jne    c0003212 <create_chain+0x17f>
c00031fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003203:	74 0d                	je     c0003212 <create_chain+0x17f>
c0003205:	89 d9                	mov    ecx,ebx
c0003207:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000320b:	89 f0                	mov    eax,esi
c000320d:	e8 8e f9 ff ff       	call   c0002ba0 <put_fat>
c0003212:	85 c0                	test   eax,eax
c0003214:	75 1a                	jne    c0003230 <create_chain+0x19d>
c0003216:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003219:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000321c:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c000321f:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003222:	39 d0                	cmp    eax,edx
c0003224:	77 04                	ja     c000322a <create_chain+0x197>
c0003226:	48                   	dec    eax
c0003227:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000322a:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000322e:	eb 5a                	jmp    c000328a <create_chain+0x1f7>
c0003230:	48                   	dec    eax
c0003231:	0f 85 8d fe ff ff    	jne    c00030c4 <create_chain+0x31>
c0003237:	83 cb ff             	or     ebx,0xffffffff
c000323a:	eb 4e                	jmp    c000328a <create_chain+0x1f7>
c000323c:	89 c3                	mov    ebx,eax
c000323e:	eb 4a                	jmp    c000328a <create_chain+0x1f7>
c0003240:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003244:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003247:	41                   	inc    ecx
c0003248:	39 d9                	cmp    ecx,ebx
c000324a:	75 19                	jne    c0003265 <create_chain+0x1d2>
c000324c:	b9 02 00 00 00       	mov    ecx,0x2
c0003251:	85 d2                	test   edx,edx
c0003253:	74 03                	je     c0003258 <create_chain+0x1c5>
c0003255:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003258:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000325b:	85 c0                	test   eax,eax
c000325d:	0f 85 61 fe ff ff    	jne    c00030c4 <create_chain+0x31>
c0003263:	eb b1                	jmp    c0003216 <create_chain+0x183>
c0003265:	85 d2                	test   edx,edx
c0003267:	75 07                	jne    c0003270 <create_chain+0x1dd>
c0003269:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003270:	89 d9                	mov    ecx,ebx
c0003272:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003276:	89 e8                	mov    eax,ebp
c0003278:	e8 b9 fa ff ff       	call   c0002d36 <fill_last_frag>
c000327d:	85 c0                	test   eax,eax
c000327f:	75 af                	jne    c0003230 <create_chain+0x19d>
c0003281:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003288:	eb 8c                	jmp    c0003216 <create_chain+0x183>
c000328a:	83 c4 1c             	add    esp,0x1c
c000328d:	89 d8                	mov    eax,ebx
c000328f:	5b                   	pop    ebx
c0003290:	5e                   	pop    esi
c0003291:	5f                   	pop    edi
c0003292:	5d                   	pop    ebp
c0003293:	c3                   	ret    

c0003294 <remove_chain>:
c0003294:	55                   	push   ebp
c0003295:	57                   	push   edi
c0003296:	56                   	push   esi
c0003297:	53                   	push   ebx
c0003298:	83 ec 1c             	sub    esp,0x1c
c000329b:	83 fa 01             	cmp    edx,0x1
c000329e:	8b 18                	mov    ebx,DWORD PTR [eax]
c00032a0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00032a4:	77 0a                	ja     c00032b0 <remove_chain+0x1c>
c00032a6:	b8 02 00 00 00       	mov    eax,0x2
c00032ab:	e9 24 01 00 00       	jmp    c00033d4 <remove_chain+0x140>
c00032b0:	89 d6                	mov    esi,edx
c00032b2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00032b5:	76 ef                	jbe    c00032a6 <remove_chain+0x12>
c00032b7:	89 c7                	mov    edi,eax
c00032b9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00032be:	75 06                	jne    c00032c6 <remove_chain+0x32>
c00032c0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00032c4:	eb 54                	jmp    c000331a <remove_chain+0x86>
c00032c6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032c9:	75 06                	jne    c00032d1 <remove_chain+0x3d>
c00032cb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00032cf:	74 ef                	je     c00032c0 <remove_chain+0x2c>
c00032d1:	83 c9 ff             	or     ecx,0xffffffff
c00032d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00032d8:	89 d8                	mov    eax,ebx
c00032da:	e8 c1 f8 ff ff       	call   c0002ba0 <put_fat>
c00032df:	85 c0                	test   eax,eax
c00032e1:	74 dd                	je     c00032c0 <remove_chain+0x2c>
c00032e3:	e9 ec 00 00 00       	jmp    c00033d4 <remove_chain+0x140>
c00032e8:	83 f8 01             	cmp    eax,0x1
c00032eb:	74 b9                	je     c00032a6 <remove_chain+0x12>
c00032ed:	83 f8 ff             	cmp    eax,0xffffffff
c00032f0:	74 6d                	je     c000335f <remove_chain+0xcb>
c00032f2:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00032f5:	75 6f                	jne    c0003366 <remove_chain+0xd2>
c00032f7:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00032fa:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00032fd:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003300:	39 d0                	cmp    eax,edx
c0003302:	73 08                	jae    c000330c <remove_chain+0x78>
c0003304:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003308:	40                   	inc    eax
c0003309:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000330c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000330f:	39 e9                	cmp    ecx,ebp
c0003311:	75 64                	jne    c0003377 <remove_chain+0xe3>
c0003313:	89 ee                	mov    esi,ebp
c0003315:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003318:	76 0f                	jbe    c0003329 <remove_chain+0x95>
c000331a:	89 f2                	mov    edx,esi
c000331c:	89 f8                	mov    eax,edi
c000331e:	e8 82 fa ff ff       	call   c0002da5 <get_fat>
c0003323:	89 c5                	mov    ebp,eax
c0003325:	85 c0                	test   eax,eax
c0003327:	75 bf                	jne    c00032e8 <remove_chain+0x54>
c0003329:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000332c:	0f 85 a0 00 00 00    	jne    c00033d2 <remove_chain+0x13e>
c0003332:	eb 6c                	jmp    c00033a0 <remove_chain+0x10c>
c0003334:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003337:	84 c0                	test   al,al
c0003339:	75 7d                	jne    c00033b8 <remove_chain+0x124>
c000333b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000333e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003342:	0f 84 86 00 00 00    	je     c00033ce <remove_chain+0x13a>
c0003348:	89 da                	mov    edx,ebx
c000334a:	89 f8                	mov    eax,edi
c000334c:	e8 54 fa ff ff       	call   c0002da5 <get_fat>
c0003351:	83 f8 01             	cmp    eax,0x1
c0003354:	0f 86 4c ff ff ff    	jbe    c00032a6 <remove_chain+0x12>
c000335a:	83 f8 ff             	cmp    eax,0xffffffff
c000335d:	75 4e                	jne    c00033ad <remove_chain+0x119>
c000335f:	b8 01 00 00 00       	mov    eax,0x1
c0003364:	eb 6e                	jmp    c00033d4 <remove_chain+0x140>
c0003366:	31 c9                	xor    ecx,ecx
c0003368:	89 f2                	mov    edx,esi
c000336a:	89 d8                	mov    eax,ebx
c000336c:	e8 2f f8 ff ff       	call   c0002ba0 <put_fat>
c0003371:	85 c0                	test   eax,eax
c0003373:	74 82                	je     c00032f7 <remove_chain+0x63>
c0003375:	eb 5d                	jmp    c00033d4 <remove_chain+0x140>
c0003377:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000337a:	75 1b                	jne    c0003397 <remove_chain+0x103>
c000337c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003380:	83 ec 0c             	sub    esp,0xc
c0003383:	6a 00                	push   0x0
c0003385:	89 d8                	mov    eax,ebx
c0003387:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000338b:	e8 5b f7 ff ff       	call   c0002aeb <change_bitmap>
c0003390:	83 c4 10             	add    esp,0x10
c0003393:	85 c0                	test   eax,eax
c0003395:	75 3d                	jne    c00033d4 <remove_chain+0x140>
c0003397:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000339b:	e9 73 ff ff ff       	jmp    c0003313 <remove_chain+0x7f>
c00033a0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00033a5:	75 8d                	jne    c0003334 <remove_chain+0xa0>
c00033a7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00033ab:	eb 25                	jmp    c00033d2 <remove_chain+0x13e>
c00033ad:	8d 53 01             	lea    edx,[ebx+0x1]
c00033b0:	89 c3                	mov    ebx,eax
c00033b2:	39 c2                	cmp    edx,eax
c00033b4:	74 88                	je     c000333e <remove_chain+0xaa>
c00033b6:	eb 1a                	jmp    c00033d2 <remove_chain+0x13e>
c00033b8:	3c 03                	cmp    al,0x3
c00033ba:	75 16                	jne    c00033d2 <remove_chain+0x13e>
c00033bc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00033bf:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033c3:	77 0d                	ja     c00033d2 <remove_chain+0x13e>
c00033c5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00033c8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00033cc:	72 04                	jb     c00033d2 <remove_chain+0x13e>
c00033ce:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00033d2:	31 c0                	xor    eax,eax
c00033d4:	83 c4 1c             	add    esp,0x1c
c00033d7:	5b                   	pop    ebx
c00033d8:	5e                   	pop    esi
c00033d9:	5f                   	pop    edi
c00033da:	5d                   	pop    ebp
c00033db:	c3                   	ret    

c00033dc <dir_clear>:
c00033dc:	55                   	push   ebp
c00033dd:	57                   	push   edi
c00033de:	56                   	push   esi
c00033df:	89 c6                	mov    esi,eax
c00033e1:	53                   	push   ebx
c00033e2:	83 ec 1c             	sub    esp,0x1c
c00033e5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00033e9:	e8 a1 ed ff ff       	call   c000218f <sync_window>
c00033ee:	85 c0                	test   eax,eax
c00033f0:	0f 85 de 00 00 00    	jne    c00034d4 <dir_clear+0xf8>
c00033f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00033fa:	89 f0                	mov    eax,esi
c00033fc:	e8 e4 e8 ff ff       	call   c0001ce5 <clst2sect>
c0003401:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003408:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000340c:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c000340f:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003412:	b9 00 02 00 00       	mov    ecx,0x200
c0003417:	31 d2                	xor    edx,edx
c0003419:	89 e8                	mov    eax,ebp
c000341b:	e8 c0 e6 ff ff       	call   c0001ae0 <mem_set>
c0003420:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003424:	c1 e3 09             	shl    ebx,0x9
c0003427:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000342d:	76 1f                	jbe    c000344e <dir_clear+0x72>
c000342f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003434:	eb 18                	jmp    c000344e <dir_clear+0x72>
c0003436:	83 ec 0c             	sub    esp,0xc
c0003439:	53                   	push   ebx
c000343a:	e8 f3 4d 00 00       	call   c0008232 <ff_memalloc>
c000343f:	83 c4 10             	add    esp,0x10
c0003442:	89 c7                	mov    edi,eax
c0003444:	85 c0                	test   eax,eax
c0003446:	0f 85 8f 00 00 00    	jne    c00034db <dir_clear+0xff>
c000344c:	d1 eb                	shr    ebx,1
c000344e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003454:	77 e0                	ja     c0003436 <dir_clear+0x5a>
c0003456:	31 db                	xor    ebx,ebx
c0003458:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000345c:	39 d8                	cmp    eax,ebx
c000345e:	76 66                	jbe    c00034c6 <dir_clear+0xea>
c0003460:	83 ec 0c             	sub    esp,0xc
c0003463:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003467:	6a 01                	push   0x1
c0003469:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000346d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003471:	55                   	push   ebp
c0003472:	50                   	push   eax
c0003473:	e8 9f e5 ff ff       	call   c0001a17 <disk_write>
c0003478:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000347d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003482:	83 c4 20             	add    esp,0x20
c0003485:	85 c0                	test   eax,eax
c0003487:	75 3d                	jne    c00034c6 <dir_clear+0xea>
c0003489:	43                   	inc    ebx
c000348a:	eb cc                	jmp    c0003458 <dir_clear+0x7c>
c000348c:	83 ec 0c             	sub    esp,0xc
c000348f:	89 d8                	mov    eax,ebx
c0003491:	31 d2                	xor    edx,edx
c0003493:	55                   	push   ebp
c0003494:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003498:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000349c:	52                   	push   edx
c000349d:	50                   	push   eax
c000349e:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00034a2:	57                   	push   edi
c00034a3:	50                   	push   eax
c00034a4:	e8 6e e5 ff ff       	call   c0001a17 <disk_write>
c00034a9:	83 c4 20             	add    esp,0x20
c00034ac:	85 c0                	test   eax,eax
c00034ae:	75 0a                	jne    c00034ba <dir_clear+0xde>
c00034b0:	01 eb                	add    ebx,ebp
c00034b2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034b6:	39 d8                	cmp    eax,ebx
c00034b8:	77 d2                	ja     c000348c <dir_clear+0xb0>
c00034ba:	83 ec 0c             	sub    esp,0xc
c00034bd:	57                   	push   edi
c00034be:	e8 85 4d 00 00       	call   c0008248 <ff_memfree>
c00034c3:	83 c4 10             	add    esp,0x10
c00034c6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00034ca:	39 d8                	cmp    eax,ebx
c00034cc:	0f 95 c0             	setne  al
c00034cf:	0f b6 c0             	movzx  eax,al
c00034d2:	eb 19                	jmp    c00034ed <dir_clear+0x111>
c00034d4:	b8 01 00 00 00       	mov    eax,0x1
c00034d9:	eb 12                	jmp    c00034ed <dir_clear+0x111>
c00034db:	89 d9                	mov    ecx,ebx
c00034dd:	31 d2                	xor    edx,edx
c00034df:	c1 eb 09             	shr    ebx,0x9
c00034e2:	e8 f9 e5 ff ff       	call   c0001ae0 <mem_set>
c00034e7:	89 dd                	mov    ebp,ebx
c00034e9:	31 db                	xor    ebx,ebx
c00034eb:	eb c5                	jmp    c00034b2 <dir_clear+0xd6>
c00034ed:	83 c4 1c             	add    esp,0x1c
c00034f0:	5b                   	pop    ebx
c00034f1:	5e                   	pop    esi
c00034f2:	5f                   	pop    edi
c00034f3:	5d                   	pop    ebp
c00034f4:	c3                   	ret    

c00034f5 <dir_next>:
c00034f5:	55                   	push   ebp
c00034f6:	57                   	push   edi
c00034f7:	56                   	push   esi
c00034f8:	53                   	push   ebx
c00034f9:	89 c3                	mov    ebx,eax
c00034fb:	83 ec 1c             	sub    esp,0x1c
c00034fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003500:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003503:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003507:	8d 78 20             	lea    edi,[eax+0x20]
c000350a:	31 c0                	xor    eax,eax
c000350c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003510:	0f 94 c0             	sete   al
c0003513:	48                   	dec    eax
c0003514:	25 00 00 20 f0       	and    eax,0xf0200000
c0003519:	05 00 00 00 10       	add    eax,0x10000000
c000351e:	39 f8                	cmp    eax,edi
c0003520:	77 0e                	ja     c0003530 <dir_next+0x3b>
c0003522:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003529:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003530:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003533:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003536:	89 ce                	mov    esi,ecx
c0003538:	b8 04 00 00 00       	mov    eax,0x4
c000353d:	09 d6                	or     esi,edx
c000353f:	0f 84 da 00 00 00    	je     c000361f <dir_next+0x12a>
c0003545:	89 f8                	mov    eax,edi
c0003547:	25 ff 01 00 00       	and    eax,0x1ff
c000354c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003550:	0f 85 b9 00 00 00    	jne    c000360f <dir_next+0x11a>
c0003556:	83 c2 01             	add    edx,0x1
c0003559:	83 d1 00             	adc    ecx,0x0
c000355c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000355f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003562:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003565:	85 d2                	test   edx,edx
c0003567:	75 29                	jne    c0003592 <dir_next+0x9d>
c0003569:	89 fa                	mov    edx,edi
c000356b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000356f:	c1 ea 05             	shr    edx,0x5
c0003572:	39 c2                	cmp    edx,eax
c0003574:	0f 82 95 00 00 00    	jb     c000360f <dir_next+0x11a>
c000357a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003581:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003588:	b8 04 00 00 00       	mov    eax,0x4
c000358d:	e9 8d 00 00 00       	jmp    c000361f <dir_next+0x12a>
c0003592:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003596:	89 f9                	mov    ecx,edi
c0003598:	48                   	dec    eax
c0003599:	c1 e9 09             	shr    ecx,0x9
c000359c:	85 c8                	test   eax,ecx
c000359e:	75 6f                	jne    c000360f <dir_next+0x11a>
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	e8 fe f7 ff ff       	call   c0002da5 <get_fat>
c00035a7:	89 c6                	mov    esi,eax
c00035a9:	83 f8 01             	cmp    eax,0x1
c00035ac:	77 07                	ja     c00035b5 <dir_next+0xc0>
c00035ae:	b8 02 00 00 00       	mov    eax,0x2
c00035b3:	eb 6a                	jmp    c000361f <dir_next+0x12a>
c00035b5:	83 f8 ff             	cmp    eax,0xffffffff
c00035b8:	75 07                	jne    c00035c1 <dir_next+0xcc>
c00035ba:	b8 01 00 00 00       	mov    eax,0x1
c00035bf:	eb 5e                	jmp    c000361f <dir_next+0x12a>
c00035c1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00035c4:	77 37                	ja     c00035fd <dir_next+0x108>
c00035c6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00035cb:	74 ad                	je     c000357a <dir_next+0x85>
c00035cd:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00035d0:	89 d8                	mov    eax,ebx
c00035d2:	e8 bc fa ff ff       	call   c0003093 <create_chain>
c00035d7:	89 c6                	mov    esi,eax
c00035d9:	b8 07 00 00 00       	mov    eax,0x7
c00035de:	85 f6                	test   esi,esi
c00035e0:	74 3d                	je     c000361f <dir_next+0x12a>
c00035e2:	83 fe 01             	cmp    esi,0x1
c00035e5:	74 c7                	je     c00035ae <dir_next+0xb9>
c00035e7:	83 fe ff             	cmp    esi,0xffffffff
c00035ea:	74 ce                	je     c00035ba <dir_next+0xc5>
c00035ec:	89 f2                	mov    edx,esi
c00035ee:	89 e8                	mov    eax,ebp
c00035f0:	e8 e7 fd ff ff       	call   c00033dc <dir_clear>
c00035f5:	85 c0                	test   eax,eax
c00035f7:	75 c1                	jne    c00035ba <dir_next+0xc5>
c00035f9:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00035fd:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003600:	89 f2                	mov    edx,esi
c0003602:	89 e8                	mov    eax,ebp
c0003604:	e8 dc e6 ff ff       	call   c0001ce5 <clst2sect>
c0003609:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000360c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000360f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003613:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003616:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000361a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000361d:	31 c0                	xor    eax,eax
c000361f:	83 c4 1c             	add    esp,0x1c
c0003622:	5b                   	pop    ebx
c0003623:	5e                   	pop    esi
c0003624:	5f                   	pop    edi
c0003625:	5d                   	pop    ebp
c0003626:	c3                   	ret    

c0003627 <load_xdir>:
c0003627:	55                   	push   ebp
c0003628:	57                   	push   edi
c0003629:	56                   	push   esi
c000362a:	89 c6                	mov    esi,eax
c000362c:	53                   	push   ebx
c000362d:	83 ec 1c             	sub    esp,0x1c
c0003630:	8b 00                	mov    eax,DWORD PTR [eax]
c0003632:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003635:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003638:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000363b:	e8 e3 eb ff ff       	call   c0002223 <move_window>
c0003640:	89 c3                	mov    ebx,eax
c0003642:	85 c0                	test   eax,eax
c0003644:	0f 85 0c 01 00 00    	jne    c0003756 <load_xdir+0x12f>
c000364a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000364d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003650:	0f 85 fb 00 00 00    	jne    c0003751 <load_xdir+0x12a>
c0003656:	89 f8                	mov    eax,edi
c0003658:	b9 20 00 00 00       	mov    ecx,0x20
c000365d:	e8 69 e4 ff ff       	call   c0001acb <mem_cpy>
c0003662:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003666:	40                   	inc    eax
c0003667:	c1 e0 05             	shl    eax,0x5
c000366a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000366e:	83 e8 60             	sub    eax,0x60
c0003671:	3d 00 02 00 00       	cmp    eax,0x200
c0003676:	0f 87 d5 00 00 00    	ja     c0003751 <load_xdir+0x12a>
c000367c:	31 d2                	xor    edx,edx
c000367e:	89 f0                	mov    eax,esi
c0003680:	e8 70 fe ff ff       	call   c00034f5 <dir_next>
c0003685:	89 c3                	mov    ebx,eax
c0003687:	83 f8 04             	cmp    eax,0x4
c000368a:	0f 84 c1 00 00 00    	je     c0003751 <load_xdir+0x12a>
c0003690:	85 c0                	test   eax,eax
c0003692:	0f 85 be 00 00 00    	jne    c0003756 <load_xdir+0x12f>
c0003698:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000369b:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000369e:	8b 06                	mov    eax,DWORD PTR [esi]
c00036a0:	e8 7e eb ff ff       	call   c0002223 <move_window>
c00036a5:	89 c3                	mov    ebx,eax
c00036a7:	85 c0                	test   eax,eax
c00036a9:	0f 85 a7 00 00 00    	jne    c0003756 <load_xdir+0x12f>
c00036af:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00036b2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00036b5:	0f 85 96 00 00 00    	jne    c0003751 <load_xdir+0x12a>
c00036bb:	8d 47 20             	lea    eax,[edi+0x20]
c00036be:	b9 20 00 00 00       	mov    ecx,0x20
c00036c3:	e8 03 e4 ff ff       	call   c0001acb <mem_cpy>
c00036c8:	31 d2                	xor    edx,edx
c00036ca:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00036ce:	b9 0f 00 00 00       	mov    ecx,0xf
c00036d3:	83 c0 2c             	add    eax,0x2c
c00036d6:	f7 f1                	div    ecx
c00036d8:	c1 e0 05             	shl    eax,0x5
c00036db:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00036df:	77 70                	ja     c0003751 <load_xdir+0x12a>
c00036e1:	bd 40 00 00 00       	mov    ebp,0x40
c00036e6:	31 d2                	xor    edx,edx
c00036e8:	89 f0                	mov    eax,esi
c00036ea:	e8 06 fe ff ff       	call   c00034f5 <dir_next>
c00036ef:	89 c3                	mov    ebx,eax
c00036f1:	83 f8 04             	cmp    eax,0x4
c00036f4:	74 5b                	je     c0003751 <load_xdir+0x12a>
c00036f6:	85 c0                	test   eax,eax
c00036f8:	75 5c                	jne    c0003756 <load_xdir+0x12f>
c00036fa:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00036fd:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003700:	8b 06                	mov    eax,DWORD PTR [esi]
c0003702:	e8 1c eb ff ff       	call   c0002223 <move_window>
c0003707:	89 c3                	mov    ebx,eax
c0003709:	85 c0                	test   eax,eax
c000370b:	75 49                	jne    c0003756 <load_xdir+0x12f>
c000370d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003710:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003713:	75 3c                	jne    c0003751 <load_xdir+0x12a>
c0003715:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000371b:	77 0d                	ja     c000372a <load_xdir+0x103>
c000371d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003720:	b9 20 00 00 00       	mov    ecx,0x20
c0003725:	e8 a1 e3 ff ff       	call   c0001acb <mem_cpy>
c000372a:	83 c5 20             	add    ebp,0x20
c000372d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003731:	77 b3                	ja     c00036e6 <load_xdir+0xbf>
c0003733:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003739:	77 1b                	ja     c0003756 <load_xdir+0x12f>
c000373b:	89 f8                	mov    eax,edi
c000373d:	e8 d8 e7 ff ff       	call   c0001f1a <xdir_sum>
c0003742:	89 c1                	mov    ecx,eax
c0003744:	8d 47 02             	lea    eax,[edi+0x2]
c0003747:	e8 00 e3 ff ff       	call   c0001a4c <ld_word>
c000374c:	66 39 c1             	cmp    cx,ax
c000374f:	74 05                	je     c0003756 <load_xdir+0x12f>
c0003751:	bb 02 00 00 00       	mov    ebx,0x2
c0003756:	83 c4 1c             	add    esp,0x1c
c0003759:	89 d8                	mov    eax,ebx
c000375b:	5b                   	pop    ebx
c000375c:	5e                   	pop    esi
c000375d:	5f                   	pop    edi
c000375e:	5d                   	pop    ebp
c000375f:	c3                   	ret    

c0003760 <load_obj_xdir>:
c0003760:	53                   	push   ebx
c0003761:	89 c3                	mov    ebx,eax
c0003763:	83 ec 08             	sub    esp,0x8
c0003766:	8b 02                	mov    eax,DWORD PTR [edx]
c0003768:	89 03                	mov    DWORD PTR [ebx],eax
c000376a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000376d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003770:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003773:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003776:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003779:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003780:	30 c0                	xor    al,al
c0003782:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003789:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000378c:	89 d8                	mov    eax,ebx
c000378e:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003791:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003794:	e8 02 f8 ff ff       	call   c0002f9b <dir_sdi>
c0003799:	85 c0                	test   eax,eax
c000379b:	75 0b                	jne    c00037a8 <load_obj_xdir+0x48>
c000379d:	83 c4 08             	add    esp,0x8
c00037a0:	89 d8                	mov    eax,ebx
c00037a2:	5b                   	pop    ebx
c00037a3:	e9 7f fe ff ff       	jmp    c0003627 <load_xdir>
c00037a8:	83 c4 08             	add    esp,0x8
c00037ab:	5b                   	pop    ebx
c00037ac:	c3                   	ret    

c00037ad <dir_read>:
c00037ad:	55                   	push   ebp
c00037ae:	bd 04 00 00 00       	mov    ebp,0x4
c00037b3:	57                   	push   edi
c00037b4:	56                   	push   esi
c00037b5:	be ff ff ff ff       	mov    esi,0xffffffff
c00037ba:	53                   	push   ebx
c00037bb:	89 c3                	mov    ebx,eax
c00037bd:	83 ec 1c             	sub    esp,0x1c
c00037c0:	8b 38                	mov    edi,DWORD PTR [eax]
c00037c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00037c6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00037cb:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00037ce:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00037d1:	89 c8                	mov    eax,ecx
c00037d3:	09 d0                	or     eax,edx
c00037d5:	0f 84 25 01 00 00    	je     c0003900 <dir_read+0x153>
c00037db:	89 f8                	mov    eax,edi
c00037dd:	e8 41 ea ff ff       	call   c0002223 <move_window>
c00037e2:	89 c5                	mov    ebp,eax
c00037e4:	85 c0                	test   eax,eax
c00037e6:	0f 85 23 01 00 00    	jne    c000390f <dir_read+0x162>
c00037ec:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00037ef:	8a 0a                	mov    cl,BYTE PTR [edx]
c00037f1:	84 c9                	test   cl,cl
c00037f3:	0f 84 11 01 00 00    	je     c000390a <dir_read+0x15d>
c00037f9:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00037fc:	75 48                	jne    c0003846 <dir_read+0x99>
c00037fe:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003803:	74 10                	je     c0003815 <dir_read+0x68>
c0003805:	80 f9 83             	cmp    cl,0x83
c0003808:	0f 85 dd 00 00 00    	jne    c00038eb <dir_read+0x13e>
c000380e:	31 ed                	xor    ebp,ebp
c0003810:	e9 08 01 00 00       	jmp    c000391d <dir_read+0x170>
c0003815:	80 f9 85             	cmp    cl,0x85
c0003818:	0f 85 cd 00 00 00    	jne    c00038eb <dir_read+0x13e>
c000381e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003821:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003824:	89 d8                	mov    eax,ebx
c0003826:	e8 fc fd ff ff       	call   c0003627 <load_xdir>
c000382b:	89 c5                	mov    ebp,eax
c000382d:	85 c0                	test   eax,eax
c000382f:	0f 85 da 00 00 00    	jne    c000390f <dir_read+0x162>
c0003835:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003838:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c000383b:	83 e0 3f             	and    eax,0x3f
c000383e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003841:	e9 d7 00 00 00       	jmp    c000391d <dir_read+0x170>
c0003846:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003849:	83 e0 3f             	and    eax,0x3f
c000384c:	80 f9 e5             	cmp    cl,0xe5
c000384f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003853:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003856:	0f 84 8a 00 00 00    	je     c00038e6 <dir_read+0x139>
c000385c:	80 f9 2e             	cmp    cl,0x2e
c000385f:	0f 84 81 00 00 00    	je     c00038e6 <dir_read+0x139>
c0003865:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003869:	83 e0 1f             	and    eax,0x1f
c000386c:	83 f8 08             	cmp    eax,0x8
c000386f:	0f 94 c0             	sete   al
c0003872:	0f b6 c0             	movzx  eax,al
c0003875:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003879:	75 6b                	jne    c00038e6 <dir_read+0x139>
c000387b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003880:	75 44                	jne    c00038c6 <dir_read+0x119>
c0003882:	f6 c1 40             	test   cl,0x40
c0003885:	74 12                	je     c0003899 <dir_read+0xec>
c0003887:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000388a:	83 e1 bf             	and    ecx,0xffffffbf
c000388d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003891:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003894:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003897:	eb 06                	jmp    c000389f <dir_read+0xf2>
c0003899:	89 f0                	mov    eax,esi
c000389b:	38 c8                	cmp    al,cl
c000389d:	75 47                	jne    c00038e6 <dir_read+0x139>
c000389f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00038a3:	be ff ff ff ff       	mov    esi,0xffffffff
c00038a8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00038ab:	75 3e                	jne    c00038eb <dir_read+0x13e>
c00038ad:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00038b0:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00038b4:	e8 95 e4 ff ff       	call   c0001d4e <pick_lfn>
c00038b9:	85 c0                	test   eax,eax
c00038bb:	74 2e                	je     c00038eb <dir_read+0x13e>
c00038bd:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00038c1:	8d 71 ff             	lea    esi,[ecx-0x1]
c00038c4:	eb 25                	jmp    c00038eb <dir_read+0x13e>
c00038c6:	89 f0                	mov    eax,esi
c00038c8:	84 c0                	test   al,al
c00038ca:	75 11                	jne    c00038dd <dir_read+0x130>
c00038cc:	89 d0                	mov    eax,edx
c00038ce:	e8 35 e6 ff ff       	call   c0001f08 <sum_sfn>
c00038d3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00038d7:	0f 84 31 ff ff ff    	je     c000380e <dir_read+0x61>
c00038dd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00038e4:	eb 37                	jmp    c000391d <dir_read+0x170>
c00038e6:	be ff ff ff ff       	mov    esi,0xffffffff
c00038eb:	31 d2                	xor    edx,edx
c00038ed:	89 d8                	mov    eax,ebx
c00038ef:	e8 01 fc ff ff       	call   c00034f5 <dir_next>
c00038f4:	89 c5                	mov    ebp,eax
c00038f6:	85 c0                	test   eax,eax
c00038f8:	0f 84 cd fe ff ff    	je     c00037cb <dir_read+0x1e>
c00038fe:	eb 0f                	jmp    c000390f <dir_read+0x162>
c0003900:	85 ed                	test   ebp,ebp
c0003902:	0f 84 06 ff ff ff    	je     c000380e <dir_read+0x61>
c0003908:	eb 05                	jmp    c000390f <dir_read+0x162>
c000390a:	bd 04 00 00 00       	mov    ebp,0x4
c000390f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003916:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000391d:	83 c4 1c             	add    esp,0x1c
c0003920:	89 e8                	mov    eax,ebp
c0003922:	5b                   	pop    ebx
c0003923:	5e                   	pop    esi
c0003924:	5f                   	pop    edi
c0003925:	5d                   	pop    ebp
c0003926:	c3                   	ret    

c0003927 <dir_alloc>:
c0003927:	55                   	push   ebp
c0003928:	89 d5                	mov    ebp,edx
c000392a:	57                   	push   edi
c000392b:	31 d2                	xor    edx,edx
c000392d:	56                   	push   esi
c000392e:	53                   	push   ebx
c000392f:	89 c3                	mov    ebx,eax
c0003931:	83 ec 0c             	sub    esp,0xc
c0003934:	8b 38                	mov    edi,DWORD PTR [eax]
c0003936:	e8 60 f6 ff ff       	call   c0002f9b <dir_sdi>
c000393b:	85 c0                	test   eax,eax
c000393d:	75 4e                	jne    c000398d <dir_alloc+0x66>
c000393f:	31 f6                	xor    esi,esi
c0003941:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003944:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003947:	89 f8                	mov    eax,edi
c0003949:	e8 d5 e8 ff ff       	call   c0002223 <move_window>
c000394e:	85 c0                	test   eax,eax
c0003950:	75 3b                	jne    c000398d <dir_alloc+0x66>
c0003952:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003955:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003958:	8a 12                	mov    dl,BYTE PTR [edx]
c000395a:	75 07                	jne    c0003963 <dir_alloc+0x3c>
c000395c:	f7 d2                	not    edx
c000395e:	c0 ea 07             	shr    dl,0x7
c0003961:	eb 0d                	jmp    c0003970 <dir_alloc+0x49>
c0003963:	80 fa e5             	cmp    dl,0xe5
c0003966:	0f 94 c1             	sete   cl
c0003969:	84 d2                	test   dl,dl
c000396b:	0f 94 c2             	sete   dl
c000396e:	09 ca                	or     edx,ecx
c0003970:	84 d2                	test   dl,dl
c0003972:	74 07                	je     c000397b <dir_alloc+0x54>
c0003974:	46                   	inc    esi
c0003975:	39 ee                	cmp    esi,ebp
c0003977:	75 04                	jne    c000397d <dir_alloc+0x56>
c0003979:	eb 1c                	jmp    c0003997 <dir_alloc+0x70>
c000397b:	31 f6                	xor    esi,esi
c000397d:	ba 01 00 00 00       	mov    edx,0x1
c0003982:	89 d8                	mov    eax,ebx
c0003984:	e8 6c fb ff ff       	call   c00034f5 <dir_next>
c0003989:	85 c0                	test   eax,eax
c000398b:	74 b4                	je     c0003941 <dir_alloc+0x1a>
c000398d:	83 f8 04             	cmp    eax,0x4
c0003990:	75 05                	jne    c0003997 <dir_alloc+0x70>
c0003992:	b8 07 00 00 00       	mov    eax,0x7
c0003997:	83 c4 0c             	add    esp,0xc
c000399a:	5b                   	pop    ebx
c000399b:	5e                   	pop    esi
c000399c:	5f                   	pop    edi
c000399d:	5d                   	pop    ebp
c000399e:	c3                   	ret    

c000399f <store_xdir>:
c000399f:	55                   	push   ebp
c00039a0:	57                   	push   edi
c00039a1:	89 c7                	mov    edi,eax
c00039a3:	56                   	push   esi
c00039a4:	53                   	push   ebx
c00039a5:	83 ec 0c             	sub    esp,0xc
c00039a8:	8b 00                	mov    eax,DWORD PTR [eax]
c00039aa:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00039ad:	89 e8                	mov    eax,ebp
c00039af:	e8 66 e5 ff ff       	call   c0001f1a <xdir_sum>
c00039b4:	0f b7 d0             	movzx  edx,ax
c00039b7:	8d 45 02             	lea    eax,[ebp+0x2]
c00039ba:	e8 ff e0 ff ff       	call   c0001abe <st_word>
c00039bf:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c00039c2:	89 f8                	mov    eax,edi
c00039c4:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00039c8:	e8 ce f5 ff ff       	call   c0002f9b <dir_sdi>
c00039cd:	89 c6                	mov    esi,eax
c00039cf:	85 f6                	test   esi,esi
c00039d1:	75 3d                	jne    c0003a10 <store_xdir+0x71>
c00039d3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c00039d6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c00039d9:	8b 07                	mov    eax,DWORD PTR [edi]
c00039db:	e8 43 e8 ff ff       	call   c0002223 <move_window>
c00039e0:	89 c6                	mov    esi,eax
c00039e2:	85 c0                	test   eax,eax
c00039e4:	75 2a                	jne    c0003a10 <store_xdir+0x71>
c00039e6:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c00039e9:	b9 20 00 00 00       	mov    ecx,0x20
c00039ee:	89 ea                	mov    edx,ebp
c00039f0:	e8 d6 e0 ff ff       	call   c0001acb <mem_cpy>
c00039f5:	8b 07                	mov    eax,DWORD PTR [edi]
c00039f7:	85 db                	test   ebx,ebx
c00039f9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00039fd:	74 11                	je     c0003a10 <store_xdir+0x71>
c00039ff:	31 d2                	xor    edx,edx
c0003a01:	89 f8                	mov    eax,edi
c0003a03:	e8 ed fa ff ff       	call   c00034f5 <dir_next>
c0003a08:	83 c5 20             	add    ebp,0x20
c0003a0b:	89 c6                	mov    esi,eax
c0003a0d:	4b                   	dec    ebx
c0003a0e:	eb bf                	jmp    c00039cf <store_xdir+0x30>
c0003a10:	89 f0                	mov    eax,esi
c0003a12:	83 fe 02             	cmp    esi,0x2
c0003a15:	76 05                	jbe    c0003a1c <store_xdir+0x7d>
c0003a17:	b8 02 00 00 00       	mov    eax,0x2
c0003a1c:	83 c4 0c             	add    esp,0xc
c0003a1f:	5b                   	pop    ebx
c0003a20:	5e                   	pop    esi
c0003a21:	5f                   	pop    edi
c0003a22:	5d                   	pop    ebp
c0003a23:	c3                   	ret    

c0003a24 <dir_remove>:
c0003a24:	57                   	push   edi
c0003a25:	56                   	push   esi
c0003a26:	53                   	push   ebx
c0003a27:	89 c3                	mov    ebx,eax
c0003a29:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003a2c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a2e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003a31:	83 fa ff             	cmp    edx,0xffffffff
c0003a34:	74 09                	je     c0003a3f <dir_remove+0x1b>
c0003a36:	e8 60 f5 ff ff       	call   c0002f9b <dir_sdi>
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 41                	jne    c0003a80 <dir_remove+0x5c>
c0003a3f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003a42:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003a45:	89 f0                	mov    eax,esi
c0003a47:	e8 d7 e7 ff ff       	call   c0002223 <move_window>
c0003a4c:	85 c0                	test   eax,eax
c0003a4e:	75 26                	jne    c0003a76 <dir_remove+0x52>
c0003a50:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a53:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003a56:	75 05                	jne    c0003a5d <dir_remove+0x39>
c0003a58:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003a5b:	eb 03                	jmp    c0003a60 <dir_remove+0x3c>
c0003a5d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a60:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a64:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003a67:	73 17                	jae    c0003a80 <dir_remove+0x5c>
c0003a69:	31 d2                	xor    edx,edx
c0003a6b:	89 d8                	mov    eax,ebx
c0003a6d:	e8 83 fa ff ff       	call   c00034f5 <dir_next>
c0003a72:	85 c0                	test   eax,eax
c0003a74:	74 c9                	je     c0003a3f <dir_remove+0x1b>
c0003a76:	83 f8 04             	cmp    eax,0x4
c0003a79:	75 05                	jne    c0003a80 <dir_remove+0x5c>
c0003a7b:	b8 02 00 00 00       	mov    eax,0x2
c0003a80:	5b                   	pop    ebx
c0003a81:	5e                   	pop    esi
c0003a82:	5f                   	pop    edi
c0003a83:	c3                   	ret    

c0003a84 <create_name>:
c0003a84:	55                   	push   ebp
c0003a85:	89 d5                	mov    ebp,edx
c0003a87:	57                   	push   edi
c0003a88:	89 c7                	mov    edi,eax
c0003a8a:	56                   	push   esi
c0003a8b:	31 f6                	xor    esi,esi
c0003a8d:	53                   	push   ebx
c0003a8e:	83 ec 3c             	sub    esp,0x3c
c0003a91:	8b 02                	mov    eax,DWORD PTR [edx]
c0003a93:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003a97:	8b 07                	mov    eax,DWORD PTR [edi]
c0003a99:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003a9c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003aa0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003aa4:	e8 7d e0 ff ff       	call   c0001b26 <tchar2uni>
c0003aa9:	89 c3                	mov    ebx,eax
c0003aab:	83 f8 ff             	cmp    eax,0xffffffff
c0003aae:	75 0a                	jne    c0003aba <create_name+0x36>
c0003ab0:	b8 06 00 00 00       	mov    eax,0x6
c0003ab5:	e9 83 02 00 00       	jmp    c0003d3d <create_name+0x2b9>
c0003aba:	3d ff ff 00 00       	cmp    eax,0xffff
c0003abf:	76 0c                	jbe    c0003acd <create_name+0x49>
c0003ac1:	c1 e8 10             	shr    eax,0x10
c0003ac4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003ac8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003acc:	46                   	inc    esi
c0003acd:	66 83 fb 1f          	cmp    bx,0x1f
c0003ad1:	89 d8                	mov    eax,ebx
c0003ad3:	76 36                	jbe    c0003b0b <create_name+0x87>
c0003ad5:	66 83 fb 2f          	cmp    bx,0x2f
c0003ad9:	74 30                	je     c0003b0b <create_name+0x87>
c0003adb:	66 83 fb 5c          	cmp    bx,0x5c
c0003adf:	74 39                	je     c0003b1a <create_name+0x96>
c0003ae1:	66 83 fb 7f          	cmp    bx,0x7f
c0003ae5:	77 11                	ja     c0003af8 <create_name+0x74>
c0003ae7:	0f b7 d3             	movzx  edx,bx
c0003aea:	b8 72 05 02 c0       	mov    eax,0xc0020572
c0003aef:	e8 1a e0 ff ff       	call   c0001b0e <chk_chr>
c0003af4:	85 c0                	test   eax,eax
c0003af6:	75 b8                	jne    c0003ab0 <create_name+0x2c>
c0003af8:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003afe:	77 b0                	ja     c0003ab0 <create_name+0x2c>
c0003b00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b04:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003b08:	46                   	inc    esi
c0003b09:	eb 95                	jmp    c0003aa0 <create_name+0x1c>
c0003b0b:	66 83 f8 1f          	cmp    ax,0x1f
c0003b0f:	b3 04                	mov    bl,0x4
c0003b11:	76 19                	jbe    c0003b2c <create_name+0xa8>
c0003b13:	eb 05                	jmp    c0003b1a <create_name+0x96>
c0003b15:	40                   	inc    eax
c0003b16:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b1e:	8a 10                	mov    dl,BYTE PTR [eax]
c0003b20:	80 fa 2f             	cmp    dl,0x2f
c0003b23:	74 f0                	je     c0003b15 <create_name+0x91>
c0003b25:	80 fa 5c             	cmp    dl,0x5c
c0003b28:	74 eb                	je     c0003b15 <create_name+0x91>
c0003b2a:	31 db                	xor    ebx,ebx
c0003b2c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003b30:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003b33:	85 f6                	test   esi,esi
c0003b35:	74 18                	je     c0003b4f <create_name+0xcb>
c0003b37:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b3b:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003b40:	66 83 f8 20          	cmp    ax,0x20
c0003b44:	74 06                	je     c0003b4c <create_name+0xc8>
c0003b46:	66 83 f8 2e          	cmp    ax,0x2e
c0003b4a:	75 03                	jne    c0003b4f <create_name+0xcb>
c0003b4c:	4e                   	dec    esi
c0003b4d:	eb e4                	jmp    c0003b33 <create_name+0xaf>
c0003b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b53:	31 ed                	xor    ebp,ebp
c0003b55:	85 f6                	test   esi,esi
c0003b57:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003b5d:	0f 84 4d ff ff ff    	je     c0003ab0 <create_name+0x2c>
c0003b63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b67:	8d 55 01             	lea    edx,[ebp+0x1]
c0003b6a:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003b6e:	66 83 f8 20          	cmp    ax,0x20
c0003b72:	75 04                	jne    c0003b78 <create_name+0xf4>
c0003b74:	89 d5                	mov    ebp,edx
c0003b76:	eb eb                	jmp    c0003b63 <create_name+0xdf>
c0003b78:	85 ed                	test   ebp,ebp
c0003b7a:	75 06                	jne    c0003b82 <create_name+0xfe>
c0003b7c:	66 83 f8 2e          	cmp    ax,0x2e
c0003b80:	75 08                	jne    c0003b8a <create_name+0x106>
c0003b82:	83 cb 03             	or     ebx,0x3
c0003b85:	eb 03                	jmp    c0003b8a <create_name+0x106>
c0003b87:	4e                   	dec    esi
c0003b88:	74 0c                	je     c0003b96 <create_name+0x112>
c0003b8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b8e:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003b94:	75 f1                	jne    c0003b87 <create_name+0x103>
c0003b96:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b9b:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003b9e:	ba 20 00 00 00       	mov    edx,0x20
c0003ba3:	e8 38 df ff ff       	call   c0001ae0 <mem_set>
c0003ba8:	c7 44 24 14 08 00 00 00 	mov    DWORD PTR [esp+0x14],0x8
c0003bb0:	31 c9                	xor    ecx,ecx
c0003bb2:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0003bb7:	8d 45 01             	lea    eax,[ebp+0x1]
c0003bba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003bbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bc2:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003bc6:	66 85 ed             	test   bp,bp
c0003bc9:	0f 84 1f 01 00 00    	je     c0003cee <create_name+0x26a>
c0003bcf:	66 83 fd 20          	cmp    bp,0x20
c0003bd3:	74 0c                	je     c0003be1 <create_name+0x15d>
c0003bd5:	66 83 fd 2e          	cmp    bp,0x2e
c0003bd9:	75 0f                	jne    c0003bea <create_name+0x166>
c0003bdb:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003bdf:	74 09                	je     c0003bea <create_name+0x166>
c0003be1:	83 cb 03             	or     ebx,0x3
c0003be4:	8b 6c 24 10          	mov    ebp,DWORD PTR [esp+0x10]
c0003be8:	eb cd                	jmp    c0003bb7 <create_name+0x133>
c0003bea:	3b 4c 24 14          	cmp    ecx,DWORD PTR [esp+0x14]
c0003bee:	73 06                	jae    c0003bf6 <create_name+0x172>
c0003bf0:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003bf4:	75 3a                	jne    c0003c30 <create_name+0x1ac>
c0003bf6:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
c0003bfb:	75 08                	jne    c0003c05 <create_name+0x181>
c0003bfd:	83 cb 03             	or     ebx,0x3
c0003c00:	e9 e9 00 00 00       	jmp    c0003cee <create_name+0x26a>
c0003c05:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c09:	74 0d                	je     c0003c18 <create_name+0x194>
c0003c0b:	83 cb 03             	or     ebx,0x3
c0003c0e:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
c0003c12:	0f 87 d6 00 00 00    	ja     c0003cee <create_name+0x26a>
c0003c18:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003c1d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0003c21:	c7 44 24 14 0b 00 00 00 	mov    DWORD PTR [esp+0x14],0xb
c0003c29:	b9 08 00 00 00       	mov    ecx,0x8
c0003c2e:	eb b4                	jmp    c0003be4 <create_name+0x160>
c0003c30:	66 83 fd 7f          	cmp    bp,0x7f
c0003c34:	76 68                	jbe    c0003c9e <create_name+0x21a>
c0003c36:	88 da                	mov    dl,bl
c0003c38:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003c3c:	83 ca 02             	or     edx,0x2
c0003c3f:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003c43:	50                   	push   eax
c0003c44:	50                   	push   eax
c0003c45:	68 b5 01 00 00       	push   0x1b5
c0003c4a:	55                   	push   ebp
c0003c4b:	e8 0f 46 00 00       	call   c000825f <ff_uni2oem>
c0003c50:	83 c4 10             	add    esp,0x10
c0003c53:	89 c5                	mov    ebp,eax
c0003c55:	a8 80                	test   al,0x80
c0003c57:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003c5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003c5f:	74 0c                	je     c0003c6d <create_name+0x1e9>
c0003c61:	83 e5 7f             	and    ebp,0x7f
c0003c64:	0f b6 ad c0 04 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffdfb40]
c0003c6b:	eb 2a                	jmp    c0003c97 <create_name+0x213>
c0003c6d:	66 3d ff 00          	cmp    ax,0xff
c0003c71:	76 24                	jbe    c0003c97 <create_name+0x213>
c0003c73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0003c77:	48                   	dec    eax
c0003c78:	39 c8                	cmp    eax,ecx
c0003c7a:	77 0c                	ja     c0003c88 <create_name+0x204>
c0003c7c:	83 cb 03             	or     ebx,0x3
c0003c7f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0003c83:	e9 5c ff ff ff       	jmp    c0003be4 <create_name+0x160>
c0003c88:	89 e8                	mov    eax,ebp
c0003c8a:	88 d3                	mov    bl,dl
c0003c8c:	66 c1 e8 08          	shr    ax,0x8
c0003c90:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003c94:	41                   	inc    ecx
c0003c95:	eb 4b                	jmp    c0003ce2 <create_name+0x25e>
c0003c97:	66 85 ed             	test   bp,bp
c0003c9a:	88 d3                	mov    bl,dl
c0003c9c:	74 19                	je     c0003cb7 <create_name+0x233>
c0003c9e:	0f b7 d5             	movzx  edx,bp
c0003ca1:	b8 7b 05 02 c0       	mov    eax,0xc002057b
c0003ca6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003caa:	e8 5f de ff ff       	call   c0001b0e <chk_chr>
c0003caf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003cb3:	85 c0                	test   eax,eax
c0003cb5:	74 0a                	je     c0003cc1 <create_name+0x23d>
c0003cb7:	83 cb 03             	or     ebx,0x3
c0003cba:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003cbf:	eb 21                	jmp    c0003ce2 <create_name+0x25e>
c0003cc1:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003cc4:	66 83 f8 19          	cmp    ax,0x19
c0003cc8:	77 07                	ja     c0003cd1 <create_name+0x24d>
c0003cca:	80 4c 24 0b 02       	or     BYTE PTR [esp+0xb],0x2
c0003ccf:	eb 11                	jmp    c0003ce2 <create_name+0x25e>
c0003cd1:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003cd4:	66 83 f8 19          	cmp    ax,0x19
c0003cd8:	77 08                	ja     c0003ce2 <create_name+0x25e>
c0003cda:	80 4c 24 0b 01       	or     BYTE PTR [esp+0xb],0x1
c0003cdf:	83 ed 20             	sub    ebp,0x20
c0003ce2:	89 e8                	mov    eax,ebp
c0003ce4:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ce8:	41                   	inc    ecx
c0003ce9:	e9 f6 fe ff ff       	jmp    c0003be4 <create_name+0x160>
c0003cee:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003cf2:	75 04                	jne    c0003cf8 <create_name+0x274>
c0003cf4:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003cf8:	83 7c 24 14 08       	cmp    DWORD PTR [esp+0x14],0x8
c0003cfd:	75 05                	jne    c0003d04 <create_name+0x280>
c0003cff:	c0 64 24 0b 02       	shl    BYTE PTR [esp+0xb],0x2
c0003d04:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003d08:	83 e0 0c             	and    eax,0xc
c0003d0b:	3c 0c                	cmp    al,0xc
c0003d0d:	74 0b                	je     c0003d1a <create_name+0x296>
c0003d0f:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003d13:	83 e0 03             	and    eax,0x3
c0003d16:	3c 03                	cmp    al,0x3
c0003d18:	75 05                	jne    c0003d1f <create_name+0x29b>
c0003d1a:	83 cb 02             	or     ebx,0x2
c0003d1d:	eb 19                	jmp    c0003d38 <create_name+0x2b4>
c0003d1f:	f6 c3 02             	test   bl,0x2
c0003d22:	75 14                	jne    c0003d38 <create_name+0x2b4>
c0003d24:	f6 44 24 0b 01       	test   BYTE PTR [esp+0xb],0x1
c0003d29:	74 03                	je     c0003d2e <create_name+0x2aa>
c0003d2b:	83 cb 10             	or     ebx,0x10
c0003d2e:	f6 44 24 0b 04       	test   BYTE PTR [esp+0xb],0x4
c0003d33:	74 03                	je     c0003d38 <create_name+0x2b4>
c0003d35:	83 cb 08             	or     ebx,0x8
c0003d38:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003d3b:	31 c0                	xor    eax,eax
c0003d3d:	83 c4 3c             	add    esp,0x3c
c0003d40:	5b                   	pop    ebx
c0003d41:	5e                   	pop    esi
c0003d42:	5f                   	pop    edi
c0003d43:	5d                   	pop    ebp
c0003d44:	c3                   	ret    

c0003d45 <xname_sum>:
c0003d45:	56                   	push   esi
c0003d46:	89 c6                	mov    esi,eax
c0003d48:	53                   	push   ebx
c0003d49:	31 db                	xor    ebx,ebx
c0003d4b:	51                   	push   ecx
c0003d4c:	83 c6 02             	add    esi,0x2
c0003d4f:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003d53:	66 85 c0             	test   ax,ax
c0003d56:	74 1f                	je     c0003d77 <xname_sum+0x32>
c0003d58:	66 d1 cb             	ror    bx,1
c0003d5b:	83 ec 0c             	sub    esp,0xc
c0003d5e:	50                   	push   eax
c0003d5f:	e8 00 46 00 00       	call   c0008364 <ff_wtoupper>
c0003d64:	0f b6 d0             	movzx  edx,al
c0003d67:	01 d3                	add    ebx,edx
c0003d69:	83 c4 10             	add    esp,0x10
c0003d6c:	66 c1 e8 08          	shr    ax,0x8
c0003d70:	66 d1 cb             	ror    bx,1
c0003d73:	01 c3                	add    ebx,eax
c0003d75:	eb d5                	jmp    c0003d4c <xname_sum+0x7>
c0003d77:	5a                   	pop    edx
c0003d78:	89 d8                	mov    eax,ebx
c0003d7a:	5b                   	pop    ebx
c0003d7b:	5e                   	pop    esi
c0003d7c:	c3                   	ret    

c0003d7d <create_xdir>:
c0003d7d:	55                   	push   ebp
c0003d7e:	b9 40 00 00 00       	mov    ecx,0x40
c0003d83:	57                   	push   edi
c0003d84:	bd 01 00 00 00       	mov    ebp,0x1
c0003d89:	56                   	push   esi
c0003d8a:	31 ff                	xor    edi,edi
c0003d8c:	53                   	push   ebx
c0003d8d:	89 c3                	mov    ebx,eax
c0003d8f:	83 ec 1c             	sub    esp,0x1c
c0003d92:	be 40 00 00 00       	mov    esi,0x40
c0003d97:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003d9b:	31 d2                	xor    edx,edx
c0003d9d:	e8 3e dd ff ff       	call   c0001ae0 <mem_set>
c0003da2:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003da5:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003da9:	31 c9                	xor    ecx,ecx
c0003dab:	8d 46 01             	lea    eax,[esi+0x1]
c0003dae:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003db2:	83 c6 02             	add    esi,0x2
c0003db5:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003db9:	66 85 ed             	test   bp,bp
c0003dbc:	74 12                	je     c0003dd0 <create_xdir+0x53>
c0003dbe:	0f b6 c1             	movzx  eax,cl
c0003dc1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dc5:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003dc9:	66 83 fd 01          	cmp    bp,0x1
c0003dcd:	80 d9 ff             	sbb    cl,0xff
c0003dd0:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003dd3:	83 c6 02             	add    esi,0x2
c0003dd6:	0f b7 d5             	movzx  edx,bp
c0003dd9:	e8 e0 dc ff ff       	call   c0001abe <st_word>
c0003dde:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0003de4:	75 d3                	jne    c0003db9 <create_xdir+0x3c>
c0003de6:	8d 47 01             	lea    eax,[edi+0x1]
c0003de9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ded:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0003df1:	0f b6 c1             	movzx  eax,cl
c0003df4:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0003df9:	74 07                	je     c0003e02 <create_xdir+0x85>
c0003dfb:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c0003e00:	eb a9                	jmp    c0003dab <create_xdir+0x2e>
c0003e02:	8d 47 02             	lea    eax,[edi+0x2]
c0003e05:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0003e08:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0003e0b:	89 d0                	mov    eax,edx
c0003e0d:	e8 33 ff ff ff       	call   c0003d45 <xname_sum>
c0003e12:	83 c4 1c             	add    esp,0x1c
c0003e15:	0f b7 d0             	movzx  edx,ax
c0003e18:	8d 43 24             	lea    eax,[ebx+0x24]
c0003e1b:	5b                   	pop    ebx
c0003e1c:	5e                   	pop    esi
c0003e1d:	5f                   	pop    edi
c0003e1e:	5d                   	pop    ebp
c0003e1f:	e9 9a dc ff ff       	jmp    c0001abe <st_word>

c0003e24 <cmp_lfn>:
c0003e24:	55                   	push   ebp
c0003e25:	57                   	push   edi
c0003e26:	89 d7                	mov    edi,edx
c0003e28:	56                   	push   esi
c0003e29:	53                   	push   ebx
c0003e2a:	83 ec 1c             	sub    esp,0x1c
c0003e2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e31:	8d 42 1a             	lea    eax,[edx+0x1a]
c0003e34:	e8 13 dc ff ff       	call   c0001a4c <ld_word>
c0003e39:	66 85 c0             	test   ax,ax
c0003e3c:	74 07                	je     c0003e45 <cmp_lfn+0x21>
c0003e3e:	31 c0                	xor    eax,eax
c0003e40:	e9 9a 00 00 00       	jmp    c0003edf <cmp_lfn+0xbb>
c0003e45:	8a 1f                	mov    bl,BYTE PTR [edi]
c0003e47:	bd 01 00 00 00       	mov    ebp,0x1
c0003e4c:	83 e3 3f             	and    ebx,0x3f
c0003e4f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0003e57:	4b                   	dec    ebx
c0003e58:	6b db 0d             	imul   ebx,ebx,0xd
c0003e5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003e5f:	0f b6 80 40 05 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdfac0]
c0003e66:	01 f8                	add    eax,edi
c0003e68:	e8 df db ff ff       	call   c0001a4c <ld_word>
c0003e6d:	66 85 ed             	test   bp,bp
c0003e70:	89 c6                	mov    esi,eax
c0003e72:	74 3c                	je     c0003eb0 <cmp_lfn+0x8c>
c0003e74:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0003e7a:	77 c2                	ja     c0003e3e <cmp_lfn+0x1a>
c0003e7c:	83 ec 0c             	sub    esp,0xc
c0003e7f:	0f b7 c0             	movzx  eax,ax
c0003e82:	50                   	push   eax
c0003e83:	e8 dc 44 00 00       	call   c0008364 <ff_wtoupper>
c0003e88:	89 c5                	mov    ebp,eax
c0003e8a:	8d 43 01             	lea    eax,[ebx+0x1]
c0003e8d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0003e91:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0003e95:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0003e99:	89 04 24             	mov    DWORD PTR [esp],eax
c0003e9c:	e8 c3 44 00 00       	call   c0008364 <ff_wtoupper>
c0003ea1:	83 c4 10             	add    esp,0x10
c0003ea4:	39 c5                	cmp    ebp,eax
c0003ea6:	75 96                	jne    c0003e3e <cmp_lfn+0x1a>
c0003ea8:	89 f5                	mov    ebp,esi
c0003eaa:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0003eae:	eb 04                	jmp    c0003eb4 <cmp_lfn+0x90>
c0003eb0:	66 46                	inc    si
c0003eb2:	75 8a                	jne    c0003e3e <cmp_lfn+0x1a>
c0003eb4:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0003eb8:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0003ebd:	75 9c                	jne    c0003e5b <cmp_lfn+0x37>
c0003ebf:	f6 07 40             	test   BYTE PTR [edi],0x40
c0003ec2:	74 16                	je     c0003eda <cmp_lfn+0xb6>
c0003ec4:	66 85 ed             	test   bp,bp
c0003ec7:	74 11                	je     c0003eda <cmp_lfn+0xb6>
c0003ec9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ecd:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0003ed2:	0f 94 c0             	sete   al
c0003ed5:	0f b6 c0             	movzx  eax,al
c0003ed8:	eb 05                	jmp    c0003edf <cmp_lfn+0xbb>
c0003eda:	b8 01 00 00 00       	mov    eax,0x1
c0003edf:	83 c4 1c             	add    esp,0x1c
c0003ee2:	5b                   	pop    ebx
c0003ee3:	5e                   	pop    esi
c0003ee4:	5f                   	pop    edi
c0003ee5:	5d                   	pop    ebp
c0003ee6:	c3                   	ret    

c0003ee7 <dir_find>:
c0003ee7:	55                   	push   ebp
c0003ee8:	31 d2                	xor    edx,edx
c0003eea:	57                   	push   edi
c0003eeb:	56                   	push   esi
c0003eec:	53                   	push   ebx
c0003eed:	89 c3                	mov    ebx,eax
c0003eef:	83 ec 1c             	sub    esp,0x1c
c0003ef2:	8b 30                	mov    esi,DWORD PTR [eax]
c0003ef4:	e8 a2 f0 ff ff       	call   c0002f9b <dir_sdi>
c0003ef9:	89 04 24             	mov    DWORD PTR [esp],eax
c0003efc:	85 c0                	test   eax,eax
c0003efe:	0f 85 9f 01 00 00    	jne    c00040a3 <dir_find+0x1bc>
c0003f04:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003f07:	0f 85 8e 00 00 00    	jne    c0003f9b <dir_find+0xb4>
c0003f0d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f10:	e8 30 fe ff ff       	call   c0003d45 <xname_sum>
c0003f15:	89 c5                	mov    ebp,eax
c0003f17:	31 d2                	xor    edx,edx
c0003f19:	89 d8                	mov    eax,ebx
c0003f1b:	e8 8d f8 ff ff       	call   c00037ad <dir_read>
c0003f20:	85 c0                	test   eax,eax
c0003f22:	0f 85 5f 01 00 00    	jne    c0004087 <dir_find+0x1a0>
c0003f28:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0003f2b:	8d 41 24             	lea    eax,[ecx+0x24]
c0003f2e:	e8 19 db ff ff       	call   c0001a4c <ld_word>
c0003f33:	66 39 e8             	cmp    ax,bp
c0003f36:	75 df                	jne    c0003f17 <dir_find+0x30>
c0003f38:	0f b6 49 23          	movzx  ecx,BYTE PTR [ecx+0x23]
c0003f3c:	31 ff                	xor    edi,edi
c0003f3e:	ba 40 00 00 00       	mov    edx,0x40
c0003f43:	39 f9                	cmp    ecx,edi
c0003f45:	0f 84 4a 01 00 00    	je     c0004095 <dir_find+0x1ae>
c0003f4b:	f6 c2 1f             	test   dl,0x1f
c0003f4e:	75 03                	jne    c0003f53 <dir_find+0x6c>
c0003f50:	83 c2 02             	add    edx,0x2
c0003f53:	89 d0                	mov    eax,edx
c0003f55:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003f59:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0003f5c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003f60:	e8 e7 da ff ff       	call   c0001a4c <ld_word>
c0003f65:	83 ec 0c             	sub    esp,0xc
c0003f68:	0f b7 c0             	movzx  eax,ax
c0003f6b:	50                   	push   eax
c0003f6c:	e8 f3 43 00 00       	call   c0008364 <ff_wtoupper>
c0003f71:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003f75:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0003f78:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0003f7c:	89 04 24             	mov    DWORD PTR [esp],eax
c0003f7f:	e8 e0 43 00 00       	call   c0008364 <ff_wtoupper>
c0003f84:	83 c4 10             	add    esp,0x10
c0003f87:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0003f8b:	75 8a                	jne    c0003f17 <dir_find+0x30>
c0003f8d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003f91:	47                   	inc    edi
c0003f92:	83 c2 02             	add    edx,0x2
c0003f95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003f99:	eb a8                	jmp    c0003f43 <dir_find+0x5c>
c0003f9b:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003fa2:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c0003fa7:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003fac:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003faf:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003fb2:	89 f0                	mov    eax,esi
c0003fb4:	e8 6a e2 ff ff       	call   c0002223 <move_window>
c0003fb9:	85 c0                	test   eax,eax
c0003fbb:	0f 85 c6 00 00 00    	jne    c0004087 <dir_find+0x1a0>
c0003fc1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0003fc4:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0003fc7:	84 c9                	test   cl,cl
c0003fc9:	0f 84 bd 00 00 00    	je     c000408c <dir_find+0x1a5>
c0003fcf:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003fd2:	88 d0                	mov    al,dl
c0003fd4:	83 e0 3f             	and    eax,0x3f
c0003fd7:	80 f9 e5             	cmp    cl,0xe5
c0003fda:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003fdd:	0f 84 87 00 00 00    	je     c000406a <dir_find+0x183>
c0003fe3:	80 e2 08             	and    dl,0x8
c0003fe6:	74 06                	je     c0003fee <dir_find+0x107>
c0003fe8:	3c 0f                	cmp    al,0xf
c0003fea:	75 7e                	jne    c000406a <dir_find+0x183>
c0003fec:	eb 04                	jmp    c0003ff2 <dir_find+0x10b>
c0003fee:	3c 0f                	cmp    al,0xf
c0003ff0:	75 4c                	jne    c000403e <dir_find+0x157>
c0003ff2:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0003ff6:	75 7e                	jne    c0004076 <dir_find+0x18f>
c0003ff8:	f6 c1 40             	test   cl,0x40
c0003ffb:	74 12                	je     c000400f <dir_find+0x128>
c0003ffd:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0004000:	83 e1 bf             	and    ecx,0xffffffbf
c0004003:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004007:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000400a:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c000400d:	eb 06                	jmp    c0004015 <dir_find+0x12e>
c000400f:	89 f8                	mov    eax,edi
c0004011:	38 c8                	cmp    al,cl
c0004013:	75 5c                	jne    c0004071 <dir_find+0x18a>
c0004015:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004019:	bf ff ff ff ff       	mov    edi,0xffffffff
c000401e:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0004021:	75 53                	jne    c0004076 <dir_find+0x18f>
c0004023:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004026:	89 ea                	mov    edx,ebp
c0004028:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000402c:	e8 f3 fd ff ff       	call   c0003e24 <cmp_lfn>
c0004031:	85 c0                	test   eax,eax
c0004033:	74 41                	je     c0004076 <dir_find+0x18f>
c0004035:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0004039:	8d 79 ff             	lea    edi,[ecx-0x1]
c000403c:	eb 38                	jmp    c0004076 <dir_find+0x18f>
c000403e:	89 f8                	mov    eax,edi
c0004040:	84 c0                	test   al,al
c0004042:	75 0d                	jne    c0004051 <dir_find+0x16a>
c0004044:	89 e8                	mov    eax,ebp
c0004046:	e8 bd de ff ff       	call   c0001f08 <sum_sfn>
c000404b:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000404f:	74 52                	je     c00040a3 <dir_find+0x1bc>
c0004051:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004055:	75 13                	jne    c000406a <dir_find+0x183>
c0004057:	8d 53 3c             	lea    edx,[ebx+0x3c]
c000405a:	b9 0b 00 00 00       	mov    ecx,0xb
c000405f:	89 e8                	mov    eax,ebp
c0004061:	e8 85 da ff ff       	call   c0001aeb <mem_cmp>
c0004066:	85 c0                	test   eax,eax
c0004068:	74 39                	je     c00040a3 <dir_find+0x1bc>
c000406a:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0004071:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004076:	31 d2                	xor    edx,edx
c0004078:	89 d8                	mov    eax,ebx
c000407a:	e8 76 f4 ff ff       	call   c00034f5 <dir_next>
c000407f:	85 c0                	test   eax,eax
c0004081:	0f 84 25 ff ff ff    	je     c0003fac <dir_find+0xc5>
c0004087:	89 04 24             	mov    DWORD PTR [esp],eax
c000408a:	eb 17                	jmp    c00040a3 <dir_find+0x1bc>
c000408c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0004093:	eb 0e                	jmp    c00040a3 <dir_find+0x1bc>
c0004095:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004098:	66 83 3c 48 00       	cmp    WORD PTR [eax+ecx*2],0x0
c000409d:	0f 85 74 fe ff ff    	jne    c0003f17 <dir_find+0x30>
c00040a3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00040a6:	83 c4 1c             	add    esp,0x1c
c00040a9:	5b                   	pop    ebx
c00040aa:	5e                   	pop    esi
c00040ab:	5f                   	pop    edi
c00040ac:	5d                   	pop    ebp
c00040ad:	c3                   	ret    

c00040ae <dir_register>:
c00040ae:	55                   	push   ebp
c00040af:	57                   	push   edi
c00040b0:	56                   	push   esi
c00040b1:	be 06 00 00 00       	mov    esi,0x6
c00040b6:	53                   	push   ebx
c00040b7:	83 ec 6c             	sub    esp,0x6c
c00040ba:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00040be:	0f 85 63 02 00 00    	jne    c0004327 <dir_register+0x279>
c00040c4:	8b 28                	mov    ebp,DWORD PTR [eax]
c00040c6:	31 ff                	xor    edi,edi
c00040c8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00040cb:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00040d0:	74 03                	je     c00040d5 <dir_register+0x27>
c00040d2:	47                   	inc    edi
c00040d3:	eb f6                	jmp    c00040cb <dir_register+0x1d>
c00040d5:	89 c3                	mov    ebx,eax
c00040d7:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00040db:	0f 85 e1 00 00 00    	jne    c00041c2 <dir_register+0x114>
c00040e1:	83 c7 0e             	add    edi,0xe
c00040e4:	b9 0f 00 00 00       	mov    ecx,0xf
c00040e9:	89 f8                	mov    eax,edi
c00040eb:	31 d2                	xor    edx,edx
c00040ed:	f7 f1                	div    ecx
c00040ef:	89 c7                	mov    edi,eax
c00040f1:	8d 50 02             	lea    edx,[eax+0x2]
c00040f4:	89 d8                	mov    eax,ebx
c00040f6:	e8 2c f8 ff ff       	call   c0003927 <dir_alloc>
c00040fb:	89 c6                	mov    esi,eax
c00040fd:	85 c0                	test   eax,eax
c00040ff:	0f 85 22 02 00 00    	jne    c0004327 <dir_register+0x279>
c0004105:	81 c7 01 00 00 08    	add    edi,0x8000001
c000410b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c000410e:	c1 e7 05             	shl    edi,0x5
c0004111:	29 f8                	sub    eax,edi
c0004113:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004116:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004119:	a8 04                	test   al,0x4
c000411b:	0f 84 91 00 00 00    	je     c00041b2 <dir_register+0x104>
c0004121:	83 e0 fb             	and    eax,0xfffffffb
c0004124:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004127:	89 d8                	mov    eax,ebx
c0004129:	e8 3d ec ff ff       	call   c0002d6b <fill_first_frag>
c000412e:	85 c0                	test   eax,eax
c0004130:	0f 85 ef 01 00 00    	jne    c0004325 <dir_register+0x277>
c0004136:	83 c9 ff             	or     ecx,0xffffffff
c0004139:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000413c:	89 d8                	mov    eax,ebx
c000413e:	e8 f3 eb ff ff       	call   c0002d36 <fill_last_frag>
c0004143:	85 c0                	test   eax,eax
c0004145:	0f 85 da 01 00 00    	jne    c0004325 <dir_register+0x277>
c000414b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000414f:	74 61                	je     c00041b2 <dir_register+0x104>
c0004151:	89 da                	mov    edx,ebx
c0004153:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004157:	e8 04 f6 ff ff       	call   c0003760 <load_obj_xdir>
c000415c:	85 c0                	test   eax,eax
c000415e:	0f 85 c1 01 00 00    	jne    c0004325 <dir_register+0x277>
c0004164:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004168:	c1 e2 09             	shl    edx,0x9
c000416b:	31 c9                	xor    ecx,ecx
c000416d:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c0004170:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c0004173:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004176:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004179:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000417c:	83 c0 38             	add    eax,0x38
c000417f:	e8 41 d9 ff ff       	call   c0001ac5 <st_qword>
c0004184:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004187:	83 c0 28             	add    eax,0x28
c000418a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000418d:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0004190:	e8 30 d9 ff ff       	call   c0001ac5 <st_qword>
c0004195:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004198:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000419b:	83 c8 01             	or     eax,0x1
c000419e:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00041a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041a5:	e8 f5 f7 ff ff       	call   c000399f <store_xdir>
c00041aa:	85 c0                	test   eax,eax
c00041ac:	0f 85 73 01 00 00    	jne    c0004325 <dir_register+0x277>
c00041b2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00041b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00041b8:	e8 c0 fb ff ff       	call   c0003d7d <create_xdir>
c00041bd:	e9 65 01 00 00       	jmp    c0004327 <dir_register+0x279>
c00041c2:	8d 40 3c             	lea    eax,[eax+0x3c]
c00041c5:	b9 0c 00 00 00       	mov    ecx,0xc
c00041ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00041ce:	89 c2                	mov    edx,eax
c00041d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00041d4:	e8 f2 d8 ff ff       	call   c0001acb <mem_cpy>
c00041d9:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00041de:	74 58                	je     c0004238 <dir_register+0x18a>
c00041e0:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00041e4:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00041ec:	83 ec 0c             	sub    esp,0xc
c00041ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00041f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00041f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00041fa:	8d 54 24 24          	lea    edx,[esp+0x24]
c00041fe:	e8 49 dc ff ff       	call   c0001e4c <gen_numname>
c0004203:	89 d8                	mov    eax,ebx
c0004205:	e8 dd fc ff ff       	call   c0003ee7 <dir_find>
c000420a:	83 c4 10             	add    esp,0x10
c000420d:	89 c6                	mov    esi,eax
c000420f:	85 c0                	test   eax,eax
c0004211:	75 15                	jne    c0004228 <dir_register+0x17a>
c0004213:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004217:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c000421c:	75 ce                	jne    c00041ec <dir_register+0x13e>
c000421e:	be 07 00 00 00       	mov    esi,0x7
c0004223:	e9 ff 00 00 00       	jmp    c0004327 <dir_register+0x279>
c0004228:	83 f8 04             	cmp    eax,0x4
c000422b:	0f 85 f6 00 00 00    	jne    c0004327 <dir_register+0x279>
c0004231:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004235:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004238:	b9 01 00 00 00       	mov    ecx,0x1
c000423d:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0004242:	74 0f                	je     c0004253 <dir_register+0x1a5>
c0004244:	b9 0d 00 00 00       	mov    ecx,0xd
c0004249:	8d 47 0c             	lea    eax,[edi+0xc]
c000424c:	31 d2                	xor    edx,edx
c000424e:	f7 f1                	div    ecx
c0004250:	8d 48 01             	lea    ecx,[eax+0x1]
c0004253:	89 ca                	mov    edx,ecx
c0004255:	89 d8                	mov    eax,ebx
c0004257:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000425b:	e8 c7 f6 ff ff       	call   c0003927 <dir_alloc>
c0004260:	89 c6                	mov    esi,eax
c0004262:	85 c0                	test   eax,eax
c0004264:	0f 85 bd 00 00 00    	jne    c0004327 <dir_register+0x279>
c000426a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000426e:	89 cf                	mov    edi,ecx
c0004270:	4f                   	dec    edi
c0004271:	74 6d                	je     c00042e0 <dir_register+0x232>
c0004273:	89 f8                	mov    eax,edi
c0004275:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004278:	c1 e0 05             	shl    eax,0x5
c000427b:	29 c2                	sub    edx,eax
c000427d:	89 d8                	mov    eax,ebx
c000427f:	e8 17 ed ff ff       	call   c0002f9b <dir_sdi>
c0004284:	89 c6                	mov    esi,eax
c0004286:	85 c0                	test   eax,eax
c0004288:	0f 85 99 00 00 00    	jne    c0004327 <dir_register+0x279>
c000428e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004292:	e8 71 dc ff ff       	call   c0001f08 <sum_sfn>
c0004297:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000429b:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000429e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042a1:	89 e8                	mov    eax,ebp
c00042a3:	e8 7b df ff ff       	call   c0002223 <move_window>
c00042a8:	89 c6                	mov    esi,eax
c00042aa:	85 c0                	test   eax,eax
c00042ac:	75 79                	jne    c0004327 <dir_register+0x279>
c00042ae:	83 ec 0c             	sub    esp,0xc
c00042b1:	89 f8                	mov    eax,edi
c00042b3:	0f b6 c8             	movzx  ecx,al
c00042b6:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c00042bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00042be:	52                   	push   edx
c00042bf:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00042c2:	e8 01 db ff ff       	call   c0001dc8 <put_lfn>
c00042c7:	31 d2                	xor    edx,edx
c00042c9:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00042cd:	89 d8                	mov    eax,ebx
c00042cf:	e8 21 f2 ff ff       	call   c00034f5 <dir_next>
c00042d4:	83 c4 10             	add    esp,0x10
c00042d7:	89 c6                	mov    esi,eax
c00042d9:	85 c0                	test   eax,eax
c00042db:	75 4a                	jne    c0004327 <dir_register+0x279>
c00042dd:	4f                   	dec    edi
c00042de:	75 bb                	jne    c000429b <dir_register+0x1ed>
c00042e0:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00042e3:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00042e6:	89 e8                	mov    eax,ebp
c00042e8:	e8 36 df ff ff       	call   c0002223 <move_window>
c00042ed:	89 c6                	mov    esi,eax
c00042ef:	85 c0                	test   eax,eax
c00042f1:	75 34                	jne    c0004327 <dir_register+0x279>
c00042f3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00042f6:	b9 20 00 00 00       	mov    ecx,0x20
c00042fb:	31 d2                	xor    edx,edx
c00042fd:	e8 de d7 ff ff       	call   c0001ae0 <mem_set>
c0004302:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004305:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004309:	b9 0b 00 00 00       	mov    ecx,0xb
c000430e:	e8 b8 d7 ff ff       	call   c0001acb <mem_cpy>
c0004313:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004316:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004319:	83 e0 18             	and    eax,0x18
c000431c:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c000431f:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004323:	eb 02                	jmp    c0004327 <dir_register+0x279>
c0004325:	89 c6                	mov    esi,eax
c0004327:	83 c4 6c             	add    esp,0x6c
c000432a:	89 f0                	mov    eax,esi
c000432c:	5b                   	pop    ebx
c000432d:	5e                   	pop    esi
c000432e:	5f                   	pop    edi
c000432f:	5d                   	pop    ebp
c0004330:	c3                   	ret    

c0004331 <sync_fs>:
c0004331:	56                   	push   esi
c0004332:	53                   	push   ebx
c0004333:	53                   	push   ebx
c0004334:	89 c3                	mov    ebx,eax
c0004336:	e8 54 de ff ff       	call   c000218f <sync_window>
c000433b:	85 c0                	test   eax,eax
c000433d:	0f 85 b1 00 00 00    	jne    c00043f4 <sync_fs+0xc3>
c0004343:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004346:	0f 85 8e 00 00 00    	jne    c00043da <sync_fs+0xa9>
c000434c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004350:	0f 85 84 00 00 00    	jne    c00043da <sync_fs+0xa9>
c0004356:	8d 73 54             	lea    esi,[ebx+0x54]
c0004359:	b9 00 02 00 00       	mov    ecx,0x200
c000435e:	31 d2                	xor    edx,edx
c0004360:	89 f0                	mov    eax,esi
c0004362:	e8 79 d7 ff ff       	call   c0001ae0 <mem_set>
c0004367:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c000436d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004372:	e8 47 d7 ff ff       	call   c0001abe <st_word>
c0004377:	ba 52 52 61 41       	mov    edx,0x41615252
c000437c:	89 f0                	mov    eax,esi
c000437e:	e8 3f d7 ff ff       	call   c0001ac2 <st_dword>
c0004383:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c0004389:	ba 72 72 41 61       	mov    edx,0x61417272
c000438e:	e8 2f d7 ff ff       	call   c0001ac2 <st_dword>
c0004393:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004396:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c000439c:	e8 21 d7 ff ff       	call   c0001ac2 <st_dword>
c00043a1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043a4:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00043aa:	e8 13 d7 ff ff       	call   c0001ac2 <st_dword>
c00043af:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00043b2:	83 c0 01             	add    eax,0x1
c00043b5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00043b8:	83 d2 00             	adc    edx,0x0
c00043bb:	83 ec 0c             	sub    esp,0xc
c00043be:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00043c1:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00043c4:	6a 01                	push   0x1
c00043c6:	52                   	push   edx
c00043c7:	50                   	push   eax
c00043c8:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043cc:	56                   	push   esi
c00043cd:	50                   	push   eax
c00043ce:	e8 44 d6 ff ff       	call   c0001a17 <disk_write>
c00043d3:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00043d7:	83 c4 20             	add    esp,0x20
c00043da:	51                   	push   ecx
c00043db:	6a 00                	push   0x0
c00043dd:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00043e1:	6a 00                	push   0x0
c00043e3:	50                   	push   eax
c00043e4:	e8 44 d6 ff ff       	call   c0001a2d <disk_ioctl>
c00043e9:	83 c4 10             	add    esp,0x10
c00043ec:	85 c0                	test   eax,eax
c00043ee:	0f 95 c0             	setne  al
c00043f1:	0f b6 c0             	movzx  eax,al
c00043f4:	5a                   	pop    edx
c00043f5:	5b                   	pop    ebx
c00043f6:	5e                   	pop    esi
c00043f7:	c3                   	ret    

c00043f8 <create_partition>:
c00043f8:	55                   	push   ebp
c00043f9:	57                   	push   edi
c00043fa:	56                   	push   esi
c00043fb:	53                   	push   ebx
c00043fc:	83 ec 60             	sub    esp,0x60
c00043ff:	0f b6 c0             	movzx  eax,al
c0004402:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004406:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000440a:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000440e:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0004412:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0004416:	50                   	push   eax
c0004417:	6a 01                	push   0x1
c0004419:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000441d:	e8 0b d6 ff ff       	call   c0001a2d <disk_ioctl>
c0004422:	83 c4 10             	add    esp,0x10
c0004425:	85 c0                	test   eax,eax
c0004427:	74 0a                	je     c0004433 <create_partition+0x3b>
c0004429:	b8 01 00 00 00       	mov    eax,0x1
c000442e:	e9 73 05 00 00       	jmp    c00049a6 <create_partition+0x5ae>
c0004433:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004437:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000443b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000443f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004443:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004448:	0f 86 ed 03 00 00    	jbe    c000483b <create_partition+0x443>
c000444e:	83 c0 df             	add    eax,0xffffffdf
c0004451:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004459:	83 d2 ff             	adc    edx,0xffffffff
c000445c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004460:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004464:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0004468:	83 c0 bd             	add    eax,0xffffffbd
c000446b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000446f:	83 d2 ff             	adc    edx,0xffffffff
c0004472:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004476:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000447a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004481:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004489:	be 22 00 00 00       	mov    esi,0x22
c000448e:	31 ff                	xor    edi,edi
c0004490:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c0004498:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00044a0:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00044a8:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00044ac:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00044b2:	75 0e                	jne    c00044c2 <create_partition+0xca>
c00044b4:	b9 00 02 00 00       	mov    ecx,0x200
c00044b9:	31 d2                	xor    edx,edx
c00044bb:	89 d8                	mov    eax,ebx
c00044bd:	e8 1e d6 ff ff       	call   c0001ae0 <mem_set>
c00044c2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00044c6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00044ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00044ce:	0b 04 24             	or     eax,DWORD PTR [esp]
c00044d1:	0f 84 23 01 00 00    	je     c00045fa <create_partition+0x202>
c00044d7:	89 f0                	mov    eax,esi
c00044d9:	89 fa                	mov    edx,edi
c00044db:	05 ff 07 00 00       	add    eax,0x7ff
c00044e0:	83 d2 00             	adc    edx,0x0
c00044e3:	89 c1                	mov    ecx,eax
c00044e5:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00044eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00044ef:	89 ce                	mov    esi,ecx
c00044f1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00044f5:	89 d7                	mov    edi,edx
c00044f7:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c00044fb:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c00044ff:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0004502:	89 04 24             	mov    DWORD PTR [esp],eax
c0004505:	b8 64 00 00 00       	mov    eax,0x64
c000450a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000450d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004511:	b8 00 00 00 00       	mov    eax,0x0
c0004516:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c000451a:	72 41                	jb     c000455d <create_partition+0x165>
c000451c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004520:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004524:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004529:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c000452d:	01 c1                	add    ecx,eax
c000452f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004533:	f7 24 24             	mul    DWORD PTR [esp]
c0004536:	6a 00                	push   0x0
c0004538:	01 ca                	add    edx,ecx
c000453a:	6a 64                	push   0x64
c000453c:	52                   	push   edx
c000453d:	50                   	push   eax
c000453e:	e8 c9 af 01 00       	call   c001f50c <__udivdi3>
c0004543:	83 c4 10             	add    esp,0x10
c0004546:	05 ff 07 00 00       	add    eax,0x7ff
c000454b:	83 d2 00             	adc    edx,0x0
c000454e:	89 c1                	mov    ecx,eax
c0004550:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004556:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000455a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000455d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004560:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0004564:	01 f0                	add    eax,esi
c0004566:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000456a:	11 fa                	adc    edx,edi
c000456c:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0004570:	19 d1                	sbb    ecx,edx
c0004572:	73 2e                	jae    c00045a2 <create_partition+0x1aa>
c0004574:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004578:	89 f8                	mov    eax,edi
c000457a:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000457e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0004585:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000458d:	73 6b                	jae    c00045fa <create_partition+0x202>
c000458f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0004593:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0004597:	29 f0                	sub    eax,esi
c0004599:	19 fa                	sbb    edx,edi
c000459b:	89 04 24             	mov    DWORD PTR [esp],eax
c000459e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00045a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00045a6:	0b 04 24             	or     eax,DWORD PTR [esp]
c00045a9:	74 4f                	je     c00045fa <create_partition+0x202>
c00045ab:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00045ae:	b9 10 00 00 00       	mov    ecx,0x10
c00045b3:	ba 50 05 02 c0       	mov    edx,0xc0020550
c00045b8:	e8 0e d5 ff ff       	call   c0001acb <mem_cpy>
c00045bd:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00045c1:	b9 10 00 00 00       	mov    ecx,0x10
c00045c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00045ca:	e8 49 db ff ff       	call   c0002118 <make_rand>
c00045cf:	89 f2                	mov    edx,esi
c00045d1:	89 f9                	mov    ecx,edi
c00045d3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00045d7:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00045db:	e8 e5 d4 ff ff       	call   c0001ac5 <st_qword>
c00045e0:	03 34 24             	add    esi,DWORD PTR [esp]
c00045e3:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00045e7:	89 f2                	mov    edx,esi
c00045e9:	89 f9                	mov    ecx,edi
c00045eb:	83 c2 ff             	add    edx,0xffffffff
c00045ee:	83 d1 ff             	adc    ecx,0xffffffff
c00045f1:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c00045f5:	e8 cb d4 ff ff       	call   c0001ac5 <st_qword>
c00045fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00045fe:	83 e8 80             	sub    eax,0xffffff80
c0004601:	89 c5                	mov    ebp,eax
c0004603:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004607:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000460d:	75 6b                	jne    c000467a <create_partition+0x282>
c000460f:	45                   	inc    ebp
c0004610:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004614:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004619:	e8 56 da ff ff       	call   c0002074 <crc32>
c000461e:	81 fd 00 02 00 00    	cmp    ebp,0x200
c0004624:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004628:	75 e5                	jne    c000460f <create_partition+0x217>
c000462a:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000462e:	83 ec 0c             	sub    esp,0xc
c0004631:	c1 ed 09             	shr    ebp,0x9
c0004634:	31 d2                	xor    edx,edx
c0004636:	6a 01                	push   0x1
c0004638:	52                   	push   edx
c0004639:	8d 45 02             	lea    eax,[ebp+0x2]
c000463c:	50                   	push   eax
c000463d:	53                   	push   ebx
c000463e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004642:	e8 d0 d3 ff ff       	call   c0001a17 <disk_write>
c0004647:	83 c4 20             	add    esp,0x20
c000464a:	85 c0                	test   eax,eax
c000464c:	0f 85 d7 fd ff ff    	jne    c0004429 <create_partition+0x31>
c0004652:	83 ec 0c             	sub    esp,0xc
c0004655:	89 e8                	mov    eax,ebp
c0004657:	31 d2                	xor    edx,edx
c0004659:	6a 01                	push   0x1
c000465b:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000465f:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c0004663:	52                   	push   edx
c0004664:	50                   	push   eax
c0004665:	53                   	push   ebx
c0004666:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000466a:	e8 a8 d3 ff ff       	call   c0001a17 <disk_write>
c000466f:	83 c4 20             	add    esp,0x20
c0004672:	85 c0                	test   eax,eax
c0004674:	0f 85 af fd ff ff    	jne    c0004429 <create_partition+0x31>
c000467a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000467e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004682:	3d 00 40 00 00       	cmp    eax,0x4000
c0004687:	74 0d                	je     c0004696 <create_partition+0x29e>
c0004689:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000468d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004691:	e9 12 fe ff ff       	jmp    c00044a8 <create_partition+0xb0>
c0004696:	31 d2                	xor    edx,edx
c0004698:	b9 00 02 00 00       	mov    ecx,0x200
c000469d:	89 d8                	mov    eax,ebx
c000469f:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00046a2:	e8 39 d4 ff ff       	call   c0001ae0 <mem_set>
c00046a7:	b9 10 00 00 00       	mov    ecx,0x10
c00046ac:	ba 40 04 02 c0       	mov    edx,0xc0020440
c00046b1:	89 d8                	mov    eax,ebx
c00046b3:	e8 13 d4 ff ff       	call   c0001acb <mem_cpy>
c00046b8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00046bc:	f7 d2                	not    edx
c00046be:	8d 43 58             	lea    eax,[ebx+0x58]
c00046c1:	8d 7b 48             	lea    edi,[ebx+0x48]
c00046c4:	e8 f9 d3 ff ff       	call   c0001ac2 <st_dword>
c00046c9:	8d 43 18             	lea    eax,[ebx+0x18]
c00046cc:	31 c9                	xor    ecx,ecx
c00046ce:	ba 01 00 00 00       	mov    edx,0x1
c00046d3:	89 04 24             	mov    DWORD PTR [esp],eax
c00046d6:	e8 ea d3 ff ff       	call   c0001ac5 <st_qword>
c00046db:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00046df:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00046e3:	83 c2 ff             	add    edx,0xffffffff
c00046e6:	89 e8                	mov    eax,ebp
c00046e8:	83 d1 ff             	adc    ecx,0xffffffff
c00046eb:	e8 d5 d3 ff ff       	call   c0001ac5 <st_qword>
c00046f0:	31 c9                	xor    ecx,ecx
c00046f2:	8d 43 28             	lea    eax,[ebx+0x28]
c00046f5:	ba 22 00 00 00       	mov    edx,0x22
c00046fa:	e8 c6 d3 ff ff       	call   c0001ac5 <st_qword>
c00046ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0004703:	83 c2 de             	add    edx,0xffffffde
c0004706:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000470a:	83 d1 ff             	adc    ecx,0xffffffff
c000470d:	8d 43 30             	lea    eax,[ebx+0x30]
c0004710:	e8 b0 d3 ff ff       	call   c0001ac5 <st_qword>
c0004715:	8d 43 54             	lea    eax,[ebx+0x54]
c0004718:	ba 80 00 00 00       	mov    edx,0x80
c000471d:	31 f6                	xor    esi,esi
c000471f:	e8 9e d3 ff ff       	call   c0001ac2 <st_dword>
c0004724:	8d 43 50             	lea    eax,[ebx+0x50]
c0004727:	ba 80 00 00 00       	mov    edx,0x80
c000472c:	e8 91 d3 ff ff       	call   c0001ac2 <st_dword>
c0004731:	ba 02 00 00 00       	mov    edx,0x2
c0004736:	89 f8                	mov    eax,edi
c0004738:	e8 85 d3 ff ff       	call   c0001ac2 <st_dword>
c000473d:	8d 53 38             	lea    edx,[ebx+0x38]
c0004740:	b9 10 00 00 00       	mov    ecx,0x10
c0004745:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004749:	e8 ca d9 ff ff       	call   c0002118 <make_rand>
c000474e:	83 c8 ff             	or     eax,0xffffffff
c0004751:	46                   	inc    esi
c0004752:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004757:	e8 18 d9 ff ff       	call   c0002074 <crc32>
c000475c:	83 fe 5c             	cmp    esi,0x5c
c000475f:	75 f0                	jne    c0004751 <create_partition+0x359>
c0004761:	f7 d0                	not    eax
c0004763:	8d 73 10             	lea    esi,[ebx+0x10]
c0004766:	89 c2                	mov    edx,eax
c0004768:	89 f0                	mov    eax,esi
c000476a:	e8 53 d3 ff ff       	call   c0001ac2 <st_dword>
c000476f:	83 ec 0c             	sub    esp,0xc
c0004772:	6a 01                	push   0x1
c0004774:	6a 00                	push   0x0
c0004776:	6a 01                	push   0x1
c0004778:	53                   	push   ebx
c0004779:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000477d:	e8 95 d2 ff ff       	call   c0001a17 <disk_write>
c0004782:	83 c4 20             	add    esp,0x20
c0004785:	85 c0                	test   eax,eax
c0004787:	0f 85 9c fc ff ff    	jne    c0004429 <create_partition+0x31>
c000478d:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004791:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c0004795:	83 c2 ff             	add    edx,0xffffffff
c0004798:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000479b:	83 d1 ff             	adc    ecx,0xffffffff
c000479e:	e8 22 d3 ff ff       	call   c0001ac5 <st_qword>
c00047a3:	ba 01 00 00 00       	mov    edx,0x1
c00047a8:	31 c9                	xor    ecx,ecx
c00047aa:	89 e8                	mov    eax,ebp
c00047ac:	e8 14 d3 ff ff       	call   c0001ac5 <st_qword>
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00047b7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047bb:	e8 05 d3 ff ff       	call   c0001ac5 <st_qword>
c00047c0:	89 f0                	mov    eax,esi
c00047c2:	31 d2                	xor    edx,edx
c00047c4:	31 ff                	xor    edi,edi
c00047c6:	e8 f7 d2 ff ff       	call   c0001ac2 <st_dword>
c00047cb:	83 c8 ff             	or     eax,0xffffffff
c00047ce:	47                   	inc    edi
c00047cf:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00047d4:	e8 9b d8 ff ff       	call   c0002074 <crc32>
c00047d9:	83 ff 5c             	cmp    edi,0x5c
c00047dc:	75 f0                	jne    c00047ce <create_partition+0x3d6>
c00047de:	f7 d0                	not    eax
c00047e0:	89 c2                	mov    edx,eax
c00047e2:	89 f0                	mov    eax,esi
c00047e4:	e8 d9 d2 ff ff       	call   c0001ac2 <st_dword>
c00047e9:	83 ec 0c             	sub    esp,0xc
c00047ec:	6a 01                	push   0x1
c00047ee:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00047f2:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c00047f6:	83 c0 ff             	add    eax,0xffffffff
c00047f9:	83 d2 ff             	adc    edx,0xffffffff
c00047fc:	52                   	push   edx
c00047fd:	50                   	push   eax
c00047fe:	53                   	push   ebx
c00047ff:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004803:	e8 0f d2 ff ff       	call   c0001a17 <disk_write>
c0004808:	83 c4 20             	add    esp,0x20
c000480b:	85 c0                	test   eax,eax
c000480d:	0f 85 16 fc ff ff    	jne    c0004429 <create_partition+0x31>
c0004813:	31 d2                	xor    edx,edx
c0004815:	89 d8                	mov    eax,ebx
c0004817:	b9 00 02 00 00       	mov    ecx,0x200
c000481c:	e8 bf d2 ff ff       	call   c0001ae0 <mem_set>
c0004821:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004827:	b9 10 00 00 00       	mov    ecx,0x10
c000482c:	ba 50 04 02 c0       	mov    edx,0xc0020450
c0004831:	e8 95 d2 ff ff       	call   c0001acb <mem_cpy>
c0004836:	e9 3d 01 00 00       	jmp    c0004978 <create_partition+0x580>
c000483b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000483f:	b9 05 00 00 00       	mov    ecx,0x5
c0004844:	89 04 24             	mov    DWORD PTR [esp],eax
c0004847:	c6 44 24 10 08       	mov    BYTE PTR [esp+0x10],0x8
c000484c:	0f b6 74 24 10       	movzx  esi,BYTE PTR [esp+0x10]
c0004851:	31 d2                	xor    edx,edx
c0004853:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004856:	f7 f6                	div    esi
c0004858:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c000485d:	76 0c                	jbe    c000486b <create_partition+0x473>
c000485f:	d0 64 24 10          	shl    BYTE PTR [esp+0x10],1
c0004863:	49                   	dec    ecx
c0004864:	75 e6                	jne    c000484c <create_partition+0x454>
c0004866:	c6 44 24 10 ff       	mov    BYTE PTR [esp+0x10],0xff
c000486b:	b9 00 02 00 00       	mov    ecx,0x200
c0004870:	31 d2                	xor    edx,edx
c0004872:	89 d8                	mov    eax,ebx
c0004874:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004879:	e8 62 d2 ff ff       	call   c0001ae0 <mem_set>
c000487e:	b9 64 00 00 00       	mov    ecx,0x64
c0004883:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004886:	31 d2                	xor    edx,edx
c0004888:	f7 f1                	div    ecx
c000488a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000488e:	8d 8b c6 01 00 00    	lea    ecx,[ebx+0x1c6]
c0004894:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000489c:	83 7c 24 18 03       	cmp    DWORD PTR [esp+0x18],0x3
c00048a1:	0f 96 c2             	setbe  dl
c00048a4:	85 ed                	test   ebp,ebp
c00048a6:	0f 95 c0             	setne  al
c00048a9:	84 c2                	test   dl,al
c00048ab:	0f 84 c7 00 00 00    	je     c0004978 <create_partition+0x580>
c00048b1:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00048b4:	0f 83 be 00 00 00    	jae    c0004978 <create_partition+0x580>
c00048ba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00048be:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00048c2:	8b 34 f8             	mov    esi,DWORD PTR [eax+edi*8]
c00048c5:	83 fe 64             	cmp    esi,0x64
c00048c8:	77 0c                	ja     c00048d6 <create_partition+0x4de>
c00048ca:	74 07                	je     c00048d3 <create_partition+0x4db>
c00048cc:	0f af 74 24 28       	imul   esi,DWORD PTR [esp+0x28]
c00048d1:	eb 03                	jmp    c00048d6 <create_partition+0x4de>
c00048d3:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00048d6:	89 e8                	mov    eax,ebp
c00048d8:	01 f0                	add    eax,esi
c00048da:	72 05                	jb     c00048e1 <create_partition+0x4e9>
c00048dc:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00048df:	76 07                	jbe    c00048e8 <create_partition+0x4f0>
c00048e1:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00048e4:	29 ee                	sub    esi,ebp
c00048e6:	eb 08                	jmp    c00048f0 <create_partition+0x4f8>
c00048e8:	85 f6                	test   esi,esi
c00048ea:	0f 84 88 00 00 00    	je     c0004978 <create_partition+0x580>
c00048f0:	89 c8                	mov    eax,ecx
c00048f2:	89 ea                	mov    edx,ebp
c00048f4:	e8 c9 d1 ff ff       	call   c0001ac2 <st_dword>
c00048f9:	89 f2                	mov    edx,esi
c00048fb:	bf 3f 00 00 00       	mov    edi,0x3f
c0004900:	8d 41 04             	lea    eax,[ecx+0x4]
c0004903:	e8 ba d1 ff ff       	call   c0001ac2 <st_dword>
c0004908:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000490c:	31 d2                	xor    edx,edx
c000490e:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0004912:	88 41 fc             	mov    BYTE PTR [ecx-0x4],al
c0004915:	83 c1 10             	add    ecx,0x10
c0004918:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c000491d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004921:	89 e8                	mov    eax,ebp
c0004923:	f7 f7                	div    edi
c0004925:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0004929:	31 d2                	xor    edx,edx
c000492b:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c000492f:	88 51 e9             	mov    BYTE PTR [ecx-0x17],dl
c0004932:	89 c2                	mov    edx,eax
c0004934:	c1 ea 02             	shr    edx,0x2
c0004937:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000493b:	47                   	inc    edi
c000493c:	01 f5                	add    ebp,esi
c000493e:	83 e2 c0             	and    edx,0xffffffc0
c0004941:	88 41 eb             	mov    BYTE PTR [ecx-0x15],al
c0004944:	09 fa                	or     edx,edi
c0004946:	8d 45 ff             	lea    eax,[ebp-0x1]
c0004949:	88 51 ea             	mov    BYTE PTR [ecx-0x16],dl
c000494c:	bf 3f 00 00 00       	mov    edi,0x3f
c0004951:	31 d2                	xor    edx,edx
c0004953:	f7 f7                	div    edi
c0004955:	89 d6                	mov    esi,edx
c0004957:	31 d2                	xor    edx,edx
c0004959:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c000495d:	89 c7                	mov    edi,eax
c000495f:	46                   	inc    esi
c0004960:	c1 ef 02             	shr    edi,0x2
c0004963:	88 51 ed             	mov    BYTE PTR [ecx-0x13],dl
c0004966:	83 e7 c0             	and    edi,0xffffffc0
c0004969:	88 41 ef             	mov    BYTE PTR [ecx-0x11],al
c000496c:	09 fe                	or     esi,edi
c000496e:	89 f2                	mov    edx,esi
c0004970:	88 51 ee             	mov    BYTE PTR [ecx-0x12],dl
c0004973:	e9 24 ff ff ff       	jmp    c000489c <create_partition+0x4a4>
c0004978:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000497e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004983:	e8 36 d1 ff ff       	call   c0001abe <st_word>
c0004988:	83 ec 0c             	sub    esp,0xc
c000498b:	6a 01                	push   0x1
c000498d:	6a 00                	push   0x0
c000498f:	6a 00                	push   0x0
c0004991:	53                   	push   ebx
c0004992:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004996:	e8 7c d0 ff ff       	call   c0001a17 <disk_write>
c000499b:	83 c4 20             	add    esp,0x20
c000499e:	85 c0                	test   eax,eax
c00049a0:	0f 95 c0             	setne  al
c00049a3:	0f b6 c0             	movzx  eax,al
c00049a6:	83 c4 5c             	add    esp,0x5c
c00049a9:	5b                   	pop    ebx
c00049aa:	5e                   	pop    esi
c00049ab:	5f                   	pop    edi
c00049ac:	5d                   	pop    ebp
c00049ad:	c3                   	ret    

c00049ae <get_fileinfo>:
c00049ae:	55                   	push   ebp
c00049af:	57                   	push   edi
c00049b0:	56                   	push   esi
c00049b1:	53                   	push   ebx
c00049b2:	83 ec 1c             	sub    esp,0x1c
c00049b5:	8b 30                	mov    esi,DWORD PTR [eax]
c00049b7:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c00049bb:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c00049be:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00049c2:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c00049c5:	0f 84 dc 01 00 00    	je     c0004ba7 <get_fileinfo+0x1f9>
c00049cb:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00049ce:	75 0f                	jne    c00049df <get_fileinfo+0x31>
c00049d0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00049d3:	83 c4 1c             	add    esp,0x1c
c00049d6:	5b                   	pop    ebx
c00049d7:	5e                   	pop    esi
c00049d8:	5f                   	pop    edi
c00049d9:	5d                   	pop    ebp
c00049da:	e9 70 d5 ff ff       	jmp    c0001f4f <get_xfileinfo>
c00049df:	89 d3                	mov    ebx,edx
c00049e1:	89 c6                	mov    esi,eax
c00049e3:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c00049e7:	74 6a                	je     c0004a53 <get_fileinfo+0xa5>
c00049e9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00049f1:	31 ed                	xor    ebp,ebp
c00049f3:	31 ff                	xor    edi,edi
c00049f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00049f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00049fd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004a00:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004a04:	66 85 d2             	test   dx,dx
c0004a07:	74 3e                	je     c0004a47 <get_fileinfo+0x99>
c0004a09:	66 85 ed             	test   bp,bp
c0004a0c:	75 0c                	jne    c0004a1a <get_fileinfo+0x6c>
c0004a0e:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004a14:	66 3d ff 07          	cmp    ax,0x7ff
c0004a18:	76 22                	jbe    c0004a3c <get_fileinfo+0x8e>
c0004a1a:	89 e8                	mov    eax,ebp
c0004a1c:	b9 ff 00 00 00       	mov    ecx,0xff
c0004a21:	c1 e0 10             	shl    eax,0x10
c0004a24:	29 f9                	sub    ecx,edi
c0004a26:	09 d0                	or     eax,edx
c0004a28:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004a2c:	e8 bb d1 ff ff       	call   c0001bec <put_utf>
c0004a31:	84 c0                	test   al,al
c0004a33:	74 10                	je     c0004a45 <get_fileinfo+0x97>
c0004a35:	0f b6 c0             	movzx  eax,al
c0004a38:	01 c7                	add    edi,eax
c0004a3a:	31 d2                	xor    edx,edx
c0004a3c:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004a41:	89 d5                	mov    ebp,edx
c0004a43:	eb b0                	jmp    c00049f5 <get_fileinfo+0x47>
c0004a45:	31 ff                	xor    edi,edi
c0004a47:	66 85 ed             	test   bp,bp
c0004a4a:	74 02                	je     c0004a4e <get_fileinfo+0xa0>
c0004a4c:	31 ff                	xor    edi,edi
c0004a4e:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004a53:	31 ff                	xor    edi,edi
c0004a55:	31 c9                	xor    ecx,ecx
c0004a57:	83 f9 0a             	cmp    ecx,0xa
c0004a5a:	0f 87 ad 00 00 00    	ja     c0004b0d <get_fileinfo+0x15f>
c0004a60:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004a63:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004a66:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004a6a:	66 83 fa 20          	cmp    dx,0x20
c0004a6e:	0f 84 92 00 00 00    	je     c0004b06 <get_fileinfo+0x158>
c0004a74:	66 83 fa 05          	cmp    dx,0x5
c0004a78:	75 05                	jne    c0004a7f <get_fileinfo+0xd1>
c0004a7a:	ba e5 00 00 00       	mov    edx,0xe5
c0004a7f:	83 fd 09             	cmp    ebp,0x9
c0004a82:	75 0b                	jne    c0004a8f <get_fileinfo+0xe1>
c0004a84:	83 ff 0b             	cmp    edi,0xb
c0004a87:	77 06                	ja     c0004a8f <get_fileinfo+0xe1>
c0004a89:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004a8e:	47                   	inc    edi
c0004a8f:	0f b7 c2             	movzx  eax,dx
c0004a92:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a96:	e8 85 d0 ff ff       	call   c0001b20 <dbc_1st>
c0004a9b:	85 c0                	test   eax,eax
c0004a9d:	74 2f                	je     c0004ace <get_fileinfo+0x120>
c0004a9f:	83 fd 08             	cmp    ebp,0x8
c0004aa2:	74 2a                	je     c0004ace <get_fileinfo+0x120>
c0004aa4:	83 fd 0b             	cmp    ebp,0xb
c0004aa7:	74 25                	je     c0004ace <get_fileinfo+0x120>
c0004aa9:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004aac:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004ab0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ab4:	e8 6a d0 ff ff       	call   c0001b23 <dbc_2nd>
c0004ab9:	85 c0                	test   eax,eax
c0004abb:	74 11                	je     c0004ace <get_fileinfo+0x120>
c0004abd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004ac4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004ac9:	c1 e2 08             	shl    edx,0x8
c0004acc:	09 c2                	or     edx,eax
c0004ace:	50                   	push   eax
c0004acf:	50                   	push   eax
c0004ad0:	68 b5 01 00 00       	push   0x1b5
c0004ad5:	0f b7 d2             	movzx  edx,dx
c0004ad8:	52                   	push   edx
c0004ad9:	e8 17 38 00 00       	call   c00082f5 <ff_oem2uni>
c0004ade:	83 c4 10             	add    esp,0x10
c0004ae1:	66 85 c0             	test   ax,ax
c0004ae4:	75 04                	jne    c0004aea <get_fileinfo+0x13c>
c0004ae6:	31 ff                	xor    edi,edi
c0004ae8:	eb 23                	jmp    c0004b0d <get_fileinfo+0x15f>
c0004aea:	b9 0c 00 00 00       	mov    ecx,0xc
c0004aef:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004af3:	29 f9                	sub    ecx,edi
c0004af5:	0f b7 c0             	movzx  eax,ax
c0004af8:	e8 ef d0 ff ff       	call   c0001bec <put_utf>
c0004afd:	84 c0                	test   al,al
c0004aff:	74 e5                	je     c0004ae6 <get_fileinfo+0x138>
c0004b01:	0f b6 c0             	movzx  eax,al
c0004b04:	01 c7                	add    edi,eax
c0004b06:	89 e9                	mov    ecx,ebp
c0004b08:	e9 4a ff ff ff       	jmp    c0004a57 <get_fileinfo+0xa9>
c0004b0d:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004b12:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004b16:	75 54                	jne    c0004b6c <get_fileinfo+0x1be>
c0004b18:	85 ff                	test   edi,edi
c0004b1a:	75 0b                	jne    c0004b27 <get_fileinfo+0x179>
c0004b1c:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004b20:	ba 01 00 00 00       	mov    edx,0x1
c0004b25:	eb 33                	jmp    c0004b5a <get_fileinfo+0x1ac>
c0004b27:	b1 08                	mov    cl,0x8
c0004b29:	31 d2                	xor    edx,edx
c0004b2b:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004b31:	84 c0                	test   al,al
c0004b33:	74 25                	je     c0004b5a <get_fileinfo+0x1ac>
c0004b35:	66 83 f8 2e          	cmp    ax,0x2e
c0004b39:	74 16                	je     c0004b51 <get_fileinfo+0x1a3>
c0004b3b:	8d 78 bf             	lea    edi,[eax-0x41]
c0004b3e:	66 83 ff 19          	cmp    di,0x19
c0004b42:	77 0f                	ja     c0004b53 <get_fileinfo+0x1a5>
c0004b44:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004b47:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004b4a:	74 07                	je     c0004b53 <get_fileinfo+0x1a5>
c0004b4c:	83 c0 20             	add    eax,0x20
c0004b4f:	eb 02                	jmp    c0004b53 <get_fileinfo+0x1a5>
c0004b51:	b1 10                	mov    cl,0x10
c0004b53:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004b57:	42                   	inc    edx
c0004b58:	eb d1                	jmp    c0004b2b <get_fileinfo+0x17d>
c0004b5a:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004b5f:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b62:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004b66:	75 04                	jne    c0004b6c <get_fileinfo+0x1be>
c0004b68:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004b6c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b6f:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004b72:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004b75:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b78:	83 c0 1c             	add    eax,0x1c
c0004b7b:	e8 d9 ce ff ff       	call   c0001a59 <ld_dword>
c0004b80:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004b87:	89 03                	mov    DWORD PTR [ebx],eax
c0004b89:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b8c:	83 c0 16             	add    eax,0x16
c0004b8f:	e8 b8 ce ff ff       	call   c0001a4c <ld_word>
c0004b94:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004b98:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004b9b:	83 c0 18             	add    eax,0x18
c0004b9e:	e8 a9 ce ff ff       	call   c0001a4c <ld_word>
c0004ba3:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004ba7:	83 c4 1c             	add    esp,0x1c
c0004baa:	5b                   	pop    ebx
c0004bab:	5e                   	pop    esi
c0004bac:	5f                   	pop    edi
c0004bad:	5d                   	pop    ebp
c0004bae:	c3                   	ret    

c0004baf <ld_clust.isra.0>:
c0004baf:	56                   	push   esi
c0004bb0:	89 c6                	mov    esi,eax
c0004bb2:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004bb5:	53                   	push   ebx
c0004bb6:	89 d3                	mov    ebx,edx
c0004bb8:	e8 8f ce ff ff       	call   c0001a4c <ld_word>
c0004bbd:	0f b7 c8             	movzx  ecx,ax
c0004bc0:	89 f0                	mov    eax,esi
c0004bc2:	3c 03                	cmp    al,0x3
c0004bc4:	75 0d                	jne    c0004bd3 <ld_clust.isra.0+0x24>
c0004bc6:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bc9:	e8 7e ce ff ff       	call   c0001a4c <ld_word>
c0004bce:	c1 e0 10             	shl    eax,0x10
c0004bd1:	09 c1                	or     ecx,eax
c0004bd3:	5b                   	pop    ebx
c0004bd4:	89 c8                	mov    eax,ecx
c0004bd6:	5e                   	pop    esi
c0004bd7:	c3                   	ret    

c0004bd8 <st_clust.isra.1>:
c0004bd8:	56                   	push   esi
c0004bd9:	89 c6                	mov    esi,eax
c0004bdb:	53                   	push   ebx
c0004bdc:	89 d3                	mov    ebx,edx
c0004bde:	0f b7 d1             	movzx  edx,cx
c0004be1:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004be4:	e8 d5 ce ff ff       	call   c0001abe <st_word>
c0004be9:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004bec:	75 0f                	jne    c0004bfd <st_clust.isra.1+0x25>
c0004bee:	c1 e9 10             	shr    ecx,0x10
c0004bf1:	8d 43 14             	lea    eax,[ebx+0x14]
c0004bf4:	89 ca                	mov    edx,ecx
c0004bf6:	5b                   	pop    ebx
c0004bf7:	5e                   	pop    esi
c0004bf8:	e9 c1 ce ff ff       	jmp    c0001abe <st_word>
c0004bfd:	5b                   	pop    ebx
c0004bfe:	5e                   	pop    esi
c0004bff:	c3                   	ret    

c0004c00 <init_alloc_info.isra.2>:
c0004c00:	56                   	push   esi
c0004c01:	89 c6                	mov    esi,eax
c0004c03:	53                   	push   ebx
c0004c04:	89 d3                	mov    ebx,edx
c0004c06:	51                   	push   ecx
c0004c07:	8b 00                	mov    eax,DWORD PTR [eax]
c0004c09:	83 c0 34             	add    eax,0x34
c0004c0c:	e8 48 ce ff ff       	call   c0001a59 <ld_dword>
c0004c11:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004c14:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c16:	83 c0 38             	add    eax,0x38
c0004c19:	e8 53 ce ff ff       	call   c0001a71 <ld_qword>
c0004c1e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004c21:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004c24:	8b 06                	mov    eax,DWORD PTR [esi]
c0004c26:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004c29:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c30:	83 e0 02             	and    eax,0x2
c0004c33:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004c36:	5b                   	pop    ebx
c0004c37:	5b                   	pop    ebx
c0004c38:	5e                   	pop    esi
c0004c39:	c3                   	ret    

c0004c3a <follow_path>:
c0004c3a:	56                   	push   esi
c0004c3b:	53                   	push   ebx
c0004c3c:	89 c3                	mov    ebx,eax
c0004c3e:	83 ec 14             	sub    esp,0x14
c0004c41:	8b 30                	mov    esi,DWORD PTR [eax]
c0004c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004c47:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c4b:	8a 10                	mov    dl,BYTE PTR [eax]
c0004c4d:	80 fa 2f             	cmp    dl,0x2f
c0004c50:	75 07                	jne    c0004c59 <follow_path+0x1f>
c0004c52:	40                   	inc    eax
c0004c53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004c57:	eb ee                	jmp    c0004c47 <follow_path+0xd>
c0004c59:	80 fa 5c             	cmp    dl,0x5c
c0004c5c:	74 f4                	je     c0004c52 <follow_path+0x18>
c0004c5e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004c65:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004c6c:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004c6f:	77 52                	ja     c0004cc3 <follow_path+0x89>
c0004c71:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004c75:	31 d2                	xor    edx,edx
c0004c77:	89 d8                	mov    eax,ebx
c0004c79:	e8 1d e3 ff ff       	call   c0002f9b <dir_sdi>
c0004c7e:	eb 7c                	jmp    c0004cfc <follow_path+0xc2>
c0004c80:	89 d8                	mov    eax,ebx
c0004c82:	e8 60 f2 ff ff       	call   c0003ee7 <dir_find>
c0004c87:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004c8a:	85 c0                	test   eax,eax
c0004c8c:	75 46                	jne    c0004cd4 <follow_path+0x9a>
c0004c8e:	80 e2 04             	and    dl,0x4
c0004c91:	75 69                	jne    c0004cfc <follow_path+0xc2>
c0004c93:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004c97:	74 5e                	je     c0004cf7 <follow_path+0xbd>
c0004c99:	8a 06                	mov    al,BYTE PTR [esi]
c0004c9b:	3c 04                	cmp    al,0x4
c0004c9d:	75 41                	jne    c0004ce0 <follow_path+0xa6>
c0004c9f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ca2:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ca6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ca9:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004cac:	30 c0                	xor    al,al
c0004cae:	09 d0                	or     eax,edx
c0004cb0:	89 da                	mov    edx,ebx
c0004cb2:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004cb5:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004cb8:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004cbb:	8d 46 10             	lea    eax,[esi+0x10]
c0004cbe:	e8 3d ff ff ff       	call   c0004c00 <init_alloc_info.isra.2>
c0004cc3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004cc7:	89 d8                	mov    eax,ebx
c0004cc9:	e8 b6 ed ff ff       	call   c0003a84 <create_name>
c0004cce:	85 c0                	test   eax,eax
c0004cd0:	74 ae                	je     c0004c80 <follow_path+0x46>
c0004cd2:	eb 28                	jmp    c0004cfc <follow_path+0xc2>
c0004cd4:	83 f8 04             	cmp    eax,0x4
c0004cd7:	75 23                	jne    c0004cfc <follow_path+0xc2>
c0004cd9:	80 e2 04             	and    dl,0x4
c0004cdc:	74 19                	je     c0004cf7 <follow_path+0xbd>
c0004cde:	eb 1c                	jmp    c0004cfc <follow_path+0xc2>
c0004ce0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ce3:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004ce9:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004ced:	e8 bd fe ff ff       	call   c0004baf <ld_clust.isra.0>
c0004cf2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004cf5:	eb cc                	jmp    c0004cc3 <follow_path+0x89>
c0004cf7:	b8 05 00 00 00       	mov    eax,0x5
c0004cfc:	83 c4 14             	add    esp,0x14
c0004cff:	5b                   	pop    ebx
c0004d00:	5e                   	pop    esi
c0004d01:	c3                   	ret    

c0004d02 <f_mount>:
c0004d02:	53                   	push   ebx
c0004d03:	83 ec 18             	sub    esp,0x18
c0004d06:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004d0a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004d0e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d12:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004d16:	e8 13 d3 ff ff       	call   c000202e <get_ldnumber>
c0004d1b:	89 c2                	mov    edx,eax
c0004d1d:	b8 0b 00 00 00       	mov    eax,0xb
c0004d22:	85 d2                	test   edx,edx
c0004d24:	78 39                	js     c0004d5f <f_mount+0x5d>
c0004d26:	8b 04 95 40 47 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb8c0]
c0004d2d:	85 c0                	test   eax,eax
c0004d2f:	74 03                	je     c0004d34 <f_mount+0x32>
c0004d31:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d38:	85 c0                	test   eax,eax
c0004d3a:	74 03                	je     c0004d3f <f_mount+0x3d>
c0004d3c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004d3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004d43:	89 04 95 40 47 02 c0 	mov    DWORD PTR [edx*4-0x3ffdb8c0],eax
c0004d4a:	31 c0                	xor    eax,eax
c0004d4c:	84 db                	test   bl,bl
c0004d4e:	74 0f                	je     c0004d5f <f_mount+0x5d>
c0004d50:	31 c9                	xor    ecx,ecx
c0004d52:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d56:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004d5a:	e8 6f d7 ff ff       	call   c00024ce <mount_volume>
c0004d5f:	83 c4 18             	add    esp,0x18
c0004d62:	5b                   	pop    ebx
c0004d63:	c3                   	ret    

c0004d64 <f_open>:
c0004d64:	55                   	push   ebp
c0004d65:	bd 09 00 00 00       	mov    ebp,0x9
c0004d6a:	57                   	push   edi
c0004d6b:	56                   	push   esi
c0004d6c:	53                   	push   ebx
c0004d6d:	83 ec 7c             	sub    esp,0x7c
c0004d70:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004d77:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004d7e:	85 db                	test   ebx,ebx
c0004d80:	0f 84 10 04 00 00    	je     c0005196 <f_open+0x432>
c0004d86:	89 fe                	mov    esi,edi
c0004d88:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004d8c:	83 e6 3f             	and    esi,0x3f
c0004d8f:	89 f0                	mov    eax,esi
c0004d91:	0f b6 c8             	movzx  ecx,al
c0004d94:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004d9b:	e8 2e d7 ff ff       	call   c00024ce <mount_volume>
c0004da0:	89 c5                	mov    ebp,eax
c0004da2:	85 c0                	test   eax,eax
c0004da4:	0f 85 e6 03 00 00    	jne    c0005190 <f_open+0x42c>
c0004daa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dae:	83 ec 0c             	sub    esp,0xc
c0004db1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004db5:	bd 11 00 00 00       	mov    ebp,0x11
c0004dba:	68 60 04 00 00       	push   0x460
c0004dbf:	e8 6e 34 00 00       	call   c0008232 <ff_memalloc>
c0004dc4:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004dc8:	83 c4 10             	add    esp,0x10
c0004dcb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004dd0:	0f 84 c0 03 00 00    	je     c0005196 <f_open+0x432>
c0004dd6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004dda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004dde:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004de4:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004de7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004dea:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004df1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004df5:	e8 40 fe ff ff       	call   c0004c3a <follow_path>
c0004dfa:	89 c5                	mov    ebp,eax
c0004dfc:	85 c0                	test   eax,eax
c0004dfe:	75 0c                	jne    c0004e0c <f_open+0xa8>
c0004e00:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0004e05:	79 05                	jns    c0004e0c <f_open+0xa8>
c0004e07:	bd 06 00 00 00       	mov    ebp,0x6
c0004e0c:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0004e12:	0f 84 84 01 00 00    	je     c0004f9c <f_open+0x238>
c0004e18:	85 ed                	test   ebp,ebp
c0004e1a:	74 20                	je     c0004e3c <f_open+0xd8>
c0004e1c:	83 fd 04             	cmp    ebp,0x4
c0004e1f:	0f 85 58 03 00 00    	jne    c000517d <f_open+0x419>
c0004e25:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004e29:	83 ce 08             	or     esi,0x8
c0004e2c:	e8 7d f2 ff ff       	call   c00040ae <dir_register>
c0004e31:	89 c5                	mov    ebp,eax
c0004e33:	85 c0                	test   eax,eax
c0004e35:	74 2f                	je     c0004e66 <f_open+0x102>
c0004e37:	e9 41 03 00 00       	jmp    c000517d <f_open+0x419>
c0004e3c:	bd 07 00 00 00       	mov    ebp,0x7
c0004e41:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0004e46:	0f 85 31 03 00 00    	jne    c000517d <f_open+0x419>
c0004e4c:	bd 08 00 00 00       	mov    ebp,0x8
c0004e51:	f7 c7 04 00 00 00    	test   edi,0x4
c0004e57:	0f 85 20 03 00 00    	jne    c000517d <f_open+0x419>
c0004e5d:	83 e7 08             	and    edi,0x8
c0004e60:	0f 84 65 01 00 00    	je     c0004fcb <f_open+0x267>
c0004e66:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004e6a:	8a 02                	mov    al,BYTE PTR [edx]
c0004e6c:	3c 04                	cmp    al,0x4
c0004e6e:	0f 85 97 00 00 00    	jne    c0004f0b <f_open+0x1a7>
c0004e74:	8d 42 10             	lea    eax,[edx+0x10]
c0004e77:	89 13                	mov    DWORD PTR [ebx],edx
c0004e79:	89 da                	mov    edx,ebx
c0004e7b:	e8 80 fd ff ff       	call   c0004c00 <init_alloc_info.isra.2>
c0004e80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e84:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e87:	31 d2                	xor    edx,edx
c0004e89:	83 c0 02             	add    eax,0x2
c0004e8c:	b9 1e 00 00 00       	mov    ecx,0x1e
c0004e91:	e8 4a cc ff ff       	call   c0001ae0 <mem_set>
c0004e96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004e9a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004e9d:	b9 1a 00 00 00       	mov    ecx,0x1a
c0004ea2:	83 c0 26             	add    eax,0x26
c0004ea5:	31 d2                	xor    edx,edx
c0004ea7:	e8 34 cc ff ff       	call   c0001ae0 <mem_set>
c0004eac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004eb0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0004eb3:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c0004eb7:	ba 00 00 21 50       	mov    edx,0x50210000
c0004ebc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ebf:	83 c0 08             	add    eax,0x8
c0004ec2:	e8 fb cb ff ff       	call   c0001ac2 <st_dword>
c0004ec7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004ecb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0004ece:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c0004ed2:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004ed6:	e8 c4 ea ff ff       	call   c000399f <store_xdir>
c0004edb:	89 c5                	mov    ebp,eax
c0004edd:	85 c0                	test   eax,eax
c0004edf:	0f 85 98 02 00 00    	jne    c000517d <f_open+0x419>
c0004ee5:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004ee8:	85 d2                	test   edx,edx
c0004eea:	0f 84 db 00 00 00    	je     c0004fcb <f_open+0x267>
c0004ef0:	31 c9                	xor    ecx,ecx
c0004ef2:	89 d8                	mov    eax,ebx
c0004ef4:	e8 9b e3 ff ff       	call   c0003294 <remove_chain>
c0004ef9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004efd:	89 c5                	mov    ebp,eax
c0004eff:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004f02:	48                   	dec    eax
c0004f03:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0004f06:	e9 b8 00 00 00       	jmp    c0004fc3 <f_open+0x25f>
c0004f0b:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0004f0f:	89 ea                	mov    edx,ebp
c0004f11:	e8 99 fc ff ff       	call   c0004baf <ld_clust.isra.0>
c0004f16:	ba 00 00 21 50       	mov    edx,0x50210000
c0004f1b:	89 c7                	mov    edi,eax
c0004f1d:	8d 45 0e             	lea    eax,[ebp+0xe]
c0004f20:	e8 9d cb ff ff       	call   c0001ac2 <st_dword>
c0004f25:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0004f2d:	31 c9                	xor    ecx,ecx
c0004f2f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f37:	e8 9c fc ff ff       	call   c0004bd8 <st_clust.isra.1>
c0004f3c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0004f40:	83 c0 1c             	add    eax,0x1c
c0004f43:	31 d2                	xor    edx,edx
c0004f45:	e8 78 cb ff ff       	call   c0001ac2 <st_dword>
c0004f4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f4e:	85 ff                	test   edi,edi
c0004f50:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004f54:	74 75                	je     c0004fcb <f_open+0x267>
c0004f56:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f5a:	31 c9                	xor    ecx,ecx
c0004f5c:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c0004f5f:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0004f62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004f66:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004f6a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f6e:	89 fa                	mov    edx,edi
c0004f70:	e8 1f e3 ff ff       	call   c0003294 <remove_chain>
c0004f75:	89 c5                	mov    ebp,eax
c0004f77:	85 c0                	test   eax,eax
c0004f79:	0f 85 fe 01 00 00    	jne    c000517d <f_open+0x419>
c0004f7f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004f83:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004f87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f8b:	4f                   	dec    edi
c0004f8c:	e8 92 d2 ff ff       	call   c0002223 <move_window>
c0004f91:	89 c5                	mov    ebp,eax
c0004f93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f97:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0004f9a:	eb 27                	jmp    c0004fc3 <f_open+0x25f>
c0004f9c:	85 ed                	test   ebp,ebp
c0004f9e:	0f 85 d9 01 00 00    	jne    c000517d <f_open+0x419>
c0004fa4:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c0004fa8:	bd 04 00 00 00       	mov    ebp,0x4
c0004fad:	a8 10                	test   al,0x10
c0004faf:	0f 85 c8 01 00 00    	jne    c000517d <f_open+0x419>
c0004fb5:	83 e7 02             	and    edi,0x2
c0004fb8:	74 11                	je     c0004fcb <f_open+0x267>
c0004fba:	bd 07 00 00 00       	mov    ebp,0x7
c0004fbf:	a8 01                	test   al,0x1
c0004fc1:	eb 02                	jmp    c0004fc5 <f_open+0x261>
c0004fc3:	85 ed                	test   ebp,ebp
c0004fc5:	0f 85 b2 01 00 00    	jne    c000517d <f_open+0x419>
c0004fcb:	f7 c6 08 00 00 00    	test   esi,0x8
c0004fd1:	74 03                	je     c0004fd6 <f_open+0x272>
c0004fd3:	83 ce 40             	or     esi,0x40
c0004fd6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0004fda:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c0004fdd:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c0004fe0:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0004fe3:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0004fe7:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0004fea:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c0004fed:	8a 02                	mov    al,BYTE PTR [edx]
c0004fef:	3c 04                	cmp    al,0x4
c0004ff1:	75 2a                	jne    c000501d <f_open+0x2b9>
c0004ff3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004ff7:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ffa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0004ffe:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005003:	30 c0                	xor    al,al
c0005005:	09 c8                	or     eax,ecx
c0005007:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000500a:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000500e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005011:	8d 42 10             	lea    eax,[edx+0x10]
c0005014:	89 da                	mov    edx,ebx
c0005016:	e8 e5 fb ff ff       	call   c0004c00 <init_alloc_info.isra.2>
c000501b:	eb 1c                	jmp    c0005039 <f_open+0x2d5>
c000501d:	89 fa                	mov    edx,edi
c000501f:	e8 8b fb ff ff       	call   c0004baf <ld_clust.isra.0>
c0005024:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005027:	8d 47 1c             	lea    eax,[edi+0x1c]
c000502a:	e8 2a ca ff ff       	call   c0001a59 <ld_dword>
c000502f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005036:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005039:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000503d:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005044:	89 03                	mov    DWORD PTR [ebx],eax
c0005046:	31 d2                	xor    edx,edx
c0005048:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000504c:	b9 00 02 00 00       	mov    ecx,0x200
c0005051:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005055:	89 f0                	mov    eax,esi
c0005057:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c000505a:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c000505e:	8d 43 50             	lea    eax,[ebx+0x50]
c0005061:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005068:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000506f:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005076:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000507d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005081:	e8 5a ca ff ff       	call   c0001ae0 <mem_set>
c0005086:	83 e6 20             	and    esi,0x20
c0005089:	75 07                	jne    c0005092 <f_open+0x32e>
c000508b:	31 ed                	xor    ebp,ebp
c000508d:	e9 eb 00 00 00       	jmp    c000517d <f_open+0x419>
c0005092:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005095:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005098:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000509c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00050a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00050a4:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00050a8:	74 e1                	je     c000508b <f_open+0x327>
c00050aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00050ae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00050b2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00050b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b9:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00050bc:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050bf:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00050c3:	c1 e5 09             	shl    ebp,0x9
c00050c6:	31 ff                	xor    edi,edi
c00050c8:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00050cc:	89 f8                	mov    eax,edi
c00050ce:	89 ee                	mov    esi,ebp
c00050d0:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00050d4:	73 22                	jae    c00050f8 <f_open+0x394>
c00050d6:	89 d8                	mov    eax,ebx
c00050d8:	e8 c8 dc ff ff       	call   c0002da5 <get_fat>
c00050dd:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00050e1:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00050e5:	89 c2                	mov    edx,eax
c00050e7:	83 f8 01             	cmp    eax,0x1
c00050ea:	76 10                	jbe    c00050fc <f_open+0x398>
c00050ec:	83 f8 ff             	cmp    eax,0xffffffff
c00050ef:	75 d5                	jne    c00050c6 <f_open+0x362>
c00050f1:	bd 01 00 00 00       	mov    ebp,0x1
c00050f6:	eb 09                	jmp    c0005101 <f_open+0x39d>
c00050f8:	31 ed                	xor    ebp,ebp
c00050fa:	eb 05                	jmp    c0005101 <f_open+0x39d>
c00050fc:	bd 02 00 00 00       	mov    ebp,0x2
c0005101:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005104:	85 ed                	test   ebp,ebp
c0005106:	75 75                	jne    c000517d <f_open+0x419>
c0005108:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000510c:	25 ff 01 00 00       	and    eax,0x1ff
c0005111:	0f 84 74 ff ff ff    	je     c000508b <f_open+0x327>
c0005117:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000511b:	bd 02 00 00 00       	mov    ebp,0x2
c0005120:	89 c8                	mov    eax,ecx
c0005122:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005126:	e8 ba cb ff ff       	call   c0001ce5 <clst2sect>
c000512b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000512f:	89 d7                	mov    edi,edx
c0005131:	09 c7                	or     edi,eax
c0005133:	74 48                	je     c000517d <f_open+0x419>
c0005135:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005139:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000513d:	0f ac fe 09          	shrd   esi,edi,0x9
c0005141:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0005145:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000514d:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0005151:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005155:	83 ec 0c             	sub    esp,0xc
c0005158:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000515b:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000515e:	6a 01                	push   0x1
c0005160:	52                   	push   edx
c0005161:	50                   	push   eax
c0005162:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005166:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000516a:	50                   	push   eax
c000516b:	e8 91 c8 ff ff       	call   c0001a01 <disk_read>
c0005170:	83 c4 20             	add    esp,0x20
c0005173:	85 c0                	test   eax,eax
c0005175:	0f 95 c0             	setne  al
c0005178:	0f b6 c0             	movzx  eax,al
c000517b:	89 c5                	mov    ebp,eax
c000517d:	83 ec 0c             	sub    esp,0xc
c0005180:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005184:	e8 bf 30 00 00       	call   c0008248 <ff_memfree>
c0005189:	83 c4 10             	add    esp,0x10
c000518c:	85 ed                	test   ebp,ebp
c000518e:	74 06                	je     c0005196 <f_open+0x432>
c0005190:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005196:	83 c4 7c             	add    esp,0x7c
c0005199:	89 e8                	mov    eax,ebp
c000519b:	5b                   	pop    ebx
c000519c:	5e                   	pop    esi
c000519d:	5f                   	pop    edi
c000519e:	5d                   	pop    ebp
c000519f:	c3                   	ret    

c00051a0 <f_read>:
c00051a0:	55                   	push   ebp
c00051a1:	57                   	push   edi
c00051a2:	56                   	push   esi
c00051a3:	53                   	push   ebx
c00051a4:	83 ec 2c             	sub    esp,0x2c
c00051a7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00051ab:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00051af:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051b3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00051b9:	89 d8                	mov    eax,ebx
c00051bb:	e8 88 cf ff ff       	call   c0002148 <validate>
c00051c0:	89 c5                	mov    ebp,eax
c00051c2:	85 c0                	test   eax,eax
c00051c4:	0f 85 4c 02 00 00    	jne    c0005416 <f_read+0x276>
c00051ca:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00051ce:	85 ed                	test   ebp,ebp
c00051d0:	0f 85 40 02 00 00    	jne    c0005416 <f_read+0x276>
c00051d6:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00051da:	0f 84 31 02 00 00    	je     c0005411 <f_read+0x271>
c00051e0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00051e3:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00051e6:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00051e9:	bf 00 00 00 00       	mov    edi,0x0
c00051ee:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00051f1:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00051f5:	89 d1                	mov    ecx,edx
c00051f7:	19 f9                	sbb    ecx,edi
c00051f9:	0f 83 cf 00 00 00    	jae    c00052ce <f_read+0x12e>
c00051ff:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005203:	e9 c6 00 00 00       	jmp    c00052ce <f_read+0x12e>
c0005208:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000520b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000520e:	89 d0                	mov    eax,edx
c0005210:	25 ff 01 00 00       	and    eax,0x1ff
c0005215:	0f 85 c9 01 00 00    	jne    c00053e4 <f_read+0x244>
c000521b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000521f:	89 d6                	mov    esi,edx
c0005221:	89 cf                	mov    edi,ecx
c0005223:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005227:	0f ac fe 09          	shrd   esi,edi,0x9
c000522b:	48                   	dec    eax
c000522c:	21 f0                	and    eax,esi
c000522e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005232:	0f 84 a6 00 00 00    	je     c00052de <f_read+0x13e>
c0005238:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000523c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000523f:	89 c8                	mov    eax,ecx
c0005241:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005244:	e8 9c ca ff ff       	call   c0001ce5 <clst2sect>
c0005249:	89 d7                	mov    edi,edx
c000524b:	09 c7                	or     edi,eax
c000524d:	0f 84 b4 00 00 00    	je     c0005307 <f_read+0x167>
c0005253:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005257:	31 ff                	xor    edi,edi
c0005259:	01 c6                	add    esi,eax
c000525b:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000525e:	11 d7                	adc    edi,edx
c0005260:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005268:	0f 86 fd 00 00 00    	jbe    c000536b <f_read+0x1cb>
c000526e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005272:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005276:	c1 e8 09             	shr    eax,0x9
c0005279:	89 04 24             	mov    DWORD PTR [esp],eax
c000527c:	03 14 24             	add    edx,DWORD PTR [esp]
c000527f:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005283:	39 c2                	cmp    edx,eax
c0005285:	76 07                	jbe    c000528e <f_read+0xee>
c0005287:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c000528b:	89 04 24             	mov    DWORD PTR [esp],eax
c000528e:	83 ec 0c             	sub    esp,0xc
c0005291:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0005295:	57                   	push   edi
c0005296:	56                   	push   esi
c0005297:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000529b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000529f:	50                   	push   eax
c00052a0:	e8 5c c7 ff ff       	call   c0001a01 <disk_read>
c00052a5:	83 c4 20             	add    esp,0x20
c00052a8:	85 c0                	test   eax,eax
c00052aa:	75 6e                	jne    c000531a <f_read+0x17a>
c00052ac:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00052b0:	78 7e                	js     c0005330 <f_read+0x190>
c00052b2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00052b5:	c1 e6 09             	shl    esi,0x9
c00052b8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00052bc:	31 ff                	xor    edi,edi
c00052be:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00052c2:	01 30                	add    DWORD PTR [eax],esi
c00052c4:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00052c8:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00052cb:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00052ce:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00052d3:	0f 85 2f ff ff ff    	jne    c0005208 <f_read+0x68>
c00052d9:	e9 38 01 00 00       	jmp    c0005416 <f_read+0x276>
c00052de:	89 c8                	mov    eax,ecx
c00052e0:	09 d0                	or     eax,edx
c00052e2:	75 05                	jne    c00052e9 <f_read+0x149>
c00052e4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00052e7:	eb 19                	jmp    c0005302 <f_read+0x162>
c00052e9:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00052ed:	74 09                	je     c00052f8 <f_read+0x158>
c00052ef:	89 d8                	mov    eax,ebx
c00052f1:	e8 10 ca ff ff       	call   c0001d06 <clmt_clust>
c00052f6:	eb 0a                	jmp    c0005302 <f_read+0x162>
c00052f8:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00052fb:	89 d8                	mov    eax,ebx
c00052fd:	e8 a3 da ff ff       	call   c0002da5 <get_fat>
c0005302:	83 f8 01             	cmp    eax,0x1
c0005305:	77 0e                	ja     c0005315 <f_read+0x175>
c0005307:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000530b:	bd 02 00 00 00       	mov    ebp,0x2
c0005310:	e9 01 01 00 00       	jmp    c0005416 <f_read+0x276>
c0005315:	83 f8 ff             	cmp    eax,0xffffffff
c0005318:	75 0e                	jne    c0005328 <f_read+0x188>
c000531a:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	e9 ee 00 00 00       	jmp    c0005416 <f_read+0x276>
c0005328:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000532b:	e9 08 ff ff ff       	jmp    c0005238 <f_read+0x98>
c0005330:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005333:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005336:	29 f0                	sub    eax,esi
c0005338:	19 fa                	sbb    edx,edi
c000533a:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000533d:	89 d7                	mov    edi,edx
c000533f:	ba 00 00 00 00       	mov    edx,0x0
c0005344:	89 f9                	mov    ecx,edi
c0005346:	19 d1                	sbb    ecx,edx
c0005348:	0f 83 64 ff ff ff    	jae    c00052b2 <f_read+0x112>
c000534e:	89 c7                	mov    edi,eax
c0005350:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005354:	c1 e7 09             	shl    edi,0x9
c0005357:	8d 53 50             	lea    edx,[ebx+0x50]
c000535a:	01 f8                	add    eax,edi
c000535c:	b9 00 02 00 00       	mov    ecx,0x200
c0005361:	e8 65 c7 ff ff       	call   c0001acb <mem_cpy>
c0005366:	e9 47 ff ff ff       	jmp    c00052b2 <f_read+0x112>
c000536b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000536e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005371:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005375:	89 04 24             	mov    DWORD PTR [esp],eax
c0005378:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000537c:	75 05                	jne    c0005383 <f_read+0x1e3>
c000537e:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005381:	74 5b                	je     c00053de <f_read+0x23e>
c0005383:	8d 43 50             	lea    eax,[ebx+0x50]
c0005386:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000538a:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000538e:	79 2a                	jns    c00053ba <f_read+0x21a>
c0005390:	83 ec 0c             	sub    esp,0xc
c0005393:	6a 01                	push   0x1
c0005395:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005399:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000539d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053a1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00053a5:	50                   	push   eax
c00053a6:	e8 6c c6 ff ff       	call   c0001a17 <disk_write>
c00053ab:	83 c4 20             	add    esp,0x20
c00053ae:	85 c0                	test   eax,eax
c00053b0:	0f 85 64 ff ff ff    	jne    c000531a <f_read+0x17a>
c00053b6:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00053ba:	83 ec 0c             	sub    esp,0xc
c00053bd:	6a 01                	push   0x1
c00053bf:	57                   	push   edi
c00053c0:	56                   	push   esi
c00053c1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00053c5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00053c9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00053cd:	50                   	push   eax
c00053ce:	e8 2e c6 ff ff       	call   c0001a01 <disk_read>
c00053d3:	83 c4 20             	add    esp,0x20
c00053d6:	85 c0                	test   eax,eax
c00053d8:	0f 85 3c ff ff ff    	jne    c000531a <f_read+0x17a>
c00053de:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00053e1:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00053e4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00053e7:	ba 00 02 00 00       	mov    edx,0x200
c00053ec:	25 ff 01 00 00       	and    eax,0x1ff
c00053f1:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00053f5:	29 c2                	sub    edx,eax
c00053f7:	39 d6                	cmp    esi,edx
c00053f9:	76 02                	jbe    c00053fd <f_read+0x25d>
c00053fb:	89 d6                	mov    esi,edx
c00053fd:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c0005401:	89 f1                	mov    ecx,esi
c0005403:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005407:	e8 bf c6 ff ff       	call   c0001acb <mem_cpy>
c000540c:	e9 a7 fe ff ff       	jmp    c00052b8 <f_read+0x118>
c0005411:	bd 07 00 00 00       	mov    ebp,0x7
c0005416:	83 c4 2c             	add    esp,0x2c
c0005419:	89 e8                	mov    eax,ebp
c000541b:	5b                   	pop    ebx
c000541c:	5e                   	pop    esi
c000541d:	5f                   	pop    edi
c000541e:	5d                   	pop    ebp
c000541f:	c3                   	ret    

c0005420 <f_write>:
c0005420:	55                   	push   ebp
c0005421:	57                   	push   edi
c0005422:	56                   	push   esi
c0005423:	53                   	push   ebx
c0005424:	83 ec 2c             	sub    esp,0x2c
c0005427:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000542b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000542f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005433:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005439:	89 d8                	mov    eax,ebx
c000543b:	e8 08 cd ff ff       	call   c0002148 <validate>
c0005440:	89 c5                	mov    ebp,eax
c0005442:	85 c0                	test   eax,eax
c0005444:	0f 85 86 02 00 00    	jne    c00056d0 <f_write+0x2b0>
c000544a:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000544e:	85 ed                	test   ebp,ebp
c0005450:	0f 85 7a 02 00 00    	jne    c00056d0 <f_write+0x2b0>
c0005456:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c000545a:	0f 84 6b 02 00 00    	je     c00056cb <f_write+0x2ab>
c0005460:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005464:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005467:	0f 84 43 01 00 00    	je     c00055b0 <f_write+0x190>
c000546d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005470:	89 c1                	mov    ecx,eax
c0005472:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005476:	0f 83 34 01 00 00    	jae    c00055b0 <f_write+0x190>
c000547c:	f7 d0                	not    eax
c000547e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005482:	e9 29 01 00 00       	jmp    c00055b0 <f_write+0x190>
c0005487:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000548a:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000548d:	89 d0                	mov    eax,edx
c000548f:	25 ff 01 00 00       	and    eax,0x1ff
c0005494:	0f 85 00 02 00 00    	jne    c000569a <f_write+0x27a>
c000549a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000549e:	89 d6                	mov    esi,edx
c00054a0:	89 cf                	mov    edi,ecx
c00054a2:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00054a6:	0f ac fe 09          	shrd   esi,edi,0x9
c00054aa:	48                   	dec    eax
c00054ab:	21 f0                	and    eax,esi
c00054ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00054b1:	0f 84 06 01 00 00    	je     c00055bd <f_write+0x19d>
c00054b7:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054bb:	0f 88 6e 01 00 00    	js     c000562f <f_write+0x20f>
c00054c1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00054c5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00054c8:	89 c8                	mov    eax,ecx
c00054ca:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00054ce:	e8 12 c8 ff ff       	call   c0001ce5 <clst2sect>
c00054d3:	89 d1                	mov    ecx,edx
c00054d5:	09 c1                	or     ecx,eax
c00054d7:	0f 84 1c 01 00 00    	je     c00055f9 <f_write+0x1d9>
c00054dd:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00054e1:	31 ff                	xor    edi,edi
c00054e3:	01 c6                	add    esi,eax
c00054e5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00054e9:	11 d7                	adc    edi,edx
c00054eb:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00054f3:	0f 86 63 01 00 00    	jbe    c000565c <f_write+0x23c>
c00054f9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005501:	c1 e8 09             	shr    eax,0x9
c0005504:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005508:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000550c:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005510:	39 c2                	cmp    edx,eax
c0005512:	76 08                	jbe    c000551c <f_write+0xfc>
c0005514:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005518:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000551c:	83 ec 0c             	sub    esp,0xc
c000551f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005523:	57                   	push   edi
c0005524:	56                   	push   esi
c0005525:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005529:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000552d:	50                   	push   eax
c000552e:	e8 e4 c4 ff ff       	call   c0001a17 <disk_write>
c0005533:	83 c4 20             	add    esp,0x20
c0005536:	85 c0                	test   eax,eax
c0005538:	0f 85 ce 00 00 00    	jne    c000560c <f_write+0x1ec>
c000553e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005541:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005544:	29 f0                	sub    eax,esi
c0005546:	19 fa                	sbb    edx,edi
c0005548:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000554c:	89 d7                	mov    edi,edx
c000554e:	ba 00 00 00 00       	mov    edx,0x0
c0005553:	89 f9                	mov    ecx,edi
c0005555:	19 d1                	sbb    ecx,edx
c0005557:	73 1c                	jae    c0005575 <f_write+0x155>
c0005559:	89 c7                	mov    edi,eax
c000555b:	b9 00 02 00 00       	mov    ecx,0x200
c0005560:	c1 e7 09             	shl    edi,0x9
c0005563:	8d 43 50             	lea    eax,[ebx+0x50]
c0005566:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c000556a:	89 fa                	mov    edx,edi
c000556c:	e8 5a c5 ff ff       	call   c0001acb <mem_cpy>
c0005571:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005575:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005579:	c1 e6 09             	shl    esi,0x9
c000557c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005580:	31 ff                	xor    edi,edi
c0005582:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005586:	01 30                	add    DWORD PTR [eax],esi
c0005588:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000558c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000558f:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c0005592:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005595:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c0005598:	89 c1                	mov    ecx,eax
c000559a:	39 f2                	cmp    edx,esi
c000559c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c000559f:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00055a2:	19 f9                	sbb    ecx,edi
c00055a4:	73 04                	jae    c00055aa <f_write+0x18a>
c00055a6:	89 f2                	mov    edx,esi
c00055a8:	89 f8                	mov    eax,edi
c00055aa:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00055ad:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00055b0:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00055b5:	0f 85 cc fe ff ff    	jne    c0005487 <f_write+0x67>
c00055bb:	eb 2e                	jmp    c00055eb <f_write+0x1cb>
c00055bd:	89 c8                	mov    eax,ecx
c00055bf:	09 d0                	or     eax,edx
c00055c1:	75 0b                	jne    c00055ce <f_write+0x1ae>
c00055c3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00055c6:	31 d2                	xor    edx,edx
c00055c8:	85 c0                	test   eax,eax
c00055ca:	75 28                	jne    c00055f4 <f_write+0x1d4>
c00055cc:	eb 12                	jmp    c00055e0 <f_write+0x1c0>
c00055ce:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00055d2:	74 09                	je     c00055dd <f_write+0x1bd>
c00055d4:	89 d8                	mov    eax,ebx
c00055d6:	e8 2b c7 ff ff       	call   c0001d06 <clmt_clust>
c00055db:	eb 0a                	jmp    c00055e7 <f_write+0x1c7>
c00055dd:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00055e0:	89 d8                	mov    eax,ebx
c00055e2:	e8 ac da ff ff       	call   c0003093 <create_chain>
c00055e7:	85 c0                	test   eax,eax
c00055e9:	75 09                	jne    c00055f4 <f_write+0x1d4>
c00055eb:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00055ef:	e9 dc 00 00 00       	jmp    c00056d0 <f_write+0x2b0>
c00055f4:	83 f8 01             	cmp    eax,0x1
c00055f7:	75 0e                	jne    c0005607 <f_write+0x1e7>
c00055f9:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00055fd:	bd 02 00 00 00       	mov    ebp,0x2
c0005602:	e9 c9 00 00 00       	jmp    c00056d0 <f_write+0x2b0>
c0005607:	83 f8 ff             	cmp    eax,0xffffffff
c000560a:	75 0e                	jne    c000561a <f_write+0x1fa>
c000560c:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005610:	bd 01 00 00 00       	mov    ebp,0x1
c0005615:	e9 b6 00 00 00       	jmp    c00056d0 <f_write+0x2b0>
c000561a:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000561d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0005621:	0f 85 90 fe ff ff    	jne    c00054b7 <f_write+0x97>
c0005627:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000562a:	e9 88 fe ff ff       	jmp    c00054b7 <f_write+0x97>
c000562f:	83 ec 0c             	sub    esp,0xc
c0005632:	8d 43 50             	lea    eax,[ebx+0x50]
c0005635:	6a 01                	push   0x1
c0005637:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000563a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000563d:	50                   	push   eax
c000563e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005642:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005646:	50                   	push   eax
c0005647:	e8 cb c3 ff ff       	call   c0001a17 <disk_write>
c000564c:	83 c4 20             	add    esp,0x20
c000564f:	85 c0                	test   eax,eax
c0005651:	75 b9                	jne    c000560c <f_write+0x1ec>
c0005653:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005657:	e9 65 fe ff ff       	jmp    c00054c1 <f_write+0xa1>
c000565c:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000565f:	75 05                	jne    c0005666 <f_write+0x246>
c0005661:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005664:	74 2e                	je     c0005694 <f_write+0x274>
c0005666:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005669:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000566c:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000566f:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005672:	73 20                	jae    c0005694 <f_write+0x274>
c0005674:	83 ec 0c             	sub    esp,0xc
c0005677:	8d 43 50             	lea    eax,[ebx+0x50]
c000567a:	6a 01                	push   0x1
c000567c:	57                   	push   edi
c000567d:	56                   	push   esi
c000567e:	50                   	push   eax
c000567f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005683:	50                   	push   eax
c0005684:	e8 78 c3 ff ff       	call   c0001a01 <disk_read>
c0005689:	83 c4 20             	add    esp,0x20
c000568c:	85 c0                	test   eax,eax
c000568e:	0f 85 78 ff ff ff    	jne    c000560c <f_write+0x1ec>
c0005694:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005697:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	ba 00 02 00 00       	mov    edx,0x200
c00056a2:	25 ff 01 00 00       	and    eax,0x1ff
c00056a7:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00056ab:	29 c2                	sub    edx,eax
c00056ad:	39 d6                	cmp    esi,edx
c00056af:	76 02                	jbe    c00056b3 <f_write+0x293>
c00056b1:	89 d6                	mov    esi,edx
c00056b3:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00056b7:	89 f1                	mov    ecx,esi
c00056b9:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00056bd:	e8 09 c4 ff ff       	call   c0001acb <mem_cpy>
c00056c2:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00056c6:	e9 b1 fe ff ff       	jmp    c000557c <f_write+0x15c>
c00056cb:	bd 07 00 00 00       	mov    ebp,0x7
c00056d0:	83 c4 2c             	add    esp,0x2c
c00056d3:	89 e8                	mov    eax,ebp
c00056d5:	5b                   	pop    ebx
c00056d6:	5e                   	pop    esi
c00056d7:	5f                   	pop    edi
c00056d8:	5d                   	pop    ebp
c00056d9:	c3                   	ret    

c00056da <f_sync>:
c00056da:	56                   	push   esi
c00056db:	53                   	push   ebx
c00056dc:	83 ec 64             	sub    esp,0x64
c00056df:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00056e3:	8d 54 24 10          	lea    edx,[esp+0x10]
c00056e7:	89 d8                	mov    eax,ebx
c00056e9:	e8 5a ca ff ff       	call   c0002148 <validate>
c00056ee:	85 c0                	test   eax,eax
c00056f0:	0f 85 ba 01 00 00    	jne    c00058b0 <f_sync+0x1d6>
c00056f6:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c00056f9:	f6 c2 40             	test   dl,0x40
c00056fc:	0f 84 ae 01 00 00    	je     c00058b0 <f_sync+0x1d6>
c0005702:	84 d2                	test   dl,dl
c0005704:	79 33                	jns    c0005739 <f_sync+0x5f>
c0005706:	83 ec 0c             	sub    esp,0xc
c0005709:	8d 43 50             	lea    eax,[ebx+0x50]
c000570c:	6a 01                	push   0x1
c000570e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005711:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005714:	50                   	push   eax
c0005715:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005719:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000571d:	50                   	push   eax
c000571e:	e8 f4 c2 ff ff       	call   c0001a17 <disk_write>
c0005723:	89 c2                	mov    edx,eax
c0005725:	83 c4 20             	add    esp,0x20
c0005728:	b8 01 00 00 00       	mov    eax,0x1
c000572d:	85 d2                	test   edx,edx
c000572f:	0f 85 7b 01 00 00    	jne    c00058b0 <f_sync+0x1d6>
c0005735:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005739:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000573d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005740:	0f 85 11 01 00 00    	jne    c0005857 <f_sync+0x17d>
c0005746:	89 d8                	mov    eax,ebx
c0005748:	e8 1e d6 ff ff       	call   c0002d6b <fill_first_frag>
c000574d:	85 c0                	test   eax,eax
c000574f:	0f 85 5b 01 00 00    	jne    c00058b0 <f_sync+0x1d6>
c0005755:	83 c9 ff             	or     ecx,0xffffffff
c0005758:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000575b:	89 d8                	mov    eax,ebx
c000575d:	e8 d4 d5 ff ff       	call   c0002d36 <fill_last_frag>
c0005762:	85 c0                	test   eax,eax
c0005764:	0f 85 46 01 00 00    	jne    c00058b0 <f_sync+0x1d6>
c000576a:	83 ec 0c             	sub    esp,0xc
c000576d:	68 60 04 00 00       	push   0x460
c0005772:	e8 bb 2a 00 00       	call   c0008232 <ff_memalloc>
c0005777:	89 c6                	mov    esi,eax
c0005779:	83 c4 10             	add    esp,0x10
c000577c:	b8 11 00 00 00       	mov    eax,0x11
c0005781:	85 f6                	test   esi,esi
c0005783:	0f 84 27 01 00 00    	je     c00058b0 <f_sync+0x1d6>
c0005789:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000578d:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005793:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005796:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005799:	89 da                	mov    edx,ebx
c000579b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000579f:	e8 bc df ff ff       	call   c0003760 <load_obj_xdir>
c00057a4:	85 c0                	test   eax,eax
c00057a6:	0f 85 95 00 00 00    	jne    c0005841 <f_sync+0x167>
c00057ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057b0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00057b3:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00057b7:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00057ba:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00057bd:	83 ca 01             	or     edx,0x1
c00057c0:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00057c3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057c6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00057c9:	83 c0 34             	add    eax,0x34
c00057cc:	e8 f1 c2 ff ff       	call   c0001ac2 <st_dword>
c00057d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057d5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057d8:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057db:	83 c0 38             	add    eax,0x38
c00057de:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057e1:	e8 df c2 ff ff       	call   c0001ac5 <st_qword>
c00057e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00057ed:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00057f0:	83 c0 28             	add    eax,0x28
c00057f3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057f6:	e8 ca c2 ff ff       	call   c0001ac5 <st_qword>
c00057fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00057ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005802:	ba 00 00 21 50       	mov    edx,0x50210000
c0005807:	83 c0 0c             	add    eax,0xc
c000580a:	e8 b3 c2 ff ff       	call   c0001ac2 <st_dword>
c000580f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005813:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005816:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c000581a:	31 d2                	xor    edx,edx
c000581c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000581f:	83 c0 10             	add    eax,0x10
c0005822:	e8 9b c2 ff ff       	call   c0001ac2 <st_dword>
c0005827:	8d 44 24 14          	lea    eax,[esp+0x14]
c000582b:	e8 6f e1 ff ff       	call   c000399f <store_xdir>
c0005830:	85 c0                	test   eax,eax
c0005832:	75 0d                	jne    c0005841 <f_sync+0x167>
c0005834:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005838:	e8 f4 ea ff ff       	call   c0004331 <sync_fs>
c000583d:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005841:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005845:	83 ec 0c             	sub    esp,0xc
c0005848:	56                   	push   esi
c0005849:	e8 fa 29 00 00       	call   c0008248 <ff_memfree>
c000584e:	83 c4 10             	add    esp,0x10
c0005851:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005855:	eb 59                	jmp    c00058b0 <f_sync+0x1d6>
c0005857:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c000585a:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c000585d:	e8 c1 c9 ff ff       	call   c0002223 <move_window>
c0005862:	85 c0                	test   eax,eax
c0005864:	75 4a                	jne    c00058b0 <f_sync+0x1d6>
c0005866:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005869:	89 f2                	mov    edx,esi
c000586b:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c000586f:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005872:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005874:	e8 5f f3 ff ff       	call   c0004bd8 <st_clust.isra.1>
c0005879:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000587c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000587f:	e8 3e c2 ff ff       	call   c0001ac2 <st_dword>
c0005884:	8d 46 16             	lea    eax,[esi+0x16]
c0005887:	ba 00 00 21 50       	mov    edx,0x50210000
c000588c:	e8 31 c2 ff ff       	call   c0001ac2 <st_dword>
c0005891:	8d 46 12             	lea    eax,[esi+0x12]
c0005894:	31 d2                	xor    edx,edx
c0005896:	e8 23 c2 ff ff       	call   c0001abe <st_word>
c000589b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000589f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00058a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058a7:	e8 85 ea ff ff       	call   c0004331 <sync_fs>
c00058ac:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c00058b0:	83 c4 64             	add    esp,0x64
c00058b3:	5b                   	pop    ebx
c00058b4:	5e                   	pop    esi
c00058b5:	c3                   	ret    

c00058b6 <f_close>:
c00058b6:	53                   	push   ebx
c00058b7:	83 ec 24             	sub    esp,0x24
c00058ba:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00058be:	53                   	push   ebx
c00058bf:	e8 16 fe ff ff       	call   c00056da <f_sync>
c00058c4:	83 c4 10             	add    esp,0x10
c00058c7:	85 c0                	test   eax,eax
c00058c9:	75 15                	jne    c00058e0 <f_close+0x2a>
c00058cb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00058cf:	89 d8                	mov    eax,ebx
c00058d1:	e8 72 c8 ff ff       	call   c0002148 <validate>
c00058d6:	85 c0                	test   eax,eax
c00058d8:	75 06                	jne    c00058e0 <f_close+0x2a>
c00058da:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00058e0:	83 c4 18             	add    esp,0x18
c00058e3:	5b                   	pop    ebx
c00058e4:	c3                   	ret    

c00058e5 <f_lseek>:
c00058e5:	55                   	push   ebp
c00058e6:	57                   	push   edi
c00058e7:	56                   	push   esi
c00058e8:	53                   	push   ebx
c00058e9:	83 ec 3c             	sub    esp,0x3c
c00058ec:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00058f0:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00058f4:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c00058f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00058fb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00058ff:	89 d8                	mov    eax,ebx
c0005901:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005905:	e8 3e c8 ff ff       	call   c0002148 <validate>
c000590a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590e:	85 c0                	test   eax,eax
c0005910:	0f 85 28 04 00 00    	jne    c0005d3e <f_lseek+0x459>
c0005916:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c000591a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000591e:	85 c0                	test   eax,eax
c0005920:	0f 85 18 04 00 00    	jne    c0005d3e <f_lseek+0x459>
c0005926:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000592a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000592d:	74 0c                	je     c000593b <f_lseek+0x56>
c000592f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005932:	85 c0                	test   eax,eax
c0005934:	75 1f                	jne    c0005955 <f_lseek+0x70>
c0005936:	e9 8b 01 00 00       	jmp    c0005ac6 <f_lseek+0x1e1>
c000593b:	83 c9 ff             	or     ecx,0xffffffff
c000593e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005941:	89 d8                	mov    eax,ebx
c0005943:	e8 ee d3 ff ff       	call   c0002d36 <fill_last_frag>
c0005948:	85 c0                	test   eax,eax
c000594a:	74 e3                	je     c000592f <f_lseek+0x4a>
c000594c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005950:	e9 e9 03 00 00       	jmp    c0005d3e <f_lseek+0x459>
c0005955:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c000595a:	0f 85 ac 00 00 00    	jne    c0005a0c <f_lseek+0x127>
c0005960:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005964:	0f 85 a2 00 00 00    	jne    c0005a0c <f_lseek+0x127>
c000596a:	8d 78 04             	lea    edi,[eax+0x4]
c000596d:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005970:	8b 00                	mov    eax,DWORD PTR [eax]
c0005972:	be 02 00 00 00       	mov    esi,0x2
c0005977:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000597b:	85 ed                	test   ebp,ebp
c000597d:	74 73                	je     c00059f2 <f_lseek+0x10d>
c000597f:	89 e9                	mov    ecx,ebp
c0005981:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005988:	89 ca                	mov    edx,ecx
c000598a:	89 d8                	mov    eax,ebx
c000598c:	ff 04 24             	inc    DWORD PTR [esp]
c000598f:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005993:	e8 0d d4 ff ff       	call   c0002da5 <get_fat>
c0005998:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000599c:	83 f8 01             	cmp    eax,0x1
c000599f:	77 11                	ja     c00059b2 <f_lseek+0xcd>
c00059a1:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00059a5:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00059ad:	e9 8c 03 00 00       	jmp    c0005d3e <f_lseek+0x459>
c00059b2:	83 f8 ff             	cmp    eax,0xffffffff
c00059b5:	75 11                	jne    c00059c8 <f_lseek+0xe3>
c00059b7:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00059bb:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00059c3:	e9 76 03 00 00       	jmp    c0005d3e <f_lseek+0x459>
c00059c8:	8d 51 01             	lea    edx,[ecx+0x1]
c00059cb:	89 c1                	mov    ecx,eax
c00059cd:	39 c2                	cmp    edx,eax
c00059cf:	74 b7                	je     c0005988 <f_lseek+0xa3>
c00059d1:	83 c6 02             	add    esi,0x2
c00059d4:	39 74 24 18          	cmp    DWORD PTR [esp+0x18],esi
c00059d8:	72 0b                	jb     c00059e5 <f_lseek+0x100>
c00059da:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00059dd:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c00059e0:	89 0f                	mov    DWORD PTR [edi],ecx
c00059e2:	83 c7 08             	add    edi,0x8
c00059e5:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00059e9:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c00059ec:	76 04                	jbe    c00059f2 <f_lseek+0x10d>
c00059ee:	89 c5                	mov    ebp,eax
c00059f0:	eb 8d                	jmp    c000597f <f_lseek+0x9a>
c00059f2:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00059f5:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
c00059f9:	89 30                	mov    DWORD PTR [eax],esi
c00059fb:	0f 87 35 03 00 00    	ja     c0005d36 <f_lseek+0x451>
c0005a01:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005a07:	e9 32 03 00 00       	jmp    c0005d3e <f_lseek+0x459>
c0005a0c:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0005a0f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005a12:	39 34 24             	cmp    DWORD PTR [esp],esi
c0005a15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005a19:	19 f8                	sbb    eax,edi
c0005a1b:	73 07                	jae    c0005a24 <f_lseek+0x13f>
c0005a1d:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a20:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a24:	89 f8                	mov    eax,edi
c0005a26:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005a29:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005a2c:	09 f0                	or     eax,esi
c0005a2e:	0f 84 0a 03 00 00    	je     c0005d3e <f_lseek+0x459>
c0005a34:	89 f0                	mov    eax,esi
c0005a36:	89 fa                	mov    edx,edi
c0005a38:	83 c0 ff             	add    eax,0xffffffff
c0005a3b:	83 d2 ff             	adc    edx,0xffffffff
c0005a3e:	89 04 24             	mov    DWORD PTR [esp],eax
c0005a41:	89 d1                	mov    ecx,edx
c0005a43:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005a47:	89 c2                	mov    edx,eax
c0005a49:	89 d8                	mov    eax,ebx
c0005a4b:	e8 b6 c2 ff ff       	call   c0001d06 <clmt_clust>
c0005a50:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005a54:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005a57:	89 c2                	mov    edx,eax
c0005a59:	89 c8                	mov    eax,ecx
c0005a5b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005a5f:	e8 81 c2 ff ff       	call   c0001ce5 <clst2sect>
c0005a64:	89 d1                	mov    ecx,edx
c0005a66:	09 c1                	or     ecx,eax
c0005a68:	0f 84 33 ff ff ff    	je     c00059a1 <f_lseek+0xbc>
c0005a6e:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0005a74:	0f 84 c4 02 00 00    	je     c0005d3e <f_lseek+0x459>
c0005a7a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005a7e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005a82:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005a85:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005a89:	0f ac fe 09          	shrd   esi,edi,0x9
c0005a8d:	4d                   	dec    ebp
c0005a8e:	31 ff                	xor    edi,edi
c0005a90:	21 ee                	and    esi,ebp
c0005a92:	01 c6                	add    esi,eax
c0005a94:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005a97:	11 d7                	adc    edi,edx
c0005a99:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005a9c:	39 fa                	cmp    edx,edi
c0005a9e:	75 08                	jne    c0005aa8 <f_lseek+0x1c3>
c0005aa0:	39 f0                	cmp    eax,esi
c0005aa2:	0f 84 96 02 00 00    	je     c0005d3e <f_lseek+0x459>
c0005aa8:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005aab:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005aaf:	0f 89 58 02 00 00    	jns    c0005d0d <f_lseek+0x428>
c0005ab5:	83 ec 0c             	sub    esp,0xc
c0005ab8:	6a 01                	push   0x1
c0005aba:	52                   	push   edx
c0005abb:	50                   	push   eax
c0005abc:	55                   	push   ebp
c0005abd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005ac1:	e9 32 02 00 00       	jmp    c0005cf8 <f_lseek+0x413>
c0005ac6:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005aca:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005acd:	74 16                	je     c0005ae5 <f_lseek+0x200>
c0005acf:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005ad4:	76 0f                	jbe    c0005ae5 <f_lseek+0x200>
c0005ad6:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005add:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ae5:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ae8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005aeb:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005aee:	89 c7                	mov    edi,eax
c0005af0:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005af4:	73 0d                	jae    c0005b03 <f_lseek+0x21e>
c0005af6:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005afa:	75 07                	jne    c0005b03 <f_lseek+0x21e>
c0005afc:	89 14 24             	mov    DWORD PTR [esp],edx
c0005aff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005b03:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005b07:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005b0a:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005b0d:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005b14:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005b1b:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005b1e:	75 09                	jne    c0005b29 <f_lseek+0x244>
c0005b20:	31 f6                	xor    esi,esi
c0005b22:	31 ff                	xor    edi,edi
c0005b24:	e9 87 01 00 00       	jmp    c0005cb0 <f_lseek+0x3cb>
c0005b29:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005b2d:	c1 e1 09             	shl    ecx,0x9
c0005b30:	89 d7                	mov    edi,edx
c0005b32:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0005b36:	09 c7                	or     edi,eax
c0005b38:	74 6b                	je     c0005ba5 <f_lseek+0x2c0>
c0005b3a:	83 c0 ff             	add    eax,0xffffffff
c0005b3d:	89 cf                	mov    edi,ecx
c0005b3f:	83 d2 ff             	adc    edx,0xffffffff
c0005b42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005b46:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005b49:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0005b4d:	83 c0 ff             	add    eax,0xffffffff
c0005b50:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005b54:	83 d2 ff             	adc    edx,0xffffffff
c0005b57:	31 ed                	xor    ebp,ebp
c0005b59:	55                   	push   ebp
c0005b5a:	51                   	push   ecx
c0005b5b:	52                   	push   edx
c0005b5c:	50                   	push   eax
c0005b5d:	e8 aa 99 01 00       	call   c001f50c <__udivdi3>
c0005b62:	83 c4 10             	add    esp,0x10
c0005b65:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005b69:	89 d6                	mov    esi,edx
c0005b6b:	55                   	push   ebp
c0005b6c:	57                   	push   edi
c0005b6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005b75:	e8 92 99 01 00       	call   c001f50c <__udivdi3>
c0005b7a:	83 c4 10             	add    esp,0x10
c0005b7d:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0005b81:	19 d6                	sbb    esi,edx
c0005b83:	72 20                	jb     c0005ba5 <f_lseek+0x2c0>
c0005b85:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0005b89:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005b8d:	f7 d9                	neg    ecx
c0005b8f:	23 4c 24 10          	and    ecx,DWORD PTR [esp+0x10]
c0005b93:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005b96:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005b99:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005b9c:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005ba0:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005ba3:	eb 28                	jmp    c0005bcd <f_lseek+0x2e8>
c0005ba5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005ba8:	85 c0                	test   eax,eax
c0005baa:	75 1e                	jne    c0005bca <f_lseek+0x2e5>
c0005bac:	31 d2                	xor    edx,edx
c0005bae:	89 d8                	mov    eax,ebx
c0005bb0:	e8 de d4 ff ff       	call   c0003093 <create_chain>
c0005bb5:	83 f8 01             	cmp    eax,0x1
c0005bb8:	0f 84 e3 fd ff ff    	je     c00059a1 <f_lseek+0xbc>
c0005bbe:	83 f8 ff             	cmp    eax,0xffffffff
c0005bc1:	0f 84 f0 fd ff ff    	je     c00059b7 <f_lseek+0xd2>
c0005bc7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005bca:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005bcd:	85 c0                	test   eax,eax
c0005bcf:	0f 84 4b ff ff ff    	je     c0005b20 <f_lseek+0x23b>
c0005bd5:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0005bd9:	31 ff                	xor    edi,edi
c0005bdb:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005bde:	89 fd                	mov    ebp,edi
c0005be0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0005be4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005be7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005bea:	1b 6c 24 04          	sbb    ebp,DWORD PTR [esp+0x4]
c0005bee:	73 7d                	jae    c0005c6d <f_lseek+0x388>
c0005bf0:	29 34 24             	sub    DWORD PTR [esp],esi
c0005bf3:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005bf7:	01 d6                	add    esi,edx
c0005bf9:	11 cf                	adc    edi,ecx
c0005bfb:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005bfe:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0005c01:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0005c04:	f6 c2 02             	test   dl,0x2
c0005c07:	74 25                	je     c0005c2e <f_lseek+0x349>
c0005c09:	39 73 0c             	cmp    DWORD PTR [ebx+0xc],esi
c0005c0c:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005c0f:	19 f9                	sbb    ecx,edi
c0005c11:	73 0c                	jae    c0005c1f <f_lseek+0x33a>
c0005c13:	83 ca 40             	or     edx,0x40
c0005c16:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005c19:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005c1c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005c1f:	89 c2                	mov    edx,eax
c0005c21:	89 d8                	mov    eax,ebx
c0005c23:	e8 6b d4 ff ff       	call   c0003093 <create_chain>
c0005c28:	85 c0                	test   eax,eax
c0005c2a:	75 0b                	jne    c0005c37 <f_lseek+0x352>
c0005c2c:	eb 30                	jmp    c0005c5e <f_lseek+0x379>
c0005c2e:	89 c2                	mov    edx,eax
c0005c30:	89 d8                	mov    eax,ebx
c0005c32:	e8 6e d1 ff ff       	call   c0002da5 <get_fat>
c0005c37:	83 f8 ff             	cmp    eax,0xffffffff
c0005c3a:	0f 84 77 fd ff ff    	je     c00059b7 <f_lseek+0xd2>
c0005c40:	83 f8 01             	cmp    eax,0x1
c0005c43:	0f 86 58 fd ff ff    	jbe    c00059a1 <f_lseek+0xbc>
c0005c49:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c4d:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c50:	0f 86 4b fd ff ff    	jbe    c00059a1 <f_lseek+0xbc>
c0005c56:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c59:	e9 77 ff ff ff       	jmp    c0005bd5 <f_lseek+0x2f0>
c0005c5e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005c65:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005c6d:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005c70:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005c74:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005c77:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005c7a:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005c7d:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005c83:	0f 84 97 fe ff ff    	je     c0005b20 <f_lseek+0x23b>
c0005c89:	89 c2                	mov    edx,eax
c0005c8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005c8f:	e8 51 c0 ff ff       	call   c0001ce5 <clst2sect>
c0005c94:	89 d7                	mov    edi,edx
c0005c96:	09 c7                	or     edi,eax
c0005c98:	0f 84 03 fd ff ff    	je     c00059a1 <f_lseek+0xbc>
c0005c9e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005ca2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005ca5:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ca9:	c1 ef 09             	shr    edi,0x9
c0005cac:	01 c6                	add    esi,eax
c0005cae:	11 d7                	adc    edi,edx
c0005cb0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005cb3:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005cb6:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005cb9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005cbc:	19 d1                	sbb    ecx,edx
c0005cbe:	73 0a                	jae    c0005cca <f_lseek+0x3e5>
c0005cc0:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005cc4:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005cc7:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005cca:	a9 ff 01 00 00       	test   eax,0x1ff
c0005ccf:	74 6d                	je     c0005d3e <f_lseek+0x459>
c0005cd1:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cd4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cd7:	39 fa                	cmp    edx,edi
c0005cd9:	75 04                	jne    c0005cdf <f_lseek+0x3fa>
c0005cdb:	39 f0                	cmp    eax,esi
c0005cdd:	74 5f                	je     c0005d3e <f_lseek+0x459>
c0005cdf:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ce2:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ce6:	79 25                	jns    c0005d0d <f_lseek+0x428>
c0005ce8:	83 ec 0c             	sub    esp,0xc
c0005ceb:	6a 01                	push   0x1
c0005ced:	52                   	push   edx
c0005cee:	50                   	push   eax
c0005cef:	55                   	push   ebp
c0005cf0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005cf4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005cf8:	50                   	push   eax
c0005cf9:	e8 19 bd ff ff       	call   c0001a17 <disk_write>
c0005cfe:	83 c4 20             	add    esp,0x20
c0005d01:	85 c0                	test   eax,eax
c0005d03:	0f 85 ae fc ff ff    	jne    c00059b7 <f_lseek+0xd2>
c0005d09:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005d0d:	83 ec 0c             	sub    esp,0xc
c0005d10:	6a 01                	push   0x1
c0005d12:	57                   	push   edi
c0005d13:	56                   	push   esi
c0005d14:	55                   	push   ebp
c0005d15:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005d19:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005d1d:	50                   	push   eax
c0005d1e:	e8 de bc ff ff       	call   c0001a01 <disk_read>
c0005d23:	83 c4 20             	add    esp,0x20
c0005d26:	85 c0                	test   eax,eax
c0005d28:	0f 85 89 fc ff ff    	jne    c00059b7 <f_lseek+0xd2>
c0005d2e:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005d31:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005d34:	eb 08                	jmp    c0005d3e <f_lseek+0x459>
c0005d36:	c7 44 24 0c 11 00 00 00 	mov    DWORD PTR [esp+0xc],0x11
c0005d3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005d42:	83 c4 3c             	add    esp,0x3c
c0005d45:	5b                   	pop    ebx
c0005d46:	5e                   	pop    esi
c0005d47:	5f                   	pop    edi
c0005d48:	5d                   	pop    ebp
c0005d49:	c3                   	ret    

c0005d4a <f_opendir>:
c0005d4a:	56                   	push   esi
c0005d4b:	b8 09 00 00 00       	mov    eax,0x9
c0005d50:	53                   	push   ebx
c0005d51:	83 ec 24             	sub    esp,0x24
c0005d54:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005d58:	85 db                	test   ebx,ebx
c0005d5a:	0f 84 e6 00 00 00    	je     c0005e46 <f_opendir+0xfc>
c0005d60:	31 c9                	xor    ecx,ecx
c0005d62:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005d66:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005d6a:	e8 5f c7 ff ff       	call   c00024ce <mount_volume>
c0005d6f:	85 c0                	test   eax,eax
c0005d71:	0f 85 c9 00 00 00    	jne    c0005e40 <f_opendir+0xf6>
c0005d77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d7b:	83 ec 0c             	sub    esp,0xc
c0005d7e:	89 03                	mov    DWORD PTR [ebx],eax
c0005d80:	68 60 04 00 00       	push   0x460
c0005d85:	e8 a8 24 00 00       	call   c0008232 <ff_memalloc>
c0005d8a:	89 c6                	mov    esi,eax
c0005d8c:	83 c4 10             	add    esp,0x10
c0005d8f:	b8 11 00 00 00       	mov    eax,0x11
c0005d94:	85 f6                	test   esi,esi
c0005d96:	0f 84 aa 00 00 00    	je     c0005e46 <f_opendir+0xfc>
c0005d9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005da0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005da6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005da9:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005dac:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005db0:	89 d8                	mov    eax,ebx
c0005db2:	e8 83 ee ff ff       	call   c0004c3a <follow_path>
c0005db7:	85 c0                	test   eax,eax
c0005db9:	75 61                	jne    c0005e1c <f_opendir+0xd2>
c0005dbb:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c0005dbf:	78 46                	js     c0005e07 <f_opendir+0xbd>
c0005dc1:	b8 05 00 00 00       	mov    eax,0x5
c0005dc6:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0005dca:	74 50                	je     c0005e1c <f_opendir+0xd2>
c0005dcc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dd0:	8a 01                	mov    al,BYTE PTR [ecx]
c0005dd2:	3c 04                	cmp    al,0x4
c0005dd4:	75 26                	jne    c0005dfc <f_opendir+0xb2>
c0005dd6:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dd9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005ddc:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0005ddf:	30 d2                	xor    dl,dl
c0005de1:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0005de5:	09 c2                	or     edx,eax
c0005de7:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0005dea:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0005ded:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0005df0:	89 da                	mov    edx,ebx
c0005df2:	8d 41 10             	lea    eax,[ecx+0x10]
c0005df5:	e8 06 ee ff ff       	call   c0004c00 <init_alloc_info.isra.2>
c0005dfa:	eb 0b                	jmp    c0005e07 <f_opendir+0xbd>
c0005dfc:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0005dff:	e8 ab ed ff ff       	call   c0004baf <ld_clust.isra.0>
c0005e04:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e0b:	31 d2                	xor    edx,edx
c0005e0d:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005e11:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005e15:	89 d8                	mov    eax,ebx
c0005e17:	e8 7f d1 ff ff       	call   c0002f9b <dir_sdi>
c0005e1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005e20:	83 ec 0c             	sub    esp,0xc
c0005e23:	56                   	push   esi
c0005e24:	e8 1f 24 00 00       	call   c0008248 <ff_memfree>
c0005e29:	83 c4 10             	add    esp,0x10
c0005e2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e30:	83 f8 04             	cmp    eax,0x4
c0005e33:	74 06                	je     c0005e3b <f_opendir+0xf1>
c0005e35:	85 c0                	test   eax,eax
c0005e37:	74 0d                	je     c0005e46 <f_opendir+0xfc>
c0005e39:	eb 05                	jmp    c0005e40 <f_opendir+0xf6>
c0005e3b:	b8 05 00 00 00       	mov    eax,0x5
c0005e40:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e46:	83 c4 24             	add    esp,0x24
c0005e49:	5b                   	pop    ebx
c0005e4a:	5e                   	pop    esi
c0005e4b:	c3                   	ret    

c0005e4c <f_closedir>:
c0005e4c:	53                   	push   ebx
c0005e4d:	83 ec 18             	sub    esp,0x18
c0005e50:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0005e54:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005e58:	89 d8                	mov    eax,ebx
c0005e5a:	e8 e9 c2 ff ff       	call   c0002148 <validate>
c0005e5f:	85 c0                	test   eax,eax
c0005e61:	75 06                	jne    c0005e69 <f_closedir+0x1d>
c0005e63:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005e69:	83 c4 18             	add    esp,0x18
c0005e6c:	5b                   	pop    ebx
c0005e6d:	c3                   	ret    

c0005e6e <f_readdir>:
c0005e6e:	57                   	push   edi
c0005e6f:	56                   	push   esi
c0005e70:	53                   	push   ebx
c0005e71:	83 ec 20             	sub    esp,0x20
c0005e74:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005e78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005e7c:	89 d8                	mov    eax,ebx
c0005e7e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0005e82:	e8 c1 c2 ff ff       	call   c0002148 <validate>
c0005e87:	85 c0                	test   eax,eax
c0005e89:	75 77                	jne    c0005f02 <f_readdir+0x94>
c0005e8b:	85 ff                	test   edi,edi
c0005e8d:	75 0b                	jne    c0005e9a <f_readdir+0x2c>
c0005e8f:	31 d2                	xor    edx,edx
c0005e91:	89 d8                	mov    eax,ebx
c0005e93:	e8 03 d1 ff ff       	call   c0002f9b <dir_sdi>
c0005e98:	eb 68                	jmp    c0005f02 <f_readdir+0x94>
c0005e9a:	83 ec 0c             	sub    esp,0xc
c0005e9d:	68 60 04 00 00       	push   0x460
c0005ea2:	e8 8b 23 00 00       	call   c0008232 <ff_memalloc>
c0005ea7:	89 c6                	mov    esi,eax
c0005ea9:	83 c4 10             	add    esp,0x10
c0005eac:	b8 11 00 00 00       	mov    eax,0x11
c0005eb1:	85 f6                	test   esi,esi
c0005eb3:	74 4d                	je     c0005f02 <f_readdir+0x94>
c0005eb5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005eb9:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005ebf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005ec5:	31 d2                	xor    edx,edx
c0005ec7:	89 d8                	mov    eax,ebx
c0005ec9:	e8 df d8 ff ff       	call   c00037ad <dir_read>
c0005ece:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0005ed3:	75 19                	jne    c0005eee <f_readdir+0x80>
c0005ed5:	89 fa                	mov    edx,edi
c0005ed7:	89 d8                	mov    eax,ebx
c0005ed9:	e8 d0 ea ff ff       	call   c00049ae <get_fileinfo>
c0005ede:	31 d2                	xor    edx,edx
c0005ee0:	89 d8                	mov    eax,ebx
c0005ee2:	e8 0e d6 ff ff       	call   c00034f5 <dir_next>
c0005ee7:	83 f8 04             	cmp    eax,0x4
c0005eea:	75 02                	jne    c0005eee <f_readdir+0x80>
c0005eec:	31 c0                	xor    eax,eax
c0005eee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005ef2:	83 ec 0c             	sub    esp,0xc
c0005ef5:	56                   	push   esi
c0005ef6:	e8 4d 23 00 00       	call   c0008248 <ff_memfree>
c0005efb:	83 c4 10             	add    esp,0x10
c0005efe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f02:	83 c4 20             	add    esp,0x20
c0005f05:	5b                   	pop    ebx
c0005f06:	5e                   	pop    esi
c0005f07:	5f                   	pop    edi
c0005f08:	c3                   	ret    

c0005f09 <f_stat>:
c0005f09:	57                   	push   edi
c0005f0a:	31 c9                	xor    ecx,ecx
c0005f0c:	56                   	push   esi
c0005f0d:	53                   	push   ebx
c0005f0e:	83 ec 50             	sub    esp,0x50
c0005f11:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005f15:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005f19:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005f1d:	e8 ac c5 ff ff       	call   c00024ce <mount_volume>
c0005f22:	89 c3                	mov    ebx,eax
c0005f24:	85 c0                	test   eax,eax
c0005f26:	75 67                	jne    c0005f8f <f_stat+0x86>
c0005f28:	83 ec 0c             	sub    esp,0xc
c0005f2b:	bb 11 00 00 00       	mov    ebx,0x11
c0005f30:	68 60 04 00 00       	push   0x460
c0005f35:	e8 f8 22 00 00       	call   c0008232 <ff_memalloc>
c0005f3a:	83 c4 10             	add    esp,0x10
c0005f3d:	89 c6                	mov    esi,eax
c0005f3f:	85 c0                	test   eax,eax
c0005f41:	74 4c                	je     c0005f8f <f_stat+0x86>
c0005f43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f47:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0005f4d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005f50:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0005f53:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005f57:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f5b:	e8 da ec ff ff       	call   c0004c3a <follow_path>
c0005f60:	89 c3                	mov    ebx,eax
c0005f62:	85 c0                	test   eax,eax
c0005f64:	75 1d                	jne    c0005f83 <f_stat+0x7a>
c0005f66:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0005f6b:	78 11                	js     c0005f7e <f_stat+0x75>
c0005f6d:	85 ff                	test   edi,edi
c0005f6f:	74 12                	je     c0005f83 <f_stat+0x7a>
c0005f71:	89 fa                	mov    edx,edi
c0005f73:	8d 44 24 04          	lea    eax,[esp+0x4]
c0005f77:	e8 32 ea ff ff       	call   c00049ae <get_fileinfo>
c0005f7c:	eb 05                	jmp    c0005f83 <f_stat+0x7a>
c0005f7e:	bb 06 00 00 00       	mov    ebx,0x6
c0005f83:	83 ec 0c             	sub    esp,0xc
c0005f86:	56                   	push   esi
c0005f87:	e8 bc 22 00 00       	call   c0008248 <ff_memfree>
c0005f8c:	83 c4 10             	add    esp,0x10
c0005f8f:	83 c4 50             	add    esp,0x50
c0005f92:	89 d8                	mov    eax,ebx
c0005f94:	5b                   	pop    ebx
c0005f95:	5e                   	pop    esi
c0005f96:	5f                   	pop    edi
c0005f97:	c3                   	ret    

c0005f98 <f_getfree>:
c0005f98:	55                   	push   ebp
c0005f99:	31 c9                	xor    ecx,ecx
c0005f9b:	57                   	push   edi
c0005f9c:	56                   	push   esi
c0005f9d:	53                   	push   ebx
c0005f9e:	83 ec 5c             	sub    esp,0x5c
c0005fa1:	8d 54 24 24          	lea    edx,[esp+0x24]
c0005fa5:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005fa9:	e8 20 c5 ff ff       	call   c00024ce <mount_volume>
c0005fae:	89 c5                	mov    ebp,eax
c0005fb0:	85 c0                	test   eax,eax
c0005fb2:	0f 85 be 01 00 00    	jne    c0006176 <f_getfree+0x1de>
c0005fb8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0005fbc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005fc0:	89 02                	mov    DWORD PTR [edx],eax
c0005fc2:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0005fc5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0005fc8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0005fcc:	8d 73 fe             	lea    esi,[ebx-0x2]
c0005fcf:	39 f2                	cmp    edx,esi
c0005fd1:	77 0b                	ja     c0005fde <f_getfree+0x46>
c0005fd3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0005fd7:	89 10                	mov    DWORD PTR [eax],edx
c0005fd9:	e9 98 01 00 00       	jmp    c0006176 <f_getfree+0x1de>
c0005fde:	8a 10                	mov    dl,BYTE PTR [eax]
c0005fe0:	80 fa 01             	cmp    dl,0x1
c0005fe3:	75 3a                	jne    c000601f <f_getfree+0x87>
c0005fe5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005fe9:	be 02 00 00 00       	mov    esi,0x2
c0005fee:	31 db                	xor    ebx,ebx
c0005ff0:	89 f2                	mov    edx,esi
c0005ff2:	8d 44 24 28          	lea    eax,[esp+0x28]
c0005ff6:	e8 aa cd ff ff       	call   c0002da5 <get_fat>
c0005ffb:	83 f8 ff             	cmp    eax,0xffffffff
c0005ffe:	0f 84 51 01 00 00    	je     c0006155 <f_getfree+0x1bd>
c0006004:	83 f8 01             	cmp    eax,0x1
c0006007:	0f 84 4f 01 00 00    	je     c000615c <f_getfree+0x1c4>
c000600d:	83 d3 00             	adc    ebx,0x0
c0006010:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006014:	46                   	inc    esi
c0006015:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006018:	77 d6                	ja     c0005ff0 <f_getfree+0x58>
c000601a:	e9 46 01 00 00       	jmp    c0006165 <f_getfree+0x1cd>
c000601f:	80 fa 04             	cmp    dl,0x4
c0006022:	0f 85 94 00 00 00    	jne    c00060bc <f_getfree+0x124>
c0006028:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000602b:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c000602e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006032:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006036:	31 ff                	xor    edi,edi
c0006038:	31 db                	xor    ebx,ebx
c000603a:	85 ff                	test   edi,edi
c000603c:	75 3f                	jne    c000607d <f_getfree+0xe5>
c000603e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006042:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006046:	83 c0 01             	add    eax,0x1
c0006049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000604d:	83 d2 00             	adc    edx,0x0
c0006050:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006054:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006058:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000605c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006060:	e8 be c1 ff ff       	call   c0002223 <move_window>
c0006065:	85 c0                	test   eax,eax
c0006067:	0f 85 f6 00 00 00    	jne    c0006163 <f_getfree+0x1cb>
c000606d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006071:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0006075:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006079:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000607d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006081:	8a 44 38 54          	mov    al,BYTE PTR [eax+edi*1+0x54]
c0006085:	88 c2                	mov    dl,al
c0006087:	b8 08 00 00 00       	mov    eax,0x8
c000608c:	29 f0                	sub    eax,esi
c000608e:	89 c1                	mov    ecx,eax
c0006090:	01 f1                	add    ecx,esi
c0006092:	74 18                	je     c00060ac <f_getfree+0x114>
c0006094:	85 f6                	test   esi,esi
c0006096:	74 14                	je     c00060ac <f_getfree+0x114>
c0006098:	88 d1                	mov    cl,dl
c000609a:	83 e1 01             	and    ecx,0x1
c000609d:	80 f9 01             	cmp    cl,0x1
c00060a0:	88 d1                	mov    cl,dl
c00060a2:	83 d3 00             	adc    ebx,0x0
c00060a5:	4e                   	dec    esi
c00060a6:	d0 e9                	shr    cl,1
c00060a8:	88 ca                	mov    dl,cl
c00060aa:	eb e2                	jmp    c000608e <f_getfree+0xf6>
c00060ac:	47                   	inc    edi
c00060ad:	81 e7 ff 01 00 00    	and    edi,0x1ff
c00060b3:	85 f6                	test   esi,esi
c00060b5:	75 83                	jne    c000603a <f_getfree+0xa2>
c00060b7:	e9 a9 00 00 00       	jmp    c0006165 <f_getfree+0x1cd>
c00060bc:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00060bf:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00060c2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00060ca:	31 db                	xor    ebx,ebx
c00060cc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00060d1:	75 1b                	jne    c00060ee <f_getfree+0x156>
c00060d3:	89 d6                	mov    esi,edx
c00060d5:	89 cf                	mov    edi,ecx
c00060d7:	83 c6 01             	add    esi,0x1
c00060da:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060de:	83 d7 00             	adc    edi,0x0
c00060e1:	e8 3d c1 ff ff       	call   c0002223 <move_window>
c00060e6:	85 c0                	test   eax,eax
c00060e8:	75 79                	jne    c0006163 <f_getfree+0x1cb>
c00060ea:	89 f2                	mov    edx,esi
c00060ec:	89 f9                	mov    ecx,edi
c00060ee:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00060f2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00060f6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00060fa:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00060fe:	8d 44 38 54          	lea    eax,[eax+edi*1+0x54]
c0006102:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006106:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006109:	75 15                	jne    c0006120 <f_getfree+0x188>
c000610b:	e8 3c b9 ff ff       	call   c0001a4c <ld_word>
c0006110:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0006114:	66 83 f8 01          	cmp    ax,0x1
c0006118:	83 d3 00             	adc    ebx,0x0
c000611b:	83 c6 02             	add    esi,0x2
c000611e:	eb 17                	jmp    c0006137 <f_getfree+0x19f>
c0006120:	e8 34 b9 ff ff       	call   c0001a59 <ld_dword>
c0006125:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0006129:	25 ff ff ff 0f       	and    eax,0xfffffff
c000612e:	83 f8 01             	cmp    eax,0x1
c0006131:	83 d3 00             	adc    ebx,0x0
c0006134:	83 c6 04             	add    esi,0x4
c0006137:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000613d:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c0006141:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006145:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006149:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000614d:	0f 85 79 ff ff ff    	jne    c00060cc <f_getfree+0x134>
c0006153:	eb 10                	jmp    c0006165 <f_getfree+0x1cd>
c0006155:	bd 01 00 00 00       	mov    ebp,0x1
c000615a:	eb 09                	jmp    c0006165 <f_getfree+0x1cd>
c000615c:	bd 02 00 00 00       	mov    ebp,0x2
c0006161:	eb 02                	jmp    c0006165 <f_getfree+0x1cd>
c0006163:	89 c5                	mov    ebp,eax
c0006165:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006169:	89 18                	mov    DWORD PTR [eax],ebx
c000616b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000616f:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c0006173:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c0006176:	83 c4 5c             	add    esp,0x5c
c0006179:	89 e8                	mov    eax,ebp
c000617b:	5b                   	pop    ebx
c000617c:	5e                   	pop    esi
c000617d:	5f                   	pop    edi
c000617e:	5d                   	pop    ebp
c000617f:	c3                   	ret    

c0006180 <f_truncate>:
c0006180:	56                   	push   esi
c0006181:	53                   	push   ebx
c0006182:	83 ec 14             	sub    esp,0x14
c0006185:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006189:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000618d:	89 d8                	mov    eax,ebx
c000618f:	e8 b4 bf ff ff       	call   c0002148 <validate>
c0006194:	89 c6                	mov    esi,eax
c0006196:	85 c0                	test   eax,eax
c0006198:	0f 85 d2 00 00 00    	jne    c0006270 <f_truncate+0xf0>
c000619e:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00061a2:	85 f6                	test   esi,esi
c00061a4:	0f 85 c6 00 00 00    	jne    c0006270 <f_truncate+0xf0>
c00061aa:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00061ae:	0f 84 b7 00 00 00    	je     c000626b <f_truncate+0xeb>
c00061b4:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00061b7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00061ba:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00061bd:	89 d1                	mov    ecx,edx
c00061bf:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c00061c2:	0f 83 a8 00 00 00    	jae    c0006270 <f_truncate+0xf0>
c00061c8:	09 c2                	or     edx,eax
c00061ca:	75 15                	jne    c00061e1 <f_truncate+0x61>
c00061cc:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00061cf:	31 c9                	xor    ecx,ecx
c00061d1:	89 d8                	mov    eax,ebx
c00061d3:	e8 bc d0 ff ff       	call   c0003294 <remove_chain>
c00061d8:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00061df:	eb 35                	jmp    c0006216 <f_truncate+0x96>
c00061e1:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00061e4:	89 d8                	mov    eax,ebx
c00061e6:	e8 ba cb ff ff       	call   c0002da5 <get_fat>
c00061eb:	89 c2                	mov    edx,eax
c00061ed:	b8 01 00 00 00       	mov    eax,0x1
c00061f2:	83 fa ff             	cmp    edx,0xffffffff
c00061f5:	74 1f                	je     c0006216 <f_truncate+0x96>
c00061f7:	b8 02 00 00 00       	mov    eax,0x2
c00061fc:	83 fa 01             	cmp    edx,0x1
c00061ff:	74 15                	je     c0006216 <f_truncate+0x96>
c0006201:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006205:	31 c0                	xor    eax,eax
c0006207:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000620a:	76 0a                	jbe    c0006216 <f_truncate+0x96>
c000620c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000620f:	89 d8                	mov    eax,ebx
c0006211:	e8 7e d0 ff ff       	call   c0003294 <remove_chain>
c0006216:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0006219:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000621c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000621f:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006222:	83 ca 40             	or     edx,0x40
c0006225:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006228:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000622b:	85 c0                	test   eax,eax
c000622d:	75 35                	jne    c0006264 <f_truncate+0xe4>
c000622f:	84 d2                	test   dl,dl
c0006231:	79 3d                	jns    c0006270 <f_truncate+0xf0>
c0006233:	83 ec 0c             	sub    esp,0xc
c0006236:	8d 43 50             	lea    eax,[ebx+0x50]
c0006239:	6a 01                	push   0x1
c000623b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000623e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006241:	50                   	push   eax
c0006242:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006246:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000624a:	50                   	push   eax
c000624b:	e8 c7 b7 ff ff       	call   c0001a17 <disk_write>
c0006250:	83 c4 20             	add    esp,0x20
c0006253:	85 c0                	test   eax,eax
c0006255:	75 08                	jne    c000625f <f_truncate+0xdf>
c0006257:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000625b:	31 f6                	xor    esi,esi
c000625d:	eb 11                	jmp    c0006270 <f_truncate+0xf0>
c000625f:	b8 01 00 00 00       	mov    eax,0x1
c0006264:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c0006267:	89 c6                	mov    esi,eax
c0006269:	eb 05                	jmp    c0006270 <f_truncate+0xf0>
c000626b:	be 07 00 00 00       	mov    esi,0x7
c0006270:	83 c4 14             	add    esp,0x14
c0006273:	89 f0                	mov    eax,esi
c0006275:	5b                   	pop    ebx
c0006276:	5e                   	pop    esi
c0006277:	c3                   	ret    

c0006278 <f_unlink>:
c0006278:	56                   	push   esi
c0006279:	b9 02 00 00 00       	mov    ecx,0x2
c000627e:	53                   	push   ebx
c000627f:	81 ec e4 00 00 00    	sub    esp,0xe4
c0006285:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006289:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c0006290:	e8 39 c2 ff ff       	call   c00024ce <mount_volume>
c0006295:	85 c0                	test   eax,eax
c0006297:	0f 85 53 01 00 00    	jne    c00063f0 <f_unlink+0x178>
c000629d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062a1:	83 ec 0c             	sub    esp,0xc
c00062a4:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00062a8:	68 60 04 00 00       	push   0x460
c00062ad:	e8 80 1f 00 00       	call   c0008232 <ff_memalloc>
c00062b2:	89 c3                	mov    ebx,eax
c00062b4:	83 c4 10             	add    esp,0x10
c00062b7:	b8 11 00 00 00       	mov    eax,0x11
c00062bc:	85 db                	test   ebx,ebx
c00062be:	0f 84 2c 01 00 00    	je     c00063f0 <f_unlink+0x178>
c00062c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00062ce:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00062d1:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00062d4:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c00062db:	8d 44 24 48          	lea    eax,[esp+0x48]
c00062df:	e8 56 e9 ff ff       	call   c0004c3a <follow_path>
c00062e4:	85 c0                	test   eax,eax
c00062e6:	0f 85 f0 00 00 00    	jne    c00063dc <f_unlink+0x164>
c00062ec:	b8 06 00 00 00       	mov    eax,0x6
c00062f1:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c00062f9:	0f 88 dd 00 00 00    	js     c00063dc <f_unlink+0x164>
c00062ff:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006304:	74 0a                	je     c0006310 <f_unlink+0x98>
c0006306:	b8 07 00 00 00       	mov    eax,0x7
c000630b:	e9 cc 00 00 00       	jmp    c00063dc <f_unlink+0x164>
c0006310:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006314:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0006318:	8a 02                	mov    al,BYTE PTR [edx]
c000631a:	3c 04                	cmp    al,0x4
c000631c:	75 12                	jne    c0006330 <f_unlink+0xb8>
c000631e:	8d 42 10             	lea    eax,[edx+0x10]
c0006321:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006325:	e8 d6 e8 ff ff       	call   c0004c00 <init_alloc_info.isra.2>
c000632a:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000632e:	eb 0e                	jmp    c000633e <f_unlink+0xc6>
c0006330:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006337:	e8 73 e8 ff ff       	call   c0004baf <ld_clust.isra.0>
c000633c:	89 c6                	mov    esi,eax
c000633e:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006343:	75 20                	jne    c0006365 <f_unlink+0xed>
c0006345:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006349:	e8 d6 d6 ff ff       	call   c0003a24 <dir_remove>
c000634e:	85 c0                	test   eax,eax
c0006350:	75 7d                	jne    c00063cf <f_unlink+0x157>
c0006352:	85 f6                	test   esi,esi
c0006354:	74 79                	je     c00063cf <f_unlink+0x157>
c0006356:	31 c9                	xor    ecx,ecx
c0006358:	89 f2                	mov    edx,esi
c000635a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000635e:	e8 31 cf ff ff       	call   c0003294 <remove_chain>
c0006363:	eb 6a                	jmp    c00063cf <f_unlink+0x157>
c0006365:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006369:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c0006370:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c0006377:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000637a:	75 21                	jne    c000639d <f_unlink+0x125>
c000637c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0006380:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0006384:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c000638b:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c000638f:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c0006396:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c000639d:	31 d2                	xor    edx,edx
c000639f:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063a6:	e8 f0 cb ff ff       	call   c0002f9b <dir_sdi>
c00063ab:	85 c0                	test   eax,eax
c00063ad:	75 2d                	jne    c00063dc <f_unlink+0x164>
c00063af:	31 d2                	xor    edx,edx
c00063b1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00063b8:	e8 f0 d3 ff ff       	call   c00037ad <dir_read>
c00063bd:	85 c0                	test   eax,eax
c00063bf:	0f 84 41 ff ff ff    	je     c0006306 <f_unlink+0x8e>
c00063c5:	83 f8 04             	cmp    eax,0x4
c00063c8:	75 12                	jne    c00063dc <f_unlink+0x164>
c00063ca:	e9 76 ff ff ff       	jmp    c0006345 <f_unlink+0xcd>
c00063cf:	85 c0                	test   eax,eax
c00063d1:	75 09                	jne    c00063dc <f_unlink+0x164>
c00063d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00063d7:	e8 55 df ff ff       	call   c0004331 <sync_fs>
c00063dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063e0:	83 ec 0c             	sub    esp,0xc
c00063e3:	53                   	push   ebx
c00063e4:	e8 5f 1e 00 00       	call   c0008248 <ff_memfree>
c00063e9:	83 c4 10             	add    esp,0x10
c00063ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063f0:	81 c4 e4 00 00 00    	add    esp,0xe4
c00063f6:	5b                   	pop    ebx
c00063f7:	5e                   	pop    esi
c00063f8:	c3                   	ret    

c00063f9 <f_mkdir>:
c00063f9:	57                   	push   edi
c00063fa:	b9 02 00 00 00       	mov    ecx,0x2
c00063ff:	56                   	push   esi
c0006400:	53                   	push   ebx
c0006401:	83 c4 80             	add    esp,0xffffff80
c0006404:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006408:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c000640f:	e8 ba c0 ff ff       	call   c00024ce <mount_volume>
c0006414:	89 c3                	mov    ebx,eax
c0006416:	85 c0                	test   eax,eax
c0006418:	0f 85 fe 01 00 00    	jne    c000661c <f_mkdir+0x223>
c000641e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006422:	83 ec 0c             	sub    esp,0xc
c0006425:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0006429:	bb 11 00 00 00       	mov    ebx,0x11
c000642e:	68 60 04 00 00       	push   0x460
c0006433:	e8 fa 1d 00 00       	call   c0008232 <ff_memalloc>
c0006438:	83 c4 10             	add    esp,0x10
c000643b:	89 c7                	mov    edi,eax
c000643d:	85 c0                	test   eax,eax
c000643f:	0f 84 d7 01 00 00    	je     c000661c <f_mkdir+0x223>
c0006445:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006449:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c000644f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006452:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006455:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c000645c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006460:	e8 d5 e7 ff ff       	call   c0004c3a <follow_path>
c0006465:	89 c3                	mov    ebx,eax
c0006467:	85 c0                	test   eax,eax
c0006469:	74 3e                	je     c00064a9 <f_mkdir+0xb0>
c000646b:	83 f8 04             	cmp    eax,0x4
c000646e:	75 3e                	jne    c00064ae <f_mkdir+0xb5>
c0006470:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006474:	31 d2                	xor    edx,edx
c0006476:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000647a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000647e:	e8 10 cc ff ff       	call   c0003093 <create_chain>
c0006483:	89 c6                	mov    esi,eax
c0006485:	85 c0                	test   eax,eax
c0006487:	74 0c                	je     c0006495 <f_mkdir+0x9c>
c0006489:	bb 02 00 00 00       	mov    ebx,0x2
c000648e:	83 f8 01             	cmp    eax,0x1
c0006491:	74 07                	je     c000649a <f_mkdir+0xa1>
c0006493:	eb 2a                	jmp    c00064bf <f_mkdir+0xc6>
c0006495:	bb 07 00 00 00       	mov    ebx,0x7
c000649a:	31 c9                	xor    ecx,ecx
c000649c:	89 f2                	mov    edx,esi
c000649e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00064a2:	e8 ed cd ff ff       	call   c0003294 <remove_chain>
c00064a7:	eb 05                	jmp    c00064ae <f_mkdir+0xb5>
c00064a9:	bb 08 00 00 00       	mov    ebx,0x8
c00064ae:	83 ec 0c             	sub    esp,0xc
c00064b1:	57                   	push   edi
c00064b2:	e8 91 1d 00 00       	call   c0008248 <ff_memfree>
c00064b7:	83 c4 10             	add    esp,0x10
c00064ba:	e9 5d 01 00 00       	jmp    c000661c <f_mkdir+0x223>
c00064bf:	bb 01 00 00 00       	mov    ebx,0x1
c00064c4:	83 f8 ff             	cmp    eax,0xffffffff
c00064c7:	74 d1                	je     c000649a <f_mkdir+0xa1>
c00064c9:	89 f2                	mov    edx,esi
c00064cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064cf:	e8 08 cf ff ff       	call   c00033dc <dir_clear>
c00064d4:	89 c3                	mov    ebx,eax
c00064d6:	85 c0                	test   eax,eax
c00064d8:	75 c0                	jne    c000649a <f_mkdir+0xa1>
c00064da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064de:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00064e1:	74 69                	je     c000654c <f_mkdir+0x153>
c00064e3:	b9 0b 00 00 00       	mov    ecx,0xb
c00064e8:	83 c0 54             	add    eax,0x54
c00064eb:	ba 20 00 00 00       	mov    edx,0x20
c00064f0:	e8 eb b5 ff ff       	call   c0001ae0 <mem_set>
c00064f5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00064f9:	83 c0 6a             	add    eax,0x6a
c00064fc:	c6 40 ea 2e          	mov    BYTE PTR [eax-0x16],0x2e
c0006500:	c6 40 f5 10          	mov    BYTE PTR [eax-0xb],0x10
c0006504:	ba 00 00 21 50       	mov    edx,0x50210000
c0006509:	e8 b4 b5 ff ff       	call   c0001ac2 <st_dword>
c000650e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006512:	89 f1                	mov    ecx,esi
c0006514:	8d 50 54             	lea    edx,[eax+0x54]
c0006517:	e8 bc e6 ff ff       	call   c0004bd8 <st_clust.isra.1>
c000651c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006520:	b9 20 00 00 00       	mov    ecx,0x20
c0006525:	8d 50 54             	lea    edx,[eax+0x54]
c0006528:	83 c0 74             	add    eax,0x74
c000652b:	e8 9b b5 ff ff       	call   c0001acb <mem_cpy>
c0006530:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006534:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0006538:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c000653c:	8d 50 74             	lea    edx,[eax+0x74]
c000653f:	e8 94 e6 ff ff       	call   c0004bd8 <st_clust.isra.1>
c0006544:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006548:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000654c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006550:	e8 59 db ff ff       	call   c00040ae <dir_register>
c0006555:	89 c3                	mov    ebx,eax
c0006557:	85 c0                	test   eax,eax
c0006559:	0f 85 3b ff ff ff    	jne    c000649a <f_mkdir+0xa1>
c000655f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006563:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006566:	75 74                	jne    c00065dc <f_mkdir+0x1e3>
c0006568:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000656b:	ba 00 00 21 50       	mov    edx,0x50210000
c0006570:	83 c0 0c             	add    eax,0xc
c0006573:	e8 4a b5 ff ff       	call   c0001ac2 <st_dword>
c0006578:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000657c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000657f:	89 f2                	mov    edx,esi
c0006581:	83 c0 34             	add    eax,0x34
c0006584:	e8 39 b5 ff ff       	call   c0001ac2 <st_dword>
c0006589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000658d:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0006591:	c1 e2 09             	shl    edx,0x9
c0006594:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006597:	83 c0 38             	add    eax,0x38
c000659a:	e8 23 b5 ff ff       	call   c0001ac2 <st_dword>
c000659f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065a3:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00065a7:	c1 e2 09             	shl    edx,0x9
c00065aa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065ad:	83 c0 28             	add    eax,0x28
c00065b0:	e8 0d b5 ff ff       	call   c0001ac2 <st_dword>
c00065b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065b9:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00065bc:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c00065c0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00065c3:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c00065c7:	8d 44 24 34          	lea    eax,[esp+0x34]
c00065cb:	e8 cf d3 ff ff       	call   c000399f <store_xdir>
c00065d0:	89 c3                	mov    ebx,eax
c00065d2:	85 c0                	test   eax,eax
c00065d4:	0f 85 d4 fe ff ff    	jne    c00064ae <f_mkdir+0xb5>
c00065da:	eb 30                	jmp    c000660c <f_mkdir+0x213>
c00065dc:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00065e0:	ba 00 00 21 50       	mov    edx,0x50210000
c00065e5:	83 c0 16             	add    eax,0x16
c00065e8:	e8 d5 b4 ff ff       	call   c0001ac2 <st_dword>
c00065ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00065f1:	89 f1                	mov    ecx,esi
c00065f3:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c00065f7:	e8 dc e5 ff ff       	call   c0004bd8 <st_clust.isra.1>
c00065fc:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006600:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006604:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006608:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000660c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006610:	e8 1c dd ff ff       	call   c0004331 <sync_fs>
c0006615:	89 c3                	mov    ebx,eax
c0006617:	e9 92 fe ff ff       	jmp    c00064ae <f_mkdir+0xb5>
c000661c:	83 ec 80             	sub    esp,0xffffff80
c000661f:	89 d8                	mov    eax,ebx
c0006621:	5b                   	pop    ebx
c0006622:	5e                   	pop    esi
c0006623:	5f                   	pop    edi
c0006624:	c3                   	ret    

c0006625 <f_rename>:
c0006625:	55                   	push   ebp
c0006626:	57                   	push   edi
c0006627:	56                   	push   esi
c0006628:	53                   	push   ebx
c0006629:	81 ec fc 00 00 00    	sub    esp,0xfc
c000662f:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0006636:	e8 f3 b9 ff ff       	call   c000202e <get_ldnumber>
c000663b:	b9 02 00 00 00       	mov    ecx,0x2
c0006640:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006644:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c000664b:	e8 7e be ff ff       	call   c00024ce <mount_volume>
c0006650:	85 c0                	test   eax,eax
c0006652:	0f 85 b5 02 00 00    	jne    c000690d <f_rename+0x2e8>
c0006658:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000665c:	83 ec 0c             	sub    esp,0xc
c000665f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0006663:	68 60 04 00 00       	push   0x460
c0006668:	e8 c5 1b 00 00       	call   c0008232 <ff_memalloc>
c000666d:	89 c3                	mov    ebx,eax
c000666f:	83 c4 10             	add    esp,0x10
c0006672:	b8 11 00 00 00       	mov    eax,0x11
c0006677:	85 db                	test   ebx,ebx
c0006679:	0f 84 8e 02 00 00    	je     c000690d <f_rename+0x2e8>
c000667f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006683:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006689:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000668c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c000668f:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c0006696:	8d 44 24 58          	lea    eax,[esp+0x58]
c000669a:	e8 9b e5 ff ff       	call   c0004c3a <follow_path>
c000669f:	85 c0                	test   eax,eax
c00066a1:	0f 85 52 02 00 00    	jne    c00068f9 <f_rename+0x2d4>
c00066a7:	b8 06 00 00 00       	mov    eax,0x6
c00066ac:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00066b4:	0f 85 3f 02 00 00    	jne    c00068f9 <f_rename+0x2d4>
c00066ba:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066be:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00066c1:	0f 85 05 01 00 00    	jne    c00067cc <f_rename+0x1a7>
c00066c7:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00066ca:	b9 40 00 00 00       	mov    ecx,0x40
c00066cf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00066d3:	e8 f3 b3 ff ff       	call   c0001acb <mem_cpy>
c00066d8:	b9 4c 00 00 00       	mov    ecx,0x4c
c00066dd:	8d 54 24 58          	lea    edx,[esp+0x58]
c00066e1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066e8:	e8 de b3 ff ff       	call   c0001acb <mem_cpy>
c00066ed:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00066f4:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00066fb:	e8 3a e5 ff ff       	call   c0004c3a <follow_path>
c0006700:	85 c0                	test   eax,eax
c0006702:	75 29                	jne    c000672d <f_rename+0x108>
c0006704:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006708:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c000670f:	74 0a                	je     c000671b <f_rename+0xf6>
c0006711:	b8 08 00 00 00       	mov    eax,0x8
c0006716:	e9 de 01 00 00       	jmp    c00068f9 <f_rename+0x2d4>
c000671b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006722:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006729:	75 e6                	jne    c0006711 <f_rename+0xec>
c000672b:	eb 09                	jmp    c0006736 <f_rename+0x111>
c000672d:	83 f8 04             	cmp    eax,0x4
c0006730:	0f 85 c3 01 00 00    	jne    c00068f9 <f_rename+0x2d4>
c0006736:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000673d:	e8 6c d9 ff ff       	call   c00040ae <dir_register>
c0006742:	85 c0                	test   eax,eax
c0006744:	0f 85 af 01 00 00    	jne    c00068f9 <f_rename+0x2d4>
c000674a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000674e:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006751:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006754:	89 c5                	mov    ebp,eax
c0006756:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c0006759:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000675d:	8d 46 24             	lea    eax,[esi+0x24]
c0006760:	e8 e7 b2 ff ff       	call   c0001a4c <ld_word>
c0006765:	b9 40 00 00 00       	mov    ecx,0x40
c000676a:	89 c7                	mov    edi,eax
c000676c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0006770:	89 f0                	mov    eax,esi
c0006772:	e8 54 b3 ff ff       	call   c0001acb <mem_cpy>
c0006777:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000677b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000677e:	89 e9                	mov    ecx,ebp
c0006780:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c0006783:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0006787:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000678b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000678e:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c0006791:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006794:	83 c0 24             	add    eax,0x24
c0006797:	0f b7 d7             	movzx  edx,di
c000679a:	e8 1f b3 ff ff       	call   c0001abe <st_word>
c000679f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00067a3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00067a6:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00067a9:	a8 10                	test   al,0x10
c00067ab:	75 06                	jne    c00067b3 <f_rename+0x18e>
c00067ad:	83 c8 20             	or     eax,0x20
c00067b0:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00067b3:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067ba:	e8 e0 d1 ff ff       	call   c000399f <store_xdir>
c00067bf:	85 c0                	test   eax,eax
c00067c1:	0f 84 1c 01 00 00    	je     c00068e3 <f_rename+0x2be>
c00067c7:	e9 2d 01 00 00       	jmp    c00068f9 <f_rename+0x2d4>
c00067cc:	b9 20 00 00 00       	mov    ecx,0x20
c00067d1:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00067d8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00067dc:	e8 ea b2 ff ff       	call   c0001acb <mem_cpy>
c00067e1:	b9 4c 00 00 00       	mov    ecx,0x4c
c00067e6:	8d 54 24 58          	lea    edx,[esp+0x58]
c00067ea:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00067f1:	e8 d5 b2 ff ff       	call   c0001acb <mem_cpy>
c00067f6:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c00067fd:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006804:	e8 31 e4 ff ff       	call   c0004c3a <follow_path>
c0006809:	85 c0                	test   eax,eax
c000680b:	75 27                	jne    c0006834 <f_rename+0x20f>
c000680d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006811:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006818:	0f 85 f3 fe ff ff    	jne    c0006711 <f_rename+0xec>
c000681e:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006825:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000682c:	0f 85 df fe ff ff    	jne    c0006711 <f_rename+0xec>
c0006832:	eb 09                	jmp    c000683d <f_rename+0x218>
c0006834:	83 f8 04             	cmp    eax,0x4
c0006837:	0f 85 bc 00 00 00    	jne    c00068f9 <f_rename+0x2d4>
c000683d:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006844:	e8 65 d8 ff ff       	call   c00040ae <dir_register>
c0006849:	85 c0                	test   eax,eax
c000684b:	0f 85 a8 00 00 00    	jne    c00068f9 <f_rename+0x2d4>
c0006851:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006858:	b9 13 00 00 00       	mov    ecx,0x13
c000685d:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006861:	8d 46 0d             	lea    eax,[esi+0xd]
c0006864:	e8 62 b2 ff ff       	call   c0001acb <mem_cpy>
c0006869:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c000686d:	a8 10                	test   al,0x10
c000686f:	75 03                	jne    c0006874 <f_rename+0x24f>
c0006871:	83 c8 20             	or     eax,0x20
c0006874:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006877:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000687b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000687f:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006883:	74 5e                	je     c00068e3 <f_rename+0x2be>
c0006885:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c000688c:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006890:	74 51                	je     c00068e3 <f_rename+0x2be>
c0006892:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006896:	89 f2                	mov    edx,esi
c0006898:	8a 07                	mov    al,BYTE PTR [edi]
c000689a:	e8 10 e3 ff ff       	call   c0004baf <ld_clust.isra.0>
c000689f:	89 c2                	mov    edx,eax
c00068a1:	89 f8                	mov    eax,edi
c00068a3:	e8 3d b4 ff ff       	call   c0001ce5 <clst2sect>
c00068a8:	89 c6                	mov    esi,eax
c00068aa:	89 d1                	mov    ecx,edx
c00068ac:	b8 02 00 00 00       	mov    eax,0x2
c00068b1:	09 f2                	or     edx,esi
c00068b3:	74 44                	je     c00068f9 <f_rename+0x2d4>
c00068b5:	89 f2                	mov    edx,esi
c00068b7:	89 f8                	mov    eax,edi
c00068b9:	e8 65 b9 ff ff       	call   c0002223 <move_window>
c00068be:	85 c0                	test   eax,eax
c00068c0:	75 37                	jne    c00068f9 <f_rename+0x2d4>
c00068c2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c6:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c00068ca:	75 17                	jne    c00068e3 <f_rename+0x2be>
c00068cc:	8d 50 74             	lea    edx,[eax+0x74]
c00068cf:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c00068d6:	e8 fd e2 ff ff       	call   c0004bd8 <st_clust.isra.1>
c00068db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068df:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00068e3:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068e7:	e8 38 d1 ff ff       	call   c0003a24 <dir_remove>
c00068ec:	85 c0                	test   eax,eax
c00068ee:	75 09                	jne    c00068f9 <f_rename+0x2d4>
c00068f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f4:	e8 38 da ff ff       	call   c0004331 <sync_fs>
c00068f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00068fd:	83 ec 0c             	sub    esp,0xc
c0006900:	53                   	push   ebx
c0006901:	e8 42 19 00 00       	call   c0008248 <ff_memfree>
c0006906:	83 c4 10             	add    esp,0x10
c0006909:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000690d:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006913:	5b                   	pop    ebx
c0006914:	5e                   	pop    esi
c0006915:	5f                   	pop    edi
c0006916:	5d                   	pop    ebp
c0006917:	c3                   	ret    

c0006918 <f_chmod>:
c0006918:	57                   	push   edi
c0006919:	b9 02 00 00 00       	mov    ecx,0x2
c000691e:	56                   	push   esi
c000691f:	53                   	push   ebx
c0006920:	83 ec 60             	sub    esp,0x60
c0006923:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006927:	8d 44 24 70          	lea    eax,[esp+0x70]
c000692b:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000692f:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006933:	e8 96 bb ff ff       	call   c00024ce <mount_volume>
c0006938:	85 c0                	test   eax,eax
c000693a:	0f 85 af 00 00 00    	jne    c00069ef <f_chmod+0xd7>
c0006940:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006944:	83 ec 0c             	sub    esp,0xc
c0006947:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000694b:	68 60 04 00 00       	push   0x460
c0006950:	e8 dd 18 00 00       	call   c0008232 <ff_memalloc>
c0006955:	89 c6                	mov    esi,eax
c0006957:	83 c4 10             	add    esp,0x10
c000695a:	b8 11 00 00 00       	mov    eax,0x11
c000695f:	85 f6                	test   esi,esi
c0006961:	0f 84 88 00 00 00    	je     c00069ef <f_chmod+0xd7>
c0006967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000696b:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006971:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006974:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006977:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c000697b:	8d 44 24 14          	lea    eax,[esp+0x14]
c000697f:	e8 b6 e2 ff ff       	call   c0004c3a <follow_path>
c0006984:	85 c0                	test   eax,eax
c0006986:	75 53                	jne    c00069db <f_chmod+0xc3>
c0006988:	b8 06 00 00 00       	mov    eax,0x6
c000698d:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006992:	75 47                	jne    c00069db <f_chmod+0xc3>
c0006994:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006998:	89 f9                	mov    ecx,edi
c000699a:	83 e1 27             	and    ecx,0x27
c000699d:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00069a0:	75 1d                	jne    c00069bf <f_chmod+0xa7>
c00069a2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069a5:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069a8:	21 cb                	and    ebx,ecx
c00069aa:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c00069ad:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c00069b0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00069b4:	e8 e6 cf ff ff       	call   c000399f <store_xdir>
c00069b9:	85 c0                	test   eax,eax
c00069bb:	75 1e                	jne    c00069db <f_chmod+0xc3>
c00069bd:	eb 13                	jmp    c00069d2 <f_chmod+0xba>
c00069bf:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c00069c3:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069c6:	21 cb                	and    ebx,ecx
c00069c8:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c00069cb:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c00069ce:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00069d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00069d6:	e8 56 d9 ff ff       	call   c0004331 <sync_fs>
c00069db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00069df:	83 ec 0c             	sub    esp,0xc
c00069e2:	56                   	push   esi
c00069e3:	e8 60 18 00 00       	call   c0008248 <ff_memfree>
c00069e8:	83 c4 10             	add    esp,0x10
c00069eb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00069ef:	83 c4 60             	add    esp,0x60
c00069f2:	5b                   	pop    ebx
c00069f3:	5e                   	pop    esi
c00069f4:	5f                   	pop    edi
c00069f5:	c3                   	ret    

c00069f6 <f_utime>:
c00069f6:	56                   	push   esi
c00069f7:	b9 02 00 00 00       	mov    ecx,0x2
c00069fc:	53                   	push   ebx
c00069fd:	83 ec 64             	sub    esp,0x64
c0006a00:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006a04:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006a08:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006a0c:	e8 bd ba ff ff       	call   c00024ce <mount_volume>
c0006a11:	85 c0                	test   eax,eax
c0006a13:	0f 85 b5 00 00 00    	jne    c0006ace <f_utime+0xd8>
c0006a19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a1d:	83 ec 0c             	sub    esp,0xc
c0006a20:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006a24:	68 60 04 00 00       	push   0x460
c0006a29:	e8 04 18 00 00       	call   c0008232 <ff_memalloc>
c0006a2e:	89 c3                	mov    ebx,eax
c0006a30:	83 c4 10             	add    esp,0x10
c0006a33:	b8 11 00 00 00       	mov    eax,0x11
c0006a38:	85 db                	test   ebx,ebx
c0006a3a:	0f 84 8e 00 00 00    	je     c0006ace <f_utime+0xd8>
c0006a40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a44:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006a4a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006a4d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006a50:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a58:	e8 dd e1 ff ff       	call   c0004c3a <follow_path>
c0006a5d:	85 c0                	test   eax,eax
c0006a5f:	75 59                	jne    c0006aba <f_utime+0xc4>
c0006a61:	b8 06 00 00 00       	mov    eax,0x6
c0006a66:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006a6b:	75 4d                	jne    c0006aba <f_utime+0xc4>
c0006a6d:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006a71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a75:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006a79:	c1 e2 10             	shl    edx,0x10
c0006a7c:	09 ca                	or     edx,ecx
c0006a7e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006a81:	75 1a                	jne    c0006a9d <f_utime+0xa7>
c0006a83:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006a86:	83 c0 0c             	add    eax,0xc
c0006a89:	e8 34 b0 ff ff       	call   c0001ac2 <st_dword>
c0006a8e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006a92:	e8 08 cf ff ff       	call   c000399f <store_xdir>
c0006a97:	85 c0                	test   eax,eax
c0006a99:	75 1f                	jne    c0006aba <f_utime+0xc4>
c0006a9b:	eb 14                	jmp    c0006ab1 <f_utime+0xbb>
c0006a9d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006aa1:	83 c0 16             	add    eax,0x16
c0006aa4:	e8 19 b0 ff ff       	call   c0001ac2 <st_dword>
c0006aa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006aad:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ab5:	e8 77 d8 ff ff       	call   c0004331 <sync_fs>
c0006aba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006abe:	83 ec 0c             	sub    esp,0xc
c0006ac1:	53                   	push   ebx
c0006ac2:	e8 81 17 00 00       	call   c0008248 <ff_memfree>
c0006ac7:	83 c4 10             	add    esp,0x10
c0006aca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006ace:	83 c4 64             	add    esp,0x64
c0006ad1:	5b                   	pop    ebx
c0006ad2:	5e                   	pop    esi
c0006ad3:	c3                   	ret    

c0006ad4 <f_getlabel>:
c0006ad4:	55                   	push   ebp
c0006ad5:	31 c9                	xor    ecx,ecx
c0006ad7:	57                   	push   edi
c0006ad8:	56                   	push   esi
c0006ad9:	53                   	push   ebx
c0006ada:	83 ec 6c             	sub    esp,0x6c
c0006add:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006ae1:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006ae8:	e8 e1 b9 ff ff       	call   c00024ce <mount_volume>
c0006aed:	89 c3                	mov    ebx,eax
c0006aef:	85 c0                	test   eax,eax
c0006af1:	0f 85 73 01 00 00    	jne    c0006c6a <f_getlabel+0x196>
c0006af7:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006aff:	0f 84 65 01 00 00    	je     c0006c6a <f_getlabel+0x196>
c0006b05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b09:	31 d2                	xor    edx,edx
c0006b0b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006b0f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b13:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006b1b:	e8 7b c4 ff ff       	call   c0002f9b <dir_sdi>
c0006b20:	89 c3                	mov    ebx,eax
c0006b22:	85 c0                	test   eax,eax
c0006b24:	0f 85 2f 01 00 00    	jne    c0006c59 <f_getlabel+0x185>
c0006b2a:	ba 01 00 00 00       	mov    edx,0x1
c0006b2f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006b33:	e8 75 cc ff ff       	call   c00037ad <dir_read>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	85 c0                	test   eax,eax
c0006b3c:	0f 85 17 01 00 00    	jne    c0006c59 <f_getlabel+0x185>
c0006b42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b46:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006b49:	74 09                	je     c0006b54 <f_getlabel+0x80>
c0006b4b:	31 f6                	xor    esi,esi
c0006b4d:	31 c9                	xor    ecx,ecx
c0006b4f:	e9 c8 00 00 00       	jmp    c0006c1c <f_getlabel+0x148>
c0006b54:	31 ed                	xor    ebp,ebp
c0006b56:	31 f6                	xor    esi,esi
c0006b58:	31 ff                	xor    edi,edi
c0006b5a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006b5e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006b62:	39 fa                	cmp    edx,edi
c0006b64:	76 4b                	jbe    c0006bb1 <f_getlabel+0xdd>
c0006b66:	47                   	inc    edi
c0006b67:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006b6a:	01 d0                	add    eax,edx
c0006b6c:	e8 db ae ff ff       	call   c0001a4c <ld_word>
c0006b71:	66 85 ed             	test   bp,bp
c0006b74:	75 0d                	jne    c0006b83 <f_getlabel+0xaf>
c0006b76:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006b7c:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006b81:	76 28                	jbe    c0006bab <f_getlabel+0xd7>
c0006b83:	89 e9                	mov    ecx,ebp
c0006b85:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006b8c:	c1 e1 10             	shl    ecx,0x10
c0006b8f:	01 f2                	add    edx,esi
c0006b91:	0f b7 c0             	movzx  eax,ax
c0006b94:	09 c8                	or     eax,ecx
c0006b96:	b9 04 00 00 00       	mov    ecx,0x4
c0006b9b:	e8 4c b0 ff ff       	call   c0001bec <put_utf>
c0006ba0:	84 c0                	test   al,al
c0006ba2:	74 0b                	je     c0006baf <f_getlabel+0xdb>
c0006ba4:	0f b6 c0             	movzx  eax,al
c0006ba7:	01 c6                	add    esi,eax
c0006ba9:	31 c0                	xor    eax,eax
c0006bab:	89 c5                	mov    ebp,eax
c0006bad:	eb ab                	jmp    c0006b5a <f_getlabel+0x86>
c0006baf:	31 f6                	xor    esi,esi
c0006bb1:	66 85 ed             	test   bp,bp
c0006bb4:	74 02                	je     c0006bb8 <f_getlabel+0xe4>
c0006bb6:	31 f6                	xor    esi,esi
c0006bb8:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006bbf:	c6 04 30 00          	mov    BYTE PTR [eax+esi*1],0x0
c0006bc3:	e9 a2 00 00 00       	jmp    c0006c6a <f_getlabel+0x196>
c0006bc8:	83 ff 0b             	cmp    edi,0xb
c0006bcb:	74 11                	je     c0006bde <f_getlabel+0x10a>
c0006bcd:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006bd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006bd6:	8d 79 02             	lea    edi,[ecx+0x2]
c0006bd9:	c1 e0 08             	shl    eax,0x8
c0006bdc:	09 c2                	or     edx,eax
c0006bde:	50                   	push   eax
c0006bdf:	50                   	push   eax
c0006be0:	68 b5 01 00 00       	push   0x1b5
c0006be5:	0f b7 d2             	movzx  edx,dx
c0006be8:	52                   	push   edx
c0006be9:	e8 07 17 00 00       	call   c00082f5 <ff_oem2uni>
c0006bee:	83 c4 10             	add    esp,0x10
c0006bf1:	66 85 c0             	test   ax,ax
c0006bf4:	74 46                	je     c0006c3c <f_getlabel+0x168>
c0006bf6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006bfd:	b9 04 00 00 00       	mov    ecx,0x4
c0006c02:	01 f2                	add    edx,esi
c0006c04:	0f b7 c0             	movzx  eax,ax
c0006c07:	e8 e0 af ff ff       	call   c0001bec <put_utf>
c0006c0c:	84 c0                	test   al,al
c0006c0e:	74 2c                	je     c0006c3c <f_getlabel+0x168>
c0006c10:	0f b6 c0             	movzx  eax,al
c0006c13:	01 c6                	add    esi,eax
c0006c15:	83 ff 0b             	cmp    edi,0xb
c0006c18:	74 24                	je     c0006c3e <f_getlabel+0x16a>
c0006c1a:	89 f9                	mov    ecx,edi
c0006c1c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006c20:	8d 79 01             	lea    edi,[ecx+0x1]
c0006c23:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006c28:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006c2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c31:	e8 ea ae ff ff       	call   c0001b20 <dbc_1st>
c0006c36:	85 c0                	test   eax,eax
c0006c38:	74 a4                	je     c0006bde <f_getlabel+0x10a>
c0006c3a:	eb 8c                	jmp    c0006bc8 <f_getlabel+0xf4>
c0006c3c:	31 f6                	xor    esi,esi
c0006c3e:	03 b4 24 84 00 00 00 	add    esi,DWORD PTR [esp+0x84]
c0006c45:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0006c48:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
c0006c4f:	74 19                	je     c0006c6a <f_getlabel+0x196>
c0006c51:	4e                   	dec    esi
c0006c52:	80 3e 20             	cmp    BYTE PTR [esi],0x20
c0006c55:	74 ee                	je     c0006c45 <f_getlabel+0x171>
c0006c57:	eb 11                	jmp    c0006c6a <f_getlabel+0x196>
c0006c59:	83 fb 04             	cmp    ebx,0x4
c0006c5c:	75 0c                	jne    c0006c6a <f_getlabel+0x196>
c0006c5e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006c65:	31 db                	xor    ebx,ebx
c0006c67:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006c6a:	85 db                	test   ebx,ebx
c0006c6c:	75 50                	jne    c0006cbe <f_getlabel+0x1ea>
c0006c6e:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006c76:	74 46                	je     c0006cbe <f_getlabel+0x1ea>
c0006c78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c7c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006c7f:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006c82:	e8 9c b5 ff ff       	call   c0002223 <move_window>
c0006c87:	89 c3                	mov    ebx,eax
c0006c89:	85 c0                	test   eax,eax
c0006c8b:	75 31                	jne    c0006cbe <f_getlabel+0x1ea>
c0006c8d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006c91:	b8 43 00 00 00       	mov    eax,0x43
c0006c96:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006c98:	80 f9 03             	cmp    cl,0x3
c0006c9b:	74 0f                	je     c0006cac <f_getlabel+0x1d8>
c0006c9d:	31 c0                	xor    eax,eax
c0006c9f:	80 f9 04             	cmp    cl,0x4
c0006ca2:	0f 94 c0             	sete   al
c0006ca5:	48                   	dec    eax
c0006ca6:	83 e0 c3             	and    eax,0xffffffc3
c0006ca9:	83 c0 64             	add    eax,0x64
c0006cac:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006cb0:	e8 a4 ad ff ff       	call   c0001a59 <ld_dword>
c0006cb5:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006cbc:	89 07                	mov    DWORD PTR [edi],eax
c0006cbe:	83 c4 6c             	add    esp,0x6c
c0006cc1:	89 d8                	mov    eax,ebx
c0006cc3:	5b                   	pop    ebx
c0006cc4:	5e                   	pop    esi
c0006cc5:	5f                   	pop    edi
c0006cc6:	5d                   	pop    ebp
c0006cc7:	c3                   	ret    

c0006cc8 <f_setlabel>:
c0006cc8:	56                   	push   esi
c0006cc9:	b9 02 00 00 00       	mov    ecx,0x2
c0006cce:	53                   	push   ebx
c0006ccf:	83 ec 74             	sub    esp,0x74
c0006cd2:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006cd6:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006cdd:	e8 ec b7 ff ff       	call   c00024ce <mount_volume>
c0006ce2:	89 c6                	mov    esi,eax
c0006ce4:	85 c0                	test   eax,eax
c0006ce6:	0f 85 41 02 00 00    	jne    c0006f2d <f_setlabel+0x265>
c0006cec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006cf0:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cf3:	0f 85 8e 00 00 00    	jne    c0006d87 <f_setlabel+0xbf>
c0006cf9:	b9 16 00 00 00       	mov    ecx,0x16
c0006cfe:	31 d2                	xor    edx,edx
c0006d00:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d04:	31 db                	xor    ebx,ebx
c0006d06:	e8 d5 ad ff ff       	call   c0001ae0 <mem_set>
c0006d0b:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006d12:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006d15:	0f 86 0a 01 00 00    	jbe    c0006e25 <f_setlabel+0x15d>
c0006d1b:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d22:	e8 ff ad ff ff       	call   c0001b26 <tchar2uni>
c0006d27:	89 c6                	mov    esi,eax
c0006d29:	3d ff ff 00 00       	cmp    eax,0xffff
c0006d2e:	76 2a                	jbe    c0006d5a <f_setlabel+0x92>
c0006d30:	83 f8 ff             	cmp    eax,0xffffffff
c0006d33:	74 05                	je     c0006d3a <f_setlabel+0x72>
c0006d35:	83 fb 09             	cmp    ebx,0x9
c0006d38:	76 0a                	jbe    c0006d44 <f_setlabel+0x7c>
c0006d3a:	be 06 00 00 00       	mov    esi,0x6
c0006d3f:	e9 e9 01 00 00       	jmp    c0006f2d <f_setlabel+0x265>
c0006d44:	89 c2                	mov    edx,eax
c0006d46:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d4a:	c1 ea 10             	shr    edx,0x10
c0006d4d:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d50:	01 c8                	add    eax,ecx
c0006d52:	43                   	inc    ebx
c0006d53:	e8 66 ad ff ff       	call   c0001abe <st_word>
c0006d58:	eb 04                	jmp    c0006d5e <f_setlabel+0x96>
c0006d5a:	85 c0                	test   eax,eax
c0006d5c:	74 dc                	je     c0006d3a <f_setlabel+0x72>
c0006d5e:	89 f2                	mov    edx,esi
c0006d60:	b8 97 04 02 c0       	mov    eax,0xc0020497
c0006d65:	e8 a4 ad ff ff       	call   c0001b0e <chk_chr>
c0006d6a:	85 c0                	test   eax,eax
c0006d6c:	75 cc                	jne    c0006d3a <f_setlabel+0x72>
c0006d6e:	83 fb 0a             	cmp    ebx,0xa
c0006d71:	77 c7                	ja     c0006d3a <f_setlabel+0x72>
c0006d73:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006d76:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006d7a:	0f b7 d6             	movzx  edx,si
c0006d7d:	01 c8                	add    eax,ecx
c0006d7f:	43                   	inc    ebx
c0006d80:	e8 39 ad ff ff       	call   c0001abe <st_word>
c0006d85:	eb 84                	jmp    c0006d0b <f_setlabel+0x43>
c0006d87:	b9 0b 00 00 00       	mov    ecx,0xb
c0006d8c:	ba 20 00 00 00       	mov    edx,0x20
c0006d91:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006d95:	31 db                	xor    ebx,ebx
c0006d97:	e8 44 ad ff ff       	call   c0001ae0 <mem_set>
c0006d9c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006da3:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006da6:	76 60                	jbe    c0006e08 <f_setlabel+0x140>
c0006da8:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006daf:	e8 72 ad ff ff       	call   c0001b26 <tchar2uni>
c0006db4:	3d ff ff 00 00       	cmp    eax,0xffff
c0006db9:	0f 87 7b ff ff ff    	ja     c0006d3a <f_setlabel+0x72>
c0006dbf:	83 ec 0c             	sub    esp,0xc
c0006dc2:	50                   	push   eax
c0006dc3:	e8 9c 15 00 00       	call   c0008364 <ff_wtoupper>
c0006dc8:	5a                   	pop    edx
c0006dc9:	59                   	pop    ecx
c0006dca:	68 b5 01 00 00       	push   0x1b5
c0006dcf:	50                   	push   eax
c0006dd0:	e8 8a 14 00 00       	call   c000825f <ff_uni2oem>
c0006dd5:	83 c4 10             	add    esp,0x10
c0006dd8:	89 c6                	mov    esi,eax
c0006dda:	66 85 c0             	test   ax,ax
c0006ddd:	0f 84 57 ff ff ff    	je     c0006d3a <f_setlabel+0x72>
c0006de3:	0f b7 d0             	movzx  edx,ax
c0006de6:	b8 90 04 02 c0       	mov    eax,0xc0020490
c0006deb:	e8 1e ad ff ff       	call   c0001b0e <chk_chr>
c0006df0:	85 c0                	test   eax,eax
c0006df2:	0f 85 42 ff ff ff    	jne    c0006d3a <f_setlabel+0x72>
c0006df8:	66 81 fe ff 00       	cmp    si,0xff
c0006dfd:	0f 87 14 01 00 00    	ja     c0006f17 <f_setlabel+0x24f>
c0006e03:	e9 fa 00 00 00       	jmp    c0006f02 <f_setlabel+0x23a>
c0006e08:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c0006e0d:	0f 84 27 ff ff ff    	je     c0006d3a <f_setlabel+0x72>
c0006e13:	85 db                	test   ebx,ebx
c0006e15:	74 0e                	je     c0006e25 <f_setlabel+0x15d>
c0006e17:	8d 43 ff             	lea    eax,[ebx-0x1]
c0006e1a:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c0006e1f:	75 04                	jne    c0006e25 <f_setlabel+0x15d>
c0006e21:	89 c3                	mov    ebx,eax
c0006e23:	eb ee                	jmp    c0006e13 <f_setlabel+0x14b>
c0006e25:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006e29:	31 d2                	xor    edx,edx
c0006e2b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0006e2f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e33:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0006e3b:	e8 5b c1 ff ff       	call   c0002f9b <dir_sdi>
c0006e40:	89 c6                	mov    esi,eax
c0006e42:	85 c0                	test   eax,eax
c0006e44:	0f 85 e3 00 00 00    	jne    c0006f2d <f_setlabel+0x265>
c0006e4a:	ba 01 00 00 00       	mov    edx,0x1
c0006e4f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e53:	e8 55 c9 ff ff       	call   c00037ad <dir_read>
c0006e58:	85 c0                	test   eax,eax
c0006e5a:	75 21                	jne    c0006e7d <f_setlabel+0x1b5>
c0006e5c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006e60:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006e64:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c0006e67:	74 5d                	je     c0006ec6 <f_setlabel+0x1fe>
c0006e69:	85 db                	test   ebx,ebx
c0006e6b:	74 0b                	je     c0006e78 <f_setlabel+0x1b0>
c0006e6d:	b9 0b 00 00 00       	mov    ecx,0xb
c0006e72:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006e76:	eb 70                	jmp    c0006ee8 <f_setlabel+0x220>
c0006e78:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0006e7b:	eb 70                	jmp    c0006eed <f_setlabel+0x225>
c0006e7d:	83 f8 04             	cmp    eax,0x4
c0006e80:	75 7c                	jne    c0006efe <f_setlabel+0x236>
c0006e82:	85 db                	test   ebx,ebx
c0006e84:	0f 84 a3 00 00 00    	je     c0006f2d <f_setlabel+0x265>
c0006e8a:	ba 01 00 00 00       	mov    edx,0x1
c0006e8f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006e93:	e8 8f ca ff ff       	call   c0003927 <dir_alloc>
c0006e98:	89 c6                	mov    esi,eax
c0006e9a:	85 c0                	test   eax,eax
c0006e9c:	0f 85 8b 00 00 00    	jne    c0006f2d <f_setlabel+0x265>
c0006ea2:	31 d2                	xor    edx,edx
c0006ea4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ea8:	b9 20 00 00 00       	mov    ecx,0x20
c0006ead:	e8 2e ac ff ff       	call   c0001ae0 <mem_set>
c0006eb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006eb6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006eb9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ebd:	75 18                	jne    c0006ed7 <f_setlabel+0x20f>
c0006ebf:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0006ec2:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ec6:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0006ec9:	b9 16 00 00 00       	mov    ecx,0x16
c0006ece:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ed2:	83 c0 02             	add    eax,0x2
c0006ed5:	eb 9b                	jmp    c0006e72 <f_setlabel+0x1aa>
c0006ed7:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0006edb:	b9 0b 00 00 00       	mov    ecx,0xb
c0006ee0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0006ee4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0006ee8:	e8 de ab ff ff       	call   c0001acb <mem_cpy>
c0006eed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef1:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ef5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006ef9:	e8 33 d4 ff ff       	call   c0004331 <sync_fs>
c0006efe:	89 c6                	mov    esi,eax
c0006f00:	eb 2b                	jmp    c0006f2d <f_setlabel+0x265>
c0006f02:	83 fb 0a             	cmp    ebx,0xa
c0006f05:	0f 87 2f fe ff ff    	ja     c0006d3a <f_setlabel+0x72>
c0006f0b:	89 f0                	mov    eax,esi
c0006f0d:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f11:	43                   	inc    ebx
c0006f12:	e9 85 fe ff ff       	jmp    c0006d9c <f_setlabel+0xd4>
c0006f17:	83 fb 09             	cmp    ebx,0x9
c0006f1a:	0f 87 1a fe ff ff    	ja     c0006d3a <f_setlabel+0x72>
c0006f20:	89 f0                	mov    eax,esi
c0006f22:	66 c1 e8 08          	shr    ax,0x8
c0006f26:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0006f2a:	43                   	inc    ebx
c0006f2b:	eb de                	jmp    c0006f0b <f_setlabel+0x243>
c0006f2d:	83 c4 74             	add    esp,0x74
c0006f30:	89 f0                	mov    eax,esi
c0006f32:	5b                   	pop    ebx
c0006f33:	5e                   	pop    esi
c0006f34:	c3                   	ret    

c0006f35 <f_forward>:
c0006f35:	55                   	push   ebp
c0006f36:	57                   	push   edi
c0006f37:	56                   	push   esi
c0006f38:	53                   	push   ebx
c0006f39:	83 ec 2c             	sub    esp,0x2c
c0006f3c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006f40:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0006f44:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0006f48:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0006f4e:	89 d8                	mov    eax,ebx
c0006f50:	e8 f3 b1 ff ff       	call   c0002148 <validate>
c0006f55:	89 c5                	mov    ebp,eax
c0006f57:	85 c0                	test   eax,eax
c0006f59:	0f 85 aa 01 00 00    	jne    c0007109 <f_forward+0x1d4>
c0006f5f:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c0006f63:	85 ed                	test   ebp,ebp
c0006f65:	0f 85 9e 01 00 00    	jne    c0007109 <f_forward+0x1d4>
c0006f6b:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0006f6f:	0f 84 8f 01 00 00    	je     c0007104 <f_forward+0x1cf>
c0006f75:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0006f78:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0006f7b:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0006f7e:	bf 00 00 00 00       	mov    edi,0x0
c0006f83:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c0006f86:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0006f8a:	89 d1                	mov    ecx,edx
c0006f8c:	19 f9                	sbb    ecx,edi
c0006f8e:	0f 83 cf 00 00 00    	jae    c0007063 <f_forward+0x12e>
c0006f94:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0006f98:	e9 c6 00 00 00       	jmp    c0007063 <f_forward+0x12e>
c0006f9d:	50                   	push   eax
c0006f9e:	50                   	push   eax
c0006f9f:	6a 00                	push   0x0
c0006fa1:	6a 00                	push   0x0
c0006fa3:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0006fa7:	83 c4 10             	add    esp,0x10
c0006faa:	85 c0                	test   eax,eax
c0006fac:	0f 84 57 01 00 00    	je     c0007109 <f_forward+0x1d4>
c0006fb2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fb6:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006fb9:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0006fbc:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c0006fc0:	89 d7                	mov    edi,edx
c0006fc2:	8d 4e ff             	lea    ecx,[esi-0x1]
c0006fc5:	89 c6                	mov    esi,eax
c0006fc7:	0f ac fe 09          	shrd   esi,edi,0x9
c0006fcb:	21 ce                	and    esi,ecx
c0006fcd:	89 c1                	mov    ecx,eax
c0006fcf:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0006fd5:	0f 84 98 00 00 00    	je     c0007073 <f_forward+0x13e>
c0006fdb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006fdf:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006fe2:	89 c8                	mov    eax,ecx
c0006fe4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006fe8:	e8 f8 ac ff ff       	call   c0001ce5 <clst2sect>
c0006fed:	89 d7                	mov    edi,edx
c0006fef:	09 c7                	or     edi,eax
c0006ff1:	0f 84 9e 00 00 00    	je     c0007095 <f_forward+0x160>
c0006ff7:	31 ff                	xor    edi,edi
c0006ff9:	01 c6                	add    esi,eax
c0006ffb:	11 d7                	adc    edi,edx
c0006ffd:	8d 4b 50             	lea    ecx,[ebx+0x50]
c0007000:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007003:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007007:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000700a:	39 fa                	cmp    edx,edi
c000700c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007010:	0f 85 a2 00 00 00    	jne    c00070b8 <f_forward+0x183>
c0007016:	39 f0                	cmp    eax,esi
c0007018:	0f 85 9a 00 00 00    	jne    c00070b8 <f_forward+0x183>
c000701e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007021:	ba 00 02 00 00       	mov    edx,0x200
c0007026:	25 ff 01 00 00       	and    eax,0x1ff
c000702b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000702f:	29 c2                	sub    edx,eax
c0007031:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007034:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007037:	39 d1                	cmp    ecx,edx
c0007039:	76 02                	jbe    c000703d <f_forward+0x108>
c000703b:	89 d1                	mov    ecx,edx
c000703d:	52                   	push   edx
c000703e:	8d 73 50             	lea    esi,[ebx+0x50]
c0007041:	52                   	push   edx
c0007042:	01 c6                	add    esi,eax
c0007044:	51                   	push   ecx
c0007045:	56                   	push   esi
c0007046:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c000704a:	83 c4 10             	add    esp,0x10
c000704d:	85 c0                	test   eax,eax
c000704f:	74 44                	je     c0007095 <f_forward+0x160>
c0007051:	31 ff                	xor    edi,edi
c0007053:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007056:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007059:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000705d:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c0007061:	01 07                	add    DWORD PTR [edi],eax
c0007063:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0007068:	0f 85 2f ff ff ff    	jne    c0006f9d <f_forward+0x68>
c000706e:	e9 96 00 00 00       	jmp    c0007109 <f_forward+0x1d4>
c0007073:	85 f6                	test   esi,esi
c0007075:	0f 85 60 ff ff ff    	jne    c0006fdb <f_forward+0xa6>
c000707b:	89 d7                	mov    edi,edx
c000707d:	09 c7                	or     edi,eax
c000707f:	75 05                	jne    c0007086 <f_forward+0x151>
c0007081:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007084:	eb 0a                	jmp    c0007090 <f_forward+0x15b>
c0007086:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007089:	89 d8                	mov    eax,ebx
c000708b:	e8 15 bd ff ff       	call   c0002da5 <get_fat>
c0007090:	83 f8 01             	cmp    eax,0x1
c0007093:	77 0b                	ja     c00070a0 <f_forward+0x16b>
c0007095:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0007099:	bd 02 00 00 00       	mov    ebp,0x2
c000709e:	eb 69                	jmp    c0007109 <f_forward+0x1d4>
c00070a0:	83 f8 ff             	cmp    eax,0xffffffff
c00070a3:	75 0b                	jne    c00070b0 <f_forward+0x17b>
c00070a5:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00070a9:	bd 01 00 00 00       	mov    ebp,0x1
c00070ae:	eb 59                	jmp    c0007109 <f_forward+0x1d4>
c00070b0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00070b3:	e9 23 ff ff ff       	jmp    c0006fdb <f_forward+0xa6>
c00070b8:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00070bc:	79 20                	jns    c00070de <f_forward+0x1a9>
c00070be:	83 ec 0c             	sub    esp,0xc
c00070c1:	6a 01                	push   0x1
c00070c3:	52                   	push   edx
c00070c4:	50                   	push   eax
c00070c5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070c9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00070cd:	50                   	push   eax
c00070ce:	e8 44 a9 ff ff       	call   c0001a17 <disk_write>
c00070d3:	83 c4 20             	add    esp,0x20
c00070d6:	85 c0                	test   eax,eax
c00070d8:	75 cb                	jne    c00070a5 <f_forward+0x170>
c00070da:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00070de:	83 ec 0c             	sub    esp,0xc
c00070e1:	6a 01                	push   0x1
c00070e3:	57                   	push   edi
c00070e4:	56                   	push   esi
c00070e5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00070e9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00070ed:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00070f1:	50                   	push   eax
c00070f2:	e8 0a a9 ff ff       	call   c0001a01 <disk_read>
c00070f7:	83 c4 20             	add    esp,0x20
c00070fa:	85 c0                	test   eax,eax
c00070fc:	0f 84 1c ff ff ff    	je     c000701e <f_forward+0xe9>
c0007102:	eb a1                	jmp    c00070a5 <f_forward+0x170>
c0007104:	bd 07 00 00 00       	mov    ebp,0x7
c0007109:	83 c4 2c             	add    esp,0x2c
c000710c:	89 e8                	mov    eax,ebp
c000710e:	5b                   	pop    ebx
c000710f:	5e                   	pop    esi
c0007110:	5f                   	pop    edi
c0007111:	5d                   	pop    ebp
c0007112:	c3                   	ret    

c0007113 <f_mkfs>:
c0007113:	55                   	push   ebp
c0007114:	57                   	push   edi
c0007115:	56                   	push   esi
c0007116:	53                   	push   ebx
c0007117:	bb 0b 00 00 00       	mov    ebx,0xb
c000711c:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007122:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0007129:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007130:	e8 f9 ae ff ff       	call   c000202e <get_ldnumber>
c0007135:	85 c0                	test   eax,eax
c0007137:	0f 88 e8 10 00 00    	js     c0008225 <f_mkfs+0x1112>
c000713d:	8b 14 85 40 47 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb8c0]
c0007144:	85 d2                	test   edx,edx
c0007146:	74 03                	je     c000714b <f_mkfs+0x38>
c0007148:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000714b:	85 f6                	test   esi,esi
c000714d:	75 05                	jne    c0007154 <f_mkfs+0x41>
c000714f:	be 80 04 02 c0       	mov    esi,0xc0020480
c0007154:	0f b6 c0             	movzx  eax,al
c0007157:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000715b:	83 ec 0c             	sub    esp,0xc
c000715e:	bb 03 00 00 00       	mov    ebx,0x3
c0007163:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007167:	e8 92 a8 ff ff       	call   c00019fe <disk_initialize>
c000716c:	83 c4 10             	add    esp,0x10
c000716f:	a8 01                	test   al,0x1
c0007171:	0f 85 ae 10 00 00    	jne    c0008225 <f_mkfs+0x1112>
c0007177:	bb 0a 00 00 00       	mov    ebx,0xa
c000717c:	a8 04                	test   al,0x4
c000717e:	0f 85 a1 10 00 00    	jne    c0008225 <f_mkfs+0x1112>
c0007184:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0007187:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000718b:	85 c0                	test   eax,eax
c000718d:	75 20                	jne    c00071af <f_mkfs+0x9c>
c000718f:	51                   	push   ecx
c0007190:	8d 44 24 78          	lea    eax,[esp+0x78]
c0007194:	50                   	push   eax
c0007195:	6a 03                	push   0x3
c0007197:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719b:	e8 8d a8 ff ff       	call   c0001a2d <disk_ioctl>
c00071a0:	83 c4 10             	add    esp,0x10
c00071a3:	85 c0                	test   eax,eax
c00071a5:	74 08                	je     c00071af <f_mkfs+0x9c>
c00071a7:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071af:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00071b3:	8d 42 ff             	lea    eax,[edx-0x1]
c00071b6:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071bb:	77 04                	ja     c00071c1 <f_mkfs+0xae>
c00071bd:	85 c2                	test   edx,eax
c00071bf:	74 08                	je     c00071c9 <f_mkfs+0xb6>
c00071c1:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00071c9:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00071cc:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
c00071d0:	48                   	dec    eax
c00071d1:	3c 01                	cmp    al,0x1
c00071d3:	76 05                	jbe    c00071da <f_mkfs+0xc7>
c00071d5:	c6 44 24 40 01       	mov    BYTE PTR [esp+0x40],0x1
c00071da:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00071dd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00071e1:	48                   	dec    eax
c00071e2:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00071e7:	77 07                	ja     c00071f0 <f_mkfs+0xdd>
c00071e9:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c00071ee:	74 08                	je     c00071f8 <f_mkfs+0xe5>
c00071f0:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c00071f8:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c00071fb:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007201:	77 07                	ja     c000720a <f_mkfs+0xf7>
c0007203:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007206:	85 d8                	test   eax,ebx
c0007208:	74 02                	je     c000720c <f_mkfs+0xf9>
c000720a:	31 db                	xor    ebx,ebx
c000720c:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007217:	77 0a                	ja     c0007223 <f_mkfs+0x110>
c0007219:	bb 11 00 00 00       	mov    ebx,0x11
c000721e:	e9 02 10 00 00       	jmp    c0008225 <f_mkfs+0x1112>
c0007223:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c000722a:	8b 36                	mov    esi,DWORD PTR [esi]
c000722c:	85 ed                	test   ebp,ebp
c000722e:	75 1e                	jne    c000724e <f_mkfs+0x13b>
c0007230:	83 ec 0c             	sub    esp,0xc
c0007233:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c000723a:	25 00 fe ff ff       	and    eax,0xfffffe00
c000723f:	50                   	push   eax
c0007240:	e8 ed 0f 00 00       	call   c0008232 <ff_memalloc>
c0007245:	83 c4 10             	add    esp,0x10
c0007248:	89 c5                	mov    ebp,eax
c000724a:	85 c0                	test   eax,eax
c000724c:	74 cb                	je     c0007219 <f_mkfs+0x106>
c000724e:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007256:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000725e:	52                   	push   edx
c000725f:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c0007263:	50                   	push   eax
c0007264:	6a 01                	push   0x1
c0007266:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000726a:	e8 be a7 ff ff       	call   c0001a2d <disk_ioctl>
c000726f:	83 c4 10             	add    esp,0x10
c0007272:	85 c0                	test   eax,eax
c0007274:	0f 85 46 0f 00 00    	jne    c00081c0 <f_mkfs+0x10ad>
c000727a:	89 f1                	mov    ecx,esi
c000727c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0007284:	83 e1 0f             	and    ecx,0xf
c0007287:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000728f:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c0007293:	83 e6 08             	and    esi,0x8
c0007296:	75 56                	jne    c00072ee <f_mkfs+0x1db>
c0007298:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c000729c:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00072a0:	83 ff 00             	cmp    edi,0x0
c00072a3:	76 20                	jbe    c00072c5 <f_mkfs+0x1b2>
c00072a5:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00072aa:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00072b0:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00072b8:	83 d7 ff             	adc    edi,0xffffffff
c00072bb:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072bf:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072c3:	eb 21                	jmp    c00072e6 <f_mkfs+0x1d3>
c00072c5:	ba 3f 00 00 00       	mov    edx,0x3f
c00072ca:	39 f2                	cmp    edx,esi
c00072cc:	19 f8                	sbb    eax,edi
c00072ce:	73 1e                	jae    c00072ee <f_mkfs+0x1db>
c00072d0:	83 c6 c1             	add    esi,0xffffffc1
c00072d3:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c00072db:	83 d7 ff             	adc    edi,0xffffffff
c00072de:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00072e2:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c00072e6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00072ee:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00072f2:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00072f6:	89 04 24             	mov    DWORD PTR [esp],eax
c00072f9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00072fd:	ba 7f 00 00 00       	mov    edx,0x7f
c0007302:	31 c0                	xor    eax,eax
c0007304:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007307:	89 c7                	mov    edi,eax
c0007309:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000730d:	0f 83 c1 0a 00 00    	jae    c0007dd4 <f_mkfs+0xcc1>
c0007313:	89 df                	mov    edi,ebx
c0007315:	c1 ef 09             	shr    edi,0x9
c0007318:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000731c:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007323:	c1 ef 09             	shr    edi,0x9
c0007326:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000732b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000732f:	74 29                	je     c000735a <f_mkfs+0x247>
c0007331:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c0007336:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000733c:	0f 97 c2             	seta   dl
c000733f:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007342:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007346:	0f 92 c0             	setb   al
c0007349:	08 c2                	or     dl,al
c000734b:	75 5b                	jne    c00073a8 <f_mkfs+0x295>
c000734d:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007351:	83 e0 07             	and    eax,0x7
c0007354:	3c 04                	cmp    al,0x4
c0007356:	74 50                	je     c00073a8 <f_mkfs+0x295>
c0007358:	eb 1b                	jmp    c0007375 <f_mkfs+0x262>
c000735a:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000735f:	0f 87 6f 0a 00 00    	ja     c0007dd4 <f_mkfs+0xcc1>
c0007365:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c000736b:	76 08                	jbe    c0007375 <f_mkfs+0x262>
c000736d:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c0007375:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007379:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c000737d:	83 e0 01             	and    eax,0x1
c0007380:	80 e1 02             	and    cl,0x2
c0007383:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c0007387:	74 0d                	je     c0007396 <f_mkfs+0x283>
c0007389:	84 c0                	test   al,al
c000738b:	0f 84 4f 09 00 00    	je     c0007ce0 <f_mkfs+0xbcd>
c0007391:	e9 0e 08 00 00       	jmp    c0007ba4 <f_mkfs+0xa91>
c0007396:	bb 13 00 00 00       	mov    ebx,0x13
c000739b:	84 c0                	test   al,al
c000739d:	0f 85 01 08 00 00    	jne    c0007ba4 <f_mkfs+0xa91>
c00073a3:	e9 35 0e 00 00       	jmp    c00081dd <f_mkfs+0x10ca>
c00073a8:	ba ff 0f 00 00       	mov    edx,0xfff
c00073ad:	31 c0                	xor    eax,eax
c00073af:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073b2:	89 c7                	mov    edi,eax
c00073b4:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00073b8:	0f 83 16 0a 00 00    	jae    c0007dd4 <f_mkfs+0xcc1>
c00073be:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c00073c4:	77 39                	ja     c00073ff <f_mkfs+0x2ec>
c00073c6:	ba ff ff 07 00       	mov    edx,0x7ffff
c00073cb:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c00073d3:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00073d6:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073da:	73 08                	jae    c00073e4 <f_mkfs+0x2d1>
c00073dc:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c00073e4:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c00073e9:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00073ec:	b8 00 00 00 00       	mov    eax,0x0
c00073f1:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00073f5:	73 08                	jae    c00073ff <f_mkfs+0x2ec>
c00073f7:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c00073ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007403:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007407:	83 c0 20             	add    eax,0x20
c000740a:	83 d2 00             	adc    edx,0x0
c000740d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007411:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0007415:	31 d2                	xor    edx,edx
c0007417:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000741b:	52                   	push   edx
c000741c:	50                   	push   eax
c000741d:	31 ff                	xor    edi,edi
c000741f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007423:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007427:	e8 e0 80 01 00       	call   c001f50c <__udivdi3>
c000742c:	83 c4 10             	add    esp,0x10
c000742f:	c1 e0 02             	shl    eax,0x2
c0007432:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007436:	05 07 02 00 00       	add    eax,0x207
c000743b:	89 f1                	mov    ecx,esi
c000743d:	c1 e8 09             	shr    eax,0x9
c0007440:	89 fb                	mov    ebx,edi
c0007442:	83 c1 ff             	add    ecx,0xffffffff
c0007445:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007449:	83 d3 ff             	adc    ebx,0xffffffff
c000744c:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0007450:	13 5c 24 44          	adc    ebx,DWORD PTR [esp+0x44]
c0007454:	31 d2                	xor    edx,edx
c0007456:	01 c8                	add    eax,ecx
c0007458:	11 da                	adc    edx,ebx
c000745a:	89 c1                	mov    ecx,eax
c000745c:	f7 de                	neg    esi
c000745e:	83 d7 00             	adc    edi,0x0
c0007461:	21 f1                	and    ecx,esi
c0007463:	f7 df                	neg    edi
c0007465:	89 d0                	mov    eax,edx
c0007467:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000746b:	21 f8                	and    eax,edi
c000746d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0007471:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c0007475:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0007479:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000747d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007481:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c0007485:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007488:	0f ac d0 01          	shrd   eax,edx,0x1
c000748c:	d1 ea                	shr    edx,1
c000748e:	89 df                	mov    edi,ebx
c0007490:	39 c1                	cmp    ecx,eax
c0007492:	19 d7                	sbb    edi,edx
c0007494:	0f 83 3a 09 00 00    	jae    c0007dd4 <f_mkfs+0xcc1>
c000749a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000749e:	31 d2                	xor    edx,edx
c00074a0:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00074a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00074a8:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00074ac:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00074af:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00074b3:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00074b7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00074bb:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00074bf:	83 f8 0f             	cmp    eax,0xf
c00074c2:	0f 86 0c 09 00 00    	jbe    c0007dd4 <f_mkfs+0xcc1>
c00074c8:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c00074d0:	0f 87 fe 08 00 00    	ja     c0007dd4 <f_mkfs+0xcc1>
c00074d6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00074da:	31 d2                	xor    edx,edx
c00074dc:	83 c0 07             	add    eax,0x7
c00074df:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00074e7:	c1 e8 03             	shr    eax,0x3
c00074ea:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c00074f2:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00074f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074fa:	c1 e0 09             	shl    eax,0x9
c00074fd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007504:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007508:	48                   	dec    eax
c0007509:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000750d:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
c0007511:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007515:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007519:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007520:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007524:	31 d2                	xor    edx,edx
c0007526:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000752b:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000752f:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007533:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007537:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000753b:	31 ff                	xor    edi,edi
c000753d:	31 f6                	xor    esi,esi
c000753f:	31 db                	xor    ebx,ebx
c0007541:	85 ff                	test   edi,edi
c0007543:	74 05                	je     c000754a <f_mkfs+0x437>
c0007545:	4f                   	dec    edi
c0007546:	74 44                	je     c000758c <f_mkfs+0x479>
c0007548:	eb 4f                	jmp    c0007599 <f_mkfs+0x486>
c000754a:	83 ec 0c             	sub    esp,0xc
c000754d:	0f b7 c3             	movzx  eax,bx
c0007550:	50                   	push   eax
c0007551:	e8 0e 0e 00 00       	call   c0008364 <ff_wtoupper>
c0007556:	83 c4 10             	add    esp,0x10
c0007559:	89 c1                	mov    ecx,eax
c000755b:	66 39 c3             	cmp    bx,ax
c000755e:	8d 53 01             	lea    edx,[ebx+0x1]
c0007561:	75 3e                	jne    c00075a1 <f_mkfs+0x48e>
c0007563:	be 01 00 00 00       	mov    esi,0x1
c0007568:	89 df                	mov    edi,ebx
c000756a:	66 01 f7             	add    di,si
c000756d:	75 07                	jne    c0007576 <f_mkfs+0x463>
c000756f:	83 fe 7f             	cmp    esi,0x7f
c0007572:	77 31                	ja     c00075a5 <f_mkfs+0x492>
c0007574:	eb 16                	jmp    c000758c <f_mkfs+0x479>
c0007576:	83 ec 0c             	sub    esp,0xc
c0007579:	0f b7 ff             	movzx  edi,di
c000757c:	57                   	push   edi
c000757d:	e8 e2 0d 00 00       	call   c0008364 <ff_wtoupper>
c0007582:	83 c4 10             	add    esp,0x10
c0007585:	39 c7                	cmp    edi,eax
c0007587:	75 e6                	jne    c000756f <f_mkfs+0x45c>
c0007589:	46                   	inc    esi
c000758a:	eb dc                	jmp    c0007568 <f_mkfs+0x455>
c000758c:	31 c0                	xor    eax,eax
c000758e:	4e                   	dec    esi
c000758f:	0f 95 c0             	setne  al
c0007592:	89 d9                	mov    ecx,ebx
c0007594:	89 c7                	mov    edi,eax
c0007596:	43                   	inc    ebx
c0007597:	eb 14                	jmp    c00075ad <f_mkfs+0x49a>
c0007599:	89 f1                	mov    ecx,esi
c000759b:	01 f3                	add    ebx,esi
c000759d:	31 ff                	xor    edi,edi
c000759f:	eb 0c                	jmp    c00075ad <f_mkfs+0x49a>
c00075a1:	89 d3                	mov    ebx,edx
c00075a3:	eb 08                	jmp    c00075ad <f_mkfs+0x49a>
c00075a5:	bf 02 00 00 00       	mov    edi,0x2
c00075aa:	83 c9 ff             	or     ecx,0xffffffff
c00075ad:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075b0:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00075b4:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00075b8:	0f b6 c1             	movzx  eax,cl
c00075bb:	e8 87 a9 ff ff       	call   c0001f47 <xsum32>
c00075c0:	66 c1 e9 08          	shr    cx,0x8
c00075c4:	89 c2                	mov    edx,eax
c00075c6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075c9:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c00075cd:	0f b7 c1             	movzx  eax,cx
c00075d0:	e8 72 a9 ff ff       	call   c0001f47 <xsum32>
c00075d5:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c00075da:	66 85 db             	test   bx,bx
c00075dd:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00075e1:	74 1f                	je     c0007602 <f_mkfs+0x4ef>
c00075e3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00075e6:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c00075ed:	83 c0 02             	add    eax,0x2
c00075f0:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c00075f6:	39 c2                	cmp    edx,eax
c00075f8:	74 08                	je     c0007602 <f_mkfs+0x4ef>
c00075fa:	89 04 24             	mov    DWORD PTR [esp],eax
c00075fd:	e9 3f ff ff ff       	jmp    c0007541 <f_mkfs+0x42e>
c0007602:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007605:	83 ec 0c             	sub    esp,0xc
c0007608:	05 01 02 00 00       	add    eax,0x201
c000760d:	c1 e8 09             	shr    eax,0x9
c0007610:	50                   	push   eax
c0007611:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007615:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007619:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000761d:	55                   	push   ebp
c000761e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007622:	e8 f0 a3 ff ff       	call   c0001a17 <disk_write>
c0007627:	83 c4 20             	add    esp,0x20
c000762a:	85 c0                	test   eax,eax
c000762c:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000762f:	0f 85 8b 0b 00 00    	jne    c00081c0 <f_mkfs+0x10ad>
c0007635:	89 d0                	mov    eax,edx
c0007637:	31 d2                	xor    edx,edx
c0007639:	01 44 24 48          	add    DWORD PTR [esp+0x48],eax
c000763d:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007641:	66 85 db             	test   bx,bx
c0007644:	74 04                	je     c000764a <f_mkfs+0x537>
c0007646:	31 c0                	xor    eax,eax
c0007648:	eb b0                	jmp    c00075fa <f_mkfs+0x4e7>
c000764a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000764e:	31 d2                	xor    edx,edx
c0007650:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007654:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007658:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c000765c:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0007663:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007667:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000766d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007671:	8d 70 01             	lea    esi,[eax+0x1]
c0007674:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007678:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000767c:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c0007687:	c1 eb 09             	shr    ebx,0x9
c000768a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000768e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007692:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c0007699:	31 d2                	xor    edx,edx
c000769b:	25 00 fe ff ff       	and    eax,0xfffffe00
c00076a0:	89 04 24             	mov    DWORD PTR [esp],eax
c00076a3:	89 c1                	mov    ecx,eax
c00076a5:	89 e8                	mov    eax,ebp
c00076a7:	e8 34 a4 ff ff       	call   c0001ae0 <mem_set>
c00076ac:	31 c0                	xor    eax,eax
c00076ae:	83 fe 07             	cmp    esi,0x7
c00076b1:	76 10                	jbe    c00076c3 <f_mkfs+0x5b0>
c00076b3:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076b6:	76 0b                	jbe    c00076c3 <f_mkfs+0x5b0>
c00076b8:	40                   	inc    eax
c00076b9:	83 ee 08             	sub    esi,0x8
c00076bc:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c00076c1:	eb eb                	jmp    c00076ae <f_mkfs+0x59b>
c00076c3:	b2 01                	mov    dl,0x1
c00076c5:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c00076c9:	85 f6                	test   esi,esi
c00076cb:	74 0c                	je     c00076d9 <f_mkfs+0x5c6>
c00076cd:	39 04 24             	cmp    DWORD PTR [esp],eax
c00076d0:	76 07                	jbe    c00076d9 <f_mkfs+0x5c6>
c00076d2:	08 11                	or     BYTE PTR [ecx],dl
c00076d4:	4e                   	dec    esi
c00076d5:	01 d2                	add    edx,edx
c00076d7:	eb f0                	jmp    c00076c9 <f_mkfs+0x5b6>
c00076d9:	89 df                	mov    edi,ebx
c00076db:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00076df:	76 04                	jbe    c00076e5 <f_mkfs+0x5d2>
c00076e1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00076e5:	83 ec 0c             	sub    esp,0xc
c00076e8:	57                   	push   edi
c00076e9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076ed:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00076f1:	55                   	push   ebp
c00076f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00076f6:	e8 1c a3 ff ff       	call   c0001a17 <disk_write>
c00076fb:	83 c4 20             	add    esp,0x20
c00076fe:	85 c0                	test   eax,eax
c0007700:	0f 85 ba 0a 00 00    	jne    c00081c0 <f_mkfs+0x10ad>
c0007706:	31 d2                	xor    edx,edx
c0007708:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000770c:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007710:	29 fb                	sub    ebx,edi
c0007712:	0f 85 7a ff ff ff    	jne    c0007692 <f_mkfs+0x57f>
c0007718:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000771c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007724:	31 f6                	xor    esi,esi
c0007726:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000772a:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000772d:	31 d2                	xor    edx,edx
c000772f:	89 e8                	mov    eax,ebp
c0007731:	e8 aa a3 ff ff       	call   c0001ae0 <mem_set>
c0007736:	31 c9                	xor    ecx,ecx
c0007738:	85 db                	test   ebx,ebx
c000773a:	75 40                	jne    c000777c <f_mkfs+0x669>
c000773c:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007741:	89 e8                	mov    eax,ebp
c0007743:	e8 7a a3 ff ff       	call   c0001ac2 <st_dword>
c0007748:	8d 45 04             	lea    eax,[ebp+0x4]
c000774b:	83 ca ff             	or     edx,0xffffffff
c000774e:	bb 02 00 00 00       	mov    ebx,0x2
c0007753:	e8 6a a3 ff ff       	call   c0001ac2 <st_dword>
c0007758:	b9 08 00 00 00       	mov    ecx,0x8
c000775d:	eb 1d                	jmp    c000777c <f_mkfs+0x669>
c000775f:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0007762:	76 3b                	jbe    c000779f <f_mkfs+0x68c>
c0007764:	43                   	inc    ebx
c0007765:	83 fe 01             	cmp    esi,0x1
c0007768:	89 da                	mov    edx,ebx
c000776a:	77 03                	ja     c000776f <f_mkfs+0x65c>
c000776c:	83 ca ff             	or     edx,0xffffffff
c000776f:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0007773:	4e                   	dec    esi
c0007774:	e8 49 a3 ff ff       	call   c0001ac2 <st_dword>
c0007779:	83 c1 04             	add    ecx,0x4
c000777c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007780:	85 f6                	test   esi,esi
c0007782:	75 db                	jne    c000775f <f_mkfs+0x64c>
c0007784:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c0007789:	77 14                	ja     c000779f <f_mkfs+0x68c>
c000778b:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c0007792:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0007796:	85 f6                	test   esi,esi
c0007798:	74 05                	je     c000779f <f_mkfs+0x68c>
c000779a:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000779d:	77 dd                	ja     c000777c <f_mkfs+0x669>
c000779f:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00077a3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00077a7:	39 cf                	cmp    edi,ecx
c00077a9:	76 02                	jbe    c00077ad <f_mkfs+0x69a>
c00077ab:	89 cf                	mov    edi,ecx
c00077ad:	83 ec 0c             	sub    esp,0xc
c00077b0:	57                   	push   edi
c00077b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077b5:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00077b9:	55                   	push   ebp
c00077ba:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00077be:	e8 54 a2 ff ff       	call   c0001a17 <disk_write>
c00077c3:	83 c4 20             	add    esp,0x20
c00077c6:	85 c0                	test   eax,eax
c00077c8:	0f 85 f2 09 00 00    	jne    c00081c0 <f_mkfs+0x10ad>
c00077ce:	31 d2                	xor    edx,edx
c00077d0:	01 7c 24 40          	add    DWORD PTR [esp+0x40],edi
c00077d4:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00077d8:	29 7c 24 50          	sub    DWORD PTR [esp+0x50],edi
c00077dc:	0f 85 48 ff ff ff    	jne    c000772a <f_mkfs+0x617>
c00077e2:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00077e5:	31 d2                	xor    edx,edx
c00077e7:	89 e8                	mov    eax,ebp
c00077e9:	31 ff                	xor    edi,edi
c00077eb:	e8 f0 a2 ff ff       	call   c0001ae0 <mem_set>
c00077f0:	8d 45 34             	lea    eax,[ebp+0x34]
c00077f3:	ba 02 00 00 00       	mov    edx,0x2
c00077f8:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c00077fc:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007800:	e8 bd a2 ff ff       	call   c0001ac2 <st_dword>
c0007805:	8d 45 38             	lea    eax,[ebp+0x38]
c0007808:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c000780c:	e8 b1 a2 ff ff       	call   c0001ac2 <st_dword>
c0007811:	8d 45 44             	lea    eax,[ebp+0x44]
c0007814:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007818:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c000781c:	e8 a1 a2 ff ff       	call   c0001ac2 <st_dword>
c0007821:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007825:	8d 45 54             	lea    eax,[ebp+0x54]
c0007828:	83 c2 02             	add    edx,0x2
c000782b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000782f:	e8 8e a2 ff ff       	call   c0001ac2 <st_dword>
c0007834:	8d 45 58             	lea    eax,[ebp+0x58]
c0007837:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c000783b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000783f:	e8 7e a2 ff ff       	call   c0001ac2 <st_dword>
c0007844:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007848:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000784d:	89 c6                	mov    esi,eax
c000784f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007853:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007857:	89 04 24             	mov    DWORD PTR [esp],eax
c000785a:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c000785e:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007861:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007865:	39 cb                	cmp    ebx,ecx
c0007867:	76 02                	jbe    c000786b <f_mkfs+0x758>
c0007869:	89 cb                	mov    ebx,ecx
c000786b:	83 ec 0c             	sub    esp,0xc
c000786e:	53                   	push   ebx
c000786f:	57                   	push   edi
c0007870:	56                   	push   esi
c0007871:	55                   	push   ebp
c0007872:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007876:	e8 9c a1 ff ff       	call   c0001a17 <disk_write>
c000787b:	83 c4 20             	add    esp,0x20
c000787e:	85 c0                	test   eax,eax
c0007880:	0f 85 3a 09 00 00    	jne    c00081c0 <f_mkfs+0x10ad>
c0007886:	31 d2                	xor    edx,edx
c0007888:	b9 00 02 00 00       	mov    ecx,0x200
c000788d:	89 e8                	mov    eax,ebp
c000788f:	e8 4c a2 ff ff       	call   c0001ae0 <mem_set>
c0007894:	31 d2                	xor    edx,edx
c0007896:	01 de                	add    esi,ebx
c0007898:	11 d7                	adc    edi,edx
c000789a:	29 1c 24             	sub    DWORD PTR [esp],ebx
c000789d:	75 bf                	jne    c000785e <f_mkfs+0x74b>
c000789f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00078a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00078a7:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c00078af:	b9 00 02 00 00       	mov    ecx,0x200
c00078b4:	31 d2                	xor    edx,edx
c00078b6:	89 e8                	mov    eax,ebp
c00078b8:	e8 23 a2 ff ff       	call   c0001ae0 <mem_set>
c00078bd:	b9 0b 00 00 00       	mov    ecx,0xb
c00078c2:	ba 60 05 02 c0       	mov    edx,0xc0020560
c00078c7:	89 e8                	mov    eax,ebp
c00078c9:	e8 fd a1 ff ff       	call   c0001acb <mem_cpy>
c00078ce:	8d 45 40             	lea    eax,[ebp+0x40]
c00078d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00078d5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00078d9:	e8 e7 a1 ff ff       	call   c0001ac5 <st_qword>
c00078de:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00078e2:	8d 45 48             	lea    eax,[ebp+0x48]
c00078e5:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00078e9:	e8 d7 a1 ff ff       	call   c0001ac5 <st_qword>
c00078ee:	8d 45 50             	lea    eax,[ebp+0x50]
c00078f1:	ba 20 00 00 00       	mov    edx,0x20
c00078f6:	e8 c7 a1 ff ff       	call   c0001ac2 <st_dword>
c00078fb:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00078ff:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007903:	e8 ba a1 ff ff       	call   c0001ac2 <st_dword>
c0007908:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000790c:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007910:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007914:	e8 a9 a1 ff ff       	call   c0001ac2 <st_dword>
c0007919:	8d 45 5c             	lea    eax,[ebp+0x5c]
c000791c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007920:	e8 9d a1 ff ff       	call   c0001ac2 <st_dword>
c0007925:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007929:	8d 50 02             	lea    edx,[eax+0x2]
c000792c:	8d 45 60             	lea    eax,[ebp+0x60]
c000792f:	e8 8e a1 ff ff       	call   c0001ac2 <st_dword>
c0007934:	8d 45 64             	lea    eax,[ebp+0x64]
c0007937:	ba 00 00 21 50       	mov    edx,0x50210000
c000793c:	e8 81 a1 ff ff       	call   c0001ac2 <st_dword>
c0007941:	8d 45 68             	lea    eax,[ebp+0x68]
c0007944:	ba 00 01 00 00       	mov    edx,0x100
c0007949:	e8 70 a1 ff ff       	call   c0001abe <st_word>
c000794e:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007952:	b8 0a 00 00 00       	mov    eax,0xa
c0007957:	48                   	dec    eax
c0007958:	74 05                	je     c000795f <f_mkfs+0x84c>
c000795a:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c000795d:	eb f8                	jmp    c0007957 <f_mkfs+0x844>
c000795f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007963:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007967:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000796b:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c000796f:	74 05                	je     c0007976 <f_mkfs+0x863>
c0007971:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007974:	eb f5                	jmp    c000796b <f_mkfs+0x858>
c0007976:	8d 45 78             	lea    eax,[ebp+0x78]
c0007979:	ba eb fe 00 00       	mov    edx,0xfeeb
c000797e:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007984:	31 db                	xor    ebx,ebx
c0007986:	e8 33 a1 ff ff       	call   c0001abe <st_word>
c000798b:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007991:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007996:	89 04 24             	mov    DWORD PTR [esp],eax
c0007999:	e8 20 a1 ff ff       	call   c0001abe <st_word>
c000799e:	31 c9                	xor    ecx,ecx
c00079a0:	8d 41 96             	lea    eax,[ecx-0x6a]
c00079a3:	83 f8 01             	cmp    eax,0x1
c00079a6:	76 13                	jbe    c00079bb <f_mkfs+0x8a8>
c00079a8:	83 f9 70             	cmp    ecx,0x70
c00079ab:	74 0e                	je     c00079bb <f_mkfs+0x8a8>
c00079ad:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c00079b2:	89 da                	mov    edx,ebx
c00079b4:	e8 8e a5 ff ff       	call   c0001f47 <xsum32>
c00079b9:	89 c3                	mov    ebx,eax
c00079bb:	41                   	inc    ecx
c00079bc:	81 f9 00 02 00 00    	cmp    ecx,0x200
c00079c2:	75 dc                	jne    c00079a0 <f_mkfs+0x88d>
c00079c4:	89 f0                	mov    eax,esi
c00079c6:	89 fa                	mov    edx,edi
c00079c8:	83 c0 01             	add    eax,0x1
c00079cb:	83 d2 00             	adc    edx,0x0
c00079ce:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00079d2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00079d6:	83 ec 0c             	sub    esp,0xc
c00079d9:	6a 01                	push   0x1
c00079db:	57                   	push   edi
c00079dc:	56                   	push   esi
c00079dd:	55                   	push   ebp
c00079de:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00079e2:	e8 30 a0 ff ff       	call   c0001a17 <disk_write>
c00079e7:	83 c4 20             	add    esp,0x20
c00079ea:	85 c0                	test   eax,eax
c00079ec:	0f 85 ce 07 00 00    	jne    c00081c0 <f_mkfs+0x10ad>
c00079f2:	31 d2                	xor    edx,edx
c00079f4:	b9 00 02 00 00       	mov    ecx,0x200
c00079f9:	89 e8                	mov    eax,ebp
c00079fb:	e8 e0 a0 ff ff       	call   c0001ae0 <mem_set>
c0007a00:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007a05:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a08:	e8 b1 a0 ff ff       	call   c0001abe <st_word>
c0007a0d:	89 f0                	mov    eax,esi
c0007a0f:	83 c0 09             	add    eax,0x9
c0007a12:	89 fa                	mov    edx,edi
c0007a14:	83 d2 00             	adc    edx,0x0
c0007a17:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a1a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007a1e:	31 c9                	xor    ecx,ecx
c0007a20:	41                   	inc    ecx
c0007a21:	89 da                	mov    edx,ebx
c0007a23:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007a28:	e8 1a a5 ff ff       	call   c0001f47 <xsum32>
c0007a2d:	89 c3                	mov    ebx,eax
c0007a2f:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007a35:	75 e9                	jne    c0007a20 <f_mkfs+0x90d>
c0007a37:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007a3b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007a3f:	83 c0 01             	add    eax,0x1
c0007a42:	83 d2 00             	adc    edx,0x0
c0007a45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007a49:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0007a4d:	83 ec 0c             	sub    esp,0xc
c0007a50:	6a 01                	push   0x1
c0007a52:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a56:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007a5a:	55                   	push   ebp
c0007a5b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a5f:	e8 b3 9f ff ff       	call   c0001a17 <disk_write>
c0007a64:	83 c4 20             	add    esp,0x20
c0007a67:	85 c0                	test   eax,eax
c0007a69:	0f 85 51 07 00 00    	jne    c00081c0 <f_mkfs+0x10ad>
c0007a6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007a73:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007a77:	75 09                	jne    c0007a82 <f_mkfs+0x96f>
c0007a79:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007a7c:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007a80:	74 12                	je     c0007a94 <f_mkfs+0x981>
c0007a82:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007a86:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007a8a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007a8e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007a92:	eb 8a                	jmp    c0007a1e <f_mkfs+0x90b>
c0007a94:	31 d2                	xor    edx,edx
c0007a96:	b9 00 02 00 00       	mov    ecx,0x200
c0007a9b:	89 e8                	mov    eax,ebp
c0007a9d:	e8 3e a0 ff ff       	call   c0001ae0 <mem_set>
c0007aa2:	83 c6 0b             	add    esi,0xb
c0007aa5:	83 d7 00             	adc    edi,0x0
c0007aa8:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007aac:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007ab0:	31 c9                	xor    ecx,ecx
c0007ab2:	41                   	inc    ecx
c0007ab3:	89 da                	mov    edx,ebx
c0007ab5:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007aba:	e8 88 a4 ff ff       	call   c0001f47 <xsum32>
c0007abf:	89 c3                	mov    ebx,eax
c0007ac1:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007ac7:	75 e9                	jne    c0007ab2 <f_mkfs+0x99f>
c0007ac9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007acc:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007ad0:	83 c6 01             	add    esi,0x1
c0007ad3:	83 d7 00             	adc    edi,0x0
c0007ad6:	83 ec 0c             	sub    esp,0xc
c0007ad9:	6a 01                	push   0x1
c0007adb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007adf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007ae3:	55                   	push   ebp
c0007ae4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ae8:	e8 2a 9f ff ff       	call   c0001a17 <disk_write>
c0007aed:	83 c4 20             	add    esp,0x20
c0007af0:	85 c0                	test   eax,eax
c0007af2:	0f 85 c8 06 00 00    	jne    c00081c0 <f_mkfs+0x10ad>
c0007af8:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007afc:	75 06                	jne    c0007b04 <f_mkfs+0x9f1>
c0007afe:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007b02:	74 09                	je     c0007b0d <f_mkfs+0x9fa>
c0007b04:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b07:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007b0b:	eb a3                	jmp    c0007ab0 <f_mkfs+0x99d>
c0007b0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007b11:	89 da                	mov    edx,ebx
c0007b13:	01 e8                	add    eax,ebp
c0007b15:	e8 a8 9f ff ff       	call   c0001ac2 <st_dword>
c0007b1a:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007b1f:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007b27:	75 e4                	jne    c0007b0d <f_mkfs+0x9fa>
c0007b29:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007b2c:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007b30:	83 c6 02             	add    esi,0x2
c0007b33:	83 d7 00             	adc    edi,0x0
c0007b36:	83 ec 0c             	sub    esp,0xc
c0007b39:	6a 01                	push   0x1
c0007b3b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007b43:	55                   	push   ebp
c0007b44:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007b48:	e8 ca 9e ff ff       	call   c0001a17 <disk_write>
c0007b4d:	83 c4 20             	add    esp,0x20
c0007b50:	85 c0                	test   eax,eax
c0007b52:	0f 85 68 06 00 00    	jne    c00081c0 <f_mkfs+0x10ad>
c0007b58:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007b5d:	74 0d                	je     c0007b6c <f_mkfs+0xa59>
c0007b5f:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007b67:	e9 43 fd ff ff       	jmp    c00078af <f_mkfs+0x79c>
c0007b6c:	b1 07                	mov    cl,0x7
c0007b6e:	e9 e3 05 00 00       	jmp    c0008156 <f_mkfs+0x1043>
c0007b73:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007b78:	0f 85 4f 02 00 00    	jne    c0007dcd <f_mkfs+0xcba>
c0007b7e:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007b83:	0f 86 22 02 00 00    	jbe    c0007dab <f_mkfs+0xc98>
c0007b89:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007b8e:	0f 85 81 06 00 00    	jne    c0008215 <f_mkfs+0x1102>
c0007b94:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007b97:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007b9b:	83 f8 40             	cmp    eax,0x40
c0007b9e:	0f 87 51 06 00 00    	ja     c00081f5 <f_mkfs+0x10e2>
c0007ba4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007ba8:	85 ff                	test   edi,edi
c0007baa:	75 1c                	jne    c0007bc8 <f_mkfs+0xab5>
c0007bac:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007baf:	ba 60 04 02 c0       	mov    edx,0xc0020460
c0007bb4:	c1 e9 0c             	shr    ecx,0xc
c0007bb7:	bf 01 00 00 00       	mov    edi,0x1
c0007bbc:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007bbf:	66 85 c0             	test   ax,ax
c0007bc2:	0f 85 95 01 00 00    	jne    c0007d5d <f_mkfs+0xc4a>
c0007bc8:	31 d2                	xor    edx,edx
c0007bca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007bcd:	f7 f7                	div    edi
c0007bcf:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007bd4:	0f 86 95 01 00 00    	jbe    c0007d6f <f_mkfs+0xc5c>
c0007bda:	83 c0 02             	add    eax,0x2
c0007bdd:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007be2:	01 c0                	add    eax,eax
c0007be4:	05 ff 01 00 00       	add    eax,0x1ff
c0007be9:	be 01 00 00 00       	mov    esi,0x1
c0007bee:	c1 e8 09             	shr    eax,0x9
c0007bf1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007bf5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007bf9:	c1 e0 05             	shl    eax,0x5
c0007bfc:	c1 e8 09             	shr    eax,0x9
c0007bff:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007c03:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0007c08:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007c0c:	89 f0                	mov    eax,esi
c0007c0e:	31 d2                	xor    edx,edx
c0007c10:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007c14:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007c18:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007c1c:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007c20:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0007c24:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007c29:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007c2d:	31 d2                	xor    edx,edx
c0007c2f:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007c33:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007c37:	31 db                	xor    ebx,ebx
c0007c39:	01 c8                	add    eax,ecx
c0007c3b:	11 da                	adc    edx,ebx
c0007c3d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007c41:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007c45:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007c49:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007c4d:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007c51:	f7 da                	neg    edx
c0007c53:	21 d1                	and    ecx,edx
c0007c55:	29 d9                	sub    ecx,ebx
c0007c57:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007c5c:	0f 85 20 01 00 00    	jne    c0007d82 <f_mkfs+0xc6f>
c0007c62:	31 db                	xor    ebx,ebx
c0007c64:	01 ce                	add    esi,ecx
c0007c66:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007c6a:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007c6e:	89 f8                	mov    eax,edi
c0007c70:	31 d2                	xor    edx,edx
c0007c72:	c1 e0 04             	shl    eax,0x4
c0007c75:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007c79:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007c7d:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007c81:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007c85:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007c89:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007c8c:	19 d3                	sbb    ebx,edx
c0007c8e:	0f 82 40 01 00 00    	jb     c0007dd4 <f_mkfs+0xcc1>
c0007c94:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007c98:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007c9b:	0f af 54 24 50       	imul   edx,DWORD PTR [esp+0x50]
c0007ca0:	89 c8                	mov    eax,ecx
c0007ca2:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
c0007ca6:	29 f0                	sub    eax,esi
c0007ca8:	29 d0                	sub    eax,edx
c0007caa:	31 d2                	xor    edx,edx
c0007cac:	f7 f7                	div    edi
c0007cae:	89 c3                	mov    ebx,eax
c0007cb0:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007cb5:	0f 85 b8 fe ff ff    	jne    c0007b73 <f_mkfs+0xa60>
c0007cbb:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007cc0:	0f 87 1d 01 00 00    	ja     c0007de3 <f_mkfs+0xcd0>
c0007cc6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ccb:	0f 85 03 01 00 00    	jne    c0007dd4 <f_mkfs+0xcc1>
c0007cd1:	83 ff 01             	cmp    edi,0x1
c0007cd4:	0f 86 fa 00 00 00    	jbe    c0007dd4 <f_mkfs+0xcc1>
c0007cda:	d1 ef                	shr    edi,1
c0007cdc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007ce0:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007ce4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ce7:	85 db                	test   ebx,ebx
c0007ce9:	75 2d                	jne    c0007d18 <f_mkfs+0xc05>
c0007ceb:	89 cb                	mov    ebx,ecx
c0007ced:	ba 70 04 02 c0       	mov    edx,0xc0020470
c0007cf2:	c1 eb 11             	shr    ebx,0x11
c0007cf5:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007cfd:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007d00:	66 85 c0             	test   ax,ax
c0007d03:	74 11                	je     c0007d16 <f_mkfs+0xc03>
c0007d05:	83 c2 02             	add    edx,0x2
c0007d08:	39 d8                	cmp    eax,ebx
c0007d0a:	77 0a                	ja     c0007d16 <f_mkfs+0xc03>
c0007d0c:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007d10:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007d14:	eb e7                	jmp    c0007cfd <f_mkfs+0xbea>
c0007d16:	31 db                	xor    ebx,ebx
c0007d18:	31 d2                	xor    edx,edx
c0007d1a:	89 c8                	mov    eax,ecx
c0007d1c:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007d20:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007d27:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007d2c:	c1 ea 09             	shr    edx,0x9
c0007d2f:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007d34:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007d38:	0f 87 96 00 00 00    	ja     c0007dd4 <f_mkfs+0xcc1>
c0007d3e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d42:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0007d4a:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007d4e:	be 20 00 00 00       	mov    esi,0x20
c0007d53:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007d58:	e9 a6 fe ff ff       	jmp    c0007c03 <f_mkfs+0xaf0>
c0007d5d:	83 c2 02             	add    edx,0x2
c0007d60:	39 c8                	cmp    eax,ecx
c0007d62:	0f 87 60 fe ff ff    	ja     c0007bc8 <f_mkfs+0xab5>
c0007d68:	01 ff                	add    edi,edi
c0007d6a:	e9 4d fe ff ff       	jmp    c0007bbc <f_mkfs+0xaa9>
c0007d6f:	8d 04 40             	lea    eax,[eax+eax*2]
c0007d72:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007d77:	40                   	inc    eax
c0007d78:	d1 e8                	shr    eax,1
c0007d7a:	83 c0 03             	add    eax,0x3
c0007d7d:	e9 62 fe ff ff       	jmp    c0007be4 <f_mkfs+0xad1>
c0007d82:	31 d2                	xor    edx,edx
c0007d84:	89 c8                	mov    eax,ecx
c0007d86:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007d8a:	85 d2                	test   edx,edx
c0007d8c:	74 0c                	je     c0007d9a <f_mkfs+0xc87>
c0007d8e:	49                   	dec    ecx
c0007d8f:	46                   	inc    esi
c0007d90:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007d95:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007d9a:	89 c8                	mov    eax,ecx
c0007d9c:	31 d2                	xor    edx,edx
c0007d9e:	f7 74 24 50          	div    DWORD PTR [esp+0x50]
c0007da2:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007da6:	e9 c3 fe ff ff       	jmp    c0007c6e <f_mkfs+0xb5b>
c0007dab:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007db0:	77 31                	ja     c0007de3 <f_mkfs+0xcd0>
c0007db2:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007db7:	75 1b                	jne    c0007dd4 <f_mkfs+0xcc1>
c0007db9:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dc0:	3d 80 00 00 00       	cmp    eax,0x80
c0007dc5:	0f 86 d9 fd ff ff    	jbe    c0007ba4 <f_mkfs+0xa91>
c0007dcb:	eb 07                	jmp    c0007dd4 <f_mkfs+0xcc1>
c0007dcd:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007dd2:	76 0a                	jbe    c0007dde <f_mkfs+0xccb>
c0007dd4:	bb 0e 00 00 00       	mov    ebx,0xe
c0007dd9:	e9 ff 03 00 00       	jmp    c00081dd <f_mkfs+0x10ca>
c0007dde:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007de3:	31 d2                	xor    edx,edx
c0007de5:	b9 00 02 00 00       	mov    ecx,0x200
c0007dea:	89 e8                	mov    eax,ebp
c0007dec:	e8 ef 9c ff ff       	call   c0001ae0 <mem_set>
c0007df1:	b9 0b 00 00 00       	mov    ecx,0xb
c0007df6:	ba 82 05 02 c0       	mov    edx,0xc0020582
c0007dfb:	89 e8                	mov    eax,ebp
c0007dfd:	e8 c9 9c ff ff       	call   c0001acb <mem_cpy>
c0007e02:	8d 45 0b             	lea    eax,[ebp+0xb]
c0007e05:	ba 00 02 00 00       	mov    edx,0x200
c0007e0a:	e8 af 9c ff ff       	call   c0001abe <st_word>
c0007e0f:	89 f8                	mov    eax,edi
c0007e11:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0007e14:	8d 45 0e             	lea    eax,[ebp+0xe]
c0007e17:	0f b7 d6             	movzx  edx,si
c0007e1a:	e8 9f 9c ff ff       	call   c0001abe <st_word>
c0007e1f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0007e23:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c0007e26:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e2b:	75 08                	jne    c0007e35 <f_mkfs+0xd22>
c0007e2d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007e35:	8d 45 11             	lea    eax,[ebp+0x11]
c0007e38:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0007e3c:	e8 7d 9c ff ff       	call   c0001abe <st_word>
c0007e41:	b8 ff ff 00 00       	mov    eax,0xffff
c0007e46:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007e4a:	39 d0                	cmp    eax,edx
c0007e4c:	b8 00 00 00 00       	mov    eax,0x0
c0007e51:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0007e55:	72 0a                	jb     c0007e61 <f_mkfs+0xd4e>
c0007e57:	8d 45 13             	lea    eax,[ebp+0x13]
c0007e5a:	e8 5f 9c ff ff       	call   c0001abe <st_word>
c0007e5f:	eb 08                	jmp    c0007e69 <f_mkfs+0xd56>
c0007e61:	8d 45 20             	lea    eax,[ebp+0x20]
c0007e64:	e8 59 9c ff ff       	call   c0001ac2 <st_dword>
c0007e69:	8d 45 18             	lea    eax,[ebp+0x18]
c0007e6c:	ba 3f 00 00 00       	mov    edx,0x3f
c0007e71:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c0007e75:	e8 44 9c ff ff       	call   c0001abe <st_word>
c0007e7a:	8d 45 1a             	lea    eax,[ebp+0x1a]
c0007e7d:	ba ff 00 00 00       	mov    edx,0xff
c0007e82:	e8 37 9c ff ff       	call   c0001abe <st_word>
c0007e87:	8d 45 1c             	lea    eax,[ebp+0x1c]
c0007e8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007e8e:	e8 2f 9c ff ff       	call   c0001ac2 <st_dword>
c0007e93:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e98:	75 57                	jne    c0007ef1 <f_mkfs+0xdde>
c0007e9a:	8d 45 43             	lea    eax,[ebp+0x43]
c0007e9d:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ea2:	e8 1b 9c ff ff       	call   c0001ac2 <st_dword>
c0007ea7:	8d 45 24             	lea    eax,[ebp+0x24]
c0007eaa:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007eae:	e8 0f 9c ff ff       	call   c0001ac2 <st_dword>
c0007eb3:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0007eb6:	ba 02 00 00 00       	mov    edx,0x2
c0007ebb:	e8 02 9c ff ff       	call   c0001ac2 <st_dword>
c0007ec0:	8d 45 30             	lea    eax,[ebp+0x30]
c0007ec3:	ba 01 00 00 00       	mov    edx,0x1
c0007ec8:	e8 f1 9b ff ff       	call   c0001abe <st_word>
c0007ecd:	8d 45 32             	lea    eax,[ebp+0x32]
c0007ed0:	ba 06 00 00 00       	mov    edx,0x6
c0007ed5:	e8 e4 9b ff ff       	call   c0001abe <st_word>
c0007eda:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0007ede:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0007ee2:	8d 45 47             	lea    eax,[ebp+0x47]
c0007ee5:	b9 13 00 00 00       	mov    ecx,0x13
c0007eea:	ba 8e 05 02 c0       	mov    edx,0xc002058e
c0007eef:	eb 2f                	jmp    c0007f20 <f_mkfs+0xe0d>
c0007ef1:	8d 45 27             	lea    eax,[ebp+0x27]
c0007ef4:	ba 00 00 21 50       	mov    edx,0x50210000
c0007ef9:	e8 c4 9b ff ff       	call   c0001ac2 <st_dword>
c0007efe:	8d 45 16             	lea    eax,[ebp+0x16]
c0007f01:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0007f06:	e8 b3 9b ff ff       	call   c0001abe <st_word>
c0007f0b:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0007f0f:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0007f13:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0007f16:	b9 13 00 00 00       	mov    ecx,0x13
c0007f1b:	ba a2 05 02 c0       	mov    edx,0xc00205a2
c0007f20:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c0007f26:	e8 a0 9b ff ff       	call   c0001acb <mem_cpy>
c0007f2b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007f30:	89 f0                	mov    eax,esi
c0007f32:	e8 87 9b ff ff       	call   c0001abe <st_word>
c0007f37:	83 ec 0c             	sub    esp,0xc
c0007f3a:	6a 01                	push   0x1
c0007f3c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f40:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0007f44:	55                   	push   ebp
c0007f45:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f49:	e8 c9 9a ff ff       	call   c0001a17 <disk_write>
c0007f4e:	83 c4 20             	add    esp,0x20
c0007f51:	85 c0                	test   eax,eax
c0007f53:	0f 85 67 02 00 00    	jne    c00081c0 <f_mkfs+0x10ad>
c0007f59:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f5e:	0f 85 b7 00 00 00    	jne    c000801b <f_mkfs+0xf08>
c0007f64:	83 ec 0c             	sub    esp,0xc
c0007f67:	6a 01                	push   0x1
c0007f69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007f6d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007f71:	83 c0 06             	add    eax,0x6
c0007f74:	83 d2 00             	adc    edx,0x0
c0007f77:	52                   	push   edx
c0007f78:	50                   	push   eax
c0007f79:	55                   	push   ebp
c0007f7a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007f7e:	e8 94 9a ff ff       	call   c0001a17 <disk_write>
c0007f83:	83 c4 20             	add    esp,0x20
c0007f86:	b9 00 02 00 00       	mov    ecx,0x200
c0007f8b:	31 d2                	xor    edx,edx
c0007f8d:	89 e8                	mov    eax,ebp
c0007f8f:	e8 4c 9b ff ff       	call   c0001ae0 <mem_set>
c0007f94:	ba 52 52 61 41       	mov    edx,0x41615252
c0007f99:	89 e8                	mov    eax,ebp
c0007f9b:	e8 22 9b ff ff       	call   c0001ac2 <st_dword>
c0007fa0:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0007fa6:	ba 72 72 41 61       	mov    edx,0x61417272
c0007fab:	e8 12 9b ff ff       	call   c0001ac2 <st_dword>
c0007fb0:	8d 53 ff             	lea    edx,[ebx-0x1]
c0007fb3:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c0007fb9:	e8 04 9b ff ff       	call   c0001ac2 <st_dword>
c0007fbe:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0007fc4:	ba 02 00 00 00       	mov    edx,0x2
c0007fc9:	e8 f4 9a ff ff       	call   c0001ac2 <st_dword>
c0007fce:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007fd3:	89 f0                	mov    eax,esi
c0007fd5:	e8 e4 9a ff ff       	call   c0001abe <st_word>
c0007fda:	83 ec 0c             	sub    esp,0xc
c0007fdd:	6a 01                	push   0x1
c0007fdf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007fe3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007fe7:	83 c0 07             	add    eax,0x7
c0007fea:	83 d2 00             	adc    edx,0x0
c0007fed:	52                   	push   edx
c0007fee:	50                   	push   eax
c0007fef:	55                   	push   ebp
c0007ff0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ff4:	e8 1e 9a ff ff       	call   c0001a17 <disk_write>
c0007ff9:	83 c4 14             	add    esp,0x14
c0007ffc:	6a 01                	push   0x1
c0007ffe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008002:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008006:	83 c0 01             	add    eax,0x1
c0008009:	83 d2 00             	adc    edx,0x0
c000800c:	52                   	push   edx
c000800d:	50                   	push   eax
c000800e:	55                   	push   ebp
c000800f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008013:	e8 ff 99 ff ff       	call   c0001a17 <disk_write>
c0008018:	83 c4 20             	add    esp,0x20
c000801b:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008022:	31 d2                	xor    edx,edx
c0008024:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000802a:	31 db                	xor    ebx,ebx
c000802c:	89 e8                	mov    eax,ebp
c000802e:	e8 ad 9a ff ff       	call   c0001ae0 <mem_set>
c0008033:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000803a:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000803f:	0f 94 c3             	sete   bl
c0008042:	4b                   	dec    ebx
c0008043:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c0008049:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c000804f:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008054:	75 21                	jne    c0008077 <f_mkfs+0xf64>
c0008056:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000805b:	89 e8                	mov    eax,ebp
c000805d:	e8 60 9a ff ff       	call   c0001ac2 <st_dword>
c0008062:	8d 45 04             	lea    eax,[ebp+0x4]
c0008065:	83 ca ff             	or     edx,0xffffffff
c0008068:	e8 55 9a ff ff       	call   c0001ac2 <st_dword>
c000806d:	8d 45 08             	lea    eax,[ebp+0x8]
c0008070:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0008075:	eb 04                	jmp    c000807b <f_mkfs+0xf68>
c0008077:	89 da                	mov    edx,ebx
c0008079:	89 e8                	mov    eax,ebp
c000807b:	e8 42 9a ff ff       	call   c0001ac2 <st_dword>
c0008080:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008084:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008088:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000808c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008090:	39 ce                	cmp    esi,ecx
c0008092:	76 02                	jbe    c0008096 <f_mkfs+0xf83>
c0008094:	89 ce                	mov    esi,ecx
c0008096:	83 ec 0c             	sub    esp,0xc
c0008099:	56                   	push   esi
c000809a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000809e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00080a2:	55                   	push   ebp
c00080a3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00080a7:	e8 6b 99 ff ff       	call   c0001a17 <disk_write>
c00080ac:	83 c4 20             	add    esp,0x20
c00080af:	85 c0                	test   eax,eax
c00080b1:	0f 85 09 01 00 00    	jne    c00081c0 <f_mkfs+0x10ad>
c00080b7:	31 d2                	xor    edx,edx
c00080b9:	b9 00 02 00 00       	mov    ecx,0x200
c00080be:	89 e8                	mov    eax,ebp
c00080c0:	e8 1b 9a ff ff       	call   c0001ae0 <mem_set>
c00080c5:	31 d2                	xor    edx,edx
c00080c7:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c00080cb:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c00080cf:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00080d3:	75 b3                	jne    c0008088 <f_mkfs+0xf75>
c00080d5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00080d8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00080df:	40                   	inc    eax
c00080e0:	39 44 24 50          	cmp    DWORD PTR [esp+0x50],eax
c00080e4:	0f 87 65 ff ff ff    	ja     c000804f <f_mkfs+0xf3c>
c00080ea:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080ef:	74 04                	je     c00080f5 <f_mkfs+0xfe2>
c00080f1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00080f5:	89 fb                	mov    ebx,edi
c00080f7:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c00080fb:	76 04                	jbe    c0008101 <f_mkfs+0xfee>
c00080fd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008101:	83 ec 0c             	sub    esp,0xc
c0008104:	53                   	push   ebx
c0008105:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008109:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000810d:	55                   	push   ebp
c000810e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008112:	e8 00 99 ff ff       	call   c0001a17 <disk_write>
c0008117:	83 c4 20             	add    esp,0x20
c000811a:	85 c0                	test   eax,eax
c000811c:	0f 85 9e 00 00 00    	jne    c00081c0 <f_mkfs+0x10ad>
c0008122:	31 d2                	xor    edx,edx
c0008124:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c0008128:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000812c:	29 df                	sub    edi,ebx
c000812e:	75 c5                	jne    c00080f5 <f_mkfs+0xfe2>
c0008130:	b1 0c                	mov    cl,0xc
c0008132:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008137:	74 1d                	je     c0008156 <f_mkfs+0x1043>
c0008139:	b8 ff ff 00 00       	mov    eax,0xffff
c000813e:	b1 06                	mov    cl,0x6
c0008140:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008144:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c0008148:	72 0c                	jb     c0008156 <f_mkfs+0x1043>
c000814a:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c000814f:	0f 94 c1             	sete   cl
c0008152:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008156:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000815b:	75 4c                	jne    c00081a9 <f_mkfs+0x1096>
c000815d:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0008161:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0008165:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c000816c:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c0008173:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c000817e:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c0008189:	83 ec 0c             	sub    esp,0xc
c000818c:	0f b6 c9             	movzx  ecx,cl
c000818f:	55                   	push   ebp
c0008190:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008194:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c000819b:	e8 58 c2 ff ff       	call   c00043f8 <create_partition>
c00081a0:	83 c4 10             	add    esp,0x10
c00081a3:	89 c3                	mov    ebx,eax
c00081a5:	85 c0                	test   eax,eax
c00081a7:	75 34                	jne    c00081dd <f_mkfs+0x10ca>
c00081a9:	50                   	push   eax
c00081aa:	31 db                	xor    ebx,ebx
c00081ac:	6a 00                	push   0x0
c00081ae:	6a 00                	push   0x0
c00081b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00081b4:	e8 74 98 ff ff       	call   c0001a2d <disk_ioctl>
c00081b9:	83 c4 10             	add    esp,0x10
c00081bc:	85 c0                	test   eax,eax
c00081be:	74 1d                	je     c00081dd <f_mkfs+0x10ca>
c00081c0:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081c8:	75 0c                	jne    c00081d6 <f_mkfs+0x10c3>
c00081ca:	83 ec 0c             	sub    esp,0xc
c00081cd:	55                   	push   ebp
c00081ce:	e8 75 00 00 00       	call   c0008248 <ff_memfree>
c00081d3:	83 c4 10             	add    esp,0x10
c00081d6:	bb 01 00 00 00       	mov    ebx,0x1
c00081db:	eb 48                	jmp    c0008225 <f_mkfs+0x1112>
c00081dd:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c00081e5:	75 3e                	jne    c0008225 <f_mkfs+0x1112>
c00081e7:	83 ec 0c             	sub    esp,0xc
c00081ea:	55                   	push   ebp
c00081eb:	e8 58 00 00 00       	call   c0008248 <ff_memfree>
c00081f0:	83 c4 10             	add    esp,0x10
c00081f3:	eb 30                	jmp    c0008225 <f_mkfs+0x1112>
c00081f5:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c00081fa:	0f 85 eb fa ff ff    	jne    c0007ceb <f_mkfs+0xbd8>
c0008200:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008204:	81 ff 80 00 00 00    	cmp    edi,0x80
c000820a:	0f 86 b8 f9 ff ff    	jbe    c0007bc8 <f_mkfs+0xab5>
c0008210:	e9 bf fb ff ff       	jmp    c0007dd4 <f_mkfs+0xcc1>
c0008215:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000821a:	0f 85 c0 fa ff ff    	jne    c0007ce0 <f_mkfs+0xbcd>
c0008220:	e9 af fb ff ff       	jmp    c0007dd4 <f_mkfs+0xcc1>
c0008225:	81 c4 9c 00 00 00    	add    esp,0x9c
c000822b:	89 d8                	mov    eax,ebx
c000822d:	5b                   	pop    ebx
c000822e:	5e                   	pop    esi
c000822f:	5f                   	pop    edi
c0008230:	5d                   	pop    ebp
c0008231:	c3                   	ret    

c0008232 <ff_memalloc>:
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	83 ec 0c             	sub    esp,0xc
c0008238:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000823c:	e8 9e 3d 00 00       	call   c000bfdf <malloc>
c0008241:	83 c4 10             	add    esp,0x10
c0008244:	83 c4 0c             	add    esp,0xc
c0008247:	c3                   	ret    

c0008248 <ff_memfree>:
c0008248:	83 ec 0c             	sub    esp,0xc
c000824b:	83 ec 0c             	sub    esp,0xc
c000824e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008252:	e8 98 3d 00 00       	call   c000bfef <free>
c0008257:	83 c4 10             	add    esp,0x10
c000825a:	90                   	nop
c000825b:	83 c4 0c             	add    esp,0xc
c000825e:	c3                   	ret    

c000825f <ff_uni2oem>:
c000825f:	83 ec 14             	sub    esp,0x14
c0008262:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008266:	66 89 04 24          	mov    WORD PTR [esp],ax
c000826a:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008271:	c7 44 24 0c c0 08 02 c0 	mov    DWORD PTR [esp+0xc],0xc00208c0
c0008279:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c000827e:	77 0b                	ja     c000828b <ff_uni2oem+0x2c>
c0008280:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008284:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008289:	eb 61                	jmp    c00082ec <ff_uni2oem+0x8d>
c000828b:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0008293:	77 57                	ja     c00082ec <ff_uni2oem+0x8d>
c0008295:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000829b:	75 4f                	jne    c00082ec <ff_uni2oem+0x8d>
c000829d:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00082a4:	eb 0b                	jmp    c00082b1 <ff_uni2oem+0x52>
c00082a6:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082ab:	40                   	inc    eax
c00082ac:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082b1:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00082b7:	77 21                	ja     c00082da <ff_uni2oem+0x7b>
c00082b9:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082be:	25 ff ff 00 00       	and    eax,0xffff
c00082c3:	8d 14 00             	lea    edx,[eax+eax*1]
c00082c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ca:	01 d0                	add    eax,edx
c00082cc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00082cf:	25 ff ff 00 00       	and    eax,0xffff
c00082d4:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00082d8:	75 cc                	jne    c00082a6 <ff_uni2oem+0x47>
c00082da:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082df:	83 e8 80             	sub    eax,0xffffff80
c00082e2:	25 ff 00 00 00       	and    eax,0xff
c00082e7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00082ec:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00082f1:	83 c4 14             	add    esp,0x14
c00082f4:	c3                   	ret    

c00082f5 <ff_oem2uni>:
c00082f5:	83 ec 18             	sub    esp,0x18
c00082f8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00082fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008300:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008305:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008309:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0008310:	c7 44 24 10 c0 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc00208c0
c0008318:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000831e:	77 0b                	ja     c000832b <ff_oem2uni+0x36>
c0008320:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008324:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008329:	eb 30                	jmp    c000835b <ff_oem2uni+0x66>
c000832b:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0008331:	75 28                	jne    c000835b <ff_oem2uni+0x66>
c0008333:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c000833a:	77 1f                	ja     c000835b <ff_oem2uni+0x66>
c000833c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008340:	25 ff ff 00 00       	and    eax,0xffff
c0008345:	05 80 ff ff 7f       	add    eax,0x7fffff80
c000834a:	8d 14 00             	lea    edx,[eax+eax*1]
c000834d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008351:	01 d0                	add    eax,edx
c0008353:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008356:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c000835b:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0008360:	83 c4 18             	add    esp,0x18
c0008363:	c3                   	ret    

c0008364 <ff_wtoupper>:
c0008364:	83 ec 10             	sub    esp,0x10
c0008367:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000836f:	0f 87 62 01 00 00    	ja     c00084d7 <ff_wtoupper+0x173>
c0008375:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008379:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000837e:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0008385:	77 07                	ja     c000838e <ff_wtoupper+0x2a>
c0008387:	b8 c0 06 02 c0       	mov    eax,0xc00206c0
c000838c:	eb 05                	jmp    c0008393 <ff_wtoupper+0x2f>
c000838e:	b8 00 06 02 c0       	mov    eax,0xc0020600
c0008393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008397:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000839b:	8d 50 02             	lea    edx,[eax+0x2]
c000839e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083a2:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083a5:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00083aa:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00083b0:	0f 84 13 01 00 00    	je     c00084c9 <ff_wtoupper+0x165>
c00083b6:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083bb:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00083c0:	0f 82 03 01 00 00    	jb     c00084c9 <ff_wtoupper+0x165>
c00083c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083ca:	8d 50 02             	lea    edx,[eax+0x2]
c00083cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00083d1:	66 8b 00             	mov    ax,WORD PTR [eax]
c00083d4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00083d9:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00083de:	66 c1 e8 08          	shr    ax,0x8
c00083e2:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c00083e7:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c00083ee:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00083f3:	31 d2                	xor    edx,edx
c00083f5:	66 89 c2             	mov    dx,ax
c00083f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083fc:	31 c9                	xor    ecx,ecx
c00083fe:	66 89 c1             	mov    cx,ax
c0008401:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008406:	25 ff ff 00 00       	and    eax,0xffff
c000840b:	01 c8                	add    eax,ecx
c000840d:	39 c2                	cmp    edx,eax
c000840f:	0f 8d 92 00 00 00    	jge    c00084a7 <ff_wtoupper+0x143>
c0008415:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008419:	25 ff ff 00 00       	and    eax,0xffff
c000841e:	83 f8 08             	cmp    eax,0x8
c0008421:	0f 87 a1 00 00 00    	ja     c00084c8 <ff_wtoupper+0x164>
c0008427:	8b 04 85 c0 05 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfa40]
c000842e:	ff e0                	jmp    eax
c0008430:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008435:	31 d2                	xor    edx,edx
c0008437:	66 89 c2             	mov    dx,ax
c000843a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000843e:	25 ff ff 00 00       	and    eax,0xffff
c0008443:	29 c2                	sub    edx,eax
c0008445:	89 d0                	mov    eax,edx
c0008447:	8d 14 00             	lea    edx,[eax+eax*1]
c000844a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000844e:	01 d0                	add    eax,edx
c0008450:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008453:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008458:	eb 4b                	jmp    c00084a5 <ff_wtoupper+0x141>
c000845a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000845f:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008463:	83 e0 01             	and    eax,0x1
c0008466:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000846b:	eb 38                	jmp    c00084a5 <ff_wtoupper+0x141>
c000846d:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008473:	eb 30                	jmp    c00084a5 <ff_wtoupper+0x141>
c0008475:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000847b:	eb 28                	jmp    c00084a5 <ff_wtoupper+0x141>
c000847d:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0008483:	eb 20                	jmp    c00084a5 <ff_wtoupper+0x141>
c0008485:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c000848b:	eb 18                	jmp    c00084a5 <ff_wtoupper+0x141>
c000848d:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0008493:	eb 10                	jmp    c00084a5 <ff_wtoupper+0x141>
c0008495:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c000849b:	eb 08                	jmp    c00084a5 <ff_wtoupper+0x141>
c000849d:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00084a4:	90                   	nop
c00084a5:	eb 21                	jmp    c00084c8 <ff_wtoupper+0x164>
c00084a7:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00084ad:	0f 85 e4 fe ff ff    	jne    c0008397 <ff_wtoupper+0x33>
c00084b3:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c00084b8:	25 ff ff 00 00       	and    eax,0xffff
c00084bd:	01 c0                	add    eax,eax
c00084bf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00084c3:	e9 cf fe ff ff       	jmp    c0008397 <ff_wtoupper+0x33>
c00084c8:	90                   	nop
c00084c9:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00084ce:	25 ff ff 00 00       	and    eax,0xffff
c00084d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00084d7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	c3                   	ret    

c00084df <is_bad_src_ratio>:
c00084df:	83 ec 0c             	sub    esp,0xc
c00084e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00084e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084ed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00084f1:	dd 04 24             	fld    QWORD PTR [esp]
c00084f4:	dd 05 80 0e 02 c0    	fld    QWORD PTR ds:0xc0020e80
c00084fa:	de d9                	fcompp 
c00084fc:	df e0                	fnstsw ax
c00084fe:	f6 c4 45             	test   ah,0x45
c0008501:	74 10                	je     c0008513 <is_bad_src_ratio+0x34>
c0008503:	dd 04 24             	fld    QWORD PTR [esp]
c0008506:	dc 1d 88 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e88
c000850c:	df e0                	fnstsw ax
c000850e:	f6 c4 45             	test   ah,0x45
c0008511:	75 07                	jne    c000851a <is_bad_src_ratio+0x3b>
c0008513:	b8 01 00 00 00       	mov    eax,0x1
c0008518:	eb 05                	jmp    c000851f <is_bad_src_ratio+0x40>
c000851a:	b8 00 00 00 00       	mov    eax,0x0
c000851f:	83 c4 0c             	add    esp,0xc
c0008522:	c3                   	ret    

c0008523 <psrc_set_converter>:
c0008523:	56                   	push   esi
c0008524:	89 d6                	mov    esi,edx
c0008526:	53                   	push   ebx
c0008527:	89 c3                	mov    ebx,eax
c0008529:	83 ec 0c             	sub    esp,0xc
c000852c:	52                   	push   edx
c000852d:	50                   	push   eax
c000852e:	e8 21 24 00 00       	call   c000a954 <sinc_set_converter>
c0008533:	83 c4 10             	add    esp,0x10
c0008536:	85 c0                	test   eax,eax
c0008538:	74 25                	je     c000855f <psrc_set_converter+0x3c>
c000853a:	50                   	push   eax
c000853b:	50                   	push   eax
c000853c:	56                   	push   esi
c000853d:	53                   	push   ebx
c000853e:	e8 1c 28 00 00       	call   c000ad5f <zoh_set_converter>
c0008543:	83 c4 10             	add    esp,0x10
c0008546:	85 c0                	test   eax,eax
c0008548:	74 15                	je     c000855f <psrc_set_converter+0x3c>
c000854a:	51                   	push   ecx
c000854b:	51                   	push   ecx
c000854c:	56                   	push   esi
c000854d:	53                   	push   ebx
c000854e:	e8 0c 0a 00 00       	call   c0008f5f <linear_set_converter>
c0008553:	83 c4 10             	add    esp,0x10
c0008556:	ba 0a 00 00 00       	mov    edx,0xa
c000855b:	85 c0                	test   eax,eax
c000855d:	75 02                	jne    c0008561 <psrc_set_converter+0x3e>
c000855f:	31 d2                	xor    edx,edx
c0008561:	89 d0                	mov    eax,edx
c0008563:	5a                   	pop    edx
c0008564:	5b                   	pop    ebx
c0008565:	5e                   	pop    esi
c0008566:	c3                   	ret    

c0008567 <src_delete>:
c0008567:	53                   	push   ebx
c0008568:	83 ec 08             	sub    esp,0x8
c000856b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000856f:	85 db                	test   ebx,ebx
c0008571:	74 29                	je     c000859c <src_delete+0x35>
c0008573:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008576:	85 c0                	test   eax,eax
c0008578:	74 0c                	je     c0008586 <src_delete+0x1f>
c000857a:	83 ec 0c             	sub    esp,0xc
c000857d:	50                   	push   eax
c000857e:	e8 6c 3a 00 00       	call   c000bfef <free>
c0008583:	83 c4 10             	add    esp,0x10
c0008586:	50                   	push   eax
c0008587:	6a 3c                	push   0x3c
c0008589:	6a 00                	push   0x0
c000858b:	53                   	push   ebx
c000858c:	e8 30 81 ff ff       	call   c00006c1 <memset>
c0008591:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008594:	e8 56 3a 00 00       	call   c000bfef <free>
c0008599:	83 c4 10             	add    esp,0x10
c000859c:	83 c4 08             	add    esp,0x8
c000859f:	31 c0                	xor    eax,eax
c00085a1:	5b                   	pop    ebx
c00085a2:	c3                   	ret    

c00085a3 <src_process>:
c00085a3:	56                   	push   esi
c00085a4:	53                   	push   ebx
c00085a5:	53                   	push   ebx
c00085a6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00085aa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00085ae:	85 f6                	test   esi,esi
c00085b0:	0f 84 e2 00 00 00    	je     c0008698 <src_process+0xf5>
c00085b6:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00085ba:	0f 84 df 00 00 00    	je     c000869f <src_process+0xfc>
c00085c0:	83 7e 24 00          	cmp    DWORD PTR [esi+0x24],0x0
c00085c4:	0f 84 d5 00 00 00    	je     c000869f <src_process+0xfc>
c00085ca:	81 7e 18 2b 02 00 00 	cmp    DWORD PTR [esi+0x18],0x22b
c00085d1:	0f 85 cf 00 00 00    	jne    c00086a6 <src_process+0x103>
c00085d7:	85 db                	test   ebx,ebx
c00085d9:	0f 84 ce 00 00 00    	je     c00086ad <src_process+0x10a>
c00085df:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00085e2:	0f 84 cc 00 00 00    	je     c00086b4 <src_process+0x111>
c00085e8:	83 7b 04 00          	cmp    DWORD PTR [ebx+0x4],0x0
c00085ec:	0f 84 c2 00 00 00    	je     c00086b4 <src_process+0x111>
c00085f2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00085f5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00085f8:	e8 e2 fe ff ff       	call   c00084df <is_bad_src_ratio>
c00085fd:	5a                   	pop    edx
c00085fe:	85 c0                	test   eax,eax
c0008600:	59                   	pop    ecx
c0008601:	0f 85 b4 00 00 00    	jne    c00086bb <src_process+0x118>
c0008607:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000860b:	79 07                	jns    c0008614 <src_process+0x71>
c000860d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008614:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c0008618:	79 07                	jns    c0008621 <src_process+0x7e>
c000861a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008621:	8b 13                	mov    edx,DWORD PTR [ebx]
c0008623:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008626:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0008629:	39 ca                	cmp    edx,ecx
c000862b:	73 0b                	jae    c0008638 <src_process+0x95>
c000862d:	0f af 43 08          	imul   eax,DWORD PTR [ebx+0x8]
c0008631:	8d 04 82             	lea    eax,[edx+eax*4]
c0008634:	39 c1                	cmp    ecx,eax
c0008636:	eb 09                	jmp    c0008641 <src_process+0x9e>
c0008638:	0f af 43 0c          	imul   eax,DWORD PTR [ebx+0xc]
c000863c:	8d 04 81             	lea    eax,[ecx+eax*4]
c000863f:	39 c2                	cmp    edx,eax
c0008641:	72 7f                	jb     c00086c2 <src_process+0x11f>
c0008643:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000864a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008651:	d9 05 a0 0e 02 c0    	fld    DWORD PTR ds:0xc0020ea0
c0008657:	dc 1e                	fcomp  QWORD PTR [esi]
c0008659:	df e0                	fnstsw ax
c000865b:	9e                   	sahf   
c000865c:	76 05                	jbe    c0008663 <src_process+0xc0>
c000865e:	dd 43 1c             	fld    QWORD PTR [ebx+0x1c]
c0008661:	dd 1e                	fstp   QWORD PTR [esi]
c0008663:	dd 06                	fld    QWORD PTR [esi]
c0008665:	dc 63 1c             	fsub   QWORD PTR [ebx+0x1c]
c0008668:	83 ec 10             	sub    esp,0x10
c000866b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000866e:	e8 bd 70 01 00       	call   c001f730 <fabs>
c0008673:	83 c4 10             	add    esp,0x10
c0008676:	dd 05 90 0e 02 c0    	fld    QWORD PTR ds:0xc0020e90
c000867c:	de d9                	fcompp 
c000867e:	df e0                	fnstsw ax
c0008680:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0008684:	9e                   	sahf   
c0008685:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0008689:	76 05                	jbe    c0008690 <src_process+0xed>
c000868b:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c000868e:	eb 03                	jmp    c0008693 <src_process+0xf0>
c0008690:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0008693:	59                   	pop    ecx
c0008694:	5b                   	pop    ebx
c0008695:	5e                   	pop    esi
c0008696:	ff e0                	jmp    eax
c0008698:	b8 02 00 00 00       	mov    eax,0x2
c000869d:	eb 28                	jmp    c00086c7 <src_process+0x124>
c000869f:	b8 07 00 00 00       	mov    eax,0x7
c00086a4:	eb 21                	jmp    c00086c7 <src_process+0x124>
c00086a6:	b8 12 00 00 00       	mov    eax,0x12
c00086ab:	eb 1a                	jmp    c00086c7 <src_process+0x124>
c00086ad:	b8 03 00 00 00       	mov    eax,0x3
c00086b2:	eb 13                	jmp    c00086c7 <src_process+0x124>
c00086b4:	b8 04 00 00 00       	mov    eax,0x4
c00086b9:	eb 0c                	jmp    c00086c7 <src_process+0x124>
c00086bb:	b8 06 00 00 00       	mov    eax,0x6
c00086c0:	eb 05                	jmp    c00086c7 <src_process+0x124>
c00086c2:	b8 10 00 00 00       	mov    eax,0x10
c00086c7:	5a                   	pop    edx
c00086c8:	5b                   	pop    ebx
c00086c9:	5e                   	pop    esi
c00086ca:	c3                   	ret    

c00086cb <src_callback_read>:
c00086cb:	55                   	push   ebp
c00086cc:	57                   	push   edi
c00086cd:	56                   	push   esi
c00086ce:	53                   	push   ebx
c00086cf:	83 ec 4c             	sub    esp,0x4c
c00086d2:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00086d6:	8b 7c 24 6c          	mov    edi,DWORD PTR [esp+0x6c]
c00086da:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00086de:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00086e2:	85 ff                	test   edi,edi
c00086e4:	0f 8e 36 01 00 00    	jle    c0008820 <src_callback_read+0x155>
c00086ea:	85 db                	test   ebx,ebx
c00086ec:	0f 84 2e 01 00 00    	je     c0008820 <src_callback_read+0x155>
c00086f2:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c00086f9:	74 0c                	je     c0008707 <src_callback_read+0x3c>
c00086fb:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008702:	e9 19 01 00 00       	jmp    c0008820 <src_callback_read+0x155>
c0008707:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000870b:	75 0c                	jne    c0008719 <src_callback_read+0x4e>
c000870d:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008714:	e9 07 01 00 00       	jmp    c0008820 <src_callback_read+0x155>
c0008719:	51                   	push   ecx
c000871a:	6a 24                	push   0x24
c000871c:	6a 00                	push   0x0
c000871e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0008722:	50                   	push   eax
c0008723:	e8 99 7f ff ff       	call   c00006c1 <memset>
c0008728:	5e                   	pop    esi
c0008729:	5d                   	pop    ebp
c000872a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000872e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008732:	e8 a8 fd ff ff       	call   c00084df <is_bad_src_ratio>
c0008737:	83 c4 10             	add    esp,0x10
c000873a:	85 c0                	test   eax,eax
c000873c:	74 0c                	je     c000874a <src_callback_read+0x7f>
c000873e:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008745:	e9 d6 00 00 00       	jmp    c0008820 <src_callback_read+0x155>
c000874a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000874e:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c0008752:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008756:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000875a:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000875d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008761:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0008764:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0008768:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000876c:	31 f6                	xor    esi,esi
c000876e:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0008773:	75 30                	jne    c00087a5 <src_callback_read+0xda>
c0008775:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008779:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000877d:	52                   	push   edx
c000877e:	52                   	push   edx
c000877f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0008783:	50                   	push   eax
c0008784:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008787:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c000878a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000878e:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008792:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0008796:	83 c4 10             	add    esp,0x10
c0008799:	85 c0                	test   eax,eax
c000879b:	75 08                	jne    c00087a5 <src_callback_read+0xda>
c000879d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00087a5:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c00087ac:	50                   	push   eax
c00087ad:	50                   	push   eax
c00087ae:	8d 44 24 24          	lea    eax,[esp+0x24]
c00087b2:	50                   	push   eax
c00087b3:	53                   	push   ebx
c00087b4:	e8 ea fd ff ff       	call   c00085a3 <src_process>
c00087b9:	83 c4 10             	add    esp,0x10
c00087bc:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00087c3:	85 c0                	test   eax,eax
c00087c5:	75 42                	jne    c0008809 <src_callback_read+0x13e>
c00087c7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c00087cb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00087ce:	89 e9                	mov    ecx,ebp
c00087d0:	29 6c 24 24          	sub    DWORD PTR [esp+0x24],ebp
c00087d4:	0f af ca             	imul   ecx,edx
c00087d7:	c1 e1 02             	shl    ecx,0x2
c00087da:	01 4c 24 1c          	add    DWORD PTR [esp+0x1c],ecx
c00087de:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00087e2:	0f af d1             	imul   edx,ecx
c00087e5:	c1 e2 02             	shl    edx,0x2
c00087e8:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
c00087ec:	01 54 24 20          	add    DWORD PTR [esp+0x20],edx
c00087f0:	8d 14 31             	lea    edx,[ecx+esi*1]
c00087f3:	83 7c 24 34 01       	cmp    DWORD PTR [esp+0x34],0x1
c00087f8:	75 04                	jne    c00087fe <src_callback_read+0x133>
c00087fa:	85 c9                	test   ecx,ecx
c00087fc:	74 0b                	je     c0008809 <src_callback_read+0x13e>
c00087fe:	39 d7                	cmp    edi,edx
c0008800:	7e 09                	jle    c000880b <src_callback_read+0x140>
c0008802:	89 d6                	mov    esi,edx
c0008804:	e9 65 ff ff ff       	jmp    c000876e <src_callback_read+0xa3>
c0008809:	89 f2                	mov    edx,esi
c000880b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000880f:	85 c0                	test   eax,eax
c0008811:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008814:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0008818:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c000881b:	74 05                	je     c0008822 <src_callback_read+0x157>
c000881d:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008820:	31 d2                	xor    edx,edx
c0008822:	83 c4 4c             	add    esp,0x4c
c0008825:	89 d0                	mov    eax,edx
c0008827:	5b                   	pop    ebx
c0008828:	5e                   	pop    esi
c0008829:	5f                   	pop    edi
c000882a:	5d                   	pop    ebp
c000882b:	c3                   	ret    

c000882c <src_set_ratio>:
c000882c:	53                   	push   ebx
c000882d:	b8 02 00 00 00       	mov    eax,0x2
c0008832:	83 ec 08             	sub    esp,0x8
c0008835:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008839:	dd 44 24 14          	fld    QWORD PTR [esp+0x14]
c000883d:	85 db                	test   ebx,ebx
c000883f:	74 33                	je     c0008874 <src_set_ratio+0x48>
c0008841:	b8 07 00 00 00       	mov    eax,0x7
c0008846:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c000884a:	74 2c                	je     c0008878 <src_set_ratio+0x4c>
c000884c:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008850:	74 2a                	je     c000887c <src_set_ratio+0x50>
c0008852:	50                   	push   eax
c0008853:	50                   	push   eax
c0008854:	dd 14 24             	fst    QWORD PTR [esp]
c0008857:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000885b:	e8 7f fc ff ff       	call   c00084df <is_bad_src_ratio>
c0008860:	5a                   	pop    edx
c0008861:	59                   	pop    ecx
c0008862:	85 c0                	test   eax,eax
c0008864:	75 07                	jne    c000886d <src_set_ratio+0x41>
c0008866:	dd 04 24             	fld    QWORD PTR [esp]
c0008869:	dd 1b                	fstp   QWORD PTR [ebx]
c000886b:	eb 11                	jmp    c000887e <src_set_ratio+0x52>
c000886d:	b8 06 00 00 00       	mov    eax,0x6
c0008872:	eb 0a                	jmp    c000887e <src_set_ratio+0x52>
c0008874:	dd d8                	fstp   st(0)
c0008876:	eb 06                	jmp    c000887e <src_set_ratio+0x52>
c0008878:	dd d8                	fstp   st(0)
c000887a:	eb 02                	jmp    c000887e <src_set_ratio+0x52>
c000887c:	dd d8                	fstp   st(0)
c000887e:	83 c4 08             	add    esp,0x8
c0008881:	5b                   	pop    ebx
c0008882:	c3                   	ret    

c0008883 <src_get_channels>:
c0008883:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008887:	b8 02 00 00 00       	mov    eax,0x2
c000888c:	85 d2                	test   edx,edx
c000888e:	74 14                	je     c00088a4 <src_get_channels+0x21>
c0008890:	b8 07 00 00 00       	mov    eax,0x7
c0008895:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008899:	74 09                	je     c00088a4 <src_get_channels+0x21>
c000889b:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c000889f:	74 03                	je     c00088a4 <src_get_channels+0x21>
c00088a1:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00088a4:	c3                   	ret    

c00088a5 <src_reset>:
c00088a5:	53                   	push   ebx
c00088a6:	b8 02 00 00 00       	mov    eax,0x2
c00088ab:	83 ec 08             	sub    esp,0x8
c00088ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088b2:	85 db                	test   ebx,ebx
c00088b4:	74 2e                	je     c00088e4 <src_reset+0x3f>
c00088b6:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00088b9:	85 c0                	test   eax,eax
c00088bb:	74 09                	je     c00088c6 <src_reset+0x21>
c00088bd:	83 ec 0c             	sub    esp,0xc
c00088c0:	53                   	push   ebx
c00088c1:	ff d0                	call   eax
c00088c3:	83 c4 10             	add    esp,0x10
c00088c6:	d9 ee                	fldz   
c00088c8:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c00088cf:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00088d6:	dd 53 08             	fst    QWORD PTR [ebx+0x8]
c00088d9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00088e0:	31 c0                	xor    eax,eax
c00088e2:	dd 1b                	fstp   QWORD PTR [ebx]
c00088e4:	83 c4 08             	add    esp,0x8
c00088e7:	5b                   	pop    ebx
c00088e8:	c3                   	ret    

c00088e9 <src_new>:
c00088e9:	57                   	push   edi
c00088ea:	56                   	push   esi
c00088eb:	53                   	push   ebx
c00088ec:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00088f0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00088f4:	85 f6                	test   esi,esi
c00088f6:	74 73                	je     c000896b <src_new+0x82>
c00088f8:	85 ff                	test   edi,edi
c00088fa:	7f 08                	jg     c0008904 <src_new+0x1b>
c00088fc:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008902:	eb 1e                	jmp    c0008922 <src_new+0x39>
c0008904:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c000890a:	50                   	push   eax
c000890b:	50                   	push   eax
c000890c:	6a 3c                	push   0x3c
c000890e:	6a 01                	push   0x1
c0008910:	e8 fa 36 00 00       	call   c000c00f <calloc>
c0008915:	83 c4 10             	add    esp,0x10
c0008918:	89 c3                	mov    ebx,eax
c000891a:	85 c0                	test   eax,eax
c000891c:	75 10                	jne    c000892e <src_new+0x45>
c000891e:	85 f6                	test   esi,esi
c0008920:	75 04                	jne    c0008926 <src_new+0x3d>
c0008922:	31 db                	xor    ebx,ebx
c0008924:	eb 4b                	jmp    c0008971 <src_new+0x88>
c0008926:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c000892c:	eb 43                	jmp    c0008971 <src_new+0x88>
c000892e:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008931:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008938:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000893c:	e8 e2 fb ff ff       	call   c0008523 <psrc_set_converter>
c0008941:	85 c0                	test   eax,eax
c0008943:	74 18                	je     c000895d <src_new+0x74>
c0008945:	85 f6                	test   esi,esi
c0008947:	74 06                	je     c000894f <src_new+0x66>
c0008949:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c000894f:	83 ec 0c             	sub    esp,0xc
c0008952:	53                   	push   ebx
c0008953:	31 db                	xor    ebx,ebx
c0008955:	e8 95 36 00 00       	call   c000bfef <free>
c000895a:	83 c4 10             	add    esp,0x10
c000895d:	83 ec 0c             	sub    esp,0xc
c0008960:	53                   	push   ebx
c0008961:	e8 3f ff ff ff       	call   c00088a5 <src_reset>
c0008966:	83 c4 10             	add    esp,0x10
c0008969:	eb 06                	jmp    c0008971 <src_new+0x88>
c000896b:	85 ff                	test   edi,edi
c000896d:	7f 9b                	jg     c000890a <src_new+0x21>
c000896f:	eb b1                	jmp    c0008922 <src_new+0x39>
c0008971:	89 d8                	mov    eax,ebx
c0008973:	5b                   	pop    ebx
c0008974:	5e                   	pop    esi
c0008975:	5f                   	pop    edi
c0008976:	c3                   	ret    

c0008977 <src_callback_new>:
c0008977:	56                   	push   esi
c0008978:	53                   	push   ebx
c0008979:	53                   	push   ebx
c000897a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000897e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008982:	85 f6                	test   esi,esi
c0008984:	75 0e                	jne    c0008994 <src_callback_new+0x1d>
c0008986:	31 db                	xor    ebx,ebx
c0008988:	85 c0                	test   eax,eax
c000898a:	74 47                	je     c00089d3 <src_callback_new+0x5c>
c000898c:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008992:	eb 3f                	jmp    c00089d3 <src_callback_new+0x5c>
c0008994:	85 c0                	test   eax,eax
c0008996:	74 06                	je     c000899e <src_callback_new+0x27>
c0008998:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000899e:	51                   	push   ecx
c000899f:	50                   	push   eax
c00089a0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089a4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00089a8:	e8 3c ff ff ff       	call   c00088e9 <src_new>
c00089ad:	83 c4 10             	add    esp,0x10
c00089b0:	89 c3                	mov    ebx,eax
c00089b2:	85 c0                	test   eax,eax
c00089b4:	74 1d                	je     c00089d3 <src_callback_new+0x5c>
c00089b6:	83 ec 0c             	sub    esp,0xc
c00089b9:	50                   	push   eax
c00089ba:	e8 e6 fe ff ff       	call   c00088a5 <src_reset>
c00089bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00089c3:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c00089ca:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00089cd:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00089d0:	83 c4 10             	add    esp,0x10
c00089d3:	5a                   	pop    edx
c00089d4:	89 d8                	mov    eax,ebx
c00089d6:	5b                   	pop    ebx
c00089d7:	5e                   	pop    esi
c00089d8:	c3                   	ret    

c00089d9 <src_get_name>:
c00089d9:	53                   	push   ebx
c00089da:	83 ec 14             	sub    esp,0x14
c00089dd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00089e1:	53                   	push   ebx
c00089e2:	e8 47 1f 00 00       	call   c000a92e <sinc_get_name>
c00089e7:	83 c4 10             	add    esp,0x10
c00089ea:	85 c0                	test   eax,eax
c00089ec:	75 1d                	jne    c0008a0b <src_get_name+0x32>
c00089ee:	83 ec 0c             	sub    esp,0xc
c00089f1:	53                   	push   ebx
c00089f2:	e8 4a 23 00 00       	call   c000ad41 <zoh_get_name>
c00089f7:	83 c4 10             	add    esp,0x10
c00089fa:	85 c0                	test   eax,eax
c00089fc:	75 0d                	jne    c0008a0b <src_get_name+0x32>
c00089fe:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a02:	83 c4 08             	add    esp,0x8
c0008a05:	5b                   	pop    ebx
c0008a06:	e9 36 05 00 00       	jmp    c0008f41 <linear_get_name>
c0008a0b:	83 c4 08             	add    esp,0x8
c0008a0e:	5b                   	pop    ebx
c0008a0f:	c3                   	ret    

c0008a10 <src_get_description>:
c0008a10:	53                   	push   ebx
c0008a11:	83 ec 14             	sub    esp,0x14
c0008a14:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008a18:	53                   	push   ebx
c0008a19:	e8 23 1f 00 00       	call   c000a941 <sinc_get_description>
c0008a1e:	83 c4 10             	add    esp,0x10
c0008a21:	85 c0                	test   eax,eax
c0008a23:	75 1d                	jne    c0008a42 <src_get_description+0x32>
c0008a25:	83 ec 0c             	sub    esp,0xc
c0008a28:	53                   	push   ebx
c0008a29:	e8 22 23 00 00       	call   c000ad50 <zoh_get_description>
c0008a2e:	83 c4 10             	add    esp,0x10
c0008a31:	85 c0                	test   eax,eax
c0008a33:	75 0d                	jne    c0008a42 <src_get_description+0x32>
c0008a35:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008a39:	83 c4 08             	add    esp,0x8
c0008a3c:	5b                   	pop    ebx
c0008a3d:	e9 0e 05 00 00       	jmp    c0008f50 <linear_get_description>
c0008a42:	83 c4 08             	add    esp,0x8
c0008a45:	5b                   	pop    ebx
c0008a46:	c3                   	ret    

c0008a47 <src_get_version>:
c0008a47:	b8 c0 09 02 c0       	mov    eax,0xc00209c0
c0008a4c:	c3                   	ret    

c0008a4d <src_is_valid_ratio>:
c0008a4d:	50                   	push   eax
c0008a4e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a52:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008a56:	e8 84 fa ff ff       	call   c00084df <is_bad_src_ratio>
c0008a5b:	85 c0                	test   eax,eax
c0008a5d:	0f 94 c0             	sete   al
c0008a60:	0f b6 c0             	movzx  eax,al
c0008a63:	83 c4 0c             	add    esp,0xc
c0008a66:	c3                   	ret    

c0008a67 <src_error>:
c0008a67:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a6b:	31 c0                	xor    eax,eax
c0008a6d:	85 d2                	test   edx,edx
c0008a6f:	74 03                	je     c0008a74 <src_error+0xd>
c0008a71:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008a74:	c3                   	ret    

c0008a75 <src_strerror>:
c0008a75:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008a79:	31 c0                	xor    eax,eax
c0008a7b:	83 fa 17             	cmp    edx,0x17
c0008a7e:	77 07                	ja     c0008a87 <src_strerror+0x12>
c0008a80:	8b 04 95 20 0e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf1e0]
c0008a87:	c3                   	ret    

c0008a88 <src_simple>:
c0008a88:	56                   	push   esi
c0008a89:	53                   	push   ebx
c0008a8a:	83 ec 18             	sub    esp,0x18
c0008a8d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a91:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a95:	50                   	push   eax
c0008a96:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a9a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008a9e:	e8 46 fe ff ff       	call   c00088e9 <src_new>
c0008aa3:	83 c4 10             	add    esp,0x10
c0008aa6:	85 c0                	test   eax,eax
c0008aa8:	75 06                	jne    c0008ab0 <src_simple+0x28>
c0008aaa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008aae:	eb 25                	jmp    c0008ad5 <src_simple+0x4d>
c0008ab0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008ab7:	89 c3                	mov    ebx,eax
c0008ab9:	50                   	push   eax
c0008aba:	50                   	push   eax
c0008abb:	56                   	push   esi
c0008abc:	53                   	push   ebx
c0008abd:	e8 e1 fa ff ff       	call   c00085a3 <src_process>
c0008ac2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008ac5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008ac9:	e8 99 fa ff ff       	call   c0008567 <src_delete>
c0008ace:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008ad2:	83 c4 10             	add    esp,0x10
c0008ad5:	83 c4 14             	add    esp,0x14
c0008ad8:	5b                   	pop    ebx
c0008ad9:	5e                   	pop    esi
c0008ada:	c3                   	ret    

c0008adb <src_short_to_float_array>:
c0008adb:	83 ec 0c             	sub    esp,0xc
c0008ade:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008ae2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ae6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008aea:	85 c0                	test   eax,eax
c0008aec:	74 0f                	je     c0008afd <src_short_to_float_array+0x22>
c0008aee:	48                   	dec    eax
c0008aef:	d9 05 a4 0e 02 c0    	fld    DWORD PTR ds:0xc0020ea4
c0008af5:	de 0c 42             	fimul  WORD PTR [edx+eax*2]
c0008af8:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008afb:	eb ed                	jmp    c0008aea <src_short_to_float_array+0xf>
c0008afd:	83 c4 0c             	add    esp,0xc
c0008b00:	c3                   	ret    

c0008b01 <src_float_to_short_array>:
c0008b01:	56                   	push   esi
c0008b02:	53                   	push   ebx
c0008b03:	52                   	push   edx
c0008b04:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b08:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b0c:	85 db                	test   ebx,ebx
c0008b0e:	74 51                	je     c0008b61 <src_float_to_short_array+0x60>
c0008b10:	4b                   	dec    ebx
c0008b11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b15:	d9 05 a8 0e 02 c0    	fld    DWORD PTR ds:0xc0020ea8
c0008b1b:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008b1e:	dc 15 98 0e 02 c0    	fcom   QWORD PTR ds:0xc0020e98
c0008b24:	df e0                	fnstsw ax
c0008b26:	9e                   	sahf   
c0008b27:	72 0a                	jb     c0008b33 <src_float_to_short_array+0x32>
c0008b29:	dd d8                	fstp   st(0)
c0008b2b:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008b31:	eb d9                	jmp    c0008b0c <src_float_to_short_array+0xb>
c0008b33:	d9 05 ac 0e 02 c0    	fld    DWORD PTR ds:0xc0020eac
c0008b39:	d8 d9                	fcomp  st(1)
c0008b3b:	df e0                	fnstsw ax
c0008b3d:	9e                   	sahf   
c0008b3e:	72 0a                	jb     c0008b4a <src_float_to_short_array+0x49>
c0008b40:	dd d8                	fstp   st(0)
c0008b42:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008b48:	eb c2                	jmp    c0008b0c <src_float_to_short_array+0xb>
c0008b4a:	83 ec 10             	sub    esp,0x10
c0008b4d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008b50:	e8 fb 6b 01 00       	call   c001f750 <lrint>
c0008b55:	83 c4 10             	add    esp,0x10
c0008b58:	c1 f8 10             	sar    eax,0x10
c0008b5b:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008b5f:	eb ab                	jmp    c0008b0c <src_float_to_short_array+0xb>
c0008b61:	58                   	pop    eax
c0008b62:	5b                   	pop    ebx
c0008b63:	5e                   	pop    esi
c0008b64:	c3                   	ret    

c0008b65 <src_int_to_float_array>:
c0008b65:	83 ec 0c             	sub    esp,0xc
c0008b68:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008b6c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008b70:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008b74:	85 c0                	test   eax,eax
c0008b76:	74 0f                	je     c0008b87 <src_int_to_float_array+0x22>
c0008b78:	48                   	dec    eax
c0008b79:	d9 05 b0 0e 02 c0    	fld    DWORD PTR ds:0xc0020eb0
c0008b7f:	da 0c 82             	fimul  DWORD PTR [edx+eax*4]
c0008b82:	d9 1c 81             	fstp   DWORD PTR [ecx+eax*4]
c0008b85:	eb ed                	jmp    c0008b74 <src_int_to_float_array+0xf>
c0008b87:	83 c4 0c             	add    esp,0xc
c0008b8a:	c3                   	ret    

c0008b8b <src_float_to_int_array>:
c0008b8b:	56                   	push   esi
c0008b8c:	53                   	push   ebx
c0008b8d:	52                   	push   edx
c0008b8e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008b92:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008b96:	85 db                	test   ebx,ebx
c0008b98:	74 4f                	je     c0008be9 <src_float_to_int_array+0x5e>
c0008b9a:	4b                   	dec    ebx
c0008b9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b9f:	d9 05 a8 0e 02 c0    	fld    DWORD PTR ds:0xc0020ea8
c0008ba5:	d8 0c 98             	fmul   DWORD PTR [eax+ebx*4]
c0008ba8:	dc 15 98 0e 02 c0    	fcom   QWORD PTR ds:0xc0020e98
c0008bae:	df e0                	fnstsw ax
c0008bb0:	9e                   	sahf   
c0008bb1:	72 0b                	jb     c0008bbe <src_float_to_int_array+0x33>
c0008bb3:	dd d8                	fstp   st(0)
c0008bb5:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008bbc:	eb d8                	jmp    c0008b96 <src_float_to_int_array+0xb>
c0008bbe:	d9 05 ac 0e 02 c0    	fld    DWORD PTR ds:0xc0020eac
c0008bc4:	d8 d9                	fcomp  st(1)
c0008bc6:	df e0                	fnstsw ax
c0008bc8:	9e                   	sahf   
c0008bc9:	72 0b                	jb     c0008bd6 <src_float_to_int_array+0x4b>
c0008bcb:	dd d8                	fstp   st(0)
c0008bcd:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008bd4:	eb c0                	jmp    c0008b96 <src_float_to_int_array+0xb>
c0008bd6:	83 ec 10             	sub    esp,0x10
c0008bd9:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008bdc:	e8 6f 6b 01 00       	call   c001f750 <lrint>
c0008be1:	83 c4 10             	add    esp,0x10
c0008be4:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008be7:	eb ad                	jmp    c0008b96 <src_float_to_int_array+0xb>
c0008be9:	58                   	pop    eax
c0008bea:	5b                   	pop    ebx
c0008beb:	5e                   	pop    esi
c0008bec:	c3                   	ret    

c0008bed <is_bad_src_ratio>:
c0008bed:	83 ec 0c             	sub    esp,0xc
c0008bf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf4:	89 04 24             	mov    DWORD PTR [esp],eax
c0008bf7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008bfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008bff:	dd 04 24             	fld    QWORD PTR [esp]
c0008c02:	dd 05 80 0e 02 c0    	fld    QWORD PTR ds:0xc0020e80
c0008c08:	de d9                	fcompp 
c0008c0a:	df e0                	fnstsw ax
c0008c0c:	f6 c4 45             	test   ah,0x45
c0008c0f:	74 10                	je     c0008c21 <is_bad_src_ratio+0x34>
c0008c11:	dd 04 24             	fld    QWORD PTR [esp]
c0008c14:	dc 1d 88 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e88
c0008c1a:	df e0                	fnstsw ax
c0008c1c:	f6 c4 45             	test   ah,0x45
c0008c1f:	75 07                	jne    c0008c28 <is_bad_src_ratio+0x3b>
c0008c21:	b8 01 00 00 00       	mov    eax,0x1
c0008c26:	eb 05                	jmp    c0008c2d <is_bad_src_ratio+0x40>
c0008c28:	b8 00 00 00 00       	mov    eax,0x0
c0008c2d:	83 c4 0c             	add    esp,0xc
c0008c30:	c3                   	ret    

c0008c31 <fmod_one>:
c0008c31:	83 ec 2c             	sub    esp,0x2c
c0008c34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c38:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008c3c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0008c40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008c44:	83 ec 08             	sub    esp,0x8
c0008c47:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c4b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008c4f:	e8 fc 6a 01 00       	call   c001f750 <lrint>
c0008c54:	83 c4 10             	add    esp,0x10
c0008c57:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c5b:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0008c5f:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008c63:	de e1                	fsubrp st(1),st
c0008c65:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0008c69:	d9 ee                	fldz   
c0008c6b:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0008c6f:	df e0                	fnstsw ax
c0008c71:	f6 c4 45             	test   ah,0x45
c0008c74:	75 0a                	jne    c0008c80 <fmod_one+0x4f>
c0008c76:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c7a:	d9 e8                	fld1   
c0008c7c:	de c1                	faddp  st(1),st
c0008c7e:	eb 04                	jmp    c0008c84 <fmod_one+0x53>
c0008c80:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0008c84:	83 c4 2c             	add    esp,0x2c
c0008c87:	c3                   	ret    

c0008c88 <linear_vari_process>:
c0008c88:	55                   	push   ebp
c0008c89:	57                   	push   edi
c0008c8a:	56                   	push   esi
c0008c8b:	53                   	push   ebx
c0008c8c:	83 ec 2c             	sub    esp,0x2c
c0008c8f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0008c93:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0008c97:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008c9f:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0008ca3:	0f 8e 5a 02 00 00    	jle    c0008f03 <linear_vari_process+0x27b>
c0008ca9:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c0008cac:	c7 44 24 18 05 00 00 00 	mov    DWORD PTR [esp+0x18],0x5
c0008cb4:	85 db                	test   ebx,ebx
c0008cb6:	0f 84 47 02 00 00    	je     c0008f03 <linear_vari_process+0x27b>
c0008cbc:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0008cbf:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008cc3:	74 19                	je     c0008cde <linear_vari_process+0x56>
c0008cc5:	31 d2                	xor    edx,edx
c0008cc7:	39 c2                	cmp    edx,eax
c0008cc9:	7d 0c                	jge    c0008cd7 <linear_vari_process+0x4f>
c0008ccb:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008ccd:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008cd0:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008cd4:	42                   	inc    edx
c0008cd5:	eb f0                	jmp    c0008cc7 <linear_vari_process+0x3f>
c0008cd7:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008cde:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0008ce1:	0f af d0             	imul   edx,eax
c0008ce4:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008ce7:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0008ceb:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0008cf2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008cf5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008cfc:	dd 07                	fld    QWORD PTR [edi]
c0008cfe:	dd 14 24             	fst    QWORD PTR [esp]
c0008d01:	50                   	push   eax
c0008d02:	50                   	push   eax
c0008d03:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d06:	e8 e2 fe ff ff       	call   c0008bed <is_bad_src_ratio>
c0008d0b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0008d0f:	5a                   	pop    edx
c0008d10:	59                   	pop    ecx
c0008d11:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0008d16:	0f 85 df 01 00 00    	jne    c0008efb <linear_vari_process+0x273>
c0008d1c:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c0008d1f:	d9 e8                	fld1   
c0008d21:	d8 d1                	fcom   st(1)
c0008d23:	df e0                	fnstsw ax
c0008d25:	9e                   	sahf   
c0008d26:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0008d2a:	0f 86 97 00 00 00    	jbe    c0008dc7 <linear_vari_process+0x13f>
c0008d30:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008d33:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0008d36:	0f 8d 8b 00 00 00    	jge    c0008dc7 <linear_vari_process+0x13f>
c0008d3c:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008d40:	d8 c1                	fadd   st,st(1)
c0008d42:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008d45:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c0008d48:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c0008d4b:	df e0                	fnstsw ax
c0008d4d:	9e                   	sahf   
c0008d4e:	73 77                	jae    c0008dc7 <linear_vari_process+0x13f>
c0008d50:	85 d2                	test   edx,edx
c0008d52:	7e 36                	jle    c0008d8a <linear_vari_process+0x102>
c0008d54:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008d58:	dd 07                	fld    QWORD PTR [edi]
c0008d5a:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008d5d:	83 ec 10             	sub    esp,0x10
c0008d60:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d63:	e8 c8 69 01 00       	call   c001f730 <fabs>
c0008d68:	83 c4 10             	add    esp,0x10
c0008d6b:	dc 1d f8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ef8
c0008d71:	df e0                	fnstsw ax
c0008d73:	9e                   	sahf   
c0008d74:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008d78:	76 10                	jbe    c0008d8a <linear_vari_process+0x102>
c0008d7a:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008d7d:	dc 27                	fsub   QWORD PTR [edi]
c0008d7f:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008d82:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008d85:	dc 07                	fadd   QWORD PTR [edi]
c0008d87:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008d8a:	31 c0                	xor    eax,eax
c0008d8c:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0008d8f:	7e 1f                	jle    c0008db0 <linear_vari_process+0x128>
c0008d91:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008d93:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0008d96:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c0008d9a:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0008d9e:	d8 e1                	fsub   st,st(1)
c0008da0:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0008da3:	40                   	inc    eax
c0008da4:	d8 ca                	fmul   st,st(2)
c0008da6:	de c1                	faddp  st(1),st
c0008da8:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c0008dab:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008dae:	eb dc                	jmp    c0008d8c <linear_vari_process+0x104>
c0008db0:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008db4:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008db7:	de c1                	faddp  st(1),st
c0008db9:	e9 61 ff ff ff       	jmp    c0008d1f <linear_vari_process+0x97>
c0008dbe:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0008dc2:	dc 34 24             	fdiv   QWORD PTR [esp]
c0008dc5:	de c1                	faddp  st(1),st
c0008dc7:	83 ec 10             	sub    esp,0x10
c0008dca:	dd 14 24             	fst    QWORD PTR [esp]
c0008dcd:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008dd1:	e8 5b fe ff ff       	call   c0008c31 <fmod_one>
c0008dd6:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0008dd9:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0008ddd:	d8 e1                	fsub   st,st(1)
c0008ddf:	d9 c9                	fxch   st(1)
c0008de1:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0008de5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008de8:	e8 63 69 01 00       	call   c001f750 <lrint>
c0008ded:	83 c4 10             	add    esp,0x10
c0008df0:	0f af e8             	imul   ebp,eax
c0008df3:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c0008df6:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c0008df9:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008dfd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0008e00:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0008e03:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c0008e06:	0f 8d 95 00 00 00    	jge    c0008ea1 <linear_vari_process+0x219>
c0008e0c:	d9 c0                	fld    st(0)
c0008e0e:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c0008e11:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0008e15:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c0008e19:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e1d:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c0008e21:	de d9                	fcompp 
c0008e23:	df e0                	fnstsw ax
c0008e25:	9e                   	sahf   
c0008e26:	76 79                	jbe    c0008ea1 <linear_vari_process+0x219>
c0008e28:	85 ed                	test   ebp,ebp
c0008e2a:	7e 36                	jle    c0008e62 <linear_vari_process+0x1da>
c0008e2c:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0008e30:	dd 07                	fld    QWORD PTR [edi]
c0008e32:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c0008e35:	83 ec 10             	sub    esp,0x10
c0008e38:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e3b:	e8 f0 68 01 00       	call   c001f730 <fabs>
c0008e40:	83 c4 10             	add    esp,0x10
c0008e43:	dc 1d f8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ef8
c0008e49:	df e0                	fnstsw ax
c0008e4b:	9e                   	sahf   
c0008e4c:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0008e50:	76 10                	jbe    c0008e62 <linear_vari_process+0x1da>
c0008e52:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c0008e55:	dc 27                	fsub   QWORD PTR [edi]
c0008e57:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c0008e5a:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c0008e5d:	dc 07                	fadd   QWORD PTR [edi]
c0008e5f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0008e62:	31 c0                	xor    eax,eax
c0008e64:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0008e67:	39 c2                	cmp    edx,eax
c0008e69:	0f 8e 4f ff ff ff    	jle    c0008dbe <linear_vari_process+0x136>
c0008e6f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0008e71:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0008e74:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008e78:	89 e9                	mov    ecx,ebp
c0008e7a:	29 d1                	sub    ecx,edx
c0008e7c:	01 c5                	add    ebp,eax
c0008e7e:	89 ca                	mov    edx,ecx
c0008e80:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008e84:	01 c2                	add    edx,eax
c0008e86:	40                   	inc    eax
c0008e87:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c0008e8a:	d9 04 a9             	fld    DWORD PTR [ecx+ebp*4]
c0008e8d:	d8 e1                	fsub   st,st(1)
c0008e8f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0008e92:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0008e95:	d8 ca                	fmul   st,st(2)
c0008e97:	de c1                	faddp  st(1),st
c0008e99:	d9 1c 91             	fstp   DWORD PTR [ecx+edx*4]
c0008e9c:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0008e9f:	eb c3                	jmp    c0008e64 <linear_vari_process+0x1dc>
c0008ea1:	39 d1                	cmp    ecx,edx
c0008ea3:	7d 13                	jge    c0008eb8 <linear_vari_process+0x230>
c0008ea5:	89 d0                	mov    eax,edx
c0008ea7:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0008eaa:	29 c8                	sub    eax,ecx
c0008eac:	99                   	cdq    
c0008ead:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008eb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008eb4:	da 44 24 08          	fiadd  DWORD PTR [esp+0x8]
c0008eb8:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c0008ebb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008ebe:	85 c0                	test   eax,eax
c0008ec0:	7f 1b                	jg     c0008edd <linear_vari_process+0x255>
c0008ec2:	dd 04 24             	fld    QWORD PTR [esp]
c0008ec5:	dd 1f                	fstp   QWORD PTR [edi]
c0008ec7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008eca:	99                   	cdq    
c0008ecb:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ece:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0008ed1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008ed4:	99                   	cdq    
c0008ed5:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0008ed8:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0008edb:	eb 26                	jmp    c0008f03 <linear_vari_process+0x27b>
c0008edd:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c0008ee0:	31 d2                	xor    edx,edx
c0008ee2:	29 c8                	sub    eax,ecx
c0008ee4:	c1 e0 02             	shl    eax,0x2
c0008ee7:	39 d1                	cmp    ecx,edx
c0008ee9:	7e d7                	jle    c0008ec2 <linear_vari_process+0x23a>
c0008eeb:	8b 2e                	mov    ebp,DWORD PTR [esi]
c0008eed:	d9 44 05 00          	fld    DWORD PTR [ebp+eax*1+0x0]
c0008ef1:	83 c0 04             	add    eax,0x4
c0008ef4:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c0008ef8:	42                   	inc    edx
c0008ef9:	eb ec                	jmp    c0008ee7 <linear_vari_process+0x25f>
c0008efb:	c7 44 24 18 16 00 00 00 	mov    DWORD PTR [esp+0x18],0x16
c0008f03:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008f07:	83 c4 2c             	add    esp,0x2c
c0008f0a:	5b                   	pop    ebx
c0008f0b:	5e                   	pop    esi
c0008f0c:	5f                   	pop    edi
c0008f0d:	5d                   	pop    ebp
c0008f0e:	c3                   	ret    

c0008f0f <linear_reset>:
c0008f0f:	83 ec 0c             	sub    esp,0xc
c0008f12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008f16:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0008f19:	85 c0                	test   eax,eax
c0008f1b:	74 20                	je     c0008f3d <linear_reset+0x2e>
c0008f1d:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0008f20:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c0008f27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f2a:	51                   	push   ecx
c0008f2b:	c1 e2 02             	shl    edx,0x2
c0008f2e:	83 c0 1c             	add    eax,0x1c
c0008f31:	52                   	push   edx
c0008f32:	6a 00                	push   0x0
c0008f34:	50                   	push   eax
c0008f35:	e8 87 77 ff ff       	call   c00006c1 <memset>
c0008f3a:	83 c4 10             	add    esp,0x10
c0008f3d:	83 c4 0c             	add    esp,0xc
c0008f40:	c3                   	ret    

c0008f41 <linear_get_name>:
c0008f41:	31 c0                	xor    eax,eax
c0008f43:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f48:	75 05                	jne    c0008f4f <linear_get_name+0xe>
c0008f4a:	b8 b4 0e 02 c0       	mov    eax,0xc0020eb4
c0008f4f:	c3                   	ret    

c0008f50 <linear_get_description>:
c0008f50:	31 c0                	xor    eax,eax
c0008f52:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c0008f57:	75 05                	jne    c0008f5e <linear_get_description+0xe>
c0008f59:	b8 c8 0e 02 c0       	mov    eax,0xc0020ec8
c0008f5e:	c3                   	ret    

c0008f5f <linear_set_converter>:
c0008f5f:	53                   	push   ebx
c0008f60:	b8 0a 00 00 00       	mov    eax,0xa
c0008f65:	83 ec 08             	sub    esp,0x8
c0008f68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008f6c:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0008f71:	75 6e                	jne    c0008fe1 <linear_set_converter+0x82>
c0008f73:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008f76:	85 c0                	test   eax,eax
c0008f78:	74 13                	je     c0008f8d <linear_set_converter+0x2e>
c0008f7a:	83 ec 0c             	sub    esp,0xc
c0008f7d:	50                   	push   eax
c0008f7e:	e8 6c 30 00 00       	call   c000bfef <free>
c0008f83:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0008f8a:	83 c4 10             	add    esp,0x10
c0008f8d:	50                   	push   eax
c0008f8e:	50                   	push   eax
c0008f8f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008f92:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0008f99:	50                   	push   eax
c0008f9a:	6a 01                	push   0x1
c0008f9c:	e8 6e 30 00 00       	call   c000c00f <calloc>
c0008fa1:	89 c2                	mov    edx,eax
c0008fa3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0008fa6:	83 c4 10             	add    esp,0x10
c0008fa9:	b8 01 00 00 00       	mov    eax,0x1
c0008fae:	85 d2                	test   edx,edx
c0008fb0:	74 2f                	je     c0008fe1 <linear_set_converter+0x82>
c0008fb2:	83 ec 0c             	sub    esp,0xc
c0008fb5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008fb8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008fbb:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0008fc1:	c7 43 24 88 8c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008c88
c0008fc8:	c7 43 20 88 8c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008c88
c0008fcf:	c7 43 28 0f 8f 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0008f0f
c0008fd6:	53                   	push   ebx
c0008fd7:	e8 33 ff ff ff       	call   c0008f0f <linear_reset>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	31 c0                	xor    eax,eax
c0008fe1:	83 c4 08             	add    esp,0x8
c0008fe4:	5b                   	pop    ebx
c0008fe5:	c3                   	ret    

c0008fe6 <is_bad_src_ratio>:
c0008fe6:	83 ec 0c             	sub    esp,0xc
c0008fe9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008fed:	89 04 24             	mov    DWORD PTR [esp],eax
c0008ff0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008ff4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ff8:	dd 04 24             	fld    QWORD PTR [esp]
c0008ffb:	dd 05 80 0e 02 c0    	fld    QWORD PTR ds:0xc0020e80
c0009001:	de d9                	fcompp 
c0009003:	df e0                	fnstsw ax
c0009005:	f6 c4 45             	test   ah,0x45
c0009008:	74 10                	je     c000901a <is_bad_src_ratio+0x34>
c000900a:	dd 04 24             	fld    QWORD PTR [esp]
c000900d:	dc 1d 88 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e88
c0009013:	df e0                	fnstsw ax
c0009015:	f6 c4 45             	test   ah,0x45
c0009018:	75 07                	jne    c0009021 <is_bad_src_ratio+0x3b>
c000901a:	b8 01 00 00 00       	mov    eax,0x1
c000901f:	eb 05                	jmp    c0009026 <is_bad_src_ratio+0x40>
c0009021:	b8 00 00 00 00       	mov    eax,0x0
c0009026:	83 c4 0c             	add    esp,0xc
c0009029:	c3                   	ret    

c000902a <int_to_fp>:
c000902a:	c1 e0 0c             	shl    eax,0xc
c000902d:	c3                   	ret    

c000902e <fp_to_int>:
c000902e:	c1 f8 0c             	sar    eax,0xc
c0009031:	c3                   	ret    

c0009032 <fp_fraction_part>:
c0009032:	25 ff 0f 00 00       	and    eax,0xfff
c0009037:	c3                   	ret    

c0009038 <fp_to_double>:
c0009038:	83 ec 0c             	sub    esp,0xc
c000903b:	e8 f2 ff ff ff       	call   c0009032 <fp_fraction_part>
c0009040:	d9 05 88 10 02 c0    	fld    DWORD PTR ds:0xc0021088
c0009046:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000904a:	da 4c 24 04          	fimul  DWORD PTR [esp+0x4]
c000904e:	83 c4 0c             	add    esp,0xc
c0009051:	c3                   	ret    

c0009052 <calc_output_single>:
c0009052:	55                   	push   ebp
c0009053:	57                   	push   edi
c0009054:	89 c7                	mov    edi,eax
c0009056:	56                   	push   esi
c0009057:	53                   	push   ebx
c0009058:	89 d3                	mov    ebx,edx
c000905a:	83 ec 24             	sub    esp,0x24
c000905d:	89 de                	mov    esi,ebx
c000905f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009062:	e8 c3 ff ff ff       	call   c000902a <int_to_fp>
c0009067:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c000906a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000906e:	29 c8                	sub    eax,ecx
c0009070:	99                   	cdq    
c0009071:	f7 fb                	idiv   ebx
c0009073:	0f af f0             	imul   esi,eax
c0009076:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009079:	01 ce                	add    esi,ecx
c000907b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000907f:	29 c2                	sub    edx,eax
c0009081:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0009088:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0009090:	8d 14 97             	lea    edx,[edi+edx*4]
c0009093:	89 f0                	mov    eax,esi
c0009095:	e8 9e ff ff ff       	call   c0009038 <fp_to_double>
c000909a:	89 f0                	mov    eax,esi
c000909c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c00090a0:	e8 89 ff ff ff       	call   c000902e <fp_to_int>
c00090a5:	83 c2 04             	add    edx,0x4
c00090a8:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00090ac:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00090b0:	d8 e1                	fsub   st,st(1)
c00090b2:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c00090b6:	de c9                	fmulp  st(1),st
c00090b8:	de c1                	faddp  st(1),st
c00090ba:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00090c0:	29 de                	sub    esi,ebx
c00090c2:	dc 04 24             	fadd   QWORD PTR [esp]
c00090c5:	dd 1c 24             	fstp   QWORD PTR [esp]
c00090c8:	79 c9                	jns    c0009093 <calc_output_single+0x41>
c00090ca:	89 d8                	mov    eax,ebx
c00090cc:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00090d0:	29 c8                	sub    eax,ecx
c00090d2:	89 c1                	mov    ecx,eax
c00090d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090d8:	29 c8                	sub    eax,ecx
c00090da:	99                   	cdq    
c00090db:	f7 fb                	idiv   ebx
c00090dd:	89 da                	mov    edx,ebx
c00090df:	0f af d0             	imul   edx,eax
c00090e2:	8d 44 06 01          	lea    eax,[esi+eax*1+0x1]
c00090e6:	01 d1                	add    ecx,edx
c00090e8:	d9 ee                	fldz   
c00090ea:	8d 14 87             	lea    edx,[edi+eax*4]
c00090ed:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c00090f1:	89 c8                	mov    eax,ecx
c00090f3:	e8 40 ff ff ff       	call   c0009038 <fp_to_double>
c00090f8:	89 c8                	mov    eax,ecx
c00090fa:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00090fe:	e8 2b ff ff ff       	call   c000902e <fp_to_int>
c0009103:	29 d9                	sub    ecx,ebx
c0009105:	83 ea 04             	sub    edx,0x4
c0009108:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c000910c:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009110:	d8 e1                	fsub   st,st(1)
c0009112:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009116:	de c9                	fmulp  st(1),st
c0009118:	de c1                	faddp  st(1),st
c000911a:	d8 8a 48 08 00 00    	fmul   DWORD PTR [edx+0x848]
c0009120:	85 c9                	test   ecx,ecx
c0009122:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009126:	de c1                	faddp  st(1),st
c0009128:	7f c3                	jg     c00090ed <calc_output_single+0x9b>
c000912a:	dd 04 24             	fld    QWORD PTR [esp]
c000912d:	de c1                	faddp  st(1),st
c000912f:	83 c4 24             	add    esp,0x24
c0009132:	5b                   	pop    ebx
c0009133:	5e                   	pop    esi
c0009134:	5f                   	pop    edi
c0009135:	5d                   	pop    ebp
c0009136:	c3                   	ret    

c0009137 <calc_output_stereo>:
c0009137:	55                   	push   ebp
c0009138:	57                   	push   edi
c0009139:	89 c7                	mov    edi,eax
c000913b:	56                   	push   esi
c000913c:	53                   	push   ebx
c000913d:	89 d3                	mov    ebx,edx
c000913f:	83 ec 44             	sub    esp,0x44
c0009142:	89 de                	mov    esi,ebx
c0009144:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009147:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c000914b:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000914f:	e8 d6 fe ff ff       	call   c000902a <int_to_fp>
c0009154:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009157:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000915b:	29 c8                	sub    eax,ecx
c000915d:	99                   	cdq    
c000915e:	f7 fb                	idiv   ebx
c0009160:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c0009163:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000916b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000916f:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009172:	0f af f0             	imul   esi,eax
c0009175:	0f af c2             	imul   eax,edx
c0009178:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000917c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009180:	d9 ee                	fldz   
c0009182:	29 c2                	sub    edx,eax
c0009184:	01 ce                	add    esi,ecx
c0009186:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009189:	8d 14 97             	lea    edx,[edi+edx*4]
c000918c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009194:	89 f0                	mov    eax,esi
c0009196:	e8 9d fe ff ff       	call   c0009038 <fp_to_double>
c000919b:	89 f0                	mov    eax,esi
c000919d:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00091a1:	e8 88 fe ff ff       	call   c000902e <fp_to_int>
c00091a6:	83 c2 08             	add    edx,0x8
c00091a9:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00091ad:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00091b1:	d8 e1                	fsub   st,st(1)
c00091b3:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00091b7:	de c9                	fmulp  st(1),st
c00091b9:	de c1                	faddp  st(1),st
c00091bb:	d9 c0                	fld    st(0)
c00091bd:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c00091c3:	dc 04 24             	fadd   QWORD PTR [esp]
c00091c6:	dd 1c 24             	fstp   QWORD PTR [esp]
c00091c9:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c00091cf:	29 de                	sub    esi,ebx
c00091d1:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00091d5:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00091d9:	79 b9                	jns    c0009194 <calc_output_stereo+0x5d>
c00091db:	89 d8                	mov    eax,ebx
c00091dd:	29 c8                	sub    eax,ecx
c00091df:	89 c1                	mov    ecx,eax
c00091e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091e5:	29 c8                	sub    eax,ecx
c00091e7:	99                   	cdq    
c00091e8:	f7 fb                	idiv   ebx
c00091ea:	89 da                	mov    edx,ebx
c00091ec:	0f af d0             	imul   edx,eax
c00091ef:	40                   	inc    eax
c00091f0:	01 d1                	add    ecx,edx
c00091f2:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
c00091f7:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00091fb:	d9 ee                	fldz   
c00091fd:	d9 ee                	fldz   
c00091ff:	8d 14 87             	lea    edx,[edi+eax*4]
c0009202:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009206:	89 c8                	mov    eax,ecx
c0009208:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000920c:	e8 27 fe ff ff       	call   c0009038 <fp_to_double>
c0009211:	89 c8                	mov    eax,ecx
c0009213:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009217:	e8 12 fe ff ff       	call   c000902e <fp_to_int>
c000921c:	29 d9                	sub    ecx,ebx
c000921e:	83 ea 08             	sub    edx,0x8
c0009221:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c0009225:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c0009229:	d8 e1                	fsub   st,st(1)
c000922b:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000922f:	de c9                	fmulp  st(1),st
c0009231:	de c1                	faddp  st(1),st
c0009233:	d9 c0                	fld    st(0)
c0009235:	d8 8a 4c 08 00 00    	fmul   DWORD PTR [edx+0x84c]
c000923b:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000923f:	de c1                	faddp  st(1),st
c0009241:	d9 c9                	fxch   st(1)
c0009243:	d8 8a 50 08 00 00    	fmul   DWORD PTR [edx+0x850]
c0009249:	85 c9                	test   ecx,ecx
c000924b:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000924f:	de c1                	faddp  st(1),st
c0009251:	7f af                	jg     c0009202 <calc_output_stereo+0xcb>
c0009253:	dd 04 24             	fld    QWORD PTR [esp]
c0009256:	de c2                	faddp  st(2),st
c0009258:	d9 c9                	fxch   st(1)
c000925a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000925e:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009262:	d9 18                	fstp   DWORD PTR [eax]
c0009264:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009268:	de c1                	faddp  st(1),st
c000926a:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000926e:	d9 58 04             	fstp   DWORD PTR [eax+0x4]
c0009271:	83 c4 44             	add    esp,0x44
c0009274:	5b                   	pop    ebx
c0009275:	5e                   	pop    esi
c0009276:	5f                   	pop    edi
c0009277:	5d                   	pop    ebp
c0009278:	c3                   	ret    

c0009279 <calc_output_quad>:
c0009279:	55                   	push   ebp
c000927a:	57                   	push   edi
c000927b:	56                   	push   esi
c000927c:	89 c6                	mov    esi,eax
c000927e:	53                   	push   ebx
c000927f:	89 d3                	mov    ebx,edx
c0009281:	83 ec 5c             	sub    esp,0x5c
c0009284:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0009287:	dd 44 24 70          	fld    QWORD PTR [esp+0x70]
c000928b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c000928f:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009292:	e8 93 fd ff ff       	call   c000902a <int_to_fp>
c0009297:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c000929a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000929e:	29 c8                	sub    eax,ecx
c00092a0:	99                   	cdq    
c00092a1:	f7 fb                	idiv   ebx
c00092a3:	89 da                	mov    edx,ebx
c00092a5:	0f af d0             	imul   edx,eax
c00092a8:	01 ca                	add    edx,ecx
c00092aa:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c00092ae:	8b 56 34             	mov    edx,DWORD PTR [esi+0x34]
c00092b1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00092b5:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00092b8:	0f af c2             	imul   eax,edx
c00092bb:	d9 ee                	fldz   
c00092bd:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00092c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00092c5:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c00092c9:	29 c2                	sub    edx,eax
c00092cb:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00092cf:	8d 14 96             	lea    edx,[esi+edx*4]
c00092d2:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c00092d6:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00092da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092de:	e8 55 fd ff ff       	call   c0009038 <fp_to_double>
c00092e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092e7:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00092eb:	e8 3e fd ff ff       	call   c000902e <fp_to_int>
c00092f0:	83 c2 10             	add    edx,0x10
c00092f3:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00092f7:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00092fb:	d8 e1                	fsub   st,st(1)
c00092fd:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c0009301:	de c9                	fmulp  st(1),st
c0009303:	de c1                	faddp  st(1),st
c0009305:	d9 c0                	fld    st(0)
c0009307:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c000930d:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009311:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009315:	d9 c0                	fld    st(0)
c0009317:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c000931d:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009321:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009325:	d9 c0                	fld    st(0)
c0009327:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000932d:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009331:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009335:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000933b:	29 5c 24 20          	sub    DWORD PTR [esp+0x20],ebx
c000933f:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c0009343:	de c1                	faddp  st(1),st
c0009345:	79 8f                	jns    c00092d6 <calc_output_quad+0x5d>
c0009347:	89 d8                	mov    eax,ebx
c0009349:	29 c8                	sub    eax,ecx
c000934b:	89 c1                	mov    ecx,eax
c000934d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009351:	29 c8                	sub    eax,ecx
c0009353:	99                   	cdq    
c0009354:	f7 fb                	idiv   ebx
c0009356:	89 da                	mov    edx,ebx
c0009358:	0f af d0             	imul   edx,eax
c000935b:	40                   	inc    eax
c000935c:	01 d1                	add    ecx,edx
c000935e:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009363:	d9 ee                	fldz   
c0009365:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009369:	d9 ee                	fldz   
c000936b:	d9 ee                	fldz   
c000936d:	d9 ee                	fldz   
c000936f:	8d 14 86             	lea    edx,[esi+eax*4]
c0009372:	eb 0a                	jmp    c000937e <calc_output_quad+0x105>
c0009374:	d9 cc                	fxch   st(4)
c0009376:	d9 ca                	fxch   st(2)
c0009378:	d9 c9                	fxch   st(1)
c000937a:	d9 cb                	fxch   st(3)
c000937c:	d9 c9                	fxch   st(1)
c000937e:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c0009382:	d9 c9                	fxch   st(1)
c0009384:	89 c8                	mov    eax,ecx
c0009386:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c000938a:	d9 c9                	fxch   st(1)
c000938c:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009390:	d9 c9                	fxch   st(1)
c0009392:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009396:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000939a:	e8 99 fc ff ff       	call   c0009038 <fp_to_double>
c000939f:	89 c8                	mov    eax,ecx
c00093a1:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00093a5:	e8 84 fc ff ff       	call   c000902e <fp_to_int>
c00093aa:	29 d9                	sub    ecx,ebx
c00093ac:	83 ea 10             	sub    edx,0x10
c00093af:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00093b3:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00093b7:	d8 e1                	fsub   st,st(1)
c00093b9:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00093bd:	de c9                	fmulp  st(1),st
c00093bf:	de c1                	faddp  st(1),st
c00093c1:	d9 c0                	fld    st(0)
c00093c3:	d8 8a 54 08 00 00    	fmul   DWORD PTR [edx+0x854]
c00093c9:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c00093cd:	de c1                	faddp  st(1),st
c00093cf:	d9 c1                	fld    st(1)
c00093d1:	d8 8a 58 08 00 00    	fmul   DWORD PTR [edx+0x858]
c00093d7:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00093db:	de c1                	faddp  st(1),st
c00093dd:	d9 c2                	fld    st(2)
c00093df:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00093e5:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00093e9:	de c1                	faddp  st(1),st
c00093eb:	d9 cb                	fxch   st(3)
c00093ed:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c00093f3:	85 c9                	test   ecx,ecx
c00093f5:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c00093f9:	de c1                	faddp  st(1),st
c00093fb:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c00093ff:	0f 8f 6f ff ff ff    	jg     c0009374 <calc_output_quad+0xfb>
c0009405:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009409:	de c4                	faddp  st(4),st
c000940b:	d9 cb                	fxch   st(3)
c000940d:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009410:	d9 1f                	fstp   DWORD PTR [edi]
c0009412:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009416:	de c2                	faddp  st(2),st
c0009418:	d9 c9                	fxch   st(1)
c000941a:	dc 0c 24             	fmul   QWORD PTR [esp]
c000941d:	d9 5f 04             	fstp   DWORD PTR [edi+0x4]
c0009420:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009424:	de c3                	faddp  st(3),st
c0009426:	d9 ca                	fxch   st(2)
c0009428:	dc 0c 24             	fmul   QWORD PTR [esp]
c000942b:	d9 5f 08             	fstp   DWORD PTR [edi+0x8]
c000942e:	de c1                	faddp  st(1),st
c0009430:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009433:	d9 5f 0c             	fstp   DWORD PTR [edi+0xc]
c0009436:	83 c4 5c             	add    esp,0x5c
c0009439:	5b                   	pop    ebx
c000943a:	5e                   	pop    esi
c000943b:	5f                   	pop    edi
c000943c:	5d                   	pop    ebp
c000943d:	c3                   	ret    

c000943e <calc_output_hex>:
c000943e:	55                   	push   ebp
c000943f:	57                   	push   edi
c0009440:	89 c7                	mov    edi,eax
c0009442:	56                   	push   esi
c0009443:	53                   	push   ebx
c0009444:	89 d3                	mov    ebx,edx
c0009446:	83 ec 7c             	sub    esp,0x7c
c0009449:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000944c:	dd 84 24 90 00 00 00 	fld    QWORD PTR [esp+0x90]
c0009453:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000945a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000945d:	e8 c8 fb ff ff       	call   c000902a <int_to_fp>
c0009462:	8b 6f 30             	mov    ebp,DWORD PTR [edi+0x30]
c0009465:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009469:	29 c8                	sub    eax,ecx
c000946b:	99                   	cdq    
c000946c:	f7 fb                	idiv   ebx
c000946e:	89 da                	mov    edx,ebx
c0009470:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0009478:	0f af d0             	imul   edx,eax
c000947b:	01 ca                	add    edx,ecx
c000947d:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0009485:	d9 ee                	fldz   
c0009487:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000948b:	8b 57 34             	mov    edx,DWORD PTR [edi+0x34]
c000948e:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009492:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009495:	0f af c2             	imul   eax,edx
c0009498:	dd 54 24 10          	fst    QWORD PTR [esp+0x10]
c000949c:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c00094a0:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00094a4:	dd 54 24 18          	fst    QWORD PTR [esp+0x18]
c00094a8:	29 c2                	sub    edx,eax
c00094aa:	dd 54 24 20          	fst    QWORD PTR [esp+0x20]
c00094ae:	8d 14 97             	lea    edx,[edi+edx*4]
c00094b1:	dd 54 24 28          	fst    QWORD PTR [esp+0x28]
c00094b5:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00094b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094bd:	e8 76 fb ff ff       	call   c0009038 <fp_to_double>
c00094c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00094c6:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c00094ca:	e8 5f fb ff ff       	call   c000902e <fp_to_int>
c00094cf:	83 c2 18             	add    edx,0x18
c00094d2:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00094d6:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00094da:	d8 e1                	fsub   st,st(1)
c00094dc:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c00094e0:	de c9                	fmulp  st(1),st
c00094e2:	de c1                	faddp  st(1),st
c00094e4:	d9 c0                	fld    st(0)
c00094e6:	d8 8a 2c 08 00 00    	fmul   DWORD PTR [edx+0x82c]
c00094ec:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c00094f0:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c00094f4:	d9 c0                	fld    st(0)
c00094f6:	d8 8a 30 08 00 00    	fmul   DWORD PTR [edx+0x830]
c00094fc:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c0009500:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c0009504:	d9 c0                	fld    st(0)
c0009506:	d8 8a 34 08 00 00    	fmul   DWORD PTR [edx+0x834]
c000950c:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009510:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c0009514:	d9 c0                	fld    st(0)
c0009516:	d8 8a 38 08 00 00    	fmul   DWORD PTR [edx+0x838]
c000951c:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009520:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009524:	d9 c0                	fld    st(0)
c0009526:	d8 8a 3c 08 00 00    	fmul   DWORD PTR [edx+0x83c]
c000952c:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c0009530:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009534:	d8 8a 40 08 00 00    	fmul   DWORD PTR [edx+0x840]
c000953a:	29 5c 24 30          	sub    DWORD PTR [esp+0x30],ebx
c000953e:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009542:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009546:	0f 89 6d ff ff ff    	jns    c00094b9 <calc_output_hex+0x7b>
c000954c:	89 d8                	mov    eax,ebx
c000954e:	29 c8                	sub    eax,ecx
c0009550:	89 c1                	mov    ecx,eax
c0009552:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009556:	29 c8                	sub    eax,ecx
c0009558:	99                   	cdq    
c0009559:	f7 fb                	idiv   ebx
c000955b:	89 da                	mov    edx,ebx
c000955d:	0f af d0             	imul   edx,eax
c0009560:	40                   	inc    eax
c0009561:	01 d1                	add    ecx,edx
c0009563:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c0009568:	d9 ee                	fldz   
c000956a:	d9 ee                	fldz   
c000956c:	d9 ee                	fldz   
c000956e:	d9 ca                	fxch   st(2)
c0009570:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
c0009574:	dd 54 24 30          	fst    QWORD PTR [esp+0x30]
c0009578:	d9 ee                	fldz   
c000957a:	8d 14 87             	lea    edx,[edi+eax*4]
c000957d:	d9 ee                	fldz   
c000957f:	d9 ca                	fxch   st(2)
c0009581:	eb 0a                	jmp    c000958d <calc_output_hex+0x14f>
c0009583:	d9 c9                	fxch   st(1)
c0009585:	d9 cc                	fxch   st(4)
c0009587:	d9 cb                	fxch   st(3)
c0009589:	d9 ca                	fxch   st(2)
c000958b:	d9 c9                	fxch   st(1)
c000958d:	dd 5c 24 68          	fstp   QWORD PTR [esp+0x68]
c0009591:	89 c8                	mov    eax,ecx
c0009593:	dd 5c 24 60          	fstp   QWORD PTR [esp+0x60]
c0009597:	d9 ca                	fxch   st(2)
c0009599:	dd 5c 24 58          	fstp   QWORD PTR [esp+0x58]
c000959d:	dd 5c 24 50          	fstp   QWORD PTR [esp+0x50]
c00095a1:	dd 5c 24 48          	fstp   QWORD PTR [esp+0x48]
c00095a5:	e8 8e fa ff ff       	call   c0009038 <fp_to_double>
c00095aa:	89 c8                	mov    eax,ecx
c00095ac:	dd 5c 24 40          	fstp   QWORD PTR [esp+0x40]
c00095b0:	e8 79 fa ff ff       	call   c000902e <fp_to_int>
c00095b5:	29 d9                	sub    ecx,ebx
c00095b7:	83 ea 18             	sub    edx,0x18
c00095ba:	d9 44 85 00          	fld    DWORD PTR [ebp+eax*4+0x0]
c00095be:	d9 44 85 04          	fld    DWORD PTR [ebp+eax*4+0x4]
c00095c2:	d8 e1                	fsub   st,st(1)
c00095c4:	dd 44 24 40          	fld    QWORD PTR [esp+0x40]
c00095c8:	de c9                	fmulp  st(1),st
c00095ca:	de c1                	faddp  st(1),st
c00095cc:	d9 c0                	fld    st(0)
c00095ce:	d8 8a 5c 08 00 00    	fmul   DWORD PTR [edx+0x85c]
c00095d4:	dd 44 24 48          	fld    QWORD PTR [esp+0x48]
c00095d8:	de c1                	faddp  st(1),st
c00095da:	d9 c1                	fld    st(1)
c00095dc:	d8 8a 60 08 00 00    	fmul   DWORD PTR [edx+0x860]
c00095e2:	dd 44 24 60          	fld    QWORD PTR [esp+0x60]
c00095e6:	de c1                	faddp  st(1),st
c00095e8:	d9 c2                	fld    st(2)
c00095ea:	d8 8a 64 08 00 00    	fmul   DWORD PTR [edx+0x864]
c00095f0:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c00095f4:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c00095f8:	d9 c2                	fld    st(2)
c00095fa:	d8 8a 68 08 00 00    	fmul   DWORD PTR [edx+0x868]
c0009600:	dd 44 24 58          	fld    QWORD PTR [esp+0x58]
c0009604:	de c1                	faddp  st(1),st
c0009606:	d9 c3                	fld    st(3)
c0009608:	d8 8a 6c 08 00 00    	fmul   DWORD PTR [edx+0x86c]
c000960e:	dd 44 24 50          	fld    QWORD PTR [esp+0x50]
c0009612:	de c1                	faddp  st(1),st
c0009614:	d9 cc                	fxch   st(4)
c0009616:	d8 8a 70 08 00 00    	fmul   DWORD PTR [edx+0x870]
c000961c:	85 c9                	test   ecx,ecx
c000961e:	dd 44 24 68          	fld    QWORD PTR [esp+0x68]
c0009622:	de c1                	faddp  st(1),st
c0009624:	0f 8f 59 ff ff ff    	jg     c0009583 <calc_output_hex+0x145>
c000962a:	d9 cb                	fxch   st(3)
c000962c:	dc 44 24 08          	fadd   QWORD PTR [esp+0x8]
c0009630:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009633:	d9 1e                	fstp   DWORD PTR [esi]
c0009635:	d9 c9                	fxch   st(1)
c0009637:	dc 44 24 28          	fadd   QWORD PTR [esp+0x28]
c000963b:	dc 0c 24             	fmul   QWORD PTR [esp]
c000963e:	d9 5e 04             	fstp   DWORD PTR [esi+0x4]
c0009641:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c0009645:	dc 44 24 30          	fadd   QWORD PTR [esp+0x30]
c0009649:	dc 0c 24             	fmul   QWORD PTR [esp]
c000964c:	d9 5e 08             	fstp   DWORD PTR [esi+0x8]
c000964f:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c0009653:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009656:	d9 5e 0c             	fstp   DWORD PTR [esi+0xc]
c0009659:	d9 c9                	fxch   st(1)
c000965b:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000965f:	dc 0c 24             	fmul   QWORD PTR [esp]
c0009662:	d9 5e 10             	fstp   DWORD PTR [esi+0x10]
c0009665:	dc 44 24 38          	fadd   QWORD PTR [esp+0x38]
c0009669:	dc 0c 24             	fmul   QWORD PTR [esp]
c000966c:	d9 5e 14             	fstp   DWORD PTR [esi+0x14]
c000966f:	83 c4 7c             	add    esp,0x7c
c0009672:	5b                   	pop    ebx
c0009673:	5e                   	pop    esi
c0009674:	5f                   	pop    edi
c0009675:	5d                   	pop    ebp
c0009676:	c3                   	ret    

c0009677 <sinc_reset>:
c0009677:	56                   	push   esi
c0009678:	53                   	push   ebx
c0009679:	51                   	push   ecx
c000967a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000967e:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009681:	85 db                	test   ebx,ebx
c0009683:	74 51                	je     c00096d6 <sinc_reset+0x5f>
c0009685:	d9 ee                	fldz   
c0009687:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000968e:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0009695:	dd 53 28             	fst    QWORD PTR [ebx+0x28]
c0009698:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000969f:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c00096a5:	dd 5b 20             	fstp   QWORD PTR [ebx+0x20]
c00096a8:	52                   	push   edx
c00096a9:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096ac:	c1 e0 02             	shl    eax,0x2
c00096af:	50                   	push   eax
c00096b0:	6a 00                	push   0x0
c00096b2:	56                   	push   esi
c00096b3:	e8 09 70 ff ff       	call   c00006c1 <memset>
c00096b8:	83 c4 0c             	add    esp,0xc
c00096bb:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00096be:	c1 e0 02             	shl    eax,0x2
c00096c1:	50                   	push   eax
c00096c2:	68 aa 00 00 00       	push   0xaa
c00096c7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00096ca:	8d 04 86             	lea    eax,[esi+eax*4]
c00096cd:	50                   	push   eax
c00096ce:	e8 ee 6f ff ff       	call   c00006c1 <memset>
c00096d3:	83 c4 10             	add    esp,0x10
c00096d6:	58                   	pop    eax
c00096d7:	5b                   	pop    ebx
c00096d8:	5e                   	pop    esi
c00096d9:	c3                   	ret    

c00096da <calc_output_multi>:
c00096da:	55                   	push   ebp
c00096db:	57                   	push   edi
c00096dc:	8d 78 44             	lea    edi,[eax+0x44]
c00096df:	56                   	push   esi
c00096e0:	89 c6                	mov    esi,eax
c00096e2:	53                   	push   ebx
c00096e3:	8d 80 44 04 00 00    	lea    eax,[eax+0x444]
c00096e9:	83 ec 4c             	sub    esp,0x4c
c00096ec:	dd 44 24 64          	fld    QWORD PTR [esp+0x64]
c00096f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00096f4:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c00096f7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00096fb:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00096ff:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009703:	e8 22 f9 ff ff       	call   c000902a <int_to_fp>
c0009708:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000970c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009710:	2b 44 24 20          	sub    eax,DWORD PTR [esp+0x20]
c0009714:	99                   	cdq    
c0009715:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c0009719:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000971d:	8b 6e 34             	mov    ebp,DWORD PTR [esi+0x34]
c0009720:	0f af d0             	imul   edx,eax
c0009723:	0f af c3             	imul   eax,ebx
c0009726:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000972a:	29 c5                	sub    ebp,eax
c000972c:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c0009733:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009737:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000973b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000973f:	52                   	push   edx
c0009740:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009744:	6a 00                	push   0x0
c0009746:	57                   	push   edi
c0009747:	e8 75 6f ff ff       	call   c00006c1 <memset>
c000974c:	83 c4 10             	add    esp,0x10
c000974f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009753:	e8 e0 f8 ff ff       	call   c0009038 <fp_to_double>
c0009758:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000975c:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009760:	e8 c9 f8 ff ff       	call   c000902e <fp_to_int>
c0009765:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0009768:	89 d9                	mov    ecx,ebx
c000976a:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c000976d:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c0009771:	d8 e1                	fsub   st,st(1)
c0009773:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009777:	de c9                	fmulp  st(1),st
c0009779:	de c1                	faddp  st(1),st
c000977b:	89 c8                	mov    eax,ecx
c000977d:	bd 08 00 00 00       	mov    ebp,0x8
c0009782:	99                   	cdq    
c0009783:	f7 fd                	idiv   ebp
c0009785:	4a                   	dec    edx
c0009786:	83 fa 06             	cmp    edx,0x6
c0009789:	77 07                	ja     c0009792 <calc_output_multi+0xb8>
c000978b:	ff 24 95 00 0f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf100]
c0009792:	49                   	dec    ecx
c0009793:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009797:	d9 c0                	fld    st(0)
c0009799:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097a0:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097a3:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097a7:	dc 00                	fadd   QWORD PTR [eax]
c00097a9:	dd 18                	fstp   QWORD PTR [eax]
c00097ab:	49                   	dec    ecx
c00097ac:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097b0:	d9 c0                	fld    st(0)
c00097b2:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097b9:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097bc:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097c0:	dc 00                	fadd   QWORD PTR [eax]
c00097c2:	dd 18                	fstp   QWORD PTR [eax]
c00097c4:	49                   	dec    ecx
c00097c5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097c9:	d9 c0                	fld    st(0)
c00097cb:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097d2:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097d5:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097d9:	dc 00                	fadd   QWORD PTR [eax]
c00097db:	dd 18                	fstp   QWORD PTR [eax]
c00097dd:	49                   	dec    ecx
c00097de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097e2:	d9 c0                	fld    st(0)
c00097e4:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00097eb:	8d 04 cf             	lea    eax,[edi+ecx*8]
c00097ee:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00097f2:	dc 00                	fadd   QWORD PTR [eax]
c00097f4:	dd 18                	fstp   QWORD PTR [eax]
c00097f6:	49                   	dec    ecx
c00097f7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00097fb:	d9 c0                	fld    st(0)
c00097fd:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009804:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009807:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000980b:	dc 00                	fadd   QWORD PTR [eax]
c000980d:	dd 18                	fstp   QWORD PTR [eax]
c000980f:	49                   	dec    ecx
c0009810:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009814:	d9 c0                	fld    st(0)
c0009816:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000981d:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009820:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009824:	dc 00                	fadd   QWORD PTR [eax]
c0009826:	dd 18                	fstp   QWORD PTR [eax]
c0009828:	49                   	dec    ecx
c0009829:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000982d:	d9 c0                	fld    st(0)
c000982f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009836:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009839:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000983d:	dc 00                	fadd   QWORD PTR [eax]
c000983f:	dd 18                	fstp   QWORD PTR [eax]
c0009841:	49                   	dec    ecx
c0009842:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009846:	d9 c0                	fld    st(0)
c0009848:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000984f:	8d 04 cf             	lea    eax,[edi+ecx*8]
c0009852:	85 c9                	test   ecx,ecx
c0009854:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009858:	dc 00                	fadd   QWORD PTR [eax]
c000985a:	dd 18                	fstp   QWORD PTR [eax]
c000985c:	0f 8f 19 ff ff ff    	jg     c000977b <calc_output_multi+0xa1>
c0009862:	dd d8                	fstp   st(0)
c0009864:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009868:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c000986c:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c0009870:	0f 89 d9 fe ff ff    	jns    c000974f <calc_output_multi+0x75>
c0009876:	89 d1                	mov    ecx,edx
c0009878:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000987c:	2b 4c 24 20          	sub    ecx,DWORD PTR [esp+0x20]
c0009880:	29 c8                	sub    eax,ecx
c0009882:	99                   	cdq    
c0009883:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
c0009887:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000988b:	0f af d0             	imul   edx,eax
c000988e:	40                   	inc    eax
c000988f:	01 d1                	add    ecx,edx
c0009891:	0f af c3             	imul   eax,ebx
c0009894:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c0009897:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000989b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000989f:	50                   	push   eax
c00098a0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00098a4:	6a 00                	push   0x0
c00098a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00098aa:	e8 12 6e ff ff       	call   c00006c1 <memset>
c00098af:	83 c4 10             	add    esp,0x10
c00098b2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00098b6:	e8 7d f7 ff ff       	call   c0009038 <fp_to_double>
c00098bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00098bf:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c00098c3:	e8 66 f7 ff ff       	call   c000902e <fp_to_int>
c00098c8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00098cb:	89 d9                	mov    ecx,ebx
c00098cd:	d9 04 82             	fld    DWORD PTR [edx+eax*4]
c00098d0:	d9 44 82 04          	fld    DWORD PTR [edx+eax*4+0x4]
c00098d4:	d8 e1                	fsub   st,st(1)
c00098d6:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c00098da:	de c9                	fmulp  st(1),st
c00098dc:	de c1                	faddp  st(1),st
c00098de:	89 c8                	mov    eax,ecx
c00098e0:	bd 08 00 00 00       	mov    ebp,0x8
c00098e5:	99                   	cdq    
c00098e6:	f7 fd                	idiv   ebp
c00098e8:	4a                   	dec    edx
c00098e9:	83 fa 06             	cmp    edx,0x6
c00098ec:	77 07                	ja     c00098f5 <calc_output_multi+0x21b>
c00098ee:	ff 24 95 1c 0f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf0e4]
c00098f5:	49                   	dec    ecx
c00098f6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00098fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098fe:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009905:	d9 c0                	fld    st(0)
c0009907:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000990b:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000990e:	dc 00                	fadd   QWORD PTR [eax]
c0009910:	dd 18                	fstp   QWORD PTR [eax]
c0009912:	49                   	dec    ecx
c0009913:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009917:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000991b:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009922:	d9 c0                	fld    st(0)
c0009924:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009928:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000992b:	dc 00                	fadd   QWORD PTR [eax]
c000992d:	dd 18                	fstp   QWORD PTR [eax]
c000992f:	49                   	dec    ecx
c0009930:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009934:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009938:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000993f:	d9 c0                	fld    st(0)
c0009941:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009945:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009948:	dc 00                	fadd   QWORD PTR [eax]
c000994a:	dd 18                	fstp   QWORD PTR [eax]
c000994c:	49                   	dec    ecx
c000994d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009951:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009955:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c000995c:	d9 c0                	fld    st(0)
c000995e:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c0009962:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009965:	dc 00                	fadd   QWORD PTR [eax]
c0009967:	dd 18                	fstp   QWORD PTR [eax]
c0009969:	49                   	dec    ecx
c000996a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000996e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009972:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009979:	d9 c0                	fld    st(0)
c000997b:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000997f:	8d 04 c8             	lea    eax,[eax+ecx*8]
c0009982:	dc 00                	fadd   QWORD PTR [eax]
c0009984:	dd 18                	fstp   QWORD PTR [eax]
c0009986:	49                   	dec    ecx
c0009987:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000998b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000998f:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c0009996:	d9 c0                	fld    st(0)
c0009998:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c000999c:	8d 04 c8             	lea    eax,[eax+ecx*8]
c000999f:	dc 00                	fadd   QWORD PTR [eax]
c00099a1:	dd 18                	fstp   QWORD PTR [eax]
c00099a3:	49                   	dec    ecx
c00099a4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099ac:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099b3:	d9 c0                	fld    st(0)
c00099b5:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099b9:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099bc:	dc 00                	fadd   QWORD PTR [eax]
c00099be:	dd 18                	fstp   QWORD PTR [eax]
c00099c0:	49                   	dec    ecx
c00099c1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00099c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099c9:	85 c9                	test   ecx,ecx
c00099cb:	8d 94 0a 10 02 00 00 	lea    edx,[edx+ecx*1+0x210]
c00099d2:	d9 c0                	fld    st(0)
c00099d4:	d8 4c 96 04          	fmul   DWORD PTR [esi+edx*4+0x4]
c00099d8:	8d 04 c8             	lea    eax,[eax+ecx*8]
c00099db:	dc 00                	fadd   QWORD PTR [eax]
c00099dd:	dd 18                	fstp   QWORD PTR [eax]
c00099df:	0f 8f f9 fe ff ff    	jg     c00098de <calc_output_multi+0x204>
c00099e5:	dd d8                	fstp   st(0)
c00099e7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00099eb:	29 5c 24 18          	sub    DWORD PTR [esp+0x18],ebx
c00099ef:	29 54 24 28          	sub    DWORD PTR [esp+0x28],edx
c00099f3:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c00099f8:	0f 8f b4 fe ff ff    	jg     c00098b2 <calc_output_multi+0x1d8>
c00099fe:	b9 08 00 00 00       	mov    ecx,0x8
c0009a03:	89 d8                	mov    eax,ebx
c0009a05:	99                   	cdq    
c0009a06:	f7 f9                	idiv   ecx
c0009a08:	4a                   	dec    edx
c0009a09:	83 fa 06             	cmp    edx,0x6
c0009a0c:	77 07                	ja     c0009a15 <calc_output_multi+0x33b>
c0009a0e:	ff 24 95 38 0f 02 c0 	jmp    DWORD PTR [edx*4-0x3ffdf0c8]
c0009a15:	4b                   	dec    ebx
c0009a16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a1a:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a1d:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a20:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a24:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a28:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a2b:	4b                   	dec    ebx
c0009a2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a30:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a33:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a36:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a3a:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a3e:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a41:	4b                   	dec    ebx
c0009a42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a46:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a49:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a4c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a50:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a54:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a57:	4b                   	dec    ebx
c0009a58:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a5c:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a5f:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a62:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a66:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a6a:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a6d:	4b                   	dec    ebx
c0009a6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a72:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a75:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a78:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a7c:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a80:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a83:	4b                   	dec    ebx
c0009a84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a88:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009a8b:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009a8e:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009a92:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009a96:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009a99:	4b                   	dec    ebx
c0009a9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009a9e:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009aa1:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009aa4:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009aa8:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009aac:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009aaf:	4b                   	dec    ebx
c0009ab0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ab4:	85 db                	test   ebx,ebx
c0009ab6:	dd 04 df             	fld    QWORD PTR [edi+ebx*8]
c0009ab9:	dc 04 d8             	fadd   QWORD PTR [eax+ebx*8]
c0009abc:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0009ac0:	dc 4c 24 10          	fmul   QWORD PTR [esp+0x10]
c0009ac4:	d9 1c 98             	fstp   DWORD PTR [eax+ebx*4]
c0009ac7:	0f 8f 36 ff ff ff    	jg     c0009a03 <calc_output_multi+0x329>
c0009acd:	83 c4 4c             	add    esp,0x4c
c0009ad0:	5b                   	pop    ebx
c0009ad1:	5e                   	pop    esi
c0009ad2:	5f                   	pop    edi
c0009ad3:	5d                   	pop    ebp
c0009ad4:	c3                   	ret    

c0009ad5 <double_to_fp>:
c0009ad5:	d9 05 8c 10 02 c0    	fld    DWORD PTR ds:0xc002108c
c0009adb:	dc 4c 24 04          	fmul   QWORD PTR [esp+0x4]
c0009adf:	dd 5c 24 04          	fstp   QWORD PTR [esp+0x4]
c0009ae3:	e9 68 5c 01 00       	jmp    c001f750 <lrint>

c0009ae8 <fmod_one>:
c0009ae8:	83 ec 2c             	sub    esp,0x2c
c0009aeb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009aef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009af3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009af7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009afb:	83 ec 08             	sub    esp,0x8
c0009afe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b06:	e8 45 5c 01 00       	call   c001f750 <lrint>
c0009b0b:	83 c4 10             	add    esp,0x10
c0009b0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009b12:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c0009b16:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009b1a:	de e1                	fsubrp st(1),st
c0009b1c:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009b20:	d9 ee                	fldz   
c0009b22:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c0009b26:	df e0                	fnstsw ax
c0009b28:	f6 c4 45             	test   ah,0x45
c0009b2b:	75 0a                	jne    c0009b37 <fmod_one+0x4f>
c0009b2d:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b31:	d9 e8                	fld1   
c0009b33:	de c1                	faddp  st(1),st
c0009b35:	eb 04                	jmp    c0009b3b <fmod_one+0x53>
c0009b37:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c0009b3b:	83 c4 2c             	add    esp,0x2c
c0009b3e:	c3                   	ret    

c0009b3f <prepare_data>:
c0009b3f:	55                   	push   ebp
c0009b40:	57                   	push   edi
c0009b41:	56                   	push   esi
c0009b42:	53                   	push   ebx
c0009b43:	83 ec 1c             	sub    esp,0x1c
c0009b46:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0009b4a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b4e:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c0009b52:	0f 89 57 01 00 00    	jns    c0009caf <prepare_data+0x170>
c0009b58:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0009b5b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009b5e:	85 d2                	test   edx,edx
c0009b60:	75 0d                	jne    c0009b6f <prepare_data+0x30>
c0009b62:	8d 14 36             	lea    edx,[esi+esi*1]
c0009b65:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0009b68:	29 d0                	sub    eax,edx
c0009b6a:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009b6d:	eb 44                	jmp    c0009bb3 <prepare_data+0x74>
c0009b6f:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c0009b72:	8d 0c 37             	lea    ecx,[edi+esi*1]
c0009b75:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c0009b78:	39 c1                	cmp    ecx,eax
c0009b7a:	7d 04                	jge    c0009b80 <prepare_data+0x41>
c0009b7c:	29 d0                	sub    eax,edx
c0009b7e:	eb 2d                	jmp    c0009bad <prepare_data+0x6e>
c0009b80:	29 d7                	sub    edi,edx
c0009b82:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c0009b88:	01 f7                	add    edi,esi
c0009b8a:	29 f2                	sub    edx,esi
c0009b8c:	51                   	push   ecx
c0009b8d:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0009b94:	8d 14 90             	lea    edx,[eax+edx*4]
c0009b97:	51                   	push   ecx
c0009b98:	52                   	push   edx
c0009b99:	50                   	push   eax
c0009b9a:	e8 b4 6a ff ff       	call   c0000653 <memmove>
c0009b9f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0009ba2:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009ba5:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009ba8:	29 f0                	sub    eax,esi
c0009baa:	83 c4 10             	add    esp,0x10
c0009bad:	29 f0                	sub    eax,esi
c0009baf:	79 02                	jns    c0009bb3 <prepare_data+0x74>
c0009bb1:	31 c0                	xor    eax,eax
c0009bb3:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0009bb6:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0009bb9:	29 ef                	sub    edi,ebp
c0009bbb:	39 c7                	cmp    edi,eax
c0009bbd:	7e 02                	jle    c0009bc1 <prepare_data+0x82>
c0009bbf:	89 c7                	mov    edi,eax
c0009bc1:	89 f8                	mov    eax,edi
c0009bc3:	99                   	cdq    
c0009bc4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009bc7:	29 d7                	sub    edi,edx
c0009bc9:	b8 15 00 00 00       	mov    eax,0x15
c0009bce:	0f 88 dd 00 00 00    	js     c0009cb1 <prepare_data+0x172>
c0009bd4:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0009bd7:	8d 14 39             	lea    edx,[ecx+edi*1]
c0009bda:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c0009bdd:	0f 8f ce 00 00 00    	jg     c0009cb1 <prepare_data+0x172>
c0009be3:	50                   	push   eax
c0009be4:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009beb:	50                   	push   eax
c0009bec:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c0009bf2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009bf6:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bf8:	8d 04 a8             	lea    eax,[eax+ebp*4]
c0009bfb:	50                   	push   eax
c0009bfc:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009bff:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0009c03:	50                   	push   eax
c0009c04:	e8 82 6a ff ff       	call   c000068b <memcpy>
c0009c09:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c0009c0c:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c0009c0f:	83 c4 10             	add    esp,0x10
c0009c12:	01 fd                	add    ebp,edi
c0009c14:	01 f9                	add    ecx,edi
c0009c16:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c0009c19:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c0009c1c:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c0009c1f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c23:	0f 85 86 00 00 00    	jne    c0009caf <prepare_data+0x170>
c0009c29:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0009c2c:	89 e8                	mov    eax,ebp
c0009c2e:	29 c8                	sub    eax,ecx
c0009c30:	8d 3c 36             	lea    edi,[esi+esi*1]
c0009c33:	39 f8                	cmp    eax,edi
c0009c35:	7d 78                	jge    c0009caf <prepare_data+0x170>
c0009c37:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0009c3b:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c0009c3f:	74 6e                	je     c0009caf <prepare_data+0x170>
c0009c41:	8d 7e 04             	lea    edi,[esi+0x4]
c0009c44:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0009c48:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0009c4b:	29 ef                	sub    edi,ebp
c0009c4d:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0009c51:	7c 29                	jl     c0009c7c <prepare_data+0x13d>
c0009c53:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c56:	29 f1                	sub    ecx,esi
c0009c58:	55                   	push   ebp
c0009c59:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c0009c60:	50                   	push   eax
c0009c61:	8d 04 8a             	lea    eax,[edx+ecx*4]
c0009c64:	50                   	push   eax
c0009c65:	52                   	push   edx
c0009c66:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009c6a:	e8 e4 69 ff ff       	call   c0000653 <memmove>
c0009c6f:	83 c4 10             	add    esp,0x10
c0009c72:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c0009c75:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c0009c78:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009c7c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009c7f:	83 c6 05             	add    esi,0x5
c0009c82:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0009c85:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009c88:	78 07                	js     c0009c91 <prepare_data+0x152>
c0009c8a:	8d 3c 30             	lea    edi,[eax+esi*1]
c0009c8d:	39 cf                	cmp    edi,ecx
c0009c8f:	7e 04                	jle    c0009c95 <prepare_data+0x156>
c0009c91:	89 ce                	mov    esi,ecx
c0009c93:	29 c6                	sub    esi,eax
c0009c95:	51                   	push   ecx
c0009c96:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c0009c9d:	51                   	push   ecx
c0009c9e:	8d 04 82             	lea    eax,[edx+eax*4]
c0009ca1:	6a 00                	push   0x0
c0009ca3:	50                   	push   eax
c0009ca4:	e8 18 6a ff ff       	call   c00006c1 <memset>
c0009ca9:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c0009cac:	83 c4 10             	add    esp,0x10
c0009caf:	31 c0                	xor    eax,eax
c0009cb1:	83 c4 1c             	add    esp,0x1c
c0009cb4:	5b                   	pop    ebx
c0009cb5:	5e                   	pop    esi
c0009cb6:	5f                   	pop    edi
c0009cb7:	5d                   	pop    ebp
c0009cb8:	c3                   	ret    

c0009cb9 <sinc_multichan_vari_process>:
c0009cb9:	55                   	push   ebp
c0009cba:	b8 05 00 00 00       	mov    eax,0x5
c0009cbf:	57                   	push   edi
c0009cc0:	56                   	push   esi
c0009cc1:	53                   	push   ebx
c0009cc2:	83 ec 3c             	sub    esp,0x3c
c0009cc5:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009cc9:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009ccd:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009cd0:	85 db                	test   ebx,ebx
c0009cd2:	0f 84 5b 02 00 00    	je     c0009f33 <sinc_multichan_vari_process+0x27a>
c0009cd8:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009cdb:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009cde:	0f af d0             	imul   edx,eax
c0009ce1:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009ce4:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009ce8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009cef:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009cf2:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009cf9:	dd 06                	fld    QWORD PTR [esi]
c0009cfb:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009cff:	55                   	push   ebp
c0009d00:	55                   	push   ebp
c0009d01:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d04:	e8 dd f2 ff ff       	call   c0008fe6 <is_bad_src_ratio>
c0009d09:	89 c2                	mov    edx,eax
c0009d0b:	58                   	pop    eax
c0009d0c:	59                   	pop    ecx
c0009d0d:	b8 16 00 00 00       	mov    eax,0x16
c0009d12:	85 d2                	test   edx,edx
c0009d14:	0f 85 19 02 00 00    	jne    c0009f33 <sinc_multichan_vari_process+0x27a>
c0009d1a:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c0009d20:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009d23:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009d26:	dd 06                	fld    QWORD PTR [esi]
c0009d28:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009d2b:	d8 d1                	fcom   st(1)
c0009d2d:	df e0                	fnstsw ax
c0009d2f:	9e                   	sahf   
c0009d30:	76 0f                	jbe    c0009d41 <sinc_multichan_vari_process+0x88>
c0009d32:	dd d8                	fstp   st(0)
c0009d34:	d9 e8                	fld1   
c0009d36:	d8 d9                	fcomp  st(1)
c0009d38:	df e0                	fnstsw ax
c0009d3a:	9e                   	sahf   
c0009d3b:	77 0f                	ja     c0009d4c <sinc_multichan_vari_process+0x93>
c0009d3d:	dd d8                	fstp   st(0)
c0009d3f:	eb 11                	jmp    c0009d52 <sinc_multichan_vari_process+0x99>
c0009d41:	dd d9                	fstp   st(1)
c0009d43:	d9 e8                	fld1   
c0009d45:	d8 d9                	fcomp  st(1)
c0009d47:	df e0                	fnstsw ax
c0009d49:	9e                   	sahf   
c0009d4a:	76 04                	jbe    c0009d50 <sinc_multichan_vari_process+0x97>
c0009d4c:	de f9                	fdivp  st(1),st
c0009d4e:	eb 02                	jmp    c0009d52 <sinc_multichan_vari_process+0x99>
c0009d50:	dd d8                	fstp   st(0)
c0009d52:	83 ec 10             	sub    esp,0x10
c0009d55:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d58:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d5b:	e8 f0 59 01 00       	call   c001f750 <lrint>
c0009d60:	40                   	inc    eax
c0009d61:	0f af c5             	imul   eax,ebp
c0009d64:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009d67:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009d6b:	dd 14 24             	fst    QWORD PTR [esp]
c0009d6e:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009d72:	e8 71 fd ff ff       	call   c0009ae8 <fmod_one>
c0009d77:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009d7a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009d7d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009d81:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009d85:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c0009d89:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009d8d:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009d90:	e8 bb 59 01 00       	call   c001f750 <lrint>
c0009d95:	d9 e8                	fld1   
c0009d97:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c0009d9b:	0f af e8             	imul   ebp,eax
c0009d9e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009da2:	01 e8                	add    eax,ebp
c0009da4:	99                   	cdq    
c0009da5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009da8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009dab:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c0009db1:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009db5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009db8:	83 c4 10             	add    esp,0x10
c0009dbb:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c0009dbe:	7d 4b                	jge    c0009e0b <sinc_multichan_vari_process+0x152>
c0009dc0:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009dc3:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009dc6:	01 c8                	add    eax,ecx
c0009dc8:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009dcb:	99                   	cdq    
c0009dcc:	f7 f9                	idiv   ecx
c0009dce:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009dd2:	7d 09                	jge    c0009ddd <sinc_multichan_vari_process+0x124>
c0009dd4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0009dd7:	85 c0                	test   eax,eax
c0009dd9:	79 57                	jns    c0009e32 <sinc_multichan_vari_process+0x179>
c0009ddb:	eb 70                	jmp    c0009e4d <sinc_multichan_vari_process+0x194>
c0009ddd:	51                   	push   ecx
c0009dde:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009de2:	57                   	push   edi
c0009de3:	53                   	push   ebx
c0009de4:	e8 56 fd ff ff       	call   c0009b3f <prepare_data>
c0009de9:	83 c4 10             	add    esp,0x10
c0009dec:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0009def:	85 c0                	test   eax,eax
c0009df1:	0f 85 3c 01 00 00    	jne    c0009f33 <sinc_multichan_vari_process+0x27a>
c0009df7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0009dfa:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0009dfd:	01 c8                	add    eax,ecx
c0009dff:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c0009e02:	99                   	cdq    
c0009e03:	f7 f9                	idiv   ecx
c0009e05:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c0009e09:	7c c9                	jl     c0009dd4 <sinc_multichan_vari_process+0x11b>
c0009e0b:	dd 04 24             	fld    QWORD PTR [esp]
c0009e0e:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c0009e11:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e15:	dd 1e                	fstp   QWORD PTR [esi]
c0009e17:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0009e1a:	99                   	cdq    
c0009e1b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e1e:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0009e21:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009e24:	99                   	cdq    
c0009e25:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c0009e28:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c0009e2b:	31 c0                	xor    eax,eax
c0009e2d:	e9 01 01 00 00       	jmp    c0009f33 <sinc_multichan_vari_process+0x27a>
c0009e32:	dd 04 24             	fld    QWORD PTR [esp]
c0009e35:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c0009e38:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e3c:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009e40:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c0009e44:	d9 c9                	fxch   st(1)
c0009e46:	de d9                	fcompp 
c0009e48:	df e0                	fnstsw ax
c0009e4a:	9e                   	sahf   
c0009e4b:	73 be                	jae    c0009e0b <sinc_multichan_vari_process+0x152>
c0009e4d:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c0009e51:	7e 2f                	jle    c0009e82 <sinc_multichan_vari_process+0x1c9>
c0009e53:	dd 06                	fld    QWORD PTR [esi]
c0009e55:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c0009e58:	83 ec 10             	sub    esp,0x10
c0009e5b:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009e5e:	e8 cd 58 01 00       	call   c001f730 <fabs>
c0009e63:	83 c4 10             	add    esp,0x10
c0009e66:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c0009e6c:	df e0                	fnstsw ax
c0009e6e:	9e                   	sahf   
c0009e6f:	76 11                	jbe    c0009e82 <sinc_multichan_vari_process+0x1c9>
c0009e71:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009e74:	dc 26                	fsub   QWORD PTR [esi]
c0009e76:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c0009e79:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c0009e7c:	dc 06                	fadd   QWORD PTR [esi]
c0009e7e:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c0009e82:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c0009e85:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c0009e89:	d9 e8                	fld1   
c0009e8b:	d8 d9                	fcomp  st(1)
c0009e8d:	df e0                	fnstsw ax
c0009e8f:	9e                   	sahf   
c0009e90:	77 04                	ja     c0009e96 <sinc_multichan_vari_process+0x1dd>
c0009e92:	dd d8                	fstp   st(0)
c0009e94:	d9 e8                	fld1   
c0009e96:	de c9                	fmulp  st(1),st
c0009e98:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c0009e9c:	50                   	push   eax
c0009e9d:	50                   	push   eax
c0009e9e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ea2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ea6:	e8 2a fc ff ff       	call   c0009ad5 <double_to_fp>
c0009eab:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c0009eaf:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c0009eb3:	89 c5                	mov    ebp,eax
c0009eb5:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009eb8:	e8 18 fc ff ff       	call   c0009ad5 <double_to_fp>
c0009ebd:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009ec0:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c0009ec3:	8d 14 8a             	lea    edx,[edx+ecx*4]
c0009ec6:	89 c1                	mov    ecx,eax
c0009ec8:	52                   	push   edx
c0009ec9:	89 d8                	mov    eax,ebx
c0009ecb:	dd 44 24 2c          	fld    QWORD PTR [esp+0x2c]
c0009ecf:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009ed2:	52                   	push   edx
c0009ed3:	52                   	push   edx
c0009ed4:	89 ea                	mov    edx,ebp
c0009ed6:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009ed9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009edc:	e8 f9 f7 ff ff       	call   c00096da <calc_output_multi>
c0009ee1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0009ee4:	d9 e8                	fld1   
c0009ee6:	dc 74 24 28          	fdiv   QWORD PTR [esp+0x28]
c0009eea:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0009eed:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c0009ef1:	83 c4 10             	add    esp,0x10
c0009ef4:	dd 14 24             	fst    QWORD PTR [esp]
c0009ef7:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c0009efb:	e8 e8 fb ff ff       	call   c0009ae8 <fmod_one>
c0009f00:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009f03:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009f06:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009f0a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c0009f0e:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c0009f12:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c0009f16:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f19:	e8 32 58 01 00       	call   c001f750 <lrint>
c0009f1e:	0f af e8             	imul   ebp,eax
c0009f21:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f25:	01 e8                	add    eax,ebp
c0009f27:	99                   	cdq    
c0009f28:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c0009f2b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0009f2e:	e9 82 fe ff ff       	jmp    c0009db5 <sinc_multichan_vari_process+0xfc>
c0009f33:	83 c4 3c             	add    esp,0x3c
c0009f36:	5b                   	pop    ebx
c0009f37:	5e                   	pop    esi
c0009f38:	5f                   	pop    edi
c0009f39:	5d                   	pop    ebp
c0009f3a:	c3                   	ret    

c0009f3b <sinc_hex_vari_process>:
c0009f3b:	55                   	push   ebp
c0009f3c:	b8 05 00 00 00       	mov    eax,0x5
c0009f41:	57                   	push   edi
c0009f42:	56                   	push   esi
c0009f43:	53                   	push   ebx
c0009f44:	83 ec 3c             	sub    esp,0x3c
c0009f47:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0009f4b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0009f4f:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c0009f52:	85 db                	test   ebx,ebx
c0009f54:	0f 84 56 02 00 00    	je     c000a1b0 <sinc_hex_vari_process+0x275>
c0009f5a:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0009f5d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009f60:	0f af d0             	imul   edx,eax
c0009f63:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0009f66:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c0009f6a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0009f71:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0009f74:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0009f7b:	dd 06                	fld    QWORD PTR [esi]
c0009f7d:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c0009f81:	55                   	push   ebp
c0009f82:	55                   	push   ebp
c0009f83:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009f86:	e8 5b f0 ff ff       	call   c0008fe6 <is_bad_src_ratio>
c0009f8b:	89 c2                	mov    edx,eax
c0009f8d:	58                   	pop    eax
c0009f8e:	59                   	pop    ecx
c0009f8f:	b8 16 00 00 00       	mov    eax,0x16
c0009f94:	85 d2                	test   edx,edx
c0009f96:	0f 85 14 02 00 00    	jne    c000a1b0 <sinc_hex_vari_process+0x275>
c0009f9c:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c0009fa2:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c0009fa5:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c0009fa8:	dd 06                	fld    QWORD PTR [esi]
c0009faa:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c0009fad:	d8 d1                	fcom   st(1)
c0009faf:	df e0                	fnstsw ax
c0009fb1:	9e                   	sahf   
c0009fb2:	76 0f                	jbe    c0009fc3 <sinc_hex_vari_process+0x88>
c0009fb4:	dd d8                	fstp   st(0)
c0009fb6:	d9 e8                	fld1   
c0009fb8:	d8 d9                	fcomp  st(1)
c0009fba:	df e0                	fnstsw ax
c0009fbc:	9e                   	sahf   
c0009fbd:	77 0f                	ja     c0009fce <sinc_hex_vari_process+0x93>
c0009fbf:	dd d8                	fstp   st(0)
c0009fc1:	eb 11                	jmp    c0009fd4 <sinc_hex_vari_process+0x99>
c0009fc3:	dd d9                	fstp   st(1)
c0009fc5:	d9 e8                	fld1   
c0009fc7:	d8 d9                	fcomp  st(1)
c0009fc9:	df e0                	fnstsw ax
c0009fcb:	9e                   	sahf   
c0009fcc:	76 04                	jbe    c0009fd2 <sinc_hex_vari_process+0x97>
c0009fce:	de f9                	fdivp  st(1),st
c0009fd0:	eb 02                	jmp    c0009fd4 <sinc_hex_vari_process+0x99>
c0009fd2:	dd d8                	fstp   st(0)
c0009fd4:	83 ec 10             	sub    esp,0x10
c0009fd7:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009fda:	dd 1c 24             	fstp   QWORD PTR [esp]
c0009fdd:	e8 6e 57 01 00       	call   c001f750 <lrint>
c0009fe2:	40                   	inc    eax
c0009fe3:	0f af c5             	imul   eax,ebp
c0009fe6:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c0009fe9:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009fed:	dd 14 24             	fst    QWORD PTR [esp]
c0009ff0:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c0009ff4:	e8 ef fa ff ff       	call   c0009ae8 <fmod_one>
c0009ff9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0009ffc:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c0009fff:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a003:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a007:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a00b:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a00f:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a012:	e8 39 57 01 00       	call   c001f750 <lrint>
c000a017:	d9 e8                	fld1   
c000a019:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a01d:	0f af e8             	imul   ebp,eax
c000a020:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a024:	01 e8                	add    eax,ebp
c000a026:	99                   	cdq    
c000a027:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a02a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a02d:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c000a033:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a037:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a03a:	83 c4 10             	add    esp,0x10
c000a03d:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a040:	7d 4b                	jge    c000a08d <sinc_hex_vari_process+0x152>
c000a042:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a045:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a048:	01 c8                	add    eax,ecx
c000a04a:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a04d:	99                   	cdq    
c000a04e:	f7 f9                	idiv   ecx
c000a050:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a054:	7d 09                	jge    c000a05f <sinc_hex_vari_process+0x124>
c000a056:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a059:	85 c0                	test   eax,eax
c000a05b:	79 57                	jns    c000a0b4 <sinc_hex_vari_process+0x179>
c000a05d:	eb 70                	jmp    c000a0cf <sinc_hex_vari_process+0x194>
c000a05f:	51                   	push   ecx
c000a060:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a064:	57                   	push   edi
c000a065:	53                   	push   ebx
c000a066:	e8 d4 fa ff ff       	call   c0009b3f <prepare_data>
c000a06b:	83 c4 10             	add    esp,0x10
c000a06e:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a071:	85 c0                	test   eax,eax
c000a073:	0f 85 37 01 00 00    	jne    c000a1b0 <sinc_hex_vari_process+0x275>
c000a079:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a07c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a07f:	01 c8                	add    eax,ecx
c000a081:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a084:	99                   	cdq    
c000a085:	f7 f9                	idiv   ecx
c000a087:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a08b:	7c c9                	jl     c000a056 <sinc_hex_vari_process+0x11b>
c000a08d:	dd 04 24             	fld    QWORD PTR [esp]
c000a090:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a093:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a097:	dd 1e                	fstp   QWORD PTR [esi]
c000a099:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a09c:	99                   	cdq    
c000a09d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0a0:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a0a3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a0a6:	99                   	cdq    
c000a0a7:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a0aa:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a0ad:	31 c0                	xor    eax,eax
c000a0af:	e9 fc 00 00 00       	jmp    c000a1b0 <sinc_hex_vari_process+0x275>
c000a0b4:	dd 04 24             	fld    QWORD PTR [esp]
c000a0b7:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a0ba:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a0be:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a0c2:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a0c6:	d9 c9                	fxch   st(1)
c000a0c8:	de d9                	fcompp 
c000a0ca:	df e0                	fnstsw ax
c000a0cc:	9e                   	sahf   
c000a0cd:	73 be                	jae    c000a08d <sinc_hex_vari_process+0x152>
c000a0cf:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a0d3:	7e 2f                	jle    c000a104 <sinc_hex_vari_process+0x1c9>
c000a0d5:	dd 06                	fld    QWORD PTR [esi]
c000a0d7:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a0da:	83 ec 10             	sub    esp,0x10
c000a0dd:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a0e0:	e8 4b 56 01 00       	call   c001f730 <fabs>
c000a0e5:	83 c4 10             	add    esp,0x10
c000a0e8:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c000a0ee:	df e0                	fnstsw ax
c000a0f0:	9e                   	sahf   
c000a0f1:	76 11                	jbe    c000a104 <sinc_hex_vari_process+0x1c9>
c000a0f3:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a0f6:	dc 26                	fsub   QWORD PTR [esi]
c000a0f8:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a0fb:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a0fe:	dc 06                	fadd   QWORD PTR [esi]
c000a100:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a104:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a107:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a10b:	d9 e8                	fld1   
c000a10d:	d8 d9                	fcomp  st(1)
c000a10f:	df e0                	fnstsw ax
c000a111:	9e                   	sahf   
c000a112:	77 04                	ja     c000a118 <sinc_hex_vari_process+0x1dd>
c000a114:	dd d8                	fstp   st(0)
c000a116:	d9 e8                	fld1   
c000a118:	de c9                	fmulp  st(1),st
c000a11a:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a11e:	50                   	push   eax
c000a11f:	50                   	push   eax
c000a120:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a124:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a128:	e8 a8 f9 ff ff       	call   c0009ad5 <double_to_fp>
c000a12d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a131:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a135:	89 c5                	mov    ebp,eax
c000a137:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a13a:	e8 96 f9 ff ff       	call   c0009ad5 <double_to_fp>
c000a13f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a142:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a145:	83 c4 0c             	add    esp,0xc
c000a148:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a14b:	89 c1                	mov    ecx,eax
c000a14d:	52                   	push   edx
c000a14e:	89 d8                	mov    eax,ebx
c000a150:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a154:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a157:	52                   	push   edx
c000a158:	52                   	push   edx
c000a159:	89 ea                	mov    edx,ebp
c000a15b:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a15e:	e8 db f2 ff ff       	call   c000943e <calc_output_hex>
c000a163:	d9 e8                	fld1   
c000a165:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a169:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000a16d:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a171:	dd 14 24             	fst    QWORD PTR [esp]
c000a174:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a178:	e8 6b f9 ff ff       	call   c0009ae8 <fmod_one>
c000a17d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a180:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a183:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a187:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a18b:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a18f:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a193:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a196:	e8 b5 55 01 00       	call   c001f750 <lrint>
c000a19b:	0f af e8             	imul   ebp,eax
c000a19e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a1a2:	01 e8                	add    eax,ebp
c000a1a4:	99                   	cdq    
c000a1a5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a1a8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a1ab:	e9 87 fe ff ff       	jmp    c000a037 <sinc_hex_vari_process+0xfc>
c000a1b0:	83 c4 3c             	add    esp,0x3c
c000a1b3:	5b                   	pop    ebx
c000a1b4:	5e                   	pop    esi
c000a1b5:	5f                   	pop    edi
c000a1b6:	5d                   	pop    ebp
c000a1b7:	c3                   	ret    

c000a1b8 <sinc_quad_vari_process>:
c000a1b8:	55                   	push   ebp
c000a1b9:	b8 05 00 00 00       	mov    eax,0x5
c000a1be:	57                   	push   edi
c000a1bf:	56                   	push   esi
c000a1c0:	53                   	push   ebx
c000a1c1:	83 ec 3c             	sub    esp,0x3c
c000a1c4:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a1c8:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a1cc:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a1cf:	85 db                	test   ebx,ebx
c000a1d1:	0f 84 56 02 00 00    	je     c000a42d <sinc_quad_vari_process+0x275>
c000a1d7:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a1da:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a1dd:	0f af d0             	imul   edx,eax
c000a1e0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a1e3:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a1e7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a1ee:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a1f1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a1f8:	dd 06                	fld    QWORD PTR [esi]
c000a1fa:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a1fe:	55                   	push   ebp
c000a1ff:	55                   	push   ebp
c000a200:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a203:	e8 de ed ff ff       	call   c0008fe6 <is_bad_src_ratio>
c000a208:	89 c2                	mov    edx,eax
c000a20a:	58                   	pop    eax
c000a20b:	59                   	pop    ecx
c000a20c:	b8 16 00 00 00       	mov    eax,0x16
c000a211:	85 d2                	test   edx,edx
c000a213:	0f 85 14 02 00 00    	jne    c000a42d <sinc_quad_vari_process+0x275>
c000a219:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c000a21f:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a222:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a225:	dd 06                	fld    QWORD PTR [esi]
c000a227:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a22a:	d8 d1                	fcom   st(1)
c000a22c:	df e0                	fnstsw ax
c000a22e:	9e                   	sahf   
c000a22f:	76 0f                	jbe    c000a240 <sinc_quad_vari_process+0x88>
c000a231:	dd d8                	fstp   st(0)
c000a233:	d9 e8                	fld1   
c000a235:	d8 d9                	fcomp  st(1)
c000a237:	df e0                	fnstsw ax
c000a239:	9e                   	sahf   
c000a23a:	77 0f                	ja     c000a24b <sinc_quad_vari_process+0x93>
c000a23c:	dd d8                	fstp   st(0)
c000a23e:	eb 11                	jmp    c000a251 <sinc_quad_vari_process+0x99>
c000a240:	dd d9                	fstp   st(1)
c000a242:	d9 e8                	fld1   
c000a244:	d8 d9                	fcomp  st(1)
c000a246:	df e0                	fnstsw ax
c000a248:	9e                   	sahf   
c000a249:	76 04                	jbe    c000a24f <sinc_quad_vari_process+0x97>
c000a24b:	de f9                	fdivp  st(1),st
c000a24d:	eb 02                	jmp    c000a251 <sinc_quad_vari_process+0x99>
c000a24f:	dd d8                	fstp   st(0)
c000a251:	83 ec 10             	sub    esp,0x10
c000a254:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a257:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a25a:	e8 f1 54 01 00       	call   c001f750 <lrint>
c000a25f:	40                   	inc    eax
c000a260:	0f af c5             	imul   eax,ebp
c000a263:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a266:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a26a:	dd 14 24             	fst    QWORD PTR [esp]
c000a26d:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a271:	e8 72 f8 ff ff       	call   c0009ae8 <fmod_one>
c000a276:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a279:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a27c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a280:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a284:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a288:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a28c:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a28f:	e8 bc 54 01 00       	call   c001f750 <lrint>
c000a294:	d9 e8                	fld1   
c000a296:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a29a:	0f af e8             	imul   ebp,eax
c000a29d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a2a1:	01 e8                	add    eax,ebp
c000a2a3:	99                   	cdq    
c000a2a4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a2a7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a2aa:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c000a2b0:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a2b4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a2b7:	83 c4 10             	add    esp,0x10
c000a2ba:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a2bd:	7d 4b                	jge    c000a30a <sinc_quad_vari_process+0x152>
c000a2bf:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2c2:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2c5:	01 c8                	add    eax,ecx
c000a2c7:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a2ca:	99                   	cdq    
c000a2cb:	f7 f9                	idiv   ecx
c000a2cd:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a2d1:	7d 09                	jge    c000a2dc <sinc_quad_vari_process+0x124>
c000a2d3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a2d6:	85 c0                	test   eax,eax
c000a2d8:	79 57                	jns    c000a331 <sinc_quad_vari_process+0x179>
c000a2da:	eb 70                	jmp    c000a34c <sinc_quad_vari_process+0x194>
c000a2dc:	51                   	push   ecx
c000a2dd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a2e1:	57                   	push   edi
c000a2e2:	53                   	push   ebx
c000a2e3:	e8 57 f8 ff ff       	call   c0009b3f <prepare_data>
c000a2e8:	83 c4 10             	add    esp,0x10
c000a2eb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a2ee:	85 c0                	test   eax,eax
c000a2f0:	0f 85 37 01 00 00    	jne    c000a42d <sinc_quad_vari_process+0x275>
c000a2f6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a2f9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a2fc:	01 c8                	add    eax,ecx
c000a2fe:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a301:	99                   	cdq    
c000a302:	f7 f9                	idiv   ecx
c000a304:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a308:	7c c9                	jl     c000a2d3 <sinc_quad_vari_process+0x11b>
c000a30a:	dd 04 24             	fld    QWORD PTR [esp]
c000a30d:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a310:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a314:	dd 1e                	fstp   QWORD PTR [esi]
c000a316:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a319:	99                   	cdq    
c000a31a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a31d:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a320:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a323:	99                   	cdq    
c000a324:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a327:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a32a:	31 c0                	xor    eax,eax
c000a32c:	e9 fc 00 00 00       	jmp    c000a42d <sinc_quad_vari_process+0x275>
c000a331:	dd 04 24             	fld    QWORD PTR [esp]
c000a334:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a337:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a33b:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a33f:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a343:	d9 c9                	fxch   st(1)
c000a345:	de d9                	fcompp 
c000a347:	df e0                	fnstsw ax
c000a349:	9e                   	sahf   
c000a34a:	73 be                	jae    c000a30a <sinc_quad_vari_process+0x152>
c000a34c:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a350:	7e 2f                	jle    c000a381 <sinc_quad_vari_process+0x1c9>
c000a352:	dd 06                	fld    QWORD PTR [esi]
c000a354:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a357:	83 ec 10             	sub    esp,0x10
c000a35a:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a35d:	e8 ce 53 01 00       	call   c001f730 <fabs>
c000a362:	83 c4 10             	add    esp,0x10
c000a365:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c000a36b:	df e0                	fnstsw ax
c000a36d:	9e                   	sahf   
c000a36e:	76 11                	jbe    c000a381 <sinc_quad_vari_process+0x1c9>
c000a370:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a373:	dc 26                	fsub   QWORD PTR [esi]
c000a375:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a378:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a37b:	dc 06                	fadd   QWORD PTR [esi]
c000a37d:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a381:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a384:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a388:	d9 e8                	fld1   
c000a38a:	d8 d9                	fcomp  st(1)
c000a38c:	df e0                	fnstsw ax
c000a38e:	9e                   	sahf   
c000a38f:	77 04                	ja     c000a395 <sinc_quad_vari_process+0x1dd>
c000a391:	dd d8                	fstp   st(0)
c000a393:	d9 e8                	fld1   
c000a395:	de c9                	fmulp  st(1),st
c000a397:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a39b:	50                   	push   eax
c000a39c:	50                   	push   eax
c000a39d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a3a5:	e8 2b f7 ff ff       	call   c0009ad5 <double_to_fp>
c000a3aa:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a3ae:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a3b2:	89 c5                	mov    ebp,eax
c000a3b4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3b7:	e8 19 f7 ff ff       	call   c0009ad5 <double_to_fp>
c000a3bc:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a3bf:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a3c2:	83 c4 0c             	add    esp,0xc
c000a3c5:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a3c8:	89 c1                	mov    ecx,eax
c000a3ca:	52                   	push   edx
c000a3cb:	89 d8                	mov    eax,ebx
c000a3cd:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a3d1:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a3d4:	52                   	push   edx
c000a3d5:	52                   	push   edx
c000a3d6:	89 ea                	mov    edx,ebp
c000a3d8:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a3db:	e8 99 ee ff ff       	call   c0009279 <calc_output_quad>
c000a3e0:	d9 e8                	fld1   
c000a3e2:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a3e6:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000a3ea:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a3ee:	dd 14 24             	fst    QWORD PTR [esp]
c000a3f1:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a3f5:	e8 ee f6 ff ff       	call   c0009ae8 <fmod_one>
c000a3fa:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a3fd:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a400:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a404:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a408:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a40c:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a410:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a413:	e8 38 53 01 00       	call   c001f750 <lrint>
c000a418:	0f af e8             	imul   ebp,eax
c000a41b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a41f:	01 e8                	add    eax,ebp
c000a421:	99                   	cdq    
c000a422:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a425:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a428:	e9 87 fe ff ff       	jmp    c000a2b4 <sinc_quad_vari_process+0xfc>
c000a42d:	83 c4 3c             	add    esp,0x3c
c000a430:	5b                   	pop    ebx
c000a431:	5e                   	pop    esi
c000a432:	5f                   	pop    edi
c000a433:	5d                   	pop    ebp
c000a434:	c3                   	ret    

c000a435 <sinc_stereo_vari_process>:
c000a435:	55                   	push   ebp
c000a436:	b8 05 00 00 00       	mov    eax,0x5
c000a43b:	57                   	push   edi
c000a43c:	56                   	push   esi
c000a43d:	53                   	push   ebx
c000a43e:	83 ec 3c             	sub    esp,0x3c
c000a441:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a445:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a449:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a44c:	85 db                	test   ebx,ebx
c000a44e:	0f 84 56 02 00 00    	je     c000a6aa <sinc_stereo_vari_process+0x275>
c000a454:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a457:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a45a:	0f af d0             	imul   edx,eax
c000a45d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a460:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a464:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a46b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a46e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a475:	dd 06                	fld    QWORD PTR [esi]
c000a477:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a47b:	55                   	push   ebp
c000a47c:	55                   	push   ebp
c000a47d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a480:	e8 61 eb ff ff       	call   c0008fe6 <is_bad_src_ratio>
c000a485:	89 c2                	mov    edx,eax
c000a487:	58                   	pop    eax
c000a488:	59                   	pop    ecx
c000a489:	b8 16 00 00 00       	mov    eax,0x16
c000a48e:	85 d2                	test   edx,edx
c000a490:	0f 85 14 02 00 00    	jne    c000a6aa <sinc_stereo_vari_process+0x275>
c000a496:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c000a49c:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a49f:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a4a2:	dd 06                	fld    QWORD PTR [esi]
c000a4a4:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a4a7:	d8 d1                	fcom   st(1)
c000a4a9:	df e0                	fnstsw ax
c000a4ab:	9e                   	sahf   
c000a4ac:	76 0f                	jbe    c000a4bd <sinc_stereo_vari_process+0x88>
c000a4ae:	dd d8                	fstp   st(0)
c000a4b0:	d9 e8                	fld1   
c000a4b2:	d8 d9                	fcomp  st(1)
c000a4b4:	df e0                	fnstsw ax
c000a4b6:	9e                   	sahf   
c000a4b7:	77 0f                	ja     c000a4c8 <sinc_stereo_vari_process+0x93>
c000a4b9:	dd d8                	fstp   st(0)
c000a4bb:	eb 11                	jmp    c000a4ce <sinc_stereo_vari_process+0x99>
c000a4bd:	dd d9                	fstp   st(1)
c000a4bf:	d9 e8                	fld1   
c000a4c1:	d8 d9                	fcomp  st(1)
c000a4c3:	df e0                	fnstsw ax
c000a4c5:	9e                   	sahf   
c000a4c6:	76 04                	jbe    c000a4cc <sinc_stereo_vari_process+0x97>
c000a4c8:	de f9                	fdivp  st(1),st
c000a4ca:	eb 02                	jmp    c000a4ce <sinc_stereo_vari_process+0x99>
c000a4cc:	dd d8                	fstp   st(0)
c000a4ce:	83 ec 10             	sub    esp,0x10
c000a4d1:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4d4:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a4d7:	e8 74 52 01 00       	call   c001f750 <lrint>
c000a4dc:	40                   	inc    eax
c000a4dd:	0f af c5             	imul   eax,ebp
c000a4e0:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a4e3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a4e7:	dd 14 24             	fst    QWORD PTR [esp]
c000a4ea:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a4ee:	e8 f5 f5 ff ff       	call   c0009ae8 <fmod_one>
c000a4f3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a4f6:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a4f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a4fd:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a501:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a505:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a509:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a50c:	e8 3f 52 01 00       	call   c001f750 <lrint>
c000a511:	d9 e8                	fld1   
c000a513:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a517:	0f af e8             	imul   ebp,eax
c000a51a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a51e:	01 e8                	add    eax,ebp
c000a520:	99                   	cdq    
c000a521:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a524:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a527:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c000a52d:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a531:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a534:	83 c4 10             	add    esp,0x10
c000a537:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a53a:	7d 4b                	jge    c000a587 <sinc_stereo_vari_process+0x152>
c000a53c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a53f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a542:	01 c8                	add    eax,ecx
c000a544:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a547:	99                   	cdq    
c000a548:	f7 f9                	idiv   ecx
c000a54a:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a54e:	7d 09                	jge    c000a559 <sinc_stereo_vari_process+0x124>
c000a550:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a553:	85 c0                	test   eax,eax
c000a555:	79 57                	jns    c000a5ae <sinc_stereo_vari_process+0x179>
c000a557:	eb 70                	jmp    c000a5c9 <sinc_stereo_vari_process+0x194>
c000a559:	51                   	push   ecx
c000a55a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a55e:	57                   	push   edi
c000a55f:	53                   	push   ebx
c000a560:	e8 da f5 ff ff       	call   c0009b3f <prepare_data>
c000a565:	83 c4 10             	add    esp,0x10
c000a568:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a56b:	85 c0                	test   eax,eax
c000a56d:	0f 85 37 01 00 00    	jne    c000a6aa <sinc_stereo_vari_process+0x275>
c000a573:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a576:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a579:	01 c8                	add    eax,ecx
c000a57b:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a57e:	99                   	cdq    
c000a57f:	f7 f9                	idiv   ecx
c000a581:	39 54 24 14          	cmp    DWORD PTR [esp+0x14],edx
c000a585:	7c c9                	jl     c000a550 <sinc_stereo_vari_process+0x11b>
c000a587:	dd 04 24             	fld    QWORD PTR [esp]
c000a58a:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a58d:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a591:	dd 1e                	fstp   QWORD PTR [esi]
c000a593:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a596:	99                   	cdq    
c000a597:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a59a:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a59d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a5a0:	99                   	cdq    
c000a5a1:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a5a4:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a5a7:	31 c0                	xor    eax,eax
c000a5a9:	e9 fc 00 00 00       	jmp    c000a6aa <sinc_stereo_vari_process+0x275>
c000a5ae:	dd 04 24             	fld    QWORD PTR [esp]
c000a5b1:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a5b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5b8:	dc 44 24 20          	fadd   QWORD PTR [esp+0x20]
c000a5bc:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000a5c0:	d9 c9                	fxch   st(1)
c000a5c2:	de d9                	fcompp 
c000a5c4:	df e0                	fnstsw ax
c000a5c6:	9e                   	sahf   
c000a5c7:	73 be                	jae    c000a587 <sinc_stereo_vari_process+0x152>
c000a5c9:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a5cd:	7e 2f                	jle    c000a5fe <sinc_stereo_vari_process+0x1c9>
c000a5cf:	dd 06                	fld    QWORD PTR [esi]
c000a5d1:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a5d4:	83 ec 10             	sub    esp,0x10
c000a5d7:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a5da:	e8 51 51 01 00       	call   c001f730 <fabs>
c000a5df:	83 c4 10             	add    esp,0x10
c000a5e2:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c000a5e8:	df e0                	fnstsw ax
c000a5ea:	9e                   	sahf   
c000a5eb:	76 11                	jbe    c000a5fe <sinc_stereo_vari_process+0x1c9>
c000a5ed:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a5f0:	dc 26                	fsub   QWORD PTR [esi]
c000a5f2:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a5f5:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a5f8:	dc 06                	fadd   QWORD PTR [esi]
c000a5fa:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a5fe:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a601:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a605:	d9 e8                	fld1   
c000a607:	d8 d9                	fcomp  st(1)
c000a609:	df e0                	fnstsw ax
c000a60b:	9e                   	sahf   
c000a60c:	77 04                	ja     c000a612 <sinc_stereo_vari_process+0x1dd>
c000a60e:	dd d8                	fstp   st(0)
c000a610:	d9 e8                	fld1   
c000a612:	de c9                	fmulp  st(1),st
c000a614:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000a618:	50                   	push   eax
c000a619:	50                   	push   eax
c000a61a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a61e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a622:	e8 ae f4 ff ff       	call   c0009ad5 <double_to_fp>
c000a627:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a62b:	dc 4c 24 28          	fmul   QWORD PTR [esp+0x28]
c000a62f:	89 c5                	mov    ebp,eax
c000a631:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a634:	e8 9c f4 ff ff       	call   c0009ad5 <double_to_fp>
c000a639:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000a63c:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000a63f:	83 c4 0c             	add    esp,0xc
c000a642:	8d 14 8a             	lea    edx,[edx+ecx*4]
c000a645:	89 c1                	mov    ecx,eax
c000a647:	52                   	push   edx
c000a648:	89 d8                	mov    eax,ebx
c000a64a:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a64e:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a651:	52                   	push   edx
c000a652:	52                   	push   edx
c000a653:	89 ea                	mov    edx,ebp
c000a655:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a658:	e8 da ea ff ff       	call   c0009137 <calc_output_stereo>
c000a65d:	d9 e8                	fld1   
c000a65f:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a663:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000a667:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a66b:	dd 14 24             	fst    QWORD PTR [esp]
c000a66e:	dd 5c 24 38          	fstp   QWORD PTR [esp+0x38]
c000a672:	e8 71 f4 ff ff       	call   c0009ae8 <fmod_one>
c000a677:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a67a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a67d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a681:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a685:	dd 44 24 38          	fld    QWORD PTR [esp+0x38]
c000a689:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a68d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a690:	e8 bb 50 01 00       	call   c001f750 <lrint>
c000a695:	0f af e8             	imul   ebp,eax
c000a698:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a69c:	01 e8                	add    eax,ebp
c000a69e:	99                   	cdq    
c000a69f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a6a2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a6a5:	e9 87 fe ff ff       	jmp    c000a531 <sinc_stereo_vari_process+0xfc>
c000a6aa:	83 c4 3c             	add    esp,0x3c
c000a6ad:	5b                   	pop    ebx
c000a6ae:	5e                   	pop    esi
c000a6af:	5f                   	pop    edi
c000a6b0:	5d                   	pop    ebp
c000a6b1:	c3                   	ret    

c000a6b2 <sinc_mono_vari_process>:
c000a6b2:	55                   	push   ebp
c000a6b3:	b8 05 00 00 00       	mov    eax,0x5
c000a6b8:	57                   	push   edi
c000a6b9:	56                   	push   esi
c000a6ba:	53                   	push   ebx
c000a6bb:	83 ec 3c             	sub    esp,0x3c
c000a6be:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000a6c2:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000a6c6:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000a6c9:	85 db                	test   ebx,ebx
c000a6cb:	0f 84 55 02 00 00    	je     c000a926 <sinc_mono_vari_process+0x274>
c000a6d1:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000a6d4:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a6d7:	0f af d0             	imul   edx,eax
c000a6da:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000a6dd:	0f af 47 0c          	imul   eax,DWORD PTR [edi+0xc]
c000a6e1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000a6e8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000a6eb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000a6f2:	dd 06                	fld    QWORD PTR [esi]
c000a6f4:	dd 54 24 08          	fst    QWORD PTR [esp+0x8]
c000a6f8:	51                   	push   ecx
c000a6f9:	51                   	push   ecx
c000a6fa:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a6fd:	e8 e4 e8 ff ff       	call   c0008fe6 <is_bad_src_ratio>
c000a702:	5d                   	pop    ebp
c000a703:	89 c2                	mov    edx,eax
c000a705:	58                   	pop    eax
c000a706:	85 d2                	test   edx,edx
c000a708:	b8 16 00 00 00       	mov    eax,0x16
c000a70d:	0f 85 13 02 00 00    	jne    c000a926 <sinc_mono_vari_process+0x274>
c000a713:	d9 05 90 10 02 c0    	fld    DWORD PTR ds:0xc0021090
c000a719:	da 43 18             	fiadd  DWORD PTR [ebx+0x18]
c000a71c:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a71f:	dd 06                	fld    QWORD PTR [esi]
c000a721:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a724:	d8 d1                	fcom   st(1)
c000a726:	df e0                	fnstsw ax
c000a728:	9e                   	sahf   
c000a729:	76 0f                	jbe    c000a73a <sinc_mono_vari_process+0x88>
c000a72b:	dd d8                	fstp   st(0)
c000a72d:	d9 e8                	fld1   
c000a72f:	d8 d9                	fcomp  st(1)
c000a731:	df e0                	fnstsw ax
c000a733:	9e                   	sahf   
c000a734:	77 0f                	ja     c000a745 <sinc_mono_vari_process+0x93>
c000a736:	dd d8                	fstp   st(0)
c000a738:	eb 11                	jmp    c000a74b <sinc_mono_vari_process+0x99>
c000a73a:	dd d9                	fstp   st(1)
c000a73c:	d9 e8                	fld1   
c000a73e:	d8 d9                	fcomp  st(1)
c000a740:	df e0                	fnstsw ax
c000a742:	9e                   	sahf   
c000a743:	76 04                	jbe    c000a749 <sinc_mono_vari_process+0x97>
c000a745:	de f9                	fdivp  st(1),st
c000a747:	eb 02                	jmp    c000a74b <sinc_mono_vari_process+0x99>
c000a749:	dd d8                	fstp   st(0)
c000a74b:	83 ec 10             	sub    esp,0x10
c000a74e:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000a751:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a754:	e8 f7 4f 01 00       	call   c001f750 <lrint>
c000a759:	dd 46 08             	fld    QWORD PTR [esi+0x8]
c000a75c:	40                   	inc    eax
c000a75d:	dd 14 24             	fst    QWORD PTR [esp]
c000a760:	0f af e8             	imul   ebp,eax
c000a763:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a767:	e8 7c f3 ff ff       	call   c0009ae8 <fmod_one>
c000a76c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a76f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a773:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a776:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a77a:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000a77e:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a782:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a786:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a789:	e8 c2 4f 01 00       	call   c001f750 <lrint>
c000a78e:	d9 e8                	fld1   
c000a790:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a794:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a799:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a79d:	99                   	cdq    
c000a79e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a7a1:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a7a4:	dc 05 f8 0e 02 c0    	fadd   QWORD PTR ds:0xc0020ef8
c000a7aa:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000a7ae:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000a7b7:	7d 44                	jge    c000a7fd <sinc_mono_vari_process+0x14b>
c000a7b9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7bc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7bf:	01 c8                	add    eax,ecx
c000a7c1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7c4:	99                   	cdq    
c000a7c5:	f7 f9                	idiv   ecx
c000a7c7:	39 d5                	cmp    ebp,edx
c000a7c9:	7d 09                	jge    c000a7d4 <sinc_mono_vari_process+0x122>
c000a7cb:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c000a7ce:	85 c0                	test   eax,eax
c000a7d0:	79 52                	jns    c000a824 <sinc_mono_vari_process+0x172>
c000a7d2:	eb 6b                	jmp    c000a83f <sinc_mono_vari_process+0x18d>
c000a7d4:	52                   	push   edx
c000a7d5:	55                   	push   ebp
c000a7d6:	57                   	push   edi
c000a7d7:	53                   	push   ebx
c000a7d8:	e8 62 f3 ff ff       	call   c0009b3f <prepare_data>
c000a7dd:	83 c4 10             	add    esp,0x10
c000a7e0:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000a7e3:	85 c0                	test   eax,eax
c000a7e5:	0f 85 3b 01 00 00    	jne    c000a926 <sinc_mono_vari_process+0x274>
c000a7eb:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000a7ee:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000a7f1:	01 c8                	add    eax,ecx
c000a7f3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000a7f6:	99                   	cdq    
c000a7f7:	f7 f9                	idiv   ecx
c000a7f9:	39 d5                	cmp    ebp,edx
c000a7fb:	7c ce                	jl     c000a7cb <sinc_mono_vari_process+0x119>
c000a7fd:	dd 04 24             	fld    QWORD PTR [esp]
c000a800:	dd 5e 08             	fstp   QWORD PTR [esi+0x8]
c000a803:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a807:	dd 1e                	fstp   QWORD PTR [esi]
c000a809:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000a80c:	99                   	cdq    
c000a80d:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a810:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000a813:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000a816:	99                   	cdq    
c000a817:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000a81a:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000a81d:	31 c0                	xor    eax,eax
c000a81f:	e9 02 01 00 00       	jmp    c000a926 <sinc_mono_vari_process+0x274>
c000a824:	dd 04 24             	fld    QWORD PTR [esp]
c000a827:	da 43 34             	fiadd  DWORD PTR [ebx+0x34]
c000a82a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a82e:	dc 44 24 18          	fadd   QWORD PTR [esp+0x18]
c000a832:	db 44 24 10          	fild   DWORD PTR [esp+0x10]
c000a836:	d9 c9                	fxch   st(1)
c000a838:	de d9                	fcompp 
c000a83a:	df e0                	fnstsw ax
c000a83c:	9e                   	sahf   
c000a83d:	77 be                	ja     c000a7fd <sinc_mono_vari_process+0x14b>
c000a83f:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000a843:	7e 2f                	jle    c000a874 <sinc_mono_vari_process+0x1c2>
c000a845:	dd 06                	fld    QWORD PTR [esi]
c000a847:	dc 67 1c             	fsub   QWORD PTR [edi+0x1c]
c000a84a:	83 ec 10             	sub    esp,0x10
c000a84d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a850:	e8 db 4e 01 00       	call   c001f730 <fabs>
c000a855:	83 c4 10             	add    esp,0x10
c000a858:	dc 1d 80 10 02 c0    	fcomp  QWORD PTR ds:0xc0021080
c000a85e:	df e0                	fnstsw ax
c000a860:	9e                   	sahf   
c000a861:	76 11                	jbe    c000a874 <sinc_mono_vari_process+0x1c2>
c000a863:	dd 47 1c             	fld    QWORD PTR [edi+0x1c]
c000a866:	dc 26                	fsub   QWORD PTR [esi]
c000a868:	da 4b 14             	fimul  DWORD PTR [ebx+0x14]
c000a86b:	da 73 10             	fidiv  DWORD PTR [ebx+0x10]
c000a86e:	dc 06                	fadd   QWORD PTR [esi]
c000a870:	dd 5c 24 08          	fstp   QWORD PTR [esp+0x8]
c000a874:	db 43 1c             	fild   DWORD PTR [ebx+0x1c]
c000a877:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000a87b:	d9 e8                	fld1   
c000a87d:	d8 d9                	fcomp  st(1)
c000a87f:	df e0                	fnstsw ax
c000a881:	9e                   	sahf   
c000a882:	77 04                	ja     c000a888 <sinc_mono_vari_process+0x1d6>
c000a884:	dd d8                	fstp   st(0)
c000a886:	d9 e8                	fld1   
c000a888:	de c9                	fmulp  st(1),st
c000a88a:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a88e:	50                   	push   eax
c000a88f:	50                   	push   eax
c000a890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a894:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a898:	e8 38 f2 ff ff       	call   c0009ad5 <double_to_fp>
c000a89d:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000a8a1:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a8a5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a8a9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a8ac:	e8 24 f2 ff ff       	call   c0009ad5 <double_to_fp>
c000a8b1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000a8b5:	dd 44 24 20          	fld    QWORD PTR [esp+0x20]
c000a8b9:	da 73 1c             	fidiv  DWORD PTR [ebx+0x1c]
c000a8bc:	89 c1                	mov    ecx,eax
c000a8be:	89 d8                	mov    eax,ebx
c000a8c0:	dd 5c 24 20          	fstp   QWORD PTR [esp+0x20]
c000a8c4:	e8 89 e7 ff ff       	call   c0009052 <calc_output_single>
c000a8c9:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a8cc:	dc 4c 24 20          	fmul   QWORD PTR [esp+0x20]
c000a8d0:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000a8d3:	d9 1c 90             	fstp   DWORD PTR [eax+edx*4]
c000a8d6:	d9 e8                	fld1   
c000a8d8:	dc 74 24 18          	fdiv   QWORD PTR [esp+0x18]
c000a8dc:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000a8df:	dc 44 24 10          	fadd   QWORD PTR [esp+0x10]
c000a8e3:	dd 14 24             	fst    QWORD PTR [esp]
c000a8e6:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c000a8ea:	e8 f9 f1 ff ff       	call   c0009ae8 <fmod_one>
c000a8ef:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000a8f2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8f6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000a8f9:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000a8fd:	dd 44 24 30          	fld    QWORD PTR [esp+0x30]
c000a901:	dc 64 24 10          	fsub   QWORD PTR [esp+0x10]
c000a905:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a909:	dd 1c 24             	fstp   QWORD PTR [esp]
c000a90c:	e8 3f 4e 01 00       	call   c001f750 <lrint>
c000a911:	0f af 44 24 38       	imul   eax,DWORD PTR [esp+0x38]
c000a916:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a91a:	99                   	cdq    
c000a91b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000a91e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000a921:	e9 88 fe ff ff       	jmp    c000a7ae <sinc_mono_vari_process+0xfc>
c000a926:	83 c4 3c             	add    esp,0x3c
c000a929:	5b                   	pop    ebx
c000a92a:	5e                   	pop    esi
c000a92b:	5f                   	pop    edi
c000a92c:	5d                   	pop    ebp
c000a92d:	c3                   	ret    

c000a92e <sinc_get_name>:
c000a92e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a932:	31 c0                	xor    eax,eax
c000a934:	83 fa 02             	cmp    edx,0x2
c000a937:	77 07                	ja     c000a940 <sinc_get_name+0x12>
c000a939:	8b 04 95 60 0f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf0a0]
c000a940:	c3                   	ret    

c000a941 <sinc_get_description>:
c000a941:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a945:	31 c0                	xor    eax,eax
c000a947:	83 fa 02             	cmp    edx,0x2
c000a94a:	77 07                	ja     c000a953 <sinc_get_description+0x12>
c000a94c:	8b 04 95 54 0f 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdf0ac]
c000a953:	c3                   	ret    

c000a954 <sinc_set_converter>:
c000a954:	53                   	push   ebx
c000a955:	81 ec 58 08 00 00    	sub    esp,0x858
c000a95b:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000a962:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000a965:	85 c0                	test   eax,eax
c000a967:	74 13                	je     c000a97c <sinc_set_converter+0x28>
c000a969:	83 ec 0c             	sub    esp,0xc
c000a96c:	50                   	push   eax
c000a96d:	e8 7d 16 00 00       	call   c000bfef <free>
c000a972:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000a979:	83 c4 10             	add    esp,0x10
c000a97c:	50                   	push   eax
c000a97d:	68 44 08 00 00       	push   0x844
c000a982:	6a 00                	push   0x0
c000a984:	8d 44 24 18          	lea    eax,[esp+0x18]
c000a988:	50                   	push   eax
c000a989:	e8 33 5d ff ff       	call   c00006c1 <memset>
c000a98e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	b8 0b 00 00 00       	mov    eax,0xb
c000a999:	81 fa 80 00 00 00    	cmp    edx,0x80
c000a99f:	7f 6e                	jg     c000aa0f <sinc_set_converter+0xbb>
c000a9a1:	83 fa 01             	cmp    edx,0x1
c000a9a4:	75 10                	jne    c000a9b6 <sinc_set_converter+0x62>
c000a9a6:	c7 43 24 b2 a6 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a6b2
c000a9ad:	c7 43 20 b2 a6 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a6b2
c000a9b4:	eb 4d                	jmp    c000aa03 <sinc_set_converter+0xaf>
c000a9b6:	83 fa 02             	cmp    edx,0x2
c000a9b9:	75 10                	jne    c000a9cb <sinc_set_converter+0x77>
c000a9bb:	c7 43 24 35 a4 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a435
c000a9c2:	c7 43 20 35 a4 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a435
c000a9c9:	eb 38                	jmp    c000aa03 <sinc_set_converter+0xaf>
c000a9cb:	83 fa 04             	cmp    edx,0x4
c000a9ce:	75 10                	jne    c000a9e0 <sinc_set_converter+0x8c>
c000a9d0:	c7 43 24 b8 a1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000a1b8
c000a9d7:	c7 43 20 b8 a1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000a1b8
c000a9de:	eb 23                	jmp    c000aa03 <sinc_set_converter+0xaf>
c000a9e0:	83 fa 06             	cmp    edx,0x6
c000a9e3:	75 10                	jne    c000a9f5 <sinc_set_converter+0xa1>
c000a9e5:	c7 43 24 3b 9f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009f3b
c000a9ec:	c7 43 20 3b 9f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009f3b
c000a9f3:	eb 0e                	jmp    c000aa03 <sinc_set_converter+0xaf>
c000a9f5:	c7 43 24 b9 9c 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0009cb9
c000a9fc:	c7 43 20 b9 9c 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0009cb9
c000aa03:	c7 43 28 77 96 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009677
c000aa0a:	b8 0a 00 00 00       	mov    eax,0xa
c000aa0f:	81 c4 58 08 00 00    	add    esp,0x858
c000aa15:	5b                   	pop    ebx
c000aa16:	c3                   	ret    

c000aa17 <is_bad_src_ratio>:
c000aa17:	83 ec 0c             	sub    esp,0xc
c000aa1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa1e:	89 04 24             	mov    DWORD PTR [esp],eax
c000aa21:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aa25:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa29:	dd 04 24             	fld    QWORD PTR [esp]
c000aa2c:	dd 05 80 0e 02 c0    	fld    QWORD PTR ds:0xc0020e80
c000aa32:	de d9                	fcompp 
c000aa34:	df e0                	fnstsw ax
c000aa36:	f6 c4 45             	test   ah,0x45
c000aa39:	74 10                	je     c000aa4b <is_bad_src_ratio+0x34>
c000aa3b:	dd 04 24             	fld    QWORD PTR [esp]
c000aa3e:	dc 1d 88 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020e88
c000aa44:	df e0                	fnstsw ax
c000aa46:	f6 c4 45             	test   ah,0x45
c000aa49:	75 07                	jne    c000aa52 <is_bad_src_ratio+0x3b>
c000aa4b:	b8 01 00 00 00       	mov    eax,0x1
c000aa50:	eb 05                	jmp    c000aa57 <is_bad_src_ratio+0x40>
c000aa52:	b8 00 00 00 00       	mov    eax,0x0
c000aa57:	83 c4 0c             	add    esp,0xc
c000aa5a:	c3                   	ret    

c000aa5b <fmod_one>:
c000aa5b:	83 ec 2c             	sub    esp,0x2c
c000aa5e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aa62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aa66:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aa6a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa6e:	83 ec 08             	sub    esp,0x8
c000aa71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa79:	e8 d2 4c 01 00       	call   c001f750 <lrint>
c000aa7e:	83 c4 10             	add    esp,0x10
c000aa81:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000aa85:	db 44 24 04          	fild   DWORD PTR [esp+0x4]
c000aa89:	dd 44 24 08          	fld    QWORD PTR [esp+0x8]
c000aa8d:	de e1                	fsubrp st(1),st
c000aa8f:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000aa93:	d9 ee                	fldz   
c000aa95:	dc 5c 24 18          	fcomp  QWORD PTR [esp+0x18]
c000aa99:	df e0                	fnstsw ax
c000aa9b:	f6 c4 45             	test   ah,0x45
c000aa9e:	75 0a                	jne    c000aaaa <fmod_one+0x4f>
c000aaa0:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aaa4:	d9 e8                	fld1   
c000aaa6:	de c1                	faddp  st(1),st
c000aaa8:	eb 04                	jmp    c000aaae <fmod_one+0x53>
c000aaaa:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000aaae:	83 c4 2c             	add    esp,0x2c
c000aab1:	c3                   	ret    

c000aab2 <zoh_vari_process>:
c000aab2:	55                   	push   ebp
c000aab3:	57                   	push   edi
c000aab4:	56                   	push   esi
c000aab5:	53                   	push   ebx
c000aab6:	83 ec 2c             	sub    esp,0x2c
c000aab9:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000aabd:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aac1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000aac9:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000aacd:	0f 8e 30 02 00 00    	jle    c000ad03 <zoh_vari_process+0x251>
c000aad3:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000aad6:	c7 44 24 0c 05 00 00 00 	mov    DWORD PTR [esp+0xc],0x5
c000aade:	85 db                	test   ebx,ebx
c000aae0:	0f 84 1d 02 00 00    	je     c000ad03 <zoh_vari_process+0x251>
c000aae6:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000aae9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000aaed:	74 19                	je     c000ab08 <zoh_vari_process+0x56>
c000aaef:	31 d2                	xor    edx,edx
c000aaf1:	39 c2                	cmp    edx,eax
c000aaf3:	7d 0c                	jge    c000ab01 <zoh_vari_process+0x4f>
c000aaf5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000aaf7:	d9 04 91             	fld    DWORD PTR [ecx+edx*4]
c000aafa:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000aafe:	42                   	inc    edx
c000aaff:	eb f0                	jmp    c000aaf1 <zoh_vari_process+0x3f>
c000ab01:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000ab08:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000ab0b:	0f af d0             	imul   edx,eax
c000ab0e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ab11:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ab15:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ab1c:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ab1f:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ab26:	dd 07                	fld    QWORD PTR [edi]
c000ab28:	dd 14 24             	fst    QWORD PTR [esp]
c000ab2b:	50                   	push   eax
c000ab2c:	50                   	push   eax
c000ab2d:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab30:	e8 e2 fe ff ff       	call   c000aa17 <is_bad_src_ratio>
c000ab35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ab39:	5a                   	pop    edx
c000ab3a:	59                   	pop    ecx
c000ab3b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000ab40:	0f 85 b5 01 00 00    	jne    c000acfb <zoh_vari_process+0x249>
c000ab46:	dd 47 08             	fld    QWORD PTR [edi+0x8]
c000ab49:	d9 e8                	fld1   
c000ab4b:	d8 d1                	fcom   st(1)
c000ab4d:	df e0                	fnstsw ax
c000ab4f:	9e                   	sahf   
c000ab50:	dd 5c 24 10          	fstp   QWORD PTR [esp+0x10]
c000ab54:	0f 86 83 00 00 00    	jbe    c000abdd <zoh_vari_process+0x12b>
c000ab5a:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ab5d:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ab60:	7d 7b                	jge    c000abdd <zoh_vari_process+0x12b>
c000ab62:	d9 c0                	fld    st(0)
c000ab64:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ab67:	da 43 10             	fiadd  DWORD PTR [ebx+0x10]
c000ab6a:	da 5b 0c             	ficomp DWORD PTR [ebx+0xc]
c000ab6d:	df e0                	fnstsw ax
c000ab6f:	9e                   	sahf   
c000ab70:	73 6b                	jae    c000abdd <zoh_vari_process+0x12b>
c000ab72:	85 d2                	test   edx,edx
c000ab74:	7e 36                	jle    c000abac <zoh_vari_process+0xfa>
c000ab76:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ab7a:	dd 07                	fld    QWORD PTR [edi]
c000ab7c:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ab7f:	83 ec 10             	sub    esp,0x10
c000ab82:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ab85:	e8 a6 4b 01 00       	call   c001f730 <fabs>
c000ab8a:	83 c4 10             	add    esp,0x10
c000ab8d:	dc 1d f8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ef8
c000ab93:	df e0                	fnstsw ax
c000ab95:	9e                   	sahf   
c000ab96:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ab9a:	76 10                	jbe    c000abac <zoh_vari_process+0xfa>
c000ab9c:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ab9f:	dc 27                	fsub   QWORD PTR [edi]
c000aba1:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000aba4:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000aba7:	dc 07                	fadd   QWORD PTR [edi]
c000aba9:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abac:	31 c0                	xor    eax,eax
c000abae:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000abb1:	7e 13                	jle    c000abc6 <zoh_vari_process+0x114>
c000abb3:	d9 44 83 1c          	fld    DWORD PTR [ebx+eax*4+0x1c]
c000abb7:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000abba:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000abbd:	40                   	inc    eax
c000abbe:	d9 1c 8a             	fstp   DWORD PTR [edx+ecx*4]
c000abc1:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000abc4:	eb e8                	jmp    c000abae <zoh_vari_process+0xfc>
c000abc6:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abca:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abcd:	de c1                	faddp  st(1),st
c000abcf:	e9 75 ff ff ff       	jmp    c000ab49 <zoh_vari_process+0x97>
c000abd4:	dd 44 24 10          	fld    QWORD PTR [esp+0x10]
c000abd8:	dc 34 24             	fdiv   QWORD PTR [esp]
c000abdb:	de c1                	faddp  st(1),st
c000abdd:	83 ec 10             	sub    esp,0x10
c000abe0:	dd 14 24             	fst    QWORD PTR [esp]
c000abe3:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000abe7:	e8 6f fe ff ff       	call   c000aa5b <fmod_one>
c000abec:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000abef:	dd 44 24 28          	fld    QWORD PTR [esp+0x28]
c000abf3:	d8 e1                	fsub   st,st(1)
c000abf5:	d9 c9                	fxch   st(1)
c000abf7:	dd 5c 24 28          	fstp   QWORD PTR [esp+0x28]
c000abfb:	dd 1c 24             	fstp   QWORD PTR [esp]
c000abfe:	e8 4d 4b 01 00       	call   c001f750 <lrint>
c000ac03:	83 c4 10             	add    esp,0x10
c000ac06:	0f af e8             	imul   ebp,eax
c000ac09:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000ac0c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000ac0f:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac13:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000ac16:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000ac19:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000ac1c:	0f 8d 80 00 00 00    	jge    c000aca2 <zoh_vari_process+0x1f0>
c000ac22:	d9 c0                	fld    st(0)
c000ac24:	da 4b 04             	fimul  DWORD PTR [ebx+0x4]
c000ac27:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c000ac2b:	da 44 24 18          	fiadd  DWORD PTR [esp+0x18]
c000ac2f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ac33:	db 44 24 18          	fild   DWORD PTR [esp+0x18]
c000ac37:	de d9                	fcompp 
c000ac39:	df e0                	fnstsw ax
c000ac3b:	9e                   	sahf   
c000ac3c:	72 64                	jb     c000aca2 <zoh_vari_process+0x1f0>
c000ac3e:	85 d2                	test   edx,edx
c000ac40:	7e 36                	jle    c000ac78 <zoh_vari_process+0x1c6>
c000ac42:	dd 5c 24 18          	fstp   QWORD PTR [esp+0x18]
c000ac46:	dd 07                	fld    QWORD PTR [edi]
c000ac48:	dc 66 1c             	fsub   QWORD PTR [esi+0x1c]
c000ac4b:	83 ec 10             	sub    esp,0x10
c000ac4e:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac51:	e8 da 4a 01 00       	call   c001f730 <fabs>
c000ac56:	83 c4 10             	add    esp,0x10
c000ac59:	dc 1d f8 0e 02 c0    	fcomp  QWORD PTR ds:0xc0020ef8
c000ac5f:	df e0                	fnstsw ax
c000ac61:	9e                   	sahf   
c000ac62:	dd 44 24 18          	fld    QWORD PTR [esp+0x18]
c000ac66:	76 10                	jbe    c000ac78 <zoh_vari_process+0x1c6>
c000ac68:	dd 46 1c             	fld    QWORD PTR [esi+0x1c]
c000ac6b:	dc 27                	fsub   QWORD PTR [edi]
c000ac6d:	da 4b 18             	fimul  DWORD PTR [ebx+0x18]
c000ac70:	da 73 14             	fidiv  DWORD PTR [ebx+0x14]
c000ac73:	dc 07                	fadd   QWORD PTR [edi]
c000ac75:	dd 1c 24             	fstp   QWORD PTR [esp]
c000ac78:	31 d2                	xor    edx,edx
c000ac7a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ac7d:	39 d0                	cmp    eax,edx
c000ac7f:	0f 8e 4f ff ff ff    	jle    c000abd4 <zoh_vari_process+0x122>
c000ac85:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000ac88:	29 c1                	sub    ecx,eax
c000ac8a:	89 c8                	mov    eax,ecx
c000ac8c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ac8e:	01 d0                	add    eax,edx
c000ac90:	42                   	inc    edx
c000ac91:	d9 04 81             	fld    DWORD PTR [ecx+eax*4]
c000ac94:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000ac97:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000ac9a:	d9 1c 88             	fstp   DWORD PTR [eax+ecx*4]
c000ac9d:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000aca0:	eb d8                	jmp    c000ac7a <zoh_vari_process+0x1c8>
c000aca2:	39 e9                	cmp    ecx,ebp
c000aca4:	7d 13                	jge    c000acb9 <zoh_vari_process+0x207>
c000aca6:	89 e8                	mov    eax,ebp
c000aca8:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c000acab:	29 c8                	sub    eax,ecx
c000acad:	99                   	cdq    
c000acae:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000acb5:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
c000acb9:	dd 5f 08             	fstp   QWORD PTR [edi+0x8]
c000acbc:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000acbf:	85 c0                	test   eax,eax
c000acc1:	7f 1b                	jg     c000acde <zoh_vari_process+0x22c>
c000acc3:	dd 04 24             	fld    QWORD PTR [esp]
c000acc6:	dd 1f                	fstp   QWORD PTR [edi]
c000acc8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000accb:	99                   	cdq    
c000accc:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000accf:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000acd2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000acd5:	99                   	cdq    
c000acd6:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000acd9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000acdc:	eb 25                	jmp    c000ad03 <zoh_vari_process+0x251>
c000acde:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ace1:	31 d2                	xor    edx,edx
c000ace3:	29 e8                	sub    eax,ebp
c000ace5:	c1 e0 02             	shl    eax,0x2
c000ace8:	39 d5                	cmp    ebp,edx
c000acea:	7e d7                	jle    c000acc3 <zoh_vari_process+0x211>
c000acec:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000acee:	d9 04 01             	fld    DWORD PTR [ecx+eax*1]
c000acf1:	83 c0 04             	add    eax,0x4
c000acf4:	d9 5c 93 1c          	fstp   DWORD PTR [ebx+edx*4+0x1c]
c000acf8:	42                   	inc    edx
c000acf9:	eb ed                	jmp    c000ace8 <zoh_vari_process+0x236>
c000acfb:	c7 44 24 0c 16 00 00 00 	mov    DWORD PTR [esp+0xc],0x16
c000ad03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ad07:	83 c4 2c             	add    esp,0x2c
c000ad0a:	5b                   	pop    ebx
c000ad0b:	5e                   	pop    esi
c000ad0c:	5f                   	pop    edi
c000ad0d:	5d                   	pop    ebp
c000ad0e:	c3                   	ret    

c000ad0f <zoh_reset>:
c000ad0f:	83 ec 0c             	sub    esp,0xc
c000ad12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad16:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000ad19:	85 c0                	test   eax,eax
c000ad1b:	74 20                	je     c000ad3d <zoh_reset+0x2e>
c000ad1d:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000ad20:	c7 40 08 01 00 00 00 	mov    DWORD PTR [eax+0x8],0x1
c000ad27:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ad2a:	51                   	push   ecx
c000ad2b:	c1 e2 02             	shl    edx,0x2
c000ad2e:	83 c0 1c             	add    eax,0x1c
c000ad31:	52                   	push   edx
c000ad32:	6a 00                	push   0x0
c000ad34:	50                   	push   eax
c000ad35:	e8 87 59 ff ff       	call   c00006c1 <memset>
c000ad3a:	83 c4 10             	add    esp,0x10
c000ad3d:	83 c4 0c             	add    esp,0xc
c000ad40:	c3                   	ret    

c000ad41 <zoh_get_name>:
c000ad41:	31 c0                	xor    eax,eax
c000ad43:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad48:	75 05                	jne    c000ad4f <zoh_get_name+0xe>
c000ad4a:	b8 94 10 02 c0       	mov    eax,0xc0021094
c000ad4f:	c3                   	ret    

c000ad50 <zoh_get_description>:
c000ad50:	31 c0                	xor    eax,eax
c000ad52:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000ad57:	75 05                	jne    c000ad5e <zoh_get_description+0xe>
c000ad59:	b8 a5 10 02 c0       	mov    eax,0xc00210a5
c000ad5e:	c3                   	ret    

c000ad5f <zoh_set_converter>:
c000ad5f:	53                   	push   ebx
c000ad60:	b8 0a 00 00 00       	mov    eax,0xa
c000ad65:	83 ec 08             	sub    esp,0x8
c000ad68:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad6c:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000ad71:	75 6e                	jne    c000ade1 <zoh_set_converter+0x82>
c000ad73:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000ad76:	85 c0                	test   eax,eax
c000ad78:	74 13                	je     c000ad8d <zoh_set_converter+0x2e>
c000ad7a:	83 ec 0c             	sub    esp,0xc
c000ad7d:	50                   	push   eax
c000ad7e:	e8 6c 12 00 00       	call   c000bfef <free>
c000ad83:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000ad8a:	83 c4 10             	add    esp,0x10
c000ad8d:	50                   	push   eax
c000ad8e:	50                   	push   eax
c000ad8f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000ad92:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000ad99:	50                   	push   eax
c000ad9a:	6a 01                	push   0x1
c000ad9c:	e8 6e 12 00 00       	call   c000c00f <calloc>
c000ada1:	89 c2                	mov    edx,eax
c000ada3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000ada6:	83 c4 10             	add    esp,0x10
c000ada9:	b8 01 00 00 00       	mov    eax,0x1
c000adae:	85 d2                	test   edx,edx
c000adb0:	74 2f                	je     c000ade1 <zoh_set_converter+0x82>
c000adb2:	83 ec 0c             	sub    esp,0xc
c000adb5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000adb8:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000adbb:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000adc1:	c7 43 24 b2 aa 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000aab2
c000adc8:	c7 43 20 b2 aa 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000aab2
c000adcf:	c7 43 28 0f ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad0f
c000add6:	53                   	push   ebx
c000add7:	e8 33 ff ff ff       	call   c000ad0f <zoh_reset>
c000addc:	83 c4 10             	add    esp,0x10
c000addf:	31 c0                	xor    eax,eax
c000ade1:	83 c4 08             	add    esp,0x8
c000ade4:	5b                   	pop    ebx
c000ade5:	c3                   	ret    

c000ade6 <Computer::close(int, int, void*)>:
c000ade6:	57                   	push   edi
c000ade7:	56                   	push   esi
c000ade8:	53                   	push   ebx
c000ade9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aded:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000adf1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000adf5:	83 ec 0c             	sub    esp,0xc
c000adf8:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000adfe:	50                   	push   eax
c000adff:	e8 98 59 00 00       	call   c001079c <Device::closeAll()>
c000ae04:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000ae0a:	83 c4 10             	add    esp,0x10
c000ae0d:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae0f:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000ae13:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000ae1b:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ae1f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae23:	5b                   	pop    ebx
c000ae24:	5e                   	pop    esi
c000ae25:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000ae28:	5f                   	pop    edi
c000ae29:	ff e0                	jmp    eax
c000ae2b:	90                   	nop

c000ae2c <Computer::Computer()>:
c000ae2c:	83 ec 0c             	sub    esp,0xc
c000ae2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae33:	83 ec 08             	sub    esp,0x8
c000ae36:	68 dc 10 02 c0       	push   0xc00210dc
c000ae3b:	50                   	push   eax
c000ae3c:	e8 d5 59 00 00       	call   c0010816 <Device::Device(char const*)>
c000ae41:	83 c4 10             	add    esp,0x10
c000ae44:	ba a4 12 02 c0       	mov    edx,0xc00212a4
c000ae49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae4d:	89 10                	mov    DWORD PTR [eax],edx
c000ae4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae53:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000ae5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae61:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000ae6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae6f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000ae75:	83 ca 04             	or     edx,0x4
c000ae78:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000ae7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae82:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000ae88:	31 d2                	xor    edx,edx
c000ae8a:	88 c2                	mov    dl,al
c000ae8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae90:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000ae97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae9b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aea1:	31 d2                	xor    edx,edx
c000aea3:	88 c2                	mov    dl,al
c000aea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aea9:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000aeae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aeb8:	8d 50 01             	lea    edx,[eax+0x1]
c000aebb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000aebf:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000aec5:	31 d2                	xor    edx,edx
c000aec7:	88 c2                	mov    dl,al
c000aec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aecd:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000aed1:	83 e1 3f             	and    ecx,0x3f
c000aed4:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000aed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aedc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aee2:	31 d2                	xor    edx,edx
c000aee4:	88 c2                	mov    dl,al
c000aee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeea:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000aef1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aef5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000aefb:	31 d2                	xor    edx,edx
c000aefd:	88 c2                	mov    dl,al
c000aeff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af03:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af0c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af12:	8d 50 01             	lea    edx,[eax+0x1]
c000af15:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af19:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af1f:	31 d2                	xor    edx,edx
c000af21:	88 c2                	mov    dl,al
c000af23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af27:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af2b:	83 e1 3f             	and    ecx,0x3f
c000af2e:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af36:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af3c:	31 d2                	xor    edx,edx
c000af3e:	88 c2                	mov    dl,al
c000af40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af44:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000af4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af4f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af55:	31 d2                	xor    edx,edx
c000af57:	88 c2                	mov    dl,al
c000af59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af5d:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000af62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af66:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000af6c:	8d 50 01             	lea    edx,[eax+0x1]
c000af6f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000af73:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000af79:	31 d2                	xor    edx,edx
c000af7b:	88 c2                	mov    dl,al
c000af7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af81:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000af85:	83 e1 3f             	and    ecx,0x3f
c000af88:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000af8c:	90                   	nop
c000af8d:	83 c4 0c             	add    esp,0xc
c000af90:	c3                   	ret    
c000af91:	90                   	nop

c000af92 <Computer::setBootMessage(char const*)>:
c000af92:	c3                   	ret    
c000af93:	90                   	nop

c000af94 <Computer::start()>:
c000af94:	56                   	push   esi
c000af95:	53                   	push   ebx
c000af96:	83 ec 14             	sub    esp,0x14
c000af99:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000af9d:	e8 a7 da 00 00       	call   c0018a49 <lockScheduler()>
c000afa2:	e8 eb dd 00 00       	call   c0018d92 <schedule()>
c000afa7:	e8 9f da 00 00       	call   c0018a4b <unlockScheduler()>
c000afac:	fb                   	sti    
c000afad:	83 ec 0c             	sub    esp,0xc
c000afb0:	68 3b 07 00 00       	push   0x73b
c000afb5:	e8 22 41 00 00       	call   c000f0dc <operator new(unsigned long)>
c000afba:	89 c6                	mov    esi,eax
c000afbc:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c000afc1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000afc8:	50                   	push   eax
c000afc9:	68 e5 10 02 c0       	push   0xc00210e5
c000afce:	6a 01                	push   0x1
c000afd0:	56                   	push   esi
c000afd1:	e8 ca d8 00 00       	call   c00188a0 <Process::Process(bool, char const*, Process*, char**)>
c000afd6:	83 c4 20             	add    esp,0x20
c000afd9:	68 ff 00 00 00       	push   0xff
c000afde:	6a 00                	push   0x0
c000afe0:	68 6d b9 00 c0       	push   0xc000b96d
c000afe5:	56                   	push   esi
c000afe6:	e8 93 db 00 00       	call   c0018b7e <Process::createThread(void (*)(void*), void*, int)>
c000afeb:	6a 7a                	push   0x7a
c000afed:	8b 15 f4 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025bf4
c000aff3:	6a 00                	push   0x0
c000aff5:	68 c3 93 01 c0       	push   0xc00193c3
c000affa:	52                   	push   edx
c000affb:	e8 7e db 00 00       	call   c0018b7e <Process::createThread(void (*)(void*), void*, int)>
c000b000:	83 c4 20             	add    esp,0x20
c000b003:	a3 a8 5b 02 c0       	mov    ds:0xc0025ba8,eax
c000b008:	c6 05 ad 47 02 c0 01 	mov    BYTE PTR ds:0xc00247ad,0x1
c000b00f:	e8 60 45 00 00       	call   c000f574 <initVFS()>
c000b014:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000b01a:	8b 10                	mov    edx,DWORD PTR [eax]
c000b01c:	6a 00                	push   0x0
c000b01e:	6a 00                	push   0x0
c000b020:	6a 00                	push   0x0
c000b022:	50                   	push   eax
c000b023:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b026:	e8 6c c2 00 00       	call   c0017297 <setupSystemCalls()>
c000b02b:	e8 42 50 00 00       	call   c0010072 <loadClockSettings()>
c000b030:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b033:	e8 38 57 00 00       	call   c0010770 <Device::loadDriversForAll()>
c000b038:	bb 02 00 00 00       	mov    ebx,0x2
c000b03d:	b8 01 00 00 00       	mov    eax,0x1
c000b042:	31 d2                	xor    edx,edx
c000b044:	31 c9                	xor    ecx,ecx
c000b046:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b04e:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000b056:	f0 0f c7 4c 24 18    	lock cmpxchg8b QWORD PTR [esp+0x18]
c000b05c:	59                   	pop    ecx
c000b05d:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c000b063:	5e                   	pop    esi
c000b064:	6a 01                	push   0x1
c000b066:	68 f2 10 02 c0       	push   0xc00210f2
c000b06b:	e8 f3 d3 00 00       	call   c0018463 <Thr::loadDLL(char const*, bool)>
c000b070:	5a                   	pop    edx
c000b071:	59                   	pop    ecx
c000b072:	53                   	push   ebx
c000b073:	50                   	push   eax
c000b074:	e8 b0 d5 00 00       	call   c0018629 <Thr::executeDLL(unsigned long, void*)>
c000b079:	c7 04 24 e8 22 02 c0 	mov    DWORD PTR [esp],0xc00222e8
c000b080:	e8 8c 41 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	83 ec 0c             	sub    esp,0xc
c000b08b:	6a 02                	push   0x2
c000b08d:	e8 59 de 00 00       	call   c0018eeb <blockTask(TaskState)>
c000b092:	83 c4 10             	add    esp,0x10
c000b095:	eb f1                	jmp    c000b088 <Computer::start()+0xf4>

c000b097 <firstTask()>:
c000b097:	83 ec 18             	sub    esp,0x18
c000b09a:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c000b09f:	50                   	push   eax
c000b0a0:	e8 ef fe ff ff       	call   c000af94 <Computer::start()>
c000b0a5:	90                   	nop

c000b0a6 <Computer::detectFeatures()>:
c000b0a6:	55                   	push   ebp
c000b0a7:	57                   	push   edi
c000b0a8:	56                   	push   esi
c000b0a9:	53                   	push   ebx
c000b0aa:	83 ec 1c             	sub    esp,0x1c
c000b0ad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b0b1:	8b b3 e8 01 00 00    	mov    esi,DWORD PTR [ebx+0x1e8]
c000b0b7:	81 e6 04 00 fc ff    	and    esi,0xfffc0004
c000b0bd:	89 b3 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],esi
c000b0c3:	e8 b0 52 ff ff       	call   c0000378 <detectCPUID>
c000b0c8:	85 c0                	test   eax,eax
c000b0ca:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0d0:	0f 95 c2             	setne  dl
c000b0d3:	01 d2                	add    edx,edx
c000b0d5:	83 e0 fd             	and    eax,0xfffffffd
c000b0d8:	09 d0                	or     eax,edx
c000b0da:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0e0:	a8 02                	test   al,0x2
c000b0e2:	75 4e                	jne    c000b132 <Computer::detectFeatures()+0x8c>
c000b0e4:	f6 05 c1 47 02 c0 04 	test   BYTE PTR ds:0xc00247c1,0x4
c000b0eb:	74 0f                	je     c000b0fc <Computer::detectFeatures()+0x56>
c000b0ed:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b0f3:	83 e0 fb             	and    eax,0xfffffffb
c000b0f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b0fc:	e8 d5 40 01 00       	call   c001f1d6 <x87Detect>
c000b101:	83 e0 01             	and    eax,0x1
c000b104:	c1 e0 04             	shl    eax,0x4
c000b107:	88 c2                	mov    dl,al
c000b109:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b10f:	83 e0 ef             	and    eax,0xffffffef
c000b112:	09 d0                	or     eax,edx
c000b114:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b11a:	a8 10                	test   al,0x10
c000b11c:	0f 85 20 01 00 00    	jne    c000b242 <Computer::detectFeatures()+0x19c>
c000b122:	84 c0                	test   al,al
c000b124:	0f 88 3b 01 00 00    	js     c000b265 <Computer::detectFeatures()+0x1bf>
c000b12a:	83 c4 1c             	add    esp,0x1c
c000b12d:	5b                   	pop    ebx
c000b12e:	5e                   	pop    esi
c000b12f:	5f                   	pop    edi
c000b130:	5d                   	pop    ebp
c000b131:	c3                   	ret    
c000b132:	83 ec 0c             	sub    esp,0xc
c000b135:	6a 20                	push   0x20
c000b137:	e8 e1 96 00 00       	call   c001481d <cpuidCheckEDX(unsigned int)>
c000b13c:	83 e0 01             	and    eax,0x1
c000b13f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b146:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b14c:	83 e0 f7             	and    eax,0xfffffff7
c000b14f:	09 d0                	or     eax,edx
c000b151:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b157:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000b15e:	e8 ba 96 00 00       	call   c001481d <cpuidCheckEDX(unsigned int)>
c000b163:	83 e0 01             	and    eax,0x1
c000b166:	88 c2                	mov    dl,al
c000b168:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b16e:	83 e0 fe             	and    eax,0xfffffffe
c000b171:	09 d0                	or     eax,edx
c000b173:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b179:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000b180:	e8 98 96 00 00       	call   c001481d <cpuidCheckEDX(unsigned int)>
c000b185:	c1 e0 07             	shl    eax,0x7
c000b188:	88 c2                	mov    dl,al
c000b18a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b190:	83 e0 7f             	and    eax,0x7f
c000b193:	09 d0                	or     eax,edx
c000b195:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b19b:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000b1a2:	e8 76 96 00 00       	call   c001481d <cpuidCheckEDX(unsigned int)>
c000b1a7:	83 c4 10             	add    esp,0x10
c000b1aa:	83 e0 01             	and    eax,0x1
c000b1ad:	c1 e0 05             	shl    eax,0x5
c000b1b0:	88 c2                	mov    dl,al
c000b1b2:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b1b8:	83 e0 df             	and    eax,0xffffffdf
c000b1bb:	09 d0                	or     eax,edx
c000b1bd:	f7 05 c0 47 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00247c0,0x401
c000b1c7:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b1cd:	0f 84 b8 00 00 00    	je     c000b28b <Computer::detectFeatures()+0x1e5>
c000b1d3:	83 ec 0c             	sub    esp,0xc
c000b1d6:	8a 8b e8 01 00 00    	mov    cl,BYTE PTR [ebx+0x1e8]
c000b1dc:	83 e1 fe             	and    ecx,0xfffffffe
c000b1df:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b1e3:	88 8b e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],cl
c000b1e9:	50                   	push   eax
c000b1ea:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000b1ee:	55                   	push   ebp
c000b1ef:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000b1f3:	57                   	push   edi
c000b1f4:	8d 74 24 18          	lea    esi,[esp+0x18]
c000b1f8:	56                   	push   esi
c000b1f9:	68 00 00 00 80       	push   0x80000000
c000b1fe:	e8 97 95 00 00       	call   c001479a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b203:	83 c4 20             	add    esp,0x20
c000b206:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000b20d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000b211:	0f 86 cd fe ff ff    	jbe    c000b0e4 <Computer::detectFeatures()+0x3e>
c000b217:	83 ec 0c             	sub    esp,0xc
c000b21a:	50                   	push   eax
c000b21b:	55                   	push   ebp
c000b21c:	57                   	push   edi
c000b21d:	56                   	push   esi
c000b21e:	68 01 00 00 80       	push   0x80000001
c000b223:	e8 72 95 00 00       	call   c001479a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000b228:	8b 93 e8 01 00 00    	mov    edx,DWORD PTR [ebx+0x1e8]
c000b22e:	83 c4 20             	add    esp,0x20
c000b231:	81 e2 bf ff fc ff    	and    edx,0xfffcffbf
c000b237:	89 93 e8 01 00 00    	mov    DWORD PTR [ebx+0x1e8],edx
c000b23d:	e9 a2 fe ff ff       	jmp    c000b0e4 <Computer::detectFeatures()+0x3e>
c000b242:	e8 49 3f 01 00       	call   c001f190 <sseDetect>
c000b247:	88 c2                	mov    dl,al
c000b249:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000b24f:	c1 e2 07             	shl    edx,0x7
c000b252:	83 e0 7f             	and    eax,0x7f
c000b255:	09 d0                	or     eax,edx
c000b257:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000b25d:	84 c0                	test   al,al
c000b25f:	0f 89 c5 fe ff ff    	jns    c000b12a <Computer::detectFeatures()+0x84>
c000b265:	e8 16 3f 01 00       	call   c001f180 <avxDetect>
c000b26a:	83 e0 01             	and    eax,0x1
c000b26d:	c1 e0 05             	shl    eax,0x5
c000b270:	88 c2                	mov    dl,al
c000b272:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000b278:	83 e0 df             	and    eax,0xffffffdf
c000b27b:	09 d0                	or     eax,edx
c000b27d:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000b283:	83 c4 1c             	add    esp,0x1c
c000b286:	5b                   	pop    ebx
c000b287:	5e                   	pop    esi
c000b288:	5f                   	pop    edi
c000b289:	5d                   	pop    ebp
c000b28a:	c3                   	ret    
c000b28b:	83 ec 0c             	sub    esp,0xc
c000b28e:	68 00 02 00 00       	push   0x200
c000b293:	e8 85 95 00 00       	call   c001481d <cpuidCheckEDX(unsigned int)>
c000b298:	83 c4 10             	add    esp,0x10
c000b29b:	e9 33 ff ff ff       	jmp    c000b1d3 <Computer::detectFeatures()+0x12d>

c000b2a0 <Computer::displayFeatures()>:
c000b2a0:	53                   	push   ebx
c000b2a1:	83 ec 14             	sub    esp,0x14
c000b2a4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b2a8:	68 15 11 02 c0       	push   0xc0021115
c000b2ad:	e8 5f 3f 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000b2b2:	83 c4 10             	add    esp,0x10
c000b2b5:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b2ba:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000b2c1:	74 05                	je     c000b2c8 <Computer::displayFeatures()+0x28>
c000b2c3:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b2c8:	51                   	push   ecx
c000b2c9:	51                   	push   ecx
c000b2ca:	50                   	push   eax
c000b2cb:	68 28 11 02 c0       	push   0xc0021128
c000b2d0:	e8 3c 3f 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000b2d5:	83 c4 10             	add    esp,0x10
c000b2d8:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b2dd:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000b2e4:	75 05                	jne    c000b2eb <Computer::displayFeatures()+0x4b>
c000b2e6:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b2eb:	52                   	push   edx
c000b2ec:	52                   	push   edx
c000b2ed:	50                   	push   eax
c000b2ee:	68 39 11 02 c0       	push   0xc0021139
c000b2f3:	e8 19 3f 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b300:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000b307:	75 05                	jne    c000b30e <Computer::displayFeatures()+0x6e>
c000b309:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b30e:	51                   	push   ecx
c000b30f:	51                   	push   ecx
c000b310:	50                   	push   eax
c000b311:	68 4a 11 02 c0       	push   0xc002114a
c000b316:	e8 f6 3e 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000b31b:	83 c4 10             	add    esp,0x10
c000b31e:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b323:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000b32a:	75 05                	jne    c000b331 <Computer::displayFeatures()+0x91>
c000b32c:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b331:	52                   	push   edx
c000b332:	52                   	push   edx
c000b333:	50                   	push   eax
c000b334:	68 5b 11 02 c0       	push   0xc002115b
c000b339:	e8 d3 3e 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000b33e:	83 c4 10             	add    esp,0x10
c000b341:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b346:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000b34d:	75 05                	jne    c000b354 <Computer::displayFeatures()+0xb4>
c000b34f:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b354:	51                   	push   ecx
c000b355:	51                   	push   ecx
c000b356:	50                   	push   eax
c000b357:	68 6c 11 02 c0       	push   0xc002116c
c000b35c:	e8 b0 3e 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000b361:	83 c4 10             	add    esp,0x10
c000b364:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b369:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000b370:	75 05                	jne    c000b377 <Computer::displayFeatures()+0xd7>
c000b372:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b377:	52                   	push   edx
c000b378:	52                   	push   edx
c000b379:	50                   	push   eax
c000b37a:	68 7d 11 02 c0       	push   0xc002117d
c000b37f:	e8 8d 3e 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000b384:	83 c4 10             	add    esp,0x10
c000b387:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b38c:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000b393:	75 05                	jne    c000b39a <Computer::displayFeatures()+0xfa>
c000b395:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b39a:	51                   	push   ecx
c000b39b:	51                   	push   ecx
c000b39c:	50                   	push   eax
c000b39d:	68 8e 11 02 c0       	push   0xc002118e
c000b3a2:	e8 6a 3e 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000b3a7:	83 c4 10             	add    esp,0x10
c000b3aa:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b3af:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000b3b6:	78 05                	js     c000b3bd <Computer::displayFeatures()+0x11d>
c000b3b8:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b3bd:	52                   	push   edx
c000b3be:	52                   	push   edx
c000b3bf:	50                   	push   eax
c000b3c0:	68 9f 11 02 c0       	push   0xc002119f
c000b3c5:	e8 47 3e 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000b3ca:	83 c4 10             	add    esp,0x10
c000b3cd:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b3d2:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000b3d9:	0f 84 93 01 00 00    	je     c000b572 <Computer::displayFeatures()+0x2d2>
c000b3df:	51                   	push   ecx
c000b3e0:	51                   	push   ecx
c000b3e1:	50                   	push   eax
c000b3e2:	68 b0 11 02 c0       	push   0xc00211b0
c000b3e7:	e8 25 3e 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000b3ec:	83 c4 10             	add    esp,0x10
c000b3ef:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b3f4:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000b3fb:	0f 84 67 01 00 00    	je     c000b568 <Computer::displayFeatures()+0x2c8>
c000b401:	52                   	push   edx
c000b402:	52                   	push   edx
c000b403:	50                   	push   eax
c000b404:	68 c1 11 02 c0       	push   0xc00211c1
c000b409:	e8 03 3e 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000b40e:	83 c4 10             	add    esp,0x10
c000b411:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b416:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000b41d:	0f 84 3b 01 00 00    	je     c000b55e <Computer::displayFeatures()+0x2be>
c000b423:	51                   	push   ecx
c000b424:	51                   	push   ecx
c000b425:	50                   	push   eax
c000b426:	68 d2 11 02 c0       	push   0xc00211d2
c000b42b:	e8 e1 3d 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000b430:	83 c4 10             	add    esp,0x10
c000b433:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b438:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000b43f:	0f 84 0f 01 00 00    	je     c000b554 <Computer::displayFeatures()+0x2b4>
c000b445:	52                   	push   edx
c000b446:	52                   	push   edx
c000b447:	50                   	push   eax
c000b448:	68 e3 11 02 c0       	push   0xc00211e3
c000b44d:	e8 bf 3d 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000b452:	83 c4 10             	add    esp,0x10
c000b455:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b45a:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000b461:	0f 84 e3 00 00 00    	je     c000b54a <Computer::displayFeatures()+0x2aa>
c000b467:	51                   	push   ecx
c000b468:	51                   	push   ecx
c000b469:	50                   	push   eax
c000b46a:	68 f4 11 02 c0       	push   0xc00211f4
c000b46f:	e8 9d 3d 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000b474:	83 c4 10             	add    esp,0x10
c000b477:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b47c:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000b483:	0f 84 b7 00 00 00    	je     c000b540 <Computer::displayFeatures()+0x2a0>
c000b489:	52                   	push   edx
c000b48a:	52                   	push   edx
c000b48b:	50                   	push   eax
c000b48c:	68 05 12 02 c0       	push   0xc0021205
c000b491:	e8 7b 3d 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000b496:	83 c4 10             	add    esp,0x10
c000b499:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b49e:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000b4a5:	0f 84 8b 00 00 00    	je     c000b536 <Computer::displayFeatures()+0x296>
c000b4ab:	51                   	push   ecx
c000b4ac:	51                   	push   ecx
c000b4ad:	50                   	push   eax
c000b4ae:	68 16 12 02 c0       	push   0xc0021216
c000b4b3:	e8 59 3d 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000b4b8:	83 c4 10             	add    esp,0x10
c000b4bb:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b4c0:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000b4c7:	78 05                	js     c000b4ce <Computer::displayFeatures()+0x22e>
c000b4c9:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b4ce:	52                   	push   edx
c000b4cf:	52                   	push   edx
c000b4d0:	50                   	push   eax
c000b4d1:	68 27 12 02 c0       	push   0xc0021227
c000b4d6:	e8 36 3d 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000b4db:	83 c4 10             	add    esp,0x10
c000b4de:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b4e3:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000b4ea:	74 43                	je     c000b52f <Computer::displayFeatures()+0x28f>
c000b4ec:	51                   	push   ecx
c000b4ed:	51                   	push   ecx
c000b4ee:	50                   	push   eax
c000b4ef:	68 38 12 02 c0       	push   0xc0021238
c000b4f4:	e8 18 3d 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000b4f9:	83 c4 10             	add    esp,0x10
c000b4fc:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c000b501:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000b508:	74 1e                	je     c000b528 <Computer::displayFeatures()+0x288>
c000b50a:	52                   	push   edx
c000b50b:	52                   	push   edx
c000b50c:	50                   	push   eax
c000b50d:	68 49 12 02 c0       	push   0xc0021249
c000b512:	e8 fa 3c 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000b517:	c7 44 24 20 c6 28 02 c0 	mov    DWORD PTR [esp+0x20],0xc00228c6
c000b51f:	83 c4 18             	add    esp,0x18
c000b522:	5b                   	pop    ebx
c000b523:	e9 e9 3c 00 00       	jmp    c000f211 <Dbg::kprintf(char const*, ...)>
c000b528:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b52d:	eb db                	jmp    c000b50a <Computer::displayFeatures()+0x26a>
c000b52f:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b534:	eb b6                	jmp    c000b4ec <Computer::displayFeatures()+0x24c>
c000b536:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b53b:	e9 6b ff ff ff       	jmp    c000b4ab <Computer::displayFeatures()+0x20b>
c000b540:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b545:	e9 3f ff ff ff       	jmp    c000b489 <Computer::displayFeatures()+0x1e9>
c000b54a:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b54f:	e9 13 ff ff ff       	jmp    c000b467 <Computer::displayFeatures()+0x1c7>
c000b554:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b559:	e9 e7 fe ff ff       	jmp    c000b445 <Computer::displayFeatures()+0x1a5>
c000b55e:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b563:	e9 bb fe ff ff       	jmp    c000b423 <Computer::displayFeatures()+0x183>
c000b568:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b56d:	e9 8f fe ff ff       	jmp    c000b401 <Computer::displayFeatures()+0x161>
c000b572:	b8 12 11 02 c0       	mov    eax,0xc0021112
c000b577:	e9 63 fe ff ff       	jmp    c000b3df <Computer::displayFeatures()+0x13f>

c000b57c <Computer::rdmsr(unsigned int)>:
c000b57c:	83 ec 0c             	sub    esp,0xc
c000b57f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b583:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b58a:	74 0a                	je     c000b596 <Computer::rdmsr(unsigned int)+0x1a>
c000b58c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b590:	0f 32                	rdmsr  
c000b592:	83 c4 0c             	add    esp,0xc
c000b595:	c3                   	ret    
c000b596:	83 ec 0c             	sub    esp,0xc
c000b599:	68 5a 12 02 c0       	push   0xc002125a
c000b59e:	e8 9d a4 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c000b5a3:	83 c4 10             	add    esp,0x10
c000b5a6:	eb e4                	jmp    c000b58c <Computer::rdmsr(unsigned int)+0x10>

c000b5a8 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000b5a8:	57                   	push   edi
c000b5a9:	56                   	push   esi
c000b5aa:	52                   	push   edx
c000b5ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b5af:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b5b3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000b5b7:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b5be:	74 0e                	je     c000b5ce <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000b5c0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5c4:	89 f0                	mov    eax,esi
c000b5c6:	89 fa                	mov    edx,edi
c000b5c8:	0f 30                	wrmsr  
c000b5ca:	58                   	pop    eax
c000b5cb:	5e                   	pop    esi
c000b5cc:	5f                   	pop    edi
c000b5cd:	c3                   	ret    
c000b5ce:	83 ec 0c             	sub    esp,0xc
c000b5d1:	68 60 12 02 c0       	push   0xc0021260
c000b5d6:	e8 65 a4 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c000b5db:	83 c4 10             	add    esp,0x10
c000b5de:	eb e0                	jmp    c000b5c0 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000b5e0 <Computer::nmiEnabled()>:
c000b5e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5e4:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000b5ea:	c3                   	ret    
c000b5eb:	90                   	nop

c000b5ec <Computer::readCMOS(unsigned char)>:
c000b5ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b5f4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b5fb:	19 c0                	sbb    eax,eax
c000b5fd:	83 e0 80             	and    eax,0xffffff80
c000b600:	09 d0                	or     eax,edx
c000b602:	e6 70                	out    0x70,al
c000b604:	e4 71                	in     al,0x71
c000b606:	c3                   	ret    
c000b607:	90                   	nop

c000b608 <Computer::enableNMI(bool)>:
c000b608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b60c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b610:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000b616:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000b61e:	eb cc                	jmp    c000b5ec <Computer::readCMOS(unsigned char)>

c000b620 <Computer::open(int, int, void*)>:
c000b620:	56                   	push   esi
c000b621:	53                   	push   ebx
c000b622:	83 ec 10             	sub    esp,0x10
c000b625:	f6 05 c0 47 02 c0 04 	test   BYTE PTR ds:0xc00247c0,0x4
c000b62c:	0f 94 05 e0 3b 02 c0 	sete   BYTE PTR ds:0xc0023be0
c000b633:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b637:	68 68 22 00 00       	push   0x2268
c000b63c:	e8 9b 3a 00 00       	call   c000f0dc <operator new(unsigned long)>
c000b641:	89 c6                	mov    esi,eax
c000b643:	89 04 24             	mov    DWORD PTR [esp],eax
c000b646:	e8 bf 87 00 00       	call   c0013e0a <ACPI::ACPI()>
c000b64b:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000b651:	59                   	pop    ecx
c000b652:	58                   	pop    eax
c000b653:	56                   	push   esi
c000b654:	53                   	push   ebx
c000b655:	e8 cc 4f 00 00       	call   c0010626 <Device::addChild(Device*)>
c000b65a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b65d:	e8 44 fa ff ff       	call   c000b0a6 <Computer::detectFeatures()>
c000b662:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b665:	e8 36 fc ff ff       	call   c000b2a0 <Computer::displayFeatures()>
c000b66a:	58                   	pop    eax
c000b66b:	5a                   	pop    edx
c000b66c:	6a 01                	push   0x1
c000b66e:	53                   	push   ebx
c000b66f:	e8 94 ff ff ff       	call   c000b608 <Computer::enableNMI(bool)>
c000b674:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000b67b:	e8 5c 3a 00 00       	call   c000f0dc <operator new(unsigned long)>
c000b680:	89 c6                	mov    esi,eax
c000b682:	89 04 24             	mov    DWORD PTR [esp],eax
c000b685:	e8 5e 92 00 00       	call   c00148e8 <CPU::CPU()>
c000b68a:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000b690:	59                   	pop    ecx
c000b691:	58                   	pop    eax
c000b692:	56                   	push   esi
c000b693:	53                   	push   ebx
c000b694:	e8 8d 4f 00 00       	call   c0010626 <Device::addChild(Device*)>
c000b699:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000b69f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b6a3:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6a5:	51                   	push   ecx
c000b6a6:	6a 00                	push   0x0
c000b6a8:	6a 00                	push   0x0
c000b6aa:	50                   	push   eax
c000b6ab:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6ae:	83 c4 20             	add    esp,0x20
c000b6b1:	e8 d8 54 00 00       	call   c0010b8e <setupFPU()>
c000b6b6:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000b6bc:	85 c0                	test   eax,eax
c000b6be:	74 1e                	je     c000b6de <Computer::open(int, int, void*)+0xbe>
c000b6c0:	52                   	push   edx
c000b6c1:	52                   	push   edx
c000b6c2:	50                   	push   eax
c000b6c3:	53                   	push   ebx
c000b6c4:	e8 5d 4f 00 00       	call   c0010626 <Device::addChild(Device*)>
c000b6c9:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000b6cf:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6d1:	6a 00                	push   0x0
c000b6d3:	6a 00                	push   0x0
c000b6d5:	6a 00                	push   0x0
c000b6d7:	50                   	push   eax
c000b6d8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000b6db:	83 c4 20             	add    esp,0x20
c000b6de:	83 ec 0c             	sub    esp,0xc
c000b6e1:	68 97 b0 00 c0       	push   0xc000b097
c000b6e6:	e8 92 d5 00 00       	call   c0018c7d <setupMultitasking(void (*)())>
c000b6eb:	83 c4 14             	add    esp,0x14
c000b6ee:	83 c8 ff             	or     eax,0xffffffff
c000b6f1:	5b                   	pop    ebx
c000b6f2:	5e                   	pop    esi
c000b6f3:	c3                   	ret    

c000b6f4 <Computer::disableNMI()>:
c000b6f4:	6a 00                	push   0x0
c000b6f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fa:	50                   	push   eax
c000b6fb:	e8 08 ff ff ff       	call   c000b608 <Computer::enableNMI(bool)>
c000b700:	5a                   	pop    edx
c000b701:	59                   	pop    ecx
c000b702:	c3                   	ret    
c000b703:	90                   	nop

c000b704 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000b704:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b708:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b70c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000b713:	19 c0                	sbb    eax,eax
c000b715:	83 e0 80             	and    eax,0xffffff80
c000b718:	09 d0                	or     eax,edx
c000b71a:	e6 70                	out    0x70,al
c000b71c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b720:	e6 71                	out    0x71,al
c000b722:	c3                   	ret    
c000b723:	90                   	nop

c000b724 <Computer::handleNMI()>:
c000b724:	56                   	push   esi
c000b725:	53                   	push   ebx
c000b726:	83 ec 10             	sub    esp,0x10
c000b729:	e4 92                	in     al,0x92
c000b72b:	89 c6                	mov    esi,eax
c000b72d:	e4 61                	in     al,0x61
c000b72f:	68 66 12 02 c0       	push   0xc0021266
c000b734:	88 c3                	mov    bl,al
c000b736:	e8 d6 3a 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000b73b:	83 c4 10             	add    esp,0x10
c000b73e:	83 e6 10             	and    esi,0x10
c000b741:	75 0d                	jne    c000b750 <Computer::handleNMI()+0x2c>
c000b743:	f6 c3 40             	test   bl,0x40
c000b746:	75 1d                	jne    c000b765 <Computer::handleNMI()+0x41>
c000b748:	84 db                	test   bl,bl
c000b74a:	78 2d                	js     c000b779 <Computer::handleNMI()+0x55>
c000b74c:	58                   	pop    eax
c000b74d:	5b                   	pop    ebx
c000b74e:	5e                   	pop    esi
c000b74f:	c3                   	ret    
c000b750:	83 ec 0c             	sub    esp,0xc
c000b753:	68 77 12 02 c0       	push   0xc0021277
c000b758:	e8 e3 a2 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c000b75d:	83 c4 10             	add    esp,0x10
c000b760:	f6 c3 40             	test   bl,0x40
c000b763:	74 e3                	je     c000b748 <Computer::handleNMI()+0x24>
c000b765:	83 ec 0c             	sub    esp,0xc
c000b768:	68 84 12 02 c0       	push   0xc0021284
c000b76d:	e8 ce a2 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c000b772:	83 c4 10             	add    esp,0x10
c000b775:	84 db                	test   bl,bl
c000b777:	79 d3                	jns    c000b74c <Computer::handleNMI()+0x28>
c000b779:	c7 44 24 10 8e 12 02 c0 	mov    DWORD PTR [esp+0x10],0xc002128e
c000b781:	5a                   	pop    edx
c000b782:	5b                   	pop    ebx
c000b783:	5e                   	pop    esi
c000b784:	e9 b7 a2 00 00       	jmp    c0015a40 <Krnl::panic(char const*)>
c000b789:	90                   	nop

c000b78a <Computer::setDiskActivityLight(int, bool)>:
c000b78a:	56                   	push   esi
c000b78b:	53                   	push   ebx
c000b78c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b790:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000b795:	77 1c                	ja     c000b7b3 <Computer::setDiskActivityLight(int, bool)+0x29>
c000b797:	e4 92                	in     al,0x92
c000b799:	bb 40 00 00 00       	mov    ebx,0x40
c000b79e:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000b7a2:	89 da                	mov    edx,ebx
c000b7a4:	d3 e2                	shl    edx,cl
c000b7a6:	83 f2 ff             	xor    edx,0xffffffff
c000b7a9:	89 f1                	mov    ecx,esi
c000b7ab:	21 d0                	and    eax,edx
c000b7ad:	d3 e3                	shl    ebx,cl
c000b7af:	09 d8                	or     eax,ebx
c000b7b1:	e6 92                	out    0x92,al
c000b7b3:	5b                   	pop    ebx
c000b7b4:	5e                   	pop    esi
c000b7b5:	c3                   	ret    

c000b7b6 <GDTEntry::setBase(unsigned int)>:
c000b7b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7ba:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b7be:	89 c1                	mov    ecx,eax
c000b7c0:	c1 e9 10             	shr    ecx,0x10
c000b7c3:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000b7c7:	c1 e8 18             	shr    eax,0x18
c000b7ca:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000b7cd:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000b7d0:	c3                   	ret    
c000b7d1:	90                   	nop

c000b7d2 <GDTEntry::setLimit(unsigned int)>:
c000b7d2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b7d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7da:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000b7dd:	66 89 01             	mov    WORD PTR [ecx],ax
c000b7e0:	c1 e8 10             	shr    eax,0x10
c000b7e3:	83 e2 f0             	and    edx,0xfffffff0
c000b7e6:	83 e0 0f             	and    eax,0xf
c000b7e9:	09 d0                	or     eax,edx
c000b7eb:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000b7ee:	c3                   	ret    
c000b7ef:	90                   	nop

c000b7f0 <GDT::GDT()>:
c000b7f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7f4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b7fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7fe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b804:	90                   	nop
c000b805:	c3                   	ret    

c000b806 <GDT::addEntry(GDTEntry)>:
c000b806:	53                   	push   ebx
c000b807:	83 ec 0c             	sub    esp,0xc
c000b80a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000b80e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b810:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000b817:	52                   	push   edx
c000b818:	50                   	push   eax
c000b819:	68 c8 12 02 c0       	push   0xc00212c8
c000b81e:	e8 ee 39 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000b823:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b825:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b829:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b82d:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000b831:	8d 50 01             	lea    edx,[eax+0x1]
c000b834:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000b838:	89 13                	mov    DWORD PTR [ebx],edx
c000b83a:	c1 e0 03             	shl    eax,0x3
c000b83d:	83 c4 18             	add    esp,0x18
c000b840:	5b                   	pop    ebx
c000b841:	c3                   	ret    

c000b842 <GDT::getNumberOfEntries()>:
c000b842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b846:	8b 00                	mov    eax,DWORD PTR [eax]
c000b848:	c3                   	ret    
c000b849:	90                   	nop

c000b84a <GDT::flush()>:
c000b84a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b84e:	83 c0 04             	add    eax,0x4
c000b851:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000b854:	a3 b2 47 02 c0       	mov    ds:0xc00247b2,eax
c000b859:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000b860:	66 89 15 b0 47 02 c0 	mov    WORD PTR ds:0xc00247b0,dx
c000b867:	e9 80 4b ff ff       	jmp    c00003ec <loadGDT>

c000b86c <GDT::setup()>:
c000b86c:	55                   	push   ebp
c000b86d:	57                   	push   edi
c000b86e:	56                   	push   esi
c000b86f:	53                   	push   ebx
c000b870:	83 ec 3c             	sub    esp,0x3c
c000b873:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b877:	6a 00                	push   0x0
c000b879:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000b87d:	53                   	push   ebx
c000b87e:	e8 33 ff ff ff       	call   c000b7b6 <GDTEntry::setBase(unsigned int)>
c000b883:	6a 00                	push   0x0
c000b885:	53                   	push   ebx
c000b886:	e8 47 ff ff ff       	call   c000b7d2 <GDTEntry::setLimit(unsigned int)>
c000b88b:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000b893:	6a 00                	push   0x0
c000b895:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000b899:	53                   	push   ebx
c000b89a:	e8 17 ff ff ff       	call   c000b7b6 <GDTEntry::setBase(unsigned int)>
c000b89f:	68 ff ff ff 00       	push   0xffffff
c000b8a4:	53                   	push   ebx
c000b8a5:	e8 28 ff ff ff       	call   c000b7d2 <GDTEntry::setLimit(unsigned int)>
c000b8aa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b8ae:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8b3:	0d 00 9a c0 00       	or     eax,0xc09a00
c000b8b8:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b8bc:	83 c4 20             	add    esp,0x20
c000b8bf:	6a 00                	push   0x0
c000b8c1:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000b8c5:	53                   	push   ebx
c000b8c6:	e8 eb fe ff ff       	call   c000b7b6 <GDTEntry::setBase(unsigned int)>
c000b8cb:	68 ff ff ff 00       	push   0xffffff
c000b8d0:	53                   	push   ebx
c000b8d1:	e8 fc fe ff ff       	call   c000b7d2 <GDTEntry::setLimit(unsigned int)>
c000b8d6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b8da:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000b8de:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000b8e3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000b8e7:	0d 00 92 c0 00       	or     eax,0xc09200
c000b8ec:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b8f0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b8f4:	89 d8                	mov    eax,ebx
c000b8f6:	80 cc 60             	or     ah,0x60
c000b8f9:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8fd:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b901:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b905:	83 c4 0c             	add    esp,0xc
c000b908:	89 f8                	mov    eax,edi
c000b90a:	80 cc 60             	or     ah,0x60
c000b90d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b911:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b915:	89 c7                	mov    edi,eax
c000b917:	55                   	push   ebp
c000b918:	e8 e9 fe ff ff       	call   c000b806 <GDT::addEntry(GDTEntry)>
c000b91d:	83 c4 0c             	add    esp,0xc
c000b920:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b924:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b928:	55                   	push   ebp
c000b929:	e8 d8 fe ff ff       	call   c000b806 <GDT::addEntry(GDTEntry)>
c000b92e:	83 c4 0c             	add    esp,0xc
c000b931:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b935:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b939:	55                   	push   ebp
c000b93a:	e8 c7 fe ff ff       	call   c000b806 <GDT::addEntry(GDTEntry)>
c000b93f:	83 c4 0c             	add    esp,0xc
c000b942:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b946:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b94a:	53                   	push   ebx
c000b94b:	51                   	push   ecx
c000b94c:	55                   	push   ebp
c000b94d:	e8 b4 fe ff ff       	call   c000b806 <GDT::addEntry(GDTEntry)>
c000b952:	83 c4 0c             	add    esp,0xc
c000b955:	57                   	push   edi
c000b956:	56                   	push   esi
c000b957:	55                   	push   ebp
c000b958:	e8 a9 fe ff ff       	call   c000b806 <GDT::addEntry(GDTEntry)>
c000b95d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b960:	e8 e5 fe ff ff       	call   c000b84a <GDT::flush()>
c000b965:	83 c4 4c             	add    esp,0x4c
c000b968:	5b                   	pop    ebx
c000b969:	5e                   	pop    esi
c000b96a:	5f                   	pop    edi
c000b96b:	5d                   	pop    ebp
c000b96c:	c3                   	ret    

c000b96d <idleFunction(void*)>:
c000b96d:	53                   	push   ebx
c000b96e:	83 ec 08             	sub    esp,0x8
c000b971:	e8 d5 d0 00 00       	call   c0018a4b <unlockScheduler()>
c000b976:	e8 59 8f 00 00       	call   c00148d4 <thisCPU()>
c000b97b:	f6 80 92 11 00 00 04 	test   BYTE PTR [eax+0x1192],0x4
c000b982:	74 41                	je     c000b9c5 <idleFunction(void*)+0x58>
c000b984:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c000b989:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000b990:	74 33                	je     c000b9c5 <idleFunction(void*)+0x58>
c000b992:	52                   	push   edx
c000b993:	31 db                	xor    ebx,ebx
c000b995:	52                   	push   edx
c000b996:	68 e1 00 00 00       	push   0xe1
c000b99b:	50                   	push   eax
c000b99c:	e8 db fb ff ff       	call   c000b57c <Computer::rdmsr(unsigned int)>
c000b9a1:	53                   	push   ebx
c000b9a2:	83 e0 02             	and    eax,0x2
c000b9a5:	50                   	push   eax
c000b9a6:	68 e1 00 00 00       	push   0xe1
c000b9ab:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c000b9b1:	e8 f2 fb ff ff       	call   c000b5a8 <Computer::wrmsr(unsigned int, unsigned long long)>
c000b9b6:	83 c4 20             	add    esp,0x20
c000b9b9:	e8 44 48 ff ff       	call   c0000202 <doTPAUSE>
c000b9be:	e8 0d 3e 01 00       	call   c001f7d0 <idleCommon()>
c000b9c3:	eb f4                	jmp    c000b9b9 <idleFunction(void*)+0x4c>
c000b9c5:	fb                   	sti    
c000b9c6:	f4                   	hlt    
c000b9c7:	e8 04 3e 01 00       	call   c001f7d0 <idleCommon()>
c000b9cc:	eb f7                	jmp    c000b9c5 <idleFunction(void*)+0x58>

c000b9ce <IDTEntry::IDTEntry(bool)>:
c000b9ce:	83 ec 04             	sub    esp,0x4
c000b9d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9d5:	88 04 24             	mov    BYTE PTR [esp],al
c000b9d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9dc:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000b9e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9e6:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000b9ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9ee:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000b9f1:	83 e2 f0             	and    edx,0xfffffff0
c000b9f4:	83 ca 0e             	or     edx,0xe
c000b9f7:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000b9fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b9fe:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba01:	83 e2 ef             	and    edx,0xffffffef
c000ba04:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba07:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000ba0b:	74 04                	je     c000ba11 <IDTEntry::IDTEntry(bool)+0x43>
c000ba0d:	b2 03                	mov    dl,0x3
c000ba0f:	eb 02                	jmp    c000ba13 <IDTEntry::IDTEntry(bool)+0x45>
c000ba11:	b2 00                	mov    dl,0x0
c000ba13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba17:	83 e2 03             	and    edx,0x3
c000ba1a:	88 d1                	mov    cl,dl
c000ba1c:	c1 e1 05             	shl    ecx,0x5
c000ba1f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba22:	83 e2 9f             	and    edx,0xffffff9f
c000ba25:	09 ca                	or     edx,ecx
c000ba27:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba2e:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ba31:	83 ca 80             	or     edx,0xffffff80
c000ba34:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ba37:	90                   	nop
c000ba38:	83 c4 04             	add    esp,0x4
c000ba3b:	c3                   	ret    

c000ba3c <IDTEntry::setOffset(unsigned int)>:
c000ba3c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ba40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba44:	66 89 02             	mov    WORD PTR [edx],ax
c000ba47:	c1 e8 10             	shr    eax,0x10
c000ba4a:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ba4e:	c3                   	ret    
c000ba4f:	90                   	nop

c000ba50 <IDT::IDT()>:
c000ba50:	90                   	nop
c000ba51:	c3                   	ret    

c000ba52 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ba52:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba56:	83 c0 30             	add    eax,0x30
c000ba59:	c3                   	ret    

c000ba5a <IDT::addEntry(IDTEntry, int)>:
c000ba5a:	53                   	push   ebx
c000ba5b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ba5f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ba63:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ba67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba6b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ba6e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ba72:	5b                   	pop    ebx
c000ba73:	c3                   	ret    

c000ba74 <IDT::addEntry(int, void (*)(), bool)>:
c000ba74:	53                   	push   ebx
c000ba75:	83 ec 10             	sub    esp,0x10
c000ba78:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ba7d:	50                   	push   eax
c000ba7e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ba82:	53                   	push   ebx
c000ba83:	e8 46 ff ff ff       	call   c000b9ce <IDTEntry::IDTEntry(bool)>
c000ba88:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ba8c:	53                   	push   ebx
c000ba8d:	e8 aa ff ff ff       	call   c000ba3c <IDTEntry::setOffset(unsigned int)>
c000ba92:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ba96:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ba9a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ba9e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000baa2:	e8 b3 ff ff ff       	call   c000ba5a <IDT::addEntry(IDTEntry, int)>
c000baa7:	83 c4 30             	add    esp,0x30
c000baaa:	5b                   	pop    ebx
c000baab:	c3                   	ret    

c000baac <IDT::flush()>:
c000baac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bab0:	66 c7 05 b8 47 02 c0 ff 07 	mov    WORD PTR ds:0xc00247b8,0x7ff
c000bab9:	a3 ba 47 02 c0       	mov    ds:0xc00247ba,eax
c000babe:	0f 01 1d b8 47 02 c0 	lidtd  ds:0xc00247b8
c000bac5:	c3                   	ret    

c000bac6 <IDT::setup()>:
c000bac6:	57                   	push   edi
c000bac7:	56                   	push   esi
c000bac8:	53                   	push   ebx
c000bac9:	83 ec 10             	sub    esp,0x10
c000bacc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000bad0:	6a 00                	push   0x0
c000bad2:	68 0c 04 00 c0       	push   0xc000040c
c000bad7:	6a 00                	push   0x0
c000bad9:	53                   	push   ebx
c000bada:	e8 95 ff ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000badf:	6a 00                	push   0x0
c000bae1:	68 1c 04 00 c0       	push   0xc000041c
c000bae6:	6a 01                	push   0x1
c000bae8:	53                   	push   ebx
c000bae9:	e8 86 ff ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000baee:	83 c4 20             	add    esp,0x20
c000baf1:	6a 00                	push   0x0
c000baf3:	68 26 04 00 c0       	push   0xc0000426
c000baf8:	6a 02                	push   0x2
c000bafa:	53                   	push   ebx
c000bafb:	e8 74 ff ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bb00:	6a 00                	push   0x0
c000bb02:	68 30 04 00 c0       	push   0xc0000430
c000bb07:	6a 03                	push   0x3
c000bb09:	53                   	push   ebx
c000bb0a:	e8 65 ff ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bb0f:	83 c4 20             	add    esp,0x20
c000bb12:	6a 00                	push   0x0
c000bb14:	68 3a 04 00 c0       	push   0xc000043a
c000bb19:	6a 04                	push   0x4
c000bb1b:	53                   	push   ebx
c000bb1c:	e8 53 ff ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bb21:	6a 00                	push   0x0
c000bb23:	68 44 04 00 c0       	push   0xc0000444
c000bb28:	6a 05                	push   0x5
c000bb2a:	53                   	push   ebx
c000bb2b:	e8 44 ff ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bb30:	83 c4 20             	add    esp,0x20
c000bb33:	6a 00                	push   0x0
c000bb35:	68 4e 04 00 c0       	push   0xc000044e
c000bb3a:	6a 06                	push   0x6
c000bb3c:	53                   	push   ebx
c000bb3d:	e8 32 ff ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bb42:	6a 00                	push   0x0
c000bb44:	68 58 04 00 c0       	push   0xc0000458
c000bb49:	6a 07                	push   0x7
c000bb4b:	53                   	push   ebx
c000bb4c:	e8 23 ff ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bb51:	83 c4 20             	add    esp,0x20
c000bb54:	6a 00                	push   0x0
c000bb56:	68 62 04 00 c0       	push   0xc0000462
c000bb5b:	6a 08                	push   0x8
c000bb5d:	53                   	push   ebx
c000bb5e:	e8 11 ff ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bb63:	6a 00                	push   0x0
c000bb65:	68 6a 04 00 c0       	push   0xc000046a
c000bb6a:	6a 09                	push   0x9
c000bb6c:	53                   	push   ebx
c000bb6d:	e8 02 ff ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bb72:	83 c4 20             	add    esp,0x20
c000bb75:	6a 00                	push   0x0
c000bb77:	68 74 04 00 c0       	push   0xc0000474
c000bb7c:	6a 0a                	push   0xa
c000bb7e:	53                   	push   ebx
c000bb7f:	e8 f0 fe ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bb84:	6a 00                	push   0x0
c000bb86:	68 7c 04 00 c0       	push   0xc000047c
c000bb8b:	6a 0b                	push   0xb
c000bb8d:	53                   	push   ebx
c000bb8e:	e8 e1 fe ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bb93:	83 c4 20             	add    esp,0x20
c000bb96:	6a 00                	push   0x0
c000bb98:	68 84 04 00 c0       	push   0xc0000484
c000bb9d:	6a 0c                	push   0xc
c000bb9f:	53                   	push   ebx
c000bba0:	e8 cf fe ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bba5:	6a 00                	push   0x0
c000bba7:	68 8c 04 00 c0       	push   0xc000048c
c000bbac:	6a 0d                	push   0xd
c000bbae:	53                   	push   ebx
c000bbaf:	e8 c0 fe ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bbb4:	83 c4 20             	add    esp,0x20
c000bbb7:	6a 00                	push   0x0
c000bbb9:	68 94 04 00 c0       	push   0xc0000494
c000bbbe:	6a 0e                	push   0xe
c000bbc0:	53                   	push   ebx
c000bbc1:	e8 ae fe ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bbc6:	6a 00                	push   0x0
c000bbc8:	68 9c 04 00 c0       	push   0xc000049c
c000bbcd:	6a 0f                	push   0xf
c000bbcf:	53                   	push   ebx
c000bbd0:	e8 9f fe ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bbd5:	83 c4 20             	add    esp,0x20
c000bbd8:	6a 00                	push   0x0
c000bbda:	68 a6 04 00 c0       	push   0xc00004a6
c000bbdf:	6a 10                	push   0x10
c000bbe1:	53                   	push   ebx
c000bbe2:	e8 8d fe ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bbe7:	6a 00                	push   0x0
c000bbe9:	68 b0 04 00 c0       	push   0xc00004b0
c000bbee:	6a 11                	push   0x11
c000bbf0:	53                   	push   ebx
c000bbf1:	e8 7e fe ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bbf6:	83 c4 20             	add    esp,0x20
c000bbf9:	6a 00                	push   0x0
c000bbfb:	68 ba 04 00 c0       	push   0xc00004ba
c000bc00:	6a 12                	push   0x12
c000bc02:	53                   	push   ebx
c000bc03:	e8 6c fe ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bc08:	6a 01                	push   0x1
c000bc0a:	68 c4 04 00 c0       	push   0xc00004c4
c000bc0f:	6a 60                	push   0x60
c000bc11:	53                   	push   ebx
c000bc12:	e8 5d fe ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bc17:	83 c4 20             	add    esp,0x20
c000bc1a:	6a 00                	push   0x0
c000bc1c:	68 ce 04 00 c0       	push   0xc00004ce
c000bc21:	6a 20                	push   0x20
c000bc23:	53                   	push   ebx
c000bc24:	e8 4b fe ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bc29:	6a 00                	push   0x0
c000bc2b:	68 d8 04 00 c0       	push   0xc00004d8
c000bc30:	6a 21                	push   0x21
c000bc32:	53                   	push   ebx
c000bc33:	e8 3c fe ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bc38:	83 c4 20             	add    esp,0x20
c000bc3b:	6a 00                	push   0x0
c000bc3d:	68 e2 04 00 c0       	push   0xc00004e2
c000bc42:	6a 22                	push   0x22
c000bc44:	53                   	push   ebx
c000bc45:	e8 2a fe ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bc4a:	6a 00                	push   0x0
c000bc4c:	68 ec 04 00 c0       	push   0xc00004ec
c000bc51:	6a 23                	push   0x23
c000bc53:	53                   	push   ebx
c000bc54:	e8 1b fe ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bc59:	83 c4 20             	add    esp,0x20
c000bc5c:	6a 00                	push   0x0
c000bc5e:	68 f6 04 00 c0       	push   0xc00004f6
c000bc63:	6a 24                	push   0x24
c000bc65:	53                   	push   ebx
c000bc66:	e8 09 fe ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bc6b:	6a 00                	push   0x0
c000bc6d:	68 00 05 00 c0       	push   0xc0000500
c000bc72:	6a 25                	push   0x25
c000bc74:	53                   	push   ebx
c000bc75:	e8 fa fd ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bc7a:	83 c4 20             	add    esp,0x20
c000bc7d:	6a 00                	push   0x0
c000bc7f:	68 0a 05 00 c0       	push   0xc000050a
c000bc84:	6a 26                	push   0x26
c000bc86:	53                   	push   ebx
c000bc87:	e8 e8 fd ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bc8c:	6a 00                	push   0x0
c000bc8e:	68 14 05 00 c0       	push   0xc0000514
c000bc93:	6a 27                	push   0x27
c000bc95:	53                   	push   ebx
c000bc96:	e8 d9 fd ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bc9b:	83 c4 20             	add    esp,0x20
c000bc9e:	6a 00                	push   0x0
c000bca0:	68 1e 05 00 c0       	push   0xc000051e
c000bca5:	6a 28                	push   0x28
c000bca7:	53                   	push   ebx
c000bca8:	e8 c7 fd ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bcad:	6a 00                	push   0x0
c000bcaf:	68 28 05 00 c0       	push   0xc0000528
c000bcb4:	6a 29                	push   0x29
c000bcb6:	53                   	push   ebx
c000bcb7:	e8 b8 fd ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bcbc:	83 c4 20             	add    esp,0x20
c000bcbf:	6a 00                	push   0x0
c000bcc1:	68 32 05 00 c0       	push   0xc0000532
c000bcc6:	6a 2a                	push   0x2a
c000bcc8:	53                   	push   ebx
c000bcc9:	e8 a6 fd ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bcce:	6a 00                	push   0x0
c000bcd0:	68 3c 05 00 c0       	push   0xc000053c
c000bcd5:	6a 2b                	push   0x2b
c000bcd7:	53                   	push   ebx
c000bcd8:	e8 97 fd ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bcdd:	83 c4 20             	add    esp,0x20
c000bce0:	6a 00                	push   0x0
c000bce2:	68 46 05 00 c0       	push   0xc0000546
c000bce7:	6a 2c                	push   0x2c
c000bce9:	53                   	push   ebx
c000bcea:	e8 85 fd ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bcef:	6a 00                	push   0x0
c000bcf1:	68 50 05 00 c0       	push   0xc0000550
c000bcf6:	6a 2d                	push   0x2d
c000bcf8:	53                   	push   ebx
c000bcf9:	e8 76 fd ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bcfe:	83 c4 20             	add    esp,0x20
c000bd01:	6a 00                	push   0x0
c000bd03:	68 5a 05 00 c0       	push   0xc000055a
c000bd08:	6a 2e                	push   0x2e
c000bd0a:	53                   	push   ebx
c000bd0b:	e8 64 fd ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bd10:	6a 00                	push   0x0
c000bd12:	68 64 05 00 c0       	push   0xc0000564
c000bd17:	6a 2f                	push   0x2f
c000bd19:	53                   	push   ebx
c000bd1a:	e8 55 fd ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bd1f:	83 c4 20             	add    esp,0x20
c000bd22:	6a 00                	push   0x0
c000bd24:	68 6e 05 00 c0       	push   0xc000056e
c000bd29:	6a 30                	push   0x30
c000bd2b:	53                   	push   ebx
c000bd2c:	e8 43 fd ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bd31:	6a 00                	push   0x0
c000bd33:	68 78 05 00 c0       	push   0xc0000578
c000bd38:	6a 31                	push   0x31
c000bd3a:	53                   	push   ebx
c000bd3b:	e8 34 fd ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bd40:	83 c4 20             	add    esp,0x20
c000bd43:	6a 00                	push   0x0
c000bd45:	68 82 05 00 c0       	push   0xc0000582
c000bd4a:	6a 32                	push   0x32
c000bd4c:	53                   	push   ebx
c000bd4d:	e8 22 fd ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bd52:	6a 00                	push   0x0
c000bd54:	68 8c 05 00 c0       	push   0xc000058c
c000bd59:	6a 33                	push   0x33
c000bd5b:	53                   	push   ebx
c000bd5c:	e8 13 fd ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bd61:	83 c4 20             	add    esp,0x20
c000bd64:	6a 00                	push   0x0
c000bd66:	68 96 05 00 c0       	push   0xc0000596
c000bd6b:	6a 34                	push   0x34
c000bd6d:	53                   	push   ebx
c000bd6e:	e8 01 fd ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bd73:	6a 00                	push   0x0
c000bd75:	68 a0 05 00 c0       	push   0xc00005a0
c000bd7a:	6a 35                	push   0x35
c000bd7c:	53                   	push   ebx
c000bd7d:	e8 f2 fc ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bd82:	83 c4 20             	add    esp,0x20
c000bd85:	6a 00                	push   0x0
c000bd87:	68 aa 05 00 c0       	push   0xc00005aa
c000bd8c:	6a 36                	push   0x36
c000bd8e:	53                   	push   ebx
c000bd8f:	e8 e0 fc ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bd94:	6a 00                	push   0x0
c000bd96:	68 b4 05 00 c0       	push   0xc00005b4
c000bd9b:	6a 37                	push   0x37
c000bd9d:	53                   	push   ebx
c000bd9e:	e8 d1 fc ff ff       	call   c000ba74 <IDT::addEntry(int, void (*)(), bool)>
c000bda3:	83 c4 20             	add    esp,0x20
c000bda6:	e8 d8 25 00 00       	call   c000e383 <Virt::getAKernelVAS()>
c000bdab:	52                   	push   edx
c000bdac:	6a 03                	push   0x3
c000bdae:	6a 02                	push   0x2
c000bdb0:	50                   	push   eax
c000bdb1:	e8 0e 2c 00 00       	call   c000e9c4 <VAS::allocatePages(int, int)>
c000bdb6:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000bdbd:	89 c6                	mov    esi,eax
c000bdbf:	e8 18 33 00 00       	call   c000f0dc <operator new(unsigned long)>
c000bdc4:	81 c6 00 20 00 00    	add    esi,0x2000
c000bdca:	89 04 24             	mov    DWORD PTR [esp],eax
c000bdcd:	89 c7                	mov    edi,eax
c000bdcf:	e8 ee 1c 00 00       	call   c000dac2 <TSS::TSS()>
c000bdd4:	83 c4 0c             	add    esp,0xc
c000bdd7:	68 62 04 00 c0       	push   0xc0000462
c000bddc:	56                   	push   esi
c000bddd:	57                   	push   edi
c000bdde:	e8 1f 1d 00 00       	call   c000db02 <TSS::setup(unsigned long, unsigned long)>
c000bde3:	59                   	pop    ecx
c000bde4:	89 c6                	mov    esi,eax
c000bde6:	5f                   	pop    edi
c000bde7:	6a 00                	push   0x0
c000bde9:	8d 44 24 14          	lea    eax,[esp+0x14]
c000bded:	50                   	push   eax
c000bdee:	e8 db fb ff ff       	call   c000b9ce <IDTEntry::IDTEntry(bool)>
c000bdf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bdf7:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000bdfc:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000be02:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000be09:	80 ce 05             	or     dh,0x5
c000be0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000be10:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000be14:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000be17:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000be1b:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000be1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000be21:	e8 86 fc ff ff       	call   c000baac <IDT::flush()>
c000be26:	83 c4 20             	add    esp,0x20
c000be29:	5b                   	pop    ebx
c000be2a:	5e                   	pop    esi
c000be2b:	5f                   	pop    edi
c000be2c:	c3                   	ret    

c000be2d <sbrk>:
c000be2d:	55                   	push   ebp
c000be2e:	57                   	push   edi
c000be2f:	56                   	push   esi
c000be30:	53                   	push   ebx
c000be31:	83 ec 1c             	sub    esp,0x1c
c000be34:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000be38:	85 db                	test   ebx,ebx
c000be3a:	a1 c0 3b 02 c0       	mov    eax,ds:0xc0023bc0
c000be3f:	0f 84 e4 00 00 00    	je     c000bf29 <sbrk+0xfc>
c000be45:	78 3d                	js     c000be84 <sbrk+0x57>
c000be47:	e8 88 8a 00 00       	call   c00148d4 <thisCPU()>
c000be4c:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000be52:	83 e0 01             	and    eax,0x1
c000be55:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000be59:	a1 c0 3b 02 c0       	mov    eax,ds:0xc0023bc0
c000be5e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000be62:	81 c3 ff 0f 00 00    	add    ebx,0xfff
c000be68:	89 d8                	mov    eax,ebx
c000be6a:	c1 f8 1f             	sar    eax,0x1f
c000be6d:	25 ff 0f 00 00       	and    eax,0xfff
c000be72:	01 c3                	add    ebx,eax
c000be74:	c1 fb 0c             	sar    ebx,0xc
c000be77:	89 df                	mov    edi,ebx
c000be79:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000be7d:	be 00 00 00 00       	mov    esi,0x0
c000be82:	eb 2a                	jmp    c000beae <sbrk+0x81>
c000be84:	83 ec 08             	sub    esp,0x8
c000be87:	53                   	push   ebx
c000be88:	68 e4 12 02 c0       	push   0xc00212e4
c000be8d:	e8 7f 33 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000be92:	83 c4 10             	add    esp,0x10
c000be95:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000be9a:	e9 8a 00 00 00       	jmp    c000bf29 <sbrk+0xfc>
c000be9f:	81 05 c0 3b 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0023bc0,0x1000
c000bea9:	46                   	inc    esi
c000beaa:	39 f7                	cmp    edi,esi
c000beac:	74 34                	je     c000bee2 <sbrk+0xb5>
c000beae:	e8 d0 24 00 00       	call   c000e383 <Virt::getAKernelVAS()>
c000beb3:	89 c3                	mov    ebx,eax
c000beb5:	8b 2d c0 3b 02 c0    	mov    ebp,DWORD PTR ds:0xc0023bc0
c000bebb:	e8 f5 06 00 00       	call   c000c5b5 <Phys::allocatePage()>
c000bec0:	68 01 04 00 00       	push   0x401
c000bec5:	55                   	push   ebp
c000bec6:	50                   	push   eax
c000bec7:	53                   	push   ebx
c000bec8:	e8 f5 29 00 00       	call   c000e8c2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000becd:	83 c4 10             	add    esp,0x10
c000bed0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bed5:	74 c8                	je     c000be9f <sbrk+0x72>
c000bed7:	8b 1d c0 3b 02 c0    	mov    ebx,DWORD PTR ds:0xc0023bc0
c000bedd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bee0:	eb bd                	jmp    c000be9f <sbrk+0x72>
c000bee2:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bee7:	74 48                	je     c000bf31 <sbrk+0x104>
c000bee9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000beed:	89 d3                	mov    ebx,edx
c000beef:	c1 eb 0a             	shr    ebx,0xa
c000bef2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000bef8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000befe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bf02:	c1 e0 0c             	shl    eax,0xc
c000bf05:	01 d0                	add    eax,edx
c000bf07:	c1 e8 0a             	shr    eax,0xa
c000bf0a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000bf0f:	2d 00 00 40 00       	sub    eax,0x400000
c000bf14:	39 c3                	cmp    ebx,eax
c000bf16:	77 0d                	ja     c000bf25 <sbrk+0xf8>
c000bf18:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000bf1b:	81 c3 00 10 00 00    	add    ebx,0x1000
c000bf21:	39 d8                	cmp    eax,ebx
c000bf23:	73 f3                	jae    c000bf18 <sbrk+0xeb>
c000bf25:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bf29:	83 c4 1c             	add    esp,0x1c
c000bf2c:	5b                   	pop    ebx
c000bf2d:	5e                   	pop    esi
c000bf2e:	5f                   	pop    edi
c000bf2f:	5d                   	pop    ebp
c000bf30:	c3                   	ret    
c000bf31:	e8 af 38 01 00       	call   c001f7e5 <CPU::readCR3()>
c000bf36:	83 ec 0c             	sub    esp,0xc
c000bf39:	50                   	push   eax
c000bf3a:	e8 b8 38 01 00       	call   c001f7f7 <CPU::writeCR3(unsigned long)>
c000bf3f:	83 c4 10             	add    esp,0x10
c000bf42:	eb e1                	jmp    c000bf25 <sbrk+0xf8>

c000bf44 <mmap>:
c000bf44:	83 ec 18             	sub    esp,0x18
c000bf47:	68 14 13 02 c0       	push   0xc0021314
c000bf4c:	e8 ef 9a 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c000bf51:	b8 00 00 00 00       	mov    eax,0x0
c000bf56:	83 c4 1c             	add    esp,0x1c
c000bf59:	c3                   	ret    

c000bf5a <munmap>:
c000bf5a:	83 ec 18             	sub    esp,0x18
c000bf5d:	68 19 13 02 c0       	push   0xc0021319
c000bf62:	e8 d9 9a 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c000bf67:	b8 00 00 00 00       	mov    eax,0x0
c000bf6c:	83 c4 1c             	add    esp,0x1c
c000bf6f:	c3                   	ret    

c000bf70 <liballoc_lock()>:
c000bf70:	83 ec 0c             	sub    esp,0xc
c000bf73:	e8 d1 ca 00 00       	call   c0018a49 <lockScheduler()>
c000bf78:	b8 00 00 00 00       	mov    eax,0x0
c000bf7d:	83 c4 0c             	add    esp,0xc
c000bf80:	c3                   	ret    

c000bf81 <liballoc_unlock()>:
c000bf81:	83 ec 0c             	sub    esp,0xc
c000bf84:	e8 c2 ca 00 00       	call   c0018a4b <unlockScheduler()>
c000bf89:	b8 00 00 00 00       	mov    eax,0x0
c000bf8e:	83 c4 0c             	add    esp,0xc
c000bf91:	c3                   	ret    

c000bf92 <liballoc_alloc(int)>:
c000bf92:	83 ec 0c             	sub    esp,0xc
c000bf95:	e8 e9 23 00 00       	call   c000e383 <Virt::getAKernelVAS()>
c000bf9a:	83 ec 04             	sub    esp,0x4
c000bf9d:	6a 01                	push   0x1
c000bf9f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfa3:	50                   	push   eax
c000bfa4:	e8 1b 2a 00 00       	call   c000e9c4 <VAS::allocatePages(int, int)>
c000bfa9:	83 c4 1c             	add    esp,0x1c
c000bfac:	c3                   	ret    

c000bfad <liballoc_free(void*, int)>:
c000bfad:	83 ec 0c             	sub    esp,0xc
c000bfb0:	e8 ce 23 00 00       	call   c000e383 <Virt::getAKernelVAS()>
c000bfb5:	83 ec 08             	sub    esp,0x8
c000bfb8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bfbc:	50                   	push   eax
c000bfbd:	e8 a2 26 00 00       	call   c000e664 <VAS::freeAllocatedPages(unsigned long)>
c000bfc2:	b8 00 00 00 00       	mov    eax,0x0
c000bfc7:	83 c4 1c             	add    esp,0x1c
c000bfca:	c3                   	ret    

c000bfcb <realloc>:
c000bfcb:	83 ec 14             	sub    esp,0x14
c000bfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfd6:	e8 64 54 ff ff       	call   c000143f <dlrealloc>
c000bfdb:	83 c4 1c             	add    esp,0x1c
c000bfde:	c3                   	ret    

c000bfdf <malloc>:
c000bfdf:	83 ec 18             	sub    esp,0x18
c000bfe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfe6:	e8 17 4f ff ff       	call   c0000f02 <dlmalloc>
c000bfeb:	83 c4 1c             	add    esp,0x1c
c000bfee:	c3                   	ret    

c000bfef <free>:
c000bfef:	83 ec 18             	sub    esp,0x18
c000bff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bff6:	e8 a9 4b ff ff       	call   c0000ba4 <dlfree>
c000bffb:	83 c4 1c             	add    esp,0x1c
c000bffe:	c3                   	ret    

c000bfff <rfree>:
c000bfff:	83 ec 18             	sub    esp,0x18
c000c002:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c006:	e8 e4 ff ff ff       	call   c000bfef <free>
c000c00b:	83 c4 1c             	add    esp,0x1c
c000c00e:	c3                   	ret    

c000c00f <calloc>:
c000c00f:	56                   	push   esi
c000c010:	53                   	push   ebx
c000c011:	83 ec 10             	sub    esp,0x10
c000c014:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c018:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000c01d:	53                   	push   ebx
c000c01e:	e8 bc ff ff ff       	call   c000bfdf <malloc>
c000c023:	89 c6                	mov    esi,eax
c000c025:	83 c4 0c             	add    esp,0xc
c000c028:	53                   	push   ebx
c000c029:	6a 00                	push   0x0
c000c02b:	50                   	push   eax
c000c02c:	e8 90 46 ff ff       	call   c00006c1 <memset>
c000c031:	89 f0                	mov    eax,esi
c000c033:	83 c4 14             	add    esp,0x14
c000c036:	5b                   	pop    ebx
c000c037:	5e                   	pop    esi
c000c038:	c3                   	ret    

c000c039 <hwTextMode_loadInData(VgaText*)>:
c000c039:	57                   	push   edi
c000c03a:	56                   	push   esi
c000c03b:	53                   	push   ebx
c000c03c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000c040:	8b 87 ac 0f 00 00    	mov    eax,DWORD PTR [edi+0xfac]
c000c046:	85 c0                	test   eax,eax
c000c048:	7e 30                	jle    c000c07a <hwTextMode_loadInData(VgaText*)+0x41>
c000c04a:	8d 5f 0c             	lea    ebx,[edi+0xc]
c000c04d:	31 f6                	xor    esi,esi
c000c04f:	8d 0c b6             	lea    ecx,[esi+esi*4]
c000c052:	31 c0                	xor    eax,eax
c000c054:	c1 e1 05             	shl    ecx,0x5
c000c057:	81 e9 60 7f f4 3d    	sub    ecx,0x3df47f60
c000c05d:	66 8b 14 43          	mov    dx,WORD PTR [ebx+eax*2]
c000c061:	66 89 14 41          	mov    WORD PTR [ecx+eax*2],dx
c000c065:	40                   	inc    eax
c000c066:	83 f8 50             	cmp    eax,0x50
c000c069:	75 f2                	jne    c000c05d <hwTextMode_loadInData(VgaText*)+0x24>
c000c06b:	46                   	inc    esi
c000c06c:	81 c3 a0 00 00 00    	add    ebx,0xa0
c000c072:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000c078:	7f d5                	jg     c000c04f <hwTextMode_loadInData(VgaText*)+0x16>
c000c07a:	5b                   	pop    ebx
c000c07b:	5e                   	pop    esi
c000c07c:	5f                   	pop    edi
c000c07d:	c3                   	ret    

c000c07e <hwTextMode_loadInTitle(VgaText*, char*)>:
c000c07e:	56                   	push   esi
c000c07f:	ba 00 80 0b c2       	mov    edx,0xc20b8000
c000c084:	53                   	push   ebx
c000c085:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c089:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c08d:	8b 83 d4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfd4]
c000c093:	8b b3 d8 0f 00 00    	mov    esi,DWORD PTR [ebx+0xfd8]
c000c099:	c1 e0 04             	shl    eax,0x4
c000c09c:	83 e6 0f             	and    esi,0xf
c000c09f:	25 ff 00 00 00       	and    eax,0xff
c000c0a4:	83 c2 02             	add    edx,0x2
c000c0a7:	09 f0                	or     eax,esi
c000c0a9:	41                   	inc    ecx
c000c0aa:	0f b6 71 ff          	movzx  esi,BYTE PTR [ecx-0x1]
c000c0ae:	c1 e0 08             	shl    eax,0x8
c000c0b1:	81 e6 ff 00 00 00    	and    esi,0xff
c000c0b7:	09 f0                	or     eax,esi
c000c0b9:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c000c0bd:	81 fa a0 80 0b c2    	cmp    edx,0xc20b80a0
c000c0c3:	75 c8                	jne    c000c08d <hwTextMode_loadInTitle(VgaText*, char*)+0xf>
c000c0c5:	5b                   	pop    ebx
c000c0c6:	5e                   	pop    esi
c000c0c7:	c3                   	ret    

c000c0c8 <hwTextMode_showCursor(VgaText*, bool)>:
c000c0c8:	56                   	push   esi
c000c0c9:	53                   	push   ebx
c000c0ca:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c000c0cf:	74 38                	je     c000c109 <hwTextMode_showCursor(VgaText*, bool)+0x41>
c000c0d1:	bb d4 03 00 00       	mov    ebx,0x3d4
c000c0d6:	b0 0a                	mov    al,0xa
c000c0d8:	89 da                	mov    edx,ebx
c000c0da:	ee                   	out    dx,al
c000c0db:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000c0e0:	89 ca                	mov    edx,ecx
c000c0e2:	ec                   	in     al,dx
c000c0e3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c0e7:	b2 0f                	mov    dl,0xf
c000c0e9:	83 e0 c0             	and    eax,0xffffffc0
c000c0ec:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000c0f2:	09 d0                	or     eax,edx
c000c0f4:	89 ca                	mov    edx,ecx
c000c0f6:	ee                   	out    dx,al
c000c0f7:	b0 0b                	mov    al,0xb
c000c0f9:	89 da                	mov    edx,ebx
c000c0fb:	ee                   	out    dx,al
c000c0fc:	89 ca                	mov    edx,ecx
c000c0fe:	ec                   	in     al,dx
c000c0ff:	83 e0 e0             	and    eax,0xffffffe0
c000c102:	83 c8 0f             	or     eax,0xf
c000c105:	ee                   	out    dx,al
c000c106:	5b                   	pop    ebx
c000c107:	5e                   	pop    esi
c000c108:	c3                   	ret    
c000c109:	b0 0a                	mov    al,0xa
c000c10b:	ba d4 03 00 00       	mov    edx,0x3d4
c000c110:	ee                   	out    dx,al
c000c111:	b0 20                	mov    al,0x20
c000c113:	ba d5 03 00 00       	mov    edx,0x3d5
c000c118:	ee                   	out    dx,al
c000c119:	5b                   	pop    ebx
c000c11a:	5e                   	pop    esi
c000c11b:	c3                   	ret    

c000c11c <hwTextMode_update(VgaText*)>:
c000c11c:	c3                   	ret    

c000c11d <hwTextMode_updateCursor(VgaText*)>:
c000c11d:	56                   	push   esi
c000c11e:	b9 19 00 00 00       	mov    ecx,0x19
c000c123:	53                   	push   ebx
c000c124:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c128:	8b 90 ac 0f 00 00    	mov    edx,DWORD PTR [eax+0xfac]
c000c12e:	8b 98 b4 0f 00 00    	mov    ebx,DWORD PTR [eax+0xfb4]
c000c134:	29 d1                	sub    ecx,edx
c000c136:	8b b0 b0 0f 00 00    	mov    esi,DWORD PTR [eax+0xfb0]
c000c13c:	01 d9                	add    ecx,ebx
c000c13e:	b0 0f                	mov    al,0xf
c000c140:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000c143:	c1 e1 04             	shl    ecx,0x4
c000c146:	01 f1                	add    ecx,esi
c000c148:	be d4 03 00 00       	mov    esi,0x3d4
c000c14d:	89 f2                	mov    edx,esi
c000c14f:	ee                   	out    dx,al
c000c150:	bb d5 03 00 00       	mov    ebx,0x3d5
c000c155:	88 c8                	mov    al,cl
c000c157:	89 da                	mov    edx,ebx
c000c159:	ee                   	out    dx,al
c000c15a:	b0 0e                	mov    al,0xe
c000c15c:	89 f2                	mov    edx,esi
c000c15e:	ee                   	out    dx,al
c000c15f:	89 c8                	mov    eax,ecx
c000c161:	89 da                	mov    edx,ebx
c000c163:	66 c1 e8 08          	shr    ax,0x8
c000c167:	ee                   	out    dx,al
c000c168:	5b                   	pop    ebx
c000c169:	5e                   	pop    esi
c000c16a:	c3                   	ret    

c000c16b <hwTextMode_disableBlink(VgaText*, bool)>:
c000c16b:	ba da 03 00 00       	mov    edx,0x3da
c000c170:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000c175:	75 18                	jne    c000c18f <hwTextMode_disableBlink(VgaText*, bool)+0x24>
c000c177:	ec                   	in     al,dx
c000c178:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c17d:	b0 30                	mov    al,0x30
c000c17f:	89 ca                	mov    edx,ecx
c000c181:	ee                   	out    dx,al
c000c182:	ba c1 03 00 00       	mov    edx,0x3c1
c000c187:	ec                   	in     al,dx
c000c188:	83 c8 08             	or     eax,0x8
c000c18b:	89 ca                	mov    edx,ecx
c000c18d:	ee                   	out    dx,al
c000c18e:	c3                   	ret    
c000c18f:	ec                   	in     al,dx
c000c190:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000c195:	b0 30                	mov    al,0x30
c000c197:	89 ca                	mov    edx,ecx
c000c199:	ee                   	out    dx,al
c000c19a:	ba c1 03 00 00       	mov    edx,0x3c1
c000c19f:	ec                   	in     al,dx
c000c1a0:	83 e0 f7             	and    eax,0xfffffff7
c000c1a3:	89 ca                	mov    edx,ecx
c000c1a5:	ee                   	out    dx,al
c000c1a6:	c3                   	ret    

c000c1a7 <hwTextMode_scrollScreen(VgaText*)>:
c000c1a7:	55                   	push   ebp
c000c1a8:	bd 02 00 00 00       	mov    ebp,0x2
c000c1ad:	57                   	push   edi
c000c1ae:	56                   	push   esi
c000c1af:	53                   	push   ebx
c000c1b0:	83 ec 1c             	sub    esp,0x1c
c000c1b3:	c7 44 24 0c a0 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b80a0
c000c1bb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000c1bf:	31 c0                	xor    eax,eax
c000c1c1:	eb 0b                	jmp    c000c1ce <hwTextMode_scrollScreen(VgaText*)+0x27>
c000c1c3:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c1c9:	74 58                	je     c000c223 <hwTextMode_scrollScreen(VgaText*)+0x7c>
c000c1cb:	43                   	inc    ebx
c000c1cc:	89 f0                	mov    eax,esi
c000c1ce:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000c1d4:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000c1da:	88 13                	mov    BYTE PTR [ebx],dl
c000c1dc:	8d 70 01             	lea    esi,[eax+0x1]
c000c1df:	83 fd 18             	cmp    ebp,0x18
c000c1e2:	75 df                	jne    c000c1c3 <hwTextMode_scrollScreen(VgaText*)+0x1c>
c000c1e4:	a8 01                	test   al,0x1
c000c1e6:	75 13                	jne    c000c1fb <hwTextMode_scrollScreen(VgaText*)+0x54>
c000c1e8:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000c1eb:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000c1f1:	75 d8                	jne    c000c1cb <hwTextMode_scrollScreen(VgaText*)+0x24>
c000c1f3:	83 c4 1c             	add    esp,0x1c
c000c1f6:	5b                   	pop    ebx
c000c1f7:	5e                   	pop    esi
c000c1f8:	5f                   	pop    edi
c000c1f9:	5d                   	pop    ebp
c000c1fa:	c3                   	ret    
c000c1fb:	52                   	push   edx
c000c1fc:	31 c0                	xor    eax,eax
c000c1fe:	52                   	push   edx
c000c1ff:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c203:	8a 81 cc 0f 00 00    	mov    al,BYTE PTR [ecx+0xfcc]
c000c209:	50                   	push   eax
c000c20a:	31 c0                	xor    eax,eax
c000c20c:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000c210:	8a 81 d0 0f 00 00    	mov    al,BYTE PTR [ecx+0xfd0]
c000c216:	50                   	push   eax
c000c217:	e8 84 0b 00 00       	call   c000cda0 <VgaText::combineColours(unsigned char, unsigned char)>
c000c21c:	83 c4 10             	add    esp,0x10
c000c21f:	88 07                	mov    BYTE PTR [edi],al
c000c221:	eb c8                	jmp    c000c1eb <hwTextMode_scrollScreen(VgaText*)+0x44>
c000c223:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c227:	45                   	inc    ebp
c000c228:	05 a0 00 00 00       	add    eax,0xa0
c000c22d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c231:	eb 88                	jmp    c000c1bb <hwTextMode_scrollScreen(VgaText*)+0x14>

c000c233 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000c233:	56                   	push   esi
c000c234:	31 c0                	xor    eax,eax
c000c236:	53                   	push   ebx
c000c237:	83 ec 0c             	sub    esp,0xc
c000c23a:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c23e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c242:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000c246:	50                   	push   eax
c000c247:	31 c0                	xor    eax,eax
c000c249:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c000c24d:	50                   	push   eax
c000c24e:	e8 4d 0b 00 00       	call   c000cda0 <VgaText::combineColours(unsigned char, unsigned char)>
c000c253:	5a                   	pop    edx
c000c254:	25 ff 00 00 00       	and    eax,0xff
c000c259:	59                   	pop    ecx
c000c25a:	50                   	push   eax
c000c25b:	89 f0                	mov    eax,esi
c000c25d:	0f be f0             	movsx  esi,al
c000c260:	56                   	push   esi
c000c261:	e8 e0 0b 00 00       	call   c000ce46 <VgaText::combineCharAndColour(char, unsigned char)>
c000c266:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000c26a:	ba 19 00 00 00       	mov    edx,0x19
c000c26f:	8b b1 ac 0f 00 00    	mov    esi,DWORD PTR [ecx+0xfac]
c000c275:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c278:	29 f2                	sub    edx,esi
c000c27a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c27e:	c1 e1 04             	shl    ecx,0x4
c000c281:	8d 14 92             	lea    edx,[edx+edx*4]
c000c284:	01 d9                	add    ecx,ebx
c000c286:	c1 e2 04             	shl    edx,0x4
c000c289:	01 ca                	add    edx,ecx
c000c28b:	66 89 84 12 00 80 0b c2 	mov    WORD PTR [edx+edx*1-0x3df48000],ax
c000c293:	83 c4 14             	add    esp,0x14
c000c296:	5b                   	pop    ebx
c000c297:	5e                   	pop    esi
c000c298:	c3                   	ret    

c000c299 <setupTextMode()>:
c000c299:	c7 05 58 48 02 c0 6b c1 00 c0 	mov    DWORD PTR ds:0xc0024858,0xc000c16b
c000c2a3:	c7 05 44 48 02 c0 39 c0 00 c0 	mov    DWORD PTR ds:0xc0024844,0xc000c039
c000c2ad:	c7 05 40 48 02 c0 7e c0 00 c0 	mov    DWORD PTR ds:0xc0024840,0xc000c07e
c000c2b7:	c7 05 4c 48 02 c0 a7 c1 00 c0 	mov    DWORD PTR ds:0xc002484c,0xc000c1a7
c000c2c1:	c7 05 54 48 02 c0 c8 c0 00 c0 	mov    DWORD PTR ds:0xc0024854,0xc000c0c8
c000c2cb:	c7 05 48 48 02 c0 1c c1 00 c0 	mov    DWORD PTR ds:0xc0024848,0xc000c11c
c000c2d5:	c7 05 50 48 02 c0 1d c1 00 c0 	mov    DWORD PTR ds:0xc0024850,0xc000c11d
c000c2df:	c7 05 5c 48 02 c0 33 c2 00 c0 	mov    DWORD PTR ds:0xc002485c,0xc000c233
c000c2e9:	c3                   	ret    

c000c2ea <kernel_main>:
c000c2ea:	57                   	push   edi
c000c2eb:	bf f9 03 00 00       	mov    edi,0x3f9
c000c2f0:	56                   	push   esi
c000c2f1:	31 f6                	xor    esi,esi
c000c2f3:	53                   	push   ebx
c000c2f4:	83 ec 10             	sub    esp,0x10
c000c2f7:	e8 fe 08 00 00       	call   c000cbfa <installVgaTextImplementation()>
c000c2fc:	e8 98 ff ff ff       	call   c000c299 <setupTextMode()>
c000c301:	89 f0                	mov    eax,esi
c000c303:	89 fa                	mov    edx,edi
c000c305:	ee                   	out    dx,al
c000c306:	bb fb 03 00 00       	mov    ebx,0x3fb
c000c30b:	b0 80                	mov    al,0x80
c000c30d:	89 da                	mov    edx,ebx
c000c30f:	ee                   	out    dx,al
c000c310:	b1 03                	mov    cl,0x3
c000c312:	ba f8 03 00 00       	mov    edx,0x3f8
c000c317:	88 c8                	mov    al,cl
c000c319:	ee                   	out    dx,al
c000c31a:	89 f0                	mov    eax,esi
c000c31c:	89 fa                	mov    edx,edi
c000c31e:	ee                   	out    dx,al
c000c31f:	88 c8                	mov    al,cl
c000c321:	89 da                	mov    edx,ebx
c000c323:	ee                   	out    dx,al
c000c324:	b0 c7                	mov    al,0xc7
c000c326:	ba fa 03 00 00       	mov    edx,0x3fa
c000c32b:	ee                   	out    dx,al
c000c32c:	b0 0b                	mov    al,0xb
c000c32e:	ba fc 03 00 00       	mov    edx,0x3fc
c000c333:	ee                   	out    dx,al
c000c334:	a1 24 05 00 00       	mov    eax,ds:0x524
c000c339:	83 ec 0c             	sub    esp,0xc
c000c33c:	05 ff 0f 00 00       	add    eax,0xfff
c000c341:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c346:	50                   	push   eax
c000c347:	e8 6d 03 00 00       	call   c000c6b9 <Phys::physicalMemorySetup(unsigned int)>
c000c34c:	e8 b6 1f 00 00       	call   c000e307 <Virt::virtualMemorySetup()>
c000c351:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000c357:	83 c4 10             	add    esp,0x10
c000c35a:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000c360:	75 0e                	jne    c000c370 <kernel_main+0x86>
c000c362:	89 d8                	mov    eax,ebx
c000c364:	25 48 03 00 00       	and    eax,0x348
c000c369:	3d 00 03 00 00       	cmp    eax,0x300
c000c36e:	74 10                	je     c000c380 <kernel_main+0x96>
c000c370:	83 ec 0c             	sub    esp,0xc
c000c373:	68 c7 28 02 c0       	push   0xc00228c7
c000c378:	e8 c3 96 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c000c37d:	83 c4 10             	add    esp,0x10
c000c380:	83 ec 0c             	sub    esp,0xc
c000c383:	89 1d c0 47 02 c0    	mov    DWORD PTR ds:0xc00247c0,ebx
c000c389:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000c38d:	53                   	push   ebx
c000c38e:	e8 11 21 00 00       	call   c000e4a4 <VAS::VAS()>
c000c393:	89 1d 04 49 02 c0    	mov    DWORD PTR ds:0xc0024904,ebx
c000c399:	e8 82 3c ff ff       	call   c0000020 <callGlobalConstructors>
c000c39e:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000c3a5:	e8 32 2d 00 00       	call   c000f0dc <operator new(unsigned long)>
c000c3aa:	89 04 24             	mov    DWORD PTR [esp],eax
c000c3ad:	89 c6                	mov    esi,eax
c000c3af:	e8 78 ea ff ff       	call   c000ae2c <Computer::Computer()>
c000c3b4:	6a 00                	push   0x0
c000c3b6:	6a 00                	push   0x0
c000c3b8:	89 35 a8 47 02 c0    	mov    DWORD PTR ds:0xc00247a8,esi
c000c3be:	6a 00                	push   0x0
c000c3c0:	56                   	push   esi
c000c3c1:	e8 5a f2 ff ff       	call   c000b620 <Computer::open(int, int, void*)>
c000c3c6:	83 c4 14             	add    esp,0x14
c000c3c9:	53                   	push   ebx
c000c3ca:	e8 87 23 00 00       	call   c000e756 <VAS::~VAS()>
c000c3cf:	c7 04 24 20 13 02 c0 	mov    DWORD PTR [esp],0xc0021320
c000c3d6:	e8 65 96 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c000c3db:	83 c4 20             	add    esp,0x20
c000c3de:	5b                   	pop    ebx
c000c3df:	5e                   	pop    esi
c000c3e0:	5f                   	pop    edi
c000c3e1:	c3                   	ret    

c000c3e2 <Phys::allocateDMA(unsigned long)>:
c000c3e2:	57                   	push   edi
c000c3e3:	31 d2                	xor    edx,edx
c000c3e5:	56                   	push   esi
c000c3e6:	31 ff                	xor    edi,edi
c000c3e8:	53                   	push   ebx
c000c3e9:	31 c9                	xor    ecx,ecx
c000c3eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c3ef:	31 f6                	xor    esi,esi
c000c3f1:	05 ff 0f 00 00       	add    eax,0xfff
c000c3f6:	c1 e8 0c             	shr    eax,0xc
c000c3f9:	eb 17                	jmp    c000c412 <Phys::allocateDMA(unsigned long)+0x30>
c000c3fb:	85 c9                	test   ecx,ecx
c000c3fd:	75 04                	jne    c000c403 <Phys::allocateDMA(unsigned long)+0x21>
c000c3ff:	89 d7                	mov    edi,edx
c000c401:	89 d6                	mov    esi,edx
c000c403:	8d 59 01             	lea    ebx,[ecx+0x1]
c000c406:	39 d8                	cmp    eax,ebx
c000c408:	74 1f                	je     c000c429 <Phys::allocateDMA(unsigned long)+0x47>
c000c40a:	42                   	inc    edx
c000c40b:	89 d9                	mov    ecx,ebx
c000c40d:	83 fa 2f             	cmp    edx,0x2f
c000c410:	7f 11                	jg     c000c423 <Phys::allocateDMA(unsigned long)+0x41>
c000c412:	80 ba 00 48 02 c0 00 	cmp    BYTE PTR [edx-0x3ffdb800],0x0
c000c419:	74 e0                	je     c000c3fb <Phys::allocateDMA(unsigned long)+0x19>
c000c41b:	31 c9                	xor    ecx,ecx
c000c41d:	42                   	inc    edx
c000c41e:	83 fa 2f             	cmp    edx,0x2f
c000c421:	7e ef                	jle    c000c412 <Phys::allocateDMA(unsigned long)+0x30>
c000c423:	5b                   	pop    ebx
c000c424:	31 c0                	xor    eax,eax
c000c426:	5e                   	pop    esi
c000c427:	5f                   	pop    edi
c000c428:	c3                   	ret    
c000c429:	8d 54 06 ff          	lea    edx,[esi+eax*1-0x1]
c000c42d:	89 d3                	mov    ebx,edx
c000c42f:	c1 fb 1f             	sar    ebx,0x1f
c000c432:	83 e3 0f             	and    ebx,0xf
c000c435:	01 d3                	add    ebx,edx
c000c437:	89 f2                	mov    edx,esi
c000c439:	c1 fb 04             	sar    ebx,0x4
c000c43c:	c1 fa 04             	sar    edx,0x4
c000c43f:	39 da                	cmp    edx,ebx
c000c441:	75 30                	jne    c000c473 <Phys::allocateDMA(unsigned long)+0x91>
c000c443:	85 c0                	test   eax,eax
c000c445:	74 1b                	je     c000c462 <Phys::allocateDMA(unsigned long)+0x80>
c000c447:	bf 00 48 02 c0       	mov    edi,0xc0024800
c000c44c:	8d 96 00 48 02 c0    	lea    edx,[esi-0x3ffdb800]
c000c452:	83 f7 ff             	xor    edi,0xffffffff
c000c455:	29 f7                	sub    edi,esi
c000c457:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000c45a:	42                   	inc    edx
c000c45b:	8d 04 17             	lea    eax,[edi+edx*1]
c000c45e:	39 c1                	cmp    ecx,eax
c000c460:	7f f5                	jg     c000c457 <Phys::allocateDMA(unsigned long)+0x75>
c000c462:	85 db                	test   ebx,ebx
c000c464:	74 13                	je     c000c479 <Phys::allocateDMA(unsigned long)+0x97>
c000c466:	5b                   	pop    ebx
c000c467:	8d 86 50 20 0c 00    	lea    eax,[esi+0xc2050]
c000c46d:	c1 e0 0c             	shl    eax,0xc
c000c470:	5e                   	pop    esi
c000c471:	5f                   	pop    edi
c000c472:	c3                   	ret    
c000c473:	89 fa                	mov    edx,edi
c000c475:	31 c9                	xor    ecx,ecx
c000c477:	eb a4                	jmp    c000c41d <Phys::allocateDMA(unsigned long)+0x3b>
c000c479:	c1 e6 0c             	shl    esi,0xc
c000c47c:	5b                   	pop    ebx
c000c47d:	8d 86 00 00 01 c2    	lea    eax,[esi-0x3dff0000]
c000c483:	5e                   	pop    esi
c000c484:	5f                   	pop    edi
c000c485:	c3                   	ret    

c000c486 <Phys::freeDMA(unsigned long, unsigned long)>:
c000c486:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c48a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c48e:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000c494:	c1 e9 0c             	shr    ecx,0xc
c000c497:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000c49c:	76 25                	jbe    c000c4c3 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000c49e:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000c4a3:	c1 e8 0c             	shr    eax,0xc
c000c4a6:	8d 50 10             	lea    edx,[eax+0x10]
c000c4a9:	85 c9                	test   ecx,ecx
c000c4ab:	74 15                	je     c000c4c2 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000c4ad:	8d 82 00 48 02 c0    	lea    eax,[edx-0x3ffdb800]
c000c4b3:	8d 94 11 00 48 02 c0 	lea    edx,[ecx+edx*1-0x3ffdb800]
c000c4ba:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000c4bd:	40                   	inc    eax
c000c4be:	39 d0                	cmp    eax,edx
c000c4c0:	75 f8                	jne    c000c4ba <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000c4c2:	c3                   	ret    
c000c4c3:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000c4c9:	c1 ea 0c             	shr    edx,0xc
c000c4cc:	eb db                	jmp    c000c4a9 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000c4ce <Phys::setPageState(unsigned long, bool)>:
c000c4ce:	56                   	push   esi
c000c4cf:	ba 01 00 00 00       	mov    edx,0x1
c000c4d4:	53                   	push   ebx
c000c4d5:	8b 35 c4 3b 02 c0    	mov    esi,DWORD PTR ds:0xc0023bc4
c000c4db:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c4df:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c4e3:	89 c8                	mov    eax,ecx
c000c4e5:	83 e1 07             	and    ecx,0x7
c000c4e8:	c1 e8 03             	shr    eax,0x3
c000c4eb:	01 c6                	add    esi,eax
c000c4ed:	d3 e2                	shl    edx,cl
c000c4ef:	83 f2 ff             	xor    edx,0xffffffff
c000c4f2:	20 16                	and    BYTE PTR [esi],dl
c000c4f4:	8b 15 c4 3b 02 c0    	mov    edx,DWORD PTR ds:0xc0023bc4
c000c4fa:	01 d0                	add    eax,edx
c000c4fc:	d3 e3                	shl    ebx,cl
c000c4fe:	8a 08                	mov    cl,BYTE PTR [eax]
c000c500:	09 d9                	or     ecx,ebx
c000c502:	88 08                	mov    BYTE PTR [eax],cl
c000c504:	5b                   	pop    ebx
c000c505:	5e                   	pop    esi
c000c506:	c3                   	ret    

c000c507 <Phys::getPageState(unsigned long)>:
c000c507:	53                   	push   ebx
c000c508:	8b 15 c4 3b 02 c0    	mov    edx,DWORD PTR ds:0xc0023bc4
c000c50e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c512:	31 db                	xor    ebx,ebx
c000c514:	89 c8                	mov    eax,ecx
c000c516:	83 e1 07             	and    ecx,0x7
c000c519:	c1 e8 03             	shr    eax,0x3
c000c51c:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c000c51f:	89 d8                	mov    eax,ebx
c000c521:	5b                   	pop    ebx
c000c522:	d3 f8                	sar    eax,cl
c000c524:	83 e0 01             	and    eax,0x1
c000c527:	c3                   	ret    

c000c528 <Phys::freePage(unsigned long)>:
c000c528:	53                   	push   ebx
c000c529:	83 ec 08             	sub    esp,0x8
c000c52c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c530:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000c536:	76 5a                	jbe    c000c592 <Phys::freePage(unsigned long)+0x6a>
c000c538:	c1 eb 0c             	shr    ebx,0xc
c000c53b:	53                   	push   ebx
c000c53c:	e8 c6 ff ff ff       	call   c000c507 <Phys::getPageState(unsigned long)>
c000c541:	5a                   	pop    edx
c000c542:	84 c0                	test   al,al
c000c544:	74 5e                	je     c000c5a4 <Phys::freePage(unsigned long)+0x7c>
c000c546:	a1 ec 47 02 c0       	mov    eax,ds:0xc00247ec
c000c54b:	48                   	dec    eax
c000c54c:	a3 ec 47 02 c0       	mov    ds:0xc00247ec,eax
c000c551:	8d 04 80             	lea    eax,[eax+eax*4]
c000c554:	8d 04 80             	lea    eax,[eax+eax*4]
c000c557:	c1 e0 02             	shl    eax,0x2
c000c55a:	89 c2                	mov    edx,eax
c000c55c:	c1 fa 1f             	sar    edx,0x1f
c000c55f:	f7 3d f0 47 02 c0    	idiv   DWORD PTR ds:0xc00247f0
c000c565:	39 05 e8 47 02 c0    	cmp    DWORD PTR ds:0xc00247e8,eax
c000c56b:	75 12                	jne    c000c57f <Phys::freePage(unsigned long)+0x57>
c000c56d:	51                   	push   ecx
c000c56e:	51                   	push   ecx
c000c56f:	6a 00                	push   0x0
c000c571:	53                   	push   ebx
c000c572:	e8 57 ff ff ff       	call   c000c4ce <Phys::setPageState(unsigned long, bool)>
c000c577:	83 c4 10             	add    esp,0x10
c000c57a:	83 c4 08             	add    esp,0x8
c000c57d:	5b                   	pop    ebx
c000c57e:	c3                   	ret    
c000c57f:	83 ec 0c             	sub    esp,0xc
c000c582:	a3 e8 47 02 c0       	mov    ds:0xc00247e8,eax
c000c587:	50                   	push   eax
c000c588:	e8 01 0a 00 00       	call   c000cf8e <VgaText::updateRAMUsageDisplay(int)>
c000c58d:	83 c4 10             	add    esp,0x10
c000c590:	eb db                	jmp    c000c56d <Phys::freePage(unsigned long)+0x45>
c000c592:	68 00 10 00 00       	push   0x1000
c000c597:	53                   	push   ebx
c000c598:	e8 e9 fe ff ff       	call   c000c486 <Phys::freeDMA(unsigned long, unsigned long)>
c000c59d:	59                   	pop    ecx
c000c59e:	5b                   	pop    ebx
c000c59f:	83 c4 08             	add    esp,0x8
c000c5a2:	5b                   	pop    ebx
c000c5a3:	c3                   	ret    
c000c5a4:	c7 44 24 10 3b 13 02 c0 	mov    DWORD PTR [esp+0x10],0xc002133b
c000c5ac:	83 c4 08             	add    esp,0x8
c000c5af:	5b                   	pop    ebx
c000c5b0:	e9 8b 94 00 00       	jmp    c0015a40 <Krnl::panic(char const*)>

c000c5b5 <Phys::allocatePage()>:
c000c5b5:	56                   	push   esi
c000c5b6:	53                   	push   ebx
c000c5b7:	51                   	push   ecx
c000c5b8:	8b 35 e0 47 02 c0    	mov    esi,DWORD PTR ds:0xc00247e0
c000c5be:	89 f3                	mov    ebx,esi
c000c5c0:	eb 0a                	jmp    c000c5cc <Phys::allocatePage()+0x17>
c000c5c2:	89 1d e0 47 02 c0    	mov    DWORD PTR ds:0xc00247e0,ebx
c000c5c8:	39 de                	cmp    esi,ebx
c000c5ca:	74 24                	je     c000c5f0 <Phys::allocatePage()+0x3b>
c000c5cc:	53                   	push   ebx
c000c5cd:	e8 35 ff ff ff       	call   c000c507 <Phys::getPageState(unsigned long)>
c000c5d2:	5a                   	pop    edx
c000c5d3:	84 c0                	test   al,al
c000c5d5:	74 5a                	je     c000c631 <Phys::allocatePage()+0x7c>
c000c5d7:	43                   	inc    ebx
c000c5d8:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c5de:	75 e2                	jne    c000c5c2 <Phys::allocatePage()+0xd>
c000c5e0:	31 db                	xor    ebx,ebx
c000c5e2:	c7 05 e0 47 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00247e0,0x0
c000c5ec:	39 de                	cmp    esi,ebx
c000c5ee:	75 dc                	jne    c000c5cc <Phys::allocatePage()+0x17>
c000c5f0:	83 ec 0c             	sub    esp,0xc
c000c5f3:	68 51 13 02 c0       	push   0xc0021351
c000c5f8:	e8 14 2c 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000c5fd:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000c604:	e8 d9 fd ff ff       	call   c000c3e2 <Phys::allocateDMA(unsigned long)>
c000c609:	83 c4 10             	add    esp,0x10
c000c60c:	85 c0                	test   eax,eax
c000c60e:	75 5a                	jne    c000c66a <Phys::allocatePage()+0xb5>
c000c610:	83 ec 0c             	sub    esp,0xc
c000c613:	68 62 13 02 c0       	push   0xc0021362
c000c618:	e8 23 94 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c000c61d:	83 c4 10             	add    esp,0x10
c000c620:	8b 1d e0 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247e0
c000c626:	53                   	push   ebx
c000c627:	e8 db fe ff ff       	call   c000c507 <Phys::getPageState(unsigned long)>
c000c62c:	5a                   	pop    edx
c000c62d:	84 c0                	test   al,al
c000c62f:	75 a6                	jne    c000c5d7 <Phys::allocatePage()+0x22>
c000c631:	6a 01                	push   0x1
c000c633:	53                   	push   ebx
c000c634:	e8 95 fe ff ff       	call   c000c4ce <Phys::setPageState(unsigned long, bool)>
c000c639:	a1 ec 47 02 c0       	mov    eax,ds:0xc00247ec
c000c63e:	59                   	pop    ecx
c000c63f:	40                   	inc    eax
c000c640:	5b                   	pop    ebx
c000c641:	a3 ec 47 02 c0       	mov    ds:0xc00247ec,eax
c000c646:	8d 04 80             	lea    eax,[eax+eax*4]
c000c649:	8d 04 80             	lea    eax,[eax+eax*4]
c000c64c:	c1 e0 02             	shl    eax,0x2
c000c64f:	89 c2                	mov    edx,eax
c000c651:	c1 fa 1f             	sar    edx,0x1f
c000c654:	f7 3d f0 47 02 c0    	idiv   DWORD PTR ds:0xc00247f0
c000c65a:	39 05 e8 47 02 c0    	cmp    DWORD PTR ds:0xc00247e8,eax
c000c660:	75 0c                	jne    c000c66e <Phys::allocatePage()+0xb9>
c000c662:	a1 e0 47 02 c0       	mov    eax,ds:0xc00247e0
c000c667:	c1 e0 0c             	shl    eax,0xc
c000c66a:	5a                   	pop    edx
c000c66b:	5b                   	pop    ebx
c000c66c:	5e                   	pop    esi
c000c66d:	c3                   	ret    
c000c66e:	83 ec 0c             	sub    esp,0xc
c000c671:	a3 e8 47 02 c0       	mov    ds:0xc00247e8,eax
c000c676:	50                   	push   eax
c000c677:	e8 12 09 00 00       	call   c000cf8e <VgaText::updateRAMUsageDisplay(int)>
c000c67c:	83 c4 10             	add    esp,0x10
c000c67f:	eb e1                	jmp    c000c662 <Phys::allocatePage()+0xad>

c000c681 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000c681:	56                   	push   esi
c000c682:	53                   	push   ebx
c000c683:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c687:	39 1d e4 47 02 c0    	cmp    DWORD PTR ds:0xc00247e4,ebx
c000c68d:	73 06                	jae    c000c695 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000c68f:	89 1d e4 47 02 c0    	mov    DWORD PTR ds:0xc00247e4,ebx
c000c695:	c1 eb 0c             	shr    ebx,0xc
c000c698:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c69c:	c1 e8 0c             	shr    eax,0xc
c000c69f:	39 d8                	cmp    eax,ebx
c000c6a1:	73 13                	jae    c000c6b6 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000c6a3:	6a 00                	push   0x0
c000c6a5:	8d 70 01             	lea    esi,[eax+0x1]
c000c6a8:	50                   	push   eax
c000c6a9:	e8 20 fe ff ff       	call   c000c4ce <Phys::setPageState(unsigned long, bool)>
c000c6ae:	5a                   	pop    edx
c000c6af:	89 f0                	mov    eax,esi
c000c6b1:	59                   	pop    ecx
c000c6b2:	39 f3                	cmp    ebx,esi
c000c6b4:	75 ed                	jne    c000c6a3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000c6b6:	5b                   	pop    ebx
c000c6b7:	5e                   	pop    esi
c000c6b8:	c3                   	ret    

c000c6b9 <Phys::physicalMemorySetup(unsigned int)>:
c000c6b9:	55                   	push   ebp
c000c6ba:	57                   	push   edi
c000c6bb:	56                   	push   esi
c000c6bc:	53                   	push   ebx
c000c6bd:	31 db                	xor    ebx,ebx
c000c6bf:	83 ec 40             	sub    esp,0x40
c000c6c2:	6a 30                	push   0x30
c000c6c4:	6a 00                	push   0x0
c000c6c6:	68 00 48 02 c0       	push   0xc0024800
c000c6cb:	e8 f1 3f ff ff       	call   c00006c1 <memset>
c000c6d0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c6d4:	25 00 f0 ff ff       	and    eax,0xfffff000
c000c6d9:	05 00 10 00 00       	add    eax,0x1000
c000c6de:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c6e2:	83 c4 10             	add    esp,0x10
c000c6e5:	56                   	push   esi
c000c6e6:	56                   	push   esi
c000c6e7:	6a 01                	push   0x1
c000c6e9:	53                   	push   ebx
c000c6ea:	43                   	inc    ebx
c000c6eb:	e8 de fd ff ff       	call   c000c4ce <Phys::setPageState(unsigned long, bool)>
c000c6f0:	83 c4 10             	add    esp,0x10
c000c6f3:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000c6f9:	75 ea                	jne    c000c6e5 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c000c6fb:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c000c701:	66 85 c0             	test   ax,ax
c000c704:	0f 84 3b 01 00 00    	je     c000c845 <Phys::physicalMemorySetup(unsigned int)+0x18c>
c000c70a:	89 c7                	mov    edi,eax
c000c70c:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000c714:	81 e7 ff ff 00 00    	and    edi,0xffff
c000c71a:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000c71f:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000c723:	eb 6d                	jmp    c000c792 <Phys::physicalMemorySetup(unsigned int)+0xd9>
c000c725:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000c729:	89 c1                	mov    ecx,eax
c000c72b:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000c72f:	0f 83 bc 00 00 00    	jae    c000c7f1 <Phys::physicalMemorySetup(unsigned int)+0x138>
c000c735:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c739:	ba 00 00 0a 00       	mov    edx,0xa0000
c000c73e:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c742:	39 f2                	cmp    edx,esi
c000c744:	19 f8                	sbb    eax,edi
c000c746:	73 07                	jae    c000c74f <Phys::physicalMemorySetup(unsigned int)+0x96>
c000c748:	be 00 00 0a 00       	mov    esi,0xa0000
c000c74d:	31 ff                	xor    edi,edi
c000c74f:	89 f2                	mov    edx,esi
c000c751:	b8 ff 1f 00 00       	mov    eax,0x1fff
c000c756:	81 c2 00 00 f8 ff    	add    edx,0xfff80000
c000c75c:	89 f9                	mov    ecx,edi
c000c75e:	83 d1 ff             	adc    ecx,0xffffffff
c000c761:	39 d0                	cmp    eax,edx
c000c763:	b8 00 00 00 00       	mov    eax,0x0
c000c768:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c76c:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c000c770:	19 c8                	sbb    eax,ecx
c000c772:	0f 82 0d 01 00 00    	jb     c000c885 <Phys::physicalMemorySetup(unsigned int)+0x1cc>
c000c778:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c77c:	83 c3 18             	add    ebx,0x18
c000c77f:	41                   	inc    ecx
c000c780:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000c784:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c788:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000c78c:	0f 84 c3 00 00 00    	je     c000c855 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c792:	8b 33                	mov    esi,DWORD PTR [ebx]
c000c794:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000c797:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000c79a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c79e:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000c7a1:	01 f0                	add    eax,esi
c000c7a3:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7a6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c7aa:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c7ae:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000c7b2:	11 fa                	adc    edx,edi
c000c7b4:	55                   	push   ebp
c000c7b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c7b9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000c7bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c7c1:	51                   	push   ecx
c000c7c2:	56                   	push   esi
c000c7c3:	68 9c 13 02 c0       	push   0xc002139c
c000c7c8:	e8 44 2a 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000c7cd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c7d1:	83 c4 10             	add    esp,0x10
c000c7d4:	09 f8                	or     eax,edi
c000c7d6:	75 7d                	jne    c000c855 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c000c7d8:	83 fd 01             	cmp    ebp,0x1
c000c7db:	75 11                	jne    c000c7ee <Phys::physicalMemorySetup(unsigned int)+0x135>
c000c7dd:	ba 00 00 08 00       	mov    edx,0x80000
c000c7e2:	89 c1                	mov    ecx,eax
c000c7e4:	39 f2                	cmp    edx,esi
c000c7e6:	19 f9                	sbb    ecx,edi
c000c7e8:	0f 83 37 ff ff ff    	jae    c000c725 <Phys::physicalMemorySetup(unsigned int)+0x6c>
c000c7ee:	4d                   	dec    ebp
c000c7ef:	75 87                	jne    c000c778 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c7f1:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c7f5:	31 d2                	xor    edx,edx
c000c7f7:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c000c7fb:	89 c8                	mov    eax,ecx
c000c7fd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c801:	19 d1                	sbb    ecx,edx
c000c803:	0f 82 6f ff ff ff    	jb     c000c778 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c809:	b9 ff 1f 00 00       	mov    ecx,0x1fff
c000c80e:	3b 4c 24 18          	cmp    ecx,DWORD PTR [esp+0x18]
c000c812:	b9 00 00 00 00       	mov    ecx,0x0
c000c817:	1b 4c 24 1c          	sbb    ecx,DWORD PTR [esp+0x1c]
c000c81b:	0f 83 57 ff ff ff    	jae    c000c778 <Phys::physicalMemorySetup(unsigned int)+0xbf>
c000c821:	39 c6                	cmp    esi,eax
c000c823:	19 d7                	sbb    edi,edx
c000c825:	73 6a                	jae    c000c891 <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c827:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c82b:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000c82f:	29 c7                	sub    edi,eax
c000c831:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c835:	19 d5                	sbb    ebp,edx
c000c837:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000c83b:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000c83f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c843:	eb 4c                	jmp    c000c891 <Phys::physicalMemorySetup(unsigned int)+0x1d8>
c000c845:	83 ec 0c             	sub    esp,0xc
c000c848:	68 70 13 02 c0       	push   0xc0021370
c000c84d:	e8 ee 91 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c000c852:	83 c4 10             	add    esp,0x10
c000c855:	bb 40 01 00 00       	mov    ebx,0x140
c000c85a:	50                   	push   eax
c000c85b:	50                   	push   eax
c000c85c:	6a 00                	push   0x0
c000c85e:	53                   	push   ebx
c000c85f:	e8 6a fc ff ff       	call   c000c4ce <Phys::setPageState(unsigned long, bool)>
c000c864:	8b 15 f0 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247f0
c000c86a:	43                   	inc    ebx
c000c86b:	42                   	inc    edx
c000c86c:	83 c4 10             	add    esp,0x10
c000c86f:	89 15 f0 47 02 c0    	mov    DWORD PTR ds:0xc00247f0,edx
c000c875:	81 fb 80 01 00 00    	cmp    ebx,0x180
c000c87b:	75 dd                	jne    c000c85a <Phys::physicalMemorySetup(unsigned int)+0x1a1>
c000c87d:	83 c4 3c             	add    esp,0x3c
c000c880:	5b                   	pop    ebx
c000c881:	5e                   	pop    esi
c000c882:	5f                   	pop    edi
c000c883:	5d                   	pop    ebp
c000c884:	c3                   	ret    
c000c885:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c000c889:	c7 44 24 20 00 00 08 00 	mov    DWORD PTR [esp+0x20],0x80000
c000c891:	56                   	push   esi
c000c892:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000c896:	56                   	push   esi
c000c897:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000c89b:	57                   	push   edi
c000c89c:	68 c0 13 02 c0       	push   0xc00213c0
c000c8a1:	e8 6b 29 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000c8a6:	5d                   	pop    ebp
c000c8a7:	58                   	pop    eax
c000c8a8:	56                   	push   esi
c000c8a9:	57                   	push   edi
c000c8aa:	e8 d2 fd ff ff       	call   c000c681 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000c8af:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c8b3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c8b7:	0f ac d0 0c          	shrd   eax,edx,0xc
c000c8bb:	8b 15 f0 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247f0
c000c8c1:	83 c4 0c             	add    esp,0xc
c000c8c4:	01 d0                	add    eax,edx
c000c8c6:	a3 f0 47 02 c0       	mov    ds:0xc00247f0,eax
c000c8cb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000c8d2:	52                   	push   edx
c000c8d3:	50                   	push   eax
c000c8d4:	68 7e 13 02 c0       	push   0xc002137e
c000c8d9:	e8 33 29 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000c8de:	83 c4 10             	add    esp,0x10
c000c8e1:	e9 92 fe ff ff       	jmp    c000c778 <Phys::physicalMemorySetup(unsigned int)+0xbf>

c000c8e6 <Pipe::isAtty()>:
c000c8e6:	31 c0                	xor    eax,eax
c000c8e8:	c3                   	ret    
c000c8e9:	90                   	nop

c000c8ea <Pipe::~Pipe()>:
c000c8ea:	83 ec 0c             	sub    esp,0xc
c000c8ed:	ba 2c 14 02 c0       	mov    edx,0xc002142c
c000c8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8f6:	89 10                	mov    DWORD PTR [eax],edx
c000c8f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8fc:	83 ec 0c             	sub    esp,0xc
c000c8ff:	50                   	push   eax
c000c900:	e8 5d 16 00 00       	call   c000df62 <UnixFile::~UnixFile()>
c000c905:	83 c4 10             	add    esp,0x10
c000c908:	90                   	nop
c000c909:	83 c4 0c             	add    esp,0xc
c000c90c:	c3                   	ret    
c000c90d:	90                   	nop

c000c90e <Pipe::~Pipe()>:
c000c90e:	83 ec 0c             	sub    esp,0xc
c000c911:	83 ec 0c             	sub    esp,0xc
c000c914:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c918:	e8 cd ff ff ff       	call   c000c8ea <Pipe::~Pipe()>
c000c91d:	83 c4 10             	add    esp,0x10
c000c920:	83 ec 08             	sub    esp,0x8
c000c923:	6a 20                	push   0x20
c000c925:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c929:	e8 bd 27 00 00       	call   c000f0eb <operator delete(void*, unsigned long)>
c000c92e:	83 c4 10             	add    esp,0x10
c000c931:	83 c4 0c             	add    esp,0xc
c000c934:	c3                   	ret    
c000c935:	90                   	nop

c000c936 <Pipe::read(unsigned long long, void*, int*)>:
c000c936:	55                   	push   ebp
c000c937:	57                   	push   edi
c000c938:	56                   	push   esi
c000c939:	53                   	push   ebx
c000c93a:	83 ec 1c             	sub    esp,0x1c
c000c93d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000c941:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c945:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000c949:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000c94c:	89 c8                	mov    eax,ecx
c000c94e:	99                   	cdq    
c000c94f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000c953:	74 19                	je     c000c96e <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c955:	39 f9                	cmp    ecx,edi
c000c957:	89 d1                	mov    ecx,edx
c000c959:	19 f1                	sbb    ecx,esi
c000c95b:	73 11                	jae    c000c96e <Pipe::read(unsigned long long, void*, int*)+0x38>
c000c95d:	e8 e7 c0 00 00       	call   c0018a49 <lockScheduler()>
c000c962:	e8 2b c4 00 00       	call   c0018d92 <schedule()>
c000c967:	e8 df c0 00 00       	call   c0018a4b <unlockScheduler()>
c000c96c:	eb db                	jmp    c000c949 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000c96e:	39 f8                	cmp    eax,edi
c000c970:	89 d1                	mov    ecx,edx
c000c972:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000c976:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c000c97a:	19 f1                	sbb    ecx,esi
c000c97c:	73 08                	jae    c000c986 <Pipe::read(unsigned long long, void*, int*)+0x50>
c000c97e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c982:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c986:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c989:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c98c:	29 c6                	sub    esi,eax
c000c98e:	89 f1                	mov    ecx,esi
c000c990:	c1 f9 1f             	sar    ecx,0x1f
c000c993:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c000c997:	89 ca                	mov    edx,ecx
c000c999:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c99d:	19 d1                	sbb    ecx,edx
c000c99f:	73 04                	jae    c000c9a5 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c000c9a1:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000c9a5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000c9a9:	89 fd                	mov    ebp,edi
c000c9ab:	29 f5                	sub    ebp,esi
c000c9ad:	85 f6                	test   esi,esi
c000c9af:	74 12                	je     c000c9c3 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c000c9b1:	52                   	push   edx
c000c9b2:	56                   	push   esi
c000c9b3:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c000c9b6:	50                   	push   eax
c000c9b7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000c9bb:	e8 cb 3c ff ff       	call   c000068b <memcpy>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	85 ed                	test   ebp,ebp
c000c9c5:	74 12                	je     c000c9d9 <Pipe::read(unsigned long long, void*, int*)+0xa3>
c000c9c7:	50                   	push   eax
c000c9c8:	55                   	push   ebp
c000c9c9:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000c9cc:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c000c9d0:	56                   	push   esi
c000c9d1:	e8 b5 3c ff ff       	call   c000068b <memcpy>
c000c9d6:	83 c4 10             	add    esp,0x10
c000c9d9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c9dc:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c000c9df:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000c9e2:	99                   	cdq    
c000c9e3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000c9e7:	89 f7                	mov    edi,esi
c000c9e9:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000c9ed:	c1 ff 1f             	sar    edi,0x1f
c000c9f0:	57                   	push   edi
c000c9f1:	56                   	push   esi
c000c9f2:	52                   	push   edx
c000c9f3:	50                   	push   eax
c000c9f4:	e8 13 2c 01 00       	call   c001f60c <__umoddi3>
c000c9f9:	83 c4 10             	add    esp,0x10
c000c9fc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c9ff:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000ca04:	75 10                	jne    c000ca16 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c000ca06:	83 ec 0c             	sub    esp,0xc
c000ca09:	68 e9 13 02 c0       	push   0xc00213e9
c000ca0e:	e8 2d 90 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c000ca13:	83 c4 10             	add    esp,0x10
c000ca16:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ca1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ca1e:	89 10                	mov    DWORD PTR [eax],edx
c000ca20:	83 c4 1c             	add    esp,0x1c
c000ca23:	31 c0                	xor    eax,eax
c000ca25:	5b                   	pop    ebx
c000ca26:	5e                   	pop    esi
c000ca27:	5f                   	pop    edi
c000ca28:	5d                   	pop    ebp
c000ca29:	c3                   	ret    

c000ca2a <Pipe::write(unsigned long long, void*, int*)>:
c000ca2a:	55                   	push   ebp
c000ca2b:	57                   	push   edi
c000ca2c:	56                   	push   esi
c000ca2d:	53                   	push   ebx
c000ca2e:	83 ec 1c             	sub    esp,0x1c
c000ca31:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ca35:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ca39:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000ca3d:	89 04 24             	mov    DWORD PTR [esp],eax
c000ca40:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c000ca43:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c000ca46:	89 de                	mov    esi,ebx
c000ca48:	89 df                	mov    edi,ebx
c000ca4a:	c1 ff 1f             	sar    edi,0x1f
c000ca4d:	01 c6                	add    esi,eax
c000ca4f:	89 c8                	mov    eax,ecx
c000ca51:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ca55:	11 d7                	adc    edi,edx
c000ca57:	99                   	cdq    
c000ca58:	89 d0                	mov    eax,edx
c000ca5a:	39 f1                	cmp    ecx,esi
c000ca5c:	19 f8                	sbb    eax,edi
c000ca5e:	b8 01 00 00 00       	mov    eax,0x1
c000ca63:	0f 82 80 00 00 00    	jb     c000cae9 <Pipe::write(unsigned long long, void*, int*)+0xbf>
c000ca69:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000ca6c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000ca6f:	01 d8                	add    eax,ebx
c000ca71:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c000ca75:	99                   	cdq    
c000ca76:	f7 f9                	idiv   ecx
c000ca78:	29 d1                	sub    ecx,edx
c000ca7a:	89 d7                	mov    edi,edx
c000ca7c:	89 c8                	mov    eax,ecx
c000ca7e:	99                   	cdq    
c000ca7f:	39 ce                	cmp    esi,ecx
c000ca81:	19 d3                	sbb    ebx,edx
c000ca83:	bb 00 00 00 00       	mov    ebx,0x0
c000ca88:	72 04                	jb     c000ca8e <Pipe::write(unsigned long long, void*, int*)+0x64>
c000ca8a:	89 f3                	mov    ebx,esi
c000ca8c:	29 cb                	sub    ebx,ecx
c000ca8e:	89 f1                	mov    ecx,esi
c000ca90:	29 d9                	sub    ecx,ebx
c000ca92:	74 1a                	je     c000caae <Pipe::write(unsigned long long, void*, int*)+0x84>
c000ca94:	52                   	push   edx
c000ca95:	51                   	push   ecx
c000ca96:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ca9a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ca9e:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000caa1:	57                   	push   edi
c000caa2:	e8 e4 3b ff ff       	call   c000068b <memcpy>
c000caa7:	83 c4 10             	add    esp,0x10
c000caaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000caae:	85 db                	test   ebx,ebx
c000cab0:	74 12                	je     c000cac4 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c000cab2:	50                   	push   eax
c000cab3:	53                   	push   ebx
c000cab4:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c000cab8:	51                   	push   ecx
c000cab9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000cabc:	e8 ca 3b ff ff       	call   c000068b <memcpy>
c000cac1:	83 c4 10             	add    esp,0x10
c000cac4:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c000cac7:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000cacc:	75 10                	jne    c000cade <Pipe::write(unsigned long long, void*, int*)+0xb4>
c000cace:	83 ec 0c             	sub    esp,0xc
c000cad1:	68 05 14 02 c0       	push   0xc0021405
c000cad6:	e8 65 8f 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c000cadb:	83 c4 10             	add    esp,0x10
c000cade:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000cae2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000cae5:	89 38                	mov    DWORD PTR [eax],edi
c000cae7:	31 c0                	xor    eax,eax
c000cae9:	83 c4 1c             	add    esp,0x1c
c000caec:	5b                   	pop    ebx
c000caed:	5e                   	pop    esi
c000caee:	5f                   	pop    edi
c000caef:	5d                   	pop    ebp
c000caf0:	c3                   	ret    
c000caf1:	90                   	nop

c000caf2 <Pipe::Pipe(int)>:
c000caf2:	83 ec 0c             	sub    esp,0xc
c000caf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000caf9:	83 ec 08             	sub    esp,0x8
c000cafc:	6a 00                	push   0x0
c000cafe:	50                   	push   eax
c000caff:	e8 bc 12 00 00       	call   c000ddc0 <UnixFile::UnixFile(int)>
c000cb04:	83 c4 10             	add    esp,0x10
c000cb07:	ba 2c 14 02 c0       	mov    edx,0xc002142c
c000cb0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb10:	89 10                	mov    DWORD PTR [eax],edx
c000cb12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb16:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000cb1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb21:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000cb28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb2c:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000cb33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cb37:	83 ec 0c             	sub    esp,0xc
c000cb3a:	50                   	push   eax
c000cb3b:	e8 9f f4 ff ff       	call   c000bfdf <malloc>
c000cb40:	83 c4 10             	add    esp,0x10
c000cb43:	89 c2                	mov    edx,eax
c000cb45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb49:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000cb4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb50:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000cb54:	90                   	nop
c000cb55:	83 c4 0c             	add    esp,0xc
c000cb58:	c3                   	ret    
c000cb59:	90                   	nop

c000cb5a <VgaText::isAtty()>:
c000cb5a:	b0 01                	mov    al,0x1
c000cb5c:	c3                   	ret    
c000cb5d:	90                   	nop

c000cb5e <VgaText::~VgaText()>:
c000cb5e:	83 ec 0c             	sub    esp,0xc
c000cb61:	ba e8 14 02 c0       	mov    edx,0xc00214e8
c000cb66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb6a:	89 10                	mov    DWORD PTR [eax],edx
c000cb6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb70:	83 ec 0c             	sub    esp,0xc
c000cb73:	50                   	push   eax
c000cb74:	e8 e9 13 00 00       	call   c000df62 <UnixFile::~UnixFile()>
c000cb79:	83 c4 10             	add    esp,0x10
c000cb7c:	90                   	nop
c000cb7d:	83 c4 0c             	add    esp,0xc
c000cb80:	c3                   	ret    
c000cb81:	90                   	nop

c000cb82 <VgaText::~VgaText()>:
c000cb82:	83 ec 0c             	sub    esp,0xc
c000cb85:	83 ec 0c             	sub    esp,0xc
c000cb88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb8c:	e8 cd ff ff ff       	call   c000cb5e <VgaText::~VgaText()>
c000cb91:	83 c4 10             	add    esp,0x10
c000cb94:	83 ec 08             	sub    esp,0x8
c000cb97:	68 60 12 00 00       	push   0x1260
c000cb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cba0:	e8 46 25 00 00       	call   c000f0eb <operator delete(void*, unsigned long)>
c000cba5:	83 c4 10             	add    esp,0x10
c000cba8:	83 c4 0c             	add    esp,0xc
c000cbab:	c3                   	ret    

c000cbac <VgaText::read(unsigned long long, void*, int*)>:
c000cbac:	83 ec 10             	sub    esp,0x10
c000cbaf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cbb3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cbb7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cbbb:	e8 69 58 00 00       	call   c0012429 <readKeyboard(VgaText*, char*, unsigned long)>
c000cbc0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000cbc4:	89 02                	mov    DWORD PTR [edx],eax
c000cbc6:	31 c0                	xor    eax,eax
c000cbc8:	83 c4 1c             	add    esp,0x1c
c000cbcb:	c3                   	ret    

c000cbcc <setTerminalScrollLock(bool)>:
c000cbcc:	c3                   	ret    

c000cbcd <addToTerminalCycle(VgaText*)>:
c000cbcd:	8b 15 60 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024860
c000cbd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cbd7:	85 d2                	test   edx,edx
c000cbd9:	75 0c                	jne    c000cbe7 <addToTerminalCycle(VgaText*)+0x1a>
c000cbdb:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c000cbe1:	a3 60 48 02 c0       	mov    ds:0xc0024860,eax
c000cbe6:	c3                   	ret    
c000cbe7:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c000cbed:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c000cbf3:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c000cbf9:	c3                   	ret    

c000cbfa <installVgaTextImplementation()>:
c000cbfa:	83 ec 10             	sub    esp,0x10
c000cbfd:	6a 20                	push   0x20
c000cbff:	6a 00                	push   0x0
c000cc01:	68 40 48 02 c0       	push   0xc0024840
c000cc06:	e8 b6 3a ff ff       	call   c00006c1 <memset>
c000cc0b:	83 c4 1c             	add    esp,0x1c
c000cc0e:	c3                   	ret    

c000cc0f <scrollTerminalScrollLock(int)>:
c000cc0f:	c3                   	ret    

c000cc10 <VgaText::load()>:
c000cc10:	53                   	push   ebx
c000cc11:	31 c0                	xor    eax,eax
c000cc13:	83 ec 58             	sub    esp,0x58
c000cc16:	89 e2                	mov    edx,esp
c000cc18:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000cc1c:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c000cc20:	40                   	inc    eax
c000cc21:	83 f8 50             	cmp    eax,0x50
c000cc24:	75 f6                	jne    c000cc1c <VgaText::load()+0xc>
c000cc26:	31 c0                	xor    eax,eax
c000cc28:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c000cc2f:	84 c9                	test   cl,cl
c000cc31:	74 06                	je     c000cc39 <VgaText::load()+0x29>
c000cc33:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000cc36:	40                   	inc    eax
c000cc37:	eb ef                	jmp    c000cc28 <VgaText::load()+0x18>
c000cc39:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c000cc3f:	85 c0                	test   eax,eax
c000cc41:	74 09                	je     c000cc4c <VgaText::load()+0x3c>
c000cc43:	51                   	push   ecx
c000cc44:	51                   	push   ecx
c000cc45:	52                   	push   edx
c000cc46:	53                   	push   ebx
c000cc47:	ff d0                	call   eax
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c000cc52:	85 c0                	test   eax,eax
c000cc54:	74 09                	je     c000cc5f <VgaText::load()+0x4f>
c000cc56:	83 ec 0c             	sub    esp,0xc
c000cc59:	53                   	push   ebx
c000cc5a:	ff d0                	call   eax
c000cc5c:	83 c4 10             	add    esp,0x10
c000cc5f:	83 c4 58             	add    esp,0x58
c000cc62:	5b                   	pop    ebx
c000cc63:	c3                   	ret    

c000cc64 <VgaText::updateCursor()>:
c000cc64:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc68:	39 05 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,eax
c000cc6e:	75 0c                	jne    c000cc7c <VgaText::updateCursor()+0x18>
c000cc70:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c000cc76:	85 c0                	test   eax,eax
c000cc78:	74 02                	je     c000cc7c <VgaText::updateCursor()+0x18>
c000cc7a:	ff e0                	jmp    eax
c000cc7c:	c3                   	ret    
c000cc7d:	90                   	nop

c000cc7e <VgaText::showCursor(bool)>:
c000cc7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cc82:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cc86:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c000cc8c:	c3                   	ret    
c000cc8d:	90                   	nop

c000cc8e <VgaText::disableBlink(bool)>:
c000cc8e:	56                   	push   esi
c000cc8f:	53                   	push   ebx
c000cc90:	51                   	push   ecx
c000cc91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cc95:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cc99:	39 1d 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,ebx
c000cc9f:	75 18                	jne    c000ccb9 <VgaText::disableBlink(bool)+0x2b>
c000cca1:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c000cca7:	85 c0                	test   eax,eax
c000cca9:	74 0e                	je     c000ccb9 <VgaText::disableBlink(bool)+0x2b>
c000ccab:	89 f1                	mov    ecx,esi
c000ccad:	52                   	push   edx
c000ccae:	52                   	push   edx
c000ccaf:	0f b6 d1             	movzx  edx,cl
c000ccb2:	52                   	push   edx
c000ccb3:	53                   	push   ebx
c000ccb4:	ff d0                	call   eax
c000ccb6:	83 c4 10             	add    esp,0x10
c000ccb9:	89 f0                	mov    eax,esi
c000ccbb:	83 f0 01             	xor    eax,0x1
c000ccbe:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c000ccc4:	58                   	pop    eax
c000ccc5:	5b                   	pop    ebx
c000ccc6:	5e                   	pop    esi
c000ccc7:	c3                   	ret    

c000ccc8 <VgaText::doANSI_SGR(int)>:
c000ccc8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cccc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ccd0:	85 d2                	test   edx,edx
c000ccd2:	75 14                	jne    c000cce8 <VgaText::doANSI_SGR(int)+0x20>
c000ccd4:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c000ccda:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cce0:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c000cce6:	eb 65                	jmp    c000cd4d <VgaText::doANSI_SGR(int)+0x85>
c000cce8:	83 fa 07             	cmp    edx,0x7
c000cceb:	75 14                	jne    c000cd01 <VgaText::doANSI_SGR(int)+0x39>
c000cced:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c000ccf3:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c000ccf9:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c000ccff:	eb 4c                	jmp    c000cd4d <VgaText::doANSI_SGR(int)+0x85>
c000cd01:	83 fa 1b             	cmp    edx,0x1b
c000cd04:	74 ce                	je     c000ccd4 <VgaText::doANSI_SGR(int)+0xc>
c000cd06:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000cd09:	83 f9 07             	cmp    ecx,0x7
c000cd0c:	77 09                	ja     c000cd17 <VgaText::doANSI_SGR(int)+0x4f>
c000cd0e:	8b 14 8d 00 3c 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc400]
c000cd15:	eb 20                	jmp    c000cd37 <VgaText::doANSI_SGR(int)+0x6f>
c000cd17:	8d 4a d8             	lea    ecx,[edx-0x28]
c000cd1a:	83 f9 07             	cmp    ecx,0x7
c000cd1d:	77 09                	ja     c000cd28 <VgaText::doANSI_SGR(int)+0x60>
c000cd1f:	8b 14 8d 00 3c 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdc400]
c000cd26:	eb 25                	jmp    c000cd4d <VgaText::doANSI_SGR(int)+0x85>
c000cd28:	8d 4a a6             	lea    ecx,[edx-0x5a]
c000cd2b:	83 f9 07             	cmp    ecx,0x7
c000cd2e:	77 0e                	ja     c000cd3e <VgaText::doANSI_SGR(int)+0x76>
c000cd30:	8b 14 95 b8 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc548]
c000cd37:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd3d:	c3                   	ret    
c000cd3e:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000cd41:	83 f9 07             	cmp    ecx,0x7
c000cd44:	77 0d                	ja     c000cd53 <VgaText::doANSI_SGR(int)+0x8b>
c000cd46:	8b 14 95 90 3a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdc570]
c000cd4d:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd53:	c3                   	ret    

c000cd54 <VgaText::setDefaultBgColour(VgaColour)>:
c000cd54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd5c:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c000cd62:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c000cd68:	c3                   	ret    
c000cd69:	90                   	nop

c000cd6a <VgaText::setDefaultFgColour(VgaColour)>:
c000cd6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd6e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd72:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c000cd78:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c000cd7e:	c3                   	ret    
c000cd7f:	90                   	nop

c000cd80 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000cd80:	53                   	push   ebx
c000cd81:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd85:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000cd89:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cd8d:	51                   	push   ecx
c000cd8e:	e8 c1 ff ff ff       	call   c000cd54 <VgaText::setDefaultBgColour(VgaColour)>
c000cd93:	58                   	pop    eax
c000cd94:	5a                   	pop    edx
c000cd95:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cd99:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000cd9d:	5b                   	pop    ebx
c000cd9e:	eb ca                	jmp    c000cd6a <VgaText::setDefaultFgColour(VgaColour)>

c000cda0 <VgaText::combineColours(unsigned char, unsigned char)>:
c000cda0:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000cda5:	c1 e2 04             	shl    edx,0x4
c000cda8:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000cdac:	83 e0 0f             	and    eax,0xf
c000cdaf:	09 d0                	or     eax,edx
c000cdb1:	c3                   	ret    

c000cdb2 <VgaText::scrollScreen()>:
c000cdb2:	57                   	push   edi
c000cdb3:	56                   	push   esi
c000cdb4:	be 01 00 00 00       	mov    esi,0x1
c000cdb9:	53                   	push   ebx
c000cdba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cdbe:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c000cdc4:	31 ff                	xor    edi,edi
c000cdc6:	01 d9                	add    ecx,ebx
c000cdc8:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c000cdcb:	83 fe 17             	cmp    esi,0x17
c000cdce:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c000cdd4:	75 28                	jne    c000cdfe <VgaText::scrollScreen()+0x4c>
c000cdd6:	f7 c7 01 00 00 00    	test   edi,0x1
c000cddc:	74 1c                	je     c000cdfa <VgaText::scrollScreen()+0x48>
c000cdde:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c000cde5:	50                   	push   eax
c000cde6:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c000cded:	50                   	push   eax
c000cdee:	e8 ad ff ff ff       	call   c000cda0 <VgaText::combineColours(unsigned char, unsigned char)>
c000cdf3:	5a                   	pop    edx
c000cdf4:	5a                   	pop    edx
c000cdf5:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c000cdf8:	eb 04                	jmp    c000cdfe <VgaText::scrollScreen()+0x4c>
c000cdfa:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c000cdfe:	47                   	inc    edi
c000cdff:	41                   	inc    ecx
c000ce00:	81 ff a0 00 00 00    	cmp    edi,0xa0
c000ce06:	75 c0                	jne    c000cdc8 <VgaText::scrollScreen()+0x16>
c000ce08:	46                   	inc    esi
c000ce09:	83 fe 18             	cmp    esi,0x18
c000ce0c:	75 b0                	jne    c000cdbe <VgaText::scrollScreen()+0xc>
c000ce0e:	39 1d 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,ebx
c000ce14:	75 24                	jne    c000ce3a <VgaText::scrollScreen()+0x88>
c000ce16:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000ce1d:	74 08                	je     c000ce27 <VgaText::scrollScreen()+0x75>
c000ce1f:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c000ce25:	eb 13                	jmp    c000ce3a <VgaText::scrollScreen()+0x88>
c000ce27:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c000ce2d:	85 c0                	test   eax,eax
c000ce2f:	74 09                	je     c000ce3a <VgaText::scrollScreen()+0x88>
c000ce31:	83 ec 0c             	sub    esp,0xc
c000ce34:	53                   	push   ebx
c000ce35:	ff d0                	call   eax
c000ce37:	83 c4 10             	add    esp,0x10
c000ce3a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000ce3e:	5b                   	pop    ebx
c000ce3f:	5e                   	pop    esi
c000ce40:	5f                   	pop    edi
c000ce41:	e9 1e fe ff ff       	jmp    c000cc64 <VgaText::updateCursor()>

c000ce46 <VgaText::combineCharAndColour(char, unsigned char)>:
c000ce46:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c000ce4b:	c1 e0 08             	shl    eax,0x8
c000ce4e:	89 c2                	mov    edx,eax
c000ce50:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000ce55:	09 d0                	or     eax,edx
c000ce57:	c3                   	ret    

c000ce58 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c000ce58:	53                   	push   ebx
c000ce59:	83 ec 08             	sub    esp,0x8
c000ce5c:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce61:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ce65:	50                   	push   eax
c000ce66:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000ce6b:	50                   	push   eax
c000ce6c:	e8 2f ff ff ff       	call   c000cda0 <VgaText::combineColours(unsigned char, unsigned char)>
c000ce71:	5a                   	pop    edx
c000ce72:	5b                   	pop    ebx
c000ce73:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c000ce78:	0f b6 c0             	movzx  eax,al
c000ce7b:	50                   	push   eax
c000ce7c:	53                   	push   ebx
c000ce7d:	e8 c4 ff ff ff       	call   c000ce46 <VgaText::combineCharAndColour(char, unsigned char)>
c000ce82:	5a                   	pop    edx
c000ce83:	5a                   	pop    edx
c000ce84:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c000ce8a:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c000ce8e:	0f b7 d2             	movzx  edx,dx
c000ce91:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c000ce96:	39 0d 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,ecx
c000ce9c:	75 14                	jne    c000ceb2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000ce9e:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c000cea4:	85 c0                	test   eax,eax
c000cea6:	74 0a                	je     c000ceb2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c000cea8:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000ceac:	83 c4 08             	add    esp,0x8
c000ceaf:	5b                   	pop    ebx
c000ceb0:	ff e0                	jmp    eax
c000ceb2:	83 c4 08             	add    esp,0x8
c000ceb5:	5b                   	pop    ebx
c000ceb6:	c3                   	ret    
c000ceb7:	90                   	nop

c000ceb8 <VgaText::getCursorX()>:
c000ceb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cebc:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c000cec2:	c3                   	ret    
c000cec3:	90                   	nop

c000cec4 <VgaText::getCursorY()>:
c000cec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cec8:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c000cece:	c3                   	ret    
c000cecf:	90                   	nop

c000ced0 <VgaText::setCursor(int, int)>:
c000ced0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ced4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ced8:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c000cede:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cee2:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c000cee8:	e9 77 fd ff ff       	jmp    c000cc64 <VgaText::updateCursor()>
c000ceed:	90                   	nop

c000ceee <VgaText::setCursorX(int)>:
c000ceee:	83 ec 10             	sub    esp,0x10
c000cef1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cef5:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c000cefb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ceff:	50                   	push   eax
c000cf00:	e8 cb ff ff ff       	call   c000ced0 <VgaText::setCursor(int, int)>
c000cf05:	83 c4 1c             	add    esp,0x1c
c000cf08:	c3                   	ret    
c000cf09:	90                   	nop

c000cf0a <VgaText::setCursorY(int)>:
c000cf0a:	83 ec 10             	sub    esp,0x10
c000cf0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000cf11:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cf15:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c000cf1b:	50                   	push   eax
c000cf1c:	e8 af ff ff ff       	call   c000ced0 <VgaText::setCursor(int, int)>
c000cf21:	83 c4 1c             	add    esp,0x1c
c000cf24:	c3                   	ret    
c000cf25:	90                   	nop

c000cf26 <VgaText::incrementCursor(bool)>:
c000cf26:	56                   	push   esi
c000cf27:	53                   	push   ebx
c000cf28:	51                   	push   ecx
c000cf29:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cf2d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cf31:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c000cf37:	40                   	inc    eax
c000cf38:	83 f8 50             	cmp    eax,0x50
c000cf3b:	74 08                	je     c000cf45 <VgaText::incrementCursor(bool)+0x1f>
c000cf3d:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c000cf43:	eb 33                	jmp    c000cf78 <VgaText::incrementCursor(bool)+0x52>
c000cf45:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000cf4b:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000cf55:	8d 50 01             	lea    edx,[eax+0x1]
c000cf58:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000cf5e:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000cf64:	75 12                	jne    c000cf78 <VgaText::incrementCursor(bool)+0x52>
c000cf66:	83 ec 0c             	sub    esp,0xc
c000cf69:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000cf6f:	53                   	push   ebx
c000cf70:	e8 3d fe ff ff       	call   c000cdb2 <VgaText::scrollScreen()>
c000cf75:	83 c4 10             	add    esp,0x10
c000cf78:	89 f0                	mov    eax,esi
c000cf7a:	84 c0                	test   al,al
c000cf7c:	74 0c                	je     c000cf8a <VgaText::incrementCursor(bool)+0x64>
c000cf7e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000cf82:	5a                   	pop    edx
c000cf83:	5b                   	pop    ebx
c000cf84:	5e                   	pop    esi
c000cf85:	e9 da fc ff ff       	jmp    c000cc64 <VgaText::updateCursor()>
c000cf8a:	58                   	pop    eax
c000cf8b:	5b                   	pop    ebx
c000cf8c:	5e                   	pop    esi
c000cf8d:	c3                   	ret    

c000cf8e <VgaText::updateRAMUsageDisplay(int)>:
c000cf8e:	53                   	push   ebx
c000cf8f:	bb 0a 00 00 00       	mov    ebx,0xa
c000cf94:	6a 0f                	push   0xf
c000cf96:	6a 00                	push   0x0
c000cf98:	e8 03 fe ff ff       	call   c000cda0 <VgaText::combineColours(unsigned char, unsigned char)>
c000cf9d:	5a                   	pop    edx
c000cf9e:	59                   	pop    ecx
c000cf9f:	0f b6 c8             	movzx  ecx,al
c000cfa2:	51                   	push   ecx
c000cfa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cfa7:	99                   	cdq    
c000cfa8:	f7 fb                	idiv   ebx
c000cfaa:	83 c0 30             	add    eax,0x30
c000cfad:	89 d3                	mov    ebx,edx
c000cfaf:	0f be c0             	movsx  eax,al
c000cfb2:	50                   	push   eax
c000cfb3:	e8 8e fe ff ff       	call   c000ce46 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfb8:	5a                   	pop    edx
c000cfb9:	83 c3 30             	add    ebx,0x30
c000cfbc:	5a                   	pop    edx
c000cfbd:	66 a3 96 80 0b c2    	mov    ds:0xc20b8096,ax
c000cfc3:	0f b6 db             	movzx  ebx,bl
c000cfc6:	51                   	push   ecx
c000cfc7:	53                   	push   ebx
c000cfc8:	e8 79 fe ff ff       	call   c000ce46 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfcd:	5b                   	pop    ebx
c000cfce:	5a                   	pop    edx
c000cfcf:	66 a3 98 80 0b c2    	mov    ds:0xc20b8098,ax
c000cfd5:	51                   	push   ecx
c000cfd6:	6a 25                	push   0x25
c000cfd8:	e8 69 fe ff ff       	call   c000ce46 <VgaText::combineCharAndColour(char, unsigned char)>
c000cfdd:	59                   	pop    ecx
c000cfde:	5b                   	pop    ebx
c000cfdf:	66 a3 9a 80 0b c2    	mov    ds:0xc20b809a,ax
c000cfe5:	5b                   	pop    ebx
c000cfe6:	c3                   	ret    
c000cfe7:	90                   	nop

c000cfe8 <VgaText::updateDiskUsage()>:
c000cfe8:	55                   	push   ebp
c000cfe9:	bd 10 27 00 00       	mov    ebp,0x2710
c000cfee:	57                   	push   edi
c000cfef:	56                   	push   esi
c000cff0:	53                   	push   ebx
c000cff1:	6a 0f                	push   0xf
c000cff3:	6a 00                	push   0x0
c000cff5:	e8 a6 fd ff ff       	call   c000cda0 <VgaText::combineColours(unsigned char, unsigned char)>
c000cffa:	0f b6 d8             	movzx  ebx,al
c000cffd:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d002:	5a                   	pop    edx
c000d003:	99                   	cdq    
c000d004:	f7 fd                	idiv   ebp
c000d006:	59                   	pop    ecx
c000d007:	b9 0a 00 00 00       	mov    ecx,0xa
c000d00c:	99                   	cdq    
c000d00d:	f7 f9                	idiv   ecx
c000d00f:	53                   	push   ebx
c000d010:	8d 42 30             	lea    eax,[edx+0x30]
c000d013:	0f b6 c0             	movzx  eax,al
c000d016:	50                   	push   eax
c000d017:	e8 2a fe ff ff       	call   c000ce46 <VgaText::combineCharAndColour(char, unsigned char)>
c000d01c:	5e                   	pop    esi
c000d01d:	5f                   	pop    edi
c000d01e:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c000d024:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d029:	bf e8 03 00 00       	mov    edi,0x3e8
c000d02e:	99                   	cdq    
c000d02f:	f7 ff                	idiv   edi
c000d031:	99                   	cdq    
c000d032:	f7 f9                	idiv   ecx
c000d034:	53                   	push   ebx
c000d035:	8d 42 30             	lea    eax,[edx+0x30]
c000d038:	0f b6 c0             	movzx  eax,al
c000d03b:	50                   	push   eax
c000d03c:	e8 05 fe ff ff       	call   c000ce46 <VgaText::combineCharAndColour(char, unsigned char)>
c000d041:	5a                   	pop    edx
c000d042:	5e                   	pop    esi
c000d043:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c000d049:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d04e:	be 64 00 00 00       	mov    esi,0x64
c000d053:	99                   	cdq    
c000d054:	f7 fe                	idiv   esi
c000d056:	99                   	cdq    
c000d057:	f7 f9                	idiv   ecx
c000d059:	53                   	push   ebx
c000d05a:	8d 42 30             	lea    eax,[edx+0x30]
c000d05d:	0f b6 c0             	movzx  eax,al
c000d060:	50                   	push   eax
c000d061:	e8 e0 fd ff ff       	call   c000ce46 <VgaText::combineCharAndColour(char, unsigned char)>
c000d066:	5a                   	pop    edx
c000d067:	5a                   	pop    edx
c000d068:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c000d06e:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d073:	53                   	push   ebx
c000d074:	99                   	cdq    
c000d075:	f7 f9                	idiv   ecx
c000d077:	99                   	cdq    
c000d078:	f7 f9                	idiv   ecx
c000d07a:	8d 42 30             	lea    eax,[edx+0x30]
c000d07d:	0f b6 c0             	movzx  eax,al
c000d080:	50                   	push   eax
c000d081:	e8 c0 fd ff ff       	call   c000ce46 <VgaText::combineCharAndColour(char, unsigned char)>
c000d086:	5a                   	pop    edx
c000d087:	5a                   	pop    edx
c000d088:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c000d08e:	a1 44 65 02 c0       	mov    eax,ds:0xc0026544
c000d093:	53                   	push   ebx
c000d094:	99                   	cdq    
c000d095:	f7 f9                	idiv   ecx
c000d097:	8d 42 30             	lea    eax,[edx+0x30]
c000d09a:	0f b6 c0             	movzx  eax,al
c000d09d:	50                   	push   eax
c000d09e:	e8 a3 fd ff ff       	call   c000ce46 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0a3:	5a                   	pop    edx
c000d0a4:	5a                   	pop    edx
c000d0a5:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c000d0ab:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d0b0:	53                   	push   ebx
c000d0b1:	99                   	cdq    
c000d0b2:	f7 fd                	idiv   ebp
c000d0b4:	99                   	cdq    
c000d0b5:	f7 f9                	idiv   ecx
c000d0b7:	8d 42 30             	lea    eax,[edx+0x30]
c000d0ba:	0f b6 c0             	movzx  eax,al
c000d0bd:	50                   	push   eax
c000d0be:	e8 83 fd ff ff       	call   c000ce46 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0c3:	5d                   	pop    ebp
c000d0c4:	5a                   	pop    edx
c000d0c5:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c000d0cb:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d0d0:	53                   	push   ebx
c000d0d1:	99                   	cdq    
c000d0d2:	f7 ff                	idiv   edi
c000d0d4:	99                   	cdq    
c000d0d5:	f7 f9                	idiv   ecx
c000d0d7:	8d 42 30             	lea    eax,[edx+0x30]
c000d0da:	0f b6 c0             	movzx  eax,al
c000d0dd:	50                   	push   eax
c000d0de:	e8 63 fd ff ff       	call   c000ce46 <VgaText::combineCharAndColour(char, unsigned char)>
c000d0e3:	5f                   	pop    edi
c000d0e4:	5d                   	pop    ebp
c000d0e5:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c000d0eb:	53                   	push   ebx
c000d0ec:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d0f1:	99                   	cdq    
c000d0f2:	f7 fe                	idiv   esi
c000d0f4:	99                   	cdq    
c000d0f5:	f7 f9                	idiv   ecx
c000d0f7:	8d 42 30             	lea    eax,[edx+0x30]
c000d0fa:	0f b6 c0             	movzx  eax,al
c000d0fd:	50                   	push   eax
c000d0fe:	e8 43 fd ff ff       	call   c000ce46 <VgaText::combineCharAndColour(char, unsigned char)>
c000d103:	5a                   	pop    edx
c000d104:	5e                   	pop    esi
c000d105:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c000d10b:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d110:	53                   	push   ebx
c000d111:	99                   	cdq    
c000d112:	f7 f9                	idiv   ecx
c000d114:	99                   	cdq    
c000d115:	f7 f9                	idiv   ecx
c000d117:	8d 42 30             	lea    eax,[edx+0x30]
c000d11a:	0f b6 c0             	movzx  eax,al
c000d11d:	50                   	push   eax
c000d11e:	e8 23 fd ff ff       	call   c000ce46 <VgaText::combineCharAndColour(char, unsigned char)>
c000d123:	5f                   	pop    edi
c000d124:	5d                   	pop    ebp
c000d125:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c000d12b:	a1 40 65 02 c0       	mov    eax,ds:0xc0026540
c000d130:	53                   	push   ebx
c000d131:	99                   	cdq    
c000d132:	f7 f9                	idiv   ecx
c000d134:	83 c2 30             	add    edx,0x30
c000d137:	0f b6 d2             	movzx  edx,dl
c000d13a:	52                   	push   edx
c000d13b:	e8 06 fd ff ff       	call   c000ce46 <VgaText::combineCharAndColour(char, unsigned char)>
c000d140:	5a                   	pop    edx
c000d141:	59                   	pop    ecx
c000d142:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c000d148:	5b                   	pop    ebx
c000d149:	5e                   	pop    esi
c000d14a:	5f                   	pop    edi
c000d14b:	5d                   	pop    ebp
c000d14c:	c3                   	ret    
c000d14d:	90                   	nop

c000d14e <VgaText::updateTitle()>:
c000d14e:	53                   	push   ebx
c000d14f:	31 c0                	xor    eax,eax
c000d151:	83 ec 58             	sub    esp,0x58
c000d154:	89 e1                	mov    ecx,esp
c000d156:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c000d15a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c000d15e:	40                   	inc    eax
c000d15f:	83 f8 50             	cmp    eax,0x50
c000d162:	75 f6                	jne    c000d15a <VgaText::updateTitle()+0xc>
c000d164:	31 c0                	xor    eax,eax
c000d166:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c000d16d:	84 db                	test   bl,bl
c000d16f:	74 06                	je     c000d177 <VgaText::updateTitle()+0x29>
c000d171:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c000d174:	40                   	inc    eax
c000d175:	eb ef                	jmp    c000d166 <VgaText::updateTitle()+0x18>
c000d177:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c000d17d:	85 c0                	test   eax,eax
c000d17f:	74 09                	je     c000d18a <VgaText::updateTitle()+0x3c>
c000d181:	53                   	push   ebx
c000d182:	53                   	push   ebx
c000d183:	51                   	push   ecx
c000d184:	52                   	push   edx
c000d185:	ff d0                	call   eax
c000d187:	83 c4 10             	add    esp,0x10
c000d18a:	e8 59 fe ff ff       	call   c000cfe8 <VgaText::updateDiskUsage()>
c000d18f:	83 c4 58             	add    esp,0x58
c000d192:	5b                   	pop    ebx
c000d193:	c3                   	ret    

c000d194 <VgaText::setTitleTextColour(VgaColour)>:
c000d194:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d198:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d19c:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c000d1a2:	eb aa                	jmp    c000d14e <VgaText::updateTitle()>

c000d1a4 <VgaText::setTitleColour(VgaColour)>:
c000d1a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d1a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d1ac:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c000d1b2:	eb 9a                	jmp    c000d14e <VgaText::updateTitle()>

c000d1b4 <VgaText::setTitle(char*)>:
c000d1b4:	53                   	push   ebx
c000d1b5:	83 ec 10             	sub    esp,0x10
c000d1b8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d1bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d1c0:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c000d1c6:	50                   	push   eax
c000d1c7:	e8 94 35 ff ff       	call   c0000760 <strcpy>
c000d1cc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000d1d0:	83 c4 18             	add    esp,0x18
c000d1d3:	5b                   	pop    ebx
c000d1d4:	e9 75 ff ff ff       	jmp    c000d14e <VgaText::updateTitle()>
c000d1d9:	90                   	nop

c000d1da <VgaText::decrementCursor(bool)>:
c000d1da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d1de:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d1e2:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c000d1e8:	85 c0                	test   eax,eax
c000d1ea:	74 07                	je     c000d1f3 <VgaText::decrementCursor(bool)+0x19>
c000d1ec:	48                   	dec    eax
c000d1ed:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c000d1f3:	84 c9                	test   cl,cl
c000d1f5:	74 09                	je     c000d200 <VgaText::decrementCursor(bool)+0x26>
c000d1f7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000d1fb:	e9 64 fa ff ff       	jmp    c000cc64 <VgaText::updateCursor()>
c000d200:	c3                   	ret    
c000d201:	90                   	nop

c000d202 <VgaText::putchar(char, VgaColour, VgaColour)>:
c000d202:	53                   	push   ebx
c000d203:	83 ec 08             	sub    esp,0x8
c000d206:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d20a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d20e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000d212:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000d216:	3c 07                	cmp    al,0x7
c000d218:	75 2a                	jne    c000d244 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c000d21a:	a1 0c 49 02 c0       	mov    eax,ds:0xc002490c
c000d21f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000d227:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c000d22f:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c000d237:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d23b:	83 c4 08             	add    esp,0x8
c000d23e:	5b                   	pop    ebx
c000d23f:	e9 c0 2d 00 00       	jmp    c0010004 <Buzzer::beep(int, int, bool)>
c000d244:	3c 0d                	cmp    al,0xd
c000d246:	75 0c                	jne    c000d254 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c000d248:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d252:	eb 3b                	jmp    c000d28f <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c000d254:	3c 0a                	cmp    al,0xa
c000d256:	75 40                	jne    c000d298 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c000d258:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c000d25e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c000d268:	8d 50 01             	lea    edx,[eax+0x1]
c000d26b:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c000d271:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c000d277:	75 12                	jne    c000d28b <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c000d279:	83 ec 0c             	sub    esp,0xc
c000d27c:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c000d282:	53                   	push   ebx
c000d283:	e8 2a fb ff ff       	call   c000cdb2 <VgaText::scrollScreen()>
c000d288:	83 c4 10             	add    esp,0x10
c000d28b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d28f:	83 c4 08             	add    esp,0x8
c000d292:	5b                   	pop    ebx
c000d293:	e9 cc f9 ff ff       	jmp    c000cc64 <VgaText::updateCursor()>
c000d298:	3c 08                	cmp    al,0x8
c000d29a:	75 31                	jne    c000d2cd <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c000d29c:	50                   	push   eax
c000d29d:	50                   	push   eax
c000d29e:	6a 01                	push   0x1
c000d2a0:	53                   	push   ebx
c000d2a1:	e8 34 ff ff ff       	call   c000d1da <VgaText::decrementCursor(bool)>
c000d2a6:	5a                   	pop    edx
c000d2a7:	59                   	pop    ecx
c000d2a8:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2ae:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2b4:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d2ba:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d2c0:	6a 20                	push   0x20
c000d2c2:	53                   	push   ebx
c000d2c3:	e8 90 fb ff ff       	call   c000ce58 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2c8:	83 c4 28             	add    esp,0x28
c000d2cb:	5b                   	pop    ebx
c000d2cc:	c3                   	ret    
c000d2cd:	83 ec 08             	sub    esp,0x8
c000d2d0:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d2d6:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d2dc:	0f be c0             	movsx  eax,al
c000d2df:	51                   	push   ecx
c000d2e0:	52                   	push   edx
c000d2e1:	50                   	push   eax
c000d2e2:	53                   	push   ebx
c000d2e3:	e8 70 fb ff ff       	call   c000ce58 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d2e8:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c000d2ec:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000d2f4:	83 c4 28             	add    esp,0x28
c000d2f7:	5b                   	pop    ebx
c000d2f8:	e9 29 fc ff ff       	jmp    c000cf26 <VgaText::incrementCursor(bool)>
c000d2fd:	90                   	nop

c000d2fe <VgaText::isShowingCursor()>:
c000d2fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d302:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c000d308:	c3                   	ret    
c000d309:	90                   	nop

c000d30a <VgaText::isBlinkDisabled()>:
c000d30a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d30e:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c000d314:	83 f0 01             	xor    eax,0x1
c000d317:	c3                   	ret    

c000d318 <VgaText::setCursorHeight(int)>:
c000d318:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d31c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d320:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c000d326:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c000d32d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d331:	e9 48 f9 ff ff       	jmp    c000cc7e <VgaText::showCursor(bool)>

c000d336 <VgaText::getCursorHeight()>:
c000d336:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d33a:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c000d340:	c3                   	ret    

c000d341 <setActiveTerminal(VgaText*)>:
c000d341:	53                   	push   ebx
c000d342:	83 ec 08             	sub    esp,0x8
c000d345:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d349:	85 db                	test   ebx,ebx
c000d34b:	75 11                	jne    c000d35e <setActiveTerminal(VgaText*)+0x1d>
c000d34d:	c7 44 24 10 40 14 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021440
c000d355:	83 c4 08             	add    esp,0x8
c000d358:	5b                   	pop    ebx
c000d359:	e9 e2 86 00 00       	jmp    c0015a40 <Krnl::panic(char const*)>
c000d35e:	50                   	push   eax
c000d35f:	50                   	push   eax
c000d360:	53                   	push   ebx
c000d361:	68 4e 14 02 c0       	push   0xc002144e
c000d366:	e8 a6 1e 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000d36b:	a1 64 48 02 c0       	mov    eax,ds:0xc0024864
c000d370:	83 c4 10             	add    esp,0x10
c000d373:	85 c0                	test   eax,eax
c000d375:	74 0c                	je     c000d383 <setActiveTerminal(VgaText*)+0x42>
c000d377:	83 ec 0c             	sub    esp,0xc
c000d37a:	50                   	push   eax
c000d37b:	e8 e4 f8 ff ff       	call   c000cc64 <VgaText::updateCursor()>
c000d380:	83 c4 10             	add    esp,0x10
c000d383:	51                   	push   ecx
c000d384:	89 1d 64 48 02 c0    	mov    DWORD PTR ds:0xc0024864,ebx
c000d38a:	51                   	push   ecx
c000d38b:	53                   	push   ebx
c000d38c:	68 66 14 02 c0       	push   0xc0021466
c000d391:	e8 7b 1e 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000d396:	83 c4 0c             	add    esp,0xc
c000d399:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c000d39f:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c000d3a5:	53                   	push   ebx
c000d3a6:	e8 25 fb ff ff       	call   c000ced0 <VgaText::setCursor(int, int)>
c000d3ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3ae:	e8 57 ff ff ff       	call   c000d30a <VgaText::isBlinkDisabled()>
c000d3b3:	5a                   	pop    edx
c000d3b4:	59                   	pop    ecx
c000d3b5:	0f b6 c0             	movzx  eax,al
c000d3b8:	50                   	push   eax
c000d3b9:	53                   	push   ebx
c000d3ba:	e8 cf f8 ff ff       	call   c000cc8e <VgaText::disableBlink(bool)>
c000d3bf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d3c2:	e8 6f ff ff ff       	call   c000d336 <VgaText::getCursorHeight()>
c000d3c7:	5a                   	pop    edx
c000d3c8:	59                   	pop    ecx
c000d3c9:	50                   	push   eax
c000d3ca:	53                   	push   ebx
c000d3cb:	e8 48 ff ff ff       	call   c000d318 <VgaText::setCursorHeight(int)>
c000d3d0:	83 c4 10             	add    esp,0x10
c000d3d3:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c000d3da:	75 0a                	jne    c000d3e6 <setActiveTerminal(VgaText*)+0xa5>
c000d3dc:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c000d3e6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000d3ea:	83 c4 08             	add    esp,0x8
c000d3ed:	5b                   	pop    ebx
c000d3ee:	e9 1d f8 ff ff       	jmp    c000cc10 <VgaText::load()>

c000d3f3 <doTerminalCycle()>:
c000d3f3:	83 ec 18             	sub    esp,0x18
c000d3f6:	a1 60 48 02 c0       	mov    eax,ds:0xc0024860
c000d3fb:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c000d401:	50                   	push   eax
c000d402:	a3 60 48 02 c0       	mov    ds:0xc0024860,eax
c000d407:	e8 35 ff ff ff       	call   c000d341 <setActiveTerminal(VgaText*)>
c000d40c:	83 c4 1c             	add    esp,0x1c
c000d40f:	c3                   	ret    

c000d410 <VgaText::doUpdate()>:
c000d410:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d414:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c000d41a:	85 c0                	test   eax,eax
c000d41c:	74 02                	je     c000d420 <VgaText::doUpdate()+0x10>
c000d41e:	ff e0                	jmp    eax
c000d420:	c3                   	ret    
c000d421:	90                   	nop

c000d422 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c000d422:	55                   	push   ebp
c000d423:	57                   	push   edi
c000d424:	56                   	push   esi
c000d425:	53                   	push   ebx
c000d426:	83 ec 1c             	sub    esp,0x1c
c000d429:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d42d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d432:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c000d439:	50                   	push   eax
c000d43a:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c000d43f:	50                   	push   eax
c000d440:	e8 5b f9 ff ff       	call   c000cda0 <VgaText::combineColours(unsigned char, unsigned char)>
c000d445:	59                   	pop    ecx
c000d446:	8d 7d 0c             	lea    edi,[ebp+0xc]
c000d449:	5b                   	pop    ebx
c000d44a:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d452:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d458:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d45c:	0f b7 db             	movzx  ebx,bx
c000d45f:	01 db                	add    ebx,ebx
c000d461:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d465:	01 fb                	add    ebx,edi
c000d467:	31 c0                	xor    eax,eax
c000d469:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d46c:	84 c9                	test   cl,cl
c000d46e:	0f 84 3d 01 00 00    	je     c000d5b1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18f>
c000d474:	80 f9 0d             	cmp    cl,0xd
c000d477:	75 0f                	jne    c000d488 <VgaText::puts(char const*, VgaColour, VgaColour)+0x66>
c000d479:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d483:	e9 23 01 00 00       	jmp    c000d5ab <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d488:	80 f9 0a             	cmp    cl,0xa
c000d48b:	75 5b                	jne    c000d4e8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc6>
c000d48d:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c000d493:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c000d49d:	8d 48 01             	lea    ecx,[eax+0x1]
c000d4a0:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c000d4a6:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c000d4ac:	75 12                	jne    c000d4c0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9e>
c000d4ae:	83 ec 0c             	sub    esp,0xc
c000d4b1:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c000d4b7:	55                   	push   ebp
c000d4b8:	e8 f5 f8 ff ff       	call   c000cdb2 <VgaText::scrollScreen()>
c000d4bd:	83 c4 10             	add    esp,0x10
c000d4c0:	83 ec 0c             	sub    esp,0xc
c000d4c3:	55                   	push   ebp
c000d4c4:	e8 9b f7 ff ff       	call   c000cc64 <VgaText::updateCursor()>
c000d4c9:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d4d1:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d4d7:	83 c4 10             	add    esp,0x10
c000d4da:	0f b7 db             	movzx  ebx,bx
c000d4dd:	01 db                	add    ebx,ebx
c000d4df:	31 c0                	xor    eax,eax
c000d4e1:	01 fb                	add    ebx,edi
c000d4e3:	e9 c3 00 00 00       	jmp    c000d5ab <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d4e8:	80 f9 08             	cmp    cl,0x8
c000d4eb:	75 4e                	jne    c000d53b <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c000d4ed:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000d4f1:	50                   	push   eax
c000d4f2:	50                   	push   eax
c000d4f3:	6a 01                	push   0x1
c000d4f5:	55                   	push   ebp
c000d4f6:	e8 df fc ff ff       	call   c000d1da <VgaText::decrementCursor(bool)>
c000d4fb:	58                   	pop    eax
c000d4fc:	5a                   	pop    edx
c000d4fd:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d503:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d509:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c000d50f:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c000d515:	6a 20                	push   0x20
c000d517:	55                   	push   ebp
c000d518:	e8 3b f9 ff ff       	call   c000ce58 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d51d:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d525:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c000d52b:	83 c4 20             	add    esp,0x20
c000d52e:	0f b7 db             	movzx  ebx,bx
c000d531:	01 db                	add    ebx,ebx
c000d533:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000d537:	01 fb                	add    ebx,edi
c000d539:	eb 70                	jmp    c000d5ab <VgaText::puts(char const*, VgaColour, VgaColour)+0x189>
c000d53b:	50                   	push   eax
c000d53c:	50                   	push   eax
c000d53d:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d542:	50                   	push   eax
c000d543:	51                   	push   ecx
c000d544:	e8 fd f8 ff ff       	call   c000ce46 <VgaText::combineCharAndColour(char, unsigned char)>
c000d549:	66 89 03             	mov    WORD PTR [ebx],ax
c000d54c:	83 c4 10             	add    esp,0x10
c000d54f:	39 2d 64 48 02 c0    	cmp    DWORD PTR ds:0xc0024864,ebp
c000d555:	75 2a                	jne    c000d581 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d557:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c000d55d:	85 c0                	test   eax,eax
c000d55f:	74 20                	je     c000d581 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15f>
c000d561:	52                   	push   edx
c000d562:	52                   	push   edx
c000d563:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c000d569:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c000d56f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d573:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d577:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c000d57a:	51                   	push   ecx
c000d57b:	55                   	push   ebp
c000d57c:	ff d0                	call   eax
c000d57e:	83 c4 20             	add    esp,0x20
c000d581:	50                   	push   eax
c000d582:	83 c3 02             	add    ebx,0x2
c000d585:	50                   	push   eax
c000d586:	6a 00                	push   0x0
c000d588:	55                   	push   ebp
c000d589:	e8 98 f9 ff ff       	call   c000cf26 <VgaText::incrementCursor(bool)>
c000d58e:	83 c4 10             	add    esp,0x10
c000d591:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c000d598:	75 0f                	jne    c000d5a9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c000d59a:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c000d5a2:	0f b7 db             	movzx  ebx,bx
c000d5a5:	01 db                	add    ebx,ebx
c000d5a7:	01 fb                	add    ebx,edi
c000d5a9:	b0 01                	mov    al,0x1
c000d5ab:	46                   	inc    esi
c000d5ac:	e9 b8 fe ff ff       	jmp    c000d469 <VgaText::puts(char const*, VgaColour, VgaColour)+0x47>
c000d5b1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000d5b5:	83 ec 0c             	sub    esp,0xc
c000d5b8:	55                   	push   ebp
c000d5b9:	e8 a6 f6 ff ff       	call   c000cc64 <VgaText::updateCursor()>
c000d5be:	83 c4 10             	add    esp,0x10
c000d5c1:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000d5c5:	84 c0                	test   al,al
c000d5c7:	74 0c                	je     c000d5d5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b3>
c000d5c9:	83 ec 0c             	sub    esp,0xc
c000d5cc:	55                   	push   ebp
c000d5cd:	e8 3e fe ff ff       	call   c000d410 <VgaText::doUpdate()>
c000d5d2:	83 c4 10             	add    esp,0x10
c000d5d5:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c000d5dc:	83 c4 1c             	add    esp,0x1c
c000d5df:	5b                   	pop    ebx
c000d5e0:	5e                   	pop    esi
c000d5e1:	5f                   	pop    edi
c000d5e2:	5d                   	pop    ebp
c000d5e3:	c3                   	ret    

c000d5e4 <VgaText::clearScreen()>:
c000d5e4:	57                   	push   edi
c000d5e5:	56                   	push   esi
c000d5e6:	31 f6                	xor    esi,esi
c000d5e8:	53                   	push   ebx
c000d5e9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d5ed:	52                   	push   edx
c000d5ee:	6a 00                	push   0x0
c000d5f0:	6a 00                	push   0x0
c000d5f2:	53                   	push   ebx
c000d5f3:	e8 d8 f8 ff ff       	call   c000ced0 <VgaText::setCursor(int, int)>
c000d5f8:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c000d5ff:	83 c4 10             	add    esp,0x10
c000d602:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c000d608:	7e 26                	jle    c000d630 <VgaText::clearScreen()+0x4c>
c000d60a:	31 ff                	xor    edi,edi
c000d60c:	50                   	push   eax
c000d60d:	50                   	push   eax
c000d60e:	56                   	push   esi
c000d60f:	57                   	push   edi
c000d610:	47                   	inc    edi
c000d611:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d617:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d61d:	6a 20                	push   0x20
c000d61f:	53                   	push   ebx
c000d620:	e8 33 f8 ff ff       	call   c000ce58 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000d625:	83 c4 20             	add    esp,0x20
c000d628:	83 ff 50             	cmp    edi,0x50
c000d62b:	75 df                	jne    c000d60c <VgaText::clearScreen()+0x28>
c000d62d:	46                   	inc    esi
c000d62e:	eb d2                	jmp    c000d602 <VgaText::clearScreen()+0x1e>
c000d630:	83 ec 0c             	sub    esp,0xc
c000d633:	53                   	push   ebx
c000d634:	e8 d7 fd ff ff       	call   c000d410 <VgaText::doUpdate()>
c000d639:	83 c4 10             	add    esp,0x10
c000d63c:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c000d643:	5b                   	pop    ebx
c000d644:	5e                   	pop    esi
c000d645:	5f                   	pop    edi
c000d646:	c3                   	ret    
c000d647:	90                   	nop

c000d648 <VgaText::putchar(char)>:
c000d648:	56                   	push   esi
c000d649:	53                   	push   ebx
c000d64a:	83 ec 14             	sub    esp,0x14
c000d64d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d651:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d655:	3c 5b                	cmp    al,0x5b
c000d657:	75 21                	jne    c000d67a <VgaText::putchar(char)+0x32>
c000d659:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c000d660:	74 28                	je     c000d68a <VgaText::putchar(char)+0x42>
c000d662:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c000d66b:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c000d675:	e9 e2 00 00 00       	jmp    c000d75c <VgaText::putchar(char)+0x114>
c000d67a:	3c 1b                	cmp    al,0x1b
c000d67c:	75 0c                	jne    c000d68a <VgaText::putchar(char)+0x42>
c000d67e:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c000d685:	e9 d2 00 00 00       	jmp    c000d75c <VgaText::putchar(char)+0x114>
c000d68a:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c000d690:	84 c9                	test   cl,cl
c000d692:	0f 84 ab 00 00 00    	je     c000d743 <VgaText::putchar(char)+0xfb>
c000d698:	8d 50 c0             	lea    edx,[eax-0x40]
c000d69b:	80 fa 3e             	cmp    dl,0x3e
c000d69e:	0f 87 82 00 00 00    	ja     c000d726 <VgaText::putchar(char)+0xde>
c000d6a4:	3c 6d                	cmp    al,0x6d
c000d6a6:	75 4d                	jne    c000d6f5 <VgaText::putchar(char)+0xad>
c000d6a8:	31 f6                	xor    esi,esi
c000d6aa:	31 d2                	xor    edx,edx
c000d6ac:	31 c0                	xor    eax,eax
c000d6ae:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c000d6b4:	7e 30                	jle    c000d6e6 <VgaText::putchar(char)+0x9e>
c000d6b6:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c000d6be:	80 fa 3b             	cmp    dl,0x3b
c000d6c1:	75 17                	jne    c000d6da <VgaText::putchar(char)+0x92>
c000d6c3:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000d6c7:	50                   	push   eax
c000d6c8:	53                   	push   ebx
c000d6c9:	e8 fa f5 ff ff       	call   c000ccc8 <VgaText::doANSI_SGR(int)>
c000d6ce:	59                   	pop    ecx
c000d6cf:	31 d2                	xor    edx,edx
c000d6d1:	58                   	pop    eax
c000d6d2:	31 c0                	xor    eax,eax
c000d6d4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000d6d8:	eb 09                	jmp    c000d6e3 <VgaText::putchar(char)+0x9b>
c000d6da:	6b c0 0a             	imul   eax,eax,0xa
c000d6dd:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c000d6e1:	88 ca                	mov    dl,cl
c000d6e3:	46                   	inc    esi
c000d6e4:	eb c8                	jmp    c000d6ae <VgaText::putchar(char)+0x66>
c000d6e6:	84 d2                	test   dl,dl
c000d6e8:	74 31                	je     c000d71b <VgaText::putchar(char)+0xd3>
c000d6ea:	50                   	push   eax
c000d6eb:	53                   	push   ebx
c000d6ec:	e8 d7 f5 ff ff       	call   c000ccc8 <VgaText::doANSI_SGR(int)>
c000d6f1:	58                   	pop    eax
c000d6f2:	5a                   	pop    edx
c000d6f3:	eb 26                	jmp    c000d71b <VgaText::putchar(char)+0xd3>
c000d6f5:	3c 4a                	cmp    al,0x4a
c000d6f7:	75 22                	jne    c000d71b <VgaText::putchar(char)+0xd3>
c000d6f9:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c000d700:	75 19                	jne    c000d71b <VgaText::putchar(char)+0xd3>
c000d702:	83 ec 0c             	sub    esp,0xc
c000d705:	53                   	push   ebx
c000d706:	e8 d9 fe ff ff       	call   c000d5e4 <VgaText::clearScreen()>
c000d70b:	83 c4 0c             	add    esp,0xc
c000d70e:	6a 00                	push   0x0
c000d710:	6a 00                	push   0x0
c000d712:	53                   	push   ebx
c000d713:	e8 b8 f7 ff ff       	call   c000ced0 <VgaText::setCursor(int, int)>
c000d718:	83 c4 10             	add    esp,0x10
c000d71b:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c000d724:	eb 36                	jmp    c000d75c <VgaText::putchar(char)+0x114>
c000d726:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c000d72c:	83 fa 0e             	cmp    edx,0xe
c000d72f:	7f 2b                	jg     c000d75c <VgaText::putchar(char)+0x114>
c000d731:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d734:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c000d73a:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c000d741:	eb 19                	jmp    c000d75c <VgaText::putchar(char)+0x114>
c000d743:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c000d749:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c000d74f:	0f be c0             	movsx  eax,al
c000d752:	50                   	push   eax
c000d753:	53                   	push   ebx
c000d754:	e8 a9 fa ff ff       	call   c000d202 <VgaText::putchar(char, VgaColour, VgaColour)>
c000d759:	83 c4 10             	add    esp,0x10
c000d75c:	83 c4 14             	add    esp,0x14
c000d75f:	5b                   	pop    ebx
c000d760:	5e                   	pop    esi
c000d761:	c3                   	ret    

c000d762 <VgaText::puts(char const*)>:
c000d762:	53                   	push   ebx
c000d763:	83 ec 08             	sub    esp,0x8
c000d766:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d76a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000d76d:	84 c0                	test   al,al
c000d76f:	74 12                	je     c000d783 <VgaText::puts(char const*)+0x21>
c000d771:	51                   	push   ecx
c000d772:	43                   	inc    ebx
c000d773:	51                   	push   ecx
c000d774:	50                   	push   eax
c000d775:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d779:	e8 ca fe ff ff       	call   c000d648 <VgaText::putchar(char)>
c000d77e:	83 c4 10             	add    esp,0x10
c000d781:	eb e7                	jmp    c000d76a <VgaText::puts(char const*)+0x8>
c000d783:	83 c4 08             	add    esp,0x8
c000d786:	5b                   	pop    ebx
c000d787:	c3                   	ret    

c000d788 <VgaText::putx(unsigned int)>:
c000d788:	57                   	push   edi
c000d789:	b9 11 00 00 00       	mov    ecx,0x11
c000d78e:	56                   	push   esi
c000d78f:	be 82 14 02 c0       	mov    esi,0xc0021482
c000d794:	53                   	push   ebx
c000d795:	83 ec 20             	sub    esp,0x20
c000d798:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d79c:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c000d7a0:	fc                   	cld    
c000d7a1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d7a3:	be 08 00 00 00       	mov    esi,0x8
c000d7a8:	50                   	push   eax
c000d7a9:	50                   	push   eax
c000d7aa:	89 d8                	mov    eax,ebx
c000d7ac:	c1 e8 1c             	shr    eax,0x1c
c000d7af:	c1 e3 04             	shl    ebx,0x4
c000d7b2:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000d7b7:	50                   	push   eax
c000d7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d7bc:	e8 87 fe ff ff       	call   c000d648 <VgaText::putchar(char)>
c000d7c1:	83 c4 10             	add    esp,0x10
c000d7c4:	4e                   	dec    esi
c000d7c5:	75 e1                	jne    c000d7a8 <VgaText::putx(unsigned int)+0x20>
c000d7c7:	83 c4 20             	add    esp,0x20
c000d7ca:	5b                   	pop    ebx
c000d7cb:	5e                   	pop    esi
c000d7cc:	5f                   	pop    edi
c000d7cd:	c3                   	ret    

c000d7ce <VgaText::VgaText(char const*)>:
c000d7ce:	57                   	push   edi
c000d7cf:	56                   	push   esi
c000d7d0:	53                   	push   ebx
c000d7d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7d5:	83 ec 08             	sub    esp,0x8
c000d7d8:	6a 00                	push   0x0
c000d7da:	50                   	push   eax
c000d7db:	e8 e0 05 00 00       	call   c000ddc0 <UnixFile::UnixFile(int)>
c000d7e0:	83 c4 10             	add    esp,0x10
c000d7e3:	ba e8 14 02 c0       	mov    edx,0xc00214e8
c000d7e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7ec:	89 10                	mov    DWORD PTR [eax],edx
c000d7ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d7f2:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c000d7fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d800:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c000d80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d80e:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c000d815:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d819:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c000d820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d824:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c000d82e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d832:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c000d83c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d840:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c000d847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d84b:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c000d852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d856:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c000d85c:	bb 40 48 02 c0       	mov    ebx,0xc0024840
c000d861:	b8 08 00 00 00       	mov    eax,0x8
c000d866:	fc                   	cld    
c000d867:	89 d7                	mov    edi,edx
c000d869:	89 de                	mov    esi,ebx
c000d86b:	89 c1                	mov    ecx,eax
c000d86d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000d86f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d873:	05 1e 10 00 00       	add    eax,0x101e
c000d878:	83 ec 08             	sub    esp,0x8
c000d87b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d87f:	50                   	push   eax
c000d880:	e8 db 2e ff ff       	call   c0000760 <strcpy>
c000d885:	83 c4 10             	add    esp,0x10
c000d888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d88c:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c000d896:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d89a:	83 c0 0c             	add    eax,0xc
c000d89d:	83 ec 04             	sub    esp,0x4
c000d8a0:	68 00 0f 00 00       	push   0xf00
c000d8a5:	6a 00                	push   0x0
c000d8a7:	50                   	push   eax
c000d8a8:	e8 14 2e ff ff       	call   c00006c1 <memset>
c000d8ad:	83 c4 10             	add    esp,0x10
c000d8b0:	83 ec 04             	sub    esp,0x4
c000d8b3:	6a 00                	push   0x0
c000d8b5:	6a 07                	push   0x7
c000d8b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8bb:	e8 c0 f4 ff ff       	call   c000cd80 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c000d8c0:	83 c4 10             	add    esp,0x10
c000d8c3:	83 ec 08             	sub    esp,0x8
c000d8c6:	6a 02                	push   0x2
c000d8c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8cc:	e8 47 fa ff ff       	call   c000d318 <VgaText::setCursorHeight(int)>
c000d8d1:	83 c4 10             	add    esp,0x10
c000d8d4:	83 ec 04             	sub    esp,0x4
c000d8d7:	6a 00                	push   0x0
c000d8d9:	6a 00                	push   0x0
c000d8db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8df:	e8 ec f5 ff ff       	call   c000ced0 <VgaText::setCursor(int, int)>
c000d8e4:	83 c4 10             	add    esp,0x10
c000d8e7:	83 ec 08             	sub    esp,0x8
c000d8ea:	6a 01                	push   0x1
c000d8ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8f0:	e8 89 f3 ff ff       	call   c000cc7e <VgaText::showCursor(bool)>
c000d8f5:	83 c4 10             	add    esp,0x10
c000d8f8:	83 ec 08             	sub    esp,0x8
c000d8fb:	6a 01                	push   0x1
c000d8fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d901:	e8 88 f3 ff ff       	call   c000cc8e <VgaText::disableBlink(bool)>
c000d906:	83 c4 10             	add    esp,0x10
c000d909:	83 ec 0c             	sub    esp,0xc
c000d90c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d910:	e8 cf fc ff ff       	call   c000d5e4 <VgaText::clearScreen()>
c000d915:	83 c4 10             	add    esp,0x10
c000d918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d91c:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c000d923:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d927:	05 9e 10 00 00       	add    eax,0x109e
c000d92c:	83 ec 04             	sub    esp,0x4
c000d92f:	68 96 00 00 00       	push   0x96
c000d934:	6a 00                	push   0x0
c000d936:	50                   	push   eax
c000d937:	e8 85 2d ff ff       	call   c00006c1 <memset>
c000d93c:	83 c4 10             	add    esp,0x10
c000d93f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d943:	05 34 11 00 00       	add    eax,0x1134
c000d948:	83 ec 04             	sub    esp,0x4
c000d94b:	68 2c 01 00 00       	push   0x12c
c000d950:	6a 00                	push   0x0
c000d952:	50                   	push   eax
c000d953:	e8 69 2d ff ff       	call   c00006c1 <memset>
c000d958:	83 c4 10             	add    esp,0x10
c000d95b:	90                   	nop
c000d95c:	5b                   	pop    ebx
c000d95d:	5e                   	pop    esi
c000d95e:	5f                   	pop    edi
c000d95f:	c3                   	ret    

c000d960 <VgaText::receiveKey(unsigned char)>:
c000d960:	55                   	push   ebp
c000d961:	57                   	push   edi
c000d962:	56                   	push   esi
c000d963:	53                   	push   ebx
c000d964:	83 ec 1c             	sub    esp,0x1c
c000d967:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000d96b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d96f:	84 db                	test   bl,bl
c000d971:	0f 84 c9 00 00 00    	je     c000da40 <VgaText::receiveKey(unsigned char)+0xe0>
c000d977:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c000d97d:	80 fb 08             	cmp    bl,0x8
c000d980:	75 2c                	jne    c000d9ae <VgaText::receiveKey(unsigned char)+0x4e>
c000d982:	83 ec 0c             	sub    esp,0xc
c000d985:	57                   	push   edi
c000d986:	e8 53 2d ff ff       	call   c00006de <strlen>
c000d98b:	83 c4 10             	add    esp,0x10
c000d98e:	85 c0                	test   eax,eax
c000d990:	74 41                	je     c000d9d3 <VgaText::receiveKey(unsigned char)+0x73>
c000d992:	50                   	push   eax
c000d993:	50                   	push   eax
c000d994:	6a 08                	push   0x8
c000d996:	56                   	push   esi
c000d997:	e8 ac fc ff ff       	call   c000d648 <VgaText::putchar(char)>
c000d99c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d99f:	e8 3a 2d ff ff       	call   c00006de <strlen>
c000d9a4:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c000d9ac:	eb 22                	jmp    c000d9d0 <VgaText::receiveKey(unsigned char)+0x70>
c000d9ae:	52                   	push   edx
c000d9af:	52                   	push   edx
c000d9b0:	0f be c3             	movsx  eax,bl
c000d9b3:	50                   	push   eax
c000d9b4:	56                   	push   esi
c000d9b5:	e8 8e fc ff ff       	call   c000d648 <VgaText::putchar(char)>
c000d9ba:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c000d9be:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000d9c3:	59                   	pop    ecx
c000d9c4:	5d                   	pop    ebp
c000d9c5:	8d 44 24 16          	lea    eax,[esp+0x16]
c000d9c9:	50                   	push   eax
c000d9ca:	57                   	push   edi
c000d9cb:	e8 47 2e ff ff       	call   c0000817 <strcat>
c000d9d0:	83 c4 10             	add    esp,0x10
c000d9d3:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c000d9da:	75 05                	jne    c000d9e1 <VgaText::receiveKey(unsigned char)+0x81>
c000d9dc:	80 fb 0a             	cmp    bl,0xa
c000d9df:	75 53                	jne    c000da34 <VgaText::receiveKey(unsigned char)+0xd4>
c000d9e1:	83 ec 0c             	sub    esp,0xc
c000d9e4:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c000d9ea:	53                   	push   ebx
c000d9eb:	e8 ee 2c ff ff       	call   c00006de <strlen>
c000d9f0:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d9f3:	89 c5                	mov    ebp,eax
c000d9f5:	e8 e4 2c ff ff       	call   c00006de <strlen>
c000d9fa:	83 c4 10             	add    esp,0x10
c000d9fd:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c000da01:	3d 2c 01 00 00       	cmp    eax,0x12c
c000da06:	76 10                	jbe    c000da18 <VgaText::receiveKey(unsigned char)+0xb8>
c000da08:	83 ec 0c             	sub    esp,0xc
c000da0b:	68 93 14 02 c0       	push   0xc0021493
c000da10:	e8 2b 80 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c000da15:	83 c4 10             	add    esp,0x10
c000da18:	50                   	push   eax
c000da19:	50                   	push   eax
c000da1a:	57                   	push   edi
c000da1b:	53                   	push   ebx
c000da1c:	e8 f6 2d ff ff       	call   c0000817 <strcat>
c000da21:	83 c4 0c             	add    esp,0xc
c000da24:	68 96 00 00 00       	push   0x96
c000da29:	6a 00                	push   0x0
c000da2b:	57                   	push   edi
c000da2c:	e8 90 2c ff ff       	call   c00006c1 <memset>
c000da31:	83 c4 10             	add    esp,0x10
c000da34:	83 ec 0c             	sub    esp,0xc
c000da37:	56                   	push   esi
c000da38:	e8 d3 f9 ff ff       	call   c000d410 <VgaText::doUpdate()>
c000da3d:	83 c4 10             	add    esp,0x10
c000da40:	83 c4 1c             	add    esp,0x1c
c000da43:	5b                   	pop    ebx
c000da44:	5e                   	pop    esi
c000da45:	5f                   	pop    edi
c000da46:	5d                   	pop    ebp
c000da47:	c3                   	ret    

c000da48 <VgaText::write(unsigned long long, void*, int*)>:
c000da48:	55                   	push   ebp
c000da49:	57                   	push   edi
c000da4a:	56                   	push   esi
c000da4b:	53                   	push   ebx
c000da4c:	83 ec 0c             	sub    esp,0xc
c000da4f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000da53:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000da57:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000da5b:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c000da62:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c000da65:	39 eb                	cmp    ebx,ebp
c000da67:	74 13                	je     c000da7c <VgaText::write(unsigned long long, void*, int*)+0x34>
c000da69:	50                   	push   eax
c000da6a:	43                   	inc    ebx
c000da6b:	50                   	push   eax
c000da6c:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c000da70:	50                   	push   eax
c000da71:	56                   	push   esi
c000da72:	e8 d1 fb ff ff       	call   c000d648 <VgaText::putchar(char)>
c000da77:	83 c4 10             	add    esp,0x10
c000da7a:	eb e9                	jmp    c000da65 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c000da7c:	83 ec 0c             	sub    esp,0xc
c000da7f:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c000da86:	56                   	push   esi
c000da87:	e8 84 f9 ff ff       	call   c000d410 <VgaText::doUpdate()>
c000da8c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000da90:	89 38                	mov    DWORD PTR [eax],edi
c000da92:	83 c4 1c             	add    esp,0x1c
c000da95:	31 c0                	xor    eax,eax
c000da97:	5b                   	pop    ebx
c000da98:	5e                   	pop    esi
c000da99:	5f                   	pop    edi
c000da9a:	5d                   	pop    ebp
c000da9b:	c3                   	ret    

c000da9c <newTerminal(char*)>:
c000da9c:	83 ec 28             	sub    esp,0x28
c000da9f:	68 60 12 00 00       	push   0x1260
c000daa4:	e8 33 16 00 00       	call   c000f0dc <operator new(unsigned long)>
c000daa9:	5a                   	pop    edx
c000daaa:	59                   	pop    ecx
c000daab:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000daaf:	50                   	push   eax
c000dab0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dab4:	e8 15 fd ff ff       	call   c000d7ce <VgaText::VgaText(char const*)>
c000dab9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dabd:	83 c4 2c             	add    esp,0x2c
c000dac0:	c3                   	ret    
c000dac1:	90                   	nop

c000dac2 <TSS::TSS()>:
c000dac2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dac6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dacd:	90                   	nop
c000dace:	c3                   	ret    
c000dacf:	90                   	nop

c000dad0 <TSS::setESP(unsigned long)>:
c000dad0:	55                   	push   ebp
c000dad1:	89 e5                	mov    ebp,esp
c000dad3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dad6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dad9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000dadc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000dadf:	90                   	nop
c000dae0:	5d                   	pop    ebp
c000dae1:	c3                   	ret    

c000dae2 <TSS::flush()>:
c000dae2:	55                   	push   ebp
c000dae3:	89 e5                	mov    ebp,esp
c000dae5:	83 ec 10             	sub    esp,0x10
c000dae8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000daeb:	8b 00                	mov    eax,DWORD PTR [eax]
c000daed:	83 c8 03             	or     eax,0x3
c000daf0:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c000daf4:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c000daf8:	66 89 d0             	mov    ax,dx
c000dafb:	0f 00 d8             	ltr    ax
c000dafe:	90                   	nop
c000daff:	c9                   	leave  
c000db00:	c3                   	ret    
c000db01:	90                   	nop

c000db02 <TSS::setup(unsigned long, unsigned long)>:
c000db02:	55                   	push   ebp
c000db03:	89 e5                	mov    ebp,esp
c000db05:	53                   	push   ebx
c000db06:	83 ec 14             	sub    esp,0x14
c000db09:	83 ec 0c             	sub    esp,0xc
c000db0c:	6a 68                	push   0x68
c000db0e:	e8 cc e4 ff ff       	call   c000bfdf <malloc>
c000db13:	83 c4 10             	add    esp,0x10
c000db16:	89 c2                	mov    edx,eax
c000db18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db1b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db21:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db24:	83 ec 04             	sub    esp,0x4
c000db27:	6a 68                	push   0x68
c000db29:	6a 00                	push   0x0
c000db2b:	50                   	push   eax
c000db2c:	e8 90 2b ff ff       	call   c00006c1 <memset>
c000db31:	83 c4 10             	add    esp,0x10
c000db34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db37:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db3a:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c000db40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db43:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db46:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c000db4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db4f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db52:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000db58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db5e:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c000db64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db67:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db6a:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c000db70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db76:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c000db7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db82:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c000db88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db8b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db8e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000db91:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000db94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000db97:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db9a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000db9d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000dba0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dba3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dba6:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000dbad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbb0:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c000dbb3:	e8 2d 1c 01 00       	call   c001f7e5 <CPU::readCR3()>
c000dbb8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000dbbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dbbe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dbc1:	83 ec 08             	sub    esp,0x8
c000dbc4:	50                   	push   eax
c000dbc5:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbc8:	50                   	push   eax
c000dbc9:	e8 e8 db ff ff       	call   c000b7b6 <GDTEntry::setBase(unsigned int)>
c000dbce:	83 c4 10             	add    esp,0x10
c000dbd1:	83 ec 08             	sub    esp,0x8
c000dbd4:	6a 68                	push   0x68
c000dbd6:	8d 45 f0             	lea    eax,[ebp-0x10]
c000dbd9:	50                   	push   eax
c000dbda:	e8 f3 db ff ff       	call   c000b7d2 <GDTEntry::setLimit(unsigned int)>
c000dbdf:	83 c4 10             	add    esp,0x10
c000dbe2:	c6 45 f5 89          	mov    BYTE PTR [ebp-0xb],0x89
c000dbe6:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dbe9:	83 e0 0f             	and    eax,0xf
c000dbec:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dbef:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000dbf2:	83 c8 40             	or     eax,0x40
c000dbf5:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
c000dbf8:	e8 d7 6c 00 00       	call   c00148d4 <thisCPU()>
c000dbfd:	05 78 01 00 00       	add    eax,0x178
c000dc02:	83 ec 04             	sub    esp,0x4
c000dc05:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000dc08:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000dc0b:	50                   	push   eax
c000dc0c:	e8 f5 db ff ff       	call   c000b806 <GDT::addEntry(GDTEntry)>
c000dc11:	83 c4 10             	add    esp,0x10
c000dc14:	89 c2                	mov    edx,eax
c000dc16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc19:	89 10                	mov    DWORD PTR [eax],edx
c000dc1b:	e8 b4 6c 00 00       	call   c00148d4 <thisCPU()>
c000dc20:	05 78 01 00 00       	add    eax,0x178
c000dc25:	83 ec 0c             	sub    esp,0xc
c000dc28:	50                   	push   eax
c000dc29:	e8 1c dc ff ff       	call   c000b84a <GDT::flush()>
c000dc2e:	83 c4 10             	add    esp,0x10
c000dc31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc34:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc36:	83 ec 08             	sub    esp,0x8
c000dc39:	50                   	push   eax
c000dc3a:	68 fc 14 02 c0       	push   0xc00214fc
c000dc3f:	e8 cd 15 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000dc44:	83 c4 10             	add    esp,0x10
c000dc47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000dc4a:	8b 00                	mov    eax,DWORD PTR [eax]
c000dc4c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000dc4f:	c9                   	leave  
c000dc50:	c3                   	ret    
c000dc51:	90                   	nop

c000dc52 <ReservedFilename::read(unsigned long long, void*, int*)>:
c000dc52:	55                   	push   ebp
c000dc53:	57                   	push   edi
c000dc54:	56                   	push   esi
c000dc55:	53                   	push   ebx
c000dc56:	83 ec 0c             	sub    esp,0xc
c000dc59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dc5d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dc61:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dc65:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000dc69:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dc6c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dc70:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dc75:	75 08                	jne    c000dc7f <ReservedFilename::read(unsigned long long, void*, int*)+0x2d>
c000dc77:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dc7d:	eb 5e                	jmp    c000dcdd <ReservedFilename::read(unsigned long long, void*, int*)+0x8b>
c000dc7f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dc84:	75 3d                	jne    c000dcc3 <ReservedFilename::read(unsigned long long, void*, int*)+0x71>
c000dc86:	83 ec 0c             	sub    esp,0xc
c000dc89:	68 1a 15 02 c0       	push   0xc002151a
c000dc8e:	e8 7e 15 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000dc93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dc98:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dc9b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dca1:	8b 10                	mov    edx,DWORD PTR [eax]
c000dca3:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000dca7:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dcab:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dcaf:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000dcb3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dcb7:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000dcba:	83 c4 1c             	add    esp,0x1c
c000dcbd:	5b                   	pop    ebx
c000dcbe:	5e                   	pop    esi
c000dcbf:	5f                   	pop    edi
c000dcc0:	5d                   	pop    ebp
c000dcc1:	ff e0                	jmp    eax
c000dcc3:	89 c2                	mov    edx,eax
c000dcc5:	83 e2 fd             	and    edx,0xfffffffd
c000dcc8:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c000dcce:	74 a7                	je     c000dc77 <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000dcd0:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dcd5:	83 e0 ef             	and    eax,0xffffffef
c000dcd8:	83 f8 08             	cmp    eax,0x8
c000dcdb:	76 9a                	jbe    c000dc77 <ReservedFilename::read(unsigned long long, void*, int*)+0x25>
c000dcdd:	83 c4 0c             	add    esp,0xc
c000dce0:	31 c0                	xor    eax,eax
c000dce2:	5b                   	pop    ebx
c000dce3:	5e                   	pop    esi
c000dce4:	5f                   	pop    edi
c000dce5:	5d                   	pop    ebp
c000dce6:	c3                   	ret    
c000dce7:	90                   	nop

c000dce8 <ReservedFilename::isAtty()>:
c000dce8:	83 ec 18             	sub    esp,0x18
c000dceb:	68 27 15 02 c0       	push   0xc0021527
c000dcf0:	e8 1c 15 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000dcf5:	83 c4 10             	add    esp,0x10
c000dcf8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dcfc:	31 c0                	xor    eax,eax
c000dcfe:	81 7a 04 01 ff ff 0f 	cmp    DWORD PTR [edx+0x4],0xfffff01
c000dd05:	75 12                	jne    c000dd19 <ReservedFilename::isAtty()+0x31>
c000dd07:	83 ec 0c             	sub    esp,0xc
c000dd0a:	68 3d 15 02 c0       	push   0xc002153d
c000dd0f:	e8 fd 14 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000dd14:	83 c4 10             	add    esp,0x10
c000dd17:	b0 01                	mov    al,0x1
c000dd19:	83 c4 0c             	add    esp,0xc
c000dd1c:	c3                   	ret    
c000dd1d:	90                   	nop

c000dd1e <ReservedFilename::write(unsigned long long, void*, int*)>:
c000dd1e:	55                   	push   ebp
c000dd1f:	57                   	push   edi
c000dd20:	56                   	push   esi
c000dd21:	53                   	push   ebx
c000dd22:	83 ec 0c             	sub    esp,0xc
c000dd25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000dd29:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000dd2d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dd31:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c000dd35:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd38:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000dd3c:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000dd41:	75 08                	jne    c000dd4b <ReservedFilename::write(unsigned long long, void*, int*)+0x2d>
c000dd43:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dd49:	eb 63                	jmp    c000ddae <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000dd4b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000dd50:	75 3d                	jne    c000dd8f <ReservedFilename::write(unsigned long long, void*, int*)+0x71>
c000dd52:	83 ec 0c             	sub    esp,0xc
c000dd55:	68 50 15 02 c0       	push   0xc0021550
c000dd5a:	e8 b2 14 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000dd5f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000dd64:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000dd67:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c000dd6d:	8b 10                	mov    edx,DWORD PTR [eax]
c000dd6f:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c000dd73:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000dd77:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000dd7b:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c000dd7f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dd83:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c000dd86:	83 c4 1c             	add    esp,0x1c
c000dd89:	5b                   	pop    ebx
c000dd8a:	5e                   	pop    esi
c000dd8b:	5f                   	pop    edi
c000dd8c:	5d                   	pop    ebp
c000dd8d:	ff e0                	jmp    eax
c000dd8f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000dd94:	75 04                	jne    c000dd9a <ReservedFilename::write(unsigned long long, void*, int*)+0x7c>
c000dd96:	89 33                	mov    DWORD PTR [ebx],esi
c000dd98:	eb 14                	jmp    c000ddae <ReservedFilename::write(unsigned long long, void*, int*)+0x90>
c000dd9a:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c000dd9f:	74 a2                	je     c000dd43 <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000dda1:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000dda6:	83 e0 ef             	and    eax,0xffffffef
c000dda9:	83 f8 08             	cmp    eax,0x8
c000ddac:	76 95                	jbe    c000dd43 <ReservedFilename::write(unsigned long long, void*, int*)+0x25>
c000ddae:	83 c4 0c             	add    esp,0xc
c000ddb1:	31 c0                	xor    eax,eax
c000ddb3:	5b                   	pop    ebx
c000ddb4:	5e                   	pop    esi
c000ddb5:	5f                   	pop    edi
c000ddb6:	5d                   	pop    ebp
c000ddb7:	c3                   	ret    

c000ddb8 <UnixFile::getFileDescriptor()>:
c000ddb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ddbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ddbf:	c3                   	ret    

c000ddc0 <UnixFile::UnixFile(int)>:
c000ddc0:	53                   	push   ebx
c000ddc1:	83 ec 18             	sub    esp,0x18
c000ddc4:	ba 6c 16 02 c0       	mov    edx,0xc002166c
c000ddc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ddcd:	89 10                	mov    DWORD PTR [eax],edx
c000ddcf:	81 7c 24 24 ff fe ff 0f 	cmp    DWORD PTR [esp+0x24],0xffffeff
c000ddd7:	0f 8f 4d 01 00 00    	jg     c000df2a <UnixFile::UnixFile(int)+0x16a>
c000dddd:	a1 40 3c 02 c0       	mov    eax,ds:0xc0023c40
c000dde2:	8d 50 01             	lea    edx,[eax+0x1]
c000dde5:	89 15 40 3c 02 c0    	mov    DWORD PTR ds:0xc0023c40,edx
c000ddeb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ddef:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000ddf2:	83 ec 08             	sub    esp,0x8
c000ddf5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ddf9:	68 f8 48 02 c0       	push   0xc00248f8
c000ddfe:	e8 57 1a 01 00       	call   c001f85a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000de03:	83 c4 10             	add    esp,0x10
c000de06:	a0 f4 48 02 c0       	mov    al,ds:0xc00248f4
c000de0b:	83 f0 01             	xor    eax,0x1
c000de0e:	84 c0                	test   al,al
c000de10:	0f 84 15 01 00 00    	je     c000df2b <UnixFile::UnixFile(int)+0x16b>
c000de16:	c6 05 f4 48 02 c0 01 	mov    BYTE PTR ds:0xc00248f4,0x1
c000de1d:	83 ec 0c             	sub    esp,0xc
c000de20:	6a 0c                	push   0xc
c000de22:	e8 b5 12 00 00       	call   c000f0dc <operator new(unsigned long)>
c000de27:	83 c4 10             	add    esp,0x10
c000de2a:	89 c3                	mov    ebx,eax
c000de2c:	83 ec 08             	sub    esp,0x8
c000de2f:	68 03 ff ff 0f       	push   0xfffff03
c000de34:	53                   	push   ebx
c000de35:	e8 f6 00 00 00       	call   c000df30 <ReservedFilename::ReservedFilename(int)>
c000de3a:	83 c4 10             	add    esp,0x10
c000de3d:	89 1d ec 48 02 c0    	mov    DWORD PTR ds:0xc00248ec,ebx
c000de43:	83 ec 0c             	sub    esp,0xc
c000de46:	6a 0c                	push   0xc
c000de48:	e8 8f 12 00 00       	call   c000f0dc <operator new(unsigned long)>
c000de4d:	83 c4 10             	add    esp,0x10
c000de50:	89 c3                	mov    ebx,eax
c000de52:	83 ec 08             	sub    esp,0x8
c000de55:	68 01 ff ff 0f       	push   0xfffff01
c000de5a:	53                   	push   ebx
c000de5b:	e8 d0 00 00 00       	call   c000df30 <ReservedFilename::ReservedFilename(int)>
c000de60:	83 c4 10             	add    esp,0x10
c000de63:	89 1d f0 48 02 c0    	mov    DWORD PTR ds:0xc00248f0,ebx
c000de69:	83 ec 0c             	sub    esp,0xc
c000de6c:	6a 0c                	push   0xc
c000de6e:	e8 69 12 00 00       	call   c000f0dc <operator new(unsigned long)>
c000de73:	83 c4 10             	add    esp,0x10
c000de76:	89 c3                	mov    ebx,eax
c000de78:	83 ec 08             	sub    esp,0x8
c000de7b:	68 00 ff ff 0f       	push   0xfffff00
c000de80:	53                   	push   ebx
c000de81:	e8 aa 00 00 00       	call   c000df30 <ReservedFilename::ReservedFilename(int)>
c000de86:	83 c4 10             	add    esp,0x10
c000de89:	89 1d e4 48 02 c0    	mov    DWORD PTR ds:0xc00248e4,ebx
c000de8f:	83 ec 0c             	sub    esp,0xc
c000de92:	6a 0c                	push   0xc
c000de94:	e8 43 12 00 00       	call   c000f0dc <operator new(unsigned long)>
c000de99:	83 c4 10             	add    esp,0x10
c000de9c:	89 c3                	mov    ebx,eax
c000de9e:	83 ec 08             	sub    esp,0x8
c000dea1:	68 02 ff ff 0f       	push   0xfffff02
c000dea6:	53                   	push   ebx
c000dea7:	e8 84 00 00 00       	call   c000df30 <ReservedFilename::ReservedFilename(int)>
c000deac:	83 c4 10             	add    esp,0x10
c000deaf:	89 1d e8 48 02 c0    	mov    DWORD PTR ds:0xc00248e8,ebx
c000deb5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000debd:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000dec2:	7f 67                	jg     c000df2b <UnixFile::UnixFile(int)+0x16b>
c000dec4:	83 ec 0c             	sub    esp,0xc
c000dec7:	6a 0c                	push   0xc
c000dec9:	e8 0e 12 00 00       	call   c000f0dc <operator new(unsigned long)>
c000dece:	83 c4 10             	add    esp,0x10
c000ded1:	89 c3                	mov    ebx,eax
c000ded3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ded7:	05 10 ff ff 0f       	add    eax,0xfffff10
c000dedc:	83 ec 08             	sub    esp,0x8
c000dedf:	50                   	push   eax
c000dee0:	53                   	push   ebx
c000dee1:	e8 4a 00 00 00       	call   c000df30 <ReservedFilename::ReservedFilename(int)>
c000dee6:	83 c4 10             	add    esp,0x10
c000dee9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000deed:	89 1c 85 c0 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb740],ebx
c000def4:	83 ec 0c             	sub    esp,0xc
c000def7:	6a 0c                	push   0xc
c000def9:	e8 de 11 00 00       	call   c000f0dc <operator new(unsigned long)>
c000defe:	83 c4 10             	add    esp,0x10
c000df01:	89 c3                	mov    ebx,eax
c000df03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df07:	05 20 ff ff 0f       	add    eax,0xfffff20
c000df0c:	83 ec 08             	sub    esp,0x8
c000df0f:	50                   	push   eax
c000df10:	53                   	push   ebx
c000df11:	e8 1a 00 00 00       	call   c000df30 <ReservedFilename::ReservedFilename(int)>
c000df16:	83 c4 10             	add    esp,0x10
c000df19:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df1d:	89 1c 85 80 48 02 c0 	mov    DWORD PTR [eax*4-0x3ffdb780],ebx
c000df24:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000df28:	eb 93                	jmp    c000debd <UnixFile::UnixFile(int)+0xfd>
c000df2a:	90                   	nop
c000df2b:	83 c4 18             	add    esp,0x18
c000df2e:	5b                   	pop    ebx
c000df2f:	c3                   	ret    

c000df30 <ReservedFilename::ReservedFilename(int)>:
c000df30:	83 ec 0c             	sub    esp,0xc
c000df33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df37:	83 ec 08             	sub    esp,0x8
c000df3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df3e:	50                   	push   eax
c000df3f:	e8 7c fe ff ff       	call   c000ddc0 <UnixFile::UnixFile(int)>
c000df44:	83 c4 10             	add    esp,0x10
c000df47:	ba 88 16 02 c0       	mov    edx,0xc0021688
c000df4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df50:	89 10                	mov    DWORD PTR [eax],edx
c000df52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df56:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000df5a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000df5d:	90                   	nop
c000df5e:	83 c4 0c             	add    esp,0xc
c000df61:	c3                   	ret    

c000df62 <UnixFile::~UnixFile()>:
c000df62:	83 ec 1c             	sub    esp,0x1c
c000df65:	ba 6c 16 02 c0       	mov    edx,0xc002166c
c000df6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df6e:	89 10                	mov    DWORD PTR [eax],edx
c000df70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000df77:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000df7c:	7f 73                	jg     c000dff1 <UnixFile::~UnixFile()+0x8f>
c000df7e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000df86:	83 ec 0c             	sub    esp,0xc
c000df89:	68 f8 48 02 c0       	push   0xc00248f8
c000df8e:	e8 9b 19 01 00       	call   c001f92e <LinkedList<UnixFile>::getFirstElement()>
c000df93:	83 c4 10             	add    esp,0x10
c000df96:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df9a:	83 ec 0c             	sub    esp,0xc
c000df9d:	68 f8 48 02 c0       	push   0xc00248f8
c000dfa2:	e8 8f 19 01 00       	call   c001f936 <LinkedList<UnixFile>::removeFirst()>
c000dfa7:	83 c4 10             	add    esp,0x10
c000dfaa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dfae:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000dfb2:	74 40                	je     c000dff4 <UnixFile::~UnixFile()+0x92>
c000dfb4:	83 ec 08             	sub    esp,0x8
c000dfb7:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dfbb:	68 f8 48 02 c0       	push   0xc00248f8
c000dfc0:	e8 95 18 01 00       	call   c001f85a <LinkedList<UnixFile>::addElement(UnixFile*)>
c000dfc5:	83 c4 10             	add    esp,0x10
c000dfc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dfcc:	8d 50 01             	lea    edx,[eax+0x1]
c000dfcf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfd3:	3d 88 13 00 00       	cmp    eax,0x1388
c000dfd8:	0f 94 c0             	sete   al
c000dfdb:	84 c0                	test   al,al
c000dfdd:	74 a7                	je     c000df86 <UnixFile::~UnixFile()+0x24>
c000dfdf:	83 ec 0c             	sub    esp,0xc
c000dfe2:	68 44 16 02 c0       	push   0xc0021644
c000dfe7:	e8 54 7a 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c000dfec:	83 c4 10             	add    esp,0x10
c000dfef:	eb 95                	jmp    c000df86 <UnixFile::~UnixFile()+0x24>
c000dff1:	90                   	nop
c000dff2:	eb 01                	jmp    c000dff5 <UnixFile::~UnixFile()+0x93>
c000dff4:	90                   	nop
c000dff5:	90                   	nop
c000dff6:	83 c4 1c             	add    esp,0x1c
c000dff9:	c3                   	ret    

c000dffa <UnixFile::~UnixFile()>:
c000dffa:	83 ec 0c             	sub    esp,0xc
c000dffd:	83 ec 0c             	sub    esp,0xc
c000e000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e004:	e8 59 ff ff ff       	call   c000df62 <UnixFile::~UnixFile()>
c000e009:	83 c4 10             	add    esp,0x10
c000e00c:	83 ec 08             	sub    esp,0x8
c000e00f:	6a 0c                	push   0xc
c000e011:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e015:	e8 d1 10 00 00       	call   c000f0eb <operator delete(void*, unsigned long)>
c000e01a:	83 c4 10             	add    esp,0x10
c000e01d:	83 c4 0c             	add    esp,0xc
c000e020:	c3                   	ret    
c000e021:	90                   	nop

c000e022 <ReservedFilename::~ReservedFilename()>:
c000e022:	83 ec 0c             	sub    esp,0xc
c000e025:	ba 88 16 02 c0       	mov    edx,0xc0021688
c000e02a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e02e:	89 10                	mov    DWORD PTR [eax],edx
c000e030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e034:	83 ec 0c             	sub    esp,0xc
c000e037:	50                   	push   eax
c000e038:	e8 25 ff ff ff       	call   c000df62 <UnixFile::~UnixFile()>
c000e03d:	83 c4 10             	add    esp,0x10
c000e040:	90                   	nop
c000e041:	83 c4 0c             	add    esp,0xc
c000e044:	c3                   	ret    
c000e045:	90                   	nop

c000e046 <ReservedFilename::~ReservedFilename()>:
c000e046:	83 ec 0c             	sub    esp,0xc
c000e049:	83 ec 0c             	sub    esp,0xc
c000e04c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e050:	e8 cd ff ff ff       	call   c000e022 <ReservedFilename::~ReservedFilename()>
c000e055:	83 c4 10             	add    esp,0x10
c000e058:	83 ec 08             	sub    esp,0x8
c000e05b:	6a 0c                	push   0xc
c000e05d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e061:	e8 85 10 00 00       	call   c000f0eb <operator delete(void*, unsigned long)>
c000e066:	83 c4 10             	add    esp,0x10
c000e069:	83 c4 0c             	add    esp,0xc
c000e06c:	c3                   	ret    

c000e06d <getFromFileDescriptor(int)>:
c000e06d:	53                   	push   ebx
c000e06e:	83 ec 08             	sub    esp,0x8
c000e071:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e075:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000e07b:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000e081:	7f 33                	jg     c000e0b6 <getFromFileDescriptor(int)+0x49>
c000e083:	83 ec 0c             	sub    esp,0xc
c000e086:	68 f8 48 02 c0       	push   0xc00248f8
c000e08b:	e8 9e 18 01 00       	call   c001f92e <LinkedList<UnixFile>::getFirstElement()>
c000e090:	83 c4 10             	add    esp,0x10
c000e093:	85 c0                	test   eax,eax
c000e095:	75 07                	jne    c000e09e <getFromFileDescriptor(int)+0x31>
c000e097:	31 c0                	xor    eax,eax
c000e099:	e9 98 00 00 00       	jmp    c000e136 <getFromFileDescriptor(int)+0xc9>
c000e09e:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c000e0a1:	0f 84 8f 00 00 00    	je     c000e136 <getFromFileDescriptor(int)+0xc9>
c000e0a7:	52                   	push   edx
c000e0a8:	52                   	push   edx
c000e0a9:	50                   	push   eax
c000e0aa:	68 f8 48 02 c0       	push   0xc00248f8
c000e0af:	e8 24 19 01 00       	call   c001f9d8 <LinkedList<UnixFile>::getNext(UnixFile*)>
c000e0b4:	eb da                	jmp    c000e090 <getFromFileDescriptor(int)+0x23>
c000e0b6:	83 ec 0c             	sub    esp,0xc
c000e0b9:	68 5d 15 02 c0       	push   0xc002155d
c000e0be:	e8 4e 11 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000e0c3:	83 c4 10             	add    esp,0x10
c000e0c6:	a1 ec 48 02 c0       	mov    eax,ds:0xc00248ec
c000e0cb:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c000e0d1:	74 63                	je     c000e136 <getFromFileDescriptor(int)+0xc9>
c000e0d3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000e0d9:	75 17                	jne    c000e0f2 <getFromFileDescriptor(int)+0x85>
c000e0db:	83 ec 0c             	sub    esp,0xc
c000e0de:	68 84 15 02 c0       	push   0xc0021584
c000e0e3:	e8 29 11 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000e0e8:	a1 f0 48 02 c0       	mov    eax,ds:0xc00248f0
c000e0ed:	83 c4 10             	add    esp,0x10
c000e0f0:	eb 44                	jmp    c000e136 <getFromFileDescriptor(int)+0xc9>
c000e0f2:	a1 e8 48 02 c0       	mov    eax,ds:0xc00248e8
c000e0f7:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000e0fd:	74 37                	je     c000e136 <getFromFileDescriptor(int)+0xc9>
c000e0ff:	a1 e4 48 02 c0       	mov    eax,ds:0xc00248e4
c000e104:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c000e10a:	74 2a                	je     c000e136 <getFromFileDescriptor(int)+0xc9>
c000e10c:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000e112:	83 f8 08             	cmp    eax,0x8
c000e115:	77 09                	ja     c000e120 <getFromFileDescriptor(int)+0xb3>
c000e117:	8b 04 85 c0 48 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb740]
c000e11e:	eb 16                	jmp    c000e136 <getFromFileDescriptor(int)+0xc9>
c000e120:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000e126:	83 fb 08             	cmp    ebx,0x8
c000e129:	0f 87 68 ff ff ff    	ja     c000e097 <getFromFileDescriptor(int)+0x2a>
c000e12f:	8b 04 9d 80 48 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdb780]
c000e136:	83 c4 08             	add    esp,0x8
c000e139:	5b                   	pop    ebx
c000e13a:	c3                   	ret    

c000e13b <__static_initialization_and_destruction_0(int, int)>:
c000e13b:	83 ec 0c             	sub    esp,0xc
c000e13e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e143:	75 34                	jne    c000e179 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e145:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c000e14d:	75 2a                	jne    c000e179 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000e14f:	83 ec 0c             	sub    esp,0xc
c000e152:	68 f8 48 02 c0       	push   0xc00248f8
c000e157:	e8 a6 16 01 00       	call   c001f802 <LinkedList<UnixFile>::LinkedList()>
c000e15c:	83 c4 10             	add    esp,0x10
c000e15f:	83 ec 04             	sub    esp,0x4
c000e162:	68 bc 3b 02 c0       	push   0xc0023bbc
c000e167:	68 f8 48 02 c0       	push   0xc00248f8
c000e16c:	68 00 f8 01 c0       	push   0xc001f800
c000e171:	e8 f1 0e 00 00       	call   c000f067 <__cxa_atexit>
c000e176:	83 c4 10             	add    esp,0x10
c000e179:	90                   	nop
c000e17a:	83 c4 0c             	add    esp,0xc
c000e17d:	c3                   	ret    

c000e17e <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000e17e:	83 ec 0c             	sub    esp,0xc
c000e181:	83 ec 08             	sub    esp,0x8
c000e184:	68 ff ff 00 00       	push   0xffff
c000e189:	6a 01                	push   0x1
c000e18b:	e8 ab ff ff ff       	call   c000e13b <__static_initialization_and_destruction_0(int, int)>
c000e190:	83 c4 10             	add    esp,0x10
c000e193:	83 c4 0c             	add    esp,0xc
c000e196:	c3                   	ret    
c000e197:	90                   	nop

c000e198 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000e198:	53                   	push   ebx
c000e199:	8b 15 48 3c 02 c0    	mov    edx,DWORD PTR ds:0xc0023c48
c000e19f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e1a3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e1a7:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000e1ad:	89 c8                	mov    eax,ecx
c000e1af:	d1 e8                	shr    eax,1
c000e1b1:	01 d0                	add    eax,edx
c000e1b3:	83 e1 01             	and    ecx,0x1
c000e1b6:	8a 10                	mov    dl,BYTE PTR [eax]
c000e1b8:	75 09                	jne    c000e1c3 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c000e1ba:	83 e2 f0             	and    edx,0xfffffff0
c000e1bd:	09 da                	or     edx,ebx
c000e1bf:	88 10                	mov    BYTE PTR [eax],dl
c000e1c1:	5b                   	pop    ebx
c000e1c2:	c3                   	ret    
c000e1c3:	c1 e3 04             	shl    ebx,0x4
c000e1c6:	83 e2 0f             	and    edx,0xf
c000e1c9:	09 da                	or     edx,ebx
c000e1cb:	88 10                	mov    BYTE PTR [eax],dl
c000e1cd:	5b                   	pop    ebx
c000e1ce:	c3                   	ret    

c000e1cf <Virt::getPageState(unsigned long)>:
c000e1cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e1d3:	8b 0d 48 3c 02 c0    	mov    ecx,DWORD PTR ds:0xc0023c48
c000e1d9:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c000e1df:	89 d0                	mov    eax,edx
c000e1e1:	d1 e8                	shr    eax,1
c000e1e3:	8a 0c 01             	mov    cl,BYTE PTR [ecx+eax*1]
c000e1e6:	88 c8                	mov    al,cl
c000e1e8:	c0 e8 04             	shr    al,0x4
c000e1eb:	83 e2 01             	and    edx,0x1
c000e1ee:	75 05                	jne    c000e1f5 <Virt::getPageState(unsigned long)+0x26>
c000e1f0:	88 c8                	mov    al,cl
c000e1f2:	83 e0 0f             	and    eax,0xf
c000e1f5:	c3                   	ret    

c000e1f6 <Virt::allocateKernelVirtualPages(int)>:
c000e1f6:	55                   	push   ebp
c000e1f7:	31 ed                	xor    ebp,ebp
c000e1f9:	57                   	push   edi
c000e1fa:	56                   	push   esi
c000e1fb:	53                   	push   ebx
c000e1fc:	31 db                	xor    ebx,ebx
c000e1fe:	83 ec 1c             	sub    esp,0x1c
c000e201:	8b 3d 44 3c 02 c0    	mov    edi,DWORD PTR ds:0xc0023c44
c000e207:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e20b:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e210:	57                   	push   edi
c000e211:	e8 b9 ff ff ff       	call   c000e1cf <Virt::getPageState(unsigned long)>
c000e216:	5a                   	pop    edx
c000e217:	84 c0                	test   al,al
c000e219:	75 3a                	jne    c000e255 <Virt::allocateKernelVirtualPages(int)+0x5f>
c000e21b:	85 db                	test   ebx,ebx
c000e21d:	75 02                	jne    c000e221 <Virt::allocateKernelVirtualPages(int)+0x2b>
c000e21f:	89 fd                	mov    ebp,edi
c000e221:	43                   	inc    ebx
c000e222:	39 f3                	cmp    ebx,esi
c000e224:	74 5a                	je     c000e280 <Virt::allocateKernelVirtualPages(int)+0x8a>
c000e226:	47                   	inc    edi
c000e227:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e22d:	76 31                	jbe    c000e260 <Virt::allocateKernelVirtualPages(int)+0x6a>
c000e22f:	c7 05 44 3c 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023c44,0xc8000
c000e239:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000e23e:	75 28                	jne    c000e268 <Virt::allocateKernelVirtualPages(int)+0x72>
c000e240:	bf 00 80 0c 00       	mov    edi,0xc8000
c000e245:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000e24a:	57                   	push   edi
c000e24b:	e8 7f ff ff ff       	call   c000e1cf <Virt::getPageState(unsigned long)>
c000e250:	5a                   	pop    edx
c000e251:	84 c0                	test   al,al
c000e253:	74 c6                	je     c000e21b <Virt::allocateKernelVirtualPages(int)+0x25>
c000e255:	47                   	inc    edi
c000e256:	31 db                	xor    ebx,ebx
c000e258:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000e25e:	77 cf                	ja     c000e22f <Virt::allocateKernelVirtualPages(int)+0x39>
c000e260:	89 3d 44 3c 02 c0    	mov    DWORD PTR ds:0xc0023c44,edi
c000e266:	eb a8                	jmp    c000e210 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e268:	83 ec 0c             	sub    esp,0xc
c000e26b:	68 9c 16 02 c0       	push   0xc002169c
c000e270:	e8 cb 77 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c000e275:	8b 3d 44 3c 02 c0    	mov    edi,DWORD PTR ds:0xc0023c44
c000e27b:	83 c4 10             	add    esp,0x10
c000e27e:	eb 90                	jmp    c000e210 <Virt::allocateKernelVirtualPages(int)+0x1a>
c000e280:	89 2d 44 3c 02 c0    	mov    DWORD PTR ds:0xc0023c44,ebp
c000e286:	4b                   	dec    ebx
c000e287:	74 5f                	je     c000e2e8 <Virt::allocateKernelVirtualPages(int)+0xf2>
c000e289:	85 f6                	test   esi,esi
c000e28b:	74 3d                	je     c000e2ca <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e28d:	89 e8                	mov    eax,ebp
c000e28f:	31 db                	xor    ebx,ebx
c000e291:	8d 7e ff             	lea    edi,[esi-0x1]
c000e294:	eb 14                	jmp    c000e2aa <Virt::allocateKernelVirtualPages(int)+0xb4>
c000e296:	6a 01                	push   0x1
c000e298:	43                   	inc    ebx
c000e299:	50                   	push   eax
c000e29a:	e8 f9 fe ff ff       	call   c000e198 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e29f:	58                   	pop    eax
c000e2a0:	39 f3                	cmp    ebx,esi
c000e2a2:	5a                   	pop    edx
c000e2a3:	74 25                	je     c000e2ca <Virt::allocateKernelVirtualPages(int)+0xd4>
c000e2a5:	a1 44 3c 02 c0       	mov    eax,ds:0xc0023c44
c000e2aa:	8d 50 01             	lea    edx,[eax+0x1]
c000e2ad:	85 db                	test   ebx,ebx
c000e2af:	89 15 44 3c 02 c0    	mov    DWORD PTR ds:0xc0023c44,edx
c000e2b5:	74 20                	je     c000e2d7 <Virt::allocateKernelVirtualPages(int)+0xe1>
c000e2b7:	39 df                	cmp    edi,ebx
c000e2b9:	75 db                	jne    c000e296 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000e2bb:	6a 03                	push   0x3
c000e2bd:	43                   	inc    ebx
c000e2be:	50                   	push   eax
c000e2bf:	e8 d4 fe ff ff       	call   c000e198 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2c4:	59                   	pop    ecx
c000e2c5:	39 f3                	cmp    ebx,esi
c000e2c7:	58                   	pop    eax
c000e2c8:	75 db                	jne    c000e2a5 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e2ca:	83 c4 1c             	add    esp,0x1c
c000e2cd:	89 e8                	mov    eax,ebp
c000e2cf:	c1 e0 0c             	shl    eax,0xc
c000e2d2:	5b                   	pop    ebx
c000e2d3:	5e                   	pop    esi
c000e2d4:	5f                   	pop    edi
c000e2d5:	5d                   	pop    ebp
c000e2d6:	c3                   	ret    
c000e2d7:	6a 02                	push   0x2
c000e2d9:	bb 01 00 00 00       	mov    ebx,0x1
c000e2de:	50                   	push   eax
c000e2df:	e8 b4 fe ff ff       	call   c000e198 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2e4:	58                   	pop    eax
c000e2e5:	5a                   	pop    edx
c000e2e6:	eb bd                	jmp    c000e2a5 <Virt::allocateKernelVirtualPages(int)+0xaf>
c000e2e8:	6a 04                	push   0x4
c000e2ea:	8d 45 01             	lea    eax,[ebp+0x1]
c000e2ed:	55                   	push   ebp
c000e2ee:	a3 44 3c 02 c0       	mov    ds:0xc0023c44,eax
c000e2f3:	e8 a0 fe ff ff       	call   c000e198 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e2f8:	59                   	pop    ecx
c000e2f9:	5b                   	pop    ebx
c000e2fa:	89 e8                	mov    eax,ebp
c000e2fc:	c1 e0 0c             	shl    eax,0xc
c000e2ff:	83 c4 1c             	add    esp,0x1c
c000e302:	5b                   	pop    ebx
c000e303:	5e                   	pop    esi
c000e304:	5f                   	pop    edi
c000e305:	5d                   	pop    ebp
c000e306:	c3                   	ret    

c000e307 <Virt::virtualMemorySetup()>:
c000e307:	53                   	push   ebx
c000e308:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e30d:	83 ec 08             	sub    esp,0x8
c000e310:	6a 0f                	push   0xf
c000e312:	53                   	push   ebx
c000e313:	43                   	inc    ebx
c000e314:	e8 7f fe ff ff       	call   c000e198 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e319:	59                   	pop    ecx
c000e31a:	58                   	pop    eax
c000e31b:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e321:	75 ed                	jne    c000e310 <Virt::virtualMemorySetup()+0x9>
c000e323:	50                   	push   eax
c000e324:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000e329:	50                   	push   eax
c000e32a:	68 00 00 00 c8       	push   0xc8000000
c000e32f:	68 23 18 02 c0       	push   0xc0021823
c000e334:	e8 d8 0e 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000e339:	58                   	pop    eax
c000e33a:	5a                   	pop    edx
c000e33b:	68 00 f0 ff ef       	push   0xeffff000
c000e340:	68 37 18 02 c0       	push   0xc0021837
c000e345:	e8 c7 0e 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000e34a:	83 c4 10             	add    esp,0x10
c000e34d:	50                   	push   eax
c000e34e:	50                   	push   eax
c000e34f:	6a 00                	push   0x0
c000e351:	53                   	push   ebx
c000e352:	43                   	inc    ebx
c000e353:	e8 40 fe ff ff       	call   c000e198 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e358:	83 c4 10             	add    esp,0x10
c000e35b:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000e361:	75 ea                	jne    c000e34d <Virt::virtualMemorySetup()+0x46>
c000e363:	bb 00 00 0d 00       	mov    ebx,0xd0000
c000e368:	51                   	push   ecx
c000e369:	51                   	push   ecx
c000e36a:	6a 0f                	push   0xf
c000e36c:	53                   	push   ebx
c000e36d:	43                   	inc    ebx
c000e36e:	e8 25 fe ff ff       	call   c000e198 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c000e37c:	75 ea                	jne    c000e368 <Virt::virtualMemorySetup()+0x61>
c000e37e:	83 c4 08             	add    esp,0x8
c000e381:	5b                   	pop    ebx
c000e382:	c3                   	ret    

c000e383 <Virt::getAKernelVAS()>:
c000e383:	a1 04 49 02 c0       	mov    eax,ds:0xc0024904
c000e388:	c3                   	ret    

c000e389 <Virt::setupPageSwapping(int)>:
c000e389:	57                   	push   edi
c000e38a:	56                   	push   esi
c000e38b:	53                   	push   ebx
c000e38c:	83 ec 1c             	sub    esp,0x1c
c000e38f:	68 14 01 00 00       	push   0x114
c000e394:	e8 43 0d 00 00       	call   c000f0dc <operator new(unsigned long)>
c000e399:	83 c4 0c             	add    esp,0xc
c000e39c:	8b 3d f4 5b 02 c0    	mov    edi,DWORD PTR ds:0xc0025bf4
c000e3a2:	89 c6                	mov    esi,eax
c000e3a4:	57                   	push   edi
c000e3a5:	68 4b 18 02 c0       	push   0xc002184b
c000e3aa:	50                   	push   eax
c000e3ab:	e8 98 13 00 00       	call   c000f748 <File::File(char const*, Process*)>
c000e3b0:	89 34 24             	mov    DWORD PTR [esp],esi
c000e3b3:	e8 6c 15 00 00       	call   c000f924 <File::unlink()>
c000e3b8:	58                   	pop    eax
c000e3b9:	5a                   	pop    edx
c000e3ba:	6a 12                	push   0x12
c000e3bc:	56                   	push   esi
c000e3bd:	e8 ea 13 00 00       	call   c000f7ac <File::open(FileOpenMode)>
c000e3c2:	83 c4 10             	add    esp,0x10
c000e3c5:	85 c0                	test   eax,eax
c000e3c7:	0f 85 b6 00 00 00    	jne    c000e483 <Virt::setupPageSwapping(int)+0xfa>
c000e3cd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e3d1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e3d9:	c1 e3 08             	shl    ebx,0x8
c000e3dc:	83 ec 0c             	sub    esp,0xc
c000e3df:	c1 fb 04             	sar    ebx,0x4
c000e3e2:	68 00 00 01 00       	push   0x10000
c000e3e7:	e8 f3 db ff ff       	call   c000bfdf <malloc>
c000e3ec:	83 c4 0c             	add    esp,0xc
c000e3ef:	89 c7                	mov    edi,eax
c000e3f1:	68 00 00 01 00       	push   0x10000
c000e3f6:	6a 00                	push   0x0
c000e3f8:	50                   	push   eax
c000e3f9:	e8 c3 22 ff ff       	call   c00006c1 <memset>
c000e3fe:	83 c4 10             	add    esp,0x10
c000e401:	4b                   	dec    ebx
c000e402:	83 fb ff             	cmp    ebx,0xffffffff
c000e405:	74 4a                	je     c000e451 <Virt::setupPageSwapping(int)+0xc8>
c000e407:	83 ec 0c             	sub    esp,0xc
c000e40a:	8b 06                	mov    eax,DWORD PTR [esi]
c000e40c:	8d 54 24 18          	lea    edx,[esp+0x18]
c000e410:	52                   	push   edx
c000e411:	57                   	push   edi
c000e412:	6a 00                	push   0x0
c000e414:	68 00 00 01 00       	push   0x10000
c000e419:	56                   	push   esi
c000e41a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000e41d:	83 c4 20             	add    esp,0x20
c000e420:	85 c0                	test   eax,eax
c000e422:	75 4d                	jne    c000e471 <Virt::setupPageSwapping(int)+0xe8>
c000e424:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e428:	3d 00 00 01 00       	cmp    eax,0x10000
c000e42d:	74 d2                	je     c000e401 <Virt::setupPageSwapping(int)+0x78>
c000e42f:	52                   	push   edx
c000e430:	4b                   	dec    ebx
c000e431:	52                   	push   edx
c000e432:	50                   	push   eax
c000e433:	68 9e 18 02 c0       	push   0xc002189e
c000e438:	e8 d4 0d 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000e43d:	c7 04 24 a7 18 02 c0 	mov    DWORD PTR [esp],0xc00218a7
c000e444:	e8 f7 75 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c000e449:	83 c4 10             	add    esp,0x10
c000e44c:	83 fb ff             	cmp    ebx,0xffffffff
c000e44f:	75 b6                	jne    c000e407 <Virt::setupPageSwapping(int)+0x7e>
c000e451:	83 ec 0c             	sub    esp,0xc
c000e454:	56                   	push   esi
c000e455:	e8 b0 13 00 00       	call   c000f80a <File::close()>
c000e45a:	89 3c 24             	mov    DWORD PTR [esp],edi
c000e45d:	e8 9d db ff ff       	call   c000bfff <rfree>
c000e462:	8b 06                	mov    eax,DWORD PTR [esi]
c000e464:	89 34 24             	mov    DWORD PTR [esp],esi
c000e467:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e46a:	83 c4 20             	add    esp,0x20
c000e46d:	5b                   	pop    ebx
c000e46e:	5e                   	pop    esi
c000e46f:	5f                   	pop    edi
c000e470:	c3                   	ret    
c000e471:	51                   	push   ecx
c000e472:	51                   	push   ecx
c000e473:	50                   	push   eax
c000e474:	68 86 18 02 c0       	push   0xc0021886
c000e479:	e8 93 0d 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000e47e:	83 c4 10             	add    esp,0x10
c000e481:	eb a1                	jmp    c000e424 <Virt::setupPageSwapping(int)+0x9b>
c000e483:	53                   	push   ebx
c000e484:	53                   	push   ebx
c000e485:	50                   	push   eax
c000e486:	68 62 18 02 c0       	push   0xc0021862
c000e48b:	e8 81 0d 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000e490:	c7 04 24 6b 18 02 c0 	mov    DWORD PTR [esp],0xc002186b
c000e497:	e8 a4 75 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c000e49c:	83 c4 10             	add    esp,0x10
c000e49f:	e9 29 ff ff ff       	jmp    c000e3cd <Virt::setupPageSwapping(int)+0x44>

c000e4a4 <VAS::VAS()>:
c000e4a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4a8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4b3:	a3 04 49 02 c0       	mov    ds:0xc0024904,eax
c000e4b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4bc:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000e4c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4c4:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000e4c7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e4cb:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c000e4d2:	90                   	nop
c000e4d3:	c3                   	ret    

c000e4d4 <VAS::VAS(VAS*)>:
c000e4d4:	83 ec 0c             	sub    esp,0xc
c000e4d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e4db:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	68 bc 16 02 c0       	push   0xc00216bc
c000e4ea:	e8 51 75 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c000e4ef:	83 c4 10             	add    esp,0x10
c000e4f2:	90                   	nop
c000e4f3:	83 c4 0c             	add    esp,0xc
c000e4f6:	c3                   	ret    
c000e4f7:	90                   	nop

c000e4f8 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c000e4f8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e4fc:	89 c2                	mov    edx,eax
c000e4fe:	c1 ea 16             	shr    edx,0x16
c000e501:	c1 e8 0a             	shr    eax,0xa
c000e504:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c000e509:	19 c9                	sbb    ecx,ecx
c000e50b:	25 fc 0f 00 00       	and    eax,0xffc
c000e510:	c1 e2 0c             	shl    edx,0xc
c000e513:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000e519:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000e520:	01 d0                	add    eax,edx
c000e522:	c3                   	ret    
c000e523:	90                   	nop

c000e524 <VAS::getPageTableEntry(unsigned long)>:
c000e524:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e528:	89 ca                	mov    edx,ecx
c000e52a:	c1 ea 16             	shr    edx,0x16
c000e52d:	c1 e9 0a             	shr    ecx,0xa
c000e530:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c000e536:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000e53c:	c1 e0 0c             	shl    eax,0xc
c000e53f:	8d 04 08             	lea    eax,[eax+ecx*1]
c000e542:	c3                   	ret    

c000e543 <Virt::freeKernelVirtualPages(unsigned long)>:
c000e543:	57                   	push   edi
c000e544:	56                   	push   esi
c000e545:	be 01 00 00 00       	mov    esi,0x1
c000e54a:	53                   	push   ebx
c000e54b:	83 ec 10             	sub    esp,0x10
c000e54e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e552:	c1 eb 0c             	shr    ebx,0xc
c000e555:	eb 3e                	jmp    c000e595 <Virt::freeKernelVirtualPages(unsigned long)+0x52>
c000e557:	e8 27 fe ff ff       	call   c000e383 <Virt::getAKernelVAS()>
c000e55c:	51                   	push   ecx
c000e55d:	51                   	push   ecx
c000e55e:	57                   	push   edi
c000e55f:	50                   	push   eax
c000e560:	e8 bf ff ff ff       	call   c000e524 <VAS::getPageTableEntry(unsigned long)>
c000e565:	83 c4 10             	add    esp,0x10
c000e568:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e56c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e56e:	f6 c4 04             	test   ah,0x4
c000e571:	75 5f                	jne    c000e5d2 <Virt::freeKernelVirtualPages(unsigned long)+0x8f>
c000e573:	80 fa 04             	cmp    dl,0x4
c000e576:	74 78                	je     c000e5f0 <Virt::freeKernelVirtualPages(unsigned long)+0xad>
c000e578:	80 fa 02             	cmp    dl,0x2
c000e57b:	0f 84 88 00 00 00    	je     c000e609 <Virt::freeKernelVirtualPages(unsigned long)+0xc6>
c000e581:	80 fa 03             	cmp    dl,0x3
c000e584:	0f 84 ac 00 00 00    	je     c000e636 <Virt::freeKernelVirtualPages(unsigned long)+0xf3>
c000e58a:	fe ca                	dec    dl
c000e58c:	0f 84 92 00 00 00    	je     c000e624 <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e592:	43                   	inc    ebx
c000e593:	31 f6                	xor    esi,esi
c000e595:	53                   	push   ebx
c000e596:	e8 34 fc ff ff       	call   c000e1cf <Virt::getPageState(unsigned long)>
c000e59b:	5f                   	pop    edi
c000e59c:	89 df                	mov    edi,ebx
c000e59e:	c1 e7 0c             	shl    edi,0xc
c000e5a1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000e5a5:	84 c0                	test   al,al
c000e5a7:	75 ae                	jne    c000e557 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000e5a9:	83 ec 0c             	sub    esp,0xc
c000e5ac:	68 ad 18 02 c0       	push   0xc00218ad
c000e5b1:	e8 8a 74 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c000e5b6:	e8 c8 fd ff ff       	call   c000e383 <Virt::getAKernelVAS()>
c000e5bb:	5a                   	pop    edx
c000e5bc:	59                   	pop    ecx
c000e5bd:	57                   	push   edi
c000e5be:	50                   	push   eax
c000e5bf:	e8 60 ff ff ff       	call   c000e524 <VAS::getPageTableEntry(unsigned long)>
c000e5c4:	83 c4 10             	add    esp,0x10
c000e5c7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e5cb:	8b 00                	mov    eax,DWORD PTR [eax]
c000e5cd:	f6 c4 04             	test   ah,0x4
c000e5d0:	74 c0                	je     c000e592 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e5d2:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000e5d6:	83 ec 0c             	sub    esp,0xc
c000e5d9:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e5de:	50                   	push   eax
c000e5df:	e8 44 df ff ff       	call   c000c528 <Phys::freePage(unsigned long)>
c000e5e4:	83 c4 10             	add    esp,0x10
c000e5e7:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000e5eb:	80 fa 04             	cmp    dl,0x4
c000e5ee:	75 88                	jne    c000e578 <Virt::freeKernelVirtualPages(unsigned long)+0x35>
c000e5f0:	89 f0                	mov    eax,esi
c000e5f2:	84 c0                	test   al,al
c000e5f4:	75 46                	jne    c000e63c <Virt::freeKernelVirtualPages(unsigned long)+0xf9>
c000e5f6:	c7 44 24 20 e0 16 02 c0 	mov    DWORD PTR [esp+0x20],0xc00216e0
c000e5fe:	83 c4 10             	add    esp,0x10
c000e601:	5b                   	pop    ebx
c000e602:	5e                   	pop    esi
c000e603:	5f                   	pop    edi
c000e604:	e9 37 74 00 00       	jmp    c0015a40 <Krnl::panic(char const*)>
c000e609:	89 f0                	mov    eax,esi
c000e60b:	84 c0                	test   al,al
c000e60d:	75 15                	jne    c000e624 <Virt::freeKernelVirtualPages(unsigned long)+0xe1>
c000e60f:	83 ec 0c             	sub    esp,0xc
c000e612:	68 c9 18 02 c0       	push   0xc00218c9
c000e617:	e8 24 74 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c000e61c:	83 c4 10             	add    esp,0x10
c000e61f:	e9 6e ff ff ff       	jmp    c000e592 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e624:	50                   	push   eax
c000e625:	50                   	push   eax
c000e626:	6a 00                	push   0x0
c000e628:	53                   	push   ebx
c000e629:	e8 6a fb ff ff       	call   c000e198 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e62e:	83 c4 10             	add    esp,0x10
c000e631:	e9 5c ff ff ff       	jmp    c000e592 <Virt::freeKernelVirtualPages(unsigned long)+0x4f>
c000e636:	89 f0                	mov    eax,esi
c000e638:	84 c0                	test   al,al
c000e63a:	75 14                	jne    c000e650 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000e63c:	52                   	push   edx
c000e63d:	52                   	push   edx
c000e63e:	6a 00                	push   0x0
c000e640:	53                   	push   ebx
c000e641:	e8 52 fb ff ff       	call   c000e198 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000e646:	83 c4 10             	add    esp,0x10
c000e649:	83 c4 10             	add    esp,0x10
c000e64c:	5b                   	pop    ebx
c000e64d:	5e                   	pop    esi
c000e64e:	5f                   	pop    edi
c000e64f:	c3                   	ret    
c000e650:	c7 44 24 20 e5 18 02 c0 	mov    DWORD PTR [esp+0x20],0xc00218e5
c000e658:	83 c4 10             	add    esp,0x10
c000e65b:	5b                   	pop    ebx
c000e65c:	5e                   	pop    esi
c000e65d:	5f                   	pop    edi
c000e65e:	e9 dd 73 00 00       	jmp    c0015a40 <Krnl::panic(char const*)>
c000e663:	90                   	nop

c000e664 <VAS::freeAllocatedPages(unsigned long)>:
c000e664:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e668:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e66c:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c000e670:	74 09                	je     c000e67b <VAS::freeAllocatedPages(unsigned long)+0x17>
c000e672:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e676:	e9 c8 fe ff ff       	jmp    c000e543 <Virt::freeKernelVirtualPages(unsigned long)>
c000e67b:	c7 44 24 04 04 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021704
c000e683:	e9 89 0b 00 00       	jmp    c000f211 <Dbg::kprintf(char const*, ...)>

c000e688 <VAS::virtualToPhysical(unsigned long)>:
c000e688:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e68c:	50                   	push   eax
c000e68d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e691:	52                   	push   edx
c000e692:	e8 8d fe ff ff       	call   c000e524 <VAS::getPageTableEntry(unsigned long)>
c000e697:	59                   	pop    ecx
c000e698:	8b 00                	mov    eax,DWORD PTR [eax]
c000e69a:	5a                   	pop    edx
c000e69b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e6a0:	c3                   	ret    
c000e6a1:	90                   	nop

c000e6a2 <VAS::reflagRange(unsigned long, int, int, int)>:
c000e6a2:	55                   	push   ebp
c000e6a3:	57                   	push   edi
c000e6a4:	56                   	push   esi
c000e6a5:	53                   	push   ebx
c000e6a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e6aa:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000e6ae:	89 c3                	mov    ebx,eax
c000e6b0:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000e6b4:	c1 e3 0c             	shl    ebx,0xc
c000e6b7:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000e6bb:	01 f3                	add    ebx,esi
c000e6bd:	85 c0                	test   eax,eax
c000e6bf:	7e 1f                	jle    c000e6e0 <VAS::reflagRange(unsigned long, int, int, int)+0x3e>
c000e6c1:	56                   	push   esi
c000e6c2:	81 c6 00 10 00 00    	add    esi,0x1000
c000e6c8:	55                   	push   ebp
c000e6c9:	e8 56 fe ff ff       	call   c000e524 <VAS::getPageTableEntry(unsigned long)>
c000e6ce:	5a                   	pop    edx
c000e6cf:	59                   	pop    ecx
c000e6d0:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e6d2:	21 f9                	and    ecx,edi
c000e6d4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e6d8:	09 d1                	or     ecx,edx
c000e6da:	39 f3                	cmp    ebx,esi
c000e6dc:	89 08                	mov    DWORD PTR [eax],ecx
c000e6de:	75 e1                	jne    c000e6c1 <VAS::reflagRange(unsigned long, int, int, int)+0x1f>
c000e6e0:	5b                   	pop    ebx
c000e6e1:	5e                   	pop    esi
c000e6e2:	5f                   	pop    edi
c000e6e3:	5d                   	pop    ebp
c000e6e4:	c3                   	ret    
c000e6e5:	90                   	nop

c000e6e6 <VAS::setToWriteCombining(unsigned long, int)>:
c000e6e6:	83 ec 0c             	sub    esp,0xc
c000e6e9:	e8 e6 61 00 00       	call   c00148d4 <thisCPU()>
c000e6ee:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c000e6f5:	75 04                	jne    c000e6fb <VAS::setToWriteCombining(unsigned long, int)+0x15>
c000e6f7:	83 c4 0c             	add    esp,0xc
c000e6fa:	c3                   	ret    
c000e6fb:	83 ec 0c             	sub    esp,0xc
c000e6fe:	68 80 00 00 00       	push   0x80
c000e703:	6a ff                	push   0xffffffff
c000e705:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e709:	50                   	push   eax
c000e70a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e70e:	52                   	push   edx
c000e70f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e713:	51                   	push   ecx
c000e714:	e8 89 ff ff ff       	call   c000e6a2 <VAS::reflagRange(unsigned long, int, int, int)>
c000e719:	83 c4 20             	add    esp,0x20
c000e71c:	83 c4 0c             	add    esp,0xc
c000e71f:	c3                   	ret    

c000e720 <VAS::mapOtherVASIn(bool, VAS*)>:
c000e720:	83 ec 0c             	sub    esp,0xc
c000e723:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e727:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c000e72c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000e72f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e733:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000e736:	19 c0                	sbb    eax,eax
c000e738:	83 ca 03             	or     edx,0x3
c000e73b:	83 e0 fc             	and    eax,0xfffffffc
c000e73e:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c000e745:	e8 9b 10 01 00       	call   c001f7e5 <CPU::readCR3()>
c000e74a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e74e:	83 c4 0c             	add    esp,0xc
c000e751:	e9 a1 10 01 00       	jmp    c001f7f7 <CPU::writeCR3(unsigned long)>

c000e756 <VAS::~VAS()>:
c000e756:	83 ec 2c             	sub    esp,0x2c
c000e759:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e761:	e8 e3 a2 00 00       	call   c0018a49 <lockScheduler()>
c000e766:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e76b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e76d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e770:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e776:	83 ec 04             	sub    esp,0x4
c000e779:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e77d:	6a 01                	push   0x1
c000e77f:	50                   	push   eax
c000e780:	e8 9b ff ff ff       	call   c000e720 <VAS::mapOtherVASIn(bool, VAS*)>
c000e785:	83 c4 10             	add    esp,0x10
c000e788:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e790:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c000e798:	0f 8f d7 00 00 00    	jg     c000e875 <VAS::~VAS()+0x11f>
c000e79e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7a2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e7a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e7a9:	c1 e2 02             	shl    edx,0x2
c000e7ac:	01 d0                	add    eax,edx
c000e7ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000e7b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e7b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b8:	83 e0 01             	and    eax,0x1
c000e7bb:	0f 84 ab 00 00 00    	je     c000e86c <VAS::~VAS()+0x116>
c000e7c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e7c9:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000e7d1:	7f 75                	jg     c000e848 <VAS::~VAS()+0xf2>
c000e7d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e7d7:	c1 e0 0a             	shl    eax,0xa
c000e7da:	89 c2                	mov    edx,eax
c000e7dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e7e0:	01 d0                	add    eax,edx
c000e7e2:	c1 e0 0c             	shl    eax,0xc
c000e7e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e7e9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e7ee:	8b 00                	mov    eax,DWORD PTR [eax]
c000e7f0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000e7f3:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c000e7f9:	83 ec 04             	sub    esp,0x4
c000e7fc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e800:	6a 01                	push   0x1
c000e802:	50                   	push   eax
c000e803:	e8 f0 fc ff ff       	call   c000e4f8 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c000e808:	83 c4 10             	add    esp,0x10
c000e80b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e80f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e813:	8b 00                	mov    eax,DWORD PTR [eax]
c000e815:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e819:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e81d:	25 01 04 00 00       	and    eax,0x401
c000e822:	3d 01 04 00 00       	cmp    eax,0x401
c000e827:	75 19                	jne    c000e842 <VAS::~VAS()+0xec>
c000e829:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e82d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e832:	83 ec 0c             	sub    esp,0xc
c000e835:	50                   	push   eax
c000e836:	e8 ed dc ff ff       	call   c000c528 <Phys::freePage(unsigned long)>
c000e83b:	83 c4 10             	add    esp,0x10
c000e83e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e842:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000e846:	eb 81                	jmp    c000e7c9 <VAS::~VAS()+0x73>
c000e848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84c:	25 00 04 00 00       	and    eax,0x400
c000e851:	74 19                	je     c000e86c <VAS::~VAS()+0x116>
c000e853:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e857:	25 00 f0 ff ff       	and    eax,0xfffff000
c000e85c:	83 ec 0c             	sub    esp,0xc
c000e85f:	50                   	push   eax
c000e860:	e8 c3 dc ff ff       	call   c000c528 <Phys::freePage(unsigned long)>
c000e865:	83 c4 10             	add    esp,0x10
c000e868:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e86c:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e870:	e9 1b ff ff ff       	jmp    c000e790 <VAS::~VAS()+0x3a>
c000e875:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e879:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000e87c:	83 ec 0c             	sub    esp,0xc
c000e87f:	50                   	push   eax
c000e880:	e8 be fc ff ff       	call   c000e543 <Virt::freeKernelVirtualPages(unsigned long)>
c000e885:	83 c4 10             	add    esp,0x10
c000e888:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e88c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000e88f:	83 ec 0c             	sub    esp,0xc
c000e892:	50                   	push   eax
c000e893:	e8 90 dc ff ff       	call   c000c528 <Phys::freePage(unsigned long)>
c000e898:	83 c4 10             	add    esp,0x10
c000e89b:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000e89f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e8a3:	c1 e0 02             	shl    eax,0x2
c000e8a6:	83 ec 08             	sub    esp,0x8
c000e8a9:	50                   	push   eax
c000e8aa:	68 28 17 02 c0       	push   0xc0021728
c000e8af:	e8 5d 09 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000e8b4:	83 c4 10             	add    esp,0x10
c000e8b7:	e8 8f a1 00 00       	call   c0018a4b <unlockScheduler()>
c000e8bc:	90                   	nop
c000e8bd:	83 c4 2c             	add    esp,0x2c
c000e8c0:	c3                   	ret    
c000e8c1:	90                   	nop

c000e8c2 <VAS::mapPage(unsigned long, unsigned long, int)>:
c000e8c2:	55                   	push   ebp
c000e8c3:	57                   	push   edi
c000e8c4:	56                   	push   esi
c000e8c5:	53                   	push   ebx
c000e8c6:	83 ec 1c             	sub    esp,0x1c
c000e8c9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e8cd:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e8d1:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c000e8d7:	77 08                	ja     c000e8e1 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c000e8d9:	0f 20 d8             	mov    eax,cr3
c000e8dc:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c000e8df:	75 49                	jne    c000e92a <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c000e8e1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e8e5:	09 d8                	or     eax,ebx
c000e8e7:	a9 ff 0f 00 00       	test   eax,0xfff
c000e8ec:	75 59                	jne    c000e947 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c000e8ee:	89 de                	mov    esi,ebx
c000e8f0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e8f3:	c1 ee 16             	shr    esi,0x16
c000e8f6:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c000e8fd:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c000e901:	74 56                	je     c000e959 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c000e903:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c000e909:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e90d:	c1 eb 0a             	shr    ebx,0xa
c000e910:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e914:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c000e91a:	09 d0                	or     eax,edx
c000e91c:	c1 e6 0c             	shl    esi,0xc
c000e91f:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c000e922:	83 c4 1c             	add    esp,0x1c
c000e925:	5b                   	pop    ebx
c000e926:	5e                   	pop    esi
c000e927:	5f                   	pop    edi
c000e928:	5d                   	pop    ebp
c000e929:	c3                   	ret    
c000e92a:	83 ec 0c             	sub    esp,0xc
c000e92d:	68 48 17 02 c0       	push   0xc0021748
c000e932:	e8 da 08 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000e937:	83 c4 10             	add    esp,0x10
c000e93a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e93e:	09 d8                	or     eax,ebx
c000e940:	a9 ff 0f 00 00       	test   eax,0xfff
c000e945:	74 a7                	je     c000e8ee <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e947:	83 ec 0c             	sub    esp,0xc
c000e94a:	68 b0 17 02 c0       	push   0xc00217b0
c000e94f:	e8 ec 70 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c000e954:	83 c4 10             	add    esp,0x10
c000e957:	eb 95                	jmp    c000e8ee <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c000e959:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e95d:	e8 53 dc ff ff       	call   c000c5b5 <Phys::allocatePage()>
c000e962:	89 c5                	mov    ebp,eax
c000e964:	e8 1a fa ff ff       	call   c000e383 <Virt::getAKernelVAS()>
c000e969:	83 ec 0c             	sub    esp,0xc
c000e96c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e970:	6a 01                	push   0x1
c000e972:	e8 7f f8 ff ff       	call   c000e1f6 <Virt::allocateKernelVirtualPages(int)>
c000e977:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000e97e:	6a 01                	push   0x1
c000e980:	50                   	push   eax
c000e981:	55                   	push   ebp
c000e982:	81 cd 07 04 00 00    	or     ebp,0x407
c000e988:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000e98c:	51                   	push   ecx
c000e98d:	e8 22 02 00 00       	call   c000ebb4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e992:	83 c4 1c             	add    esp,0x1c
c000e995:	68 00 10 00 00       	push   0x1000
c000e99a:	6a 00                	push   0x0
c000e99c:	50                   	push   eax
c000e99d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e9a1:	e8 1b 1d ff ff       	call   c00006c1 <memset>
c000e9a6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e9aa:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000e9ad:	e8 91 fb ff ff       	call   c000e543 <Virt::freeKernelVirtualPages(unsigned long)>
c000e9b2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e9b6:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e9b9:	83 c4 10             	add    esp,0x10
c000e9bc:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c000e9bf:	e9 3f ff ff ff       	jmp    c000e903 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c000e9c4 <VAS::allocatePages(int, int)>:
c000e9c4:	55                   	push   ebp
c000e9c5:	57                   	push   edi
c000e9c6:	56                   	push   esi
c000e9c7:	53                   	push   ebx
c000e9c8:	83 ec 1c             	sub    esp,0x1c
c000e9cb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e9cf:	e8 00 5f 00 00       	call   c00148d4 <thisCPU()>
c000e9d4:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000e9da:	83 e0 01             	and    eax,0x1
c000e9dd:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000e9e1:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c000e9e5:	0f 85 d5 00 00 00    	jne    c000eac0 <VAS::allocatePages(int, int)+0xfc>
c000e9eb:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000e9ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e9f2:	85 c0                	test   eax,eax
c000e9f4:	0f 84 aa 00 00 00    	je     c000eaa4 <VAS::allocatePages(int, int)+0xe0>
c000e9fa:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000e9fe:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea02:	c1 e6 0c             	shl    esi,0xc
c000ea05:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000ea09:	01 de                	add    esi,ebx
c000ea0b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ea0f:	81 cd 00 04 00 00    	or     ebp,0x400
c000ea15:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c000ea18:	85 c0                	test   eax,eax
c000ea1a:	7e 25                	jle    c000ea41 <VAS::allocatePages(int, int)+0x7d>
c000ea1c:	e8 94 db ff ff       	call   c000c5b5 <Phys::allocatePage()>
c000ea21:	55                   	push   ebp
c000ea22:	53                   	push   ebx
c000ea23:	50                   	push   eax
c000ea24:	57                   	push   edi
c000ea25:	e8 98 fe ff ff       	call   c000e8c2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ea2a:	83 c4 10             	add    esp,0x10
c000ea2d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea32:	74 03                	je     c000ea37 <VAS::allocatePages(int, int)+0x73>
c000ea34:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea37:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea3d:	39 de                	cmp    esi,ebx
c000ea3f:	75 db                	jne    c000ea1c <VAS::allocatePages(int, int)+0x58>
c000ea41:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ea46:	74 3f                	je     c000ea87 <VAS::allocatePages(int, int)+0xc3>
c000ea48:	c1 ee 0a             	shr    esi,0xa
c000ea4b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000ea4f:	c1 eb 0a             	shr    ebx,0xa
c000ea52:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c000ea58:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000ea5e:	81 ee 00 00 40 00    	sub    esi,0x400000
c000ea64:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ea6a:	39 f3                	cmp    ebx,esi
c000ea6c:	77 0d                	ja     c000ea7b <VAS::allocatePages(int, int)+0xb7>
c000ea6e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ea71:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ea77:	39 de                	cmp    esi,ebx
c000ea79:	73 f3                	jae    c000ea6e <VAS::allocatePages(int, int)+0xaa>
c000ea7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea7f:	83 c4 1c             	add    esp,0x1c
c000ea82:	5b                   	pop    ebx
c000ea83:	5e                   	pop    esi
c000ea84:	5f                   	pop    edi
c000ea85:	5d                   	pop    ebp
c000ea86:	c3                   	ret    
c000ea87:	e8 59 0d 01 00       	call   c001f7e5 <CPU::readCR3()>
c000ea8c:	83 ec 0c             	sub    esp,0xc
c000ea8f:	50                   	push   eax
c000ea90:	e8 62 0d 01 00       	call   c001f7f7 <CPU::writeCR3(unsigned long)>
c000ea95:	83 c4 10             	add    esp,0x10
c000ea98:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea9c:	83 c4 1c             	add    esp,0x1c
c000ea9f:	5b                   	pop    ebx
c000eaa0:	5e                   	pop    esi
c000eaa1:	5f                   	pop    edi
c000eaa2:	5d                   	pop    ebp
c000eaa3:	c3                   	ret    
c000eaa4:	83 ec 0c             	sub    esp,0xc
c000eaa7:	68 d4 17 02 c0       	push   0xc00217d4
c000eaac:	e8 8f 6f 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c000eab1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000eab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eab8:	83 c4 10             	add    esp,0x10
c000eabb:	e9 3a ff ff ff       	jmp    c000e9fa <VAS::allocatePages(int, int)+0x36>
c000eac0:	83 ec 0c             	sub    esp,0xc
c000eac3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000eac7:	53                   	push   ebx
c000eac8:	e8 29 f7 ff ff       	call   c000e1f6 <Virt::allocateKernelVirtualPages(int)>
c000eacd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ead1:	83 c4 10             	add    esp,0x10
c000ead4:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c000ead9:	0f 87 94 00 00 00    	ja     c000eb73 <VAS::allocatePages(int, int)+0x1af>
c000eadf:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000eae3:	85 d2                	test   edx,edx
c000eae5:	7e 3c                	jle    c000eb23 <VAS::allocatePages(int, int)+0x15f>
c000eae7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eaeb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000eaef:	c1 e5 0c             	shl    ebp,0xc
c000eaf2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000eaf6:	81 ce 00 04 00 00    	or     esi,0x400
c000eafc:	01 dd                	add    ebp,ebx
c000eafe:	e8 b2 da ff ff       	call   c000c5b5 <Phys::allocatePage()>
c000eb03:	56                   	push   esi
c000eb04:	53                   	push   ebx
c000eb05:	50                   	push   eax
c000eb06:	57                   	push   edi
c000eb07:	e8 b6 fd ff ff       	call   c000e8c2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000eb0c:	83 c4 10             	add    esp,0x10
c000eb0f:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb14:	74 03                	je     c000eb19 <VAS::allocatePages(int, int)+0x155>
c000eb16:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb19:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb1f:	39 dd                	cmp    ebp,ebx
c000eb21:	75 db                	jne    c000eafe <VAS::allocatePages(int, int)+0x13a>
c000eb23:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000eb28:	0f 84 59 ff ff ff    	je     c000ea87 <VAS::allocatePages(int, int)+0xc3>
c000eb2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eb32:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eb36:	c1 e0 0c             	shl    eax,0xc
c000eb39:	89 d3                	mov    ebx,edx
c000eb3b:	c1 eb 0a             	shr    ebx,0xa
c000eb3e:	01 d0                	add    eax,edx
c000eb40:	c1 e8 0a             	shr    eax,0xa
c000eb43:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000eb49:	25 00 f0 ff ff       	and    eax,0xfffff000
c000eb4e:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000eb54:	2d 00 00 40 00       	sub    eax,0x400000
c000eb59:	39 c3                	cmp    ebx,eax
c000eb5b:	0f 87 1a ff ff ff    	ja     c000ea7b <VAS::allocatePages(int, int)+0xb7>
c000eb61:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000eb64:	81 c3 00 10 00 00    	add    ebx,0x1000
c000eb6a:	39 d8                	cmp    eax,ebx
c000eb6c:	73 f3                	jae    c000eb61 <VAS::allocatePages(int, int)+0x19d>
c000eb6e:	e9 08 ff ff ff       	jmp    c000ea7b <VAS::allocatePages(int, int)+0xb7>
c000eb73:	e8 5c 5d 00 00       	call   c00148d4 <thisCPU()>
c000eb78:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c000eb7f:	0f 84 5a ff ff ff    	je     c000eadf <VAS::allocatePages(int, int)+0x11b>
c000eb85:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000eb89:	80 cd 01             	or     ch,0x1
c000eb8c:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c000eb90:	e9 4a ff ff ff       	jmp    c000eadf <VAS::allocatePages(int, int)+0x11b>
c000eb95:	90                   	nop

c000eb96 <VAS::setCPUSpecific(unsigned long)>:
c000eb96:	83 ec 0c             	sub    esp,0xc
c000eb99:	6a 05                	push   0x5
c000eb9b:	68 00 00 40 c2       	push   0xc2400000
c000eba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eba4:	50                   	push   eax
c000eba5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eba9:	52                   	push   edx
c000ebaa:	e8 13 fd ff ff       	call   c000e8c2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ebaf:	83 c4 1c             	add    esp,0x1c
c000ebb2:	c3                   	ret    
c000ebb3:	90                   	nop

c000ebb4 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c000ebb4:	55                   	push   ebp
c000ebb5:	57                   	push   edi
c000ebb6:	56                   	push   esi
c000ebb7:	53                   	push   ebx
c000ebb8:	83 ec 1c             	sub    esp,0x1c
c000ebbb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000ebbf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ebc3:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c000ebc7:	e8 08 5d 00 00       	call   c00148d4 <thisCPU()>
c000ebcc:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c000ebd2:	83 e0 01             	and    eax,0x1
c000ebd5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000ebd9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebdd:	85 c0                	test   eax,eax
c000ebdf:	7e 39                	jle    c000ec1a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x66>
c000ebe1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebe5:	89 f3                	mov    ebx,esi
c000ebe7:	c1 e0 0c             	shl    eax,0xc
c000ebea:	01 f0                	add    eax,esi
c000ebec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ebf0:	55                   	push   ebp
c000ebf1:	53                   	push   ebx
c000ebf2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ebf6:	29 f0                	sub    eax,esi
c000ebf8:	01 d8                	add    eax,ebx
c000ebfa:	50                   	push   eax
c000ebfb:	57                   	push   edi
c000ebfc:	e8 c1 fc ff ff       	call   c000e8c2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ec01:	83 c4 10             	add    esp,0x10
c000ec04:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ec09:	74 03                	je     c000ec0e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x5a>
c000ec0b:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ec0e:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ec14:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c000ec18:	75 d6                	jne    c000ebf0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x3c>
c000ec1a:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000ec1f:	74 42                	je     c000ec63 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xaf>
c000ec21:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ec25:	89 f3                	mov    ebx,esi
c000ec27:	c1 e0 0c             	shl    eax,0xc
c000ec2a:	c1 eb 0a             	shr    ebx,0xa
c000ec2d:	01 f0                	add    eax,esi
c000ec2f:	c1 e8 0a             	shr    eax,0xa
c000ec32:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000ec38:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ec3d:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000ec43:	2d 00 00 40 00       	sub    eax,0x400000
c000ec48:	39 c3                	cmp    ebx,eax
c000ec4a:	77 0d                	ja     c000ec59 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xa5>
c000ec4c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000ec4f:	81 c3 00 10 00 00    	add    ebx,0x1000
c000ec55:	39 d8                	cmp    eax,ebx
c000ec57:	73 f3                	jae    c000ec4c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x98>
c000ec59:	83 c4 1c             	add    esp,0x1c
c000ec5c:	89 f0                	mov    eax,esi
c000ec5e:	5b                   	pop    ebx
c000ec5f:	5e                   	pop    esi
c000ec60:	5f                   	pop    edi
c000ec61:	5d                   	pop    ebp
c000ec62:	c3                   	ret    
c000ec63:	e8 7d 0b 01 00       	call   c001f7e5 <CPU::readCR3()>
c000ec68:	83 ec 0c             	sub    esp,0xc
c000ec6b:	50                   	push   eax
c000ec6c:	e8 86 0b 01 00       	call   c001f7f7 <CPU::writeCR3(unsigned long)>
c000ec71:	83 c4 10             	add    esp,0x10
c000ec74:	89 f0                	mov    eax,esi
c000ec76:	83 c4 1c             	add    esp,0x1c
c000ec79:	5b                   	pop    ebx
c000ec7a:	5e                   	pop    esi
c000ec7b:	5f                   	pop    edi
c000ec7c:	5d                   	pop    ebp
c000ec7d:	c3                   	ret    

c000ec7e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c000ec7e:	55                   	push   ebp
c000ec7f:	57                   	push   edi
c000ec80:	56                   	push   esi
c000ec81:	53                   	push   ebx
c000ec82:	83 ec 1c             	sub    esp,0x1c
c000ec85:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ec89:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ec8d:	09 f0                	or     eax,esi
c000ec8f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ec93:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ec97:	a9 ff 0f 00 00       	test   eax,0xfff
c000ec9c:	75 4c                	jne    c000ecea <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6c>
c000ec9e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000eca2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000eca5:	c1 eb 16             	shr    ebx,0x16
c000eca8:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c000ecaf:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c000ecb3:	74 4f                	je     c000ed04 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x86>
c000ecb5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ecb9:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c000ecbd:	c1 e8 0a             	shr    eax,0xa
c000ecc0:	80 fa 01             	cmp    dl,0x1
c000ecc3:	19 d2                	sbb    edx,edx
c000ecc5:	25 fc 0f 00 00       	and    eax,0xffc
c000ecca:	c1 e3 0c             	shl    ebx,0xc
c000eccd:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c000ecd3:	01 d8                	add    eax,ebx
c000ecd5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000ecd9:	09 d9                	or     ecx,ebx
c000ecdb:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c000ece2:	83 c4 1c             	add    esp,0x1c
c000ece5:	5b                   	pop    ebx
c000ece6:	5e                   	pop    esi
c000ece7:	5f                   	pop    edi
c000ece8:	5d                   	pop    ebp
c000ece9:	c3                   	ret    
c000ecea:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ecee:	83 ec 0c             	sub    esp,0xc
c000ecf1:	68 00 18 02 c0       	push   0xc0021800
c000ecf6:	e8 45 6d 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c000ecfb:	83 c4 10             	add    esp,0x10
c000ecfe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ed02:	eb 9a                	jmp    c000ec9e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c000ed04:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ed08:	e8 a8 d8 ff ff       	call   c000c5b5 <Phys::allocatePage()>
c000ed0d:	89 c5                	mov    ebp,eax
c000ed0f:	e8 6f f6 ff ff       	call   c000e383 <Virt::getAKernelVAS()>
c000ed14:	83 ec 0c             	sub    esp,0xc
c000ed17:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ed1b:	6a 01                	push   0x1
c000ed1d:	e8 d4 f4 ff ff       	call   c000e1f6 <Virt::allocateKernelVirtualPages(int)>
c000ed22:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000ed29:	6a 01                	push   0x1
c000ed2b:	50                   	push   eax
c000ed2c:	55                   	push   ebp
c000ed2d:	81 cd 07 04 00 00    	or     ebp,0x407
c000ed33:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000ed37:	51                   	push   ecx
c000ed38:	e8 77 fe ff ff       	call   c000ebb4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ed3d:	83 c4 1c             	add    esp,0x1c
c000ed40:	68 00 10 00 00       	push   0x1000
c000ed45:	6a 00                	push   0x0
c000ed47:	50                   	push   eax
c000ed48:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ed4c:	e8 70 19 ff ff       	call   c00006c1 <memset>
c000ed51:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ed55:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000ed58:	e8 e6 f7 ff ff       	call   c000e543 <Virt::freeKernelVirtualPages(unsigned long)>
c000ed5d:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ed60:	83 c4 10             	add    esp,0x10
c000ed63:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ed67:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000ed6a:	e9 46 ff ff ff       	jmp    c000ecb5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000ed6f:	90                   	nop

c000ed70 <VAS::VAS(bool)>:
c000ed70:	53                   	push   ebx
c000ed71:	83 ec 28             	sub    esp,0x28
c000ed74:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed78:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000ed7c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed80:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000ed87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed8b:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000ed8f:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000ed92:	e8 1e d8 ff ff       	call   c000c5b5 <Phys::allocatePage()>
c000ed97:	89 c2                	mov    edx,eax
c000ed99:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ed9d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000eda0:	e8 de f5 ff ff       	call   c000e383 <Virt::getAKernelVAS()>
c000eda5:	89 c3                	mov    ebx,eax
c000eda7:	83 ec 0c             	sub    esp,0xc
c000edaa:	6a 01                	push   0x1
c000edac:	e8 45 f4 ff ff       	call   c000e1f6 <Virt::allocateKernelVirtualPages(int)>
c000edb1:	83 c4 10             	add    esp,0x10
c000edb4:	89 c2                	mov    edx,eax
c000edb6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000edbd:	83 ec 0c             	sub    esp,0xc
c000edc0:	6a 03                	push   0x3
c000edc2:	6a 01                	push   0x1
c000edc4:	52                   	push   edx
c000edc5:	50                   	push   eax
c000edc6:	53                   	push   ebx
c000edc7:	e8 e8 fd ff ff       	call   c000ebb4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000edcc:	83 c4 20             	add    esp,0x20
c000edcf:	89 c2                	mov    edx,eax
c000edd1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edd5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000edd8:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ede0:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000ede8:	7f 1c                	jg     c000ee06 <VAS::VAS(bool)+0x96>
c000edea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000edf1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000edf5:	c1 e2 02             	shl    edx,0x2
c000edf8:	01 d0                	add    eax,edx
c000edfa:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ee00:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000ee04:	eb da                	jmp    c000ede0 <VAS::VAS(bool)+0x70>
c000ee06:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000ee0e:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000ee16:	7f 71                	jg     c000ee89 <VAS::VAS(bool)+0x119>
c000ee18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee1c:	2d 00 02 00 00       	sub    eax,0x200
c000ee21:	c1 e0 0c             	shl    eax,0xc
c000ee24:	83 c8 03             	or     eax,0x3
c000ee27:	89 c3                	mov    ebx,eax
c000ee29:	e8 a6 5a 00 00       	call   c00148d4 <thisCPU()>
c000ee2e:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee34:	83 e0 10             	and    eax,0x10
c000ee37:	84 c0                	test   al,al
c000ee39:	74 07                	je     c000ee42 <VAS::VAS(bool)+0xd2>
c000ee3b:	b8 00 01 00 00       	mov    eax,0x100
c000ee40:	eb 05                	jmp    c000ee47 <VAS::VAS(bool)+0xd7>
c000ee42:	b8 00 00 00 00       	mov    eax,0x0
c000ee47:	09 d8                	or     eax,ebx
c000ee49:	89 c1                	mov    ecx,eax
c000ee4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee4f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee52:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee56:	c1 e2 02             	shl    edx,0x2
c000ee59:	01 d0                	add    eax,edx
c000ee5b:	89 ca                	mov    edx,ecx
c000ee5d:	89 10                	mov    DWORD PTR [eax],edx
c000ee5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee63:	2d 40 03 00 00       	sub    eax,0x340
c000ee68:	83 f8 7f             	cmp    eax,0x7f
c000ee6b:	77 16                	ja     c000ee83 <VAS::VAS(bool)+0x113>
c000ee6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee71:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ee74:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ee78:	c1 e2 02             	shl    edx,0x2
c000ee7b:	01 d0                	add    eax,edx
c000ee7d:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000ee83:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000ee87:	eb 85                	jmp    c000ee0e <VAS::VAS(bool)+0x9e>
c000ee89:	e8 46 5a 00 00       	call   c00148d4 <thisCPU()>
c000ee8e:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000ee94:	83 e0 10             	and    eax,0x10
c000ee97:	84 c0                	test   al,al
c000ee99:	74 07                	je     c000eea2 <VAS::VAS(bool)+0x132>
c000ee9b:	b8 03 41 00 00       	mov    eax,0x4103
c000eea0:	eb 05                	jmp    c000eea7 <VAS::VAS(bool)+0x137>
c000eea2:	b8 03 40 00 00       	mov    eax,0x4003
c000eea7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000eeab:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000eeae:	81 c2 20 0c 00 00    	add    edx,0xc20
c000eeb4:	89 02                	mov    DWORD PTR [edx],eax
c000eeb6:	e8 19 5a 00 00       	call   c00148d4 <thisCPU()>
c000eebb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000eec1:	83 ec 08             	sub    esp,0x8
c000eec4:	50                   	push   eax
c000eec5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eec9:	e8 c8 fc ff ff       	call   c000eb96 <VAS::setCPUSpecific(unsigned long)>
c000eece:	83 c4 10             	add    esp,0x10
c000eed1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eed5:	8b 58 0c             	mov    ebx,DWORD PTR [eax+0xc]
c000eed8:	e8 f7 59 00 00       	call   c00148d4 <thisCPU()>
c000eedd:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c000eee3:	83 e0 10             	and    eax,0x10
c000eee6:	84 c0                	test   al,al
c000eee8:	74 07                	je     c000eef1 <VAS::VAS(bool)+0x181>
c000eeea:	b8 00 01 00 00       	mov    eax,0x100
c000eeef:	eb 05                	jmp    c000eef6 <VAS::VAS(bool)+0x186>
c000eef1:	b8 00 00 00 00       	mov    eax,0x0
c000eef6:	09 d8                	or     eax,ebx
c000eef8:	89 c2                	mov    edx,eax
c000eefa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eefe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000ef01:	05 fc 0f 00 00       	add    eax,0xffc
c000ef06:	83 ca 03             	or     edx,0x3
c000ef09:	89 10                	mov    DWORD PTR [eax],edx
c000ef0b:	e8 c4 59 00 00       	call   c00148d4 <thisCPU()>
c000ef10:	83 ec 0c             	sub    esp,0xc
c000ef13:	50                   	push   eax
c000ef14:	e8 ef 19 00 00       	call   c0010908 <Device::getName()>
c000ef19:	83 c4 10             	add    esp,0x10
c000ef1c:	83 ec 08             	sub    esp,0x8
c000ef1f:	68 ff 18 02 c0       	push   0xc00218ff
c000ef24:	50                   	push   eax
c000ef25:	e8 87 18 ff ff       	call   c00007b1 <strcmp>
c000ef2a:	83 c4 10             	add    esp,0x10
c000ef2d:	85 c0                	test   eax,eax
c000ef2f:	0f 94 c0             	sete   al
c000ef32:	84 c0                	test   al,al
c000ef34:	74 64                	je     c000ef9a <VAS::VAS(bool)+0x22a>
c000ef36:	e8 ec 9a 00 00       	call   c0018a27 <disableIRQs()>
c000ef3b:	e8 94 59 00 00       	call   c00148d4 <thisCPU()>
c000ef40:	05 7c 09 00 00       	add    eax,0x97c
c000ef45:	83 ec 0c             	sub    esp,0xc
c000ef48:	50                   	push   eax
c000ef49:	e8 04 cb ff ff       	call   c000ba52 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ef4e:	83 c4 10             	add    esp,0x10
c000ef51:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ef56:	89 c3                	mov    ebx,eax
c000ef58:	e8 77 59 00 00       	call   c00148d4 <thisCPU()>
c000ef5d:	05 7c 09 00 00       	add    eax,0x97c
c000ef62:	83 ec 0c             	sub    esp,0xc
c000ef65:	50                   	push   eax
c000ef66:	e8 e7 ca ff ff       	call   c000ba52 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000ef6b:	83 c4 10             	add    esp,0x10
c000ef6e:	83 ec 08             	sub    esp,0x8
c000ef71:	50                   	push   eax
c000ef72:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ef76:	e8 a9 f5 ff ff       	call   c000e524 <VAS::getPageTableEntry(unsigned long)>
c000ef7b:	83 c4 10             	add    esp,0x10
c000ef7e:	8b 00                	mov    eax,DWORD PTR [eax]
c000ef80:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ef85:	6a 11                	push   0x11
c000ef87:	53                   	push   ebx
c000ef88:	50                   	push   eax
c000ef89:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ef8d:	e8 30 f9 ff ff       	call   c000e8c2 <VAS::mapPage(unsigned long, unsigned long, int)>
c000ef92:	83 c4 10             	add    esp,0x10
c000ef95:	e8 a0 9a 00 00       	call   c0018a3a <enableIRQs()>
c000ef9a:	90                   	nop
c000ef9b:	83 c4 28             	add    esp,0x28
c000ef9e:	5b                   	pop    ebx
c000ef9f:	c3                   	ret    

c000efa0 <mapVASFirstTime>:
c000efa0:	55                   	push   ebp
c000efa1:	57                   	push   edi
c000efa2:	56                   	push   esi
c000efa3:	53                   	push   ebx
c000efa4:	83 ec 0c             	sub    esp,0xc
c000efa7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000efac:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000efaf:	4a                   	dec    edx
c000efb0:	0f 84 99 00 00 00    	je     c000f04f <mapVASFirstTime+0xaf>
c000efb6:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c000efb9:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c000efbc:	c1 e5 15             	shl    ebp,0x15
c000efbf:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000efc4:	be 00 c0 e7 01       	mov    esi,0x1e7c000
c000efc9:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c000efcf:	29 eb                	sub    ebx,ebp
c000efd1:	29 ee                	sub    esi,ebp
c000efd3:	e8 dd d5 ff ff       	call   c000c5b5 <Phys::allocatePage()>
c000efd8:	83 ec 0c             	sub    esp,0xc
c000efdb:	68 03 04 00 00       	push   0x403
c000efe0:	6a 01                	push   0x1
c000efe2:	53                   	push   ebx
c000efe3:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000efe9:	50                   	push   eax
c000efea:	57                   	push   edi
c000efeb:	e8 c4 fb ff ff       	call   c000ebb4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000eff0:	83 c4 20             	add    esp,0x20
c000eff3:	39 f3                	cmp    ebx,esi
c000eff5:	75 dc                	jne    c000efd3 <mapVASFirstTime+0x33>
c000eff7:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c000effc:	be 00 f0 ff 01       	mov    esi,0x1fff000
c000f001:	29 e8                	sub    eax,ebp
c000f003:	29 ee                	sub    esi,ebp
c000f005:	89 c5                	mov    ebp,eax
c000f007:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c000f00b:	19 db                	sbb    ebx,ebx
c000f00d:	e8 a3 d5 ff ff       	call   c000c5b5 <Phys::allocatePage()>
c000f012:	83 e3 04             	and    ebx,0x4
c000f015:	83 ec 0c             	sub    esp,0xc
c000f018:	81 c3 03 04 00 00    	add    ebx,0x403
c000f01e:	53                   	push   ebx
c000f01f:	6a 01                	push   0x1
c000f021:	56                   	push   esi
c000f022:	81 ee 00 10 00 00    	sub    esi,0x1000
c000f028:	50                   	push   eax
c000f029:	57                   	push   edi
c000f02a:	e8 85 fb ff ff       	call   c000ebb4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000f02f:	83 c4 20             	add    esp,0x20
c000f032:	39 f5                	cmp    ebp,esi
c000f034:	75 d1                	jne    c000f007 <mapVASFirstTime+0x67>
c000f036:	e8 aa 07 01 00       	call   c001f7e5 <CPU::readCR3()>
c000f03b:	83 ec 0c             	sub    esp,0xc
c000f03e:	50                   	push   eax
c000f03f:	e8 b3 07 01 00       	call   c001f7f7 <CPU::writeCR3(unsigned long)>
c000f044:	83 c4 10             	add    esp,0x10
c000f047:	83 c4 0c             	add    esp,0xc
c000f04a:	5b                   	pop    ebx
c000f04b:	5e                   	pop    esi
c000f04c:	5f                   	pop    edi
c000f04d:	5d                   	pop    ebp
c000f04e:	c3                   	ret    
c000f04f:	83 ec 0c             	sub    esp,0xc
c000f052:	68 0d 19 02 c0       	push   0xc002190d
c000f057:	e8 b5 01 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000f05c:	83 c4 10             	add    esp,0x10
c000f05f:	83 c4 0c             	add    esp,0xc
c000f062:	5b                   	pop    ebx
c000f063:	5e                   	pop    esi
c000f064:	5f                   	pop    edi
c000f065:	5d                   	pop    ebp
c000f066:	c3                   	ret    

c000f067 <__cxa_atexit>:
c000f067:	31 c0                	xor    eax,eax
c000f069:	c3                   	ret    

c000f06a <__cxa_finalize>:
c000f06a:	c3                   	ret    

c000f06b <__stack_chk_fail>:
c000f06b:	55                   	push   ebp
c000f06c:	89 e5                	mov    ebp,esp
c000f06e:	83 ec 10             	sub    esp,0x10
c000f071:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000f074:	68 26 19 02 c0       	push   0xc0021926
c000f079:	e8 93 01 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000f07e:	58                   	pop    eax
c000f07f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f082:	5a                   	pop    edx
c000f083:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f086:	68 26 19 02 c0       	push   0xc0021926
c000f08b:	e8 81 01 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000f090:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f093:	59                   	pop    ecx
c000f094:	5a                   	pop    edx
c000f095:	8b 00                	mov    eax,DWORD PTR [eax]
c000f097:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f09a:	68 26 19 02 c0       	push   0xc0021926
c000f09f:	e8 6d 01 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000f0a4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f0a7:	59                   	pop    ecx
c000f0a8:	5a                   	pop    edx
c000f0a9:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0ab:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0ad:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000f0b0:	68 26 19 02 c0       	push   0xc0021926
c000f0b5:	e8 57 01 00 00       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c000f0ba:	c7 04 24 2e 19 02 c0 	mov    DWORD PTR [esp],0xc002192e
c000f0c1:	e8 7a 69 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c000f0c6:	83 c4 10             	add    esp,0x10
c000f0c9:	c9                   	leave  
c000f0ca:	c3                   	ret    

c000f0cb <__cxa_pure_virtual>:
c000f0cb:	83 ec 18             	sub    esp,0x18
c000f0ce:	68 46 19 02 c0       	push   0xc0021946
c000f0d3:	e8 68 69 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c000f0d8:	83 c4 1c             	add    esp,0x1c
c000f0db:	c3                   	ret    

c000f0dc <operator new(unsigned long)>:
c000f0dc:	e9 fe ce ff ff       	jmp    c000bfdf <malloc>

c000f0e1 <operator new[](unsigned long)>:
c000f0e1:	e9 f9 ce ff ff       	jmp    c000bfdf <malloc>

c000f0e6 <operator delete(void*)>:
c000f0e6:	e9 14 cf ff ff       	jmp    c000bfff <rfree>

c000f0eb <operator delete(void*, unsigned long)>:
c000f0eb:	e9 0f cf ff ff       	jmp    c000bfff <rfree>

c000f0f0 <operator delete[](void*)>:
c000f0f0:	e9 0a cf ff ff       	jmp    c000bfff <rfree>

c000f0f5 <operator delete[](void*, unsigned long)>:
c000f0f5:	e9 05 cf ff ff       	jmp    c000bfff <rfree>

c000f0fa <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000f0fa:	57                   	push   edi
c000f0fb:	56                   	push   esi
c000f0fc:	be 5d 19 02 c0       	mov    esi,0xc002195d
c000f101:	53                   	push   ebx
c000f102:	83 ec 40             	sub    esp,0x40
c000f105:	a0 5c 19 02 c0       	mov    al,ds:0xc002195c
c000f10a:	8d 7c 24 02          	lea    edi,[esp+0x2]
c000f10e:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c000f112:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000f116:	b8 3e 00 00 00       	mov    eax,0x3e
c000f11b:	f7 c7 02 00 00 00    	test   edi,0x2
c000f121:	75 69                	jne    c000f18c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x92>
c000f123:	89 c1                	mov    ecx,eax
c000f125:	c1 e9 02             	shr    ecx,0x2
c000f128:	fc                   	cld    
c000f129:	31 d2                	xor    edx,edx
c000f12b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f12d:	a8 02                	test   al,0x2
c000f12f:	74 0b                	je     c000f13c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x42>
c000f131:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f134:	66 89 17             	mov    WORD PTR [edi],dx
c000f137:	ba 02 00 00 00       	mov    edx,0x2
c000f13c:	a8 01                	test   al,0x1
c000f13e:	74 06                	je     c000f146 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000f140:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000f143:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000f146:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c000f14a:	83 f9 3e             	cmp    ecx,0x3e
c000f14d:	7e 05                	jle    c000f154 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5a>
c000f14f:	b9 3e 00 00 00       	mov    ecx,0x3e
c000f154:	89 df                	mov    edi,ebx
c000f156:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000f15a:	eb 02                	jmp    c000f15e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x64>
c000f15c:	89 c7                	mov    edi,eax
c000f15e:	31 d2                	xor    edx,edx
c000f160:	89 f8                	mov    eax,edi
c000f162:	46                   	inc    esi
c000f163:	f7 f1                	div    ecx
c000f165:	39 cf                	cmp    edi,ecx
c000f167:	73 f3                	jae    c000f15c <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x62>
c000f169:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000f16c:	eb 02                	jmp    c000f170 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x76>
c000f16e:	89 c3                	mov    ebx,eax
c000f170:	31 d2                	xor    edx,edx
c000f172:	89 d8                	mov    eax,ebx
c000f174:	f7 f1                	div    ecx
c000f176:	4e                   	dec    esi
c000f177:	39 cb                	cmp    ebx,ecx
c000f179:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c000f17d:	88 16                	mov    BYTE PTR [esi],dl
c000f17f:	73 ed                	jae    c000f16e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x74>
c000f181:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000f185:	83 c4 40             	add    esp,0x40
c000f188:	5b                   	pop    ebx
c000f189:	5e                   	pop    esi
c000f18a:	5f                   	pop    edi
c000f18b:	c3                   	ret    
c000f18c:	66 8b 16             	mov    dx,WORD PTR [esi]
c000f18f:	83 c7 02             	add    edi,0x2
c000f192:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000f196:	83 c6 02             	add    esi,0x2
c000f199:	83 e8 02             	sub    eax,0x2
c000f19c:	eb 85                	jmp    c000f123 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>

c000f19e <Dbg::logc(char)>:
c000f19e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f1a2:	ba fd 03 00 00       	mov    edx,0x3fd
c000f1a7:	ec                   	in     al,dx
c000f1a8:	a8 20                	test   al,0x20
c000f1aa:	74 fb                	je     c000f1a7 <Dbg::logc(char)+0x9>
c000f1ac:	ba f8 03 00 00       	mov    edx,0x3f8
c000f1b1:	88 c8                	mov    al,cl
c000f1b3:	ee                   	out    dx,al
c000f1b4:	c3                   	ret    

c000f1b5 <Dbg::logs(char*)>:
c000f1b5:	53                   	push   ebx
c000f1b6:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000f1ba:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f1bd:	84 c0                	test   al,al
c000f1bf:	74 0f                	je     c000f1d0 <Dbg::logs(char*)+0x1b>
c000f1c1:	43                   	inc    ebx
c000f1c2:	50                   	push   eax
c000f1c3:	e8 d6 ff ff ff       	call   c000f19e <Dbg::logc(char)>
c000f1c8:	5a                   	pop    edx
c000f1c9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f1cc:	84 c0                	test   al,al
c000f1ce:	75 f1                	jne    c000f1c1 <Dbg::logs(char*)+0xc>
c000f1d0:	5b                   	pop    ebx
c000f1d1:	c3                   	ret    

c000f1d2 <Dbg::logWriteInt(unsigned int)>:
c000f1d2:	83 ec 10             	sub    esp,0x10
c000f1d5:	6a 0a                	push   0xa
c000f1d7:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f1db:	50                   	push   eax
c000f1dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f1e0:	50                   	push   eax
c000f1e1:	e8 14 ff ff ff       	call   c000f0fa <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f1e6:	50                   	push   eax
c000f1e7:	e8 c9 ff ff ff       	call   c000f1b5 <Dbg::logs(char*)>
c000f1ec:	83 c4 20             	add    esp,0x20
c000f1ef:	c3                   	ret    

c000f1f0 <Dbg::logWriteIntBase(unsigned int, int)>:
c000f1f0:	83 ec 10             	sub    esp,0x10
c000f1f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f1f7:	50                   	push   eax
c000f1f8:	8d 44 24 08          	lea    eax,[esp+0x8]
c000f1fc:	50                   	push   eax
c000f1fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f201:	52                   	push   edx
c000f202:	e8 f3 fe ff ff       	call   c000f0fa <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000f207:	50                   	push   eax
c000f208:	e8 a8 ff ff ff       	call   c000f1b5 <Dbg::logs(char*)>
c000f20d:	83 c4 20             	add    esp,0x20
c000f210:	c3                   	ret    

c000f211 <Dbg::kprintf(char const*, ...)>:
c000f211:	55                   	push   ebp
c000f212:	57                   	push   edi
c000f213:	56                   	push   esi
c000f214:	53                   	push   ebx
c000f215:	83 ec 0c             	sub    esp,0xc
c000f218:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f21c:	8d 44 24 24          	lea    eax,[esp+0x24]
c000f220:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000f224:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000f227:	84 c0                	test   al,al
c000f229:	74 4d                	je     c000f278 <Dbg::kprintf(char const*, ...)+0x67>
c000f22b:	31 ff                	xor    edi,edi
c000f22d:	8d 77 01             	lea    esi,[edi+0x1]
c000f230:	3c 25                	cmp    al,0x25
c000f232:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000f235:	0f 85 ec 00 00 00    	jne    c000f327 <Dbg::kprintf(char const*, ...)+0x116>
c000f23b:	83 c7 02             	add    edi,0x2
c000f23e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f241:	83 e8 25             	sub    eax,0x25
c000f244:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000f247:	3c 53                	cmp    al,0x53
c000f249:	0f 87 c0 00 00 00    	ja     c000f30f <Dbg::kprintf(char const*, ...)+0xfe>
c000f24f:	25 ff 00 00 00       	and    eax,0xff
c000f254:	ff 24 85 9c 19 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde664]
c000f25b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f25f:	89 c8                	mov    eax,ecx
c000f261:	83 c1 04             	add    ecx,0x4
c000f264:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f268:	8b 00                	mov    eax,DWORD PTR [eax]
c000f26a:	50                   	push   eax
c000f26b:	e8 45 ff ff ff       	call   c000f1b5 <Dbg::logs(char*)>
c000f270:	58                   	pop    eax
c000f271:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000f274:	84 c0                	test   al,al
c000f276:	75 b5                	jne    c000f22d <Dbg::kprintf(char const*, ...)+0x1c>
c000f278:	83 c4 0c             	add    esp,0xc
c000f27b:	5b                   	pop    ebx
c000f27c:	5e                   	pop    esi
c000f27d:	5f                   	pop    edi
c000f27e:	5d                   	pop    ebp
c000f27f:	c3                   	ret    
c000f280:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f284:	89 d0                	mov    eax,edx
c000f286:	83 c2 04             	add    edx,0x4
c000f289:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f28d:	8b 00                	mov    eax,DWORD PTR [eax]
c000f28f:	50                   	push   eax
c000f290:	e8 3d ff ff ff       	call   c000f1d2 <Dbg::logWriteInt(unsigned int)>
c000f295:	58                   	pop    eax
c000f296:	eb d9                	jmp    c000f271 <Dbg::kprintf(char const*, ...)+0x60>
c000f298:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f29c:	89 d0                	mov    eax,edx
c000f29e:	83 c2 04             	add    edx,0x4
c000f2a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f2a5:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000f2a8:	50                   	push   eax
c000f2a9:	e8 f0 fe ff ff       	call   c000f19e <Dbg::logc(char)>
c000f2ae:	58                   	pop    eax
c000f2af:	eb c0                	jmp    c000f271 <Dbg::kprintf(char const*, ...)+0x60>
c000f2b1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f2b5:	89 c8                	mov    eax,ecx
c000f2b7:	83 c1 04             	add    ecx,0x4
c000f2ba:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f2be:	8b 28                	mov    ebp,DWORD PTR [eax]
c000f2c0:	55                   	push   ebp
c000f2c1:	e8 0c ff ff ff       	call   c000f1d2 <Dbg::logWriteInt(unsigned int)>
c000f2c6:	58                   	pop    eax
c000f2c7:	eb a8                	jmp    c000f271 <Dbg::kprintf(char const*, ...)+0x60>
c000f2c9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f2cd:	89 c8                	mov    eax,ecx
c000f2cf:	83 c1 04             	add    ecx,0x4
c000f2d2:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000f2d6:	6a 10                	push   0x10
c000f2d8:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f2da:	51                   	push   ecx
c000f2db:	e8 10 ff ff ff       	call   c000f1f0 <Dbg::logWriteIntBase(unsigned int, int)>
c000f2e0:	5d                   	pop    ebp
c000f2e1:	58                   	pop    eax
c000f2e2:	eb 8d                	jmp    c000f271 <Dbg::kprintf(char const*, ...)+0x60>
c000f2e4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2e8:	89 d0                	mov    eax,edx
c000f2ea:	83 c2 08             	add    edx,0x8
c000f2ed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f2f1:	6a 10                	push   0x10
c000f2f3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f2f5:	50                   	push   eax
c000f2f6:	e8 f5 fe ff ff       	call   c000f1f0 <Dbg::logWriteIntBase(unsigned int, int)>
c000f2fb:	58                   	pop    eax
c000f2fc:	5a                   	pop    edx
c000f2fd:	e9 6f ff ff ff       	jmp    c000f271 <Dbg::kprintf(char const*, ...)+0x60>
c000f302:	6a 25                	push   0x25
c000f304:	e8 95 fe ff ff       	call   c000f19e <Dbg::logc(char)>
c000f309:	5a                   	pop    edx
c000f30a:	e9 62 ff ff ff       	jmp    c000f271 <Dbg::kprintf(char const*, ...)+0x60>
c000f30f:	6a 25                	push   0x25
c000f311:	e8 88 fe ff ff       	call   c000f19e <Dbg::logc(char)>
c000f316:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000f31a:	50                   	push   eax
c000f31b:	e8 7e fe ff ff       	call   c000f19e <Dbg::logc(char)>
c000f320:	5a                   	pop    edx
c000f321:	59                   	pop    ecx
c000f322:	e9 4a ff ff ff       	jmp    c000f271 <Dbg::kprintf(char const*, ...)+0x60>
c000f327:	50                   	push   eax
c000f328:	89 f7                	mov    edi,esi
c000f32a:	e8 6f fe ff ff       	call   c000f19e <Dbg::logc(char)>
c000f32f:	89 ee                	mov    esi,ebp
c000f331:	58                   	pop    eax
c000f332:	e9 3a ff ff ff       	jmp    c000f271 <Dbg::kprintf(char const*, ...)+0x60>
c000f337:	90                   	nop

c000f338 <File::read(unsigned long long, void*, int*)>:
c000f338:	53                   	push   ebx
c000f339:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f33d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f341:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f348:	3c 19                	cmp    al,0x19
c000f34a:	77 35                	ja     c000f381 <File::read(unsigned long long, void*, int*)+0x49>
c000f34c:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c000f353:	85 c0                	test   eax,eax
c000f355:	74 2a                	je     c000f381 <File::read(unsigned long long, void*, int*)+0x49>
c000f357:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f35d:	85 c0                	test   eax,eax
c000f35f:	74 20                	je     c000f381 <File::read(unsigned long long, void*, int*)+0x49>
c000f361:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f365:	74 21                	je     c000f388 <File::read(unsigned long long, void*, int*)+0x50>
c000f367:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f369:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f36d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f373:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f377:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f37b:	5b                   	pop    ebx
c000f37c:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000f37f:	ff e0                	jmp    eax
c000f381:	b8 0b 00 00 00       	mov    eax,0xb
c000f386:	eb 05                	jmp    c000f38d <File::read(unsigned long long, void*, int*)+0x55>
c000f388:	b8 05 00 00 00       	mov    eax,0x5
c000f38d:	5b                   	pop    ebx
c000f38e:	c3                   	ret    
c000f38f:	90                   	nop

c000f390 <File::write(unsigned long long, void*, int*)>:
c000f390:	53                   	push   ebx
c000f391:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f395:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f399:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f3a0:	3c 19                	cmp    al,0x19
c000f3a2:	77 35                	ja     c000f3d9 <File::write(unsigned long long, void*, int*)+0x49>
c000f3a4:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c000f3ab:	85 c0                	test   eax,eax
c000f3ad:	74 2a                	je     c000f3d9 <File::write(unsigned long long, void*, int*)+0x49>
c000f3af:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f3b5:	85 c0                	test   eax,eax
c000f3b7:	74 20                	je     c000f3d9 <File::write(unsigned long long, void*, int*)+0x49>
c000f3b9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f3bd:	74 21                	je     c000f3e0 <File::write(unsigned long long, void*, int*)+0x50>
c000f3bf:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f3c1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f3c5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f3cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f3cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f3d3:	5b                   	pop    ebx
c000f3d4:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000f3d7:	ff e0                	jmp    eax
c000f3d9:	b8 0b 00 00 00       	mov    eax,0xb
c000f3de:	eb 05                	jmp    c000f3e5 <File::write(unsigned long long, void*, int*)+0x55>
c000f3e0:	b8 05 00 00 00       	mov    eax,0x5
c000f3e5:	5b                   	pop    ebx
c000f3e6:	c3                   	ret    
c000f3e7:	90                   	nop

c000f3e8 <Directory::read(unsigned long long, void*, int*)>:
c000f3e8:	53                   	push   ebx
c000f3e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f3ed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000f3f1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000f3f8:	3c 19                	cmp    al,0x19
c000f3fa:	77 35                	ja     c000f431 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f3fc:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c000f403:	85 c0                	test   eax,eax
c000f405:	74 2a                	je     c000f431 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f407:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f40d:	85 c0                	test   eax,eax
c000f40f:	74 20                	je     c000f431 <Directory::read(unsigned long long, void*, int*)+0x49>
c000f411:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f415:	74 21                	je     c000f438 <Directory::read(unsigned long long, void*, int*)+0x50>
c000f417:	8b 08                	mov    ecx,DWORD PTR [eax]
c000f419:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000f41d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000f423:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f427:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f42b:	5b                   	pop    ebx
c000f42c:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000f42f:	ff e0                	jmp    eax
c000f431:	b8 0b 00 00 00       	mov    eax,0xb
c000f436:	eb 05                	jmp    c000f43d <Directory::read(unsigned long long, void*, int*)+0x55>
c000f438:	b8 05 00 00 00       	mov    eax,0x5
c000f43d:	5b                   	pop    ebx
c000f43e:	c3                   	ret    
c000f43f:	90                   	nop

c000f440 <Directory::write(unsigned long long, void*, int*)>:
c000f440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f444:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000f44b:	b8 0b 00 00 00       	mov    eax,0xb
c000f450:	80 fa 19             	cmp    dl,0x19
c000f453:	77 18                	ja     c000f46d <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f455:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000f45c:	85 d2                	test   edx,edx
c000f45e:	74 0d                	je     c000f46d <Directory::write(unsigned long long, void*, int*)+0x2d>
c000f460:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000f467:	19 c0                	sbb    eax,eax
c000f469:	83 e0 0a             	and    eax,0xa
c000f46c:	40                   	inc    eax
c000f46d:	c3                   	ret    

c000f46e <File::isAtty()>:
c000f46e:	31 c0                	xor    eax,eax
c000f470:	c3                   	ret    
c000f471:	90                   	nop

c000f472 <Directory::isAtty()>:
c000f472:	31 c0                	xor    eax,eax
c000f474:	c3                   	ret    
c000f475:	90                   	nop

c000f476 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000f476:	b8 0a 00 00 00       	mov    eax,0xa
c000f47b:	c3                   	ret    

c000f47c <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000f47c:	b8 0a 00 00 00       	mov    eax,0xa
c000f481:	c3                   	ret    

c000f482 <File::~File()>:
c000f482:	83 ec 0c             	sub    esp,0xc
c000f485:	ba 58 1b 02 c0       	mov    edx,0xc0021b58
c000f48a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f48e:	89 10                	mov    DWORD PTR [eax],edx
c000f490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f494:	83 ec 0c             	sub    esp,0xc
c000f497:	50                   	push   eax
c000f498:	e8 c5 ea ff ff       	call   c000df62 <UnixFile::~UnixFile()>
c000f49d:	83 c4 10             	add    esp,0x10
c000f4a0:	90                   	nop
c000f4a1:	83 c4 0c             	add    esp,0xc
c000f4a4:	c3                   	ret    
c000f4a5:	90                   	nop

c000f4a6 <File::~File()>:
c000f4a6:	83 ec 0c             	sub    esp,0xc
c000f4a9:	83 ec 0c             	sub    esp,0xc
c000f4ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4b0:	e8 cd ff ff ff       	call   c000f482 <File::~File()>
c000f4b5:	83 c4 10             	add    esp,0x10
c000f4b8:	83 ec 08             	sub    esp,0x8
c000f4bb:	68 14 01 00 00       	push   0x114
c000f4c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4c4:	e8 22 fc ff ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c000f4c9:	83 c4 10             	add    esp,0x10
c000f4cc:	83 c4 0c             	add    esp,0xc
c000f4cf:	c3                   	ret    

c000f4d0 <Directory::~Directory()>:
c000f4d0:	83 ec 0c             	sub    esp,0xc
c000f4d3:	ba 74 1b 02 c0       	mov    edx,0xc0021b74
c000f4d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4dc:	89 10                	mov    DWORD PTR [eax],edx
c000f4de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f4e2:	83 ec 0c             	sub    esp,0xc
c000f4e5:	50                   	push   eax
c000f4e6:	e8 77 ea ff ff       	call   c000df62 <UnixFile::~UnixFile()>
c000f4eb:	83 c4 10             	add    esp,0x10
c000f4ee:	90                   	nop
c000f4ef:	83 c4 0c             	add    esp,0xc
c000f4f2:	c3                   	ret    
c000f4f3:	90                   	nop

c000f4f4 <Directory::~Directory()>:
c000f4f4:	83 ec 0c             	sub    esp,0xc
c000f4f7:	83 ec 0c             	sub    esp,0xc
c000f4fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f4fe:	e8 cd ff ff ff       	call   c000f4d0 <Directory::~Directory()>
c000f503:	83 c4 10             	add    esp,0x10
c000f506:	83 ec 08             	sub    esp,0x8
c000f509:	68 14 01 00 00       	push   0x114
c000f50e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f512:	e8 d4 fb ff ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c000f517:	83 c4 10             	add    esp,0x10
c000f51a:	83 c4 0c             	add    esp,0xc
c000f51d:	c3                   	ret    

c000f51e <Filesystem::Filesystem()>:
c000f51e:	ba f4 1a 02 c0       	mov    edx,0xc0021af4
c000f523:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f527:	89 10                	mov    DWORD PTR [eax],edx
c000f529:	8b 15 08 49 02 c0    	mov    edx,DWORD PTR ds:0xc0024908
c000f52f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f533:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f536:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f53a:	a3 08 49 02 c0       	mov    ds:0xc0024908,eax
c000f53f:	90                   	nop
c000f540:	c3                   	ret    
c000f541:	90                   	nop

c000f542 <Filesystem::~Filesystem()>:
c000f542:	ba f4 1a 02 c0       	mov    edx,0xc0021af4
c000f547:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f54b:	89 10                	mov    DWORD PTR [eax],edx
c000f54d:	90                   	nop
c000f54e:	c3                   	ret    
c000f54f:	90                   	nop

c000f550 <Filesystem::~Filesystem()>:
c000f550:	83 ec 0c             	sub    esp,0xc
c000f553:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f557:	e8 e6 ff ff ff       	call   c000f542 <Filesystem::~Filesystem()>
c000f55c:	83 c4 04             	add    esp,0x4
c000f55f:	83 ec 08             	sub    esp,0x8
c000f562:	6a 08                	push   0x8
c000f564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f568:	e8 7e fb ff ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c000f56d:	83 c4 10             	add    esp,0x10
c000f570:	83 c4 0c             	add    esp,0xc
c000f573:	c3                   	ret    

c000f574 <initVFS()>:
c000f574:	83 ec 18             	sub    esp,0x18
c000f577:	6a 08                	push   0x8
c000f579:	e8 5e fb ff ff       	call   c000f0dc <operator new(unsigned long)>
c000f57e:	89 04 24             	mov    DWORD PTR [esp],eax
c000f581:	e8 da b3 00 00       	call   c001a960 <FAT::FAT()>
c000f586:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f58d:	e8 4a fb ff ff       	call   c000f0dc <operator new(unsigned long)>
c000f592:	89 04 24             	mov    DWORD PTR [esp],eax
c000f595:	e8 66 c6 00 00       	call   c001bc00 <ISO9660::ISO9660()>
c000f59a:	83 c4 1c             	add    esp,0x1c
c000f59d:	c3                   	ret    

c000f59e <standardiseFiles(char*, char const*, char const*)>:
c000f59e:	55                   	push   ebp
c000f59f:	57                   	push   edi
c000f5a0:	56                   	push   esi
c000f5a1:	53                   	push   ebx
c000f5a2:	81 ec 10 04 00 00    	sub    esp,0x410
c000f5a8:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000f5af:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000f5b6:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000f5bd:	68 00 04 00 00       	push   0x400
c000f5c2:	6a 00                	push   0x0
c000f5c4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f5c8:	56                   	push   esi
c000f5c9:	e8 f3 10 ff ff       	call   c00006c1 <memset>
c000f5ce:	83 c4 10             	add    esp,0x10
c000f5d1:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000f5d5:	75 0b                	jne    c000f5e2 <standardiseFiles(char*, char const*, char const*)+0x44>
c000f5d7:	50                   	push   eax
c000f5d8:	50                   	push   eax
c000f5d9:	57                   	push   edi
c000f5da:	56                   	push   esi
c000f5db:	e8 80 11 ff ff       	call   c0000760 <strcpy>
c000f5e0:	eb 41                	jmp    c000f623 <standardiseFiles(char*, char const*, char const*)+0x85>
c000f5e2:	8a 07                	mov    al,BYTE PTR [edi]
c000f5e4:	3c 5c                	cmp    al,0x5c
c000f5e6:	74 04                	je     c000f5ec <standardiseFiles(char*, char const*, char const*)+0x4e>
c000f5e8:	3c 2f                	cmp    al,0x2f
c000f5ea:	75 18                	jne    c000f604 <standardiseFiles(char*, char const*, char const*)+0x66>
c000f5ec:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000f5ef:	3c 60                	cmp    al,0x60
c000f5f1:	7e 03                	jle    c000f5f6 <standardiseFiles(char*, char const*, char const*)+0x58>
c000f5f3:	83 e8 20             	sub    eax,0x20
c000f5f6:	88 04 24             	mov    BYTE PTR [esp],al
c000f5f9:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f600:	50                   	push   eax
c000f601:	50                   	push   eax
c000f602:	eb 18                	jmp    c000f61c <standardiseFiles(char*, char const*, char const*)+0x7e>
c000f604:	50                   	push   eax
c000f605:	50                   	push   eax
c000f606:	55                   	push   ebp
c000f607:	56                   	push   esi
c000f608:	e8 53 11 ff ff       	call   c0000760 <strcpy>
c000f60d:	5a                   	pop    edx
c000f60e:	59                   	pop    ecx
c000f60f:	68 54 2e 02 c0       	push   0xc0022e54
c000f614:	56                   	push   esi
c000f615:	e8 fd 11 ff ff       	call   c0000817 <strcat>
c000f61a:	5d                   	pop    ebp
c000f61b:	58                   	pop    eax
c000f61c:	57                   	push   edi
c000f61d:	56                   	push   esi
c000f61e:	e8 f4 11 ff ff       	call   c0000817 <strcat>
c000f623:	83 c4 10             	add    esp,0x10
c000f626:	8a 04 24             	mov    al,BYTE PTR [esp]
c000f629:	3c 60                	cmp    al,0x60
c000f62b:	7e 03                	jle    c000f630 <standardiseFiles(char*, char const*, char const*)+0x92>
c000f62d:	83 e8 20             	sub    eax,0x20
c000f630:	88 04 24             	mov    BYTE PTR [esp],al
c000f633:	88 03                	mov    BYTE PTR [ebx],al
c000f635:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000f63c:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000f642:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000f646:	bf 03 00 00 00       	mov    edi,0x3
c000f64b:	b8 03 00 00 00       	mov    eax,0x3
c000f650:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000f653:	84 d2                	test   dl,dl
c000f655:	0f 84 91 00 00 00    	je     c000f6ec <standardiseFiles(char*, char const*, char const*)+0x14e>
c000f65b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000f65e:	80 fa 2f             	cmp    dl,0x2f
c000f661:	74 05                	je     c000f668 <standardiseFiles(char*, char const*, char const*)+0xca>
c000f663:	80 fa 5c             	cmp    dl,0x5c
c000f666:	75 12                	jne    c000f67a <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f668:	89 c5                	mov    ebp,eax
c000f66a:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f66f:	74 09                	je     c000f67a <standardiseFiles(char*, char const*, char const*)+0xdc>
c000f671:	40                   	inc    eax
c000f672:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000f676:	89 cf                	mov    edi,ecx
c000f678:	eb d6                	jmp    c000f650 <standardiseFiles(char*, char const*, char const*)+0xb2>
c000f67a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000f67f:	75 5b                	jne    c000f6dc <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f681:	80 fa 2e             	cmp    dl,0x2e
c000f684:	75 56                	jne    c000f6dc <standardiseFiles(char*, char const*, char const*)+0x13e>
c000f686:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000f68a:	74 19                	je     c000f6a5 <standardiseFiles(char*, char const*, char const*)+0x107>
c000f68c:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f691:	74 53                	je     c000f6e6 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f693:	89 f9                	mov    ecx,edi
c000f695:	41                   	inc    ecx
c000f696:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f699:	80 fa 5c             	cmp    dl,0x5c
c000f69c:	74 f7                	je     c000f695 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f69e:	80 fa 2f             	cmp    dl,0x2f
c000f6a1:	74 f2                	je     c000f695 <standardiseFiles(char*, char const*, char const*)+0xf7>
c000f6a3:	eb d1                	jmp    c000f676 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6a5:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000f6aa:	74 3a                	je     c000f6e6 <standardiseFiles(char*, char const*, char const*)+0x148>
c000f6ac:	83 f8 03             	cmp    eax,0x3
c000f6af:	74 c5                	je     c000f676 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6b1:	41                   	inc    ecx
c000f6b2:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000f6b5:	80 fa 2f             	cmp    dl,0x2f
c000f6b8:	74 f7                	je     c000f6b1 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f6ba:	80 fa 5c             	cmp    dl,0x5c
c000f6bd:	74 f2                	je     c000f6b1 <standardiseFiles(char*, char const*, char const*)+0x113>
c000f6bf:	48                   	dec    eax
c000f6c0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f6c4:	75 06                	jne    c000f6cc <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f6c6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f6ca:	eb f3                	jmp    c000f6bf <standardiseFiles(char*, char const*, char const*)+0x121>
c000f6cc:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000f6d0:	74 07                	je     c000f6d9 <standardiseFiles(char*, char const*, char const*)+0x13b>
c000f6d2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f6d6:	48                   	dec    eax
c000f6d7:	eb f3                	jmp    c000f6cc <standardiseFiles(char*, char const*, char const*)+0x12e>
c000f6d9:	40                   	inc    eax
c000f6da:	eb 9a                	jmp    c000f676 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6dc:	80 fa 2f             	cmp    dl,0x2f
c000f6df:	74 95                	je     c000f676 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6e1:	80 fa 5c             	cmp    dl,0x5c
c000f6e4:	74 90                	je     c000f676 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6e6:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000f6e9:	40                   	inc    eax
c000f6ea:	eb 8a                	jmp    c000f676 <standardiseFiles(char*, char const*, char const*)+0xd8>
c000f6ec:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000f6f0:	83 ec 0c             	sub    esp,0xc
c000f6f3:	53                   	push   ebx
c000f6f4:	e8 e5 0f ff ff       	call   c00006de <strlen>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000f701:	75 26                	jne    c000f729 <standardiseFiles(char*, char const*, char const*)+0x18b>
c000f703:	83 ec 0c             	sub    esp,0xc
c000f706:	53                   	push   ebx
c000f707:	e8 d2 0f ff ff       	call   c00006de <strlen>
c000f70c:	83 c4 10             	add    esp,0x10
c000f70f:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000f714:	74 26                	je     c000f73c <standardiseFiles(char*, char const*, char const*)+0x19e>
c000f716:	83 ec 0c             	sub    esp,0xc
c000f719:	53                   	push   ebx
c000f71a:	e8 bf 0f ff ff       	call   c00006de <strlen>
c000f71f:	83 c4 10             	add    esp,0x10
c000f722:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000f727:	eb c7                	jmp    c000f6f0 <standardiseFiles(char*, char const*, char const*)+0x152>
c000f729:	83 ec 0c             	sub    esp,0xc
c000f72c:	53                   	push   ebx
c000f72d:	e8 ac 0f ff ff       	call   c00006de <strlen>
c000f732:	83 c4 10             	add    esp,0x10
c000f735:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000f73a:	74 c7                	je     c000f703 <standardiseFiles(char*, char const*, char const*)+0x165>
c000f73c:	81 c4 0c 04 00 00    	add    esp,0x40c
c000f742:	5b                   	pop    ebx
c000f743:	5e                   	pop    esi
c000f744:	5f                   	pop    edi
c000f745:	5d                   	pop    ebp
c000f746:	c3                   	ret    
c000f747:	90                   	nop

c000f748 <File::File(char const*, Process*)>:
c000f748:	83 ec 0c             	sub    esp,0xc
c000f74b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f74f:	83 ec 08             	sub    esp,0x8
c000f752:	6a 00                	push   0x0
c000f754:	50                   	push   eax
c000f755:	e8 66 e6 ff ff       	call   c000ddc0 <UnixFile::UnixFile(int)>
c000f75a:	83 c4 10             	add    esp,0x10
c000f75d:	ba 58 1b 02 c0       	mov    edx,0xc0021b58
c000f762:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f766:	89 10                	mov    DWORD PTR [eax],edx
c000f768:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f76c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000f772:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f776:	83 c0 0d             	add    eax,0xd
c000f779:	83 ec 04             	sub    esp,0x4
c000f77c:	52                   	push   edx
c000f77d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f781:	50                   	push   eax
c000f782:	e8 17 fe ff ff       	call   c000f59e <standardiseFiles(char*, char const*, char const*)>
c000f787:	83 c4 10             	add    esp,0x10
c000f78a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f78e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000f791:	8d 50 bf             	lea    edx,[eax-0x41]
c000f794:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f798:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000f79e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7a2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000f7a6:	90                   	nop
c000f7a7:	83 c4 0c             	add    esp,0xc
c000f7aa:	c3                   	ret    
c000f7ab:	90                   	nop

c000f7ac <File::open(FileOpenMode)>:
c000f7ac:	53                   	push   ebx
c000f7ad:	b8 0b 00 00 00       	mov    eax,0xb
c000f7b2:	83 ec 08             	sub    esp,0x8
c000f7b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f7b9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000f7c0:	80 fa 19             	cmp    dl,0x19
c000f7c3:	77 40                	ja     c000f805 <File::open(FileOpenMode)+0x59>
c000f7c5:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000f7cc:	85 d2                	test   edx,edx
c000f7ce:	74 35                	je     c000f805 <File::open(FileOpenMode)+0x59>
c000f7d0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f7d6:	85 d2                	test   edx,edx
c000f7d8:	74 2b                	je     c000f805 <File::open(FileOpenMode)+0x59>
c000f7da:	b8 06 00 00 00       	mov    eax,0x6
c000f7df:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000f7e3:	75 20                	jne    c000f805 <File::open(FileOpenMode)+0x59>
c000f7e5:	8b 02                	mov    eax,DWORD PTR [edx]
c000f7e7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000f7ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f7f1:	51                   	push   ecx
c000f7f2:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000f7f5:	51                   	push   ecx
c000f7f6:	52                   	push   edx
c000f7f7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000f7fa:	83 c4 10             	add    esp,0x10
c000f7fd:	85 c0                	test   eax,eax
c000f7ff:	75 04                	jne    c000f805 <File::open(FileOpenMode)+0x59>
c000f801:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000f805:	83 c4 08             	add    esp,0x8
c000f808:	5b                   	pop    ebx
c000f809:	c3                   	ret    

c000f80a <File::close()>:
c000f80a:	53                   	push   ebx
c000f80b:	b8 0b 00 00 00       	mov    eax,0xb
c000f810:	83 ec 08             	sub    esp,0x8
c000f813:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f817:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f81e:	80 fa 19             	cmp    dl,0x19
c000f821:	77 41                	ja     c000f864 <File::close()+0x5a>
c000f823:	8b 1c 95 a0 4d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb260]
c000f82a:	85 db                	test   ebx,ebx
c000f82c:	74 36                	je     c000f864 <File::close()+0x5a>
c000f82e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000f835:	74 2d                	je     c000f864 <File::close()+0x5a>
c000f837:	b8 05 00 00 00       	mov    eax,0x5
c000f83c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f840:	74 22                	je     c000f864 <File::close()+0x5a>
c000f842:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000f846:	8b 04 95 a0 4d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb260]
c000f84d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000f853:	53                   	push   ebx
c000f854:	53                   	push   ebx
c000f855:	8b 10                	mov    edx,DWORD PTR [eax]
c000f857:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f85d:	50                   	push   eax
c000f85e:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000f861:	83 c4 10             	add    esp,0x10
c000f864:	83 c4 08             	add    esp,0x8
c000f867:	5b                   	pop    ebx
c000f868:	c3                   	ret    
c000f869:	90                   	nop

c000f86a <File::seek(unsigned long long)>:
c000f86a:	56                   	push   esi
c000f86b:	b8 0b 00 00 00       	mov    eax,0xb
c000f870:	53                   	push   ebx
c000f871:	51                   	push   ecx
c000f872:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f876:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f87a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000f87e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000f885:	80 fa 19             	cmp    dl,0x19
c000f888:	77 31                	ja     c000f8bb <File::seek(unsigned long long)+0x51>
c000f88a:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000f891:	85 d2                	test   edx,edx
c000f893:	74 26                	je     c000f8bb <File::seek(unsigned long long)+0x51>
c000f895:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f89b:	85 d2                	test   edx,edx
c000f89d:	74 1c                	je     c000f8bb <File::seek(unsigned long long)+0x51>
c000f89f:	b8 05 00 00 00       	mov    eax,0x5
c000f8a4:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000f8a8:	74 11                	je     c000f8bb <File::seek(unsigned long long)+0x51>
c000f8aa:	8b 02                	mov    eax,DWORD PTR [edx]
c000f8ac:	53                   	push   ebx
c000f8ad:	51                   	push   ecx
c000f8ae:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000f8b4:	52                   	push   edx
c000f8b5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000f8b8:	83 c4 10             	add    esp,0x10
c000f8bb:	5a                   	pop    edx
c000f8bc:	5b                   	pop    ebx
c000f8bd:	5e                   	pop    esi
c000f8be:	c3                   	ret    
c000f8bf:	90                   	nop

c000f8c0 <File::tell(unsigned long long*)>:
c000f8c0:	83 ec 0c             	sub    esp,0xc
c000f8c3:	b8 0b 00 00 00       	mov    eax,0xb
c000f8c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f8cc:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000f8d3:	80 fa 19             	cmp    dl,0x19
c000f8d6:	77 34                	ja     c000f90c <File::tell(unsigned long long*)+0x4c>
c000f8d8:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000f8df:	85 d2                	test   edx,edx
c000f8e1:	74 29                	je     c000f90c <File::tell(unsigned long long*)+0x4c>
c000f8e3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000f8e9:	85 d2                	test   edx,edx
c000f8eb:	74 1f                	je     c000f90c <File::tell(unsigned long long*)+0x4c>
c000f8ed:	b8 05 00 00 00       	mov    eax,0x5
c000f8f2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000f8f6:	74 14                	je     c000f90c <File::tell(unsigned long long*)+0x4c>
c000f8f8:	50                   	push   eax
c000f8f9:	8b 02                	mov    eax,DWORD PTR [edx]
c000f8fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f8ff:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000f905:	52                   	push   edx
c000f906:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000f909:	83 c4 10             	add    esp,0x10
c000f90c:	83 c4 0c             	add    esp,0xc
c000f90f:	c3                   	ret    

c000f910 <File::rewind()>:
c000f910:	83 ec 10             	sub    esp,0x10
c000f913:	6a 00                	push   0x0
c000f915:	6a 00                	push   0x0
c000f917:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f91b:	e8 4a ff ff ff       	call   c000f86a <File::seek(unsigned long long)>
c000f920:	83 c4 1c             	add    esp,0x1c
c000f923:	c3                   	ret    

c000f924 <File::unlink()>:
c000f924:	83 ec 0c             	sub    esp,0xc
c000f927:	b8 0b 00 00 00       	mov    eax,0xb
c000f92c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f930:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f937:	80 f9 19             	cmp    cl,0x19
c000f93a:	77 2f                	ja     c000f96b <File::unlink()+0x47>
c000f93c:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000f943:	85 c9                	test   ecx,ecx
c000f945:	74 24                	je     c000f96b <File::unlink()+0x47>
c000f947:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f94d:	85 c9                	test   ecx,ecx
c000f94f:	74 1a                	je     c000f96b <File::unlink()+0x47>
c000f951:	b8 06 00 00 00       	mov    eax,0x6
c000f956:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f95a:	75 0f                	jne    c000f96b <File::unlink()+0x47>
c000f95c:	50                   	push   eax
c000f95d:	83 c2 0d             	add    edx,0xd
c000f960:	50                   	push   eax
c000f961:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f963:	52                   	push   edx
c000f964:	51                   	push   ecx
c000f965:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000f968:	83 c4 10             	add    esp,0x10
c000f96b:	83 c4 0c             	add    esp,0xc
c000f96e:	c3                   	ret    
c000f96f:	90                   	nop

c000f970 <File::rename(char const*)>:
c000f970:	83 ec 0c             	sub    esp,0xc
c000f973:	b8 0b 00 00 00       	mov    eax,0xb
c000f978:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f97c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f983:	80 f9 19             	cmp    cl,0x19
c000f986:	77 32                	ja     c000f9ba <File::rename(char const*)+0x4a>
c000f988:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000f98f:	85 c9                	test   ecx,ecx
c000f991:	74 27                	je     c000f9ba <File::rename(char const*)+0x4a>
c000f993:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f999:	85 c9                	test   ecx,ecx
c000f99b:	74 1d                	je     c000f9ba <File::rename(char const*)+0x4a>
c000f99d:	b8 06 00 00 00       	mov    eax,0x6
c000f9a2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f9a6:	75 12                	jne    c000f9ba <File::rename(char const*)+0x4a>
c000f9a8:	50                   	push   eax
c000f9a9:	83 c2 0d             	add    edx,0xd
c000f9ac:	8b 01                	mov    eax,DWORD PTR [ecx]
c000f9ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f9b2:	52                   	push   edx
c000f9b3:	51                   	push   ecx
c000f9b4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000f9b7:	83 c4 10             	add    esp,0x10
c000f9ba:	83 c4 0c             	add    esp,0xc
c000f9bd:	c3                   	ret    

c000f9be <File::chfatattr(unsigned char, unsigned char)>:
c000f9be:	57                   	push   edi
c000f9bf:	b8 0b 00 00 00       	mov    eax,0xb
c000f9c4:	56                   	push   esi
c000f9c5:	53                   	push   ebx
c000f9c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f9ca:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f9ce:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f9d2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000f9d9:	80 f9 19             	cmp    cl,0x19
c000f9dc:	77 37                	ja     c000fa15 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f9de:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000f9e5:	85 c9                	test   ecx,ecx
c000f9e7:	74 2c                	je     c000fa15 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f9e9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000f9ef:	85 c9                	test   ecx,ecx
c000f9f1:	74 22                	je     c000fa15 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f9f3:	b8 06 00 00 00       	mov    eax,0x6
c000f9f8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000f9fc:	75 17                	jne    c000fa15 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000f9fe:	89 f0                	mov    eax,esi
c000fa00:	8b 39                	mov    edi,DWORD PTR [ecx]
c000fa02:	0f b6 f0             	movzx  esi,al
c000fa05:	56                   	push   esi
c000fa06:	83 c2 0d             	add    edx,0xd
c000fa09:	0f b6 db             	movzx  ebx,bl
c000fa0c:	53                   	push   ebx
c000fa0d:	52                   	push   edx
c000fa0e:	51                   	push   ecx
c000fa0f:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000fa12:	83 c4 10             	add    esp,0x10
c000fa15:	5b                   	pop    ebx
c000fa16:	5e                   	pop    esi
c000fa17:	5f                   	pop    edi
c000fa18:	c3                   	ret    
c000fa19:	90                   	nop

c000fa1a <File::exists()>:
c000fa1a:	83 ec 0c             	sub    esp,0xc
c000fa1d:	31 c0                	xor    eax,eax
c000fa1f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fa23:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fa2a:	80 f9 19             	cmp    cl,0x19
c000fa2d:	77 24                	ja     c000fa53 <File::exists()+0x39>
c000fa2f:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fa36:	85 c9                	test   ecx,ecx
c000fa38:	74 19                	je     c000fa53 <File::exists()+0x39>
c000fa3a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fa40:	85 c9                	test   ecx,ecx
c000fa42:	74 0f                	je     c000fa53 <File::exists()+0x39>
c000fa44:	50                   	push   eax
c000fa45:	83 c2 0d             	add    edx,0xd
c000fa48:	50                   	push   eax
c000fa49:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fa4b:	52                   	push   edx
c000fa4c:	51                   	push   ecx
c000fa4d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fa50:	83 c4 10             	add    esp,0x10
c000fa53:	83 c4 0c             	add    esp,0xc
c000fa56:	c3                   	ret    
c000fa57:	90                   	nop

c000fa58 <File::stat(unsigned long long*, bool*)>:
c000fa58:	56                   	push   esi
c000fa59:	53                   	push   ebx
c000fa5a:	50                   	push   eax
c000fa5b:	b8 0b 00 00 00       	mov    eax,0xb
c000fa60:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fa64:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fa68:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fa6c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fa73:	80 f9 19             	cmp    cl,0x19
c000fa76:	77 3d                	ja     c000fab5 <File::stat(unsigned long long*, bool*)+0x5d>
c000fa78:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fa7f:	85 c9                	test   ecx,ecx
c000fa81:	74 32                	je     c000fab5 <File::stat(unsigned long long*, bool*)+0x5d>
c000fa83:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fa89:	85 c9                	test   ecx,ecx
c000fa8b:	74 28                	je     c000fab5 <File::stat(unsigned long long*, bool*)+0x5d>
c000fa8d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fa8f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fa93:	74 13                	je     c000faa8 <File::stat(unsigned long long*, bool*)+0x50>
c000fa95:	83 ec 04             	sub    esp,0x4
c000fa98:	56                   	push   esi
c000fa99:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000fa9f:	51                   	push   ecx
c000faa0:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000faa3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000faa6:	eb 0a                	jmp    c000fab2 <File::stat(unsigned long long*, bool*)+0x5a>
c000faa8:	53                   	push   ebx
c000faa9:	83 c2 0d             	add    edx,0xd
c000faac:	56                   	push   esi
c000faad:	52                   	push   edx
c000faae:	51                   	push   ecx
c000faaf:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000fab2:	83 c4 10             	add    esp,0x10
c000fab5:	5a                   	pop    edx
c000fab6:	5b                   	pop    ebx
c000fab7:	5e                   	pop    esi
c000fab8:	c3                   	ret    

c000fab9 <getcwd(Process*, char*, int)>:
c000fab9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fabd:	31 c0                	xor    eax,eax
c000fabf:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000fac2:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000fac6:	7d 15                	jge    c000fadd <getcwd(Process*, char*, int)+0x24>
c000fac8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000facc:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000fad3:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000fad6:	84 c9                	test   cl,cl
c000fad8:	74 06                	je     c000fae0 <getcwd(Process*, char*, int)+0x27>
c000fada:	40                   	inc    eax
c000fadb:	eb e2                	jmp    c000fabf <getcwd(Process*, char*, int)+0x6>
c000fadd:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000fae0:	31 c0                	xor    eax,eax
c000fae2:	c3                   	ret    

c000fae3 <setcwd(Process*, char*)>:
c000fae3:	55                   	push   ebp
c000fae4:	57                   	push   edi
c000fae5:	56                   	push   esi
c000fae6:	53                   	push   ebx
c000fae7:	81 ec 20 02 00 00    	sub    esp,0x220
c000faed:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000faf4:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000fafa:	57                   	push   edi
c000fafb:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000fb02:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000fb06:	56                   	push   esi
c000fb07:	e8 92 fa ff ff       	call   c000f59e <standardiseFiles(char*, char const*, char const*)>
c000fb0c:	89 34 24             	mov    DWORD PTR [esp],esi
c000fb0f:	e8 ca 0b ff ff       	call   c00006de <strlen>
c000fb14:	83 c4 10             	add    esp,0x10
c000fb17:	83 f8 02             	cmp    eax,0x2
c000fb1a:	77 17                	ja     c000fb33 <setcwd(Process*, char*)+0x50>
c000fb1c:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c000fb21:	83 e8 41             	sub    eax,0x41
c000fb24:	83 f8 19             	cmp    eax,0x19
c000fb27:	76 24                	jbe    c000fb4d <setcwd(Process*, char*)+0x6a>
c000fb29:	b8 03 00 00 00       	mov    eax,0x3
c000fb2e:	e9 cb 00 00 00       	jmp    c000fbfe <setcwd(Process*, char*)+0x11b>
c000fb33:	83 ec 0c             	sub    esp,0xc
c000fb36:	56                   	push   esi
c000fb37:	e8 a2 0b ff ff       	call   c00006de <strlen>
c000fb3c:	83 c4 10             	add    esp,0x10
c000fb3f:	83 f8 03             	cmp    eax,0x3
c000fb42:	75 33                	jne    c000fb77 <setcwd(Process*, char*)+0x94>
c000fb44:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000fb49:	75 2c                	jne    c000fb77 <setcwd(Process*, char*)+0x94>
c000fb4b:	eb cf                	jmp    c000fb1c <setcwd(Process*, char*)+0x39>
c000fb4d:	8b 14 85 a0 4d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdb260]
c000fb54:	b8 05 00 00 00       	mov    eax,0x5
c000fb59:	85 d2                	test   edx,edx
c000fb5b:	0f 84 9d 00 00 00    	je     c000fbfe <setcwd(Process*, char*)+0x11b>
c000fb61:	b8 06 00 00 00       	mov    eax,0x6
c000fb66:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fb6d:	0f 84 8b 00 00 00    	je     c000fbfe <setcwd(Process*, char*)+0x11b>
c000fb73:	51                   	push   ecx
c000fb74:	51                   	push   ecx
c000fb75:	eb 7b                	jmp    c000fbf2 <setcwd(Process*, char*)+0x10f>
c000fb77:	83 ec 0c             	sub    esp,0xc
c000fb7a:	68 14 01 00 00       	push   0x114
c000fb7f:	e8 58 f5 ff ff       	call   c000f0dc <operator new(unsigned long)>
c000fb84:	83 c4 0c             	add    esp,0xc
c000fb87:	89 c3                	mov    ebx,eax
c000fb89:	55                   	push   ebp
c000fb8a:	56                   	push   esi
c000fb8b:	50                   	push   eax
c000fb8c:	e8 b7 fb ff ff       	call   c000f748 <File::File(char const*, Process*)>
c000fb91:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000fb96:	83 c4 0c             	add    esp,0xc
c000fb99:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000fb9d:	50                   	push   eax
c000fb9e:	8d 44 24 10          	lea    eax,[esp+0x10]
c000fba2:	50                   	push   eax
c000fba3:	53                   	push   ebx
c000fba4:	e8 af fe ff ff       	call   c000fa58 <File::stat(unsigned long long*, bool*)>
c000fba9:	83 c4 10             	add    esp,0x10
c000fbac:	8b 13                	mov    edx,DWORD PTR [ebx]
c000fbae:	83 f8 02             	cmp    eax,0x2
c000fbb1:	75 09                	jne    c000fbbc <setcwd(Process*, char*)+0xd9>
c000fbb3:	83 ec 0c             	sub    esp,0xc
c000fbb6:	53                   	push   ebx
c000fbb7:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fbba:	eb 0d                	jmp    c000fbc9 <setcwd(Process*, char*)+0xe6>
c000fbbc:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000fbbf:	85 c0                	test   eax,eax
c000fbc1:	74 10                	je     c000fbd3 <setcwd(Process*, char*)+0xf0>
c000fbc3:	83 ec 0c             	sub    esp,0xc
c000fbc6:	53                   	push   ebx
c000fbc7:	ff d2                	call   edx
c000fbc9:	83 c4 10             	add    esp,0x10
c000fbcc:	b8 01 00 00 00       	mov    eax,0x1
c000fbd1:	eb 2b                	jmp    c000fbfe <setcwd(Process*, char*)+0x11b>
c000fbd3:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000fbd8:	75 10                	jne    c000fbea <setcwd(Process*, char*)+0x107>
c000fbda:	83 ec 0c             	sub    esp,0xc
c000fbdd:	53                   	push   ebx
c000fbde:	ff d2                	call   edx
c000fbe0:	83 c4 10             	add    esp,0x10
c000fbe3:	b8 02 00 00 00       	mov    eax,0x2
c000fbe8:	eb 14                	jmp    c000fbfe <setcwd(Process*, char*)+0x11b>
c000fbea:	83 ec 0c             	sub    esp,0xc
c000fbed:	53                   	push   ebx
c000fbee:	ff d2                	call   edx
c000fbf0:	58                   	pop    eax
c000fbf1:	5a                   	pop    edx
c000fbf2:	56                   	push   esi
c000fbf3:	57                   	push   edi
c000fbf4:	e8 67 0b ff ff       	call   c0000760 <strcpy>
c000fbf9:	83 c4 10             	add    esp,0x10
c000fbfc:	31 c0                	xor    eax,eax
c000fbfe:	81 c4 1c 02 00 00    	add    esp,0x21c
c000fc04:	5b                   	pop    ebx
c000fc05:	5e                   	pop    esi
c000fc06:	5f                   	pop    edi
c000fc07:	5d                   	pop    ebp
c000fc08:	c3                   	ret    
c000fc09:	90                   	nop

c000fc0a <Directory::Directory(char const*, Process*)>:
c000fc0a:	83 ec 0c             	sub    esp,0xc
c000fc0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc11:	83 ec 08             	sub    esp,0x8
c000fc14:	6a 00                	push   0x0
c000fc16:	50                   	push   eax
c000fc17:	e8 a4 e1 ff ff       	call   c000ddc0 <UnixFile::UnixFile(int)>
c000fc1c:	83 c4 10             	add    esp,0x10
c000fc1f:	ba 74 1b 02 c0       	mov    edx,0xc0021b74
c000fc24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc28:	89 10                	mov    DWORD PTR [eax],edx
c000fc2a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fc2e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000fc34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc38:	83 c0 0d             	add    eax,0xd
c000fc3b:	83 ec 04             	sub    esp,0x4
c000fc3e:	52                   	push   edx
c000fc3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc43:	50                   	push   eax
c000fc44:	e8 55 f9 ff ff       	call   c000f59e <standardiseFiles(char*, char const*, char const*)>
c000fc49:	83 c4 10             	add    esp,0x10
c000fc4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc50:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000fc53:	8d 50 bf             	lea    edx,[eax-0x41]
c000fc56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc5a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000fc60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fc64:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000fc68:	90                   	nop
c000fc69:	83 c4 0c             	add    esp,0xc
c000fc6c:	c3                   	ret    
c000fc6d:	90                   	nop

c000fc6e <Directory::open()>:
c000fc6e:	53                   	push   ebx
c000fc6f:	b8 0b 00 00 00       	mov    eax,0xb
c000fc74:	83 ec 08             	sub    esp,0x8
c000fc77:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc7b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000fc82:	80 fa 19             	cmp    dl,0x19
c000fc85:	77 3d                	ja     c000fcc4 <Directory::open()+0x56>
c000fc87:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000fc8e:	85 d2                	test   edx,edx
c000fc90:	74 32                	je     c000fcc4 <Directory::open()+0x56>
c000fc92:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000fc98:	85 d2                	test   edx,edx
c000fc9a:	74 28                	je     c000fcc4 <Directory::open()+0x56>
c000fc9c:	b8 06 00 00 00       	mov    eax,0x6
c000fca1:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000fca5:	75 1d                	jne    c000fcc4 <Directory::open()+0x56>
c000fca7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000fcad:	50                   	push   eax
c000fcae:	8b 02                	mov    eax,DWORD PTR [edx]
c000fcb0:	51                   	push   ecx
c000fcb1:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000fcb4:	51                   	push   ecx
c000fcb5:	52                   	push   edx
c000fcb6:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000fcb9:	83 c4 10             	add    esp,0x10
c000fcbc:	85 c0                	test   eax,eax
c000fcbe:	75 04                	jne    c000fcc4 <Directory::open()+0x56>
c000fcc0:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000fcc4:	83 c4 08             	add    esp,0x8
c000fcc7:	5b                   	pop    ebx
c000fcc8:	c3                   	ret    
c000fcc9:	90                   	nop

c000fcca <Directory::close()>:
c000fcca:	53                   	push   ebx
c000fccb:	b8 0b 00 00 00       	mov    eax,0xb
c000fcd0:	83 ec 08             	sub    esp,0x8
c000fcd3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fcd7:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fcde:	80 fa 19             	cmp    dl,0x19
c000fce1:	77 41                	ja     c000fd24 <Directory::close()+0x5a>
c000fce3:	8b 1c 95 a0 4d 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdb260]
c000fcea:	85 db                	test   ebx,ebx
c000fcec:	74 36                	je     c000fd24 <Directory::close()+0x5a>
c000fcee:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000fcf5:	74 2d                	je     c000fd24 <Directory::close()+0x5a>
c000fcf7:	b8 05 00 00 00       	mov    eax,0x5
c000fcfc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000fd00:	74 22                	je     c000fd24 <Directory::close()+0x5a>
c000fd02:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000fd06:	8b 04 95 a0 4d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdb260]
c000fd0d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000fd13:	53                   	push   ebx
c000fd14:	53                   	push   ebx
c000fd15:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd17:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000fd1d:	50                   	push   eax
c000fd1e:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000fd21:	83 c4 10             	add    esp,0x10
c000fd24:	83 c4 08             	add    esp,0x8
c000fd27:	5b                   	pop    ebx
c000fd28:	c3                   	ret    
c000fd29:	90                   	nop

c000fd2a <Directory::unlink()>:
c000fd2a:	83 ec 0c             	sub    esp,0xc
c000fd2d:	b8 0b 00 00 00       	mov    eax,0xb
c000fd32:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd36:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd3d:	80 f9 19             	cmp    cl,0x19
c000fd40:	77 2f                	ja     c000fd71 <Directory::unlink()+0x47>
c000fd42:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fd49:	85 c9                	test   ecx,ecx
c000fd4b:	74 24                	je     c000fd71 <Directory::unlink()+0x47>
c000fd4d:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd53:	85 c9                	test   ecx,ecx
c000fd55:	74 1a                	je     c000fd71 <Directory::unlink()+0x47>
c000fd57:	b8 06 00 00 00       	mov    eax,0x6
c000fd5c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fd60:	75 0f                	jne    c000fd71 <Directory::unlink()+0x47>
c000fd62:	50                   	push   eax
c000fd63:	83 c2 0d             	add    edx,0xd
c000fd66:	50                   	push   eax
c000fd67:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fd69:	52                   	push   edx
c000fd6a:	51                   	push   ecx
c000fd6b:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000fd6e:	83 c4 10             	add    esp,0x10
c000fd71:	83 c4 0c             	add    esp,0xc
c000fd74:	c3                   	ret    
c000fd75:	90                   	nop

c000fd76 <Directory::rename(char const*)>:
c000fd76:	83 ec 0c             	sub    esp,0xc
c000fd79:	b8 0b 00 00 00       	mov    eax,0xb
c000fd7e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd82:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fd89:	80 f9 19             	cmp    cl,0x19
c000fd8c:	77 32                	ja     c000fdc0 <Directory::rename(char const*)+0x4a>
c000fd8e:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fd95:	85 c9                	test   ecx,ecx
c000fd97:	74 27                	je     c000fdc0 <Directory::rename(char const*)+0x4a>
c000fd99:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fd9f:	85 c9                	test   ecx,ecx
c000fda1:	74 1d                	je     c000fdc0 <Directory::rename(char const*)+0x4a>
c000fda3:	b8 06 00 00 00       	mov    eax,0x6
c000fda8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fdac:	75 12                	jne    c000fdc0 <Directory::rename(char const*)+0x4a>
c000fdae:	50                   	push   eax
c000fdaf:	83 c2 0d             	add    edx,0xd
c000fdb2:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fdb4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fdb8:	52                   	push   edx
c000fdb9:	51                   	push   ecx
c000fdba:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000fdbd:	83 c4 10             	add    esp,0x10
c000fdc0:	83 c4 0c             	add    esp,0xc
c000fdc3:	c3                   	ret    

c000fdc4 <Directory::exists()>:
c000fdc4:	83 ec 0c             	sub    esp,0xc
c000fdc7:	31 c0                	xor    eax,eax
c000fdc9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fdcd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fdd4:	80 f9 19             	cmp    cl,0x19
c000fdd7:	77 24                	ja     c000fdfd <Directory::exists()+0x39>
c000fdd9:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fde0:	85 c9                	test   ecx,ecx
c000fde2:	74 19                	je     c000fdfd <Directory::exists()+0x39>
c000fde4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fdea:	85 c9                	test   ecx,ecx
c000fdec:	74 0f                	je     c000fdfd <Directory::exists()+0x39>
c000fdee:	50                   	push   eax
c000fdef:	83 c2 0d             	add    edx,0xd
c000fdf2:	50                   	push   eax
c000fdf3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fdf5:	52                   	push   edx
c000fdf6:	51                   	push   ecx
c000fdf7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000fdfa:	83 c4 10             	add    esp,0x10
c000fdfd:	83 c4 0c             	add    esp,0xc
c000fe00:	c3                   	ret    
c000fe01:	90                   	nop

c000fe02 <Directory::read(dirent*)>:
c000fe02:	83 ec 1c             	sub    esp,0x1c
c000fe05:	b8 0b 00 00 00       	mov    eax,0xb
c000fe0a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000fe0e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000fe15:	80 fa 19             	cmp    dl,0x19
c000fe18:	77 30                	ja     c000fe4a <Directory::read(dirent*)+0x48>
c000fe1a:	8b 14 95 a0 4d 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdb260]
c000fe21:	85 d2                	test   edx,edx
c000fe23:	74 25                	je     c000fe4a <Directory::read(dirent*)+0x48>
c000fe25:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000fe2c:	74 1c                	je     c000fe4a <Directory::read(dirent*)+0x48>
c000fe2e:	83 ec 0c             	sub    esp,0xc
c000fe31:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fe33:	8d 54 24 18          	lea    edx,[esp+0x18]
c000fe37:	52                   	push   edx
c000fe38:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000fe3c:	6a 00                	push   0x0
c000fe3e:	68 10 01 00 00       	push   0x110
c000fe43:	51                   	push   ecx
c000fe44:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fe47:	83 c4 20             	add    esp,0x20
c000fe4a:	83 c4 1c             	add    esp,0x1c
c000fe4d:	c3                   	ret    

c000fe4e <Directory::create()>:
c000fe4e:	83 ec 0c             	sub    esp,0xc
c000fe51:	b8 0b 00 00 00       	mov    eax,0xb
c000fe56:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fe5a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000fe61:	80 f9 19             	cmp    cl,0x19
c000fe64:	77 2f                	ja     c000fe95 <Directory::create()+0x47>
c000fe66:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c000fe6d:	85 c9                	test   ecx,ecx
c000fe6f:	74 24                	je     c000fe95 <Directory::create()+0x47>
c000fe71:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000fe77:	85 c9                	test   ecx,ecx
c000fe79:	74 1a                	je     c000fe95 <Directory::create()+0x47>
c000fe7b:	b8 06 00 00 00       	mov    eax,0x6
c000fe80:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000fe84:	75 0f                	jne    c000fe95 <Directory::create()+0x47>
c000fe86:	50                   	push   eax
c000fe87:	83 c2 0d             	add    edx,0xd
c000fe8a:	50                   	push   eax
c000fe8b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000fe8d:	52                   	push   edx
c000fe8e:	51                   	push   ecx
c000fe8f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000fe92:	83 c4 10             	add    esp,0x10
c000fe95:	83 c4 0c             	add    esp,0xc
c000fe98:	c3                   	ret    
c000fe99:	90                   	nop

c000fe9a <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000fe9a:	b8 0a 00 00 00       	mov    eax,0xa
c000fe9f:	c3                   	ret    

c000fea0 <Bus::Bus(char const*)>:
c000fea0:	83 ec 0c             	sub    esp,0xc
c000fea3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fea7:	83 ec 08             	sub    esp,0x8
c000feaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000feae:	50                   	push   eax
c000feaf:	e8 62 09 00 00       	call   c0010816 <Device::Device(char const*)>
c000feb4:	83 c4 10             	add    esp,0x10
c000feb7:	ba 90 1b 02 c0       	mov    edx,0xc0021b90
c000febc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fec0:	89 10                	mov    DWORD PTR [eax],edx
c000fec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fec6:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000fed0:	90                   	nop
c000fed1:	83 c4 0c             	add    esp,0xc
c000fed4:	c3                   	ret    
c000fed5:	90                   	nop

c000fed6 <Bus::~Bus()>:
c000fed6:	83 ec 0c             	sub    esp,0xc
c000fed9:	ba 90 1b 02 c0       	mov    edx,0xc0021b90
c000fede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fee2:	89 10                	mov    DWORD PTR [eax],edx
c000fee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fee8:	83 ec 0c             	sub    esp,0xc
c000feeb:	50                   	push   eax
c000feec:	e8 db 05 00 00       	call   c00104cc <Device::~Device()>
c000fef1:	83 c4 10             	add    esp,0x10
c000fef4:	90                   	nop
c000fef5:	83 c4 0c             	add    esp,0xc
c000fef8:	c3                   	ret    
c000fef9:	90                   	nop

c000fefa <Bus::~Bus()>:
c000fefa:	83 ec 0c             	sub    esp,0xc
c000fefd:	83 ec 0c             	sub    esp,0xc
c000ff00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff04:	e8 cd ff ff ff       	call   c000fed6 <Bus::~Bus()>
c000ff09:	83 c4 10             	add    esp,0x10
c000ff0c:	83 ec 08             	sub    esp,0x8
c000ff0f:	68 58 01 00 00       	push   0x158
c000ff14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff18:	e8 ce f1 ff ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c000ff1d:	83 c4 10             	add    esp,0x10
c000ff20:	83 c4 0c             	add    esp,0xc
c000ff23:	c3                   	ret    

c000ff24 <Buzzer::Buzzer(char const*)>:
c000ff24:	83 ec 0c             	sub    esp,0xc
c000ff27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff2b:	83 ec 08             	sub    esp,0x8
c000ff2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff32:	50                   	push   eax
c000ff33:	e8 de 08 00 00       	call   c0010816 <Device::Device(char const*)>
c000ff38:	83 c4 10             	add    esp,0x10
c000ff3b:	ba bc 1b 02 c0       	mov    edx,0xc0021bbc
c000ff40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff44:	89 10                	mov    DWORD PTR [eax],edx
c000ff46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff4a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ff54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff58:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c000ff62:	90                   	nop
c000ff63:	83 c4 0c             	add    esp,0xc
c000ff66:	c3                   	ret    
c000ff67:	90                   	nop

c000ff68 <Buzzer::~Buzzer()>:
c000ff68:	83 ec 0c             	sub    esp,0xc
c000ff6b:	ba bc 1b 02 c0       	mov    edx,0xc0021bbc
c000ff70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff74:	89 10                	mov    DWORD PTR [eax],edx
c000ff76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff7a:	83 ec 0c             	sub    esp,0xc
c000ff7d:	50                   	push   eax
c000ff7e:	e8 49 05 00 00       	call   c00104cc <Device::~Device()>
c000ff83:	83 c4 10             	add    esp,0x10
c000ff86:	90                   	nop
c000ff87:	83 c4 0c             	add    esp,0xc
c000ff8a:	c3                   	ret    
c000ff8b:	90                   	nop

c000ff8c <Buzzer::~Buzzer()>:
c000ff8c:	83 ec 0c             	sub    esp,0xc
c000ff8f:	83 ec 0c             	sub    esp,0xc
c000ff92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff96:	e8 cd ff ff ff       	call   c000ff68 <Buzzer::~Buzzer()>
c000ff9b:	83 c4 10             	add    esp,0x10
c000ff9e:	83 ec 08             	sub    esp,0x8
c000ffa1:	68 5c 01 00 00       	push   0x15c
c000ffa6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffaa:	e8 3c f1 ff ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c000ffaf:	83 c4 10             	add    esp,0x10
c000ffb2:	83 c4 0c             	add    esp,0xc
c000ffb5:	c3                   	ret    

c000ffb6 <Buzzer::stop()>:
c000ffb6:	83 ec 14             	sub    esp,0x14
c000ffb9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ffbd:	8b 10                	mov    edx,DWORD PTR [eax]
c000ffbf:	6a 00                	push   0x0
c000ffc1:	50                   	push   eax
c000ffc2:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ffc5:	83 c4 1c             	add    esp,0x1c
c000ffc8:	c3                   	ret    

c000ffc9 <beepThread(void*)>:
c000ffc9:	53                   	push   ebx
c000ffca:	83 ec 08             	sub    esp,0x8
c000ffcd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ffd1:	e8 75 8a 00 00       	call   c0018a4b <unlockScheduler()>
c000ffd6:	52                   	push   edx
c000ffd7:	b8 40 42 0f 00       	mov    eax,0xf4240
c000ffdc:	52                   	push   edx
c000ffdd:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c000ffe3:	52                   	push   edx
c000ffe4:	50                   	push   eax
c000ffe5:	e8 bd 8f 00 00       	call   c0018fa7 <nanoSleep(unsigned long long)>
c000ffea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffed:	e8 c4 ff ff ff       	call   c000ffb6 <Buzzer::stop()>
c000fff2:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000fffa:	83 c4 18             	add    esp,0x18
c000fffd:	5b                   	pop    ebx
c000fffe:	e9 e8 8e 00 00       	jmp    c0018eeb <blockTask(TaskState)>
c0010003:	90                   	nop

c0010004 <Buzzer::beep(int, int, bool)>:
c0010004:	57                   	push   edi
c0010005:	56                   	push   esi
c0010006:	53                   	push   ebx
c0010007:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001000b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001000f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010013:	52                   	push   edx
c0010014:	52                   	push   edx
c0010015:	8b 06                	mov    eax,DWORD PTR [esi]
c0010017:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001001b:	56                   	push   esi
c001001c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001001f:	89 f8                	mov    eax,edi
c0010021:	83 c4 10             	add    esp,0x10
c0010024:	84 c0                	test   al,al
c0010026:	74 1f                	je     c0010047 <Buzzer::beep(int, int, bool)+0x43>
c0010028:	50                   	push   eax
c0010029:	50                   	push   eax
c001002a:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0010030:	99                   	cdq    
c0010031:	52                   	push   edx
c0010032:	50                   	push   eax
c0010033:	e8 6f 8f 00 00       	call   c0018fa7 <nanoSleep(unsigned long long)>
c0010038:	83 c4 10             	add    esp,0x10
c001003b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001003f:	5b                   	pop    ebx
c0010040:	5e                   	pop    esi
c0010041:	5f                   	pop    edi
c0010042:	e9 6f ff ff ff       	jmp    c000ffb6 <Buzzer::stop()>
c0010047:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c001004d:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0010052:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c001005a:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c001005e:	c7 44 24 14 c9 ff 00 c0 	mov    DWORD PTR [esp+0x14],0xc000ffc9
c0010066:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001006a:	5b                   	pop    ebx
c001006b:	5e                   	pop    esi
c001006c:	5f                   	pop    edi
c001006d:	e9 0c 8b 00 00       	jmp    c0018b7e <Process::createThread(void (*)(void*), void*, int)>

c0010072 <loadClockSettings()>:
c0010072:	c7 05 14 49 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc0024914,0xa
c001007c:	c6 05 11 49 02 c0 00 	mov    BYTE PTR ds:0xc0024911,0x0
c0010083:	c6 05 10 49 02 c0 01 	mov    BYTE PTR ds:0xc0024910,0x1
c001008a:	c3                   	ret    
c001008b:	90                   	nop

c001008c <Clock::Clock(char const*)>:
c001008c:	83 ec 0c             	sub    esp,0xc
c001008f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010093:	83 ec 08             	sub    esp,0x8
c0010096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001009a:	50                   	push   eax
c001009b:	e8 76 07 00 00       	call   c0010816 <Device::Device(char const*)>
c00100a0:	83 c4 10             	add    esp,0x10
c00100a3:	ba ec 1b 02 c0       	mov    edx,0xc0021bec
c00100a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100ac:	89 10                	mov    DWORD PTR [eax],edx
c00100ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100b2:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c00100bc:	90                   	nop
c00100bd:	83 c4 0c             	add    esp,0xc
c00100c0:	c3                   	ret    
c00100c1:	90                   	nop

c00100c2 <Clock::~Clock()>:
c00100c2:	83 ec 0c             	sub    esp,0xc
c00100c5:	ba ec 1b 02 c0       	mov    edx,0xc0021bec
c00100ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100ce:	89 10                	mov    DWORD PTR [eax],edx
c00100d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100d4:	83 ec 0c             	sub    esp,0xc
c00100d7:	50                   	push   eax
c00100d8:	e8 ef 03 00 00       	call   c00104cc <Device::~Device()>
c00100dd:	83 c4 10             	add    esp,0x10
c00100e0:	90                   	nop
c00100e1:	83 c4 0c             	add    esp,0xc
c00100e4:	c3                   	ret    
c00100e5:	90                   	nop

c00100e6 <Clock::~Clock()>:
c00100e6:	83 ec 0c             	sub    esp,0xc
c00100e9:	83 ec 0c             	sub    esp,0xc
c00100ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100f0:	e8 cd ff ff ff       	call   c00100c2 <Clock::~Clock()>
c00100f5:	83 c4 10             	add    esp,0x10
c00100f8:	83 ec 08             	sub    esp,0x8
c00100fb:	68 58 01 00 00       	push   0x158
c0010100:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010104:	e8 e2 ef ff ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c0010109:	83 c4 10             	add    esp,0x10
c001010c:	83 c4 0c             	add    esp,0xc
c001010f:	c3                   	ret    

c0010110 <Clock::timeInSecondsLocal()>:
c0010110:	53                   	push   ebx
c0010111:	83 ec 14             	sub    esp,0x14
c0010114:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010118:	8b 10                	mov    edx,DWORD PTR [eax]
c001011a:	50                   	push   eax
c001011b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001011e:	0f b6 0d 10 49 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024910
c0010125:	03 0d 14 49 02 c0    	add    ecx,DWORD PTR ds:0xc0024914
c001012b:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0010131:	89 cb                	mov    ebx,ecx
c0010133:	c1 fb 1f             	sar    ebx,0x1f
c0010136:	01 c8                	add    eax,ecx
c0010138:	11 da                	adc    edx,ebx
c001013a:	83 c4 10             	add    esp,0x10
c001013d:	31 c9                	xor    ecx,ecx
c001013f:	80 3d 11 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024911,0x0
c0010146:	74 05                	je     c001014d <Clock::timeInSecondsLocal()+0x3d>
c0010148:	b9 08 07 00 00       	mov    ecx,0x708
c001014d:	31 db                	xor    ebx,ebx
c001014f:	01 c8                	add    eax,ecx
c0010151:	11 da                	adc    edx,ebx
c0010153:	83 c4 08             	add    esp,0x8
c0010156:	5b                   	pop    ebx
c0010157:	c3                   	ret    

c0010158 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0010158:	57                   	push   edi
c0010159:	56                   	push   esi
c001015a:	53                   	push   ebx
c001015b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001015f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010163:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010167:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010169:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c001016c:	0f b6 05 10 49 02 c0 	movzx  eax,BYTE PTR ds:0xc0024910
c0010173:	03 05 14 49 02 c0    	add    eax,DWORD PTR ds:0xc0024914
c0010179:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c001017f:	99                   	cdq    
c0010180:	29 c6                	sub    esi,eax
c0010182:	19 d7                	sbb    edi,edx
c0010184:	89 f0                	mov    eax,esi
c0010186:	89 fa                	mov    edx,edi
c0010188:	31 f6                	xor    esi,esi
c001018a:	80 3d 11 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024911,0x0
c0010191:	74 05                	je     c0010198 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0010193:	be 08 07 00 00       	mov    esi,0x708
c0010198:	31 ff                	xor    edi,edi
c001019a:	29 f0                	sub    eax,esi
c001019c:	19 fa                	sbb    edx,edi
c001019e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00101a2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00101a6:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00101aa:	89 d8                	mov    eax,ebx
c00101ac:	5b                   	pop    ebx
c00101ad:	5e                   	pop    esi
c00101ae:	5f                   	pop    edi
c00101af:	ff e0                	jmp    eax

c00101b1 <datetimeToSeconds(datetime_t)>:
c00101b1:	55                   	push   ebp
c00101b2:	57                   	push   edi
c00101b3:	56                   	push   esi
c00101b4:	53                   	push   ebx
c00101b5:	83 ec 14             	sub    esp,0x14
c00101b8:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00101bc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00101c0:	0f b6 f5             	movzx  esi,ch
c00101c3:	6b f6 3c             	imul   esi,esi,0x3c
c00101c6:	89 cf                	mov    edi,ecx
c00101c8:	89 d3                	mov    ebx,edx
c00101ca:	0f b6 c9             	movzx  ecx,cl
c00101cd:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c00101d3:	0f b6 c6             	movzx  eax,dh
c00101d6:	c1 ef 10             	shr    edi,0x10
c00101d9:	48                   	dec    eax
c00101da:	c1 eb 10             	shr    ebx,0x10
c00101dd:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00101e1:	89 f8                	mov    eax,edi
c00101e3:	0f b6 f8             	movzx  edi,al
c00101e6:	01 fe                	add    esi,edi
c00101e8:	01 f1                	add    ecx,esi
c00101ea:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00101ee:	c1 f9 1f             	sar    ecx,0x1f
c00101f1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00101f5:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c00101fa:	0f b6 d2             	movzx  edx,dl
c00101fd:	66 81 eb 6c 07       	sub    bx,0x76c
c0010202:	8b 0c 8d 20 1c 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffde3e0]
c0010209:	0f b7 f3             	movzx  esi,bx
c001020c:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0010210:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0010215:	76 29                	jbe    c0010240 <datetimeToSeconds(datetime_t)+0x8f>
c0010217:	f6 c3 03             	test   bl,0x3
c001021a:	75 24                	jne    c0010240 <datetimeToSeconds(datetime_t)+0x8f>
c001021c:	31 d2                	xor    edx,edx
c001021e:	bf 64 00 00 00       	mov    edi,0x64
c0010223:	89 d8                	mov    eax,ebx
c0010225:	66 f7 f7             	div    di
c0010228:	66 85 d2             	test   dx,dx
c001022b:	75 12                	jne    c001023f <datetimeToSeconds(datetime_t)+0x8e>
c001022d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0010233:	bf 90 01 00 00       	mov    edi,0x190
c0010238:	99                   	cdq    
c0010239:	f7 ff                	idiv   edi
c001023b:	85 d2                	test   edx,edx
c001023d:	75 01                	jne    c0010240 <datetimeToSeconds(datetime_t)+0x8f>
c001023f:	41                   	inc    ecx
c0010240:	66 83 fb 46          	cmp    bx,0x46
c0010244:	76 45                	jbe    c001028b <datetimeToSeconds(datetime_t)+0xda>
c0010246:	bb 46 00 00 00       	mov    ebx,0x46
c001024b:	bf 64 00 00 00       	mov    edi,0x64
c0010250:	bd 90 01 00 00       	mov    ebp,0x190
c0010255:	b8 6d 01 00 00       	mov    eax,0x16d
c001025a:	f6 c3 03             	test   bl,0x3
c001025d:	75 23                	jne    c0010282 <datetimeToSeconds(datetime_t)+0xd1>
c001025f:	89 d8                	mov    eax,ebx
c0010261:	99                   	cdq    
c0010262:	f7 ff                	idiv   edi
c0010264:	85 d2                	test   edx,edx
c0010266:	b8 6e 01 00 00       	mov    eax,0x16e
c001026b:	75 15                	jne    c0010282 <datetimeToSeconds(datetime_t)+0xd1>
c001026d:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0010273:	99                   	cdq    
c0010274:	f7 fd                	idiv   ebp
c0010276:	31 c0                	xor    eax,eax
c0010278:	85 d2                	test   edx,edx
c001027a:	0f 94 c0             	sete   al
c001027d:	05 6d 01 00 00       	add    eax,0x16d
c0010282:	43                   	inc    ebx
c0010283:	01 c1                	add    ecx,eax
c0010285:	39 f3                	cmp    ebx,esi
c0010287:	7c cc                	jl     c0010255 <datetimeToSeconds(datetime_t)+0xa4>
c0010289:	eb 3b                	jmp    c00102c6 <datetimeToSeconds(datetime_t)+0x115>
c001028b:	74 39                	je     c00102c6 <datetimeToSeconds(datetime_t)+0x115>
c001028d:	b8 45 00 00 00       	mov    eax,0x45
c0010292:	89 c2                	mov    edx,eax
c0010294:	83 e2 03             	and    edx,0x3
c0010297:	39 f0                	cmp    eax,esi
c0010299:	7e 13                	jle    c00102ae <datetimeToSeconds(datetime_t)+0xfd>
c001029b:	85 d2                	test   edx,edx
c001029d:	0f 94 c2             	sete   dl
c00102a0:	0f b6 d2             	movzx  edx,dl
c00102a3:	81 c2 6d 01 00 00    	add    edx,0x16d
c00102a9:	48                   	dec    eax
c00102aa:	29 d1                	sub    ecx,edx
c00102ac:	eb e4                	jmp    c0010292 <datetimeToSeconds(datetime_t)+0xe1>
c00102ae:	b8 6d 01 00 00       	mov    eax,0x16d
c00102b3:	85 d2                	test   edx,edx
c00102b5:	75 0d                	jne    c00102c4 <datetimeToSeconds(datetime_t)+0x113>
c00102b7:	31 c0                	xor    eax,eax
c00102b9:	66 85 db             	test   bx,bx
c00102bc:	0f 95 c0             	setne  al
c00102bf:	05 6d 01 00 00       	add    eax,0x16d
c00102c4:	29 c1                	sub    ecx,eax
c00102c6:	b8 80 51 01 00       	mov    eax,0x15180
c00102cb:	f7 e9                	imul   ecx
c00102cd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00102d1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00102d5:	83 c4 14             	add    esp,0x14
c00102d8:	5b                   	pop    ebx
c00102d9:	5e                   	pop    esi
c00102da:	5f                   	pop    edi
c00102db:	5d                   	pop    ebp
c00102dc:	c3                   	ret    
c00102dd:	90                   	nop

c00102de <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00102de:	57                   	push   edi
c00102df:	56                   	push   esi
c00102e0:	53                   	push   ebx
c00102e1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00102e5:	8b 06                	mov    eax,DWORD PTR [esi]
c00102e7:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c00102ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00102f2:	e8 ba fe ff ff       	call   c00101b1 <datetimeToSeconds(datetime_t)>
c00102f7:	59                   	pop    ecx
c00102f8:	0f b6 0d 10 49 02 c0 	movzx  ecx,BYTE PTR ds:0xc0024910
c00102ff:	03 0d 14 49 02 c0    	add    ecx,DWORD PTR ds:0xc0024914
c0010305:	5b                   	pop    ebx
c0010306:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001030c:	89 cb                	mov    ebx,ecx
c001030e:	c1 fb 1f             	sar    ebx,0x1f
c0010311:	29 c8                	sub    eax,ecx
c0010313:	19 da                	sbb    edx,ebx
c0010315:	31 c9                	xor    ecx,ecx
c0010317:	80 3d 11 49 02 c0 00 	cmp    BYTE PTR ds:0xc0024911,0x0
c001031e:	74 05                	je     c0010325 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0010320:	b9 08 07 00 00       	mov    ecx,0x708
c0010325:	31 db                	xor    ebx,ebx
c0010327:	29 c8                	sub    eax,ecx
c0010329:	19 da                	sbb    edx,ebx
c001032b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001032f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0010333:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0010337:	5b                   	pop    ebx
c0010338:	89 f8                	mov    eax,edi
c001033a:	5e                   	pop    esi
c001033b:	5f                   	pop    edi
c001033c:	ff e0                	jmp    eax

c001033e <secondsToDatetime(unsigned long long)>:
c001033e:	55                   	push   ebp
c001033f:	57                   	push   edi
c0010340:	56                   	push   esi
c0010341:	53                   	push   ebx
c0010342:	83 ec 1c             	sub    esp,0x1c
c0010345:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010349:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001034d:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0010351:	6a 00                	push   0x0
c0010353:	68 80 51 01 00       	push   0x15180
c0010358:	55                   	push   ebp
c0010359:	57                   	push   edi
c001035a:	e8 ad f1 00 00       	call   c001f50c <__udivdi3>
c001035f:	83 c4 10             	add    esp,0x10
c0010362:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010366:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c001036c:	6a 00                	push   0x0
c001036e:	68 80 51 01 00       	push   0x15180
c0010373:	55                   	push   ebp
c0010374:	57                   	push   edi
c0010375:	e8 92 f2 00 00       	call   c001f60c <__umoddi3>
c001037a:	bf 10 0e 00 00       	mov    edi,0xe10
c001037f:	83 c4 10             	add    esp,0x10
c0010382:	99                   	cdq    
c0010383:	f7 ff                	idiv   edi
c0010385:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0010388:	89 d0                	mov    eax,edx
c001038a:	99                   	cdq    
c001038b:	bf 3c 00 00 00       	mov    edi,0x3c
c0010390:	f7 ff                	idiv   edi
c0010392:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0010395:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0010398:	85 db                	test   ebx,ebx
c001039a:	79 11                	jns    c00103ad <secondsToDatetime(unsigned long long)+0x6f>
c001039c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00103a0:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00103a6:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00103ab:	eb 07                	jmp    c00103b4 <secondsToDatetime(unsigned long long)+0x76>
c00103ad:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00103b2:	89 d8                	mov    eax,ebx
c00103b4:	99                   	cdq    
c00103b5:	f7 f9                	idiv   ecx
c00103b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00103bb:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00103c0:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00103c8:	01 c3                	add    ebx,eax
c00103ca:	31 d2                	xor    edx,edx
c00103cc:	89 d8                	mov    eax,ebx
c00103ce:	bf b4 05 00 00       	mov    edi,0x5b4
c00103d3:	f7 f1                	div    ecx
c00103d5:	31 d2                	xor    edx,edx
c00103d7:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00103dc:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00103df:	89 d8                	mov    eax,ebx
c00103e1:	f7 f7                	div    edi
c00103e3:	29 c1                	sub    ecx,eax
c00103e5:	31 d2                	xor    edx,edx
c00103e7:	89 d8                	mov    eax,ebx
c00103e9:	f7 f5                	div    ebp
c00103eb:	29 c1                	sub    ecx,eax
c00103ed:	bd 6d 01 00 00       	mov    ebp,0x16d
c00103f2:	89 c8                	mov    eax,ecx
c00103f4:	31 d2                	xor    edx,edx
c00103f6:	f7 f5                	div    ebp
c00103f8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00103fc:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0010401:	89 c8                	mov    eax,ecx
c0010403:	31 d2                	xor    edx,edx
c0010405:	f7 f5                	div    ebp
c0010407:	01 c3                	add    ebx,eax
c0010409:	31 d2                	xor    edx,edx
c001040b:	89 c8                	mov    eax,ecx
c001040d:	f7 f7                	div    edi
c001040f:	29 c3                	sub    ebx,eax
c0010411:	bf 99 00 00 00       	mov    edi,0x99
c0010416:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001041e:	29 c3                	sub    ebx,eax
c0010420:	31 d2                	xor    edx,edx
c0010422:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0010425:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0010428:	83 c1 02             	add    ecx,0x2
c001042b:	bb 05 00 00 00       	mov    ebx,0x5
c0010430:	89 c8                	mov    eax,ecx
c0010432:	f7 f7                	div    edi
c0010434:	89 c7                	mov    edi,eax
c0010436:	31 d2                	xor    edx,edx
c0010438:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001043e:	83 c0 02             	add    eax,0x2
c0010441:	f7 f3                	div    ebx
c0010443:	89 eb                	mov    ebx,ebp
c0010445:	29 c3                	sub    ebx,eax
c0010447:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c001044d:	19 c0                	sbb    eax,eax
c001044f:	31 d2                	xor    edx,edx
c0010451:	83 e0 0c             	and    eax,0xc
c0010454:	88 1e                	mov    BYTE PTR [esi],bl
c0010456:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c001045a:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0010462:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0010466:	83 f9 01             	cmp    ecx,0x1
c0010469:	0f 96 c2             	setbe  dl
c001046c:	01 d0                	add    eax,edx
c001046e:	41                   	inc    ecx
c001046f:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0010473:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0010476:	83 c4 1c             	add    esp,0x1c
c0010479:	89 f0                	mov    eax,esi
c001047b:	5b                   	pop    ebx
c001047c:	5e                   	pop    esi
c001047d:	5f                   	pop    edi
c001047e:	5d                   	pop    ebp
c001047f:	c2 04 00             	ret    0x4

c0010482 <Clock::timeInDatetimeLocal()>:
c0010482:	53                   	push   ebx
c0010483:	83 ec 14             	sub    esp,0x14
c0010486:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001048a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001048e:	e8 7d fc ff ff       	call   c0010110 <Clock::timeInSecondsLocal()>
c0010493:	83 c4 0c             	add    esp,0xc
c0010496:	52                   	push   edx
c0010497:	50                   	push   eax
c0010498:	53                   	push   ebx
c0010499:	e8 a0 fe ff ff       	call   c001033e <secondsToDatetime(unsigned long long)>
c001049e:	83 c4 14             	add    esp,0x14
c00104a1:	89 d8                	mov    eax,ebx
c00104a3:	5b                   	pop    ebx
c00104a4:	c2 04 00             	ret    0x4
c00104a7:	90                   	nop

c00104a8 <Device::hibernate()>:
c00104a8:	c3                   	ret    
c00104a9:	90                   	nop

c00104aa <Device::wake()>:
c00104aa:	c3                   	ret    
c00104ab:	90                   	nop

c00104ac <Device::detect()>:
c00104ac:	c3                   	ret    
c00104ad:	90                   	nop

c00104ae <Device::disableLegacy()>:
c00104ae:	c3                   	ret    
c00104af:	90                   	nop

c00104b0 <Device::powerSaving(PowerSavingLevel)>:
c00104b0:	c3                   	ret    
c00104b1:	90                   	nop

c00104b2 <DriverlessDevice::close(int, int, void*)>:
c00104b2:	31 c0                	xor    eax,eax
c00104b4:	c3                   	ret    
c00104b5:	90                   	nop

c00104b6 <DriverlessDevice::detect()>:
c00104b6:	c3                   	ret    
c00104b7:	90                   	nop

c00104b8 <DriverlessDevice::open(int, int, void*)>:
c00104b8:	83 ec 18             	sub    esp,0x18
c00104bb:	68 50 1c 02 c0       	push   0xc0021c50
c00104c0:	e8 7b 55 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c00104c5:	83 c8 ff             	or     eax,0xffffffff
c00104c8:	83 c4 1c             	add    esp,0x1c
c00104cb:	c3                   	ret    

c00104cc <Device::~Device()>:
c00104cc:	ba 78 1c 02 c0       	mov    edx,0xc0021c78
c00104d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00104d5:	89 10                	mov    DWORD PTR [eax],edx
c00104d7:	90                   	nop
c00104d8:	c3                   	ret    
c00104d9:	90                   	nop

c00104da <Device::~Device()>:
c00104da:	83 ec 0c             	sub    esp,0xc
c00104dd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00104e1:	e8 e6 ff ff ff       	call   c00104cc <Device::~Device()>
c00104e6:	83 c4 04             	add    esp,0x4
c00104e9:	83 ec 08             	sub    esp,0x8
c00104ec:	68 58 01 00 00       	push   0x158
c00104f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00104f5:	e8 f1 eb ff ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c00104fa:	83 c4 10             	add    esp,0x10
c00104fd:	83 c4 0c             	add    esp,0xc
c0010500:	c3                   	ret    
c0010501:	90                   	nop

c0010502 <Device::findAndLoadDriver()>:
c0010502:	c3                   	ret    
c0010503:	90                   	nop

c0010504 <Device::preOpenPCI(PCIDeviceInfo)>:
c0010504:	57                   	push   edi
c0010505:	b9 09 00 00 00       	mov    ecx,0x9
c001050a:	56                   	push   esi
c001050b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001050f:	81 c7 18 01 00 00    	add    edi,0x118
c0010515:	8d 74 24 10          	lea    esi,[esp+0x10]
c0010519:	c7 47 fc 02 00 00 00 	mov    DWORD PTR [edi-0x4],0x2
c0010520:	fc                   	cld    
c0010521:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010523:	5e                   	pop    esi
c0010524:	5f                   	pop    edi
c0010525:	c3                   	ret    

c0010526 <Device::preOpenACPI(void*, char*, char*)>:
c0010526:	56                   	push   esi
c0010527:	53                   	push   ebx
c0010528:	83 ec 08             	sub    esp,0x8
c001052b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001052f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010533:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010537:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c001053d:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0010547:	6a 1e                	push   0x1e
c0010549:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001054f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010553:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0010559:	50                   	push   eax
c001055a:	e8 2c 01 ff ff       	call   c000068b <memcpy>
c001055f:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0010563:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010567:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c001056f:	83 c4 14             	add    esp,0x14
c0010572:	5b                   	pop    ebx
c0010573:	5e                   	pop    esi
c0010574:	e9 12 01 ff ff       	jmp    c000068b <memcpy>
c0010579:	90                   	nop

c001057a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001057a:	55                   	push   ebp
c001057b:	57                   	push   edi
c001057c:	56                   	push   esi
c001057d:	53                   	push   ebx
c001057e:	83 ec 0c             	sub    esp,0xc
c0010581:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010585:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010589:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001058d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010591:	0f b6 5c 24 2c       	movzx  ebx,BYTE PTR [esp+0x2c]
c0010596:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001059d:	75 0b                	jne    c00105aa <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x30>
c001059f:	8b 00                	mov    eax,DWORD PTR [eax]
c00105a1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00105a5:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00105a8:	eb 24                	jmp    c00105ce <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x54>
c00105aa:	e8 25 43 00 00       	call   c00148d4 <thisCPU()>
c00105af:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00105b5:	8b 10                	mov    edx,DWORD PTR [eax]
c00105b7:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00105bb:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00105bf:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c00105c3:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c00105c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00105cb:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00105ce:	83 c4 0c             	add    esp,0xc
c00105d1:	5b                   	pop    ebx
c00105d2:	5e                   	pop    esi
c00105d3:	5f                   	pop    edi
c00105d4:	5d                   	pop    ebp
c00105d5:	ff e0                	jmp    eax
c00105d7:	90                   	nop

c00105d8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00105d8:	57                   	push   edi
c00105d9:	56                   	push   esi
c00105da:	53                   	push   ebx
c00105db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105df:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00105e3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00105e7:	0f b6 5c 24 1c       	movzx  ebx,BYTE PTR [esp+0x1c]
c00105ec:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00105f3:	75 0b                	jne    c0010600 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x28>
c00105f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00105f7:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00105fb:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00105fe:	eb 20                	jmp    c0010620 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x48>
c0010600:	e8 cf 42 00 00       	call   c00148d4 <thisCPU()>
c0010605:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001060b:	8b 10                	mov    edx,DWORD PTR [eax]
c001060d:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c0010611:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0010615:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0010619:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001061d:	8b 42 30             	mov    eax,DWORD PTR [edx+0x30]
c0010620:	5b                   	pop    ebx
c0010621:	5e                   	pop    esi
c0010622:	5f                   	pop    edi
c0010623:	ff e0                	jmp    eax
c0010625:	90                   	nop

c0010626 <Device::addChild(Device*)>:
c0010626:	53                   	push   ebx
c0010627:	83 ec 08             	sub    esp,0x8
c001062a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001062e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010632:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0010638:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001063e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010640:	85 d2                	test   edx,edx
c0010642:	74 04                	je     c0010648 <Device::addChild(Device*)+0x22>
c0010644:	89 d3                	mov    ebx,edx
c0010646:	eb f6                	jmp    c001063e <Device::addChild(Device*)+0x18>
c0010648:	83 ec 0c             	sub    esp,0xc
c001064b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001064e:	6a 08                	push   0x8
c0010650:	e8 87 ea ff ff       	call   c000f0dc <operator new(unsigned long)>
c0010655:	89 03                	mov    DWORD PTR [ebx],eax
c0010657:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001065d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010664:	83 c4 18             	add    esp,0x18
c0010667:	5b                   	pop    ebx
c0010668:	c3                   	ret    
c0010669:	90                   	nop

c001066a <Device::removeAllChildren()>:
c001066a:	56                   	push   esi
c001066b:	53                   	push   ebx
c001066c:	52                   	push   edx
c001066d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010671:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0010677:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001067a:	74 17                	je     c0010693 <Device::removeAllChildren()+0x29>
c001067c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001067f:	85 c0                	test   eax,eax
c0010681:	74 0c                	je     c001068f <Device::removeAllChildren()+0x25>
c0010683:	83 ec 0c             	sub    esp,0xc
c0010686:	8b 10                	mov    edx,DWORD PTR [eax]
c0010688:	50                   	push   eax
c0010689:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001068c:	83 c4 10             	add    esp,0x10
c001068f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010691:	eb e4                	jmp    c0010677 <Device::removeAllChildren()+0xd>
c0010693:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0010699:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001069f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00106a5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00106ac:	58                   	pop    eax
c00106ad:	5b                   	pop    ebx
c00106ae:	5e                   	pop    esi
c00106af:	c3                   	ret    

c00106b0 <Device::hibernateAll()>:
c00106b0:	53                   	push   ebx
c00106b1:	83 ec 14             	sub    esp,0x14
c00106b4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00106b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106ba:	53                   	push   ebx
c00106bb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00106be:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106c4:	83 c4 10             	add    esp,0x10
c00106c7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106ca:	74 0f                	je     c00106db <Device::hibernateAll()+0x2b>
c00106cc:	83 ec 0c             	sub    esp,0xc
c00106cf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00106d2:	e8 d9 ff ff ff       	call   c00106b0 <Device::hibernateAll()>
c00106d7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00106d9:	eb e9                	jmp    c00106c4 <Device::hibernateAll()+0x14>
c00106db:	83 c4 08             	add    esp,0x8
c00106de:	5b                   	pop    ebx
c00106df:	c3                   	ret    

c00106e0 <Device::wakeAll()>:
c00106e0:	53                   	push   ebx
c00106e1:	83 ec 14             	sub    esp,0x14
c00106e4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00106e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106ea:	53                   	push   ebx
c00106eb:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00106ee:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00106f4:	83 c4 10             	add    esp,0x10
c00106f7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00106fa:	74 0f                	je     c001070b <Device::wakeAll()+0x2b>
c00106fc:	83 ec 0c             	sub    esp,0xc
c00106ff:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010702:	e8 d9 ff ff ff       	call   c00106e0 <Device::wakeAll()>
c0010707:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010709:	eb e9                	jmp    c00106f4 <Device::wakeAll()+0x14>
c001070b:	83 c4 08             	add    esp,0x8
c001070e:	5b                   	pop    ebx
c001070f:	c3                   	ret    

c0010710 <Device::detectAll()>:
c0010710:	53                   	push   ebx
c0010711:	83 ec 14             	sub    esp,0x14
c0010714:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010718:	8b 03                	mov    eax,DWORD PTR [ebx]
c001071a:	53                   	push   ebx
c001071b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001071e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010724:	83 c4 10             	add    esp,0x10
c0010727:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001072a:	74 0f                	je     c001073b <Device::detectAll()+0x2b>
c001072c:	83 ec 0c             	sub    esp,0xc
c001072f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010732:	e8 d9 ff ff ff       	call   c0010710 <Device::detectAll()>
c0010737:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010739:	eb e9                	jmp    c0010724 <Device::detectAll()+0x14>
c001073b:	83 c4 08             	add    esp,0x8
c001073e:	5b                   	pop    ebx
c001073f:	c3                   	ret    

c0010740 <Device::disableLegacyAll()>:
c0010740:	53                   	push   ebx
c0010741:	83 ec 14             	sub    esp,0x14
c0010744:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010748:	8b 03                	mov    eax,DWORD PTR [ebx]
c001074a:	53                   	push   ebx
c001074b:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001074e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010754:	83 c4 10             	add    esp,0x10
c0010757:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001075a:	74 0f                	je     c001076b <Device::disableLegacyAll()+0x2b>
c001075c:	83 ec 0c             	sub    esp,0xc
c001075f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0010762:	e8 d9 ff ff ff       	call   c0010740 <Device::disableLegacyAll()>
c0010767:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010769:	eb e9                	jmp    c0010754 <Device::disableLegacyAll()+0x14>
c001076b:	83 c4 08             	add    esp,0x8
c001076e:	5b                   	pop    ebx
c001076f:	c3                   	ret    

c0010770 <Device::loadDriversForAll()>:
c0010770:	53                   	push   ebx
c0010771:	83 ec 08             	sub    esp,0x8
c0010774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010778:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001077e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0010780:	85 db                	test   ebx,ebx
c0010782:	74 12                	je     c0010796 <Device::loadDriversForAll()+0x26>
c0010784:	83 ec 0c             	sub    esp,0xc
c0010787:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001078a:	e8 e1 ff ff ff       	call   c0010770 <Device::loadDriversForAll()>
c001078f:	83 c4 10             	add    esp,0x10
c0010792:	89 d8                	mov    eax,ebx
c0010794:	eb e8                	jmp    c001077e <Device::loadDriversForAll()+0xe>
c0010796:	83 c4 08             	add    esp,0x8
c0010799:	5b                   	pop    ebx
c001079a:	c3                   	ret    
c001079b:	90                   	nop

c001079c <Device::closeAll()>:
c001079c:	53                   	push   ebx
c001079d:	83 ec 08             	sub    esp,0x8
c00107a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107a4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107a6:	6a 00                	push   0x0
c00107a8:	6a 00                	push   0x0
c00107aa:	6a 00                	push   0x0
c00107ac:	53                   	push   ebx
c00107ad:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00107b0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00107b6:	83 c4 10             	add    esp,0x10
c00107b9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00107bc:	74 0f                	je     c00107cd <Device::closeAll()+0x31>
c00107be:	83 ec 0c             	sub    esp,0xc
c00107c1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00107c4:	e8 d3 ff ff ff       	call   c001079c <Device::closeAll()>
c00107c9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00107cb:	eb e9                	jmp    c00107b6 <Device::closeAll()+0x1a>
c00107cd:	83 c4 08             	add    esp,0x8
c00107d0:	5b                   	pop    ebx
c00107d1:	c3                   	ret    

c00107d2 <Device::powerSavingAll(PowerSavingLevel)>:
c00107d2:	56                   	push   esi
c00107d3:	53                   	push   ebx
c00107d4:	83 ec 0c             	sub    esp,0xc
c00107d7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00107db:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00107df:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107e1:	56                   	push   esi
c00107e2:	53                   	push   ebx
c00107e3:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00107e6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00107ec:	83 c4 10             	add    esp,0x10
c00107ef:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00107f2:	74 0f                	je     c0010803 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00107f4:	52                   	push   edx
c00107f5:	52                   	push   edx
c00107f6:	56                   	push   esi
c00107f7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00107fa:	e8 d3 ff ff ff       	call   c00107d2 <Device::powerSavingAll(PowerSavingLevel)>
c00107ff:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010801:	eb e9                	jmp    c00107ec <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0010803:	58                   	pop    eax
c0010804:	5b                   	pop    ebx
c0010805:	5e                   	pop    esi
c0010806:	c3                   	ret    
c0010807:	90                   	nop

c0010808 <Device::setName(char const*)>:
c0010808:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0010810:	e9 4b ff fe ff       	jmp    c0000760 <strcpy>
c0010815:	90                   	nop

c0010816 <Device::Device(char const*)>:
c0010816:	83 ec 0c             	sub    esp,0xc
c0010819:	ba 78 1c 02 c0       	mov    edx,0xc0021c78
c001081e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010822:	89 10                	mov    DWORD PTR [eax],edx
c0010824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010828:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0010832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010836:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0010840:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010844:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001084e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010852:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001085c:	83 ec 08             	sub    esp,0x8
c001085f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010867:	e8 9c ff ff ff       	call   c0010808 <Device::setName(char const*)>
c001086c:	83 c4 10             	add    esp,0x10
c001086f:	83 ec 0c             	sub    esp,0xc
c0010872:	6a 08                	push   0x8
c0010874:	e8 63 e8 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0010879:	83 c4 10             	add    esp,0x10
c001087c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010882:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010889:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001088d:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0010893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010897:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001089d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00108a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108a7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00108ad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00108b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108b8:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00108bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108c3:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00108ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ce:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00108d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108dc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00108e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108ea:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00108f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108f8:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0010902:	90                   	nop
c0010903:	83 c4 0c             	add    esp,0xc
c0010906:	c3                   	ret    
c0010907:	90                   	nop

c0010908 <Device::getName()>:
c0010908:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001090c:	05 d0 00 00 00       	add    eax,0xd0
c0010911:	c3                   	ret    

c0010912 <DriverlessDevice::DriverlessDevice(char const*)>:
c0010912:	83 ec 0c             	sub    esp,0xc
c0010915:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010919:	83 ec 08             	sub    esp,0x8
c001091c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010920:	50                   	push   eax
c0010921:	e8 f0 fe ff ff       	call   c0010816 <Device::Device(char const*)>
c0010926:	83 c4 10             	add    esp,0x10
c0010929:	ba a4 1c 02 c0       	mov    edx,0xc0021ca4
c001092e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010932:	89 10                	mov    DWORD PTR [eax],edx
c0010934:	90                   	nop
c0010935:	83 c4 0c             	add    esp,0xc
c0010938:	c3                   	ret    
c0010939:	90                   	nop

c001093a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c001093a:	57                   	push   edi
c001093b:	56                   	push   esi
c001093c:	53                   	push   ebx
c001093d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010941:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010945:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010949:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c001094f:	75 0c                	jne    c001095d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0010951:	52                   	push   edx
c0010952:	52                   	push   edx
c0010953:	53                   	push   ebx
c0010954:	56                   	push   esi
c0010955:	e8 ca f0 00 00       	call   c001fa24 <LinkedList<Device>::addElement(Device*)>
c001095a:	83 c4 10             	add    esp,0x10
c001095d:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0010963:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0010966:	74 12                	je     c001097a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0010968:	50                   	push   eax
c0010969:	57                   	push   edi
c001096a:	56                   	push   esi
c001096b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001096e:	e8 c7 ff ff ff       	call   c001093a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0010973:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0010975:	83 c4 10             	add    esp,0x10
c0010978:	eb e9                	jmp    c0010963 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c001097a:	5b                   	pop    ebx
c001097b:	5e                   	pop    esi
c001097c:	5f                   	pop    edi
c001097d:	c3                   	ret    

c001097e <getDevicesOfType(DeviceType)>:
c001097e:	53                   	push   ebx
c001097f:	83 ec 14             	sub    esp,0x14
c0010982:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010986:	53                   	push   ebx
c0010987:	e8 74 f1 00 00       	call   c001fb00 <LinkedList<Device>::LinkedList()>
c001098c:	83 c4 0c             	add    esp,0xc
c001098f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010993:	53                   	push   ebx
c0010994:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c001099a:	e8 9b ff ff ff       	call   c001093a <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001099f:	83 c4 18             	add    esp,0x18
c00109a2:	89 d8                	mov    eax,ebx
c00109a4:	5b                   	pop    ebx
c00109a5:	c2 04 00             	ret    0x4

c00109a8 <HardDiskController::HardDiskController(char const*)>:
c00109a8:	83 ec 0c             	sub    esp,0xc
c00109ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109af:	83 ec 08             	sub    esp,0x8
c00109b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109b6:	50                   	push   eax
c00109b7:	e8 5a fe ff ff       	call   c0010816 <Device::Device(char const*)>
c00109bc:	83 c4 10             	add    esp,0x10
c00109bf:	ba d0 1c 02 c0       	mov    edx,0xc0021cd0
c00109c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c8:	89 10                	mov    DWORD PTR [eax],edx
c00109ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ce:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00109d8:	90                   	nop
c00109d9:	83 c4 0c             	add    esp,0xc
c00109dc:	c3                   	ret    
c00109dd:	90                   	nop

c00109de <HardDiskController::~HardDiskController()>:
c00109de:	83 ec 0c             	sub    esp,0xc
c00109e1:	ba d0 1c 02 c0       	mov    edx,0xc0021cd0
c00109e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109ea:	89 10                	mov    DWORD PTR [eax],edx
c00109ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109f0:	83 ec 0c             	sub    esp,0xc
c00109f3:	50                   	push   eax
c00109f4:	e8 d3 fa ff ff       	call   c00104cc <Device::~Device()>
c00109f9:	83 c4 10             	add    esp,0x10
c00109fc:	90                   	nop
c00109fd:	83 c4 0c             	add    esp,0xc
c0010a00:	c3                   	ret    
c0010a01:	90                   	nop

c0010a02 <HardDiskController::~HardDiskController()>:
c0010a02:	83 ec 0c             	sub    esp,0xc
c0010a05:	83 ec 0c             	sub    esp,0xc
c0010a08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a0c:	e8 cd ff ff ff       	call   c00109de <HardDiskController::~HardDiskController()>
c0010a11:	83 c4 10             	add    esp,0x10
c0010a14:	83 ec 08             	sub    esp,0x8
c0010a17:	68 58 01 00 00       	push   0x158
c0010a1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a20:	e8 c6 e6 ff ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c0010a25:	83 c4 10             	add    esp,0x10
c0010a28:	83 c4 0c             	add    esp,0xc
c0010a2b:	c3                   	ret    

c0010a2c <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0010a2c:	83 ec 0c             	sub    esp,0xc
c0010a2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a33:	83 ec 08             	sub    esp,0x8
c0010a36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a3a:	50                   	push   eax
c0010a3b:	e8 d6 fd ff ff       	call   c0010816 <Device::Device(char const*)>
c0010a40:	83 c4 10             	add    esp,0x10
c0010a43:	ba fc 1c 02 c0       	mov    edx,0xc0021cfc
c0010a48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a4c:	89 10                	mov    DWORD PTR [eax],edx
c0010a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a52:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0010a59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a5d:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0010a64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a68:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0010a72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a76:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010a7a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0010a80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010a84:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010a8e:	90                   	nop
c0010a8f:	83 c4 0c             	add    esp,0xc
c0010a92:	c3                   	ret    
c0010a93:	90                   	nop

c0010a94 <PhysicalDisk::startCache()>:
c0010a94:	56                   	push   esi
c0010a95:	53                   	push   ebx
c0010a96:	83 ec 10             	sub    esp,0x10
c0010a99:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0010a9d:	6a 30                	push   0x30
c0010a9f:	e8 38 e6 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0010aa4:	89 c6                	mov    esi,eax
c0010aa6:	58                   	pop    eax
c0010aa7:	5a                   	pop    edx
c0010aa8:	53                   	push   ebx
c0010aa9:	56                   	push   esi
c0010aaa:	e8 3b 25 00 00       	call   c0012fea <VCache::VCache(PhysicalDisk*)>
c0010aaf:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0010ab5:	83 c4 14             	add    esp,0x14
c0010ab8:	5b                   	pop    ebx
c0010ab9:	5e                   	pop    esi
c0010aba:	c3                   	ret    
c0010abb:	90                   	nop

c0010abc <PhysicalDisk::~PhysicalDisk()>:
c0010abc:	83 ec 0c             	sub    esp,0xc
c0010abf:	ba fc 1c 02 c0       	mov    edx,0xc0021cfc
c0010ac4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ac8:	89 10                	mov    DWORD PTR [eax],edx
c0010aca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010ace:	83 ec 0c             	sub    esp,0xc
c0010ad1:	50                   	push   eax
c0010ad2:	e8 f5 f9 ff ff       	call   c00104cc <Device::~Device()>
c0010ad7:	83 c4 10             	add    esp,0x10
c0010ada:	90                   	nop
c0010adb:	83 c4 0c             	add    esp,0xc
c0010ade:	c3                   	ret    
c0010adf:	90                   	nop

c0010ae0 <PhysicalDisk::~PhysicalDisk()>:
c0010ae0:	83 ec 0c             	sub    esp,0xc
c0010ae3:	83 ec 0c             	sub    esp,0xc
c0010ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010aea:	e8 cd ff ff ff       	call   c0010abc <PhysicalDisk::~PhysicalDisk()>
c0010aef:	83 c4 10             	add    esp,0x10
c0010af2:	83 ec 08             	sub    esp,0x8
c0010af5:	68 6c 01 00 00       	push   0x16c
c0010afa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010afe:	e8 e8 e5 ff ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c0010b03:	83 c4 10             	add    esp,0x10
c0010b06:	83 c4 0c             	add    esp,0xc
c0010b09:	c3                   	ret    

c0010b0a <FPU::FPU(char const*)>:
c0010b0a:	83 ec 0c             	sub    esp,0xc
c0010b0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b11:	83 ec 08             	sub    esp,0x8
c0010b14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b18:	50                   	push   eax
c0010b19:	e8 f8 fc ff ff       	call   c0010816 <Device::Device(char const*)>
c0010b1e:	83 c4 10             	add    esp,0x10
c0010b21:	ba 3c 1d 02 c0       	mov    edx,0xc0021d3c
c0010b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b2a:	89 10                	mov    DWORD PTR [eax],edx
c0010b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b30:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0010b3a:	90                   	nop
c0010b3b:	83 c4 0c             	add    esp,0xc
c0010b3e:	c3                   	ret    
c0010b3f:	90                   	nop

c0010b40 <FPU::~FPU()>:
c0010b40:	83 ec 0c             	sub    esp,0xc
c0010b43:	ba 3c 1d 02 c0       	mov    edx,0xc0021d3c
c0010b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b4c:	89 10                	mov    DWORD PTR [eax],edx
c0010b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b52:	83 ec 0c             	sub    esp,0xc
c0010b55:	50                   	push   eax
c0010b56:	e8 71 f9 ff ff       	call   c00104cc <Device::~Device()>
c0010b5b:	83 c4 10             	add    esp,0x10
c0010b5e:	90                   	nop
c0010b5f:	83 c4 0c             	add    esp,0xc
c0010b62:	c3                   	ret    
c0010b63:	90                   	nop

c0010b64 <FPU::~FPU()>:
c0010b64:	83 ec 0c             	sub    esp,0xc
c0010b67:	83 ec 0c             	sub    esp,0xc
c0010b6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b6e:	e8 cd ff ff ff       	call   c0010b40 <FPU::~FPU()>
c0010b73:	83 c4 10             	add    esp,0x10
c0010b76:	83 ec 08             	sub    esp,0x8
c0010b79:	68 58 01 00 00       	push   0x158
c0010b7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b82:	e8 64 e5 ff ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c0010b87:	83 c4 10             	add    esp,0x10
c0010b8a:	83 c4 0c             	add    esp,0xc
c0010b8d:	c3                   	ret    

c0010b8e <setupFPU()>:
c0010b8e:	53                   	push   ebx
c0010b8f:	83 ec 08             	sub    esp,0x8
c0010b92:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0010b97:	f6 80 e9 01 00 00 20 	test   BYTE PTR [eax+0x1e9],0x20
c0010b9e:	74 19                	je     c0010bb9 <setupFPU()+0x2b>
c0010ba0:	83 ec 0c             	sub    esp,0xc
c0010ba3:	68 58 01 00 00       	push   0x158
c0010ba8:	e8 2f e5 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0010bad:	89 c3                	mov    ebx,eax
c0010baf:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bb2:	e8 97 d5 00 00       	call   c001e14e <AVX::AVX()>
c0010bb7:	eb 5b                	jmp    c0010c14 <setupFPU()+0x86>
c0010bb9:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0010bbf:	84 c0                	test   al,al
c0010bc1:	79 19                	jns    c0010bdc <setupFPU()+0x4e>
c0010bc3:	83 ec 0c             	sub    esp,0xc
c0010bc6:	68 58 01 00 00       	push   0x158
c0010bcb:	e8 0c e5 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0010bd0:	89 c3                	mov    ebx,eax
c0010bd2:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bd5:	e8 9a d6 00 00       	call   c001e274 <SSE::SSE()>
c0010bda:	eb 38                	jmp    c0010c14 <setupFPU()+0x86>
c0010bdc:	a8 20                	test   al,0x20
c0010bde:	74 19                	je     c0010bf9 <setupFPU()+0x6b>
c0010be0:	83 ec 0c             	sub    esp,0xc
c0010be3:	68 58 01 00 00       	push   0x158
c0010be8:	e8 ef e4 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0010bed:	89 c3                	mov    ebx,eax
c0010bef:	89 04 24             	mov    DWORD PTR [esp],eax
c0010bf2:	e8 e7 d5 00 00       	call   c001e1de <MMX::MMX()>
c0010bf7:	eb 1b                	jmp    c0010c14 <setupFPU()+0x86>
c0010bf9:	a8 10                	test   al,0x10
c0010bfb:	74 1c                	je     c0010c19 <setupFPU()+0x8b>
c0010bfd:	83 ec 0c             	sub    esp,0xc
c0010c00:	68 58 01 00 00       	push   0x158
c0010c05:	e8 d2 e4 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0010c0a:	89 c3                	mov    ebx,eax
c0010c0c:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c0f:	e8 ee d6 00 00       	call   c001e302 <x87::x87()>
c0010c14:	83 c4 10             	add    esp,0x10
c0010c17:	eb 2c                	jmp    c0010c45 <setupFPU()+0xb7>
c0010c19:	83 ec 0c             	sub    esp,0xc
c0010c1c:	31 db                	xor    ebx,ebx
c0010c1e:	68 28 1d 02 c0       	push   0xc0021d28
c0010c23:	e8 e9 e5 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0010c28:	e8 a7 3c 00 00       	call   c00148d4 <thisCPU()>
c0010c2d:	e8 a2 3c 00 00       	call   c00148d4 <thisCPU()>
c0010c32:	e8 21 ef 00 00       	call   c001fb58 <CPU::readCR0()>
c0010c37:	83 c8 04             	or     eax,0x4
c0010c3a:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c3d:	e8 28 ef 00 00       	call   c001fb6a <CPU::writeCR0(unsigned long)>
c0010c42:	83 c4 10             	add    esp,0x10
c0010c45:	83 c4 08             	add    esp,0x8
c0010c48:	89 d8                	mov    eax,ebx
c0010c4a:	5b                   	pop    ebx
c0010c4b:	c3                   	ret    

c0010c4c <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0010c4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010c50:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010c54:	c1 e0 04             	shl    eax,0x4
c0010c57:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0010c5b:	8d 50 10             	lea    edx,[eax+0x10]
c0010c5e:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0010c64:	74 08                	je     c0010c6e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0010c66:	83 c0 04             	add    eax,0x4
c0010c69:	39 d0                	cmp    eax,edx
c0010c6b:	75 f1                	jne    c0010c5e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0010c6d:	c3                   	ret    
c0010c6e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010c78:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010c82:	eb e2                	jmp    c0010c66 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0010c84 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0010c84:	57                   	push   edi
c0010c85:	31 c0                	xor    eax,eax
c0010c87:	56                   	push   esi
c0010c88:	53                   	push   ebx
c0010c89:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010c8d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010c91:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0010c95:	89 da                	mov    edx,ebx
c0010c97:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010c9b:	c1 e2 04             	shl    edx,0x4
c0010c9e:	01 ca                	add    edx,ecx
c0010ca0:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0010ca8:	74 16                	je     c0010cc0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0010caa:	40                   	inc    eax
c0010cab:	83 f8 04             	cmp    eax,0x4
c0010cae:	75 f0                	jne    c0010ca0 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0010cb0:	c7 44 24 10 6c 1d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021d6c
c0010cb8:	5b                   	pop    ebx
c0010cb9:	5e                   	pop    esi
c0010cba:	5f                   	pop    edi
c0010cbb:	e9 80 4d 00 00       	jmp    c0015a40 <Krnl::panic(char const*)>
c0010cc0:	8d 04 98             	lea    eax,[eax+ebx*4]
c0010cc3:	8d 04 81             	lea    eax,[ecx+eax*4]
c0010cc6:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0010ccc:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0010cd2:	5b                   	pop    ebx
c0010cd3:	5e                   	pop    esi
c0010cd4:	5f                   	pop    edi
c0010cd5:	c3                   	ret    

c0010cd6 <doubleFault(regs*, void*)>:
c0010cd6:	55                   	push   ebp
c0010cd7:	89 e5                	mov    ebp,esp
c0010cd9:	83 ec 08             	sub    esp,0x8
c0010cdc:	83 ec 0c             	sub    esp,0xc
c0010cdf:	68 a7 1d 02 c0       	push   0xc0021da7
c0010ce4:	e8 57 4d 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c0010ce9:	83 c4 10             	add    esp,0x10
c0010cec:	90                   	nop
c0010ced:	c9                   	leave  
c0010cee:	c3                   	ret    
c0010cef:	90                   	nop

c0010cf0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0010cf0:	56                   	push   esi
c0010cf1:	53                   	push   ebx
c0010cf2:	50                   	push   eax
c0010cf3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010cf7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010cfb:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010d00:	75 35                	jne    c0010d37 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0010d02:	8d 43 20             	lea    eax,[ebx+0x20]
c0010d05:	31 d2                	xor    edx,edx
c0010d07:	89 c1                	mov    ecx,eax
c0010d09:	c1 e1 04             	shl    ecx,0x4
c0010d0c:	01 f1                	add    ecx,esi
c0010d0e:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0010d16:	74 3e                	je     c0010d56 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0010d18:	42                   	inc    edx
c0010d19:	83 fa 04             	cmp    edx,0x4
c0010d1c:	75 f0                	jne    c0010d0e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0010d1e:	83 ec 0c             	sub    esp,0xc
c0010d21:	68 ec 1d 02 c0       	push   0xc0021dec
c0010d26:	e8 15 4d 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c0010d2b:	83 c4 10             	add    esp,0x10
c0010d2e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d33:	5a                   	pop    edx
c0010d34:	5b                   	pop    ebx
c0010d35:	5e                   	pop    esi
c0010d36:	c3                   	ret    
c0010d37:	83 ec 0c             	sub    esp,0xc
c0010d3a:	56                   	push   esi
c0010d3b:	e8 c8 fb ff ff       	call   c0010908 <Device::getName()>
c0010d40:	83 c4 10             	add    esp,0x10
c0010d43:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010d46:	75 ba                	jne    c0010d02 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010d48:	83 fb 0f             	cmp    ebx,0xf
c0010d4b:	7f 29                	jg     c0010d76 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0010d4d:	0f b6 9b 00 3f 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffdc100]
c0010d54:	eb ac                	jmp    c0010d02 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010d56:	8d 04 82             	lea    eax,[edx+eax*4]
c0010d59:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010d5d:	8d 04 86             	lea    eax,[esi+eax*4]
c0010d60:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0010d66:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0010d6a:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0010d70:	89 d8                	mov    eax,ebx
c0010d72:	5a                   	pop    edx
c0010d73:	5b                   	pop    ebx
c0010d74:	5e                   	pop    esi
c0010d75:	c3                   	ret    
c0010d76:	83 ec 0c             	sub    esp,0xc
c0010d79:	68 b4 1d 02 c0       	push   0xc0021db4
c0010d7e:	e8 bd 4c 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c0010d83:	83 c4 10             	add    esp,0x10
c0010d86:	e9 77 ff ff ff       	jmp    c0010d02 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0010d8b:	90                   	nop

c0010d8c <InterruptController::clearAllHandlers(int, bool)>:
c0010d8c:	56                   	push   esi
c0010d8d:	53                   	push   ebx
c0010d8e:	52                   	push   edx
c0010d8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d93:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010d97:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0010d9c:	75 61                	jne    c0010dff <InterruptController::clearAllHandlers(int, bool)+0x73>
c0010d9e:	8d 46 20             	lea    eax,[esi+0x20]
c0010da1:	c1 e6 04             	shl    esi,0x4
c0010da4:	c1 e0 04             	shl    eax,0x4
c0010da7:	01 de                	add    esi,ebx
c0010da9:	01 d8                	add    eax,ebx
c0010dab:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0010db5:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0010dbf:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0010dc9:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0010dd3:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0010ddd:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0010de7:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0010df1:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0010dfb:	58                   	pop    eax
c0010dfc:	5b                   	pop    ebx
c0010dfd:	5e                   	pop    esi
c0010dfe:	c3                   	ret    
c0010dff:	83 ec 0c             	sub    esp,0xc
c0010e02:	53                   	push   ebx
c0010e03:	e8 00 fb ff ff       	call   c0010908 <Device::getName()>
c0010e08:	83 c4 10             	add    esp,0x10
c0010e0b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010e0e:	75 8e                	jne    c0010d9e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010e10:	83 fe 0f             	cmp    esi,0xf
c0010e13:	7f 09                	jg     c0010e1e <InterruptController::clearAllHandlers(int, bool)+0x92>
c0010e15:	0f b6 b6 00 3f 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc100]
c0010e1c:	eb 80                	jmp    c0010d9e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010e1e:	83 ec 0c             	sub    esp,0xc
c0010e21:	68 28 1e 02 c0       	push   0xc0021e28
c0010e26:	e8 15 4c 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c0010e2b:	83 c4 10             	add    esp,0x10
c0010e2e:	e9 6b ff ff ff       	jmp    c0010d9e <InterruptController::clearAllHandlers(int, bool)+0x12>
c0010e33:	90                   	nop

c0010e34 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0010e34:	56                   	push   esi
c0010e35:	53                   	push   ebx
c0010e36:	52                   	push   edx
c0010e37:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010e3b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010e3f:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0010e44:	75 3a                	jne    c0010e80 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0010e46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e4a:	8d 50 20             	lea    edx,[eax+0x20]
c0010e4d:	c1 e2 04             	shl    edx,0x4
c0010e50:	8d 04 16             	lea    eax,[esi+edx*1]
c0010e53:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0010e57:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0010e5d:	74 0b                	je     c0010e6a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0010e5f:	83 c0 04             	add    eax,0x4
c0010e62:	39 d0                	cmp    eax,edx
c0010e64:	75 f1                	jne    c0010e57 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0010e66:	58                   	pop    eax
c0010e67:	5b                   	pop    ebx
c0010e68:	5e                   	pop    esi
c0010e69:	c3                   	ret    
c0010e6a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0010e74:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0010e7e:	eb df                	jmp    c0010e5f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0010e80:	83 ec 0c             	sub    esp,0xc
c0010e83:	56                   	push   esi
c0010e84:	e8 7f fa ff ff       	call   c0010908 <Device::getName()>
c0010e89:	83 c4 10             	add    esp,0x10
c0010e8c:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0010e8f:	75 b5                	jne    c0010e46 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010e91:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0010e96:	7f 11                	jg     c0010ea9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0010e98:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010e9c:	0f b6 80 00 3f 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc100]
c0010ea3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0010ea7:	eb 9d                	jmp    c0010e46 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0010ea9:	83 ec 0c             	sub    esp,0xc
c0010eac:	68 28 1e 02 c0       	push   0xc0021e28
c0010eb1:	e8 8a 4b 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c0010eb6:	83 c4 10             	add    esp,0x10
c0010eb9:	eb 8b                	jmp    c0010e46 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0010ebb <nmiHandler(regs*, void*)>:
c0010ebb:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0010ec0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010ec4:	e9 5b a8 ff ff       	jmp    c000b724 <Computer::handleNMI()>

c0010ec9 <int_handler>:
c0010ec9:	55                   	push   ebp
c0010eca:	57                   	push   edi
c0010ecb:	56                   	push   esi
c0010ecc:	53                   	push   ebx
c0010ecd:	83 ec 0c             	sub    esp,0xc
c0010ed0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0010ed4:	80 3d f4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251f4,0x0
c0010edb:	74 0b                	je     c0010ee8 <int_handler+0x1f>
c0010edd:	fa                   	cli    
c0010ede:	f4                   	hlt    
c0010edf:	80 3d f4 51 02 c0 00 	cmp    BYTE PTR ds:0xc00251f4,0x0
c0010ee6:	75 f5                	jne    c0010edd <int_handler+0x14>
c0010ee8:	e8 e7 39 00 00       	call   c00148d4 <thisCPU()>
c0010eed:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0010ef0:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0010ef6:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010ef9:	83 f8 17             	cmp    eax,0x17
c0010efc:	77 13                	ja     c0010f11 <int_handler+0x48>
c0010efe:	83 ec 08             	sub    esp,0x8
c0010f01:	8b 17                	mov    edx,DWORD PTR [edi]
c0010f03:	8d 43 e0             	lea    eax,[ebx-0x20]
c0010f06:	0f b6 c0             	movzx  eax,al
c0010f09:	50                   	push   eax
c0010f0a:	57                   	push   edi
c0010f0b:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0010f0e:	83 c4 10             	add    esp,0x10
c0010f11:	83 c3 15             	add    ebx,0x15
c0010f14:	c1 e3 04             	shl    ebx,0x4
c0010f17:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0010f1b:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0010f22:	31 db                	xor    ebx,ebx
c0010f24:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0010f28:	85 c0                	test   eax,eax
c0010f2a:	74 13                	je     c0010f3f <int_handler+0x76>
c0010f2c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0010f2f:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0010f33:	74 1c                	je     c0010f51 <int_handler+0x88>
c0010f35:	83 ec 08             	sub    esp,0x8
c0010f38:	52                   	push   edx
c0010f39:	56                   	push   esi
c0010f3a:	ff d0                	call   eax
c0010f3c:	83 c4 10             	add    esp,0x10
c0010f3f:	43                   	inc    ebx
c0010f40:	83 fb 04             	cmp    ebx,0x4
c0010f43:	75 df                	jne    c0010f24 <int_handler+0x5b>
c0010f45:	83 c4 0c             	add    esp,0xc
c0010f48:	31 c0                	xor    eax,eax
c0010f4a:	5b                   	pop    ebx
c0010f4b:	31 d2                	xor    edx,edx
c0010f4d:	5e                   	pop    esi
c0010f4e:	5f                   	pop    edi
c0010f4f:	5d                   	pop    ebp
c0010f50:	c3                   	ret    
c0010f51:	83 ec 08             	sub    esp,0x8
c0010f54:	52                   	push   edx
c0010f55:	56                   	push   esi
c0010f56:	ff d0                	call   eax
c0010f58:	83 c4 10             	add    esp,0x10
c0010f5b:	83 c4 0c             	add    esp,0xc
c0010f5e:	5b                   	pop    ebx
c0010f5f:	5e                   	pop    esi
c0010f60:	5f                   	pop    edi
c0010f61:	5d                   	pop    ebp
c0010f62:	c3                   	ret    
c0010f63:	90                   	nop

c0010f64 <InterruptController::InterruptController(char const*)>:
c0010f64:	83 ec 1c             	sub    esp,0x1c
c0010f67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f6b:	83 ec 08             	sub    esp,0x8
c0010f6e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010f72:	50                   	push   eax
c0010f73:	e8 9e f8 ff ff       	call   c0010816 <Device::Device(char const*)>
c0010f78:	83 c4 10             	add    esp,0x10
c0010f7b:	ba 64 20 02 c0       	mov    edx,0xc0022064
c0010f80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f84:	89 10                	mov    DWORD PTR [eax],edx
c0010f86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f8a:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0010f94:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010f9c:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0010fa4:	7f 5e                	jg     c0011004 <InterruptController::InterruptController(char const*)+0xa0>
c0010fa6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010fae:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0010fb3:	7f 49                	jg     c0010ffe <InterruptController::InterruptController(char const*)+0x9a>
c0010fb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fb9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010fbd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010fc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fc8:	01 ca                	add    edx,ecx
c0010fca:	83 c2 54             	add    edx,0x54
c0010fcd:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010fd5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fd9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010fdd:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0010fe4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fe8:	01 ca                	add    edx,ecx
c0010fea:	81 c2 54 04 00 00    	add    edx,0x454
c0010ff0:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0010ff8:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0010ffc:	eb b0                	jmp    c0010fae <InterruptController::InterruptController(char const*)+0x4a>
c0010ffe:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0011002:	eb 98                	jmp    c0010f9c <InterruptController::InterruptController(char const*)+0x38>
c0011004:	90                   	nop
c0011005:	83 c4 1c             	add    esp,0x1c
c0011008:	c3                   	ret    
c0011009:	90                   	nop

c001100a <InterruptController::~InterruptController()>:
c001100a:	83 ec 0c             	sub    esp,0xc
c001100d:	ba 64 20 02 c0       	mov    edx,0xc0022064
c0011012:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011016:	89 10                	mov    DWORD PTR [eax],edx
c0011018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001101c:	83 ec 0c             	sub    esp,0xc
c001101f:	50                   	push   eax
c0011020:	e8 a7 f4 ff ff       	call   c00104cc <Device::~Device()>
c0011025:	83 c4 10             	add    esp,0x10
c0011028:	90                   	nop
c0011029:	83 c4 0c             	add    esp,0xc
c001102c:	c3                   	ret    
c001102d:	90                   	nop

c001102e <InterruptController::~InterruptController()>:
c001102e:	83 ec 0c             	sub    esp,0xc
c0011031:	83 ec 0c             	sub    esp,0xc
c0011034:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011038:	e8 cd ff ff ff       	call   c001100a <InterruptController::~InterruptController()>
c001103d:	83 c4 10             	add    esp,0x10
c0011040:	83 ec 08             	sub    esp,0x8
c0011043:	68 58 21 00 00       	push   0x2158
c0011048:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001104c:	e8 9a e0 ff ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c0011051:	83 c4 10             	add    esp,0x10
c0011054:	83 c4 0c             	add    esp,0xc
c0011057:	c3                   	ret    

c0011058 <displayDebugInfo(regs*)>:
c0011058:	55                   	push   ebp
c0011059:	57                   	push   edi
c001105a:	56                   	push   esi
c001105b:	53                   	push   ebx
c001105c:	83 ec 24             	sub    esp,0x24
c001105f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0011063:	0f 20 c2             	mov    edx,cr0
c0011066:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001106a:	0f 20 d7             	mov    edi,cr2
c001106d:	0f 20 de             	mov    esi,cr3
c0011070:	0f 20 e5             	mov    ebp,cr4
c0011073:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0011076:	68 62 1e 02 c0       	push   0xc0021e62
c001107b:	e8 91 e1 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0011080:	58                   	pop    eax
c0011081:	5a                   	pop    edx
c0011082:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0011085:	68 6d 1e 02 c0       	push   0xc0021e6d
c001108a:	e8 82 e1 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001108f:	59                   	pop    ecx
c0011090:	58                   	pop    eax
c0011091:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0011094:	68 78 1e 02 c0       	push   0xc0021e78
c0011099:	e8 73 e1 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001109e:	58                   	pop    eax
c001109f:	5a                   	pop    edx
c00110a0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00110a3:	68 83 1e 02 c0       	push   0xc0021e83
c00110a8:	e8 64 e1 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c00110ad:	59                   	pop    ecx
c00110ae:	58                   	pop    eax
c00110af:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00110b2:	68 8e 1e 02 c0       	push   0xc0021e8e
c00110b7:	e8 55 e1 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c00110bc:	58                   	pop    eax
c00110bd:	5a                   	pop    edx
c00110be:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c00110c1:	68 99 1e 02 c0       	push   0xc0021e99
c00110c6:	e8 46 e1 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c00110cb:	59                   	pop    ecx
c00110cc:	58                   	pop    eax
c00110cd:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00110d0:	68 a4 1e 02 c0       	push   0xc0021ea4
c00110d5:	e8 37 e1 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c00110da:	58                   	pop    eax
c00110db:	5a                   	pop    edx
c00110dc:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00110df:	68 af 1e 02 c0       	push   0xc0021eaf
c00110e4:	e8 28 e1 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c00110e9:	59                   	pop    ecx
c00110ea:	58                   	pop    eax
c00110eb:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c00110ee:	68 ba 1e 02 c0       	push   0xc0021eba
c00110f3:	e8 19 e1 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c00110f8:	58                   	pop    eax
c00110f9:	5a                   	pop    edx
c00110fa:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00110fd:	68 c9 1e 02 c0       	push   0xc0021ec9
c0011102:	e8 0a e1 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0011107:	59                   	pop    ecx
c0011108:	58                   	pop    eax
c0011109:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001110c:	68 d4 1e 02 c0       	push   0xc0021ed4
c0011111:	e8 fb e0 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0011116:	58                   	pop    eax
c0011117:	5a                   	pop    edx
c0011118:	57                   	push   edi
c0011119:	68 df 1e 02 c0       	push   0xc0021edf
c001111e:	e8 ee e0 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0011123:	59                   	pop    ecx
c0011124:	58                   	pop    eax
c0011125:	56                   	push   esi
c0011126:	68 ea 1e 02 c0       	push   0xc0021eea
c001112b:	e8 e1 e0 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0011130:	58                   	pop    eax
c0011131:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011136:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001113c:	e8 00 c2 ff ff       	call   c000d341 <setActiveTerminal(VgaText*)>
c0011141:	58                   	pop    eax
c0011142:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0011145:	5a                   	pop    edx
c0011146:	c1 e0 05             	shl    eax,0x5
c0011149:	05 60 3c 02 c0       	add    eax,0xc0023c60
c001114e:	50                   	push   eax
c001114f:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011154:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001115a:	e8 03 c6 ff ff       	call   c000d762 <VgaText::puts(char const*)>
c001115f:	59                   	pop    ecx
c0011160:	58                   	pop    eax
c0011161:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011166:	68 f5 1e 02 c0       	push   0xc0021ef5
c001116b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011171:	e8 ec c5 ff ff       	call   c000d762 <VgaText::puts(char const*)>
c0011176:	58                   	pop    eax
c0011177:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001117c:	5a                   	pop    edx
c001117d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011180:	83 c0 0c             	add    eax,0xc
c0011183:	50                   	push   eax
c0011184:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011189:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001118f:	e8 ce c5 ff ff       	call   c000d762 <VgaText::puts(char const*)>
c0011194:	59                   	pop    ecx
c0011195:	58                   	pop    eax
c0011196:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001119b:	68 fe 1e 02 c0       	push   0xc0021efe
c00111a0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111a6:	e8 b7 c5 ff ff       	call   c000d762 <VgaText::puts(char const*)>
c00111ab:	58                   	pop    eax
c00111ac:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00111b1:	5a                   	pop    edx
c00111b2:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00111b5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111bb:	e8 c8 c5 ff ff       	call   c000d788 <VgaText::putx(unsigned int)>
c00111c0:	59                   	pop    ecx
c00111c1:	58                   	pop    eax
c00111c2:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00111c7:	68 06 1f 02 c0       	push   0xc0021f06
c00111cc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111d2:	e8 8b c5 ff ff       	call   c000d762 <VgaText::puts(char const*)>
c00111d7:	58                   	pop    eax
c00111d8:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00111dd:	5a                   	pop    edx
c00111de:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00111e1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111e7:	e8 9c c5 ff ff       	call   c000d788 <VgaText::putx(unsigned int)>
c00111ec:	59                   	pop    ecx
c00111ed:	58                   	pop    eax
c00111ee:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00111f3:	68 0e 1f 02 c0       	push   0xc0021f0e
c00111f8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00111fe:	e8 5f c5 ff ff       	call   c000d762 <VgaText::puts(char const*)>
c0011203:	58                   	pop    eax
c0011204:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011209:	5a                   	pop    edx
c001120a:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001120d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011213:	e8 70 c5 ff ff       	call   c000d788 <VgaText::putx(unsigned int)>
c0011218:	59                   	pop    ecx
c0011219:	58                   	pop    eax
c001121a:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001121f:	68 16 1f 02 c0       	push   0xc0021f16
c0011224:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001122a:	e8 33 c5 ff ff       	call   c000d762 <VgaText::puts(char const*)>
c001122f:	58                   	pop    eax
c0011230:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011235:	5a                   	pop    edx
c0011236:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0011239:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001123f:	e8 44 c5 ff ff       	call   c000d788 <VgaText::putx(unsigned int)>
c0011244:	59                   	pop    ecx
c0011245:	58                   	pop    eax
c0011246:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001124b:	68 1e 1f 02 c0       	push   0xc0021f1e
c0011250:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011256:	e8 07 c5 ff ff       	call   c000d762 <VgaText::puts(char const*)>
c001125b:	58                   	pop    eax
c001125c:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011261:	5a                   	pop    edx
c0011262:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011265:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001126b:	e8 18 c5 ff ff       	call   c000d788 <VgaText::putx(unsigned int)>
c0011270:	59                   	pop    ecx
c0011271:	58                   	pop    eax
c0011272:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011277:	68 26 1f 02 c0       	push   0xc0021f26
c001127c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011282:	e8 db c4 ff ff       	call   c000d762 <VgaText::puts(char const*)>
c0011287:	58                   	pop    eax
c0011288:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001128d:	5a                   	pop    edx
c001128e:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0011291:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011297:	e8 ec c4 ff ff       	call   c000d788 <VgaText::putx(unsigned int)>
c001129c:	59                   	pop    ecx
c001129d:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00112a2:	5b                   	pop    ebx
c00112a3:	68 2e 1f 02 c0       	push   0xc0021f2e
c00112a8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112ae:	e8 af c4 ff ff       	call   c000d762 <VgaText::puts(char const*)>
c00112b3:	58                   	pop    eax
c00112b4:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00112b9:	5a                   	pop    edx
c00112ba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00112be:	52                   	push   edx
c00112bf:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112c5:	e8 be c4 ff ff       	call   c000d788 <VgaText::putx(unsigned int)>
c00112ca:	59                   	pop    ecx
c00112cb:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00112d0:	5b                   	pop    ebx
c00112d1:	68 37 1f 02 c0       	push   0xc0021f37
c00112d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112dc:	e8 81 c4 ff ff       	call   c000d762 <VgaText::puts(char const*)>
c00112e1:	58                   	pop    eax
c00112e2:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00112e7:	5a                   	pop    edx
c00112e8:	57                   	push   edi
c00112e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00112ef:	e8 94 c4 ff ff       	call   c000d788 <VgaText::putx(unsigned int)>
c00112f4:	59                   	pop    ecx
c00112f5:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00112fa:	5b                   	pop    ebx
c00112fb:	68 3f 1f 02 c0       	push   0xc0021f3f
c0011300:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011306:	e8 57 c4 ff ff       	call   c000d762 <VgaText::puts(char const*)>
c001130b:	5f                   	pop    edi
c001130c:	58                   	pop    eax
c001130d:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011312:	56                   	push   esi
c0011313:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011319:	e8 6a c4 ff ff       	call   c000d788 <VgaText::putx(unsigned int)>
c001131e:	58                   	pop    eax
c001131f:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011324:	5a                   	pop    edx
c0011325:	68 47 1f 02 c0       	push   0xc0021f47
c001132a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011330:	e8 2d c4 ff ff       	call   c000d762 <VgaText::puts(char const*)>
c0011335:	59                   	pop    ecx
c0011336:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001133b:	5b                   	pop    ebx
c001133c:	55                   	push   ebp
c001133d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0011343:	e8 40 c4 ff ff       	call   c000d788 <VgaText::putx(unsigned int)>
c0011348:	5e                   	pop    esi
c0011349:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001134e:	5f                   	pop    edi
c001134f:	68 4f 1f 02 c0       	push   0xc0021f4f
c0011354:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001135a:	e8 03 c4 ff ff       	call   c000d762 <VgaText::puts(char const*)>
c001135f:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011364:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001136a:	e8 04 e8 00 00       	call   c001fb73 <CPU::readDR0()>
c001136f:	5d                   	pop    ebp
c0011370:	5a                   	pop    edx
c0011371:	50                   	push   eax
c0011372:	53                   	push   ebx
c0011373:	e8 10 c4 ff ff       	call   c000d788 <VgaText::putx(unsigned int)>
c0011378:	59                   	pop    ecx
c0011379:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001137e:	5b                   	pop    ebx
c001137f:	68 58 1f 02 c0       	push   0xc0021f58
c0011384:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001138a:	e8 d3 c3 ff ff       	call   c000d762 <VgaText::puts(char const*)>
c001138f:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011394:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001139a:	e8 e6 e7 00 00       	call   c001fb85 <CPU::readDR1()>
c001139f:	5e                   	pop    esi
c00113a0:	5f                   	pop    edi
c00113a1:	50                   	push   eax
c00113a2:	53                   	push   ebx
c00113a3:	e8 e0 c3 ff ff       	call   c000d788 <VgaText::putx(unsigned int)>
c00113a8:	5d                   	pop    ebp
c00113a9:	58                   	pop    eax
c00113aa:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00113af:	68 60 1f 02 c0       	push   0xc0021f60
c00113b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00113ba:	e8 a3 c3 ff ff       	call   c000d762 <VgaText::puts(char const*)>
c00113bf:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00113c4:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00113ca:	e8 c8 e7 00 00       	call   c001fb97 <CPU::readDR2()>
c00113cf:	5a                   	pop    edx
c00113d0:	59                   	pop    ecx
c00113d1:	50                   	push   eax
c00113d2:	53                   	push   ebx
c00113d3:	e8 b0 c3 ff ff       	call   c000d788 <VgaText::putx(unsigned int)>
c00113d8:	5b                   	pop    ebx
c00113d9:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00113de:	5e                   	pop    esi
c00113df:	68 68 1f 02 c0       	push   0xc0021f68
c00113e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00113ea:	e8 73 c3 ff ff       	call   c000d762 <VgaText::puts(char const*)>
c00113ef:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00113f4:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c00113fa:	e8 aa e7 00 00       	call   c001fba9 <CPU::readDR3()>
c00113ff:	5f                   	pop    edi
c0011400:	5d                   	pop    ebp
c0011401:	50                   	push   eax
c0011402:	53                   	push   ebx
c0011403:	e8 80 c3 ff ff       	call   c000d788 <VgaText::putx(unsigned int)>
c0011408:	58                   	pop    eax
c0011409:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001140e:	5a                   	pop    edx
c001140f:	68 70 1f 02 c0       	push   0xc0021f70
c0011414:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001141a:	e8 43 c3 ff ff       	call   c000d762 <VgaText::puts(char const*)>
c001141f:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011424:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001142a:	e8 8c e7 00 00       	call   c001fbbb <CPU::readDR6()>
c001142f:	59                   	pop    ecx
c0011430:	5e                   	pop    esi
c0011431:	50                   	push   eax
c0011432:	53                   	push   ebx
c0011433:	e8 50 c3 ff ff       	call   c000d788 <VgaText::putx(unsigned int)>
c0011438:	5f                   	pop    edi
c0011439:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c001143e:	5d                   	pop    ebp
c001143f:	68 78 1f 02 c0       	push   0xc0021f78
c0011444:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001144a:	e8 13 c3 ff ff       	call   c000d762 <VgaText::puts(char const*)>
c001144f:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0011454:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001145a:	e8 6e e7 00 00       	call   c001fbcd <CPU::readDR7()>
c001145f:	5a                   	pop    edx
c0011460:	59                   	pop    ecx
c0011461:	50                   	push   eax
c0011462:	53                   	push   ebx
c0011463:	e8 20 c3 ff ff       	call   c000d788 <VgaText::putx(unsigned int)>
c0011468:	fa                   	cli    
c0011469:	f4                   	hlt    
c001146a:	83 c4 10             	add    esp,0x10
c001146d:	eb fe                	jmp    c001146d <displayDebugInfo(regs*)+0x415>

c001146f <x87EmulHandler(regs*, void*)>:
c001146f:	53                   	push   ebx
c0011470:	83 ec 08             	sub    esp,0x8
c0011473:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c0011478:	85 c0                	test   eax,eax
c001147a:	74 15                	je     c0011491 <x87EmulHandler(regs*, void*)+0x22>
c001147c:	83 ec 0c             	sub    esp,0xc
c001147f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011483:	ff d0                	call   eax
c0011485:	83 c4 10             	add    esp,0x10
c0011488:	84 c0                	test   al,al
c001148a:	74 2f                	je     c00114bb <x87EmulHandler(regs*, void*)+0x4c>
c001148c:	83 c4 08             	add    esp,0x8
c001148f:	5b                   	pop    ebx
c0011490:	c3                   	ret    
c0011491:	83 ec 08             	sub    esp,0x8
c0011494:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c001149a:	6a 01                	push   0x1
c001149c:	68 80 1f 02 c0       	push   0xc0021f80
c00114a1:	e8 bd 6f 00 00       	call   c0018463 <Thr::loadDLL(char const*, bool)>
c00114a6:	5a                   	pop    edx
c00114a7:	59                   	pop    ecx
c00114a8:	53                   	push   ebx
c00114a9:	50                   	push   eax
c00114aa:	e8 7a 71 00 00       	call   c0018629 <Thr::executeDLL(unsigned long, void*)>
c00114af:	a1 34 49 02 c0       	mov    eax,ds:0xc0024934
c00114b4:	83 c4 10             	add    esp,0x10
c00114b7:	85 c0                	test   eax,eax
c00114b9:	75 c1                	jne    c001147c <x87EmulHandler(regs*, void*)+0xd>
c00114bb:	83 ec 0c             	sub    esp,0xc
c00114be:	68 9d 1f 02 c0       	push   0xc0021f9d
c00114c3:	e8 49 dd ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c00114c8:	58                   	pop    eax
c00114c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114cd:	e8 86 fb ff ff       	call   c0011058 <displayDebugInfo(regs*)>

c00114d2 <gpFault(regs*, void*)>:
c00114d2:	53                   	push   ebx
c00114d3:	83 ec 14             	sub    esp,0x14
c00114d6:	c7 05 30 49 02 c0 db 98 01 c0 	mov    DWORD PTR ds:0xc0024930,0xc00198db
c00114e0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00114e4:	53                   	push   ebx
c00114e5:	e8 f1 83 00 00       	call   c00198db <Vm::faultHandler(regs*)>
c00114ea:	83 c4 10             	add    esp,0x10
c00114ed:	84 c0                	test   al,al
c00114ef:	74 05                	je     c00114f6 <gpFault(regs*, void*)+0x24>
c00114f1:	83 c4 08             	add    esp,0x8
c00114f4:	5b                   	pop    ebx
c00114f5:	c3                   	ret    
c00114f6:	83 ec 0c             	sub    esp,0xc
c00114f9:	68 9d 1f 02 c0       	push   0xc0021f9d
c00114fe:	e8 0e dd ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0011503:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011506:	e8 4d fb ff ff       	call   c0011058 <displayDebugInfo(regs*)>

c001150b <pgFault(regs*, void*)>:
c001150b:	83 ec 18             	sub    esp,0x18
c001150e:	68 b8 1f 02 c0       	push   0xc0021fb8
c0011513:	e8 f9 dc ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0011518:	58                   	pop    eax
c0011519:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001151d:	e8 36 fb ff ff       	call   c0011058 <displayDebugInfo(regs*)>

c0011522 <otherISRHandler(regs*, void*)>:
c0011522:	53                   	push   ebx
c0011523:	83 ec 0c             	sub    esp,0xc
c0011526:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001152a:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001152d:	50                   	push   eax
c001152e:	50                   	push   eax
c001152f:	68 c5 1f 02 c0       	push   0xc0021fc5
c0011534:	e8 d8 dc ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0011539:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001153c:	e8 17 fb ff ff       	call   c0011058 <displayDebugInfo(regs*)>

c0011541 <opcodeFault(regs*, void*)>:
c0011541:	55                   	push   ebp
c0011542:	89 e5                	mov    ebp,esp
c0011544:	56                   	push   esi
c0011545:	53                   	push   ebx
c0011546:	83 ec 40             	sub    esp,0x40
c0011549:	e8 86 33 00 00       	call   c00148d4 <thisCPU()>
c001154e:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0011554:	84 c0                	test   al,al
c0011556:	74 24                	je     c001157c <opcodeFault(regs*, void*)+0x3b>
c0011558:	83 ec 0c             	sub    esp,0xc
c001155b:	68 e4 1f 02 c0       	push   0xc0021fe4
c0011560:	e8 ac dc ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0011565:	83 c4 10             	add    esp,0x10
c0011568:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001156e:	8d 50 19             	lea    edx,[eax+0x19]
c0011571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011574:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011577:	e9 77 05 00 00       	jmp    c0011af3 <opcodeFault(regs*, void*)+0x5b2>
c001157c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001157f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011582:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011585:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0011589:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c001158d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011590:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011593:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0011596:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011599:	8a 00                	mov    al,BYTE PTR [eax]
c001159b:	3c f0                	cmp    al,0xf0
c001159d:	75 17                	jne    c00115b6 <opcodeFault(regs*, void*)+0x75>
c001159f:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115a8:	8d 50 01             	lea    edx,[eax+0x1]
c00115ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115ae:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115b1:	e9 da 00 00 00       	jmp    c0011690 <opcodeFault(regs*, void*)+0x14f>
c00115b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115b9:	8a 00                	mov    al,BYTE PTR [eax]
c00115bb:	3c f2                	cmp    al,0xf2
c00115bd:	74 09                	je     c00115c8 <opcodeFault(regs*, void*)+0x87>
c00115bf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115c2:	8a 00                	mov    al,BYTE PTR [eax]
c00115c4:	3c f3                	cmp    al,0xf3
c00115c6:	75 1b                	jne    c00115e3 <opcodeFault(regs*, void*)+0xa2>
c00115c8:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00115cc:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115d2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115d5:	8d 50 01             	lea    edx,[eax+0x1]
c00115d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115db:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115de:	e9 ad 00 00 00       	jmp    c0011690 <opcodeFault(regs*, void*)+0x14f>
c00115e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00115e6:	8a 00                	mov    al,BYTE PTR [eax]
c00115e8:	3c 66                	cmp    al,0x66
c00115ea:	75 1f                	jne    c001160b <opcodeFault(regs*, void*)+0xca>
c00115ec:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00115f0:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c00115f4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00115f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115fa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00115fd:	8d 50 01             	lea    edx,[eax+0x1]
c0011600:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011603:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011606:	e9 85 00 00 00       	jmp    c0011690 <opcodeFault(regs*, void*)+0x14f>
c001160b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001160e:	8a 00                	mov    al,BYTE PTR [eax]
c0011610:	3c 67                	cmp    al,0x67
c0011612:	75 18                	jne    c001162c <opcodeFault(regs*, void*)+0xeb>
c0011614:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011618:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001161b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001161e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011621:	8d 50 01             	lea    edx,[eax+0x1]
c0011624:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011627:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001162a:	eb 64                	jmp    c0011690 <opcodeFault(regs*, void*)+0x14f>
c001162c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001162f:	8a 00                	mov    al,BYTE PTR [eax]
c0011631:	3c 2e                	cmp    al,0x2e
c0011633:	74 09                	je     c001163e <opcodeFault(regs*, void*)+0xfd>
c0011635:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011638:	8a 00                	mov    al,BYTE PTR [eax]
c001163a:	3c 3e                	cmp    al,0x3e
c001163c:	75 18                	jne    c0011656 <opcodeFault(regs*, void*)+0x115>
c001163e:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0011642:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011645:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011648:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001164b:	8d 50 01             	lea    edx,[eax+0x1]
c001164e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011651:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011654:	eb 3a                	jmp    c0011690 <opcodeFault(regs*, void*)+0x14f>
c0011656:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011659:	8a 00                	mov    al,BYTE PTR [eax]
c001165b:	3c 36                	cmp    al,0x36
c001165d:	74 1b                	je     c001167a <opcodeFault(regs*, void*)+0x139>
c001165f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011662:	8a 00                	mov    al,BYTE PTR [eax]
c0011664:	3c 26                	cmp    al,0x26
c0011666:	74 12                	je     c001167a <opcodeFault(regs*, void*)+0x139>
c0011668:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001166b:	8a 00                	mov    al,BYTE PTR [eax]
c001166d:	3c 64                	cmp    al,0x64
c001166f:	74 09                	je     c001167a <opcodeFault(regs*, void*)+0x139>
c0011671:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011674:	8a 00                	mov    al,BYTE PTR [eax]
c0011676:	3c 65                	cmp    al,0x65
c0011678:	75 16                	jne    c0011690 <opcodeFault(regs*, void*)+0x14f>
c001167a:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001167e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011681:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011684:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011687:	8d 50 01             	lea    edx,[eax+0x1]
c001168a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001168d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011690:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011693:	8a 00                	mov    al,BYTE PTR [eax]
c0011695:	3c 0f                	cmp    al,0xf
c0011697:	0f 85 ad 00 00 00    	jne    c001174a <opcodeFault(regs*, void*)+0x209>
c001169d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116a0:	40                   	inc    eax
c00116a1:	8a 00                	mov    al,BYTE PTR [eax]
c00116a3:	3c c2                	cmp    al,0xc2
c00116a5:	74 0e                	je     c00116b5 <opcodeFault(regs*, void*)+0x174>
c00116a7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116aa:	40                   	inc    eax
c00116ab:	8a 00                	mov    al,BYTE PTR [eax]
c00116ad:	3c c3                	cmp    al,0xc3
c00116af:	0f 85 95 00 00 00    	jne    c001174a <opcodeFault(regs*, void*)+0x209>
c00116b5:	83 ec 0c             	sub    esp,0xc
c00116b8:	68 07 20 02 c0       	push   0xc0022007
c00116bd:	e8 4f db ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c00116c2:	83 c4 10             	add    esp,0x10
c00116c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116c8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00116cb:	8d 50 01             	lea    edx,[eax+0x1]
c00116ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116d1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00116d4:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00116d7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116da:	8a 00                	mov    al,BYTE PTR [eax]
c00116dc:	8d 50 fe             	lea    edx,[eax-0x2]
c00116df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00116e2:	88 10                	mov    BYTE PTR [eax],dl
c00116e4:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00116e7:	50                   	push   eax
c00116e8:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00116eb:	50                   	push   eax
c00116ec:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00116ef:	50                   	push   eax
c00116f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00116f3:	e8 48 41 00 00       	call   c0015840 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00116f8:	83 c4 10             	add    esp,0x10
c00116fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00116fe:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011701:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0011704:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0011707:	01 d0                	add    eax,edx
c0011709:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001170c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001170f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011712:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0011715:	48                   	dec    eax
c0011716:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0011719:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001171c:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001171f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011722:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011725:	83 ec 04             	sub    esp,0x4
c0011728:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001172b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c001172e:	50                   	push   eax
c001172f:	e8 1c ea fe ff       	call   c0000150 <voodooXADD>
c0011734:	83 c4 10             	add    esp,0x10
c0011737:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001173a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001173d:	01 c2                	add    edx,eax
c001173f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011742:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011745:	e9 a9 03 00 00       	jmp    c0011af3 <opcodeFault(regs*, void*)+0x5b2>
c001174a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001174d:	8a 00                	mov    al,BYTE PTR [eax]
c001174f:	3c 0f                	cmp    al,0xf
c0011751:	0f 85 8b 01 00 00    	jne    c00118e2 <opcodeFault(regs*, void*)+0x3a1>
c0011757:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001175a:	40                   	inc    eax
c001175b:	8a 00                	mov    al,BYTE PTR [eax]
c001175d:	3c c7                	cmp    al,0xc7
c001175f:	0f 86 7d 01 00 00    	jbe    c00118e2 <opcodeFault(regs*, void*)+0x3a1>
c0011765:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011768:	40                   	inc    eax
c0011769:	8a 00                	mov    al,BYTE PTR [eax]
c001176b:	3c cf                	cmp    al,0xcf
c001176d:	0f 87 6f 01 00 00    	ja     c00118e2 <opcodeFault(regs*, void*)+0x3a1>
c0011773:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011776:	40                   	inc    eax
c0011777:	8a 00                	mov    al,BYTE PTR [eax]
c0011779:	83 c0 38             	add    eax,0x38
c001177c:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001177f:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0011783:	75 0b                	jne    c0011790 <opcodeFault(regs*, void*)+0x24f>
c0011785:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011788:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001178b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001178e:	eb 75                	jmp    c0011805 <opcodeFault(regs*, void*)+0x2c4>
c0011790:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0011794:	75 0b                	jne    c00117a1 <opcodeFault(regs*, void*)+0x260>
c0011796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011799:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001179c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001179f:	eb 64                	jmp    c0011805 <opcodeFault(regs*, void*)+0x2c4>
c00117a1:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00117a5:	75 0b                	jne    c00117b2 <opcodeFault(regs*, void*)+0x271>
c00117a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117aa:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00117ad:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117b0:	eb 53                	jmp    c0011805 <opcodeFault(regs*, void*)+0x2c4>
c00117b2:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00117b6:	75 0b                	jne    c00117c3 <opcodeFault(regs*, void*)+0x282>
c00117b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117bb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00117be:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117c1:	eb 42                	jmp    c0011805 <opcodeFault(regs*, void*)+0x2c4>
c00117c3:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00117c7:	75 0b                	jne    c00117d4 <opcodeFault(regs*, void*)+0x293>
c00117c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117cc:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00117cf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117d2:	eb 31                	jmp    c0011805 <opcodeFault(regs*, void*)+0x2c4>
c00117d4:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00117d8:	75 0b                	jne    c00117e5 <opcodeFault(regs*, void*)+0x2a4>
c00117da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117dd:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00117e0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117e3:	eb 20                	jmp    c0011805 <opcodeFault(regs*, void*)+0x2c4>
c00117e5:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00117e9:	75 0b                	jne    c00117f6 <opcodeFault(regs*, void*)+0x2b5>
c00117eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117ee:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00117f1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00117f4:	eb 0f                	jmp    c0011805 <opcodeFault(regs*, void*)+0x2c4>
c00117f6:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00117fa:	75 09                	jne    c0011805 <opcodeFault(regs*, void*)+0x2c4>
c00117fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00117ff:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0011802:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011805:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0011809:	74 10                	je     c001181b <opcodeFault(regs*, void*)+0x2da>
c001180b:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0011812:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c0011819:	eb 2d                	jmp    c0011848 <opcodeFault(regs*, void*)+0x307>
c001181b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001181e:	c1 e0 18             	shl    eax,0x18
c0011821:	89 c2                	mov    edx,eax
c0011823:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011826:	c1 e0 08             	shl    eax,0x8
c0011829:	25 00 00 ff 00       	and    eax,0xff0000
c001182e:	09 c2                	or     edx,eax
c0011830:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011833:	c1 e8 08             	shr    eax,0x8
c0011836:	25 00 ff 00 00       	and    eax,0xff00
c001183b:	09 c2                	or     edx,eax
c001183d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0011840:	c1 e8 18             	shr    eax,0x18
c0011843:	09 d0                	or     eax,edx
c0011845:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0011848:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001184c:	75 0b                	jne    c0011859 <opcodeFault(regs*, void*)+0x318>
c001184e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011851:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011854:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011857:	eb 75                	jmp    c00118ce <opcodeFault(regs*, void*)+0x38d>
c0011859:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001185d:	75 0b                	jne    c001186a <opcodeFault(regs*, void*)+0x329>
c001185f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011862:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011865:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0011868:	eb 64                	jmp    c00118ce <opcodeFault(regs*, void*)+0x38d>
c001186a:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001186e:	75 0b                	jne    c001187b <opcodeFault(regs*, void*)+0x33a>
c0011870:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011873:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011876:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0011879:	eb 53                	jmp    c00118ce <opcodeFault(regs*, void*)+0x38d>
c001187b:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001187f:	75 0b                	jne    c001188c <opcodeFault(regs*, void*)+0x34b>
c0011881:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011884:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011887:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001188a:	eb 42                	jmp    c00118ce <opcodeFault(regs*, void*)+0x38d>
c001188c:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0011890:	75 0b                	jne    c001189d <opcodeFault(regs*, void*)+0x35c>
c0011892:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011895:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0011898:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c001189b:	eb 31                	jmp    c00118ce <opcodeFault(regs*, void*)+0x38d>
c001189d:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00118a1:	75 0b                	jne    c00118ae <opcodeFault(regs*, void*)+0x36d>
c00118a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118a6:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00118a9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00118ac:	eb 20                	jmp    c00118ce <opcodeFault(regs*, void*)+0x38d>
c00118ae:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00118b2:	75 0b                	jne    c00118bf <opcodeFault(regs*, void*)+0x37e>
c00118b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118b7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00118ba:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00118bd:	eb 0f                	jmp    c00118ce <opcodeFault(regs*, void*)+0x38d>
c00118bf:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00118c3:	75 09                	jne    c00118ce <opcodeFault(regs*, void*)+0x38d>
c00118c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118c8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00118cb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00118ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118d1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00118d4:	8d 50 02             	lea    edx,[eax+0x2]
c00118d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00118da:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00118dd:	e9 11 02 00 00       	jmp    c0011af3 <opcodeFault(regs*, void*)+0x5b2>
c00118e2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00118e5:	8a 00                	mov    al,BYTE PTR [eax]
c00118e7:	3c 0f                	cmp    al,0xf
c00118e9:	0f 85 76 01 00 00    	jne    c0011a65 <opcodeFault(regs*, void*)+0x524>
c00118ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00118f2:	40                   	inc    eax
c00118f3:	8a 00                	mov    al,BYTE PTR [eax]
c00118f5:	3c c7                	cmp    al,0xc7
c00118f7:	0f 85 68 01 00 00    	jne    c0011a65 <opcodeFault(regs*, void*)+0x524>
c00118fd:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0011900:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011903:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011906:	8d 50 01             	lea    edx,[eax+0x1]
c0011909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001190c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001190f:	8d 45 ba             	lea    eax,[ebp-0x46]
c0011912:	50                   	push   eax
c0011913:	8d 45 bb             	lea    eax,[ebp-0x45]
c0011916:	50                   	push   eax
c0011917:	8d 45 bc             	lea    eax,[ebp-0x44]
c001191a:	50                   	push   eax
c001191b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001191e:	e8 1d 3f 00 00       	call   c0015840 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0011923:	83 c4 10             	add    esp,0x10
c0011926:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0011929:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001192c:	83 f0 01             	xor    eax,0x1
c001192f:	84 c0                	test   al,al
c0011931:	0f 84 2e 01 00 00    	je     c0011a65 <opcodeFault(regs*, void*)+0x524>
c0011937:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001193a:	3c 01                	cmp    al,0x1
c001193c:	0f 85 23 01 00 00    	jne    c0011a65 <opcodeFault(regs*, void*)+0x524>
c0011942:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0011945:	83 f0 01             	xor    eax,0x1
c0011948:	84 c0                	test   al,al
c001194a:	0f 84 15 01 00 00    	je     c0011a65 <opcodeFault(regs*, void*)+0x524>
c0011950:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011953:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011956:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0011959:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0011960:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0011963:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0011966:	89 c2                	mov    edx,eax
c0011968:	b8 00 00 00 00       	mov    eax,0x0
c001196d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0011970:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0011973:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011976:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0011979:	ba 00 00 00 00       	mov    edx,0x0
c001197e:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c0011981:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c0011984:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011987:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001198a:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001198d:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c0011994:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0011997:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001199a:	89 c2                	mov    edx,eax
c001199c:	b8 00 00 00 00       	mov    eax,0x0
c00119a1:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00119a4:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00119a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119aa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00119ad:	ba 00 00 00 00       	mov    edx,0x0
c00119b2:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00119b5:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00119b8:	e8 8c 70 00 00       	call   c0018a49 <lockScheduler()>
c00119bd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00119c0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00119c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00119c5:	89 c1                	mov    ecx,eax
c00119c7:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00119ca:	89 cb                	mov    ebx,ecx
c00119cc:	89 d0                	mov    eax,edx
c00119ce:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00119d1:	89 c6                	mov    esi,eax
c00119d3:	89 f0                	mov    eax,esi
c00119d5:	09 d8                	or     eax,ebx
c00119d7:	85 c0                	test   eax,eax
c00119d9:	75 21                	jne    c00119fc <opcodeFault(regs*, void*)+0x4bb>
c00119db:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00119de:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00119e1:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00119e4:	89 01                	mov    DWORD PTR [ecx],eax
c00119e6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00119e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119ec:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00119ef:	83 c8 40             	or     eax,0x40
c00119f2:	89 c2                	mov    edx,eax
c00119f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119f7:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00119fa:	eb 3e                	jmp    c0011a3a <opcodeFault(regs*, void*)+0x4f9>
c00119fc:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00119ff:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011a02:	8b 00                	mov    eax,DWORD PTR [eax]
c0011a04:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0011a07:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0011a0a:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0011a0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a10:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0011a13:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0011a16:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0011a19:	89 d0                	mov    eax,edx
c0011a1b:	31 d2                	xor    edx,edx
c0011a1d:	89 c3                	mov    ebx,eax
c0011a1f:	89 d6                	mov    esi,edx
c0011a21:	89 da                	mov    edx,ebx
c0011a23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a26:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0011a29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a2c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011a2f:	83 e0 bf             	and    eax,0xffffffbf
c0011a32:	89 c2                	mov    edx,eax
c0011a34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a37:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0011a3a:	e8 0c 70 00 00       	call   c0018a4b <unlockScheduler()>
c0011a3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a42:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0011a45:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0011a48:	01 c2                	add    edx,eax
c0011a4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a4d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011a50:	83 ec 0c             	sub    esp,0xc
c0011a53:	68 16 20 02 c0       	push   0xc0022016
c0011a58:	e8 b4 d7 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0011a5d:	83 c4 10             	add    esp,0x10
c0011a60:	e9 8e 00 00 00       	jmp    c0011af3 <opcodeFault(regs*, void*)+0x5b2>
c0011a65:	83 ec 0c             	sub    esp,0xc
c0011a68:	68 29 20 02 c0       	push   0xc0022029
c0011a6d:	e8 9f d7 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0011a72:	83 c4 10             	add    esp,0x10
c0011a75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a78:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011a7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a7e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a81:	c1 e0 04             	shl    eax,0x4
c0011a84:	01 d0                	add    eax,edx
c0011a86:	83 c0 03             	add    eax,0x3
c0011a89:	8a 00                	mov    al,BYTE PTR [eax]
c0011a8b:	0f b6 d8             	movzx  ebx,al
c0011a8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a91:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011a94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a97:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a9a:	c1 e0 04             	shl    eax,0x4
c0011a9d:	01 d0                	add    eax,edx
c0011a9f:	83 c0 02             	add    eax,0x2
c0011aa2:	8a 00                	mov    al,BYTE PTR [eax]
c0011aa4:	0f b6 c8             	movzx  ecx,al
c0011aa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011aaa:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0011aad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ab0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ab3:	c1 e0 04             	shl    eax,0x4
c0011ab6:	01 d0                	add    eax,edx
c0011ab8:	40                   	inc    eax
c0011ab9:	8a 00                	mov    al,BYTE PTR [eax]
c0011abb:	0f b6 d0             	movzx  edx,al
c0011abe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ac1:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c0011ac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ac7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011aca:	c1 e0 04             	shl    eax,0x4
c0011acd:	01 f0                	add    eax,esi
c0011acf:	8a 00                	mov    al,BYTE PTR [eax]
c0011ad1:	0f b6 c0             	movzx  eax,al
c0011ad4:	83 ec 0c             	sub    esp,0xc
c0011ad7:	53                   	push   ebx
c0011ad8:	51                   	push   ecx
c0011ad9:	52                   	push   edx
c0011ada:	50                   	push   eax
c0011adb:	68 3c 20 02 c0       	push   0xc002203c
c0011ae0:	e8 2c d7 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0011ae5:	83 c4 20             	add    esp,0x20
c0011ae8:	83 ec 0c             	sub    esp,0xc
c0011aeb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0011aee:	e8 65 f5 ff ff       	call   c0011058 <displayDebugInfo(regs*)>
c0011af3:	8d 65 f8             	lea    esp,[ebp-0x8]
c0011af6:	5b                   	pop    ebx
c0011af7:	5e                   	pop    esi
c0011af8:	5d                   	pop    ebp
c0011af9:	c3                   	ret    

c0011afa <displayProgramFault(char const*)>:
c0011afa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011aff:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011b02:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011b08:	85 c0                	test   eax,eax
c0011b0a:	74 15                	je     c0011b21 <displayProgramFault(char const*)+0x27>
c0011b0c:	83 ec 0c             	sub    esp,0xc
c0011b0f:	6a 04                	push   0x4
c0011b11:	6a 0f                	push   0xf
c0011b13:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011b17:	50                   	push   eax
c0011b18:	e8 05 b9 ff ff       	call   c000d422 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0011b1d:	83 c4 1c             	add    esp,0x1c
c0011b20:	c3                   	ret    
c0011b21:	c3                   	ret    

c0011b22 <setupInterruptController()>:
c0011b22:	55                   	push   ebp
c0011b23:	89 e5                	mov    ebp,esp
c0011b25:	53                   	push   ebx
c0011b26:	83 ec 14             	sub    esp,0x14
c0011b29:	e8 a3 2d 00 00       	call   c00148d1 <getCPUNumber()>
c0011b2e:	85 c0                	test   eax,eax
c0011b30:	0f 95 c0             	setne  al
c0011b33:	84 c0                	test   al,al
c0011b35:	74 56                	je     c0011b8d <setupInterruptController()+0x6b>
c0011b37:	83 ec 0c             	sub    esp,0xc
c0011b3a:	68 58 21 00 00       	push   0x2158
c0011b3f:	e8 98 d5 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0011b44:	83 c4 10             	add    esp,0x10
c0011b47:	89 c3                	mov    ebx,eax
c0011b49:	83 ec 0c             	sub    esp,0xc
c0011b4c:	53                   	push   ebx
c0011b4d:	e8 6a c9 00 00       	call   c001e4bc <APIC::APIC()>
c0011b52:	83 c4 10             	add    esp,0x10
c0011b55:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0011b58:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0011b5b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011b5e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b60:	83 c0 08             	add    eax,0x8
c0011b63:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b65:	6a 00                	push   0x0
c0011b67:	6a 00                	push   0x0
c0011b69:	6a 00                	push   0x0
c0011b6b:	52                   	push   edx
c0011b6c:	ff d0                	call   eax
c0011b6e:	83 c4 10             	add    esp,0x10
c0011b71:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0011b76:	83 ec 08             	sub    esp,0x8
c0011b79:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011b7c:	50                   	push   eax
c0011b7d:	e8 a4 ea ff ff       	call   c0010626 <Device::addChild(Device*)>
c0011b82:	83 c4 10             	add    esp,0x10
c0011b85:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011b88:	e9 48 03 00 00       	jmp    c0011ed5 <setupInterruptController()+0x3b3>
c0011b8d:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0011b92:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0011b98:	83 e0 01             	and    eax,0x1
c0011b9b:	84 c0                	test   al,al
c0011b9d:	0f 95 c0             	setne  al
c0011ba0:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0011ba3:	83 ec 0c             	sub    esp,0xc
c0011ba6:	68 58 21 00 00       	push   0x2158
c0011bab:	e8 2c d5 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0011bb0:	83 c4 10             	add    esp,0x10
c0011bb3:	89 c3                	mov    ebx,eax
c0011bb5:	83 ec 0c             	sub    esp,0xc
c0011bb8:	53                   	push   ebx
c0011bb9:	e8 f8 cd 00 00       	call   c001e9b6 <PIC::PIC()>
c0011bbe:	83 c4 10             	add    esp,0x10
c0011bc1:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011bc4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011bc7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011bca:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bcc:	83 c0 08             	add    eax,0x8
c0011bcf:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bd1:	6a 00                	push   0x0
c0011bd3:	6a 00                	push   0x0
c0011bd5:	6a 00                	push   0x0
c0011bd7:	52                   	push   edx
c0011bd8:	ff d0                	call   eax
c0011bda:	83 c4 10             	add    esp,0x10
c0011bdd:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0011be1:	74 6e                	je     c0011c51 <setupInterruptController()+0x12f>
c0011be3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011be6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011be9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011beb:	83 c0 0c             	add    eax,0xc
c0011bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0011bf0:	6a 00                	push   0x0
c0011bf2:	6a 00                	push   0x0
c0011bf4:	6a 00                	push   0x0
c0011bf6:	52                   	push   edx
c0011bf7:	ff d0                	call   eax
c0011bf9:	83 c4 10             	add    esp,0x10
c0011bfc:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011c00:	74 15                	je     c0011c17 <setupInterruptController()+0xf5>
c0011c02:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c05:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c07:	83 c0 04             	add    eax,0x4
c0011c0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c0c:	83 ec 0c             	sub    esp,0xc
c0011c0f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c12:	ff d0                	call   eax
c0011c14:	83 c4 10             	add    esp,0x10
c0011c17:	83 ec 0c             	sub    esp,0xc
c0011c1a:	68 58 21 00 00       	push   0x2158
c0011c1f:	e8 b8 d4 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0011c24:	83 c4 10             	add    esp,0x10
c0011c27:	89 c3                	mov    ebx,eax
c0011c29:	83 ec 0c             	sub    esp,0xc
c0011c2c:	53                   	push   ebx
c0011c2d:	e8 8a c8 00 00       	call   c001e4bc <APIC::APIC()>
c0011c32:	83 c4 10             	add    esp,0x10
c0011c35:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0011c38:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011c3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c3e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c40:	83 c0 08             	add    eax,0x8
c0011c43:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c45:	6a 00                	push   0x0
c0011c47:	6a 00                	push   0x0
c0011c49:	6a 00                	push   0x0
c0011c4b:	52                   	push   edx
c0011c4c:	ff d0                	call   eax
c0011c4e:	83 c4 10             	add    esp,0x10
c0011c51:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0011c56:	83 ec 08             	sub    esp,0x8
c0011c59:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c5c:	50                   	push   eax
c0011c5d:	e8 c4 e9 ff ff       	call   c0010626 <Device::addChild(Device*)>
c0011c62:	83 c4 10             	add    esp,0x10
c0011c65:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c68:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c6a:	83 c0 24             	add    eax,0x24
c0011c6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c6f:	6a 00                	push   0x0
c0011c71:	68 22 15 01 c0       	push   0xc0011522
c0011c76:	6a 00                	push   0x0
c0011c78:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c7b:	ff d0                	call   eax
c0011c7d:	83 c4 10             	add    esp,0x10
c0011c80:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c83:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c85:	83 c0 24             	add    eax,0x24
c0011c88:	8b 00                	mov    eax,DWORD PTR [eax]
c0011c8a:	6a 00                	push   0x0
c0011c8c:	68 22 15 01 c0       	push   0xc0011522
c0011c91:	6a 01                	push   0x1
c0011c93:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011c96:	ff d0                	call   eax
c0011c98:	83 c4 10             	add    esp,0x10
c0011c9b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011c9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ca0:	83 c0 24             	add    eax,0x24
c0011ca3:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ca5:	6a 00                	push   0x0
c0011ca7:	68 bb 0e 01 c0       	push   0xc0010ebb
c0011cac:	6a 02                	push   0x2
c0011cae:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011cb1:	ff d0                	call   eax
c0011cb3:	83 c4 10             	add    esp,0x10
c0011cb6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cb9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cbb:	83 c0 24             	add    eax,0x24
c0011cbe:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cc0:	6a 00                	push   0x0
c0011cc2:	68 22 15 01 c0       	push   0xc0011522
c0011cc7:	6a 03                	push   0x3
c0011cc9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ccc:	ff d0                	call   eax
c0011cce:	83 c4 10             	add    esp,0x10
c0011cd1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cd4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cd6:	83 c0 24             	add    eax,0x24
c0011cd9:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cdb:	6a 00                	push   0x0
c0011cdd:	68 22 15 01 c0       	push   0xc0011522
c0011ce2:	6a 04                	push   0x4
c0011ce4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ce7:	ff d0                	call   eax
c0011ce9:	83 c4 10             	add    esp,0x10
c0011cec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011cef:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cf1:	83 c0 24             	add    eax,0x24
c0011cf4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011cf6:	6a 00                	push   0x0
c0011cf8:	68 22 15 01 c0       	push   0xc0011522
c0011cfd:	6a 05                	push   0x5
c0011cff:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d02:	ff d0                	call   eax
c0011d04:	83 c4 10             	add    esp,0x10
c0011d07:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d0a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d0c:	83 c0 24             	add    eax,0x24
c0011d0f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d11:	6a 00                	push   0x0
c0011d13:	68 41 15 01 c0       	push   0xc0011541
c0011d18:	6a 06                	push   0x6
c0011d1a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d1d:	ff d0                	call   eax
c0011d1f:	83 c4 10             	add    esp,0x10
c0011d22:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d25:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d27:	83 c0 24             	add    eax,0x24
c0011d2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d2c:	6a 00                	push   0x0
c0011d2e:	68 6f 14 01 c0       	push   0xc001146f
c0011d33:	6a 07                	push   0x7
c0011d35:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d38:	ff d0                	call   eax
c0011d3a:	83 c4 10             	add    esp,0x10
c0011d3d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d40:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d42:	83 c0 24             	add    eax,0x24
c0011d45:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d47:	6a 00                	push   0x0
c0011d49:	68 d6 0c 01 c0       	push   0xc0010cd6
c0011d4e:	6a 08                	push   0x8
c0011d50:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d53:	ff d0                	call   eax
c0011d55:	83 c4 10             	add    esp,0x10
c0011d58:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d5d:	83 c0 24             	add    eax,0x24
c0011d60:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d62:	6a 00                	push   0x0
c0011d64:	68 22 15 01 c0       	push   0xc0011522
c0011d69:	6a 09                	push   0x9
c0011d6b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d6e:	ff d0                	call   eax
c0011d70:	83 c4 10             	add    esp,0x10
c0011d73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d76:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d78:	83 c0 24             	add    eax,0x24
c0011d7b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d7d:	6a 00                	push   0x0
c0011d7f:	68 22 15 01 c0       	push   0xc0011522
c0011d84:	6a 0a                	push   0xa
c0011d86:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011d89:	ff d0                	call   eax
c0011d8b:	83 c4 10             	add    esp,0x10
c0011d8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011d91:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d93:	83 c0 24             	add    eax,0x24
c0011d96:	8b 00                	mov    eax,DWORD PTR [eax]
c0011d98:	6a 00                	push   0x0
c0011d9a:	68 22 15 01 c0       	push   0xc0011522
c0011d9f:	6a 0b                	push   0xb
c0011da1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011da4:	ff d0                	call   eax
c0011da6:	83 c4 10             	add    esp,0x10
c0011da9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dac:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dae:	83 c0 24             	add    eax,0x24
c0011db1:	8b 00                	mov    eax,DWORD PTR [eax]
c0011db3:	6a 00                	push   0x0
c0011db5:	68 22 15 01 c0       	push   0xc0011522
c0011dba:	6a 0c                	push   0xc
c0011dbc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dbf:	ff d0                	call   eax
c0011dc1:	83 c4 10             	add    esp,0x10
c0011dc4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dc7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dc9:	83 c0 24             	add    eax,0x24
c0011dcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dce:	6a 00                	push   0x0
c0011dd0:	68 d2 14 01 c0       	push   0xc00114d2
c0011dd5:	6a 0d                	push   0xd
c0011dd7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011dda:	ff d0                	call   eax
c0011ddc:	83 c4 10             	add    esp,0x10
c0011ddf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011de2:	8b 00                	mov    eax,DWORD PTR [eax]
c0011de4:	83 c0 24             	add    eax,0x24
c0011de7:	8b 00                	mov    eax,DWORD PTR [eax]
c0011de9:	6a 00                	push   0x0
c0011deb:	68 0b 15 01 c0       	push   0xc001150b
c0011df0:	6a 0e                	push   0xe
c0011df2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011df5:	ff d0                	call   eax
c0011df7:	83 c4 10             	add    esp,0x10
c0011dfa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011dfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0011dff:	83 c0 24             	add    eax,0x24
c0011e02:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e04:	6a 00                	push   0x0
c0011e06:	68 22 15 01 c0       	push   0xc0011522
c0011e0b:	6a 0f                	push   0xf
c0011e0d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e10:	ff d0                	call   eax
c0011e12:	83 c4 10             	add    esp,0x10
c0011e15:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e18:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e1a:	83 c0 24             	add    eax,0x24
c0011e1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e1f:	6a 00                	push   0x0
c0011e21:	68 22 15 01 c0       	push   0xc0011522
c0011e26:	6a 10                	push   0x10
c0011e28:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e2b:	ff d0                	call   eax
c0011e2d:	83 c4 10             	add    esp,0x10
c0011e30:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e33:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e35:	83 c0 24             	add    eax,0x24
c0011e38:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e3a:	6a 00                	push   0x0
c0011e3c:	68 22 15 01 c0       	push   0xc0011522
c0011e41:	6a 11                	push   0x11
c0011e43:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e46:	ff d0                	call   eax
c0011e48:	83 c4 10             	add    esp,0x10
c0011e4b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e50:	83 c0 24             	add    eax,0x24
c0011e53:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e55:	6a 00                	push   0x0
c0011e57:	68 22 15 01 c0       	push   0xc0011522
c0011e5c:	6a 12                	push   0x12
c0011e5e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e61:	ff d0                	call   eax
c0011e63:	83 c4 10             	add    esp,0x10
c0011e66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e69:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e6b:	83 c0 24             	add    eax,0x24
c0011e6e:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e70:	6a 00                	push   0x0
c0011e72:	68 22 15 01 c0       	push   0xc0011522
c0011e77:	6a 13                	push   0x13
c0011e79:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e7c:	ff d0                	call   eax
c0011e7e:	83 c4 10             	add    esp,0x10
c0011e81:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e84:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e86:	83 c0 24             	add    eax,0x24
c0011e89:	8b 00                	mov    eax,DWORD PTR [eax]
c0011e8b:	6a 00                	push   0x0
c0011e8d:	68 22 15 01 c0       	push   0xc0011522
c0011e92:	6a 14                	push   0x14
c0011e94:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011e97:	ff d0                	call   eax
c0011e99:	83 c4 10             	add    esp,0x10
c0011e9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011e9f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ea1:	83 c0 24             	add    eax,0x24
c0011ea4:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ea6:	6a 00                	push   0x0
c0011ea8:	68 22 15 01 c0       	push   0xc0011522
c0011ead:	6a 1e                	push   0x1e
c0011eaf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011eb2:	ff d0                	call   eax
c0011eb4:	83 c4 10             	add    esp,0x10
c0011eb7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011eba:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ebc:	83 c0 24             	add    eax,0x24
c0011ebf:	8b 00                	mov    eax,DWORD PTR [eax]
c0011ec1:	6a 00                	push   0x0
c0011ec3:	68 50 74 01 c0       	push   0xc0017450
c0011ec8:	6a 60                	push   0x60
c0011eca:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0011ecd:	ff d0                	call   eax
c0011ecf:	83 c4 10             	add    esp,0x10
c0011ed2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011ed5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011ed8:	c9                   	leave  
c0011ed9:	c3                   	ret    

c0011eda <InterruptController::convertLegacyIRQNumber(int)>:
c0011eda:	55                   	push   ebp
c0011edb:	89 e5                	mov    ebp,esp
c0011edd:	83 ec 08             	sub    esp,0x8
c0011ee0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011ee3:	83 ec 0c             	sub    esp,0xc
c0011ee6:	50                   	push   eax
c0011ee7:	e8 1c ea ff ff       	call   c0010908 <Device::getName()>
c0011eec:	83 c4 10             	add    esp,0x10
c0011eef:	8a 00                	mov    al,BYTE PTR [eax]
c0011ef1:	3c 41                	cmp    al,0x41
c0011ef3:	0f 94 c0             	sete   al
c0011ef6:	84 c0                	test   al,al
c0011ef8:	74 28                	je     c0011f22 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011efa:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0011efe:	7f 12                	jg     c0011f12 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0011f00:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011f03:	05 00 3f 02 c0       	add    eax,0xc0023f00
c0011f08:	8a 00                	mov    al,BYTE PTR [eax]
c0011f0a:	0f b6 c0             	movzx  eax,al
c0011f0d:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0011f10:	eb 10                	jmp    c0011f22 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0011f12:	83 ec 0c             	sub    esp,0xc
c0011f15:	68 b4 1d 02 c0       	push   0xc0021db4
c0011f1a:	e8 21 3b 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c0011f1f:	83 c4 10             	add    esp,0x10
c0011f22:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0011f25:	c9                   	leave  
c0011f26:	c3                   	ret    
c0011f27:	90                   	nop

c0011f28 <startGUI(void*)>:
c0011f28:	55                   	push   ebp
c0011f29:	89 e5                	mov    ebp,esp
c0011f2b:	53                   	push   ebx
c0011f2c:	83 ec 04             	sub    esp,0x4
c0011f2f:	e8 17 6b 00 00       	call   c0018a4b <unlockScheduler()>
c0011f34:	e8 fb 6a 00 00       	call   c0018a34 <getIRQNestingLevel()>
c0011f39:	83 ec 08             	sub    esp,0x8
c0011f3c:	50                   	push   eax
c0011f3d:	68 a4 20 02 c0       	push   0xc00220a4
c0011f42:	e8 ca d2 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0011f47:	83 c4 10             	add    esp,0x10
c0011f4a:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c0011f50:	83 ec 08             	sub    esp,0x8
c0011f53:	6a 01                	push   0x1
c0011f55:	68 be 20 02 c0       	push   0xc00220be
c0011f5a:	e8 04 65 00 00       	call   c0018463 <Thr::loadDLL(char const*, bool)>
c0011f5f:	83 c4 10             	add    esp,0x10
c0011f62:	83 ec 08             	sub    esp,0x8
c0011f65:	53                   	push   ebx
c0011f66:	50                   	push   eax
c0011f67:	e8 bd 66 00 00       	call   c0018629 <Thr::executeDLL(unsigned long, void*)>
c0011f6c:	83 c4 10             	add    esp,0x10
c0011f6f:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c0011f75:	83 ec 08             	sub    esp,0x8
c0011f78:	6a 01                	push   0x1
c0011f7a:	68 d8 20 02 c0       	push   0xc00220d8
c0011f7f:	e8 df 64 00 00       	call   c0018463 <Thr::loadDLL(char const*, bool)>
c0011f84:	83 c4 10             	add    esp,0x10
c0011f87:	83 ec 08             	sub    esp,0x8
c0011f8a:	53                   	push   ebx
c0011f8b:	50                   	push   eax
c0011f8c:	e8 98 66 00 00       	call   c0018629 <Thr::executeDLL(unsigned long, void*)>
c0011f91:	83 c4 10             	add    esp,0x10
c0011f94:	90                   	nop
c0011f95:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0011f98:	c9                   	leave  
c0011f99:	c3                   	ret    

c0011f9a <sendKeyToTerminal(unsigned char)>:
c0011f9a:	55                   	push   ebp
c0011f9b:	89 e5                	mov    ebp,esp
c0011f9d:	83 ec 28             	sub    esp,0x28
c0011fa0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011fa3:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0011fa6:	8b 15 64 48 02 c0    	mov    edx,DWORD PTR ds:0xc0024864
c0011fac:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c0011faf:	25 ff 00 00 00       	and    eax,0xff
c0011fb4:	83 ec 08             	sub    esp,0x8
c0011fb7:	50                   	push   eax
c0011fb8:	52                   	push   edx
c0011fb9:	e8 a2 b9 ff ff       	call   c000d960 <VgaText::receiveKey(unsigned char)>
c0011fbe:	83 c4 10             	add    esp,0x10
c0011fc1:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0011fc5:	75 41                	jne    c0012008 <sendKeyToTerminal(unsigned char)+0x6e>
c0011fc7:	e8 a4 6a 00 00       	call   c0018a70 <lockStuff()>
c0011fcc:	a1 40 49 02 c0       	mov    eax,ds:0xc0024940
c0011fd1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011fd4:	c7 05 40 49 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024940,0x0
c0011fde:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0011fe2:	74 1f                	je     c0012003 <sendKeyToTerminal(unsigned char)+0x69>
c0011fe4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0011fe7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0011fea:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0011fed:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ff0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0011ff3:	83 ec 0c             	sub    esp,0xc
c0011ff6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011ff9:	e8 6f 70 00 00       	call   c001906d <unblockTask(ThreadControlBlock*)>
c0011ffe:	83 c4 10             	add    esp,0x10
c0012001:	eb db                	jmp    c0011fde <sendKeyToTerminal(unsigned char)+0x44>
c0012003:	e8 0f 6e 00 00       	call   c0018e17 <unlockStuff()>
c0012008:	90                   	nop
c0012009:	c9                   	leave  
c001200a:	c3                   	ret    

c001200b <sendKeyboardToken(KeyboardToken)>:
c001200b:	55                   	push   ebp
c001200c:	89 e5                	mov    ebp,esp
c001200e:	83 ec 18             	sub    esp,0x18
c0012011:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0012014:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012017:	25 ff ff 00 00       	and    eax,0xffff
c001201c:	83 f2 01             	xor    edx,0x1
c001201f:	88 90 60 49 02 c0    	mov    BYTE PTR [eax-0x3ffdb6a0],dl
c0012025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012028:	66 3d 03 02          	cmp    ax,0x203
c001202c:	75 07                	jne    c0012035 <sendKeyboardToken(KeyboardToken)+0x2a>
c001202e:	a0 60 4a 02 c0       	mov    al,ds:0xc0024a60
c0012033:	84 c0                	test   al,al
c0012035:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0012039:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c001203c:	a0 68 4d 02 c0       	mov    al,ds:0xc0024d68
c0012041:	38 c2                	cmp    dl,al
c0012043:	74 1e                	je     c0012063 <sendKeyboardToken(KeyboardToken)+0x58>
c0012045:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0012048:	a2 68 4d 02 c0       	mov    ds:0xc0024d68,al
c001204d:	a0 68 4d 02 c0       	mov    al,ds:0xc0024d68
c0012052:	25 ff 00 00 00       	and    eax,0xff
c0012057:	83 ec 0c             	sub    esp,0xc
c001205a:	50                   	push   eax
c001205b:	e8 6c ab ff ff       	call   c000cbcc <setTerminalScrollLock(bool)>
c0012060:	83 c4 10             	add    esp,0x10
c0012063:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0012066:	84 c0                	test   al,al
c0012068:	0f 84 ae 00 00 00    	je     c001211c <sendKeyboardToken(KeyboardToken)+0x111>
c001206e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012071:	66 3d 10 03          	cmp    ax,0x310
c0012075:	75 06                	jne    c001207d <sendKeyboardToken(KeyboardToken)+0x72>
c0012077:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c001207d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012080:	66 3d 11 03          	cmp    ax,0x311
c0012084:	75 06                	jne    c001208c <sendKeyboardToken(KeyboardToken)+0x81>
c0012086:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c001208c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001208f:	66 3d 12 03          	cmp    ax,0x312
c0012093:	75 06                	jne    c001209b <sendKeyboardToken(KeyboardToken)+0x90>
c0012095:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c001209b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001209e:	66 3d 13 03          	cmp    ax,0x313
c00120a2:	75 06                	jne    c00120aa <sendKeyboardToken(KeyboardToken)+0x9f>
c00120a4:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c00120aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120ad:	66 3d 14 03          	cmp    ax,0x314
c00120b1:	75 06                	jne    c00120b9 <sendKeyboardToken(KeyboardToken)+0xae>
c00120b3:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00120b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120bc:	66 3d 15 03          	cmp    ax,0x315
c00120c0:	75 06                	jne    c00120c8 <sendKeyboardToken(KeyboardToken)+0xbd>
c00120c2:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00120c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120cb:	66 3d 16 03          	cmp    ax,0x316
c00120cf:	75 06                	jne    c00120d7 <sendKeyboardToken(KeyboardToken)+0xcc>
c00120d1:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00120d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120da:	66 3d 17 03          	cmp    ax,0x317
c00120de:	75 06                	jne    c00120e6 <sendKeyboardToken(KeyboardToken)+0xdb>
c00120e0:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00120e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120e9:	66 3d 18 03          	cmp    ax,0x318
c00120ed:	75 06                	jne    c00120f5 <sendKeyboardToken(KeyboardToken)+0xea>
c00120ef:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00120f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00120f8:	66 3d 19 03          	cmp    ax,0x319
c00120fc:	75 06                	jne    c0012104 <sendKeyboardToken(KeyboardToken)+0xf9>
c00120fe:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0012104:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012107:	66 3d 1a 03          	cmp    ax,0x31a
c001210b:	0f 85 c9 00 00 00    	jne    c00121da <sendKeyboardToken(KeyboardToken)+0x1cf>
c0012111:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0012117:	e9 be 00 00 00       	jmp    c00121da <sendKeyboardToken(KeyboardToken)+0x1cf>
c001211c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001211f:	66 3d 10 03          	cmp    ax,0x310
c0012123:	75 0a                	jne    c001212f <sendKeyboardToken(KeyboardToken)+0x124>
c0012125:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c001212b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001212f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012132:	66 3d 11 03          	cmp    ax,0x311
c0012136:	75 0a                	jne    c0012142 <sendKeyboardToken(KeyboardToken)+0x137>
c0012138:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c001213e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012142:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012145:	66 3d 12 03          	cmp    ax,0x312
c0012149:	75 0a                	jne    c0012155 <sendKeyboardToken(KeyboardToken)+0x14a>
c001214b:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0012151:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012155:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012158:	66 3d 13 03          	cmp    ax,0x313
c001215c:	75 0a                	jne    c0012168 <sendKeyboardToken(KeyboardToken)+0x15d>
c001215e:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0012164:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0012168:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001216b:	66 3d 14 03          	cmp    ax,0x314
c001216f:	75 0a                	jne    c001217b <sendKeyboardToken(KeyboardToken)+0x170>
c0012171:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0012177:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001217b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001217e:	66 3d 15 03          	cmp    ax,0x315
c0012182:	75 0a                	jne    c001218e <sendKeyboardToken(KeyboardToken)+0x183>
c0012184:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001218a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001218e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012191:	66 3d 16 03          	cmp    ax,0x316
c0012195:	75 0a                	jne    c00121a1 <sendKeyboardToken(KeyboardToken)+0x196>
c0012197:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c001219d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121a4:	66 3d 17 03          	cmp    ax,0x317
c00121a8:	75 0a                	jne    c00121b4 <sendKeyboardToken(KeyboardToken)+0x1a9>
c00121aa:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00121b0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121b7:	66 3d 18 03          	cmp    ax,0x318
c00121bb:	75 0a                	jne    c00121c7 <sendKeyboardToken(KeyboardToken)+0x1bc>
c00121bd:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00121c3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121ca:	66 3d 19 03          	cmp    ax,0x319
c00121ce:	75 0a                	jne    c00121da <sendKeyboardToken(KeyboardToken)+0x1cf>
c00121d0:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00121d6:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00121da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00121dd:	66 3d 00 02          	cmp    ax,0x200
c00121e1:	75 2a                	jne    c001220d <sendKeyboardToken(KeyboardToken)+0x202>
c00121e3:	a0 60 4d 02 c0       	mov    al,ds:0xc0024d60
c00121e8:	83 f0 01             	xor    eax,0x1
c00121eb:	84 c0                	test   al,al
c00121ed:	74 1e                	je     c001220d <sendKeyboardToken(KeyboardToken)+0x202>
c00121ef:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00121f4:	6a 01                	push   0x1
c00121f6:	6a 00                	push   0x0
c00121f8:	68 28 1f 01 c0       	push   0xc0011f28
c00121fd:	50                   	push   eax
c00121fe:	e8 7b 69 00 00       	call   c0018b7e <Process::createThread(void (*)(void*), void*, int)>
c0012203:	83 c4 10             	add    esp,0x10
c0012206:	c6 05 60 4d 02 c0 01 	mov    BYTE PTR ds:0xc0024d60,0x1
c001220d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012210:	66 3d 1d 03          	cmp    ax,0x31d
c0012214:	75 06                	jne    c001221c <sendKeyboardToken(KeyboardToken)+0x211>
c0012216:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001221c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001221f:	66 3d 1c 03          	cmp    ax,0x31c
c0012223:	75 06                	jne    c001222b <sendKeyboardToken(KeyboardToken)+0x220>
c0012225:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c001222b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001222e:	66 3d 1b 03          	cmp    ax,0x31b
c0012232:	75 06                	jne    c001223a <sendKeyboardToken(KeyboardToken)+0x22f>
c0012234:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c001223a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001223d:	66 3d 1e 03          	cmp    ax,0x31e
c0012241:	75 06                	jne    c0012249 <sendKeyboardToken(KeyboardToken)+0x23e>
c0012243:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0012249:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001224c:	66 3d 1f 03          	cmp    ax,0x31f
c0012250:	75 06                	jne    c0012258 <sendKeyboardToken(KeyboardToken)+0x24d>
c0012252:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0012258:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001225b:	66 3d 1a 03          	cmp    ax,0x31a
c001225f:	75 06                	jne    c0012267 <sendKeyboardToken(KeyboardToken)+0x25c>
c0012261:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0012267:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c001226b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001226e:	83 f0 01             	xor    eax,0x1
c0012271:	84 c0                	test   al,al
c0012273:	74 7b                	je     c00122f0 <sendKeyboardToken(KeyboardToken)+0x2e5>
c0012275:	a0 61 4a 02 c0       	mov    al,ds:0xc0024a61
c001227a:	84 c0                	test   al,al
c001227c:	74 43                	je     c00122c1 <sendKeyboardToken(KeyboardToken)+0x2b6>
c001227e:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0012282:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0012286:	74 2d                	je     c00122b5 <sendKeyboardToken(KeyboardToken)+0x2aa>
c0012288:	8b 15 64 4d 02 c0    	mov    edx,DWORD PTR ds:0xc0024d64
c001228e:	89 d0                	mov    eax,edx
c0012290:	c1 e0 02             	shl    eax,0x2
c0012293:	01 d0                	add    eax,edx
c0012295:	01 c0                	add    eax,eax
c0012297:	a3 64 4d 02 c0       	mov    ds:0xc0024d64,eax
c001229c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001229f:	25 ff ff 00 00       	and    eax,0xffff
c00122a4:	8d 50 d0             	lea    edx,[eax-0x30]
c00122a7:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c00122ac:	01 d0                	add    eax,edx
c00122ae:	a3 64 4d 02 c0       	mov    ds:0xc0024d64,eax
c00122b3:	eb 71                	jmp    c0012326 <sendKeyboardToken(KeyboardToken)+0x31b>
c00122b5:	c7 05 64 4d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024d64,0x0
c00122bf:	eb 65                	jmp    c0012326 <sendKeyboardToken(KeyboardToken)+0x31b>
c00122c1:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c00122c6:	85 c0                	test   eax,eax
c00122c8:	74 1a                	je     c00122e4 <sendKeyboardToken(KeyboardToken)+0x2d9>
c00122ca:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c00122cf:	25 ff 00 00 00       	and    eax,0xff
c00122d4:	83 ec 0c             	sub    esp,0xc
c00122d7:	50                   	push   eax
c00122d8:	e8 bd fc ff ff       	call   c0011f9a <sendKeyToTerminal(unsigned char)>
c00122dd:	83 c4 10             	add    esp,0x10
c00122e0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00122e4:	c7 05 64 4d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024d64,0x0
c00122ee:	eb 36                	jmp    c0012326 <sendKeyboardToken(KeyboardToken)+0x31b>
c00122f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00122f3:	66 3d 01 01          	cmp    ax,0x101
c00122f7:	75 2d                	jne    c0012326 <sendKeyboardToken(KeyboardToken)+0x31b>
c00122f9:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c00122fe:	85 c0                	test   eax,eax
c0012300:	74 1a                	je     c001231c <sendKeyboardToken(KeyboardToken)+0x311>
c0012302:	a1 64 4d 02 c0       	mov    eax,ds:0xc0024d64
c0012307:	25 ff 00 00 00       	and    eax,0xff
c001230c:	83 ec 0c             	sub    esp,0xc
c001230f:	50                   	push   eax
c0012310:	e8 85 fc ff ff       	call   c0011f9a <sendKeyToTerminal(unsigned char)>
c0012315:	83 c4 10             	add    esp,0x10
c0012318:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001231c:	c7 05 64 4d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0024d64,0x0
c0012326:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0012329:	83 f0 01             	xor    eax,0x1
c001232c:	84 c0                	test   al,al
c001232e:	74 4e                	je     c001237e <sendKeyboardToken(KeyboardToken)+0x373>
c0012330:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0012333:	83 f0 01             	xor    eax,0x1
c0012336:	84 c0                	test   al,al
c0012338:	74 44                	je     c001237e <sendKeyboardToken(KeyboardToken)+0x373>
c001233a:	a0 60 4a 02 c0       	mov    al,ds:0xc0024a60
c001233f:	83 f0 01             	xor    eax,0x1
c0012342:	84 c0                	test   al,al
c0012344:	74 38                	je     c001237e <sendKeyboardToken(KeyboardToken)+0x373>
c0012346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012349:	66 83 f8 1f          	cmp    ax,0x1f
c001234d:	76 09                	jbe    c0012358 <sendKeyboardToken(KeyboardToken)+0x34d>
c001234f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012352:	66 83 f8 7e          	cmp    ax,0x7e
c0012356:	76 12                	jbe    c001236a <sendKeyboardToken(KeyboardToken)+0x35f>
c0012358:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001235b:	66 83 f8 0a          	cmp    ax,0xa
c001235f:	74 09                	je     c001236a <sendKeyboardToken(KeyboardToken)+0x35f>
c0012361:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012364:	66 83 f8 08          	cmp    ax,0x8
c0012368:	75 14                	jne    c001237e <sendKeyboardToken(KeyboardToken)+0x373>
c001236a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001236d:	25 ff 00 00 00       	and    eax,0xff
c0012372:	83 ec 0c             	sub    esp,0xc
c0012375:	50                   	push   eax
c0012376:	e8 1f fc ff ff       	call   c0011f9a <sendKeyToTerminal(unsigned char)>
c001237b:	83 c4 10             	add    esp,0x10
c001237e:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0012381:	83 f0 01             	xor    eax,0x1
c0012384:	84 c0                	test   al,al
c0012386:	74 51                	je     c00123d9 <sendKeyboardToken(KeyboardToken)+0x3ce>
c0012388:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001238b:	83 f0 01             	xor    eax,0x1
c001238e:	84 c0                	test   al,al
c0012390:	74 47                	je     c00123d9 <sendKeyboardToken(KeyboardToken)+0x3ce>
c0012392:	a0 60 4a 02 c0       	mov    al,ds:0xc0024a60
c0012397:	84 c0                	test   al,al
c0012399:	74 3e                	je     c00123d9 <sendKeyboardToken(KeyboardToken)+0x3ce>
c001239b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001239e:	66 83 f8 3f          	cmp    ax,0x3f
c00123a2:	76 35                	jbe    c00123d9 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00123a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123a7:	66 83 f8 7f          	cmp    ax,0x7f
c00123ab:	77 2c                	ja     c00123d9 <sendKeyboardToken(KeyboardToken)+0x3ce>
c00123ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123b0:	88 c2                	mov    dl,al
c00123b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123b5:	66 83 f8 5f          	cmp    ax,0x5f
c00123b9:	76 04                	jbe    c00123bf <sendKeyboardToken(KeyboardToken)+0x3b4>
c00123bb:	b0 20                	mov    al,0x20
c00123bd:	eb 02                	jmp    c00123c1 <sendKeyboardToken(KeyboardToken)+0x3b6>
c00123bf:	b0 00                	mov    al,0x0
c00123c1:	29 c2                	sub    edx,eax
c00123c3:	88 d0                	mov    al,dl
c00123c5:	83 e8 40             	sub    eax,0x40
c00123c8:	25 ff 00 00 00       	and    eax,0xff
c00123cd:	83 ec 0c             	sub    esp,0xc
c00123d0:	50                   	push   eax
c00123d1:	e8 c4 fb ff ff       	call   c0011f9a <sendKeyToTerminal(unsigned char)>
c00123d6:	83 c4 10             	add    esp,0x10
c00123d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123dc:	66 3d 00 03          	cmp    ax,0x300
c00123e0:	75 0f                	jne    c00123f1 <sendKeyboardToken(KeyboardToken)+0x3e6>
c00123e2:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00123e5:	83 f0 01             	xor    eax,0x1
c00123e8:	84 c0                	test   al,al
c00123ea:	74 05                	je     c00123f1 <sendKeyboardToken(KeyboardToken)+0x3e6>
c00123ec:	e8 02 b0 ff ff       	call   c000d3f3 <doTerminalCycle()>
c00123f1:	90                   	nop
c00123f2:	c9                   	leave  
c00123f3:	c3                   	ret    

c00123f4 <clearInternalKeybuffer(VgaText*)>:
c00123f4:	55                   	push   ebp
c00123f5:	89 e5                	mov    ebp,esp
c00123f7:	83 ec 08             	sub    esp,0x8
c00123fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123fd:	05 34 11 00 00       	add    eax,0x1134
c0012402:	83 ec 0c             	sub    esp,0xc
c0012405:	50                   	push   eax
c0012406:	e8 d3 e2 fe ff       	call   c00006de <strlen>
c001240b:	83 c4 10             	add    esp,0x10
c001240e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012411:	81 c2 34 11 00 00    	add    edx,0x1134
c0012417:	83 ec 04             	sub    esp,0x4
c001241a:	50                   	push   eax
c001241b:	6a 00                	push   0x0
c001241d:	52                   	push   edx
c001241e:	e8 9e e2 fe ff       	call   c00006c1 <memset>
c0012423:	83 c4 10             	add    esp,0x10
c0012426:	90                   	nop
c0012427:	c9                   	leave  
c0012428:	c3                   	ret    

c0012429 <readKeyboard(VgaText*, char*, unsigned long)>:
c0012429:	55                   	push   ebp
c001242a:	89 e5                	mov    ebp,esp
c001242c:	83 ec 18             	sub    esp,0x18
c001242f:	fb                   	sti    
c0012430:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0012437:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001243b:	74 77                	je     c00124b4 <readKeyboard(VgaText*, char*, unsigned long)+0x8b>
c001243d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012440:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0012446:	84 c0                	test   al,al
c0012448:	75 02                	jne    c001244c <readKeyboard(VgaText*, char*, unsigned long)+0x23>
c001244a:	eb f1                	jmp    c001243d <readKeyboard(VgaText*, char*, unsigned long)+0x14>
c001244c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001244f:	8d 50 01             	lea    edx,[eax+0x1]
c0012452:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0012455:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012458:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c001245e:	88 10                	mov    BYTE PTR [eax],dl
c0012460:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012463:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0012469:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c001246c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001246f:	05 34 11 00 00       	add    eax,0x1134
c0012474:	83 ec 0c             	sub    esp,0xc
c0012477:	50                   	push   eax
c0012478:	e8 61 e2 fe ff       	call   c00006de <strlen>
c001247d:	83 c4 10             	add    esp,0x10
c0012480:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0012483:	81 c2 34 11 00 00    	add    edx,0x1134
c0012489:	8d 4a 01             	lea    ecx,[edx+0x1]
c001248c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001248f:	81 c2 34 11 00 00    	add    edx,0x1134
c0012495:	83 ec 04             	sub    esp,0x4
c0012498:	50                   	push   eax
c0012499:	51                   	push   ecx
c001249a:	52                   	push   edx
c001249b:	e8 b3 e1 fe ff       	call   c0000653 <memmove>
c00124a0:	83 c4 10             	add    esp,0x10
c00124a3:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00124a6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00124a9:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00124ad:	75 88                	jne    c0012437 <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c00124af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00124b2:	eb 03                	jmp    c00124b7 <readKeyboard(VgaText*, char*, unsigned long)+0x8e>
c00124b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00124b7:	c9                   	leave  
c00124b8:	c3                   	ret    
c00124b9:	90                   	nop

c00124ba <Keyboard::Keyboard(char const*)>:
c00124ba:	83 ec 0c             	sub    esp,0xc
c00124bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124c1:	83 ec 08             	sub    esp,0x8
c00124c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124c8:	50                   	push   eax
c00124c9:	e8 48 e3 ff ff       	call   c0010816 <Device::Device(char const*)>
c00124ce:	83 c4 10             	add    esp,0x10
c00124d1:	ba fc 20 02 c0       	mov    edx,0xc00220fc
c00124d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124da:	89 10                	mov    DWORD PTR [eax],edx
c00124dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00124e0:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c00124ea:	c6 05 44 49 02 c0 01 	mov    BYTE PTR ds:0xc0024944,0x1
c00124f1:	90                   	nop
c00124f2:	83 c4 0c             	add    esp,0xc
c00124f5:	c3                   	ret    

c00124f6 <Keyboard::~Keyboard()>:
c00124f6:	83 ec 0c             	sub    esp,0xc
c00124f9:	ba fc 20 02 c0       	mov    edx,0xc00220fc
c00124fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012502:	89 10                	mov    DWORD PTR [eax],edx
c0012504:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012508:	83 ec 0c             	sub    esp,0xc
c001250b:	50                   	push   eax
c001250c:	e8 bb df ff ff       	call   c00104cc <Device::~Device()>
c0012511:	83 c4 10             	add    esp,0x10
c0012514:	90                   	nop
c0012515:	83 c4 0c             	add    esp,0xc
c0012518:	c3                   	ret    
c0012519:	90                   	nop

c001251a <Keyboard::~Keyboard()>:
c001251a:	83 ec 0c             	sub    esp,0xc
c001251d:	83 ec 0c             	sub    esp,0xc
c0012520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012524:	e8 cd ff ff ff       	call   c00124f6 <Keyboard::~Keyboard()>
c0012529:	83 c4 10             	add    esp,0x10
c001252c:	83 ec 08             	sub    esp,0x8
c001252f:	68 5c 01 00 00       	push   0x15c
c0012534:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012538:	e8 ae cb ff ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c001253d:	83 c4 10             	add    esp,0x10
c0012540:	83 c4 0c             	add    esp,0xc
c0012543:	c3                   	ret    

c0012544 <LogicalDisk::close(int, int, void*)>:
c0012544:	83 c8 ff             	or     eax,0xffffffff
c0012547:	c3                   	ret    

c0012548 <LogicalDisk::~LogicalDisk()>:
c0012548:	83 ec 0c             	sub    esp,0xc
c001254b:	ba ac 21 02 c0       	mov    edx,0xc00221ac
c0012550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012554:	89 10                	mov    DWORD PTR [eax],edx
c0012556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001255a:	83 ec 0c             	sub    esp,0xc
c001255d:	50                   	push   eax
c001255e:	e8 69 df ff ff       	call   c00104cc <Device::~Device()>
c0012563:	83 c4 10             	add    esp,0x10
c0012566:	90                   	nop
c0012567:	83 c4 0c             	add    esp,0xc
c001256a:	c3                   	ret    
c001256b:	90                   	nop

c001256c <LogicalDisk::~LogicalDisk()>:
c001256c:	83 ec 0c             	sub    esp,0xc
c001256f:	83 ec 0c             	sub    esp,0xc
c0012572:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012576:	e8 cd ff ff ff       	call   c0012548 <LogicalDisk::~LogicalDisk()>
c001257b:	83 c4 10             	add    esp,0x10
c001257e:	83 ec 08             	sub    esp,0x8
c0012581:	68 74 01 00 00       	push   0x174
c0012586:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001258a:	e8 5c cb ff ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c001258f:	83 c4 10             	add    esp,0x10
c0012592:	83 c4 0c             	add    esp,0xc
c0012595:	c3                   	ret    

c0012596 <LogicalDisk::open(int, int, void*)>:
c0012596:	83 ec 18             	sub    esp,0x18
c0012599:	68 28 21 02 c0       	push   0xc0022128
c001259e:	e8 9d 34 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c00125a3:	83 c8 ff             	or     eax,0xffffffff
c00125a6:	83 c4 1c             	add    esp,0x1c
c00125a9:	c3                   	ret    

c00125aa <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00125aa:	53                   	push   ebx
c00125ab:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00125af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00125b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00125b7:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00125bd:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c00125c3:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00125c9:	77 10                	ja     c00125db <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00125cb:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00125d1:	89 d3                	mov    ebx,edx
c00125d3:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00125d9:	72 05                	jb     c00125e0 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00125db:	83 c8 ff             	or     eax,0xffffffff
c00125de:	89 c2                	mov    edx,eax
c00125e0:	5b                   	pop    ebx
c00125e1:	c3                   	ret    

c00125e2 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00125e2:	56                   	push   esi
c00125e3:	83 c8 ff             	or     eax,0xffffffff
c00125e6:	53                   	push   ebx
c00125e7:	89 c2                	mov    edx,eax
c00125e9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00125ed:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00125f1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00125f5:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00125fb:	77 27                	ja     c0012624 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00125fd:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0012603:	89 d8                	mov    eax,ebx
c0012605:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001260b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0012610:	89 c2                	mov    edx,eax
c0012612:	73 10                	jae    c0012624 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0012614:	89 c8                	mov    eax,ecx
c0012616:	89 da                	mov    edx,ebx
c0012618:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001261e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0012624:	5b                   	pop    ebx
c0012625:	5e                   	pop    esi
c0012626:	c3                   	ret    
c0012627:	90                   	nop

c0012628 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0012628:	83 ec 1c             	sub    esp,0x1c
c001262b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001262f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012633:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012637:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001263b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001263f:	89 04 24             	mov    DWORD PTR [esp],eax
c0012642:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012646:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001264a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001264e:	83 ec 08             	sub    esp,0x8
c0012651:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012655:	50                   	push   eax
c0012656:	e8 bb e1 ff ff       	call   c0010816 <Device::Device(char const*)>
c001265b:	83 c4 10             	add    esp,0x10
c001265e:	ba ac 21 02 c0       	mov    edx,0xc00221ac
c0012663:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012667:	89 10                	mov    DWORD PTR [eax],edx
c0012669:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001266d:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0012674:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012678:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001267f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012683:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c001268d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012691:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012695:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012699:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001269f:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00126a5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00126a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00126ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00126b0:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00126b6:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00126bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126c0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00126c4:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00126ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126ce:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00126d8:	90                   	nop
c00126d9:	83 c4 1c             	add    esp,0x1c
c00126dc:	c3                   	ret    
c00126dd:	90                   	nop

c00126de <LogicalDisk::assignDriveLetter()>:
c00126de:	55                   	push   ebp
c00126df:	57                   	push   edi
c00126e0:	56                   	push   esi
c00126e1:	53                   	push   ebx
c00126e2:	83 ec 14             	sub    esp,0x14
c00126e5:	8b 3d 80 4d 02 c0    	mov    edi,DWORD PTR ds:0xc0024d80
c00126eb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00126ef:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00126f3:	8b 3d 84 4d 02 c0    	mov    edi,DWORD PTR ds:0xc0024d84
c00126f9:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00126ff:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0012703:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c0012709:	3c 01                	cmp    al,0x1
c001270b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001270f:	19 c0                	sbb    eax,eax
c0012711:	83 e0 02             	and    eax,0x2
c0012714:	83 c0 41             	add    eax,0x41
c0012717:	0f be e8             	movsx  ebp,al
c001271a:	3c 43                	cmp    al,0x43
c001271c:	75 10                	jne    c001272e <LogicalDisk::assignDriveLetter()+0x50>
c001271e:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0012725:	75 5d                	jne    c0012784 <LogicalDisk::assignDriveLetter()+0xa6>
c0012727:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001272c:	75 56                	jne    c0012784 <LogicalDisk::assignDriveLetter()+0xa6>
c001272e:	8d 75 bf             	lea    esi,[ebp-0x41]
c0012731:	ba 01 00 00 00       	mov    edx,0x1
c0012736:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001273a:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001273e:	d3 e2                	shl    edx,cl
c0012740:	89 d7                	mov    edi,edx
c0012742:	89 d6                	mov    esi,edx
c0012744:	c1 ff 1f             	sar    edi,0x1f
c0012747:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001274b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001274f:	21 f9                	and    ecx,edi
c0012751:	09 d1                	or     ecx,edx
c0012753:	75 2f                	jne    c0012784 <LogicalDisk::assignDriveLetter()+0xa6>
c0012755:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012759:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001275d:	09 f2                	or     edx,esi
c001275f:	89 15 80 4d 02 c0    	mov    DWORD PTR ds:0xc0024d80,edx
c0012765:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012769:	09 fa                	or     edx,edi
c001276b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c001276f:	89 15 84 4d 02 c0    	mov    DWORD PTR ds:0xc0024d84,edx
c0012775:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001277b:	89 1c bd a0 4d 02 c0 	mov    DWORD PTR [edi*4-0x3ffdb260],ebx
c0012782:	eb 08                	jmp    c001278c <LogicalDisk::assignDriveLetter()+0xae>
c0012784:	40                   	inc    eax
c0012785:	45                   	inc    ebp
c0012786:	3c 5b                	cmp    al,0x5b
c0012788:	75 90                	jne    c001271a <LogicalDisk::assignDriveLetter()+0x3c>
c001278a:	31 c0                	xor    eax,eax
c001278c:	83 c4 14             	add    esp,0x14
c001278f:	5b                   	pop    ebx
c0012790:	5e                   	pop    esi
c0012791:	5f                   	pop    edi
c0012792:	5d                   	pop    ebp
c0012793:	c3                   	ret    

c0012794 <LogicalDisk::mount()>:
c0012794:	56                   	push   esi
c0012795:	53                   	push   ebx
c0012796:	51                   	push   ecx
c0012797:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001279b:	8b 1d 08 49 02 c0    	mov    ebx,DWORD PTR ds:0xc0024908
c00127a1:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00127ab:	85 db                	test   ebx,ebx
c00127ad:	74 50                	je     c00127ff <LogicalDisk::mount()+0x6b>
c00127af:	e8 80 62 00 00       	call   c0018a34 <getIRQNestingLevel()>
c00127b4:	52                   	push   edx
c00127b5:	52                   	push   edx
c00127b6:	50                   	push   eax
c00127b7:	68 4c 21 02 c0       	push   0xc002214c
c00127bc:	e8 50 ca ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c00127c1:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00127c8:	83 c4 0c             	add    esp,0xc
c00127cb:	83 e8 41             	sub    eax,0x41
c00127ce:	8b 13                	mov    edx,DWORD PTR [ebx]
c00127d0:	50                   	push   eax
c00127d1:	56                   	push   esi
c00127d2:	53                   	push   ebx
c00127d3:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00127d6:	83 c4 10             	add    esp,0x10
c00127d9:	84 c0                	test   al,al
c00127db:	74 08                	je     c00127e5 <LogicalDisk::mount()+0x51>
c00127dd:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00127e3:	eb 1c                	jmp    c0012801 <LogicalDisk::mount()+0x6d>
c00127e5:	e8 4a 62 00 00       	call   c0018a34 <getIRQNestingLevel()>
c00127ea:	51                   	push   ecx
c00127eb:	51                   	push   ecx
c00127ec:	50                   	push   eax
c00127ed:	68 67 21 02 c0       	push   0xc0022167
c00127f2:	e8 1a ca ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c00127f7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00127fa:	83 c4 10             	add    esp,0x10
c00127fd:	eb ac                	jmp    c00127ab <LogicalDisk::mount()+0x17>
c00127ff:	31 c0                	xor    eax,eax
c0012801:	5a                   	pop    edx
c0012802:	5b                   	pop    ebx
c0012803:	5e                   	pop    esi
c0012804:	c3                   	ret    
c0012805:	90                   	nop

c0012806 <LogicalDisk::unmount()>:
c0012806:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001280a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0012814:	c3                   	ret    
c0012815:	90                   	nop

c0012816 <LogicalDisk::unassignDriveLetter()>:
c0012816:	57                   	push   edi
c0012817:	56                   	push   esi
c0012818:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001281c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0012823:	84 c9                	test   cl,cl
c0012825:	75 0f                	jne    c0012836 <LogicalDisk::unassignDriveLetter()+0x20>
c0012827:	c7 44 24 0c 82 21 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022182
c001282f:	5e                   	pop    esi
c0012830:	5f                   	pop    edi
c0012831:	e9 0a 32 00 00       	jmp    c0015a40 <Krnl::panic(char const*)>
c0012836:	83 e9 41             	sub    ecx,0x41
c0012839:	b8 01 00 00 00       	mov    eax,0x1
c001283e:	d3 e0                	shl    eax,cl
c0012840:	89 c7                	mov    edi,eax
c0012842:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0012849:	c1 ff 1f             	sar    edi,0x1f
c001284c:	c7 04 8d a0 4d 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdb260],0x0
c0012857:	89 fe                	mov    esi,edi
c0012859:	f7 d6                	not    esi
c001285b:	f7 d0                	not    eax
c001285d:	21 35 84 4d 02 c0    	and    DWORD PTR ds:0xc0024d84,esi
c0012863:	5e                   	pop    esi
c0012864:	21 05 80 4d 02 c0    	and    DWORD PTR ds:0xc0024d80,eax
c001286a:	5f                   	pop    edi
c001286b:	c3                   	ret    

c001286c <LogicalDisk::read(unsigned long long, int, void*)>:
c001286c:	57                   	push   edi
c001286d:	56                   	push   esi
c001286e:	53                   	push   ebx
c001286f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012873:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012877:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001287b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001287f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0012885:	77 41                	ja     c00128c8 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0012887:	99                   	cdq    
c0012888:	01 c8                	add    eax,ecx
c001288a:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c0012890:	11 da                	adc    edx,ebx
c0012892:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0012898:	19 d7                	sbb    edi,edx
c001289a:	72 33                	jb     c00128cf <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001289c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00128a2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00128a8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00128ac:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00128b0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00128b6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00128bc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00128c0:	5b                   	pop    ebx
c00128c1:	5e                   	pop    esi
c00128c2:	5f                   	pop    edi
c00128c3:	e9 9a 09 00 00       	jmp    c0013262 <VCache::read(unsigned long long, int, void*)>
c00128c8:	b8 05 00 00 00       	mov    eax,0x5
c00128cd:	eb 05                	jmp    c00128d4 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00128cf:	b8 07 00 00 00       	mov    eax,0x7
c00128d4:	5b                   	pop    ebx
c00128d5:	5e                   	pop    esi
c00128d6:	5f                   	pop    edi
c00128d7:	c3                   	ret    

c00128d8 <LogicalDisk::write(unsigned long long, int, void*)>:
c00128d8:	57                   	push   edi
c00128d9:	56                   	push   esi
c00128da:	53                   	push   ebx
c00128db:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00128df:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00128e3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00128e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00128eb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00128f1:	77 41                	ja     c0012934 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00128f3:	99                   	cdq    
c00128f4:	01 c8                	add    eax,ecx
c00128f6:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00128fc:	11 da                	adc    edx,ebx
c00128fe:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0012904:	19 d7                	sbb    edi,edx
c0012906:	72 33                	jb     c001293b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c0012908:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c001290e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0012914:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012918:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001291c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0012922:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012928:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001292c:	5b                   	pop    ebx
c001292d:	5e                   	pop    esi
c001292e:	5f                   	pop    edi
c001292f:	e9 4a 08 00 00       	jmp    c001317e <VCache::write(unsigned long long, int, void*)>
c0012934:	b8 05 00 00 00       	mov    eax,0x5
c0012939:	eb 05                	jmp    c0012940 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001293b:	b8 07 00 00 00       	mov    eax,0x7
c0012940:	5b                   	pop    ebx
c0012941:	5e                   	pop    esi
c0012942:	5f                   	pop    edi
c0012943:	c3                   	ret    

c0012944 <Mouse::Mouse(char const*)>:
c0012944:	83 ec 0c             	sub    esp,0xc
c0012947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001294b:	83 ec 08             	sub    esp,0x8
c001294e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012952:	50                   	push   eax
c0012953:	e8 be de ff ff       	call   c0010816 <Device::Device(char const*)>
c0012958:	83 c4 10             	add    esp,0x10
c001295b:	ba d8 21 02 c0       	mov    edx,0xc00221d8
c0012960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012964:	89 10                	mov    DWORD PTR [eax],edx
c0012966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001296a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0012974:	90                   	nop
c0012975:	83 c4 0c             	add    esp,0xc
c0012978:	c3                   	ret    
c0012979:	90                   	nop

c001297a <Mouse::~Mouse()>:
c001297a:	83 ec 0c             	sub    esp,0xc
c001297d:	ba d8 21 02 c0       	mov    edx,0xc00221d8
c0012982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012986:	89 10                	mov    DWORD PTR [eax],edx
c0012988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001298c:	83 ec 0c             	sub    esp,0xc
c001298f:	50                   	push   eax
c0012990:	e8 37 db ff ff       	call   c00104cc <Device::~Device()>
c0012995:	83 c4 10             	add    esp,0x10
c0012998:	90                   	nop
c0012999:	83 c4 0c             	add    esp,0xc
c001299c:	c3                   	ret    
c001299d:	90                   	nop

c001299e <Mouse::~Mouse()>:
c001299e:	83 ec 0c             	sub    esp,0xc
c00129a1:	83 ec 0c             	sub    esp,0xc
c00129a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129a8:	e8 cd ff ff ff       	call   c001297a <Mouse::~Mouse()>
c00129ad:	83 c4 10             	add    esp,0x10
c00129b0:	83 ec 08             	sub    esp,0x8
c00129b3:	68 58 01 00 00       	push   0x158
c00129b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00129bc:	e8 2a c7 ff ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c00129c1:	83 c4 10             	add    esp,0x10
c00129c4:	83 c4 0c             	add    esp,0xc
c00129c7:	c3                   	ret    

c00129c8 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00129c8:	55                   	push   ebp
c00129c9:	57                   	push   edi
c00129ca:	56                   	push   esi
c00129cb:	53                   	push   ebx
c00129cc:	81 ec 28 01 00 00    	sub    esp,0x128
c00129d2:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00129d9:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00129e0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00129e7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00129ee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00129f2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00129f6:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00129fd:	e8 06 df ff ff       	call   c0010908 <Device::getName()>
c0012a02:	5a                   	pop    edx
c0012a03:	59                   	pop    ecx
c0012a04:	50                   	push   eax
c0012a05:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012a09:	55                   	push   ebp
c0012a0a:	e8 51 dd fe ff       	call   c0000760 <strcpy>
c0012a0f:	5b                   	pop    ebx
c0012a10:	58                   	pop    eax
c0012a11:	68 fc 21 02 c0       	push   0xc00221fc
c0012a16:	55                   	push   ebp
c0012a17:	e8 fb dd fe ff       	call   c0000817 <strcat>
c0012a1c:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0012a23:	e8 b4 c6 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0012a28:	83 c4 0c             	add    esp,0xc
c0012a2b:	89 c3                	mov    ebx,eax
c0012a2d:	57                   	push   edi
c0012a2e:	56                   	push   esi
c0012a2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a33:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a37:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0012a3e:	55                   	push   ebp
c0012a3f:	50                   	push   eax
c0012a40:	e8 e3 fb ff ff       	call   c0012628 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0012a45:	83 c4 14             	add    esp,0x14
c0012a48:	53                   	push   ebx
c0012a49:	e8 90 fc ff ff       	call   c00126de <LogicalDisk::assignDriveLetter()>
c0012a4e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a51:	e8 3e fd ff ff       	call   c0012794 <LogicalDisk::mount()>
c0012a56:	58                   	pop    eax
c0012a57:	5a                   	pop    edx
c0012a58:	53                   	push   ebx
c0012a59:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0012a60:	e8 c1 db ff ff       	call   c0010626 <Device::addChild(Device*)>
c0012a65:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012a6b:	5b                   	pop    ebx
c0012a6c:	5e                   	pop    esi
c0012a6d:	5f                   	pop    edi
c0012a6e:	5d                   	pop    ebp
c0012a6f:	c3                   	ret    

c0012a70 <createPartitionsForDisk(PhysicalDisk*)>:
c0012a70:	55                   	push   ebp
c0012a71:	57                   	push   edi
c0012a72:	56                   	push   esi
c0012a73:	53                   	push   ebx
c0012a74:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0012a7a:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0012a81:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0012a87:	3d 00 02 00 00       	cmp    eax,0x200
c0012a8c:	74 27                	je     c0012ab5 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0012a8e:	83 ec 10             	sub    esp,0x10
c0012a91:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0012a97:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0012a9d:	99                   	cdq    
c0012a9e:	52                   	push   edx
c0012a9f:	0f a4 f7 0a          	shld   edi,esi,0xa
c0012aa3:	50                   	push   eax
c0012aa4:	89 fd                	mov    ebp,edi
c0012aa6:	c1 e6 0a             	shl    esi,0xa
c0012aa9:	55                   	push   ebp
c0012aaa:	56                   	push   esi
c0012aab:	e8 5c ca 00 00       	call   c001f50c <__udivdi3>
c0012ab0:	e9 b1 00 00 00       	jmp    c0012b66 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012ab5:	83 ec 0c             	sub    esp,0xc
c0012ab8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012aba:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0012abe:	56                   	push   esi
c0012abf:	6a 01                	push   0x1
c0012ac1:	6a 00                	push   0x0
c0012ac3:	6a 00                	push   0x0
c0012ac5:	53                   	push   ebx
c0012ac6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0012ac9:	83 c4 20             	add    esp,0x20
c0012acc:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0012ad4:	75 0a                	jne    c0012ae0 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0012ad6:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0012ade:	74 2c                	je     c0012b0c <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0012ae0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012ae6:	83 ec 10             	sub    esp,0x10
c0012ae9:	89 f7                	mov    edi,esi
c0012aeb:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012af1:	c1 ff 1f             	sar    edi,0x1f
c0012af4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012afa:	57                   	push   edi
c0012afb:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012aff:	c1 e0 0a             	shl    eax,0xa
c0012b02:	56                   	push   esi
c0012b03:	52                   	push   edx
c0012b04:	50                   	push   eax
c0012b05:	e8 02 ca 00 00       	call   c001f50c <__udivdi3>
c0012b0a:	eb 5a                	jmp    c0012b66 <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0012b0c:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0012b13:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0012b1a:	83 e0 7f             	and    eax,0x7f
c0012b1d:	83 e1 7f             	and    ecx,0x7f
c0012b20:	01 c1                	add    ecx,eax
c0012b22:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0012b29:	83 e0 7f             	and    eax,0x7f
c0012b2c:	01 c1                	add    ecx,eax
c0012b2e:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0012b35:	83 e0 7f             	and    eax,0x7f
c0012b38:	00 c1                	add    cl,al
c0012b3a:	74 41                	je     c0012b7d <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0012b3c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012b42:	83 ec 10             	sub    esp,0x10
c0012b45:	89 f7                	mov    edi,esi
c0012b47:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012b4d:	c1 ff 1f             	sar    edi,0x1f
c0012b50:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012b56:	57                   	push   edi
c0012b57:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012b5b:	c1 e0 0a             	shl    eax,0xa
c0012b5e:	56                   	push   esi
c0012b5f:	52                   	push   edx
c0012b60:	50                   	push   eax
c0012b61:	e8 a6 c9 00 00       	call   c001f50c <__udivdi3>
c0012b66:	83 c4 14             	add    esp,0x14
c0012b69:	52                   	push   edx
c0012b6a:	50                   	push   eax
c0012b6b:	6a 00                	push   0x0
c0012b6d:	6a 00                	push   0x0
c0012b6f:	53                   	push   ebx
c0012b70:	e8 53 fe ff ff       	call   c00129c8 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012b75:	83 c4 20             	add    esp,0x20
c0012b78:	e9 79 01 00 00       	jmp    c0012cf6 <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0012b7d:	89 f0                	mov    eax,esi
c0012b7f:	31 f6                	xor    esi,esi
c0012b81:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0012b88:	75 02                	jne    c0012b8c <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0012b8a:	89 f1                	mov    ecx,esi
c0012b8c:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0012b93:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0012b9a:	c1 e2 08             	shl    edx,0x8
c0012b9d:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0012ba5:	c1 e7 10             	shl    edi,0x10
c0012ba8:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0012bb0:	09 fa                	or     edx,edi
c0012bb2:	83 c0 10             	add    eax,0x10
c0012bb5:	0f b6 b8 b6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b6]
c0012bbc:	09 fa                	or     edx,edi
c0012bbe:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0012bc5:	c1 e7 18             	shl    edi,0x18
c0012bc8:	09 fa                	or     edx,edi
c0012bca:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0012bce:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0012bd5:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0012bdc:	c1 e7 10             	shl    edi,0x10
c0012bdf:	c1 e2 08             	shl    edx,0x8
c0012be2:	09 fa                	or     edx,edi
c0012be4:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0012beb:	09 fa                	or     edx,edi
c0012bed:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0012bf4:	c1 e7 18             	shl    edi,0x18
c0012bf7:	09 fa                	or     edx,edi
c0012bf9:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0012bfd:	46                   	inc    esi
c0012bfe:	83 fe 04             	cmp    esi,0x4
c0012c01:	0f 85 7a ff ff ff    	jne    c0012b81 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0012c07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c0b:	83 f0 01             	xor    eax,0x1
c0012c0e:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0012c12:	75 57                	jne    c0012c6b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012c14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c18:	83 f0 01             	xor    eax,0x1
c0012c1b:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0012c1f:	75 4a                	jne    c0012c6b <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0012c21:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0012c27:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0012c2b:	89 f7                	mov    edi,esi
c0012c2d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012c35:	c1 ff 1f             	sar    edi,0x1f
c0012c38:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012c40:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0012c46:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0012c4c:	57                   	push   edi
c0012c4d:	56                   	push   esi
c0012c4e:	0f a4 c2 0a          	shld   edx,eax,0xa
c0012c52:	c1 e0 0a             	shl    eax,0xa
c0012c55:	52                   	push   edx
c0012c56:	50                   	push   eax
c0012c57:	e8 b0 c8 00 00       	call   c001f50c <__udivdi3>
c0012c5c:	83 c4 10             	add    esp,0x10
c0012c5f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012c63:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012c67:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0012c6b:	84 c9                	test   cl,cl
c0012c6d:	74 53                	je     c0012cc2 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0012c6f:	0f b6 c9             	movzx  ecx,cl
c0012c72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012c76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012c7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012c7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012c82:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0012c86:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0012c8a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0012c8e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0012c92:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012c96:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012c9a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012c9e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0012ca2:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0012ca6:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0012caa:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0012cae:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0012cb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012cb6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012cba:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0012cbe:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0012cc2:	31 ed                	xor    ebp,ebp
c0012cc4:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0012cc8:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0012ccc:	89 f8                	mov    eax,edi
c0012cce:	09 f0                	or     eax,esi
c0012cd0:	74 1e                	je     c0012cf0 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012cd2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0012cd6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0012cda:	89 d1                	mov    ecx,edx
c0012cdc:	09 c1                	or     ecx,eax
c0012cde:	74 10                	je     c0012cf0 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0012ce0:	83 ec 0c             	sub    esp,0xc
c0012ce3:	57                   	push   edi
c0012ce4:	56                   	push   esi
c0012ce5:	52                   	push   edx
c0012ce6:	50                   	push   eax
c0012ce7:	53                   	push   ebx
c0012ce8:	e8 db fc ff ff       	call   c00129c8 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0012ced:	83 c4 20             	add    esp,0x20
c0012cf0:	45                   	inc    ebp
c0012cf1:	83 fd 04             	cmp    ebp,0x4
c0012cf4:	75 ce                	jne    c0012cc4 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0012cf6:	81 c4 5c 02 00 00    	add    esp,0x25c
c0012cfc:	5b                   	pop    ebx
c0012cfd:	5e                   	pop    esi
c0012cfe:	5f                   	pop    edi
c0012cff:	5d                   	pop    ebp
c0012d00:	c3                   	ret    
c0012d01:	90                   	nop

c0012d02 <Timer::Timer(char const*)>:
c0012d02:	83 ec 0c             	sub    esp,0xc
c0012d05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d09:	83 ec 08             	sub    esp,0x8
c0012d0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d10:	50                   	push   eax
c0012d11:	e8 00 db ff ff       	call   c0010816 <Device::Device(char const*)>
c0012d16:	83 c4 10             	add    esp,0x10
c0012d19:	ba 10 22 02 c0       	mov    edx,0xc0022210
c0012d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d22:	89 10                	mov    DWORD PTR [eax],edx
c0012d24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d28:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0012d32:	90                   	nop
c0012d33:	83 c4 0c             	add    esp,0xc
c0012d36:	c3                   	ret    
c0012d37:	90                   	nop

c0012d38 <Timer::~Timer()>:
c0012d38:	83 ec 0c             	sub    esp,0xc
c0012d3b:	ba 10 22 02 c0       	mov    edx,0xc0022210
c0012d40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d44:	89 10                	mov    DWORD PTR [eax],edx
c0012d46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012d4a:	83 ec 0c             	sub    esp,0xc
c0012d4d:	50                   	push   eax
c0012d4e:	e8 79 d7 ff ff       	call   c00104cc <Device::~Device()>
c0012d53:	83 c4 10             	add    esp,0x10
c0012d56:	90                   	nop
c0012d57:	83 c4 0c             	add    esp,0xc
c0012d5a:	c3                   	ret    
c0012d5b:	90                   	nop

c0012d5c <Timer::~Timer()>:
c0012d5c:	83 ec 0c             	sub    esp,0xc
c0012d5f:	83 ec 0c             	sub    esp,0xc
c0012d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d66:	e8 cd ff ff ff       	call   c0012d38 <Timer::~Timer()>
c0012d6b:	83 c4 10             	add    esp,0x10
c0012d6e:	83 ec 08             	sub    esp,0x8
c0012d71:	68 5c 01 00 00       	push   0x15c
c0012d76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d7a:	e8 6c c3 ff ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c0012d7f:	83 c4 10             	add    esp,0x10
c0012d82:	83 c4 0c             	add    esp,0xc
c0012d85:	c3                   	ret    

c0012d86 <Timer::read()>:
c0012d86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d8a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0012d90:	c3                   	ret    

c0012d91 <timerHandler(unsigned long long)>:
c0012d91:	55                   	push   ebp
c0012d92:	57                   	push   edi
c0012d93:	56                   	push   esi
c0012d94:	53                   	push   ebx
c0012d95:	83 ec 0c             	sub    esp,0xc
c0012d98:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012d9c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012da0:	01 35 10 4e 02 c0    	add    DWORD PTR ds:0xc0024e10,esi
c0012da6:	11 3d 14 4e 02 c0    	adc    DWORD PTR ds:0xc0024e14,edi
c0012dac:	80 3d ad 47 02 c0 00 	cmp    BYTE PTR ds:0xc00247ad,0x0
c0012db3:	0f 84 07 01 00 00    	je     c0012ec0 <timerHandler(unsigned long long)+0x12f>
c0012db9:	e8 b2 5c 00 00       	call   c0018a70 <lockStuff()>
c0012dbe:	83 ec 0c             	sub    esp,0xc
c0012dc1:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012dc6:	e8 15 ce 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012dcb:	c7 04 24 dc 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bdc
c0012dd2:	89 c3                	mov    ebx,eax
c0012dd4:	e8 0f ce 00 00       	call   c001fbe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012dd9:	83 c4 10             	add    esp,0x10
c0012ddc:	84 c0                	test   al,al
c0012dde:	74 60                	je     c0012e40 <timerHandler(unsigned long long)+0xaf>
c0012de0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0012de6:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0012de9:	85 c0                	test   eax,eax
c0012deb:	0f 85 91 00 00 00    	jne    c0012e82 <timerHandler(unsigned long long)+0xf1>
c0012df1:	e9 be 00 00 00       	jmp    c0012eb4 <timerHandler(unsigned long long)+0x123>
c0012df6:	83 ec 0c             	sub    esp,0xc
c0012df9:	55                   	push   ebp
c0012dfa:	e8 6e 62 00 00       	call   c001906d <unblockTask(ThreadControlBlock*)>
c0012dff:	83 c4 10             	add    esp,0x10
c0012e02:	39 eb                	cmp    ebx,ebp
c0012e04:	75 12                	jne    c0012e18 <timerHandler(unsigned long long)+0x87>
c0012e06:	83 ec 0c             	sub    esp,0xc
c0012e09:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e0e:	e8 cd cd 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e13:	89 c3                	mov    ebx,eax
c0012e15:	83 c4 10             	add    esp,0x10
c0012e18:	83 ec 0c             	sub    esp,0xc
c0012e1b:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e20:	e8 c3 cd 00 00       	call   c001fbe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0012e25:	83 c4 10             	add    esp,0x10
c0012e28:	84 c0                	test   al,al
c0012e2a:	75 b4                	jne    c0012de0 <timerHandler(unsigned long long)+0x4f>
c0012e2c:	83 ec 0c             	sub    esp,0xc
c0012e2f:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e34:	e8 a7 cd 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e39:	83 c4 10             	add    esp,0x10
c0012e3c:	39 d8                	cmp    eax,ebx
c0012e3e:	74 a0                	je     c0012de0 <timerHandler(unsigned long long)+0x4f>
c0012e40:	83 ec 0c             	sub    esp,0xc
c0012e43:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e48:	e8 93 cd 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0012e4d:	89 c5                	mov    ebp,eax
c0012e4f:	c7 04 24 dc 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bdc
c0012e56:	e8 a9 cd 00 00       	call   c001fc04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0012e5b:	83 c4 10             	add    esp,0x10
c0012e5e:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0012e61:	a1 14 4e 02 c0       	mov    eax,ds:0xc0024e14
c0012e66:	39 15 10 4e 02 c0    	cmp    DWORD PTR ds:0xc0024e10,edx
c0012e6c:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0012e6f:	19 c8                	sbb    eax,ecx
c0012e71:	73 83                	jae    c0012df6 <timerHandler(unsigned long long)+0x65>
c0012e73:	50                   	push   eax
c0012e74:	50                   	push   eax
c0012e75:	55                   	push   ebp
c0012e76:	68 dc 5b 02 c0       	push   0xc0025bdc
c0012e7b:	e8 32 ce 00 00       	call   c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0012e80:	eb 93                	jmp    c0012e15 <timerHandler(unsigned long long)+0x84>
c0012e82:	80 3d ac 47 02 c0 00 	cmp    BYTE PTR ds:0xc00247ac,0x0
c0012e89:	74 29                	je     c0012eb4 <timerHandler(unsigned long long)+0x123>
c0012e8b:	39 c6                	cmp    esi,eax
c0012e8d:	bb 00 00 00 00       	mov    ebx,0x0
c0012e92:	19 df                	sbb    edi,ebx
c0012e94:	72 19                	jb     c0012eaf <timerHandler(unsigned long long)+0x11e>
c0012e96:	e8 ae 5b 00 00       	call   c0018a49 <lockScheduler()>
c0012e9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ea0:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0012ea3:	e8 ea 5e 00 00       	call   c0018d92 <schedule()>
c0012ea8:	e8 9e 5b 00 00       	call   c0018a4b <unlockScheduler()>
c0012ead:	eb 05                	jmp    c0012eb4 <timerHandler(unsigned long long)+0x123>
c0012eaf:	29 f0                	sub    eax,esi
c0012eb1:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0012eb4:	83 c4 0c             	add    esp,0xc
c0012eb7:	5b                   	pop    ebx
c0012eb8:	5e                   	pop    esi
c0012eb9:	5f                   	pop    edi
c0012eba:	5d                   	pop    ebp
c0012ebb:	e9 57 5f 00 00       	jmp    c0018e17 <unlockStuff()>
c0012ec0:	83 c4 0c             	add    esp,0xc
c0012ec3:	5b                   	pop    ebx
c0012ec4:	5e                   	pop    esi
c0012ec5:	5f                   	pop    edi
c0012ec6:	5d                   	pop    ebp
c0012ec7:	c3                   	ret    

c0012ec8 <setupTimer(int)>:
c0012ec8:	57                   	push   edi
c0012ec9:	56                   	push   esi
c0012eca:	53                   	push   ebx
c0012ecb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012ecf:	e8 fd 19 00 00       	call   c00148d1 <getCPUNumber()>
c0012ed4:	85 c0                	test   eax,eax
c0012ed6:	74 32                	je     c0012f0a <setupTimer(int)+0x42>
c0012ed8:	83 ec 0c             	sub    esp,0xc
c0012edb:	68 60 01 00 00       	push   0x160
c0012ee0:	e8 f7 c1 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0012ee5:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ee8:	89 c3                	mov    ebx,eax
c0012eea:	e8 a7 c0 00 00       	call   c001ef96 <APICTimer::APICTimer()>
c0012eef:	6a 00                	push   0x0
c0012ef1:	6a 00                	push   0x0
c0012ef3:	56                   	push   esi
c0012ef4:	53                   	push   ebx
c0012ef5:	e8 96 bf 00 00       	call   c001ee90 <APICTimer::open(int, int, void*)>
c0012efa:	83 c4 20             	add    esp,0x20
c0012efd:	e8 d2 19 00 00       	call   c00148d4 <thisCPU()>
c0012f02:	56                   	push   esi
c0012f03:	56                   	push   esi
c0012f04:	53                   	push   ebx
c0012f05:	e9 96 00 00 00       	jmp    c0012fa0 <setupTimer(int)+0xd8>
c0012f0a:	e8 c5 19 00 00       	call   c00148d4 <thisCPU()>
c0012f0f:	83 ec 0c             	sub    esp,0xc
c0012f12:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012f18:	e8 eb d9 ff ff       	call   c0010908 <Device::getName()>
c0012f1d:	83 c4 10             	add    esp,0x10
c0012f20:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0012f23:	0f 85 87 00 00 00    	jne    c0012fb0 <setupTimer(int)+0xe8>
c0012f29:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0012f2e:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0012f35:	74 79                	je     c0012fb0 <setupTimer(int)+0xe8>
c0012f37:	83 ec 0c             	sub    esp,0xc
c0012f3a:	68 5c 01 00 00       	push   0x15c
c0012f3f:	e8 98 c1 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0012f44:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f47:	89 c3                	mov    ebx,eax
c0012f49:	e8 a4 c1 00 00       	call   c001f0f2 <PIT::PIT()>
c0012f4e:	59                   	pop    ecx
c0012f4f:	5f                   	pop    edi
c0012f50:	53                   	push   ebx
c0012f51:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c0012f57:	e8 ca d6 ff ff       	call   c0010626 <Device::addChild(Device*)>
c0012f5c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f5e:	6a 00                	push   0x0
c0012f60:	6a 00                	push   0x0
c0012f62:	56                   	push   esi
c0012f63:	53                   	push   ebx
c0012f64:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012f67:	83 c4 14             	add    esp,0x14
c0012f6a:	68 60 01 00 00       	push   0x160
c0012f6f:	e8 68 c1 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0012f74:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f77:	89 c7                	mov    edi,eax
c0012f79:	e8 18 c0 00 00       	call   c001ef96 <APICTimer::APICTimer()>
c0012f7e:	6a 00                	push   0x0
c0012f80:	6a 00                	push   0x0
c0012f82:	56                   	push   esi
c0012f83:	57                   	push   edi
c0012f84:	e8 07 bf 00 00       	call   c001ee90 <APICTimer::open(int, int, void*)>
c0012f89:	83 c4 20             	add    esp,0x20
c0012f8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012f8e:	6a 00                	push   0x0
c0012f90:	6a 00                	push   0x0
c0012f92:	6a 00                	push   0x0
c0012f94:	53                   	push   ebx
c0012f95:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012f98:	e8 37 19 00 00       	call   c00148d4 <thisCPU()>
c0012f9d:	5a                   	pop    edx
c0012f9e:	59                   	pop    ecx
c0012f9f:	57                   	push   edi
c0012fa0:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0012fa6:	e8 7b d6 ff ff       	call   c0010626 <Device::addChild(Device*)>
c0012fab:	83 c4 10             	add    esp,0x10
c0012fae:	eb 33                	jmp    c0012fe3 <setupTimer(int)+0x11b>
c0012fb0:	83 ec 0c             	sub    esp,0xc
c0012fb3:	68 5c 01 00 00       	push   0x15c
c0012fb8:	e8 1f c1 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0012fbd:	89 04 24             	mov    DWORD PTR [esp],eax
c0012fc0:	89 c3                	mov    ebx,eax
c0012fc2:	e8 2b c1 00 00       	call   c001f0f2 <PIT::PIT()>
c0012fc7:	58                   	pop    eax
c0012fc8:	5a                   	pop    edx
c0012fc9:	53                   	push   ebx
c0012fca:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c0012fd0:	e8 51 d6 ff ff       	call   c0010626 <Device::addChild(Device*)>
c0012fd5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012fd7:	6a 00                	push   0x0
c0012fd9:	6a 00                	push   0x0
c0012fdb:	56                   	push   esi
c0012fdc:	53                   	push   ebx
c0012fdd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012fe0:	83 c4 20             	add    esp,0x20
c0012fe3:	89 d8                	mov    eax,ebx
c0012fe5:	5b                   	pop    ebx
c0012fe6:	5e                   	pop    esi
c0012fe7:	5f                   	pop    edi
c0012fe8:	c3                   	ret    
c0012fe9:	90                   	nop

c0012fea <VCache::VCache(PhysicalDisk*)>:
c0012fea:	53                   	push   ebx
c0012feb:	83 ec 08             	sub    esp,0x8
c0012fee:	ba 40 22 02 c0       	mov    edx,0xc0022240
c0012ff3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ff7:	89 10                	mov    DWORD PTR [eax],edx
c0012ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012ffd:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0013004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013008:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c001300f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013013:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001301a:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013021:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013025:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001302c:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013033:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013037:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001303e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013042:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0013046:	83 ec 0c             	sub    esp,0xc
c0013049:	6a 10                	push   0x10
c001304b:	e8 8c c0 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0013050:	83 c4 10             	add    esp,0x10
c0013053:	89 c3                	mov    ebx,eax
c0013055:	83 ec 0c             	sub    esp,0xc
c0013058:	53                   	push   ebx
c0013059:	e8 0e 5b 00 00       	call   c0018b6c <Mutex::Mutex()>
c001305e:	83 c4 10             	add    esp,0x10
c0013061:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013065:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0013068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001306c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013070:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0013073:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013077:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c001307e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013082:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0013088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001308c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001308f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013093:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0013099:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001309f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00130a3:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00130a6:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00130a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ad:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c00130b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00130b5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00130bb:	c1 e0 06             	shl    eax,0x6
c00130be:	83 ec 0c             	sub    esp,0xc
c00130c1:	50                   	push   eax
c00130c2:	e8 18 8f ff ff       	call   c000bfdf <malloc>
c00130c7:	83 c4 10             	add    esp,0x10
c00130ca:	89 c2                	mov    edx,eax
c00130cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130d0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00130d3:	90                   	nop
c00130d4:	83 c4 08             	add    esp,0x8
c00130d7:	5b                   	pop    ebx
c00130d8:	c3                   	ret    
c00130d9:	90                   	nop

c00130da <VCache::writeWriteBuffer()>:
c00130da:	53                   	push   ebx
c00130db:	83 ec 14             	sub    esp,0x14
c00130de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00130e2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00130e5:	8b 10                	mov    edx,DWORD PTR [eax]
c00130e7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00130ea:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00130ed:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00130f0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00130f3:	50                   	push   eax
c00130f4:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00130f7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00130fe:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0013105:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0013109:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0013110:	83 c4 28             	add    esp,0x28
c0013113:	5b                   	pop    ebx
c0013114:	c3                   	ret    
c0013115:	90                   	nop

c0013116 <VCache::~VCache()>:
c0013116:	83 ec 0c             	sub    esp,0xc
c0013119:	ba 40 22 02 c0       	mov    edx,0xc0022240
c001311e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013122:	89 10                	mov    DWORD PTR [eax],edx
c0013124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013128:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c001312b:	84 c0                	test   al,al
c001312d:	74 0f                	je     c001313e <VCache::~VCache()+0x28>
c001312f:	83 ec 0c             	sub    esp,0xc
c0013132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013136:	e8 9f ff ff ff       	call   c00130da <VCache::writeWriteBuffer()>
c001313b:	83 c4 10             	add    esp,0x10
c001313e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013142:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013145:	83 ec 0c             	sub    esp,0xc
c0013148:	50                   	push   eax
c0013149:	e8 a1 8e ff ff       	call   c000bfef <free>
c001314e:	83 c4 10             	add    esp,0x10
c0013151:	90                   	nop
c0013152:	83 c4 0c             	add    esp,0xc
c0013155:	c3                   	ret    

c0013156 <VCache::~VCache()>:
c0013156:	83 ec 0c             	sub    esp,0xc
c0013159:	83 ec 0c             	sub    esp,0xc
c001315c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013160:	e8 b1 ff ff ff       	call   c0013116 <VCache::~VCache()>
c0013165:	83 c4 10             	add    esp,0x10
c0013168:	83 ec 08             	sub    esp,0x8
c001316b:	6a 30                	push   0x30
c001316d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013171:	e8 75 bf ff ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c0013176:	83 c4 10             	add    esp,0x10
c0013179:	83 c4 0c             	add    esp,0xc
c001317c:	c3                   	ret    
c001317d:	90                   	nop

c001317e <VCache::write(unsigned long long, int, void*)>:
c001317e:	55                   	push   ebp
c001317f:	57                   	push   edi
c0013180:	56                   	push   esi
c0013181:	53                   	push   ebx
c0013182:	83 ec 28             	sub    esp,0x28
c0013185:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013189:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001318d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0013191:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0013195:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013198:	e8 3d 5e 00 00       	call   c0018fda <Semaphore::acquire()>
c001319d:	83 c4 10             	add    esp,0x10
c00131a0:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c00131a4:	74 66                	je     c001320c <VCache::write(unsigned long long, int, void*)+0x8e>
c00131a6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00131a9:	99                   	cdq    
c00131aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00131ae:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c00131b1:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c00131b4:	89 c1                	mov    ecx,eax
c00131b6:	31 f1                	xor    ecx,esi
c00131b8:	89 d0                	mov    eax,edx
c00131ba:	31 f8                	xor    eax,edi
c00131bc:	89 ca                	mov    edx,ecx
c00131be:	09 c2                	or     edx,eax
c00131c0:	75 3e                	jne    c0013200 <VCache::write(unsigned long long, int, void*)+0x82>
c00131c2:	83 fd 01             	cmp    ebp,0x1
c00131c5:	75 39                	jne    c0013200 <VCache::write(unsigned long long, int, void*)+0x82>
c00131c7:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00131ca:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00131d0:	51                   	push   ecx
c00131d1:	50                   	push   eax
c00131d2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00131d6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00131da:	0f af c8             	imul   ecx,eax
c00131dd:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c00131e0:	51                   	push   ecx
c00131e1:	e8 a5 d4 fe ff       	call   c000068b <memcpy>
c00131e6:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00131e9:	83 c4 10             	add    esp,0x10
c00131ec:	40                   	inc    eax
c00131ed:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00131f0:	83 f8 40             	cmp    eax,0x40
c00131f3:	75 57                	jne    c001324c <VCache::write(unsigned long long, int, void*)+0xce>
c00131f5:	83 ec 0c             	sub    esp,0xc
c00131f8:	53                   	push   ebx
c00131f9:	e8 dc fe ff ff       	call   c00130da <VCache::writeWriteBuffer()>
c00131fe:	eb 34                	jmp    c0013234 <VCache::write(unsigned long long, int, void*)+0xb6>
c0013200:	83 ec 0c             	sub    esp,0xc
c0013203:	53                   	push   ebx
c0013204:	e8 d1 fe ff ff       	call   c00130da <VCache::writeWriteBuffer()>
c0013209:	83 c4 10             	add    esp,0x10
c001320c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001320f:	83 fd 3f             	cmp    ebp,0x3f
c0013212:	7f 25                	jg     c0013239 <VCache::write(unsigned long long, int, void*)+0xbb>
c0013214:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0013217:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c001321a:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c001321d:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0013221:	52                   	push   edx
c0013222:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013228:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001322c:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001322f:	e8 57 d4 fe ff       	call   c000068b <memcpy>
c0013234:	83 c4 10             	add    esp,0x10
c0013237:	eb 13                	jmp    c001324c <VCache::write(unsigned long long, int, void*)+0xce>
c0013239:	83 ec 0c             	sub    esp,0xc
c001323c:	8b 10                	mov    edx,DWORD PTR [eax]
c001323e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0013242:	55                   	push   ebp
c0013243:	57                   	push   edi
c0013244:	56                   	push   esi
c0013245:	50                   	push   eax
c0013246:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0013249:	83 c4 20             	add    esp,0x20
c001324c:	83 ec 0c             	sub    esp,0xc
c001324f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013252:	e8 0f 63 00 00       	call   c0019566 <Semaphore::release()>
c0013257:	83 c4 2c             	add    esp,0x2c
c001325a:	5b                   	pop    ebx
c001325b:	31 c0                	xor    eax,eax
c001325d:	5e                   	pop    esi
c001325e:	5f                   	pop    edi
c001325f:	5d                   	pop    ebp
c0013260:	c3                   	ret    
c0013261:	90                   	nop

c0013262 <VCache::read(unsigned long long, int, void*)>:
c0013262:	57                   	push   edi
c0013263:	56                   	push   esi
c0013264:	53                   	push   ebx
c0013265:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013269:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001326d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013271:	83 ec 0c             	sub    esp,0xc
c0013274:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0013277:	e8 5e 5d 00 00       	call   c0018fda <Semaphore::acquire()>
c001327c:	83 c4 10             	add    esp,0x10
c001327f:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0013283:	74 0c                	je     c0013291 <VCache::read(unsigned long long, int, void*)+0x2f>
c0013285:	83 ec 0c             	sub    esp,0xc
c0013288:	53                   	push   ebx
c0013289:	e8 4c fe ff ff       	call   c00130da <VCache::writeWriteBuffer()>
c001328e:	83 c4 10             	add    esp,0x10
c0013291:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0013294:	83 ec 0c             	sub    esp,0xc
c0013297:	8b 10                	mov    edx,DWORD PTR [eax]
c0013299:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001329d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00132a1:	57                   	push   edi
c00132a2:	56                   	push   esi
c00132a3:	50                   	push   eax
c00132a4:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00132a7:	83 c4 14             	add    esp,0x14
c00132aa:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00132ad:	e8 b4 62 00 00       	call   c0019566 <Semaphore::release()>
c00132b2:	83 c4 10             	add    esp,0x10
c00132b5:	5b                   	pop    ebx
c00132b6:	31 c0                	xor    eax,eax
c00132b8:	5e                   	pop    esi
c00132b9:	5f                   	pop    edi
c00132ba:	c3                   	ret    
c00132bb:	90                   	nop

c00132bc <Video::putrect(int, int, int, int, unsigned int)>:
c00132bc:	55                   	push   ebp
c00132bd:	57                   	push   edi
c00132be:	56                   	push   esi
c00132bf:	53                   	push   ebx
c00132c0:	83 ec 1c             	sub    esp,0x1c
c00132c3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00132c7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00132cb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00132cf:	01 e8                	add    eax,ebp
c00132d1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00132d5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00132d9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00132dd:	01 df                	add    edi,ebx
c00132df:	39 fb                	cmp    ebx,edi
c00132e1:	7d 1b                	jge    c00132fe <Video::putrect(int, int, int, int, unsigned int)+0x42>
c00132e3:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00132e7:	7d 12                	jge    c00132fb <Video::putrect(int, int, int, int, unsigned int)+0x3f>
c00132e9:	8b 16                	mov    edx,DWORD PTR [esi]
c00132eb:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00132ef:	53                   	push   ebx
c00132f0:	55                   	push   ebp
c00132f1:	45                   	inc    ebp
c00132f2:	56                   	push   esi
c00132f3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00132f6:	83 c4 10             	add    esp,0x10
c00132f9:	eb e8                	jmp    c00132e3 <Video::putrect(int, int, int, int, unsigned int)+0x27>
c00132fb:	43                   	inc    ebx
c00132fc:	eb e1                	jmp    c00132df <Video::putrect(int, int, int, int, unsigned int)+0x23>
c00132fe:	83 c4 1c             	add    esp,0x1c
c0013301:	5b                   	pop    ebx
c0013302:	5e                   	pop    esi
c0013303:	5f                   	pop    edi
c0013304:	5d                   	pop    ebp
c0013305:	c3                   	ret    

c0013306 <Video::blit(unsigned int*, int, int, int, int)>:
c0013306:	55                   	push   ebp
c0013307:	57                   	push   edi
c0013308:	56                   	push   esi
c0013309:	53                   	push   ebx
c001330a:	83 ec 1c             	sub    esp,0x1c
c001330d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013311:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013315:	85 c0                	test   eax,eax
c0013317:	79 02                	jns    c001331b <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0013319:	31 c0                	xor    eax,eax
c001331b:	c1 e0 02             	shl    eax,0x2
c001331e:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013322:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013326:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001332a:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001332e:	39 d8                	cmp    eax,ebx
c0013330:	7e 49                	jle    c001337b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0013332:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0013338:	7c 41                	jl     c001337b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c001333a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001333e:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0013342:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013346:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c001334a:	39 f9                	cmp    ecx,edi
c001334c:	7e 22                	jle    c0013370 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001334e:	83 c5 04             	add    ebp,0x4
c0013351:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0013357:	7c 14                	jl     c001336d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0013359:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001335b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001335e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013362:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013366:	56                   	push   esi
c0013367:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001336a:	83 c4 10             	add    esp,0x10
c001336d:	47                   	inc    edi
c001336e:	eb d2                	jmp    c0013342 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0013370:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013374:	43                   	inc    ebx
c0013375:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0013379:	eb ab                	jmp    c0013326 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001337b:	83 c4 1c             	add    esp,0x1c
c001337e:	5b                   	pop    ebx
c001337f:	5e                   	pop    esi
c0013380:	5f                   	pop    edi
c0013381:	5d                   	pop    ebp
c0013382:	c3                   	ret    
c0013383:	90                   	nop

c0013384 <Video::clearScreen(unsigned int)>:
c0013384:	57                   	push   edi
c0013385:	56                   	push   esi
c0013386:	53                   	push   ebx
c0013387:	31 db                	xor    ebx,ebx
c0013389:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001338d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0013393:	7e 1f                	jle    c00133b4 <Video::clearScreen(unsigned int)+0x30>
c0013395:	31 ff                	xor    edi,edi
c0013397:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001339d:	7e 12                	jle    c00133b1 <Video::clearScreen(unsigned int)+0x2d>
c001339f:	8b 06                	mov    eax,DWORD PTR [esi]
c00133a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00133a5:	53                   	push   ebx
c00133a6:	57                   	push   edi
c00133a7:	47                   	inc    edi
c00133a8:	56                   	push   esi
c00133a9:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00133ac:	83 c4 10             	add    esp,0x10
c00133af:	eb e6                	jmp    c0013397 <Video::clearScreen(unsigned int)+0x13>
c00133b1:	43                   	inc    ebx
c00133b2:	eb d9                	jmp    c001338d <Video::clearScreen(unsigned int)+0x9>
c00133b4:	5b                   	pop    ebx
c00133b5:	5e                   	pop    esi
c00133b6:	5f                   	pop    edi
c00133b7:	c3                   	ret    

c00133b8 <Video::putpixel(int, int, unsigned int)>:
c00133b8:	c7 44 24 04 48 22 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022248
c00133c0:	e9 4c be ff ff       	jmp    c000f211 <Dbg::kprintf(char const*, ...)>
c00133c5:	90                   	nop

c00133c6 <Video::Video(char const*)>:
c00133c6:	83 ec 0c             	sub    esp,0xc
c00133c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133cd:	83 ec 08             	sub    esp,0x8
c00133d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133d4:	50                   	push   eax
c00133d5:	e8 3c d4 ff ff       	call   c0010816 <Device::Device(char const*)>
c00133da:	83 c4 10             	add    esp,0x10
c00133dd:	ba 60 22 02 c0       	mov    edx,0xc0022260
c00133e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133e6:	89 10                	mov    DWORD PTR [eax],edx
c00133e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ec:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00133f6:	90                   	nop
c00133f7:	83 c4 0c             	add    esp,0xc
c00133fa:	c3                   	ret    
c00133fb:	90                   	nop

c00133fc <Video::~Video()>:
c00133fc:	83 ec 0c             	sub    esp,0xc
c00133ff:	ba 60 22 02 c0       	mov    edx,0xc0022260
c0013404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013408:	89 10                	mov    DWORD PTR [eax],edx
c001340a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001340e:	83 ec 0c             	sub    esp,0xc
c0013411:	50                   	push   eax
c0013412:	e8 b5 d0 ff ff       	call   c00104cc <Device::~Device()>
c0013417:	83 c4 10             	add    esp,0x10
c001341a:	90                   	nop
c001341b:	83 c4 0c             	add    esp,0xc
c001341e:	c3                   	ret    
c001341f:	90                   	nop

c0013420 <Video::~Video()>:
c0013420:	83 ec 0c             	sub    esp,0xc
c0013423:	83 ec 0c             	sub    esp,0xc
c0013426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001342a:	e8 cd ff ff ff       	call   c00133fc <Video::~Video()>
c001342f:	83 c4 10             	add    esp,0x10
c0013432:	83 ec 08             	sub    esp,0x8
c0013435:	68 64 01 00 00       	push   0x164
c001343a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001343e:	e8 a8 bc ff ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c0013443:	83 c4 10             	add    esp,0x10
c0013446:	83 c4 0c             	add    esp,0xc
c0013449:	c3                   	ret    

c001344a <Video::isMonochrome()>:
c001344a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001344e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0013454:	c3                   	ret    
c0013455:	90                   	nop

c0013456 <Video::getWidth()>:
c0013456:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001345a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0013460:	c3                   	ret    
c0013461:	90                   	nop

c0013462 <Video::getHeight()>:
c0013462:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013466:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001346c:	c3                   	ret    
c001346d:	90                   	nop

c001346e <Video::drawCursor(int, int, unsigned char*, int)>:
c001346e:	55                   	push   ebp
c001346f:	57                   	push   edi
c0013470:	56                   	push   esi
c0013471:	53                   	push   ebx
c0013472:	83 ec 2c             	sub    esp,0x2c
c0013475:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013479:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001347d:	83 f8 01             	cmp    eax,0x1
c0013480:	19 c9                	sbb    ecx,ecx
c0013482:	31 db                	xor    ebx,ebx
c0013484:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0013488:	89 cd                	mov    ebp,ecx
c001348a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0013492:	f7 d5                	not    ebp
c0013494:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001349a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001349e:	01 d8                	add    eax,ebx
c00134a0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00134a4:	56                   	push   esi
c00134a5:	e8 b8 ff ff ff       	call   c0013462 <Video::getHeight()>
c00134aa:	59                   	pop    ecx
c00134ab:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00134af:	7e 70                	jle    c0013521 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00134b1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00134b5:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00134b9:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00134bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00134c0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00134c4:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00134cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00134cf:	89 f8                	mov    eax,edi
c00134d1:	83 c0 20             	add    eax,0x20
c00134d4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00134d8:	56                   	push   esi
c00134d9:	e8 78 ff ff ff       	call   c0013456 <Video::getWidth()>
c00134de:	5a                   	pop    edx
c00134df:	39 c7                	cmp    edi,eax
c00134e1:	7d 34                	jge    c0013517 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00134e3:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00134e8:	74 05                	je     c00134ef <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00134ea:	8b 06                	mov    eax,DWORD PTR [esi]
c00134ec:	55                   	push   ebp
c00134ed:	eb 0d                	jmp    c00134fc <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00134ef:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00134f4:	74 12                	je     c0013508 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00134f6:	8b 06                	mov    eax,DWORD PTR [esi]
c00134f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00134fc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013500:	57                   	push   edi
c0013501:	56                   	push   esi
c0013502:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013505:	83 c4 10             	add    esp,0x10
c0013508:	47                   	inc    edi
c0013509:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001350d:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c0013511:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013515:	75 c1                	jne    c00134d8 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0013517:	43                   	inc    ebx
c0013518:	83 fb 20             	cmp    ebx,0x20
c001351b:	0f 85 79 ff ff ff    	jne    c001349a <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c0013521:	83 c4 2c             	add    esp,0x2c
c0013524:	5b                   	pop    ebx
c0013525:	5e                   	pop    esi
c0013526:	5f                   	pop    edi
c0013527:	5d                   	pop    ebp
c0013528:	c3                   	ret    
c0013529:	90                   	nop

c001352a <ACPI::close(int, int, void*)>:
c001352a:	83 ec 1c             	sub    esp,0x1c
c001352d:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0013535:	74 0a                	je     c0013541 <ACPI::close(int, int, void*)+0x17>
c0013537:	b8 00 00 00 00       	mov    eax,0x0
c001353c:	e9 9e 00 00 00       	jmp    c00135df <ACPI::close(int, int, void*)+0xb5>
c0013541:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0013546:	75 37                	jne    c001357f <ACPI::close(int, int, void*)+0x55>
c0013548:	83 ec 0c             	sub    esp,0xc
c001354b:	68 98 22 02 c0       	push   0xc0022298
c0013550:	e8 bc bc ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0013555:	83 c4 10             	add    esp,0x10
c0013558:	a1 28 4e 02 c0       	mov    eax,ds:0xc0024e28
c001355d:	85 c0                	test   eax,eax
c001355f:	74 07                	je     c0013568 <ACPI::close(int, int, void*)+0x3e>
c0013561:	a1 28 4e 02 c0       	mov    eax,ds:0xc0024e28
c0013566:	ff d0                	call   eax
c0013568:	83 ec 0c             	sub    esp,0xc
c001356b:	68 6c 23 02 c0       	push   0xc002236c
c0013570:	e8 cb 24 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c0013575:	83 c4 10             	add    esp,0x10
c0013578:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001357d:	eb 60                	jmp    c00135df <ACPI::close(int, int, void*)+0xb5>
c001357f:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0013584:	75 54                	jne    c00135da <ACPI::close(int, int, void*)+0xb0>
c0013586:	a1 24 4e 02 c0       	mov    eax,ds:0xc0024e24
c001358b:	85 c0                	test   eax,eax
c001358d:	74 07                	je     c0013596 <ACPI::close(int, int, void*)+0x6c>
c001358f:	a1 24 4e 02 c0       	mov    eax,ds:0xc0024e24
c0013594:	ff d0                	call   eax
c0013596:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c001359b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001359f:	25 ff 00 00 00       	and    eax,0xff
c00135a4:	83 e0 02             	and    eax,0x2
c00135a7:	74 1c                	je     c00135c5 <ACPI::close(int, int, void*)+0x9b>
c00135a9:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00135b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00135b4:	89 c2                	mov    edx,eax
c00135b6:	ec                   	in     al,dx
c00135b7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00135bb:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00135bf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00135c3:	eb d6                	jmp    c001359b <ACPI::close(int, int, void*)+0x71>
c00135c5:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00135cc:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00135d1:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00135d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00135d9:	ee                   	out    dx,al
c00135da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00135df:	83 c4 1c             	add    esp,0x1c
c00135e2:	c3                   	ret    

c00135e3 <findRSDP()>:
c00135e3:	83 ec 1c             	sub    esp,0x1c
c00135e6:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c00135eb:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00135f1:	83 e0 04             	and    eax,0x4
c00135f4:	84 c0                	test   al,al
c00135f6:	75 07                	jne    c00135ff <findRSDP()+0x1c>
c00135f8:	b8 00 00 00 00       	mov    eax,0x0
c00135fd:	eb 6a                	jmp    c0013669 <findRSDP()+0x86>
c00135ff:	a1 f0 47 02 c0       	mov    eax,ds:0xc00247f0
c0013604:	3d ff 07 00 00       	cmp    eax,0x7ff
c0013609:	7f 1b                	jg     c0013626 <findRSDP()+0x43>
c001360b:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013610:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013616:	83 e2 fb             	and    edx,0xfffffffb
c0013619:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c001361f:	b8 00 00 00 00       	mov    eax,0x0
c0013624:	eb 43                	jmp    c0013669 <findRSDP()+0x86>
c0013626:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001362e:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0013636:	77 2c                	ja     c0013664 <findRSDP()+0x81>
c0013638:	83 ec 04             	sub    esp,0x4
c001363b:	6a 08                	push   0x8
c001363d:	68 a5 22 02 c0       	push   0xc00222a5
c0013642:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013646:	e8 dd cf fe ff       	call   c0000628 <memcmp>
c001364b:	83 c4 10             	add    esp,0x10
c001364e:	85 c0                	test   eax,eax
c0013650:	0f 94 c0             	sete   al
c0013653:	84 c0                	test   al,al
c0013655:	74 06                	je     c001365d <findRSDP()+0x7a>
c0013657:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001365b:	eb 0c                	jmp    c0013669 <findRSDP()+0x86>
c001365d:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0013662:	eb ca                	jmp    c001362e <findRSDP()+0x4b>
c0013664:	b8 00 00 00 00       	mov    eax,0x0
c0013669:	83 c4 1c             	add    esp,0x1c
c001366c:	c3                   	ret    

c001366d <loadACPITables(unsigned char*)>:
c001366d:	56                   	push   esi
c001366e:	53                   	push   ebx
c001366f:	83 ec 44             	sub    esp,0x44
c0013672:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013677:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001367d:	83 e0 04             	and    eax,0x4
c0013680:	84 c0                	test   al,al
c0013682:	0f 84 05 02 00 00    	je     c001388d <loadACPITables(unsigned char*)+0x220>
c0013688:	a0 40 50 02 c0       	mov    al,ds:0xc0025040
c001368d:	84 c0                	test   al,al
c001368f:	74 75                	je     c0013706 <loadACPITables(unsigned char*)+0x99>
c0013691:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013695:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013699:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001369d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00136a0:	83 e8 24             	sub    eax,0x24
c00136a3:	c1 e8 03             	shr    eax,0x3
c00136a6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00136aa:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00136b2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00136b6:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00136ba:	0f 8d b2 00 00 00    	jge    c0013772 <loadACPITables(unsigned char*)+0x105>
c00136c0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00136c4:	83 c0 24             	add    eax,0x24
c00136c7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00136cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00136cf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00136d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00136d7:	c1 e0 03             	shl    eax,0x3
c00136da:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00136de:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00136e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00136e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00136e7:	89 c1                	mov    ecx,eax
c00136e9:	a1 2c 4e 02 c0       	mov    eax,ds:0xc0024e2c
c00136ee:	8d 50 01             	lea    edx,[eax+0x1]
c00136f1:	89 15 2c 4e 02 c0    	mov    DWORD PTR ds:0xc0024e2c,edx
c00136f7:	89 ca                	mov    edx,ecx
c00136f9:	89 14 c5 44 4e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb1bc],edx
c0013700:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0013704:	eb ac                	jmp    c00136b2 <loadACPITables(unsigned char*)+0x45>
c0013706:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001370a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001370e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013712:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013715:	83 e8 24             	sub    eax,0x24
c0013718:	c1 e8 02             	shr    eax,0x2
c001371b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001371f:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0013727:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001372b:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c001372f:	7d 41                	jge    c0013772 <loadACPITables(unsigned char*)+0x105>
c0013731:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0013735:	83 c0 24             	add    eax,0x24
c0013738:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001373c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013740:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013744:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013748:	c1 e0 02             	shl    eax,0x2
c001374b:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c001374f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013753:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013755:	a1 2c 4e 02 c0       	mov    eax,ds:0xc0024e2c
c001375a:	8d 50 01             	lea    edx,[eax+0x1]
c001375d:	89 15 2c 4e 02 c0    	mov    DWORD PTR ds:0xc0024e2c,edx
c0013763:	89 ca                	mov    edx,ecx
c0013765:	89 14 c5 44 4e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb1bc],edx
c001376c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0013770:	eb b5                	jmp    c0013727 <loadACPITables(unsigned char*)+0xba>
c0013772:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c001377a:	a1 2c 4e 02 c0       	mov    eax,ds:0xc0024e2c
c001377f:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0013783:	0f 8d 05 01 00 00    	jge    c001388e <loadACPITables(unsigned char*)+0x221>
c0013789:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001378d:	8b 04 c5 44 4e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb1bc]
c0013794:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001379c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00137a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137a4:	25 ff 0f 00 00       	and    eax,0xfff
c00137a9:	89 c6                	mov    esi,eax
c00137ab:	e8 d3 ab ff ff       	call   c000e383 <Virt::getAKernelVAS()>
c00137b0:	89 c3                	mov    ebx,eax
c00137b2:	83 ec 0c             	sub    esp,0xc
c00137b5:	6a 01                	push   0x1
c00137b7:	e8 3a aa ff ff       	call   c000e1f6 <Virt::allocateKernelVirtualPages(int)>
c00137bc:	83 c4 10             	add    esp,0x10
c00137bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00137c3:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00137c9:	83 ec 0c             	sub    esp,0xc
c00137cc:	6a 01                	push   0x1
c00137ce:	6a 01                	push   0x1
c00137d0:	50                   	push   eax
c00137d1:	52                   	push   edx
c00137d2:	53                   	push   ebx
c00137d3:	e8 dc b3 ff ff       	call   c000ebb4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00137d8:	83 c4 20             	add    esp,0x20
c00137db:	09 f0                	or     eax,esi
c00137dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00137e1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00137e5:	c1 e0 03             	shl    eax,0x3
c00137e8:	05 40 4e 02 c0       	add    eax,0xc0024e40
c00137ed:	83 ec 04             	sub    esp,0x4
c00137f0:	6a 04                	push   0x4
c00137f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137f6:	50                   	push   eax
c00137f7:	e8 8f ce fe ff       	call   c000068b <memcpy>
c00137fc:	83 c4 10             	add    esp,0x10
c00137ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013803:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013806:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001380a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001380e:	05 00 10 00 00       	add    eax,0x1000
c0013813:	c1 e8 0c             	shr    eax,0xc
c0013816:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001381a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001381e:	89 04 24             	mov    DWORD PTR [esp],eax
c0013821:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013825:	25 ff 0f 00 00       	and    eax,0xfff
c001382a:	89 c6                	mov    esi,eax
c001382c:	e8 52 ab ff ff       	call   c000e383 <Virt::getAKernelVAS()>
c0013831:	89 c3                	mov    ebx,eax
c0013833:	83 ec 0c             	sub    esp,0xc
c0013836:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001383a:	e8 b7 a9 ff ff       	call   c000e1f6 <Virt::allocateKernelVirtualPages(int)>
c001383f:	83 c4 10             	add    esp,0x10
c0013842:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013846:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c001384c:	83 ec 0c             	sub    esp,0xc
c001384f:	6a 01                	push   0x1
c0013851:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013855:	50                   	push   eax
c0013856:	52                   	push   edx
c0013857:	53                   	push   ebx
c0013858:	e8 57 b3 ff ff       	call   c000ebb4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001385d:	83 c4 20             	add    esp,0x20
c0013860:	09 f0                	or     eax,esi
c0013862:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013866:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0013869:	83 ec 0c             	sub    esp,0xc
c001386c:	50                   	push   eax
c001386d:	e8 d1 ac ff ff       	call   c000e543 <Virt::freeKernelVirtualPages(unsigned long)>
c0013872:	83 c4 10             	add    esp,0x10
c0013875:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013879:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001387d:	89 14 c5 44 4e 02 c0 	mov    DWORD PTR [eax*8-0x3ffdb1bc],edx
c0013884:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0013888:	e9 ed fe ff ff       	jmp    c001377a <loadACPITables(unsigned char*)+0x10d>
c001388d:	90                   	nop
c001388e:	83 c4 44             	add    esp,0x44
c0013891:	5b                   	pop    ebx
c0013892:	5e                   	pop    esi
c0013893:	c3                   	ret    

c0013894 <findRSDT(unsigned char*)>:
c0013894:	56                   	push   esi
c0013895:	53                   	push   ebx
c0013896:	83 ec 44             	sub    esp,0x44
c0013899:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001389e:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00138a4:	83 e0 04             	and    eax,0x4
c00138a7:	84 c0                	test   al,al
c00138a9:	75 0a                	jne    c00138b5 <findRSDT(unsigned char*)+0x21>
c00138ab:	b8 00 00 00 00       	mov    eax,0x0
c00138b0:	e9 f7 00 00 00       	jmp    c00139ac <findRSDT(unsigned char*)+0x118>
c00138b5:	83 ec 04             	sub    esp,0x4
c00138b8:	6a 24                	push   0x24
c00138ba:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00138be:	8d 44 24 18          	lea    eax,[esp+0x18]
c00138c2:	50                   	push   eax
c00138c3:	e8 c3 cd fe ff       	call   c000068b <memcpy>
c00138c8:	83 c4 10             	add    esp,0x10
c00138cb:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00138cf:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00138d3:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00138db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00138df:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00138e3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00138e7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00138eb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00138ef:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00138f3:	25 ff 0f 00 00       	and    eax,0xfff
c00138f8:	89 c6                	mov    esi,eax
c00138fa:	e8 84 aa ff ff       	call   c000e383 <Virt::getAKernelVAS()>
c00138ff:	89 c3                	mov    ebx,eax
c0013901:	83 ec 0c             	sub    esp,0xc
c0013904:	6a 02                	push   0x2
c0013906:	e8 eb a8 ff ff       	call   c000e1f6 <Virt::allocateKernelVirtualPages(int)>
c001390b:	83 c4 10             	add    esp,0x10
c001390e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013912:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013918:	83 ec 0c             	sub    esp,0xc
c001391b:	6a 01                	push   0x1
c001391d:	6a 02                	push   0x2
c001391f:	50                   	push   eax
c0013920:	52                   	push   edx
c0013921:	53                   	push   ebx
c0013922:	e8 8d b2 ff ff       	call   c000ebb4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013927:	83 c4 20             	add    esp,0x20
c001392a:	09 f0                	or     eax,esi
c001392c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0013930:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013934:	25 ff 0f 00 00       	and    eax,0xfff
c0013939:	89 c6                	mov    esi,eax
c001393b:	e8 43 aa ff ff       	call   c000e383 <Virt::getAKernelVAS()>
c0013940:	89 c3                	mov    ebx,eax
c0013942:	83 ec 0c             	sub    esp,0xc
c0013945:	6a 02                	push   0x2
c0013947:	e8 aa a8 ff ff       	call   c000e1f6 <Virt::allocateKernelVirtualPages(int)>
c001394c:	83 c4 10             	add    esp,0x10
c001394f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013953:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013959:	83 ec 0c             	sub    esp,0xc
c001395c:	6a 01                	push   0x1
c001395e:	6a 02                	push   0x2
c0013960:	50                   	push   eax
c0013961:	52                   	push   edx
c0013962:	53                   	push   ebx
c0013963:	e8 4c b2 ff ff       	call   c000ebb4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013968:	83 c4 20             	add    esp,0x20
c001396b:	09 f0                	or     eax,esi
c001396d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0013971:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0013976:	75 11                	jne    c0013989 <findRSDT(unsigned char*)+0xf5>
c0013978:	c6 05 40 50 02 c0 00 	mov    BYTE PTR ds:0xc0025040,0x0
c001397f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013983:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0013987:	eb 1f                	jmp    c00139a8 <findRSDT(unsigned char*)+0x114>
c0013989:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c001398e:	75 11                	jne    c00139a1 <findRSDT(unsigned char*)+0x10d>
c0013990:	c6 05 40 50 02 c0 01 	mov    BYTE PTR ds:0xc0025040,0x1
c0013997:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001399b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001399f:	eb 07                	jmp    c00139a8 <findRSDT(unsigned char*)+0x114>
c00139a1:	b8 00 00 00 00       	mov    eax,0x0
c00139a6:	eb 04                	jmp    c00139ac <findRSDT(unsigned char*)+0x118>
c00139a8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00139ac:	83 c4 44             	add    esp,0x44
c00139af:	5b                   	pop    ebx
c00139b0:	5e                   	pop    esi
c00139b1:	c3                   	ret    

c00139b2 <findDataTable(unsigned char*, char*)>:
c00139b2:	83 ec 1c             	sub    esp,0x1c
c00139b5:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c00139ba:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00139c0:	83 e0 04             	and    eax,0x4
c00139c3:	84 c0                	test   al,al
c00139c5:	75 07                	jne    c00139ce <findDataTable(unsigned char*, char*)+0x1c>
c00139c7:	b8 00 00 00 00       	mov    eax,0x0
c00139cc:	eb 7c                	jmp    c0013a4a <findDataTable(unsigned char*, char*)+0x98>
c00139ce:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00139d6:	a1 2c 4e 02 c0       	mov    eax,ds:0xc0024e2c
c00139db:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00139df:	7d 3a                	jge    c0013a1b <findDataTable(unsigned char*, char*)+0x69>
c00139e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00139e5:	c1 e0 03             	shl    eax,0x3
c00139e8:	05 40 4e 02 c0       	add    eax,0xc0024e40
c00139ed:	83 ec 04             	sub    esp,0x4
c00139f0:	6a 04                	push   0x4
c00139f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00139f6:	50                   	push   eax
c00139f7:	e8 2c cc fe ff       	call   c0000628 <memcmp>
c00139fc:	83 c4 10             	add    esp,0x10
c00139ff:	85 c0                	test   eax,eax
c0013a01:	0f 94 c0             	sete   al
c0013a04:	84 c0                	test   al,al
c0013a06:	74 0d                	je     c0013a15 <findDataTable(unsigned char*, char*)+0x63>
c0013a08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013a0c:	8b 04 c5 44 4e 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdb1bc]
c0013a13:	eb 35                	jmp    c0013a4a <findDataTable(unsigned char*, char*)+0x98>
c0013a15:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0013a19:	eb bb                	jmp    c00139d6 <findDataTable(unsigned char*, char*)+0x24>
c0013a1b:	a0 40 50 02 c0       	mov    al,ds:0xc0025040
c0013a20:	84 c0                	test   al,al
c0013a22:	74 07                	je     c0013a2b <findDataTable(unsigned char*, char*)+0x79>
c0013a24:	b8 58 00 00 00       	mov    eax,0x58
c0013a29:	eb 05                	jmp    c0013a30 <findDataTable(unsigned char*, char*)+0x7e>
c0013a2b:	b8 52 00 00 00       	mov    eax,0x52
c0013a30:	83 ec 04             	sub    esp,0x4
c0013a33:	50                   	push   eax
c0013a34:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013a38:	68 90 23 02 c0       	push   0xc0022390
c0013a3d:	e8 cf b7 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0013a42:	83 c4 10             	add    esp,0x10
c0013a45:	b8 00 00 00 00       	mov    eax,0x0
c0013a4a:	83 c4 1c             	add    esp,0x1c
c0013a4d:	c3                   	ret    

c0013a4e <scanMADT()>:
c0013a4e:	83 ec 2c             	sub    esp,0x2c
c0013a51:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013a56:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0013a5c:	83 e0 04             	and    eax,0x4
c0013a5f:	84 c0                	test   al,al
c0013a61:	0f 84 9a 03 00 00    	je     c0013e01 <scanMADT()+0x3b3>
c0013a67:	e8 77 fb ff ff       	call   c00135e3 <findRSDP()>
c0013a6c:	a3 4c 50 02 c0       	mov    ds:0xc002504c,eax
c0013a71:	a1 4c 50 02 c0       	mov    eax,ds:0xc002504c
c0013a76:	85 c0                	test   eax,eax
c0013a78:	75 19                	jne    c0013a93 <scanMADT()+0x45>
c0013a7a:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013a7f:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013a85:	83 e2 fb             	and    edx,0xfffffffb
c0013a88:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013a8e:	e9 72 03 00 00       	jmp    c0013e05 <scanMADT()+0x3b7>
c0013a93:	a1 4c 50 02 c0       	mov    eax,ds:0xc002504c
c0013a98:	83 ec 0c             	sub    esp,0xc
c0013a9b:	50                   	push   eax
c0013a9c:	e8 f3 fd ff ff       	call   c0013894 <findRSDT(unsigned char*)>
c0013aa1:	83 c4 10             	add    esp,0x10
c0013aa4:	a3 48 50 02 c0       	mov    ds:0xc0025048,eax
c0013aa9:	a1 48 50 02 c0       	mov    eax,ds:0xc0025048
c0013aae:	85 c0                	test   eax,eax
c0013ab0:	75 19                	jne    c0013acb <scanMADT()+0x7d>
c0013ab2:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013ab7:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013abd:	83 e2 fb             	and    edx,0xfffffffb
c0013ac0:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013ac6:	e9 3a 03 00 00       	jmp    c0013e05 <scanMADT()+0x3b7>
c0013acb:	a1 48 50 02 c0       	mov    eax,ds:0xc0025048
c0013ad0:	83 ec 0c             	sub    esp,0xc
c0013ad3:	50                   	push   eax
c0013ad4:	e8 94 fb ff ff       	call   c001366d <loadACPITables(unsigned char*)>
c0013ad9:	83 c4 10             	add    esp,0x10
c0013adc:	a1 48 50 02 c0       	mov    eax,ds:0xc0025048
c0013ae1:	83 ec 08             	sub    esp,0x8
c0013ae4:	68 ae 22 02 c0       	push   0xc00222ae
c0013ae9:	50                   	push   eax
c0013aea:	e8 c3 fe ff ff       	call   c00139b2 <findDataTable(unsigned char*, char*)>
c0013aef:	83 c4 10             	add    esp,0x10
c0013af2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013af6:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0013afb:	75 19                	jne    c0013b16 <scanMADT()+0xc8>
c0013afd:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0013b02:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0013b08:	83 e2 fe             	and    edx,0xfffffffe
c0013b0b:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0013b11:	e9 ef 02 00 00       	jmp    c0013e05 <scanMADT()+0x3b7>
c0013b16:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013b1e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013b22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013b25:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0013b29:	0f 87 d6 02 00 00    	ja     c0013e05 <scanMADT()+0x3b7>
c0013b2f:	81 7c 24 1c f3 01 00 00 	cmp    DWORD PTR [esp+0x1c],0x1f3
c0013b37:	0f 87 c8 02 00 00    	ja     c0013e05 <scanMADT()+0x3b7>
c0013b3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b41:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b45:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b49:	8d 50 01             	lea    edx,[eax+0x1]
c0013b4c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b50:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b54:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013b58:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0013b5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b60:	8d 50 01             	lea    edx,[eax+0x1]
c0013b63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b67:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013b6b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013b6f:	88 44 24 12          	mov    BYTE PTR [esp+0x12],al
c0013b73:	80 7c 24 12 02       	cmp    BYTE PTR [esp+0x12],0x2
c0013b78:	0f 86 86 02 00 00    	jbe    c0013e04 <scanMADT()+0x3b6>
c0013b7e:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0013b83:	75 5b                	jne    c0013be0 <scanMADT()+0x192>
c0013b85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013b89:	8d 50 01             	lea    edx,[eax+0x1]
c0013b8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013b90:	8a 15 80 51 02 c0    	mov    dl,BYTE PTR ds:0xc0025180
c0013b96:	81 e2 ff 00 00 00    	and    edx,0xff
c0013b9c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013ba0:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013ba4:	88 82 c0 51 02 c0    	mov    BYTE PTR [edx-0x3ffdae40],al
c0013baa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013bae:	8d 42 01             	lea    eax,[edx+0x1]
c0013bb1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013bb5:	a0 80 51 02 c0       	mov    al,ds:0xc0025180
c0013bba:	8d 48 01             	lea    ecx,[eax+0x1]
c0013bbd:	88 0d 80 51 02 c0    	mov    BYTE PTR ds:0xc0025180,cl
c0013bc3:	25 ff 00 00 00       	and    eax,0xff
c0013bc8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013bcc:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c0013bd0:	88 90 a0 51 02 c0    	mov    BYTE PTR [eax-0x3ffdae60],dl
c0013bd6:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013bdb:	e9 0a 02 00 00       	jmp    c0013dea <scanMADT()+0x39c>
c0013be0:	80 7c 24 13 01       	cmp    BYTE PTR [esp+0x13],0x1
c0013be5:	0f 85 29 01 00 00    	jne    c0013d14 <scanMADT()+0x2c6>
c0013beb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013bef:	8d 50 01             	lea    edx,[eax+0x1]
c0013bf2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013bf6:	8a 15 50 50 02 c0    	mov    dl,BYTE PTR ds:0xc0025050
c0013bfc:	81 e2 ff 00 00 00    	and    edx,0xff
c0013c02:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013c06:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0013c0a:	88 82 60 50 02 c0    	mov    BYTE PTR [edx-0x3ffdafa0],al
c0013c10:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0013c14:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c18:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c1c:	01 d0                	add    eax,edx
c0013c1e:	83 c0 2c             	add    eax,0x2c
c0013c21:	8a 00                	mov    al,BYTE PTR [eax]
c0013c23:	31 d2                	xor    edx,edx
c0013c25:	88 c2                	mov    dl,al
c0013c27:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c2b:	8d 48 01             	lea    ecx,[eax+0x1]
c0013c2e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c32:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013c36:	25 ff 00 00 00       	and    eax,0xff
c0013c3b:	c1 e0 08             	shl    eax,0x8
c0013c3e:	89 d1                	mov    ecx,edx
c0013c40:	09 c1                	or     ecx,eax
c0013c42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c46:	8d 50 02             	lea    edx,[eax+0x2]
c0013c49:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c4d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c51:	25 ff 00 00 00       	and    eax,0xff
c0013c56:	c1 e0 10             	shl    eax,0x10
c0013c59:	09 c1                	or     ecx,eax
c0013c5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c5f:	8d 50 03             	lea    edx,[eax+0x3]
c0013c62:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c66:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013c6a:	25 ff 00 00 00       	and    eax,0xff
c0013c6f:	c1 e0 18             	shl    eax,0x18
c0013c72:	09 c1                	or     ecx,eax
c0013c74:	89 ca                	mov    edx,ecx
c0013c76:	a0 50 50 02 c0       	mov    al,ds:0xc0025050
c0013c7b:	25 ff 00 00 00       	and    eax,0xff
c0013c80:	89 14 85 80 50 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf80],edx
c0013c87:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013c8c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013c90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c94:	01 d0                	add    eax,edx
c0013c96:	83 c0 2c             	add    eax,0x2c
c0013c99:	8a 00                	mov    al,BYTE PTR [eax]
c0013c9b:	31 d2                	xor    edx,edx
c0013c9d:	88 c2                	mov    dl,al
c0013c9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ca3:	8d 48 01             	lea    ecx,[eax+0x1]
c0013ca6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013caa:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013cae:	25 ff 00 00 00       	and    eax,0xff
c0013cb3:	c1 e0 08             	shl    eax,0x8
c0013cb6:	89 d1                	mov    ecx,edx
c0013cb8:	09 c1                	or     ecx,eax
c0013cba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cbe:	8d 50 02             	lea    edx,[eax+0x2]
c0013cc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cc5:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013cc9:	25 ff 00 00 00       	and    eax,0xff
c0013cce:	c1 e0 10             	shl    eax,0x10
c0013cd1:	09 c1                	or     ecx,eax
c0013cd3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013cd7:	8d 50 03             	lea    edx,[eax+0x3]
c0013cda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013cde:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013ce2:	25 ff 00 00 00       	and    eax,0xff
c0013ce7:	c1 e0 18             	shl    eax,0x18
c0013cea:	09 c1                	or     ecx,eax
c0013cec:	89 ca                	mov    edx,ecx
c0013cee:	a0 50 50 02 c0       	mov    al,ds:0xc0025050
c0013cf3:	25 ff 00 00 00       	and    eax,0xff
c0013cf8:	89 14 85 00 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaf00],edx
c0013cff:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013d04:	a0 50 50 02 c0       	mov    al,ds:0xc0025050
c0013d09:	40                   	inc    eax
c0013d0a:	a2 50 50 02 c0       	mov    ds:0xc0025050,al
c0013d0f:	e9 d6 00 00 00       	jmp    c0013dea <scanMADT()+0x39c>
c0013d14:	80 7c 24 13 02       	cmp    BYTE PTR [esp+0x13],0x2
c0013d19:	0f 85 b1 00 00 00    	jne    c0013dd0 <scanMADT()+0x382>
c0013d1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d23:	8d 50 01             	lea    edx,[eax+0x1]
c0013d26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013d2a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d2e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013d32:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0013d36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d3a:	8d 50 01             	lea    edx,[eax+0x1]
c0013d3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0013d41:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d45:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0013d49:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0013d4d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013d51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d55:	01 d0                	add    eax,edx
c0013d57:	83 c0 2c             	add    eax,0x2c
c0013d5a:	8a 00                	mov    al,BYTE PTR [eax]
c0013d5c:	31 d2                	xor    edx,edx
c0013d5e:	88 c2                	mov    dl,al
c0013d60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d64:	8d 48 01             	lea    ecx,[eax+0x1]
c0013d67:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d6b:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0013d6f:	25 ff 00 00 00       	and    eax,0xff
c0013d74:	c1 e0 08             	shl    eax,0x8
c0013d77:	89 d1                	mov    ecx,edx
c0013d79:	09 c1                	or     ecx,eax
c0013d7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d7f:	8d 50 02             	lea    edx,[eax+0x2]
c0013d82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d86:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013d8a:	25 ff 00 00 00       	and    eax,0xff
c0013d8f:	c1 e0 10             	shl    eax,0x10
c0013d92:	09 c1                	or     ecx,eax
c0013d94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d98:	8d 50 03             	lea    edx,[eax+0x3]
c0013d9b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d9f:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0013da3:	25 ff 00 00 00       	and    eax,0xff
c0013da8:	c1 e0 18             	shl    eax,0x18
c0013dab:	09 c8                	or     eax,ecx
c0013dad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013db1:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013db6:	83 44 24 1c 02       	add    DWORD PTR [esp+0x1c],0x2
c0013dbb:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0013dbf:	25 ff 00 00 00       	and    eax,0xff
c0013dc4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013dc8:	88 90 00 3f 02 c0    	mov    BYTE PTR [eax-0x3ffdc100],dl
c0013dce:	eb 1a                	jmp    c0013dea <scanMADT()+0x39c>
c0013dd0:	80 7c 24 13 04       	cmp    BYTE PTR [esp+0x13],0x4
c0013dd5:	75 07                	jne    c0013dde <scanMADT()+0x390>
c0013dd7:	83 44 24 1c 04       	add    DWORD PTR [esp+0x1c],0x4
c0013ddc:	eb 0c                	jmp    c0013dea <scanMADT()+0x39c>
c0013dde:	80 7c 24 13 05       	cmp    BYTE PTR [esp+0x13],0x5
c0013de3:	75 05                	jne    c0013dea <scanMADT()+0x39c>
c0013de5:	83 44 24 1c 0a       	add    DWORD PTR [esp+0x1c],0xa
c0013dea:	8a 44 24 12          	mov    al,BYTE PTR [esp+0x12]
c0013dee:	31 d2                	xor    edx,edx
c0013df0:	88 c2                	mov    dl,al
c0013df2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013df6:	01 d0                	add    eax,edx
c0013df8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013dfc:	e9 1d fd ff ff       	jmp    c0013b1e <scanMADT()+0xd0>
c0013e01:	90                   	nop
c0013e02:	eb 01                	jmp    c0013e05 <scanMADT()+0x3b7>
c0013e04:	90                   	nop
c0013e05:	83 c4 2c             	add    esp,0x2c
c0013e08:	c3                   	ret    
c0013e09:	90                   	nop

c0013e0a <ACPI::ACPI()>:
c0013e0a:	83 ec 0c             	sub    esp,0xc
c0013e0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e11:	83 ec 08             	sub    esp,0x8
c0013e14:	68 b3 22 02 c0       	push   0xc00222b3
c0013e19:	50                   	push   eax
c0013e1a:	e8 f7 c9 ff ff       	call   c0010816 <Device::Device(char const*)>
c0013e1f:	83 c4 10             	add    esp,0x10
c0013e22:	ba 5c 24 02 c0       	mov    edx,0xc002245c
c0013e27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e2b:	89 10                	mov    DWORD PTR [eax],edx
c0013e2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e31:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0013e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e3c:	c7 80 5c 21 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x215c],0x0
c0013e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e4a:	c7 80 60 22 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x2260],0x0
c0013e54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013e58:	c6 80 64 22 00 00 00 	mov    BYTE PTR [eax+0x2264],0x0
c0013e5f:	e8 ea fb ff ff       	call   c0013a4e <scanMADT()>
c0013e64:	90                   	nop
c0013e65:	83 c4 0c             	add    esp,0xc
c0013e68:	c3                   	ret    
c0013e69:	90                   	nop

c0013e6a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0013e6a:	83 ec 2c             	sub    esp,0x2c
c0013e6d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0013e71:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013e75:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0013e79:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0013e7d:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0013e82:	88 d0                	mov    al,dl
c0013e84:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013e88:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0013e8d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013e95:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e99:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013e9f:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0013ea3:	0f 8d 97 00 00 00    	jge    c0013f40 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0013ea9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ead:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013eb1:	83 c2 2a             	add    edx,0x2a
c0013eb4:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0013eb8:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0013ebd:	75 78                	jne    c0013f37 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013ebf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013ec3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ec7:	83 c2 2a             	add    edx,0x2a
c0013eca:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0013ece:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0013ed2:	75 63                	jne    c0013f37 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0013ed4:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0013ed9:	74 3a                	je     c0013f15 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0013edb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013edf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013ee3:	83 c2 2a             	add    edx,0x2a
c0013ee6:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0013eea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013eee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0013ef1:	39 c2                	cmp    edx,eax
c0013ef3:	74 10                	je     c0013f05 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0013ef5:	83 ec 0c             	sub    esp,0xc
c0013ef8:	68 c0 23 02 c0       	push   0xc00223c0
c0013efd:	e8 3e 1b 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c0013f02:	83 c4 10             	add    esp,0x10
c0013f05:	83 ec 0c             	sub    esp,0xc
c0013f08:	68 b8 22 02 c0       	push   0xc00222b8
c0013f0d:	e8 2e 1b 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c0013f12:	83 c4 10             	add    esp,0x10
c0013f15:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0013f19:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013f1d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013f21:	83 c2 2a             	add    edx,0x2a
c0013f24:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0013f28:	8b 02                	mov    eax,DWORD PTR [edx]
c0013f2a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0013f2d:	89 01                	mov    DWORD PTR [ecx],eax
c0013f2f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0013f32:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0013f37:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0013f3b:	e9 55 ff ff ff       	jmp    c0013e95 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0013f40:	90                   	nop
c0013f41:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013f45:	83 c4 2c             	add    esp,0x2c
c0013f48:	c2 04 00             	ret    0x4
c0013f4b:	90                   	nop

c0013f4c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0013f4c:	56                   	push   esi
c0013f4d:	53                   	push   ebx
c0013f4e:	83 ec 14             	sub    esp,0x14
c0013f51:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013f55:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013f59:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0013f5d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0013f62:	88 c8                	mov    al,cl
c0013f64:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0013f68:	88 d0                	mov    al,dl
c0013f6a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0013f6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f72:	8d b0 5c 01 00 00    	lea    esi,[eax+0x15c]
c0013f78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f7c:	8b 98 5c 21 00 00    	mov    ebx,DWORD PTR [eax+0x215c]
c0013f82:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0013f86:	31 c9                	xor    ecx,ecx
c0013f88:	88 c1                	mov    cl,al
c0013f8a:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013f8e:	31 d2                	xor    edx,edx
c0013f90:	88 c2                	mov    dl,al
c0013f92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013f96:	25 ff ff 00 00       	and    eax,0xffff
c0013f9b:	83 ec 04             	sub    esp,0x4
c0013f9e:	56                   	push   esi
c0013f9f:	53                   	push   ebx
c0013fa0:	51                   	push   ecx
c0013fa1:	52                   	push   edx
c0013fa2:	50                   	push   eax
c0013fa3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013fa7:	68 f0 23 02 c0       	push   0xc00223f0
c0013fac:	e8 60 b2 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0013fb1:	83 c4 20             	add    esp,0x20
c0013fb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fb8:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013fbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fc2:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0013fc5:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0013fc9:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0013fcd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013fd1:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0013fd7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013fdb:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0013fde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013fe2:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0013fe7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013feb:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c0013ff1:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0013ff5:	8d 48 01             	lea    ecx,[eax+0x1]
c0013ff8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013ffc:	83 c2 2a             	add    edx,0x2a
c0013fff:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0014003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014007:	8b 90 5c 21 00 00    	mov    edx,DWORD PTR [eax+0x215c]
c001400d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014011:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0014014:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014018:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001401c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014020:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c0014026:	8d 50 01             	lea    edx,[eax+0x1]
c0014029:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001402d:	89 90 5c 21 00 00    	mov    DWORD PTR [eax+0x215c],edx
c0014033:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014037:	8b 80 5c 21 00 00    	mov    eax,DWORD PTR [eax+0x215c]
c001403d:	3d 00 08 00 00       	cmp    eax,0x800
c0014042:	75 10                	jne    c0014054 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0x108>
c0014044:	83 ec 0c             	sub    esp,0xc
c0014047:	68 c7 22 02 c0       	push   0xc00222c7
c001404c:	e8 ef 19 00 00       	call   c0015a40 <Krnl::panic(char const*)>
c0014051:	83 c4 10             	add    esp,0x10
c0014054:	90                   	nop
c0014055:	83 c4 14             	add    esp,0x14
c0014058:	5b                   	pop    ebx
c0014059:	5e                   	pop    esi
c001405a:	c3                   	ret    
c001405b:	90                   	nop

c001405c <ACPI::setScreenBrightnessLevel(void*, int)>:
c001405c:	b8 00 00 00 00       	mov    eax,0x0
c0014061:	c3                   	ret    

c0014062 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0014062:	83 ec 1c             	sub    esp,0x1c
c0014065:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014069:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c001406c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014070:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c0014076:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001407a:	25 ff 00 00 00       	and    eax,0xff
c001407f:	83 ec 08             	sub    esp,0x8
c0014082:	50                   	push   eax
c0014083:	52                   	push   edx
c0014084:	e8 63 75 ff ff       	call   c000b5ec <Computer::readCMOS(unsigned char)>
c0014089:	83 c4 10             	add    esp,0x10
c001408c:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0014090:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c0014096:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001409a:	25 ff 00 00 00       	and    eax,0xff
c001409f:	83 ec 04             	sub    esp,0x4
c00140a2:	6a 01                	push   0x1
c00140a4:	50                   	push   eax
c00140a5:	52                   	push   edx
c00140a6:	e8 59 76 ff ff       	call   c000b704 <Computer::writeCMOS(unsigned char, unsigned char)>
c00140ab:	83 c4 10             	add    esp,0x10
c00140ae:	90                   	nop
c00140af:	83 c4 1c             	add    esp,0x1c
c00140b2:	c3                   	ret    
c00140b3:	90                   	nop

c00140b4 <ACPI::open(int, int, void*)>:
c00140b4:	53                   	push   ebx
c00140b5:	83 ec 18             	sub    esp,0x18
c00140b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140bc:	c6 80 64 22 00 00 01 	mov    BYTE PTR [eax+0x2264],0x1
c00140c3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140c7:	8a 80 64 22 00 00    	mov    al,BYTE PTR [eax+0x2264]
c00140cd:	84 c0                	test   al,al
c00140cf:	74 60                	je     c0014131 <ACPI::open(int, int, void*)+0x7d>
c00140d1:	83 ec 0c             	sub    esp,0xc
c00140d4:	68 58 01 00 00       	push   0x158
c00140d9:	e8 fe af ff ff       	call   c000f0dc <operator new(unsigned long)>
c00140de:	83 c4 10             	add    esp,0x10
c00140e1:	89 c3                	mov    ebx,eax
c00140e3:	83 ec 0c             	sub    esp,0xc
c00140e6:	53                   	push   ebx
c00140e7:	e8 a8 80 00 00       	call   c001c194 <PCI::PCI()>
c00140ec:	83 c4 10             	add    esp,0x10
c00140ef:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00140f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00140f7:	83 ec 08             	sub    esp,0x8
c00140fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00140fe:	50                   	push   eax
c00140ff:	e8 22 c5 ff ff       	call   c0010626 <Device::addChild(Device*)>
c0014104:	83 c4 10             	add    esp,0x10
c0014107:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001410b:	8b 00                	mov    eax,DWORD PTR [eax]
c001410d:	83 c0 08             	add    eax,0x8
c0014110:	8b 00                	mov    eax,DWORD PTR [eax]
c0014112:	6a 00                	push   0x0
c0014114:	6a 00                	push   0x0
c0014116:	6a 00                	push   0x0
c0014118:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001411c:	ff d0                	call   eax
c001411e:	83 c4 10             	add    esp,0x10
c0014121:	83 ec 0c             	sub    esp,0xc
c0014124:	68 e4 22 02 c0       	push   0xc00222e4
c0014129:	e8 e3 b0 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001412e:	83 c4 10             	add    esp,0x10
c0014131:	83 ec 0c             	sub    esp,0xc
c0014134:	68 ef 22 02 c0       	push   0xc00222ef
c0014139:	e8 43 38 00 00       	call   c0017981 <Thr::loadKernelSymbolTable(char const*)>
c001413e:	83 c4 10             	add    esp,0x10
c0014141:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c0014147:	83 ec 08             	sub    esp,0x8
c001414a:	6a 01                	push   0x1
c001414c:	68 0d 23 02 c0       	push   0xc002230d
c0014151:	e8 0d 43 00 00       	call   c0018463 <Thr::loadDLL(char const*, bool)>
c0014156:	83 c4 10             	add    esp,0x10
c0014159:	83 ec 08             	sub    esp,0x8
c001415c:	53                   	push   ebx
c001415d:	50                   	push   eax
c001415e:	e8 c6 44 00 00       	call   c0018629 <Thr::executeDLL(unsigned long, void*)>
c0014163:	83 c4 10             	add    esp,0x10
c0014166:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c001416c:	83 ec 08             	sub    esp,0x8
c001416f:	6a 01                	push   0x1
c0014171:	68 2a 23 02 c0       	push   0xc002232a
c0014176:	e8 e8 42 00 00       	call   c0018463 <Thr::loadDLL(char const*, bool)>
c001417b:	83 c4 10             	add    esp,0x10
c001417e:	83 ec 08             	sub    esp,0x8
c0014181:	53                   	push   ebx
c0014182:	50                   	push   eax
c0014183:	e8 a1 44 00 00       	call   c0018629 <Thr::executeDLL(unsigned long, void*)>
c0014188:	83 c4 10             	add    esp,0x10
c001418b:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0014190:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0014196:	83 e0 04             	and    eax,0x4
c0014199:	84 c0                	test   al,al
c001419b:	0f 84 cf 00 00 00    	je     c0014270 <ACPI::open(int, int, void*)+0x1bc>
c00141a1:	83 ec 0c             	sub    esp,0xc
c00141a4:	68 14 01 00 00       	push   0x114
c00141a9:	e8 2e af ff ff       	call   c000f0dc <operator new(unsigned long)>
c00141ae:	83 c4 10             	add    esp,0x10
c00141b1:	89 c3                	mov    ebx,eax
c00141b3:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c00141b8:	83 ec 04             	sub    esp,0x4
c00141bb:	50                   	push   eax
c00141bc:	68 47 23 02 c0       	push   0xc0022347
c00141c1:	53                   	push   ebx
c00141c2:	e8 81 b5 ff ff       	call   c000f748 <File::File(char const*, Process*)>
c00141c7:	83 c4 10             	add    esp,0x10
c00141ca:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00141ce:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00141d3:	74 17                	je     c00141ec <ACPI::open(int, int, void*)+0x138>
c00141d5:	83 ec 0c             	sub    esp,0xc
c00141d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00141dc:	e8 39 b8 ff ff       	call   c000fa1a <File::exists()>
c00141e1:	83 c4 10             	add    esp,0x10
c00141e4:	84 c0                	test   al,al
c00141e6:	74 04                	je     c00141ec <ACPI::open(int, int, void*)+0x138>
c00141e8:	b0 01                	mov    al,0x1
c00141ea:	eb 02                	jmp    c00141ee <ACPI::open(int, int, void*)+0x13a>
c00141ec:	b0 00                	mov    al,0x0
c00141ee:	84 c0                	test   al,al
c00141f0:	74 25                	je     c0014217 <ACPI::open(int, int, void*)+0x163>
c00141f2:	8b 1d a8 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247a8
c00141f8:	83 ec 08             	sub    esp,0x8
c00141fb:	6a 01                	push   0x1
c00141fd:	68 47 23 02 c0       	push   0xc0022347
c0014202:	e8 5c 42 00 00       	call   c0018463 <Thr::loadDLL(char const*, bool)>
c0014207:	83 c4 10             	add    esp,0x10
c001420a:	83 ec 08             	sub    esp,0x8
c001420d:	53                   	push   ebx
c001420e:	50                   	push   eax
c001420f:	e8 15 44 00 00       	call   c0018629 <Thr::executeDLL(unsigned long, void*)>
c0014214:	83 c4 10             	add    esp,0x10
c0014217:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001421c:	74 1e                	je     c001423c <ACPI::open(int, int, void*)+0x188>
c001421e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0014223:	74 17                	je     c001423c <ACPI::open(int, int, void*)+0x188>
c0014225:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014229:	8b 00                	mov    eax,DWORD PTR [eax]
c001422b:	83 c0 08             	add    eax,0x8
c001422e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014230:	83 ec 0c             	sub    esp,0xc
c0014233:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014237:	ff d0                	call   eax
c0014239:	83 c4 10             	add    esp,0x10
c001423c:	a1 48 50 02 c0       	mov    eax,ds:0xc0025048
c0014241:	83 ec 08             	sub    esp,0x8
c0014244:	68 64 23 02 c0       	push   0xc0022364
c0014249:	50                   	push   eax
c001424a:	e8 63 f7 ff ff       	call   c00139b2 <findDataTable(unsigned char*, char*)>
c001424f:	83 c4 10             	add    esp,0x10
c0014252:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014256:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001425b:	74 13                	je     c0014270 <ACPI::open(int, int, void*)+0x1bc>
c001425d:	83 ec 08             	sub    esp,0x8
c0014260:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014264:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014268:	e8 f5 fd ff ff       	call   c0014062 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c001426d:	83 c4 10             	add    esp,0x10
c0014270:	b8 00 00 00 00       	mov    eax,0x0
c0014275:	83 c4 18             	add    esp,0x18
c0014278:	5b                   	pop    ebx
c0014279:	c3                   	ret    

c001427a <ACPI::sleep()>:
c001427a:	83 ec 0c             	sub    esp,0xc
c001427d:	a1 20 4e 02 c0       	mov    eax,ds:0xc0024e20
c0014282:	85 c0                	test   eax,eax
c0014284:	74 07                	je     c001428d <ACPI::sleep()+0x13>
c0014286:	a1 20 4e 02 c0       	mov    eax,ds:0xc0024e20
c001428b:	ff d0                	call   eax
c001428d:	90                   	nop
c001428e:	83 c4 0c             	add    esp,0xc
c0014291:	c3                   	ret    

c0014292 <CPU::close(int, int, void*)>:
c0014292:	31 c0                	xor    eax,eax
c0014294:	c3                   	ret    

c0014295 <lookupAMDCPUName(unsigned char, unsigned char)>:
c0014295:	55                   	push   ebp
c0014296:	57                   	push   edi
c0014297:	56                   	push   esi
c0014298:	53                   	push   ebx
c0014299:	51                   	push   ecx
c001429a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001429e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00142a2:	89 d6                	mov    esi,edx
c00142a4:	89 cd                	mov    ebp,ecx
c00142a6:	80 fa 04             	cmp    dl,0x4
c00142a9:	75 28                	jne    c00142d3 <lookupAMDCPUName(unsigned char, unsigned char)+0x3e>
c00142ab:	8d 41 f9             	lea    eax,[ecx-0x7]
c00142ae:	3c 03                	cmp    al,0x3
c00142b0:	0f 86 64 01 00 00    	jbe    c001441a <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c00142b6:	80 f9 03             	cmp    cl,0x3
c00142b9:	0f 84 5b 01 00 00    	je     c001441a <lookupAMDCPUName(unsigned char, unsigned char)+0x185>
c00142bf:	8d 79 f2             	lea    edi,[ecx-0xe]
c00142c2:	b8 d0 40 02 c0       	mov    eax,0xc00240d0
c00142c7:	89 fb                	mov    ebx,edi
c00142c9:	80 fb 01             	cmp    bl,0x1
c00142cc:	77 4e                	ja     c001431c <lookupAMDCPUName(unsigned char, unsigned char)+0x87>
c00142ce:	e9 61 01 00 00       	jmp    c0014434 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142d3:	80 fa 05             	cmp    dl,0x5
c00142d6:	75 4d                	jne    c0014325 <lookupAMDCPUName(unsigned char, unsigned char)+0x90>
c00142d8:	b8 e0 40 02 c0       	mov    eax,0xc00240e0
c00142dd:	80 f9 03             	cmp    cl,0x3
c00142e0:	0f 86 4e 01 00 00    	jbe    c0014434 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142e6:	8d 79 fa             	lea    edi,[ecx-0x6]
c00142e9:	b8 f0 40 02 c0       	mov    eax,0xc00240f0
c00142ee:	89 fb                	mov    ebx,edi
c00142f0:	80 fb 01             	cmp    bl,0x1
c00142f3:	0f 86 3b 01 00 00    	jbe    c0014434 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00142f9:	b8 00 41 02 c0       	mov    eax,0xc0024100
c00142fe:	80 f9 08             	cmp    cl,0x8
c0014301:	0f 84 2d 01 00 00    	je     c0014434 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014307:	89 cf                	mov    edi,ecx
c0014309:	b8 10 41 02 c0       	mov    eax,0xc0024110
c001430e:	83 e7 fb             	and    edi,0xfffffffb
c0014311:	89 fb                	mov    ebx,edi
c0014313:	80 fb 09             	cmp    bl,0x9
c0014316:	0f 84 18 01 00 00    	je     c0014434 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001431c:	31 c0                	xor    eax,eax
c001431e:	89 eb                	mov    ebx,ebp
c0014320:	0f b6 fb             	movzx  edi,bl
c0014323:	eb 30                	jmp    c0014355 <lookupAMDCPUName(unsigned char, unsigned char)+0xc0>
c0014325:	31 c0                	xor    eax,eax
c0014327:	80 fa 06             	cmp    dl,0x6
c001432a:	75 f2                	jne    c001431e <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c001432c:	80 f9 0a             	cmp    cl,0xa
c001432f:	77 ed                	ja     c001431e <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c0014331:	bf de 05 00 00       	mov    edi,0x5de
c0014336:	0f a3 cf             	bt     edi,ecx
c0014339:	73 e3                	jae    c001431e <lookupAMDCPUName(unsigned char, unsigned char)+0x89>
c001433b:	b8 20 41 02 c0       	mov    eax,0xc0024120
c0014340:	e9 ef 00 00 00       	jmp    c0014434 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014345:	39 c7                	cmp    edi,eax
c0014347:	0f 84 d4 00 00 00    	je     c0014421 <lookupAMDCPUName(unsigned char, unsigned char)+0x18c>
c001434d:	40                   	inc    eax
c001434e:	3d d0 00 00 00       	cmp    eax,0xd0
c0014353:	74 09                	je     c001435e <lookupAMDCPUName(unsigned char, unsigned char)+0xc9>
c0014355:	89 f3                	mov    ebx,esi
c0014357:	80 fb 0f             	cmp    bl,0xf
c001435a:	75 f1                	jne    c001434d <lookupAMDCPUName(unsigned char, unsigned char)+0xb8>
c001435c:	eb e7                	jmp    c0014345 <lookupAMDCPUName(unsigned char, unsigned char)+0xb0>
c001435e:	80 fa 10             	cmp    dl,0x10
c0014361:	75 19                	jne    c001437c <lookupAMDCPUName(unsigned char, unsigned char)+0xe7>
c0014363:	8d 41 fc             	lea    eax,[ecx-0x4]
c0014366:	83 e0 fb             	and    eax,0xfffffffb
c0014369:	3c 02                	cmp    al,0x2
c001436b:	0f 86 b7 00 00 00    	jbe    c0014428 <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c0014371:	80 f9 02             	cmp    cl,0x2
c0014374:	0f 84 ae 00 00 00    	je     c0014428 <lookupAMDCPUName(unsigned char, unsigned char)+0x193>
c001437a:	eb 13                	jmp    c001438f <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c001437c:	80 fa 11             	cmp    dl,0x11
c001437f:	75 0e                	jne    c001438f <lookupAMDCPUName(unsigned char, unsigned char)+0xfa>
c0014381:	b8 30 41 02 c0       	mov    eax,0xc0024130
c0014386:	80 f9 03             	cmp    cl,0x3
c0014389:	0f 84 a5 00 00 00    	je     c0014434 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001438f:	80 fa 12             	cmp    dl,0x12
c0014392:	75 0e                	jne    c00143a2 <lookupAMDCPUName(unsigned char, unsigned char)+0x10d>
c0014394:	b8 40 41 02 c0       	mov    eax,0xc0024140
c0014399:	80 f9 01             	cmp    cl,0x1
c001439c:	0f 84 92 00 00 00    	je     c0014434 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143a2:	80 fa 14             	cmp    dl,0x14
c00143a5:	be 01 00 00 00       	mov    esi,0x1
c00143aa:	0f 94 c3             	sete   bl
c00143ad:	80 f9 13             	cmp    cl,0x13
c00143b0:	77 0c                	ja     c00143be <lookupAMDCPUName(unsigned char, unsigned char)+0x129>
c00143b2:	be 04 00 09 00       	mov    esi,0x90004
c00143b7:	d3 ee                	shr    esi,cl
c00143b9:	f7 d6                	not    esi
c00143bb:	83 e6 01             	and    esi,0x1
c00143be:	8d 41 ff             	lea    eax,[ecx-0x1]
c00143c1:	3c 01                	cmp    al,0x1
c00143c3:	b8 50 41 02 c0       	mov    eax,0xc0024150
c00143c8:	0f 96 44 24 03       	setbe  BYTE PTR [esp+0x3]
c00143cd:	84 5c 24 03          	test   BYTE PTR [esp+0x3],bl
c00143d1:	75 61                	jne    c0014434 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143d3:	80 fa 15             	cmp    dl,0x15
c00143d6:	75 1f                	jne    c00143f7 <lookupAMDCPUName(unsigned char, unsigned char)+0x162>
c00143d8:	b8 60 41 02 c0       	mov    eax,0xc0024160
c00143dd:	80 f9 01             	cmp    cl,0x1
c00143e0:	74 52                	je     c0014434 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143e2:	89 f3                	mov    ebx,esi
c00143e4:	b8 70 41 02 c0       	mov    eax,0xc0024170
c00143e9:	84 db                	test   bl,bl
c00143eb:	74 47                	je     c0014434 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143ed:	b8 80 41 02 c0       	mov    eax,0xc0024180
c00143f2:	80 f9 30             	cmp    cl,0x30
c00143f5:	74 3d                	je     c0014434 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c00143f7:	80 fa 16             	cmp    dl,0x16
c00143fa:	0f 94 c2             	sete   dl
c00143fd:	84 c9                	test   cl,cl
c00143ff:	75 09                	jne    c001440a <lookupAMDCPUName(unsigned char, unsigned char)+0x175>
c0014401:	b8 90 41 02 c0       	mov    eax,0xc0024190
c0014406:	84 d2                	test   dl,dl
c0014408:	75 2a                	jne    c0014434 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001440a:	80 f9 30             	cmp    cl,0x30
c001440d:	75 20                	jne    c001442f <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c001440f:	b8 a0 41 02 c0       	mov    eax,0xc00241a0
c0014414:	84 d2                	test   dl,dl
c0014416:	75 1c                	jne    c0014434 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014418:	eb 15                	jmp    c001442f <lookupAMDCPUName(unsigned char, unsigned char)+0x19a>
c001441a:	b8 c0 40 02 c0       	mov    eax,0xc00240c0
c001441f:	eb 13                	jmp    c0014434 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014421:	b8 30 41 02 c0       	mov    eax,0xc0024130
c0014426:	eb 0c                	jmp    c0014434 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c0014428:	b8 40 41 02 c0       	mov    eax,0xc0024140
c001442d:	eb 05                	jmp    c0014434 <lookupAMDCPUName(unsigned char, unsigned char)+0x19f>
c001442f:	b8 72 27 02 c0       	mov    eax,0xc0022772
c0014434:	5a                   	pop    edx
c0014435:	5b                   	pop    ebx
c0014436:	5e                   	pop    esi
c0014437:	5f                   	pop    edi
c0014438:	5d                   	pop    ebp
c0014439:	c3                   	ret    

c001443a <lookupIntelCPUName(unsigned char, unsigned char)>:
c001443a:	53                   	push   ebx
c001443b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001443f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014443:	80 f9 04             	cmp    cl,0x4
c0014446:	75 6a                	jne    c00144b2 <lookupIntelCPUName(unsigned char, unsigned char)+0x78>
c0014448:	b8 20 3f 02 c0       	mov    eax,0xc0023f20
c001444d:	80 fa 01             	cmp    dl,0x1
c0014450:	0f 86 9b 02 00 00    	jbe    c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014456:	b8 30 3f 02 c0       	mov    eax,0xc0023f30
c001445b:	80 fa 02             	cmp    dl,0x2
c001445e:	0f 84 8d 02 00 00    	je     c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014464:	b8 40 3f 02 c0       	mov    eax,0xc0023f40
c0014469:	80 fa 03             	cmp    dl,0x3
c001446c:	0f 84 7f 02 00 00    	je     c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014472:	b8 50 3f 02 c0       	mov    eax,0xc0023f50
c0014477:	80 fa 04             	cmp    dl,0x4
c001447a:	0f 84 71 02 00 00    	je     c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014480:	b8 60 3f 02 c0       	mov    eax,0xc0023f60
c0014485:	80 fa 05             	cmp    dl,0x5
c0014488:	0f 84 63 02 00 00    	je     c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001448e:	b8 40 3f 02 c0       	mov    eax,0xc0023f40
c0014493:	80 fa 07             	cmp    dl,0x7
c0014496:	0f 84 55 02 00 00    	je     c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001449c:	8d 5a f8             	lea    ebx,[edx-0x8]
c001449f:	b8 70 3f 02 c0       	mov    eax,0xc0023f70
c00144a4:	80 fb 01             	cmp    bl,0x1
c00144a7:	0f 87 e0 01 00 00    	ja     c001468d <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c00144ad:	e9 3f 02 00 00       	jmp    c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144b2:	80 f9 05             	cmp    cl,0x5
c00144b5:	75 3e                	jne    c00144f5 <lookupIntelCPUName(unsigned char, unsigned char)+0xbb>
c00144b7:	8d 5a ff             	lea    ebx,[edx-0x1]
c00144ba:	b8 80 3f 02 c0       	mov    eax,0xc0023f80
c00144bf:	80 fb 02             	cmp    bl,0x2
c00144c2:	0f 86 29 02 00 00    	jbe    c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144c8:	80 fa 04             	cmp    dl,0x4
c00144cb:	0f 84 f1 01 00 00    	je     c00146c2 <lookupIntelCPUName(unsigned char, unsigned char)+0x288>
c00144d1:	80 fa 07             	cmp    dl,0x7
c00144d4:	0f 84 17 02 00 00    	je     c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144da:	b8 90 3f 02 c0       	mov    eax,0xc0023f90
c00144df:	80 fa 08             	cmp    dl,0x8
c00144e2:	0f 84 09 02 00 00    	je     c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00144e8:	b8 a0 3f 02 c0       	mov    eax,0xc0023fa0
c00144ed:	80 fa 09             	cmp    dl,0x9
c00144f0:	e9 96 01 00 00       	jmp    c001468b <lookupIntelCPUName(unsigned char, unsigned char)+0x251>
c00144f5:	80 f9 06             	cmp    cl,0x6
c00144f8:	0f 85 80 01 00 00    	jne    c001467e <lookupIntelCPUName(unsigned char, unsigned char)+0x244>
c00144fe:	b8 b0 3f 02 c0       	mov    eax,0xc0023fb0
c0014503:	80 fa 01             	cmp    dl,0x1
c0014506:	0f 84 e5 01 00 00    	je     c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001450c:	8d 42 fb             	lea    eax,[edx-0x5]
c001450f:	3c 01                	cmp    al,0x1
c0014511:	0f 86 b2 01 00 00    	jbe    c00146c9 <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c0014517:	80 fa 03             	cmp    dl,0x3
c001451a:	0f 84 a9 01 00 00    	je     c00146c9 <lookupIntelCPUName(unsigned char, unsigned char)+0x28f>
c0014520:	8d 5a f9             	lea    ebx,[edx-0x7]
c0014523:	b8 d0 3f 02 c0       	mov    eax,0xc0023fd0
c0014528:	80 fb 01             	cmp    bl,0x1
c001452b:	0f 86 c0 01 00 00    	jbe    c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014531:	80 fa 09             	cmp    dl,0x9
c0014534:	0f 84 96 01 00 00    	je     c00146d0 <lookupIntelCPUName(unsigned char, unsigned char)+0x296>
c001453a:	8d 5a f6             	lea    ebx,[edx-0xa]
c001453d:	80 fb 01             	cmp    bl,0x1
c0014540:	0f 86 ab 01 00 00    	jbe    c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014546:	b8 e0 3f 02 c0       	mov    eax,0xc0023fe0
c001454b:	80 fa 0d             	cmp    dl,0xd
c001454e:	0f 84 9d 01 00 00    	je     c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014554:	b8 f0 3f 02 c0       	mov    eax,0xc0023ff0
c0014559:	80 fa 0e             	cmp    dl,0xe
c001455c:	0f 84 8f 01 00 00    	je     c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014562:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0014567:	80 fa 0f             	cmp    dl,0xf
c001456a:	0f 84 81 01 00 00    	je     c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014570:	b8 e0 3f 02 c0       	mov    eax,0xc0023fe0
c0014575:	80 fa 15             	cmp    dl,0x15
c0014578:	0f 84 73 01 00 00    	je     c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001457e:	8d 5a ea             	lea    ebx,[edx-0x16]
c0014581:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0014586:	80 fb 01             	cmp    bl,0x1
c0014589:	0f 86 62 01 00 00    	jbe    c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001458f:	80 fa 1a             	cmp    dl,0x1a
c0014592:	0f 84 3f 01 00 00    	je     c00146d7 <lookupIntelCPUName(unsigned char, unsigned char)+0x29d>
c0014598:	80 fa 1c             	cmp    dl,0x1c
c001459b:	0f 84 3d 01 00 00    	je     c00146de <lookupIntelCPUName(unsigned char, unsigned char)+0x2a4>
c00145a1:	80 fa 1d             	cmp    dl,0x1d
c00145a4:	0f 84 47 01 00 00    	je     c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145aa:	b8 30 40 02 c0       	mov    eax,0xc0024030
c00145af:	80 fa 25             	cmp    dl,0x25
c00145b2:	0f 84 39 01 00 00    	je     c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145b8:	8d 5a da             	lea    ebx,[edx-0x26]
c00145bb:	b8 20 40 02 c0       	mov    eax,0xc0024020
c00145c0:	80 fb 01             	cmp    bl,0x1
c00145c3:	0f 86 28 01 00 00    	jbe    c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145c9:	b8 40 40 02 c0       	mov    eax,0xc0024040
c00145ce:	80 fa 2a             	cmp    dl,0x2a
c00145d1:	0f 84 1a 01 00 00    	je     c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145d7:	b8 30 40 02 c0       	mov    eax,0xc0024030
c00145dc:	80 fa 2c             	cmp    dl,0x2c
c00145df:	0f 84 0c 01 00 00    	je     c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145e5:	b8 40 40 02 c0       	mov    eax,0xc0024040
c00145ea:	80 fa 2d             	cmp    dl,0x2d
c00145ed:	0f 84 fe 00 00 00    	je     c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00145f3:	b8 10 40 02 c0       	mov    eax,0xc0024010
c00145f8:	80 fa 2e             	cmp    dl,0x2e
c00145fb:	0f 84 f0 00 00 00    	je     c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014601:	b8 30 40 02 c0       	mov    eax,0xc0024030
c0014606:	80 fa 2f             	cmp    dl,0x2f
c0014609:	0f 84 e2 00 00 00    	je     c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001460f:	8d 5a cb             	lea    ebx,[edx-0x35]
c0014612:	b8 20 40 02 c0       	mov    eax,0xc0024020
c0014617:	80 fb 01             	cmp    bl,0x1
c001461a:	0f 86 d1 00 00 00    	jbe    c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014620:	b8 50 40 02 c0       	mov    eax,0xc0024050
c0014625:	80 fa 37             	cmp    dl,0x37
c0014628:	0f 84 c3 00 00 00    	je     c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001462e:	b8 60 40 02 c0       	mov    eax,0xc0024060
c0014633:	80 fa 3a             	cmp    dl,0x3a
c0014636:	0f 84 b5 00 00 00    	je     c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001463c:	b8 70 40 02 c0       	mov    eax,0xc0024070
c0014641:	80 fa 3c             	cmp    dl,0x3c
c0014644:	0f 84 a7 00 00 00    	je     c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001464a:	b8 80 40 02 c0       	mov    eax,0xc0024080
c001464f:	80 fa 3d             	cmp    dl,0x3d
c0014652:	0f 84 99 00 00 00    	je     c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014658:	b8 60 40 02 c0       	mov    eax,0xc0024060
c001465d:	80 fa 3e             	cmp    dl,0x3e
c0014660:	0f 84 8b 00 00 00    	je     c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c0014666:	8d 42 bb             	lea    eax,[edx-0x45]
c0014669:	3c 01                	cmp    al,0x1
c001466b:	76 78                	jbe    c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c001466d:	80 fa 3f             	cmp    dl,0x3f
c0014670:	74 73                	je     c00146e5 <lookupIntelCPUName(unsigned char, unsigned char)+0x2ab>
c0014672:	80 fa 4a             	cmp    dl,0x4a
c0014675:	74 75                	je     c00146ec <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c0014677:	80 fa 4d             	cmp    dl,0x4d
c001467a:	75 11                	jne    c001468d <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c001467c:	eb 6e                	jmp    c00146ec <lookupIntelCPUName(unsigned char, unsigned char)+0x2b2>
c001467e:	80 f9 0b             	cmp    cl,0xb
c0014681:	75 0a                	jne    c001468d <lookupIntelCPUName(unsigned char, unsigned char)+0x253>
c0014683:	b8 90 40 02 c0       	mov    eax,0xc0024090
c0014688:	80 fa 01             	cmp    dl,0x1
c001468b:	74 64                	je     c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c001468d:	80 f9 0f             	cmp    cl,0xf
c0014690:	b8 a0 40 02 c0       	mov    eax,0xc00240a0
c0014695:	0f 94 c1             	sete   cl
c0014698:	80 fa 02             	cmp    dl,0x2
c001469b:	0f 96 c3             	setbe  bl
c001469e:	84 cb                	test   bl,cl
c00146a0:	75 4f                	jne    c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146a2:	8d 42 fd             	lea    eax,[edx-0x3]
c00146a5:	3c 01                	cmp    al,0x1
c00146a7:	0f 96 c0             	setbe  al
c00146aa:	80 fa 06             	cmp    dl,0x6
c00146ad:	0f 94 c2             	sete   dl
c00146b0:	09 c2                	or     edx,eax
c00146b2:	b8 72 27 02 c0       	mov    eax,0xc0022772
c00146b7:	84 ca                	test   dl,cl
c00146b9:	74 36                	je     c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146bb:	b8 b0 40 02 c0       	mov    eax,0xc00240b0
c00146c0:	eb 2f                	jmp    c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146c2:	b8 90 3f 02 c0       	mov    eax,0xc0023f90
c00146c7:	eb 28                	jmp    c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146c9:	b8 c0 3f 02 c0       	mov    eax,0xc0023fc0
c00146ce:	eb 21                	jmp    c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146d0:	b8 e0 3f 02 c0       	mov    eax,0xc0023fe0
c00146d5:	eb 1a                	jmp    c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146d7:	b8 10 40 02 c0       	mov    eax,0xc0024010
c00146dc:	eb 13                	jmp    c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146de:	b8 20 40 02 c0       	mov    eax,0xc0024020
c00146e3:	eb 0c                	jmp    c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146e5:	b8 70 40 02 c0       	mov    eax,0xc0024070
c00146ea:	eb 05                	jmp    c00146f1 <lookupIntelCPUName(unsigned char, unsigned char)+0x2b7>
c00146ec:	b8 50 40 02 c0       	mov    eax,0xc0024050
c00146f1:	5b                   	pop    ebx
c00146f2:	c3                   	ret    

c00146f3 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c00146f3:	60                   	pusha  
c00146f4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00146f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00146fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014700:	9c                   	pushf  
c0014701:	fa                   	cli    
c0014702:	0f 09                	wbinvd 
c0014704:	0f 30                	wrmsr  
c0014706:	9d                   	popf   
c0014707:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001470b:	89 02                	mov    DWORD PTR [edx],eax
c001470d:	61                   	popa   
c001470e:	c3                   	ret    

c001470f <AMD_K6_read_msr(unsigned int, REGS*)>:
c001470f:	60                   	pusha  
c0014710:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0014714:	9c                   	pushf  
c0014715:	fa                   	cli    
c0014716:	0f 09                	wbinvd 
c0014718:	31 c0                	xor    eax,eax
c001471a:	31 d2                	xor    edx,edx
c001471c:	0f 32                	rdmsr  
c001471e:	9d                   	popf   
c001471f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014723:	89 02                	mov    DWORD PTR [edx],eax
c0014725:	61                   	popa   
c0014726:	c3                   	ret    

c0014727 <AMD_K6_writeback(int, int, int)>:
c0014727:	56                   	push   esi
c0014728:	53                   	push   ebx
c0014729:	83 ec 10             	sub    esp,0x10
c001472c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014730:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0014735:	75 5d                	jne    c0014794 <AMD_K6_writeback(int, int, int)+0x6d>
c0014737:	83 f8 08             	cmp    eax,0x8
c001473a:	75 09                	jne    c0014745 <AMD_K6_writeback(int, int, int)+0x1e>
c001473c:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0014741:	7e 13                	jle    c0014756 <AMD_K6_writeback(int, int, int)+0x2f>
c0014743:	eb 30                	jmp    c0014775 <AMD_K6_writeback(int, int, int)+0x4e>
c0014745:	83 f8 06             	cmp    eax,0x6
c0014748:	7c 4a                	jl     c0014794 <AMD_K6_writeback(int, int, int)+0x6d>
c001474a:	83 f8 07             	cmp    eax,0x7
c001474d:	7e 07                	jle    c0014756 <AMD_K6_writeback(int, int, int)+0x2f>
c001474f:	83 f8 09             	cmp    eax,0x9
c0014752:	74 21                	je     c0014775 <AMD_K6_writeback(int, int, int)+0x4e>
c0014754:	eb 3e                	jmp    c0014794 <AMD_K6_writeback(int, int, int)+0x6d>
c0014756:	89 e6                	mov    esi,esp
c0014758:	8b 1d e4 47 02 c0    	mov    ebx,DWORD PTR ds:0xc00247e4
c001475e:	c1 eb 15             	shr    ebx,0x15
c0014761:	56                   	push   esi
c0014762:	68 82 00 00 c0       	push   0xc0000082
c0014767:	e8 a3 ff ff ff       	call   c001470f <AMD_K6_read_msr(unsigned int, REGS*)>
c001476c:	56                   	push   esi
c001476d:	83 e3 7e             	and    ebx,0x7e
c0014770:	6a 00                	push   0x0
c0014772:	53                   	push   ebx
c0014773:	eb 12                	jmp    c0014787 <AMD_K6_writeback(int, int, int)+0x60>
c0014775:	89 e3                	mov    ebx,esp
c0014777:	53                   	push   ebx
c0014778:	68 82 00 00 c0       	push   0xc0000082
c001477d:	e8 8d ff ff ff       	call   c001470f <AMD_K6_read_msr(unsigned int, REGS*)>
c0014782:	53                   	push   ebx
c0014783:	6a 00                	push   0x0
c0014785:	6a 00                	push   0x0
c0014787:	68 82 00 00 c0       	push   0xc0000082
c001478c:	e8 62 ff ff ff       	call   c00146f3 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0014791:	83 c4 18             	add    esp,0x18
c0014794:	83 c4 10             	add    esp,0x10
c0014797:	5b                   	pop    ebx
c0014798:	5e                   	pop    esi
c0014799:	c3                   	ret    

c001479a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c001479a:	55                   	push   ebp
c001479b:	57                   	push   edi
c001479c:	56                   	push   esi
c001479d:	53                   	push   ebx
c001479e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147a2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00147a6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00147aa:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00147ae:	39 05 c0 41 02 c0    	cmp    DWORD PTR ds:0xc00241c0,eax
c00147b4:	75 23                	jne    c00147d9 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00147b6:	a1 ec 51 02 c0       	mov    eax,ds:0xc00251ec
c00147bb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00147bf:	89 06                	mov    DWORD PTR [esi],eax
c00147c1:	a1 e8 51 02 c0       	mov    eax,ds:0xc00251e8
c00147c6:	89 07                	mov    DWORD PTR [edi],eax
c00147c8:	a1 e4 51 02 c0       	mov    eax,ds:0xc00251e4
c00147cd:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00147d0:	a1 e0 51 02 c0       	mov    eax,ds:0xc00251e0
c00147d5:	89 02                	mov    DWORD PTR [edx],eax
c00147d7:	eb 3f                	jmp    c0014818 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00147d9:	31 c9                	xor    ecx,ecx
c00147db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147df:	0f a2                	cpuid  
c00147e1:	89 06                	mov    DWORD PTR [esi],eax
c00147e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00147e7:	89 1f                	mov    DWORD PTR [edi],ebx
c00147e9:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00147ec:	89 10                	mov    DWORD PTR [eax],edx
c00147ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147f2:	a3 c0 41 02 c0       	mov    ds:0xc00241c0,eax
c00147f7:	8b 06                	mov    eax,DWORD PTR [esi]
c00147f9:	a3 ec 51 02 c0       	mov    ds:0xc00251ec,eax
c00147fe:	8b 07                	mov    eax,DWORD PTR [edi]
c0014800:	a3 e8 51 02 c0       	mov    ds:0xc00251e8,eax
c0014805:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014808:	a3 e4 51 02 c0       	mov    ds:0xc00251e4,eax
c001480d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014811:	8b 00                	mov    eax,DWORD PTR [eax]
c0014813:	a3 e0 51 02 c0       	mov    ds:0xc00251e0,eax
c0014818:	5b                   	pop    ebx
c0014819:	5e                   	pop    esi
c001481a:	5f                   	pop    edi
c001481b:	5d                   	pop    ebp
c001481c:	c3                   	ret    

c001481d <cpuidCheckEDX(unsigned int)>:
c001481d:	83 ec 10             	sub    esp,0x10
c0014820:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014824:	50                   	push   eax
c0014825:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014829:	50                   	push   eax
c001482a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001482e:	50                   	push   eax
c001482f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014833:	50                   	push   eax
c0014834:	6a 01                	push   0x1
c0014836:	e8 5f ff ff ff       	call   c001479a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001483b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001483f:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0014843:	0f 95 c0             	setne  al
c0014846:	83 c4 24             	add    esp,0x24
c0014849:	c3                   	ret    

c001484a <cpuidCheckECX(unsigned int)>:
c001484a:	83 ec 10             	sub    esp,0x10
c001484d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014851:	50                   	push   eax
c0014852:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014856:	50                   	push   eax
c0014857:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001485b:	50                   	push   eax
c001485c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014860:	50                   	push   eax
c0014861:	6a 01                	push   0x1
c0014863:	e8 32 ff ff ff       	call   c001479a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014868:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001486c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0014870:	0f 95 c0             	setne  al
c0014873:	83 c4 24             	add    esp,0x24
c0014876:	c3                   	ret    

c0014877 <cpuidCheckExtendedEBX(unsigned int)>:
c0014877:	83 ec 10             	sub    esp,0x10
c001487a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001487e:	50                   	push   eax
c001487f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014883:	50                   	push   eax
c0014884:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0014888:	50                   	push   eax
c0014889:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001488d:	50                   	push   eax
c001488e:	6a 07                	push   0x7
c0014890:	e8 05 ff ff ff       	call   c001479a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014895:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014899:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001489d:	0f 95 c0             	setne  al
c00148a0:	83 c4 24             	add    esp,0x24
c00148a3:	c3                   	ret    

c00148a4 <cpuidCheckExtendedECX(unsigned int)>:
c00148a4:	83 ec 10             	sub    esp,0x10
c00148a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148ab:	50                   	push   eax
c00148ac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148b0:	50                   	push   eax
c00148b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148b5:	50                   	push   eax
c00148b6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00148ba:	50                   	push   eax
c00148bb:	6a 07                	push   0x7
c00148bd:	e8 d8 fe ff ff       	call   c001479a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00148c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00148c6:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00148ca:	0f 95 c0             	setne  al
c00148cd:	83 c4 24             	add    esp,0x24
c00148d0:	c3                   	ret    

c00148d1 <getCPUNumber()>:
c00148d1:	31 c0                	xor    eax,eax
c00148d3:	c3                   	ret    

c00148d4 <thisCPU()>:
c00148d4:	e8 f8 ff ff ff       	call   c00148d1 <getCPUNumber()>
c00148d9:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c00148df:	8b 84 82 60 01 00 00 	mov    eax,DWORD PTR [edx+eax*4+0x160]
c00148e6:	c3                   	ret    
c00148e7:	90                   	nop

c00148e8 <CPU::CPU()>:
c00148e8:	83 ec 0c             	sub    esp,0xc
c00148eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148ef:	83 ec 08             	sub    esp,0x8
c00148f2:	68 72 27 02 c0       	push   0xc0022772
c00148f7:	50                   	push   eax
c00148f8:	e8 19 bf ff ff       	call   c0010816 <Device::Device(char const*)>
c00148fd:	83 c4 10             	add    esp,0x10
c0014900:	ba 4c 28 02 c0       	mov    edx,0xc002284c
c0014905:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014909:	89 10                	mov    DWORD PTR [eax],edx
c001490b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001490f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0014919:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001491d:	05 78 01 00 00       	add    eax,0x178
c0014922:	83 ec 0c             	sub    esp,0xc
c0014925:	50                   	push   eax
c0014926:	e8 c5 6e ff ff       	call   c000b7f0 <GDT::GDT()>
c001492b:	83 c4 10             	add    esp,0x10
c001492e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014932:	05 7c 09 00 00       	add    eax,0x97c
c0014937:	83 ec 0c             	sub    esp,0xc
c001493a:	50                   	push   eax
c001493b:	e8 10 71 ff ff       	call   c000ba50 <IDT::IDT()>
c0014940:	83 c4 10             	add    esp,0x10
c0014943:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014947:	05 7c 11 00 00       	add    eax,0x117c
c001494c:	83 ec 0c             	sub    esp,0xc
c001494f:	50                   	push   eax
c0014950:	e8 6d 91 ff ff       	call   c000dac2 <TSS::TSS()>
c0014955:	83 c4 10             	add    esp,0x10
c0014958:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001495c:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0014963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014967:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0014971:	90                   	nop
c0014972:	83 c4 0c             	add    esp,0xc
c0014975:	c3                   	ret    

c0014976 <CPU::displayFeatures()>:
c0014976:	53                   	push   ebx
c0014977:	83 ec 10             	sub    esp,0x10
c001497a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001497e:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0014984:	68 80 24 02 c0       	push   0xc0022480
c0014989:	e8 83 a8 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001498e:	59                   	pop    ecx
c001498f:	58                   	pop    eax
c0014990:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0014996:	50                   	push   eax
c0014997:	68 91 24 02 c0       	push   0xc0022491
c001499c:	e8 70 a8 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c00149a1:	58                   	pop    eax
c00149a2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00149a8:	c1 e8 0e             	shr    eax,0xe
c00149ab:	5a                   	pop    edx
c00149ac:	0f b6 c0             	movzx  eax,al
c00149af:	50                   	push   eax
c00149b0:	68 a2 24 02 c0       	push   0xc00224a2
c00149b5:	e8 57 a8 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c00149ba:	59                   	pop    ecx
c00149bb:	58                   	pop    eax
c00149bc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00149c2:	66 c1 e8 06          	shr    ax,0x6
c00149c6:	0f b6 c0             	movzx  eax,al
c00149c9:	50                   	push   eax
c00149ca:	68 b3 24 02 c0       	push   0xc00224b3
c00149cf:	e8 3d a8 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c00149d4:	c7 04 24 c6 28 02 c0 	mov    DWORD PTR [esp],0xc00228c6
c00149db:	e8 31 a8 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c00149e0:	83 c4 10             	add    esp,0x10
c00149e3:	b8 12 11 02 c0       	mov    eax,0xc0021112
c00149e8:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00149ef:	74 05                	je     c00149f6 <CPU::displayFeatures()+0x80>
c00149f1:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c00149f6:	52                   	push   edx
c00149f7:	52                   	push   edx
c00149f8:	50                   	push   eax
c00149f9:	68 c4 24 02 c0       	push   0xc00224c4
c00149fe:	e8 0e a8 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0014a03:	83 c4 10             	add    esp,0x10
c0014a06:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a0b:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0014a12:	78 05                	js     c0014a19 <CPU::displayFeatures()+0xa3>
c0014a14:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014a19:	51                   	push   ecx
c0014a1a:	51                   	push   ecx
c0014a1b:	50                   	push   eax
c0014a1c:	68 db 24 02 c0       	push   0xc00224db
c0014a21:	e8 eb a7 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0014a26:	83 c4 10             	add    esp,0x10
c0014a29:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a2e:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0014a35:	75 05                	jne    c0014a3c <CPU::displayFeatures()+0xc6>
c0014a37:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014a3c:	52                   	push   edx
c0014a3d:	52                   	push   edx
c0014a3e:	50                   	push   eax
c0014a3f:	68 f2 24 02 c0       	push   0xc00224f2
c0014a44:	e8 c8 a7 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0014a49:	83 c4 10             	add    esp,0x10
c0014a4c:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a51:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0014a58:	75 05                	jne    c0014a5f <CPU::displayFeatures()+0xe9>
c0014a5a:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014a5f:	51                   	push   ecx
c0014a60:	51                   	push   ecx
c0014a61:	50                   	push   eax
c0014a62:	68 09 25 02 c0       	push   0xc0022509
c0014a67:	e8 a5 a7 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0014a6c:	83 c4 10             	add    esp,0x10
c0014a6f:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a74:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0014a7b:	75 05                	jne    c0014a82 <CPU::displayFeatures()+0x10c>
c0014a7d:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014a82:	52                   	push   edx
c0014a83:	52                   	push   edx
c0014a84:	50                   	push   eax
c0014a85:	68 20 25 02 c0       	push   0xc0022520
c0014a8a:	e8 82 a7 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0014a8f:	83 c4 10             	add    esp,0x10
c0014a92:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014a97:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0014a9e:	75 05                	jne    c0014aa5 <CPU::displayFeatures()+0x12f>
c0014aa0:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014aa5:	51                   	push   ecx
c0014aa6:	51                   	push   ecx
c0014aa7:	50                   	push   eax
c0014aa8:	68 37 25 02 c0       	push   0xc0022537
c0014aad:	e8 5f a7 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0014ab2:	83 c4 10             	add    esp,0x10
c0014ab5:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014aba:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0014ac1:	75 05                	jne    c0014ac8 <CPU::displayFeatures()+0x152>
c0014ac3:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014ac8:	52                   	push   edx
c0014ac9:	52                   	push   edx
c0014aca:	50                   	push   eax
c0014acb:	68 4e 25 02 c0       	push   0xc002254e
c0014ad0:	e8 3c a7 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0014ad5:	83 c4 10             	add    esp,0x10
c0014ad8:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014add:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0014ae4:	75 05                	jne    c0014aeb <CPU::displayFeatures()+0x175>
c0014ae6:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014aeb:	51                   	push   ecx
c0014aec:	51                   	push   ecx
c0014aed:	50                   	push   eax
c0014aee:	68 65 25 02 c0       	push   0xc0022565
c0014af3:	e8 19 a7 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0014af8:	83 c4 10             	add    esp,0x10
c0014afb:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b00:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0014b07:	75 05                	jne    c0014b0e <CPU::displayFeatures()+0x198>
c0014b09:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014b0e:	52                   	push   edx
c0014b0f:	52                   	push   edx
c0014b10:	50                   	push   eax
c0014b11:	68 7c 25 02 c0       	push   0xc002257c
c0014b16:	e8 f6 a6 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0014b1b:	83 c4 10             	add    esp,0x10
c0014b1e:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b23:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0014b2a:	75 05                	jne    c0014b31 <CPU::displayFeatures()+0x1bb>
c0014b2c:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014b31:	51                   	push   ecx
c0014b32:	51                   	push   ecx
c0014b33:	50                   	push   eax
c0014b34:	68 93 25 02 c0       	push   0xc0022593
c0014b39:	e8 d3 a6 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0014b3e:	83 c4 10             	add    esp,0x10
c0014b41:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b46:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0014b4d:	75 05                	jne    c0014b54 <CPU::displayFeatures()+0x1de>
c0014b4f:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014b54:	52                   	push   edx
c0014b55:	52                   	push   edx
c0014b56:	50                   	push   eax
c0014b57:	68 aa 25 02 c0       	push   0xc00225aa
c0014b5c:	e8 b0 a6 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0014b61:	83 c4 10             	add    esp,0x10
c0014b64:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b69:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0014b70:	75 05                	jne    c0014b77 <CPU::displayFeatures()+0x201>
c0014b72:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014b77:	51                   	push   ecx
c0014b78:	51                   	push   ecx
c0014b79:	50                   	push   eax
c0014b7a:	68 c1 25 02 c0       	push   0xc00225c1
c0014b7f:	e8 8d a6 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0014b84:	83 c4 10             	add    esp,0x10
c0014b87:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014b8c:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0014b93:	75 05                	jne    c0014b9a <CPU::displayFeatures()+0x224>
c0014b95:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014b9a:	52                   	push   edx
c0014b9b:	52                   	push   edx
c0014b9c:	50                   	push   eax
c0014b9d:	68 d8 25 02 c0       	push   0xc00225d8
c0014ba2:	e8 6a a6 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0014ba7:	83 c4 10             	add    esp,0x10
c0014baa:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014baf:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0014bb6:	78 05                	js     c0014bbd <CPU::displayFeatures()+0x247>
c0014bb8:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014bbd:	51                   	push   ecx
c0014bbe:	51                   	push   ecx
c0014bbf:	50                   	push   eax
c0014bc0:	68 ef 25 02 c0       	push   0xc00225ef
c0014bc5:	e8 47 a6 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0014bca:	83 c4 10             	add    esp,0x10
c0014bcd:	b8 0e 11 02 c0       	mov    eax,0xc002110e
c0014bd2:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0014bd9:	75 05                	jne    c0014be0 <CPU::displayFeatures()+0x26a>
c0014bdb:	b8 12 11 02 c0       	mov    eax,0xc0021112
c0014be0:	52                   	push   edx
c0014be1:	52                   	push   edx
c0014be2:	50                   	push   eax
c0014be3:	68 06 26 02 c0       	push   0xc0022606
c0014be8:	e8 24 a6 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0014bed:	83 c4 18             	add    esp,0x18
c0014bf0:	5b                   	pop    ebx
c0014bf1:	c3                   	ret    

c0014bf2 <CPU::detectFeatures()>:
c0014bf2:	55                   	push   ebp
c0014bf3:	57                   	push   edi
c0014bf4:	56                   	push   esi
c0014bf5:	53                   	push   ebx
c0014bf6:	83 ec 50             	sub    esp,0x50
c0014bf9:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0014bfd:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0014c07:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0014c0e:	6a 0d                	push   0xd
c0014c10:	6a 00                	push   0x0
c0014c12:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0014c18:	57                   	push   edi
c0014c19:	e8 a3 ba fe ff       	call   c00006c1 <memset>
c0014c1e:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c0014c23:	83 c4 10             	add    esp,0x10
c0014c26:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0014c2d:	0f 84 04 09 00 00    	je     c0015537 <CPU::detectFeatures()+0x945>
c0014c33:	83 ec 0c             	sub    esp,0xc
c0014c36:	6a 10                	push   0x10
c0014c38:	e8 e0 fb ff ff       	call   c001481d <cpuidCheckEDX(unsigned int)>
c0014c3d:	83 e0 01             	and    eax,0x1
c0014c40:	8d 14 00             	lea    edx,[eax+eax*1]
c0014c43:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014c49:	83 e0 fd             	and    eax,0xfffffffd
c0014c4c:	09 d0                	or     eax,edx
c0014c4e:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014c54:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0014c5b:	e8 bd fb ff ff       	call   c001481d <cpuidCheckEDX(unsigned int)>
c0014c60:	83 e0 01             	and    eax,0x1
c0014c63:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0014c6a:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014c70:	83 e0 fb             	and    eax,0xfffffffb
c0014c73:	09 d0                	or     eax,edx
c0014c75:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014c7b:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0014c82:	e8 96 fb ff ff       	call   c001481d <cpuidCheckEDX(unsigned int)>
c0014c87:	83 e0 01             	and    eax,0x1
c0014c8a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0014c91:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014c97:	83 e0 f7             	and    eax,0xfffffff7
c0014c9a:	09 d0                	or     eax,edx
c0014c9c:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014ca2:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0014ca9:	e8 6f fb ff ff       	call   c001481d <cpuidCheckEDX(unsigned int)>
c0014cae:	83 e0 01             	and    eax,0x1
c0014cb1:	c1 e0 04             	shl    eax,0x4
c0014cb4:	88 c2                	mov    dl,al
c0014cb6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014cbc:	83 e0 ef             	and    eax,0xffffffef
c0014cbf:	09 d0                	or     eax,edx
c0014cc1:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014cc7:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0014cce:	e8 4a fb ff ff       	call   c001481d <cpuidCheckEDX(unsigned int)>
c0014cd3:	83 e0 01             	and    eax,0x1
c0014cd6:	c1 e0 05             	shl    eax,0x5
c0014cd9:	88 c2                	mov    dl,al
c0014cdb:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014ce1:	83 e0 df             	and    eax,0xffffffdf
c0014ce4:	09 d0                	or     eax,edx
c0014ce6:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014cec:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0014cf3:	e8 25 fb ff ff       	call   c001481d <cpuidCheckEDX(unsigned int)>
c0014cf8:	83 e0 01             	and    eax,0x1
c0014cfb:	8d 14 00             	lea    edx,[eax+eax*1]
c0014cfe:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0014d04:	83 e0 fd             	and    eax,0xfffffffd
c0014d07:	09 d0                	or     eax,edx
c0014d09:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0014d0f:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0014d16:	e8 02 fb ff ff       	call   c001481d <cpuidCheckEDX(unsigned int)>
c0014d1b:	83 e0 01             	and    eax,0x1
c0014d1e:	c1 e0 06             	shl    eax,0x6
c0014d21:	88 c2                	mov    dl,al
c0014d23:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0014d29:	83 e0 bf             	and    eax,0xffffffbf
c0014d2c:	09 d0                	or     eax,edx
c0014d2e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0014d34:	58                   	pop    eax
c0014d35:	8d 74 24 28          	lea    esi,[esp+0x28]
c0014d39:	56                   	push   esi
c0014d3a:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0014d3e:	55                   	push   ebp
c0014d3f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014d43:	50                   	push   eax
c0014d44:	8d 54 24 28          	lea    edx,[esp+0x28]
c0014d48:	52                   	push   edx
c0014d49:	6a 00                	push   0x0
c0014d4b:	e8 4a fa ff ff       	call   c001479a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0014d50:	83 c4 1c             	add    esp,0x1c
c0014d53:	6a 04                	push   0x4
c0014d55:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0014d59:	50                   	push   eax
c0014d5a:	57                   	push   edi
c0014d5b:	e8 2b b9 fe ff       	call   c000068b <memcpy>
c0014d60:	83 c4 0c             	add    esp,0xc
c0014d63:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0014d69:	6a 04                	push   0x4
c0014d6b:	56                   	push   esi
c0014d6c:	50                   	push   eax
c0014d6d:	e8 19 b9 fe ff       	call   c000068b <memcpy>
c0014d72:	83 c4 0c             	add    esp,0xc
c0014d75:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0014d7b:	6a 04                	push   0x4
c0014d7d:	55                   	push   ebp
c0014d7e:	50                   	push   eax
c0014d7f:	e8 07 b9 fe ff       	call   c000068b <memcpy>
c0014d84:	58                   	pop    eax
c0014d85:	5a                   	pop    edx
c0014d86:	68 1d 26 02 c0       	push   0xc002261d
c0014d8b:	57                   	push   edi
c0014d8c:	e8 20 ba fe ff       	call   c00007b1 <strcmp>
c0014d91:	83 c4 10             	add    esp,0x10
c0014d94:	85 c0                	test   eax,eax
c0014d96:	75 0f                	jne    c0014da7 <CPU::detectFeatures()+0x1b5>
c0014d98:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0014da2:	e9 22 02 00 00       	jmp    c0014fc9 <CPU::detectFeatures()+0x3d7>
c0014da7:	50                   	push   eax
c0014da8:	50                   	push   eax
c0014da9:	68 2a 26 02 c0       	push   0xc002262a
c0014dae:	57                   	push   edi
c0014daf:	e8 fd b9 fe ff       	call   c00007b1 <strcmp>
c0014db4:	83 c4 10             	add    esp,0x10
c0014db7:	85 c0                	test   eax,eax
c0014db9:	74 dd                	je     c0014d98 <CPU::detectFeatures()+0x1a6>
c0014dbb:	51                   	push   ecx
c0014dbc:	51                   	push   ecx
c0014dbd:	68 37 26 02 c0       	push   0xc0022637
c0014dc2:	57                   	push   edi
c0014dc3:	e8 e9 b9 fe ff       	call   c00007b1 <strcmp>
c0014dc8:	83 c4 10             	add    esp,0x10
c0014dcb:	85 c0                	test   eax,eax
c0014dcd:	74 2a                	je     c0014df9 <CPU::detectFeatures()+0x207>
c0014dcf:	52                   	push   edx
c0014dd0:	52                   	push   edx
c0014dd1:	68 44 26 02 c0       	push   0xc0022644
c0014dd6:	57                   	push   edi
c0014dd7:	e8 d5 b9 fe ff       	call   c00007b1 <strcmp>
c0014ddc:	83 c4 10             	add    esp,0x10
c0014ddf:	85 c0                	test   eax,eax
c0014de1:	74 16                	je     c0014df9 <CPU::detectFeatures()+0x207>
c0014de3:	50                   	push   eax
c0014de4:	50                   	push   eax
c0014de5:	68 51 26 02 c0       	push   0xc0022651
c0014dea:	57                   	push   edi
c0014deb:	e8 c1 b9 fe ff       	call   c00007b1 <strcmp>
c0014df0:	83 c4 10             	add    esp,0x10
c0014df3:	85 c0                	test   eax,eax
c0014df5:	74 48                	je     c0014e3f <CPU::detectFeatures()+0x24d>
c0014df7:	eb 0f                	jmp    c0014e08 <CPU::detectFeatures()+0x216>
c0014df9:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0014e03:	e9 c1 01 00 00       	jmp    c0014fc9 <CPU::detectFeatures()+0x3d7>
c0014e08:	50                   	push   eax
c0014e09:	50                   	push   eax
c0014e0a:	68 5e 26 02 c0       	push   0xc002265e
c0014e0f:	57                   	push   edi
c0014e10:	e8 9c b9 fe ff       	call   c00007b1 <strcmp>
c0014e15:	83 c4 10             	add    esp,0x10
c0014e18:	85 c0                	test   eax,eax
c0014e1a:	74 23                	je     c0014e3f <CPU::detectFeatures()+0x24d>
c0014e1c:	50                   	push   eax
c0014e1d:	50                   	push   eax
c0014e1e:	68 6b 26 02 c0       	push   0xc002266b
c0014e23:	57                   	push   edi
c0014e24:	e8 88 b9 fe ff       	call   c00007b1 <strcmp>
c0014e29:	83 c4 10             	add    esp,0x10
c0014e2c:	85 c0                	test   eax,eax
c0014e2e:	75 1e                	jne    c0014e4e <CPU::detectFeatures()+0x25c>
c0014e30:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0014e3a:	e9 8a 01 00 00       	jmp    c0014fc9 <CPU::detectFeatures()+0x3d7>
c0014e3f:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0014e49:	e9 7b 01 00 00       	jmp    c0014fc9 <CPU::detectFeatures()+0x3d7>
c0014e4e:	50                   	push   eax
c0014e4f:	50                   	push   eax
c0014e50:	68 78 26 02 c0       	push   0xc0022678
c0014e55:	57                   	push   edi
c0014e56:	e8 56 b9 fe ff       	call   c00007b1 <strcmp>
c0014e5b:	83 c4 10             	add    esp,0x10
c0014e5e:	85 c0                	test   eax,eax
c0014e60:	75 0f                	jne    c0014e71 <CPU::detectFeatures()+0x27f>
c0014e62:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0014e6c:	e9 58 01 00 00       	jmp    c0014fc9 <CPU::detectFeatures()+0x3d7>
c0014e71:	50                   	push   eax
c0014e72:	50                   	push   eax
c0014e73:	68 37 26 02 c0       	push   0xc0022637
c0014e78:	57                   	push   edi
c0014e79:	e8 33 b9 fe ff       	call   c00007b1 <strcmp>
c0014e7e:	83 c4 10             	add    esp,0x10
c0014e81:	85 c0                	test   eax,eax
c0014e83:	75 0f                	jne    c0014e94 <CPU::detectFeatures()+0x2a2>
c0014e85:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0014e8f:	e9 35 01 00 00       	jmp    c0014fc9 <CPU::detectFeatures()+0x3d7>
c0014e94:	50                   	push   eax
c0014e95:	50                   	push   eax
c0014e96:	68 85 26 02 c0       	push   0xc0022685
c0014e9b:	57                   	push   edi
c0014e9c:	e8 10 b9 fe ff       	call   c00007b1 <strcmp>
c0014ea1:	83 c4 10             	add    esp,0x10
c0014ea4:	85 c0                	test   eax,eax
c0014ea6:	75 0f                	jne    c0014eb7 <CPU::detectFeatures()+0x2c5>
c0014ea8:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0014eb2:	e9 12 01 00 00       	jmp    c0014fc9 <CPU::detectFeatures()+0x3d7>
c0014eb7:	51                   	push   ecx
c0014eb8:	51                   	push   ecx
c0014eb9:	68 92 26 02 c0       	push   0xc0022692
c0014ebe:	57                   	push   edi
c0014ebf:	e8 ed b8 fe ff       	call   c00007b1 <strcmp>
c0014ec4:	83 c4 10             	add    esp,0x10
c0014ec7:	85 c0                	test   eax,eax
c0014ec9:	75 0f                	jne    c0014eda <CPU::detectFeatures()+0x2e8>
c0014ecb:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0014ed5:	e9 ef 00 00 00       	jmp    c0014fc9 <CPU::detectFeatures()+0x3d7>
c0014eda:	52                   	push   edx
c0014edb:	52                   	push   edx
c0014edc:	68 9f 26 02 c0       	push   0xc002269f
c0014ee1:	57                   	push   edi
c0014ee2:	e8 ca b8 fe ff       	call   c00007b1 <strcmp>
c0014ee7:	83 c4 10             	add    esp,0x10
c0014eea:	85 c0                	test   eax,eax
c0014eec:	75 0f                	jne    c0014efd <CPU::detectFeatures()+0x30b>
c0014eee:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0014ef8:	e9 cc 00 00 00       	jmp    c0014fc9 <CPU::detectFeatures()+0x3d7>
c0014efd:	50                   	push   eax
c0014efe:	50                   	push   eax
c0014eff:	68 ac 26 02 c0       	push   0xc00226ac
c0014f04:	57                   	push   edi
c0014f05:	e8 a7 b8 fe ff       	call   c00007b1 <strcmp>
c0014f0a:	83 c4 10             	add    esp,0x10
c0014f0d:	85 c0                	test   eax,eax
c0014f0f:	75 0f                	jne    c0014f20 <CPU::detectFeatures()+0x32e>
c0014f11:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0014f1b:	e9 a9 00 00 00       	jmp    c0014fc9 <CPU::detectFeatures()+0x3d7>
c0014f20:	50                   	push   eax
c0014f21:	50                   	push   eax
c0014f22:	68 b9 26 02 c0       	push   0xc00226b9
c0014f27:	57                   	push   edi
c0014f28:	e8 84 b8 fe ff       	call   c00007b1 <strcmp>
c0014f2d:	83 c4 10             	add    esp,0x10
c0014f30:	85 c0                	test   eax,eax
c0014f32:	75 0f                	jne    c0014f43 <CPU::detectFeatures()+0x351>
c0014f34:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0014f3e:	e9 86 00 00 00       	jmp    c0014fc9 <CPU::detectFeatures()+0x3d7>
c0014f43:	50                   	push   eax
c0014f44:	50                   	push   eax
c0014f45:	68 c6 26 02 c0       	push   0xc00226c6
c0014f4a:	57                   	push   edi
c0014f4b:	e8 61 b8 fe ff       	call   c00007b1 <strcmp>
c0014f50:	83 c4 10             	add    esp,0x10
c0014f53:	85 c0                	test   eax,eax
c0014f55:	75 0c                	jne    c0014f63 <CPU::detectFeatures()+0x371>
c0014f57:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0014f61:	eb 66                	jmp    c0014fc9 <CPU::detectFeatures()+0x3d7>
c0014f63:	50                   	push   eax
c0014f64:	50                   	push   eax
c0014f65:	68 d3 26 02 c0       	push   0xc00226d3
c0014f6a:	57                   	push   edi
c0014f6b:	e8 41 b8 fe ff       	call   c00007b1 <strcmp>
c0014f70:	83 c4 10             	add    esp,0x10
c0014f73:	85 c0                	test   eax,eax
c0014f75:	75 0c                	jne    c0014f83 <CPU::detectFeatures()+0x391>
c0014f77:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c0014f81:	eb 46                	jmp    c0014fc9 <CPU::detectFeatures()+0x3d7>
c0014f83:	50                   	push   eax
c0014f84:	50                   	push   eax
c0014f85:	68 e0 26 02 c0       	push   0xc00226e0
c0014f8a:	57                   	push   edi
c0014f8b:	e8 21 b8 fe ff       	call   c00007b1 <strcmp>
c0014f90:	83 c4 10             	add    esp,0x10
c0014f93:	85 c0                	test   eax,eax
c0014f95:	74 e0                	je     c0014f77 <CPU::detectFeatures()+0x385>
c0014f97:	50                   	push   eax
c0014f98:	50                   	push   eax
c0014f99:	68 ed 26 02 c0       	push   0xc00226ed
c0014f9e:	57                   	push   edi
c0014f9f:	e8 0d b8 fe ff       	call   c00007b1 <strcmp>
c0014fa4:	83 c4 10             	add    esp,0x10
c0014fa7:	85 c0                	test   eax,eax
c0014fa9:	74 cc                	je     c0014f77 <CPU::detectFeatures()+0x385>
c0014fab:	51                   	push   ecx
c0014fac:	51                   	push   ecx
c0014fad:	68 fa 26 02 c0       	push   0xc00226fa
c0014fb2:	57                   	push   edi
c0014fb3:	e8 f9 b7 fe ff       	call   c00007b1 <strcmp>
c0014fb8:	83 c4 10             	add    esp,0x10
c0014fbb:	85 c0                	test   eax,eax
c0014fbd:	74 b8                	je     c0014f77 <CPU::detectFeatures()+0x385>
c0014fbf:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0014fc9:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c0014fce:	0f 86 be 00 00 00    	jbe    c0015092 <CPU::detectFeatures()+0x4a0>
c0014fd4:	83 ec 0c             	sub    esp,0xc
c0014fd7:	68 80 00 00 00       	push   0x80
c0014fdc:	e8 96 f8 ff ff       	call   c0014877 <cpuidCheckExtendedEBX(unsigned int)>
c0014fe1:	83 e0 01             	and    eax,0x1
c0014fe4:	c1 e0 06             	shl    eax,0x6
c0014fe7:	88 c2                	mov    dl,al
c0014fe9:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0014fef:	83 e0 bf             	and    eax,0xffffffbf
c0014ff2:	09 d0                	or     eax,edx
c0014ff4:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0014ffa:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0015001:	e8 71 f8 ff ff       	call   c0014877 <cpuidCheckExtendedEBX(unsigned int)>
c0015006:	83 e0 01             	and    eax,0x1
c0015009:	c1 e0 04             	shl    eax,0x4
c001500c:	88 c2                	mov    dl,al
c001500e:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0015014:	83 e0 ef             	and    eax,0xffffffef
c0015017:	09 d0                	or     eax,edx
c0015019:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c001501f:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0015026:	e8 4c f8 ff ff       	call   c0014877 <cpuidCheckExtendedEBX(unsigned int)>
c001502b:	c1 e0 07             	shl    eax,0x7
c001502e:	88 c2                	mov    dl,al
c0015030:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0015036:	83 e0 7f             	and    eax,0x7f
c0015039:	09 d0                	or     eax,edx
c001503b:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0015041:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015048:	e8 57 f8 ff ff       	call   c00148a4 <cpuidCheckExtendedECX(unsigned int)>
c001504d:	83 e0 01             	and    eax,0x1
c0015050:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0015057:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c001505d:	83 e0 f7             	and    eax,0xfffffff7
c0015060:	09 d0                	or     eax,edx
c0015062:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0015068:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001506f:	e8 30 f8 ff ff       	call   c00148a4 <cpuidCheckExtendedECX(unsigned int)>
c0015074:	83 c4 10             	add    esp,0x10
c0015077:	83 e0 01             	and    eax,0x1
c001507a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0015081:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0015087:	83 e0 fb             	and    eax,0xfffffffb
c001508a:	09 d0                	or     eax,edx
c001508c:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0015092:	83 ec 0c             	sub    esp,0xc
c0015095:	56                   	push   esi
c0015096:	55                   	push   ebp
c0015097:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001509b:	57                   	push   edi
c001509c:	8d 44 24 28          	lea    eax,[esp+0x28]
c00150a0:	50                   	push   eax
c00150a1:	6a 01                	push   0x1
c00150a3:	e8 f2 f6 ff ff       	call   c001479a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00150a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150ac:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00150b2:	88 c1                	mov    cl,al
c00150b4:	83 e2 f0             	and    edx,0xfffffff0
c00150b7:	83 e1 0f             	and    ecx,0xf
c00150ba:	09 ca                	or     edx,ecx
c00150bc:	88 c1                	mov    cl,al
c00150be:	c0 e9 04             	shr    cl,0x4
c00150c1:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00150c7:	0f b6 d1             	movzx  edx,cl
c00150ca:	c1 e2 06             	shl    edx,0x6
c00150cd:	88 4c 24 2f          	mov    BYTE PTR [esp+0x2f],cl
c00150d1:	89 d5                	mov    ebp,edx
c00150d3:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00150d9:	66 81 e2 3f c0       	and    dx,0xc03f
c00150de:	83 c4 20             	add    esp,0x20
c00150e1:	09 ea                	or     edx,ebp
c00150e3:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00150ea:	89 c2                	mov    edx,eax
c00150ec:	c1 ea 08             	shr    edx,0x8
c00150ef:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c00150f5:	83 e2 0f             	and    edx,0xf
c00150f8:	83 e1 3f             	and    ecx,0x3f
c00150fb:	89 d5                	mov    ebp,edx
c00150fd:	c1 e5 06             	shl    ebp,0x6
c0015100:	09 cd                	or     ebp,ecx
c0015102:	89 e9                	mov    ecx,ebp
c0015104:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001510a:	88 d1                	mov    cl,dl
c001510c:	c0 e9 02             	shr    cl,0x2
c001510f:	89 cd                	mov    ebp,ecx
c0015111:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0015117:	83 e1 c0             	and    ecx,0xffffffc0
c001511a:	09 cd                	or     ebp,ecx
c001511c:	89 e9                	mov    ecx,ebp
c001511e:	89 c5                	mov    ebp,eax
c0015120:	c1 ed 0c             	shr    ebp,0xc
c0015123:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0015129:	83 e5 03             	and    ebp,0x3
c001512c:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c0015132:	c1 e5 04             	shl    ebp,0x4
c0015135:	83 e1 cf             	and    ecx,0xffffffcf
c0015138:	09 cd                	or     ebp,ecx
c001513a:	80 fa 06             	cmp    dl,0x6
c001513d:	89 e9                	mov    ecx,ebp
c001513f:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c0015145:	74 05                	je     c001514c <CPU::detectFeatures()+0x55a>
c0015147:	80 fa 0f             	cmp    dl,0xf
c001514a:	75 5d                	jne    c00151a9 <CPU::detectFeatures()+0x5b7>
c001514c:	89 c5                	mov    ebp,eax
c001514e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0015152:	c1 ed 10             	shr    ebp,0x10
c0015155:	c1 e5 04             	shl    ebp,0x4
c0015158:	09 e9                	or     ecx,ebp
c001515a:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0015160:	0f b6 c9             	movzx  ecx,cl
c0015163:	c1 e1 06             	shl    ecx,0x6
c0015166:	66 81 e5 3f c0       	and    bp,0xc03f
c001516b:	09 e9                	or     ecx,ebp
c001516d:	80 fa 0f             	cmp    dl,0xf
c0015170:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c0015177:	75 30                	jne    c00151a9 <CPU::detectFeatures()+0x5b7>
c0015179:	c1 e8 14             	shr    eax,0x14
c001517c:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c0015182:	83 c0 0f             	add    eax,0xf
c0015185:	83 e2 3f             	and    edx,0x3f
c0015188:	88 c1                	mov    cl,al
c001518a:	c1 e1 06             	shl    ecx,0x6
c001518d:	c0 e8 02             	shr    al,0x2
c0015190:	09 ca                	or     edx,ecx
c0015192:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0015198:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c001519e:	83 e2 c0             	and    edx,0xffffffc0
c00151a1:	09 d0                	or     eax,edx
c00151a3:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00151a9:	83 ec 0c             	sub    esp,0xc
c00151ac:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c00151b3:	56                   	push   esi
c00151b4:	8d 44 24 28          	lea    eax,[esp+0x28]
c00151b8:	50                   	push   eax
c00151b9:	57                   	push   edi
c00151ba:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00151be:	55                   	push   ebp
c00151bf:	68 00 00 00 80       	push   0x80000000
c00151c4:	e8 d1 f5 ff ff       	call   c001479a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00151c9:	83 c4 20             	add    esp,0x20
c00151cc:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00151d4:	8d 44 24 18          	lea    eax,[esp+0x18]
c00151d8:	76 1e                	jbe    c00151f8 <CPU::detectFeatures()+0x606>
c00151da:	83 ec 0c             	sub    esp,0xc
c00151dd:	56                   	push   esi
c00151de:	50                   	push   eax
c00151df:	57                   	push   edi
c00151e0:	55                   	push   ebp
c00151e1:	68 01 00 00 80       	push   0x80000001
c00151e6:	e8 af f5 ff ff       	call   c001479a <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00151eb:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00151f5:	83 c4 20             	add    esp,0x20
c00151f8:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00151fe:	83 f8 01             	cmp    eax,0x1
c0015201:	75 6f                	jne    c0015272 <CPU::detectFeatures()+0x680>
c0015203:	51                   	push   ecx
c0015204:	51                   	push   ecx
c0015205:	68 06 27 02 c0       	push   0xc0022706
c001520a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001520e:	56                   	push   esi
c001520f:	e8 4c b5 fe ff       	call   c0000760 <strcpy>
c0015214:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001521a:	5f                   	pop    edi
c001521b:	66 c1 e8 06          	shr    ax,0x6
c001521f:	5d                   	pop    ebp
c0015220:	0f b6 c0             	movzx  eax,al
c0015223:	50                   	push   eax
c0015224:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001522a:	c1 e8 0e             	shr    eax,0xe
c001522d:	0f b6 c0             	movzx  eax,al
c0015230:	50                   	push   eax
c0015231:	e8 04 f2 ff ff       	call   c001443a <lookupIntelCPUName(unsigned char, unsigned char)>
c0015236:	5a                   	pop    edx
c0015237:	59                   	pop    ecx
c0015238:	50                   	push   eax
c0015239:	56                   	push   esi
c001523a:	e8 d8 b5 fe ff       	call   c0000817 <strcat>
c001523f:	5f                   	pop    edi
c0015240:	5d                   	pop    ebp
c0015241:	56                   	push   esi
c0015242:	53                   	push   ebx
c0015243:	e8 c0 b5 ff ff       	call   c0010808 <Device::setName(char const*)>
c0015248:	58                   	pop    eax
c0015249:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001524f:	5a                   	pop    edx
c0015250:	68 0d 27 02 c0       	push   0xc002270d
c0015255:	50                   	push   eax
c0015256:	e8 56 b5 fe ff       	call   c00007b1 <strcmp>
c001525b:	83 c4 10             	add    esp,0x10
c001525e:	85 c0                	test   eax,eax
c0015260:	0f 85 53 03 00 00    	jne    c00155b9 <CPU::detectFeatures()+0x9c7>
c0015266:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c001526d:	e9 47 03 00 00       	jmp    c00155b9 <CPU::detectFeatures()+0x9c7>
c0015272:	83 f8 02             	cmp    eax,0x2
c0015275:	0f 85 b5 00 00 00    	jne    c0015330 <CPU::detectFeatures()+0x73e>
c001527b:	57                   	push   edi
c001527c:	57                   	push   edi
c001527d:	68 1f 27 02 c0       	push   0xc002271f
c0015282:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0015286:	56                   	push   esi
c0015287:	e8 d4 b4 fe ff       	call   c0000760 <strcpy>
c001528c:	5d                   	pop    ebp
c001528d:	58                   	pop    eax
c001528e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015294:	66 c1 e8 06          	shr    ax,0x6
c0015298:	0f b6 c0             	movzx  eax,al
c001529b:	50                   	push   eax
c001529c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00152a2:	c1 e8 0e             	shr    eax,0xe
c00152a5:	0f b6 c0             	movzx  eax,al
c00152a8:	50                   	push   eax
c00152a9:	e8 e7 ef ff ff       	call   c0014295 <lookupAMDCPUName(unsigned char, unsigned char)>
c00152ae:	5a                   	pop    edx
c00152af:	59                   	pop    ecx
c00152b0:	50                   	push   eax
c00152b1:	56                   	push   esi
c00152b2:	e8 60 b5 fe ff       	call   c0000817 <strcat>
c00152b7:	5f                   	pop    edi
c00152b8:	5d                   	pop    ebp
c00152b9:	56                   	push   esi
c00152ba:	53                   	push   ebx
c00152bb:	e8 48 b5 ff ff       	call   c0010808 <Device::setName(char const*)>
c00152c0:	58                   	pop    eax
c00152c1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00152c7:	5a                   	pop    edx
c00152c8:	68 24 27 02 c0       	push   0xc0022724
c00152cd:	50                   	push   eax
c00152ce:	e8 de b4 fe ff       	call   c00007b1 <strcmp>
c00152d3:	83 c4 10             	add    esp,0x10
c00152d6:	85 c0                	test   eax,eax
c00152d8:	75 20                	jne    c00152fa <CPU::detectFeatures()+0x708>
c00152da:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c00152e0:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00152e6:	a8 01                	test   al,0x1
c00152e8:	74 10                	je     c00152fa <CPU::detectFeatures()+0x708>
c00152ea:	83 e0 fe             	and    eax,0xfffffffe
c00152ed:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00152f3:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00152fa:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0015300:	c1 e8 0e             	shr    eax,0xe
c0015303:	3c 05                	cmp    al,0x5
c0015305:	0f 85 ae 02 00 00    	jne    c00155b9 <CPU::detectFeatures()+0x9c7>
c001530b:	56                   	push   esi
c001530c:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c0015312:	83 e0 0f             	and    eax,0xf
c0015315:	50                   	push   eax
c0015316:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001531c:	66 c1 e8 06          	shr    ax,0x6
c0015320:	0f b6 c0             	movzx  eax,al
c0015323:	50                   	push   eax
c0015324:	6a 05                	push   0x5
c0015326:	e8 fc f3 ff ff       	call   c0014727 <AMD_K6_writeback(int, int, int)>
c001532b:	e9 ff 01 00 00       	jmp    c001552f <CPU::detectFeatures()+0x93d>
c0015330:	89 c1                	mov    ecx,eax
c0015332:	83 e1 fd             	and    ecx,0xfffffffd
c0015335:	83 f9 04             	cmp    ecx,0x4
c0015338:	74 09                	je     c0015343 <CPU::detectFeatures()+0x751>
c001533a:	83 f8 03             	cmp    eax,0x3
c001533d:	0f 85 6f 01 00 00    	jne    c00154b2 <CPU::detectFeatures()+0x8c0>
c0015343:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0015349:	c1 ea 0e             	shr    edx,0xe
c001534c:	80 fa 05             	cmp    dl,0x5
c001534f:	75 62                	jne    c00153b3 <CPU::detectFeatures()+0x7c1>
c0015351:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0015357:	66 81 e2 c0 3f       	and    dx,0x3fc0
c001535c:	66 81 fa 00 01       	cmp    dx,0x100
c0015361:	75 0c                	jne    c001536f <CPU::detectFeatures()+0x77d>
c0015363:	51                   	push   ecx
c0015364:	51                   	push   ecx
c0015365:	68 2b 27 02 c0       	push   0xc002272b
c001536a:	e9 ba 01 00 00       	jmp    c0015529 <CPU::detectFeatures()+0x937>
c001536f:	66 81 fa 00 02       	cmp    dx,0x200
c0015374:	75 0c                	jne    c0015382 <CPU::detectFeatures()+0x790>
c0015376:	52                   	push   edx
c0015377:	52                   	push   edx
c0015378:	68 3e 27 02 c0       	push   0xc002273e
c001537d:	e9 a7 01 00 00       	jmp    c0015529 <CPU::detectFeatures()+0x937>
c0015382:	66 81 fa 40 02       	cmp    dx,0x240
c0015387:	75 0c                	jne    c0015395 <CPU::detectFeatures()+0x7a3>
c0015389:	50                   	push   eax
c001538a:	50                   	push   eax
c001538b:	68 50 27 02 c0       	push   0xc0022750
c0015390:	e9 94 01 00 00       	jmp    c0015529 <CPU::detectFeatures()+0x937>
c0015395:	83 f8 06             	cmp    eax,0x6
c0015398:	0f 84 ee 00 00 00    	je     c001548c <CPU::detectFeatures()+0x89a>
c001539e:	83 f9 04             	cmp    ecx,0x4
c00153a1:	0f 84 f6 00 00 00    	je     c001549d <CPU::detectFeatures()+0x8ab>
c00153a7:	50                   	push   eax
c00153a8:	50                   	push   eax
c00153a9:	68 76 27 02 c0       	push   0xc0022776
c00153ae:	e9 76 01 00 00       	jmp    c0015529 <CPU::detectFeatures()+0x937>
c00153b3:	80 fa 06             	cmp    dl,0x6
c00153b6:	0f 85 cb 00 00 00    	jne    c0015487 <CPU::detectFeatures()+0x895>
c00153bc:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00153c2:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00153c7:	66 81 fa 80 01       	cmp    dx,0x180
c00153cc:	75 0c                	jne    c00153da <CPU::detectFeatures()+0x7e8>
c00153ce:	50                   	push   eax
c00153cf:	50                   	push   eax
c00153d0:	68 81 27 02 c0       	push   0xc0022781
c00153d5:	e9 4f 01 00 00       	jmp    c0015529 <CPU::detectFeatures()+0x937>
c00153da:	66 81 fa c0 01       	cmp    dx,0x1c0
c00153df:	74 07                	je     c00153e8 <CPU::detectFeatures()+0x7f6>
c00153e1:	66 81 fa 00 02       	cmp    dx,0x200
c00153e6:	75 0c                	jne    c00153f4 <CPU::detectFeatures()+0x802>
c00153e8:	50                   	push   eax
c00153e9:	50                   	push   eax
c00153ea:	68 91 27 02 c0       	push   0xc0022791
c00153ef:	e9 35 01 00 00       	jmp    c0015529 <CPU::detectFeatures()+0x937>
c00153f4:	66 81 fa 40 02       	cmp    dx,0x240
c00153f9:	75 0c                	jne    c0015407 <CPU::detectFeatures()+0x815>
c00153fb:	50                   	push   eax
c00153fc:	50                   	push   eax
c00153fd:	68 98 27 02 c0       	push   0xc0022798
c0015402:	e9 22 01 00 00       	jmp    c0015529 <CPU::detectFeatures()+0x937>
c0015407:	66 81 fa 80 02       	cmp    dx,0x280
c001540c:	74 07                	je     c0015415 <CPU::detectFeatures()+0x823>
c001540e:	66 81 fa 40 03       	cmp    dx,0x340
c0015413:	75 0c                	jne    c0015421 <CPU::detectFeatures()+0x82f>
c0015415:	50                   	push   eax
c0015416:	50                   	push   eax
c0015417:	68 a1 27 02 c0       	push   0xc00227a1
c001541c:	e9 08 01 00 00       	jmp    c0015529 <CPU::detectFeatures()+0x937>
c0015421:	66 81 fa c0 03       	cmp    dx,0x3c0
c0015426:	75 0c                	jne    c0015434 <CPU::detectFeatures()+0x842>
c0015428:	55                   	push   ebp
c0015429:	55                   	push   ebp
c001542a:	68 a8 27 02 c0       	push   0xc00227a8
c001542f:	e9 f5 00 00 00       	jmp    c0015529 <CPU::detectFeatures()+0x937>
c0015434:	83 f8 06             	cmp    eax,0x6
c0015437:	74 53                	je     c001548c <CPU::detectFeatures()+0x89a>
c0015439:	83 f9 04             	cmp    ecx,0x4
c001543c:	74 5f                	je     c001549d <CPU::detectFeatures()+0x8ab>
c001543e:	57                   	push   edi
c001543f:	57                   	push   edi
c0015440:	68 b1 27 02 c0       	push   0xc00227b1
c0015445:	53                   	push   ebx
c0015446:	e8 bd b3 ff ff       	call   c0010808 <Device::setName(char const*)>
c001544b:	b1 c1                	mov    cl,0xc1
c001544d:	88 c8                	mov    al,cl
c001544f:	e6 22                	out    0x22,al
c0015451:	e4 23                	in     al,0x23
c0015453:	88 c2                	mov    dl,al
c0015455:	88 c8                	mov    al,cl
c0015457:	e6 22                	out    0x22,al
c0015459:	88 d0                	mov    al,dl
c001545b:	83 c8 10             	or     eax,0x10
c001545e:	e6 23                	out    0x23,al
c0015460:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0015467:	89 d0                	mov    eax,edx
c0015469:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001546c:	40                   	inc    eax
c001546d:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0015473:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0015477:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001547d:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0015482:	e9 a8 00 00 00       	jmp    c001552f <CPU::detectFeatures()+0x93d>
c0015487:	83 f8 06             	cmp    eax,0x6
c001548a:	75 0c                	jne    c0015498 <CPU::detectFeatures()+0x8a6>
c001548c:	56                   	push   esi
c001548d:	56                   	push   esi
c001548e:	68 62 27 02 c0       	push   0xc0022762
c0015493:	e9 91 00 00 00       	jmp    c0015529 <CPU::detectFeatures()+0x937>
c0015498:	83 f9 04             	cmp    ecx,0x4
c001549b:	75 0c                	jne    c00154a9 <CPU::detectFeatures()+0x8b7>
c001549d:	51                   	push   ecx
c001549e:	51                   	push   ecx
c001549f:	68 6e 27 02 c0       	push   0xc002276e
c00154a4:	e9 80 00 00 00       	jmp    c0015529 <CPU::detectFeatures()+0x937>
c00154a9:	52                   	push   edx
c00154aa:	52                   	push   edx
c00154ab:	68 bc 27 02 c0       	push   0xc00227bc
c00154b0:	eb 77                	jmp    c0015529 <CPU::detectFeatures()+0x937>
c00154b2:	83 f8 07             	cmp    eax,0x7
c00154b5:	75 09                	jne    c00154c0 <CPU::detectFeatures()+0x8ce>
c00154b7:	50                   	push   eax
c00154b8:	50                   	push   eax
c00154b9:	68 c6 27 02 c0       	push   0xc00227c6
c00154be:	eb 69                	jmp    c0015529 <CPU::detectFeatures()+0x937>
c00154c0:	83 f8 0a             	cmp    eax,0xa
c00154c3:	75 09                	jne    c00154ce <CPU::detectFeatures()+0x8dc>
c00154c5:	50                   	push   eax
c00154c6:	50                   	push   eax
c00154c7:	68 d1 27 02 c0       	push   0xc00227d1
c00154cc:	eb 5b                	jmp    c0015529 <CPU::detectFeatures()+0x937>
c00154ce:	83 f8 0b             	cmp    eax,0xb
c00154d1:	75 09                	jne    c00154dc <CPU::detectFeatures()+0x8ea>
c00154d3:	50                   	push   eax
c00154d4:	50                   	push   eax
c00154d5:	68 d9 27 02 c0       	push   0xc00227d9
c00154da:	eb 4d                	jmp    c0015529 <CPU::detectFeatures()+0x937>
c00154dc:	83 f8 08             	cmp    eax,0x8
c00154df:	75 09                	jne    c00154ea <CPU::detectFeatures()+0x8f8>
c00154e1:	50                   	push   eax
c00154e2:	50                   	push   eax
c00154e3:	68 e2 27 02 c0       	push   0xc00227e2
c00154e8:	eb 3f                	jmp    c0015529 <CPU::detectFeatures()+0x937>
c00154ea:	83 f8 09             	cmp    eax,0x9
c00154ed:	75 09                	jne    c00154f8 <CPU::detectFeatures()+0x906>
c00154ef:	50                   	push   eax
c00154f0:	50                   	push   eax
c00154f1:	68 ea 27 02 c0       	push   0xc00227ea
c00154f6:	eb 31                	jmp    c0015529 <CPU::detectFeatures()+0x937>
c00154f8:	83 f8 05             	cmp    eax,0x5
c00154fb:	75 09                	jne    c0015506 <CPU::detectFeatures()+0x914>
c00154fd:	50                   	push   eax
c00154fe:	50                   	push   eax
c00154ff:	68 f2 27 02 c0       	push   0xc00227f2
c0015504:	eb 23                	jmp    c0015529 <CPU::detectFeatures()+0x937>
c0015506:	83 f8 0c             	cmp    eax,0xc
c0015509:	75 09                	jne    c0015514 <CPU::detectFeatures()+0x922>
c001550b:	55                   	push   ebp
c001550c:	55                   	push   ebp
c001550d:	68 00 28 02 c0       	push   0xc0022800
c0015512:	eb 15                	jmp    c0015529 <CPU::detectFeatures()+0x937>
c0015514:	83 f8 0d             	cmp    eax,0xd
c0015517:	75 09                	jne    c0015522 <CPU::detectFeatures()+0x930>
c0015519:	57                   	push   edi
c001551a:	57                   	push   edi
c001551b:	68 0b 28 02 c0       	push   0xc002280b
c0015520:	eb 07                	jmp    c0015529 <CPU::detectFeatures()+0x937>
c0015522:	56                   	push   esi
c0015523:	56                   	push   esi
c0015524:	68 1f 28 02 c0       	push   0xc002281f
c0015529:	53                   	push   ebx
c001552a:	e8 d9 b2 ff ff       	call   c0010808 <Device::setName(char const*)>
c001552f:	83 c4 10             	add    esp,0x10
c0015532:	e9 82 00 00 00       	jmp    c00155b9 <CPU::detectFeatures()+0x9c7>
c0015537:	51                   	push   ecx
c0015538:	51                   	push   ecx
c0015539:	68 6b 26 02 c0       	push   0xc002266b
c001553e:	57                   	push   edi
c001553f:	e8 1c b2 fe ff       	call   c0000760 <strcpy>
c0015544:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c001554e:	e8 de ac fe ff       	call   c0000231 <is486>
c0015553:	83 c4 10             	add    esp,0x10
c0015556:	85 c0                	test   eax,eax
c0015558:	74 2d                	je     c0015587 <CPU::detectFeatures()+0x995>
c001555a:	52                   	push   edx
c001555b:	52                   	push   edx
c001555c:	68 2b 28 02 c0       	push   0xc002282b
c0015561:	53                   	push   ebx
c0015562:	e8 a1 b2 ff ff       	call   c0010808 <Device::setName(char const*)>
c0015567:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001556e:	e8 e5 a5 00 00       	call   c001fb58 <CPU::readCR0()>
c0015573:	83 c4 10             	add    esp,0x10
c0015576:	83 e0 14             	and    eax,0x14
c0015579:	83 f8 04             	cmp    eax,0x4
c001557c:	75 1f                	jne    c001559d <CPU::detectFeatures()+0x9ab>
c001557e:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0015585:	eb 32                	jmp    c00155b9 <CPU::detectFeatures()+0x9c7>
c0015587:	50                   	push   eax
c0015588:	50                   	push   eax
c0015589:	68 36 28 02 c0       	push   0xc0022836
c001558e:	53                   	push   ebx
c001558f:	e8 74 b2 ff ff       	call   c0010808 <Device::setName(char const*)>
c0015594:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c001559b:	eb d1                	jmp    c001556e <CPU::detectFeatures()+0x97c>
c001559d:	e8 6a ac fe ff       	call   c000020c <hasLegacyFPU>
c00155a2:	83 e0 01             	and    eax,0x1
c00155a5:	8d 14 00             	lea    edx,[eax+eax*1]
c00155a8:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00155ae:	83 e0 fd             	and    eax,0xfffffffd
c00155b1:	09 d0                	or     eax,edx
c00155b3:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00155b9:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00155c0:	83 c4 4c             	add    esp,0x4c
c00155c3:	5b                   	pop    ebx
c00155c4:	5e                   	pop    esi
c00155c5:	5f                   	pop    edi
c00155c6:	5d                   	pop    ebp
c00155c7:	c3                   	ret    

c00155c8 <CPU::setupSMEP()>:
c00155c8:	83 ec 0c             	sub    esp,0xc
c00155cb:	e8 52 a8 00 00       	call   c001fe22 <CPU::readCR4()>
c00155d0:	0d 00 00 10 00       	or     eax,0x100000
c00155d5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00155d9:	83 c4 0c             	add    esp,0xc
c00155dc:	e9 5c a8 00 00       	jmp    c001fe3d <CPU::writeCR4(unsigned long)>
c00155e1:	90                   	nop

c00155e2 <CPU::setupUMIP()>:
c00155e2:	83 ec 0c             	sub    esp,0xc
c00155e5:	e8 38 a8 00 00       	call   c001fe22 <CPU::readCR4()>
c00155ea:	80 cc 08             	or     ah,0x8
c00155ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00155f1:	83 c4 0c             	add    esp,0xc
c00155f4:	e9 44 a8 00 00       	jmp    c001fe3d <CPU::writeCR4(unsigned long)>
c00155f9:	90                   	nop

c00155fa <CPU::setupTSC()>:
c00155fa:	83 ec 0c             	sub    esp,0xc
c00155fd:	e8 20 a8 00 00       	call   c001fe22 <CPU::readCR4()>
c0015602:	83 c8 04             	or     eax,0x4
c0015605:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015609:	83 c4 0c             	add    esp,0xc
c001560c:	e9 2c a8 00 00       	jmp    c001fe3d <CPU::writeCR4(unsigned long)>
c0015611:	90                   	nop

c0015612 <CPU::setupLargePages()>:
c0015612:	83 ec 0c             	sub    esp,0xc
c0015615:	e8 08 a8 00 00       	call   c001fe22 <CPU::readCR4()>
c001561a:	83 c8 10             	or     eax,0x10
c001561d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015621:	83 c4 0c             	add    esp,0xc
c0015624:	e9 14 a8 00 00       	jmp    c001fe3d <CPU::writeCR4(unsigned long)>
c0015629:	90                   	nop

c001562a <CPU::setupPAT()>:
c001562a:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001562f:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0015636:	74 2c                	je     c0015664 <CPU::setupPAT()+0x3a>
c0015638:	53                   	push   ebx
c0015639:	83 ec 10             	sub    esp,0x10
c001563c:	68 77 02 00 00       	push   0x277
c0015641:	50                   	push   eax
c0015642:	e8 35 5f ff ff       	call   c000b57c <Computer::rdmsr(unsigned int)>
c0015647:	83 e2 f8             	and    edx,0xfffffff8
c001564a:	83 ca 01             	or     edx,0x1
c001564d:	52                   	push   edx
c001564e:	50                   	push   eax
c001564f:	68 77 02 00 00       	push   0x277
c0015654:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c001565a:	e8 49 5f ff ff       	call   c000b5a8 <Computer::wrmsr(unsigned int, unsigned long long)>
c001565f:	83 c4 28             	add    esp,0x28
c0015662:	5b                   	pop    ebx
c0015663:	c3                   	ret    
c0015664:	c3                   	ret    
c0015665:	90                   	nop

c0015666 <CPU::setupMTRR()>:
c0015666:	c3                   	ret    
c0015667:	90                   	nop

c0015668 <CPU::setupGlobalPages()>:
c0015668:	83 ec 0c             	sub    esp,0xc
c001566b:	e8 b2 a7 00 00       	call   c001fe22 <CPU::readCR4()>
c0015670:	0c 80                	or     al,0x80
c0015672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015676:	83 c4 0c             	add    esp,0xc
c0015679:	e9 bf a7 00 00       	jmp    c001fe3d <CPU::writeCR4(unsigned long)>

c001567e <CPU::allowUsermodeDataAccess()>:
c001567e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015682:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0015689:	74 03                	je     c001568e <CPU::allowUsermodeDataAccess()+0x10>
c001568b:	0f 01 cb             	stac   
c001568e:	c3                   	ret    
c001568f:	90                   	nop

c0015690 <CPU::prohibitUsermodeDataAccess()>:
c0015690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015694:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001569b:	74 03                	je     c00156a0 <CPU::prohibitUsermodeDataAccess()+0x10>
c001569d:	0f 01 ca             	clac   
c00156a0:	c3                   	ret    
c00156a1:	90                   	nop

c00156a2 <CPU::setupSMAP()>:
c00156a2:	53                   	push   ebx
c00156a3:	83 ec 08             	sub    esp,0x8
c00156a6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156aa:	e8 73 a7 00 00       	call   c001fe22 <CPU::readCR4()>
c00156af:	83 ec 0c             	sub    esp,0xc
c00156b2:	0d 00 00 20 00       	or     eax,0x200000
c00156b7:	50                   	push   eax
c00156b8:	e8 80 a7 00 00       	call   c001fe3d <CPU::writeCR4(unsigned long)>
c00156bd:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00156c1:	83 c4 18             	add    esp,0x18
c00156c4:	5b                   	pop    ebx
c00156c5:	eb c9                	jmp    c0015690 <CPU::prohibitUsermodeDataAccess()>
c00156c7:	90                   	nop

c00156c8 <CPU::setupFeatures()>:
c00156c8:	53                   	push   ebx
c00156c9:	83 ec 08             	sub    esp,0x8
c00156cc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00156d0:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00156d7:	74 0c                	je     c00156e5 <CPU::setupFeatures()+0x1d>
c00156d9:	83 ec 0c             	sub    esp,0xc
c00156dc:	53                   	push   ebx
c00156dd:	e8 e6 fe ff ff       	call   c00155c8 <CPU::setupSMEP()>
c00156e2:	83 c4 10             	add    esp,0x10
c00156e5:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c00156ec:	74 0c                	je     c00156fa <CPU::setupFeatures()+0x32>
c00156ee:	83 ec 0c             	sub    esp,0xc
c00156f1:	53                   	push   ebx
c00156f2:	e8 ab ff ff ff       	call   c00156a2 <CPU::setupSMAP()>
c00156f7:	83 c4 10             	add    esp,0x10
c00156fa:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0015701:	74 0c                	je     c001570f <CPU::setupFeatures()+0x47>
c0015703:	83 ec 0c             	sub    esp,0xc
c0015706:	53                   	push   ebx
c0015707:	e8 d6 fe ff ff       	call   c00155e2 <CPU::setupUMIP()>
c001570c:	83 c4 10             	add    esp,0x10
c001570f:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0015716:	74 0c                	je     c0015724 <CPU::setupFeatures()+0x5c>
c0015718:	83 ec 0c             	sub    esp,0xc
c001571b:	53                   	push   ebx
c001571c:	e8 d9 fe ff ff       	call   c00155fa <CPU::setupTSC()>
c0015721:	83 c4 10             	add    esp,0x10
c0015724:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c001572b:	74 0c                	je     c0015739 <CPU::setupFeatures()+0x71>
c001572d:	83 ec 0c             	sub    esp,0xc
c0015730:	53                   	push   ebx
c0015731:	e8 dc fe ff ff       	call   c0015612 <CPU::setupLargePages()>
c0015736:	83 c4 10             	add    esp,0x10
c0015739:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0015740:	74 0c                	je     c001574e <CPU::setupFeatures()+0x86>
c0015742:	83 ec 0c             	sub    esp,0xc
c0015745:	53                   	push   ebx
c0015746:	e8 1d ff ff ff       	call   c0015668 <CPU::setupGlobalPages()>
c001574b:	83 c4 10             	add    esp,0x10
c001574e:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0015755:	74 0d                	je     c0015764 <CPU::setupFeatures()+0x9c>
c0015757:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001575b:	83 c4 08             	add    esp,0x8
c001575e:	5b                   	pop    ebx
c001575f:	e9 c6 fe ff ff       	jmp    c001562a <CPU::setupPAT()>
c0015764:	83 c4 08             	add    esp,0x8
c0015767:	5b                   	pop    ebx
c0015768:	c3                   	ret    
c0015769:	90                   	nop

c001576a <CPU::open(int, int, void*)>:
c001576a:	57                   	push   edi
c001576b:	56                   	push   esi
c001576c:	53                   	push   ebx
c001576d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015771:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015775:	83 ec 0c             	sub    esp,0xc
c0015778:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c001577e:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0015784:	50                   	push   eax
c0015785:	e8 e2 60 ff ff       	call   c000b86c <GDT::setup()>
c001578a:	83 c4 0c             	add    esp,0xc
c001578d:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0015793:	6a 00                	push   0x0
c0015795:	68 ef be ad de       	push   0xdeadbeef
c001579a:	57                   	push   edi
c001579b:	e8 62 83 ff ff       	call   c000db02 <TSS::setup(unsigned long, unsigned long)>
c00157a0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00157a3:	e8 3a 83 ff ff       	call   c000dae2 <TSS::flush()>
c00157a8:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00157ae:	89 04 24             	mov    DWORD PTR [esp],eax
c00157b1:	e8 10 63 ff ff       	call   c000bac6 <IDT::setup()>
c00157b6:	c7 04 24 00 04 00 00 	mov    DWORD PTR [esp],0x400
c00157bd:	e8 72 a6 00 00       	call   c001fe34 <CPU::writeDR7(unsigned long)>
c00157c2:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00157cc:	e8 e4 6d ff ff       	call   c000c5b5 <Phys::allocatePage()>
c00157d1:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00157d7:	89 30                	mov    DWORD PTR [eax],esi
c00157d9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00157df:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00157e2:	58                   	pop    eax
c00157e3:	5a                   	pop    edx
c00157e4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00157ea:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00157ee:	e8 a3 93 ff ff       	call   c000eb96 <VAS::setCPUSpecific(unsigned long)>
c00157f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00157f6:	e8 f7 f3 ff ff       	call   c0014bf2 <CPU::detectFeatures()>
c00157fb:	e8 22 c3 ff ff       	call   c0011b22 <setupInterruptController()>
c0015800:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0015806:	a1 c0 47 02 c0       	mov    eax,ds:0xc00247c0
c001580b:	83 e0 10             	and    eax,0x10
c001580e:	83 f8 01             	cmp    eax,0x1
c0015811:	19 c0                	sbb    eax,eax
c0015813:	83 e0 46             	and    eax,0x46
c0015816:	83 c0 1e             	add    eax,0x1e
c0015819:	89 04 24             	mov    DWORD PTR [esp],eax
c001581c:	e8 a7 d6 ff ff       	call   c0012ec8 <setupTimer(int)>
c0015821:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0015827:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001582a:	e8 99 fe ff ff       	call   c00156c8 <CPU::setupFeatures()>
c001582f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015832:	e8 3f f1 ff ff       	call   c0014976 <CPU::displayFeatures()>
c0015837:	83 c4 10             	add    esp,0x10
c001583a:	5b                   	pop    ebx
c001583b:	31 c0                	xor    eax,eax
c001583d:	5e                   	pop    esi
c001583e:	5f                   	pop    edi
c001583f:	c3                   	ret    

c0015840 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0015840:	56                   	push   esi
c0015841:	53                   	push   ebx
c0015842:	51                   	push   ecx
c0015843:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015847:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001584b:	8b 5a 38             	mov    ebx,DWORD PTR [edx+0x38]
c001584e:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0015851:	88 c1                	mov    cl,al
c0015853:	c0 e9 06             	shr    cl,0x6
c0015856:	88 0c 24             	mov    BYTE PTR [esp],cl
c0015859:	88 c1                	mov    cl,al
c001585b:	66 c1 e8 03          	shr    ax,0x3
c001585f:	83 e1 07             	and    ecx,0x7
c0015862:	83 e0 07             	and    eax,0x7
c0015865:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c0015869:	88 06                	mov    BYTE PTR [esi],al
c001586b:	74 7f                	je     c00158ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c001586d:	80 f9 04             	cmp    cl,0x4
c0015870:	74 7a                	je     c00158ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c0015872:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0015876:	75 05                	jne    c001587d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x3d>
c0015878:	80 f9 05             	cmp    cl,0x5
c001587b:	74 6f                	je     c00158ec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xac>
c001587d:	84 c9                	test   cl,cl
c001587f:	75 05                	jne    c0015886 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x46>
c0015881:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c0015884:	eb 3c                	jmp    c00158c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015886:	80 f9 01             	cmp    cl,0x1
c0015889:	75 05                	jne    c0015890 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x50>
c001588b:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001588e:	eb 32                	jmp    c00158c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c0015890:	80 f9 02             	cmp    cl,0x2
c0015893:	75 05                	jne    c001589a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5a>
c0015895:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0015898:	eb 28                	jmp    c00158c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c001589a:	31 c0                	xor    eax,eax
c001589c:	80 f9 03             	cmp    cl,0x3
c001589f:	75 05                	jne    c00158a6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x66>
c00158a1:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00158a4:	eb 1c                	jmp    c00158c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158a6:	80 f9 05             	cmp    cl,0x5
c00158a9:	75 05                	jne    c00158b0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x70>
c00158ab:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c00158ae:	eb 12                	jmp    c00158c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158b0:	80 f9 06             	cmp    cl,0x6
c00158b3:	75 05                	jne    c00158ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7a>
c00158b5:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00158b8:	eb 08                	jmp    c00158c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158ba:	80 f9 07             	cmp    cl,0x7
c00158bd:	75 03                	jne    c00158c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x82>
c00158bf:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00158c2:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c00158c6:	75 10                	jne    c00158d8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x98>
c00158c8:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c00158cc:	b9 03 00 00 00       	mov    ecx,0x3
c00158d1:	01 d0                	add    eax,edx
c00158d3:	e9 42 01 00 00       	jmp    c0015a1a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00158d8:	b9 02 00 00 00       	mov    ecx,0x2
c00158dd:	80 3c 24 02          	cmp    BYTE PTR [esp],0x2
c00158e1:	0f 85 33 01 00 00    	jne    c0015a1a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c00158e7:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c00158ea:	eb 18                	jmp    c0015904 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xc4>
c00158ec:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00158f0:	0f 94 44 24 02       	sete   BYTE PTR [esp+0x2]
c00158f5:	80 f9 05             	cmp    cl,0x5
c00158f8:	0f 94 c0             	sete   al
c00158fb:	84 44 24 02          	test   BYTE PTR [esp+0x2],al
c00158ff:	74 0d                	je     c001590e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0015901:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0015904:	b9 06 00 00 00       	mov    ecx,0x6
c0015909:	e9 0c 01 00 00       	jmp    c0015a1a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1da>
c001590e:	80 3c 24 03          	cmp    BYTE PTR [esp],0x3
c0015912:	0f 84 06 01 00 00    	je     c0015a1e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1de>
c0015918:	80 f9 04             	cmp    cl,0x4
c001591b:	0f 85 06 01 00 00    	jne    c0015a27 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e7>
c0015921:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0015924:	89 c6                	mov    esi,eax
c0015926:	88 c1                	mov    cl,al
c0015928:	66 c1 ee 03          	shr    si,0x3
c001592c:	c0 e9 06             	shr    cl,0x6
c001592f:	83 e6 07             	and    esi,0x7
c0015932:	24 07                	and    al,0x7
c0015934:	88 4c 24 03          	mov    BYTE PTR [esp+0x3],cl
c0015938:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001593c:	89 f1                	mov    ecx,esi
c001593e:	75 05                	jne    c0015945 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x105>
c0015940:	8b 72 2c             	mov    esi,DWORD PTR [edx+0x2c]
c0015943:	eb 4b                	jmp    c0015990 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015945:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001594a:	75 05                	jne    c0015951 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x111>
c001594c:	8b 72 28             	mov    esi,DWORD PTR [edx+0x28]
c001594f:	eb 3f                	jmp    c0015990 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015951:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0015956:	75 05                	jne    c001595d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x11d>
c0015958:	8b 72 24             	mov    esi,DWORD PTR [edx+0x24]
c001595b:	eb 33                	jmp    c0015990 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001595d:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0015962:	75 05                	jne    c0015969 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x129>
c0015964:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0015967:	eb 27                	jmp    c0015990 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015969:	80 7c 24 01 04       	cmp    BYTE PTR [esp+0x1],0x4
c001596e:	75 05                	jne    c0015975 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x135>
c0015970:	8b 72 44             	mov    esi,DWORD PTR [edx+0x44]
c0015973:	eb 1b                	jmp    c0015990 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015975:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c001597a:	75 05                	jne    c0015981 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x141>
c001597c:	8b 72 18             	mov    esi,DWORD PTR [edx+0x18]
c001597f:	eb 0f                	jmp    c0015990 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c0015981:	80 7c 24 01 06       	cmp    BYTE PTR [esp+0x1],0x6
c0015986:	75 05                	jne    c001598d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14d>
c0015988:	8b 72 14             	mov    esi,DWORD PTR [edx+0x14]
c001598b:	eb 03                	jmp    c0015990 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x150>
c001598d:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0015990:	84 c9                	test   cl,cl
c0015992:	75 05                	jne    c0015999 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0015994:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c0015997:	eb 3c                	jmp    c00159d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c0015999:	80 f9 01             	cmp    cl,0x1
c001599c:	75 05                	jne    c00159a3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001599e:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00159a1:	eb 32                	jmp    c00159d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159a3:	80 f9 02             	cmp    cl,0x2
c00159a6:	75 05                	jne    c00159ad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c00159a8:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00159ab:	eb 28                	jmp    c00159d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159ad:	80 f9 03             	cmp    cl,0x3
c00159b0:	75 05                	jne    c00159b7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x177>
c00159b2:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00159b5:	eb 1e                	jmp    c00159d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159b7:	31 c0                	xor    eax,eax
c00159b9:	80 f9 04             	cmp    cl,0x4
c00159bc:	74 17                	je     c00159d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159be:	80 f9 05             	cmp    cl,0x5
c00159c1:	75 05                	jne    c00159c8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c00159c3:	8b 42 18             	mov    eax,DWORD PTR [edx+0x18]
c00159c6:	eb 0d                	jmp    c00159d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159c8:	80 f9 06             	cmp    cl,0x6
c00159cb:	75 05                	jne    c00159d2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x192>
c00159cd:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00159d0:	eb 03                	jmp    c00159d5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x195>
c00159d2:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c00159d5:	80 7c 24 01 05       	cmp    BYTE PTR [esp+0x1],0x5
c00159da:	8a 4c 24 03          	mov    cl,BYTE PTR [esp+0x3]
c00159de:	0f 94 c2             	sete   dl
c00159e1:	d3 e0                	shl    eax,cl
c00159e3:	22 54 24 02          	and    dl,BYTE PTR [esp+0x2]
c00159e7:	74 07                	je     c00159f0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b0>
c00159e9:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c00159ec:	31 d2                	xor    edx,edx
c00159ee:	eb 23                	jmp    c0015a13 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c00159f0:	01 f0                	add    eax,esi
c00159f2:	b9 03 00 00 00       	mov    ecx,0x3
c00159f7:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00159fb:	74 33                	je     c0015a30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c00159fd:	80 3c 24 01          	cmp    BYTE PTR [esp],0x1
c0015a01:	75 0d                	jne    c0015a10 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d0>
c0015a03:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0015a07:	01 c8                	add    eax,ecx
c0015a09:	b9 04 00 00 00       	mov    ecx,0x4
c0015a0e:	eb 20                	jmp    c0015a30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a10:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0015a13:	b9 07 00 00 00       	mov    ecx,0x7
c0015a18:	eb 16                	jmp    c0015a30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a1a:	31 d2                	xor    edx,edx
c0015a1c:	eb 12                	jmp    c0015a30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1f0>
c0015a1e:	b9 02 00 00 00       	mov    ecx,0x2
c0015a23:	b2 01                	mov    dl,0x1
c0015a25:	eb 07                	jmp    c0015a2e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ee>
c0015a27:	31 d2                	xor    edx,edx
c0015a29:	b9 02 00 00 00       	mov    ecx,0x2
c0015a2e:	31 c0                	xor    eax,eax
c0015a30:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015a34:	89 0b                	mov    DWORD PTR [ebx],ecx
c0015a36:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015a3a:	88 11                	mov    BYTE PTR [ecx],dl
c0015a3c:	5a                   	pop    edx
c0015a3d:	5b                   	pop    ebx
c0015a3e:	5e                   	pop    esi
c0015a3f:	c3                   	ret    

c0015a40 <Krnl::panic(char const*)>:
c0015a40:	55                   	push   ebp
c0015a41:	89 e5                	mov    ebp,esp
c0015a43:	53                   	push   ebx
c0015a44:	51                   	push   ecx
c0015a45:	a1 f0 51 02 c0       	mov    eax,ds:0xc00251f0
c0015a4a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0015a4d:	85 c0                	test   eax,eax
c0015a4f:	74 02                	je     c0015a53 <Krnl::panic(char const*)+0x13>
c0015a51:	ff d0                	call   eax
c0015a53:	fa                   	cli    
c0015a54:	50                   	push   eax
c0015a55:	c6 05 f4 51 02 c0 01 	mov    BYTE PTR ds:0xc00251f4,0x1
c0015a5c:	50                   	push   eax
c0015a5d:	c6 05 e0 3b 02 c0 00 	mov    BYTE PTR ds:0xc0023be0,0x0
c0015a64:	53                   	push   ebx
c0015a65:	68 70 28 02 c0       	push   0xc0022870
c0015a6a:	e8 a2 97 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0015a6f:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015a74:	5a                   	pop    edx
c0015a75:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015a7b:	51                   	push   ecx
c0015a7c:	e8 c0 78 ff ff       	call   c000d341 <setActiveTerminal(VgaText*)>
c0015a81:	83 c4 0c             	add    esp,0xc
c0015a84:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015a89:	6a 01                	push   0x1
c0015a8b:	6a 0f                	push   0xf
c0015a8d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015a93:	50                   	push   eax
c0015a94:	e8 e7 72 ff ff       	call   c000cd80 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0015a99:	58                   	pop    eax
c0015a9a:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015a9f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015aa5:	50                   	push   eax
c0015aa6:	e8 39 7b ff ff       	call   c000d5e4 <VgaText::clearScreen()>
c0015aab:	58                   	pop    eax
c0015aac:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015ab1:	5a                   	pop    edx
c0015ab2:	68 89 28 02 c0       	push   0xc0022889
c0015ab7:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015abd:	51                   	push   ecx
c0015abe:	e8 9f 7c ff ff       	call   c000d762 <VgaText::puts(char const*)>
c0015ac3:	58                   	pop    eax
c0015ac4:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015ac9:	5a                   	pop    edx
c0015aca:	68 30 29 02 c0       	push   0xc0022930
c0015acf:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015ad5:	51                   	push   ecx
c0015ad6:	e8 87 7c ff ff       	call   c000d762 <VgaText::puts(char const*)>
c0015adb:	58                   	pop    eax
c0015adc:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015ae1:	5a                   	pop    edx
c0015ae2:	68 a5 28 02 c0       	push   0xc00228a5
c0015ae7:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015aed:	51                   	push   ecx
c0015aee:	e8 6f 7c ff ff       	call   c000d762 <VgaText::puts(char const*)>
c0015af3:	58                   	pop    eax
c0015af4:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015af9:	5a                   	pop    edx
c0015afa:	53                   	push   ebx
c0015afb:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b01:	51                   	push   ecx
c0015b02:	e8 5b 7c ff ff       	call   c000d762 <VgaText::puts(char const*)>
c0015b07:	5b                   	pop    ebx
c0015b08:	58                   	pop    eax
c0015b09:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b0e:	68 c5 28 02 c0       	push   0xc00228c5
c0015b13:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b19:	50                   	push   eax
c0015b1a:	e8 43 7c ff ff       	call   c000d762 <VgaText::puts(char const*)>
c0015b1f:	58                   	pop    eax
c0015b20:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b25:	5a                   	pop    edx
c0015b26:	68 6c 29 02 c0       	push   0xc002296c
c0015b2b:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b31:	51                   	push   ecx
c0015b32:	e8 2b 7c ff ff       	call   c000d762 <VgaText::puts(char const*)>
c0015b37:	5b                   	pop    ebx
c0015b38:	58                   	pop    eax
c0015b39:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b3e:	68 a5 28 02 c0       	push   0xc00228a5
c0015b43:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b49:	50                   	push   eax
c0015b4a:	e8 13 7c ff ff       	call   c000d762 <VgaText::puts(char const*)>
c0015b4f:	58                   	pop    eax
c0015b50:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b55:	5a                   	pop    edx
c0015b56:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015b59:	83 c0 0c             	add    eax,0xc
c0015b5c:	50                   	push   eax
c0015b5d:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b62:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b68:	51                   	push   ecx
c0015b69:	e8 f4 7b ff ff       	call   c000d762 <VgaText::puts(char const*)>
c0015b6e:	5b                   	pop    ebx
c0015b6f:	58                   	pop    eax
c0015b70:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b75:	68 c4 28 02 c0       	push   0xc00228c4
c0015b7a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015b80:	50                   	push   eax
c0015b81:	e8 dc 7b ff ff       	call   c000d762 <VgaText::puts(char const*)>
c0015b86:	58                   	pop    eax
c0015b87:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015b8c:	5a                   	pop    edx
c0015b8d:	68 98 29 02 c0       	push   0xc0022998
c0015b92:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015b98:	51                   	push   ecx
c0015b99:	e8 c4 7b ff ff       	call   c000d762 <VgaText::puts(char const*)>
c0015b9e:	5b                   	pop    ebx
c0015b9f:	58                   	pop    eax
c0015ba0:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015ba5:	68 d8 29 02 c0       	push   0xc00229d8
c0015baa:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015bb0:	50                   	push   eax
c0015bb1:	e8 ac 7b ff ff       	call   c000d762 <VgaText::puts(char const*)>
c0015bb6:	58                   	pop    eax
c0015bb7:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015bbc:	5a                   	pop    edx
c0015bbd:	68 b0 28 02 c0       	push   0xc00228b0
c0015bc2:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015bc8:	51                   	push   ecx
c0015bc9:	e8 94 7b ff ff       	call   c000d762 <VgaText::puts(char const*)>
c0015bce:	5b                   	pop    ebx
c0015bcf:	58                   	pop    eax
c0015bd0:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0015bd3:	50                   	push   eax
c0015bd4:	68 c8 28 02 c0       	push   0xc00228c8
c0015bd9:	e8 33 96 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0015bde:	58                   	pop    eax
c0015bdf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015be2:	5a                   	pop    edx
c0015be3:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015be6:	51                   	push   ecx
c0015be7:	68 d1 28 02 c0       	push   0xc00228d1
c0015bec:	e8 20 96 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0015bf1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015bf4:	5b                   	pop    ebx
c0015bf5:	5a                   	pop    edx
c0015bf6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf8:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0015bfb:	51                   	push   ecx
c0015bfc:	68 da 28 02 c0       	push   0xc00228da
c0015c01:	e8 0b 96 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0015c06:	5b                   	pop    ebx
c0015c07:	58                   	pop    eax
c0015c08:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c0d:	68 1c 2a 02 c0       	push   0xc0022a1c
c0015c12:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c18:	50                   	push   eax
c0015c19:	e8 44 7b ff ff       	call   c000d762 <VgaText::puts(char const*)>
c0015c1e:	58                   	pop    eax
c0015c1f:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c24:	5a                   	pop    edx
c0015c25:	68 e3 28 02 c0       	push   0xc00228e3
c0015c2a:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015c30:	51                   	push   ecx
c0015c31:	e8 2c 7b ff ff       	call   c000d762 <VgaText::puts(char const*)>
c0015c36:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c3b:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015c41:	e8 12 9f 00 00       	call   c001fb58 <CPU::readCR0()>
c0015c46:	5a                   	pop    edx
c0015c47:	59                   	pop    ecx
c0015c48:	50                   	push   eax
c0015c49:	53                   	push   ebx
c0015c4a:	e8 39 7b ff ff       	call   c000d788 <VgaText::putx(unsigned int)>
c0015c4f:	5b                   	pop    ebx
c0015c50:	58                   	pop    eax
c0015c51:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c56:	68 ed 28 02 c0       	push   0xc00228ed
c0015c5b:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c61:	50                   	push   eax
c0015c62:	e8 fb 7a ff ff       	call   c000d762 <VgaText::puts(char const*)>
c0015c67:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c6c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015c72:	e8 cf a1 00 00       	call   c001fe46 <CPU::readCR2()>
c0015c77:	5a                   	pop    edx
c0015c78:	59                   	pop    ecx
c0015c79:	50                   	push   eax
c0015c7a:	53                   	push   ebx
c0015c7b:	e8 08 7b ff ff       	call   c000d788 <VgaText::putx(unsigned int)>
c0015c80:	5b                   	pop    ebx
c0015c81:	58                   	pop    eax
c0015c82:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c87:	68 f7 28 02 c0       	push   0xc00228f7
c0015c8c:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015c92:	50                   	push   eax
c0015c93:	e8 ca 7a ff ff       	call   c000d762 <VgaText::puts(char const*)>
c0015c98:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015c9d:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015ca3:	e8 3d 9b 00 00       	call   c001f7e5 <CPU::readCR3()>
c0015ca8:	5a                   	pop    edx
c0015ca9:	59                   	pop    ecx
c0015caa:	50                   	push   eax
c0015cab:	53                   	push   ebx
c0015cac:	e8 d7 7a ff ff       	call   c000d788 <VgaText::putx(unsigned int)>
c0015cb1:	5b                   	pop    ebx
c0015cb2:	58                   	pop    eax
c0015cb3:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015cb8:	68 0a 29 02 c0       	push   0xc002290a
c0015cbd:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015cc3:	50                   	push   eax
c0015cc4:	e8 99 7a ff ff       	call   c000d762 <VgaText::puts(char const*)>
c0015cc9:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015cce:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0015cd4:	e8 49 a1 00 00       	call   c001fe22 <CPU::readCR4()>
c0015cd9:	5a                   	pop    edx
c0015cda:	59                   	pop    ecx
c0015cdb:	50                   	push   eax
c0015cdc:	53                   	push   ebx
c0015cdd:	e8 a6 7a ff ff       	call   c000d788 <VgaText::putx(unsigned int)>
c0015ce2:	5b                   	pop    ebx
c0015ce3:	58                   	pop    eax
c0015ce4:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015ce9:	68 14 29 02 c0       	push   0xc0022914
c0015cee:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015cf4:	50                   	push   eax
c0015cf5:	e8 68 7a ff ff       	call   c000d762 <VgaText::puts(char const*)>
c0015cfa:	5a                   	pop    edx
c0015cfb:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d00:	59                   	pop    ecx
c0015d01:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
c0015d04:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d0a:	53                   	push   ebx
c0015d0b:	50                   	push   eax
c0015d0c:	e8 77 7a ff ff       	call   c000d788 <VgaText::putx(unsigned int)>
c0015d11:	58                   	pop    eax
c0015d12:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d17:	5a                   	pop    edx
c0015d18:	68 2b 29 02 c0       	push   0xc002292b
c0015d1d:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0015d23:	51                   	push   ecx
c0015d24:	e8 39 7a ff ff       	call   c000d762 <VgaText::puts(char const*)>
c0015d29:	5b                   	pop    ebx
c0015d2a:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d2f:	5a                   	pop    edx
c0015d30:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015d33:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d39:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015d3c:	51                   	push   ecx
c0015d3d:	50                   	push   eax
c0015d3e:	e8 45 7a ff ff       	call   c000d788 <VgaText::putx(unsigned int)>
c0015d43:	5b                   	pop    ebx
c0015d44:	58                   	pop    eax
c0015d45:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d4a:	68 2b 29 02 c0       	push   0xc002292b
c0015d4f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d55:	50                   	push   eax
c0015d56:	e8 07 7a ff ff       	call   c000d762 <VgaText::puts(char const*)>
c0015d5b:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0015d5e:	59                   	pop    ecx
c0015d5f:	a1 f4 5b 02 c0       	mov    eax,ds:0xc0025bf4
c0015d64:	5b                   	pop    ebx
c0015d65:	8b 12                	mov    edx,DWORD PTR [edx]
c0015d67:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015d6d:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0015d70:	52                   	push   edx
c0015d71:	50                   	push   eax
c0015d72:	e8 11 7a ff ff       	call   c000d788 <VgaText::putx(unsigned int)>
c0015d77:	83 c4 10             	add    esp,0x10
c0015d7a:	b2 fe                	mov    dl,0xfe
c0015d7c:	e4 60                	in     al,0x60
c0015d7e:	3c 1c                	cmp    al,0x1c
c0015d80:	74 04                	je     c0015d86 <Krnl::panic(char const*)+0x346>
c0015d82:	3c 5a                	cmp    al,0x5a
c0015d84:	75 f6                	jne    c0015d7c <Krnl::panic(char const*)+0x33c>
c0015d86:	e4 64                	in     al,0x64
c0015d88:	a8 02                	test   al,0x2
c0015d8a:	75 fa                	jne    c0015d86 <Krnl::panic(char const*)+0x346>
c0015d8c:	88 d0                	mov    al,dl
c0015d8e:	e6 64                	out    0x64,al
c0015d90:	fa                   	cli    
c0015d91:	f4                   	hlt    
c0015d92:	eb e8                	jmp    c0015d7c <Krnl::panic(char const*)+0x33c>

c0015d94 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0015d94:	55                   	push   ebp
c0015d95:	57                   	push   edi
c0015d96:	56                   	push   esi
c0015d97:	53                   	push   ebx
c0015d98:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0015d9e:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0015da5:	8d 46 01             	lea    eax,[esi+0x1]
c0015da8:	8a 1e                	mov    bl,BYTE PTR [esi]
c0015daa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015dae:	80 fb 40             	cmp    bl,0x40
c0015db1:	75 19                	jne    c0015dcc <Reg::findLineFromLoadedData(char*, char*, char*)+0x38>
c0015db3:	8a 06                	mov    al,BYTE PTR [esi]
c0015db5:	84 c0                	test   al,al
c0015db7:	74 07                	je     c0015dc0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015db9:	3c 3a                	cmp    al,0x3a
c0015dbb:	74 03                	je     c0015dc0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x2c>
c0015dbd:	46                   	inc    esi
c0015dbe:	eb f3                	jmp    c0015db3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1f>
c0015dc0:	84 c0                	test   al,al
c0015dc2:	0f 84 1f 01 00 00    	je     c0015ee7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015dc8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0015dcb:	46                   	inc    esi
c0015dcc:	50                   	push   eax
c0015dcd:	6a 40                	push   0x40
c0015dcf:	6a 00                	push   0x0
c0015dd1:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015dd5:	50                   	push   eax
c0015dd6:	e8 e6 a8 fe ff       	call   c00006c1 <memset>
c0015ddb:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c0015de2:	31 d2                	xor    edx,edx
c0015de4:	83 c4 10             	add    esp,0x10
c0015de7:	8a 07                	mov    al,BYTE PTR [edi]
c0015de9:	84 c0                	test   al,al
c0015deb:	0f 84 f6 00 00 00    	je     c0015ee7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015df1:	81 fa c7 00 00 00    	cmp    edx,0xc7
c0015df7:	0f 8f ea 00 00 00    	jg     c0015ee7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015dfd:	3c 0a                	cmp    al,0xa
c0015dff:	0f 85 d3 00 00 00    	jne    c0015ed8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x144>
c0015e05:	c6 44 14 58 00       	mov    BYTE PTR [esp+edx*1+0x58],0x0
c0015e0a:	8a 4c 24 58          	mov    cl,BYTE PTR [esp+0x58]
c0015e0e:	f6 c1 df             	test   cl,0xdf
c0015e11:	0f 94 c2             	sete   dl
c0015e14:	80 f9 23             	cmp    cl,0x23
c0015e17:	0f 94 c0             	sete   al
c0015e1a:	08 c2                	or     dl,al
c0015e1c:	75 47                	jne    c0015e65 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e1e:	8d 41 f7             	lea    eax,[ecx-0x9]
c0015e21:	3c 01                	cmp    al,0x1
c0015e23:	76 40                	jbe    c0015e65 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e25:	80 f9 5b             	cmp    cl,0x5b
c0015e28:	75 3f                	jne    c0015e69 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd5>
c0015e2a:	80 fb 40             	cmp    bl,0x40
c0015e2d:	75 36                	jne    c0015e65 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e2f:	83 ec 0c             	sub    esp,0xc
c0015e32:	8d 6c 24 65          	lea    ebp,[esp+0x65]
c0015e36:	55                   	push   ebp
c0015e37:	e8 a2 a8 fe ff       	call   c00006de <strlen>
c0015e3c:	83 c4 10             	add    esp,0x10
c0015e3f:	83 f8 3f             	cmp    eax,0x3f
c0015e42:	0f 87 9f 00 00 00    	ja     c0015ee7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015e48:	50                   	push   eax
c0015e49:	50                   	push   eax
c0015e4a:	55                   	push   ebp
c0015e4b:	8d 6c 24 24          	lea    ebp,[esp+0x24]
c0015e4f:	55                   	push   ebp
c0015e50:	e8 0b a9 fe ff       	call   c0000760 <strcpy>
c0015e55:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015e58:	e8 81 a8 fe ff       	call   c00006de <strlen>
c0015e5d:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0015e62:	83 c4 10             	add    esp,0x10
c0015e65:	31 c9                	xor    ecx,ecx
c0015e67:	eb 76                	jmp    c0015edf <Reg::findLineFromLoadedData(char*, char*, char*)+0x14b>
c0015e69:	80 fb 40             	cmp    bl,0x40
c0015e6c:	74 06                	je     c0015e74 <Reg::findLineFromLoadedData(char*, char*, char*)+0xe0>
c0015e6e:	8d 6c 24 58          	lea    ebp,[esp+0x58]
c0015e72:	eb 19                	jmp    c0015e8d <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015e74:	51                   	push   ecx
c0015e75:	51                   	push   ecx
c0015e76:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015e7a:	8d 44 24 24          	lea    eax,[esp+0x24]
c0015e7e:	50                   	push   eax
c0015e7f:	e8 2d a9 fe ff       	call   c00007b1 <strcmp>
c0015e84:	83 c4 10             	add    esp,0x10
c0015e87:	85 c0                	test   eax,eax
c0015e89:	75 da                	jne    c0015e65 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015e8b:	eb e1                	jmp    c0015e6e <Reg::findLineFromLoadedData(char*, char*, char*)+0xda>
c0015e8d:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0015e90:	84 c0                	test   al,al
c0015e92:	0f 94 c1             	sete   cl
c0015e95:	3c 3d                	cmp    al,0x3d
c0015e97:	0f 94 c2             	sete   dl
c0015e9a:	08 d1                	or     cl,dl
c0015e9c:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0015ea0:	75 03                	jne    c0015ea5 <Reg::findLineFromLoadedData(char*, char*, char*)+0x111>
c0015ea2:	45                   	inc    ebp
c0015ea3:	eb e8                	jmp    c0015e8d <Reg::findLineFromLoadedData(char*, char*, char*)+0xf9>
c0015ea5:	84 c0                	test   al,al
c0015ea7:	74 3e                	je     c0015ee7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x153>
c0015ea9:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0015ead:	52                   	push   edx
c0015eae:	52                   	push   edx
c0015eaf:	8d 44 24 60          	lea    eax,[esp+0x60]
c0015eb3:	50                   	push   eax
c0015eb4:	56                   	push   esi
c0015eb5:	e8 f7 a8 fe ff       	call   c00007b1 <strcmp>
c0015eba:	83 c4 10             	add    esp,0x10
c0015ebd:	85 c0                	test   eax,eax
c0015ebf:	75 a4                	jne    c0015e65 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd1>
c0015ec1:	50                   	push   eax
c0015ec2:	8d 55 01             	lea    edx,[ebp+0x1]
c0015ec5:	50                   	push   eax
c0015ec6:	52                   	push   edx
c0015ec7:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0015ece:	e8 8d a8 fe ff       	call   c0000760 <strcpy>
c0015ed3:	83 c4 10             	add    esp,0x10
c0015ed6:	eb 14                	jmp    c0015eec <Reg::findLineFromLoadedData(char*, char*, char*)+0x158>
c0015ed8:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015edb:	88 44 14 58          	mov    BYTE PTR [esp+edx*1+0x58],al
c0015edf:	47                   	inc    edi
c0015ee0:	89 ca                	mov    edx,ecx
c0015ee2:	e9 00 ff ff ff       	jmp    c0015de7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x53>
c0015ee7:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0015eec:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0015ef0:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015ef6:	5b                   	pop    ebx
c0015ef7:	5e                   	pop    esi
c0015ef8:	5f                   	pop    edi
c0015ef9:	5d                   	pop    ebp
c0015efa:	c3                   	ret    

c0015efb <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0015efb:	57                   	push   edi
c0015efc:	56                   	push   esi
c0015efd:	53                   	push   ebx
c0015efe:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0015f04:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0015f0b:	8b b4 24 2c 01 00 00 	mov    esi,DWORD PTR [esp+0x12c]
c0015f12:	53                   	push   ebx
c0015f13:	e8 c6 a7 fe ff       	call   c00006de <strlen>
c0015f18:	89 34 24             	mov    DWORD PTR [esp],esi
c0015f1b:	89 c7                	mov    edi,eax
c0015f1d:	e8 bc a7 fe ff       	call   c00006de <strlen>
c0015f22:	83 c4 10             	add    esp,0x10
c0015f25:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0015f29:	31 ff                	xor    edi,edi
c0015f2b:	3d ff 00 00 00       	cmp    eax,0xff
c0015f30:	0f 87 18 01 00 00    	ja     c001604e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0015f36:	51                   	push   ecx
c0015f37:	51                   	push   ecx
c0015f38:	56                   	push   esi
c0015f39:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c0015f3d:	56                   	push   esi
c0015f3e:	e8 1d a8 fe ff       	call   c0000760 <strcpy>
c0015f43:	58                   	pop    eax
c0015f44:	5a                   	pop    edx
c0015f45:	68 54 2e 02 c0       	push   0xc0022e54
c0015f4a:	56                   	push   esi
c0015f4b:	e8 c7 a8 fe ff       	call   c0000817 <strcat>
c0015f50:	59                   	pop    ecx
c0015f51:	58                   	pop    eax
c0015f52:	53                   	push   ebx
c0015f53:	56                   	push   esi
c0015f54:	e8 be a8 fe ff       	call   c0000817 <strcat>
c0015f59:	58                   	pop    eax
c0015f5a:	5a                   	pop    edx
c0015f5b:	68 42 2a 02 c0       	push   0xc0022a42
c0015f60:	56                   	push   esi
c0015f61:	e8 b1 a8 fe ff       	call   c0000817 <strcat>
c0015f66:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015f6d:	e8 6a 91 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0015f72:	83 c4 0c             	add    esp,0xc
c0015f75:	89 c3                	mov    ebx,eax
c0015f77:	ff 35 f4 5b 02 c0    	push   DWORD PTR ds:0xc0025bf4
c0015f7d:	56                   	push   esi
c0015f7e:	50                   	push   eax
c0015f7f:	e8 c4 97 ff ff       	call   c000f748 <File::File(char const*, Process*)>
c0015f84:	59                   	pop    ecx
c0015f85:	5e                   	pop    esi
c0015f86:	6a 01                	push   0x1
c0015f88:	53                   	push   ebx
c0015f89:	e8 1e 98 ff ff       	call   c000f7ac <File::open(FileOpenMode)>
c0015f8e:	83 c4 10             	add    esp,0x10
c0015f91:	85 c0                	test   eax,eax
c0015f93:	74 08                	je     c0015f9d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa2>
c0015f95:	83 ec 0c             	sub    esp,0xc
c0015f98:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015f9a:	53                   	push   ebx
c0015f9b:	eb 2e                	jmp    c0015fcb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd0>
c0015f9d:	52                   	push   edx
c0015f9e:	8d 44 24 07          	lea    eax,[esp+0x7]
c0015fa2:	50                   	push   eax
c0015fa3:	8d 44 24 10          	lea    eax,[esp+0x10]
c0015fa7:	50                   	push   eax
c0015fa8:	53                   	push   ebx
c0015fa9:	e8 aa 9a ff ff       	call   c000fa58 <File::stat(unsigned long long*, bool*)>
c0015fae:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015fb2:	83 c4 10             	add    esp,0x10
c0015fb5:	89 c1                	mov    ecx,eax
c0015fb7:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c0015fbb:	75 13                	jne    c0015fd0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xd5>
c0015fbd:	83 ec 0c             	sub    esp,0xc
c0015fc0:	53                   	push   ebx
c0015fc1:	e8 44 98 ff ff       	call   c000f80a <File::close()>
c0015fc6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015fcb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015fce:	eb 7b                	jmp    c001604b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x150>
c0015fd0:	83 ec 0c             	sub    esp,0xc
c0015fd3:	50                   	push   eax
c0015fd4:	e8 06 60 ff ff       	call   c000bfdf <malloc>
c0015fd9:	89 c6                	mov    esi,eax
c0015fdb:	58                   	pop    eax
c0015fdc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015fde:	8d 54 24 10          	lea    edx,[esp+0x10]
c0015fe2:	52                   	push   edx
c0015fe3:	56                   	push   esi
c0015fe4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015fe8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015fec:	53                   	push   ebx
c0015fed:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015ff0:	83 c4 20             	add    esp,0x20
c0015ff3:	85 c0                	test   eax,eax
c0015ff5:	75 0a                	jne    c0016001 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c0015ff7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ffb:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0015fff:	74 18                	je     c0016019 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x11e>
c0016001:	83 ec 0c             	sub    esp,0xc
c0016004:	31 ff                	xor    edi,edi
c0016006:	53                   	push   ebx
c0016007:	e8 fe 97 ff ff       	call   c000f80a <File::close()>
c001600c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001600e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016011:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016014:	83 c4 10             	add    esp,0x10
c0016017:	eb 35                	jmp    c001604e <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x153>
c0016019:	83 ec 0c             	sub    esp,0xc
c001601c:	53                   	push   ebx
c001601d:	e8 e8 97 ff ff       	call   c000f80a <File::close()>
c0016022:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016024:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016027:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001602a:	83 c4 0c             	add    esp,0xc
c001602d:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c0016034:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
c001603b:	56                   	push   esi
c001603c:	e8 53 fd ff ff       	call   c0015d94 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0016041:	89 34 24             	mov    DWORD PTR [esp],esi
c0016044:	89 c7                	mov    edi,eax
c0016046:	e8 a4 5f ff ff       	call   c000bfef <free>
c001604b:	83 c4 10             	add    esp,0x10
c001604e:	81 c4 10 01 00 00    	add    esp,0x110
c0016054:	89 f8                	mov    eax,edi
c0016056:	5b                   	pop    ebx
c0016057:	5e                   	pop    esi
c0016058:	5f                   	pop    edi
c0016059:	c3                   	ret    

c001605a <Reg::getLine(char*, char*, char*)>:
c001605a:	57                   	push   edi
c001605b:	56                   	push   esi
c001605c:	53                   	push   ebx
c001605d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0016061:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016065:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0016069:	57                   	push   edi
c001606a:	56                   	push   esi
c001606b:	53                   	push   ebx
c001606c:	68 47 2a 02 c0       	push   0xc0022a47
c0016071:	e8 85 fe ff ff       	call   c0015efb <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0016076:	83 c4 10             	add    esp,0x10
c0016079:	84 c0                	test   al,al
c001607b:	75 10                	jne    c001608d <Reg::getLine(char*, char*, char*)+0x33>
c001607d:	57                   	push   edi
c001607e:	56                   	push   esi
c001607f:	53                   	push   ebx
c0016080:	68 6c 2a 02 c0       	push   0xc0022a6c
c0016085:	e8 71 fe ff ff       	call   c0015efb <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001608a:	83 c4 10             	add    esp,0x10
c001608d:	5b                   	pop    ebx
c001608e:	5e                   	pop    esi
c001608f:	5f                   	pop    edi
c0016090:	c3                   	ret    

c0016091 <Reg::readInt(char*, char*, int*)>:
c0016091:	55                   	push   ebp
c0016092:	57                   	push   edi
c0016093:	56                   	push   esi
c0016094:	53                   	push   ebx
c0016095:	81 ec f0 00 00 00    	sub    esp,0xf0
c001609b:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001609f:	57                   	push   edi
c00160a0:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00160a7:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00160ae:	e8 a7 ff ff ff       	call   c001605a <Reg::getLine(char*, char*, char*)>
c00160b3:	83 c4 10             	add    esp,0x10
c00160b6:	84 c0                	test   al,al
c00160b8:	0f 84 b2 00 00 00    	je     c0016170 <Reg::readInt(char*, char*, int*)+0xdf>
c00160be:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00160c2:	80 fa 2b             	cmp    dl,0x2b
c00160c5:	74 0c                	je     c00160d3 <Reg::readInt(char*, char*, int*)+0x42>
c00160c7:	80 fa 2d             	cmp    dl,0x2d
c00160ca:	75 0e                	jne    c00160da <Reg::readInt(char*, char*, int*)+0x49>
c00160cc:	ba 01 00 00 00       	mov    edx,0x1
c00160d1:	eb 0b                	jmp    c00160de <Reg::readInt(char*, char*, int*)+0x4d>
c00160d3:	ba 01 00 00 00       	mov    edx,0x1
c00160d8:	eb 02                	jmp    c00160dc <Reg::readInt(char*, char*, int*)+0x4b>
c00160da:	31 d2                	xor    edx,edx
c00160dc:	31 c0                	xor    eax,eax
c00160de:	be 0a 00 00 00       	mov    esi,0xa
c00160e3:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00160e8:	75 20                	jne    c001610a <Reg::readInt(char*, char*, int*)+0x79>
c00160ea:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00160ee:	80 f9 78             	cmp    cl,0x78
c00160f1:	75 0a                	jne    c00160fd <Reg::readInt(char*, char*, int*)+0x6c>
c00160f3:	83 c2 02             	add    edx,0x2
c00160f6:	be 10 00 00 00       	mov    esi,0x10
c00160fb:	eb 0d                	jmp    c001610a <Reg::readInt(char*, char*, int*)+0x79>
c00160fd:	80 f9 62             	cmp    cl,0x62
c0016100:	75 08                	jne    c001610a <Reg::readInt(char*, char*, int*)+0x79>
c0016102:	83 c2 02             	add    edx,0x2
c0016105:	be 02 00 00 00       	mov    esi,0x2
c001610a:	01 d7                	add    edi,edx
c001610c:	31 d2                	xor    edx,edx
c001610e:	8a 1f                	mov    bl,BYTE PTR [edi]
c0016110:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0016114:	84 db                	test   bl,bl
c0016116:	0f 94 c3             	sete   bl
c0016119:	80 7c 24 0f 0d       	cmp    BYTE PTR [esp+0xf],0xd
c001611e:	0f 94 c1             	sete   cl
c0016121:	08 cb                	or     bl,cl
c0016123:	75 3a                	jne    c001615f <Reg::readInt(char*, char*, int*)+0xce>
c0016125:	0f af d6             	imul   edx,esi
c0016128:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001612d:	83 fe 10             	cmp    esi,0x10
c0016130:	75 26                	jne    c0016158 <Reg::readInt(char*, char*, int*)+0xc7>
c0016132:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0016136:	8d 69 bf             	lea    ebp,[ecx-0x41]
c0016139:	89 e9                	mov    ecx,ebp
c001613b:	80 f9 05             	cmp    cl,0x5
c001613e:	77 06                	ja     c0016146 <Reg::readInt(char*, char*, int*)+0xb5>
c0016140:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0016144:	eb 16                	jmp    c001615c <Reg::readInt(char*, char*, int*)+0xcb>
c0016146:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001614a:	83 e9 61             	sub    ecx,0x61
c001614d:	80 f9 05             	cmp    cl,0x5
c0016150:	77 06                	ja     c0016158 <Reg::readInt(char*, char*, int*)+0xc7>
c0016152:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0016156:	eb 04                	jmp    c001615c <Reg::readInt(char*, char*, int*)+0xcb>
c0016158:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001615c:	47                   	inc    edi
c001615d:	eb af                	jmp    c001610e <Reg::readInt(char*, char*, int*)+0x7d>
c001615f:	84 c0                	test   al,al
c0016161:	74 02                	je     c0016165 <Reg::readInt(char*, char*, int*)+0xd4>
c0016163:	f7 da                	neg    edx
c0016165:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001616c:	89 10                	mov    DWORD PTR [eax],edx
c001616e:	88 d8                	mov    al,bl
c0016170:	81 c4 ec 00 00 00    	add    esp,0xec
c0016176:	5b                   	pop    ebx
c0016177:	5e                   	pop    esi
c0016178:	5f                   	pop    edi
c0016179:	5d                   	pop    ebp
c001617a:	c3                   	ret    

c001617b <Reg::readString(char*, char*, char*, int)>:
c001617b:	57                   	push   edi
c001617c:	56                   	push   esi
c001617d:	53                   	push   ebx
c001617e:	81 ec d4 00 00 00    	sub    esp,0xd4
c0016184:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0016188:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001618f:	57                   	push   edi
c0016190:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0016197:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001619e:	e8 b7 fe ff ff       	call   c001605a <Reg::getLine(char*, char*, char*)>
c00161a3:	83 c4 10             	add    esp,0x10
c00161a6:	89 c6                	mov    esi,eax
c00161a8:	84 c0                	test   al,al
c00161aa:	74 44                	je     c00161f0 <Reg::readString(char*, char*, char*, int)+0x75>
c00161ac:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00161b3:	31 c0                	xor    eax,eax
c00161b5:	4a                   	dec    edx
c00161b6:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00161b9:	84 c9                	test   cl,cl
c00161bb:	74 0f                	je     c00161cc <Reg::readString(char*, char*, char*, int)+0x51>
c00161bd:	39 c2                	cmp    edx,eax
c00161bf:	7e 0b                	jle    c00161cc <Reg::readString(char*, char*, char*, int)+0x51>
c00161c1:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00161c4:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00161c9:	40                   	inc    eax
c00161ca:	eb ea                	jmp    c00161b6 <Reg::readString(char*, char*, char*, int)+0x3b>
c00161cc:	83 ec 0c             	sub    esp,0xc
c00161cf:	53                   	push   ebx
c00161d0:	e8 09 a5 fe ff       	call   c00006de <strlen>
c00161d5:	83 c4 10             	add    esp,0x10
c00161d8:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00161dd:	75 11                	jne    c00161f0 <Reg::readString(char*, char*, char*, int)+0x75>
c00161df:	83 ec 0c             	sub    esp,0xc
c00161e2:	53                   	push   ebx
c00161e3:	e8 f6 a4 fe ff       	call   c00006de <strlen>
c00161e8:	83 c4 10             	add    esp,0x10
c00161eb:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00161f0:	81 c4 d0 00 00 00    	add    esp,0xd0
c00161f6:	89 f0                	mov    eax,esi
c00161f8:	5b                   	pop    ebx
c00161f9:	5e                   	pop    esi
c00161fa:	5f                   	pop    edi
c00161fb:	c3                   	ret    

c00161fc <Reg::readBool(char*, char*, bool*)>:
c00161fc:	83 ec 20             	sub    esp,0x20
c00161ff:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016203:	50                   	push   eax
c0016204:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016208:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001620c:	e8 80 fe ff ff       	call   c0016091 <Reg::readInt(char*, char*, int*)>
c0016211:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016215:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001621a:	0f 95 02             	setne  BYTE PTR [edx]
c001621d:	83 c4 2c             	add    esp,0x2c
c0016220:	c3                   	ret    

c0016221 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0016221:	53                   	push   ebx
c0016222:	83 ec 1c             	sub    esp,0x1c
c0016225:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016229:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001622d:	50                   	push   eax
c001622e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016232:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016236:	e8 c1 ff ff ff       	call   c00161fc <Reg::readBool(char*, char*, bool*)>
c001623b:	83 c4 10             	add    esp,0x10
c001623e:	84 c0                	test   al,al
c0016240:	74 04                	je     c0016246 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0016242:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0016246:	83 c4 18             	add    esp,0x18
c0016249:	88 d8                	mov    al,bl
c001624b:	5b                   	pop    ebx
c001624c:	c3                   	ret    

c001624d <Reg::readIntWithDefault(char*, char*, int)>:
c001624d:	53                   	push   ebx
c001624e:	83 ec 1c             	sub    esp,0x1c
c0016251:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016255:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016259:	50                   	push   eax
c001625a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001625e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016262:	e8 2a fe ff ff       	call   c0016091 <Reg::readInt(char*, char*, int*)>
c0016267:	83 c4 10             	add    esp,0x10
c001626a:	84 c0                	test   al,al
c001626c:	74 04                	je     c0016272 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001626e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0016272:	83 c4 18             	add    esp,0x18
c0016275:	89 d8                	mov    eax,ebx
c0016277:	5b                   	pop    ebx
c0016278:	c3                   	ret    

c0016279 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c0016279:	56                   	push   esi
c001627a:	53                   	push   ebx
c001627b:	51                   	push   ecx
c001627c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0016280:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016288:	56                   	push   esi
c0016289:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001628d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016291:	e8 e5 fe ff ff       	call   c001617b <Reg::readString(char*, char*, char*, int)>
c0016296:	83 c4 10             	add    esp,0x10
c0016299:	84 c0                	test   al,al
c001629b:	74 02                	je     c001629f <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x26>
c001629d:	89 f3                	mov    ebx,esi
c001629f:	5a                   	pop    edx
c00162a0:	89 d8                	mov    eax,ebx
c00162a2:	5b                   	pop    ebx
c00162a3:	5e                   	pop    esi
c00162a4:	c3                   	ret    

c00162a5 <Sys::exit(regs*)>:
c00162a5:	83 ec 18             	sub    esp,0x18
c00162a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00162ac:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00162af:	e8 c2 31 00 00       	call   c0019476 <terminateTask(int)>
c00162b4:	83 c8 ff             	or     eax,0xffffffff
c00162b7:	89 c2                	mov    edx,eax
c00162b9:	83 c4 1c             	add    esp,0x1c
c00162bc:	c3                   	ret    

c00162bd <Sys::loadDLL(regs*)>:
c00162bd:	56                   	push   esi
c00162be:	31 d2                	xor    edx,edx
c00162c0:	53                   	push   ebx
c00162c1:	b8 01 00 00 00       	mov    eax,0x1
c00162c6:	51                   	push   ecx
c00162c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00162cb:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00162cf:	74 7d                	je     c001634e <Sys::loadDLL(regs*)+0x91>
c00162d1:	83 ec 0c             	sub    esp,0xc
c00162d4:	68 14 01 00 00       	push   0x114
c00162d9:	e8 fe 8d ff ff       	call   c000f0dc <operator new(unsigned long)>
c00162de:	89 c3                	mov    ebx,eax
c00162e0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162e5:	83 c4 0c             	add    esp,0xc
c00162e8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c00162eb:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00162ee:	53                   	push   ebx
c00162ef:	e8 54 94 ff ff       	call   c000f748 <File::File(char const*, Process*)>
c00162f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00162f7:	e8 1e 97 ff ff       	call   c000fa1a <File::exists()>
c00162fc:	83 c4 10             	add    esp,0x10
c00162ff:	84 c0                	test   al,al
c0016301:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016303:	75 11                	jne    c0016316 <Sys::loadDLL(regs*)+0x59>
c0016305:	83 ec 0c             	sub    esp,0xc
c0016308:	53                   	push   ebx
c0016309:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001630c:	83 c4 10             	add    esp,0x10
c001630f:	b8 03 00 00 00       	mov    eax,0x3
c0016314:	eb 36                	jmp    c001634c <Sys::loadDLL(regs*)+0x8f>
c0016316:	83 ec 0c             	sub    esp,0xc
c0016319:	53                   	push   ebx
c001631a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001631d:	58                   	pop    eax
c001631e:	5a                   	pop    edx
c001631f:	6a 00                	push   0x0
c0016321:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0016324:	e8 3a 21 00 00       	call   c0018463 <Thr::loadDLL(char const*, bool)>
c0016329:	83 c4 10             	add    esp,0x10
c001632c:	89 c1                	mov    ecx,eax
c001632e:	31 d2                	xor    edx,edx
c0016330:	b8 04 00 00 00       	mov    eax,0x4
c0016335:	85 c9                	test   ecx,ecx
c0016337:	74 15                	je     c001634e <Sys::loadDLL(regs*)+0x91>
c0016339:	53                   	push   ebx
c001633a:	53                   	push   ebx
c001633b:	ff 35 a8 47 02 c0    	push   DWORD PTR ds:0xc00247a8
c0016341:	51                   	push   ecx
c0016342:	e8 e2 22 00 00       	call   c0018629 <Thr::executeDLL(unsigned long, void*)>
c0016347:	83 c4 10             	add    esp,0x10
c001634a:	31 c0                	xor    eax,eax
c001634c:	31 d2                	xor    edx,edx
c001634e:	59                   	pop    ecx
c001634f:	5b                   	pop    ebx
c0016350:	5e                   	pop    esi
c0016351:	c3                   	ret    

c0016352 <Sys::read(regs*)>:
c0016352:	57                   	push   edi
c0016353:	56                   	push   esi
c0016354:	53                   	push   ebx
c0016355:	83 ec 10             	sub    esp,0x10
c0016358:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001635c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001635f:	83 f8 02             	cmp    eax,0x2
c0016362:	77 10                	ja     c0016374 <Sys::read(regs*)+0x22>
c0016364:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016369:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001636c:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016372:	eb 0e                	jmp    c0016382 <Sys::read(regs*)+0x30>
c0016374:	83 ec 0c             	sub    esp,0xc
c0016377:	50                   	push   eax
c0016378:	e8 f0 7c ff ff       	call   c000e06d <getFromFileDescriptor(int)>
c001637d:	83 c4 10             	add    esp,0x10
c0016380:	89 c1                	mov    ecx,eax
c0016382:	83 c8 ff             	or     eax,0xffffffff
c0016385:	85 c9                	test   ecx,ecx
c0016387:	89 c2                	mov    edx,eax
c0016389:	74 28                	je     c00163b3 <Sys::read(regs*)+0x61>
c001638b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016393:	83 ec 0c             	sub    esp,0xc
c0016396:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016398:	31 ff                	xor    edi,edi
c001639a:	8d 54 24 18          	lea    edx,[esp+0x18]
c001639e:	52                   	push   edx
c001639f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00163a2:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00163a5:	57                   	push   edi
c00163a6:	56                   	push   esi
c00163a7:	51                   	push   ecx
c00163a8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00163ab:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00163af:	83 c4 20             	add    esp,0x20
c00163b2:	99                   	cdq    
c00163b3:	83 c4 10             	add    esp,0x10
c00163b6:	5b                   	pop    ebx
c00163b7:	5e                   	pop    esi
c00163b8:	5f                   	pop    edi
c00163b9:	c3                   	ret    

c00163ba <Sys::sbrk(regs*)>:
c00163ba:	56                   	push   esi
c00163bb:	53                   	push   ebx
c00163bc:	50                   	push   eax
c00163bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00163c6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00163c9:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00163cc:	85 db                	test   ebx,ebx
c00163ce:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c00163d4:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00163d7:	74 02                	je     c00163db <Sys::sbrk(regs*)+0x21>
c00163d9:	79 06                	jns    c00163e1 <Sys::sbrk(regs*)+0x27>
c00163db:	89 f0                	mov    eax,esi
c00163dd:	31 d2                	xor    edx,edx
c00163df:	eb 2a                	jmp    c001640b <Sys::sbrk(regs*)+0x51>
c00163e1:	83 c8 ff             	or     eax,0xffffffff
c00163e4:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00163ea:	89 c2                	mov    edx,eax
c00163ec:	77 1d                	ja     c001640b <Sys::sbrk(regs*)+0x51>
c00163ee:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00163f4:	50                   	push   eax
c00163f5:	c1 ea 0c             	shr    edx,0xc
c00163f8:	68 07 04 00 00       	push   0x407
c00163fd:	52                   	push   edx
c00163fe:	51                   	push   ecx
c00163ff:	e8 c0 85 ff ff       	call   c000e9c4 <VAS::allocatePages(int, int)>
c0016404:	89 f0                	mov    eax,esi
c0016406:	31 d2                	xor    edx,edx
c0016408:	83 c4 10             	add    esp,0x10
c001640b:	59                   	pop    ecx
c001640c:	5b                   	pop    ebx
c001640d:	5e                   	pop    esi
c001640e:	c3                   	ret    

c001640f <Sys::write(regs*)>:
c001640f:	57                   	push   edi
c0016410:	56                   	push   esi
c0016411:	53                   	push   ebx
c0016412:	83 ec 18             	sub    esp,0x18
c0016415:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016419:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001641c:	68 87 2a 02 c0       	push   0xc0022a87
c0016421:	e8 eb 8d ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0016426:	83 c4 10             	add    esp,0x10
c0016429:	83 7b 20 02          	cmp    DWORD PTR [ebx+0x20],0x2
c001642d:	77 10                	ja     c001643f <Sys::write(regs*)+0x30>
c001642f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016434:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016437:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001643d:	eb 1b                	jmp    c001645a <Sys::write(regs*)+0x4b>
c001643f:	83 ec 0c             	sub    esp,0xc
c0016442:	68 a6 2a 02 c0       	push   0xc0022aa6
c0016447:	e8 c5 8d ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001644c:	58                   	pop    eax
c001644d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016450:	e8 18 7c ff ff       	call   c000e06d <getFromFileDescriptor(int)>
c0016455:	83 c4 10             	add    esp,0x10
c0016458:	89 c1                	mov    ecx,eax
c001645a:	83 c8 ff             	or     eax,0xffffffff
c001645d:	85 c9                	test   ecx,ecx
c001645f:	89 c2                	mov    edx,eax
c0016461:	74 28                	je     c001648b <Sys::write(regs*)+0x7c>
c0016463:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001646b:	83 ec 0c             	sub    esp,0xc
c001646e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0016470:	31 ff                	xor    edi,edi
c0016472:	8d 54 24 18          	lea    edx,[esp+0x18]
c0016476:	52                   	push   edx
c0016477:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001647a:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001647d:	57                   	push   edi
c001647e:	56                   	push   esi
c001647f:	51                   	push   ecx
c0016480:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016483:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0016487:	83 c4 20             	add    esp,0x20
c001648a:	99                   	cdq    
c001648b:	83 c4 10             	add    esp,0x10
c001648e:	5b                   	pop    ebx
c001648f:	5e                   	pop    esi
c0016490:	5f                   	pop    edi
c0016491:	c3                   	ret    

c0016492 <Sys::yield(regs*)>:
c0016492:	83 ec 0c             	sub    esp,0xc
c0016495:	e8 af 25 00 00       	call   c0018a49 <lockScheduler()>
c001649a:	e8 f3 28 00 00       	call   c0018d92 <schedule()>
c001649f:	e8 a7 25 00 00       	call   c0018a4b <unlockScheduler()>
c00164a4:	31 c0                	xor    eax,eax
c00164a6:	31 d2                	xor    edx,edx
c00164a8:	83 c4 0c             	add    esp,0xc
c00164ab:	c3                   	ret    

c00164ac <sysCallGetPID(regs*)>:
c00164ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00164b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00164b6:	89 c2                	mov    edx,eax
c00164b8:	c1 fa 1f             	sar    edx,0x1f
c00164bb:	c3                   	ret    

c00164bc <sysCallSeekDir(regs*)>:
c00164bc:	31 c0                	xor    eax,eax
c00164be:	31 d2                	xor    edx,edx
c00164c0:	c3                   	ret    

c00164c1 <sysCallTellDir(regs*)>:
c00164c1:	31 c0                	xor    eax,eax
c00164c3:	31 d2                	xor    edx,edx
c00164c5:	c3                   	ret    

c00164c6 <sysCallVerify(regs*)>:
c00164c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00164ca:	31 d2                	xor    edx,edx
c00164cc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00164cf:	c3                   	ret    

c00164d0 <sysCallFork(regs*)>:
c00164d0:	83 c8 ff             	or     eax,0xffffffff
c00164d3:	83 ca ff             	or     edx,0xffffffff
c00164d6:	c3                   	ret    

c00164d7 <sysCallExecve(regs*)>:
c00164d7:	83 c8 ff             	or     eax,0xffffffff
c00164da:	83 ca ff             	or     edx,0xffffffff
c00164dd:	c3                   	ret    

c00164de <sysCallGetArgc(regs*)>:
c00164de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00164e3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00164e6:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c00164ec:	89 c2                	mov    edx,eax
c00164ee:	c1 fa 1f             	sar    edx,0x1f
c00164f1:	c3                   	ret    

c00164f2 <sysFormatDisk(regs*)>:
c00164f2:	56                   	push   esi
c00164f3:	53                   	push   ebx
c00164f4:	50                   	push   eax
c00164f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00164f9:	8b 1d 08 49 02 c0    	mov    ebx,DWORD PTR ds:0xc0024908
c00164ff:	eb 2a                	jmp    c001652b <sysFormatDisk(regs*)+0x39>
c0016501:	83 ec 0c             	sub    esp,0xc
c0016504:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0016507:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001650a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001650c:	51                   	push   ecx
c001650d:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0016510:	51                   	push   ecx
c0016511:	50                   	push   eax
c0016512:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c0016519:	50                   	push   eax
c001651a:	53                   	push   ebx
c001651b:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001651e:	83 c4 20             	add    esp,0x20
c0016521:	89 c1                	mov    ecx,eax
c0016523:	83 f8 08             	cmp    eax,0x8
c0016526:	75 12                	jne    c001653a <sysFormatDisk(regs*)+0x48>
c0016528:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001652b:	85 db                	test   ebx,ebx
c001652d:	75 d2                	jne    c0016501 <sysFormatDisk(regs*)+0xf>
c001652f:	b8 03 00 00 00       	mov    eax,0x3
c0016534:	31 d2                	xor    edx,edx
c0016536:	59                   	pop    ecx
c0016537:	5b                   	pop    ebx
c0016538:	5e                   	pop    esi
c0016539:	c3                   	ret    
c001653a:	85 c0                	test   eax,eax
c001653c:	74 13                	je     c0016551 <sysFormatDisk(regs*)+0x5f>
c001653e:	31 d2                	xor    edx,edx
c0016540:	b8 01 00 00 00       	mov    eax,0x1
c0016545:	83 f9 09             	cmp    ecx,0x9
c0016548:	74 ec                	je     c0016536 <sysFormatDisk(regs*)+0x44>
c001654a:	b8 02 00 00 00       	mov    eax,0x2
c001654f:	eb e3                	jmp    c0016534 <sysFormatDisk(regs*)+0x42>
c0016551:	31 c0                	xor    eax,eax
c0016553:	eb df                	jmp    c0016534 <sysFormatDisk(regs*)+0x42>

c0016555 <sysSetDiskVolumeLabel(regs*)>:
c0016555:	56                   	push   esi
c0016556:	53                   	push   ebx
c0016557:	53                   	push   ebx
c0016558:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001655c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001655f:	83 f8 19             	cmp    eax,0x19
c0016562:	77 2d                	ja     c0016591 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016564:	8b 0c 85 a0 4d 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdb260]
c001656b:	85 c9                	test   ecx,ecx
c001656d:	74 22                	je     c0016591 <sysSetDiskVolumeLabel(regs*)+0x3c>
c001656f:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0016572:	85 d2                	test   edx,edx
c0016574:	74 1b                	je     c0016591 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0016576:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001657c:	8b 33                	mov    esi,DWORD PTR [ebx]
c001657e:	52                   	push   edx
c001657f:	50                   	push   eax
c0016580:	51                   	push   ecx
c0016581:	53                   	push   ebx
c0016582:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0016585:	83 c4 10             	add    esp,0x10
c0016588:	89 c2                	mov    edx,eax
c001658a:	c1 fa 1f             	sar    edx,0x1f
c001658d:	59                   	pop    ecx
c001658e:	5b                   	pop    ebx
c001658f:	5e                   	pop    esi
c0016590:	c3                   	ret    
c0016591:	59                   	pop    ecx
c0016592:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016597:	5b                   	pop    ebx
c0016598:	83 ca ff             	or     edx,0xffffffff
c001659b:	5e                   	pop    esi
c001659c:	c3                   	ret    

c001659d <sysGetDiskVolumeLabel(regs*)>:
c001659d:	57                   	push   edi
c001659e:	56                   	push   esi
c001659f:	53                   	push   ebx
c00165a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165a4:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00165a7:	83 fa 19             	cmp    edx,0x19
c00165aa:	77 38                	ja     c00165e4 <sysGetDiskVolumeLabel(regs*)+0x47>
c00165ac:	8b 0c 95 a0 4d 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdb260]
c00165b3:	85 c9                	test   ecx,ecx
c00165b5:	74 2d                	je     c00165e4 <sysGetDiskVolumeLabel(regs*)+0x47>
c00165b7:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00165ba:	85 db                	test   ebx,ebx
c00165bc:	74 26                	je     c00165e4 <sysGetDiskVolumeLabel(regs*)+0x47>
c00165be:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00165c1:	85 c0                	test   eax,eax
c00165c3:	74 1f                	je     c00165e4 <sysGetDiskVolumeLabel(regs*)+0x47>
c00165c5:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c00165cb:	83 ec 0c             	sub    esp,0xc
c00165ce:	8b 3e                	mov    edi,DWORD PTR [esi]
c00165d0:	50                   	push   eax
c00165d1:	53                   	push   ebx
c00165d2:	52                   	push   edx
c00165d3:	51                   	push   ecx
c00165d4:	56                   	push   esi
c00165d5:	ff 57 54             	call   DWORD PTR [edi+0x54]
c00165d8:	83 c4 20             	add    esp,0x20
c00165db:	89 c2                	mov    edx,eax
c00165dd:	c1 fa 1f             	sar    edx,0x1f
c00165e0:	5b                   	pop    ebx
c00165e1:	5e                   	pop    esi
c00165e2:	5f                   	pop    edi
c00165e3:	c3                   	ret    
c00165e4:	5b                   	pop    ebx
c00165e5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00165ea:	5e                   	pop    esi
c00165eb:	83 ca ff             	or     edx,0xffffffff
c00165ee:	5f                   	pop    edi
c00165ef:	c3                   	ret    

c00165f0 <sysShutdown(regs*)>:
c00165f0:	57                   	push   edi
c00165f1:	56                   	push   esi
c00165f2:	56                   	push   esi
c00165f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00165f7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00165fa:	85 c0                	test   eax,eax
c00165fc:	74 18                	je     c0016616 <sysShutdown(regs*)+0x26>
c00165fe:	83 f8 01             	cmp    eax,0x1
c0016601:	74 51                	je     c0016654 <sysShutdown(regs*)+0x64>
c0016603:	83 ce ff             	or     esi,0xffffffff
c0016606:	83 cf ff             	or     edi,0xffffffff
c0016609:	83 f8 02             	cmp    eax,0x2
c001660c:	74 2a                	je     c0016638 <sysShutdown(regs*)+0x48>
c001660e:	59                   	pop    ecx
c001660f:	89 f0                	mov    eax,esi
c0016611:	5e                   	pop    esi
c0016612:	89 fa                	mov    edx,edi
c0016614:	5f                   	pop    edi
c0016615:	c3                   	ret    
c0016616:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001661b:	83 ce ff             	or     esi,0xffffffff
c001661e:	83 cf ff             	or     edi,0xffffffff
c0016621:	8b 10                	mov    edx,DWORD PTR [eax]
c0016623:	6a 00                	push   0x0
c0016625:	6a 00                	push   0x0
c0016627:	6a 00                	push   0x0
c0016629:	50                   	push   eax
c001662a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001662d:	83 c4 10             	add    esp,0x10
c0016630:	89 f0                	mov    eax,esi
c0016632:	89 fa                	mov    edx,edi
c0016634:	59                   	pop    ecx
c0016635:	5e                   	pop    esi
c0016636:	5f                   	pop    edi
c0016637:	c3                   	ret    
c0016638:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001663d:	8b 10                	mov    edx,DWORD PTR [eax]
c001663f:	6a 00                	push   0x0
c0016641:	6a 00                	push   0x0
c0016643:	6a 01                	push   0x1
c0016645:	50                   	push   eax
c0016646:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016649:	83 c4 10             	add    esp,0x10
c001664c:	89 f0                	mov    eax,esi
c001664e:	89 fa                	mov    edx,edi
c0016650:	59                   	pop    ecx
c0016651:	5e                   	pop    esi
c0016652:	5f                   	pop    edi
c0016653:	c3                   	ret    
c0016654:	a1 20 4e 02 c0       	mov    eax,ds:0xc0024e20
c0016659:	85 c0                	test   eax,eax
c001665b:	74 02                	je     c001665f <sysShutdown(regs*)+0x6f>
c001665d:	ff d0                	call   eax
c001665f:	31 f6                	xor    esi,esi
c0016661:	59                   	pop    ecx
c0016662:	31 ff                	xor    edi,edi
c0016664:	89 f0                	mov    eax,esi
c0016666:	5e                   	pop    esi
c0016667:	89 fa                	mov    edx,edi
c0016669:	5f                   	pop    edi
c001666a:	c3                   	ret    

c001666b <sysCallGetCwd(regs*)>:
c001666b:	83 ec 10             	sub    esp,0x10
c001666e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016672:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016675:	52                   	push   edx
c0016676:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016679:	51                   	push   ecx
c001667a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001667f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016682:	50                   	push   eax
c0016683:	e8 31 94 ff ff       	call   c000fab9 <getcwd(Process*, char*, int)>
c0016688:	89 c2                	mov    edx,eax
c001668a:	83 c4 1c             	add    esp,0x1c
c001668d:	c1 fa 1f             	sar    edx,0x1f
c0016690:	c3                   	ret    

c0016691 <sysCallSetCwd(regs*)>:
c0016691:	83 ec 14             	sub    esp,0x14
c0016694:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016698:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001669b:	50                   	push   eax
c001669c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166a1:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c00166a4:	52                   	push   edx
c00166a5:	e8 39 94 ff ff       	call   c000fae3 <setcwd(Process*, char*)>
c00166aa:	89 c2                	mov    edx,eax
c00166ac:	83 c4 1c             	add    esp,0x1c
c00166af:	c1 fa 1f             	sar    edx,0x1f
c00166b2:	c3                   	ret    

c00166b3 <sysCallRealpath(regs*)>:
c00166b3:	53                   	push   ebx
c00166b4:	83 ec 08             	sub    esp,0x8
c00166b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00166bb:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c00166be:	85 c9                	test   ecx,ecx
c00166c0:	74 35                	je     c00166f7 <sysCallRealpath(regs*)+0x44>
c00166c2:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c00166c5:	31 d2                	xor    edx,edx
c00166c7:	b8 01 00 00 00       	mov    eax,0x1
c00166cc:	85 db                	test   ebx,ebx
c00166ce:	75 05                	jne    c00166d5 <sysCallRealpath(regs*)+0x22>
c00166d0:	83 c4 08             	add    esp,0x8
c00166d3:	5b                   	pop    ebx
c00166d4:	c3                   	ret    
c00166d5:	50                   	push   eax
c00166d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00166db:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00166de:	05 0c 01 00 00       	add    eax,0x10c
c00166e3:	50                   	push   eax
c00166e4:	51                   	push   ecx
c00166e5:	53                   	push   ebx
c00166e6:	e8 b3 8e ff ff       	call   c000f59e <standardiseFiles(char*, char const*, char const*)>
c00166eb:	83 c4 10             	add    esp,0x10
c00166ee:	31 c0                	xor    eax,eax
c00166f0:	31 d2                	xor    edx,edx
c00166f2:	83 c4 08             	add    esp,0x8
c00166f5:	5b                   	pop    ebx
c00166f6:	c3                   	ret    
c00166f7:	b8 01 00 00 00       	mov    eax,0x1
c00166fc:	31 d2                	xor    edx,edx
c00166fe:	eb f2                	jmp    c00166f2 <sysCallRealpath(regs*)+0x3f>

c0016700 <sysCallReadDir(regs*)>:
c0016700:	53                   	push   ebx
c0016701:	83 ec 18             	sub    esp,0x18
c0016704:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016708:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001670b:	83 f8 02             	cmp    eax,0x2
c001670e:	76 56                	jbe    c0016766 <sysCallReadDir(regs*)+0x66>
c0016710:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016713:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c0016719:	77 57                	ja     c0016772 <sysCallReadDir(regs*)+0x72>
c001671b:	83 ec 0c             	sub    esp,0xc
c001671e:	50                   	push   eax
c001671f:	e8 49 79 ff ff       	call   c000e06d <getFromFileDescriptor(int)>
c0016724:	83 c4 10             	add    esp,0x10
c0016727:	85 c0                	test   eax,eax
c0016729:	74 57                	je     c0016782 <sysCallReadDir(regs*)+0x82>
c001672b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016733:	83 ec 0c             	sub    esp,0xc
c0016736:	8b 10                	mov    edx,DWORD PTR [eax]
c0016738:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001673c:	51                   	push   ecx
c001673d:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0016740:	51                   	push   ecx
c0016741:	6a 00                	push   0x0
c0016743:	68 10 01 00 00       	push   0x110
c0016748:	50                   	push   eax
c0016749:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001674c:	83 c4 20             	add    esp,0x20
c001674f:	89 c1                	mov    ecx,eax
c0016751:	85 c0                	test   eax,eax
c0016753:	74 38                	je     c001678d <sysCallReadDir(regs*)+0x8d>
c0016755:	31 d2                	xor    edx,edx
c0016757:	b8 02 00 00 00       	mov    eax,0x2
c001675c:	83 f9 07             	cmp    ecx,0x7
c001675f:	74 05                	je     c0016766 <sysCallReadDir(regs*)+0x66>
c0016761:	83 c4 18             	add    esp,0x18
c0016764:	5b                   	pop    ebx
c0016765:	c3                   	ret    
c0016766:	b8 01 00 00 00       	mov    eax,0x1
c001676b:	31 d2                	xor    edx,edx
c001676d:	83 c4 18             	add    esp,0x18
c0016770:	5b                   	pop    ebx
c0016771:	c3                   	ret    
c0016772:	53                   	push   ebx
c0016773:	53                   	push   ebx
c0016774:	52                   	push   edx
c0016775:	68 c8 2a 02 c0       	push   0xc0022ac8
c001677a:	e8 92 8a ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001677f:	83 c4 10             	add    esp,0x10
c0016782:	83 c4 18             	add    esp,0x18
c0016785:	83 c8 ff             	or     eax,0xffffffff
c0016788:	83 ca ff             	or     edx,0xffffffff
c001678b:	5b                   	pop    ebx
c001678c:	c3                   	ret    
c001678d:	31 c0                	xor    eax,eax
c001678f:	31 d2                	xor    edx,edx
c0016791:	eb da                	jmp    c001676d <sysCallReadDir(regs*)+0x6d>

c0016793 <sysCallIsATTY(regs*)>:
c0016793:	83 ec 0c             	sub    esp,0xc
c0016796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001679a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001679d:	83 f8 02             	cmp    eax,0x2
c00167a0:	76 07                	jbe    c00167a9 <sysCallIsATTY(regs*)+0x16>
c00167a2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00167a7:	75 28                	jne    c00167d1 <sysCallIsATTY(regs*)+0x3e>
c00167a9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167ae:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00167b1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00167b7:	85 c0                	test   eax,eax
c00167b9:	74 26                	je     c00167e1 <sysCallIsATTY(regs*)+0x4e>
c00167bb:	83 ec 0c             	sub    esp,0xc
c00167be:	8b 10                	mov    edx,DWORD PTR [eax]
c00167c0:	50                   	push   eax
c00167c1:	ff 12                	call   DWORD PTR [edx]
c00167c3:	83 c4 10             	add    esp,0x10
c00167c6:	25 ff 00 00 00       	and    eax,0xff
c00167cb:	31 d2                	xor    edx,edx
c00167cd:	83 c4 0c             	add    esp,0xc
c00167d0:	c3                   	ret    
c00167d1:	83 ec 0c             	sub    esp,0xc
c00167d4:	50                   	push   eax
c00167d5:	e8 93 78 ff ff       	call   c000e06d <getFromFileDescriptor(int)>
c00167da:	83 c4 10             	add    esp,0x10
c00167dd:	85 c0                	test   eax,eax
c00167df:	75 da                	jne    c00167bb <sysCallIsATTY(regs*)+0x28>
c00167e1:	83 c8 ff             	or     eax,0xffffffff
c00167e4:	83 ca ff             	or     edx,0xffffffff
c00167e7:	83 c4 0c             	add    esp,0xc
c00167ea:	c3                   	ret    

c00167eb <sysCallSeek(regs*)>:
c00167eb:	53                   	push   ebx
c00167ec:	83 ec 08             	sub    esp,0x8
c00167ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00167f3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00167f6:	83 f8 02             	cmp    eax,0x2
c00167f9:	76 4b                	jbe    c0016846 <sysCallSeek(regs*)+0x5b>
c00167fb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016800:	77 34                	ja     c0016836 <sysCallSeek(regs*)+0x4b>
c0016802:	83 ec 0c             	sub    esp,0xc
c0016805:	50                   	push   eax
c0016806:	e8 62 78 ff ff       	call   c000e06d <getFromFileDescriptor(int)>
c001680b:	83 c4 0c             	add    esp,0xc
c001680e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0016811:	31 db                	xor    ebx,ebx
c0016813:	53                   	push   ebx
c0016814:	51                   	push   ecx
c0016815:	50                   	push   eax
c0016816:	e8 4f 90 ff ff       	call   c000f86a <File::seek(unsigned long long)>
c001681b:	83 c4 10             	add    esp,0x10
c001681e:	85 c0                	test   eax,eax
c0016820:	0f 95 c0             	setne  al
c0016823:	25 ff 00 00 00       	and    eax,0xff
c0016828:	31 d2                	xor    edx,edx
c001682a:	f7 d8                	neg    eax
c001682c:	83 d2 00             	adc    edx,0x0
c001682f:	83 c4 08             	add    esp,0x8
c0016832:	f7 da                	neg    edx
c0016834:	5b                   	pop    ebx
c0016835:	c3                   	ret    
c0016836:	52                   	push   edx
c0016837:	52                   	push   edx
c0016838:	50                   	push   eax
c0016839:	68 84 2b 02 c0       	push   0xc0022b84
c001683e:	e8 ce 89 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0016843:	83 c4 10             	add    esp,0x10
c0016846:	83 c4 08             	add    esp,0x8
c0016849:	83 c8 ff             	or     eax,0xffffffff
c001684c:	83 ca ff             	or     edx,0xffffffff
c001684f:	5b                   	pop    ebx
c0016850:	c3                   	ret    

c0016851 <sysCallTell(regs*)>:
c0016851:	53                   	push   ebx
c0016852:	83 ec 08             	sub    esp,0x8
c0016855:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016859:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001685c:	83 f8 02             	cmp    eax,0x2
c001685f:	76 60                	jbe    c00168c1 <sysCallTell(regs*)+0x70>
c0016861:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016866:	77 30                	ja     c0016898 <sysCallTell(regs*)+0x47>
c0016868:	83 ec 0c             	sub    esp,0xc
c001686b:	50                   	push   eax
c001686c:	e8 fc 77 ff ff       	call   c000e06d <getFromFileDescriptor(int)>
c0016871:	5a                   	pop    edx
c0016872:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0016875:	59                   	pop    ecx
c0016876:	53                   	push   ebx
c0016877:	50                   	push   eax
c0016878:	e8 43 90 ff ff       	call   c000f8c0 <File::tell(unsigned long long*)>
c001687d:	83 c4 10             	add    esp,0x10
c0016880:	85 c0                	test   eax,eax
c0016882:	0f 95 c0             	setne  al
c0016885:	25 ff 00 00 00       	and    eax,0xff
c001688a:	31 d2                	xor    edx,edx
c001688c:	f7 d8                	neg    eax
c001688e:	83 d2 00             	adc    edx,0x0
c0016891:	83 c4 08             	add    esp,0x8
c0016894:	f7 da                	neg    edx
c0016896:	5b                   	pop    ebx
c0016897:	c3                   	ret    
c0016898:	52                   	push   edx
c0016899:	52                   	push   edx
c001689a:	50                   	push   eax
c001689b:	68 9e 2b 02 c0       	push   0xc0022b9e
c00168a0:	e8 6c 89 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c00168a5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00168a8:	83 c4 10             	add    esp,0x10
c00168ab:	31 d2                	xor    edx,edx
c00168ad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00168b3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00168ba:	83 c4 08             	add    esp,0x8
c00168bd:	31 c0                	xor    eax,eax
c00168bf:	5b                   	pop    ebx
c00168c0:	c3                   	ret    
c00168c1:	83 c4 08             	add    esp,0x8
c00168c4:	83 c8 ff             	or     eax,0xffffffff
c00168c7:	83 ca ff             	or     edx,0xffffffff
c00168ca:	5b                   	pop    ebx
c00168cb:	c3                   	ret    

c00168cc <sysCallSizeFromFilename(regs*)>:
c00168cc:	57                   	push   edi
c00168cd:	56                   	push   esi
c00168ce:	53                   	push   ebx
c00168cf:	83 ec 10             	sub    esp,0x10
c00168d2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00168d6:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c00168d9:	83 fb 02             	cmp    ebx,0x2
c00168dc:	0f 86 8b 00 00 00    	jbe    c001696d <sysCallSizeFromFilename(regs*)+0xa1>
c00168e2:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00168e8:	77 58                	ja     c0016942 <sysCallSizeFromFilename(regs*)+0x76>
c00168ea:	83 ec 0c             	sub    esp,0xc
c00168ed:	68 14 01 00 00       	push   0x114
c00168f2:	e8 e5 87 ff ff       	call   c000f0dc <operator new(unsigned long)>
c00168f7:	89 c7                	mov    edi,eax
c00168f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00168fe:	83 c4 0c             	add    esp,0xc
c0016901:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016904:	50                   	push   eax
c0016905:	53                   	push   ebx
c0016906:	57                   	push   edi
c0016907:	e8 3c 8e ff ff       	call   c000f748 <File::File(char const*, Process*)>
c001690c:	83 c4 0c             	add    esp,0xc
c001690f:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016913:	50                   	push   eax
c0016914:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0016917:	52                   	push   edx
c0016918:	57                   	push   edi
c0016919:	e8 3a 91 ff ff       	call   c000fa58 <File::stat(unsigned long long*, bool*)>
c001691e:	89 c3                	mov    ebx,eax
c0016920:	8b 07                	mov    eax,DWORD PTR [edi]
c0016922:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016925:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016928:	31 c0                	xor    eax,eax
c001692a:	83 c4 10             	add    esp,0x10
c001692d:	85 db                	test   ebx,ebx
c001692f:	0f 95 c0             	setne  al
c0016932:	31 d2                	xor    edx,edx
c0016934:	f7 d8                	neg    eax
c0016936:	83 d2 00             	adc    edx,0x0
c0016939:	83 c4 10             	add    esp,0x10
c001693c:	f7 da                	neg    edx
c001693e:	5b                   	pop    ebx
c001693f:	5e                   	pop    esi
c0016940:	5f                   	pop    edi
c0016941:	c3                   	ret    
c0016942:	51                   	push   ecx
c0016943:	51                   	push   ecx
c0016944:	53                   	push   ebx
c0016945:	68 b8 2b 02 c0       	push   0xc0022bb8
c001694a:	e8 c2 88 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001694f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016952:	83 c4 10             	add    esp,0x10
c0016955:	31 d2                	xor    edx,edx
c0016957:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001695d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0016964:	83 c4 10             	add    esp,0x10
c0016967:	31 c0                	xor    eax,eax
c0016969:	5b                   	pop    ebx
c001696a:	5e                   	pop    esi
c001696b:	5f                   	pop    edi
c001696c:	c3                   	ret    
c001696d:	83 c4 10             	add    esp,0x10
c0016970:	83 c8 ff             	or     eax,0xffffffff
c0016973:	83 ca ff             	or     edx,0xffffffff
c0016976:	5b                   	pop    ebx
c0016977:	5e                   	pop    esi
c0016978:	5f                   	pop    edi
c0016979:	c3                   	ret    

c001697a <sysCallSize(regs*)>:
c001697a:	53                   	push   ebx
c001697b:	83 ec 18             	sub    esp,0x18
c001697e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0016982:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016985:	83 f8 02             	cmp    eax,0x2
c0016988:	76 66                	jbe    c00169f0 <sysCallSize(regs*)+0x76>
c001698a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001698f:	77 36                	ja     c00169c7 <sysCallSize(regs*)+0x4d>
c0016991:	83 ec 0c             	sub    esp,0xc
c0016994:	50                   	push   eax
c0016995:	e8 d3 76 ff ff       	call   c000e06d <getFromFileDescriptor(int)>
c001699a:	83 c4 0c             	add    esp,0xc
c001699d:	8d 54 24 13          	lea    edx,[esp+0x13]
c00169a1:	52                   	push   edx
c00169a2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00169a5:	52                   	push   edx
c00169a6:	50                   	push   eax
c00169a7:	e8 ac 90 ff ff       	call   c000fa58 <File::stat(unsigned long long*, bool*)>
c00169ac:	83 c4 10             	add    esp,0x10
c00169af:	85 c0                	test   eax,eax
c00169b1:	0f 95 c0             	setne  al
c00169b4:	25 ff 00 00 00       	and    eax,0xff
c00169b9:	31 d2                	xor    edx,edx
c00169bb:	f7 d8                	neg    eax
c00169bd:	83 d2 00             	adc    edx,0x0
c00169c0:	83 c4 18             	add    esp,0x18
c00169c3:	f7 da                	neg    edx
c00169c5:	5b                   	pop    ebx
c00169c6:	c3                   	ret    
c00169c7:	51                   	push   ecx
c00169c8:	51                   	push   ecx
c00169c9:	50                   	push   eax
c00169ca:	68 b8 2b 02 c0       	push   0xc0022bb8
c00169cf:	e8 3d 88 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c00169d4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00169d7:	83 c4 10             	add    esp,0x10
c00169da:	31 d2                	xor    edx,edx
c00169dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00169e2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00169e9:	83 c4 18             	add    esp,0x18
c00169ec:	31 c0                	xor    eax,eax
c00169ee:	5b                   	pop    ebx
c00169ef:	c3                   	ret    
c00169f0:	83 c4 18             	add    esp,0x18
c00169f3:	83 c8 ff             	or     eax,0xffffffff
c00169f6:	83 ca ff             	or     edx,0xffffffff
c00169f9:	5b                   	pop    ebx
c00169fa:	c3                   	ret    

c00169fb <sysCallClose(regs*)>:
c00169fb:	53                   	push   ebx
c00169fc:	83 ec 08             	sub    esp,0x8
c00169ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016a03:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016a06:	83 f8 02             	cmp    eax,0x2
c0016a09:	76 4f                	jbe    c0016a5a <sysCallClose(regs*)+0x5f>
c0016a0b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016a10:	74 53                	je     c0016a65 <sysCallClose(regs*)+0x6a>
c0016a12:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016a17:	74 5b                	je     c0016a74 <sysCallClose(regs*)+0x79>
c0016a19:	77 2f                	ja     c0016a4a <sysCallClose(regs*)+0x4f>
c0016a1b:	83 ec 0c             	sub    esp,0xc
c0016a1e:	50                   	push   eax
c0016a1f:	e8 49 76 ff ff       	call   c000e06d <getFromFileDescriptor(int)>
c0016a24:	89 c3                	mov    ebx,eax
c0016a26:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a29:	e8 dc 8d ff ff       	call   c000f80a <File::close()>
c0016a2e:	83 c4 10             	add    esp,0x10
c0016a31:	85 db                	test   ebx,ebx
c0016a33:	74 0c                	je     c0016a41 <sysCallClose(regs*)+0x46>
c0016a35:	83 ec 0c             	sub    esp,0xc
c0016a38:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a3a:	53                   	push   ebx
c0016a3b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016a3e:	83 c4 10             	add    esp,0x10
c0016a41:	83 c4 08             	add    esp,0x8
c0016a44:	31 c0                	xor    eax,eax
c0016a46:	31 d2                	xor    edx,edx
c0016a48:	5b                   	pop    ebx
c0016a49:	c3                   	ret    
c0016a4a:	52                   	push   edx
c0016a4b:	52                   	push   edx
c0016a4c:	50                   	push   eax
c0016a4d:	68 ec 2a 02 c0       	push   0xc0022aec
c0016a52:	e8 ba 87 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0016a57:	83 c4 10             	add    esp,0x10
c0016a5a:	83 c4 08             	add    esp,0x8
c0016a5d:	83 c8 ff             	or     eax,0xffffffff
c0016a60:	83 ca ff             	or     edx,0xffffffff
c0016a63:	5b                   	pop    ebx
c0016a64:	c3                   	ret    
c0016a65:	83 ec 0c             	sub    esp,0xc
c0016a68:	68 d3 2b 02 c0       	push   0xc0022bd3
c0016a6d:	e8 9f 87 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0016a72:	eb ca                	jmp    c0016a3e <sysCallClose(regs*)+0x43>
c0016a74:	83 ec 0c             	sub    esp,0xc
c0016a77:	68 e1 2b 02 c0       	push   0xc0022be1
c0016a7c:	eb ef                	jmp    c0016a6d <sysCallClose(regs*)+0x72>

c0016a7e <sysCallOpenDir(regs*)>:
c0016a7e:	56                   	push   esi
c0016a7f:	53                   	push   ebx
c0016a80:	50                   	push   eax
c0016a81:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016a85:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0016a88:	85 c0                	test   eax,eax
c0016a8a:	74 53                	je     c0016adf <sysCallOpenDir(regs*)+0x61>
c0016a8c:	83 ec 0c             	sub    esp,0xc
c0016a8f:	68 14 01 00 00       	push   0x114
c0016a94:	e8 43 86 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0016a99:	89 c6                	mov    esi,eax
c0016a9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016aa0:	83 c4 0c             	add    esp,0xc
c0016aa3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016aa6:	50                   	push   eax
c0016aa7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016aaa:	50                   	push   eax
c0016aab:	56                   	push   esi
c0016aac:	e8 59 91 ff ff       	call   c000fc0a <Directory::Directory(char const*, Process*)>
c0016ab1:	89 34 24             	mov    DWORD PTR [esp],esi
c0016ab4:	e8 b5 91 ff ff       	call   c000fc6e <Directory::open()>
c0016ab9:	83 c4 10             	add    esp,0x10
c0016abc:	85 c0                	test   eax,eax
c0016abe:	75 1f                	jne    c0016adf <sysCallOpenDir(regs*)+0x61>
c0016ac0:	83 ec 0c             	sub    esp,0xc
c0016ac3:	56                   	push   esi
c0016ac4:	e8 ef 72 ff ff       	call   c000ddb8 <UnixFile::getFileDescriptor()>
c0016ac9:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0016acc:	83 c4 10             	add    esp,0x10
c0016acf:	89 02                	mov    DWORD PTR [edx],eax
c0016ad1:	c1 f8 1f             	sar    eax,0x1f
c0016ad4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016ad7:	31 c0                	xor    eax,eax
c0016ad9:	59                   	pop    ecx
c0016ada:	31 d2                	xor    edx,edx
c0016adc:	5b                   	pop    ebx
c0016add:	5e                   	pop    esi
c0016ade:	c3                   	ret    
c0016adf:	59                   	pop    ecx
c0016ae0:	83 c8 ff             	or     eax,0xffffffff
c0016ae3:	5b                   	pop    ebx
c0016ae4:	83 ca ff             	or     edx,0xffffffff
c0016ae7:	5e                   	pop    esi
c0016ae8:	c3                   	ret    

c0016ae9 <sysCallMakeDir(regs*)>:
c0016ae9:	56                   	push   esi
c0016aea:	53                   	push   ebx
c0016aeb:	83 ec 10             	sub    esp,0x10
c0016aee:	68 14 01 00 00       	push   0x114
c0016af3:	e8 e4 85 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0016af8:	89 c3                	mov    ebx,eax
c0016afa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016aff:	83 c4 0c             	add    esp,0xc
c0016b02:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016b05:	50                   	push   eax
c0016b06:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016b0a:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0016b0d:	52                   	push   edx
c0016b0e:	53                   	push   ebx
c0016b0f:	e8 f6 90 ff ff       	call   c000fc0a <Directory::Directory(char const*, Process*)>
c0016b14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b17:	e8 32 93 ff ff       	call   c000fe4e <Directory::create()>
c0016b1c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b1f:	89 c6                	mov    esi,eax
c0016b21:	e8 a4 91 ff ff       	call   c000fcca <Directory::close()>
c0016b26:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b28:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016b2b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b2e:	31 c0                	xor    eax,eax
c0016b30:	85 f6                	test   esi,esi
c0016b32:	0f 95 c0             	setne  al
c0016b35:	31 d2                	xor    edx,edx
c0016b37:	f7 d8                	neg    eax
c0016b39:	83 d2 00             	adc    edx,0x0
c0016b3c:	83 c4 14             	add    esp,0x14
c0016b3f:	f7 da                	neg    edx
c0016b41:	5b                   	pop    ebx
c0016b42:	5e                   	pop    esi
c0016b43:	c3                   	ret    

c0016b44 <sysCallCloseDir(regs*)>:
c0016b44:	53                   	push   ebx
c0016b45:	83 ec 08             	sub    esp,0x8
c0016b48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b4c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016b4f:	83 f8 02             	cmp    eax,0x2
c0016b52:	76 46                	jbe    c0016b9a <sysCallCloseDir(regs*)+0x56>
c0016b54:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0016b59:	77 2f                	ja     c0016b8a <sysCallCloseDir(regs*)+0x46>
c0016b5b:	83 ec 0c             	sub    esp,0xc
c0016b5e:	50                   	push   eax
c0016b5f:	e8 09 75 ff ff       	call   c000e06d <getFromFileDescriptor(int)>
c0016b64:	89 c3                	mov    ebx,eax
c0016b66:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b69:	e8 5c 91 ff ff       	call   c000fcca <Directory::close()>
c0016b6e:	83 c4 10             	add    esp,0x10
c0016b71:	85 db                	test   ebx,ebx
c0016b73:	74 0c                	je     c0016b81 <sysCallCloseDir(regs*)+0x3d>
c0016b75:	83 ec 0c             	sub    esp,0xc
c0016b78:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b7a:	53                   	push   ebx
c0016b7b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b7e:	83 c4 10             	add    esp,0x10
c0016b81:	83 c4 08             	add    esp,0x8
c0016b84:	31 c0                	xor    eax,eax
c0016b86:	31 d2                	xor    edx,edx
c0016b88:	5b                   	pop    ebx
c0016b89:	c3                   	ret    
c0016b8a:	52                   	push   edx
c0016b8b:	52                   	push   edx
c0016b8c:	50                   	push   eax
c0016b8d:	68 14 2b 02 c0       	push   0xc0022b14
c0016b92:	e8 7a 86 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0016b97:	83 c4 10             	add    esp,0x10
c0016b9a:	83 c4 08             	add    esp,0x8
c0016b9d:	83 c8 ff             	or     eax,0xffffffff
c0016ba0:	83 ca ff             	or     edx,0xffffffff
c0016ba3:	5b                   	pop    ebx
c0016ba4:	c3                   	ret    

c0016ba5 <sysCallWait(regs*)>:
c0016ba5:	83 ec 10             	sub    esp,0x10
c0016ba8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016bac:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016baf:	52                   	push   edx
c0016bb0:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0016bb3:	51                   	push   ecx
c0016bb4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0016bb7:	50                   	push   eax
c0016bb8:	e8 4f 23 00 00       	call   c0018f0c <waitTask(int, int*, int)>
c0016bbd:	89 c2                	mov    edx,eax
c0016bbf:	83 c4 1c             	add    esp,0x1c
c0016bc2:	c1 fa 1f             	sar    edx,0x1f
c0016bc5:	c3                   	ret    

c0016bc6 <sysCallRmdir(regs*)>:
c0016bc6:	56                   	push   esi
c0016bc7:	53                   	push   ebx
c0016bc8:	83 ec 10             	sub    esp,0x10
c0016bcb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bcf:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016bd2:	68 14 01 00 00       	push   0x114
c0016bd7:	e8 00 85 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0016bdc:	83 c4 0c             	add    esp,0xc
c0016bdf:	89 c3                	mov    ebx,eax
c0016be1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016be6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016be9:	50                   	push   eax
c0016bea:	56                   	push   esi
c0016beb:	53                   	push   ebx
c0016bec:	e8 57 8b ff ff       	call   c000f748 <File::File(char const*, Process*)>
c0016bf1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016bf4:	e8 2b 8d ff ff       	call   c000f924 <File::unlink()>
c0016bf9:	89 c6                	mov    esi,eax
c0016bfb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016bfd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c00:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c03:	31 c0                	xor    eax,eax
c0016c05:	85 f6                	test   esi,esi
c0016c07:	0f 95 c0             	setne  al
c0016c0a:	31 d2                	xor    edx,edx
c0016c0c:	f7 d8                	neg    eax
c0016c0e:	83 d2 00             	adc    edx,0x0
c0016c11:	83 c4 14             	add    esp,0x14
c0016c14:	f7 da                	neg    edx
c0016c16:	5b                   	pop    ebx
c0016c17:	5e                   	pop    esi
c0016c18:	c3                   	ret    

c0016c19 <sysCallUnlink(regs*)>:
c0016c19:	56                   	push   esi
c0016c1a:	53                   	push   ebx
c0016c1b:	83 ec 10             	sub    esp,0x10
c0016c1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016c22:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0016c25:	68 14 01 00 00       	push   0x114
c0016c2a:	e8 ad 84 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0016c2f:	83 c4 0c             	add    esp,0xc
c0016c32:	89 c3                	mov    ebx,eax
c0016c34:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c39:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016c3c:	50                   	push   eax
c0016c3d:	56                   	push   esi
c0016c3e:	53                   	push   ebx
c0016c3f:	e8 04 8b ff ff       	call   c000f748 <File::File(char const*, Process*)>
c0016c44:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c47:	e8 d8 8c ff ff       	call   c000f924 <File::unlink()>
c0016c4c:	89 c6                	mov    esi,eax
c0016c4e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016c50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c53:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016c56:	31 c0                	xor    eax,eax
c0016c58:	85 f6                	test   esi,esi
c0016c5a:	0f 95 c0             	setne  al
c0016c5d:	31 d2                	xor    edx,edx
c0016c5f:	f7 d8                	neg    eax
c0016c61:	83 d2 00             	adc    edx,0x0
c0016c64:	83 c4 14             	add    esp,0x14
c0016c67:	f7 da                	neg    edx
c0016c69:	5b                   	pop    ebx
c0016c6a:	5e                   	pop    esi
c0016c6b:	c3                   	ret    

c0016c6c <sysCallGetArgv(regs*)>:
c0016c6c:	83 ec 0c             	sub    esp,0xc
c0016c6f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016c73:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0016c76:	85 c0                	test   eax,eax
c0016c78:	78 2b                	js     c0016ca5 <sysCallGetArgv(regs*)+0x39>
c0016c7a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016c80:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c0016c83:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c0016c89:	7d 1a                	jge    c0016ca5 <sysCallGetArgv(regs*)+0x39>
c0016c8b:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c0016c92:	85 c0                	test   eax,eax
c0016c94:	74 17                	je     c0016cad <sysCallGetArgv(regs*)+0x41>
c0016c96:	51                   	push   ecx
c0016c97:	51                   	push   ecx
c0016c98:	50                   	push   eax
c0016c99:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0016c9c:	50                   	push   eax
c0016c9d:	e8 be 9a fe ff       	call   c0000760 <strcpy>
c0016ca2:	83 c4 10             	add    esp,0x10
c0016ca5:	31 c0                	xor    eax,eax
c0016ca7:	31 d2                	xor    edx,edx
c0016ca9:	83 c4 0c             	add    esp,0xc
c0016cac:	c3                   	ret    
c0016cad:	b8 01 00 00 00       	mov    eax,0x1
c0016cb2:	31 d2                	xor    edx,edx
c0016cb4:	83 c4 0c             	add    esp,0xc
c0016cb7:	c3                   	ret    

c0016cb8 <sysCallTTYName(regs*)>:
c0016cb8:	56                   	push   esi
c0016cb9:	53                   	push   ebx
c0016cba:	50                   	push   eax
c0016cbb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016cbf:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016cc2:	85 c0                	test   eax,eax
c0016cc4:	74 4d                	je     c0016d13 <sysCallTTYName(regs*)+0x5b>
c0016cc6:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0016cc9:	83 f8 02             	cmp    eax,0x2
c0016ccc:	76 07                	jbe    c0016cd5 <sysCallTTYName(regs*)+0x1d>
c0016cce:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0016cd3:	75 54                	jne    c0016d29 <sysCallTTYName(regs*)+0x71>
c0016cd5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cda:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016cdd:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016ce3:	85 db                	test   ebx,ebx
c0016ce5:	74 2c                	je     c0016d13 <sysCallTTYName(regs*)+0x5b>
c0016ce7:	83 ec 0c             	sub    esp,0xc
c0016cea:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016cec:	53                   	push   ebx
c0016ced:	ff 10                	call   DWORD PTR [eax]
c0016cef:	83 c4 10             	add    esp,0x10
c0016cf2:	84 c0                	test   al,al
c0016cf4:	74 28                	je     c0016d1e <sysCallTTYName(regs*)+0x66>
c0016cf6:	50                   	push   eax
c0016cf7:	81 c3 1e 10 00 00    	add    ebx,0x101e
c0016cfd:	50                   	push   eax
c0016cfe:	53                   	push   ebx
c0016cff:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0016d02:	50                   	push   eax
c0016d03:	e8 58 9a fe ff       	call   c0000760 <strcpy>
c0016d08:	83 c4 10             	add    esp,0x10
c0016d0b:	31 c0                	xor    eax,eax
c0016d0d:	31 d2                	xor    edx,edx
c0016d0f:	59                   	pop    ecx
c0016d10:	5b                   	pop    ebx
c0016d11:	5e                   	pop    esi
c0016d12:	c3                   	ret    
c0016d13:	59                   	pop    ecx
c0016d14:	b8 01 00 00 00       	mov    eax,0x1
c0016d19:	5b                   	pop    ebx
c0016d1a:	31 d2                	xor    edx,edx
c0016d1c:	5e                   	pop    esi
c0016d1d:	c3                   	ret    
c0016d1e:	59                   	pop    ecx
c0016d1f:	b8 02 00 00 00       	mov    eax,0x2
c0016d24:	5b                   	pop    ebx
c0016d25:	31 d2                	xor    edx,edx
c0016d27:	5e                   	pop    esi
c0016d28:	c3                   	ret    
c0016d29:	83 ec 0c             	sub    esp,0xc
c0016d2c:	50                   	push   eax
c0016d2d:	e8 3b 73 ff ff       	call   c000e06d <getFromFileDescriptor(int)>
c0016d32:	83 c4 10             	add    esp,0x10
c0016d35:	89 c3                	mov    ebx,eax
c0016d37:	eb aa                	jmp    c0016ce3 <sysCallTTYName(regs*)+0x2b>

c0016d39 <sysCallGetEnv(regs*)>:
c0016d39:	83 ec 0c             	sub    esp,0xc
c0016d3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d40:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0016d43:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016d46:	85 d2                	test   edx,edx
c0016d48:	75 22                	jne    c0016d6c <sysCallGetEnv(regs*)+0x33>
c0016d4a:	31 c0                	xor    eax,eax
c0016d4c:	31 d2                	xor    edx,edx
c0016d4e:	85 c9                	test   ecx,ecx
c0016d50:	74 04                	je     c0016d56 <sysCallGetEnv(regs*)+0x1d>
c0016d52:	83 c4 0c             	add    esp,0xc
c0016d55:	c3                   	ret    
c0016d56:	83 ec 0c             	sub    esp,0xc
c0016d59:	68 38 2b 02 c0       	push   0xc0022b38
c0016d5e:	e8 7b 99 fe ff       	call   c00006de <strlen>
c0016d63:	83 c4 10             	add    esp,0x10
c0016d66:	31 d2                	xor    edx,edx
c0016d68:	83 c4 0c             	add    esp,0xc
c0016d6b:	c3                   	ret    
c0016d6c:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016d6f:	85 c9                	test   ecx,ecx
c0016d71:	74 0b                	je     c0016d7e <sysCallGetEnv(regs*)+0x45>
c0016d73:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0016d76:	31 c0                	xor    eax,eax
c0016d78:	31 d2                	xor    edx,edx
c0016d7a:	83 c4 0c             	add    esp,0xc
c0016d7d:	c3                   	ret    
c0016d7e:	52                   	push   edx
c0016d7f:	52                   	push   edx
c0016d80:	68 38 2b 02 c0       	push   0xc0022b38
c0016d85:	50                   	push   eax
c0016d86:	e8 d5 99 fe ff       	call   c0000760 <strcpy>
c0016d8b:	83 c4 10             	add    esp,0x10
c0016d8e:	eb e6                	jmp    c0016d76 <sysCallGetEnv(regs*)+0x3d>

c0016d90 <sysCallUSleep(regs*)>:
c0016d90:	57                   	push   edi
c0016d91:	56                   	push   esi
c0016d92:	53                   	push   ebx
c0016d93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d97:	52                   	push   edx
c0016d98:	52                   	push   edx
c0016d99:	8b 58 28             	mov    ebx,DWORD PTR [eax+0x28]
c0016d9c:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0016d9f:	89 c8                	mov    eax,ecx
c0016da1:	89 da                	mov    edx,ebx
c0016da3:	0f a4 c2 05          	shld   edx,eax,0x5
c0016da7:	c1 e0 05             	shl    eax,0x5
c0016daa:	29 c8                	sub    eax,ecx
c0016dac:	19 da                	sbb    edx,ebx
c0016dae:	0f a4 c2 02          	shld   edx,eax,0x2
c0016db2:	c1 e0 02             	shl    eax,0x2
c0016db5:	01 c8                	add    eax,ecx
c0016db7:	11 da                	adc    edx,ebx
c0016db9:	0f a4 c2 03          	shld   edx,eax,0x3
c0016dbd:	c1 e0 03             	shl    eax,0x3
c0016dc0:	52                   	push   edx
c0016dc1:	50                   	push   eax
c0016dc2:	e8 e0 21 00 00       	call   c0018fa7 <nanoSleep(unsigned long long)>
c0016dc7:	83 c4 10             	add    esp,0x10
c0016dca:	31 c0                	xor    eax,eax
c0016dcc:	31 d2                	xor    edx,edx
c0016dce:	5b                   	pop    ebx
c0016dcf:	5e                   	pop    esi
c0016dd0:	5f                   	pop    edi
c0016dd1:	c3                   	ret    

c0016dd2 <sysCallSpawn(regs*)>:
c0016dd2:	56                   	push   esi
c0016dd3:	53                   	push   ebx
c0016dd4:	50                   	push   eax
c0016dd5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016dd9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016ddc:	85 c0                	test   eax,eax
c0016dde:	75 08                	jne    c0016de8 <sysCallSpawn(regs*)+0x16>
c0016de0:	59                   	pop    ecx
c0016de1:	31 c0                	xor    eax,eax
c0016de3:	5b                   	pop    ebx
c0016de4:	31 d2                	xor    edx,edx
c0016de6:	5e                   	pop    esi
c0016de7:	c3                   	ret    
c0016de8:	83 ec 0c             	sub    esp,0xc
c0016deb:	68 3b 07 00 00       	push   0x73b
c0016df0:	e8 e7 82 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0016df5:	89 c6                	mov    esi,eax
c0016df7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0016dfa:	50                   	push   eax
c0016dfb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e00:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016e03:	50                   	push   eax
c0016e04:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016e07:	50                   	push   eax
c0016e08:	56                   	push   esi
c0016e09:	e8 d6 18 00 00       	call   c00186e4 <Process::Process(char const*, Process*, char**)>
c0016e0e:	83 c4 20             	add    esp,0x20
c0016e11:	80 be 3a 07 00 00 00 	cmp    BYTE PTR [esi+0x73a],0x0
c0016e18:	75 c6                	jne    c0016de0 <sysCallSpawn(regs*)+0xe>
c0016e1a:	83 ec 0c             	sub    esp,0xc
c0016e1d:	56                   	push   esi
c0016e1e:	e8 3d 1e 00 00       	call   c0018c60 <Process::createUserThread()>
c0016e23:	83 c4 10             	add    esp,0x10
c0016e26:	8b 06                	mov    eax,DWORD PTR [esi]
c0016e28:	89 c2                	mov    edx,eax
c0016e2a:	c1 fa 1f             	sar    edx,0x1f
c0016e2d:	59                   	pop    ecx
c0016e2e:	5b                   	pop    ebx
c0016e2f:	5e                   	pop    esi
c0016e30:	c3                   	ret    

c0016e31 <sysAppSettings(regs*)>:
c0016e31:	53                   	push   ebx
c0016e32:	31 d2                	xor    edx,edx
c0016e34:	83 ec 08             	sub    esp,0x8
c0016e37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016e3b:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0016e3e:	b8 01 00 00 00       	mov    eax,0x1
c0016e43:	8b 8b 00 01 00 00    	mov    ecx,DWORD PTR [ebx+0x100]
c0016e49:	81 e1 e0 1f 00 00    	and    ecx,0x1fe0
c0016e4f:	66 81 f9 c0 09       	cmp    cx,0x9c0
c0016e54:	75 30                	jne    c0016e86 <sysAppSettings(regs*)+0x55>
c0016e56:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c0016e5c:	83 e0 1f             	and    eax,0x1f
c0016e5f:	3c 01                	cmp    al,0x1
c0016e61:	74 28                	je     c0016e8b <sysAppSettings(regs*)+0x5a>
c0016e63:	3c 07                	cmp    al,0x7
c0016e65:	0f 84 be 00 00 00    	je     c0016f29 <sysAppSettings(regs*)+0xf8>
c0016e6b:	84 c0                	test   al,al
c0016e6d:	0f 84 da 00 00 00    	je     c0016f4d <sysAppSettings(regs*)+0x11c>
c0016e73:	3c 08                	cmp    al,0x8
c0016e75:	74 6d                	je     c0016ee4 <sysAppSettings(regs*)+0xb3>
c0016e77:	25 ff 00 00 00       	and    eax,0xff
c0016e7c:	05 e8 03 00 00       	add    eax,0x3e8
c0016e81:	89 c2                	mov    edx,eax
c0016e83:	c1 fa 1f             	sar    edx,0x1f
c0016e86:	83 c4 08             	add    esp,0x8
c0016e89:	5b                   	pop    ebx
c0016e8a:	c3                   	ret    
c0016e8b:	50                   	push   eax
c0016e8c:	68 00 01 00 00       	push   0x100
c0016e91:	6a 00                	push   0x0
c0016e93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e98:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016e9b:	83 c0 0c             	add    eax,0xc
c0016e9e:	50                   	push   eax
c0016e9f:	e8 1d 98 fe ff       	call   c00006c1 <memset>
c0016ea4:	83 c4 0c             	add    esp,0xc
c0016ea7:	68 ff 00 00 00       	push   0xff
c0016eac:	53                   	push   ebx
c0016ead:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016eb2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016eb5:	83 c0 0c             	add    eax,0xc
c0016eb8:	50                   	push   eax
c0016eb9:	e8 cd 97 fe ff       	call   c000068b <memcpy>
c0016ebe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ec3:	5a                   	pop    edx
c0016ec4:	59                   	pop    ecx
c0016ec5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ec8:	8d 50 0c             	lea    edx,[eax+0xc]
c0016ecb:	52                   	push   edx
c0016ecc:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c0016ed2:	53                   	push   ebx
c0016ed3:	e8 dc 62 ff ff       	call   c000d1b4 <VgaText::setTitle(char*)>
c0016ed8:	83 c4 10             	add    esp,0x10
c0016edb:	31 c0                	xor    eax,eax
c0016edd:	31 d2                	xor    edx,edx
c0016edf:	83 c4 08             	add    esp,0x8
c0016ee2:	5b                   	pop    ebx
c0016ee3:	c3                   	ret    
c0016ee4:	50                   	push   eax
c0016ee5:	50                   	push   eax
c0016ee6:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016eec:	83 e0 0f             	and    eax,0xf
c0016eef:	50                   	push   eax
c0016ef0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ef5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016ef8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0016efe:	50                   	push   eax
c0016eff:	e8 a0 62 ff ff       	call   c000d1a4 <VgaText::setTitleColour(VgaColour)>
c0016f04:	58                   	pop    eax
c0016f05:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c0016f0b:	c1 e8 04             	shr    eax,0x4
c0016f0e:	5a                   	pop    edx
c0016f0f:	83 e0 0f             	and    eax,0xf
c0016f12:	50                   	push   eax
c0016f13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f18:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f1b:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c0016f21:	51                   	push   ecx
c0016f22:	e8 6d 62 ff ff       	call   c000d194 <VgaText::setTitleTextColour(VgaColour)>
c0016f27:	eb af                	jmp    c0016ed8 <sysAppSettings(regs*)+0xa7>
c0016f29:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f2e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f31:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0016f37:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c0016f3d:	c0 e8 06             	shr    al,0x6
c0016f40:	83 e0 01             	and    eax,0x1
c0016f43:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c0016f49:	31 c0                	xor    eax,eax
c0016f4b:	eb 90                	jmp    c0016edd <sysAppSettings(regs*)+0xac>
c0016f4d:	b8 02 00 00 00       	mov    eax,0x2
c0016f52:	31 d2                	xor    edx,edx
c0016f54:	eb 89                	jmp    c0016edf <sysAppSettings(regs*)+0xae>

c0016f56 <sysSetFatAttrib(regs*)>:
c0016f56:	57                   	push   edi
c0016f57:	56                   	push   esi
c0016f58:	53                   	push   ebx
c0016f59:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f5d:	83 ec 0c             	sub    esp,0xc
c0016f60:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0016f63:	68 14 01 00 00       	push   0x114
c0016f68:	e8 6f 81 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0016f6d:	83 c4 0c             	add    esp,0xc
c0016f70:	89 c3                	mov    ebx,eax
c0016f72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f77:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0016f7a:	50                   	push   eax
c0016f7b:	57                   	push   edi
c0016f7c:	53                   	push   ebx
c0016f7d:	e8 c6 87 ff ff       	call   c000f748 <File::File(char const*, Process*)>
c0016f82:	83 c4 0c             	add    esp,0xc
c0016f85:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0016f88:	0f b6 d4             	movzx  edx,ah
c0016f8b:	52                   	push   edx
c0016f8c:	25 ff 00 00 00       	and    eax,0xff
c0016f91:	50                   	push   eax
c0016f92:	53                   	push   ebx
c0016f93:	e8 26 8a ff ff       	call   c000f9be <File::chfatattr(unsigned char, unsigned char)>
c0016f98:	89 c6                	mov    esi,eax
c0016f9a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f9c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016f9f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016fa2:	83 c4 10             	add    esp,0x10
c0016fa5:	31 c0                	xor    eax,eax
c0016fa7:	85 f6                	test   esi,esi
c0016fa9:	0f 95 c0             	setne  al
c0016fac:	5b                   	pop    ebx
c0016fad:	31 d2                	xor    edx,edx
c0016faf:	f7 d8                	neg    eax
c0016fb1:	83 d2 00             	adc    edx,0x0
c0016fb4:	5e                   	pop    esi
c0016fb5:	f7 da                	neg    edx
c0016fb7:	5f                   	pop    edi
c0016fb8:	c3                   	ret    

c0016fb9 <sysPanic(regs*)>:
c0016fb9:	83 ec 18             	sub    esp,0x18
c0016fbc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016fc0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0016fc3:	50                   	push   eax
c0016fc4:	e8 77 ea ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c0016fc9:	c7 04 24 ef 2b 02 c0 	mov    DWORD PTR [esp],0xc0022bef
c0016fd0:	e8 6b ea ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c0016fd5:	b8 01 00 00 00       	mov    eax,0x1
c0016fda:	31 d2                	xor    edx,edx
c0016fdc:	83 c4 1c             	add    esp,0x1c
c0016fdf:	c3                   	ret    

c0016fe0 <sysPipe(regs*)>:
c0016fe0:	57                   	push   edi
c0016fe1:	56                   	push   esi
c0016fe2:	53                   	push   ebx
c0016fe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016fe7:	83 ec 0c             	sub    esp,0xc
c0016fea:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0016fed:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0016ff0:	6a 20                	push   0x20
c0016ff2:	e8 e5 80 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0016ff7:	89 c3                	mov    ebx,eax
c0016ff9:	58                   	pop    eax
c0016ffa:	5a                   	pop    edx
c0016ffb:	68 00 50 00 00       	push   0x5000
c0017000:	53                   	push   ebx
c0017001:	e8 ec 5a ff ff       	call   c000caf2 <Pipe::Pipe(int)>
c0017006:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017009:	e8 aa 6d ff ff       	call   c000ddb8 <UnixFile::getFileDescriptor()>
c001700e:	89 07                	mov    DWORD PTR [edi],eax
c0017010:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017013:	e8 a0 6d ff ff       	call   c000ddb8 <UnixFile::getFileDescriptor()>
c0017018:	83 c4 10             	add    esp,0x10
c001701b:	89 06                	mov    DWORD PTR [esi],eax
c001701d:	31 d2                	xor    edx,edx
c001701f:	5b                   	pop    ebx
c0017020:	31 c0                	xor    eax,eax
c0017022:	5e                   	pop    esi
c0017023:	5f                   	pop    edi
c0017024:	c3                   	ret    

c0017025 <sysGetUnixTime(regs*)>:
c0017025:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001702a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017030:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017034:	e9 d7 90 ff ff       	jmp    c0010110 <Clock::timeInSecondsLocal()>

c0017039 <string_ends_with(char const*, char const*)>:
c0017039:	57                   	push   edi
c001703a:	56                   	push   esi
c001703b:	53                   	push   ebx
c001703c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017040:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017044:	83 ec 0c             	sub    esp,0xc
c0017047:	53                   	push   ebx
c0017048:	e8 91 96 fe ff       	call   c00006de <strlen>
c001704d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017050:	89 c6                	mov    esi,eax
c0017052:	e8 87 96 fe ff       	call   c00006de <strlen>
c0017057:	83 c4 10             	add    esp,0x10
c001705a:	31 d2                	xor    edx,edx
c001705c:	39 c6                	cmp    esi,eax
c001705e:	7d 06                	jge    c0017066 <string_ends_with(char const*, char const*)+0x2d>
c0017060:	5b                   	pop    ebx
c0017061:	89 d0                	mov    eax,edx
c0017063:	5e                   	pop    esi
c0017064:	5f                   	pop    edi
c0017065:	c3                   	ret    
c0017066:	52                   	push   edx
c0017067:	29 c6                	sub    esi,eax
c0017069:	52                   	push   edx
c001706a:	01 f3                	add    ebx,esi
c001706c:	57                   	push   edi
c001706d:	53                   	push   ebx
c001706e:	e8 3e 97 fe ff       	call   c00007b1 <strcmp>
c0017073:	83 c4 10             	add    esp,0x10
c0017076:	31 d2                	xor    edx,edx
c0017078:	85 c0                	test   eax,eax
c001707a:	5b                   	pop    ebx
c001707b:	0f 94 c2             	sete   dl
c001707e:	5e                   	pop    esi
c001707f:	89 d0                	mov    eax,edx
c0017081:	5f                   	pop    edi
c0017082:	c3                   	ret    

c0017083 <sysCallOpen(regs*)>:
c0017083:	56                   	push   esi
c0017084:	53                   	push   ebx
c0017085:	81 ec 04 01 00 00    	sub    esp,0x104
c001708b:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0017092:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0017095:	85 c9                	test   ecx,ecx
c0017097:	0f 84 bb 00 00 00    	je     c0017158 <sysCallOpen(regs*)+0xd5>
c001709d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00170a0:	85 c0                	test   eax,eax
c00170a2:	0f 84 b0 00 00 00    	je     c0017158 <sysCallOpen(regs*)+0xd5>
c00170a8:	52                   	push   edx
c00170a9:	68 fe 2b 02 c0       	push   0xc0022bfe
c00170ae:	50                   	push   eax
c00170af:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00170b3:	56                   	push   esi
c00170b4:	e8 e5 84 ff ff       	call   c000f59e <standardiseFiles(char*, char const*, char const*)>
c00170b9:	89 34 24             	mov    DWORD PTR [esp],esi
c00170bc:	e8 1d 96 fe ff       	call   c00006de <strlen>
c00170c1:	83 c4 10             	add    esp,0x10
c00170c4:	48                   	dec    eax
c00170c5:	74 25                	je     c00170ec <sysCallOpen(regs*)+0x69>
c00170c7:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c00170ca:	80 fa 2e             	cmp    dl,0x2e
c00170cd:	74 19                	je     c00170e8 <sysCallOpen(regs*)+0x65>
c00170cf:	80 fa 3a             	cmp    dl,0x3a
c00170d2:	74 14                	je     c00170e8 <sysCallOpen(regs*)+0x65>
c00170d4:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00170d8:	48                   	dec    eax
c00170d9:	74 11                	je     c00170ec <sysCallOpen(regs*)+0x69>
c00170db:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00170de:	80 fa 3a             	cmp    dl,0x3a
c00170e1:	74 05                	je     c00170e8 <sysCallOpen(regs*)+0x65>
c00170e3:	80 fa 2e             	cmp    dl,0x2e
c00170e6:	75 ec                	jne    c00170d4 <sysCallOpen(regs*)+0x51>
c00170e8:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00170ec:	51                   	push   ecx
c00170ed:	51                   	push   ecx
c00170ee:	68 02 2c 02 c0       	push   0xc0022c02
c00170f3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00170f6:	50                   	push   eax
c00170f7:	e8 3d ff ff ff       	call   c0017039 <string_ends_with(char const*, char const*)>
c00170fc:	83 c4 10             	add    esp,0x10
c00170ff:	85 c0                	test   eax,eax
c0017101:	75 17                	jne    c001711a <sysCallOpen(regs*)+0x97>
c0017103:	50                   	push   eax
c0017104:	50                   	push   eax
c0017105:	68 23 2c 02 c0       	push   0xc0022c23
c001710a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001710d:	50                   	push   eax
c001710e:	e8 26 ff ff ff       	call   c0017039 <string_ends_with(char const*, char const*)>
c0017113:	83 c4 10             	add    esp,0x10
c0017116:	85 c0                	test   eax,eax
c0017118:	74 4d                	je     c0017167 <sysCallOpen(regs*)+0xe4>
c001711a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001711d:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0017123:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001712a:	50                   	push   eax
c001712b:	50                   	push   eax
c001712c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001712f:	8b 10                	mov    edx,DWORD PTR [eax]
c0017131:	52                   	push   edx
c0017132:	68 07 2c 02 c0       	push   0xc0022c07
c0017137:	e8 d5 80 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001713c:	c7 04 24 16 2c 02 c0 	mov    DWORD PTR [esp],0xc0022c16
c0017143:	e8 c9 80 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0017148:	83 c4 10             	add    esp,0x10
c001714b:	81 c4 04 01 00 00    	add    esp,0x104
c0017151:	31 c0                	xor    eax,eax
c0017153:	31 d2                	xor    edx,edx
c0017155:	5b                   	pop    ebx
c0017156:	5e                   	pop    esi
c0017157:	c3                   	ret    
c0017158:	81 c4 04 01 00 00    	add    esp,0x104
c001715e:	83 c8 ff             	or     eax,0xffffffff
c0017161:	83 ca ff             	or     edx,0xffffffff
c0017164:	5b                   	pop    ebx
c0017165:	5e                   	pop    esi
c0017166:	c3                   	ret    
c0017167:	50                   	push   eax
c0017168:	50                   	push   eax
c0017169:	68 03 2c 02 c0       	push   0xc0022c03
c001716e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017171:	50                   	push   eax
c0017172:	e8 3a 96 fe ff       	call   c00007b1 <strcmp>
c0017177:	83 c4 10             	add    esp,0x10
c001717a:	85 c0                	test   eax,eax
c001717c:	74 9c                	je     c001711a <sysCallOpen(regs*)+0x97>
c001717e:	50                   	push   eax
c001717f:	50                   	push   eax
c0017180:	68 02 2c 02 c0       	push   0xc0022c02
c0017185:	56                   	push   esi
c0017186:	e8 ae fe ff ff       	call   c0017039 <string_ends_with(char const*, char const*)>
c001718b:	83 c4 10             	add    esp,0x10
c001718e:	85 c0                	test   eax,eax
c0017190:	75 88                	jne    c001711a <sysCallOpen(regs*)+0x97>
c0017192:	52                   	push   edx
c0017193:	52                   	push   edx
c0017194:	68 28 2c 02 c0       	push   0xc0022c28
c0017199:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001719c:	51                   	push   ecx
c001719d:	e8 97 fe ff ff       	call   c0017039 <string_ends_with(char const*, char const*)>
c00171a2:	83 c4 10             	add    esp,0x10
c00171a5:	85 c0                	test   eax,eax
c00171a7:	0f 85 d5 00 00 00    	jne    c0017282 <sysCallOpen(regs*)+0x1ff>
c00171ad:	50                   	push   eax
c00171ae:	50                   	push   eax
c00171af:	68 2d 2c 02 c0       	push   0xc0022c2d
c00171b4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171b7:	50                   	push   eax
c00171b8:	e8 7c fe ff ff       	call   c0017039 <string_ends_with(char const*, char const*)>
c00171bd:	83 c4 10             	add    esp,0x10
c00171c0:	85 c0                	test   eax,eax
c00171c2:	0f 85 ba 00 00 00    	jne    c0017282 <sysCallOpen(regs*)+0x1ff>
c00171c8:	50                   	push   eax
c00171c9:	50                   	push   eax
c00171ca:	68 29 2c 02 c0       	push   0xc0022c29
c00171cf:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00171d2:	50                   	push   eax
c00171d3:	e8 d9 95 fe ff       	call   c00007b1 <strcmp>
c00171d8:	83 c4 10             	add    esp,0x10
c00171db:	85 c0                	test   eax,eax
c00171dd:	0f 84 9f 00 00 00    	je     c0017282 <sysCallOpen(regs*)+0x1ff>
c00171e3:	50                   	push   eax
c00171e4:	50                   	push   eax
c00171e5:	68 28 2c 02 c0       	push   0xc0022c28
c00171ea:	56                   	push   esi
c00171eb:	e8 49 fe ff ff       	call   c0017039 <string_ends_with(char const*, char const*)>
c00171f0:	83 c4 10             	add    esp,0x10
c00171f3:	85 c0                	test   eax,eax
c00171f5:	0f 85 87 00 00 00    	jne    c0017282 <sysCallOpen(regs*)+0x1ff>
c00171fb:	83 ec 0c             	sub    esp,0xc
c00171fe:	68 14 01 00 00       	push   0x114
c0017203:	e8 d4 7e ff ff       	call   c000f0dc <operator new(unsigned long)>
c0017208:	89 c6                	mov    esi,eax
c001720a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001720f:	83 c4 0c             	add    esp,0xc
c0017212:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
c0017215:	51                   	push   ecx
c0017216:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0017219:	50                   	push   eax
c001721a:	56                   	push   esi
c001721b:	e8 28 85 ff ff       	call   c000f748 <File::File(char const*, Process*)>
c0017220:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0017223:	83 c4 10             	add    esp,0x10
c0017226:	89 d0                	mov    eax,edx
c0017228:	25 ff 00 00 00       	and    eax,0xff
c001722d:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0017230:	89 d0                	mov    eax,edx
c0017232:	83 e0 01             	and    eax,0x1
c0017235:	f6 c2 02             	test   dl,0x2
c0017238:	74 03                	je     c001723d <sysCallOpen(regs*)+0x1ba>
c001723a:	83 c8 02             	or     eax,0x2
c001723d:	f6 c2 04             	test   dl,0x4
c0017240:	74 03                	je     c0017245 <sysCallOpen(regs*)+0x1c2>
c0017242:	83 c8 04             	or     eax,0x4
c0017245:	f6 c2 08             	test   dl,0x8
c0017248:	74 03                	je     c001724d <sysCallOpen(regs*)+0x1ca>
c001724a:	83 c8 0a             	or     eax,0xa
c001724d:	83 e2 10             	and    edx,0x10
c0017250:	74 03                	je     c0017255 <sysCallOpen(regs*)+0x1d2>
c0017252:	83 c8 12             	or     eax,0x12
c0017255:	52                   	push   edx
c0017256:	52                   	push   edx
c0017257:	50                   	push   eax
c0017258:	56                   	push   esi
c0017259:	e8 4e 85 ff ff       	call   c000f7ac <File::open(FileOpenMode)>
c001725e:	83 c4 10             	add    esp,0x10
c0017261:	85 c0                	test   eax,eax
c0017263:	0f 85 ef fe ff ff    	jne    c0017158 <sysCallOpen(regs*)+0xd5>
c0017269:	83 ec 0c             	sub    esp,0xc
c001726c:	56                   	push   esi
c001726d:	e8 46 6b ff ff       	call   c000ddb8 <UnixFile::getFileDescriptor()>
c0017272:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0017275:	89 02                	mov    DWORD PTR [edx],eax
c0017277:	c1 f8 1f             	sar    eax,0x1f
c001727a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001727d:	e9 c6 fe ff ff       	jmp    c0017148 <sysCallOpen(regs*)+0xc5>
c0017282:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017285:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001728b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0017292:	e9 b4 fe ff ff       	jmp    c001714b <sysCallOpen(regs*)+0xc8>

c0017297 <setupSystemCalls()>:
c0017297:	c7 05 00 52 02 c0 92 64 01 c0 	mov    DWORD PTR ds:0xc0025200,0xc0016492
c00172a1:	c7 05 04 52 02 c0 a5 62 01 c0 	mov    DWORD PTR ds:0xc0025204,0xc00162a5
c00172ab:	c7 05 08 52 02 c0 ba 63 01 c0 	mov    DWORD PTR ds:0xc0025208,0xc00163ba
c00172b5:	c7 05 0c 52 02 c0 0f 64 01 c0 	mov    DWORD PTR ds:0xc002520c,0xc001640f
c00172bf:	c7 05 10 52 02 c0 52 63 01 c0 	mov    DWORD PTR ds:0xc0025210,0xc0016352
c00172c9:	c7 05 14 52 02 c0 ac 64 01 c0 	mov    DWORD PTR ds:0xc0025214,0xc00164ac
c00172d3:	c7 05 18 52 02 c0 6b 66 01 c0 	mov    DWORD PTR ds:0xc0025218,0xc001666b
c00172dd:	c7 05 1c 52 02 c0 91 66 01 c0 	mov    DWORD PTR ds:0xc002521c,0xc0016691
c00172e7:	c7 05 24 52 02 c0 fb 69 01 c0 	mov    DWORD PTR ds:0xc0025224,0xc00169fb
c00172f1:	c7 05 20 52 02 c0 83 70 01 c0 	mov    DWORD PTR ds:0xc0025220,0xc0017083
c00172fb:	c7 05 28 52 02 c0 7e 6a 01 c0 	mov    DWORD PTR ds:0xc0025228,0xc0016a7e
c0017305:	c7 05 2c 52 02 c0 00 67 01 c0 	mov    DWORD PTR ds:0xc002522c,0xc0016700
c001730f:	c7 05 30 52 02 c0 bc 64 01 c0 	mov    DWORD PTR ds:0xc0025230,0xc00164bc
c0017319:	c7 05 34 52 02 c0 c1 64 01 c0 	mov    DWORD PTR ds:0xc0025234,0xc00164c1
c0017323:	c7 05 38 52 02 c0 e9 6a 01 c0 	mov    DWORD PTR ds:0xc0025238,0xc0016ae9
c001732d:	c7 05 3c 52 02 c0 44 6b 01 c0 	mov    DWORD PTR ds:0xc002523c,0xc0016b44
c0017337:	c7 05 40 52 02 c0 eb 67 01 c0 	mov    DWORD PTR ds:0xc0025240,0xc00167eb
c0017341:	c7 05 44 52 02 c0 51 68 01 c0 	mov    DWORD PTR ds:0xc0025244,0xc0016851
c001734b:	c7 05 48 52 02 c0 7a 69 01 c0 	mov    DWORD PTR ds:0xc0025248,0xc001697a
c0017355:	c7 05 4c 52 02 c0 c6 64 01 c0 	mov    DWORD PTR ds:0xc002524c,0xc00164c6
c001735f:	c7 05 50 52 02 c0 a5 6b 01 c0 	mov    DWORD PTR ds:0xc0025250,0xc0016ba5
c0017369:	c7 05 54 52 02 c0 d0 64 01 c0 	mov    DWORD PTR ds:0xc0025254,0xc00164d0
c0017373:	c7 05 58 52 02 c0 d7 64 01 c0 	mov    DWORD PTR ds:0xc0025258,0xc00164d7
c001737d:	c7 05 5c 52 02 c0 c6 6b 01 c0 	mov    DWORD PTR ds:0xc002525c,0xc0016bc6
c0017387:	c7 05 60 52 02 c0 19 6c 01 c0 	mov    DWORD PTR ds:0xc0025260,0xc0016c19
c0017391:	c7 05 64 52 02 c0 de 64 01 c0 	mov    DWORD PTR ds:0xc0025264,0xc00164de
c001739b:	c7 05 68 52 02 c0 6c 6c 01 c0 	mov    DWORD PTR ds:0xc0025268,0xc0016c6c
c00173a5:	c7 05 6c 52 02 c0 b3 66 01 c0 	mov    DWORD PTR ds:0xc002526c,0xc00166b3
c00173af:	c7 05 70 52 02 c0 b8 6c 01 c0 	mov    DWORD PTR ds:0xc0025270,0xc0016cb8
c00173b9:	c7 05 74 52 02 c0 93 67 01 c0 	mov    DWORD PTR ds:0xc0025274,0xc0016793
c00173c3:	c7 05 78 52 02 c0 90 6d 01 c0 	mov    DWORD PTR ds:0xc0025278,0xc0016d90
c00173cd:	c7 05 7c 52 02 c0 cc 68 01 c0 	mov    DWORD PTR ds:0xc002527c,0xc00168cc
c00173d7:	c7 05 80 52 02 c0 d2 6d 01 c0 	mov    DWORD PTR ds:0xc0025280,0xc0016dd2
c00173e1:	c7 05 84 52 02 c0 39 6d 01 c0 	mov    DWORD PTR ds:0xc0025284,0xc0016d39
c00173eb:	c7 05 88 52 02 c0 31 6e 01 c0 	mov    DWORD PTR ds:0xc0025288,0xc0016e31
c00173f5:	c7 05 8c 52 02 c0 f2 64 01 c0 	mov    DWORD PTR ds:0xc002528c,0xc00164f2
c00173ff:	c7 05 90 52 02 c0 55 65 01 c0 	mov    DWORD PTR ds:0xc0025290,0xc0016555
c0017409:	c7 05 94 52 02 c0 9d 65 01 c0 	mov    DWORD PTR ds:0xc0025294,0xc001659d
c0017413:	c7 05 98 52 02 c0 56 6f 01 c0 	mov    DWORD PTR ds:0xc0025298,0xc0016f56
c001741d:	c7 05 9c 52 02 c0 b9 6f 01 c0 	mov    DWORD PTR ds:0xc002529c,0xc0016fb9
c0017427:	c7 05 a0 52 02 c0 f0 65 01 c0 	mov    DWORD PTR ds:0xc00252a0,0xc00165f0
c0017431:	c7 05 a4 52 02 c0 e0 6f 01 c0 	mov    DWORD PTR ds:0xc00252a4,0xc0016fe0
c001743b:	c7 05 a8 52 02 c0 25 70 01 c0 	mov    DWORD PTR ds:0xc00252a8,0xc0017025
c0017445:	c7 05 ac 52 02 c0 bd 62 01 c0 	mov    DWORD PTR ds:0xc00252ac,0xc00162bd
c001744f:	c3                   	ret    

c0017450 <systemCall(regs*, void*)>:
c0017450:	53                   	push   ebx
c0017451:	83 ec 08             	sub    esp,0x8
c0017454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017458:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001745b:	83 f8 7f             	cmp    eax,0x7f
c001745e:	77 16                	ja     c0017476 <systemCall(regs*, void*)+0x26>
c0017460:	8b 14 85 00 52 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdae00]
c0017467:	85 d2                	test   edx,edx
c0017469:	74 0b                	je     c0017476 <systemCall(regs*, void*)+0x26>
c001746b:	83 ec 0c             	sub    esp,0xc
c001746e:	53                   	push   ebx
c001746f:	ff d2                	call   edx
c0017471:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017474:	eb 0d                	jmp    c0017483 <systemCall(regs*, void*)+0x33>
c0017476:	52                   	push   edx
c0017477:	52                   	push   edx
c0017478:	50                   	push   eax
c0017479:	68 32 2c 02 c0       	push   0xc0022c32
c001747e:	e8 8e 7d ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0017483:	83 c4 10             	add    esp,0x10
c0017486:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001748b:	83 c4 08             	add    esp,0x8
c001748e:	31 d2                	xor    edx,edx
c0017490:	5b                   	pop    ebx
c0017491:	c3                   	ret    

c0017492 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0017492:	55                   	push   ebp
c0017493:	89 e5                	mov    ebp,esp
c0017495:	57                   	push   edi
c0017496:	56                   	push   esi
c0017497:	53                   	push   ebx
c0017498:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001749e:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00174a1:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c00174a4:	f7 45 14 ff 0f 00 00 	test   DWORD PTR [ebp+0x14],0xfff
c00174ab:	74 27                	je     c00174d4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00174ad:	85 c0                	test   eax,eax
c00174af:	74 23                	je     c00174d4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00174b1:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00174b5:	75 1d                	jne    c00174d4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x42>
c00174b7:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
c00174ba:	8d 96 00 10 00 00    	lea    edx,[esi+0x1000]
c00174c0:	89 d1                	mov    ecx,edx
c00174c2:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00174c8:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00174ce:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00174d1:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
c00174d4:	83 ec 0c             	sub    esp,0xc
c00174d7:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c00174da:	05 ff 0f 00 00       	add    eax,0xfff
c00174df:	8d 99 ff 0f 00 00    	lea    ebx,[ecx+0xfff]
c00174e5:	6a 01                	push   0x1
c00174e7:	89 85 d4 ef ff ff    	mov    DWORD PTR [ebp-0x102c],eax
c00174ed:	e8 04 6d ff ff       	call   c000e1f6 <Virt::allocateKernelVirtualPages(int)>
c00174f2:	83 c4 10             	add    esp,0x10
c00174f5:	89 c6                	mov    esi,eax
c00174f7:	81 fb ff 0f 00 00    	cmp    ebx,0xfff
c00174fd:	0f 86 21 01 00 00    	jbe    c0017624 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x192>
c0017503:	c1 eb 0c             	shr    ebx,0xc
c0017506:	c7 85 d0 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x1030],0x0
c0017510:	89 9d cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],ebx
c0017516:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0017519:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001751c:	8b 95 cc ef ff ff    	mov    edx,DWORD PTR [ebp-0x1034]
c0017522:	03 45 14             	add    eax,DWORD PTR [ebp+0x14]
c0017525:	29 d8                	sub    eax,ebx
c0017527:	39 95 d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],edx
c001752d:	0f 83 f4 00 00 00    	jae    c0017627 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x195>
c0017533:	83 ec 0c             	sub    esp,0xc
c0017536:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0017539:	8d 95 e4 ef ff ff    	lea    edx,[ebp-0x101c]
c001753f:	3d 00 10 00 00       	cmp    eax,0x1000
c0017544:	8b 09                	mov    ecx,DWORD PTR [ecx]
c0017546:	52                   	push   edx
c0017547:	8d 95 e8 ef ff ff    	lea    edx,[ebp-0x1018]
c001754d:	52                   	push   edx
c001754e:	76 05                	jbe    c0017555 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0017550:	b8 00 10 00 00       	mov    eax,0x1000
c0017555:	31 d2                	xor    edx,edx
c0017557:	52                   	push   edx
c0017558:	50                   	push   eax
c0017559:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001755c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001755f:	83 c4 20             	add    esp,0x20
c0017562:	85 c0                	test   eax,eax
c0017564:	74 1f                	je     c0017585 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf3>
c0017566:	51                   	push   ecx
c0017567:	51                   	push   ecx
c0017568:	50                   	push   eax
c0017569:	68 46 2c 02 c0       	push   0xc0022c46
c001756e:	e8 9e 7c ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0017573:	89 34 24             	mov    DWORD PTR [esp],esi
c0017576:	e8 c8 6f ff ff       	call   c000e543 <Virt::freeKernelVirtualPages(unsigned long)>
c001757b:	83 c4 10             	add    esp,0x10
c001757e:	31 c0                	xor    eax,eax
c0017580:	e9 7c 01 00 00       	jmp    c0017701 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x26f>
c0017585:	e8 bf 14 00 00       	call   c0018a49 <lockScheduler()>
c001758a:	e8 26 50 ff ff       	call   c000c5b5 <Phys::allocatePage()>
c001758f:	6a 07                	push   0x7
c0017591:	56                   	push   esi
c0017592:	89 85 c8 ef ff ff    	mov    DWORD PTR [ebp-0x1038],eax
c0017598:	50                   	push   eax
c0017599:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001759f:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00175a2:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00175a8:	e8 15 73 ff ff       	call   c000e8c2 <VAS::mapPage(unsigned long, unsigned long, int)>
c00175ad:	83 c4 0c             	add    esp,0xc
c00175b0:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00175b6:	6a 00                	push   0x0
c00175b8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00175be:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c00175c1:	ff b2 32 05 00 00    	push   DWORD PTR [edx+0x532]
c00175c7:	e8 54 71 ff ff       	call   c000e720 <VAS::mapOtherVASIn(bool, VAS*)>
c00175cc:	58                   	pop    eax
c00175cd:	8b 85 c8 ef ff ff    	mov    eax,DWORD PTR [ebp-0x1038]
c00175d3:	5a                   	pop    edx
c00175d4:	68 07 04 00 00       	push   0x407
c00175d9:	53                   	push   ebx
c00175da:	81 c3 00 10 00 00    	add    ebx,0x1000
c00175e0:	50                   	push   eax
c00175e1:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00175e7:	6a 00                	push   0x0
c00175e9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175ee:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00175f1:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00175f7:	e8 82 76 ff ff       	call   c000ec7e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00175fc:	83 c4 1c             	add    esp,0x1c
c00175ff:	8d 85 e8 ef ff ff    	lea    eax,[ebp-0x1018]
c0017605:	68 00 10 00 00       	push   0x1000
c001760a:	50                   	push   eax
c001760b:	56                   	push   esi
c001760c:	e8 7a 90 fe ff       	call   c000068b <memcpy>
c0017611:	e8 35 14 00 00       	call   c0018a4b <unlockScheduler()>
c0017616:	ff 85 d0 ef ff ff    	inc    DWORD PTR [ebp-0x1030]
c001761c:	83 c4 10             	add    esp,0x10
c001761f:	e9 f5 fe ff ff       	jmp    c0017519 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x87>
c0017624:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0017627:	81 bd d4 ef ff ff ff 0f 00 00 	cmp    DWORD PTR [ebp-0x102c],0xfff
c0017631:	0f 86 bc 00 00 00    	jbe    c00176f3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x261>
c0017637:	e8 0d 14 00 00       	call   c0018a49 <lockScheduler()>
c001763c:	51                   	push   ecx
c001763d:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c0017643:	6a 00                	push   0x0
c0017645:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001764a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001764d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0017653:	e8 c8 70 ff ff       	call   c000e720 <VAS::mapOtherVASIn(bool, VAS*)>
c0017658:	8b 85 d4 ef ff ff    	mov    eax,DWORD PTR [ebp-0x102c]
c001765e:	c1 e8 0c             	shr    eax,0xc
c0017661:	83 c4 10             	add    esp,0x10
c0017664:	89 85 d0 ef ff ff    	mov    DWORD PTR [ebp-0x1030],eax
c001766a:	c7 85 d4 ef ff ff 00 00 00 00 	mov    DWORD PTR [ebp-0x102c],0x0
c0017674:	e8 3c 4f ff ff       	call   c000c5b5 <Phys::allocatePage()>
c0017679:	6a 07                	push   0x7
c001767b:	56                   	push   esi
c001767c:	89 85 cc ef ff ff    	mov    DWORD PTR [ebp-0x1034],eax
c0017682:	50                   	push   eax
c0017683:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017689:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001768c:	ff b1 32 05 00 00    	push   DWORD PTR [ecx+0x532]
c0017692:	e8 2b 72 ff ff       	call   c000e8c2 <VAS::mapPage(unsigned long, unsigned long, int)>
c0017697:	58                   	pop    eax
c0017698:	8b 85 cc ef ff ff    	mov    eax,DWORD PTR [ebp-0x1034]
c001769e:	5a                   	pop    edx
c001769f:	68 07 04 00 00       	push   0x407
c00176a4:	53                   	push   ebx
c00176a5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00176ab:	50                   	push   eax
c00176ac:	ff b7 32 05 00 00    	push   DWORD PTR [edi+0x532]
c00176b2:	6a 00                	push   0x0
c00176b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00176b9:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00176bc:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c00176c2:	e8 b7 75 ff ff       	call   c000ec7e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00176c7:	83 c4 1c             	add    esp,0x1c
c00176ca:	68 00 10 00 00       	push   0x1000
c00176cf:	6a 00                	push   0x0
c00176d1:	56                   	push   esi
c00176d2:	e8 ea 8f fe ff       	call   c00006c1 <memset>
c00176d7:	ff 85 d4 ef ff ff    	inc    DWORD PTR [ebp-0x102c]
c00176dd:	83 c4 10             	add    esp,0x10
c00176e0:	8b 8d d4 ef ff ff    	mov    ecx,DWORD PTR [ebp-0x102c]
c00176e6:	39 8d d0 ef ff ff    	cmp    DWORD PTR [ebp-0x1030],ecx
c00176ec:	77 86                	ja     c0017674 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1e2>
c00176ee:	e8 58 13 00 00       	call   c0018a4b <unlockScheduler()>
c00176f3:	83 ec 0c             	sub    esp,0xc
c00176f6:	56                   	push   esi
c00176f7:	e8 47 6e ff ff       	call   c000e543 <Virt::freeKernelVirtualPages(unsigned long)>
c00176fc:	83 c4 10             	add    esp,0x10
c00176ff:	b0 01                	mov    al,0x1
c0017701:	8d 65 f4             	lea    esp,[ebp-0xc]
c0017704:	5b                   	pop    ebx
c0017705:	5e                   	pop    esi
c0017706:	5f                   	pop    edi
c0017707:	5d                   	pop    ebp
c0017708:	c3                   	ret    

c0017709 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0017709:	55                   	push   ebp
c001770a:	57                   	push   edi
c001770b:	56                   	push   esi
c001770c:	53                   	push   ebx
c001770d:	83 ec 48             	sub    esp,0x48
c0017710:	68 14 01 00 00       	push   0x114
c0017715:	e8 c2 79 ff ff       	call   c000f0dc <operator new(unsigned long)>
c001771a:	83 c4 0c             	add    esp,0xc
c001771d:	89 c6                	mov    esi,eax
c001771f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017723:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0017727:	50                   	push   eax
c0017728:	e8 1b 80 ff ff       	call   c000f748 <File::File(char const*, Process*)>
c001772d:	58                   	pop    eax
c001772e:	5a                   	pop    edx
c001772f:	6a 01                	push   0x1
c0017731:	56                   	push   esi
c0017732:	e8 75 80 ff ff       	call   c000f7ac <File::open(FileOpenMode)>
c0017737:	83 c4 10             	add    esp,0x10
c001773a:	85 c0                	test   eax,eax
c001773c:	0f 85 47 01 00 00    	jne    c0017889 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017742:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001774a:	83 ec 0c             	sub    esp,0xc
c001774d:	6a 34                	push   0x34
c001774f:	e8 8b 48 ff ff       	call   c000bfdf <malloc>
c0017754:	89 c3                	mov    ebx,eax
c0017756:	58                   	pop    eax
c0017757:	8b 06                	mov    eax,DWORD PTR [esi]
c0017759:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001775d:	57                   	push   edi
c001775e:	53                   	push   ebx
c001775f:	6a 00                	push   0x0
c0017761:	6a 34                	push   0x34
c0017763:	56                   	push   esi
c0017764:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017767:	83 c4 20             	add    esp,0x20
c001776a:	85 c0                	test   eax,eax
c001776c:	0f 85 17 01 00 00    	jne    c0017889 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017772:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0017778:	0f 85 0b 01 00 00    	jne    c0017889 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001777e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0017781:	85 c0                	test   eax,eax
c0017783:	0f 84 00 01 00 00    	je     c0017889 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0017789:	31 d2                	xor    edx,edx
c001778b:	55                   	push   ebp
c001778c:	52                   	push   edx
c001778d:	50                   	push   eax
c001778e:	56                   	push   esi
c001778f:	e8 d6 80 ff ff       	call   c000f86a <File::seek(unsigned long long)>
c0017794:	83 c4 10             	add    esp,0x10
c0017797:	85 c0                	test   eax,eax
c0017799:	0f 85 ea 00 00 00    	jne    c0017889 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001779f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00177a2:	83 ec 0c             	sub    esp,0xc
c00177a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00177a9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00177ad:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00177b1:	0f af c2             	imul   eax,edx
c00177b4:	50                   	push   eax
c00177b5:	e8 25 48 ff ff       	call   c000bfdf <malloc>
c00177ba:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00177be:	89 3c 24             	mov    DWORD PTR [esp],edi
c00177c1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00177c5:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00177c9:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00177cd:	0f af c2             	imul   eax,edx
c00177d0:	99                   	cdq    
c00177d1:	52                   	push   edx
c00177d2:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00177d4:	50                   	push   eax
c00177d5:	56                   	push   esi
c00177d6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00177d9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00177dc:	83 c4 20             	add    esp,0x20
c00177df:	85 c0                	test   eax,eax
c00177e1:	0f 84 a2 00 00 00    	je     c0017889 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00177e7:	31 d2                	xor    edx,edx
c00177e9:	51                   	push   ecx
c00177ea:	52                   	push   edx
c00177eb:	50                   	push   eax
c00177ec:	56                   	push   esi
c00177ed:	e8 78 80 ff ff       	call   c000f86a <File::seek(unsigned long long)>
c00177f2:	83 c4 10             	add    esp,0x10
c00177f5:	85 c0                	test   eax,eax
c00177f7:	0f 85 8c 00 00 00    	jne    c0017889 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c00177fd:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017801:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017805:	0f af c2             	imul   eax,edx
c0017808:	83 ec 0c             	sub    esp,0xc
c001780b:	31 ed                	xor    ebp,ebp
c001780d:	50                   	push   eax
c001780e:	e8 cc 47 ff ff       	call   c000bfdf <malloc>
c0017813:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017817:	89 3c 24             	mov    DWORD PTR [esp],edi
c001781a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001781e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0017822:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0017826:	0f af c2             	imul   eax,edx
c0017829:	99                   	cdq    
c001782a:	52                   	push   edx
c001782b:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001782d:	50                   	push   eax
c001782e:	56                   	push   esi
c001782f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017832:	83 c4 20             	add    esp,0x20
c0017835:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001783d:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0017841:	0f 86 80 00 00 00    	jbe    c00178c7 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0017847:	0f b7 fd             	movzx  edi,bp
c001784a:	c1 e7 05             	shl    edi,0x5
c001784d:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0017851:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0017854:	75 6b                	jne    c00178c1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0017856:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0017859:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001785d:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0017860:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017864:	52                   	push   edx
c0017865:	31 d2                	xor    edx,edx
c0017867:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001786a:	52                   	push   edx
c001786b:	50                   	push   eax
c001786c:	56                   	push   esi
c001786d:	e8 f8 7f ff ff       	call   c000f86a <File::seek(unsigned long long)>
c0017872:	83 c4 10             	add    esp,0x10
c0017875:	85 c0                	test   eax,eax
c0017877:	74 17                	je     c0017890 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0017879:	83 ec 0c             	sub    esp,0xc
c001787c:	68 71 2c 02 c0       	push   0xc0022c71
c0017881:	e8 8b 79 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0017886:	83 c4 10             	add    esp,0x10
c0017889:	31 c0                	xor    eax,eax
c001788b:	e9 87 00 00 00       	jmp    c0017917 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0017890:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0017893:	83 ec 0c             	sub    esp,0xc
c0017896:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0017899:	50                   	push   eax
c001789a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001789e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178a2:	56                   	push   esi
c00178a3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c00178a7:	e8 e6 fb ff ff       	call   c0017492 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c00178ac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178b0:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c00178b4:	83 c4 20             	add    esp,0x20
c00178b7:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00178bb:	73 04                	jae    c00178c1 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c00178bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00178c1:	45                   	inc    ebp
c00178c2:	e9 76 ff ff ff       	jmp    c001783d <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00178c7:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00178cb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00178cf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00178d3:	83 ec 0c             	sub    esp,0xc
c00178d6:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c00178dc:	25 00 f0 ff ff       	and    eax,0xfffff000
c00178e1:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c00178e7:	05 00 10 00 00       	add    eax,0x1000
c00178ec:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00178ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178f3:	e8 f7 46 ff ff       	call   c000bfef <free>
c00178f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00178fb:	e8 ef 46 ff ff       	call   c000bfef <free>
c0017900:	58                   	pop    eax
c0017901:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017905:	e8 e5 46 ff ff       	call   c000bfef <free>
c001790a:	89 34 24             	mov    DWORD PTR [esp],esi
c001790d:	e8 f8 7e ff ff       	call   c000f80a <File::close()>
c0017912:	83 c4 10             	add    esp,0x10
c0017915:	b0 01                	mov    al,0x1
c0017917:	83 c4 3c             	add    esp,0x3c
c001791a:	5b                   	pop    ebx
c001791b:	5e                   	pop    esi
c001791c:	5f                   	pop    edi
c001791d:	5d                   	pop    ebp
c001791e:	c3                   	ret    

c001791f <Thr::runtimeReferenceHelper()>:
c001791f:	83 ec 18             	sub    esp,0x18
c0017922:	68 79 2c 02 c0       	push   0xc0022c79
c0017927:	e8 e5 78 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001792c:	fa                   	cli    
c001792d:	83 c4 10             	add    esp,0x10
c0017930:	eb fe                	jmp    c0017930 <Thr::runtimeReferenceHelper()+0x11>

c0017932 <Thr::getAddressOfKernelSymbol(char const*)>:
c0017932:	57                   	push   edi
c0017933:	56                   	push   esi
c0017934:	53                   	push   ebx
c0017935:	31 db                	xor    ebx,ebx
c0017937:	39 1d a0 5b 02 c0    	cmp    DWORD PTR ds:0xc0025ba0,ebx
c001793d:	7e 3c                	jle    c001797b <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001793f:	8b 34 9d 20 5b 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffda4e0]
c0017946:	31 ff                	xor    edi,edi
c0017948:	39 3c 9d 20 5a 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffda5e0],edi
c001794f:	7e 27                	jle    c0017978 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0017951:	50                   	push   eax
c0017952:	50                   	push   eax
c0017953:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017957:	8b 06                	mov    eax,DWORD PTR [esi]
c0017959:	03 04 9d a0 5a 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffda560]
c0017960:	50                   	push   eax
c0017961:	e8 4b 8e fe ff       	call   c00007b1 <strcmp>
c0017966:	83 c4 10             	add    esp,0x10
c0017969:	85 c0                	test   eax,eax
c001796b:	75 05                	jne    c0017972 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001796d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0017970:	eb 0b                	jmp    c001797d <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0017972:	83 c6 10             	add    esi,0x10
c0017975:	47                   	inc    edi
c0017976:	eb d0                	jmp    c0017948 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0017978:	43                   	inc    ebx
c0017979:	eb bc                	jmp    c0017937 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001797b:	31 c0                	xor    eax,eax
c001797d:	5b                   	pop    ebx
c001797e:	5e                   	pop    esi
c001797f:	5f                   	pop    edi
c0017980:	c3                   	ret    

c0017981 <Thr::loadKernelSymbolTable(char const*)>:
c0017981:	55                   	push   ebp
c0017982:	57                   	push   edi
c0017983:	56                   	push   esi
c0017984:	53                   	push   ebx
c0017985:	83 ec 68             	sub    esp,0x68
c0017988:	8b 35 f4 5b 02 c0    	mov    esi,DWORD PTR ds:0xc0025bf4
c001798e:	68 14 01 00 00       	push   0x114
c0017993:	e8 44 77 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0017998:	83 c4 0c             	add    esp,0xc
c001799b:	89 c3                	mov    ebx,eax
c001799d:	56                   	push   esi
c001799e:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c00179a2:	50                   	push   eax
c00179a3:	e8 a0 7d ff ff       	call   c000f748 <File::File(char const*, Process*)>
c00179a8:	5e                   	pop    esi
c00179a9:	5f                   	pop    edi
c00179aa:	6a 01                	push   0x1
c00179ac:	53                   	push   ebx
c00179ad:	e8 fa 7d ff ff       	call   c000f7ac <File::open(FileOpenMode)>
c00179b2:	83 c4 10             	add    esp,0x10
c00179b5:	31 d2                	xor    edx,edx
c00179b7:	85 c0                	test   eax,eax
c00179b9:	0f 85 79 02 00 00    	jne    c0017c38 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c00179bf:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00179c7:	83 ec 0c             	sub    esp,0xc
c00179ca:	6a 34                	push   0x34
c00179cc:	e8 0e 46 ff ff       	call   c000bfdf <malloc>
c00179d1:	59                   	pop    ecx
c00179d2:	89 c7                	mov    edi,eax
c00179d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00179d6:	8d 74 24 34          	lea    esi,[esp+0x34]
c00179da:	56                   	push   esi
c00179db:	57                   	push   edi
c00179dc:	6a 00                	push   0x0
c00179de:	6a 34                	push   0x34
c00179e0:	53                   	push   ebx
c00179e1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00179e4:	83 c4 20             	add    esp,0x20
c00179e7:	85 c0                	test   eax,eax
c00179e9:	74 17                	je     c0017a02 <Thr::loadKernelSymbolTable(char const*)+0x81>
c00179eb:	83 ec 0c             	sub    esp,0xc
c00179ee:	68 9b 2c 02 c0       	push   0xc0022c9b
c00179f3:	e8 48 e0 ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c00179f8:	83 c4 10             	add    esp,0x10
c00179fb:	31 d2                	xor    edx,edx
c00179fd:	e9 36 02 00 00       	jmp    c0017c38 <Thr::loadKernelSymbolTable(char const*)+0x2b7>
c0017a02:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0017a08:	75 e1                	jne    c00179eb <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017a0a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0017a0d:	85 c0                	test   eax,eax
c0017a0f:	74 da                	je     c00179eb <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017a11:	52                   	push   edx
c0017a12:	31 d2                	xor    edx,edx
c0017a14:	52                   	push   edx
c0017a15:	50                   	push   eax
c0017a16:	53                   	push   ebx
c0017a17:	e8 4e 7e ff ff       	call   c000f86a <File::seek(unsigned long long)>
c0017a1c:	83 c4 10             	add    esp,0x10
c0017a1f:	85 c0                	test   eax,eax
c0017a21:	75 c8                	jne    c00179eb <Thr::loadKernelSymbolTable(char const*)+0x6a>
c0017a23:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017a27:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017a2b:	0f af c2             	imul   eax,edx
c0017a2e:	83 ec 0c             	sub    esp,0xc
c0017a31:	31 ed                	xor    ebp,ebp
c0017a33:	50                   	push   eax
c0017a34:	e8 a6 45 ff ff       	call   c000bfdf <malloc>
c0017a39:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017a3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0017a40:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017a44:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0017a48:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0017a4c:	0f af c2             	imul   eax,edx
c0017a4f:	99                   	cdq    
c0017a50:	52                   	push   edx
c0017a51:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0017a53:	50                   	push   eax
c0017a54:	53                   	push   ebx
c0017a55:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017a58:	83 c4 20             	add    esp,0x20
c0017a5b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017a63:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017a6b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017a73:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017a7b:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0017a7f:	0f 86 aa 00 00 00    	jbe    c0017b2f <Thr::loadKernelSymbolTable(char const*)+0x1ae>
c0017a85:	0f b7 f5             	movzx  esi,bp
c0017a88:	6b f6 28             	imul   esi,esi,0x28
c0017a8b:	03 74 24 10          	add    esi,DWORD PTR [esp+0x10]
c0017a8f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017a92:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a96:	50                   	push   eax
c0017a97:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0017a9b:	6b c0 28             	imul   eax,eax,0x28
c0017a9e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017aa2:	8b 16                	mov    edx,DWORD PTR [esi]
c0017aa4:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0017aa8:	89 d0                	mov    eax,edx
c0017aaa:	31 d2                	xor    edx,edx
c0017aac:	52                   	push   edx
c0017aad:	50                   	push   eax
c0017aae:	53                   	push   ebx
c0017aaf:	e8 b6 7d ff ff       	call   c000f86a <File::seek(unsigned long long)>
c0017ab4:	83 c4 0c             	add    esp,0xc
c0017ab7:	6a 20                	push   0x20
c0017ab9:	6a 00                	push   0x0
c0017abb:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017abf:	52                   	push   edx
c0017ac0:	e8 fc 8b fe ff       	call   c00006c1 <memset>
c0017ac5:	58                   	pop    eax
c0017ac6:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017ac8:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0017acc:	51                   	push   ecx
c0017acd:	8d 54 24 40          	lea    edx,[esp+0x40]
c0017ad1:	52                   	push   edx
c0017ad2:	6a 00                	push   0x0
c0017ad4:	6a 1f                	push   0x1f
c0017ad6:	53                   	push   ebx
c0017ad7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ada:	83 c4 18             	add    esp,0x18
c0017add:	68 b2 2c 02 c0       	push   0xc0022cb2
c0017ae2:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0017ae6:	52                   	push   edx
c0017ae7:	e8 c5 8c fe ff       	call   c00007b1 <strcmp>
c0017aec:	83 c4 10             	add    esp,0x10
c0017aef:	85 c0                	test   eax,eax
c0017af1:	75 0f                	jne    c0017b02 <Thr::loadKernelSymbolTable(char const*)+0x181>
c0017af3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017af6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017afa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017afe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017b02:	50                   	push   eax
c0017b03:	50                   	push   eax
c0017b04:	68 ba 2c 02 c0       	push   0xc0022cba
c0017b09:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017b0d:	50                   	push   eax
c0017b0e:	e8 9e 8c fe ff       	call   c00007b1 <strcmp>
c0017b13:	83 c4 10             	add    esp,0x10
c0017b16:	85 c0                	test   eax,eax
c0017b18:	75 0f                	jne    c0017b29 <Thr::loadKernelSymbolTable(char const*)+0x1a8>
c0017b1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017b1d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b25:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b29:	45                   	inc    ebp
c0017b2a:	e9 4c ff ff ff       	jmp    c0017a7b <Thr::loadKernelSymbolTable(char const*)+0xfa>
c0017b2f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0017b34:	75 10                	jne    c0017b46 <Thr::loadKernelSymbolTable(char const*)+0x1c5>
c0017b36:	83 ec 0c             	sub    esp,0xc
c0017b39:	68 c2 2c 02 c0       	push   0xc0022cc2
c0017b3e:	e8 fd de ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c0017b43:	83 c4 10             	add    esp,0x10
c0017b46:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017b4b:	75 10                	jne    c0017b5d <Thr::loadKernelSymbolTable(char const*)+0x1dc>
c0017b4d:	83 ec 0c             	sub    esp,0xc
c0017b50:	68 c2 2c 02 c0       	push   0xc0022cc2
c0017b55:	e8 e6 de ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c0017b5a:	83 c4 10             	add    esp,0x10
c0017b5d:	31 d2                	xor    edx,edx
c0017b5f:	50                   	push   eax
c0017b60:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b64:	52                   	push   edx
c0017b65:	50                   	push   eax
c0017b66:	53                   	push   ebx
c0017b67:	e8 fe 7c ff ff       	call   c000f86a <File::seek(unsigned long long)>
c0017b6c:	5a                   	pop    edx
c0017b6d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017b71:	e8 69 44 ff ff       	call   c000bfdf <malloc>
c0017b76:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0017b7e:	89 c1                	mov    ecx,eax
c0017b80:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b84:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b88:	5e                   	pop    esi
c0017b89:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017b8b:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0017b8f:	55                   	push   ebp
c0017b90:	51                   	push   ecx
c0017b91:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0017b95:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017b99:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017b9d:	53                   	push   ebx
c0017b9e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ba1:	83 c4 14             	add    esp,0x14
c0017ba4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017ba8:	e8 32 44 ff ff       	call   c000bfdf <malloc>
c0017bad:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017bb0:	89 c6                	mov    esi,eax
c0017bb2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017bb4:	56                   	push   esi
c0017bb5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017bb9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017bbd:	53                   	push   ebx
c0017bbe:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017bc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017bc5:	8b 15 a0 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025ba0
c0017bcb:	c1 e8 04             	shr    eax,0x4
c0017bce:	83 c4 1c             	add    esp,0x1c
c0017bd1:	89 04 95 20 5a 02 c0 	mov    DWORD PTR [edx*4-0x3ffda5e0],eax
c0017bd8:	31 d2                	xor    edx,edx
c0017bda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017bde:	52                   	push   edx
c0017bdf:	50                   	push   eax
c0017be0:	53                   	push   ebx
c0017be1:	e8 84 7c ff ff       	call   c000f86a <File::seek(unsigned long long)>
c0017be6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017be9:	31 d2                	xor    edx,edx
c0017beb:	56                   	push   esi
c0017bec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bf0:	52                   	push   edx
c0017bf1:	50                   	push   eax
c0017bf2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017bf4:	53                   	push   ebx
c0017bf5:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017bf8:	83 c4 14             	add    esp,0x14
c0017bfb:	53                   	push   ebx
c0017bfc:	e8 09 7c ff ff       	call   c000f80a <File::close()>
c0017c01:	5d                   	pop    ebp
c0017c02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c06:	e8 e4 43 ff ff       	call   c000bfef <free>
c0017c0b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017c0e:	e8 dc 43 ff ff       	call   c000bfef <free>
c0017c13:	a1 a0 5b 02 c0       	mov    eax,ds:0xc0025ba0
c0017c18:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017c1c:	8d 50 01             	lea    edx,[eax+0x1]
c0017c1f:	89 15 a0 5b 02 c0    	mov    DWORD PTR ds:0xc0025ba0,edx
c0017c25:	89 0c 85 20 5b 02 c0 	mov    DWORD PTR [eax*4-0x3ffda4e0],ecx
c0017c2c:	89 34 85 a0 5a 02 c0 	mov    DWORD PTR [eax*4-0x3ffda560],esi
c0017c33:	83 c4 10             	add    esp,0x10
c0017c36:	b2 01                	mov    dl,0x1
c0017c38:	83 c4 5c             	add    esp,0x5c
c0017c3b:	88 d0                	mov    al,dl
c0017c3d:	5b                   	pop    ebx
c0017c3e:	5e                   	pop    esi
c0017c3f:	5f                   	pop    edi
c0017c40:	5d                   	pop    ebp
c0017c41:	c3                   	ret    

c0017c42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0017c42:	55                   	push   ebp
c0017c43:	57                   	push   edi
c0017c44:	56                   	push   esi
c0017c45:	53                   	push   ebx
c0017c46:	81 ec 68 03 00 00    	sub    esp,0x368
c0017c4c:	8b 1d f4 5b 02 c0    	mov    ebx,DWORD PTR ds:0xc0025bf4
c0017c52:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0017c59:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0017c5d:	68 14 01 00 00       	push   0x114
c0017c62:	e8 75 74 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0017c67:	83 c4 0c             	add    esp,0xc
c0017c6a:	53                   	push   ebx
c0017c6b:	89 c7                	mov    edi,eax
c0017c6d:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0017c74:	50                   	push   eax
c0017c75:	e8 ce 7a ff ff       	call   c000f748 <File::File(char const*, Process*)>
c0017c7a:	5e                   	pop    esi
c0017c7b:	5d                   	pop    ebp
c0017c7c:	6a 01                	push   0x1
c0017c7e:	57                   	push   edi
c0017c7f:	e8 28 7b ff ff       	call   c000f7ac <File::open(FileOpenMode)>
c0017c84:	83 c4 10             	add    esp,0x10
c0017c87:	85 c0                	test   eax,eax
c0017c89:	0f 85 10 07 00 00    	jne    c001839f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017c8f:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017c97:	83 ec 0c             	sub    esp,0xc
c0017c9a:	6a 34                	push   0x34
c0017c9c:	e8 3e 43 ff ff       	call   c000bfdf <malloc>
c0017ca1:	5b                   	pop    ebx
c0017ca2:	89 c5                	mov    ebp,eax
c0017ca4:	8b 07                	mov    eax,DWORD PTR [edi]
c0017ca6:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017caa:	53                   	push   ebx
c0017cab:	55                   	push   ebp
c0017cac:	6a 00                	push   0x0
c0017cae:	6a 34                	push   0x34
c0017cb0:	57                   	push   edi
c0017cb1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017cb4:	83 c4 20             	add    esp,0x20
c0017cb7:	85 c0                	test   eax,eax
c0017cb9:	0f 85 e0 06 00 00    	jne    c001839f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017cbf:	81 7d 00 7f 45 4c 46 	cmp    DWORD PTR [ebp+0x0],0x464c457f
c0017cc6:	0f 85 d3 06 00 00    	jne    c001839f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017ccc:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0017ccf:	85 c0                	test   eax,eax
c0017cd1:	0f 84 c8 06 00 00    	je     c001839f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017cd7:	31 d2                	xor    edx,edx
c0017cd9:	51                   	push   ecx
c0017cda:	52                   	push   edx
c0017cdb:	50                   	push   eax
c0017cdc:	57                   	push   edi
c0017cdd:	e8 88 7b ff ff       	call   c000f86a <File::seek(unsigned long long)>
c0017ce2:	83 c4 10             	add    esp,0x10
c0017ce5:	85 c0                	test   eax,eax
c0017ce7:	0f 85 b2 06 00 00    	jne    c001839f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017ced:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0017cf0:	83 ec 0c             	sub    esp,0xc
c0017cf3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017cf7:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017cfb:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017cff:	0f af c2             	imul   eax,edx
c0017d02:	50                   	push   eax
c0017d03:	e8 d7 42 ff ff       	call   c000bfdf <malloc>
c0017d08:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017d0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017d0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017d13:	0f b7 55 2e          	movzx  edx,WORD PTR [ebp+0x2e]
c0017d17:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0017d1b:	0f af c2             	imul   eax,edx
c0017d1e:	99                   	cdq    
c0017d1f:	52                   	push   edx
c0017d20:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017d22:	50                   	push   eax
c0017d23:	57                   	push   edi
c0017d24:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017d27:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
c0017d2a:	83 c4 20             	add    esp,0x20
c0017d2d:	85 c0                	test   eax,eax
c0017d2f:	0f 84 6a 06 00 00    	je     c001839f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017d35:	52                   	push   edx
c0017d36:	31 d2                	xor    edx,edx
c0017d38:	52                   	push   edx
c0017d39:	50                   	push   eax
c0017d3a:	57                   	push   edi
c0017d3b:	e8 2a 7b ff ff       	call   c000f86a <File::seek(unsigned long long)>
c0017d40:	83 c4 10             	add    esp,0x10
c0017d43:	85 c0                	test   eax,eax
c0017d45:	0f 85 54 06 00 00    	jne    c001839f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017d4b:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017d4f:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017d53:	0f af c2             	imul   eax,edx
c0017d56:	83 ec 0c             	sub    esp,0xc
c0017d59:	31 f6                	xor    esi,esi
c0017d5b:	50                   	push   eax
c0017d5c:	e8 7e 42 ff ff       	call   c000bfdf <malloc>
c0017d61:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017d65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0017d68:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017d6c:	0f b7 55 2a          	movzx  edx,WORD PTR [ebp+0x2a]
c0017d70:	0f b7 45 2c          	movzx  eax,WORD PTR [ebp+0x2c]
c0017d74:	0f af c2             	imul   eax,edx
c0017d77:	99                   	cdq    
c0017d78:	52                   	push   edx
c0017d79:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017d7b:	50                   	push   eax
c0017d7c:	57                   	push   edi
c0017d7d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017d80:	83 c4 20             	add    esp,0x20
c0017d83:	66 39 75 2c          	cmp    WORD PTR [ebp+0x2c],si
c0017d87:	0f 86 af 00 00 00    	jbe    c0017e3c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1fa>
c0017d8d:	0f b7 de             	movzx  ebx,si
c0017d90:	c1 e3 05             	shl    ebx,0x5
c0017d93:	03 5c 24 1c          	add    ebx,DWORD PTR [esp+0x1c]
c0017d97:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0017d9a:	0f 85 96 00 00 00    	jne    c0017e36 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1f4>
c0017da0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017da3:	31 d2                	xor    edx,edx
c0017da5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017da9:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017dac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017db0:	50                   	push   eax
c0017db1:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0017db4:	52                   	push   edx
c0017db5:	50                   	push   eax
c0017db6:	57                   	push   edi
c0017db7:	e8 ae 7a ff ff       	call   c000f86a <File::seek(unsigned long long)>
c0017dbc:	83 c4 10             	add    esp,0x10
c0017dbf:	85 c0                	test   eax,eax
c0017dc1:	0f 85 d8 05 00 00    	jne    c001839f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c0017dc7:	52                   	push   edx
c0017dc8:	52                   	push   edx
c0017dc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017dcd:	68 dc 2c 02 c0       	push   0xc0022cdc
c0017dd2:	e8 3a 74 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0017dd7:	8b 84 24 84 03 00 00 	mov    eax,DWORD PTR [esp+0x384]
c0017dde:	31 d2                	xor    edx,edx
c0017de0:	2b 44 24 3c          	sub    eax,DWORD PTR [esp+0x3c]
c0017de4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0017de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017dec:	59                   	pop    ecx
c0017ded:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017def:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017df6:	50                   	push   eax
c0017df7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017dfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017dff:	52                   	push   edx
c0017e00:	50                   	push   eax
c0017e01:	57                   	push   edi
c0017e02:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0017e05:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017e08:	83 c4 18             	add    esp,0x18
c0017e0b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017e0e:	50                   	push   eax
c0017e0f:	68 00 2d 02 c0       	push   0xc0022d00
c0017e14:	e8 f8 73 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0017e19:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017e1c:	83 c4 0c             	add    esp,0xc
c0017e1f:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0017e22:	50                   	push   eax
c0017e23:	6a 00                	push   0x0
c0017e25:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e29:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0017e2d:	50                   	push   eax
c0017e2e:	e8 8e 88 fe ff       	call   c00006c1 <memset>
c0017e33:	83 c4 10             	add    esp,0x10
c0017e36:	46                   	inc    esi
c0017e37:	e9 47 ff ff ff       	jmp    c0017d83 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x141>
c0017e3c:	50                   	push   eax
c0017e3d:	31 db                	xor    ebx,ebx
c0017e3f:	68 00 01 00 00       	push   0x100
c0017e44:	6a 00                	push   0x0
c0017e46:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0017e4a:	50                   	push   eax
c0017e4b:	e8 71 88 fe ff       	call   c00006c1 <memset>
c0017e50:	83 c4 0c             	add    esp,0xc
c0017e53:	68 00 01 00 00       	push   0x100
c0017e58:	6a 00                	push   0x0
c0017e5a:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0017e61:	50                   	push   eax
c0017e62:	e8 5a 88 fe ff       	call   c00006c1 <memset>
c0017e67:	83 c4 10             	add    esp,0x10
c0017e6a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0017e72:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017e7a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0017e82:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0017e8a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017e92:	66 39 5d 30          	cmp    WORD PTR [ebp+0x30],bx
c0017e96:	0f 86 2f 01 00 00    	jbe    c0017fcb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x389>
c0017e9c:	0f b7 f3             	movzx  esi,bx
c0017e9f:	6b f6 28             	imul   esi,esi,0x28
c0017ea2:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0017ea6:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017ea9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ead:	50                   	push   eax
c0017eae:	0f b7 55 32          	movzx  edx,WORD PTR [ebp+0x32]
c0017eb2:	6b d2 28             	imul   edx,edx,0x28
c0017eb5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017eb9:	8b 06                	mov    eax,DWORD PTR [esi]
c0017ebb:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0017ebf:	31 d2                	xor    edx,edx
c0017ec1:	52                   	push   edx
c0017ec2:	50                   	push   eax
c0017ec3:	57                   	push   edi
c0017ec4:	e8 a1 79 ff ff       	call   c000f86a <File::seek(unsigned long long)>
c0017ec9:	83 c4 0c             	add    esp,0xc
c0017ecc:	6a 20                	push   0x20
c0017ece:	6a 00                	push   0x0
c0017ed0:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017ed7:	51                   	push   ecx
c0017ed8:	e8 e4 87 fe ff       	call   c00006c1 <memset>
c0017edd:	58                   	pop    eax
c0017ede:	8b 07                	mov    eax,DWORD PTR [edi]
c0017ee0:	8d 54 24 58          	lea    edx,[esp+0x58]
c0017ee4:	52                   	push   edx
c0017ee5:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0017eec:	51                   	push   ecx
c0017eed:	6a 00                	push   0x0
c0017eef:	6a 1f                	push   0x1f
c0017ef1:	57                   	push   edi
c0017ef2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0017ef5:	83 c4 1c             	add    esp,0x1c
c0017ef8:	6a 09                	push   0x9
c0017efa:	68 1d 2d 02 c0       	push   0xc0022d1d
c0017eff:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0017f06:	51                   	push   ecx
c0017f07:	e8 1c 87 fe ff       	call   c0000628 <memcmp>
c0017f0c:	83 c4 10             	add    esp,0x10
c0017f0f:	85 c0                	test   eax,eax
c0017f11:	75 21                	jne    c0017f34 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2f2>
c0017f13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f17:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017f1b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f1f:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017f23:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017f26:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017f2d:	89 c8                	mov    eax,ecx
c0017f2f:	40                   	inc    eax
c0017f30:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f34:	50                   	push   eax
c0017f35:	6a 09                	push   0x9
c0017f37:	68 27 2d 02 c0       	push   0xc0022d27
c0017f3c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f43:	50                   	push   eax
c0017f44:	e8 df 86 fe ff       	call   c0000628 <memcmp>
c0017f49:	83 c4 10             	add    esp,0x10
c0017f4c:	85 c0                	test   eax,eax
c0017f4e:	75 21                	jne    c0017f71 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x32f>
c0017f50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017f54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017f58:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017f5c:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0017f60:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017f63:	89 84 8c 50 01 00 00 	mov    DWORD PTR [esp+ecx*4+0x150],eax
c0017f6a:	89 c8                	mov    eax,ecx
c0017f6c:	40                   	inc    eax
c0017f6d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017f71:	50                   	push   eax
c0017f72:	50                   	push   eax
c0017f73:	68 b2 2c 02 c0       	push   0xc0022cb2
c0017f78:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017f7f:	50                   	push   eax
c0017f80:	e8 2c 88 fe ff       	call   c00007b1 <strcmp>
c0017f85:	83 c4 10             	add    esp,0x10
c0017f88:	85 c0                	test   eax,eax
c0017f8a:	75 0f                	jne    c0017f9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x359>
c0017f8c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017f8f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017f93:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017f97:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017f9b:	50                   	push   eax
c0017f9c:	50                   	push   eax
c0017f9d:	68 ba 2c 02 c0       	push   0xc0022cba
c0017fa2:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0017fa9:	50                   	push   eax
c0017faa:	e8 02 88 fe ff       	call   c00007b1 <strcmp>
c0017faf:	83 c4 10             	add    esp,0x10
c0017fb2:	85 c0                	test   eax,eax
c0017fb4:	75 0f                	jne    c0017fc5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x383>
c0017fb6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0017fb9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017fbd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017fc1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017fc5:	43                   	inc    ebx
c0017fc6:	e9 c7 fe ff ff       	jmp    c0017e92 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x250>
c0017fcb:	31 d2                	xor    edx,edx
c0017fcd:	50                   	push   eax
c0017fce:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017fd2:	52                   	push   edx
c0017fd3:	50                   	push   eax
c0017fd4:	57                   	push   edi
c0017fd5:	e8 90 78 ff ff       	call   c000f86a <File::seek(unsigned long long)>
c0017fda:	5a                   	pop    edx
c0017fdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017fdf:	e8 fb 3f ff ff       	call   c000bfdf <malloc>
c0017fe4:	31 d2                	xor    edx,edx
c0017fe6:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0017fea:	59                   	pop    ecx
c0017feb:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0017fed:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0017ff1:	53                   	push   ebx
c0017ff2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017ff6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ffa:	52                   	push   edx
c0017ffb:	50                   	push   eax
c0017ffc:	57                   	push   edi
c0017ffd:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0018000:	83 c4 14             	add    esp,0x14
c0018003:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018007:	e8 d3 3f ff ff       	call   c000bfdf <malloc>
c001800c:	31 d2                	xor    edx,edx
c001800e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018012:	83 c4 0c             	add    esp,0xc
c0018015:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018019:	52                   	push   edx
c001801a:	50                   	push   eax
c001801b:	57                   	push   edi
c001801c:	e8 49 78 ff ff       	call   c000f86a <File::seek(unsigned long long)>
c0018021:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018024:	31 d2                	xor    edx,edx
c0018026:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001802a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001802e:	8b 0f                	mov    ecx,DWORD PTR [edi]
c0018030:	52                   	push   edx
c0018031:	50                   	push   eax
c0018032:	57                   	push   edi
c0018033:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0018036:	83 c4 20             	add    esp,0x20
c0018039:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0018041:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018045:	39 54 24 04          	cmp    DWORD PTR [esp+0x4],edx
c0018049:	0f 84 54 03 00 00    	je     c00183a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x761>
c001804f:	8b 84 94 50 01 00 00 	mov    eax,DWORD PTR [esp+edx*4+0x150]
c0018056:	31 d2                	xor    edx,edx
c0018058:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001805c:	c1 e8 03             	shr    eax,0x3
c001805f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0018063:	50                   	push   eax
c0018064:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018068:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001806c:	52                   	push   edx
c001806d:	50                   	push   eax
c001806e:	57                   	push   edi
c001806f:	e8 f6 77 ff ff       	call   c000f86a <File::seek(unsigned long long)>
c0018074:	58                   	pop    eax
c0018075:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018079:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0018080:	e8 5a 3f ff ff       	call   c000bfdf <malloc>
c0018085:	31 d2                	xor    edx,edx
c0018087:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001808b:	58                   	pop    eax
c001808c:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001808e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0018092:	50                   	push   eax
c0018093:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0018097:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001809b:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00180a2:	52                   	push   edx
c00180a3:	50                   	push   eax
c00180a4:	57                   	push   edi
c00180a5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00180a8:	83 c4 20             	add    esp,0x20
c00180ab:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00180b3:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c00180b7:	39 4c 24 28          	cmp    DWORD PTR [esp+0x28],ecx
c00180bb:	0f 8d c6 02 00 00    	jge    c0018387 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x745>
c00180c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180c5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180c9:	31 db                	xor    ebx,ebx
c00180cb:	8b 04 d0             	mov    eax,DWORD PTR [eax+edx*8]
c00180ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00180d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00180d6:	8b 44 d0 04          	mov    eax,DWORD PTR [eax+edx*8+0x4]
c00180da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00180de:	c1 e8 08             	shr    eax,0x8
c00180e1:	89 c6                	mov    esi,eax
c00180e3:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00180e7:	c1 e6 04             	shl    esi,0x4
c00180ea:	03 74 24 38          	add    esi,DWORD PTR [esp+0x38]
c00180ee:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00180f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00180f5:	85 c0                	test   eax,eax
c00180f7:	0f 85 17 01 00 00    	jne    c0018214 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c00180fd:	83 ec 0c             	sub    esp,0xc
c0018100:	b3 01                	mov    bl,0x1
c0018102:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018106:	03 06                	add    eax,DWORD PTR [esi]
c0018108:	50                   	push   eax
c0018109:	e8 24 f8 ff ff       	call   c0017932 <Thr::getAddressOfKernelSymbol(char const*)>
c001810e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018112:	83 c4 10             	add    esp,0x10
c0018115:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001811a:	0f 85 f4 00 00 00    	jne    c0018214 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0018120:	50                   	push   eax
c0018121:	50                   	push   eax
c0018122:	68 31 2d 02 c0       	push   0xc0022d31
c0018127:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001812b:	03 06                	add    eax,DWORD PTR [esi]
c001812d:	50                   	push   eax
c001812e:	e8 7e 86 fe ff       	call   c00007b1 <strcmp>
c0018133:	83 c4 10             	add    esp,0x10
c0018136:	85 c0                	test   eax,eax
c0018138:	75 0a                	jne    c0018144 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x502>
c001813a:	b8 0c f5 01 c0       	mov    eax,0xc001f50c
c001813f:	e9 ca 00 00 00       	jmp    c001820e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0018144:	50                   	push   eax
c0018145:	50                   	push   eax
c0018146:	68 3b 2d 02 c0       	push   0xc0022d3b
c001814b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001814f:	03 06                	add    eax,DWORD PTR [esi]
c0018151:	50                   	push   eax
c0018152:	e8 5a 86 fe ff       	call   c00007b1 <strcmp>
c0018157:	83 c4 10             	add    esp,0x10
c001815a:	85 c0                	test   eax,eax
c001815c:	75 0a                	jne    c0018168 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x526>
c001815e:	b8 40 f2 01 c0       	mov    eax,0xc001f240
c0018163:	e9 a6 00 00 00       	jmp    c001820e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c0018168:	53                   	push   ebx
c0018169:	53                   	push   ebx
c001816a:	68 44 2d 02 c0       	push   0xc0022d44
c001816f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018173:	03 06                	add    eax,DWORD PTR [esi]
c0018175:	50                   	push   eax
c0018176:	e8 36 86 fe ff       	call   c00007b1 <strcmp>
c001817b:	83 c4 10             	add    esp,0x10
c001817e:	85 c0                	test   eax,eax
c0018180:	75 0a                	jne    c001818c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x54a>
c0018182:	b8 0c f6 01 c0       	mov    eax,0xc001f60c
c0018187:	e9 82 00 00 00       	jmp    c001820e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5cc>
c001818c:	51                   	push   ecx
c001818d:	51                   	push   ecx
c001818e:	68 4e 2d 02 c0       	push   0xc0022d4e
c0018193:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018197:	03 06                	add    eax,DWORD PTR [esi]
c0018199:	50                   	push   eax
c001819a:	e8 12 86 fe ff       	call   c00007b1 <strcmp>
c001819f:	83 c4 10             	add    esp,0x10
c00181a2:	85 c0                	test   eax,eax
c00181a4:	74 63                	je     c0018209 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c7>
c00181a6:	50                   	push   eax
c00181a7:	50                   	push   eax
c00181a8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00181ac:	03 06                	add    eax,DWORD PTR [esi]
c00181ae:	50                   	push   eax
c00181af:	68 57 2d 02 c0       	push   0xc0022d57
c00181b4:	e8 58 70 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c00181b9:	58                   	pop    eax
c00181ba:	5a                   	pop    edx
c00181bb:	68 71 2d 02 c0       	push   0xc0022d71
c00181c0:	8d 9c 24 5c 02 00 00 	lea    ebx,[esp+0x25c]
c00181c7:	53                   	push   ebx
c00181c8:	e8 93 85 fe ff       	call   c0000760 <strcpy>
c00181cd:	59                   	pop    ecx
c00181ce:	58                   	pop    eax
c00181cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00181d3:	03 06                	add    eax,DWORD PTR [esi]
c00181d5:	50                   	push   eax
c00181d6:	53                   	push   ebx
c00181d7:	e8 3b 86 fe ff       	call   c0000817 <strcat>
c00181dc:	58                   	pop    eax
c00181dd:	5a                   	pop    edx
c00181de:	68 07 2e 02 c0       	push   0xc0022e07
c00181e3:	53                   	push   ebx
c00181e4:	e8 2e 86 fe ff       	call   c0000817 <strcat>
c00181e9:	83 c4 10             	add    esp,0x10
c00181ec:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00181f1:	0f 84 4b 01 00 00    	je     c0018342 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00181f7:	83 ec 0c             	sub    esp,0xc
c00181fa:	53                   	push   ebx
c00181fb:	e8 40 d8 ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c0018200:	83 c4 10             	add    esp,0x10
c0018203:	8a 5c 24 27          	mov    bl,BYTE PTR [esp+0x27]
c0018207:	eb 0b                	jmp    c0018214 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d2>
c0018209:	b8 8c f3 01 c0       	mov    eax,0xc001f38c
c001820e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018212:	b3 01                	mov    bl,0x1
c0018214:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c0018219:	0f 85 80 00 00 00    	jne    c001829f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x65d>
c001821f:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0018226:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001822a:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001822e:	01 ce                	add    esi,ecx
c0018230:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0018238:	0f 94 c2             	sete   dl
c001823b:	8b 06                	mov    eax,DWORD PTR [esi]
c001823d:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0018245:	0f 94 44 24 18       	sete   BYTE PTR [esp+0x18]
c001824a:	0b 54 24 18          	or     edx,DWORD PTR [esp+0x18]
c001824e:	84 db                	test   bl,bl
c0018250:	74 31                	je     c0018283 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x641>
c0018252:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0018256:	01 c3                	add    ebx,eax
c0018258:	84 d2                	test   dl,dl
c001825a:	75 0a                	jne    c0018266 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x624>
c001825c:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c0018260:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0018264:	76 32                	jbe    c0018298 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018266:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001826b:	0f 84 d1 00 00 00    	je     c0018342 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0018271:	83 ec 0c             	sub    esp,0xc
c0018274:	68 88 2d 02 c0       	push   0xc0022d88
c0018279:	e8 c2 d7 ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c001827e:	83 c4 10             	add    esp,0x10
c0018281:	eb 15                	jmp    c0018298 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018283:	8d 1c 01             	lea    ebx,[ecx+eax*1]
c0018286:	84 d2                	test   dl,dl
c0018288:	75 0e                	jne    c0018298 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c001828a:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c001828e:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c0018292:	77 04                	ja     c0018298 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x656>
c0018294:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0018298:	89 1e                	mov    DWORD PTR [esi],ebx
c001829a:	e9 df 00 00 00       	jmp    c001837e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c001829f:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00182a4:	75 6e                	jne    c0018314 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d2>
c00182a6:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00182ad:	2b 74 24 2c          	sub    esi,DWORD PTR [esp+0x2c]
c00182b1:	03 74 24 30          	add    esi,DWORD PTR [esp+0x30]
c00182b5:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00182bd:	74 17                	je     c00182d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00182bf:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00182c7:	74 0d                	je     c00182d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x694>
c00182c9:	0f b7 45 30          	movzx  eax,WORD PTR [ebp+0x30]
c00182cd:	83 e8 04             	sub    eax,0x4
c00182d0:	3b 44 24 34          	cmp    eax,DWORD PTR [esp+0x34]
c00182d4:	76 17                	jbe    c00182ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ab>
c00182d6:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c00182db:	74 65                	je     c0018342 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c00182dd:	83 ec 0c             	sub    esp,0xc
c00182e0:	68 a4 2d 02 c0       	push   0xc0022da4
c00182e5:	e8 56 d7 ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c00182ea:	83 c4 10             	add    esp,0x10
c00182ed:	8b 16                	mov    edx,DWORD PTR [esi]
c00182ef:	84 db                	test   bl,bl
c00182f1:	74 13                	je     c0018306 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c4>
c00182f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00182f7:	2b 84 24 74 03 00 00 	sub    eax,DWORD PTR [esp+0x374]
c00182fe:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c0018302:	01 d0                	add    eax,edx
c0018304:	eb 06                	jmp    c001830c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6ca>
c0018306:	89 d0                	mov    eax,edx
c0018308:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c001830c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0018310:	89 06                	mov    DWORD PTR [esi],eax
c0018312:	eb 6a                	jmp    c001837e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0018314:	50                   	push   eax
c0018315:	50                   	push   eax
c0018316:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c001831b:	50                   	push   eax
c001831c:	68 c0 2d 02 c0       	push   0xc0022dc0
c0018321:	e8 eb 6e ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0018326:	83 c4 10             	add    esp,0x10
c0018329:	80 7c 24 27 00       	cmp    BYTE PTR [esp+0x27],0x0
c001832e:	74 12                	je     c0018342 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x700>
c0018330:	83 ec 0c             	sub    esp,0xc
c0018333:	68 cb 2d 02 c0       	push   0xc0022dcb
c0018338:	e8 03 d7 ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c001833d:	83 c4 10             	add    esp,0x10
c0018340:	eb 3c                	jmp    c001837e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x73c>
c0018342:	83 ec 0c             	sub    esp,0xc
c0018345:	57                   	push   edi
c0018346:	e8 bf 74 ff ff       	call   c000f80a <File::close()>
c001834b:	8b 07                	mov    eax,DWORD PTR [edi]
c001834d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0018350:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0018353:	59                   	pop    ecx
c0018354:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018358:	e8 92 3c ff ff       	call   c000bfef <free>
c001835d:	5b                   	pop    ebx
c001835e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018362:	e8 88 3c ff ff       	call   c000bfef <free>
c0018367:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001836a:	e8 80 3c ff ff       	call   c000bfef <free>
c001836f:	5e                   	pop    esi
c0018370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0018374:	e8 76 3c ff ff       	call   c000bfef <free>
c0018379:	83 c4 10             	add    esp,0x10
c001837c:	eb 21                	jmp    c001839f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x75d>
c001837e:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c0018382:	e9 2c fd ff ff       	jmp    c00180b3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x471>
c0018387:	83 ec 0c             	sub    esp,0xc
c001838a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001838e:	e8 5c 3c ff ff       	call   c000bfef <free>
c0018393:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
c0018397:	83 c4 10             	add    esp,0x10
c001839a:	e9 a2 fc ff ff       	jmp    c0018041 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3ff>
c001839f:	31 c0                	xor    eax,eax
c00183a1:	eb 32                	jmp    c00183d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x793>
c00183a3:	83 ec 0c             	sub    esp,0xc
c00183a6:	57                   	push   edi
c00183a7:	e8 5e 74 ff ff       	call   c000f80a <File::close()>
c00183ac:	8b 07                	mov    eax,DWORD PTR [edi]
c00183ae:	89 3c 24             	mov    DWORD PTR [esp],edi
c00183b1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00183b4:	58                   	pop    eax
c00183b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00183b9:	e8 31 3c ff ff       	call   c000bfef <free>
c00183be:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00183c1:	e8 29 3c ff ff       	call   c000bfef <free>
c00183c6:	5a                   	pop    edx
c00183c7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00183cb:	e8 1f 3c ff ff       	call   c000bfef <free>
c00183d0:	83 c4 10             	add    esp,0x10
c00183d3:	b0 01                	mov    al,0x1
c00183d5:	81 c4 5c 03 00 00    	add    esp,0x35c
c00183db:	5b                   	pop    ebx
c00183dc:	5e                   	pop    esi
c00183dd:	5f                   	pop    edi
c00183de:	5d                   	pop    ebp
c00183df:	c3                   	ret    

c00183e0 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00183e0:	56                   	push   esi
c00183e1:	31 d2                	xor    edx,edx
c00183e3:	53                   	push   ebx
c00183e4:	8b 1d 00 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025400
c00183ea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00183ee:	39 d3                	cmp    ebx,edx
c00183f0:	7e 1b                	jle    c001840d <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00183f2:	8b 04 95 20 56 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffda9e0]
c00183f9:	39 c8                	cmp    eax,ecx
c00183fb:	77 0d                	ja     c001840a <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00183fd:	8b 34 95 20 54 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdabe0]
c0018404:	01 c6                	add    esi,eax
c0018406:	39 ce                	cmp    esi,ecx
c0018408:	77 05                	ja     c001840f <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001840a:	42                   	inc    edx
c001840b:	eb e1                	jmp    c00183ee <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001840d:	31 c0                	xor    eax,eax
c001840f:	5b                   	pop    ebx
c0018410:	5e                   	pop    esi
c0018411:	c3                   	ret    

c0018412 <Thr::getDriverNameFromAddress(unsigned long)>:
c0018412:	53                   	push   ebx
c0018413:	31 c0                	xor    eax,eax
c0018415:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018419:	8b 1d 00 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025400
c001841f:	39 c3                	cmp    ebx,eax
c0018421:	7e 22                	jle    c0018445 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0018423:	8b 14 85 20 56 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda9e0]
c001842a:	39 ca                	cmp    edx,ecx
c001842c:	77 14                	ja     c0018442 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001842e:	03 14 85 20 54 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdabe0]
c0018435:	39 ca                	cmp    edx,ecx
c0018437:	76 09                	jbe    c0018442 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0018439:	8b 04 85 20 58 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda7e0]
c0018440:	eb 05                	jmp    c0018447 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0018442:	40                   	inc    eax
c0018443:	eb da                	jmp    c001841f <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0018445:	31 c0                	xor    eax,eax
c0018447:	5b                   	pop    ebx
c0018448:	c3                   	ret    

c0018449 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0018449:	53                   	push   ebx
c001844a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001844e:	53                   	push   ebx
c001844f:	e8 8c ff ff ff       	call   c00183e0 <Thr::getDriverBaseFromAddress(unsigned long)>
c0018454:	5a                   	pop    edx
c0018455:	31 d2                	xor    edx,edx
c0018457:	85 c0                	test   eax,eax
c0018459:	74 04                	je     c001845f <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001845b:	89 da                	mov    edx,ebx
c001845d:	29 c2                	sub    edx,eax
c001845f:	89 d0                	mov    eax,edx
c0018461:	5b                   	pop    ebx
c0018462:	c3                   	ret    

c0018463 <Thr::loadDLL(char const*, bool)>:
c0018463:	55                   	push   ebp
c0018464:	57                   	push   edi
c0018465:	56                   	push   esi
c0018466:	53                   	push   ebx
c0018467:	81 ec 34 01 00 00    	sub    esp,0x134
c001846d:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0018474:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001847b:	56                   	push   esi
c001847c:	68 e3 2d 02 c0       	push   0xc0022de3
c0018481:	e8 8b 6d ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0018486:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001848d:	e8 4a 6c ff ff       	call   c000f0dc <operator new(unsigned long)>
c0018492:	83 c4 0c             	add    esp,0xc
c0018495:	89 c3                	mov    ebx,eax
c0018497:	ff 35 f4 5b 02 c0    	push   DWORD PTR ds:0xc0025bf4
c001849d:	56                   	push   esi
c001849e:	50                   	push   eax
c001849f:	e8 a4 72 ff ff       	call   c000f748 <File::File(char const*, Process*)>
c00184a4:	83 c4 0c             	add    esp,0xc
c00184a7:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00184ab:	50                   	push   eax
c00184ac:	8d 44 24 20          	lea    eax,[esp+0x20]
c00184b0:	50                   	push   eax
c00184b1:	53                   	push   ebx
c00184b2:	e8 a1 75 ff ff       	call   c000fa58 <File::stat(unsigned long long*, bool*)>
c00184b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00184b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00184bc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00184bf:	83 c4 10             	add    esp,0x10
c00184c2:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c00184c7:	75 0a                	jne    c00184d3 <Thr::loadDLL(char const*, bool)+0x70>
c00184c9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184cd:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c00184d1:	75 3c                	jne    c001850f <Thr::loadDLL(char const*, bool)+0xac>
c00184d3:	89 e8                	mov    eax,ebp
c00184d5:	84 c0                	test   al,al
c00184d7:	0f 84 3d 01 00 00    	je     c001861a <Thr::loadDLL(char const*, bool)+0x1b7>
c00184dd:	50                   	push   eax
c00184de:	50                   	push   eax
c00184df:	68 f4 2d 02 c0       	push   0xc0022df4
c00184e4:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00184e8:	53                   	push   ebx
c00184e9:	e8 72 82 fe ff       	call   c0000760 <strcpy>
c00184ee:	58                   	pop    eax
c00184ef:	5a                   	pop    edx
c00184f0:	56                   	push   esi
c00184f1:	53                   	push   ebx
c00184f2:	e8 20 83 fe ff       	call   c0000817 <strcat>
c00184f7:	59                   	pop    ecx
c00184f8:	5f                   	pop    edi
c00184f9:	68 07 2e 02 c0       	push   0xc0022e07
c00184fe:	53                   	push   ebx
c00184ff:	e8 13 83 fe ff       	call   c0000817 <strcat>
c0018504:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018507:	e8 34 d5 ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c001850c:	83 c4 10             	add    esp,0x10
c001850f:	e8 6f 5e ff ff       	call   c000e383 <Virt::getAKernelVAS()>
c0018514:	51                   	push   ecx
c0018515:	6a 03                	push   0x3
c0018517:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001851b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001851f:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c0018525:	83 d3 00             	adc    ebx,0x0
c0018528:	89 ca                	mov    edx,ecx
c001852a:	89 d1                	mov    ecx,edx
c001852c:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c0018530:	51                   	push   ecx
c0018531:	50                   	push   eax
c0018532:	e8 8d 64 ff ff       	call   c000e9c4 <VAS::allocatePages(int, int)>
c0018537:	89 34 24             	mov    DWORD PTR [esp],esi
c001853a:	89 c3                	mov    ebx,eax
c001853c:	e8 9d 81 fe ff       	call   c00006de <strlen>
c0018541:	8b 3d 00 54 02 c0    	mov    edi,DWORD PTR ds:0xc0025400
c0018547:	40                   	inc    eax
c0018548:	89 04 24             	mov    DWORD PTR [esp],eax
c001854b:	e8 8f 3a ff ff       	call   c000bfdf <malloc>
c0018550:	89 04 bd 20 58 02 c0 	mov    DWORD PTR [edi*4-0x3ffda7e0],eax
c0018557:	5f                   	pop    edi
c0018558:	58                   	pop    eax
c0018559:	a1 00 54 02 c0       	mov    eax,ds:0xc0025400
c001855e:	56                   	push   esi
c001855f:	ff 34 85 20 58 02 c0 	push   DWORD PTR [eax*4-0x3ffda7e0]
c0018566:	e8 f5 81 fe ff       	call   c0000760 <strcpy>
c001856b:	a1 00 54 02 c0       	mov    eax,ds:0xc0025400
c0018570:	8d 50 01             	lea    edx,[eax+0x1]
c0018573:	89 1c 85 20 56 02 c0 	mov    DWORD PTR [eax*4-0x3ffda9e0],ebx
c001857a:	89 15 00 54 02 c0    	mov    DWORD PTR ds:0xc0025400,edx
c0018580:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018584:	83 c4 0c             	add    esp,0xc
c0018587:	89 14 85 20 54 02 c0 	mov    DWORD PTR [eax*4-0x3ffdabe0],edx
c001858e:	6a 01                	push   0x1
c0018590:	53                   	push   ebx
c0018591:	56                   	push   esi
c0018592:	e8 ab f6 ff ff       	call   c0017c42 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0018597:	83 c4 10             	add    esp,0x10
c001859a:	89 c7                	mov    edi,eax
c001859c:	fe c8                	dec    al
c001859e:	74 16                	je     c00185b6 <Thr::loadDLL(char const*, bool)+0x153>
c00185a0:	89 e8                	mov    eax,ebp
c00185a2:	84 c0                	test   al,al
c00185a4:	74 10                	je     c00185b6 <Thr::loadDLL(char const*, bool)+0x153>
c00185a6:	83 ec 0c             	sub    esp,0xc
c00185a9:	68 09 2e 02 c0       	push   0xc0022e09
c00185ae:	e8 8d d4 ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c00185b3:	83 c4 10             	add    esp,0x10
c00185b6:	31 f6                	xor    esi,esi
c00185b8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00185bc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00185c0:	05 ff 0f 00 00       	add    eax,0xfff
c00185c5:	83 d2 00             	adc    edx,0x0
c00185c8:	0f ac d0 0c          	shrd   eax,edx,0xc
c00185cc:	c1 ea 0c             	shr    edx,0xc
c00185cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00185d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00185d7:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00185db:	ba 00 00 00 00       	mov    edx,0x0
c00185e0:	89 d0                	mov    eax,edx
c00185e2:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00185e6:	73 2c                	jae    c0018614 <Thr::loadDLL(char const*, bool)+0x1b1>
c00185e8:	e8 96 5d ff ff       	call   c000e383 <Virt::getAKernelVAS()>
c00185ed:	89 f5                	mov    ebp,esi
c00185ef:	c1 e5 0c             	shl    ebp,0xc
c00185f2:	52                   	push   edx
c00185f3:	52                   	push   edx
c00185f4:	01 dd                	add    ebp,ebx
c00185f6:	55                   	push   ebp
c00185f7:	50                   	push   eax
c00185f8:	e8 27 5f ff ff       	call   c000e524 <VAS::getPageTableEntry(unsigned long)>
c00185fd:	83 c4 10             	add    esp,0x10
c0018600:	f6 00 60             	test   BYTE PTR [eax],0x60
c0018603:	75 0c                	jne    c0018611 <Thr::loadDLL(char const*, bool)+0x1ae>
c0018605:	83 ec 0c             	sub    esp,0xc
c0018608:	55                   	push   ebp
c0018609:	e8 1a 3f ff ff       	call   c000c528 <Phys::freePage(unsigned long)>
c001860e:	83 c4 10             	add    esp,0x10
c0018611:	46                   	inc    esi
c0018612:	eb a4                	jmp    c00185b8 <Thr::loadDLL(char const*, bool)+0x155>
c0018614:	89 f8                	mov    eax,edi
c0018616:	84 c0                	test   al,al
c0018618:	75 02                	jne    c001861c <Thr::loadDLL(char const*, bool)+0x1b9>
c001861a:	31 db                	xor    ebx,ebx
c001861c:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018622:	89 d8                	mov    eax,ebx
c0018624:	5b                   	pop    ebx
c0018625:	5e                   	pop    esi
c0018626:	5f                   	pop    edi
c0018627:	5d                   	pop    ebp
c0018628:	c3                   	ret    

c0018629 <Thr::executeDLL(unsigned long, void*)>:
c0018629:	56                   	push   esi
c001862a:	53                   	push   ebx
c001862b:	51                   	push   ecx
c001862c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018630:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018634:	85 db                	test   ebx,ebx
c0018636:	75 10                	jne    c0018648 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0018638:	83 ec 0c             	sub    esp,0xc
c001863b:	68 28 2e 02 c0       	push   0xc0022e28
c0018640:	e8 fb d3 ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c0018645:	83 c4 10             	add    esp,0x10
c0018648:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001864c:	5a                   	pop    edx
c001864d:	89 d8                	mov    eax,ebx
c001864f:	5b                   	pop    ebx
c0018650:	5e                   	pop    esi
c0018651:	ff e0                	jmp    eax
c0018653:	90                   	nop

c0018654 <changeTSS>:
c0018654:	83 ec 0c             	sub    esp,0xc
c0018657:	e8 78 c2 ff ff       	call   c00148d4 <thisCPU()>
c001865c:	52                   	push   edx
c001865d:	05 7c 11 00 00       	add    eax,0x117c
c0018662:	52                   	push   edx
c0018663:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0018669:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c001866c:	ba 00 00 e8 01       	mov    edx,0x1e80000
c0018671:	c1 e1 15             	shl    ecx,0x15
c0018674:	29 ca                	sub    edx,ecx
c0018676:	52                   	push   edx
c0018677:	50                   	push   eax
c0018678:	e8 53 54 ff ff       	call   c000dad0 <TSS::setESP(unsigned long)>
c001867d:	83 c4 1c             	add    esp,0x1c
c0018680:	c3                   	ret    
c0018681:	90                   	nop

c0018682 <Process::addArgs(char**)>:
c0018682:	57                   	push   edi
c0018683:	56                   	push   esi
c0018684:	53                   	push   ebx
c0018685:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018689:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001868d:	85 ff                	test   edi,edi
c001868f:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c0018699:	74 45                	je     c00186e0 <Process::addArgs(char**)+0x5e>
c001869b:	8b 07                	mov    eax,DWORD PTR [edi]
c001869d:	85 c0                	test   eax,eax
c001869f:	74 3f                	je     c00186e0 <Process::addArgs(char**)+0x5e>
c00186a1:	31 db                	xor    ebx,ebx
c00186a3:	83 ec 0c             	sub    esp,0xc
c00186a6:	50                   	push   eax
c00186a7:	e8 32 80 fe ff       	call   c00006de <strlen>
c00186ac:	40                   	inc    eax
c00186ad:	89 04 24             	mov    DWORD PTR [esp],eax
c00186b0:	e8 2a 39 ff ff       	call   c000bfdf <malloc>
c00186b5:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c00186bc:	5a                   	pop    edx
c00186bd:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00186c0:	59                   	pop    ecx
c00186c1:	43                   	inc    ebx
c00186c2:	52                   	push   edx
c00186c3:	50                   	push   eax
c00186c4:	e8 97 80 fe ff       	call   c0000760 <strcpy>
c00186c9:	8b 8e 36 05 00 00    	mov    ecx,DWORD PTR [esi+0x536]
c00186cf:	83 c4 10             	add    esp,0x10
c00186d2:	41                   	inc    ecx
c00186d3:	89 8e 36 05 00 00    	mov    DWORD PTR [esi+0x536],ecx
c00186d9:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00186dc:	85 c0                	test   eax,eax
c00186de:	75 c3                	jne    c00186a3 <Process::addArgs(char**)+0x21>
c00186e0:	5b                   	pop    ebx
c00186e1:	5e                   	pop    esi
c00186e2:	5f                   	pop    edi
c00186e3:	c3                   	ret    

c00186e4 <Process::Process(char const*, Process*, char**)>:
c00186e4:	56                   	push   esi
c00186e5:	53                   	push   ebx
c00186e6:	83 ec 14             	sub    esp,0x14
c00186e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186ed:	05 0c 02 00 00       	add    eax,0x20c
c00186f2:	bb 07 00 00 00       	mov    ebx,0x7
c00186f7:	89 c6                	mov    esi,eax
c00186f9:	85 db                	test   ebx,ebx
c00186fb:	78 12                	js     c001870f <Process::Process(char const*, Process*, char**)+0x2b>
c00186fd:	83 ec 0c             	sub    esp,0xc
c0018700:	56                   	push   esi
c0018701:	e8 54 77 00 00       	call   c001fe5a <ThreadControlBlock::ThreadControlBlock()>
c0018706:	83 c4 10             	add    esp,0x10
c0018709:	83 c6 63             	add    esi,0x63
c001870c:	4b                   	dec    ebx
c001870d:	eb ea                	jmp    c00186f9 <Process::Process(char const*, Process*, char**)+0x15>
c001870f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018713:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c001871a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001871e:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c0018727:	a1 c4 41 02 c0       	mov    eax,ds:0xc00241c4
c001872c:	8d 50 01             	lea    edx,[eax+0x1]
c001872f:	89 15 c4 41 02 c0    	mov    DWORD PTR ds:0xc00241c4,edx
c0018735:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018739:	89 02                	mov    DWORD PTR [edx],eax
c001873b:	83 ec 0c             	sub    esp,0xc
c001873e:	6a 10                	push   0x10
c0018740:	e8 97 69 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0018745:	83 c4 10             	add    esp,0x10
c0018748:	89 c3                	mov    ebx,eax
c001874a:	83 ec 08             	sub    esp,0x8
c001874d:	6a 00                	push   0x0
c001874f:	53                   	push   ebx
c0018750:	e8 1b 66 ff ff       	call   c000ed70 <VAS::VAS(bool)>
c0018755:	83 c4 10             	add    esp,0x10
c0018758:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001875c:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c0018762:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018766:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c0018770:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018774:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018778:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001877e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018782:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018788:	85 c0                	test   eax,eax
c001878a:	74 42                	je     c00187ce <Process::Process(char const*, Process*, char**)+0xea>
c001878c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018790:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018796:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001879c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187a0:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c00187a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187aa:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c00187b0:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00187b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187ba:	05 0c 01 00 00       	add    eax,0x10c
c00187bf:	83 ec 08             	sub    esp,0x8
c00187c2:	52                   	push   edx
c00187c3:	50                   	push   eax
c00187c4:	e8 97 7f fe ff       	call   c0000760 <strcpy>
c00187c9:	83 c4 10             	add    esp,0x10
c00187cc:	eb 5c                	jmp    c001882a <Process::Process(char const*, Process*, char**)+0x146>
c00187ce:	83 ec 0c             	sub    esp,0xc
c00187d1:	68 60 12 00 00       	push   0x1260
c00187d6:	e8 01 69 ff ff       	call   c000f0dc <operator new(unsigned long)>
c00187db:	83 c4 10             	add    esp,0x10
c00187de:	89 c3                	mov    ebx,eax
c00187e0:	83 ec 08             	sub    esp,0x8
c00187e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00187e7:	53                   	push   ebx
c00187e8:	e8 e1 4f ff ff       	call   c000d7ce <VgaText::VgaText(char const*)>
c00187ed:	83 c4 10             	add    esp,0x10
c00187f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187f4:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00187fa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00187fe:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0018804:	83 ec 0c             	sub    esp,0xc
c0018807:	50                   	push   eax
c0018808:	e8 c0 43 ff ff       	call   c000cbcd <addToTerminalCycle(VgaText*)>
c001880d:	83 c4 10             	add    esp,0x10
c0018810:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018814:	05 0c 01 00 00       	add    eax,0x10c
c0018819:	83 ec 08             	sub    esp,0x8
c001881c:	68 52 2e 02 c0       	push   0xc0022e52
c0018821:	50                   	push   eax
c0018822:	e8 39 7f fe ff       	call   c0000760 <strcpy>
c0018827:	83 c4 10             	add    esp,0x10
c001882a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001882e:	83 c0 0c             	add    eax,0xc
c0018831:	83 ec 08             	sub    esp,0x8
c0018834:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018838:	50                   	push   eax
c0018839:	e8 22 7f fe ff       	call   c0000760 <strcpy>
c001883e:	83 c4 10             	add    esp,0x10
c0018841:	83 ec 08             	sub    esp,0x8
c0018844:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018848:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001884c:	e8 31 fe ff ff       	call   c0018682 <Process::addArgs(char**)>
c0018851:	83 c4 10             	add    esp,0x10
c0018854:	83 ec 08             	sub    esp,0x8
c0018857:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001885b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001885f:	e8 a5 ee ff ff       	call   c0017709 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0018864:	83 c4 10             	add    esp,0x10
c0018867:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001886b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001886f:	83 f0 01             	xor    eax,0x1
c0018872:	88 c2                	mov    dl,al
c0018874:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018878:	88 90 3a 07 00 00    	mov    BYTE PTR [eax+0x73a],dl
c001887e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018882:	25 ff 00 00 00       	and    eax,0xff
c0018887:	83 ec 08             	sub    esp,0x8
c001888a:	50                   	push   eax
c001888b:	68 50 2f 02 c0       	push   0xc0022f50
c0018890:	e8 7c 69 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0018895:	83 c4 10             	add    esp,0x10
c0018898:	90                   	nop
c0018899:	83 c4 14             	add    esp,0x14
c001889c:	5b                   	pop    ebx
c001889d:	5e                   	pop    esi
c001889e:	c3                   	ret    
c001889f:	90                   	nop

c00188a0 <Process::Process(bool, char const*, Process*, char**)>:
c00188a0:	56                   	push   esi
c00188a1:	53                   	push   ebx
c00188a2:	83 ec 14             	sub    esp,0x14
c00188a5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00188a9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00188ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188b1:	05 0c 02 00 00       	add    eax,0x20c
c00188b6:	bb 07 00 00 00       	mov    ebx,0x7
c00188bb:	89 c6                	mov    esi,eax
c00188bd:	85 db                	test   ebx,ebx
c00188bf:	78 12                	js     c00188d3 <Process::Process(bool, char const*, Process*, char**)+0x33>
c00188c1:	83 ec 0c             	sub    esp,0xc
c00188c4:	56                   	push   esi
c00188c5:	e8 90 75 00 00       	call   c001fe5a <ThreadControlBlock::ThreadControlBlock()>
c00188ca:	83 c4 10             	add    esp,0x10
c00188cd:	83 c6 63             	add    esi,0x63
c00188d0:	4b                   	dec    ebx
c00188d1:	eb ea                	jmp    c00188bd <Process::Process(bool, char const*, Process*, char**)+0x1d>
c00188d3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188d7:	c6 80 3a 07 00 00 00 	mov    BYTE PTR [eax+0x73a],0x0
c00188de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00188e2:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c00188eb:	a1 c4 41 02 c0       	mov    eax,ds:0xc00241c4
c00188f0:	8d 50 01             	lea    edx,[eax+0x1]
c00188f3:	89 15 c4 41 02 c0    	mov    DWORD PTR ds:0xc00241c4,edx
c00188f9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00188fd:	89 02                	mov    DWORD PTR [edx],eax
c00188ff:	83 ec 0c             	sub    esp,0xc
c0018902:	6a 10                	push   0x10
c0018904:	e8 d3 67 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0018909:	83 c4 10             	add    esp,0x10
c001890c:	89 c3                	mov    ebx,eax
c001890e:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018912:	25 ff 00 00 00       	and    eax,0xff
c0018917:	83 ec 08             	sub    esp,0x8
c001891a:	50                   	push   eax
c001891b:	53                   	push   ebx
c001891c:	e8 4f 64 ff ff       	call   c000ed70 <VAS::VAS(bool)>
c0018921:	83 c4 10             	add    esp,0x10
c0018924:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018928:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001892e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018932:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001893c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018940:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018944:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001894a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001894e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018954:	85 c0                	test   eax,eax
c0018956:	74 42                	je     c001899a <Process::Process(bool, char const*, Process*, char**)+0xfa>
c0018958:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001895c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0018962:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c0018968:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001896c:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c0018972:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018976:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001897c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0018982:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018986:	05 0c 01 00 00       	add    eax,0x10c
c001898b:	83 ec 08             	sub    esp,0x8
c001898e:	52                   	push   edx
c001898f:	50                   	push   eax
c0018990:	e8 cb 7d fe ff       	call   c0000760 <strcpy>
c0018995:	83 c4 10             	add    esp,0x10
c0018998:	eb 5c                	jmp    c00189f6 <Process::Process(bool, char const*, Process*, char**)+0x156>
c001899a:	83 ec 0c             	sub    esp,0xc
c001899d:	68 60 12 00 00       	push   0x1260
c00189a2:	e8 35 67 ff ff       	call   c000f0dc <operator new(unsigned long)>
c00189a7:	83 c4 10             	add    esp,0x10
c00189aa:	89 c3                	mov    ebx,eax
c00189ac:	83 ec 08             	sub    esp,0x8
c00189af:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00189b3:	53                   	push   ebx
c00189b4:	e8 15 4e ff ff       	call   c000d7ce <VgaText::VgaText(char const*)>
c00189b9:	83 c4 10             	add    esp,0x10
c00189bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189c0:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c00189c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189ca:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00189d0:	83 ec 0c             	sub    esp,0xc
c00189d3:	50                   	push   eax
c00189d4:	e8 f4 41 ff ff       	call   c000cbcd <addToTerminalCycle(VgaText*)>
c00189d9:	83 c4 10             	add    esp,0x10
c00189dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189e0:	05 0c 01 00 00       	add    eax,0x10c
c00189e5:	83 ec 08             	sub    esp,0x8
c00189e8:	68 52 2e 02 c0       	push   0xc0022e52
c00189ed:	50                   	push   eax
c00189ee:	e8 6d 7d fe ff       	call   c0000760 <strcpy>
c00189f3:	83 c4 10             	add    esp,0x10
c00189f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00189fa:	83 c0 0c             	add    eax,0xc
c00189fd:	83 ec 08             	sub    esp,0x8
c0018a00:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0018a04:	50                   	push   eax
c0018a05:	e8 56 7d fe ff       	call   c0000760 <strcpy>
c0018a0a:	83 c4 10             	add    esp,0x10
c0018a0d:	83 ec 08             	sub    esp,0x8
c0018a10:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018a14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018a18:	e8 65 fc ff ff       	call   c0018682 <Process::addArgs(char**)>
c0018a1d:	83 c4 10             	add    esp,0x10
c0018a20:	90                   	nop
c0018a21:	83 c4 14             	add    esp,0x14
c0018a24:	5b                   	pop    ebx
c0018a25:	5e                   	pop    esi
c0018a26:	c3                   	ret    

c0018a27 <disableIRQs()>:
c0018a27:	fa                   	cli    
c0018a28:	a1 cc 5b 02 c0       	mov    eax,ds:0xc0025bcc
c0018a2d:	40                   	inc    eax
c0018a2e:	a3 cc 5b 02 c0       	mov    ds:0xc0025bcc,eax
c0018a33:	c3                   	ret    

c0018a34 <getIRQNestingLevel()>:
c0018a34:	a1 cc 5b 02 c0       	mov    eax,ds:0xc0025bcc
c0018a39:	c3                   	ret    

c0018a3a <enableIRQs()>:
c0018a3a:	a1 cc 5b 02 c0       	mov    eax,ds:0xc0025bcc
c0018a3f:	48                   	dec    eax
c0018a40:	a3 cc 5b 02 c0       	mov    ds:0xc0025bcc,eax
c0018a45:	75 01                	jne    c0018a48 <enableIRQs()+0xe>
c0018a47:	fb                   	sti    
c0018a48:	c3                   	ret    

c0018a49 <lockScheduler()>:
c0018a49:	eb dc                	jmp    c0018a27 <disableIRQs()>

c0018a4b <unlockScheduler()>:
c0018a4b:	eb ed                	jmp    c0018a3a <enableIRQs()>

c0018a4d <userModeEntryPoint(void*)>:
c0018a4d:	83 ec 0c             	sub    esp,0xc
c0018a50:	e8 f6 ff ff ff       	call   c0018a4b <unlockScheduler()>
c0018a55:	fb                   	sti    
c0018a56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a5b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018a5e:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c0018a64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018a68:	83 c4 0c             	add    esp,0xc
c0018a6b:	e9 28 78 fe ff       	jmp    c0000298 <goToUsermode>

c0018a70 <lockStuff()>:
c0018a70:	e8 b2 ff ff ff       	call   c0018a27 <disableIRQs()>
c0018a75:	a1 c8 5b 02 c0       	mov    eax,ds:0xc0025bc8
c0018a7a:	40                   	inc    eax
c0018a7b:	a3 c8 5b 02 c0       	mov    ds:0xc0025bc8,eax
c0018a80:	c3                   	ret    

c0018a81 <taskStartupFunction>:
c0018a81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018a86:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0018a89:	c3                   	ret    

c0018a8a <updateTimeUsed()>:
c0018a8a:	57                   	push   edi
c0018a8b:	56                   	push   esi
c0018a8c:	53                   	push   ebx
c0018a8d:	e8 42 be ff ff       	call   c00148d4 <thisCPU()>
c0018a92:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c0018a99:	74 49                	je     c0018ae4 <updateTimeUsed()+0x5a>
c0018a9b:	0f 31                	rdtsc  
c0018a9d:	89 c1                	mov    ecx,eax
c0018a9f:	a3 08 5c 02 c0       	mov    ds:0xc0025c08,eax
c0018aa4:	2b 0d f8 5b 02 c0    	sub    ecx,DWORD PTR ds:0xc0025bf8
c0018aaa:	a3 f8 5b 02 c0       	mov    ds:0xc0025bf8,eax
c0018aaf:	89 0d 00 5c 02 c0    	mov    DWORD PTR ds:0xc0025c00,ecx
c0018ab5:	89 d3                	mov    ebx,edx
c0018ab7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018abc:	89 15 0c 5c 02 c0    	mov    DWORD PTR ds:0xc0025c0c,edx
c0018ac2:	1b 1d fc 5b 02 c0    	sbb    ebx,DWORD PTR ds:0xc0025bfc
c0018ac8:	89 15 fc 5b 02 c0    	mov    DWORD PTR ds:0xc0025bfc,edx
c0018ace:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0018ad1:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0018ad4:	01 f1                	add    ecx,esi
c0018ad6:	89 1d 04 5c 02 c0    	mov    DWORD PTR ds:0xc0025c04,ebx
c0018adc:	11 fb                	adc    ebx,edi
c0018ade:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c0018ae1:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0018ae4:	5b                   	pop    ebx
c0018ae5:	5e                   	pop    esi
c0018ae6:	5f                   	pop    edi
c0018ae7:	c3                   	ret    

c0018ae8 <switchToThread(ThreadControlBlock*)>:
c0018ae8:	53                   	push   ebx
c0018ae9:	83 ec 08             	sub    esp,0x8
c0018aec:	a1 c8 5b 02 c0       	mov    eax,ds:0xc0025bc8
c0018af1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018af5:	85 c0                	test   eax,eax
c0018af7:	75 36                	jne    c0018b2f <switchToThread(ThreadControlBlock*)+0x47>
c0018af9:	8a 53 44             	mov    dl,BYTE PTR [ebx+0x44]
c0018afc:	80 fa ff             	cmp    dl,0xff
c0018aff:	74 2a                	je     c0018b2b <switchToThread(ThreadControlBlock*)+0x43>
c0018b01:	81 e2 ff 00 00 00    	and    edx,0xff
c0018b07:	b8 84 03 00 00       	mov    eax,0x384
c0018b0c:	29 d0                	sub    eax,edx
c0018b0e:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0018b11:	c1 e0 10             	shl    eax,0x10
c0018b14:	01 c8                	add    eax,ecx
c0018b16:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0018b19:	e8 6c ff ff ff       	call   c0018a8a <updateTimeUsed()>
c0018b1e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0018b22:	83 c4 08             	add    esp,0x8
c0018b25:	5b                   	pop    ebx
c0018b26:	e9 ad 77 fe ff       	jmp    c00002d8 <switchToThreadASM>
c0018b2b:	31 c0                	xor    eax,eax
c0018b2d:	eb e7                	jmp    c0018b16 <switchToThread(ThreadControlBlock*)+0x2e>
c0018b2f:	c7 05 c4 5b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025bc4,0x1
c0018b39:	83 c4 08             	add    esp,0x8
c0018b3c:	5b                   	pop    ebx
c0018b3d:	c3                   	ret    

c0018b3e <Semaphore::Semaphore(int)>:
c0018b3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b42:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018b46:	89 10                	mov    DWORD PTR [eax],edx
c0018b48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b4c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0018b53:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b57:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0018b5e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b62:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0018b69:	90                   	nop
c0018b6a:	c3                   	ret    
c0018b6b:	90                   	nop

c0018b6c <Mutex::Mutex()>:
c0018b6c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b70:	6a 01                	push   0x1
c0018b72:	50                   	push   eax
c0018b73:	e8 c6 ff ff ff       	call   c0018b3e <Semaphore::Semaphore(int)>
c0018b78:	83 c4 08             	add    esp,0x8
c0018b7b:	90                   	nop
c0018b7c:	c3                   	ret    
c0018b7d:	90                   	nop

c0018b7e <Process::createThread(void (*)(void*), void*, int)>:
c0018b7e:	55                   	push   ebp
c0018b7f:	31 c9                	xor    ecx,ecx
c0018b81:	57                   	push   edi
c0018b82:	56                   	push   esi
c0018b83:	53                   	push   ebx
c0018b84:	83 ec 1c             	sub    esp,0x1c
c0018b87:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018b8b:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c0018b92:	89 f2                	mov    edx,esi
c0018b94:	31 c0                	xor    eax,eax
c0018b96:	66 89 d0             	mov    ax,dx
c0018b99:	83 e2 01             	and    edx,0x1
c0018b9c:	74 14                	je     c0018bb2 <Process::createThread(void (*)(void*), void*, int)+0x34>
c0018b9e:	d1 f8                	sar    eax,1
c0018ba0:	41                   	inc    ecx
c0018ba1:	89 c2                	mov    edx,eax
c0018ba3:	83 f9 10             	cmp    ecx,0x10
c0018ba6:	75 ec                	jne    c0018b94 <Process::createThread(void (*)(void*), void*, int)+0x16>
c0018ba8:	83 c4 1c             	add    esp,0x1c
c0018bab:	31 c0                	xor    eax,eax
c0018bad:	5b                   	pop    ebx
c0018bae:	5e                   	pop    esi
c0018baf:	5f                   	pop    edi
c0018bb0:	5d                   	pop    ebp
c0018bb1:	c3                   	ret    
c0018bb2:	b8 01 00 00 00       	mov    eax,0x1
c0018bb7:	d3 e0                	shl    eax,cl
c0018bb9:	09 c6                	or     esi,eax
c0018bbb:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018bc1:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c0018bc8:	8d 34 49             	lea    esi,[ecx+ecx*2]
c0018bcb:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0018bce:	89 f0                	mov    eax,esi
c0018bd0:	c1 e0 05             	shl    eax,0x5
c0018bd3:	01 c6                	add    esi,eax
c0018bd5:	8d 04 33             	lea    eax,[ebx+esi*1]
c0018bd8:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0018bde:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018be2:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c0018be8:	89 ca                	mov    edx,ecx
c0018bea:	f7 da                	neg    edx
c0018bec:	c1 e2 15             	shl    edx,0x15
c0018bef:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c0018bf5:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0018bfb:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c0018c01:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0018c07:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018c0b:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c0018c11:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018c15:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0018c1f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0018c25:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0018c2f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0018c39:	52                   	push   edx
c0018c3a:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c0018c41:	52                   	push   edx
c0018c42:	50                   	push   eax
c0018c43:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018c47:	68 e8 5b 02 c0       	push   0xc0025be8
c0018c4c:	e8 61 70 00 00       	call   c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018c51:	83 c4 10             	add    esp,0x10
c0018c54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018c58:	83 c4 1c             	add    esp,0x1c
c0018c5b:	5b                   	pop    ebx
c0018c5c:	5e                   	pop    esi
c0018c5d:	5f                   	pop    edi
c0018c5e:	5d                   	pop    ebp
c0018c5f:	c3                   	ret    

c0018c60 <Process::createUserThread()>:
c0018c60:	83 ec 0c             	sub    esp,0xc
c0018c63:	68 80 00 00 00       	push   0x80
c0018c68:	6a 00                	push   0x0
c0018c6a:	68 4d 8a 01 c0       	push   0xc0018a4d
c0018c6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c73:	50                   	push   eax
c0018c74:	e8 05 ff ff ff       	call   c0018b7e <Process::createThread(void (*)(void*), void*, int)>
c0018c79:	83 c4 1c             	add    esp,0x1c
c0018c7c:	c3                   	ret    

c0018c7d <setupMultitasking(void (*)())>:
c0018c7d:	56                   	push   esi
c0018c7e:	53                   	push   ebx
c0018c7f:	51                   	push   ecx
c0018c80:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018c84:	eb 10                	jmp    c0018c96 <setupMultitasking(void (*)())+0x19>
c0018c86:	83 ec 0c             	sub    esp,0xc
c0018c89:	68 e8 5b 02 c0       	push   0xc0025be8
c0018c8e:	e8 71 6f 00 00       	call   c001fc04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018c93:	83 c4 10             	add    esp,0x10
c0018c96:	83 ec 0c             	sub    esp,0xc
c0018c99:	68 e8 5b 02 c0       	push   0xc0025be8
c0018c9e:	e8 45 6f 00 00       	call   c001fbe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018ca3:	83 c4 10             	add    esp,0x10
c0018ca6:	84 c0                	test   al,al
c0018ca8:	74 dc                	je     c0018c86 <setupMultitasking(void (*)())+0x9>
c0018caa:	83 ec 0c             	sub    esp,0xc
c0018cad:	68 3b 07 00 00       	push   0x73b
c0018cb2:	e8 25 64 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0018cb7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0018cbe:	6a 00                	push   0x0
c0018cc0:	68 56 2e 02 c0       	push   0xc0022e56
c0018cc5:	89 c3                	mov    ebx,eax
c0018cc7:	6a 01                	push   0x1
c0018cc9:	50                   	push   eax
c0018cca:	e8 d1 fb ff ff       	call   c00188a0 <Process::Process(bool, char const*, Process*, char**)>
c0018ccf:	83 c4 18             	add    esp,0x18
c0018cd2:	8b 83 26 05 00 00    	mov    eax,DWORD PTR [ebx+0x526]
c0018cd8:	89 1d f4 5b 02 c0    	mov    DWORD PTR ds:0xc0025bf4,ebx
c0018cde:	50                   	push   eax
c0018cdf:	68 78 2f 02 c0       	push   0xc0022f78
c0018ce4:	e8 28 65 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0018ce9:	5a                   	pop    edx
c0018cea:	8b 8b 26 05 00 00    	mov    ecx,DWORD PTR [ebx+0x526]
c0018cf0:	51                   	push   ecx
c0018cf1:	e8 4b 46 ff ff       	call   c000d341 <setActiveTerminal(VgaText*)>
c0018cf6:	66 8b 83 24 05 00 00 	mov    ax,WORD PTR [ebx+0x524]
c0018cfd:	83 c8 01             	or     eax,0x1
c0018d00:	66 89 83 24 05 00 00 	mov    WORD PTR [ebx+0x524],ax
c0018d07:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c0018d0d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0018d10:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c0018d1a:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0018d20:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0018d2a:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0018d34:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0018d3a:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0018d40:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0018d4a:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c0018d50:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0018d5a:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c0018d64:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0018d6a:	58                   	pop    eax
c0018d6b:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0018d71:	5a                   	pop    edx
c0018d72:	68 52 2e 02 c0       	push   0xc0022e52
c0018d77:	50                   	push   eax
c0018d78:	e8 e3 79 fe ff       	call   c0000760 <strcpy>
c0018d7d:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c0018d84:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0018d88:	83 c4 14             	add    esp,0x14
c0018d8b:	5b                   	pop    ebx
c0018d8c:	5e                   	pop    esi
c0018d8d:	e9 38 75 fe ff       	jmp    c00002ca <switchToThreadASMFirstTime>

c0018d92 <schedule()>:
c0018d92:	a1 c8 5b 02 c0       	mov    eax,ds:0xc0025bc8
c0018d97:	85 c0                	test   eax,eax
c0018d99:	74 0b                	je     c0018da6 <schedule()+0x14>
c0018d9b:	c7 05 c4 5b 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0025bc4,0x1
c0018da5:	c3                   	ret    
c0018da6:	53                   	push   ebx
c0018da7:	83 ec 14             	sub    esp,0x14
c0018daa:	68 e8 5b 02 c0       	push   0xc0025be8
c0018daf:	e8 34 6e 00 00       	call   c001fbe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0018db4:	83 c4 10             	add    esp,0x10
c0018db7:	84 c0                	test   al,al
c0018db9:	75 38                	jne    c0018df3 <schedule()+0x61>
c0018dbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018dc0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0018dc3:	4a                   	dec    edx
c0018dc4:	74 32                	je     c0018df8 <schedule()+0x66>
c0018dc6:	83 ec 0c             	sub    esp,0xc
c0018dc9:	68 e8 5b 02 c0       	push   0xc0025be8
c0018dce:	e8 0d 6e 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0018dd3:	89 c3                	mov    ebx,eax
c0018dd5:	c7 04 24 e8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025be8
c0018ddc:	e8 23 6e 00 00       	call   c001fc04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0018de1:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0018de8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0018deb:	e8 f8 fc ff ff       	call   c0018ae8 <switchToThread(ThreadControlBlock*)>
c0018df0:	83 c4 10             	add    esp,0x10
c0018df3:	83 c4 08             	add    esp,0x8
c0018df6:	5b                   	pop    ebx
c0018df7:	c3                   	ret    
c0018df8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0018dff:	51                   	push   ecx
c0018e00:	51                   	push   ecx
c0018e01:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018e07:	53                   	push   ebx
c0018e08:	68 e8 5b 02 c0       	push   0xc0025be8
c0018e0d:	e8 a0 6e 00 00       	call   c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018e12:	83 c4 10             	add    esp,0x10
c0018e15:	eb af                	jmp    c0018dc6 <schedule()+0x34>

c0018e17 <unlockStuff()>:
c0018e17:	a1 c8 5b 02 c0       	mov    eax,ds:0xc0025bc8
c0018e1c:	48                   	dec    eax
c0018e1d:	a3 c8 5b 02 c0       	mov    ds:0xc0025bc8,eax
c0018e22:	75 09                	jne    c0018e2d <unlockStuff()+0x16>
c0018e24:	a1 c4 5b 02 c0       	mov    eax,ds:0xc0025bc4
c0018e29:	85 c0                	test   eax,eax
c0018e2b:	75 05                	jne    c0018e32 <unlockStuff()+0x1b>
c0018e2d:	e9 08 fc ff ff       	jmp    c0018a3a <enableIRQs()>
c0018e32:	83 ec 0c             	sub    esp,0xc
c0018e35:	c7 05 c4 5b 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025bc4,0x0
c0018e3f:	e8 4e ff ff ff       	call   c0018d92 <schedule()>
c0018e44:	83 c4 0c             	add    esp,0xc
c0018e47:	e9 ee fb ff ff       	jmp    c0018a3a <enableIRQs()>

c0018e4c <Semaphore::tryAcquire()>:
c0018e4c:	83 ec 0c             	sub    esp,0xc
c0018e4f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e53:	e8 18 fc ff ff       	call   c0018a70 <lockStuff()>
c0018e58:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018e5b:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018e5d:	7c 0b                	jl     c0018e6a <Semaphore::tryAcquire()+0x1e>
c0018e5f:	e8 b3 ff ff ff       	call   c0018e17 <unlockStuff()>
c0018e64:	31 c0                	xor    eax,eax
c0018e66:	83 c4 0c             	add    esp,0xc
c0018e69:	c3                   	ret    
c0018e6a:	40                   	inc    eax
c0018e6b:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018e6e:	e8 a4 ff ff ff       	call   c0018e17 <unlockStuff()>
c0018e73:	b0 01                	mov    al,0x1
c0018e75:	83 c4 0c             	add    esp,0xc
c0018e78:	c3                   	ret    
c0018e79:	90                   	nop

c0018e7a <Semaphore::assertLocked(char const*)>:
c0018e7a:	83 ec 0c             	sub    esp,0xc
c0018e7d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e81:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018e85:	e8 e6 fb ff ff       	call   c0018a70 <lockStuff()>
c0018e8a:	8b 02                	mov    eax,DWORD PTR [edx]
c0018e8c:	39 42 0c             	cmp    DWORD PTR [edx+0xc],eax
c0018e8f:	7c 05                	jl     c0018e96 <Semaphore::assertLocked(char const*)+0x1c>
c0018e91:	83 c4 0c             	add    esp,0xc
c0018e94:	eb 81                	jmp    c0018e17 <unlockStuff()>
c0018e96:	83 ec 0c             	sub    esp,0xc
c0018e99:	51                   	push   ecx
c0018e9a:	e8 a1 cb ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c0018e9f:	83 c4 10             	add    esp,0x10
c0018ea2:	83 c4 0c             	add    esp,0xc
c0018ea5:	e9 6d ff ff ff       	jmp    c0018e17 <unlockStuff()>

c0018eaa <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0018eaa:	83 ec 0c             	sub    esp,0xc
c0018ead:	e8 82 fb ff ff       	call   c0018a34 <getIRQNestingLevel()>
c0018eb2:	52                   	push   edx
c0018eb3:	52                   	push   edx
c0018eb4:	50                   	push   eax
c0018eb5:	68 ac 2f 02 c0       	push   0xc0022fac
c0018eba:	e8 52 63 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0018ebf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ec4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018ec8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018ecb:	e8 c2 fe ff ff       	call   c0018d92 <schedule()>
c0018ed0:	e8 76 fb ff ff       	call   c0018a4b <unlockScheduler()>
c0018ed5:	e8 5a fb ff ff       	call   c0018a34 <getIRQNestingLevel()>
c0018eda:	59                   	pop    ecx
c0018edb:	5a                   	pop    edx
c0018edc:	50                   	push   eax
c0018edd:	68 e0 2f 02 c0       	push   0xc0022fe0
c0018ee2:	e8 2a 63 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0018ee7:	83 c4 1c             	add    esp,0x1c
c0018eea:	c3                   	ret    

c0018eeb <blockTask(TaskState)>:
c0018eeb:	83 ec 0c             	sub    esp,0xc
c0018eee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ef2:	e8 52 fb ff ff       	call   c0018a49 <lockScheduler()>
c0018ef7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018efc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0018eff:	e8 8e fe ff ff       	call   c0018d92 <schedule()>
c0018f04:	83 c4 0c             	add    esp,0xc
c0018f07:	e9 3f fb ff ff       	jmp    c0018a4b <unlockScheduler()>

c0018f0c <waitTask(int, int*, int)>:
c0018f0c:	83 ec 18             	sub    esp,0x18
c0018f0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f14:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f18:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0018f1b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018f1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f24:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c0018f27:	6a 07                	push   0x7
c0018f29:	e8 bd ff ff ff       	call   c0018eeb <blockTask(TaskState)>
c0018f2e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f33:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c0018f36:	83 c4 10             	add    esp,0x10
c0018f39:	85 d2                	test   edx,edx
c0018f3b:	74 0a                	je     c0018f47 <waitTask(int, int*, int)+0x3b>
c0018f3d:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c0018f40:	89 02                	mov    DWORD PTR [edx],eax
c0018f42:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f47:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c0018f4a:	83 c4 0c             	add    esp,0xc
c0018f4d:	c3                   	ret    

c0018f4e <nanoSleepUntil(unsigned long long)>:
c0018f4e:	53                   	push   ebx
c0018f4f:	83 ec 08             	sub    esp,0x8
c0018f52:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018f56:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018f5a:	3b 0d 10 4e 02 c0    	cmp    ecx,DWORD PTR ds:0xc0024e10
c0018f60:	89 d8                	mov    eax,ebx
c0018f62:	1b 05 14 4e 02 c0    	sbb    eax,DWORD PTR ds:0xc0024e14
c0018f68:	73 05                	jae    c0018f6f <nanoSleepUntil(unsigned long long)+0x21>
c0018f6a:	83 c4 08             	add    esp,0x8
c0018f6d:	5b                   	pop    ebx
c0018f6e:	c3                   	ret    
c0018f6f:	e8 fc fa ff ff       	call   c0018a70 <lockStuff()>
c0018f74:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018f79:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0018f7c:	89 58 30             	mov    DWORD PTR [eax+0x30],ebx
c0018f7f:	51                   	push   ecx
c0018f80:	51                   	push   ecx
c0018f81:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018f87:	53                   	push   ebx
c0018f88:	68 dc 5b 02 c0       	push   0xc0025bdc
c0018f8d:	e8 20 6d 00 00       	call   c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0018f92:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0018f99:	e8 4d ff ff ff       	call   c0018eeb <blockTask(TaskState)>
c0018f9e:	83 c4 18             	add    esp,0x18
c0018fa1:	5b                   	pop    ebx
c0018fa2:	e9 70 fe ff ff       	jmp    c0018e17 <unlockStuff()>

c0018fa7 <nanoSleep(unsigned long long)>:
c0018fa7:	a1 10 4e 02 c0       	mov    eax,ds:0xc0024e10
c0018fac:	8b 15 14 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024e14
c0018fb2:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c0018fb6:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c0018fba:	eb 92                	jmp    c0018f4e <nanoSleepUntil(unsigned long long)>

c0018fbc <sleep(unsigned long long)>:
c0018fbc:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c0018fc1:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c0018fc9:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c0018fcd:	01 ca                	add    edx,ecx
c0018fcf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018fd3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018fd7:	eb ce                	jmp    c0018fa7 <nanoSleep(unsigned long long)>
c0018fd9:	90                   	nop

c0018fda <Semaphore::acquire()>:
c0018fda:	83 ec 0c             	sub    esp,0xc
c0018fdd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018fe1:	e8 8a fa ff ff       	call   c0018a70 <lockStuff()>
c0018fe6:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0018fe9:	3b 02                	cmp    eax,DWORD PTR [edx]
c0018feb:	7d 0c                	jge    c0018ff9 <Semaphore::acquire()+0x1f>
c0018fed:	40                   	inc    eax
c0018fee:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c0018ff1:	83 c4 0c             	add    esp,0xc
c0018ff4:	e9 1e fe ff ff       	jmp    c0018e17 <unlockStuff()>
c0018ff9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018ffe:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0019005:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019008:	85 c0                	test   eax,eax
c001900a:	74 29                	je     c0019035 <Semaphore::acquire()+0x5b>
c001900c:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001900f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019015:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0019018:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001901d:	83 ec 0c             	sub    esp,0xc
c0019020:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0019023:	6a 05                	push   0x5
c0019025:	e8 c1 fe ff ff       	call   c0018eeb <blockTask(TaskState)>
c001902a:	83 c4 10             	add    esp,0x10
c001902d:	83 c4 0c             	add    esp,0xc
c0019030:	e9 e2 fd ff ff       	jmp    c0018e17 <unlockStuff()>
c0019035:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001903a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001903d:	eb d9                	jmp    c0019018 <Semaphore::acquire()+0x3e>

c001903f <taskReturned>:
c001903f:	83 ec 18             	sub    esp,0x18
c0019042:	68 14 30 02 c0       	push   0xc0023014
c0019047:	e8 f4 c9 ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c001904c:	83 c4 10             	add    esp,0x10
c001904f:	83 ec 0c             	sub    esp,0xc
c0019052:	6a 02                	push   0x2
c0019054:	e8 92 fe ff ff       	call   c0018eeb <blockTask(TaskState)>
c0019059:	e8 eb f9 ff ff       	call   c0018a49 <lockScheduler()>
c001905e:	e8 2f fd ff ff       	call   c0018d92 <schedule()>
c0019063:	e8 e3 f9 ff ff       	call   c0018a4b <unlockScheduler()>
c0019068:	83 c4 10             	add    esp,0x10
c001906b:	eb e2                	jmp    c001904f <taskReturned+0x10>

c001906d <unblockTask(ThreadControlBlock*)>:
c001906d:	53                   	push   ebx
c001906e:	83 ec 08             	sub    esp,0x8
c0019071:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019075:	e8 cf f9 ff ff       	call   c0018a49 <lockScheduler()>
c001907a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001907d:	85 c0                	test   eax,eax
c001907f:	74 5b                	je     c00190dc <unblockTask(ThreadControlBlock*)+0x6f>
c0019081:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0019084:	48                   	dec    eax
c0019085:	74 30                	je     c00190b7 <unblockTask(ThreadControlBlock*)+0x4a>
c0019087:	83 ec 0c             	sub    esp,0xc
c001908a:	68 e8 5b 02 c0       	push   0xc0025be8
c001908f:	e8 4c 6b 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019094:	83 c4 10             	add    esp,0x10
c0019097:	85 c0                	test   eax,eax
c0019099:	75 16                	jne    c00190b1 <unblockTask(ThreadControlBlock*)+0x44>
c001909b:	eb 64                	jmp    c0019101 <unblockTask(ThreadControlBlock*)+0x94>
c001909d:	52                   	push   edx
c001909e:	52                   	push   edx
c001909f:	50                   	push   eax
c00190a0:	68 e8 5b 02 c0       	push   0xc0025be8
c00190a5:	e8 46 6e 00 00       	call   c001fef0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00190aa:	83 c4 10             	add    esp,0x10
c00190ad:	85 c0                	test   eax,eax
c00190af:	74 50                	je     c0019101 <unblockTask(ThreadControlBlock*)+0x94>
c00190b1:	39 c3                	cmp    ebx,eax
c00190b3:	75 e8                	jne    c001909d <unblockTask(ThreadControlBlock*)+0x30>
c00190b5:	eb 1c                	jmp    c00190d3 <unblockTask(ThreadControlBlock*)+0x66>
c00190b7:	83 ec 0c             	sub    esp,0xc
c00190ba:	68 04 31 02 c0       	push   0xc0023104
c00190bf:	e8 4d 61 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c00190c4:	c7 04 24 90 30 02 c0 	mov    DWORD PTR [esp],0xc0023090
c00190cb:	e8 41 61 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c00190d0:	83 c4 10             	add    esp,0x10
c00190d3:	83 c4 08             	add    esp,0x8
c00190d6:	5b                   	pop    ebx
c00190d7:	e9 6f f9 ff ff       	jmp    c0018a4b <unlockScheduler()>
c00190dc:	83 ec 0c             	sub    esp,0xc
c00190df:	68 48 30 02 c0       	push   0xc0023048
c00190e4:	e8 28 61 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c00190e9:	c7 04 24 90 30 02 c0 	mov    DWORD PTR [esp],0xc0023090
c00190f0:	e8 1c 61 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c00190f5:	83 c4 10             	add    esp,0x10
c00190f8:	83 c4 08             	add    esp,0x8
c00190fb:	5b                   	pop    ebx
c00190fc:	e9 4a f9 ff ff       	jmp    c0018a4b <unlockScheduler()>
c0019101:	50                   	push   eax
c0019102:	50                   	push   eax
c0019103:	53                   	push   ebx
c0019104:	68 e8 5b 02 c0       	push   0xc0025be8
c0019109:	e8 a4 6b 00 00       	call   c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001910e:	83 c4 10             	add    esp,0x10
c0019111:	83 c4 08             	add    esp,0x8
c0019114:	5b                   	pop    ebx
c0019115:	e9 31 f9 ff ff       	jmp    c0018a4b <unlockScheduler()>

c001911a <cleanupTerminatedTask(ThreadControlBlock*)>:
c001911a:	55                   	push   ebp
c001911b:	57                   	push   edi
c001911c:	56                   	push   esi
c001911d:	53                   	push   ebx
c001911e:	83 ec 1c             	sub    esp,0x1c
c0019121:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0019125:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019128:	8b a8 36 05 00 00    	mov    ebp,DWORD PTR [eax+0x536]
c001912e:	85 ed                	test   ebp,ebp
c0019130:	7e 21                	jle    c0019153 <cleanupTerminatedTask(ThreadControlBlock*)+0x39>
c0019132:	31 f6                	xor    esi,esi
c0019134:	83 ec 0c             	sub    esp,0xc
c0019137:	8b bc b0 3a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x53a]
c001913e:	46                   	inc    esi
c001913f:	57                   	push   edi
c0019140:	e8 aa 2e ff ff       	call   c000bfef <free>
c0019145:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019148:	83 c4 10             	add    esp,0x10
c001914b:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c0019151:	7f e1                	jg     c0019134 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c0019153:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001915d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0019162:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019165:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c0019168:	d3 c0                	rol    eax,cl
c001916a:	66 8b 8a 24 05 00 00 	mov    cx,WORD PTR [edx+0x524]
c0019171:	21 c1                	and    ecx,eax
c0019173:	66 89 8a 24 05 00 00 	mov    WORD PTR [edx+0x524],cx
c001917a:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001917d:	89 f7                	mov    edi,esi
c001917f:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c0019187:	0f 85 4f 01 00 00    	jne    c00192dc <cleanupTerminatedTask(ThreadControlBlock*)+0x1c2>
c001918d:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0019193:	85 c0                	test   eax,eax
c0019195:	0f 84 aa 00 00 00    	je     c0019245 <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c001919b:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001919e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00191a2:	31 c9                	xor    ecx,ecx
c00191a4:	eb 10                	jmp    c00191b6 <cleanupTerminatedTask(ThreadControlBlock*)+0x9c>
c00191a6:	41                   	inc    ecx
c00191a7:	83 f9 10             	cmp    ecx,0x10
c00191aa:	0f 84 95 00 00 00    	je     c0019245 <cleanupTerminatedTask(ThreadControlBlock*)+0x12b>
c00191b0:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c00191b6:	31 d2                	xor    edx,edx
c00191b8:	66 8b 90 24 05 00 00 	mov    dx,WORD PTR [eax+0x524]
c00191bf:	d3 fa                	sar    edx,cl
c00191c1:	83 e2 01             	and    edx,0x1
c00191c4:	74 e0                	je     c00191a6 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00191c6:	8d 14 49             	lea    edx,[ecx+ecx*2]
c00191c9:	89 d5                	mov    ebp,edx
c00191cb:	c1 e5 05             	shl    ebp,0x5
c00191ce:	01 ea                	add    edx,ebp
c00191d0:	01 d0                	add    eax,edx
c00191d2:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00191d8:	83 fd 07             	cmp    ebp,0x7
c00191db:	75 c9                	jne    c00191a6 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c00191dd:	05 40 02 00 00       	add    eax,0x240
c00191e2:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c00191e5:	83 fd ff             	cmp    ebp,0xffffffff
c00191e8:	0f 8c 07 01 00 00    	jl     c00192f5 <cleanupTerminatedTask(ThreadControlBlock*)+0x1db>
c00191ee:	0f 84 b4 01 00 00    	je     c00193a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x28e>
c00191f4:	85 ed                	test   ebp,ebp
c00191f6:	0f 84 9b 01 00 00    	je     c0019397 <cleanupTerminatedTask(ThreadControlBlock*)+0x27d>
c00191fc:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00191fe:	75 a6                	jne    c00191a6 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0019200:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c0019206:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001920a:	01 d0                	add    eax,edx
c001920c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0019210:	83 ec 0c             	sub    esp,0xc
c0019213:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c0019219:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001921c:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c0019222:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0019229:	50                   	push   eax
c001922a:	e8 3e fe ff ff       	call   c001906d <unblockTask(ThreadControlBlock*)>
c001922f:	83 c4 10             	add    esp,0x10
c0019232:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019236:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c0019239:	41                   	inc    ecx
c001923a:	89 f7                	mov    edi,esi
c001923c:	83 f9 10             	cmp    ecx,0x10
c001923f:	0f 85 6b ff ff ff    	jne    c00191b0 <cleanupTerminatedTask(ThreadControlBlock*)+0x96>
c0019245:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001924b:	85 c0                	test   eax,eax
c001924d:	74 5d                	je     c00192ac <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c001924f:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c0019255:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001925b:	74 4f                	je     c00192ac <cleanupTerminatedTask(ThreadControlBlock*)+0x192>
c001925d:	83 ec 0c             	sub    esp,0xc
c0019260:	68 e8 5b 02 c0       	push   0xc0025be8
c0019265:	e8 76 69 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001926a:	c7 04 24 e8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025be8
c0019271:	89 c7                	mov    edi,eax
c0019273:	e8 70 69 00 00       	call   c001fbe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0019278:	83 c4 10             	add    esp,0x10
c001927b:	84 c0                	test   al,al
c001927d:	0f 84 e2 00 00 00    	je     c0019365 <cleanupTerminatedTask(ThreadControlBlock*)+0x24b>
c0019283:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0019286:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001928c:	85 d2                	test   edx,edx
c001928e:	74 0f                	je     c001929f <cleanupTerminatedTask(ThreadControlBlock*)+0x185>
c0019290:	83 ec 0c             	sub    esp,0xc
c0019293:	8b 02                	mov    eax,DWORD PTR [edx]
c0019295:	52                   	push   edx
c0019296:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019299:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001929c:	83 c4 10             	add    esp,0x10
c001929f:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c00192a9:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c00192ac:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c00192b2:	85 db                	test   ebx,ebx
c00192b4:	74 16                	je     c00192cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1b2>
c00192b6:	83 ec 0c             	sub    esp,0xc
c00192b9:	53                   	push   ebx
c00192ba:	e8 97 54 ff ff       	call   c000e756 <VAS::~VAS()>
c00192bf:	5a                   	pop    edx
c00192c0:	59                   	pop    ecx
c00192c1:	6a 10                	push   0x10
c00192c3:	53                   	push   ebx
c00192c4:	e8 22 5e ff ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c00192c9:	83 c4 10             	add    esp,0x10
c00192cc:	83 ec 0c             	sub    esp,0xc
c00192cf:	68 5d 2e 02 c0       	push   0xc0022e5d
c00192d4:	e8 38 5f ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c00192d9:	83 c4 10             	add    esp,0x10
c00192dc:	50                   	push   eax
c00192dd:	50                   	push   eax
c00192de:	68 3b 07 00 00       	push   0x73b
c00192e3:	68 6b 2e 02 c0       	push   0xc0022e6b
c00192e8:	e8 24 5f ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c00192ed:	83 c4 2c             	add    esp,0x2c
c00192f0:	5b                   	pop    ebx
c00192f1:	5e                   	pop    esi
c00192f2:	5f                   	pop    edi
c00192f3:	5d                   	pop    ebp
c00192f4:	c3                   	ret    
c00192f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00192f9:	83 ec 0c             	sub    esp,0xc
c00192fc:	68 48 31 02 c0       	push   0xc0023148
c0019301:	e8 3a c7 ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c0019306:	83 c4 10             	add    esp,0x10
c0019309:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001930c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019310:	89 f7                	mov    edi,esi
c0019312:	e9 8f fe ff ff       	jmp    c00191a6 <cleanupTerminatedTask(ThreadControlBlock*)+0x8c>
c0019317:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001931d:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c0019323:	75 1c                	jne    c0019341 <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0019325:	83 ec 0c             	sub    esp,0xc
c0019328:	68 b0 31 02 c0       	push   0xc00231b0
c001932d:	e8 df 5e ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0019332:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019339:	e8 ad fb ff ff       	call   c0018eeb <blockTask(TaskState)>
c001933e:	83 c4 10             	add    esp,0x10
c0019341:	55                   	push   ebp
c0019342:	55                   	push   ebp
c0019343:	56                   	push   esi
c0019344:	68 e8 5b 02 c0       	push   0xc0025be8
c0019349:	e8 64 69 00 00       	call   c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001934e:	c7 04 24 e8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025be8
c0019355:	e8 86 68 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001935a:	83 c4 10             	add    esp,0x10
c001935d:	39 f8                	cmp    eax,edi
c001935f:	0f 84 1e ff ff ff    	je     c0019283 <cleanupTerminatedTask(ThreadControlBlock*)+0x169>
c0019365:	83 ec 0c             	sub    esp,0xc
c0019368:	68 e8 5b 02 c0       	push   0xc0025be8
c001936d:	e8 6e 68 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0019372:	89 c6                	mov    esi,eax
c0019374:	c7 04 24 e8 5b 02 c0 	mov    DWORD PTR [esp],0xc0025be8
c001937b:	e8 84 68 00 00       	call   c001fc04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0019380:	83 c4 10             	add    esp,0x10
c0019383:	39 f3                	cmp    ebx,esi
c0019385:	74 ba                	je     c0019341 <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0019387:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001938a:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001938d:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c0019393:	75 ac                	jne    c0019341 <cleanupTerminatedTask(ThreadControlBlock*)+0x227>
c0019395:	eb 80                	jmp    c0019317 <cleanupTerminatedTask(ThreadControlBlock*)+0x1fd>
c0019397:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001939b:	83 ec 0c             	sub    esp,0xc
c001939e:	68 7c 31 02 c0       	push   0xc002317c
c00193a3:	e9 59 ff ff ff       	jmp    c0019301 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e7>
c00193a8:	8b 36                	mov    esi,DWORD PTR [esi]
c00193aa:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00193ae:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c00193b1:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00193b4:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c00193ba:	01 d7                	add    edi,edx
c00193bc:	89 f8                	mov    eax,edi
c00193be:	e9 49 fe ff ff       	jmp    c001920c <cleanupTerminatedTask(ThreadControlBlock*)+0xf2>

c00193c3 <cleanerTaskFunction(void*)>:
c00193c3:	53                   	push   ebx
c00193c4:	83 ec 08             	sub    esp,0x8
c00193c7:	e8 7f f6 ff ff       	call   c0018a4b <unlockScheduler()>
c00193cc:	e8 78 f6 ff ff       	call   c0018a49 <lockScheduler()>
c00193d1:	80 3d ac 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025bac,0x0
c00193d8:	0f 85 8e 00 00 00    	jne    c001946c <cleanerTaskFunction(void*)+0xa9>
c00193de:	83 ec 0c             	sub    esp,0xc
c00193e1:	6a 02                	push   0x2
c00193e3:	e8 c2 fa ff ff       	call   c0018eaa <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00193e8:	83 c4 10             	add    esp,0x10
c00193eb:	c6 05 ac 5b 02 c0 00 	mov    BYTE PTR ds:0xc0025bac,0x0
c00193f2:	e8 79 f6 ff ff       	call   c0018a70 <lockStuff()>
c00193f7:	e8 4d f6 ff ff       	call   c0018a49 <lockScheduler()>
c00193fc:	83 ec 0c             	sub    esp,0xc
c00193ff:	68 d0 5b 02 c0       	push   0xc0025bd0
c0019404:	e8 df 67 00 00       	call   c001fbe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0019409:	83 c4 10             	add    esp,0x10
c001940c:	84 c0                	test   al,al
c001940e:	75 40                	jne    c0019450 <cleanerTaskFunction(void*)+0x8d>
c0019410:	83 ec 0c             	sub    esp,0xc
c0019413:	68 d0 5b 02 c0       	push   0xc0025bd0
c0019418:	e8 c3 67 00 00       	call   c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001941d:	89 c3                	mov    ebx,eax
c001941f:	c7 04 24 d0 5b 02 c0 	mov    DWORD PTR [esp],0xc0025bd0
c0019426:	e8 d9 67 00 00       	call   c001fc04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001942b:	c7 04 24 81 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e81
c0019432:	e8 da 5d ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0019437:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001943a:	e8 db fc ff ff       	call   c001911a <cleanupTerminatedTask(ThreadControlBlock*)>
c001943f:	c7 04 24 9a 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e9a
c0019446:	e8 c6 5d ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001944b:	83 c4 10             	add    esp,0x10
c001944e:	eb ac                	jmp    c00193fc <cleanerTaskFunction(void*)+0x39>
c0019450:	e8 f6 f5 ff ff       	call   c0018a4b <unlockScheduler()>
c0019455:	e8 bd f9 ff ff       	call   c0018e17 <unlockStuff()>
c001945a:	e8 ea f5 ff ff       	call   c0018a49 <lockScheduler()>
c001945f:	80 3d ac 5b 02 c0 00 	cmp    BYTE PTR ds:0xc0025bac,0x0
c0019466:	0f 84 72 ff ff ff    	je     c00193de <cleanerTaskFunction(void*)+0x1b>
c001946c:	e8 da f5 ff ff       	call   c0018a4b <unlockScheduler()>
c0019471:	e9 75 ff ff ff       	jmp    c00193eb <cleanerTaskFunction(void*)+0x28>

c0019476 <terminateTask(int)>:
c0019476:	83 ec 14             	sub    esp,0x14
c0019479:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001947e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0019481:	83 c0 0c             	add    eax,0xc
c0019484:	50                   	push   eax
c0019485:	68 d8 31 02 c0       	push   0xc00231d8
c001948a:	e8 82 5d ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001948f:	e8 dc f5 ff ff       	call   c0018a70 <lockStuff()>
c0019494:	e8 b0 f5 ff ff       	call   c0018a49 <lockScheduler()>
c0019499:	c7 04 24 ad 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ead
c00194a0:	e8 6c 5d ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c00194a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194aa:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00194ae:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c00194b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194b6:	59                   	pop    ecx
c00194b7:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00194ba:	5a                   	pop    edx
c00194bb:	50                   	push   eax
c00194bc:	68 d0 5b 02 c0       	push   0xc0025bd0
c00194c1:	e8 ec 67 00 00       	call   c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00194c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00194cb:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00194d2:	c7 04 24 c7 2e 02 c0 	mov    DWORD PTR [esp],0xc0022ec7
c00194d9:	e8 33 5d ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c00194de:	8b 0d a8 5b 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ba8
c00194e4:	83 c4 10             	add    esp,0x10
c00194e7:	85 c9                	test   ecx,ecx
c00194e9:	74 5b                	je     c0019546 <terminateTask(int)+0xd0>
c00194eb:	83 ec 0c             	sub    esp,0xc
c00194ee:	68 e1 2e 02 c0       	push   0xc0022ee1
c00194f3:	e8 19 5d ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c00194f8:	58                   	pop    eax
c00194f9:	8b 15 a8 5b 02 c0    	mov    edx,DWORD PTR ds:0xc0025ba8
c00194ff:	52                   	push   edx
c0019500:	c6 05 ac 5b 02 c0 01 	mov    BYTE PTR ds:0xc0025bac,0x1
c0019507:	e8 61 fb ff ff       	call   c001906d <unblockTask(ThreadControlBlock*)>
c001950c:	c7 04 24 fb 2e 02 c0 	mov    DWORD PTR [esp],0xc0022efb
c0019513:	e8 f9 5c ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0019518:	83 c4 10             	add    esp,0x10
c001951b:	e8 2b f5 ff ff       	call   c0018a4b <unlockScheduler()>
c0019520:	e8 f2 f8 ff ff       	call   c0018e17 <unlockStuff()>
c0019525:	83 ec 0c             	sub    esp,0xc
c0019528:	68 33 2f 02 c0       	push   0xc0022f33
c001952d:	e8 df 5c ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0019532:	83 c4 10             	add    esp,0x10
c0019535:	e8 0f f5 ff ff       	call   c0018a49 <lockScheduler()>
c001953a:	e8 53 f8 ff ff       	call   c0018d92 <schedule()>
c001953f:	e8 07 f5 ff ff       	call   c0018a4b <unlockScheduler()>
c0019544:	eb ef                	jmp    c0019535 <terminateTask(int)+0xbf>
c0019546:	83 ec 0c             	sub    esp,0xc
c0019549:	68 15 2f 02 c0       	push   0xc0022f15
c001954e:	e8 be 5c ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0019553:	83 c4 10             	add    esp,0x10
c0019556:	eb c3                	jmp    c001951b <terminateTask(int)+0xa5>

c0019558 <Thr::terminateFromIRQ(int)>:
c0019558:	83 ec 18             	sub    esp,0x18
c001955b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001955f:	50                   	push   eax
c0019560:	e8 11 ff ff ff       	call   c0019476 <terminateTask(int)>
c0019565:	90                   	nop

c0019566 <Semaphore::release()>:
c0019566:	83 ec 0c             	sub    esp,0xc
c0019569:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001956d:	e8 fe f4 ff ff       	call   c0018a70 <lockStuff()>
c0019572:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0019575:	85 c0                	test   eax,eax
c0019577:	74 1a                	je     c0019593 <Semaphore::release()+0x2d>
c0019579:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001957c:	83 ec 0c             	sub    esp,0xc
c001957f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0019582:	50                   	push   eax
c0019583:	e8 e5 fa ff ff       	call   c001906d <unblockTask(ThreadControlBlock*)>
c0019588:	83 c4 10             	add    esp,0x10
c001958b:	83 c4 0c             	add    esp,0xc
c001958e:	e9 84 f8 ff ff       	jmp    c0018e17 <unlockStuff()>
c0019593:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0019596:	48                   	dec    eax
c0019597:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
c001959a:	83 c4 0c             	add    esp,0xc
c001959d:	e9 75 f8 ff ff       	jmp    c0018e17 <unlockStuff()>

c00195a2 <__static_initialization_and_destruction_0(int, int)>:
c00195a2:	83 ec 0c             	sub    esp,0xc
c00195a5:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00195aa:	0f 85 88 00 00 00    	jne    c0019638 <__static_initialization_and_destruction_0(int, int)+0x96>
c00195b0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00195b8:	75 7e                	jne    c0019638 <__static_initialization_and_destruction_0(int, int)+0x96>
c00195ba:	83 ec 0c             	sub    esp,0xc
c00195bd:	68 e8 5b 02 c0       	push   0xc0025be8
c00195c2:	e8 d1 68 00 00       	call   c001fe98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00195c7:	83 c4 10             	add    esp,0x10
c00195ca:	83 ec 04             	sub    esp,0x4
c00195cd:	68 bc 3b 02 c0       	push   0xc0023bbc
c00195d2:	68 e8 5b 02 c0       	push   0xc0025be8
c00195d7:	68 58 fe 01 c0       	push   0xc001fe58
c00195dc:	e8 86 5a ff ff       	call   c000f067 <__cxa_atexit>
c00195e1:	83 c4 10             	add    esp,0x10
c00195e4:	83 ec 0c             	sub    esp,0xc
c00195e7:	68 dc 5b 02 c0       	push   0xc0025bdc
c00195ec:	e8 a7 68 00 00       	call   c001fe98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00195f1:	83 c4 10             	add    esp,0x10
c00195f4:	83 ec 04             	sub    esp,0x4
c00195f7:	68 bc 3b 02 c0       	push   0xc0023bbc
c00195fc:	68 dc 5b 02 c0       	push   0xc0025bdc
c0019601:	68 58 fe 01 c0       	push   0xc001fe58
c0019606:	e8 5c 5a ff ff       	call   c000f067 <__cxa_atexit>
c001960b:	83 c4 10             	add    esp,0x10
c001960e:	83 ec 0c             	sub    esp,0xc
c0019611:	68 d0 5b 02 c0       	push   0xc0025bd0
c0019616:	e8 7d 68 00 00       	call   c001fe98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001961b:	83 c4 10             	add    esp,0x10
c001961e:	83 ec 04             	sub    esp,0x4
c0019621:	68 bc 3b 02 c0       	push   0xc0023bbc
c0019626:	68 d0 5b 02 c0       	push   0xc0025bd0
c001962b:	68 58 fe 01 c0       	push   0xc001fe58
c0019630:	e8 32 5a ff ff       	call   c000f067 <__cxa_atexit>
c0019635:	83 c4 10             	add    esp,0x10
c0019638:	90                   	nop
c0019639:	83 c4 0c             	add    esp,0xc
c001963c:	c3                   	ret    

c001963d <_GLOBAL__sub_I_kernelProcess>:
c001963d:	83 ec 0c             	sub    esp,0xc
c0019640:	83 ec 08             	sub    esp,0x8
c0019643:	68 ff ff 00 00       	push   0xffff
c0019648:	6a 01                	push   0x1
c001964a:	e8 53 ff ff ff       	call   c00195a2 <__static_initialization_and_destruction_0(int, int)>
c001964f:	83 c4 10             	add    esp,0x10
c0019652:	83 c4 0c             	add    esp,0xc
c0019655:	c3                   	ret    

c0019656 <Vm::vm8086EntryPoint(void*)>:
c0019656:	83 ec 0c             	sub    esp,0xc
c0019659:	e8 ed f3 ff ff       	call   c0018a4b <unlockScheduler()>
c001965e:	fb                   	sti    
c001965f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019664:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c0019668:	52                   	push   edx
c0019669:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001966d:	52                   	push   edx
c001966e:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0019672:	52                   	push   edx
c0019673:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c0019677:	50                   	push   eax
c0019678:	e8 ea 6b fe ff       	call   c0000267 <goToVM86>
c001967d:	83 c4 1c             	add    esp,0x1c
c0019680:	c3                   	ret    

c0019681 <Vm::inbv(unsigned short)>:
c0019681:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019685:	ec                   	in     al,dx
c0019686:	c3                   	ret    

c0019687 <Vm::outbv(unsigned short, unsigned char)>:
c0019687:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001968b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001968f:	ee                   	out    dx,al
c0019690:	c3                   	ret    

c0019691 <Vm::realToLinear(unsigned short, unsigned short)>:
c0019691:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0019696:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001969b:	c1 e0 04             	shl    eax,0x4
c001969e:	01 d0                	add    eax,edx
c00196a0:	c3                   	ret    

c00196a1 <Vm::getSegment(unsigned int)>:
c00196a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196a5:	c1 e8 10             	shr    eax,0x10
c00196a8:	c3                   	ret    

c00196a9 <Vm::getOffset(unsigned int)>:
c00196a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00196ad:	c3                   	ret    

c00196ae <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00196ae:	55                   	push   ebp
c00196af:	57                   	push   edi
c00196b0:	56                   	push   esi
c00196b1:	53                   	push   ebx
c00196b2:	83 ec 2c             	sub    esp,0x2c
c00196b5:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c00196b9:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00196bd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00196c1:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00196c5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00196c9:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c00196cd:	e8 77 f3 ff ff       	call   c0018a49 <lockScheduler()>
c00196d2:	68 80 00 00 00       	push   0x80
c00196d7:	6a 00                	push   0x0
c00196d9:	68 56 96 01 c0       	push   0xc0019656
c00196de:	55                   	push   ebp
c00196df:	e8 9a f4 ff ff       	call   c0018b7e <Process::createThread(void (*)(void*), void*, int)>
c00196e4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00196e8:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c00196ec:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c00196f0:	66 89 78 59          	mov    WORD PTR [eax+0x59],di
c00196f4:	66 89 70 5b          	mov    WORD PTR [eax+0x5b],si
c00196f8:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c00196fc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0019703:	e8 d4 59 ff ff       	call   c000f0dc <operator new(unsigned long)>
c0019708:	83 c4 0c             	add    esp,0xc
c001970b:	55                   	push   ebp
c001970c:	89 c3                	mov    ebx,eax
c001970e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019712:	50                   	push   eax
c0019713:	e8 30 60 ff ff       	call   c000f748 <File::File(char const*, Process*)>
c0019718:	83 c4 0c             	add    esp,0xc
c001971b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001971f:	50                   	push   eax
c0019720:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019724:	50                   	push   eax
c0019725:	53                   	push   ebx
c0019726:	e8 2d 63 ff ff       	call   c000fa58 <File::stat(unsigned long long*, bool*)>
c001972b:	8a 54 24 23          	mov    dl,BYTE PTR [esp+0x23]
c001972f:	83 c4 10             	add    esp,0x10
c0019732:	84 d2                	test   dl,dl
c0019734:	74 1c                	je     c0019752 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xa4>
c0019736:	83 ec 0c             	sub    esp,0xc
c0019739:	68 f7 31 02 c0       	push   0xc00231f7
c001973e:	e8 fd c2 ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c0019743:	e8 03 f3 ff ff       	call   c0018a4b <unlockScheduler()>
c0019748:	83 c4 10             	add    esp,0x10
c001974b:	31 d2                	xor    edx,edx
c001974d:	e9 81 00 00 00       	jmp    c00197d3 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0019752:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019756:	51                   	push   ecx
c0019757:	51                   	push   ecx
c0019758:	6a 01                	push   0x1
c001975a:	53                   	push   ebx
c001975b:	e8 4c 60 ff ff       	call   c000f7ac <File::open(FileOpenMode)>
c0019760:	83 c4 10             	add    esp,0x10
c0019763:	85 c0                	test   eax,eax
c0019765:	74 1b                	je     c0019782 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd4>
c0019767:	83 ec 0c             	sub    esp,0xc
c001976a:	68 10 32 02 c0       	push   0xc0023210
c001976f:	e8 cc c2 ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c0019774:	e8 d2 f2 ff ff       	call   c0018a4b <unlockScheduler()>
c0019779:	83 c4 10             	add    esp,0x10
c001977c:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0019780:	eb 51                	jmp    c00197d3 <Vm::loadFileAsThread(Process*, char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c0019782:	83 ec 0c             	sub    esp,0xc
c0019785:	0f b7 ff             	movzx  edi,di
c0019788:	6a 07                	push   0x7
c001978a:	68 00 01 00 00       	push   0x100
c001978f:	6a 00                	push   0x0
c0019791:	6a 00                	push   0x0
c0019793:	ff b5 32 05 00 00    	push   DWORD PTR [ebp+0x532]
c0019799:	e8 16 54 ff ff       	call   c000ebb4 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001979e:	83 c4 18             	add    esp,0x18
c00197a1:	0f b7 f6             	movzx  esi,si
c00197a4:	57                   	push   edi
c00197a5:	56                   	push   esi
c00197a6:	e8 e6 fe ff ff       	call   c0019691 <Vm::realToLinear(unsigned short, unsigned short)>
c00197ab:	5a                   	pop    edx
c00197ac:	8b 13                	mov    edx,DWORD PTR [ebx]
c00197ae:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00197b2:	51                   	push   ecx
c00197b3:	50                   	push   eax
c00197b4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00197b8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00197bc:	53                   	push   ebx
c00197bd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00197c0:	83 c4 14             	add    esp,0x14
c00197c3:	53                   	push   ebx
c00197c4:	e8 41 60 ff ff       	call   c000f80a <File::close()>
c00197c9:	e8 7d f2 ff ff       	call   c0018a4b <unlockScheduler()>
c00197ce:	83 c4 10             	add    esp,0x10
c00197d1:	b2 01                	mov    dl,0x1
c00197d3:	83 c4 2c             	add    esp,0x2c
c00197d6:	88 d0                	mov    al,dl
c00197d8:	5b                   	pop    ebx
c00197d9:	5e                   	pop    esi
c00197da:	5f                   	pop    edi
c00197db:	5d                   	pop    ebp
c00197dc:	c3                   	ret    

c00197dd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00197dd:	57                   	push   edi
c00197de:	56                   	push   esi
c00197df:	53                   	push   ebx
c00197e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00197e4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00197e8:	83 e8 06             	sub    eax,0x6
c00197eb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00197ef:	0f b7 c0             	movzx  eax,ax
c00197f2:	50                   	push   eax
c00197f3:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00197f8:	50                   	push   eax
c00197f9:	e8 93 fe ff ff       	call   c0019691 <Vm::realToLinear(unsigned short, unsigned short)>
c00197fe:	5a                   	pop    edx
c00197ff:	5e                   	pop    esi
c0019800:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c0019803:	8d 56 fa             	lea    edx,[esi-0x6]
c0019806:	81 e2 ff ff 00 00    	and    edx,0xffff
c001980c:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001980f:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c0019812:	83 c2 02             	add    edx,0x2
c0019815:	66 89 10             	mov    WORD PTR [eax],dx
c0019818:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001981b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001981f:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c0019822:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0019826:	89 d6                	mov    esi,edx
c0019828:	66 81 e6 ff fd       	and    si,0xfdff
c001982d:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0019833:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c0019837:	74 07                	je     c0019840 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0019839:	89 d6                	mov    esi,edx
c001983b:	66 81 ce 00 02       	or     si,0x200
c0019840:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0019844:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019849:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001984d:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0019855:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0019858:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0019860:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0019863:	5b                   	pop    ebx
c0019864:	5e                   	pop    esi
c0019865:	5f                   	pop    edi
c0019866:	c3                   	ret    

c0019867 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0019867:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001986c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019871:	c1 e0 04             	shl    eax,0x4
c0019874:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0019877:	c3                   	ret    

c0019878 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0019878:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001987d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019882:	c1 e0 04             	shl    eax,0x4
c0019885:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0019889:	c3                   	ret    

c001988a <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001988a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001988f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0019894:	c1 e0 04             	shl    eax,0x4
c0019897:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001989a:	c3                   	ret    

c001989b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001989b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00198a0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198a5:	c1 e0 04             	shl    eax,0x4
c00198a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198ac:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00198af:	c3                   	ret    

c00198b0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00198b0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00198b5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198ba:	c1 e0 04             	shl    eax,0x4
c00198bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198c1:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00198c5:	c3                   	ret    

c00198c6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00198c6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00198cb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00198d0:	c1 e0 04             	shl    eax,0x4
c00198d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00198d7:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00198da:	c3                   	ret    

c00198db <Vm::faultHandler(regs*)>:
c00198db:	55                   	push   ebp
c00198dc:	57                   	push   edi
c00198dd:	56                   	push   esi
c00198de:	53                   	push   ebx
c00198df:	83 ec 1c             	sub    esp,0x1c
c00198e2:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00198e6:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00198ea:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00198ed:	52                   	push   edx
c00198ee:	0f b7 f0             	movzx  esi,ax
c00198f1:	0f b7 c0             	movzx  eax,ax
c00198f4:	50                   	push   eax
c00198f5:	e8 97 fd ff ff       	call   c0019691 <Vm::realToLinear(unsigned short, unsigned short)>
c00198fa:	5a                   	pop    edx
c00198fb:	89 c7                	mov    edi,eax
c00198fd:	59                   	pop    ecx
c00198fe:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019901:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019905:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c0019908:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001990d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019911:	0f b7 c5             	movzx  eax,bp
c0019914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019918:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001991c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0019920:	e8 6c fd ff ff       	call   c0019691 <Vm::realToLinear(unsigned short, unsigned short)>
c0019925:	5a                   	pop    edx
c0019926:	59                   	pop    ecx
c0019927:	b1 06                	mov    cl,0x6
c0019929:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001992e:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0019933:	0f b6 17             	movzx  edx,BYTE PTR [edi]
c0019936:	80 fa 9d             	cmp    dl,0x9d
c0019939:	0f 84 1d 02 00 00    	je     c0019b5c <Vm::faultHandler(regs*)+0x281>
c001993f:	0f 87 8e 00 00 00    	ja     c00199d3 <Vm::faultHandler(regs*)+0xf8>
c0019945:	80 fa 66             	cmp    dl,0x66
c0019948:	0f 84 89 01 00 00    	je     c0019ad7 <Vm::faultHandler(regs*)+0x1fc>
c001994e:	77 44                	ja     c0019994 <Vm::faultHandler(regs*)+0xb9>
c0019950:	80 fa 36             	cmp    dl,0x36
c0019953:	0f 84 74 01 00 00    	je     c0019acd <Vm::faultHandler(regs*)+0x1f2>
c0019959:	77 1a                	ja     c0019975 <Vm::faultHandler(regs*)+0x9a>
c001995b:	80 fa 26             	cmp    dl,0x26
c001995e:	0f 84 4b 01 00 00    	je     c0019aaf <Vm::faultHandler(regs*)+0x1d4>
c0019964:	80 fa 2e             	cmp    dl,0x2e
c0019967:	0f 85 4a 05 00 00    	jne    c0019eb7 <Vm::faultHandler(regs*)+0x5dc>
c001996d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019970:	31 c9                	xor    ecx,ecx
c0019972:	47                   	inc    edi
c0019973:	eb be                	jmp    c0019933 <Vm::faultHandler(regs*)+0x58>
c0019975:	80 fa 64             	cmp    dl,0x64
c0019978:	0f 84 3b 01 00 00    	je     c0019ab9 <Vm::faultHandler(regs*)+0x1de>
c001997e:	0f 87 3f 01 00 00    	ja     c0019ac3 <Vm::faultHandler(regs*)+0x1e8>
c0019984:	80 fa 3e             	cmp    dl,0x3e
c0019987:	0f 85 2a 05 00 00    	jne    c0019eb7 <Vm::faultHandler(regs*)+0x5dc>
c001998d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019990:	b1 01                	mov    cl,0x1
c0019992:	eb de                	jmp    c0019972 <Vm::faultHandler(regs*)+0x97>
c0019994:	80 fa 6d             	cmp    dl,0x6d
c0019997:	0f 84 bf 02 00 00    	je     c0019c5c <Vm::faultHandler(regs*)+0x381>
c001999d:	77 17                	ja     c00199b6 <Vm::faultHandler(regs*)+0xdb>
c001999f:	80 fa 67             	cmp    dl,0x67
c00199a2:	0f 84 3c 01 00 00    	je     c0019ae4 <Vm::faultHandler(regs*)+0x209>
c00199a8:	80 fa 6c             	cmp    dl,0x6c
c00199ab:	0f 84 5d 02 00 00    	je     c0019c0e <Vm::faultHandler(regs*)+0x333>
c00199b1:	e9 01 05 00 00       	jmp    c0019eb7 <Vm::faultHandler(regs*)+0x5dc>
c00199b6:	80 fa 6f             	cmp    dl,0x6f
c00199b9:	0f 84 8b 03 00 00    	je     c0019d4a <Vm::faultHandler(regs*)+0x46f>
c00199bf:	0f 82 0f 03 00 00    	jb     c0019cd4 <Vm::faultHandler(regs*)+0x3f9>
c00199c5:	80 fa 9c             	cmp    dl,0x9c
c00199c8:	0f 84 23 01 00 00    	je     c0019af1 <Vm::faultHandler(regs*)+0x216>
c00199ce:	e9 e4 04 00 00       	jmp    c0019eb7 <Vm::faultHandler(regs*)+0x5dc>
c00199d3:	80 fa ec             	cmp    dl,0xec
c00199d6:	0f 84 7f 04 00 00    	je     c0019e5b <Vm::faultHandler(regs*)+0x580>
c00199dc:	77 7b                	ja     c0019a59 <Vm::faultHandler(regs*)+0x17e>
c00199de:	80 fa e4             	cmp    dl,0xe4
c00199e1:	0f 84 fe 03 00 00    	je     c0019de5 <Vm::faultHandler(regs*)+0x50a>
c00199e7:	77 53                	ja     c0019a3c <Vm::faultHandler(regs*)+0x161>
c00199e9:	80 fa cd             	cmp    dl,0xcd
c00199ec:	0f 84 cd 01 00 00    	je     c0019bbf <Vm::faultHandler(regs*)+0x2e4>
c00199f2:	80 fa cf             	cmp    dl,0xcf
c00199f5:	0f 85 bc 04 00 00    	jne    c0019eb7 <Vm::faultHandler(regs*)+0x5dc>
c00199fb:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00199fe:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0019a01:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0019a05:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0019a08:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c0019a0c:	81 ca 00 02 02 00    	or     edx,0x20200
c0019a12:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019a15:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c0019a19:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019a1f:	66 c1 e8 09          	shr    ax,0x9
c0019a23:	83 e0 01             	and    eax,0x1
c0019a26:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019a29:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019a2c:	83 c0 06             	add    eax,0x6
c0019a2f:	25 ff ff 00 00       	and    eax,0xffff
c0019a34:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019a37:	e9 77 04 00 00       	jmp    c0019eb3 <Vm::faultHandler(regs*)+0x5d8>
c0019a3c:	80 fa e6             	cmp    dl,0xe6
c0019a3f:	0f 84 ea 03 00 00    	je     c0019e2f <Vm::faultHandler(regs*)+0x554>
c0019a45:	0f 82 b6 03 00 00    	jb     c0019e01 <Vm::faultHandler(regs*)+0x526>
c0019a4b:	80 fa e7             	cmp    dl,0xe7
c0019a4e:	0f 84 f2 03 00 00    	je     c0019e46 <Vm::faultHandler(regs*)+0x56b>
c0019a54:	e9 5e 04 00 00       	jmp    c0019eb7 <Vm::faultHandler(regs*)+0x5dc>
c0019a59:	80 fa ef             	cmp    dl,0xef
c0019a5c:	0f 84 3c 04 00 00    	je     c0019e9e <Vm::faultHandler(regs*)+0x5c3>
c0019a62:	77 28                	ja     c0019a8c <Vm::faultHandler(regs*)+0x1b1>
c0019a64:	80 fa ed             	cmp    dl,0xed
c0019a67:	0f 84 0a 04 00 00    	je     c0019e77 <Vm::faultHandler(regs*)+0x59c>
c0019a6d:	80 fa ee             	cmp    dl,0xee
c0019a70:	0f 85 41 04 00 00    	jne    c0019eb7 <Vm::faultHandler(regs*)+0x5dc>
c0019a76:	50                   	push   eax
c0019a77:	50                   	push   eax
c0019a78:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019a7c:	50                   	push   eax
c0019a7d:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019a81:	50                   	push   eax
c0019a82:	e8 00 fc ff ff       	call   c0019687 <Vm::outbv(unsigned short, unsigned char)>
c0019a87:	e9 0a 04 00 00       	jmp    c0019e96 <Vm::faultHandler(regs*)+0x5bb>
c0019a8c:	80 fa fa             	cmp    dl,0xfa
c0019a8f:	0f 84 5d 01 00 00    	je     c0019bf2 <Vm::faultHandler(regs*)+0x317>
c0019a95:	80 fa fb             	cmp    dl,0xfb
c0019a98:	0f 84 62 01 00 00    	je     c0019c00 <Vm::faultHandler(regs*)+0x325>
c0019a9e:	80 fa f3             	cmp    dl,0xf3
c0019aa1:	0f 85 10 04 00 00    	jne    c0019eb7 <Vm::faultHandler(regs*)+0x5dc>
c0019aa7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019aaa:	e9 c3 fe ff ff       	jmp    c0019972 <Vm::faultHandler(regs*)+0x97>
c0019aaf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ab2:	b1 02                	mov    cl,0x2
c0019ab4:	e9 b9 fe ff ff       	jmp    c0019972 <Vm::faultHandler(regs*)+0x97>
c0019ab9:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019abc:	b1 03                	mov    cl,0x3
c0019abe:	e9 af fe ff ff       	jmp    c0019972 <Vm::faultHandler(regs*)+0x97>
c0019ac3:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ac6:	b1 04                	mov    cl,0x4
c0019ac8:	e9 a5 fe ff ff       	jmp    c0019972 <Vm::faultHandler(regs*)+0x97>
c0019acd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ad0:	b1 05                	mov    cl,0x5
c0019ad2:	e9 9b fe ff ff       	jmp    c0019972 <Vm::faultHandler(regs*)+0x97>
c0019ad7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ada:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0019adf:	e9 8e fe ff ff       	jmp    c0019972 <Vm::faultHandler(regs*)+0x97>
c0019ae4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019ae7:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c0019aec:	e9 81 fe ff ff       	jmp    c0019972 <Vm::faultHandler(regs*)+0x97>
c0019af1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0019af4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0019af8:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019afd:	74 30                	je     c0019b2f <Vm::faultHandler(regs*)+0x254>
c0019aff:	83 e9 04             	sub    ecx,0x4
c0019b02:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019b08:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019b0e:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019b11:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019b14:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019b1a:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019b1e:	0f 84 8c 03 00 00    	je     c0019eb0 <Vm::faultHandler(regs*)+0x5d5>
c0019b24:	80 ce 02             	or     dh,0x2
c0019b27:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0019b2a:	e9 81 03 00 00       	jmp    c0019eb0 <Vm::faultHandler(regs*)+0x5d5>
c0019b2f:	83 e9 02             	sub    ecx,0x2
c0019b32:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019b38:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0019b3b:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019b3f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0019b45:	80 79 61 00          	cmp    BYTE PTR [ecx+0x61],0x0
c0019b49:	74 05                	je     c0019b50 <Vm::faultHandler(regs*)+0x275>
c0019b4b:	80 ce 02             	or     dh,0x2
c0019b4e:	eb 03                	jmp    c0019b53 <Vm::faultHandler(regs*)+0x278>
c0019b50:	80 e6 fd             	and    dh,0xfd
c0019b53:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0019b57:	e9 54 03 00 00       	jmp    c0019eb0 <Vm::faultHandler(regs*)+0x5d5>
c0019b5c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019b61:	74 2a                	je     c0019b8d <Vm::faultHandler(regs*)+0x2b2>
c0019b63:	8b 10                	mov    edx,DWORD PTR [eax]
c0019b65:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0019b6b:	81 ca 00 02 02 00    	or     edx,0x20200
c0019b71:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019b74:	8b 00                	mov    eax,DWORD PTR [eax]
c0019b76:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019b7c:	c1 e8 09             	shr    eax,0x9
c0019b7f:	83 e0 01             	and    eax,0x1
c0019b82:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019b85:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019b88:	83 c0 04             	add    eax,0x4
c0019b8b:	eb 25                	jmp    c0019bb2 <Vm::faultHandler(regs*)+0x2d7>
c0019b8d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0019b90:	81 ca 00 02 02 00    	or     edx,0x20200
c0019b96:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0019b99:	66 8b 00             	mov    ax,WORD PTR [eax]
c0019b9c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0019ba2:	66 c1 e8 09          	shr    ax,0x9
c0019ba6:	83 e0 01             	and    eax,0x1
c0019ba9:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c0019bac:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0019baf:	83 c0 02             	add    eax,0x2
c0019bb2:	25 ff ff 00 00       	and    eax,0xffff
c0019bb7:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0019bba:	e9 f1 02 00 00       	jmp    c0019eb0 <Vm::faultHandler(regs*)+0x5d5>
c0019bbf:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019bc3:	3c ff                	cmp    al,0xff
c0019bc5:	75 10                	jne    c0019bd7 <Vm::faultHandler(regs*)+0x2fc>
c0019bc7:	83 ec 0c             	sub    esp,0xc
c0019bca:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0019bcd:	e8 86 f9 ff ff       	call   c0019558 <Thr::terminateFromIRQ(int)>
c0019bd2:	e9 c2 02 00 00       	jmp    c0019e99 <Vm::faultHandler(regs*)+0x5be>
c0019bd7:	83 ec 0c             	sub    esp,0xc
c0019bda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019bde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019be2:	57                   	push   edi
c0019be3:	50                   	push   eax
c0019be4:	53                   	push   ebx
c0019be5:	e8 f3 fb ff ff       	call   c00197dd <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0019bea:	83 c4 20             	add    esp,0x20
c0019bed:	e9 c1 02 00 00       	jmp    c0019eb3 <Vm::faultHandler(regs*)+0x5d8>
c0019bf2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019bf7:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0019bfb:	e9 b0 02 00 00       	jmp    c0019eb0 <Vm::faultHandler(regs*)+0x5d5>
c0019c00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019c05:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c0019c09:	e9 a2 02 00 00       	jmp    c0019eb0 <Vm::faultHandler(regs*)+0x5d5>
c0019c0e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019c13:	74 0d                	je     c0019c22 <Vm::faultHandler(regs*)+0x347>
c0019c15:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0019c1c:	0f 87 e9 02 00 00    	ja     c0019f0b <Vm::faultHandler(regs*)+0x630>
c0019c22:	83 ec 0c             	sub    esp,0xc
c0019c25:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0019c28:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019c2c:	50                   	push   eax
c0019c2d:	e8 4f fa ff ff       	call   c0019681 <Vm::inbv(unsigned short)>
c0019c32:	83 c4 0c             	add    esp,0xc
c0019c35:	0f b6 c0             	movzx  eax,al
c0019c38:	50                   	push   eax
c0019c39:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0019c3d:	0f b7 c9             	movzx  ecx,cx
c0019c40:	50                   	push   eax
c0019c41:	51                   	push   ecx
c0019c42:	e8 54 fc ff ff       	call   c001989b <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0019c47:	83 c4 10             	add    esp,0x10
c0019c4a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019c4d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019c51:	74 03                	je     c0019c56 <Vm::faultHandler(regs*)+0x37b>
c0019c53:	48                   	dec    eax
c0019c54:	eb 01                	jmp    c0019c57 <Vm::faultHandler(regs*)+0x37c>
c0019c56:	40                   	inc    eax
c0019c57:	0f b7 c0             	movzx  eax,ax
c0019c5a:	eb 70                	jmp    c0019ccc <Vm::faultHandler(regs*)+0x3f1>
c0019c5c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019c5f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0019c62:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019c67:	74 0c                	je     c0019c75 <Vm::faultHandler(regs*)+0x39a>
c0019c69:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019c6f:	0f 87 96 02 00 00    	ja     c0019f0b <Vm::faultHandler(regs*)+0x630>
c0019c75:	0f b7 c9             	movzx  ecx,cx
c0019c78:	0f b7 f6             	movzx  esi,si
c0019c7b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019c7e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019c83:	74 20                	je     c0019ca5 <Vm::faultHandler(regs*)+0x3ca>
c0019c85:	ed                   	in     eax,dx
c0019c86:	55                   	push   ebp
c0019c87:	50                   	push   eax
c0019c88:	51                   	push   ecx
c0019c89:	56                   	push   esi
c0019c8a:	e8 37 fc ff ff       	call   c00198c6 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0019c8f:	83 c4 10             	add    esp,0x10
c0019c92:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019c95:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019c99:	74 05                	je     c0019ca0 <Vm::faultHandler(regs*)+0x3c5>
c0019c9b:	83 e8 04             	sub    eax,0x4
c0019c9e:	eb 27                	jmp    c0019cc7 <Vm::faultHandler(regs*)+0x3ec>
c0019ca0:	83 c0 04             	add    eax,0x4
c0019ca3:	eb 22                	jmp    c0019cc7 <Vm::faultHandler(regs*)+0x3ec>
c0019ca5:	66 ed                	in     ax,dx
c0019ca7:	0f b7 c0             	movzx  eax,ax
c0019caa:	57                   	push   edi
c0019cab:	50                   	push   eax
c0019cac:	51                   	push   ecx
c0019cad:	56                   	push   esi
c0019cae:	e8 fd fb ff ff       	call   c00198b0 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0019cb3:	83 c4 10             	add    esp,0x10
c0019cb6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0019cb9:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019cbd:	74 05                	je     c0019cc4 <Vm::faultHandler(regs*)+0x3e9>
c0019cbf:	83 e8 02             	sub    eax,0x2
c0019cc2:	eb 03                	jmp    c0019cc7 <Vm::faultHandler(regs*)+0x3ec>
c0019cc4:	83 c0 02             	add    eax,0x2
c0019cc7:	25 ff ff 00 00       	and    eax,0xffff
c0019ccc:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0019ccf:	e9 dc 01 00 00       	jmp    c0019eb0 <Vm::faultHandler(regs*)+0x5d5>
c0019cd4:	49                   	dec    ecx
c0019cd5:	80 f9 05             	cmp    cl,0x5
c0019cd8:	77 24                	ja     c0019cfe <Vm::faultHandler(regs*)+0x423>
c0019cda:	0f b6 c9             	movzx  ecx,cl
c0019cdd:	ff 24 8d 58 32 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdcda8]
c0019ce4:	0f b7 f5             	movzx  esi,bp
c0019ce7:	eb 15                	jmp    c0019cfe <Vm::faultHandler(regs*)+0x423>
c0019ce9:	0f b7 73 0c          	movzx  esi,WORD PTR [ebx+0xc]
c0019ced:	eb 0f                	jmp    c0019cfe <Vm::faultHandler(regs*)+0x423>
c0019cef:	0f b7 73 08          	movzx  esi,WORD PTR [ebx+0x8]
c0019cf3:	eb 09                	jmp    c0019cfe <Vm::faultHandler(regs*)+0x423>
c0019cf5:	0f b7 73 04          	movzx  esi,WORD PTR [ebx+0x4]
c0019cf9:	eb 03                	jmp    c0019cfe <Vm::faultHandler(regs*)+0x423>
c0019cfb:	0f b7 33             	movzx  esi,WORD PTR [ebx]
c0019cfe:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019d01:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019d06:	74 0b                	je     c0019d13 <Vm::faultHandler(regs*)+0x438>
c0019d08:	3d ff ff 00 00       	cmp    eax,0xffff
c0019d0d:	0f 87 f8 01 00 00    	ja     c0019f0b <Vm::faultHandler(regs*)+0x630>
c0019d13:	52                   	push   edx
c0019d14:	52                   	push   edx
c0019d15:	0f b7 c0             	movzx  eax,ax
c0019d18:	50                   	push   eax
c0019d19:	56                   	push   esi
c0019d1a:	e8 48 fb ff ff       	call   c0019867 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0019d1f:	59                   	pop    ecx
c0019d20:	5e                   	pop    esi
c0019d21:	0f b6 c0             	movzx  eax,al
c0019d24:	50                   	push   eax
c0019d25:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019d29:	50                   	push   eax
c0019d2a:	e8 58 f9 ff ff       	call   c0019687 <Vm::outbv(unsigned short, unsigned char)>
c0019d2f:	83 c4 10             	add    esp,0x10
c0019d32:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0019d35:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0019d39:	74 03                	je     c0019d3e <Vm::faultHandler(regs*)+0x463>
c0019d3b:	48                   	dec    eax
c0019d3c:	eb 01                	jmp    c0019d3f <Vm::faultHandler(regs*)+0x464>
c0019d3e:	40                   	inc    eax
c0019d3f:	0f b7 c0             	movzx  eax,ax
c0019d42:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0019d45:	e9 66 01 00 00       	jmp    c0019eb0 <Vm::faultHandler(regs*)+0x5d5>
c0019d4a:	49                   	dec    ecx
c0019d4b:	80 f9 05             	cmp    cl,0x5
c0019d4e:	77 1f                	ja     c0019d6f <Vm::faultHandler(regs*)+0x494>
c0019d50:	0f b6 c9             	movzx  ecx,cl
c0019d53:	ff 24 8d 70 32 02 c0 	jmp    DWORD PTR [ecx*4-0x3ffdcd90]
c0019d5a:	89 ee                	mov    esi,ebp
c0019d5c:	eb 11                	jmp    c0019d6f <Vm::faultHandler(regs*)+0x494>
c0019d5e:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0019d61:	eb 0c                	jmp    c0019d6f <Vm::faultHandler(regs*)+0x494>
c0019d63:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0019d66:	eb 07                	jmp    c0019d6f <Vm::faultHandler(regs*)+0x494>
c0019d68:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0019d6b:	eb 02                	jmp    c0019d6f <Vm::faultHandler(regs*)+0x494>
c0019d6d:	8b 33                	mov    esi,DWORD PTR [ebx]
c0019d6f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0019d72:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0019d77:	74 0c                	je     c0019d85 <Vm::faultHandler(regs*)+0x4aa>
c0019d79:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0019d7f:	0f 87 86 01 00 00    	ja     c0019f0b <Vm::faultHandler(regs*)+0x630>
c0019d85:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c0019d88:	0f b7 d6             	movzx  edx,si
c0019d8b:	81 e7 00 04 00 00    	and    edi,0x400
c0019d91:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0019d94:	0f b7 c1             	movzx  eax,cx
c0019d97:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019d9c:	74 1d                	je     c0019dbb <Vm::faultHandler(regs*)+0x4e0>
c0019d9e:	55                   	push   ebp
c0019d9f:	55                   	push   ebp
c0019da0:	50                   	push   eax
c0019da1:	52                   	push   edx
c0019da2:	e8 e3 fa ff ff       	call   c001988a <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0019da7:	83 c4 10             	add    esp,0x10
c0019daa:	89 f2                	mov    edx,esi
c0019dac:	ef                   	out    dx,eax
c0019dad:	85 ff                	test   edi,edi
c0019daf:	74 05                	je     c0019db6 <Vm::faultHandler(regs*)+0x4db>
c0019db1:	83 e9 04             	sub    ecx,0x4
c0019db4:	eb 21                	jmp    c0019dd7 <Vm::faultHandler(regs*)+0x4fc>
c0019db6:	83 c1 04             	add    ecx,0x4
c0019db9:	eb 1c                	jmp    c0019dd7 <Vm::faultHandler(regs*)+0x4fc>
c0019dbb:	55                   	push   ebp
c0019dbc:	55                   	push   ebp
c0019dbd:	50                   	push   eax
c0019dbe:	52                   	push   edx
c0019dbf:	e8 b4 fa ff ff       	call   c0019878 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0019dc4:	83 c4 10             	add    esp,0x10
c0019dc7:	89 f2                	mov    edx,esi
c0019dc9:	66 ef                	out    dx,ax
c0019dcb:	85 ff                	test   edi,edi
c0019dcd:	74 05                	je     c0019dd4 <Vm::faultHandler(regs*)+0x4f9>
c0019dcf:	83 e9 02             	sub    ecx,0x2
c0019dd2:	eb 03                	jmp    c0019dd7 <Vm::faultHandler(regs*)+0x4fc>
c0019dd4:	83 c1 02             	add    ecx,0x2
c0019dd7:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0019ddd:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0019de0:	e9 cb 00 00 00       	jmp    c0019eb0 <Vm::faultHandler(regs*)+0x5d5>
c0019de5:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019dec:	83 ec 0c             	sub    esp,0xc
c0019def:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019df3:	50                   	push   eax
c0019df4:	e8 88 f8 ff ff       	call   c0019681 <Vm::inbv(unsigned short)>
c0019df9:	0f b6 c0             	movzx  eax,al
c0019dfc:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019dff:	eb 3f                	jmp    c0019e40 <Vm::faultHandler(regs*)+0x565>
c0019e01:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e06:	74 07                	je     c0019e0f <Vm::faultHandler(regs*)+0x534>
c0019e08:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019e0c:	ed                   	in     eax,dx
c0019e0d:	eb 14                	jmp    c0019e23 <Vm::faultHandler(regs*)+0x548>
c0019e0f:	8b 4b 2c             	mov    ecx,DWORD PTR [ebx+0x2c]
c0019e12:	66 31 c9             	xor    cx,cx
c0019e15:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0019e18:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019e1c:	66 ed                	in     ax,dx
c0019e1e:	0f b7 c0             	movzx  eax,ax
c0019e21:	09 c8                	or     eax,ecx
c0019e23:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019e26:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019e2a:	e9 84 00 00 00       	jmp    c0019eb3 <Vm::faultHandler(regs*)+0x5d8>
c0019e2f:	52                   	push   edx
c0019e30:	52                   	push   edx
c0019e31:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0019e35:	50                   	push   eax
c0019e36:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019e3a:	50                   	push   eax
c0019e3b:	e8 47 f8 ff ff       	call   c0019687 <Vm::outbv(unsigned short, unsigned char)>
c0019e40:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0019e44:	eb 53                	jmp    c0019e99 <Vm::faultHandler(regs*)+0x5be>
c0019e46:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019e49:	0f b6 57 01          	movzx  edx,BYTE PTR [edi+0x1]
c0019e4d:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e52:	74 03                	je     c0019e57 <Vm::faultHandler(regs*)+0x57c>
c0019e54:	ef                   	out    dx,eax
c0019e55:	eb cf                	jmp    c0019e26 <Vm::faultHandler(regs*)+0x54b>
c0019e57:	66 ef                	out    dx,ax
c0019e59:	eb cb                	jmp    c0019e26 <Vm::faultHandler(regs*)+0x54b>
c0019e5b:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0019e62:	83 ec 0c             	sub    esp,0xc
c0019e65:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0019e69:	50                   	push   eax
c0019e6a:	e8 12 f8 ff ff       	call   c0019681 <Vm::inbv(unsigned short)>
c0019e6f:	0f b6 c0             	movzx  eax,al
c0019e72:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0019e75:	eb 1f                	jmp    c0019e96 <Vm::faultHandler(regs*)+0x5bb>
c0019e77:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019e7a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019e7f:	74 03                	je     c0019e84 <Vm::faultHandler(regs*)+0x5a9>
c0019e81:	ed                   	in     eax,dx
c0019e82:	eb 0d                	jmp    c0019e91 <Vm::faultHandler(regs*)+0x5b6>
c0019e84:	66 ed                	in     ax,dx
c0019e86:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0019e89:	66 31 d2             	xor    dx,dx
c0019e8c:	0f b7 c0             	movzx  eax,ax
c0019e8f:	09 d0                	or     eax,edx
c0019e91:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0019e94:	eb 1a                	jmp    c0019eb0 <Vm::faultHandler(regs*)+0x5d5>
c0019e96:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019e99:	83 c4 10             	add    esp,0x10
c0019e9c:	eb 15                	jmp    c0019eb3 <Vm::faultHandler(regs*)+0x5d8>
c0019e9e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0019ea1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0019ea4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0019ea9:	74 03                	je     c0019eae <Vm::faultHandler(regs*)+0x5d3>
c0019eab:	ef                   	out    dx,eax
c0019eac:	eb 02                	jmp    c0019eb0 <Vm::faultHandler(regs*)+0x5d5>
c0019eae:	66 ef                	out    dx,ax
c0019eb0:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0019eb3:	b0 01                	mov    al,0x1
c0019eb5:	eb 56                	jmp    c0019f0d <Vm::faultHandler(regs*)+0x632>
c0019eb7:	0f b6 47 05          	movzx  eax,BYTE PTR [edi+0x5]
c0019ebb:	50                   	push   eax
c0019ebc:	0f b6 47 04          	movzx  eax,BYTE PTR [edi+0x4]
c0019ec0:	50                   	push   eax
c0019ec1:	0f b6 47 03          	movzx  eax,BYTE PTR [edi+0x3]
c0019ec5:	50                   	push   eax
c0019ec6:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
c0019eca:	50                   	push   eax
c0019ecb:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0019ecf:	50                   	push   eax
c0019ed0:	52                   	push   edx
c0019ed1:	52                   	push   edx
c0019ed2:	68 29 32 02 c0       	push   0xc0023229
c0019ed7:	e8 35 53 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c0019edc:	83 c4 20             	add    esp,0x20
c0019edf:	83 ec 0c             	sub    esp,0xc
c0019ee2:	6a 60                	push   0x60
c0019ee4:	e8 98 f7 ff ff       	call   c0019681 <Vm::inbv(unsigned short)>
c0019ee9:	83 c4 10             	add    esp,0x10
c0019eec:	3c 1c                	cmp    al,0x1c
c0019eee:	74 04                	je     c0019ef4 <Vm::faultHandler(regs*)+0x619>
c0019ef0:	3c 5a                	cmp    al,0x5a
c0019ef2:	75 eb                	jne    c0019edf <Vm::faultHandler(regs*)+0x604>
c0019ef4:	3c 1c                	cmp    al,0x1c
c0019ef6:	74 04                	je     c0019efc <Vm::faultHandler(regs*)+0x621>
c0019ef8:	3c 5a                	cmp    al,0x5a
c0019efa:	75 0f                	jne    c0019f0b <Vm::faultHandler(regs*)+0x630>
c0019efc:	83 ec 0c             	sub    esp,0xc
c0019eff:	6a 60                	push   0x60
c0019f01:	e8 7b f7 ff ff       	call   c0019681 <Vm::inbv(unsigned short)>
c0019f06:	83 c4 10             	add    esp,0x10
c0019f09:	eb e9                	jmp    c0019ef4 <Vm::faultHandler(regs*)+0x619>
c0019f0b:	31 c0                	xor    eax,eax
c0019f0d:	83 c4 1c             	add    esp,0x1c
c0019f10:	5b                   	pop    ebx
c0019f11:	5e                   	pop    esi
c0019f12:	5f                   	pop    edi
c0019f13:	5d                   	pop    ebp
c0019f14:	c3                   	ret    
c0019f15:	90                   	nop

c0019f16 <FAT::getName()>:
c0019f16:	b8 88 32 02 c0       	mov    eax,0xc0023288
c0019f1b:	c3                   	ret    

c0019f1c <FAT::tell(void*, unsigned long long*)>:
c0019f1c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019f21:	75 06                	jne    c0019f29 <FAT::tell(void*, unsigned long long*)+0xd>
c0019f23:	b8 04 00 00 00       	mov    eax,0x4
c0019f28:	c3                   	ret    
c0019f29:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019f2e:	75 06                	jne    c0019f36 <FAT::tell(void*, unsigned long long*)+0x1a>
c0019f30:	b8 04 00 00 00       	mov    eax,0x4
c0019f35:	c3                   	ret    
c0019f36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f3a:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0019f3d:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0019f40:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f44:	89 01                	mov    DWORD PTR [ecx],eax
c0019f46:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019f49:	b8 00 00 00 00       	mov    eax,0x0
c0019f4e:	c3                   	ret    
c0019f4f:	90                   	nop

c0019f50 <FAT::stat(void*, unsigned long long*)>:
c0019f50:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019f55:	75 06                	jne    c0019f5d <FAT::stat(void*, unsigned long long*)+0xd>
c0019f57:	b8 04 00 00 00       	mov    eax,0x4
c0019f5c:	c3                   	ret    
c0019f5d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019f62:	75 06                	jne    c0019f6a <FAT::stat(void*, unsigned long long*)+0x1a>
c0019f64:	b8 04 00 00 00       	mov    eax,0x4
c0019f69:	c3                   	ret    
c0019f6a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019f6e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0019f71:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0019f74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019f78:	89 01                	mov    DWORD PTR [ecx],eax
c0019f7a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019f7d:	b8 00 00 00 00       	mov    eax,0x0
c0019f82:	c3                   	ret    
c0019f83:	90                   	nop

c0019f84 <FAT::~FAT()>:
c0019f84:	83 ec 0c             	sub    esp,0xc
c0019f87:	ba 0c 33 02 c0       	mov    edx,0xc002330c
c0019f8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f90:	89 10                	mov    DWORD PTR [eax],edx
c0019f92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f96:	83 ec 0c             	sub    esp,0xc
c0019f99:	50                   	push   eax
c0019f9a:	e8 a3 55 ff ff       	call   c000f542 <Filesystem::~Filesystem()>
c0019f9f:	83 c4 10             	add    esp,0x10
c0019fa2:	90                   	nop
c0019fa3:	83 c4 0c             	add    esp,0xc
c0019fa6:	c3                   	ret    
c0019fa7:	90                   	nop

c0019fa8 <FAT::~FAT()>:
c0019fa8:	83 ec 0c             	sub    esp,0xc
c0019fab:	83 ec 0c             	sub    esp,0xc
c0019fae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fb2:	e8 cd ff ff ff       	call   c0019f84 <FAT::~FAT()>
c0019fb7:	83 c4 10             	add    esp,0x10
c0019fba:	83 ec 08             	sub    esp,0x8
c0019fbd:	6a 08                	push   0x8
c0019fbf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019fc3:	e8 23 51 ff ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c0019fc8:	83 c4 10             	add    esp,0x10
c0019fcb:	83 c4 0c             	add    esp,0xc
c0019fce:	c3                   	ret    
c0019fcf:	90                   	nop

c0019fd0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019fd0:	83 ec 1c             	sub    esp,0x1c
c0019fd3:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0019fda:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0019fdf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019fe3:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c0019fea:	83 f8 ff             	cmp    eax,0xffffffff
c0019fed:	75 34                	jne    c001a023 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0019fef:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019ff3:	88 c2                	mov    dl,al
c0019ff5:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c0019ffa:	01 d0                	add    eax,edx
c0019ffc:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a000:	8b 15 20 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c20
c001a006:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a00a:	89 14 85 40 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3c0],edx
c001a011:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a016:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a01a:	89 14 85 c0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda340],edx
c001a021:	eb 17                	jmp    c001a03a <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c001a023:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a027:	88 c2                	mov    dl,al
c001a029:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a02d:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a034:	01 d0                	add    eax,edx
c001a036:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a03a:	83 ec 04             	sub    esp,0x4
c001a03d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a041:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a045:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a049:	50                   	push   eax
c001a04a:	e8 85 ca fe ff       	call   c0006ad4 <f_getlabel>
c001a04f:	83 c4 10             	add    esp,0x10
c001a052:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a056:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a05b:	75 07                	jne    c001a064 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c001a05d:	b8 00 00 00 00       	mov    eax,0x0
c001a062:	eb 05                	jmp    c001a069 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c001a064:	b8 01 00 00 00       	mov    eax,0x1
c001a069:	83 c4 1c             	add    esp,0x1c
c001a06c:	c3                   	ret    
c001a06d:	90                   	nop

c001a06e <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a06e:	57                   	push   edi
c001a06f:	83 ec 58             	sub    esp,0x58
c001a072:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a07a:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a07e:	b8 00 00 00 00       	mov    eax,0x0
c001a083:	b9 0f 00 00 00       	mov    ecx,0xf
c001a088:	fc                   	cld    
c001a089:	89 d7                	mov    edi,edx
c001a08b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a08d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a091:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a098:	83 f8 ff             	cmp    eax,0xffffffff
c001a09b:	75 34                	jne    c001a0d1 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c001a09d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a0a1:	88 c2                	mov    dl,al
c001a0a3:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a0a8:	01 d0                	add    eax,edx
c001a0aa:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a0ae:	8b 15 20 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c20
c001a0b4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a0b8:	89 14 85 40 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3c0],edx
c001a0bf:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a0c4:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a0c8:	89 14 85 c0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda340],edx
c001a0cf:	eb 17                	jmp    c001a0e8 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c001a0d1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a0d5:	88 c2                	mov    dl,al
c001a0d7:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a0db:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a0e2:	01 d0                	add    eax,edx
c001a0e4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a0e8:	83 ec 08             	sub    esp,0x8
c001a0eb:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a0ef:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a0f3:	50                   	push   eax
c001a0f4:	e8 1e 67 fe ff       	call   c0000817 <strcat>
c001a0f9:	83 c4 10             	add    esp,0x10
c001a0fc:	83 ec 0c             	sub    esp,0xc
c001a0ff:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a103:	50                   	push   eax
c001a104:	e8 bf cb fe ff       	call   c0006cc8 <f_setlabel>
c001a109:	83 c4 10             	add    esp,0x10
c001a10c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a110:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a115:	75 07                	jne    c001a11e <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c001a117:	b8 00 00 00 00       	mov    eax,0x0
c001a11c:	eb 05                	jmp    c001a123 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c001a11e:	b8 01 00 00 00       	mov    eax,0x1
c001a123:	83 c4 58             	add    esp,0x58
c001a126:	5f                   	pop    edi
c001a127:	c3                   	ret    

c001a128 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a128:	83 ec 2c             	sub    esp,0x2c
c001a12b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a133:	83 ec 08             	sub    esp,0x8
c001a136:	68 ac 32 02 c0       	push   0xc00232ac
c001a13b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a13f:	e8 6d 66 fe ff       	call   c00007b1 <strcmp>
c001a144:	83 c4 10             	add    esp,0x10
c001a147:	85 c0                	test   eax,eax
c001a149:	0f 94 c0             	sete   al
c001a14c:	84 c0                	test   al,al
c001a14e:	74 0d                	je     c001a15d <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c001a150:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a158:	e9 a6 00 00 00       	jmp    c001a203 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a15d:	83 ec 08             	sub    esp,0x8
c001a160:	68 9e 32 02 c0       	push   0xc002329e
c001a165:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a169:	e8 43 66 fe ff       	call   c00007b1 <strcmp>
c001a16e:	83 c4 10             	add    esp,0x10
c001a171:	85 c0                	test   eax,eax
c001a173:	0f 94 c0             	sete   al
c001a176:	84 c0                	test   al,al
c001a178:	74 0a                	je     c001a184 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c001a17a:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a182:	eb 7f                	jmp    c001a203 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a184:	83 ec 08             	sub    esp,0x8
c001a187:	68 a4 32 02 c0       	push   0xc00232a4
c001a18c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a190:	e8 1c 66 fe ff       	call   c00007b1 <strcmp>
c001a195:	83 c4 10             	add    esp,0x10
c001a198:	85 c0                	test   eax,eax
c001a19a:	0f 94 c0             	sete   al
c001a19d:	84 c0                	test   al,al
c001a19f:	74 0a                	je     c001a1ab <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c001a1a1:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a1a9:	eb 58                	jmp    c001a203 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a1ab:	83 ec 08             	sub    esp,0x8
c001a1ae:	68 6c 05 02 c0       	push   0xc002056c
c001a1b3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a1b7:	e8 f5 65 fe ff       	call   c00007b1 <strcmp>
c001a1bc:	83 c4 10             	add    esp,0x10
c001a1bf:	85 c0                	test   eax,eax
c001a1c1:	0f 94 c0             	sete   al
c001a1c4:	84 c0                	test   al,al
c001a1c6:	74 0a                	je     c001a1d2 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c001a1c8:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a1d0:	eb 31                	jmp    c001a203 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a1d2:	83 ec 08             	sub    esp,0x8
c001a1d5:	68 aa 32 02 c0       	push   0xc00232aa
c001a1da:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a1de:	e8 ce 65 fe ff       	call   c00007b1 <strcmp>
c001a1e3:	83 c4 10             	add    esp,0x10
c001a1e6:	85 c0                	test   eax,eax
c001a1e8:	0f 94 c0             	sete   al
c001a1eb:	84 c0                	test   al,al
c001a1ed:	74 0a                	je     c001a1f9 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c001a1ef:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a1f7:	eb 0a                	jmp    c001a203 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c001a1f9:	b8 08 00 00 00       	mov    eax,0x8
c001a1fe:	e9 04 01 00 00       	jmp    c001a307 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a203:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a20a:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a20f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a213:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a21a:	83 f8 ff             	cmp    eax,0xffffffff
c001a21d:	75 34                	jne    c001a253 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c001a21f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a223:	88 c2                	mov    dl,al
c001a225:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a22a:	01 d0                	add    eax,edx
c001a22c:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a230:	8b 15 20 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c20
c001a236:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a23a:	89 14 85 40 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3c0],edx
c001a241:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a246:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a24a:	89 14 85 c0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda340],edx
c001a251:	eb 17                	jmp    c001a26a <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c001a253:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a257:	88 c2                	mov    dl,al
c001a259:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a25d:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a264:	01 d0                	add    eax,edx
c001a266:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a26a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a26e:	88 04 24             	mov    BYTE PTR [esp],al
c001a271:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a275:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a279:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a281:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a286:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a28e:	83 ec 0c             	sub    esp,0xc
c001a291:	68 00 20 00 00       	push   0x2000
c001a296:	e8 44 1d ff ff       	call   c000bfdf <malloc>
c001a29b:	83 c4 10             	add    esp,0x10
c001a29e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a2a2:	68 00 20 00 00       	push   0x2000
c001a2a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a2ab:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a2af:	50                   	push   eax
c001a2b0:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a2b4:	50                   	push   eax
c001a2b5:	e8 59 ce fe ff       	call   c0007113 <f_mkfs>
c001a2ba:	83 c4 10             	add    esp,0x10
c001a2bd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a2c1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a2c6:	75 07                	jne    c001a2cf <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c001a2c8:	b8 00 00 00 00       	mov    eax,0x0
c001a2cd:	eb 38                	jmp    c001a307 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a2cf:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a2d4:	75 17                	jne    c001a2ed <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c001a2d6:	83 ec 0c             	sub    esp,0xc
c001a2d9:	68 dc 32 02 c0       	push   0xc00232dc
c001a2de:	e8 2e 4f ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001a2e3:	83 c4 10             	add    esp,0x10
c001a2e6:	b8 09 00 00 00       	mov    eax,0x9
c001a2eb:	eb 1a                	jmp    c001a307 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c001a2ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a2f1:	83 ec 08             	sub    esp,0x8
c001a2f4:	50                   	push   eax
c001a2f5:	68 b0 32 02 c0       	push   0xc00232b0
c001a2fa:	e8 12 4f ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001a2ff:	83 c4 10             	add    esp,0x10
c001a302:	b8 01 00 00 00       	mov    eax,0x1
c001a307:	83 c4 2c             	add    esp,0x2c
c001a30a:	c3                   	ret    
c001a30b:	90                   	nop

c001a30c <FAT::tryMount(LogicalDisk*, int)>:
c001a30c:	81 ec 6c 03 00 00    	sub    esp,0x36c
c001a312:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a317:	83 f8 14             	cmp    eax,0x14
c001a31a:	75 17                	jne    c001a333 <FAT::tryMount(LogicalDisk*, int)+0x27>
c001a31c:	83 ec 0c             	sub    esp,0xc
c001a31f:	68 c2 32 02 c0       	push   0xc00232c2
c001a324:	e8 17 b7 ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c001a329:	83 c4 10             	add    esp,0x10
c001a32c:	b0 00                	mov    al,0x0
c001a32e:	e9 d7 01 00 00       	jmp    c001a50a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a333:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001a33a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a340:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a346:	3d 00 02 00 00       	cmp    eax,0x200
c001a34b:	74 07                	je     c001a354 <FAT::tryMount(LogicalDisk*, int)+0x48>
c001a34d:	b0 00                	mov    al,0x0
c001a34f:	e9 b6 01 00 00       	jmp    c001a50a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a354:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c001a35c:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a363:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a36a:	83 f8 ff             	cmp    eax,0xffffffff
c001a36d:	74 07                	je     c001a376 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c001a36f:	b0 01                	mov    al,0x1
c001a371:	e9 94 01 00 00       	jmp    c001a50a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a376:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c001a380:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c001a388:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c001a38f:	88 c2                	mov    dl,al
c001a391:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a396:	01 d0                	add    eax,edx
c001a398:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c001a39f:	8b 15 20 5c 02 c0    	mov    edx,DWORD PTR ds:0xc0025c20
c001a3a5:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c001a3ac:	89 14 85 40 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda3c0],edx
c001a3b3:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a3b8:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c001a3bf:	89 14 85 c0 5c 02 c0 	mov    DWORD PTR [eax*4-0x3ffda340],edx
c001a3c6:	83 ec 0c             	sub    esp,0xc
c001a3c9:	68 54 02 00 00       	push   0x254
c001a3ce:	e8 0c 1c ff ff       	call   c000bfdf <malloc>
c001a3d3:	83 c4 10             	add    esp,0x10
c001a3d6:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c001a3dd:	83 ec 04             	sub    esp,0x4
c001a3e0:	6a 00                	push   0x0
c001a3e2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a3e9:	50                   	push   eax
c001a3ea:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a3f1:	e8 0c a9 fe ff       	call   c0004d02 <f_mount>
c001a3f6:	83 c4 10             	add    esp,0x10
c001a3f9:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a400:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c001a408:	74 19                	je     c001a423 <FAT::tryMount(LogicalDisk*, int)+0x117>
c001a40a:	83 ec 0c             	sub    esp,0xc
c001a40d:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a414:	e8 e6 1b ff ff       	call   c000bfff <rfree>
c001a419:	83 c4 10             	add    esp,0x10
c001a41c:	b0 00                	mov    al,0x0
c001a41e:	e9 e7 00 00 00       	jmp    c001a50a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a423:	83 ec 04             	sub    esp,0x4
c001a426:	68 00 01 00 00       	push   0x100
c001a42b:	6a 00                	push   0x0
c001a42d:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a434:	50                   	push   eax
c001a435:	e8 87 62 fe ff       	call   c00006c1 <memset>
c001a43a:	83 c4 10             	add    esp,0x10
c001a43d:	83 ec 08             	sub    esp,0x8
c001a440:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a447:	50                   	push   eax
c001a448:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a44f:	50                   	push   eax
c001a450:	e8 c2 63 fe ff       	call   c0000817 <strcat>
c001a455:	83 c4 10             	add    esp,0x10
c001a458:	83 ec 08             	sub    esp,0x8
c001a45b:	68 d0 32 02 c0       	push   0xc00232d0
c001a460:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c001a467:	50                   	push   eax
c001a468:	e8 aa 63 fe ff       	call   c0000817 <strcat>
c001a46d:	83 c4 10             	add    esp,0x10
c001a470:	83 ec 04             	sub    esp,0x4
c001a473:	6a 01                	push   0x1
c001a475:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c001a47c:	50                   	push   eax
c001a47d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a481:	50                   	push   eax
c001a482:	e8 dd a8 fe ff       	call   c0004d64 <f_open>
c001a487:	83 c4 10             	add    esp,0x10
c001a48a:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c001a491:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001a498:	85 c0                	test   eax,eax
c001a49a:	74 0a                	je     c001a4a6 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c001a49c:	78 2d                	js     c001a4cb <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a49e:	83 e8 04             	sub    eax,0x4
c001a4a1:	83 f8 01             	cmp    eax,0x1
c001a4a4:	77 25                	ja     c001a4cb <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c001a4a6:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c001a4ae:	83 ec 0c             	sub    esp,0xc
c001a4b1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a4b5:	50                   	push   eax
c001a4b6:	e8 fb b3 fe ff       	call   c00058b6 <f_close>
c001a4bb:	83 c4 10             	add    esp,0x10
c001a4be:	90                   	nop
c001a4bf:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c001a4c7:	74 3a                	je     c001a503 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c001a4c9:	eb 2d                	jmp    c001a4f8 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c001a4cb:	83 ec 0c             	sub    esp,0xc
c001a4ce:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c001a4d5:	e8 25 1b ff ff       	call   c000bfff <rfree>
c001a4da:	83 c4 10             	add    esp,0x10
c001a4dd:	83 ec 04             	sub    esp,0x4
c001a4e0:	6a 00                	push   0x0
c001a4e2:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c001a4e9:	50                   	push   eax
c001a4ea:	6a 00                	push   0x0
c001a4ec:	e8 11 a8 fe ff       	call   c0004d02 <f_mount>
c001a4f1:	83 c4 10             	add    esp,0x10
c001a4f4:	b0 00                	mov    al,0x0
c001a4f6:	eb 12                	jmp    c001a50a <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c001a4f8:	a1 20 5c 02 c0       	mov    eax,ds:0xc0025c20
c001a4fd:	40                   	inc    eax
c001a4fe:	a3 20 5c 02 c0       	mov    ds:0xc0025c20,eax
c001a503:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c001a50a:	81 c4 6c 03 00 00    	add    esp,0x36c
c001a510:	c3                   	ret    
c001a511:	90                   	nop

c001a512 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001a512:	81 ec 3c 02 00 00    	sub    esp,0x23c
c001a518:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c001a520:	74 0a                	je     c001a52c <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c001a522:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c001a52a:	75 0a                	jne    c001a536 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c001a52c:	b8 04 00 00 00       	mov    eax,0x4
c001a531:	e9 dd 00 00 00       	jmp    c001a613 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a536:	83 ec 08             	sub    esp,0x8
c001a539:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a540:	50                   	push   eax
c001a541:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c001a548:	e8 21 b9 fe ff       	call   c0005e6e <f_readdir>
c001a54d:	83 c4 10             	add    esp,0x10
c001a550:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c001a557:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a55d:	83 ec 0c             	sub    esp,0xc
c001a560:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c001a567:	83 c0 1a             	add    eax,0x1a
c001a56a:	50                   	push   eax
c001a56b:	e8 6e 61 fe ff       	call   c00006de <strlen>
c001a570:	83 c4 10             	add    esp,0x10
c001a573:	ba 00 00 00 00       	mov    edx,0x0
c001a578:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a57c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001a580:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c001a587:	25 ff 00 00 00       	and    eax,0xff
c001a58c:	83 e0 10             	and    eax,0x10
c001a58f:	74 07                	je     c001a598 <FAT::readDir(void*, unsigned long, void*, int*)+0x86>
c001a591:	b8 02 00 00 00       	mov    eax,0x2
c001a596:	eb 05                	jmp    c001a59d <FAT::readDir(void*, unsigned long, void*, int*)+0x8b>
c001a598:	b8 01 00 00 00       	mov    eax,0x1
c001a59d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a5a1:	83 ec 08             	sub    esp,0x8
c001a5a4:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a5ab:	83 c0 1a             	add    eax,0x1a
c001a5ae:	50                   	push   eax
c001a5af:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a5b3:	83 c0 10             	add    eax,0x10
c001a5b6:	50                   	push   eax
c001a5b7:	e8 a4 61 fe ff       	call   c0000760 <strcpy>
c001a5bc:	83 c4 10             	add    esp,0x10
c001a5bf:	83 ec 04             	sub    esp,0x4
c001a5c2:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c001a5c9:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a5cd:	50                   	push   eax
c001a5ce:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c001a5d5:	e8 b1 60 fe ff       	call   c000068b <memcpy>
c001a5da:	83 c4 10             	add    esp,0x10
c001a5dd:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c001a5e4:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001a5ea:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c001a5f1:	84 c0                	test   al,al
c001a5f3:	75 07                	jne    c001a5fc <FAT::readDir(void*, unsigned long, void*, int*)+0xea>
c001a5f5:	b8 07 00 00 00       	mov    eax,0x7
c001a5fa:	eb 17                	jmp    c001a613 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a5fc:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c001a603:	85 c0                	test   eax,eax
c001a605:	75 07                	jne    c001a60e <FAT::readDir(void*, unsigned long, void*, int*)+0xfc>
c001a607:	b8 00 00 00 00       	mov    eax,0x0
c001a60c:	eb 05                	jmp    c001a613 <FAT::readDir(void*, unsigned long, void*, int*)+0x101>
c001a60e:	b8 01 00 00 00       	mov    eax,0x1
c001a613:	81 c4 3c 02 00 00    	add    esp,0x23c
c001a619:	c3                   	ret    

c001a61a <FAT::read(void*, unsigned long, void*, int*)>:
c001a61a:	83 ec 1c             	sub    esp,0x1c
c001a61d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a622:	74 07                	je     c001a62b <FAT::read(void*, unsigned long, void*, int*)+0x11>
c001a624:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a629:	75 07                	jne    c001a632 <FAT::read(void*, unsigned long, void*, int*)+0x18>
c001a62b:	b8 04 00 00 00       	mov    eax,0x4
c001a630:	eb 3d                	jmp    c001a66f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a632:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a636:	50                   	push   eax
c001a637:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a63b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a63f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a643:	e8 58 ab fe ff       	call   c00051a0 <f_read>
c001a648:	83 c4 10             	add    esp,0x10
c001a64b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a64f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a653:	89 c2                	mov    edx,eax
c001a655:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a659:	89 10                	mov    DWORD PTR [eax],edx
c001a65b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a65f:	85 c0                	test   eax,eax
c001a661:	75 07                	jne    c001a66a <FAT::read(void*, unsigned long, void*, int*)+0x50>
c001a663:	b8 00 00 00 00       	mov    eax,0x0
c001a668:	eb 05                	jmp    c001a66f <FAT::read(void*, unsigned long, void*, int*)+0x55>
c001a66a:	b8 01 00 00 00       	mov    eax,0x1
c001a66f:	83 c4 1c             	add    esp,0x1c
c001a672:	c3                   	ret    
c001a673:	90                   	nop

c001a674 <FAT::write(void*, unsigned long, void*, int*)>:
c001a674:	83 ec 1c             	sub    esp,0x1c
c001a677:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a67c:	74 07                	je     c001a685 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c001a67e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a683:	75 07                	jne    c001a68c <FAT::write(void*, unsigned long, void*, int*)+0x18>
c001a685:	b8 04 00 00 00       	mov    eax,0x4
c001a68a:	eb 3d                	jmp    c001a6c9 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a68c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a690:	50                   	push   eax
c001a691:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a695:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a699:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a69d:	e8 7e ad fe ff       	call   c0005420 <f_write>
c001a6a2:	83 c4 10             	add    esp,0x10
c001a6a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a6ad:	89 c2                	mov    edx,eax
c001a6af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a6b3:	89 10                	mov    DWORD PTR [eax],edx
c001a6b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a6b9:	85 c0                	test   eax,eax
c001a6bb:	75 07                	jne    c001a6c4 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c001a6bd:	b8 00 00 00 00       	mov    eax,0x0
c001a6c2:	eb 05                	jmp    c001a6c9 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c001a6c4:	b8 01 00 00 00       	mov    eax,0x1
c001a6c9:	83 c4 1c             	add    esp,0x1c
c001a6cc:	c3                   	ret    
c001a6cd:	90                   	nop

c001a6ce <FAT::close(void*)>:
c001a6ce:	83 ec 1c             	sub    esp,0x1c
c001a6d1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a6d6:	75 07                	jne    c001a6df <FAT::close(void*)+0x11>
c001a6d8:	b8 04 00 00 00       	mov    eax,0x4
c001a6dd:	eb 36                	jmp    c001a715 <FAT::close(void*)+0x47>
c001a6df:	83 ec 0c             	sub    esp,0xc
c001a6e2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a6e6:	e8 cb b1 fe ff       	call   c00058b6 <f_close>
c001a6eb:	83 c4 10             	add    esp,0x10
c001a6ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6f2:	83 ec 0c             	sub    esp,0xc
c001a6f5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a6f9:	e8 f1 18 ff ff       	call   c000bfef <free>
c001a6fe:	83 c4 10             	add    esp,0x10
c001a701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a705:	85 c0                	test   eax,eax
c001a707:	75 07                	jne    c001a710 <FAT::close(void*)+0x42>
c001a709:	b8 00 00 00 00       	mov    eax,0x0
c001a70e:	eb 05                	jmp    c001a715 <FAT::close(void*)+0x47>
c001a710:	b8 01 00 00 00       	mov    eax,0x1
c001a715:	83 c4 1c             	add    esp,0x1c
c001a718:	c3                   	ret    
c001a719:	90                   	nop

c001a71a <FAT::closeDir(void*)>:
c001a71a:	83 ec 1c             	sub    esp,0x1c
c001a71d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a722:	75 07                	jne    c001a72b <FAT::closeDir(void*)+0x11>
c001a724:	b8 04 00 00 00       	mov    eax,0x4
c001a729:	eb 36                	jmp    c001a761 <FAT::closeDir(void*)+0x47>
c001a72b:	83 ec 0c             	sub    esp,0xc
c001a72e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a732:	e8 15 b7 fe ff       	call   c0005e4c <f_closedir>
c001a737:	83 c4 10             	add    esp,0x10
c001a73a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a73e:	83 ec 0c             	sub    esp,0xc
c001a741:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a745:	e8 a5 18 ff ff       	call   c000bfef <free>
c001a74a:	83 c4 10             	add    esp,0x10
c001a74d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a751:	85 c0                	test   eax,eax
c001a753:	75 07                	jne    c001a75c <FAT::closeDir(void*)+0x42>
c001a755:	b8 00 00 00 00       	mov    eax,0x0
c001a75a:	eb 05                	jmp    c001a761 <FAT::closeDir(void*)+0x47>
c001a75c:	b8 01 00 00 00       	mov    eax,0x1
c001a761:	83 c4 1c             	add    esp,0x1c
c001a764:	c3                   	ret    
c001a765:	90                   	nop

c001a766 <FAT::seek(void*, unsigned long long)>:
c001a766:	83 ec 2c             	sub    esp,0x2c
c001a769:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a76d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a771:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a775:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a779:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a77e:	75 07                	jne    c001a787 <FAT::seek(void*, unsigned long long)+0x21>
c001a780:	b8 04 00 00 00       	mov    eax,0x4
c001a785:	eb 2f                	jmp    c001a7b6 <FAT::seek(void*, unsigned long long)+0x50>
c001a787:	83 ec 04             	sub    esp,0x4
c001a78a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a78e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001a792:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a796:	e8 4a b1 fe ff       	call   c00058e5 <f_lseek>
c001a79b:	83 c4 10             	add    esp,0x10
c001a79e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a7a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a7a6:	85 c0                	test   eax,eax
c001a7a8:	75 07                	jne    c001a7b1 <FAT::seek(void*, unsigned long long)+0x4b>
c001a7aa:	b8 00 00 00 00       	mov    eax,0x0
c001a7af:	eb 05                	jmp    c001a7b6 <FAT::seek(void*, unsigned long long)+0x50>
c001a7b1:	b8 01 00 00 00       	mov    eax,0x1
c001a7b6:	83 c4 2c             	add    esp,0x2c
c001a7b9:	c3                   	ret    

c001a7ba <fatWrapperReadDisk>:
c001a7ba:	83 ec 1c             	sub    esp,0x1c
c001a7bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a7c1:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a7c5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a7c9:	89 04 24             	mov    DWORD PTR [esp],eax
c001a7cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a7d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a7d4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a7d8:	25 ff 00 00 00       	and    eax,0xff
c001a7dd:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c001a7e4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a7e8:	83 ec 0c             	sub    esp,0xc
c001a7eb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a7ef:	52                   	push   edx
c001a7f0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7f4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a7f8:	50                   	push   eax
c001a7f9:	e8 6e 80 ff ff       	call   c001286c <LogicalDisk::read(unsigned long long, int, void*)>
c001a7fe:	83 c4 20             	add    esp,0x20
c001a801:	83 c4 1c             	add    esp,0x1c
c001a804:	c3                   	ret    

c001a805 <fatWrapperWriteDisk>:
c001a805:	83 ec 1c             	sub    esp,0x1c
c001a808:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a80c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a810:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a814:	89 04 24             	mov    DWORD PTR [esp],eax
c001a817:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001a81b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a81f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a823:	25 ff 00 00 00       	and    eax,0xff
c001a828:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c001a82f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a833:	83 ec 0c             	sub    esp,0xc
c001a836:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a83a:	52                   	push   edx
c001a83b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a83f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a843:	50                   	push   eax
c001a844:	e8 8f 80 ff ff       	call   c00128d8 <LogicalDisk::write(unsigned long long, int, void*)>
c001a849:	83 c4 20             	add    esp,0x20
c001a84c:	83 c4 1c             	add    esp,0x1c
c001a84f:	c3                   	ret    

c001a850 <fatWrapperIoctl>:
c001a850:	53                   	push   ebx
c001a851:	83 ec 28             	sub    esp,0x28
c001a854:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a858:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a85c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a860:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a864:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c001a869:	75 35                	jne    c001a8a0 <fatWrapperIoctl+0x50>
c001a86b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a86f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a873:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a877:	25 ff 00 00 00       	and    eax,0xff
c001a87c:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c001a883:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a889:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a88f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a893:	66 89 02             	mov    WORD PTR [edx],ax
c001a896:	b8 00 00 00 00       	mov    eax,0x0
c001a89b:	e9 bb 00 00 00       	jmp    c001a95b <fatWrapperIoctl+0x10b>
c001a8a0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c001a8a5:	75 73                	jne    c001a91a <fatWrapperIoctl+0xca>
c001a8a7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a8ab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a8af:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a8b3:	25 ff 00 00 00       	and    eax,0xff
c001a8b8:	8b 04 85 a0 4d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdb260]
c001a8bf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a8c5:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a8cb:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a8d1:	89 c8                	mov    eax,ecx
c001a8d3:	89 da                	mov    edx,ebx
c001a8d5:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a8d9:	c1 e0 0a             	shl    eax,0xa
c001a8dc:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a8e0:	81 e1 ff 00 00 00    	and    ecx,0xff
c001a8e6:	8b 0c 8d a0 4d 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdb260]
c001a8ed:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a8f3:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a8f9:	89 cb                	mov    ebx,ecx
c001a8fb:	c1 fb 1f             	sar    ebx,0x1f
c001a8fe:	53                   	push   ebx
c001a8ff:	51                   	push   ecx
c001a900:	52                   	push   edx
c001a901:	50                   	push   eax
c001a902:	e8 05 4c 00 00       	call   c001f50c <__udivdi3>
c001a907:	83 c4 10             	add    esp,0x10
c001a90a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a90e:	89 01                	mov    DWORD PTR [ecx],eax
c001a910:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a913:	b8 00 00 00 00       	mov    eax,0x0
c001a918:	eb 41                	jmp    c001a95b <fatWrapperIoctl+0x10b>
c001a91a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c001a91f:	75 07                	jne    c001a928 <fatWrapperIoctl+0xd8>
c001a921:	b8 00 00 00 00       	mov    eax,0x0
c001a926:	eb 33                	jmp    c001a95b <fatWrapperIoctl+0x10b>
c001a928:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c001a92d:	75 19                	jne    c001a948 <fatWrapperIoctl+0xf8>
c001a92f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a933:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a937:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a93b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a941:	b8 00 00 00 00       	mov    eax,0x0
c001a946:	eb 13                	jmp    c001a95b <fatWrapperIoctl+0x10b>
c001a948:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c001a94d:	75 07                	jne    c001a956 <fatWrapperIoctl+0x106>
c001a94f:	b8 00 00 00 00       	mov    eax,0x0
c001a954:	eb 05                	jmp    c001a95b <fatWrapperIoctl+0x10b>
c001a956:	b8 04 00 00 00       	mov    eax,0x4
c001a95b:	83 c4 28             	add    esp,0x28
c001a95e:	5b                   	pop    ebx
c001a95f:	c3                   	ret    

c001a960 <FAT::FAT()>:
c001a960:	83 ec 1c             	sub    esp,0x1c
c001a963:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a967:	83 ec 0c             	sub    esp,0xc
c001a96a:	50                   	push   eax
c001a96b:	e8 ae 4b ff ff       	call   c000f51e <Filesystem::Filesystem()>
c001a970:	83 c4 10             	add    esp,0x10
c001a973:	ba 0c 33 02 c0       	mov    edx,0xc002330c
c001a978:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a97c:	89 10                	mov    DWORD PTR [eax],edx
c001a97e:	c7 05 20 5c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025c20,0x0
c001a988:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a990:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a995:	7f 15                	jg     c001a9ac <FAT::FAT()+0x4c>
c001a997:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a99b:	c7 04 85 40 5c 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffda3c0],0xffffffff
c001a9a6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a9aa:	eb e4                	jmp    c001a990 <FAT::FAT()+0x30>
c001a9ac:	90                   	nop
c001a9ad:	83 c4 1c             	add    esp,0x1c
c001a9b0:	c3                   	ret    
c001a9b1:	90                   	nop

c001a9b2 <FAT::fixFilepath(char*)>:
c001a9b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9b6:	8a 00                	mov    al,BYTE PTR [eax]
c001a9b8:	3c 40                	cmp    al,0x40
c001a9ba:	7e 2c                	jle    c001a9e8 <FAT::fixFilepath(char*)+0x36>
c001a9bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9c0:	8a 00                	mov    al,BYTE PTR [eax]
c001a9c2:	83 e8 41             	sub    eax,0x41
c001a9c5:	88 c2                	mov    dl,al
c001a9c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9cb:	88 10                	mov    BYTE PTR [eax],dl
c001a9cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9d1:	8a 00                	mov    al,BYTE PTR [eax]
c001a9d3:	0f be c0             	movsx  eax,al
c001a9d6:	8b 04 85 40 5c 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda3c0]
c001a9dd:	83 c0 30             	add    eax,0x30
c001a9e0:	88 c2                	mov    dl,al
c001a9e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a9e6:	88 10                	mov    BYTE PTR [eax],dl
c001a9e8:	90                   	nop
c001a9e9:	c3                   	ret    

c001a9ea <FAT::open(char const*, void**, FileOpenMode)>:
c001a9ea:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a9f0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a9f8:	74 0a                	je     c001aa04 <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c001a9fa:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001aa02:	75 0a                	jne    c001aa0e <FAT::open(char const*, void**, FileOpenMode)+0x24>
c001aa04:	b8 04 00 00 00       	mov    eax,0x4
c001aa09:	e9 00 01 00 00       	jmp    c001ab0e <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001aa0e:	83 ec 08             	sub    esp,0x8
c001aa11:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa18:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa1c:	50                   	push   eax
c001aa1d:	e8 3e 5d fe ff       	call   c0000760 <strcpy>
c001aa22:	83 c4 10             	add    esp,0x10
c001aa25:	83 ec 08             	sub    esp,0x8
c001aa28:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aa2c:	50                   	push   eax
c001aa2d:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa34:	e8 79 ff ff ff       	call   c001a9b2 <FAT::fixFilepath(char*)>
c001aa39:	83 c4 10             	add    esp,0x10
c001aa3c:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001aa44:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa4b:	83 e0 01             	and    eax,0x1
c001aa4e:	74 08                	je     c001aa58 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c001aa50:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c001aa58:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa5f:	83 e0 04             	and    eax,0x4
c001aa62:	74 10                	je     c001aa74 <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c001aa64:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c001aa6c:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001aa74:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa7b:	83 e0 02             	and    eax,0x2
c001aa7e:	74 08                	je     c001aa88 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c001aa80:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c001aa88:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aa8f:	83 e0 08             	and    eax,0x8
c001aa92:	74 08                	je     c001aa9c <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c001aa94:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c001aa9c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001aaa3:	83 e0 10             	and    eax,0x10
c001aaa6:	74 08                	je     c001aab0 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c001aaa8:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c001aab0:	83 ec 0c             	sub    esp,0xc
c001aab3:	68 50 02 00 00       	push   0x250
c001aab8:	e8 22 15 ff ff       	call   c000bfdf <malloc>
c001aabd:	83 c4 10             	add    esp,0x10
c001aac0:	89 c2                	mov    edx,eax
c001aac2:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aac9:	89 10                	mov    DWORD PTR [eax],edx
c001aacb:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001aad2:	31 d2                	xor    edx,edx
c001aad4:	88 c2                	mov    dl,al
c001aad6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001aadd:	8b 00                	mov    eax,DWORD PTR [eax]
c001aadf:	83 ec 04             	sub    esp,0x4
c001aae2:	52                   	push   edx
c001aae3:	8d 54 24 10          	lea    edx,[esp+0x10]
c001aae7:	52                   	push   edx
c001aae8:	50                   	push   eax
c001aae9:	e8 76 a2 fe ff       	call   c0004d64 <f_open>
c001aaee:	83 c4 10             	add    esp,0x10
c001aaf1:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001aaf8:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001ab00:	74 07                	je     c001ab09 <FAT::open(char const*, void**, FileOpenMode)+0x11f>
c001ab02:	b8 01 00 00 00       	mov    eax,0x1
c001ab07:	eb 05                	jmp    c001ab0e <FAT::open(char const*, void**, FileOpenMode)+0x124>
c001ab09:	b8 00 00 00 00       	mov    eax,0x0
c001ab0e:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ab14:	c3                   	ret    
c001ab15:	90                   	nop

c001ab16 <FAT::openDir(char const*, void**)>:
c001ab16:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001ab1c:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001ab24:	74 0a                	je     c001ab30 <FAT::openDir(char const*, void**)+0x1a>
c001ab26:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001ab2e:	75 07                	jne    c001ab37 <FAT::openDir(char const*, void**)+0x21>
c001ab30:	b8 04 00 00 00       	mov    eax,0x4
c001ab35:	eb 7d                	jmp    c001abb4 <FAT::openDir(char const*, void**)+0x9e>
c001ab37:	83 ec 08             	sub    esp,0x8
c001ab3a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ab41:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ab45:	50                   	push   eax
c001ab46:	e8 15 5c fe ff       	call   c0000760 <strcpy>
c001ab4b:	83 c4 10             	add    esp,0x10
c001ab4e:	83 ec 08             	sub    esp,0x8
c001ab51:	8d 44 24 14          	lea    eax,[esp+0x14]
c001ab55:	50                   	push   eax
c001ab56:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ab5d:	e8 50 fe ff ff       	call   c001a9b2 <FAT::fixFilepath(char*)>
c001ab62:	83 c4 10             	add    esp,0x10
c001ab65:	83 ec 0c             	sub    esp,0xc
c001ab68:	6a 4c                	push   0x4c
c001ab6a:	e8 70 14 ff ff       	call   c000bfdf <malloc>
c001ab6f:	83 c4 10             	add    esp,0x10
c001ab72:	89 c2                	mov    edx,eax
c001ab74:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ab7b:	89 10                	mov    DWORD PTR [eax],edx
c001ab7d:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001ab84:	8b 00                	mov    eax,DWORD PTR [eax]
c001ab86:	83 ec 08             	sub    esp,0x8
c001ab89:	8d 54 24 14          	lea    edx,[esp+0x14]
c001ab8d:	52                   	push   edx
c001ab8e:	50                   	push   eax
c001ab8f:	e8 b6 b1 fe ff       	call   c0005d4a <f_opendir>
c001ab94:	83 c4 10             	add    esp,0x10
c001ab97:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ab9e:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001aba6:	74 07                	je     c001abaf <FAT::openDir(char const*, void**)+0x99>
c001aba8:	b8 01 00 00 00       	mov    eax,0x1
c001abad:	eb 05                	jmp    c001abb4 <FAT::openDir(char const*, void**)+0x9e>
c001abaf:	b8 00 00 00 00       	mov    eax,0x0
c001abb4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001abba:	c3                   	ret    
c001abbb:	90                   	nop

c001abbc <FAT::stat(char const*, unsigned long long*, bool*)>:
c001abbc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001abc2:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001abca:	75 0a                	jne    c001abd6 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c001abcc:	b8 04 00 00 00       	mov    eax,0x4
c001abd1:	e9 cb 00 00 00       	jmp    c001aca1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001abd6:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001abde:	75 0a                	jne    c001abea <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c001abe0:	b8 04 00 00 00       	mov    eax,0x4
c001abe5:	e9 b7 00 00 00       	jmp    c001aca1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001abea:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001abf2:	75 0a                	jne    c001abfe <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c001abf4:	b8 04 00 00 00       	mov    eax,0x4
c001abf9:	e9 a3 00 00 00       	jmp    c001aca1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001abfe:	83 ec 08             	sub    esp,0x8
c001ac01:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ac08:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ac0f:	50                   	push   eax
c001ac10:	e8 4b 5b fe ff       	call   c0000760 <strcpy>
c001ac15:	83 c4 10             	add    esp,0x10
c001ac18:	83 ec 08             	sub    esp,0x8
c001ac1b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001ac22:	50                   	push   eax
c001ac23:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ac2a:	e8 83 fd ff ff       	call   c001a9b2 <FAT::fixFilepath(char*)>
c001ac2f:	83 c4 10             	add    esp,0x10
c001ac32:	83 ec 08             	sub    esp,0x8
c001ac35:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ac39:	50                   	push   eax
c001ac3a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001ac41:	50                   	push   eax
c001ac42:	e8 c2 b2 fe ff       	call   c0005f09 <f_stat>
c001ac47:	83 c4 10             	add    esp,0x10
c001ac4a:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ac51:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ac58:	85 c0                	test   eax,eax
c001ac5a:	74 07                	je     c001ac63 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c001ac5c:	83 f8 04             	cmp    eax,0x4
c001ac5f:	74 34                	je     c001ac95 <FAT::stat(char const*, unsigned long long*, bool*)+0xd9>
c001ac61:	eb 39                	jmp    c001ac9c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001ac63:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ac67:	25 ff 00 00 00       	and    eax,0xff
c001ac6c:	83 e0 10             	and    eax,0x10
c001ac6f:	0f 95 c2             	setne  dl
c001ac72:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001ac79:	88 10                	mov    BYTE PTR [eax],dl
c001ac7b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ac7e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac82:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001ac89:	89 01                	mov    DWORD PTR [ecx],eax
c001ac8b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001ac8e:	b8 00 00 00 00       	mov    eax,0x0
c001ac93:	eb 0c                	jmp    c001aca1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001ac95:	b8 02 00 00 00       	mov    eax,0x2
c001ac9a:	eb 05                	jmp    c001aca1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe5>
c001ac9c:	b8 01 00 00 00       	mov    eax,0x1
c001aca1:	81 c4 2c 02 00 00    	add    esp,0x22c
c001aca7:	c3                   	ret    

c001aca8 <FAT::unlink(char const*)>:
c001aca8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001acae:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001acb6:	75 07                	jne    c001acbf <FAT::unlink(char const*)+0x17>
c001acb8:	b8 04 00 00 00       	mov    eax,0x4
c001acbd:	eb 5c                	jmp    c001ad1b <FAT::unlink(char const*)+0x73>
c001acbf:	83 ec 08             	sub    esp,0x8
c001acc2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001acc9:	8d 44 24 18          	lea    eax,[esp+0x18]
c001accd:	50                   	push   eax
c001acce:	e8 8d 5a fe ff       	call   c0000760 <strcpy>
c001acd3:	83 c4 10             	add    esp,0x10
c001acd6:	83 ec 08             	sub    esp,0x8
c001acd9:	8d 44 24 14          	lea    eax,[esp+0x14]
c001acdd:	50                   	push   eax
c001acde:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001ace5:	e8 c8 fc ff ff       	call   c001a9b2 <FAT::fixFilepath(char*)>
c001acea:	83 c4 10             	add    esp,0x10
c001aced:	83 ec 0c             	sub    esp,0xc
c001acf0:	8d 44 24 18          	lea    eax,[esp+0x18]
c001acf4:	50                   	push   eax
c001acf5:	e8 7e b5 fe ff       	call   c0006278 <f_unlink>
c001acfa:	83 c4 10             	add    esp,0x10
c001acfd:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001ad04:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001ad0b:	85 c0                	test   eax,eax
c001ad0d:	75 07                	jne    c001ad16 <FAT::unlink(char const*)+0x6e>
c001ad0f:	b8 00 00 00 00       	mov    eax,0x0
c001ad14:	eb 05                	jmp    c001ad1b <FAT::unlink(char const*)+0x73>
c001ad16:	b8 01 00 00 00       	mov    eax,0x1
c001ad1b:	81 c4 1c 01 00 00    	add    esp,0x11c
c001ad21:	c3                   	ret    

c001ad22 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001ad22:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001ad28:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001ad2f:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001ad36:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001ad3a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ad3e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001ad46:	75 0a                	jne    c001ad52 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001ad48:	b8 04 00 00 00       	mov    eax,0x4
c001ad4d:	e9 43 01 00 00       	jmp    c001ae95 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001ad52:	83 ec 08             	sub    esp,0x8
c001ad55:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ad5c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ad60:	50                   	push   eax
c001ad61:	e8 fa 59 fe ff       	call   c0000760 <strcpy>
c001ad66:	83 c4 10             	add    esp,0x10
c001ad69:	83 ec 08             	sub    esp,0x8
c001ad6c:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ad70:	50                   	push   eax
c001ad71:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001ad78:	e8 35 fc ff ff       	call   c001a9b2 <FAT::fixFilepath(char*)>
c001ad7d:	83 c4 10             	add    esp,0x10
c001ad80:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001ad88:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001ad90:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001ad94:	25 ff 00 00 00       	and    eax,0xff
c001ad99:	83 e0 01             	and    eax,0x1
c001ad9c:	74 08                	je     c001ada6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001ad9e:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c001ada6:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001adaa:	25 ff 00 00 00       	and    eax,0xff
c001adaf:	83 e0 02             	and    eax,0x2
c001adb2:	74 08                	je     c001adbc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9a>
c001adb4:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001adbc:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001adc0:	25 ff 00 00 00       	and    eax,0xff
c001adc5:	83 e0 04             	and    eax,0x4
c001adc8:	74 08                	je     c001add2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb0>
c001adca:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c001add2:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c001add6:	25 ff 00 00 00       	and    eax,0xff
c001addb:	83 e0 08             	and    eax,0x8
c001adde:	74 08                	je     c001ade8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc6>
c001ade0:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001ade8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001adec:	25 ff 00 00 00       	and    eax,0xff
c001adf1:	83 e0 01             	and    eax,0x1
c001adf4:	74 08                	je     c001adfe <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xdc>
c001adf6:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c001adfe:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae02:	25 ff 00 00 00       	and    eax,0xff
c001ae07:	83 e0 02             	and    eax,0x2
c001ae0a:	74 08                	je     c001ae14 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xf2>
c001ae0c:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001ae14:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae18:	25 ff 00 00 00       	and    eax,0xff
c001ae1d:	83 e0 04             	and    eax,0x4
c001ae20:	74 08                	je     c001ae2a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x108>
c001ae22:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c001ae2a:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001ae2e:	25 ff 00 00 00       	and    eax,0xff
c001ae33:	83 e0 08             	and    eax,0x8
c001ae36:	74 08                	je     c001ae40 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x11e>
c001ae38:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001ae40:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ae47:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c001ae4e:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001ae55:	31 d2                	xor    edx,edx
c001ae57:	88 c2                	mov    dl,al
c001ae59:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001ae60:	25 ff 00 00 00       	and    eax,0xff
c001ae65:	83 ec 04             	sub    esp,0x4
c001ae68:	52                   	push   edx
c001ae69:	50                   	push   eax
c001ae6a:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae6e:	50                   	push   eax
c001ae6f:	e8 a4 ba fe ff       	call   c0006918 <f_chmod>
c001ae74:	83 c4 10             	add    esp,0x10
c001ae77:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001ae7e:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001ae85:	85 c0                	test   eax,eax
c001ae87:	75 07                	jne    c001ae90 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x16e>
c001ae89:	b8 00 00 00 00       	mov    eax,0x0
c001ae8e:	eb 05                	jmp    c001ae95 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x173>
c001ae90:	b8 01 00 00 00       	mov    eax,0x1
c001ae95:	81 c4 2c 01 00 00    	add    esp,0x12c
c001ae9b:	c3                   	ret    

c001ae9c <FAT::rename(char const*, char const*)>:
c001ae9c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001aea2:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001aeaa:	74 0a                	je     c001aeb6 <FAT::rename(char const*, char const*)+0x1a>
c001aeac:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001aeb4:	75 0a                	jne    c001aec0 <FAT::rename(char const*, char const*)+0x24>
c001aeb6:	b8 04 00 00 00       	mov    eax,0x4
c001aebb:	e9 98 00 00 00       	jmp    c001af58 <FAT::rename(char const*, char const*)+0xbc>
c001aec0:	83 ec 08             	sub    esp,0x8
c001aec3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aeca:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001aed1:	50                   	push   eax
c001aed2:	e8 89 58 fe ff       	call   c0000760 <strcpy>
c001aed7:	83 c4 10             	add    esp,0x10
c001aeda:	83 ec 08             	sub    esp,0x8
c001aedd:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001aee4:	50                   	push   eax
c001aee5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aeec:	e8 c1 fa ff ff       	call   c001a9b2 <FAT::fixFilepath(char*)>
c001aef1:	83 c4 10             	add    esp,0x10
c001aef4:	83 ec 08             	sub    esp,0x8
c001aef7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001aefe:	8d 44 24 18          	lea    eax,[esp+0x18]
c001af02:	50                   	push   eax
c001af03:	e8 58 58 fe ff       	call   c0000760 <strcpy>
c001af08:	83 c4 10             	add    esp,0x10
c001af0b:	83 ec 08             	sub    esp,0x8
c001af0e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001af12:	50                   	push   eax
c001af13:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001af1a:	e8 93 fa ff ff       	call   c001a9b2 <FAT::fixFilepath(char*)>
c001af1f:	83 c4 10             	add    esp,0x10
c001af22:	83 ec 08             	sub    esp,0x8
c001af25:	8d 44 24 14          	lea    eax,[esp+0x14]
c001af29:	50                   	push   eax
c001af2a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001af31:	50                   	push   eax
c001af32:	e8 ee b6 fe ff       	call   c0006625 <f_rename>
c001af37:	83 c4 10             	add    esp,0x10
c001af3a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001af41:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001af48:	85 c0                	test   eax,eax
c001af4a:	75 07                	jne    c001af53 <FAT::rename(char const*, char const*)+0xb7>
c001af4c:	b8 00 00 00 00       	mov    eax,0x0
c001af51:	eb 05                	jmp    c001af58 <FAT::rename(char const*, char const*)+0xbc>
c001af53:	b8 01 00 00 00       	mov    eax,0x1
c001af58:	81 c4 1c 02 00 00    	add    esp,0x21c
c001af5e:	c3                   	ret    
c001af5f:	90                   	nop

c001af60 <FAT::mkdir(char const*)>:
c001af60:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001af66:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001af6e:	75 07                	jne    c001af77 <FAT::mkdir(char const*)+0x17>
c001af70:	b8 04 00 00 00       	mov    eax,0x4
c001af75:	eb 5c                	jmp    c001afd3 <FAT::mkdir(char const*)+0x73>
c001af77:	83 ec 08             	sub    esp,0x8
c001af7a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001af81:	8d 44 24 18          	lea    eax,[esp+0x18]
c001af85:	50                   	push   eax
c001af86:	e8 d5 57 fe ff       	call   c0000760 <strcpy>
c001af8b:	83 c4 10             	add    esp,0x10
c001af8e:	83 ec 08             	sub    esp,0x8
c001af91:	8d 44 24 14          	lea    eax,[esp+0x14]
c001af95:	50                   	push   eax
c001af96:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001af9d:	e8 10 fa ff ff       	call   c001a9b2 <FAT::fixFilepath(char*)>
c001afa2:	83 c4 10             	add    esp,0x10
c001afa5:	83 ec 0c             	sub    esp,0xc
c001afa8:	8d 44 24 18          	lea    eax,[esp+0x18]
c001afac:	50                   	push   eax
c001afad:	e8 47 b4 fe ff       	call   c00063f9 <f_mkdir>
c001afb2:	83 c4 10             	add    esp,0x10
c001afb5:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001afbc:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001afc3:	85 c0                	test   eax,eax
c001afc5:	75 07                	jne    c001afce <FAT::mkdir(char const*)+0x6e>
c001afc7:	b8 00 00 00 00       	mov    eax,0x0
c001afcc:	eb 05                	jmp    c001afd3 <FAT::mkdir(char const*)+0x73>
c001afce:	b8 01 00 00 00       	mov    eax,0x1
c001afd3:	81 c4 1c 01 00 00    	add    esp,0x11c
c001afd9:	c3                   	ret    

c001afda <FAT::exists(char const*)>:
c001afda:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001afe0:	83 ec 08             	sub    esp,0x8
c001afe3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001afea:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001afee:	50                   	push   eax
c001afef:	e8 6c 57 fe ff       	call   c0000760 <strcpy>
c001aff4:	83 c4 10             	add    esp,0x10
c001aff7:	83 ec 08             	sub    esp,0x8
c001affa:	8d 44 24 08          	lea    eax,[esp+0x8]
c001affe:	50                   	push   eax
c001afff:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b006:	e8 a7 f9 ff ff       	call   c001a9b2 <FAT::fixFilepath(char*)>
c001b00b:	83 c4 10             	add    esp,0x10
c001b00e:	83 ec 08             	sub    esp,0x8
c001b011:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c001b018:	50                   	push   eax
c001b019:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b01d:	50                   	push   eax
c001b01e:	e8 e6 ae fe ff       	call   c0005f09 <f_stat>
c001b023:	83 c4 10             	add    esp,0x10
c001b026:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b02d:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b034:	85 c0                	test   eax,eax
c001b036:	75 04                	jne    c001b03c <FAT::exists(char const*)+0x62>
c001b038:	b0 01                	mov    al,0x1
c001b03a:	eb 02                	jmp    c001b03e <FAT::exists(char const*)+0x64>
c001b03c:	b0 00                	mov    al,0x0
c001b03e:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b044:	c3                   	ret    
c001b045:	90                   	nop

c001b046 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001b046:	b8 08 00 00 00       	mov    eax,0x8
c001b04b:	c3                   	ret    

c001b04c <ISO9660::seek(void*, unsigned long long)>:
c001b04c:	53                   	push   ebx
c001b04d:	b8 04 00 00 00       	mov    eax,0x4
c001b052:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b056:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b05a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b05e:	85 d2                	test   edx,edx
c001b060:	74 17                	je     c001b079 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b062:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c001b065:	89 c8                	mov    eax,ecx
c001b067:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c001b06a:	b8 01 00 00 00       	mov    eax,0x1
c001b06f:	73 08                	jae    c001b079 <ISO9660::seek(void*, unsigned long long)+0x2d>
c001b071:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c001b074:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001b077:	31 c0                	xor    eax,eax
c001b079:	5b                   	pop    ebx
c001b07a:	c3                   	ret    
c001b07b:	90                   	nop

c001b07c <ISO9660::tell(void*, unsigned long long*)>:
c001b07c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b080:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b084:	85 d2                	test   edx,edx
c001b086:	74 12                	je     c001b09a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b088:	85 c0                	test   eax,eax
c001b08a:	74 0e                	je     c001b09a <ISO9660::tell(void*, unsigned long long*)+0x1e>
c001b08c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b08f:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c001b092:	89 10                	mov    DWORD PTR [eax],edx
c001b094:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b097:	31 c0                	xor    eax,eax
c001b099:	c3                   	ret    
c001b09a:	b8 04 00 00 00       	mov    eax,0x4
c001b09f:	c3                   	ret    

c001b0a0 <ISO9660::getName()>:
c001b0a0:	b8 68 33 02 c0       	mov    eax,0xc0023368
c001b0a5:	c3                   	ret    

c001b0a6 <ISO9660::stat(void*, unsigned long long*)>:
c001b0a6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b0aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b0ae:	85 d2                	test   edx,edx
c001b0b0:	74 12                	je     c001b0c4 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b0b2:	85 c0                	test   eax,eax
c001b0b4:	74 0e                	je     c001b0c4 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c001b0b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001b0b9:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001b0bc:	89 10                	mov    DWORD PTR [eax],edx
c001b0be:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001b0c1:	31 c0                	xor    eax,eax
c001b0c3:	c3                   	ret    
c001b0c4:	b8 04 00 00 00       	mov    eax,0x4
c001b0c9:	c3                   	ret    

c001b0ca <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001b0ca:	b8 01 00 00 00       	mov    eax,0x1
c001b0cf:	c3                   	ret    

c001b0d0 <ISO9660::unlink(char const*)>:
c001b0d0:	b8 01 00 00 00       	mov    eax,0x1
c001b0d5:	c3                   	ret    

c001b0d6 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001b0d6:	b8 01 00 00 00       	mov    eax,0x1
c001b0db:	c3                   	ret    

c001b0dc <ISO9660::rename(char const*, char const*)>:
c001b0dc:	b8 01 00 00 00       	mov    eax,0x1
c001b0e1:	c3                   	ret    

c001b0e2 <ISO9660::mkdir(char const*)>:
c001b0e2:	b8 01 00 00 00       	mov    eax,0x1
c001b0e7:	c3                   	ret    

c001b0e8 <ISO9660::close(void*)>:
c001b0e8:	83 ec 0c             	sub    esp,0xc
c001b0eb:	b8 04 00 00 00       	mov    eax,0x4
c001b0f0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b0f4:	85 d2                	test   edx,edx
c001b0f6:	74 0e                	je     c001b106 <ISO9660::close(void*)+0x1e>
c001b0f8:	83 ec 0c             	sub    esp,0xc
c001b0fb:	52                   	push   edx
c001b0fc:	e8 ee 0e ff ff       	call   c000bfef <free>
c001b101:	83 c4 10             	add    esp,0x10
c001b104:	31 c0                	xor    eax,eax
c001b106:	83 c4 0c             	add    esp,0xc
c001b109:	c3                   	ret    

c001b10a <ISO9660::closeDir(void*)>:
c001b10a:	83 ec 0c             	sub    esp,0xc
c001b10d:	b8 04 00 00 00       	mov    eax,0x4
c001b112:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b116:	85 d2                	test   edx,edx
c001b118:	74 0e                	je     c001b128 <ISO9660::closeDir(void*)+0x1e>
c001b11a:	83 ec 0c             	sub    esp,0xc
c001b11d:	52                   	push   edx
c001b11e:	e8 cc 0e ff ff       	call   c000bfef <free>
c001b123:	83 c4 10             	add    esp,0x10
c001b126:	31 c0                	xor    eax,eax
c001b128:	83 c4 0c             	add    esp,0xc
c001b12b:	c3                   	ret    

c001b12c <ISO9660::~ISO9660()>:
c001b12c:	83 ec 0c             	sub    esp,0xc
c001b12f:	ba bc 33 02 c0       	mov    edx,0xc00233bc
c001b134:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b138:	89 10                	mov    DWORD PTR [eax],edx
c001b13a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b13e:	83 ec 0c             	sub    esp,0xc
c001b141:	50                   	push   eax
c001b142:	e8 fb 43 ff ff       	call   c000f542 <Filesystem::~Filesystem()>
c001b147:	83 c4 10             	add    esp,0x10
c001b14a:	90                   	nop
c001b14b:	83 c4 0c             	add    esp,0xc
c001b14e:	c3                   	ret    
c001b14f:	90                   	nop

c001b150 <ISO9660::~ISO9660()>:
c001b150:	83 ec 0c             	sub    esp,0xc
c001b153:	83 ec 0c             	sub    esp,0xc
c001b156:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b15a:	e8 cd ff ff ff       	call   c001b12c <ISO9660::~ISO9660()>
c001b15f:	83 c4 10             	add    esp,0x10
c001b162:	83 ec 08             	sub    esp,0x8
c001b165:	6a 08                	push   0x8
c001b167:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b16b:	e8 7b 3f ff ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c001b170:	83 c4 10             	add    esp,0x10
c001b173:	83 c4 0c             	add    esp,0xc
c001b176:	c3                   	ret    

c001b177 <__memmem(unsigned char*, int, unsigned char*, int)>:
c001b177:	55                   	push   ebp
c001b178:	31 c9                	xor    ecx,ecx
c001b17a:	57                   	push   edi
c001b17b:	56                   	push   esi
c001b17c:	53                   	push   ebx
c001b17d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001b181:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001b185:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c001b189:	89 eb                	mov    ebx,ebp
c001b18b:	39 ce                	cmp    esi,ecx
c001b18d:	7e 17                	jle    c001b1a6 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c001b18f:	31 d2                	xor    edx,edx
c001b191:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c001b195:	7d 13                	jge    c001b1aa <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c001b197:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b19b:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b19e:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c001b1a1:	75 0d                	jne    c001b1b0 <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c001b1a3:	42                   	inc    edx
c001b1a4:	eb eb                	jmp    c001b191 <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c001b1a6:	31 c0                	xor    eax,eax
c001b1a8:	eb 0a                	jmp    c001b1b4 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b1aa:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001b1ae:	eb 04                	jmp    c001b1b4 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c001b1b0:	41                   	inc    ecx
c001b1b1:	43                   	inc    ebx
c001b1b2:	eb d7                	jmp    c001b18b <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c001b1b4:	5b                   	pop    ebx
c001b1b5:	5e                   	pop    esi
c001b1b6:	5f                   	pop    edi
c001b1b7:	5d                   	pop    ebp
c001b1b8:	c3                   	ret    

c001b1b9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b1b9:	56                   	push   esi
c001b1ba:	53                   	push   ebx
c001b1bb:	52                   	push   edx
c001b1bc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b1c0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b1c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1c8:	39 0d 20 5d 02 c0    	cmp    DWORD PTR ds:0xc0025d20,ecx
c001b1ce:	75 08                	jne    c001b1d8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c001b1d0:	38 05 c8 41 02 c0    	cmp    BYTE PTR ds:0xc00241c8,al
c001b1d6:	74 2b                	je     c001b203 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c001b1d8:	83 ec 0c             	sub    esp,0xc
c001b1db:	31 db                	xor    ebx,ebx
c001b1dd:	a2 c8 41 02 c0       	mov    ds:0xc00241c8,al
c001b1e2:	89 0d 20 5d 02 c0    	mov    DWORD PTR ds:0xc0025d20,ecx
c001b1e8:	68 40 5d 02 c0       	push   0xc0025d40
c001b1ed:	6a 01                	push   0x1
c001b1ef:	53                   	push   ebx
c001b1f0:	0f be c0             	movsx  eax,al
c001b1f3:	51                   	push   ecx
c001b1f4:	ff 34 85 9c 4c 02 c0 	push   DWORD PTR [eax*4-0x3ffdb364]
c001b1fb:	e8 6c 76 ff ff       	call   c001286c <LogicalDisk::read(unsigned long long, int, void*)>
c001b200:	83 c4 20             	add    esp,0x20
c001b203:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c001b20b:	c7 44 24 14 40 5d 02 c0 	mov    DWORD PTR [esp+0x14],0xc0025d40
c001b213:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c001b217:	58                   	pop    eax
c001b218:	5b                   	pop    ebx
c001b219:	5e                   	pop    esi
c001b21a:	e9 6c 54 fe ff       	jmp    c000068b <memcpy>
c001b21f:	90                   	nop

c001b220 <ISO9660::tryMount(LogicalDisk*, int)>:
c001b220:	81 ec 10 08 00 00    	sub    esp,0x810
c001b226:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c001b22d:	83 c0 41             	add    eax,0x41
c001b230:	0f be c0             	movsx  eax,al
c001b233:	50                   	push   eax
c001b234:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b238:	50                   	push   eax
c001b239:	6a 10                	push   0x10
c001b23b:	e8 79 ff ff ff       	call   c001b1b9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b240:	83 c4 10             	add    esp,0x10
c001b243:	31 c0                	xor    eax,eax
c001b245:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b24a:	75 1d                	jne    c001b269 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b24c:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b251:	75 16                	jne    c001b269 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b253:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b258:	75 0f                	jne    c001b269 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b25a:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b25f:	75 08                	jne    c001b269 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c001b261:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b266:	0f 94 c0             	sete   al
c001b269:	81 c4 0c 08 00 00    	add    esp,0x80c
c001b26f:	c3                   	ret    

c001b270 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001b270:	55                   	push   ebp
c001b271:	57                   	push   edi
c001b272:	56                   	push   esi
c001b273:	53                   	push   ebx
c001b274:	81 ec 34 08 00 00    	sub    esp,0x834
c001b27a:	8b ac 24 50 08 00 00 	mov    ebp,DWORD PTR [esp+0x850]
c001b281:	55                   	push   ebp
c001b282:	68 83 33 02 c0       	push   0xc0023383
c001b287:	e8 85 3f ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001b28c:	83 c4 10             	add    esp,0x10
c001b28f:	83 bc 24 44 08 00 00 00 	cmp    DWORD PTR [esp+0x844],0x0
c001b297:	0f 84 06 02 00 00    	je     c001b4a3 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b29d:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c001b2a5:	0f 84 f8 01 00 00    	je     c001b4a3 <ISO9660::read(void*, unsigned long, void*, int*)+0x233>
c001b2ab:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b2b2:	b8 01 00 00 00       	mov    eax,0x1
c001b2b7:	80 7f 18 00          	cmp    BYTE PTR [edi+0x18],0x0
c001b2bb:	0f 85 e7 01 00 00    	jne    c001b4a8 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b2c1:	8b 77 10             	mov    esi,DWORD PTR [edi+0x10]
c001b2c4:	31 d2                	xor    edx,edx
c001b2c6:	89 e9                	mov    ecx,ebp
c001b2c8:	8b 7f 14             	mov    edi,DWORD PTR [edi+0x14]
c001b2cb:	01 f1                	add    ecx,esi
c001b2cd:	89 d3                	mov    ebx,edx
c001b2cf:	11 fb                	adc    ebx,edi
c001b2d1:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b2d5:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b2d9:	8b 9c 24 44 08 00 00 	mov    ebx,DWORD PTR [esp+0x844]
c001b2e0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c001b2e3:	8b 5b 0c             	mov    ebx,DWORD PTR [ebx+0xc]
c001b2e6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001b2ea:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001b2ee:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b2f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b2f6:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b2fa:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c001b2fe:	72 19                	jb     c001b319 <ISO9660::read(void*, unsigned long, void*, int*)+0xa9>
c001b300:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b308:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b30c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001b30f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b313:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b317:	eb 13                	jmp    c001b32c <ISO9660::read(void*, unsigned long, void*, int*)+0xbc>
c001b319:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b31d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b321:	29 f0                	sub    eax,esi
c001b323:	19 fa                	sbb    edx,edi
c001b325:	89 04 24             	mov    DWORD PTR [esp],eax
c001b328:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b32c:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
c001b333:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001b336:	8b 00                	mov    eax,DWORD PTR [eax]
c001b338:	0f a4 c2 0b          	shld   edx,eax,0xb
c001b33c:	c1 e0 0b             	shl    eax,0xb
c001b33f:	53                   	push   ebx
c001b340:	01 c6                	add    esi,eax
c001b342:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b349:	11 d7                	adc    edi,edx
c001b34b:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b34f:	50                   	push   eax
c001b350:	89 fa                	mov    edx,edi
c001b352:	8d 44 24 28          	lea    eax,[esp+0x28]
c001b356:	50                   	push   eax
c001b357:	89 f0                	mov    eax,esi
c001b359:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b35d:	50                   	push   eax
c001b35e:	e8 56 fe ff ff       	call   c001b1b9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b363:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b36a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b36e:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001b372:	83 c4 10             	add    esp,0x10
c001b375:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c001b378:	b8 00 08 00 00       	mov    eax,0x800
c001b37d:	81 e2 ff 07 00 00    	and    edx,0x7ff
c001b383:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c001b387:	29 d0                	sub    eax,edx
c001b389:	39 c1                	cmp    ecx,eax
c001b38b:	83 db 00             	sbb    ebx,0x0
c001b38e:	7d 19                	jge    c001b3a9 <ISO9660::read(void*, unsigned long, void*, int*)+0x139>
c001b390:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b395:	75 16                	jne    c001b3ad <ISO9660::read(void*, unsigned long, void*, int*)+0x13d>
c001b397:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b39e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b3a4:	e9 f6 00 00 00       	jmp    c001b49f <ISO9660::read(void*, unsigned long, void*, int*)+0x22f>
c001b3a9:	89 c5                	mov    ebp,eax
c001b3ab:	eb 03                	jmp    c001b3b0 <ISO9660::read(void*, unsigned long, void*, int*)+0x140>
c001b3ad:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c001b3b0:	51                   	push   ecx
c001b3b1:	55                   	push   ebp
c001b3b2:	8d 44 14 28          	lea    eax,[esp+edx*1+0x28]
c001b3b6:	50                   	push   eax
c001b3b7:	ff b4 24 58 08 00 00 	push   DWORD PTR [esp+0x858]
c001b3be:	e8 c8 52 fe ff       	call   c000068b <memcpy>
c001b3c3:	8b 84 24 5c 08 00 00 	mov    eax,DWORD PTR [esp+0x85c]
c001b3ca:	01 e8                	add    eax,ebp
c001b3cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b3d0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b3d4:	89 e8                	mov    eax,ebp
c001b3d6:	99                   	cdq    
c001b3d7:	01 ee                	add    esi,ebp
c001b3d9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001b3dd:	11 d7                	adc    edi,edx
c001b3df:	29 e9                	sub    ecx,ebp
c001b3e1:	19 d3                	sbb    ebx,edx
c001b3e3:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001b3e7:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b3eb:	83 c4 10             	add    esp,0x10
c001b3ee:	b8 ff 07 00 00       	mov    eax,0x7ff
c001b3f3:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c001b3f6:	b8 00 00 00 00       	mov    eax,0x0
c001b3fb:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b3ff:	7d 3f                	jge    c001b440 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c001b401:	52                   	push   edx
c001b402:	89 fa                	mov    edx,edi
c001b404:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b40b:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b40f:	50                   	push   eax
c001b410:	89 f0                	mov    eax,esi
c001b412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b416:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b41a:	50                   	push   eax
c001b41b:	e8 99 fd ff ff       	call   c001b1b9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b420:	81 c6 00 08 00 00    	add    esi,0x800
c001b426:	83 d7 00             	adc    edi,0x0
c001b429:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c001b431:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c001b439:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c001b43e:	eb ab                	jmp    c001b3eb <ISO9660::read(void*, unsigned long, void*, int*)+0x17b>
c001b440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b444:	0b 04 24             	or     eax,DWORD PTR [esp]
c001b447:	74 34                	je     c001b47d <ISO9660::read(void*, unsigned long, void*, int*)+0x20d>
c001b449:	50                   	push   eax
c001b44a:	89 fa                	mov    edx,edi
c001b44c:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c001b453:	0f be 40 19          	movsx  eax,BYTE PTR [eax+0x19]
c001b457:	50                   	push   eax
c001b458:	89 f0                	mov    eax,esi
c001b45a:	0f ac d0 0b          	shrd   eax,edx,0xb
c001b45e:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001b462:	55                   	push   ebp
c001b463:	50                   	push   eax
c001b464:	e8 50 fd ff ff       	call   c001b1b9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b469:	83 c4 0c             	add    esp,0xc
c001b46c:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c001b470:	55                   	push   ebp
c001b471:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b475:	e8 11 52 fe ff       	call   c000068b <memcpy>
c001b47a:	83 c4 10             	add    esp,0x10
c001b47d:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b484:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b488:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b48c:	89 38                	mov    DWORD PTR [eax],edi
c001b48e:	8b bc 24 44 08 00 00 	mov    edi,DWORD PTR [esp+0x844]
c001b495:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b499:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001b49c:	89 57 14             	mov    DWORD PTR [edi+0x14],edx
c001b49f:	31 c0                	xor    eax,eax
c001b4a1:	eb 05                	jmp    c001b4a8 <ISO9660::read(void*, unsigned long, void*, int*)+0x238>
c001b4a3:	b8 04 00 00 00       	mov    eax,0x4
c001b4a8:	81 c4 2c 08 00 00    	add    esp,0x82c
c001b4ae:	5b                   	pop    ebx
c001b4af:	5e                   	pop    esi
c001b4b0:	5f                   	pop    edi
c001b4b1:	5d                   	pop    ebp
c001b4b2:	c3                   	ret    
c001b4b3:	90                   	nop

c001b4b4 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b4b4:	55                   	push   ebp
c001b4b5:	57                   	push   edi
c001b4b6:	56                   	push   esi
c001b4b7:	53                   	push   ebx
c001b4b8:	81 ec 5c 09 00 00    	sub    esp,0x95c
c001b4be:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c001b4c5:	85 f6                	test   esi,esi
c001b4c7:	0f 84 62 02 00 00    	je     c001b72f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001b4cd:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c001b4d5:	0f 84 54 02 00 00    	je     c001b72f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27b>
c001b4db:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001b4de:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c001b4e1:	75 0a                	jne    c001b4ed <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c001b4e3:	b8 07 00 00 00       	mov    eax,0x7
c001b4e8:	e9 47 02 00 00       	jmp    c001b734 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b4ed:	50                   	push   eax
c001b4ee:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b4f2:	50                   	push   eax
c001b4f3:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b4fa:	53                   	push   ebx
c001b4fb:	8b 06                	mov    eax,DWORD PTR [esi]
c001b4fd:	c1 e0 0b             	shl    eax,0xb
c001b500:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c001b503:	c1 e8 0b             	shr    eax,0xb
c001b506:	50                   	push   eax
c001b507:	e8 ad fc ff ff       	call   c001b1b9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b50c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b50f:	83 c4 10             	add    esp,0x10
c001b512:	89 c1                	mov    ecx,eax
c001b514:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c001b517:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001b51d:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c001b520:	84 db                	test   bl,bl
c001b522:	0f 85 90 00 00 00    	jne    c001b5b8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c001b528:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c001b52e:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b534:	29 c7                	sub    edi,eax
c001b536:	89 fb                	mov    ebx,edi
c001b538:	c1 fb 1f             	sar    ebx,0x1f
c001b53b:	01 f8                	add    eax,edi
c001b53d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b541:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c001b544:	11 da                	adc    edx,ebx
c001b546:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b549:	89 04 24             	mov    DWORD PTR [esp],eax
c001b54c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b550:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c001b553:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b556:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b559:	89 d8                	mov    eax,ebx
c001b55b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b55f:	ba 00 00 00 00       	mov    edx,0x0
c001b564:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c001b568:	b8 00 00 00 00       	mov    eax,0x0
c001b56d:	73 0b                	jae    c001b57a <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001b56f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b572:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b576:	29 f8                	sub    eax,edi
c001b578:	19 da                	sbb    edx,ebx
c001b57a:	89 d3                	mov    ebx,edx
c001b57c:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b57f:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b582:	09 c3                	or     ebx,eax
c001b584:	0f 84 59 ff ff ff    	je     c001b4e3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c001b58a:	55                   	push   ebp
c001b58b:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c001b58f:	50                   	push   eax
c001b590:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c001b597:	53                   	push   ebx
c001b598:	8b 06                	mov    eax,DWORD PTR [esi]
c001b59a:	c1 e0 0b             	shl    eax,0xb
c001b59d:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c001b5a1:	c1 e8 0b             	shr    eax,0xb
c001b5a4:	50                   	push   eax
c001b5a5:	e8 0f fc ff ff       	call   c001b1b9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b5aa:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b5ad:	83 c4 10             	add    esp,0x10
c001b5b0:	25 ff 07 00 00       	and    eax,0x7ff
c001b5b5:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c001b5b8:	57                   	push   edi
c001b5b9:	6a 28                	push   0x28
c001b5bb:	6a 00                	push   0x0
c001b5bd:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b5c1:	50                   	push   eax
c001b5c2:	e8 fa 50 fe ff       	call   c00006c1 <memset>
c001b5c7:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001b5ca:	31 d2                	xor    edx,edx
c001b5cc:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001b5d2:	89 f8                	mov    eax,edi
c001b5d4:	83 c0 21             	add    eax,0x21
c001b5d7:	83 d2 00             	adc    edx,0x0
c001b5da:	89 c7                	mov    edi,eax
c001b5dc:	89 d5                	mov    ebp,edx
c001b5de:	83 c4 10             	add    esp,0x10
c001b5e1:	31 c9                	xor    ecx,ecx
c001b5e3:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c001b5ea:	83 f9 28             	cmp    ecx,0x28
c001b5ed:	0f 94 c2             	sete   dl
c001b5f0:	88 04 24             	mov    BYTE PTR [esp],al
c001b5f3:	88 d0                	mov    al,dl
c001b5f5:	ba ff 07 00 00       	mov    edx,0x7ff
c001b5fa:	39 fa                	cmp    edx,edi
c001b5fc:	ba 00 00 00 00       	mov    edx,0x0
c001b601:	19 ea                	sbb    edx,ebp
c001b603:	0f 92 c2             	setb   dl
c001b606:	09 c2                	or     edx,eax
c001b608:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c001b60c:	0f 94 c0             	sete   al
c001b60f:	08 d0                	or     al,dl
c001b611:	75 16                	jne    c001b629 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b613:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001b617:	74 10                	je     c001b629 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c001b619:	8a 04 24             	mov    al,BYTE PTR [esp]
c001b61c:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c001b620:	41                   	inc    ecx
c001b621:	83 c7 01             	add    edi,0x1
c001b624:	83 d5 00             	adc    ebp,0x0
c001b627:	eb ba                	jmp    c001b5e3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c001b629:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c001b630:	83 ec 0c             	sub    esp,0xc
c001b633:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001b637:	57                   	push   edi
c001b638:	e8 a1 50 fe ff       	call   c00006de <strlen>
c001b63d:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b641:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b644:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c001b64b:	25 ff 07 00 00       	and    eax,0x7ff
c001b650:	01 c8                	add    eax,ecx
c001b652:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c001b65a:	5a                   	pop    edx
c001b65b:	f6 80 19 f8 ff ff 02 	test   BYTE PTR [eax-0x7e7],0x2
c001b662:	59                   	pop    ecx
c001b663:	0f 95 c0             	setne  al
c001b666:	0f b6 c0             	movzx  eax,al
c001b669:	40                   	inc    eax
c001b66a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c001b66e:	57                   	push   edi
c001b66f:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001b673:	50                   	push   eax
c001b674:	e8 e7 50 fe ff       	call   c0000760 <strcpy>
c001b679:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c001b67d:	83 c4 10             	add    esp,0x10
c001b680:	84 c0                	test   al,al
c001b682:	75 21                	jne    c001b6a5 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f1>
c001b684:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c001b68c:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b694:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b69c:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c001b6a3:	eb 28                	jmp    c001b6cd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b6a5:	fe c8                	dec    al
c001b6a7:	75 24                	jne    c001b6cd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x219>
c001b6a9:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c001b6b1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001b6b9:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c001b6c1:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c001b6c8:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c001b6cd:	50                   	push   eax
c001b6ce:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c001b6d5:	0f b6 fb             	movzx  edi,bl
c001b6d8:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b6dc:	31 db                	xor    ebx,ebx
c001b6de:	50                   	push   eax
c001b6df:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c001b6e6:	e8 a0 4f fe ff       	call   c000068b <memcpy>
c001b6eb:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c001b6f2:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b6f8:	89 f9                	mov    ecx,edi
c001b6fa:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c001b6fd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c001b700:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c001b703:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b706:	83 c4 10             	add    esp,0x10
c001b709:	39 c7                	cmp    edi,eax
c001b70b:	89 df                	mov    edi,ebx
c001b70d:	19 d7                	sbb    edi,edx
c001b70f:	72 10                	jb     c001b721 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26d>
c001b711:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c001b718:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c001b71f:	eb 0a                	jmp    c001b72b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x277>
c001b721:	29 c8                	sub    eax,ecx
c001b723:	19 da                	sbb    edx,ebx
c001b725:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c001b728:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c001b72b:	31 c0                	xor    eax,eax
c001b72d:	eb 05                	jmp    c001b734 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x280>
c001b72f:	b8 04 00 00 00       	mov    eax,0x4
c001b734:	81 c4 5c 09 00 00    	add    esp,0x95c
c001b73a:	5b                   	pop    ebx
c001b73b:	5e                   	pop    esi
c001b73c:	5f                   	pop    edi
c001b73d:	5d                   	pop    ebp
c001b73e:	c3                   	ret    

c001b73f <readRoot(unsigned int*, unsigned int*, char)>:
c001b73f:	81 ec 40 08 00 00    	sub    esp,0x840
c001b745:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c001b74d:	50                   	push   eax
c001b74e:	8d 44 24 38          	lea    eax,[esp+0x38]
c001b752:	50                   	push   eax
c001b753:	6a 10                	push   0x10
c001b755:	e8 5f fa ff ff       	call   c001b1b9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b75a:	83 c4 0c             	add    esp,0xc
c001b75d:	6a 22                	push   0x22
c001b75f:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c001b766:	50                   	push   eax
c001b767:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001b76b:	50                   	push   eax
c001b76c:	e8 1a 4f fe ff       	call   c000068b <memcpy>
c001b771:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c001b778:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b77c:	89 10                	mov    DWORD PTR [eax],edx
c001b77e:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c001b785:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b789:	89 10                	mov    DWORD PTR [eax],edx
c001b78b:	b0 01                	mov    al,0x1
c001b78d:	81 c4 4c 08 00 00    	add    esp,0x84c
c001b793:	c3                   	ret    

c001b794 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c001b794:	55                   	push   ebp
c001b795:	57                   	push   edi
c001b796:	56                   	push   esi
c001b797:	53                   	push   ebx
c001b798:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b79e:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b7a5:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c001b7ac:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b7b0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001b7b4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b7b8:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c001b7bc:	75 03                	jne    c001b7c1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b7be:	83 c3 02             	add    ebx,0x2
c001b7c1:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c001b7c4:	75 03                	jne    c001b7c9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c001b7c6:	43                   	inc    ebx
c001b7c7:	eb f8                	jmp    c001b7c1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c001b7c9:	51                   	push   ecx
c001b7ca:	68 00 01 00 00       	push   0x100
c001b7cf:	6a 00                	push   0x0
c001b7d1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b7d5:	50                   	push   eax
c001b7d6:	e8 e6 4e fe ff       	call   c00006c1 <memset>
c001b7db:	83 c4 10             	add    esp,0x10
c001b7de:	31 d2                	xor    edx,edx
c001b7e0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c001b7e3:	84 c0                	test   al,al
c001b7e5:	74 21                	je     c001b808 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c001b7e7:	3c 2f                	cmp    al,0x2f
c001b7e9:	75 0b                	jne    c001b7f6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c001b7eb:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c001b7ef:	bd 01 00 00 00       	mov    ebp,0x1
c001b7f4:	eb 14                	jmp    c001b80a <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c001b7f6:	8d 48 9f             	lea    ecx,[eax-0x61]
c001b7f9:	80 f9 19             	cmp    cl,0x19
c001b7fc:	77 03                	ja     c001b801 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b7fe:	83 e8 20             	sub    eax,0x20
c001b801:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c001b805:	42                   	inc    edx
c001b806:	eb d8                	jmp    c001b7e0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c001b808:	31 ed                	xor    ebp,ebp
c001b80a:	83 ec 0c             	sub    esp,0xc
c001b80d:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001b814:	e8 c6 07 ff ff       	call   c000bfdf <malloc>
c001b819:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b820:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c001b826:	89 c6                	mov    esi,eax
c001b828:	c1 ef 0b             	shr    edi,0xb
c001b82b:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c001b832:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001b836:	83 c4 10             	add    esp,0x10
c001b839:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c001b83e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b842:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c001b849:	74 28                	je     c001b873 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c001b84b:	52                   	push   edx
c001b84c:	57                   	push   edi
c001b84d:	50                   	push   eax
c001b84e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b852:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b859:	e8 5b f9 ff ff       	call   c001b1b9 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b85e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b862:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c001b869:	05 00 08 00 00       	add    eax,0x800
c001b86e:	83 c4 10             	add    esp,0x10
c001b871:	eb cb                	jmp    c001b83e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c001b873:	83 ec 0c             	sub    esp,0xc
c001b876:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b87a:	57                   	push   edi
c001b87b:	e8 5e 4e fe ff       	call   c00006de <strlen>
c001b880:	50                   	push   eax
c001b881:	57                   	push   edi
c001b882:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c001b889:	56                   	push   esi
c001b88a:	e8 e8 f8 ff ff       	call   c001b177 <__memmem(unsigned char*, int, unsigned char*, int)>
c001b88f:	83 c4 20             	add    esp,0x20
c001b892:	85 c0                	test   eax,eax
c001b894:	75 13                	jne    c001b8a9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c001b896:	83 ec 0c             	sub    esp,0xc
c001b899:	56                   	push   esi
c001b89a:	e8 50 07 ff ff       	call   c000bfef <free>
c001b89f:	83 c4 10             	add    esp,0x10
c001b8a2:	31 c0                	xor    eax,eax
c001b8a4:	e9 b3 00 00 00       	jmp    c001b95c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b8a9:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c001b8ad:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c001b8b1:	c1 e7 08             	shl    edi,0x8
c001b8b4:	c1 e2 10             	shl    edx,0x10
c001b8b7:	09 d7                	or     edi,edx
c001b8b9:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c001b8bd:	09 d7                	or     edi,edx
c001b8bf:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c001b8c3:	c1 e2 18             	shl    edx,0x18
c001b8c6:	09 d7                	or     edi,edx
c001b8c8:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c001b8cc:	89 d1                	mov    ecx,edx
c001b8ce:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c001b8d2:	c1 e1 08             	shl    ecx,0x8
c001b8d5:	c1 e2 10             	shl    edx,0x10
c001b8d8:	09 ca                	or     edx,ecx
c001b8da:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c001b8de:	09 ca                	or     edx,ecx
c001b8e0:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c001b8e4:	c1 e1 18             	shl    ecx,0x18
c001b8e7:	09 ca                	or     edx,ecx
c001b8e9:	89 e9                	mov    ecx,ebp
c001b8eb:	84 c9                	test   cl,cl
c001b8ed:	74 3c                	je     c001b92b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c001b8ef:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001b8f3:	83 ec 0c             	sub    esp,0xc
c001b8f6:	56                   	push   esi
c001b8f7:	e8 f3 06 ff ff       	call   c000bfef <free>
c001b8fc:	83 c4 0c             	add    esp,0xc
c001b8ff:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b906:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001b90b:	50                   	push   eax
c001b90c:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b913:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001b91a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b91e:	52                   	push   edx
c001b91f:	57                   	push   edi
c001b920:	53                   	push   ebx
c001b921:	e8 6e fe ff ff       	call   c001b794 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b926:	83 c4 20             	add    esp,0x20
c001b929:	eb 31                	jmp    c001b95c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c001b92b:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c001b932:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c001b935:	d0 e8                	shr    al,1
c001b937:	83 ec 0c             	sub    esp,0xc
c001b93a:	89 3b                	mov    DWORD PTR [ebx],edi
c001b93c:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001b943:	83 e0 01             	and    eax,0x1
c001b946:	89 13                	mov    DWORD PTR [ebx],edx
c001b948:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c001b94f:	89 03                	mov    DWORD PTR [ebx],eax
c001b951:	56                   	push   esi
c001b952:	e8 98 06 ff ff       	call   c000bfef <free>
c001b957:	83 c4 10             	add    esp,0x10
c001b95a:	b0 01                	mov    al,0x1
c001b95c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b962:	5b                   	pop    ebx
c001b963:	5e                   	pop    esi
c001b964:	5f                   	pop    edi
c001b965:	5d                   	pop    ebp
c001b966:	c3                   	ret    

c001b967 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c001b967:	55                   	push   ebp
c001b968:	57                   	push   edi
c001b969:	56                   	push   esi
c001b96a:	53                   	push   ebx
c001b96b:	83 ec 20             	sub    esp,0x20
c001b96e:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b972:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001b976:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c001b97b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001b97f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b987:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001b98f:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c001b995:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c001b99b:	57                   	push   edi
c001b99c:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b9a0:	50                   	push   eax
c001b9a1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b9a5:	50                   	push   eax
c001b9a6:	e8 94 fd ff ff       	call   c001b73f <readRoot(unsigned int*, unsigned int*, char)>
c001b9ab:	5a                   	pop    edx
c001b9ac:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001b9b0:	e8 29 4d fe ff       	call   c00006de <strlen>
c001b9b5:	83 c4 10             	add    esp,0x10
c001b9b8:	83 f8 03             	cmp    eax,0x3
c001b9bb:	77 17                	ja     c001b9d4 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c001b9bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b9c1:	89 03                	mov    DWORD PTR [ebx],eax
c001b9c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9c7:	89 06                	mov    DWORD PTR [esi],eax
c001b9c9:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c001b9d0:	b0 01                	mov    al,0x1
c001b9d2:	eb 19                	jmp    c001b9ed <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c001b9d4:	50                   	push   eax
c001b9d5:	55                   	push   ebp
c001b9d6:	57                   	push   edi
c001b9d7:	56                   	push   esi
c001b9d8:	53                   	push   ebx
c001b9d9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b9dd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b9e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b9e5:	e8 aa fd ff ff       	call   c001b794 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c001b9ea:	83 c4 20             	add    esp,0x20
c001b9ed:	83 c4 1c             	add    esp,0x1c
c001b9f0:	5b                   	pop    ebx
c001b9f1:	5e                   	pop    esi
c001b9f2:	5f                   	pop    edi
c001b9f3:	5d                   	pop    ebp
c001b9f4:	c3                   	ret    
c001b9f5:	90                   	nop

c001b9f6 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001b9f6:	57                   	push   edi
c001b9f7:	56                   	push   esi
c001b9f8:	53                   	push   ebx
c001b9f9:	83 ec 10             	sub    esp,0x10
c001b9fc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001ba00:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001ba04:	85 f6                	test   esi,esi
c001ba06:	74 7b                	je     c001ba83 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001ba08:	85 ff                	test   edi,edi
c001ba0a:	74 77                	je     c001ba83 <ISO9660::open(char const*, void**, FileOpenMode)+0x8d>
c001ba0c:	83 ec 0c             	sub    esp,0xc
c001ba0f:	6a 1c                	push   0x1c
c001ba11:	e8 c9 05 ff ff       	call   c000bfdf <malloc>
c001ba16:	89 07                	mov    DWORD PTR [edi],eax
c001ba18:	89 c3                	mov    ebx,eax
c001ba1a:	58                   	pop    eax
c001ba1b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001ba1f:	50                   	push   eax
c001ba20:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001ba23:	50                   	push   eax
c001ba24:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba28:	50                   	push   eax
c001ba29:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ba2d:	50                   	push   eax
c001ba2e:	56                   	push   esi
c001ba2f:	e8 33 ff ff ff       	call   c001b967 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001ba34:	83 c4 20             	add    esp,0x20
c001ba37:	84 c0                	test   al,al
c001ba39:	74 07                	je     c001ba42 <ISO9660::open(char const*, void**, FileOpenMode)+0x4c>
c001ba3b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ba40:	74 0b                	je     c001ba4d <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001ba42:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001ba46:	b8 01 00 00 00       	mov    eax,0x1
c001ba4b:	eb 3b                	jmp    c001ba88 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001ba4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba51:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001ba55:	89 03                	mov    DWORD PTR [ebx],eax
c001ba57:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001ba5e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ba62:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001ba69:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ba70:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001ba73:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001ba7a:	8a 06                	mov    al,BYTE PTR [esi]
c001ba7c:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001ba7f:	31 c0                	xor    eax,eax
c001ba81:	eb 05                	jmp    c001ba88 <ISO9660::open(char const*, void**, FileOpenMode)+0x92>
c001ba83:	b8 04 00 00 00       	mov    eax,0x4
c001ba88:	83 c4 10             	add    esp,0x10
c001ba8b:	5b                   	pop    ebx
c001ba8c:	5e                   	pop    esi
c001ba8d:	5f                   	pop    edi
c001ba8e:	c3                   	ret    
c001ba8f:	90                   	nop

c001ba90 <ISO9660::exists(char const*)>:
c001ba90:	83 ec 28             	sub    esp,0x28
c001ba93:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ba97:	8d 54 24 18          	lea    edx,[esp+0x18]
c001ba9b:	52                   	push   edx
c001ba9c:	0f be 10             	movsx  edx,BYTE PTR [eax]
c001ba9f:	52                   	push   edx
c001baa0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001baa4:	52                   	push   edx
c001baa5:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c001baa9:	52                   	push   edx
c001baaa:	50                   	push   eax
c001baab:	e8 b7 fe ff ff       	call   c001b967 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001bab0:	83 c4 3c             	add    esp,0x3c
c001bab3:	c3                   	ret    

c001bab4 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001bab4:	56                   	push   esi
c001bab5:	53                   	push   ebx
c001bab6:	83 ec 14             	sub    esp,0x14
c001bab9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001babd:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bac1:	85 db                	test   ebx,ebx
c001bac3:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001bac7:	0f 94 c2             	sete   dl
c001baca:	85 f6                	test   esi,esi
c001bacc:	0f 94 c0             	sete   al
c001bacf:	08 c2                	or     dl,al
c001bad1:	75 68                	jne    c001bb3b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001bad3:	85 c9                	test   ecx,ecx
c001bad5:	74 64                	je     c001bb3b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c001bad7:	83 ec 0c             	sub    esp,0xc
c001bada:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001badd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001bae3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001baea:	8d 44 24 18          	lea    eax,[esp+0x18]
c001baee:	50                   	push   eax
c001baef:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c001baf2:	50                   	push   eax
c001baf3:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001baf7:	50                   	push   eax
c001baf8:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bafc:	50                   	push   eax
c001bafd:	51                   	push   ecx
c001bafe:	e8 64 fe ff ff       	call   c001b967 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001bb03:	83 c4 20             	add    esp,0x20
c001bb06:	ba 01 00 00 00       	mov    edx,0x1
c001bb0b:	84 c0                	test   al,al
c001bb0d:	74 31                	je     c001bb40 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001bb0f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bb13:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bb1a:	89 03                	mov    DWORD PTR [ebx],eax
c001bb1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb20:	85 c0                	test   eax,eax
c001bb22:	ba 00 00 00 00       	mov    edx,0x0
c001bb27:	0f 95 06             	setne  BYTE PTR [esi]
c001bb2a:	74 14                	je     c001bb40 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001bb2c:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001bb32:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bb39:	eb 05                	jmp    c001bb40 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c001bb3b:	ba 04 00 00 00       	mov    edx,0x4
c001bb40:	83 c4 14             	add    esp,0x14
c001bb43:	89 d0                	mov    eax,edx
c001bb45:	5b                   	pop    ebx
c001bb46:	5e                   	pop    esi
c001bb47:	c3                   	ret    

c001bb48 <ISO9660::openDir(char const*, void**)>:
c001bb48:	57                   	push   edi
c001bb49:	56                   	push   esi
c001bb4a:	53                   	push   ebx
c001bb4b:	83 ec 10             	sub    esp,0x10
c001bb4e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001bb52:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001bb56:	85 f6                	test   esi,esi
c001bb58:	0f 84 95 00 00 00    	je     c001bbf3 <ISO9660::openDir(char const*, void**)+0xab>
c001bb5e:	85 ff                	test   edi,edi
c001bb60:	0f 84 8d 00 00 00    	je     c001bbf3 <ISO9660::openDir(char const*, void**)+0xab>
c001bb66:	83 ec 0c             	sub    esp,0xc
c001bb69:	6a 1c                	push   0x1c
c001bb6b:	e8 6f 04 ff ff       	call   c000bfdf <malloc>
c001bb70:	89 07                	mov    DWORD PTR [edi],eax
c001bb72:	89 c3                	mov    ebx,eax
c001bb74:	59                   	pop    ecx
c001bb75:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bb79:	50                   	push   eax
c001bb7a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c001bb7d:	50                   	push   eax
c001bb7e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bb82:	50                   	push   eax
c001bb83:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001bb87:	50                   	push   eax
c001bb88:	56                   	push   esi
c001bb89:	e8 d9 fd ff ff       	call   c001b967 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c001bb8e:	83 c4 20             	add    esp,0x20
c001bb91:	84 c0                	test   al,al
c001bb93:	74 07                	je     c001bb9c <ISO9660::openDir(char const*, void**)+0x54>
c001bb95:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001bb9a:	75 21                	jne    c001bbbd <ISO9660::openDir(char const*, void**)+0x75>
c001bb9c:	52                   	push   edx
c001bb9d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001bba1:	0f b6 c0             	movzx  eax,al
c001bba4:	50                   	push   eax
c001bba5:	68 96 33 02 c0       	push   0xc0023396
c001bbaa:	e8 62 36 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001bbaf:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c001bbb3:	83 c4 10             	add    esp,0x10
c001bbb6:	b8 01 00 00 00       	mov    eax,0x1
c001bbbb:	eb 3b                	jmp    c001bbf8 <ISO9660::openDir(char const*, void**)+0xb0>
c001bbbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bbc1:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c001bbc5:	89 03                	mov    DWORD PTR [ebx],eax
c001bbc7:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c001bbce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bbd2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001bbd9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bbe0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001bbe3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001bbea:	8a 06                	mov    al,BYTE PTR [esi]
c001bbec:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c001bbef:	31 c0                	xor    eax,eax
c001bbf1:	eb 05                	jmp    c001bbf8 <ISO9660::openDir(char const*, void**)+0xb0>
c001bbf3:	b8 04 00 00 00       	mov    eax,0x4
c001bbf8:	83 c4 10             	add    esp,0x10
c001bbfb:	5b                   	pop    ebx
c001bbfc:	5e                   	pop    esi
c001bbfd:	5f                   	pop    edi
c001bbfe:	c3                   	ret    
c001bbff:	90                   	nop

c001bc00 <ISO9660::ISO9660()>:
c001bc00:	83 ec 0c             	sub    esp,0xc
c001bc03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc07:	83 ec 0c             	sub    esp,0xc
c001bc0a:	50                   	push   eax
c001bc0b:	e8 0e 39 ff ff       	call   c000f51e <Filesystem::Filesystem()>
c001bc10:	83 c4 10             	add    esp,0x10
c001bc13:	ba bc 33 02 c0       	mov    edx,0xc00233bc
c001bc18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc1c:	89 10                	mov    DWORD PTR [eax],edx
c001bc1e:	90                   	nop
c001bc1f:	83 c4 0c             	add    esp,0xc
c001bc22:	c3                   	ret    
c001bc23:	90                   	nop

c001bc24 <SoundChannel::~SoundChannel()>:
c001bc24:	83 ec 0c             	sub    esp,0xc
c001bc27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001bc2e:	83 ec 0c             	sub    esp,0xc
c001bc31:	50                   	push   eax
c001bc32:	e8 b8 03 ff ff       	call   c000bfef <free>
c001bc37:	83 c4 10             	add    esp,0x10
c001bc3a:	90                   	nop
c001bc3b:	83 c4 0c             	add    esp,0xc
c001bc3e:	c3                   	ret    
c001bc3f:	90                   	nop

c001bc40 <SoundChannel::setSpeed(float)>:
c001bc40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc44:	d9 44 24 08          	fld    DWORD PTR [esp+0x8]
c001bc48:	d9 58 28             	fstp   DWORD PTR [eax+0x28]
c001bc4b:	c3                   	ret    

c001bc4c <SoundChannel::getSpeed()>:
c001bc4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc50:	d9 40 28             	fld    DWORD PTR [eax+0x28]
c001bc53:	c3                   	ret    

c001bc54 <SoundChannel::setVolume(int)>:
c001bc54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc58:	83 f8 64             	cmp    eax,0x64
c001bc5b:	7e 05                	jle    c001bc62 <SoundChannel::setVolume(int)+0xe>
c001bc5d:	b8 64 00 00 00       	mov    eax,0x64
c001bc62:	85 c0                	test   eax,eax
c001bc64:	79 02                	jns    c001bc68 <SoundChannel::setVolume(int)+0x14>
c001bc66:	31 c0                	xor    eax,eax
c001bc68:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bc6c:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c001bc6f:	c3                   	ret    

c001bc70 <SoundChannel::getVolume()>:
c001bc70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc74:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bc77:	c3                   	ret    

c001bc78 <SoundChannel::pause()>:
c001bc78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bc7c:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c001bc80:	c3                   	ret    
c001bc81:	90                   	nop

c001bc82 <SoundChannel::SoundChannel(int, int, int, int)>:
c001bc82:	83 ec 1c             	sub    esp,0x1c
c001bc85:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001bc89:	e8 ea ff ff ff       	call   c001bc78 <SoundChannel::pause()>
c001bc8e:	83 c4 04             	add    esp,0x4
c001bc91:	6a 50                	push   0x50
c001bc93:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bc97:	e8 b8 ff ff ff       	call   c001bc54 <SoundChannel::setVolume(int)>
c001bc9c:	83 c4 08             	add    esp,0x8
c001bc9f:	d9 e8                	fld1   
c001bca1:	8d 64 24 fc          	lea    esp,[esp-0x4]
c001bca5:	d9 1c 24             	fstp   DWORD PTR [esp]
c001bca8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bcac:	e8 8f ff ff ff       	call   c001bc40 <SoundChannel::setSpeed(float)>
c001bcb1:	83 c4 08             	add    esp,0x8
c001bcb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcb8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001bcbc:	89 10                	mov    DWORD PTR [eax],edx
c001bcbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcc2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bcc6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bcc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bccd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bcd1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bcd4:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c001bcd9:	75 26                	jne    c001bd01 <SoundChannel::SoundChannel(int, int, int, int)+0x7f>
c001bcdb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bcdf:	8b 10                	mov    edx,DWORD PTR [eax]
c001bce1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bce5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bce8:	0f af c2             	imul   eax,edx
c001bceb:	89 c2                	mov    edx,eax
c001bced:	c1 fa 1f             	sar    edx,0x1f
c001bcf0:	83 e2 03             	and    edx,0x3
c001bcf3:	01 d0                	add    eax,edx
c001bcf5:	c1 f8 02             	sar    eax,0x2
c001bcf8:	05 a0 0f 00 00       	add    eax,0xfa0
c001bcfd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001bd01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd05:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001bd09:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c001bd0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd10:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001bd17:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd1b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c001bd22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd26:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bd29:	c1 e0 02             	shl    eax,0x2
c001bd2c:	83 ec 0c             	sub    esp,0xc
c001bd2f:	50                   	push   eax
c001bd30:	e8 aa 02 ff ff       	call   c000bfdf <malloc>
c001bd35:	83 c4 10             	add    esp,0x10
c001bd38:	89 c2                	mov    edx,eax
c001bd3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd3e:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001bd41:	83 ec 04             	sub    esp,0x4
c001bd44:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bd48:	50                   	push   eax
c001bd49:	6a 01                	push   0x1
c001bd4b:	6a 04                	push   0x4
c001bd4d:	e8 97 cb fe ff       	call   c00088e9 <src_new>
c001bd52:	83 c4 10             	add    esp,0x10
c001bd55:	89 c2                	mov    edx,eax
c001bd57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd5b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001bd5e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bd62:	85 c0                	test   eax,eax
c001bd64:	74 10                	je     c001bd76 <SoundChannel::SoundChannel(int, int, int, int)+0xf4>
c001bd66:	83 ec 0c             	sub    esp,0xc
c001bd69:	68 18 34 02 c0       	push   0xc0023418
c001bd6e:	e8 cd 9c ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c001bd73:	83 c4 10             	add    esp,0x10
c001bd76:	90                   	nop
c001bd77:	83 c4 1c             	add    esp,0x1c
c001bd7a:	c3                   	ret    
c001bd7b:	90                   	nop

c001bd7c <SoundChannel::play()>:
c001bd7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd80:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c001bd84:	c3                   	ret    
c001bd85:	90                   	nop

c001bd86 <SoundChannel::paused()>:
c001bd86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd8a:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c001bd8d:	c3                   	ret    

c001bd8e <SoundChannel::getSampleRate()>:
c001bd8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd92:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd94:	c3                   	ret    
c001bd95:	90                   	nop

c001bd96 <SoundChannel::getBits()>:
c001bd96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bd9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bd9d:	c3                   	ret    

c001bd9e <SoundChannel::getBufferUsed()>:
c001bd9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bda2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001bda5:	c3                   	ret    

c001bda6 <SoundChannel::getBufferSize()>:
c001bda6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bdaa:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001bdad:	c3                   	ret    

c001bdae <SoundChannel::unbuffer(float*, int, int)>:
c001bdae:	53                   	push   ebx
c001bdaf:	83 ec 40             	sub    esp,0x40
c001bdb2:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001bdb6:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001bdbe:	db 03                	fild   DWORD PTR [ebx]
c001bdc0:	da 7c 24 50          	fidivr DWORD PTR [esp+0x50]
c001bdc4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001bdc7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bdcb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001bdce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001bdd2:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001bdd6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001bdda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001bdde:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bde2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bde6:	d8 73 28             	fdiv   DWORD PTR [ebx+0x28]
c001bde9:	dd 5c 24 30          	fstp   QWORD PTR [esp+0x30]
c001bded:	50                   	push   eax
c001bdee:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c001bdf1:	e8 ad c7 fe ff       	call   c00085a3 <src_process>
c001bdf6:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001bdfa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001bdfd:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c001be00:	83 c4 0c             	add    esp,0xc
c001be03:	29 d0                	sub    eax,edx
c001be05:	c1 e0 02             	shl    eax,0x2
c001be08:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c001be0b:	50                   	push   eax
c001be0c:	8d 04 91             	lea    eax,[ecx+edx*4]
c001be0f:	50                   	push   eax
c001be10:	51                   	push   ecx
c001be11:	e8 3d 48 fe ff       	call   c0000653 <memmove>
c001be16:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001be1a:	83 c4 48             	add    esp,0x48
c001be1d:	5b                   	pop    ebx
c001be1e:	c3                   	ret    
c001be1f:	90                   	nop

c001be20 <SoundChannel::buffer8(unsigned char*, int)>:
c001be20:	53                   	push   ebx
c001be21:	31 c0                	xor    eax,eax
c001be23:	83 ec 08             	sub    esp,0x8
c001be26:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001be2a:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
c001be2d:	39 5a 1c             	cmp    DWORD PTR [edx+0x1c],ebx
c001be30:	74 35                	je     c001be67 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001be32:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001be36:	7d 2f                	jge    c001be67 <SoundChannel::buffer8(unsigned char*, int)+0x47>
c001be38:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001be3c:	d9 05 34 34 02 c0    	fld    DWORD PTR ds:0xc0023434
c001be42:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c001be46:	66 89 4c 24 02       	mov    WORD PTR [esp+0x2],cx
c001be4b:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c001be4e:	de 4c 24 02          	fimul  WORD PTR [esp+0x2]
c001be52:	40                   	inc    eax
c001be53:	8d 59 01             	lea    ebx,[ecx+0x1]
c001be56:	89 5a 1c             	mov    DWORD PTR [edx+0x1c],ebx
c001be59:	8b 5a 10             	mov    ebx,DWORD PTR [edx+0x10]
c001be5c:	d9 1c 8b             	fstp   DWORD PTR [ebx+ecx*4]
c001be5f:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001be62:	39 4a 1c             	cmp    DWORD PTR [edx+0x1c],ecx
c001be65:	eb c9                	jmp    c001be30 <SoundChannel::buffer8(unsigned char*, int)+0x10>
c001be67:	83 c4 08             	add    esp,0x8
c001be6a:	5b                   	pop    ebx
c001be6b:	c3                   	ret    

c001be6c <SoundDevice::SoundDevice(char const*)>:
c001be6c:	83 ec 1c             	sub    esp,0x1c
c001be6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be73:	83 ec 08             	sub    esp,0x8
c001be76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001be7a:	50                   	push   eax
c001be7b:	e8 96 49 ff ff       	call   c0010816 <Device::Device(char const*)>
c001be80:	83 c4 10             	add    esp,0x10
c001be83:	ba 40 34 02 c0       	mov    edx,0xc0023440
c001be88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be8c:	89 10                	mov    DWORD PTR [eax],edx
c001be8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001be92:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001be9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bea0:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001beaa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001beb2:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001beb7:	7f 19                	jg     c001bed2 <SoundDevice::SoundDevice(char const*)+0x66>
c001beb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bebd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bec1:	83 c2 54             	add    edx,0x54
c001bec4:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c001becc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bed0:	eb e0                	jmp    c001beb2 <SoundDevice::SoundDevice(char const*)+0x46>
c001bed2:	90                   	nop
c001bed3:	83 c4 1c             	add    esp,0x1c
c001bed6:	c3                   	ret    
c001bed7:	90                   	nop

c001bed8 <SoundDevice::~SoundDevice()>:
c001bed8:	53                   	push   ebx
c001bed9:	83 ec 18             	sub    esp,0x18
c001bedc:	ba 40 34 02 c0       	mov    edx,0xc0023440
c001bee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bee5:	89 10                	mov    DWORD PTR [eax],edx
c001bee7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001beef:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001bef4:	7f 46                	jg     c001bf3c <SoundDevice::~SoundDevice()+0x64>
c001bef6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001befa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001befe:	83 c2 54             	add    edx,0x54
c001bf01:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c001bf05:	85 c0                	test   eax,eax
c001bf07:	74 2d                	je     c001bf36 <SoundDevice::~SoundDevice()+0x5e>
c001bf09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001bf11:	83 c2 54             	add    edx,0x54
c001bf14:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c001bf18:	85 db                	test   ebx,ebx
c001bf1a:	74 1a                	je     c001bf36 <SoundDevice::~SoundDevice()+0x5e>
c001bf1c:	83 ec 0c             	sub    esp,0xc
c001bf1f:	53                   	push   ebx
c001bf20:	e8 ff fc ff ff       	call   c001bc24 <SoundChannel::~SoundChannel()>
c001bf25:	83 c4 10             	add    esp,0x10
c001bf28:	83 ec 08             	sub    esp,0x8
c001bf2b:	6a 2c                	push   0x2c
c001bf2d:	53                   	push   ebx
c001bf2e:	e8 b8 31 ff ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c001bf33:	83 c4 10             	add    esp,0x10
c001bf36:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001bf3a:	eb b3                	jmp    c001beef <SoundDevice::~SoundDevice()+0x17>
c001bf3c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bf40:	83 ec 0c             	sub    esp,0xc
c001bf43:	50                   	push   eax
c001bf44:	e8 83 45 ff ff       	call   c00104cc <Device::~Device()>
c001bf49:	83 c4 10             	add    esp,0x10
c001bf4c:	90                   	nop
c001bf4d:	83 c4 18             	add    esp,0x18
c001bf50:	5b                   	pop    ebx
c001bf51:	c3                   	ret    

c001bf52 <SoundDevice::~SoundDevice()>:
c001bf52:	83 ec 0c             	sub    esp,0xc
c001bf55:	83 ec 0c             	sub    esp,0xc
c001bf58:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf5c:	e8 77 ff ff ff       	call   c001bed8 <SoundDevice::~SoundDevice()>
c001bf61:	83 c4 10             	add    esp,0x10
c001bf64:	83 ec 08             	sub    esp,0x8
c001bf67:	68 e4 01 00 00       	push   0x1e4
c001bf6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bf70:	e8 76 31 ff ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c001bf75:	83 c4 10             	add    esp,0x10
c001bf78:	83 c4 0c             	add    esp,0xc
c001bf7b:	c3                   	ret    

c001bf7c <SoundDevice::getFreeChannelNum()>:
c001bf7c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bf80:	31 c0                	xor    eax,eax
c001bf82:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c001bf8a:	74 09                	je     c001bf95 <SoundDevice::getFreeChannelNum()+0x19>
c001bf8c:	40                   	inc    eax
c001bf8d:	83 f8 20             	cmp    eax,0x20
c001bf90:	75 f0                	jne    c001bf82 <SoundDevice::getFreeChannelNum()+0x6>
c001bf92:	83 c8 ff             	or     eax,0xffffffff
c001bf95:	c3                   	ret    

c001bf96 <SoundDevice::addChannel(SoundChannel*)>:
c001bf96:	56                   	push   esi
c001bf97:	53                   	push   ebx
c001bf98:	51                   	push   ecx
c001bf99:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf9d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001bfa1:	53                   	push   ebx
c001bfa2:	e8 d5 ff ff ff       	call   c001bf7c <SoundDevice::getFreeChannelNum()>
c001bfa7:	5a                   	pop    edx
c001bfa8:	83 f8 ff             	cmp    eax,0xffffffff
c001bfab:	74 51                	je     c001bffe <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bfad:	85 f6                	test   esi,esi
c001bfaf:	74 4d                	je     c001bffe <SoundDevice::addChannel(SoundChannel*)+0x68>
c001bfb1:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c001bfb8:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c001bfbf:	75 30                	jne    c001bff1 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c001bfc1:	83 ec 0c             	sub    esp,0xc
c001bfc4:	56                   	push   esi
c001bfc5:	e8 c4 fd ff ff       	call   c001bd8e <SoundChannel::getSampleRate()>
c001bfca:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c001bfd0:	89 34 24             	mov    DWORD PTR [esp],esi
c001bfd3:	e8 be fd ff ff       	call   c001bd96 <SoundChannel::getBits()>
c001bfd8:	83 c4 0c             	add    esp,0xc
c001bfdb:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c001bfe1:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bfe3:	50                   	push   eax
c001bfe4:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c001bfea:	53                   	push   ebx
c001bfeb:	ff 52 28             	call   DWORD PTR [edx+0x28]
c001bfee:	83 c4 10             	add    esp,0x10
c001bff1:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c001bff7:	b8 01 00 00 00       	mov    eax,0x1
c001bffc:	eb 03                	jmp    c001c001 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c001bffe:	83 c8 ff             	or     eax,0xffffffff
c001c001:	5a                   	pop    edx
c001c002:	5b                   	pop    ebx
c001c003:	5e                   	pop    esi
c001c004:	c3                   	ret    
c001c005:	90                   	nop

c001c006 <SoundDevice::removeChannel(int)>:
c001c006:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c00a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c00e:	83 fa 1f             	cmp    edx,0x1f
c001c011:	77 23                	ja     c001c036 <SoundDevice::removeChannel(int)+0x30>
c001c013:	8d 14 90             	lea    edx,[eax+edx*4]
c001c016:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c001c01d:	74 17                	je     c001c036 <SoundDevice::removeChannel(int)+0x30>
c001c01f:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c001c029:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c001c02f:	75 05                	jne    c001c036 <SoundDevice::removeChannel(int)+0x30>
c001c031:	8b 00                	mov    eax,DWORD PTR [eax]
c001c033:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c001c036:	c3                   	ret    
c001c037:	90                   	nop

c001c038 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c001c038:	56                   	push   esi
c001c039:	53                   	push   ebx
c001c03a:	31 db                	xor    ebx,ebx
c001c03c:	83 ec 14             	sub    esp,0x14
c001c03f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001c043:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c001c047:	7d 55                	jge    c001c09e <SoundDevice::floatTo8(float*, unsigned char*, int)+0x66>
c001c049:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c04d:	d9 e8                	fld1   
c001c04f:	d8 04 98             	fadd   DWORD PTR [eax+ebx*4]
c001c052:	d8 0d 70 34 02 c0    	fmul   DWORD PTR ds:0xc0023470
c001c058:	d8 0d 74 34 02 c0    	fmul   DWORD PTR ds:0xc0023474
c001c05e:	d9 5c 24 0c          	fstp   DWORD PTR [esp+0xc]
c001c062:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001c066:	d8 15 78 34 02 c0    	fcom   DWORD PTR ds:0xc0023478
c001c06c:	df e0                	fnstsw ax
c001c06e:	9e                   	sahf   
c001c06f:	72 08                	jb     c001c079 <SoundDevice::floatTo8(float*, unsigned char*, int)+0x41>
c001c071:	dd d8                	fstp   st(0)
c001c073:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c001c077:	eb 22                	jmp    c001c09b <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001c079:	d9 ee                	fldz   
c001c07b:	d8 d9                	fcomp  st(1)
c001c07d:	df e0                	fnstsw ax
c001c07f:	9e                   	sahf   
c001c080:	72 08                	jb     c001c08a <SoundDevice::floatTo8(float*, unsigned char*, int)+0x52>
c001c082:	dd d8                	fstp   st(0)
c001c084:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c001c088:	eb 11                	jmp    c001c09b <SoundDevice::floatTo8(float*, unsigned char*, int)+0x63>
c001c08a:	83 ec 10             	sub    esp,0x10
c001c08d:	d9 1c 24             	fstp   DWORD PTR [esp]
c001c090:	e8 c7 36 00 00       	call   c001f75c <lrintf>
c001c095:	83 c4 10             	add    esp,0x10
c001c098:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c001c09b:	43                   	inc    ebx
c001c09c:	eb a5                	jmp    c001c043 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb>
c001c09e:	83 c4 14             	add    esp,0x14
c001c0a1:	5b                   	pop    ebx
c001c0a2:	5e                   	pop    esi
c001c0a3:	c3                   	ret    

c001c0a4 <SoundDevice::getAudio(int, float*, float*)>:
c001c0a4:	55                   	push   ebp
c001c0a5:	57                   	push   edi
c001c0a6:	56                   	push   esi
c001c0a7:	53                   	push   ebx
c001c0a8:	31 db                	xor    ebx,ebx
c001c0aa:	83 ec 20             	sub    esp,0x20
c001c0ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c0b1:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001c0b5:	c1 e0 02             	shl    eax,0x2
c001c0b8:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c0bc:	50                   	push   eax
c001c0bd:	6a 00                	push   0x0
c001c0bf:	55                   	push   ebp
c001c0c0:	e8 fc 45 fe ff       	call   c00006c1 <memset>
c001c0c5:	83 c4 10             	add    esp,0x10
c001c0c8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c0cc:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c001c0d3:	85 c0                	test   eax,eax
c001c0d5:	0f 84 8c 00 00 00    	je     c001c167 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c0db:	83 ec 0c             	sub    esp,0xc
c001c0de:	50                   	push   eax
c001c0df:	e8 a2 fc ff ff       	call   c001bd86 <SoundChannel::paused()>
c001c0e4:	83 c4 10             	add    esp,0x10
c001c0e7:	84 c0                	test   al,al
c001c0e9:	75 7c                	jne    c001c167 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c0eb:	83 ec 0c             	sub    esp,0xc
c001c0ee:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c0f5:	e8 76 fb ff ff       	call   c001bc70 <SoundChannel::getVolume()>
c001c0fa:	83 c4 10             	add    esp,0x10
c001c0fd:	85 c0                	test   eax,eax
c001c0ff:	74 66                	je     c001c167 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c101:	83 ec 0c             	sub    esp,0xc
c001c104:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c10b:	e8 60 fb ff ff       	call   c001bc70 <SoundChannel::getVolume()>
c001c110:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c114:	d9 05 7c 34 02 c0    	fld    DWORD PTR ds:0xc002347c
c001c11a:	da 7c 24 1c          	fidivr DWORD PTR [esp+0x1c]
c001c11e:	d9 5c 24 1c          	fstp   DWORD PTR [esp+0x1c]
c001c122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001c126:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c001c12c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c001c130:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c001c137:	e8 72 fc ff ff       	call   c001bdae <SoundChannel::unbuffer(float*, int, int)>
c001c13c:	83 c4 20             	add    esp,0x20
c001c13f:	31 d2                	xor    edx,edx
c001c141:	39 c2                	cmp    edx,eax
c001c143:	7d 1c                	jge    c001c161 <SoundDevice::getAudio(int, float*, float*)+0xbd>
c001c145:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001c149:	d9 44 24 0c          	fld    DWORD PTR [esp+0xc]
c001c14d:	d8 0c 91             	fmul   DWORD PTR [ecx+edx*4]
c001c150:	da b6 58 01 00 00    	fidiv  DWORD PTR [esi+0x158]
c001c156:	d8 44 95 00          	fadd   DWORD PTR [ebp+edx*4+0x0]
c001c15a:	d9 5c 95 00          	fstp   DWORD PTR [ebp+edx*4+0x0]
c001c15e:	42                   	inc    edx
c001c15f:	eb e0                	jmp    c001c141 <SoundDevice::getAudio(int, float*, float*)+0x9d>
c001c161:	39 c7                	cmp    edi,eax
c001c163:	7e 02                	jle    c001c167 <SoundDevice::getAudio(int, float*, float*)+0xc3>
c001c165:	89 c7                	mov    edi,eax
c001c167:	43                   	inc    ebx
c001c168:	83 fb 20             	cmp    ebx,0x20
c001c16b:	0f 85 5b ff ff ff    	jne    c001c0cc <SoundDevice::getAudio(int, float*, float*)+0x28>
c001c171:	83 c4 1c             	add    esp,0x1c
c001c174:	89 f8                	mov    eax,edi
c001c176:	5b                   	pop    ebx
c001c177:	5e                   	pop    esi
c001c178:	5f                   	pop    edi
c001c179:	5d                   	pop    ebp
c001c17a:	c3                   	ret    
c001c17b:	90                   	nop

c001c17c <PCI::open(int, int, void*)>:
c001c17c:	83 ec 18             	sub    esp,0x18
c001c17f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c183:	8b 10                	mov    edx,DWORD PTR [eax]
c001c185:	50                   	push   eax
c001c186:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001c189:	31 c0                	xor    eax,eax
c001c18b:	83 c4 1c             	add    esp,0x1c
c001c18e:	c3                   	ret    
c001c18f:	90                   	nop

c001c190 <PCI::close(int, int, void*)>:
c001c190:	31 c0                	xor    eax,eax
c001c192:	c3                   	ret    
c001c193:	90                   	nop

c001c194 <PCI::PCI()>:
c001c194:	83 ec 0c             	sub    esp,0xc
c001c197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c19b:	83 ec 08             	sub    esp,0x8
c001c19e:	68 80 34 02 c0       	push   0xc0023480
c001c1a3:	50                   	push   eax
c001c1a4:	e8 f7 3c ff ff       	call   c000fea0 <Bus::Bus(char const*)>
c001c1a9:	83 c4 10             	add    esp,0x10
c001c1ac:	ba 2c 35 02 c0       	mov    edx,0xc002352c
c001c1b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1b5:	89 10                	mov    DWORD PTR [eax],edx
c001c1b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1bb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c1c1:	31 d2                	xor    edx,edx
c001c1c3:	88 c2                	mov    dl,al
c001c1c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1c9:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001c1d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1d4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c1da:	31 d2                	xor    edx,edx
c001c1dc:	88 c2                	mov    dl,al
c001c1de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1e2:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001c1e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1eb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c1f1:	8d 50 01             	lea    edx,[eax+0x1]
c001c1f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c1f8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001c1fe:	31 d2                	xor    edx,edx
c001c200:	88 c2                	mov    dl,al
c001c202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c206:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001c20a:	83 c9 c0             	or     ecx,0xffffffc0
c001c20d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001c211:	90                   	nop
c001c212:	83 c4 0c             	add    esp,0xc
c001c215:	c3                   	ret    

c001c216 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c216:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c21a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c21f:	c1 e0 10             	shl    eax,0x10
c001c222:	89 ca                	mov    edx,ecx
c001c224:	81 e2 fc 00 00 00    	and    edx,0xfc
c001c22a:	09 d0                	or     eax,edx
c001c22c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c001c231:	c1 e2 08             	shl    edx,0x8
c001c234:	09 d0                	or     eax,edx
c001c236:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c001c23b:	c1 e2 0b             	shl    edx,0xb
c001c23e:	09 d0                	or     eax,edx
c001c240:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c245:	0d 00 00 00 80       	or     eax,0x80000000
c001c24a:	ef                   	out    dx,eax
c001c24b:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c250:	ed                   	in     eax,dx
c001c251:	83 e1 02             	and    ecx,0x2
c001c254:	0f b6 c9             	movzx  ecx,cl
c001c257:	c1 e1 03             	shl    ecx,0x3
c001c25a:	d3 e8                	shr    eax,cl
c001c25c:	c3                   	ret    
c001c25d:	90                   	nop

c001c25e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001c25e:	6a 00                	push   0x0
c001c260:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c265:	50                   	push   eax
c001c266:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c26b:	50                   	push   eax
c001c26c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c271:	50                   	push   eax
c001c272:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c276:	e8 9b ff ff ff       	call   c001c216 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c27b:	83 c4 14             	add    esp,0x14
c001c27e:	c3                   	ret    
c001c27f:	90                   	nop

c001c280 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001c280:	6a 0e                	push   0xe
c001c282:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c287:	50                   	push   eax
c001c288:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c28d:	50                   	push   eax
c001c28e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c293:	50                   	push   eax
c001c294:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c298:	e8 79 ff ff ff       	call   c001c216 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c29d:	83 c4 14             	add    esp,0x14
c001c2a0:	0f b6 c0             	movzx  eax,al
c001c2a3:	c3                   	ret    

c001c2a4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001c2a4:	55                   	push   ebp
c001c2a5:	57                   	push   edi
c001c2a6:	56                   	push   esi
c001c2a7:	53                   	push   ebx
c001c2a8:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c2ad:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001c2b2:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c001c2b7:	6a 0a                	push   0xa
c001c2b9:	56                   	push   esi
c001c2ba:	55                   	push   ebp
c001c2bb:	57                   	push   edi
c001c2bc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c2c0:	e8 51 ff ff ff       	call   c001c216 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2c5:	6a 0a                	push   0xa
c001c2c7:	89 c3                	mov    ebx,eax
c001c2c9:	56                   	push   esi
c001c2ca:	55                   	push   ebp
c001c2cb:	57                   	push   edi
c001c2cc:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001c2d0:	e8 41 ff ff ff       	call   c001c216 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c2d5:	83 c4 28             	add    esp,0x28
c001c2d8:	0f b6 db             	movzx  ebx,bl
c001c2db:	25 00 ff 00 00       	and    eax,0xff00
c001c2e0:	09 d8                	or     eax,ebx
c001c2e2:	5b                   	pop    ebx
c001c2e3:	5e                   	pop    esi
c001c2e4:	5f                   	pop    edi
c001c2e5:	5d                   	pop    ebp
c001c2e6:	c3                   	ret    
c001c2e7:	90                   	nop

c001c2e8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001c2e8:	6a 08                	push   0x8
c001c2ea:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c2ef:	50                   	push   eax
c001c2f0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c2f5:	50                   	push   eax
c001c2f6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c2fb:	50                   	push   eax
c001c2fc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c300:	e8 11 ff ff ff       	call   c001c216 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c305:	83 c4 14             	add    esp,0x14
c001c308:	0f b6 c4             	movzx  eax,ah
c001c30b:	c3                   	ret    

c001c30c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001c30c:	6a 08                	push   0x8
c001c30e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c313:	50                   	push   eax
c001c314:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c319:	50                   	push   eax
c001c31a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c31f:	50                   	push   eax
c001c320:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c324:	e8 ed fe ff ff       	call   c001c216 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c329:	83 c4 14             	add    esp,0x14
c001c32c:	c3                   	ret    
c001c32d:	90                   	nop

c001c32e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001c32e:	6a 3c                	push   0x3c
c001c330:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c335:	50                   	push   eax
c001c336:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c33b:	50                   	push   eax
c001c33c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c341:	50                   	push   eax
c001c342:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c346:	e8 cb fe ff ff       	call   c001c216 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c34b:	83 c4 14             	add    esp,0x14
c001c34e:	c3                   	ret    
c001c34f:	90                   	nop

c001c350 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001c350:	6a 18                	push   0x18
c001c352:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c357:	50                   	push   eax
c001c358:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c35d:	50                   	push   eax
c001c35e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c363:	50                   	push   eax
c001c364:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c368:	e8 a9 fe ff ff       	call   c001c216 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c36d:	83 c4 14             	add    esp,0x14
c001c370:	0f b6 c4             	movzx  eax,ah
c001c373:	c3                   	ret    

c001c374 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c374:	55                   	push   ebp
c001c375:	57                   	push   edi
c001c376:	56                   	push   esi
c001c377:	53                   	push   ebx
c001c378:	50                   	push   eax
c001c379:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c37d:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c001c382:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001c389:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c38e:	8d 43 12             	lea    eax,[ebx+0x12]
c001c391:	83 c3 10             	add    ebx,0x10
c001c394:	0f b6 c0             	movzx  eax,al
c001c397:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c001c39c:	50                   	push   eax
c001c39d:	51                   	push   ecx
c001c39e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001c3a2:	57                   	push   edi
c001c3a3:	55                   	push   ebp
c001c3a4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001c3a8:	e8 69 fe ff ff       	call   c001c216 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3ad:	0f b6 db             	movzx  ebx,bl
c001c3b0:	53                   	push   ebx
c001c3b1:	89 c6                	mov    esi,eax
c001c3b3:	c1 e6 10             	shl    esi,0x10
c001c3b6:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001c3ba:	51                   	push   ecx
c001c3bb:	57                   	push   edi
c001c3bc:	55                   	push   ebp
c001c3bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c3c1:	e8 50 fe ff ff       	call   c001c216 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3c6:	83 c4 2c             	add    esp,0x2c
c001c3c9:	0f b7 c0             	movzx  eax,ax
c001c3cc:	5b                   	pop    ebx
c001c3cd:	09 f0                	or     eax,esi
c001c3cf:	5e                   	pop    esi
c001c3d0:	5f                   	pop    edi
c001c3d1:	5d                   	pop    ebp
c001c3d2:	c3                   	ret    
c001c3d3:	90                   	nop

c001c3d4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001c3d4:	53                   	push   ebx
c001c3d5:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c3da:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001c3df:	c1 e1 10             	shl    ecx,0x10
c001c3e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c3e6:	25 fc 00 00 00       	and    eax,0xfc
c001c3eb:	09 c1                	or     ecx,eax
c001c3ed:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c3f2:	c1 e0 08             	shl    eax,0x8
c001c3f5:	09 c1                	or     ecx,eax
c001c3f7:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001c3fc:	c1 e0 0b             	shl    eax,0xb
c001c3ff:	09 c1                	or     ecx,eax
c001c401:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001c407:	89 c8                	mov    eax,ecx
c001c409:	ef                   	out    dx,eax
c001c40a:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c40f:	ed                   	in     eax,dx
c001c410:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c001c415:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c001c41a:	74 0a                	je     c001c426 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c001c41c:	0f b7 d8             	movzx  ebx,ax
c001c41f:	89 d0                	mov    eax,edx
c001c421:	c1 e0 10             	shl    eax,0x10
c001c424:	eb 05                	jmp    c001c42b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c001c426:	66 31 c0             	xor    ax,ax
c001c429:	89 d3                	mov    ebx,edx
c001c42b:	09 c3                	or     ebx,eax
c001c42d:	ba f8 0c 00 00       	mov    edx,0xcf8
c001c432:	89 c8                	mov    eax,ecx
c001c434:	ef                   	out    dx,eax
c001c435:	ba fc 0c 00 00       	mov    edx,0xcfc
c001c43a:	89 d8                	mov    eax,ebx
c001c43c:	ef                   	out    dx,eax
c001c43d:	5b                   	pop    ebx
c001c43e:	c3                   	ret    
c001c43f:	90                   	nop

c001c440 <PCI::checkBus(unsigned char)>:
c001c440:	56                   	push   esi
c001c441:	31 f6                	xor    esi,esi
c001c443:	53                   	push   ebx
c001c444:	51                   	push   ecx
c001c445:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c001c449:	52                   	push   edx
c001c44a:	56                   	push   esi
c001c44b:	46                   	inc    esi
c001c44c:	0f b6 c3             	movzx  eax,bl
c001c44f:	50                   	push   eax
c001c450:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c454:	e8 4d 03 00 00       	call   c001c7a6 <PCI::checkDevice(unsigned char, unsigned char)>
c001c459:	83 c4 10             	add    esp,0x10
c001c45c:	83 fe 20             	cmp    esi,0x20
c001c45f:	75 e8                	jne    c001c449 <PCI::checkBus(unsigned char)+0x9>
c001c461:	58                   	pop    eax
c001c462:	5b                   	pop    ebx
c001c463:	5e                   	pop    esi
c001c464:	c3                   	ret    
c001c465:	90                   	nop

c001c466 <PCI::foundDevice(PCIDeviceInfo)>:
c001c466:	55                   	push   ebp
c001c467:	57                   	push   edi
c001c468:	56                   	push   esi
c001c469:	53                   	push   ebx
c001c46a:	83 ec 1c             	sub    esp,0x1c
c001c46d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c471:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c001c477:	0f 84 51 01 00 00    	je     c001c5ce <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c47d:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c481:	66 81 f9 06 04       	cmp    cx,0x406
c001c486:	75 2c                	jne    c001c4b4 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c001c488:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001c48d:	50                   	push   eax
c001c48e:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001c493:	50                   	push   eax
c001c494:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001c499:	50                   	push   eax
c001c49a:	56                   	push   esi
c001c49b:	e8 b0 fe ff ff       	call   c001c350 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c4a0:	0f b6 c0             	movzx  eax,al
c001c4a3:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c4a7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001c4ab:	83 c4 2c             	add    esp,0x2c
c001c4ae:	5b                   	pop    ebx
c001c4af:	5e                   	pop    esi
c001c4b0:	5f                   	pop    edi
c001c4b1:	5d                   	pop    ebp
c001c4b2:	eb 8c                	jmp    c001c440 <PCI::checkBus(unsigned char)>
c001c4b4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001c4b8:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001c4be:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001c4c2:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001c4c6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001c4ca:	88 d3                	mov    bl,dl
c001c4cc:	85 c0                	test   eax,eax
c001c4ce:	74 33                	je     c001c503 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c001c4d0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c4d3:	85 d2                	test   edx,edx
c001c4d5:	74 28                	je     c001c4ff <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c4d7:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001c4dd:	31 ef                	xor    edi,ebp
c001c4df:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001c4e5:	75 18                	jne    c001c4ff <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c4e7:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001c4eb:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c001c4f1:	75 0c                	jne    c001c4ff <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001c4f3:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001c4f9:	0f 84 cf 00 00 00    	je     c001c5ce <PCI::foundDevice(PCIDeviceInfo)+0x168>
c001c4ff:	8b 00                	mov    eax,DWORD PTR [eax]
c001c501:	eb c9                	jmp    c001c4cc <PCI::foundDevice(PCIDeviceInfo)+0x66>
c001c503:	66 81 f9 01 06       	cmp    cx,0x601
c001c508:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001c50c:	75 18                	jne    c001c526 <PCI::foundDevice(PCIDeviceInfo)+0xc0>
c001c50e:	83 ec 0c             	sub    esp,0xc
c001c511:	68 58 01 00 00       	push   0x158
c001c516:	e8 c1 2b ff ff       	call   c000f0dc <operator new(unsigned long)>
c001c51b:	59                   	pop    ecx
c001c51c:	89 c5                	mov    ebp,eax
c001c51e:	5f                   	pop    edi
c001c51f:	68 88 34 02 c0       	push   0xc0023488
c001c524:	eb 7d                	jmp    c001c5a3 <PCI::foundDevice(PCIDeviceInfo)+0x13d>
c001c526:	66 81 f9 01 01       	cmp    cx,0x101
c001c52b:	75 60                	jne    c001c58d <PCI::foundDevice(PCIDeviceInfo)+0x127>
c001c52d:	83 ec 0c             	sub    esp,0xc
c001c530:	68 70 02 00 00       	push   0x270
c001c535:	e8 a2 2b ff ff       	call   c000f0dc <operator new(unsigned long)>
c001c53a:	89 04 24             	mov    DWORD PTR [esp],eax
c001c53d:	89 c5                	mov    ebp,eax
c001c53f:	e8 26 03 00 00       	call   c001c86a <IDE::IDE()>
c001c544:	58                   	pop    eax
c001c545:	5a                   	pop    edx
c001c546:	55                   	push   ebp
c001c547:	56                   	push   esi
c001c548:	e8 d9 40 ff ff       	call   c0010626 <Device::addChild(Device*)>
c001c54d:	83 ec 1c             	sub    esp,0x1c
c001c550:	b9 09 00 00 00       	mov    ecx,0x9
c001c555:	fc                   	cld    
c001c556:	89 e7                	mov    edi,esp
c001c558:	89 de                	mov    esi,ebx
c001c55a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c55c:	55                   	push   ebp
c001c55d:	e8 a2 3f ff ff       	call   c0010504 <Device::preOpenPCI(PCIDeviceInfo)>
c001c562:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001c565:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001c569:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001c571:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001c579:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001c581:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c584:	83 c4 4c             	add    esp,0x4c
c001c587:	5b                   	pop    ebx
c001c588:	5e                   	pop    esi
c001c589:	5f                   	pop    edi
c001c58a:	5d                   	pop    ebp
c001c58b:	ff e0                	jmp    eax
c001c58d:	83 ec 0c             	sub    esp,0xc
c001c590:	68 58 01 00 00       	push   0x158
c001c595:	e8 42 2b ff ff       	call   c000f0dc <operator new(unsigned long)>
c001c59a:	59                   	pop    ecx
c001c59b:	89 c5                	mov    ebp,eax
c001c59d:	5f                   	pop    edi
c001c59e:	68 a7 34 02 c0       	push   0xc00234a7
c001c5a3:	55                   	push   ebp
c001c5a4:	e8 69 43 ff ff       	call   c0010912 <DriverlessDevice::DriverlessDevice(char const*)>
c001c5a9:	58                   	pop    eax
c001c5aa:	5a                   	pop    edx
c001c5ab:	55                   	push   ebp
c001c5ac:	56                   	push   esi
c001c5ad:	e8 74 40 ff ff       	call   c0010626 <Device::addChild(Device*)>
c001c5b2:	b9 09 00 00 00       	mov    ecx,0x9
c001c5b7:	fc                   	cld    
c001c5b8:	89 df                	mov    edi,ebx
c001c5ba:	89 de                	mov    esi,ebx
c001c5bc:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c5be:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c001c5c2:	83 c4 2c             	add    esp,0x2c
c001c5c5:	5b                   	pop    ebx
c001c5c6:	5e                   	pop    esi
c001c5c7:	5f                   	pop    edi
c001c5c8:	5d                   	pop    ebp
c001c5c9:	e9 36 3f ff ff       	jmp    c0010504 <Device::preOpenPCI(PCIDeviceInfo)>
c001c5ce:	83 c4 1c             	add    esp,0x1c
c001c5d1:	5b                   	pop    ebx
c001c5d2:	5e                   	pop    esi
c001c5d3:	5f                   	pop    edi
c001c5d4:	5d                   	pop    ebp
c001c5d5:	c3                   	ret    

c001c5d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c5d6:	55                   	push   ebp
c001c5d7:	57                   	push   edi
c001c5d8:	56                   	push   esi
c001c5d9:	53                   	push   ebx
c001c5da:	83 ec 5c             	sub    esp,0x5c
c001c5dd:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c001c5e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c5e5:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c001c5e9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c5ed:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001c5f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c5f5:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c001c5fa:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c001c5ff:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c001c604:	6a 0c                	push   0xc
c001c606:	55                   	push   ebp
c001c607:	53                   	push   ebx
c001c608:	57                   	push   edi
c001c609:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c001c610:	e8 01 fc ff ff       	call   c001c216 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c615:	83 c4 0c             	add    esp,0xc
c001c618:	6a 00                	push   0x0
c001c61a:	68 c1 34 02 c0       	push   0xc00234c1
c001c61f:	e8 ed 2b ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001c624:	55                   	push   ebp
c001c625:	53                   	push   ebx
c001c626:	57                   	push   edi
c001c627:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c62e:	e8 71 fc ff ff       	call   c001c2a4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c633:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
c001c638:	83 c4 20             	add    esp,0x20
c001c63b:	55                   	push   ebp
c001c63c:	53                   	push   ebx
c001c63d:	57                   	push   edi
c001c63e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c642:	e8 e7 fc ff ff       	call   c001c32e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c647:	c7 04 24 3c 00 00 00 	mov    DWORD PTR [esp],0x3c
c001c64e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001c652:	55                   	push   ebp
c001c653:	53                   	push   ebx
c001c654:	57                   	push   edi
c001c655:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c65c:	e8 b5 fb ff ff       	call   c001c216 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c661:	0f b6 c4             	movzx  eax,ah
c001c664:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001c668:	83 c4 18             	add    esp,0x18
c001c66b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c66f:	68 d5 34 02 c0       	push   0xc00234d5
c001c674:	e8 98 2b ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001c679:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c001c67d:	88 44 24 5d          	mov    BYTE PTR [esp+0x5d],al
c001c681:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001c686:	83 c4 10             	add    esp,0x10
c001c689:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001c68f:	83 b8 5c 21 00 00 00 	cmp    DWORD PTR [eax+0x215c],0x0
c001c696:	74 6c                	je     c001c704 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001c698:	31 f6                	xor    esi,esi
c001c69a:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c001c6a0:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c6a6:	39 b2 5c 21 00 00    	cmp    DWORD PTR [edx+0x215c],esi
c001c6ac:	7e 56                	jle    c001c704 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12e>
c001c6ae:	8d 14 f2             	lea    edx,[edx+esi*8]
c001c6b1:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c001c6b8:	39 cb                	cmp    ebx,ecx
c001c6ba:	75 45                	jne    c001c701 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001c6bc:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c001c6c3:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c001c6c7:	75 38                	jne    c001c701 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x12b>
c001c6c9:	83 ec 0c             	sub    esp,0xc
c001c6cc:	68 e4 34 02 c0       	push   0xc00234e4
c001c6d1:	e8 3b 2b ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001c6d6:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c001c6dc:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c001c6e2:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c001c6ea:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c001c6ee:	52                   	push   edx
c001c6ef:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c6f3:	53                   	push   ebx
c001c6f4:	68 09 35 02 c0       	push   0xc0023509
c001c6f9:	e8 13 2b ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001c6fe:	83 c4 20             	add    esp,0x20
c001c701:	46                   	inc    esi
c001c702:	eb 96                	jmp    c001c69a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xc4>
c001c704:	31 d2                	xor    edx,edx
c001c706:	83 ec 0c             	sub    esp,0xc
c001c709:	55                   	push   ebp
c001c70a:	53                   	push   ebx
c001c70b:	57                   	push   edi
c001c70c:	52                   	push   edx
c001c70d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c711:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c718:	e8 57 fc ff ff       	call   c001c374 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c71d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001c721:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c001c725:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c729:	42                   	inc    edx
c001c72a:	83 c4 20             	add    esp,0x20
c001c72d:	83 fa 06             	cmp    edx,0x6
c001c730:	75 d4                	jne    c001c706 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x130>
c001c732:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001c736:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c001c73a:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001c73e:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c001c742:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001c746:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001c74a:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001c74f:	86 e0                	xchg   al,ah
c001c751:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c001c756:	55                   	push   ebp
c001c757:	53                   	push   ebx
c001c758:	57                   	push   edi
c001c759:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c001c75d:	e8 86 fb ff ff       	call   c001c2e8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c762:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c766:	55                   	push   ebp
c001c767:	53                   	push   ebx
c001c768:	57                   	push   edi
c001c769:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c001c770:	e8 e9 fa ff ff       	call   c001c25e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c775:	83 ec 0c             	sub    esp,0xc
c001c778:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c001c77d:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c001c781:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c001c785:	b9 09 00 00 00       	mov    ecx,0x9
c001c78a:	fc                   	cld    
c001c78b:	89 e7                	mov    edi,esp
c001c78d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c78f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c001c796:	e8 cb fc ff ff       	call   c001c466 <PCI::foundDevice(PCIDeviceInfo)>
c001c79b:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c7a1:	5b                   	pop    ebx
c001c7a2:	5e                   	pop    esi
c001c7a3:	5f                   	pop    edi
c001c7a4:	5d                   	pop    ebp
c001c7a5:	c3                   	ret    

c001c7a6 <PCI::checkDevice(unsigned char, unsigned char)>:
c001c7a6:	55                   	push   ebp
c001c7a7:	57                   	push   edi
c001c7a8:	56                   	push   esi
c001c7a9:	53                   	push   ebx
c001c7aa:	83 ec 0c             	sub    esp,0xc
c001c7ad:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c7b2:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c7b6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c7bb:	6a 00                	push   0x0
c001c7bd:	56                   	push   esi
c001c7be:	57                   	push   edi
c001c7bf:	55                   	push   ebp
c001c7c0:	e8 99 fa ff ff       	call   c001c25e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c7c5:	6a 00                	push   0x0
c001c7c7:	56                   	push   esi
c001c7c8:	57                   	push   edi
c001c7c9:	55                   	push   ebp
c001c7ca:	e8 07 fe ff ff       	call   c001c5d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c7cf:	83 c4 20             	add    esp,0x20
c001c7d2:	6a 00                	push   0x0
c001c7d4:	56                   	push   esi
c001c7d5:	57                   	push   edi
c001c7d6:	55                   	push   ebp
c001c7d7:	e8 a4 fa ff ff       	call   c001c280 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c7dc:	83 c4 10             	add    esp,0x10
c001c7df:	84 c0                	test   al,al
c001c7e1:	79 27                	jns    c001c80a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c7e3:	bb 01 00 00 00       	mov    ebx,0x1
c001c7e8:	53                   	push   ebx
c001c7e9:	56                   	push   esi
c001c7ea:	57                   	push   edi
c001c7eb:	55                   	push   ebp
c001c7ec:	e8 6d fa ff ff       	call   c001c25e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c7f1:	83 c4 10             	add    esp,0x10
c001c7f4:	66 40                	inc    ax
c001c7f6:	74 0c                	je     c001c804 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c001c7f8:	53                   	push   ebx
c001c7f9:	56                   	push   esi
c001c7fa:	57                   	push   edi
c001c7fb:	55                   	push   ebp
c001c7fc:	e8 d5 fd ff ff       	call   c001c5d6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c801:	83 c4 10             	add    esp,0x10
c001c804:	43                   	inc    ebx
c001c805:	83 fb 08             	cmp    ebx,0x8
c001c808:	75 de                	jne    c001c7e8 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c80a:	83 c4 0c             	add    esp,0xc
c001c80d:	5b                   	pop    ebx
c001c80e:	5e                   	pop    esi
c001c80f:	5f                   	pop    edi
c001c810:	5d                   	pop    ebp
c001c811:	c3                   	ret    

c001c812 <PCI::detect()>:
c001c812:	56                   	push   esi
c001c813:	53                   	push   ebx
c001c814:	53                   	push   ebx
c001c815:	31 db                	xor    ebx,ebx
c001c817:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c81b:	6a 00                	push   0x0
c001c81d:	6a 00                	push   0x0
c001c81f:	6a 00                	push   0x0
c001c821:	56                   	push   esi
c001c822:	e8 59 fa ff ff       	call   c001c280 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c827:	83 c4 10             	add    esp,0x10
c001c82a:	a8 80                	test   al,0x80
c001c82c:	75 21                	jne    c001c84f <PCI::detect()+0x3d>
c001c82e:	51                   	push   ecx
c001c82f:	51                   	push   ecx
c001c830:	6a 00                	push   0x0
c001c832:	56                   	push   esi
c001c833:	e8 08 fc ff ff       	call   c001c440 <PCI::checkBus(unsigned char)>
c001c838:	83 c4 10             	add    esp,0x10
c001c83b:	eb 24                	jmp    c001c861 <PCI::detect()+0x4f>
c001c83d:	52                   	push   edx
c001c83e:	52                   	push   edx
c001c83f:	53                   	push   ebx
c001c840:	43                   	inc    ebx
c001c841:	56                   	push   esi
c001c842:	e8 f9 fb ff ff       	call   c001c440 <PCI::checkBus(unsigned char)>
c001c847:	83 c4 10             	add    esp,0x10
c001c84a:	83 fb 08             	cmp    ebx,0x8
c001c84d:	74 12                	je     c001c861 <PCI::detect()+0x4f>
c001c84f:	53                   	push   ebx
c001c850:	6a 00                	push   0x0
c001c852:	6a 00                	push   0x0
c001c854:	56                   	push   esi
c001c855:	e8 04 fa ff ff       	call   c001c25e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c85a:	83 c4 10             	add    esp,0x10
c001c85d:	66 40                	inc    ax
c001c85f:	74 dc                	je     c001c83d <PCI::detect()+0x2b>
c001c861:	58                   	pop    eax
c001c862:	5b                   	pop    ebx
c001c863:	5e                   	pop    esi
c001c864:	c3                   	ret    
c001c865:	90                   	nop

c001c866 <IDE::close(int, int, void*)>:
c001c866:	83 c8 ff             	or     eax,0xffffffff
c001c869:	c3                   	ret    

c001c86a <IDE::IDE()>:
c001c86a:	83 ec 0c             	sub    esp,0xc
c001c86d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c871:	83 ec 08             	sub    esp,0x8
c001c874:	68 50 35 02 c0       	push   0xc0023550
c001c879:	50                   	push   eax
c001c87a:	e8 29 41 ff ff       	call   c00109a8 <HardDiskController::HardDiskController(char const*)>
c001c87f:	83 c4 10             	add    esp,0x10
c001c882:	ba 90 37 02 c0       	mov    edx,0xc0023790
c001c887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c88b:	89 10                	mov    DWORD PTR [eax],edx
c001c88d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c891:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c898:	90                   	nop
c001c899:	83 c4 0c             	add    esp,0xc
c001c89c:	c3                   	ret    
c001c89d:	90                   	nop

c001c89e <IDE::prepareInterrupt(unsigned char)>:
c001c89e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c8a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c8a7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c8af:	c3                   	ret    

c001c8b0 <selectDrive(unsigned char, unsigned char)>:
c001c8b0:	c3                   	ret    
c001c8b1:	90                   	nop

c001c8b2 <IDE::getBase(unsigned char)>:
c001c8b2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c8b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c8bb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c8c3:	c3                   	ret    

c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c8c4:	55                   	push   ebp
c001c8c5:	57                   	push   edi
c001c8c6:	56                   	push   esi
c001c8c7:	53                   	push   ebx
c001c8c8:	83 ec 1c             	sub    esp,0x1c
c001c8cb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c8cf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c8d3:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c8d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c8db:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c8de:	80 f9 03             	cmp    cl,0x3
c001c8e1:	77 51                	ja     c001c934 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c001c8e3:	0f b6 f2             	movzx  esi,dl
c001c8e6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c8ea:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c8ed:	0f b6 db             	movzx  ebx,bl
c001c8f0:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c001c8f4:	83 ca 80             	or     edx,0xffffff80
c001c8f7:	0f b6 d2             	movzx  edx,dl
c001c8fa:	52                   	push   edx
c001c8fb:	6a 0c                	push   0xc
c001c8fd:	56                   	push   esi
c001c8fe:	57                   	push   edi
c001c8ff:	e8 c0 ff ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c904:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c001c909:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c90d:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c911:	ee                   	out    dx,al
c001c912:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c001c917:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c001c91b:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c001c91f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c923:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c92b:	83 c4 2c             	add    esp,0x2c
c001c92e:	5b                   	pop    ebx
c001c92f:	5e                   	pop    esi
c001c930:	5f                   	pop    edi
c001c931:	5d                   	pop    ebp
c001c932:	eb 90                	jmp    c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c934:	80 fb 07             	cmp    bl,0x7
c001c937:	77 12                	ja     c001c94b <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c001c939:	0f b6 d2             	movzx  edx,dl
c001c93c:	0f b6 db             	movzx  ebx,bl
c001c93f:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c001c947:	89 da                	mov    edx,ebx
c001c949:	eb 2f                	jmp    c001c97a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c94b:	80 fb 0d             	cmp    bl,0xd
c001c94e:	77 13                	ja     c001c963 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c001c950:	0f b6 d2             	movzx  edx,dl
c001c953:	0f b6 db             	movzx  ebx,bl
c001c956:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c001c95d:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c961:	eb 17                	jmp    c001c97a <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c001c963:	80 fb 15             	cmp    bl,0x15
c001c966:	77 13                	ja     c001c97b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c968:	0f b6 d2             	movzx  edx,dl
c001c96b:	0f b6 db             	movzx  ebx,bl
c001c96e:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c001c976:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c97a:	ee                   	out    dx,al
c001c97b:	83 c4 1c             	add    esp,0x1c
c001c97e:	5b                   	pop    ebx
c001c97f:	5e                   	pop    esi
c001c980:	5f                   	pop    edi
c001c981:	5d                   	pop    ebp
c001c982:	c3                   	ret    
c001c983:	90                   	nop

c001c984 <IDE::read(unsigned char, unsigned char)>:
c001c984:	55                   	push   ebp
c001c985:	57                   	push   edi
c001c986:	56                   	push   esi
c001c987:	53                   	push   ebx
c001c988:	83 ec 1c             	sub    esp,0x1c
c001c98b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c98f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c993:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c997:	8d 43 f8             	lea    eax,[ebx-0x8]
c001c99a:	3c 03                	cmp    al,0x3
c001c99c:	77 43                	ja     c001c9e1 <IDE::read(unsigned char, unsigned char)+0x5d>
c001c99e:	0f b6 f2             	movzx  esi,dl
c001c9a1:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c001c9a4:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c001c9a8:	83 c8 80             	or     eax,0xffffff80
c001c9ab:	0f b6 c0             	movzx  eax,al
c001c9ae:	50                   	push   eax
c001c9af:	6a 0c                	push   0xc
c001c9b1:	56                   	push   esi
c001c9b2:	57                   	push   edi
c001c9b3:	e8 0c ff ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9b8:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c001c9bd:	0f b6 c3             	movzx  eax,bl
c001c9c0:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c001c9c4:	ec                   	in     al,dx
c001c9c5:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c001c9ca:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c9ce:	52                   	push   edx
c001c9cf:	6a 0c                	push   0xc
c001c9d1:	56                   	push   esi
c001c9d2:	57                   	push   edi
c001c9d3:	e8 ec fe ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9d8:	83 c4 20             	add    esp,0x20
c001c9db:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c9df:	eb 49                	jmp    c001ca2a <IDE::read(unsigned char, unsigned char)+0xa6>
c001c9e1:	80 fb 07             	cmp    bl,0x7
c001c9e4:	77 12                	ja     c001c9f8 <IDE::read(unsigned char, unsigned char)+0x74>
c001c9e6:	0f b6 d2             	movzx  edx,dl
c001c9e9:	0f b6 c3             	movzx  eax,bl
c001c9ec:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c001c9f4:	89 c2                	mov    edx,eax
c001c9f6:	eb 31                	jmp    c001ca29 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c9f8:	80 fb 0d             	cmp    bl,0xd
c001c9fb:	77 13                	ja     c001ca10 <IDE::read(unsigned char, unsigned char)+0x8c>
c001c9fd:	0f b6 d2             	movzx  edx,dl
c001ca00:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c001ca07:	0f b6 d3             	movzx  edx,bl
c001ca0a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001ca0e:	eb 19                	jmp    c001ca29 <IDE::read(unsigned char, unsigned char)+0xa5>
c001ca10:	31 c0                	xor    eax,eax
c001ca12:	80 fb 15             	cmp    bl,0x15
c001ca15:	77 13                	ja     c001ca2a <IDE::read(unsigned char, unsigned char)+0xa6>
c001ca17:	0f b6 d2             	movzx  edx,dl
c001ca1a:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c001ca22:	0f b6 d3             	movzx  edx,bl
c001ca25:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001ca29:	ec                   	in     al,dx
c001ca2a:	83 c4 1c             	add    esp,0x1c
c001ca2d:	5b                   	pop    ebx
c001ca2e:	5e                   	pop    esi
c001ca2f:	5f                   	pop    edi
c001ca30:	5d                   	pop    ebp
c001ca31:	c3                   	ret    

c001ca32 <IDE::waitInterrupt(unsigned char)>:
c001ca32:	57                   	push   edi
c001ca33:	56                   	push   esi
c001ca34:	31 f6                	xor    esi,esi
c001ca36:	53                   	push   ebx
c001ca37:	83 ec 10             	sub    esp,0x10
c001ca3a:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c001ca3e:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ca42:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ca46:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001ca4b:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c001ca52:	84 db                	test   bl,bl
c001ca54:	75 37                	jne    c001ca8d <IDE::waitInterrupt(unsigned char)+0x5b>
c001ca56:	52                   	push   edx
c001ca57:	6a 0c                	push   0xc
c001ca59:	50                   	push   eax
c001ca5a:	57                   	push   edi
c001ca5b:	e8 24 ff ff ff       	call   c001c984 <IDE::read(unsigned char, unsigned char)>
c001ca60:	83 c4 10             	add    esp,0x10
c001ca63:	a8 01                	test   al,0x1
c001ca65:	75 2e                	jne    c001ca95 <IDE::waitInterrupt(unsigned char)+0x63>
c001ca67:	f7 c6 04 00 00 00    	test   esi,0x4
c001ca6d:	75 16                	jne    c001ca85 <IDE::waitInterrupt(unsigned char)+0x53>
c001ca6f:	83 fe 32             	cmp    esi,0x32
c001ca72:	7e 11                	jle    c001ca85 <IDE::waitInterrupt(unsigned char)+0x53>
c001ca74:	50                   	push   eax
c001ca75:	50                   	push   eax
c001ca76:	6a 00                	push   0x0
c001ca78:	68 80 96 98 00       	push   0x989680
c001ca7d:	e8 25 c5 ff ff       	call   c0018fa7 <nanoSleep(unsigned long long)>
c001ca82:	83 c4 10             	add    esp,0x10
c001ca85:	83 fe 3c             	cmp    esi,0x3c
c001ca88:	74 0b                	je     c001ca95 <IDE::waitInterrupt(unsigned char)+0x63>
c001ca8a:	46                   	inc    esi
c001ca8b:	eb b9                	jmp    c001ca46 <IDE::waitInterrupt(unsigned char)+0x14>
c001ca8d:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c001ca95:	83 c4 10             	add    esp,0x10
c001ca98:	88 d8                	mov    al,bl
c001ca9a:	5b                   	pop    ebx
c001ca9b:	5e                   	pop    esi
c001ca9c:	5f                   	pop    edi
c001ca9d:	c3                   	ret    

c001ca9e <ideChannel0IRQHandler(regs*, void*)>:
c001ca9e:	83 ec 10             	sub    esp,0x10
c001caa1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001caa5:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001caac:	6a 07                	push   0x7
c001caae:	6a 00                	push   0x0
c001cab0:	50                   	push   eax
c001cab1:	e8 ce fe ff ff       	call   c001c984 <IDE::read(unsigned char, unsigned char)>
c001cab6:	83 c4 1c             	add    esp,0x1c
c001cab9:	c3                   	ret    

c001caba <ideChannel1IRQHandler(regs*, void*)>:
c001caba:	83 ec 10             	sub    esp,0x10
c001cabd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cac1:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001cac8:	6a 07                	push   0x7
c001caca:	6a 01                	push   0x1
c001cacc:	50                   	push   eax
c001cacd:	e8 b2 fe ff ff       	call   c001c984 <IDE::read(unsigned char, unsigned char)>
c001cad2:	83 c4 1c             	add    esp,0x1c
c001cad5:	c3                   	ret    

c001cad6 <IDE::enableIRQs(unsigned char, bool)>:
c001cad6:	57                   	push   edi
c001cad7:	56                   	push   esi
c001cad8:	be 04 00 00 00       	mov    esi,0x4
c001cadd:	53                   	push   ebx
c001cade:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c001cae3:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001cae8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001caec:	0f 94 c0             	sete   al
c001caef:	01 c0                	add    eax,eax
c001caf1:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c001caf8:	0f b6 c0             	movzx  eax,al
c001cafb:	50                   	push   eax
c001cafc:	6a 0c                	push   0xc
c001cafe:	57                   	push   edi
c001caff:	53                   	push   ebx
c001cb00:	e8 bf fd ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cb05:	83 c4 10             	add    esp,0x10
c001cb08:	50                   	push   eax
c001cb09:	6a 0c                	push   0xc
c001cb0b:	57                   	push   edi
c001cb0c:	53                   	push   ebx
c001cb0d:	e8 72 fe ff ff       	call   c001c984 <IDE::read(unsigned char, unsigned char)>
c001cb12:	83 c4 10             	add    esp,0x10
c001cb15:	4e                   	dec    esi
c001cb16:	75 f0                	jne    c001cb08 <IDE::enableIRQs(unsigned char, bool)+0x32>
c001cb18:	5b                   	pop    ebx
c001cb19:	5e                   	pop    esi
c001cb1a:	5f                   	pop    edi
c001cb1b:	c3                   	ret    

c001cb1c <IDE::open(int, int, void*)>:
c001cb1c:	55                   	push   ebp
c001cb1d:	57                   	push   edi
c001cb1e:	56                   	push   esi
c001cb1f:	53                   	push   ebx
c001cb20:	83 ec 1c             	sub    esp,0x1c
c001cb23:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001cb27:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001cb30:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001cb39:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001cb40:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001cb47:	0f 85 b2 02 00 00    	jne    c001cdff <IDE::open(int, int, void*)+0x2e3>
c001cb4d:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001cb53:	88 04 24             	mov    BYTE PTR [esp],al
c001cb56:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001cb59:	83 e0 7f             	and    eax,0x7f
c001cb5c:	83 f8 05             	cmp    eax,0x5
c001cb5f:	74 05                	je     c001cb66 <IDE::open(int, int, void*)+0x4a>
c001cb61:	83 f8 0f             	cmp    eax,0xf
c001cb64:	75 32                	jne    c001cb98 <IDE::open(int, int, void*)+0x7c>
c001cb66:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001cb6c:	83 e0 fc             	and    eax,0xfffffffc
c001cb6f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001cb76:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001cb7c:	83 e0 fc             	and    eax,0xfffffffc
c001cb7f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001cb86:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001cb8c:	83 e0 fc             	and    eax,0xfffffffc
c001cb8f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cb96:	eb 14                	jmp    c001cbac <IDE::open(int, int, void*)+0x90>
c001cb98:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001cba2:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001cbac:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001cbb3:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001cbba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cbbe:	89 c6                	mov    esi,eax
c001cbc0:	89 e8                	mov    eax,ebp
c001cbc2:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cbc7:	c1 e6 10             	shl    esi,0x10
c001cbca:	89 fa                	mov    edx,edi
c001cbcc:	c1 e0 0b             	shl    eax,0xb
c001cbcf:	09 f0                	or     eax,esi
c001cbd1:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001cbd8:	c1 e6 08             	shl    esi,0x8
c001cbdb:	09 c6                	or     esi,eax
c001cbdd:	89 f0                	mov    eax,esi
c001cbdf:	0d 08 00 00 80       	or     eax,0x80000008
c001cbe4:	ef                   	out    dx,eax
c001cbe5:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001cbea:	89 ca                	mov    edx,ecx
c001cbec:	ed                   	in     eax,dx
c001cbed:	c1 e8 10             	shr    eax,0x10
c001cbf0:	3d ff ff 00 00       	cmp    eax,0xffff
c001cbf5:	0f 84 f3 00 00 00    	je     c001ccee <IDE::open(int, int, void*)+0x1d2>
c001cbfb:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001cc01:	89 fa                	mov    edx,edi
c001cc03:	89 f0                	mov    eax,esi
c001cc05:	ef                   	out    dx,eax
c001cc06:	b0 fe                	mov    al,0xfe
c001cc08:	89 ca                	mov    edx,ecx
c001cc0a:	ee                   	out    dx,al
c001cc0b:	89 f0                	mov    eax,esi
c001cc0d:	89 fa                	mov    edx,edi
c001cc0f:	ef                   	out    dx,eax
c001cc10:	89 ca                	mov    edx,ecx
c001cc12:	ed                   	in     eax,dx
c001cc13:	3c fe                	cmp    al,0xfe
c001cc15:	0f 85 a9 00 00 00    	jne    c001ccc4 <IDE::open(int, int, void*)+0x1a8>
c001cc1b:	8b 15 a8 47 02 c0    	mov    edx,DWORD PTR ds:0xc00247a8
c001cc21:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c001cc28:	74 33                	je     c001cc5d <IDE::open(int, int, void*)+0x141>
c001cc2a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001cc30:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001cc34:	40                   	inc    eax
c001cc35:	83 ec 0c             	sub    esp,0xc
c001cc38:	0f b6 c0             	movzx  eax,al
c001cc3b:	50                   	push   eax
c001cc3c:	55                   	push   ebp
c001cc3d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc41:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c001cc47:	51                   	push   ecx
c001cc48:	e8 1d 72 ff ff       	call   c0013e6a <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001cc4d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001cc52:	83 c4 1c             	add    esp,0x1c
c001cc55:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cc5b:	eb 0a                	jmp    c001cc67 <IDE::open(int, int, void*)+0x14b>
c001cc5d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001cc67:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001cc6e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001cc75:	c1 e1 10             	shl    ecx,0x10
c001cc78:	bf f8 0c 00 00       	mov    edi,0xcf8
c001cc7d:	c1 e0 08             	shl    eax,0x8
c001cc80:	89 fa                	mov    edx,edi
c001cc82:	09 c1                	or     ecx,eax
c001cc84:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001cc8b:	c1 e0 0b             	shl    eax,0xb
c001cc8e:	09 c1                	or     ecx,eax
c001cc90:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001cc96:	89 c8                	mov    eax,ecx
c001cc98:	ef                   	out    dx,eax
c001cc99:	be fc 0c 00 00       	mov    esi,0xcfc
c001cc9e:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001cca4:	89 f2                	mov    edx,esi
c001cca6:	ee                   	out    dx,al
c001cca7:	89 c8                	mov    eax,ecx
c001cca9:	89 fa                	mov    edx,edi
c001ccab:	ef                   	out    dx,eax
c001ccac:	89 f2                	mov    edx,esi
c001ccae:	ed                   	in     eax,dx
c001ccaf:	0f b6 c0             	movzx  eax,al
c001ccb2:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001ccb8:	74 44                	je     c001ccfe <IDE::open(int, int, void*)+0x1e2>
c001ccba:	83 ec 0c             	sub    esp,0xc
c001ccbd:	68 68 35 02 c0       	push   0xc0023568
c001ccc2:	eb 32                	jmp    c001ccf6 <IDE::open(int, int, void*)+0x1da>
c001ccc4:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001cccd:	75 15                	jne    c001cce4 <IDE::open(int, int, void*)+0x1c8>
c001cccf:	80 3c 24 8a          	cmp    BYTE PTR [esp],0x8a
c001ccd3:	74 06                	je     c001ccdb <IDE::open(int, int, void*)+0x1bf>
c001ccd5:	80 3c 24 80          	cmp    BYTE PTR [esp],0x80
c001ccd9:	75 09                	jne    c001cce4 <IDE::open(int, int, void*)+0x1c8>
c001ccdb:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001cce2:	eb 1a                	jmp    c001ccfe <IDE::open(int, int, void*)+0x1e2>
c001cce4:	83 ec 0c             	sub    esp,0xc
c001cce7:	68 70 35 02 c0       	push   0xc0023570
c001ccec:	eb 08                	jmp    c001ccf6 <IDE::open(int, int, void*)+0x1da>
c001ccee:	83 ec 0c             	sub    esp,0xc
c001ccf1:	68 a1 35 02 c0       	push   0xc00235a1
c001ccf6:	e8 45 8d ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c001ccfb:	83 c4 10             	add    esp,0x10
c001ccfe:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c001cd05:	79 1a                	jns    c001cd21 <IDE::open(int, int, void*)+0x205>
c001cd07:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001cd0d:	83 e0 fc             	and    eax,0xfffffffc
c001cd10:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001cd17:	83 c0 08             	add    eax,0x8
c001cd1a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001cd21:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001cd27:	89 c2                	mov    edx,eax
c001cd29:	83 e2 0f             	and    edx,0xf
c001cd2c:	66 83 fa 08          	cmp    dx,0x8
c001cd30:	75 0a                	jne    c001cd3c <IDE::open(int, int, void*)+0x220>
c001cd32:	83 e8 02             	sub    eax,0x2
c001cd35:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001cd3c:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001cd42:	89 c2                	mov    edx,eax
c001cd44:	83 e2 0f             	and    edx,0xf
c001cd47:	66 83 fa 08          	cmp    dx,0x8
c001cd4b:	75 0a                	jne    c001cd57 <IDE::open(int, int, void*)+0x23b>
c001cd4d:	83 e8 02             	sub    eax,0x2
c001cd50:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001cd57:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001cd5e:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001cd65:	89 d0                	mov    eax,edx
c001cd67:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cd6a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cd6e:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001cd72:	8d 4a 01             	lea    ecx,[edx+0x1]
c001cd75:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cd7a:	0f b6 c9             	movzx  ecx,cl
c001cd7d:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001cd84:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cd87:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cd8b:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001cd8f:	8d 50 02             	lea    edx,[eax+0x2]
c001cd92:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cd97:	0f b6 d2             	movzx  edx,dl
c001cd9a:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cda0:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cda3:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cda7:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001cdab:	8d 48 03             	lea    ecx,[eax+0x3]
c001cdae:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cdb3:	0f b6 c9             	movzx  ecx,cl
c001cdb6:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001cdbc:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cdbf:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cdc3:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001cdc7:	8d 50 04             	lea    edx,[eax+0x4]
c001cdca:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001cdd0:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001cdd5:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cddc:	66 85 f6             	test   si,si
c001cddf:	74 3e                	je     c001ce1f <IDE::open(int, int, void*)+0x303>
c001cde1:	0f b6 d2             	movzx  edx,dl
c001cde4:	83 c0 05             	add    eax,0x5
c001cde7:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cdea:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cdee:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001cdf2:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001cdf8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c001cdfd:	eb 20                	jmp    c001ce1f <IDE::open(int, int, void*)+0x303>
c001cdff:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001ce09:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001ce13:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ce1a:	e9 02 ff ff ff       	jmp    c001cd21 <IDE::open(int, int, void*)+0x205>
c001ce1f:	52                   	push   edx
c001ce20:	52                   	push   edx
c001ce21:	6a 00                	push   0x0
c001ce23:	53                   	push   ebx
c001ce24:	e8 75 fa ff ff       	call   c001c89e <IDE::prepareInterrupt(unsigned char)>
c001ce29:	59                   	pop    ecx
c001ce2a:	5e                   	pop    esi
c001ce2b:	6a 01                	push   0x1
c001ce2d:	53                   	push   ebx
c001ce2e:	e8 6b fa ff ff       	call   c001c89e <IDE::prepareInterrupt(unsigned char)>
c001ce33:	83 c4 0c             	add    esp,0xc
c001ce36:	6a 00                	push   0x0
c001ce38:	6a 00                	push   0x0
c001ce3a:	53                   	push   ebx
c001ce3b:	e8 96 fc ff ff       	call   c001cad6 <IDE::enableIRQs(unsigned char, bool)>
c001ce40:	83 c4 0c             	add    esp,0xc
c001ce43:	6a 00                	push   0x0
c001ce45:	6a 01                	push   0x1
c001ce47:	53                   	push   ebx
c001ce48:	e8 89 fc ff ff       	call   c001cad6 <IDE::enableIRQs(unsigned char, bool)>
c001ce4d:	83 c4 10             	add    esp,0x10
c001ce50:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001ce57:	74 40                	je     c001ce99 <IDE::open(int, int, void*)+0x37d>
c001ce59:	83 ec 0c             	sub    esp,0xc
c001ce5c:	68 cb 35 02 c0       	push   0xc00235cb
c001ce61:	e8 ab 23 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001ce66:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ce69:	6a 01                	push   0x1
c001ce6b:	68 9e ca 01 c0       	push   0xc001ca9e
c001ce70:	6a 0e                	push   0xe
c001ce72:	53                   	push   ebx
c001ce73:	e8 02 37 ff ff       	call   c001057a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ce78:	83 c4 14             	add    esp,0x14
c001ce7b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001ce81:	53                   	push   ebx
c001ce82:	6a 01                	push   0x1
c001ce84:	68 ba ca 01 c0       	push   0xc001caba
c001ce89:	6a 0f                	push   0xf
c001ce8b:	53                   	push   ebx
c001ce8c:	e8 e9 36 ff ff       	call   c001057a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ce91:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001ce97:	eb 4a                	jmp    c001cee3 <IDE::open(int, int, void*)+0x3c7>
c001ce99:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001cea3:	50                   	push   eax
c001cea4:	6a 0f                	push   0xf
c001cea6:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001ceac:	68 e7 35 02 c0       	push   0xc00235e7
c001ceb1:	e8 5b 23 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001ceb6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ceb9:	6a 00                	push   0x0
c001cebb:	68 9e ca 01 c0       	push   0xc001ca9e
c001cec0:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cec6:	53                   	push   ebx
c001cec7:	e8 ae 36 ff ff       	call   c001057a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cecc:	83 c4 14             	add    esp,0x14
c001cecf:	53                   	push   ebx
c001ced0:	6a 00                	push   0x0
c001ced2:	68 ba ca 01 c0       	push   0xc001caba
c001ced7:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001cedd:	53                   	push   ebx
c001cede:	e8 97 36 ff ff       	call   c001057a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cee3:	83 c4 20             	add    esp,0x20
c001cee6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cee8:	83 ec 0c             	sub    esp,0xc
c001ceeb:	53                   	push   ebx
c001ceec:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001ceef:	83 c4 0c             	add    esp,0xc
c001cef2:	6a 07                	push   0x7
c001cef4:	6a 00                	push   0x0
c001cef6:	53                   	push   ebx
c001cef7:	e8 88 fa ff ff       	call   c001c984 <IDE::read(unsigned char, unsigned char)>
c001cefc:	83 c4 0c             	add    esp,0xc
c001ceff:	6a 07                	push   0x7
c001cf01:	6a 01                	push   0x1
c001cf03:	53                   	push   ebx
c001cf04:	e8 7b fa ff ff       	call   c001c984 <IDE::read(unsigned char, unsigned char)>
c001cf09:	83 c4 0c             	add    esp,0xc
c001cf0c:	6a 01                	push   0x1
c001cf0e:	6a 00                	push   0x0
c001cf10:	53                   	push   ebx
c001cf11:	e8 c0 fb ff ff       	call   c001cad6 <IDE::enableIRQs(unsigned char, bool)>
c001cf16:	83 c4 0c             	add    esp,0xc
c001cf19:	6a 01                	push   0x1
c001cf1b:	6a 01                	push   0x1
c001cf1d:	53                   	push   ebx
c001cf1e:	e8 b3 fb ff ff       	call   c001cad6 <IDE::enableIRQs(unsigned char, bool)>
c001cf23:	83 c4 2c             	add    esp,0x2c
c001cf26:	31 c0                	xor    eax,eax
c001cf28:	5b                   	pop    ebx
c001cf29:	5e                   	pop    esi
c001cf2a:	5f                   	pop    edi
c001cf2b:	5d                   	pop    ebp
c001cf2c:	c3                   	ret    
c001cf2d:	90                   	nop

c001cf2e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001cf2e:	55                   	push   ebp
c001cf2f:	57                   	push   edi
c001cf30:	56                   	push   esi
c001cf31:	53                   	push   ebx
c001cf32:	83 ec 1c             	sub    esp,0x1c
c001cf35:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001cf39:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cf3d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cf41:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001cf45:	8d 50 f8             	lea    edx,[eax-0x8]
c001cf48:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001cf4c:	80 fa 03             	cmp    dl,0x3
c001cf4f:	77 5d                	ja     c001cfae <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c001cf51:	0f b6 db             	movzx  ebx,bl
c001cf54:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001cf58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cf5c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001cf5f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c001cf63:	83 ca 80             	or     edx,0xffffff80
c001cf66:	0f b6 d2             	movzx  edx,dl
c001cf69:	52                   	push   edx
c001cf6a:	6a 0c                	push   0xc
c001cf6c:	53                   	push   ebx
c001cf6d:	56                   	push   esi
c001cf6e:	e8 51 f9 ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf73:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf77:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001cf7c:	0f b6 c0             	movzx  eax,al
c001cf7f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cf83:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001cf87:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cf89:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001cf8e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001cf92:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001cf96:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001cf9a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001cfa2:	83 c4 2c             	add    esp,0x2c
c001cfa5:	5b                   	pop    ebx
c001cfa6:	5e                   	pop    esi
c001cfa7:	5f                   	pop    edi
c001cfa8:	5d                   	pop    ebp
c001cfa9:	e9 16 f9 ff ff       	jmp    c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cfae:	3c 07                	cmp    al,0x7
c001cfb0:	77 10                	ja     c001cfc2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c001cfb2:	0f b6 db             	movzx  ebx,bl
c001cfb5:	0f b6 d0             	movzx  edx,al
c001cfb8:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c001cfc0:	eb 2d                	jmp    c001cfef <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cfc2:	3c 0d                	cmp    al,0xd
c001cfc4:	77 13                	ja     c001cfd9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c001cfc6:	0f b6 db             	movzx  ebx,bl
c001cfc9:	0f b6 c0             	movzx  eax,al
c001cfcc:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c001cfd3:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c001cfd7:	eb 16                	jmp    c001cfef <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c001cfd9:	3c 15                	cmp    al,0x15
c001cfdb:	77 14                	ja     c001cff1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c001cfdd:	0f b6 db             	movzx  ebx,bl
c001cfe0:	0f b6 c0             	movzx  eax,al
c001cfe3:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c001cfeb:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c001cfef:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cff1:	83 c4 1c             	add    esp,0x1c
c001cff4:	5b                   	pop    ebx
c001cff5:	5e                   	pop    esi
c001cff6:	5f                   	pop    edi
c001cff7:	5d                   	pop    ebp
c001cff8:	c3                   	ret    
c001cff9:	90                   	nop

c001cffa <IDE::detect()>:
c001cffa:	55                   	push   ebp
c001cffb:	57                   	push   edi
c001cffc:	56                   	push   esi
c001cffd:	53                   	push   ebx
c001cffe:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001d004:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001d00b:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001d012:	0f 85 c0 02 00 00    	jne    c001d2d8 <IDE::detect()+0x2de>
c001d018:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001d01f:	31 f6                	xor    esi,esi
c001d021:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d029:	31 ed                	xor    ebp,ebp
c001d02b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d02f:	c1 e0 06             	shl    eax,0x6
c001d032:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001d03a:	89 e8                	mov    eax,ebp
c001d03c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d040:	c1 e0 04             	shl    eax,0x4
c001d043:	83 c8 a0             	or     eax,0xffffffa0
c001d046:	0f b6 c0             	movzx  eax,al
c001d049:	50                   	push   eax
c001d04a:	6a 06                	push   0x6
c001d04c:	56                   	push   esi
c001d04d:	53                   	push   ebx
c001d04e:	e8 71 f8 ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d053:	83 c4 0c             	add    esp,0xc
c001d056:	6a 0c                	push   0xc
c001d058:	56                   	push   esi
c001d059:	53                   	push   ebx
c001d05a:	e8 25 f9 ff ff       	call   c001c984 <IDE::read(unsigned char, unsigned char)>
c001d05f:	83 c4 0c             	add    esp,0xc
c001d062:	6a 0c                	push   0xc
c001d064:	56                   	push   esi
c001d065:	53                   	push   ebx
c001d066:	e8 19 f9 ff ff       	call   c001c984 <IDE::read(unsigned char, unsigned char)>
c001d06b:	83 c4 0c             	add    esp,0xc
c001d06e:	6a 0c                	push   0xc
c001d070:	56                   	push   esi
c001d071:	53                   	push   ebx
c001d072:	e8 0d f9 ff ff       	call   c001c984 <IDE::read(unsigned char, unsigned char)>
c001d077:	83 c4 0c             	add    esp,0xc
c001d07a:	6a 0c                	push   0xc
c001d07c:	56                   	push   esi
c001d07d:	53                   	push   ebx
c001d07e:	e8 01 f9 ff ff       	call   c001c984 <IDE::read(unsigned char, unsigned char)>
c001d083:	68 ec 00 00 00       	push   0xec
c001d088:	6a 07                	push   0x7
c001d08a:	56                   	push   esi
c001d08b:	53                   	push   ebx
c001d08c:	e8 33 f8 ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d091:	83 c4 1c             	add    esp,0x1c
c001d094:	6a 0c                	push   0xc
c001d096:	56                   	push   esi
c001d097:	53                   	push   ebx
c001d098:	e8 e7 f8 ff ff       	call   c001c984 <IDE::read(unsigned char, unsigned char)>
c001d09d:	83 c4 0c             	add    esp,0xc
c001d0a0:	6a 0c                	push   0xc
c001d0a2:	56                   	push   esi
c001d0a3:	53                   	push   ebx
c001d0a4:	e8 db f8 ff ff       	call   c001c984 <IDE::read(unsigned char, unsigned char)>
c001d0a9:	83 c4 0c             	add    esp,0xc
c001d0ac:	6a 0c                	push   0xc
c001d0ae:	56                   	push   esi
c001d0af:	53                   	push   ebx
c001d0b0:	e8 cf f8 ff ff       	call   c001c984 <IDE::read(unsigned char, unsigned char)>
c001d0b5:	83 c4 0c             	add    esp,0xc
c001d0b8:	6a 0c                	push   0xc
c001d0ba:	56                   	push   esi
c001d0bb:	53                   	push   ebx
c001d0bc:	e8 c3 f8 ff ff       	call   c001c984 <IDE::read(unsigned char, unsigned char)>
c001d0c1:	83 c4 0c             	add    esp,0xc
c001d0c4:	6a 0c                	push   0xc
c001d0c6:	56                   	push   esi
c001d0c7:	53                   	push   ebx
c001d0c8:	e8 b7 f8 ff ff       	call   c001c984 <IDE::read(unsigned char, unsigned char)>
c001d0cd:	83 c4 10             	add    esp,0x10
c001d0d0:	84 c0                	test   al,al
c001d0d2:	0f 84 8b 01 00 00    	je     c001d263 <IDE::detect()+0x269>
c001d0d8:	31 ff                	xor    edi,edi
c001d0da:	50                   	push   eax
c001d0db:	6a 0c                	push   0xc
c001d0dd:	56                   	push   esi
c001d0de:	53                   	push   ebx
c001d0df:	e8 a0 f8 ff ff       	call   c001c984 <IDE::read(unsigned char, unsigned char)>
c001d0e4:	83 c4 10             	add    esp,0x10
c001d0e7:	a8 01                	test   al,0x1
c001d0e9:	0f 85 8e 01 00 00    	jne    c001d27d <IDE::detect()+0x283>
c001d0ef:	84 c0                	test   al,al
c001d0f1:	78 04                	js     c001d0f7 <IDE::detect()+0xfd>
c001d0f3:	a8 08                	test   al,0x8
c001d0f5:	75 27                	jne    c001d11e <IDE::detect()+0x124>
c001d0f7:	47                   	inc    edi
c001d0f8:	81 ff 17 01 00 00    	cmp    edi,0x117
c001d0fe:	7e da                	jle    c001d0da <IDE::detect()+0xe0>
c001d100:	50                   	push   eax
c001d101:	50                   	push   eax
c001d102:	6a 00                	push   0x0
c001d104:	68 40 4b 4c 00       	push   0x4c4b40
c001d109:	e8 99 be ff ff       	call   c0018fa7 <nanoSleep(unsigned long long)>
c001d10e:	83 c4 10             	add    esp,0x10
c001d111:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001d117:	75 c1                	jne    c001d0da <IDE::detect()+0xe0>
c001d119:	e9 5f 01 00 00       	jmp    c001d27d <IDE::detect()+0x283>
c001d11e:	31 c9                	xor    ecx,ecx
c001d120:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001d124:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001d128:	83 ec 0c             	sub    esp,0xc
c001d12b:	68 80 00 00 00       	push   0x80
c001d130:	57                   	push   edi
c001d131:	6a 00                	push   0x0
c001d133:	56                   	push   esi
c001d134:	53                   	push   ebx
c001d135:	e8 f4 fd ff ff       	call   c001cf2e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001d13a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d13e:	c1 e0 06             	shl    eax,0x6
c001d141:	01 d8                	add    eax,ebx
c001d143:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001d148:	89 d1                	mov    ecx,edx
c001d14a:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001d151:	89 f2                	mov    edx,esi
c001d153:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001d15a:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001d160:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001d164:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001d16a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d16e:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001d175:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001d17d:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001d184:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001d18c:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001d192:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001d199:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001d19f:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d1a3:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001d1a7:	83 c4 20             	add    esp,0x20
c001d1aa:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001d1ad:	83 c7 02             	add    edi,0x2
c001d1b0:	88 90 80 01 00 00    	mov    BYTE PTR [eax+0x180],dl
c001d1b6:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001d1b9:	88 90 81 01 00 00    	mov    BYTE PTR [eax+0x181],dl
c001d1bf:	83 c0 02             	add    eax,0x2
c001d1c2:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c001d1c6:	75 e2                	jne    c001d1aa <IDE::detect()+0x1b0>
c001d1c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d1cc:	c1 e0 06             	shl    eax,0x6
c001d1cf:	01 d8                	add    eax,ebx
c001d1d1:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c001d1d7:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001d1de:	66 c1 ea 09          	shr    dx,0x9
c001d1e2:	83 e2 01             	and    edx,0x1
c001d1e5:	84 c9                	test   cl,cl
c001d1e7:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001d1ed:	75 2f                	jne    c001d21e <IDE::detect()+0x224>
c001d1ef:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c001d1f5:	85 c0                	test   eax,eax
c001d1f7:	74 66                	je     c001d25f <IDE::detect()+0x265>
c001d1f9:	50                   	push   eax
c001d1fa:	55                   	push   ebp
c001d1fb:	56                   	push   esi
c001d1fc:	68 03 36 02 c0       	push   0xc0023603
c001d201:	e8 0b 20 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001d206:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d20d:	e8 ca 1e ff ff       	call   c000f0dc <operator new(unsigned long)>
c001d212:	89 c7                	mov    edi,eax
c001d214:	89 04 24             	mov    DWORD PTR [esp],eax
c001d217:	e8 f4 02 00 00       	call   c001d510 <ATA::ATA()>
c001d21c:	eb 28                	jmp    c001d246 <IDE::detect()+0x24c>
c001d21e:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c001d224:	55                   	push   ebp
c001d225:	56                   	push   esi
c001d226:	68 32 36 02 c0       	push   0xc0023632
c001d22b:	e8 e1 1f ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001d230:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c001d237:	e8 a0 1e ff ff       	call   c000f0dc <operator new(unsigned long)>
c001d23c:	89 c7                	mov    edi,eax
c001d23e:	89 04 24             	mov    DWORD PTR [esp],eax
c001d241:	e8 1e 09 00 00       	call   c001db64 <ATAPI::ATAPI()>
c001d246:	5a                   	pop    edx
c001d247:	59                   	pop    ecx
c001d248:	57                   	push   edi
c001d249:	53                   	push   ebx
c001d24a:	e8 d7 33 ff ff       	call   c0010626 <Device::addChild(Device*)>
c001d24f:	8b 07                	mov    eax,DWORD PTR [edi]
c001d251:	53                   	push   ebx
c001d252:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d256:	6a 00                	push   0x0
c001d258:	57                   	push   edi
c001d259:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d25c:	83 c4 20             	add    esp,0x20
c001d25f:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c001d263:	4d                   	dec    ebp
c001d264:	74 0a                	je     c001d270 <IDE::detect()+0x276>
c001d266:	bd 01 00 00 00       	mov    ebp,0x1
c001d26b:	e9 bb fd ff ff       	jmp    c001d02b <IDE::detect()+0x31>
c001d270:	4e                   	dec    esi
c001d271:	74 65                	je     c001d2d8 <IDE::detect()+0x2de>
c001d273:	be 01 00 00 00       	mov    esi,0x1
c001d278:	e9 ac fd ff ff       	jmp    c001d029 <IDE::detect()+0x2f>
c001d27d:	50                   	push   eax
c001d27e:	6a 04                	push   0x4
c001d280:	56                   	push   esi
c001d281:	53                   	push   ebx
c001d282:	e8 fd f6 ff ff       	call   c001c984 <IDE::read(unsigned char, unsigned char)>
c001d287:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d28b:	83 c4 0c             	add    esp,0xc
c001d28e:	6a 05                	push   0x5
c001d290:	56                   	push   esi
c001d291:	53                   	push   ebx
c001d292:	e8 ed f6 ff ff       	call   c001c984 <IDE::read(unsigned char, unsigned char)>
c001d297:	83 c4 10             	add    esp,0x10
c001d29a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001d29e:	80 fa 14             	cmp    dl,0x14
c001d2a1:	74 2f                	je     c001d2d2 <IDE::detect()+0x2d8>
c001d2a3:	80 fa 69             	cmp    dl,0x69
c001d2a6:	75 bb                	jne    c001d263 <IDE::detect()+0x269>
c001d2a8:	3c 96                	cmp    al,0x96
c001d2aa:	75 b7                	jne    c001d263 <IDE::detect()+0x269>
c001d2ac:	68 a1 00 00 00       	push   0xa1
c001d2b1:	6a 07                	push   0x7
c001d2b3:	56                   	push   esi
c001d2b4:	53                   	push   ebx
c001d2b5:	e8 0a f6 ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d2ba:	5f                   	pop    edi
c001d2bb:	58                   	pop    eax
c001d2bc:	6a 00                	push   0x0
c001d2be:	68 40 42 0f 00       	push   0xf4240
c001d2c3:	e8 df bc ff ff       	call   c0018fa7 <nanoSleep(unsigned long long)>
c001d2c8:	83 c4 10             	add    esp,0x10
c001d2cb:	b1 01                	mov    cl,0x1
c001d2cd:	e9 4e fe ff ff       	jmp    c001d120 <IDE::detect()+0x126>
c001d2d2:	3c eb                	cmp    al,0xeb
c001d2d4:	75 cd                	jne    c001d2a3 <IDE::detect()+0x2a9>
c001d2d6:	eb d4                	jmp    c001d2ac <IDE::detect()+0x2b2>
c001d2d8:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d2de:	5b                   	pop    ebx
c001d2df:	5e                   	pop    esi
c001d2e0:	5f                   	pop    edi
c001d2e1:	5d                   	pop    ebp
c001d2e2:	c3                   	ret    
c001d2e3:	90                   	nop

c001d2e4 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d2e4:	55                   	push   ebp
c001d2e5:	57                   	push   edi
c001d2e6:	56                   	push   esi
c001d2e7:	53                   	push   ebx
c001d2e8:	83 ec 1c             	sub    esp,0x1c
c001d2eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d2ef:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d2f3:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d2f7:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001d2fb:	88 c3                	mov    bl,al
c001d2fd:	84 c0                	test   al,al
c001d2ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d303:	0f 84 67 01 00 00    	je     c001d470 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c001d309:	83 ec 0c             	sub    esp,0xc
c001d30c:	68 63 36 02 c0       	push   0xc0023663
c001d311:	e8 fb 1e ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001d316:	83 c4 10             	add    esp,0x10
c001d319:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d31d:	3c 01                	cmp    al,0x1
c001d31f:	75 17                	jne    c001d338 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c001d321:	83 ec 0c             	sub    esp,0xc
c001d324:	b3 13                	mov    bl,0x13
c001d326:	68 6f 36 02 c0       	push   0xc002366f
c001d32b:	e8 e1 1e ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001d330:	83 c4 10             	add    esp,0x10
c001d333:	e9 25 01 00 00       	jmp    c001d45d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d338:	3c 02                	cmp    al,0x2
c001d33a:	0f 85 ef 00 00 00    	jne    c001d42f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c001d340:	01 f6                	add    esi,esi
c001d342:	52                   	push   edx
c001d343:	09 ee                	or     esi,ebp
c001d345:	6a 01                	push   0x1
c001d347:	89 f0                	mov    eax,esi
c001d349:	0f b6 f0             	movzx  esi,al
c001d34c:	c1 e6 06             	shl    esi,0x6
c001d34f:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c001d357:	50                   	push   eax
c001d358:	57                   	push   edi
c001d359:	e8 26 f6 ff ff       	call   c001c984 <IDE::read(unsigned char, unsigned char)>
c001d35e:	83 c4 10             	add    esp,0x10
c001d361:	89 c6                	mov    esi,eax
c001d363:	a8 01                	test   al,0x1
c001d365:	74 12                	je     c001d379 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c001d367:	83 ec 0c             	sub    esp,0xc
c001d36a:	b3 07                	mov    bl,0x7
c001d36c:	68 84 36 02 c0       	push   0xc0023684
c001d371:	e8 9b 1e ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001d376:	83 c4 10             	add    esp,0x10
c001d379:	f7 c6 02 00 00 00    	test   esi,0x2
c001d37f:	74 12                	je     c001d393 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c001d381:	83 ec 0c             	sub    esp,0xc
c001d384:	b3 03                	mov    bl,0x3
c001d386:	68 a2 36 02 c0       	push   0xc00236a2
c001d38b:	e8 81 1e ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001d390:	83 c4 10             	add    esp,0x10
c001d393:	f7 c6 04 00 00 00    	test   esi,0x4
c001d399:	74 12                	je     c001d3ad <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c001d39b:	83 ec 0c             	sub    esp,0xc
c001d39e:	b3 14                	mov    bl,0x14
c001d3a0:	68 c2 36 02 c0       	push   0xc00236c2
c001d3a5:	e8 67 1e ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001d3aa:	83 c4 10             	add    esp,0x10
c001d3ad:	f7 c6 08 00 00 00    	test   esi,0x8
c001d3b3:	74 12                	je     c001d3c7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c001d3b5:	83 ec 0c             	sub    esp,0xc
c001d3b8:	b3 03                	mov    bl,0x3
c001d3ba:	68 a2 36 02 c0       	push   0xc00236a2
c001d3bf:	e8 4d 1e ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001d3c4:	83 c4 10             	add    esp,0x10
c001d3c7:	f7 c6 10 00 00 00    	test   esi,0x10
c001d3cd:	74 12                	je     c001d3e1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c001d3cf:	83 ec 0c             	sub    esp,0xc
c001d3d2:	b3 15                	mov    bl,0x15
c001d3d4:	68 da 36 02 c0       	push   0xc00236da
c001d3d9:	e8 33 1e ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001d3de:	83 c4 10             	add    esp,0x10
c001d3e1:	f7 c6 20 00 00 00    	test   esi,0x20
c001d3e7:	74 12                	je     c001d3fb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c001d3e9:	83 ec 0c             	sub    esp,0xc
c001d3ec:	b3 03                	mov    bl,0x3
c001d3ee:	68 a2 36 02 c0       	push   0xc00236a2
c001d3f3:	e8 19 1e ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001d3f8:	83 c4 10             	add    esp,0x10
c001d3fb:	f7 c6 40 00 00 00    	test   esi,0x40
c001d401:	74 12                	je     c001d415 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c001d403:	83 ec 0c             	sub    esp,0xc
c001d406:	b3 16                	mov    bl,0x16
c001d408:	68 f4 36 02 c0       	push   0xc00236f4
c001d40d:	e8 ff 1d ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001d412:	83 c4 10             	add    esp,0x10
c001d415:	89 f0                	mov    eax,esi
c001d417:	84 c0                	test   al,al
c001d419:	79 42                	jns    c001d45d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d41b:	83 ec 0c             	sub    esp,0xc
c001d41e:	b3 0d                	mov    bl,0xd
c001d420:	68 15 37 02 c0       	push   0xc0023715
c001d425:	e8 e7 1d ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001d42a:	83 c4 10             	add    esp,0x10
c001d42d:	eb 2e                	jmp    c001d45d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d42f:	3c 03                	cmp    al,0x3
c001d431:	75 14                	jne    c001d447 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c001d433:	83 ec 0c             	sub    esp,0xc
c001d436:	b3 17                	mov    bl,0x17
c001d438:	68 29 37 02 c0       	push   0xc0023729
c001d43d:	e8 cf 1d ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001d442:	83 c4 10             	add    esp,0x10
c001d445:	eb 16                	jmp    c001d45d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d447:	3c 04                	cmp    al,0x4
c001d449:	75 12                	jne    c001d45d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c001d44b:	83 ec 0c             	sub    esp,0xc
c001d44e:	b3 08                	mov    bl,0x8
c001d450:	68 3f 37 02 c0       	push   0xc002373f
c001d455:	e8 b7 1d ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001d45a:	83 c4 10             	add    esp,0x10
c001d45d:	50                   	push   eax
c001d45e:	50                   	push   eax
c001d45f:	0f b6 c3             	movzx  eax,bl
c001d462:	50                   	push   eax
c001d463:	68 57 37 02 c0       	push   0xc0023757
c001d468:	e8 a4 1d ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001d46d:	83 c4 10             	add    esp,0x10
c001d470:	83 c4 1c             	add    esp,0x1c
c001d473:	88 d8                	mov    al,bl
c001d475:	5b                   	pop    ebx
c001d476:	5e                   	pop    esi
c001d477:	5f                   	pop    edi
c001d478:	5d                   	pop    ebp
c001d479:	c3                   	ret    

c001d47a <IDE::polling(unsigned char, unsigned int)>:
c001d47a:	55                   	push   ebp
c001d47b:	bd 04 00 00 00       	mov    ebp,0x4
c001d480:	57                   	push   edi
c001d481:	56                   	push   esi
c001d482:	53                   	push   ebx
c001d483:	83 ec 0c             	sub    esp,0xc
c001d486:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d48a:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001d48e:	52                   	push   edx
c001d48f:	6a 0c                	push   0xc
c001d491:	0f b6 f3             	movzx  esi,bl
c001d494:	56                   	push   esi
c001d495:	57                   	push   edi
c001d496:	e8 e9 f4 ff ff       	call   c001c984 <IDE::read(unsigned char, unsigned char)>
c001d49b:	83 c4 10             	add    esp,0x10
c001d49e:	4d                   	dec    ebp
c001d49f:	75 ed                	jne    c001d48e <IDE::polling(unsigned char, unsigned int)+0x14>
c001d4a1:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d4a6:	50                   	push   eax
c001d4a7:	6a 0c                	push   0xc
c001d4a9:	56                   	push   esi
c001d4aa:	57                   	push   edi
c001d4ab:	e8 d4 f4 ff ff       	call   c001c984 <IDE::read(unsigned char, unsigned char)>
c001d4b0:	83 c4 10             	add    esp,0x10
c001d4b3:	a8 01                	test   al,0x1
c001d4b5:	74 12                	je     c001d4c9 <IDE::polling(unsigned char, unsigned int)+0x4f>
c001d4b7:	83 ec 0c             	sub    esp,0xc
c001d4ba:	68 71 37 02 c0       	push   0xc0023771
c001d4bf:	e8 4d 1d ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001d4c4:	83 c4 10             	add    esp,0x10
c001d4c7:	eb 17                	jmp    c001d4e0 <IDE::polling(unsigned char, unsigned int)+0x66>
c001d4c9:	a8 20                	test   al,0x20
c001d4cb:	75 0f                	jne    c001d4dc <IDE::polling(unsigned char, unsigned int)+0x62>
c001d4cd:	4b                   	dec    ebx
c001d4ce:	74 10                	je     c001d4e0 <IDE::polling(unsigned char, unsigned int)+0x66>
c001d4d0:	84 c0                	test   al,al
c001d4d2:	78 d2                	js     c001d4a6 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001d4d4:	a8 08                	test   al,0x8
c001d4d6:	74 ce                	je     c001d4a6 <IDE::polling(unsigned char, unsigned int)+0x2c>
c001d4d8:	31 c0                	xor    eax,eax
c001d4da:	eb 06                	jmp    c001d4e2 <IDE::polling(unsigned char, unsigned int)+0x68>
c001d4dc:	b0 01                	mov    al,0x1
c001d4de:	eb 02                	jmp    c001d4e2 <IDE::polling(unsigned char, unsigned int)+0x68>
c001d4e0:	b0 02                	mov    al,0x2
c001d4e2:	83 c4 0c             	add    esp,0xc
c001d4e5:	5b                   	pop    ebx
c001d4e6:	5e                   	pop    esi
c001d4e7:	5f                   	pop    edi
c001d4e8:	5d                   	pop    ebp
c001d4e9:	c3                   	ret    

c001d4ea <ATA::close(int, int, void*)>:
c001d4ea:	83 ec 0c             	sub    esp,0xc
c001d4ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4f1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d4f7:	85 c0                	test   eax,eax
c001d4f9:	74 0c                	je     c001d507 <ATA::close(int, int, void*)+0x1d>
c001d4fb:	83 ec 0c             	sub    esp,0xc
c001d4fe:	8b 10                	mov    edx,DWORD PTR [eax]
c001d500:	50                   	push   eax
c001d501:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d504:	83 c4 10             	add    esp,0x10
c001d507:	31 c0                	xor    eax,eax
c001d509:	83 c4 0c             	add    esp,0xc
c001d50c:	c3                   	ret    
c001d50d:	90                   	nop

c001d50e <ATA::powerSaving(PowerSavingLevel)>:
c001d50e:	c3                   	ret    
c001d50f:	90                   	nop

c001d510 <ATA::ATA()>:
c001d510:	83 ec 0c             	sub    esp,0xc
c001d513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d517:	83 ec 04             	sub    esp,0x4
c001d51a:	68 00 02 00 00       	push   0x200
c001d51f:	68 b4 37 02 c0       	push   0xc00237b4
c001d524:	50                   	push   eax
c001d525:	e8 02 35 ff ff       	call   c0010a2c <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d52a:	83 c4 10             	add    esp,0x10
c001d52d:	ba e0 37 02 c0       	mov    edx,0xc00237e0
c001d532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d536:	89 10                	mov    DWORD PTR [eax],edx
c001d538:	90                   	nop
c001d539:	83 c4 0c             	add    esp,0xc
c001d53c:	c3                   	ret    
c001d53d:	90                   	nop

c001d53e <ATA::flush(bool)>:
c001d53e:	53                   	push   ebx
c001d53f:	83 ec 08             	sub    esp,0x8
c001d542:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001d547:	19 c0                	sbb    eax,eax
c001d549:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d54d:	83 e0 fd             	and    eax,0xfffffffd
c001d550:	05 ea 00 00 00       	add    eax,0xea
c001d555:	50                   	push   eax
c001d556:	6a 07                	push   0x7
c001d558:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d55f:	50                   	push   eax
c001d560:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d566:	e8 59 f3 ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d56b:	83 c4 0c             	add    esp,0xc
c001d56e:	6a 00                	push   0x0
c001d570:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d577:	50                   	push   eax
c001d578:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d57e:	e8 f7 fe ff ff       	call   c001d47a <IDE::polling(unsigned char, unsigned int)>
c001d583:	83 c4 18             	add    esp,0x18
c001d586:	5b                   	pop    ebx
c001d587:	c3                   	ret    

c001d588 <ATA::readyForCommand()>:
c001d588:	56                   	push   esi
c001d589:	53                   	push   ebx
c001d58a:	31 db                	xor    ebx,ebx
c001d58c:	50                   	push   eax
c001d58d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d591:	50                   	push   eax
c001d592:	6a 0c                	push   0xc
c001d594:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d59b:	50                   	push   eax
c001d59c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d5a2:	e8 dd f3 ff ff       	call   c001c984 <IDE::read(unsigned char, unsigned char)>
c001d5a7:	83 c4 10             	add    esp,0x10
c001d5aa:	a8 88                	test   al,0x88
c001d5ac:	74 23                	je     c001d5d1 <ATA::readyForCommand()+0x49>
c001d5ae:	43                   	inc    ebx
c001d5af:	83 fb 63             	cmp    ebx,0x63
c001d5b2:	7e dd                	jle    c001d591 <ATA::readyForCommand()+0x9>
c001d5b4:	51                   	push   ecx
c001d5b5:	51                   	push   ecx
c001d5b6:	6a 00                	push   0x0
c001d5b8:	68 40 42 0f 00       	push   0xf4240
c001d5bd:	e8 e5 b9 ff ff       	call   c0018fa7 <nanoSleep(unsigned long long)>
c001d5c2:	83 c4 10             	add    esp,0x10
c001d5c5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d5cb:	75 c4                	jne    c001d591 <ATA::readyForCommand()+0x9>
c001d5cd:	31 c0                	xor    eax,eax
c001d5cf:	eb 02                	jmp    c001d5d3 <ATA::readyForCommand()+0x4b>
c001d5d1:	b0 01                	mov    al,0x1
c001d5d3:	5a                   	pop    edx
c001d5d4:	5b                   	pop    ebx
c001d5d5:	5e                   	pop    esi
c001d5d6:	c3                   	ret    
c001d5d7:	90                   	nop

c001d5d8 <ATA::access(unsigned long long, int, void*, bool)>:
c001d5d8:	55                   	push   ebp
c001d5d9:	57                   	push   edi
c001d5da:	56                   	push   esi
c001d5db:	53                   	push   ebx
c001d5dc:	83 ec 2c             	sub    esp,0x2c
c001d5df:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d5e3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d5e7:	89 04 24             	mov    DWORD PTR [esp],eax
c001d5ea:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d5ee:	8a 04 24             	mov    al,BYTE PTR [esp]
c001d5f1:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d5f5:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d5f9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d5ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d603:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d609:	c1 e0 06             	shl    eax,0x6
c001d60c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001d610:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d618:	74 5d                	je     c001d677 <ATA::access(unsigned long long, int, void*, bool)+0x9f>
c001d61a:	89 fa                	mov    edx,edi
c001d61c:	89 f0                	mov    eax,esi
c001d61e:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001d622:	c1 ea 1c             	shr    edx,0x1c
c001d625:	89 d1                	mov    ecx,edx
c001d627:	09 c1                	or     ecx,eax
c001d629:	74 25                	je     c001d650 <ATA::access(unsigned long long, int, void*, bool)+0x78>
c001d62b:	31 ed                	xor    ebp,ebp
c001d62d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d634:	89 fa                	mov    edx,edi
c001d636:	89 f0                	mov    eax,esi
c001d638:	0f ad d0             	shrd   eax,edx,cl
c001d63b:	d3 ea                	shr    edx,cl
c001d63d:	f6 c1 20             	test   cl,0x20
c001d640:	74 02                	je     c001d644 <ATA::access(unsigned long long, int, void*, bool)+0x6c>
c001d642:	89 d0                	mov    eax,edx
c001d644:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d648:	45                   	inc    ebp
c001d649:	83 fd 06             	cmp    ebp,0x6
c001d64c:	75 df                	jne    c001d62d <ATA::access(unsigned long long, int, void*, bool)+0x55>
c001d64e:	eb 73                	jmp    c001d6c3 <ATA::access(unsigned long long, int, void*, bool)+0xeb>
c001d650:	89 f0                	mov    eax,esi
c001d652:	89 fa                	mov    edx,edi
c001d654:	0f ac d0 10          	shrd   eax,edx,0x10
c001d658:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d65d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d661:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d668:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d66d:	c1 ee 18             	shr    esi,0x18
c001d670:	bf 01 00 00 00       	mov    edi,0x1
c001d675:	eb 53                	jmp    c001d6ca <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d677:	6a 00                	push   0x0
c001d679:	6a 3f                	push   0x3f
c001d67b:	57                   	push   edi
c001d67c:	56                   	push   esi
c001d67d:	e8 8a 1f 00 00       	call   c001f60c <__umoddi3>
c001d682:	83 c4 10             	add    esp,0x10
c001d685:	40                   	inc    eax
c001d686:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d68a:	6a 00                	push   0x0
c001d68c:	68 f0 03 00 00       	push   0x3f0
c001d691:	57                   	push   edi
c001d692:	56                   	push   esi
c001d693:	e8 74 1e 00 00       	call   c001f50c <__udivdi3>
c001d698:	83 c4 10             	add    esp,0x10
c001d69b:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d6a0:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d6a7:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d6ac:	6a 00                	push   0x0
c001d6ae:	6a 3f                	push   0x3f
c001d6b0:	57                   	push   edi
c001d6b1:	31 ff                	xor    edi,edi
c001d6b3:	56                   	push   esi
c001d6b4:	e8 53 1e 00 00       	call   c001f50c <__udivdi3>
c001d6b9:	89 c6                	mov    esi,eax
c001d6bb:	83 c4 10             	add    esp,0x10
c001d6be:	83 e6 0f             	and    esi,0xf
c001d6c1:	eb 07                	jmp    c001d6ca <ATA::access(unsigned long long, int, void*, bool)+0xf2>
c001d6c3:	31 f6                	xor    esi,esi
c001d6c5:	bf 02 00 00 00       	mov    edi,0x2
c001d6ca:	50                   	push   eax
c001d6cb:	6a 00                	push   0x0
c001d6cd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d6d4:	50                   	push   eax
c001d6d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d6d9:	e8 f8 f3 ff ff       	call   c001cad6 <IDE::enableIRQs(unsigned char, bool)>
c001d6de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6e1:	e8 a2 fe ff ff       	call   c001d588 <ATA::readyForCommand()>
c001d6e6:	83 c4 10             	add    esp,0x10
c001d6e9:	84 c0                	test   al,al
c001d6eb:	75 0a                	jne    c001d6f7 <ATA::access(unsigned long long, int, void*, bool)+0x11f>
c001d6ed:	be 01 00 00 00       	mov    esi,0x1
c001d6f2:	e9 79 02 00 00       	jmp    c001d970 <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d6f7:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d6fd:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d703:	c1 e0 04             	shl    eax,0x4
c001d706:	09 c6                	or     esi,eax
c001d708:	89 f8                	mov    eax,edi
c001d70a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001d711:	84 c0                	test   al,al
c001d713:	75 05                	jne    c001d71a <ATA::access(unsigned long long, int, void*, bool)+0x142>
c001d715:	83 ce a0             	or     esi,0xffffffa0
c001d718:	eb 03                	jmp    c001d71d <ATA::access(unsigned long long, int, void*, bool)+0x145>
c001d71a:	83 ce e0             	or     esi,0xffffffe0
c001d71d:	89 f0                	mov    eax,esi
c001d71f:	0f b6 f0             	movzx  esi,al
c001d722:	56                   	push   esi
c001d723:	6a 06                	push   0x6
c001d725:	51                   	push   ecx
c001d726:	52                   	push   edx
c001d727:	e8 98 f1 ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d72c:	83 c4 10             	add    esp,0x10
c001d72f:	6a 00                	push   0x0
c001d731:	6a 01                	push   0x1
c001d733:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d73a:	50                   	push   eax
c001d73b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d741:	e8 7e f1 ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d746:	89 f8                	mov    eax,edi
c001d748:	83 c4 10             	add    esp,0x10
c001d74b:	3c 02                	cmp    al,0x2
c001d74d:	75 6e                	jne    c001d7bd <ATA::access(unsigned long long, int, void*, bool)+0x1e5>
c001d74f:	6a 00                	push   0x0
c001d751:	6a 08                	push   0x8
c001d753:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d75a:	50                   	push   eax
c001d75b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d761:	e8 5e f1 ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d766:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d76b:	50                   	push   eax
c001d76c:	6a 09                	push   0x9
c001d76e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d775:	50                   	push   eax
c001d776:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d77c:	e8 43 f1 ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d781:	83 c4 20             	add    esp,0x20
c001d784:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d789:	50                   	push   eax
c001d78a:	6a 0a                	push   0xa
c001d78c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d793:	50                   	push   eax
c001d794:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d79a:	e8 25 f1 ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d79f:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d7a4:	50                   	push   eax
c001d7a5:	6a 0b                	push   0xb
c001d7a7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7ae:	50                   	push   eax
c001d7af:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7b5:	e8 0a f1 ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7ba:	83 c4 20             	add    esp,0x20
c001d7bd:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d7c2:	50                   	push   eax
c001d7c3:	6a 02                	push   0x2
c001d7c5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7cc:	50                   	push   eax
c001d7cd:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7d3:	e8 ec f0 ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7d8:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d7dd:	50                   	push   eax
c001d7de:	6a 03                	push   0x3
c001d7e0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7e7:	50                   	push   eax
c001d7e8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d7ee:	e8 d1 f0 ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d7f3:	83 c4 20             	add    esp,0x20
c001d7f6:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d7fb:	50                   	push   eax
c001d7fc:	6a 04                	push   0x4
c001d7fe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d805:	50                   	push   eax
c001d806:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d80c:	e8 b3 f0 ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d811:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d816:	50                   	push   eax
c001d817:	6a 05                	push   0x5
c001d819:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d820:	50                   	push   eax
c001d821:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d827:	e8 98 f0 ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d82c:	83 c4 20             	add    esp,0x20
c001d82f:	89 f8                	mov    eax,edi
c001d831:	3c 02                	cmp    al,0x2
c001d833:	0f 94 44 24 04       	sete   BYTE PTR [esp+0x4]
c001d838:	75 06                	jne    c001d840 <ATA::access(unsigned long long, int, void*, bool)+0x268>
c001d83a:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d83e:	75 40                	jne    c001d880 <ATA::access(unsigned long long, int, void*, bool)+0x2a8>
c001d840:	89 f8                	mov    eax,edi
c001d842:	3c 02                	cmp    al,0x2
c001d844:	0f 95 c1             	setne  cl
c001d847:	74 0b                	je     c001d854 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c001d849:	b8 30 00 00 00       	mov    eax,0x30
c001d84e:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d852:	75 31                	jne    c001d885 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d854:	8a 14 24             	mov    dl,BYTE PTR [esp]
c001d857:	83 f2 01             	xor    edx,0x1
c001d85a:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d85f:	74 09                	je     c001d86a <ATA::access(unsigned long long, int, void*, bool)+0x292>
c001d861:	b8 24 00 00 00       	mov    eax,0x24
c001d866:	84 d2                	test   dl,dl
c001d868:	75 1b                	jne    c001d885 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d86a:	84 c9                	test   cl,cl
c001d86c:	0f 84 7b fe ff ff    	je     c001d6ed <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d872:	b8 20 00 00 00       	mov    eax,0x20
c001d877:	84 d2                	test   dl,dl
c001d879:	75 0a                	jne    c001d885 <ATA::access(unsigned long long, int, void*, bool)+0x2ad>
c001d87b:	e9 6d fe ff ff       	jmp    c001d6ed <ATA::access(unsigned long long, int, void*, bool)+0x115>
c001d880:	b8 34 00 00 00       	mov    eax,0x34
c001d885:	50                   	push   eax
c001d886:	6a 07                	push   0x7
c001d888:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d88f:	50                   	push   eax
c001d890:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d896:	e8 29 f0 ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d89b:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001d89f:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001d8a3:	83 c4 10             	add    esp,0x10
c001d8a6:	85 f6                	test   esi,esi
c001d8a8:	0f 84 a9 00 00 00    	je     c001d957 <ATA::access(unsigned long long, int, void*, bool)+0x37f>
c001d8ae:	50                   	push   eax
c001d8af:	6a 01                	push   0x1
c001d8b1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8b8:	50                   	push   eax
c001d8b9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8bf:	e8 b6 fb ff ff       	call   c001d47a <IDE::polling(unsigned char, unsigned int)>
c001d8c4:	83 c4 10             	add    esp,0x10
c001d8c7:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d8cd:	84 c0                	test   al,al
c001d8cf:	74 1d                	je     c001d8ee <ATA::access(unsigned long long, int, void*, bool)+0x316>
c001d8d1:	0f b6 f0             	movzx  esi,al
c001d8d4:	56                   	push   esi
c001d8d5:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d8dc:	0f b6 d2             	movzx  edx,dl
c001d8df:	50                   	push   eax
c001d8e0:	52                   	push   edx
c001d8e1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8e7:	e8 f8 f9 ff ff       	call   c001d2e4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d8ec:	eb 7f                	jmp    c001d96d <ATA::access(unsigned long long, int, void*, bool)+0x395>
c001d8ee:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001d8f3:	74 41                	je     c001d936 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c001d8f5:	31 c9                	xor    ecx,ecx
c001d8f7:	66 8b 2c 4f          	mov    bp,WORD PTR [edi+ecx*2]
c001d8fb:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d8ff:	50                   	push   eax
c001d900:	50                   	push   eax
c001d901:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d908:	50                   	push   eax
c001d909:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d90f:	e8 9e ef ff ff       	call   c001c8b2 <IDE::getBase(unsigned char)>
c001d914:	89 c2                	mov    edx,eax
c001d916:	89 e8                	mov    eax,ebp
c001d918:	66 ef                	out    dx,ax
c001d91a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d91e:	83 c4 10             	add    esp,0x10
c001d921:	41                   	inc    ecx
c001d922:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001d928:	75 cd                	jne    c001d8f7 <ATA::access(unsigned long long, int, void*, bool)+0x31f>
c001d92a:	4e                   	dec    esi
c001d92b:	81 c7 00 02 00 00    	add    edi,0x200
c001d931:	e9 70 ff ff ff       	jmp    c001d8a6 <ATA::access(unsigned long long, int, void*, bool)+0x2ce>
c001d936:	51                   	push   ecx
c001d937:	51                   	push   ecx
c001d938:	0f b6 d2             	movzx  edx,dl
c001d93b:	52                   	push   edx
c001d93c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d942:	e8 6b ef ff ff       	call   c001c8b2 <IDE::getBase(unsigned char)>
c001d947:	b9 00 01 00 00       	mov    ecx,0x100
c001d94c:	89 c2                	mov    edx,eax
c001d94e:	fc                   	cld    
c001d94f:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001d952:	83 c4 10             	add    esp,0x10
c001d955:	eb d3                	jmp    c001d92a <ATA::access(unsigned long long, int, void*, bool)+0x352>
c001d957:	31 f6                	xor    esi,esi
c001d959:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c001d95d:	74 11                	je     c001d970 <ATA::access(unsigned long long, int, void*, bool)+0x398>
c001d95f:	50                   	push   eax
c001d960:	50                   	push   eax
c001d961:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d966:	50                   	push   eax
c001d967:	53                   	push   ebx
c001d968:	e8 d1 fb ff ff       	call   c001d53e <ATA::flush(bool)>
c001d96d:	83 c4 10             	add    esp,0x10
c001d970:	83 c4 2c             	add    esp,0x2c
c001d973:	89 f0                	mov    eax,esi
c001d975:	5b                   	pop    ebx
c001d976:	5e                   	pop    esi
c001d977:	5f                   	pop    edi
c001d978:	5d                   	pop    ebp
c001d979:	c3                   	ret    

c001d97a <ATA::read(unsigned long long, int, void*)>:
c001d97a:	57                   	push   edi
c001d97b:	b8 04 00 00 00       	mov    eax,0x4
c001d980:	56                   	push   esi
c001d981:	53                   	push   ebx
c001d982:	83 ec 10             	sub    esp,0x10
c001d985:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d989:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d98d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d991:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d995:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001d998:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001d99e:	77 3b                	ja     c001d9db <ATA::read(unsigned long long, int, void*)+0x61>
c001d9a0:	b8 06 00 00 00       	mov    eax,0x6
c001d9a5:	85 d2                	test   edx,edx
c001d9a7:	74 32                	je     c001d9db <ATA::read(unsigned long long, int, void*)+0x61>
c001d9a9:	50                   	push   eax
c001d9aa:	50                   	push   eax
c001d9ab:	6a 00                	push   0x0
c001d9ad:	52                   	push   edx
c001d9ae:	53                   	push   ebx
c001d9af:	57                   	push   edi
c001d9b0:	56                   	push   esi
c001d9b1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d9b5:	e8 1e fc ff ff       	call   c001d5d8 <ATA::access(unsigned long long, int, void*, bool)>
c001d9ba:	83 c4 20             	add    esp,0x20
c001d9bd:	85 c0                	test   eax,eax
c001d9bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d9c3:	75 11                	jne    c001d9d6 <ATA::read(unsigned long long, int, void*)+0x5c>
c001d9c5:	01 1d 44 65 02 c0    	add    DWORD PTR ds:0xc0026544,ebx
c001d9cb:	e8 18 f6 fe ff       	call   c000cfe8 <VgaText::updateDiskUsage()>
c001d9d0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d9d4:	eb 05                	jmp    c001d9db <ATA::read(unsigned long long, int, void*)+0x61>
c001d9d6:	b8 01 00 00 00       	mov    eax,0x1
c001d9db:	83 c4 10             	add    esp,0x10
c001d9de:	5b                   	pop    ebx
c001d9df:	5e                   	pop    esi
c001d9e0:	5f                   	pop    edi
c001d9e1:	c3                   	ret    

c001d9e2 <ATA::write(unsigned long long, int, void*)>:
c001d9e2:	57                   	push   edi
c001d9e3:	b8 04 00 00 00       	mov    eax,0x4
c001d9e8:	56                   	push   esi
c001d9e9:	53                   	push   ebx
c001d9ea:	83 ec 10             	sub    esp,0x10
c001d9ed:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d9f1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001d9f5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001d9f9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d9fd:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001da00:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c001da06:	77 3b                	ja     c001da43 <ATA::write(unsigned long long, int, void*)+0x61>
c001da08:	b8 06 00 00 00       	mov    eax,0x6
c001da0d:	85 d2                	test   edx,edx
c001da0f:	74 32                	je     c001da43 <ATA::write(unsigned long long, int, void*)+0x61>
c001da11:	50                   	push   eax
c001da12:	50                   	push   eax
c001da13:	6a 01                	push   0x1
c001da15:	52                   	push   edx
c001da16:	53                   	push   ebx
c001da17:	57                   	push   edi
c001da18:	56                   	push   esi
c001da19:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001da1d:	e8 b6 fb ff ff       	call   c001d5d8 <ATA::access(unsigned long long, int, void*, bool)>
c001da22:	83 c4 20             	add    esp,0x20
c001da25:	85 c0                	test   eax,eax
c001da27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001da2b:	75 11                	jne    c001da3e <ATA::write(unsigned long long, int, void*)+0x5c>
c001da2d:	01 1d 40 65 02 c0    	add    DWORD PTR ds:0xc0026540,ebx
c001da33:	e8 b0 f5 fe ff       	call   c000cfe8 <VgaText::updateDiskUsage()>
c001da38:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001da3c:	eb 05                	jmp    c001da43 <ATA::write(unsigned long long, int, void*)+0x61>
c001da3e:	b8 01 00 00 00       	mov    eax,0x1
c001da43:	83 c4 10             	add    esp,0x10
c001da46:	5b                   	pop    ebx
c001da47:	5e                   	pop    esi
c001da48:	5f                   	pop    edi
c001da49:	c3                   	ret    

c001da4a <ATA::detectCHS()>:
c001da4a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001da4e:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001da54:	c1 e0 06             	shl    eax,0x6
c001da57:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001da5d:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001da67:	c7 44 24 04 c3 37 02 c0 	mov    DWORD PTR [esp+0x4],0xc00237c3
c001da6f:	e9 cc 7f ff ff       	jmp    c0015a40 <Krnl::panic(char const*)>

c001da74 <ATA::open(int, int, void*)>:
c001da74:	53                   	push   ebx
c001da75:	83 ec 08             	sub    esp,0x8
c001da78:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da7c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001da80:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001da84:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001da8a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001da90:	c1 e0 06             	shl    eax,0x6
c001da93:	01 d0                	add    eax,edx
c001da95:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001da9c:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001daa2:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001daa9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dab3:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001dab9:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001dac0:	75 0c                	jne    c001dace <ATA::open(int, int, void*)+0x5a>
c001dac2:	83 ec 0c             	sub    esp,0xc
c001dac5:	53                   	push   ebx
c001dac6:	e8 7f ff ff ff       	call   c001da4a <ATA::detectCHS()>
c001dacb:	83 c4 10             	add    esp,0x10
c001dace:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001dad4:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dada:	c1 e0 06             	shl    eax,0x6
c001dadd:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001dae4:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001daee:	d1 e8                	shr    eax,1
c001daf0:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001daf6:	6a 04                	push   0x4
c001daf8:	6a 0c                	push   0xc
c001dafa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db01:	50                   	push   eax
c001db02:	52                   	push   edx
c001db03:	e8 bc ed ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db08:	90                   	nop
c001db09:	90                   	nop
c001db0a:	6a 00                	push   0x0
c001db0c:	6a 0c                	push   0xc
c001db0e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001db15:	50                   	push   eax
c001db16:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001db1c:	e8 a3 ed ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001db21:	83 c4 14             	add    esp,0x14
c001db24:	53                   	push   ebx
c001db25:	e8 6a 2f ff ff       	call   c0010a94 <PhysicalDisk::startCache()>
c001db2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db2d:	e8 3e 4f ff ff       	call   c0012a70 <createPartitionsForDisk(PhysicalDisk*)>
c001db32:	83 c4 18             	add    esp,0x18
c001db35:	31 c0                	xor    eax,eax
c001db37:	5b                   	pop    ebx
c001db38:	c3                   	ret    
c001db39:	90                   	nop

c001db3a <ATAPI::write(unsigned long long, int, void*)>:
c001db3a:	b8 03 00 00 00       	mov    eax,0x3
c001db3f:	c3                   	ret    

c001db40 <ATAPI::close(int, int, void*)>:
c001db40:	83 ec 0c             	sub    esp,0xc
c001db43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db47:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001db4d:	85 c0                	test   eax,eax
c001db4f:	74 0c                	je     c001db5d <ATAPI::close(int, int, void*)+0x1d>
c001db51:	83 ec 0c             	sub    esp,0xc
c001db54:	8b 10                	mov    edx,DWORD PTR [eax]
c001db56:	50                   	push   eax
c001db57:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001db5a:	83 c4 10             	add    esp,0x10
c001db5d:	31 c0                	xor    eax,eax
c001db5f:	83 c4 0c             	add    esp,0xc
c001db62:	c3                   	ret    
c001db63:	90                   	nop

c001db64 <ATAPI::ATAPI()>:
c001db64:	83 ec 0c             	sub    esp,0xc
c001db67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db6b:	83 ec 04             	sub    esp,0x4
c001db6e:	68 00 08 00 00       	push   0x800
c001db73:	68 0c 38 02 c0       	push   0xc002380c
c001db78:	50                   	push   eax
c001db79:	e8 ae 2e ff ff       	call   c0010a2c <PhysicalDisk::PhysicalDisk(char const*, int)>
c001db7e:	83 c4 10             	add    esp,0x10
c001db81:	ba 4c 38 02 c0       	mov    edx,0xc002384c
c001db86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001db8a:	89 10                	mov    DWORD PTR [eax],edx
c001db8c:	90                   	nop
c001db8d:	83 c4 0c             	add    esp,0xc
c001db90:	c3                   	ret    
c001db91:	90                   	nop

c001db92 <ATAPI::readyForCommand()>:
c001db92:	56                   	push   esi
c001db93:	53                   	push   ebx
c001db94:	31 db                	xor    ebx,ebx
c001db96:	50                   	push   eax
c001db97:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001db9b:	50                   	push   eax
c001db9c:	6a 0c                	push   0xc
c001db9e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001dba5:	50                   	push   eax
c001dba6:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001dbac:	e8 d3 ed ff ff       	call   c001c984 <IDE::read(unsigned char, unsigned char)>
c001dbb1:	83 c4 10             	add    esp,0x10
c001dbb4:	a8 88                	test   al,0x88
c001dbb6:	74 23                	je     c001dbdb <ATAPI::readyForCommand()+0x49>
c001dbb8:	43                   	inc    ebx
c001dbb9:	83 fb 63             	cmp    ebx,0x63
c001dbbc:	7e dd                	jle    c001db9b <ATAPI::readyForCommand()+0x9>
c001dbbe:	51                   	push   ecx
c001dbbf:	51                   	push   ecx
c001dbc0:	6a 00                	push   0x0
c001dbc2:	68 40 42 0f 00       	push   0xf4240
c001dbc7:	e8 db b3 ff ff       	call   c0018fa7 <nanoSleep(unsigned long long)>
c001dbcc:	83 c4 10             	add    esp,0x10
c001dbcf:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001dbd5:	75 c4                	jne    c001db9b <ATAPI::readyForCommand()+0x9>
c001dbd7:	31 c0                	xor    eax,eax
c001dbd9:	eb 02                	jmp    c001dbdd <ATAPI::readyForCommand()+0x4b>
c001dbdb:	b0 01                	mov    al,0x1
c001dbdd:	5a                   	pop    edx
c001dbde:	5b                   	pop    ebx
c001dbdf:	5e                   	pop    esi
c001dbe0:	c3                   	ret    
c001dbe1:	90                   	nop

c001dbe2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001dbe2:	55                   	push   ebp
c001dbe3:	57                   	push   edi
c001dbe4:	56                   	push   esi
c001dbe5:	53                   	push   ebx
c001dbe6:	83 ec 20             	sub    esp,0x20
c001dbe9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001dbed:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001dbf1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dbf5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001dbf9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001dbfd:	6a 01                	push   0x1
c001dbff:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc06:	50                   	push   eax
c001dc07:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc0d:	e8 c4 ee ff ff       	call   c001cad6 <IDE::enableIRQs(unsigned char, bool)>
c001dc12:	5e                   	pop    esi
c001dc13:	58                   	pop    eax
c001dc14:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc1b:	50                   	push   eax
c001dc1c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc22:	e8 77 ec ff ff       	call   c001c89e <IDE::prepareInterrupt(unsigned char)>
c001dc27:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dc2a:	e8 63 ff ff ff       	call   c001db92 <ATAPI::readyForCommand()>
c001dc2f:	83 c4 10             	add    esp,0x10
c001dc32:	84 c0                	test   al,al
c001dc34:	75 0a                	jne    c001dc40 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001dc36:	bb 01 00 00 00       	mov    ebx,0x1
c001dc3b:	e9 57 02 00 00       	jmp    c001de97 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dc40:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001dc46:	c1 e0 04             	shl    eax,0x4
c001dc49:	0f b6 c0             	movzx  eax,al
c001dc4c:	50                   	push   eax
c001dc4d:	6a 06                	push   0x6
c001dc4f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc56:	50                   	push   eax
c001dc57:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc5d:	e8 62 ec ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc62:	6a 00                	push   0x0
c001dc64:	6a 01                	push   0x1
c001dc66:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc6d:	50                   	push   eax
c001dc6e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc74:	e8 4b ec ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc79:	83 c4 20             	add    esp,0x20
c001dc7c:	0f b6 c3             	movzx  eax,bl
c001dc7f:	50                   	push   eax
c001dc80:	6a 04                	push   0x4
c001dc82:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dc89:	50                   	push   eax
c001dc8a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dc90:	0f b6 df             	movzx  ebx,bh
c001dc93:	e8 2c ec ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc98:	53                   	push   ebx
c001dc99:	6a 05                	push   0x5
c001dc9b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dca2:	50                   	push   eax
c001dca3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dca9:	e8 16 ec ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcae:	83 c4 20             	add    esp,0x20
c001dcb1:	68 a0 00 00 00       	push   0xa0
c001dcb6:	6a 07                	push   0x7
c001dcb8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dcbf:	50                   	push   eax
c001dcc0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dcc6:	e8 f9 eb ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dccb:	83 c4 0c             	add    esp,0xc
c001dcce:	6a 01                	push   0x1
c001dcd0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dcd7:	50                   	push   eax
c001dcd8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dcde:	e8 97 f7 ff ff       	call   c001d47a <IDE::polling(unsigned char, unsigned int)>
c001dce3:	83 c4 10             	add    esp,0x10
c001dce6:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001dcec:	84 c0                	test   al,al
c001dcee:	74 23                	je     c001dd13 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001dcf0:	0f b6 d8             	movzx  ebx,al
c001dcf3:	53                   	push   ebx
c001dcf4:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001dcfb:	0f b6 d2             	movzx  edx,dl
c001dcfe:	50                   	push   eax
c001dcff:	52                   	push   edx
c001dd00:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd06:	e8 d9 f5 ff ff       	call   c001d2e4 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001dd0b:	83 c4 10             	add    esp,0x10
c001dd0e:	e9 84 01 00 00       	jmp    c001de97 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001dd13:	53                   	push   ebx
c001dd14:	53                   	push   ebx
c001dd15:	0f b6 d2             	movzx  edx,dl
c001dd18:	52                   	push   edx
c001dd19:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd1f:	e8 8e eb ff ff       	call   c001c8b2 <IDE::getBase(unsigned char)>
c001dd24:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001dd28:	b9 06 00 00 00       	mov    ecx,0x6
c001dd2d:	89 c2                	mov    edx,eax
c001dd2f:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001dd32:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001dd36:	83 c4 10             	add    esp,0x10
c001dd39:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001dd3f:	85 db                	test   ebx,ebx
c001dd41:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001dd48:	0f 84 ec 00 00 00    	je     c001de3a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001dd4e:	51                   	push   ecx
c001dd4f:	51                   	push   ecx
c001dd50:	52                   	push   edx
c001dd51:	50                   	push   eax
c001dd52:	e8 db ec ff ff       	call   c001ca32 <IDE::waitInterrupt(unsigned char)>
c001dd57:	83 c4 10             	add    esp,0x10
c001dd5a:	84 c0                	test   al,al
c001dd5c:	0f 84 d4 fe ff ff    	je     c001dc36 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001dd62:	56                   	push   esi
c001dd63:	56                   	push   esi
c001dd64:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd6b:	50                   	push   eax
c001dd6c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd72:	e8 27 eb ff ff       	call   c001c89e <IDE::prepareInterrupt(unsigned char)>
c001dd77:	83 c4 0c             	add    esp,0xc
c001dd7a:	6a 04                	push   0x4
c001dd7c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd83:	50                   	push   eax
c001dd84:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd8a:	e8 f5 eb ff ff       	call   c001c984 <IDE::read(unsigned char, unsigned char)>
c001dd8f:	83 c4 0c             	add    esp,0xc
c001dd92:	6a 05                	push   0x5
c001dd94:	89 c6                	mov    esi,eax
c001dd96:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd9d:	50                   	push   eax
c001dd9e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dda4:	e8 db eb ff ff       	call   c001c984 <IDE::read(unsigned char, unsigned char)>
c001dda9:	89 f1                	mov    ecx,esi
c001ddab:	0f b6 c0             	movzx  eax,al
c001ddae:	c1 e0 08             	shl    eax,0x8
c001ddb1:	0f b6 f1             	movzx  esi,cl
c001ddb4:	09 c6                	or     esi,eax
c001ddb6:	d1 fe                	sar    esi,1
c001ddb8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001ddbc:	83 c4 10             	add    esp,0x10
c001ddbf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001ddc4:	74 41                	je     c001de07 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001ddc6:	31 c9                	xor    ecx,ecx
c001ddc8:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001ddce:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001ddd2:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001ddd9:	75 0a                	jne    c001dde5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001dddb:	01 c9                	add    ecx,ecx
c001dddd:	01 cd                	add    ebp,ecx
c001dddf:	4b                   	dec    ebx
c001dde0:	e9 54 ff ff ff       	jmp    c001dd39 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001dde5:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001ddea:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ddee:	51                   	push   ecx
c001ddef:	51                   	push   ecx
c001ddf0:	52                   	push   edx
c001ddf1:	50                   	push   eax
c001ddf2:	e8 bb ea ff ff       	call   c001c8b2 <IDE::getBase(unsigned char)>
c001ddf7:	89 c2                	mov    edx,eax
c001ddf9:	89 f0                	mov    eax,esi
c001ddfb:	66 ef                	out    dx,ax
c001ddfd:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001de01:	83 c4 10             	add    esp,0x10
c001de04:	41                   	inc    ecx
c001de05:	eb c1                	jmp    c001ddc8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001de07:	31 f6                	xor    esi,esi
c001de09:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001de0f:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001de13:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001de1a:	75 06                	jne    c001de22 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001de1c:	01 f6                	add    esi,esi
c001de1e:	01 f5                	add    ebp,esi
c001de20:	eb bd                	jmp    c001dddf <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001de22:	51                   	push   ecx
c001de23:	51                   	push   ecx
c001de24:	52                   	push   edx
c001de25:	50                   	push   eax
c001de26:	e8 87 ea ff ff       	call   c001c8b2 <IDE::getBase(unsigned char)>
c001de2b:	89 c2                	mov    edx,eax
c001de2d:	66 ed                	in     ax,dx
c001de2f:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001de34:	83 c4 10             	add    esp,0x10
c001de37:	46                   	inc    esi
c001de38:	eb cf                	jmp    c001de09 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001de3a:	51                   	push   ecx
c001de3b:	51                   	push   ecx
c001de3c:	52                   	push   edx
c001de3d:	50                   	push   eax
c001de3e:	e8 ef eb ff ff       	call   c001ca32 <IDE::waitInterrupt(unsigned char)>
c001de43:	83 c4 10             	add    esp,0x10
c001de46:	84 c0                	test   al,al
c001de48:	0f 84 e8 fd ff ff    	je     c001dc36 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001de4e:	52                   	push   edx
c001de4f:	bb a0 86 01 00       	mov    ebx,0x186a0
c001de54:	52                   	push   edx
c001de55:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de5c:	50                   	push   eax
c001de5d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de63:	e8 36 ea ff ff       	call   c001c89e <IDE::prepareInterrupt(unsigned char)>
c001de68:	83 c4 10             	add    esp,0x10
c001de6b:	50                   	push   eax
c001de6c:	50                   	push   eax
c001de6d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de74:	50                   	push   eax
c001de75:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de7b:	e8 32 ea ff ff       	call   c001c8b2 <IDE::getBase(unsigned char)>
c001de80:	8d 50 07             	lea    edx,[eax+0x7]
c001de83:	ec                   	in     al,dx
c001de84:	83 c4 10             	add    esp,0x10
c001de87:	a8 88                	test   al,0x88
c001de89:	74 0a                	je     c001de95 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001de8b:	4b                   	dec    ebx
c001de8c:	75 dd                	jne    c001de6b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001de8e:	bb 02 00 00 00       	mov    ebx,0x2
c001de93:	eb 02                	jmp    c001de97 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001de95:	31 db                	xor    ebx,ebx
c001de97:	83 c4 1c             	add    esp,0x1c
c001de9a:	89 d8                	mov    eax,ebx
c001de9c:	5b                   	pop    ebx
c001de9d:	5e                   	pop    esi
c001de9e:	5f                   	pop    edi
c001de9f:	5d                   	pop    ebp
c001dea0:	c3                   	ret    
c001dea1:	90                   	nop

c001dea2 <ATAPI::diskRemoved()>:
c001dea2:	83 ec 18             	sub    esp,0x18
c001dea5:	68 17 38 02 c0       	push   0xc0023817
c001deaa:	e8 62 13 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001deaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001deb3:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c001deba:	83 c4 1c             	add    esp,0x1c
c001debd:	c3                   	ret    

c001debe <ATAPI::eject()>:
c001debe:	57                   	push   edi
c001debf:	b9 03 00 00 00       	mov    ecx,0x3
c001dec4:	53                   	push   ebx
c001dec5:	83 ec 14             	sub    esp,0x14
c001dec8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001decc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ded0:	fc                   	cld    
c001ded1:	31 c0                	xor    eax,eax
c001ded3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ded5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001deda:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001dedf:	50                   	push   eax
c001dee0:	50                   	push   eax
c001dee1:	6a 00                	push   0x0
c001dee3:	6a 00                	push   0x0
c001dee5:	6a 00                	push   0x0
c001dee7:	6a 02                	push   0x2
c001dee9:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001deed:	50                   	push   eax
c001deee:	53                   	push   ebx
c001deef:	e8 ee fc ff ff       	call   c001dbe2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001def4:	83 c4 14             	add    esp,0x14
c001def7:	53                   	push   ebx
c001def8:	e8 a5 ff ff ff       	call   c001dea2 <ATAPI::diskRemoved()>
c001defd:	83 c4 24             	add    esp,0x24
c001df00:	5b                   	pop    ebx
c001df01:	5f                   	pop    edi
c001df02:	c3                   	ret    
c001df03:	90                   	nop

c001df04 <ATAPI::diskInserted()>:
c001df04:	53                   	push   ebx
c001df05:	83 ec 14             	sub    esp,0x14
c001df08:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001df0c:	68 2d 38 02 c0       	push   0xc002382d
c001df11:	e8 fb 12 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001df16:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c001df1d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001df20:	e8 6f 2b ff ff       	call   c0010a94 <PhysicalDisk::startCache()>
c001df25:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001df29:	83 c4 18             	add    esp,0x18
c001df2c:	5b                   	pop    ebx
c001df2d:	e9 3e 4b ff ff       	jmp    c0012a70 <createPartitionsForDisk(PhysicalDisk*)>

c001df32 <ATAPI::detectMedia()>:
c001df32:	56                   	push   esi
c001df33:	53                   	push   ebx
c001df34:	83 ec 28             	sub    esp,0x28
c001df37:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001df3b:	6a 0c                	push   0xc
c001df3d:	6a 00                	push   0x0
c001df3f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001df43:	56                   	push   esi
c001df44:	e8 78 27 fe ff       	call   c00006c1 <memset>
c001df49:	58                   	pop    eax
c001df4a:	5a                   	pop    edx
c001df4b:	6a 00                	push   0x0
c001df4d:	6a 00                	push   0x0
c001df4f:	6a 00                	push   0x0
c001df51:	6a 00                	push   0x0
c001df53:	56                   	push   esi
c001df54:	53                   	push   ebx
c001df55:	e8 88 fc ff ff       	call   c001dbe2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001df5a:	83 c4 1c             	add    esp,0x1c
c001df5d:	6a 0c                	push   0xc
c001df5f:	6a 00                	push   0x0
c001df61:	56                   	push   esi
c001df62:	e8 5a 27 fe ff       	call   c00006c1 <memset>
c001df67:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001df6c:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001df71:	59                   	pop    ecx
c001df72:	58                   	pop    eax
c001df73:	6a 01                	push   0x1
c001df75:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001df79:	50                   	push   eax
c001df7a:	6a 00                	push   0x0
c001df7c:	6a 12                	push   0x12
c001df7e:	56                   	push   esi
c001df7f:	53                   	push   ebx
c001df80:	e8 5d fc ff ff       	call   c001dbe2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001df85:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001df89:	83 c4 20             	add    esp,0x20
c001df8c:	83 e0 7f             	and    eax,0x7f
c001df8f:	3c 70                	cmp    al,0x70
c001df91:	74 15                	je     c001dfa8 <ATAPI::detectMedia()+0x76>
c001df93:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001df9a:	75 0c                	jne    c001dfa8 <ATAPI::detectMedia()+0x76>
c001df9c:	83 ec 0c             	sub    esp,0xc
c001df9f:	53                   	push   ebx
c001dfa0:	e8 5f ff ff ff       	call   c001df04 <ATAPI::diskInserted()>
c001dfa5:	83 c4 10             	add    esp,0x10
c001dfa8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001dfac:	83 e0 0f             	and    eax,0xf
c001dfaf:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001dfb4:	75 18                	jne    c001dfce <ATAPI::detectMedia()+0x9c>
c001dfb6:	3c 02                	cmp    al,0x2
c001dfb8:	75 14                	jne    c001dfce <ATAPI::detectMedia()+0x9c>
c001dfba:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dfc1:	74 24                	je     c001dfe7 <ATAPI::detectMedia()+0xb5>
c001dfc3:	83 ec 0c             	sub    esp,0xc
c001dfc6:	53                   	push   ebx
c001dfc7:	e8 d6 fe ff ff       	call   c001dea2 <ATAPI::diskRemoved()>
c001dfcc:	eb 16                	jmp    c001dfe4 <ATAPI::detectMedia()+0xb2>
c001dfce:	84 c0                	test   al,al
c001dfd0:	75 15                	jne    c001dfe7 <ATAPI::detectMedia()+0xb5>
c001dfd2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001dfd9:	75 0c                	jne    c001dfe7 <ATAPI::detectMedia()+0xb5>
c001dfdb:	83 ec 0c             	sub    esp,0xc
c001dfde:	53                   	push   ebx
c001dfdf:	e8 20 ff ff ff       	call   c001df04 <ATAPI::diskInserted()>
c001dfe4:	83 c4 10             	add    esp,0x10
c001dfe7:	83 c4 24             	add    esp,0x24
c001dfea:	5b                   	pop    ebx
c001dfeb:	5e                   	pop    esi
c001dfec:	c3                   	ret    
c001dfed:	90                   	nop

c001dfee <ATAPI::open(int, int, void*)>:
c001dfee:	53                   	push   ebx
c001dfef:	83 ec 08             	sub    esp,0x8
c001dff2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dff6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dffa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dffe:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e004:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001e00a:	c1 e0 06             	shl    eax,0x6
c001e00d:	01 d0                	add    eax,edx
c001e00f:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001e016:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001e01c:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001e023:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e02d:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e033:	6a 04                	push   0x4
c001e035:	6a 0c                	push   0xc
c001e037:	51                   	push   ecx
c001e038:	52                   	push   edx
c001e039:	e8 86 e8 ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e03e:	90                   	nop
c001e03f:	90                   	nop
c001e040:	6a 00                	push   0x0
c001e042:	6a 0c                	push   0xc
c001e044:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e04b:	50                   	push   eax
c001e04c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e052:	e8 6d e8 ff ff       	call   c001c8c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e057:	83 c4 14             	add    esp,0x14
c001e05a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e061:	53                   	push   ebx
c001e062:	e8 cb fe ff ff       	call   c001df32 <ATAPI::detectMedia()>
c001e067:	83 c4 18             	add    esp,0x18
c001e06a:	31 c0                	xor    eax,eax
c001e06c:	5b                   	pop    ebx
c001e06d:	c3                   	ret    

c001e06e <ATAPI::read(unsigned long long, int, void*)>:
c001e06e:	55                   	push   ebp
c001e06f:	57                   	push   edi
c001e070:	56                   	push   esi
c001e071:	53                   	push   ebx
c001e072:	83 ec 1c             	sub    esp,0x1c
c001e075:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e079:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e07d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e081:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e088:	74 3c                	je     c001e0c6 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001e08a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e08e:	b9 03 00 00 00       	mov    ecx,0x3
c001e093:	fc                   	cld    
c001e094:	31 c0                	xor    eax,eax
c001e096:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e098:	0f ce                	bswap  esi
c001e09a:	89 e8                	mov    eax,ebp
c001e09c:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001e0a1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e0a5:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001e0a9:	50                   	push   eax
c001e0aa:	50                   	push   eax
c001e0ab:	55                   	push   ebp
c001e0ac:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e0b0:	c1 e5 0b             	shl    ebp,0xb
c001e0b3:	6a 00                	push   0x0
c001e0b5:	55                   	push   ebp
c001e0b6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e0ba:	50                   	push   eax
c001e0bb:	53                   	push   ebx
c001e0bc:	e8 21 fb ff ff       	call   c001dbe2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e0c1:	83 c4 20             	add    esp,0x20
c001e0c4:	eb 1a                	jmp    c001e0e0 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001e0c6:	83 ec 0c             	sub    esp,0xc
c001e0c9:	53                   	push   ebx
c001e0ca:	e8 63 fe ff ff       	call   c001df32 <ATAPI::detectMedia()>
c001e0cf:	83 c4 10             	add    esp,0x10
c001e0d2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e0d9:	75 af                	jne    c001e08a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001e0db:	b8 02 00 00 00       	mov    eax,0x2
c001e0e0:	83 c4 1c             	add    esp,0x1c
c001e0e3:	5b                   	pop    ebx
c001e0e4:	5e                   	pop    esi
c001e0e5:	5f                   	pop    edi
c001e0e6:	5d                   	pop    ebp
c001e0e7:	c3                   	ret    

c001e0e8 <AVX::open(int, int, void*)>:
c001e0e8:	83 ec 0c             	sub    esp,0xc
c001e0eb:	e8 98 10 00 00       	call   c001f188 <avxInit>
c001e0f0:	b8 00 00 00 00       	mov    eax,0x0
c001e0f5:	83 c4 0c             	add    esp,0xc
c001e0f8:	c3                   	ret    
c001e0f9:	90                   	nop

c001e0fa <AVX::close(int, int, void*)>:
c001e0fa:	83 ec 0c             	sub    esp,0xc
c001e0fd:	e8 87 10 00 00       	call   c001f189 <avxClose>
c001e102:	b8 00 00 00 00       	mov    eax,0x0
c001e107:	83 c4 0c             	add    esp,0xc
c001e10a:	c3                   	ret    
c001e10b:	90                   	nop

c001e10c <AVX::available()>:
c001e10c:	83 ec 0c             	sub    esp,0xc
c001e10f:	e8 6c 10 00 00       	call   c001f180 <avxDetect>
c001e114:	85 c0                	test   eax,eax
c001e116:	0f 95 c0             	setne  al
c001e119:	83 c4 0c             	add    esp,0xc
c001e11c:	c3                   	ret    
c001e11d:	90                   	nop

c001e11e <AVX::save(void*)>:
c001e11e:	83 ec 0c             	sub    esp,0xc
c001e121:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e125:	83 ec 0c             	sub    esp,0xc
c001e128:	50                   	push   eax
c001e129:	e8 58 10 00 00       	call   c001f186 <avxSave>
c001e12e:	83 c4 10             	add    esp,0x10
c001e131:	90                   	nop
c001e132:	83 c4 0c             	add    esp,0xc
c001e135:	c3                   	ret    

c001e136 <AVX::load(void*)>:
c001e136:	83 ec 0c             	sub    esp,0xc
c001e139:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e13d:	83 ec 0c             	sub    esp,0xc
c001e140:	50                   	push   eax
c001e141:	e8 41 10 00 00       	call   c001f187 <avxLoad>
c001e146:	83 c4 10             	add    esp,0x10
c001e149:	90                   	nop
c001e14a:	83 c4 0c             	add    esp,0xc
c001e14d:	c3                   	ret    

c001e14e <AVX::AVX()>:
c001e14e:	83 ec 0c             	sub    esp,0xc
c001e151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e155:	83 ec 08             	sub    esp,0x8
c001e158:	68 78 38 02 c0       	push   0xc0023878
c001e15d:	50                   	push   eax
c001e15e:	e8 a7 29 ff ff       	call   c0010b0a <FPU::FPU(char const*)>
c001e163:	83 c4 10             	add    esp,0x10
c001e166:	ba 88 38 02 c0       	mov    edx,0xc0023888
c001e16b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e16f:	89 10                	mov    DWORD PTR [eax],edx
c001e171:	90                   	nop
c001e172:	83 c4 0c             	add    esp,0xc
c001e175:	c3                   	ret    

c001e176 <MMX::available()>:
c001e176:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001e17b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e181:	83 e0 20             	and    eax,0x20
c001e184:	84 c0                	test   al,al
c001e186:	0f 95 c0             	setne  al
c001e189:	c3                   	ret    

c001e18a <MMX::open(int, int, void*)>:
c001e18a:	83 ec 0c             	sub    esp,0xc
c001e18d:	e8 6a 10 00 00       	call   c001f1fc <x87Init>
c001e192:	b8 00 00 00 00       	mov    eax,0x0
c001e197:	83 c4 0c             	add    esp,0xc
c001e19a:	c3                   	ret    
c001e19b:	90                   	nop

c001e19c <MMX::close(int, int, void*)>:
c001e19c:	83 ec 0c             	sub    esp,0xc
c001e19f:	e8 72 10 00 00       	call   c001f216 <x87Close>
c001e1a4:	b8 00 00 00 00       	mov    eax,0x0
c001e1a9:	83 c4 0c             	add    esp,0xc
c001e1ac:	c3                   	ret    
c001e1ad:	90                   	nop

c001e1ae <MMX::save(void*)>:
c001e1ae:	83 ec 0c             	sub    esp,0xc
c001e1b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1b5:	83 ec 0c             	sub    esp,0xc
c001e1b8:	50                   	push   eax
c001e1b9:	e8 33 10 00 00       	call   c001f1f1 <x87Save>
c001e1be:	83 c4 10             	add    esp,0x10
c001e1c1:	90                   	nop
c001e1c2:	83 c4 0c             	add    esp,0xc
c001e1c5:	c3                   	ret    

c001e1c6 <MMX::load(void*)>:
c001e1c6:	83 ec 0c             	sub    esp,0xc
c001e1c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1cd:	83 ec 0c             	sub    esp,0xc
c001e1d0:	50                   	push   eax
c001e1d1:	e8 21 10 00 00       	call   c001f1f7 <x87Load>
c001e1d6:	83 c4 10             	add    esp,0x10
c001e1d9:	90                   	nop
c001e1da:	83 c4 0c             	add    esp,0xc
c001e1dd:	c3                   	ret    

c001e1de <MMX::MMX()>:
c001e1de:	83 ec 0c             	sub    esp,0xc
c001e1e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1e5:	83 ec 08             	sub    esp,0x8
c001e1e8:	68 b8 38 02 c0       	push   0xc00238b8
c001e1ed:	50                   	push   eax
c001e1ee:	e8 17 29 ff ff       	call   c0010b0a <FPU::FPU(char const*)>
c001e1f3:	83 c4 10             	add    esp,0x10
c001e1f6:	ba c8 38 02 c0       	mov    edx,0xc00238c8
c001e1fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e1ff:	89 10                	mov    DWORD PTR [eax],edx
c001e201:	90                   	nop
c001e202:	83 c4 0c             	add    esp,0xc
c001e205:	c3                   	ret    

c001e206 <SSE::open(int, int, void*)>:
c001e206:	83 ec 0c             	sub    esp,0xc
c001e209:	e8 a9 0f 00 00       	call   c001f1b7 <sseInit>
c001e20e:	b8 00 00 00 00       	mov    eax,0x0
c001e213:	83 c4 0c             	add    esp,0xc
c001e216:	c3                   	ret    
c001e217:	90                   	nop

c001e218 <SSE::close(int, int, void*)>:
c001e218:	83 ec 0c             	sub    esp,0xc
c001e21b:	e8 a7 0f 00 00       	call   c001f1c7 <sseClose>
c001e220:	b8 00 00 00 00       	mov    eax,0x0
c001e225:	83 c4 0c             	add    esp,0xc
c001e228:	c3                   	ret    
c001e229:	90                   	nop

c001e22a <SSE::available()>:
c001e22a:	83 ec 1c             	sub    esp,0x1c
c001e22d:	e8 5e 0f 00 00       	call   c001f190 <sseDetect>
c001e232:	85 c0                	test   eax,eax
c001e234:	0f 95 c0             	setne  al
c001e237:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e23b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e23f:	83 c4 1c             	add    esp,0x1c
c001e242:	c3                   	ret    
c001e243:	90                   	nop

c001e244 <SSE::save(void*)>:
c001e244:	83 ec 0c             	sub    esp,0xc
c001e247:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e24b:	83 ec 0c             	sub    esp,0xc
c001e24e:	50                   	push   eax
c001e24f:	e8 57 0f 00 00       	call   c001f1ab <sseSave>
c001e254:	83 c4 10             	add    esp,0x10
c001e257:	90                   	nop
c001e258:	83 c4 0c             	add    esp,0xc
c001e25b:	c3                   	ret    

c001e25c <SSE::load(void*)>:
c001e25c:	83 ec 0c             	sub    esp,0xc
c001e25f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e263:	83 ec 0c             	sub    esp,0xc
c001e266:	50                   	push   eax
c001e267:	e8 45 0f 00 00       	call   c001f1b1 <sseLoad>
c001e26c:	83 c4 10             	add    esp,0x10
c001e26f:	90                   	nop
c001e270:	83 c4 0c             	add    esp,0xc
c001e273:	c3                   	ret    

c001e274 <SSE::SSE()>:
c001e274:	83 ec 0c             	sub    esp,0xc
c001e277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e27b:	83 ec 08             	sub    esp,0x8
c001e27e:	68 f8 38 02 c0       	push   0xc00238f8
c001e283:	50                   	push   eax
c001e284:	e8 81 28 ff ff       	call   c0010b0a <FPU::FPU(char const*)>
c001e289:	83 c4 10             	add    esp,0x10
c001e28c:	ba 08 39 02 c0       	mov    edx,0xc0023908
c001e291:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e295:	89 10                	mov    DWORD PTR [eax],edx
c001e297:	90                   	nop
c001e298:	83 c4 0c             	add    esp,0xc
c001e29b:	c3                   	ret    

c001e29c <x87::open(int, int, void*)>:
c001e29c:	83 ec 0c             	sub    esp,0xc
c001e29f:	e8 58 0f 00 00       	call   c001f1fc <x87Init>
c001e2a4:	b8 00 00 00 00       	mov    eax,0x0
c001e2a9:	83 c4 0c             	add    esp,0xc
c001e2ac:	c3                   	ret    
c001e2ad:	90                   	nop

c001e2ae <x87::close(int, int, void*)>:
c001e2ae:	83 ec 0c             	sub    esp,0xc
c001e2b1:	e8 60 0f 00 00       	call   c001f216 <x87Close>
c001e2b6:	b8 00 00 00 00       	mov    eax,0x0
c001e2bb:	83 c4 0c             	add    esp,0xc
c001e2be:	c3                   	ret    
c001e2bf:	90                   	nop

c001e2c0 <x87::available()>:
c001e2c0:	83 ec 0c             	sub    esp,0xc
c001e2c3:	e8 0e 0f 00 00       	call   c001f1d6 <x87Detect>
c001e2c8:	85 c0                	test   eax,eax
c001e2ca:	0f 95 c0             	setne  al
c001e2cd:	83 c4 0c             	add    esp,0xc
c001e2d0:	c3                   	ret    
c001e2d1:	90                   	nop

c001e2d2 <x87::save(void*)>:
c001e2d2:	83 ec 0c             	sub    esp,0xc
c001e2d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2d9:	83 ec 0c             	sub    esp,0xc
c001e2dc:	50                   	push   eax
c001e2dd:	e8 0f 0f 00 00       	call   c001f1f1 <x87Save>
c001e2e2:	83 c4 10             	add    esp,0x10
c001e2e5:	90                   	nop
c001e2e6:	83 c4 0c             	add    esp,0xc
c001e2e9:	c3                   	ret    

c001e2ea <x87::load(void*)>:
c001e2ea:	83 ec 0c             	sub    esp,0xc
c001e2ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e2f1:	83 ec 0c             	sub    esp,0xc
c001e2f4:	50                   	push   eax
c001e2f5:	e8 fd 0e 00 00       	call   c001f1f7 <x87Load>
c001e2fa:	83 c4 10             	add    esp,0x10
c001e2fd:	90                   	nop
c001e2fe:	83 c4 0c             	add    esp,0xc
c001e301:	c3                   	ret    

c001e302 <x87::x87()>:
c001e302:	83 ec 0c             	sub    esp,0xc
c001e305:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e309:	83 ec 08             	sub    esp,0x8
c001e30c:	68 38 39 02 c0       	push   0xc0023938
c001e311:	50                   	push   eax
c001e312:	e8 f3 27 ff ff       	call   c0010b0a <FPU::FPU(char const*)>
c001e317:	83 c4 10             	add    esp,0x10
c001e31a:	ba 48 39 02 c0       	mov    edx,0xc0023948
c001e31f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e323:	89 10                	mov    DWORD PTR [eax],edx
c001e325:	90                   	nop
c001e326:	83 c4 0c             	add    esp,0xc
c001e329:	c3                   	ret    

c001e32a <APIC::disable()>:
c001e32a:	90                   	nop
c001e32b:	c3                   	ret    

c001e32c <APIC::close(int, int, void*)>:
c001e32c:	55                   	push   ebp
c001e32d:	89 e5                	mov    ebp,esp
c001e32f:	83 ec 08             	sub    esp,0x8
c001e332:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e335:	8b 00                	mov    eax,DWORD PTR [eax]
c001e337:	83 c0 3c             	add    eax,0x3c
c001e33a:	8b 00                	mov    eax,DWORD PTR [eax]
c001e33c:	83 ec 0c             	sub    esp,0xc
c001e33f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e342:	ff d0                	call   eax
c001e344:	83 c4 10             	add    esp,0x10
c001e347:	b8 00 00 00 00       	mov    eax,0x0
c001e34c:	c9                   	leave  
c001e34d:	c3                   	ret    

c001e34e <IOAPIC::close(int, int, void*)>:
c001e34e:	b8 00 00 00 00       	mov    eax,0x0
c001e353:	c3                   	ret    

c001e354 <APIC::io_wait()>:
c001e354:	eb 00                	jmp    c001e356 <APIC::io_wait()+0x2>
c001e356:	eb 00                	jmp    c001e358 <APIC::io_wait()+0x4>
c001e358:	90                   	nop
c001e359:	c3                   	ret    

c001e35a <APIC::getBase()>:
c001e35a:	55                   	push   ebp
c001e35b:	89 e5                	mov    ebp,esp
c001e35d:	83 ec 18             	sub    esp,0x18
c001e360:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001e365:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001e36b:	83 e0 08             	and    eax,0x8
c001e36e:	84 c0                	test   al,al
c001e370:	75 07                	jne    c001e379 <APIC::getBase()+0x1f>
c001e372:	b8 00 00 00 00       	mov    eax,0x0
c001e377:	eb 21                	jmp    c001e39a <APIC::getBase()+0x40>
c001e379:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001e37e:	83 ec 08             	sub    esp,0x8
c001e381:	6a 1b                	push   0x1b
c001e383:	50                   	push   eax
c001e384:	e8 f3 d1 fe ff       	call   c000b57c <Computer::rdmsr(unsigned int)>
c001e389:	83 c4 10             	add    esp,0x10
c001e38c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e38f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e392:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e395:	25 00 f0 ff ff       	and    eax,0xfffff000
c001e39a:	c9                   	leave  
c001e39b:	c3                   	ret    

c001e39c <APIC::eoi(unsigned char)>:
c001e39c:	55                   	push   ebp
c001e39d:	89 e5                	mov    ebp,esp
c001e39f:	83 ec 28             	sub    esp,0x28
c001e3a2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e3a5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e3a8:	83 ec 0c             	sub    esp,0xc
c001e3ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e3ae:	e8 a7 ff ff ff       	call   c001e35a <APIC::getBase()>
c001e3b3:	83 c4 10             	add    esp,0x10
c001e3b6:	05 b0 00 00 00       	add    eax,0xb0
c001e3bb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e3be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001e3c1:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001e3c7:	90                   	nop
c001e3c8:	c9                   	leave  
c001e3c9:	c3                   	ret    

c001e3ca <APIC::open(int, int, void*)>:
c001e3ca:	55                   	push   ebp
c001e3cb:	89 e5                	mov    ebp,esp
c001e3cd:	57                   	push   edi
c001e3ce:	56                   	push   esi
c001e3cf:	53                   	push   ebx
c001e3d0:	83 ec 1c             	sub    esp,0x1c
c001e3d3:	83 ec 0c             	sub    esp,0xc
c001e3d6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e3d9:	e8 7c ff ff ff       	call   c001e35a <APIC::getBase()>
c001e3de:	83 c4 10             	add    esp,0x10
c001e3e1:	05 f0 00 00 00       	add    eax,0xf0
c001e3e6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e3e9:	83 ec 0c             	sub    esp,0xc
c001e3ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e3ef:	e8 66 ff ff ff       	call   c001e35a <APIC::getBase()>
c001e3f4:	83 c4 10             	add    esp,0x10
c001e3f7:	89 c2                	mov    edx,eax
c001e3f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e3fc:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e402:	89 c7                	mov    edi,eax
c001e404:	81 e7 ff 00 00 00    	and    edi,0xff
c001e40a:	89 d0                	mov    eax,edx
c001e40c:	ba 00 00 00 00       	mov    edx,0x0
c001e411:	89 c1                	mov    ecx,eax
c001e413:	80 e5 ff             	and    ch,0xff
c001e416:	89 cb                	mov    ebx,ecx
c001e418:	89 d0                	mov    eax,edx
c001e41a:	25 ff 00 00 00       	and    eax,0xff
c001e41f:	89 c6                	mov    esi,eax
c001e421:	89 d8                	mov    eax,ebx
c001e423:	89 f2                	mov    edx,esi
c001e425:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e428:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e42b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e42f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e433:	83 e0 00             	and    eax,0x0
c001e436:	09 d0                	or     eax,edx
c001e438:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e43c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e43f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e445:	8d 50 01             	lea    edx,[eax+0x1]
c001e448:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e44b:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e451:	31 d2                	xor    edx,edx
c001e453:	88 c2                	mov    dl,al
c001e455:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e458:	83 c2 08             	add    edx,0x8
c001e45b:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e45f:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e465:	81 c9 00 00 01 00    	or     ecx,0x10000
c001e46b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e46f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e472:	8b 00                	mov    eax,DWORD PTR [eax]
c001e474:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e477:	81 4d e0 00 01 00 00 	or     DWORD PTR [ebp-0x20],0x100
c001e47e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c001e481:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001e484:	89 10                	mov    DWORD PTR [eax],edx
c001e486:	b8 00 00 00 00       	mov    eax,0x0
c001e48b:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e48e:	5b                   	pop    ebx
c001e48f:	5e                   	pop    esi
c001e490:	5f                   	pop    edi
c001e491:	5d                   	pop    ebp
c001e492:	c3                   	ret    
c001e493:	90                   	nop

c001e494 <IOAPIC::IOAPIC()>:
c001e494:	83 ec 0c             	sub    esp,0xc
c001e497:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e49b:	83 ec 08             	sub    esp,0x8
c001e49e:	68 78 39 02 c0       	push   0xc0023978
c001e4a3:	50                   	push   eax
c001e4a4:	e8 6d 23 ff ff       	call   c0010816 <Device::Device(char const*)>
c001e4a9:	83 c4 10             	add    esp,0x10
c001e4ac:	ba a0 3a 02 c0       	mov    edx,0xc0023aa0
c001e4b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e4b5:	89 10                	mov    DWORD PTR [eax],edx
c001e4b7:	90                   	nop
c001e4b8:	83 c4 0c             	add    esp,0xc
c001e4bb:	c3                   	ret    

c001e4bc <APIC::APIC()>:
c001e4bc:	53                   	push   ebx
c001e4bd:	83 ec 18             	sub    esp,0x18
c001e4c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4c4:	83 ec 08             	sub    esp,0x8
c001e4c7:	68 80 39 02 c0       	push   0xc0023980
c001e4cc:	50                   	push   eax
c001e4cd:	e8 92 2a ff ff       	call   c0010f64 <InterruptController::InterruptController(char const*)>
c001e4d2:	83 c4 10             	add    esp,0x10
c001e4d5:	ba 58 3a 02 c0       	mov    edx,0xc0023a58
c001e4da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e4de:	89 10                	mov    DWORD PTR [eax],edx
c001e4e0:	a0 a0 65 02 c0       	mov    al,ds:0xc00265a0
c001e4e5:	83 f0 01             	xor    eax,0x1
c001e4e8:	84 c0                	test   al,al
c001e4ea:	0f 84 a2 00 00 00    	je     c001e592 <APIC::APIC()+0xd6>
c001e4f0:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001e4f5:	a0 50 50 02 c0       	mov    al,ds:0xc0025050
c001e4fa:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c001e4fe:	0f 83 87 00 00 00    	jae    c001e58b <APIC::APIC()+0xcf>
c001e504:	83 ec 0c             	sub    esp,0xc
c001e507:	68 68 01 00 00       	push   0x168
c001e50c:	e8 cb 0b ff ff       	call   c000f0dc <operator new(unsigned long)>
c001e511:	83 c4 10             	add    esp,0x10
c001e514:	89 c3                	mov    ebx,eax
c001e516:	83 ec 0c             	sub    esp,0xc
c001e519:	53                   	push   ebx
c001e51a:	e8 75 ff ff ff       	call   c001e494 <IOAPIC::IOAPIC()>
c001e51f:	83 c4 10             	add    esp,0x10
c001e522:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001e526:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e52a:	25 ff 00 00 00       	and    eax,0xff
c001e52f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e533:	89 14 85 80 65 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9a80],edx
c001e53a:	a1 60 65 02 c0       	mov    eax,ds:0xc0026560
c001e53f:	40                   	inc    eax
c001e540:	a3 60 65 02 c0       	mov    ds:0xc0026560,eax
c001e545:	a1 a8 47 02 c0       	mov    eax,ds:0xc00247a8
c001e54a:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c001e550:	83 ec 08             	sub    esp,0x8
c001e553:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001e557:	50                   	push   eax
c001e558:	e8 c9 20 ff ff       	call   c0010626 <Device::addChild(Device*)>
c001e55d:	83 c4 10             	add    esp,0x10
c001e560:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e564:	8b 00                	mov    eax,DWORD PTR [eax]
c001e566:	83 c0 08             	add    eax,0x8
c001e569:	8b 10                	mov    edx,DWORD PTR [eax]
c001e56b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e56f:	25 ff 00 00 00       	and    eax,0xff
c001e574:	6a 00                	push   0x0
c001e576:	6a 00                	push   0x0
c001e578:	50                   	push   eax
c001e579:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e57d:	ff d2                	call   edx
c001e57f:	83 c4 10             	add    esp,0x10
c001e582:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c001e586:	e9 6a ff ff ff       	jmp    c001e4f5 <APIC::APIC()+0x39>
c001e58b:	c6 05 a0 65 02 c0 01 	mov    BYTE PTR ds:0xc00265a0,0x1
c001e592:	90                   	nop
c001e593:	83 c4 18             	add    esp,0x18
c001e596:	5b                   	pop    ebx
c001e597:	c3                   	ret    

c001e598 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e598:	55                   	push   ebp
c001e599:	89 e5                	mov    ebp,esp
c001e59b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e59e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e5a4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e5a7:	72 1d                	jb     c001e5c6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e5a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5ac:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e5b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5b5:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e5bb:	01 d0                	add    eax,edx
c001e5bd:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e5c0:	73 04                	jae    c001e5c6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e5c2:	b0 01                	mov    al,0x1
c001e5c4:	eb 02                	jmp    c001e5c8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e5c6:	b0 00                	mov    al,0x0
c001e5c8:	5d                   	pop    ebp
c001e5c9:	c3                   	ret    

c001e5ca <IOAPIC::read(int)>:
c001e5ca:	55                   	push   ebp
c001e5cb:	89 e5                	mov    ebp,esp
c001e5cd:	83 ec 10             	sub    esp,0x10
c001e5d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5d3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e5d9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e5dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e5df:	31 d2                	xor    edx,edx
c001e5e1:	88 c2                	mov    dl,al
c001e5e3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5e6:	89 10                	mov    DWORD PTR [eax],edx
c001e5e8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5eb:	83 c0 10             	add    eax,0x10
c001e5ee:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5f0:	c9                   	leave  
c001e5f1:	c3                   	ret    

c001e5f2 <IOAPIC::open(int, int, void*)>:
c001e5f2:	55                   	push   ebp
c001e5f3:	89 e5                	mov    ebp,esp
c001e5f5:	57                   	push   edi
c001e5f6:	56                   	push   esi
c001e5f7:	53                   	push   ebx
c001e5f8:	83 ec 0c             	sub    esp,0xc
c001e5fb:	83 ec 0c             	sub    esp,0xc
c001e5fe:	68 ab 39 02 c0       	push   0xc00239ab
c001e603:	e8 09 0c ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001e608:	83 c4 10             	add    esp,0x10
c001e60b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e60e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e611:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e617:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e61a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e620:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c001e627:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e62a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e630:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e633:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e639:	8b 14 85 00 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf00]
c001e640:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e643:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e649:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e64c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e655:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e65b:	89 c7                	mov    edi,eax
c001e65d:	81 e7 ff 00 00 00    	and    edi,0xff
c001e663:	89 d0                	mov    eax,edx
c001e665:	ba 00 00 00 00       	mov    edx,0x0
c001e66a:	89 c1                	mov    ecx,eax
c001e66c:	80 e5 ff             	and    ch,0xff
c001e66f:	89 cb                	mov    ebx,ecx
c001e671:	89 d0                	mov    eax,edx
c001e673:	25 ff 00 00 00       	and    eax,0xff
c001e678:	89 c6                	mov    esi,eax
c001e67a:	89 d8                	mov    eax,ebx
c001e67c:	89 f2                	mov    edx,esi
c001e67e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e681:	8d 5f 08             	lea    ebx,[edi+0x8]
c001e684:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e688:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e68c:	83 e0 00             	and    eax,0x0
c001e68f:	09 d0                	or     eax,edx
c001e691:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e695:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e698:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e69e:	8d 50 01             	lea    edx,[eax+0x1]
c001e6a1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e6a4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001e6aa:	31 d2                	xor    edx,edx
c001e6ac:	88 c2                	mov    dl,al
c001e6ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6b1:	83 c2 08             	add    edx,0x8
c001e6b4:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e6b8:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e6be:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e6c4:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e6c8:	83 ec 08             	sub    esp,0x8
c001e6cb:	6a 01                	push   0x1
c001e6cd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6d0:	e8 f5 fe ff ff       	call   c001e5ca <IOAPIC::read(int)>
c001e6d5:	83 c4 10             	add    esp,0x10
c001e6d8:	c1 f8 10             	sar    eax,0x10
c001e6db:	25 ff 00 00 00       	and    eax,0xff
c001e6e0:	8d 50 01             	lea    edx,[eax+0x1]
c001e6e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6e6:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e6ec:	b8 00 00 00 00       	mov    eax,0x0
c001e6f1:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e6f4:	5b                   	pop    ebx
c001e6f5:	5e                   	pop    esi
c001e6f6:	5f                   	pop    edi
c001e6f7:	5d                   	pop    ebp
c001e6f8:	c3                   	ret    
c001e6f9:	90                   	nop

c001e6fa <IOAPIC::write(int, int)>:
c001e6fa:	55                   	push   ebp
c001e6fb:	89 e5                	mov    ebp,esp
c001e6fd:	83 ec 10             	sub    esp,0x10
c001e700:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e703:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e709:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e70c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e70f:	31 d2                	xor    edx,edx
c001e711:	88 c2                	mov    dl,al
c001e713:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e716:	89 10                	mov    DWORD PTR [eax],edx
c001e718:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e71b:	8d 50 10             	lea    edx,[eax+0x10]
c001e71e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e721:	89 02                	mov    DWORD PTR [edx],eax
c001e723:	90                   	nop
c001e724:	c9                   	leave  
c001e725:	c3                   	ret    

c001e726 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>:
c001e726:	55                   	push   ebp
c001e727:	89 e5                	mov    ebp,esp
c001e729:	83 ec 20             	sub    esp,0x20
c001e72c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e72f:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e732:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001e735:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e738:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001e73b:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e73e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e741:	88 d0                	mov    al,dl
c001e743:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
c001e746:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e749:	25 ff 00 00 00       	and    eax,0xff
c001e74e:	83 c0 08             	add    eax,0x8
c001e751:	01 c0                	add    eax,eax
c001e753:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e756:	8a 45 ec             	mov    al,BYTE PTR [ebp-0x14]
c001e759:	25 ff 00 00 00       	and    eax,0xff
c001e75e:	83 c0 08             	add    eax,0x8
c001e761:	01 c0                	add    eax,eax
c001e763:	40                   	inc    eax
c001e764:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
c001e767:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e76a:	50                   	push   eax
c001e76b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e76e:	e8 57 fe ff ff       	call   c001e5ca <IOAPIC::read(int)>
c001e773:	83 c4 08             	add    esp,0x8
c001e776:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e779:	81 65 f4 ff ff ff 00 	and    DWORD PTR [ebp-0xc],0xffffff
c001e780:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c001e783:	c1 e0 18             	shl    eax,0x18
c001e786:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e789:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e78c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
c001e78f:	52                   	push   edx
c001e790:	50                   	push   eax
c001e791:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e794:	e8 61 ff ff ff       	call   c001e6fa <IOAPIC::write(int, int)>
c001e799:	83 c4 0c             	add    esp,0xc
c001e79c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e79f:	50                   	push   eax
c001e7a0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7a3:	e8 22 fe ff ff       	call   c001e5ca <IOAPIC::read(int)>
c001e7a8:	83 c4 08             	add    esp,0x8
c001e7ab:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e7ae:	81 65 f0 ff ff fe ff 	and    DWORD PTR [ebp-0x10],0xfffeffff
c001e7b5:	81 65 f0 ff f7 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff7ff
c001e7bc:	81 65 f0 ff f8 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff8ff
c001e7c3:	81 65 f0 00 ff ff ff 	and    DWORD PTR [ebp-0x10],0xffffff00
c001e7ca:	8a 45 e8             	mov    al,BYTE PTR [ebp-0x18]
c001e7cd:	25 ff 00 00 00       	and    eax,0xff
c001e7d2:	09 45 f0             	or     DWORD PTR [ebp-0x10],eax
c001e7d5:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c001e7d8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e7db:	52                   	push   edx
c001e7dc:	50                   	push   eax
c001e7dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7e0:	e8 15 ff ff ff       	call   c001e6fa <IOAPIC::write(int, int)>
c001e7e5:	83 c4 0c             	add    esp,0xc
c001e7e8:	90                   	nop
c001e7e9:	c9                   	leave  
c001e7ea:	c3                   	ret    
c001e7eb:	90                   	nop

c001e7ec <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001e7ec:	55                   	push   ebp
c001e7ed:	89 e5                	mov    ebp,esp
c001e7ef:	56                   	push   esi
c001e7f0:	53                   	push   ebx
c001e7f1:	83 ec 20             	sub    esp,0x20
c001e7f4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e7f7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e7fa:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
c001e7fe:	74 2a                	je     c001e82a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e800:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001e804:	7f 14                	jg     c001e81a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x2e>
c001e806:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e809:	05 00 3f 02 c0       	add    eax,0xc0023f00
c001e80e:	8a 00                	mov    al,BYTE PTR [eax]
c001e810:	25 ff 00 00 00       	and    eax,0xff
c001e815:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c001e818:	eb 10                	jmp    c001e82a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3e>
c001e81a:	83 ec 0c             	sub    esp,0xc
c001e81d:	68 bc 39 02 c0       	push   0xc00239bc
c001e822:	e8 19 72 ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c001e827:	83 c4 10             	add    esp,0x10
c001e82a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e82e:	a1 60 65 02 c0       	mov    eax,ds:0xc0026560
c001e833:	83 ec 08             	sub    esp,0x8
c001e836:	50                   	push   eax
c001e837:	68 f4 39 02 c0       	push   0xc00239f4
c001e83c:	e8 d0 09 ff ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001e841:	83 c4 10             	add    esp,0x10
c001e844:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e84b:	a1 60 65 02 c0       	mov    eax,ds:0xc0026560
c001e850:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e853:	7d 64                	jge    c001e8b9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e855:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e858:	8b 04 85 80 65 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9a80]
c001e85f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e862:	83 ec 08             	sub    esp,0x8
c001e865:	52                   	push   edx
c001e866:	50                   	push   eax
c001e867:	e8 2c fd ff ff       	call   c001e598 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001e86c:	83 c4 10             	add    esp,0x10
c001e86f:	84 c0                	test   al,al
c001e871:	74 41                	je     c001e8b4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xc8>
c001e873:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e876:	8b 1c 85 80 65 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd9a80]
c001e87d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e880:	83 c0 20             	add    eax,0x20
c001e883:	89 c6                	mov    esi,eax
c001e885:	81 e6 ff 00 00 00    	and    esi,0xff
c001e88b:	e8 41 60 ff ff       	call   c00148d1 <getCPUNumber()>
c001e890:	89 c2                	mov    edx,eax
c001e892:	c1 fa 1f             	sar    edx,0x1f
c001e895:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c001e898:	81 e1 ff 00 00 00    	and    ecx,0xff
c001e89e:	83 ec 0c             	sub    esp,0xc
c001e8a1:	56                   	push   esi
c001e8a2:	52                   	push   edx
c001e8a3:	50                   	push   eax
c001e8a4:	51                   	push   ecx
c001e8a5:	53                   	push   ebx
c001e8a6:	e8 7b fe ff ff       	call   c001e726 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char)>
c001e8ab:	83 c4 20             	add    esp,0x20
c001e8ae:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001e8b2:	eb 05                	jmp    c001e8b9 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xcd>
c001e8b4:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001e8b7:	eb 92                	jmp    c001e84b <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5f>
c001e8b9:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e8bc:	83 f0 01             	xor    eax,0x1
c001e8bf:	84 c0                	test   al,al
c001e8c1:	74 10                	je     c001e8d3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xe7>
c001e8c3:	83 ec 0c             	sub    esp,0xc
c001e8c6:	68 0b 3a 02 c0       	push   0xc0023a0b
c001e8cb:	e8 70 71 ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c001e8d0:	83 c4 10             	add    esp,0x10
c001e8d3:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c001e8d7:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e8de:	83 7d ec 03          	cmp    DWORD PTR [ebp-0x14],0x3
c001e8e2:	7f 65                	jg     c001e949 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x15d>
c001e8e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e8e7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e8ea:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e8f1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e8f4:	01 ca                	add    edx,ecx
c001e8f6:	83 c2 54             	add    edx,0x54
c001e8f9:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c001e8fd:	85 c0                	test   eax,eax
c001e8ff:	75 43                	jne    c001e944 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x158>
c001e901:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e904:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e907:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e90e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e911:	01 ca                	add    edx,ecx
c001e913:	8d 4a 54             	lea    ecx,[edx+0x54]
c001e916:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c001e919:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e91d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e920:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e923:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c001e92a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e92d:	01 ca                	add    edx,ecx
c001e92f:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c001e935:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001e938:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c001e93c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e93f:	83 e8 20             	sub    eax,0x20
c001e942:	eb 1a                	jmp    c001e95e <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x172>
c001e944:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c001e947:	eb 95                	jmp    c001e8de <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf2>
c001e949:	83 ec 0c             	sub    esp,0xc
c001e94c:	68 18 3a 02 c0       	push   0xc0023a18
c001e951:	e8 ea 70 ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c001e956:	83 c4 10             	add    esp,0x10
c001e959:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001e95e:	8d 65 f8             	lea    esp,[ebp-0x8]
c001e961:	5b                   	pop    ebx
c001e962:	5e                   	pop    esi
c001e963:	5d                   	pop    ebp
c001e964:	c3                   	ret    
c001e965:	90                   	nop

c001e966 <PIC::disable()>:
c001e966:	55                   	push   ebp
c001e967:	89 e5                	mov    ebp,esp
c001e969:	83 ec 10             	sub    esp,0x10
c001e96c:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c001e972:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c001e976:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001e979:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001e97d:	ee                   	out    dx,al
c001e97e:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c001e984:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c001e988:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001e98b:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001e98f:	ee                   	out    dx,al
c001e990:	90                   	nop
c001e991:	c9                   	leave  
c001e992:	c3                   	ret    
c001e993:	90                   	nop

c001e994 <PIC::close(int, int, void*)>:
c001e994:	55                   	push   ebp
c001e995:	89 e5                	mov    ebp,esp
c001e997:	83 ec 08             	sub    esp,0x8
c001e99a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e99d:	8b 00                	mov    eax,DWORD PTR [eax]
c001e99f:	83 c0 3c             	add    eax,0x3c
c001e9a2:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9a4:	83 ec 0c             	sub    esp,0xc
c001e9a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e9aa:	ff d0                	call   eax
c001e9ac:	83 c4 10             	add    esp,0x10
c001e9af:	b8 00 00 00 00       	mov    eax,0x0
c001e9b4:	c9                   	leave  
c001e9b5:	c3                   	ret    

c001e9b6 <PIC::PIC()>:
c001e9b6:	83 ec 0c             	sub    esp,0xc
c001e9b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9bd:	83 ec 08             	sub    esp,0x8
c001e9c0:	68 c4 3a 02 c0       	push   0xc0023ac4
c001e9c5:	50                   	push   eax
c001e9c6:	e8 99 25 ff ff       	call   c0010f64 <InterruptController::InterruptController(char const*)>
c001e9cb:	83 c4 10             	add    esp,0x10
c001e9ce:	ba f0 3a 02 c0       	mov    edx,0xc0023af0
c001e9d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d7:	89 10                	mov    DWORD PTR [eax],edx
c001e9d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9dd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9e3:	31 d2                	xor    edx,edx
c001e9e5:	88 c2                	mov    dl,al
c001e9e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9eb:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c001e9f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001e9fc:	31 d2                	xor    edx,edx
c001e9fe:	88 c2                	mov    dl,al
c001ea00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea04:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001ea09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea0d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea13:	8d 50 01             	lea    edx,[eax+0x1]
c001ea16:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea1a:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ea20:	31 d2                	xor    edx,edx
c001ea22:	88 c2                	mov    dl,al
c001ea24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea28:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ea2c:	83 e1 3f             	and    ecx,0x3f
c001ea2f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea37:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea3d:	31 d2                	xor    edx,edx
c001ea3f:	88 c2                	mov    dl,al
c001ea41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea45:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c001ea4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea50:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea56:	31 d2                	xor    edx,edx
c001ea58:	88 c2                	mov    dl,al
c001ea5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea5e:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c001ea63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea67:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea6d:	8d 50 01             	lea    edx,[eax+0x1]
c001ea70:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ea74:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001ea7a:	31 d2                	xor    edx,edx
c001ea7c:	88 c2                	mov    dl,al
c001ea7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea82:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ea86:	83 e1 3f             	and    ecx,0x3f
c001ea89:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea8d:	90                   	nop
c001ea8e:	83 c4 0c             	add    esp,0xc
c001ea91:	c3                   	ret    

c001ea92 <PIC::ioWait()>:
c001ea92:	eb 00                	jmp    c001ea94 <PIC::ioWait()+0x2>
c001ea94:	eb 00                	jmp    c001ea96 <PIC::ioWait()+0x4>
c001ea96:	90                   	nop
c001ea97:	c3                   	ret    

c001ea98 <PIC::getIRQReg(int)>:
c001ea98:	55                   	push   ebp
c001ea99:	89 e5                	mov    ebp,esp
c001ea9b:	83 ec 10             	sub    esp,0x10
c001ea9e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eaa1:	25 ff 00 00 00       	and    eax,0xff
c001eaa6:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001eaac:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c001eaaf:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001eab2:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001eab6:	ee                   	out    dx,al
c001eab7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eaba:	25 ff 00 00 00       	and    eax,0xff
c001eabf:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001eac5:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c001eac8:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001eacb:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001eacf:	ee                   	out    dx,al
c001ead0:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c001ead6:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c001eada:	89 c2                	mov    edx,eax
c001eadc:	ec                   	in     al,dx
c001eadd:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c001eae0:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001eae3:	25 ff 00 00 00       	and    eax,0xff
c001eae8:	c1 e0 08             	shl    eax,0x8
c001eaeb:	89 c1                	mov    ecx,eax
c001eaed:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c001eaf3:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001eaf7:	89 c2                	mov    edx,eax
c001eaf9:	ec                   	in     al,dx
c001eafa:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c001eafd:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c001eb00:	25 ff 00 00 00       	and    eax,0xff
c001eb05:	09 c8                	or     eax,ecx
c001eb07:	c9                   	leave  
c001eb08:	c3                   	ret    
c001eb09:	90                   	nop

c001eb0a <PIC::eoi(unsigned char)>:
c001eb0a:	55                   	push   ebp
c001eb0b:	89 e5                	mov    ebp,esp
c001eb0d:	83 ec 14             	sub    esp,0x14
c001eb10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eb13:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c001eb16:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001eb1a:	75 23                	jne    c001eb3f <PIC::eoi(unsigned char)+0x35>
c001eb1c:	6a 0b                	push   0xb
c001eb1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb21:	e8 72 ff ff ff       	call   c001ea98 <PIC::getIRQReg(int)>
c001eb26:	83 c4 08             	add    esp,0x8
c001eb29:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c001eb2d:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c001eb31:	25 ff ff 00 00       	and    eax,0xffff
c001eb36:	25 80 00 00 00       	and    eax,0x80
c001eb3b:	85 c0                	test   eax,eax
c001eb3d:	74 5f                	je     c001eb9e <PIC::eoi(unsigned char)+0x94>
c001eb3f:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c001eb43:	75 2d                	jne    c001eb72 <PIC::eoi(unsigned char)+0x68>
c001eb45:	6a 0b                	push   0xb
c001eb47:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eb4a:	e8 49 ff ff ff       	call   c001ea98 <PIC::getIRQReg(int)>
c001eb4f:	83 c4 08             	add    esp,0x8
c001eb52:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c001eb56:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eb59:	66 85 c0             	test   ax,ax
c001eb5c:	78 14                	js     c001eb72 <PIC::eoi(unsigned char)+0x68>
c001eb5e:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c001eb64:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c001eb68:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c001eb6b:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c001eb6f:	ee                   	out    dx,al
c001eb70:	eb 2d                	jmp    c001eb9f <PIC::eoi(unsigned char)+0x95>
c001eb72:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c001eb76:	76 12                	jbe    c001eb8a <PIC::eoi(unsigned char)+0x80>
c001eb78:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c001eb7e:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c001eb82:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001eb85:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001eb89:	ee                   	out    dx,al
c001eb8a:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c001eb90:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c001eb94:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001eb97:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001eb9b:	ee                   	out    dx,al
c001eb9c:	eb 01                	jmp    c001eb9f <PIC::eoi(unsigned char)+0x95>
c001eb9e:	90                   	nop
c001eb9f:	c9                   	leave  
c001eba0:	c3                   	ret    
c001eba1:	90                   	nop

c001eba2 <PIC::remap()>:
c001eba2:	55                   	push   ebp
c001eba3:	89 e5                	mov    ebp,esp
c001eba5:	83 ec 48             	sub    esp,0x48
c001eba8:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c001ebaf:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c001ebb6:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c001ebbc:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c001ebbf:	89 c2                	mov    edx,eax
c001ebc1:	ec                   	in     al,dx
c001ebc2:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c001ebc5:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c001ebc8:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c001ebcb:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c001ebd1:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c001ebd4:	89 c2                	mov    edx,eax
c001ebd6:	ec                   	in     al,dx
c001ebd7:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c001ebda:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c001ebdd:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c001ebe0:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c001ebe6:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c001ebea:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c001ebed:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c001ebf0:	ee                   	out    dx,al
c001ebf1:	83 ec 0c             	sub    esp,0xc
c001ebf4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ebf7:	e8 96 fe ff ff       	call   c001ea92 <PIC::ioWait()>
c001ebfc:	83 c4 10             	add    esp,0x10
c001ebff:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c001ec05:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c001ec09:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c001ec0c:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001ec0f:	ee                   	out    dx,al
c001ec10:	83 ec 0c             	sub    esp,0xc
c001ec13:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec16:	e8 77 fe ff ff       	call   c001ea92 <PIC::ioWait()>
c001ec1b:	83 c4 10             	add    esp,0x10
c001ec1e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001ec21:	25 ff 00 00 00       	and    eax,0xff
c001ec26:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c001ec2c:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c001ec2f:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c001ec32:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c001ec35:	ee                   	out    dx,al
c001ec36:	83 ec 0c             	sub    esp,0xc
c001ec39:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec3c:	e8 51 fe ff ff       	call   c001ea92 <PIC::ioWait()>
c001ec41:	83 c4 10             	add    esp,0x10
c001ec44:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ec47:	25 ff 00 00 00       	and    eax,0xff
c001ec4c:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c001ec52:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c001ec55:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c001ec58:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ec5b:	ee                   	out    dx,al
c001ec5c:	83 ec 0c             	sub    esp,0xc
c001ec5f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec62:	e8 2b fe ff ff       	call   c001ea92 <PIC::ioWait()>
c001ec67:	83 c4 10             	add    esp,0x10
c001ec6a:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c001ec70:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c001ec74:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c001ec77:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c001ec7a:	ee                   	out    dx,al
c001ec7b:	83 ec 0c             	sub    esp,0xc
c001ec7e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ec81:	e8 0c fe ff ff       	call   c001ea92 <PIC::ioWait()>
c001ec86:	83 c4 10             	add    esp,0x10
c001ec89:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c001ec8f:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c001ec93:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c001ec96:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c001ec99:	ee                   	out    dx,al
c001ec9a:	83 ec 0c             	sub    esp,0xc
c001ec9d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001eca0:	e8 ed fd ff ff       	call   c001ea92 <PIC::ioWait()>
c001eca5:	83 c4 10             	add    esp,0x10
c001eca8:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c001ecae:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c001ecb2:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c001ecb5:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c001ecb8:	ee                   	out    dx,al
c001ecb9:	83 ec 0c             	sub    esp,0xc
c001ecbc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecbf:	e8 ce fd ff ff       	call   c001ea92 <PIC::ioWait()>
c001ecc4:	83 c4 10             	add    esp,0x10
c001ecc7:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c001eccd:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c001ecd1:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c001ecd4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ecd7:	ee                   	out    dx,al
c001ecd8:	83 ec 0c             	sub    esp,0xc
c001ecdb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ecde:	e8 af fd ff ff       	call   c001ea92 <PIC::ioWait()>
c001ece3:	83 c4 10             	add    esp,0x10
c001ece6:	8a 45 ef             	mov    al,BYTE PTR [ebp-0x11]
c001ece9:	25 ff 00 00 00       	and    eax,0xff
c001ecee:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c001ecf4:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c001ecf7:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c001ecfa:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001ecfd:	ee                   	out    dx,al
c001ecfe:	8a 45 ee             	mov    al,BYTE PTR [ebp-0x12]
c001ed01:	25 ff 00 00 00       	and    eax,0xff
c001ed06:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c001ed0c:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c001ed0f:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c001ed12:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ed15:	ee                   	out    dx,al
c001ed16:	90                   	nop
c001ed17:	c9                   	leave  
c001ed18:	c3                   	ret    
c001ed19:	90                   	nop

c001ed1a <PIC::open(int, int, void*)>:
c001ed1a:	55                   	push   ebp
c001ed1b:	89 e5                	mov    ebp,esp
c001ed1d:	83 ec 18             	sub    esp,0x18
c001ed20:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c001ed26:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c001ed2a:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c001ed2d:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c001ed31:	ee                   	out    dx,al
c001ed32:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c001ed38:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c001ed3c:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c001ed3f:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c001ed43:	ee                   	out    dx,al
c001ed44:	83 ec 0c             	sub    esp,0xc
c001ed47:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001ed4a:	e8 53 fe ff ff       	call   c001eba2 <PIC::remap()>
c001ed4f:	83 c4 10             	add    esp,0x10
c001ed52:	b8 00 00 00 00       	mov    eax,0x0
c001ed57:	c9                   	leave  
c001ed58:	c3                   	ret    
c001ed59:	90                   	nop

c001ed5a <APICTimer::close(int, int, void*)>:
c001ed5a:	b8 00 00 00 00       	mov    eax,0x0
c001ed5f:	c3                   	ret    

c001ed60 <apicTimerHandler(regs*, void*)>:
c001ed60:	83 ec 0c             	sub    esp,0xc
c001ed63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ed67:	8b 00                	mov    eax,DWORD PTR [eax]
c001ed69:	89 c2                	mov    edx,eax
c001ed6b:	c1 fa 1f             	sar    edx,0x1f
c001ed6e:	52                   	push   edx
c001ed6f:	50                   	push   eax
c001ed70:	6a 00                	push   0x0
c001ed72:	68 00 ca 9a 3b       	push   0x3b9aca00
c001ed77:	e8 90 07 00 00       	call   c001f50c <__udivdi3>
c001ed7c:	83 c4 10             	add    esp,0x10
c001ed7f:	83 ec 08             	sub    esp,0x8
c001ed82:	52                   	push   edx
c001ed83:	50                   	push   eax
c001ed84:	e8 08 40 ff ff       	call   c0012d91 <timerHandler(unsigned long long)>
c001ed89:	83 c4 10             	add    esp,0x10
c001ed8c:	90                   	nop
c001ed8d:	83 c4 0c             	add    esp,0xc
c001ed90:	c3                   	ret    
c001ed91:	90                   	nop

c001ed92 <APICTimer::write(int)>:
c001ed92:	53                   	push   ebx
c001ed93:	83 ec 28             	sub    esp,0x28
c001ed96:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ed9a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001ed9e:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eda4:	e8 2b 5b ff ff       	call   c00148d4 <thisCPU()>
c001eda9:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001edaf:	83 ec 0c             	sub    esp,0xc
c001edb2:	50                   	push   eax
c001edb3:	e8 a2 f5 ff ff       	call   c001e35a <APIC::getBase()>
c001edb8:	83 c4 10             	add    esp,0x10
c001edbb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001edbf:	a1 10 4e 02 c0       	mov    eax,ds:0xc0024e10
c001edc4:	8b 15 14 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024e14
c001edca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001edce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001edd2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001edd6:	05 e0 03 00 00       	add    eax,0x3e0
c001eddb:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001ede1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ede5:	05 80 03 00 00       	add    eax,0x380
c001edea:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c001edf0:	fb                   	sti    
c001edf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edf5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001edf9:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c001edfe:	83 d2 00             	adc    edx,0x0
c001ee01:	89 c1                	mov    ecx,eax
c001ee03:	89 d3                	mov    ebx,edx
c001ee05:	a1 10 4e 02 c0       	mov    eax,ds:0xc0024e10
c001ee0a:	8b 15 14 4e 02 c0    	mov    edx,DWORD PTR ds:0xc0024e14
c001ee10:	39 c8                	cmp    eax,ecx
c001ee12:	89 d0                	mov    eax,edx
c001ee14:	19 d8                	sbb    eax,ebx
c001ee16:	73 02                	jae    c001ee1a <APICTimer::write(int)+0x88>
c001ee18:	eb d7                	jmp    c001edf1 <APICTimer::write(int)+0x5f>
c001ee1a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee1e:	05 20 03 00 00       	add    eax,0x320
c001ee23:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c001ee29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee2d:	05 90 03 00 00       	add    eax,0x390
c001ee32:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee34:	f7 d0                	not    eax
c001ee36:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ee3a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ee3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ee42:	ba 00 00 00 00       	mov    edx,0x0
c001ee47:	f7 f3                	div    ebx
c001ee49:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ee4d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ee51:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001ee57:	0d 00 00 02 00       	or     eax,0x20000
c001ee5c:	89 c2                	mov    edx,eax
c001ee5e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee62:	05 20 03 00 00       	add    eax,0x320
c001ee67:	89 10                	mov    DWORD PTR [eax],edx
c001ee69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee6d:	05 e0 03 00 00       	add    eax,0x3e0
c001ee72:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c001ee78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee7c:	05 80 03 00 00       	add    eax,0x380
c001ee81:	89 c2                	mov    edx,eax
c001ee83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ee87:	89 02                	mov    DWORD PTR [edx],eax
c001ee89:	90                   	nop
c001ee8a:	83 c4 28             	add    esp,0x28
c001ee8d:	5b                   	pop    ebx
c001ee8e:	c3                   	ret    
c001ee8f:	90                   	nop

c001ee90 <APICTimer::open(int, int, void*)>:
c001ee90:	57                   	push   edi
c001ee91:	56                   	push   esi
c001ee92:	53                   	push   ebx
c001ee93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ee97:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee99:	83 c0 24             	add    eax,0x24
c001ee9c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee9e:	83 ec 08             	sub    esp,0x8
c001eea1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eea5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eea9:	ff d0                	call   eax
c001eeab:	83 c4 10             	add    esp,0x10
c001eeae:	e8 21 5a ff ff       	call   c00148d4 <thisCPU()>
c001eeb3:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001eeb9:	83 ec 0c             	sub    esp,0xc
c001eebc:	50                   	push   eax
c001eebd:	e8 98 f4 ff ff       	call   c001e35a <APIC::getBase()>
c001eec2:	83 c4 10             	add    esp,0x10
c001eec5:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c001eecb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001eecf:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001eed5:	89 c7                	mov    edi,eax
c001eed7:	81 e7 ff 00 00 00    	and    edi,0xff
c001eedd:	89 d0                	mov    eax,edx
c001eedf:	ba 00 00 00 00       	mov    edx,0x0
c001eee4:	89 c1                	mov    ecx,eax
c001eee6:	80 e5 ff             	and    ch,0xff
c001eee9:	89 cb                	mov    ebx,ecx
c001eeeb:	89 d0                	mov    eax,edx
c001eeed:	25 ff 00 00 00       	and    eax,0xff
c001eef2:	89 c6                	mov    esi,eax
c001eef4:	89 d8                	mov    eax,ebx
c001eef6:	89 f2                	mov    edx,esi
c001eef8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001eefc:	8d 5f 08             	lea    ebx,[edi+0x8]
c001eeff:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ef03:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ef07:	83 e0 00             	and    eax,0x0
c001ef0a:	09 d0                	or     eax,edx
c001ef0c:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ef10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef14:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ef1a:	8d 50 01             	lea    edx,[eax+0x1]
c001ef1d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ef21:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001ef27:	31 d2                	xor    edx,edx
c001ef29:	88 c2                	mov    dl,al
c001ef2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef2f:	83 c2 08             	add    edx,0x8
c001ef32:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ef36:	81 e1 ff 00 00 00    	and    ecx,0xff
c001ef3c:	81 c9 00 00 01 00    	or     ecx,0x10000
c001ef42:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ef46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef4a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ef4e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ef54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef5c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001ef62:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef66:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ef6c:	83 ec 0c             	sub    esp,0xc
c001ef6f:	51                   	push   ecx
c001ef70:	6a 01                	push   0x1
c001ef72:	68 60 ed 01 c0       	push   0xc001ed60
c001ef77:	52                   	push   edx
c001ef78:	50                   	push   eax
c001ef79:	e8 fc 15 ff ff       	call   c001057a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ef7e:	83 c4 20             	add    esp,0x20
c001ef81:	89 c2                	mov    edx,eax
c001ef83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef87:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ef8d:	b8 00 00 00 00       	mov    eax,0x0
c001ef92:	5b                   	pop    ebx
c001ef93:	5e                   	pop    esi
c001ef94:	5f                   	pop    edi
c001ef95:	c3                   	ret    

c001ef96 <APICTimer::APICTimer()>:
c001ef96:	83 ec 0c             	sub    esp,0xc
c001ef99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef9d:	83 ec 08             	sub    esp,0x8
c001efa0:	68 30 3b 02 c0       	push   0xc0023b30
c001efa5:	50                   	push   eax
c001efa6:	e8 57 3d ff ff       	call   c0012d02 <Timer::Timer(char const*)>
c001efab:	83 c4 10             	add    esp,0x10
c001efae:	ba 44 3b 02 c0       	mov    edx,0xc0023b44
c001efb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001efb7:	89 10                	mov    DWORD PTR [eax],edx
c001efb9:	90                   	nop
c001efba:	83 c4 0c             	add    esp,0xc
c001efbd:	c3                   	ret    

c001efbe <PIT::write(int)>:
c001efbe:	83 ec 10             	sub    esp,0x10
c001efc1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001efc5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001efc9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001efcf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001efd3:	a3 a4 65 02 c0       	mov    ds:0xc00265a4,eax
c001efd8:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001efdd:	89 c2                	mov    edx,eax
c001efdf:	c1 fa 1f             	sar    edx,0x1f
c001efe2:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001efe6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001efea:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001eff1:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001eff6:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001effa:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001efff:	ee                   	out    dx,al
c001f000:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f004:	25 ff 00 00 00       	and    eax,0xff
c001f009:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001f010:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001f014:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001f018:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001f01d:	ee                   	out    dx,al
c001f01e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f022:	c1 f8 08             	sar    eax,0x8
c001f025:	25 ff 00 00 00       	and    eax,0xff
c001f02a:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001f031:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f035:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f039:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001f03e:	ee                   	out    dx,al
c001f03f:	90                   	nop
c001f040:	83 c4 10             	add    esp,0x10
c001f043:	c3                   	ret    

c001f044 <pitHandler(regs*, void*)>:
c001f044:	83 ec 0c             	sub    esp,0xc
c001f047:	a1 a4 65 02 c0       	mov    eax,ds:0xc00265a4
c001f04c:	89 c2                	mov    edx,eax
c001f04e:	c1 fa 1f             	sar    edx,0x1f
c001f051:	52                   	push   edx
c001f052:	50                   	push   eax
c001f053:	6a 00                	push   0x0
c001f055:	68 00 ca 9a 3b       	push   0x3b9aca00
c001f05a:	e8 ad 04 00 00       	call   c001f50c <__udivdi3>
c001f05f:	83 c4 10             	add    esp,0x10
c001f062:	83 ec 08             	sub    esp,0x8
c001f065:	52                   	push   edx
c001f066:	50                   	push   eax
c001f067:	e8 25 3d ff ff       	call   c0012d91 <timerHandler(unsigned long long)>
c001f06c:	83 c4 10             	add    esp,0x10
c001f06f:	90                   	nop
c001f070:	83 c4 0c             	add    esp,0xc
c001f073:	c3                   	ret    

c001f074 <PIT::open(int, int, void*)>:
c001f074:	83 ec 0c             	sub    esp,0xc
c001f077:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f07b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f07d:	83 c0 24             	add    eax,0x24
c001f080:	8b 00                	mov    eax,DWORD PTR [eax]
c001f082:	83 ec 08             	sub    esp,0x8
c001f085:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f089:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f08d:	ff d0                	call   eax
c001f08f:	83 c4 10             	add    esp,0x10
c001f092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f096:	83 ec 0c             	sub    esp,0xc
c001f099:	6a 00                	push   0x0
c001f09b:	6a 01                	push   0x1
c001f09d:	68 44 f0 01 c0       	push   0xc001f044
c001f0a2:	6a 00                	push   0x0
c001f0a4:	50                   	push   eax
c001f0a5:	e8 d0 14 ff ff       	call   c001057a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f0aa:	83 c4 20             	add    esp,0x20
c001f0ad:	89 c2                	mov    edx,eax
c001f0af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0b3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f0b9:	b8 00 00 00 00       	mov    eax,0x0
c001f0be:	83 c4 0c             	add    esp,0xc
c001f0c1:	c3                   	ret    

c001f0c2 <PIT::close(int, int, void*)>:
c001f0c2:	83 ec 0c             	sub    esp,0xc
c001f0c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0c9:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f0d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0d7:	6a 01                	push   0x1
c001f0d9:	68 44 f0 01 c0       	push   0xc001f044
c001f0de:	6a 00                	push   0x0
c001f0e0:	50                   	push   eax
c001f0e1:	e8 f2 14 ff ff       	call   c00105d8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f0e6:	83 c4 10             	add    esp,0x10
c001f0e9:	b8 00 00 00 00       	mov    eax,0x0
c001f0ee:	83 c4 0c             	add    esp,0xc
c001f0f1:	c3                   	ret    

c001f0f2 <PIT::PIT()>:
c001f0f2:	83 ec 0c             	sub    esp,0xc
c001f0f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f0f9:	83 ec 08             	sub    esp,0x8
c001f0fc:	68 6c 3b 02 c0       	push   0xc0023b6c
c001f101:	50                   	push   eax
c001f102:	e8 fb 3b ff ff       	call   c0012d02 <Timer::Timer(char const*)>
c001f107:	83 c4 10             	add    esp,0x10
c001f10a:	ba 94 3b 02 c0       	mov    edx,0xc0023b94
c001f10f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f113:	89 10                	mov    DWORD PTR [eax],edx
c001f115:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f119:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f11f:	31 d2                	xor    edx,edx
c001f121:	88 c2                	mov    dl,al
c001f123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f127:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f12e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f132:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f138:	31 d2                	xor    edx,edx
c001f13a:	88 c2                	mov    dl,al
c001f13c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f140:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f149:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f14f:	8d 50 01             	lea    edx,[eax+0x1]
c001f152:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f156:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001f15c:	31 d2                	xor    edx,edx
c001f15e:	88 c2                	mov    dl,al
c001f160:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f164:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f168:	83 e1 3f             	and    ecx,0x3f
c001f16b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f16f:	90                   	nop
c001f170:	83 c4 0c             	add    esp,0xc
c001f173:	c3                   	ret    
c001f174:	66 90                	xchg   ax,ax
c001f176:	66 90                	xchg   ax,ax
c001f178:	66 90                	xchg   ax,ax
c001f17a:	66 90                	xchg   ax,ax
c001f17c:	66 90                	xchg   ax,ax
c001f17e:	66 90                	xchg   ax,ax

c001f180 <avxDetect>:
c001f180:	b8 00 00 00 00       	mov    eax,0x0
c001f185:	c3                   	ret    

c001f186 <avxSave>:
c001f186:	c3                   	ret    

c001f187 <avxLoad>:
c001f187:	c3                   	ret    

c001f188 <avxInit>:
c001f188:	c3                   	ret    

c001f189 <avxClose>:
c001f189:	c3                   	ret    
c001f18a:	66 90                	xchg   ax,ax
c001f18c:	66 90                	xchg   ax,ax
c001f18e:	66 90                	xchg   ax,ax

c001f190 <sseDetect>:
c001f190:	b8 01 00 00 00       	mov    eax,0x1
c001f195:	0f a2                	cpuid  
c001f197:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f19d:	74 06                	je     c001f1a5 <sseDetect.noSSE>
c001f19f:	b8 01 00 00 00       	mov    eax,0x1
c001f1a4:	c3                   	ret    

c001f1a5 <sseDetect.noSSE>:
c001f1a5:	b8 00 00 00 00       	mov    eax,0x0
c001f1aa:	c3                   	ret    

c001f1ab <sseSave>:
c001f1ab:	0f ae 44 24 08       	fxsave [esp+0x8]
c001f1b0:	c3                   	ret    

c001f1b1 <sseLoad>:
c001f1b1:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c001f1b6:	c3                   	ret    

c001f1b7 <sseInit>:
c001f1b7:	e8 40 00 00 00       	call   c001f1fc <x87Init>
c001f1bc:	0f 20 e0             	mov    eax,cr4
c001f1bf:	66 0d 00 06          	or     ax,0x600
c001f1c3:	0f 22 e0             	mov    cr4,eax
c001f1c6:	c3                   	ret    

c001f1c7 <sseClose>:
c001f1c7:	c3                   	ret    
c001f1c8:	66 90                	xchg   ax,ax
c001f1ca:	66 90                	xchg   ax,ax
c001f1cc:	66 90                	xchg   ax,ax
c001f1ce:	66 90                	xchg   ax,ax

c001f1d0 <value_37F>:
c001f1d0:	7f 03                	jg     c001f1d5 <value_37A+0x1>

c001f1d2 <value_37E>:
c001f1d2:	7e 03                	jle    c001f1d7 <x87Detect+0x1>

c001f1d4 <value_37A>:
c001f1d4:	7a 03                	jp     c001f1d9 <x87Detect+0x3>

c001f1d6 <x87Detect>:
c001f1d6:	b8 01 00 00 00       	mov    eax,0x1
c001f1db:	0f a2                	cpuid  
c001f1dd:	f7 c2 01 00 00 00    	test   edx,0x1
c001f1e3:	74 06                	je     c001f1eb <x87Detect.nox87>
c001f1e5:	b8 01 00 00 00       	mov    eax,0x1
c001f1ea:	c3                   	ret    

c001f1eb <x87Detect.nox87>:
c001f1eb:	b8 00 00 00 00       	mov    eax,0x0
c001f1f0:	c3                   	ret    

c001f1f1 <x87Save>:
c001f1f1:	9b dd 74 24 08       	fsave  [esp+0x8]
c001f1f6:	c3                   	ret    

c001f1f7 <x87Load>:
c001f1f7:	dd 64 24 08          	frstor [esp+0x8]
c001f1fb:	c3                   	ret    

c001f1fc <x87Init>:
c001f1fc:	9b db e3             	finit  
c001f1ff:	0f 20 c0             	mov    eax,cr0
c001f202:	66 25 fb ff          	and    ax,0xfffb
c001f206:	66 0d 22 00          	or     ax,0x22
c001f20a:	0f 22 c0             	mov    cr0,eax
c001f20d:	0f 06                	clts   
c001f20f:	d9 2d d4 f1 01 c0    	fldcw  WORD PTR ds:0xc001f1d4
c001f215:	c3                   	ret    

c001f216 <x87Close>:
c001f216:	c3                   	ret    
c001f217:	90                   	nop

c001f218 <__do_global_ctors_aux>:
c001f218:	a1 f8 02 02 c0       	mov    eax,ds:0xc00202f8
c001f21d:	83 f8 ff             	cmp    eax,0xffffffff
c001f220:	74 1a                	je     c001f23c <__do_global_ctors_aux+0x24>
c001f222:	55                   	push   ebp
c001f223:	89 e5                	mov    ebp,esp
c001f225:	53                   	push   ebx
c001f226:	52                   	push   edx
c001f227:	bb f8 02 02 c0       	mov    ebx,0xc00202f8
c001f22c:	ff d0                	call   eax
c001f22e:	83 eb 04             	sub    ebx,0x4
c001f231:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f233:	83 f8 ff             	cmp    eax,0xffffffff
c001f236:	75 f4                	jne    c001f22c <__do_global_ctors_aux+0x14>
c001f238:	58                   	pop    eax
c001f239:	5b                   	pop    ebx
c001f23a:	5d                   	pop    ebp
c001f23b:	c3                   	ret    
c001f23c:	c3                   	ret    
c001f23d:	66 90                	xchg   ax,ax
c001f23f:	90                   	nop

c001f240 <__divdi3>:
c001f240:	55                   	push   ebp
c001f241:	57                   	push   edi
c001f242:	56                   	push   esi
c001f243:	53                   	push   ebx
c001f244:	83 ec 1c             	sub    esp,0x1c
c001f247:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f24b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f24f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f252:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f256:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f25a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f25e:	85 db                	test   ebx,ebx
c001f260:	0f 88 8e 00 00 00    	js     c001f2f4 <__divdi3+0xb4>
c001f266:	89 dd                	mov    ebp,ebx
c001f268:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f270:	89 d3                	mov    ebx,edx
c001f272:	85 d2                	test   edx,edx
c001f274:	79 0d                	jns    c001f283 <__divdi3+0x43>
c001f276:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f27a:	f7 d8                	neg    eax
c001f27c:	83 d2 00             	adc    edx,0x0
c001f27f:	f7 da                	neg    edx
c001f281:	89 d3                	mov    ebx,edx
c001f283:	89 c7                	mov    edi,eax
c001f285:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f288:	85 db                	test   ebx,ebx
c001f28a:	75 48                	jne    c001f2d4 <__divdi3+0x94>
c001f28c:	39 ef                	cmp    edi,ebp
c001f28e:	76 24                	jbe    c001f2b4 <__divdi3+0x74>
c001f290:	89 ea                	mov    edx,ebp
c001f292:	f7 f7                	div    edi
c001f294:	89 c1                	mov    ecx,eax
c001f296:	31 f6                	xor    esi,esi
c001f298:	89 c8                	mov    eax,ecx
c001f29a:	89 f2                	mov    edx,esi
c001f29c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f2a0:	85 c9                	test   ecx,ecx
c001f2a2:	74 07                	je     c001f2ab <__divdi3+0x6b>
c001f2a4:	f7 d8                	neg    eax
c001f2a6:	83 d2 00             	adc    edx,0x0
c001f2a9:	f7 da                	neg    edx
c001f2ab:	83 c4 1c             	add    esp,0x1c
c001f2ae:	5b                   	pop    ebx
c001f2af:	5e                   	pop    esi
c001f2b0:	5f                   	pop    edi
c001f2b1:	5d                   	pop    ebp
c001f2b2:	c3                   	ret    
c001f2b3:	90                   	nop
c001f2b4:	85 ff                	test   edi,edi
c001f2b6:	75 0b                	jne    c001f2c3 <__divdi3+0x83>
c001f2b8:	b8 01 00 00 00       	mov    eax,0x1
c001f2bd:	31 d2                	xor    edx,edx
c001f2bf:	f7 f3                	div    ebx
c001f2c1:	89 c7                	mov    edi,eax
c001f2c3:	31 d2                	xor    edx,edx
c001f2c5:	89 e8                	mov    eax,ebp
c001f2c7:	f7 f7                	div    edi
c001f2c9:	89 c6                	mov    esi,eax
c001f2cb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f2ce:	f7 f7                	div    edi
c001f2d0:	89 c1                	mov    ecx,eax
c001f2d2:	eb c4                	jmp    c001f298 <__divdi3+0x58>
c001f2d4:	39 eb                	cmp    ebx,ebp
c001f2d6:	77 3c                	ja     c001f314 <__divdi3+0xd4>
c001f2d8:	0f bd f3             	bsr    esi,ebx
c001f2db:	83 f6 1f             	xor    esi,0x1f
c001f2de:	75 40                	jne    c001f320 <__divdi3+0xe0>
c001f2e0:	39 eb                	cmp    ebx,ebp
c001f2e2:	72 09                	jb     c001f2ed <__divdi3+0xad>
c001f2e4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f2e7:	0f 87 97 00 00 00    	ja     c001f384 <__divdi3+0x144>
c001f2ed:	b9 01 00 00 00       	mov    ecx,0x1
c001f2f2:	eb a4                	jmp    c001f298 <__divdi3+0x58>
c001f2f4:	f7 d9                	neg    ecx
c001f2f6:	83 d3 00             	adc    ebx,0x0
c001f2f9:	f7 db                	neg    ebx
c001f2fb:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f2fe:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f302:	89 dd                	mov    ebp,ebx
c001f304:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f30c:	e9 5f ff ff ff       	jmp    c001f270 <__divdi3+0x30>
c001f311:	8d 76 00             	lea    esi,[esi+0x0]
c001f314:	31 f6                	xor    esi,esi
c001f316:	31 c9                	xor    ecx,ecx
c001f318:	e9 7b ff ff ff       	jmp    c001f298 <__divdi3+0x58>
c001f31d:	8d 76 00             	lea    esi,[esi+0x0]
c001f320:	b8 20 00 00 00       	mov    eax,0x20
c001f325:	29 f0                	sub    eax,esi
c001f327:	89 f1                	mov    ecx,esi
c001f329:	d3 e3                	shl    ebx,cl
c001f32b:	89 fa                	mov    edx,edi
c001f32d:	88 c1                	mov    cl,al
c001f32f:	d3 ea                	shr    edx,cl
c001f331:	09 da                	or     edx,ebx
c001f333:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f337:	89 f1                	mov    ecx,esi
c001f339:	d3 e7                	shl    edi,cl
c001f33b:	89 eb                	mov    ebx,ebp
c001f33d:	88 c1                	mov    cl,al
c001f33f:	d3 eb                	shr    ebx,cl
c001f341:	89 f1                	mov    ecx,esi
c001f343:	d3 e5                	shl    ebp,cl
c001f345:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f348:	88 c1                	mov    cl,al
c001f34a:	d3 ea                	shr    edx,cl
c001f34c:	09 d5                	or     ebp,edx
c001f34e:	89 e8                	mov    eax,ebp
c001f350:	89 da                	mov    edx,ebx
c001f352:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f356:	89 d3                	mov    ebx,edx
c001f358:	89 c5                	mov    ebp,eax
c001f35a:	f7 e7                	mul    edi
c001f35c:	39 d3                	cmp    ebx,edx
c001f35e:	72 18                	jb     c001f378 <__divdi3+0x138>
c001f360:	74 0a                	je     c001f36c <__divdi3+0x12c>
c001f362:	89 e9                	mov    ecx,ebp
c001f364:	31 f6                	xor    esi,esi
c001f366:	e9 2d ff ff ff       	jmp    c001f298 <__divdi3+0x58>
c001f36b:	90                   	nop
c001f36c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f36f:	89 f1                	mov    ecx,esi
c001f371:	d3 e7                	shl    edi,cl
c001f373:	39 c7                	cmp    edi,eax
c001f375:	73 eb                	jae    c001f362 <__divdi3+0x122>
c001f377:	90                   	nop
c001f378:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f37b:	31 f6                	xor    esi,esi
c001f37d:	e9 16 ff ff ff       	jmp    c001f298 <__divdi3+0x58>
c001f382:	66 90                	xchg   ax,ax
c001f384:	31 c9                	xor    ecx,ecx
c001f386:	e9 0d ff ff ff       	jmp    c001f298 <__divdi3+0x58>
c001f38b:	90                   	nop

c001f38c <__moddi3>:
c001f38c:	55                   	push   ebp
c001f38d:	57                   	push   edi
c001f38e:	56                   	push   esi
c001f38f:	53                   	push   ebx
c001f390:	83 ec 2c             	sub    esp,0x2c
c001f393:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f397:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f39b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f39f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f3a3:	85 db                	test   ebx,ebx
c001f3a5:	0f 88 85 00 00 00    	js     c001f430 <__moddi3+0xa4>
c001f3ab:	89 de                	mov    esi,ebx
c001f3ad:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f3b5:	89 d7                	mov    edi,edx
c001f3b7:	85 d2                	test   edx,edx
c001f3b9:	79 09                	jns    c001f3c4 <__moddi3+0x38>
c001f3bb:	f7 d8                	neg    eax
c001f3bd:	83 d2 00             	adc    edx,0x0
c001f3c0:	f7 da                	neg    edx
c001f3c2:	89 d7                	mov    edi,edx
c001f3c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f3c8:	89 cd                	mov    ebp,ecx
c001f3ca:	85 ff                	test   edi,edi
c001f3cc:	75 52                	jne    c001f420 <__moddi3+0x94>
c001f3ce:	89 c3                	mov    ebx,eax
c001f3d0:	39 f0                	cmp    eax,esi
c001f3d2:	76 24                	jbe    c001f3f8 <__moddi3+0x6c>
c001f3d4:	89 c8                	mov    eax,ecx
c001f3d6:	89 f2                	mov    edx,esi
c001f3d8:	f7 f3                	div    ebx
c001f3da:	89 d6                	mov    esi,edx
c001f3dc:	89 f0                	mov    eax,esi
c001f3de:	31 d2                	xor    edx,edx
c001f3e0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f3e4:	85 c9                	test   ecx,ecx
c001f3e6:	74 07                	je     c001f3ef <__moddi3+0x63>
c001f3e8:	f7 d8                	neg    eax
c001f3ea:	83 d2 00             	adc    edx,0x0
c001f3ed:	f7 da                	neg    edx
c001f3ef:	83 c4 2c             	add    esp,0x2c
c001f3f2:	5b                   	pop    ebx
c001f3f3:	5e                   	pop    esi
c001f3f4:	5f                   	pop    edi
c001f3f5:	5d                   	pop    ebp
c001f3f6:	c3                   	ret    
c001f3f7:	90                   	nop
c001f3f8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f3fc:	85 db                	test   ebx,ebx
c001f3fe:	75 0d                	jne    c001f40d <__moddi3+0x81>
c001f400:	b8 01 00 00 00       	mov    eax,0x1
c001f405:	31 d2                	xor    edx,edx
c001f407:	f7 f7                	div    edi
c001f409:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f40d:	89 f0                	mov    eax,esi
c001f40f:	31 d2                	xor    edx,edx
c001f411:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f415:	f7 f7                	div    edi
c001f417:	89 e8                	mov    eax,ebp
c001f419:	f7 f7                	div    edi
c001f41b:	89 d6                	mov    esi,edx
c001f41d:	eb bd                	jmp    c001f3dc <__moddi3+0x50>
c001f41f:	90                   	nop
c001f420:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f424:	39 f7                	cmp    edi,esi
c001f426:	76 20                	jbe    c001f448 <__moddi3+0xbc>
c001f428:	89 c8                	mov    eax,ecx
c001f42a:	89 f2                	mov    edx,esi
c001f42c:	eb b2                	jmp    c001f3e0 <__moddi3+0x54>
c001f42e:	66 90                	xchg   ax,ax
c001f430:	f7 d9                	neg    ecx
c001f432:	83 d3 00             	adc    ebx,0x0
c001f435:	f7 db                	neg    ebx
c001f437:	89 de                	mov    esi,ebx
c001f439:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f441:	e9 6f ff ff ff       	jmp    c001f3b5 <__moddi3+0x29>
c001f446:	66 90                	xchg   ax,ax
c001f448:	0f bd c7             	bsr    eax,edi
c001f44b:	83 f0 1f             	xor    eax,0x1f
c001f44e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f452:	75 24                	jne    c001f478 <__moddi3+0xec>
c001f454:	39 f7                	cmp    edi,esi
c001f456:	72 06                	jb     c001f45e <__moddi3+0xd2>
c001f458:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f45c:	77 0c                	ja     c001f46a <__moddi3+0xde>
c001f45e:	89 e9                	mov    ecx,ebp
c001f460:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f464:	19 fe                	sbb    esi,edi
c001f466:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f46a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f46e:	89 f2                	mov    edx,esi
c001f470:	e9 6b ff ff ff       	jmp    c001f3e0 <__moddi3+0x54>
c001f475:	8d 76 00             	lea    esi,[esi+0x0]
c001f478:	b8 20 00 00 00       	mov    eax,0x20
c001f47d:	89 c2                	mov    edx,eax
c001f47f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f483:	29 da                	sub    edx,ebx
c001f485:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f489:	88 d9                	mov    cl,bl
c001f48b:	d3 e7                	shl    edi,cl
c001f48d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f491:	88 d1                	mov    cl,dl
c001f493:	d3 e8                	shr    eax,cl
c001f495:	09 c7                	or     edi,eax
c001f497:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f49b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f49f:	89 d8                	mov    eax,ebx
c001f4a1:	88 d9                	mov    cl,bl
c001f4a3:	d3 e7                	shl    edi,cl
c001f4a5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f4a9:	89 f3                	mov    ebx,esi
c001f4ab:	88 d1                	mov    cl,dl
c001f4ad:	d3 eb                	shr    ebx,cl
c001f4af:	89 c7                	mov    edi,eax
c001f4b1:	88 c1                	mov    cl,al
c001f4b3:	d3 e6                	shl    esi,cl
c001f4b5:	89 e8                	mov    eax,ebp
c001f4b7:	88 d1                	mov    cl,dl
c001f4b9:	d3 e8                	shr    eax,cl
c001f4bb:	09 f0                	or     eax,esi
c001f4bd:	89 f9                	mov    ecx,edi
c001f4bf:	d3 e5                	shl    ebp,cl
c001f4c1:	89 da                	mov    edx,ebx
c001f4c3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f4c7:	89 d3                	mov    ebx,edx
c001f4c9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f4cd:	89 c6                	mov    esi,eax
c001f4cf:	89 d1                	mov    ecx,edx
c001f4d1:	39 d3                	cmp    ebx,edx
c001f4d3:	72 27                	jb     c001f4fc <__moddi3+0x170>
c001f4d5:	74 21                	je     c001f4f8 <__moddi3+0x16c>
c001f4d7:	29 f5                	sub    ebp,esi
c001f4d9:	19 cb                	sbb    ebx,ecx
c001f4db:	89 de                	mov    esi,ebx
c001f4dd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f4e1:	d3 e6                	shl    esi,cl
c001f4e3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f4e7:	89 f9                	mov    ecx,edi
c001f4e9:	d3 ed                	shr    ebp,cl
c001f4eb:	09 ee                	or     esi,ebp
c001f4ed:	89 f0                	mov    eax,esi
c001f4ef:	d3 eb                	shr    ebx,cl
c001f4f1:	89 da                	mov    edx,ebx
c001f4f3:	e9 e8 fe ff ff       	jmp    c001f3e0 <__moddi3+0x54>
c001f4f8:	39 c5                	cmp    ebp,eax
c001f4fa:	73 db                	jae    c001f4d7 <__moddi3+0x14b>
c001f4fc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f500:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f504:	89 d1                	mov    ecx,edx
c001f506:	89 c6                	mov    esi,eax
c001f508:	eb cd                	jmp    c001f4d7 <__moddi3+0x14b>
c001f50a:	66 90                	xchg   ax,ax

c001f50c <__udivdi3>:
c001f50c:	55                   	push   ebp
c001f50d:	57                   	push   edi
c001f50e:	56                   	push   esi
c001f50f:	53                   	push   ebx
c001f510:	83 ec 1c             	sub    esp,0x1c
c001f513:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f517:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f51b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f51f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f523:	85 d2                	test   edx,edx
c001f525:	75 41                	jne    c001f568 <__udivdi3+0x5c>
c001f527:	39 f7                	cmp    edi,esi
c001f529:	76 15                	jbe    c001f540 <__udivdi3+0x34>
c001f52b:	89 e8                	mov    eax,ebp
c001f52d:	89 f2                	mov    edx,esi
c001f52f:	f7 f7                	div    edi
c001f531:	31 db                	xor    ebx,ebx
c001f533:	89 da                	mov    edx,ebx
c001f535:	83 c4 1c             	add    esp,0x1c
c001f538:	5b                   	pop    ebx
c001f539:	5e                   	pop    esi
c001f53a:	5f                   	pop    edi
c001f53b:	5d                   	pop    ebp
c001f53c:	c3                   	ret    
c001f53d:	8d 76 00             	lea    esi,[esi+0x0]
c001f540:	89 f9                	mov    ecx,edi
c001f542:	85 ff                	test   edi,edi
c001f544:	75 0b                	jne    c001f551 <__udivdi3+0x45>
c001f546:	b8 01 00 00 00       	mov    eax,0x1
c001f54b:	31 d2                	xor    edx,edx
c001f54d:	f7 f7                	div    edi
c001f54f:	89 c1                	mov    ecx,eax
c001f551:	31 d2                	xor    edx,edx
c001f553:	89 f0                	mov    eax,esi
c001f555:	f7 f1                	div    ecx
c001f557:	89 c3                	mov    ebx,eax
c001f559:	89 e8                	mov    eax,ebp
c001f55b:	f7 f1                	div    ecx
c001f55d:	89 da                	mov    edx,ebx
c001f55f:	83 c4 1c             	add    esp,0x1c
c001f562:	5b                   	pop    ebx
c001f563:	5e                   	pop    esi
c001f564:	5f                   	pop    edi
c001f565:	5d                   	pop    ebp
c001f566:	c3                   	ret    
c001f567:	90                   	nop
c001f568:	39 f2                	cmp    edx,esi
c001f56a:	77 1c                	ja     c001f588 <__udivdi3+0x7c>
c001f56c:	0f bd da             	bsr    ebx,edx
c001f56f:	83 f3 1f             	xor    ebx,0x1f
c001f572:	75 24                	jne    c001f598 <__udivdi3+0x8c>
c001f574:	39 f2                	cmp    edx,esi
c001f576:	72 08                	jb     c001f580 <__udivdi3+0x74>
c001f578:	39 ef                	cmp    edi,ebp
c001f57a:	0f 87 84 00 00 00    	ja     c001f604 <__udivdi3+0xf8>
c001f580:	b8 01 00 00 00       	mov    eax,0x1
c001f585:	eb ac                	jmp    c001f533 <__udivdi3+0x27>
c001f587:	90                   	nop
c001f588:	31 db                	xor    ebx,ebx
c001f58a:	31 c0                	xor    eax,eax
c001f58c:	89 da                	mov    edx,ebx
c001f58e:	83 c4 1c             	add    esp,0x1c
c001f591:	5b                   	pop    ebx
c001f592:	5e                   	pop    esi
c001f593:	5f                   	pop    edi
c001f594:	5d                   	pop    ebp
c001f595:	c3                   	ret    
c001f596:	66 90                	xchg   ax,ax
c001f598:	b8 20 00 00 00       	mov    eax,0x20
c001f59d:	29 d8                	sub    eax,ebx
c001f59f:	88 d9                	mov    cl,bl
c001f5a1:	d3 e2                	shl    edx,cl
c001f5a3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f5a7:	89 fa                	mov    edx,edi
c001f5a9:	88 c1                	mov    cl,al
c001f5ab:	d3 ea                	shr    edx,cl
c001f5ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f5b1:	09 d1                	or     ecx,edx
c001f5b3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f5b7:	88 d9                	mov    cl,bl
c001f5b9:	d3 e7                	shl    edi,cl
c001f5bb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f5bf:	89 f7                	mov    edi,esi
c001f5c1:	88 c1                	mov    cl,al
c001f5c3:	d3 ef                	shr    edi,cl
c001f5c5:	88 d9                	mov    cl,bl
c001f5c7:	d3 e6                	shl    esi,cl
c001f5c9:	89 ea                	mov    edx,ebp
c001f5cb:	88 c1                	mov    cl,al
c001f5cd:	d3 ea                	shr    edx,cl
c001f5cf:	09 d6                	or     esi,edx
c001f5d1:	89 f0                	mov    eax,esi
c001f5d3:	89 fa                	mov    edx,edi
c001f5d5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f5d9:	89 d7                	mov    edi,edx
c001f5db:	89 c6                	mov    esi,eax
c001f5dd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f5e1:	39 d7                	cmp    edi,edx
c001f5e3:	72 13                	jb     c001f5f8 <__udivdi3+0xec>
c001f5e5:	74 09                	je     c001f5f0 <__udivdi3+0xe4>
c001f5e7:	89 f0                	mov    eax,esi
c001f5e9:	31 db                	xor    ebx,ebx
c001f5eb:	e9 43 ff ff ff       	jmp    c001f533 <__udivdi3+0x27>
c001f5f0:	88 d9                	mov    cl,bl
c001f5f2:	d3 e5                	shl    ebp,cl
c001f5f4:	39 c5                	cmp    ebp,eax
c001f5f6:	73 ef                	jae    c001f5e7 <__udivdi3+0xdb>
c001f5f8:	8d 46 ff             	lea    eax,[esi-0x1]
c001f5fb:	31 db                	xor    ebx,ebx
c001f5fd:	e9 31 ff ff ff       	jmp    c001f533 <__udivdi3+0x27>
c001f602:	66 90                	xchg   ax,ax
c001f604:	31 c0                	xor    eax,eax
c001f606:	e9 28 ff ff ff       	jmp    c001f533 <__udivdi3+0x27>
c001f60b:	90                   	nop

c001f60c <__umoddi3>:
c001f60c:	55                   	push   ebp
c001f60d:	57                   	push   edi
c001f60e:	56                   	push   esi
c001f60f:	53                   	push   ebx
c001f610:	83 ec 1c             	sub    esp,0x1c
c001f613:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f617:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f61b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f61f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f623:	89 da                	mov    edx,ebx
c001f625:	85 c0                	test   eax,eax
c001f627:	75 37                	jne    c001f660 <__umoddi3+0x54>
c001f629:	39 df                	cmp    edi,ebx
c001f62b:	76 13                	jbe    c001f640 <__umoddi3+0x34>
c001f62d:	89 f0                	mov    eax,esi
c001f62f:	f7 f7                	div    edi
c001f631:	89 d0                	mov    eax,edx
c001f633:	31 d2                	xor    edx,edx
c001f635:	83 c4 1c             	add    esp,0x1c
c001f638:	5b                   	pop    ebx
c001f639:	5e                   	pop    esi
c001f63a:	5f                   	pop    edi
c001f63b:	5d                   	pop    ebp
c001f63c:	c3                   	ret    
c001f63d:	8d 76 00             	lea    esi,[esi+0x0]
c001f640:	89 fd                	mov    ebp,edi
c001f642:	85 ff                	test   edi,edi
c001f644:	75 0b                	jne    c001f651 <__umoddi3+0x45>
c001f646:	b8 01 00 00 00       	mov    eax,0x1
c001f64b:	31 d2                	xor    edx,edx
c001f64d:	f7 f7                	div    edi
c001f64f:	89 c5                	mov    ebp,eax
c001f651:	89 d8                	mov    eax,ebx
c001f653:	31 d2                	xor    edx,edx
c001f655:	f7 f5                	div    ebp
c001f657:	89 f0                	mov    eax,esi
c001f659:	f7 f5                	div    ebp
c001f65b:	89 d0                	mov    eax,edx
c001f65d:	eb d4                	jmp    c001f633 <__umoddi3+0x27>
c001f65f:	90                   	nop
c001f660:	89 f1                	mov    ecx,esi
c001f662:	39 d8                	cmp    eax,ebx
c001f664:	76 0a                	jbe    c001f670 <__umoddi3+0x64>
c001f666:	89 f0                	mov    eax,esi
c001f668:	83 c4 1c             	add    esp,0x1c
c001f66b:	5b                   	pop    ebx
c001f66c:	5e                   	pop    esi
c001f66d:	5f                   	pop    edi
c001f66e:	5d                   	pop    ebp
c001f66f:	c3                   	ret    
c001f670:	0f bd e8             	bsr    ebp,eax
c001f673:	83 f5 1f             	xor    ebp,0x1f
c001f676:	75 1c                	jne    c001f694 <__umoddi3+0x88>
c001f678:	39 d8                	cmp    eax,ebx
c001f67a:	72 04                	jb     c001f680 <__umoddi3+0x74>
c001f67c:	39 f7                	cmp    edi,esi
c001f67e:	77 08                	ja     c001f688 <__umoddi3+0x7c>
c001f680:	89 da                	mov    edx,ebx
c001f682:	29 fe                	sub    esi,edi
c001f684:	19 c2                	sbb    edx,eax
c001f686:	89 f1                	mov    ecx,esi
c001f688:	89 c8                	mov    eax,ecx
c001f68a:	83 c4 1c             	add    esp,0x1c
c001f68d:	5b                   	pop    ebx
c001f68e:	5e                   	pop    esi
c001f68f:	5f                   	pop    edi
c001f690:	5d                   	pop    ebp
c001f691:	c3                   	ret    
c001f692:	66 90                	xchg   ax,ax
c001f694:	ba 20 00 00 00       	mov    edx,0x20
c001f699:	29 ea                	sub    edx,ebp
c001f69b:	89 e9                	mov    ecx,ebp
c001f69d:	d3 e0                	shl    eax,cl
c001f69f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f6a3:	89 f8                	mov    eax,edi
c001f6a5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f6a9:	88 d1                	mov    cl,dl
c001f6ab:	d3 e8                	shr    eax,cl
c001f6ad:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f6b1:	09 c1                	or     ecx,eax
c001f6b3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f6b7:	89 e9                	mov    ecx,ebp
c001f6b9:	d3 e7                	shl    edi,cl
c001f6bb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f6bf:	89 d8                	mov    eax,ebx
c001f6c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f6c5:	88 d1                	mov    cl,dl
c001f6c7:	d3 e8                	shr    eax,cl
c001f6c9:	89 c7                	mov    edi,eax
c001f6cb:	89 e9                	mov    ecx,ebp
c001f6cd:	d3 e3                	shl    ebx,cl
c001f6cf:	89 f0                	mov    eax,esi
c001f6d1:	88 d1                	mov    cl,dl
c001f6d3:	d3 e8                	shr    eax,cl
c001f6d5:	09 d8                	or     eax,ebx
c001f6d7:	89 e9                	mov    ecx,ebp
c001f6d9:	d3 e6                	shl    esi,cl
c001f6db:	89 f3                	mov    ebx,esi
c001f6dd:	89 fa                	mov    edx,edi
c001f6df:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f6e3:	89 d1                	mov    ecx,edx
c001f6e5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f6e9:	89 c6                	mov    esi,eax
c001f6eb:	89 d7                	mov    edi,edx
c001f6ed:	39 d1                	cmp    ecx,edx
c001f6ef:	72 27                	jb     c001f718 <__umoddi3+0x10c>
c001f6f1:	74 21                	je     c001f714 <__umoddi3+0x108>
c001f6f3:	89 ca                	mov    edx,ecx
c001f6f5:	29 f3                	sub    ebx,esi
c001f6f7:	19 fa                	sbb    edx,edi
c001f6f9:	89 d0                	mov    eax,edx
c001f6fb:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f6ff:	d3 e0                	shl    eax,cl
c001f701:	89 e9                	mov    ecx,ebp
c001f703:	d3 eb                	shr    ebx,cl
c001f705:	09 d8                	or     eax,ebx
c001f707:	d3 ea                	shr    edx,cl
c001f709:	83 c4 1c             	add    esp,0x1c
c001f70c:	5b                   	pop    ebx
c001f70d:	5e                   	pop    esi
c001f70e:	5f                   	pop    edi
c001f70f:	5d                   	pop    ebp
c001f710:	c3                   	ret    
c001f711:	8d 76 00             	lea    esi,[esi+0x0]
c001f714:	39 c3                	cmp    ebx,eax
c001f716:	73 db                	jae    c001f6f3 <__umoddi3+0xe7>
c001f718:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f71c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f720:	89 d7                	mov    edi,edx
c001f722:	89 c6                	mov    esi,eax
c001f724:	eb cd                	jmp    c001f6f3 <__umoddi3+0xe7>
c001f726:	66 90                	xchg   ax,ax
c001f728:	66 90                	xchg   ax,ax
c001f72a:	66 90                	xchg   ax,ax
c001f72c:	66 90                	xchg   ax,ax
c001f72e:	66 90                	xchg   ax,ax

c001f730 <fabs>:
c001f730:	83 ec 0c             	sub    esp,0xc
c001f733:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f737:	89 04 24             	mov    DWORD PTR [esp],eax
c001f73a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f73e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c001f743:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f747:	dd 04 24             	fld    QWORD PTR [esp]
c001f74a:	83 c4 0c             	add    esp,0xc
c001f74d:	c3                   	ret    
c001f74e:	66 90                	xchg   ax,ax

c001f750 <lrint>:
c001f750:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c001f754:	83 ec 04             	sub    esp,0x4
c001f757:	db 1c 24             	fistp  DWORD PTR [esp]
c001f75a:	58                   	pop    eax
c001f75b:	c3                   	ret    

c001f75c <lrintf>:
c001f75c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c001f760:	83 ec 04             	sub    esp,0x4
c001f763:	db 1c 24             	fistp  DWORD PTR [esp]
c001f766:	58                   	pop    eax
c001f767:	c3                   	ret    

Disassembly of section .init:

c001f768 <_init>:
c001f768:	55                   	push   ebp
c001f769:	89 e5                	mov    ebp,esp
c001f76b:	e8 a8 09 fe ff       	call   c0000118 <frame_dummy>
c001f770:	e8 a3 fa ff ff       	call   c001f218 <__do_global_ctors_aux>
c001f775:	5d                   	pop    ebp
c001f776:	c3                   	ret    

Disassembly of section .fini:

c001f777 <_fini>:
c001f777:	55                   	push   ebp
c001f778:	89 e5                	mov    ebp,esp
c001f77a:	e8 29 09 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001f77f:	5d                   	pop    ebp
c001f780:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f782 <Computer::~Computer()>:
c001f782:	83 ec 0c             	sub    esp,0xc
c001f785:	ba a4 12 02 c0       	mov    edx,0xc00212a4
c001f78a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f78e:	89 10                	mov    DWORD PTR [eax],edx
c001f790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f794:	83 ec 0c             	sub    esp,0xc
c001f797:	50                   	push   eax
c001f798:	e8 2f 0d ff ff       	call   c00104cc <Device::~Device()>
c001f79d:	83 c4 10             	add    esp,0x10
c001f7a0:	90                   	nop
c001f7a1:	83 c4 0c             	add    esp,0xc
c001f7a4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f7a6 <Computer::~Computer()>:
c001f7a6:	83 ec 0c             	sub    esp,0xc
c001f7a9:	83 ec 0c             	sub    esp,0xc
c001f7ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7b0:	e8 cd ff ff ff       	call   c001f782 <Computer::~Computer()>
c001f7b5:	83 c4 10             	add    esp,0x10
c001f7b8:	83 ec 08             	sub    esp,0x8
c001f7bb:	68 ec 01 00 00       	push   0x1ec
c001f7c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f7c4:	e8 22 f9 fe ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c001f7c9:	83 c4 10             	add    esp,0x10
c001f7cc:	83 c4 0c             	add    esp,0xc
c001f7cf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f7d0 <idleCommon()>:
c001f7d0:	83 ec 0c             	sub    esp,0xc
c001f7d3:	e8 71 92 ff ff       	call   c0018a49 <lockScheduler()>
c001f7d8:	e8 b5 95 ff ff       	call   c0018d92 <schedule()>
c001f7dd:	83 c4 0c             	add    esp,0xc
c001f7e0:	e9 66 92 ff ff       	jmp    c0018a4b <unlockScheduler()>

Disassembly of section .text._ZN3CPU7readCR3Ev:

c001f7e5 <CPU::readCR3()>:
c001f7e5:	83 ec 10             	sub    esp,0x10
c001f7e8:	0f 20 d8             	mov    eax,cr3
c001f7eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f7ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f7f3:	83 c4 10             	add    esp,0x10
c001f7f6:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR3Em:

c001f7f7 <CPU::writeCR3(unsigned long)>:
c001f7f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7fb:	0f 22 d8             	mov    cr3,eax
c001f7fe:	90                   	nop
c001f7ff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f800 <LinkedList<UnixFile>::~LinkedList()>:
c001f800:	90                   	nop
c001f801:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f802 <LinkedList<UnixFile>::LinkedList()>:
c001f802:	83 ec 0c             	sub    esp,0xc
c001f805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f809:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f80f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f813:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f81a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f81e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f825:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f829:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f82f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f833:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f83e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f845:	83 ec 0c             	sub    esp,0xc
c001f848:	68 9d 15 02 c0       	push   0xc002159d
c001f84d:	e8 bf f9 fe ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001f852:	83 c4 10             	add    esp,0x10
c001f855:	90                   	nop
c001f856:	83 c4 0c             	add    esp,0xc
c001f859:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f85a <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f85a:	83 ec 0c             	sub    esp,0xc
c001f85d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f862:	75 10                	jne    c001f874 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f864:	83 ec 0c             	sub    esp,0xc
c001f867:	68 b8 15 02 c0       	push   0xc00215b8
c001f86c:	e8 cf 61 ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c001f871:	83 c4 10             	add    esp,0x10
c001f874:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f878:	8b 00                	mov    eax,DWORD PTR [eax]
c001f87a:	85 c0                	test   eax,eax
c001f87c:	74 34                	je     c001f8b2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f87e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f882:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f885:	85 c0                	test   eax,eax
c001f887:	74 29                	je     c001f8b2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f889:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f88d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f890:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f894:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f897:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f89b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f89f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8a9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f8b0:	eb 65                	jmp    c001f917 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f8b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8b6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8b8:	85 c0                	test   eax,eax
c001f8ba:	75 4b                	jne    c001f907 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f8bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8c3:	85 c0                	test   eax,eax
c001f8c5:	75 40                	jne    c001f907 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f8c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8cf:	89 10                	mov    DWORD PTR [eax],edx
c001f8d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8d5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8d9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f8dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8e3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f8ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8f1:	85 c0                	test   eax,eax
c001f8f3:	74 22                	je     c001f917 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f8f5:	83 ec 0c             	sub    esp,0xc
c001f8f8:	68 da 15 02 c0       	push   0xc00215da
c001f8fd:	e8 3e 61 ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c001f902:	83 c4 10             	add    esp,0x10
c001f905:	eb 10                	jmp    c001f917 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f907:	83 ec 0c             	sub    esp,0xc
c001f90a:	68 e4 15 02 c0       	push   0xc00215e4
c001f90f:	e8 2c 61 ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c001f914:	83 c4 10             	add    esp,0x10
c001f917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f91b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f91e:	8d 50 01             	lea    edx,[eax+0x1]
c001f921:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f925:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f928:	90                   	nop
c001f929:	83 c4 0c             	add    esp,0xc
c001f92c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f92e <LinkedList<UnixFile>::getFirstElement()>:
c001f92e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f932:	8b 00                	mov    eax,DWORD PTR [eax]
c001f934:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f936 <LinkedList<UnixFile>::removeFirst()>:
c001f936:	83 ec 0c             	sub    esp,0xc
c001f939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f93d:	8b 00                	mov    eax,DWORD PTR [eax]
c001f93f:	85 c0                	test   eax,eax
c001f941:	75 12                	jne    c001f955 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f943:	83 ec 0c             	sub    esp,0xc
c001f946:	68 f0 15 02 c0       	push   0xc00215f0
c001f94b:	e8 f0 60 ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c001f950:	83 c4 10             	add    esp,0x10
c001f953:	eb 7e                	jmp    c001f9d3 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f959:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f95c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f95f:	85 c0                	test   eax,eax
c001f961:	74 10                	je     c001f973 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f963:	83 ec 0c             	sub    esp,0xc
c001f966:	68 3b 16 02 c0       	push   0xc002163b
c001f96b:	e8 d0 60 ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c001f970:	83 c4 10             	add    esp,0x10
c001f973:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f977:	8b 00                	mov    eax,DWORD PTR [eax]
c001f979:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f97c:	85 c0                	test   eax,eax
c001f97e:	75 33                	jne    c001f9b3 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f984:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f98a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f98e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f999:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f99c:	83 f8 01             	cmp    eax,0x1
c001f99f:	74 21                	je     c001f9c2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f9a1:	83 ec 0c             	sub    esp,0xc
c001f9a4:	68 14 16 02 c0       	push   0xc0021614
c001f9a9:	e8 92 60 ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c001f9ae:	83 c4 10             	add    esp,0x10
c001f9b1:	eb 0f                	jmp    c001f9c2 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f9b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9b7:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9b9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c0:	89 10                	mov    DWORD PTR [eax],edx
c001f9c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9c6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9c9:	8d 50 ff             	lea    edx,[eax-0x1]
c001f9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9d0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f9d3:	83 c4 0c             	add    esp,0xc
c001f9d6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f9d8 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f9d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9dc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f9df:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f9e0 <DriverlessDevice::~DriverlessDevice()>:
c001f9e0:	ba a4 1c 02 c0       	mov    edx,0xc0021ca4
c001f9e5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9e9:	89 10                	mov    DWORD PTR [eax],edx
c001f9eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9ef:	50                   	push   eax
c001f9f0:	e8 d7 0a ff ff       	call   c00104cc <Device::~Device()>
c001f9f5:	83 c4 04             	add    esp,0x4
c001f9f8:	90                   	nop
c001f9f9:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f9fa <DriverlessDevice::~DriverlessDevice()>:
c001f9fa:	83 ec 0c             	sub    esp,0xc
c001f9fd:	83 ec 0c             	sub    esp,0xc
c001fa00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa04:	e8 d7 ff ff ff       	call   c001f9e0 <DriverlessDevice::~DriverlessDevice()>
c001fa09:	83 c4 10             	add    esp,0x10
c001fa0c:	83 ec 08             	sub    esp,0x8
c001fa0f:	68 58 01 00 00       	push   0x158
c001fa14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa18:	e8 ce f6 fe ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c001fa1d:	83 c4 10             	add    esp,0x10
c001fa20:	83 c4 0c             	add    esp,0xc
c001fa23:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fa24 <LinkedList<Device>::addElement(Device*)>:
c001fa24:	83 ec 0c             	sub    esp,0xc
c001fa27:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fa2c:	75 10                	jne    c001fa3e <LinkedList<Device>::addElement(Device*)+0x1a>
c001fa2e:	83 ec 0c             	sub    esp,0xc
c001fa31:	68 b8 15 02 c0       	push   0xc00215b8
c001fa36:	e8 05 60 ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c001fa3b:	83 c4 10             	add    esp,0x10
c001fa3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa42:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa44:	85 c0                	test   eax,eax
c001fa46:	74 3a                	je     c001fa82 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fa48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa4f:	85 c0                	test   eax,eax
c001fa51:	74 2f                	je     c001fa82 <LinkedList<Device>::addElement(Device*)+0x5e>
c001fa53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa57:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa5a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa5e:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fa64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa68:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa6c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fa6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa76:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fa80:	eb 68                	jmp    c001faea <LinkedList<Device>::addElement(Device*)+0xc6>
c001fa82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa86:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa88:	85 c0                	test   eax,eax
c001fa8a:	75 4e                	jne    c001fada <LinkedList<Device>::addElement(Device*)+0xb6>
c001fa8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fa93:	85 c0                	test   eax,eax
c001fa95:	75 43                	jne    c001fada <LinkedList<Device>::addElement(Device*)+0xb6>
c001fa97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa9b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fa9f:	89 10                	mov    DWORD PTR [eax],edx
c001faa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001faa9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001faac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fab0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fab3:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fabd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fac1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fac4:	85 c0                	test   eax,eax
c001fac6:	74 22                	je     c001faea <LinkedList<Device>::addElement(Device*)+0xc6>
c001fac8:	83 ec 0c             	sub    esp,0xc
c001facb:	68 da 15 02 c0       	push   0xc00215da
c001fad0:	e8 6b 5f ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c001fad5:	83 c4 10             	add    esp,0x10
c001fad8:	eb 10                	jmp    c001faea <LinkedList<Device>::addElement(Device*)+0xc6>
c001fada:	83 ec 0c             	sub    esp,0xc
c001fadd:	68 e4 15 02 c0       	push   0xc00215e4
c001fae2:	e8 59 5f ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c001fae7:	83 c4 10             	add    esp,0x10
c001faea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001faf1:	8d 50 01             	lea    edx,[eax+0x1]
c001faf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001faf8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fafb:	90                   	nop
c001fafc:	83 c4 0c             	add    esp,0xc
c001faff:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fb00 <LinkedList<Device>::LinkedList()>:
c001fb00:	83 ec 0c             	sub    esp,0xc
c001fb03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb07:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb11:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb1c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb27:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb31:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb3c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb43:	83 ec 0c             	sub    esp,0xc
c001fb46:	68 9d 15 02 c0       	push   0xc002159d
c001fb4b:	e8 c1 f6 fe ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001fb50:	83 c4 10             	add    esp,0x10
c001fb53:	90                   	nop
c001fb54:	83 c4 0c             	add    esp,0xc
c001fb57:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR0Ev:

c001fb58 <CPU::readCR0()>:
c001fb58:	83 ec 10             	sub    esp,0x10
c001fb5b:	0f 20 c0             	mov    eax,cr0
c001fb5e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb62:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb66:	83 c4 10             	add    esp,0x10
c001fb69:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR0Em:

c001fb6a <CPU::writeCR0(unsigned long)>:
c001fb6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb6e:	0f 22 c0             	mov    cr0,eax
c001fb71:	90                   	nop
c001fb72:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR0Ev:

c001fb73 <CPU::readDR0()>:
c001fb73:	83 ec 10             	sub    esp,0x10
c001fb76:	0f 21 c0             	mov    eax,db0
c001fb79:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb7d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb81:	83 c4 10             	add    esp,0x10
c001fb84:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR1Ev:

c001fb85 <CPU::readDR1()>:
c001fb85:	83 ec 10             	sub    esp,0x10
c001fb88:	0f 21 c8             	mov    eax,db1
c001fb8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fb8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fb93:	83 c4 10             	add    esp,0x10
c001fb96:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR2Ev:

c001fb97 <CPU::readDR2()>:
c001fb97:	83 ec 10             	sub    esp,0x10
c001fb9a:	0f 21 d0             	mov    eax,db2
c001fb9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fba1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fba5:	83 c4 10             	add    esp,0x10
c001fba8:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR3Ev:

c001fba9 <CPU::readDR3()>:
c001fba9:	83 ec 10             	sub    esp,0x10
c001fbac:	0f 21 d8             	mov    eax,db3
c001fbaf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbb7:	83 c4 10             	add    esp,0x10
c001fbba:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR6Ev:

c001fbbb <CPU::readDR6()>:
c001fbbb:	83 ec 10             	sub    esp,0x10
c001fbbe:	0f 21 f0             	mov    eax,db6
c001fbc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbc9:	83 c4 10             	add    esp,0x10
c001fbcc:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readDR7Ev:

c001fbcd <CPU::readDR7()>:
c001fbcd:	83 ec 10             	sub    esp,0x10
c001fbd0:	0f 21 f8             	mov    eax,db7
c001fbd3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fbd7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fbdb:	83 c4 10             	add    esp,0x10
c001fbde:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fbe0 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fbe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbe4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbe6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fbe8 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fbe8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbec:	8b 00                	mov    eax,DWORD PTR [eax]
c001fbee:	85 c0                	test   eax,eax
c001fbf0:	75 0e                	jne    c001fc00 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fbf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fbf6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fbf9:	85 c0                	test   eax,eax
c001fbfb:	75 03                	jne    c001fc00 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fbfd:	b0 01                	mov    al,0x1
c001fbff:	c3                   	ret    
c001fc00:	b0 00                	mov    al,0x0
c001fc02:	90                   	nop
c001fc03:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fc04 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fc04:	83 ec 0c             	sub    esp,0xc
c001fc07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc0b:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc0d:	85 c0                	test   eax,eax
c001fc0f:	75 15                	jne    c001fc26 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c001fc11:	83 ec 0c             	sub    esp,0xc
c001fc14:	68 f0 15 02 c0       	push   0xc00215f0
c001fc19:	e8 22 5e ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c001fc1e:	83 c4 10             	add    esp,0x10
c001fc21:	e9 88 00 00 00       	jmp    c001fcae <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c001fc26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc2a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fc2d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fc30:	85 c0                	test   eax,eax
c001fc32:	0f 95 c0             	setne  al
c001fc35:	84 c0                	test   al,al
c001fc37:	74 10                	je     c001fc49 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c001fc39:	83 ec 0c             	sub    esp,0xc
c001fc3c:	68 3b 16 02 c0       	push   0xc002163b
c001fc41:	e8 fa 5d ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c001fc46:	83 c4 10             	add    esp,0x10
c001fc49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc4d:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc4f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fc52:	85 c0                	test   eax,eax
c001fc54:	0f 94 c0             	sete   al
c001fc57:	84 c0                	test   al,al
c001fc59:	74 33                	je     c001fc8e <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c001fc5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc5f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fc65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc69:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fc70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fc77:	83 f8 01             	cmp    eax,0x1
c001fc7a:	74 21                	je     c001fc9d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001fc7c:	83 ec 0c             	sub    esp,0xc
c001fc7f:	68 14 16 02 c0       	push   0xc0021614
c001fc84:	e8 b7 5d ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c001fc89:	83 c4 10             	add    esp,0x10
c001fc8c:	eb 0f                	jmp    c001fc9d <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c001fc8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc92:	8b 00                	mov    eax,DWORD PTR [eax]
c001fc94:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001fc97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc9b:	89 10                	mov    DWORD PTR [eax],edx
c001fc9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fca4:	8d 50 ff             	lea    edx,[eax-0x1]
c001fca7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcab:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fcae:	83 c4 0c             	add    esp,0xc
c001fcb1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001fcb2 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001fcb2:	83 ec 0c             	sub    esp,0xc
c001fcb5:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fcba:	75 10                	jne    c001fccc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c001fcbc:	83 ec 0c             	sub    esp,0xc
c001fcbf:	68 b8 15 02 c0       	push   0xc00215b8
c001fcc4:	e8 77 5d ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c001fcc9:	83 c4 10             	add    esp,0x10
c001fccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcd0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fcd2:	85 c0                	test   eax,eax
c001fcd4:	74 34                	je     c001fd0a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001fcd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcda:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fcdd:	85 c0                	test   eax,eax
c001fcdf:	74 29                	je     c001fd0a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c001fce1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fce8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcec:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001fcef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcf3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fcf7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fcfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcfe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd01:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fd08:	eb 65                	jmp    c001fd6f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fd0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd0e:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd10:	85 c0                	test   eax,eax
c001fd12:	75 4b                	jne    c001fd5f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fd14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd1b:	85 c0                	test   eax,eax
c001fd1d:	75 40                	jne    c001fd5f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c001fd1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd23:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd27:	89 10                	mov    DWORD PTR [eax],edx
c001fd29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd2d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd31:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd3b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fd42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd46:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd49:	85 c0                	test   eax,eax
c001fd4b:	74 22                	je     c001fd6f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fd4d:	83 ec 0c             	sub    esp,0xc
c001fd50:	68 da 15 02 c0       	push   0xc00215da
c001fd55:	e8 e6 5c ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c001fd5a:	83 c4 10             	add    esp,0x10
c001fd5d:	eb 10                	jmp    c001fd6f <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c001fd5f:	83 ec 0c             	sub    esp,0xc
c001fd62:	68 e4 15 02 c0       	push   0xc00215e4
c001fd67:	e8 d4 5c ff ff       	call   c0015a40 <Krnl::panic(char const*)>
c001fd6c:	83 c4 10             	add    esp,0x10
c001fd6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd73:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fd76:	8d 50 01             	lea    edx,[eax+0x1]
c001fd79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd7d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fd80:	90                   	nop
c001fd81:	83 c4 0c             	add    esp,0xc
c001fd84:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001fd86 <ACPI::~ACPI()>:
c001fd86:	83 ec 0c             	sub    esp,0xc
c001fd89:	ba 5c 24 02 c0       	mov    edx,0xc002245c
c001fd8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd92:	89 10                	mov    DWORD PTR [eax],edx
c001fd94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd98:	83 ec 0c             	sub    esp,0xc
c001fd9b:	50                   	push   eax
c001fd9c:	e8 2b 07 ff ff       	call   c00104cc <Device::~Device()>
c001fda1:	83 c4 10             	add    esp,0x10
c001fda4:	90                   	nop
c001fda5:	83 c4 0c             	add    esp,0xc
c001fda8:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001fdaa <ACPI::~ACPI()>:
c001fdaa:	83 ec 0c             	sub    esp,0xc
c001fdad:	83 ec 0c             	sub    esp,0xc
c001fdb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdb4:	e8 cd ff ff ff       	call   c001fd86 <ACPI::~ACPI()>
c001fdb9:	83 c4 10             	add    esp,0x10
c001fdbc:	83 ec 08             	sub    esp,0x8
c001fdbf:	68 68 22 00 00       	push   0x2268
c001fdc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdc8:	e8 1e f3 fe ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c001fdcd:	83 c4 10             	add    esp,0x10
c001fdd0:	83 c4 0c             	add    esp,0xc
c001fdd3:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fdd4 <CPU::~CPU()>:
c001fdd4:	83 ec 0c             	sub    esp,0xc
c001fdd7:	ba 4c 28 02 c0       	mov    edx,0xc002284c
c001fddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde0:	89 10                	mov    DWORD PTR [eax],edx
c001fde2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde6:	83 ec 0c             	sub    esp,0xc
c001fde9:	50                   	push   eax
c001fdea:	e8 dd 06 ff ff       	call   c00104cc <Device::~Device()>
c001fdef:	83 c4 10             	add    esp,0x10
c001fdf2:	90                   	nop
c001fdf3:	83 c4 0c             	add    esp,0xc
c001fdf6:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fdf8 <CPU::~CPU()>:
c001fdf8:	83 ec 0c             	sub    esp,0xc
c001fdfb:	83 ec 0c             	sub    esp,0xc
c001fdfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe02:	e8 cd ff ff ff       	call   c001fdd4 <CPU::~CPU()>
c001fe07:	83 c4 10             	add    esp,0x10
c001fe0a:	83 ec 08             	sub    esp,0x8
c001fe0d:	68 98 11 00 00       	push   0x1198
c001fe12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe16:	e8 d0 f2 fe ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c001fe1b:	83 c4 10             	add    esp,0x10
c001fe1e:	83 c4 0c             	add    esp,0xc
c001fe21:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR4Ev:

c001fe22 <CPU::readCR4()>:
c001fe22:	83 ec 10             	sub    esp,0x10
c001fe25:	0f 20 e0             	mov    eax,cr4
c001fe28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe30:	83 c4 10             	add    esp,0x10
c001fe33:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeDR7Em:

c001fe34 <CPU::writeDR7(unsigned long)>:
c001fe34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe38:	0f 23 f8             	mov    db7,eax
c001fe3b:	90                   	nop
c001fe3c:	c3                   	ret    

Disassembly of section .text._ZN3CPU8writeCR4Em:

c001fe3d <CPU::writeCR4(unsigned long)>:
c001fe3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe41:	0f 22 e0             	mov    cr4,eax
c001fe44:	90                   	nop
c001fe45:	c3                   	ret    

Disassembly of section .text._ZN3CPU7readCR2Ev:

c001fe46 <CPU::readCR2()>:
c001fe46:	83 ec 10             	sub    esp,0x10
c001fe49:	0f 20 d0             	mov    eax,cr2
c001fe4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe54:	83 c4 10             	add    esp,0x10
c001fe57:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fe58 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fe58:	90                   	nop
c001fe59:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fe5a <ThreadControlBlock::ThreadControlBlock()>:
c001fe5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe5e:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fe65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe69:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fe70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe74:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fe7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe7f:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c001fe86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe8a:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001fe8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe92:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c001fe96:	90                   	nop
c001fe97:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fe98 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fe98:	83 ec 0c             	sub    esp,0xc
c001fe9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe9f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001feb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001febb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001febf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fec9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fed4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fedb:	83 ec 0c             	sub    esp,0xc
c001fede:	68 9d 15 02 c0       	push   0xc002159d
c001fee3:	e8 29 f3 fe ff       	call   c000f211 <Dbg::kprintf(char const*, ...)>
c001fee8:	83 c4 10             	add    esp,0x10
c001feeb:	90                   	nop
c001feec:	83 c4 0c             	add    esp,0xc
c001feef:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fef0 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fef0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fef4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fef7:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fef8 <PCI::~PCI()>:
c001fef8:	83 ec 0c             	sub    esp,0xc
c001fefb:	ba 2c 35 02 c0       	mov    edx,0xc002352c
c001ff00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff04:	89 10                	mov    DWORD PTR [eax],edx
c001ff06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff0a:	83 ec 0c             	sub    esp,0xc
c001ff0d:	50                   	push   eax
c001ff0e:	e8 c3 ff fe ff       	call   c000fed6 <Bus::~Bus()>
c001ff13:	83 c4 10             	add    esp,0x10
c001ff16:	90                   	nop
c001ff17:	83 c4 0c             	add    esp,0xc
c001ff1a:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001ff1c <PCI::~PCI()>:
c001ff1c:	83 ec 0c             	sub    esp,0xc
c001ff1f:	83 ec 0c             	sub    esp,0xc
c001ff22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff26:	e8 cd ff ff ff       	call   c001fef8 <PCI::~PCI()>
c001ff2b:	83 c4 10             	add    esp,0x10
c001ff2e:	83 ec 08             	sub    esp,0x8
c001ff31:	68 58 01 00 00       	push   0x158
c001ff36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff3a:	e8 ac f1 fe ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c001ff3f:	83 c4 10             	add    esp,0x10
c001ff42:	83 c4 0c             	add    esp,0xc
c001ff45:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001ff46 <IDE::~IDE()>:
c001ff46:	83 ec 0c             	sub    esp,0xc
c001ff49:	ba 90 37 02 c0       	mov    edx,0xc0023790
c001ff4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff52:	89 10                	mov    DWORD PTR [eax],edx
c001ff54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff58:	83 ec 0c             	sub    esp,0xc
c001ff5b:	50                   	push   eax
c001ff5c:	e8 7d 0a ff ff       	call   c00109de <HardDiskController::~HardDiskController()>
c001ff61:	83 c4 10             	add    esp,0x10
c001ff64:	90                   	nop
c001ff65:	83 c4 0c             	add    esp,0xc
c001ff68:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001ff6a <IDE::~IDE()>:
c001ff6a:	83 ec 0c             	sub    esp,0xc
c001ff6d:	83 ec 0c             	sub    esp,0xc
c001ff70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff74:	e8 cd ff ff ff       	call   c001ff46 <IDE::~IDE()>
c001ff79:	83 c4 10             	add    esp,0x10
c001ff7c:	83 ec 08             	sub    esp,0x8
c001ff7f:	68 70 02 00 00       	push   0x270
c001ff84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff88:	e8 5e f1 fe ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c001ff8d:	83 c4 10             	add    esp,0x10
c001ff90:	83 c4 0c             	add    esp,0xc
c001ff93:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001ff94 <ATA::~ATA()>:
c001ff94:	83 ec 0c             	sub    esp,0xc
c001ff97:	ba e0 37 02 c0       	mov    edx,0xc00237e0
c001ff9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa0:	89 10                	mov    DWORD PTR [eax],edx
c001ffa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa6:	83 ec 0c             	sub    esp,0xc
c001ffa9:	50                   	push   eax
c001ffaa:	e8 0d 0b ff ff       	call   c0010abc <PhysicalDisk::~PhysicalDisk()>
c001ffaf:	83 c4 10             	add    esp,0x10
c001ffb2:	90                   	nop
c001ffb3:	83 c4 0c             	add    esp,0xc
c001ffb6:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001ffb8 <ATA::~ATA()>:
c001ffb8:	83 ec 0c             	sub    esp,0xc
c001ffbb:	83 ec 0c             	sub    esp,0xc
c001ffbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffc2:	e8 cd ff ff ff       	call   c001ff94 <ATA::~ATA()>
c001ffc7:	83 c4 10             	add    esp,0x10
c001ffca:	83 ec 08             	sub    esp,0x8
c001ffcd:	68 7c 01 00 00       	push   0x17c
c001ffd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ffd6:	e8 10 f1 fe ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c001ffdb:	83 c4 10             	add    esp,0x10
c001ffde:	83 c4 0c             	add    esp,0xc
c001ffe1:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001ffe2 <ATAPI::~ATAPI()>:
c001ffe2:	83 ec 0c             	sub    esp,0xc
c001ffe5:	ba 4c 38 02 c0       	mov    edx,0xc002384c
c001ffea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffee:	89 10                	mov    DWORD PTR [eax],edx
c001fff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fff4:	83 ec 0c             	sub    esp,0xc
c001fff7:	50                   	push   eax
c001fff8:	e8 bf 0a ff ff       	call   c0010abc <PhysicalDisk::~PhysicalDisk()>
c001fffd:	83 c4 10             	add    esp,0x10
c0020000:	90                   	nop
c0020001:	83 c4 0c             	add    esp,0xc
c0020004:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020006 <ATAPI::~ATAPI()>:
c0020006:	83 ec 0c             	sub    esp,0xc
c0020009:	83 ec 0c             	sub    esp,0xc
c002000c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020010:	e8 cd ff ff ff       	call   c001ffe2 <ATAPI::~ATAPI()>
c0020015:	83 c4 10             	add    esp,0x10
c0020018:	83 ec 08             	sub    esp,0x8
c002001b:	68 80 01 00 00       	push   0x180
c0020020:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020024:	e8 c2 f0 fe ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c0020029:	83 c4 10             	add    esp,0x10
c002002c:	83 c4 0c             	add    esp,0xc
c002002f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0020030 <AVX::~AVX()>:
c0020030:	83 ec 0c             	sub    esp,0xc
c0020033:	ba 88 38 02 c0       	mov    edx,0xc0023888
c0020038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002003c:	89 10                	mov    DWORD PTR [eax],edx
c002003e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020042:	83 ec 0c             	sub    esp,0xc
c0020045:	50                   	push   eax
c0020046:	e8 f5 0a ff ff       	call   c0010b40 <FPU::~FPU()>
c002004b:	83 c4 10             	add    esp,0x10
c002004e:	90                   	nop
c002004f:	83 c4 0c             	add    esp,0xc
c0020052:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0020054 <AVX::~AVX()>:
c0020054:	83 ec 0c             	sub    esp,0xc
c0020057:	83 ec 0c             	sub    esp,0xc
c002005a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002005e:	e8 cd ff ff ff       	call   c0020030 <AVX::~AVX()>
c0020063:	83 c4 10             	add    esp,0x10
c0020066:	83 ec 08             	sub    esp,0x8
c0020069:	68 58 01 00 00       	push   0x158
c002006e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020072:	e8 74 f0 fe ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c0020077:	83 c4 10             	add    esp,0x10
c002007a:	83 c4 0c             	add    esp,0xc
c002007d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002007e <MMX::~MMX()>:
c002007e:	83 ec 0c             	sub    esp,0xc
c0020081:	ba c8 38 02 c0       	mov    edx,0xc00238c8
c0020086:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002008a:	89 10                	mov    DWORD PTR [eax],edx
c002008c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020090:	83 ec 0c             	sub    esp,0xc
c0020093:	50                   	push   eax
c0020094:	e8 a7 0a ff ff       	call   c0010b40 <FPU::~FPU()>
c0020099:	83 c4 10             	add    esp,0x10
c002009c:	90                   	nop
c002009d:	83 c4 0c             	add    esp,0xc
c00200a0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00200a2 <MMX::~MMX()>:
c00200a2:	83 ec 0c             	sub    esp,0xc
c00200a5:	83 ec 0c             	sub    esp,0xc
c00200a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200ac:	e8 cd ff ff ff       	call   c002007e <MMX::~MMX()>
c00200b1:	83 c4 10             	add    esp,0x10
c00200b4:	83 ec 08             	sub    esp,0x8
c00200b7:	68 58 01 00 00       	push   0x158
c00200bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200c0:	e8 26 f0 fe ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c00200c5:	83 c4 10             	add    esp,0x10
c00200c8:	83 c4 0c             	add    esp,0xc
c00200cb:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00200cc <SSE::~SSE()>:
c00200cc:	83 ec 0c             	sub    esp,0xc
c00200cf:	ba 08 39 02 c0       	mov    edx,0xc0023908
c00200d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200d8:	89 10                	mov    DWORD PTR [eax],edx
c00200da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200de:	83 ec 0c             	sub    esp,0xc
c00200e1:	50                   	push   eax
c00200e2:	e8 59 0a ff ff       	call   c0010b40 <FPU::~FPU()>
c00200e7:	83 c4 10             	add    esp,0x10
c00200ea:	90                   	nop
c00200eb:	83 c4 0c             	add    esp,0xc
c00200ee:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00200f0 <SSE::~SSE()>:
c00200f0:	83 ec 0c             	sub    esp,0xc
c00200f3:	83 ec 0c             	sub    esp,0xc
c00200f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00200fa:	e8 cd ff ff ff       	call   c00200cc <SSE::~SSE()>
c00200ff:	83 c4 10             	add    esp,0x10
c0020102:	83 ec 08             	sub    esp,0x8
c0020105:	68 58 01 00 00       	push   0x158
c002010a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002010e:	e8 d8 ef fe ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c0020113:	83 c4 10             	add    esp,0x10
c0020116:	83 c4 0c             	add    esp,0xc
c0020119:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c002011a <x87::~x87()>:
c002011a:	83 ec 0c             	sub    esp,0xc
c002011d:	ba 48 39 02 c0       	mov    edx,0xc0023948
c0020122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020126:	89 10                	mov    DWORD PTR [eax],edx
c0020128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002012c:	83 ec 0c             	sub    esp,0xc
c002012f:	50                   	push   eax
c0020130:	e8 0b 0a ff ff       	call   c0010b40 <FPU::~FPU()>
c0020135:	83 c4 10             	add    esp,0x10
c0020138:	90                   	nop
c0020139:	83 c4 0c             	add    esp,0xc
c002013c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002013e <x87::~x87()>:
c002013e:	83 ec 0c             	sub    esp,0xc
c0020141:	83 ec 0c             	sub    esp,0xc
c0020144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020148:	e8 cd ff ff ff       	call   c002011a <x87::~x87()>
c002014d:	83 c4 10             	add    esp,0x10
c0020150:	83 ec 08             	sub    esp,0x8
c0020153:	68 58 01 00 00       	push   0x158
c0020158:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002015c:	e8 8a ef fe ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c0020161:	83 c4 10             	add    esp,0x10
c0020164:	83 c4 0c             	add    esp,0xc
c0020167:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0020168 <IOAPIC::~IOAPIC()>:
c0020168:	83 ec 0c             	sub    esp,0xc
c002016b:	ba a0 3a 02 c0       	mov    edx,0xc0023aa0
c0020170:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020174:	89 10                	mov    DWORD PTR [eax],edx
c0020176:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002017a:	83 ec 0c             	sub    esp,0xc
c002017d:	50                   	push   eax
c002017e:	e8 49 03 ff ff       	call   c00104cc <Device::~Device()>
c0020183:	83 c4 10             	add    esp,0x10
c0020186:	90                   	nop
c0020187:	83 c4 0c             	add    esp,0xc
c002018a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002018c <IOAPIC::~IOAPIC()>:
c002018c:	83 ec 0c             	sub    esp,0xc
c002018f:	83 ec 0c             	sub    esp,0xc
c0020192:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020196:	e8 cd ff ff ff       	call   c0020168 <IOAPIC::~IOAPIC()>
c002019b:	83 c4 10             	add    esp,0x10
c002019e:	83 ec 08             	sub    esp,0x8
c00201a1:	68 68 01 00 00       	push   0x168
c00201a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201aa:	e8 3c ef fe ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c00201af:	83 c4 10             	add    esp,0x10
c00201b2:	83 c4 0c             	add    esp,0xc
c00201b5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00201b6 <APIC::~APIC()>:
c00201b6:	83 ec 0c             	sub    esp,0xc
c00201b9:	ba 58 3a 02 c0       	mov    edx,0xc0023a58
c00201be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201c2:	89 10                	mov    DWORD PTR [eax],edx
c00201c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201c8:	83 ec 0c             	sub    esp,0xc
c00201cb:	50                   	push   eax
c00201cc:	e8 39 0e ff ff       	call   c001100a <InterruptController::~InterruptController()>
c00201d1:	83 c4 10             	add    esp,0x10
c00201d4:	90                   	nop
c00201d5:	83 c4 0c             	add    esp,0xc
c00201d8:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00201da <APIC::~APIC()>:
c00201da:	83 ec 0c             	sub    esp,0xc
c00201dd:	83 ec 0c             	sub    esp,0xc
c00201e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201e4:	e8 cd ff ff ff       	call   c00201b6 <APIC::~APIC()>
c00201e9:	83 c4 10             	add    esp,0x10
c00201ec:	83 ec 08             	sub    esp,0x8
c00201ef:	68 58 21 00 00       	push   0x2158
c00201f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201f8:	e8 ee ee fe ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c00201fd:	83 c4 10             	add    esp,0x10
c0020200:	83 c4 0c             	add    esp,0xc
c0020203:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0020204 <PIC::~PIC()>:
c0020204:	83 ec 0c             	sub    esp,0xc
c0020207:	ba f0 3a 02 c0       	mov    edx,0xc0023af0
c002020c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020210:	89 10                	mov    DWORD PTR [eax],edx
c0020212:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020216:	83 ec 0c             	sub    esp,0xc
c0020219:	50                   	push   eax
c002021a:	e8 eb 0d ff ff       	call   c001100a <InterruptController::~InterruptController()>
c002021f:	83 c4 10             	add    esp,0x10
c0020222:	90                   	nop
c0020223:	83 c4 0c             	add    esp,0xc
c0020226:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0020228 <PIC::~PIC()>:
c0020228:	83 ec 0c             	sub    esp,0xc
c002022b:	83 ec 0c             	sub    esp,0xc
c002022e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020232:	e8 cd ff ff ff       	call   c0020204 <PIC::~PIC()>
c0020237:	83 c4 10             	add    esp,0x10
c002023a:	83 ec 08             	sub    esp,0x8
c002023d:	68 58 21 00 00       	push   0x2158
c0020242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020246:	e8 a0 ee fe ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c002024b:	83 c4 10             	add    esp,0x10
c002024e:	83 c4 0c             	add    esp,0xc
c0020251:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0020252 <APICTimer::~APICTimer()>:
c0020252:	83 ec 0c             	sub    esp,0xc
c0020255:	ba 44 3b 02 c0       	mov    edx,0xc0023b44
c002025a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002025e:	89 10                	mov    DWORD PTR [eax],edx
c0020260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020264:	83 ec 0c             	sub    esp,0xc
c0020267:	50                   	push   eax
c0020268:	e8 cb 2a ff ff       	call   c0012d38 <Timer::~Timer()>
c002026d:	83 c4 10             	add    esp,0x10
c0020270:	90                   	nop
c0020271:	83 c4 0c             	add    esp,0xc
c0020274:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0020276 <APICTimer::~APICTimer()>:
c0020276:	83 ec 0c             	sub    esp,0xc
c0020279:	83 ec 0c             	sub    esp,0xc
c002027c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020280:	e8 cd ff ff ff       	call   c0020252 <APICTimer::~APICTimer()>
c0020285:	83 c4 10             	add    esp,0x10
c0020288:	83 ec 08             	sub    esp,0x8
c002028b:	68 60 01 00 00       	push   0x160
c0020290:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020294:	e8 52 ee fe ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c0020299:	83 c4 10             	add    esp,0x10
c002029c:	83 c4 0c             	add    esp,0xc
c002029f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00202a0 <PIT::~PIT()>:
c00202a0:	83 ec 0c             	sub    esp,0xc
c00202a3:	ba 94 3b 02 c0       	mov    edx,0xc0023b94
c00202a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ac:	89 10                	mov    DWORD PTR [eax],edx
c00202ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202b2:	83 ec 0c             	sub    esp,0xc
c00202b5:	50                   	push   eax
c00202b6:	e8 7d 2a ff ff       	call   c0012d38 <Timer::~Timer()>
c00202bb:	83 c4 10             	add    esp,0x10
c00202be:	90                   	nop
c00202bf:	83 c4 0c             	add    esp,0xc
c00202c2:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c00202c4 <PIT::~PIT()>:
c00202c4:	83 ec 0c             	sub    esp,0xc
c00202c7:	83 ec 0c             	sub    esp,0xc
c00202ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202ce:	e8 cd ff ff ff       	call   c00202a0 <PIT::~PIT()>
c00202d3:	83 c4 10             	add    esp,0x10
c00202d6:	83 ec 08             	sub    esp,0x8
c00202d9:	68 5c 01 00 00       	push   0x15c
c00202de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00202e2:	e8 04 ee fe ff       	call   c000f0eb <operator delete(void*, unsigned long)>
c00202e7:	83 c4 10             	add    esp,0x10
c00202ea:	83 c4 0c             	add    esp,0xc
c00202ed:	c3                   	ret    
